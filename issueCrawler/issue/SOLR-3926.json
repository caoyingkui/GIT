{
    "id": "SOLR-3926",
    "title": "solrj should support better way of finding active sorts",
    "details": {
        "affect_versions": "4.0",
        "status": "Closed",
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The Solrj api uses ortogonal concepts for setting/removing and getting sort information. Setting/removing uses a combination of (name,order), while getters return a String \"name order\":\n\n\npublic SolrQuery setSortField(String field, ORDER order);\npublic SolrQuery addSortField(String field, ORDER order);\npublic SolrQuery removeSortField(String field, ORDER order);\npublic String[] getSortFields();\npublic String getSortField();\n\n\n\nIf you want to use the current sort information to present a list of active sorts, with the possibility to remove then, you need to manually parse the string(s) returned from getSortFields, to recreate the information required by removeSortField(). Not difficult, but not convenient either \n\nTherefore this suggestion: Add a new method public Map<String,ORDER> getSortFieldMap(); which returns an ordered map of active sort fields. This will make introspection of the current sort setup much easier.\n\n\n  public Map<String, ORDER> getSortFieldMap() {\n    String[] actualSortFields = getSortFields();\n    if (actualSortFields == null || actualSortFields.length == 0)\n      return Collections.emptyMap();\n\n    Map<String, ORDER> sortFieldMap = new LinkedHashMap<String, ORDER>();\n    for (String sortField : actualSortFields) {\n      String[] fieldSpec = sortField.trim().split(\" \");\n      sortFieldMap.put(fieldSpec[0], ORDER.valueOf(fieldSpec[1]));\n    }\n\n    return Collections.unmodifiableMap(sortFieldMap);\n  }\n\n\n\nFor what it's worth, this is possible client code:\n\n\nSystem.out.println(\"Active sorts\");\n\nMap<String, ORDER> fieldMap = getSortFieldMap(query);\nfor (String field : fieldMap.keySet()) {\n   System.out.println(\"- \" + field + \"; dir=\" + fieldMap.get(field));\n}",
    "attachments": {
        "SOLR-3926.patch": "https://issues.apache.org/jira/secure/attachment/12553176/SOLR-3926.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Eirik Lygre",
            "id": "comment-13495595",
            "date": "2012-11-12T20:26:57+0000",
            "content": "This is a patch to implement SolrQuery.getSortFieldMap(), a better way to introspect a SolrQuery for sort information. The patch contains javadoc for the method, and a new unit test that verifies the implementation. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13495847",
            "date": "2012-11-13T01:56:07+0000",
            "content": "+1\nSeems useful and the patch is very small, straight-forward, and clean. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13495854",
            "date": "2012-11-13T02:04:59+0000",
            "content": "Splitting on whitespace isn't likely to work to well with everything we can put in the field list these days (functions, augmenters, etc).\nWhy not keep sort information in the client code in symbolic form (i.e. not a serialized string), manipulate it there, and then set to the SolrQuery right before submitting it? "
        },
        {
            "author": "Eirik Lygre",
            "id": "comment-13496137",
            "date": "2012-11-13T12:17:21+0000",
            "content": "So, the patch solves my problem , and I'm not sure what the other use cases really are, so i'll be looking at input from others (Yonik Seeley, Otis Gospodnetic?) in order to understand the requirements. My Solr skills do not extend to functions, augmenters, etc \u2013 at least not yet!\n\nAlso, to aid the discussion, this is what we got today:\n\n\n\tSolrQuery stores the sort field as a comma-separated string of \"field direction\"\n\tSolrQuery.getSortField() returns the full string, e.g. \"price asc, date desc, qty desc\"\n\tSolrQuery.getSortFields() yields [ \"price asc\", \" date desc\", \" qty desc\" ], including extraneous whitespace\n\n\n\nCan you provide a couple of examples of how that would/should work with the api, extending my examples below. Then, I'll see if I feel qualified, and if you guys promise to guide with qa, I'll do my best.\n\n\nq.addSortField(\"price\", SolrQuery.ORDER.asc);\nq.addSortField(\"date\", SolrQuery.ORDER.desc);\nq.addSortField(\"qty\", SolrQuery.ORDER.desc);\nq.removeSortField(\"date\", SolrQuery.ORDER.desc);\n\n "
        },
        {
            "author": "Eirik Lygre",
            "id": "comment-13498352",
            "date": "2012-11-15T21:28:23+0000",
            "content": "Things that seem simple sometimes are. Sometimes they're not \n\nFirst, I've found a bug in the current implementation of removeSortField() (not from my patch, but in the release). It works as follows:\n\n\n\taddSortField() concatinates the \"sort\" parameter, using a comma with no whitespace. Four fields would be \"a asc,b asc,c asc,d asc\"\n\tgetSortFields() now returns a string array free from whitespace: [ \"a asc\", \"b asc\", \"c asc\", \"d asc\" ]\n\tremoveSortField(\"c\", ASC) first creates the partial string to remove, e.g. \"c asc\", then joins all getSortFields() not equal() the string, yielding [ \"a asc\", \"b asc\", \"d asc\" ]\n\tHowever, removeSortField() uses join with whitespace, creating \"a asc, b asc, d asc\"\n\tgetSortFields() now returns [ \"a asc\", \" b asc\", \" d asc\"], with a space at the beginning of the last two elements\n\tremoveSortField(\"b\", ASC) will now fail, since the partial string \"b asc\" is not equal() the element \" b asc\"\n\n\n\nThe problem can be shown in this (new) test case:\n\n\npublic void testSolrQuerySortRemove() {\n  SolrQuery q = new SolrQuery(\"dog\");\n  q.addSortField(\"price\", SolrQuery.ORDER.asc);\n  q.addSortField(\"date\", SolrQuery.ORDER.desc);\n  q.addSortField(\"qty\", SolrQuery.ORDER.desc);\n  q.removeSortField(\"date\", SolrQuery.ORDER.desc);\n  Assert.assertEquals(2, q.getSortFields().length);\n  q.removeSortField(\"qty\", SolrQuery.ORDER.desc);\n  q.removeSortField(\"price\", SolrQuery.ORDER.asc);\n  Assert.assertEquals(null, q.getSortFields());\n}\n\n\n\nThe easiest (and also most robust) fix would be to use a white-space aware expression in getSortFields(), e.g. replacing s.split(\",\") with s.split(\", *\"), and reuse getSortField() inside removeSortField():\n\n\npublic String[] getSortFields() {\n  String s = getSortField();\n  if (s==null) return null;\n  return s.trim().split(\", *\");\n}\n\npublic SolrQuery removeSortField(String field, ORDER order) {\n  String[] sorts = getSortFields();\n  if (sorts != null) {\n    String removeSort = toSortString(field, order);\n    String s = join(sorts, \", \", removeSort);\n    if (s.length()==0) s=null;\n    this.set(CommonParams.SORT, s);\n  }\n  return this;\n}\n\n\n\nI can include this fix in my patch under this jira, but I guess there might also be a desire for either a separate jira or a separate patch, or both. I don't know the Solr project culture on this, so I'm asking Otis and Yonik for advice. What do you guys think?\n\nSecond, on the bigger suggestion from Yonik (to work on symbolic form rather than the serialized string), this will change some semantics, in that it is today possible to combine the use of .set(\"sort\", \"<somesortspec>\") with addSortField(), removeSortField(), etc, and this will probably not be possible with the other api. It may get better, but it will change behaviour. My suggestion would be to apply this patch first, then think the other one properly through, including discussions on the list. Again, what do you guys think? "
        },
        {
            "author": "Eirik Lygre",
            "id": "comment-13502346",
            "date": "2012-11-21T21:52:20+0000",
            "content": "Having published a couple of revisions on the dev mailing list, here is a proposed patch. It comprises the following:\n\n\n\tFixes to removeSortField() and getSortFields() (ref comments in this issue)\n\tDeprecation of setSortField(), addSortField(), removeSortField(), getSortFields() and getSortField(), in favor of a map-based symbolic implementation\n\tNew symbolic sort api as shown below\n\tJavadoc for the new api\n\tUpdated and new unit tests for all of the above\n\n\n\n\nSolrQuery setSorts(Map<String, ORDER> value);\nSolrQuery clearSorts();\nMap<String, ORDER> getSorts();\nSolrQuery setSort(String field, ORDER order);\nSolrQuery addSort(String field, ORDER order);\nSolrQuery addOrUpdateSort(String field, ORDER order);\nSolrQuery removeSort(String field);\n\n\n\nBased on the feedback to the initial patch, this revised patch is proposed for inclusion into the next release version (4.0.1) and above. "
        },
        {
            "author": "Eirik Lygre",
            "id": "comment-13502445",
            "date": "2012-11-21T23:51:48+0000",
            "content": "Renaming and a minor optimization of the private function serializeSorts().  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13504276",
            "date": "2012-11-27T00:54:45+0000",
            "content": "Eirik:\n\nThanks for bring this up and working on improving things \u2013 I think the direction your patch is is taking looks really good, but i have a few comments that i think we should try to address before committing...\n\n1) the javadocs for the new methods should clarify that when they refer to \"field\" that can actually be any sortable value (ie: field names, function, \"score\", etc...)\n\n2) we should add javadocs to the deprecated methods explaining why they have been deprecated (ie: what limitations they have) with {@link} tags pointing out the corresponding new methods\n\n3) I don't actually see any advantage in deprecating/removing the \"public String getSortField()\" since it's read only ... we should just document that it returns the serialized value of the \"sort\" param and that for programatic access the new methods are available\n\nLastly: I'm really not a fan of having \"setSorts\" and \"getSorts\" use \"Map<String, ORDER>\" in their APIs ... (I know, it was yonik's idea on the mailing list ... i cringed when i read that).  Even if we're using LinkedHashMap unde the covers it seems like it would be far to easy for a naive user to let a HashMap make it's way to setSorts and then not understand why the final order isn't what they want.\n\nI think it would make a lot more sense to introduce a new tiny little immutable \"SortClause\" class that just models the String+ORDER pair, and have all of these methods take/return List<SortClause>.  (It would also help simplify the javadocs for all these methods, because only the SortClause class would need to explain what the legal values are for the String, w/o cut/pasting on each of SolrQuery methods).\n\nWhat do you think? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13504303",
            "date": "2012-11-27T02:03:31+0000",
            "content": "Lastly: I'm really not a fan of having \"setSorts\" and \"getSorts\" use \"Map<String, ORDER>\" in their APIs ... (I know, it was yonik's idea on the mailing list ... i cringed when i read that).\n\nI was just running with what seemed to be the implied requirement (which appeared to be random access-by-name to the sort criteria).  Thinking about it a second longer though, I can't see any obvious use cases for that.  List<SortClause> does seem more natural. "
        },
        {
            "author": "Eirik Lygre",
            "id": "comment-13505483",
            "date": "2012-11-28T14:29:36+0000",
            "content": "I'll take the blame for guiding Yonik down the Map-path; at the time (while parsing the sort-field), returning a LinkedHashMap was an easy way to achieve the business objectives. Then, as the idea developed, it became less so. Anyway, that's why we review, right?\n\nHere is an extended view of my current implementation. It will probably not be like this, ref questions below \n\n\npublic String getSortField();\n\npublic SolrQuery setSorts(List<SortClause> value);\npublic SolrQuery clearSorts();\npublic List<SortClause> getSorts();\npublic SolrQuery setSort(SortClause sortClause);\npublic SolrQuery addSort(SortClause sortClause);\npublic SolrQuery addOrUpdateSort(SortClause sortClause);\npublic SolrQuery removeSort(String itemName);\n\npublic static class SortClause {\n  public static SortClause create (String item, ORDER order);\n  public static SortClause create (String item, String order)\n  public static SortClause asc (String item);\n  public static SortClause desc (String item);\n  public String getItem();\n  public ORDER getOrder();\n}\n\n\n\nSome questions, illustrated by code examples. Some questions relate to apis shown above, and are REMOVE? questions; some questions relate to apis not shown above, and are ADD? questions. Note that some of the examples use stuff from other\n\n\n// Usage, per the api above\nquery.setSort(SolrQuery.SortClause.desc(\"rating\"));\nquery.setSort(SolrQuery.SortClause.create(\"rating\", SolrQuery.ORDER.desc));\nquery.setSort(SolrQuery.SortClause.create(\"rating\", SortQuery.ORDER.valueOf(\"desc\")));\nquery.setSort(SolrQuery.SortClause.create(\"rating\", \"asc\"));\nquery.remove(\"rating\");\n\n\n\n\nI want to retain query.removeSort(String), because that's really the use case (remove sort based on item name, ignoring ordering). I'm not really sure about query.removeSort(SortClause), which does in fact only use the item name, but it would be symmetrical to the add-functions.\n\n\n// Q1: Should we REMOVE query.removeSort (String)\nquery.addSort(new SolrQuery.SortClause(\"rating\", SolrQuery.ORDER.desc));\nquery.addSort(new SolrQuery.SortClause(\"price\", SolrQuery.ORDER.asc));\nquery.removeSort(\"rating\");\n\n// Q2: Should we ADD query.removeSort(SortClause)?\nquery.addSort(new SolrQuery.SortClause(\"rating\", SolrQuery.ORDER.desc));\nquery.addSort(new SolrQuery.SortClause(\"price\", SolrQuery.ORDER.asc));\nquery.removeSort(new SolrQuery.SortClause(\"price\", SolrQuery.ORDER.desc));\t// Remove irregardless of order\n\n\n\n\nWe might build convenience functions query.xxxSort (String, order) and query.xxxSort (String,String) as shown below. It would make usage simpler, but come with a footprint. The SortClause.asc(), .desc() and .create() factory functions described below make this less needed, I think:\n\n\n// Q3: Should we ADD convenience functions query.xxxSort (String, order)\nquery.addSort(\"price\", SolrQuery.ORDER.asc);\n\n// Q4: Should we ADD convenience functions query.xxxSort (String, String)\nquery.addSort(\"price\", \"asc\");\n\n\n\n\nThe api currently has convenience functions for creating SortClause. The functions asc() and desc() make it easier (and more compact) to create SortClause. The create() functions are there for symmetry (always use static methods instead of constructors). The constructors aren't public, but maybe they should be?\n\n\n// Q5: Should we REMOVE asc() and desc() convenience factory methods:\nquery.setSort(SolrQuery.SortClause.desc(\"rating\"));\nquery.setSort(SolrQuery.SortClause.asc(\"rating\"));\n\n// Q6: Should we REMOVE create(String,ORDER) convenience factory method (use constructor instead)\nquery.setSort(SolrQuery.SortClause.create(\"rating\", SolrQuery.ORDER.desc));\nquery.setSort(SolrQuery.SortClause.create(\"rating\", SolrQuery.ORDER.valueOf(\"desc\")));\n\n// Q7:Should we REMOVE create(String,ORDER) convenience factory method (Complements Q5, when the order is in fact a string)\nquery.setSort(SolrQuery.SortClause.create(\"rating\", \"desc\"));\n\n// Q8: Should we ADD a simple constructor, typically instead of Q5-Q7?\nquery.setSort(new SolrQuery.SortClause(\"rating\", SolrQuery.ORDER.desc));\nquery.setSort(new SolrQuery.SortClause(\"rating\", SolrQuery.ORDER.valueOf(\"desc\")));\n\n\n\nA couple of other items:\n\nQ9: Currently, SortClause is an inner class of SolrQuery. Let me know if this is an issue\nQ10: What the heck do we call \"the thing to sort\". I don't want to call it a \"field\", since it can be many other things. I've chosen to call it an \"item\", but is there another, better name?\nQ11: Should we have SortClause.hashCode() and SortClause.equals()? "
        },
        {
            "author": "Eirik Lygre",
            "id": "comment-13509702",
            "date": "2012-12-04T12:32:47+0000",
            "content": "This patch implements the API as discussed above. The patch contains javadoc and unit tests, and was built against http://svn.apache.org/repos/asf/lucene/dev/branches/branch_4x.\n\nThis patch solves the original requirements that led to this issue (introspection of active sorts), and hopefully also the requirements of the Solr project (as represented by Yonik Seeley and Hoss Man). "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13537850",
            "date": "2012-12-21T13:20:54+0000",
            "content": "I'll go ahead and shepherd this through the commit process, run all the unit tests and all that stuff unless people have objections..\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13554342",
            "date": "2013-01-15T21:06:30+0000",
            "content": "Erick, should this be pushed to 4.2? "
        },
        {
            "author": "Eirik Lygre",
            "id": "comment-13560943",
            "date": "2013-01-23T18:51:32+0000",
            "content": "Now that 4.1 is out, could this be integrated and committed into the 4.2. The sooner it gets in, the more quality testing time people get to have with it! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13560954",
            "date": "2013-01-23T19:04:13+0000",
            "content": "Eirik:\n\nThanks for prompting me, I should have it in place this weekend at the latest.\n\nErick "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13561584",
            "date": "2013-01-24T12:25:30+0000",
            "content": "Changed comments to \"since 4.2\" since I didn't get this done promptly.\n\nTests pass on trunk, if there are no objections I'll commit this tomorrow (Friday). "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13563658",
            "date": "2013-01-26T22:22:22+0000",
            "content": "[trunk commit] Erick Erickson\nhttp://svn.apache.org/viewvc?view=revision&revision=1438977\n\nFix for SOLR-3926, thanks Eirik "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13563672",
            "date": "2013-01-26T23:03:57+0000",
            "content": "trunk: r - 1438977\n4x:    r - 1438986\n\nAlso added to CHANGES.txt\n\nThanks Eirik! And I have to admit this variant of Erik/Erick/Eric/Erich is a new one for me, but there can never be too many of these in the world <G>... "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13563673",
            "date": "2013-01-26T23:12:13+0000",
            "content": "[branch_4x commit] Erick Erickson\nhttp://svn.apache.org/viewvc?view=revision&revision=1438986\n\nFix for SOLR-3926, thanks Eirik "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654201",
            "date": "2013-05-10T10:34:22+0000",
            "content": "Closed after release. "
        }
    ]
}