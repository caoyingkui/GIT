{
    "id": "SOLR-10525",
    "title": "Stacked recovery requests do no cancel an in progress recovery first.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "https://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/update/DefaultSolrCoreState.java#L300-L310\n\nTwo issues with this code:\n\n\n          boolean locked = recoveryLock.tryLock();\n          try {\n            if (!locked) {\n              if (recoveryWaiting.get() > 0) { // line 1\n                return;\n              }\n              recoveryWaiting.incrementAndGet(); // line 2\n            } else {\n              recoveryWaiting.incrementAndGet();\n              cancelRecovery(); // line 3\n}\n\n\n\nThe cancelRecovery on line 3 call will only hit when there are no recoveries to actually cancel (since we got the lock that means there are no recoveries in progress). Instead it should be moved either to the either branch of the if, or outside after the if since we know we will be running a recovery at that point.\n\nThis code doesn't always prevent multiple requests from stacking. If there is a recovery running, but no recoveries currently waiting, multiple requests can check the count at line 1 before any of them will increment the count at line 2 and thus all of them will hit the increment.\n\nI don't have specific tests for this, but it's causing failures for me on my SOLR-9555 work in progress.",
    "attachments": {
        "SOLR-10525.patch": "https://issues.apache.org/jira/secure/attachment/12864077/SOLR-10525.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-19T20:48:30+0000",
            "content": "Patch for 7.0 fixed, probably good for 6.x also (in which case whoever commits should move the changes entry) ",
            "author": "Mike Drob",
            "id": "comment-15975488"
        },
        {
            "date": "2017-04-19T20:49:53+0000",
            "content": "Good catch! We def want to fix that cancel. The fact that multiple can still stack is as designed though. The current design was simply to make stacking unlikely vs the old guaranteed - but that is why we have a counter rather than a boolean. ",
            "author": "Mark Miller",
            "id": "comment-15975493"
        },
        {
            "date": "2017-04-19T20:59:52+0000",
            "content": "The fact that multiple can still stack is as designed though\nwhy? Looking at SOLR-8371 I see Shalin Shekhar Mangar noticed the same thing which went unanswered, and we also filed SOLR-8702 that looks like the same issue of multiple requests stacking. ",
            "author": "Mike Drob",
            "id": "comment-15975512"
        },
        {
            "date": "2017-04-19T21:33:32+0000",
            "content": "Don't know if I answered Shalin's comment, but I've answered others about it. I'm sure that is part of SOLR-8702 being filed, but seems no one has worked on it. The current strategy was easy to get to from where we were, and still very fast. ",
            "author": "Mark Miller",
            "id": "comment-15975566"
        },
        {
            "date": "2017-04-19T21:36:43+0000",
            "content": "looks like the same issue of multiple requests stacking.\n\nThe reason for SOLR-8702 by the way is to examine no stacking at all. The issue that reduced stacking was titled more like \"reduce stacking\" not eliminate it. To eliminate it, we would want a patch and to examine if the change is worth any slow down in recovery calls we might have. Right now we can get hammered by recovery calls and they should all be very, very fast and result in few or no stack ups. Previously you stacked up every request.\n\nIn other words, if you eliminate stacking completely, is a recovery request going to cost more than a tryLock and atomic integer increment. Cause in the a concurrent env, that is super fast. ",
            "author": "Mark Miller",
            "id": "comment-15975573"
        },
        {
            "date": "2017-04-19T21:44:01+0000",
            "content": "Of course its complicated though. With the changes in SOLR-9555, we may finally be eliminating the main way we can get pounded with recovery requests (in a similar progress not perfection improvement, we have reduced how much pounding happens in the past). ",
            "author": "Mark Miller",
            "id": "comment-15975585"
        },
        {
            "date": "2017-04-20T00:29:52+0000",
            "content": "It occurs to me that with this change if there is a steady stream of recovery requests then each one will start up and get cancelled. I don't have a good grasp on how heavy the start cost here is, it looks like mostly checking the update log in RecoveryStrategy.\n\nThe previous behaviour would be to run a full recovery and then run another full recovery. If failures were still happening at that point, then we could queue up another recovery. So we're not impacting availability when the root cause hasn't been fixed.\n\nIt does get better if the root cause is more temporal, since the final recovery can start as soon as the problem is fixed, instead of waiting for another recovery to finish.\n\nI think I've convinced myself to not worry about the churn, but would like a second opinion. ",
            "author": "Mike Drob",
            "id": "comment-15975807"
        },
        {
            "date": "2017-04-20T15:49:37+0000",
            "content": "New patch attached that keeps the recoveryWaiting counter. ",
            "author": "Mike Drob",
            "id": "comment-15976934"
        },
        {
            "date": "2017-04-24T04:26:45+0000",
            "content": "I think I've convinced myself to not worry about the churn, but would like a second opinion.\n\nNo, I do think it's a problem at a high level. I'm actually hoping we get the other issue so that it won't hit ZK for every failed update. That is part of the problem now and why I tried to make this so concurrent. Right now, tons of update failures coming in ends up generating tons of recovery http requests from the leader to the replica, and I guess with LIR, a ZK contact. Rather than just hitting ZK the same way in SOLR-9555 though, it would be nice to have something that would hit ZK at most n times per second or something. An update fail means, some point later than now, but very soonish, trigger a recovery. We shouldn't have to do this per update and in fact we really don't want to anymore.\n\nWith that issue fixed, ensuring no recovery stack up no longer really has to worry about such high concurrency. ",
            "author": "Mark Miller",
            "id": "comment-15980716"
        },
        {
            "date": "2018-01-29T09:01:14+0000",
            "content": "Committed by SOLR-11702 ",
            "author": "Cao Manh Dat",
            "id": "comment-16343100"
        },
        {
            "date": "2018-01-29T10:47:37+0000",
            "content": "Commit f7a75dcc1a2935deda9e4dd4068e141b4b79b820 in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f7a75dc ]\n\nSOLR-10525: Updates CHANGES.txt ",
            "author": "ASF subversion and git services",
            "id": "comment-16343203"
        },
        {
            "date": "2018-01-29T10:48:22+0000",
            "content": "Commit ec2198126fde3638064617d83a077717189d514c in lucene-solr's branch refs/heads/branch_7x from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ec21981 ]\n\nSOLR-10525: Updates CHANGES.txt ",
            "author": "ASF subversion and git services",
            "id": "comment-16343204"
        }
    ]
}