{
    "id": "LUCENE-1070",
    "title": "DateTools with DAY resoltion dosn't work depending on your timezone",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "Hi.\n\nThere is another issue, closed, that introduced a bug : https://issues.apache.org/jira/browse/LUCENE-491\n\nHere is a simple TestCase :\n\nDateFormat df = new SimpleDateFormat(\"dd/MM/yyyy HH:mm\");\nDate d1 = df.parse(\"10/10/2008 10:00\");\nSystem.err.println(DateTools.dateToString(d1, Resolution.DAY));\nDate d2 = df.parse(\"10/10/2008 00:00\");\nSystem.err.println(DateTools.dateToString(d2, Resolution.DAY));\n\nthis output :\n\n20081010\n20081009\n\nSo, days are the same, but with DAY resolution, the value indexed doesn't refer to the same day.\nThis is because of DateTools.round() : using a Calendar initialised to GMT can make that the Date given is on yesterday depending on my timezone .\n\nThe part I don't  understand is why take a date for inputfield then convert it to calendar then convert it again before printing ?\nThis operation is supposed to \"round\" the date but using simply DateFormat to format the date and print only wanted fields do the same work, isn't it ?\n\nThe problem is : I see absolutly no solution actually. We could have a WorkAround if datetoString() took a Date as inputField but with a long, the timezone is lost.\nI also suppose that the correction made on the other issue (https://issues.apache.org/jira/browse/LUCENE-491) is worse than the bug because it correct only for those who use date with a different timezone than the local timezone of the JVM.\n\nSo, my solution : add a DateTools.dateToString() that take a Date in parameter and deprecate the version that use a long.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-11-28T16:00:13+0000",
            "content": "I'm not a Lucene developer but just wanted to comment from a user perspective - I found the current Lucene behavior 100% correct and this bug report wrong. \n\nFirst of all, AFAIK this doesn't have anything to do with the DAY precision - with any higher precision one can also get other day (and other hour), this is just how timezones work: conversion from one timezone to another changes time. But then during the search one should also use DateTools.dateToString and the search will work correctly. And after applying DateTools.stringToDate on search results you'll get the correct dates.\n\nSearch with a DAY precision will search for the given day in UTC timezone not in a local one, if it is not sufficient for your purposes then you should use an HOUR precision during indexing and search - DAY is simply not precise enough for your purposes. Another alternative that should probably work (I never tried) is to create your Date (that you are passing to DateTools.dateToString) in UTC timezone, in this case no timezone conversion should be applied unless there is some bug in DateTools and you'll get exactly the same day indexed (but then on retrieving results DateTools.stringToDate will change you day because it'll apply the local timezone). And after all nobody is forced to use DateTools and can implement their own way to store dates if no timezone conversions are required - it is probably the best way for this specific case. ",
            "author": "Alexei Dets",
            "id": "comment-12546284"
        },
        {
            "date": "2007-11-28T16:58:27+0000",
            "content": "I agree that nobody is forced to use DateTools. \nI used my own version, of course. \nBut the report is not for me. It's just because I thought It was a bug.\n\n\nI also know that for 2 same date, DateTools will return the same string.\nMy case is this :\n\nI have Dates to index. \nWhen Indexing, my Date objects contains hour and minutes.\nwhen searching, date are typed by users without time. They are parsed  with dd/MM/yyyy pattern.\n\nBecause of the round() documentation, I thought there would be no problem because I use \"DAY\" Resolution.\nRTFM is not always a good option.\n\nFinally, maybe it's not a bug, it's an architectural issue : when using long for date, timezone is lost. \nI continue to think that dateToString must take a Date for parameter. This way, there would be no more ambiguity.\n\n\n ",
            "author": "Mike Baroukh",
            "id": "comment-12546301"
        },
        {
            "date": "2008-02-19T20:09:58+0000",
            "content": "If the behavior is correct, it is extremely unintuitive.\n\nOne would expect that dateToString() and stringToDate() would be symmetric. ",
            "author": "Kevin Conaway",
            "id": "comment-12570412"
        },
        {
            "date": "2011-01-27T10:46:04+0000",
            "content": "stringToDate and dateToString are symmetric so this is not an issue. The first comment already explains why UTC is correct.\n\nClosing this because of long inactivity. ",
            "author": "Uwe Schindler",
            "id": "comment-12987488"
        },
        {
            "date": "2011-02-05T03:26:30+0000",
            "content": "A few problems:\n\n1) Looks like the round() method is doing the wrong thing for DAY resolution (wiping out DAY instead of HOUR)\n\nelse if (resolution == Resolution.DAY) {\n      calInstance.set(Calendar.HOUR_OF_DAY, 0);\n      calInstance.set(Calendar.MINUTE, 0);\n      calInstance.set(Calendar.SECOND, 0);\n      calInstance.set(Calendar.MILLISECOND, 0);\n\n2) If java.sql.Timestamp is passed in (e.g. by Hibernate Search) then all bets are off ",
            "author": "jawaid hakim",
            "id": "comment-12990900"
        },
        {
            "date": "2011-02-05T03:26:59+0000",
            "content": "A few problems:\n\n1) Looks like the round() method is doing the wrong thing for DAY resolution (wiping out DAY instead of HOUR)\n\nelse if (resolution == Resolution.DAY) {\ncalInstance.set(Calendar.HOUR_OF_DAY, 0);\ncalInstance.set(Calendar.MINUTE, 0);\ncalInstance.set(Calendar.SECOND, 0);\ncalInstance.set(Calendar.MILLISECOND, 0);\n\n2) If java.sql.Timestamp is passed in (e.g. by Hibernate Search) then all bets are of ",
            "author": "jawaid hakim",
            "id": "comment-12990901"
        },
        {
            "date": "2011-02-05T03:31:40+0000",
            "content": "Please disregard the first (1) point of my last comment. But the java.sql.Timestamp issue is real. ",
            "author": "jawaid hakim",
            "id": "comment-12990903"
        }
    ]
}