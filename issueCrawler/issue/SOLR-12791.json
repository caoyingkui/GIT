{
    "id": "SOLR-12791",
    "title": "Add Metrics reporting for AuthenticationPlugin",
    "details": {
        "type": "New Feature",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [
            "Authentication",
            "metrics"
        ],
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "Propose to add Metrics support for all Auth plugins. Will let abstract\u00a0AuthenticationPlugin\u00a0base class implement SolrMetricProducer and keep the counters, such as:\n\n\trequests\n\treq authenticated\n\treq pass-through (no credentials and blockUnknown false)\n\treq with auth failures due to wrong or malformed credentials\n\treq auth failures due to missing credentials\n\terrors\n\ttimeouts\n\ttiming stats\n\n\n\nEach implementation still needs to increment the counters etc.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16622651",
            "content": "First patch (Pull request) with metrics recorded in BasicAuthPlugin. No tests so far ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-09-20T20:13:09+0000"
        },
        {
            "id": "comment-16623618",
            "content": "Added to the PR\n\n\tMore fine grained flow in BasicAuth\n\tInitialize metrics only if plugin initialized\n\tTest metric counts in BasicAuthIntegrationTest\n\tInstrument PKIAuthenticationPlugin with counters\n\tMove general timing and number of requets metric to base class\n\tMoved auth metric test methods to base\u00a0SolrCloudTestCase\n\tRemoved permanent debug logging from BasicAuthStandaloneTest\n\n ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-09-21T13:30:27+0000"
        },
        {
            "id": "comment-16623683",
            "content": "Question about instrumenting the HadoopAuthPlugin for reporting metrics Ishan Chattopadhyaya\n\nSince the plugin delegates to Hadoop's AuthenticationFilter we don't get a fine grained response to the plugin that we can check for what really happened. I have managed to pull out the response http code and did this metrics mapping\n\nswitch (frsp.getStatus()) {\n  case HttpServletResponse.SC_UNAUTHORIZED:\n    // TODO: Cannot tell whether the 401 is due to wrong or missing credentials\n    numWrongCredentials.inc();\n    break;\n    \n  case HttpServletResponse.SC_FORBIDDEN:\n    // TODO: Are there other status codes which should also translate to error?\n    numErrors.mark();\n    break;\n\n  default:\n    if (frsp.getStatus() >= 200 && frsp.getStatus() <= 299) {\n      numAuthenticated.inc();\n    } else {\n      numErrors.mark();\n    }\n}\n\n\nHowever when testing with TestSolrCloudWithHadoopAuthPlugin I get\u00a0e.g. 4 requests to doAuthenticate, and 2 of these will be status code 200 while the other two are status 401. I suspect the 401 responses to be some kind of challenge/response that end up in the 200 response, but I have not been able to decipher the code fully yet. Any suggestions on how to proceed?\n\nMy experimental code is in https://github.com/cominvent/lucene-solr/tree/solr12791-hadoop-auth-metrics\u00a0 ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-09-21T14:19:58+0000"
        },
        {
            "id": "comment-16637004",
            "content": "Appreciate any feedback on this approach. Especially from Ishan Chattopadhyaya and Andrzej Bialecki  ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-03T14:05:08+0000"
        },
        {
            "id": "comment-16637205",
            "content": "Hi Jan H\u00f8ydahl, I'll be able to get to this only by the coming Monday, 8th October. I'll keep it on the top of my list of things to look at. Sorry for the delay; feel free to proceed if Andrzej gets to it before me. Thanks for your work on this. ",
            "author": "Ishan Chattopadhyaya",
            "date": "2018-10-03T17:00:58+0000"
        },
        {
            "id": "comment-16638599",
            "content": "Thanks Ishan, appreciate that.\n\nI have commented directly in the PR with some questions I have myself. ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-04T17:38:55+0000"
        },
        {
            "id": "comment-16645288",
            "content": "I have incorporated some changes based on first review. Ishan Chattopadhyaya do you want to add your comments as well? ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-10T17:15:34+0000"
        },
        {
            "id": "comment-16650858",
            "content": "Unless I get more feedback I'll commit this on Thursday. ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-15T21:57:10+0000"
        },
        {
            "id": "comment-16668423",
            "content": "I worked a bit to improve the tests, and discovered that when beasting the tests the assertion on metric count gets wrong. We assert the counts by talking to the cluster's Jetty Runners, getting core container and metrics manager from there. So if another test runs in parallel the numbers will be wrong.\n\nWith Mark's push towards less flaky tests, I'd like this one to be beast-able \u00a0Here are the alternatives I see:\n\n\tA: Initialize the cluster inside the test method instead of in BeforeClass. Then each test instance will have their own cluster with their own metrics. This works for test classes having only one test method.\n\tB: Do not assert any metrics in the various Auth tests. Instead create a new TestAuthMetrics class with exactly one test method, spinning up a cluster inside the test. Disadvantage is we duplicate much test logic in two places.\n\tC: Mock. Spin up Solr with\u00a0e.g. a MockBasicAuthPlugin\u00a0in security.json, which somehow manages to keep metrics per test-method. To be honest I don't\u00a0see clearly what that would look like..\n\tD: Do not expect a certain count for various metrics. Instead do one single assert at the end of each auth plugin's integration test where we simply check that all\u00a0counters that the test is supposed to increment are non-null. That assertion will pass even if another test also increments the same counter in another thread.\n\n ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-30T09:37:06+0000"
        },
        {
            "id": "comment-16668469",
            "content": "So I pushed a change to the Pull Request\u00a0implementing option D, just checking that counters has been increased to a certain minimum. Beasted BasicAuthIntegrationTest and it looks promising.\u00a0 ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-30T10:11:11+0000"
        }
    ]
}