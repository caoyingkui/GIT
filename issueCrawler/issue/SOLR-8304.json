{
    "id": "SOLR-8304",
    "title": "SolrIndexWriter can throw NPE during finalize if create fails",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "4.10.3,                                            5.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "When SolrIndexWriter.create() fails (likely to some IOException), then the finalizer can still be called on the partially constructed object (ref).\n\nThis will lead to trying to close an index that is not fully initialized, and give us some not so desirable behaviour. From a 4.10.3 insance:\n\n\n2015-11-12 15:55:16,295 ERROR org.apache.solr.update.SolrIndexWriter: Error closing IndexWriter\njava.lang.NullPointerException\n        at org.apache.lucene.index.IndexWriter.doFlush(IndexWriter.java:3237)\n        at org.apache.lucene.index.IndexWriter.flush(IndexWriter.java:3210)\n        at org.apache.lucene.index.IndexWriter.shutdown(IndexWriter.java:907)\n        at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:984)\n        at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:954)\n        at org.apache.solr.update.SolrIndexWriter.close(SolrIndexWriter.java:129)\n        at org.apache.solr.update.SolrIndexWriter.finalize(SolrIndexWriter.java:182)\n        at java.lang.System$2.invokeFinalize(System.java:1270)\n        at java.lang.ref.Finalizer.runFinalizer(Finalizer.java:98)\n        at java.lang.ref.Finalizer.access$100(Finalizer.java:34)\n        at java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:210)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-17T17:54:30+0000",
            "author": "Mike Drob",
            "content": "It appears that we won't be able to catch errors during construction to set a state variable, since from our perspective the object never exists. That means we need to null-check docWriter in the close, but would also need to null-check any new fields that we introduce in the future if we also use them in close. An alternative would be to explicitly set some kind of \"finished initializing\" field at the end of the constructor, and null-check that. It's more future proof, but also a bit more opaque - not sure what the better solution here is. Anybody have thoughts? ",
            "id": "comment-15009132"
        },
        {
            "date": "2015-11-17T18:39:32+0000",
            "author": "Mike Drob",
            "content": "Another potential idea is to check whether writeLock is null, and if it is skip the whole close method since neither flush nor rollback should be an option at that point. I'm not super confident in this approach, though, as I can't tell if it will lead to other leaks down the road. ",
            "id": "comment-15009214"
        }
    ]
}