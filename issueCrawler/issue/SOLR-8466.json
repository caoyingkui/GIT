{
    "id": "SOLR-8466",
    "title": "Add support for UnInvertedField based faceting to FacetComponent",
    "details": {
        "components": [
            "Facet Module",
            "faceting"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "5.0,                                            5.1,                                            5.2,                                            5.2.1,                                            5.3,                                            5.3.1,                                            5.4",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The new JSON Faceting API supports building an UnInvertedField to do faceting which would be beneficial to add to Solr FacetComponent.  This would provide additional options to implementors to choose the appropriate method of faceting for their particular use case.\n\nSummary\nadded facet.method=uif which invokes UnInvertedField (top level data structure). facet.prefix and facet.contains are not supported. there are some jiras cover this gap. \nNote: field should be multivalued=true to get handled with uif, otherwise it silently goes to DV. Watch fieldValueCache stats while evaluating!",
    "attachments": {
        "SOLR-8466-failure.txt": "https://issues.apache.org/jira/secure/attachment/12786735/SOLR-8466-failure.txt",
        "SOLR-8466.patch": "https://issues.apache.org/jira/secure/attachment/12784052/SOLR-8466.patch",
        "8466.diff": "https://issues.apache.org/jira/secure/attachment/12783973/8466.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-27T03:57:49+0000",
            "author": "Jamie Johnson",
            "content": "Initial implementation to add support for UnInvertedField based faceting to FacetComponent ",
            "id": "comment-15072031"
        },
        {
            "date": "2016-01-03T21:15:18+0000",
            "author": "Bill Bell",
            "content": "This looks good, it appears to add facet.method=uif which it the way it was before.\n\nAre we ready to commit?\n ",
            "id": "comment-15080530"
        },
        {
            "date": "2016-01-03T23:42:01+0000",
            "author": "Jamie Johnson",
            "content": "Correct, the patch adds facet.method=uif but I'd really like someone who is familiar with the JSON Faceting API to give this a go and make sure things look right.   ",
            "id": "comment-15080581"
        },
        {
            "date": "2016-01-22T19:31:07+0000",
            "author": "Mikhail Khludnev",
            "content": "Reviewing patch: SimpleFacets changes make sense, there is an test coverage (I suppose it's effective), but also there are many unnecessary changes like file moves. Jamie Johnson are you sure they can't be stripped off the patch? Also, pls name with jira ticket in according to tradition.      ",
            "id": "comment-15112930"
        },
        {
            "date": "2016-01-23T02:27:01+0000",
            "author": "Jamie Johnson",
            "content": "Mikhail Khludnev, I'm assuming you're referring to splitting out the FacetContext, FacetParser, FacetTopParser, FacetQueryParser, FacetFieldParser and FacetRangeParser?  If so FacetContext, FacetParser, FacetTopParser all are used by SimpleFacets.  It felt a little strange to leave the others (FacetQueryParser, FacetFieldParser and FacetRangeParser) as protected within FacetRequest after moving the others out but I could move them back if that makes more sense.   ",
            "id": "comment-15113485"
        },
        {
            "date": "2016-01-23T02:27:24+0000",
            "author": "Jamie Johnson",
            "content": "updated patch name ",
            "id": "comment-15113486"
        },
        {
            "date": "2016-01-24T08:16:11+0000",
            "author": "Mikhail Khludnev",
            "content": "ok. Attaching SOLR-8466.patch. I understood an encapsulation challenge. Instead of ripping json facet framework I introduce factory method o.a.s.s.facet.FacetProcessor.createProcessor(SolrQueryRequest, Map<String, Object>, DocSet) that minimizes impact on codebase. Yonik Seeley what's your perception about it? \nI also removed exclude-aware docset calculation, because it's already handled at  ..SimpleFacets.parseParams(String, String). So, far it lacks of test coverage for distributed faceting and fq exclusion. \n\nOpinions?   ",
            "id": "comment-15114241"
        },
        {
            "date": "2016-01-24T13:26:00+0000",
            "author": "Jamie Johnson",
            "content": "I like the approach as it's much less invasive.  In regards to testing isn't this just a matter of piggy backing on the existing distributed faceting/exclusion tests to add uif as a method?  I'm assuming those already exist? ",
            "id": "comment-15114311"
        },
        {
            "date": "2016-02-04T08:57:19+0000",
            "author": "Mikhail Khludnev",
            "content": "Here is desired coverage, I'm still tweaking cases in SimpleFacetsTest.java. work in progress..   ",
            "id": "comment-15131980"
        },
        {
            "date": "2016-02-05T22:38:41+0000",
            "author": "Yonik Seeley",
            "content": "+1, this approach looks fine. ",
            "id": "comment-15135178"
        },
        {
            "date": "2016-02-06T22:45:45+0000",
            "author": "Mikhail Khludnev",
            "content": "while thoroughly testing the SOLR-8466.patch I've found something interesting. \nJamie Johnson, can't you get the same performance boost if you just specify facet.version=2 in addition to old-style Solr facet parameters?\nYonik Seeley wdyt?   \nNote: current patch incorrectly handles facet.sort=true/false but this finding makes all these redundant.  ",
            "id": "comment-15136042"
        },
        {
            "date": "2016-02-07T08:00:12+0000",
            "author": "Mikhail Khludnev",
            "content": "Hi,\n\nOk. I looked on it once again. if facet.version=2 is specified, it adds one more response elements from JSON facets. Thus, workaround shortens:\n\n\tto get old good UnInvertedField perfomance you don't need to change parameters to JSON, but just specify facet.version=2\n\tand remove FacetComponent from handler's components, leaving FacetModule there.\n\tHowever, response format is different and an app should be changed to consume one that makes the issue still sensible\n\n\n\n\nfacet_counts={facet_queries={},facet_fields={key1={foo=1},key2={bar=1}},facet_dates={},facet_ranges={},facet_intervals={},facet_heatmaps={}},\n\n\nvs\n\nfacets={count=2,key1={buckets=[{val=foo,count=1}]},key2={buckets=[{val=bar,count=1}]}}\n\n ",
            "id": "comment-15136174"
        },
        {
            "date": "2016-02-07T19:14:35+0000",
            "author": "Mikhail Khludnev",
            "content": "work in progress.. fixed legacy sorting handling. Remaining issue is empty facets on certain trie field.   ",
            "id": "comment-15136385"
        },
        {
            "date": "2016-02-07T20:34:51+0000",
            "author": "Mikhail Khludnev",
            "content": "It seems like wasting a plenty of time on miserable thing.. \nHere is the fix for testTrieFields failure. In fact it failed on empty result. I just enabling handling empty values..\n\n            if(mincount==0){\n              topLevel.put(\"processEmpty\", true);\n            }\n...\n..\n              //if((Integer)som.get(\"count\") > 0) {\n                SimpleOrderedMap<Object> asdf = (SimpleOrderedMap<Object>) som.get(field);\n\n                List<SimpleOrderedMap<Object>> buckets = (List<SimpleOrderedMap<Object>>)asdf.get(\"buckets\");\n                for(SimpleOrderedMap<Object> b : buckets) {\n                  counts.add(b.get(\"val\").toString(), (Integer)b.get(\"count\"));\n                }\n                if(missing) {\n                  SimpleOrderedMap<Object> missingCounts = (SimpleOrderedMap<Object>) asdf.get(\"missing\");\n                  counts.add(null, (Integer)missingCounts.get(\"count\"));\n                }\n             // } else if(missing) {\n             //   counts.add(null, 0);\n             // }\n\n            }\n\n ",
            "id": "comment-15136424"
        },
        {
            "date": "2016-02-07T21:31:11+0000",
            "author": "Mikhail Khludnev",
            "content": "Attaching SOLR-8466.patch it never bypass empty processing.\nremaining failure is \nTestFaceting.testSimpleFacetCountsWithMultipleConfigurationsForSameField()\nthe failures is really weird. for\n\nq=id:[42+TO+47]&facet.field={!key%3Dfoo+facet.prefix%3DToo+}trait_ss&facet.field={!key%3Dbar+facet.limit%3D2+facet.sort%3Dfalse+}trait_ss&facet.method=uif&fq=id:[42+TO+45]&facet=true&facet.zeros=false&wt=xml\n\n\nresult is \n\n<result name=\"response\" numFound=\"4\" start=\"0\"><doc><float name=\"id\">42.0</float><arr name=\"trait_ss\"><str>Tool</str><str>Obnoxious</str></arr><str name=\"name_s\">Zapp Brannigan</str><long name=\"_version_\">1525551790847688704</long></doc><doc><float name=\"id\">43.0</float><str name=\"title_s\">Democratic Order of Planets</str><long name=\"_version_\">1525551790851883008</long></doc><doc><float name=\"id\">44.0</float><arr name=\"trait_ss\"><str>Tool</str></arr><str name=\"name_s\">The Zapper</str><long name=\"_version_\">1525551790878097408</long></doc><doc><float name=\"id\">45.0</float><arr name=\"trait_ss\"><str>Chauvinist</str></arr><str name=\"title_s\">25 star General</str><long name=\"_version_\">1525551790881243136</long></doc></result>\n\n\nwe definitely have Tool twice but facet has only once! why??\n\n<lst name=\"facet_fields\"><lst name=\"foo\"><int name=\"Tool\">1</int></lst><lst name=\"bar\"><int name=\"Chauvinist\">1</int><int name=\"Obnoxious\">1</int></lst></lst>\n\n\nreasonably fails the assert \n\n//lst[@name='foo']/int[@name='Tool'][.='2']\n\n\n\nSummary \nIt seems like a minor bug somewhere. If anyone from committer give his vote for it, I can extract these failures into ignored test, like it's done with SimpleFacetsTest.testFacetContainsUif() in the patch, otherwise it seems like no-commit for me.   ",
            "id": "comment-15136459"
        },
        {
            "date": "2016-02-08T20:11:06+0000",
            "author": "Mikhail Khludnev",
            "content": "aha... here are TODO! the problem is omitting a multivalued occurrence when prefix is provided. it's worse than with contains which is just not supported. \n\nI'm going to throw error when facet.prefix is requested along side with facet.mehod=uif  ",
            "id": "comment-15137597"
        },
        {
            "date": "2016-02-08T20:39:34+0000",
            "author": "David Smiley",
            "content": "The loss of support for facet.prefix seems to be in SOLR-7214 (JSON Facet API), May 16th 2015. ",
            "id": "comment-15137641"
        },
        {
            "date": "2016-02-08T20:46:33+0000",
            "author": "Yonik Seeley",
            "content": "Ummm, no... all use of UnInvertedField had been removed by LUCENE-5666.\n\nUnInvertedField in the facet package (i.e. the one that is part of the JSON Facet API) shares a common ancestry with the previous one, but it's different.\nWhen I committed the JSON Facet API, I removed the other unused UnInvertedField (which was dead and non-working code at that point), and would have just caused more confusion.  There was already an issue open to remove that dead code. ",
            "id": "comment-15137651"
        },
        {
            "date": "2016-02-08T20:50:42+0000",
            "author": "David Smiley",
            "content": "Thanks for the clarification Yonik.  I see it's different; but nonetheless shares a ton in common.  It even seems to have the same class javadocs and same superclass. ",
            "id": "comment-15137659"
        },
        {
            "date": "2016-02-08T20:55:46+0000",
            "author": "Yonik Seeley",
            "content": "Like I say... common ancestry - it forked off from the original one.\n\nI don't remember details around the facet.prefix comment though... and facet prefixes do seem to work in the JSON Facet API (there are some prefix tests in TestJsonFacets) ",
            "id": "comment-15137669"
        },
        {
            "date": "2016-02-08T21:35:08+0000",
            "author": "Mikhail Khludnev",
            "content": "ok. Here is SOLR-8466.patch it prohibits prefix for uif, and tests ugly bypass this case. I'm going to commit it tomorrow, unless you stop me.    ",
            "id": "comment-15137739"
        },
        {
            "date": "2016-02-09T22:09:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit eac3bb9b32a45e5fc9faa54b372f89e25606a976 in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=eac3bb9 ]\n\nSOLR-8466: facet.method=uif for UnInvertedField faceting, like it was with 'fc' earlier. ",
            "id": "comment-15139867"
        },
        {
            "date": "2016-02-09T22:21:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 93750292c258ca9361a9e3271fb2087be40557ec in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9375029 ]\n\nSOLR-8466: fixing CHANGES.txt moving to 5.5.0 Features. ",
            "id": "comment-15139883"
        },
        {
            "date": "2016-02-09T23:37:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c3cdb84dc60afb265441ca67714685e6bd16ca22 in lucene-solr's branch refs/heads/branch_5x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c3cdb84 ]\n\nSOLR-8466: facet.method=uif for UnInvertedField faceting, like it was with 'fc' earlier. ",
            "id": "comment-15140010"
        },
        {
            "date": "2016-02-09T23:44:14+0000",
            "author": "Mikhail Khludnev",
            "content": "committed in both. will check CI in a few hours.  ",
            "id": "comment-15140019"
        },
        {
            "date": "2016-02-10T08:08:54+0000",
            "author": "Mikhail Khludnev",
            "content": "Thanks, Jamie Johnson!\n\nColleagues, feedback is quite appreciated! Don't hesitate to check a nightly build! ",
            "id": "comment-15140479"
        },
        {
            "date": "2016-02-10T08:12:55+0000",
            "author": "Mikhail Khludnev",
            "content": "perhaps it's SOLR-8155 ?  ",
            "id": "comment-15140485"
        }
    ]
}