{
    "id": "SOLR-8292",
    "title": "TransactionLog.next() does not honor contract and return null for EOF",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Invalid",
        "priority": "Major"
    },
    "description": "This came to light in CDCR testing, which stresses this code a lot, there's a stack trace showing this line (641 trunk) throwing an EOF exception:\n\no = codec.readVal(fis);\n\nAt first I thought to just wrap reading fis in a try/catch and return null, but looking at the code a bit more I'm not so sure, that seems like it'd mask what looks at first glance like a bug in the logic.\n\nA few lines earlier (633-4) there's these lines:\n// shouldn't currently happen - header and first record are currently written at the same time\nif (fis.position() >= fos.size()) {\n\nWhy are we comparing the the input file position against the size of the output file? Maybe because the 'i' key is right next to the 'o' key? The comment hints that it's checking for the ability to read the first record in input stream along with the header. And perhaps there's a different issue here because the expectation clearly is that the first record should be there if the header is.\n\nSo what's the right thing to do? Wrap in a try/catch and return null for EOF? Change the test? Do both?\n\nI can take care of either, but wanted a clue whether the comparison of fis to fos is intended.",
    "attachments": {
        "SOLR-8292.patch": "https://issues.apache.org/jira/secure/attachment/12775853/SOLR-8292.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-14T17:00:16+0000",
            "author": "Erick Erickson",
            "content": "Bah! fis is an InputStream. I'll try to add a bit of logging and trigger this again to see if the size comparison is even relevant. ",
            "id": "comment-15005479"
        },
        {
            "date": "2015-11-16T10:56:49+0000",
            "author": "Renaud Delbru",
            "content": "I have reviewed all the methods writing records to the tlog file, and all of them are properly synchronised with the flushing of the output stream. \nHowever, the access to the input stream is not synchronised. Could it be that one concurrent thread changed the fis position while another one was trying to read a record ? The CdcrLogReader#resetToLastPosition could interfere with the TransactionLog.LogReader#next. ",
            "id": "comment-15006519"
        },
        {
            "date": "2015-11-16T11:16:28+0000",
            "author": "Renaud Delbru",
            "content": "The convention over the log reader is that it should not be used by more than one thread (see comment on TransactionLog#getReader). I'll double check if the cdcr code is respecting that. ",
            "id": "comment-15006537"
        },
        {
            "date": "2015-11-18T10:26:26+0000",
            "author": "Renaud Delbru",
            "content": "I have checked on the cdcr code side, and whenever a log reader is used, it is by a single thread only. So the problem might be laying somewhere else. ",
            "id": "comment-15010699"
        },
        {
            "date": "2015-12-03T10:25:45+0000",
            "author": "Renaud Delbru",
            "content": "Perhaps related to SOLR-4116 ? ",
            "id": "comment-15037616"
        },
        {
            "date": "2015-12-04T21:05:50+0000",
            "author": "Mike Drob",
            "content": "Here's the start of a patch to get better logging around what is happening.\n\nI think the intent of the \"return null for EOF\" was to produce a null after the last complete record had been read. A easily checked \"we're done\" marker.\n\nIn the cases where it actually throws an EOF, I think there must be some truncation and a corrupt tlog file where it fails in the middle of a record. ",
            "id": "comment-15042235"
        },
        {
            "date": "2017-01-05T20:45:01+0000",
            "author": "Erick Erickson",
            "content": "Mike DrobRenaud DelbruMark Miller I originally assigned this one to myself to not lose track of it but haven't done anything else with it. Is it reasonable to close this? Perhaps SOLR-7478 or similar has fixed this? There's been a lot of hardening in the last year.\n\nWDYT about closing SOLR-4116 too? ",
            "id": "comment-15802475"
        },
        {
            "date": "2017-01-06T04:11:02+0000",
            "author": "Erick Erickson",
            "content": " Cao Manh Dat You've also been in the tlog code significantly recently, do you have any opinion  on whether this (and SOLR-4116) are valid any longer? ",
            "id": "comment-15803488"
        },
        {
            "date": "2017-01-06T07:52:17+0000",
            "author": "Cao Manh Dat",
            "content": "Hi Erick, I'm not familiar with CDCR code much. But I will give it a try today. Do we have any test that re procedure this error?\n\nHere are the log error on SOLR-4116, \n\n2012-11-28 11:32:33,086 WARN [solr.update.UpdateLog] - [recoveryExecutor-8-thread-1] - : Starting log replay tlog{file=/opt/solr/cores/openindex_e/data/tlog/tlog.0000000000000000028 refcount=2} active=false starting pos=0\n\n\nIf your log also have flag active=false starting pos=0 then I think both issues can be related. ",
            "id": "comment-15803900"
        },
        {
            "date": "2017-01-06T17:07:56+0000",
            "author": "Erick Erickson",
            "content": "[~caomanhdat317] All I was really looking for was whether, in your opinion, this was even possible any more, I was just being lazy. This wasn't particularly about CDCR, it was just that CDCR exercised it I think.\n\nPlease don't spend time trying to reproduce. It sure would have been helpful if I'd recorded what test failed a year ago wouldn't it? Siiiigggghhh.\n\nIt's been a long time since I opened this. I'll just start monitoring CDCR Jenkins failures (I've noticed a few go by but mostly haven't pursued them) and see if anything similar reappears and if not, maybe we can close it. That'll take a while before anyone would feel comfortable. Probably should have been doing that all along. Ditto with SOLR-4116. ",
            "id": "comment-15805015"
        },
        {
            "date": "2017-01-07T01:20:59+0000",
            "author": "Cao Manh Dat",
            "content": "I think people kinda of misunderstanding this line\n\n* @return The log record, or null if EOF\n\n \nEOF here is not related to EOFException, EOF mean when the file is fully read to the end. While EOFException throw by TransactionLog.next() mean the file is corrupted. \n\nFor example \nTransactionLog.java\ncodec.writeTag(JavaBinCodec.ARR, 3);\ncodec.writeInt(UpdateLog.ADD | flags);  // should just take one byte\ncodec.writeLong(cmd.getVersion());\ncodec.writeSolrInputDocument(cmd.getSolrInputDocument());\n\n\n\nSo when LogReader read to the tag JavaBinCodec.ARR = 3, it will expect that there are 3 more elements to be read. But if the file have only 2 elements ( because the file is corrupted/truncated ) it will throw an EOFException.\n\nFIY: I also write a test ( TestCloudRecovery.corruptedLogTest() ) to check that even if all the tlogs is corrupted/truncated, the collection can still become healthy after restart.\n\nSo in my opinion SOLR-4116 is quite general, \n\n\tif the system is restarted gracefully and the EOFException still be thrown so it's a bug.\n\tIf the system is restarted roughly ( kill -9 ) so it's not a bug.\n\n\n\nSo we do not make sure that this is a bug or not without a way to re procedure that. ",
            "id": "comment-15806407"
        },
        {
            "date": "2017-01-08T19:25:45+0000",
            "author": "Mark Miller",
            "content": "Correct. We know how much we are supposed to read, we don't need a signal and if we get an EOF exception it's because the file is corrupt. ",
            "id": "comment-15809882"
        },
        {
            "date": "2017-03-27T19:04:34+0000",
            "author": "Erick Erickson",
            "content": "I'm going to close this since it seems like I was off in the weeds. I'll also try to look more closely at any CDCR errors from Jenkins and open something new if indicated. ",
            "id": "comment-15943851"
        }
    ]
}