{
    "id": "SOLR-3658",
    "title": "SolrCmdDistributor can briefly create spikes of threads in the thousands.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "see mailing list http://markmail.org/thread/yy5b7g6g7733wgcp",
    "attachments": {
        "SOLR-3658.patch": "https://issues.apache.org/jira/secure/attachment/12537426/SOLR-3658.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13419514",
            "date": "2012-07-20T20:12:03+0000",
            "content": "SolrCmdDIstributor is using a thread executor that has no bounds on the number of threads it can create. Commit or busy activity on a replica can cause a small backup that leads to spikes of threads on the leader. They tend to spike up and then come back down. Since each thread eats memory, this can be very costly or cause an OOME: cant create new native thread.\n\nOne possible workaround is to lower the thread stack size - on many 64-bit platforms it defaults to 1mb...-Xss=128kb might be enough and might make the situation better. It's not a solution though.\n\nAs a fix, after discussing with Yonik, I've been working on limiting the number of threads to 8 x the number of hosts in the cluster as a start. Perhaps it will be overridable with config. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13419687",
            "date": "2012-07-20T23:34:38+0000",
            "content": "Here is an initial patch. It limits the total number of threads to hosts*8 (8 is the max connections per host we allow currenty anyhow). Just an initial stab, but it seems to test out all right so far. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13419755",
            "date": "2012-07-21T07:32:22+0000",
            "content": "Other thing to keep in mind memory-wise is that each thread is associated with a number of outgoing update requests and other associated state, which in a realistic system probably take up more mem than the thread stack.\n\nedit: Another thing to note is that if Java thread stacks are treated the same as C stacks (and I believe they are), then the max stack size has nothing to do with how real RAM is used by the stack (it's expanded as needed by mapping real RAM to the address space via the MMU).  In 32 bit programs, it's still a resource you can run out of easily of course. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13419881",
            "date": "2012-07-21T17:11:03+0000",
            "content": "Yeah, I'm not sure of the nitty gritty - but a couple sites I found were people where experimenting with just firing up threads to see how many they could create (that where not really doing anything), they could fire up way more before running out of RAM if they used a low Xss. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13419883",
            "date": "2012-07-21T17:19:40+0000",
            "content": "(although i don't know if they were just using 32-bit or what) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13420231",
            "date": "2012-07-22T16:31:09+0000",
            "content": "I'm going to commit this as a start - it seems to test out fine so far - we can change or tweak as necessary after. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13420244",
            "date": "2012-07-22T17:16:23+0000",
            "content": "I committed what we have so far. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13427659",
            "date": "2012-08-02T21:59:59+0000",
            "content": "There were some real problems with my previous solution - it somewhat worked accidentally - but I think really damaged performance probably.\n\nI just committed a new approach that has tested out nicely so far. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429767",
            "date": "2012-08-07T03:42:49+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13653819",
            "date": "2013-05-10T10:33:04+0000",
            "content": "Closed after release. "
        }
    ]
}