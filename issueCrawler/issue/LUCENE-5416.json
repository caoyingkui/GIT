{
    "id": "LUCENE-5416",
    "title": "Performance of a FixedBitSet variant that uses Long.numberOfTrailingZeros()",
    "details": {
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Done",
        "components": [
            "core/search"
        ],
        "affect_versions": "6.0",
        "status": "Closed",
        "fix_versions": [
            "6.0"
        ]
    },
    "description": "On my machine the current byte index used in OpenBitSetIterator is slower than Long.numberOfTrailingZeros() for advance().\nThe pull request contains the code for benchmarking this taken from an early stage of DocBlocksIterator.\nIn case the benchmark shows improvements on more machines, well, we know what to do...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13881480",
            "author": "Paul Elschot",
            "content": "See this pull request for the code: https://github.com/apache/lucene-solr/pull/22\nThere is also a remarks.txt there.\n\nI did not clean the commits in the github repo, please look at the changes.\nAt the pull request I did not see the possibilty to download a patch, in case one is preferred, please let me know. ",
            "date": "2014-01-24T22:17:08+0000"
        },
        {
            "id": "comment-13882919",
            "author": "Paul Elschot",
            "content": "The last benchmark output is here: https://github.com/PaulElschot/lucene-solr/commit/772b55ad3c3d94752b37aa81b2e96cb50b321cf6 ,\nsee from line 313 in this output, the comparisons and loads are given in 10log numbers.\n\nIn short:\n\n\tfor advance() this is a factor of 1.7 to 4 times faster, and\n\tfor nextDoc() this is up to 2.5 times faster, but for load factors higher than about 0.25 it is up to about 5 times slower.\n\n ",
            "date": "2014-01-27T16:13:19+0000"
        },
        {
            "id": "comment-13889410",
            "author": "Paul Elschot",
            "content": "Recent comments at LUCENE-5425 indicate that performance of OpenBitSetIterator is critical for facets.\nWould it be correct to conclude from that and from the measurements here that faceting involves nextDoc() on high bit densities?\n\nThat would also mean that the FixedBitSetDBI here could be better for as a general filter with a lower bit density,\nand that could have implications for LUCENE-5293.\nFor even lower bit densities a more compressed version is preferable, and we already have WAH8DocIdSet for that.\n\nFor the DocBlockIterator at LUCENE-5092 I'll stick to the FixedBitSetDBI for now, but since it does a prevDoc() under the hood,\nit might be a good idea to use the same technique there as in OpenBitSetIterator, only backwards.\n\nWould someone have an idea how to merge the Long.numberOfTrailingZeros() used here for advance() into OpenBitSetIterator?\nOr would it be better to always choose a DocIdSet implementation based on bit density? ",
            "date": "2014-02-03T11:36:08+0000"
        },
        {
            "id": "comment-13889572",
            "author": "Michael McCandless",
            "content": "Would it be correct to conclude from that and from the measurements here that faceting involves nextDoc() on high bit densities?\n\nYes, this is typically the \"hardest\" case for faceting, so if we have some ideas on how to make that iteration faster, that would be great.  But I can't tell here what the idea is?  Can we somehow separate it out from the DocBlockIterator? ",
            "date": "2014-02-03T15:59:34+0000"
        },
        {
            "id": "comment-13889910",
            "author": "Paul Elschot",
            "content": "I would normally expect that the performance is independent of the presence of the advanceToJustBefore() method of DocBlockIterator.\nThis method happens to be there because I needed it for LUCENE-5092, and I did not bother to remove it for the performance measurements.\nI'm sorry for the confusion about this.\n\nThe FixedBitSetDBI here does not always make nextDoc() faster, in fact (for me) the Long.numberOfTrailingZeros() implementation of nextDoc() in FixedBitSetDBI here is up to 5 times slower for load factors above 0.25. Below that the nextDoc() here is up to 2.5 times faster.\n\nThe idea is that using  Long.numberOfTrailingZeros() appears to be faster for advance(), and also for nextDoc()  up to a load factor of about 0.25 .\n\nWasn't OpenBitSetIterator made before Long.numberOfTrailingZeros() was available/intrinsified? ",
            "date": "2014-02-03T20:52:52+0000"
        },
        {
            "id": "comment-13892330",
            "author": "Paul Elschot",
            "content": "See measurements and patch with Long.numberOfTrailingZeros at LUCENE-5425. ",
            "date": "2014-02-05T17:33:37+0000"
        }
    ]
}