{
    "id": "SOLR-2748",
    "title": "autocommit commits too many times",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.5"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "autocommit seems to commit more frequently than configured.",
    "attachments": {
        "SOLR-2748.patch": "https://issues.apache.org/jira/secure/attachment/12493537/SOLR-2748.patch",
        "SOLR-2748_solr33.patch": "https://issues.apache.org/jira/secure/attachment/12498167/SOLR-2748_solr33.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13099598",
            "date": "2011-09-07T21:52:16+0000",
            "content": "So I think the culprit might be CommitTracker.run()\nAt the end (after doing the commit) it has this code:\n\n    // check if docs have been submitted since the commit started\n    if (lastAddedTime > started) {\n      if (docsUpperBound > 0 && docsSinceCommit.get() > docsUpperBound) {\n        pending = scheduler.schedule(this, 100, TimeUnit.MILLISECONDS);\n      } else if (timeUpperBound > 0) {\n        pending = scheduler.schedule(this, timeUpperBound,\n            TimeUnit.MILLISECONDS);\n      }\n    }\n\n\n\nWhich seems to blindly schedule another commit (which should have already been scheduled?).  So now we have 2 commits scheduled for the next round, where there should have only been one.  It seems like those two commits now have the potential to turn into 4 for the next round, and so on. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13099613",
            "date": "2011-09-07T22:13:07+0000",
            "content": "Hmmm, I'm not quite understanding the logic of this class.\nCommitTracker.didCommit() (which is called by DUH2 after a commit finishes) tries to cancel any pending scheduled operations and resets the doc counter to 0.  But that seems like a bug since documents may have been added during the commit, and a new commit may have been scheduled while the old commit was executing.  Of course we are going to lose track of that since run() sets pending to null.\n\nedit: and of course trying to cancel \"pending\" from the DUH2 like that is also another race condition... which \"pending\" will it cancel?  It could be the old or the new, depending on the thread timings. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13099675",
            "date": "2011-09-08T00:22:20+0000",
            "content": "Another interesting thing I ran into reviewing this code is that the CommitTracker.run() method is synchronized, and so is _scheduleCommitWithin(), meaning (I think) that a long running commit will block anything calling that method (and an autoCommit by time or an add with a commitWithin specified would qualify).\n\nedit: and I seem to recall some people reporting that adds were blocked until a new searcher was registered (but I could never reproduce it myself).  This is probably the root cause of those problems. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13099704",
            "date": "2011-09-08T01:58:44+0000",
            "content": "OK, here's a first cut at a patch trying to fix some of these issues.\nAutoCommitTest.testSoftCommitMaxTime() is failing once in a while though... not sure what's up yet. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13099712",
            "date": "2011-09-08T02:33:01+0000",
            "content": "After adding a bunch of prints, I think this is a test bug.\nJust because a newSearcher callback has been issued (triggered) does not mean that a new searcher has been registered yet. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13099722",
            "date": "2011-09-08T02:59:01+0000",
            "content": "Seeing all of the bugs related to the Solr NRT code, I can't help but wonder why the 4.x version of the project needs to be backward compatible.  \n\nAlso why it's not using IndexReaderWarmer which was ostensibly created precisely for Solr's usage (and, it's not used in Solr and never has been). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13099726",
            "date": "2011-09-08T03:08:47+0000",
            "content": "Seeing all of the bugs related to the Solr NRT code, I can't help but wonder why the 4.x version of the project needs to be backward compatible.\n\nIt's not really related to NRT since the autoCommit (CommitTracker) code has been around for a very long time (way before NRT).\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13099790",
            "date": "2011-09-08T04:26:32+0000",
            "content": "Found another race in AutoCommitTest that was causing a failure... the autoCommitCount is incremented after the commit returns, so depending on thread scheduling, the test can be triggered to continue after the commit, but before autoCommitCount is incremented. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13100351",
            "date": "2011-09-08T14:24:27+0000",
            "content": "OK, here's a patch (with still some extra loggong) that fixes some of the bugs in AutoCommitTest, and also moves up where autoCommitCount is incremented to before the commit happens.\n\nWith this patch, things seem much better... but I still got 2 failures in AutoCommitTest out of 45 runs.  Next I plan to repeat some of my performance tests where I was seeing way too many commits for what was configured.\n\nHoss also pointed out \"see SOLR-2565 and the HuperDuperAutoCommitTest for an in progress attempt at making it work better\" "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13100406",
            "date": "2011-09-08T15:46:44+0000",
            "content": "My 10M doc performance testing now shows the correct number of commits.\nI also tried turning on soft autocommits at 1 sec, and that also resulted in the correct number of soft commits being done.\n\nOddly enough the autoCommit + softAutoCommit test ran in 2:35 sec, while the autoCommit only test ran in 3:33.\nOne explanation could be that DWPT doesn't necessarily seem optimal for older (non-SSD) drives (Erick reported seeing trunk as slower than 3x on his system with a spinning-magnets type drive), and the smaller segments avoided some of this.\nThe other explanation (and this one actually makes more sense to me) is that the CSV loader used is single-threaded.  Adding the first 1000 documents to a small segment is probably more efficient than adding the last 1000 to a larger segment.  Doing more soft commits means creating smaller segments and doing more work in background merging using other CPU cores (basically, it increased the parallelism). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13100435",
            "date": "2011-09-08T16:36:09+0000",
            "content": "I re-ran the 10M doc test with soft autocommit set to 10ms (obviously too low, but I just wanted to make sure that things didn't blow up).  Things went fine, no exceptions, etc, and it did manage to commit at a rate of 73 commits/sec while indexing.  Should be even higher if logging is turned off. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13100556",
            "date": "2011-09-08T18:39:14+0000",
            "content": "I've been through a few hundred iterations of AutoCommitTest with no failures (with logging turned on).\nI think it's time to clean up the debugging logs and commit! "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13100612",
            "date": "2011-09-08T19:22:23+0000",
            "content": "Thanks for looking into this!  i vaguely recall stumbling through this with Mike Klaas 5 years ago!\n\n+1 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13100623",
            "date": "2011-09-08T19:32:50+0000",
            "content": "committed.  will backport to 3x next. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13122840",
            "date": "2011-10-07T14:44:36+0000",
            "content": "Needed to apply this for a client on 3.3, so here's the patch "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-15382498",
            "date": "2016-07-18T16:00:28+0000",
            "content": "It appears this was fixed long, long ago but simply missed at the time. I see an entry in CHANGES.txt for 3.5, and there is this commit in the history: https://git1-us-west.apache.org/repos/asf?p=lucene-solr.git;a=commit;h=013e2776b867cc7f087ec17207a2720f2806689e.\n\nIf it should still be open, my mistake, please reopen. "
        }
    ]
}