{
    "id": "LUCENE-697",
    "title": "Scorer.skipTo affects sloppyPhrase scoring",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "If you mix skipTo() and next(), you get different scores than what is returned to a hit collector.",
    "attachments": {
        "sloppy_phrase_skipTo.patch": "https://issues.apache.org/jira/secure/attachment/12343815/sloppy_phrase_skipTo.patch",
        "sloppy_phrase_skipTo.patch2": "https://issues.apache.org/jira/secure/attachment/12343979/sloppy_phrase_skipTo.patch2"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-10-25T03:56:31+0000",
            "content": "Here's the ant output from test code to be checked in shortly.\nThe test code calls skipTo(), skipTo(), next(), next(), etc \nwhile checking that the results match the hitcollector version.\n\n    [junit] Testcase: testP6(org.apache.lucene.search.TestSimpleExplanations):\nCaused an ERROR\n    [junit] ERROR matching docs:\n    [junit]     scorer.more=true doc=1 score=0.7849069\n    [junit]     hitCollector.doc=1 score=0.67974937\n    [junit]      Scorer=scorer(weight(field:\"w3 w2\"~2))\n    [junit]      Query=field:\"w3 w2\"~2\n    [junit]      Searcher=org.apache.lucene.search.IndexSearcher@118f375\n    [junit] java.lang.RuntimeException: ERROR matching docs:\n    [junit]     scorer.more=true doc=1 score=0.7849069\n    [junit]     hitCollector.doc=1 score=0.67974937\n    [junit]      Scorer=scorer(weight(field:\"w3 w2\"~2))\n    [junit]      Query=field:\"w3 w2\"~2\n    [junit]      Searcher=org.apache.lucene.search.IndexSearcher@118f375\n    [junit]     at org.apache.lucene.search.QueryUtils$2.collect(QueryUtils.java\n:104)\n    [junit]     at org.apache.lucene.search.Scorer.score(Scorer.java:48)\n    [junit]     at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.j\nava:132)\n    [junit]     at org.apache.lucene.search.Searcher.search(Searcher.java:116)\n    [junit]     at org.apache.lucene.search.Searcher.search(Searcher.java:95)\n    [junit]     at org.apache.lucene.search.QueryUtils.checkSkipTo(QueryUtils.ja\nva:97)\n    [junit]     at org.apache.lucene.search.QueryUtils.check(QueryUtils.java:75)\n\n    [junit]     at org.apache.lucene.search.CheckHits.checkHitCollector(CheckHit\ns.java:91)\n    [junit]     at org.apache.lucene.search.TestExplanations.qtest(TestExplanati\nons.java:90)\n    [junit]     at org.apache.lucene.search.TestExplanations.qtest(TestExplanati\nons.java:86)\n    [junit]     at org.apache.lucene.search.TestSimpleExplanations.testP6(TestSi\nmpleExplanations.java:87)\n\n\n    [junit] Testcase: testP7(org.apache.lucene.search.TestSimpleExplanations):\nCaused an ERROR\n    [junit] ERROR matching docs:\n    [junit]     scorer.more=true doc=1 score=0.7849069\n    [junit]     hitCollector.doc=1 score=0.67974937\n    [junit]      Scorer=scorer(weight(field:\"w3 w2\"~3))\n    [junit]      Query=field:\"w3 w2\"~3\n    [junit]      Searcher=org.apache.lucene.search.IndexSearcher@1dd7056\n    [junit] java.lang.RuntimeException: ERROR matching docs:\n    [junit]     scorer.more=true doc=1 score=0.7849069\n    [junit]     hitCollector.doc=1 score=0.67974937\n    [junit]      Scorer=scorer(weight(field:\"w3 w2\"~3))\n    [junit]      Query=field:\"w3 w2\"~3\n    [junit]      Searcher=org.apache.lucene.search.IndexSearcher@1dd7056\n    [junit]     at org.apache.lucene.search.QueryUtils$2.collect(QueryUtils.java\n:104)\n    [junit]     at org.apache.lucene.search.Scorer.score(Scorer.java:48)\n    [junit]     at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.j\nava:132)\n    [junit]     at org.apache.lucene.search.Searcher.search(Searcher.java:116)\n    [junit]     at org.apache.lucene.search.Searcher.search(Searcher.java:95)\n    [junit]     at org.apache.lucene.search.QueryUtils.checkSkipTo(QueryUtils.ja\nva:97)\n    [junit]     at org.apache.lucene.search.QueryUtils.check(QueryUtils.java:75)\n\n    [junit]     at org.apache.lucene.search.CheckHits.checkHitCollector(CheckHit\ns.java:91)\n    [junit]     at org.apache.lucene.search.TestExplanations.qtest(TestExplanati\nons.java:90)\n    [junit]     at org.apache.lucene.search.TestExplanations.qtest(TestExplanati\nons.java:86)\n    [junit]     at org.apache.lucene.search.TestSimpleExplanations.testP7(TestSi\nmpleExplanations.java:90)\n\n\n    [junit] Test org.apache.lucene.search.TestSimpleExplanations FAILED ",
            "author": "Yonik Seeley",
            "id": "comment-12444565"
        },
        {
            "date": "2006-10-25T04:29:28+0000",
            "content": "Comment out line 104 of QueryUtils.java to reproduce this problem:\n\n          scoreDiff=0; // TODO: remove this go get LUCENE-697 failures  ",
            "author": "Yonik Seeley",
            "id": "comment-12444573"
        },
        {
            "date": "2006-10-25T21:57:31+0000",
            "content": "I can reproduce this by uncommenting this line. \n\nInteresting to notice that:\n\n(1) the sequence to next() next() skip() skip() next() next() (!= instead of ==) passes the tests.\nThis is exoected because the problem is in the initialization (at least in PhraseQuery). \n\n(2) the sequence next() skip() next() does not work (..&0x01)!=0 instead of &0x02)==0) does not pass.\nThis is surprising to me - becuase seemingly there are no initialization issues here.\nBut I think the cause is that, at least in PhraseQuery, it is not just an intialization issue.\n\nYonik, this is uassigned, are you working on a fix for this? ",
            "author": "Doron Cohen",
            "id": "comment-12444744"
        },
        {
            "date": "2006-10-25T23:53:02+0000",
            "content": "> Yonik, this is uassigned, are you working on a fix for this?\n\nNope, feel free to grab it  ",
            "author": "Yonik Seeley",
            "id": "comment-12444756"
        },
        {
            "date": "2006-10-27T23:05:05+0000",
            "content": "This was tricky, for me anyhow, but I think I found it.\n\nThe difference in scoring between using next() to using skipTo() (or a combination of these two) is caused by two (valid) orders of the sorted PhrasePositions. \n\nCurrently PhrasePositions sorting is defined by doc and position, where position already considers the offset of the term within the (phrase) query. \n\nIf however two TermPosition have the same doc and same position, the sort takes no decision, which falls down to one valid sort (by current sort definition). The difference between using next() and skipTo() in this regard is that skipTo() always calls sort(), sorting the entire set, while next() only calls sort() at initialization and then maintain the sorting as part of the scoring process. \n\nThis would be clearer with the following example - taken from Yonik's test case that is failing now:\n\n\tDoc1:     w1 w3 w2 w3 zz\n\tQuery:   \"w3 w2\"~2\nWhen starting scoring in this doc, both PhrasePositions pp(w3) and pp(w2) have doc(2)=doc(w3)=1.\nNote, that, for the second w3 that matches we would have pos(w2)=2+1=3 and pos(w3)=3+0=3. \n\n\n\nSo, after scoring doc1(\"w3 w2\"), if the sort result places pp(w2) at the top, we would also score for doc1(\"w3 w2\"). However, if pp(w3) is placed by the sort at the top (==smallest), we would not score also for doc1(\"w3 w2\"). \n\nCurrent behavior is inconsistent: skip() would take the two while next() won't, and I think it is possible to create a case where it would be the other way around. So definitely behavior should be made consistent. \n\nNext question to be asked is: Do we want to sum (or max) the frequency for both (or more cases)? I think yes, sum. \n\nTo fix this I am changing PhrasePosition comparison, so that in case positions are equal, the actual doc position (ignoring offset in query phrase) is considered. \n\nIn addition, I added missing calls to clear the priority queue before starting to sort and to mark that no more initialization is required when skipTo() is called. \n\nI tested with the sequence that Yonik added:\n\n\tskip skip next next skip skip\nAnd also with the sequences:\n\tskip skip skip skip skip skip\n\tnext next next next next next\n\tskip next skip next skip next\n\tnext skip next skip next skip\n\tnext next skip skip next next\nThe latter 5 cases are now commented out, the first case is in effect.\n\n\n\nThis scoring code is still not feeling natural to me, so (actually as always) comments will be appreciated.\n\n\n\tDoron\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12445291"
        },
        {
            "date": "2006-10-31T06:20:05+0000",
            "content": "An updated version of this patch - sloppy_phrase_skipTo.patch2.\n\nI modified QueryUtils.java (test util) to test all the sequences, not just one. \nIt is also now quite easy to add a new sequence to be tested, if needed.\n\nOther changes in this patch remain:\n\n\tPhraseQueue: this is the fix.\n\tExactPhraseScorer: added call to clear queue - not a must, but cleaner this way.\n\tPhraseScorer: added mark that init done at skip - again not a must, just cleaner this way.\n\n\n\nAll \"ant test\" tests pass.\n\n\n\tDoron\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12445795"
        },
        {
            "date": "2006-11-04T22:33:52+0000",
            "content": "Thanks for tackling this one Doron!\nWow is that phrase code complex!  I think I may need to step through an example or two before I really get it.\nAnyway, the changes you suggest all look logical in context... It's just some of the rest of the phrase scoring code I'm still trying to understand.\n\nRegarding the sort:\n+      if (pp1.position == pp2.position)\n+        return pp1.position+pp1.offset < pp2.position+pp2.offset;\n\nSurely this degenerates to \n      if (pp1.position == pp2.position)\n         return pp1.offset < pp2.offset; ",
            "author": "Yonik Seeley",
            "id": "comment-12447205"
        },
        {
            "date": "2006-11-05T06:14:21+0000",
            "content": "You're right Yonik,   pp1.offset < pp2.offset   is equivalent. \n\nHowever note that pp1.position + pp1.offset  == tp1.position, i.e. by adding the (query) offset we compare the termPosition offsets, as read from the index. \n\nJust to complete the setting - having pp.position == tp.position - offset allows the phrase scorer to identify a match when all pp.positions are the same (for exact) or distant no more than slope (for sloppy). \n\nSo we should probably return the simpler expression as you suggest, and comment the code, something like this:\n\n    if (pp1.doc == pp2.doc) \n      if (pp1.position == pp2.position)\n        // Same doc and pp.positions, so compare actual term positions.\n        // Since pp.position == tp.position - (query) offset, \n        // can restore tp.position as pp.position + offset.\n        // But pp.positions are equal, so can just compare the offsets. \n        return pp1.offset < pp2.offset;\n      else\n        return pp1.position < pp2.position;\n    else\n      return pp1.doc < pp2.doc;\n\nmakes sense?\n\nPerhaps it would be nice if we also add some code comments to the scorers...? ",
            "author": "Doron Cohen",
            "id": "comment-12447234"
        },
        {
            "date": "2006-12-01T09:20:01+0000",
            "content": "I went on documenting sloppy phrase scorer and phrase scorer, so that the fix above can make it in more comfortably.\nHowever while doing that I found that the scorer does not behave as I thought it should.\nIt seems to me that a problem with sloppy phrase scoring is broader  then the skipTo() behavior, and actually the skipTo behavior is just a side effect of that.\nSo I am creating a new issue to discuss sloppy phrase scoring behavior, that if/when resolved would probably also reolve this one. \nSee https://issues.apache.org/jira/browse/LUCENE-736 ",
            "author": "Doron Cohen",
            "id": "comment-12454844"
        },
        {
            "date": "2007-04-24T05:42:57+0000",
            "content": "Fixed by LUCENE-736 . ",
            "author": "Doron Cohen",
            "id": "comment-12491142"
        }
    ]
}