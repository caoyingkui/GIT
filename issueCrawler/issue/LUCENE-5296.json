{
    "id": "LUCENE-5296",
    "title": "Add DirectDocValuesFormat",
    "details": {
        "components": [],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "New Feature",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Indexes values to disk but at search time it loads/accesses the values via simple java arrays (i.e. no compression).",
    "attachments": {
        "LUCENE-5296.patch": "https://issues.apache.org/jira/secure/attachment/12609419/LUCENE-5296.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-21T12:30:22+0000",
            "content": "Patch. ",
            "author": "Michael McCandless",
            "id": "comment-13800600"
        },
        {
            "date": "2013-10-21T12:55:36+0000",
            "content": "This looks good to me, I'm just curious why you decided to implement a dedicated consumer instead of reusing internally eg. DiskDocValuesFormat in a similar fashion to what DirectPostingsFormat does with Lucene41PostingsFormat? Is it to avoid doing too much work upon reopen to compute things like byte widths for numerics? ",
            "author": "Adrien Grand",
            "id": "comment-13800624"
        },
        {
            "date": "2013-10-21T17:01:12+0000",
            "content": "Thanks Adrien.\n\nI'm just curious why you decided to implement a dedicated consumer instead of reusing internally eg. DiskDocValuesFormat in a similar fashion to what DirectPostingsFormat does with Lucene41PostingsFormat?  Is it to avoid doing too much work upon reopen to compute things like byte widths for numerics?\n\nActually, it hadn't occurred to me to \"wrap\" like we did for DirectPF, I guess because a DVF is so much easier to write than a PF ... we could consider doing that.\n\nBut, I do think it's good to minimize work on loading values at search time... I actually started from MemoryDVF/C/P and then iterated to the \"simple arrays\". ",
            "author": "Michael McCandless",
            "id": "comment-13800805"
        },
        {
            "date": "2013-10-21T17:34:32+0000",
            "content": "OK, thanks for the explanation! I have a few other remarks/questions on the patch:\n\n\twhy do you substract 200 to Integer.MAX_VALUE to compute the maximum number of bytes/ords?\n\tsum looks unused in addNumericFieldValues\n\n\n\nOtherwise, +1 to commit. ",
            "author": "Adrien Grand",
            "id": "comment-13800852"
        },
        {
            "date": "2013-10-21T18:05:58+0000",
            "content": "Thanks for the review Adrien!\n\nwhy do you substract 200 to Integer.MAX_VALUE to compute the maximum number of bytes/ords?\n\nThat's because the exact maximum size for an array seems to vary w/ JVMs to some \"small\" amount less than Integer.MAX_VALUE.  I'll put a comment explaining this ... actually, we also do this in BinaryDocValuesWriter; I'll factor it out & share it.\n\nsum looks unused in addNumericFieldValues\n\nWoops, I'll remove. ",
            "author": "Michael McCandless",
            "id": "comment-13800896"
        },
        {
            "date": "2013-10-30T14:23:37+0000",
            "content": "Commit 1537105 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1537105 ]\n\nLUCENE-5296: add DirectDocValuesFormat ",
            "author": "ASF subversion and git services",
            "id": "comment-13809140"
        },
        {
            "date": "2013-10-30T14:32:21+0000",
            "content": "Commit 1537108 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1537108 ]\n\nLUCENE-5296: add DirectDocValuesFormat ",
            "author": "ASF subversion and git services",
            "id": "comment-13809150"
        },
        {
            "date": "2013-10-30T14:32:31+0000",
            "content": "Thanks Adrien! ",
            "author": "Michael McCandless",
            "id": "comment-13809151"
        },
        {
            "date": "2013-10-30T15:46:51+0000",
            "content": "Commit 1537140 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1537140 ]\n\nLUCENE-5296: clarify the 2.1B value count limit for sorted set field ",
            "author": "ASF subversion and git services",
            "id": "comment-13809254"
        },
        {
            "date": "2013-10-30T15:47:36+0000",
            "content": "Commit 1537141 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1537141 ]\n\nLUCENE-5296: clarify the 2.1B value count limit for sorted set field ",
            "author": "ASF subversion and git services",
            "id": "comment-13809255"
        },
        {
            "date": "2013-11-01T14:09:47+0000",
            "content": "Now that we have this codec, does it make sense to keep FacetDVF? As far as I can tell, the only difference is that FacetDVF keeps the addresses as PackedInts while DirectDVF as int[]? ",
            "author": "Shai Erera",
            "id": "comment-13811269"
        },
        {
            "date": "2013-11-01T15:01:42+0000",
            "content": "Now that we have this codec, does it make sense to keep FacetDVF? As far as I can tell, the only difference is that FacetDVF keeps the addresses as PackedInts while DirectDVF as int[]?\n\nHmm that's a good question.  I'll test the two... ",
            "author": "Michael McCandless",
            "id": "comment-13811310"
        },
        {
            "date": "2013-11-01T20:06:40+0000",
            "content": "The difference in RAM usage was tiny in my test: 139.9 MB for\nFacet42DVF and 140.7 MB for DirectDVF.  For smaller indices, or\nindices w/ fewer facet fields, the difference could be bigger ...\n\nPerf change:\n\n\nReport after iter 19:\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n                 Respell       53.84      (3.1%)       51.27      (3.3%)   -4.8% ( -10% -    1%)\n                  Fuzzy2       25.96      (1.9%)       24.90      (2.0%)   -4.1% (  -7% -    0%)\n                  Fuzzy1       31.56      (2.2%)       31.29      (2.4%)   -0.9% (  -5% -    3%)\n              AndHighLow       60.74      (2.9%)       60.25      (2.7%)   -0.8% (  -6% -    5%)\n            OrNotHighLow       33.05      (4.0%)       33.25      (4.2%)    0.6% (  -7% -    9%)\n             LowSpanNear        7.54      (3.3%)        7.62      (3.7%)    1.1% (  -5% -    8%)\n              AndHighMed       17.44      (1.3%)       17.65      (1.1%)    1.2% (  -1% -    3%)\n                 LowTerm       42.22      (2.4%)       42.83      (2.1%)    1.5% (  -3% -    6%)\n             MedSpanNear       19.07      (2.4%)       19.37      (2.4%)    1.6% (  -3% -    6%)\n            OrNotHighMed       20.66      (3.3%)       20.99      (3.6%)    1.6% (  -5% -    8%)\n         LowSloppyPhrase       25.21      (1.8%)       25.66      (1.9%)    1.8% (  -1% -    5%)\n             AndHighHigh       15.31      (1.4%)       15.60      (1.3%)    1.9% (   0% -    4%)\n               LowPhrase        9.69      (5.4%)        9.89      (5.2%)    2.1% (  -8% -   13%)\n                 Prefix3       15.75      (1.5%)       16.16      (1.6%)    2.6% (   0% -    5%)\n            HighSpanNear        3.87      (3.0%)        3.99      (3.1%)    3.0% (  -2% -    9%)\n               MedPhrase       45.71      (3.4%)       47.19      (3.7%)    3.2% (  -3% -   10%)\n         MedSloppyPhrase        3.30      (6.2%)        3.42      (7.8%)    3.6% (  -9% -   18%)\n                HighTerm       10.69      (1.3%)       11.09      (1.4%)    3.7% (   0% -    6%)\n            OrHighNotMed        9.07      (1.2%)        9.46      (1.7%)    4.3% (   1% -    7%)\n                Wildcard        5.84      (1.1%)        6.15      (1.5%)    5.3% (   2% -    8%)\n        HighSloppyPhrase        3.43      (8.0%)        3.62     (11.4%)    5.5% ( -12% -   27%)\n                 MedTerm       15.65      (1.6%)       16.51      (2.0%)    5.5% (   1% -    9%)\n              HighPhrase        3.14      (6.8%)        3.32      (6.9%)    5.5% (  -7% -   20%)\n               OrHighMed        7.25      (1.4%)        7.66      (1.8%)    5.7% (   2% -    8%)\n           OrHighNotHigh        6.13      (1.8%)        6.50      (2.2%)    6.0% (   1% -   10%)\n            OrHighNotLow        5.44      (1.3%)        5.82      (1.4%)    7.0% (   4% -    9%)\n           OrNotHighHigh       12.42      (1.9%)       13.31      (2.3%)    7.2% (   2% -   11%)\n               OrHighLow        3.83      (1.7%)        4.27      (2.1%)   11.4% (   7% -   15%)\n              OrHighHigh        2.85      (1.7%)        3.23      (2.1%)   13.2% (   9% -   17%)\n                  IntNRQ        2.13      (1.5%)        2.50      (1.2%)   17.1% (  14% -   20%)\n\n\n\nI think we should remove Facet42DVF/Codec? ",
            "author": "Michael McCandless",
            "id": "comment-13811607"
        },
        {
            "date": "2013-11-02T04:27:15+0000",
            "content": "+1. I opened LUCENE-5321 since I want to address FacetCodec changes in general. ",
            "author": "Shai Erera",
            "id": "comment-13811866"
        }
    ]
}