{
    "id": "SOLR-2681",
    "title": "Lucene highlighting unable to extract terms from sub-query of a FunctionQuery",
    "details": {
        "affect_versions": "3.3",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "highlighter"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When using a function query with an argument being a term query, I would expect the highlighter to be able to extract the term.\n\nLucene's WeightedSpanTermExtractor used by QueryScorer does not know about FunctionQuery, so it is not able to recurse into it for extracting terms.\n\nHere's a HighlighterTest that I believe reproduces the behavior I'm seeing:\n\n\n  public void testHighlightFunction() {\n    assertU(adoc(\"t_text\", \"lorem ipsum\", \"id\", \"1\"));\n    assertU(commit());\n    assertQ(\"function highlighting\", \n            req(\"q\", \"{!func}product($v1,$v2)\", \"v1\", \"{!dismax qf=t_text}lorem\", \"v2\", \"100.0\", \"hl\", \"true\", \"hl.fl\", \"t_text\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\" +\n            \"/arr[@name='t_text']/str='<em>lorem</em> ipsum'\");\n  }\n\n\n\nThe WeightedSpanTermExtractor does many instanceof, in which Solr's FunctionQuery is unknown. Solr should provide a QueryScorer that knows how to extract terms from a QueryValueSource inside a FunctionQuery.\n\nHere's the stack that leads to the term extraction:\n\n\nThread [main] (Suspended (breakpoint at line 106 in WeightedSpanTermExtractor))\t\n\tWeightedSpanTermExtractor.extract(Query, Map) line: 106\t\n\tWeightedSpanTermExtractor.getWeightedSpanTerms(Query, TokenStream, String) line: 414\t\n\tQueryScorer.initExtractor(TokenStream) line: 216\t\n\tQueryScorer.init(TokenStream) line: 184\t\n\tHighlighter.getBestTextFragments(TokenStream, String, boolean, int) line: 226\t\n\tHighlighter.getBestFragments(TokenStream, String, int) line: 184\t\n\tHighlighter.getBestFragment(TokenStream, String) line: 107\t\n\tHighlighter.getBestFragment(Analyzer, String, String) line: 85",
    "attachments": {},
    "issue_links": {},
    "comments": []
}