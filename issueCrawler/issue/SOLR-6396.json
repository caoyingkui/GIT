{
    "id": "SOLR-6396",
    "title": "Allow the name of core.properties file used in discovery to be specified by an environment variable",
    "details": {
        "affect_versions": "4.9,                                            6.0",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "This was brought up on the user's list. I haven't thought this through, but it seems reasonable.\n\nThis has some interesting implications in the core rename case, i.e. The unloaded props file will have the different name as well.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14104370",
            "date": "2014-08-20T19:12:52+0000",
            "content": "I don't think we want to make the name of core.properties be variable ... that way leads to madness and confusion.\n\nthe request on the user list was about being able to dynamically load a property file with diff values between dev & production like you could do in the old style solr.xml \u2013 that doesn't mean core.properties needs to have a configurable name, it just means there needs to be a configurable way to load properties.\n\nwe already have a properties option which can be specified in core.properties to point to an additional external file that should also be loaded ... if variable substitution was in play when parsing core.properties then you could have something like properties=custom.${env}.properties in core.properties ... but introducing variable substitution into the core.properties (which solr both reads & writes based on CoreAdmin calls) brings back the host of complexities involved when we had persistence of solr.xml as a feature, with the questions about persisting the original values with variables in them, vs the values after evaluating variables. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14104465",
            "date": "2014-08-20T20:05:04+0000",
            "content": "OK, now that Chris has thought it through I'll can the thought.\n\nOh my, thanks Hossman for preventing me from opening that persistence can of worms again..... "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14104494",
            "date": "2014-08-20T20:18:56+0000",
            "content": "I think this should already work in the way Hoss suggests.  CoreDescriptor keeps track of the original form of a property, and makes it available via getPersistableStandardProperties() and getPersistableUserProperties(). "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14105662",
            "date": "2014-08-21T17:40:09+0000",
            "content": "Confirmed it does work the way Hoss suggests; using property expansion in core.properties meets the need. "
        }
    ]
}