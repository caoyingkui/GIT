{
    "id": "SOLR-2656",
    "title": "realtime get",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Provide a non point-in-time interface to get a document.\nFor example, if you add a new document, you will be able to get it, regardless of if the searcher has been refreshed.",
    "attachments": {
        "SOLR-2656_distrib.patch": "https://issues.apache.org/jira/secure/attachment/12520050/SOLR-2656_distrib.patch",
        "SOLR-2656.patch": "https://issues.apache.org/jira/secure/attachment/12486869/SOLR-2656.patch",
        "SOLR-2656_test.patch": "https://issues.apache.org/jira/secure/attachment/12487389/SOLR-2656_test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13065956",
            "date": "2011-07-15T14:12:11+0000",
            "content": "This feature moves solr a little more down the nosql road (of being a real datastore), and the interface itself should be useful to SolrCloud (for recovery, one node needs to get updates from another node, etc).  Also, if we do versioning in the future, that's another place that will need an up-to-date view of the index internally.\n\nThis should probably be based on SearchHandler (since it should be distributed in the future), but should avoid calling getSearcher on the request object (or it should only use getSearcher when it knows a searcher is ready and it has the requested document(s)).\nPerhaps the UpdateHandler.reopenSearcher could instead be reopenReader, and the update handler could keep a reference to the last reader it opened. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13066130",
            "date": "2011-07-15T18:51:03+0000",
            "content": "It was tricky tracking the newest reader in the update handler, so I'm going to try and track it in SolrCore and consult the update handler to see of there have been any changes. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13067036",
            "date": "2011-07-18T13:57:46+0000",
            "content": "Here's a draft patch (no tests yet) that tracks the latest reader in SolrCore and keeps track of a virtual clock and compares that to the virtual clock of the update handler.\n\nTo try it out, add a document without committing, and then \nhttp://localhost:8983/solr/get?id=SOLR1000\n\nYou can also use the \"fl\" param...\nhttp://localhost:8983/solr/get?id=SOLR1000&fl=id,name\n\n<response>\n  <doc name=\"doc\">\n    <str name=\"id\">SOLR1000</str>\n    <str name=\"name\">Solr, the Enterprise Search Server</str>\n  </doc>\n</response>\n\n\nThe \"id\" param accepts a single id (but you can have multiple parameters)\n\nYou can also use an \"ids\" param, which is a comma separated list of ids.  If you use \"ids\" or multiple \"id\" parameters, then the response will look like a normal doclist. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13067295",
            "date": "2011-07-18T20:57:42+0000",
            "content": "The approach here is to always reopen the reader on-demand when a RT get arrives, ie, if any changes had been made to the index with IndexWriter?\n\nCould you use IR.isCurrent instead of tracking your own generation?\n\nBut, stepping back, this approach (open new NRT reader on demand) seems dangerous?  Ie perf will be poor if a client has one thread constantly updating and another constantly doing RT get?\n\nMaybe we should use NRTManager, or its approach, here?  Ie, rate limit the reopens, so that if there are too many gets, they are batched up and we only reopen \"periodically\" (which can still be relatively frequent).\n\nMaybe we should call this near-real-time get? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13067337",
            "date": "2011-07-18T21:56:06+0000",
            "content": "The approach here is to always reopen the reader on-demand when a RT get arrives, ie, if any changes had been made to the index with IndexWriter?\n\nI was thinking ahead to a more generic version where one could specify the clock (I think this will be needed for future distrib indexing support).  I actually first added a version that took an explicit clock but then simplified it to always use the latest clock and marked it as experimental.\n\nBut, stepping back, this approach (open new NRT reader on demand) seems dangerous? Ie perf will be poor if a client has one thread constantly updating and another constantly doing RT get?\n\nIt's better than what we have today, and it can be optimized in the future.\nOne way would be with a bloom filter of updates that are not yet visible.  Another way will again relate to recovery in distributed indexing, when we'll need to ask another node what all the latest updates after clock x were (and since we'll have those on hand, we can check any realtime-get against that first).\n\nMaybe we should call this near-real-time get?\n\nThat sort of defeats the purpose of the issue - it's supposed to be a 100% reliable get of the latest version of a document. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13067363",
            "date": "2011-07-18T22:44:31+0000",
            "content": "\nMaybe we should call this near-real-time get?\n\nThat sort of defeats the purpose of the issue - it's supposed to be a 100% reliable get of the latest version of a document.\n\nRight, it will always return the last added doc under that ID; I'm not\ndisputing that part.\n\nI am disputing that it's really \"real-time\" given that it's built on\ntop of \"near-real-time\".  Ie calling this real-time is over-selling\nit, I think; the performance will not be great?\n\nAnother thing to consider is NRTCachingDir; it's good for reducing\nlatency when you are frequently flushing tiny segments (make the\nreopen IO-less, except for the ID lookups, unless you use MemCodec, at\nwhich point the NRT open is fully IO free).\n\n\nThe approach here is to always reopen the reader on-demand when a RT get arrives, ie, if any changes had been made to the index with IndexWriter?\n\nI was thinking ahead to a more generic version where one could specify the clock (I think this will be needed for future distrib indexing support). I actually first added a version that took an explicit clock but then simplified it to always use the latest clock and marked it as experimental.\n\nWhat kind of \"clocks\" would one want to plug in here?  Do you mean you\ncould choose to accept some staleness if you wanted (plug in a clock\nthat only increments periodically if there had been updates)?\n\n\nBut, stepping back, this approach (open new NRT reader on demand) seems dangerous? Ie perf will be poor if a client has one thread constantly updating and another constantly doing RT get?\n\nIt's better than what we have today, and it can be optimized in the future.\n\nI agree, progress not perfection.\n\nOne way would be with a bloom filter of updates that are not yet visible. Another way will again relate to recovery in distributed indexing, when we'll need to ask another node what all the latest updates after clock x were (and since we'll have those on hand, we can check any realtime-get against that first).\n\nMaybe Solr should use a transaction log (like ElasticSearch)?  I think\n(not certain) that ES serves a RT get directly out of its transaction\nlog if the doc is in it (else falls back to the reader)?  Then\nsimultaneous updates + gets should really be real-time.  But I\nrealize that'd be a much bigger change... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13067397",
            "date": "2011-07-18T23:48:28+0000",
            "content": "I am disputing that it's really \"real-time\" given that it's built on top of \"near-real-time\". Ie calling this real-time is over-selling\nit, I think; the performance will not be great?\n\nAnother way of thinking about the naming is that NRT returns you data with a low degree of staleness.  Realtime means no staleness.\nno-staleness-get doesn't quite have the same catchiness as realtime-get \n\nAnother thing to consider is NRTCachingDir\n\nI had sort of assumed that would become a lucene default.  If not, we should definitely make it available in Solr.\n\nWhat kind of \"clocks\" would one want to plug in here?\n\nA client could use this to accept some degree of staleness (more useful if clocks have a relation to real time, or if the internal clock on updates was returned to clients).  I was more thinking of future internal uses though - like if we need to retrieve the version of a doc (or other information about it), and we keep track of the last update clock that updated a block of ids, then we can use that to avoid unnecessary re-opens.\n\nMaybe Solr should use a transaction log\n\nYep, that's the idea (we need it for both recovery and durability). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13069341",
            "date": "2011-07-22T01:36:13+0000",
            "content": "I coded up a test and then factored it out since it's probably even a good test even before we get realtime get committed (with the percent of realtime queries set to 0).\n\nBad news is, I'm getting a hang for some reason (just the test w/ straight trunk).  Currently looking into it further, but I thought I'd put up the patch in the meantime anyway. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13069351",
            "date": "2011-07-22T02:04:43+0000",
            "content": "Whew, it was just a test bug.  A tripped assert (that I had backwards) doesn't trigger a catch(Exception e), so the read threads that decrement the counter all exited, leaving the write threads spinning forever. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13098396",
            "date": "2011-09-06T21:51:44+0000",
            "content": "I just committed the implementation attached to SOLR-2700.\nSince the transaction logging does not yet provide durability, realtime-get is the actual feature competed and hence I used this issue number in CHANGES. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13239118",
            "date": "2012-03-27T02:06:38+0000",
            "content": "Here's a patch that enables distributed search support for realtime get.\n\nTests still TBD. "
        }
    ]
}