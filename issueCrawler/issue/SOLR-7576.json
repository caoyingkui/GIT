{
    "id": "SOLR-7576",
    "title": "Implement RequestHandler in Javascript",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Won't Fix",
        "priority": "Major"
    },
    "description": "Solr now support dynamic loading (SOLR-7073) of components and it is secured in SOLR-7126\n\nWe can extend the same functionality with JS as well\n\nthe handler /js is implicitly registered\nTo make this work\n\n\n\tSolr should be started with -Denable.js.loading=true\n\tThe javascript must be loaded to the .system collection using the blob store API\n\tSign the javascript and pass the signature in a param called _sig\n\n\n\nThe JSRequestHandler is implicitly defined and it can be accessed by hitting /js/<jsname>/<version> \n\nSteps for developing scripts\n\n\tstart the cluster with the enable.js.loading . If you are starting using our script it would be bin/solr start -e cloud -a \"-Denable.js.loading=true\" . You would not need security during development , so don't add the private keys to Solr\n\tcreate .system collection bin/solr create -c .system\n\tWrite your javascript code . (say test.js )\n\tpost it to .system collection . curl -X POST -H 'Content-Type: application/octet-stream' --data-binary @test.js http://localhost:8983/solr/.system/blob/test\n\trun your script http://host:8983/solr/gettingstarted/js/test/1\n\tEdit your script and repeat from step #4 . Keep in mind that the version would be bumped up every time you post a new script . So, the second time the url would be http://host:8983/solr/gettingstarted/js/test/2 . So on and so forth\n\n\n\nsample programs\n1) writes a val to output\n\n//empty line\n$.response().add('testkey','Test Val');\n\n\n\n2)  manipulate the output to add an extra field to each doc \n\n//empty line\nvar l = [];\n$.query({\n              q: '*:*',\n              qt: '/select',\n              start:0,\n          }).forEach('response', function(doc) {\n                                         doc.put('script', 'Added this value');\n                                         l.push(doc);\n          });\n $.response().add('alldocs', l);\n\n\n\n3)  stream through all the docs\n\n//empty line\n$.query({\n              q: '*:*',\n              qt: '/select',\n              start:0,\n              distrib:'false'\n          }).pipe('response', 'docs', function(doc) { // the pipe function is executed right before the response writer and right after the transformers   \n                                         if('IT'== doc.get('genre_s')) return null;\n                                         doc.put('script', 'Added this value');\n                                         return doc;\n\n          });",
    "attachments": {
        "SOLR-7576.patch": "https://issues.apache.org/jira/secure/attachment/12735324/SOLR-7576.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-05-29T02:27:00+0000",
            "author": "David Smiley",
            "content": "This duplicates SOLR-5005; but the approach appears a little different.  Perhaps you forgot about that issue?  I admit I've been too busy to finish that up; not that it doesn't work but could use more polish & tests. ",
            "id": "comment-14564099"
        },
        {
            "date": "2015-05-29T06:32:53+0000",
            "author": "Noble Paul",
            "content": " I have missed SOLR-5005\nWe will merge the work done in both the tickets and make this one\n\nIt also should have the security mechanisms which loading  executable code to Solr must adhere to. I'll add security to this before committing ",
            "id": "comment-14564284"
        },
        {
            "date": "2015-05-30T03:45:36+0000",
            "author": "David Smiley",
            "content": "I particularly like that in SOLR-5005 I didn't hard-code the choice of JavaScript.  You could perhaps borrow the script execution mechanism there.  I thought through the multi-threading model of Java's scripting API, or lack thereof ;-P,  when I wrote that.\n\nWithout having to review the patch, I think it's important to show here some JavaScript samples that do little interesting things, thereby showing off whatever utilities provided by this script offer.  It'd be good to get some peer review on that because it in effect creates an API that is somewhat public, and therefore not trivial to change on a whim later.\n\nGood point on security. ",
            "id": "comment-14565815"
        },
        {
            "date": "2015-06-21T04:52:48+0000",
            "author": "Noble Paul",
            "content": "This patch applies on branch 5x ",
            "id": "comment-14594938"
        },
        {
            "date": "2015-06-21T15:21:11+0000",
            "author": "David Smiley",
            "content": "I've vaguely heard of the new blob store & signing.  I took a look at https://cwiki.apache.org/confluence/display/solr/Adding+Custom+Plugins+in+SolrCloud+Mode   I get that it's secure but following that would be a real PITA during development.  Is there a faster way to to redeploy a changed file during development?  Maybe a simple script could do that?  Or better yet, a mode during development that would simply pick up the change from the file system.  Oh wait; in a SolrCloud/ZooKeeper world, that may not make sense.  Hmmmm :-/  Related to this is the possibility of introducing some sort of AbstractSolrTestCase thingamagic (or new subclass) to test that a request employing some specific JavaScript (but defined in the test or as a test resource) is working.  That could lead to a faster dev cycle, and it encourages testing.\n\nHow does one go about logging? (again, not necessarily for real/production but for development to inspect what the heck some object is or its members).\n\nThe examples look nice; I like the use of '$'.  It'd be nice to see an example of taking the response of a query to pull out it's contents.\n\nI understand that JS is a first-class-citizen but if I want to use something else, like Groovy, is that possible?  What remains?  Did you look at SOLR-5005? ",
            "id": "comment-14595083"
        },
        {
            "date": "2015-06-21T15:32:15+0000",
            "author": "Noble Paul",
            "content": "All you need is just a curl command to load the new  script. I'll post the steps\n\nI don't need a generic framework for all platforms . I wish to do JavaScript well and worry about  other languages later. Groovy is a security issue . JavaScript is easy to lock down\nLogging and debugging is something that needs too be added.codebase has changed a lot and the patch in 5005 is not very relevant. ",
            "id": "comment-14595089"
        },
        {
            "date": "2015-06-21T15:43:47+0000",
            "author": "David Smiley",
            "content": "Groovy is a security issue . JavaScript is easy to lock down\n\nCan you please elaborate how that is so on the JVM?  I was unaware that some JVM languages were more secure than others, or frankly that it even matters since this is \"trusted code\" (we even have to sign it). ",
            "id": "comment-14595091"
        },
        {
            "date": "2015-06-21T19:32:16+0000",
            "author": "Noble Paul",
            "content": "Groovy has all permissions a normal java program may have . So it is equivalent to native java code. nashorn JS engine has some nice sandboxing features http://mail.openjdk.java.net/pipermail/nashorn-dev/2013-September/002010.html. recently ES dropped groovy citing security concerns\n\n I wish to develop the SDK that is tailored for a given language. It has to work well for that language. If we need to support other languages , we should invest some time and thought in providing a nice set of APIs for that instead of trying to provide a sub par experience by catering to all languages. ",
            "id": "comment-14595173"
        },
        {
            "date": "2015-06-21T19:43:40+0000",
            "author": "David Smiley",
            "content": "Interesting \u2013 thanks for sharing.  I promise I won't hassle you any more on this issue about supporting other languages \u2013 that can in another issue.    But I find the security issue here quite moot since the code is signed.  \u2013 i.e. I could very well want to do whatever I want without restrictions.  Furthermore, I read the link you pointed to and much of it doesn't apply unless you both run with a security manager and remove various Java things in global scope.  And I don't think we should do those things. ",
            "id": "comment-14595180"
        },
        {
            "date": "2015-06-21T19:49:51+0000",
            "author": "Noble Paul",
            "content": "I have changed the description to explain the dev process ",
            "id": "comment-14595185"
        },
        {
            "date": "2015-08-06T15:13:59+0000",
            "author": "Upayavira",
            "content": "To most people who are used to using Solr, this development process will seem weird and over-complex - because the blob store functionality isn't yet much used.\n\nCan't we have a mode where you just treat your JS the same as the rest of your configs? And also a more advanced mode to handle dynamically uploaded/signed JS like the one you are proposing above?\n\nWhat does this development process give us that we wouldn't have with a file on the filesystem? ",
            "id": "comment-14660150"
        },
        {
            "date": "2015-08-06T15:44:59+0000",
            "author": "Noble Paul",
            "content": "Can't we have a mode where you just treat your JS the same as the rest of your configs?\n\nJS is not configuration. It is executable code. Very quickly we will be filling up ZK with large JS files. Keep in mind that we keep all the old versions also around .\n\nTo most people who are used to using Solr, this development process will seem weird and over-complex - because the blob store functionality isn't yet much used.\n\nOverly complex ? \nIf you look at the steps, most of it is one time task (that is because of the security implications of running executable code in your VM). and the only thing you need to do is a curl command to upload your JS step #4 in the description.\nI can't imagine how can anything be simpler than this\n\nWhat does this development process give us that we wouldn't have with a file on the filesystem?\n\nfilesystem? Which file system when you are using solrcloud ?\n\nIf you wish to use it in standalone mode, then it is not supported, it can be another JIRA\n ",
            "id": "comment-14660185"
        },
        {
            "date": "2015-08-06T16:44:41+0000",
            "author": "Upayavira",
            "content": "We've had JS, we've had XSLT, etc, in our config directory for a long time. What is different about this new approach that it demands a more secure approach in all situations?\n\nPlease understand - I'm really keen on this feature, and am supportive of the auth/signing functionality.\n\nI teach Solr a lot, and I know that a lot of normal users will find the .system and the HTTP post part hard to understand when first getting started, hence wanting to make it really simple to do the simplest things, and possible to do the powerful things. ",
            "id": "comment-14660288"
        },
        {
            "date": "2015-08-06T17:21:04+0000",
            "author": "Noble Paul",
            "content": "We've had JS, we've had XSLT, etc, in our config directory for a long time. What is different about this new approach that it demands a more secure approach in all situations\n\nWe don't give an HTTP API to upload any executable (XSLT/JS). You need direct access to ZK. Solr is moving deeper and deeper into the enterprise and security cannot be an afterthought. So, if there are security hole sin our system, we should close them instead of opening new ones.\n\nI know that a lot of normal users will find the .system and the HTTP post part hard to understand\n\nI miss that point. Users do not need to know anything about .system collection or anything. They should just blindly run a curl command to upload a new version of their JS. That is just one step. The problem starts when you start explaining the innards of the system. You should just say \n\"If you want to upload a new version of your JS, this is the command\". curl -X POST -H 'Content-Type: application/octet-stream' --data-binary @test.js http://localhost:8983/solr/.system/blob/test\nIt does not matter to the user whether the JS is going to live in the cloud, ZK , filesystem or whatever, it just works. Solr is managing it for them\n\nBTW I'm not saying this is the best design possible. Please suggest a simpler way to submit code to SolrCloud and we can adopt that ",
            "id": "comment-14660392"
        },
        {
            "date": "2015-08-06T17:59:00+0000",
            "author": "Upayavira",
            "content": "I dislike the idea that we are going to split ourselves in half - JS for an update processor can just be edited in place, or can be pushed to ZK via zkcli, whereas now, request handler JS must use an entirely different mechanism. That's making Solr much harder to comprehend and understand.\n\nI understand how Solr is moving more into enterprises, but don't see how repeating a pattern we have been using for years is making things considerably worse - that's what I'd like to understand. \n\nFor sure, offer the more secure, enterprise friendly version, but is there a valid reason not to support the method we are already using e.g. for update processors? ",
            "id": "comment-14660489"
        },
        {
            "date": "2015-08-06T18:23:29+0000",
            "author": "Noble Paul",
            "content": "For sure, offer the more secure, enterprise friendly version, but is there a valid reason not to support the method we are already using e.g. for update processors?\n\nSo you suggest that the way we are doing it today is good and we should follow the same path. Can you just list the steps involved for doing development process for the same ?  if I'm doing iterative development of JS how do I do it\n\nI dislike the idea that we are going to split ourselves in half - JS for an update processor can just be edited in place, or can be pushed to ZK via zkcli\n\nI would like to give a big -1 for any feature which requires direct access to ZK. In all our security feaatures we assume that ZK writes are protected. So anyone who has access to ZK can compromise security .If it is already there we should slowly remove it. This JS RequestHandler can actually make a scriptupdateprocessor redundant ",
            "id": "comment-14660560"
        },
        {
            "date": "2015-08-06T19:47:00+0000",
            "author": "Upayavira",
            "content": "For sure - is suspect we're more on the same page than you think.\n\nI would wholly support us moving towards such a situation where ZK is protected, and everything goes via authenticated UIs. My concern is merely about how we get there.\n\ne.g. allow filesystem based JS (for non-cloud) and JS in ZK as now for 5.x, but for 6.x remove that ability and require an API across the board.\n\ni.e. keep things as consistent as we can? ",
            "id": "comment-14660681"
        },
        {
            "date": "2015-08-06T19:50:40+0000",
            "author": "Noble Paul",
            "content": "e.g. allow filesystem based JS (for non-cloud) and JS in ZK as now for 5.x\n\nA lot of APIs we build of late do not have Standalone Solr support. For lack of time and resources we are unable to build that. If possible I would like to see it supported. \n\ni.e. keep things as consistent as we can?\n\nyes, eventually consistent ",
            "id": "comment-14660690"
        },
        {
            "date": "2015-08-07T02:30:32+0000",
            "author": "David Smiley",
            "content": "I think the pain point here that Upayavira is getting at, and which I see, is the annoyance of having to update a file in ZooKeeper from one's file system.  In stand-alone, there is no extra step between saving certain types of files in a conf/ dir on your file system and utilizing it from Solr (perhaps also needing a core reload or similar action).  That file list includes script URPs (JS and other interpreted languages supported), XSLTs, Velocity templates, sometimes DIH config files considering the debug mode, and file based Spellcheck & Suggester sources, and ExternalFileField's source file.  Perhaps there are others I have overlooked.  To some extent we could say absolutely everything in a conf/, but there are now RESTful APIs to modify various things in ways that don't involve the need to update the schema or solrconfig.xml directly.\n\nWhat I'd love to see is a file system to ZooKeeper updater that works automatically once something is saved.  This might be a utility tool only used in development, or perhaps built-in to bin/solr \u2013 either way it'd be super helpful. ",
            "id": "comment-14661214"
        },
        {
            "date": "2015-08-07T02:49:43+0000",
            "author": "Erick Erickson",
            "content": "David Smiley \nre: working with Zookeeper during development....\n\nFWIW, there's a nifty Zookeeper plugin for IntelliJ that lets you edit files directly on the ZK nodes. Totally unsuitable for production of course, you want all that in some kind of version control. But it removes the PITA of dropping to a command window every time you want to change anything in ZK. Not exactly sure how it'd work with this JIRA though. ",
            "id": "comment-14661228"
        },
        {
            "date": "2015-08-07T03:30:15+0000",
            "author": "David Smiley",
            "content": "Nice tip Erick!   \u2013 for reference: https://plugins.jetbrains.com/plugin/7364?pr=idea_ce\nI was just playing around with it now.  The only annoyance I've seen is that when editing a file I need to right-click and choose to update ZK; closing the window loses any edits, it appears. ",
            "id": "comment-14661256"
        },
        {
            "date": "2015-08-07T04:13:53+0000",
            "author": "Noble Paul",
            "content": "David Smiley\nis the annoyance of having to update a file in ZooKeeper from one's file system \n\nI can see that pain point.\n\nBut the current model is totally broken and we MUST move away from from that\n\n\twe can't keep large amounts data in ZK\n\tWe should not give a new feature out which requires a developer direct access to write to ZK.We are talking about the same thing for a toy single node system to large clusters with 1000's of nodes. Any screw up in ZK will have huge impact . It is not like a solr node going down, it is going to blow up a huge cluster\n\tEditing files and picking them up immediately may sound ok if you don't cache stuff. Which is terrible for performance. So there has to be a way to tell Solr that a particular resource is changed\n\tIn real production systems we need to rollback stuff if things are broken. This design lets you do that. You always upload a new version of the same file like a version control system. Uploading a new version will have no impact till you push it to production. Play with the new version till you are happy and then push it to production. The point is , the developer can't screw up the cluster by introducing a small syntax error .\n\n\n\nI'm not against adding an easier dev sandbox for such features. This is just the first step. First of all we need to get the feature right for a deployed large cluster. That is the story that we need to discuss first. This is just one extra step for a developer which is good for him. Ease of use stuff for playing with things is a secondary thing and we should be able to do it as a separate ticket. Understand that a standalone process and a huge cluster with 1000's of nodes will have some difference in the way stuff is deployed\n\nguys , editing ZK directly is fraught with huge risk. Please don't recommend it to users. I understand that we have a lot of legacy stuff without proper APIs and we need to edit things directly. We MUST have a safe way of achieving the same through APIs (eventually). \n\nSo please do not introduce any new feature that needs ZK write.   ",
            "id": "comment-14661282"
        },
        {
            "date": "2015-08-07T04:56:47+0000",
            "author": "Erick Erickson",
            "content": "bq: guys , editing ZK directly is fraught with huge risk. Please don't recommend it to users.\n\nOf course it is. Of course not. That's why I said \" Totally unsuitable for production of course\".\n\nBut for prototyping/quick experiments on an experimental system it's waaaaaay cool. ",
            "id": "comment-14661318"
        },
        {
            "date": "2015-08-07T05:07:31+0000",
            "author": "David Smiley",
            "content": "we can't keep large amounts of data in ZK\n\nYes I am aware.  I see now why you mention this: it's because the \"blob store\" feature is itself a Solr collection and it keeps all versions.  I didn't know that until now (or lapse of memory ;-P); I had guessed (wrongly) it was just a REST API into ZooKeeper.   I think I better understand where you're coming from now.  There are other features like sources for Suggesters that I look forward to seeing getting upgraded to use the blob store, since it's bad to put large files in ZooKeeper in your conf dir.\n\nFor this specific feature (request handlers in scripting language) why should the executable be put in the Blob store at all?  Generally these scripts are going to be very small.   Instead, why not simply access it via the SolrResourceLoader abstraction, thus it'll work for stand-alone file-system & ZooKeeper if SolrCloud (i.e. exactly how the Script URP works)?  A REST API on top could add another convenient access mechanism to \"conf\" dir stuff \u2013 obviously with access control required by default though disable'able at the command-line for developers working on scripts locally.  AFAIK ZooKeeper clients (e.g. Solr) can monitor ZK paths for updates; and likewise this is possible of the file system in modern Java.  In summary, what I'm advocating is that the script be treated like the rest of the configuration for a core, even though technically it's code not configuration.  I don't think that distinction is pertinent. ",
            "id": "comment-14661328"
        },
        {
            "date": "2015-08-07T05:34:43+0000",
            "author": "Noble Paul",
            "content": "There are other features like sources for Suggesters that I look forward to seeing getting upgraded to use the blob store\n\nExactly. That was the reason why I created that API. We need a place where we can store MBs of files and multiple versions of each of them. So a developer should be able to edit without fear and play with his production cluster without impacting his actual users\n\nFor this specific feature (request handlers in scripting language) why should the executable be put in the Blob store at all? Generally these scripts are going to be very small.\n\nI don't know if they are going to be very small and neither do you. In general we need a place which can store a lot of files. Moreover, whether the file is big or small the user experience is going to be exactly same, he will have to run a command line to edit this. Keeping multiple versions of the same script in the conf directory is not what I call elegant. We are just thinking of ZK as a kitchen sink because it used to be file system for standlone solr and size was never a problem\n\nStandalone Solr is not going to be the primary target for any new feature that we develop. In a not too distant future we will make the standalone Solr also use a ZK and other stuff to unify dev/user experience. After all a standalone  solr can easily be a single collection/ single shard/single replica version of SolrCloud. \n\nA REST API on top could add another convenient access mechanism to \"conf\" dir stuff \nPlease , we are not going to add more stuff to conf dir. That is a slippery slope. conf dir should have well known standard files. The rest of the stuff should move away. Bloating up ZK just because we used to store things in conf dir is just inertia. We must get over it. \n\nHaving said that there is nothing that stops us from configuring the JsRequestHandler to load scripts from a local file system directory which can be useful for certain usecases. \n\ni.e. exactly how the Script URP works\n\nIIRC the script URP does not reload the script automatically by watching the ZK node. You need to go and restart core or other dirty stuff. In a large SolrCloud cluster that amounts to 100's of cores getting reloaded and caches trashed and what not (all queries getting slow/ a lot of GC etc). Do you still like that idea? Let's not assume that whatever we have today is optimized to run on cloud mode. There are a lot of things that got carried forward from the legacy things which are suboptimal to cloud. Instead of clinging on to the old way of life we must modernize our system to adopt the new paradigm\n\n\n\n ",
            "id": "comment-14661362"
        },
        {
            "date": "2017-09-20T15:27:02+0000",
            "author": "Noble Paul",
            "content": "it's a security nightmare ",
            "id": "comment-16173339"
        }
    ]
}