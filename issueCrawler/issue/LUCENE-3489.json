{
    "id": "LUCENE-3489",
    "title": "Refactor test classes that use assumeFalse(codec != SimpleText, Memory) to use new annotation and move the expensive methods to separate classes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/test"
        ],
        "type": "Test",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Folloup for LUCENE-3463.\n\nTODO:\n\n\tMove test-methods that need the new @UseNoMemoryExpensiveCodec annotation to separate classes\n\tEliminate the assumeFalse-calls that check the current codec and disable the test if SimpleText or Memory is used",
    "attachments": {
        "LUCENE-3489.patch": "https://issues.apache.org/jira/secure/attachment/12526575/LUCENE-3489.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-10-05T13:25:51+0000",
            "content": "you know, another similar issue we have is tests that assumeFalse(codec != PreFlex), because of things like new index statistics or byte terms or other features that it doesn't support.\n\nMaybe there is some way we could generalize the annotation?\n\nsomething like @AvoidCodecs(\"SimpleText\", \"Memory\"), @AvoidCodecs(\"PreFlex\"), and this set would be handled like the boolean today? ",
            "author": "Robert Muir",
            "id": "comment-13120942"
        },
        {
            "date": "2011-10-05T13:31:51+0000",
            "content": "Nice idea, this can be easily transformed to a annotation with param! Of course it would be per-class, too. ",
            "author": "Uwe Schindler",
            "id": "comment-13120957"
        },
        {
            "date": "2011-10-05T14:57:12+0000",
            "content": "While working on my presentation I've been trying to generalize the concept of \"randomized tests\". There's definitely a lot of great concepts here, but they're closely coupled with Lucene and the rest of the Solr/Lucene infrastructure. \n\nI have a draft code of a RandomizedTesting framework that provides very much similar functionality, although in a slightly different technical way (for example it's based on JUnit @Rules only, not on a custom runner/ base abstract class). I would really like you to peek at this and, perhaps with some effort, generalize the concepts in the test framework instead of introducing more Lucene-specific annotations.\n\nI'll publish the code tomorrow (it still needs some, ehm, polishing) along with some thoughts that I had about the current code in LuceneTestCase/Runner. \n\nI'd really like this to evolve into something of a stand-alone project (even if bundled with Lucene) so that other project can benefit without necessarily rely on the rest of Lucene code. We're already using a somewhat decoupled code internally and making it really cross-project applicable is a great way of proving these concepts are generally useful.\n\nUntil tomorrow?  ",
            "author": "Dawid Weiss",
            "id": "comment-13121020"
        },
        {
            "date": "2011-10-05T16:06:19+0000",
            "content": "(for example it's based on JUnit @Rules only, not on a custom runner/ base abstract class)\n\nThis is a nice idea, although the reason for the LuceneTestCaseRunner and the abstract base class is more because we hate @Test annotations and dont want to add thousands of stupid Assert-includes (having this is abstract base class is more convenient). Just to mention UweSays on twitter: @UweSays ",
            "author": "Uwe Schindler",
            "id": "comment-13121077"
        },
        {
            "date": "2011-10-05T16:19:46+0000",
            "content": "Yeah, I figured that you want to keep it compact. These may be compatible because there's nothing forbidding us to keep LuceneTestCase as a base class (descending from Assert and providing Lucene-related infrastructure). I'm just trying to push all the randomization (seed initialization, reproducibility, thread controls) out of LuceneTestCase and into something more generic. So far it looks good to my eyes, but I'll be looking forward to your strict German opinion, Uwe \n\nOh, by the way \u2013 is there any particular reason for so many things to be static (class level)? I get these are fixtures reused by tests but would people scream if they were object-level fixtures rather than class-level fixtures? It'd make things a bit easier... starting with the need for a single initial seed, for example. ",
            "author": "Dawid Weiss",
            "id": "comment-13121098"
        },
        {
            "date": "2011-10-05T16:27:19+0000",
            "content": "\nOh, by the way \u2013 is there any particular reason for so many things to be static (class level)? I get these are fixtures reused by tests but would people scream if they were object-level fixtures rather than class-level fixtures? It'd make things a bit easier... starting with the need for a single initial seed, for example.\n\nwhy we have the different seeds:\nOne thing we do is support running a test class (test1(), test2(), test3()). If test2() fails, we want to be able to just run that method and reproduce it.\nSo we allow you to specify -Dtestmethod to only run a single method.\n\nAt the same time, we want to support doing things like creating indexes in beforeClass() and afterClass() for efficient tests.\nWe also support -Dtests.iter, where you run a single test method over and over... this is often convenient. If we only had 1 class-level seed, this would\nbe useless as it would just do the same thing over and over!\n\nSo the need for multiple seeds comes from the fact that some things are random at \"class-level\" and some things are at \"method level\". \nIf you look at the 3 parts to the random seed, its really part1:part2:part3,\n\n\tpart1 = class seed\n\tpart2 = method seed\n\tpart3 = runner seed (this is needed for consistent randomization of test methods)\n\n ",
            "author": "Robert Muir",
            "id": "comment-13121102"
        },
        {
            "date": "2011-10-05T16:29:41+0000",
            "content": "Yeah, I figured that you want to keep it compact. These may be compatible because there's nothing forbidding us to keep LuceneTestCase as a base class (descending from Assert and providing Lucene-related infrastructure).\n\nYes, I just wanted to mention this.\n\nThe other stuff in LuceneTestRunner is just to work around some limitations in JUnit's @BeforeClass: @BeforeClass does not pass the Class object to the annotated method, and you cannot find out which child class is initialized. So checking for annotations on the implementation class from the abstract LuceneTestCase base class does not work.\n\nOh, by the way \u2013 is there any particular reason for so many things to be static (class level)? I get these are fixtures reused by tests but would people scream if they were object-level fixtures rather than class-level fixtures? It'd make things a bit easier... starting with the need for a single initial seed, for example.\n\nThe reason is simple: We want those per test-class lifetime, but JUnit allocates a new class instance for each test method. And lot's of Lucene tests use @BeforeClass to produce indexes (random) static indexes, then used by all test methods in a read-only way. Currently we have 3 seeds, one for class-level stuff, one for instance stuff and a third one for the runner (according to Mister Robert Muir: LUCENE-3362).\n\nThe randoms must therefore be static and initialized in @BeforeClass. ",
            "author": "Uwe Schindler",
            "id": "comment-13121105"
        },
        {
            "date": "2011-10-05T16:37:52+0000",
            "content": "The need for the runner seed is explained in LUCENE-3362. One problem is the \"Test lifecyle\" of junit is ill-defined, it depends on how you are running tests!\n\nThe problem is that via ant, tests work like this (e.g. for 3 test classes):\ncomputeTestMethods\nbeforeClass\nafterClass\ncomputeTestMethods\nbeforeClass\nAfterClass\ncomputeTestMethods\nbeforeClass\nafterClass\n\nbut via an IDE or maven, if you run it from a folder like you did, then it does this:\ncomputeTestMethods\ncomputeTestMethods\ncomputeTestMethods\nbeforeClass\nafterClass\nbeforeClass\nafterClass\nbeforeClass\nafterClass \n\n ",
            "author": "Robert Muir",
            "id": "comment-13121116"
        },
        {
            "date": "2011-10-05T17:32:17+0000",
            "content": "Thanks. I did go through the code, so I know where the seeds are used and had a pretty much good understanding as to why. \n\nAs for the different lifecycle - this is weird, but isn't it a direct consequence of subclassing BlockJUnit4ClassRunner and relying on what it internally does? This is what's causing the problem (superclass impl. changing over time - I think you just hit two different junit versions in that issue). \n\nPerhaps I was wrong and a custom runner is indeed needed, but if so then I still think a single seed (logically) would be fine. A custom runner then:\n\n\tcollects methods to be executed (per-class)\n\tinitializes the global init seed/ random. This random becomes the initial randomness source for everything that follows to make it repeatable.\n\tshuffles methods,\n\texecute any @BeforeClass rules (see note below),\n\tfor each selected method (-Dtestmethod limits the selection and acts as a filter), repeat test.iter-times (seed changes predictably): \n{initialize per-method starting seed based on the current random, create a new test instance, execute}\n.\n\texecute any @AfterClass rules\n\n\n\nThe question how to randomize class-level fixtures could be answered by a static utility method that would return the per-class seed using ThreadLocal or a thread map updated by the runner. Still predictable and repeatable.\n\nI'll chew a bit on the possibilities and report back tomorrow. ",
            "author": "Dawid Weiss",
            "id": "comment-13121182"
        },
        {
            "date": "2011-10-05T17:35:11+0000",
            "content": "Re-reading the above algorithm I think I'll make it clearer: my point is that you can write repeatable runner by starting from a single initial seed and assigning initial seeds to all execution start points (tests) regardless of whether they are executed or not (and how many times). Hope I'm a bit clear(er) now. ",
            "author": "Dawid Weiss",
            "id": "comment-13121189"
        },
        {
            "date": "2011-10-05T17:36:14+0000",
            "content": "\nThis is what's causing the problem (superclass impl. changing over time - I think you just hit two different junit versions in that issue). \n\nI disagree. I used the same junit version (4.7) myself in both eclipse and via ant to deal with this problem. It has nothing to do with that.\n\nThe junit test lifecycle is really undefined just as I described, its unfortunate. ",
            "author": "Robert Muir",
            "id": "comment-13121190"
        },
        {
            "date": "2011-10-05T17:38:32+0000",
            "content": "And just so you know, its not possible i could have used 4.8 here, because all of our tests fail with 4.8\n\nThats because of breaks in the lifecycle of TestWatchMan (Its initialized before the @Before's in 4.8, not in 4.7).\nA separate problem, but just something to mention. currently you cannot use junit 4.8 with lucene's tests for this reason. ",
            "author": "Robert Muir",
            "id": "comment-13121193"
        },
        {
            "date": "2011-10-05T17:58:19+0000",
            "content": "One last thing, thinking thru the simplifications Dawid is looking at doing, \nand knowing how horrible the code currently is, we could consider trying some things like:\n\n\tupgrade/fix our tests to work with latest junit? maybe there are less frustrations\n\tcontribute some of the more general things like assume(String message, xxx) to junit to get them out of our codebase?\n\n ",
            "author": "Robert Muir",
            "id": "comment-13121285"
        },
        {
            "date": "2012-05-11T21:40:45+0000",
            "content": "attached is a patch generalizing the UseNoExpensiveMemory annotation to @AvoidCodecs that takes a list of codecs to avoid.\n\nThis way, tests that cannot work with Lucene3x codec can just avoid it, using another codec, rather than assuming (in general its bad that many of the tests of actual new functionality often dont run at all because of the current assumes)  ",
            "author": "Robert Muir",
            "id": "comment-13273642"
        },
        {
            "date": "2012-05-12T02:18:50+0000",
            "content": "I like the annotation. Can we maybe change it to look like @SuppressWarnings? So it does not need codecs={} or if there is only one codec, no {} at all? Should be not too hard?\n\nOtherwise strong +1! ",
            "author": "Uwe Schindler",
            "id": "comment-13273811"
        },
        {
            "date": "2012-05-12T02:20:48+0000",
            "content": "It's easy, just rename codecs to \"String[] value\" and you are done. After that you can use @AvoidCodecs(\"SimpleText\") or @AvoidCodecs(\n{\"SimpleText\",\"Lucene3x\"}\n)\n\nSee: http://docs.oracle.com/javase/1.5.0/docs/api/java/lang/SuppressWarnings.html ",
            "author": "Uwe Schindler",
            "id": "comment-13273812"
        },
        {
            "date": "2012-05-12T06:21:33+0000",
            "content": "I agree, this is the main problem with the current patch. We should fix this before committing. ",
            "author": "Robert Muir",
            "id": "comment-13273856"
        },
        {
            "date": "2012-05-12T13:18:47+0000",
            "content": "updated patch using value[], much less wordy. \n\nI will commit soon. ",
            "author": "Robert Muir",
            "id": "comment-13273996"
        },
        {
            "date": "2012-05-12T13:29:20+0000",
            "content": "ok one last change, renamed to SuppressCodecs (it actually is not just funny, but better since it works the same way etc) ",
            "author": "Robert Muir",
            "id": "comment-13273998"
        },
        {
            "date": "2013-07-23T18:44:53+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717091"
        },
        {
            "date": "2014-04-16T12:54:35+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970810"
        }
    ]
}