{
    "id": "LUCENE-104",
    "title": "SegmentTermPositions bug in method seek(TermInfo)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "final void seek(TermInfo ti) throws IOException \n{\n    super.seek(ti);\n    if (ti != null)\n      proxStream.seek(ti.proxPointer);\n    else\n      proxCount = 0;\n  }\n\nnote that proxCount is cleared only when ti!=null\nso the following code will fail:\n(assume tp is an instance of SegmentTermPositions, ti1 and ti2 is TermInfo)\ntp->seek(ti1);\ntp->next();  // now proxCount>0\ntp->seek(ti2);\ntp->next();  // incorrectly skiped proxCount postings\ntp->nextPosition();  // would yield incorrect result\n\nand the following code will throw \"read past eof\"\ntp->seek(null);\nwhile(tp->next()) {}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2003-04-21T21:39:52+0000",
            "content": "Could you please provide an exception stack trace and a self-sufficient test case?\nThanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321275"
        },
        {
            "date": "2003-04-23T15:21:54+0000",
            "content": "sorry, new to java, don't know how to do stack trace.\nuse the following program with index path as argument\nwill generate \"read past eof\" exception:\n\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.TermEnum;\nimport org.apache.lucene.index.TermPositions;\n\nclass TermPositionsBug {\n  public static void main(String[] args) {\n    try {\n      IndexReader reader = IndexReader.open(args[0]);\n\n      TermEnum te = reader.terms();\n      TermPositions tp = reader.termPositions();\n\n      while (te.next()) {\n        tp.seek(te.term());\n        while (tp.next()) {\n        }\n      }\n\n      reader.close();\n    } catch (Exception e) \n{\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n} ",
            "author": "Charles Liu",
            "id": "comment-12321276"
        },
        {
            "date": "2003-04-23T15:24:32+0000",
            "content": "sorry, new to java so don't know how to do stack trace.\n\nrun the following program with index path as argument\nwill generate a \"read past eof\" message:\n\nimport org.apache.lucene.index.IndexReader;\nimport org.apache.lucene.index.TermEnum;\nimport org.apache.lucene.index.TermPositions;\n\nclass TermPositionsBug {\n  public static void main(String[] args) {\n    try {\n      IndexReader reader = IndexReader.open(args[0]);\n\n      TermEnum te = reader.terms();\n      TermPositions tp = reader.termPositions();\n\n      while (te.next()) {\n        tp.seek(te.term());\n        while (tp.next()) {\n        }\n      }\n\n      reader.close();\n    } catch (Exception e) \n{\n      System.out.println(\" caught a \" + e.getClass() +\n\t\t\t \"\\n with message: \" + e.getMessage());\n    }\n  }\n} ",
            "author": "Charles Liu",
            "id": "comment-12321277"
        },
        {
            "date": "2003-04-23T23:17:34+0000",
            "content": "Doesn't this look wrong to you?\n\n      while (te.next()) {\n        tp.seek(te.term());\n        while (tp.next()) {\n        }\n      }\n\nWhat is the above code trying to do?\nWouldn't that be equivalent to:\n\n      if (te.next()) \n{\n        tp.seek(te.term());\n      }\n\nIf yes, does that still give you an exception?\nThis doesn't look like a bug to me...\nPlease re-open it if the above if block still fails for you.\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321278"
        },
        {
            "date": "2003-04-24T11:48:57+0000",
            "content": "Ok let's do something more realistic:\nSay I'm getting the first position per document for every term,\nso I change the loop into\n\n      int i;\n      while (te.next()) {\n        tp.seek(te.term());\n        while (tp.next()) \n{\n          if (tp.freq()>=1)\n            i = tp.nextPosition();\n        }\n      }\n\ndoes this make more sense?  I agree this bug doesn't affect normal use,\nbut it's a bug.  And it's easy to fix:  just remove the 'else' in seek() ",
            "author": "Charles Liu",
            "id": "comment-12321279"
        },
        {
            "date": "2003-04-24T11:55:49+0000",
            "content": "note: the code fails only when tp.next() is called multiple times, but\ntp.nextPosition() is called less than tp.freq() times.  The pointer to\nproxStream is misplaced then.  So current Lucene search code is not\naffected.\n\n\n      while (te.next()) {\n        tp.seek(te.term());\n        while (tp.next()) {\n        }\n      }\n\nshould be equivalent to\n\n      while (te.next()) \n{\n        tp.seek(te.term());\n      }\n\nand \n      nothing\nbut there must be something wrong when 'nothing' fails, right? ",
            "author": "Charles Liu",
            "id": "comment-12321280"
        },
        {
            "date": "2004-04-19T21:11:25+0000",
            "content": "Charles Liu was perfectly right. \nI commited the change he proposed.  ",
            "author": "Christoph Goller",
            "id": "comment-12321281"
        }
    ]
}