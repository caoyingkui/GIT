{
    "id": "LUCENE-6305",
    "title": "BooleanQuery.equals should ignore clause order",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "BooleanQuery.equals is sensitive to the order in which clauses have been added. So for instance \"+A +B\" would be considered different from \"+B +A\" although it generates the same matches and scores.",
    "attachments": {
        "LUCENE-6305.patch": "https://issues.apache.org/jira/secure/attachment/12740487/LUCENE-6305.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14592484",
            "author": "Adrien Grand",
            "date": "2015-06-18T20:48:30+0000",
            "content": "I think this issue is important if we want to be able to cache boolean queries efficiently.\n\nHere is a patch, it adds a simple HashMap-based Multiset (bag) implementation to oal.util and uses it in BooleanQuery so that the order in which clauses are added does not matter. "
        },
        {
            "id": "comment-14593447",
            "author": "Terry Smith",
            "date": "2015-06-19T14:12:29+0000",
            "content": "Having BooleanQuery.equals() ignore order is a great idea but I think it'd be better if we could preserve the original clause order for Query.toString(), the Explanation, debugging and test expectations. \n\nAdditionally, I've been burnt by JVM changes to String.hashCode() that cause HashMap<String,?> to order entries differently when run in a newer JVM. Are the Query hash codes immune to this problem? "
        },
        {
            "id": "comment-14593450",
            "author": "Adrien Grand",
            "date": "2015-06-19T14:15:13+0000",
            "content": "This is exactly what the patch is doing: clauses are put both into a list and a multiset, and the list is used for clauses()/toString() while the multiset is used for equals()/hashcode(). So the iteration order is predictable. "
        },
        {
            "id": "comment-14593457",
            "author": "Terry Smith",
            "date": "2015-06-19T14:22:08+0000",
            "content": "Oops, read the patch too quickly and missed that key detail! Sorry for the noise.\n "
        },
        {
            "id": "comment-14593467",
            "author": "Terry Smith",
            "date": "2015-06-19T14:33:05+0000",
            "content": "Slightly off topic to your original goal, but what do you think about deduping repeated non scoring (FILTER, MUST_NOT) clauses from the list in the query or do you see that as an possible optimization when building the weights/scorers?\n\n "
        },
        {
            "id": "comment-14734785",
            "author": "Adrien Grand",
            "date": "2015-09-08T13:19:54+0000",
            "content": "Slightly off topic to your original goal, but what do you think about deduping repeated non scoring (FILTER, MUST_NOT) clauses from the list in the query or do you see that as an possible optimization when building the weights/scorers?\n\n+1 This would be a nice optimization for the rewrite method. "
        },
        {
            "id": "comment-14734795",
            "author": "Adrien Grand",
            "date": "2015-09-08T13:34:19+0000",
            "content": "Revisiting this issue now that queries can be considered immutable. I rebased the patch to current trunk. BooleanQuery.equals/hashcode don't depend on the order of clauses anymore but the iteration order of the clauses and the toString() representation of BooleanQuery have not changed. "
        },
        {
            "id": "comment-14735077",
            "author": "Yonik Seeley",
            "date": "2015-09-08T16:19:58+0000",
            "content": "Cloud this optimization somehow be made optional?\nAnyone who is programmatically creating or mutating queries will naturally already order clauses.\nAlso, doing something like adding another clause to an existing boolean query will do all the work of ordering yet again.\nPerhaps create a subclass for this stuff? "
        },
        {
            "id": "comment-14735615",
            "author": "Adrien Grand",
            "date": "2015-09-08T21:08:18+0000",
            "content": "Actually I think of this change more as a bug fix than as an optimization: the order of the clauses has no meaning for BooleanQuery so it is silly that it is taken into account for equals/hashcode? I don't see why someone would like clause order to be meaningful?\n "
        },
        {
            "id": "comment-14736715",
            "author": "Yonik Seeley",
            "date": "2015-09-09T11:52:58+0000",
            "content": "Actually I think of this change more as a bug fix than as an optimization\n\nIf you have a system that always generates queries the same way (and there are quite a few of those who use lucene/solr), then the extra work is unwanted overhead.  And in some cases, the overhead could be significant (very very large queries... i've seen examples).\n\nOne could also check for more complex transformations to make apparently unequal boolean queries equal, and that would be great, but the cost should not be imposed on those who don't need/want it.\n\nThen think about taking one of those large queries and programmatically adding a single clause... all that work needs to be re-done?\n\nThe same as checking for duplicate negative clauses - great if you have a system that could generate them I guess, but one should be able to opt-out.\nThere are so many users, we need to continue to design for the corner cases as well as the mainstream, as long as those needs don't conflict.  All that means in this case is to have a way to opt out of all the checking and say \"just create me a weight with these clauses\".  I guess that could just be an expert static method on BooleanQuery?\n\n/** @lucene.expert */\npublic static Weight createWeightFrom(List<BooleanClause> clauses)\n\n "
        },
        {
            "id": "comment-14736754",
            "author": "Robert Muir",
            "date": "2015-09-09T12:23:29+0000",
            "content": "what a load of horseshit. Those expert users can use custom queries. "
        },
        {
            "id": "comment-14736763",
            "author": "Yonik Seeley",
            "date": "2015-09-09T12:33:26+0000",
            "content": "what a load of horseshit\n\nI am continually reminded why I try to minimize any interaction in lucene these days... it's become the most hostile open source community I've ever seen.\n\nThose expert users can use custom queries.\n\nWhich is what something like this would allow, without necessitating duplicating all of the boolean scorer logic:\n\npublic static Weight createWeightFrom(List<BooleanClause> clauses)\n\n "
        },
        {
            "id": "comment-14736764",
            "author": "Uwe Schindler",
            "date": "2015-09-09T12:33:55+0000",
            "content": "Then think about taking one of those large queries and programmatically adding a single clause... all that work needs to be re-done?\n\nIn Lucene 6, BooleanQuery is unmodifiable, so you have to do the work anyways (or preserve the builder instance somewhere), "
        },
        {
            "id": "comment-14736773",
            "author": "Adrien Grand",
            "date": "2015-09-09T12:36:48+0000",
            "content": "In general I don't like adding such methods because they increase the surface of our APIs and therefore its complexity. One trade-off I would be ok with would be to make the multiset lazily computed so that it does not get computed unless you call equals/hashcode. Would it work for you? If this is not enough, I tend to agree with Robert that the best option in that case might be to build a custom query. "
        },
        {
            "id": "comment-14736775",
            "author": "Yonik Seeley",
            "date": "2015-09-09T12:38:03+0000",
            "content": "In Lucene 6, BooleanQuery is unmodifiable, so you have to do the work anyways (or preserve the builder instance somewhere),\n\nCorrect... it's more about how expensive it is to build a boolean query. "
        },
        {
            "id": "comment-14736783",
            "author": "Robert Muir",
            "date": "2015-09-09T12:47:25+0000",
            "content": "\nI am continually reminded why I try to minimize any interaction in lucene these days... it's become the most hostile open source community I've ever seen.\n\nThat would be great, then your passive-aggressive commentary (with no actual contributions) trying to hold back lucene would disappear.\n\nYour passive-aggressive crap is even more hostile. I am straightforward and call you out on it. "
        },
        {
            "id": "comment-14736806",
            "author": "Yonik Seeley",
            "date": "2015-09-09T13:04:27+0000",
            "content": "trying to hold back lucene \n\nThat's the problem (among other things)... you see ulterior motives everywhere.  Just like you accused Hoss of \"You just want to make Lucene harder to use, so more people will use apache solr instead.\"  \nhttps://issues.apache.org/jira/browse/LUCENE-5859?focusedCommentId=14080155&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14080155\n\nPretty sad. "
        },
        {
            "id": "comment-14746279",
            "author": "Hoss Man",
            "date": "2015-09-15T21:37:25+0000",
            "content": "If you have a system that always generates queries the same way (and there are quite a few of those who use lucene/solr), then the extra work is unwanted overhead. And in some cases, the overhead could be significant (very very large queries... i've seen examples).\n\n+1\n\nOne trade-off I would be ok with would be to make the multiset lazily computed so that it does not get computed unless you call equals/hashcode. ... the best option in that case might be to build a custom query.\n\nWhy (in the latest patch) is the multiset (and multiset comparison in .equals) part of BooleanQuery at all?\n\nI wasn't following the interconnection between all of these issues very closely, but i thought Adrien mentioned at one point that one of the motivations/ benefits of the FooQuery.Builder APIs (and making the queries immutable) was that it would allow us to simplify (and make more efficient) some of the methods like .equals and .hashCode by moving the expensive logic (ie: deterministically ordering the clauses) into the Builder.build() methods so that the queries themselves wouldn't have to carry around the extra data structures or do any particularly complex logic in .equals()\n\nwouldn't that be the best of both worlds?  only do the expensive comparisons / deterministic ordering of the BooleanClauses once in BooleanQuery.build(), and for \"expert\" cases where you are programatically creating adding clauses in a known deterministic order anyway, you can write you're own custom BooleanQuery.Builder (sub)class? "
        },
        {
            "id": "comment-14804519",
            "author": "David Smiley",
            "date": "2015-09-17T21:14:06+0000",
            "content": "I wasn't following the interconnection between all of these issues very closely, but i thought Adrien mentioned at one point that one of the motivations/ benefits of the FooQuery.Builder APIs (and making the queries immutable) was that it would allow us to simplify (and make more efficient) some of the methods like .equals and .hashCode by moving the expensive logic (ie: deterministically ordering the clauses) into the Builder.build() methods so that the queries themselves wouldn't have to carry around the extra data structures or do any particularly complex logic in .equals()\n\nwouldn't that be the best of both worlds? only do the expensive comparisons / deterministic ordering of the BooleanClauses once in BooleanQuery.build(), and for \"expert\" cases where you are programatically creating adding clauses in a known deterministic order anyway, you can write you're own custom BooleanQuery.Builder (sub)class?\n\n+1 Sounds great to me \u2013 best of both worlds indeed. "
        },
        {
            "id": "comment-14907964",
            "author": "Adrien Grand",
            "date": "2015-09-25T11:49:32+0000",
            "content": "I don't think we can order queries in a deterministic way in BooleanQuery.Builder given that queries are not comparable? So we need the MultiSet?\n\nI wrote a simple micro-benchmark and was able to create more than 150k 100-clauses boolean queries per second on a single core, which is much faster than a typical per-core search request throughput. So I don't think we need to make it optional, we can just enable it all the time? "
        },
        {
            "id": "comment-14908027",
            "author": "Michael McCandless",
            "date": "2015-09-25T13:27:22+0000",
            "content": "So I don't think we need to make it optional, we can just enable it all the time?\n\n+1 "
        },
        {
            "id": "comment-14909843",
            "author": "Ryan Ernst",
            "date": "2015-09-27T18:48:24+0000",
            "content": "+1 to enabling all the time "
        },
        {
            "id": "comment-14950214",
            "author": "Adrien Grand",
            "date": "2015-10-09T11:05:53+0000",
            "content": "Are there still objections to commit this patch in light of the latest comments? "
        },
        {
            "id": "comment-14950255",
            "author": "Jack Krupansky",
            "date": "2015-10-09T11:35:06+0000",
            "content": "No objection, but it would be good for the javadoc for BQ and BQ.Builder to explicitly state the contract that the order that clauses are added will not impact either the results of the query, their order, or the performance of the execution of the query - assuming those facts are all true. "
        },
        {
            "id": "comment-14950479",
            "author": "Adrien Grand",
            "date": "2015-10-09T14:35:09+0000",
            "content": "Good call Jack.\n\nthe order that clauses are added will not impact either the results of the query, their order,\n\nThis is true.\n\nor the performance of the execution of the query\n\nThis is mostly true today and should be completely true once LUCENE-6276 is in.\n\nHere is a new patch with improved javadocs. I also improved equals to ignore duplicates for FILTER and MUST_NOT clauses since they don't matter, and made the hashCode() cached. "
        },
        {
            "id": "comment-14953622",
            "author": "ASF subversion and git services",
            "date": "2015-10-12T19:43:24+0000",
            "content": "Commit 1708211 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1708211 ]\n\nLUCENE-6305: BooleanQuery.equals/hashcode ignore clause order. "
        },
        {
            "id": "comment-14953732",
            "author": "ASF subversion and git services",
            "date": "2015-10-12T21:05:04+0000",
            "content": "Commit 1708244 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1708244 ]\n\nLUCENE-6305: BooleanQuery.equals/hashcode ignore clause order. "
        }
    ]
}