{
    "id": "LUCENE-5910",
    "title": "Cutover to Java7 nio APIS to improve SegmentInfos fallback logic",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "Spinoff from LUCENE-5904 ...\n\nToday we have crazy logic (SegmentInfos.FindSegmentsFile) to try to locate the \"latest\" segments_N file from the index directory, even while a writer commits (writes a new segments_N+1 and removes the old one) concurrently while we try to open a DirectoryReader on the index.\n\nBut it's scary because it catches any IOException and assumes that segments_N was no good and tries to find an older one to load.\n\nReally it should be more picky, and only fall back e.g. if it hit EOFE, or if one of the SegmentReaders hit FNFE, and for other exceptions e.g. transient problems like \"out of file desctriptors\" or OOME or \"access denied\" it should immediately throw these back to caller instead of falling back which risks losing documents in the index.",
    "attachments": {},
    "issue_links": {},
    "comments": []
}