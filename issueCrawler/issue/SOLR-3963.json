{
    "id": "SOLR-3963",
    "title": "SOLR: map() does not allow passing sub-functions in 4,5 parameters",
    "details": {
        "affect_versions": "4.0",
        "status": "Reopened",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I want to do:\n\nboost=map(achievement_count,1,1000,recip(achievement_count,-.5,10,25),1)\n\nI want to return recip(achievement_count,-.5,10,25) if achievement_count is between 1 and 1,000. FOr any other values I want to return 1.\n\nI cannot get it to work. I get the error below. Interesting this does work:\n\nboost=recip(map(achievement_count,0,0,200),.5,10,25)\n\nIt almost appears that map() cannot take a function.\n\n\n Specified argument was out of the range of valid values.\nParameter name: value\nDescription: An unhandled exception occurred during the execution of the current web request. Please review the stack trace for more information about the error and where it originated in the code.\n\nException Details: System.ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\nParameter name: value\n\nSource Error:\n\nAn unhandled exception was generated during the execution of the current web request. Information regarding the origin and location of the exception can be identified using the exception stack trace below.\n\nStack Trace:\n\n\n[ArgumentOutOfRangeException: Specified argument was out of the range of valid values.\nParameter name: value]\n   System.Web.HttpResponse.set_StatusDescription(String value) +5200522\n   FacilityService.Controllers.FacilityController.ActionCompleted(String actionName, IFacilityResults results) +265\n   FacilityService.Controllers.FacilityController.SearchByPointCompleted(IFacilityResults results) +25\n   lambda_method(Closure , ControllerBase , Object[] ) +114\n   System.Web.Mvc.Async.<>c_DisplayClass7.<BeginExecute>b_5(IAsyncResult asyncResult) +283\n   System.Web.Mvc.Async.<>c_DisplayClass41.<BeginInvokeAsynchronousActionMethod>b_40(IAsyncResult asyncResult) +22\n   System.Web.Mvc.Async.<>c_DisplayClass3b.<BeginInvokeActionMethodWithFilters>b_35() +120\n   System.Web.Mvc.Async.<>c_DisplayClass51.<InvokeActionMethodFilterAsynchronously>b_4b() +452\n   System.Web.Mvc.Async.<>c_DisplayClass39.<BeginInvokeActionMethodWithFilters>b_38(IAsyncResult asyncResult) +15\n   System.Web.Mvc.Async.<>c_DisplayClass2c.<BeginInvokeAction>b_22() +33\n   System.Web.Mvc.Async.<>c_DisplayClass27.<BeginInvokeAction>b_24(IAsyncResult asyncResult) +240\n   System.Web.Mvc.<>c_DisplayClass19.<BeginExecuteCore>b_14(IAsyncResult asyncResult) +28\n   System.Web.Mvc.Async.<>c_DisplayClass4.<MakeVoidDelegate>b_3(IAsyncResult ar) +15\n   System.Web.Mvc.AsyncController.EndExecuteCore(IAsyncResult asyncResult) +63\n   System.Web.Mvc.Async.<>c_DisplayClass4.<MakeVoidDelegate>b_3(IAsyncResult ar) +15\n   System.Web.Mvc.<>c_DisplayClassb.<BeginProcessRequest>b_4(IAsyncResult asyncResult) +42\n   System.Web.Mvc.Async.<>c_DisplayClass4.<MakeVoidDelegate>b_3(IAsyncResult ar) +15\n   System.Web.CallHandlerExecutionStep.OnAsyncHandlerCompletion(IAsyncResult ar) +282",
    "attachments": {
        "SOLR-3963.2.patch": "https://issues.apache.org/jira/secure/attachment/12553049/SOLR-3963.2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13479456",
            "date": "2012-10-18T23:02:34+0000",
            "content": "Bill: i'm not understanding the error message you've pposted at all \u2013 it seems to be from some C# client code used to talk to solr?\n\ncan you post the actual error message logged by solr? preferably with the (java) stack trace?\n\nFWIW: https://wiki.apache.org/solr/FunctionQuery#map\n\nmap(x,min,max,target) maps any values of the function x that fall within min and max inclusive to target. min,max,target are constants. It outputs the field's value if it does not fall between min and max. \n\n...it may be possible to modify the function so min/max/target could be functions, but as designed it does not and you should get a clear error message about that. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13480257",
            "date": "2012-10-19T18:55:42+0000",
            "content": "This is the error we are seeing with this query:\n\nhttp://localhost:8983/solr/select/?q.alt=*:*&start=0&rows=10&indent=on&defType=edismax&boost=map(achievement_count,1,1000,recip(achievement_count,-0.5,10,25),1)\n\nProblem accessing /solr/facility/select/. Reason:\n\n    For input string: \"recip(achievement_count\"\n\njava.lang.NumberFormatException: For input string: \"recip(achievement_count\"\n\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1222)\n\tat java.lang.Float.parseFloat(Float.java:422)\n\tat org.apache.solr.search.FunctionQParser.parseFloat(FunctionQParser.java:134)\n\tat org.apache.solr.search.ValueSourceParser$9.parse(ValueSourceParser.java:189)\n\tat org.apache.solr.search.FunctionQParser.parseValueSource(FunctionQParser.java:363)\n\tat org.apache.solr.search.FunctionQParser.parse(FunctionQParser.java:67)\n\tat org.apache.solr.search.QParser.getQuery(QParser.java:143)\n\tat org.apache.solr.search.ExtendedDismaxQParser.parse(ExtendedDismaxQParserPlugin.java:389)\n\tat org.apache.solr.search.QParser.getQuery(QParser.java:143)\n\tat org.apache.solr.handler.component.QueryComponent.prepare(QueryComponent.java:105)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:165)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1376)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:365)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:260)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1337)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:484)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:524)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:233)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1065)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:413)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:192)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:999)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:250)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:351)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454)\n\tat org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:47)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:890)\n\tat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:944)\n\tat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:634)\n\tat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:230)\n\tat org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:66)\n\tat org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:254)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:599)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:534)\n\tat java.lang.Thread.run(Thread.java:662) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13480570",
            "date": "2012-10-20T00:54:25+0000",
            "content": "boost=map(achievement_count,1,1000,recip(achievement_count,-0.5,10,25),1)\n\njava.lang.NumberFormatException: For input string: \"recip(achievement_count\"\n\nright ... and as i mentioned, as documented the map function only allows nested functions in it's first param.  all of the other parmas only accept constant numbers \u2013 and \"recip(achievement_count,-0.5,10,25)\" is definitely not a valid number.\n\nSo there doesn't seem to be any bug here, correct?  .. i's just a question of wether map() could be improved to accept nested functions for it's other arguments. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13481191",
            "date": "2012-10-22T06:02:11+0000",
            "content": "Yep. Enhancement request.\n\nBill Bell\nSent from mobile\n\n\n "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13494925",
            "date": "2012-11-11T17:44:19+0000",
            "content": "Patch to include new RangeMapFloatFunction2 in Lucene for map(). It allows ValueSource for 4,5 parameters like the 1st parameter.\n\nTest case shown:\n\nant -Dtestcase=TestValueSources clean test\n\nhttp://localhost:8983/solr/select?q=*:*&fl=price,map(price,0,100,log(add(price,.1)),sum(price,.5))\n\n\n "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13494926",
            "date": "2012-11-11T17:45:33+0000",
            "content": "Based on Revision 1408031 "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13494927",
            "date": "2012-11-11T17:46:29+0000",
            "content": "Since you were commenting on it.\n\nI was scared about changing RangeMapFloatFunction.java and just created another one: RangeMapFloatFunction2.java "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13494994",
            "date": "2012-11-11T21:05:17+0000",
            "content": "This does not break anything, just enhances map() can we get it committed? "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13495009",
            "date": "2012-11-11T21:46:51+0000",
            "content": "Added map() tests. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13496777",
            "date": "2012-11-14T02:35:17+0000",
            "content": "Hey Bill,\n\nFirst off, some specific comments on your patch...\n\n\n\tyour tests look pretty good to me\n\tyour description and toString methods don't look quite right \u2013 you should be calling target.description() and target.toString(doc)\n\t\n\t\tboth should also be using defaultVal \u2013 that looks like an oversight in RangeMapFloatFunction that you copied over\n\t\n\t\n\tthe class level javadoc comment makes no sense ... also a bug copy/pasted from RangeMapFloatFunction it seems\n\tinstead of a new \"RangeMapFloatFunction2\" i think it would make a lot more sense to just change \"RangeMapFloatFunction\" to use your new code and modify the existing constructor to call your new constructor wrapping the constants in ConstValueSource instances\n\t\n\t\twhile we're at it we can fix that javadoc bug and the oversight of ignoring defaultVal in description & toString\n\t\n\t\n\tif we're going to support ValueSources in target & default, is there any reason not to support ValueSources for min & max as well?\n\n\n\nSecond: some broader comments on the overall idea that occured to me while reading your patch...\n\nThe changes you are proposing are definitely more general purpose then the current implementation \u2013 but the trade off is that (in theory) using constant values is faster then dealing with nested ValueSource objects because of the method call overhead. so (in theory) making this change adversely affects people who are currently using constant values.  That doesn't mean it shouldn't be done \u2013 but it's worthwhile taking a moment to think about wether there is a best of both worlds situation.\n\nUnless i'm missing something, what you want to do...\n\n\nmap(nested(...),min,max,target(...),default(...))\n\n\n...should already possible using something like...\n\n\nif(map(nested(...),min,max,1,0),target(...),default(...))\n\n\n...and that should have roughly the same performance as your your suggested change, w/o affecting the performance for people who are only using constants.\n\nSo perhaps we should actually just leave the code in the map(...) function alone, and instead improve it's docs to clarify that for people who want more complex non-constant values they can use that if(...) pattern.\n\nwhat do you think? "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13500885",
            "date": "2012-11-20T07:27:18+0000",
            "content": "I personally think we should make all parameters for map() allow for ValueSource. Even though in this case if() may work, it gets very complicated when you have several nested sum/product that you want to use. I also think it should be like this and was an oversight to begin with. if() is a clever way to solve the issue, but in my opinion all functions should support nested functions if possible. The code could easily switch to Constant using a short-circuit approach (if parenthesis) to increase performance.\n\nThoughts? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13501406",
            "date": "2012-11-20T19:40:40+0000",
            "content": "I also think it should be like this and was an oversight to begin with. \n\nit definitely wasn't an oversight \u2013 there are many functions like this where only constants are accepted for some params \u2013 as i said: the motivation was optimizing the common case, since more complicated functions could be used for the more complicated cases (the linear float function for example can trivially be implemented using sum() and prod(), but it's optimized for the common linear case of slope & intercept being constants)\n\nI personally think we should make all parameters for map() allow for ValueSource.\n\nFor ease of use, I agree ... i just wanted to sound out the possible performance concerns.\n\nThe code could easily switch to Constant using a short-circuit approach (if parenthesis) to increase performance.\n\nI'm not sure how easy that would be... the VM could/should probably do it once it notices that the method call is returning a constant, but i can't think of any (clean) way write the code to do that ... if you want to take a crack at that would be awesome, but maybe tackle that in a distinct issue?\n\nin the meantime: if you want to update your patch to deal with the other issues i noted, i'm happy to commit (unless someone else chimes in with objections about hte performance issue first) "
        },
        {
            "author": "David Smiley",
            "id": "comment-13539048",
            "date": "2012-12-23T16:21:40+0000",
            "content": "This is marked as fixed against 4.0 (even the Wiki says this).  But I'm not seeing it in the code in trunk, nor 4x branch, no reference in CHANGES.txt either.   "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13541548",
            "date": "2013-01-01T00:48:59+0000",
            "content": "hmmm... good catch david, not sure when/how that happened.\n\nas far as i know this situation hasn't changed since my last comment: happy to commit if we clean up the patch a bit.  "
        },
        {
            "author": "Bill Bell",
            "id": "comment-14612839",
            "date": "2015-07-03T05:04:31+0000",
            "content": "This is still a valid enhancement....\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14612854",
            "date": "2015-07-03T05:29:01+0000",
            "content": "This is still a valid enhancement....\n\n...but as far as i can tell, the only patch available is still the same one i reviewed in this comment (2012-Nov-13), and still has the same problems/bugs i noted at that time...\n\nhttps://issues.apache.org/jira/browse/SOLR-3963?focusedCommentId=13496777&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13496777 "
        }
    ]
}