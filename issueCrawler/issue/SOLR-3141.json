{
    "id": "SOLR-3141",
    "title": "Warn in logs at Optimize (was: Deprecate OPTIMIZE command in Solr)",
    "details": {
        "affect_versions": "3.5",
        "status": "Closed",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Background: LUCENE-3454 renames optimize() as forceMerge(). Please read that issue first.\n\nNow that optimize() is rarely necessary anymore, and renamed in Lucene APIs, what should be done with Solr's ancient optimize command?",
    "attachments": {
        "SOLR-3141.patch": "https://issues.apache.org/jira/secure/attachment/12515185/SOLR-3141.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13211310",
            "date": "2012-02-19T11:00:46+0000",
            "content": "I propose OPTIMIZE should still work in 3.x but be deprecated and yell about it in the logs. The most straight-forward is perhaps to add a new forceMerge command to replace the old one. Then from 4.0 the old optimize command would be a NOP command.\n\nReasoning behind this is that <optimize/> causes a lot of people trouble in Solr today because it's over-used due to its luring name. I don't think anyone will miss it once it's gone, and those who really need it can start using <forceMerge/> which is a better name anyhow. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211312",
            "date": "2012-02-19T11:18:25+0000",
            "content": "The DIH default behavior is to optimize! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211357",
            "date": "2012-02-19T14:02:32+0000",
            "content": "-1\n\nLong term API stability is very important, and this simply boils down to a documentation issue.\n\nIf we changed the external API every time we thought of a slightly better name, things would be quite a mess.  What might make sense for a Java library doesn't necessarily make sense for a server, and we have different back compatible goals.  Lucene renaming something should not be reason for Solr to do so. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211359",
            "date": "2012-02-19T14:06:56+0000",
            "content": "Yonik: I disagree here:\nOne problem is e.g., DIH it optimizes by default which is the stupidest thing it could do on every incremental update (see SOLR-3142)\n\nIf you disagree, I would simple (as suggested before by me) to make optimize a no-op in Solr. Very easy and hurts nobody, but prevents people from doing the wrong thing. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211363",
            "date": "2012-02-19T14:22:21+0000",
            "content": "The biggest mess is DIH - it optimizes by default which is the stupidest thing it could do\n\nAre you saying that committers don't know the cost of optimize?\nIf all the renaming craziness in lucene-land is going to creep to solr, I should start vetoing those! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211366",
            "date": "2012-02-19T14:32:36+0000",
            "content": "I will open a separate issue to remove this auto-optimize in DIH.\n\nThis seems less controversial than the whole issue.\n\nIf someone wants to optimize, they can pass &optimize=true, it will\nonly speed up most peoples applications, especially if they often\ndo incremental updates from their database. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211372",
            "date": "2012-02-19T14:45:35+0000",
            "content": "I would supply a patch, but I have no idea what config files are affected by this. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211389",
            "date": "2012-02-19T15:42:04+0000",
            "content": "To come back to the orginal issue:\nI am very glad that Jan opened the issue. I would suggest (as mentioned in other issues, too) to make optimize a no-op in solr and add a new forceMerge=segments with loud warnings.\nBy this no existing code breaks (it just no longer optimizes).\n\nIs this a good idea, Yonik? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211394",
            "date": "2012-02-19T16:09:36+0000",
            "content": "I just repeat here, what Mike already posted on the Lucene issue:\n\n\nSome quick googling uncovers depressing examples of over-optimizing:\n\n\n\thttps://jira.duraspace.org/browse/FCREPO-155\n\thttp://stackoverflow.com/questions/3912253/is-it-mandatory-to-optimize-the-lucene-index-after-write\n\thttp://issues.liferay.com/browse/LPS-2944\n\thttp://download.oracle.com/docs/cd/E19316-01/820-7054/girqf/index.html\n\thttps://issues.sonatype.org/browse/MNGECLIPSE-2359\n\thttp://blog.inflinx.com/tag/lucene\n\n\n\nThat last one has this fun comment:\n\n\n// Lucene recommends calling optimize upon completion of indexing writer.optimize();\n\n\n\nMost of the above items also affect Solr. E.g. the first one (I know people from FIZ Karlsruhe and Fedora) is really funny. Fedora GSearch calls optimze=true on every add of a single document to Solr. I even know people using Solr and complained about GSearch because of this.\n\nWe can fix those horrible user-code bugs very fast by making optimize a no-op in Solr, they all will appreciate that. I just repeat: Nobody's installation would break, it would just get faster.\n\nSome funny detail: With Lucene 3.x, search actuall gets faster with multiple segments if you do parallel ExceutorService-based search (I still dont really recommend to use ExceutorService on IndexSearcher...). On the other hand by executing the search on a non-optimized pre 2.9 index with no per segment search was really slower, as MultiTermsEnum and MultiDocsEnum was used.\n\nWith Lucene 3.x there is really no slowdown at all caused by multiple segments, as each segment is searched on its own with no interaction and just the results added to same priority queue. I agree, Solr has some problems with facetting, but people should use per-segment facetting and not optimize, this would improve their installations immense (although the actual facetting might get slower, but on the other hand FieldCaches can be reused, so it actually gets faster). The current default is global facetting and (for most installations) \"optimize on every single item added\" (see above links). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211395",
            "date": "2012-02-19T16:21:42+0000",
            "content": "With Lucene 3.x there is really no slowdown at all caused by multiple segments\n\nThere is less of a slowdown - but it's certainly still there.  Whether it matters or not will depend on the exact use-cases.\n\nSolr has some problems with facetting, but people should use per-segment facetting and not optimize\n\nNo... people should do whatever suits their usecase best.\n\nSome very well informed users of Solr still optimize.  They change their index infrequently (like once a day), and have determined that the performance increases they see by optimizing make it worth it for them.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211398",
            "date": "2012-02-19T16:29:59+0000",
            "content": "This is really a documentation issue.  I took a shot at improving it here:\nhttp://wiki.apache.org/solr/UpdateXmlMessages#A.22commit.22_and_.22optimize.22\n\nAre there other places in the docs we need to improve (by either adding details, or removing the example altogether)? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211400",
            "date": "2012-02-19T16:32:24+0000",
            "content": "We can even handle that:\n\nIf somebody passes optimize=true to the update request handle, we dont do anything (no optimize) and instead print a warning message to the log saying, that optimize was disabled in Luecen because it has no positive effect on most installations. It should also metion, that there is a new forceMerge, but people should not call it unless they exactly know what they are doing.\n\nThe above examples and a lot of more \"howtos\" on the web make the users think, they have to optimize (after every single add). After that they complain how slow solr is. Is this really what you want.\n\nThe FIZ Karslruhe eSciDoc projects develops the so called Europeana project, which is supposed to index all cultural content from Europe. They are using Fedora as repository, so the above issue was like a no-go for them to use GSearch (based on Solr). If you have so many misinformation about optimize on the net, the most reasonable approach is to simply disable the feature in quesion to prevent further harm.\n\nPeople that rely on optimize (because they want their statistics 100% correct) will get informed by the warning messages in the logs. For them its almost a one-line code change in their Solr client. If they dont do it, they will also not be disaapointed, because: \n\nThere is less of a slowdown - but it's certainly still there\n\nSo they would in most cases not even recognizing because new versions of solr will bring other improvements. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13211401",
            "date": "2012-02-19T16:35:20+0000",
            "content": "With Lucene 3.x there is really no slowdown at all caused by multiple segments, as each segment is searched on its own with no interaction and just the results added to same priority queue.\n\nDo we have benchmarks for this in some issue - would love to see some numbers. \n\nSo, in the past, sorting certainly added a cost to multiple segments as you moved from segment to segment - did that go away in some issue? That must be completely different code these days if 100 segments or more performs like one. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211409",
            "date": "2012-02-19T17:01:48+0000",
            "content": "100 segments?\n\nIn comparison the numbers for Lucene 2.9 lowered extensively, pre-2.9 optimizing was often a must, I agree! The problem was Multi* with itsself having priority-queue like structures slowing down term enumeration and postings rerieval. With Lucene 3.x the difference between an optimized and a \"standard 8 segment index\" was always below measurement uncertainity (see lots of benchmarks from Mike on Lucene 4). For standard relevance-ranked or numerics sorting there was never a real slowdown.\n\nI am always talking about relevance-ranked results and numerics. With StringIndex sorting there is certainly an overhead, but as we support sortMissingLast now also for numerics, almost nobody has to use it. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13211413",
            "date": "2012-02-19T17:10:07+0000",
            "content": "The Python Django-solr search library ALWAYS calls optimize after adding documents, see indexing.py:\nhttp://code.google.com/p/django-solr-search/source/search?q=optimize+commit&origq=optimize+commit&btnG=Search+Trunk\nI had a customer using this library to batch-load a bunch of documents, and it took AGES and almost killed the JVM. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13211415",
            "date": "2012-02-19T17:14:34+0000",
            "content": "With StringIndex sorting there is certainly an overhead, but as we support sortMissingLast now also for numerics, almost nobody has to use it.\n\nAh, okay - that makes sense. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211417",
            "date": "2012-02-19T17:15:27+0000",
            "content": "I am always talking about relevance-ranked results and numerics.\n\nAnd those are often not the bottleneck for Solr users.\n\nThere are a few issues here:\n\n\tthe queries we often see in the field can be vastly more complex than the standard ones that lucene tests with\n\tpeople are often most concerned with their slowest queries, not their average query speed (as long as they can meet throughput needs)\n\tfull-text search is often not the bottleneck at all\n\n\n\nAnother issue that I've seen a couple of customers hit: big memory increases in the field cache as the number of segments grows.  The string index values are not shared per-segment, and hence in the worst case, 2 times the number of segments equals almost 2 times the memory for the per-segment FieldCache entries.\n\nThere are tradeoffs to a lot of these things, and we should be careful to not fall into a \"one size fits all\" mentality. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211419",
            "date": "2012-02-19T17:18:33+0000",
            "content": "Another issue that I've seen a couple of customers hit: big memory increases in the field cache as the number of segments grows. The string index values are not shared per-segment, and hence in the worst case, 2 times the number of segments equals almost 2 times the memory for the per-segment FieldCache entries.\n\nThis goes in the same direction as my answer to Mark: With sortMissingLast support on numerics, numerics as Strings are no longer needed. So the solution here is to use real numerics. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13211426",
            "date": "2012-02-19T17:24:23+0000",
            "content": "Lots of use of string fields that are not numerics though - the product I worked on in the past only sorted by non numeric string fields, many times lots of them at once.\n\nI'm coming around on this issue myself though. For the benefits, optimize is not a good name. It calls out to be called. The abuse is clearly there, and we should probably try more to address it than just doc.\n\nMy opinion is coming around to leave it for 3.x, change it to an expert option for 4 that works the same, is understated, and is called forceMerge or whatever.\n\nBig -1 to making it a no op. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211439",
            "date": "2012-02-19T17:43:22+0000",
            "content": "And if we did change, naive users would be:\n \"oh, optimize doesn't work any more...\" (looks up what it's been changed to) \"ok, changed to forceMerge.\"\n\nAfter forceMerge is out there for a while, it would have the same problem as optimize.  Someone tries it, their queries run faster, and it gets passed along as something to try to speed things up (and it is in the right scenario).  The correct path here is to document it correctly, and get rid of any bad examples in our documentation.\n\nSomeone can add a big fat message at the top of CHANGES explaining the cost of optimize and the fact that it's often less necessary than it was in the past if they want. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13211467",
            "date": "2012-02-19T18:34:24+0000",
            "content": "-1 Serious over/under-engineering.   "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211468",
            "date": "2012-02-19T18:37:23+0000",
            "content": "Serious over/under-engineering\n\n?? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211480",
            "date": "2012-02-19T18:56:54+0000",
            "content": "\nI'm coming around on this issue myself though. For the benefits, optimize is not a good name. It calls out to be called. The abuse is clearly there, and we should probably try more to address it than just doc.\n\nMy opinion is coming around to leave it for 3.x, change it to an expert option for 4 that works the same, is understated, and is called forceMerge or whatever.\n\nI think we can probably make improvements here, here are my ideas:\n\n\tany 'auto-optimization' in our own code is really bad. We should fix any auto/default\noptimizes so that if users want to optimize, they must specify it.\n\tany 'auto-optimization' in third-party integrations is equally bad, but we can fix this\nin a number of ways. Sure, making optimize a no-op is one solution, another is to\nactually fix the docs, ping those projects with an email or offer patches, etc.\n\twe can improve the docs to really emphasize to users how expensive manual\noptimize and expungeDeletes calls are. Personally I feel the wiki text Yonik linked to\nis way too nice about this.\n\tthe name 'optimize' will always be a trap I think. Can't we start by adding 'forceMerge'\nand issue a deprecation warning if someone uses optimize (but still doing it anyway). Then \nthe next step would be (in some future release), to return a hard error if someone uses\n'optimize', since eventually it gets removed.\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211488",
            "date": "2012-02-19T19:10:08+0000",
            "content": "Robert: I would also agree with this. If others dont want to make optimize() a noop, I would agree to make a serious log.warn() or even better log.fatal() out of it saying that it's a bad idea in most cases. And that it's deprecated (deprecation by log printing, funny). People who call optimize or forceMerge after ech single document will have a log filled with warning messages, this should make them look into it.\nIn my opinion expungeDeletes and forceMerge should always print a warning-like message to the log, saying that it's doing something heavy and resource-wasteful. Optimize aditionally also say that its deprecated. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211496",
            "date": "2012-02-19T19:27:52+0000",
            "content": "Personally I feel the wiki text Yonik linked to is way too nice about this.\n\nHere's the current wiki text (I just modified it to suggest what \"infrequently\" might mean... i.e. nightly, not on the minute or something), added the term \"very expensive\" and bolded the \"entire\" to draw attention to it.\n\n\nAn optimize is like a hard commit except that it forces all of the index segments to be merged into a single segment first. Depending on the use cases, this operation should be performed infrequently (like nightly), if at all, since it is very expensive and involves reading and re-writing the entire index. Segments are normally merged over time anyway (as determined by the merge policy), and optimize just forces these merges to occur immediately.\n\nI would agree to make a serious log.warn()\n\nI'd be fine with that part.  I'll give it a shot. "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-13211498",
            "date": "2012-02-19T19:29:30+0000",
            "content": "A warning message seems over the top. There are perfectly valid reasons to do a full merge. It is just fine as the last step if you rebuild a medium to small index every day, like we did at Netflix.\n\nI've worked on two other engines with automatic index merging, Ultraseek and MarkLogic. One called it \"full merge\", the other \"force merges\" (I think). Neither one logged a warning. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211506",
            "date": "2012-02-19T19:38:20+0000",
            "content": "\nA warning message seems over the top.\n\nI don't think a warning message for a deprecated command is over the top,\nhow else will people know to switch to 'forceMerge' (in the case they really need it).\n\nWe already log warning messages if people use e.g. deprecated analyzers or other things,\nI'm just suggesting we deprecate the trappy name like anything else would be deprecated.\nIt seems worse to me to silently deprecate something.\n\nBy the way: I think it would also be nice if the forceMerge required n as a parameter, \nrather than defaulting to 1.\n\n\nHere's the current wiki text (I just modified it to suggest what \"infrequently\" might mean... i.e. nightly, not on the minute or something), added the term \"very expensive\" and bolded the \"entire\" to draw attention to it.\n\n+1, I think those are good improvements. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211511",
            "date": "2012-02-19T19:48:15+0000",
            "content": "Here's a warn patch.\n\nThe text I used is this:\nlog.warn(\"Starting optimize... reading and rewriting entire index.\");\n\nIt tries to just state what is going on, and tries not to indicate it's an error or that the user should not be doing it. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211519",
            "date": "2012-02-19T20:04:32+0000",
            "content": "New version that also logs even when a number of segments is specified, and for expunge deletes also. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211543",
            "date": "2012-02-19T20:38:49+0000",
            "content": "I just checked the Solr tutorial and saw this:\n\"There is also an optimize command that does the same thing as commit, in addition to merging all index segments into a single segment, making it faster to search and causing any deleted documents to be removed.\"\n\nIt would be no great loss to just remove that sentence since it's just an introduction and not a reference. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211575",
            "date": "2012-02-19T22:26:38+0000",
            "content": "I am fine with the log messages, I just would also like to deprecate the term \"optimize\" and change to \"forceMerge\". Thats all this issue is about. The above log messages would then apply to forceMerge. Of course old-style optimize would get a different message thats this is deprecated and the user is most-likely not want to call this. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211581",
            "date": "2012-02-19T22:40:03+0000",
            "content": "I'm against deprecating optimize.  We can't change the name of every operation that people might use incorrectly (and this is one of the easiest to understand), and we shouldn't here.  We shouldn't penalize the majority of users who use APIs correctly due to some minority calling it when they have no idea what it does.  Being a server with a whole ecosystem of other systems that talk to us (think like a database), we have a much higher bar for back compat changes in our interfaces. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211597",
            "date": "2012-02-19T23:29:52+0000",
            "content": "We shouldn't penalize the majority of users who use APIs correctly due to some minority calling it when they have no idea what it does\nMinority?:\nhttps://github.com/mbaechler/OBM/blob/9e1c79e01fde7f78e87b125563c7e6730068e24d/ui/obminclude/of/of_indexingService.inc\nhttp://grokbase.com/t/lucene.apache.org/solr-user/2011/12/how-to-disable-auto-commit-and-auto-optimize-operation-after-addition-of-few-documents-through-dataimport-handler/16q7rwo6crvlzr5aoo3ic2bgd2ni\nhttp://support.sms-fed.com/tracker/browse/TDI-134\nhttp://web.archiveorange.com/archive/v/AAfXf4khqdVNtnjqzodS\nhttp://vufind.org/wiki/performance#index_optimization\nhttp://netbeans.org/bugzilla/show_bug.cgi?id=205899\nhttps://github.com/tonytw1/wellynews/blob/759960b7e7df6b77c9fa3791efb7da67dd27783e/src/java/nz/co/searchwellington/repositories/solr/SolrQueryService.java\nhttp://stackoverflow.com/questions/2787591/solr-autocommit-and-autooptimize\nhttp://opensource.timetric.com/sunburnt/indexmanagement.html\nhttp://drupal.org/node/292662\nhttp://blog.aisleten.com/2008/01/26/optimizing-solr-and-rails-index-in-the-background/\nhttp://www.searchworkings.org/forum/-/message_boards/view_message/412894#_19_message_412894\nhttp://code.google.com/p/kiwi/source/browse/lmf-search/src/main/java/at/newmedialab/lmf/search/services/indexing/SolrIndexingServiceImpl.java?r=fbbeec96b5ad3d31364755a88218860405393cac "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211605",
            "date": "2012-02-19T23:47:51+0000",
            "content": "I think the majority of users don't know what this command really does... we should rename it.\n\noptimize just begs for people to use it. If this is really controversial, lets call \na committer vote on dev@ and see what everyone thinks. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211607",
            "date": "2012-02-19T23:51:29+0000",
            "content": "Creative use of google, but it does't always add up.  Just looking randomly at a couple:\n\nThe vufind reference oddly states that you should optimize after updating, but it also states:\nNote: Optimizing the index can take a lot of server resources, so you should schedule your index updates and optimizations for non-peak times when possible.\nSo you can see they have that very infrequent update model in mind, and they seem well aware of the cost of an optimize.\n\nThe stackoverflow is a thing asking how to automate commit and optimize and how often he should optimize.\n\nAnd the archiveorange link mentions a guy optimizing, but it's certainly not clear at all that he shouldn't be....  we don't know his requirements.\n\nSolr is at 400 downloads a day via the website (twice that many visit the download page... but the actual link is hard to see!).  Yes, I'll stand by \"minority\". "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211608",
            "date": "2012-02-19T23:56:34+0000",
            "content": "think the majority of users don't know what this command really does... we should rename it.\n\nI doubt it.  An dhow did they find the command in the first place?\nThe answer is documentation - wherever they learn about the command, let them know what it does.\nLet's not be a nanny state. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211609",
            "date": "2012-02-20T00:02:29+0000",
            "content": "\ntwice that many visit the download page... but the actual link is hard to see\n\nWe need a huge download button.\n\n\nLet's not be a nanny state.\n\nI don't think of it as a nanny state, its us fixing a mistake.\nThe mistake was this method has a poor name. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211611",
            "date": "2012-02-20T00:09:37+0000",
            "content": "I doubt it. An dhow did they find the command in the first place?\n\nBy copying one of those \"shiny\" code examples I posted!\n\nJust to come back to programmers that should have read the documentation, but in fact they did not. The best example from the above list is http://drupal.org/node/292662. Drupal is one of the most often used CMS systems (I just mention that your company also uses it for their home page) and its installed on thousands of servers. And this tool also contains a full text search engine (maybe your company is not using that one), but this one called commit and optimize after every update (until they fixed it). Isn't that funny. In fact Drupal users are a huuuuuuuuuuuuuuuuuuuuuuuuuuuuge majority that dont know what their system is doing under the hood and largely depend on the fact that PHP programmers like the Drupal ones dont call optimize just because it's called optimize. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211616",
            "date": "2012-02-20T00:20:20+0000",
            "content": "A slight improvement in name does not come anywhere near compensating for the pain of having countless external systems and users having to change their code for no gain in functionality. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13211618",
            "date": "2012-02-20T00:29:22+0000",
            "content": "A slight improvement in name does not come anywhere near compensating for the pain of having countless external systems and users having to change their code for no gain in functionality.\n\nThe compensation is that they are forced to again look at that code an then they think about removing the call alltogether. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13211626",
            "date": "2012-02-20T01:27:27+0000",
            "content": "\nA slight improvement in name does not come anywhere near compensating for the pain of having countless external systems and users having to change their code for no gain in functionality.\n\nBut I don't think things are fixed in stone: this is an open source project and it would be bad if things\nnever changed. We aren't putting a gun to their head forcing them to upgrade either, so I don't understand\nthe pain compensation... but it won't hold a candle to the pain all these unnecessary optimizes must be \ncausing users hard disk drives. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13211825",
            "date": "2012-02-20T13:01:43+0000",
            "content": "I think 4.0 is a good train in which to do this rename, when people will anyway take a thorough new look at all the changes, and most will hopefully discover that they do not need forceMerge even if they used optimize before. And I agree, in 4.x, \"optimize\" should not be a silent NOOP, but instead yell loudly in the logs.\n\nPerhaps an official migration guide on the CMS would be helpful too when 4.0 hits the road. Such a guide would be more in-depth than the upgrading notes in CHANGES. We could have a paragraph about optimize/forceMerge, and another paragraph about softCommit/commitWithin as preferred to explicit commit, which is also a huge mistake many people do, they do over-committing! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211849",
            "date": "2012-02-20T14:01:57+0000",
            "content": "The compensation is that they are forced to again look at that code an then they think about removing the call alltogether.\n\nThe proposal simply breaks existing systems (on purpose) on upgrade with no offsetting gain in functionality, just because we believe some people have made the wrong tradeoff in their app.  This is not the right solution.\n\nWe see people making what we believe to be the wrong tradeoffs all the time in Solr.  One example is optimizing for query performance by pumping up cache sizes to insane levels, pumping up the heap to compensate, and then being plagued with long GC times.  The answer is not to second guess everyone and break existing configurations.  People will continue to make mistakes like this, and even if optimize was changed to forceMerge, you can be assured that some people will still make the wrong trade-off in the future using the new name.\n\nI've thought about this for a while now... please consider this my formal veto to this change. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211852",
            "date": "2012-02-20T14:05:57+0000",
            "content": "and another paragraph about softCommit/commitWithin as preferred to explicit commit, which is also a huge mistake many people do, they do over-committing!\n\nThis is a much bigger real problem (because people had no soft commit and hence hard commit was the only option).  We should probably open up a new issue for this one. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13211898",
            "date": "2012-02-20T14:56:01+0000",
            "content": "@Yonik, How would you feel about this approach instead:\n\n\n\tAdd the new forceMerge feature, but instead of true/false, it takes N as number of segments, i.e. &forceMerge=2. This adds value to Solr's API\n\tKeep the old &optimize=true API (equivalent to forceMerge=1), but let users control in solrconfig.xml how an old optimize is interpreted. The option could look like (don't mind the naming for now):\n\n<mainIndex>\n <oldOptimizeIsIntrepretedAs>noop|noopWithLogWarning|commit|softCommit|forceMerge=N</oldOptimizeIsIntrepretedAs>\n</mainIndex>\n\n\n\n\n\nDefault could be \"noopWithLogWarning\", and nothing would happen on an attempted optimize, except logging a warning in logs pointing people to some documentation. This will give people three choices: A) Stop using optimize if they don't need it. Problem solved. B) If they wind up really needing it, start using forceMerge=N instead. Problem solved or C) Change the config param to whatever suits their situation the best, e.g. \"forceMerge=1\" would mimic old behaviour but \"commit\" would cause a commit to happen on optimize, \"noop\" would do noop, but get rid of log warnings etc. This would be for people who cannot or won't change their own code. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13211902",
            "date": "2012-02-20T14:59:50+0000",
            "content": "This is a much bigger real problem (because people had no soft commit and hence hard commit was the only option). We should probably open up a new issue for this one.\nSOLR-3146 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211909",
            "date": "2012-02-20T15:02:36+0000",
            "content": "Add the new forceMerge feature, but instead of true/false, it takes N as number of segments, i.e. &forceMerge=2. This adds value to Solr's API\n\nBut we already have this functionality as a maxSegments parameter to optimize. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13211919",
            "date": "2012-02-20T15:19:55+0000",
            "content": "I think when it comes to API breaks, trying to say we can't fix this one because we can't fix every old little thing doesn't jive. The name is clearly not a good one, and the call will not be the right move for most people that upgrade to 4. Having to rethink that will be doing 99% of users a favor. Changing the name will be doing all future users a favor. \n\nI think 4 should be about getting things right without clinging to old baggage. We are not talking about the update or request apis here. We are talking about a very expensive, very poorly named, very little little returns API call that is certainly over used (and much of the over use is not going to end up on google).\n\nMaking those that upgrade rethink optimize seems like just what the Dr ordered - we can add it to the release announce, the release notes, etc. Even though I know exactly what this does, even though i know the price/benefits - I still want to call this thing at least once a week. It's a terrible name at this point. Why are we stuck with terrible? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13211922",
            "date": "2012-02-20T15:25:46+0000",
            "content": "It's a terrible name at this point. Why are we stuck with terrible?\n\nI don't agree it's a terrible name I guess. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13217779",
            "date": "2012-02-28T01:07:06+0000",
            "content": "I don't have the energy to really get in depth with all of the discussion that's taken place so far, i'll try to keep my comments brief:\n\n0) i'm a fan of the patch currently attached.\n\n1) i largely agree with most of yonik's points \u2013 this is a documentation problem first and foremost.  Saying that all people who optimize are wrong is ridiculous, and breaking something that has use and value for a set of people just because some other set of people are using it foolishly seems really absurd.\n\n2) changing the \"optimize\" command to be a no-op with a warning logged, or a failure, where the documented \"fix\" to regain old behavior for people who genuinely need it is to search & replace the string \"optimize\" with some new string \"forceMerge\" seems uterly absurd to me.  this is not the first time we've had a param name that people later regretted giving the name that we did \u2013 are we going to change all of them for 4.0?  Unlike a method renamed in java code where it's easy to see how the change affects you because of compilation failures, this kind of HTTP param change is a serious pain in the ass for people with client apps written using multiple languages/libraries ... naming consistency for existing users seems far more important then having perfect names.\n\n3) Even if the goal is to force people to evaluate whether they really want to merge down to one segment, we have to consider how hard we make things for people when the answer is \"yes\".  If someone is using a client library/app to talk to Solr it may not be easy/simple/possible for them to replace \"optimize\" with \"forceMerge\" or something like it w/o mucking in the internals of that library \u2013 there's no reason to piss off users like that.\n\n4) any discussion about renaming/removing \"optimize\" in the Solr HTTP APIs should really consider how that will impact a few other user visible things...\n\n\n\t<listener event=\"postOptimize\" /> hooks in solrconfig and the corisponding SolrEventListener.postOpimize method\n\tSolrDeletionPolicy has options related to how many optimized indexes to keep\n\tspellchecker has options relating to building on optimize (although if i remember correctly there is a bug about this being broken so it can probably die no problem)\n\n\n\n5) Assuming that too many people optimize when the shouldn't, either out of ignorance or because their tools do it out of ignorance and we want to help minimize that moving forward; and given my opinion that renaming \"optimize\" will only hurt people w/o actually helping the root problem \u2013 here's my straw man proposal to try and improve the situation (similar to what jan suggested but taking into account that we already support a \"maxSegments\" option when doing optimize commands) ...\n\n\n\tcommit the attached patch as is (it's just plain a good idea, regardless of anything else we might do)\n\tchange CommitUpdateCommand.maxOptimizeSegments so it defaults to \"-1\" and document that when the value is less then 0 it means the UpdateHandler configuration determines the value.\n\tadd a new <defaultOptimizeSegments/> config option to <updateHandler/> - make the UpdateHandler use that value anytime CommitUpdateCommand.maxOptimizeSegments is less then 0, and for backcompat have it default to \"1\" if not specified.\n\tupdate the example configs to include <defaultOptimizeSegments>9999999</defaultOptimizeSegments> with a comment warning against hte evils of over-optimization\n\tchange the code in Solr which deals with <optimize ... /> formated instructions so that any SolrParams in the request with names the same as xml attributes override the attributes \u2013 ie: POST /update?maxSegments=4 with data: <optimize maxSegments=\"9\" /> should result in a CommitUpdateCommand with maxOptimizeSegments=4\n\n\n\nThe end result being:\n\n\tnew users who start with new configs have an UpdateHandler that is going effectively ignore \"optimize\" commands that don't specify a \"maxSegments\"\n\tnothing breaks for existing users\n\texisting users who only want to allow optimize commands when \"maxSegments\" is specified can cut/paste that oneline <defaultOptimizeSegments/> config\n\tnew and existing users who want Solr to ignore all optimize commands, even when they do have a \"maxSegments\", can configure an invariant maxSegments=9999999 param on the affected request handlers\n\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234663",
            "date": "2012-03-21T18:08:47+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13250984",
            "date": "2012-04-10T19:25:19+0000",
            "content": "Does SolrJ then need to have a forceMerge rather than optimize? Which isn't deprecated in 3x BTW. "
        },
        {
            "author": "Dotan Cohen",
            "id": "comment-13481849",
            "date": "2012-10-22T22:03:03+0000",
            "content": "The problem with optimize is not the name. The problem is that the Solr admin panel suggests that we optimize often. In a Solr admin panel click the name of your index (\"collection1\" for instance) and what do you see? A big \"Optimize Now\" button alongside a graphical indicator that the index is not optimized. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13540927",
            "date": "2012-12-29T15:47:27+0000",
            "content": "No assignee or action in some time - pushing to 4.2 - if it's a mistake, please bring it back into 4.1. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13567658",
            "date": "2013-01-31T14:14:22+0000",
            "content": "So, any thoughts on Hoss Man's proposals above? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13606961",
            "date": "2013-03-19T22:38:57+0000",
            "content": "Some time has passed, what to do with this? Was the log warning patch committed? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13679641",
            "date": "2013-06-10T17:12:59+0000",
            "content": "Before I read HossMan's proposals thoroughly, I had these thoughts:\n\n\u2014\nI would support removing the optimize button from the GUI, or at least removing it from the Overview page.  Keeping it on the CoreAdmin page would not be a bad thing, optionally with at least one confirmation dialog that reminds the user that optimization is not normally required.\n\nDeprecating \"optimize\" from the GUI and the API in favor of forceMerge would not make me upset either, as long as it continued to work through all 4.x versions.  Based on what happened with waitFlush and the PHP Solr API packages after the 4.0 release, this is a dangerous path, but if we kept optimize around until 6.0, perhaps it might be OK.\n\u2014\n\nAfter reading the proposals, I think there might be a small amount of merit in my ideas, but his ideas are safer. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717180",
            "date": "2013-07-23T18:47:23+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971079",
            "date": "2014-04-16T12:57:06+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15083019",
            "date": "2016-01-05T13:05:08+0000",
            "content": "Attached slightly modified patch. Will commit to trunk only tomorrow if no objections.\n\nUnless someone feel inclined to implement more code changes to this issue, I'll rename and close this JIRA after commit of the log patch. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-15086474",
            "date": "2016-01-06T23:17:31+0000",
            "content": "optimize() is rarely necessary anymore\n\nWell... I used to say that same thing, because I was under the impression that the common merge policies would automatically optimize segments over time, but over the past year there have been several email threads with users who had heavy update/delete usage patterns where the index size appeared to remain bloated due to deleted/updated documents.\n\nSo... we need a revised story... and doc.\n\nWhat exactly should we be telling people who update/delete lots of docs frequently and still find that the index is bloated?\n\nIs there maybe some underlying bug or tuning of the delete/merge policy needed?\n\nOr... maybe people still need an explicit \"force merge\" command to effectively say \"I just finished a large batch of document updates/deletes but I'm done now, so merge away.\"\n\nPersonally, I would like to see a \"start batch\" mode, which signals that the user intends to make a lot of changes and Solr/Lucene should make no attempt to optimize or clean things up or update caches until the user signals \"end of batch\", at which time any appropriate merging or optimization or cache refreshing can occur. Not everybody will want to do this, but it still seems to be a semi-common use of Solr. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15139020",
            "date": "2016-02-09T14:53:53+0000",
            "content": "Warn in log patch committed to master and branch_5x\nIssue renamed to reflect this.\n\nPlease open a new issue if you want to implement some of the more controversial ideas from this JIRA. "
        }
    ]
}