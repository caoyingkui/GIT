{
    "id": "LUCENE-2193",
    "title": "Get rid of backwards tags",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Task",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "This is a followup on: http://www.lucidimagination.com/search/document/bb6c23b6e87c0b63/back_compat_folders_in_tags_when_i_svn_update#3000a2232c678031\n\nCurrently we use tags for specifying the revision number in the backwards branch that matches the current development branch revision (in common-build.xml). The idea is to just specify the corresponding revision no of the backwards branch in common-build.xml and the backwards-test target automatically handles up/down/co:\n\n\n\tWe just give the rev number in common-build in common-build.xml as a property backwards-rev=\"XXXX\". This property is used also in building the command line which is also a property backwards-svn-args=\"-r $backwards-rev\". By that you can use \"ant -Dbackwards-svn-args=''\" to force test-backwards to checkout/update to head of branch (recommened for developers).\n\n\n\n\n\twe should rename target to \"test-backwards\" and keep a \"test-tag\" with dependency to that for compatibility\n\n\n\n\n\tThe checkout on backwards creates a directory \"backwards/${backwards-branch}\" and uses \"svn co ${backwards-svn-args} 'http://svn.../${backwards-branch}' 'backwards/${backwards-branch}'\". The cool thing, the dir is checked out if non existent, but if the checkout already exists, svn co implicitely does an svn up to the given revision (it will also downgrade and merge if newer). So the test-backwards target always updates the checkout to the correct revision. I had not tried with local changes, but this should simply merge as an svn up.\n\n\n\nThe workflow for committing fixes to bw would be:\n\n\n\tFirst use \"svn up\" to upgrade the backwards working copy to HEAD.\n\tCommit the changes\n\tCopy and paste the message \"Committed revision XXXX\" to common-build.xml\n\tCommit the changes in trunk",
    "attachments": {
        "LUCENE-2193.patch": "https://issues.apache.org/jira/secure/attachment/12430053/LUCENE-2193.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-01-06T11:54:28+0000",
            "content": "This sounds great!  Basically, rather than explicitly naming the tag, we can use svn's revision instead.  An \"anonymous\" tag.\n\nSo it should also be fully safe, ie, there's no time when you could do a checkout and find the back compat tests are failing. ",
            "author": "Michael McCandless",
            "id": "comment-12797081"
        },
        {
            "date": "2010-01-12T22:29:03+0000",
            "content": "Here a patch that implements the above. It contains a lot variable renamings and some backwards-target (deprecated). Maybe we remove them before commit.\n\nTo test:\n\n\tApply patch\n\tremove tags/ folder (unused now). If you have modifications in it, create a patch\n\trun \"ant test-backwards\"\n\n\n\nTo modify backwards branch:\n\n\trun \"svn up\" in backwards folder\n\tmodify backwards branch\n\tto now test this modified trunk revision in checkout folder, you can pass \"ant test-backwards -Dbackwards.rev=HEAD\", but if you have done \"svn up\" as first step this is not needed\n\tcommit changes in backwards branch with \"svn commit\" (be sure to change to backwards/$branchname$/src, as src is the root folder of the checkout)\n\tcopy the revision number from commit message and insert into common-build.xml\n\t(test again and) commit trunk\n\n\n\nPlease test this and tell me if you like it! ",
            "author": "Uwe Schindler",
            "id": "comment-12799433"
        },
        {
            "date": "2010-01-12T23:14:38+0000",
            "content": "Two opinions:\n\n\n\tthe top-level \"/backwards/\" folder could be removed and the branch directly checked out into the top-level dir, as the branch name cleary says that it is a backwards-test branch. The svn:ignore in top-level folder then would simple be \"lucene*_back_compat_tests\" and the ${backwards} references in the patch removed.\n\tit is a little bit unhandy to use that the backwards-branch folder only consists of src/. To commit you have to go into src. Also applying/creating patches is harder with e.g. TortoiseSVN, because the patches are always relative to the top-level, which is \"src\" in this case. I suggest to checkout in two steps: First a non-recursive empty top-level folder and then the src folder inserted with an update command using the same strategy like \"sparse checkouts\" work (see svn book).\n\n\n\nI will think about it this night and maybe provide modified patches, ",
            "author": "Uwe Schindler",
            "id": "comment-12799459"
        },
        {
            "date": "2010-01-13T23:05:04+0000",
            "content": "Optimized version of the patch:\n\n\tThe backwards checkout is now sparse with the correct branch root folder, so patches in backwards branch look correct\n\tadded failonerror=\"true\", so build stops when svn update fails. It does not stop on svn.exe not found, so this is secure!\n\n\n\nI'll commit soon and merge flex. ",
            "author": "Uwe Schindler",
            "id": "comment-12799995"
        },
        {
            "date": "2010-01-13T23:26:15+0000",
            "content": "One small optimization to have only one update if the checkout is available. ",
            "author": "Uwe Schindler",
            "id": "comment-12800010"
        },
        {
            "date": "2010-01-13T23:41:30+0000",
            "content": "Committed revision: 899001 ",
            "author": "Uwe Schindler",
            "id": "comment-12800016"
        }
    ]
}