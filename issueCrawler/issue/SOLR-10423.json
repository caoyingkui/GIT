{
    "id": "SOLR-10423",
    "title": "ShingleFilter causes overly restrictive queries to be produced",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "fix_versions": [
            "6.5.1",
            "6.6",
            "7.0"
        ],
        "affect_versions": "6.5",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "When sow=false and ShingleFilter is included in the query analyzer, QueryBuilder produces queries that inappropriately require sequential terms.  E.g. the query \"A B C\" produces (+A_B +B_C) A_B_C when the query analyzer includes <filter class=\"solr.ShingleFilterFactory\" maxShingleSize=\"3\" outputUnigrams=\"false\" tokenSeparator=\"_\"/>.\n\nAman Deep Singh reported this problem on the solr-user list. From http://mail-archives.apache.org/mod_mbox/lucene-solr-user/201703.mbox/%3cCANEGTX9BwBPwQc-cXieAc7QSAS7x2TgZovOMy5ZTiAgco1p11Q@mail.gmail.com%3e:\n\n\nI was trying to use the shingle filter but it was not creating the query as\ndesirable.\n\nmy schema is\n\n\n<fieldType name=\"cust_shingle\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n  <analyzer>\n    <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n    <filter class=\"solr.ShingleFilterFactory\" outputUnigrams=\"false\" maxShingleSize=\"4\"/>\n    <filter class=\"solr.LowerCaseFilterFactory\"/>\n  </analyzer>\n</fieldType>\n<field name=\"nameShingle\" type=\"cust_shingle\" indexed=\"true\" stored=\"true\"/>\n\n\n\nmy solr query is\n\n\nhttp://localhost:8983/solr/productCollection/select?\n defType=edismax\n&debugQuery=true\n&q=one%20plus%20one%20four\n&qf=nameShingle\n&sow=false\n&wt=xml\n\n\n\nand it was creating the parsed query as\n\n\n<str name=\"parsedquery\">\n(+(DisjunctionMaxQuery(((+nameShingle:one plus +nameShingle:plus one\n+nameShingle:one four))) DisjunctionMaxQuery(((+nameShingle:one plus\n+nameShingle:plus one four))) DisjunctionMaxQuery(((+nameShingle:one plus one +nameShingle:one four))) DisjunctionMaxQuery((nameShingle:one plus one four)))~1)/no_coord\n</str>\n<str name=\"parsedquery_toString\">\n*+((((+nameShingle:one plus +nameShingle:plus one +nameShingle:one four))\n((+nameShingle:one plus +nameShingle:plus one four)) ((+nameShingle:one\nplus one +nameShingle:one four)) (nameShingle:one plus one four))~1)*\n</str>\n\n\n\nSo ideally token creations is perfect but in the query it is using boolean + operator which is causing the problem as if i have a document with name as \"one plus one\" ,according to the shingles it has to matched as its token will be  (\"one plus\",\"one plus one\",\"plus one\") .\n\nI have tried using the q.op and played around the mm also but nothing is\ngiving me the correct response.\n\nAny idea how i can fetch that document even if the document is missing any\ntoken.\n\nMy expected response will be getting the document \"one plus one\" even the user query has any additional term like \"one plus one two\" and so on.",
    "attachments": {
        "SOLR-10423.patch": "https://issues.apache.org/jira/secure/attachment/12862114/SOLR-10423.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-04T21:44:58+0000",
            "content": "I think the fix for this problem is to expose QueryBuilder.setEnableGraphQueries() on Solr field types, in the same way that the autoGeneratePhraseQueries option is now.\n\nSince 6.5 is the first version of Solr that included the sow=false option, it previously wasn't possible to construct queries using ShingleFilter, because Solr's query parser always split on whitespace before performing analysis, one term at a time.\n\nThe following Lucene unit test (added to the queryparser module's TestQueryParser.java, after adding a test dependency on the analysis-common module), which calls QueryBuilder.setEnableGraphQueries(false);, succeeds for me.  When I change the test to call assertQueryEquals() (which doesn't disable graph queries, which are enabled by default), the test fails with this assertion error: Query /A B C/ yielded /(+A_B +B_C) A_B_C/, expecting  /Synonym(A_B A_B_C) B_C/.\n\n\n  public void testShinglesSplitOnWhitespace() throws Exception {\n    Analyzer a = new Analyzer() {\n      @Override protected TokenStreamComponents createComponents(String s) {\n        Tokenizer tokenizer = new MockTokenizer(MockTokenizer.WHITESPACE, false);\n        ShingleFilter tokenStream = new ShingleFilter(tokenizer, 2, 3);\n        tokenStream.setTokenSeparator(\"_\");\n        tokenStream.setOutputUnigrams(false);\n        return new TokenStreamComponents(tokenizer, tokenStream);\n      }\n    };\n    boolean oldSplitOnWhitespace = splitOnWhitespace;\n    splitOnWhitespace = false;\n    assertQueryEqualsNoGraph(\"A B C\", a, \"Synonym(A_B A_B_C) B_C\");\n    splitOnWhitespace = oldSplitOnWhitespace;\n  }\n\n  public void assertQueryEqualsNoGraph(String query, Analyzer a, String result) throws Exception {\n    QueryParser parser = getParser(a);\n    parser.setEnableGraphQueries(false);\n    Query q = parser.parse(query);\n    String s = q.toString(\"field\");\n    if (!s.equals(result)) {\n      fail(\"Query /\" + query + \"/ yielded /\" + s + \"/, expecting /\" + result + \"/\");\n    }\n  }\n\n ",
            "author": "Steve Rowe",
            "id": "comment-15955912"
        },
        {
            "date": "2017-04-05T17:24:24+0000",
            "content": "Patch with suggested fix and tests: specifying <fieldtype ... enableGraphQueries=\"false\">... allows functional queries over ShingleFilter'd fields.\n\nRunning tests and precommit now.  I'd like to include this in Solr 6.5.1. ",
            "author": "Steve Rowe",
            "id": "comment-15957280"
        },
        {
            "date": "2017-04-05T18:49:04+0000",
            "content": "All Solr tests and precommit pass. ",
            "author": "Steve Rowe",
            "id": "comment-15957426"
        },
        {
            "date": "2017-04-05T20:54:31+0000",
            "content": "Commit 213e50a982e7a6f4ecb0d47178e7509393b74a7a in lucene-solr's branch refs/heads/branch_6_5 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=213e50a ]\n\nSOLR-10423: Disable graph query production via schema configuration <fieldtype ... enableGraphQueries=\"false\">.  This fixes broken queries for ShingleFilter-containing query-time analyzers when request param sow=false.\n\nConflicts:\n\tsolr/core/src/java/org/apache/solr/parser/QueryParser.java\n\tsolr/core/src/java/org/apache/solr/parser/QueryParser.jj\n\tsolr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java\n\tsolr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java ",
            "author": "ASF subversion and git services",
            "id": "comment-15957653"
        },
        {
            "date": "2017-04-05T20:54:39+0000",
            "content": "Commit 3a6fbd741110b04d590ced10375b076321fb8bf7 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3a6fbd7 ]\n\nSOLR-10423: Disable graph query production via schema configuration <fieldtype ... enableGraphQueries=\"false\">.  This fixes broken queries for ShingleFilter-containing query-time analyzers when request param sow=false. ",
            "author": "ASF subversion and git services",
            "id": "comment-15957654"
        },
        {
            "date": "2017-04-05T20:54:42+0000",
            "content": "Commit dbd22a6ada774eb30aee4b9312eb7913dee6890e in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dbd22a6 ]\n\nSOLR-10423: Disable graph query production via schema configuration <fieldtype ... enableGraphQueries=\"false\">.  This fixes broken queries for ShingleFilter-containing query-time analyzers when request param sow=false. ",
            "author": "ASF subversion and git services",
            "id": "comment-15957656"
        }
    ]
}