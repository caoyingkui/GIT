{
    "id": "SOLR-9684",
    "title": "Add priority Streaming Expression",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Resolved",
        "priority": "Major"
    },
    "description": "SOLR-9559 adds a general purpose parallel task executor for streaming expressions. The executor() function executes a stream of tasks and doesn't have any concept of task priority.\n\nThe priority() function wraps two streams, a high priority stream and a low priority stream. The priority function emits tuples from the high priority stream first, and then the low priority stream.\n\nThe executor() function can then wrap the priority function to see tasks in priority order.\n\nPseudo syntax:\n\ndaemon(executor(priority(topic(tasks, q=\"priority:high\"), topic(tasks, q=\"priority:low\"))))",
    "attachments": {
        "SOLR-9684.patch": "https://issues.apache.org/jira/secure/attachment/12835997/SOLR-9684.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-12-30T18:22:12+0000",
            "author": "Joel Bernstein",
            "content": "New patch with tests ",
            "id": "comment-15788111"
        },
        {
            "date": "2016-12-30T18:42:09+0000",
            "author": "David Smiley",
            "content": "When I saw the title of this issue, I thought this was something quite different than what it was \u2013 I thought this was about executing something (or emitting tuples) at a certain time or in a periodic fashion.  \n\nWe've already got a merge() streaming expression that seems remarkably close to this... the only difference here is favoring one stream's tuples over another.  Maybe you could call the feature here mergePrioritized or something like that? ",
            "id": "comment-15788137"
        },
        {
            "date": "2016-12-30T20:21:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f3fe487970f1e21300bd556d226461a2d51b00f9 in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f3fe487 ]\n\nSOLR-9684: Add schedule Streaming Expression ",
            "id": "comment-15788277"
        },
        {
            "date": "2016-12-30T20:34:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit be119d2aa082e176c88dd72c674dbd406d5ec9a2 in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=be119d2 ]\n\nSOLR-9684: Add schedule Streaming Expression ",
            "id": "comment-15788296"
        },
        {
            "date": "2016-12-30T20:38:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 36a691c50d680d1c6977e6185448e06cb21f653d in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=36a691c ]\n\nSOLR-9684: Update CHANGES.txt ",
            "id": "comment-15788302"
        },
        {
            "date": "2016-12-30T20:41:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d396f2d81e8ff52e65a8c2743ec3d4cafca13bc5 in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d396f2d ]\n\nSOLR-9684: Update CHANGES.txt ",
            "id": "comment-15788305"
        },
        {
            "date": "2016-12-30T20:49:38+0000",
            "author": "David Smiley",
            "content": "Joel Bernstein did you not see my feedback? ",
            "id": "comment-15788316"
        },
        {
            "date": "2016-12-30T20:51:12+0000",
            "author": "Joel Bernstein",
            "content": "Ah, missed it. Reading now.. ",
            "id": "comment-15788321"
        },
        {
            "date": "2016-12-30T20:57:00+0000",
            "author": "Joel Bernstein",
            "content": "We can think about the naming of this some more.\n\n The reason why I called it 'schedule' is that it schedules higher priority tasks ahead of lower priority tasks. Possibly more scheduling features could be added in the future.  ",
            "id": "comment-15788328"
        },
        {
            "date": "2016-12-30T21:07:49+0000",
            "author": "Joel Bernstein",
            "content": "One of the things I think would be interesting would be to include a cost based scheduler, which we could build into this implementation.\n\nEach expression implements a cost() method which could be used to determine which tasks to schedule together. But this is going to take more thought and probably involve walking the parse tree to find which collections are involved in the expression.\n\nCurrently also the cost() method is not implemented so we'd have to put some thought into how expressions calculate cost. Fairly soon we'll have to calculate cost for many expressions to support the Calcite cost based join optimizer.  ",
            "id": "comment-15788344"
        },
        {
            "date": "2016-12-30T21:26:52+0000",
            "author": "David Smiley",
            "content": "Using cost() for this sorta thing sounds great... then you could decorate a stream if you want to fix the cost, and then merge() could perhaps use cost.  In any case, I really don't like the name \"schedule\" for this stream. ",
            "id": "comment-15788373"
        },
        {
            "date": "2016-12-30T21:46:13+0000",
            "author": "Joel Bernstein",
            "content": "It think it makes sense for the executor to wrap a scheduler.  The semantics of this is nice. We can also use the schedule function as a facade to build out more scheduling capabilities by passing a scheduling algorithm. for example:\n\nexecutor(schedule(COST, topic())))\nexecutor(schedule(CRON, search())))\nexecutor(schedule(PRIORITY, topic(), topic()))) \n\nThe initial release is simple, but a nice first step. ",
            "id": "comment-15788401"
        },
        {
            "date": "2016-12-30T22:23:05+0000",
            "author": "Joel Bernstein",
            "content": "We could also consider naming the expression 'priority':\n\nexecutor(priority(topic(), topic())\n\n\n\nI'll reopen the ticket until this is decided. ",
            "id": "comment-15788456"
        },
        {
            "date": "2016-12-30T22:23:47+0000",
            "author": "Joel Bernstein",
            "content": "Re-opening to possibly change the expression name. ",
            "id": "comment-15788458"
        },
        {
            "date": "2016-12-31T04:24:59+0000",
            "author": "David Smiley",
            "content": "\"priority\" is way better than \"schedule\" IMO.\n\n(quoting me) We've already got a merge() streaming expression that seems remarkably close to this... the only difference here is favoring one stream's tuples over another. Maybe you could call the feature here mergePrioritized or something like that?\n\nWhat do you think of my statement there?  Is it at least similar conceptually to merge()?  Then shouldn't it be named similarly?  No matter what name is chosen, the docs for merge() should point to the one created in this issue as it's awfully similar, even if the code might be fairly different. ",
            "id": "comment-15788897"
        },
        {
            "date": "2017-01-02T02:34:47+0000",
            "author": "Joel Bernstein",
            "content": "Ok, then let's go with priority as the name for this function.\n\nAbout the merge function. The merge function is shorthand for \"mergeSort\". It's designed to merge two streams sorted on the same keys and maintain the sort order. Originally the idea was that the /export handler was a giant sorting engine, and merge was a way to efficiently merge the sorted streams.\n\nThe priority function behaves more like the SQL UNIONALL. But it's different in that priority only picks one stream to iterate on each open/close. This design allows it to iterate the high priority topic, and only iterate the lower priority topic when no new higher priority tasks have entered the index. Because topics work in small batches, new high priority tasks will jump ahead of existing lower priority tasks on each executor run.\n\nAlso the merge function I think fits into the relational algebra category. The priority function is mainly going to be used for task prioritization and execution.\n\nEventually we'll need to implement both a UnionStream and UnionAllStream as well.\n ",
            "id": "comment-15792043"
        },
        {
            "date": "2017-01-02T05:36:34+0000",
            "author": "David Smiley",
            "content": "+1 good, priority it is.\n\nToo bad merge isn't named mergeSorted which would have been way clearer. ",
            "id": "comment-15792258"
        },
        {
            "date": "2017-01-02T16:16:06+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 0999f6779a3341af072d31162a2c88cf1eb8c5d4 in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0999f67 ]\n\nSOLR-9684: Rename schedule function to priority ",
            "id": "comment-15793110"
        },
        {
            "date": "2017-01-02T16:29:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit dc289bdacf1a5731839132d6aa019b9e23122031 in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dc289bd ]\n\nSOLR-9684: Rename schedule function to priority ",
            "id": "comment-15793128"
        }
    ]
}