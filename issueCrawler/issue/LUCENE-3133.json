{
    "id": "LUCENE-3133",
    "title": "Fix QueryParser to handle nested fields",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Once we commit LUCENE-2454, we need to make it easy for apps to enable this with QueryParser.\n\nIt seems like it's a \"schema\" like behavior, ie we need to be able to express the join structure of the related fields.\n\nAnd then whenever QP produces a query that spans fields requiring a join, the NestedDocumentQuery is used to wrap the child fields?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-23T19:13:05+0000",
            "content": "2454 already includes extensions for the XML parser syntax and the standard QueryParser could work the same with some added syntax. I think I've seen other languages use WITH as a keyword e.g.\n\n  forename:john surname:smith WITH(employer:google AND date:2009)\n\n\n\nIn this example the WITH keyword is used to mark a clause that relates to a child document.\nWhat is left unsaid here is how parent documents are distinguished from child docs in the index. I guess you could \n1) Extend the WITH syntax to make it part of the query expression or\n2) Make it part of the QueryParser constructor (i.e. tell the query parser what denotes parent docs) or\n3) Have a fixed system for tagging parents enforced by Lucene's IndexWriter when calling the addDocuments API.\n\nOption 3 seems too restrictive (it may be desirable for example to have multiple levels of hierarchy to roll up to in an index).\n\nThe majority of users we have using this feature currently do so using a form-based query builder which assembles the nested XML syntax behind the scenes so there is no need for extensions to the standard QueryParser.  I can see some power users would want this though. ",
            "author": "Mark Harwood",
            "id": "comment-13038148"
        },
        {
            "date": "2011-05-23T21:15:15+0000",
            "content": "\nI'm confused on why the query parser language would need to be\nextended to handle this...\n\nIe, it seems like, for a given index, the assignment of fields to\nparent vs child docs is a global/static decision?  And then any query\nthat has clauses against mixed parent/child fields should be \"wrapped\"\nby NestedDocumentQuery so that the child field/doc matches are\n\"translated\" to the corresponding parent docs?\n\nWhy should each query be free to change this?\n\nEG if a user type that same query, but without WITH, then nothing\nwould match right?\n\nI guess this means I'd vote for 2  ",
            "author": "Michael McCandless",
            "id": "comment-13038235"
        },
        {
            "date": "2011-05-23T22:10:03+0000",
            "content": "So the 2 reasons I can think of why the WITH construct may be needed are:\n1) If the field names aren't exclusive to a doc type e.g. \"name\" or \"age\" is a field found on both parent and child docs\nor\n2) If you want to find a parent with two different children (e.g. a resume of someone who has held a position at Google in 2009 and a different position at LinkedIn during 2010).\n\nIn both cases the WITH clause is needed to set the context around clauses to avoid any ambiguity ",
            "author": "Mark Harwood",
            "id": "comment-13038270"
        },
        {
            "date": "2011-05-23T22:34:53+0000",
            "content": "Oh I see.  Hmm, is case 1 is going to cause problems?  (Ie if both parent & child docs can come back matching a given field).  Is there a \"normal\" use case where you would want to put same field name on both parent & child docs?  (I had thought normally the field names would be orthogonal).\n\nCase 2) I agree needs some special syntax.  In fact, even non-nested docs might want such a query?  Eg if my docs are cars, and each car has a multi-valued field listing its features (\"A/C\", \"Automatic transmission\", ...), and I want to find all cars that have both A/C and Automatic transmission.  Boolean AND query won't work correctly for this; I'd need this same extension as your bullet 2 I think? ",
            "author": "Michael McCandless",
            "id": "comment-13038286"
        },
        {
            "date": "2011-05-23T22:41:33+0000",
            "content": "Duh nevermind on case 2 \u2013 Boolean AND query would work for that example! ",
            "author": "Michael McCandless",
            "id": "comment-13038292"
        },
        {
            "date": "2011-05-24T00:06:11+0000",
            "content": "Mightn't you want to be able to do self-joins?  For example if you want to represent an XML document, and your field is \"Element\" - it has any number Attribute children and any number of Node children, which in turn may be Elements.  I wonder if LUCENE-2454 could be extended to allow recursive ChildDocumentQuery - ie DescendantDocumentQuery? ",
            "author": "Mike Sokolov",
            "id": "comment-13038328"
        },
        {
            "date": "2011-05-24T08:42:45+0000",
            "content": "I wonder if LUCENE-2454 could be extended to allow recursive ChildDocumentQuery \n\nNo need to extend. This can be done today by nesting a NestedDocumentQuery inside another.\nThe only thing you need to do is set the \"ParentsFilter\" to roll up results to the appropriate point e.g. parent/child/grandchild\n\nis there a \"normal\" use case where you would want to put same field name on both parent & child docs?\n\nI wouldn't want to rule that possibility out e.g. a person has a name and age and their sons and daughters have names and ages too.\n ",
            "author": "Mark Harwood",
            "id": "comment-13038448"
        },
        {
            "date": "2011-06-03T16:40:47+0000",
            "content": "bulk move 3.2 -> 3.3 ",
            "author": "Robert Muir",
            "id": "comment-13043560"
        },
        {
            "date": "2012-03-21T18:14:23+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 ",
            "author": "Hoss Man",
            "id": "comment-13234772"
        },
        {
            "date": "2013-07-23T18:44:51+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717077"
        },
        {
            "date": "2014-04-16T12:54:31+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970785"
        }
    ]
}