{
    "id": "LUCENE-4352",
    "title": "only the test runner should be able to System.exit",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/test"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "4.0-BETA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "All others should get SecurityException",
    "attachments": {
        "LUCENE-4352.patch": "https://issues.apache.org/jira/secure/attachment/12543562/LUCENE-4352.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-03T12:01:46+0000",
            "content": "The problem is, thats not easy possible with a policy file, as we can only forbid it globally or allow it. If we would have signed code (means the JAR file of the test-runner is signed by Verisign or like that, you can allow it selectively for specific signers), or by directory (must be absolute URL - e.g., with file:/fullpath/...). This would need tpo be preprocessed by the build.xml to make absolute and convert to URL/URI (new File(...).asURI().toAsciiString()).\n\nThe question: Does the test runner call System.exit() at all or does it just let the main() method finish? If the latter is true, then its easy, just disallow System.exit(). ",
            "author": "Uwe Schindler",
            "id": "comment-13447236"
        },
        {
            "date": "2012-09-03T12:30:34+0000",
            "content": "The thing we can do is to explicitely all actions for RuntimePermission and leave out exit(): http://docs.oracle.com/javase/6/docs/api/java/lang/RuntimePermission.html\n\nUnfortunately this confuses me: 'This allows an attacker to mount a denial-of-service attack by automatically forcing the virtual machine to halt. Note: The \"exitVM.\" permission is automatically granted to all code loaded from the application class path, thus enabling applications to terminate themselves. Also, the \"exitVM\" permission is equivalent to \"exitVM.\".'\nSo this appears to me that exiting is always possible from classes that are inside the application ClassLoader (passed via -classpath to JVM). We could only forbid it, if Solr would load ZooKeeper in a separate ClassLoader. I have to try this out.\n\nThe second problem is that policy files only allow \"grants\" not \"deny\", so if you grant RuntimePermission.* (as it is currently) you cannot explicitely forbid it for one code part. You have to do it vice versa: Disallow it for all (by having the long list of RuntimePermissions instead of \"*\") and only allow it for one classloader. ",
            "author": "Uwe Schindler",
            "id": "comment-13447246"
        },
        {
            "date": "2012-09-03T13:55:17+0000",
            "content": "Does the test runner call System.exit() at all or does it just let the main() method finish?\n\nIt calls system.exit() because otherwise it wouldn't be able to terminate the forked JVM if background non-daemon threads are started from tests. ",
            "author": "Dawid Weiss",
            "id": "comment-13447280"
        },
        {
            "date": "2012-09-03T15:22:36+0000",
            "content": "I played a little bit around and the above javadoc behaves exactly as proposed: Code from the default classloader can always call System.exit/System.halt. I played around and removed the RuntimePermission at all to verify this, Lucene tests still passed with:\n\n\n  permission java.lang.RuntimePermission \"createClassLoader\";\n  permission java.lang.RuntimePermission \"getClassLoader\";\n  permission java.lang.RuntimePermission \"setIO\";\n  permission java.lang.RuntimePermission \"modifyThread\";\n  permission java.lang.RuntimePermission \"modifyThreadGroup\";\n  permission java.lang.RuntimePermission \"accessDeclaredMembers\";\n  permission java.lang.RuntimePermission \"getStackTrace\";\n  permission java.lang.RuntimePermission \"setDefaultUncaughtExceptionHandler\";\n  permission java.lang.RuntimePermission \"shutdownHooks\";\n\n\n\nSo theoretically we can restrict a lot of stuff (like calling Thread.stop(), which is deprecated) or setting another SecurityManager that circumvents our HighSecurity(tm) environment (LOL), but not System.exit().\n\nThere is only one possibility that I will check now: We currently pass:\n\n\n<sysproperty key=\"java.security.manager\" value=\"java.lang.SecurityManager\" />\n\n\n\nIf the test VM calls System.exit(), the SecurityManager's method checkExit() is in all cases invoked and can jump in... So we can provide a custom SecurityManger from the test framework that passes everything to the default manager (so enforcing our Policy), but on checkExit(int), it will inspect the stack trace like the preflex-RW codec does in Mike's hack and look for the test-runners \"exit\" signature to allow exit only for this case; in all other cases throw SecurityException. ",
            "author": "Uwe Schindler",
            "id": "comment-13447314"
        },
        {
            "date": "2012-09-03T15:32:14+0000",
            "content": "See also: http://stackoverflow.com/questions/8270340/prohibit-the-call-to-system-exit and http://stackoverflow.com/questions/309396/java-how-to-test-methods-that-call-system-exit/309427#309427 ",
            "author": "Uwe Schindler",
            "id": "comment-13447320"
        },
        {
            "date": "2012-09-03T15:40:36+0000",
            "content": "Running with:\n\n\nant test -Dargs=\"-Djava.security.debug=all\" ...\n\n\n\nverifies this, it grants exitVM to every package on classpath - just read the debug output (very interesting...!) ",
            "author": "Uwe Schindler",
            "id": "comment-13447323"
        },
        {
            "date": "2012-09-03T16:06:14+0000",
            "content": "Thanks for checking, Uwe. I could integrate a sub-class loader for test classes, but it'll take me some time, I'm busy at the moment. Don't know about overriding the default system class loader trick \u2013 perhaps it'd work (it's what Maven and ANT are using if I remember correctly). ",
            "author": "Dawid Weiss",
            "id": "comment-13447334"
        },
        {
            "date": "2012-09-03T16:29:36+0000",
            "content": "I think, simply passing another SecurityManager with -D should handle all this (and checking the stack trace from it like Preflex-Codec). The reason why exitVM permission is granted automatically to all classes from within -classpath is tricky: Otherwise, the code could never exit itsself (it would not even allow to exit after its own main() method ends!).\n\nI'll play around with it. The Zookeeper issue is well known, so they are waiting for their patch to apply again (ZOOKEEPER-1544 was closed as duplicate, ZOOKEEPER-575 is pending since long time - I don't expect a solution soon). ",
            "author": "Uwe Schindler",
            "id": "comment-13447343"
        },
        {
            "date": "2012-09-03T17:49:51+0000",
            "content": "Here is a quick patch thet prevents System.exit() with a dirty hack:\n\n\n\tThis installs a subclass of Java's original java.lang.SecurityManager, so the tests.policy file is still taken into account (see common-build.xml)\n\tThe method checkExit(int) was overridden to:\n\n\n\n\n\tcreate a SecurityException, but don't throw (just to get the stack trace).\n\tInspect stack trace and saerch for System.exit (to walk over JVM-internal things)\n\tThe next element in the stack trace (important, no gaps inbetween) after System.exit() must be SlaveMain.main() from Junit4's ANT runner. If this stack element is found, checkExit() delegates to superclass (which will always pass without SecurityException)\n\tIf no valid stack trace element is found, checkExit() will finally throw the already instantiated SecurityException\n\n\n\nThis patch works for me, but I need a list of all \"valid\" exit points with stack traces that can occur in Dawid's code.\n\nTHIS IS A HACK, BUT WORKS! ",
            "author": "Uwe Schindler",
            "id": "comment-13447368"
        },
        {
            "date": "2012-09-03T17:57:50+0000",
            "content": "This patch works for me, but I need a list of all \"valid\" exit points with stack traces that can occur in Dawid's code.\n\nUwe, can we restrict to a package (and subpackages) instead? com.carrotsearch.randomizedtesting.* or something will do. I can provide all the exit points but it'd be nicer if we just do the package \u2013 I can then refactor things without looking at this stuff. ",
            "author": "Dawid Weiss",
            "id": "comment-13447370"
        },
        {
            "date": "2012-09-03T18:23:09+0000",
            "content": "Of course we can! Attached is new patch - using \"(e.getClassName().startsWith(\"com.carrotsearch.ant.tasks.junit4.\"))\". The important thing is that there is nothing between the last System.exit() or Runtime.exit() in the stack trace before the test runner package (as of above if statement), so its garanteed that the test runner itsself is calling exit() and not something deeper in the stack trace.\n\nThe loop in this code looks ugly but allows both patterns:\n\n\ttest-runner calling System.exit() which itsself calls Runtime.getRuntime().exit()\n\tor test-runner clalling Runtime.exit() directly\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13447377"
        },
        {
            "date": "2012-09-03T19:24:12+0000",
            "content": "Isn't this equivalent with a slightly easier to read logic, Uwe? Also I didn't delegate up to the system security manager but just return \u2013 why did you delegate upwards, was it intentional?\n\nAnyway, works for me! ",
            "author": "Dawid Weiss",
            "id": "comment-13447395"
        },
        {
            "date": "2012-09-03T19:41:56+0000",
            "content": "The upwards delegation is mandatory, the javadocs require this (although doesn't matter here). ",
            "author": "Uwe Schindler",
            "id": "comment-13447397"
        },
        {
            "date": "2012-09-03T19:57:30+0000",
            "content": "If you override this method, then you should make a call to super.checkExit at the point the overridden method would normally throw an exception.\n\nIt isn't mandatory \u2013 they say \"you should\" not \"must\". I don't understand the purpose (and wording) of it either, other than just delegate to check the default policy. I think in our case this won't matter much. ",
            "author": "Dawid Weiss",
            "id": "comment-13447402"
        },
        {
            "date": "2012-09-03T20:02:42+0000",
            "content": "Attached with additional javadocs and the delegation to super readded (so the default AccessController has a chance to recognize the system exit and do something).\n\nThe loop is indeed better, while watching TV I had the same in mind but you were faster.\n\nDo you think we should commit this hack? It's tiny and we already have a SecurityManager, so no overhead. ",
            "author": "Uwe Schindler",
            "id": "comment-13447404"
        },
        {
            "date": "2012-09-03T20:48:20+0000",
            "content": "I think it's fine as far as my limited knowledge of security architecture allows me to tell. ",
            "author": "Dawid Weiss",
            "id": "comment-13447409"
        },
        {
            "date": "2012-09-03T22:45:24+0000",
            "content": "My final version:\n\n\tThe access checks must be done with the SecurityManager's access context, otherwise things like getting stack trace could be denied. This is ensured by AccessController.\n\tThe SecurityException also gives exit code and method called\n\tAlso Runtime.halt() is handled.\n\n\n\nI will commit this now. ",
            "author": "Uwe Schindler",
            "id": "comment-13447423"
        },
        {
            "date": "2012-09-03T22:49:25+0000",
            "content": "Comitted trunk revision: 1380391\nCommitted 4.x revision: 1380392 ",
            "author": "Uwe Schindler",
            "id": "comment-13447424"
        },
        {
            "date": "2012-09-04T06:32:09+0000",
            "content": "The access checks must be done with the SecurityManager's access context, otherwise things like getting stack trace could be denied\n\nStack traces are retrieved from all over the place in the test framework too (on test timeouts, on thread leaks). Will it work? ",
            "author": "Dawid Weiss",
            "id": "comment-13447509"
        },
        {
            "date": "2012-09-04T06:36:30+0000",
            "content": "Stack traces are retrieved from all over the place in the test framework too (on test timeouts, on thread leaks). Will it work?\n\nIf you install a SecurityManager that does not allow this, it will of course not work. The thing here is more special and has nothing to do with Test-Framework: If the Security Manager itsself has to do additional checks that may be denied, it must du this using his own security context (thats what AccessController is doing here) and not with the one of the caller. ",
            "author": "Uwe Schindler",
            "id": "comment-13447511"
        },
        {
            "date": "2012-09-04T06:44:00+0000",
            "content": "Ok, I get it. ",
            "author": "Dawid Weiss",
            "id": "comment-13447513"
        },
        {
            "date": "2012-09-04T06:51:13+0000",
            "content": "For the test-framework an example for using AccessControler.doPrivileged() would be:\n\n\tPolicy denies e.g. file access outside the test runner J0 working dir (which may be a good idea) -> \"untrusted code\"\n\tBut Policy allows writing files outside the J0 working directory for the test-framework.jar file itself -> \"trusted code\"\n\n\n\nThe problem here would be: \n\n\t\"untrusted\" code calls \"trusted\" code, e.g. the test (\"untrusted\") calls a method from test-framework that writes outside base directory. The calling \"untrusted\" code is not allowed to do this, but the test-framework itsself (\"trusted\") is allowed to do this.\n\tSecurityManager would disallow this, but that may not what we want.\n\n\n\nThe naming of AccessController.doPrivileged is a little bit misleading. It does not mean something is \"privileged\", it just tells that the closure should not be handled by access checks of the code calling you, but with the context of your own code. This is always needed when untrusted code calls trusted code which would normally have higher rights.\n\nThe above example might be a good solution (limit write access to test-runner's local private \"J0\" directory only). ",
            "author": "Uwe Schindler",
            "id": "comment-13447515"
        },
        {
            "date": "2012-09-04T11:25:10+0000",
            "content": "Thanks for working on this! ",
            "author": "Robert Muir",
            "id": "comment-13447625"
        },
        {
            "date": "2013-05-10T10:34:41+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654297"
        }
    ]
}