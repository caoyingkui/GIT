{
    "id": "SOLR-9887",
    "title": "Add KeepWordFilter, StemmerOverrideFilter, StopFilterFactory, SynonymFilter that reads data from a JDBC source",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "We've created some new FilterFactories that reads their stopwords or synonyms from a database (by a JDBC source). That enables us a easy management of large lists and also add the possibility to do this in other tools. JDBC data sources are retrieved via JNDI.\n\nFor a easy reload of this lists we've added a SeacherAwareReloader abstraciton that reloads this lists on every new searcher event.\n\nIf this is a feature that is interesting for Solr, we will create a pull request. All the sources are currently available here: https://github.com/shopping24/solr-jdbc",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-12-26T19:33:34+0000",
            "author": "Alexandre Rafalovitch",
            "content": "I believe the current direction with Solr is to focus on Managed resources that are REST-managed in a push fashion, as opposed to JDBC-pull. This way the common issues related to API, SolrCloud distribution, etc can be solved for all of those at once.\n\nIs there any chance you could use that approach? It would be a very valuable contribution. ",
            "id": "comment-15778858"
        },
        {
            "date": "2016-12-27T18:54:13+0000",
            "author": "David Smiley",
            "content": "Push-style is fine but pull is good too; each app has it's own motivating rationale.  Personally, I've been thinking it'd be cool if these might pull from a StreamingExpression, which in turn could be an expression that reads from a JDBC or Solr or who knows what else someone might plug in. ",
            "id": "comment-15781039"
        },
        {
            "date": "2017-02-23T18:55:04+0000",
            "author": "Christine Poerschke",
            "content": "(Late to the party here.)\n\nI think support for stop words, synonyms, etc. from sources other than text files would be a useful feature for Solr and using streaming expressions to 'abstract away' the source of the stop words sounds like a good generalisation.\n\nWhat might a preferred and suitable approach be to take this forward? In no particular order:\n\n\n\tOption 1: config-to-code\n\t\n\t\tstarting with the existing config e.g. <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" /> work out and sketch out what the new streaming expressions based configuration will look like\n\t\tcoding up of that solution\n\t\n\t\n\n\n\n\n\tOption 2: build-upon-existing\n\t\n\t\tcreation of a pull request against lucene-solr based upon https://github.com/shopping24/solr-jdbc as per above\n\t\ttransformation of that pull request into streaming expressions based approach\n\t\n\t\n\n\n\n\n\tOption 3: <your idea here>\n\t\n\t\t<your thoughts here>\n\t\n\t\n\n\n\n(From my very positive and collaborative experiences on SOLR-5730 and SOLR-8621 my preference/recommendation would probably be 'Option 1' rather than 'Option 2' and I'd be very interested to hear what Option 3, 4, etc. might be also.) ",
            "id": "comment-15881013"
        },
        {
            "date": "2017-02-24T14:18:27+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "With this impl, the updated dictionary would not be stored in ZK at all, am I right?\nIsn't the workflow for the other managed filters that they update ZK then call reload collection?\nSince it is an anti pattern to keep large files in ZK I would prefer a (generic) way to define an external source (JDBC, NoSQL, shared filesystem, HDFS, S3, whatever) for the config, and then add REST managed API for the component so that you can do CRUD operations on the dictionary no matter where it resides. Not sure how you would propagate a change to all the cores in your collection though, after having, say, added one synonym. Perhaps a reload core, triggering each filter to consult its source and check if they have the newest version?\nSo this is still a push-based approach, it could perhaps support polling to, but I don't like the thought of 100 Solr nodes polling when it would be enough that one did it. Do we have the concept of a collection-chief, i.e. leader of shard 1 could by definion be the chief and the Managed Filter could have a pollInterval setting that only the chief would act upon, and then call reload collection when it discovers that there is an update? ",
            "id": "comment-15882767"
        },
        {
            "date": "2017-02-24T20:12:30+0000",
            "author": "Torsten B\u00f8gh K\u00f6ster",
            "content": "As a co-author of the said project, I'm happy to see that a discussion has started. We're currently implementing another search based on Solr where we're heavily making use of a lot of huge synonym lists (e.g. for german stemming). The problem is that the only out of the box way to use large synonym files with Solr is to package them as JAR and supply them in the classpath or the external libs folder. \n\nAs Jan said, Zookeeper would be an ideal storage but is limited to 1mb and you do not want to mess around with that. I like the idea Alexandre that Solr should maintain resources in a push fashion and act as a pure data store. Is there a way that we push large synonym files into the system collection (that would be my Option 3 ?\n\nIn the current project jdbc storage is not the preferred way of handling data. So we're maybe going to extend the project to another NoSQL datastore - or even the system collection as mentioned above. The main implementation idea of the solr-jdbc project is to swap the ResourceLoader with a datastore dependend one [1]. I'll check if we could design this more interchangeable for future use of other data stores or the native system collection.\n\nIn regards of updating, the solr-jdbc project is pulling updated synonym definitions upon Searcher construction, so there is no in-between Searcher synonym reloading - but it would be certainly be a nice to have feature.\n\n[1] https://github.com/shopping24/solr-jdbc/blob/master/src/main/java/com/s24/search/solr/analysis/jdbc/JdbcResourceLoader.java ",
            "id": "comment-15883440"
        }
    ]
}