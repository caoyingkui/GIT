{
    "id": "SOLR-1666",
    "title": "SolrParams conversion to NamedList and back to SolrParams misses the Arrays with more than one value",
    "details": {
        "affect_versions": "1.3,                                            1.4",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Implemented"
    },
    "description": "When a parameter in a SolrParams instance is an Array that has more than one element, the method SolrParams.toNamedList() generates a NamedList<Object> correctly, but when the method SolrParams.toSolrParams() is invoked with that NamedList instance, the resultant SolrParams instance has that parameter as a String, wich is the result of the String[].toString() method.\n\nTestCase:\n\n\npublic class TestDismaxQParserPlugin extends DisMaxQParserPlugin {\n\tprivate Log log = LogFactory.getLog(this.getClass());\n\tpublic QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n\n\t\t// TestCase with the param facet.field\n\t\tif(params.getParams(FacetParams.FACET_FIELD) != null) {\n\t\t\t// Original Values\n\t\t\tlog.debug(\"FACET.FIELD Param - Before\");\n\t\t\tString[] facetFieldBefore = params.getParams(FacetParams.FACET_FIELD);\n\t\t\tlog.debug(\"toString():\"+facetFieldBefore.toString());\n\t\t\tlog.debug(\"length:\"+facetFieldBefore.length);\n\t\t\tlog.debug(\"Elements:\");\n\t\t\tfor(String value : facetFieldBefore) \n\t\t\t\tlog.debug(\"[class \"+value.getClass().getName()+\"] \"+value);\n\t\t\t\n\t\t\t// Transforming\n\t\t\tNamedList<Object> paramsList = params.toNamedList();\n\t\t\tparams = SolrParams.toSolrParams(paramsList);\n\n\t\t\t// Result Values\n\t\t\tlog.debug(\"FACET.FIELD Param - After\");\n\t\t\tString[] facetFieldAfter = params.getParams(FacetParams.FACET_FIELD);\n\t\t\tlog.debug(\"toString():\"+facetFieldAfter.toString());\n\t\t\tlog.debug(\"length:\"+facetFieldAfter.length);\n\t\t\tlog.debug(\"Elements:\");\n\t\t\tfor(String value : facetFieldAfter) \n\t\t\t\tlog.debug(\"[class \"+value.getClass().getName()+\"] \"+value);\n\t\t} else {\n\t\t\tlog.debug(\"FACET.FIELD NOT SPECIFIED\");\n\t\t}\n\t\treturn super.createParser(qstr, localParams, params, req);\n\t}\n}\n\n\n\nEditing the solrconfig.xml file for this QueryParser to be used and using an URL like \"http://host:port/path/select?q=something&facet=true&facet.field=subject&facet.field=date\" the output is (only the interesting lines):\n\nFINA: FACET.FIELD Param - Before\nFINA: toString():[Ljava.lang.String;@c96ad7c\nFINA: length:2\nFINA: Elements:\nFINA: [class java.lang.String] subject\nFINA: [class java.lang.String] date\nFINA: FACET.FIELD Param - After\nFINA: toString():[Ljava.lang.String;@44775121\nFINA: length:1\nFINA: Elements:\nFINA: [class java.lang.String] [Ljava.lang.String;@c96ad7c",
    "attachments": {
        "SOLR-1666.patch": "https://issues.apache.org/jira/secure/attachment/12525709/SOLR-1666.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Wojtek Piaseczny",
            "id": "comment-12877650",
            "date": "2010-06-11T00:10:17+0000",
            "content": "I made the following change in my code base to work around this issue. Is there a better approach?\n\n\n    // in SolrParams.java\n    public static SolrParams toSolrParams(NamedList params) {\n    // if no keys are repeated use the faster MapSolrParams\n    HashMap<String,String> map = new HashMap<String,String>();\n    for (int i=0; i<params.size(); i++) {\n      Object val = params.getVal(i);\n      if(val instanceof String[])\n      {\n        return new MultiMapSolrParams(toMultiMap(params));\n      }\n      else\n      {\n        String prev = map.put(params.getName(i), val.toString());\n        if (prev!=null) return new MultiMapSolrParams(toMultiMap(params));\n      }\n    }\n    return new MapSolrParams(map);\n  }\n  \n  // in SolrParams.java\n  /** Create a Map<String,String[]> from a NamedList */\n  public static Map<String,String[]> toMultiMap(NamedList params) {\n    HashMap<String,String[]> map = new HashMap<String,String[]>();\n    for (int i=0; i<params.size(); i++) {\n      String name = params.getName(i);\n      Object val = params.getVal(i);\n      addParam(name,val,map);\n    }\n    return map;\n  }\n  \n  // in MultiMapSolrParams.java\n  public static void addParam(String name, Object val, Map<String,String[]> map) {\n    String[] arr = map.get(name);\n    if (arr == null) {\n      // first time we're seeing this parameter name.\n      if (val instanceof String[]) {\n        arr = (String[]) val;\n      } else {\n        arr = new String[] { val.toString() };\n      }\n    } else {\n      // add new value(s) to existing value(s).\n      if (val instanceof String[]) {\n        String[] saVal = (String[]) val;\n        String[] newarr = new String[arr.length + saVal.length];\n        // copy current values.\n        System.arraycopy(arr, 0, newarr, 0, arr.length);\n        // copy new values.\n        System.arraycopy(saVal, 0, newarr, arr.length, newarr.length - arr.length);\n        arr = newarr;\n      } else {\n        String[] newarr = new String[arr.length + 1];\n        System.arraycopy(arr, 0, newarr, 0, arr.length);\n        newarr[arr.length] = val.toString();\n        arr = newarr;\n      }\n    }\n    map.put(name, arr);\n  }\n\n  "
        },
        {
            "author": "Dan Brown",
            "id": "comment-13268854",
            "date": "2012-05-05T01:37:15+0000",
            "content": "Attaching patch that checks whether the value is a String[].  If so, add each element of the string to the map.  Otherwise, behave as before. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835711",
            "date": "2013-11-30T13:23:49+0000",
            "content": "2013 Old JIRA cleanup "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15552458",
            "date": "2016-10-06T16:49:15+0000",
            "content": "At some point this code had been refactored and the new implementation does fix the issue. "
        }
    ]
}