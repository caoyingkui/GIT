{
    "id": "SOLR-6468",
    "title": "Regression: StopFilterFactory doesn't work properly without deprecated enablePositionIncrements=\"false\"",
    "details": {
        "affect_versions": "4.8.1,                                            4.9,                                            5.3.1,                                            6.6.2,                                            7.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Setup:\n\n\tSchema version is 1.5\n\tField config:\n\n<fieldType name=\"words_ngram\" class=\"solr.TextField\" omitNorms=\"false\" autoGeneratePhraseQueries=\"true\">\n  <analyzer>\n    <tokenizer class=\"solr.PatternTokenizerFactory\" pattern=\"[^\\w]+\" />\n    <filter class=\"solr.StopFilterFactory\" words=\"url_stopwords.txt\" ignoreCase=\"true\" />\n    <filter class=\"solr.LowerCaseFilterFactory\" />\n  </analyzer>\n</fieldType>\n\n\n\tStop words:\n\nhttp \nhttps \nftp \nwww\n\n\n\n\n\nSo very simple. In the index I have:\n\n\ttwitter.com/testuser\n\n\n\nAll these queries do match:\n\n\ttwitter.com/testuser\n\tcom/testuser\n\ttestuser\n\n\n\nBut none of these does:\n\n\thttps://twitter.com/testuser\n\thttps://www.twitter.com/testuser\n\twww.twitter.com/testuser\n\n\n\nDebug output shows:\n\"parsedquery_toString\": \"+(url_words_ngram:\\\"? twitter com testuser\\\")\"\nBut we need:\n\"parsedquery_toString\": \"+(url_words_ngram:\\\"twitter com testuser\\\")\"\n\nComplete debug outputs:\n\n\ta valid search: http://pastie.org/pastes/9500661/text?key=rgqj5ivlgsbk1jxsudx9za\n\tan invalid search: http://pastie.org/pastes/9500662/text?key=b4zlh2oaxtikd8jvo5xaww\n\n\n\nThe complete discussion and explanation of the problem is here: http://lucene.472066.n3.nabble.com/Help-with-StopFilterFactory-td4153839.html\n\nI didn't find a clear explanation how can we upgrade Solr, there's no any replacement or a workarround to this, so this is not just a major change but a major disrespect to all existing Solr users who are using this feature.",
    "attachments": {
        "FieldValue.png": "https://issues.apache.org/jira/secure/attachment/12869030/FieldValue.png"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-14118076",
            "date": "2014-09-02T10:17:24+0000",
            "content": "You have to enable enablePositionIncrements=\"false\" and  matchVersion=\"4.3\" on the StopFilterFactory, otherwise you get IllegalArgumentException: \"enablePositionIncrements=false is not supported anymore as of Lucene 4.4 as it can create broken token streams\". "
        },
        {
            "author": "Alexander S.",
            "id": "comment-14118078",
            "date": "2014-09-02T10:26:37+0000",
            "content": "Correct, but isn't this behavior deprecated? I mean matchVersion=\"4.3\"? I was told this could get removed from 5.0 as well.\n\nIf I do understand the problem correctly enablePositionIncrements=\"false\" could generate wrong tokens for those who do not know how to use this option correctly? It seems it requires a custom tokenizer and solr.PatternTokenizerFactory in my example should work properly. So instead of removing the option the problem with wrong tokens could be explained in the readme and the option could be kept for those who really needs it. That makes more sense to me than simply removing it.\n\nAnyway, is there any chance the option could be restored? My usecase should clearly show how useful it might be. And I was trying to google the problem, there's a lot of complaints about this, but no solutions. "
        },
        {
            "author": "Alexander S.",
            "id": "comment-14130090",
            "date": "2014-09-11T14:37:33+0000",
            "content": "Just tried to add matchVersion but got this error:\n\nnull:org.apache.solr.common.SolrException: Unable to create core: crm-prod\n\tat org.apache.solr.core.CoreContainer.recordAndThrow(CoreContainer.java:911)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:568)\n\tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:261)\n\tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:253)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.apache.solr.common.SolrException: Could not load core configuration for core crm-prod\n\tat org.apache.solr.core.ConfigSetService.getConfig(ConfigSetService.java:66)\n\tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:554)\n\t... 8 more\nCaused by: org.apache.solr.common.SolrException: Plugin init failure for [schema.xml] fieldType \"words_ngram\": Plugin init failure for [schema.xml] analyzer/filter: Error instantiating class: 'org.apache.lucene.analysis.core.StopFilterFactory'. Schema file is /etc/solr/core2/schema.xml\n\tat org.apache.solr.schema.IndexSchema.readSchema(IndexSchema.java:616)\n\tat org.apache.solr.schema.IndexSchema.<init>(IndexSchema.java:166)\n\tat org.apache.solr.schema.IndexSchemaFactory.create(IndexSchemaFactory.java:55)\n\tat org.apache.solr.schema.IndexSchemaFactory.buildIndexSchema(IndexSchemaFactory.java:69)\n\tat org.apache.solr.core.ConfigSetService.createIndexSchema(ConfigSetService.java:89)\n\tat org.apache.solr.core.ConfigSetService.getConfig(ConfigSetService.java:62)\n\t... 9 more\nCaused by: org.apache.solr.common.SolrException: Plugin init failure for [schema.xml] fieldType \"words_ngram\": Plugin init failure for [schema.xml] analyzer/filter: Error instantiating class: 'org.apache.lucene.analysis.core.StopFilterFactory'\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:177)\n\tat org.apache.solr.schema.IndexSchema.readSchema(IndexSchema.java:470)\n\t... 14 more\nCaused by: org.apache.solr.common.SolrException: Plugin init failure for [schema.xml] analyzer/filter: Error instantiating class: 'org.apache.lucene.analysis.core.StopFilterFactory'\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:177)\n\tat org.apache.solr.schema.FieldTypePluginLoader.readAnalyzer(FieldTypePluginLoader.java:400)\n\tat org.apache.solr.schema.FieldTypePluginLoader.create(FieldTypePluginLoader.java:86)\n\tat org.apache.solr.schema.FieldTypePluginLoader.create(FieldTypePluginLoader.java:43)\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:151)\n\t... 15 more\nCaused by: org.apache.solr.common.SolrException: Error instantiating class: 'org.apache.lucene.analysis.core.StopFilterFactory'\n\tat org.apache.solr.core.SolrResourceLoader.newInstance(SolrResourceLoader.java:606)\n\tat org.apache.solr.schema.FieldTypePluginLoader$3.create(FieldTypePluginLoader.java:382)\n\tat org.apache.solr.schema.FieldTypePluginLoader$3.create(FieldTypePluginLoader.java:376)\n\tat org.apache.solr.util.plugin.AbstractPluginLoader.load(AbstractPluginLoader.java:151)\n\t... 19 more\nCaused by: java.lang.reflect.InvocationTargetException\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:408)\n\tat org.apache.solr.core.SolrResourceLoader.newInstance(SolrResourceLoader.java:603)\n\t... 22 more\nCaused by: java.lang.IllegalArgumentException: Unknown parameters: {matchVersion=4.3}\n\tat org.apache.lucene.analysis.core.StopFilterFactory.<init>(StopFilterFactory.java:91)\n\t... 27 more\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14130109",
            "date": "2014-09-11T14:55:38+0000",
            "content": "luceneMatchVersion is what you want, not matchVersion "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14130147",
            "date": "2014-09-11T15:35:23+0000",
            "content": "The parameter is \"luceneMatchVersion\". "
        },
        {
            "author": "Alexander S.",
            "id": "comment-14130209",
            "date": "2014-09-11T16:05:24+0000",
            "content": "Thanks, it does work with luceneMatchVersion=\"4.3\", isn't this deprecated? Any chance to return enablePositionIncrements? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14130227",
            "date": "2014-09-11T16:17:57+0000",
            "content": "Any chance to return enablePositionIncrements?\n\nOdds are extremely low that this will happen.\n\nAn alternative is to use a char filter (e.g. MappingCharFilterFactory or PatternReplaceCharFilterFactory) to remove stuff you don't want; that way the tokenizer won't leave position holes. "
        },
        {
            "author": "Roman Chyla",
            "id": "comment-14225186",
            "date": "2014-11-25T20:55:04+0000",
            "content": "I also find this change to be unfortunate. If this is just a developers making decisions for users (then it causes problems to users who really know why they do need that feature: for phrase search that should ignore stopwords). But if the underlying issue is something serious with the indexer not being able to work with the position, than it would be even weirder - and actually very bad for many users. I don't really understand benefits of this change. Any chance to return to the original? "
        },
        {
            "author": "Okke Klein",
            "id": "comment-14319960",
            "date": "2015-02-13T11:15:08+0000",
            "content": "I also like to see enablePositionIncrements being returned. It is very useful for removing stopwords when using shingles in the Suggester.  "
        },
        {
            "author": "Roman Chyla",
            "id": "comment-15514785",
            "date": "2016-09-22T23:23:09+0000",
            "content": "Ha! \nI've found my own comment above, 2 years later I'm facing this situation again, I completely forgot (and truth be told: preferred running old solr 4x).\n\nThis is how the new solr sees things:\n\nA 350-MHz GBT Survey of 50 Faint Fermi \u03b3 ray Sources for Radio Millisecond Pulsars\n\nis indexed as\n```\nnull_1\n1\t:350|350mhz\n2\t:mhz|syn::mhz\n3\t:acr::gbt|gbt|syn::gbt|syn::green bank telescope\n4\t:survey|syn::survey\nnull_1\n6\t:50\n```\n\nthe 1st and 5th position is a gap - so the search for \"350-MHz GBT Survey of 50 Faint\" will fail - because 'of' is a stopword and the stop-filter will always increment the position (what's the purpose of a stopfilter; if it is leaving gaps?)\n\nanyways, the solution with CharFilterFactory cannot work for me, I have to do this:\n\n 1. search for synonyms (they can contain stopwords)\n 2. remove stopwords\n 3. search for other synonyms (that don't have stopwords)\n\nI'm afraid the real life is little bit more complex than what it seems; but there is a logic to your choices, SOLR devs, I'm afraid I can agree with you. People who understand the why will make it work again as it should. Others will happily keep using the 'simplified' version. "
        },
        {
            "author": "Alexander S.",
            "id": "comment-15541697",
            "date": "2016-10-03T06:52:18+0000",
            "content": "We now can't upgrade to Solr 6 due to this. "
        },
        {
            "author": "Diego Oliveira",
            "id": "comment-15638299",
            "date": "2016-11-05T01:35:05+0000",
            "content": "I read all discussion and can't believe on this decision. I'm having the same problem!!! I need to use stopword filter + shingle filter. But when removed the stop words I stay with a hole that create a bug for shingle filters... they duplicate tokens that cannot be removed by Remove Duplicate Filter due to shingle and tokens be in distinct initial positions. I don't believe that the community cannot solve this problem enabling this old feature... as the people said in here. It is best stay with the 'simplified' version than with the new (plus) version. it will until Solr X? Come on!!! "
        },
        {
            "author": "Elvis Rocha",
            "id": "comment-16017843",
            "date": "2017-05-19T18:56:34+0000",
            "content": "I created a filter to remove token gaps\n\nRemoveTokenGapsFilterFactory.java\npackage filters;\n\nimport java.io.IOException;\nimport java.util.Map;\n\nimport org.apache.lucene.analysis.TokenFilter;\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.tokenattributes.PositionIncrementAttribute;\nimport org.apache.lucene.analysis.util.TokenFilterFactory;\n\npublic class RemoveTokenGapsFilterFactory extends TokenFilterFactory {\n\n\tpublic RemoveTokenGapsFilterFactory(Map<String, String> args) {\n\t\tsuper(args);\n\t}\n\n\t@Override\n\tpublic TokenStream create(TokenStream input) {\n\t\tRemoveTokenGapsFilter filter = new RemoveTokenGapsFilter(input);\n\t\treturn filter;\n\t}\n\n}\n\nfinal class RemoveTokenGapsFilter extends TokenFilter {\n\n\tprivate final PositionIncrementAttribute posIncrAtt = addAttribute(PositionIncrementAttribute.class);\n\n\tpublic RemoveTokenGapsFilter(TokenStream input) {\n\t\tsuper(input);\n\t}\n\n\t@Override\n\tpublic final boolean incrementToken() throws IOException {\n\t\twhile (input.incrementToken()) {\n\t\t\tposIncrAtt.setPositionIncrement(1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n}\n\n\n\n\nschema.xml\n<fieldType name=\"text_match\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n\t<analyzer>\n\t\t<charFilter class=\"solr.MappingCharFilterFactory\" mapping=\"mapping-ISOLatin1Accent.txt\"/>\n\t      \t<tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n\t  \t<filter class=\"solr.LowerCaseFilterFactory\"/>\n\t  \t<filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"lang/stopwords_pt.txt\" format=\"snowball\"/>\n\t  \t<filter class=\"filters.RemoveTokenGapsFilterFactory\" />\n\t</analyzer>\n</fieldType>\n\n\n\n "
        },
        {
            "author": "Alexander S.",
            "id": "comment-16359924",
            "date": "2018-02-11T12:18:27+0000",
            "content": "Wondering how we can bring attention to this problem? "
        },
        {
            "author": "Nikhil Dhiman",
            "id": "comment-16363554",
            "date": "2018-02-14T06:47:25+0000",
            "content": "Hi Alexander S.\n\nGreetings!\n\nI am also facing the exact problem, not able to get the expected results because of the gap left by stop filter factory. I found you mentioned that it worked for you after enabling enablePositionIncrements=\"false\" and luceneMatchVersion=\"4.3\"  on stop filter factory. I tried the same but getting \"Error instantiating class\" error while creating the core. I am already on Lucene version 6.1. Below are exact config changes for your reference. Please suggest how to enable enablePositionIncrements feature for me. Thanks much in advance!\n\n\nConfig Changes\n\t  <fieldType class=\"solr.TextField\" name=\"text_general\" positionIncrementGap=\"100\">\n\t\t<analyzer type=\"index\">\n\t\t\t<tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n\t\t\t<filter class=\"solr.LowerCaseFilterFactory\"/>\t\t\t\n\t\t\t<filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n\t\t\t<filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" enablePositionIncrements=\"false\" luceneMatchVersion=\"4.3\" />\t<filter class=\"solr.TrimFilterFactory\"/>\n\t\t</analyzer>\n\t\t<analyzer type=\"query\">\n\t\t\t<charFilter class=\"solr.HTMLStripCharFilterFactory\"/>\n\t\t\t<charFilter class=\"solr.MappingCharFilterFactory\" mapping=\"mapping-specialchars.txt\"/>\t\t\t\n\t\t\t<tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n\t\t\t<filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" enablePositionIncrements=\"false\" luceneMatchVersion=\"4.3\"/>\n\t\t\t<filter class=\"solr.LowerCaseFilterFactory\"/>\t\t\t\n\t\t\t<filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\t\t\t\t\t\t\n\t\t</analyzer>\n\t\t<similarity class=\"solr.IBSimilarityFactory\">\n\t\t      <str name=\"distribution\">LL</str>\n\t\t      <str name=\"lambda\">DF</str>\n\t\t      <str name=\"normalization\">H2</str>\n    \t\t</similarity>\n\t</fieldType>\n "
        },
        {
            "author": "Alexander S.",
            "id": "comment-16363583",
            "date": "2018-02-14T07:28:03+0000",
            "content": "Hey, we're on 5.3.1 because of this. AFAIK this doesn't\u00a0work on newer versions. "
        },
        {
            "author": "Nikhil Dhiman",
            "id": "comment-16363734",
            "date": "2018-02-14T10:13:25+0000",
            "content": "Hi Alexander S.\n\nAs mentioned above in the first comment by Uwe Schindler, enablePositionIncrements=false is not supported from Lucene version 4.4. But you just mentioned above you are on 5.3.1 and still able to use enablePositionIncrements=\"false\"  feature. I am just strange about this. Am I missing something here?\n\nAnd also if possible, could you please share your config snapshot where you have implemented the same?\n\nThanks much in advance! "
        },
        {
            "author": "Alexander S.",
            "id": "comment-16363744",
            "date": "2018-02-14T10:25:13+0000",
            "content": "I think so, Solr and Lucene versions are different things. Solr 5.3.1 supports Lucene version 4.3, but newer versions of Solr probably don't.\n\nBut I am not\u00a0absolutely sure what exactly Solr version dropped support for this, just saying that we're on Solr 5.3.1 and it is working, it didn't work in Solr 6 for sure (we tried it) and, if I am not mistaken, it didn't work in Solr 5.5. "
        }
    ]
}