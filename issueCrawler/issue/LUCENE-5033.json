{
    "id": "LUCENE-5033",
    "title": "SlowFuzzyQuery appears to fail with edit distance >=3 in some cases",
    "details": {
        "components": [
            "modules/other"
        ],
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "affect_versions": "4.3",
        "priority": "Minor",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Levenshtein edit btwn \"monday\" and \"montugu\" should be 4.  The following shows a query with \"sim\" set to 3, and there is a hit.\n\n  public void testFuzzinessLong2() throws Exception \n{\n     Directory directory = newDirectory();\n     RandomIndexWriter writer = new RandomIndexWriter(random(), directory);\n     addDoc(\"monday\", writer);\n     \n     IndexReader reader = writer.getReader();\n     IndexSearcher searcher = newSearcher(reader);\n     writer.close();\n\n     SlowFuzzyQuery query;\n     query = new SlowFuzzyQuery(new Term(\"field\", \"montugu\"), 3, 0);   \n     ScoreDoc[] hits = searcher.search(query, null, 1000).scoreDocs;\n     assertEquals(0, hits.length);\n  }",
    "attachments": {
        "LUCENE-5033.patch": "https://issues.apache.org/jira/secure/attachment/12586416/LUCENE-5033.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-05T23:30:00+0000",
            "content": "First draft of patch attached.  Let me know how this looks. Thank you. ",
            "author": "Tim Allison",
            "id": "comment-13676486"
        },
        {
            "date": "2013-06-06T00:20:57+0000",
            "content": "Thanks Tim!  This looks like a great improvement: I like factoring out calcDistance from calcSimilarity.\n\nAnd I like that we now take raw into account when figuring out which comparison to make to accept the term or not.  Maybe we could improve it a bit: if raw is true we don't need to calcSimilarity right?\n\nFor my sanity ... where exactly was the bug in the original code? ",
            "author": "Michael McCandless",
            "id": "comment-13676532"
        },
        {
            "date": "2013-06-06T01:35:34+0000",
            "content": "Thank you for your quick response!\n\nI, too, was hoping to avoid calcSimilarity if raw is true, but I think we need it to calculate the boost.  Let me know if I'm missing something.\n\nThe bug in the original code was that FilteredTermsEnum sets minSimilarity to 0 when the user-specified minSimilarity is >= 1.0f.  So, in SlowFuzzyTermsEnum, similarity (unless it was Float.NEGATIVE_INFINITY) was typically > minSimilarity no matter its value.  In other words, when the client code made the call with minSimilarity >=1.0f, that value was correctly recorded in maxEdits, but maxEdits wasn't the determining factor in whether SlowFuzzyTerms accepted a term. ",
            "author": "Tim Allison",
            "id": "comment-13676587"
        },
        {
            "date": "2013-06-06T04:06:13+0000",
            "content": "Doing an explicit levenshtein calculation here sort of defeats the entire purpose of having levenshtein automata at all! ",
            "author": "Robert Muir",
            "id": "comment-13676659"
        },
        {
            "date": "2013-06-06T10:35:56+0000",
            "content": "I, too, was hoping to avoid calcSimilarity if raw is true, but I think we need it to calculate the boost. Let me know if I'm missing something.\n\nAhh, you're right ... I missed that.  OK.\n\nThe bug in the original code was that FilteredTermsEnum sets minSimilarity to 0 when the user-specified minSimilarity is >= 1.0f. So, in SlowFuzzyTermsEnum, similarity (unless it was Float.NEGATIVE_INFINITY) was typically > minSimilarity no matter its value. In other words, when the client code made the call with minSimilarity >=1.0f, that value was correctly recorded in maxEdits, but maxEdits wasn't the determining factor in whether SlowFuzzyTerms accepted a term.\n\nOh, I see: FuzzyTermsEnum does this in its ctor, and SlowFuzzyTermsEnum extends that.  Now I understand the bug ... thanks.\n\nDoing an explicit levenshtein calculation here sort of defeats the entire purpose of having levenshtein automata at all!\n\nBut this fix only applies in cases (edit distance > 2) where automaton's don't, I think?  (The fixes are to LinearFuzzyTermsEnum). ",
            "author": "Michael McCandless",
            "id": "comment-13676894"
        },
        {
            "date": "2013-06-06T11:11:40+0000",
            "content": "Robert,\n\nI agree that it appears to, but if you want a distance > 2, the current levenshtein automaton doesn't allow that (http://blog.mikemccandless.com/2011/03/lucenes-fuzzyquery-is-100-times-faster.html?showComment=1303598602291#c3051732466052117784).  The classic QueryParser silently converts distances > 2 to 2.\n\nIf I understand SlowFuzzyQuery correctly, it uses the levenshtein automaton for distances <= 2, but it runs brute force if the distance is > 2.  \n\nMy personal preference would be to undeprecate SlowFuzzyQuery (certainly leave it in the sandbox) because it offers a capability that the current levenshtein automaton doesn't.  In cases where the indices are very large, it wouldn't make sense to expose distance > 2 capability; but on small to medium indices, there are use cases that require it. ",
            "author": "Tim Allison",
            "id": "comment-13676919"
        },
        {
            "date": "2013-06-06T13:46:58+0000",
            "content": "Updated patch.  Added short circuits to avoid calculating similarity when not necessary.  Corrected term.length to text.length in calcSimilarity call.  Activated old tests that test for edit distance matches where the edit distances are greater than the query term length. ",
            "author": "Tim Allison",
            "id": "comment-13677024"
        },
        {
            "date": "2013-06-06T17:07:32+0000",
            "content": "Thanks Tim, new patch looks great! ",
            "author": "Michael McCandless",
            "id": "comment-13677245"
        },
        {
            "date": "2013-06-08T22:51:31+0000",
            "content": "Thanks Tim! ",
            "author": "Michael McCandless",
            "id": "comment-13678880"
        },
        {
            "date": "2013-06-10T12:30:21+0000",
            "content": "Mike,\n  Thank you for your feedback and quick response!\n ",
            "author": "Tim Allison",
            "id": "comment-13679471"
        },
        {
            "date": "2013-07-23T18:37:03+0000",
            "content": "Bulk close resolved 4.4 issues ",
            "author": "Steve Rowe",
            "id": "comment-13716734"
        }
    ]
}