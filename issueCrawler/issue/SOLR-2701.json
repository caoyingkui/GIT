{
    "id": "SOLR-2701",
    "title": "Expose IndexWriter.commit(Map<String,String> commitUserData) to solr",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "At the moment, there is no feature that enables associating user information to the commit point.\n\nLucene supports this possibility and it should be exposed to solr as well, probably via beforeCommit Listener (analogous to prepareCommit in Lucene).\n\nMost likely home for this Map to live is UpdateHandler.\n\nExample use case would be an atomic tracking of sequence numbers or timestamps for incremental updates.",
    "attachments": {
        "SOLR-2701.patch": "https://issues.apache.org/jira/secure/attachment/12489728/SOLR-2701.patch",
        "SOLR-2701-Expose-userCommitData-throughout-solr.patch": "https://issues.apache.org/jira/secure/attachment/12555301/SOLR-2701-Expose-userCommitData-throughout-solr.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Eks Dev",
            "id": "comment-13080474",
            "date": "2011-08-06T22:23:44+0000",
            "content": "one hook for users to update content of this map would be to add beforeCommit callbacks. This looks simple enough in UpdateHandler2.commit() call, but there is a catch: \n\nWe need to invoke listeners before we close() for implicit commits... having decref-ed IndexWriter, the question is if we want to run beforeCommit listeners even if IW does not really get closed (user updates map more often than needed). \n\nIMO, this should not be a problem, invoking callbacks a little bit more often than needed. \n\nAnother place where we have \"implicit commit\" is newIndexWriter() / \nhere we need only to add IndexWriterProvider.isIndexWriterNull() to check if we need callbacks\n\nA solution for close()  would be also simple by adding IndexWriterProvider.isIndexGoingToCloseOnNextDecref() before invoking decref() to condition callbacks\n\nAny better solution? Are the callbacks good approach to provide user hooks for this?\n\n-------\nAnother approach is to get beforeCommitCallbacks at lucene level and piggy-back there for solr callbacks? \nWe would only need to change IndexWriter.commit(Map..) and close() but commit is final...\n\n\nNotice: I am very rusty considering solr/lucene codebase => any help would be appreciated.  Last patch I made here is ages ago  "
        },
        {
            "author": "Eks Dev",
            "id": "comment-13081141",
            "date": "2011-08-08T19:19:09+0000",
            "content": "rather simplistic approach, adding userCommitData to CommitUpdateCommand.\n\nSo we at least have a vehicle to pass it to IndexWriter.\n\nNo advanced machinery to make it available to  non-expert users. At least ti is not wrong to have it there?\n\nEclipse removed some unused imports from DUH2 as well    "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13145580",
            "date": "2011-11-07T16:09:55+0000",
            "content": "I'd like to move this forward, so I'm soliciting a bit of advice about how to proceed.\n\nI'm interested here in getting this into SolrJ, it's not clear to me that this belongs in, say, an XML input file (and csv and json and...) since we have a nice clean document add format and trying to put index meta-data in there seems like a bad thing to do.\n\nAnyway, if we do go down the SolrJ route, it seems like SolrServer needs either two more commit methods that take a Map<String, String> or something like a new addUserData method, the latter seems cleaner.\n\nThen we'd have to do something with UpdateRequest to get the use-data passed over to the Solr server and from there pass it on through to the writer.commit.\n\nMostly, I'm looking for guidance on whether this is a reasonable approach or if it's wrong-headed from the start, in which case I'll take any suggestions gladly.. Haven't started to code anything yet, so changes in the approach are really cheap....\n\nEks Dev: Do you want to push this forward and/or work on it together? "
        },
        {
            "author": "Eks Dev",
            "id": "comment-13145746",
            "date": "2011-11-07T20:02:01+0000",
            "content": "@Erick, just go ahead and take it. \nI am not going to be working on this any time soon. At the moment I am using quck'n dirty patched trunk version (moving target anyways) with extended CommitCommand to pass Map around (sub-optimal approach? but does the work for now). \n\nSome thinking about it, maybe you find something useful: \n\nTake care, optimize and autoCommit do implicit commit (from user perspective, there is no explicit transaction to commit where we could pass Map parameters). This, as a consequence, requires Map<String, String> to be alive somewhere (DUH2 looks like the best place for it). Of course, one needs to expose some user interfaces that will enable map mutation and inquiry. This Map then becomes cached key-value pairs holder a user can change and solr offers guaranties to commit it on implicit/explicit commit and read it on reload/rollback \n\nRollback and restart, e.g. what happens to this map after restart (core reload)? I would suggest populating it with committed values, on rollback as well.\n\nAs a summary: \n\n\tOne thing is low level mechanics, this is easy: all changes are local to DUH2, one Map<String, String> and passing this instance to all commit commands you see there. Of course, reloading it on index reload/rollback\n\tMuch harder (at least for me): designing good user interface to maintain it,\n... explicit changes vie request handler (admin like operation)\n... as parameter of the commit command (nice)\n... somehow hooking into update chain elegantly (My primary use case! I keep track of the max timestamp in this map (actually in AtomicLong, just populating Map on commit) to control incremental updates, but my use case is dumb easy to support with patched CommitCommand as I have only explicit commits (this wold not work with e.g. autoCommit, you would need Map instance for it).   \n\n\n\ne.g. Look at DIH, it uses internal counters and file system to persist it for this, that could be much better served by lucene commit guaranties...\n\n\nOn another note, keeping real-time (not committed values) track of min/max values for user defined fields would make sense for incremental update scenarios, I do not know if there is something in lucene/solr for it already, but this is another, but somehow related issue...  \n\nCheers, \nEks \n\n\n\n\n "
        },
        {
            "author": "Gregg Donovan",
            "id": "comment-13176422",
            "date": "2011-12-28T03:03:42+0000",
            "content": "We (Etsy) are interested in this issue for the same use-case that Eks Dev mentions \u2013 passing around timestamps and other meta-data for use by incremental indexers. We currently write out and replicate custom property files for this \u2013 using commitUserData would be preferable.\n\nIt seems like another use-case the commitUserData could be useful for is doing an empty commit that actually triggered replication, as the updated commitUserData will cause the segments file to be updated.\n\nFor our purposes, we'd just be using CommitUpdateCommand and DUH2 as our interfaces for writing the commitUserData, but exposing commitUserData to the SolrJ/HTTP interfaces does seem like a nice feature. I wonder where it would be useful to expose reading the commitUserData via SolrJ/HTTP as right now you still need low-level code to extract the commitUserData from an IndexReader. Perhaps stats.jsp could expose each key in the commitUserData as a stat? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13443958",
            "date": "2012-08-29T11:00:40+0000",
            "content": "I won't be getting to this any time soon "
        },
        {
            "author": "Greg Bowyer",
            "id": "comment-13506180",
            "date": "2012-11-29T03:17:52+0000",
            "content": "I gave this another attempt today, and went full bore on trying to find all the locations of where userCommitData would need to be exposed to clients of the SOLR API.\n\nThere are a few questions in my mind about this:\n\n\n\tThe backwards compat for javabin is not obvious, do we want to change up the version on javabin\n\n\n\n\n\tWhat should be the exacting behavior around soft and autocommits\n\n\n\n\n\tShould previous index commits carry forward in solr for ease of use ?\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13506186",
            "date": "2012-11-29T03:36:53+0000",
            "content": "Should previous index commits carry forward in solr for ease of use ?\n\nI haven't had a chance to check out the rest of the patch/issue, but for this specifically, what about a convention?  Anything under the \"persistent\" key in the commit data is carried over indefinitely.  Or if persistent is the norm, then we could reverse it and have a \"transient\" map that is not carried over. "
        },
        {
            "author": "Greg Bowyer",
            "id": "comment-13506688",
            "date": "2012-11-29T19:10:39+0000",
            "content": "I haven't had a chance to check out the rest of the patch/issue, but for this specifically, what about a convention? Anything under the \"persistent\" key in the commit data is carried over indefinitely. Or if persistent is the norm, then we could reverse it and have a \"transient\" map that is not carried over.\n\nThe persistent/transient map sounds like a good idea; I will take a look at how that can be implemented "
        }
    ]
}