{
    "id": "LUCENE-5889",
    "title": "AnalyzingInfixSuggester should expose commit()",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/spellchecker"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "There is no way short of close() for a user of AnalyzingInfixSuggester to cause it to commit() its underlying index: only refresh() is provided.  But callers might want to ensure the index is flushed to disk without closing.",
    "attachments": {
        "LUCENE-5889.patch": "https://issues.apache.org/jira/secure/attachment/12663118/LUCENE-5889.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14103800",
            "author": "Varun Thacker",
            "content": "Patch which exposes commit.\n\nI also added param to the constructor 'commitOnBuild' . I felt it was a good option to have and especially useful in Solr where we just expose the build() method for all suggesters. \n\nMichael McCandless - Also regarding your comments on the user list regarding the NPE's in add(), update()  I think it would be more convenient for a user to keep calling add() in a loop and then call commit() to build his suggester. It saves the user the hassle of creating a Iterator. If you think otherwise I could change it to IllegalStateException. ",
            "date": "2014-08-20T12:14:33+0000"
        },
        {
            "id": "comment-14104098",
            "author": "Michael McCandless",
            "content": "Thanks Varun!\n\nI think we shouldn't add another ctor?  (The API is experimental.).\nJust add the new commitOnBuild param ...\n\nI think it's fine to init the writer in add/update, but can you pull\nthat out to its own method, e.g. getWriter?  And I guess it should be\nsync'd, in case multiple threads try to add/update at once?\n\nAnd maybe add some tests showing that you can just use .add and then\nrefresh and see the suggestions? ",
            "date": "2014-08-20T16:28:48+0000"
        },
        {
            "id": "comment-14105216",
            "author": "Varun Thacker",
            "content": "Thanks for the review!\n\nNew patch which addresses all the inputs you provided. ",
            "date": "2014-08-21T08:53:30+0000"
        },
        {
            "id": "comment-14106187",
            "author": "Michael McCandless",
            "content": "Thanks Varun, looks good, I'll commit.  I'll just fix whitespace: \"if(\" should be \"if (\" ",
            "date": "2014-08-21T23:53:34+0000"
        },
        {
            "id": "comment-14106207",
            "author": "ASF subversion and git services",
            "content": "Commit 1619635 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1619635 ]\n\nLUCENE-5889: add commit method to AnalyzingInfixSuggester ",
            "date": "2014-08-22T00:07:16+0000"
        },
        {
            "id": "comment-14106209",
            "author": "ASF subversion and git services",
            "content": "Commit 1619636 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1619636 ]\n\nLUCENE-5889: add commit method to AnalyzingInfixSuggester ",
            "date": "2014-08-22T00:08:26+0000"
        },
        {
            "id": "comment-14106210",
            "author": "Michael McCandless",
            "content": "Thanks Varun! ",
            "date": "2014-08-22T00:08:51+0000"
        },
        {
            "id": "comment-14107150",
            "author": "Hoss Man",
            "content": "The backport of this issue seems to be breaking tests on the 4x branch\n\ncomments from email (Subject: Re: [JENKINS] Lucene-Solr-Tests-4.x-Java7 - Build # 2066 - Failure)...\n\n\nSomething on 4.x changed in the last ~24 hours or so has started causing \nall solr \"Suggest\" based tests to fail reliably, regardless of seed...\n\ncd solr/core && ant test -Dtests.class=\\*Suggest\\*\n...\n   [junit4] Tests with failures:\n   [junit4]   - org.apache.solr.spelling.suggest.TestAnalyzedSuggestions (suite)\n   [junit4]   - org.apache.solr.spelling.suggest.TestAnalyzeInfixSuggestions (suite)\n   [junit4]   - org.apache.solr.spelling.suggest.TestFuzzyAnalyzedSuggestions (suite)\n   [junit4]   - org.apache.solr.spelling.suggest.TestPhraseSuggestions (suite)\n\n\nThe common problem seems to be related to SolrCore init? ...\n\norg.apache.solr.common.SolrException: SolrCore 'collection1' is not available due to init failure: null\n...\nCaused by: java.lang.RuntimeException\n        at org.apache.solr.spelling.suggest.fst.BlendedInfixLookupFactory.create(BlendedInfixLookupFactory.java:102)\n        at org.apache.solr.spelling.suggest.SolrSuggester.init(SolrSuggester.java:104)\n\n\n...anybody have any idea what happened here?\n\n\n\n\n: Something on 4.x changed in the last ~24 hours or so has started causing \n: all solr \"Suggest\" based tests to fail reliably, regardless of seed...\n\nHmmm... this fauses several failures for me everytime...\n\nant test  -Dtests.class=\\*Suggest\\*\n\nBut try any indiividual \"reproduce with\" line from those failures and they \npass.\n\n\nA quick poke at the code suggests that there is a problem of leaking \nwrite locks between tests?\n\n\nThere's some stupid exception handling in the solr factories thats masking \nthe root problem by just throwing \"new RuntimeException()\", but it seems \nto be that in all the failures the calls like this...\n\n      return new BlendedInfixSuggester(core.getSolrConfig().luceneMatchVersion, \n                                       FSDirectory.open(new File(indexPath)),\n                                       indexAnalyzer, queryAnalyzer, minPrefixChars,\n                                       blenderType, numFactor, true);\n\n...are throwing IOExceptions due ot write.lock failures\n\n   [junit4]    > Caused by: \norg.apache.lucene.store.LockObtainFailedException: Lock obtain timed out: \nNativeFSLock@/home/hossman/lucene/4x_dev/solr/build/solr-core/test/J1/blendedInfixDir1/write.lock\n   [junit4]    >        at \norg.apache.lucene.store.Lock.obtain(Lock.java:89)\n   [junit4]    >        at \norg.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:756)\n   [junit4]    >        at \norg.apache.lucene.search.suggest.analyzing.AnalyzingInfixSuggester.<init>(AnalyzingInfixSuggester.java:185)\n   [junit4]    >        at \norg.apache.lucene.search.suggest.analyzing.BlendedInfixSuggester.<init>(BlendedInfixSuggester.java:115)\n   [junit4]    >        at \norg.apache.solr.spelling.suggest.fst.BlendedInfixLookupFactory.create(BlendedInfixLookupFactory.java:97)\n   [junit4]    >        ... 12 more\n\n\n...which smells like SOLR-6246, except that these tests aren't doing core \nreloads -- so who's got the write lock?\n\nLooking at recent commits, LUCENE-5889 seems like the most likeley culprit \nfor potentially introducing a related bug -- when i reverted it on 4x \n(\"svn merge -c -1619636 .\" as of r1619866) these tests started passing \nagain.\n\n ",
            "date": "2014-08-22T17:38:48+0000"
        },
        {
            "id": "comment-14107166",
            "author": "Mark Miller",
            "content": "Is there a thread safety issue with the writer in AnalyzingInfixSuggester here? ",
            "date": "2014-08-22T17:43:51+0000"
        },
        {
            "id": "comment-14107201",
            "author": "Robert Muir",
            "content": "FYI Mike just left on vacation for a while. I'm not familiar with the issue yet so unable to help right now myself (currently busy). ",
            "date": "2014-08-22T18:01:32+0000"
        },
        {
            "id": "comment-14107212",
            "author": "Areek Zillur",
            "content": "I am currently investigating the problem, will update when I find anything interesting. ",
            "date": "2014-08-22T18:08:13+0000"
        },
        {
            "id": "comment-14107220",
            "author": "Hoss Man",
            "content": "Is there a thread safety issue with the writer in AnalyzingInfixSuggester here?\n\nthere's definitely a lock not getting freed somewhere - but i don't know about thread safety.\n\nI am currently investigating the problem, will update when I find anything interesting.\n\nThanks areek.\n\nNOTE: it's totally possible that this change itself is fine and correct, and just happened to tickle some existing bug in the Solr factories that wrap the suggesters ",
            "date": "2014-08-22T18:12:59+0000"
        },
        {
            "id": "comment-14107228",
            "author": "Mark Miller",
            "content": "but i don't know about thread safety.\n\nIt's hard to know at a glance, but the class is written in a way that says it expects to be used by multiple threads and the indexwriter is not accessed in a way that expects to be used by multiple threads. No fire, but a bunch of smoke. ",
            "date": "2014-08-22T18:16:33+0000"
        },
        {
            "id": "comment-14107391",
            "author": "Areek Zillur",
            "content": "Interesting: Both AnalyzingInfixSuggester & BlendedInfixSuggester implements Closeable and on close closes the writer and searchmanager it uses. But looking into the Solr factories and suggest component, there seems to be no way to close a suggester (close() is never callled). What might happen is, as all the failing tests re-uses the same 'solrconfig-phrasesuggest.xml', the *InfixSuggester never closes the writer or the searchmanager and on subsequent instantiations throws the LockObtainFailedException (as all tests are re-using the same directory path for the underlying index)?   ",
            "date": "2014-08-22T19:58:40+0000"
        },
        {
            "id": "comment-14107497",
            "author": "Hoss Man",
            "content": "But looking into the Solr factories and suggest component, there seems to be no way to close a suggester (close() is never callled).\n\nHuh?\n\nAwe, damn it ... on trunk Suggester registers a CloseHook for the Lookup, but apparently that never got backported to 4x.\n\nSo it looks like this is in fact a bug in Solr's Suggester class and we've just ben (un)lucky that are tests never triggered it, but the new logic added here (aparently) shifts when the write locks are held, so w/o the CloseHook the tests are failing.\n\nI'll open a new Jira: SOLR-5322\n\n(Thanks Areek!) ",
            "date": "2014-08-22T21:12:29+0000"
        },
        {
            "id": "comment-14108446",
            "author": "Shawn Heisey",
            "content": "There's a precommit failure for missing javadoc on AnalyzingInfixSuggester#commit(), added by the svn commit for this issue.  If I add a dummy javadoc to the method, precommit passes.  I would fix, but I don't really know what the javadoc should say, and I'd rather not add something that's incorrect or incomplete. ",
            "date": "2014-08-24T16:41:41+0000"
        },
        {
            "id": "comment-14108512",
            "author": "Michael McCandless",
            "content": "Grr, sorry for all the noise here \n\nI'll fix the javadocs smoke test failure. ",
            "date": "2014-08-24T19:45:55+0000"
        },
        {
            "id": "comment-14108518",
            "author": "ASF subversion and git services",
            "content": "Commit 1620180 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1620180 ]\n\nLUCENE-5889: add missing javadocs ",
            "date": "2014-08-24T19:57:17+0000"
        },
        {
            "id": "comment-14108524",
            "author": "ASF subversion and git services",
            "content": "Commit 1620182 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1620182 ]\n\nLUCENE-5889: add missing javadocs ",
            "date": "2014-08-24T20:02:58+0000"
        },
        {
            "id": "comment-14197460",
            "author": "Mike Sokolov",
            "content": "It seems like my issues got addressed here - thanks! It looks like possibly this is ready for backporting to 4.x now?  I would love to see this in a release if anyone has a moment to merge it in. ",
            "date": "2014-11-05T04:09:40+0000"
        },
        {
            "id": "comment-14197983",
            "author": "Michael McCandless",
            "content": "I think we shouldn't backport commit to 4.10.x?  That branch is only for bug fixes... hopefully we soon release 5.0, which has the new commit method. ",
            "date": "2014-11-05T09:24:31+0000"
        },
        {
            "id": "comment-14332658",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:01:11+0000"
        }
    ]
}