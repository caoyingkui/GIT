{
    "id": "SOLR-8330",
    "title": "Restrict logger visibility throughout the codebase to private so that only the file that declares it can use it",
    "details": {
        "components": [],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "6.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "As Mike Drob pointed out in Solr-8324, many loggers in Solr are unintentionally shared between classes.  Many instances of this are caused by overzealous copy-paste.  This can make debugging tougher, as messages appear to come from an incorrect location.\n\nAs discussed in the comments on SOLR-8324, there also might be legitimate reasons for sharing loggers between classes.  Where any ambiguity exists, these instances shouldn't be touched.",
    "attachments": {
        "SOLR-8330.patch": "https://issues.apache.org/jira/secure/attachment/12774357/SOLR-8330.patch",
        "SOLR-8330-detector.patch": "https://issues.apache.org/jira/secure/attachment/12774659/SOLR-8330-detector.patch",
        "SOLR-8330-combined.patch": "https://issues.apache.org/jira/secure/attachment/12774740/SOLR-8330-combined.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-21T18:27:31+0000",
            "author": "Jason Gerlowski",
            "content": "I'm going to take an initial crack at this.  Though I can't think of any reasonable rationale for re-using loggers between classes, there might be a use case I'm not aware of.  So where there's any doubt, I'll be leaving those declarations as-is.  (This can always be changed later if there's a stronger consensus on being stricter about this.)\n\nFor the logger declarations that I do change, I plan on using the copy-paste safe declaration suggested by Uwe on SOLR-8324:\n\n\n    import java.lang.invoke.MethodHandles;\n    //...\n    private static final Logger log = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\n\n ",
            "id": "comment-15020605"
        },
        {
            "date": "2015-11-21T19:18:42+0000",
            "author": "Mark Miller",
            "content": "Though I can't think of any reasonable rationale for re-using loggers between classes, there might be a use case I'm not aware of.\n\nIf a dev really wants to make logging more confusing by making something look like another class is logging it, it really should be on them to comment appropriately at these places to prevent other devs from fixing it. ",
            "id": "comment-15020628"
        },
        {
            "date": "2015-11-21T20:06:32+0000",
            "author": "Jason Gerlowski",
            "content": "Personally, I agree with you.  I was just trying to avoid being overzealous.  I saw Yonik and some others had expressed a bit of doubt around this on the original JIRA, so I was being conservative.\n\nBut I'm happy to take a broader approach here and remove all logger-sharing.  Done. ",
            "id": "comment-15020660"
        },
        {
            "date": "2015-11-21T20:22:24+0000",
            "author": "Yonik Seeley",
            "content": "Please let's not blindly convert all loggers.\nAs an example, TransactionLog - the inner classes use the outer classes logger, but that's a good thing here IMO - they are highly coupled. ",
            "id": "comment-15020667"
        },
        {
            "date": "2015-11-22T03:58:42+0000",
            "author": "Jason Gerlowski",
            "content": "I'm fine w/ either approach, I don't have a strong opinion either way (as you can probably tell by my earlier flip-flop).\n\nBut just for clarification, what's the advantage of having TransactionLog on a message that comes from SubclassOfTLog.  Under either approach, someone investigating that message should be able to easily find it in any modern IDE.  Is it that TransactionLog is a more well-known piece of Solr than an internal impl class, so readers would have a better notion of what's going on than if the message was tagged with a lesser known class?\n\nAnyways, I can avoid touching the particular outer class-logger-used in-inner-class scenarios exemplified by TransactionLog are there any other cases I should be leaving as-is?  I'm not sure how to infer intent vs. accident/laziness in other scenarios unless there's an explicit comment clarifying things, which I don't really expect there to be in many cases.\n\nIf I don't hear anything else in the next day I'll go forward based on the feedback you guys've given so far. ",
            "id": "comment-15020826"
        },
        {
            "date": "2015-11-22T04:29:03+0000",
            "author": "Mark Miller",
            "content": "We should simply comment those to protect them if there is no agreement. Personally, I want the logs to point me to the correct class. ",
            "id": "comment-15020830"
        },
        {
            "date": "2015-11-22T19:58:07+0000",
            "author": "Shawn Heisey",
            "content": "We should simply comment those to protect them if there is no agreement. Personally, I want the logs to point me to the correct class.\n\nI'm with Mark on this.  Someone who has no interest in the code won't know what it means, but if they send the logs to someone who does have that interest (including the mailing list or a Jira issue), then logging a different class name will slow down efforts to help.\n\nI can't think of a situation where a shared logger is actually a good idea, but that might be a failure of imagination on my part.  If there IS a good reason to do it, that reason should definitely be in a comment on the logger creation. ",
            "id": "comment-15021174"
        },
        {
            "date": "2015-11-22T22:35:31+0000",
            "author": "Mark Miller",
            "content": "I think for the tlog example, the counter argument is things like controlling all the tlog logging with one class even, even if it spans some helper classes. \n\nThat's fine, but given the current state of things, lots of benefits in simplifying.  ",
            "id": "comment-15021224"
        },
        {
            "date": "2015-11-23T18:42:34+0000",
            "author": "Yonik Seeley",
            "content": "I was coming from the POV of supporting a user/customer... i.e. \"turn on DEBUG for these loggers and give me back the output to look at.\"\nIt just didn't seem nice to have to change which loggers needed configuring just because some minor refactors had been done.\n\nAnyways, I can avoid touching the particular outer class-logger-used in-inner-class scenarios exemplified by TransactionLog\n\nActually, it just occurred to me that we don't have much choice in this case, as normal inner classes can't have static members.\n\nAnd even for static inner classes that could have their own logger, it doesn't seem great because the settings are apparently not inherited?\nhttp://it-demystified.blogspot.com/2014/01/log4j-logger-hierarchies-and-java.html ",
            "id": "comment-15022696"
        },
        {
            "date": "2015-11-23T18:51:17+0000",
            "author": "Mike Drob",
            "content": "As somebody that looks at customer logs for the majority of my interaction with Solr, I would want Loggers to correspond to file names every single time. So I would actually prefer that inner classes use the outer class loggers, since that makes the code in questions easiest to find. I know this conflicts minorly with the initial stated goal, but I think it's a reasonable exception to make. ",
            "id": "comment-15022725"
        },
        {
            "date": "2015-11-23T18:57:22+0000",
            "author": "Mark Miller",
            "content": "Inner classes are a whole different ballgame. I mean one logger per class file. ",
            "id": "comment-15022737"
        },
        {
            "date": "2015-11-23T19:00:00+0000",
            "author": "Mark Miller",
            "content": "since that makes the code in questions easiest to find\n\nStill, either I don't understand how inner classes log or that makes no sense to me.  ",
            "id": "comment-15022742"
        },
        {
            "date": "2015-11-23T19:05:06+0000",
            "author": "Mike Drob",
            "content": "I was imaging a hypothetical\n\n\nclass A {\n    static Logger logA = LoggerFactory.getLogger(A.class);\n    \n    static class B {\n        static Logger logB = LoggerFactory.getLogger(B.class);\n    }\n}\n\n\n\nIn that scenario, I would be in favor of removing logB, since there is no corresponding B.java to look for and I'd have to deduce that it is in A.java. Sometimes this is simple to figure out, sometimes not, most of the time an IDE could find it but bash and vim need some more magic. If this is an artifact of how I do development, then I'm not willing to make a big deal out of it, but I figured it's worth mentioning it once. ",
            "id": "comment-15022757"
        },
        {
            "date": "2015-11-23T19:05:48+0000",
            "author": "Anshum Gupta",
            "content": "From how I understand this discussion, I think Mike and Mark are exactly on the same page and I agree with it. Here's what I think: All 'files' should use a single logger i.e. Inner classes reuse the logger but other than that, every class should have it's own logger. It'd make pointing at the file w.r.t the log entry easier and more obvious.\n\nIn any case, I think let's move forward with the least invasive approach and get this resolved. We can always re-iterate in a manner that doesn't undo any of the work done here so users don't have a hard time understanding and adapting to the changes. ",
            "id": "comment-15022761"
        },
        {
            "date": "2015-11-23T19:23:34+0000",
            "author": "Mark Miller",
            "content": "In that scenario, I would be in favor of removing logB, since there is no corresponding B.java to look for and I'd have to deduce that it is in A.java.\n\nOutput of: \n\npackage.A$B blah blah log message\n\nmeans go to package, class A, inner class B. ",
            "id": "comment-15022800"
        },
        {
            "date": "2015-11-23T19:27:13+0000",
            "author": "Mark Miller",
            "content": "Anyway, beside multiple loggers per class file being annoying, controlling logging for them is kind of niche, special case ugliness, and I think even how the output for them is done depends on the logging impl and the formatter impl for that logging impl. \n\nDef not arguing for inner class loggers. ",
            "id": "comment-15022805"
        },
        {
            "date": "2015-11-25T15:08:20+0000",
            "author": "Jason Gerlowski",
            "content": "Ok, checking back in.\n\nAttached is my first attempt at this patch.  It applies to trunk as of the time of this comment (with a few minutes delta).  It has the following changes:\n\n1.) All loggers now use copy-paste safe \"MethodHandles\" style declaration.\n\n2.) I deleted loggers in classes where I found they weren't being used at all.  (Since I was switching many of them from public to private, I found I didn't want to add warnings about unused-fields, so I deleted them)\n\n3.) No loggers are shared outside of the Java file in which they were declared.  However, some outer class loggers are still used by inner classes.  It seemed like this was the consensus we came to on this.\n\nI'm happy to make any changes to (1), (2), or (3) above.  Hopefully I didn't misread the consensus here.\n\nOne last question- I was unsure of whether this change merited a note in CHANGES.txt.  It is mostly a reorganization, but it will change a few log messages.  This patch doesn't add a note to CHANGES.txt, but I'm happy to add one if it merits one.  I wasn't sure whether all changes make it into that file, or just ones that are of particular interest to end users. ",
            "id": "comment-15026905"
        },
        {
            "date": "2015-11-25T15:39:05+0000",
            "author": "Shawn Heisey",
            "content": "I think it definitely is worthy of mention in CHANGES.txt, if only for the sheer size of the patch.  It's probably worth mentioning in the \"upgrading from\" section as well as the issue list, with a paragraph similar to this:\n\n\n* Logger declarations in most source files have changed to code that\n  no longer needs to explicitly state the class name.  This fixes situations\n  where a logger for a different class was incorrectly used. See SOLR-8324\n  and its sub-issues for details.\n\n\n\nOn SOLR-8324, Uwe mentioned a way of doing the declaration without imports \u2013 fully qualified class names in the code.  I wonder if that's the way we should do this.  I have no strong opinion on the matter. ",
            "id": "comment-15026940"
        },
        {
            "date": "2015-11-25T17:38:28+0000",
            "author": "Jason Gerlowski",
            "content": "OK, ill add a note in CHANGES.Txt when I get back to a computer.\n\nI don't see a ton of value in getting rid of Logger imports, but I'm happy to add that if people want to see it added. ",
            "id": "comment-15027236"
        },
        {
            "date": "2015-11-25T22:26:39+0000",
            "author": "Jason Gerlowski",
            "content": "This patch includes a note in CHANGES.txt.  Shawn, I used your paragraph verbatim for the \"upgrading from\" section.  Well worded; thanks! ",
            "id": "comment-15027714"
        },
        {
            "date": "2015-11-25T23:34:12+0000",
            "author": "Anshum Gupta",
            "content": "Wow that's a good 400kb patch! I'd like to change the CHANGES.txt entry to say \"Standardize and fix logger creation and usage so that they are't shared across java class files\"\n or something. It's certainly would be good to call it out explicitly that we want to move forward with this as more or less the standard, so that no one needs to revisit this and fix it again.\n\n+1 from my end. If others are fine, I can commit this today/tomorrow so that it makes it to 5.4. ",
            "id": "comment-15027809"
        },
        {
            "date": "2015-11-26T12:32:01+0000",
            "author": "Jason Gerlowski",
            "content": "I've updated the BUG-FIXES list item in CHANGES.txt to line up more with Anshum's suggested text. ",
            "id": "comment-15028683"
        },
        {
            "date": "2015-11-26T20:03:41+0000",
            "author": "Shawn Heisey",
            "content": "The placement will be up to Anshum as he's said he'll commit it, but I would put this under either \"Other Changes\" or \"Optimizations\" rather than \"Bug Fixes\". I view it as more of an improvement than a fix. ",
            "id": "comment-15029224"
        },
        {
            "date": "2015-11-26T20:34:54+0000",
            "author": "Jason Gerlowski",
            "content": "OK, still getting used to the conventions here. Whatever you/he think makes sense is fine with me. ",
            "id": "comment-15029236"
        },
        {
            "date": "2015-11-27T00:21:06+0000",
            "author": "Anshum Gupta",
            "content": "Yes, I'll just run the tests now and commit. and yes, this is more of something that belongs to the \"other changes\" category. ",
            "id": "comment-15029327"
        },
        {
            "date": "2015-11-27T01:26:12+0000",
            "author": "Anshum Gupta",
            "content": "Hmm the patch applied cleanly but there were compilation errors which I discovered when I tried to run the tests. Most of those were because:\n\n\tExtended classes e.g. HdfsUpdateLog, CdcrTransactionLog was trying to reuse the logger from the parent class, which no longer is possible as the loggers are all private. I've added new loggers for that purpose.\n\tSolrCore.log was being used at multiple places e.g. in RequestHandlerBase. Unless there's something I'm completely missing here, it doesn't make sense to do that in line what Mike Drob mentioned about debugging through logs. I've changed that to use the file specific logger instead (even for abstract classes).\n\tPreAnalyzedUpdateProcessorFactory is where it's more interesting. There are 2 classes in there public PreAnalyzedUpdateProcessorFactory, and PreAnalyzedUpdateProcessor. The logger is required in PreAnalyzedUpdateProcessor but the file is named PreAnalyzedUpdateProcessorFactory which would mean that this issue still remains in this case here. We should just move this to another file, but I'll use another JIRA for that and not mix the 2 up.\n\n\n\nI'm almost done with fixing the compilation issues but will take some more time tonight before committing this. If there are any red flags that someone notices here, please raise your hand.  ",
            "id": "comment-15029335"
        },
        {
            "date": "2015-11-27T01:28:51+0000",
            "author": "Anshum Gupta",
            "content": "Patch with fixes mentioned in my last comment and updated to trunk. ",
            "id": "comment-15029336"
        },
        {
            "date": "2015-11-27T04:11:33+0000",
            "author": "Mike Drob",
            "content": "Yea, I was concerned that there would be some difficulty extracting loggers used in multiple places. I initially envisioned doing all the easy stuff in one JIRA and then taking care of the difficult stuff in separate child tasks as necessary. ",
            "id": "comment-15029441"
        },
        {
            "date": "2015-11-27T04:14:53+0000",
            "author": "Erick Erickson",
            "content": "CdcrTransactionLog is not in the 5x code line, so that'll be one \"interesting\" thing to reconcile.....\n\nFYI ",
            "id": "comment-15029443"
        },
        {
            "date": "2015-11-27T17:05:43+0000",
            "author": "Anshum Gupta",
            "content": "If you mean the svn merge, hopefully it'll take care of it.  ",
            "id": "comment-15030055"
        },
        {
            "date": "2015-11-27T17:21:10+0000",
            "author": "Anshum Gupta",
            "content": "I couldn't think of an easy way to split it out other than not doing this for the tests or certain parts of the code. I wanted to keep it easy but it's been a rabbit hole.\nI think it's a ton of volume but not really intrusive in terms of functional impact. What do you think? ",
            "id": "comment-15030073"
        },
        {
            "date": "2015-11-27T17:21:30+0000",
            "author": "Anshum Gupta",
            "content": "OpenCloseCoreStressTest is another file with multiple classes. I've declared multiple loggers in there but I think we should move away from the practice.\nPutting up a patch in a bit with the tests fixed as well. ",
            "id": "comment-15030074"
        },
        {
            "date": "2015-11-27T17:24:48+0000",
            "author": "Anshum Gupta",
            "content": "Updated patch, Running tests on this one. ",
            "id": "comment-15030076"
        },
        {
            "date": "2015-11-27T17:41:32+0000",
            "author": "Uwe Schindler",
            "content": "+1 LGTM ",
            "id": "comment-15030088"
        },
        {
            "date": "2015-11-27T17:46:16+0000",
            "author": "Jason Gerlowski",
            "content": "Looks good to me; thanks Anshum. ",
            "id": "comment-15030093"
        },
        {
            "date": "2015-11-27T17:50:25+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nI had an idea a minute ago how to prevent incorrectly declared loggers. In root's build.xml we have the source-patterns ant task (that greps on source files for \"violations\"). We could add a regular expression for finding \"bad loggers\" and fail \"ant validate\" because of that.\n\nWe can commit this afterwards, I can work on some regexes to detect this (some combinations of positive/negative patterns). ",
            "id": "comment-15030101"
        },
        {
            "date": "2015-11-27T18:50:36+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nI wrote a pattern detector, basically it does the following: If the java file contains \"org.slf4j.LoggerFactory\", it will look for some pattern matching 3 occurences of either \"private\", \"static\", \"final\", followed by \"LoggerFactory.getLogger(MethodHandles.lookup().lookupClass());\"\n\nWithout this patch, it reports 433 errors, when the patch posted here is applied it still detects some violations:\n\n\n[source-patterns] invalid logging pattern [not private static final, uses static class name]: solr/core/src/java/org/apache/solr/core/SolrEventListener.java\n[source-patterns] invalid logging pattern [not private static final, uses static class name]: solr/core/src/java/org/apache/solr/search/SolrCache.java\n[source-patterns] invalid logging pattern [not private static final, uses static class name]: solr/core/src/java/org/apache/solr/search/SurroundQParserPlugin.java\n[source-patterns] invalid logging pattern [not private static final, uses static class name]: solr/core/src/java/org/apache/solr/servlet/CheckLoggingConfiguration.java\n[source-patterns] invalid logging pattern [not private static final, uses static class name]: solr/core/src/java/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.java\n[source-patterns] invalid logging pattern [not private static final, uses static class name]: solr/core/src/java/org/apache/solr/update/processor/LogUpdateProcessorFactory.java\n[source-patterns] invalid logging pattern [not private static final, uses static class name]: solr/core/src/test/org/apache/solr/logging/TestLogWatcher.java\n\n\n\nMaybe these are false positives, but the pattern looks quite good, although it might not be able to correctly handle crazy Eclipse newline formatting. ",
            "id": "comment-15030152"
        },
        {
            "date": "2015-11-27T18:58:06+0000",
            "author": "Uwe Schindler",
            "content": "Small improvements in pattern, only scan *.java files.\n\nThe errors reported are now mainly because the logger is not private. ",
            "id": "comment-15030154"
        },
        {
            "date": "2015-11-27T19:03:29+0000",
            "author": "Erick Erickson",
            "content": "Just alerting you to this if you run into it. ",
            "id": "comment-15030157"
        },
        {
            "date": "2015-11-27T19:46:10+0000",
            "author": "Jason Gerlowski",
            "content": "I think having a source-patterns check is a good idea in general, but it might not be as useful as we hope.\n\nFor example, a number of the violations in Uwe's comment above are (arguably) false positives.\n\n1.) Several interfaces contain Logger declarations.  These declarations can't be private since interfaces can't contain private members.  These Loggers should probably be removed entirely.  I didn't do this in my initial patch because I was making an effort to be conservative about what I changed, but I really don't think there's a reason to keep them around.  This affects SolrEventListener, and SolrCache.\n\n2.) Some Java files contain two non-nested classes which share loggers.  For example:\n\n\n     //All code in file A.java\n\n     class A {\n          static final Logger log = ....;\n     }\n\n     class B {\n          static final Logger log = B.log;\n     }\n\n\n\nBecause the classes aren't nested, the logger can't be a private member.  The classes can be made to use separate loggers, but this would break Mike Drob's point that:\n\nAs somebody that looks at customer logs for the majority of my interaction with Solr, I would want Loggers to correspond to file names every single time.\n\nThis corner case affects SurroundQParserPlugin,  IgnoreCommitOptimizeUpdateProcessorFactory, and LogUpdateProcessorFactory.\n\n3.) Some of the Java files reported above are actually testing log4j configuration/setup.  Often, these tests declare Loggers in non-standard ways.  For example TestLogWatcher declares a Logger as a local variable in a test method.\n\n\nTo clarify my point a bit, I'm not saying that a we shouldn't have a source-analysis check for this.  But the fact that there are already corner cases/edge cases probably means this shouldn't be used as pass/fail criteria for ant validate.  And unfortunately it might mean that the check will be ignored more often than not (since it doesn't really have any \"teeth\"). ",
            "id": "comment-15030197"
        },
        {
            "date": "2015-11-27T20:10:58+0000",
            "author": "Anshum Gupta",
            "content": "Thanks Uwe! The only thing that's stopping me is, I have a trans atlantic flight, and more which might keep me offline for about 40 hours later today.\nI don't want to commit this and be gone so \n1. I can either commit it when I'm back online \n2. Someone else can commit this and take it from here\n\nP.S: The RequestLoggingTest is still failing and I'm not sure if that test makes sense any more or not. Gregory Chanan, seem like you'd have a better idea about that one. Thoughts? ",
            "id": "comment-15030208"
        },
        {
            "date": "2015-11-27T20:18:10+0000",
            "author": "Anshum Gupta",
            "content": "Jason Gerlowski About loggers in interfaces, with Java8, you could write a default implementation for a method as part of the interface declaration, thereby requiring the logger. I know this was brought up a while ago when we decided to move to Java 8 on trunk. ",
            "id": "comment-15030215"
        },
        {
            "date": "2015-11-27T20:58:40+0000",
            "author": "Jason Gerlowski",
            "content": "Makes sense, glad I didn't delete them then. That makes it a stronger case for not failing ant validate for these violations then. ",
            "id": "comment-15030233"
        },
        {
            "date": "2015-11-27T21:04:06+0000",
            "author": "Uwe Schindler",
            "content": "Hi for the other changes: All fixes are quite easy:\n1) maybe we should remove loggers from interfaces, without any static methods (in Java 7 there cannot be any), it makes no sense to have them. So put them into the impl class. In Lucene trunk we can use loggers, but as long as we parallel do maintain the 5.x branch we should as close as possible between source code.\n2) The non-nested classes are an anti-pattern from earlier Java 1.0 days. We should simply remove them (move the parallel class as static inner class into the main class). I did this several times whenever I saw them. Those constructs generally have the problem that it does not work with incremental compile (javac fails to compile incrementally when you change source files, because it cannot corelate the class files to source files). So we should fix them.\n3) The tests can get a fake logger or let's exclude them. There is also the CheckLoggingConfiguration in servlet package. This should be excluded from checks (which is quite easy to do).\n\nIf this is fixed we are fine. ",
            "id": "comment-15030236"
        },
        {
            "date": "2015-11-28T00:21:25+0000",
            "author": "Mark Miller",
            "content": "+1 to Uwe's validator and making the changes for it to pass. Awesome.  ",
            "id": "comment-15030323"
        },
        {
            "date": "2015-11-28T02:23:22+0000",
            "author": "Anshum Gupta",
            "content": "+1 to Uwe's validator and making those changes but here's my concern with 1. Once we move to Java 8; possibly in the next couple of releases. Once that happens, we might have developers wanting to write default implementation in interfaces and we'd have to fix this then anyways so I'm not sure if we want to remove that for now. ",
            "id": "comment-15030351"
        },
        {
            "date": "2015-11-28T23:06:08+0000",
            "author": "Jason Gerlowski",
            "content": "Upon slightly closer inspection, the two interfaces that contain loggers (SolrCache and SolrEventListener) aren't actually used anywhere.  So they could/should be deleted.\n\nWith that in mind, do we even want to allow interfaces to have loggers for now?  There's a solid rationale when we move to Java8, sure.  But I'd argue that until then, interface-loggers shouldn't be encouraged/allowed.  Changing the source-check to allow loggers in interfaces could be part of the move-to-Java8 effort (as long as we can make sure this doesn't get lost when the move actually happens...that's my main qualm). ",
            "id": "comment-15030688"
        },
        {
            "date": "2015-11-29T02:35:04+0000",
            "author": "Mark Miller",
            "content": "Indeed. We dont need to burn bridges that are not built yet. When we move to Java 8 and someone is dying to add a logger to an interface they can open an issue.  ",
            "id": "comment-15030773"
        },
        {
            "date": "2015-11-29T03:03:13+0000",
            "author": "Jason Gerlowski",
            "content": "Cool, If Anshum's fine w/ that plan, I'm happy to update the patch with that in mind (though the changes are pretty trivial).  But I'll refrain from making any changes until he's able to chime in. ",
            "id": "comment-15030778"
        },
        {
            "date": "2015-11-29T03:12:31+0000",
            "author": "Anshum Gupta",
            "content": "Sure, sounds good to me. It's reasonable and also helps us move forward at this point.\n\nI'm not going to be able to look at the patch for about 16-18 more hours from now but should be back online after that. Jet lagged but online.\nSo, I'll take a look at it then. ",
            "id": "comment-15030780"
        },
        {
            "date": "2015-11-29T14:24:55+0000",
            "author": "Jason Gerlowski",
            "content": "I've made the changes that Uwe suggested a few comments ago.\n\n1.) Interface loggers have been removed.\n\n2.) non-nested classes that required loggers to be non-private were changed to internal static classes.\n\n3.) Test classes that used non-private loggers have been massaged to comply with the source-pattern check (or in one case, excluded).\n\nAs Anshum pointed out in an earlier comment, RequestLoggingTest still seems to fail with this patch.  It's unclear to me how relevant this test still is. ",
            "id": "comment-15030964"
        },
        {
            "date": "2015-11-30T23:42:54+0000",
            "author": "Gregory Chanan",
            "content": "RequestLoggingTest is still relevant \u2013 it checks the output of specific loggers.  I don't quite understand why it doesn't work though \u2013 does the MethodHandles change the name of the logger? ",
            "id": "comment-15032731"
        },
        {
            "date": "2015-12-01T00:07:08+0000",
            "author": "Gregory Chanan",
            "content": "BTW changing the requestLog in SolrCore.java to:\n\n requestLog = LoggerFactory.getLogger(MethodHandles.lookup().lookupClass().getName()+ \".Request\");\n\ngets the test to pass for me. ",
            "id": "comment-15032760"
        },
        {
            "date": "2015-12-01T00:30:50+0000",
            "author": "Anshum Gupta",
            "content": "Thanks Greg and Jason.\n\nI'll take a look at this patch and commit this after the tests pass, along with Uwe's awesome validator  ",
            "id": "comment-15032798"
        },
        {
            "date": "2015-12-01T07:43:10+0000",
            "author": "Uwe Schindler",
            "content": "This is the correct fix. Class#toString() (which is used implicit by the string concat here), returns \"class oas.SolrCore\" including \"class \" prefix. This is a common programming error.\n\nBy the way, this declaration passes the checker, because there is already another valid logger declaration there. This may also be a workarund for other places: Just declare a correct logger in the same file and you are able to do other, incorrect logger declarations  ",
            "id": "comment-15033273"
        },
        {
            "date": "2015-12-01T07:51:11+0000",
            "author": "Uwe Schindler",
            "content": "I will try the patch later, but looks fine to me; small issues:\n\n\tthe changes entry is missing a space before the names\n\tthe excluded file in the ANT pattern in the checker should be maybe a bit more specific. The only backside with the exclusion here is that it omits all checks on this file, but that's acceptable. The CheckLoggingConfiguration class is not really containing much code...\n\n ",
            "id": "comment-15033277"
        },
        {
            "date": "2015-12-01T08:18:27+0000",
            "author": "Uwe Schindler",
            "content": "The attached patch no longer applies cleanly. You have to \"svn update\" to revision 1717026. Then it works and compiles, but updating then to trunk again leads to conflicts and compile errors. It looks like this patch has so many changes so it should be applied ASAP.\n\nGregory Chanan's fix for SolrCore should be applied, too. ",
            "id": "comment-15033319"
        },
        {
            "date": "2015-12-01T14:48:26+0000",
            "author": "Jason Gerlowski",
            "content": "I've updated the patch to sit on top of the latest trunk changes (as of maybe an hour or two ago).\n\nI also added the fix that Greg mentioned below.  With it, RequestLoggingTest passes now!\n\nI'm in the process of running the tests in the background, and I'll post again if/when I see them pass. ",
            "id": "comment-15033796"
        },
        {
            "date": "2015-12-01T15:41:26+0000",
            "author": "Jason Gerlowski",
            "content": "Tests passed for me, so I think this patch should be looking good. ",
            "id": "comment-15033892"
        },
        {
            "date": "2015-12-02T09:06:00+0000",
            "author": "Anshum Gupta",
            "content": "Patch with a few more fixes that I came across while running ant clean, test, validate, and precommit. The tests pass and all looks good. I'll commit this now.\n\nMight have to deal with branch_5x merge next. ",
            "id": "comment-15035503"
        },
        {
            "date": "2015-12-02T09:22:25+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1717590 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1717590 ]\n\nSOLR-8330: Standardize and fix logger creation and usage so that they aren't shared across source files. ",
            "id": "comment-15035524"
        },
        {
            "date": "2015-12-02T09:23:35+0000",
            "author": "Uwe Schindler",
            "content": "+1 Thanks! ",
            "id": "comment-15035526"
        },
        {
            "date": "2015-12-02T10:51:50+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1717604 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1717604 ]\n\nSOLR-8330: Standardize and fix logger creation and usage so that they aren't shared across source files.(merge from trunk) ",
            "id": "comment-15035630"
        },
        {
            "date": "2015-12-02T11:12:20+0000",
            "author": "Anshum Gupta",
            "content": "I've committed it to both trunk and 5x. I think we should also commit this to 5.4, any thoughts?\n\nThank you Jason, Uwe and everyone else !  ",
            "id": "comment-15035654"
        },
        {
            "date": "2015-12-02T12:34:23+0000",
            "author": "Jason Gerlowski",
            "content": "Thank you Anshum!\n\nI think it'd be nice to squeeze into 5.4.  Even though this is a big change from a LOC perspective, I think it's pretty safe, and is a net gain for log-readability.  It'd be nice to get out to people.  Though, as a partial author, I must admit a little bias :-p ",
            "id": "comment-15035726"
        },
        {
            "date": "2015-12-03T04:12:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1717707 from Anshum Gupta in branch 'dev/branches/lucene_solr_5_4'\n[ https://svn.apache.org/r1717707 ]\n\nSOLR-8330: Standardize and fix logger creation and usage so that they aren't shared across source files.(merge from branch_5x) ",
            "id": "comment-15037218"
        },
        {
            "date": "2015-12-03T04:34:02+0000",
            "author": "Anshum Gupta",
            "content": "It's now in 5.4. ",
            "id": "comment-15037236"
        },
        {
            "date": "2015-12-03T10:13:18+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The MethodHandles.lookup() creates an extra object for the Lookup inner class of MethodHandles [0]. \n\nIsn't it memory/gc wise expensive, esp. given that some of the shortlived, often created objects (like AtomicUpdateDocumentMerger, DistributedUpdateProcessor etc.), would be creating their own logger, thus implying many extra MethodHandles.Lookup objects for every request? Is that a significant problem, or am I over estimating the problem?\n\n[0] - http://grepcode.com/file/repository.grepcode.com/java/root/jdk/openjdk/7-b147/java/lang/invoke/MethodHandles.java#MethodHandles.lookup%28%29 ",
            "id": "comment-15037606"
        },
        {
            "date": "2015-12-03T10:22:29+0000",
            "author": "Uwe Schindler",
            "content": "The loggers are static, so created once. There is no per-request cost!\n\nIn addition, the Lookup objects are never created on heap, because they never escape the declaration, so they are optimized away by hotspot, see escape analysis. ",
            "id": "comment-15037614"
        },
        {
            "date": "2015-12-03T10:33:01+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Ah, I was missing the static part; indeed no per-request cost. Good to learn about the escape analysis; thanks! ",
            "id": "comment-15037625"
        },
        {
            "date": "2015-12-03T10:46:18+0000",
            "author": "Uwe Schindler",
            "content": "Good to learn about the escape analysis; thanks!\n\nThis is one of the most important Hotspot optimizations, especially for Java 8! Lambdas and the fluent stream API based on collections would be slow  without escape analysis. Fluent APIs like int evenSquareSum = Arrays.stream(intArray).filter(i -> i % 2 == 0).map(i -> i * i).sum(); make profit from that because those APIs return new instances of Stream subclasses all the time. Same applies for java.time API. Those never escape the method. ",
            "id": "comment-15037649"
        },
        {
            "date": "2015-12-10T00:41:36+0000",
            "author": "Mike Drob",
            "content": "This issue looks done - can we resolve it if there is no further work to do? ",
            "id": "comment-15049736"
        },
        {
            "date": "2016-01-15T14:44:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1724826 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1724826 ]\n\nSOLR-8330: fix log4j.properties to match new name of log update processor logger ",
            "id": "comment-15101848"
        },
        {
            "date": "2016-01-15T14:45:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1724827 from Yonik Seeley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1724827 ]\n\nSOLR-8330: fix log4j.properties to match new name of log update processor logger ",
            "id": "comment-15101850"
        }
    ]
}