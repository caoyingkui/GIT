{
    "id": "SOLR-1377",
    "title": "Force TokenizerFactory to create a Tokenizer rather then TokenStream",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The new token reuse classes require that they are created with a Tokenizer.  The solr TokenizerFactory interface currently makes a TokenStream.\n\nAlthough this is an API breaking change, the alternative is to just document that it needs to be a Tokenizer instance and throw an error when it is not.\n\nFor more discussion, see:\nhttp://www.lucidimagination.com/search/document/272b8c4e6198d887/trunk_classcastexception_with_basetokenizerfactory",
    "attachments": {
        "SOLR-1377-Tokenizer.patch": "https://issues.apache.org/jira/secure/attachment/12417304/SOLR-1377-Tokenizer.patch",
        "SOLR-1377.patch": "https://issues.apache.org/jira/secure/attachment/12417321/SOLR-1377.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12746156",
            "date": "2009-08-21T19:03:10+0000",
            "content": "Here is a patch that:\n\n1. Changes the TokenizerFactory to return a Tokenizer\n2. Updates all TokenizerFactory classes to explicitly return a Tokenizer\n3. Changes the PatternTokenizerFactory to return a Tokenizer\n4. adds a test that calls PatternTokenizer\n\n\n\t- -\n\n\n\nSince this is an API breaking change, I added this to the \"Upgrading from Solr 1.3\" section of CHANGES.txt:\n\nThe TokenizerFactory API has changed to explicitly return a Tokenizer rather then\na TokenStream (that may be or may not be a Tokenizer).  This change is required\nto take advantage of the Token reuse improvements in lucene 2.9.  For more \ninformation, see SOLR-1377. \n\n\nI'll wait for two +1 votes on this, since it does break back compatibility "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12746269",
            "date": "2009-08-21T22:03:46+0000",
            "content": "Uploading another patch based on yours that implements reuse (reset(Reader)) for the Tokenizers.\n\n+1 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12746287",
            "date": "2009-08-21T22:12:50+0000",
            "content": "Is reset gaurenteed to be called on the same Reader?  For the Pattern implementation, all the tokens are created beforehand and are just passed off with iter.next(), so if the input changes, the whole thing would need to change.\n\n+       public void reset(Reader input) throws IOException \n{\n+          super.reset(input);\n+          init();\n+       }\n\nAny reason not to implement reset on: TrieTokenizerFactory? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12746311",
            "date": "2009-08-21T22:40:47+0000",
            "content": "For the Pattern implementation, all the tokens are created beforehand and are just passed off with iter.next(), so if the input changes, the whole thing would need to change. \n\nAnd it does now... I moved the creation of the Token<List> to init() so it's recreated with every reset.\n\nAny reason not to implement reset on: TrieTokenizerFactory?\nTrieTokenizer (right below the factory) already implements reset(Reader). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12747012",
            "date": "2009-08-24T18:49:54+0000",
            "content": "Without objection... I will commit this soon.... "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775852",
            "date": "2009-11-10T15:52:13+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}