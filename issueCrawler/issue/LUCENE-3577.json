{
    "id": "LUCENE-3577",
    "title": "rename expungeDeletes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Similar to optimize(), expungeDeletes() has a misleading name.\n\nWe already had problems with this on the user list because TieredMergePolicy\ndidn't 'expunge' all their deletes.\n\nAlso I think expunge is the wrong word, because expunge makes it seem\nlike you just wrangle up the deletes and kick them out of the party and\nthat it should be fast.",
    "attachments": {
        "LUCENE-3577.patch": "https://issues.apache.org/jira/secure/attachment/12504080/LUCENE-3577.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-15T12:06:57+0000",
            "content": "Also I think this method could do with some javadocs cleanup:\nfrom the javadocs it is practically begging you to call it if you\never delete, but doesn't TieredMP already handle this well? ",
            "author": "Robert Muir",
            "id": "comment-13150418"
        },
        {
            "date": "2011-11-15T13:49:55+0000",
            "content": "+1.  The name does not indicate how horribly costly the operation is.\n\nAnd it leads to apps deleting/updating a few docs and then calling .expungeDeletes.\n\nWe could also remove the method entirely?  TieredMP already \"favors\" merges that reclaim more deletes (other things being equal), and you can change how strongly it does so (TMP.setReclaimDeletesWeight).\n\nIn practice expungeDeletes will usually be just like forceMerge(1) so for apps that must have no deletes (eg maybe they need docFreq to be 100% accurate), they can call forceMerge(1) instead. ",
            "author": "Michael McCandless",
            "id": "comment-13150489"
        },
        {
            "date": "2011-11-15T15:27:01+0000",
            "content": "In practice expungeDeletes will usually be just like forceMerge(1) so for apps that must have no deletes (eg maybe they need docFreq to be 100% accurate), they can call forceMerge(1) instead.\n\nIf there are just a few deletes in a few small segments, using optimize instead of expungeDeletes is much more expensive?\nAlthough, it doesn't really seem like an important use case (ensuring there are no deletes). ",
            "author": "Yonik Seeley",
            "id": "comment-13150552"
        },
        {
            "date": "2011-11-15T18:58:35+0000",
            "content": "If there are just a few deletes in a few small segments, using optimize instead of expungeDeletes is much more expensive?\n\nthat's what i was wondering ... \n\nmost incrementally updated indexes i've seen related to structured content (ie: products, news, blogs, patents, etc...) the \"recent\" documents are the only things likely to get updates (ie: a news story published in the past hour has a decent change of getting an update, a news story published yesterday might get a typo fixed, but a news story published a year ago isn't likely to ever get updated) so in a traditional merged segment structure the newer/smaller segments are the only ones that tend to have delets \u2013 the bigger older segments are mostly stagnant except when involved in merging.  An expungeDelets call that only touches the small \"recent\" segments is going to be a lot faster then a full optimize, correct?\n\nAlthough, it doesn't really seem like an important use case (ensuring there are no deletes).\n\nI'm constantly surprised by the number of people who are really picky about ensuring that their tf/idf numbers are exact because they use them in a weird way \u2013 it's definitely an expert level concern, but if those people are willing to spend the time expunging deletes and we already have the code, might as well leave it in right?\n\ni think this is really just a question of naming/documentation: the method doesn't sound as sexy as optimize, but if someone stumbles upon it and thinks \"oh wow, i guess i have to call this for my deletes to really be deleted\" that's bad.  likewise the javadocs encourage/imply that it this method should be called, instead of just explaining that it can be called and what it does.\n\nI don't have a good suggestion for the name, but the doc is really the issue...\n\n\n...When an index has many document deletions (or updates to existing documents), it's best to either call optimize or expungeDeletes to remove all unused data in the index associated with the deleted documents. To see how many deletions you have pending in your index, call IndexReader.numDeletedDocs() This saves disk space and memory usage while searching. ...\n\n...nothing in that description describes the downsides/cost of the method. ",
            "author": "Hoss Man",
            "id": "comment-13150675"
        },
        {
            "date": "2011-11-17T00:34:08+0000",
            "content": "How about forceMergeDeletes? ",
            "author": "Michael McCandless",
            "id": "comment-13151683"
        },
        {
            "date": "2011-11-17T00:55:31+0000",
            "content": "\nI'm constantly surprised by the number of people who are really picky about ensuring that their tf/idf numbers are exact because they use them in a weird way\n\nDo they know how we store normalization factors?  ",
            "author": "Robert Muir",
            "id": "comment-13151698"
        },
        {
            "date": "2011-11-17T17:20:25+0000",
            "content": "Patch w/ rote rename to forceMergeDeletes. ",
            "author": "Michael McCandless",
            "id": "comment-13152144"
        },
        {
            "date": "2011-11-27T12:29:32+0000",
            "content": "Bulk close after release of 3.5 ",
            "author": "Uwe Schindler",
            "id": "comment-13157793"
        }
    ]
}