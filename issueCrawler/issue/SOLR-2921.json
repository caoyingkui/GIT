{
    "id": "SOLR-2921",
    "title": "Make any Filters, Tokenizers and CharFilters implement MultiTermAwareComponent if they should",
    "details": {
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "SOLR-2438 creates a new MultiTermAwareComponent interface. This allows Solr to automatically assemble a \"multiterm\" analyzer that does the right thing vis-a-vis transforming the individual terms of a multi-term query at query time. Examples are: lower casing, folding accents, etc. Currently (27-Nov-2011), the following classes implement MultiTermAwareComponent:\n\n\n\tASCIIFoldingFilterFactory\n\tLowerCaseFilterFactory\n\tLowerCaseTokenizerFactory\n\tMappingCharFilterFactory\n\tPersianCharFilterFactory\n\n\n\nWhen users put any of the above in their query analyzer, Solr will \"do the right thing\" at query time and the perennial question users have, \"why didn't my wildcard query automatically lower-case (or accent fold or....) my terms?\" will be gone. Die question die!\n\nBut taking a quick look, for instance, at the various FilterFactories that exist, there are a number of possibilities that might be good candidates for implementing MultiTermAwareComponent. But I really don't understand the correct behavior here well enough to know whether these should implement the interface or not. And this doesn't include other CharFilters or Tokenizers.\n\nActually implementing the interface is often trivial, see the classes above for examples. Note that LowerCaseTokenizerFactory returns a Filter, which is the right thing in this case.\n\nHere is a quick cull of the Filters that, just from their names, might be candidates. If anyone wants to take any of them on, that would be great. If all you can do is provide test cases, I could probably do the code part, just let me know.\n\nArabicNormalizationFilterFactory\nGreekLowerCaseFilterFactory\nHindiNormalizationFilterFactory\nICUFoldingFilterFactory\nICUNormalizer2FilterFactory\nICUTransformFilterFactory\nIndicNormalizationFilterFactory\nISOLatin1AccentFilterFactory\nPersianNormalizationFilterFactory\nRussianLowerCaseFilterFactory\nTurkishLowerCaseFilterFactory",
    "attachments": {
        "SOLR-2921-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12519482/SOLR-2921-trunk.patch",
        "SOLR-2921_rest.patch": "https://issues.apache.org/jira/secure/attachment/12519503/SOLR-2921_rest.patch",
        "SOLR-2921-3x.patch": "https://issues.apache.org/jira/secure/attachment/12519246/SOLR-2921-3x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13159348",
            "date": "2011-11-29T16:36:30+0000",
            "content": "Hmmm, what about stemmers? Prefix only? "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13160278",
            "date": "2011-11-30T19:49:49+0000",
            "content": "No not stemmers.  Not synonyms, not shinglers or anything that might produce multiple tokens. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13160406",
            "date": "2011-11-30T22:30:32+0000",
            "content": "Not synonyms - agreed.\nNot shinglers - agreed.\nNot anything that might produce multiple tokens - agreed.\n\nStemmers... When do stemmers produce multiple tokens? My ignorance of all the possibilities knows no bounds. I was wondering if, in this case, stemmers really reduced to prefix queries. Maybe it's just a bad idea altogether, I guess it begs the question of what use adding stemmers to the mix would be. You want to match the root, just specify the root with an asterisk and be done with it. No need to introduce stemming into the MultiTermAwareComponent mix.\n\nBut this kind of question is exactly why I have this JIRA in place, we can collect reasons I wouldn't think of and record them. Before I mess something up with well-intentioned-but-wrong \"help\". "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13160416",
            "date": "2011-11-30T22:44:17+0000",
            "content": "\nI guess it begs the question of what use adding stemmers to the mix would be.\n\nI agree with Mike.\n\nMost stemmers are basically suffix-strippers and use heuristics like term length. They are not going to work with the syntax of various multitermqueries. no stemmer is going to stem dogs* to dog*. some might remove any non-alpha characters completely, and its not a bug that they do this. they are heuristical in nature and designed to work on natural language text... not syntax. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13160576",
            "date": "2011-12-01T02:06:54+0000",
            "content": "I spoke hastily, and it's true that stemmers are different from those other multi-token things.  It would be kind of nice if it were possible to have a query for \"do?s\" actually match the a document containing \"dogs\", even when matching against a stemmed field, but I don't see how to do it without breaking all kinds of other things.  Consider how messed up range queries would get.  [dogs TO *] would match doge, doggone,   and other words in [dog TO dogs] which would be totally counterintuitive. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13160593",
            "date": "2011-12-01T02:31:06+0000",
            "content": "well Erick i think the ones you listed here are ok.\n\nThere are cases where they won't work correctly, but trying to do\nmultitermqueries with mappingcharfilter and asciifolding\nfilter are already problematic (eg ? won't match \u0153 because \nits now 'oe').\n\nPersonally i think this is fine, but we should document\nthat things don't work correctly all the time, and we \nshould not make changes to analysis components to try \nto make them cope  with multiterm queries syntax or \nanything (this would be bad design, it turns them into \nqueryparsers).\n\nIf the user cares about the corner cases, then they just\nspecify the chain. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13160612",
            "date": "2011-12-01T03:08:36+0000",
            "content": "Mike:\n\nstemmers - not going to make them MultiTermAware. No way. No how. Not on my watch, one succinct example and I'm convinced.\n\nThe beauty of the way Yonik and Robert directed this is that we can take care of the 80% case, not provide things that are that surprising and still have all the flexibility available to those who really need it. As Robert says, if they really want some \"interesting\" behavior, they can specify the complete chain.\n\nRobert:\n\nI guess I'm at a loss as to how to write tests for the various filters and tokenizers I listed, which is why I'm reluctant to just make them MultTermAwareComponents. Do you have any suggestions as to how I could get tests? I had enough surprises when I ran the tests in English that I'm reluctant to just plow ahead. As far as I understand, Arabic is caseless for instance.\n\nI totally agree with your point that making the analysis components cope with syntax is evil. Not going there either.\n\nMaybe the right action is to wait for someone to volunteer to be the guinea pig for the various filters, I suppose we could advertise for volunteers... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13234284",
            "date": "2012-03-21T11:19:43+0000",
            "content": "There is some desire (and suggestions) to do some more of these for 3.6, so re-labeling "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13234343",
            "date": "2012-03-21T13:22:23+0000",
            "content": "\nI guess I'm at a loss as to how to write tests for the various filters and tokenizers I listed, which is why I'm reluctant to just make them MultTermAwareComponents.\n\nWell, none of them are going to work perfectly with wildcards etc anyway, and we already have:\n\n\ttests that these filters do what they should\n\ttests that this MultiTerm stuff works\n\n\n\nLooking at your 'quick cull' list i think these will 'generally work'. Sure I could list corner cases for maybe\nhalf of them right off the top of my head, but we already know its not going to work perfectly. These aren't bugs\nin the filters if they don't work 100% right when given query syntax instead of text, and its not bugs if they\nhave context-sensitive rules which won't work the way people expect with patterns.\n\nSo I don't think we need tests that show their half-way broken behavior? This is sort of a best-effort thing anyway. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13234429",
            "date": "2012-03-21T15:33:45+0000",
            "content": "Here's a first cut at these. The tests in TestFoldingMultitermExtrasQuery are especially weak, any help here would be extremely welcome....\n\nBasically, I stole the patterns from the associated filters and removed the ones that failed for reasons I didn't understand. And I haven't checked the remaining all that carefully, I have some stuff coming up for most of the rest of today and wanted to get the first cut out in front of people.\n\nThe attached patch applies against 3x, I'll need to tweak it for trunk but won't bother until after we finalize this.\n\nI also haven't run the full test suite, so this patch should NOT be committed yet.\n\nI'm not even going to try the following, I don't even know what to expect as proper results. If nobody steps up I'll split these out into another JIRA and hopefully someone with the appropriate knowledge (and keyboard) can volunteer:\n   ArabicNormalizationFilterFactory\n   HindiNormalizationFilterFactory\n   IndicNormalizationFilterFactory\n   PersianNormalizationFilterFactory\n   ICUTransformFilterFactory   "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13234434",
            "date": "2012-03-21T15:39:50+0000",
            "content": "\nI'm not even going to try the following, I don't even know what to expect as proper results. If nobody steps up I'll split these out into another JIRA and hopefully someone with the appropriate knowledge (and keyboard) can volunteer:\n\nJust make progress with your patch and keep this issue open. I'll help with these.\n\nAs far as the existing patch, i think the multitermtest for ICU will not work (because the support is in a contrib module: analysis-extras).\nIf we want a test for that stuff i think it needs to sit under that contrib. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13234571",
            "date": "2012-03-21T17:40:38+0000",
            "content": "Hey, man, it worked from inside IntelliJ. I thought getting to the schema in core from analysis-extras (where TestFoldingMultitermExtrasQuery lives) was funky. I'll have a patch up for that shortly. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13234847",
            "date": "2012-03-21T18:47:40+0000",
            "content": "Fixes test cases in analysis-extras so it runs from the command line not only in IntelliJ. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13234855",
            "date": "2012-03-21T18:51:59+0000",
            "content": "Patch looks good: i think you should commit it and I'll follow up with the other ones.\n\nonly one nitpick:\n\n-/** \n+/**\n  * Factory for {@link TurkishLowerCaseFilter}.\n  * <pre class=\"prettyprint\" >\n  * &lt;fieldType name=\"text_trlwr\" class=\"solr.TextField\" positionIncrementGap=\"100\"&gt;\n- *   &lt;analyzer&gt;\n- *     &lt;tokenizer class=\"solr.StandardTokenizerFactory\"/&gt;\n- *     &lt;filter class=\"solr.TurkishLowerCaseFilterFactory\"/&gt;\n- *   &lt;/analyzer&gt;\n- * &lt;/fieldType&gt;</pre> \n+ * &lt;analyzer&gt;\n+ * &lt;tokenizer class=\"solr.StandardTokenizerFactory\"/&gt;\n+ * &lt;filter class=\"solr.TurkishLowerCaseFilterFactory\"/&gt;\n+ * &lt;/analyzer&gt;\n+ * &lt;/fieldType&gt;</pre>\n+ *\n\n\n\nDid your IDE do this? I don't think we should lose the indentation of the example there. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13235819",
            "date": "2012-03-22T18:05:04+0000",
            "content": "3x r:    1303937\nTrunk r: 1303939 "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13235820",
            "date": "2012-03-22T18:05:37+0000",
            "content": "Let's open up any further issues in a new JIRA? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13236021",
            "date": "2012-03-22T20:54:23+0000",
            "content": "erick, here's a patch for the rest. I'll commit it shortly. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13236109",
            "date": "2012-03-22T22:21:56+0000",
            "content": "Cool! Thanks! "
        }
    ]
}