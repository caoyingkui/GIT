{
    "id": "SOLR-6736",
    "title": "A collections-like request handler to manage solr configurations on zookeeper",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.6",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Managing Solr configuration files on zookeeper becomes cumbersome while using solr in cloud mode, especially while trying out changes in the configurations. \n\nIt will be great if there is a request handler that can provide an API to manage the configurations similar to the collections handler that would allow actions like uploading new configurations, linking them to a collection, deleting configurations, etc.\n\nexample : \n\n\n#use the following command to upload a new configset called mynewconf. This will fail if there is alredy a conf called 'mynewconf'. The file could be a jar , zip or a tar file which contains all the files for the this conf.\ncurl -X POST -H 'Content-Type: application/octet-stream' --data-binary @testconf.zip http://localhost:8983/solr/admin/configs/mynewconf?sig=<the-signature>\n\n\nA GET to http://localhost:8983/solr/admin/configs will give a list of configs available\nA GET to http://localhost:8983/solr/admin/configs/mynewconf would give the list of files in mynewconf",
    "attachments": {
        "SOLR-6736.patch": "https://issues.apache.org/jira/secure/attachment/12697225/SOLR-6736.patch",
        "test_private.pem": "https://issues.apache.org/jira/secure/attachment/12741062/test_private.pem",
        "zkconfighandler.zip": "https://issues.apache.org/jira/secure/attachment/12708096/zkconfighandler.zip",
        "SOLR-6736.doc.patch": "https://issues.apache.org/jira/secure/attachment/12869915/SOLR-6736.doc.patch",
        "test_pub.der": "https://issues.apache.org/jira/secure/attachment/12741063/test_pub.der",
        "SOLR-6736-newapi.patch": "https://issues.apache.org/jira/secure/attachment/12768656/SOLR-6736-newapi.patch",
        "newzkconf.zip": "https://issues.apache.org/jira/secure/attachment/12741061/newzkconf.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-05T21:34:23+0000",
            "author": "Anshum Gupta",
            "content": "Something like this:\n\ncurl -X POST -H 'Content-Type: application/octet-stream' --data-binary @testconf.gz http://localhost:8983/solr/admin/configs?action=ADD\n\nThe conf could be zip/gz/jar. ",
            "id": "comment-14308036"
        },
        {
            "date": "2015-02-06T05:35:31+0000",
            "author": "Varun Rajput",
            "content": "Yes, I have something similar in mind and will upload a patch soon. ",
            "id": "comment-14308656"
        },
        {
            "date": "2015-02-06T07:59:18+0000",
            "author": "Noble Paul",
            "content": "why action=ADD \n\nPOST can implicitly mean add .  ",
            "id": "comment-14308805"
        },
        {
            "date": "2015-02-07T05:07:24+0000",
            "author": "Varun Rajput",
            "content": "I have a piece of code which we use at Ask.com and have the approval to contribute. Currently it only uploads files/folder present on the box where the API call is made on, allows linking of collections and clearing them from zookeeper. I have attached the patch, it will be great to get some suggestions and contributions on this. ",
            "id": "comment-14310559"
        },
        {
            "date": "2015-02-09T09:22:35+0000",
            "author": "Anshum Gupta",
            "content": "Sure, makes sense. ",
            "id": "comment-14311966"
        },
        {
            "date": "2015-02-09T09:25:18+0000",
            "author": "Noble Paul",
            "content": "Varun Rajput I have updated the syntax+semantics of this API. Please update your patch to reflect the description  ",
            "id": "comment-14311973"
        },
        {
            "date": "2015-02-09T09:29:56+0000",
            "author": "Anshum Gupta",
            "content": "A DELETE to remove the config too? Also, what I'm looking at here is supporting gz/zip/jar uploads. ",
            "id": "comment-14311983"
        },
        {
            "date": "2015-02-09T18:44:28+0000",
            "author": "Varun Rajput",
            "content": "Thanks for the feedback, I will get to this later today ",
            "id": "comment-14312606"
        },
        {
            "date": "2015-02-09T18:59:56+0000",
            "author": "Noble Paul",
            "content": "DELETE can wait, may be. That is something we can add later if required ",
            "id": "comment-14312640"
        },
        {
            "date": "2015-02-11T06:27:07+0000",
            "author": "Varun Rajput",
            "content": "Hey Noble Paul and Anshum Gupta, I was able to get all the suggestions incorporated into the handler and have attached another patch. With the changes, we can do the following:\n\n1. POST a zipped file consisting of solr configuration files/folders\nExample:\ncurl -X POST -H 'Content-Type: application/octet-stream' --data-binary @compressed.zip \"http://localhost:8983/solr/admin/zkconfig?action=postconfig&postconfig.name=testconfig\"\n\n2. POST a single file into a configuration\nExample:\ncurl -X POST -H 'Content-Type: text/plain' --data-binary @testfile.txt \"http://localhost:8983/solr/admin/zkconfig?action=postfile&postfile.configname=testconfig&postfile.filename=testfile.txt\"\n\n3. Link an existing configuration in zookeeper to an existing collection\nExample:\nhttp://localhost:8983/solr/admin/zkconfig?action=linkconfig&linkconfig.name=testconfig&linkconfig.collection=testcollection\n\n4. Delete a configuration from zookeeper\nExample:\nhttp://localhost:8983/solr/admin/zkconfig?action=delete&delete.configname=testconfig\n\n5. Delete a file/folder from a configuration in zookeeper\nExample:\nhttp://localhost:8983/solr/admin/zkconfig?action=delete&delete.configname=testconfig&delete.path=lang/stopwords.txt ",
            "id": "comment-14315648"
        },
        {
            "date": "2015-02-11T19:29:01+0000",
            "author": "Noble Paul",
            "content": "Varun Rajput The syntax followed by your patch is not as specified in the description. I see no reason to deviate from the plan. The syntax is as important as the functionality.  BlobHandler.java implements a similar API   ",
            "id": "comment-14316831"
        },
        {
            "date": "2015-02-11T20:43:12+0000",
            "author": "Mark Miller",
            "content": "How does this address the security concerns raised in the issue Erick Erickson was working on to allow uploading config from the UI? ",
            "id": "comment-14316943"
        },
        {
            "date": "2015-02-11T20:50:11+0000",
            "author": "Erick Erickson",
            "content": "A bit of clarification, I'm not really actively working on that, assuming it'll all be superseded by the managed stuff, that's assigned to me to keep from losing track of it.\n\nBut this is a very interesting point. The objection to being able to upload arbitrary XML from a client is a security vulnerability as per Uwe's comments here: https://issues.apache.org/jira/browse/SOLR-5287 (about half way down, dated 30-Nov-2013). It's not clear to me that this capability is similar, although I rather assume it is. Sorry for not bringing this up earlier.\n\nWe need to be sure of this before committing..... ",
            "id": "comment-14316958"
        },
        {
            "date": "2015-02-11T20:59:15+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for brining it up Mark and Erick. Here are a few things:\n\n\tThis would not allow linking of configs to collections and only upload/replacing/deleting (may be) of configsets.\n\tUploading a configset shouldn't be an issue unless a configset is actually used.\n\tThe configs API allows, or at least is moving on the lines of being able to update the config via API.\n\tThis issue doesn't involve exposing anything via the Admin UI.\n\n\n\nI may be missing out on something but so far, I think this is on similar lines as the config/blob storage API. ",
            "id": "comment-14316969"
        },
        {
            "date": "2015-02-12T00:04:05+0000",
            "author": "Mark Miller",
            "content": "I think this is on similar lines as the config/blob storage API.\n\nMaybe that's a security issue too \n\nCertainly this issue appears to be. ",
            "id": "comment-14317242"
        },
        {
            "date": "2015-02-12T00:05:44+0000",
            "author": "Mark Miller",
            "content": "Hey Uwe Schindler - could we get your expert advice on this patch? ",
            "id": "comment-14317246"
        },
        {
            "date": "2015-02-12T00:41:13+0000",
            "author": "Anshum Gupta",
            "content": "Sure, it's be good to know if this is actually a potential security issue. Also, I'm not really talking about this patch in particular but the issue and what it's trying to solve. ",
            "id": "comment-14317277"
        },
        {
            "date": "2015-02-12T07:28:10+0000",
            "author": "Noble Paul",
            "content": "I think this is on similar lines as the config/blob storage API.\n\nThat comment was about the syntax , not the functionality\n\nMaybe that's a security issue too \nI'm not sure why this is any more insecure than uploading stuff from ZkCli?\n\nI would say , we should just limit the scope of this to adding a whole config and not\n\n\tindividual files\n\tor linking a collection to another config set.\n\n\n\nIf you want those let us open another ticket . Dealing with too many moving parts is hard to track ",
            "id": "comment-14317743"
        },
        {
            "date": "2015-02-12T17:12:18+0000",
            "author": "Varun Rajput",
            "content": "Thanks for clarifying that Noble Paul. This handler mimicks the functionality provided by ZkCli with the advantage of it being packaged as a handler.\n\nI can go ahead and modify the syntax/semantics described by Noble and remove the ability to upload individual files and linking collections once everyone is in agreement. ",
            "id": "comment-14318568"
        },
        {
            "date": "2015-02-12T17:22:59+0000",
            "author": "Noble Paul",
            "content": "Varun Rajput\nWe DON'T want to mimic ZkCli. We want to do better. There are various security implications we need to consider before we provide our API. \n\nI wish to keep this ticket simple. \n\n-1 for expanding the scope. \nI'm all for separate tickets if that is the case ",
            "id": "comment-14318578"
        },
        {
            "date": "2015-02-12T19:34:42+0000",
            "author": "Varun Rajput",
            "content": "Hey Noble Paul, I meant to say the ability to upload configurations and not the implementation of ZkCli specifically. Doing better IS the aim in this ticket and I will try to address the security concerns if possible with your suggestions and input.\n\nI am not asking for expanding the scope and am in agreement with you on keeping this ticket simple. \n ",
            "id": "comment-14318834"
        },
        {
            "date": "2015-02-14T18:22:13+0000",
            "author": "Mark Miller",
            "content": "ZkCli is a command line tool. This is over http. A client has to be able to access Solr - it generally does this over http.\n\nIf I sent an xslt file to the config directory without command line access and trigger code, then perhaps I can get command line access. This is a problem. ",
            "id": "comment-14321616"
        },
        {
            "date": "2015-02-15T03:51:35+0000",
            "author": "Noble Paul",
            "content": "f I sent an xslt file to the config directory without command line access and trigger code\n\nWe are not planning to edit existing config set. This command will create new configsets . So if you create a new collection , you can use that.\n\nIf I sent an xslt file to the config directory without command line access and trigger code, then perhaps I can get command line access. This is a problem.\n\nI didn't quite understand this .How does an xslt file get command line access? ",
            "id": "comment-14321800"
        },
        {
            "date": "2015-02-15T13:19:54+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "How does an xslt file get command line access?\n\nYou should read through the comments on SOLR-5287 where the ability to edit configuration files was reverted because of security concerns. ",
            "id": "comment-14321983"
        },
        {
            "date": "2015-02-23T17:56:08+0000",
            "author": "Noble Paul",
            "content": "We probably should use SOLR-7126 mechanism to sign the content before uploading it to ZK.  ",
            "id": "comment-14333574"
        },
        {
            "date": "2015-02-25T17:17:15+0000",
            "author": "Varun Rajput",
            "content": "That's a great suggestion, I will work on updating the patch to use this mechanism later today. ",
            "id": "comment-14336777"
        },
        {
            "date": "2015-02-25T19:39:50+0000",
            "author": "Noble Paul",
            "content": "Hold your horses.Wait for SOLR-7126 to be committed ",
            "id": "comment-14337056"
        },
        {
            "date": "2015-03-09T19:34:21+0000",
            "author": "Noble Paul",
            "content": "SOLR-7126 is committed ",
            "id": "comment-14353451"
        },
        {
            "date": "2015-03-11T04:25:44+0000",
            "author": "Varun Rajput",
            "content": "Great! I will work on making use of it, thanks! ",
            "id": "comment-14356268"
        },
        {
            "date": "2015-03-11T07:21:16+0000",
            "author": "Noble Paul",
            "content": "Please keep in mind that you MUST have atleast public key under /keys/conf for the call to succeed. There should not be any option to do it without  authentication  ",
            "id": "comment-14356425"
        },
        {
            "date": "2015-03-11T10:44:24+0000",
            "author": "Shai Erera",
            "content": "On the REST API side, can we make it more REST-like? For example, instead of carrying an action parameter, we could embed that in the URL, e.g. /admin/zkconfig/config or /admin/zkconfig/file. Then the requests would look like:\n\n1. POST a zipped file consisting of solr configuration files/folders\nExample:\ncurl -X POST -H 'Content-Type: application/octet-stream' --data-binary @compressed.zip \"http://localhost:8983/solr/admin/zkconfig/config?config.name=testconfig\"\n\n2. POST a single file into a configuration\nExample:\ncurl -X POST -H 'Content-Type: text/plain' --data-binary @testfile.txt \"http://localhost:8983/solr/admin/zkconfig/file/testconfig?filename=testfile.txt\"\n\n3. Link an existing configuration in zookeeper to an existing collection\nExample:\ncurl -X PUT http://localhost:8983/solr/admin/zkconfig/link/testcollection/testconfig\nHere we could have few variants, e.g. ending w/ /zkconfig/link and taking the collection and configuration name as parameters, or only one of them.\n\n4. Delete a configuration from zookeeper\nExample:\ncurl -X DELETE http://localhost:8983/solr/admin/zkconfig/config/testconfig\n\n5. Delete a file/folder from a configuration in zookeeper\nExample:\ncurl -X DELETE http://localhost:8983/solr/admin/zkconfig/file/testconfig?filename=lang/stopwords.txt\n\nWhat I am after is for consistency between PUT/POST/GET/DELETE commands such that if you handle a file configuration, the request looks the same (or as much as possible) between the different commands, and we let REST determine the action we should carry. For instance, deleting a file or adding a file should take, IMO, the same parameters (and not 'path' when deleting and 'filename' when posting), and we let the PUT/POST/DELETE/GET determine what should we do with the request.\n\nMy 2 cents. ",
            "id": "comment-14356702"
        },
        {
            "date": "2015-03-11T12:32:18+0000",
            "author": "Noble Paul",
            "content": "Shai Erera it is already made rest like if you look at the description. I'm tempted to just restrict this to support just upload of a configset because we have not yet assessed the security implications of these and the implications of changing config of a running collection.  ",
            "id": "comment-14356816"
        },
        {
            "date": "2015-03-11T13:07:19+0000",
            "author": "Shai Erera",
            "content": "Oh OK, I was referring to the comment with all those 5 examples, didn't notice the description includes different examples. If that's the case, that's much better!  ",
            "id": "comment-14356842"
        },
        {
            "date": "2015-03-17T08:37:43+0000",
            "author": "Varun Rajput",
            "content": "Hey guys,\n\nI have an initial patch with the changes to make use of SOLR-7126 as suggested by Noble Paul for signing the config set to be uploaded to zookeeper, without which the upload will be rejected. The API is also updated to reflect the syntax in the description and the scope narrowed to just push a config set as discussed.\n\nPlease review this and give me your feedback. I am yet to add test cases in this patch, so pointers to existing ones for similar scenarios will be great.\n\nThanks,\nVarun ",
            "id": "comment-14364767"
        },
        {
            "date": "2015-03-17T15:30:43+0000",
            "author": "Noble Paul",
            "content": "do you really need to get direct access to httprequest. It is totally avoidable\n\n\n HttpServletRequest httpServletRequest = (HttpServletRequest) req\n            .getContext().get(\"httpRequest\");\n        if (httpServletRequest == null) {\n          rsp.add(\"error\", \"No HttpServletRequest found. Set the \\\"addHttpRequestToContext\\\" attribute\"\n                  + \"in the \\\"requestParsers\\\" to true in the solrconfig.xml\");\n          return;\n\n\n\nwhy does a CoreContainer level handler need a core? It is asking for a NullPointerException\n\n\nCoreContainer coreContainer = req.getCore().getCoreDescriptor()\n        .getCoreContainer();\n\n ",
            "id": "comment-14365322"
        },
        {
            "date": "2015-03-18T07:29:05+0000",
            "author": "Varun Rajput",
            "content": "Thanks for the feedback Noble Paul. I have updated the patch to use the content streams provided by the request as used in the BlobHandler. Also, I noticed that the AdminHandler is deprecated, so, while addressing the NullPointerException in getting the core, I have also included this handler in the CoreContainer and made changes to NodeConfig to similarly reflect the usage of the CollectionsHandler. ",
            "id": "comment-14366773"
        },
        {
            "date": "2015-03-24T18:24:22+0000",
            "author": "Noble Paul",
            "content": "There is no testcase yet ",
            "id": "comment-14378322"
        },
        {
            "date": "2015-03-30T06:30:47+0000",
            "author": "Varun Rajput",
            "content": "Hi Noble Paul, I've written up tests for most part but I am facing an issue. Attached is the patch and a zip whose contents should be in the \"zkconfighandler\" folder under test-files. Maybe you can help me out in this:\n\nIn the last part of the test, I am able to test the authenticity of the signed zip but cannot verify the upload of files within the zip. With some debug, I noticed I couldnt reach within the zipentry loop while reading the content stream.\n\nAlso, I had to use \"name\" param for the config because when I try using it in the path, the solr dispatch filter throws an exception saying not found.\n\nAny help will be great, thanks! ",
            "id": "comment-14386274"
        },
        {
            "date": "2015-03-31T13:52:35+0000",
            "author": "Shai Erera",
            "content": "I'm tempted to just restrict this to support just upload of a configset because we have not yet assessed the security implications of these and the implications of changing config of a running collection\n\nNoble Paul, I've read the discussion on SOLR-5287 and was wondering if you can explain why limiting this API to only uploading a configset addresses any of the security vulnerabilities? The configset may include anything that I want, including XSLT files which may be able to hamper the system, correct?\n\nIs it only because we cannot associate a configset with a collection when we issue a /collections?action=CREATE command that you consider it safe? I.e. the configset will exist in ZK, but not really used? If so, why enabling this at all? ",
            "id": "comment-14388548"
        },
        {
            "date": "2015-03-31T15:39:24+0000",
            "author": "Noble Paul",
            "content": "This does more. It is done securely.  ",
            "id": "comment-14388723"
        },
        {
            "date": "2015-03-31T15:45:09+0000",
            "author": "Anshum Gupta",
            "content": "I think it would make sense to hold this until SOLR-7274 and SOLR-7275 (more importantly) get committed. I'm working on security in solr and I think I should be done with it in time for 5.2. ",
            "id": "comment-14388727"
        },
        {
            "date": "2015-06-19T22:44:46+0000",
            "author": "Varun Rajput",
            "content": "Hey Guys,\nI've been trying to work through the issue I am facing and am kind of stuck. When I stream a text or xml file, I am able to get the file and read it's contents from the request's content stream but the same is not working out for zip files. Am I doing it wrong if I am doing it like this:\n\nfor (ContentStream contentStream : req.getContentStreams()) {\nInputStream inputStream = contentStream.getStream();\nZipInputStream zis = new ZipInputStream(inputStream, StandardCharsets.UTF_8);\n...\nbreak;\n}\n\n\nIs there an issue or a different way to deal with Archived file formats? ",
            "id": "comment-14594056"
        },
        {
            "date": "2015-06-20T03:29:19+0000",
            "author": "Noble Paul",
            "content": "The blobhandler does exactly the same. However, you just post the patch in whatever gotten you have I shall try to debug ",
            "id": "comment-14594348"
        },
        {
            "date": "2015-06-20T07:20:03+0000",
            "author": "Varun Rajput",
            "content": "Hey Noble Paul, I even tried doing it the way BlobHandler does it by using the SimplePostTool to get the ByteBuffer and use that to create the ZipInputStream but that doesn't work either. \n\nI am attaching the patch containing the test case where all of the tests are working fine including the authentication using the keys except for the last 2 assertions which check for presence of files which should have been received from the zip being streamed. Also attached is a zip file whose contents should be put in \"solr/core/src/test-files/zkconfighandler\" folder.\n\nThanks in advance for your help! ",
            "id": "comment-14594451"
        },
        {
            "date": "2015-06-22T06:59:18+0000",
            "author": "Noble Paul",
            "content": "\njava.lang.RuntimeException: Cannot find resource in classpath or in file-system (relative to CWD): zkconfighandler/test_pub.der\n\tat __randomizedtesting.SeedInfo.seed([9C0000C0E86607B4:14543F1A469A6A4C]:0)\n\tat org.apache.solr.SolrTestCaseJ4.getFile(SolrTestCaseJ4.java:1763)\n\tat org.apache.solr.handler.admin.ZkConfigHandlerTest.readFile(ZkConfigHandlerTest.java:260)\n\tat org.apache.solr.handler.admin.ZkConfigHandlerTest.setupKeysInZk(ZkConfigHandlerTest.java:221)\n\tat org.apache.solr.handler.admin.ZkConfigHandlerTest.test(ZkConfigHandlerTest.java:59)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\n\n\nwhere is the .DER file? .pem file does not work for java ",
            "id": "comment-14595440"
        },
        {
            "date": "2015-06-22T16:11:38+0000",
            "author": "Varun Rajput",
            "content": "Hi Noble Paul, \n\nThe three files, [ newzkconf.zip, test_private.pem, test_pub.der ] are zipped into the zkconfighandler.zip which I had attached in my last comment. We need to create a folder \"zkconfighandler\" under the test-files directory and put these files under that location (solr/core/src/test-files/zkconfighandler).\n\nI am attaching each of those 3 files individually here as well. ",
            "id": "comment-14596135"
        },
        {
            "date": "2015-06-23T08:23:49+0000",
            "author": "Noble Paul",
            "content": "We need a change of plan right now.\n\nThe problem I see is that this handler is enabled by default right now. That means anyone who starts a cluster now will have this feature enabled. I propose a combination of a system property and the new authentication system for security\n\n1) A node must be started with -Denable.zk.write.handler=true for it to enable this handler\n2) The default security model will kick in automatically if security is enabled . So, we may not need to sign the payload\n ",
            "id": "comment-14597334"
        },
        {
            "date": "2015-06-23T17:23:09+0000",
            "author": "Anshum Gupta",
            "content": "I propose a combination of a system property and the new authentication system for security\n+1 on System property. The choice of using the authentication mechanism should be optional though. We need to make sure of the following:\n\n\tDisable this handler by default.\n\tEnabling this should be a bootstrap/system prop instead of an API call, else it's not secure enough.\nThe above approach seems in synch with both of those.\n\n\n\n-Denable.zk.write.handler=true\nSomething like a zk.(remote)upload sounds better in my opinion. ",
            "id": "comment-14597994"
        },
        {
            "date": "2015-06-23T17:23:51+0000",
            "author": "Varun Rajput",
            "content": "That's a good point, I agree. So, assuming I understood this correctly, I have made the changes to enable the handler only if the system property is set and removed the signature check assuming the default security model with do the job.\n\nAfter making the above changes, I verified that all the tests work fine. I was able to verify the presence of files from the zip in zookeeper as well as verify their actual content. I am attaching the patch here again with the changes.\n\nThe \"solr/core/src/test-files/zkconfighandler\" folder should now contain the newzkconf.zip (attached previously) and the two xml files (present in the patch).\n\nThanks for your feedback and help! ",
            "id": "comment-14597998"
        },
        {
            "date": "2015-06-23T17:29:17+0000",
            "author": "Varun Rajput",
            "content": "If we go with the name of the handler, I would say we use \n\n enable.zk.config.handler \n ",
            "id": "comment-14598004"
        },
        {
            "date": "2015-07-01T19:10:33+0000",
            "author": "Varun Rajput",
            "content": "Hey Anshum Gupta and Noble Paul, are we waiting on anything more? I see the ticket was updated by Anshum, what are the next steps? ",
            "id": "comment-14610838"
        },
        {
            "date": "2015-07-03T05:21:06+0000",
            "author": "Noble Paul",
            "content": "Do we have a working patch which with the new recommendations? ",
            "id": "comment-14612849"
        },
        {
            "date": "2015-07-03T07:43:03+0000",
            "author": "Varun Rajput",
            "content": "Yes, I had incorporated all the suggested changes as recommended in the last working patch that I uploaded. The handler is disabled by default and can be enabled by setting the system property as recommended by Anshum Gupta. \n\nAs said earlier, I verified that all the tests work fine and was also able to verify the presence of files from the zip in zookeeper as well as verify their actual content.\n\nAlso, according to Anshum's opinion, I am updating the name of the system property as well, to \n\nzk.upload\n\n and attaching a new patch. Although this can be easily changed as desired in ZkConfigParams. ",
            "id": "comment-14612955"
        },
        {
            "date": "2015-07-03T08:17:06+0000",
            "author": "Noble Paul",
            "content": "Thanks. I shall look into it ",
            "id": "comment-14612991"
        },
        {
            "date": "2015-07-09T17:05:42+0000",
            "author": "Erick Erickson",
            "content": "This keeps recurring and recurring and recurring. I wonder if a graphical UI exists that we could reference, seems like it would be isolated enough. ",
            "id": "comment-14620854"
        },
        {
            "date": "2015-07-10T16:29:33+0000",
            "author": "Varun Rajput",
            "content": "Hi Erick, this is a handler like the Collections handler. A GUI can be built on top of this API as wells as the Collections API but I don't think it should be within the scope of this ticket because we had planned to keep this ticket simple as suggested by Noble Paul. ",
            "id": "comment-14622552"
        },
        {
            "date": "2015-07-10T16:34:25+0000",
            "author": "Erick Erickson",
            "content": "Varun Rajput Agreed, but we can't think about building up a GUI unless we agree that putting up arbitrary XML files is allowed. Stefan and I had the \"brilliant\" idea to edit solrconfig.xml files from the admin UI. Even that was unacceptable as it opened up the ability to push xml to Solr..... well, maybe not-so-brilliant. ",
            "id": "comment-14622557"
        },
        {
            "date": "2015-07-10T18:07:47+0000",
            "author": "Varun Rajput",
            "content": "I see. It will definitely be great to have a UI on top of this and in terms of the arbitrary XML files, I will let Anshum Gupta comment on that given he's worked on the authentication and authorization modules. ",
            "id": "comment-14622678"
        },
        {
            "date": "2015-07-10T18:24:19+0000",
            "author": "Noble Paul",
            "content": "Varun Rajput Agreed, but we can't think about building up a GUI unless we agree that putting up arbitrary XML files is allowed\n\nThe fact is it is your system and you can put an arbitrary xml or even executable file if you wish to. But it should only be allowed to a person who has the permissions to do so. Building a GUI first is like putting the cart before the horse. We need to first define the workflow involved in adding a certain artifact into the system. The questions we need to ask is\n\n\n\tIs the user allowed to add it?\n\tHow can we avoid/minimize the harm caused by human errors even if you are authorized to perform a certain action\n\tWhat are the steps involved in a person gaining those permissions. Is it possible to circumvent it.\n\n\n\nIt may be possible to hack this and gain access. But, we do not want Solr to be weakest link in the whole ecosystem. For instance, in this ticket we say that  that, the user needs to enable this handler with a system property. Which means that the hacker will have to gain access to the file system first to put in the property there.   ",
            "id": "comment-14622708"
        },
        {
            "date": "2015-07-14T16:33:47+0000",
            "author": "Varun Rajput",
            "content": "To add to what Noble Paul said, Anshum Gupta has added security modules that can restrict access to users and what they can do with Solr. Noble Paul, did you get a chance to verify the patch? ",
            "id": "comment-14626607"
        },
        {
            "date": "2015-08-11T20:14:28+0000",
            "author": "Timothy Potter",
            "content": "Just tuning in to this one ... what about adding individual files after a configset has been created? Is that envisioned for this API? If so, will that use the signing stuff of SOLR-7126? Personally, I think it's a pain to reload the whole config directory as a zip if I want to change one word in my protected words file for example. ",
            "id": "comment-14682410"
        },
        {
            "date": "2015-08-14T16:58:42+0000",
            "author": "Varun Rajput",
            "content": "Hi Timothy Potter, the vision for this API is to keep it simple to begin with, as suggested by Noble Paul. A had a version which allows a single file upload as well which can be added later. ",
            "id": "comment-14697374"
        },
        {
            "date": "2015-08-14T19:20:23+0000",
            "author": "Timothy Potter",
            "content": "I think not having a way to upload a single file makes the API harder, not easier. Very often, people just want to change a single file in the config and repackaging the whole directory to re-upload is cumbersome. I'd vote for tackling both (full dir and single file) ",
            "id": "comment-14697585"
        },
        {
            "date": "2015-08-16T07:30:02+0000",
            "author": "Varun Rajput",
            "content": "I can understand the pain to reload the whole configuration as I've been through that. We can open another ticket for that as Noble Paul said in his comment:\n\"I would say , we should just limit the scope of this to adding a whole config and not\nindividual files\nor linking a collection to another config set.\nIf you want those let us open another ticket . Dealing with too many moving parts is hard to track\"\n\nIf we have a consensus amongst all, I can easily include the functionality to upload a single file as well to this one. ",
            "id": "comment-14698562"
        },
        {
            "date": "2015-08-31T15:26:48+0000",
            "author": "Anshum Gupta",
            "content": "Thanks Varun. I've been wanting to get to this for a while now. Also, thanks for being patient \n\nA couple of things here. I agree with Tim Potter that handling both single file updates and uploading an entire config set both are required and make sense. However, we could just handle entire configsets with this issue as long as the approach allows for adding single file uploads cleanly.\n\nAlso, let's get this patch inline with SOLR-7789 so we share the end-point that has already been introduced to handle configs. I plan to review this patch in detail later today. ",
            "id": "comment-14723543"
        },
        {
            "date": "2015-10-05T20:36:41+0000",
            "author": "Gregory Chanan",
            "content": "Also, let's get this patch inline with SOLR-7789 so we share the end-point that has already been introduced to handle configs. I plan to review this patch in detail later today.\n\nWhat's the status of this?\n\nI'm also unclear what the exact scope of this JIRA is.  It sounds like we are just limiting this jira to allowing you to upload entire config sets, is that correct?  I'm adding a LIST command in SOLR-7995 and a GET command at SOLR-8054.  It sounds like neither of those efforts would conflict with this, except that the GET command should use the same parameter names for e.g. individual files / zipped vs streamed.  I'd rather not duplicate work, so let me know. ",
            "id": "comment-14943978"
        },
        {
            "date": "2015-10-05T20:47:20+0000",
            "author": "Anshum Gupta",
            "content": "I plan on resuming work on this one later today. If you have something in place already for GET, go ahead with it, else I'll take it up and keep it in sync with all of the other Config set work that has recently been done.\n\nLet's move all of the GET stuff from here and only use SOLR-8054 for it.  ",
            "id": "comment-14944000"
        },
        {
            "date": "2015-10-26T04:15:06+0000",
            "author": "Varun Rajput",
            "content": "Hey Anshum Gupta, I was busy with stuff so I couldn't get to this before but I am uploading a new patch using the work already done in https://issues.apache.org/jira/browse/SOLR-7789 as suggested by you. Bringing this functionality along the lines of SOLR-7789 needed quite a few changes so this patch is only an initial draft. I would first like to get an opinion from you and Gregory Chanan if this looks good and I can add tests as well. ",
            "id": "comment-14973691"
        },
        {
            "date": "2015-11-13T18:36:07+0000",
            "author": "Varun Rajput",
            "content": "Uploading an updated patch with the tests using the new API Anshum Gupta ",
            "id": "comment-15004465"
        },
        {
            "date": "2015-11-13T22:44:34+0000",
            "author": "Gregory Chanan",
            "content": "The approach of doing the upload directly in the handler seems problematic because it doesn't involve the exclusivity enforcement in the Overseer.  Are you sure if you do things like concurrently UPLOAD and DELETE things will be left in a sensible state?  I guess the alternative is writing the zip into the zookeeper message (could that overrun the jute.maxbuffer) or uploading it someone else in ZK and having the Overseer copy it to the correct location.  The later means you have to upload twice, but I'm guessing this operation is rare anyway.\n\nI also don't see any signature checking for security.  I don't see how we can have this feature without security.\n\nMore minor comments:\n\n+      if (action == ConfigSetAction.UPLOAD) {\n+        if (isUploadEnabled) {\n+          hanldeConfigUploadRequest(req, rsp);\n+          return;\n+        } else {\n+          throw new SolrException(SolrException.ErrorCode.UNAUTHORIZED, \n+              \"Uploads are not enabled. Please set the system property \\\"\" \n+                  + ConfigSetParams.ENABLE_CONFIGSET_UPLOAD + \"\\\" to true\");\n+        }\n+      }\n\n\nI don't see why this can't follow the usual operation.call path.  Also handle is not spelled correctly.\n\n\n+    String httpMethod = (String) req.getContext().get(\"httpMethod\");\n+    if (!\"POST\".equals(httpMethod)) {\n+      throw new SolrException(ErrorCode.BAD_REQUEST,\n+          \"The upload action supports POST requests only\");\n+    }\n\n\nIf we are going to check this stuff, I'd rather enforce it for all ConfigSet requests.  This can be done by storing the allowed verbs in the ConfigSetAction enum itself or somewhere in the handler.\n\n\n+    if (zkClient.exists(configPathInZk, true)) {\n+      throw new SolrException(ErrorCode.SERVER_ERROR,\n+          \"The configuration \" + configSetName + \" already exists in zookeeper\");\n+    }\n+    \n\n\nThis looks like it should be a BAD_REQUEST?\n\n\n+    for (ContentStream contentStream : req.getContentStreams()) {\n      ..\n+      break;\n+    }\n\n\nThis just reads the first content stream?  Why have a loop then?\n\nHow about solrj classes for the requests/responses that you can use in the test, instead of hand parsing everything?\n\n\n+    //Checking error when mo configuration name is specified in request\n\n\nmo -> no ",
            "id": "comment-15004844"
        },
        {
            "date": "2015-11-13T23:15:08+0000",
            "author": "Varun Rajput",
            "content": "Thanks Gregory Chanan for the detailed review. Please also refer to my previous patch (https://issues.apache.org/jira/secure/attachment/12768656/SOLR-6736-newapi.patch) in which I did go the route of using Overseer but passing the content stream in the zookeeper message didn't work out as it got converted into a string. Maybe there is a better way of doing that which didn't occur to me. I can take your help in going that route or an alternate one.\n\nAs for the security, this is implemented using a system property which needs to be set before starting up solr, as suggested by a few members in this ticket. The flag \"isUploadEnabled\" checks if uploading configsets is enabled.\n\n   public ConfigSetsHandler(final CoreContainer coreContainer) {\n     this.coreContainer = coreContainer;\n+    isUploadEnabled = Boolean.parseBoolean(System.getProperty(\n+        ConfigSetParams.ENABLE_CONFIGSET_UPLOAD, ConfigSetParams.ENABLE_CONFIGSET_UPLOAD_DEFAULT));\n   }\n\n\n\nI will take care of the minor corrections, thanks for pointing them out! ",
            "id": "comment-15004885"
        },
        {
            "date": "2015-11-13T23:19:46+0000",
            "author": "Gregory Chanan",
            "content": "Please also refer to my previous patch (https://issues.apache.org/jira/secure/attachment/12768656/SOLR-6736-newapi.patch) in which I did go the route of using Overseer but passing the content stream in the zookeeper message didn't work out as it got converted into a string\n\nIs that the correct link?  I don't see any Overseer changes there. ",
            "id": "comment-15004891"
        },
        {
            "date": "2015-11-13T23:23:42+0000",
            "author": "Varun Rajput",
            "content": "Yes, the changes I made are in OverseerConfigSetMessageHandler. If the link doesn't get you to the right patch, you may open the patch named \"SOLR-6736-newapi.patch\" that I uploaded on October 25, 2015 from the attachments. ",
            "id": "comment-15004895"
        },
        {
            "date": "2015-11-13T23:37:28+0000",
            "author": "Gregory Chanan",
            "content": "Ok, I see it now.  I'll take a look when I get the chance. ",
            "id": "comment-15004916"
        },
        {
            "date": "2015-11-13T23:38:51+0000",
            "author": "Varun Rajput",
            "content": "Great, thanks in advance. ",
            "id": "comment-15004919"
        },
        {
            "date": "2015-11-14T00:42:39+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for the patch Varun.\n\nIt would also be good to leave room for allowing/disallowing/checking certain properties in the config file itself, even if that requires some sort of parsing e.g. remoteStreaming etc. to make sure that the files don't contain undesirable settings. Just to be clear, I'm not saying we hard-code this in there, but leave room for either configuration or extension.\n\nAlso, in addition to what Greg mentioned, here are a few more minor suggestions:\n\n\tthe use of final keyword isn't required here:\n\nfinal String ENABLE_CONFIGSET_UPLOAD = \"configs.upload\";\nfinal String ENABLE_CONFIGSET_UPLOAD_DEFAULT = \"false\";\n\n\n\tIn ConfigSetsHandler, the error code shouldn't be UNAUTHORIZED as no other user/credentials would be allowed to do this. Perhaps a FORBIDDEN or BAD_REQUEST would serve this better?\n\nthrow new SolrException(SolrException.ErrorCode.UNAUTHORIZED, \n              \"Uploads are not enabled. Please set the system property \\\"\" \n                  + ConfigSetParams.ENABLE_CONFIGSET_UPLOAD + \"\\\" to true\");\n\n\n\tWith 'Exception' there, you should remove everything else from ConfigSetsHandler here:\n\n  private void hanldeConfigUploadRequest(SolrQueryRequest req, SolrQueryResponse rsp) throws IOException,\n      KeeperException, InterruptedException, Exception {\n\n\n\tVery small and trivial but there are a few unwanted imports.\n\n ",
            "id": "comment-15004979"
        },
        {
            "date": "2015-11-14T03:40:31+0000",
            "author": "Varun Rajput",
            "content": "Hi Anshum, thanks for the suggestions. I will put all these in, in the next patch. In terms of checking certain properties, we can do that but this upload is for the complete config set and not a single file. Do you have any suggestions on doing that for a complete config set upload? ",
            "id": "comment-15005137"
        },
        {
            "date": "2015-12-08T04:12:46+0000",
            "author": "Varun Rajput",
            "content": "Hey Gregory Chanan, did you get a chance to look into this? ",
            "id": "comment-15046317"
        },
        {
            "date": "2015-12-08T04:18:29+0000",
            "author": "Erick Erickson",
            "content": "SOLR-8378 avoids the problem of uploading arbitrary XML in a browser, it uses a client jar instead. Perhaps that JIRA can provide the necessary functionality? ",
            "id": "comment-15046320"
        },
        {
            "date": "2015-12-08T04:32:00+0000",
            "author": "Varun Rajput",
            "content": "Anshum Gupta and Gregory Chanan, I have updated the patch with all the minor changes you both suggested. Please provide feedback on the upload as well as config property check questions I had asked so I can update the patch for those as well. Thanks! ",
            "id": "comment-15046330"
        },
        {
            "date": "2015-12-08T04:41:30+0000",
            "author": "Varun Rajput",
            "content": "Hey Erick Erickson, as discussed previously, the problem of uploading through browser is already addressed by having the user enable it. Uploading a configset or config file through the browser is much easier and convenient for the user while adding more actions to the ConfigSetsAPI. ",
            "id": "comment-15046335"
        },
        {
            "date": "2017-02-24T03:40:22+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I have created a branch jira/solr-6736 with the latest patch (after updating it for master).\n\nRegarding the security vulnerability that this new API exposes, I have the following thoughts to take this forward:\n\n\tWe can allow unauthenticated/unauthorized users to upload a configset, but mark such configsets with a \"trusted=false\" flag while storing in ZK (metadata on the configset's znode). If this endpoint is secured using authorization and authentication, then we can store the uploaded configsets with \"trusted=true\".\n\tUpon creation of a collection using an untrusted configset, any attempt to register a \"vulnerable\" component, e.g. StatelessScriptUpdateProcessor, XsltUpdateRequestHandler, DataImportHandler etc., should fail with an error that indicates that the configset was not trusted and it can be made trusted by enabling authentication/authorization for the API endpoint and re-uploading the configset. Same error when using a config API command to register any update handler using an untrusted configset.\n\tEnsure that untrusted configsets never overwrite existing trusted configsets.\n\n\n\nAs a separate exercise, we should audit our use of the XML parser to ensure XXE attacks are not possible on XML files, either uploaded from here/elsewhere or loaded from the disk.\n\nVarun Rajput, Anshum Gupta, Noble Paul, WDYT? ",
            "id": "comment-15881883"
        },
        {
            "date": "2017-02-24T04:09:26+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ishan Chattopadhyaya\n\nWe can allow unauthenticated/unauthorized users to upload a configset,\n\nI am not following why this endpoint needs to be \"unsecure\" ? If it is to simplify the development process, then that can be mitigated by setting up a unsecure Solr cluster in the staging environment. In case of a production environment all endpoints must be authenticated using the configured mechanism if security is enabled. This request handler should also implement PermissionNameProvider interface so that only users which have \"CONFIG_EDIT_PERM\" can update it.\n ",
            "id": "comment-15881903"
        },
        {
            "date": "2017-02-24T04:24:10+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "\nIf it is to simplify the development process, then that can be mitigated by setting up a unsecure Solr cluster in the staging environment. In case of a production environment all endpoints must be authenticated using the configured mechanism if security is enabled.\nThis seems like a sound approach in theory, but often times users don't follow proper procedures for deployment and end up exposing their deployments without proper authentication/authorization. This extra security is to save such users from potential remote code execution based attacks. Our guidelines should, anyway, be for admins to enable security before going to production.\n\nHaving this feature disabled out of the box was the other alternative that was explored above (to protect users who might end up exposing their cluster without securing it first), but I think it is inconvenient and can (and should) be avoided. ",
            "id": "comment-15881915"
        },
        {
            "date": "2017-02-24T04:26:22+0000",
            "author": "Noble Paul",
            "content": "don't disable DataImportHandler,  just disable ScriptTransformer  ",
            "id": "comment-15881919"
        },
        {
            "date": "2017-02-24T05:01:47+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ishan Chattopadhyaya\n\nThis seems like a sound approach in theory, but often times users don't follow proper procedures for deployment and end up exposing their deployments without proper authentication/authorization. This extra security is to save such users from potential remote code execution based attacks. Our guidelines should, anyway, be for admins to enable security before going to production.\n\nOh I think I misunderstood your earlier statement. So this would not affect the setups which have security enabled.  ",
            "id": "comment-15881959"
        },
        {
            "date": "2017-02-24T05:07:34+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "So this would not affect the setups which have security enabled. \nRight.\nIf this endpoint is secured using authorization and authentication, then we can store the uploaded configsets with \"trusted=true\".\nThose \"trusted\" configsets can be used to create collections without any restrictions. ",
            "id": "comment-15881970"
        },
        {
            "date": "2017-02-24T06:24:23+0000",
            "author": "Varun Rajput",
            "content": "I like the approach of \"trusted\" configsets, how would the restrictions on vulnerable components be imposed? ",
            "id": "comment-15882054"
        },
        {
            "date": "2017-03-12T00:29:01+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Initial patch based on my proposal above.\n\n\n\tAdds configsets with trusted=false (TODO: this should be based on whether authz is enabled for /admin)\n\tFail update requests using XSLT\n\tTODO: Fail to load StatelessScriptUpdateProcessor if configset is untrusted\n\tTODO: Fail to load script transformer in DIH if configset is untrusted\n\n ",
            "id": "comment-15906370"
        },
        {
            "date": "2017-03-20T13:47:28+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Added new patch with the following:\n\n\tAuthorizationResponse now contains the permission that permitted the request to succeed.\n\tConfigSetsHandler sets \"trusted\" as true/false depending on whether the /admin/configs endpoint was protected or not.\n\tFor untrusted configsets, don't allow StatelessScriptUpdateProcess and the XSLT processing of XmlLoader (formerly XsltUpdateHandler). Added tests for the same.\n\tTODO: Do the same for DIH's script transformer and RunExecutableListener.\n\n\n\nNoble Paul, please review. If you suggest, I can split out the authorization framework changes into a separate, linked issue. ",
            "id": "comment-15932640"
        },
        {
            "date": "2017-03-23T13:05:47+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Based on an offline discussion with Noble, I've made the following changes in this patch:\n\n\tA configset is trusted if authentication is enabled and the request has been populated with a user principal. Not validating whether authorization is in place or not anymore.\n\tInitializing the vulnerable plugins using SolrCoreAware.inform(SolrCore) instead of NamedList.\n\n ",
            "id": "comment-15938246"
        },
        {
            "date": "2017-03-23T13:34:42+0000",
            "author": "Noble Paul",
            "content": "Looks good. I guess we should throw the exception at component execution time rather than component load time. If we throw an exception at load time , the core fails to load and the user won't know why it was not loaded. OTOH if you throw an exception at component run time , the response may have an error message . At load time, just add a warning message ",
            "id": "comment-15938303"
        },
        {
            "date": "2017-03-23T13:49:56+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I thought about that, and decided to fail at the loading time instead of execution time. The reason was that I think that it is better for a user to know upfront that the collection, as uploaded through the configset API, won't work as desired. Not failing at the collection creation time could mislead the user into believing everything went fine, but his queries/updates would fail much later.\n\nthe core fails to load and the user won't know why it was not loaded\nTowards this, I've added the following exception message that would be thrown when the collection creation fails.\n\nThe configset for this collection was uploaded without any authentication in place,  and this operation is not available for collections with untrusted configsets. To have this feature, re-upload the configset after enabling authentication and authorization.\n\n\n\nDo you think that makes sense? ",
            "id": "comment-15938319"
        },
        {
            "date": "2017-03-23T13:59:40+0000",
            "author": "Noble Paul",
            "content": "A lot of components are initialized lazily as well. So we don't know at which point it fails and whether the user gets the message at collection creation time or not.  ",
            "id": "comment-15938339"
        },
        {
            "date": "2017-03-23T15:07:27+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Even if a component is loaded lazily, throwing an exception at the time of initialization seems better than initializing the component without errors and throwing errors at the time of the request. That way, we throw the exception as soon as possible technically. It will just prevent surprises for the user, say during a production deployment, whereby the requests would be guaranteed to be executed as desired if the initialization has succeeded.\n\nOne of the vulnerable plugins, RunExecutableListener, is usually executed during a commit. An exception during a commit could lead to potential data loss. At least for that plugin (and for every other vulnerable plugin as well), I'd prefer if the user got the error during the initialization.\n\nWhat do you think? ",
            "id": "comment-15938533"
        },
        {
            "date": "2017-03-25T10:22:49+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the patch. This is mostly ready now.\n\nThis iteration of the patch fixes the TODO items from above.\n\n\tRunExecutableListener doesn't initialize if configset is untrusted.\n\tDIH's ScriptTransformer doesn't initialize if configset is untrusted.\n\n\n\nOther changes that this patch introduces, overall:\n\n\tIntroduces action=UPLOAD to /admin/configs endpoint, that accepts a zip file through POST.\n\tIf authentication is not enabled during upload, the configset is considered \"untrusted\".\n\tXSLT transformer cannot be used (tr=) if configset is untrusted.\n\tStatelessScriptUpdateProcessor doesn't initialize if configset is untrusted.\n\tconfig-edit permission can now be used for protecting this UPLOAD action.\n\n ",
            "id": "comment-15941684"
        },
        {
            "date": "2017-03-28T19:15:00+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6b0217b7cbff1216bb4ffbecdba02eb8c5dd3df6 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6b0217b ]\n\nSOLR-6736: Adding support for uploading zipped configsets using ConfigSets API ",
            "id": "comment-15945762"
        },
        {
            "date": "2017-03-28T20:29:26+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 254218e80ca54203079a6591fa84edfaccaedea8 in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=254218e ]\n\nSOLR-6736: Adding support for uploading zipped configsets using ConfigSets API ",
            "id": "comment-15945895"
        },
        {
            "date": "2017-03-29T06:57:03+0000",
            "author": "Noble Paul",
            "content": "\n\n@Override\n  public Name getPermissionName(AuthorizationContext ctx) {\n    switch (ctx.getHttpMethod()) {\n      case \"GET\":\n        return Name.CONFIG_READ_PERM;\n      case \"POST\":\n        return Name.CONFIG_EDIT_PERM;\n      default:\n        return null;\n    }\n  }\n\n\n\nis wrong. POST is accepted in all methods. u should check for explicit action ",
            "id": "comment-15946632"
        },
        {
            "date": "2017-04-13T12:01:42+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6d948debc632082f58373a3276860c347152f099 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6d948de ]\n\nSOLR-6736: Fix authorization permissions ",
            "id": "comment-15967488"
        },
        {
            "date": "2017-04-13T12:03:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 23e3582c95d899aec26a9dfcb895eac0b0e1bd06 in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=23e3582 ]\n\nSOLR-6736: Fix authorization permissions ",
            "id": "comment-15967490"
        },
        {
            "date": "2017-04-13T12:06:50+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks Varun Rajput and everyone else who contributed. ",
            "id": "comment-15967493"
        },
        {
            "date": "2017-04-13T16:54:32+0000",
            "author": "Varun Rajput",
            "content": "Thanks everyone! ",
            "id": "comment-15967873"
        },
        {
            "date": "2017-05-25T19:22:30+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Cassandra Targett, please review the documentation changes for this issue. ",
            "id": "comment-16025246"
        },
        {
            "date": "2017-05-25T19:51:47+0000",
            "author": "Cassandra Targett",
            "content": "please review the documentation changes for this issue.\n\nThanks Ishan Chattopadhyaya. I only noticed one thing: In AsciiDoc, you need to put a blank line between a paragraph and a bulleted list (at L#182). Otherwise it will render as one whole paragraph, which isn't what you're going for. ",
            "id": "comment-16025283"
        },
        {
            "date": "2017-06-02T15:25:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5c4f0a27a327dba22e121680a19c192a53b8d75e in lucene-solr's branch refs/heads/branch_6_6 from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5c4f0a2 ]\n\nSOLR-10446, SOLR-6736: Ref guide documentation ",
            "id": "comment-16034863"
        },
        {
            "date": "2017-06-02T15:26:10+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f358c6834d3957b73690d73e49c021644c2f61fb in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f358c68 ]\n\nSOLR-10446, SOLR-6736: Ref guide documentation ",
            "id": "comment-16034866"
        },
        {
            "date": "2017-06-02T15:26:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2eb324f9bae1553c9c68c4a740a4f865b0ec6da5 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2eb324f ]\n\nSOLR-10446, SOLR-6736: Ref guide documentation ",
            "id": "comment-16034869"
        },
        {
            "date": "2017-06-02T15:32:24+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks Cassandra Targett. ",
            "id": "comment-16034885"
        },
        {
            "date": "2017-07-19T15:18:25+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 069e6a78e0c2201b6b98a129144a63ecc32b4fee in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=069e6a7 ]\n\nSOLR-6736: Improve the configset UPLOAD example in reference guide ",
            "id": "comment-16093256"
        },
        {
            "date": "2017-07-19T15:19:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2184a43e3e10e5b7de2f29c0d4cd59df21754730 in lucene-solr's branch refs/heads/branch_7x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2184a43 ]\n\nSOLR-6736: Improve the configset UPLOAD example in reference guide ",
            "id": "comment-16093259"
        },
        {
            "date": "2017-07-19T15:19:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e68b3cabe27c91b2c22f6dd8aac48a0b198440c7 in lucene-solr's branch refs/heads/branch_7_0 from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e68b3ca ]\n\nSOLR-6736: Improve the configset UPLOAD example in reference guide ",
            "id": "comment-16093260"
        },
        {
            "date": "2017-07-19T15:20:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 05a702095dfd8c34370dcbdd25cb51ce296b0586 in lucene-solr's branch refs/heads/branch_6x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=05a7020 ]\n\nSOLR-6736: Improve the configset UPLOAD example in reference guide ",
            "id": "comment-16093261"
        },
        {
            "date": "2017-07-19T15:20:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 927d10660f875f96465417698f28aecec8a7b948 in lucene-solr's branch refs/heads/branch_6_6 from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=927d106 ]\n\nSOLR-6736: Improve the configset UPLOAD example in reference guide ",
            "id": "comment-16093264"
        },
        {
            "date": "2017-07-19T15:23:08+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Fixed the example for this. FYI, Erik Hatcher. ",
            "id": "comment-16093267"
        }
    ]
}