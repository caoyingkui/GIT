{
    "id": "SOLR-527",
    "title": "An XML commit only request handler",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "New Feature",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "This request handler only permits <commit/> messages.  It is provided as one way to prevent adds and deletes on a Solr slave machine that could potentially be accessed by outside parties where a firewall or other access control is either not possible or not desired.",
    "attachments": {
        "ReadOnlyUpdateProcessorFactory.java": "https://issues.apache.org/jira/secure/attachment/12379300/ReadOnlyUpdateProcessorFactory.java",
        "SOLR-527.patch": "https://issues.apache.org/jira/secure/attachment/12379188/SOLR-527.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12585226",
            "date": "2008-04-03T18:36:30+0000",
            "content": "I'm a little reluctant to have another request handler doing its own XML parsing to limit the normal functionality.  Perhaps a better solution would be an UpdateRequestProcessor that throws an error for <add> and <delete>? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12585228",
            "date": "2008-04-03T18:38:04+0000",
            "content": "dooh, should have looked at the file before uploading..... "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12585243",
            "date": "2008-04-03T19:15:27+0000",
            "content": "Is this a generally-useful feature?  I'm not sure how often this use case would occur. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12585245",
            "date": "2008-04-03T19:24:34+0000",
            "content": "> Is this a generally-useful feature? I'm not sure how often this use case would occur.\n\nI agree it's not.\nI think Ryan's solution is the most elegant, and that it should remain a custom extension (i.e. not committed). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12585253",
            "date": "2008-04-03T19:35:51+0000",
            "content": "For the record: allowing arbitrary outside parties the ability to issue commits on a slave is almost as dangerous as allowing adds/deletes.  while the data itself can't be poisoned using a commit, you could DOS the slave with trashing as it warms searchers over and over again.\n\nif the goal is a read only slave that can still be triggered to load new snapshots, perhaps an alternate method on shapshot loading (that isn't net accessible) is in order ... ie: A variation on autocommit that polls the index dir periodically to see if it has changed. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12585256",
            "date": "2008-04-03T19:42:38+0000",
            "content": "I agree neither should approach should be committed.\n\nBut I sympathize with the general request to make slave machines read-only.  I think the problem Sean is trying to solve is to have confidence that his slave machines won't accidentally update or something like that.  \n\nOther approaches are to make the file system read-only for the slave machine (but not for running rsync)\n\nPerhaps with SOLR-465, their could be a read only Directory instance... "
        },
        {
            "author": "Sean Timm",
            "id": "comment-12585573",
            "date": "2008-04-04T15:14:27+0000",
            "content": "Thanks all for taking a look at this.\n\nThe ReadOnlyUpdateProcessorFactory.java is great, Ryan.  I didn't realize that update processor factories could be chained.  That is cleaner than my solution.\n\nHoss, I realize that DOS attacks are still possible, however, my bigger concern is someone modifying our index (e.g., injecting a Viagra advert or the like into our index). "
        },
        {
            "author": "patrick o'leary",
            "id": "comment-12585702",
            "date": "2008-04-04T18:53:38+0000",
            "content": "I guess there's a couple of questions I'd have around this.\n\n\n\tShould there be a default update mechanism if none are specified in the solrconfig.xml?\n\t\n\t\tI can rip out the request handlers for /update, it's still available through SolrUpdateServlet, as SolrCore loads ChainUpdateProcessFactory by default, and that loads RunUpdateProcessorFactory by default. That's not what I'd expect.\n\t\n\t\n\tShould the UpdateCmd maintain some form of context of origin of an update, even like a string?\n\t\n\t\tIf embeded could be used to store anything from a file name to a db name, if http the peer ip could be stored through the UpdateServlet or RequestDispatcher.\n\t\tWould allow custom update chains some ability to make a decision based the origin of a document.\n\t\n\t\n\n\n\nOverall I'd like to have the ability to determine if I should in fact allow an add / update / commit to go through, for both web based and non-web containers. But I definitely want to have the ability to switch it off.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12585774",
            "date": "2008-04-04T21:13:38+0000",
            "content": "Should there be a default update mechanism if none are specified in the solrconfig.xml?\n\nFor backwards compatibility yes, but the simple way to prevent all updates is by mapping something else to /update \u2013 a NoOpRequestHandler would be useful here to prevent all updates (don't we already have one of those?)\n\n\n\n\tIf embeded could be used to store anything from a file name to a db name, if http the peer ip could be stored through the UpdateServlet or RequestDispatcher.\n\tWould allow custom update chains some ability to make a decision based the origin of a document.\n\n\n\nUpdateProcessors shouldn't know/care about where the command originated from \u2013 that's mainly the point, it's an agnostic way to hook into all index modification commands regardless of origin.  Logic about accepting/rejecting commands based on where they came from needs to know know about the channel of communication, so that logic should live as close to the source of that channel as possible. \n\nOverall I'd like to have the ability to determine if I should in fact allow an add / update / commit to go through, for both web based and non-web containers. But I definitely want to have the ability to switch it off.\n\nwe generally try to keep Solr out of the business of authorization/security ... if you are embedding Solr, make the wrapper code decide what/when to allow commands through;  if you are using Solr as a webapp, configure your servlet container with whatever path based security you want. "
        },
        {
            "author": "Sean Timm",
            "id": "comment-12591678",
            "date": "2008-04-23T16:39:26+0000",
            "content": "I serendipitously discovered what is probably the cleanest way to only allow commits on the slave.  If the index is owned by user A with permissions \n\n\"-rw-r--r--\"\n\n yet the slave solr process is run as user B, only read operations are allowed.  This is obvious in retrospect.  I just didn't think of it. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12609156",
            "date": "2008-06-30T05:05:17+0000",
            "content": "Can we add an attribute to the current UpdateHandler\nsolrconfig.xml\n <commitOnly>true</commitOnly>\n\n "
        },
        {
            "author": "Sean Timm",
            "id": "comment-12617956",
            "date": "2008-07-29T21:15:49+0000",
            "content": "Updated to work with recently committed SOLR-660. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13581760",
            "date": "2013-02-19T23:39:16+0000",
            "content": "Things have changed now with SolrCloud which needs to ADD docs to slaves. If you don't want to enable firewalls, then secure Solr with SSL auth instead, see SOLR-4470.\n\nClosing, please re-open if you feel this is still relevant. "
        }
    ]
}