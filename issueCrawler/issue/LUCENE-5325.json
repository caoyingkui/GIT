{
    "id": "LUCENE-5325",
    "title": "Move ValueSource and FunctionValues under core/",
    "details": {
        "components": [
            "core/search"
        ],
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Spinoff from LUCENE-5298: ValueSource and FunctionValues are abstract APIs which exist under the queries/ module. That causes any module which wants to depend on these APIs (but not necessarily on any of their actual implementations!), to depend on the queries/ module. If we move these APIs under core/, we can eliminate these dependencies and add some mock impls for testing purposes.\n\nQuoting Robert from LUCENE-5298:\n\n\nwe should eliminate the suggest/ dependencies on expressions and queries, the expressions/ on queries, the grouping/ dependency on queries, the spatial/ dependency on queries, its a mess.\n\nTo add to that list, facet/ should not depend on queries too.",
    "attachments": {
        "LUCENE-5325-6x.patch": "https://issues.apache.org/jira/secure/attachment/12845047/LUCENE-5325-6x.patch",
        "LUCENE-5325.patch": "https://issues.apache.org/jira/secure/attachment/12798227/LUCENE-5325.patch",
        "LUCENE-5325-6x-matchingbits.patch": "https://issues.apache.org/jira/secure/attachment/12845067/LUCENE-5325-6x-matchingbits.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-11-04T09:24:47+0000",
            "content": "I'm +1 for having these APIs in core, but I'd like us to do some cleanup before integrating them into core. In particular: \n\n\tcould we remove byteVal, shortVal, intVal and floatVal and only have longVal and doubleVal to deal with numerics?\n\tcould we improve the multi-valued APIs? Maybe something more like SortedSetDocValues (setDocument/nextOrd)?\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13812700"
        },
        {
            "date": "2013-11-04T15:32:03+0000",
            "content": "+1 to move ValueSource/FunctionValues to Core.  I've certainly viewed it as a core part of Lucene.\n\nAdrien, by \"improve the multi-valued APIs\", are you perhaps referring ValueSource/FunctionValue's rather odd set of methods that take a 2nd parameter which is an array to dump multiple values out into?  MultiValueSource goes along with this.  I rather hate MultiValueSource and all those overloaded methods \u2013 I look forward to seeing a better design.  The main problem with MultiValueSource is that it's design is limited to all documents having a constant number of values, it doesn't vary per document.  Notice MultiValueSource's dimension() takes no arguments \u2013 it's result is effectively constant. ",
            "author": "David Smiley",
            "id": "comment-13812909"
        },
        {
            "date": "2013-11-04T16:40:33+0000",
            "content": "+1 for the APIs in the core.\n\nShai Erera, have you already started on this? If not I'd be happy to take it on. ",
            "author": "Ryan Ernst",
            "id": "comment-13812986"
        },
        {
            "date": "2013-11-04T17:07:43+0000",
            "content": "\nAdrien, by \"improve the multi-valued APIs\", are you perhaps referring ValueSource/FunctionValue's rather odd set of methods that take a 2nd parameter which is an array to dump multiple values out into? MultiValueSource goes along with this. I rather hate MultiValueSource and all those overloaded methods \u2013 I look forward to seeing a better design. The main problem with MultiValueSource is that it's design is limited to all documents having a constant number of values, it doesn't vary per document. Notice MultiValueSource's dimension() takes no arguments \u2013 it's result is effectively constant.\n\nExactly.  ",
            "author": "Adrien Grand",
            "id": "comment-13813012"
        },
        {
            "date": "2013-11-07T22:12:27+0000",
            "content": "I began doing the move and refactorings discussed here, but this turned into a very large change.  After some discussion, I'm going to try creating smaller subtasks.  The first example is LUCENE-5335.  There are a bunch more changes like this we should make before doing the actual move. ",
            "author": "Ryan Ernst",
            "id": "comment-13816502"
        },
        {
            "date": "2013-11-08T09:26:08+0000",
            "content": "Shai Erera, have you already started on this? If not I'd be happy to take it on.\n\nNo, I haven't started any work yet and won't be able to work on it in the next few weeks, so feel free to take it! ",
            "author": "Shai Erera",
            "id": "comment-13817138"
        },
        {
            "date": "2016-04-11T15:45:11+0000",
            "content": "Some stuff I've been working on has touched this, and I think I have a possible way forward.  One of the issues I have with ValueSource is that it's inherently type-unsafe - you have no way of saying what sort of value you want from a ValueSource input.  However, pretty much all the VS consumers we have only actually use a single type: expressions uses doubleVal(), facet uses longVal() for LongRange and doubleVal() for DoubleRange, function queries use floatVal(), etc.\n\nI propose we add a new set of abstract classes to the core search package, exposing per-document Long, Double and BytesRef values.  We add some simple wrapper methods to the queries module to convert a ValueSource to a LongValuesSource/DoubleValuesSource/BytesRefValuesSource.  Then we can go through each module and convert it to use the core classes instead of ValueSource, one by one.  This breaks things up into the subtasks Ryan was talking about, and allows us to defer worrying about some of the wartier aspects of the current ValueSource API (quite a few of which are only used by a single module, and can be narrowed down to a module-specific subclass or implementation).\n\nI have the start of a patch for this, which I can upload if people think this sounds like a good idea, cutting over expressions and facets. ",
            "author": "Alan Woodward",
            "id": "comment-15235324"
        },
        {
            "date": "2016-04-11T18:33:27+0000",
            "content": "Alan Woodward sounds like an interesting idea, a prototype patch sounds good. ",
            "author": "Ryan Ernst",
            "id": "comment-15235688"
        },
        {
            "date": "2016-04-11T18:39:19+0000",
            "content": "Definitely sounds great.  I know what you mean by this having a lot of warts.  Like the multi-value aspect, which is in turn only used by a small piece of Solr. ",
            "author": "David Smiley",
            "id": "comment-15235703"
        },
        {
            "date": "2016-04-11T18:44:50+0000",
            "content": "Like the multi-value aspect, which is in turn only used by a small piece of Solr.\n\nIndeed, multi-value VS needs to change! ",
            "author": "Yonik Seeley",
            "id": "comment-15235708"
        },
        {
            "date": "2016-04-11T19:51:15+0000",
            "content": "One of the issues I have with ValueSource is that it's inherently type-unsafe - you have no way of saying what sort of value you want from a ValueSource input.\n\nThis comment reminded me of a discussion I remember having a long time ago that i started typing up a summary of in case it inspires folks, but then realized I already filed as SOLR-6575 the last time someone mentioned something that reminded me of it.\n\nMight be some helpful ideas there if folks are looking to revamp & improve the type specificity of the ValueSource APIs ",
            "author": "Hoss Man",
            "id": "comment-15235835"
        },
        {
            "date": "2016-04-12T09:13:00+0000",
            "content": "Patch.\n\nTo keep it simple, I've just added DoubleValues / DoubleValuesSource, and cut over the expressions module to use it.  Still needs some work:\n\n\tthe ValueSource.toDoubleValuesSource() method needs a test\n\tI'm not quite sure how to deal with exceptions throw by Scorer.score() in DoubleValuesSource.SCORES\n\tI've copied the exists() method from FunctionValues to DoubleValues, but I'm not convinced we need it.  The expressions module doesn't actually use it, at any rate, but in some cases I can see it's useful to distinguish between a zero-value and a non-existent value.  Maybe I should remove it here, and it can be added in later if it's needed for a specific function?\n\tDoubleValues is an abstract class rather than an interface, simply because I couldn't get the ASM stuff in JavascriptCompiler to work with interfaces.\n\n ",
            "author": "Alan Woodward",
            "id": "comment-15236894"
        },
        {
            "date": "2016-04-12T13:52:39+0000",
            "content": "I've copied the exists() method from FunctionValues to DoubleValues, but I'm not convinced we need it.\n\nI think it is needed.  Consider a ValueSource that wants to pick between the value from a wrapped ValueSource, or if when that VS has no value, then return the value from another (perhaps a constant default but could be anything).  The only way to get this and remove a FunctionValues.exists() method I see is having some sort of BooleanValueSource that has implementations to check if a DocValue's value exists.  Then you could address the same use-cases, I think.\n\nThe patch looked alright but I didn't apply it to get a more thorough impression.  I certainly like the simplicity of it.  And I like this API/functionality moving to Core from Queries module \u2013 it's very generic & foundational. ",
            "author": "David Smiley",
            "id": "comment-15237190"
        },
        {
            "date": "2016-04-12T13:59:44+0000",
            "content": "\nis there a way to move out the setScorer method? it seems like this one really does not belong, e.g. should be at a higher level and this api should just have the per-document get ? I like David's idea about separate boolean exists (or simply have method to get the Bits for this at a higher level). \n\nto me that is better, because then its up to the thing using it to determine how null values should be treated. For example expressions/ could treat them as NaN rather than 0, maybe that is more intuitive (especially with respect to sorting). ",
            "author": "Robert Muir",
            "id": "comment-15237203"
        },
        {
            "date": "2016-04-12T15:10:22+0000",
            "content": "Updated patch, nuking setScorer() and exists().\n\nThere's a bit of hinky logic around creating sorts now, because FieldComparator separates out setNextReader() and setScorer(), but it is at least contained.  We still need to pass in a Scorer somewhere though, so that scores are available to the leaf values.\n\nAnother option would be to pull the Scorer logic back into the expressions module itself, but I think having a generic DoubleValues.SCORES instance is going to be useful in lots of situations; plus it means that all of the sorting logic is in DoubleValuesProducer itself.\n\nAlso adds a test for converting a DoubleValuesSource into a generic ValueSource (not the other way round, which I had originally put in and isn't needed yet!) ",
            "author": "Alan Woodward",
            "id": "comment-15237350"
        },
        {
            "date": "2016-04-12T20:01:45+0000",
            "content": "Another iteration, this time pushing access to Scores entirely back into the expressions code.  The API is pretty minimal now:\n\n\n\tDoubleValues just has ```double get(int)```\n\tDoubleValuesSource just has ```DoubleValues getValues(LeafReaderContext)```, plus some factory methods for access to DV fields and a SortField implementation\n\n ",
            "author": "Alan Woodward",
            "id": "comment-15237868"
        },
        {
            "date": "2016-04-12T21:59:18+0000",
            "content": "I'm going back and forth a bit on where scores should live.  TaxonomyFacetSumValueSource also allows access to scores, so we need to be able to set a Scorer on an arbitrary DoubleValues instance there.  However, once setScorer appears on DoubleValues, that means we need to add it to the long-valued equivalent (because we'll want to wrap one with another), so we can't just use NumericDocValues. ",
            "author": "Alan Woodward",
            "id": "comment-15238072"
        },
        {
            "date": "2016-04-13T08:49:49+0000",
            "content": "I dont understand the problem, it seems to be unrelated to the api at hand. Whether these double values come from scores, from the ABV of beers in the refridgerator, etc, seems none of its concern. It should just be a per-doc api for double values and nothing more? ",
            "author": "Robert Muir",
            "id": "comment-15238874"
        },
        {
            "date": "2016-04-13T10:06:55+0000",
            "content": "You're right, it is unrelated, and there's a way around it, I just needed to get away from thinking in the mode of the previous API.  So thanks for the push-back \n\nHere's a new patch which cuts over expressions, facets and suggest.  There's one new method on DoubleValuesSource and LongValuesSource, for retrieving a bitset marking which docs actually have a value here, which is required by the facet counting code.  Field wrappers just forward to DocValues.getDocsWithField(), and everything else returns a MatchAllBits for now.  Ideally, expressions would AND together the bitsets from all child variables, but that can be done in a followup once I've found the methods to actually do that efficiently...\n\nI think this is good enough to start with?  Grouping, join and queries modules are going to be more complicated I think, so should be done in a separate JIRA.  And this patch is already pretty big, and can probably be broken up into separate commits for each module. ",
            "author": "Alan Woodward",
            "id": "comment-15238999"
        },
        {
            "date": "2016-12-19T10:06:42+0000",
            "content": "Waking this one up again.  Here's a patch that takes into account the new doc values iterator API.  The new classes look like this:\n\nDoubleValuesSource\n\n\tgetDoubleValues(LeafReaderContext, Scorer) which returns a DoubleValues\n\n\n\nDoubleValues\n\n\tadvanceTo(doc) : returns true if doc has a value\n\tdoubleValue()\n\n\n\nAnd similar for LongValuesSource/LongValues.  There is already a LongValues class in lucene.util, so this probably needs a better name.  The XValuesSource classes have a bunch of static methods for generating sources from doc values fields or from a Scorer.\n\nI also have patches that convert to and from the old ValueSource API, and that migrate the facet, expression and suggest modules, but I think they should be kept for follow-up issues. ",
            "author": "Alan Woodward",
            "id": "comment-15760761"
        },
        {
            "date": "2016-12-28T13:45:48+0000",
            "content": "Any comments on the patch?  I'll commit in the next couple of days if everybody's happy. ",
            "author": "Alan Woodward",
            "id": "comment-15782914"
        },
        {
            "date": "2016-12-28T15:10:25+0000",
            "content": "I am +1 in general, I think it's great that we are getting a cleaner values source API! I left some comments about the current patch below:\n\n\n\tShould we rename advanceTo to advanceExact to be more consistent with the doc values API? These methods seem to have the same contract.\n\tIt seems to be that fromIntField could just delegate to fromLongField all the time?\n\tCan we use LongUnaryOperator.identity() rather than (v) -> v\n\t// TODO make setScorer throw IOException? +1\n\tLongValuesSource.fromDoubleField looks a bit trappy to me since it implicitly casts. Should we instead expect callers to call DoubleValuesSource.fromDoubleField and then do the casting explicitly using toLongValuesSource?\n\tMaybe we should not have the DoubleValues getValues(LeafReaderContext) method (without a Scorer). I'm wondering it might be better to require callers to pass null themselves when they know scores are not needed.\n\n\n\nAbout the way we have access to scores, I'm wondering that things might be a bit cleaner if we avoided mixing the values source and Scorer APIs by replacing LongValues getValues(LeafReaderContext ctx, Scorer scorer) with LongValues getValues(LeafReaderContext ctx, DoubleValues scores) in addition to something like a DoubleValues fromScorer(Scorer scorer) method on DoubleValuesSource?\n\nIn general I think we should also better document the contract of these APIs, like what the expectations are for the scorer/scores when needsScores returns false and what toDoubleValues and toLongValues do since not all doubles can be represented as a long and vice-versa. ",
            "author": "Adrien Grand",
            "id": "comment-15783071"
        },
        {
            "date": "2016-12-28T17:40:16+0000",
            "content": "Thanks for the review, Adrien.  Here's an updated patch:\n\n\n\tadvanceTo renamed to advanceExact\n\tfromIntField delegates to fromLongField in both Long and DoubleValuesSource\n\tI ended up removing the automatic wrapping of doubles to longs in LongValuesSource entirely, in favour of calling DoubleValuesSource.toLongValuesSource().  The javadocs on the latter now explicitly say that the conversion is done via casting.\n\tJavadocs generally are more explanatory, particularly around scores\n\tgetValues() now takes a DoubleValues object rather than a Scorer - this ended up being a very nice change, and will allow us to remove several of the FakeScorer implementations that the current ValueSource API forces us to use in things like expressions or facets.\n\n\n\nI'll open a separate issue for adding the throws clause for FieldComparator.setScorer(). ",
            "author": "Alan Woodward",
            "id": "comment-15783344"
        },
        {
            "date": "2016-12-28T19:09:53+0000",
            "content": "Thanks, it looks great. Some minor comments:\n\n\tCan you make the docs of advanceExact more explicit about the fact it cannot go backwards?\n\tCan you remove the @Test annotations from the test case?\n\tThe // force in order comment is outdated, scoring always goes in order since 5.0. I think we can remove all this testing on BooleanQuery since it is now no different from a TermQuery for sorting.\n\n\n\nOtherwise +1 ",
            "author": "Adrien Grand",
            "id": "comment-15783518"
        },
        {
            "date": "2016-12-29T11:30:21+0000",
            "content": "Final patch, to apply after LUCENE-7607. ",
            "author": "Alan Woodward",
            "id": "comment-15785147"
        },
        {
            "date": "2016-12-29T11:36:45+0000",
            "content": "+1 ",
            "author": "Adrien Grand",
            "id": "comment-15785157"
        },
        {
            "date": "2016-12-29T12:07:57+0000",
            "content": "The patch for 6x is slightly different, as the DocValues iterator API hasn't been backported, so the interaction with the FieldComparators has to take into account missing values ",
            "author": "Alan Woodward",
            "id": "comment-15785204"
        },
        {
            "date": "2016-12-29T12:23:07+0000",
            "content": "Commit e2aa2b638468f8ed7555533be25f4dc86780b840 in lucene-solr's branch refs/heads/branch_6x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e2aa2b6 ]\n\nLUCENE-5325: Add LongValuesSource and DoubleValuesSource in core ",
            "author": "ASF subversion and git services",
            "id": "comment-15785226"
        },
        {
            "date": "2016-12-29T12:23:13+0000",
            "content": "Commit 3f24fd81c836982be96b9b60082b53177fffe504 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3f24fd8 ]\n\nLUCENE-5325: Add LongValuesSource and DoubleValuesSource in core ",
            "author": "ASF subversion and git services",
            "id": "comment-15785229"
        },
        {
            "date": "2016-12-29T13:17:20+0000",
            "content": "Yay; thanks so much for this Alan Woodward! ",
            "author": "David Smiley",
            "id": "comment-15785301"
        },
        {
            "date": "2016-12-29T13:35:32+0000",
            "content": "Alan Woodward On the 6.x branch, I am confused why FieldValuesSource always returns true for advanceExact, shouldn't it check docsWithField? ",
            "author": "Adrien Grand",
            "id": "comment-15785326"
        },
        {
            "date": "2016-12-29T14:43:05+0000",
            "content": "shouldn't it check docsWithField?\n\nHm, you're quite right.  Here's a patch fixing that - will commit shortly. ",
            "author": "Alan Woodward",
            "id": "comment-15785435"
        },
        {
            "date": "2016-12-29T14:48:40+0000",
            "content": "A test for that would be good. ",
            "author": "David Smiley",
            "id": "comment-15785447"
        },
        {
            "date": "2016-12-29T20:27:02+0000",
            "content": "Commit 4e5a62140f4e90fc41fe91350c7787c8455f2887 in lucene-solr's branch refs/heads/branch_6x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4e5a621 ]\n\nLUCENE-5325: Check for matching bits in NumericDocValues to XValues converter ",
            "author": "ASF subversion and git services",
            "id": "comment-15786057"
        },
        {
            "date": "2016-12-29T20:27:05+0000",
            "content": "Commit a4335c0e9f01275c7d6e807813d9818b6e59d76e in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a4335c0 ]\n\nLUCENE-5325: Add test for missing values in sorts ",
            "author": "ASF subversion and git services",
            "id": "comment-15786058"
        },
        {
            "date": "2016-12-29T20:29:01+0000",
            "content": "I pushed the fix for 6.x and added a test there and on master.  Thanks for the reviews!  I'll open up some follow-up issues now. ",
            "author": "Alan Woodward",
            "id": "comment-15786061"
        }
    ]
}