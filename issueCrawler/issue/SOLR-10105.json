{
    "id": "SOLR-10105",
    "title": "JDBCStream should be able to load driver from runtime lib",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "Parallel SQL"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently the JDBCStream uses Class.forName() to load the driver class. This should be improved to try to use the classloader from runtimeLib and the blob store API like SOLR-10087. It may be possible to do something like Class.forName(driverClassName, true, core.getMemClassLoader()) just need to figure out how to get a reference to the core.\n\nThe relevant code is here:\n\nhttps://github.com/apache/lucene-solr/blob/master/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/JDBCStream.java#L180",
    "attachments": {
        "SOLR-10105.patch": "https://issues.apache.org/jira/secure/attachment/12856580/SOLR-10105.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-05T17:44:34+0000",
            "content": "Dennis Gove - Any thoughts on this? Any idea of how to get a reference to the core this is executing on to be able to get the class loader? ",
            "author": "Kevin Risden",
            "id": "comment-15896458"
        },
        {
            "date": "2017-03-07T11:25:01+0000",
            "content": "untested patch. PoC ",
            "author": "Noble Paul",
            "id": "comment-15899284"
        },
        {
            "date": "2017-05-01T21:18:06+0000",
            "content": "Would it be acceptable to just check for a \"solr-core\" key on the context, then if it exists, access the appropriate method via reflextion?  This would allow us to keep this class outside of core but have access to the shared lib dir, without having to have SolrCore implement a new interface just for this purpose.  \n\nBut also, I am not so sure what the design goal here is, how important it is to keep streams out of core.  It seems odd we'd have all of this as part of SolrJ.  Maybe just moving JDBCStream to core is the right answer? ",
            "author": "James Dyer",
            "id": "comment-15991563"
        },
        {
            "date": "2017-05-02T00:50:00+0000",
            "content": "It's not a good idea to move any part of streaming expression to core. It should work anywhere outside solr ",
            "author": "Noble Paul",
            "id": "comment-15991908"
        },
        {
            "date": "2017-05-02T16:57:09+0000",
            "content": "Yes I agree having the streaming expressions work in-core or standalone opens up all sorts of nice possibilities.  And it doesn't seem you can grab the in-core ResourceLoader via reflection and load the class that way, because javax.sql.DriverManager enforces that the driver be from the same classloader as that of the calling class.  So my prior suggestion won't work. ",
            "author": "James Dyer",
            "id": "comment-15993260"
        }
    ]
}