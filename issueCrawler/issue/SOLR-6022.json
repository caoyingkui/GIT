{
    "id": "SOLR-6022",
    "title": "Rename getAnalyzer to getIndexAnalyzer",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We have separate index/query analyzer chains, but the access methods for the analyzers do not match up with the names.  This can lead to unknowingly using the wrong analyzer chain (as it did in SOLR-6017).  We should do this renaming in trunk, and deprecate the old getAnalyzer function in 4x.",
    "attachments": {
        "SOLR-6022.branch_4x-deprecation.patch": "https://issues.apache.org/jira/secure/attachment/12642307/SOLR-6022.branch_4x-deprecation.patch",
        "SOLR-6022.patch": "https://issues.apache.org/jira/secure/attachment/12642068/SOLR-6022.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan Ernst",
            "id": "comment-13981906",
            "date": "2014-04-26T06:34:44+0000",
            "content": "Here's a patch against trunk that does the rename for IndexSchema and FieldType.  When merging back to branch_4x I'll add getAnalyzer back with as deprecated. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13982029",
            "date": "2014-04-26T16:01:32+0000",
            "content": "Ryan:\n\nCool, way to jump on it! And when I did my quick scan for calls to getAnalyzer, I didn't think about the local variables, subclasses that overrode the method call etc., good catch.\n\nCan we really just change the public method without providing a back-compat? Something like\n\npublic Analyzer getIndexAnalyzer() \n{\n    return indexAnalyzer;\n  }\n\n/**\n\n\t@deprecated  As of release 5.0, replaced by \n{@link #getIndexAnalyzer()}\n */\n@Deprecated // Remove in 5.0\npublic Analyzer getAnalyzer() \n{ return getIndexAnalyzer(); }\n\n\n\nAnd a CHANGES.txt entry too.\n\nOr is it OK in a case like this to just rename the method and provide a CHANGES.txt entry? What do others think? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982033",
            "date": "2014-04-26T16:09:44+0000",
            "content": "The sophisticated backwards policeman says:\n\nTo provide backwards compatibility for those that implement getAnalyzer, the delegation must be the other way round:\n\n\tIn trunk, all like it is in the patch.\n\tIn 4.x, getAnalyzer() stays as it is - no code changes, but gets deprecated. getIndexAnalyzer is new method, but delegates in 4.x to the deprecated getAnalyzer() with a @SuppressWranings(\"deprecation\") on the call. By this we have two good things: both methods behave identical behavior, so people can call both. But people who implement only the old one will still get called by Solr's code, so they don't loose functionality. This is the general pattern to replace methods (also used by the JDK) - it just \"feels\" unnatural, but is correct way to deprecate \n\n\n\nUwe "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13982036",
            "date": "2014-04-26T16:16:20+0000",
            "content": "Ryan:\n\nThat'll teach me to read the entire comment, you already are on the deprecation thing.\n\nUwe: \n\nThanks for the tutorial... "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13983393",
            "date": "2014-04-28T18:59:44+0000",
            "content": "Here are two more patches:\n\n\tThe first is still for trunk, and changes the indexAnalyzer/queryAnalyzer members in FieldType to private scope.  This will be a \"hard fail\" for anyone that is subclassing FieldType and using these, but they should be using get/setAnalyzer anyways.  It also adds CHANGES.txt entries for review.\n\tThe second patch shows exactly how I will do the deprecation in branch_4x (I believe I should be able to just apply the patch after doing a merge back from trunk).\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13983456",
            "date": "2014-04-28T19:44:23+0000",
            "content": "I think that looks good. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13983829",
            "date": "2014-04-29T01:00:20+0000",
            "content": "I don't see why in 4x calls to getAnalyzer() can't be changed to getIndexAnalyzer(), It wouldn't break compatibility and it would avoid creating many warnings.  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13984076",
            "date": "2014-04-29T06:50:56+0000",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe: The patch for 4.x has to be applied after merge from trunk, so first apply patch to trunk, merge that to 4.x and then apply the 4.x patch on-top (which restores the deprecated method):\n\nThe second patch shows exactly how I will do the deprecation in branch_4x (I believe I should be able to just apply the patch after doing a merge back from trunk).\n\nTo test that everything works without merging/committing, apply both patches to the same 4.x checkout, the general first, then the 4.x one. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13984352",
            "date": "2014-04-29T14:45:54+0000",
            "content": "The patch for 4.x has to be applied after merge from trunk\nGot it, thanks for explaining "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13985230",
            "date": "2014-04-30T06:59:30+0000",
            "content": "Another trunk patch.  I had to rework how subclasses enable analyzers for their type.  Before subclasses had to override setAnalyzer, and implement it to set the protected member var.  With this patch they instead override supportsAnalyzers() to return true. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13985257",
            "date": "2014-04-30T08:10:58+0000",
            "content": "Good stuff. Makes things easier to comprehend.\n\nI am not sure if this should be the IndexAnalyzer or the QueryAnalyzer as AFAIR, this tries to construct a query out of the terms from a document (given an id).\nMoreLikeThisHandler.java\n-      mlt.setAnalyzer( searcher.getSchema().getAnalyzer() );\n+      mlt.setAnalyzer( searcher.getSchema().getIndexAnalyzer() );\n\n "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13986089",
            "date": "2014-04-30T21:11:01+0000",
            "content": "I am not sure if this should be the IndexAnalyzer or the QueryAnalyzer as AFAIR, this tries to construct a query out of the terms from a document (given an id).\n\nI only kept what was there before.  I don't know enough about MLT to make a statement whether it is correct or not.  If it is broken, I think another jira should be opened? "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13986116",
            "date": "2014-04-30T21:33:40+0000",
            "content": "Sure, let that be. Will look into it more and open a new JIRA if required.\nThanks. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13988358",
            "date": "2014-05-02T22:34:26+0000",
            "content": "Commit 1592076 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1592076 ]\n\nSOLR-6022: Rename getAnalyzer() to getIndexAnalyzer() "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13988445",
            "date": "2014-05-02T23:51:30+0000",
            "content": "Commit 1592127 from Ryan Ernst in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1592127 ]\n\nSOLR-6022: Deprecate getAnalyzer() in IndexField and FieldType, and add getIndexAnalyzer() "
        }
    ]
}