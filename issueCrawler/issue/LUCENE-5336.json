{
    "id": "LUCENE-5336",
    "title": "Add a simple QueryParser to parse human-entered queries.",
    "details": {
        "components": [],
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I would like to add a new simple QueryParser to Lucene that is designed to parse human-entered queries.  This parser will operate on an entire entered query using a specified single field or a set of weighted fields (using term boost).\n\nAll features/operations in this parser can be enabled or disabled depending on what is necessary for the user.  A default operator may be specified as either 'MUST' representing 'and' or 'SHOULD' representing 'or.'  The features/operations that this parser will include are the following:\n\n\n\tAND specified as '+'\n\tOR specified as '|'\n\tNOT specified as '-'\n\tPHRASE surrounded by double quotes\n\tPREFIX specified as '*'\n\tPRECEDENCE surrounded by '(' and ')'\n\tWHITESPACE specified as ' ' '\\n' '\\r' and '\\t' will cause the default operator to be used\n\tESCAPE specified as '\\' will allow operators to be used in terms\n\n\n\nThe key differences between this parser and other existing parsers will be the following:\n\n\n\tNo exceptions will be thrown, and errors in syntax will be ignored.  The parser will do a best-effort interpretation of any query entered.\n\tIt uses minimal syntax to express queries.  All available operators are single characters or pairs of single characters.\n\tThe parser is hand-written and in a single Java file making it easy to modify.",
    "attachments": {
        "LUCENE-5336.patch": "https://issues.apache.org/jira/secure/attachment/12612925/LUCENE-5336.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-11-08T23:08:52+0000",
            "content": "I have attached a patch for this JIRA. ",
            "author": "Jack Conradson",
            "id": "comment-13817817"
        },
        {
            "date": "2013-11-09T11:45:56+0000",
            "content": "This is AWESOME.  I love how the operators (even whitespace!) are\noptional. And I love the name   And it's great that it NEVER throws\nan exc no matter how awful the input is.  And I love that it does not\nuse a lexer/parser generator: this makes it much more approachable\nto those devs that don't have experience with parser generators.\n\nSmall javadoc fix: instead of \"any \n{@code -} characters beyond the\nfirst character in a term may not need to be escaped,\" I think it\nshould say \"any {@code -}\n characters beyond the first character do not\nneed to be escaped\" (and same for * operator)\"?\n\nHow does it handle mal-formed input, e.g. a missing closing \" for a\nphrase query?  If I enter \"foo bar will it just make a term query for\n\"foo and a term query for bar?  Or, does it strip that \" and do query\nfoo instead?  (Same for missing closing paren?).  It looks like it\ndrops the \" and ( and does a simple term query (good).\n\nMaybe you could add fangs to the random test by more frequently mixing\nin these operator characters ... ",
            "author": "Michael McCandless",
            "id": "comment-13818114"
        },
        {
            "date": "2013-11-10T12:18:01+0000",
            "content": "A realistic query parser is not likely to be any simpler than this, so why not call it \"simple\"? ",
            "author": "Paul Elschot",
            "id": "comment-13818431"
        },
        {
            "date": "2013-11-11T19:34:22+0000",
            "content": "Thanks for the feedback.\n\nTo answer the malformed input question \u2013\n\nIf \n\"foo bar\nis given as the query, the double quote will be dropped, and if whitespace is an operator it will make term queries for both 'foo' and 'bar' otherwise it will make a single term query 'foo bar'\nIf\nfoo\"bar\nis given as the query, the double quote will be dropped, and term queries will be made for both 'foo' and 'bar'\n\nThe reason it's done this way is because the parser only backtracks as far as the malformed input (in this case the extraneous double quote), so 'foo' would already be part of the query tree.  This is because only a single pass is made for each query.  The parser could be changed to do two passes to remove extraneous characters, but I believe that only makes the code more complex, and doesn't necessarily interpret the query any better for a user since the malformed character gives no hint as to what he/she really intended to do.\n\nI will try to post another patch today or tomorrow.\n\nI plan to do the following:\n\n\tFix the Javadoc comment\n\tAdd more tests for random operators\n\tRename the class to SimpleQueryParser and rename the package to .simple\n\n ",
            "author": "Jack Conradson",
            "id": "comment-13819275"
        },
        {
            "date": "2013-11-11T21:53:48+0000",
            "content": "Attached an updated version of the patch with the three modifications from my previous comment. ",
            "author": "Jack Conradson",
            "id": "comment-13819464"
        },
        {
            "date": "2013-11-12T13:41:22+0000",
            "content": "Javadocs and code seem to disagree on the default operator: javadocs say The default operator is AND if no other operator is specified. while the code has private BooleanClause.Occur defaultOperator = BooleanClause.Occur.SHOULD;?\n\nOtherwise I agree with Mike that this new query parser is awesome. I will certainly use it! ",
            "author": "Adrien Grand",
            "id": "comment-13820091"
        },
        {
            "date": "2013-11-12T14:49:51+0000",
            "content": "I took a swipe at trying to make the javadocs easier to read (just different layout).\n\nAlso folded in Adrien's fix. ",
            "author": "Robert Muir",
            "id": "comment-13820144"
        },
        {
            "date": "2013-11-12T15:37:40+0000",
            "content": "+1, javadocs and the new test look great! ",
            "author": "Michael McCandless",
            "id": "comment-13820196"
        },
        {
            "date": "2013-11-12T16:07:57+0000",
            "content": "+1 ",
            "author": "Adrien Grand",
            "id": "comment-13820218"
        },
        {
            "date": "2013-11-12T17:03:12+0000",
            "content": "Commit 1541151 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1541151 ]\n\nLUCENE-5336: add SimpleQueryParser for human-entered queries ",
            "author": "ASF subversion and git services",
            "id": "comment-13820251"
        },
        {
            "date": "2013-11-12T17:06:28+0000",
            "content": "Commit 1541158 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1541158 ]\n\nLUCENE-5336: add SimpleQueryParser for human-entered queries ",
            "author": "ASF subversion and git services",
            "id": "comment-13820254"
        },
        {
            "date": "2013-11-12T17:07:40+0000",
            "content": "Thanks Jack! ",
            "author": "Robert Muir",
            "id": "comment-13820258"
        },
        {
            "date": "2014-01-10T10:23:08+0000",
            "content": "Commit 1557073 from Michael McCandless in branch 'dev/branches/lucene5376'\n[ https://svn.apache.org/r1557073 ]\n\nLUCENE-5336, LUCENE-5376: expose SimpleQueryParser in lucene server ",
            "author": "ASF subversion and git services",
            "id": "comment-13867681"
        },
        {
            "date": "2014-02-13T19:51:46+0000",
            "content": "Believe to be interesting to include support for prefix/suffix (term* or term) and also the data range [20120910 TO 20130101]? Thanks! ",
            "author": "Marcio Napoli",
            "id": "comment-13900662"
        }
    ]
}