{
    "id": "SOLR-2312",
    "title": "CloudSolrServer -- calling add(Collection<SolrInputDocument> docs) throws NPE.",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Cannot Reproduce"
    },
    "description": "Cannot index documents using the CloudSolrServer.\n\nBelow is a code snippet that reproduces the error.\n\n\n@Test\npublic void jiraTestCase() {\n\t\tCloudSolrServer solrj = null;\n\t\t \n\t\t\ttry {\n\t\t\t\tsolrj = new CloudSolrServer(\"your.zookeeper.localdomain:2181\");\n\n\t\t\t\t// Also tried creating CloudSolrServer using alternative contstuctor below...\n\t\t\t\t// public CloudSolrServer(String zkHost, LBHttpSolrServer lbServer)\n\t\t\t\t//\n\t\t\t\t// LBHttpSolrServer lbHttpSolrServer = new LBHttpSolrServer(\"http://solr.localdomain:8983/solr\");\n\t\t\t\t// solrj = new CloudSolrServer(\"your.zookeeper.localdomain:2181\", lbHttpSolrServer);\n\t\t\t\t//\n\t\t\t\t// (Same result -- NPE @ line 105 in CloudSolrServer.java)\n\n\t\t\t\tsolrj.setDefaultCollection(\"your-collection\");\n\t\t\t\tsolrj.setZkClientTimeout(5000);\n\t\t\t\tsolrj.setZkConnectTimeout(5000);\n\n\t\t\t\tfinal Collection<SolrInputDocument> batch = new ArrayList<SolrInputDocument>();\n\t\t\t\tSolrInputDocument doc = new SolrInputDocument();\n\t\t\t\tdoc.addField(\"id\", 1L, 1.0f);\n\t\t\t\tdoc.addField(\"title\", \"Document A\");\n\t\t\t\tdoc.addField(\"description\", \"Test document\");\n\t\t\t\tbatch.add(doc);\n\n\t\t\t\tdoc = new SolrInputDocument();\n\t\t\t\tdoc.addField(\"id\", 2L, 1.0f);\n\t\t\t\tdoc.addField(\"title\", \"Document B\");\n\t\t\t\tdoc.addField(\"description\", \"Another test document\");\n\t\t\t\tbatch.add(doc);\n\n\t\t\t\tsolrj.add(batch);\n\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t\tAssert.fail(\"java.lang.NullPointerException: null \\n\"\n\t\t\t\t\t+ \"\tat org.apache.solr.client.solrj.impl.CloudSolrServer.request(CloudSolrServer.java:105) \\n\"\n\t\t\t\t\t+ \" Line 105:  NULL request object here --> String collection = request.getParams().get(\\\"collection\\\", defaultCollection);\");\n\t\t\t} finally {\n\t\t\t\tsolrj.close();\n\t\t\t}\t \n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Stan Burnitt",
            "id": "comment-12980756",
            "date": "2011-01-12T15:44:19+0000",
            "content": "The CloudSolrServer is always instantiated with a LBHttpSolrServer, created in the single argument construct, or passed by the user in the alternative constructor.\n\nHowever, the LBHttpSolrServer's javadoc states:  \"LBHttpSolrServer  is a load balancing wrapper to CommonsHttpSolrServer. This is useful when you have multiple SolrServers and the requests need to be Load Balanced among them. This should NOT be used for indexing. Also see the wiki page.\"  (Not sure if this is relevant.)\n\nOne more note: this problem also occurs when I try to delete an index containing 0 documents. "
        },
        {
            "author": "Stan Burnitt",
            "id": "comment-12980764",
            "date": "2011-01-12T15:52:09+0000",
            "content": "Attempting to add a single document also results in the same NPE at line 105. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13149785",
            "date": "2011-11-14T17:53:25+0000",
            "content": "I'm not sure this happens anymore? In any case, you wouldn't want to use the same instance for both searching and indexing until SOLR-2358 (Distributed Indexing) is done. When that happens, it shouldn't matter what server you index to, so the load balancing could make sense for both search and indexing. For updates, we probably want to change CloudSolrServer to favor a shard leader, rather than round-robin (at least optionally). That would seem to mean that the solrj client would need to be able to do the hashing as well, so that it knows what shard leader to send to. The simple case is easy though, and comes naturally from the fact that updates will be forwarded to where they belong from any node. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13196323",
            "date": "2012-01-30T19:05:04+0000",
            "content": "I can't reproduce this and a lot has changed in this area. "
        },
        {
            "author": "Vimlesh Kumar Mishra",
            "id": "comment-13268158",
            "date": "2012-05-04T06:09:09+0000",
            "content": "I also can't reproduce this issue.Solrcloud indexing is working fine with below code.\n    SolrServer solr = new CloudSolrServer(\"your.zookeeper.localdomain:2181\");\n\t\t\t       ((CloudSolrServer)solr).setDefaultCollection(\"your-collection\");\n\t\t\t\tsolr.add(<List of solr documents>);\n\t\t\t\tsolr.commit(); "
        }
    ]
}