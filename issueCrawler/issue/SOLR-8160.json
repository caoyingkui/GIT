{
    "id": "SOLR-8160",
    "title": "Terms query parser should optionally do query analysis",
    "details": {
        "components": [
            "query parsers",
            "search"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Field setup as\n\n<field name=\"cs\" type=\"string_ci\" indexed=\"true\" stored=\"true\" multiValued=\"false\" required=\"false\" />\n   <fieldType name=\"string_ci\" class=\"solr.TextField\" sortMissingLast=\"true\">\n      <analyzer type=\"index\">\n         <tokenizer class=\"solr.KeywordTokenizerFactory\" />\n         <filter class=\"solr.LowerCaseFilterFactory\" />\n      </analyzer>\n      <analyzer type=\"query\">\n         <tokenizer class=\"solr.KeywordTokenizerFactory\" />\n         <filter class=\"solr.LowerCaseFilterFactory\" />\n      </analyzer>\n   </fieldType>\n\n\n\nValue sent to cs field for indexing include: AA, BB\n\nFollowing is observed\n\n&fq={!terms f=cs}AA,BB\n\n yields 0 results\n\n&fq={!terms f=cs}aa,bb\n\n yields 2 results\n\n&fq=cs:(AA BB)\n\n yields 2 results\n\n&fq=cs:(aa bb)\n\n yields 2 results\n\nThe first variant above should behave like the other 3 & obey query time analysis",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-12T18:12:40+0000",
            "author": "Hoss Man",
            "content": "TermsQParser is behaving as intended & documented...\n\nhttps://cwiki.apache.org/confluence/display/solr/Other+Parsers#OtherParsers-TermsQueryParser\n\n... functions similarly to the Term Query Parser but takes in multiple values separated by commas and returns documents matching any of the specified values.  This can be useful for generating filter queries from the external human readable terms returned by the faceting or terms components, ...\n\nChanging this behavior to involve query time analysis would be a new feature request, and would need to be dependent on some other new localparam option to indicate when it should be enabled. ",
            "id": "comment-14953503"
        },
        {
            "date": "2015-10-13T13:33:53+0000",
            "author": "Devansh Dhutia",
            "content": "Fair enough. I was under the impression all parsers were to obey query time analysis out of the box. My apologies for the misunderstanding. \n\nIs it reasonable to convert this to an enhancement request?  ",
            "id": "comment-14954931"
        },
        {
            "date": "2015-10-13T14:36:03+0000",
            "author": "David Smiley",
            "content": "(Converted to Improvement & updated title) ",
            "id": "comment-14955038"
        },
        {
            "date": "2015-10-13T14:49:55+0000",
            "author": "Erik Hatcher",
            "content": "With this change, it effectively makes it a \"fields\" query parser, like \"term\"/\"field\".  I wonder if we should keep \"terms\" as-is, and add a \"fields\" query parser?   (though I can't imagine a scenario where I wouldn't want the field type analysis to apply when using terms, though I'd also pretty much always use a string field type) ",
            "id": "comment-14955055"
        },
        {
            "date": "2015-10-13T15:00:55+0000",
            "author": "Jack Krupansky",
            "content": "The doc is a bit misleading, for both the Term and Terms query parsers:\n\ndocuments matching any of the specified values. This can be useful for generating filter queries from the external human readable terms returned by the faceting or terms components\n\nIt should be explicit that these are indexed, already analyzed term values, not \"external human readable terms\" as the doc indicates. ",
            "id": "comment-14955080"
        },
        {
            "date": "2015-10-13T15:23:22+0000",
            "author": "Yonik Seeley",
            "content": "It feels like some amount of transformations to go from readable to indexed should generally applied.\nThis is already done for most field types: for example numerics work:\n\nhttp://localhost:8983/solr/techproducts/query?q={!terms f=popularity}8,9,10\n\n\n\nI remember we did something similar for things like prefix queries... selectively applying what made sense (i.e. lowercasing made sense, but stemming did not).\n\nAll in all though, I think the current behavior is probably fine for the use cases the terms parser is meant for.  A normal query can be used for more complete text analysis. ",
            "id": "comment-14955109"
        }
    ]
}