{
    "id": "SOLR-4123",
    "title": "ICUTokenizerFactory - per-script RBBI customization",
    "details": {
        "components": [
            "Schema and Analysis"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "4.0",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Initially this started out as an idea for a configuration knob on ICUTokenizer that would allow me to tell it not to tokenize on punctuation.  Through IRC discussion on #lucene, it sorta ballooned.  The committers had a long discussion about it that I don't really understand, so I'll be including it in the comments.\n\nI am a Solr user, so I would also need the ability to access the configuration from there, likely either in schema.xml or solrconfig.xml.",
    "attachments": {
        "SOLR-4123.patch": "https://issues.apache.org/jira/secure/attachment/12555462/SOLR-4123.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-28T21:56:54+0000",
            "content": "you can do this from the java code, but the factory has a TODO about adding support for this.\n\nIn my opinion the simplest would be that you can provide some script+textfile pairs and it makes an ICUTokenizerConfig (i think delegating to the default one otherwise?)\n\nat least... this is more customization than you have today with this factory (which is zero) ",
            "author": "Robert Muir",
            "id": "comment-13505944"
        },
        {
            "date": "2012-11-28T21:57:09+0000",
            "content": "The IRC conversation:\n\n\n13:51 < sarowe> btw, icutokenizer is customizable - you can find the default\n                grammar at lucene/analysis/icu/src/data/uax29/Default.rbbi\n13:51 < sarowe> the dafault grammar is used when the text is not thai, lao, etc.\n13:51 < elyograg> i'm using solr, is any of that exposed there?\n13:52 < sarowe> you'd have to rebuild Default.brk and then repackage lucene-icu\n                jar, then include your rebuilt jar in solr classpath\n13:52 < sarowe> that's if you don't want to rename it\n13:53 < sarowe> more better would be to clone ICUTokenizer sources, tweak\n                Default.rbbi, build and include a diff jar with Solr classpath\n13:53 < hoss> sarowe: i don't really know anythign about ICU< but are these\n              \".brk\" files loaded at run time? could we make the factory take\n              one as an arg?\n13:53 < elyograg> I'll have to look into that.  I'd probably make a new class.\n13:53 < sarowe> no\n13:53 < sarowe> :)\n13:53 < sarowe> I meant no to including the .brk file at runtime\n13:54 < sarowe> they get compiled into some binary blob\n13:54 < sarowe> that gets used by ICU\n13:55 < hoss> ok .. if users can create their own *.rbbi file, and then use\n              that to generate a *.brk file, and then use that to generate a\n              binary blob file, could we make the ICU Factory configurable\n              about which blob file to load?\n13:55 < sarowe> 'ant genrbbi' under lucene/analysis/icu/ does the binary blob\n                building, using the ICU RBBI rule compiler\n13:55 < sarowe> hoss: hmm, potentially, yes\n13:56 < sarowe> the .brk file is the binary blob, BTW\n13:57 < hoss> sarowe: how long does the binary blob conversaion take?  any\n              reason it couldn't be done on startup?\n13:57 < hoss> (since it's aparently java code)\n13:58 < sarowe> hoss: I think it's pretty fast - single digit seconds\n13:59 < hoss> so maybe it could all be done by the factory?\n13:59 < hoss> i have no idea if that makes sense .. just spit-balling\n13:59 < sarowe> not sure how valuable runtime generation would be though\n13:59 < hoss> sure ... i'm just asking because anytime the answer is \"you need\n              to rebuild a stock jar\" i start wondering if/how we can make that\n              more configurable\n13:59 < sarowe> I guess one benefit is that although people would have to know\n                the RBBI syntax, they wouldn't have to know how to drive the\n                Lucene build\n14:00 < hoss> right ... but if it's better/easier to just tell them \"here's\n              this little java tool, run it\" that's fine too\n14:00 < hoss> i'm just asking about the flexibility\n14:00 < sarowe> right, the current build doesn't have any way to substitute\n                alternatives\n14:00 < hoss> if we can eliminate a tool and make it all magic .. people like\n              magic\n14:01 < sarowe> I worry about syntax errors in a runtime Solr though\n14:01 < sarowe> this likely should be offline\n14:01 < sarowe> I mean the .brk compilation\n14:02 < hoss> fair enough ... i don't know enough about these files to know how\n              likely it is people will fuck up on editing them\n14:02 < sarowe> it's a syntax that only exists for that tool AFAIK\n14:02 < hoss> like i said: if there's a tool people can use to generate the\n              blob files, and then point at them from factory config, thta\n              alone sounds like a huge win over \"recompile lucene\"\n14:02 < sarowe> and misplaced curly brackets, e.g., is common enough in any\n                language\n14:03 < sarowe> I agree\n14:04 < sarowe> the JFlex-based grammars, by contrast, are much more tightly\n                bound with the java - recompilation is unavoidable\n14:05 < hoss> i know ... it sucks ... everytime i try to think about how to\n              make a really nicely confiugrable parser the whole jflex/javacc\n              compile to javacode thing depressess the hell out of me\n14:06 < sarowe> I think the best we can do there is introduce configuration\n                knobs into the generated java\n14:07 < sarowe> for example, the tokenize-punctuation proposal could be\n                implemented as a boolean option on the parser(s)\n14:08 < sarowe> so that by default the current behavior happens, but if people\n                ask for it, they could get punctuation tokens\n14:08 < sarowe> (actually, whitespace should be tokenized too, not just\n                punctuation - I mean all the stuff that currently gets tossed)\n14:10 < hoss> yeah ... just like autoGeneratePhraseQueries ... i'd really like\n              to make whole syntax options more conifgurable though (eg:\n              \"should quotes be special syntax?\", \"what should ':' do?\", all\n              the things edismax currently does i na really hacky way, etc...)\n14:10 < hoss> that kind of stuff is nearly impossible unless you can built up\n              the grammer from sub-pieces at runtime\n14:21 < rmuir> sarowe: sorry just catching up... i dont understand this talk of\n               binary blogs or whatever\n14:22 < rmuir> you just need this factory to support\n               ICUTOkenizer(TokenizerConfig) ctor ?\n14:22 < rmuir> there is no need for binary blobs or jar rebuilding\n14:22 < rmuir> instead some just way to declare that ICUTokenizerConfig via xml.\n14:23 < sarowe> rmuir: I'm looking at DefaultICUTokenizerConfig right now\n14:23 < sarowe> that would be a pretty complex XML format\n14:23 < rmuir> maybe...\n14:24 < rmuir> maybe it should just be some way to override the default rather\n               than redefine completely\n14:24 < sarowe> and if people want to change rules, they still need to involve\n                the RBBI compiler\n14:24 < rmuir> no they dont\n14:24 < rmuir> http://icu-project.org/apiref/icu4j/com/ibm/icu/text/RuleBasedBreakIterator.html#RuleBasedBreakIterator%28java.lang.String%29\n14:24 < rmuir> the factory just calls that\n14:25 < sarowe> that's not how it's currently done for icutokenizer though\n14:25 < sarowe> in lucene I mean\n14:25 < rmuir> yeah it is\n14:25 < rmuir> look at icutokenizerconfig\n14:25 < rmuir>   /** Return a breakiterator capable of processing a given\n               script. */\n14:25 < rmuir>   public abstract BreakIterator getBreakIterator(int script);\n14:25 < rmuir> i dont understand whats confusing about this :)\n14:25 < rmuir> if you make your own config, you can return one you made with\n               RBBI(String)\n14:26 < rmuir> the *default* implementation is just optimized via these .brks\n               so it loads faster.\n14:26 < sarowe> aha, so as i said, the current impl doesn't do this\n14:26 < rmuir> you said the icutokenizer\n14:26 < rmuir> it has no impl\n14:26 < rmuir> it has a default config really\n14:26 < rmuir> the tokenizer doesnt know about any of this\n14:26 < sarowe> ok, I get it\n14:27 < rmuir> anyway there is a TODO in the factory about this\n14:27 < rmuir> would be nice if someone has ideas on what could be a useful\n               format\n14:28 < sarowe> cool\n14:28 < rmuir> i dont think it needs to support all the possible customizations\n               (e.g. typing things differently and so on)\n14:28 < rmuir> just something simple\n14:28 < rmuir> maybe some way to \"@override\" the default one\n14:28 < rmuir> like you give it a list of script/textfile pairs\n14:32 < rmuir> if you use that RBBI(String) ctor it fully syntax checks and\n               stuff also\n14:32 < sarowe> cool\n14:32 < rmuir> actually if you look at the compiler i have to redundantly call\n               that just for that reason :)\n14:32 < rmuir> the general approach is you do this once, and then .clone()\n               whatever you make\n14:33 < rmuir> like collators\n14:35 < sarowe> what's redundant?  I don't see that\n14:36 < rmuir> in the compiler?\n14:36 < rmuir>       /*\n14:36 < rmuir>        * if there is a syntax error, compileRules() may succeed.\n               the way to\n14:36 < rmuir>        * check is to try to instantiate from the string.\n               additionally if the\n14:36 < rmuir>        * rules are invalid, you can get a useful syntax error.\n14:36 < rmuir>        */\n14:36 < rmuir>       try {\n14:36 < rmuir>         new RuleBasedBreakIterator(rules);\n14:36 < rmuir>       } catch (IllegalArgumentException e) {\n14:36 < rmuir>         /*\n14:36 < rmuir>          * do this intentionally, so you don't get a massive\n               stack trace\n14:36 < rmuir>          * instead, get a useful syntax error!\n14:36 < rmuir>          */\n14:36 < rmuir>         System.err.println(e.getMessage());\n14:36 < rmuir>         System.exit(1);\n14:36 < rmuir>       }\n14:36 < sarowe> oh!\n14:36 < rmuir> thats why i said its actually the opposite of what you might\n               think\n14:36 < sarowe> I was missing the fact that the compiler is in lucene and not\n                in ICU\n14:37 < rmuir> compileRules misses the checking\n14:37 < rmuir> but the string-ctor checks\n14:37 < rmuir> (at least at the time i wrote this thing thats how it worked)\n14:37 < sarowe> cool\n14:38 < rmuir> anyway, would be cool if we could enhance the factory\n14:38 < rmuir> as the rules are documented and what not pretty well\n14:38 < sarowe> agreed\n14:39 < sarowe> and if people came up with useful alternatives, those could be\n                bundled and chosen from\n14:39 < sarowe> i mean useful default.rbbi alternatives\n14:40 < sarowe> but this could also be used to cover other scripts not\n                currently covered\n14:40 < rmuir> i think its actually less useful to customize that?\n14:40 < sarowe> oh?\n14:40 < rmuir> i think its more useful to say 'i want to change latin script\n               without having to worry about fucking up chinese'\n14:40 < sarowe> what do you think people will want to customize\n14:40 < rmuir> like\n14:40 < rmuir> it doesnt give you any additional 'power'\n14:40 < rmuir> it just makes writing the rules easier?\n14:41 < rmuir> so thats why i suggested script/text file pairs\n14:41 < sarowe> aha, so you're advocating leaving the default as-is\n14:41 < sarowe> and interposing script-specific additions\n14:41 < rmuir> well ive customized it this way before, and i'm describing how i\n               did it\n14:41 < sarowe> :) cool, ok\n14:41 < rmuir> because the idea is: i dont want to have to deal with\n               researching the impacts on tons of other languages or dealing\n               with the categories and shit\n14:41 < elyograg> my customizations would involve stopping it from doing\n                  something that it currently does -- tokenize on punctuation.\n14:42 < rmuir> right, but you shouldnt change the default to accomplish that\n14:42 < rmuir> because such a thing would make horribly long strings if you got\n               some tibetan text\n14:43 < rmuir> you should just just say 'i want to do this for latin script'\n14:43 < elyograg> much of the discussion here is going right over my head, but\n                  you're right, I would only want to make this happen for\n                  latin.  punctuation for other languages is outside my\n                  understanding. :)\n14:44 < rmuir> right so thats the idea of a script/text file pair\n14:44 < rmuir> you dont have to deal with that stuff. its not more expressive,\n               just makes it simpler\n14:46 < rmuir> what you want to do is easy if the factory adds supprot for that\n14:46 < rmuir> its like the hebrew example, it has two customizations (just a\n               set add/subtraction if i remember)\n14:46 < rmuir> so it wont split on \" and '\n14:49 < sarowe> so elyograg's customization could be a copy/paste of the\n                Default.rbbi, and just add the punctuation he wants to keep to\n                the $MidLetter definition\n14:50 < rmuir> yeah. like if we do this there should be some example\n               default.rbbi sitting there so this is easy to do\n14:50 < sarowe> (assuming numbers aren't involved)\n14:51 < rmuir> i personaly try to prefer the tweaking the way you suggest, as\n               just customizing the grammar that way.\n14:51 < rmuir> but you can also do something simpler too (e.g. something that\n               looks more like a regexp, since it only worries about latin...)\n14:52 < sarowe> a range of examples showing both these strategies would be good\n14:52 < rmuir> look at the provided ones :)\n14:52 < sarowe> you mean Hebrew, Khmer, Lao, and Myanmar I assume\n14:52 < rmuir> yes\n14:53 < rmuir> i guess those arent great for examples for users :)\n14:53 < sarowe> right, but naive users won't easily understand those\n14:53 < sarowe> right\n\n ",
            "author": "Shawn Heisey",
            "id": "comment-13505945"
        },
        {
            "date": "2012-11-28T22:30:45+0000",
            "content": "actually a lucene issue (the factory is in analysis/icu) but doesnt matter what jira its on.\n\nI can try to help with the implementation here, my current problem is how it should look to the user.\nfactories take Map<String,String>.\n\nthe best idea i have is:\n\nrulefiles=Latn.rbbi,Cyrl.rbbi\n\n\n\nso thats just one key=value, the value is a list of files and it must follow convention (http://unicode.org/iso15924/iso15924-codes.html). ",
            "author": "Robert Muir",
            "id": "comment-13505981"
        },
        {
            "date": "2012-11-28T22:33:46+0000",
            "content": "actually a lucene issue (the factory is in analysis/icu) but doesnt matter what jira its on.\n\nCrap, I missed that.  I'll leave it rather than putting it back though. ",
            "author": "Steve Rowe",
            "id": "comment-13505985"
        },
        {
            "date": "2012-11-30T03:26:54+0000",
            "content": "patch with that above syntax (which i'm not sure I even like).\n\nmay not work: haven't tested at all. ",
            "author": "Robert Muir",
            "id": "comment-13507064"
        },
        {
            "date": "2012-12-01T17:19:50+0000",
            "content": "I tried looking at Default.rbbi so I could determine what part of that file defines the tokenization on punctuation, but the identifiers that are there don't mean very much to me.\n\nI'd like to give this patch a test spin for my use case - turning off tokenization on standard punctuation.  If there is any such thing as exotic punctuation, I can probably just let ICU tokenize on that.  What would I define for rulefiles, where should the rbbi file(s) go, and what should be in them? ",
            "author": "Shawn Heisey",
            "id": "comment-13508005"
        },
        {
            "date": "2012-12-03T02:17:05+0000",
            "content": "Patch with more tests and example .rbbi files.\n\nI changed the rulefiles=\"...\" arg format to relax allowable resource names & locations, e.g. rulefiles=\"Latn:<arbitrary resource path>, ...\".\n\nI added some logic to ICUTokenizerFactory.parseRules() to retry when ResourceLoader.loadResource() fails, after first prepending a \"/\" to the resource path, because none of the test resources under lucene/analysis/icu/src/test-files/, which is on the test.classpath, were found.  I don't understand Object.getClass().getResourceAsStream(), which is delegated to by ResourceLoader.loadResource() - even resources in the same package as the Object can't be found???  By contrast, Object.getClass().getClassLoader().getResourceAsStream() succeeds in finding resources without first prepending a \"/\".  The ClasspathResourceLoader ctor that allows direct specification of the ClassLoader separately from the Class has private access, though. ",
            "author": "Steve Rowe",
            "id": "comment-13508436"
        },
        {
            "date": "2012-12-03T02:26:34+0000",
            "content": "I don't understand Object.getClass().getResourceAsStream(), which is delegated to by ResourceLoader.loadResource() - even resources in the same package as the Object can't be found???  By contrast, Object.getClass().getClassLoader().getResourceAsStream() succeeds in finding resources without first prepending a \"/\".  The ClasspathResourceLoader ctor that allows direct specification of the ClassLoader separately from the Class has private access, though.\n\nHmm, I just retried removing the package from the path for resource that it's in the same package as the test class, and it now works (why did I think it didn't?  I thought I tried that...).  Modified patch attached.\n\nSo I guess getClass().getResourceAsStream() makes sense: it only searches the same package as the class unless you prepend a \"/\".  Should I leave in the \"/\"-prepending fallback? ",
            "author": "Steve Rowe",
            "id": "comment-13508438"
        },
        {
            "date": "2012-12-03T03:45:40+0000",
            "content": "Hi, thanks for tackling this! you beat me to getting to the tests.\n\nYes, we should remove this /-stuff!!! ",
            "author": "Robert Muir",
            "id": "comment-13508449"
        },
        {
            "date": "2012-12-03T07:35:52+0000",
            "content": "The rule is simple: Never prepend /. \n\nFor tests we added a special case and that may confuse here: ClasspathResourceLoader with a class in ctor param, there you can pass in the base class from which the packages are load. This is added to make writing tests easy: You can pass in a plain file name and it is loaded from the package of the corresponding class. This is to mimic what we always had in our tests: Loading local class resources:\n\n\n// this will load the given file from this' class package:\nnew ClassPathResourceLoader(getClass()).openResource(\"file.txt\");\n\n\n\nCode like Solr uses FileSystemResourceLoader that wants relative path to the local working directory or uses the classloader, but thats for Solr and other applications like ElasticSearch. Tests should use ClasspathResourceLoader(getClass()) and only pass a file name fro their own package.\n\nYes, we should remove this /-stuff!!!\n\nWe can do nothing here, the confusion is created by Java's API by itsself: If you call Class.getResource() without a path (only file name), it loads from same package as the class, if you prepend with \"/\" it uses the given path as full package name. In contrast, if you directly use the ClassLoader (not Class), you must give a full path, but without a /. ",
            "author": "Uwe Schindler",
            "id": "comment-13508546"
        },
        {
            "date": "2012-12-03T07:50:29+0000",
            "content": "Can you please remove the workaround inside the factory (prepending \"/\")? This will break non-tests (e.g. when those classes are loaded from file system). Just only load classes from the local package of the class that was passed into the resourceloader.\n\nYes, we should remove this /-stuff!!!\n\nI misunderstood that. I thought you wanted to fix something else. YES, PLEASE REMOVE, it may break non-tests! ",
            "author": "Uwe Schindler",
            "id": "comment-13508553"
        },
        {
            "date": "2012-12-03T13:30:50+0000",
            "content": "\n\nCan you please remove the workaround inside the factory (prepending \"/\")? This will break non-tests (e.g. when those classes are loaded from file system).\n\n\nYes, we should remove this /-stuff!!!\nI misunderstood that. I thought you wanted to fix something else. YES, PLEASE REMOVE, it may break non-tests!\n\nYes, I'll fix - patch forthcoming. ",
            "author": "Steve Rowe",
            "id": "comment-13508720"
        },
        {
            "date": "2012-12-03T13:47:52+0000",
            "content": "I just retried removing the package from the path for resource that it's in the same package as the test class, and it now works (why did I think it didn't? I thought I tried that...)\n\nI now understand why this didn't previously appear to be working - I had been experimenting with substituting superclasses of the test class in the ClasspathResourceLoader ctor, and these were not in the same package as the test class itself, so of course resource loading was failing. ",
            "author": "Steve Rowe",
            "id": "comment-13508734"
        },
        {
            "date": "2012-12-03T15:40:11+0000",
            "content": "Patch with /-insanity expunged with prejudice.\n\nAdded standard factory docs with example Solr configs.\n\nAdded CHANGES.txt entry.\n\nI think it's ready to go. ",
            "author": "Steve Rowe",
            "id": "comment-13508808"
        },
        {
            "date": "2012-12-03T17:47:35+0000",
            "content": "+1\n\nShould we stick with test-files or just drop the test rbbis in src/test (i think this is what we normally do).\n\nIn any case, thanks a lot for bringing this to completion! ",
            "author": "Robert Muir",
            "id": "comment-13508891"
        },
        {
            "date": "2012-12-03T17:52:46+0000",
            "content": "Should we stick with test-files or just drop the test rbbis in src/test (i think this is what we normally do).\n\nGood idea, I'll move the rbbi files to the standard location - because of the same-package-for-tests requirement, no reason to have a separate location for test resources. ",
            "author": "Steve Rowe",
            "id": "comment-13508894"
        },
        {
            "date": "2012-12-03T18:07:11+0000",
            "content": "Patch with the rbbi files moved from src/test-files/ to src/test/.\n\nCommitting shortly. ",
            "author": "Steve Rowe",
            "id": "comment-13508908"
        },
        {
            "date": "2012-12-03T18:24:18+0000",
            "content": "[trunk commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1416617\n\nSOLR-4123: Add per-script customizability to ICUTokenizerFactory via rule files in the ICU RuleBasedBreakIterator format.\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13508920"
        },
        {
            "date": "2012-12-03T18:36:14+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1416629\n\nSOLR-4123: Add per-script customizability to ICUTokenizerFactory via rule files in the ICU RuleBasedBreakIterator format. (merged trunk r1416617)\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13508930"
        },
        {
            "date": "2012-12-03T18:39:49+0000",
            "content": "Committed to trunk and branch_4x.\n\nThanks Shawn and Robert! ",
            "author": "Steve Rowe",
            "id": "comment-13508933"
        },
        {
            "date": "2013-03-22T16:12:00+0000",
            "content": "[branch_4x commit] Steven Rowe\nhttp://svn.apache.org/viewvc?view=revision&revision=1416629\n\nSOLR-4123: Add per-script customizability to ICUTokenizerFactory via rule files in the ICU RuleBasedBreakIterator format. (merged trunk r1416617) ",
            "author": "Commit Tag Bot",
            "id": "comment-13610470"
        }
    ]
}