{
    "id": "LUCENE-7828",
    "title": "Improve PointValues visitor calls when all docs in a leaf share a value",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "6.7",
            "7.0"
        ]
    },
    "description": "When all the docs in a leaf node have the same value, range queries can waste a lot of processing if the node itself returns CELL_CROSSES_QUERY when compare() is called, in effect performing the same calculation in visit(int, byte[]) over and over again.  In the case I'm looking at (very low cardinality indexed LongRange fields), this causes something of a perfect storm for performance.  PointValues can detect up front if a given node has a single value (because it's min value and max value will be equal), so this case should be fairly simple to identify and shortcut.",
    "attachments": {
        "LUCENE-7828.patch": "https://issues.apache.org/jira/secure/attachment/12870757/LUCENE-7828.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16010649",
            "date": "2017-05-15T14:59:33+0000",
            "content": "I'm trying out a few ideas here; the one I think shows the most promise is to change IntersectVisitor.visit(int, byte[]) to take an array of docids.  This also opens up the possibility of speeding things up when a leaf only contains a few different values. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16012012",
            "date": "2017-05-16T08:52:50+0000",
            "content": "Why does the node return CELL_CROSSES_QUERY if all values from the block match the range? It should return CELL_INSIDE_QUERY and then call visit(int docID) rather than void visit(int docID, byte[] packedValue)? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16012095",
            "date": "2017-05-16T10:07:04+0000",
            "content": "The case here is for INTERSECTS or CONTAINS queries on LongRangeFields.  If the values being stored are ranges, then you can only shortcut CONTAINED-BY queries by looking at the bounding box, for anything else you need to check all values. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16012118",
            "date": "2017-05-16T10:34:01+0000",
            "content": "I think this is more a limitation of the way things are implemented today than a general limitation. Today we only look at the bounding box of all ranges, ie. the minimum min value and the maximum max value. However if we looked for instance at the maximum min value and the minimum max value, we could also shortcut CONTAINS queries? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16012600",
            "date": "2017-05-16T15:39:00+0000",
            "content": "Yes, this looks like it only affects range fields, so the various shortcuts can be implemented in RangeFieldQuery's IntersectVisitor rather than changing the core API.  This change gives me a 35% speedup on this particular dataset:\n\n\n @@ -136,6 +136,11 @@ public void visit(int docID, byte[] leaf) throws IOException {\n                }\n                @Override\n                public Relation compare(byte[] minPackedValue, byte[] maxPackedValue) {\n +                if (Arrays.equals(minPackedValue, maxPackedValue)) {\n +                  if (queryType == QueryType.CONTAINS && comparator.isWithin(minPackedValue)) {\n +                    return Relation.CELL_INSIDE_QUERY;\n +                  }\n +                }\n                  byte[] node = getInternalRange(minPackedValue, maxPackedValue);\n                  // compute range relation for BKD traversal\n                  if (comparator.isDisjoint(node)) {\n\n ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16012634",
            "date": "2017-05-16T15:58:19+0000",
            "content": "Eh, not a bad speedup.  ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16032642",
            "date": "2017-06-01T08:37:27+0000",
            "content": "I worked on a patch that improves range queries on range fields not only by looking at the bounding box of the ranges on inner nodes (min of the lower bounds and max of the upper bounds) like our range query does today but also at points that all ranges match (everything between the max of the lower bound and the min of the upper bound). This way, we are more likely to figure out that either no points match (CELL_OUTSIDE_QUERY) or all of them match (CELL_INSIDE_QUERY). In particular, this should improve Alan Woodward's case that all values in a leaf block share the same value. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16040473",
            "date": "2017-06-07T08:15:35+0000",
            "content": "I'll merge it soon if there are no objections. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16041216",
            "date": "2017-06-07T16:59:43+0000",
            "content": "Commit 792a8799168a58477b3165c11cbf3ab241c1d9f8 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=792a879 ]\n\nLUCENE-7828: Speed up range queries on range fields by improving how we compute the relation between the query and inner nodes of the BKD tree. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16041217",
            "date": "2017-06-07T16:59:47+0000",
            "content": "Commit 528899d845cc9ac73622cc0775667bd0c52cc694 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=528899d ]\n\nLUCENE-7828: Speed up range queries on range fields by improving how we compute the relation between the query and inner nodes of the BKD tree. ",
            "author": "ASF subversion and git services"
        }
    ]
}