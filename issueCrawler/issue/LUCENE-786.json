{
    "id": "LUCENE-786",
    "title": "Extended javadocs in spellchecker",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "general/javadocs"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Added some javadocs that explains why the spellchecker does not work as one might expect it to.\n\nhttp://www.nabble.com/SpellChecker%3A%3AsuggestSimilar%28%29-Question-tf3118660.html#a8640395\n\n> Without having looked at the code for a long time, I think the problem is what the\n> lucene scoring consider to be best. First the grams are searched, resulting in a number\n> of hits. Then the edit-distance is calculated on each hit. \"Genetics\" is appearently the\n> third most similar hit according to Lucene, but the best according to Levenshtein.\n>\n> I.e. Lucene does not use edit-distance as similarity. You need to get a bunch of best hits\n> in order to find the one with the smallest edit-distance.\n\nI took a look at the code, and my assessment seems to be right.",
    "attachments": {
        "spellcheck_javadocs.diff": "https://issues.apache.org/jira/secure/attachment/12349692/spellcheck_javadocs.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-01-26T14:59:08+0000",
            "content": "patch root is trunk/contrib/spellcheck ",
            "author": "Karl Wettin",
            "id": "comment-12467835"
        },
        {
            "date": "2007-03-02T18:29:40+0000",
            "content": "Applied, merci Karl. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12477397"
        },
        {
            "date": "2007-03-03T10:55:38+0000",
            "content": "\nIt might be noteworthy that the spell checker will gather numSug * 10 hits from the a priori corpus. I suppose that number (10) was something the original author came up with when testing. In most cases it is seems to be good enough. In my refactor I've introduced a method parameter for the factor. This is probably a better looking solution than telling the user to increase numSug, as numSug saves a few clock ticks when not adding a suggestion to the priority list.\n\nThe javadocs should probaly state something like that instead. ",
            "author": "Karl Wettin",
            "id": "comment-12477607"
        }
    ]
}