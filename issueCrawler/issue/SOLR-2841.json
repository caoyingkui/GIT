{
    "id": "SOLR-2841",
    "title": "Scriptable UpdateRequestChain",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Later"
    },
    "description": "UpdateProcessorChains must currently be defined with XML in solrconfig.xml. We should explore a scriptable chain implementation with a DSL that allows for full flexibility. The first step would be to make UpdateChain implementations pluggable in solrconfig.xml, for backward compat support.\n\nBenefits and possibilities with a Scriptable UpdateChain:\n\n\tA compact DSL for defining Processors and Chains (Workflows would be a better, less limited term here)\n\tKeeping update processor config separate from solrconfig.xml gives better separations of roles\n\tUse this as an opportunity to natively support scripting language Processors (ideas from SOLR-1725)\n\n\n\nThis issue is spun off from SOLR-2823.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13128966",
            "date": "2011-10-17T16:10:14+0000",
            "content": "The DSL could be based on Groovy, JRuby, Jython or JS. Here's my quasi sketch of a Groovy example from 2823:\n\n...This approach also solves another wish of mine, namely being able to define chains outside of solrconfig.xml. Logically, configuring schema and document processing is done by a \"content\" guy, but configuring solrconfig.xml is done by the \"hardware/operations\" guys. Imagine a solr/conf/pipeline.groovy defined in solrconfig.xml:\n\n\n<updateProcessorChain class=\"solr.ScriptedUpdateProcessorChainFactory\" file=\"updateprocessing.groovy\" />\n\n\n\nupdateprocessing.groovy:\n\nchain simple {\n  process(langid)\n  process(copyfield)\n  chain(logAndRun)\n}\n\nchain moreComplex {\n  process(langid)\n  if(doc.getFieldValue(\"employees\") > 10)\n    process(copyfield)\n  else\n    chain(myOtherProcesses)\n  doc.deleteField(\"title\")\n  chain(logAndRun)\n}\n\nchain logAndRun {\n  process(log)\n  process(run)\n}\n\nprocessor langid {\n  class = \"solr.LanguageIdentifierUpdateProcessorFactory\"\n  config(\"langid.fl\", \"title,body\")\n  config(\"langid.langField\", \"language\")\n  config(\"map\", true)\n}\n\nprocessor copyfield {\n  script = \"copyfield.groovy\"\n  config(\"from\", \"title\")\n  config(\"to\", \"title_en\")\n}\n\n\n\nI don't know what it takes to code such a thing, but if we had it, I'd never go back to defining pipelines in XML  "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-13174566",
            "date": "2011-12-22T02:00:29+0000",
            "content": "+1\n\nAnother use case for scripting at the top level is \"multi-query\" queries:  where the app creates the second based on the first. Would your proposal handle this problem?\n\nMany use cases for grouping/collapsing can be implemented with 2 queries. Perhaps the guts of collapsing could be simplified if the more outr\u00e9 use cases could be pushed out into multiple queries. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13174742",
            "date": "2011-12-22T10:24:09+0000",
            "content": "Interesting idea, but only update side has been considered this far. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13174747",
            "date": "2011-12-22T10:29:37+0000",
            "content": "Another use case for scripting at the top level is \"multi-query\" queries: where the app creates the second based on the first. Would your proposal handle this problem?\n\nSo you mean having scriptable query time logic? That seems a pretty scary thing to get into. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15529303",
            "date": "2016-09-28T11:16:50+0000",
            "content": "Closing this as \"later\" as I am not going to work on it and there has not been much interest either... "
        }
    ]
}