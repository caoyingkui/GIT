{
    "id": "SOLR-1553",
    "title": "extended dismax query parser",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "An improved user-facing query parser based on dismax",
    "attachments": {
        "SOLR-1553.patch": "https://issues.apache.org/jira/secure/attachment/12424685/SOLR-1553.patch",
        "edismax.unescapedcolon.bug.test.patch": "https://issues.apache.org/jira/secure/attachment/12437526/edismax.unescapedcolon.bug.test.patch",
        "edismax.userFields.patch": "https://issues.apache.org/jira/secure/attachment/12437527/edismax.userFields.patch",
        "SOLR-1553.pf-refactor.patch": "https://issues.apache.org/jira/secure/attachment/12429251/SOLR-1553.pf-refactor.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12776133",
            "date": "2009-11-10T22:47:54+0000",
            "content": "Lucid Imagination is contributing back this query parser currently being used at search.lucidimagination.com\n\nThe extended dismax parser was based on the original Solr dismax parser.\n\n\n\tSupports full lucene query syntax in the absence of syntax errors\n\tsupports \"and\"/\"or\" to mean \"AND\"/\"OR\" in lucene syntax mode\n\tWhen there are syntax errors, improved smart partial escaping of special characters is done to prevent them... in this mode, fielded queries, +/-, and phrase queries are still supported.\n\tImproved proximity boosting via word bigrams... this prevents the problem of needing 100% of the words in the document to get any boost, as well as having all of the words in a single field.\n\tadvanced stopword handling... stopwords are not required in the mandatory part of the query but are still used (if indexed) in the proximity boosting part.  If a query consists of all stopwords (e.g. to be or not to be) then all will be required.\n\tSupports the \"boost\" parameter.. like the dismax bf param, but multiplies the function query instead of adding it in\n\tSupports pure negative nested queries... so a query like +foo (-foo) will match all documents\n\n\n\nSome examples of queries that currently give dismax fits that now work with extended dismax:\n  OR\n  AND\n  NOT \n  -\n  \"\n\nExample queries:\nhttp://localhost:8983/solr/select?defType=edismax&q=big+blue+house&pf=text&qf=text&debugQuery=true\n+(((text:big) (text:blue) (text:hous))~3) ((text:\"big blue\") (text:\"blue hous\"))\n\nhttp://localhost:8983/solr/select?defType=edismax&q=hello&pf=text&qf=text&boost=popularity&debugQuery=true\nboost(+(text:hello),int(popularity))\n\nAnd if the text field were configured with the stopfilter only on the query analyzer, then\nhttp://localhost:8983/solr/select?defType=edismax&q=this+is+the+end&pf=text&qf=text&debugQuery=true\n+(((text:end))~1) ((text:\"this is\") (text:\"is the\") (text:\"the end\"))\n\nhttp://localhost:8983/solr/select?defType=edismax&q=how+now+\"brown+cow\"+popularity:100&pf=text&qf=text&debugQuery=true\n+(((text:how) (text:now) (text:\"brown cow\") popularity:100)~4) (text:\"how now\") "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12776192",
            "date": "2009-11-11T00:27:33+0000",
            "content": "Oops, I meant to link the related dismax issues as \"related to\" not \"blocks\"... not sure how to undo it though. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12776488",
            "date": "2009-11-11T16:04:17+0000",
            "content": "I guess one of the main questions is if this should remain separate from dismax, or if it should eventually replace dismax?  If the latter, they could either co-exist for some time and eventually replace, or remain uncommitted before it can replace...\n\nIncompatibilities off the top of my head:\n\n\t\"pf\" creates word bigrams for proximity boosting... we could perhaps change this to \"pf2\" and add in support for the dismax-style pf\n\tfielded queries - dismax doesn't have them, and they may not be desired by all clients\n\tfull lucene syntax - same as above - may not be desired by all clients\n\n\n\nI think the other incompatibilities would mostly fall in the category of bugs, or things that weren't well specified or well behaved anyway (e.g. I don't really see a downside to allowing nested pure negative queries to work) "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12776661",
            "date": "2009-11-11T21:14:02+0000",
            "content": "I think you need to click on \"Issue Links\" link, delete, and re-link.\n\nI have a feeling once this is in, people won't need the original dismax.\n\nYonik, did you mean to attach a patch, but forgot? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12776776",
            "date": "2009-11-12T01:05:16+0000",
            "content": "Yonik, did you mean to attach a patch, but forgot?\n\nHeh... yup.  Here it is. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12777000",
            "date": "2009-11-12T14:01:53+0000",
            "content": "Personally I think this should live independently from dismax.  Having the capability to do field selections from the query string can often be undesirable, if not even a security issue in some cases.  \n\n+1 to keeping them separate, or at least controllable whether the field selection and other crazy query syntax is available or not. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12777289",
            "date": "2009-11-13T00:00:47+0000",
            "content": "I haven't looked at the patch, and i hope to find some time to do so prior to year with a \"3\" in it, but in the meantime...\n\nI guess one of the main questions is if this should remain separate from dismax, or if it should eventually replace dismax?\n\nI think the right way to handle this is to let both classes coexist in the code base, but to start encouraging people to use the new/improved version by changing the default used when defType=dismax ... a note in CHANGES.txt that people who really want the old class should use defType=oldDismax, or explicitly declare the old parsing using the name \"dismax\" seems totally suitable (much as we did with LegacyDateField, and lucenePlusSort.\n\nHaving the capability to do field selections from the query string can often be undesirable, if not even a security issue in some cases.\n\nAssuming the new parser is well written (and i would expect nothing less from all you lucid folks) i imagine it wouldn't take too much work to make all of those various options controllable by params.  if nothing else, an \"escapeTheseChars\" type option would be nice brute force way to disable some stuff. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12777312",
            "date": "2009-11-13T00:59:09+0000",
            "content": "Assuming the new parser is well written (and i would expect nothing less from all you lucid folks) \n\nErrr, well... I wrote it pretty quickly.  Someone was working on a better query parser and this one was more of a \"we need something now\" type of thing.\n\nBut yes, it should be easy to turn off the extra features. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12777322",
            "date": "2009-11-13T01:38:41+0000",
            "content": "Errr, well... I wrote it pretty quickly.\n\nYou can't possibly have written it any more quickly then i did the original dismax parser ... i mean jusus: was so rushed i forgot to test \"AND\" in uppercase, and as a result didn't request the time i needed to do it all the right way.\n\ni think we've all suffered from my poor initial implementation long enough. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12779161",
            "date": "2009-11-17T21:52:21+0000",
            "content": "committed.\nLeaving open for now, as there are unresolved issues, such as if we should point \"dismax\" at this new version.\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12787021",
            "date": "2009-12-07T18:08:31+0000",
            "content": "Thoughts while reading the code...\n\n\n\tthe code is kind of hard to read ... there's a serious dirth of comments\n\treads very kludgy, clearly a hacked up version of DisMax ... probably want to refactor some helper functions (that can then be documented)\n\tthe clause.field and getFieldName functionality is dangerous for people migrating from edismax->dismax (users guessing field names can query on fields the solr admin doesn't want them to query on) ... we need an option to turn that off.\n\t\n\t\tone really nice thing about the field query support though: it looks like it would really be easy to add support for arbitrary field name aliasing with something like f.someFieldAlias.qf=realFieldA^3+realFieldB^4\n\t\tperhaps getFieldName should only work for fields explicitly enumerated in a param?\n\t\n\t\n\twhy is \"TO\" listed as an operator when building up the phrase boost fields? (line 296) ... if range queries are supported, then shouldn't the upper/lower bounds also be striped out of the clauses list?\n\t\n\t\taccepting range queries also seems like something that people should be able to disable\n\t\n\t\n\tapparently \"pf\" was changed to iteratively build boosting phrase queries for every 'pair' of words, and \"pf3\" is a new param to build boosting phrase queries for every 'triple' of words in the input. while this certainly seems useful, it's not back-compatable .. why not restore 'pf' to it's original purpose, and add \"pf2\" for hte pairs?\n\twhat is the motivation for ExtendedSolrQueryParser.makeDismax? ... i see that the boost queries built from the pf and pf3 fields are put in BooleanQueries instead of DisjunctionMaxQueries ... but why? (if the user searches for a phrase that's common in many fields of one document, that document is going to get a huge score boost regardless of the \"tie\" value, which kind of defeats the point of what the dismax parser is trying to do)\n\twe should remove the extremely legacy \"/* legacy logic */\" for dealing with \"bq\" ... almost no one should care about that, we really don't need to carry it forward in a new parser.\n\tthere are a lot of empty catch blocks that seem like they should at least log a warning or debug message.\n\tExtendedAnalyzer feels like a really big hack ... i'm not certain, but i don't think it works correctly if a CharFilter is declared.\n\twe need to document all these new params (\"pf3\", \"lowercaseOperators\", \"boost\",\n\n\n\n\nThoughts while testing it out on some really hairy edge cases that break the old dismax parser...\n\n\n\tthis is really cool\n\tthis is really freaking cool.\n\tstill has a problem with search strings like \"foo &&\" and \"foo ||\" ... i suspect it would be an easy fix to recognize these just like AND/OR are recognized and escaped.\n\tonce we fix some of hte issues mentioned above, we should absolutely register this using the name \"dismax\" by default, and register the old one as \"oldDismax\" with a note in CHANGES.txt telling people to use defType=oldDismax if they really need it.\n\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12793813",
            "date": "2009-12-22T22:20:12+0000",
            "content": "why is \"TO\" listed as an operator when building up the phrase boost fields? (line 296) ... if range queries are supported, then shouldn't the upper/lower bounds also be striped out of the clauses list?\n\nIt seemed incrementally better than leaving it out.\nRange queries aren't actually supported in the fallback mode.  The phrase boosting is also relatively rudimentary.  We could try to recognize range queries and removing the whole thing.\n\ni see that the boost queries built from the pf and pf3 fields are put in BooleanQueries instead of DisjunctionMaxQueries ... but why?\n\nI honestly don't recall (this was written a while ago).\n\nExtendedAnalyzer feels like a really big hack ... i'm not certain, but i don't think it works correctly if a CharFilter is declared.\n\nProbably not - CharFilter didn't exist when this was written.\nShould we use an alternative method for signaling that stopwords are optional?  The nice thing about putting the stopword filter in the query analyzer (and having edismax detect it) is that something like the lucene query parser works as it did in the past... stopwords are removed.  But I could see the other side of the argument too.\n\nAnyway, I think I agree with pretty much everything you say - just haven't had time to do anything about it. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12795741",
            "date": "2010-01-01T08:55:54+0000",
            "content": "incremental patch (against trunk) that i wrote on the plane a few days ago... \n\nrefactors the pf logic and adds comments: pf is restored to it's original meaning in dismax, pf3 does what it did in edismax, and pf2 is added to do what edismax was previously doing with pf.\n\nclear as mud right? ... fortunately the code is much cleaner then the explanation. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12801112",
            "date": "2010-01-16T06:20:23+0000",
            "content": "Yonik (or someone else I guess), would you mind commenting on this claim?:\n\"Improved proximity boosting via word bigrams... this prevents the problem of needing 100% of the words in the document to get any boost, as well as having all of the words in a single field.\"\nI looked through the source and saw the bigram addition using \"SHOULD\"... cool... but I am unaware of the two problems you speak of that this addresses.\n\nBy the way... this thing is slick.  You rock. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12801197",
            "date": "2010-01-16T15:47:34+0000",
            "content": "To answer my own question, the bigram phrasing approach is to address shortcomings in a complete phrase boost. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12802950",
            "date": "2010-01-20T19:26:20+0000",
            "content": "Committed revision 901342.\n...\nthis was the same as my SOLR-1553.pf-refactor.patch with the one addition of restoring the use of DisjunctionMaxQuery for the pf* params (per yonik's comment that he couldn't remember why he changed it)\n\nif we figure out his reason (i'm sure he had one) we can re-evaluate. "
        },
        {
            "author": "Peter Wolanin",
            "id": "comment-12805303",
            "date": "2010-01-27T00:45:39+0000",
            "content": "some commented out debug code left in the committed parser?\n\n\n    protected void addClause(List clauses, int conj, int mods, Query q) {\n//System.out.println(\"addClause:clauses=\"+clauses+\" conj=\"+conj+\" mods=\"+mods+\" q=\"+q);\n      super.addClause(clauses, conj, mods, q);\n    }\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12839892",
            "date": "2010-03-01T22:27:43+0000",
            "content": "On the train this past weekend i started trying to tackle the issue of making support for field based queries (ie: \"fieldA:valueB\") configurable so that it could be turned on/off for certain fields (or left off completely for back-compat with dismax)\n\nBased on yonik's description of edismax, and my initial reading of the code (particularly the use of clause.field and getFieldName in ExtendedDismaxQParser) i was under the impression that if a \"clause\" consisting of FOO:BAR was encountered, and FOO was not a known field, that the clause would be treated as a literal, and the colon would be escaped before passing it on to ExtendedSolrQueryParser ... essentially that FOO:BAR and FOO\\:BAR would be equivalent if FOO is not the name of a real field according to the IndexSchema.\n\nFor reasons I don't fully understand yet, this isn't the case \u2013 as the attached test shows, the queries are parsed differently, and (evidently) FOO:BAR is parsed as an empty query if FOO is not a real field.\n\nBefore I try digging into this too much, I wanted to sanity check:\n\n\tis this expected? ... was this done intentionally?\n\tis this desired? ... is this logical default behavior to have if the field isn't defined? should we have tests to assert this before i start adding more config options to change the behavior?\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12839893",
            "date": "2010-03-01T22:33:56+0000",
            "content": "FWIW: initial steps towards adding a \"uf\" param to let users specify what field names can be specified explicitly in the query string, with optional default boosts to apply to those clauses ... not finished. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12839907",
            "date": "2010-03-01T23:06:28+0000",
            "content": "What does \"u\" in \"uf\" stand for? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12839914",
            "date": "2010-03-01T23:21:58+0000",
            "content": "What does \"u\" in \"uf\" stand for? \n\n\"user fields\" ... as in \"field names a user may refer to\" ... but it's not something i though through to hard, as i said: work in progress. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12846725",
            "date": "2010-03-18T03:00:08+0000",
            "content": "Hmmm, the intention was to try and detect when a ':' meant a fielded query, or if it was a literal.\nSo IIRC, it does look like a bug if it's not working.\n\nA \"uf\" param sounds good. "
        },
        {
            "author": "Jonathan Rochkind",
            "id": "comment-12851700",
            "date": "2010-03-31T02:06:02+0000",
            "content": "Hoss, I would be EXTREMELY interested in the \"uf\" ability to specify only certain fields that may be user-specified (with other field-spec-looking things just escaped, I guess?), and also in another comment you made earlier:\n\n\"one really nice thing about the field query support though: it looks like it would really be easy to add support for arbitrary field name aliasing with something like f.someFieldAlias.qf=realFieldA^3+realFieldB^4\"\n\nThat would be amazing, and make eDismax meet all my needs. Are you still thinking of that, and does your work with the code make it seem any more or less plausible? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12853447",
            "date": "2010-04-05T17:28:56+0000",
            "content": "Jonathan: looking at the code, it seems completely plausible, ant that's the direction i was going down with that previous patch \u2013  but i got hung up on the fact that for reasons i couldn't identify, clauses refering to fieldnames that don't exist in the schema are getting dropped \u2013 need to track down where that is happening and stop it, so the new code can look at those \"field names\" and treat them as aliases (to resolve to other fields)\n\nI just need to find time to dig into it more \u2013 but if you want to take a swing at fixing edismax.unescapedcolon.bug.test.patch and then improving on edismax.userFields.patch, by all means be my guest. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12871244",
            "date": "2010-05-25T16:58:11+0000",
            "content": "Another bug noticed on the user list, edismax doesn't seem to respect MM all the time \u2013 in particular when there are negated clauses...\n\nCompare...\nhttp://localhost:8983/solr/select?debugQuery=true&defType=dismax&qf=text&q=xxx+yyy+zzz+-1234&mm=2\nhttp://localhost:8983/solr/select?debugQuery=true&defType=edismax&qf=text&q=xxx+yyy+zzz+-1234&mm=2 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872417",
            "date": "2010-05-27T22:04:52+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872693",
            "date": "2010-05-27T23:10:48+0000",
            "content": "\nCorrecting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        },
        {
            "author": "Graham P",
            "id": "comment-12892233",
            "date": "2010-07-26T09:36:42+0000",
            "content": "Please ensure that the the edismax does not have old DisMax bug where a query for\n\nbar - foo\n\ngets treated like\n\nbar -foo\n\nUsers do not expect the first query to remove all instances of \"foo\" from their results.  \"-\" meaning \"forbidden\" should only take effect when the \"-\" is followed by a non-whitespace character.  Similarly for +.   Same problem as SOLR-490, but I doubt the necessity of interpreting the original query as a phrase query \"bar - foo\" in order to fix the problem.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12892323",
            "date": "2010-07-26T14:45:35+0000",
            "content": "Interesting... edismax does currently treat (bar - foo) like (bar -foo).\nI didn't code that, so it must be the Lucene query parser.\nI wonder if it has done that forever, and if it was intended? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12899857",
            "date": "2010-08-18T14:28:58+0000",
            "content": "Does anyone remember why we disable coord for the main query? "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-12900412",
            "date": "2010-08-19T19:47:27+0000",
            "content": "I very much like edismax - The \"pf2\" parameter in particular is doing wonders for getting my most relevant documents to the very top of the list in one of my apps. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12907775",
            "date": "2010-09-09T20:34:22+0000",
            "content": "Does edismax handle wildcards, and should it? \n\nTo handle the upper/lower case problem (which extends to character set folding), text and string fields could specify a CharFilter for indexing. Which promptly interacts with faceting because facets come from indexed values, not stored values. "
        },
        {
            "author": "Gunnar Wagenknecht",
            "id": "comment-12921249",
            "date": "2010-10-15T06:36:34+0000",
            "content": "Re: field-based queries (field:value)\n\nI was wonder if it would be possible to add support for explicitly limiting the allowed fields? For example, I'd like to be able to not allow queries in internal fields but only in a defined set of \"public\" fields (eg. GMail recognizes \"to\", \"subject\", etc. but really only those).\n\nAnother nice feature would be alias definitions for fields. This would allow to support localized field names in queries which translate to the real field name. (eg. \"an\" -> \"to\", \"Betreff\" -> \"subject\", \"betreff\" -> \"subject\").\n\nThoughts? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12921563",
            "date": "2010-10-15T21:33:05+0000",
            "content": "Gunnar: this is precisely what i was attempting with the edismax.userFields.patch file but it doesn't work at the moment, probably because of the problem i identified in edismax.unescapedcolon.bug.test.patch  (see previous comments, particularly discussion with Jonathan.\n\nIf you've got some time/energy to dig into those patches and help get them working that would be great "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12925097",
            "date": "2010-10-26T19:19:35+0000",
            "content": "Users do not expect the first query to remove all instances of \"foo\" from their results. \"\" meaning \"forbidden\" should only take effect when the \"\" is followed by a non-whitespace character. \n\nGraham, this has just been fixed in trunk: LUCENE-2566 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12985483",
            "date": "2011-01-24T01:45:32+0000",
            "content": "Heh - one of the issues blocked by this is already resolved. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12994061",
            "date": "2011-02-13T10:23:33+0000",
            "content": "Hi, can we just mark this stuff experimental for 3.1?\n\nIf nobody takes action on this issue within 7 days, \nI plan to add the text to README.txt and move the issue out of 3.1. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12994097",
            "date": "2011-02-13T13:27:23+0000",
            "content": "Hi, can we just mark this stuff experimental for 3.1?\n\n+1 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12994448",
            "date": "2011-02-14T19:42:45+0000",
            "content": "+1 to mark as experimental in 3.1\n\n\n\nThe innards of how this works it totally greek, but tried finding somethign to fix hoss' unescaped patch.  It seems that the root of the problem is that QueryParserBase.parse( String ) will return a BooleanQuery with no clauses for the invalid field query.\n\nQuery res = TopLevelQuery(field);\nreturn res!=null ? res : newBooleanQuery(false);\n\n\nThen the edismax just checks if the parsedQuery is null to see if it is valid.\n\nI tried just returning null from the QueryParserBase, but that (not surprisingly) breaks other tests like TestMultiFieldQueryParser.  I imagine somethign changed here for why it used to work, and now \"mysteriously\" does not.  \n\nAdding a check for empty BooleanQuery fixes this in edismax though:\n\n if( parsedUserQuery instanceof BooleanQuery ) {\n   if( ((BooleanQuery)parsedUserQuery).getClauses().length < 1 ) {\n     parsedUserQuery = null;\n   }\n }\n\n\n\nAll tests pass... but can someone who knows what the ramifications of this change means take a look? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12994781",
            "date": "2011-02-15T13:20:14+0000",
            "content": "I marked this experimental in trunk.\n\nI'll keep the issue open in 3.1 for a few more days as discussed, then i'm moving it out. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12995125",
            "date": "2011-02-16T02:52:07+0000",
            "content": "I'll keep the issue open in 3.1 for a few more days as discussed, then i'm moving it out.\n\nit would be less confusing to just resolve it as fixed, and open new issues to track the outstanding problems/bugs/questions. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12995388",
            "date": "2011-02-16T17:05:07+0000",
            "content": "Resolving.  Improvements can be tracked in a new issue. "
        },
        {
            "author": "David Smiley",
            "id": "comment-12995555",
            "date": "2011-02-16T22:38:04+0000",
            "content": "I'm confused about why this cool query parser I've been using is \"experimental\".  Sure, there are opportunities for improvement, but it's already better than the original dismax which this makes obsolete. No? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12995588",
            "date": "2011-02-16T23:52:21+0000",
            "content": "I'm confused about why this cool query parser I've been using is \"experimental\"\n\nbecause some of it's current \"default\" behavior is less then ideal, particularly for people migrating from dismax (ie: see comments about making field queries configurable) and in a few cases even \"broken\" compared to how it worked when the patch was initially commited (see recent comments about foo:bar when foo is not a field)\n\nin general, marking it experimental is a way to allow us to leave it in the 3.1 release but still have the flexibility to modify the \"default\" behavior moving forward. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12995642",
            "date": "2011-02-17T02:24:05+0000",
            "content": "the 'experimental' label is a flag to say that the behavior will likely change in the future \u2013 since back compatibility is taken so seriously, this allows a way to add features before they are 100% cooked.   "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013182",
            "date": "2011-03-30T15:45:48+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}