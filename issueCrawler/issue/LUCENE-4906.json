{
    "id": "LUCENE-4906",
    "title": "PostingsHighlighter's PassageFormatter should allow for rendering to arbitrary objects",
    "details": {
        "components": [],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "For example, in a server, I may want to render the highlight result to JsonObject to send back to the front-end. Today since we render to string, I have to render to JSON string and then re-parse to JsonObject, which is inefficient...\n\nOr, if (Rob's idea we make a query that's like MoreLikeThis but it pulls terms from snippets instead, so you get proximity-influenced salient/expanded terms, then perhaps that renders to just an array of tokens or fragments or something from each snippet.",
    "attachments": {
        "LUCENE-4906.patch": "https://issues.apache.org/jira/secure/attachment/12593750/LUCENE-4906.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-04-12T10:05:09+0000",
            "content": "Sounds interesting. Is anybody working on this already? I'd like to volunteer. \nWhat do you have in mind exactly? Now the format method returns a string. What would you like to see as output instead? ",
            "author": "Luca Cavanna",
            "id": "comment-13629961"
        },
        {
            "date": "2013-04-12T10:11:27+0000",
            "content": "Luca i dont think anyone is working on it.\n\nI tried about a week ago to do this, but I couldn't figure out how to do it without making the api really ugly: I think thats the challenging part.\n\nSince doing this custom formatting is an expert thing, I think its important that its done in such a way that simple ordinary highlighting use cases don't become more complicated. ",
            "author": "Robert Muir",
            "id": "comment-13629964"
        },
        {
            "date": "2013-04-12T10:23:28+0000",
            "content": "I see! If you couldn't make it how can I make it? \n\nBut the idea is that you could have some kind of object as output instead of a string, like for example an array of tokens plus maybe some more information?\n\nIt would avoid to parse again the string output and somehow re-analyze the text as needed to have a snippet that we could provide as output directly? ",
            "author": "Luca Cavanna",
            "id": "comment-13629973"
        },
        {
            "date": "2013-04-12T15:47:41+0000",
            "content": "Well i didnt try many possibilities, just played for an hour. So more exploration and ideas would be good.\n\nbut here was my high level idea:\nIf we look at PostingsHighlighter, it has 'simple' methods and 'advanced' methods:\n\n/** simple */\nString[] highlight(String field, Query query, IndexSearcher searcher, TopDocs topDocs);\n/** advanced */\nMap<String,String[]> highlightFields(String fieldsIn[], Query query, IndexSearcher searcher, int[] docidsIn, int maxPassagesIn[]);\n\n\n\nI think its important that the simple methods remain simple... but it would be good for 'advanced' users to have formatters that return maybe some more complex stuff.\n\nI think there are a few ways that could be done:\n\n\tinternally formatter returns Object, and the simple methods call toString()\n\tgenerics  Unfortunately to me generics are never simple...\n\tbite the bullet and change all method signatures to return some kind of different \"result\" structure. Maybe this could be done in a way that even simplifies the 'simple' signatures, e.g. maybe its confusing that this thing returns an array in parallel to your topdocs today..\n\tother ideas...\n\n\n\nIn general I also think a nice baby step to making this more flexible is LUCENE-4896. This would be a good one to do first, and i think its much easier and an obvious win! ",
            "author": "Robert Muir",
            "id": "comment-13630207"
        },
        {
            "date": "2013-04-12T16:03:20+0000",
            "content": "Sure, I hadn't seen that issue yet but I was about to propose the same looking at the code.\n\nThanks for your insight!\nI thought about generics too, but then we'd have to be really careful otherwise the generics policeman jumps in  \n\nI'll play around with some ideas and post the results here as soon as I have something. ",
            "author": "Luca Cavanna",
            "id": "comment-13630227"
        },
        {
            "date": "2013-07-23T18:23:05+0000",
            "content": "Here's a simple patch, implementing Robs #1 idea (PassageFormatter.format returns Object, and then add an expert PostingsHighlighter.highlightFieldsAsObjects).\n\nThe change seems minimal and seems to work (I added a basic test) ... ",
            "author": "Michael McCandless",
            "id": "comment-13716689"
        },
        {
            "date": "2013-08-09T10:00:47+0000",
            "content": "Hi Mike,\nI had a look at your patch, looks good to me. Being able to get back arbitrary objects is a great improvement.\n\nThe only thing I would love to improve here is the need to cast the returned Objects to the type that the custom PassageFormatter uses.\n\nWe could work around this using generics, but the fact that the PassageFormatter can vary per field makes it harder. The only way I see to work around this is to prevent the PassageFormatter from returning different types of objects per field. That would mean that even though every field can have his own PassageFormatter, they all must return the same type. It kinda makes sense to me since I wouldn't want to have heterogeneous types in the Map<Integer, Object>, but that is something that's currently possible. What do you think? ",
            "author": "Luca Cavanna",
            "id": "comment-13734623"
        },
        {
            "date": "2013-08-09T10:11:36+0000",
            "content": "I am not sure we should complicate the API? Performance-wise this casting will have marginal effects (if at all), considering it's done, usually, for the top-N documents only for which you compute highlighting...\n\nGenerics, while sometimes are great, some other times actually limit the API. It doesn't feel like PostHighlighter is a good place for generics. ",
            "author": "Shai Erera",
            "id": "comment-13734636"
        },
        {
            "date": "2013-08-09T13:05:27+0000",
            "content": "I don't see why adding generics would complicate or limit the API. To me it would make it simpler and nicer (not a big change in terms of api itself though).\n\nAttaching a patch with my thoughts to make more concrete what I had in mind, regardless of whether it will be integrated or not.\n\nIt's backwards compatible (even though the class is marked experimental): we have an abstract postings highlighter class that does most of the work and returns arbitrary objects (uses generics in order to do so). The PostingsHighlighter is its natural extension that returns String snippets.\n\nI updated Mike's new test according to my changes. It should make it easier to understand what's needed to work with arbitrary objects in terms of code using this approach.\n\nI find it more explicit that if you want to extend the abstract one you have to declare what type the formatter is supposed to return, which makes it more explicit and avoids any cast.\n\nLimitations with this approach: \n1) as mentioned before (to me it's more of a benefit) there cannot be heterogeneous types returned by the same highlighter instance.\n2) generics don't play well with arrays, thus all the highlight methods that returned arrays are still in the subclass that returns string snippets to keep backwards compatibility. Moving them to the base class would most likely require to return List<FormattedPassage> instead (not backward compatible).\n\nI haven't updated the javadoc yet, but if you like my approach I can go ahead with it.\n\nI would love to hear what you guys think about it. Generics can be scary... but useful sometimes too  ",
            "author": "Luca Cavanna",
            "id": "comment-13734745"
        },
        {
            "date": "2013-08-10T20:20:48+0000",
            "content": "Thanks Luca, that patch is nice.\n\nI don't mind the generics ... but I do think this is added complexity (now there are two public classes, and <T> throughout) for what is a supremely expert use case.  This is why I opted initially for the Object + super-expert users simply cast it: it's minimal added complexity.  It also matches the current approach on LUCENE-5133 (though I had started with a class there to break each snippet into the match and non-match parts).\n\nUnfortunately, highlighting APIs seem to quickly become complex / hard to use, and one of the awesome things about this highlighter is its API is very simple compared to the others ... ",
            "author": "Michael McCandless",
            "id": "comment-13736021"
        },
        {
            "date": "2013-08-11T09:19:22+0000",
            "content": "Hi Mike,\nI definitely agree that highlighting api should be simple and the postings highlighter is probably the only one that's really easy to use.\n\nOn the other hand, I think it's good to make explicit that if you use a Formatter<YourObject>, YourObject is what you're going to get back from the highlighter. People using the string version wouldn't notice the change, while advanced users would have to extend the base class and get type safety too, that in my opinion makes it clearier and easier. Using Object feels to me a little old-fashioned and bogus, but again that's probably me \n\nI do trust your experience though. If you think the object version is better that's fine with me. What I care about is that this improvement gets committed soon, since it's a really useful one \n\nThanks a lot for sharing your ideas ",
            "author": "Luca Cavanna",
            "id": "comment-13736240"
        },
        {
            "date": "2013-08-11T09:29:02+0000",
            "content": "One more thing: re-reading Robert's previous comments, I find also interesting the idea he had about changing the api to return a proper object instead of the Map<String, String[]>, or the String[] for the simplest methods. I wonder if it's worth to address this as well in this issue, or if the current api is clear enough in your opinion. Any thoughts? ",
            "author": "Luca Cavanna",
            "id": "comment-13736242"
        },
        {
            "date": "2013-08-13T11:22:01+0000",
            "content": "I think the challenge here is that these are not just \"advanced\" uses;\nthey are super expert uses, and I don't feel like that justifies the\nadded cost of generics for normal users.\n\nThere are definitely times when generics make sense but I don't think\nthis case applies ...\n\nI agree the Object approach is rather old fashioned ... but it should\nstill work for these super expert cases.  So, it's not ideal, but it's\na step forward at least (progress not perfection) ... I'd like to\ncommit the Object approach so we move forward.\n\nIf future use cases emerge that makes the generics use-case more\ncommon we can always re-visit this (this API is experimental; we are\nfree to change it), so none of this is set in stone ... ",
            "author": "Michael McCandless",
            "id": "comment-13738097"
        },
        {
            "date": "2013-08-14T20:01:13+0000",
            "content": "No problem, thanks Mike! ",
            "author": "Luca Cavanna",
            "id": "comment-13740107"
        },
        {
            "date": "2013-09-12T13:01:23+0000",
            "content": "How about committing this? Would be great to have it with the next release! ",
            "author": "Luca Cavanna",
            "id": "comment-13765400"
        },
        {
            "date": "2013-09-12T15:17:41+0000",
            "content": "How about committing this? Would be great to have it with the next release!\n\nThanks for the reminder Luca!  This had fallen off the event horizon of my TODO list ...\n\nBut, I don't think we should put this in 4.5 at the last minute; I'll commit for 4.6. ",
            "author": "Michael McCandless",
            "id": "comment-13765520"
        },
        {
            "date": "2013-09-12T15:17:55+0000",
            "content": "New patch, removing nocommits; I think it's ready. ",
            "author": "Michael McCandless",
            "id": "comment-13765521"
        },
        {
            "date": "2013-09-12T15:34:57+0000",
            "content": "Commit 1522619 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1522619 ]\n\nLUCENE-4906: PostingsHighlighter: add expert API to render highlights to Object ",
            "author": "ASF subversion and git services",
            "id": "comment-13765536"
        },
        {
            "date": "2013-09-12T15:40:12+0000",
            "content": "Commit 1522630 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1522630 ]\n\nLUCENE-4906: PostingsHighlighter: add expert API to render highlights to Object ",
            "author": "ASF subversion and git services",
            "id": "comment-13765542"
        },
        {
            "date": "2013-09-12T18:17:09+0000",
            "content": "Thanks Mike! ",
            "author": "Luca Cavanna",
            "id": "comment-13765726"
        },
        {
            "date": "2013-09-14T02:09:17+0000",
            "content": "Can we fix the visibility of this method to be protected? ",
            "author": "Robert Muir",
            "id": "comment-13767301"
        },
        {
            "date": "2013-09-14T11:05:25+0000",
            "content": "Can we fix the visibility of this method to be protected?\n\nSo that apps that want to use it must subclass PostingsHighlighter?  OK. ",
            "author": "Michael McCandless",
            "id": "comment-13767451"
        },
        {
            "date": "2013-09-14T12:01:13+0000",
            "content": "Commit 1523225 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1523225 ]\n\nLUCENE-4906: make expert Object method protected ",
            "author": "ASF subversion and git services",
            "id": "comment-13767467"
        },
        {
            "date": "2013-09-14T12:01:48+0000",
            "content": "Commit 1523226 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1523226 ]\n\nLUCENE-4906: make expert Object method protected ",
            "author": "ASF subversion and git services",
            "id": "comment-13767469"
        },
        {
            "date": "2013-09-14T17:01:32+0000",
            "content": "Well I think its good for a few reasons:\n1. even though protected still keeps it in javadocs, users who use an IDE and type \"highlighter.\" and wait for autocomplete see less methods in their API. so its still less overwhelming here. This is the most important benefit.\n2. encourages users to e.g. implement their public own method with a proper return value (e.g. JsonObject or whatever it is you are doing). This way there is just one cast from object and its contained inside their custom Highlighter, otherwise there rest of their app is type safe.\n\nand I think the functionality of highlighting to something other than string is sufficiently custom that its not really an imposition. Are there other expert methods in PH that belong in the same category? ",
            "author": "Robert Muir",
            "id": "comment-13767528"
        },
        {
            "date": "2014-01-09T10:49:15+0000",
            "content": "Commit 1556786 from Michael McCandless in branch 'dev/branches/lucene5376'\n[ https://svn.apache.org/r1556786 ]\n\nLUCENE-4906, LUCENE-5376: using the expert 'render to Object' APIs in PostingsHighlighter to render directly to JSONArray in lucene server ",
            "author": "ASF subversion and git services",
            "id": "comment-13866535"
        }
    ]
}