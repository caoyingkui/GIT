{
    "id": "LUCENE-3102",
    "title": "Few issues with CachingCollector",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.2",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "CachingCollector (introduced in LUCENE-1421) has few issues:\n\n\tSince the wrapped Collector may support out-of-order collection, the document IDs cached may be out-of-order (depends on the Query) and thus replay(Collector) will forward document IDs out-of-order to a Collector that may not support it.\n\tIt does not clear cachedScores + cachedSegs upon exceeding RAM limits\n\tI think that instead of comparing curScores to null, in order to determine if scores are requested, we should have a specific boolean - for clarity\n\tThis check \"if (base + nextLength > maxDocsToCache)\" (line 168) can be relaxed? E.g., what if nextLength is, say, 512K, and I cannot satisfy the maxDocsToCache constraint, but if it was 10K I would? Wouldn't we still want to try and cache them?\n\n\n\nAlso:\n\n\tThe TODO in line 64 (having Collector specify needsScores()) \u2013 why do we need that if CachingCollector ctor already takes a boolean \"cacheScores\"? I think it's better defined explicitly than implicitly?\n\n\n\n\n\tLet's introduce a factory method for creating a specialized version if scoring is requested / not (i.e., impl the TODO in line 189)\n\n\n\n\n\tI think it's a useful collector, which stands on its own and not specific to grouping. Can we move it to core?\n\n\n\n\n\tHow about using OpenBitSet instead of int[] for doc IDs?\n\t\n\t\tIf the number of hits is big, we'd gain some RAM back, and be able to cache more entries\n\t\tNOTE: OpenBitSet can only be used for in-order collection only. So we can use that if the wrapped Collector does not support out-of-order\n\t\n\t\n\n\n\n\n\tDo you think we can modify this Collector to not necessarily wrap another Collector? We have such Collector which stores (in-memory) all matching doc IDs + scores (if required). Those are later fed into several processes that operate on them (e.g. fetch more info from the index etc.). I am thinking, we can make CachingCollector optionally wrap another Collector and then someone can reuse it by setting RAM limit to unlimited (we should have a constant for that) in order to simply collect all matching docs + scores.\n\n\n\n\n\tI think a set of dedicated unit tests for this class alone would be good.\n\n\n\nThat's it so far. Perhaps, if we do all of the above, more things will pop up.",
    "attachments": {
        "LUCENE-3102.patch": "https://issues.apache.org/jira/secure/attachment/12479318/LUCENE-3102.patch",
        "LUCENE-3102-nowrap.patch": "https://issues.apache.org/jira/secure/attachment/12479565/LUCENE-3102-nowrap.patch",
        "LUCENE-3102-factory.patch": "https://issues.apache.org/jira/secure/attachment/12479452/LUCENE-3102-factory.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-15T16:43:59+0000",
            "content": "Great catches Shai \u2013 thanks for the thorough review!\n\nSince the wrapped Collector may support out-of-order collection, the document IDs cached may be out-of-order (depends on the Query) and thus replay(Collector) will forward document IDs out-of-order to a Collector that may not support it.\n\nAhh... maybe we throw IllegalArgExc if the replay'd collector requires\nin-order but the first pass collector didn't?\n\nIt does not clear cachedScores + cachedSegs upon exceeding RAM limits\n\nHmm, I think it does clear cachedScores?  (But not cachedSegs).\n\nI think that instead of comparing curScores to null, in order to determine if scores are requested, we should have a specific boolean - for clarity\n\nThat sounds great!\n\nThis check \"if (base + nextLength > maxDocsToCache)\" (line 168) can be relaxed? E.g., what if nextLength is, say, 512K, and I cannot satisfy the maxDocsToCache constraint, but if it was 10K I would? Wouldn't we still want to try and cache them?\n\nOh you mean for the last \"chunk\" we could alloc right up to the limit?\nGood!\n\nThe TODO in line 64 (having Collector specify needsScores()) \u2013 why do we need that if CachingCollector ctor already takes a boolean \"cacheScores\"? I think it's better defined explicitly than implicitly?\n\nYes, I think we should keep the explicit boolean (cacheScores), but eg\nyou could mess up (pass cacheScores = false but then pass a collector\nthat calls .score()) \u2013 that's why I added to TODO.  Ie, it'd be nice\nif we could \"verify\" that the collector agrees we don't need scores.\n\nI think there were other places in Lucene where knowing this up front\ncould help us... can't remember the details.\n\nLet's introduce a factory method for creating a specialized version if scoring is requested / not (i.e., impl the TODO in line 189)\n\n+1\n\nI think it's a useful collector, which stands on its own and not specific to grouping. Can we move it to core?\n\n+1\n\n\nHow about using OpenBitSet instead of int[] for doc IDs?\nIf the number of hits is big, we'd gain some RAM back, and be able to cache more entries\nNOTE: OpenBitSet can only be used for in-order collection only. So we can use that if the wrapped Collector does not support out-of-order\n\nHmm but if the number of hits is small we spend un-needed RAM/CPU,\nbut, then that tradeoff is maybe OK?  I'm just worried about indices\nw/ lots of docs... we could also \"upgrade\" to a bit set part way\nthrough, since it's so clear where the cutoff is.\n\nDo you think we can modify this Collector to not necessarily wrap another Collector? We have such Collector which stores (in-memory) all matching doc IDs + scores (if required). Those are later fed into several processes that operate on them (e.g. fetch more info from the index etc.). I am thinking, we can make CachingCollector optionally wrap another Collector and then someone can reuse it by setting RAM limit to unlimited (we should have a constant for that) in order to simply collect all matching docs + scores.\n\nI'd actually rather not have the constant \u2013 ie, I don't want to make\nit easy to be unlimited?  It seems too dangerous... I'd rather your\ncode has to spell out 10*1024 so you realize you're saying 10 GB (for\nexample).\n\nI think a set of dedicated unit tests for this class alone would be good.\n\n+1\n\nAwesome feedback!!  Are you planning to work up a patch for these...? ",
            "author": "Michael McCandless",
            "id": "comment-13033784"
        },
        {
            "date": "2011-05-15T17:06:06+0000",
            "content": "Hmm, I think it does clear cachedScores? (But not cachedSegs).\n\nSorry, I meant curScores.\n\n+1 (on move to core)\n\nI will start w/ \"svn mv\" this to core, so that later patches on this issue will be applied easily. Moving to core has nothing to do w/ resolving the other issues.\n\nwe could also \"upgrade\" to a bit set part way through, since it's so clear where the cutoff is\n\nyou're right, but cutting off to OBS is dangerous, b/c by doing that we:\n\n\tSuddenly halt search when we create and populate OBS\n\tLose the ability to support out-of-order docs (in fact, depending on the mode and how the query was executed so far, we might not even be able to do the cut-off at all).\nSo I prefer that we make that decision up front, perhaps through another parameter to the factory method.\n\n\n\nbut eg you could mess up (pass cacheScores = false but then pass a collector that calls .score())\n\nOh I see, so this TODO is about the use of cachedScorer (vs. just delegating setScorer to other). I agree.\n\nBTW, this version of cachedScorer is very optimized and clean, but we do have ScoreCachingWrappingScorer which achieves the same goal, only w/ 1-2 more 'if'. Perhaps we should reuse it? But then again, for the purpose of this Collector, cachedScorer is the most optimized it can be.\n\nie, I don't want to make it easy to be unlimited? It seems too dangerous... I'd rather your code has to spell out 10*1024 so you realize you're saying 10 GB (for example).\n\nWhat if you run w/ 16GB Heap? \n\nBut ok, I don't mind, we can spell it out clearly in the jdocs.\n\nAre you planning to work up a patch for these...?\n\nI think so. I'll try to squeeze it in my schedule in the next couple of days. If I see I don't get to it, I'll update the issue. ",
            "author": "Shai Erera",
            "id": "comment-13033787"
        },
        {
            "date": "2011-05-15T17:08:03+0000",
            "content": "I will start w/ \"svn mv\" this to core\n\nOr, we can iterate on all the changes here, then do the svn move as part of the commit. Both work for me. ",
            "author": "Shai Erera",
            "id": "comment-13033788"
        },
        {
            "date": "2011-05-16T11:59:45+0000",
            "content": "Patch includes the bug fixes + test. Still none of the items I listed after 'Also ...'. I plan to tackle that next, in subsequent patches.\n\nQuestion \u2013 perhaps we can commit these changes incrementally? I.e., after we iterate on the changes in this patch, if they are ok, commit them, then do the rest of the stuff? Or a single commit w/ everything is preferable?\n\nMike, there is another reason to separate Collector.needsScores() from cacheScores \u2013 it is possible someone will pass a Collector which needs scores, however won't want to have CachingCollector 'cache' them. In which case, the wrapped Collector should be delegated setScorer instead of cachedScorer.\n\nI will leave Collector.needsScores() for a different issue though? ",
            "author": "Shai Erera",
            "id": "comment-13033983"
        },
        {
            "date": "2011-05-16T12:30:39+0000",
            "content": "Patch looks awesome Shai!\n\nOnly thing is: I would be careful about directly setting those private fields of the cachedScorer; I think (not sure) this incurs an \"access\" check on each assignment.  Maybe make them package protected?  Or use a setter?\n\nQuestion \u2013 perhaps we can commit these changes incrementally?\n\n+1 - progress not perfection!  These changes are great.\n\n\nMike, there is another reason to separate Collector.needsScores() from cacheScores \u2013 it is possible someone will pass a Collector which needs scores, however won't want to have CachingCollector 'cache' them. In which case, the wrapped Collector should be delegated setScorer instead of cachedScorer.\n\nAhh good point, because the 2nd pass collector may not need the scores.  So on the first pass we'd have to forward the .score() request to the wrapped collector but not cache it.\n\nI will leave Collector.needsScores() for a different issue though?\n\n+1\n\nThanks for iterating on this Shai! ",
            "author": "Michael McCandless",
            "id": "comment-13033992"
        },
        {
            "date": "2011-05-16T15:30:26+0000",
            "content": "Only thing is: I would be careful about directly setting those private fields of the cachedScorer; I think (not sure) this incurs an \"access\" check on each assignment. Maybe make them package protected? Or use a setter?\n\nGood catch Mike. I read about it some and found this nice webpage which explains the implications (http://www.glenmccl.com/jperf/). Indeed, if the member is private (whether it's in the inner or outer class), there is an access check. So the right think to do is to declare is protected / package-private, which I did. Thanks for the opportunity to get some education !\n\nPatch fixes this. I intend to commit this shortly + move the class to core + apply to trunk. Then, I'll continue w/ the rest of the improvements. ",
            "author": "Shai Erera",
            "id": "comment-13034060"
        },
        {
            "date": "2011-05-16T16:37:51+0000",
            "content": "Patch looks great Shai \u2013 +1 to commit!!\n\nYes that is very sneaky about the private fields in inner/outer classes \u2013 it's good you added a comment explaining it! ",
            "author": "Michael McCandless",
            "id": "comment-13034091"
        },
        {
            "date": "2011-05-16T20:30:43+0000",
            "content": "Committed revision 1103870 (3x).\nCommitted revision 1103872 (trunk).\n\nWhat's committed:\n\n\tMove CachingCollector to core\n\tFix bugs\n\tAdd TestCachingCollector\n\tSome refactoring\n\n\n\nMoving on to next proposed changes. ",
            "author": "Shai Erera",
            "id": "comment-13034283"
        },
        {
            "date": "2011-05-17T11:38:10+0000",
            "content": "Patch against 3x which:\n\n\n\tAdds factory method to CachingCollector, specializing on cacheScores\n\tClarify Collector.needScores() TODO\n\n\n\nThere are two remaining issues, let's address them after we iterate on this patch. ",
            "author": "Shai Erera",
            "id": "comment-13034728"
        },
        {
            "date": "2011-05-17T16:09:05+0000",
            "content": "Patch looks great!  But, can we rename curupto -> curUpto (and same for curbase)?  Ie, so it matches the other camelCaseVariables we have here...\n\nThank you! ",
            "author": "Michael McCandless",
            "id": "comment-13034841"
        },
        {
            "date": "2011-05-18T04:00:48+0000",
            "content": "Committed revision 1104680 (3x).\nCommitted revision 1104683 (trunk). ",
            "author": "Shai Erera",
            "id": "comment-13035188"
        },
        {
            "date": "2011-05-18T06:51:44+0000",
            "content": "There are two things left to do:\n\n(1) Use bit set instead of int[] for docIDs. If we do this, then it means the Collector cannot support out-of-order collections (which is not a big deal IMO). It also means for large indexes, we might consume more RAM than int[].\n\n(2) Allow this Collector to stand on its own, w/o necessarily wrapping another Collector. There are several ways we can achieve that:\n\n\tTake a 'null' Collector and check other != null. Adds an 'if' but not a big deal IMO. Also, acceptDocsOutOfOrder will have to either return false (or true), or we take that as a parameter.\n\tTake a 'null' Collector and set this.other to a private static instance of a NoOpCollector. We'll still be delegating calls to it, but hopefully it won't be expensive. Same issue w/ out-of-order\n\tCreate two specialized variants of CachingCollector.\n\n\n\nPersonally I'm not too much in favor of the last option - too much code dup for not much gain.\n\nThe option I like the most is the 2nd (introducing a NoOpCollector). We can even introduce it as a public static member of CachingCollector and let users decide if they want to use it or not. For ease of use, we can still allow 'null' to be passed to create().\n\nWhat do you think? ",
            "author": "Shai Erera",
            "id": "comment-13035223"
        },
        {
            "date": "2011-05-18T10:42:40+0000",
            "content": "Patch against 3x:\n\n\tAdds a create() to CachingCollector which does not take a Collector to wrap. Internally, it creates a no-op collector, which ignores everything.\n\tJavadocs for create()\n\tmatching test.\n\n ",
            "author": "Shai Erera",
            "id": "comment-13035280"
        },
        {
            "date": "2011-05-18T10:50:29+0000",
            "content": "The committed CHANGES has typo (reply should be replay). ",
            "author": "Michael McCandless",
            "id": "comment-13035283"
        },
        {
            "date": "2011-05-18T10:55:36+0000",
            "content": "Patch to allow no wrapped collector looks good!  I wonder/hope hotspot can realize those method calls are no-ops...\n\nMaybe change TestGrouping to randomly use this ctor?  Ie, randomly, you can use caching collector (not wrapped), then call its replay method twice (once against 1st pass, then against 2nd pass, collectors), and then assert results like normal.  This is also a good verification that replay works twice...\n\nOn the OBS, it makes me nervous to just always do this; I'd rather have it cutover at some point?  Or perhaps it's an expert optional arg to create, whether it should back w/ OBS vs int[]?\n\nOr, ideally... we make a bit set impl that does this all under the hood (uses int[] when there are few docs, and \"ugprades\" to OBS once there are \"enough\" to justify it...), then we can just use that bit set here. ",
            "author": "Michael McCandless",
            "id": "comment-13035285"
        },
        {
            "date": "2011-05-18T12:39:26+0000",
            "content": "The committed CHANGES has typo (reply should be replay).\n\nThanks, will include it in the next commit.\n\nI'd rather have it cutover at some point\n\nThis can only be done if out-of-order collection wasn't done so far, because otherwise, cutting to OBS will take cached doc IDs and scores out of sync.\n\nwe make a bit set impl that does this all under the hood (uses int[] when there are few docs, and \"ugprades\" to OBS once there are \"enough\" to justify it...)\n\nThat's a good idea. I think we should leave the OBS stuff for another issue. See first how this performs and optimize only if needed.\n\nI'll take a look at TestGrouping. ",
            "author": "Shai Erera",
            "id": "comment-13035344"
        },
        {
            "date": "2011-05-18T15:21:02+0000",
            "content": "Patch adds random to TestGrouping and fixes the CHANGES typo.\n\nMike, TestGrouping fails w/ this seed: -Dtests.seed=7295196064099074191:-1632255311098421589 (it picks a no wrapping collector).\n\nI guess I didn't insert the random thing properly. It's the only place where the test creates a CachingCollector though. I noticed that it fails on the 'doCache' but '!doAllGroups' case.\n\nCan you please take a look? I'm not familiar with this test, and cannot debug it anymore today. ",
            "author": "Shai Erera",
            "id": "comment-13035432"
        },
        {
            "date": "2011-05-18T15:49:01+0000",
            "content": "Patch.\n\nI think I fixed TestGrouping to exercise the \"no wrapped collector\" and \"replay twice\" case for CachingCollector. ",
            "author": "Michael McCandless",
            "id": "comment-13035457"
        },
        {
            "date": "2011-05-18T18:52:10+0000",
            "content": "Thanks Mike. Seems that TestGrouping is indeed fixed.\n\nCommitted revision 1124378 (3x).\nCommitted revision 1124379 (trunk).\n\nResolving this. We can tackle OBS and other optimizations in subsequent issues if the need arises.\n\nThanks Mike ! ",
            "author": "Shai Erera",
            "id": "comment-13035579"
        },
        {
            "date": "2011-05-18T20:15:59+0000",
            "content": "Thanks Shai \u2013 this is awesome progress! ",
            "author": "Michael McCandless",
            "id": "comment-13035637"
        },
        {
            "date": "2011-06-03T16:37:20+0000",
            "content": "Bulk closing for 3.2 ",
            "author": "Robert Muir",
            "id": "comment-13043524"
        }
    ]
}