{
    "id": "LUCENE-2818",
    "title": "abort() method for IndexOutput",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I'd like to see abort() method on IndexOutput that silently (no exceptions) closes IO and then does silent papaDir.deleteFile(this.fileName()).\nThis will simplify a bunch of error recovery code for IndexWriter and friends, but constitutes an API backcompat break.\n\nWhat do you think?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-12-18T03:28:30+0000",
            "content": "but constitutes an API backcompat break\n\nCan abort() have a default impl in IndexOutput, such as close() followed by deleteFile() maybe? If so, then it won't break anything.\n\nAnyway, I think we can make an exception in this case - only those who impl Directory and provide their own IndexOutput extension will be affected, which I think is a relatively low number of applications?\n\nWhat do you think?\n\nWould abort() on Directory fit better? E.g., it can abort all currently open and modified files, instead of the caller calling abort() on each IndexOutput? Are you thinking of a case where a write failed, and the caller would call abort() immediately, instead of some higher-level code? If so, would rollback() be a better name?\n\nI always thought of IndexOutput as a means for writing bytes, no special semantic logic coded and executed by it. The management code IMO should be maintained by higher-level code, such as Directory or even higher (today IndexWriter, but that's what you're trying to remove ).\n\nSo on one hand, I'd like to see IndexWriter's code simplified (this class has become a monster), but on the other, it doesn't feel right to me to add this logic in IndexOutput. Maybe I don't understand the use case for it well though. I do think though, that abort() on IndexOutput has a specific, clearer, meaning, where on Directory it can be perceived as kinda vague (what exactly is it aborting, reading / writing?). And maybe aborting a Directory is not good, if say you want to abort/rollback the changes done to a particular file.\n\nAll in all, I'm +1 for simplifying IW, but am still +0 on transferring the logic to IndexOutput, unless I misunderstand the use case. ",
            "author": "Shai Erera",
            "id": "comment-12972737"
        },
        {
            "date": "2010-12-18T09:51:46+0000",
            "content": "+1 I think this'd be a good simplification of IW/IR code.  I don't mind that IO would know how to delete the partial file it had created; that seems fair.\n\nSo eg CompoundFileWriter would abort its output file on hitting any exception.\n\nI think we can make a default impl that simply closes & suppresses exceptions?  (We can't .deleteFile since an abstract IO doesn't know its Dir).  Our concrete impls can override w/ versions that do delete the file... ",
            "author": "Michael McCandless",
            "id": "comment-12972763"
        },
        {
            "date": "2010-12-18T10:01:23+0000",
            "content": "Can abort() have a default impl in IndexOutput, such as close() followed by deleteFile() maybe? If so, then it won't break anything.\nIt can't. To call deleteFile you need both a reference to papa-Directory and a name of the file this IO writes to. Abstract IO class has neither. If we add them, they have to be passed to a new constructor, and that's an API break \n\nWould abort() on Directory fit better? E.g., it can abort all currently open and modified files, instead of the caller calling abort() on each IndexOutput? Are you thinking of a case where a write failed, and the caller would call abort() immediately, instead of some higher-level code? If so, would rollback() be a better name?\nOh, no, no. No way. I don't want to push someone else's responsibility on Directory. This abort() is merely a shortcut.\n\nLet's go with a usage example:\nHere's FieldsWriter.java with LUCENE-2814 applied (skipping irrelevant parts) - https://gist.github.com/746358\nNow, the same, with abort() - https://gist.github.com/746367 ",
            "author": "Earwin Burrfoot",
            "id": "comment-12972764"
        },
        {
            "date": "2010-12-18T10:04:38+0000",
            "content": "I think we can make a default impl that simply closes & suppresses exceptions? (We can't .deleteFile since an abstract IO doesn't know its Dir). Our concrete impls can override w/ versions that do delete the file...\nI don't think we need a default impl? For some directory impls close() is a noop + what is more important, having abstract method forces you to implement it, you can't forget this, so we're not gonna see broken directories that don't do abort() properly. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12972765"
        },
        {
            "date": "2010-12-18T10:07:17+0000",
            "content": "This change is really minor, but I think, convinient.\n\nYou don't have to lug reference to Directory along, and recalculate the file name, if the only thing you want to say is that write was a failure and you no longer need this file. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12972766"
        },
        {
            "date": "2010-12-18T10:52:41+0000",
            "content": "I offered a default impl just to not break the API. I don't think a default impl is a good option. If we're ok making an exception for 3x as well (I know I am), then I don't think we should have a default impl. ",
            "author": "Shai Erera",
            "id": "comment-12972772"
        },
        {
            "date": "2010-12-18T15:40:24+0000",
            "content": "I think a bw compat exception is fine too! ",
            "author": "Michael McCandless",
            "id": "comment-12972816"
        }
    ]
}