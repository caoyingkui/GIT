{
    "id": "SOLR-1437",
    "title": "DIH: Enhance XPathRecordReader to deal with //tagname and other improvments.",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "As per http://www.nabble.com/Re%3A-Extract-info-from-parent-node-during-data-import-%28redirect%3A%29-td25471162.html it would be nice to be able to use expressions such as //tagname when parsing XML documents.",
    "attachments": {
        "masked_NPE.patch": "https://issues.apache.org/jira/secure/attachment/12421262/masked_NPE.patch",
        "SOLR-1437.patch": "https://issues.apache.org/jira/secure/attachment/12420900/SOLR-1437.patch",
        "putNulls_using_bitset.patch": "https://issues.apache.org/jira/secure/attachment/12421397/putNulls_using_bitset.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12756018",
            "date": "2009-09-16T13:09:06+0000",
            "content": "it may not be viable to target this for 1.4 "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12756051",
            "date": "2009-09-16T14:33:19+0000",
            "content": "A pity we may not make the 1.4 release, but I guess there is no harm in trying!\n\nLooking through the code for XPathRecordReader I see a variable skipNextEvent inside the parse method. Can anybody explain why we need to skip an event at the end of a text block? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12756358",
            "date": "2009-09-17T04:11:18+0000",
            "content": "for any normal event , parser.next(); should be called in each iteration. But for CDATA it should not do so because handling of CDATA itself would have consumed the next event "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12756450",
            "date": "2009-09-17T09:57:59+0000",
            "content": "OK. Would it be bad if I recoded things around a renamed variable \"eventAlreadyFetched\"? IMHO it far more self-explanatory. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12756453",
            "date": "2009-09-17T10:14:43+0000",
            "content": "renaming done in  trunk\n\nlet us be clear about what all do we wish to achieve in wild-card support\n\n\n\tDo we wish to support wild-cards in the forEach parameter\n\tHow to handle the following case\nexample\n\nd=  /a/b/c/d\ne  = //e\n\n\nand if the real  path to the tag e = /a/x/e . it would not really hard to traverse both the paths\n\n\n\nJust keep in mind that It is hard to achieve everything. But is is easy to achieve a subset of features and meet most of the requirements. We are not trying to implement a complete framework for xml handling "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12756469",
            "date": "2009-09-17T10:51:56+0000",
            "content": "Good points.\n\nI am still making sure I understand the existing code completely. Adding lots of comments.\n\nI was not going to allow wild-cards in the forEach parameter. Can you think of a use case?\n\nYour second point is covered. At this point my plan is to scrap skipTag, replacing it with equivalent inline code. Then after I have found some way of recording //tagnames within the node tree (I am considering the fact that currently it is invalid for the rootNode to have attributes; and I was thinking of abusing the rootNode attributes field and using it to store //tagname Node trees). Then where skipTag would currently be called, I would instead compare the parsed localname against the \"attributes\" of the rootTag.\n\nPotential issues I intend to ignored are. If we have: \n\n \ncolumn=\"e\" xpath=\"//e/f[@qualifier='fullTitle']\"\ncolumn=\"d\" xpath=\"/a/b/c/d\" flatten=\"true\"\n\n \n\nand the XML stream contains\n\n \n/a/b/c/d/e...\n\n \nThen I will not populate column 'e'.  Also the expression for column 'd' which is an absolute Xpath takes precedence over that for column 'e'.\n\nThoughts? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12756476",
            "date": "2009-09-17T11:09:26+0000",
            "content": "try not to make too many changes. If you have javadocs in your patch give it as a separate patch and I shall commit it immedietly .  \n\nKeeping the patch small can make it easy for me to review it. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12756477",
            "date": "2009-09-17T11:11:11+0000",
            "content": "I was not going to allow wild-cards in the forEach parameter. Can you think of a use case?\n\nnot required.\n\nIf a path can be reached in a non-wildcard xpath it should take precedence over the wild-card one "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12756781",
            "date": "2009-09-17T20:56:03+0000",
            "content": "A first patch to XPathRecordReader.java. These changes pass \"ant clean test\" and my own test cases. The changes are all about adding or improving comments and JavaDoc. There are very minor code changes where method definitions are changed from single to multiple lines, to allow descriptions to be added against the method arguments.\n\nOne bigger code change involves removal of the skiptag method and its replacement with some in-iine code in the one place it was called from. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12756916",
            "date": "2009-09-18T02:45:50+0000",
            "content": "the patch looks fine.\n\n\n\tIt is not created from the latest trunk. SO it did not apply\n\tRemove the references to Solr (and other stuff like dataSource) in the documentation. XPathRecordReader is completely independent of Solr.  We actually use it extensively in our internal projects for xml parsing\n\n "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12757081",
            "date": "2009-09-18T09:42:19+0000",
            "content": "Good to see you reuse your own code!\n\nThis new patch is the same as the previous version excepting that the references to SOLR and datasource etc have been rewritten.\n\nAlso, Noble, can you check over and review my comments around line 237 in the file XPathRecordReader.java. Is this correct?\n\n\n      } else {\n        // can we ever get here? This means we are collecting for an Xpath\n        // that is outwith any forEach expression\n        if (attributes != null || hasText)\n          valuesAddedinThisFrame = new HashSet<String>();\n        stack.push(valuesAddedinThisFrame);\n      }\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12757091",
            "date": "2009-09-18T10:32:43+0000",
            "content": "committed r816577\nthanks Fergus "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12757795",
            "date": "2009-09-21T03:26:21+0000",
            "content": "Should we just steal the streaming XPath implementation from TIKA? Does it do all we need?\n\nNote that it seems to only be used for their OpenDocument readers, so it might not have the breadth of testing that we would need.\n\nhttp://lucene.apache.org/tika/apidocs/org/apache/tika/sax/xpath/package-tree.html\n\nhttp://issues.apache.org/jira/browse/TIKA-116\nhttp://issues.apache.org/jira/browse/TIKA-129 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12757823",
            "date": "2009-09-21T05:43:50+0000",
            "content": "DIH needs streaming of a records which contain a  bunch of fields.  The Tika one is not designed for that kind of consumption "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12758652",
            "date": "2009-09-23T10:45:45+0000",
            "content": "Noble,\n\nPlaying with the code... some observations I would like confirmed.\n\n1) inside parse() the valuesAddedinThisFrame HashSet and the Stack<Set<String>> stack variables are only used to aid in the clean up after out-puting  record.\n\n2) The code seems unable to collect text for a forEach xpath. So for the following fragment of code\n\n\n    String xml=\"<root>\\n\"\n             + \"  <status>live</status>\\n\"\n             + \"  <contenido id=\\\"10097\\\" idioma=\\\"cat\\\">\\n\"\n             + \"    Cats can be cute\\n\"\n             + \"    <antetitulo></antetitulo>\\n\"\n             + \"    <titulo>\\n           This is my title\\n    </titulo>\\n\"\n             + \"    <resumen>\\n          This is my summary\\n   </resumen>\\n\"\n             + \"    <texto>\\n     This is the body of my text\\n   </texto>\\n\"\n             + \"    </contenido>\\n\"\n             + \"</root>\";\n    XPathRecordReader rr = new XPathRecordReader(\"/root/contenido\");\n    rr.addField(\"cat\"   ,\"/root/contenido\", false); //  ***** FAILS *****\n    rr.addField(\"id\",    \"/root/contenido/@id\", false);\n\n\n\nwe can get the string associated with the id attrbute of <contenido> but not its child text! Is this a design goal, or just the way the code ended up behaving. Do we want it to continue to work this way? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12758663",
            "date": "2009-09-23T11:33:02+0000",
            "content": "it is not an intentional.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12758664",
            "date": "2009-09-23T11:35:07+0000",
            "content": "inside parse() the valuesAddedinThisFrame HashSet and the Stack<Set<String>> stack variables are only used to aid in the clean up after out-puting record.\n\nyes,\n\nthere is a testcase sameForEachAndXpath()  which has same forEach and field. So, something is strange  here "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12758860",
            "date": "2009-09-23T20:08:41+0000",
            "content": "Apologies! my testcase which uses the same Xpath with the forEach and field value works; once I removed the typo!\n "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12759211",
            "date": "2009-09-24T18:53:09+0000",
            "content": "Still trying to understand all the ins and outs of the code! \n\nAround line 250 in XPathRecordReader.java we have the following expression \"recordStarted && !isRecord\". Why is this done? Why do we want to call putText() with a null value? Why do we only call putText Nodes where isRecord is false?\n\n\n      try {\n        if (attributes != null) {\n          for (Node node : attributes) {\n            String value = parser.getAttributeValue(null, node.name);\n            if (value != null || (recordStarted && !isRecord)) {\n              putText(values, value, node.fieldName, node.multiValued);\n              valuesAddedinThisFrame.add(node.fieldName);\n            }\n          }\n        }\n\n "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12759384",
            "date": "2009-09-25T05:37:47+0000",
            "content": "A patch of XPathRecordReader.java adding a few cosmetic changes to comments plus.....\n\nA rewritten core of the parse() method. IMHO it is simpler to understand with the inner while and special paser.next state variable removed and it is probably faster as well.\n\nRearranged method getOrAddChild renaming it to getOrAddNode in preparation for adding support for // construct. This method is called from build().\n\nWhile in build(), renamed local variable \"name\" to \"xpseg\" to better reflect that it holds a segment from an Xpath. And to remove warnings about local variables masking class variables.\n\n\"ant clean test\" runs OK with these changes! "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12760602",
            "date": "2009-09-29T13:17:35+0000",
            "content": "Making good progress! The //expression and its testcase is done and appear to work well. I would have submitted a patch already except that having only altered \"XPathRecordReader.java\" I am now trying to get \"ant clean test\" to stop failing in org.apache.solr.handler.dataimport.TestErrorHandling.\n\nAlso while I do not yet have a total grasp of the code I think it is possible to have XPathRecordReader.java only return fields which are children of the forEach expression when a record is emitted. I consider this desirable and would like to press ahead with this extra change; are there other views?\n\nHaving established that \"Set<String> valuesAddedinThisFrame\" and \"Stack<Set<String>> stack\", in Node are only used for clearing up after a record has been emitted. I am now pondering the purpose of the HashSet childrenFound and putNulls. Any suggestions?\n\nLastly what are the chances of this making the 1.4 release? "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12760624",
            "date": "2009-09-29T14:52:19+0000",
            "content": "XPathRecordReader enhanced to allow use of //abc type expressions. Sorry but there are lots of changes!\n\nLots of comments added which attempt to clarify its operation. Ditto for TestXPathRecordReader where the test strings have been unwrapped and formatted to make them clearer.\n\nPasses all tests except for TestErrorHandling.java which I think is sensitive to the new features. "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12760680",
            "date": "2009-09-29T19:52:03+0000",
            "content": "incorporated SOLR-1465 into this patch! "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12760895",
            "date": "2009-09-30T12:24:27+0000",
            "content": "Fergus can you give the patch updated to trunk? "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12760903",
            "date": "2009-09-30T13:05:42+0000",
            "content": "regenerated patch against latest trunk "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12761118",
            "date": "2009-10-01T07:39:54+0000",
            "content": "removed a few unused lines and formatted at some places.\n\nFergus, I am tempted to make it go in 1.4? \nIt looks largely OK to me. What else do you plan to add ? Do we need more testcases? "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12761124",
            "date": "2009-10-01T07:57:06+0000",
            "content": "I am quite pleased with it as far as it goes and think it would be good for 1.4. I have tested it against my test set of 3000 XML documents and replacing:\n\n\n        <field column=\"para1\" name=\"text\"                xpath=\"/record/sect1/para\" flatten=\"true\"/>\n        <field column=\"para2\" name=\"text\"                xpath=\"/record/list/listitem/para\" flatten=\"true\"/>\n        <field column=\"para32\"     name=\"text\"                        xpath=\"/record/address/para\"  flatten=\"true\" />\n        <field column=\"para40\"     name=\"text\"                        xpath=\"/record/authoredBy/para\"  flatten=\"true\" />\n        <field column=\"para43\"     name=\"text\"                        xpath=\"/record/dataGroup/address/para\"  flatten=\"true\" />\n        <field column=\"para47\"     name=\"text\"                        xpath=\"/record/dataGroup/keyPersonnel/doubleList/first/para\"  flatten=\"true\" />\n        <field column=\"para49\"     name=\"text\"                        xpath=\"/record/dataGroup/keyPersonnel/doubleList/second/para\"  flatten=\"true\" />\n        <field column=\"para50\"     name=\"text\"                        xpath=\"/record/dataGroup/keyPersonnel/para\"  flatten=\"true\" />\n        <field column=\"para51\"     name=\"text\"                        xpath=\"/record/dataGroup/para\"  flatten=\"true\" />\n        <field column=\"para57\"     name=\"text\"                        xpath=\"/record/doubleList/first/para\"  flatten=\"true\" />\n        <field column=\"para59\"     name=\"text\"                        xpath=\"/record/doubleList/second/para\"  flatten=\"true\" />\n        <field column=\"para63\"     name=\"text\"                        xpath=\"/record/keyPersonnel/doubleList/first/para\"  flatten=\"true\" />\n        <field column=\"para65\"     name=\"text\"                        xpath=\"/record/keyPersonnel/doubleList/second/para\"  flatten=\"true\" />\n        <field column=\"para68\"     name=\"text\"                        xpath=\"/record/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para75\"     name=\"text\"                        xpath=\"/record/mediaBlock/doubleList/first/para\"  flatten=\"true\" />\n        <field column=\"para77\"     name=\"text\"                        xpath=\"/record/mediaBlock/doubleList/second/para\"  flatten=\"true\" />\n        <field column=\"para172\"     name=\"text\"                        xpath=\"/record/noteGroup/note/para\"  flatten=\"true\" />\n        <field column=\"para174\"     name=\"text\"                        xpath=\"/record/para\"  flatten=\"true\" />\n        <field column=\"para179\"     name=\"text\"                        xpath=\"/record/relatedInfo/list/listItem/relatedArticle/para\"  flatten=\"true\" />\n        <field column=\"para184\"     name=\"text\"                        xpath=\"/record/sect1/address/dataGroup/para\"  flatten=\"true\" />\n        <field column=\"para185\"     name=\"text\"                        xpath=\"/record/sect1/address/para\"  flatten=\"true\" />\n        <field column=\"para195\"     name=\"text\"                        xpath=\"/record/sect1/dataGroup/address/para\"  flatten=\"true\" />\n        <field column=\"para199\"     name=\"text\"                        xpath=\"/record/sect1/dataGroup/keyPersonnel/doubleList/first/para\"  flatten=\"true\" />\n        <field column=\"para201\"     name=\"text\"                        xpath=\"/record/sect1/dataGroup/keyPersonnel/doubleList/second/para\"  flatten=\"true\" />\n        <field column=\"para202\"     name=\"text\"                        xpath=\"/record/sect1/dataGroup/keyPersonnel/para\"  flatten=\"true\" />\n        <field column=\"para203\"     name=\"text\"                        xpath=\"/record/sect1/dataGroup/para\"  flatten=\"true\" />\n        <field column=\"para208\"     name=\"text\"                        xpath=\"/record/sect1/doubleList/first/para\"  flatten=\"true\" />\n        <field column=\"para212\"     name=\"text\"                        xpath=\"/record/sect1/doubleList/second/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para213\"     name=\"text\"                        xpath=\"/record/sect1/doubleList/second/para\"  flatten=\"true\" />\n        <field column=\"para217\"     name=\"text\"                        xpath=\"/record/sect1/keyPersonnel/doubleList/first/para\"  flatten=\"true\" />\n        <field column=\"para219\"     name=\"text\"                        xpath=\"/record/sect1/keyPersonnel/doubleList/second/para\"  flatten=\"true\" />\n        <field column=\"para220\"     name=\"text\"                        xpath=\"/record/sect1/keyPersonnel/para\"  flatten=\"true\" />\n        <field column=\"para225\"     name=\"text\"                        xpath=\"/record/sect1/list/listItem/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para226\"     name=\"text\"                        xpath=\"/record/sect1/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para240\"     name=\"text\"                        xpath=\"/record/sect1/para\"  flatten=\"true\" />\n        <field column=\"para244\"     name=\"text\"                        xpath=\"/record/sect1/sect2/doubleList/first/para\"  flatten=\"true\" />\n        <field column=\"para246\"     name=\"text\"                        xpath=\"/record/sect1/sect2/doubleList/second/para\"  flatten=\"true\" />\n        <field column=\"para251\"     name=\"text\"                        xpath=\"/record/sect1/sect2/list/listItem/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para252\"     name=\"text\"                        xpath=\"/record/sect1/sect2/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para258\"     name=\"text\"                        xpath=\"/record/sect1/sect2/noteGroup/note/para\"  flatten=\"true\" />\n        <field column=\"para259\"     name=\"text\"                        xpath=\"/record/sect1/sect2/para\"  flatten=\"true\" />\n        <field column=\"para265\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/list/listItem/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para266\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para271\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/para\"  flatten=\"true\" />\n        <field column=\"para275\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/sect4/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para279\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/sect4/para\"  flatten=\"true\" />\n        <field column=\"para284\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/sect4/sect5/para\"  flatten=\"true\" />\n        <field column=\"para295\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/table/tgroup/tbody/row/entry/noteGroup/note/para\"  flatten=\"true\" />\n        <field column=\"para297\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/table/tgroup/tbody/row/entry/para\"  flatten=\"true\" />\n        <field column=\"para301\"     name=\"text\"                        xpath=\"/record/sect1/sect2/sect3/table/tgroup/thead/row/entry/para\"  flatten=\"true\" />\n        <field column=\"para312\"     name=\"text\"                        xpath=\"/record/sect1/sect2/table/tgroup/tbody/row/entry/list/listItem/para\"  flatten=\"true\" />\n        <field column=\"para315\"     name=\"text\"                        xpath=\"/record/sect1/sect2/table/tgroup/tbody/row/entry/noteGroup/note/para\"  flatten=\"true\" />\n        <field column=\"para316\"     name=\"text\"                        xpath=\"/record/sect1/sect2/table/tgroup/tbody/row/entry/noteGroup/para\"  flatten=\"true\" />\n        <field column=\"para318\"     name=\"text\"                        xpath=\"/record/sect1/sect2/table/tgroup/tbody/row/entry/para\"  flatten=\"true\" />\n        <field column=\"para322\"     name=\"text\"                        xpath=\"/record/sect1/sect2/table/tgroup/thead/row/entry/para\"  flatten=\"true\" />\n        <field column=\"para341\"     name=\"text\"                        xpath=\"/record/sect1/table/tgroup/tbody/row/entry/noteGroup/note/para\"  flatten=\"true\" />\n        <field column=\"para342\"     name=\"text\"                        xpath=\"/record/sect1/table/tgroup/tbody/row/entry/noteGroup/para\"  flatten=\"true\" />\n        <field column=\"para344\"     name=\"text\"                        xpath=\"/record/sect1/table/tgroup/tbody/row/entry/para\"  flatten=\"true\" />\n        <field column=\"para348\"     name=\"text\"                        xpath=\"/record/sect1/table/tgroup/thead/row/entry/para\"  flatten=\"true\" />\n        <field column=\"para371\"     name=\"text\"                        xpath=\"/record/table/tgroup/tbody/row/entry/noteGroup/note/para\"  flatten=\"true\" />\n        <field column=\"para373\"     name=\"text\"                        xpath=\"/record/table/tgroup/tbody/row/entry/para\"  flatten=\"true\" />\n        <field column=\"para377\"     name=\"text\"                        xpath=\"/record/table/tgroup/thead/row/entry/para\"  flatten=\"true\" />\n{code]\n\nwith \n\n\n\n       <field column=\"text\"                             xpath=\"//para\" flatten=\"true\"/>\n\n\n\n\nThe indexes seemed equivalent and time to index was also equivalent.\n\nI have one concern which should be addressed before any 1.4 release. I still do not understand the purpose of the HashSet childrenFound and putNulls, if its important then I suspect that whatever is done to childNodes when an end_element is parsed also needs done to descNodes; but I have a feeling the whole lot may be unnecessary and can be removed. If it is required we need to explain it.\n\nThe last change I would like to see, which I am happy to leave to 1.5, involves making sure emitted records do not contain tags from parent nodes unless they are stipulated by \"commonField\" "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12761146",
            "date": "2009-10-01T09:27:35+0000",
            "content": "the putNulls are very important . I can probably add a testcase for that and probably it will be evident to you.\n\none another concern I have with the patch is that every node which is not relevant results in walking up the tree to figure out if there was a wild-card . So even if somebody does not use wild-cards he ends up paying the price. Each node can keep a boolean flag if that branch has a wild-card upstream and this flag has to be set at the time of building the tree. "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12761153",
            "date": "2009-10-01T09:57:54+0000",
            "content": "Re your concern. Correct, i was was also concerned about this, and of course how bad it is depends on the nature of your data and the tree of interesting nodes. However, testing indicated it did not seem to cause to much of an impact. It is not quite as bad as you say; it has to walk up the tree ONCE , not for every node which is not relivent, but rather every time we depart from the list of interesting nodes. Nevertheless your solution is solution is a good one. "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12761496",
            "date": "2009-10-02T07:49:09+0000",
            "content": "I am doing more work on this to:\n\n\timprove performance by avoiding having to walk back up tree\n\tto review use of putNulls\n\tavoid emitting parent nodes of an emitted record\n\n "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12761838",
            "date": "2009-10-03T09:31:59+0000",
            "content": "OK!\n\n\n\tI have a better method of dealing with //* searches.\n\tI think I know how to only emitting fields associated with the current record.\n\tPutNulls: I can see what it is doing but I still dont know why it is needed. I could understand if there was a requirement that every valid hasText node for a record must be defined or null; but I dont think that is what it id doing? Can you help?\n\n "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12761999",
            "date": "2009-10-04T07:24:38+0000",
            "content": "I propose to have this patch which only addresses the //* issue submitted in time for 1.4 and close this issue.\n\nThe other new feature and sorting out pushNulls can be left for later. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762093",
            "date": "2009-10-05T05:51:56+0000",
            "content": "PutNulls: I can see what it is doing but I still dont know why it is needed.\n\nThis is not very useful if you are indexing directly w/o tranformers. Imagine , if you write a transformer which wouldhave to make some business decision if one value is missing, this helps. \n\nI see that you have optimized for the case where no wild card is used .\n\nFergus, I am +tive of putting this into 1.4 (if you are done with it). This is clearly a huge improvment over what was already existing . Whatever other enhancements are required , can be done later. "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12762094",
            "date": "2009-10-05T05:54:07+0000",
            "content": "I am done! "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762107",
            "date": "2009-10-05T07:32:48+0000",
            "content": "There is a crazy bug (i've added a testcase) we need to fix this before committing "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762113",
            "date": "2009-10-05T08:39:29+0000",
            "content": "any_decendent_from_root fails "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762115",
            "date": "2009-10-05T08:45:35+0000",
            "content": "This must be fixed anyway in the trunk . I am not opening another issue because my previous patch includes this fix too "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12762128",
            "date": "2009-10-05T09:40:59+0000",
            "content": "OK, having a look at it right now. "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12762156",
            "date": "2009-10-05T11:40:05+0000",
            "content": "Hmmm, the version I uploaded works. I think that while polishing my code you removed an \"else return;\" from XPathRecordReader.java around line 317. I guess you thought it was a redundant statement, not sure what is going on at all. But I think that code is unchanged from the original. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762158",
            "date": "2009-10-05T12:01:32+0000",
            "content": "the else return; was a bug . look at the mask_NPE patch . finally must not have a return statement it leads to suprression of exceptions "
        },
        {
            "author": "Fergus McMenemie",
            "id": "comment-12762533",
            "date": "2009-10-06T07:19:02+0000",
            "content": "Sorted; added another check for null. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762543",
            "date": "2009-10-06T07:43:23+0000",
            "content": "committed r822154\n\nThanks Fergus "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12762552",
            "date": "2009-10-06T08:10:35+0000",
            "content": "another enhancement to use a BitSet instead of a HashSet "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775876",
            "date": "2009-11-10T15:52:15+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}