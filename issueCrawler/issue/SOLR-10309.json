{
    "id": "LUCENE-7757",
    "title": "Unified highlighter does not highlight wildcard phrases correctly when ComplexPhraseQueryParser is used",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/highlighter"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.4",
        "resolution": "Fixed",
        "status": "Reopened"
    },
    "description": "Given the text:\n\"Kontraktsproget vil v\u00e6re dansk og arbejdssproget kan v\u00e6re dansk, svensk, norsk og engelsk\"\nand the query:\n{!complexphrase df=content_da}(\"sve* no*\")\nthe unified highlighter (hl.method=unified) does not return any highlights.\n\nFor reference, the original highlighter returns a snippet with the expected highlights:\nKontraktsproget vil v\u00e6re dansk og arbejdssproget kan v\u00e6re dansk, <em>svensk</em>, <em>norsk</em> og\n\nIs this expected behaviour with the unified highlighter?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-22T05:08:46+0000",
            "content": "I suspect this is a duplicate of LUCENE-7719 based on the non-ASCII text I see in your example?  In 6.4.3, prefix queries were fixed \u2013 LUCENE-7717 but wildcard queries (not a simple prefix) were pushed off until someone has time to fix. ",
            "author": "David Smiley",
            "id": "comment-15935770"
        },
        {
            "date": "2017-03-27T08:48:51+0000",
            "content": "Yes, most documents (if not all) in our index will have non-ascii characters  (although I'm not sure I can locate them in the example above).\n\nI have tried to index a document without non-ascii characters, but highlighting for that document is still empty.\nAre you saying that the presence of non-ascii characters in the index will mess highlighting up for all documents?\n\nThanks,\nBjarke ",
            "author": "Bjarke Mortensen",
            "id": "comment-15942853"
        },
        {
            "date": "2017-03-29T16:31:15+0000",
            "content": "I got to the bottom of this one; it's tricky.  I see two issues:\n\n1. The UH's PhraseHelper uses WeightedSpanTermExtractor to convert the query to a SpanQuery.  WSTE has no knowledge of  ComplexPhraseQuery so it has some fallback logic.  PhraseHelper overrides isQueryUnsupported but it has a lingering TODO with a return true, thus any any query not known in advance is not going to be highlighted.  I think this should be modified to return false.  I did that locally and I also found it to then be necessary to override getLeafContext() to return a dummy context.  The PH can't produce a real leaf context (here) because this is the stage at which it is merely analyzing the query, no possible wildcard expansion is done (yet).  The query worked in the original Highlighter because there is no split phase.\n\n2. ComplexPhraseQueryParser produces a special Query subclass ComplexPhraseQuery.  CPQ implements rewrite() that also calls rewrite() on the clauses.  It expects a real (not a dummy) leaf context.  So this works from a query execution standpoint, but I think it would be more friendly with the UH if CPQ didn't cascade the rewrite.  It's not a simple matter of commenting out the cascaded rewrite though... I will investigate further when I have more time. ",
            "author": "David Smiley",
            "id": "comment-15947451"
        },
        {
            "date": "2018-09-07T18:22:52+0000",
            "content": "LUCENE-8286 (WEIGHT_MATCHES flag to the UH) fixes this issue. \u00a0Sure; it'd be nice if the above points were addressed but this mechanism works. \u00a0I know you'd rather consume this via SOLR; I filed SOLR-12754 for adding this option. \u00a0Just now I have a test WIP and I see it's fixed. \u00a0I think I'll keep that test at the Solr layer since I'd rather not have the highlighter module depend on some new module it doesn't already depend on. ",
            "author": "David Smiley",
            "id": "comment-16607476"
        },
        {
            "date": "2018-09-08T20:38:36+0000",
            "content": "Thanks for the follow up, had completely forgotten about why we skipped using the unified highlighter.\n\nNow there is a path forward for us. Thanks! ",
            "author": "Bjarke Mortensen",
            "id": "comment-16608201"
        },
        {
            "date": "2018-10-24T14:26:59+0000",
            "content": "I am mistaken.  While the new HighlightFlags.WEIGHT_MATCHES is needed, it is also necessary to override UnifiedHighlighter.getOptimizedOffsetSource to ensure that NONE_NEEDED is never returned.  So there's a work-around at the Lucene level.  Perhaps the root cause is the need for Lucene to have a better Query visiting API and/or means of a way to extract automata in addition to the terms it already extracts.  Debatable.\n\nSee SOLR-12895 for possible Solr-level fixes. ",
            "author": "David Smiley",
            "id": "comment-16662350"
        }
    ]
}