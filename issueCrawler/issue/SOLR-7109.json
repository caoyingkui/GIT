{
    "id": "SOLR-7109",
    "title": "Indexing threads stuck during network partition can put leader into down state",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "affect_versions": "4.10.3,                                            5.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "I found this recently while running some Jepsen tests. I found that some threads get stuck on zk operations for a long time in ZkController.updateLeaderInitiatedRecoveryState method and when they wake up they go ahead with setting the LIR state to down. But in the mean time, new leader has been elected and sometimes you'd get into a state where the leader itself is put into recovery causing the shard to reject all writes.",
    "attachments": {
        "SOLR-7109.patch": "https://issues.apache.org/jira/secure/attachment/12701937/SOLR-7109.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-13T20:09:58+0000",
            "author": "Mark Miller",
            "content": "I ran into a similar issue in SOLR-7065 with the new test I have there.\n\nIt's still exploratory, so I just took that DOWN publish out for the time being. ",
            "id": "comment-14320682"
        },
        {
            "date": "2015-03-02T18:39:49+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Here's a patch which uses ZooKeeper 'multi' transactions to make sure that the LIR state can be set only when the requesting leader node is still alive. This ensures that regardless of how long the network partition lasts (long GC, whatever), the node setting the LIR state must be the leader or else the LIR state cannot be set.\n\nInitially I attempted to use the shard leader path as the 'exists' check in the 'multi' command but this doesn't work because the leader path is always created fresh which means that it's version is always 0 and the check always succeeds regardless of who the current leader is. This is why we must use the election's leader sequence path.\n\nThis is just a first cut of this approach. I intend to refactor some of these LIR methods \u2013 they have become too big. I will also write a test which exercises these new transactional semantics and reproduces the failure.\n\nEdit - I also remove the replicaUrl parameter from ZkController.ensureReplicaInLeaderInitiatedRecovery because replicaProps were already being passed as a parameter and the replica url can be derived from it. ",
            "id": "comment-14343551"
        },
        {
            "date": "2015-03-13T13:35:18+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Patch updated to trunk.\n\nI've been testing with Jepsen on trunk with this patch and it has worked very well. Unfortunately, writing a junit test to simulate this failure is proving to be very difficult. I'm inclined to commit this as-is for now so a code review would be appreciated.\n\nAlso note that this patch doesn't solve the problem of the threads being stuck but it only ensures that the LIR state is written only if the ephemeral sequential election node of the current leader exists. ",
            "id": "comment-14360341"
        },
        {
            "date": "2015-03-13T16:48:27+0000",
            "author": "Anshum Gupta",
            "content": "Looks good Shalin. There's one thing that I'd like to point:\nYou've changed the signature of Zkcontroller.ensureReplicaInLeaderInitiatedRecovery(), which is a public method. Though it's advanced and internal, it's a public method and might break back-compat for developers. ",
            "id": "comment-14360622"
        },
        {
            "date": "2015-03-13T23:17:04+0000",
            "author": "Ramkumar Aiyengar",
            "content": "+1 ",
            "id": "comment-14361295"
        },
        {
            "date": "2015-03-14T00:23:44+0000",
            "author": "Yonik Seeley",
            "content": "You've changed the signature of Zkcontroller.ensureReplicaInLeaderInitiatedRecovery(), which is a public method. Though it's advanced and internal,\n\nThats' fine, we should be able to freely change stuff like that.\n\nRam, was your +1 echoing Anshum's concern? ",
            "id": "comment-14361387"
        },
        {
            "date": "2015-03-14T02:23:59+0000",
            "author": "Mark Miller",
            "content": "I think we need to open an issue to start using annotations for what API's you can count on in Java. We can start labeling most of them internal and open them based on demand, maturity, sensibility, but a plugin writer should have an idea of what API's they can count on and still get support for things like rolling upgrades. Perhaps that just most of the basic SolrCore methods and ZKStateReader methods, but it should be something over time. Eventually it would be nice if basic plugins could survive rolling upgrades if they use some common simple API's.\n\nGiven where things are currently though, these particular types of internal methods - especially those on ZkController, are still under considerable flux. ",
            "id": "comment-14361527"
        },
        {
            "date": "2015-03-14T11:10:47+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Ram, was your +1 echoing Anshum's concern?\n\nSorry, no, it was a +1 overall for the patch.\n\nI agree with you that we should be able to freely change this stuff. As Mark mentions we need to decide on what is considered as API. Personally I feel we should guarantee only the methods and classes used for anything pluggable and in SolrJ (even in SolrJ we should perhaps mark a few things internal). I know people depend on other things, but we shouldn't be burdened with back compact on those. ",
            "id": "comment-14361714"
        },
        {
            "date": "2015-03-14T20:09:42+0000",
            "author": "Anshum Gupta",
            "content": "Sure, I'm +1 about Mark's idea and +1 on the patch too. ",
            "id": "comment-14362001"
        },
        {
            "date": "2015-03-15T18:40:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1666825 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1666825 ]\n\nSOLR-7109: Indexing threads stuck during network partition can put leader into down state ",
            "id": "comment-14362493"
        },
        {
            "date": "2015-03-15T18:41:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1666826 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1666826 ]\n\nSOLR-7109: Indexing threads stuck during network partition can put leader into down state ",
            "id": "comment-14362494"
        },
        {
            "date": "2015-03-15T18:42:15+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks everyone! ",
            "id": "comment-14362495"
        },
        {
            "date": "2015-03-16T05:07:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1666863 from Yonik Seeley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1666863 ]\n\nSOLR-7109: fix java7 compile error ",
            "id": "comment-14362750"
        },
        {
            "date": "2015-03-16T06:03:41+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks for fixing the Java7 error, Yonik! ",
            "id": "comment-14362787"
        },
        {
            "date": "2015-04-15T00:30:06+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495217"
        },
        {
            "date": "2015-09-20T15:16:27+0000",
            "author": "Mark Miller",
            "content": "FYI, we found an issue with this improvement because of how it tries to ensure only a legal replica can put anoither replica into LIR. Working on a fix here in SOLR-8069. ",
            "id": "comment-14899971"
        }
    ]
}