{
    "id": "LUCENE-2750",
    "title": "add Kamikaze 3.0.1 into Lucene",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/other"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "4.5",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Kamikaze 3.0.1 is the updated version of Kamikaze 2.0.0. It can achieve significantly better performance then Kamikaze 2.0.0 in terms of both compressed size and decompression speed. The main difference between the two versions is Kamikaze 3.0.x uses the much more efficient implementation of the PForDelta compression algorithm. My goal is to integrate the highly efficient PForDelta implementation into Lucene Codec.",
    "attachments": {
        "LUCENE-2750.patch": "https://issues.apache.org/jira/secure/attachment/12592049/LUCENE-2750.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-29T20:35:17+0000",
            "content": "This issue (actually its parent - LUCENE-1969) was mentioned in Adrien Grand's \"LUCENE-5081 Compress doc ID sets\".  Is this issue still relevant, Robert Muir, Michael McCandless? ",
            "author": "Otis Gospodnetic",
            "id": "comment-13696193"
        },
        {
            "date": "2013-06-30T10:30:11+0000",
            "content": "I think this is still relevant?  Compressed bit sets should have many compelling uses in Lucene... ",
            "author": "Michael McCandless",
            "id": "comment-13696312"
        },
        {
            "date": "2013-06-30T14:05:20+0000",
            "content": "Agreed. I will perform some evaluation of these impls compared to the one on LUCENE-5081 and the one Paul Elschot is working on to see which ones (potentially all if they offer different useful trade-offs) make sense to include in Lucene. ",
            "author": "Adrien Grand",
            "id": "comment-13696334"
        },
        {
            "date": "2013-07-09T15:38:21+0000",
            "content": "For the record, Daniel Lemire wrote a post about PFOR delta decompression speed at http://lemire.me/blog/archives/2013/07/08/fast-integer-compression-in-java/. I have not dug the reasons that may explain why his implementation is faster than kamikaze or if the benchmark itself is relevant to Lucene but I think it's something worth looking into. ",
            "author": "Adrien Grand",
            "id": "comment-13703385"
        },
        {
            "date": "2013-07-11T14:32:06+0000",
            "content": "FYI I ran his benchmark and the thing is that the version of kamikaze he is using decompresses ints one by one instead of using routines that decompress a full block in one go. Here is the relevant part of the kamikaze code base: https://github.com/linkedin/kamikaze/blob/master/src/main/java/com/kamikaze/pfordelta/PForDelta.java#L114 decompressBBitSlotsWithHardCodes is commented out in favor of decompressBBitSlots. ",
            "author": "Adrien Grand",
            "id": "comment-13705876"
        },
        {
            "date": "2013-07-12T19:03:36+0000",
            "content": "I wrote an implementation of a PForDeltaDocIdSet based on the ones in Kamikaze and D. Lemire's JavaFastPFOR (both are licensed under the ASL 2.0).\n\nOn the contrary to the original implementation, it uses FOR to encode exceptions (this was easier given that we already have lots of utility methods to pack integers). ",
            "author": "Adrien Grand",
            "id": "comment-13707250"
        },
        {
            "date": "2013-07-14T09:56:02+0000",
            "content": "For a moment ignoring the fact Elias-Fano requires ordered input and PFor allows random input:\nPFor normally has better compression than Elias-Fano when the exceptional values have a lot more bits than the normal values that fit in the low bits.\nIn such cases Elias-Fano has to use an upperbound that is too large for effective compression.\n\nAlso Elias-Fano could still be improved by adding block decoding and using that when most of the block is needed. ",
            "author": "Paul Elschot",
            "id": "comment-13707993"
        },
        {
            "date": "2013-07-16T18:02:29+0000",
            "content": "Updated patch: DISI.cost() now returns the cardinality of the set, computed at building time. ",
            "author": "Adrien Grand",
            "id": "comment-13710010"
        },
        {
            "date": "2013-08-09T18:10:59+0000",
            "content": "Updated patch:\n\n\tThe number of exceptions per block (128 documents) is limited to 24 (~20%). Higher values are almost never picked so adding this limit helps make building faster by not taking into consideration numbers of bits per value that would involve more exceptions.\n\tIn order to never be significantly larger than a FixedBitSet, the blocks switch to unary encoding when it saves space.\n\n\n\nI will commit this patch soon if there is no objection. ",
            "author": "Adrien Grand",
            "id": "comment-13735087"
        },
        {
            "date": "2013-08-09T20:25:49+0000",
            "content": "The summary references release 3.0.1, but Kamikaze seems to be up to 3.0.7 now. Is the summary correct, or is a newer Kamikaze intended, or... is this simply a re-implementation of Kamikaze's algorithm rather than integration of some release of Kamikaze? ",
            "author": "Jack Krupansky",
            "id": "comment-13735242"
        },
        {
            "date": "2013-08-09T21:00:12+0000",
            "content": "Hi Jack. Indeed the patch consists more of a reimplementation in order to leverage existing pieces of code we have in Lucene for bit packing and to borrow some ideas from Daniel Lemire's FastPFor (https://github.com/lemire/JavaFastPFOR). ",
            "author": "Adrien Grand",
            "id": "comment-13735299"
        },
        {
            "date": "2013-08-22T07:17:22+0000",
            "content": "Commit 1516375 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1516375 ]\n\nLUCENE-2750: PForDeltaDocIdSet, an in-memory DocIdSet impl based on PFOR encoding. ",
            "author": "ASF subversion and git services",
            "id": "comment-13747331"
        },
        {
            "date": "2013-08-22T07:39:10+0000",
            "content": "Commit 1516380 from Adrien Grand in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1516380 ]\n\nLUCENE-2750: PForDeltaDocIdSet, an in-memory DocIdSet impl based on PFOR encoding. ",
            "author": "ASF subversion and git services",
            "id": "comment-13747339"
        },
        {
            "date": "2013-10-05T10:18:48+0000",
            "content": "4.5 release -> bulk close ",
            "author": "Adrien Grand",
            "id": "comment-13787025"
        }
    ]
}