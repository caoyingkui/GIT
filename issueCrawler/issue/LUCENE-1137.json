{
    "id": "LUCENE-1137",
    "title": "Token type as BitSet: typeBits()",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "New Feature",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "It is sometimes useful to have a more compact, easy to parse, type representation for Token than the current type() String.  This patch adds a BitSet onto Token, defaulting to null, with accessors for setting bit flags on a Token.  This is useful for communicating information about a token to TokenFilters further down the chain.  \n\nFor example, in the WikipediaTokenizer, the possibility exists that a token could be both a category and bold (or many other variations), yet it is difficult to communicate this without adding in a lot of different Strings for type.  Unlike using the payload information (which could serve this purpose), the BitSet does not get added to the index (although one could easily convert it to a payload.)",
    "attachments": {
        "LUCENE-1137.patch": "https://issues.apache.org/jira/secure/attachment/12373293/LUCENE-1137.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-01-16T16:47:41+0000",
            "content": "Added get/setTypeBits() method and underlying storage and constructors. ",
            "author": "Grant Ingersoll",
            "id": "comment-12559575"
        },
        {
            "date": "2008-01-16T17:02:54+0000",
            "content": "Gack!  I recommended a bitset on Token previously, but I meant an elemental one... an int (32 bits) or a long (64 bits).\nHalf of the bits could be reserved for use by Lucene tokenizers, and half could be reserved for users.  I think an actual BitSet is too heavy-weight.\n\nJust provide a int or long Token.getFlags() and int or long Token.setFlags(), and nothing more (we don't need to do bit twiddling for users IMO) ",
            "author": "Yonik Seeley",
            "id": "comment-12559588"
        },
        {
            "date": "2008-01-16T17:10:00+0000",
            "content": "I see two problems with this patch:\n\n1. Although in the patch you say that the \"type bits\" field added by the patch is completely separate from the String type information, you don't name them with sufficiently different names to distinguish them.\n\n2. The information encoded by BitSet is a set of <int,boolean> tuples.  These are opaque values.  In order for this to work, every tokenizer in the chain has to be aware of every other one's use of these.  This makes sharing hard.\n\nAt a minimum, there should be some way to declare who's using what bit for what purpose - maybe through a static hash table or something? ",
            "author": "Steve Rowe",
            "id": "comment-12559589"
        },
        {
            "date": "2008-01-16T17:24:47+0000",
            "content": "\nThe information encoded by BitSet is a set of <int,boolean> tuples. These are opaque values. In order for this to work, every tokenizer in the chain has to be aware of every other one's use of these. This makes sharing hard.\n\nTo some extent, though, the same is true for the current type() functionality.  One may decide to change the type, based on the value of the current type.\n\nWhile I agree the sharing is hard, it is not impossible, as one need just make sure to communicate which bits are available.  I suppose I could see about adding a isClaimed(int position) method or something like that, whereby one can query the chain to see if anyone claims ownership on that position.  I'll give that a try.  However, to some extent, I also think it is buyer beware in that TokenFilters further down the chain just need to be aware of what is going on.  This is part of constructing an Analyzer that works.\n\nAs for the naming, I suppose we could do Flags, as Yonik suggests. ",
            "author": "Grant Ingersoll",
            "id": "comment-12559595"
        },
        {
            "date": "2008-01-16T17:39:32+0000",
            "content": "Never mind on the isClaimed() idea, I don't see a good way of how that would work. ",
            "author": "Grant Ingersoll",
            "id": "comment-12559606"
        },
        {
            "date": "2008-01-16T17:42:14+0000",
            "content": "If we go with the bitset (int or long!!!), \"type\" could be deprecated... there's no reason to have both.\n\nStandardTokenizer could define constants  to replace \npublic static final String [] TOKEN_TYPES = new String [] {\n    \"<ALPHANUM>\",\n    \"<APOSTROPHE>\",\n    \"<ACRONYM>\",\n    \"<COMPANY>\",\n    \"<EMAIL>\",\n    \"<HOST>\",\n    \"<NUM>\",\n    \"<CJ>\"\n};\n\nStandardTokenizer.ALPHANUM, etc ",
            "author": "Yonik Seeley",
            "id": "comment-12559607"
        },
        {
            "date": "2008-01-16T18:41:44+0000",
            "content": "Per feedback from Yonik, changes this to use an int.  The clear() method sets the flags value back to 0. ",
            "author": "Grant Ingersoll",
            "id": "comment-12559627"
        },
        {
            "date": "2008-01-16T19:16:32+0000",
            "content": "Looks like the constructors still take a BitSet???\n\nMy vote is for long instead of int, to maximize forward compatibility... ",
            "author": "Steve Rowe",
            "id": "comment-12559637"
        },
        {
            "date": "2008-01-16T19:30:08+0000",
            "content": "Let's try a patch that actually compiles ",
            "author": "Grant Ingersoll",
            "id": "comment-12559642"
        },
        {
            "date": "2008-01-24T15:01:16+0000",
            "content": "Committed on 614891 ",
            "author": "Grant Ingersoll",
            "id": "comment-12562089"
        }
    ]
}