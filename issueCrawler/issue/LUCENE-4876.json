{
    "id": "LUCENE-4876",
    "title": "IndexWriterConfig.clone should clone the MergeScheduler",
    "details": {
        "components": [],
        "fix_versions": [
            "4.3",
            "4.5",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "ConcurrentMergeScheduler has a List<MergeThread> member to track the running merging threads, so IndexWriterConfig.clone should clone the merge scheduler so that both IndexWriterConfig instances are independant.",
    "attachments": {
        "LUCENE-4876.patch": "https://issues.apache.org/jira/secure/attachment/12575731/LUCENE-4876.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-24T12:17:25+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13612078"
        },
        {
            "date": "2013-03-27T16:56:44+0000",
            "content": "Patch:\n\n\n\tMergeScheduler implements Cloneable\n\n\n\n\n\tIndexDeletionPolicy is now an abstract class (so that it can provide a default clone impl) and implements Cloneable\n\n\n\n\n\tInfoStream implements Cloneable (there is no need for this today but I assumed that some people might be interested to display line numbers or other things that would require adding a state to the InfoStream, I've no strong feeling about it and can remove it if you think it shouldn't implement Cloneable)\n\n\n\n\n\tMergeSchedulers and IndexDeletionPolicies have been fixed so that clones don't share state with the instance they've been cloned from\n\n\n\n\n\tIndexWriterConfig clones mergeScheduler and delPolicy (in addition to mergePolicy, flushPolicy and indexerThreadPool which were already cloned)\n\n\n\n\n\tMost of the patch changes are due to the fact that many tests assumed that the IndexDeletionPolicy instance passed to IndexWriterConfig was the same one as the one used by IndexWriter (which is not true now since IndexWriter clones the provided config in its constructor and we now clone del policies in IndexWriterConfig.clone).\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13615487"
        },
        {
            "date": "2013-03-27T22:02:52+0000",
            "content": "+1, looks great!\n\nIndexDeletionPolicy changed from an interface to abstract class ... I think this is fine (even though it's not marked @lucene.experimental): it's obviously very expert.  Just make sure to advertise this break in the back compat break CHANGES section.\n\nDoes PersistentSnapshotDeletionPolicy need clone() too?  Hmm that doesn't seem straightforward ... (can't clone the open IndexWriter).  Maybe just add to its javadocs that you should never try to share one instance of it across writers? ",
            "author": "Michael McCandless",
            "id": "comment-13615811"
        },
        {
            "date": "2013-03-27T22:22:37+0000",
            "content": "Does PersistentSnapshotDeletionPolicy need clone() too?\n\nAt first, I though about making its clone() method throw an exception but we can't because IndexWriter constructor always clones the provided IndexWriterConfig. I'll add warnings about sharing in the javadocs. ",
            "author": "Adrien Grand",
            "id": "comment-13615839"
        },
        {
            "date": "2013-03-28T16:53:50+0000",
            "content": "New patch:\n\n\n\tAdded CHANGES entries\n\n\n\n\n\tAdded documentation to PersistentSnapshotDeletionPolicy to make clear that instances of this classes must not be shared across IndexWriters\n\n\n\n\n\tSome Solr tests were failing because Solr expects SolrCore.solrDelPolicy to be the same instance as IndexWriter.getConfig().getIndexDeletionPolicy(). There is sensible code relying on it (SnapShooter/ReplicationHandler in particular) so I preferred emulating the old behavior by making IndexDeletetionPolicyWrapper.clone() return 'this' for the moment. This is not a problem because each core has its own private deletion policy and never opens more than one IndexWriter with it.\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13616418"
        },
        {
            "date": "2013-05-10T10:33:16+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653879"
        },
        {
            "date": "2013-06-17T15:00:34+0000",
            "content": "The new requirement to implement clone() is not very well documented in the release notes or in the javadoc, and can silently break things on upgrading ",
            "author": "selckin",
            "id": "comment-13685638"
        },
        {
            "date": "2013-07-24T11:36:57+0000",
            "content": "Alas I'm not sure we did the right thing here; it's very counter intuitive that the IndexDeletionPolicy that you set on your IWC is not the one used by IndexWriter, and it confuses users: http://lucene.markmail.org/thread/ihxkc44ba4mpnkpo\n\nWhy, again, must we clone everything coming off of IWC?  Who is sharing these instances across different IndexWriter instances? ",
            "author": "Michael McCandless",
            "id": "comment-13718258"
        },
        {
            "date": "2013-07-25T19:58:45+0000",
            "content": "Perhaps we can do a minor change \u2013 stop calling IWC.clone() by IW on init. We keep clone() on IWC, and the rest of the objects, and tell users that it's their responsibility to call IWC.clone() before passing to IW? That's line a 1-liner change (well + clarifying the jdocs), that will make 99% of the users happy. The rest should just do new IW(dir, conf.clone()) ... that's simple enough? ",
            "author": "Shai Erera",
            "id": "comment-13719987"
        },
        {
            "date": "2013-07-25T20:00:51+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13719988"
        },
        {
            "date": "2013-07-25T22:10:26+0000",
            "content": "We keep clone() on IWC, and the rest of the objects, and tell users that it's their responsibility to call IWC.clone()\n\n+1 ",
            "author": "Yonik Seeley",
            "id": "comment-13720129"
        },
        {
            "date": "2013-07-26T05:59:27+0000",
            "content": "I thought it will be an easy change, but some tests failed, as they relied on the private cloning. I was able to fix all of them except TestSnapshotDeletionPolicy.testRollbackToOldSnapshot.\n\nI don't know if the test was always buggy, or SDP is buggy, but here's what happens if I don't clone IWC (which I put a nocommit on):\n\n\n\tFirst IW instance is created with the non-cloned SDP, the snapshots (IndexCommit instances) match the ones in the SDP instance. That is, assertSame passes.\n\n\n\n\n\tSecond time we create an IW instance, not cloning IWC, SDP.onInit receives new IndexCommit instances, and swaps them in its map, thereby changing the SDP.commits instances vs the test's snapshots instances, which causes assertSame to fail.\n\n\n\nThis is the result of SDP.onInit which despite already having IC instances, swaps them with the new ones given by IW. I think this is correct, since that's a new IW and we should use the new IndexCommit references. In that case, the test should be relaxed to use assertEquals and not assertSame? I've put a nocommit next to calling assertSnapshotExists \u2013 changed to not check \"same\" IC, and the test passes without cloning ... what do you think? ",
            "author": "Shai Erera",
            "id": "comment-13720442"
        },
        {
            "date": "2013-07-26T07:03:00+0000",
            "content": "We keep clone() on IWC, and the rest of the objects, and tell users that it's their responsibility to call IWC.clone() before passing to IW? That's line a 1-liner change (well + clarifying the jdocs), that will make 99% of the users happy. The rest should just do new IW(dir, conf.clone()) ... that's simple enough?\n\nEven though most users probably don't reuse their IndexWriterConfig objects, doing so should be safe and I'm a little scared of what could happen if a ConcurrentMergeScheduler was mistakenly shared by two different IndexWriters for example.\n\nMaybe another option for this issue would be to replace all these objects (MergePolicy, MergeScheduler, etc.) in IndexWriterConfig by factories for these objects that accept an IndexWriter as an argument (and maybe other objects depending on the factory). This would make it clear that IndexWriter has its own instance of these objects and reusing IndexWriterConfig instances would still be safe. An interesting side-effect is that we wouldn't need these SetOnce<?> in DWPT, FlushPolicy, and MergePolicy anymore, and ConcurrentMergeScheduler.indexWriter could be made final. ",
            "author": "Adrien Grand",
            "id": "comment-13720476"
        },
        {
            "date": "2013-07-26T07:56:37+0000",
            "content": "This is currently impossible because of SetOnce. If you try to share the same IWC between two writers, MP will throw an exception that its IW cannot be set again. I think we're pretty safe. I'm more bothered by having confusing APIs \u2013 take a look at TestSDP (also SearcherAndTaxoRevision!): you create an IWC, want to get a handle to its IndexDelPolicy, yet you cannot do that until after IW has been created and you need to obtain it from its config. Given that most apps probably manage only one IW, and that creating IWC is not heavy, such that you gain anything by reusing it, I think it's ok that IW won't privately clone it? ",
            "author": "Shai Erera",
            "id": "comment-13720512"
        },
        {
            "date": "2013-07-26T08:03:02+0000",
            "content": "This is also encouraging to just 'return this' from clone() in DeletionPolicy, it is how i fixed my app, how solr fixed it, and elasticsearch does it as well, so for future changes you can't even assume the clone is being done, not to mention how cruel it is to expose clone semantics on end-users ",
            "author": "selckin",
            "id": "comment-13720518"
        },
        {
            "date": "2013-07-26T08:07:04+0000",
            "content": "That's right. I view IWC.clone as a service to apps that cannot do new IndexWriterConfig, not a necessity for IW to function properly. ",
            "author": "Shai Erera",
            "id": "comment-13720521"
        },
        {
            "date": "2013-07-26T08:19:06+0000",
            "content": "This is currently impossible because of SetOnce.\n\nThe merge schedulers don't have a SetOnce<IndexWriter> so if a user replaces the MergePolicy and all objects that have a SetOnce in its IndexWriterConfig and forgets the merge scheduler, the problem remains.\n\nI don't really like this SetOnce<?> trick. If a variable should only be set once, it should be final and set in the constructor?\n\nhow cruel it is to expose clone semantics on end-users\n\nI fully agree. In this issue I tried to make clone consistently used across stateful objects held by an IndexWriterConfig object but ideally IndexWriterConfig should only carry stateless objects (in particular none of them should have an IndexWriter as a member) so that we never need to clone it or any of its members when reusing it. ",
            "author": "Adrien Grand",
            "id": "comment-13720526"
        },
        {
            "date": "2013-07-26T11:05:04+0000",
            "content": "The purpose behind IWC was to centralize all IW setters and ctors into one config object. This is not only about IW being a member of MP or not. There are other settings which you many not want to share with other IWs. I think we should have a SetOnce(IndexWriter) (or AtomicBoolean isUsed) members on IWC which IW will set in the ctor. That will prevent sharing IWC with anything else. It's a fast enough detection. I think I'll do that. Let's also remember that most likely apps are NOT sharing IWC, or reusing one. And those that need to create multiple instances, should have no problem creating new instances of IWC (even without calling clone).\n\nAs for making the rest of the classes stateless ... it may work for MP, but IDP such as Snapshot maintains state. What will you do then?\n\nWe should go for the simplest solution. I'll try to make the changes to IWC so that it's not share-able. ",
            "author": "Shai Erera",
            "id": "comment-13720656"
        },
        {
            "date": "2013-07-26T11:43:55+0000",
            "content": "Patch adds a SetOnce<IndexWriter> to IWC. IW now sets itself on the given conf in the ctor. Some tests had to be adjusted to clone their IWC. I think it's quite simple.\n\nCore tests pass, I'll run the rest. I also need to resolve the nocommit around SnapshotDeletionPolicy. ",
            "author": "Shai Erera",
            "id": "comment-13720699"
        },
        {
            "date": "2013-07-26T12:50:00+0000",
            "content": "In that case, the test should be relaxed to use assertEquals and not assertSame?\n\n+1 ",
            "author": "Michael McCandless",
            "id": "comment-13720752"
        },
        {
            "date": "2013-07-26T12:54:50+0000",
            "content": "All tests pass (including Lucene and Solr). I also resolved the nocommit by modifying the test. It tests rolling back the index, it shouldn't care about whether the IndexCommit being snapshotted is the exact same reference. Also, SDP seems to be working correctly by updating the IC reference. It makes no sense to use an old reference.\n\nSo now you cannot share IWC because of the SetOnce<IndexWriter). Users cannot make a mistake, yet simple apps don't need to do weird things to get a handle to the objects they set on IWC.\n\nIf there are no objections, I will commit it. ",
            "author": "Shai Erera",
            "id": "comment-13720756"
        },
        {
            "date": "2013-07-26T13:56:14+0000",
            "content": "The SetOnce<IndexWriter> on IWC addresses my main concern. Thanks Shai! ",
            "author": "Adrien Grand",
            "id": "comment-13720806"
        },
        {
            "date": "2013-07-26T14:26:54+0000",
            "content": "+1, patch looks great.  Thanks Shai! ",
            "author": "Michael McCandless",
            "id": "comment-13720830"
        },
        {
            "date": "2013-07-27T19:01:06+0000",
            "content": "Commit 1507704 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1507704 ]\n\nLUCENE-4876: don't clone IndexWriterConfig by IndexWriter; prevent config from being shared with multiple writers ",
            "author": "ASF subversion and git services",
            "id": "comment-13721719"
        },
        {
            "date": "2013-07-27T19:08:17+0000",
            "content": "Commit 1507705 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1507705 ]\n\nLUCENE-4876: don't clone IndexWriterConfig by IndexWriter; prevent config from being shared with multiple writers ",
            "author": "ASF subversion and git services",
            "id": "comment-13721720"
        },
        {
            "date": "2013-07-27T19:08:48+0000",
            "content": "Committed to trunk and 4x. Thanks Mike and Adrien! ",
            "author": "Shai Erera",
            "id": "comment-13721722"
        },
        {
            "date": "2013-10-05T10:19:01+0000",
            "content": "4.5 release -> bulk close ",
            "author": "Adrien Grand",
            "id": "comment-13787064"
        }
    ]
}