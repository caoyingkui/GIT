{
    "id": "SOLR-6889",
    "title": "Highlight using multiple threads",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I think we could gain search performance a little bit using Stream.parallel().forEach()~ which has processors awareness via f/j framework under the hood.\nEspecially it would affect docList's for-loop processes, e.g. debugging, highlighting.\nIt seems to me that this improvement is effective for many CPUs environment.\n\nMy test condition:\n1. Core i5(2core 4thead), standalone Solr.\n2. q=\u65e5\u672c&debug=true&hl=true, other parameters are here.\n3. 7171 hits / 12000 docs(taken from ja.wikipedia dump)\n4. compared to trunk, parallel streams are faster a little.\n\nMy query execution results(QTime):\n\n== rows=10 ==\n    trunk  patch \n1st 236    146\n2nd 179    100\n3rd 79     72\n4th 75     53\n5th 91     80\n\n== rows=50 ==\n    trunk  patch \n1st 485    325\n2nd 225    243\n3rd 199    151\n4th 168    127\n5th 149    118\n\n== rows=100 ==\n    trunk  patch \n1st 948    607\n2nd 472    390\n3rd 237    201\n4th 256    200\n5th 224    178\n\n== rows=500 ==\n    trunk  patch \n1st 3248   2826\n2nd 1545   1067\n3rd 1563   801\n4th 1551   816\n5th 1452   777",
    "attachments": {
        "SOLR-6889.patch": "https://issues.apache.org/jira/secure/attachment/12689114/SOLR-6889.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-25T13:47:35+0000",
            "author": "Shinichiro Abe",
            "content": "simple patch. please catch this. ",
            "id": "comment-14258753"
        },
        {
            "date": "2017-07-12T03:38:09+0000",
            "author": "David Smiley",
            "content": "I've done this before and it can make a big difference for some use-cases.  Then I worked on the UnifiedHighlighter and I never got around to adding support for that since it was plenty fast as-is for the use-case I was focusing on.  I'd be interested to hear if threading the UH is worth doing from anyone who tries adding it. The UH allows you to do things like put offsets in postings to speed up highlighting a ton, and so adding threading became super low priority. ",
            "id": "comment-16083381"
        },
        {
            "date": "2017-07-12T03:39:12+0000",
            "author": "David Smiley",
            "content": "Oh, and by sharding your data more you get some amount of threading automatically.  So this also lowers the usefulness of adding threading. ",
            "id": "comment-16083382"
        },
        {
            "date": "2017-07-12T18:58:54+0000",
            "author": "Shinichiro Abe",
            "content": "I agree. But could it make much faster by being parallelized when using FieldOffsetStrategy#getOffsetsEnums(), especially OffsetSource.ANALYSIS strategy case, i.e. storeOffsetsWithPositions = false case in which user can select fields to highlight after indexing? I assumed text analysis work, which the standard highlighter has, would be able to be parallelized, borrowed by an idea of facet.threads method at that time. Although I saw a benchmark where UH's offsetSource=ANALYSIS is already much faster than the standard one. ",
            "id": "comment-16084502"
        },
        {
            "date": "2017-07-12T20:02:51+0000",
            "author": "David Smiley",
            "content": "I do think there would be a benefit for some cases, yes.  ANALYSIS offset source most likely, perhaps also with lots of fields to highlight to add to the workload. ",
            "id": "comment-16084589"
        }
    ]
}