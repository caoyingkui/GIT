{
    "id": "LUCENE-4746",
    "title": "Create a move method in Directory.",
    "details": {
        "components": [],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "I'd like to make a move method for directory.\n\nWe already have a move for Solr in DirectoryFactory, but it seems it belongs at the directory level really.\n\nThe default impl can do a copy and delete, but most implementations will be able to optimize to a rename.\n\nBesides the move we do for Solr (to move a replicated index into place), it would also be useful for another feature I'd like to add - the ability to merge an index with moves rather than copies. In some cases, you don't need/want to copy all the files and could just rename/move them.",
    "attachments": {
        "LUCENE-4746.patch": "https://issues.apache.org/jira/secure/attachment/12567730/LUCENE-4746.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-02-02T13:57:17+0000",
            "content": "I'm not sure we should do this: I think Directory should have only he methods necessary for Lucene, and we should minimize those methods as much as possible.\n\nWe used to have 'rename' and we removed it because it was problematic in some cases. ",
            "author": "Michael McCandless",
            "id": "comment-13569552"
        },
        {
            "date": "2013-02-02T14:35:03+0000",
            "content": "I think Directory should have only he methods necessary for Lucene\n\nThis is useful for Lucene if you want to copy but don't need to keep around the source file. Something very useful for addIndexes.\n\nWe used to have 'rename' and we removed it because it was problematic in some cases.\n\nThis is different than a rename method as described above and you don't describe how any of those problems would apply to a move method.\n\nwe should minimize those methods as much as possible\n\nThat's not really an argument against adding this feature. ",
            "author": "Mark Miller",
            "id": "comment-13569560"
        },
        {
            "date": "2013-02-02T14:56:00+0000",
            "content": "\nThis is useful for Lucene if you want to copy but don't need to keep around the source file. Something very useful for addIndexes.\n\nFor copy-free addIndexes(Directory...) we could improve FSDir's copy(Directory, String, String) impl to try to create a hard link, and the existing impl would work.\n\nBut on windows i think by default links dont work unless you are administrator, and some other obscure filesystems probably dont support links either (but do support rename).\n\nAnd we'd need to be fully on java7 (i think?).\n\nSo maybe we need a moveIndexes(Directory...) It could acquire the write lock on all the source Directories and just move instead of copy (otehrwise its like addIndexes).\n ",
            "author": "Robert Muir",
            "id": "comment-13569562"
        },
        {
            "date": "2013-02-02T15:14:01+0000",
            "content": "So maybe we need a moveIndexes(Directory...) \n\n+1 - this is my motivation - moveIndexes  ",
            "author": "Mark Miller",
            "id": "comment-13569566"
        },
        {
            "date": "2013-02-02T15:52:41+0000",
            "content": "here's a prototype.\n\nMy main concerns are:\n\n\t3.0 formatted indexes with shared doc stores. We shouldnt support this. throwing exception when we see it makes the method more dangerous / doing an extra-pass to detect it = unacceptable (this is the kind of hairiness we must avoid).\n\tI dont want a slow (but safe) addIndexes and a fast (but unsafe) moveIndexes. So if we do this, i want java7 as a minimum requirement so we can at least try to create a hard link in Directory.copy() to make addIndexes fast too.\n\n\n\nTo me, these both suggest trunk-only, but i'm open to other ideas.  ",
            "author": "Robert Muir",
            "id": "comment-13569573"
        },
        {
            "date": "2013-02-02T16:01:15+0000",
            "content": "OK, I agree IndexWriter.moveIndices would be a nice addition to\nLucene, and that we'll need to bring back Directory.rename/move to do\nit efficiently.\n\n3.0 formatted indexes with shared doc stores. We shouldnt support this.\n\n+1\n\nI dont want a slow (but safe) addIndexes and a fast (but unsafe) moveIndexes. So if we do this, i want java7 as a minimum requirement so we can at least try to create a hard link in Directory.copy() to make addIndexes fast too.\n\nNo matter what moveIndexes will be unsafe right?  Meaning if you hit an exc part way through then some or all of your source indices are corrupt ... the dest index should be fine though (and, should only reflect all or none of the additions I think).\n\n+1 for hard link via Dir.copy; that would be nice!  Should we just require Java 7 on trunk now...? ",
            "author": "Michael McCandless",
            "id": "comment-13569574"
        },
        {
            "date": "2013-02-02T16:03:16+0000",
            "content": "another tricky thing (at least i didnt think about it yet) is how to nuke all the commit points in the src dirs referring to the files we nuked \n\nIn general i dont think the patch works, i just wanted to show what API i was suggesting. ",
            "author": "Robert Muir",
            "id": "comment-13569575"
        },
        {
            "date": "2013-02-02T16:06:37+0000",
            "content": "\nNo matter what moveIndexes will be unsafe right? Meaning if you hit an exc part way through then some or all of your source indices are corrupt ... the dest index should be fine though (and, should only reflect all or none of the additions I think).\n\nYeah at least i think it has to be. even if added complex crap and tried to move files back etc, someone could run out of disk space during the process or all kinds of other possibilities.\n\nI think in general speeding up addIndexes to be more efficient (and still safe) is most attractive. But i know some systems cant support hard linking so i think it would be good to have a more generally fast method for them. Maybe there is a way it wouldnt have to be on indexwriter as well (but a tool in contrib), i dont know. ",
            "author": "Robert Muir",
            "id": "comment-13569576"
        },
        {
            "date": "2013-02-02T16:06:38+0000",
            "content": "Should we just require Java 7 on trunk now...\n\n+1 - security updates for Java 6 stop next month. Trunk to java 7 seems right on time...\n\nto me, these both suggest trunk-only\n\nI don't have a strong opinion this early. Initially, doesn't seem like a problem to me.  ",
            "author": "Mark Miller",
            "id": "comment-13569577"
        },
        {
            "date": "2013-02-02T16:25:50+0000",
            "content": "+1 for Java 7. I would open some issues to update syntax sugar and fix some reflection-based hacks (e.g. IOUtils.addSuppressed). ",
            "author": "Uwe Schindler",
            "id": "comment-13569581"
        },
        {
            "date": "2013-02-02T16:26:38+0000",
            "content": "I will split out a new JIRA issue for this! ",
            "author": "Robert Muir",
            "id": "comment-13569582"
        },
        {
            "date": "2013-07-23T18:44:50+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717073"
        },
        {
            "date": "2014-04-16T12:54:40+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970839"
        },
        {
            "date": "2014-12-30T18:45:31+0000",
            "content": "Here is a simpler patch that just optimizes FSDirectory.copy() to use hard links when possible. If its not supported, we just fall back to what we do today. ",
            "author": "Robert Muir",
            "id": "comment-14261349"
        },
        {
            "date": "2014-12-30T18:53:04+0000",
            "content": "By the way, first we need to fix Directory.copy. I really hate that the signature is: \n\n\ncopy(Directory to, String src, String dest, IOContext context)\n\n\n\nThis makes such a thing ridiculous to test, because we don't call the method on the directory that will actually be modified.\n\nInstead I think it should be copyFrom(Directory sourceDir, ...) ? ",
            "author": "Robert Muir",
            "id": "comment-14261352"
        },
        {
            "date": "2014-12-30T20:23:04+0000",
            "content": "A few more problems, it wont work with MDW correctly unless we deal with stale file maps (or MDW knows that linking is happening).\n\nWe also need to look into what this is about, maybe its solved in the JDK:\n\n\nBUGS\n       On NFS filesystems, the return code may be wrong in case the NFS server performs the link creation and dies before it can say so.  Use  stat(2)  to  find\n       out if the link got created.\n\n ",
            "author": "Robert Muir",
            "id": "comment-14261457"
        },
        {
            "date": "2014-12-31T00:48:02+0000",
            "content": "I opened LUCENE-6146 to fix the api first.\n\nI have more concerns about allowing hard links on os X (http://arstechnica.com/apple/2011/07/mac-os-x-10-7/12/) or even using them at all, because its not obvious and at least could be hellacious for tests (dir A calls crash() on a file its done with but dir B is still using, etc). \n\nMaybe as a first step, we should optimize this to use Files.copy? its a conservative and safer step and can be faster depending on the OS, on windows it calls a special method, on linux etc its a read-write loop in JNI. ",
            "author": "Robert Muir",
            "id": "comment-14261741"
        },
        {
            "date": "2014-12-31T12:06:22+0000",
            "content": "Hi as discussed yesterday in Hangouts: I think we should for now only add the optimization using Files.copy(), but only if the source directory extends FSDirectory. We should not do any unwrapping or whatever. As this optimization mainly only affects index merging (copy/copyFrom is solely used by IndexWriter#addIndexes(Directory...) and replication code, where users in most cases don't wrap directoryies.\n\nPlease note: Personally, I hate those Directory.unwrap() method, because it can lead to bugs! At least (unrelated to this issue), we should add a WARNING to the javadocs of this method, that you should onlyuseit for \"inspection\" to autodetect some specific properties (like spinning disk), but never-ever unwarp and then start to call methods like openInput/openOutput/... I just mention this here, if we would unwrap and then call FSDirectory#copyFrom this would break all FilterDirectories that, for example, encrypt/decrypt index data! So we can only optimize file copy if both directories are FSDirectory.\n\nIf we write tests for this, we should ensure, that we don't wrap Directory instances by test framework, so we can really test the FSDirectory specific copyFrom() implementation. ",
            "author": "Uwe Schindler",
            "id": "comment-14262129"
        },
        {
            "date": "2014-12-31T15:10:39+0000",
            "content": "What is the rant about unwrapping? There is no unwrapping in my patch. I have not and will not touch any unwrap method here on this issue. I didn't even know it existed. ",
            "author": "Robert Muir",
            "id": "comment-14262233"
        },
        {
            "date": "2014-12-31T15:12:43+0000",
            "content": "Sorry, I don't have the energy for this optimization. Its not worth it to me. ",
            "author": "Robert Muir",
            "id": "comment-14262235"
        },
        {
            "date": "2014-12-31T15:40:23+0000",
            "content": "What is the rant about unwrapping? There is no unwrapping in my patch. I have not and will not touch any unwrap method here on this issue. I didn't even know it existed.\n\nWas not about your patch. I will open another issue obout this horrible unwrap method. Its a bad sign, does not affect this issue. I was just looking for a solutions for the instanceof shit. ",
            "author": "Uwe Schindler",
            "id": "comment-14262257"
        },
        {
            "date": "2014-12-31T16:42:52+0000",
            "content": "I opened one: LUCENE-6154\n\nWe need to fix bugs like this first before thinking about optimizations. Stuff like stale files map and all that makes anything like this too dangerous. I am glad its getting fixed. ",
            "author": "Robert Muir",
            "id": "comment-14262293"
        }
    ]
}