{
    "id": "LUCENE-5350",
    "title": "Add Context Aware Suggester",
    "details": {
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "core/search"
        ],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "It would be nice to have a Context Aware Suggester (i.e. a suggester that could return suggestions depending on some specified context(s)).\n\nUse-cases: \n\n\tlocation-based suggestions:\n\t\n\t\treturns suggestions which 'match' the context of a particular area\n\t\t\n\t\t\tsuggest restaurants names which are in Palo Alto (context -> Palo Alto)\n\t\t\n\t\t\n\t\n\t\n\tcategory-based suggestions:\n\t\n\t\treturns suggestions for items that are only in certain categories/genres (contexts)\n\t\t\n\t\t\tsuggest movies that are of the genre sci-fi and adventure (context -> [sci-fi, adventure])",
    "attachments": {
        "LUCENE-5350.patch": "https://issues.apache.org/jira/secure/attachment/12616221/LUCENE-5350.patch",
        "LUCENE-5350-benchmark.patch": "https://issues.apache.org/jira/secure/attachment/12617551/LUCENE-5350-benchmark.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13834662",
            "author": "Areek Zillur",
            "content": "Initial (rough) Patch:\n\n\tAdd contexts and hasContexts to InputIterator\n\tAdd support to Analyzing suggester to handle contexts\n\tAdd new ContextAwareSuggester (proxies Analyzing Suggester)\n\tAdd tests for ContextAwareSuggester\n\n\n\nTODO:\n\n\tThe patch \"breaks\" the Lookup API (I think its better to have LookupOptions that encapsulates the query-time input to suggesters)\n\tAdd context and hasContexts support to all impl of InputIterator\n\tGeneral refactoring\n\tAdd FuzzySuggester support\n\tAdd docs\n\n\n\nThis patch demonstrates the idea; If the approach makes sense, the appropriate changes to the API will be the next task. Feedback, thoughts welcome! It would also be nice to figure out a way so that we dont have to subclass AnalyzingSuggester to 'use' it. ",
            "date": "2013-11-28T09:47:27+0000"
        },
        {
            "id": "comment-13835546",
            "author": "Michael McCandless",
            "content": "I think a context aware suggester is a great idea!\n\nI wonder ... how this approach (stuff the context in front of each suggestion & then build \"normally\") compares to simply creating N separate suggesters, one per context?  Like, I wonder how much better FST compression we get by using a single FST vs N?  Lookup wise, it seems like we are just doing N separate lookups so that part should be similar? ",
            "date": "2013-11-29T21:35:17+0000"
        },
        {
            "id": "comment-13835566",
            "author": "Pradeep",
            "content": "There should be a framework to inject different contexts. Better to think solution around deep learning algorithms. But, this is a very good idea. ",
            "date": "2013-11-29T23:32:55+0000"
        },
        {
            "id": "comment-13837405",
            "author": "Areek Zillur",
            "content": "Thanks for the feedback!\nMichael McCandless: I was wondering the same thing as I was implementing it. By intuition I think this should be more compact than the N suggester approach but I think its best to benchmark it against N separate suggesters (will update with the benchmark results). Also had another idea of implementing this by 'filtering' the suggestions by contexts supplied at query-time rather than prefixing the context with the analyzed form. I will play around with both and benchmark it to see whether this would be useful in practice.\nPradeep: Can you expand on the deep learning algorithm part?  ",
            "date": "2013-12-03T06:55:08+0000"
        },
        {
            "id": "comment-13842190",
            "author": "Areek Zillur",
            "content": "Uploaded benchmark code and data for ContextAware suggester. It compares a single ContextAwareSuggester with N analyzing suggester (each with different context). \nThe original dataset was taken from http://snap.stanford.edu/data/web-Reddit.html. The processed dataset contains only three fields: \n\n\ttitle (suggestion)\n\tsubreddit (context)\n\tunixtime (weight)\n\n ",
            "date": "2013-12-07T11:24:44+0000"
        },
        {
            "id": "comment-13842194",
            "author": "Areek Zillur",
            "content": "The Benchmark results (similar format to LookupBenchmark results) were as follows:\n\n-- input stats\nInput size: 53022, numContexts: 2666, Avg. Input/Context: 20\n\n-- construction time\nAnalyzingSuggester input: 53022, time[ms]: 10140 [+- 149.13]\nContextAwareAnalyzingSuggester input: 53022, time[ms]: 1683 [+- 17.54]\n\n-- RAM consumption\nAnalyzingSuggester size[B]:    4,675,508\nContextAwareAnalyzingSuggester size[B]:    4,837,187\n\n-- prefixes: 6-9, num: 7, onlyMorePopular: false\nContextAwareAnalyzingSuggester queries: 53022, time[ms]: 1277 [+- 14.67], ~kQPS: 42\nAnalyzingSuggester queries: 53022, time[ms]: 2269 [+- 152.00], ~kQPS: 23\n\n-- prefixes: 2-4, num: 7, onlyMorePopular: false\nContextAwareAnalyzingSuggester queries: 53022, time[ms]: 2294 [+- 24.02], ~kQPS: 23\nAnalyzingSuggester queries: 53022, time[ms]: 4947 [+- 90.36], ~kQPS: 11\n\n-- prefixes: 100-200, num: 7, onlyMorePopular: false\nContextAwareAnalyzingSuggester queries: 53022, time[ms]: 1177 [+- 32.13], ~kQPS: 45\nAnalyzingSuggester queries: 53022, time[ms]: 935 [+- 11.53], ~kQPS: 57\n\n\n\nFrom the results it seems\nContextAwaresuggester compared to AnalyzingSuggester: \n\n\tis 6 times faster for construction\n\tconsumes ~3% more RAM (duplication in context [prefix and in payload]?)\n\thas ~ 2 times the QPS [for prefixes 6-9 & 2-4]\n\thas 20% less QPS [for prefix 100-200]\n\n\n\nIt is to be noted that the dataset only contains terms with one context (hence the benchmark does not take into account terms with multiple contexts).\n\nThis was an interesting benchmark, thoughts? ",
            "date": "2013-12-07T11:39:03+0000"
        },
        {
            "id": "comment-13842458",
            "author": "Areek Zillur",
            "content": "Minor lookup optimization (in case of a single context) ",
            "date": "2013-12-08T08:46:45+0000"
        },
        {
            "id": "comment-13842460",
            "author": "Areek Zillur",
            "content": "Fixed benchmark code ",
            "date": "2013-12-08T08:48:21+0000"
        },
        {
            "id": "comment-13842461",
            "author": "Areek Zillur",
            "content": "Disregard the previous benchmark stats. There was a bug in how the keys were used for building the suggester (hence showed the unexplainable QPS).\nThe updated benchmark results is as follows:\n\n-- Input stats\nInput size: 53022, numContexts: 2666, Avg. Input/Context: 20\n\n-- prefixes: 2-4, num: 7, onlyMorePopular: false\nContextAwareAnalyzingSuggester queries: 53022, time[ms]: 2630 [+- 124.14], ~kQPS: 20\nAnalyzingSuggester queries: 53022, time[ms]: 2249 [+- 25.16], ~kQPS: 24\n\n-- RAM consumption\nAnalyzingSuggester size[B]:    4,767,705\nContextAwareAnalyzingSuggester size[B]:    4,837,187\n\n-- construction time\nAnalyzingSuggester input: 53022, time[ms]: 10184 [+- 207.64]\nContextAwareAnalyzingSuggester input: 53022, time[ms]: 1831 [+- 81.89]\n\n-- prefixes: 6-9, num: 7, onlyMorePopular: false\nContextAwareAnalyzingSuggester queries: 53022, time[ms]: 1457 [+- 163.04], ~kQPS: 36\nAnalyzingSuggester queries: 53022, time[ms]: 1140 [+- 28.59], ~kQPS: 47\n\n-- prefixes: 100-200, num: 7, onlyMorePopular: false\nContextAwareAnalyzingSuggester queries: 53022, time[ms]: 1276 [+- 58.97], ~kQPS: 42\nAnalyzingSuggester queries: 53022, time[ms]: 1004 [+- 81.69], ~kQPS: 53\n\n\n\nFrom the above benchmarks, it seems the only improvement for the new suggester is in the construction time. The QPS for all three cases seems to be ~20% less and the RAM usage is ~3% more. ",
            "date": "2013-12-08T08:55:14+0000"
        },
        {
            "id": "comment-13853780",
            "author": "Areek Zillur",
            "content": "Any thoughts on this suggester, in light of the benchmark results? I still think it might be useful to be used as a replacement for managing multiple suggesters (corresponding to each 'context')? ",
            "date": "2013-12-20T08:18:45+0000"
        },
        {
            "id": "comment-13854347",
            "author": "Michael McCandless",
            "content": "I'm still concerned about the code complexity added by pushing the context \"down low\", and given that lookup performance for context \"up high\" (N AnalyzingSuggesters, one per context) is a bit faster, it seems best overall to do it up high?\n\nI do think this is useful functionality to have; maybe we could have an \"up high\" impl, sugar, that just wraps the N suggesters under the hood? ",
            "date": "2013-12-20T17:59:45+0000"
        },
        {
            "id": "comment-13912821",
            "author": "Michael McCandless",
            "content": "I think it would be simple to add context to AnalyzingInfixSuggester ... it'd just become a DOCS_ONLY field on each document.\n\nMaybe we could break this issue up, e.g. add the \"contexts\" to the InputIterator as a separate issue?  Then we can separately address context-awareness for each of our suggester impls? ",
            "date": "2014-02-26T12:37:25+0000"
        },
        {
            "id": "comment-13913280",
            "author": "Areek Zillur",
            "content": "That sounds great! I will work towards that, It would be much more straightforward to add context to AnalyzingInfixSuggester as a start. ",
            "date": "2014-02-26T18:33:21+0000"
        },
        {
            "id": "comment-13913403",
            "author": "Michael McCandless",
            "content": "Thanks Areek!\n\nI have a good use case to play with, too: I want to fix http://jirasearch.mikemccandless.com suggestions so that if you've drilled-down on a particular project, it suggest issues from that project only. ",
            "date": "2014-02-26T19:48:34+0000"
        },
        {
            "id": "comment-13970795",
            "author": "Uwe Schindler",
            "content": "Move issue to Lucene 4.9. ",
            "date": "2014-04-16T12:54:33+0000"
        }
    ]
}