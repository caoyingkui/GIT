{
    "id": "LUCENE-1308",
    "title": "Remove String.intern() from Field.java to increase performance and lower contention",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.3.2",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "Right now, *document.Field is interning all field names. While this makes sense because it lowers the overall memory consumption, the method intern() of String is know to be difficult to handle. \n\n1) it is a native call and therefore slower than anything on the Java level\n2) the String pool is part of the perm space and not of the general heap, so it's size is more restricted and needs extra VM params to be managed\n3) Some VMs show GC problems with strings in the string pool\n\nSuggested solution is a WeakHashMap instead, that takes care of unifying the String instances and at the same time keeping the pool in the heap space and releasing the String when it is not longer needed. For extra performance in a concurrent environment, a ConcurrentHashMap-like implementation of a weak hashmap is recommended, because we mostly read from the pool.\n\nWe saw a 10% improvement in throughout and response time of our application and the application is not only doing searches (we read a lot of documents from the result). So a single measurement test case could show even more improvement in single and concurrent usage.\n\nThe Cache:\n/** Cache to replace the expensive String.intern() call with the java version */\nprivate final static Map<String, WeakReference<String>> unifiedStringsCache =\n   Collections.synchronizedMap(new WeakHashMap<String, WeakReference<String>>(109));\n\nThe access to it, instead of this.name = name.intern;\n\n// unify the strings, but do not use the expensive String.intern() version\n// which is not \"weak enough\", uses the perm space and is a native call\nString unifiedName = null;\n\nWeakReference<String> ref = unifiedStringsCache.get(name);\nif (ref != null)\n{\n    unifiedName = ref.get();\n}\nif (unifiedName == null)\n{\n    unifiedStringsCache.put(name, new WeakReference(name));\n    unifiedName = name;\n}\nthis.name = unifiedName;\n\nI guess it is sufficient to have mostly all fields names interned, so I skipped the additional synchronization around the access and take the risk that only 99.99%  of all field names are interned.",
    "attachments": {
        "yad.zip": "https://issues.apache.org/jira/secure/attachment/12384227/yad.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-06-18T04:59:28+0000",
            "content": "Rene, can you provide a patch along with unit tests?  Have you or can you run contrib/benchmarks and include your before the changes and after the changes results here, so we can see what difference this change makes?  Thanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12605832"
        },
        {
            "date": "2008-06-18T13:24:01+0000",
            "content": "Removing intern() is perhaps something we could look at for Lucene 3\nHere's an older thread on the subject:\nhttp://markmail.org/message/5m245gahezc3pet7 ",
            "author": "Yonik Seeley",
            "id": "comment-12605934"
        },
        {
            "date": "2008-06-18T19:23:57+0000",
            "content": "Test source, code, and data files. Contains a Field.java that can be modified to try the different methods of interning Strings. ",
            "author": "Rene Schwietzke",
            "id": "comment-12606048"
        },
        {
            "date": "2008-06-18T19:27:33+0000",
            "content": "A wrote a small test case that runs a single thread search, as well as a multithreaded search using the same indexsearcher. Especially when running in a threaded context, the replacement of String.intern() pays off. Even the single thread is faster.\n\nI measured the following numbers:\n\nString.Intern, Single Searcher\n[main] Search  took: 3453ms\n[Thread-2] Search  took: 17812ms\n[Thread-3] Search  took: 18313ms\n[Thread-1] Search  took: 18234ms\n[Thread-0] Search  took: 18562ms\n\nWeakHashMap, Single Searcher\n[main] Search  took: 3156ms\n[Thread-3] Search  took: 14953ms\n[Thread-1] Search  took: 15593ms\n[Thread-0] Search  took: 15656ms\n[Thread-2] Search  took: 16188ms\n\nConcurrentHashMap, Single Searcher\n[main] Search  took: 2844ms\n[Thread-1] Search  took: 14812ms\n[Thread-0] Search  took: 14890ms\n[Thread-2] Search  took: 15172ms\n[Thread-3] Search  took: 14656ms ",
            "author": "Rene Schwietzke",
            "id": "comment-12606052"
        }
    ]
}