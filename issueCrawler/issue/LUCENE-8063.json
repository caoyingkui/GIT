{
    "id": "LUCENE-8063",
    "title": "Polygons with holes don't compute bounds properly in certain situations",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Not A Problem",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Bug",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": []
    },
    "description": "Hi Karl Wright,\n\nI thought it would be useful to create a random test for bounds. The test have shown problems with polygon with holes. In this ticket I will submit a random test for bounds and propose a fix for bounds for polygons.",
    "attachments": {
        "LUCENE_8063_fix.patch": "https://issues.apache.org/jira/secure/attachment/12899042/LUCENE_8063_fix.patch",
        "LUCENE_8063_test.patch": "https://issues.apache.org/jira/secure/attachment/12899043/LUCENE_8063_test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16264163",
            "date": "2017-11-23T10:53:48+0000",
            "content": "Attached a random test for bounds. Note that I need to expand the resulting bounding box to avoid false positives when there are edges touching but not crossing. Arbitrarily I have chosen to expand the bounding box by 1e-8.\n\nThe test fails in some cirmcustance for polygon with holes. I think the issue is that we need to collect the bounds of the holes as well. Attached is the proposed fix. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16264339",
            "date": "2017-11-23T13:41:01+0000",
            "content": "Ignacio Vera, by definition holes are inside the containing polygons.  It should not be necessary to compute bounds for holes given that, since the bounds computed for the outer part of the polygon will necessarily contain the bounds for the holes. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16264347",
            "date": "2017-11-23T13:47:17+0000",
            "content": "The test, also, is flawed; it's presuming that you can increase the bounds of a shape to change the relationship.  That's not true in general. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16264570",
            "date": "2017-11-23T16:31:00+0000",
            "content": "I have a closer look and it seems I am allowed to build shapes where some points of the holes are actually outside of the shape. That is the reason it works when I add the bounds of the holes. (The tool I am using to vizualize the shape does not complain either so I am very puzzle, it seems valid as well)\n\nIf you get the bounds of a shape and you build the bounding box, then the shape should be WITHIN the bounding box. In spatial3d, it can be OVERLAPS because if the shape is touching one of the edges, it does not know if the shape is actually crossing the edge (It would be too expensive to calculate it anyway). So if I expand the bounding, then the relationship must be WITHIN.\n\nIs this assumption not general?\n\nThanks!\n\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16264626",
            "date": "2017-11-23T17:15:35+0000",
            "content": "There is no checking to insure that holes are in fact inside the polygon.\nRandom tests I've written that construct polygons with holes are carefully written to insure there is no crossing.  Apparently your polygon constructor, though, permits holes that aren't legal.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16265058",
            "date": "2017-11-24T09:06:34+0000",
            "content": "I am not strict enough when building holes, my bad.\n\nI will open a ticket with a patch for the shape generator (I am testing it). \n\nIt seems after the patch that the tests are successful. Do you still think that the test is flawed? I actually think it did a pretty good job, e.g. it showed that some shapes were wrong. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16265174",
            "date": "2017-11-24T11:18:13+0000",
            "content": "\n\nIt seems after the patch that the tests are successful. Do you still think that the test is flawed? I actually think it did a pretty good job, e.g. it showed that some shapes were wrong.\n\n\nThe bounds computation sometimes gives up and gives a bounds that is larger than the shape and may, in fact, encompass the entire world.  At that point you can't make the bounds bigger, and yet you can't guarantee that the intersection won't be \"overlaps\".  But if you can filter out cases like that, then the test is right. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16265292",
            "date": "2017-11-24T13:43:49+0000",
            "content": "I think there is only one case where the test is flawed. If the original shape is the whole world then the relationship will be OVERLAPS as the relationship between the world with itself is OVERLAPS. \n\n\n@Override\n  public int getRelationship(final GeoShape path) {\n    if (path.getEdgePoints().length > 0)\n      // Path is always within the world\n      return WITHIN;\n\n    return OVERLAPS;\n  }\n\n\n\nIn any other case, I beleive it is guaranteed that relationship will be WITHIN.  ",
            "author": "Ignacio Vera"
        }
    ]
}