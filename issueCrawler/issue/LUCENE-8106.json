{
    "id": "LUCENE-8106",
    "title": "Add script to attempt to reproduce failing tests from a Jenkins log",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ]
    },
    "description": "This script will be runnable from a downstream job triggered by an upstream failing Jenkins job, passing log location info between the two.\n\nThe script will also be runnable manually from a developer's cmdline.\n\nFrom the script help:\n\n\nUsage:\n\n     python3 -u reproduceJenkinsFailures.py URL\n\nMust be run from a Lucene/Solr git workspace. Downloads the Jenkins\nlog pointed to by the given URL, parses it for Git revision and failed\nLucene/Solr tests, checks out the Git revision in the local workspace,\ngroups the failed tests by module, then runs\n'ant test -Dtest.dups=5 -Dtests.class=\"*.test1[|*.test2[...]]\" ...'\nin each module of interest, failing at the end if any of the runs fails.\nTo control the maximum number of concurrent JVMs used for each module's\ntest run, set 'tests.jvms', e.g. in ~/lucene.build.properties",
    "attachments": {
        "LUCENE-8106-part4.patch": "https://issues.apache.org/jira/secure/attachment/12911846/LUCENE-8106-part4.patch",
        "LUCENE-8106.patch": "https://issues.apache.org/jira/secure/attachment/12903343/LUCENE-8106.patch",
        "LUCENE-8106.part5.patch": "https://issues.apache.org/jira/secure/attachment/12915341/LUCENE-8106.part5.patch",
        "LUCENE-8106-part3.patch": "https://issues.apache.org/jira/secure/attachment/12911615/LUCENE-8106-part3.patch",
        "LUCENE-8106-part2.patch": "https://issues.apache.org/jira/secure/attachment/12910502/LUCENE-8106-part2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16300910",
            "date": "2017-12-22T03:01:26+0000",
            "content": "Here's a working version of the script.  I've got it set up on my Jenkins as downstream job from all the main jobs: http://jenkins.sarowe.net/job/Lucene-Solr-reproduce-failed-tests/ ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16313987",
            "date": "2018-01-05T21:59:33+0000",
            "content": "Updated patch, adding a report at the end, e.g.:\n\n\n[repro] Failures:\n[repro]   0/5 failed: org.apache.solr.client.solrj.io.stream.SelectWithEvaluatorsTest\n[repro]   0/5 failed: org.apache.solr.cloud.autoscaling.sim.TestComputePlanAction\n[repro]   5/5 failed: org.apache.solr.schema.TestPointFields\n\n\n\nI think it's ready.  I'll commit in a couple days if there are no objections. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16315050",
            "date": "2018-01-07T03:18:00+0000",
            "content": "This is really cool Steve!\nSo are you going to add Jobs to Apache Jenkins for this? ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16317536",
            "date": "2018-01-09T02:00:08+0000",
            "content": "So are you going to add Jobs to Apache Jenkins for this?\n\nYes, I was planning on it. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16363479",
            "date": "2018-02-14T04:42:48+0000",
            "content": "Reopening to add some more functionality to the script:\n\n\n\tAdd cmdline option parsing\n\tRun git fetch by default prior to running tests, and allow opt-out (for Jenkins) via cmdline option --no-fetch\n\tAdd cmdline option for test iterations, defaulting to 5\n\tSort failure report by reverse failure count, so that highest counts are on the bottom, with secondary sort on test suite name\n\tWhen all iterations fail for a test, re-test at branch tip (with the seed)\n\tWhen a test also fails 100% at branch tip, re-attempt without the seed\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16363483",
            "date": "2018-02-14T04:45:34+0000",
            "content": "Committing shortly. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16363484",
            "date": "2018-02-14T04:48:33+0000",
            "content": "Commit 08b9de9970a90d31dfec07e36faf8c1bc0a6c593 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=08b9de9 ]\n\nLUCENE-8106: reproduceJenkinsFailures.py improvements: add cmdline option parsing; sort max failures to the bottom of the report; retest at branch tip first with and then without the seed if 100% of iterations fail. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16363485",
            "date": "2018-02-14T04:49:18+0000",
            "content": "Commit a07493d508dce52bcfc584d001a0240cd835f9ba in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a07493d ]\n\nLUCENE-8106: reproduceJenkinsFailures.py improvements: add cmdline option parsing; sort max failures to the bottom of the report; retest at branch tip first with and then without the seed if 100% of iterations fail. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16366054",
            "date": "2018-02-15T18:21:09+0000",
            "content": "I've set up a new job using the repro script on ASF Jenkins: https://builds.apache.org/view/L/view/Lucene/job/Lucene-Solr-repro/, and configured the Test, NightlyTest and SmokeTester jobs on master and branch_7x to trigger the new job for Unstable/Failure runs.\n\nUwe Schindler, what do you think of setting up a job for this on your Jenkins?  I'm not sure how to set up the same environment (OS/JVM) for the job though... Maybe instead of triggering another job to run the repro script, the existing jobs could be configured to run the script as a build step? ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16366831",
            "date": "2018-02-16T10:45:43+0000",
            "content": "Hi,\nit might work out of box on the master slave, as it's running linux, but definitely not on the others.\n\nIn general this Jenkins does not use native operating system's GIT at all, it uses Jenkins JGIT plugin to handle checkouts. So git is not available on the slaves with operating systems != linux. Python is available, but requires the entries in lucene.build.properties file, as on the other operating systems this is not in \"PATH\". That's the way how it's also setup on ASF jenkins (going back to times of FreeBSD).\n\nI'd like to make the Jenkins build as generic as possible, so everything is configured per node in lucene.build.properties, so the script should read it like the main build scripts.\n\nIMHO, I'd add a top-level jenkins job that runs the python script (similar to the smoke tester) using the standardized build properties, so it des not require separate per-node-config:\n\n\n$ ant run-jenkins-repro\n\n\n\nThis won't solve the missing \"git\" command problem.\n\nUwe ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16367488",
            "date": "2018-02-16T15:46:26+0000",
            "content": "Commit e71286c8263646efe465ac7230a2f0000d7b34f9 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e71286c ]\n\nLUCENE-8106: always fast-forward merge after checkout ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16367489",
            "date": "2018-02-16T15:46:43+0000",
            "content": "Commit 1a6d896dfc1bdafff3067a513bade205f6e1ad11 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1a6d896 ]\n\nLUCENE-8106: always fast-forward merge after checkout ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16367516",
            "date": "2018-02-16T16:03:01+0000",
            "content": "Uwe Schindler, I'll try to set up a job for your master slave.\n\nI'm not sure which entries you're referring to in lucene.build.properties?  Here's how ASF Jenkins is populated (from https://builds.apache.org/view/L/view/Lucene/job/Lucene-Ivy-Bootstrap/configure):\n\n\ntests.multiplier=2\nsmokeTestRelease.testArgs=-Dtests.slow=false\ntests.jvms=3\n\n\n\nAFAICT none of those refer to Python.\n\nThe repro job on ASF Jenkins invokes the script like this:\n\n\n/usr/bin/python3 -u dev-tools/scripts/reproduceJenkinsFailures.py --no-fetch https://builds.apache.org/job/$UPSTREAM_JOB_NAME/$UPSTREAM_BUILD_NUMBER/consoleText\n\n\n\n(On my Jenkins the URL points to the local log file instead of using HTTPS.) ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16367696",
            "date": "2018-02-16T18:27:19+0000",
            "content": "Uwe Schindler, I'll try to set up a job for your master slave.\n\nI did this, after copying the configuration for the Lucene-Solr-master-Linux project: https://jenkins.thetaphi.de/job/Lucene-Solr-repro-Linux/\n\nBut I ran into three problems:\n\n\n\tThe Parameterized Trigger plugin is not installed, but AFAIK is required to pass information from the upstream job (to know where the upstream job's build log is)\n\tWhen I tried to configure the Lucene-Solr-master-Linux project to trigger building the new project, the \"Build other projects\" item in the \"Add post-build action\" menu is greyed out.\n\tI'm not sure how to pass the randomized JDK+cmdline options to the repro script - I suppose via the Parameterized Trigger plugin?\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16367724",
            "date": "2018-02-16T18:54:55+0000",
            "content": "I am out of office at the moment, so I have to look. Yes, the parameterized build plugin is not there. The Randomization is done by a groovy script. To repeat it with same setting it needs to be done different. The Randomization stuff is saved nowhere, so it needs more work.\n\nOn the slaves, the python executable is saved in lucene.build.properties. No git available on any slave. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16368178",
            "date": "2018-02-17T10:40:47+0000",
            "content": "Hi Steve,\nI think it should work. The problem you havre is much simpler:\n\nWhen I tried to configure the Lucene-Solr-master-Linux project to trigger building the new project, the \"Build other projects\" item in the \"Add post-build action\" menu is greyed out.\n\nIts grayed out because the master build job already triggers other jobs (the Jenkins setup on Policeman is a chain of projects). Just scroll up and look for the input line! You may clean it up, because there are some disabled/deleted Jobs in it.\n\nCurrently you cannot parameterize the randomized JDK. So on reproducing, you get another JDK/GC/bitness setting - sorry. Therefore I'd include the repro stuff into the main build job somehow! ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16368233",
            "date": "2018-02-17T15:09:56+0000",
            "content": "I'd include the repro stuff into the main build job somehow!\n\nI'll try making it a build step (instead of a post-build action). ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16368370",
            "date": "2018-02-17T21:29:29+0000",
            "content": "\nI'd include the repro stuff into the main build job somehow!\nI'll try making it a build step (instead of a post-build action).\n\nI added the following as an \"Execute shell\" build step to the Lucene-Solr-master-Linux project - we'll see how it goes:\n\n\nset -x # Log commands\n\nTMPFILE=`mktemp`\ntrap \"rm -f $TMPFILE\" EXIT   # Delete the temp file on SIGEXIT\n\ncurl -o $TMPFILE https://jenkins.thetaphi.de/job/$JOB_NAME/$BUILD_NUMBER/consoleText\n\nif grep --quiet 'reproduce with' $TMPFILE ; then\n\n    # Preserve original build output\n    mv lucene/build lucene/build.orig\n    mv solr/build solr/build.orig\n\n    PYTHON32_EXE=`grep \"^[[:space:]]*python32\\.exe[[:space:]]*=\" ~/lucene.build.properties | cut -d'=' -f2`\n    GIT_EXE=`grep \"^[[:space:]]*git\\.exe[[:space:]]*=\" ~/lucene.build.properties | cut -d'=' -f2`\n    PATH=$GIT_EXE:$PATH $PYTHON32_EXE -u dev-tools/scripts/reproduceJenkinsFailures.py --no-fetch file://$TMPFILE\n\n    # Preserve repro build output\n    mv lucene/build lucene/build.repro\n    mv solr/build solr/build.repro\n\n    # Restore original build output\n    mv lucene/build.orig lucene/build\n    mv solr/build.orig solr/build\nfi\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16369634",
            "date": "2018-02-20T01:29:08+0000",
            "content": "Uwe Schindler: I've run into trouble getting the script ^^ to work.  First, the local log isn't where it is on my Jenkins (workspace/../builds/$BUILD_NUMBER/log, so I switched to fetching the log via HTTPS and storing it in a temp file.  That seems to work.  But now there are problems dealing with lucene.build.properties:\n\nFrom https://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/21494/consoleText:\n\n\n+ set -x\n+ mktemp\n+ TMPFILE=/tmp/tmp.GedGCMtTog\n+ trap rm -f /tmp/tmp.GedGCMtTog EXIT\n+ curl -o /tmp/tmp.GedGCMtTog https://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/21494/consoleText\n[...]\n+ grep --quiet reproduce with /tmp/tmp.GedGCMtTog\n+ mv lucene/build lucene/build.orig\n+ mv solr/build solr/build.orig\n+ grep ^[[:space:]]*python32\\.exe[[:space:]]*= /home/jenkins/lucene.build.properties\n+ cut -d= -f2\n+ PYTHON32_EXE=\n+ grep ^[[:space:]]*git\\.exe[[:space:]]*= /home/jenkins/lucene.build.properties\n+ cut -d= -f2\n+ GIT_EXE=\n+ PATH=:/home/jenkins/tools/java/64bit/jdk-10-ea+43/bin:/usr/local/bin:/usr/bin:/bin:/usr/local/games:/usr/games -u dev-tools/scripts/reproduceJenkinsFailures.py --no-fetch file:///tmp/tmp.GedGCMtTog\n/tmp/jenkins9073460340081845275.sh: 17: /tmp/jenkins9073460340081845275.sh: -u: not found\n+ rm -f /tmp/tmp.GedGCMtTog\n\n\n\nFrom ^^, it looks to me like /home/jenkins/lucene.build.properties either doesn't exist, or doesn't have entries for git.exe and python32.exe.  I apparently no longer have login access to the VMs (I tried). ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16369834",
            "date": "2018-02-20T09:13:37+0000",
            "content": "On Linux, they don't have entries for those tools, so it falls back to build.xml's default behaviour. git.exe is undefined everywhere - except the master Jenkins (Linux), which has GIT, but no other slave machine has GIT installed. They only use Jenkins' internal JGit client, no command line. There is no need to have Git for running Lucene builds (except packaging and jar version numbers, but Policeman does not use this - because it's optional for test builds).\n\n\njenkins@serv1:~$ pwd\n/home/jenkins\njenkins@serv1:~$ cat lucene.build.properties\ntests.jvms=3\ntests.multiplier=3\n\n\n\nFYI, on Windows it looks like that:\n\n\nC:\\Users\\jenkins>type lucene.build.properties\npython32.exe=C:\\\\Python35\\\\python.exe\nperl.exe=C:\\\\Perl64\\\\bin\\\\perl.exe\ntests.jvms=2\n\nC:\\Users\\jenkins>git\n'git' is not recognized as an internal or external command,\noperable program or batch file.\n\n\n\nSame on MacOSX and Solaris.\n\nSorry for not being responsive, I am a bit busy today. Can you send me your SSH key privately? I will put them on all 4 machines into jenkins home dir. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16369836",
            "date": "2018-02-20T09:18:45+0000",
            "content": "On master jenkins i have a public key from you: ssh jenkins@jenkins.thetaphi.de should work. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16370148",
            "date": "2018-02-20T15:39:08+0000",
            "content": "On master jenkins i have a public key from you: ssh jenkins@jenkins.thetaphi.de should work.\n\nIndeed it does, thanks! I'd attempted (and failed) using a different acct. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16370215",
            "date": "2018-02-20T16:17:35+0000",
            "content": "On Linux, they don't have entries for those tools, so it falls back to build.xml's default behaviour. git.exe is undefined everywhere - except the master Jenkins (Linux), which has GIT, but no other slave machine has GIT installed.\n\nThanks, I've tried to capture that in a modified version of the script now on Lucene-Solr-master-Linux, we'll see how it goes next time it runs:\n\n\nset -x # Log commands\n\nTMPFILE=`mktemp`\ntrap \"rm -f $TMPFILE\" EXIT   # Delete the temp file on SIGEXIT\n\ncurl -o $TMPFILE https://jenkins.thetaphi.de/job/$JOB_NAME/$BUILD_NUMBER/consoleText\n\nif grep --quiet 'reproduce with' $TMPFILE ; then\n\n    # Preserve original build output\n    mv lucene/build lucene/build.orig\n    mv solr/build solr/build.orig\n\n    PYTHON32_EXE=`grep \"^[[:space:]]*python32\\.exe[[:space:]]*=\" ~/lucene.build.properties | cut -d'=' -f2`\n    [ -z $PYTHON32_EXE ] && PYTHON32_EXE=python3\n    GIT_EXE=`grep \"^[[:space:]]*git\\.exe[[:space:]]*=\" ~/lucene.build.properties | cut -d'=' -f2`\n    [ -n $GIT_EXE ] && export PATH=$GIT_EXE:$PATH    \n    $PYTHON32_EXE -u dev-tools/scripts/reproduceJenkinsFailures.py --no-fetch file://$TMPFILE\n    \n    # Preserve repro build output\n    mv lucene/build lucene/build.repro\n    mv solr/build solr/build.repro\n\n    # Restore original build output\n    mv lucene/build.orig lucene/build\n    mv solr/build.orig solr/build\nfi\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16370226",
            "date": "2018-02-20T16:23:33+0000",
            "content": "git.exe is undefined everywhere - except the master Jenkins (Linux), which has GIT, but no other slave machine has GIT installed. They only use Jenkins' internal JGit client, no command line. There is no need to have Git for running Lucene builds (except packaging and jar version numbers, but Policeman does not use this - because it's optional for test builds).\n\nreproduceJenkinsFailures.py modifies the checked out revision in three different ways:\n\n\n\tChecks out the revision at which the original failure(s) occurred (phase: initial setup)\n\tChecks out the tip of the branch on which the original failure occurred (phase: If any test reproduces 100%)\n\tChecks out the original workspace revision (phase: cleanup)\n\n\n\nWhat do you think ought to be done on OS VMs without git? ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16370574",
            "date": "2018-02-20T20:28:49+0000",
            "content": "BTW I noticed a side-effect of running the script as a Build step on Policeman Jenkins: if the Ant build step fails (e.g. precommit), then none of the following Build steps will be invoked.  Maybe this is ok?\n\nAn alternative would be to switch from a Build step to a Post-Build step, but this would require installing the Post Build Script plugin: https://github.com/jenkinsci/postbuildscript-plugin ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16370863",
            "date": "2018-02-21T02:25:00+0000",
            "content": "Looks like Policeman Lucene-Solr-master-Linux is working now - see e.g. https://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/21501/consoleText.  Here's the final script; I had to add Jenkins's ant to the PATH to get it running:\n\n\nset -x # Log commands\n\nTMPFILE=`mktemp`\ntrap \"rm -f $TMPFILE\" EXIT   # Delete the temp file on SIGEXIT\n\ncurl -o $TMPFILE https://jenkins.thetaphi.de/job/$JOB_NAME/$BUILD_NUMBER/consoleText\n\nif grep --quiet 'reproduce with' $TMPFILE ; then\n\n    # Preserve original build output\n    mv lucene/build lucene/build.orig\n    mv solr/build solr/build.orig\n\n    PYTHON32_EXE=`grep \"^[[:space:]]*python32\\.exe[[:space:]]*=\" ~/lucene.build.properties | cut -d'=' -f2`\n    [ -z $PYTHON32_EXE ] && PYTHON32_EXE=python3\n    GIT_EXE=`grep \"^[[:space:]]*git\\.exe[[:space:]]*=\" ~/lucene.build.properties | cut -d'=' -f2`\n    [ -n $GIT_EXE ] && export PATH=$GIT_EXE:$PATH\n    export ANT_HOME=/home/jenkins/tools/hudson.tasks.Ant_AntInstallation/ANT_1.8.4\n    export PATH=$ANT_HOME/bin:$PATH\n    $PYTHON32_EXE -u dev-tools/scripts/reproduceJenkinsFailures.py --no-fetch file://$TMPFILE\n    \n    # Preserve repro build output\n    mv lucene/build lucene/build.repro\n    mv solr/build solr/build.repro\n\n    # Restore original build output\n    mv lucene/build.orig lucene/build\n    mv solr/build.orig solr/build\nfi\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16370869",
            "date": "2018-02-21T02:35:09+0000",
            "content": "Now that the repro stuff is working on the Policeman Jenkins Lucene-Solr-master-Linux project, I also added the script ^^ as a build step to the Lucene-Solr-7.x-Linux project. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16372123",
            "date": "2018-02-21T22:28:33+0000",
            "content": "I changed the script on Policeman Jenkins a bit to use the \"Tools Environment\" plugin to define an env var with ANT in correct version. I used this env var instaed of the hardcoded path added by Steve.\n\nIt seems to work now. There is still the issue, that GIT is not installed and not even used by Jenkins (Jenkins uses JGit for checkouts). This is currently no issue on the Linux node (it has cmd-line git), but all other nodes - including Windows - do not have a running Git command line. I will definitely not install one, becaus ethat makes maintenance even harder (4 operating systems, millions of Java versions,...).\n\nSo I have one small question to Steve Rowe: Can't we make a variant of the script for Jenkins that does not deal with Git at all? For reproduing the failure directly after running the main build job there is no need to change branches or merge in changes. We just leave the checkout as-is. As there are no external forces changing the checkout, why would we need GIT?\n\nSo let's add a \"replacement\" option \"-no-git\" instead of \"-no-fetch\", that completely disables GIT in the python script. After doing this it's easy to setup with Jenkins and it would also possibly work with Windows Jenkins. I can help with adding a n Ant target to call the reproducer instead of doing it directly from Jenkins (like \"ant nighly-smoke\").\n\nFor committers that want to reproduce failures locally, the script does all maintenance and Git magic to reproduce Jenkins behaviour. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16372126",
            "date": "2018-02-21T22:34:28+0000",
            "content": "That's now the Jenkins script:\n\n\nset -x # Log commands\n\nTMPFILE=`mktemp`\ntrap \"rm -f $TMPFILE\" EXIT   # Delete the temp file on SIGEXIT\n\ncurl -o $TMPFILE \"${BUILD_URL}consoleText\"\n\nif grep --quiet 'reproduce with' $TMPFILE ; then\n\n    # Preserve original build output\n    mv lucene/build lucene/build.orig\n    mv solr/build solr/build.orig\n\n    PYTHON32_EXE=`grep \"^[[:space:]]*python32\\.exe[[:space:]]*=\" ~/lucene.build.properties | cut -d'=' -f2`\n    [ -z $PYTHON32_EXE ] && PYTHON32_EXE=python3\n    GIT_EXE=`grep \"^[[:space:]]*git\\.exe[[:space:]]*=\" ~/lucene.build.properties | cut -d'=' -f2`\n    [ -n $GIT_EXE ] && export PATH=$GIT_EXE:$PATH\n    export ANT_HOME=$ANT_1_8_2_HOME\n    export PATH=$ANT_HOME/bin:$PATH\n    $PYTHON32_EXE -u dev-tools/scripts/reproduceJenkinsFailures.py --no-fetch file://$TMPFILE\n    \n    # Preserve repro build output\n    mv lucene/build lucene/build.repro\n    mv solr/build solr/build.repro\n\n    # Restore original build output\n    mv lucene/build.orig lucene/build\n    mv solr/build.orig solr/build\nfi\n\n ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16373507",
            "date": "2018-02-22T21:41:50+0000",
            "content": "\nSo I have one small question to Steve Rowe: Can't we make a variant of the script for Jenkins that does not deal with Git at all? For reproduing the failure directly after running the main build job there is no need to change branches or merge in changes. We just leave the checkout as-is. As there are no external forces changing the checkout, why would we need GIT?\n\nSo let's add a \"replacement\" option \"-no-git\" instead of \"-no-fetch\", that completely disables GIT in the python script.\n\nI agree; when the script is invoked in the same run as the failing tests, there is no need for the script to do anything with GIT.  I've attached a patch (...-part3.patch) to do this via the replacement --no-git cmdline option.  I'll commit shortly, then modify Jenkins jobs to invoke properly.\n\nHowever, on all other Jenkins besides Policeman, I intend to not include --no-git when invoking the script, since it's run as a separate job that can be scheduled hours or even days after the initial run that produced the test failures. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16373527",
            "date": "2018-02-22T21:52:54+0000",
            "content": "Commit 27f5ca75ad811532e5b46b32ba858b5997ed87b4 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=27f5ca7 ]\n\nLUCENE-8106: add cmdline option --no-git to avoid all git usage; replaces --no-fetch cmdline option ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16373528",
            "date": "2018-02-22T21:52:55+0000",
            "content": "Commit edd54e551d5ae9cd675482bab042b0cce8fb02e2 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=edd54e5 ]\n\nLUCENE-8106: add cmdline option --no-git to avoid all git usage; replaces --no-fetch cmdline option ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16373789",
            "date": "2018-02-23T01:34:24+0000",
            "content": "Uwe, I'm working on adding the script to the jobs for MacOS and Solaris (Windows will need a batch/cmd script instead of a shell script, right?), and I noticed that the jenkins-hourly Ant build step passes in sysprop args=${TEST_JVM_ARGS} - am I right in thinking that without these, we're not reproducing the same as the initial tests?  Not sure how to fix - maybe reproduceJenkinsFailures.py could be made aware of this environment variable and pass it on in its Ant invocations? ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16373793",
            "date": "2018-02-23T01:37:49+0000",
            "content": "I'm working on adding the script to the jobs for MacOS and Solaris\n\nDone for the master branch jobs for these two. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16373820",
            "date": "2018-02-23T02:06:59+0000",
            "content": "Uwe:\n\nWindows will need a batch/cmd script instead of a shell script, right?\n\nActually, I think Jenkins's Powershell plugin is the right thing here, since Powershell can natively download web files, and knows how to create temporary files.  It's not installed on Policeman Jenkins right now though. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16374033",
            "date": "2018-02-23T07:25:29+0000",
            "content": "Powershell is now there! I think the biggest problem on Windows is also to read the properties file, as it uses escaping for backslashes  I am thinking about a better solution here. Unfortunately you can't add Python as a \"Tool\" so you can use \"Tools Environment\" to add a variable. Digging about that... ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16374037",
            "date": "2018-02-23T07:29:55+0000",
            "content": "Solaris does not like your usage of grep:\n\n\n+ grep --quiet 'reproduce with' /tmp/tmp.y6aGln\ngrep: illegal option -- quiet\nUsage: grep [-c|-l|-q] -bhinsvw pattern file . . .\n+ rm -f /tmp/tmp.y6aGln\n\n ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16374041",
            "date": "2018-02-23T07:37:19+0000",
            "content": "I replaced the long option \"--quiet\" by the more portable \"-q\" one everywhere. Reals BSD's don't know any long options on grep. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16374043",
            "date": "2018-02-23T07:44:42+0000",
            "content": "Powershell is now there! I think the biggest problem on Windows is also to read the properties file, as it uses escaping for backslashes  I am thinking about a better solution here. Unfortunately you can't add Python as a \"Tool\" so you can use \"Tools Environment\" to add a variable. Digging about that...\n\nI have a solution: You can set environment variables per node in Jenkins config. I would just set a variable PYTHON3_EXE and remove the cryptic greps on lucene.build.properties. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16374051",
            "date": "2018-02-23T07:54:02+0000",
            "content": "Ok done! I replaced all scripts by:\n\n\nset -x # Log commands\n\nTMPFILE=`mktemp`\ntrap \"rm -f $TMPFILE\" EXIT   # Delete the temp file on SIGEXIT\n\ncurl -o $TMPFILE \"${BUILD_URL}consoleText\"\n\nif grep -q 'reproduce with' $TMPFILE ; then\n\n    # Preserve original build output\n    mv lucene/build lucene/build.orig\n    mv solr/build solr/build.orig\n\n    export ANT_HOME=$ANT_1_8_2_HOME\n    export PATH=$ANT_HOME/bin:$PATH\n    $PYTHON3_EXE -u dev-tools/scripts/reproduceJenkinsFailures.py --no-git file://$TMPFILE\n    \n    # Preserve repro build output\n    mv lucene/build lucene/build.repro\n    mv solr/build solr/build.repro\n\n    # Restore original build output\n    mv lucene/build.orig lucene/build\n    mv solr/build.orig solr/build\nfi\n\n ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16374741",
            "date": "2018-02-23T17:55:24+0000",
            "content": "Thanks Uwe Schindler!\n\nAny thoughts about this question I had for you?:\n\n\nUwe, I'm working on adding the script to the jobs for MacOS and Solaris (Windows will need a batch/cmd script instead of a shell script, right?), and I noticed that the jenkins-hourly Ant build step passes in sysprop args=${TEST_JVM_ARGS} - am I right in thinking that without these, we're not reproducing the same as the initial tests? Not sure how to fix - maybe reproduceJenkinsFailures.py could be made aware of this environment variable and pass it on in its Ant invocations? ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16374776",
            "date": "2018-02-23T18:13:03+0000",
            "content": "Oh yes, I also noticed this. It does not pass the JVM properties to the runner, so the reproducing script runs with default garbage collector and compressed oops. Maybe the reproducer script should use a regex to catch the initial ANT call at the beginning of the log file and extract extra command line arguments from it. Then it would be universal and also works for ASF jenkins (if we add similar stuff there, too). ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16374784",
            "date": "2018-02-23T18:15:57+0000",
            "content": "Maybe the reproducer script should use a regex to catch the initial ANT call at the beginning of the log file and extract extra command line arguments from it. Then it would be universal and also works for ASF jenkins (if we add similar stuff there, too).\n\nGood idea! I'll look into it. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16374839",
            "date": "2018-02-23T18:54:58+0000",
            "content": "Another approach that might be worth to investigate: Maybe pass the extra args separately to the runner JVMs as a sysprop so the repo line can be extended by \"extra stuff\" coming form the outside. The extra sysprop with all extra arguments as a single string is just to work around the problem that you cannot get all command line args and sysprops easily from inside the JVM. So the ant script could create a sysprop \"tests.repo.extra_args\" that contains the <arg lines/> which are passed (mainly the args sysprop). Then the test reproduce line could include that info, if sysprop is set. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16375160",
            "date": "2018-02-24T00:22:31+0000",
            "content": "Maybe the reproducer script should use a regex to catch the initial ANT call at the beginning of the log file and extract extra command line arguments from it. Then it would be universal and also works for ASF jenkins (if we add similar stuff there, too).\n\nI attached a patch (*-part4.patch) that implements this idea.  Committing shortly.\n\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16375162",
            "date": "2018-02-24T00:23:16+0000",
            "content": "Commit 07f7a7b5ddd08aa86dd65f31cf475546da084204 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=07f7a7b ]\n\nLUCENE-8106: collect Ant test sysprops from Jenkins log and add them to test repro lines ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16375163",
            "date": "2018-02-24T00:23:18+0000",
            "content": "Commit 88e00d08894cd58f8cf1f51f9de6f36ce3183031 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=88e00d0 ]\n\nLUCENE-8106: collect Ant test sysprops from Jenkins log and add them to test repro lines ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16375511",
            "date": "2018-02-24T11:34:36+0000",
            "content": "Hi patch looks fine, but it's not fully correct:\n\n\tPoliceman and ASF jenkins use \"-Dargs=...\". Those arguments are accessible from inside Ant and are also passed to the underlying test JVM runners.\n\tSarowe's Jenkins uses ANT_OPTS environment variable. But this is something completely different: It is just options that are passed to ANT's JVM (the JVM that runs the build scripts). Those won't be passed to test runners, as not even the build.xml would see them. Contrary, in the python script they are passed like other ant arguments, which is wrong.\n\n\n\nThe ANT_OPTS stuff should be removed from the script, it has nothing to do with reproducing tests. It's just some tuning of Ant's JVM (which should no longer necessary for Sarowe Jenkins, unless it runs with Java 7). If Jenkins would use ANT_ARGS env var instead, then you could pass it.\n\nSee documentation here: https://ant.apache.org/manual/running.html ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16377798",
            "date": "2018-02-26T23:47:32+0000",
            "content": "Commit 443cc19db2afa28ab258a577d4bbd6e9e0b24b57 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=443cc19 ]\n\nLUCENE-8106: fix module regex to recognize Windows path backslashes ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16377799",
            "date": "2018-02-26T23:47:34+0000",
            "content": "Commit 67d17644ff85bc4e9dde8d2659e7eac2db3d862d in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=67d1764 ]\n\nLUCENE-8106: stop parsing ANT_OPTS from Jenkins log ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16377800",
            "date": "2018-02-26T23:47:36+0000",
            "content": "Commit 606e91c2aeb2cb8678fcd40918e04cd3aef3022c in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=606e91c ]\n\nLUCENE-8106: fix module regex to recognize Windows path backslashes ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16377801",
            "date": "2018-02-26T23:47:37+0000",
            "content": "Commit 41af8bd16a4d5151adebe3e4dfe847854ab5bde3 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=41af8bd ]\n\nLUCENE-8106: stop parsing ANT_OPTS from Jenkins log ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16377812",
            "date": "2018-02-26T23:58:40+0000",
            "content": "Sarowe's Jenkins uses ANT_OPTS environment variable. But this is something completely different: It is just options that are passed to ANT's JVM (the JVM that runs the build scripts). Those won't be passed to test runners, as not even the build.xml would see them. Contrary, in the python script they are passed like other ant arguments, which is wrong. [...] The ANT_OPTS stuff should be removed from the script, it has nothing to do with reproducing tests\nThanks, this is done.\n\nI also did the following:\n\n\tfixed a path-based regex that was triggering failures on Windows (fixed to handle backslashes).\n\tchanged the windows batch script to only attempt to move directories if they exist (missing directories were causing script failures)\n\tadded the repro script to the 7.x windows job\n\n\n\nI'll keep an eye on the windows builds, hopefully they're fully working after these changes. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16406468",
            "date": "2018-03-20T15:10:09+0000",
            "content": "I attached a patch to address IncompleteRead exceptions that have been occurring occasionally during download of the Jenkins log, e.g. from \nhttps://jenkins.thetaphi.de/job/Lucene-Solr-7.x-Solaris/492/consoleText:\n\n\n[repro] Jenkins log URL: https://jenkins.thetaphi.de/job/Lucene-Solr-7.x-Solaris/492/consoleText\n\n[repro] Revision: db1360fac40fe472f881a37d6a0f0187491e308c\n\n[repro] Ant options: \"-Dargs=-XX:-UseCompressedOops -XX:+UseSerialGC\"\nTraceback (most recent call last):\n  File \"/usr/lib/python3.4/http/client.py\", line 614, in _readinto_chunked\n    chunk_left = self._read_next_chunk_size()\n  File \"/usr/lib/python3.4/http/client.py\", line 559, in _read_next_chunk_size\n    return int(line, 16)\nValueError: invalid literal for int() with base 16: b''\n\nDuring handling of the above exception, another exception occurred:\n\nTraceback (most recent call last):\n  File \"dev-tools/scripts/reproduceJenkinsFailures.py\", line 276, in <module>\n    main()\n  File \"dev-tools/scripts/reproduceJenkinsFailures.py\", line 226, in main\n    tests = fetchAndParseJenkinsLog(config.url)\n  File \"dev-tools/scripts/reproduceJenkinsFailures.py\", line 108, in fetchAndParseJenkinsLog\n    for rawLine in consoleText:\n  File \"/usr/lib/python3.4/http/client.py\", line 500, in read\n    return super(HTTPResponse, self).read(amt)\n  File \"/usr/lib/python3.4/http/client.py\", line 529, in readinto\n    return self._readinto_chunked(b)\n  File \"/usr/lib/python3.4/http/client.py\", line 618, in _readinto_chunked\n    raise IncompleteRead(bytes(b[0:total_bytes]))\nhttp.client.IncompleteRead: IncompleteRead(0 bytes read)\nBuild step 'Execute shell' marked build as failure\n\n\n\nCommitting shortly. ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16406474",
            "date": "2018-03-20T15:12:24+0000",
            "content": "Commit 7ea6569121d78e3683f658b962b1ea1ec9744daa in lucene-solr's branch refs/heads/branch_7_3 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7ea6569 ]\n\nLUCENE-8106: Handle IncompleteRead exceptions while downloading the Jenkins log by retrying a limited number of times ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16406475",
            "date": "2018-03-20T15:12:26+0000",
            "content": "Commit 7735f2c911c8c3fb7cc02f9ab9c8dbe4fb70f9cd in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7735f2c ]\n\nLUCENE-8106: Handle IncompleteRead exceptions while downloading the Jenkins log by retrying a limited number of times ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16406476",
            "date": "2018-03-20T15:12:28+0000",
            "content": "Commit 0c61c857c89ba0003890fc8a2b5378801b57e0ee in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0c61c85 ]\n\nLUCENE-8106: Handle IncompleteRead exceptions while downloading the Jenkins log by retrying a limited number of times ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16419483",
            "date": "2018-03-29T17:52:32+0000",
            "content": "Commit 06e43084a57d29fd9dc176dfec145c148c2b5e50 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=06e4308 ]\n\nLUCENE-8106: add missing import ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16419484",
            "date": "2018-03-29T17:52:34+0000",
            "content": "Commit 1ce72537b8b7577657c275dd7a6bfbb081392575 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1ce7253 ]\n\nLUCENE-8106: add missing import ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16513458",
            "date": "2018-06-15T07:06:59+0000",
            "content": "Steve Rowe Can this issue be marked as resolved again? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16513929",
            "date": "2018-06-15T15:00:08+0000",
            "content": "Thanks Adrien Grand, resolved. ",
            "author": "Steve Rowe"
        }
    ]
}