{
    "id": "SOLR-9583",
    "title": "When the same <uniqueKey> exists across multiple collections that are searched with an alias, the document returned in the results list is indeterminate",
    "details": {
        "components": [],
        "type": "Wish",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Not quite sure whether to call this a bug or improvement...\n\nCurrently if I have two collections C1 and C2 and an alias that points to both and I have a document in both collections with the same <unkqueKey>, the returned list  sometimes has the doc from C1 and sometimes from C2.\n\nIf I add shards.info=true I see the document found in each collection, but only one in the document list. Which one changes if I re-submit the identical query.\n\nThis seems incorrect, perhaps a side effect of piggy-backing the collection aliasing on searching multiple shards? (Thanks Shalin for that bit of background).\n\nI can see both use-cases: \n\n1>  aliasing multiple collections validly assumes that <uniqueKey>s should be unique across them all and only one doc should be returned. Even in this case which doc should be returned should be deterministic.\n\n2> these are arbitrary collections without any a-priori relationship and identical <unkqueKey>s do NOT identify the \"same\" document so both should be returned.\n\nSo I propose we do two things:\n\na> provide a param for the CREATEALIAS command that controls whether docs with the same <unkqueKey> from different collections should both be returned. If they both should, there's still the question of in what order.\n\nb> provide a deterministic way dups from different collections are resolved. What that algorithm is I'm not quite sure. The order the collections were specified in the CREATEALIAS command? Some field in the documents? Other??? What happens if this option is not specified on the CREATEALIAS command?\n\nImplicit in the above is my assumption that it's perfectly valid to have different aliases in the same cluster behave differently if specified.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-30T08:13:50+0000",
            "author": "Noble Paul",
            "content": "how do you dedupe? ",
            "id": "comment-15535383"
        },
        {
            "date": "2016-09-30T13:08:52+0000",
            "author": "David Smiley",
            "content": "This isn't a bug \u2013 it's asking for trouble.  Solr isn't supposed to be used this way.  So I changed this to a \"wish\"; if some day we actually make this work. ",
            "id": "comment-15535948"
        },
        {
            "date": "2016-09-30T16:20:07+0000",
            "author": "Erick Erickson",
            "content": "David Smiley]\n\nI disagree and think there's a bug here. I can be persuaded that there are two issues though, maybe we can split this JIRA.\n\nBug:\nIn the situation I described above, we return one doc or the other, and currently it's indeterminate which one comes back. In fact, the one that comes back will change for the exact same query without the underlying collections changing at all just by resubmitting the query (I turned the queryResultCache off and can reproduce at will). This is even true in a one-shard, leader-only pair of collections. You'll have to argue really hard to persuade me that this is correct behavior. It's certainly not satisfactory to say to a user \"we have no idea which one will be returned and there's nothing you can do about it, don't even try\".\n\nbq: ...it's asking for trouble. Solr isn't supposed to be used this way.\n\nI don't understand this. We allow collection aliasing. There are no rules whatsoever requiring multiple collections have disjoint <uniqueKey>s. Arbitrarily returning only one is hard to justify.\n\nWish:\nWe add the ability to return all docs with the same ID when multiple collections have docs with the same ID under control of some flag.\n\n\nNoble Paul\n\nNot quite sure I understand the question. We \"dedupe\" currently, but it's arbitrary. I doubt it was designed, rather \"just happens\" as a side-effect of merging the lists. My suspicion is that when we merge the results, the final result changes based on the order in which the collection returns are processed. But before diving into the code I wanted to get some idea of what we think should happen.\n\nWe at least should dedupe in a predictable fashion. What the algorithm should be is up for discussion. Perhaps \"doc from last collection listed in the alias wins\" (yuck, frankly but at least I can explain it to someone). Or maybe \"break ties by comparing the collection name\" (also yuck). Or we have to use the sort criteria. Or.... I don't want to get complicated here, just predictable.\n\nIf we decide to return multiple docs with the same ID from separate collections then there's the whole question of how to sort them, but I'll leave that for another day. Maybe we just use whatever we use to dedupe as the sort in this case. ",
            "id": "comment-15536384"
        },
        {
            "date": "2016-09-30T16:41:52+0000",
            "author": "David Smiley",
            "content": "Sorry Erick... I simply mean that, AFAIK, the distributed-search feature has a fundamental assumption that there are no keys duplicated across cores (shards).  AFAIK that fundamental assumption hasn't changed since its inception (Solr 1.3?), despite SolrCloud & alias'ing.  If you violate that assumption... who knows what will happen \u2013 \"undefined\".  I think attempting to support duplicate keys raises bigger questions than simply resolving the particular effects you report here.  For example faceting... I can't imagine the system efficiently deduplicating before counting.  Or even quite simply returning the matching doc count \u2013 same thing. ",
            "id": "comment-15536432"
        },
        {
            "date": "2016-09-30T17:01:01+0000",
            "author": "Erick Erickson",
            "content": "Fair points. I'll have to code-dive (and that's NOT happening today for various reasons) to say something competent, but I'd guess that we already do something with facets and doc counts and the like. If you're saying that whatever we do is probably wrong, then it seems like we should fail in this case rather than let the users blissfully drive on. \"Fail or do it right\" maybe? Or return some kind of warning? Or.....\n ",
            "id": "comment-15536477"
        },
        {
            "date": "2016-09-30T17:50:38+0000",
            "author": "David Smiley",
            "content": "Failing with a helpful message would be great.  \"Distributed-search requires no duplicated uniqueKeys but we found some: XXXX\" ",
            "id": "comment-15536578"
        }
    ]
}