{
    "id": "SOLR-12139",
    "title": "Support \"eq\" function for string fields",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.4"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I just discovered that eq user function will work for numeric fields only.\n\nFor string types it results in java.lang.UnsupportedOperationException\n\nWhat do you think if we will extend it to support at least some of string types as well?",
    "attachments": {
        "SOLR-12139.patch": "https://issues.apache.org/jira/secure/attachment/12916208/SOLR-12139.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-26T14:19:59+0000",
            "content": "It could be something like  SOLR-12139.patch  ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16413912"
        },
        {
            "date": "2018-03-27T04:49:35+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 16s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 16s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 16s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 16s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 16s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 16s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  50m  9s \n  core in the patch failed.  \n\n\n  \n   \n  54m 54s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.autoscaling.TriggerIntegrationTest \n\n\n\u00a0\n solr.update.processor.AtomicUpdateProcessorFactoryTest \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12139 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12916226/SOLR-12139.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / e51735d \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_144 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/20/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/20/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/20/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16415020"
        },
        {
            "date": "2018-03-28T17:19:05+0000",
            "content": "+1 Cool; nice and simple \n\nBTW I've used the tf(field,'foo') trick as a substitute recently, assuming the field is indexed. ",
            "author": "David Smiley",
            "id": "comment-16417780"
        },
        {
            "date": "2018-03-28T18:25:12+0000",
            "content": "Cancel that +1.  My concern with this patch is that it assumes that StrDocValues is the only case in which strVal is the appropriate method to call.  There are intermediate FunctionValues like IfFunction that sit in-between and would foil your attempt here.  Perhaps we can think of objectVal(...) as the always-correct way, and consider instanceof checks for IntDocValues, FloatDocValues, etc. as optimizations?  Such extensive instanceof checks would ideally occur once and not for each doc. ",
            "author": "David Smiley",
            "id": "comment-16417887"
        },
        {
            "date": "2018-03-29T10:15:35+0000",
            "content": "Yep, we can make it not only about straight strings FV\u00a0SOLR-12139.patch ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16418697"
        },
        {
            "date": "2018-03-29T14:44:00+0000",
            "content": "Nice work Andrey.  We'll see how this fairs in tests.\n\nI could imagine that somehow for unforeseen reasons a case occurs where we don't detect it's numeric and so we do the object comparison.  And things like Integer.equals are strict on the opposing type being the same class.  That's a bit strict for our liking here.  But maybe not worry about that risk right now?  It's possibly fixable by the user requiring them to use constants of the appropriate type (e.g. 1.0 vs 1).  Any way, I'm good with the patch as is if it passes tests. ",
            "author": "David Smiley",
            "id": "comment-16419108"
        },
        {
            "date": "2018-03-29T16:56:43+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 57s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 51s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 51s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 51s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 51s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 51s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  52m 20s \n  core in the patch passed.  \n\n\n  \n   \n  55m 49s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12139 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12916801/SOLR-12139.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 358e595 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_144 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/28/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/28/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16419380"
        },
        {
            "date": "2018-03-30T15:35:27+0000",
            "content": "Shall I take this one over from you Mikhail Khludnev? ",
            "author": "David Smiley",
            "id": "comment-16420626"
        },
        {
            "date": "2018-03-30T16:58:50+0000",
            "content": "Yes, please, David Smiley. Thank you. ",
            "author": "Mikhail Khludnev",
            "id": "comment-16420702"
        },
        {
            "date": "2018-03-31T04:20:50+0000",
            "content": "On the eve of committing, I'm very conflicted as I continue to mull over this.\n\nOverloading \"eq\" here could introduce a subtle back-compat break with an existing user if it doesn't detect the types correctly, and I suspect it's not always resolvable.  I was mulling over how to word that exactly in the CHANGES.txt.  And as I look at it in my IDE finally, the implementation here becomes a bit odd in that it modifies SolrComparisonBoolFunction to in certain cases completely ignore the Compare cmp field that is supposedly fundamental to defining what an instance of this class is going to do, and instead calls Object.equals.\n\nTo rectify the issues above, we could create a new subclass of ComparisonBoolFunction explicitly for equality (thus avoiding the hack of disregarding Compare cmp).  And maybe instead of calling Objects.equals(...,...) we check for Number subclasses?  e.g.:\n\nObject left, right;\nif (left == null) return right == null;\nif (right == null) return false;\nif (left.class == right.class) return left.equals(right); // common case?\nif (left instanceof Number && right instanceof Number) {\n  return ((Number)left).doubleValue() == ((Number)right).doubleValue();\n}\nreturn false; // or left.equals(right)  despite that we know the classes are different? Or throw exception.\n\n\n\nThe safest thing to do is add a new simple purpose-built ValueSource, perhaps named \"eq_str\".... although admittedly it's yet another name when logically \"eq\" ought to be appropriate enough.  \n\nMikhail Khludnev do you have any opinion? ",
            "author": "David Smiley",
            "id": "comment-16421174"
        },
        {
            "date": "2018-03-31T08:55:18+0000",
            "content": "David Smiley, not really. I'm lost. The problem you've brought in exceeds my abilities.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16421234"
        },
        {
            "date": "2018-04-02T15:23:25+0000",
            "content": "Mikhail Khludnev LOL what an understatement!  You were too early though; it wasn't quite April fools day.  It takes a lot to exceed your abilities  ",
            "author": "David Smiley",
            "id": "comment-16422608"
        },
        {
            "date": "2018-04-02T15:23:46+0000",
            "content": "\n\n And as I look at it in my IDE finally, the implementation here becomes a bit odd in that it modifies SolrComparisonBoolFunction to in certain cases completely ignore the\u00a0Compare cmp\u00a0field that is supposedly fundamental to defining what an instance of this class is going to do, and instead calls Object.equals.\n\n To rectify the issues above, we could create a new subclass of ComparisonBoolFunction explicitly for equality...\n\n\n+1\n\n\n\nOverloading \"eq\" here could introduce a subtle back-compat break with an existing user if it doesn't detect the types correctly, and I suspect it's not always resolvable\n\n\nSo it's a ValueSource which pretends to be numeric by nether extends LongDocValues / IntDocValues / DoubleDocValues / FloatDocValues nor implements objectVal(...) method. I personally feel like it would be better to fix such  ValueSources instead of making additional checks, but if a backward compatibility is a must have...having new equal function would work. ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16422609"
        },
        {
            "date": "2018-04-02T16:09:58+0000",
            "content": "So it's a ValueSource which pretends to be numeric by nether extends LongDocValues / IntDocValues / DoubleDocValues / FloatDocValues nor implements objectVal(...) method. I personally feel like it would be better to fix such ValueSources instead of making additional checks, but if a backward compatibility is a must have...having new equal function would work.\n\nThat's not what I'm saying; I'm not implying any ValueSource/FunctionValues impls are broken.  I'm suggesting someone right now has a something like this: eq(5,def(fieldA,5)) wherein fieldA is a \"double\" field.   eq() will check the left and find a numeric that is either int/long.  Then it will evaluate the right side and not know what it is so it uses the object comparison.  Lets say that a document has 5.0 in this field on a particular document.  Integer.equals(Double ...) will fail even though 5.0 == 5.  I believe that works today but not with this patch.  We should have a test for this here.\n\nBTW for efficiency we may want to say that if either left or right is a known numeric FunctionValues type then do double comparison (instead of insisting on both).  It doesn't make sense to compare a numeric field with something non-numeric any way.  The change I suggest with this statement is a simple switch of \"&&\" to \"||\" in createComparator. ",
            "author": "David Smiley",
            "id": "comment-16422685"
        },
        {
            "date": "2018-04-02T17:23:53+0000",
            "content": "Ok, I see. Any concerns against checking objectVal(...) to get correct \"type\" of valueSource? ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16422811"
        },
        {
            "date": "2018-04-02T19:00:42+0000",
            "content": "Ok, I see. Any concerns against checking objectVal(...) to get correct \"type\" of valueSource?\n\nConcerns indeed!:  Functions like def() or if() (and others) may have a varying response to objectVal().  And if it doesn't \"exist\") then it'll be null. ",
            "author": "David Smiley",
            "id": "comment-16422982"
        },
        {
            "date": "2018-04-02T20:46:34+0000",
            "content": "Have to sacrifice fancy comparator then (and a bit of performance): \n\n\n \n\n  @Override\n  public boolean compare(int doc, FunctionValues lhs, FunctionValues rhs) throws IOException {\n    Object objL = lhs.objectVal(doc);\n    Object objR = rhs.objectVal(doc);\n    if (isInteger(objL) && isInteger(objR)) {\n      return Long.compare(lhs.longVal(doc), rhs.longVal(doc)) == 0;\n    } else if (isNumeric(objL) && isNumeric(objR)) {\n      return Double.compare(lhs.doubleVal(doc), rhs.doubleVal(doc)) == 0;\n    } else {\n      return Objects.equals(objL, objR);\n    }\n  }\n\n  private static boolean isInteger(Object obj) {\n    return obj instanceof Integer || obj instanceof Long;\n  }\n\n  private static boolean isNumeric(Object obj) {\n    return obj instanceof Number;\n  }\n\n\n ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16423110"
        },
        {
            "date": "2018-04-03T06:01:44+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   2m 23s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   3m 19s \n  the patch passed  \n\n\n +1 \n  javac  \n   3m 19s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   3m 19s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   3m 19s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   3m 19s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  89m  4s \n  core in the patch failed.  \n\n\n  \n   \n  98m 38s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.LIRRollingUpdatesTest \n\n\n\u00a0\n solr.cloud.api.collections.ShardSplitTest \n\n\n\u00a0\n solr.cloud.autoscaling.sim.TestTriggerIntegration \n\n\n\u00a0\n solr.cloud.autoscaling.sim.TestLargeCluster \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12139 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12917215/SOLR-12139.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 2c1f110 \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 8 2015 \n\n\n Default Java \n 1.8.0_152 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/33/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/33/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/33/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16423515"
        },
        {
            "date": "2018-04-05T18:19:46+0000",
            "content": "Andrey,\nYour latest patch calls objectVal() on the FunctionValues and then later potentially calls longVal() or doubleVal().  This can be a bunch of extra work internally (e.g. re-seek of sparse docValues), and is wasteful since you already have the object version!  I fixed this, added some docs, and restructured the if/else a little bit. ",
            "author": "David Smiley",
            "id": "comment-16427391"
        },
        {
            "date": "2018-04-05T21:01:57+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 29s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 19s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 19s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 19s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 19s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 19s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  56m 10s \n  core in the patch failed.  \n\n\n  \n   \n  61m 28s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.ZkControllerTest \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12139 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12917749/SOLR-12139.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 9009fe6 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_152 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/39/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/39/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/39/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16427592"
        },
        {
            "date": "2018-04-09T14:36:14+0000",
            "content": "Good work, David. I\u00a0just added couple more tests for cases\u00a0mentioned above (varying types, i.e. string - numeric comparisons,\u00a0null values) ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16430614"
        },
        {
            "date": "2018-04-09T16:17:57+0000",
            "content": "Commit f0aed933a6674dadf7a563973c6d46e99901c5e6 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f0aed93 ]\n\nSOLR-12139: eq() now works on strings and perhaps anything ",
            "author": "ASF subversion and git services",
            "id": "comment-16430795"
        },
        {
            "date": "2018-04-09T16:18:37+0000",
            "content": "Commit 385449e61731c128700ef9bb532cc182aac01d47 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=385449e ]\n\nSOLR-12139: eq() now works on strings and perhaps anything\n\n(cherry picked from commit f0aed93) ",
            "author": "ASF subversion and git services",
            "id": "comment-16430797"
        },
        {
            "date": "2018-04-09T16:20:11+0000",
            "content": "Thanks Andrey! ",
            "author": "David Smiley",
            "id": "comment-16430801"
        }
    ]
}