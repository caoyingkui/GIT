{
    "id": "SOLR-8409",
    "title": "Complex q param in Streaming Expression results in a bad query",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "6.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "When providing an expression like \n\nstream=search(people, fl=\"id,first\", sort=\"first asc\", q=\"presentTitles:\\\"chief executive officer\\\" AND age:[36 TO *]\")\n\n\nthe following error is seen.\n\nno field name specified in query and no default specified via 'df' param\n\n\n\nI believe the issue is related to the \\\" (escaped quotes) and the spaces in the q field. If I remove the spaces then the query returns results as expected (though I've yet to validate if those results are accurate).\n\nThis requires some investigation to get down to the root cause. I would like to fix it before Solr 6 is cut.",
    "attachments": {
        "SOLR-8409.patch": "https://issues.apache.org/jira/secure/attachment/12777482/SOLR-8409.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-12T02:59:12+0000",
            "author": "Dennis Gove",
            "content": "I've been unable to replicate this in a unit test but have seen it in a fully packaged version of trunk. (ant package was run and then the tarball was unpacked).\n\nDifferences between unit test and packaged version:\n\n\tunit test is using dynamic fields while packaged version is using static fields\n\tunit test is not going through the StreamHandler\n\n ",
            "id": "comment-15053981"
        },
        {
            "date": "2015-12-12T03:15:48+0000",
            "author": "Joel Bernstein",
            "content": "What does the query look like after the Streaming Expression been's parsed? ",
            "id": "comment-15053995"
        },
        {
            "date": "2015-12-12T03:23:33+0000",
            "author": "Dennis Gove",
            "content": "It looks like this\n\npresentTitles:\\\"chief executive officer\\\" AND age:[36 TO *]\n\n\n\nI suspect that the \\\" is the culprit here because the streaming expression parser does not remove the \\ before the quote. As such, and this is a hunch, I suspect that the query parser is seeing \\\" and not considering it a quote that is starting a phase but instead a quote that is just part of the string being searched.\n\n\nchief executive officer\n\n\n\nI believe this can be fixed by adding logic into the expression parser that will transform \\\" into \" and in fact I've written that code (very simple) but my lack of ability to replicate in a unit test is preventing me from ensuring the issue is actually fixed. ",
            "id": "comment-15053998"
        },
        {
            "date": "2015-12-12T03:30:14+0000",
            "author": "Dennis Gove",
            "content": "Backing up my hunch is that if I change the q to be \n\npresentTitles:\\\"chief\\\" AND age:[36 TO *]\n\n\nI get results back but  a very small subset of the results I would expect to get back.\n\nI've yet to visually verify the source data but I would guess that there is a record containing a field value\n<presentTitles>\"chief\"</presentTitles>\n\nI'll check for that the next time I'm looking into this (by Monday I suspect) but I'd wager that I'll find it.  ",
            "id": "comment-15054004"
        },
        {
            "date": "2015-12-14T15:47:44+0000",
            "author": "Dennis Gove",
            "content": "This patch appears to fix the issues. Still am unable to replicate in a unit test but I have confirmed that the issue I was seeing in a packaged setup is fixed with this patch. \n\nI'll want to wait until I can get a replicated test before I commit this. ",
            "id": "comment-15056147"
        },
        {
            "date": "2015-12-15T11:44:58+0000",
            "author": "Dennis Gove",
            "content": "Interestingly, if I leave the q param out entirely I don't see any raised exception. Also, if I leave out a field to filter on I also don't see any raised exception. I've confirmed the solrconfig-streaming.xml doesn't include either default q or df settings so I'd expect to see an exception in both of these cases.\n\nsearch(collection1, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\")\nsearch(collection1, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", q=\"foo\")\n\n ",
            "id": "comment-15057921"
        },
        {
            "date": "2015-12-15T12:31:25+0000",
            "author": "Dennis Gove",
            "content": "I take that back. The file schema-streaming.xml contains the default query field\n\n<defaultSearchField>text</defaultSearchField>\n\n\n\nIf I comment out that setting then I am able to replicate the failure described in this ticket - finally. I will create a couple valid tests replicating the issue and will commit the fix as soon as I can. ",
            "id": "comment-15057983"
        },
        {
            "date": "2016-02-02T14:15:13+0000",
            "author": "Joel Bernstein",
            "content": "Dennis Gove, this looks like it's almost ready to go. Still shooting to get this in for 6.0? ",
            "id": "comment-15128297"
        },
        {
            "date": "2016-02-03T04:40:36+0000",
            "author": "Dennis Gove",
            "content": "Yeah. Planning to commit tomorrow. ",
            "id": "comment-15129772"
        },
        {
            "date": "2016-02-04T01:14:58+0000",
            "author": "Dennis Gove",
            "content": "This new patch ensures that escaped quotes in the parameters of a CloudSolrStream stream are properly re-escaped when converting back to a string expression. This is necessary for situations where the expression is passed off to workers.\n\nNote the comment in CloudSolrStream\n\n      // SOLR-8409: This is a special case where the params contain a \" character\n      // Do note that in any other BASE streams with parameters where a \" might come into play\n      // that this same replacement needs to take place.\n      value = value.replace(\"\\\"\", \"\\\\\\\"\");\n\n\n\nI hope that this comment is heeded if additional base streams dealing with solr params are ever added. ",
            "id": "comment-15131494"
        },
        {
            "date": "2016-02-04T02:02:55+0000",
            "author": "Joel Bernstein",
            "content": "One thing to check is how the SQLHandler is handling quotes. All queries are quoted by default. The TupleStreams are first built through constructors but they are serialized to streaming expressions and sent to worker nodes. Somehow we never tripped this bug in that scenario.  ",
            "id": "comment-15131563"
        },
        {
            "date": "2016-02-04T02:12:50+0000",
            "author": "Joel Bernstein",
            "content": "Just tried to trip this bug with this test case:\n\n\nparams.put(CommonParams.QT, \"/sql\");\n      params.put(\"numWorkers\", \"2\");\n      params.put(\"stmt\", \"select str_s, count(*), sum(field_i), min(field_i), max(field_i), avg(field_i) from collection1 where text='XXXX XXXX' group by str_s order by sum(field_i) asc limit 2\");\n\n\n\n\nThis would have a query like this: text:\"XXXX XXXX\" which would be serialized and sent to workers. It works, so somehow the serialization was handling things.  ",
            "id": "comment-15131579"
        },
        {
            "date": "2016-02-04T02:52:33+0000",
            "author": "Dennis Gove",
            "content": "I believe if it were changed to \n\ntext=\"XXXX XXXX\"\n\n\nit would trip the failure. The issue is with double quotes because double quotes are used to wrap the parameter values. So a q param of\n\nsearch(....., q=\"text:\\\"XXXX XXXX\\\"\", ..... )\n\n\nwould show the issue.\n\nThe issue is that the q param given to Solr cannot include the \\\" and should instead include just the \" around XXXX XXXX. So, to deal with that we have to replace \\\" with \". That then also requires that on the toExpression(...) we have to replace \" with \\\". ",
            "id": "comment-15131624"
        },
        {
            "date": "2016-02-04T02:58:41+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3528cc32cb634137cf389beaa9ecdc2036588d96 in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3528cc3 ]\n\nSOLR-8409: Ensures that quotes in solr params (eg. q param) are properly handled ",
            "id": "comment-15131627"
        },
        {
            "date": "2016-02-04T03:33:54+0000",
            "author": "Joel Bernstein",
            "content": "Ok this interesting. What's below is before this patch:\n\nI ran this test, which I expected to break because the parser would have trouble with quotes inside the quotes. I was surprised to find that it worked perfectly.\n\n expression = StreamExpressionParser.parse(\"parallel(collection1,\"\n                                              + \"rollup(\"\n                                                + \"search(collection1, q=\\\"a_s:(\\\"hello0\\\" OR \\\"hello3\\\" OR \\\"hello4\\\")\\\", fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\"),\"\n                                                + \"over=\\\"a_s\\\",\"\n                                                + \"sum(a_i),\"\n                                                + \"sum(a_f),\"\n                                                + \"min(a_i),\"\n                                                + \"min(a_f),\"\n                                                + \"max(a_i),\"\n                                                + \"max(a_f),\"\n                                                + \"avg(a_i),\"\n                                                + \"avg(a_f),\"\n                                                + \"count(*)\"\n                                              + \"),\"\n                                              + \"workers=\\\"2\\\", zkHost=\\\"\"+zkServer.getZkAddress()+\"\\\", sort=\\\"a_s asc\\\")\"\n                                              );\n\n\n\nBelow is the what was sent to the workers. Notice the quotes are not escaped at all:\n\n\nrollup(search(collection1,q=\"a_s:(\"hello0\" OR \"hello3\" OR \"hello4\")\",fl=\"a_s,a_i,a_f\",sort=\"a_s asc\",partitionKeys=a_s,zkHost=\"127.0.0.1:52813/solr\"),over=a_s,sum(a_i),sum(a_f),min(a_i),min(a_f),max(a_i),max(a_f),avg(a_i),avg(a_f),count(*))\n\nrollup(search(collection1,q=\"a_s:(\"hello0\" OR \"hello3\" OR \"hello4\")\",fl=\"a_s,a_i,a_f\",sort=\"a_s asc\",partitionKeys=a_s,zkHost=\"127.0.0.1:52813/solr\"),over=a_s,sum(a_i),sum(a_f),min(a_i),min(a_f),max(a_i),max(a_f),avg(a_i),avg(a_f),count(*))\n \n\n\nBelow is what was sent from the workers to the shards. Notice that the query is correct. \n\n\n   [junit4]   2> 36804 INFO  (qtp1665513927-67) [n:127.0.0.1:52821_ c:collection1 s:shard2 r:core_node1 x:collection1] o.a.s.c.S.Request [collection1]  webapp= path=/select params={q=a_s:(\"hello0\"+OR+\"hello3\"+OR+\"hello4\")&distrib=false&fl=a_s,a_i,a_f&fq={!hash+workers%3D2+worker%3D0}&sort=a_s+asc&partitionKeys=a_s&wt=json&version=2.2} hits=3 status=0 QTime=1\n   [junit4]   2> 36804 INFO  (qtp637545437-123) [n:127.0.0.1:52829_ c:collection1 s:shard2 r:core_node3 x:collection1] o.a.s.c.S.Request [collection1]  webapp= path=/select params={q=a_s:(\"hello0\"+OR+\"hello3\"+OR+\"hello4\")&distrib=false&fl=a_s,a_i,a_f&fq={!hash+workers%3D2+worker%3D1}&sort=a_s+asc&partitionKeys=a_s&wt=json&version=2.2} hits=3 status=0 QTime=1\n   [junit4]   2> 36804 INFO  (qtp682745908-97) [n:127.0.0.1:52825_ c:collection1 s:shard1 r:core_node2 x:collection1] o.a.s.c.S.Request [collection1]  webapp= path=/select params={q=a_s:(\"hello0\"+OR+\"hello3\"+OR+\"hello4\")&distrib=false&fl=a_s,a_i,a_f&fq={!hash+workers%3D2+worker%3D1}&sort=a_s+asc&partitionKeys=a_s&wt=json&version=2.2} hits=1 status=0 QTime=0\n   [junit4]   2> 36804 INFO  (qtp682745908-471) [n:127.0.0.1:52825_ c:collection1 s:shard1 r:core_node2 x:collection1] o.a.s.c.S.Request [collection1]  webapp= path=/select params={q=a_s:(\"hello0\"+OR+\"hello3\"+OR+\"hello4\")&distrib=false&fl=a_s,a_i,a_f&fq={!hash+workers%3D2+worker%3D0}&sort=a_s+asc&partitionKeys=a_s&wt=json&version=2.2} hits=3 status=0 QTime=0\n\n\n\nSo it appears that the parser doesn't even need the quotes nested within quotes to be escaped. I'm assuming that's because it's splitting on the comma and the equals sign and then removing the outer quotes.\n ",
            "id": "comment-15131660"
        },
        {
            "date": "2016-02-04T03:46:51+0000",
            "author": "Dennis Gove",
            "content": "Try putting a space inside the quote for the q param. That is where I saw the failure that prompted this ticket. So\n\nsearch(collection1, q=\\\"a_s:(\\\"hello0 hellospace\\\" OR \\\"hello3\\\" OR \\\"hello4\\\")\\\", fl=\\\"a_s,a_i,a_f\\\", sort=\\\"a_s asc\\\", partitionKeys=\\\"a_s\\\")\n\n ",
            "id": "comment-15131674"
        },
        {
            "date": "2016-02-04T12:54:51+0000",
            "author": "Joel Bernstein",
            "content": "It took me while to grasp this ticket because it's so hard to reproduce the exception. But I think I've got it now. Basically the instructions to users are:\n\nIf you have to use quotes in your query then escape the quotes:\n\n\nsearch(collection1, q=\"blah \\\"stuff stuff\\\" blah\", ...)\n\n\n\nI'll do some more testing with the SQLHandler to make sure everything is working properly with the quotes. ",
            "id": "comment-15132259"
        },
        {
            "date": "2016-02-05T17:02:14+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3528cc32cb634137cf389beaa9ecdc2036588d96 in lucene-solr's branch refs/heads/lucene-6997 from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3528cc3 ]\n\nSOLR-8409: Ensures that quotes in solr params (eg. q param) are properly handled ",
            "id": "comment-15134470"
        }
    ]
}