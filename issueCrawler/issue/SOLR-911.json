{
    "id": "SOLR-911",
    "title": "multi-select facets",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "plumbing to support the selection of multiple constraints in a facet",
    "attachments": {
        "SOLR-911.patch": "https://issues.apache.org/jira/secure/attachment/12396015/SOLR-911.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12656333",
            "date": "2008-12-13T21:28:00+0000",
            "content": "OK, here's a prototype (still needs string-constants, distrib support, and tests) that implements support for multi-select facets by allowing the tagging of any query via the existing \"localParams\" syntax.  It adds localParams support to facet commands like facet.field to allow exclusion of certain filters.\n\nfq=\n{!tag=typefilter}\ntype:pdf&facet.field=\n{!ex=typefilter}\nmyfield\n\nboth tag and ex may be a comma separated list to allow storing under different tags and selecting multiple tags.\n\nThe localParams method seems preferable since it can be arbitrarily extended for other controls, and already existed when parsing queries.  \n\nThis patch also adds the ability to specify a different output name/key... useful for complex facet queries:\n\nfacet.query=\n{!key=foo}\nrng:[1 TO 2] OR rng:[5 TO 9]\nwill cause the results to come back under a key of \"foo\" rather than \"rng:[1 TO 2] OR rng:[5 TO 9]\" "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12656341",
            "date": "2008-12-13T21:47:13+0000",
            "content": "facet.query={!key=foo}rng:[1 TO 2] OR rng:[5 TO 9]\n\nnice!\n\nAnother goodie to overload into the local params is something maybe like \n{!nocache}\n to prevent filling up the filter cache with something that is not meant to be reused or often.  There's another implementation over at SOLR-407. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12656556",
            "date": "2008-12-15T06:27:00+0000",
            "content": "Whew, things got complicated in distributed search.... refinement queries need to keep the same exclusions so that they get the right count.  I decided to implement a different approach that specifies a comma separated list of terms for the facet.field when refining.  This should result in much smaller refinement requests, less parsing overhead, and smaller response sizes.\n\nAttaching latest draft... only thing left is to make some string constants I think. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12656675",
            "date": "2008-12-15T18:05:54+0000",
            "content": "Attaching finished patch.\nI'll wait a little while before committing to give time for others to review the API and suggest changes. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12657077",
            "date": "2008-12-16T17:34:43+0000",
            "content": "\nThis patch also adds the ability to specify a different output name/key... useful for complex facet queries:\n\nfacet.query={!key=foo}rng:[1 TO 2] OR rng:[5 TO 9]\nwill cause the results to come back under a key of \"foo\" rather than \"rng:[1 TO 2] OR rng:[5 TO 9]\"\n\nbut then how will the client know how what to filter on to actually constrain the query by \"foo\" since it won't actually ko what query that was? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12657096",
            "date": "2008-12-16T18:25:40+0000",
            "content": "but then how will the client know how what to filter on to actually constrain the query by \"foo\" since it won't actually ko what query that was?\n\nWell, it's optional... it's only an issue for stateless clients without conventions or application specific knowledge - and they could always look at the original parameters via echoParams. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12657125",
            "date": "2008-12-16T19:27:44+0000",
            "content": "Well, it's optional... it's only an issue for stateless clients without conventions or application specific knowledge - and they could always look at the original parameters via echoParams.\n\nthat assumes it wasn't baked into the config file.\n\nI guess there's no harm in adding it (except perhaps confusion: i'd hate to see people assume that they can add \"fq=key\" since they got \"key\" back in the facet_queries section of the response)\n\nmy point was really just that facet constraint \"labels\" are really only useful if each label is easily associated with a way of applying that constraint.  replacing the query string with a \"key\" in the response is only useful if that key can be used for something.\n\nIt seems to me like it would be far more useful to just reserve \"key\" as a special local param that we guarantee will never get used, so people can include it in the facet.query and then parse it out of the response themselves.  \n\nYou can already do this today...\n\n\nIn Config...\n    <lst name=\"defaults\">\n      <str name=\"facet.query\">{!ignoredparam=\"Low Price\"}price:[* TO 500]</str>\n      <str name=\"facet.query\">{!ignoredparam=\"Hight Price\"}price:[500 TO *]</str>\n      ...\nIn Query Response...\n   <lst name=\"facet_queries\">\n     <int name=\"{!ignoredparam=\"Low Price\"}price:[* TO 500]\">3</int>\n     <int name=\"{!ignoredparam=\"Hight Price\"}price:[500 TO *]\">0</int>\n     ...\n\n\n\n...but it would be nice to have a parma name reserved for this.\n\n(admittedly it never occurred to me until this Jira post that that worked, i'm going to start encouraging every one i know to start doing that) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12657591",
            "date": "2008-12-17T22:48:07+0000",
            "content": "Committed.  I don't believe there are changes suggested to the API, just possible additions.\nWe can iterate or improve before 1.4. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775606",
            "date": "2009-11-10T15:51:53+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}