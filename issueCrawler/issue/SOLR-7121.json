{
    "id": "SOLR-7121",
    "title": "Solr nodes should go down based on configurable thresholds and not rely on resource exhaustion",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Currently, there is no way to control when a Solr node goes down.\nIf the server is having high GC pauses or too many threads or is just getting too many queries due to some bad load-balancer, the cores in the machine keep on serving unless they exhaust the machine's resources and everything comes to a stall.\n\nSuch a slow-dying core can affect other cores as well by taking huge time to serve their distributed queries.\n\nThere should be a way to specify some threshold values beyond which the targeted core can its ill-health and proactively go down to recover.\nWhen the load improves, the core should come up automatically.",
    "attachments": {
        "SOLR-7121.patch": "https://issues.apache.org/jira/secure/attachment/12699342/SOLR-7121.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-17T21:51:25+0000",
            "author": "Sachin Goyal",
            "content": "Here is a patch which empowers the cores to monitor their own health, go down proactively if thresholds are breached and come up automatically when health improves. ",
            "id": "comment-14324960"
        },
        {
            "date": "2015-02-17T22:08:15+0000",
            "author": "Shawn Heisey",
            "content": "I see hard-coded comparison values in the new code.  If the threshold values do not come from configuration with documented defaults, I think it can be a serious problem.\n\nI will also say that all time measurements should be using nanoTime, not currentTimeMillis.  Trust me when I say that the discussion has been done to death on this topic, and nanoTime is what you'll find everybody switching to, because currentTimeMillis is not monotonic.\n\nhttp://stackoverflow.com/a/2979239\n\nIn general I like the ideas expressed here, though I haven't looked into how things are calculated, other than noticing currentTimeMillis, so I don't know if the approach is good.  I also haven't determined whether it is on or off by default - it should be off, so upgrading users are not surprised by completely new behavior. ",
            "id": "comment-14324993"
        },
        {
            "date": "2015-02-17T22:23:28+0000",
            "author": "Sachin Goyal",
            "content": "Hard-coded values are only for some very specific cases (where we thought it was possible to include hard-coding without bloating the configuration too much).\nBut I can convert them to configuration-value if so requested in the reviews.\n\nWill also switch from milliseconds to nanoseconds.\n\nAll the new features are off by default (See the configuration file diffs for this.) ",
            "id": "comment-14325018"
        },
        {
            "date": "2015-02-19T16:43:37+0000",
            "author": "Sachin Goyal",
            "content": "Shawn Heisey, here is another patch which removes System.currentTimeMillis().\n\nMost of the important values are already in the configuration and turned off by default.\n\n  <coreDownThresholds name=\"thresholds1\">\n\n    <bool name=\"goDownIfHighLoad\">false</bool>\n\n    <str name=\"coreNameExpression\">abc.*</str>\n\n    <int name=\"coreLimitMaxThreads\">45</int>\n\n    <int name=\"coreLimitMaxGcMillis\">10000</int>\n\n    <!-- These 3 options must be specified together and are used as an AND condition -->\n    <int name=\"coreLimitMaxLongQueries\">100</int>\n    <int name=\"coreLimitLongQueryTime\">100</int>\n    <int name=\"coreLimitMaxLongQueriesInterval\">1000</int>\n\n    <!-- These 2 options must be specified together and are used as an AND condition -->\n    <int name=\"coreLimitMax95thPcSelectTime\">-1</int>\n    <int name=\"coreLimitMax5MinSelectRate\">-1</int>\n  </coreDownThresholds>\n\n\nVery few options are hard-coded values as I felt it would be best to leave those out of configuration. Will wait for this patch's complete review comments before converting them to configuration as well. ",
            "id": "comment-14327710"
        },
        {
            "date": "2015-02-19T18:02:58+0000",
            "author": "Mark Miller",
            "content": "Yeah, great feature to add. ",
            "id": "comment-14327815"
        },
        {
            "date": "2015-02-19T18:06:16+0000",
            "author": "Mark Miller",
            "content": "I did not do a close review of the patch, but wouldn't we want to have one polling thread rather than one per core?\n\nWould be good to get some basic testing in as well.  ",
            "id": "comment-14327818"
        },
        {
            "date": "2015-02-19T20:00:11+0000",
            "author": "Sachin Goyal",
            "content": "Thanks Mark Miller.\nThe current polling thread is very short lived.\nIts alive only till the core is unhealthy.\nIf we have a single thread for polling, it has to be up till the whole Solr process is up and running.\nAlso, I think too many cores in a single process are not expected either but I am not sure.\n\nI will add test-cases soon. ",
            "id": "comment-14328039"
        },
        {
            "date": "2015-02-20T03:10:52+0000",
            "author": "Mark Miller",
            "content": "Some users will have an aweful lot of cores.\n\nIt seems wasteful to have mutliple threads all polling the same information.\n\nThe current polling thread is very short lived. Its alive only till the core is unhealthy.\n\nDoesn't that mean it's be long lived? Cores should go a long time healthy idealy. ",
            "id": "comment-14328499"
        },
        {
            "date": "2015-02-20T14:35:32+0000",
            "author": "Shawn Heisey",
            "content": "Some users will have an aweful lot of cores.\n\nMy primary Solr install has 32 Solr cores, and only 8 CPU cores.  Each server is using a different subset of those 32 cores - they are not all in use.  I would most definitely prefer not to have 32 additional actively running threads \u2013 there aren't enough CPUs.\n\nMy Solr install, despite the number of cores, documents, and total index size (over 100GB), is tiny compared to some of what's out there.  When Erick started working on LotsOfCores functionality so that Solr can scale to thousands of cores on a single server and still perform well, that was most definitely not theoretical work. ",
            "id": "comment-14328979"
        },
        {
            "date": "2015-02-20T19:11:25+0000",
            "author": "Sachin Goyal",
            "content": "ok, I wasn't aware of so many cores.\nIn that sense, one thread will definitely make more sense. ",
            "id": "comment-14329377"
        },
        {
            "date": "2015-02-20T23:34:14+0000",
            "author": "Sachin Goyal",
            "content": "Shawn Heisey, Mark Miller,\nThe latest patch has only a single thread for all cores.\nWill add testcase soon. ",
            "id": "comment-14329760"
        },
        {
            "date": "2015-02-26T03:02:57+0000",
            "author": "Otis Gospodnetic",
            "content": "Sachin Goyal - would it make sense to expose all metrics you rely on via JMX?  That way monitoring tools would be able to extract this data and graph it which, in addition to logs, would help people do post-mortem, understand what happened, which metric(s) went up or down, what it/their historical values were, maybe set alerts based on that, etc. ",
            "id": "comment-14337766"
        },
        {
            "date": "2015-02-28T02:41:23+0000",
            "author": "Sachin Goyal",
            "content": "The latest patch includes a test-case for a core going down when its configured number of threads is exceeded.\nThe core is automatically brought up by the Health-Poller when the number of threads comes below that threshold.\n\nI will try to include a test for long-running-queries as well in the next few days but that should be independent of this patch's code-review.\n\nOtis Gospodnetic, great suggestion. I will surely add these metrics to JMX but can we handle that in a follow-up ticket to this one? Let me know. ",
            "id": "comment-14341248"
        },
        {
            "date": "2015-03-03T00:29:06+0000",
            "author": "Sachin Goyal",
            "content": "Added tests for long-running queries and 95th/5MinRateRequest statistics as well.\nGC-time test will need to run for quite sometime before it can detect the same, hence not adding test for that.\nBut the remaining tests should provide a good testing of the patch. ",
            "id": "comment-14344139"
        },
        {
            "date": "2015-03-03T05:28:07+0000",
            "author": "Otis Gospodnetic",
            "content": "I will surely add these metrics to JMX but can we handle that in a follow-up ticket to this one?\n\nSure, if that works for you. ",
            "id": "comment-14344566"
        },
        {
            "date": "2015-03-03T23:13:19+0000",
            "author": "Mark Miller",
            "content": "Cool, glad to see the progress on this.\n\nGC-time test will need to run for quite sometime before it can detect the same\n\nI was thinking that probably we want some base class that can gather all these types of stats - then we can have a mock one that returns whatever we want for tests, and a real impl that returns legit values. ",
            "id": "comment-14345973"
        },
        {
            "date": "2015-03-09T20:17:28+0000",
            "author": "Sachin Goyal",
            "content": "I have added a github pull request for this.\nhttps://github.com/apache/lucene-solr/pull/132\nPlease let me know if that is acceptable.\n\nMark Miller, I have refactored SolrHealthMonitor into:\n1) SolrHealthMonitor - Interface holding public APIs\n2) SolrHealthMonitorBase - Abstract class with logic to bring cores up and down\n3) SolrHealthMonitorImpl - Has logic to get real stats like thread-count, gc-time, long-queries etc.\n\nNow, we can introduce another param 'SolrHealthMonitorImplClass' in the config to decide what to instantiate in SolrCore.\n(Maybe a SolrHealthMonitorImplFactory can instantiate the appropriate class).\nThen we can instantiate the test-class in the config.\n\nProbably this new option can be left out of public configurations to avoid confusion. ",
            "id": "comment-14353514"
        },
        {
            "date": "2015-03-13T21:40:14+0000",
            "author": "Sachin Goyal",
            "content": "Mark Miller, I have implemented the above proposition.\n\n\nsolrconfig-goDownOnBadGC.xml has a new configuration solrHealthMonitorClass for specifying what class to instantiate for SolrHealtMonitor.\nSolrHealthMonitorImplForBadGC is the class which is written specifically for this test and is used in the above config.\n\n\nSolrHealthMonitorFactory helps to instantiate the right class based on the above config.\nDefault option for 'solrHealthMonitorClass' is SolrHealthMonitorImpl\n\n\nI am not including 'solrHealthMonitorClass' in the sample configuration to keep them simple.\nLet me know if you think we should actually add this to sample public configuration too.\n\n\nI have updated the pull request with this fix. Let me know if a patch submission is preferred. ",
            "id": "comment-14361149"
        },
        {
            "date": "2015-04-17T14:05:29+0000",
            "author": "Mark Miller",
            "content": "Sorry it's been a while with no response. I'll try and do a review of this soon. ",
            "id": "comment-14499864"
        },
        {
            "date": "2015-04-21T22:56:41+0000",
            "author": "Sachin Goyal",
            "content": "Thanks Mark Miller\n\nShawn Heisey, Otis Gospodnetic - I saw some valuable comments from you too on this ticket.\nYou can also help me get this committed if you have some time to spare. ",
            "id": "comment-14505962"
        },
        {
            "date": "2015-05-01T02:13:34+0000",
            "author": "Mark Miller",
            "content": "Here is a patch file for the pull request with a bit of cleanup and updated to trunk. ",
            "id": "comment-14522665"
        },
        {
            "date": "2015-05-01T11:12:55+0000",
            "author": "Mark Miller",
            "content": "I think we want to look at making these new tests much faster. The test suite with this patch doesn't yet fully pass for me either.\n\nWhat is the motivation behind the core regex matching and multiple config entries? Do you really need to configure different healthcheck thresholds per core in a collection? ",
            "id": "comment-14523055"
        },
        {
            "date": "2015-05-01T11:15:46+0000",
            "author": "Mark Miller",
            "content": "We also want to make it clear this functionality only works with SolrCloud and think about how that should best be expressed in the code - this bleeds a bit of SolrCloud specific code out of ZkController and into SolrCore in a way we have not really done yet I think. ",
            "id": "comment-14523059"
        },
        {
            "date": "2015-05-01T15:17:49+0000",
            "author": "Mark Miller",
            "content": "\n+    if (cc.isZooKeeperAware() && isUnderHeavyLoad(false)) {\n+      try {\n+        log.info(\"Bringing {} down due to heavy load\", cd.getName());\n+        cc.getZkController().publish(cd, Replica.State.DOWN);\n+        startHealthPoller(core);\n+      } catch (KeeperException | InterruptedException e) {\n+        log.error(e.getMessage(), e);\n+      }\n\n\n\nWhat if we are the leader and publish a down state due to overload? Shouldn't we also give up our leader position? ",
            "id": "comment-14523312"
        },
        {
            "date": "2015-05-04T18:37:43+0000",
            "author": "Sachin Goyal",
            "content": "Thanks for the patch file Mark Miller! I will add a patch file in the future along with pull request updation.\nPlease see my comments below:\n\n\nI think we want to look at making these new tests much faster.\nPlease let me know how much time you are seeing for the running of the newly added tests.\nI think the new tests are using the existing actual Solr Cloud infrastructure and probably will need a little bit of time to setup and shutdown ZK, Cloud etc. unless we are happy with unit tests instead of functional. But if you have any ideas for the particular tests added in this ticket, I will be happy to improve upon the same.\n\n\n\nThe test suite with this patch doesn't yet fully pass for me either.\nCan you please run those failing tests without the patch and let me know if they are still failing?\nThe build seems to be passing at my end.\n\n\n\nWhat is the motivation behind the core regex matching and multiple config entries? Do you really need to configure different healthcheck thresholds per core in a collection?\nAt a very minimum, we may want to configure the cores differently for different collections.\nThe regular expression approach allows us to have a single configuration file for collections serving million documents and running on more powerful machines and also for collections serving a couple thousand small documents and running on less powerful machines.\nWithout the regular expression, one would need separate configuration files for separate collections which is somewhat of a pain to manage.\nSo basically, the regular expressions help define different thresholds for solr running on heterogeneous hardware.\n\n\n\nWe also want to make it clear this functionality only works with SolrCloud and think about how that should best be expressed in the code - this bleeds a bit of SolrCloud specific code out of ZkController and into SolrCore in a way we have not really done yet I think.\nI agree to some extent. However, please note that all the new code is protected with cc.isZooKeeperAware() and it should not affect non-cloud-aware code.\nIf you have more specific thoughts on improving this, I would be happy to refactor the current patch.\n\n\n\nWhat if we are the leader and publish a down state due to overload? Shouldn't we also give up our leader position?\nI am a little confused on this one.\nWouldn't a down state trigger re-election? If not, it should probably be fixed elsewhere by asking non-leaders to start the election process.\nIn any case, note that this code will be reached only when the leader is near exhaustion.\nWithout this code, it would have tipped over completely and would have needed a restart.\nSo, this code helps the leader node to survive a crash and become available in the future. ",
            "id": "comment-14527025"
        },
        {
            "date": "2015-05-04T20:23:03+0000",
            "author": "Mark Miller",
            "content": "Without the regular expression, one would need separate configuration files for separate collections which is somewhat of a pain to manage.\n\nCouldn't you make the same argument for all of the config in solrconfig.xml?\n\nIt seems that all SolrCores in the same collection will want the same config, and you usually would want to use different config for other collections if you want any of it to vary. ",
            "id": "comment-14527212"
        },
        {
            "date": "2015-05-05T22:31:34+0000",
            "author": "Sachin Goyal",
            "content": "I guess the threshold settings are a little different than the other ones because they factor in the underlying machine's capabilities.\nSo all cores in the same collection but running on different kinds of machines can use this setting.\n\nFor other settings, the configuration is more closely tied to the type of collection.\nHence its ok for them to be different across collections and same across all cores in a collection.\n\nIf we remove the above configuration, it might be somewhat difficult to test this feature because currently we are enabling the thresholds on only a single core by the regular expression.\nMaybe we can have the regular expression as an option for testing only like the `solrHealthMonitorClass` option? ",
            "id": "comment-14529427"
        },
        {
            "date": "2015-05-09T11:32:29+0000",
            "author": "Mark Miller",
            "content": "I think there is some work to do on the tests but I have to step back on this one for a while - broke my hand  ",
            "id": "comment-14536370"
        },
        {
            "date": "2015-05-09T11:44:13+0000",
            "author": "Uwe Schindler",
            "content": "I think there is some work to do on the tests but I have to step back on this one for a while - broke my hand \n\nGet well soon! ",
            "id": "comment-14536371"
        },
        {
            "date": "2015-05-11T01:37:06+0000",
            "author": "Sachin Goyal",
            "content": "Sorry to know that Mark Miller\nGet well soon and let me know what's pending when you are back in form. ",
            "id": "comment-14537486"
        },
        {
            "date": "2016-01-28T11:35:45+0000",
            "author": "Stephan Lagraulet",
            "content": "Any updates on this issue?\nAs there is work done by Yonik Seeley and Mark Miller on cluster resilience on Version 5.5 would it be possible to include this patch? ",
            "id": "comment-15121255"
        },
        {
            "date": "2017-06-01T16:42:38+0000",
            "author": "Mark Miller",
            "content": "Still an important patch, sorry it fell to my back burner for so long - can't get back to it near term, but will keep it on my list. ",
            "id": "comment-16033279"
        },
        {
            "date": "2017-09-26T02:39:23+0000",
            "author": "Cao Manh Dat",
            "content": "Shalin Shekhar Mangar Noble Paul Kinda similar to what autoscaling framework can do? ",
            "id": "comment-16180113"
        }
    ]
}