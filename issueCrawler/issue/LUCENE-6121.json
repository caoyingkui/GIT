{
    "id": "LUCENE-6121",
    "title": "Fix CachingTokenFilter to propagate reset() the first time",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "priority": "Major",
        "status": "Reopened",
        "type": "Improvement"
    },
    "description": "CachingTokenFilter should have been propagating reset() but only the first time and thus you would then use CachingTokenFilter in a more normal way \u2013 wrap it and call reset() then increment in a loop, etc., instead of knowing you need to reset() on what it wraps but not this token filter itself. That's weird. It's ab-normal for a TokenFilter to never propagate reset, so every user of CachingTokenFilter to date has worked around this by calling reset() on the underlying input instead of the final wrapping token filter (CachingTokenFilter in this case).",
    "attachments": {
        "LUCENE-6121_CachingTokenFilter_reset_propagates_reset_if_not_cached.patch": "https://issues.apache.org/jira/secure/attachment/12688144/LUCENE-6121_CachingTokenFilter_reset_propagates_reset_if_not_cached.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14251653",
            "author": "David Smiley",
            "date": "2014-12-18T13:42:36+0000",
            "content": "The main challenge with doing exactly what the subject calls for, propagating reset(), is backwards compatibility. Any user of this would have to know, starting with Lucene 5, that they should call reset() on this filter not what it contains.  That's easy to overlook and will compile and could lead to some head-scratching periods when an exception first triggers.  \n\nRobert Muir thought maybe a new class is a solution.  I think that'd be a shame when the name of this one is perfectly good, and already known to people.  I propose instead that the existing constructor be made private, that a new protected one appear (for subclassing) with a boolean resetInput, and a public static wrap(input) method appear to be used instead of the old constructor.  Someone upgrading to Lucene 5 will see a compile error forcing them to look at the new API, and we'll spell out that they should now call reset() on this filter, not the input. "
        },
        {
            "id": "comment-14251678",
            "author": "Robert Muir",
            "date": "2014-12-18T14:18:47+0000",
            "content": "As i said on the previous issue, I am -1 to this boolean.\n\nJust fix the behavior of the class. Its a major release, we can break anything. "
        },
        {
            "id": "comment-14251736",
            "author": "David Smiley",
            "date": "2014-12-18T14:44:15+0000",
            "content": "Ok, nevermind the protected constructor with the boolean. How do you feel about wrap(input)?  I like it.  This ensures people get a compile error triggering them to look at the API.  The existing constructor could be protected. "
        },
        {
            "id": "comment-14251761",
            "author": "Robert Muir",
            "date": "2014-12-18T15:10:39+0000",
            "content": "If this one has the name you want, then we just change the behavior and thats it. Please, no booleans, factories, builders, or other unnecessary abstractions. Static factory methods are terrible. You cannot tell what they are doing... we should always avoid this kind of garbage. "
        },
        {
            "id": "comment-14252371",
            "author": "David Smiley",
            "date": "2014-12-18T22:01:47+0000",
            "content": "The attached patch propagates reset() on reset() only when the stream hasn't been cached yet.  This is good/intuitive behavior, simple, and actually isn't as much of a change to existing users; many might not even notice.  If you still call reset on the input (but not in CachingTokenFilter) before then calling incrementToken, it'll all work out fine.  You shouldn't to follow the spirit of our API, but you can.  In fact there's one query builder ('flexible' AnalyzerQueryNodeProcessor) that I didn't change to move what it calls reset() on and it still works.\n\nIn the patch you may notice I moved the reset() to be before incrementToken() \u2013 I find that flow clearest.\n\nI did have to make a change to the default highlighter.  WeightedSpanTermExtractor handed off it's stream to MemoryIndex, and when done, it called reset() as the last thing it did.  That's bad behavior, IMO but it turned out to (previously) be necessary because Highlighter called reset() before passing the tokenStream to QueryScorer/WSTE.  I fixed this so that WSTE doesn't call reset (it doesn't call incrementToken itself, after all), and moved Highlighter's invocation of reset() to the last possible moment, right before the loop of incrementToken().  I think this is best practice in general \u2013 always call reset() as close to incrementToken() as you can.\n\nIn CHANGES.txt I'll say this:\nCachingTokenFilter now propagates reset() to its input if incrementToken() hasn't been called yet. You should generally call reset() now on this token filter instead of doing it a-priori on its input (which previously didn't work). "
        },
        {
            "id": "comment-14252471",
            "author": "Robert Muir",
            "date": "2014-12-18T22:54:11+0000",
            "content": "\n If you still call reset on the input (but not in CachingTokenFilter) before then calling incrementToken, it'll all work out fine.\n\nHow is that? MockTokenizer should be throwing an exception here. its not ok to reset twice. Please change the text to \"you must\". \n\n\n In fact there's one query builder ('flexible' AnalyzerQueryNodeProcessor) that I didn't change to move what it calls reset() on and it still works.\n\nThen it should be fixed, ideally to use MockAnalyzer so the double-reset causes a test failure first.\n\nWe dont need an API that has \"flexibility\", consumers must follow the normal contract and it will work:\nreset() .. incrementToken().... end(), close()\n\nI am also ok if we only forward close() a single time for now. I do not trust that all TokenStreams obey Closeable yet and will ignore the second invocation. But technically, CachingTokenFilter shouldn't need to do anything special there. "
        },
        {
            "id": "comment-14252775",
            "author": "David Smiley",
            "date": "2014-12-19T01:56:41+0000",
            "content": "How is that? MockTokenizer should be throwing an exception here. its not ok to reset twice.\n\nTo be clear, this worked and still works (though we might not want to advertise that it does):  this is what I meant by it'll all work out fine\n\ninput.reset();\nbuffer = new CachingTokenFilter(input);\nbuffer.incrementToken() ...\n\n\nThis used to work (even though it was bad) and doesn't work any longer \u2013 MockTokenizer will see the second reset() and throw:\n\ninput.reset();\nbuffer = new CachingTokenFilter(input);\nbuffer.reset(); // CachingTokenizer used to swallow this but now won't.  This is what was indirectly happening in my story about Highlighter/WSTE/MemoryIndex but I fixed Highlighter & WSTE.\nbuffer.incrementToken() ...\n\n\nMockTokenizer never 'sees' any reset past the first because if you c\n\nPlease change the text to \"you must\".\n\nOk.\n\n> In fact there's one query builder ('flexible' AnalyzerQueryNodeProcessor) that I didn't change to move what it calls reset() on and it still works.\nThen it should be fixed, ideally to use MockAnalyzer so the double-reset causes a test failure first.\n\nOf course, I left it temporarily to show this isn't going to be the backwards-break we thought it would be.  I fixed it in this patch. I also added a double-reset test to CachingTokenFilter.\n\nRE close(), I could add a boolean closed flag so we only propagate once and only if cache != null.  I'd rather not bother.  It's seems you're fine either way so I'll let it be.\n\nDo you think this patch is ready to be committed?  I'll do a \"precommit\" before literally doing it. "
        },
        {
            "id": "comment-14252789",
            "author": "Robert Muir",
            "date": "2014-12-19T02:09:14+0000",
            "content": "Looks great! Thank you.\n\nCan we not mask the exception in QueryBuilder? it shouldn't be possible, so we can just wrap with RuntimeException. "
        },
        {
            "id": "comment-14253467",
            "author": "ASF subversion and git services",
            "date": "2014-12-19T14:38:03+0000",
            "content": "Commit 1646737 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1646737 ]\n\nLUCENE-6121: CachingTokenFilter.reset() propagates to input if not cached "
        },
        {
            "id": "comment-14253516",
            "author": "ASF subversion and git services",
            "date": "2014-12-19T15:14:41+0000",
            "content": "Commit 1646767 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1646767 ]\n\nLUCENE-6121: CachingTokenFilter.reset() propagates to input if not cached "
        },
        {
            "id": "comment-14253518",
            "author": "David Smiley",
            "date": "2014-12-19T15:16:42+0000",
            "content": "Thanks for your input Rob.\n\nFYI I moved the QueryBuilder buffer.reset() to the end of the previous try-catch that wraps with RuntimeException, so it'll not be swallowed. "
        },
        {
            "id": "comment-14253551",
            "author": "Robert Muir",
            "date": "2014-12-19T15:43:07+0000",
            "content": "I don't like that: you can't follow the logic flow: because reset is in a crazy place.\n\nPlease, just wrap with runtimeexception. "
        },
        {
            "id": "comment-14253572",
            "author": "David Smiley",
            "date": "2014-12-19T15:58:42+0000",
            "content": "Sure; that point occurred to me too.\n\nIf there is no term attribute (as strange as that may be), then this reset() call needs to be guarded by if (numTokens > 0) or else a double-reset will ensue.  See it?\n\nAlso, I'd like to remove the needless = null|false initializations to variables where it's not needed due to the compiler figuring out it's not needed (which IntelliJ helpfully points out). "
        },
        {
            "id": "comment-14253580",
            "author": "David Smiley",
            "date": "2014-12-19T16:02:03+0000",
            "content": "... cleaner to just move the numTokens==0 to before the reset, I think "
        },
        {
            "id": "comment-14253581",
            "author": "Robert Muir",
            "date": "2014-12-19T16:02:19+0000",
            "content": "Can you just wrap with runtimeexception and try making minimal changes to the code as it was for this issue?\n\nThis method is e.g. used by all queryparsers and is complex. This is not the place to try to be cute to save a try/catch. It is important that logic and flow make sense, because its already confusing.\n\nI am sure there are other issues with the method besides the no-term-att-case, because its complicated. But that means its even more important to be cautious, e.g. approach this in a separate issue and so on. "
        },
        {
            "id": "comment-14253583",
            "author": "Robert Muir",
            "date": "2014-12-19T16:03:51+0000",
            "content": "\n... cleaner to just move the numTokens==0 to before the reset, I think\n\nPlease, I do not want these changes under this issue. The current code was already committed in a cowboy way. \n\nTrunk tests are failing. branch_5x compile does not fail.\n\nMore care is needed here. "
        },
        {
            "id": "comment-14253625",
            "author": "Michael McCandless",
            "date": "2014-12-19T16:43:15+0000",
            "content": "Can we rollback this change for now?  Sounds like it needs a little more iterating here first... "
        },
        {
            "id": "comment-14253640",
            "author": "ASF subversion and git services",
            "date": "2014-12-19T16:52:46+0000",
            "content": "Commit 1646793 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1646793 ]\n\nLUCENE-6121: Fix a test to assumeTrue assertions enabled. "
        },
        {
            "id": "comment-14253643",
            "author": "ASF subversion and git services",
            "date": "2014-12-19T16:55:40+0000",
            "content": "Commit 1646794 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1646794 ]\n\nLUCENE-6121: QueryBuilder put 2nd reset() to where it was, and add test to ensure no double-reset if there is no term attribute. "
        },
        {
            "id": "comment-14253652",
            "author": "ASF subversion and git services",
            "date": "2014-12-19T17:03:22+0000",
            "content": "Commit 1646796 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1646796 ]\n\nLUCENE-6121: QueryBuilder put 2nd reset() to where it was, and add test to ensure no double-reset if there is no term attribute. "
        },
        {
            "id": "comment-14253665",
            "author": "David Smiley",
            "date": "2014-12-19T17:12:55+0000",
            "content": "I appreciate it may have seemed \"cowboy\" from where you sit but I ran tests on trunk & 5x, precommit as well.  Of course this doesn't guarantee no problems.\n1. I should switch my 5x environment shell to switch my java environment to Java 7, not my default (Java 8).  Thanks for the quick fix Mike.\n2. The test failure seen on trunk was because the test I added fundamentally requires MockTokenizer to do its thing, and when assertions aren't enabled (randomly chosen) then it won't.  So I committed this moments ago:\n\nassumeTrue(\"We want MockAnalyzer to detect double-reset\", TEST_ASSERTS_ENABLED);\n\n\n\nI anticipate both trunk/5x should be stable now.\n\nI am sure there are other issues with the method besides the no-term-att-case, because its complicated. But that means its even more important to be cautious, e.g. approach this in a separate issue and so on.\n\nI added a test to TestQueryBuilder that tests the behavior we want when there is no term attribute, since clearly QueryBuilder was written to support that yet it wasn't tested.\n\nPlease, I do not want these changes under this issue.\n\nI don't agree on insisting on a heavy-weight process for minor code clarity improvements.  It's not worth it to create an issue over such things; so it sits there the way it is.  As it is, we need to commit to multiple branches, which is a PITA.  But fine, you have a right to your opinion. "
        },
        {
            "id": "comment-14253684",
            "author": "Michael McCandless",
            "date": "2014-12-19T17:30:47+0000",
            "content": "I should switch my 5x environment shell to switch my java environment to Java 7, not my default (Java 8). Thanks for the quick fix Mike.\n\nActually, even if you use Java 8 on 5.x, it fails compilation (thanks to javac.source=1.7).\n\nStill it is of course best to run compilation/tests with java7 on backport ... but it's easy to forget ... "
        }
    ]
}