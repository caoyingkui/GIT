{
    "id": "LUCENE-5210",
    "title": "Unit tests for LicenseCheckTask.",
    "details": {
        "components": [
            "general/build"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Test",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "While working on LUCENE-5209, I noticed the LicenseCheckTask is kind of a second class citizen - excluded from UI src folder setup and with no units tests. This was a little scary to me.\n\nI've started adding some units tests. So far I have mainly just done the lifting of getting units tests to work as part of tools.\n\nI have added two super simple tests - really just the start - but something to build on.",
    "attachments": {
        "LUCENE-5210.patch": "https://issues.apache.org/jira/secure/attachment/12603112/LUCENE-5210.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-09-13T21:31:39+0000",
            "content": "This patch is not complete, but to show the current direction. There will be at least one more. ",
            "author": "Mark Miller",
            "id": "comment-13766983"
        },
        {
            "date": "2013-09-13T21:36:00+0000",
            "content": "Also note: the test.jar files (fake) that belong in the test resources folder did not get picked up by the patch. ",
            "author": "Mark Miller",
            "id": "comment-13766992"
        },
        {
            "date": "2013-09-14T02:07:47+0000",
            "content": "Here is a more complete patch. ",
            "author": "Mark Miller",
            "id": "comment-13767300"
        },
        {
            "date": "2013-09-14T07:43:54+0000",
            "content": "Hi,\nto make tests easy there is antunit. I use this to test forbidden-apis. It is registered as a separate task in ANT and you write a build file that works as test. It can check inner tests and apply assertions on the output, file state,...\n\nThis would reduce the 2 simple tests to one build file that is executed as a subant task from the main build file. No Junit needed.\n\nSee as example: https://code.google.com/p/forbidden-apis/source/browse/trunk#trunk%2Fsrc%2Ftest%2Fantunit\nIt is called from here: https://code.google.com/p/forbidden-apis/source/browse/trunk/build.xml?spec=svn207&r=207#346\n\nI can help with implementing this (unfortunately I am busy next week), it should be mostly copy/paste of the test setup in forbidden's build.xml and reuse some simple tests. ",
            "author": "Uwe Schindler",
            "id": "comment-13767400"
        },
        {
            "date": "2013-09-14T09:48:22+0000",
            "content": "In addition: I disagree with adding the LicenseCheckTask (and all tools folders around Lucene) to Eclipse setup. With a good antunit test this is also not needed. ",
            "author": "Uwe Schindler",
            "id": "comment-13767429"
        },
        {
            "date": "2013-09-14T10:50:58+0000",
            "content": "I while ago I was also discussing with Dawid and Robert about the LicenseChecker in general. At the time it was written, we had not yet experience with using scripting inside ANT.\n\nWe should maybe discover removing the java code completely and create the license checker as a macro like the svn working copy checks. We already have the framework in common-buil.xml to load the groovy scripting engine, porting over the java code to be a macro should be very simple (it is mostly copy/paste and some ANT magic). We can then also test the checker with Antunit, if we like. The simplicity of this checker does not rectify having the compile/classpath/ANT overhead. A simple \"resolve-grovy\" and a macro should do the work.\n\nCan we keep this issue open for a while until I am back so I can check?\n\nAbout your patch: To me the patch looks a little bit incorrect regarding resources: It creates a src/resources folder, which is per convention only for resources shipped with the JAR file. Test resources are currently next to the Test .java files. This is not an issue for the tool, because we dont package them as JAR file, but its still wrong, because the resources are available to the ANT task when its running \"in production\". ",
            "author": "Uwe Schindler",
            "id": "comment-13767441"
        },
        {
            "date": "2013-09-14T12:26:15+0000",
            "content": "In addition: I disagree with adding the LicenseCheckTask (and all tools folders around Lucene) to Eclipse setup. With a good antunit test this is also not needed.\n\nHow is that? When it's not in the eclipse setup, editing the code is annoying and hard - when it is, it is easy. Does antunit make it nice to edit the code? I'm not sure how it could.\n\nIn any case, thanks for the tip.\n\nWe should maybe discover removing the java code completely and create the license checker as a macro like the svn working copy checks.\n\nPersonally, I think doing anything in ant over java is a terrible idea. Ant is terrible when it's complicated and more and more of us have to be experts in it to do anything. Ant is so obtuse for anything that is not super straightfoward. Mixing in Groovy as well really makes my stomach turn \n\nTo me the patch looks a little bit incorrect regarding resources\n\nI'm not sure that matters, but it can just be a test resources folder as I intended instead.\n\nBasically, I think being anal about what we end up with should be a clear step 2. Having any testing at all for our license checker should be the clear step one. Once we have any testing, it will make me sad if you make it all ant and really hard for anyone else to figure out, but I don't really care too much as long as our very important LiceneCheckTask has tests - right now it's flying blind. ",
            "author": "Mark Miller",
            "id": "comment-13767475"
        },
        {
            "date": "2013-09-16T02:59:13+0000",
            "content": "I have no opinion on the eclipse/ant/antunit stuff.\n\nI just want to say currently there is no test, so I think we should start with a test and then improve it.\n\nMy one suggestion about testing and the jars: if the test is in java, it can easily create jars on the fly in temp dirs so we dont have to package them (with fake licenses). This is done in ResourceLoaderTest in solr for example:\n\n\n  public void testClassLoaderLibs() throws Exception {\n    File tmpRoot = _TestUtil.getTempDir(\"testClassLoaderLibs\");\n\n    File lib = new File(tmpRoot, \"lib\");\n    lib.mkdirs();\n\n    JarOutputStream jar1 = new JarOutputStream(new FileOutputStream(new File(lib, \"jar1.jar\")));\n    jar1.putNextEntry(new JarEntry(\"aLibFile\"));\n    jar1.closeEntry();\n    jar1.close();\n    ...\n\n ",
            "author": "Robert Muir",
            "id": "comment-13768019"
        },
        {
            "date": "2013-09-16T03:14:01+0000",
            "content": "As far as current patch, i dont really have a problem with it (any other simplifications can be done later).\n\nI have only one concern: will this make a lucene-tools module (e.g. packaged in releases, published in maven?)\n\nIt seems like it might, which separately might be a good idea so someone can use the stuff in this folder in their own project, except a few things would be off as far as packaging:\n\n\tit should probably be restructured, so that various configs used by the build are in src/resources and put inside its jar file (e.g. forbiddenApis configs and so on)\n\tI think this depends on ant, but there is no dependency of ant in the ivy.xml\n\tit would need maven configuration and so on, added in smoketester, etc.\n\tthere might be other exclusions for tools/ in the build that are not appropriate, etc.\n\tas far as the name, maybe build-tools would be a better one (since its not tools for working on lucene indexes).\n\n\n\nIf smoketester passes though, I am happy: We can just make sure its excluded from the right places and not doing something we don't want wrt packaging for now, and discuss this stuff on other issues. ",
            "author": "Robert Muir",
            "id": "comment-13768025"
        },
        {
            "date": "2013-09-16T03:22:59+0000",
            "content": "Yeah, my first thought was to write out the test files to a tmp dir, but essentially I was too lazy to code it up. ",
            "author": "Mark Miller",
            "id": "comment-13768032"
        },
        {
            "date": "2013-09-16T03:24:02+0000",
            "content": "Also note, prepare-release does not currently pass the way things are - something to do with a maven artifact that now tries to run on tools. ",
            "author": "Mark Miller",
            "id": "comment-13768033"
        },
        {
            "date": "2013-09-16T03:26:45+0000",
            "content": "I think if we just want to run tests for now, we should change the test target to explicitly recurse to tools, rather than modifying the 'general module macro' in common-build.\n\notherwise other tasks (like packaging, javadocs, maven, etc) will try to do things with tools. ",
            "author": "Robert Muir",
            "id": "comment-13768034"
        },
        {
            "date": "2013-09-16T03:27:36+0000",
            "content": "will this make a lucene-tools module (e.g. packaged in releases, published in maven?)\n\nYeah, that is what is happening currently - I'm sure that is what is causing prepare-release to have issues. ",
            "author": "Mark Miller",
            "id": "comment-13768035"
        },
        {
            "date": "2013-09-16T03:31:35+0000",
            "content": "look at regenerate task in build.xml, it has a subant explicitly going to 'core' to run a task.\n\nwe'd just want something like that subant, call it someting like 'test-tools'\n\nand have 'test' depend on that. ",
            "author": "Robert Muir",
            "id": "comment-13768037"
        }
    ]
}