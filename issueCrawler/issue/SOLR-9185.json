{
    "id": "SOLR-9185",
    "title": "Solr's edismax and \"Lucene\"/standard query parsers should optionally not split on whitespace before sending terms to analysis",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Copied from LUCENE-2605:\n\nThe queryparser parses input on whitespace, and sends each whitespace separated term to its own independent token stream.\n\nThis breaks the following at query-time, because they can't see across whitespace boundaries:\n\nn-gram analysis\nshingles\nsynonyms (especially multi-word for whitespace-separated languages)\nlanguages where a 'word' can contain whitespace (e.g. vietnamese)\n\nIts also rather unexpected, as users think their charfilters/tokenizers/tokenfilters will do the same thing at index and querytime, but\nin many cases they can't. Instead, preferably the queryparser would parse around only real 'operators'.",
    "attachments": {
        "SOLR-9185.patch": "https://issues.apache.org/jira/secure/attachment/12813115/SOLR-9185.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-06-09T22:04:35+0000",
            "author": "Mary Jo Sminkey",
            "content": "This has been an issue for a LONG time and available solutions not always usable let alone ideal. This would be my #1 one thing to be fixed in Solr.  ",
            "id": "comment-15323464"
        },
        {
            "date": "2016-06-10T16:13:15+0000",
            "author": "Shawn Heisey",
            "content": "I have often wondered whether things would work better if that behavior were changed.\n\nI think we need an option that turns the whitespace split off.  An alternate implementation path is a completely new query parser in addition to the existing parser.  Perhaps it could be named \"solr\".\n\nWhatever implementation is chosen, I think the default behavior in 6.x should remain unchanged.  We can change the default in master.\n\nThe implementation might take a while to become bulletproof.  I suspect that the query parser code relies heavily on the current behavior and that things will break in unexpected ways when changing that behavior.  ",
            "id": "comment-15324714"
        },
        {
            "date": "2016-06-10T16:26:26+0000",
            "author": "Steve Rowe",
            "content": "I think we need an option that turns the whitespace split off.\n\nI disagree.  I think the current behavior is counter to users' expectations, so we should just get rid of it.\n\nI suppose we could add luceneMatchVersion-sensitive code and include both versions, but yuck, I'd much rather not do that.\n\nI think the default behavior in 6.x should remain unchanged. We can change the default in master.\n\nI disagree.  I think we should change the default behavior ASAP.\n\nThe implementation might take a while to become bulletproof. I suspect that the query parser code relies heavily on the current behavior and that things will break in unexpected ways when changing that behavior.\n\nHere I agree.  (e)dismax and other parsers that are based on the Solr clone of the Lucene QP will need work before this change can be released. ",
            "id": "comment-15324740"
        },
        {
            "date": "2016-06-10T22:31:09+0000",
            "author": "Shawn Heisey",
            "content": "The current behavior might be counter to a new user's expectations, but if we just change how it works by default, a lot of existing users might suddenly be surprised by very different behavior from Solr after a minor version upgrade where no config changes were made.  In many cases the new behavior might be preferred, but I don't think we can assume that. ",
            "id": "comment-15325410"
        },
        {
            "date": "2016-06-10T22:48:31+0000",
            "author": "Mary Jo Sminkey",
            "content": "Agree that in a case like this, an incremental approach is often best, where the new behavior is available via a setting, etc. while warning people that existing method is decremented and will be replaced in the next (or a future) major update.  ",
            "id": "comment-15325445"
        },
        {
            "date": "2016-06-11T03:35:03+0000",
            "author": "Yonik Seeley",
            "content": "The current behavior might be counter to a new user's expectations, but if we just change how it works by default, a lot of existing users might suddenly be surprised by very different behavior from Solr \n\n+1, it's been this way since the beginning of Lucene.  It's not a bug (esp since in the past multiple terms were treated as a phrase query, and still are depending on configuration - think word delimiter filter).\n\nI suppose we could add luceneMatchVersion-sensitive code \n\nThat's a very blunt hammer \nIt would be nice if we could selectively keep the old behavior, but I'm not sure how difficult that would be w/o duplicating the whole parser. ",
            "id": "comment-15325683"
        },
        {
            "date": "2016-06-24T16:35:01+0000",
            "author": "Steve Rowe",
            "content": "Initial WIP patch, mostly just grammar changes brought over from LUCENE-2605; no tests yet, and I haven't tried to generate/compile.\n\nIn addition to the grammar changes, I've removed the Version matchVersion param from SolrQueryParserBase.init() - it was being ignored, and the equivalent param was removed from the Lucene classic QueryParser in LUCENE-5859.\n\nNote that I've added an option to preserve the old behavior ({get,set}SplitOnWhitespace()) and made it default to true - it wasn't necessary to create two separate versions of the parser to enable this. ",
            "id": "comment-15348544"
        },
        {
            "date": "2016-06-28T00:07:01+0000",
            "author": "Steve Rowe",
            "content": "Another WIP patch.  Progress: parser generates (with ant javacc), compiles (after first applying the patch from LUCENE-2605 and regenerating), and most tests pass with the default split-on-whitespace option (i.e.: true - preserve old behavior).  Failing tests (haven't investigated yet):\n\n\n\tTestSolrQueryParser.testComments()\n\tTestPostingsSolrHighlighter: testDefaultSummary() and testEmptySnippet()\n\n ",
            "id": "comment-15352094"
        },
        {
            "date": "2016-06-28T23:26:02+0000",
            "author": "Steve Rowe",
            "content": "This parser's comment support clashes with the approach I took to handling whitespace (tokenization vs. ignoring): when a run of whitespace is interrupted by a comment, multiple WHITESPACE_SEQ tokens are generated, and the rules expect all whitespace runs to be collapsed into a single WHITESPACE_SEQ token.  Thinking about a way to address this. ",
            "id": "comment-15353920"
        },
        {
            "date": "2016-07-01T01:40:17+0000",
            "author": "Steve Rowe",
            "content": "New patch, switches back to ignoring whitespace (along with comments).\n\nAdded new LuceneQParser param sow (S\u200bplit O\u200bn W\u200bhitespace) to control whether to split on whitespace.  Defaults to SolrQueryParser.DEFAULT_SPLIT_ON_WHITESPACE (true).\n\nAll Solr core tests pass (with existing split-on-whitespace behavior preserved as the default), and I've added a couple basic multi-word synonym tests.  Needs more tests to ensure multiword analysis is properly interrupted in the presence of operators. ",
            "id": "comment-15358208"
        },
        {
            "date": "2016-12-21T14:34:01+0000",
            "author": "Harrison Beachey",
            "content": "I'm excited that this has had some attention this year, any word on continued progress? ",
            "id": "comment-15767197"
        },
        {
            "date": "2016-12-26T17:20:09+0000",
            "author": "Erick Erickson",
            "content": "Happened across SOLR-4381 and SOLR-5379 while searching for this JIRA and thought we should check how/if they're related ",
            "id": "comment-15778688"
        },
        {
            "date": "2017-03-16T23:20:11+0000",
            "author": "Steve Rowe",
            "content": "Patch addressing the remaining issues.  Precommit and all Solr tests pass.  I plan on committing this shortly so that it will make the 6.5 release.\n\nBoth edismax and the standard query parser are covered.  I did not add this feature to the dismax parser (or to any other Solr query parsers); if people want this feature added elsewhere, we can do that under another issue.\n\nSome implementation notes:\n\n\n\tAs noted in previous comments on this issue, the feature is activated by specifying request param sow=false.  By default, sow=true; there is no behavior change at all if the sow param is not specified.\n\tI ran TestSolrQueryParser.testParsingPerformance() under three conditions: a) unpatched; b) patched using the default behavior (same as sow=true); and c) patched with sow=false to activate the don't-split-on-whitespace code.  The best-of-ten results run in a bash loop on my Linux box show all three within about 0.5% of each other's QPS (likely noise): between 91K and 92K QPS.  Average-of-ten puts the two patched conditions at roughly 2% slower (88K vs. 90K QPS).  I think this is acceptable.\n\tWhen per-field query structures differ, e.g. when one field's analyzer removes stopwords and another's doesn't, edismax's DisjunctionMaxQuery structure when sow=false differs from that produced when sow=true.  Briefly, sow=true produces a boolean query containing one dismax query per query term, while sow=false produces a dismax query containing one boolean query per field. Min-should-match processing does (what I think is) the right thing here. See TestExtendedDismaxParser.testSplitOnWhitespace_Different_Field_Analysis() for some examples of this. Note: when sow=false and all queried fields' query structure is the same, edismax does what it has always done: produce a boolean query containing one dismax query per term.\n\tThere is a new test suite TestMultiWordSynonyms that shows multi-term source synonyms matching at query-time.\n\tIn order to deal with the set query changes introduced by SOLR-9786, I extended SolrQueryParserBase.RawQuery to hold an array of terms, to enable their later consumption as either a concatenated string (for tokenized fields) or individually (for non-tokenized fields).\n\tAs noted on LUCENE-7533 for Lucene's classic query parser (and equally applicable to the Solr standard and edismax query parsers), split-on-whitespace=false and autoGeneratePhraseQueries=true don't play well together at present.  I've introduced a new exception QueryParserConfigurationException that will be thrown if any queried field is configured with autoGeneratePhraseQueries=true when the sow=false request param is specified.  For edismax, this is a departure: it's supposed to never throw exceptions.  I think that's okay for now though, since this is an optional/experimental feature.  Maybe when sow=false becomes the default (later, under another issue - see below), edismax should just log a warning and produce a query that excludes fields with this problem?\n\n\n\nAfter this has been committed, I'll make a new issue to switch the default behavior on 7.0/master to sow=false. ",
            "id": "comment-15929124"
        },
        {
            "date": "2017-03-17T00:27:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3a3acfda04c3b2490adc8cb55001c82e21961cb5 in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3a3acfd ]\n\nSOLR-9185: Solr's edismax and Lucene/standard query parsers should optionally not split on whitespace before sending terms to analysis\n\nConflicts:\n\tsolr/core/src/java/org/apache/solr/search/ExtendedDismaxQParser.java ",
            "id": "comment-15929227"
        },
        {
            "date": "2017-03-17T00:27:18+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d1b2fb33ef3bc0ced65feb98c31cffe4f209da7f in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d1b2fb3 ]\n\nSOLR-9185: Solr's edismax and Lucene/standard query parsers should optionally not split on whitespace before sending terms to analysis ",
            "id": "comment-15929228"
        },
        {
            "date": "2017-03-17T00:37:18+0000",
            "author": "Steve Rowe",
            "content": "After this has been committed, I'll make a new issue to switch the default behavior on 7.0/master to sow=false.\n\nDone: SOLR-10310 ",
            "id": "comment-15929242"
        },
        {
            "date": "2017-03-17T14:44:50+0000",
            "author": "Shawn Heisey",
            "content": "For edismax, this is a departure: it's supposed to never throw exceptions.\n\nI'm not sure this is completely accurate.  The original dismax parser almost never throws exceptions, mostly because it doesn't handle standard syntax for specifying fields, operators, etc.  Because edismax does allow most of that syntax, I think exceptions are expected. ",
            "id": "comment-15930064"
        },
        {
            "date": "2017-03-17T15:17:31+0000",
            "author": "Steve Rowe",
            "content": "\nFor edismax, this is a departure: it's supposed to never throw exceptions.\nI'm not sure this is completely accurate. The original dismax parser almost never throws exceptions, mostly because it doesn't handle standard syntax for specifying fields, operators, etc. Because edismax does allow most of that syntax, I think exceptions are expected.\n\nedismax will catch parsing exceptions, and attempt alternate interpretation by escaping operators in the original query, then re-parsing. ",
            "id": "comment-15930115"
        },
        {
            "date": "2018-03-27T18:03:00+0000",
            "author": "Dean Gurvitz",
            "content": "I would like to note that this issue actually included an API change in a minor Solr version without prior deprecation warnings, changing SolrQueryParserBase.init 's signature.\u00a0I think this should've been avoided as I don't see how it relates to the rest of the issue, or at least be mentioned explicitly if already included, and preferably moved to a major version update. ",
            "id": "comment-16416018"
        },
        {
            "date": "2018-03-27T18:14:23+0000",
            "author": "Steve Rowe",
            "content": "I would like to note that this issue actually included an API change in a minor Solr version without prior deprecation warnings, changing SolrQueryParserBase.init 's signature. I think this should've been avoided as I don't see how it relates to the rest of the issue, or at least be mentioned explicitly if already included, and preferably moved to a major version update.\n\nYou're right, it was an unrelated cleanup of an unused parameter.  As I noted in a comment above:\n\nIn addition to the grammar changes, I've removed the Version matchVersion param from SolrQueryParserBase.init() - it was being ignored, and the equivalent param was removed from the Lucene classic QueryParser in LUCENE-5859.\n ",
            "id": "comment-16416035"
        },
        {
            "date": "2018-03-27T18:31:49+0000",
            "author": "Dean Gurvitz",
            "content": "I missed that comment. Anyways, I just think that we should be more careful with such changes in minor versions, and at least explicitly mention them in the changes.txt file for\u00a0those who with to upgrade their version. ",
            "id": "comment-16416051"
        }
    ]
}