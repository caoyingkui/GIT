{
    "id": "LUCENE-8113",
    "title": "Allow terms dictionary lookups to be lazy when scores are not needed",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "master (8.0)"
        ]
    },
    "description": "LUCENE-7311 made it possible to avoid loading TermStates in cached TermQueries.  It would be useful to extend this to other queries that use the terms dictionary.",
    "attachments": {
        "LUCENE-8113-rename.patch": "https://issues.apache.org/jira/secure/attachment/12904785/LUCENE-8113-rename.patch",
        "LUCENE-8113.patch": "https://issues.apache.org/jira/secure/attachment/12904192/LUCENE-8113.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16307823",
            "date": "2018-01-02T10:12:11+0000",
            "content": "Here's a patch that introduces a LazyTermContext object.  TermContext.build() now takes an extra 'needsStats' parameter, and returns a lazy-loading TermContext if it is false.  TermContext.get() needs to take a LeafReaderContext rather than an integer.\n\nPhraseQuery and SpanTermQuery can now avoid disk seeks if they're being used directly from the query cache, and it simplifies the logic in TermWeight as well. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16307943",
            "date": "2018-01-02T12:07:27+0000",
            "content": "Can we fold this into TermContext directly rather than subclassing? \n\nI think this class is already too complicated for any performance benefits it brings us. If we add subclassing it sets it over the edge a bit. \n\nCan we also try to think of a better name for it? I really like this change in the patch:\n\n\n- public TermState get(int ord) {\n+ public TermState get(LeafReaderContext ctx) throws IOException {\n\n\n\nBut because both things are named *Context (which to me is a meaningless name), it leads to confusing looking code such as:\n\nTermState termState = termContext.get(context);\n\n\n\nAlso there are quite a few changes to how ScoreModes are passed during query construction in the patch. Looks correct, but is that supposed to be here? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16307983",
            "date": "2018-01-02T12:54:22+0000",
            "content": "This patch folds LazyTermContext back into TermContext itself.\n\nThe ScoreMode changes are in SpanQueries.  Previously we only needed to know about score mode at the top of the tree, because stats were collected by SpanTermQuery regardless, but now STQ can lazily collect term states so ScoreMode needs to be propagated down.  This does fix a bug where SpanNotQuery was taking into account terms from its exclusion query when scoring.\n\nThe name is confusing, I agree.  How about IndexTermStates, given it's basically a wrapper around an array of TermState objects for a specific index? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16309766",
            "date": "2018-01-03T15:01:21+0000",
            "content": "I like the simplification of this patch, and agree it is better without inheritance.\nI like IndexTermStates, or maybe just TermStates?\nSome comments:\n\n\tThe ScoreMode changes look good to me.\n\tCan we avoid adding a new public constructor? I think it's already a bit bad that it has 2 public constructors and 1 factory method.\n\tAdd javadocs to explain what needsStats is about?\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16309810",
            "date": "2018-01-03T15:39:20+0000",
            "content": "Making the constructor private and adding javadocs is easy enough.  On the rename, I'm a bit concerned that it appears in the IndexSearcher public API - maybe do it, but add TermContext itself back in as a deprecated subclass to preserve binary compatibility?  Or is this sufficiently expert that we don't need to worry about that? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16309878",
            "date": "2018-01-03T16:28:30+0000",
            "content": "Maybe only rename on master? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16312769",
            "date": "2018-01-05T09:30:52+0000",
            "content": "Patch updated against master to take into account SimScorer API changes, with Adrien's requested alterations.\n\nThe name change I'd like to leave for a separate issue, as backporting is going to be complex enough as it is. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16312968",
            "date": "2018-01-05T11:11:30+0000",
            "content": "Wait, I don't think thats right. \n\nThere's no bug here, so there is no need to urgently backport any fix. No need to sacrifice code quality in the name of backporting.\n\nI dont think this change should be backported at all. Lets do it correctly for master-only instead. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16313002",
            "date": "2018-01-05T11:59:20+0000",
            "content": "OK, here's the patch again, this time including the rename (which makes it pretty big) ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16313083",
            "date": "2018-01-05T13:16:05+0000",
            "content": "I like the new name TermStates!\n\nCan we change the exception message from:\n\n    throw new IllegalStateException(\"Cannot call docFreq() on lazily constructed TermStates\");\n\n\n\nto:\n\n    throw new IllegalStateException(\"Cannot call docFreq() when needsStats=false\");\n\n\n\nor so?\n\nAlso can you add { } around single-statement if bodies?  This is our code style, and leaving off the { } adds risk to future refactoring.  Thanks  ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16313135",
            "date": "2018-01-05T13:57:54+0000",
            "content": "Thanks for the review Mike.  Here's a patch with your suggested modifications, plus a CHANGES entry.  Will commit shortly. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16313343",
            "date": "2018-01-05T15:56:28+0000",
            "content": "Committed in d250a1463d87380420afc90e381623c0dc470695 (I managed to mistype the issue number in the commit message) ",
            "author": "Alan Woodward"
        }
    ]
}