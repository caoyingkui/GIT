{
    "id": "SOLR-5265",
    "title": "Add backward compatibility tests to JavaBinCodec's format.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ],
        "components": [],
        "type": "Test",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Since Solr guarantees backward compatibility of JavaBinCodec's format between releases, we should have tests for it.",
    "attachments": {
        "SOLR-5265.patch": "https://issues.apache.org/jira/secure/attachment/12633113/SOLR-5265.patch",
        "javabin_backcompat.bin": "https://issues.apache.org/jira/secure/attachment/12633667/javabin_backcompat.bin"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Varun Thacker",
            "id": "comment-13922422",
            "date": "2014-03-06T12:30:57+0000",
            "content": "An attempt at tackling this Jira -\n1. The test will ensure that if we ever change the byte values of existing variables in JavaBinCodec or if we write a type differently it will fail\n2. If new types are added to JavaBinCodec the test case and the binary file will have to be updated again\n\nThere are a couple of nocommits but I wanted to know if I am on the right track. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13922452",
            "date": "2014-03-06T12:47:32+0000",
            "content": "don't use toString() to compare test actual values\n\ndon't use FileInputstream, Use getClass().getResourceAsStream(\"/solrj/updateReq_4_5.bin\") as given in TestUpdateRequestCodec\n\nadd the rest of the types\n\nWe also need a forward compatibility tests "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13924890",
            "date": "2014-03-08T15:01:43+0000",
            "content": "We also need a forward compatibility tests\n\nBut we will happily take whatever someone wants to work on  One way is better than none.\n\nWe should try and minimize the effort needed to keep these tests working as we move through versions though.\n\nWe may even want to look at something closer to how lucene does it back compat test run via using a previous release checkout. "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-13925580",
            "date": "2014-03-10T09:16:24+0000",
            "content": "New Patch.\n\n\tNeed to apply the patch for SOLR-5837\n\tCommented out Iterator type - JavaBinCodec writes an iterator but JavaBinCodec#readIterator returns a List\n\tMade changes in JavaBinCodec#readMapEntry. Returning this also works\n\nreturn new AbstractMap.SimpleImmutableEntry(key, value);\n\n\n\tAdded a forward compatibility test\n\n "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-13925639",
            "date": "2014-03-10T10:48:30+0000",
            "content": "Same patch but attaching the binary file separately. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13925714",
            "date": "2014-03-10T13:02:57+0000",
            "content": "Commit 1575932 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1575932 ]\n\nSOLR-5265 Add backward compatibility tests to JavaBinCodec's format "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13925722",
            "date": "2014-03-10T13:16:17+0000",
            "content": "Commit 1575936 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1575936 ]\n\nSOLR-5265 Add backward compatibility tests to JavaBinCodec's format "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-13933845",
            "date": "2014-03-13T18:34:37+0000",
            "content": "New patch\n\n\n\tRemoved equals and hashCode implementations from SolrDocument, SolrInputDocument and SolrInputField.\n\tAdded assertSolrDocumentEquals(), assertSolrDocumentList(), assertSolrInputDocumentEquals(), assertSolrInputFieldEquals() to SolrTestCaseJ4\n\tMigrated the test to use the asserts instead of equals\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982528",
            "date": "2014-04-27T23:25:37+0000",
            "content": "Close issue after release of 4.8.0 "
        },
        {
            "author": "David Smiley",
            "id": "comment-16506268",
            "date": "2018-06-08T16:59:10+0000",
            "content": "Varun Thacker can you explain why you removed equals/hashCode from SolrDocument (today, it'd be SolrDocumentBase)?  (related to SOLR-6048).  It's not obvious writing tests that equals() should not be used nor that SolrTestCaseJ4.compareSolrInputDocument exists.  Furthermore, SolrDocumentBase implements Map and Map spells out equals & hashCode semantics that we don't comply with (we don't meet base class demands).  Sure we get away with it but.... :-/ "
        }
    ]
}