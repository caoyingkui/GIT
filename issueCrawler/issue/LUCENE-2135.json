{
    "id": "LUCENE-2135",
    "title": "IndexReader.close should forcefully evict entries from FieldCache",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9.3",
            "3.0.2",
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff of java-user thread \"heap memory issues when sorting by a string field\".\n\nWe rely on WeakHashMap to hold our FieldCache, keyed by reader.  But this lacks immediacy on releasing the reference, after a reader is closed.\n\nWeakHashMap can't free the key until the reader is no longer referenced by the app. And, apparently, WeakHashMap has a further impl detail that requires invoking one of its methods for it to notice that a key has just become only weakly reachable.\n\nTo fix this, I think on IR.close we should evict entries from the FieldCache, as long as the sub-readers are truly closed (refCount dropped to 0).",
    "attachments": {
        "LUCENE-2135.patch": "https://issues.apache.org/jira/secure/attachment/12427357/LUCENE-2135.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-12-08T10:54:38+0000",
            "content": "This is not unlike what we had to do in creating CloseableThreadLocal... that was another case where  the underlying impl failed to free things as immediately as we'd like. ",
            "author": "Michael McCandless",
            "id": "comment-12787406"
        },
        {
            "date": "2009-12-08T15:40:06+0000",
            "content": "A better approach is to don IR-keyed weakHashMaps completely and bind everything you need onto IR itself. That's how I do it and it works like a charm. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12787505"
        },
        {
            "date": "2009-12-08T15:43:14+0000",
            "content": "LUCENE-831... ",
            "author": "Uwe Schindler",
            "id": "comment-12787509"
        },
        {
            "date": "2009-12-08T15:48:48+0000",
            "content": "A better approach is to don IR-keyed weakHashMaps completely and bind everything you need onto IR itself. That's how I do it and it works like a charm.\n\nThat would be nice...  I'd love to see a\nMap<Object,Object> IndexReader.getInfo()\nThat was usable by anyone (not just the field cache) to associate stuff with a reader. ",
            "author": "Yonik Seeley",
            "id": "comment-12787514"
        },
        {
            "date": "2009-12-08T16:02:20+0000",
            "content": "I'd love to see a Map<Object,Object> IndexReader.getInfo()\nI'm currently using - <T> T IndexReader.component(Class<T> key)\nPlus a bundle of factories passed to IR on construction. Factories are called after IR is initialized, and also for child IRs and reopens. In case of reopens, besides new IR they are handed the component they produced for the current one (probably better just to pass old IR).\n\nI can try to conjure a patch this weekend. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12787552"
        },
        {
            "date": "2009-12-08T16:09:02+0000",
            "content": "I'm currently using - <T> T IndexReader.component(Class<T> key)\n\nThats much better than untyped. Same like AttributeSource.\n\n+1 for a patch. ",
            "author": "Uwe Schindler",
            "id": "comment-12787555"
        },
        {
            "date": "2009-12-08T16:25:56+0000",
            "content": "Please see LUCENE-2133 for a refactoring of FieldCache, which also addresses these problems. ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12787561"
        },
        {
            "date": "2009-12-08T17:14:53+0000",
            "content": "Please see LUCENE-2133 for a refactoring of FieldCache, which also addresses these problems. \nIt doesn't address a problem of adding custom components to IR. It also does complicate IR beyond that unholy mess it already is.\n\nI think it's better to have an ability to add 'any' kind of component to IR, and then implement whateverCaches over it. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12787585"
        },
        {
            "date": "2009-12-08T17:57:09+0000",
            "content": "I haven't followed the aforementioned discussion on the mailing list, but I think this issue covers a few things that are not mentioned explicitly here. Maybe it is a good idea to summarize the actual problems/challenges/benefits in a few sentences?\n\nWhat I understand is that you plan to add arbitrary (cacheable) attributes to IndexReader. I suggest to move these features to the IndexCache proposed in LUCENE-2133. Especially when using decorating IndexReaders (things like \"ReadOnlyIndexReader\") you would not want to store attributes separately from the decorated IndexReader. The same probably applies to SegmentReader with all its clones.\n\nIndexCache would provide a common base for the extensions you mentioned. (i.e. you are welcome to apply your patches on top of LUCENE-2133). ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12787599"
        },
        {
            "date": "2009-12-08T18:03:26+0000",
            "content": "I would love to see a bigger solution here, but in the interim, I\nthink we should fix the current FieldCache (patch attached).\n\nThe patch adds FieldCache.purge to the interface.  This is technically\na break in back-compat, to any external impls of FieldCache, but\nthat's such an insanely expert & difficult thing that I think it's\nfine to make an exception.\n\nA few tests (incl back-compat) needed fixing, because they were\nclosing the reader in-between to calls to getInts and then incorrectly\nasserting the int[]'s were the same. ",
            "author": "Michael McCandless",
            "id": "comment-12787603"
        },
        {
            "date": "2009-12-08T18:08:04+0000",
            "content": "In 2.9. we wrote in the BW section, that FieldCache interface is no BW problem as nobody ever can implement it (because the FileCacheImpl singleton is the only used one). Ok, you can implement it without any use.  ",
            "author": "Uwe Schindler",
            "id": "comment-12787610"
        },
        {
            "date": "2009-12-08T18:10:23+0000",
            "content": "In my opinion, all IndexReaders should call purge, mabe put it on toplevel IR.close default impl? Because if you request FieldCache from Top-level (which you should not do, but you can), it should also be purged. ",
            "author": "Uwe Schindler",
            "id": "comment-12787613"
        },
        {
            "date": "2009-12-08T18:23:52+0000",
            "content": "all IndexReaders should call purge, mabe put it on toplevel IR.close default impl? \n\nHmm... this actually gets tricky to get right, because of the FieldCacheKey.\n\nEG on closing a SegmentReader that's a clone of another, you don't want to evict it from the FieldCache.\n\nI guess I could fix each of the IndexReader subclasses to evict themselves from the cache.  Let me look into that... ",
            "author": "Michael McCandless",
            "id": "comment-12787624"
        },
        {
            "date": "2009-12-08T18:29:45+0000",
            "content": "Hmm... this actually gets tricky to get right, because of the FieldCacheKey.\n\nIt's almost like we want two caches... one with entries that are independent of any changes in deleted docs (like the current FieldCache), and one that isn't. ",
            "author": "Yonik Seeley",
            "id": "comment-12787626"
        },
        {
            "date": "2009-12-08T18:37:50+0000",
            "content": "New patch, also evicts the other subclasses of IR from FieldCache. ",
            "author": "Michael McCandless",
            "id": "comment-12787633"
        },
        {
            "date": "2009-12-08T18:45:13+0000",
            "content": "+1\n\nI just noticed, it is even possible to retrieve a field cache from the FilterIndexReader and that would be a duplicate of the dlegate's cache. Very ugly. ",
            "author": "Uwe Schindler",
            "id": "comment-12787644"
        },
        {
            "date": "2009-12-08T18:51:58+0000",
            "content": "it is even possible to retrieve a field cache from the FilterIndexReader and that would be a duplicate of the dlegate's cache. \n\nYeah, not good.  Should we default getFieldCacheKey to delegate?  A subclass of FIR would presumably need to then override if their filtering altered what's in the field cache. ",
            "author": "Michael McCandless",
            "id": "comment-12787650"
        },
        {
            "date": "2009-12-08T18:56:26+0000",
            "content": "+1 Good idea, just add a note to the method javadocs, that you have to override this, if you change the contents by the filter. ",
            "author": "Uwe Schindler",
            "id": "comment-12787652"
        },
        {
            "date": "2009-12-08T19:00:47+0000",
            "content": "Honestly, please have a look at LUCENE-2133, I really think it is a good starting point to solve all these problems. Could we perhaps merge the two issues (LUCENE-2133 and LUCENE-2135)?\n\nA quick summary of LUCENE-2133:\n\nThe patch allows one or more IndexReaders to share common cache information (whatever this is), stored in the same \"IndexCache\" instance. The IndexCache is designed to contain any cacheable/volatile information that can be regenerated from the IndexReader.\n\nFor example: all clones of SegmentReader share the same SegmentReaderIndexCache with the original instance, containing the ThreadLocals of the \"core reader\".\nBy default (for all IndexReader classes) the IndexCache provides access to the \"IndexFieldCache\" (a non-static reimplementation of FieldCache).\n\n\nTo provide arbitrary cacheable objects we could now extend IndexCache by a simple HashMap (it does not need to be a WeakHashMap, since the IndexCache is closed and purged as soon as the original IndexReader is closed).\n\nIf you wish so, with the help of IndexCache we might even easily implement two different field caches for the same IndexCache instance, one that changes with deleted docs and another one that does not. Basically we may add any other kind of cache at a later point without touching IndexReader again. To re-use Earwin Burrfoot statement from above, that would then not \"complicate IndexReader beyond that unholy mess it already is.\"  ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12787659"
        },
        {
            "date": "2009-12-08T19:37:24+0000",
            "content": "I definitely plan to have a look at LUCENE-2133, but that's a rather large (and, good, on first read!) change to Lucene.  I just don't think it should hold this small change up. ",
            "author": "Michael McCandless",
            "id": "comment-12787689"
        },
        {
            "date": "2009-12-08T19:37:58+0000",
            "content": "New patch, adds override to FIR.getFieldCacheKey ",
            "author": "Michael McCandless",
            "id": "comment-12787693"
        },
        {
            "date": "2009-12-08T19:39:09+0000",
            "content": "To provide arbitrary cacheable objects we could now extend IndexCache by a simple HashMap (it does not need to be a WeakHashMap, since the IndexCache is closed and purged as soon as the original IndexReader is closed).\n\nIf I'm reading your patch right, to add something as a user to DirectoryReader+SegmentReader, I have to extend SegmentReaderIndexCache, IndexCache, then extend SegmentReader and DirectoryReader, and override all methods in DirectoryReader that create SegmentReader.\n\nMy aim is to be able to bind stuff to readers without overriding them, delegating, or touching in any manner except providing certain factories on creation. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12787696"
        },
        {
            "date": "2009-12-08T20:04:38+0000",
            "content": "If I'm reading your patch right, to add something as a user to DirectoryReader+SegmentReader, I have to extend SegmentReaderIndexCache, IndexCache, then extend SegmentReader and DirectoryReader, and override all methods in DirectoryReader that create SegmentReader.\n\nNo, the functionality you intend to have is just not there at the moment. But it could be added directly to IndexCache (and thus, to all subclasses of IndexCache automatically).\n\nMy aim is to be able to bind stuff to readers without overriding them, delegating, or touching in any manner except providing certain factories on creation.\n\nWe could add getProperty/setProperty methods to IndexCache. You could then bind/get arbitrary objects as follows:\n\nIndexReader ir = // somehow create your new reader\nIndexCache cache = ir.getIndexCache();\nObject someObject = cache.getProperty(someKey);\ncache.setProperty(\"org.example.someCoolProperty\", anotherObject);\n\n(Personally, I prefer standardized string keys to avoid collisions, just like in the Servlet API, for example)\n\nAgain, this is not yet implemented, but could be done easily, without affecting any existing IndexReader or the other changes on FieldCache etc. ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12787710"
        },
        {
            "date": "2009-12-10T22:00:34+0000",
            "content": "There is some discussion in LUCENE-2133 where we need a decision that also affects this issue. Could you please check and comment?\n\nThanks!\nChristian ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12788959"
        },
        {
            "date": "2010-05-30T12:34:13+0000",
            "content": "backport ",
            "author": "Michael McCandless",
            "id": "comment-12873419"
        }
    ]
}