{
    "id": "SOLR-1069",
    "title": "CSV document and field boosting support",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "It would be good if CSV loader could do document and field boosting.  \n\nI believe this could be handled via additional \"special\" columns that are tacked on such as \"doc.boost\" and <field.name>.boost, which are then filled in with boost values on a per row basis.  Obviously, this approach would prevent someone having an actual column named <field.name>.boost, so maybe we can make that configurable as well.",
    "attachments": {
        "CSVRequestHandler.java.diff": "https://issues.apache.org/jira/secure/attachment/12437038/CSVRequestHandler.java.diff",
        "CSVLoader.java": "https://issues.apache.org/jira/secure/attachment/12437039/CSVLoader.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Dallan Quass",
            "id": "comment-12838526",
            "date": "2010-02-25T20:28:00+0000",
            "content": "FWIW, I made a few changes to CSVRequestHandler.java, which mainly involve extracting CSVLoader into a separate public class and making a few variables/functions visible outside the package.  The attached files show the changes I made.  \n\nDoing this allowed me to create a subclass of CSVLoader that does boosting:\n\n\npublic class BoostingCSVRequestHandler extends ContentStreamHandlerBase {\n   protected ContentStreamLoader newLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n      return new BoostingCSVLoader(req, processor);\n   }\n\n   //////////////////////// SolrInfoMBeans methods //////////////////////\n   @Override\n   public String getDescription() {\n     return \"boost CSV documents\";\n   }\n\n   @Override\n   public String getVersion() {\n     return \"\";\n   }\n\n   @Override\n   public String getSourceId() {\n     return \"\";\n   }\n\n   @Override\n   public String getSource() {\n     return \"\";\n   }\n}\n\nclass BoostingCSVLoader extends CSVLoader {\n   int boostFieldNum;\n\n   BoostingCSVLoader(SolrQueryRequest req, UpdateRequestProcessor processor) {\n      super(req, processor);\n   }\n\n   private String[] removeElement(String[] a, int pos) {\n      String[] n = new String[a.length-1];\n      if (pos > 0) System.arraycopy(a, 0, n, 0, pos);\n      if (pos < n.length) System.arraycopy(a, pos+1, n, pos, n.length - pos);\n      return n;\n   }\n\n   @Override\n   protected void prepareFields() {\n      boostFieldNum = -1;\n      for (int i = 0; i < fieldnames.length; i++) {\n         if (fieldnames[i].equals(\"boost\")) {\n            boostFieldNum = i;\n            break;\n         }\n      }\n      if (boostFieldNum >= 0) {\n         fieldnames = removeElement(fieldnames, boostFieldNum);\n      }\n\n      super.prepareFields();\n   }\n\n   public void addDoc(int line, String[] vals) throws IOException {\n      templateAdd.indexedId = null;\n      SolrInputDocument doc = new SolrInputDocument();\n      if (boostFieldNum >= 0) {\n         float boost = Float.parseFloat(vals[boostFieldNum]);\n         doc.setDocumentBoost(boost);\n         vals = removeElement(vals, boostFieldNum);\n      }\n\n      doAdd(line, vals, doc, templateAdd);\n   }\n}\n\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14661707",
            "date": "2015-08-07T11:47:56+0000",
            "content": "Closing very old issue that appears to not be a real problem any more. Please feel free to re-open should anyone feel this issue needs a resolution. "
        }
    ]
}