{
    "id": "SOLR-7876",
    "title": "Support disabling ExitableDirectory wrapper when not needed",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "5.0,                                            5.1,                                            5.2,                                            5.2.1",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "ExitableDirectoryReader can cause some overhead in Solr for some use cases, even when not really used. There should be a way of not using it when not needed.\nSee http://search-lucene.com/m/l6pAi1HLrodLhNUd",
    "attachments": {
        "SOLR-7876.patch": "https://issues.apache.org/jira/secure/attachment/12753163/SOLR-7876.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-06T16:13:29+0000",
            "author": "Yonik Seeley",
            "content": "Thanks for finding this Tomas! This is a pretty bad performance regression for certain cases (facet.method=enum should be hit pretty hard too I imagine, along with any code that un-inverts a field).\n\nWe should try to fix this for 5.3! ",
            "id": "comment-14660230"
        },
        {
            "date": "2015-08-06T16:24:22+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "We should try to fix this for 5.3!\n+1. I'm looking at SOLR-7875 first, but if after improving SolrQueryTimeoutImpl the performance is not still as good as the un-wrapped version I think we should have a way to skip the wrapping.  ",
            "id": "comment-14660248"
        },
        {
            "date": "2015-08-07T20:36:54+0000",
            "author": "Yonik Seeley",
            "content": "I tried implementing something that would use a different reader when a timeout isn't needed on a per-query basis, but I ran into issues\nFrom TermQuery / TermWeight:\n\n      assert termStates.topReaderContext == ReaderUtil.getTopLevelContext(context) : \"The top-reader used to create Weight (\" + termStates.topReaderContext + \") is not the same as the current reader's top-reader (\" + ReaderUtil.getTopLevelContext(context);\n\n\n\ncreateWeight takes a searcher, and the TermWeight implementation remembers the top reader context from that searcher, later comparing it against the readers used for scoring. ",
            "id": "comment-14662397"
        },
        {
            "date": "2015-08-07T20:52:11+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "I got into the exact same problem, query must be rewritten with the same reader as the one used to search. Is it a good idea to chose different readers based on parameters for search? Seems like o.a.l.s.IndexSearcher is not designed to do it. ",
            "id": "comment-14662429"
        },
        {
            "date": "2015-08-10T17:38:44+0000",
            "author": "Yonik Seeley",
            "content": "Only way I can think of to work around it is to use a thread local (like SolrRequestInfo) to return one reader or the other for searcher.getTopReaderContext().  I don't really like it, but it might be the only way. ",
            "id": "comment-14680421"
        },
        {
            "date": "2015-08-26T13:14:27+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk move to 5.4 after 5.3 release. ",
            "id": "comment-14713391"
        },
        {
            "date": "2015-08-30T01:59:08+0000",
            "author": "Yonik Seeley",
            "content": "Here's a generic patch that escapes the ExitableDirectoryReader wrapping as soon as possible (in the fields() call).  It should work, but I haven't had a chance to test the performance. ",
            "id": "comment-14721347"
        },
        {
            "date": "2015-08-30T02:12:07+0000",
            "author": "Erick Erickson",
            "content": "Interesting. This patch fixes one of the new tests I made for SOLR-7990. TimeAllowedCachingTest.testQueryResults. Submitting a query that times out followed immediately by an identical one only with a bigger timeAllowed that does NOT time out used to still return partialResults=true but doesn't with this patch. Which makes some sense I think. ",
            "id": "comment-14721349"
        },
        {
            "date": "2015-08-30T02:27:51+0000",
            "author": "Yonik Seeley",
            "content": "Hmmm, that is interesting, and it raises red flags for me as I'm not sure why this patch would affect caching.  ExitableDirectoryReader and friends delegate cache core keys to the underlying readers.  Any theories / clues? ",
            "id": "comment-14721352"
        },
        {
            "date": "2015-08-30T02:52:43+0000",
            "author": "Erick Erickson",
            "content": "The test that it cured was this sequence:\n\n> send a query that times out (no fq clauses)\n> send the same query that does not time out (still no fq  clauses)\n***>test the second response to see if partialResults==true\n\nIt's the *** part the suddenly succeeded after this patch. Prior to this patch partialResults was true, now it's just not returned in the second response at all, which makes sense on the surface if your patch bails out from that wrapper earlier. This test was returning the correct number of docs before, it was just that the partialResults was incorrectly returned.\n\nThe tests that go against the filterCache are still failing though, so it's not like this patch magically fixed any of the caching problems.\n\nSo I'd guess not returning the partialResults flag makes more sense in terms of this patch?\n\nHaven't updated the test patch yet, just tried it locally. ",
            "id": "comment-14721355"
        },
        {
            "date": "2015-08-30T15:11:45+0000",
            "author": "Erick Erickson",
            "content": "OK, on a second look it was a bad test. \n\ncopy/pasted the original code for the first call with timeAllowed=1 that looked at partialResults but didn't test for null. Just saw the error and didn't read it carefully.\n\nassertFalse(\"Should NOT have partial results\", (Boolean) (header.get(\"partialResults\"));\n\nWhen timeAllowed=1000, get(\"partialResults\") returns null.....\n\nSo this patch has no effect whatsoever on the new tests I wrote. I removed the linked-to. ",
            "id": "comment-14721556"
        },
        {
            "date": "2015-08-30T17:03:43+0000",
            "author": "Yonik Seeley",
            "content": "OK, I did some ad-hoc performance testing on near worst case range query on id field and saw an 8% performance improvement on my box.\nI'll plan on committing this shortly. ",
            "id": "comment-14721603"
        },
        {
            "date": "2015-08-31T16:43:58+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1700276 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1700276 ]\n\nSOLR-7876: exit ExitableDirectoryReader wrapper if timeout is not enabled ",
            "id": "comment-14723662"
        },
        {
            "date": "2015-09-09T21:58:23+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Yonik Seeley, Any reason why this couldn't be backported? ",
            "id": "comment-14737663"
        },
        {
            "date": "2015-09-09T22:48:35+0000",
            "author": "Yonik Seeley",
            "content": "The QueryTimeout interface was put into Lucene when this feature (SOLR-5986) was committed, and I changed it's signature. ",
            "id": "comment-14737746"
        },
        {
            "date": "2015-09-10T00:08:56+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "Oh, I didn't notice you where changing the interface. Makes sense then. ",
            "id": "comment-14737850"
        }
    ]
}