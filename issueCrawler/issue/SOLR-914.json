{
    "id": "SOLR-914",
    "title": "Presence of finalize() in the codebase",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "There seems to be a number of classes - that implement finalize() method.  Given that it is perfectly ok for a Java VM to not to call it - may be - there has to some other way  \n{ try .. finally - when they are created to destroy them }\n to destroy them and the presence of finalize() method , ( depending on implementation ) might not serve what we want and in some cases can end up delaying the gc process, depending on the algorithms. \n\n$ find . -name *.java | xargs grep finalize\n./contrib/dataimporthandler/src/main/java/org/apache/solr/handler/dataimport/JdbcDataSource.java:  protected void finalize() {\n./src/java/org/apache/solr/update/SolrIndexWriter.java:  protected void finalize() {\n./src/java/org/apache/solr/core/CoreContainer.java:  protected void finalize() {\n./src/java/org/apache/solr/core/SolrCore.java:  protected void finalize() {\n./src/common/org/apache/solr/common/util/ConcurrentLRUCache.java:  protected void finalize() throws Throwable {\n\nMay be we need to revisit these occurences from a design perspective to see if they are necessary / if there is an alternate way of managing guaranteed destruction of resources.",
    "attachments": {
        "SOLR-914.patch": "https://issues.apache.org/jira/secure/attachment/12413099/SOLR-914.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12656421",
            "date": "2008-12-14T17:49:03+0000",
            "content": "The fact that there are only 5 instances of these tells that it may not be an put inadvertently.\n\ntwo of them are my own creation. The code does not rely on these methods . But the consumers of these classes may forget to call the close/destroy methods explicitly . In such cases finalize() is just a fallback option "
        },
        {
            "author": "Karthik K",
            "id": "comment-12656424",
            "date": "2008-12-14T18:04:04+0000",
            "content": "Precisely. I believe - we should get away with the same since in our case  - when we try to shutdown and restart SolrCore - we are noticing instances where the gc thread postpones collecting the objects until finalize() is invoked. \n\nGiven that finalize() is spec-d such that there is no guarantee of being called  (and worse, if the implementation does decide , it does not collect the object until the method is invoked ).  \n\nSo - inserting a no-guarantee fallback option seems to doing more harm than good here.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12656879",
            "date": "2008-12-16T04:26:16+0000",
            "content": "we are noticing instances where the gc thread postpones collecting the objects until finalize() is invoked. \n\nIt is true but GC thread only has to wait for the time duration of the finalize() method call. So which class exactly is the culprit here in your case? "
        },
        {
            "author": "Karthik K",
            "id": "comment-12657023",
            "date": "2008-12-16T15:36:58+0000",
            "content": "Primarily SolrCore and SolrIndexWriter ( specifically for my use-case ). \n\nAlso - just noticed that - CoreContainer.finalize() ( calls shutdown() ) - has a synchronized block.  While it is not a bottleneck for me , per se, (since I believe all through the life of the web-app , an instance of CoreContainer is alive and reachable , correct me if I am wrong here ). I believe we might need to revisit this if we were to extend this / provide orthogonal integration with other apps. \n\n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12657067",
            "date": "2008-12-16T17:22:10+0000",
            "content": "Separately - it might be worth to wrap around the code with a try .. finally \n{ super.finalize(); }\n for all the custom finalizers for better code correctness. \n\nJIRA SOLR-924 logged for the same. Patch submitted for the new jira as well.  "
        },
        {
            "author": "Karthik K",
            "id": "comment-12657181",
            "date": "2008-12-16T22:00:21+0000",
            "content": "try { \n\n} finally { \n  super.finalize();\n} \n\nimplemented for all existing finalizer code. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12660668",
            "date": "2009-01-05T05:41:18+0000",
            "content": "A note: it is a good practice to use finalize() methods to check that a resource has already been released. It should log an error if the resource has not been released. Finalize() methods are all parked on one queue and that queue can back up. This can eventually cause the app to lock up. This is why it is not good to do I/O actions (like close a database connection) inside the finalize method.\n\nIf the method only checks an internal marker, that will not cause a backup. "
        },
        {
            "author": "Karthik K",
            "id": "comment-12663540",
            "date": "2009-01-13T23:35:49+0000",
            "content": "SolrIndexWriter#finalize() seems to delegate the same to IndexWriter.close() which is quite expensive. \n\nConcurrentLRUCache#finalize() seems to close a thread (by means of notify() ) . I am not sure if those methods are good enough candidates to be present in finalize() since they seem to do more than logging at this point.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12666058",
            "date": "2009-01-22T05:46:36+0000",
            "content": "IndexWriter.close() is very cheap if the IndexWriter is already closed ... if it's not already closed, then doing so in the finalize() method is our last resort. (but I would think a patch to IndexWriter to make it explicitly implement an \"isClosed() method would certainly be nice to help keep the code clean and make it possible to log a warning).\n\nDitto for ConcurrentLRUCache ... finalize calls destroy which sets the stop flag and notifies the thread ... calling destroy() again shouldn't be that expensive if the client has already called it (which FastLRUCache does) \u2013 but changing the code to record when destroy() has been called, and log a warning in finalize if it hasn't been called yet (then calling it) seems like a good idea.\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12711610",
            "date": "2009-05-21T13:00:27+0000",
            "content": "I agree with Kay Kay and Lance here - I don't think we should be doing any closing/shutdown with finalize. Logging a warning seems like the right way to go to me. This is the type of thing that hides problems, and it just doesn't do it cleanly. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12712576",
            "date": "2009-05-24T17:21:24+0000",
            "content": "what do we plan to do with this?  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12725930",
            "date": "2009-07-01T05:27:43+0000",
            "content": "Logging a warning seems like the right way to go to me\n\nso do you mean , logging a warning and do not do cleanup. or log a warning and do the cleanup ?\n\nI would prefer the latter because the system will continue to work  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12729593",
            "date": "2009-07-10T10:21:20+0000",
            "content": "all the finalize () methods check once if the object is already closed. if not log a warning and close "
        },
        {
            "author": "Karthik K",
            "id": "comment-12729769",
            "date": "2009-07-10T18:49:54+0000",
            "content": "What I meant is (and others who had commented on the jira seem to concur) - logging a warning is ok. \n\nCode to release resources should be avoided as a finalize is no equivalent to a C++ dtor. \n\nThis patch does not seem to address the issue. \n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12730273",
            "date": "2009-07-13T10:01:48+0000",
            "content": "Code to release resources should be avoided as a finalize is no equivalent to a C++ dtor.\n\nyes. But if the user has forgotten to do so  It is not a good idea to punish him by blowing up. A warning should be enough.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12742740",
            "date": "2009-08-13T06:37:14+0000",
            "content": "There seems to be no consensus on the fix. Unassigning myself "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12743562",
            "date": "2009-08-15T07:36:56+0000",
            "content": "I don't understand objections to the idea that finalize should close if (and only it) the resource hasn't already been closed ... people shouldn't relying on it, but having code that aids in the prevention of resource leaks doesn't seem like abad thing to me.\n\nthe only things i would change about this patch...\n\n\tmake the logging done by the finalizer methods more serious (error or maybe even fatal) and make them convey why it's an error (\"...was not closed prior to finalizing\")\n\tSolrIndexWriter.finalize() still calls super.close() (only this.close() should ever call super.close())\n\n "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12743773",
            "date": "2009-08-15T21:14:33+0000",
            "content": "Yes, Solr should keep working. But somewhere in the logs (that a few people read) it should note that the resource should have been closed before the finalize. So, yes, the patch is right in that it does the shutdown codes inside try{} blocks that ignore errors.\n\n+1 on on the current patch and the policy it implements. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12745606",
            "date": "2009-08-20T20:02:53+0000",
            "content": "revised patch with the improvements i mentioned earlier, also fixes a cut/paste mistake in one of the log messages. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12745790",
            "date": "2009-08-21T04:57:30+0000",
            "content": "I guess this should be enough. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12747762",
            "date": "2009-08-26T04:21:12+0000",
            "content": "Committed revision 807872.\n\n\nFYI: this patch surfaced some bugs in TestFastLRUCache where the cache wasn't being closed properly. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775607",
            "date": "2009-11-10T15:51:53+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}