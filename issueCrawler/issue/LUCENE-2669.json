{
    "id": "LUCENE-2669",
    "title": "NumericRangeQuery.NumericRangeTermsEnum sometimes seeks backwards",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Subclasses of FilteredTermsEnum are \"supposed to\" seek forwards only (this gives better performance, typically).\n\nHowever, we don't check for this, so I added an assert to do that (while digging into testing the SimpleText codec) and NumericRangeQuery trips the assert!\n\nOther MTQs seem not to trip it.\n\nI think I know what's happening \u2013 say NRQ has term ranges a-c, e-f to seek to, but then while it's .next()'ing through the first range, the first term after c is f.  At this point NRQ sees the range a-c is done, and then tries to seek to term e which is before f.  Maybe NRQ's accept method should detect this case (where you've accidentally .next()'d into or possibly beyond the next one or more seek ranges)?",
    "attachments": {
        "LUCENE-2669.patch": "https://issues.apache.org/jira/secure/attachment/12455615/LUCENE-2669.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-09-26T17:59:49+0000",
            "content": "Patch w/ 2 asserts.  NRQ only trips up on the first (FilteredTermsEnum) assert.  That it doesn't trip the 2nd shows that indeed its seek ranges are properly sorted... ",
            "author": "Michael McCandless",
            "id": "comment-12915009"
        },
        {
            "date": "2010-09-26T18:23:52+0000",
            "content": "This is a good catch: NRQ should play ping-pong to avoid these unnecessary seeks  ",
            "author": "Robert Muir",
            "id": "comment-12915013"
        },
        {
            "date": "2010-09-26T20:07:46+0000",
            "content": "Here a patch that fixed NRTE to only seek forward. This should also improve NRQ's perf in trunk.\n\nIt works like the following:\n\n\n\tnextSeekTerm() checks that the next range already fits the current term. If not it forwards to the next sub-range and returns a seek term that is at least greater or equal the current term\n\taccept() checks for the non-hit case (seldom as for a NRQ most terms are hits until the upper sub-range-bound is reached), if the next sub-range lower bound term on the stack is greater that the current one, and only then returns NO_AND_SEEK. If this is not the case, it does not seek but instead only move forward to the next sub-range and repeats the bounds checks [for(;;) loop].\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12915028"
        },
        {
            "date": "2010-09-26T20:25:33+0000",
            "content": "Slightly more readable patch: for(;-loop removed and so first if check in accept() negated and used as while-clause instead\n\nMike you set this as fix 3.1 and 4.0, but 3.1 does not have FilteredTermsEnum. We cannot fix it there easily, as it uses the old style logic from 3.0. ",
            "author": "Uwe Schindler",
            "id": "comment-12915030"
        },
        {
            "date": "2010-09-26T20:27:21+0000",
            "content": "Mike you set this as fix 3.1 and 4.0, but 3.1 does not have FilteredTermsEnum. We cannot fix it there easily, as it uses the old style logic from 3.0.\n\nWoops, right \u2013 I'll fix to 4.0 only. ",
            "author": "Michael McCandless",
            "id": "comment-12915031"
        },
        {
            "date": "2010-09-26T20:28:21+0000",
            "content": "Mike you set this as fix 3.1 and 4.0, but 3.1 does not have FilteredTermsEnum. We cannot fix it there easily, as it uses the old style logic from 3.0.\n\nWe can maybe fix this also in 3.0 and not fetch a new enum, when the same conditions apply. But its totally different code, will do that in a separate patch, if its easy (the 3.0/3.1 enum is complicated...) ",
            "author": "Uwe Schindler",
            "id": "comment-12915032"
        },
        {
            "date": "2010-09-27T04:08:08+0000",
            "content": "Committed revision: 1001582\n\nThanks Mike for catching this! ",
            "author": "Uwe Schindler",
            "id": "comment-12915108"
        },
        {
            "date": "2010-09-27T09:12:21+0000",
            "content": "Sweet, that was fast \u2013 thanks Uwe! ",
            "author": "Michael McCandless",
            "id": "comment-12915243"
        }
    ]
}