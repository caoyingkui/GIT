{
    "id": "SOLR-386",
    "title": "Configurable SolrHighlighter implementation",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "highlighter"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be great if SolrCore allowed the highlighter class to be configurable.  A good way would be to add a class attribute to the <highlighting> element in solrconfig.xml, similar to how the RequestHandler instance is initialized in SorCore.",
    "attachments": {
        "SOLR-386-SolrHighlighter.patch": "https://issues.apache.org/jira/secure/attachment/12368849/SOLR-386-SolrHighlighter.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12536293",
            "date": "2007-10-19T17:54:30+0000",
            "content": "How is this different from SOLR-225?\n\nThe example solrconfig.xml in trunk includes:\n\n\n  <highlighting>\n   <!-- Configure the standard fragmenter -->\n   <!-- This could most likely be commented out in the \"default\" case -->\n   <fragmenter name=\"gap\" class=\"org.apache.solr.highlight.GapFragmenter\" default=\"true\">\n    <lst name=\"defaults\">\n     <int name=\"hl.fragsize\">100</int>\n    </lst>\n   </fragmenter>\n\n   <!-- A regular-expression-based fragmenter (f.i., for sentence extraction) -->\n   <fragmenter name=\"regex\" class=\"org.apache.solr.highlight.RegexFragmenter\">\n    <lst name=\"defaults\">\n      <!-- slightly smaller fragsizes work better because of slop -->\n      <int name=\"hl.fragsize\">70</int>\n      <!-- allow 50% slop on fragment sizes -->\n      <float name=\"hl.regex.slop\">0.5</float> \n      <!-- a basic sentence pattern -->\n      <str name=\"hl.regex.pattern\">[-\\w ,/\\n\\\"']\n{20,200}\n</str>\n    </lst>\n   </fragmenter>\n\n   <!-- Configure the standard formatter -->\n   <formatter name=\"html\" class=\"org.apache.solr.highlight.HtmlFormatter\" default=\"true\">\n    <lst name=\"defaults\">\n     <str name=\"hl.simple.pre\"><![CDATA[<em>]]></str>\n     <str name=\"hl.simple.post\"><![CDATA[</em>]]></str>\n    </lst>\n   </formatter>\n  </highlighting> "
        },
        {
            "author": "Eli Levine",
            "id": "comment-12536295",
            "date": "2007-10-19T17:57:40+0000",
            "content": "This is different in that this request asks for the SolrHighlighter implementation itself to be pluggable, not just fragmenters and formatters. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12536302",
            "date": "2007-10-19T18:09:27+0000",
            "content": "I suppose the real question is What behaviour are you trying to achieve by ripping out the whole highlighter implementation?  If you have custom code that does something completely different, it is probably easier to just call that code manually from your own request handler. "
        },
        {
            "author": "Eli Levine",
            "id": "comment-12536348",
            "date": "2007-10-19T21:31:04+0000",
            "content": "This would be useful for projects with non-standard highlighting needs.  In our case, under certain circumstances we need to run a field through the highlighter multiple times using different fragmenters if previous runs did not produce any highlighted fragments.  Also, this would allow us to use SpanScorer for phrase highlighting, as it is instantiated differently from other scorers (needs CachingTokenFilter, etc.)\n\nSince the Solr highlighter is a plug-in, it seems natural to allow different implementations to be used, similar to what's allowed for request and update handlers and other configurable parts of SolrCore.\n\nThanks,\n\nEli "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-12539478",
            "date": "2007-11-01T22:29:01+0000",
            "content": "This patch allows highlighting to be plugged in.\n\nWhat I did:\n\n\tMade SolrHighlighter an interface\n\tThe old SolrHighlighter became DefaultSolrHighlighter\n\tInstantiate the highlighter in SolrCore based on what is in the solrconfig.xml\n\n\n\nSo to roll your own\n\n\tImplement SolrHighlighter (ie org.apache.solr.highlight.MySolrHighlighter)\n\tfind <highlighting> in solrconfig.xml and modify to <highlighting class=\"org.apache.solr.highlight.MySolrHighlighter\">\n\n\n\nThis patch builds on changes made to trunk by SOLR-281.  This patch also contains these changes (meaning you should apply this patch to the trunk).  I get the feeling that this is probably not the right way to build a dependent patch, but I don't know any better.  Let me know if I should change how I built this patch. "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-12541588",
            "date": "2007-11-10T21:41:46+0000",
            "content": "Updated patch to work with recent changes made to SolrCore.  Should apply against a clean trunk again.  No further changes. "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-12541967",
            "date": "2007-11-12T22:37:24+0000",
            "content": "SOLR-281 was recently commited.  Formerly those changes were also included in this patch.  The changes made by that patch have been removed from this patch so SOLR-386-SolrHighlighter.patch applies cleanly to trunk again.  Unless someone has comments, or an alternate implementation I don't foresee this patch changing again. "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-12570929",
            "date": "2008-02-21T02:33:50+0000",
            "content": "I'd really like some feedback on this patch.  I've just updated the patch based on changes that have been made to SolrHighlighter.java since revision 594314).\n\nEli, does this meet your needs?  This is all I need in SOLR-380 to plug in a custom highlighter.  I would really appreciate if this could be committed by someone so that I can stop worrying about keeping up with revisions.  It has been assigned to Mike Klass so his feedback in particular would be valuable to me.\n\nThanks,\nTricia "
        },
        {
            "author": "Eli Levine",
            "id": "comment-12571153",
            "date": "2008-02-21T19:26:42+0000",
            "content": "I looked at the patch and it seems it does what I need, which is simply to allow the class of SolrHighlighter to be configurable.  Thanks, Tricia.\n\nEli "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12573314",
            "date": "2008-02-28T15:15:28+0000",
            "content": "\nMade SolrHighlighter an interface\n\nWhy not just extend and override?  The general problem w/ interfaces is it gets hard to maintain back-compatibility in this kind of environment.  Another option would be to abstract SolrHighlighter to extend AbstractSolrHighlighter and then your new highlighter could just extend AbstractSolrHightlighter "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12574337",
            "date": "2008-03-03T03:04:15+0000",
            "content": "Hi Tricia,\n\nI'm not sure that I would ever use SolrHighlighter overriding (if I had the need, I probably would just make a separate search component).  However, several people want this functionality and it has relatively low implementation/maintenance cost.\n\nThere are a few things that need to be done to get the patch committed.  First, the unnecessary whitespace changes in SolrCore shouldn't be in the diff (it makes it really hard to see the changes, and might make it hard to apply/revert).  Also, I'm skeptical of using interfaces for this type of thing, for maintenance reasons.  Perhaps we could move to one of the approaches that Grant suggested?\n\nThanks again for the contribution, and sorry it took so long\n "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-12575534",
            "date": "2008-03-06T02:09:39+0000",
            "content": "OK.  So I think I fixed the whitespace problem.\n\nThanks for explaining the problem with interfaces \u2013 that makes sense now.  I assume that EventListener and RequestHandler are interfaces because they've been thought long and hard about and are not going to change?\n\nMy first try at the patch was just to include the public methods, which are the ones you (MIke Klaas) list:\n> .initialize(Config)\n> .isHighlightEnabled(SolrParams)\n> .doHighlighting(...)\n> .getHighlightFields(...) \n\nI discovered that the unit tests call the formatters and fragmenters directly so in the interface version I had made public get methods for these.  Now that we're using an abstract class I am able to just include these as is - so no changes to HighlighterTest this time.  But speaking of unit tests... Anecdotally I know that the SolrCore changes allow the highlighter to be configured (my custom highlighter).  I wrote HighlighterConfigTest as a unit test for this functionality.\n\nI decided to leave the default implementation of isHighlightingEnabled(SolrParams), and getHighlightFields(...) in the abstract class because both methods deal with reading parameters.  I can't think of a use case of a highlighter that wouldn't use this or at worst ignore/override this method.  Is this a reasonable decision?\n\nI wasn't sure what to do with the logger, so I left it in the AbstractSolrHighlighter.  This decision is based on the example of UpdateHandler. \n\nHmm... I just realized that naming the abstraction of SolrHighlighter AbstractSolrHighlighter causes problems all over the code when you want your custom highlighter to plugin.  I think the path of least resistance is to call the abstract class SolrHighlighter and the existing implementation DefaultSolrHighlighter.\n\nThoughts? "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12577163",
            "date": "2008-03-10T20:16:22+0000",
            "content": "Tricia: thanks for the changes.  I think that your decisions make sense--I'll be sure to followup by the end of the week. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12580955",
            "date": "2008-03-20T22:39:07+0000",
            "content": "Commited in r639490.  Thanks Tricia! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12589282",
            "date": "2008-04-15T23:28:41+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tCurrently marked (\"Resolved\" or \"Closed\") and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\t\"Affects Versions\" included 1.3\n\n\n\nThe Fix Version for all 8 issues found was set to 1.3 (1.3 has not yet been released, if an issue is already fixed, and it affected 1.3 then the fix will be in 1.3)\n\nEmail notification was suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this\n(hopefully) unique string:  20080415hossman1 "
        }
    ]
}