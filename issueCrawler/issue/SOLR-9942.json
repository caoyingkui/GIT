{
    "id": "SOLR-9942",
    "title": "MoreLikeThis Performance Degraded With Filtered Query",
    "details": {
        "components": [
            "MoreLikeThis"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.5.2",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Without any filters, the MLT is performing normal.  With any added filters, the performance degrades compared to 4.6.1 (2.5-3.0X in our case).  The issue goes away with 6.0 upgrade.  The hot method is Lucene's DisiPriorityQueue downHeap(), which takes 5X more calls in 5.5.2 compared to 6.0.  I am guessing that some of the Solr filters refactoring fixed it for 6.0 release.\n\nAs a work-around, for now I just refactored the custom MLT handler to convert the filters into boolean clauses, which takes care of the issue.   \n\nOur configuration: \n1. mlt.maxqt=100\n2. There is an additional filter passed as a parameter\n3. <field name=\"mlt1\" type=\"text_general\" indexed=\"true\" stored=\"true\" multiValued=\"true\" omitNorms=\"false\" termVectors=\"true\"/>\n4. text_general is a pretty standard text fieldType.\n\nI have a code to populate a test dataset and run a query in order to reproduce this.",
    "attachments": {
        "solr_mlt_test2.tar": "https://issues.apache.org/jira/secure/attachment/12846187/solr_mlt_test2.tar"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-07T16:03:19+0000",
            "author": "Ivan Provalov",
            "content": "test for mlt performance issue ",
            "id": "comment-15807713"
        },
        {
            "date": "2017-01-07T16:10:42+0000",
            "author": "Ivan Provalov",
            "content": "test case ",
            "id": "comment-15807726"
        }
    ]
}