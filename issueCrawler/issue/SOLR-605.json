{
    "id": "SOLR-605",
    "title": "Programatically register SolrEventListeners",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently all eventListeners need to be registered via solrconfig.xml \u2013 it would be nice to programatically register classes for these events too.",
    "attachments": {
        "SOLR-605-RegisterEventListeners.patch": "https://issues.apache.org/jira/secure/attachment/12384776/SOLR-605-RegisterEventListeners.patch",
        "SOLR-605.patch": "https://issues.apache.org/jira/secure/attachment/12384902/SOLR-605.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12608533",
            "date": "2008-06-26T18:11:08+0000",
            "content": "this adds \n\nUpdateHandler.java:\n  void registerCommitCallback( SolrEventListener listener )\n  void registerOptimizeCallback( SolrEventListener listener )\n\nSolrCore.java:\n  void registerFirstSearcherListener( SolrEventListener listener )\n  void registerNewSearcherListener( SolrEventListener listener )\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12609007",
            "date": "2008-06-28T12:45:18+0000",
            "content": "add a method to register response writer\n\nSolrCore.java\npublic void registerResponseWriter(String name, QueryResponseWriter writer)\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12609062",
            "date": "2008-06-29T06:07:48+0000",
            "content": "registerResponseWriter() method added to SolrCore "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12611272",
            "date": "2008-07-07T18:40:03+0000",
            "content": "I think there may be some thread safety issues here wrt commitCallbacks and optimizeCallbacks that could result in a concurrent modification exception if these new APIs are used concurrently with indexing. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12611296",
            "date": "2008-07-07T19:17:10+0000",
            "content": "true \u2013 likewise with SOLR-619 \u2013 however all these calls will be safe within inform( SolrCore ) for SolrCoreAware classes.\n\nOptions I see:\n1. add javadoc comments saying \"not threadsafe, intended for use in inform()\"\n2. change implementations from HashMap -> ConcurrentHashMap & List -> Collections.synchronized()\n3. (bad) remove the functionality\n\nIs there any way for an arbitrary thread (say in a RequestHandler) to block indexing?  If so, this could be offered as an option in addition to #1 for the rare event where you need to modify the listeners/schema after startup.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12611306",
            "date": "2008-07-07T19:41:03+0000",
            "content": "1. add javadoc comments saying \"not threadsafe, intended for use in inform()\"\n\nSince these are new methods, I think this is probably the right approach.  It allows extensions to modify the schema w/o opening up the can of worms of a mutable IndexSchema. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12611321",
            "date": "2008-07-07T20:24:26+0000",
            "content": "w/o opening up the can of worms of a mutable IndexSchema\n\nI'm afraid that can of worms has been open (at least) since solr 1.1\n\n\n  public Map<String,SchemaField> getFields() { return fields; }\n  public Map<String,FieldType> getFieldTypes() { return fieldTypes; }\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12611328",
            "date": "2008-07-07T20:29:47+0000",
            "content": "I'm afraid that can of worms has been open (at least) since solr 1.1\n\nNah... just the lack of javadoc that they shouldn't be modified. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12611333",
            "date": "2008-07-07T20:38:37+0000",
            "content": "check the existing javadocs\n\n\nProvides direct access to the Map containing all Field Types in the index, keyed on fild type name.\n\nModifying this Map (or any item in it) will affect the real schema \n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12611334",
            "date": "2008-07-07T20:40:01+0000",
            "content": "but yes, I agree \u2013 these just need more clarification when you can modify them "
        }
    ]
}