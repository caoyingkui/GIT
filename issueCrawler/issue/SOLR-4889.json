{
    "id": "SOLR-4889",
    "title": "setup comments on autoexported pages of SOLR CWIKI",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "documentation"
        ],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "https://comments.apache.org/help.html\n\n\n\tcoordinate with infra to get a new comment key created for \"solr\"\n\tadd comment code to autoexport template\n\t\n\t\tmay require some experimentation to get `path` right\n\t\tshould be some variant of `$confluenceUri/$page.urlPath` if i understand correctly\n\t\n\t\n\tcoordinate adding volunteers to be comment moderators",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13673808",
            "date": "2013-06-03T23:48:47+0000",
            "content": "On #asfinfra I (as project VP) asked for and got admin privileges on comments.apache.org, for a newly created project 'solrcwiki'.\n\nI've set the option to require users to be registered before they can post.  We can relax if we want once everything's up and running.  On #asfinfra with hoss and Humbedooh (Daniel Gruno, the main author of the commenting system):\n\n\n   <sarowe>: hoss: I'm going to check \"require users to be registered before they can post\", that's \n             the only option besides gravatars, and disabling posting and showing of comment\n<Humbedooh>: that's a first I believe :)\n   <sarowe>: Humbedooh: requiring registered users? well, we can relax after it's set up I guess\n<Humbedooh>: yeah, there haven't really been any problems on the other sites with allowing\n             non-registered users to post (yet)\n     <hoss>: definitely while testing it out, let's keep out anon\n<Humbedooh>: you won't see much spam, the worst noise you'll get is people that don't understand\n             what you should post and what you should use the ML for\n             I think by far the most common sentence posted via the system is \"This is not a Q&A\n             section\"\n             though, of course, if you want to use it for that, feel free to do so\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13673844",
            "date": "2013-06-04T00:18:01+0000",
            "content": "Hmm...\n\nmy previous speculation about how to get the URL of the current page in the autoexport template...\n\nshould be some variant of `$confluenceUri/$page.urlPath` if i understand correctly\n\n...was based on how the code in the autoexport template generates links to the current page nad child pages in the nav breadcrumbs, combined with what objects are put in the velocity scope...\n\n\n\thttps://bitbucket.org/atlassianlabs/confluence-autoexport-plugin/src/91cb9d4d3839b76e41aebf4a39b6660b66beea99/src/main/java/it/could/confluence/autoexport/engine/ExportUtils.java?at=AUTOEXPORT-26#cl-70\n\thttps://bitbucket.org/atlassianlabs/confluence-autoexport-plugin/src/91cb9d4d3839b76e41aebf4a39b6660b66beea99/src/main/java/it/could/confluence/autoexport/ExportManager.java?at=AUTOEXPORT-26#cl-248\n\n\n\nHowever, when i attempted to follow in these footsteps, the results were unexpected.  `$confluenceUri/$page.urlPath` produced the URL of the dynamic confluence page, not the autoexported page.  more experimentation lead me to discover that this...\n\n\n    <div class=\"test\">\n      <h3>Hoss'ss test</h3>\n      <p>$autoexport.link($page) == <a href=\"$confluenceUri$page.urlPath\">$page.title</a> == $confluenceUri$page.urlPath</p>\n    </div>\n\n\n\nproduced this...\n\n\n<div class=\"test\">\n      <h3>Hoss'ss test</h3>\n      <p><a href=\"\" title=\"Test Page 1\">Test Page 1</a> == <a href=\"\">Test Page 1</a> == https://cwiki.apache.org/confluence/display/SOLR/Test+Page+1</p>\n    </div>\n\n\n\nApparently there is code in the autoexport plugin that post processes the HTML produced to convert any links to dynamic pages into links to the static pages, but it only looks at true links, not arbitrary URLs in the body of the page, nor (as i found out in another test) URLs specified as params in more complicated script requests like we would need for comments.\n\nSo i'm going to dig into the autoexporter code a bit more to try and figure this out.  Worst case scenario, there is way to use the comments system such that it just depends on the Refer header, but that has some annoying failure cases.  i think a last resort before that would be some javascript to check the current location URL and update the script tag.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13677410",
            "date": "2013-06-06T19:29:02+0000",
            "content": "So i'm going to dig into the autoexporter code a bit more to try and figure this out. \n\nDid-Done ... there doesn't seem to be anyway to safely get the URL of the current page from the autoexport template VelocityContext.\n\nI'm going to pursue the alternative i suggested before, which unfortunately means requiring javascript in order to comment (can't use the iframe fallback)...\n\ni think a last resort before that would be some javascript to check the current location URL and update the script tag. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13692283",
            "date": "2013-06-24T19:24:46+0000",
            "content": "It appears this is not longer something we need to worry about because of the new Infra policies regarding confluence: autoexport is no longer supported, ergo autoexport is no longer required, ergo we can link directly to confluence pages instead of  autoexport pages, ergo we can use regular confluence comments.\n\n(I'll re-open if it turns out any of theses \"ergos\" are incorrect) "
        }
    ]
}