{
    "id": "LUCENE-3663",
    "title": "Add a phone number normalization TokenFilter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Phone numbers can be found in the wild in an infinity variety of formats (e.g. with spaces, parenthesis, dashes, with or without country code, with letters in substitution of numbers). So some Lucene applications can benefit of phone normalization with a TokenFilter that gets a phone number in any format, and outputs it in a standard format, using a default country to guess country code if it's not present.",
    "attachments": {
        "PhoneFilter.java": "https://issues.apache.org/jira/secure/attachment/12508224/PhoneFilter.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-21T10:42:28+0000",
            "content": "This is a proof-of-concept TokenFilter that does the job using Google's libphonenumber (https://code.google.com/p/libphonenumber/).\n\nEach token is converted to a phone number in international format, using a default country for guessing country code if needed. If the token is not a valid phone number, it's filtered out.\n ",
            "author": "Santiago M. Mola",
            "id": "comment-13173996"
        },
        {
            "date": "2011-12-21T11:32:39+0000",
            "content": "This looks strange and creates useless objects:\n\n\nfinal char[] buffer = termAtt.buffer();\nfinal int length = termAtt.length();\nCharBuffer cb = CharBuffer.wrap(buffer, 0, length);\ntry {\n    PhoneNumber pn = pnu.parse(cb.toString(), defaultCountry);\n\n\n\nshould be:\n\n\ntry {\n    PhoneNumber pn = pnu.parse(termAtt.toString(), defaultCountry);\n\n\n\nIdeally, PhoneNumberUtil would take CharSequence (so you could directly pass termAtt without toString()), but unfortunately Google's lib is too stupid to use a more generic Java type.\n\nOtherwise patch looks fine, but it adds another external library. You should make all fields final, they will never change! ",
            "author": "Uwe Schindler",
            "id": "comment-13174022"
        },
        {
            "date": "2011-12-21T11:38:26+0000",
            "content": "One more thing, as you want to filter out tokens, you should not subclass TokenFilter directly but instead sublass org.apache.lucene.analysis.util.FilteringTokenFilter and do the work in the accept() method. You are free to modify the token there, too. This new base class would correctly handle position increments, as noted as TODO in your comments. ",
            "author": "Uwe Schindler",
            "id": "comment-13174024"
        },
        {
            "date": "2011-12-21T11:41:52+0000",
            "content": "+1 I think this would be a useful addition. ",
            "author": "Michael McCandless",
            "id": "comment-13174025"
        },
        {
            "date": "2011-12-21T11:44:47+0000",
            "content": "I think actually that we should not remove tokens that aren't phone numbers. sometimes there just might be other\nthings instead of phone numbers, or maybe the phone number detection/normalization is just imperfect so its better\n to not throw away, instead just no normalization happens, like a stemmer.\n\nIn general we can also assume the text is unstructured and might have other stuff (this implies someone has a super-cool \ntokenizer that doesnt split up any dirty phone numbers, but we just leave the possibility)\n\nThen i think the while loop could be removed, if the phone number normalization succeeds mark the type as phone.\nOtherwise in the exception case, output it unchanged.\n\nthen non-phonenumbers or whatever can be easily filtered out separately with a subclass of FilteringTokenFilter. ",
            "author": "Robert Muir",
            "id": "comment-13174026"
        },
        {
            "date": "2011-12-21T12:43:24+0000",
            "content": "@Uwe: Thanks for the comments.\n\n@Robert: Then this filter would mark phone tokens as <PHONE> type and I could filter non-<PHONE> tokens with a subsequent filter? In my specific use case, I need to throw away any token that could not be normalized, so I have to, at least, mark phone tokens for removal in further steps. If tokens are not marked, then we would have to check twice if the token is a valid phone. ",
            "author": "Santiago M. Mola",
            "id": "comment-13174046"
        },
        {
            "date": "2011-12-21T12:47:56+0000",
            "content": "Bug report for libphonenumber in order to get it to support CharSequence: https://code.google.com/p/libphonenumber/issues/detail?id=84 ",
            "author": "Santiago M. Mola",
            "id": "comment-13174058"
        },
        {
            "date": "2011-12-21T13:05:46+0000",
            "content": "Santiago, yeah i think if normalization is successful, you would change the type to <PHONE> as it was recognized as one.\notherwise when you get the exception, just 'return true' and leave all attributes unchanged.\n\nin the successful case, besides setting the type, if you wanted you could even not throw away the PhoneNumber or whatever\nbut instead put it in an attribute. This way if someone wanted to do more complicated stuff the attributes are at least available,\nbut its also useful for things like solr's analysis.jsp just for debugging how the analysis worked. ",
            "author": "Robert Muir",
            "id": "comment-13174074"
        },
        {
            "date": "2011-12-21T13:08:22+0000",
            "content": "Then this filter would mark phone tokens as <PHONE> type and I could filter non-<PHONE> tokens with a subsequent filter?\n\nYES!.\n\nThe FilteringTokenFilter subclass you then would add after this filterw ould simply has this accept() method:\n\n\nprotected boolean accept() {\n return \"<PHONE>\".equals(typeAtt.getType());\n}\n\n\n\nFilteringTokenFilter would then also support position increments correctly, that your filter does not. ",
            "author": "Uwe Schindler",
            "id": "comment-13174078"
        },
        {
            "date": "2012-01-24T09:15:40+0000",
            "content": "Modified considering your comments. ",
            "author": "Santiago M. Mola",
            "id": "comment-13192027"
        }
    ]
}