{
    "id": "LUCENE-6908",
    "title": "TestGeoUtils.testGeoRelations is buggy with irregular rectangles",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "The .testGeoRelations method doesn't exactly test the behavior of GeoPoint*Query as its using the BKD split technique (instead of quad cell division) to divide the space on each pass. For \"large\" distance queries this can create a lot of irregular rectangles producing large radial distortion error when using the cartesian approximation methods provided by GeoUtils. This issue improves the accuracy of GeoUtils cartesian approximation methods on irregular rectangles without having to cut over to an expensive oblate geometry approach.",
    "attachments": {
        "LUCENE-6908.patch": "https://issues.apache.org/jira/secure/attachment/12773903/LUCENE-6908.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15023085",
            "author": "Nicholas Knize",
            "date": "2015-11-23T21:17:27+0000",
            "content": "Patch includes:\n\n\n\tupdate testGeoRelations to rewrite longitudinal span queries into 4 slices to reduce radial distortion error in GeoUtils cartesian approximation methods - this would be needed for BKD queries due to the nature of the split algorithm for large distance queries.\n\n\n\n\n\tIncorporate distance error on isClosestPointOnRectWIthinRange for better approximation within BKD.\n\n\n\n\n\tadded comments and javadocs.\n\n "
        },
        {
            "id": "comment-15034679",
            "author": "Nicholas Knize",
            "date": "2015-12-01T22:05:17+0000",
            "content": "Updated patch includes the following:\n\n\n\tPushes down approximation fixes to the Geo utility APIs\n\tRefactors relation logic from GeoUtils into separate GeoRelationUtils class\n\tImproves GeoDistance pole crossing by re-projecting to Earth Centered Earth Fixed (ECEF)\n\tAdds approx flag to bypass advanced relation logic (useful for GeoPointField since approximations are already handled at the grid level\n\tRemoves AwaitsFix from TestGeoUtils.testGeoRelations\n\n\n\nNext step is to test w/ BKD integration. "
        },
        {
            "id": "comment-15035607",
            "author": "Michael McCandless",
            "date": "2015-12-02T10:33:45+0000",
            "content": "Hi Nicholas Knize, I think you forgot to add GeoRelationUtils.java before making the patch?  And also, can you make the patch from higher up in the source tree?  It seems to be missing e.g. changes to SloppyMath.java. "
        },
        {
            "id": "comment-15036134",
            "author": "Nicholas Knize",
            "date": "2015-12-02T17:01:41+0000",
            "content": "Thanks Michael McCandless! Fixed the patch to include GeoRelationUtils and changes to SloppyMath. "
        },
        {
            "id": "comment-15036726",
            "author": "Michael McCandless",
            "date": "2015-12-02T22:00:50+0000",
            "content": "Thanks Nicholas Knize!  Lots of geo math that I don't understand \n\nIt hit a failure after some beasting:\n\n\n   [junit4] Started J0 PID(28075@localhost).\n   [junit4] Suite: org.apache.lucene.util.TestGeoUtils\n   [junit4]   1> doc=2304 matched but should not\n   [junit4]   1>   lon=-52.68950667232275 lat=-89.24937685020268 distanceMeters=267809.96722662856 vs radiusMeters=263432.23741533695\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoUtils -Dtests.method=testGeoRelations -Dtests.seed=3B46325723FB86A9 -Dtests.multiplier=5 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=vi_VN -Dtests.timezone=America/Halifax -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 2.61s | TestGeoUtils.testGeoRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: 1 incorrect hits (see above)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([3B46325723FB86A9:F96526E2570CF017]:0)\n   [junit4]    > \tat org.apache.lucene.util.TestGeoUtils.testGeoRelations(TestGeoUtils.java:533)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=HighCompressionCompressingStoredFields(storedFieldsFormat=CompressingStoredFieldsFormat(compressionMode=HIGH_COMPRESSION, chunkSize=9, maxDocsPerChunk=323, blockSize=5), termVectorsFormat=CompressingTermVectorsFormat(compressionMode=HIGH_COMPRESSION, chunkSize=9, blockSize=5)), sim=RandomSimilarityProvider(queryNorm=true,coord=yes): {}, locale=vi_VN, timezone=America/Halifax\n   [junit4]   2> NOTE: Linux 3.13.0-61-generic amd64/Oracle Corporation 1.8.0_60 (64-bit)/cpus=8,threads=1,free=396588944,total=504889344\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoUtils]\n   [junit4] Completed [1/1] in 2.77s, 1 test, 1 failure <<< FAILURES!\n\n\n\nAlso, this comment seems stale now?  (We seem to be using this method?):\n\n\n// NOTE: not used for 2d at the moment. used for 3d w/ altitude (we can keep or add back)\n\n "
        },
        {
            "id": "comment-15036890",
            "author": "Nicholas Knize",
            "date": "2015-12-02T23:47:49+0000",
            "content": "Thanks Michael McCandless. In isClosestPointOnRectWithinRange it was still using SloppyMath.haversin where it should have been using the Sinnott haversine. Looks like it was caused by a premature diff from my benchmark workspace.\n\nA quick interesting benchmark re: distance methods. Using 2M iterations I benchmarked average computation time, average spatial error, and maximum spatial error between 5 different geospatial distance methods:\n\n\tVincenty\n\tKarney - Modified Vincenty that uses Newton's series expansion to fix problems w/ antipodal points\n\tHaverECF - Same as SloppyMath.haversin but uses ECEF to accurately compute semi-major axis at the given latitude.\n\tSinnott's Haversine - Implementation from the original haversine publication\n\tSloppyMath.haversin\n\n\n\n\n\n\n Distance Method \n Avg Computation (ns) \n Avg Error (%) \n Max Error (%) \n\n\n Vincenty \n 1286.5529689998828 \n 8.4561794778802E-11 \n 7.2565793775802E-10 \n\n\n Karney \n 31770.479206999946 \n 8.4561794778802E-11 \n 7.2565793775802E-10 \n\n\n HaverECF \n 717.1139850000152 \n 0.18409042301798453 \n 0.6681179192384695 \n\n\n SloppyMath.haverin \n 159.3095249999995 \n 0.22594450803222424 \n 0.6539314586426048 \n\n\n Sinnott Haversine \n 146.81236699999738 \n 0.18158435835918563 \n 0.4931242857748373 \n\n\n\n\n\nI need to run some better descriptive statistics before drawing any conclusions. At the moment, the discrepancy between Sloppymath.haversin and Sinnott's implementation is consistent with the error described in the original publication (which is where the tolerance of 0.5% originated).\n\nMore to come.... "
        },
        {
            "id": "comment-15042248",
            "author": "Michael McCandless",
            "date": "2015-12-04T21:17:06+0000",
            "content": "Those benchmark results are nice Nicholas Knize!  Is the source for this bench checked in somewhere?  From this, it seems like we should switch to Sinnot Haversine?  It's fastest and lowest error?\n\nI beasted for a while and no failures!\n\n+1 to commit!  Hopefully this means we can add DimensionalDistanceQuery and it just works! "
        },
        {
            "id": "comment-15045752",
            "author": "Nicholas Knize",
            "date": "2015-12-07T21:21:10+0000",
            "content": "Thanks Michael McCandless! I plan to add the benchmark to luceneutil unless you think there's a better place for it? Going to commit shortly. "
        },
        {
            "id": "comment-15045839",
            "author": "ASF subversion and git services",
            "date": "2015-12-07T22:02:49+0000",
            "content": "Commit 1718481 from Nicholas Knize in branch 'dev/trunk'\n[ https://svn.apache.org/r1718481 ]\n\nLUCENE-6908: Fix TestGeoUtils.testGeoRelations to handle irregular rectangles. Refactors relational methods to new GeoRelationUtils class. "
        },
        {
            "id": "comment-15045892",
            "author": "ASF subversion and git services",
            "date": "2015-12-07T22:29:28+0000",
            "content": "Commit 1718486 from Nicholas Knize in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1718486 ]\n\nLUCENE-6908: Fix TestGeoUtils.testGeoRelations to handle irregular rectangles. Refactors relational methods to new GeoRelationUtils class. "
        },
        {
            "id": "comment-15058081",
            "author": "Steve Rowe",
            "date": "2015-12-15T13:58:53+0000",
            "content": "My Jenkins found a reproducible failure in TestGeoUtils.testGeoRelations:\n\n\n   [junit4] Suite: org.apache.lucene.util.TestGeoUtils\n   [junit4]   1> doc=1921 matched but should not on iteration 229\n   [junit4]   1>   lon=87.14082470163703 lat=-89.39206877723336 distanceMeters=205662.45440744862 vs radiusMeters=203580.37384777897\n   [junit4]   1> doc=2077 matched but should not on iteration 229\n   [junit4]   1>   lon=63.26208980754018 lat=-89.36728684231639 distanceMeters=204170.67218267516 vs radiusMeters=203580.37384777897\n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoUtils -Dtests.method=testGeoRelations -Dtests.seed=4513B1942DE0E2D3 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=lv -Dtests.timezone=America/St_Vincent -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 2.24s | TestGeoUtils.testGeoRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: 2 incorrect hits (see above)\n\n "
        },
        {
            "id": "comment-15058086",
            "author": "Steve Rowe",
            "date": "2015-12-15T14:01:57+0000",
            "content": "See also Policeman Jenkins failures at http://jenkins.thetaphi.de/job/Lucene-Solr-5.x-Linux/14886/ and http://jenkins.thetaphi.de/job/Lucene-Solr-trunk-Linux/15198/ "
        },
        {
            "id": "comment-15067233",
            "author": "Steve Rowe",
            "date": "2015-12-21T23:14:30+0000",
            "content": "Another reproducible failure from my Jenkins (on branch_5x):\n\n\n   [junit4] Suite: org.apache.lucene.util.TestGeoUtils\n   [junit4]   1> doc=1357 matched but should not on iteration 2\n   [junit4]   1>   lon=-24.478504993021488 lat=88.08790524490178 distanceMeters=303542.5030168316 vs radiusMeters=295327.75445295114\n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoUtils -Dtests.method=testGeoRelations -Dtests.seed=BAD657FC92E56596 -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=lv -Dtests.timezone=America/Knox_IN -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.33s J0 | TestGeoUtils.testGeoRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: 1 incorrect hits (see above)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([BAD657FC92E56596:78F54349E6121328]:0)\n   [junit4]    > \tat org.apache.lucene.util.TestGeoUtils.testGeoRelations(TestGeoUtils.java:533)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Lucene54, sim=RandomSimilarityProvider(queryNorm=false,coord=crazy): {}, locale=lv, timezone=America/Knox_IN\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.8.0_45 (64-bit)/cpus=16,threads=1,free=434060912,total=514850816\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoUtils]\n   [junit4] Completed [1/20 (1!)] on J0 in 1.14s, 8 tests, 1 failure <<< FAILURES!\n\n "
        },
        {
            "id": "comment-15068321",
            "author": "Steve Rowe",
            "date": "2015-12-22T16:11:17+0000",
            "content": "One more reproducible failure from my Jenkins on branch_5x (I'll stop adding more after this one):\n\n\n   [junit4] Suite: org.apache.lucene.util.TestGeoUtils\n   [junit4]   1> doc=1431 matched but should not on iteration 50\n   [junit4]   1>   lon=14.089814610779285 lat=88.21761829778552 distanceMeters=310627.1321615869 vs radiusMeters=308762.06620344025\n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoUtils -Dtests.method=testGeoRelations -Dtests.seed=70AF7A8C5D104698 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=es_CR -Dtests.timezone=Africa/Maputo -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 1.28s J3 | TestGeoUtils.testGeoRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: 1 incorrect hits (see above)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([70AF7A8C5D104698:B28C6E3929E73026]:0)\n   [junit4]    > \tat org.apache.lucene.util.TestGeoUtils.testGeoRelations(TestGeoUtils.java:533)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene54): {}, docValues:{}, sim=DefaultSimilarity, locale=es_CR, timezone=Africa/Maputo\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.8.0_45 (64-bit)/cpus=16,threads=1,free=426047992,total=514850816\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoUtils]\n   [junit4] Completed [3/20 (1!)] on J3 in 1.74s, 8 tests, 1 failure <<< FAILURES!\n\n "
        },
        {
            "id": "comment-15068336",
            "author": "Nicholas Knize",
            "date": "2015-12-22T16:17:49+0000",
            "content": "++ Thanks Steve Rowe There's a geometric approximation in the within that's a bit too lenient for BKD. These seeds have been super helpful in regression testing a fix. Should have a patch shortly. Sorry for the noise! "
        },
        {
            "id": "comment-15073188",
            "author": "Nicholas Knize",
            "date": "2015-12-28T22:04:15+0000",
            "content": "Updated patch includes:\n\n\n\tspace segmentation for irregular rectangles at the poles\n\tutility method for computing bearing from two given lat/lon points\n\texplicitly tested against failed seeds and nightly beasting\n\tupdated javadocs\n\n "
        },
        {
            "id": "comment-15076041",
            "author": "ASF subversion and git services",
            "date": "2015-12-31T16:08:27+0000",
            "content": "Commit 1722448 from Nicholas Knize in branch 'dev/trunk'\n[ https://svn.apache.org/r1722448 ]\n\nLUCENE-6908: Add space segmentation for handling irregular rectangle accuracy at the poles. "
        },
        {
            "id": "comment-15076046",
            "author": "ASF subversion and git services",
            "date": "2015-12-31T16:22:28+0000",
            "content": "Commit 1722449 from Nicholas Knize in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1722449 ]\n\nLUCENE-6908: Add space segmentation for handling irregular rectangle accuracy at the poles. "
        },
        {
            "id": "comment-15089379",
            "author": "Michael McCandless",
            "date": "2016-01-08T15:48:25+0000",
            "content": "Nicholas Knize can this be resolved? "
        }
    ]
}