{
    "id": "SOLR-6216",
    "title": "Better faceting for multiple intervals on DV fields",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "There are two ways to have faceting on values ranges in Solr right now: \u201cRange Faceting\u201d and \u201cQuery Faceting\u201d (doing range queries). They both end up doing something similar:\n\nsearcher.numDocs(rangeQ , docs)\n\n\nThe good thing about this implementation is that it can benefit from caching. The bad thing is that it may be slow with cold caches, and that there will be a query for each of the ranges.\n\nA different implementation would be one that works similar to regular field faceting, using doc values and validating ranges for each value of the matching documents. This implementation would sometimes be faster than Range Faceting / Query Faceting, specially on cases where caches are not very effective, like on a high update rate, or where ranges change frequently.\n\nFunctionally, the result should be exactly the same as the one obtained by doing a facet query for every interval",
    "attachments": {
        "SOLR-6216.patch": "https://issues.apache.org/jira/secure/attachment/12653222/SOLR-6216.patch",
        "FacetTester.java": "https://issues.apache.org/jira/secure/attachment/12657845/FacetTester.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14048055",
            "date": "2014-06-30T20:02:31+0000",
            "content": "Here is the approach I mentioned. It still has some things to be done, but should give an idea. I'd like to hear what people thinks about this "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14048153",
            "date": "2014-06-30T20:55:20+0000",
            "content": "I did some very basic performance testing to compare interval faceting vs facet queries: \nDataset: Geonames.org dataset (added 4 times to make it a 33M docs)\nQuery Set: 4960 boolean queries using terms from the dataset\n1 document updated every second\nautoSoftCommit every second. \nHW: MacBook Pro Core i7, 2.7 GHz with 8 GB of RAM with spinning disk (5400 RPM)\nAll times are in milliseconds\nRepeated the test with different number of intervals (on the \u201cpopulation\u201d field of the geonames dataset)\n\n\n\n\n\u00a0\n \tNum Intervals \n\t1 \n\t2 \n\t3 \n\t4 \n\t5 \n\t10 \n\n\n Min\t\nIntervals \n\t25 \n\t23 \n\t26 \n\t23 \n\t24 \n\t26 \n\n\n\u00a0\n Facet Query \n\t2 \n\t2 \n\t3 \n\t4 \n\t4 \n\t6 \n\n\nMax \n\tIntervals \n\t1885 \n\t2254 \n\t2508 \n\t2800 \n\t2749 \n\t3031 \n\n\n\u00a0\n Facet Query \n\t2199 \n\t2414 \n\t3957 \n\t2766 \n\t1869 \n\t5975 \n\n\n Average\t\n Intervals \n\t181 \n\t177 \n\t191 \n\t183 \n\t148 \n\t174 \n\n\n\u00a0\nFacet Query\n\t156\n\t277\n\t359\n\t299\n\t216\n\t408\n\n\nP10\t\nIntervals\t\n53\t\n54\t\n54\t\n54\t\n54\t\n56\n\n\n\u00a0\nFacet Query\t\n26\t\n30\t\n33\t\n31\t\n29\t\n35\n\n\nP50\t\nIntervals\t\n96\t\n95\t\n98\t\n97\t\n88\t\n96\n\n\n\u00a0\nFacet Query\t\n54\t\n211\t\n293\t\n188\t\n58\t\n74\n\n\nP90\t\nIntervals\t\n453\t\n940\t\n467\t\n458\t\n350\t\n438\n\n\n\u00a0\nFacet Query\t\n432\t\n656\t\n794\t\n749\t\n660\t\n1066\n\n\nP99\t\nIntervals\t\n809\t\n884\t\n968\t\n877\t\n857\t\n897\n\n\n\u00a0\nFacet Query\t\n867\t\n1041\t\n1354\t\n1219\t\n1116\t\n1784\n\n\n\n\n\nThere is some variation between the tests with different number of intervals (with the same method) that I don\u2019t understand very well. For each test, I\u2019d restart the jetty (index files are probably cached between tests though).\n\nIn general what I see is that the average is similar or lower than facet query, the p10 and p50 similar or higher than facet query (these are probably the cases where the facet queries hit cache), and lower p90 p99 for the Intervals impl. This probably because of facet query missing cache. \n\n\u201cMax\u201d variates a lot, I don\u2019t think it\u2019s a very representative number, I just left it for completeness. Min is very similar for all cases, it\u2019s obvious that in the best case (all cache hits), facet query is much faster than intervals. \n\nI also did a quick test on an internal collection with around 100M docs in a single shard, ran around 6000 queries with around 40 intervals each, for this test I got: \n\n\n\n\nMin\t\nIntervals\t\n122\n\n\n\u00a0\nFacet Query\t\n124\n\n\nMax\t \nIntervals\t\n6626\n\n\n\u00a0\nFacet Query\t\n61009\n\n\nAverage\t\nIntervals\t\n238\n\n\n\u00a0\nFacet Query\t\n620\n\n\nP10\t\nIntervals\t\n155\n\n\n\u00a0\nFacet Query\t\n151\n\n\nP50\t\nIntervals\t\n201\n\n\n\u00a0\nFacet Query\t\n202\n\n\nP90\t\nIntervals\t\n324\n\n\n\u00a0\nFacet Query\t\n461\n\n\nP99\t\nIntervals\t\n836\n\n\n\u00a0\nFacet Query\t\n23662\n\n\n\n\n\nThis collection has updates and soft commits. \nI don\u2019t have numbers for distributed tests, but from what I could see, the result was even better on wide collections, because of the lower p90/p99 I assume.  "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14048276",
            "date": "2014-06-30T22:54:51+0000",
            "content": "Updated to current trunk "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14049323",
            "date": "2014-07-01T21:02:25+0000",
            "content": "Added a distributed test case. I don't know if it makes sense to have a complete different test class for this, but I need to suppress some older codecs, and I don't know if there is a way from inside the test (on the distributed test cases) to know which codecs are being used.  "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14049579",
            "date": "2014-07-02T03:22:32+0000",
            "content": "Added some more unit tests "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14050379",
            "date": "2014-07-02T17:33:38+0000",
            "content": "added some more javadocs and cleanup tests "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14053813",
            "date": "2014-07-07T16:16:04+0000",
            "content": "Any thoughts on this issue? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14053823",
            "date": "2014-07-07T16:28:24+0000",
            "content": "Thoughts:\n\nThe numbers look good, the patch looks good, looks like good comments, looks like good tests, very clean patch.\n\nUnfortunately, probably not something I can look at soon personally, but just to note in case another committer can tackle this more near term. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14053865",
            "date": "2014-07-07T17:04:15+0000",
            "content": "Thanks for the feedback Mark. Hopefully some other committer can also take a look soon.  "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14054406",
            "date": "2014-07-08T01:47:16+0000",
            "content": "Fixed a problem with the distributed test. Removed some unnecessary changes. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14058134",
            "date": "2014-07-10T23:54:48+0000",
            "content": "Anyone else that can take a look at the patch? "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14060914",
            "date": "2014-07-14T17:40:05+0000",
            "content": "I have been testing this code in 4.x too, it works fine too. The tests need to omit \"Lucene3x\" codec in addition to the omitted in trunk "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14067363",
            "date": "2014-07-19T03:35:30+0000",
            "content": "Tomas:\n\nSorry I haven't been able to get to this, but I started looking at it today. Very nice patch! I uploaded a few tweaks in a bit (spelling corrections, and I thought that FacetComponent.countFacets was getting a little long so I refactored the three clauses into their own methods, no functional change at all).\n\nA few questions though:\n1> I'm assuming this supports the f.<fieldname>.facet syntax, that's at a higher level that this patch I'd guess\n2> There's a TODO in SimpleFacets [1410] or so....\n3> Perhaps the most substantive question I have is the syntax. Why use '()' for exclusive ranges and not '{}' like range facets do? Other things being equal, it seems like this would be more consistent with other Solr syntax. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14067396",
            "date": "2014-07-19T05:43:54+0000",
            "content": "Thanks for looking at the patch Erick. \n\n1> I'm assuming this supports the f.<fieldname>.facet syntax, that's at a higher level that this patch I'd guess\nYes, that's the way to set the intervals for a field. For example:\n\u0010\u0010\u0010\u0010\n\nf.test_l_dv.facet.interval.set=[10,20]\n\n2> There's a TODO in SimpleFacets ...\nThere are a couple of TODOs. In SimpleFacets, to add a comment about the distributed case. I'll add that. In IntervalFacets there are a couple more. Two of them I kept from the section of code I used from NumericFacets (maybe this can be refactored in the future). Two TODOs are in the parsing method of the interval. I see those two as possible future improvements, I don't think they are necessary at this point. \n3> Perhaps the most substantive question I have is the syntax. Why use '()' for exclusive ranges and not '{}' like range facets do? Other things being equal, it seems like this would be more consistent with other Solr syntax.\nWell, that is true, but I guess in range queries \u201c\u0010\u0010\u0010\u0010\u0010\u0010{}\u201c had to be used because \u201c()\u201d was already being used for grouping clauses. I feel that \u201c(10,20)\u201d is a better representation of an interval, but I see your point too to be consistent with other Solr syntax. I think I\u2019m OK either way. I was also planning on adding support for local params on the interval to support setting an arbitrary key, and if we use curly braces it would be more confusing:\n\u0010\n\nf.test_l_dv.facet.interval.set={!key=\u2018foo\u2019}(10,20)\u0010\n\nvs\n\u0010\n\nf.test_l_dv.facet.interval.set={!key=\u2018foo\u2019}{10,20}\u0010\n "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14067579",
            "date": "2014-07-19T16:34:59+0000",
            "content": "Attached a new patch with some more parsing unit tests (validating Erick's question of f.<field>.facet.interval.set vs facet.interval.set)\nAdded some more javadocs on SimpleFacets (removed that TODO) "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14067582",
            "date": "2014-07-19T16:42:10+0000",
            "content": "Added a couple of tests "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14068053",
            "date": "2014-07-20T21:38:41+0000",
            "content": "Trivial changes, took out a couple of unused parameters to methods in IntervalFacets. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14068054",
            "date": "2014-07-20T21:40:21+0000",
            "content": "Tom\u00e1s:\n\nTook another look today, looks really good. I did happen to notice a couple of unused parameters, so I attached a patch takes them out.\n\nUnless there are objections, I'll commit this next Tuesday or Wednesday.\n\nThanks!\nErick "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14070457",
            "date": "2014-07-22T16:26:29+0000",
            "content": "Great, thanks Erick. I'll create a Jira for the LocalParam behavior I mentioned before (override the interval key) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14072017",
            "date": "2014-07-23T17:43:35+0000",
            "content": "Commit 1612889 from Erick Erickson in branch 'dev/trunk'\n[ https://svn.apache.org/r1612889 ]\n\nSOLR-6216: Better faceting for multiple intervals on DV fields. Thanks Tomas "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14072245",
            "date": "2014-07-23T20:00:31+0000",
            "content": "Thanks for committing this Erick. I tested this in 4x and tests are passing too. The only thing that needs to be added in addition to the merge is \"Lucene3x\" to the list of codecs to skip (in DistributedIntervalFacetingTest and TestIntervalFaceting) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14072442",
            "date": "2014-07-23T22:02:30+0000",
            "content": "Commit 1612958 from Erick Erickson in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1612958 ]\n\nSOLR-6216: Better faceting for multiple intervals on DV fields. Thanks Tomas "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14072443",
            "date": "2014-07-23T22:03:08+0000",
            "content": "Thanks Tom\u00e1s! "
        },
        {
            "author": "David Smiley",
            "id": "comment-14074391",
            "date": "2014-07-25T13:41:11+0000",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe , do you have any scripts for your performance testing?  I am impressed with that part specifically as I've got some interval faceting on my horizon to do what is somewhat similar to what you've got here LUCENE-5735 "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14074526",
            "date": "2014-07-25T16:21:34+0000",
            "content": "David Smiley I used the attached Java class for running the queries. As I said, the dataset was geonames, added 4 times (with different IDs) so that the index had 33M docs total. \nThe queries are all boolean queries with two OR terms, generated by taking terms from the \u201cname\u201d field of the dataset. An example: \n\n\nname:cemetery name:lake\nname:el name:historical\nname:church name:el\nname:dam name:la\nname:al name:church\nname:al name:creek\nname:baptist name:la\nname:la name:mount\nname:creek name:de\nname:center name:park\nname:church name:creek\n...\n\n\n\nEyeballing the logs, most of those queries matched a high number of docs from the index. In addition, I had a bash script running to add documents every one second: \n\n\n#!/bin/bash\nIFS='\\n'\nwhile read q   \ndo\necho $q > tmp.doc\ncurl -v 'http://localhost:8983/solr/geonames/update?stream.file=/absolute/path/to/tmp.doc&stream.contentType=text/csv;charset=utf-8&separator=%09&encapsulator=%0E&header=false&fieldnames=id,name,,alternatenames,latitude,longitude,feature_class,feature_code,country_code,cc2,admin1_code,admin2_code,admin3_code,admin4_code,population,elevation,dem,timezone,modification_date&f.alternatenames.split=true&f.alternatenames.separator=,&f.alternatenames.encapsulator=%0E&f.cc2.split=true&amp;f.cc2.separator=,&f.cc2.encapsulator=%0E'\nsleep 1\ndone < allCountries.txt\n\n\nUnfortunately, It looks like I deleted the schema file I used, however there was nothing crazy about it, population is an int field with docValues=true. autoSoftCommit is configured to run every second. \n\nFor the second test, I can\u2019t upload the code because it\u2019s full of customer specific data, but the test is very similar. I took some production queries, which had \u201cintervals\u201d in 6 fields, around 40 \u201cintervals\u201d total (originally using facet queries for each of them). For that test I used a similar bash script to upload data every second too. \n\nI have been testing this code in an environment mirroring production for around 2/3 weeks now and QTimes have improve dramatically (on a multi-shard collection). I haven\u2019t seen errors related to this.  "
        }
    ]
}