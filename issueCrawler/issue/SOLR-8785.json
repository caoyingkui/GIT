{
    "id": "SOLR-8785",
    "title": "Use Metrics library for core metrics",
    "details": {
        "components": [
            "metrics"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "4.1",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The Metrics library (https://dropwizard.github.io/metrics/3.1.0/) is a well-known way to track metrics about applications. \n\nIn SOLR-1972, latency percentile tracking was added. The comment list is long, so here\u2019s my synopsis:\n\n1. An attempt was made to use the Metrics library\n2. That attempt failed due to a memory leak in Metrics v2.1.1\n3. Large parts of Metrics were then copied wholesale into the org.apache.solr.util.stats package space and that was used instead.\n\nCopy/pasting Metrics code into Solr may have been the correct solution at the time, but I submit that it isn\u2019t correct any more. \nThe leak in Metrics was fixed even before SOLR-1972 was released, and by copy/pasting a subset of the functionality, we miss access to other important things that the Metrics library provides, particularly the concept of a Reporter. (https://dropwizard.github.io/metrics/3.1.0/manual/core/#reporters)\n\nFurther, Metrics v3.0.2 is already packaged with Solr anyway, because it\u2019s used in two contrib modules. (map-reduce and morphines-core)\n\nI\u2019m proposing that:\n\n1. Metrics as bundled with Solr be upgraded to the current v3.1.2\n2. Most of the org.apache.solr.util.stats package space be deleted outright, or gutted and replaced with simple calls to Metrics. Due to the copy/paste origin, the concepts should mostly map 1:1.\n\nI\u2019d further recommend a usage pattern like:\nSharedMetricRegistries.getOrCreate(System.getProperty(\u201csolr.metrics.registry\u201d, \u201csolr-registry\u201d))\n\nThere are all kinds of areas in Solr that could benefit from metrics tracking and reporting. This pattern allows diverse areas of code to track metrics within a single, named registry. This well-known-name then becomes a handle you can use to easily attach a Reporter and ship all of those metrics off-box.",
    "attachments": {
        "SOLR-8785-increment.patch": "https://issues.apache.org/jira/secure/attachment/12839863/SOLR-8785-increment.patch",
        "SOLR_8775_rates_per_minute_fix.patch": "https://issues.apache.org/jira/secure/attachment/12840287/SOLR_8775_rates_per_minute_fix.patch",
        "SOLR-8785.patch": "https://issues.apache.org/jira/secure/attachment/12839823/SOLR-8785.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-24T20:56:44+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user randomstatistic opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/25\n\n    SOLR-8785: Use Metrics library for core metrics\n\n    There were three main areas that used the copied classes in org.apache.solr.util.stats:\n\n\tAnalyticsStatisticsCollector\n\tOverseer.Stats\n\tRequestHandlerBase\n\n\n\n    This patch adds depreciation tags to all the copied classes, and also replaces all usage of those classes with classes from the Metrics library.\n    I added one new class (org.apache.solr.util.stats.Metrics) to provide some common access patterns for metrics gathering.\n\n    This patch only adds Registry-based tracking to RequestHandlerBase, although all three areas are a fit for it. The effect is that all one needs to do is add a Reporter to the SharedMetricRegistry named \u201csolr.registry.requesthandler\u201d and all named request handler stats will be exported automatically.\n\n    Compatibility notes:\n\n\tThe \u201ctotalTime\u201d stat has been deleted from all three areas. This never seemed very useful, and Metrics didn\u2019t support it in the Timer class, so it would have required some extra code to keep.\n\tRequestHandler stats are now persistent, and will no longer reset on reload.\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/randomstatistic/lucene-solr metrics_lib\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/25.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #25\n\n\ncommit 77ba4704399ecd5121a6941a3a75c1294172ed21\nAuthor: Jeff Wartes <jeff@lanndark.com>\nDate:   2016-03-16T18:27:35Z\n\n    SOLR-8785 - Upgrade Metrics lib\n\ncommit 9ad3a8179ac446f5820e051802a37bf8b2ba911b\nAuthor: Jeff Wartes <jeff@lanndark.com>\nDate:   2016-03-18T02:46:49Z\n\n    SOLR-8785 - Use the Metrics lib instead of the old classes from the org.apache.solr.util.stats package space.\n\ncommit 6ee11c807aa7432ec02f9ad63aefc7487a02566a\nAuthor: Jeff Wartes <jeff@lanndark.com>\nDate:   2016-03-18T02:55:33Z\n\n    SOLR-8785 - Use persistent, reportable timers for named request handlers\n\n ",
            "id": "comment-15210937"
        },
        {
            "date": "2016-10-21T15:27:28+0000",
            "author": "Shawn Heisey",
            "content": "RequestHandler stats are now persistent, and will no longer reset on reload.\n\nIf I understand this correctly, then I don't think we want to do this.  Perhaps I don't understand it correctly?\n\nThere needs to be a way to reset the statistics to zero.  Reloading the core is currently the way that I do this.  (I'm not running cloud)\n\nI don't want you to think I'm completely against persistence.  The idea is VERY nice, but having it turned on by default could cause issues for users with existing workflows. I think the way to handle this particular feature is:\n\n\n\tIntroduce a new config parameter to enable persistence.  Default the parameter to \"false\".\n\tDiscuss a new default of \"true\" in 7.0.  If consensus is to change the default in master (which probably is a good idea), then enable it in 6.x example configs so it most brand-new setups will use it.\n\n ",
            "id": "comment-15595421"
        },
        {
            "date": "2016-10-21T15:53:25+0000",
            "author": "Jeff Wartes",
            "content": "Providing a way to reset is fine, but I've never been convinced a reload was the right way to do it. We're measuring stats about the RequestHandler, right? Why would we want to lose and rebuild our (weighted-moving-average) p99 latency measurement just because we changed our commit interval or something? ",
            "id": "comment-15595482"
        },
        {
            "date": "2016-10-21T16:09:11+0000",
            "author": "Shawn Heisey",
            "content": "Perhaps it's not the right way, but currently it's the only way I know of.\n\nIn master, defaulting to persistence is probably an excellent option, especially if there is a reset option.  I just worry about causing problems for existing 6.x users.\n\nSo, combining everything into one coherent plan:\n\n\n\tCreate a config option for 6.x to enable persistence, that defaults to false.  Set it to true in 6.x example configs.\n\tAdd CoreAdmin and CollectionsAdmin actions to reset stats to 6.x and master..\n\tIn master, the option to enable persistence will not exist.  Persistence will always be enabled. Users will be able to use the reset action.\n\n ",
            "id": "comment-15595531"
        },
        {
            "date": "2016-10-21T16:55:57+0000",
            "author": "Jeff Wartes",
            "content": "For the record, it looks like I wrote this patch against master, around about version 6.1.\nI recall I had some concern at the time that the metrics namespace generation was too flexible (complicated), so that's something to look at. ",
            "id": "comment-15595671"
        },
        {
            "date": "2016-11-21T13:41:59+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I have an interest in this. I'll take a look at the changes. ",
            "id": "comment-15683596"
        },
        {
            "date": "2016-11-21T16:06:11+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "\n\tThis patch applies on master.\n\tIt also fixes many errors found by precommit.\n\tThe metrics library has removed Timer.getSum method so the \"totalTime\" metric from OverseerStatus API cannot be supported. I think we can live without it. I'll note that in CHANGES.txt\n\tThe classes copied from codahale-metrics have been removed entirely instead of being deprecated.\n\tAlthough I've kept the Metrics class verbatim from the pull request in this patch. I'm inclined to remove most of it since most methods other than addTimerMetrics aren't being used anywhere except in MetricsTest. I'd like to evaluate the changes proposed by Alan in SOLR-4735 instead.\n\n ",
            "id": "comment-15683959"
        },
        {
            "date": "2016-11-21T17:27:58+0000",
            "author": "Jeff Wartes",
            "content": "I'm trying to remember now, but I think the other stuff in that Metrics was largely scaffolding for what I thought would be another jira for exposing a way to register one or more Reporters. I was trying to focus on deleting the copied code here, but the ability to use Reporters was what really drove all this for me.\n\nAs I recall it, my thought was that each logical section of code that tracked metrics would use the namedTimer(String name, String registry) api, (using the section name for the second parameter) and the user could then use properties that manipulate the registry names to choose which sections shared which registries.\nThen, the (say) Overseer could use one registry, and the AnalyticsStatisticsCollector could use another, and you could attach different Reporters to each. Or, you could have both of those places use the same registry, and therefore the same Reporter. \n\nThis is all contingent, naturally, on the registry name being the thing you use to find the registry you want to attach a Reporter to, which could be debated as a best practice. ",
            "id": "comment-15684165"
        },
        {
            "date": "2016-11-21T18:01:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Jeff. I think the bulk of Metrics should be added after we've flushed out the new design for metrics collection either via namedTimer or the way Alan proposed in SOLR-4735. Right now, your/this patch is enough to remove the copied code which is the first step. ",
            "id": "comment-15684257"
        },
        {
            "date": "2016-11-21T18:45:38+0000",
            "author": "Christine Poerschke",
            "content": "Hi Jeff Wartes and Shalin Shekhar Mangar,\n\nin our team one of my colleagues (Kelvin Wong) is currently also working on metrics stuff i.e. we share your interest in this.\n\nThe attached SOLR-8785-increment.patch takes your SOLR-8785.patch from earlier today and adds an adapted version of Kelvin's changes on top of it; summary of the differences:\n\n\tTimerUtils.java as alternative to Metrics.java class\n\tTimerUtilsTest to tie metric names to snapshot accessors\n\tone import reorder (com before org) in RequestHandlerBase.java\n\tobservation: existing code uses both thPcRequestTime and thPctlRequestTime\n\t\n\t\tTimerUtils.java favours the RequestHandlerBase variant and thus changes the OverseerStatusCmd variant since the former seems more widely used.\n\t\n\t\n\n ",
            "id": "comment-15684386"
        },
        {
            "date": "2016-11-21T19:50:39+0000",
            "author": "Walter Underwood",
            "content": "This is great!\n\nI'm going to try using IntrumentedHandler for Jetty from the Codahale library. That might be pretty straightforward, but we'll see.\n\nhttp://metrics.dropwizard.io/3.1.0/manual/jetty/ ",
            "id": "comment-15684545"
        },
        {
            "date": "2016-11-21T19:54:21+0000",
            "author": "Walter Underwood",
            "content": "We built a servlet filter for Tomcat to do this kind of thing. Not too complicated, but I'm not sure how general it is. It also has some New Relic custom metrics.\n\nWe name the metrics as \"corename.response.handlername\". SolrJ goes to /select and sends the handlername in a qt parameter, so we conflate that with requests that go directly to the handler endpoint. ",
            "id": "comment-15684555"
        },
        {
            "date": "2016-11-21T20:41:57+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Christine.\n\nThere was another minor difference between Metrics.java and TimerUtils \u2013 Metrics.addTimerMetrics also adds \"avgRequestsPerMinute\", \"5minRateRequestsPerMinute\" and \"15minRateRequestsPerMinute\" which TimerUtils.addMetrics does not.\n\nThis combined patch keeps the additional stats from Metrics but uses the TimerUtils name as it suggests this class being a utility class instead of a holistic Metrics solution which it isn't \u2013 yet.\n\nThanks for fixing the \"thPcRequestTime\" vs \"thPctlRequestTime\" inconsistency.\n\nI'll commit this and open a few Jiras for further work. ",
            "id": "comment-15684665"
        },
        {
            "date": "2016-11-21T20:48:32+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Walter Underwood \u2013 This was going to be my follow-up issue. I opened SOLR-9788 for using the instrumented jetty classes in Solr. ",
            "id": "comment-15684681"
        },
        {
            "date": "2016-11-21T21:03:41+0000",
            "author": "Jeff Wartes",
            "content": "Understood, I'm all for incremental change, and I don't see \"how to make a Reporter\" as part of this issue. I will be slightly disappointed though, if we convert to the library without also providing a recommended access path for the use of that library. Gathering metrics you can't report on is useless, and one of the things I liked about the original patch was this:\n\n\n    if(this.pluginInfo==null) {\n      // if a request handler has a name, use a persistent, reportable timer under that name\n      if (pluginInfo.name != null)\n        requestTimes = Metrics.namedTimer(Metrics.mkName(this.getClass(), pluginInfo.name), REGISTRY_NAME);\n      this.pluginInfo = pluginInfo;\n    }\n\n\n\nThis meant that I automatically got access to all the relevant metrics for any named request handler, using any Reporters (Log, JMX, Graphite, whatever) I cared to attach. This, in turn, was only possible because all those metrics were in a well-defined and accessible location. ",
            "id": "comment-15684725"
        },
        {
            "date": "2016-11-22T08:13:40+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Yeah, we want to be able to hook different reporters \u2013 but as I said before, I do not want to rush into a solution without giving SOLR-4735 a proper thought. These kind of things are hard to change once they're released because any breaking change makes existing monitoring setups useless. So I want to use your patch as a stepping stone to get rid of the copied classes. It will take multiple focused Jira issues to go all the way. ",
            "id": "comment-15686031"
        },
        {
            "date": "2016-11-22T09:06:07+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "FInal patch. Removed an unused import. Fixed TimerUtilsTest to test all metrics added by TimerUtils except for \"avgRequestsPerMinute\" which can't be tested because it changes with elapsed time.\n\nI'll commit this now. ",
            "id": "comment-15686148"
        },
        {
            "date": "2016-11-22T09:08:19+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ff6da66601ca454941f6e3f0957068f5269319a6 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff6da66 ]\n\nSOLR-8785: Use Dropwizard Metrics library for core metrics ",
            "id": "comment-15686152"
        },
        {
            "date": "2016-11-22T09:24:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2deb900774b2ec56ea54be3c4209f8ad4b83dc99 in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2deb900 ]\n\nSOLR-8785: Use Dropwizard Metrics library for core metrics\n\n(cherry picked from commit ff6da66) ",
            "id": "comment-15686183"
        },
        {
            "date": "2016-11-22T09:31:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 87dc02e3c49eb4b09c12a798790a0475417ff19c in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=87dc02e ]\n\nSOLR-8785: tweak attribution ",
            "id": "comment-15686195"
        },
        {
            "date": "2016-11-22T09:32:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e55742e056661c6e6f6e7a751b2a6e67a5ff1f96 in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e55742e ]\n\nSOLR-8785: tweak attribution ",
            "id": "comment-15686199"
        },
        {
            "date": "2016-11-22T11:30:39+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Jeff, Kelvin and Christine! ",
            "id": "comment-15686483"
        },
        {
            "date": "2016-11-23T14:28:28+0000",
            "author": "Kelvin Wong",
            "content": "Thanks Shalin, Jeff, and Christine!\n\nOne problem I noticed is that Codahale Timers report per-second rates by default. In the patch above, we've wrongly named these rates as per-minute rates in TimerUtils.java. Because we cannot configure the Timer to report on a per-minute basis, I propose we standardize the rates to be reported on a per-second basis. Otherwise, we would need a utility function to do the conversion.\n\nPlease see below for a potential fix. What this means now is that:\n\n\tTimer rates are reported in a standard per-second basis. This changes existing behaviour in OverseerStatusCmd.java which used to report in a per-minute basis.\n\tIn RequestHandlerBase.java and AnalyticsStatisticsCollector.java, the naming of the rates metrics is changed. For example, from '5minRateReqsPerSecond' to '5minRateRequestsPerSecond'. This keeps the naming consistent with the 'avgRequestsPerSecond'.\n\n\n\nsolr/core/src/java/org/apache/solr/util/stats/TimerUtils.java\n\n- lst.add(\"avgRequestsPerMinute\", timer.getMeanRate());\n- lst.add(\"5minRateRequestsPerMinute\", timer.getFiveMinuteRate());\n- lst.add(\"15minRateRequestsPerMinute\", timer.getFifteenMinuteRate());\n+ lst.add(\"avgRequestsPerSecond\", timer.getMeanRate());\n+ lst.add(\"5minRateRequestsPerSecond\", timer.getFiveMinuteRate());\n+ lst.add(\"15minRateRequestsPerSecond\", timer.getFifteenMinuteRate());\n\n\n\nsolr/core/src/test/org/apache/solr/util/stats/TimerUtilsTest.java\n\n- // cannot test avgRequestsPerMinute directly because mean rate changes as time increases!\n- // assertEquals(lst.get(\"avgRequestsPerMinute\"), timer.getMeanRate());\n- assertEquals(lst.get(\"5minRateRequestsPerMinute\"), timer.getFiveMinuteRate());\n- assertEquals(lst.get(\"15minRateRequestsPerMinute\"), timer.getFifteenMinuteRate());\n+ // cannot test avgRequestsPerSecond directly because mean rate changes as time increases!\n+ // assertEquals(lst.get(\"avgRequestsPerSecond\"), timer.getMeanRate());\n+ assertEquals(lst.get(\"5minRateRequestsPerSecond\"), timer.getFiveMinuteRate());\n+ assertEquals(lst.get(\"15minRateRequestsPerSecond\"), timer.getFifteenMinuteRate());\n\n ",
            "id": "comment-15690240"
        },
        {
            "date": "2016-11-23T16:11:08+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Kelvin, I'll fix. ",
            "id": "comment-15690566"
        },
        {
            "date": "2016-11-23T17:36:25+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I think we should keep our per minute rates because this is a back-compat break for everyone who uses these values. This isn't just limited to Overseer Status; the handler statistics also return these values.\n\nThis patch adds a helper function in TimerUtils called convertRateToPerMinute which performs the conversion. ",
            "id": "comment-15690824"
        },
        {
            "date": "2016-11-23T17:41:31+0000",
            "author": "Kelvin Wong",
            "content": "I think the RequestHandlerBase and AnalyticsStatisticsCollector previously used per-second rates; only the OverseerStatusCmd uses per-minute rates. Standardizing all rates to per-minute will break backwards compatibility with those classes. Apologies for not being clearer earlier. ",
            "id": "comment-15690859"
        },
        {
            "date": "2016-11-23T17:41:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit dab2e2465697f2318c9d02c7e423ca1fd0a7488b in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dab2e24 ]\n\nSOLR-8785: Convert rates to be per minute from the default per second rates reported by the metrics library ",
            "id": "comment-15690861"
        },
        {
            "date": "2016-11-23T17:43:44+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Ah, I was too eager to commit. You are right, I overlooked that (again). In that case you are right and we should standardize on per-second rates everywhere. I'll fix. ",
            "id": "comment-15690864"
        },
        {
            "date": "2016-11-23T17:51:00+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f8fa2e998d094223702e12d7bd8a84985859a747 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f8fa2e9 ]\n\nSOLR-8785: Use per-second rates for consistency in all stats outputs ",
            "id": "comment-15690884"
        },
        {
            "date": "2016-11-23T17:53:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit df242c8437351112e11b9de441ae86f065919878 in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=df242c8 ]\n\nSOLR-8785: Convert rates to be per minute from the default per second rates reported by the metrics library\n\n(cherry picked from commit dab2e24) ",
            "id": "comment-15690888"
        },
        {
            "date": "2016-11-23T17:53:26+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8a5bb46663be7bece756f83e1005821ded337647 in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8a5bb46 ]\n\nSOLR-8785: Use per-second rates for consistency in all stats outputs\n\n(cherry picked from commit f8fa2e9) ",
            "id": "comment-15690889"
        },
        {
            "date": "2016-11-23T17:55:35+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks for the review, Kelvin! ",
            "id": "comment-15690893"
        },
        {
            "date": "2016-11-23T18:57:29+0000",
            "author": "Kelvin Wong",
            "content": "No problem! Great to see this resolved. ",
            "id": "comment-15691044"
        }
    ]
}