{
    "id": "LUCENE-4087",
    "title": "Provide consistent IW behavior for illegal meta data changes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "4.1",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently IW fails late and inconsistent if field metadata like an already defined DocValues type or \"un\"-omitting norms.\n\n\nwe can approach this similar to how we handle consistent field number and:\n\n\n\tthrow exception if indexOptions conflict (e.g. omitTF=true versus\nfalse) instead of silently dropping positions on merge\n\tsame with omitNorms\n\tsame with norms types and docvalues types\n\tstill keeping field numbers consistent\n\n\n\nthis way we could eliminate all these traps and just give an\nexception instead.",
    "attachments": {
        "LUCENE-4087.patch": "https://issues.apache.org/jira/secure/attachment/12531376/LUCENE-4087.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-08T07:39:10+0000",
            "content": "After talking about this to other committers during the conference I think this is really a bit more controversial than it seemed. Except of the DocValues behavior this all is pre-existing behavior. The discussion is similar to changing norms through IR and removing that capability did bring up some hard discussions. Yet, I think we should only solve the DocValues issue in the least intrusive way and discuss the omitNorms & IndexOptions behavior in a different issue. If we make all this throwing exceptions we almost introduce a schema here which makes lucene 4.0 very different in terms of RT behavior compared to previous versions. ",
            "author": "Simon Willnauer",
            "id": "comment-13291600"
        },
        {
            "date": "2012-06-08T07:44:31+0000",
            "content": "This patch implements a solution for docvalues that tries best effort if and only if the given value can be indexed without loosing any information. The DV type of the indexed field might be different to the \"stored\" one but we won't loose any information. This patch also handles this per DWPT and not global. The idea is that type promotion will fix the diverging types during merges but we guarantee persistence per segment. \n\nfor example if somebody indexed VAR_INTS but adds a FIXED_INT_* afterwards it should work just fine. While if somebody starts with FIXED_INT_8 and moves up to FIXED_INT_16 IW throws a IllegalArgumentException.\n\nThe patch is still missing javadocs here and there but given the controversial nature of this issue I wanna put it up for discusssion. ",
            "author": "Simon Willnauer",
            "id": "comment-13291604"
        },
        {
            "date": "2012-06-08T07:59:13+0000",
            "content": "I like this approach:\n\n\n\tI think we should not view this behavior as fixed in stone. If we decide in the future we should\n  be able to change this kind of stuff in even a minor release if we feel like it. DocValues is a \n  typed field (thats its whole point!) and you shouldnt be mixing up types.\n\tI think we should fix this in the way you propose so we can get a 4.0 alpha release out!\n\n\n\nSome comments:\n\n\n\tI think we don't need anything like this in NormsConsumer, because it looks like we have a check\n  already for this... right? Of course its much trickier for someone to changeup types there.\n\tI think somewhere in the documentation we should have a line of javadoc \"docvalues are a typed\n  field, if you mix up types the end result is undefined\". This way we don't have to commit to\n  any specific behavior as mentioned above.\n\n ",
            "author": "Robert Muir",
            "id": "comment-13291613"
        },
        {
            "date": "2012-06-08T12:30:40+0000",
            "content": "I think this is a good baby step for 4.0.\n\nBut I think it's important the javadocs make it clear that if you change up the DV type for a given field, the behavior is undefined and we are free to improve it in the future.\n\nIdeally I think apps should get clear exceptions on attempting to index a doc with an incompatible change to anything that is our effective schema (omitNorms, indexOptions, DV types, etc.).  For example, if a given field already omitNorms and you try to add a doc with that field not omitting norms, you should get a clear exception (it can only be an app bug, because on merge the norms will silently go away).  But let's open a separate issue for that... ",
            "author": "Michael McCandless",
            "id": "comment-13291742"
        },
        {
            "date": "2012-06-08T15:44:30+0000",
            "content": "here is a new patch adding documentation to DocValues.java & a reference to all DV Fields. I added a bunch of tests including verification test that changing norms types actually fails. I extended the type promoter a little to actually promote INT_16 & INT_8 to Float32 if needed as well as INT_32 to FLOAT_64.\n\nI think its ready ",
            "author": "Simon Willnauer",
            "id": "comment-13291825"
        },
        {
            "date": "2012-06-08T19:54:43+0000",
            "content": "Patch looks good.  +1\n\nI think this patch now means that, depending on when flushes kick in,\nyou can sometimes apparently succeed in changing DV type for a field\n(though on merge something strange can happen, eg suddenly \"upgrading\"\nto a BYTES_XXX type) and other times hit an exception?  Like the error\nchecking is now \"intermittent\" as seen from the app?  You might think\neverything is OK, push to production, and later (in production) hit a\nnew exception...\n\nI think that's actually OK for now (this is all\nbest effort)... but I think we should clean this up (can come after 4.0)\nso that the checking is consistent.\n\nCan we shorten the javadoc to simply state \"Changing the DocValue type\nfor a given field is not supported.\"?  Sure we make best effort to\n\"recover\" today but I don't think we should detail particulars of the\nspecific best effort we're doing in 4.0? ",
            "author": "Michael McCandless",
            "id": "comment-13291937"
        },
        {
            "date": "2012-06-08T20:00:23+0000",
            "content": "nit: loosing -> losing in DocValues.java javadocs ",
            "author": "Robert Muir",
            "id": "comment-13291940"
        },
        {
            "date": "2012-06-08T20:07:39+0000",
            "content": "\nCan we shorten the javadoc to simply state \"Changing the DocValue type\nfor a given field is not supported.\"? Sure we make best effort to\n\"recover\" today but I don't think we should detail particulars of the\nspecific best effort we're doing in 4.0?\n\nI am not sure if we should say that since its not true. you can safely change a float into a double and if you reindex all documents you will eventually converge to double. Same is true for Sorted and go from fixed to variable or extend the precision of an integer. I think its just fair to document that. if we can change it in future releases is a different thing. ",
            "author": "Simon Willnauer",
            "id": "comment-13291946"
        },
        {
            "date": "2012-06-08T20:33:38+0000",
            "content": "OK I guess that makes sense.  Basically we sign up, now, to allow certain DV type changes in the schema, just like how we allow omitNorms to change from false to true, but not vice/versa. ",
            "author": "Michael McCandless",
            "id": "comment-13291972"
        },
        {
            "date": "2012-06-08T21:09:12+0000",
            "content": "committed to trunk and 4x ",
            "author": "Simon Willnauer",
            "id": "comment-13291991"
        },
        {
            "date": "2013-05-10T10:33:33+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653960"
        }
    ]
}