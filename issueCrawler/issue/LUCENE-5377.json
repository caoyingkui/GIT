{
    "id": "LUCENE-5377",
    "title": "IW.addIndexes(Dir[]) causes silent index corruption",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/index"
        ],
        "affect_versions": "4.6",
        "status": "Closed",
        "fix_versions": [
            "4.6.1",
            "4.7",
            "6.0"
        ]
    },
    "description": "my old facet index create by Lucene version=4.2\nuse indexChecker ok.\n\nnow I upgrade to Lucene 4.6 and put some new records to index.\nthen reopen index, some files in indexdir missing....\nno .si files.\n\nI debug into it,  new version format of segments.gen(segments_N) record bad segments info.",
    "attachments": {
        "TestCore_46.java": "https://issues.apache.org/jira/secure/attachment/12624132/TestCore_46.java",
        "LUCENE-5377.patch": "https://issues.apache.org/jira/secure/attachment/12624355/LUCENE-5377.patch",
        "TestCore_45.java": "https://issues.apache.org/jira/secure/attachment/12624131/TestCore_45.java"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13856110",
            "author": "Littlestar",
            "content": "Lucene 4.5/4.5.1 is ok.\nbut failed in 4.6.0 ",
            "date": "2013-12-24T04:07:25+0000"
        },
        {
            "id": "comment-13877492",
            "author": "Littlestar",
            "content": "reproduce steps:\n1. run TestCore_45 in luence 4.5.1, it will generate a index TestCore_45/data/taxo.\n2. copy TestCore_45/data/taxo into TestCore_46/data/taxo.\n3. run TestCore_46 in luence 4.6.0.\nyou will see the following errors.\nException in thread \"main\" java.io.FileNotFoundException: xception in thread \"main\" java.io.FileNotFoundException: G:\\JavaWorkspace\\bug_test\\Lucene_46\\data\\taxo_2.si (.........)\n\tat java.io.RandomAccessFile.open(Native Method)\n\tat java.io.RandomAccessFile.<init>(RandomAccessFile.java:233)\n\tat org.apache.lucene.store.FSDirectory$FSIndexInput.<init>(FSDirectory.java:388)\n\tat org.apache.lucene.store.SimpleFSDirectory$SimpleFSIndexInput.<init>(SimpleFSDirectory.java:103)\n\tat org.apache.lucene.store.SimpleFSDirectory.openInput(SimpleFSDirectory.java:58)\n\tat org.apache.lucene.codecs.lucene40.Lucene40SegmentInfoReader.read(Lucene40SegmentInfoReader.java:51)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:340)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:404)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:843)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:694)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:400)\n\tat org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.readCommitData(DirectoryTaxonomyWriter.java:138)\n\tat org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.<init>(DirectoryTaxonomyWriter.java:222)\n\tat org.apache.lucene.facet.taxonomy.directory.DirectoryTaxonomyWriter.<init>(DirectoryTaxonomyWriter.java:331)\n\tat TestCore_46$1.<init>(TestCore_46.java:27)\n\tat TestCore_46.open(TestCore_46.java:27)\n\tat TestCore_46.main(TestCore_46.java:75)\n\n\n============================== ",
            "date": "2014-01-21T14:17:24+0000"
        },
        {
            "id": "comment-13878294",
            "author": "Littlestar",
            "content": "I debug into it, Lucene 4.6's new format of segments.gen(segments_N) record bad segments info. ",
            "date": "2014-01-22T05:52:17+0000"
        },
        {
            "id": "comment-13878572",
            "author": "Michael McCandless",
            "content": "Indeed, something is wrong here.\n\nIf I fix DirectoryTaxonomyWriter to use IW.addIndexes(IR[]) instead of IW.addIndexes(Directory[]) then the test \"passes\".  The bug is due to this code in IndexWriter.addIndces(Dir[]):\n\n\n    TrackingDirectoryWrapper trackingDir = new TrackingDirectoryWrapper(directory);\n    try {\n      newInfo.getCodec().segmentInfoFormat().getSegmentInfoWriter().write(trackingDir, newInfo, fis, context);\n    } catch (UnsupportedOperationException uoe) {\n      // OK: 3x codec cannot write a new SI file;\n      // SegmentInfos will write this on commit\n    }\n\n\n\nThe problem is ... this logic is wrong: the segment was written with Lucene40SegmentInfoFormat, which works in 4.5.x but in 4.6.x we upgraded this to Lucene46SIFormat... ",
            "date": "2014-01-22T12:00:05+0000"
        },
        {
            "id": "comment-13878604",
            "author": "Shai Erera",
            "content": "Isn't it then a problem of anyone that will try to addIndexes a pre-4.6 index to a 4.6+?\n\nI looked at TestBackCompat.addOldIndexes - it doesn't do anything with the added index to verify it's OK. I added DirectoryReader.open(targetDir).close(); to the test after w.close(), so at least we verify the index can be opened, but the test doesn't fail, not sure why. The newest \"oldNames\" is 4.2 - shouldn't a 4.5 have been created when we released 4.6, since we changed the index format? But then a 4.0/4.2 index should equally fail to be added to a 4.6, right? So maybe this doesn't explain the failure to reproduce this error... ",
            "date": "2014-01-22T12:43:40+0000"
        },
        {
            "id": "comment-13878686",
            "author": "Robert Muir",
            "content": "First of all, some test should fail.\n\nIndexWriter.addIndexes(Dir) is so dangerous...\n\nTo fix the bug, i think we have to support write logic in the old .si writer? And only allow the UOE if its really 3.x codec...\n\nLong term this is bogus. We should either remove IndexWriter.addIndexes(Dir) or change things so it doesnt need to write .si at all here (e.g. put partial filenames in the .si that don't include segment prefix) ",
            "date": "2014-01-22T14:32:17+0000"
        },
        {
            "id": "comment-13878701",
            "author": "Shai Erera",
            "content": "First of all, some test should fail.\n\nI modified TestBackCompatibility.testAddIndexes to do this:\n\n\nboolean orig = OLD_FORMAT_IMPERSONATION_IS_ACTIVE;\nOLD_FORMAT_IMPERSONATION_IS_ACTIVE = false;\n// test code goes here\nOLD_FORMAT_IMPERSONATION_IS_ACTIVE = orig;\n\n\n\nAnd now it fails, because writing with old Codecs is not supported. Maybe it cannot be done like that for 4x because we need to support 3x indexes, but I haven't tried (because in 4x we catch and ignore the UOE, so I don't know yet how it will affect the test).\n\nor change things so it doesnt need to write .si at all here (e.g. put partial filenames in the .si that don't include segment prefix)\n\nThat's a good idea - if we strip the segment name from the files .si records (which is redundant anyway!), we won't need to rewrite .si. I believe though that we should fix this in 4.6.1? ",
            "date": "2014-01-22T14:37:27+0000"
        },
        {
            "id": "comment-13878709",
            "author": "Robert Muir",
            "content": "\nAnd now it fails, because writing with old Codecs is not supported. Maybe it cannot be done like that for 4x because we need to support 3x indexes, but I haven't tried (because in 4x we catch and ignore the UOE, so I don't know yet how it will affect the test).\n\nOh, thanks for investigating. Now i understand how it got thru the tests. Impersonation masked the bug!!!!\n\n\nThat's a good idea - if we strip the segment name from the files .si records (which is redundant anyway!), we won't need to rewrite .si. I believe though that we should fix this in 4.6.1?\n\nBut thats the long-term fix. For the short term i think we should just allow the old .si format to be written. Very simple, very clean and conservative solution, just not elegant at all.\n\nYes, this is a corruption issue. I really think we should respin 4.6.1 for this. ",
            "date": "2014-01-22T14:42:59+0000"
        },
        {
            "id": "comment-13878719",
            "author": "Shai Erera",
            "content": "For the short term i think we should just allow the old .si format to be written.\n\nYou mean to temporarily restore Lucene40SIWriter? That will also fix it  ",
            "date": "2014-01-22T14:48:03+0000"
        },
        {
            "id": "comment-13878720",
            "author": "Robert Muir",
            "content": "Exactly. I think this (and fixing the test bugs here), is all we should do for 4.6.1 here, lets do the segment-stripping separately? ",
            "date": "2014-01-22T14:51:40+0000"
        },
        {
            "id": "comment-13878725",
            "author": "Michael McCandless",
            "content": "I think this (and fixing the test bugs here), is all we should do for 4.6.1 here, lets do the segment-stripping separately?\n\n+1 ",
            "date": "2014-01-22T14:55:36+0000"
        },
        {
            "id": "comment-13878726",
            "author": "Shai Erera",
            "content": "OK let's fix it separately. A new Codec ... just the thought ... ",
            "date": "2014-01-22T14:55:40+0000"
        },
        {
            "id": "comment-13878732",
            "author": "Robert Muir",
            "content": "the test infra is really screwed up here! There might be more hidden bugs! ",
            "date": "2014-01-22T15:02:26+0000"
        },
        {
            "id": "comment-13878747",
            "author": "Robert Muir",
            "content": "Here is a patch.\n\nSomehow, this impersonation flag dangerously got turned on by default.\nThats the root cause of the test issue.\n\nSome tests that explicitly create old codecs for writing will fail with the patch. We have to fix them to use the boolean. ",
            "date": "2014-01-22T15:14:21+0000"
        },
        {
            "id": "comment-13878764",
            "author": "Shai Erera",
            "content": "I guess I messed this up when working on LUCENE-5196, turning impersonation to true by default. Sorry about that, hope it won't impact a lot of tests. ",
            "date": "2014-01-22T15:33:55+0000"
        },
        {
            "id": "comment-13878766",
            "author": "Robert Muir",
            "content": "I fixed all these tests here.\n\nSo this patch fixes the disease (in the test infra), and fixes 4.0 SIFormat to be able to write .si just for this purpose.\n\nThe bug does not really impact trunk, as it didnt have the dangerous 'catch UOE', on trunk the bug is the user would get an actual UOE. But this is fixed, as now the SIFormat can write.\n\nI think this patch is ready: for the backport we have to ensure we only \"hide\" that UOE if its really Lucene3x, so an instanceof is really needed there. ",
            "date": "2014-01-22T15:38:13+0000"
        },
        {
            "id": "comment-13878773",
            "author": "Michael McCandless",
            "content": "+1, looks good. ",
            "date": "2014-01-22T15:45:17+0000"
        },
        {
            "id": "comment-13878778",
            "author": "Shai Erera",
            "content": "+1, looks good! ",
            "date": "2014-01-22T15:53:28+0000"
        },
        {
            "id": "comment-13878790",
            "author": "Robert Muir",
            "content": "I opened a followup issue (LUCENE-5412) for the \"correct\" fix. But this one is too dangerous IMO for a bugfix release. ",
            "date": "2014-01-22T16:03:09+0000"
        },
        {
            "id": "comment-13878800",
            "author": "ASF subversion and git services",
            "content": "Commit 1560401 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1560401 ]\n\nLUCENE-5377: IW.addIndexes(Dir[]) causes silent index corruption ",
            "date": "2014-01-22T16:14:18+0000"
        },
        {
            "id": "comment-13878805",
            "author": "ASF subversion and git services",
            "content": "Commit 1560405 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1560405 ]\n\nLUCENE-5377: remove dead code ",
            "date": "2014-01-22T16:18:35+0000"
        },
        {
            "id": "comment-13878808",
            "author": "Robert Muir",
            "content": "Give me some time with the backport, i dont want to introduce another bug here. Will get this all resolved in a few hours. ",
            "date": "2014-01-22T16:20:54+0000"
        },
        {
            "id": "comment-13878849",
            "author": "ASF subversion and git services",
            "content": "Commit 1560421 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1560421 ]\n\nLUCENE-5377: IW.addIndexes(Dir[]) causes silent index corruption ",
            "date": "2014-01-22T17:13:51+0000"
        },
        {
            "id": "comment-13878850",
            "author": "Robert Muir",
            "content": "I'll let Jenkins play with the 4.x backport for just a bit before merging back to the release branch. ",
            "date": "2014-01-22T17:14:25+0000"
        },
        {
            "id": "comment-13878885",
            "author": "Robert Muir",
            "content": "Here is the 4.x backport for review: http://svn.apache.org/r1560421\n\nI'm gonna run the tests a few times more and merge to 4.6 branch ",
            "date": "2014-01-22T17:38:48+0000"
        },
        {
            "id": "comment-13879024",
            "author": "ASF subversion and git services",
            "content": "Commit 1560477 from Robert Muir in branch 'dev/branches/lucene_solr_4_6'\n[ https://svn.apache.org/r1560477 ]\n\nLUCENE-5377: IW.addIndexes(Dir[]) causes silent index corruption ",
            "date": "2014-01-22T19:04:15+0000"
        },
        {
            "id": "comment-13879025",
            "author": "Robert Muir",
            "content": "Thank you very much Littlestar. What a terrible bug! ",
            "date": "2014-01-22T19:04:50+0000"
        },
        {
            "id": "comment-13879383",
            "author": "Littlestar",
            "content": "The patch works well for me, Thanks. ",
            "date": "2014-01-23T02:27:59+0000"
        }
    ]
}