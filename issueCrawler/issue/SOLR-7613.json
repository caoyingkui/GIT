{
    "id": "SOLR-7613",
    "title": "solrcore.properties file should be loaded if it resides in ZooKeeper",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The solrcore.properties file is used to load user defined properties for use primarily in the solrconfig.xml file, though this properties file will only load if it is resident in the core/conf directory on the physical disk, it will not load if it is in ZK's core/conf directory. There should be a mechanism to allow a core properties file to be specified in ZK and can be updated appropriately along with being able to reload the properties when the file changes (or via a core reload).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-04T21:55:09+0000",
            "author": "Hoss Man",
            "content": "Some relevant comments on this from the original mailing list discussion...\n\nHoss..\n\nIIUC CoreDescriptor.loadExtraProperties is the relevent method ... it would need to build up the path including the core name and get the system level resource loader (CoreContainer.getResourceLoader()) to access it since the core doesn't exist yet so there is no core level ResourceLoader to use.\n\nAlan...\n\nI think this is an oversight, rather than intentional (at least, I certainly didn't intend to write it like this!). The problem here will be that CoreDescriptors are currently built entirely from core.properties files, and the CoreLocators that construct them don't have any access to zookeeper.\n\nMaybe the way forward is to move properties out of CoreDescriptor and have an entirely separate CoreProperties object that is built and returned by the ConfigSetService, and that is read via the ResourceLoader.  This would fit in quite nicely with the changes I put up on SOLR-7570, in that you could have properties specified on the collection config overriding properties from the configset, and then local core-specific properties overriding both.\n\nHoss...\n\nBut they do have access to the CoreContainer which is passed to the CoreDescriptor constructor \u2013 it has all the ZK access you'd need at the time when loadExtraProperties() is called.\n\nAlan...\n\nYeah, you could do it like that.  But looking at it further, I think solrcore.properties is actually being loaded in entirely the wrong place - it should be done by whatever is creating the CoreDescriptor, and then passed in as a Properties object to the CD constructor.  At the moment, you can't refer to a property defined in solrcore.properties within your core.properties file.\n\nHoss...\n\nbut if you look at it fro ma historical context, that doesn't really  matter for the purpose that solrcore.properties was intended for \u2013 it  predates core discover, and was only intended as a way to specify \"user\" level properties that could then be substituted in the solrconfig.xml or dih.xml or schema.xml\n\nie: making it possible to use a solrcore.prop value to set a core.prop value might be a nice to have, but it's definitely not what it was intended for, so it shouldn't really be a blocker to getting the same (original) basic functionality working in SolrCloud.\n\n\n\nHonestly, even ignoring the historical context, it seems like a chicken and egg problem to me \u2013 should it be possible to use a solrecore.properties variable to set the value of another variable in core.properties? or should it be possible to use a core.properties variable to set the value of another variable in solrcore.properties?\n\nthe simplest thing for people to udnerstand would probably be to just say that they are independent, loaded seperately, and cause an error if you try to define the same value in both (i doubt that's currently enforced, but it probably should be) ",
            "id": "comment-14573660"
        },
        {
            "date": "2015-06-05T09:38:57+0000",
            "author": "Alan Woodward",
            "content": "I've been playing around with this a bit, and have come up with the following solution: the extra properties are loaded by the SolrResourceLoader, rather than in CoreDescriptor, which means that it's automatically loaded from the 'correct' place (and will allow overriding and editing when SOLR-7570 is in).  Properties are only actually used by the resource loader, so there's no particular need for them to be available via CoreDescriptor anyway.\n\nI should have a patch to upload early next week. ",
            "id": "comment-14574208"
        },
        {
            "date": "2015-06-06T19:58:53+0000",
            "author": "Noble Paul",
            "content": "Let's get rid of solrcore.properties in cloud . We don't need it. It is not just reading that thing. We need to manage the lifecycle as well (editing, refreshing etc)\n\n\nThis is the right way to do properties in solrcloud\n\nhttps://cwiki.apache.org/confluence/display/solr/Config+API#ConfigAPI-CommandsforUser-DefinedProperties ",
            "id": "comment-14575908"
        },
        {
            "date": "2015-06-06T20:03:56+0000",
            "author": "Noble Paul",
            "content": "In my particular case the core won't load without some of the properties being specified. Is there a way to get those properties into ZK before you even create the new collection? It looks like you are adding properties to an already existing collection...\n\nIn these cases we normally provide a sane default in the config. \n\nexample \n{prop_name:prop_default_val}\n\nAfter the core is loaded you can use the config api to update the values \n\nThe other option is to write the configoverlay.json directly to ZK before creating the collection , till we have a way to handle these outside of the collection ",
            "id": "comment-14575915"
        },
        {
            "date": "2015-08-26T13:14:23+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk move to 5.4 after 5.3 release. ",
            "id": "comment-14713372"
        },
        {
            "date": "2015-09-08T21:37:07+0000",
            "author": "Steve Davids",
            "content": "I went ahead and swapped our solrcore.properties over to configoverlay.json and it worked like a champ. Using the API we had the chicken before the egg problem where the core wouldn't come up unless we had some properties specified but we couldn't specify the properties without having the core up and running. Thanks for the suggestion Noble Paul, I think this ticket is safe to be withdrawn. ",
            "id": "comment-14735665"
        },
        {
            "date": "2016-07-28T16:09:20+0000",
            "author": "David Smiley",
            "content": "I agree with Noble Paul that solrcore.properties ought to be considered deprecated, and removed from 7x.\nI improved the documentation here to make config overlay more obvious https://cwiki.apache.org/confluence/display/solr/Configuring+solrconfig.xml and to steer people away from solrcore.properties. ",
            "id": "comment-15397735"
        }
    ]
}