{
    "id": "SOLR-10778",
    "title": "Address precommit WARNINGS",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "4.6",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "During precommit we are seeing lots of warnings. Im turning this into an umbrella issue about getting precommit warnings out of the code in general. Yes, this will take a while.\n\nSee SOLR-10809 for getting all warnings out of solr/core. I want to selectively have precommit fail when \"some part\" of the code is clean so we don't backslide, and solr/core was the finest granularity I could see how to change.\n\nIf you read more of the comments here, you can see that there are some serious code refactoring that could be done. I'm electing to simply SuppressWarnings rather than re-arrange code at this point whenever the code is tricky. If anyone goes back in and tries to clean the code up, then can remove the annotation(s).",
    "attachments": {
        "dated-warnings": "https://issues.apache.org/jira/secure/attachment/12875260/dated-warnings",
        "dated-warnings.log": "https://issues.apache.org/jira/secure/attachment/12875259/dated-warnings.log",
        "notclosed.txt": "https://issues.apache.org/jira/secure/attachment/12870507/notclosed.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-31T04:35:49+0000",
            "content": "I was looking at this too a little today, and it's tricky. Some things should be changed I think, but it'll be a case-by-case sort of thing. By my count there are 386 warnings in the code base about failing to close something, See the file I'll attach in a minute.\n\nFor instance, there's this pattern:\n\n JavaBinCodec codec = new JavaBinCodec();\n    codec.marshal(nl, os);\n\nthat generates one of these warnings since JavaBinCodec implements Closeable.\n\nBut \"codec.marshal()\" calls \"codec.finish()\" which in turn calls \"codec.close()\" which tests a flag and conditionally calls \"codec.finish()\" which sets the flag that's checked in \"codec.close()\" so it doesn't get into an infinite loop. No, I don't want to clarify that....\n\nI think having marshal() have this side-effect is trappy, I'd much rather see a try-with-resources:\ntry (JavaBinCodec codec = new JavaBinCodec()) {\n    codec.marshal(nl, os);\n}\nand the marshal() code just do it's thing and the code in finish() just be moved to close(). The marshal() code is not robust anyway:\n  public void marshal(Object nl, OutputStream os) throws IOException {\n    initWrite(os);\n    try \n{\n      writeVal(nl);\n    }\n finally \n{\n      finish();\n    }\n  }\n\nif an error is thrown from initWrite finish (and thus close) won't be called and this would be a resource leak.\n****************\nI was about to write that one of the classes that has this a lot is IndexWriter and constructs like \"RefCounted<IndexWriter> iw = solrCoreState.getIndexWriter(core);\" scare me. But looking more closely, almost all of the warnings are in test files and the code that constructs an IndexWriter but doesn't close it so it'd probably be safe to try-with-resources on it (or other). This wouldn't affect the running Solr since it's test code though, so this is largely cosmetic.\n\n*******************\n\nSince there are so many warnings, and since (I'd think) there will be some classes that lend themselves to clean up and some that don't, maybe the best thing to do would be to create sub-jiras for bite-sized chunks and link them here. That way we can have a sanity check for classes that people know are tricky. \n\nI'll kick one off for JavaBinCodec.\n\n************\n ",
            "author": "Erick Erickson",
            "id": "comment-16030619"
        },
        {
            "date": "2017-05-31T04:39:39+0000",
            "content": "File with warnings about not closed objects (and probably other WARNINGS to) from precommit. ",
            "author": "Erick Erickson",
            "id": "comment-16030621"
        },
        {
            "date": "2017-05-31T15:12:02+0000",
            "content": "So I worked through the warnings relating to JavaBinCodec last night. Most of them were in tests but a few others were concerning. My guess is that since new JavaBinCodec().marshal \"did the right thing\", lead to code that used the same pattern with unmarshal, which does not call finish. See BinaryResponseWriter.getParsedResponse.\n\nAnyway, that leads to several questions:\n1> Is this worth pursuing? I strongly favor having the compiler help me all it can. I've picked on JavaBinCodec since it's the first one I saw, but there are others.\n2> Let's claim we get almost all of our warnings gone . Can we tag allowable instances of not closing a resource so precommit lets them by but fail any others? See below.\n3> On a quick scan, the overwhelming majority of these are in tests. How much effort do we want to expend in the tests? And could/should my hypothetical \"fail precommit\" bits somehow skip tests?\n\nThere's this code in SegmentReader. The line I've tagged with //HERE complains \"'dir' is not closed at this location\". And it shouldn't be.\n\n  private DocValuesProducer initDocValuesProducer() throws IOException {\n    final Directory dir = core.cfsReader != null ? core.cfsReader : si.info.dir;\n\n    if (!fieldInfos.hasDocValues()) {\n      return null; //HERE\n    } else if (si.hasFieldUpdates()) {\n      return new SegmentDocValuesProducer(si, dir, core.coreFieldInfos, fieldInfos, segDocValues);\n    } else {\n      // simple case, no DocValues updates\n      return segDocValues.getDocValuesProducer(-1L, si, dir, fieldInfos);\n    }\n  }\n\n\n\nFinally, note that I am NOT advocating implementing complex rewrites just to make lint happy. OTOH, I AM strongly in favor of taking advantage of all the automated tools we can. If there's a good reason to not close a resource (the code snippet above is an example) we need to just be able to tag it. What I'm hoping for is a way to help me not make mistakes either through carelessness or lack of understanding. But if we go through the effort of cleaning all this up, I'd really like a way to not have the problem creep back. ",
            "author": "Erick Erickson",
            "id": "comment-16031317"
        },
        {
            "date": "2017-05-31T17:11:26+0000",
            "content": "I'm looking forward to seeing this addressed in some way.  We should be using try-finally wherever reasonably possible... and avoid having code expectations where it's some collaborator's job to close a resource that it didn't itself create.  +1 overall to Erick's sentiments. ",
            "author": "David Smiley",
            "id": "comment-16031538"
        },
        {
            "date": "2017-05-31T19:06:02+0000",
            "content": "Oh, the poorly named \"notclosed.txt\" file contains all of the warnings, not just the 386 number came from grepping for \"closed\" and counting. There are other lint warnings in there as Christine Poerschke points out in SOLR-10790. ",
            "author": "Erick Erickson",
            "id": "comment-16031750"
        },
        {
            "date": "2017-06-04T04:41:34+0000",
            "content": "Looking at this some more. Approximate counts:\n\nTotal precommit WARNING messages: 350 (after patch for JavaBinCodec)\nTotal precommit WARNING messages in test files: 306.\n\nI looked at a couple of the 44 messages from non-test files and some look like false hits vis-a-vis the WARNING messages. For instance this warning in IndexWriter.java\n\n [ecj-lint] 2. WARNING in /Users/Erick/apache/solrJiras/jiramaster/lucene/core/src/java/org/apache/lucene/index/IndexWriter.java (at line 4320)\n [ecj-lint] \tnewReader = new SegmentReader(info, reader, liveDocs, info.info.maxDoc() - delCount);\n [ecj-lint] \t^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n [ecj-lint] Resource leak: 'newReader' is never closed\n\n\n\nOK, here's the code: \n\n          SegmentReader newReader;\n\n          synchronized (this) {\n            // We must also sync on IW here, because another thread could be writing\n            // new DV updates / remove old gen field infos files causing FNFE:\n            newReader = new SegmentReader(info, reader, liveDocs, info.info.maxDoc() - delCount);\n          }\n\n          boolean released = false;\n          try {\n            rld.release(reader);\n            released = true;\n          } finally {\n            if (!released) {\n              newReader.decRef();\n            }\n          }\n          reader = newReader;\n\n\n\nGiven the decref and assigning around of the variables, I think this WARNING message is bogus. I'd pretty much guarantee that this code toke some significant effort to get right, not going to touch that without guidance.\n\nSo here's what I propose. I'll take the lead in getting the warnings out of the test code. I may well find stuff I can't figure out, but the huge majority of that is secretarial work. All help appreciated!!!\n\nOnce that's done and we'll have a reasonable number of non-test file WARNINGs to work on and I'll ask people familiar with that code to render an opinion.\n\nIt's clear we'll need a way to flag the linter to not warn about \"resource leaks\" that really aren't if we're going to get this clean.\n\nAnd when all that's done, we should fail the build on lint WARNINGs.\n\nI'll create two more JIRAs for this and link them in.\n\nPLEASE, PLEASE, PLEASE weigh in if you think this is wasted effort! It'll be quite a bit of scut work, but I do think it would be A Good Thing to get these out. I've already found a couple of things that are suspect... ",
            "author": "Erick Erickson",
            "id": "comment-16036163"
        },
        {
            "date": "2017-06-12T22:22:40+0000",
            "content": "Erick Erickson - I think taking care of the warnings is a hugely valuable thing, despite being unglamorous. ",
            "author": "Mike Drob",
            "id": "comment-16047142"
        },
        {
            "date": "2017-06-12T22:56:05+0000",
            "content": "I'm hoping to chip away at it a little at a time, any help welcome of course.\n\nAnd if we really want to get ambitious, all the warnings period. All the deprecated warnings. All the...... Then on to findbugs. Then.... ",
            "author": "Erick Erickson",
            "id": "comment-16047179"
        },
        {
            "date": "2017-06-13T00:13:05+0000",
            "content": "On my list; anything that gets rid of excessive warnings that people ignore is good in my book. ",
            "author": "Andrew Musselman",
            "id": "comment-16047259"
        },
        {
            "date": "2017-06-23T15:52:44+0000",
            "content": "Commit 3a017e4cf2641ca2b0e9861f3ce915c2d2308c74 in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3a017e4 ]\n\nSOLR-10778: eliminate local variables in (PageTool,AnalyzeEvaluator,ClassifyStream) ",
            "author": "ASF subversion and git services",
            "id": "comment-16061147"
        },
        {
            "date": "2017-06-23T15:52:45+0000",
            "content": "Commit ebfc04b1468b4a7973f61bafc94688630629806b in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ebfc04b ]\n\nSOLR-10778: fix (false positive) Resource Leak warning in LBHttpSolrClient.build() method. ",
            "author": "ASF subversion and git services",
            "id": "comment-16061148"
        },
        {
            "date": "2017-06-30T14:25:35+0000",
            "content": "We obviously cannot take care of all the warnings overnight but we can incrementally take care of existing warnings and watch out for new warnings appearing. It's difficult though to spot new warnings amongst the copious 'ant precommit' output.\n\nWith all of that in mind I've created a little dated-warnings shell script that correlates warnings with git commit history. Attaching both the script and its current output, for convenience also here copied/pasted from the script the warnings for June 2017 (so far):\n\n\n\t2017-06-21 http://www.github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/index/ReadersAndUpdates.java#L843\n\t2017-06-21 http://www.github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates.java#L186\n\t2017-06-21 http://www.github.com/apache/lucene-solr/blob/master/lucene/core/src/java/org/apache/lucene/index/FrozenBufferedUpdates.java#L144\n\t2017-06-20 http://www.github.com/apache/lucene-solr/blob/master/solr/core/src/test/org/apache/solr/core/DirectoryFactoryTest.java#L53\n\t2017-06-16 http://www.github.com/apache/lucene-solr/blob/master/solr/solrj/src/java/org/apache/solr/common/util/Utils.java#L110\n\t2017-06-16 http://www.github.com/apache/lucene-solr/blob/master/solr/solrj/src/java/org/apache/solr/common/util/CommandOperation.java#L248\n\t2017-06-16 http://www.github.com/apache/lucene-solr/blob/master/solr/core/src/test/org/apache/solr/util/TestUtils.java#L186\n\n\n\nIf folks think this is useful then I'd be happy to periodically re-run the script and share results here. ",
            "author": "Christine Poerschke",
            "id": "comment-16070182"
        },
        {
            "date": "2017-06-30T14:57:44+0000",
            "content": "That is useful Christine.  But if it's long term then I think a message to the dev list would be better than JIRA.  Hopefully this sort of thing is short term so that we can get to a point where we can fail precommit if it occurs? ",
            "author": "David Smiley",
            "id": "comment-16070216"
        }
    ]
}