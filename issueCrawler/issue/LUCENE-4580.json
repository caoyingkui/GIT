{
    "id": "LUCENE-4580",
    "title": "Facet DrillDown should return a ConstantScoreQuery",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "DrillDown is a helper class which the user can use to convert a facet value that a user selected into a Query for performing drill-down or narrowing the results. The API has several static methods that create e.g. a Term or Query.\n\nRather than creating a Query, it would make more sense to create a Filter I think. In most cases, the clicked facets should not affect the scoring of documents. Anyway, even if it turns out that it must return a Query (which I doubt), we should at least modify the impl to return a ConstantScoreQuery.",
    "attachments": {
        "LUCENE-4580.patch": "https://issues.apache.org/jira/secure/attachment/12555775/LUCENE-4580.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-01T13:32:05+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13507960"
        },
        {
            "date": "2012-12-01T15:08:37+0000",
            "content": "+1 ",
            "author": "Gilad Barkai",
            "id": "comment-13507982"
        },
        {
            "date": "2012-12-02T07:02:34+0000",
            "content": "I took a look at TermsFilter (under the queries module), and I think that it would be a waste to write another version for facets. However, DrillDown is only a helper class and I'm not sure that it's worth adding lucene-queries as a dependency, especially that we have LUCENE-3998 open for removing dependencies from it .\n\nSo I wonder if instead we should have only a Term / List<Term> helper methods and document that the caller can use TermsFilter? E.g.:\n\n\nFilter facets = new TermsFilter(DrillDown.terms(CategoryPath...));\n\n\n\nReally, this is a very simple code. What do you think? ",
            "author": "Shai Erera",
            "id": "comment-13508181"
        },
        {
            "date": "2012-12-02T10:02:33+0000",
            "content": "DrillDown is a useful class with a straight-forward API, which makes the life of basic users simpler.\nAs Shai pointed out, today there is no dependency on the Queries module, but the code contains a hidden bug in which a 'drill down' operation may change the score of the results. And adding a Filter or a ConstantScoreQuery looks the right way to go.\nThat sort of a fix is possible, while keeping the usefulness of the DrillDown class, only if the code becomes dependent on the queries module.\nOn the other hand, removing the dependency would force most faceted users to write that exact extra code as mentioned. Preventing such cases was the reason that utility class was created.\n\n'Drilling Down' is a basic feature of a faceted search application, and the DrillDown class provides an easy way of invoking it.\nHaving a faceted search application without utilizing the queries module (e.g filtering) seems remote - is there any such scenario?\nModule dependency may result with a user loading jars he does not need or care about, but the queries module jar is likely to be found on any faceted search application.\n\nModules should be independent, but I see enough gain in here. It would not bother me if the faceted module would depend on the query module. I find it logical.\n\n-1 for forcing users to write same code over and over to keep facet module independent of the queries module\n+1 for adding DrillDown.filter(CategoryPath...) - That looks like the way to go ",
            "author": "Gilad Barkai",
            "id": "comment-13508195"
        },
        {
            "date": "2012-12-02T10:29:37+0000",
            "content": "In my opinion, for Lucene 4.x we should move the TermsFilter to core. This filter is very often used and we already have a good Automaton-based variant (DahizukMihov) filter that performs very well on lots of terms!\n\nOn the other hand: TermsFilter is a Disjunction, but for drill downs you generally need Conjunctions? ",
            "author": "Uwe Schindler",
            "id": "comment-13508199"
        },
        {
            "date": "2012-12-02T10:30:38+0000",
            "content": "Not that I'm against adding dependencies between modules, but just to give some data points:\n\n\n\tThe queries module is not a MUST for every search application (let alone faceted search). The basic query components are in core already (Filter, Query, TermQuery, BooleanQuery etc.). I found the queries module useful (so far) for the BooleanFilter and TermsFilter classes.\n\n\n\n\n\tA question was recently asked on the user list how to make DrillDown create OR queries instead of AND. The scenario \u2013 you have a facet dimension for which you would like to allow people to select multiple values, and OR them (while still AND-ing with other dimensions). Since DrillDown doesn't have that option, I offered the user to use DrillDown.term() and construct his own BooleanQuery.\n\t\n\t\tMy point is that DrillDown is a helper class that doesn't cover all cases already. Even if we make it return a Filter, that user will still need to construct BooleanFilter doing several API calls.\n\t\tSo I'm ok if it only exposes terms(), but I'm also ok if we add the queries dependency and just make the cut over to Filter instead of Query.\n\t\tOr better, move TermsFilter and BooleanFilter to core \u2013 why are they treated differently than TermQuery and BooleanQuery? Especially now that Filter is applied more efficiently, I suspect more people will want to use it?\n\t\n\t\n\n\n\n\n\tI am all for usability, but TermsFilter is not like BooleanQuery in the sense that it's very easy to create it (just one line of code). I'm not sure that if BooleanQuery had a ctor which accepts List<Term>, we wouldn't have used it in DrillDown, or if we even create the DrillDown.query API. So the 'same code over and over' is not comparable between the two cases, I think.\n\n ",
            "author": "Shai Erera",
            "id": "comment-13508200"
        },
        {
            "date": "2012-12-02T10:33:18+0000",
            "content": "In my opinion, for Lucene 4.x we should move the TermsFilter to core.\n\nThis is exactly what I proposed. I'm +1 for it (and BooleanFilter).\n\nTermsFilter is a Disjunction, but for drill downs you generally need Conjunctions\n\nYou're right, it should be a combination of TermsFilter and BooleanFilter. So in fact if we want to keep DrillDown behave like today, we should use BooleanFilter and TermsFilter. ",
            "author": "Shai Erera",
            "id": "comment-13508201"
        },
        {
            "date": "2012-12-02T10:36:30+0000",
            "content": "it should be a combination of TermsFilter and BooleanFilter. So in fact if we want to keep DrillDown behave like today, we should use BooleanFilter and TermsFilter.\n\n+1 ",
            "author": "Gilad Barkai",
            "id": "comment-13508202"
        },
        {
            "date": "2012-12-02T10:39:54+0000",
            "content": "Or better, move TermsFilter and BooleanFilter to core \u2013 why are they treated differently than TermQuery and BooleanQuery? Especially now that Filter is applied more efficiently, I suspect more people will want to use it?\n\nTermsFilter - yes. See my comment above. We already have a very good Automaton-based one in test-framework that also needs to be moved to core (as a MTQ rewrite method).\n\nBUT, about BooleanFilter: This class is horrible ineffective, inconsistent, and not good for drill downs (you should use it only when you want to do caching of filters with bitsets). If you use it for those type of queries you pay the price of allocating bitsets, iterate the wrapped queries/filters completely instead of advanceing the underlying scorers (leap-frogging). So for drilldowns BooleanFilter is the worst you can do!\n\nThe way to go from my opinion is to use constant score queries (like Solr does).\n\nIn addition we recently reopened / discussed again the very old issue to nuke Filters at all and just provide queries and nothing more. Filters are nothing more than constant score queries ",
            "author": "Uwe Schindler",
            "id": "comment-13508211"
        },
        {
            "date": "2012-12-02T10:40:37+0000",
            "content": "This is exactly what I proposed. I'm +1 for it (and BooleanFilter).\n\n-1, BooleanFilter is horrible and slow for this use-case. ",
            "author": "Uwe Schindler",
            "id": "comment-13508215"
        },
        {
            "date": "2012-12-02T10:54:38+0000",
            "content": "Uwe, the thinking that I had about Filter is that if you e.g. wrap it w/ CWF, then you pay that cost once, and that's it. Therefore BooleanFilter is just used as a means to create a more complicated Filter.\n\nBut, I'm not sure that I want to over-complicate DrillDown API. So perhaps this is what we do:\n\n\n\tFix DrillDown to always return CSQ, irregardless of the case.\n\tDocument that for caching purposes, one can wrap the returned Query with CachingWrapperFilter(QueryWrapperFilter(Query))\n\n\n\nIf a Filter is not cached, how efficient is using TermsFilter(oneTerm) vs. CSQ(TermQuery)? Are we talking huge gains here? If not, let's keep the API simple. DrillDown offers the terms() API too, so one can construct BooleanFilter, TermsFilter and whatever he wants out of them. ",
            "author": "Shai Erera",
            "id": "comment-13508239"
        },
        {
            "date": "2012-12-02T11:08:40+0000",
            "content": "Hi,\n\nIn general I would prefer another approach for the whole thing. We should not make the users decide if then need to use a Filter or Query or whatever drill down approach. The user API should only use Query: Query in, Query out:\n\n\nQuery drilldown(Query originalQuery, CategoryPath... categories)\n\n\n\nThis would get the user query to drill down as input and return a new Query with the same scoring, but somehow filtered. Internally this method can use a Filter or Query or whatever to do the drill down, the user does not need to think about. It should just add 2 options: conjunction or disjunction.\n\nThe following possibilities are available:\n\n\tone or more category path, conjunction: returns new BooleanQuery(true) [no coord], consisting of the original Query as clause and multiple CSQ(TermQuery(category)) with boost=0.0 (boost=0 means the BQ does not get any value from the filter clause and with disableCoord=true nothing changes)\n\tmore than one category path, disjunction between categories: return FilteredQuery(originalQuery, new TermsFilter(terms))\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13508240"
        },
        {
            "date": "2012-12-02T11:13:34+0000",
            "content": "If a Filter is not cached, how efficient is using TermsFilter(oneTerm) vs. CSQ(TermQuery)? Are we talking huge gains here? If not, let's keep the API simple. DrillDown offers the terms() API too, so one can construct BooleanFilter, TermsFilter and whatever he wants out of them.\n\nCSQ(TermQuery)) is way faster, as it can leap-frog. TermsFilter with one term will allocate a Bitset and then mark all positings in it; also those postings which are not needed (this depends on the FilteredQuery mode, which is used to apply filters). CSQ(TermQuery) will leap-frog so the original query and the single TermQuery will advance each other and lead to fastest execution, while the TermsFilter prepares a bitset before the query execution, so the latency will be bigger (2 steps). ",
            "author": "Uwe Schindler",
            "id": "comment-13508241"
        },
        {
            "date": "2012-12-02T11:17:40+0000",
            "content": "It seems then that the only thing that needs to be done here is fix the query() code to return CSQ (and set the coord and boost properly). The API today doesn't support disjunction between categories, but it is doable with a combination of term() and query() calls, so rather than adding more API, I say that we leave it simple.\n\nIf you agree, I'll rename this issue and fix DrillDown. ",
            "author": "Shai Erera",
            "id": "comment-13508242"
        },
        {
            "date": "2012-12-02T11:25:25+0000",
            "content": "OK. I would add a test that verifies that the scores dont change... ",
            "author": "Uwe Schindler",
            "id": "comment-13508243"
        },
        {
            "date": "2012-12-03T15:48:27+0000",
            "content": "Patch addresses the following:\n\n\n\tAdd tests to DrillDownTest that verify that scores are not affected when running drill-down queries.\n\n\n\n\n\tFix DrillDown.query to return CSQ with boost set to 0.0f, as well as creating the BQ with disable coord (thanks Uwe for the recommendations !)\n\n\n\n\n\tImproved DrillDown javadocs, as well as removed DrillDown.query() which took no FacetSearchParams \u2013 faceted search applications must work with FacetSearchParams, even if the default one.\n\n ",
            "author": "Shai Erera",
            "id": "comment-13508814"
        },
        {
            "date": "2012-12-03T15:49:00+0000",
            "content": "I also added a CHANGES entry. All tests pass, so I think it's ready to go in. ",
            "author": "Shai Erera",
            "id": "comment-13508815"
        },
        {
            "date": "2012-12-04T05:47:37+0000",
            "content": "Patch looks good.\n\nTwo comments:\n\n\tIn SimpleSearcher the code is changed as such the DrillDown.query() always takes a new FacetSearchParams() (no default) - but that's not obvious it is the same one used for the search, or that it contains the FacetIndexingParams used for indexing. The defaults made sure that if none was specified along the way - the user should not bother himself with it. It is a small piece of code, but in an example might confuse the reader. I'm somewhat leaning toward allowing a default query() call without specifying a FSP.\n\tIn the tests, perhaps use Float.MIN_VALUE or 0f when asserting equality of floats instead against 0.00000.\n\n ",
            "author": "Gilad Barkai",
            "id": "comment-13509527"
        },
        {
            "date": "2012-12-04T06:50:50+0000",
            "content": "In SimpleSearcher the code is changed as such the DrillDown.query() always takes a new FacetSearchParams()\n\nI think that the example code was just misleading. The FacetSearchParams are initialized in another method and used there, over the default indexing params. Notice how searchWithDrillDown calls searchWithRequest(null), which initializes default FacetIndexingParams. Since you cannot really execute faceted search without FacetSearchParams (you need to at least add FacetRequests), I think that having at least FSP on DrillDown API is ok. The API already has too many duplicates IMO.\n\nIn the tests, perhaps use Float.MIN_VALUE or 0f when asserting equality of floats instead against 0.00000.\n\nI don't assert against 0.00000, but against 0.0f. The 0.00000 part is for the precision requires by assertEquals when you use doubles or floats. ",
            "author": "Shai Erera",
            "id": "comment-13509543"
        },
        {
            "date": "2012-12-04T09:25:09+0000",
            "content": "I understand what you mean by 0f, sorry. I will fix it.\n\nAlso, I think that I'll simplify SimpleSearcher to create the FacetSearchParams up front, so that it's clear where they're created. In addition, I think that we can cut down the number of query() methods in DrillDown, to always take a baseQuery and handle the case that it's null. Will post an updated patch soon. ",
            "author": "Shai Erera",
            "id": "comment-13509616"
        },
        {
            "date": "2012-12-04T09:52:13+0000",
            "content": "\n\tRemoved DrillDown.query() which didn't take baseQuery \u2013 DrillDown will usually be used for drill-down queries. However, the query() methods handle the case where baseQuery is null.\n\n\n\n\n\tFixed SimpleSearcher.searchWithDrillDown to initialize FacetIndexingParams and pass it to the other methods.\n\n\n\nI think this is ready to go in. ",
            "author": "Shai Erera",
            "id": "comment-13509627"
        },
        {
            "date": "2012-12-04T09:53:05+0000",
            "content": "+1 ",
            "author": "Gilad Barkai",
            "id": "comment-13509628"
        },
        {
            "date": "2012-12-04T10:08:41+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1416860\n\nLUCENE-4580: Facet DrillDown should return a ConstantScoreQuery\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13509632"
        },
        {
            "date": "2012-12-04T10:21:46+0000",
            "content": "Committed to trunk and 4x. ",
            "author": "Shai Erera",
            "id": "comment-13509644"
        },
        {
            "date": "2012-12-04T10:26:10+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1416864\n\nLUCENE-4580: Facet DrillDown should return a ConstantScoreQuery\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13509647"
        },
        {
            "date": "2013-03-22T16:11:57+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1416864\n\nLUCENE-4580: Facet DrillDown should return a ConstantScoreQuery ",
            "author": "Commit Tag Bot",
            "id": "comment-13610469"
        }
    ]
}