{
    "id": "LUCENE-758",
    "title": "IndexReader.isCurrent fails when using two IndexReaders",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.1",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "there is a problem in IndexReader.isCurrent() if using two reader instances where one of them is based on a RAMDirectory. If there is an index and we open two IndexReaders where one is based on a FSDirectory and the other is based on a RAMDirectory, the IndexReader using the RAMDirectory does not recognize when the underlaying index has changed. The method IndexReader.isCurrent() always returns true. The testcase below shows the problem.\n\nI did not find an ideal solution to solve the problem. I think the best way would be to change the IndexReader.isCurrent() implementation from:\n  public boolean isCurrent() throws IOException \n{\n    return SegmentInfos.readCurrentVersion(directory) == segmentInfos.getVersion();\n  }\nto something like:\n  public boolean isCurrent() throws IOException \n{\n    return directory.readCurrentVersion() == segmentInfos.getVersion();\n  }\nAs far as i can see this would work for FS- and RAMDirectory. But then the implementing Directory classes have to know about \"segment\" files and there formating details.\nWhat do others think ?\n\n  /** \n\n\tadditional testcase for IndexReaderTest to show the problem when using two different Readers\n   */\n  public void testIsCurrentWithCombined() throws Exception \n{\n      String tempDir = System.getProperty(\"tempDir\");\n      if (tempDir == null)\n          throw new IOException(\"tempDir undefined, cannot run test\");\n\n      File indexDir = new File(tempDir, \"lucenetestiscurrent\");\n      Directory fsStore = FSDirectory.getDirectory(indexDir, true);\n      \n      IndexWriter writer = new IndexWriter(fsStore, new SimpleAnalyzer(), true);\n      addDocumentWithFields(writer);\n      writer.close();\n      \n      IndexReader reader1 = IndexReader.open(fsStore);\n      IndexReader reader2 = IndexReader.open(new RAMDirectory(fsStore));\n      \n      assertTrue(reader1.isCurrent());\n      assertTrue(reader2.isCurrent());\n      \n      reader1.deleteDocument(0);\n      reader1.close();\n      \n      // BUG: reader based on the RAMDirectory does not recognize the index change.\n      assertFalse(reader2.isCurrent());\n      \n      reader2.close();\n    }",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2006-12-22T17:50:12+0000",
            "content": "Thank you for the full test case showing the issue!\n\nHowever, I believe this is by design.  When you init a RAMDirectory off a current Directory, it makes a full copy of that original Directory and from then on the original & the copy are totally independent.\n\nSo it's not expected that changes to the original Directory would be reflected in the copy? ",
            "author": "Michael McCandless",
            "id": "comment-12460555"
        }
    ]
}