{
    "id": "LUCENE-1431",
    "title": "NullPointerException in CloseableThreadLocal#get() if CTL is closed",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "Pretty simple NPE, happening because some thread closed the CloseableThreadLocal, but another place still wanted to look at it:\n\n\n java.lang.NullPointerException\n     at org.apache.lucene.util.CloseableThreadLocal.get(Unknown Source)\n     at org.apache.lucene.index.TermInfosReader.getThreadResources(Unknown Source)\n     at org.apache.lucene.index.TermInfosReader.get(Unknown Source)\n     at org.apache.lucene.index.TermInfosReader.get(Unknown Source)\n     at org.apache.lucene.index.SegmentTermDocs.seek(Unknown Source)\n     at org.apache.lucene.index.MultiSegmentReader$MultiTermDocs.termDocs(Unknown Source)\n     at org.apache.lucene.index.MultiSegmentReader$MultiTermDocs.next(Unknown Source)\n\n\n\nI believe the attached patch should fix those.",
    "attachments": {
        "LUCENE-1431.diff": "https://issues.apache.org/jira/secure/attachment/12393042/LUCENE-1431.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-10-30T10:11:02+0000",
            "content": "Continueing reading application and lucene code, the patch will only move the NPE to a few lines later when TermInfosReaders#getThreadResources() tries to call CloseableThreadLocal#set() with the newly created resources.\n\nA bit more context on the application where I hit this problem:\nThis is a web application that runs a periodic update check that will create new readers on a newer indices (no reopen, real creation of the readers), and close the older ones. Requests will get the currently open reader, and generally handle the case where this gets closed by catching the exceptions and doing \"something sensible\".\nThe exception is hit in a place that is implementing a Filter, and expects an IOException if the reader is closed by chance.\nWith lucene 2.3.2, this worked nicely, but with 2.4.0 we get the above exception, instead of the expected IOException.\n\nI see that there is now IndexReader#incRef() and IndexReader#decRef(), so I'll play with those methods to prevent \"early\" closing of readers, and avoid handling the exceptions. \n\n\nThe question still remains whether CloseableThreadLocal should somehow handle the 'closed' state in get()/set(), or whether documentation should be added that close() really means nothing else will work after that. ",
            "author": "Andreas Kohn",
            "id": "comment-12643796"
        },
        {
            "date": "2008-10-30T10:29:17+0000",
            "content": "OK, so you were continuing to use a TermDocs after its reader had been closed.\n\nUnfortunately, Lucene doesn't and can't really guarantee you'll always get a nice AlreadyClosedException in all possible places where you use a reader after closing it, because inserting that check could be a performance hit.\n\nSo what happens (NPE or IOE etc.) is intentionally not defined/guaranteed, though we will in general make a \"best effort\" to throw an AlreadyClosedException when possible.\n\nIn this particular case I don't see an obvious place to insert an ensureOpen() call without risking a performance hit.\n\nincRef/decRef should solve this nicely. ",
            "author": "Michael McCandless",
            "id": "comment-12643804"
        },
        {
            "date": "2008-11-03T09:53:25+0000",
            "content": "We reworked the code around the problematic area (not using incRef/decRef, but instead preventing the updating from running using internal existing locks), so I think this issue can be closed and just serve as reference.\n\nThanks! ",
            "author": "Andreas Kohn",
            "id": "comment-12644675"
        },
        {
            "date": "2008-11-03T10:19:07+0000",
            "content": "OK thanks! ",
            "author": "Michael McCandless",
            "id": "comment-12644676"
        }
    ]
}