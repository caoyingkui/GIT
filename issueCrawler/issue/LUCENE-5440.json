{
    "id": "LUCENE-5440",
    "title": "Add LongFixedBitSet and replace usage of OpenBitSet",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/search"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ]
    },
    "description": "Spinoff from here: http://lucene.markmail.org/thread/35gw3amo53dsqsqj. I wrote a LongFixedBitSet which behaves like FixedBitSet, only allows managing more than 2.1B bits. It overcome some issues I've encountered with OpenBitSet, such as the use of set/fastSet as well the implementation of DocIdSet. I'll post a patch shortly and describe it in more detail.",
    "attachments": {
        "LUCENE-5440.patch": "https://issues.apache.org/jira/secure/attachment/12627854/LUCENE-5440.patch",
        "LUCENE-5440-solr.patch": "https://issues.apache.org/jira/secure/attachment/12628080/LUCENE-5440-solr.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13895849",
            "author": "Shai Erera",
            "content": "Attached patch contains LongFixedBitSet:\n\n\n\tOnly set/get(long). No more set/fastSet and int/long variations. This class should be used only for more than 2.1B bits.\n\n\n\n\n\tDoesn't implement Bits/DocIdSet \u2013 again, this class should be used only for more than 2.1B bits.\n\n\n\n\n\tA static utility method \"grows\" it if needed while sharing the underlying long[] if possible.\n\n\n\nI reviewed code which uses OpenBitSet and turns out most of this code could use a \"fixed\" bitset already. Some needed a Long version, but otherwise the number of bits was known in advance already. Yet all these classes used obs.set() instead of .fastSet(), which IMO shows the need for this new class and removed confusion.\n\nThere are some places in lucene/ code that still use OpenBitSet, such as TestOpenBitSet, javadoc mentions and where doc IDs are used (e.g. FieldCache). I didn't touch them since the new LongFixedBitSet is not intended to be used for doc IDs anyway.\n\nI quickly reviewed some of the solr/ code, and looks like there too we can cutover to (Long)FixedBitSet already, since the number of bits is known in advance. I will do it after I get some feedback about the current patch. ",
            "date": "2014-02-09T07:45:14+0000"
        },
        {
            "id": "comment-13895885",
            "author": "Michael McCandless",
            "content": "+1, it's nice to see how many OBS's you were able to cut over.\n\nI especially loved seeing this pre-existing comment (again):\n\n\n       super(in, false); // <-- not passing false here wasted about 3 hours of my time!!!!!!!!!!!!!\n\n\n\nMaybe if we added a FixedBitSet.ensureCapacity then we could use FBS\nin Numeric/BinaryDocValuesWriter?  Seems like we should decouple elasticity\nand long vs int index?\n\nI find it crazy that SloppyPhraseScorer seems to allocate a new bitset\nfor every .advance call?\n\nMaybe we should rename FBS -> IntFBS? ",
            "date": "2014-02-09T12:17:26+0000"
        },
        {
            "id": "comment-13895891",
            "author": "Shai Erera",
            "content": "Maybe if we added a FixedBitSet.ensureCapacity\n\nYou're right. Added FixedBitSet.ensureCapacity.\n\nI find it crazy that SloppyPhraseScorer seems to allocate a new bitset\nfor every .advance call?\n\nMe too, therefore I only added a TODO. I guess a quick fix would be to try and share a single FixedBitSet and clear() it in each advance. Also I'd optimize the scary while (bits.cardinality() > 0). Maybe in a separate issue?\n\nMaybe we should rename FBS -> IntFBS?\n\nWe could, though it will generate a huge amount of changes, so if we want to do it, I'll do it after we're done reviewing the patch (just rote rename). But since it's public and useful API (i.e. even though it's marked internal, I believe it's used wider than just Lucene), maybe we shouldn't? It's just a rename...\n\nBTW, I reviewed more Solr code and could use some guidance from someone who's more familiar with it. Looks like a core class of Solr that uses OBS is BitDocSet, but from what I can tell, it doesn't rely much on elasticity (e.g. it documents that the given bitset should be at least of size maxDoc()). Also, it (and other classes) sometimes use set/get and sometimes fast. So if someone can confirm it's safe to change this class to use FixedBitSet (seems like we don't even need Long here), I'll do it. ",
            "date": "2014-02-09T13:01:14+0000"
        },
        {
            "id": "comment-13895975",
            "author": "Shai Erera",
            "content": "New patch:\n\n\n\tAll lucene/ code is now cut over to (Long)FixedBitSet, including ChainedFilter. What remains is OBS, test and iterator. I think I'll extract FBS.iterator() to its own class, so that we could optimize in FBS.or() and friends.\n\n\n\n\n\tOpenBitSetDISI is now unused, not in lucene/ nor solr/. Should I nuke it?\n\n\n\n\n\tI also moved some code which used FBS copy-constructor to grow an FBS to FBS.ensureCapacity. So now nothing uses the new copy-constructor \u2013 nuke it?\n\n\n\nI think we can cutover Solr usage of OBS in a separate commit/patch/issue, to make this issue contained. ",
            "date": "2014-02-09T18:40:27+0000"
        },
        {
            "id": "comment-13895998",
            "author": "Shai Erera",
            "content": "Added a FixedBitSetIterator class and optimization in or/and etc. to do instanceof checks. Also nuked the copy-constructors - if someone wants to grow, he can use ensureCapacity. And I don't think shrinking a bitset is a good enough usecase to keep the ctor (it was anyway not entirely safe, as it didn't turn off the unused bits in the last word...).\n\nI think this is ready. If there are no objections, I'd like to commit this tomorrow and proceed w/ cutting over Solr to FBS/LFBS as well. ",
            "date": "2014-02-09T19:38:24+0000"
        },
        {
            "id": "comment-13896025",
            "author": "Shawn Heisey",
            "content": "Is there any way to deprecate but keep FixedBitSet while moving to IntFixedBitSet?  A simple 'extends' isn't possible unless the final modifier is removed, and I think doing it any other way would lead to breakage. ",
            "date": "2014-02-09T20:27:20+0000"
        },
        {
            "id": "comment-13896039",
            "author": "Shai Erera",
            "content": "I don't think we should deprecate anything. We can simply rename it - it's an internal class... If we rename it, I think we should just rename it to Int/LongBitSet. The word Fixed should not be there, I doubt if it was if we didn't have OpenBitSet. That that it's fixed is a given, and documented. I don't mind renaming it, as I said it's just a rote rename. Perhaps I should name the Long bit set LongBitSet (remove Fixed), to avoid renames in the future. ",
            "date": "2014-02-09T21:00:52+0000"
        },
        {
            "id": "comment-13896045",
            "author": "Uwe Schindler",
            "content": "The class is definitely not internal only. Almost every filter I know of outside of Lucene uses it. I disahree with renaming it before Lucene 5. ",
            "date": "2014-02-09T21:11:58+0000"
        },
        {
            "id": "comment-13896202",
            "author": "Shai Erera",
            "content": "Fair enough, I will rename the Long version to LongBitSet then, to avoid future renames. ",
            "date": "2014-02-10T04:10:58+0000"
        },
        {
            "id": "comment-13896203",
            "author": "Shai Erera",
            "content": "Patch renames to LongBitSet. ",
            "date": "2014-02-10T04:14:24+0000"
        },
        {
            "id": "comment-13896282",
            "author": "Uwe Schindler",
            "content": "Thanks,\nI think the @lucene.internal on FixedBitSet is a bug, the javadoc tag should be removed. Without that class it is impossible to external users to implement their own Filter. Not even DocIdBitSet is available anymore, which could be used on top of a java.util.BitSet. ",
            "date": "2014-02-10T07:13:31+0000"
        },
        {
            "id": "comment-13896358",
            "author": "Uwe Schindler",
            "content": "+1 to commit, the @lucene.internal problems can be solved separately! ",
            "date": "2014-02-10T09:34:06+0000"
        },
        {
            "id": "comment-13896379",
            "author": "Shai Erera",
            "content": "I removed the internal annotation from LongBitSet and also FixedBitSet. I agree FBS is not internal... ",
            "date": "2014-02-10T10:10:44+0000"
        },
        {
            "id": "comment-13896700",
            "author": "ASF subversion and git services",
            "content": "Commit 1566662 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1566662 ]\n\nLUCENE-5440: Add LongBitSet to handle large number of bits; replace usage of OpenBitSet by FixedBitSet/LongBitSet ",
            "date": "2014-02-10T15:44:25+0000"
        },
        {
            "id": "comment-13896716",
            "author": "ASF subversion and git services",
            "content": "Commit 1566670 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1566670 ]\n\nLUCENE-5440: Add LongBitSet to handle large number of bits; replace usage of OpenBitSet by FixedBitSet/LongBitSet ",
            "date": "2014-02-10T16:02:20+0000"
        },
        {
            "id": "comment-13896717",
            "author": "Shai Erera",
            "content": "Committed this patch to trunk and 4x. I will work on the solr/ code ... at least, I'll make a best effort . ",
            "date": "2014-02-10T16:03:20+0000"
        },
        {
            "id": "comment-13897098",
            "author": "Shai Erera",
            "content": "Patch moves solr/ code to use FixedBitSet instead of OpenBitSet. I ran into few issues e.g. w/ bulk operations such as or/union, where OpenBitSet grew the underlying long[]. Now it needs to grow on the outside. I think I'll add a check to FBS.or() to make sure the given bitset is not bigger than the current one.\n\nAnyway, I still didn't run tests, just wanted to checkpoint. There are no more uses of OBS in solr/. ",
            "date": "2014-02-10T22:06:35+0000"
        },
        {
            "id": "comment-13897118",
            "author": "Yonik Seeley",
            "content": "OpenBitSet is part of the Solr APIs in a number of places, so if we make these changes, I guess it should be trunk only? ",
            "date": "2014-02-10T22:22:07+0000"
        },
        {
            "id": "comment-13897786",
            "author": "Shai Erera",
            "content": "I don't mind if we do it only in trunk. However, this affects only the Java API, which looks pretty low-level and expert to me? Given that and that migrating from OpenBitSet to FixedBitSet is trivial, wouldn't it be OK to port it to 4x as well?\n\nI'm thinking about e.g. merging changes from trunk to 4x, which will be much easier if the two are in sync. Of course this alone doesn't justify an API break, but if it's such low-level and expert API, I wonder if we shouldn't do this in 4x as well. \n\nHaving said all that, you obviously understand Solr API better than me and know how it's used by users, so if you think we absolutely shouldn't do this in 4x, we'll do it only in trunk. ",
            "date": "2014-02-11T12:09:39+0000"
        },
        {
            "id": "comment-13897826",
            "author": "Michael McCandless",
            "content": "I think the @lucene.internal on FixedBitSet is a bug, the javadoc tag should be removed.\n\nI don't think FixedBitSet should be external.\n\nOur purpose here is to provide search APIs, not bitset utility APIs, and we should not have to commit to API back compatibility for this class or other such utility classes. ",
            "date": "2014-02-11T13:05:33+0000"
        },
        {
            "id": "comment-13897923",
            "author": "ASF subversion and git services",
            "content": "Commit 1567183 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1567183 ]\n\nLUCENE-5440: add back elasticity assumptions ",
            "date": "2014-02-11T15:34:50+0000"
        },
        {
            "id": "comment-13897925",
            "author": "ASF subversion and git services",
            "content": "Commit 1567185 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1567185 ]\n\nLUCENE-5440: add back elasticity assumptions ",
            "date": "2014-02-11T15:37:08+0000"
        },
        {
            "id": "comment-13897946",
            "author": "Uwe Schindler",
            "content": "I don't think FixedBitSet should be external. Our purpose here is to provide search APIs, not bitset utility APIs, and we should not have to commit to API back compatibility for this class or other such utility classes.\n\nI disagree: If this is our case, we have to do more APIs internal and also hide stuff like AtomicReader, because its not useful for the end user. FixedBitSet is currently the only way for users to write own filters, unless they write their own DocIdSets. So to support filtering results, users have to implement the DocIdSet, Bits and DISI interfaces (which are public), so at least one implementation (the recommended one) should be public and stable. ",
            "date": "2014-02-11T15:53:01+0000"
        },
        {
            "id": "comment-13897949",
            "author": "Shai Erera",
            "content": "I don't think FixedBitSet should be external.\n\n+1. I mistakenly removed the @lucene.internal annotation, will add it back in the new patch. Our API isn't FixedBitSet, it's Filter/DocIdSet. And we offer DocIdBitSet (external) to use w/ Java's BitSet. It's not true that users cannot write their own Filters - they can write them using DocIdBitSet, or risk and use the internal FixedBitSet. I wouldn't want to see FBS stays w/ that name, just because once there was OpenBitSet - renaming (just as removing 'extends DocIdSet') is a trivial change to your code when you migrate... ",
            "date": "2014-02-11T15:56:30+0000"
        },
        {
            "id": "comment-13897953",
            "author": "Shai Erera",
            "content": "Patch resolves an error I had w/ grouping (under Solr) and improves FBS assertions errors. I also returned the internal annotation to both FBS and LongBitSet, until we resolve that matter on LUCENE-5441. Another thing \u2013 I added an assert to FBS.or/xor if the given set.length() was bigger than current \u2013 we silently discarded bits!\n\nAll Solr tests pass now (except testDistribSearch which seem to fail constantly recently). I'd appreciate if someone can give it a second look. ",
            "date": "2014-02-11T15:59:22+0000"
        },
        {
            "id": "comment-13900170",
            "author": "Shai Erera",
            "content": "I reviewed how we can perhaps not break the API. I thought first to\ndeprecate BitDocSet and create a new class BitsDocSet which will use\nFixedBitSet. But the problem is that DocSet (the interface) commits to\nOpenBitSet in its APIs: .getBits() and .setBitsOn().\n\nI think that .setBitsOn could take a DocSet and check if it's a BitsDocSet,\ncall bits.or(), otherwise, iterate on the bits and call add().\n\nAs for .getBits(), it's currently used by DocSetBase's various base impls,\nso I think if we made it protected (and only on DocSetBase), we could get\nrid of it from the public API. BitDocSet would then override to return a\nbits.clone(), whereas the others would just create a new FBS, like what\nDocSetBase.getBits() does now.\n\nIt's also used by UninvertField, but it assumes the given DocSet is\nBitDocSet already, so we can just add .getBits() to BitDocSet...\n\nWhile this breaks the DocSet API, I think it's a good break as it allows\nflexibility in the future (e.g if we rename FixedBitSet to IntBitSet, the\nAPI doesn't break again). I'll post a patch soon.\n\n\n\n ",
            "date": "2014-02-13T09:43:21+0000"
        },
        {
            "id": "comment-13901116",
            "author": "Shai Erera",
            "content": "Patch decouples DocSet from Fixed/OpenBitSet. DocSet.setBitsOn renamed to .addAllTo and takes a DocSet instead. DocSet.getBits() moved to DocSetBase as protected method and BitDocSet overrides and declares public. No code affected by these changes, outside DocSetBase.\n\nI think it's ready to commit. ",
            "date": "2014-02-14T05:10:54+0000"
        },
        {
            "id": "comment-13902655",
            "author": "ASF subversion and git services",
            "content": "Commit 1568737 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1568737 ]\n\nLUCENE-5440: decouple OpenBitSet from DocSet and move to use FixedBitSet ",
            "date": "2014-02-16T07:36:38+0000"
        },
        {
            "id": "comment-13902658",
            "author": "ASF subversion and git services",
            "content": "Commit 1568738 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1568738 ]\n\nLUCENE-5440: decouple OpenBitSet from DocSet and move to use FixedBitSet ",
            "date": "2014-02-16T07:50:09+0000"
        },
        {
            "id": "comment-13902659",
            "author": "Shai Erera",
            "content": "Committed the Solr changes. ",
            "date": "2014-02-16T07:50:18+0000"
        },
        {
            "id": "comment-13902825",
            "author": "ASF subversion and git services",
            "content": "Commit 1568824 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1568824 ]\n\nLUCENE-5440: fix bug in FacetComponent ",
            "date": "2014-02-16T20:37:29+0000"
        },
        {
            "id": "comment-13902832",
            "author": "ASF subversion and git services",
            "content": "Commit 1568825 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1568825 ]\n\nLUCENE-5440: fix bug in FacetComponent ",
            "date": "2014-02-16T20:50:57+0000"
        }
    ]
}