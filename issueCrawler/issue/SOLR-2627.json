{
    "id": "SOLR-2627",
    "title": "Solr's JSON request format isn't valid JSON",
    "details": {
        "affect_versions": "3.2",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "I've been working with Solr's JSON request and response to get it up and running in my application and it looks like the JSON request format is not properly formatted JSON. Here's an example of a request with multiple documents (from the Wiki):\n\n\n{\n \"add\": {\"doc\": {\"id\" : \"TestDoc1\", \"title\" : \"test1\"} },\n \"add\": {\"doc\": {\"id\" : \"TestDoc2\", \"title\" : \"another test\"} }\n}\n\n\n\nUnfortunately, this is not valid JSON because according to RFC-4627 section 2.2, \"The names within an object SHOULD be unique.\" This means that defining the name \"add\" twice is not allowed. Instead, the JSON should use an array for multiple documents like this:\n\n\n{\n \"add\": [{\"doc\": {\"id\" : \"TestDoc1\", \"title\" : \"test1\"}},\n         {\"doc\": {\"id\" : \"TestDoc2\", \"title\" : \"another test\"}}]\n}\n\n\n\nAn alternate form that simplifies this entire thing is to remove the \"doc\" identifier as it doesn't appear to provide useful information. That form would be:\n\n\n{\n \"add\": [{\"id\" : \"TestDoc1\", \"title\" : \"test1\"},\n         {\"id\" : \"TestDoc2\", \"title\" : \"another test\"}]\n}\n\n\n\nIt looks like Noggit uses a stream based Parser that doesn't put these values into a Map or JavaBean, otherwise this would have revealed itself much sooner. I run into the issue when attempting to create a Map that I could pass to a JSON binder such as Jackson or Google-GSON. Given the current format, none of those tools will work with Solr.\n\nIt also looks like Noggit is not really moving out of labs. It would be nice to use a more well known and active project for the JSON handling as it is quickly becoming the de-facto standard. I can open a ticket for that separately if needed and help out with the code.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13056830",
            "date": "2011-06-28T22:39:18+0000",
            "content": "This is a duplicate of SOLR-2496 (and a nicer alternate syntax is already possible).\n\nRepeated tags are valid JSON, and a parser that didn't allow that would be broken. "
        },
        {
            "author": "Brian Pontarelli",
            "id": "comment-13056868",
            "date": "2011-06-28T22:53:23+0000",
            "content": "Well, according to the spec it isn't valid, but that's not important. The most important thing is to update the docs. In general the JSON docs are really lacking and I spent about 30 minutes searching in JIRA without success, so I opened the issue. Avoid duplicate issues by updating the docs. "
        },
        {
            "author": "Brian Pontarelli",
            "id": "comment-13056871",
            "date": "2011-06-28T23:00:46+0000",
            "content": "Actually, I'll bite on your comment because it appears you are incorrect. I tested this in a couple of browsers and also some parsers and it doesn't work. Most browsers will end up clobbering the fist object with the second one with the same name. You can test this easily in Chrome with the console.log statement.\n\nAdditionally, most JSON parsers return objects as Maps, which don't allow duplicate keys. You would need to use a MultiMap to accomplish that.\n\nGlad this is fixed, but please do update the docs. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13056892",
            "date": "2011-06-28T23:43:07+0000",
            "content": "Heh - now I have to read this spec. A 'SHOULD' rule leading to a 'not properly formatted json' sounds a little fishy  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13056905",
            "date": "2011-06-29T00:08:54+0000",
            "content": "RFC4627\n\"The names within an object SHOULD be unique.\"\n\"JSON parser MUST accept all texts that conform to the JSON grammar.\"\n\n\"SHOULD\" is very specific (and a synonym for RECOMMENDED) and is not equivalent to \"MUST\" in RFCs.\nSo I agree it's best practice to avoid repeated names in a JSON object, but a parser that could not deal with repeated names is clearly not a conformant JSON parser.  Valid JSON may have repeated names in an object. "
        },
        {
            "author": "Brian Pontarelli",
            "id": "comment-13056954",
            "date": "2011-06-29T02:10:22+0000",
            "content": "Got it. Thanks for the clarification. \n\nI read RFC2119 for the definition of SHOULD:\n\n\"3. SHOULD   This word, or the adjective \"RECOMMENDED\", mean that there may exist valid reasons in particular circumstances to ignore a particular item, but the full implications must be understood and carefully weighed before choosing a different course.\"\n\nBased on this definition, I contend that it is indeed invalid JSON, for this situation. However, interpretation of these types of rules are always debatable. "
        }
    ]
}