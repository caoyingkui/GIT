{
    "id": "SOLR-7036",
    "title": "Faster method for group.facet",
    "details": {
        "components": [
            "faceting"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "4.10.3",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "This is a patch that speeds up the performance of requests made with group.facet=true. The original code that collects and counts unique facet values for each group does not use the same improved field cache methods that have been added for normal faceting in recent versions.\n\nSpecifically, this approach leverages the UninvertedField class which provides a much faster way to look up docs that contain a term. I've also added a simple grouping map so that when a term is found for a doc, it can quickly look up the group to which it belongs.\n\nGroup faceting was very slow for our data set and when the number of docs or terms was high, the latency spiked to multiple second requests. This solution provides better overall performance \u2013 from an average of 54ms to 32ms. It also dropped our slowest performing queries way down \u2013 from 6012ms to 991ms.\n\nI also added a few tests.\n\nI added an additional parameter so that you can choose to use this method or the original. Add group.facet.method=fc to use the improved method or group.facet.method=original which is the default if not specified.",
    "attachments": {
        "performance.txt": "https://issues.apache.org/jira/secure/attachment/12817770/performance.txt",
        "SOLR-7036.patch": "https://issues.apache.org/jira/secure/attachment/12694553/SOLR-7036.patch",
        "SOLR-7036_zipped.zip": "https://issues.apache.org/jira/secure/attachment/12823978/SOLR-7036_zipped.zip",
        "source_for_patch.zip": "https://issues.apache.org/jira/secure/attachment/12818085/source_for_patch.zip",
        "jstack-output.txt": "https://issues.apache.org/jira/secure/attachment/12818942/jstack-output.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-01-26T14:04:14+0000",
            "author": "Jim Musil",
            "content": "This is the first draft. It passes all tests. ",
            "id": "comment-14291841"
        },
        {
            "date": "2015-01-26T14:08:26+0000",
            "author": "Jim Musil",
            "content": "This issue has been logged before here (https://issues.apache.org/jira/browse/SOLR-4763) but because my approach was different I chose to log as an improvement in it's own issue. I applied the patch provided in that issue and found that mine provided 30% better performance for our data set and query patterns.\n ",
            "id": "comment-14291849"
        },
        {
            "date": "2015-01-30T15:15:30+0000",
            "author": "Adrien Brault",
            "content": "Just tried with our dataset and main query, this is 2x slower than SOLR-4763 ",
            "id": "comment-14298737"
        },
        {
            "date": "2015-01-30T15:45:41+0000",
            "author": "Jim Musil",
            "content": "Did you set group.facet.method=fc?\n\nJim Musil\n ",
            "id": "comment-14298778"
        },
        {
            "date": "2015-01-30T16:56:32+0000",
            "author": "Adrien Brault",
            "content": "Jim Musil I did not. After trying again, with group.facet.method=fc the performance is similar to SOLR-4763 ",
            "id": "comment-14298863"
        },
        {
            "date": "2015-03-05T15:38:27+0000",
            "author": "Michael McCandless",
            "content": "Push out to 4.10.5 release ",
            "id": "comment-14348931"
        },
        {
            "date": "2015-05-08T17:28:49+0000",
            "author": "Jim Musil",
            "content": "I've added a new version of this patch that significantly improves on both performance and memory usage over the previous patch. ",
            "id": "comment-14535024"
        },
        {
            "date": "2015-05-09T16:59:35+0000",
            "author": "Erick Erickson",
            "content": "I may not get to this for a while, we need to reconcile this and 4763. If anyone has spare cycles, I won't be offended by someone else doing the heavy lifting  ",
            "id": "comment-14536766"
        },
        {
            "date": "2015-07-15T04:26:27+0000",
            "author": "Erick Erickson",
            "content": "Man, talk about a while. Anyway, I can't apply the patch and I spent some time tonight trying to figure out what needed to change but then it went into the weeds, compounded by the fact that I'm not all that familiar with the code.\n\nJim Musil Could I ask you to update the patch to trunk a.k.a 6.x? Then I'll merge it into 5x if all goes well.\n\nYonik SeeleyChris Hostetter (Unused) You guys should know I'm an amateur at all the faceting code. I'll look over what I can but if either of you would like to weigh in on any new patch that would be great. Or anyone else for that matter. ",
            "id": "comment-14627497"
        },
        {
            "date": "2015-08-10T14:49:13+0000",
            "author": "Ovidiu Mihalcea",
            "content": "Hello guys,\nWould really need some good news with this. We really need result grouping with faceting and this is really slowing our site...\nThanks a lot! ",
            "id": "comment-14680217"
        },
        {
            "date": "2015-08-26T13:14:21+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk move to 5.4 after 5.3 release. ",
            "id": "comment-14713366"
        },
        {
            "date": "2015-11-06T14:23:38+0000",
            "author": "Shawn Heisey",
            "content": "Jim Musil, the newest patch is against one of the 4.x branches or tags and will not apply to branch_5x or trunk.  As Erick Erickson asked four months ago, can you update the patch to trunk?  There is somebody on the user list that would like to apply your patch, but can't. ",
            "id": "comment-14993730"
        },
        {
            "date": "2015-11-11T20:22:41+0000",
            "author": "Jim Musil",
            "content": "I'm still working on this. Quite a bit changed under the hood regarding UninvertedFields, so it has not been a quick translation from 4.x to 5.x for this patch.\n ",
            "id": "comment-15001020"
        },
        {
            "date": "2016-07-14T20:07:14+0000",
            "author": "md",
            "content": "Update the patch to work against trunk.\n\nGroup faceting was very slow for our data set and when the number of docs or terms was high, the latency spiked to multiple second requests. The UninvertedField provides better overall performance.\n\nOn the original implementation, the DocValues are segment based; Solr reads the facet VALUES from the DISK in order to merge the terms between the segments. This method shows us bad performance for facets with high cardinality.\nWhen we use a top level structure (like UninvertedField), we don't need the facet VALUES but only their ORDINAL index which are stored in MEMORY.\n\nA new group facet method that leverages UninvertedField was added.\n\nThe two methods for grouping facets are now:\n\n\tgroup.facet.method=uif to use the UninvertedField method\n\tgroup.facet.method=original which is the default if not specified.\n\n\n\nThis patch uses the new JSON faceting API as this is the way SOLR-8466 was implemented. (Add support for UnInvertedField based faceting to FacetComponent)\nIt can also be the first step to implement SOLR-8023 (Add Support for group.facet in json facet API).\n\n>>> Major code changes:\n\n\t1. SimpleFacet - If the group.facet.method=uif, call the json facet api with the group.facet field.\n\t2. FacetField - If the group.facet field is defined, create FacetFieldProcessorUIF (UIF is the only method that supports grouping on json API)\n\t3. UninvertedField - The FacetFieldProcessorUIF calls a new method getGroupedCounts that returns the facet counts grouped by group.field. (like getCounts but with grouping)\n\n>>> Performance tests on our data set:\n\n\tIndex size: 6.3 million\n\tNumber of unique facets: 877,000\n\tNumber of unique groups: 5.5 million\n\n\tTime in ms.:\n\t-------------------------------------------------------------------------------------------+\n\n\n\n\u00a0\n 50th percentile \n 75th percentile \n 95th percentile \n 99th percentile \n 100th percentile \n\n\n\n\n\t-------------------------------------------------------------------------------------------+\n\n\n\n without patch \n      6,542      \n      6,999      \n      8,427      \n      14,750     \n      70,113      \n\n\n\n\n\t-------------------------------------------------------------------------------------------+\n\n\n\n   with patch  \n       298       \n       563       \n      1,495      \n      2,901      \n      19,202      \n\n\n\n\n\t-------------------------------------------------------------------------------------------+\n\n>>> Unit tests:\n\tTests were added on two unit test classes:\n\t\tSimpleFacetTest - comparing the results of the two methods (original and uiv)\n\t\tGroupingSearchTest - grouping tests with multiple grouping options (taken from the previous patch of this issue)\n\nComments are welcome ",
            "id": "comment-15378274"
        },
        {
            "date": "2016-07-14T20:46:54+0000",
            "author": "Jamie Swain",
            "content": "md where can I find the commit that I can apply this to?  I pulled the latest git repo here: \nhttps://github.com/apache/lucene-solr\n\nYour patch shows \n\n017deb4..6ffec3a\n\n\n\nI assume this means 017deb4 is the base commit for your patch.\n\nBut when I run\n\ngit log 017deb4\n\n\nto display the base commit for your patch I find nothing.\n\nWhere can I find the commit that is the base for your patch?\n\nThanks! ",
            "id": "comment-15378344"
        },
        {
            "date": "2016-07-14T21:04:24+0000",
            "author": "md",
            "content": "The base commit is git clone http://git.apache.org/lucene-solr.git from yesterday.\nI followed the instructions here https://wiki.apache.org/solr/HowToContribute to create the patch.\nWhat am i doing wrong?\n\nthanks ",
            "id": "comment-15378375"
        },
        {
            "date": "2016-07-14T21:51:52+0000",
            "author": "Jamie Swain",
            "content": "What commit were you on when you created the patch? ",
            "id": "comment-15378458"
        },
        {
            "date": "2016-07-15T01:40:35+0000",
            "author": "md",
            "content": "commit f9c94706416c80dcdc4514256c2e4cbf975c386b\nAuthor: Christine Poerschke <cpoerschke@apache.org>\nDate:   Thu Jul 14 10:20:35 2016 +0100\n\n    SOLR-9306: give solr/contrib/analysis-extras's test classes access to lucene/analysis's test classes ",
            "id": "comment-15378728"
        },
        {
            "date": "2016-07-15T01:46:19+0000",
            "author": "Jamie Swain",
            "content": "md that just won't apply for some reason. \n\nI wget this file:\n\nwget https://issues.apache.org/jira/secure/attachment/12817769/SOLR-7036.patch\n\n\nThen try to apply the patch, according to https://wiki.apache.org/solr/HowToContribute\n\n\ntuna:lucene-solr ((f9c9470...) $%)$ patch -p1 -i SOLR-7036.patch --dry-run\npatching file solr/core/src/java/org/apache/solr/request/SimpleFacets.java\nHunk #2 FAILED at 444.\nHunk #3 FAILED at 497.\nHunk #4 FAILED at 533.\nHunk #5 FAILED at 577.\n4 out of 5 hunks FAILED -- saving rejects to file solr/core/src/java/org/apache/solr/request/SimpleFacets.java.rej\npatching file solr/core/src/java/org/apache/solr/search/facet/FacetField.java\npatching file solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java\npatching file solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java\nHunk #5 FAILED at 178.\nHunk #6 FAILED at 408.\n2 out of 7 hunks FAILED -- saving rejects to file solr/core/src/java/org/apache/solr/search/facet/UnInvertedField.java.rej\npatching file solr/core/src/java/org/apache/solr/search/facet/UninvertedFieldOrdsOnly.java\npatching file solr/core/src/test/org/apache/solr/TestGroupingSearch.java\npatching file solr/core/src/test/org/apache/solr/request/SimpleFacetsTest.java\nHunk #1 FAILED at 372.\nHunk #2 FAILED at 418.\nHunk #3 FAILED at 438.\nHunk #4 FAILED at 460.\n4 out of 4 hunks FAILED -- saving rejects to file solr/core/src/test/org/apache/solr/request/SimpleFacetsTest.java.rej\npatching file solr/solrj/src/java/org/apache/solr/common/params/FacetParams.java\ntuna:lucene-solr ((f9c9470...) $%)$ \n\n\n\n\nI'm happy to help in any way I can.  Would like like to send me a dropbox link to a zip of your lucene-solr source directory?  I can get an applyable patch ready and send it back to you to post here? ",
            "id": "comment-15378733"
        },
        {
            "date": "2016-07-15T01:52:33+0000",
            "author": "Jamie Swain",
            "content": "md scratch my previous comment.  The patch will apply if I use `-l`.\n\nlike this:\n\npatch -p1 -i SOLR-7036.patch -l\n\n\n\nI'm excited to see how it works for us here.  I will post performance results.\n\nThanks! ",
            "id": "comment-15378737"
        },
        {
            "date": "2016-07-15T02:09:14+0000",
            "author": "md",
            "content": "Thanks, do you use the latest patch? \nfile solr/core/src/java/org/apache/solr/search/facet/UninvertedFieldOrdsOnly.java is not part of the patch.\nAnyway, i'm attaching the 7 classes here in case you want to recreate the patch. ",
            "id": "comment-15378754"
        },
        {
            "date": "2016-07-15T18:35:51+0000",
            "author": "Jamie Swain",
            "content": "md I tried using the 7 files you sent last night applied to f9c94706416c80dcdc4514256c2e4cbf975c386b.  I was able to build and run solr, and then add around 500k docs to it.  I tried a normal query, grouped query, facet query, group + facet query, and all worked fine without \"group.facet.method=uif\".  If I try \"group.facet.method=uif\", then I never get a response to my request, it appears the request just hangs.  \n\nI'm going to dig into this more later today, and I'll probably try running this with the debugger to try to see what is happening.\n\nThis is what my query looks like:\n\n\"responseHeader\": {\n    \"zkConnected\": true,\n    \"status\": 0,\n    \"QTime\": 422,\n    \"params\": {\n        \"q\": \"*:*\",\n        \"facet.field\": \"colorFamily\",\n        \"json.nl\": \"flat\",\n        \"omitHeader\": \"false\",\n        \"group.facet\": \"true\",\n        \"rows\": \"30\",\n        \"facet\": \"true\",\n        \"wt\": \"json\",\n        \"group.field\": \"styleIdColor\",\n        \"group\": \"true\"\n    }\n},\n\n\n\nIn my schema, the colorFamily field used for faceting is like this:\n\n<field stored=\"true\" indexed=\"true\" name=\"colorFamily\" type=\"string\" docValues=\"true\"/>\n\n\n\nThe solr logs don't show me much for this, unfortunately.   ",
            "id": "comment-15379870"
        },
        {
            "date": "2016-07-16T18:03:40+0000",
            "author": "md",
            "content": "Could you please send the Jstack during the run?\n\n\u05e0\u05e9\u05dc\u05d7 \u05de\u05d4-iPhone \u05e9\u05dc\u05d9\n\n\u202b\u05d1-15 \u05d1\u05d9\u05d5\u05dc\u05d9 2016, \u05d1\u05e9\u05e2\u05d4 21:36, \u200f\u200fJamie Swain (JIRA) \u200f<jira@apache.org<jira@apache.org>> \u05db\u05ea\u05d1/\u05d4:\u202c\n\n\n   [ https://issues.apache.org/jira/browse/SOLR-7036?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=15379870#comment-15379870 ]\n\nJamie Swain commented on SOLR-7036:\n-----------------------------------\n\nmd I tried using the 7 files you sent last night applied to f9c94706416c80dcdc4514256c2e4cbf975c386b.  I was able to build and run solr, and then add around 500k docs to it.  I tried a normal query, grouped query, facet query, group + facet query, and all worked fine without \"group.facet.method=uif\".  If I try \"group.facet.method=uif\", then I never get a response to my request, it appears the request just hangs.\n\nI'm going to dig into this more later today, and I'll probably try running this with the debugger to try to see what is happening.\n\nThis is what my query looks like:\n\n\"responseHeader\": {\n   \"zkConnected\": true,\n   \"status\": 0,\n   \"QTime\": 422,\n   \"params\": {\n       \"q\": \"*:*\",\n       \"facet.field\": \"colorFamily\",\n       \"json.nl<http://json.nl>\": \"flat\",\n       \"omitHeader\": \"false\",\n       \"group.facet\": \"true\",\n       \"rows\": \"30\",\n       \"facet\": \"true\",\n       \"wt\": \"json\",\n       \"group.field\": \"styleIdColor\",\n       \"group\": \"true\"\n   }\n},\n\n\n\nIn my schema, the colorFamily field used for faceting is like this:\n\n<field stored=\"true\" indexed=\"true\" name=\"colorFamily\" type=\"string\" docValues=\"true\"/>\n\n\n\nThe solr logs don't show me much for this, unfortunately.\n\n\nFaster method for group.facet\n-----------------------------\n\n               Key: SOLR-7036\n               URL: https://issues.apache.org/jira/browse/SOLR-7036\n           Project: Solr\n        Issue Type: Improvement\n        Components: faceting\n  Affects Versions: 4.10.3\n          Reporter: Jim Musil\n          Assignee: Erick Erickson\n           Fix For: 5.5, 6.0\n\n       Attachments: SOLR-7036.patch, SOLR-7036.patch, SOLR-7036.patch, SOLR-7036.patch, performance.txt, source_for_patch.zip\n\n\nThis is a patch that speeds up the performance of requests made with group.facet=true. The original code that collects and counts unique facet values for each group does not use the same improved field cache methods that have been added for normal faceting in recent versions.\nSpecifically, this approach leverages the UninvertedField class which provides a much faster way to look up docs that contain a term. I've also added a simple grouping map so that when a term is found for a doc, it can quickly look up the group to which it belongs.\nGroup faceting was very slow for our data set and when the number of docs or terms was high, the latency spiked to multiple second requests. This solution provides better overall performance \u2013 from an average of 54ms to 32ms. It also dropped our slowest performing queries way down \u2013 from 6012ms to 991ms.\nI also added a few tests.\nI added an additional parameter so that you can choose to use this method or the original. Add group.facet.method=fc to use the improved method or group.facet.method=original which is the default if not specified.\n\n\n\n\u2013\nThis message was sent by Atlassian JIRA\n(v6.3.4#6332) ",
            "id": "comment-15380870"
        },
        {
            "date": "2016-07-19T21:57:50+0000",
            "author": "Jamie Swain",
            "content": "md sorry, just getting back to this now.  I've attached the jstack output. ",
            "id": "comment-15384945"
        },
        {
            "date": "2016-07-20T15:42:59+0000",
            "author": "Danny Teichthal",
            "content": "Jamie Swain Hi, I'm a team member of md.\nI suspect that the problem is that your field is defined with docValues=true.\nCan you check again in your logs if you can find some error in the pattern \"Type mismatc\" <your field name> \"was indexed as\" ..., it should be indise class DocTermOrds.\nIf you also have the option to remove docValues=true from your field and test the new method again it would be grate.\n\nIn short, the new method does not support fields with doc values.\nThere's a related Lucene JIRA issue that describes that about UninvertedField - LUCENE-7119.\n\nI see 2 options for a fix in the patch:\n1. We should not allow using group.facet.method=uif on doc values field and throw a descriptive exception on this case.\n2. In case we hit a doc value field - fallback to the original method.\n\nPersonally, I prefer to throw an exception, this way new consumers of this method will not get confused and will get a descriptive error.\n\nThe second option is used on the JSON facet API.\nIf you will facet on that field without grouping and set \"facet.method=uif\", then FacetField.createFacetProcessor will detect that it is a docValue and fall back to using the doc values processor instead of UIF.\n\n\n\nRegarding the attached stacktrace:\nI analyzed the stacktrace that you attached and it looks like there is only one active thread that is waiting on a monitor for the field value cache to be populated.\nIt is stuck on UnInvertedField.getUnInvertedField.\nSince there's no other thread in work, it looks like there was another thread that tried to create the uninverted field and got an exception, in this case it will not notify other threads and thus you are stuck on wait().\nI'm not familiar with the code that much, but it looks like it could be solved if the creation of UninvertedField was inside a try/finally block and cache.notifyAll(); was placed in the finally.\n\nWould appreciate if you could confirm or deny this theory.\n ",
            "id": "comment-15386056"
        },
        {
            "date": "2016-07-21T04:19:56+0000",
            "author": "Jamie Swain",
            "content": "Danny Teichthal  Hi, thanks for your response.  I took off DocValues, and with a quick local test it seems to be working very well.   I'm going to set up a full-scale comparison later tonight or tomorrow and I'll post back with results.   ",
            "id": "comment-15387126"
        },
        {
            "date": "2016-07-21T14:51:55+0000",
            "author": "Danny Teichthal",
            "content": "Jamie Swain, thanks, looking forward to it. ",
            "id": "comment-15387826"
        },
        {
            "date": "2016-08-14T08:49:38+0000",
            "author": "Danny Teichthal",
            "content": "Hi Jamie Swain,\nDid you have the chance to run your tests yet? ",
            "id": "comment-15420266"
        },
        {
            "date": "2016-08-15T20:12:53+0000",
            "author": "Erick Erickson",
            "content": "OK, I'm finally trying to dust this off. Two things:\n1> Do we know if this still pertains to 6x and trunk?\n2> This patch does not apply cleanly to trunk, can we get a new one? ",
            "id": "comment-15421597"
        },
        {
            "date": "2016-08-16T05:15:35+0000",
            "author": "Danny Teichthal",
            "content": "Erick Erickson\n1. The tests that were made by Miri, who uploaded the patch, were against trunk. You can see the numbers on her comment. The 50 percentile with the old method were ~6 seconds on our data set comparing to ~300 milliseconds with the patch.\n2. I will check what went wrong with the patch and upload a new one. ",
            "id": "comment-15422190"
        },
        {
            "date": "2016-08-16T12:27:56+0000",
            "author": "Danny Teichthal",
            "content": "Uploading the patch again.\nIt appears that was a refactoring task of JSON facet code.\nI merged my changes with latest head revision.\nRunning tests again for checking the old method, just to verify.\nI don't have the full numbers yet.\nBut from partial results I can confirm that the performance of the old method is still not good and measured in seconds on our data sets.\nErick Erickson please let me know if you still have problems applying the patch. ",
            "id": "comment-15422665"
        },
        {
            "date": "2016-08-16T19:18:41+0000",
            "author": "Erick Erickson",
            "content": " Danny Teichthal Hmmm, I'm having a tough time getting this to apply to either trunk or 6x. I tried with:\n> using the standard patch from the command line\n> through IntelliJ\n> using 'git apply'\n\nHow are you generating it? And is the latest one generated after updating Solr? As you can tell I'm grasping at straws here.....\n\nThanks. ",
            "id": "comment-15423249"
        },
        {
            "date": "2016-08-16T20:12:04+0000",
            "author": "Danny Teichthal",
            "content": "Erick Erickson I followed the HowToContribute wiki.\nPlease forgive me because I'm newbie on git.\nIf it matters, I work on windows, with eclipse,  git version - 2.9.0.windows.1.\nExecuted the commands from windows command line.\n\nI pulled the latest version today.\nFixed my old files (currently attached to JIRa as a zip file) to pass compilation. \nI committed my changes to my local repository.\nThen, executed patch command:\nThis is the exact command I executed \"git format-patch -w -b origin/master --stdout > SOLR-7036.patch\"\n\nWhat am I doing wrong?\n\nMeanwhile, I'm uploading a zip file containing my changes.\nIt contains the directory structure, so it can be just extracted if you are inside directory \"lucene-solr\" ",
            "id": "comment-15423309"
        },
        {
            "date": "2016-08-16T21:09:38+0000",
            "author": "Danny Teichthal",
            "content": "Regenerated the patch.\nI was able to apply it using command - git apply --ignore-space-change --ignore-whitespace --whitespace=nowarn SOLR-7036.patch ",
            "id": "comment-15423382"
        },
        {
            "date": "2016-08-17T16:06:13+0000",
            "author": "Charles Draper",
            "content": "Is it possible to resolve this issue or https://issues.apache.org/jira/browse/SOLR-4763 and include the fix in trunk? I've been following both issues almost since their beginnings hoping at each release that one of them would be resolved and become part of Solr. I've been using the CollapsingQParserPlugin plus extra code in our workflow as a work around ( http://stackoverflow.com/questions/24459372/solr-collapsingqparserplugin-with-group-facet-on-style-facet-counts/25519514#25519514 ), but would really like to be able to use the builtin grouping mechanism because it gives correct group facet counts without the work around.\n\nThanks everyone for all your contributions. Solr is a great product. ",
            "id": "comment-15424808"
        },
        {
            "date": "2016-08-17T17:25:32+0000",
            "author": "Erick Erickson",
            "content": "Danny:\n\nThanks, so far that's working, I'm running precommit now, then I'll run the tests and then.....\n\nI'm certainly a novice when it comes to git too so... Looks like maybe the difficulty is the whitespace parameters? I noticed the \"how to contribute\" page uses this form: \n\ngit format-patch origin/master > SOLR-NNNN.patch\nbut I have absolutely no clue whether this matters ;(\n\nNot that it matters much, we'll go from here. ",
            "id": "comment-15424967"
        },
        {
            "date": "2016-08-17T20:19:01+0000",
            "author": "Erick Erickson",
            "content": "Well, I suspect my problem applying the patch was using the 'patch' command rather than the `git apply` command. Y'a learn something new every day.\n\nAnyway, precommit and test both pass. I haven't dived into the code yet, so anybody who wants to get there ahead of me feel free, especially anyone familair with faceting.\n\nOtherwise I'll try to get to it by next week, but it'll be a bit of slow slogging given that's relatively new code to me. ",
            "id": "comment-15425285"
        },
        {
            "date": "2016-08-27T18:04:02+0000",
            "author": "Erick Erickson",
            "content": "I took a quick look at the code and nothing jumps out at me. I'd really appreciate it if someone more familiar with faceting could take a glance.\n\nI'll be gone for the next 10 days, anyone with the motivation please feel free to go ahead and grab it.\n\nErick ",
            "id": "comment-15441988"
        },
        {
            "date": "2016-10-19T21:07:41+0000",
            "author": "Mike Lissner",
            "content": "Well, faceted items with groups is one heck of a gotcha. Any chance this can be reviewed any time soon? Also, grasping at straws, any chance it could land in the 4.x series? We just did a huge upgrade to 4.10.5, but we're not at all ready for the big jump to 5 or 6. ",
            "id": "comment-15589863"
        },
        {
            "date": "2016-10-19T22:51:48+0000",
            "author": "Shawn Heisey",
            "content": "There is pretty much zero chance that a new feature like this will end up in 4.x or 5.x.  With the release of 6.0, all development on 4.x ceased, and 5.x went into maintenance mode.  In maintenance mode, you'll usually only see trivial improvements and very significant bugfixes. ",
            "id": "comment-15590111"
        },
        {
            "date": "2016-10-20T04:00:19+0000",
            "author": "David Smiley",
            "content": "Mike Lissner have you looked at Collapse & Expand to see if it would fulfill your needs?  I wish group=true would just go away in lieu of C&E. ",
            "id": "comment-15590696"
        },
        {
            "date": "2016-10-20T04:02:50+0000",
            "author": "David Smiley",
            "content": "Oh LOL yes you are the same commenter on the ref guide \u2013 time for me to get some sleep :-P    So yes it appears C&E does address your needs.  The group=true \"Result Grouping\" has code intermingled terribly with the QueryComponent and various other places and it's been a PITA to maintain. ",
            "id": "comment-15590703"
        },
        {
            "date": "2016-10-20T04:08:19+0000",
            "author": "Mike Lissner",
            "content": "I had a hunch, but figured I'd check. Totally understand. We need to do the upgrade to 6. ",
            "id": "comment-15590718"
        },
        {
            "date": "2016-10-20T04:10:00+0000",
            "author": "Mike Lissner",
            "content": "I've been firing on all mediums today! I also commented in the solr users list, where I'm hoping to get a conversation going around ironing out all this confusion. Two features doing the same thing isn't a great situation... ",
            "id": "comment-15590725"
        },
        {
            "date": "2016-10-24T02:54:31+0000",
            "author": "Erick Erickson",
            "content": "OK, I was all ready to (finally) commit this this weekend and ran into problems.\n\nThe trivial one is that for 6x, SolrIndexSearcher.getLeafReader is now getSlowAtomicReader, but that's easy.\n\nThe two more \"interesting\" ones are:\n\n1> in 6x I now get test failures in SimpleFacesTest.testSimpleGroupedFacets. The problem is that over in FacetFieldProcessor, around lines 220 maxTopVals is calculated. Due to the casting to a long and back to an int, maxTopVals becomes a negative number and this line barfs with a negative index exception:\n\nfinal PriorityQueue<Slot> queue = new PriorityQueue<Slot>(maxTopVals).\n\nAha, sez I, it must be changes to FacetFieldProcessor. So I started diving into that code and got lost. This only happens in the \"uif\" case where facet.limit < 0 from testSimpleGroupedFacets. So I tried to see how it all worked originally and.... the other tests that have a negative facet.limit don't get to that code.\n\nSince the faceting code is something I'm not that up on I gave up at that point. Any clues as to what the right thing to do is?\n\n****************\n2> Trunk has moved to the DocValues iterator (see LUCENE-7407) so we have to make two separate patches. I tabled that though until we get 6x in shape. Anyone who wants to should feel free to do that though.\n\n\n ",
            "id": "comment-15600766"
        },
        {
            "date": "2016-10-24T12:14:18+0000",
            "author": "Yonik Seeley",
            "content": "Looking at the code added to UnInvertedField for this, I realized that it's just faceting by field X and then finding the number of unique values in field Y for each bucket.\n\nIn JSON syntax:\n\njson.facet={\n  myfacet : {\n    type: terms,\n    field : X,\n    facet : {\n      ycount : \"unique(Y)\"  // this will be the grouped count\n    }\n  }\n}\n\n\n\n\\Which makes me wonder if we can utilize the facet module more.  Some advantages of doing so:\n\n\tsupport for other field types w/o insanity (numerics, multiValued, etc)\n\tdistributed support\n\n ",
            "id": "comment-15601789"
        },
        {
            "date": "2016-10-25T12:10:16+0000",
            "author": "Danny Teichthal",
            "content": "Yonik Seeley I want to make sure I got this right.\nYou say that the group.facet functionality is exactly the same as calling JSON API with unique function applied on the group.field.\nFor current patch it means:\nNo need to touch the UnInverted field code, instead we should just pass the calculation to the JSON API and add a unique calculation on the group.field from our query.\nDid I get it right?\n\nIf it is true:\n1. Will it have the same or better performance than current patch?\n2. Will we also have transparent support also in prefix facet and facet query (the patch doesn't support this currently)?\n ",
            "id": "comment-15605136"
        },
        {
            "date": "2016-10-27T21:31:17+0000",
            "author": "Jim Musil",
            "content": "I took a moment to run some tests comparing performance between the solution that Yonik posted and the original group.facet=true. \n\nI validated that the counts for multivalued fields are correct using the JSON Facet API.\n\nAdditionally, the performance appears exceptional versus the original problem for which this ticket was raised. \n\nJim Musil ",
            "id": "comment-15613290"
        },
        {
            "date": "2016-10-28T00:42:23+0000",
            "author": "Erick Erickson",
            "content": "Jim Musil: \n\nWhat does that mean? How does Yonik's solution compare with this patch?\n\nIf Yonik's solution works, does that mean we should close this JIRA without applying this patch?\n\nThanks. ",
            "id": "comment-15613813"
        },
        {
            "date": "2016-11-23T22:18:36+0000",
            "author": "Erick Erickson",
            "content": "I'm thoroughly confused about the state of these two JIRAs, this one and SOLR-4763.\n\n1> Do JSON facets supersede this? Should we just be moving to JSON facets? If yes, has the refinement step been added to JSON facets? Or is it even necessary/relevant?\n\n2> does enabling DocValues sidestep this problem? We're recommending docValues for grouping and faceting after all. On some tests I did having DocValues for these fields sped made the timings roughly equal, but that may just mean I'm not testing correctly.\n\n3> Last time I was in here on 23-Oct, there were some problems with the patch. Any progress on that front? I just ran the test that was failing so it looks like maybe the changes for SOLR-9654 Yonik Seeley might have addressed point <1>. Not sure there's really anything to be done for <2>.\n ",
            "id": "comment-15691507"
        },
        {
            "date": "2016-11-23T22:34:46+0000",
            "author": "Jim Musil",
            "content": "Erick, I'm not sure I'm qualified to make a call on this, but from my perspective JSON Facets solves the original problem. If I was tackling this problem from the beginning today, the answer would simply be \"Use JSON Facets\".\n ",
            "id": "comment-15691534"
        },
        {
            "date": "2016-12-30T01:52:55+0000",
            "author": "Erick Erickson",
            "content": "Actually, probably previous to 6.4. The consensus seems to be use JSON facets.\n\nIf JSON facets don't really answer we can re-open this ",
            "id": "comment-15786625"
        },
        {
            "date": "2018-09-26T23:12:34+0000",
            "author": "Vasily Volkov",
            "content": "Erick Erickson could you please confirm this is fixed in Solr 7.2.1\n\nThanks! ~ ",
            "id": "comment-16629511"
        },
        {
            "date": "2018-09-27T15:02:35+0000",
            "author": "Erick Erickson",
            "content": "Here's how to read these JIRAs:\n\nIf the status is \"fixed\", then the \"fix version\" is accurate. So in this case this was first fixed in 6.4 and 7.0.\u00a0Every releases subsequent to those will contain the fix, so 6.4.x, 6.5.x, 6.6.x 7.0.1, 7.x etc all have this fix. Including 7.2.1 ",
            "id": "comment-16630575"
        }
    ]
}