{
    "id": "LUCENE-8494",
    "title": "CFS leaks a file on exception opening it",
    "details": {
        "components": [
            "core/codecs"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "If CFS hits an exception opening its file, it will leak the file handle. Found by Jenkins: https://jenkins.thetaphi.de/job/Lucene-Solr-7.x-Solaris/808/\n\n\n java.lang.RuntimeException: MockDirectoryWrapper: cannot close: there are still 7 open files: {_j.cfs=1, _h.cfs=1, _e.cfs=1, _g.cfs=1, _i.cfs=1, _k.cfs=1, _f.cfs=1}\n...\nCaused by: java.lang.RuntimeException: unclosed IndexInput: _f.cfs\n        at org.apache.lucene.store.MockDirectoryWrapper.addFileHandle(MockDirectoryWrapper.java:730)\n        at org.apache.lucene.store.MockDirectoryWrapper.openInput(MockDirectoryWrapper.java:773)\n        at org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.<init>(Lucene50CompoundReader.java:78)\n\n\n\nLooks like it needs to move opening of handle into the try block (untested):\n\ndiff --git a/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java b/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java\nindex 7526c88c20..db54ecdee2 100644\n--- a/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java\n+++ b/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java\n@@ -75,8 +75,8 @@ final class Lucene50CompoundReader extends Directory {\n     }\n     expectedLength += CodecUtil.footerLength(); \n \n-    handle = directory.openInput(dataFileName, context);\n     try {\n+      handle = directory.openInput(dataFileName, context);\n       CodecUtil.checkIndexHeader(handle, Lucene50CompoundFormat.DATA_CODEC, version, version, si.getId(), \"\");\n       \n       // NOTE: data file is too costly to verify checksum against all the bytes on open,",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16608478",
            "author": "Robert Muir",
            "content": "duh, this can only be a bug in the directory... having a slow morning \n\nI think the most likely suspect is races between MockDirectoryWrapper.addFileHandle/removeFileHandle etc? They have some non-atomic conditional logic tracking counters in some maps, without synchronizing on the maps.\n\nSo i think this test with threads just failed because of races there? ",
            "date": "2018-09-09T15:57:55+0000"
        },
        {
            "id": "comment-16608837",
            "author": "Dawid Weiss",
            "content": "From a quick look all methods that use openFiles look like they set up a monitor on this, so it should be fine?...  ",
            "date": "2018-09-10T08:03:46+0000"
        },
        {
            "id": "comment-16609020",
            "author": "Robert Muir",
            "content": "If only there was just openFiles. You got openFiles, openFilesDeleted, unsyncedFiles, openFilesForWrite, etc. At least one of these even has a public getter, so you literally can guarantee zero correctness. ",
            "date": "2018-09-10T11:09:50+0000"
        },
        {
            "id": "comment-16609030",
            "author": "Dawid Weiss",
            "content": "Fair enough, I just looked at that one variable. ",
            "date": "2018-09-10T11:20:46+0000"
        }
    ]
}