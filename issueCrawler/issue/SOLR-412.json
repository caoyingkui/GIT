{
    "id": "SOLR-412",
    "title": "XsltWriter does not output UTF-8 by default",
    "details": {
        "affect_versions": "1.2",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Response Writers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "XsltWriter outputs XML text in ISO-8859-1 encoding by default.\n\nTomcat 5.5 has URIEncoding=\"UTF-8\" set in the <Connector> element as described in the Wiki.\n\nThis outout description in the XML: \n\n<xsl:output method=\"xml\" encoding=\"utf-8\" />\n\ngives output with this header:\n\nHTTP/1.1 200 OK\nServer: Apache-Coyote/1.1\nContent-Type: text/xml;charset=ISO-8859-1\nTransfer-Encoding: chunked\nDate: Wed, 14 Nov 2007 17:49:11 GMT\n\nI had to change the <xsl:output> directive to this:\n\n <xsl:output media-type=\"text/xml; charset=UTF-8\" encoding=\"UTF-8\"/>\n\nThis is the root cause of SOLR-233.",
    "attachments": {
        "diff-2009-10-22": "https://issues.apache.org/jira/secure/attachment/12424123/diff-2009-10-22"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Lance Norskog",
            "id": "comment-12542570",
            "date": "2007-11-14T20:00:43+0000",
            "content": "SOLR-233 was repaired with a band-aid. This bug describes the root cause of the problem. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12542609",
            "date": "2007-11-14T22:11:51+0000",
            "content": "i'm confused as to what the fix here would be... what do you think Solr should do instead of the current behavior?  the XSLTResponseWriter takes the media-type and uses it as the Content-Type ... Tomcat decides that since the Content-Type doesn't have a charset, it will add one (it's default, which i'm assuming can be configured in the tomcat configs)\n\n...what would you suggest as an improvement?\n\n(i agree UTF-8 should be the Solr default as much as possible ... but the point of the XSLTResponseWriter is to give the xslt creator total control over the content-type ... doing anything that might circumvent their intentions seems like a pad idea). "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12543249",
            "date": "2007-11-17T02:47:46+0000",
            "content": "I am not an XSL expert. From what I can tell, the XSLT\ndocumentation says that this:\n    <xsl:output method=\"xml\" encoding=\"utf-8\" />\n    <xsl:output media-type=\"text/xml; charset=UTF-8\"\nare equivalent. It seems like both should create XML\nencoded in UTF-8, and should should create the same\nContent-type header line. My bug report is that the\nmedia-type form works, but that the method=\"xml\" form\ndoes not.\n\nI would not be surprised to learn that the\nmethod=\"xml\" form does not do what it looks like; at\nthis point I have no respect for the XSLT language. \nThank you for your time and attention to my humble\ncomplaint.\n\nLance\n\n\u2014 \"Hoss Man (JIRA)\" <jira@apache.org> wrote:\n\nhttps://issues.apache.org/jira/browse/SOLR-412?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12542609\n\n\n\n      ____________________________________________________________________________________\nNever miss a thing.  Make Yahoo your home page. \nhttp://www.yahoo.com/r/hs "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12545160",
            "date": "2007-11-24T06:10:06+0000",
            "content": "based on my reading of: http://www.w3.org/TR/xslt20/#element-output\n\nthe \"method\" attribute exists solely to instruct the transformer how to generate the output ... it appears to exist largely to support hacks for html but also to support plain text output.\n\n\"encoding\" dictates the actual character encoding used in the output stream.\n\n\"media-type\" is ... the media-type, which if unspecified defaults to either \"text/xml\" if method=\"xml\" or \"text/html\" or \"text/plain\" for the corrisponding methods ... but the default media-type does not ever seem to be influenced by the \"encoding\" attribute.\n\n\nI'm not convinced there isn't something Solr can do to handle this situation better, i just don't know what it is. "
        },
        {
            "author": "Age Jan Kuperus",
            "id": "comment-12773501",
            "date": "2009-11-04T14:52:03+0000",
            "content": "IMHO the documentation in xslt 1.0 (http://www.w3.org/TR/xslt#output) is a bit clearer on the usage of these fields:\n\n\"The method attribute on xsl:output identifies the overall method that should be used for outputting the result tree. The value must be a QName. If the QName does not have a prefix, then it identifies a method specified in this document and must be one of xml, html or text.\"\n\n\"encoding specifies the preferred character encoding that the XSLT processor should use to encode sequences of characters as sequences of bytes; the value of the attribute should be treated case-insensitively; the value must contain only characters in the range #x21 to #x7E (i.e. printable ASCII characters); the value should either be a charset registered with the Internet Assigned Numbers Authority [IANA], [RFC2278] or start with X-\"\n\n\"media-type specifies the media type (MIME content type) of the data that results from outputting the result tree; the charset parameter should not be specified explicitly; instead, when the top-level media type is text, a charset parameter should be added according to the character encoding actually used by the output method\"\n\nIf I understand this correctly, this means the correct output specification is <xsl:output method=\"xml\" encoding=\"utf-8\" />, and <xsl:output media-type=\"text/xml; charset=UTF-8\"/> should never be used. \n\nMy suggestion would be to change XSLTResponseWriter.getContentType() in such a way that (in pseudocode):\nif encoding is null\n..  encoding = \"utf-8\"\nend if\nif  media-type is not null\n..  /* next if is for compatibility with the workaround only */\n..  if media-type contains \"charset='\n....    return media-type\n..  else\n....    return media-type + \"; charset=\\\"\" + encoding\n..  end if\nelse\n..  if method is \"html\" or the first element in the final output is <html>\n....    media-type = \"text/html\"\n..  elseif method is \"text\"\n....    media-type = \"text/plain\"\n..  else /* it must be xml */\n....    media-type = \"text/xml\"\n..  end if\n..  return media-type + \"; charset=\\\"\" + encoding\nend if "
        },
        {
            "author": "Age Jan Kuperus",
            "id": "comment-12773913",
            "date": "2009-11-05T12:08:10+0000",
            "content": "Attached a patch against the 2009-10-22 daily tgz as we implemented it, which correctly handles all legal situations we tried, including the defaults. \n\nThis patch does not explicitly handle two corner cases (this is documented in the patch), which could lead to less expected results (I can't test that here):\n\n1) html documents without explicit <xsl:output method=\"html\" .../> will be treated as xml. IMHO this situation should never occur as it is bad XSLT programming behaviour.\n\n2) the (IMHO incorrect) previous solution (<xsl:output media-type=\"...; charset=... encoding=.../>) will result in a double charset definition. Although that is incorrect, it is accepted without error by Firefox and possibly by all browsers (I did not test that) . As stated before, it should not be done that way. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12779180",
            "date": "2009-11-17T22:43:30+0000",
            "content": "IMHO the documentation in xslt 1.0 (http://www.w3.org/TR/xslt#output) is a bit clearer on the usage of these fields\n\nI'm not sure if looking at an older specification proposal is really the right way to go here.  Shouldn't the fact that all of that language was removed from the XSLT 2.0 spec suggest that it was changed for a reason? "
        },
        {
            "author": "Age Jan Kuperus",
            "id": "comment-12780284",
            "date": "2009-11-19T21:44:50+0000",
            "content": "I agree. Although I was pretty sure XSLT 2.0 was even stricter but could not immediately find a formal reference.\nSo I did some more research today and found the following confirmation in http://www.w3.org/TR/xslt-xquery-serialization/, which is part of XSLT 2.0:\n\n\"media-type \tA string of Unicode characters specifying the media type (MIME content type) [RFC2046]; the charset parameter of the media type MUST NOT be specified explicitly in the value of the media-type parameter\".\n\nTherefore I would like you to have a look at my patch and comment on it (or even commit it . Committing this patch would also require the patches for SOLR-233 and SOLR-514  to be undone (as their results are illegal in both XSLT 1.0 and 2.0), and possibly has documentation consequences. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12782701",
            "date": "2009-11-26T00:52:24+0000",
            "content": "Ok, i've become comvinced that we should do something like the psuedo-code Age posted above ... not so much by the additional xslt-query-serialization refrnece, but by thinking through the practical use cases...\n\n\n\tIf a template specifies a charset in it's media-type property it doesnt' change anything for those people\n\tIf people have media-types w/o charset's but they do declare an encoding then we're matching their wishes as best we can, and if they don't like it they can add a charset to the media-type\n\n\n\nAge: I haven't looked carefully at your patch, but if we can fix the double charset problem you described (which should be easy with a simple substring test) then i'm +1 for making this change. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13836522",
            "date": "2013-12-02T13:58:28+0000",
            "content": "I believe this is fixed in 3.1 by SOLR-2391. Have looked in code but not verified by testing. Please re-open if anyone still thinks there is work left on this. "
        }
    ]
}