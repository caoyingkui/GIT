{
    "id": "LUCENE-5858",
    "title": "Move back compat codecs out of core/ into codecs/ jar",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "These take significant space and bloat core lucene. Not everyone needs the ability to read ancient indexes (especially building a new app). \n\nWe should move this cruft out of the core/ jar. codecs/ is the obvious place, its already setup in the build system for tests and everything else.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14079559",
            "author": "Hoss Man",
            "content": "IIUC: This means that, moving forward, users who want to upgrade, and have indexes built with older versions of Lucene, will need to include the codecs.jar as well as the core.jar in their applications as well ... correct?\n\nSince a big part of the reason the codecs modules already exists was so apps that didn't want/need those optional codecs wouldn't have to load them, would it make more sense to create a new backcompat-codecs module/jar instead of lumping them all in codecs.jar? ",
            "date": "2014-07-30T17:17:10+0000"
        },
        {
            "id": "comment-14079580",
            "author": "Robert Muir",
            "content": "What is the problem with codecs/ ?\n\nIts not mandatory today. Its only mandatory for tests, which is the advantage, there is no risk to the build system moving stuff there. It removes it from the core jar and makes it optional, whereas today its mandatory.\n\nThis is the conservative route: trying to add a new jar is more complex... I'm not against it, I just want to make an improvement step for 5.0. If someone else wants to do the build system work for some backcompat module, thats great, but it shouldnt be a requirement for getting this crap out of core.\n\nEspecially since its trunk, core/ shouldn't be cluttered with all this cruft. ",
            "date": "2014-07-30T17:23:06+0000"
        },
        {
            "id": "comment-14079624",
            "author": "Hoss Man",
            "content": "Its not mandatory today. Its only mandatory for tests, which is the advantage, there is no risk to the build system moving stuff there. It removes it from the core jar and makes it optional, whereas today its mandatory.\n\nI guess i'm misunderstanding something about your initial suggestion.  (There are also a lot of instances of \"It\" in that paragraph that that are confusing me about which \"it\" you are refering to at any given time ... sometimes it seems like \"it\" is the codecs module, other times i think \"it\" refers to the backcompat codecs?\n\nHere's the point i was trying to make...\n\nToday: a simple-app.jar that wants extremely basic search functionality, can depend exclusively on lucene-core.jar and build an index and search that index.  If that simple-app.jar built an index with lucene-core-4.5.jar and then later upgraded to use lucene-core-4.9.jar, then simple-app.jar would continue to work just fine\n\nIf i understand your idea correctly: then starting in 4.10 the back compat codecs would now live in lucene-codecs.jar.  So simple-app.jar would need to include both lucene-core-4.10.jar and lucene-codecs-4.10.jar in it's classpath if it wanted to keep reading those older 4.5-4.9 indexes.  There might however be some trivial-app.jar that doesn't care about index backcompat at all, and it only needs to load lucene-core-4.10.jar\n\nAm i correct so far?\n\nThe concern i have is that when it comes to upgrading, the \"simple-app.jar\" scenerio seems more common to me then the \"trivial-app.jar\" situation, and for the simple-app.jar situation, moving the backcompat codecs into lucene-codecs.jar doesn't actually do anything to reduce the \"bloat\" of classes in the lucene jars it includes \u2013 it makes the bloat worse \u2013 because now in addition to the core classes, and the backcompat codecs, simple-app.jar also has to include all of the \"optional\" codecs (like simpletext) that already exist in the lucene-codecs.jar.\n\nThe bloat of unnecessary classes has been reduced for trivial-app.jar, but is that really the situation we should be optimizing for?\n\nThe key question i'm raising is:\n\nDoes it really make sense to increase the size of jars needed for apps that want to read old indexes, in order to decrease the size of the jars needed for (in my opinion) \"toy\" apps that don't care about index compatibility?\n\nMoving the backcompat codecs into their own jar seems like a great idea \u2013 i'm just not sure if any \"real\" lucene users benefit from moving them into the existing codecs jar.\n ",
            "date": "2014-07-30T17:46:06+0000"
        },
        {
            "id": "comment-14079642",
            "author": "Uwe Schindler",
            "content": "I would also suggest to move the backwards codecs into a separate JAR, not the experimental codecs module! We should also maybe add some useful text to the Codec.forName() and PostingsFormat.forName() APIs, so it tells the user that he might need to add lucene-backwards-codecs.jar into classpath. ",
            "date": "2014-07-30T17:57:18+0000"
        },
        {
            "id": "comment-14079676",
            "author": "Robert Muir",
            "content": "If people really want a separate jar, then fine.\n\nBUT\n\nwe remove them from the normal \"rotation\" so core testing has a clean classpath and we can remove even more cruft (like packed ints). These days, we have dedicated TestXXXFormat for every codec, so this is not really needed anymore, instead just an annoyance: wasted time debugging test failures that are just quirks in old behavior of ancient codecs (e.g. not supporting missing values), and false jenkins failures because newer features arent supported (causing tons of SuppressCodecs everywhere). I think it made sense for the initial 3.x->4.x cutover, we didn't have such a mechanism for testing at that point, nor did we have really so many new index features that various search functionality was trying to use: blasting them thru all the tests was our only choice. But I think these days it does more harm than good. Most of the old formats we are still testing (like 3.0) are years and years old and just don't support the modern features. We should be looking forwards instead of backwards.\n\nMy motivation here is to make backwards compatibility simpler and less of a hassle for us as a project, not more difficult and more complex. ",
            "date": "2014-07-30T18:11:05+0000"
        },
        {
            "id": "comment-14080909",
            "author": "Adrien Grand",
            "content": "+1 on these ideas:\n\n\tcreating a new module/jar that would contain old codecs, their tests (TestXXXFormat), TestBackwardCompatibility and potentially classes that only old codecs use\n\tremoving old codecs from rotation (but still use the codecs from the lucene/codecs modules, like SimpleText, etc. which have all codec features)\n\tadding information about the backward-compat and codecs modules to the javadocs and exceptions of Codec/PostingsFormat/DocValuesFormat.forName\n\n\n\nOn a side note, if we want to keep backward compatibility manageable, I think we should think about releasing Lucene 5.0 soon (4.x is almost 2 years old already). ",
            "date": "2014-07-31T14:01:17+0000"
        },
        {
            "id": "comment-14080939",
            "author": "Uwe Schindler",
            "content": "On a side note, if we want to keep backward compatibility manageable, I think we should think about releasing Lucene 5.0 soon (4.x is almost 2 years old already).\n\nAt least to get the 3.x backwards codec away, To do this, we just need to fix some minor problems with the new Stored/Indexed/Docvalues field API. Robert has some problems with it. I am strongly in fixing those.\n\nAlso the Solr \"Server\" issues should be solved, so Solr no longer ships as Webapp, but as separate server.\n\nThis are low-hangging fruits for 5.0... ",
            "date": "2014-07-31T14:36:52+0000"
        },
        {
            "id": "comment-14080943",
            "author": "Uwe Schindler",
            "content": "Also the Solr \"Server\" issues should be solved, so Solr no longer ships as Webapp, but as separate server.\n\nAt least hiding that there is a \"servlet\"-like container called embedded Jetty behind... It should at least feel like a server (own port, own main() routine, so people can make a \"windows/unix service\" out of it would suffice)... ",
            "date": "2014-07-31T14:40:42+0000"
        },
        {
            "id": "comment-14080946",
            "author": "Robert Muir",
            "content": "Can we discuss such things on another issue? This one is about simplifying backwards compatibility. ",
            "date": "2014-07-31T14:44:07+0000"
        },
        {
            "id": "comment-14090334",
            "author": "David Smiley",
            "content": "removing old codecs from rotation (but still use the codecs from the lucene/codecs modules, like SimpleText, etc. which have all codec features)\n\n+1\n\nI don't have a strong opinion wether the old codecs move to some new jar or to existing codecs.jar.  The existing codecs.jar seems simple and sufficient.\n\nIndependently (but related) to this matter, I wish a test could articulate what capabilities (e.g. need doc-values, need missing-value, needs term vectors with payloads) it wants from the codec versus listing codec names it does not want. This issue of putting old codecs out of rotation ameliorates the need for such a feature, but one day there's going to be something new and a test using it is going to be blacklisting stuff again. ",
            "date": "2014-08-08T05:38:17+0000"
        },
        {
            "id": "comment-14117324",
            "author": "ASF subversion and git services",
            "content": "Commit 1621750 from Adrien Grand in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621750 ]\n\nLUCENE-5858: Create branch. ",
            "date": "2014-09-01T11:27:55+0000"
        },
        {
            "id": "comment-14117335",
            "author": "ASF subversion and git services",
            "content": "Commit 1621751 from Adrien Grand in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621751 ]\n\nLUCENE-5858: First iteration.\n\nTests pass but the rest (eg. javadocs) might be completely broken. ",
            "date": "2014-09-01T11:37:06+0000"
        },
        {
            "id": "comment-14117368",
            "author": "ASF subversion and git services",
            "content": "Commit 1621756 from Adrien Grand in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621756 ]\n\nLUCENE-5858: Add missing files. ",
            "date": "2014-09-01T12:21:02+0000"
        },
        {
            "id": "comment-14117406",
            "author": "ASF subversion and git services",
            "content": "Commit 1621764 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621764 ]\n\nLUCENE-5858: remove some test cruft ",
            "date": "2014-09-01T13:16:52+0000"
        },
        {
            "id": "comment-14117425",
            "author": "ASF subversion and git services",
            "content": "Commit 1621770 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621770 ]\n\nLUCENE-5858: fix javadocs ",
            "date": "2014-09-01T13:31:14+0000"
        },
        {
            "id": "comment-14117445",
            "author": "ASF subversion and git services",
            "content": "Commit 1621790 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621790 ]\n\nLUCENE-5858: clear bogus code/comment up ",
            "date": "2014-09-01T14:03:15+0000"
        },
        {
            "id": "comment-14117459",
            "author": "ASF subversion and git services",
            "content": "Commit 1621805 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621805 ]\n\nLUCENE-5858: remove impersonation ",
            "date": "2014-09-01T14:35:13+0000"
        },
        {
            "id": "comment-14117460",
            "author": "ASF subversion and git services",
            "content": "Commit 1621807 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621807 ]\n\nLUCENE-5858: don't even register RW test codecs, impersonation is removed ",
            "date": "2014-09-01T14:41:59+0000"
        },
        {
            "id": "comment-14117470",
            "author": "ASF subversion and git services",
            "content": "Commit 1621816 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621816 ]\n\nLUCENE-5858: remove remaining unnecessary SuppressCodecs ",
            "date": "2014-09-01T15:01:52+0000"
        },
        {
            "id": "comment-14117485",
            "author": "ASF subversion and git services",
            "content": "Commit 1621828 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621828 ]\n\nLUCENE-5858: remove conditionals around codec features ",
            "date": "2014-09-01T15:26:11+0000"
        },
        {
            "id": "comment-14117495",
            "author": "ASF subversion and git services",
            "content": "Commit 1621832 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621832 ]\n\nLUCENE-5858: add jar ",
            "date": "2014-09-01T15:52:27+0000"
        },
        {
            "id": "comment-14117540",
            "author": "ASF subversion and git services",
            "content": "Commit 1621838 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621838 ]\n\nLUCENE-5858: try to get nightly-smoke passing ",
            "date": "2014-09-01T16:32:52+0000"
        },
        {
            "id": "comment-14117570",
            "author": "ASF subversion and git services",
            "content": "Commit 1621849 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621849 ]\n\nLUCENE-5858: add missing references to backward-codecs ",
            "date": "2014-09-01T17:15:01+0000"
        },
        {
            "id": "comment-14117659",
            "author": "Robert Muir",
            "content": "\n   [smoker] SUCCESS! [0:28:53.961116]\n\n\n\nI think the branch is ready. various conditionals and suppressions around codec features are cleaned up in tests, impersonation is removed, etc. I think this is much more manageable. ",
            "date": "2014-09-01T19:44:26+0000"
        },
        {
            "id": "comment-14117981",
            "author": "Adrien Grand",
            "content": "+1 It looks great. ",
            "date": "2014-09-02T07:24:23+0000"
        },
        {
            "id": "comment-14118090",
            "author": "ASF subversion and git services",
            "content": "Commit 1621957 from Robert Muir in branch 'dev/branches/lucene5858'\n[ https://svn.apache.org/r1621957 ]\n\nLUCENE-5858: trunk->branch ",
            "date": "2014-09-02T11:02:44+0000"
        },
        {
            "id": "comment-14118099",
            "author": "ASF subversion and git services",
            "content": "Commit 1621960 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1621960 ]\n\nLUCENE-5858: Move back compat codecs out of core to their own jar ",
            "date": "2014-09-02T11:14:41+0000"
        },
        {
            "id": "comment-14332852",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:02:15+0000"
        }
    ]
}