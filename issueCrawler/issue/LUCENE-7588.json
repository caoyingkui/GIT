{
    "id": "LUCENE-7588",
    "title": "A parallel DrillSideways implementation",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "6.3.1,                                            7.0",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "6.4",
            "7.0"
        ]
    },
    "description": "Currently DrillSideways implementation is based on the single threaded IndexSearcher.search(Query query, Collector results).\n\nOn large document set, the single threaded collection can be really slow.\n\nThe ParallelDrillSideways implementation could:\n\n1. Use the CollectionManager based method IndexSearcher.search(Query query, CollectorManager collectorManager)  to get the benefits of multithreading on index segments,\n2. Compute each DrillSideway subquery on a single thread.",
    "attachments": {
        "lucene-7588-sort-fix.patch": "https://issues.apache.org/jira/secure/attachment/12846214/lucene-7588-sort-fix.patch",
        "LUCENE-7588.patch": "https://issues.apache.org/jira/secure/attachment/12844916/LUCENE-7588.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15751561",
            "date": "2016-12-15T14:52:37+0000",
            "content": "Hi, I was wondering what is the current process for this kind of patch proposal. I suppose there is a review process. Let me know how I can help. Thanks. ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15751716",
            "date": "2016-12-15T15:54:47+0000",
            "content": "Well, for DrillSideways I'd ping Michael McCandless for the quickest read if he has the time.\n\nBasically you gently prompt the JIRA from time to time and see if you can get someone's attention.\n\nPerhaps a short description of the approach the patch takes would help orient someone who's looking at it.\n ",
            "author": "Erick Erickson"
        },
        {
            "id": "comment-15751726",
            "date": "2016-12-15T15:57:20+0000",
            "content": "Sorry, I have been meaning to have a look at this cool idea/patch, and what you've done (open issue, put patch up, gently nudge) is exactly the right process!  Thank you Emmanuel Keller ... I'll have a look soon. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15751916",
            "date": "2016-12-15T17:17:40+0000",
            "content": "Thanks for your feedback guys, it's pretty clear. FYI, the patch includes unit tests derived from the already existing test on facets. ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15752528",
            "date": "2016-12-15T21:12:18+0000",
            "content": "Thanks Emmanuel Keller: this is an impressive change!\n\nCan you add a minimal javadocs to ParallelDrillSideways, and include @lucene.experimental?\n\nCan you fix the indent to 2 spaces, and change your IDE to not use\nwildcard imports?  (Most of the new classes seem to do so, but at\nleast one didn't).  Or we can fix this up before pushing...\n\nShould CallableCollector be renamed to CallableCollectorManager?\n\nI assume you're using this for your QWAZR search server built on lucene (https://github.com/qwazr/QWAZR)?  Thank you for giving back!\n\nThere are quite a few new abstractions here,\nMultiCollectorManager, FacetsCollectorManager; must they be\npublic?  Can you explain what they do?\n\nIt seems like this change opens up concurrency in 2 ways; the first\nway is it uses the IndexSearcher.search API that takes a\nCollectorManager such that if you had created that\nIndexSearcher with an executor, you get concurrency across the\nsegments in the index.  In general I'm not a huge fan of this\nconcurrency since you are at the whim of how the segments are\nstructured, and, confusingly, running forceMerge(1) on your index\nremoves all concurrency.  But it's better than nothing: progress not\nperfection!\n\nThe second way is that the new ParallelDrillSideways takes its own\nexecutor and then runs the N DrillDown queries concurrently (to\ncompute the sideways counts), which is very different from the current\ndoc-at-a-time computation.  Have you compared the performance, using a\nsingle thread? ... I'm curious how \"doc at a time\" vs \"query at a\ntime\" (which is also Solr's approach) compare.  But, still, the fact\nthat this \"query at a time\" approach enables concurrency is a big win.\n\nI wonder if we could absorb ParallelDrillSideways under\nDrillSideways such that if you pass an executor it uses the\nconcurrent implementation?  It's really an implementation/execution\ndetail I think?  Similar to how IndexSearcher takes an optional\nexecutor. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15755069",
            "date": "2016-12-16T17:53:22+0000",
            "content": "Can you add a minimal javadocs to ParallelDrillSideways, and include @lucene.experimental?\n\nDone.\n\nCan you fix the indent to 2 spaces, and change your IDE to not use\nwildcard imports? (Most of the new classes seem to do so, but at\nleast one didn't). Or we can fix this up before pushing...\n\nDone.\n\nShould CallableCollector be renamed to CallableCollectorManager?\n\nTrue, done.\n\nI assume you're using this for your QWAZR search server built on lucene (https://github.com/qwazr/QWAZR)? Thank you for giving back!\n\nWith pleasure. I think there is few more contributions to come...\n\nThere are quite a few new abstractions here, MultiCollectorManager, FacetsCollectorManager; must they be public? Can you explain what they do?\n\nMultiCollectorManager do with CollectorManager what MultiCollector do with Collector. It wraps a set of CollectorManager as it was only one.\n\n\nIt seems like this change opens up concurrency in 2 ways; the first\nway is it uses the IndexSearcher.search API that takes a\nCollectorManager such that if you had created that\nIndexSearcher with an executor, you get concurrency across the\nsegments in the index. In general I'm not a huge fan of this\nconcurrency since you are at the whim of how the segments are\nstructured, and, confusingly, running forceMerge(1) on your index\nremoves all concurrency. But it's better than nothing: progress not\nperfection!\n\nI agree. That's a first step.\n\n\nThe second way is that the new ParallelDrillSideways takes its own\nexecutor and then runs the N DrillDown queries concurrently (to\ncompute the sideways counts), which is very different from the current\ndoc-at-a-time computation. Have you compared the performance, using a\nsingle thread? ... I'm curious how \"doc at a time\" vs \"query at a\ntime\" (which is also Solr's approach) compare. But, still, the fact\nthat this \"query at a time\" approach enables concurrency is a big win.\n\nI am working on providing a benchmark. What is the good practice for Lucene ? It it okay to provide a benchmark as a test case ?\n\n\nI wonder if we could absorb ParallelDrillSideways under\nDrillSideways such that if you pass an executor it uses the\nconcurrent implementation? It's really an implementation/execution\ndetail I think? Similar to how IndexSearcher takes an optional\nexecutor.\n\nI agree. I think that it is the way it should be. I don't wanted to be too intrusive. ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15755082",
            "date": "2016-12-16T17:56:36+0000",
            "content": "New patch with the following changes:\n\n\tFixes copyright and indentations issues\n\tFacetCollectorManager is no more public.\n\tMultiCollectorManager moved to the right package: org.apache.lucene.search\n\tAdd many Javadoc\n\n ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15759696",
            "date": "2016-12-18T23:36:33+0000",
            "content": "I am working on providing a benchmark. What is the good practice for Lucene ? It it okay to provide a benchmark as a test case ?\n\nWe don't usually do benchmarks as test cases; we could e.g. push the benchmark sources to https://github.com/mikemccand/luceneutil which holds various random Lucene benchmarking utilities.  Or if you just have some simple results to share w/o having the full source code to share, that's better than nothing too \n\nHmm it looks like nothing is testing the new ParallelDrillSideways.search?\n\n\nI wonder if we could absorb ParallelDrillSideways under DrillSideways such that if you pass an executor it uses the concurrent implementation? It's really an implementation/execution detail I think? Similar to how IndexSearcher takes an optional executor.\n\nI agree. I think that it is the way it should be. I don't wanted to be too intrusive.\n\nMaybe we could just add another ctor to DrillSideways taking all\nthe current arguments, plus an executor?  I.e.:\n\n\n  public DrillSideways(IndexSearcher searcher, FacetsConfig config, TaxonomyReader taxoReader, SortedSetDocValuesReaderState state, ExecutorService executor) {\n    ...\n  }\n\n\n\nThen, in the DrillSideways.search method, if executor is non-null,\nwe invoke the concurrent version (ParallelDrillSideways.search\nfrom your patch) internally, as a private method? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15765461",
            "date": "2016-12-20T22:40:34+0000",
            "content": "New patch:\n1. In the DrillSideways.search method, if executor is non-null, we invoke the concurrent version.\n2. The unit test tests effectively the new concurrent methods.\n\nI work on the benchmark now. Michael McCandless I will submit a new bench to your repo luceneutils. ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15768029",
            "date": "2016-12-21T20:02:15+0000",
            "content": "Thanks Emmanuel Keller, this looks great!\n\nCan we maybe simplify the generics and hard-wire R to TopDocs always? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15782658",
            "date": "2016-12-28T10:58:48+0000",
            "content": "One using the search method while providing a CollectorManager expects to be able to extract the result.\n\n\n     public <R> ConcurrentDrillSidewaysResult<R> search(final DrillDownQuery query,\n              final CollectorManager<?, R> hitCollectorManager) throws IOException {}\n\n\n\nIn the meantime, I forgot to expose the new result class \"ConcurrentDrillSidewaysResult<R>\".\nIt is fixed now, I submit the new patch. ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15787350",
            "date": "2016-12-30T09:51:18+0000",
            "content": "Thanks Emmanuel Keller, I'll have a look likely once I'm back from vacation next year. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15794838",
            "date": "2017-01-03T11:27:03+0000",
            "content": "Commit b4a002f7d88a2383852e2bfd95b39bf7f6e33f2f in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b4a002f ]\n\nLUCENE-7588: DrillSideways can now run its queries concurrently ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15794860",
            "date": "2017-01-03T11:42:37+0000",
            "content": "Commit 5b6401b212da883188f45709d1f68addbbdf2c98 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5b6401b ]\n\nLUCENE-7588: DrillSideways can now run its queries concurrently ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15794863",
            "date": "2017-01-03T11:43:10+0000",
            "content": "Thank you Emmanuel Keller! ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15804734",
            "date": "2017-01-06T15:08:35+0000",
            "content": "Hmm the ES jenkins caught this failure:\n\n\n NOTE: reproduce with: ant test  -Dtestcase=TestParallelDrillSideways -Dtests.method=testRandom -Dtests.seed=734B3451E1B6F47B -Dtests.slow=true -Dtests.locale=ar-BH -Dtests.timezone=America/North_Dakota/Center -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 1.87s J2 | TestParallelDrillSideways.testRandom <<<\n   [junit4]    > Throwable #1: org.junit.ComparisonFailure: expected:<1[00]4> but was:<1[]4>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([734B3451E1B6F47B:107115E50D64208]:0)\n   [junit4]    > \tat org.apache.lucene.facet.TestDrillSideways.verifyEquals(TestDrillSideways.java:1034)\n   [junit4]    > \tat org.apache.lucene.facet.TestDrillSideways.testRandom(TestDrillSideways.java:818)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n\nAnd it does repro for me on the current (rev 7ae9ca85d9d920db353d3d080b0cb36567e206b2) branch_6x head.  Emmanuel Keller any ideas? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15805029",
            "date": "2017-01-06T17:13:20+0000",
            "content": "Ok, I am able to reproduce the failure on my own environment. I try to fix that now.\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestParallelDrillSideways -Dtests.method=testRandom -Dtests.seed=734B3451E1B6F47B -Dtests.slow=true -Dtests.locale=ar-BH -Dtests.timezone=America/North_Dakota/Center -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 3.50s | TestParallelDrillSideways.testRandom <<<\n   [junit4]    > Throwable #1: org.junit.ComparisonFailure: expected:<1[00]4> but was:<1[]4>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([734B3451E1B6F47B:107115E50D64208]:0)\n   [junit4]    > \tat org.apache.lucene.facet.TestDrillSideways.verifyEquals(TestDrillSideways.java:1036)\n   [junit4]    > \tat org.apache.lucene.facet.TestDrillSideways.testRandom(TestDrillSideways.java:820)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> Jan 06, 2017 6:09:15 PM com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\n   [junit4]   2> WARNING: Will linger awaiting termination of 1 leaked thread(s).\n   [junit4]   2> Jan 06, 2017 6:09:35 PM com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\n   [junit4]   2> SEVERE: 1 thread leaked from SUITE scope at org.apache.lucene.facet.TestParallelDrillSideways: \n   [junit4]   2>    1) Thread[id=17, name=LuceneTestCase-1-thread-1, state=WAITING, group=TGRP-TestParallelDrillSideways]\n   [junit4]   2>         at sun.misc.Unsafe.park(Native Method)\n   [junit4]   2>         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n   [junit4]   2>         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n   [junit4]   2>         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n   [junit4]   2>         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\n   [junit4]   2>         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n   [junit4]   2>         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n   [junit4]   2>         at java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> Jan 06, 2017 6:09:35 PM com.carrotsearch.randomizedtesting.ThreadLeakControl tryToInterruptAll\n   [junit4]   2> INFO: Starting to interrupt leaked threads:\n   [junit4]   2>    1) Thread[id=17, name=LuceneTestCase-1-thread-1, state=WAITING, group=TGRP-TestParallelDrillSideways]\n   [junit4]   2> Jan 06, 2017 6:09:38 PM com.carrotsearch.randomizedtesting.ThreadLeakControl tryToInterruptAll\n   [junit4]   2> SEVERE: There are still zombie threads that couldn't be terminated:\n   [junit4]   2>    1) Thread[id=17, name=LuceneTestCase-1-thread-1, state=WAITING, group=TGRP-TestParallelDrillSideways]\n   [junit4]   2>         at sun.misc.Unsafe.park(Native Method)\n   [junit4]   2>         at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)\n   [junit4]   2>         at java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2039)\n   [junit4]   2>         at java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:442)\n   [junit4]   2>         at java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1067)\n   [junit4]   2>         at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1127)\n   [junit4]   2>         at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n   [junit4]   2>         at java.lang.Thread.run(Thread.java:745)\n\n\n ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15805350",
            "date": "2017-01-06T19:18:59+0000",
            "content": "Thanks Emmanuel Keller! ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15807272",
            "date": "2017-01-07T10:46:33+0000",
            "content": "Both actual array and expected array contains 24 documents. But not equally sorted.\n\nThe test expects that the retrieved ScoreDoc array is ordered. However the scores are identical for all documents.\n\nAs we are using a multithreaded map/reduce design we can't expect that the order will be preserved.\nMichael McCandless am I right ?\n\nIMHO, the equality check must be modified to only check that each document are present and equals.\n\nHere is the current check test for the ScoreDoc array:\n\n\n    for (int i = 0; i < expected.hits.size(); i++) {\n      if (VERBOSE) {\n        System.out.println(\"    hit \" + i + \" expected=\" + expected.hits.get(i).id);\n      }\n      assertEquals(expected.hits.get(i).id, s.doc(actual.hits.scoreDocs[i].doc).get(\"id\"));\n      // Score should be IDENTICAL:\n      assertEquals(scores.get(expected.hits.get(i).id), actual.hits.scoreDocs[i].score, 0.0f);\n    }\n\n ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15807344",
            "date": "2017-01-07T11:36:50+0000",
            "content": "This patch changes the verifyEquals behaviour. It checks that the documents are present and that they are equals, regardless the order. ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15808257",
            "date": "2017-01-07T22:31:26+0000",
            "content": "Hmm, but in testRandom we seem to always sort by id (a unique field for each document) for each search?\n\nSo, regardless of using a single thread for the search, or doing the map/reduce w/ N threads and merging with TopDocs.merge, the result order should have been identical, I think? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15808262",
            "date": "2017-01-07T22:35:32+0000",
            "content": "Oh I think I may see the issue!  When we call TopDocs.merge in the DrillSideways#search that takes a sort, we are failing to pass that sort on to TopDocs.merge ... so it's not merge-sorting in the correct order? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15809098",
            "date": "2017-01-08T09:40:57+0000",
            "content": "That's the issue. Just fixed, all tests are again ok now.  I upload the patch. ",
            "author": "Emmanuel Keller"
        },
        {
            "id": "comment-15809221",
            "date": "2017-01-08T11:19:39+0000",
            "content": "Thank you Emmanuel Keller, the patch looks great, and fixes the failing seed!  I'll push shortly... ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15809228",
            "date": "2017-01-08T11:24:17+0000",
            "content": "Commit 1aa9c4251289e71ab8e87b03797b20f4a8fda0a5 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1aa9c42 ]\n\nLUCENE-7588: the parallell search method was failing to pass on the user's requested sort when merge-sorting all hits ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15809231",
            "date": "2017-01-08T11:25:23+0000",
            "content": "Commit 373826a69bda27e181eae063abca658798d42cb6 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=373826a ]\n\nLUCENE-7588: the parallell search method was failing to pass on the user's requested sort when merge-sorting all hits ",
            "author": "ASF subversion and git services"
        }
    ]
}