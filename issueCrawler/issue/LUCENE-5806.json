{
    "id": "LUCENE-5806",
    "title": "Extend expression grammar to allow advanced \"variables\"",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "We currently allow dots in \"variable\" names in expressions, so that we can fake out object access.  We should extend this to allow array access as well (both integer and string keys).  This would allow faking out full object nesting through bindings.",
    "attachments": {
        "LUCENE-5806.patch": "https://issues.apache.org/jira/secure/attachment/12654127/LUCENE-5806.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14052564",
            "author": "Ryan Ernst",
            "content": "Patch with tests. ",
            "date": "2014-07-04T17:06:57+0000"
        },
        {
            "id": "comment-14052566",
            "author": "Uwe Schindler",
            "content": "Elasticsearch scripts? ",
            "date": "2014-07-04T17:10:15+0000"
        },
        {
            "id": "comment-14052570",
            "author": "Ryan Ernst",
            "content": "Yup! ",
            "date": "2014-07-04T17:11:49+0000"
        },
        {
            "id": "comment-14052571",
            "author": "Uwe Schindler",
            "content": "Cool! I was waiting so long! ",
            "date": "2014-07-04T17:14:39+0000"
        },
        {
            "id": "comment-14052574",
            "author": "Uwe Schindler",
            "content": "I did not find a test where such a \"fake variable\" is used in a binding. How would foo.bar.strindex['abc'] look like in a binding? ",
            "date": "2014-07-04T17:21:36+0000"
        },
        {
            "id": "comment-14052584",
            "author": "Ryan Ernst",
            "content": "I only added tests from the compiler side, but I can add one with bindings actually using extended variables.  It would continue to show up to bindings as a string name, which the binding would have to parse.\n\nI thought about using the parser to break up the \"variable\" into components, and passing a variable context to the bindings instead of (or alternatively to) the simple string variable names.  It might be a little more efficient (since the parser has to find these pieces anyways when matching), but I opted for simplicity for now (let the bindings parse as they like).  In either case, the cost is still occurred once (at the beginning of an evaluate() call) and not per document. ",
            "date": "2014-07-04T17:37:09+0000"
        },
        {
            "id": "comment-14052586",
            "author": "Ryan Ernst",
            "content": "Note that parsing is only necessary in the bindings if you want to use these dynamically.  If you know that fields are accessed through \"doc\" and they are \"foo\" and \"bar\", then simply adding the following to bindings should work (with ES syntax as an example):\n\n\n\"doc['foo'].value\"\n\"doc['bar'].value\"\n\n ",
            "date": "2014-07-04T17:40:56+0000"
        },
        {
            "id": "comment-14052601",
            "author": "Uwe Schindler",
            "content": "OK, this is what I expected. I am fine with that if the \"binding\" is normalized:\n\n\ndoc['foo'].value\ndoc [\"foo\"].value\ndoc[ 'foo' ].value\n\n\n\nis all the same so, the binding should be somehow normalized? Like:\n\n\ndoc['foo'].value\n\n\n\nOtherwise its hard to hardcode bindings like you mentioned in your last post. ",
            "date": "2014-07-04T18:05:13+0000"
        },
        {
            "id": "comment-14053992",
            "author": "Jack Conradson",
            "content": "fragment\nOBJECT\n    : ID (ARRAY ARRAY*)?\n    ;\n\nCant the above fragment just be the below fragment?  (I admit it's been a while since I've used ANTLR.)\n\nfragment\nOBJECT\n    : ID ARRAY*\n    ; ",
            "date": "2014-07-07T18:38:16+0000"
        },
        {
            "id": "comment-14054042",
            "author": "Ryan Ernst",
            "content": "\nCant the above fragment just be the below fragment? (I admit it's been a while since I've used ANTLR.)\n\nfragment\nOBJECT\n: ID ARRAY*\n;\nYes of course! I'll have that fixed in my next patch (with string normalization). ",
            "date": "2014-07-07T19:09:36+0000"
        },
        {
            "id": "comment-14054186",
            "author": "Ryan Ernst",
            "content": "New patch with simplified grammar (thanks Jack Conradson), and string normalization.  I am not doing whitespace normalization because the grammar does not currently allow it (we can change that, but I didn't see why allowing whitespace in the middle of variables would be useful?).  I also added a helper class to parse variable names into their pieces (array and member access), and added demo examples for both static and dynamic use cases. ",
            "date": "2014-07-07T21:47:58+0000"
        },
        {
            "id": "comment-14054255",
            "author": "Jack Conradson",
            "content": "If you want to normalize the tokens on-the-fly you can actually write a small java snippet right into the grammar.\n\nAn example of this would be the following which removes both the single quote characters from a string inline.  The syntax should be in one of your books for this .\n\nSTRING\n@after\n{\n    setText(getText().substring(1, getText().length() - 1).replace(\"\\\\\\\\\", \"\\\\\").replace(\"'\", \"'\"));\n}\n    : '\\'' STRINGCHAR* '\\''\n    ;\n\nThe other option to consider would be not skipping over whitespace but actually inserting WS!? (where the '!' removes the WS token from the parse tree tokens) throughout the grammar for finer control.  This may be beyond the scope of this JIRA, though, and would potentially prevent something like \" doc[ 'foo' ].value \" altogether.  I'm not sure whether or not this is actually allowed in JavaScript.\n\nEdit: Ah, because it's a fragment this is all moot. ",
            "date": "2014-07-07T22:33:14+0000"
        },
        {
            "id": "comment-14055851",
            "author": "Ryan Ernst",
            "content": "Edit: Ah, because it's a fragment this is all moot.\n\nYup, I did try something like this, but couldn't get it working.  I think it may be possible, but what I have here works, and I don't think is too bad.\n\nUwe Schindler Jack Conradson I think this is ready.  Do you have any more concerns? ",
            "date": "2014-07-09T05:00:06+0000"
        },
        {
            "id": "comment-14056503",
            "author": "Jack Conradson",
            "content": "Current patch is fine with me.  This can always be re-evaluated in the future. ",
            "date": "2014-07-09T17:43:42+0000"
        },
        {
            "id": "comment-14056893",
            "author": "ASF subversion and git services",
            "content": "Commit 1609337 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1609337 ]\n\nLUCENE-5806: Extend expression grammar to allow advanced \"variables\" ",
            "date": "2014-07-09T23:18:59+0000"
        },
        {
            "id": "comment-14056907",
            "author": "ASF subversion and git services",
            "content": "Commit 1609338 from Ryan Ernst in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1609338 ]\n\nLUCENE-5806: Extend expression grammar to allow advanced \"variables\" ",
            "date": "2014-07-09T23:37:40+0000"
        }
    ]
}