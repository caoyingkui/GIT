{
    "id": "LUCENE-5021",
    "title": "NextDoc NPE safety when bulk collecting",
    "details": {
        "components": [
            "core/index",
            "core/other"
        ],
        "fix_versions": [],
        "affect_versions": "3.6.2",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "Hello,\n\nI would like to apply ACL once as a PostFilter and I therefore need to bulk this call since round trips would severely decrease performances.\n\nI tried to just stack them on the DelegatingCollector using this collect :\n\n    @Override\n    public void collect(int doc) throws IOException {\n        while ((doc = scorer.nextDoc()) != DocIdSetIterator.NO_MORE_DOCS) \n{\n            docs.put(getDocumentId(doc), doc);\n        }\n\n        batchCollect();\n    }\n\nDepending on the Scorer it may or it may not work. Indeed when the Scorer is \"Safe\"  that is when it handles \nthe case in which the scorer is exhausted and is called once again after exhaustion.\nThis is the case of the (e.g. DisjunctionMaxScorer, ConstantScorer):\n\nif (numScorers == 0) return doc = NO_MORE_DOCS; \n\n\nOn the other hand, when using the DisjunctionSumScorer, it either asserts on \"NO_MORE_DOCS\", or it throws a NPE.\n\n\nShouldn't we copy the DisjunctionMaxScorer mechanism to protect nextDoc of an exausted iterator using either current doc or checking numbers of subScorers ?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-05-28T10:57:48+0000",
            "content": "In general you're not allowed to call nextDoc after it has returned NO_MORE_DOCS: the results are undefined. ",
            "author": "Michael McCandless",
            "id": "comment-13668230"
        },
        {
            "date": "2013-05-28T12:30:16+0000",
            "content": "I understand that note on DocIdSetIterator or Scorer. If DelegatingCollector had an event on, let's say, last document, I would be able to bufferize them until last document and call my ACL on another system without messing with nextDoc on DelegatingCollector. Another way around would be giving that event. ",
            "author": "Alexis Torres Paderewski",
            "id": "comment-13668276"
        },
        {
            "date": "2013-05-28T14:59:56+0000",
            "content": "After checking lucene-core, it seems the only candidate for the ticket is the DisjunctionSumScorer. ",
            "author": "Alexis Torres Paderewski",
            "id": "comment-13668350"
        },
        {
            "date": "2013-05-28T15:31:51+0000",
            "content": "If you are buffering up the docIDs and sending them in-batch somewhere else, then you'll need to also buffer up the score/freq/etc. and send those too.  Really, you cannot call the scorer APIs after NO_MORE_DOCS was returned. ",
            "author": "Michael McCandless",
            "id": "comment-13668370"
        },
        {
            "date": "2013-05-29T09:47:52+0000",
            "content": "Hello,\n\nI am only interested in filtering using classical Solr PostFiltering the document that the user can't access. Main problem is that ACL call are dynamic depending on the documents, and I am buffering them in the PostFilter (DelegatingCollector part). The last call to nextDoc is not mine, but the BooleanScorer2 is calling it inside it's own for loop, then delegating to the sumScorer (DisjunctionSumScorer). In fact, I am exhausting the iterator myself in the PostFilter and BooleanScorer2 try to nextDoc after me. If DelegatingCollector would have an event on last doc, this wouldn't be need as I could simply use it. ",
            "author": "Alexis Torres Paderewski",
            "id": "comment-13669121"
        },
        {
            "date": "2013-05-29T10:50:51+0000",
            "content": "Hmm, if BS2 is violating the contract (calling methods on the sub-scorers after they returned NO_MORE_DOCS), that sounds like a real bug.\n\nCan you post the full exception you're seeing?  Can you capture this bug in a small test case? ",
            "author": "Michael McCandless",
            "id": "comment-13669143"
        },
        {
            "date": "2013-05-29T12:56:43+0000",
            "content": "I will post you the case, exception and a small test case for it. I am using lucene via solr so it may need some solr extension to reproduce it. ",
            "author": "Alexis Torres Paderewski",
            "id": "comment-13669203"
        },
        {
            "date": "2013-05-31T08:31:06+0000",
            "content": "I close the ticket as it seems I misused solr and lucene and I should have taken another road. Instead of using Solr DelegatingCollector I believe it is more elegant to add that filtering in the lucene QueryParser mechanism to add a custom syntax and deal with Scorer / Collector via it. ",
            "author": "Alexis Torres Paderewski",
            "id": "comment-13671261"
        },
        {
            "date": "2013-09-09T07:14:49+0000",
            "content": "I think what you originally searched for is this: SOLR-5020 ",
            "author": "Simon Endele",
            "id": "comment-13761664"
        }
    ]
}