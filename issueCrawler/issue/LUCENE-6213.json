{
    "id": "LUCENE-6213",
    "title": "Add test for IndexFormatTooOldException if a commit has a 3.x segment",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Reopened",
        "type": "Bug"
    },
    "description": "We should add a 4.x index (4.x commit) with some 3.x segment(s) to our backwards tests.\n\nI don't think we throw IndexFormatTooOldException correctly in this case. I think instead the user will get a confusing SPI error about a missing codec \"Lucene3x\".",
    "attachments": {
        "unsupported.4x-with-3x-segments.zip": "https://issues.apache.org/jira/secure/attachment/12695657/unsupported.4x-with-3x-segments.zip",
        "LUCENE-6213.patch": "https://issues.apache.org/jira/secure/attachment/12695656/LUCENE-6213.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14299365",
            "author": "Robert Muir",
            "date": "2015-01-30T23:24:02+0000",
            "content": "I dont want to cause delays for 5.0, but this might be one to fix as it will confuse users. First we need the test to know if its really a bug, but I think it is. "
        },
        {
            "id": "comment-14299376",
            "author": "Robert Muir",
            "date": "2015-01-30T23:34:42+0000",
            "content": "One way to fix this would be, to have an TooOldCodec that throws IndexFormatTooOldException for every method. We could register it in SPI with the names of codecs we no longer support. \n\nSo in trunk, it would be registered for all the 4.x codecs for example.\n\nWhen SegmentInfos asks the codec for the segmentInfoWriter() when decoding the commit, the user will get the correct exception. Alternatively we could just have a hardcoded list/map and conditional logic in SegmentInfos for this. "
        },
        {
            "id": "comment-14299412",
            "author": "Ryan Ernst",
            "date": "2015-01-31T00:07:18+0000",
            "content": "Here is a quick and dirty patch (against branch_5x) that adds a bwc index test as you suggested, and a quick fix for the bug.  I like the idea of a dummy codec, but didn't have time to try it. "
        },
        {
            "id": "comment-14299877",
            "author": "Robert Muir",
            "date": "2015-01-31T15:54:49+0000",
            "content": "Thanks Ryan, i thought of another related issue: the backwards-codecs.jar is new in 5.0, so i imagine its common someone will try to open a 4.x index with just a lucene core JAR and get a similar SPI error Maybe we dont need anything there, but we can think about the error message. "
        },
        {
            "id": "comment-14300728",
            "author": "Adrien Grand",
            "date": "2015-02-01T20:39:52+0000",
            "content": "I like the TooOldCodec idea!\n\nMaybe we dont need anything there, but we can think about the error message\n\n+1 on improving the error message to mention the backwards-codecs jar "
        },
        {
            "id": "comment-14301475",
            "author": "Ryan Ernst",
            "date": "2015-02-02T17:20:50+0000",
            "content": "I tried the codec idea, but it unfortunately required changing a lot of callers to handling IOException or themselves throw IOException, and the change got very large.\n\nHere is a new patch (still against branch_5x) that incorporates an additional check to give a nice error message if the user should probably include backward-codecs.jar.  It also is setup to easily forward port to trunk (just adding to the list of unsupportedCodecs). "
        },
        {
            "id": "comment-14301478",
            "author": "Robert Muir",
            "date": "2015-02-02T17:24:53+0000",
            "content": "I like the simple solution for now! \n\nWhen throwing the too-old exception, can we initCause() it with the original exception we got? I think it is not good to lose it. "
        },
        {
            "id": "comment-14301490",
            "author": "Ryan Ernst",
            "date": "2015-02-02T17:31:18+0000",
            "content": "Sure, new patch with initCause added. "
        },
        {
            "id": "comment-14301492",
            "author": "Robert Muir",
            "date": "2015-02-02T17:32:56+0000",
            "content": "+1, the only thing i might do is move unsupportedCodecs to be right above readCodec() in the code.  "
        },
        {
            "id": "comment-14301500",
            "author": "Ryan Ernst",
            "date": "2015-02-02T17:39:10+0000",
            "content": "Ok, I'll move unsupportedCodecs before committing. "
        },
        {
            "id": "comment-14301507",
            "author": "ASF subversion and git services",
            "date": "2015-02-02T17:40:39+0000",
            "content": "Commit 1656523 from Ryan Ernst in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1656523 ]\n\nLUCENE-6213: Add useful exception message when commit contains segments from legacy codecs "
        },
        {
            "id": "comment-14301510",
            "author": "Adrien Grand",
            "date": "2015-02-02T17:42:43+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14301518",
            "author": "ASF subversion and git services",
            "date": "2015-02-02T17:45:33+0000",
            "content": "Commit 1656528 from Ryan Ernst in branch 'dev/branches/lucene_solr_5_0'\n[ https://svn.apache.org/r1656528 ]\n\nLUCENE-6213: Add useful exception message when commit contains segments from legacy codecs (merged 1656523) "
        },
        {
            "id": "comment-14301559",
            "author": "Anshum Gupta",
            "date": "2015-02-02T18:03:11+0000",
            "content": "Thanks for getting this into 5.0. "
        },
        {
            "id": "comment-14301651",
            "author": "Uwe Schindler",
            "date": "2015-02-02T18:51:37+0000",
            "content": "Adrien Grand: Why is the list of unsupported codecs an Array. A simple unmodifiable set would be better, would spare lots of code  If its a singletonSet its even simpler  Otherwise use Collections.unmodifiableSet(new HashSet<>(Arrays.asList(codecs))). You don't need to change that, but to me this looks simplier and more correct. Memory usage or speed is not a problem here, it is static and never changes after class init. "
        },
        {
            "id": "comment-14301731",
            "author": "Ryan Ernst",
            "date": "2015-02-02T19:20:10+0000",
            "content": "Uwe Schindler While that might be \"less lines of code\" (but only by 1 or 2 I think), that is a much more complicated data structure than an array.  In fact, if java just had an Arrays.find like STL's find() then there would be no difference in number of lines. "
        },
        {
            "id": "comment-14301863",
            "author": "Uwe Schindler",
            "date": "2015-02-02T20:26:35+0000",
            "content": "If you want to keep the array, use Arrays.asList(array).contains(element), that's the pendant to your STL's find(). But I still think that a set is the \"right\" data structure. "
        },
        {
            "id": "comment-14301869",
            "author": "Ryan Ernst",
            "date": "2015-02-02T20:31:40+0000",
            "content": "Well, except that would convert the array to a list on each call.  I would rather keep the current code. "
        },
        {
            "id": "comment-14301938",
            "author": "Uwe Schindler",
            "date": "2015-02-02T21:11:06+0000",
            "content": "Well, except that would convert the array to a list on each call. I would rather keep the current code.\n\nWell, I would declare it as this List. List and array are basically the same in Java. Arrays.asList() does only \"wrap\" not \"convert\". In addition the declaration of the static constant would be much more readable (sorry, I hate this \"new String[] \n{ ... }\n\" syntax - the code looks like written by a C developer - not Java like):\n\n\nprivate static final List<String> unsupportedCodecs = Arrays.asList(\n  \"Lucene3x\"\n);\n\n\n\nThen you can do the contains().\n(because its private, there is no need to make it explicitely \"unmodifiable\")\n\nUwe "
        },
        {
            "id": "comment-14301958",
            "author": "ASF subversion and git services",
            "date": "2015-02-02T21:21:52+0000",
            "content": "Commit 1656581 from Ryan Ernst in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1656581 ]\n\nLUCENE-6213: Bikeshed the hell out of a 1 element list "
        },
        {
            "id": "comment-14301961",
            "author": "ASF subversion and git services",
            "date": "2015-02-02T21:22:39+0000",
            "content": "Commit 1656582 from Ryan Ernst in branch 'dev/branches/lucene_solr_5_0'\n[ https://svn.apache.org/r1656582 ]\n\nLUCENE-6213: Bikeshed the hell out of a 1 element list "
        },
        {
            "id": "comment-14301962",
            "author": "Uwe Schindler",
            "date": "2015-02-02T21:24:18+0000",
            "content": "Thanks for changing! Sometimes I have a bad day - I was dealing with C code a minute ago!  "
        },
        {
            "id": "comment-14517274",
            "author": "Robert Muir",
            "date": "2015-04-28T15:59:16+0000",
            "content": "We need this logic in trunk for the same reasons (5.x commit containing 4.x segments). Somehow it only got committed to 5.x branch. "
        },
        {
            "id": "comment-14517480",
            "author": "Ryan Ernst",
            "date": "2015-04-28T17:28:51+0000",
            "content": "When I added this logic, 5.0 was not yet released, so we didn't have an official release to build the mixed segments with. I'll take care of this. "
        },
        {
            "id": "comment-14518108",
            "author": "Hoss Man",
            "date": "2015-04-28T21:28:05+0000",
            "content": "When I added this logic, 5.0 was not yet released, so we didn't have an official release to build the mixed segments with.\n\nPerhaps this is something smokechecker should sanity check for us moving forward?  It already parses the output of TestBackwardsCompatibility to make sure we test all known previous releases, why not also make it look for testIndexFormatTooOldExceptionX where X is 1 less then whatever the major version number is?\n\nso smokechecker against trunk (where version is 6.0) will fail unless/until there is a testIndexFormatTooOldException5 run as part of TestBackwardsCompatibility. when we create a branch_6x and update the version on trunk to \"7\" it will start failing again until we change TestBackwardsCompatibility so that testIndexFormatTooOldException6 exists (a good and legitimate smoke test to fail: we don't want to release \"trunk\" until 6.0 is final and we have a mixed format to test against)\n "
        },
        {
            "id": "comment-14518366",
            "author": "ASF subversion and git services",
            "date": "2015-04-28T23:46:22+0000",
            "content": "Commit 1676648 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1676648 ]\n\nLUCENE-6213: Add useful exception message when commit contains segments from legacy codecs (forward port from branch_5x) "
        },
        {
            "id": "comment-14518434",
            "author": "ASF subversion and git services",
            "date": "2015-04-29T00:23:32+0000",
            "content": "Commit 1676650 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1676650 ]\n\nLUCENE-6213: Revert accidental removal of code from readCommit (bad merge) "
        },
        {
            "id": "comment-14518460",
            "author": "Ryan Ernst",
            "date": "2015-04-29T00:42:47+0000",
            "content": "Hoss Man We already check unsupported indexes are tested. I do think we should check for this, but only once a version is released. For example, we didn't fail expecting a bwc test for 5.0.0 until that was actually available (we list apache archives of lucene release to find all the versions we expect). In this case, we probably just need some extra logic for a major release. Eg. For M.0.0, expect a test index \"(M)x-with-(M-1)x-segments\".  I think this is essentially what you were saying?\n\nWe should also have this easily created with addBackcompatIndexes.py, so that when it runs on a major release it also creates one of these mixed indexes.  I created LUCENE-6457 to track this. "
        },
        {
            "id": "comment-14518485",
            "author": "Hoss Man",
            "date": "2015-04-29T00:54:47+0000",
            "content": "Eg. For M.0.0, expect a test index \"(M)x-with-(M-1)x-segments\". I think this is essentially what you were saying?\n\nMy point was that for a sanity check like this, where the focus is on major versions, we can  go even farther then just looking at the list of existing releases.\n\nIn your example, i think that even if there is no official \"M\" release, the smoketester for \"M+1\" should fail if a test for \"(M)x-with-(M-1)x-segments can not be found.  \n\nExample: if the trunk version property is set to \"8.Y\" (where the value of Y is irrelevant) then it should be expected that the a \"7x-with-6x-segments\" index is tested \u2013 even if there is no 7.X release yet according to jira / archive.apache.org.\n\nthat way, in the first few days after a \"7x_branch\" is created, and trunk's version property is updated to \"8.0\" it will be clear from the smokeTester failures on trunk that trunk is not in a state suitable to be released \u2013 by definittion trunk won't be suitable for release until a 7.0 release is final and the 7x index format is used to create the \"7x-with-6x-segments\" index for the trunk test. "
        },
        {
            "id": "comment-14518752",
            "author": "Ryan Ernst",
            "date": "2015-04-29T05:18:13+0000",
            "content": "i think that even if there is no official \"M\" release, the smoketester for \"M+1\" should fail if a test for \"(M)x-with-(M-1)x-segments can not be found.\n\nI disagree. We shouldn't fail when there is nothing we can do. The backcompat indexes are created with official releases, so we should not fail until there is an official release with which to build the backcompat index (whether that be a pure index or mixed). "
        },
        {
            "id": "comment-14519640",
            "author": "Hoss Man",
            "date": "2015-04-29T16:14:28+0000",
            "content": "We shouldn't fail when there is nothing we can do. \n\n-0\n\nIn my opinion you are looking at the purpose of the smoke tester backwards: the smoke tester shouldn't pass unless the candidate it's smoking is ready for release \u2013 if we know that there is no \"previous\" index format that is being adequately tested in the candidate build, then the candidate is, by definition, not ready for release. "
        },
        {
            "id": "comment-14519646",
            "author": "Robert Muir",
            "date": "2015-04-29T16:18:01+0000",
            "content": "\nI disagree. We shouldn't fail when there is nothing we can do.\n\nYeah, failing jenkins over and over for a potentially long period of time is not a solution here.\n\nWe can release version X without tests that it can read X-1. In general, test coverage is never perfect.  "
        }
    ]
}