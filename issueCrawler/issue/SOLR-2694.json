{
    "id": "SOLR-2694",
    "title": "LogUpdateProcessor not thread safe",
    "details": {
        "affect_versions": "1.4.1,                                            3.1,                                            3.2,                                            3.3,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Cannot Reproduce"
    },
    "description": "Using the LogUpdateProcessor while feeding in multiple parallell threads does not work, as LogUpdateProcessor is not threadsafe.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13078746",
            "date": "2011-08-03T13:38:42+0000",
            "content": "Example of exception thrown:\n\n\nSEVERE: java.util.ConcurrentModificationException\n        at java.util.AbstractList$Itr.checkForComodification(AbstractList.java:372)\n        at java.util.AbstractList$Itr.next(AbstractList.java:343)\n        at java.util.AbstractCollection.toString(AbstractCollection.java:421)\n        at java.lang.String.valueOf(String.java:2826)\n        at java.lang.StringBuilder.append(StringBuilder.java:115)\n        at org.apache.solr.common.util.NamedList.toString(NamedList.java:255)\n        at java.lang.String.valueOf(String.java:2826)\n        at java.lang.StringBuilder.append(StringBuilder.java:115)\n        at org.apache.solr.update.processor.LogUpdateProcessor.finish(LogUpdateProcessorFactory.java:171)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.finish(UpdateRequestProcessor.java:78)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.finish(UpdateRequestProcessor.java:78)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.finish(UpdateRequestProcessor.java:78)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.finish(UpdateRequestProcessor.java:78)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.finish(UpdateRequestProcessor.java:78)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.finish(UpdateRequestProcessor.java:78)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.finish(UpdateRequestProcessor.java:78)\n        at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:76)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n        at org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper.handleRequest(RequestHandlers.java:241)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1360)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:356)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:252)\n        at org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)\n        at org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:399)\n        at org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n        at org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n        at org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)\n        at org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:450)\n        at org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)\n        at org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n        at org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\n        at org.mortbay.jetty.Server.handle(Server.java:326)\n        at org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\n        at org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:928)\n        at org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:549)\n        at org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:212)\n        at org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\n        at org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)\n        at org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13078758",
            "date": "2011-08-03T14:07:26+0000",
            "content": "A new update processor is built for every request, and hence they are not thread safe by design.\nHow is this log processor getting shared between multiple threads? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13078787",
            "date": "2011-08-03T15:01:41+0000",
            "content": "As an aside, I think it's important to document thread safety (or lack thereof) in an API, particularly for classes that are extension points like UpdateRequestProcessor. FWIW Joshua Bloch thinks so too as it's item #70 in \"Effective Java\". This is good practice for object life-cycle information too \u2013 i.e. construction, and any applicable callbacks. As I'm working with coding in Lucene and Solr I often wonder wether I need to be careful to be thread safe or not and I always have to go deduce this question myself instead of the API telling me.  I propose that a comment be added to UpdateRequestProcessor saying:\nUpdateRequestProcessors are instantiated once per request, and thus don't need to be thread safe. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13078810",
            "date": "2011-08-03T15:50:13+0000",
            "content": "Haven't analyzed it deeply, but it is very easy to reproduce.\n1. Setup an UpdateChain with the LogUpdateProcessor in it\n2. Start feeding a bunch of docs in one shell window\n3. Start feeding a bunch of docs in another shell window\n4. Bang!\n\nCannot see from the code why this happens, but it seems to be related to usage of the SimpleOrderedMap. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13078830",
            "date": "2011-08-03T16:35:24+0000",
            "content": "The normal example server uses logging by default, and I can't reproduce this there.\n\nFrom the exampledocs directory, I'm doing\nwhile true; do ./post.sh *xml; done\nin two different windows.\n\nOne can also see in ContentStreamHandlerBase, a new processor is created for each request:\n    UpdateRequestProcessor processor = processorChain.createProcessor(req, rsp);\n\nIs this stock solr? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13078831",
            "date": "2011-08-03T16:35:35+0000",
            "content": "Jan, precisely which release of Solr are you reproducing this on? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13078843",
            "date": "2011-08-03T17:01:20+0000",
            "content": "3.2 and also 3.x branch. But I just recalled that this customer uses a custom version of ExtractingRequestHandler. I tried reverting to default ExtractingRequestHandler, and the ConcurrentModificationException does not happen.... So let us check our own code first... "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13094438",
            "date": "2011-08-31T11:32:24+0000",
            "content": "Closing this for now - could reopen if necessary... "
        },
        {
            "author": "Ethan Tao",
            "id": "comment-13280359",
            "date": "2012-05-21T18:57:04+0000",
            "content": "Hi, we are having the same issue with latest snapshot. \nWhen updating the same set of docs repeatedly, we can easily reproduce it. We also have 10 secs commit in our env.\nI checked the code with LogUpdateProcessor, the code is not thread safe with \"toLog\" object as concurrent threads may be calling other methods when finish() is called. The problem is when \"sb.append(toLog)\" is called, StringBuilder starts to use namedlist to build the string object. If other methods are called to modify the objects reside within \"toLog\", the exception will be triggered. These objects include deletes, adds, etc. Also, the keys to these object have 7 different types (commit/rollback, ..etc.), any size change to the SimpleOrderedMap (i.e., toLog) object may also trigger the issue during the call to \"sb.append(toLog)\" in finish(). \nWe did quick experiment by modifying the LogUpdateProcessorFactory file to synchronize on toLog in all methods. Then change our chain definition in solrconfig.xml to call our own LogUpdateProcessor instead. The issue went away. I am attaching the custom code below for your reference.\n\nCan someone please re-open and fix the issue? \nThanks.\n\n-Ethan \n\nclass LogUpdateProcessor extends UpdateRequestProcessor {\n\n...\n\n    @Override\n    public void processAdd(AddUpdateCommand cmd) throws IOException {\n        if (logDebug) \n{ log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n\n        // call delegate first so we can log things like the version that get set later\n        if (next != null) next.processAdd(cmd);\n\n        synchronized (toLog) {\n\n            // Add a list of added id's to the response\n            if (adds == null) {\n                adds = new ArrayList<String>();\n                toLog.add(\"add\",adds);\n            }\n\n            if (adds.size() < maxNumToLog) {\n                long version = cmd.getVersion();\n                String msg = cmd.getPrintableId();\n                if (version != 0) msg = msg + \" (\" + version + ')';\n                adds.add(msg);\n            }\n\n\n            numAdds++;\n\n        }\n    }\n\n    @Override\n    public void processDelete( DeleteUpdateCommand cmd ) throws IOException {\n        if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n        if (next != null) next.processDelete(cmd);\n\n        synchronized (toLog) {\n            if (cmd.isDeleteById()) {\n                if (deletes == null) \n{\n                    deletes = new ArrayList<String>();\n                    toLog.add(\"delete\",deletes);\n                }\n                if (deletes.size() < maxNumToLog) \n{\n                    long version = cmd.getVersion();\n                    String msg = cmd.getId();\n                    if (version != 0) msg = msg + \" (\" + version + ')';\n                    deletes.add(msg);\n                }\n            } else {\n                if (toLog.size() < maxNumToLog) \n{\n                    long version = cmd.getVersion();\n                    String msg = cmd.query;\n                    if (version != 0) msg = msg + \" (\" + version + ')';\n                    toLog.add(\"deleteByQuery\", msg);\n                }\n            }\n            numDeletes++;\n        }\n\n    }\n\n    @Override\n    public void processMergeIndexes(MergeIndexesCommand cmd) throws IOException {\n        if (logDebug) \n{ log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n        if (next != null) next.processMergeIndexes(cmd);\n\n        synchronized (toLog) {\n            toLog.add(\"mergeIndexes\", cmd.toString());\n        }\n    }\n\n    @Override\n    public void processCommit( CommitUpdateCommand cmd ) throws IOException {\n        if (logDebug) { log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n        if (next != null) next.processCommit(cmd);\n\n\n        synchronized (toLog) \n{\n            final String msg = cmd.optimize ? \"optimize\" : \"commit\";\n            toLog.add(msg, \"\");\n        }\n    }\n\n    /**\n\n\t@since Solr 1.4\n     */\n    @Override\n    public void processRollback( RollbackUpdateCommand cmd ) throws IOException {\n        if (logDebug) \n{ log.debug(\"PRE_UPDATE \" + cmd.toString()); }\n        if (next != null) next.processRollback(cmd);\n\n\n\n        synchronized (toLog) \n{\n            toLog.add(\"rollback\", \"\");\n        }\n    }\n\n\n    @Override\n    public void finish() throws IOException {\n        if (logDebug) \n{ log.debug(\"PRE_UPDATE finish()\"); }\n        if (next != null) next.finish();\n\n        // LOG A SUMMARY WHEN ALL DONE (INFO LEVEL)\n\n        NamedList<Object> stdLog = rsp.getToLog();\n\n        StringBuilder sb = new StringBuilder(req.getCore().getLogId());\n\n        for (int i=0; i<stdLog.size(); i++) {\n            String name = stdLog.getName;\n            Object val = stdLog.getVal;\n            if (name != null) \n{\n                sb.append(name).append('=');\n            }\n            sb.append(val).append(' ');\n        }\n\n        stdLog.clear();   // make it so SolrCore.exec won't log this again\n\n        synchronized (toLog) {\n\n            // if id lists were truncated, show how many more there were\n            if (adds != null && numAdds > maxNumToLog) \n{\n                adds.add(\"... (\" + numAdds + \" adds)\");\n            }\n            if (deletes != null && numDeletes > maxNumToLog) \n{\n                deletes.add(\"... (\" + numDeletes + \" deletes)\");\n            }\n            long elapsed = rsp.getEndTime() - req.getStartTime();\n\n            sb.append(toLog).append(\" 0 \").append(elapsed);\n\n        }\n\n        log.info(sb.toString());\n    }\n} "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13280368",
            "date": "2012-05-21T19:04:09+0000",
            "content": "Ethan: please note yonik's comment earlier in this thread...\n\n\nA new update processor is built for every request, and hence they are not thread safe by design.\nHow is this log processor getting shared between multiple threads?\n\nplease also not the comments in SOLR-2804 which i've linked, in particular...\n\n\nThat should not be the case at all for SOlrJ users and people using DIH in single threaded mode \u2013 every UpdateProcessorFactory (including the LogUpdateprocessorFactory) creates new UpdateProcessor instances for every update request \u2013 so no concurrency protection should be required for multiple threads processing concurrent requests individually. A simple NamedList to collect the results to be logged for each request should be completely sufficient.\n\nBased on the comments so far, it sounds like the bug is multiple threads in DIH attempting to update the same NamedList concurrently \u2013 which is most certainly not safe for DIH to do (NamedList has never been, nor been documented to suggest it might be, thread safe)\n\nChanging LogUpdateprocessorFactory to add concurrency boundaries to something that is already suppose to only be single thread access seems like it will only slow down all the use cases that are already doing the right thing and working fine \u2013 let's fix the concurrency issue in the place where there is concurrency code: figure out when/why/where DIH is letting multiple threads manipulate the toLog NamedList and fix that.\n\nif you are seeing a manifestation of this error using DIH with the multi-trheaded option, then please note all the comments in SOLR-2804 and the linked issues.\n\nif you are seeing a manifestation of this error using some other mechanism of processing updates, then please file a new bug.\n "
        },
        {
            "author": "Ethan Tao",
            "id": "comment-13280762",
            "date": "2012-05-22T07:10:13+0000",
            "content": "Hoss: The issue described in Solr-2804 also helps to some extend. \nWe are building document indexing pipeline. The update chain we defined is enforced with singleton, thus the LogUpdateProcessor is shared among concurrent threads. We didn't realize the class is thread unsafe till now. \n\nWe'll try the workaround to reduce its log level below INFO and see if it's acceptable. We'll create a new bug if necessary.\nThanks a lot.\n\n-Ethan "
        },
        {
            "author": "Ethan Tao",
            "id": "comment-13282041",
            "date": "2012-05-23T23:38:58+0000",
            "content": "We've decided to manually apply the patch from Solr-2804 dated 1/1/12 to current Snapshot.\nIf this patch won't become official, at least there should be a new class \"ConcurrentLogUpdateProcessorFactory\" to handle the thread safe issue. We'll file a new bug for it.\nThanks. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13282248",
            "date": "2012-05-24T07:15:08+0000",
            "content": "Ethan,\n\n\n\tthat patch (dated 1/1/12) has absolutely no sense, I tell you as an author: UpdateProcessors are thread unaware prototypes, not singletons;\n\tthe later patch from SOLR-2804 make sense for DIH with \"threads\", which is not supported further;\n\tyour core problem is \"The update chain we defined is enforced with singleton\", I suggest instantiate the necessary logic in UpdateProcessorFactory and provide it for concurrent access from thread unaware UpdateProcessors.\n\n "
        }
    ]
}