{
    "id": "SOLR-12005",
    "title": "Solr should have the option of logging all jars loaded",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "logging"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Solr used to explicitly log the filename of every jar it loaded.  It seems that the effort to reduce the verbosity of the logs has changed this, now it just logs the count of jars loaded and the paths where they were loaded from.  Here's a log line where Solr is reading from ${solr.solr.home}/lib:\n\n\n2018-02-01 17:43:20.043 INFO  (main) [   ] o.a.s.c.SolrResourceLoader [null] Added 8 libs to classloader, from paths: [/index/solr6/data/lib]\n\n\n\nWhen trying to help somebody with classloader issues, it's more difficult to help when the list of jars loaded isn't in the log.\n\nI would like the more verbose logging to be enabled by default, but I understand that many people would not want that, so I propose this:\n\n\n\tEnable verbose logging for ${solr.solr.home}/lib by default.\n\tDisable verbose logging for each core by default.  Allow solrconfig.xml to enable it.\n\tOptionally allow solr.xml to configure verbose logging at the global level.\n\t\n\t\tThis setting would affect both global and per-core jar loading. Each solrconfig.xml could override.\n\t\n\t\n\n\n\nRationale: The contents of ${solr.solr.home}/lib are loaded precisely once, and this location doesn't even exist unless a user creates it.  An out-of-the-box config would not have verbose logs from jar loading.\n\nThe solr home lib location is my preferred way of loading custom jars, because they get loaded only once, no matter how many cores you have.  Jars added to this location would add lines to the log, but it would not be logged for every core.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-20T03:56:34+0000",
            "content": "Dunno, If you specify the -v option when starting Solr, does that provide the information you want? If so, for those few times you really want to see each and every jar this seems simpler. ",
            "author": "Erick Erickson",
            "id": "comment-16369690"
        },
        {
            "date": "2018-02-20T19:27:50+0000",
            "content": "\nDunno, If you specify the -v option when starting Solr, does that provide the information you want?\n\nYes ... but it also logs thousands of lines of cruft that is simply not useful for basic troubleshooting when the issue is probably user error. DEBUG logs are useful for problems where we suspect that Solr has a bug, to verify whether or not it's working by seeing internal state as the code runs. But even then, it's more useful to turn on DEBUG logging for individual classes (either in log4j.properties or in the admin UI), not the entire logging config.\n\nWe could figure out how to modify log4j.properties so that SolrResourceLoader is increased to DEBUG, and have users turn that on when troubleshooting these issues. If that's really what everyone thinks we should do, it can even go in the reference guide, and it could be in log4j.properties already, but commented.  I am not opposed to this idea, it just wasn't the first thing I thought of.\n\nFor my servers, the change would result in eight additional lines being logged by default \u2013 the eight jars that I have in ${solr.solr.home}/lib. Or perhaps nine lines, as there might be a line indicating which directory is being examined. I do not have <lib> elements in any solrconfig.xml file. This isn't eight lines for every core (of which I have a couple dozen per server) ... but eight lines total.  For out of the box users, there would be no increase in logging.\n\n\n2018-02-20 18:38:18.768 DEBUG (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/index/solr6/data/lib/solr-dataimporthandler-6.6.2-SNAPSHOT.jar' to classloader\n2018-02-20 18:38:18.768 DEBUG (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/index/solr6/data/lib/ncSolrUpdateProcessors.jar' to classloader\n2018-02-20 18:38:18.768 DEBUG (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/index/solr6/data/lib/jblas-1.2.4.jar' to classloader\n2018-02-20 18:38:18.768 DEBUG (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/index/solr6/data/lib/icu4j-56.1.jar' to classloader\n2018-02-20 18:38:18.768 DEBUG (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/index/solr6/data/lib/mysql-connector-java-5.1.40-bin.jar' to classloader\n2018-02-20 18:38:18.768 DEBUG (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/index/solr6/data/lib/CJKFoldingFilter.jar' to classloader\n2018-02-20 18:38:18.768 DEBUG (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/index/solr6/data/lib/lucene-analyzers-icu-6.6.2-SNAPSHOT.jar' to classloader\n2018-02-20 18:38:18.768 DEBUG (main) [   ] o.a.s.c.SolrResourceLoader Adding 'file:/index/solr6/data/lib/pixolution_flow3.2.0_solr6.6.0.jar' to classloader\n\n\n\nIf the user enables a config option to turn on additional jar logging, there may be a lot more lines logged. This is what Solr 7.2.1 logs out of the box for a core startup of a core using the _default configset:\n\n\n2018-02-20 18:59:22.041 INFO  (coreLoadExecutor-6-thread-1) [   x:foo] o.a.s.c.SolrResourceLoader [foo] Added 53 libs to classloader, from paths: [/C:/Users/sheisey/Downloads/solr-7.2.1/contrib/clustering/lib, /C:/Users/sheisey/Downloads/solr-7.2.1/contrib/extraction/lib, /C:/Users/sheisey/Downloads/solr-7.2.1/contrib/langid/lib, /C:/Users/sheisey/Downloads/solr-7.2.1/contrib/velocity/lib, /C:/Users/sheisey/Downloads/solr-7.2.1/dist]\n\n\n\nThat's 53 files loaded for one core, and the <lib> config in solrconfig.xml ensures they're all jar files. I totally understand the desire to eliminate those lines from the default logging. For the average user that never uses any custom plugins or anything from contrib (like analysis-extras) that is not in the default example, that information doesn't help them, and may actually confuse them.\n\nIf the solr.xml option I've mentioned were enabled and the user's server had a handful of cores with solrconfig.xml files mostly unchanged from the default example, they would have a few hundred extra lines in their log. Each extra line would not be horrendously verbose, and the information is usually relevant to somebody trying to figure out a problem that involves that config option. And also remember that these lines would NOT be logged without enabling the config. ",
            "author": "Shawn Heisey",
            "id": "comment-16370497"
        },
        {
            "date": "2018-03-31T12:35:41+0000",
            "content": "-1\nWe already log this at DEBUG level, that was the whole point with reducing the overly excessive INFO logging back then ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16421307"
        },
        {
            "date": "2018-03-31T12:37:57+0000",
            "content": "Could be that we should move a bunch of DEBUG level logging to TRACE level to make DEBUG less crowded for most common kind of debugging? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16421308"
        },
        {
            "date": "2018-03-31T15:19:04+0000",
            "content": "Jan H\u00f8ydahl, I think that some things previously logged at info were not excessive.  In this case, it's a bunch of extra lines, but only at startup (or reload).  I do understand the goal of reducing logging verbosity, so I'm not going to insist.  I wonder if maybe we can log all the jar names loaded from one directory or one config entry on one line.  It's too bad that \"less\" doesn't truncate long lines by default.\n\nFor service installs, the \"-v\" startup option is usually not available, but it does look like setting SOLR_LOG_LEVEL=DEBUG in solr.in.sh might do the same thing.  And it is mentioned in solr.in.sh.  Therefore, I know how to ask a user to turn on the more verbose logging, and turn it back off when the info is gathered.\n\n+1 to utilizing TRACE more.  Also, WARN should maybe have more in it.  There are certain major events, technically are not warnings, that I think should be visible even when somebody sets their level to WARN.  I'm aware of the contradiction of using WARN for things that are normal and not cause for concern.\n\nHistorically, WARN was a famine, INFO was a feast, and DEBUG was insane.  Now, WARN hasn't really changed, INFO is getting better, and DEBUG is still insane. ",
            "author": "Shawn Heisey",
            "id": "comment-16421358"
        },
        {
            "date": "2018-03-31T15:25:11+0000",
            "content": "Further drifting into \"needs a new issue\" territory:\n\nAn example of something that I think should be at WARN, even though it's 100% normal and no cause for concern:  The point where Solr startup is complete \u2013 all cores are loaded or inventoried, cloud information cached, background threads started, etc.  And maybe that log line should have an elapsed time from webapp startup. Getting it from Jetty startup might not be possible, but if Jetty exposes that information, let's log that too. ",
            "author": "Shawn Heisey",
            "id": "comment-16421360"
        },
        {
            "date": "2018-03-31T16:29:11+0000",
            "content": "We could also document how to increase verbosity for just one class, e.g the ResourceLoader. That would involve editing log4j2 config and restarting. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16421380"
        }
    ]
}