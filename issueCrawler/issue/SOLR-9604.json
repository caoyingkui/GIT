{
    "id": "SOLR-9604",
    "title": "Pooled SSL connections are not being reused with client authentication",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.3",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Solr isn't setting user tokens on any of its HttpClientContext objects when requested new http connections.  This means that when SSL + client authentication is used, HttpClient is creating a new connection on every request, to ensure that authentication tokens aren't shared between different users.  We end up with lots of unused open connections in the connection pool, leading to slowness and out-of-memory errors.",
    "attachments": {
        "SOLR-9604.patch": "https://issues.apache.org/jira/secure/attachment/12831709/SOLR-9604.patch",
        "fails with null.png": "https://issues.apache.org/jira/secure/attachment/12831742/fails%20with%20null.png",
        "SOLR-9604-6x.patch": "https://issues.apache.org/jira/secure/attachment/12831809/SOLR-9604-6x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-05T09:10:37+0000",
            "author": "Alan Woodward",
            "content": "Patch, based on Mikhail Khludnev's last patch on SOLR-9182.\n\nThere are a few other places in addition to HttpSolrClient that need an HttpClientContext, so I added a cacheKey object to the context factory.  HttpSolrClient can pass itself, as can ConcurrentUpdateSolrClient.  The UpdateHandler client uses its parent CoreContainer as a key.\n\nIt may make sense to allow users to pass in cache keys as well, particularly for CUSC, which is used by DistributedUpdateProcessor, and can share connection pools with other clients in a container. ",
            "id": "comment-15548147"
        },
        {
            "date": "2016-10-05T09:12:06+0000",
            "author": "Alan Woodward",
            "content": "The concurrent client in DistributedUpdateProcessor actually already uses the HttpClient object from UpdateHandler, so I think this is ready to go. ",
            "id": "comment-15548153"
        },
        {
            "date": "2016-10-05T10:02:54+0000",
            "author": "Mikhail Khludnev",
            "content": "seems nice. but I couldn't find a method definition for \n\nHttpClientUtil.createNewHttpClientRequestContext(null) \n\n\ncouldn't you forget to git add ?  ",
            "id": "comment-15548270"
        },
        {
            "date": "2016-10-05T11:07:57+0000",
            "author": "Alan Woodward",
            "content": "It's there in the patch:\n\ndiff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java\nindex b9580b8..0f738c2 100644\n--- a/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java\n+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpClientUtil.java\n@@ -198,7 +198,12 @@ public class HttpClientUtil {\n    *          configuration (no additional configuration) is created. \n    */\n   public static CloseableHttpClient createClient(SolrParams params) {\n-    return createClient(params, new PoolingHttpClientConnectionManager(schemaRegistryProvider.getSchemaRegistry()));\n+    return createClient(params, createPoolingConnectionManager());\n+  }\n+\n+  /** test usage subject to change @lucene.experimental */ \n+  static PoolingHttpClientConnectionManager createPoolingConnectionManager() {\n+    return new PoolingHttpClientConnectionManager(schemaRegistryProvider.getSchemaRegistry());\n   }\n   \n   public static CloseableHttpClient createClient(SolrParams params, PoolingHttpClientConnectionManager cm) {\n@@ -396,10 +401,17 @@ public class HttpClientUtil {\n   }\n \n   /**\n-   * \n+   * Create a HttpClientContext object\n+   *\n+   * If the client is going to be re-used, then you should pass in an object that\n+   * can be used by internal connection pools as a cache key.  This is particularly\n+   * important if client authentication is enabled, as SSL connections will not\n+   * be re-used if no cache key is provided.\n+   *\n+   * @param cacheKey an Object to be used as a cache key for pooling connections\n    */\n-  public static HttpClientContext createNewHttpClientRequestContext() {\n-    return httpClientRequestContextBuilder.createContext();\n+  public static HttpClientContext createNewHttpClientRequestContext(Object cacheKey) {\n+    return httpClientRequestContextBuilder.createContext(cacheKey);\n   }\n\n ",
            "id": "comment-15548409"
        },
        {
            "date": "2016-10-05T11:16:46+0000",
            "author": "Mikhail Khludnev",
            "content": "ok. my fault. Now I see. The patch amends arguments of public methods, what's about API compatibility?    ",
            "id": "comment-15548422"
        },
        {
            "date": "2016-10-05T12:46:48+0000",
            "author": "Mikhail Khludnev",
            "content": "also, it's worth to remove @RandomSSL from HttpSolrClientSSLAuthConPoolTest to make it really random.  ",
            "id": "comment-15548604"
        },
        {
            "date": "2016-10-05T12:47:38+0000",
            "author": "Alan Woodward",
            "content": "Updated with the old methods left in with deprecations.\n\nMikhail Khludnev, can you ensure that the test fails if you change HttpSolrClient so that it passes 'null' instead of 'this' to the context builder?  It still passes for me locally... ",
            "id": "comment-15548605"
        },
        {
            "date": "2016-10-05T13:16:54+0000",
            "author": "Mikhail Khludnev",
            "content": "Mikhail Khludnev, can you ensure that the test fails if you change HttpSolrClient so that it passes 'null' instead of 'this' to the context builder?\nabsolutely \n ",
            "id": "comment-15548675"
        },
        {
            "date": "2016-10-05T13:30:30+0000",
            "author": "Alan Woodward",
            "content": "\u0421\u043f\u0430\u0441\u0438\u0431\u043e!\n\nI'll commit this shortly, and then we can try removing the SuppressSSL annotation from some tests and see if they pass.  I think it's worth keeping the RandomizeSSL annotation on this test though, as it's only really applicable to SSL+clientAuth situations. ",
            "id": "comment-15548705"
        },
        {
            "date": "2016-10-05T14:38:24+0000",
            "author": "Alan Woodward",
            "content": "Ah, of course, 6.x is using a completely different way of configuring HttpClients...  I'll put up a separate 6.x patch shortly. ",
            "id": "comment-15548917"
        },
        {
            "date": "2016-10-05T16:26:11+0000",
            "author": "Alan Woodward",
            "content": "OK, not being able to reproduce this behaviour at all locally is making this quite tricky to write - Mikhail Khludnev do you think you'll have any time to backport the above patch to 6.x? ",
            "id": "comment-15549219"
        },
        {
            "date": "2016-10-05T16:29:24+0000",
            "author": "Mikhail Khludnev",
            "content": "No problem. Feel free to push in master what you have, I'll take care about porting to branch_6x ",
            "id": "comment-15549231"
        },
        {
            "date": "2016-10-05T16:37:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 0eb6b1c823d347319cc0894b5fea95f085d4c8d4 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0eb6b1c ]\n\nSOLR-9604: Ensure SSL connections are re-used ",
            "id": "comment-15549254"
        },
        {
            "date": "2016-10-05T16:54:48+0000",
            "author": "Hoss Man",
            "content": "also, it's worth to remove @RandomSSL from HttpSolrClientSSLAuthConPoolTest to make it really random. \n\nI think it's worth keeping the RandomizeSSL annotation on this test though, as it's only really applicable to SSL+clientAuth situations.\n\nAgreed, but I think I also see Mikhail's point: from a coverage standpoint, it would be nice to have a test that helps ensure we are re-using connection pools regardless of whether SSL+clientAuth is used or not (ie: as the test stands now, we only ensure they are re-used with SSL, some future bug could break connection re-use for non-ssl connections and we'd never know \u2013 heck: in theory the changes in this fix for SSL connection reuse could be breaking connection reuse for non-SSL requests, and we wouldn't know it.)\n\nSo perhaps refactor the current HttpSolrClientSSLAuthConPoolTest class into a HttpSolrClientConPoolTest that uses the default SSL randomization, and then make HttpSolrClientSSLAuthConPoolTest a subclass that forces @RandomizeSSL(1.0) ?\n(along with a \"test the test\" sanity assertion that the urls start with \"https\") ",
            "id": "comment-15549309"
        },
        {
            "date": "2016-10-05T17:02:57+0000",
            "author": "Mikhail Khludnev",
            "content": "Sigh.. ",
            "id": "comment-15549340"
        },
        {
            "date": "2016-10-05T18:21:21+0000",
            "author": "Mikhail Khludnev",
            "content": "OK, not being able to reproduce this behaviour at all locally\nAnd I probably know why  ",
            "id": "comment-15549559"
        },
        {
            "date": "2016-10-05T19:49:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 36b3b0884a8f745bc137db1b1dc9890a59fa0895 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=36b3b08 ]\n\nRevert \"SOLR-9604: Ensure SSL connections are re-used\"\n\nThis reverts commit 0eb6b1c823d347319cc0894b5fea95f085d4c8d4, which was\ncausing test failures in ConnectionReuseTest - see SOLR-9608 ",
            "id": "comment-15549757"
        },
        {
            "date": "2016-10-05T19:52:56+0000",
            "author": "Alan Woodward",
            "content": "My commit didn't take into account CloudSolrClient, which also needs fixing here, and broke TestConnectionReuse (except when it selected CSC to test, which it obviously did when I ran things locally), so I've backed it out. ",
            "id": "comment-15549766"
        },
        {
            "date": "2016-10-05T21:03:30+0000",
            "author": "Mikhail Khludnev",
            "content": "attaching SOLR-9604-6x.patch \nHttpSolrClient*ConPoolTest works (and fails) as expected.\nConnectionReuseTest asserts makes me wonder (I swapped two lines to fix one failure for null metrics). It fails so far SOLR-9608.   ",
            "id": "comment-15549940"
        },
        {
            "date": "2016-10-07T09:08:32+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b58ccc3906014fb13ecffe17ae989ea7d07b814e in lucene-solr's branch refs/heads/branch_6x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b58ccc3 ]\n\nSOLR-9604,SOLR-9608: Ensure SSL connections are re-used. \n\nFix ConnectionReuseTest. Add coverage for all SolrClients.\nRemove explicit cacheKey for HttpRequestContext, make it singleton.   \n ",
            "id": "comment-15554599"
        },
        {
            "date": "2016-10-09T07:00:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f22b1da261b93f60687431b161828e2fb27fdc8f in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f22b1da ]\n\nSOLR-9604,SOLR-9608: Ensure SSL connections are re-used\n\nFix ConnectionReuseTest. Add coverage for all SolrClients.\nRemove explicit cacheKey for HttpRequestContext, make it singleton.\n ",
            "id": "comment-15559445"
        },
        {
            "date": "2016-10-09T15:19:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d8bb56d4ad3177b34349fa106cdb3edfe9c711df in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d8bb56d ]\n\nSOLR-9604,SOLR-9608: fix HttpSolrClientConPoolTest.testPoolSize()  ",
            "id": "comment-15560148"
        },
        {
            "date": "2016-10-09T15:26:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2b5fc01a5d6b1bb2245fa0d5cf854637020f0c97 in lucene-solr's branch refs/heads/branch_6x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2b5fc01 ]\n\nSOLR-9604,SOLR-9608: fix HttpSolrClientConPoolTest.testPoolSize()  ",
            "id": "comment-15560157"
        },
        {
            "date": "2016-11-09T08:37:18+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Closing after 6.3.0 release. ",
            "id": "comment-15650220"
        }
    ]
}