{
    "id": "SOLR-285",
    "title": "Server Side XSLT for update processing",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Ideally, we should support a way for people to specify send XML ContentStreams to Solr and do server side XSLT processing to convert it (much like the XSLTResposneWriter supports server side XSLT processing of responses.",
    "attachments": {
        "xslt_updater.diff": "https://issues.apache.org/jira/secure/attachment/12360980/xslt_updater.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12509719",
            "date": "2007-07-03T00:37:44+0000",
            "content": "this is mainly just a proof of concept ... there is a lot of room for improvement here .. this reuses the same TransformerProvider as the XSLTResposneWriter but doesn't even try to use hte cache (even if it did, using it in conjunction with XSLTResposneWriter would constantly invalidate the cache)\n\nthe biggest improvement would be to find someway to pipeline the XSLT transformation into the Stax parsing ... i tried to at least use a DOMResult for hte transformer and a DOMSource for the XMLStreamReader but i got this exception...\n\nSEVERE: java.lang.UnsupportedOperationException: XMLInputFactory.createXMLStreamReader(javax.xml.transform.dom.DOMSource) not yet implemented\n        at com.bea.xml.stream.MXParserFactory.createXMLStreamReader(MXParserFactory.java:70)\n\n...oh well.\n\n\npatch also includes a simple rss2solr.xml stylesheet that does some very simplistic/silly transformations to match the example schema.xml\n\n\ncomments from people who understand javax.xml.* better then i do would be greatly appreciated. "
        },
        {
            "author": "Thomas Peuss",
            "id": "comment-12530453",
            "date": "2007-09-26T14:25:32+0000",
            "content": "The major problem I have with this solution is that it holds the whole transformed document in memory. My suggestion is to use a stream transformation technology like Joost (http://joost.sourceforge.net/). Here is a little snippet what you can do:\n           PipedReader read=new PipedReader();\n           PipedWriter writer=new PipedWriter(read);\n\t\t\tProcessor proc = \n\t\t\t   new Processor(new InputSource(new FileReader(\"order-group.stx\")), pContext);\n            StreamEmitter emitter = StreamEmitter.newEmitter(writer,\n                    \"UTF-8\",proc.outputProperties);\n            proc.setContentHandler(emitter);\n            proc.setLexicalHandler(emitter);\n\n            proc.parse(new InputSource(new FileReader(\"order.xml\")));\n\n            BufferedReader bufRead=new BufferedReader(read);\n            System.out.println(bufRead.readLine());\n\nSo you can give this Reader directly to the XmlUpdateHandler then and you are done without buffering the transformed document in memory.\n\nThe downside of course is that you have to provide STX-files instead of XSL-files. But the syntax is very similar.\n\nWhat do you think? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12559197",
            "date": "2008-01-15T19:39:12+0000",
            "content": "FYI for people interested in the STX/Joost approach Thomas described, he opened  SOLR-370 to track that.\n\npersonally i think they both have merits: XSLT is something that (in theory) more people are familiar with, while the STX stuff seems to be more efficient for large amounts of data. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13580219",
            "date": "2013-02-17T17:05:32+0000",
            "content": "Cleaning up old JIRAs, re-open if necessary. "
        }
    ]
}