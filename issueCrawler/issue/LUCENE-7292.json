{
    "id": "LUCENE-7292",
    "title": "Change build system to use \"--release 8\" instead of \"-source/-target\" when invoking javac",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.0",
        "components": [
            "general/build"
        ],
        "labels": "",
        "fix_versions": [
            "6.1",
            "6.3",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Currently we pass -source 1.8 -target 1.8 to javac and javadoc when compiling our source code. We all know that this brings problems, because cross-compiling does not really work. We create class files that are able to run on Java 8, but when it is compiled with java 9, it is not sure that some code may use Java 9 APIs that are not available in Java 8. Javac prints a warning about this (it complains about the bootclasspath not pointing to JDK 8 when used with source/target 1.8).\n\nJava 8 is the last version of Java that has this trap. From Java 9 on, instead of passing source and target, the recommended way is to pass a single -release 8 parameter to javac (see http://openjdk.java.net/jeps/247). This solves the bootsclasspath problem, because it has all the previous java versions as \"signatures\" (like forbiddenapis), including deprecated APIs,... everything included. You can find this in the $JAVA_HOME/lib/ct.sym file (which is a ZIP file, so you can open it with a ZIP tool of your choice). In Java 9+, this file also contains all old APIs from Java 6+.\n\nWhen invoking the compiler with -release 8, there is no risk of accidentally using API from newer versions.\n\nThe migration here is quite simple: As we require Java 8 already, there is (theoretically) no need to pass source and target anymore. It is enough to just pass -release 8 if we detect Java 9 as compiling JVM. Nevertheless I plan to do the following:\n\n\n\tremove properties javac.source and javac.target from Ant build\n\tadd javac.release property and define it to be \"8\" (not \"1.8\", this is new version styling that also works with Java 8+ already)\n\tremove attributes in the <javac source=\"...\" target=\"...\"/> calls\n\tadd a new Ant property javac.release.args that is dynamically evaluated inside our compile macro: On Java 9 it evaluates to -release ${javac.release}, for java 8 it uses -source ${javac.release} -target ${javac.release} for backwards compatibility\n\tpass this new arg to javac as <arg line=\"...\"/>\n\n\n\nBy this we could theoretically remove the check from smoketester about the compiling JDK (the MANIFEST check), because although compiled with Java 9, the class files were actually compiled against the old Java API from ct.sym file.\n\nI will also align the warnings to reenable -Xlint:options.",
    "attachments": {
        "LUCENE-7292.patch": "https://issues.apache.org/jira/secure/attachment/12804945/LUCENE-7292.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15291149",
            "author": "Uwe Schindler",
            "date": "2016-05-19T14:12:17+0000",
            "content": "Preliminary patch.\n\nUnfortunately neither forbiddenapis nor javacc currently support \"8\" as a valid release version. I have to hack around this. Forbiddenapis 2.1 will support a new syntax for jdk releases, but not the currently used 2.0.\n\nI think I will add  preliminary extra argument that can be passed to those legacy tools. "
        },
        {
            "id": "comment-15291163",
            "author": "Uwe Schindler",
            "date": "2016-05-19T14:22:46+0000",
            "content": "Patch with workaround for forbiddenapis and javacc. It also removes the debug output that I added.\n\nNot yet solved/discussed is smoke tester. This includes how to handle manifest's <attribute name=\"X-Compile-Source-JDK\" value=\"${javac.release}\"/>. "
        },
        {
            "id": "comment-15291177",
            "author": "Uwe Schindler",
            "date": "2016-05-19T14:32:16+0000",
            "content": "Currently the manifest looks like this:\n\n\nManifest-Version: 1.0\nAnt-Version: Apache Ant 1.8.3\nCreated-By: 9-ea+118 (Oracle Corporation)\nExtension-Name: org.apache.lucene\nSpecification-Title: Lucene Search Engine: core\nSpecification-Version: 7.0.0\nSpecification-Vendor: The Apache Software Foundation\nImplementation-Title: org.apache.lucene\nImplementation-Version: 7.0.0-SNAPSHOT 6113e1f2fabf6668b4bdbd7640af45b\n ebcc2e505 - Uwe Schindler - 2016-05-19 16:30:11\nImplementation-Vendor: The Apache Software Foundation\nX-Compile-Source-JDK: 8\nX-Compile-Target-JDK: 8\n\n\n\nI think this is fine for now, smoketester still fails with Java 9, but thats a different issue to decide. Michael McCandless? "
        },
        {
            "id": "comment-15291183",
            "author": "Uwe Schindler",
            "date": "2016-05-19T14:34:48+0000",
            "content": "This patch also makes the \"compact\" profile options work correct with Java 9. "
        },
        {
            "id": "comment-15291250",
            "author": "Michael McCandless",
            "date": "2016-05-19T15:08:26+0000",
            "content": "What check is smoke tester angry about with java 9? "
        },
        {
            "id": "comment-15291268",
            "author": "Uwe Schindler",
            "date": "2016-05-19T15:17:46+0000",
            "content": "Mike I mean the check that validates if all JAR files were compiled against the \"official\" JDK version (in our case 8). We have to fix this to accept the right things or remove completely, because now we could also compile against Java 9 and the class files are guaranteed to work with Java 8, too (as javac checks the signatures against Java 8 signatures with -release 8. "
        },
        {
            "id": "comment-15291277",
            "author": "Michael McCandless",
            "date": "2016-05-19T15:20:56+0000",
            "content": "OK should we just remove the check? "
        },
        {
            "id": "comment-15291294",
            "author": "Uwe Schindler",
            "date": "2016-05-19T15:25:45+0000",
            "content": "OK should we just remove the check?\n\nThat is the open question that I wanted to start a discussion on. In my opinion it is obsolete for the reasns posted before:\n\n\tJava 8 is the last version that have the trap of not correctly cross-compiling. As we require Java 8 already, you can only compile agans Java 8 or the prereleases of Java 9\n\tJava 9 allows cross-compiling, because it useds the old method/classsignatures while compiling\n\n\n\nThe only thing that we cannot check is that it really compiles against old Java 8 when release manager only excutes against Java 9 (at some point in future). A compile bug could make code compile in Java 9, but fail on Java 8's compiler.\n\nBecause of this I am unsure if we should still require the release manager to compile against the \"offcial version\". "
        },
        {
            "id": "comment-15291307",
            "author": "Uwe Schindler",
            "date": "2016-05-19T15:34:17+0000",
            "content": "In addition, Javadocs does not yet support -release. But this should change hopefully. "
        },
        {
            "id": "comment-15291320",
            "author": "Uwe Schindler",
            "date": "2016-05-19T15:38:40+0000",
            "content": "Steve Rowe: Do you know if the Maven build could be fixed to do the same? Maybe by updating the compiler plugin version to a Java 9 compatible one? "
        },
        {
            "id": "comment-15291349",
            "author": "Steve Rowe",
            "date": "2016-05-19T15:50:29+0000",
            "content": "Uwe, it looks like there are several Java9-related maven problems: https://cwiki.apache.org/confluence/display/MAVEN/Java+9+-+Jigsaw, and none of the affected plugins has released fixes yet, though it appears that SNAPSHOT versions address (some of?) the problems. \n\nI can see that the above-linked maven-compiler-plugin SNAPSHOT source includes support for -release: from https://svn.apache.org/viewvc/maven/plugins/branches/maven-compiler-plugin_jigsaw-ea/src/main/java/org/apache/maven/plugin/compiler/AbstractCompilerMojo.java?view=markup#l146:\n\n\n146:    /**\n147:\t     * The -release argument for the Java compiler, supported since Java9\n148:\t     */\n149:\t    @Parameter( property = \"maven.compiler.release\" )\n150:\t    protected String release;\n\n "
        },
        {
            "id": "comment-15291433",
            "author": "Uwe Schindler",
            "date": "2016-05-19T16:25:20+0000",
            "content": "Updated patch: The Javadocs command also supports \"-release\", so I was able to apply the same trick.\n\nUnfortunately, the javadoc command fails for other reasons (and is disabled on Jenkins with Java 9), but it generally works. "
        },
        {
            "id": "comment-15294079",
            "author": "Uwe Schindler",
            "date": "2016-05-20T20:02:04+0000",
            "content": "Hi,\nI keep the Maven build unmodified for now, I will just update some version numbers. I will commit the Ant changes soon. I will upload the final patch in a minute.\nUwe "
        },
        {
            "id": "comment-15294105",
            "author": "Uwe Schindler",
            "date": "2016-05-20T20:16:01+0000",
            "content": "Updated patch. Will commit soon. "
        },
        {
            "id": "comment-15294128",
            "author": "ASF subversion and git services",
            "date": "2016-05-20T20:24:37+0000",
            "content": "Commit b9caf83bfaf14d4571c1e309ac30b3cc0b7a223a in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b9caf83 ]\n\nLUCENE-7292: Use '-release' instead of '-source/-target' during compilation on Java 9+ to ensure real cross-compilation "
        },
        {
            "id": "comment-15294129",
            "author": "ASF subversion and git services",
            "date": "2016-05-20T20:26:28+0000",
            "content": "Commit 7bd6d94952cb0710415c73b038963bf92275d2fb in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7bd6d94 ]\n\nLUCENE-7292: Use '-release' instead of '-source/-target' during compilation on Java 9+ to ensure real cross-compilation "
        },
        {
            "id": "comment-15294130",
            "author": "Uwe Schindler",
            "date": "2016-05-20T20:26:57+0000",
            "content": "I also updated smoke tester to accept new JDK versioning. But I did not remove the extra check for the Java version that was used to compile. "
        },
        {
            "id": "comment-15504805",
            "author": "Uwe Schindler",
            "date": "2016-09-19T21:55:35+0000",
            "content": "Build 135 of Java 9 changed to use \"long GNU style options\", so -release changed to --release. Reopnening to fix build.xml for Java 9. This also requires to update Jenkins to at least this build.\n\nSee http://mail.openjdk.java.net/pipermail/compiler-dev/2016-September/010358.html\nAnd: http://mail.openjdk.java.net/pipermail/compiler-dev/2016-September/010357.html "
        },
        {
            "id": "comment-15504824",
            "author": "ASF subversion and git services",
            "date": "2016-09-19T22:02:18+0000",
            "content": "Commit 3712bf58196cd0bd56fad213547dee12029e7cbf in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3712bf5 ]\n\nLUCENE-7292: Fix build to use \"--release 8\" instead of \"-release 8\" on Java 9 (this changed with recent EA build b135) "
        },
        {
            "id": "comment-15504826",
            "author": "ASF subversion and git services",
            "date": "2016-09-19T22:03:23+0000",
            "content": "Commit b67a062f9db6372cf654a4366233e953c89f2722 in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b67a062 ]\n\nLUCENE-7292: Fix build to use \"--release 8\" instead of \"-release 8\" on Java 9 (this changed with recent EA build b135) "
        },
        {
            "id": "comment-15650285",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-11-09T08:38:34+0000",
            "content": "Closing after 6.3.0 release. "
        }
    ]
}