{
    "id": "SOLR-11688",
    "title": "Transient cache should not get initiated unless explicitly configured",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When I start solr using the default configset and solr.xml ( which doesn't have any transient cache enabled ) I see this line entry\n\n\nINFO  - 2017-11-27 21:55:10.190; [   ] org.apache.solr.core.TransientSolrCoreCacheDefault; Allocating transient cache for 2147483647 transient cores\n\n\n\nThis line kind of looked scary so I spoke to Erick offline and we could do two things here:\n\n1. Not initialize a transient cache if not configured . Today we are configuring a 1000 entry cache based on this code path\n\n\nlog.info(\"Allocating transient cache for {} transient cores\", cacheSize);\n    addObserver(this.observer);\n    // it's possible for cache\n    if (cacheSize < 0) { // Trap old flag\n      cacheSize = Integer.MAX_VALUE;\n    }\n    // Now don't allow ridiculous allocations here, if the size is > 1,000, we'll just deal with\n    // adding cores as they're opened. This blows up with the marker value of -1.\n    transientCores = new LinkedHashMap<String, SolrCore>(Math.min(cacheSize, 1000), 0.75f, true) {\n      @Override\n      protected boolean removeEldestEntry(Map.Entry<String, SolrCore> eldest) {\n        if (size() > cacheSize) {\n          SolrCore coreToClose = eldest.getValue();\n          setChanged();\n          notifyObservers(coreToClose);\n          log.info(\"Closing transient core [{}]\", coreToClose.getName());\n          return true;\n        }\n        return false;\n      }\n    };\n\n\n\n\n2. \"Allocating transient cache for 2147483647 transient cores\" means we are creating a cache that large while we aren't in reality. So a better message for this line",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-28T01:08:46+0000",
            "content": "I was thinking about this a little more and there is at least one nuance. The default transient cache handler is, well, the default. So a user can freely create a core with transient=true. What should happen in that case if no explicit transientCacheHandler has been defined?\n\nProposal: We simply treat it as a \"normal\" core. By that I mean pretend transient=false. This is pretty much the current behavior since the limit on transient cores is Integer.MAX_VALUE.\n\nOr maybe initialize the LinkedHashMap with a much smaller value (say 10). It'll still grow without limit if it's not configured, but likely that'll introduce fewer failure cases, everywhere we currently use transientCacheHandler we'd need to test for null..... ",
            "author": "Erick Erickson",
            "id": "comment-16267911"
        }
    ]
}