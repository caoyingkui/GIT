{
    "id": "SOLR-2326",
    "title": "Replication command indexversion fails to return index version",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "replication (java)"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "To test this, I took the /example/multicore/core0 solrconfig and added a simple replication handler:\n\n  <requestHandler name=\"/replication\" class=\"solr.ReplicationHandler\" >\n      <lst name=\"master\">\n        <str name=\"replicateAfter\">commit</str>\n        <str name=\"replicateAfter\">startup</str>\n        <str name=\"confFiles\">schema.xml</str>\n      </lst>\n  </requestHandler>\n\nWhen I query the handler for details I get back the indexVersion that I expect: http://localhost:8983/solr/core0/replication?command=details&wt=json&indent=true\n\nBut when I ask for just the indexVersion I get back a 0, which prevent the slaves from pulling updates: http://localhost:8983/solr/core0/replication?command=indexversion&wt=json&indent=true",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Eric Pugh",
            "id": "comment-12985518",
            "date": "2011-01-24T05:16:13+0000",
            "content": "Mark, thanks for taking a look at this.   I've been dinking around with this bug, and I think it's because I am using the MERGE command to merge two indexes together.  When I do that, then I get the indexVersion 0.  After doing a merge, even after adding a new document and doing a commit it doesn't work.   I think it has to do with these lines from ReplicationHandler and a lack of a commitPoint:\n\n      if (commitPoint != null && replicationEnabled.get()) \n{\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      }\n else \n{\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      } "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12985712",
            "date": "2011-01-24T14:43:36+0000",
            "content": "Thanks for the additional info Eric,\n\nSo just to clarify: when you don't do a MERGE, you don't ever see this problem?\n\nThe code snippet you have does look like where the action is likely happening to me to on first glance - but seems very odd you would still have the problem after an addDoc+commit eh?\n\nI'll try and see if I can work up a unit test. "
        },
        {
            "author": "Eric Pugh",
            "id": "comment-12986402",
            "date": "2011-01-25T14:34:17+0000",
            "content": "So I did discover one odd thing.   If I don't have a /update update requesthandler listed in the solrconfig.xml, then the commitPoint is ALWAYS null, it's almost like having that in the stack causes the commitPoint to be done.\n\nMy other datapoint, that I think, but haven't verified is that if you don't have the replicate on startup set, then it seems, but I am not positive, to give that result.\n\nOne question I have is why is there that race condition?  I mean, if the command=details works, then shouldn't indexversion work the same, or raise  an error?  versus returning a rather unuseful 0?  Maybe just logging \"no commitPoint found\" would help.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12994064",
            "date": "2011-02-13T10:35:09+0000",
            "content": "There isn't any patch here yet, can we move out to 3.2? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12994170",
            "date": "2011-02-13T23:38:02+0000",
            "content": "Yeah - I actually won't be able to dig in for a bit - so push is fine with me. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043624",
            "date": "2011-06-03T16:46:10+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Jeremy Custenborder",
            "id": "comment-13065390",
            "date": "2011-07-14T17:13:56+0000",
            "content": "I'm running into the same issue. My slave server has no update handlers. Calling /solr/core/replication?command=indexversion on the master always returned 0.  I was looking at the code for the handler and found an interesting comment on line 125. It's currently configured to replicate after commit.\n\n\nThis happens when replication is not configured to happen after startup and no commit/optimize\nhas happened yet.\n\nThis got me thinking so I issued the following command against the master\n\ncurl 'http://127.0.0.1:8080/solr/core/update' -H \"Content-Type: text/xml\" --data-binary '<optimize/>'\n\nThe next call to /solr/core/replication?command=indexversion returned a valid version and replication to the slave started.\n\nThis makes me believe the problem is in this code block. \n\n   if (command.equals(CMD_INDEX_VERSION)) {\n      IndexCommit commitPoint = indexCommitPoint;  // make a copy so it won't change\n      if (commitPoint != null && replicationEnabled.get()) {\n        //\n        // There is a race condition here.  The commit point may be changed / deleted by the time\n        // we get around to reserving it.  This is a very small window though, and should not result\n        // in a catastrophic failure, but will result in the client getting an empty file list for\n        // the CMD_GET_FILE_LIST command.\n        //\n        core.getDeletionPolicy().setReserveDuration(commitPoint.getVersion(), reserveCommitDuration);\n        rsp.add(CMD_INDEX_VERSION, commitPoint.getVersion());\n        rsp.add(GENERATION, commitPoint.getGeneration());\n      } else {\n        // This happens when replication is not configured to happen after startup and no commit/optimize\n        // has happened yet.\n        rsp.add(CMD_INDEX_VERSION, 0L);\n        rsp.add(GENERATION, 0L);\n      }\n    }\n\n\n\n\nIt looks like there is a race condition resulting in indexCommitPoint being null. Look at the method postCommit() in getEventListener() method.\n\n\npublic void postCommit() {\n        IndexCommit currentCommitPoint = core.getDeletionPolicy().getLatestCommit();\n\n        if (getCommit) {\n          // IndexCommit oldCommitPoint = indexCommitPoint;\n          indexCommitPoint = currentCommitPoint;\n\n          // We don't need to save commit points for replication, the SolrDeletionPolicy\n          // always saves the last commit point (and the last optimized commit point, if needed)\n          /***\n          if (indexCommitPoint != null) {\n            core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n          }\n          if(oldCommitPoint != null){\n            core.getDeletionPolicy().releaseCommitPoint(oldCommitPoint.getVersion());\n          }\n          ***/\n        }\n        if (snapshoot) {\n          try {\n            SnapShooter snapShooter = new SnapShooter(core, null);\n            snapShooter.createSnapAsync(currentCommitPoint, ReplicationHandler.this);\n          } catch (Exception e) {\n            LOG.error(\"Exception while snapshooting\", e);\n          }\n        }\n      }\n\n\n\nThis is the first time I see indexCommitPoint being set. Since indexCommitPoint is null until being loaded this causes a value of 0 to always be returned. \n\nIf you call optimize like I did does your index start replicating? In my situation each core that returned 0/0 started replicating after I called optimize.  "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13081880",
            "date": "2011-08-09T20:07:17+0000",
            "content": "I'm running into the same problem as well.\n/replication?command=indexversion returns a non-zero value upon startup, but turns into a zero after a commit. An \"optimze\" does not seem to bring it back. "
        },
        {
            "author": "Eric Pugh",
            "id": "comment-13081882",
            "date": "2011-08-09T20:10:27+0000",
            "content": "I am out of the office 8/9 through 8/14.  For urgent issues, please\ncontact Jason Hull at jhull@opensourceconnections.com or phone at\n(434) 409-8451. "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13082360",
            "date": "2011-08-10T14:17:38+0000",
            "content": "OK, after some troubleshooting, my case is more obscure, but exposes the same problem.\n\nI have a \"master\" core with an index. Replication is configured after startup and after commit.\nI start Solr and ReplicationHandler reports correct information. \n\"indexversion\" is non-zero and \"details\" shows me a filelist for a specific index generation.\nAll is well, replication is running fine.\n\nNow, my application RELOADs the \"master\" core (either by using /admin/cores?action=RELOAD or by using action=CREATE to recreate the same core in the same place. In both cases the index is preserved).\n\nOnce the core is RELOADed, replication \"details\" still shows correct indexversion and generation, but the filelist is gone. And once a new commit happens on the RELOADed core, \"indexversion\" command starts reporting zero and never recovers. \n\nTherefore replication stops for good. The only way to make it replicate again is to restart Solr. "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13082390",
            "date": "2011-08-10T15:16:54+0000",
            "content": "Could ReplicationHandler be holding on to a stale \"core\" instance after RELOAD? "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13082417",
            "date": "2011-08-10T15:50:15+0000",
            "content": "Another data point, /replication?command=commits\n\nAfter Solr startup:\n\nhttp://localhost:8983/solr/master1/replication?command=commits\n<response>\n  <lst name=\"responseHeader\">\n    <int name=\"status\">0</int>\n    <int name=\"QTime\">0</int>\n  </lst>\n  <arr name=\"commits\">\n    <lst>\n      <long name=\"indexVersion\">1312988447203</long>\n      <long name=\"generation\">2</long>\n      <arr name=\"filelist\">\n        <str>_0.nrm</str>\n        <str>_0_0.frq</str>\n        <str>_0_0.tiv</str>\n... and so on\n\nNow RELOAD the core:\nhttp://localhost:8983/solr/admin/cores?action=RELOAD&core=master1\n\nNow repeat \"commits\" command:\nhttp://localhost:8983/solr/master1/replication?command=commits\n<response>\n  <lst name=\"responseHeader\">\n    <int name=\"status\">0</int>\n    <int name=\"QTime\">0</int>\n  </lst>\n  <arr name=\"commits\"/>\n</response>\n\nAnd it stays this way forever, even when new docs are being commited to the RELOADed core. "
        },
        {
            "author": "Yury Kats",
            "id": "comment-13082425",
            "date": "2011-08-10T16:01:42+0000",
            "content": "Looks like all failing code paths in ReplicationHandler lead to \n\ncore.getDeletionPolicy()\n\n\nSo either ReplicationHandler holds on to stale core instance or core's DeletionPolicy is not properly initialized when the core is being reloaded. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13082499",
            "date": "2011-08-10T17:39:51+0000",
            "content": "Hey Yury - I think you may have hit a different worse bug here. Looking into it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13082511",
            "date": "2011-08-10T18:02:14+0000",
            "content": "I think your main problem is this bug Yury: SOLR-2705\n\nI have a test case that I have to polish and a fix coming soon. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106490",
            "date": "2011-09-16T14:51:18+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13148882",
            "date": "2011-11-12T00:14:06+0000",
            "content": "mark, any chance this test/fix is coming in any time soon? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13148940",
            "date": "2011-11-12T02:11:28+0000",
            "content": "I don't think I ever replicated the original issue - we can push this to 3.6. I'd like to look at it one more time before giving up, but I don't know when.  "
        },
        {
            "author": "Matt Traynham",
            "id": "comment-13182775",
            "date": "2012-01-09T20:32:13+0000",
            "content": "Hey Yury, I recently started seeing this same issue and thought I'd provide a bit of input into what I found debugging in my 3.3 Branch. \nI have found that a core reload does break the commits call after.  But if you actually reload a second time, it is fixed again.  This is because it is forcefully opening a new writer and a lock exception occurs every other time.\n\nDuring the inform method of ReplicationHandler, if you have configured replicate after startup, the direct update handler will forceOpenWriter().\n\nReplicationHandler.java\nif (replicateAfter.contains(\"startup\")) {\n                replicateOnStart = true;\n                RefCounted<SolrIndexSearcher> s = core.getNewestSearcher(false);\n                try {\n                    IndexReader reader = s==null ? null : s.get().getReader();\n                    if (reader!=null && reader.getIndexCommit() != null && reader.getIndexCommit().getGeneration() != 1L) {\n                        try {\n                            if(replicateOnOptimize){\n                                Collection<IndexCommit> commits = IndexReader.listCommits(reader.directory());\n                                for (IndexCommit ic : commits) {\n                                    if(ic.isOptimized()){\n                                        if(indexCommitPoint == null || indexCommitPoint.getVersion() < ic.getVersion()) indexCommitPoint = ic;\n                                    }\n                                }\n                            } else{\n                                indexCommitPoint = reader.getIndexCommit();\n                            }\n                        } finally {\n                            // We don't need to save commit points for replication, the SolrDeletionPolicy\n                            // always saves the last commit point (and the last optimized commit point, if needed)\n                            /***\n                            if(indexCommitPoint != null){\n                                core.getDeletionPolicy().saveCommitPoint(indexCommitPoint.getVersion());\n                             }\n                             ***/\n                        }\n                    }\n                    if (core.getUpdateHandler() instanceof DirectUpdateHandler2) {\n                        ((DirectUpdateHandler2) core.getUpdateHandler()).forceOpenWriter();\n                    } else {\n                        LOG.warn(\"The update handler being used is not an instance or sub-class of DirectUpdateHandler2. \" +\n                                \"Replicate on Startup cannot work.\");\n                    } \n\n\n\nWhich will request a new lock, open a new writer and unlock.  If a lock already exists the exception will be thrown:\norg.apache.lucene.store.LockObtainFailedException: Lock obtain timed out and actually bail out of creating a new writer.\n\nDirectUpdateHandler2.java\n   public void forceOpenWriter() throws IOException  {\n    iwCommit.lock();\n    try {\n      openWriter();\n    } finally {\n      iwCommit.unlock();\n    }\n  }\n\n\n\nThe openWriter method goes on to create a new SolrIndexWriter as well as a few other objects like IndexFileDeleter and IndexDeletionPolicyWrapper, which actually holds the commitPoints.\n\nIndexDeletionPolicyWrapper.java\nprivate volatile Map<Long, IndexCommit> solrVersionVsCommits = new ConcurrentHashMap<Long, IndexCommit>();\n\n  /**\n   * Internal use for Lucene... do not explicitly call.\n   */\n  public void onInit(List list) throws IOException {\n    List<IndexCommitWrapper> wrapperList = wrap(list);\n    deletionPolicy.onInit(wrapperList);\n    updateCommitPoints(wrapperList);\n    cleanReserves();\n  }\n\n  private void updateCommitPoints(List<IndexCommitWrapper> list) {\n    Map<Long, IndexCommit> map = new ConcurrentHashMap<Long, IndexCommit>();\n    for (IndexCommitWrapper wrapper : list) {\n      if (!wrapper.isDeleted())\n        map.put(wrapper.getVersion(), wrapper.delegate);\n    }\n    solrVersionVsCommits = map;\n    latestCommit = ((list.get(list.size() - 1)).delegate);\n  }\n\n  /**\n   * Gets the commit points for the index.\n   * This map instance may change between commits and commit points may be deleted.\n   * It is recommended to reserve a commit point for the duration of usage\n   *\n   * @return a Map of version to commit points\n   */\n  public Map<Long, IndexCommit> getCommits() {\n    return solrVersionVsCommits;\n  }\n\n\n\nThe problem being, if a writer never gets created correctly, the init method on the IndexDeletionPolicyWrapper never gets called and the solrVersionVsCommits map is empty.  If anyone has any input on a solution, that would be greatly appreciated.\n\nThanks,\nMatt "
        },
        {
            "author": "Matt Traynham",
            "id": "comment-13182795",
            "date": "2012-01-09T21:01:51+0000",
            "content": "One more heads up, I have found that if you change the lockType to single/noLock, the problem goes away.  Which in turn is a good solution for me since I have this server configured as a repeater and only have found this problem with repeaters. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13219102",
            "date": "2012-02-29T11:15:34+0000",
            "content": "We're seeing also the same here on a 3.5 master: indexversion command returns 0, while the details command shows correct versions. Have not verified that it's because of locking, but based on behaviour and code inspection I'm pretty sure we don't get a valid commitPoint. Tried optimize on master, and also multiple reload cores, but it does not help. A restart of master did not help either.\n\nSo seems we should clean up the locking in forceOpenWriter() to make sure we always have a valid commit point.\nAnd should we get commitPoint == null it would be better to fetch versions from the getIndexVersion() method than returning 0 wouldn't it? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13219130",
            "date": "2012-02-29T12:12:59+0000",
            "content": "Forget the above, I discovered a misconfiguration on our side. We started jetty without -Dsolr.enable.master=true as required by our solrconfig.xml setup. Now it's ok  Opened a new issue SOLR-3176 for Solr to give some better logging in this case. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412164",
            "date": "2012-07-11T22:26:12+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "David Sobon",
            "id": "comment-13426353",
            "date": "2012-08-01T07:02:02+0000",
            "content": "I'm having similar problems.\n\nFresh install, with populated index from apachesolr (drupal module / interface)\n\nVersions:\nsolr 3.6.0\njetty 6.1.26\njava-sun build 1.6.0_26-b03\n\nMaster: details\n<str name=\"isMaster\">false</str>\n<str name=\"isSlave\">false</str>\n<long name=\"indexVersion\">1343699948493</long>\n<long name=\"generation\">128</long>\n\nMaster: indexversion\n<long name=\"indexversion\">0</long>\n<long name=\"generation\">0</long>\n\nSlave: details\n<str name=\"isMaster\">false</str>\n<str name=\"isSlave\">true</str>\n<str name=\"timesFailed\">1444</str>\n<str name=\"isPollingDisabled\">false</str>\n<str name=\"isReplicating\">false</str>\n\nSlave: indexversion\n<long name=\"indexversion\">0</long>\n<long name=\"generation\">0</long>\n\nIs there any facilities to debug this problem? Not having error messages of why master is not master is a bug. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429844",
            "date": "2012-08-07T03:43:32+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13452176",
            "date": "2012-09-10T17:41:57+0000",
            "content": "moving all 4.0 issues not touched in a month to 4.1 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717217",
            "date": "2013-07-23T18:47:30+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971297",
            "date": "2014-04-16T12:57:42+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}