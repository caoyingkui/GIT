{
    "id": "SOLR-11512",
    "title": "Infinite parsing loop possible with edismax bq and local-params",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.2"
        ],
        "affect_versions": "7.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The following query against the techproducts example puts solr into an infinite loop:\n\n\ncurl -g -v 'http://localhost:8983/solr/techproducts/select?q=*&defType=edismax&qq={!edismax+v=something}&bq={!edismax+v=$qq}\n\n\n\nProblem doesn't depend on the collection, just an easy example. I guess I'd expect a failure with \"Infinite Recursion detected parsing query ...\" instead. So depending on the query config a user typing \n{!edismax v=whatever}\n into a search box can send a solr instance to 100% cpu.\n\nI can reproduce using TestExtendedDismaxParser by adding:\n\n  @Test\n  public void loopsForever() throws Exception {\n    assertJQ(req(\"defType\", \"edismax\", \"q\", \"*\", \"qq\", \"{!edismax v=something}\", \"bq\", \"{!edismax v=$qq}\"));\n  }\n\n\n\nThe code seems to hit QParser.checkRecurse() and try to fail but something sends it around for another try. Repeat.\n\nGiven the complexity of the parsing code there may well be other examples. There's no way to disable the local params syntax is there? Question was asked in SOLR-4197.",
    "attachments": {
        "SOLR-11512.patch": "https://issues.apache.org/jira/secure/attachment/12893040/SOLR-11512.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-19T01:38:26+0000",
            "content": "Interesting... this is probably due to edismax trying to parse as-is, catching any exceptions, and then trying more aggressive escaping to try and prevent the parse exception.\nDefinitely specific to edismax, but I wouldn't have thought it would somehow bypass the infinite recursion checker. ",
            "author": "Yonik Seeley",
            "id": "comment-16210438"
        },
        {
            "date": "2017-10-19T12:39:23+0000",
            "content": "I believe it will end up with  \"Infinite Recursion detected parsing query ...\", but it will take ages. \n\nI checked it by decreasing value for recurseCount condition in \n\n\n  private void checkRecurse() throws SyntaxError {\n    if (recurseCount++ >= 100) {\n...\n\n\n\n\nDoes it make sense to parse boost parameters for boost query? Fast patch to avoid it is attached.\n ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16210944"
        },
        {
            "date": "2017-10-19T16:33:22+0000",
            "content": "I think it's bad that edismax (dismax too) will parse embedded local-param subclauses!  this is a kind of back door to calling query parsers that the Solr administrator/developer doesn't want \u2013 related to SOLR-11501 which I'm working now now.  IMO only the \"lucene\" (default) QParser should parse this. ",
            "author": "David Smiley",
            "id": "comment-16211314"
        },
        {
            "date": "2017-10-19T16:43:10+0000",
            "content": "Yes, dismax should not parse embedded different query types.\nPart of edismax was meant to be a superset of the Lucene query parser, although there should be a parameter to disable it.\nedit: a flag to disable would also be useful for the Lucene parser itself I think. ",
            "author": "Yonik Seeley",
            "id": "comment-16211336"
        },
        {
            "date": "2017-10-24T06:38:59+0000",
            "content": "Thanks for following up. I doubt the query I supplied makes any sense. I ended up accidentally triggering this loop whilst testing that xmlparser was (somewhat) disabled using the suggestion:\n\n<queryParser name=\"xmlparser\" class=\"solr.ExtendedDismaxQParserPlugin\" />\n\n\nWhen I tried the query \"\n{!xmlparser v=DOCTYPE stuff}\n\"\" it got rewritten to edismax and spun on cpu. I was kinda surprised to find you can't disable the {! syntax. ",
            "author": "Will Currie",
            "id": "comment-16216398"
        },
        {
            "date": "2017-11-22T13:52:48+0000",
            "content": "Fixed via SOLR-11501.\n\nBTW I was wrong when I said dismax is affected; only edismax is. ",
            "author": "David Smiley",
            "id": "comment-16262537"
        }
    ]
}