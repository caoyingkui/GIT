{
    "id": "LUCENE-759",
    "title": "Add n-gram tokenizers to contrib/analyzers",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "It would be nice to have some n-gram-capable tokenizers in contrib/analyzers.  Patch coming shortly.",
    "attachments": {
        "LUCENE-759.patch": "https://issues.apache.org/jira/secure/attachment/12347781/LUCENE-759.patch",
        "LUCENE-759-filters.patch": "https://issues.apache.org/jira/secure/attachment/12352469/LUCENE-759-filters.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-12-22T23:43:04+0000",
            "content": "Included:\n  NGramTokenizer\n  NGramTokenizerTest\n  EdgeNGramTokenizer\n  EdgeNGramTokenizerTest ",
            "author": "Otis Gospodnetic",
            "id": "comment-12460613"
        },
        {
            "date": "2006-12-22T23:44:20+0000",
            "content": "Unit tests pass, committed. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12460618"
        },
        {
            "date": "2007-02-16T20:01:59+0000",
            "content": "Reopening, because I'm bringing in Adam Hiatt's modifications that he uploaded in a patch for SOLR-81.  Adam's changes allow this tokenizer to create n-grams whose sizes are specified as a min-max range.\n\nThis patch fixes a bug in Adam's code, but has another bug that I don't know how to fix now.\nAdam's bug:\n  input: abcde\n  minGram: 1\n  maxGram: 3\n  output: a ab abc  \u2013 and this is where tokenizing stopped, which was wrong, it should have continued: b bc bcd c cd cde d de e\n\nOtis' bug:\n  input: abcde\n  minGeam: 1\n  maxGram: 3\n  output: e de cde d cd bcd c bc abc b ab \u2013 and this is where tokenizing stops, which is wrong, it should generate one more n-gram: a\n\nThis bug won't hurt SOLR-81, but it should be fixed. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12473810"
        },
        {
            "date": "2007-02-16T20:04:20+0000",
            "content": "The modified tokenizer and the extended unit test. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12473812"
        },
        {
            "date": "2007-02-16T23:10:04+0000",
            "content": "Otis: this really isn't a bug. The min/max gram code I added only applied to the EdgeNGramTokenizer.  I only want to generate edge n-grams between the range of sizes provided.\n\nFor example, with the EdgeNGramTokenizer\n input: abcde\n  minGram: 1\n  maxGram: 3 \n\n'a ab abc' is in fact what I intended to produce.\n\nI think it makes more sense for the functionality to which you referred to be located in NGramTokenizer. ",
            "author": "Adam Hiatt",
            "id": "comment-12473851"
        },
        {
            "date": "2007-02-17T08:10:45+0000",
            "content": "Damn, I think you are right!   Once again, I'm making late night mistakes.  When will I learn!?\nBut I could take my code to NGramTokenizer then, at least.\nMy bug remains, though..... got an idea for a fix?\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12473891"
        },
        {
            "date": "2007-02-21T14:23:07+0000",
            "content": "Here is the proper version.  This one is essentially the Lucene-n-gram-analyzer-specific Adam's patch from SOLR-81 + some passing unit tests I wrote to exercise the new n-gram range functionality.\n\nI'll commit this by the end of the week unless Adam spots a bug. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12474712"
        },
        {
            "date": "2007-03-01T14:23:23+0000",
            "content": "In SVN. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12476951"
        },
        {
            "date": "2007-03-01T22:49:44+0000",
            "content": "I have two comments/questions on the n-gram tokenizers:\n\n(1) Seems that only the first 1024 characters of the input are handled, and the rest is ignored (and I think as result the input stream would remain dangling open). \n\nIf you add this test case:\n\n    /**\n\n\tTest that no ngrams are lost, even for really long inputs\n\t@throws EXception\n     */\n    public void testLongerInput() throws Exception {\n      int expectedNumTokens = 1024;\n      int ngramLength = 2;\n      // prepare long string\n      StringBuffer sb = new StringBuffer();\n      while (sb.length()<expectedNumTokens+ngramLength-1) \n        sb.append('a');\n\n\n\n      StringReader longStringReader = new StringReader (sb.toString());\n      NGramTokenizer tokenizer = new NGramTokenizer(longStringReader, ngramLength, ngramLength);\n      int numTokens = 0;\n      Token token;\n      while ((token = tokenizer.next())!=null) \n{\n        numTokens++;\n        assertEquals(\"aa\",token.termText());\n      }\n      assertEquals(\"wrong number of tokens\",expectedNumTokens,numTokens);\n    }\n\nWith expectedNumTokens = 1023 it would pass, but any larger number would fail. \n\n(2) It seems safer to read the characters like this\n            int n = input.read(chars);\n            inStr = new String(chars, 0, n);\n(This way not counting on String.trim(), which does work, but worries me).\n ",
            "author": "Doron Cohen",
            "id": "comment-12477115"
        },
        {
            "date": "2007-03-02T18:13:49+0000",
            "content": "More goodies coming. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12477393"
        },
        {
            "date": "2007-03-02T18:17:16+0000",
            "content": "N-gram-producting TokenFilters for Karl's mom. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12477394"
        },
        {
            "date": "2007-03-03T04:01:42+0000",
            "content": "Hi Otis, \n\n>  (and I think as result the input stream would remain dangling open)\n\nI take this part back - closing tokenStream would close the reader, and at least for the case that I thought of, invertDocument, the tokenStream is properly closed. \n\nCan you comment on the input length: is it correct to handle only the first 1024 characters?\n\nThanks,\nDoron ",
            "author": "Doron Cohen",
            "id": "comment-12477593"
        },
        {
            "date": "2007-03-03T16:44:38+0000",
            "content": "Ah, didn't see your comments here earlier, Doron.  Yes, I think you are correct about the 1024 limit  - when I wrote that Tokenizer I was thinking TokenFilter, and thus I was thinking that that input Reader represents a Token, which was wrong.  So, I thought, \"oh, 1024 chars/token, that will be enough\".  I ended up needing TokenFilters for SOLR-81, so that's what I checked in.  Those operate on tokens and don't have the 1024 limitation.\n\nAnyhow, feel free to slap your test + the fix in and thanks for checking! ",
            "author": "Otis Gospodnetic",
            "id": "comment-12477649"
        },
        {
            "date": "2007-03-08T04:35:08+0000",
            "content": "Is it just me or are the NGramTokenFilter and EdgeNGramTokenFilter class not committed to SVN and not in the patch either?\n\nNGramTokenFilterTest and EdgeNGramTokenFilterTest are referring to them, but I can not seem to find them.\n\nThanks and keep the good work.\n\nPatrick ",
            "author": "Patrick Turcotte",
            "id": "comment-12479221"
        },
        {
            "date": "2007-03-08T18:14:11+0000",
            "content": "Otis's most recent attachment contains only tests .. but previous attachemnts had implementations.\n\nall of which have been commited under contrib/analyzers\n\n(tip: if you click \"All\" at the top of the list of comments in Jira, you see every modification related to this issue, including subversion commits that Jira detects are related to the issue based on the commit message) ",
            "author": "Hoss Man",
            "id": "comment-12479378"
        },
        {
            "date": "2007-03-08T21:43:37+0000",
            "content": "Ack! ... i'm sorry i completely missread Patrick's question.\n\nngram Tokenizers have been commited \u2013 but there are no ngram TokenFilters ... there are tests for TokenFilters Otis commited on March2, but those tests do't currently compile/run without the TokenFilter's themselves.\n\nOtis: do you have these TokenFilter's in your working directory that you perhaps forgot to svn add before committing? ",
            "author": "Hoss Man",
            "id": "comment-12479441"
        },
        {
            "date": "2007-03-13T00:31:10+0000",
            "content": "Oh, look at that!\n\n[otis@localhost contrib]$ svn st\nA      analyzers/src/java/org/apache/lucene/analysis/ngram/EdgeNGramTokenFilter.java\nA      analyzers/src/java/org/apache/lucene/analysis/ngram/NGramTokenFilter.java\n\n\nIt's in the repo now.  Sorry about that! ",
            "author": "Otis Gospodnetic",
            "id": "comment-12480236"
        },
        {
            "date": "2007-06-01T18:53:51+0000",
            "content": "Can this issue be closed or is there anything still open? ",
            "author": "Daniel Naber",
            "id": "comment-12500811"
        },
        {
            "date": "2007-07-13T13:54:03+0000",
            "content": "This should have been marked Fixed a while back. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12512486"
        }
    ]
}