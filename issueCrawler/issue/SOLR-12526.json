{
    "id": "SOLR-12526",
    "title": "Metrics History doesn't work with AuthenticationPlugin",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "Authentication",
            "metrics"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.4",
        "resolution": "Not A Bug",
        "status": "Resolved"
    },
    "description": "sSince solr 7.4.0 there is Metrics History which uses SOLRJ client to make http requests to SOLR. But it doesnt work with AuthenticationPlugin. Since its enabled by default, there are errors in log every time\u00a0MetricsHistoryHandler tries to collect data.\n\norg.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at http://172.20.0.5:8983/solr: Expected mime type application/octet-stream but got text/html. <html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\"/>\n<title>Error 401 require authentication</title>\n</head>\n<body><h2>HTTP ERROR 401</h2>\n<p>Problem accessing /solr/admin/metrics. Reason:\n<pre> \u00a0\u00a0\u00a0require authentication</pre></p>\n</body>\n</html>\n\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.client.solrj.impl.HttpSolrClient.executeMethod(HttpSolrClient.java:607) ~[solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:14]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:255) ~[solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:14]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.client.solrj.impl.HttpSolrClient.request(HttpSolrClient.java:244) ~[solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:14]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.client.solrj.SolrClient.request(SolrClient.java:1219) ~[solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:14]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.client.solrj.impl.SolrClientNodeStateProvider$ClientSnitchCtx.invoke(SolrClientNodeStateProvider.java:292) ~[solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:1\n4]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.client.solrj.impl.SolrClientNodeStateProvider.fetchMetrics(SolrClientNodeStateProvider.java:150) [solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:14]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.client.solrj.impl.SolrClientNodeStateProvider$AutoScalingSnitch.getRemoteInfo(SolrClientNodeStateProvider.java:199) [solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18\n16:55:14]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.common.cloud.rule.ImplicitSnitch.getTags(ImplicitSnitch.java:76) [solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:14]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.client.solrj.impl.SolrClientNodeStateProvider.getNodeValues(SolrClientNodeStateProvider.java:111) [solr-solrj-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:14]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.handler.admin.MetricsHistoryHandler.collectGlobalMetrics(MetricsHistoryHandler.java:495) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.handler.admin.MetricsHistoryHandler.collectMetrics(MetricsHistoryHandler.java:368) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at org.apache.solr.handler.admin.MetricsHistoryHandler.lambda$new$0(MetricsHistoryHandler.java:230) [solr-core-7.4.0.jar:7.4.0 9060ac689c270b02143f375de0348b7f626adebc - jpountz - 2018-06-18 16:55:13]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:514) [?:?]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.FutureTask.runAndReset(FutureTask.java:305) [?:?]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:305) [?:?]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1135) [?:?]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635) [?:?]\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0at java.lang.Thread.run(Thread.java:844) [?:?]",
    "attachments": {
        "ProxyAuthPlugin.java": "https://issues.apache.org/jira/secure/attachment/12937507/ProxyAuthPlugin.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-10T11:56:56+0000",
            "content": "Andrzej Bialecki have you seen this? Should not these requests use PKI auth? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16576170"
        },
        {
            "date": "2018-08-10T15:17:29+0000",
            "content": "Let's not fill in the \"fix version\" until it's actually fixed. ",
            "author": "Erick Erickson",
            "id": "comment-16576419"
        },
        {
            "date": "2018-08-11T10:05:23+0000",
            "content": "Patches are welcome - unfortunately I know very little about how these requests are authenticated - I expected that the HTTPClient instance this handler uses is already properly pre-configured to use any necessary auth - this HTTPClient comes from coreContainer.getUpdateShardHandler().getDefaultHTTPClient(). ",
            "author": "Andrzej Bialecki",
            "id": "comment-16577115"
        },
        {
            "date": "2018-08-12T17:48:43+0000",
            "content": "Michal Hlavac, I tried to reproduce locally on master branch with two nodes, basicAuth and blockUnknown=true and .system collection exists. But no errors in log from the metric history requests. Can you please share a detailed description for how to reproduce?\n\nThe scheduled threadPool uses DefaultSolrThreadFactory, which should add PKI headers by default as far as I know. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16577691"
        },
        {
            "date": "2018-08-12T17:52:14+0000",
            "content": "I thought it may be related to the issue discovered in\u00a0SOLR-12161, where PKI was used by thread pools by default when run in tests, but not when run from external clients. In this issue it could be that the opposite happens, i.e. that the threadpool has not enabled the setServerThreadFlag option required to automatically set the PKI header. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16577693"
        },
        {
            "date": "2018-08-13T09:57:56+0000",
            "content": "Jan H\u00f8ydahl, thanks for investigation, I am using custom AuthenticationPlugin, I'll try to reproduce this issue and write back. ",
            "author": "Michal Hlavac",
            "id": "comment-16578036"
        },
        {
            "date": "2018-08-13T10:51:28+0000",
            "content": "Thanks Michal Hlavac. Is your custom auth plugin handling inter-node requests as well?\n\nIt would be a benefit if you reproduce the issue using plain BasicAuth with as few steps as possible ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16578105"
        },
        {
            "date": "2018-08-28T20:09:32+0000",
            "content": "Michal Hlavac Any luck in reproducing the issue with BasicAuth plugin? If not, can you tell more about how your custom auth plugin works? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16595538"
        },
        {
            "date": "2018-08-28T20:26:36+0000",
            "content": "Jan H\u00f8ydahl, sorry, but I didn't have too much time for that. Anyway I can attach source code. Basicaly it's very simple authentication plugin.\u00a0ProxyAuthPlugin.java only checks for specific HTTP header from another HTTP server (e.g. Apache httpd) and trust them.\n\nWhat is specific about this plugin is, that I need to know username also on every node of cluster, also when asking for response from specific shard. That's because I use document level authorization.\n\nIt's possible that I'm doing something wrong. Thanks ",
            "author": "Michal Hlavac",
            "id": "comment-16595555"
        },
        {
            "date": "2018-08-28T21:05:55+0000",
            "content": "Truth is that I didn't realize that it might work with standard authentication plugins. I am ok with disabled metrics history, so at the end it doesn't looks like bug. ",
            "author": "Michal Hlavac",
            "id": "comment-16595601"
        },
        {
            "date": "2018-08-28T23:07:46+0000",
            "content": "Ok, the reason seems to be that your auth plugin implements HttpClientBuilderPlugin, and that effectively disables PKIAuthenticationPlugin, see GitHub link. So in your HttpHeaderClientInterceptor#process you can\u00a0delegate to PKI plugin if it is an internal request, using e.g.:\n\ncoreContainer.getPkiAuthenticationPlugin().setHeader(request);\n\n\nI'll close this as not a bug. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16595706"
        },
        {
            "date": "2018-08-28T23:08:41+0000",
            "content": "Closing, as it is due to a bug in custom auth plugin ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16595707"
        },
        {
            "date": "2018-08-29T06:52:14+0000",
            "content": "Thanks Jan H\u00f8ydahl for investigating this! ",
            "author": "Andrzej Bialecki",
            "id": "comment-16596002"
        },
        {
            "date": "2018-08-29T07:49:46+0000",
            "content": "I have not tested the custom plugin but see from the code that it wants to handle inter node requests, so then it is responsible for doing so in all cases. Michal, if you believe or later find out that there are issues in Solr as well, feel free to re-open. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16596052"
        },
        {
            "date": "2018-08-29T13:12:04+0000",
            "content": "Thanks Jan H\u00f8ydahl for help and suggestions. ",
            "author": "Michal Hlavac",
            "id": "comment-16596302"
        },
        {
            "date": "2018-09-13T11:24:10+0000",
            "content": "Jan H\u00f8ydahl problem is, that method PKIAuthenticationPlugin#setHeader(HttpRequest) has package-private modifier so it's not accesible from other packages. thanks, m. ",
            "author": "Michal Hlavac",
            "id": "comment-16613336"
        },
        {
            "date": "2018-09-13T12:20:40+0000",
            "content": "Try to place your plugin in the same package org.apache.solr.security and it should work. I'm planning to make that method public in some other issue I'm working on, or change the logic so that you instead can override a method in your AuthPlugin if you want to handle inter-node requests, otherwise PKI will handle it by default. The last way would be a more clean impl. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16613404"
        }
    ]
}