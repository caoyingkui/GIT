{
    "id": "SOLR-424",
    "title": "The ruby output type produces incorrect output for numeric types without a value",
    "details": {
        "affect_versions": "1.1.0,                                            1.2,                                            1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "clients - ruby - flare"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "When parsing the Ruby output returned from Solr, if a numerical value has no value in the index, it causes an invalid Ruby hash to be returned.  For instance:\n\n\n \n 'response'=>{'numFound'=>1,'start'=>0,'maxScore'=>4.951244,'docs'=>[\n\t{\n\t 'subclass_t'=>'Protocol',\n\t 'pk_i'=>1,\n\t 'id'=>'Protocol:1',\n\t 'name_t'=>'Falcipain IC50',\n\t 'group_id_i'=>,\n\t 'score'=>4.951244}]\n }}\n\n\n\nis not a valid hash because 'group_id_i' does not resolve to anything.  It should resolve to nil:\n\n\n \n 'response'=>{'numFound'=>1,'start'=>0,'maxScore'=>4.951244,'docs'=>[\n\t{\n\t 'subclass_t'=>'Protocol',\n\t 'pk_i'=>1,\n\t 'id'=>'Protocol:1',\n\t 'name_t'=>'Falcipain IC50',\n\t 'group_id_i'=>nil,\n\t 'score'=>4.951244}]\n }}",
    "attachments": {
        "SOLR-424.patch": "https://issues.apache.org/jira/secure/attachment/12384238/SOLR-424.patch",
        "TextResponseWriter-424.java.patch": "https://issues.apache.org/jira/secure/attachment/12383994/TextResponseWriter-424.java.patch",
        "fix_ruby_output.patch": "https://issues.apache.org/jira/secure/attachment/12370494/fix_ruby_output.patch",
        "TextResponseWriter-SOLR-424.patch": "https://issues.apache.org/jira/secure/attachment/12374715/TextResponseWriter-SOLR-424.patch",
        "zero_length_int.patch": "https://issues.apache.org/jira/secure/attachment/12370495/zero_length_int.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Kurt Schrader",
            "id": "comment-12546536",
            "date": "2007-11-29T02:28:14+0000",
            "content": "Here is a patch for the issue.  The code seems to be untested, along with all of the other output types, so I couldn't find a test case to modify to cover this issue. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12546539",
            "date": "2007-11-29T02:35:45+0000",
            "content": "I believe the underlying issue is that there isn't validation during indexing.\nAn empty string is not a valid number... if you wish to leave the number out of that document, then leave it entirely out.\n\nFor a legacy lucene index, I think a zero length integer field should map to 0, not null (which is not an integer). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12546541",
            "date": "2007-11-29T02:41:49+0000",
            "content": "Attaching patch for the output side of things. "
        },
        {
            "author": "Kurt Schrader",
            "id": "comment-12546905",
            "date": "2007-11-29T21:33:34+0000",
            "content": "The problem with making it zero is that it can cause problems if zero is a valid value.  You don't want to run a search for records with a value of zero there and have all of the records with no value turn up as well. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12546910",
            "date": "2007-11-29T21:37:43+0000",
            "content": "If the field has no value, it should not be added to the index.\nThink about a field of type \"string\"... a zero length string is a valid value and should not be confused for an absent value. "
        },
        {
            "author": "Kurt Schrader",
            "id": "comment-12546923",
            "date": "2007-11-29T22:26:53+0000",
            "content": "I understand that, but the issue here is how to deal with indexes that have a field with no value in legacy indexes.\nTo me it seems more logical to return nil to indicate to the user that their field is invalid. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12549681",
            "date": "2007-12-08T10:48:35+0000",
            "content": "I agree with Kurt - nil makes more sense than zero in this case. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12549786",
            "date": "2007-12-09T02:10:07+0000",
            "content": "But we don't allow nil as an integer value when indexing (except by accident), so how can it be a valid value coming back out?  The way to represent \"no value\" in lucene is to leave the value out. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12558069",
            "date": "2008-01-11T19:07:04+0000",
            "content": "For what it's worth, I've had 2 additional people say that returning the correct Ruby output would be better... "
        },
        {
            "author": "Yousef Ourabi",
            "id": "comment-12565561",
            "date": "2008-02-04T21:59:54+0000",
            "content": "Since all response writers implement the TextResponseWriter abstract class it seems like it might make more sense to tweak writeVal (line 115)\n\nfrom:  if (val==null)\nto:     if (val==null || val.toString().length() == 0 || \"\".equals(val.toString())) {\n\nAs Yonik has pointed out \u2013 this is just part of the problem, the other being how did it get to be empty in the first place. Perhaps breaking this up into two separate issues makes more sense?\n\nAttaching (trivial) patch to TextResponseWriter.\n\nFeedback please.\n\nThanks,\nYousef "
        },
        {
            "author": "Yousef Ourabi",
            "id": "comment-12565562",
            "date": "2008-02-04T22:00:29+0000",
            "content": "Tweak line 115 of TextResponseWriter.writeVal() to test not only for null but zero-length strings? "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12602842",
            "date": "2008-06-05T23:11:13+0000",
            "content": "Eric or Yonik, do you want to mentor this for 1.3? "
        },
        {
            "author": "Yousef Ourabi",
            "id": "comment-12604980",
            "date": "2008-06-13T21:40:28+0000",
            "content": "Slightly more correct version. Can someone please comment on the appropriateness of this patch, and what the wishes and desires are to close this bug. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12604988",
            "date": "2008-06-13T22:01:10+0000",
            "content": "The latest patch would have a non-negligible performance impact (since it calls toString() and trim() on every object)\nand incorrect output (since it would effectively disable zero length strings for any type, including strings). "
        },
        {
            "author": "Yousef Ourabi",
            "id": "comment-12604992",
            "date": "2008-06-13T22:18:18+0000",
            "content": "The other place I was thinking would be the WriteInt implementation in JsonResponseWriter \u2013 do the check there.  Would that make more sense to you?  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12606102",
            "date": "2008-06-18T21:43:44+0000",
            "content": "attaching patch that uses a \"null\" value for legacy int/long lucene fields only when a zero length string is encountered as the field value. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12606572",
            "date": "2008-06-19T21:51:20+0000",
            "content": "committed. "
        }
    ]
}