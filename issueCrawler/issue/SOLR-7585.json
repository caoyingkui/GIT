{
    "id": "SOLR-7585",
    "title": "ConcurrentLFUCache throws NoSuchElementException under a write-heavy load",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "affect_versions": "5.1",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "Under a write-heavy load ConcurrentLFUCache throws NoSuchElementException. The problem lies within org.apache.solr.util.ConcurrentLFUCache#put method, which allows for a race condition between the check and the call to markAndSweep method. Despite that a thread must acquire a lock to perform sweeping, it's still possible that multiple threads successfully detected a need for calling markAndSweep. If they execute it sequentially, subsequent runs will fail with NoSuchElementException.",
    "attachments": {
        "SOLR-7585.patch": "https://issues.apache.org/jira/secure/attachment/12734804/SOLR-7585.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-05-22T11:41:24+0000",
            "author": "Maciej Zasada",
            "content": "Attached a patch containing a test case + a fix that mitigates the race condition. Cheers! ",
            "id": "comment-14556013"
        },
        {
            "date": "2015-05-22T19:44:39+0000",
            "author": "Shawn Heisey",
            "content": "The LFU cache implementation is my code, but I didn't write it from scratch.  I started with the existing LRU code.  Now that I look at ConcurrentLRUCache, the markAndSweep method there seems to be quite a bit different, and I can't remember what I actually did or whether the differences came afterwards.\n\nI tried adding just the test so I could see if the test fails without the patch.  I did so on branch_5x, which is how I discovered that the test uses a lambda expression \u2013 it won't compile on branch_5x because the build is targeted for a 1.7 compile version, and lamba expressions require 1.8.  Since I haven't yet wrestled with lambda expressions, I have no idea what they actually do.  Can you rewrite the test so it's compatible with Java 7? ",
            "id": "comment-14556707"
        },
        {
            "date": "2015-05-23T13:33:50+0000",
            "author": "Maciej Zasada",
            "content": "Of course, latest patch contains same test compatible with Java 7. My bad, I tested against trunk (which is now on Java 8) instead of a 5.x branch. Cheers! ",
            "id": "comment-14557338"
        },
        {
            "date": "2015-05-23T16:32:22+0000",
            "author": "Shawn Heisey",
            "content": "Alternate patch that checks the size of the TreeSet when deciding whether to simple add() or do a more complicated check involving remove/add.\n\nThis feels like it fixes the underlying problem, rather than exiting the code early.\n\nThe patch also gets rid of a bunch of warnings about parameterization of objects, and one warning about an unused variable.  I chose to suppress the warning instead of removing the variable, because it's a variable that might find a use later. ",
            "id": "comment-14557422"
        },
        {
            "date": "2015-05-23T19:59:26+0000",
            "author": "Maciej Zasada",
            "content": "Personally I like exiting the code early. If I understand correctly, new implementation will always evict at least one entry, which means cache size may drop below lowerWaterMark (which somehow brakes a contract). To fix underlying problem we should get rid of a race condition at all, but I haven't measure the performance impact of such change. Moreover, first approach has 2 additional benefits:\n\n\tnot producing additional garbage\n\tnot executing unnecessary code (if cache size is below upperWaterMark, there's no need to evict anything)\n\n\n\nboth seem to be important for a cache. WDYT? ",
            "id": "comment-14557504"
        },
        {
            "date": "2015-05-23T20:14:58+0000",
            "author": "Shawn Heisey",
            "content": "both seem to be important for a cache. WDYT?\n\nThe benefits you noted certainly do sound like good things, but it looks like markAndSweep was designed to reduce the cache size to lowerWaterMark.  Is it acceptable to avoid eviction if the current cache size is somewhere between the two watermarks?  Will anything strange happen in a situation where a cache is defined with settings where any of the sizes/watermarks are not different numbers?\n\nFYI, the entire LFUCache implementation is due for replacement, because it's a very slow and naive implementation, and I figured out a better way to do it.  See SOLR-3393. ",
            "id": "comment-14557511"
        },
        {
            "date": "2015-05-23T20:36:49+0000",
            "author": "Maciej Zasada",
            "content": "Yes, I saw SOLR-3393 before, but I assumed it will take a while to deprecate and remove the old class, and we're currently experiencing some exceptions because of this race condition  Having in mind that you're working on more performant LFU cache, I tried to make changes as small and noninvasive as possible.\n\nit looks like markAndSweep was designed to reduce the cache size to lowerWaterMark.\n\nExactly. I believe that your change will actually reduce (sometimes) the cache size to be equal to lowerWaterMark -1, instead of equal to lowerWaterMark.\n\nIs it acceptable to avoid eviction if the current cache size is somewhere between the two watermarks?\n\nEviction will be only avoided if the size was less than or equal to upperWaterMark, which is exactly the same condition as in org.apache.solr.util.ConcurrentLFUCache#put method (L#139), where it's decided whether to call markAndSweep at all or not. Essentially, the same condition is checked after acquiring a lock to mitigate a race condition. ",
            "id": "comment-14557517"
        },
        {
            "date": "2015-05-23T21:48:03+0000",
            "author": "Shawn Heisey",
            "content": "Now both checks are present.  The method will abort if the cache is already below upperWaterMark, and the code further down will avoid executing the TreeSet#first() method when the set is empty, which is where the NoSuchElementException is actually thrown.\n\nI hope the comments are clear and correct. ",
            "id": "comment-14557540"
        },
        {
            "date": "2015-05-23T22:18:04+0000",
            "author": "Maciej Zasada",
            "content": "Looks good to me, +1. Cheers! ",
            "id": "comment-14557555"
        },
        {
            "date": "2015-05-23T23:10:45+0000",
            "author": "Shawn Heisey",
            "content": "The test fails precommit.\n\n[forbidden-apis] Forbidden method invocation: java.util.concurrent.Executors#newFixedThreadPool(int) [Spawns threads with vague names; use a custom thread factory (Lucene's NamedThreadFactory, Solr's DefaultSolrThreadFactory) and name threads so that you can tell (by its name) which executor it is associated with]\n[forbidden-apis]   in org.apache.solr.search.TestLFUCache (TestLFUCache.java:371)\n\nI'm looking at existing uses of DefaultSolrThreadFactory trying to figure out how to adapt it to this test code, but it's not making sense to me. ",
            "id": "comment-14557567"
        },
        {
            "date": "2015-05-23T23:26:44+0000",
            "author": "Shawn Heisey",
            "content": "I think i figured it out.  If precommit passes now, I'll have a new patch momentarily. ",
            "id": "comment-14557572"
        },
        {
            "date": "2015-05-23T23:47:35+0000",
            "author": "Shawn Heisey",
            "content": "Apparently 6 threads is not enough to trigger the bug.  When I ran the test (without the fix) on a system with three cores, the test passed.  When I hard-coded the number of threads in the test to 8, then the test failed as expected.\n\nMaciej Zasada, should we hard-code the number of threads in the test to a number like 8 or 10? ",
            "id": "comment-14557576"
        },
        {
            "date": "2015-05-24T00:07:16+0000",
            "author": "Shawn Heisey",
            "content": "New patch against trunk.  Used DefaultSolrThreadFactory to fix the precommit.  Also hard-coded the number of threads in the new test to 10 so that the unpatched ConcurrentLFUCache implementation fails the test even on systems with less than four CPUs.\n\nThe CHANGES.txt assumes that the fix is going into version 5.2.  I've asked the release manager for 5.2 whether this fix is OK to backport. ",
            "id": "comment-14557580"
        },
        {
            "date": "2015-05-24T09:16:24+0000",
            "author": "Maciej Zasada",
            "content": "+1 for a fixed thread count and DefaultSolrThreadFactory. Cheers! ",
            "id": "comment-14557684"
        },
        {
            "date": "2015-05-24T13:20:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1681449 from Shawn Heisey in branch 'dev/trunk'\n[ https://svn.apache.org/r1681449 ]\n\nSOLR-7585: Fix NoSuchElementException in LFUCache ",
            "id": "comment-14557734"
        },
        {
            "date": "2015-05-24T13:40:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1681453 from Shawn Heisey in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1681453 ]\n\nSOLR-7585: Fix NoSuchElementException in LFUCache (merge trunk r1681449) ",
            "id": "comment-14557739"
        },
        {
            "date": "2015-05-24T13:56:32+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1681456 from Shawn Heisey in branch 'dev/branches/lucene_solr_5_2'\n[ https://svn.apache.org/r1681456 ]\n\nSOLR-7585: Fix NoSuchElementException in LFUCache (merge trunk r1681449) ",
            "id": "comment-14557743"
        },
        {
            "date": "2015-05-24T14:26:33+0000",
            "author": "Shawn Heisey",
            "content": "Committed to trunk, branch_5x, and lucene_solr_5_2.  Precommit passed for each.  Also made sure that the new test failed without the fix and passed with the fix.  Thanks for figuring this out, Maciej Zasada! ",
            "id": "comment-14557747"
        },
        {
            "date": "2015-06-15T21:43:57+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close for 5.2.0. ",
            "id": "comment-14586884"
        }
    ]
}