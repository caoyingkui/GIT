{
    "id": "SOLR-8767",
    "title": "RealTimeGetComponent and stored/copyField exclusion",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Critical"
    },
    "description": "Consider this scenario: schema has fields `a` and `b` defined, both stored.  A copyField is defined from `a` => `b`.  A document is indexed with `id=1; b=\"foo\"`.  A real-time /get will not return field `b` because RealTimeGetComponent.toSolrDoc currently excludes copyField destinations (despite, in this situation, the source of that copyField not being sent in).\n\nGranted this is a bit of a diabolical case (discovered while tinkering with cloud MLT tests), but isn't that far fetched to happen in the wild.\n\nMaybe real-time /get should return all fields set as stored, regardless of copyField status?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-03T00:59:47+0000",
            "author": "Simon Rosenthal",
            "content": "+1 on changing the behavior. Was just bitten by this real-time get behavior in a situation where I was using a copyfield to effectively rename a -->b (a was then defined as non-indexed, non-stored).\u00a0\n\nNot the intended use of copyfield, I know, and I could probably use a FieldNameMutatingUpdateProcessor instead (though this results in including field name manipulations in solrconfig.xml, where it really doesn't belong, rather than in the schema). ",
            "id": "comment-16461800"
        }
    ]
}