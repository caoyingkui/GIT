{
    "id": "SOLR-807",
    "title": "UUIDField type cannot be recognized when wt=javabin is used",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I'm using UUID via Solrj in my project. When I use javabin (default), I got:\n\njava.util.UUID: 391e3214-4f8e-4abd-aa6b-4f12be79534f\n\nas the uuid value. But if I use xml, I got:\n\n391e3214-4f8e-4abd-aa6b-4f12be79534f\n\nI think the both of them should return same string.\n\nprogram for reproducing the problem:\n\n  public static void main(String[] args) throws Exception {\n    CommonsHttpSolrServer server = new CommonsHttpSolrServer( \"http://localhost:8983/solr\" );\n    SolrQuery query = new SolrQuery().setQuery( \"*:*\" );\n    //server.setParser( new XMLResponseParser() );   // uncomment for wt=xml\n    System.out.println( \"===== \" + server.getParser().getClass().getSimpleName() + \" =====\" );\n    QueryResponse rsp = server.query( query );\n    SolrDocumentList docs = rsp.getResults();\n    for( SolrDocument doc : docs ){\n      Object id = doc.getFieldValue( \"id\" );\n      System.out.println( \"type = \" + id.getClass().getName() + \", id = \" + id );\n      Object timestamp = doc.getFieldValue( \"timestamp\" );\n      System.out.println( \"type = \" + timestamp.getClass().getName() + \", timestamp = \" + timestamp );\n    }\n  }\n\n\n\nresult for wt=javabin\njavabin\n===== BinaryResponseParser =====\ntype = java.lang.String, id = java.util.UUID:391e3214-4f8e-4abd-aa6b-4f12be79534f\ntype = java.util.Date, timestamp = Wed Oct 15 00:20:50 JST 2008\n\n\n\nresult for wt=xml\nxml\n===== XMLResponseParser =====\ntype = java.lang.String, id = 391e3214-4f8e-4abd-aa6b-4f12be79534f\ntype = java.util.Date, timestamp = Wed Oct 15 00:20:50 JST 2008",
    "attachments": {
        "SOLR-807.patch": "https://issues.apache.org/jira/secure/attachment/12392341/SOLR-807.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12639716",
            "date": "2008-10-15T04:27:16+0000",
            "content": "is java.util.UUID a supported type in Lucene? \n\nThen let us follow what XML format is doing.  "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12639722",
            "date": "2008-10-15T04:50:13+0000",
            "content": "is java.util.UUID a supported type in Lucene?\n\nNo. Date is also NOT a supported type in Lucene, but it seems that Date is recognized in BinaryResponseWriter... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12639732",
            "date": "2008-10-15T05:59:00+0000",
            "content": "I guess there is a org.apache.solr.schema.DateField  which produces java.util.Date type. \n\nAll other types are written down as\n\nval.getClass().getName() + ':' + val.toString()\n\n\n\nNow I realize that there is a org.apache.solr.schema.UUIDField also \n\nShould we make an Exception for UUID or just change the code to omit the val.getClass().getName()\n\nI guess that is better.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12639930",
            "date": "2008-10-15T18:49:56+0000",
            "content": "Change which code?\n\nboth BinaryResponseWriter+NamedListCodec and the XMLWriter classes use \"val.getClass().getName() + ':' + val.toString()\" to outbut objects on on the list of legal things that can be in a SolrQueryResponse...\n\n   http://lucene.apache.org/solr/api/org/apache/solr/request/SolrQueryResponse.html\n\n\nI'm not very familiar with the way either SolrJ or the BinaryResponseWriter/NamedListCodec stuff works, but I don't think this is relaly about how either ResponseWriter deals with \"objects\" added directly to the response ... it seems to relate specifically to how BinaryResponseWriter deals with writing field values of Documents ... the text/xml based writers use FieldType.write(...) and let the FieldType decide how to best render itself, while the NameListCodec seems to make it's own decisions based on FieldType.toObject (although i'm not sure where toObject is getting called \u2013 but that's the only reason i can think of why you would encounter a java.util.UUID object directly in a SolrDocument)\n\nThis doesn't seem like a SolrJ in so much as a larger issue with the way the NamedListCodec works ... if it's not going to delegate to the FieldType to decide how to \"write\" a non standard object, then shouldn't it at least recognize and automatically extract that class type prefix info when it \"reads\" a non standard object? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12640057",
            "date": "2008-10-16T04:25:00+0000",
            "content": "Change which code? \nNamedListCodec\n\n\nwhile the NameListCodec seems to make it's own decisions based on FieldType.toObject..\nyou are right. NamedListCodec needs to handle Objects differently because , that is the only way it can write out values efficiently. There are two ways to address the issue.\n\n\n\tMake UUID a known type . I mean add a new type to NamedListCodec. This means bumping up the version of javabin format say version=2. I guess we should not make this change unless we wish to make some more important changes.\n\tWrite down UUID as a String and treat it like String (of course w/o the classname). XMLWriter is anyway doing this . This change will be backward compatible and we may not need to bump up the version.\n\n\n\n\n\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12640491",
            "date": "2008-10-17T10:51:09+0000",
            "content": "write UUID as a String "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12640700",
            "date": "2008-10-17T23:26:45+0000",
            "content": "\nMake UUID a known type . I mean add a new type to NamedListCodec. This means bumping up the version of javabin format say version=2. I guess we should not make this change unless we wish to make some more important changes.\n\nbut the crux of the issue isn't specific to UUIDField ... any custom FieldType people might have is going to encounter this same problem.\n\nIf a RequestHandler adds an arbitrary object (not on the legal list) directly to the response, then the ResponseWriter is certainly at liberty to output that however it makes sense \u2013 for both XmlResponseWriter and BinaryResponseWriter that's going to result in a java.util.UUID object, or a chrish.custom.MyBean object, named 'val' being translated into a string via...\n\n\nval.getClass().getName() + ':' + val.toString()\n\n\n...that's fine.  But the problem seems to be specifically related to how the BinaryResponseWriter deals with writing out field values of Documents \u2013 the FieldType should be used to decide how to render field values.  \n\nIf we want to have optimized code in the NamedListCodec for efficiently dealing with the really commons types that's great, but that fallback case, for dealing with FieldTypes we haven't optimized \u2013 that needs to result in the client getting some object which isn't just val.getClass().getName() + ':' + val.toString() ... at a minimum it should be val.toString() , but ideally the FieldType should be able to control of how clients ultimately get the value of that field.  (They don't necessarily need to be able to control how it should go over the wire, but they should be able to control what the end result is)\n\nLet's fix the problem (BinaryResponseWriter and field values of arbitrary FieldTypes) and not the symptom (UUIDFIeld)\n\nHow exactly we do this ... i'm not sure.  Based on my limited understanding of the existing code my rough suggestions...\n\n\n\tNamedListCodec could have pass a special TextResponseWriter subclass to the FieldType's write(TextResponseWriter,...) method, and that TextResponseWriter could take the same special action NamedListCodec currently takes to efficiently serialize all of the datatypes in the varies write*(..) methods\n\tNamedListCodec maintains it's current list of efficient encodings for common types, but uses FieldType.toExternal() to generate a String to send over the wire (instead of using toObject) in non-common cases.\n\twe add a new \"toSimpleObject(Fieldable)\" method to FieldType, which would be documented to say that it must return an object of the \"legal\" types for a response ... the default implementation would call toObject(Fieldable), test the result with a few instanceOf checks and return val.toString() if it doesn't pass any of them. and start using this method instead of toObject(Fieldable) when dealing with DocLists.\n\n\n\nthoughts?\n\n\n\n\n\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12640748",
            "date": "2008-10-18T05:14:56+0000",
            "content": "NamedListCodec could have pass a special TextResponseWriter...\nNot a godd idea. On the client side it may not know how to deserialize it. Moreover , Binary format is very fragile and it can break the output because each bit is significant. Every byte that is written out must use NamedListCodec.\nNamedListCodec maintains it's current list of efficient encodings for common types, but uses FieldType.toExternal() to generate a String to send over the wire (instead of using toObject) in non-common cases.\nmake sense. \n\nwe add a new \"toSimpleObject(Fieldable)\" method to FieldType,\nProblem is not with writing out. How to deserialize it at the other end of the pipe. \n\nString representation is the most convenient form for everyone. Even with xml we write out everything as a String <str></str>, just that the the content format of the string type is decided by the FieldType. If toString() is implemented properly by the Object it should be fine.\n\nWe may not be able to support all the user defined types. But , we must be able to support all the types which we know of. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12640775",
            "date": "2008-10-18T15:01:22+0000",
            "content": "while writing out  a DocList resolve any unknown Object to String "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12648535",
            "date": "2008-11-18T09:08:41+0000",
            "content": "\n\tAdded a set of FieldTypes supported by NamedListCodec (the ones that we know how to read).\n\tBinaryResponseWriter writes fieldType.toExternal if it is not a supported type, otherwise it writes fieldType.toObject\n\n\n\nNote \u2013 UUID is not a supported type so it is written as toExternal.\n\nNeed to add a test for this. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12655139",
            "date": "2008-12-10T08:32:06+0000",
            "content": "Updated with a test to verify the encoding/decoding of UUID with the changes to BinaryResponseWriter. All tests pass.\n\nWith this change, we make a lookup on a HashSet for each field to be written out. Someone who knows more about the javabin format should take a look. Yonik or Noble? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12655523",
            "date": "2008-12-11T05:42:20+0000",
            "content": "This does not impact the 'javabin'  format in any way. Just that the objects passed to the NamedListCodec will be different if they are not 'supported'\n\nThere is a small overhead of a HashSet lookup for each object . (which is trivial I guess)  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12656418",
            "date": "2008-12-14T17:38:50+0000",
            "content": "Committed revision 726502.\n\nThanks Koji and Noble! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775550",
            "date": "2009-11-10T15:51:48+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}