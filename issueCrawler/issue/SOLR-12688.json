{
    "id": "SOLR-12688",
    "title": "LTR Multiple performance fixes + pure DocValues support for FieldValueFeature",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "contrib - LTR"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "This ticket is related to 2 performance and 1 functional/performance issue that I had found during integrating LTR in our e-commerce search engine :\u00a0\n\n\tFieldValueFeature doesn't support pure DocValues fields (Stored false). Please also note that for fields which are both stored and DocValues it is working not optimal because it is extracting just one field from the stored document. DocValues are obviously faster for such usecases. Below are screenshots of JFR profiles without and with new support of DocValues for the\u00a0case when it can be read from DocValues.\u00a0\n  \n \n\tSolrFeature was not optimally implemented for the\u00a0case when no\u00a0fq\u00a0parameter was passed. I'm not absolutely sure what was the\u00a0intention to introduce both q(which is supposed to be a function query) and fq\u00a0parameter for the same SolrFeature at all(Is there a case when they will be used together ? ), so I decided not to change behavior but just optimize described case   \n\tLTRScoringModel was a\u00a0mutable\u00a0object. It was leading to the calculation of hashcode on each query, which in turn can consume a lot of time in cases when a model is big(In our case we were using LambdaMART with 100 trees and leaves which was consuming 3MB of the disk space). So I decided to make\u00a0LTRScoringModel immutable and cache hashCode calculation. Below are the\u00a0screenshots before and after.\u00a0  \n\n\n\nIn our case, we had a feature.json file with 8 FieldValueFeatures, 5 SolrFeatures and 1 OriginalScoreFeature. \nBefore introducing the optimizations performance overhead for LTR reranking of top 48 documents was 300ms. With all the optimizations in it was decreased to 35ms.\n\nPlease also note that JFR screenshots were captured on Solr 6.6 codebase. All the numbers are also taken from Solr version 6.6. \nI hope that changes of the DocValues interface(method get() was removed and advanceExact was added) won't affect it (At least for DenseNumericDocValues it will work as expected.)",
    "attachments": {
        "LTRSolrFeatureBefore.png": "https://issues.apache.org/jira/secure/attachment/12936483/LTRSolrFeatureBefore.png",
        "LTRScoringModelHashCodeCaching.patch": "https://issues.apache.org/jira/secure/attachment/12936529/LTRScoringModelHashCodeCaching.patch",
        "LTRModelHashCodeBefore.png": "https://issues.apache.org/jira/secure/attachment/12936459/LTRModelHashCodeBefore.png",
        "MultiplePerformanceFixes.patch": "https://issues.apache.org/jira/secure/attachment/12936487/MultiplePerformanceFixes.patch",
        "NoFQSolrFeatureOptimisation.patch": "https://issues.apache.org/jira/secure/attachment/12936530/NoFQSolrFeatureOptimisation.patch",
        "LTRwithDVOptimisation.png": "https://issues.apache.org/jira/secure/attachment/12936480/LTRwithDVOptimisation.png",
        "LTRModelHashCodeAfter.png": "https://issues.apache.org/jira/secure/attachment/12936458/LTRModelHashCodeAfter.png",
        "LTRwithoutDVOptimisation.png": "https://issues.apache.org/jira/secure/attachment/12936481/LTRwithoutDVOptimisation.png",
        "DocValuesSupportForFieldValueFeature.patch": "https://issues.apache.org/jira/secure/attachment/12936532/DocValuesSupportForFieldValueFeature.patch",
        "LTRSolrFeatureAfter.png": "https://issues.apache.org/jira/secure/attachment/12936482/LTRSolrFeatureAfter.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-21T16:35:28+0000",
            "content": "Christine Poerschke Can you please take a look at this changes?  ",
            "author": "Stanislav Livotov",
            "id": "comment-16587695"
        },
        {
            "date": "2018-08-21T21:53:19+0000",
            "content": "And excuse me in advance for creating one Jira for 3 potential problems. Probably it is better to create 3 separate Jira tickets? Anyway I had uploaded 3 separate patches for this problems:  DocValuesSupportForFieldValueFeature.patch  LTRScoringModelHashCodeCaching.patch  NoFQSolrFeatureOptimisation.patch  ",
            "author": "Stanislav Livotov",
            "id": "comment-16588052"
        },
        {
            "date": "2018-08-24T16:45:05+0000",
            "content": "Thanks Stanislav Livotov for opening this ticket with analysis results and patches!\n\nI'll aim to take a proper look at the changes towards the middle or end of next week hopefully.\n\nAnd excuse me in advance for creating one Jira for 3 potential problems. Probably it is better to create 3 separate Jira tickets? Anyway I had uploaded 3 separate patches ...\n\nNo worries. May I suggest using JIRA's sub-task feature here? So this SOLR-12688 here would remain as the parent ticket with the overall context and analysis results and we'd have 3 sub-tasks for the 3 different changes.\n\nI've gone and created the sub-tasks, would that approach work for you? And if the future patch attachments to those sub-tasks match the SOLR-NNNNN.patch naming pattern then automatic patch validation can also be used \u2013 https://wiki.apache.org/solr/HowToContribute#Contributing_your_work has more info on how that works. ",
            "author": "Christine Poerschke",
            "id": "comment-16591893"
        },
        {
            "date": "2018-08-24T21:43:42+0000",
            "content": "Please also note that for fields which are both stored and DocValues it is working not optimal because it is extracting just one field from the stored document\nChristine Poerschke I don't know whether the recent work on SOLR-12625 could be useful for resolving this part of the Jira or not, but SolrDocumentFetcher now tries to \"do the right thing\" in the case of mixtures of stored/docValues fields.\n\nIf it's useful, have no clue whether\u00a0you want to use SolrDocumentFetcher directly or the ideas from it or extract some/all of the meat of the RetrieveFieldsOptimizer into some utility class, up to you.\n\nIt's one of those \"steady improvement\" things. David Smiley originally make SolrDocumentFetcher sincve it was such a pain to extract values, Dat created the RetrieveFieldsOptimizer, I came along and thought \"gee, shouldn't those two things be together?\" and if you can do further refinement, by all means do \n\nDo note that the code does not extract multiValued fields from docValues as that's lossy... ",
            "author": "Erick Erickson",
            "id": "comment-16592210"
        },
        {
            "date": "2018-08-30T18:12:47+0000",
            "content": "Thanks\u00a0Christine Poerschke for replying!\u00a0\n\nI've attached patches with correct namings in sub-tasks that you have created. However, as I understand I can not enable automated validation cause I'm not a committer and consequently I can not assign tickets on me and switch\u00a0status to \"Patch Available\". Or I'm missing something ?\u00a0 ",
            "author": "Stanislav Livotov",
            "id": "comment-16597740"
        }
    ]
}