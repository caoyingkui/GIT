{
    "id": "SOLR-2348",
    "title": "No error reported when using a FieldCached backed ValueSource for a field Solr knows won't work",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "For the same reasons outlined in SOLR-2339, Solr FieldTypes that return FieldCached backed ValueSources should explicitly check for situations where knows the FieldCache is meaningless.",
    "attachments": {
        "SOLR-2348.patch": "https://issues.apache.org/jira/secure/attachment/12471098/SOLR-2348.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12991771",
            "date": "2011-02-08T02:23:27+0000",
            "content": "My hope had been that this would be really straightforward, and a simple inspection of the SchemaField (or FieldType) could be done inside the FieldCacheSource to cover all cases \u2013 except that FieldCacheSource (and it's subclasses) is only ever given a field name, and never gets a copy of the FieldType, SchemaField of even the IndexSchema to inspect to ensure that using the FieldCache is viable.\n\nThis means that we have to take the same basic approach as SOLR-2339 - every FieldType impl that utilizes a FieldCacheSource in it's getValueSource method needs to check if FieldCache is viable for that field (ie: indexed, not multivalued)\n\nWe could rename the checkSortability method I just added in SOLR-2339 into a \"checkFieldCachibility\" type method and use it for both purposes, but:\n\n\tit currently throws exceptions with specific messages like \"can not sort on unindexed field: \"\n\tI seem to recall some folks talking about the idea of expanding FieldCache to support more things like UninvertedField does, in which case being multivalued won't prevent you from using the FieldCache on a field which would ultimately mean the pre-conditions for using a FieldCacheSource would change.  We could imagine the user specifing a function that takes in vector args to use to collapse the multiple values per doc on a per usage basis (ie: in this function query case, use the max value of the multiple values for each doc; in this function query, use the average value of the multiple values for each doc; etc...)\n\n\n\nwith that in mind, i think for now the most straight forward thing to do is to add a \"checkFieldCacheSource(QParser)\" method to SchemaField that would be cut/paste of checkSortability (with the error message wording changed) and make all of the (applicable) FieldType.getValueSource methods call it.  In the future, it could evolve differently then checkSortability \u2013 either removing the \"!multivalued\" assertion completley, or introspecting the Qparser context in some way to determine that neccessary info has been provided to know how to use the (hypothetical) multivalued FieldCache (hard t ospeculate at this point)\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12994065",
            "date": "2011-02-13T10:35:30+0000",
            "content": "There isn't any patch here yet, can we move out to 3.2? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12994777",
            "date": "2011-02-15T12:59:12+0000",
            "content": "moving to 3.2 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12994943",
            "date": "2011-02-15T19:27:45+0000",
            "content": "patch with needed functionality, breaks some tests (most likely tests abusing multiValued field types)...\n\n\nhossman@bester:~/lucene/dev/solr$ grep -L \"Failures: 0, Errors: 0\" build/test-results/TEST-org.apache.solr.*\nbuild/test-results/TEST-org.apache.solr.schema.PolyFieldTest.txt\nbuild/test-results/TEST-org.apache.solr.search.function.distance.DistanceFunctionTest.txt\nbuild/test-results/TEST-org.apache.solr.search.function.SortByFunctionTest.txt\nbuild/test-results/TEST-org.apache.solr.search.QueryParsingTest.txt\nbuild/test-results/TEST-org.apache.solr.search.SpatialFilterTest.txt\nbuild/test-results/TEST-org.apache.solr.search.TestIndexSearcher.txt\nbuild/test-results/TEST-org.apache.solr.search.TestQueryTypes.txt\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12994945",
            "date": "2011-02-15T19:28:07+0000",
            "content": "i'm actively working on this today .. moving back in line for 3.1 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12994949",
            "date": "2011-02-15T19:33:36+0000",
            "content": "Hoss, sorry to move it out, glad to see you are working on it! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12995058",
            "date": "2011-02-15T23:25:54+0000",
            "content": "Updated patch that fixes the test failures.\n\nFor the most part, this is fairly straight forward: tests that were abusing multiValued fields as if they were single valued.\n\nThe one situation where i made a genuine code change was in AbstractSubTypeFieldType and the way it deals with the \"subFieldType\" attribute.  When it's used, the registerPolyFieldDynamicPrototype function registers a new dynamic field based on the specified fieldType instance.  I updated the properties used to generate these dynamicFields so that it explicitly specifies multiValued=false (it was already specifying indexed=true and stored=false)\n\nI could have just updated the test schemas so that the fieldType specified was already multiValued, but i think this makes more sense from a functional standpoint.  the existing code already enabled a use case like this...\n\n\n<fieldType name=\"double\" class=\"solr.TrieDoubleField\" indexed=\"false\" multiValued=\"false\" ... />\n<fieldType name=\"xy\" class=\"solr.PointType\" dimension=\"2\" subFieldType=\"double\"/>\n\n\n\n...so it makes sense that this should work equally well automatically...\n\n\n<fieldType name=\"double\" class=\"solr.TrieDoubleField\" indexed=\"true\" multiValued=\"true\" ... />\n<fieldType name=\"xy\" class=\"solr.PointType\" dimension=\"2\" subFieldType=\"double\"/>\n\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12995612",
            "date": "2011-02-17T00:38:35+0000",
            "content": "Committed revision 1071459. - trunk\n\nworking on 3x backporting now "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12995640",
            "date": "2011-02-17T02:23:22+0000",
            "content": "Committed revision 1071480. - 3x "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013143",
            "date": "2011-03-30T15:45:41+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}