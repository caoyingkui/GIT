{
    "id": "SOLR-2113",
    "title": "Create TermsQParser that deals with toInternal() conversion of external terms",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.2",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "For converting facet.field response constraints into filter queries, it would be helpful to have a QParser that generated a TermQuery using the toInternal() converted result of the raw \"q\" param",
    "attachments": {
        "SOLR-2113.patch": "https://issues.apache.org/jira/secure/attachment/12454246/SOLR-2113.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12907407",
            "date": "2010-09-08T20:23:37+0000",
            "content": "Currently, the best choices for dealing with this type of situation (generating filter queries from facet selectsion) are either \"RawQParser\" or \"FieldQParser\"\n\n\n\traw - works well for strings and text, but because it expects the input to be the completley raw term value, it doesn't work for FieldTypes that use encoding in their toInternal/toExternal methods (ie: SortableIntField, TrieIntField, etc...)\n\tfield - handles the toInternal problem (by delegating to FieldType.getFieldQuery()) but in the case of TextField this results in analysis being used on the input first \u2013 if the analyzer configured isn't idempotent (love learning new words from yonik) this can also cause a problem (this situation may not be common, but it can be easy to get into w/o knowing it depending on how charfilters / stemmers are used)\n\n\n\nHence the desire for a new QParser (\"term\" seems like an appropriate name) that can be used like the \"field\" or \"raw\" QParsers (take a field name as a localParam) and is essentially implemented as...\n\n\nreturn new TermQuery(new Term(fieldName, getSchema().getField(fieldName).getType().toInternal(q)))\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12907802",
            "date": "2010-09-09T22:28:39+0000",
            "content": "Here's a patch w/ tests and updates to javadoc that implements the proposal and registers it as \"term\".\n\nexample: \n{!term f=id}\n10 "
        },
        {
            "author": "David Smiley",
            "id": "comment-13003261",
            "date": "2011-03-07T04:55:06+0000",
            "content": "I was looking at Hoss's description, and I don't understand why an Analyzer would not be idempotent. I thought they all are; if not it's a bug. No?\n\nIt's a shame this very isolated feature never got back-ported to 3.1. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13003337",
            "date": "2011-03-07T12:47:07+0000",
            "content": "most analyzers are not idempotent.\n\nthis wouldn't be a valuable property to have (useless for a search engine).\nits also not practical nor worth the trouble.\n\none thing to also keep in mind is that analyzers these days take Reader and ultimately return byte[], for example at the extreme a collation analyzer returns a binary sort key as a term... this isn't reversible back to a String at all in any way. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13003368",
            "date": "2011-03-07T14:35:21+0000",
            "content": "Sorry, I'm still confused. Can you please give a simple example as to how an analyzer would give different results on a subsequent invocation for the same input? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13003372",
            "date": "2011-03-07T14:44:46+0000",
            "content": "the easiest example is a synonyms filter: analyze(analyze) will be different than analyze "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13003382",
            "date": "2011-03-07T15:08:43+0000",
            "content": "porter stemming is not idempotent.\n\nstem(hellosing) -> hellos\nstem(stem(hellosing)) -> hello "
        },
        {
            "author": "David Smiley",
            "id": "comment-13003421",
            "date": "2011-03-07T16:40:43+0000",
            "content": "It appears what I understood to be \"idempotent\" is different then the meaning here.  I looked this word up in wikipedia and it appears in the context of computer science that it has two separate meanings.  One meaning has more to do with side-effects, which is the meaning I've always attached to the word. It comes up a lot when talking about thread-safe code.  The other meaning associated with functional programming is the meaning intended by Yonik & Rob here \u2013 a meaning I don't think I would ever put to use.  It's unfortunate that this word is ambiguous... since it's very useful to use it to say that a method on a class always has the same result for the same input, without saying you can give the output back to the input again and also get the same result. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13033378",
            "date": "2011-05-13T23:18:31+0000",
            "content": "Committed revision 1102922. - 3x backport "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043584",
            "date": "2011-06-03T16:44:54+0000",
            "content": "Bulk close for 3.2 "
        },
        {
            "author": "David Smiley",
            "id": "comment-13088240",
            "date": "2011-08-20T18:16:21+0000",
            "content": "Does \n{!terms}\n render \n{!raw}\n obsolete? If not what practical uses do it have? If it is obsolete then it should be deprecated and removed.\n\n{!field}\n still appears useful to basically do a phrase query. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13088902",
            "date": "2011-08-22T18:31:16+0000",
            "content": "{!raw}\n is great for debugging since it can produce any term query regardless of field type (i.e. no validation, transformation, etc). "
        }
    ]
}