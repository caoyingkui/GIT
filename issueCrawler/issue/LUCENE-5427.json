{
    "id": "LUCENE-5427",
    "title": "Support for changing FieldCache implementation in Lucene",
    "details": {
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "core/search"
        ],
        "affect_versions": "4.6",
        "status": "Open",
        "fix_versions": []
    },
    "description": "Believe in general it would be a nice feature to be able to overwrite the FieldCache-implementation in Lucene.\n\nFor instance we override with a FieldCache-implementation that basically does not allow anything to be put in the FieldCache caches. We have so much data that it always creates memory issues.\n\nBut I could imagine other reasons for wanting to override the FieldCache-implementation",
    "attachments": {
        "Override_FieldCache_impl_to_use.patch": "https://issues.apache.org/jira/secure/attachment/12626316/Override_FieldCache_impl_to_use.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13887830",
            "author": "Per Steffensen",
            "content": "Fairly primitive for branch_4x patch attached. Didn't want to make the patch too big, so e.g. I didn't change from using a static FieldCache.DEFAULT to something non-static and method'ish even though that would be obvious to do some day. The solution requires that you change the implementation of the FieldCache before you ever start using it. I am very unsure what would happen if you changed the FieldCache after someone started using it, so I didn't want to include that. Changed FieldCacheImpl so that it is easier to extend it, which you would probably want to do in most cases where you create you own FieldCache-implementation. The changes made to FieldCacheImp are the ones necessary for us to make our do-not-put-anything-in-the-caches-FieldCache-implementation - so that kinda drove what changes I made to FieldCacheImpl. ",
            "date": "2014-01-31T15:25:23+0000"
        },
        {
            "id": "comment-13887834",
            "author": "Per Steffensen",
            "content": "For reference this is (almost) the FieldCache we use\n\npackage com.mycompany;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Map.Entry;\n\nimport org.apache.lucene.index.AtomicReader;\nimport org.apache.lucene.search.FieldCache;\nimport org.apache.lucene.search.FieldCacheImpl;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class MyFieldCache extends FieldCacheImpl implements FieldCache {\n\n\tprivate final Logger log = LoggerFactory.getLogger(MyFieldCache.class);\n\t\n\tprivate class CreateValueFailsCache extends Cache {\n\t\t\n\t\tprivate CreateValueFailsCache() {\n\t\t\tsuper(MyFieldCache.this);\n\t\t}\n\t\t\n\t\t@Override\n\t\tprotected Object createValue(AtomicReader reader, CacheKey key, boolean setDocsWithField) throws IOException {\n\t\t\tunsupported();\n\t\t\treturn null;\n\t\t}\n\t\t\n\t}\n\t\n\t@Override\n\tprotected synchronized void init() {\n\t\tsuper.init();\n\t\tMap<Class<?>, Cache> newCaches = new HashMap<Class<?>, Cache>();\n\t\tfor (Entry<Class<?>, Cache> entry : caches.entrySet()) {\n\t\t\tnewCaches.put(entry.getKey(), new CreateValueFailsCache());\n\t\t}\n\t\tcaches = newCaches;\n\t}\n\t\n\tpublic MyFieldCache() {\n\t\tsuper();\n\t\tlog.debug(\"Using \" + getClass().getName());\n\t}\n\t\n\tprivate void unsupported() {\n\t\tthrow new UnsupportedOperationException(\"You tried to perform a search that is not supported by this system. Technical reason: It tries to use the Lucene FieldCache in an illegal way\");\n\t}\n\n}\n\n\nIt does not just throw an exception when invoking one of the methods on FieldCache, because that does not always put something in the caches. In some situations FieldCacheImpl actually uses DocValue to do its job and puts nothing in the caches, and that it just fine and allowed ",
            "date": "2014-01-31T15:32:09+0000"
        }
    ]
}