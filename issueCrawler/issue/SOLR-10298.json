{
    "id": "SOLR-10298",
    "title": "Reduce size of new Ref Guide PDF",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "documentation"
        ],
        "type": "Sub-task",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "The new Ref Guide PDF is ~31Mb in size, which is more than 2x the current PDF produced by Confluence (which is 14Mb).\n\nThe asciidoctor-pdf project has a script to optimize the PDF, mostly by scaling down images. When I run this tool on the new PDF, the size is reduced to ~18Mb. (More info on this script: https://github.com/asciidoctor/asciidoctor-pdf#optional-scripts).\n\nSome of the current image files are very large in size, so I believe that by scaling the images down, we can make the size smaller without adding a step in the build to run the optimize script programmatically (it also has a dependency on GhostScript, so it would be nice to not add another dependency if it can be avoided).\n\nThe new PDF is also about 300 pages longer, but this issue is primarily concerned with file size. However, reducing the number of pages will also make it smaller. A few things that could be tried to reduce the # of pages:\n\n\tReduce font sizes\n\tIncrease page margins\n\tReview options for when a forced page-break is used and modify if possible",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-15T20:36:28+0000",
            "content": "After some Confluence upgrade, we had a similar problem (SOLR-5819). At that time, the issue was determined to be some massive amount of duplication of images inside the PDF itself. A tool was developed to reduce the PDF size, which was used for a time for each new release.\n\nThe problem in SOLR-5819 is likely not the same problem here. As a test, I ran that tool on the new PDF and the result was a PDF around ~30Mb, really only about a 500Kb difference, which is negligible at this size. ",
            "author": "Cassandra Targett",
            "id": "comment-15926938"
        },
        {
            "date": "2017-03-21T20:14:57+0000",
            "content": "With Andrzej Bialecki 's help, I figured out a couple of explanations for the size.\n\nFirst, I reduced the resolution on some of the largest PNG files, and that reduced the size of the PDF by about 4Mb (to 27Mb). Using the optimize-pdf script [1] from the asciidoctor-pdf project (the source for the PDF conversion we're using here [2]), the PDF can be compressed to about 12Mb, which is smaller than the current PDF (which is 14Mb).\n\nI believe we will need to use that script, or something that does the same thing, in our build process because Andrzej helped me figure out that the font dictionary is used on nearly every page, which tells us the PDF is not compressed. For further proof of lack of compression, I gzipped the file and it was ~70% smaller as a .gz file. After running it through the optimize-pdf script, we can see /Filter /FlateDecode added to the file, which tells us that it is now compressed. The asciidoctor-pdf project uses Prawn, and this is apparently a known issue - at least in the version that project is using (I didn't dig that far into that part of it). [3]\n\nThe issue with the optimize-pdf script that comes from the asciidoctor-pdf project is that it has a dependency on Ghostscript. Maybe that is a simple problem to solve, but we have not yet spent any time trying to figure out if it can be easily added to the ant target and not require that it be pre-installed for anyone wanting to create a PDF locally. \n\nIt's also entirely conceivable that a similar script could be written that does the same things, but it would be beyond my abilities at this point.\n\n[1] https://github.com/asciidoctor/asciidoctor-pdf/blob/master/bin/optimize-pdf\n[2] https://github.com/asciidoctor/asciidoctor-pdf\n[3] https://github.com/asciidoctor/asciidoctorj/issues/476#issuecomment-246201886 - last paragraph explains an issue with Prawn that is causing this. ",
            "author": "Cassandra Targett",
            "id": "comment-15935230"
        },
        {
            "date": "2017-03-21T21:28:26+0000",
            "content": "the optimize-pdf script linked is really just a shorthand for running gs with some specific command line args ... we could easily do something similar (and/or tweak some of the args for our usecase) directly from ant, assuming the \"user\" (ie: person building the ref guid) has gs installed.\n\nAt the moment everything we do in the adoc->pdf converstion is java only, so it would be a bummer to add this external dep, but it would not be the end of the world. ",
            "author": "Hoss Man",
            "id": "comment-15935366"
        },
        {
            "date": "2017-03-22T18:44:32+0000",
            "content": "Would something like Ghost4J help? ",
            "author": "Cassandra Targett",
            "id": "comment-15936904"
        },
        {
            "date": "2017-03-23T18:13:53+0000",
            "content": "I don't think so \u2013 that's just a java wrapper API that uses JNI (JNA?) to call out the the C API for GhostScript \u2013 so it still assumes/requires it can load the \"gs\" shared library.  if a \"user\" has that shared lib installed, then they probably have the \"gs\" command line installed \u2013 and vice versa.  Exec'ing \"gs\" from ant is probably easier to understand / maintain. ",
            "author": "Hoss Man",
            "id": "comment-15938936"
        },
        {
            "date": "2017-03-23T18:26:10+0000",
            "content": "it still assumes/requires it can load the \"gs\" shared library\n\nAgreed: I downloaded the binary .jar from http://search.maven.org/#search%7Cga%7C1%7Cghost4j, and it definitely does not bundle the \"gs\" shared libraries. ",
            "author": "Steve Rowe",
            "id": "comment-15938961"
        },
        {
            "date": "2017-03-23T18:38:24+0000",
            "content": "Maybe, since ghostscript's contribution in the optimization phase seems limited to image scaling, we could do that directly with a java-only library, like https://github.com/rkalla/imgscalr ? ",
            "author": "Steve Rowe",
            "id": "comment-15938982"
        },
        {
            "date": "2017-03-23T22:25:15+0000",
            "content": "Maybe, since ghostscript's contribution in the optimization phase seems limited to image scaling, ...\n\nit's definitely not just an issue of image scaling \u2013 note cassandra's comments about /FlateDecode \u2013 ghostscript is re-writting the postscript text blocks to use compressed text.\n\nhere's a quick comparison I just did on the jira/solr-10290 branch...\n\n\n\t27M\trefguide-size.normal.pdf\n\t\n\t\tdefault asciidoctor-pdf output via ant build-pdf\n\t\tgziped: 7.9M\n\t\n\t\n\t22M\trefguide-size.all-pngs-are-1px.pdf\n\t\n\t\treplaced all PNG files in src/images with a 1px image && ant build-pdf\n\t\tgziped: 2.3M\n\t\n\t\n\t13M\trefguide-size.normal-optimized.pdf\n\t\n\t\tdefault asciidoctor-pdf output via ant build-pdf (27M) && run optimize-pdf on result\n\t\tgziped: 9.2M\n\t\n\t\n\t3.8M\trefguide-size.all-pngs-are-1px-optimized.pdf\n\t\n\t\treplaced all PNG files with a 1px image, then ant build-pdf (22M) && run optimize-pdf on result\n\t\tgziped: 2.7M\n\t\n\t\n\n\n\nSo clearly there's a lot to be gained from letting gs do some of it's default page compression and font inlining/subseting (even if we don't want care about programmatic image scaling and/or manually change the images ourselves in the repo)\n\nBut an alternative to worrying about using compression inside the PDF might be to just ship the PDF inside of a zip file \u2013 which we can easily do from ant.\n\nNOTE: edited to include the gzipped sizes ",
            "author": "Hoss Man",
            "id": "comment-15939333"
        },
        {
            "date": "2017-03-24T14:30:23+0000",
            "content": "it's definitely not just an issue of image scaling \u2013 note cassandra's comments about /FlateDecode \u2013 ghostscript is re-writting the postscript text blocks to use compressed text.\n\nYeah, sorry for the noise, I obviously didn't comprehend what Cassandra wrote.\n\nhere's a quick comparison I just did on the jira/solr-10290 branch...\n\nNice proof.\n\nAt the moment everything we do in the adoc->pdf converstion is java only, so it would be a bummer to add this external dep\n\nI looked at pdfbox's examples, and none of them seem to be aimed at the sort of cleanup we're after, so although it might work for us, I don't see a quick win there. ",
            "author": "Steve Rowe",
            "id": "comment-15940451"
        },
        {
            "date": "2017-03-27T20:09:38+0000",
            "content": "While I was out last week, Andrzej did some more analysis, and found a few things that are actually rather wrong with the new PDF:\n\n\n\tall the text is represented in hex codes, which adds more bytes. He thought this might be related to using custom fonts.\n\teach piece of text is output in tiny chunks, which he thought might be a side-effect of full justification.\n\tthe text color was being set to black, then the dark gray I'd chosen for the text, then back to black. He thought maybe using full black would help this.\n\n\n\nHowever, removing all of those customizations did not yield a smaller size. The asciidoctor-pdf project includes a basic theme that only uses the included fonts (helvetica, times, courier, etc.), is left-justified, and defaults to black. Using this theme produces a 28Mb PDF, pretty much the same as with the customizations I'd made. So, I don't think we can tweak our way out of this, and it's simply a bug/not-yet-implemented-feature of asciidoctor-pdf.\n\nI looked at pdfbox's examples, and none of them seem to be aimed at the sort of cleanup we're after, so although it might work for us, I don't see a quick win there.\n\nDoing a google search for \"pdfbox flate\" I came across these javadocs: https://pdfbox.apache.org/docs/2.0.1/javadocs/org/apache/pdfbox/pdmodel/common/PDStream.html. It seems you can use PDFBox to compress an output stream to FLATE_DECODE (the method addCompression appears to be deprecated in PDFBox 2.0, but the deprecation note explains how to make it work in a new way). Perhaps that helps? ",
            "author": "Cassandra Targett",
            "id": "comment-15943962"
        },
        {
            "date": "2017-03-28T09:40:19+0000",
            "content": "The issue with the optimize-pdf script that comes from the asciidoctor-pdf project is that it has a dependency on Ghostscript. Maybe that is a simple problem to solve, but we have not yet spent any time trying to figure out if it can be easily added to the ant target and not require that it be pre-installed for anyone wanting to create a PDF locally.\nWe could let optimize-pdf be flexible, i.e. first looks for gs on path and if not found look for docker and run gs in a container, and if not found, issue a warning and an exit code. This modified script works on my mac: https://gist.github.com/bfb1bed6a7ef6fd782ba9132ac5baab2\nThis would let any developer who has Docker installed be able to compress the PDF without installing gs. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15944871"
        },
        {
            "date": "2017-03-31T19:22:16+0000",
            "content": "I looked at pdfbox's examples, ...\n\n...It seems you can use PDFBox to compress an output stream to FLATE_DECODE ...\n\nI don't know why it didn't occur to me before to look into using pdfbox, but with a little poking around of their examples, and the tip from cassandra about COSName.FLATE_DECODE i was able to modify one of the pdfbox examples to use COSName.FLATE_DECODE in a new (pure java!) tool that shrinks the ascidoctor generated PDF from 27M to 9.4M using inteneral PDF stream compression \u2013 even w/o any image resizing/resampling.\n\non the jira/solr-10290 branch, i've already hooked this new \"ReducePDFSize\" tool into the build process, but you can still compare the \"RAW\" PDF produces by asciidoctor with the final output...\n\n\nhossman@tray:~/lucene/dev/solr [solr-10290] $ du -sh build/solr-ref-guide/pdf-tmp/*.pdf build/solr-ref-guide/*.pdf\n27M\tbuild/solr-ref-guide/pdf-tmp/RAW-apache-solr-ref-guide-7.0.pdf\n9.4M\tbuild/solr-ref-guide/apache-solr-ref-guide-7.0.pdf\n\n\n\n...as far as i can tell, the pdfbox code hasn't \"broken\" anything in the original PDF \u2013 but more eye balls would be helpful to verify.\n\nThere might be more gains to be made in reducing the size, but i'd vote for calling this a win, moving on, and leaving any questions of further reductions for future issues. ",
            "author": "Hoss Man",
            "id": "comment-15951530"
        },
        {
            "date": "2017-03-31T20:05:34+0000",
            "content": "That looks very good. I notice no oddities in fonts or images - it looks exactly the same quality as before. And 9.4Mb is ~3Mb smaller than today (when I scaled down the images, that shaved 2Mb off the Confluence version, so it is now 12Mb), even though there are nearly 300 more pages in the new version with a larger font, so it's a big win. ",
            "author": "Cassandra Targett",
            "id": "comment-15951581"
        },
        {
            "date": "2017-03-31T22:10:40+0000",
            "content": "Might be possible to scale the images using PDFBox too for further gains: http://stackoverflow.com/questions/5472711/dpi-of-image-extracted-from-pdf-with-pdfbox and http://stackoverflow.com/questions/20614350/compress-pdf-with-large-images-via-java ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15951710"
        },
        {
            "date": "2017-04-03T15:51:55+0000",
            "content": "Might be possible to scale the images using PDFBox too for further gains\n\nI'm for the idea of scaling the images further, but we should also pay attention to the size of the images to begin with. Before I scaled a number of them down, some were nearly 500K and I can't think of a reason why a screenshot needs to be at such high resolution. \n\nPlus, keeping them smaller will keep bloat out of the source code, won't eat up bandwidth in the online version trying to load, and help make the PDF even smaller.\n ",
            "author": "Cassandra Targett",
            "id": "comment-15953689"
        },
        {
            "date": "2017-04-04T20:35:53+0000",
            "content": "I just pushed some stylistic changes to reduce the size and page length further. I replaced the Noto Serif font with Noto Sans (Apache licensed), which allowed me to reduce the font size and line height calculations while maintaining readability. I also reduced the line height in code boxes. These changes together reduced the page length to 961 pages (nearly 100 page improvement), and reduced the PDF size further also (now 9.0Mb). There is more I can do here, just wanted to push changes early and often. ",
            "author": "Cassandra Targett",
            "id": "comment-15955762"
        },
        {
            "date": "2017-04-25T18:41:15+0000",
            "content": "I recently updated all the pages in the branch with a more recent export, and generated the PDF as part of a test that I had the updated files. The size was 4.5Mb, so declaring victory on this one. ",
            "author": "Cassandra Targett",
            "id": "comment-15983421"
        }
    ]
}