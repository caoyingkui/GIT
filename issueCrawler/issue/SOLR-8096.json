{
    "id": "SOLR-8096",
    "title": "Major faceting performance regressions",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0,                                            5.1,                                            5.2,                                            5.3,                                            6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Critical"
    },
    "description": "Use of the highly optimized faceting that Solr had for multi-valued fields over relatively static indexes was removed as part of LUCENE-5666, causing severe performance regressions.\n\nHere are some quick benchmarks to gauge the damage, on a 5M document index, with each field having between 0 and 5 values per document.  Higher numbers represent worse 5x performance.\n\nSolr 5.4_dev faceting time as a percent of Solr 4.10.3 faceting time\t\t\n\n\n\n...................................\n Percent of index being faceted\n\n\n\n\n\n\n\n\nnum_unique_values\n\t10%\t\n 50% \n 90% \n\n\n10\t        \n 351.17%\t\n 1587.08%\t\n 3057.28% \n\n\n100   \t\n 158.10%\t\n 203.61%\t\n 1421.93% \n\n\n1000\t\n 143.78%\t\n 168.01%\t\n 1325.87% \n\n\n10000\t\n 137.98%\t\n 175.31%\t\n 1233.97% \n\n\n100000\t\n 142.98%\t\n 159.42%\t\n 1252.45% \n\n\n1000000\t\n 255.15%\t\n 165.17%\t\n 1236.75% \n\n\n\n\n\nFor example, a field with 1000 unique values in the whole index, faceting with 5x took 143% of the 4x time, when ~10% of the docs in the index were faceted.\n\nOne user who brought the performance problem to our attention: http://markmail.org/message/ekmqh4ocbkwxv3we\n\"faceting is unusable slow since upgrade to 5.3.0\" (from 4.10.3)\n\nThe disabling of the UnInvertedField algorithm was previously discovered in SOLR-7190, but we didn't know just how bad the problem was at that time.\n\nedit: removed \"secret\" adverb by request",
    "attachments": {
        "simple_facets.diff": "https://issues.apache.org/jira/secure/attachment/12778730/simple_facets.diff",
        "facetcache.diff": "https://issues.apache.org/jira/secure/attachment/12862497/facetcache.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-09-25T04:32:18+0000",
            "author": "Mike Murphy",
            "content": "Are you sure it was secret and not just a mistake? ",
            "id": "comment-14907552"
        },
        {
            "date": "2015-09-25T04:42:25+0000",
            "author": "Erick Erickson",
            "content": "Mike Murphy Whoa! I don't know whether your comment was meant sarcastically or in any other humorous sense, but it stands a very good chance of being seriously received no matter what your intent. Let's find out what the background is here before casting aspersions. ",
            "id": "comment-14907563"
        },
        {
            "date": "2015-09-25T04:47:34+0000",
            "author": "Yonik Seeley",
            "content": "Are you sure it was secret and not just a mistake?\n\nYes.\n\n\n\tThis algorithm had been relied apon by many since 2008 (SOLR-475), and completely removing it's use and replacing it would obviously warrant discussion, benchmarks, etc.\n\tThis was a massive patch, and relevant changes should be called out, esp if changes seem unrelated to the issue's description.\n\tIf you search the JIRA issue, \"UnInvertedField\" never appears.\n  (the linked issues mention it now, but those were added by us after the fact)\n\tThe issue's title is \"Add UninvertingReader\" and the description had to do with Lucene's FieldCache, which UnInvertedField is not part of.\n\tThere is no mention of the issue or changes anywhere in Solr's CHANGES.txt\n\tWhen asked to comment on impacts of this massive patch, the answer given was \"Is the CHANGES.txt entry not good here? The docvalues apis did not change...\"\n\tThe CHANGES entry for lucene made no mention of the change to Solr or UnInvertedField.\n\tAlthough the UnInvertedField code was left behind (as dead code), the removal of the use\n  of UnInvertedField was not by mistake - you can see by the test code that was explicitly removed.\n  (TestFaceting.java)\n\n\n\nedit: removed inflammatory conclusion  ",
            "id": "comment-14907568"
        },
        {
            "date": "2015-09-25T05:39:25+0000",
            "author": "Erick Erickson",
            "content": "I'm not going there. Speculating about motives does not have any useful outcome, it just provides fodder for flame wars. Discussing fixing the issues is far more fruitful.\n\nAnd less painful for me to read.\n ",
            "id": "comment-14907614"
        },
        {
            "date": "2015-09-25T09:49:14+0000",
            "author": "Uwe Schindler",
            "content": "Use of the highly optimized faceting that Solr had for multi-valued fields over relatively static indexes was secretly removed as part of LUCENE-5666, causing severe performance regressions.\n\nHi, the removal was not \"secret\". Removal of FieldCache from Lucene (and replacement by UninvertingReader) was discussed on the Issue tracker, although interest by Solr people was small. I think this is the main issue here. Sometimes it would be good to have Solr committers taking part of discussions on Lucene issues. If you want to make Solr bettre, you should also help in making Lucene better!\n\nThe old field cache was also put into a separate module (with the new DocValues emulating-API), because we (Lucene Committers) knew that Solr still uses it. Sure, we could have used UninvertingReader on top of SlowCompositeReaderWrapper, but this would bring other slowness! So the committers decided to step forward and remove the top-level facetting (which was long overdue).\n\nIt was announced in several talks about Lucene 5 that FieldCache was removed and all facetting in Solr was implicitely changed to only use per segment field caches (e.g., see my talk @ fosdem 2015, JAX 2015, or berlinbuzzwords - around one of the last slides). Maybe there should have been added a changes entry also to the Solr CHANGES.txt about this, but this was forgotten.\n\nThe CHANGES.txt about this entry was, the first line mentions that facetting in Solr is involved. Any Solr committer could have looked into the code and bring up complaints about those changes in the issue tracker also after this commit has been done:\n\n\n\n\tLUCENE-5666: Change uninverted access (sorting, faceting, grouping, etc)\n  to use the DocValues API instead of FieldCache. For FieldCache functionality,\n  use UninvertingReader in lucene/misc (or implement your own FilterReader).\n  UninvertingReader is more efficient: supports multi-valued numeric fields,\n  detects when a multi-valued field is single-valued, reuses caches\n  of compatible types (e.g. SORTED also supports BINARY and SORTED_SET access\n  without insanity).  \"Insanity\" is no longer possible unless you explicitly want it. \n  Rename FieldCache* and DocTermOrds* classes in the search package to DocValues*. \n  Move SortedSetSortField to core and add SortedSetFieldSource to queries/, which\n  takes the same selectors. Add helper methods to DocValues.java that are better \n  suited for search code (never return null, etc).  (Mike McCandless, Robert Muir)\n\n\n\nSo everybody was informed.\n\nThe people who did this are elasticsearch employees. That is one way to deal with Solr's faster faceting!\n\nThis is speculation and really a bad behaviour on an Open Source issue tracker. We should discuss here about technical stuff, not make any assumptions about what people intend to do. This statement was posted by a person (Mike Murphy) who I never met in person, and who really seldem took place in Lucene/Solr discussions at all. So I don't think we should count on that. It is also bad behaviour to accuse committers on twitter about sabotage: https://twitter.com/mmurphy3141/status/647254551356162048; please don't do this. I would ask to remove this tweet, thanks.\n\nI was informed about the changes mentioned here and I strongly agree with the committers behind LUCENE-5666. I was always in favour of removing those top-level facetting algorithms. So they still have my strong +1. On my Solr customers I have seen nobody who complained about slow top-level facetting recently (because I told them long time ago to no longer use those outdated top-level algorithms if they have dynamic indexes). Of course I don't know about people using static indexes.\n\nThe right thing to do for Solr people would be to remove those top-level stuff completely. This is no longer fitting the new reader structure (composite and atomic/leaf readers) of Lucene 3 (with API cleanups to better reflect the new structure in Lucene 4). Lucene 3 is now several years retired already! So there was long time to fix Solr's facetting to go away from top-level. People with static indexes can still force merge their index and will have the same performance with the new algorithms.\n\nPlease keep in mind that it took about half a year until the first one recognized a problem like this, which makes me think that only few people are using those mostly-static indexes. \n\nWe should work on this issue to fix the issue, not accuse people, thanks! ",
            "id": "comment-14907870"
        },
        {
            "date": "2015-09-25T14:04:55+0000",
            "author": "Yonik Seeley",
            "content": "Once again, UnInvertedField was not part of the lucene FieldCache.  It was a Solr class cached in SolrIndexSearcher (via fieldValueCache), did not implement the DocValues API, etc.  The lucene FieldCache was made package protected (an implementation detail) so one would need to access it via DocValues.  That's what the issue was about.\n\nSo the committers decided to step forward and remove the top-level facetting (which was long overdue).\n\nWhere was this discussion?  I see nothing about it on LUCENE-5666\nAnd of course I would have given a -1 to such a change for being dogmatic over practical and not caring about our users.\n\nI was informed about the changes mentioned here\n\nWhere did this discussion take place? I can't find it in any public forum.\n\nI was always in favour of removing those top-level facetting algorithms. So they still have my strong +1.\n\nWith no benchmarking of how the replacement performed?  No option to use the old method if a user wanted to? Without any public discussion of the impacts?  Without any note in Solr's CHANGES?\n\nSo you were strongly for the change, but you knew I'd most likely be against it, right (based on previous discussions about top-level data structures)?\n ",
            "id": "comment-14908063"
        },
        {
            "date": "2015-09-27T18:23:04+0000",
            "author": "Mikhail Khludnev",
            "content": "Yonik Seeley, I suppose benchmarking post SOLR-7730 (5.4.0) shows fewer gain between DV and UnInvertedField.   ",
            "id": "comment-14909836"
        },
        {
            "date": "2015-10-03T15:59:14+0000",
            "author": "Mike Murphy",
            "content": "Sorry Uwe, you are right as I said to Erick.  I will delete the accusations. ",
            "id": "comment-14942371"
        },
        {
            "date": "2015-10-08T04:24:01+0000",
            "author": "Bill Bell",
            "content": "Are we adding it back and adding an option to enable it? ",
            "id": "comment-14948050"
        },
        {
            "date": "2015-10-08T14:04:40+0000",
            "author": "Uwe Reh",
            "content": "Uwe Schindler wrote:\n  \"Please keep in mind that it took about half a year until the first one recognized a problem like this, which makes me think that only few people are using those mostly-static indexes.\"\n\nI reported the issue in the list and I disagree this view at both points.\n1) I noticed the the Problem months ago, but I thought, that it was a problem of my poorly configured SolrCloud. I had to postpone the project.\n2) Nearly all productive installations I know, are still running on Solr 4.x some even with Solr 3.6. The applications have been designed years ago. For all of them, there was no need to change a boring but well running production environment.\n\nYes, the new features for faceting have been announced, but I had no time to follow. Since there was no warning in the release notes, I thought it's a good idea to upgrade first. \n\nSorry for being a bit off topic\nUwe ",
            "id": "comment-14948700"
        },
        {
            "date": "2015-10-10T20:03:24+0000",
            "author": "Mikhail Khludnev",
            "content": "it seems DV-facets will be fast enough since 5.4.0\nhttp://www.mail-archive.com/solr-user@lucene.apache.org/msg114586.html\nSOLR-7730 seems to work fine. Using docValues with Solr 5.4.0-2015-09-29_08-29-55 1705813 makes my faceted queries fast again. (90ms vs. 20000ms)   ",
            "id": "comment-14952028"
        },
        {
            "date": "2015-12-19T02:44:43+0000",
            "author": "Jamie Johnson",
            "content": "While some (all?) of the performance issues are addressed, would it not still be useful to add an option to support either faceting approach?  I understand the benefits of DocValues but we have a case where the facets need to be calculated based on an access level the user has.  Simply storing in a separate field is not an option because the access controls are complex.  Given that the JSON Facet API allows developers to choose the faceting method it would seem reasonable to provide similar functionality here, no?  Perhaps support the original implementation as the approach when method is fc and add a dv method to support docvalues.  This would be inline with the new JSON API I believe, though from the looks of things it is not a trivial patch since the SimpleFacets seems pretty out of sync with the new faceting approach required in regards to using the UnInvertedField.... ",
            "id": "comment-15065185"
        },
        {
            "date": "2015-12-20T06:04:53+0000",
            "author": "Jamie Johnson",
            "content": "Sorry if this is the incorrect place for this, but I took a stab at trying to implement supporting uninverted field based facets in SimpleFacets.  i am not sure it's 100% there but I think it's close.  The basic approach was to leverage as much as possible from the JSON Faceting API since that is the only consumer of the UIF that I could find.  This meant I had to make some classes public that were previously package protected (Perhaps moving SimpleFacets into the facet package would have been better?).  Additionally, I had to make FacetProcessor aware of Grouping so that the docset would be adjusted appropriately for grouping requests with truncate set to true.\n\nAlso I did this by adding DV as a new FacetMethod and made it so this is what triggers using DocValues vs FC which currently triggers it.  Perhaps it would be more appropriate to add a new FacetMethod named UIF and leave FC alone?  I'm open to suggestions here.\n\nLast significant difference from the 4.10.4 implementation is I didn't attempt to use the Lucene FieldCache at all since it was made package protected.  The 4.10.4 implementation used that in cases, but this should be inline with what JSON Facets is doing.\n\nThe commits are attached as a patch to this ticket (I'm happy to spawn off a new ticket if it's more appropriate) and also available at https://github.com/jej2003/lucene-solr ",
            "id": "comment-15065639"
        },
        {
            "date": "2016-02-04T14:36:47+0000",
            "author": "Nikolay Khitrin",
            "content": "I can confirm performance issue for new Solr 5.4.1 1725212 with 40M docs index and 6.7M unique terms per multivalued field. \nFacetting takes more than 3 seconds on Solr 5.4.1 and 190ms on Solr 4.4.0 over near-identical indexes.\n\nMy opinion is that DocValues API is JIT-unfriendly. LongValues.get is not monomorphic call and in single running Solr instance there are at least DirectMonotonicReader$2 and several DirectReader.DirectPackedReader* implementations in use.\n\nIt is very good approach in OOP terms, but for facetting we need read a lot of memory (for ex. from memory-mapped inputs) really fast and SortedSetDocValues-LongValues-RandomAccessInput chain should inline and compile into simple memory read assembly.\n\nUnInvertedField, itself, is very solid class and can be optimized by JIT really hard. ",
            "id": "comment-15132395"
        },
        {
            "date": "2016-05-24T16:42:25+0000",
            "author": "Alessandro Benedetti",
            "content": "Just adding some additional information as I just incurred on the issue with Solr 6.0 :\nStatic index, around 50 *10^6 docs, 20 fields to facet, 1 of them with high cardinality on top of grouping.\nGroping was not affecting at all.\n\nAll the symptoms are there, Solr 4.10.2 around 70 ms (enum) - 150 ms fcs  and Solr 6.0 around 550 ms .\nThe 'fieldValueCache' seems to be unused (no inserts nor lookups) in Solr 6.0.\nIn Solr 4.10 the 'fieldValueCache' is in heavy use with a cumulative_hitratio of 0.96 .\nSwitching from enum to fc to fcs to uif did not change that much.\n\nMoving to DocValues didn't improve that much the situation ( but I was on an optimized index, so I need to try the multi-segmented one according to Mikhail Khludnev contribution in Solr 5.4.0 ) .\n\nMoving to field collapsing moved down the query to 110-120 ms ( but this is normal, we were faceting on 260 /1 million orignal docs)\nAdding facet.threads=NCores moved down the queryTime to 100 ms, in combination with field collapsing we reached 80-90 ms when warmed.\n\nWhat are the plan for the future related this ?\nDo we want to deprecate the legacy facets implementation and move everything to Json facets ( like it happened with the UIF ) ?\nSo backward compatible but different implementation ?\n\nCheers\n\n ",
            "id": "comment-15298469"
        },
        {
            "date": "2016-05-31T16:55:50+0000",
            "author": "Alessandro Benedetti",
            "content": "We found finally our suspect !\n\nhttps://issues.apache.org/jira/browse/SOLR-9176\n\nI would like an opinion soon, it seems to me, a mistake, as the code is not equivalent and in the commit message there is no reason why we have lost the possibility of using the term Enum for single valued numeric fields.\nFor static indexes I can confirm this causes a visible performance regression ( very hidden as you think to use Term Enum while actually Solr uses FCS under the hood) ",
            "id": "comment-15308099"
        },
        {
            "date": "2016-05-31T19:07:20+0000",
            "author": "Joel Bernstein",
            "content": "I haven't reviewed the code, but if the enum faceting is actually using FCS then this is a bug. It would also explain the regression on enum faceting that has been reported. ",
            "id": "comment-15308387"
        },
        {
            "date": "2016-06-14T14:32:25+0000",
            "author": "David Smiley",
            "content": "Since facet.method=uif SOLR-8466 and now that facet.method=enum works again SOLR-9176 is there anything left to do here or should it be closed? ",
            "id": "comment-15329588"
        },
        {
            "date": "2016-06-14T15:42:00+0000",
            "author": "Alessandro Benedetti",
            "content": "Mmmm actually it is still a regression.\nIf you were using fc/fcs without docValues, you will still see the regression.\nA work-around could be to force UIF if you have selected FC/FCS without docValues.\nBut I definitely don't like that much this approach in \"hiding\" legacy facets bugs under forcing of other methods \n\nWhat do you think ?\n\nCheers ",
            "id": "comment-15329683"
        },
        {
            "date": "2016-06-15T04:07:10+0000",
            "author": "David Smiley",
            "content": "A work-around could be to force UIF if you have selected FC/FCS without docValues.\n\n+1.  Then it's just as before (in 4x); no?\n\nSeparately it'd be nice if debug output showed which method was chosen. ",
            "id": "comment-15331106"
        },
        {
            "date": "2016-06-15T08:39:07+0000",
            "author": "Alessandro Benedetti",
            "content": "Yes David,\nyou know, not the cleanest solution but it's the same approach used for a lot of other legacy facet method \"bugs\" or incompatibility.\nThe debug for the facet method applied is already in the trunk,part of SOLR-9176, will be logged both the method in input by the user and the method selected by Solr .\n\nI can contribute a small patch in the afternoon to force UIF when docValues are not available .\n\nCheers ",
            "id": "comment-15331393"
        },
        {
            "date": "2017-03-30T16:12:07+0000",
            "author": "Erick Erickson",
            "content": "OK, what's the status of this JIRA? Last comment was 9 months ago.... ",
            "id": "comment-15949319"
        },
        {
            "date": "2017-04-07T15:43:32+0000",
            "author": "Michael Gibney",
            "content": "Of course I can't speak to the status of this issue from other folks' perspectives, but I did observe a couple of things that I wanted mention in case anyone else might find them useful. Performance has actually been acceptable for me, but implementing a simple cache for facets definitely improved performance (in my deployment) for common queries (see facetcache.diff). A couple of observations:\n\n1. Based on the fact that fields were being faceted using DocValues faceting, I assumed (incorrectly) that docValues must have been enabled. In fact, docValues are not enabled by default; IndexReaders are wrapped in UninvertingReaders that (on demand) uninvert non-docValues-enabled fields in order to present a docValues-like interface for faceting. \n2. DocValues cannot yet be enabled on analyzed fields, so if you require this, you'll be dealing with the UninvertingReader; you may be interested in SOLR-8362.\n3. DocValuesFacets iterates over all the documents in a result set for every query. Regardless of the underlying implementation, this is bound to be relatively expensive for result sets containing large numbers of documents. Furthermore, \"Result sets containing large numbers of documents\" constitute a fairly large proportion of common user interactions (landing page with faceting over the whole index presents users with a handful of clickable top-level filters, each of which covers a large portion of the index). Thus, faceting seems to be a good candidate for caching, regardless of the underlying implementation of the DocValues interface. \n\nAccordingly, I've attached a stab at a patch (facetcache.diff) to DocValuesFacets to support a cache intended to speed dv faceting over high-cardinality docsets. Combined with a handful of warming queries, I've seen much improved performance for common requests. In addition to the patch, you must configure your solrconfig.xml with, e.g., \n\n<cache name=\"perSegFacetCache\"\n      class=\"solr.search.LRUCache\"\n      size=\"200\"\n      initialSize=\"200\"\n      autowarmCount=\"200\"\n      regenerator=\"solr.request.PerSegFacetCacheRegenerator\" />\n\n\nI tried to make the docset cardinality threshold for caching configurable at the field level, but haven't yet figured out how to pass in the configuration (you will see my unsuccessful attempts reflected in the changes to SimpleFacets \u2013 with the patch in current state, if you want to adjust this parameter, it can only be done by changing the hardcoded default of 5000 (a reasonable value would probably be much higher) for SimpleFacets.DEFAULT_PERSEG_FACET_CACHE_THRESHOLD).\n\nJust to clarify, this comment is not a suggestion to skip closing this issue, and I'm sorry if it's a bit off-topic; I hope it strikes people as related enough to justify posting here.  ",
            "id": "comment-15960982"
        },
        {
            "date": "2017-08-31T15:55:26+0000",
            "author": "Shawn Heisey",
            "content": "Discussing how we got here and who might be to blame is not something to do here.\n\nThe fact is that current Solr versions have a major performance regression for faceting, and probably for other things like grouping.  In the last couple of weeks, someone on the solr-user mailing list has encountered very slow results with our most recent version (6.6.0 right now) compared to 4.x versions.  For them, enabling docValues, which is supposed to be the magic bullet for faceting performance, causes performance to get even worse.\n\nIf I had any understanding of how this code worked and the precise reasons it has become slower, I would be working on a solution.  For those Solr committers who do know that part of the code: Is there anything a user can do to speed this up?  Is there anything we can do in the Solr code to fix the regression?  Possibly insane idea: Can Solr leverage the faceting code in Lucene itself? ",
            "id": "comment-16149165"
        },
        {
            "date": "2017-08-31T15:57:00+0000",
            "author": "Patrick Schemitz",
            "content": "Vielen Dank f\u00fcr Ihre Nachricht.\n\nIch bin bis auf weiteres nicht im B\u00fcro erreichbar. (Vorr. wieder ab 04.09.)\nBitte wenden Sie sich in dringenden F\u00e4llen an Isabel Kraut <ik@solute.de>\n\nBitte beachten Sie, dass Ihre E-Mail w\u00e4hrend meiner Abwesenheit nicht weitergeleitet wird.\n\nViele Gr\u00fc\u00dfe aus Karlsruhe\nPatrick Schemitz\n\n\u2013\nDr. Patrick Schemitz\nSenior Scientist\n\nbilliger.de\nsolute gmbh\n ",
            "id": "comment-16149168"
        },
        {
            "date": "2017-08-31T16:14:16+0000",
            "author": "Yonik Seeley",
            "content": "For them, enabling docValues, which is supposed to be the magic bullet for faceting performance, causes performance to get even worse.\n\nYep.  DocValues is a better default because it uses little heap memory compared to the FieldCache.  But in general, docValues can be slower than the old 4.x fieldCache, and definitely slower than UnInvertedField for multi-valued faceting.  For dense fields, the newest iterator-based docValues is also somewhat slower than the old docValues.  This isn't just Solr... for example, sorting on dense docValues fields is also slower since the cut-over to iterator docValues.  Anyway, specific use-cases can pretty much always be sped up, but there's no magic bullet and we need to tackle them one at a time.  For example, facet.method=uif was added to re-enable access to the UnInvertedField faceting method.\n\nAnother difference is top-level fieldCache vs per-segment.  For strings, top-level is faster, but it needs to be rebuilt from scratch each time the index changes.  per-segment needs to merge string ords from different segments (hence it introduces some overhead and is thus slower), but only new segments need to have to be rebuilt when the index changes (better for NRT).  But ability to do top-level fieldCache was removed in Lucene (some people are of the opinion that no caches should be top-level), hence some use-cases will be slower. ",
            "id": "comment-16149190"
        },
        {
            "date": "2017-09-01T13:32:29+0000",
            "author": "Ere Maijala",
            "content": "Chiming in as one of those affected by performance issues with faceting. I've been testing with a 57 million record index of bibliographic data. A faceting request that used to take around 20ms in Solr 4.10.2 is at least 2600ms in Solr 6.6.0. While in general I find it fine to change the default behavior to something that works better than before for a majority of use cases, there should be a way to maintain performance in other cases. \n\nMy main issue at the moment is that even facet.method=uif is slow if you request more than a few items. In a smaller test index of 6 million records I can get the top 20 results in 4ms, but facet.limit=200 takes ~100ms and facet.limit=2000 takes ~1300ms (the facet has 1960 buckets). Params user for the query:\n\nq=:&rows=0&facet=true&facet.field=building&facet.mincount=1&facet.limit=[20-2000]&debugQuery=true&facet.method=uif \n\nAnyway, here's a list of issues that, for me, seem to be contribute to all the confusion around faceting performance:\n\n\n\tAs far as I can see, facet.method=uif is completely undocumented apart from a short entry in release notes.\n\tAlso undocumented is the fact (as observed during testing) that docValues must not be enabled for facet.method=uif to do any good. Otherwise the performance can be even worse than with FC.\n\tThere's no proper documentation on what the introduction of docValues means in practice. There are several articles about what good it brings but I couldn't find much of analysis on any possible downsides.\n\tfacet.method=uif with Solr 6.6.0 is still very slow compared to that in Solr 4.10.2 if you request more than a few entries.\n\tThere was no way to get back UIF before SOLR-8466.\n\tChanges in behavior haven't really been documented. This is how the introduction of docValues was documented in the release notes of Solr 4.2.0: \"SOLR-3855, SOLR-4490: Doc values support\". That doesn't help a poor developer like me to get the big picture. Then I read in https://lucidworks.com/2013/04/02/fun-with-docvalues-in-solr-4-2/ that compared to what we used to have \"DocValues aim to alleviate both of these problems while keeping performance comparable.\" Of course that's just something I read on internet, but so far it's the best description of docValues I've read and makes it sound like there won't be significant performance differences.\n\tIt should be possible to make an informed decision to go with something that uses more JVM memory and is slower to warm up if required by the use-case. This is difficult because information is so scattered and the Solr reference guide doesn't go into much detail. For instance the effect of docValues is not mentioned in the reference guide where facet.method is described.\n\tSolr'd documentation on DocValues (https://lucene.apache.org/solr/guide/6_6/docvalues.html) highlights the positive effects it has on performance, memory consumption etc. It starts with \"DocValues are a way of recording field values internally that is more efficient for some purposes, such as sorting and faceting, than traditional indexing.\" That sounds like something you should enable as quickly as possible to reap the benefits!\n\tDiscussions about docValues in solr-user list also mostly recomment enabling docValues without discussing any caveats.\n\n ",
            "id": "comment-16150525"
        },
        {
            "date": "2017-09-01T20:10:26+0000",
            "author": "Toke Eskildsen",
            "content": "Shawn Heisey using the Lucene faceting code is discussed in part in SOLR-7296. As I have zero experience with that code, I cannot say how hard it would be to implement.\n\nEre Maijala for what it's worth, I find all of your point to be valid. Faceting tweaks is too much of a dark art. ",
            "id": "comment-16151085"
        },
        {
            "date": "2017-09-04T18:58:55+0000",
            "author": "Guenter Hipler",
            "content": "I run a lot of tests in the last days (partially I could use old archived queries from our productive system based on 4.10 together with the original query times so I was able to compare the processing times) My findings:\n\n\n\tusing uif method for multifield valued fields but without docvalues (this doesn't work at all) seems to solve most of our current use - cases\n\tEre Maijala >> Trying to use facet.method=uif with a solr.DateRangeField causes the following exception:  <<\nwe use only Int types for publishing dates - this works for range facets. Perhaps a possibility for you?\n\tall our disks are SSD based - the index is not cached in memory, this wouldn't be possible for us with an 110G index\n\tSo in general I think our overdue update from version 4.10 to 6.x now might be an option\n\tthe use case described by Ere Maijala where facet buckets > 200 are causing a performance penal is from my point of view not very often - so I guess/hope we can live with this\n\tBut I have a great concern:\nI think it's problematic if we have to run an aggressive policy for merging segments quite often because it's really resource intensive\n\n\n\n\n\tmy question:\nYonik Seeley Yonik, do you have an idea/plan how to unify (to bring together) the diverged developments in the Lucene area (docvalues) with the current Solr facet algorithms? I think it's no option to make only some optimizations here and there at least in the medium-term view\nI would be happy to support this process with hints and metrics from the user side\n\n\n\nG\u00fcnter  ",
            "id": "comment-16152866"
        },
        {
            "date": "2017-09-05T08:40:15+0000",
            "author": "Ere Maijala",
            "content": "Guenter Hipler, I believe one should be able to use Solr's date range fields as intended. Besides, it's not possible to handle multivalued date ranges with ints. ",
            "id": "comment-16153272"
        },
        {
            "date": "2017-09-05T09:07:16+0000",
            "author": "Guenter Hipler",
            "content": "Ere Maijala I can understand your argument.\n\nI came across another hurdle. I never used the so called optimize functionality so far and now realized that the index is completely rebuild which means e.g. duplication of disk space. Actually we can't do this because our infrastructure isn't designed for this. Not to talk about the more complicated work flows we have to  take into account.\nIn contrast to yesterday at the moment I think using the conventional master / slave model as we are running it by now together with the uif method for facets isn't an option for us. ",
            "id": "comment-16153322"
        },
        {
            "date": "2017-09-05T16:47:49+0000",
            "author": "Shawn Heisey",
            "content": "I never used the so called optimize functionality so far and now realized that the index is completely rebuild which means e.g. duplication of disk space. Actually we can't do this because our infrastructure isn't designed for this.\n\nI think the Solr reference guide may be missing one of the most critical recommendations with any Lucene-based software:  Always run with enough disk space so that your index can triple in size temporarily.  This recommendation is not just for running an optimize \u2013 normal segment merging that happens during indexing can also double the size of the index temporarily.\n\nThere is only one scenario I know of that can actually triple the index size (temporarily).  It is a very specific scenario that may be uncommon in practice, but does happen in the wild.  Therefore perhaps the recommendation should be amended a little bit to read:  \"Always run with enough disk space so your indexes can double in size temporarily, unless you frequently perform reindexes without deleting all the index data first, in which case you should allow for the index to triple in size temporarily.\" ",
            "id": "comment-16153967"
        },
        {
            "date": "2018-02-19T19:17:48+0000",
            "author": "Nikolay Khitrin",
            "content": "Please take a look\u00a0at LUCENE-8178 patch, I've got up to 2 - 2.5x facetting performance boost on real index (35M docs) by\u00a0DocValues block unpacking and position lookup reducing. ",
            "id": "comment-16369433"
        }
    ]
}