{
    "id": "LUCENE-57",
    "title": "MultiSearcher does not work with MultiTermQuery or PrefixQuery",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The multiSearch class reuses Query objects. Unfortunately some Query sub-classes\ninitialize the search with terms from the index that they are first used on.\nThis means that subsequent uses on other indexes can result in missing hits.\n\nFor example subclasses of MultiTermQuery pre \"populate\" their terms from the\nfirst index. If this query is used again then the terms are not reset so the\nquery is in effect done over terms extracted from the 1st index and not the 2nd. \n\nSo the query\n\na*b\n\nwhen expanded using terms from the first index as\n\na1b a2b a3b\n\nand it is this query that is performed multiple times.\n\nIf a second index has the terms\n\na1b a2b a3b a4b a5b\n\nthen potential results are missing. The latter two terms are not considered in\nthe search.\n\nThis can easily be seen by \"reversing\" the order of Searcher objects in a\nMultiSearcher query. Different results can be displayed depending on the ordering.\n\nThe solution would be to allow queries to be \"reset\" - thus removing the cache\nterms objects.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--BrokenMulti.java": "https://issues.apache.org/jira/secure/attachment/12312201/ASF.LICENSE.NOT.GRANTED--BrokenMulti.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2002-09-18T06:12:15+0000",
            "content": "\nIt seems that Queries are reset using the \"prepare()\" method on a Query. However\nthe MultiTermQuery does not do this correctly. Its caches in the \n\nprivate BooleanQuery query;\n\nmember item the results of the terms generated from the index. This value is\nnever cleared in the prepare() method - hence further indexes are ignored.\n\nYou cannot create a prepare() method in MultiTermQuery since its subclasses\noverride \nthe method and provide there own implementation.\n\nThe solution I propose is to change setEnum in MultiTermQuery as follows:-\n\n    /** Set the TermEnum to be used */\n    protected void setEnum(FilteredTermEnum enum) \n{\n        this.enum = enum;\n\tthis.query = null;\n    }\n\nThis will clear the cache query out on each reset.\n\nI have tested this patch and it correctly produces the search results when using\nmultiple indexes. ",
            "author": "Andy Thomas",
            "id": "comment-12321133"
        },
        {
            "date": "2002-10-17T04:22:24+0000",
            "content": "I'd love to fix this if it is really a bug, but I can't duplicate this behaviour.\nCould you please attach a self-contained class that demonstrates this bug?\nThanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321134"
        },
        {
            "date": "2002-10-18T04:26:22+0000",
            "content": "Created an attachment (id=3507)\nSample class that shows the bug ",
            "author": "Andy Thomas",
            "id": "comment-12321135"
        },
        {
            "date": "2003-01-14T10:31:24+0000",
            "content": "Doug's today's commit indicates that this bug should now be fixed.  Marking this\nas fixed before I forget to do it.  Feel free to reopen if it is not. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321136"
        }
    ]
}