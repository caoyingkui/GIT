{
    "id": "LUCENE-7744",
    "title": "default value for scoring payloads",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "New Feature",
        "components": [
            "core/query/scoring"
        ],
        "fix_versions": [
            "7.2"
        ]
    },
    "description": "In lucene 5, PayloadTermQuery used a hardcoded default of 1.0 for terms without a payload. The replacing PayloadScoreQuery in lucene 6 just ignores those terms. This is unflexible and wrong for many use cases (for example using Payloads to deemphasize some terms, where terms without payload should result in maximum score instead of being ignored).\n\nIn my pull request I defer the decision on what to do with missing payloads to the scorePayload method of the similarity, which has to check the given payload for null and handle that case. I believe this breaks backwards compatibility?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15907452",
            "date": "2017-03-13T13:25:50+0000",
            "content": "GitHub user xabbu42 opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/167\n\n    LUCENE-7744\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/xabbu42/lucene-solr defaultpayload\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/167.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #167\n\n\ncommit fa0b3902b0cfe370bbbb259dca9b47723981bdb1\nAuthor: Nathan Gass <gass@search.ch>\nDate:   2017-03-13T13:17:34Z\n\n    let scorePayload provide a default for terms without payload\n\n ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16017156",
            "date": "2017-05-19T09:53:39+0000",
            "content": "Ping\n\nI still think adding some flexibility on how to handle tokens without payload would be helpful. I'm also willing to try to implement a different approach but I need some input on what the correct approach would be.\n\nOne possibility is to let the PayloadFunction also handle tokens without payload. This way could be completely backwards compatible and even more flexible.\n\nOn the other hand, I have seen code examples for scorePayload which test for null. So perhaps at one time this was possible, or there are other ways this function could be called with null even now.  ",
            "author": "Nathan Gass"
        },
        {
            "id": "comment-16017302",
            "date": "2017-05-19T11:59:55+0000",
            "content": "I haven't dug into this at all but from what you're saying, this change makes sense to me FWIW. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16017663",
            "date": "2017-05-19T17:02:24+0000",
            "content": "for example using Payloads to deemphasize some terms, where terms without payload should result in maximum score instead of being ignored\n\nCouldn't this be done by returning a payload score that is less than 1 for terms that have a payload? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16018373",
            "date": "2017-05-20T08:41:26+0000",
            "content": "Couldn't this be done by returning a payload score that is less than 1 for terms that have a payload?\n\nThe problem is not the downgraded token, but mixing downgraded and normal tokens without payloads. In lucene 5, the normal tokens got a value of 1.0. In lucene 6 it gets ignored. So using delimited_payload_filter in elasticsearch 5 and indexing 'foo|0.5 foo', a PayloadScoreQuery will use 0.5 as weight. In this use case and depending on the PayloadFunction 1.0 or 0.75 would be more appropriate. ",
            "author": "Nathan Gass"
        },
        {
            "id": "comment-16249477",
            "date": "2017-11-13T12:11:11+0000",
            "content": "Github user xabbu42 closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/167 ",
            "author": "ASF GitHub Bot"
        },
        {
            "id": "comment-16249494",
            "date": "2017-11-13T12:16:26+0000",
            "content": "With LUCENE-8038 you can provide your own default using the new PayloadDecoder interface. ",
            "author": "Nathan Gass"
        }
    ]
}