{
    "id": "LUCENE-8013",
    "title": "Test that SimScorer.computeSlopFactor doesn't increase as the distance goes up",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Task",
        "components": [],
        "fix_versions": []
    },
    "description": "We should ensure that computeSlopFactor is always (strictly) positive, equal to 1 when distance is 0, and doesn't increase when the distance goes up.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16219682",
            "date": "2017-10-25T22:36:47+0000",
            "content": "+1, the test would be simple.\n\nat the same time maybe we should reconsider this method: it is strange the phrase \"fuzziness\" is allowed here, but term fuzziness is not for example. We could just use 1/(N+1) in SloppyPhraseQuery and that's the end of it. BooleanSimilarity will still score the same way, since it returns 1 for score(adjustedFreq), so we don't have evidence for any use-case for an alternate implementation? \n\nI feel similar about scorePayload. If you want to score payloads, you must pass PayloadFunction logic to the payload-based query and write a custom similarity. So you have to split your custom logic across two places and the apis seem awkward because of that. So maybe additionally the scorePayload should be moved to PayloadFunction api so that its all in one place? Seems like we can potentially make it much better that way. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16220134",
            "date": "2017-10-26T08:17:51+0000",
            "content": "> So you have to split your custom logic across two places and the apis seem awkward because of that.\n\nAgreed, it always felt awkward to me too.\n\n+1 to get rid of compuleSlopFactor and computePayloadFactor ",
            "author": "Adrien Grand"
        }
    ]
}