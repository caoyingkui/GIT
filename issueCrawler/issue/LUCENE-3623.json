{
    "id": "LUCENE-3623",
    "title": "SegmentReader.getFieldNames ignores FieldOption.DOC_VALUES",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "we use this getFieldNames api in segmentmerger if we merge something that isn't a SegmentReader (e.g. FilterIndexReader)\n\nit looks to me that if you use a FilterIndexReader, call addIndexes(Reader...) the docvalues will be simply dropped.\n\nI dont think its enough to just note that the field has docvalues either right? We need to also set the type \ncorrectly in the merged field infos? This would imply that instead of FieldOption.DOCVALUES, we need to have a \nFieldOption for each ValueType so that we correctly update the type.\n\nBut looking at FI.update/setDocValues, it doesn't look like we 'type-promote' here anyway?",
    "attachments": {
        "LUCENE-3623.patch": "https://issues.apache.org/jira/secure/attachment/12506386/LUCENE-3623.patch",
        "LUCENE-3623_test.patch": "https://issues.apache.org/jira/secure/attachment/12506375/LUCENE-3623_test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-07T02:00:29+0000",
            "content": "attached is a basic test, calling addIndexes() with two SlowMultiReaderWrappers.\n\nthe docvalues fields are dropped.\n\nit would be good to also add a test doing addIndexes(FIR that returns null or non-SR leaves) that mixes the dv types to test the type promotion too.  ",
            "author": "Robert Muir",
            "id": "comment-13164064"
        },
        {
            "date": "2011-12-07T02:06:45+0000",
            "content": "also on a general note, i don't like how we don't test this addIndexes(FIR) stuff very well, and i don't like the FieldOption api \nthat it uses for this, its really just a duplicate of the FieldInfos api in my opinion.\n\nlong term I think we should:\n\n\tsomehow test this better by doing addIndexes(SlowMultiReaderWrapper(segment), ...) behind the scenes in RandomIndexWriter?\n\tmaybe in 4.0 try to clean up FieldInfos and have IR return it, nuking this FieldOption API so that we dont have \"two different ways we merge\" ?\n\n ",
            "author": "Robert Muir",
            "id": "comment-13164068"
        },
        {
            "date": "2011-12-07T03:06:12+0000",
            "content": "here's a hack patch (don't think its committable) fixing the bug.\n\ni also modified TestTypePromotion to sometimes do addIndexes with SlowMR, and its passing.\n\nBut i'm still left confused as to how or if fieldinfos is correct in this type-promotion case (who sets it to the new merged type?) ",
            "author": "Robert Muir",
            "id": "comment-13164101"
        },
        {
            "date": "2011-12-07T03:11:06+0000",
            "content": "\nmaybe in 4.0 try to clean up FieldInfos and have IR return it, nuking this FieldOption API so that we dont have \"two different ways we merge\" ?\n\nI feel in the long term this is the best way to go.  FieldOption just feels like another way to describe field properties and we already have a few of those. ",
            "author": "Chris Male",
            "id": "comment-13164105"
        },
        {
            "date": "2011-12-07T03:42:10+0000",
            "content": "patch: cleaning up and removing the nocommit.\n\nI see whats going on now, IDV as a side effect when merging changes the fieldinfo if necessary... this was what I was missing before.\n\nI think this has to do with how merging/type promotion works in IDV, it seems type promotion is \"extendable\" by the codec, but I'm not sure it should be: I think it should be part of the abstract API and well-defined. But thats refactoring/discussion for another issue, for now I'd like to commit this to fix the dataloss/bug.\n\nI'll commit tomorrow if there are no objections. ",
            "author": "Robert Muir",
            "id": "comment-13164117"
        },
        {
            "date": "2011-12-07T05:03:38+0000",
            "content": "just s/PreFlex/Lucene3x for the addIndexes test.\n\nswapping in SlowMultiReaderWrapper to TestTypePromotion found another bug:\n\nant test -Dtestcase=TestTypePromotion -Dtestmethod=testSortedPromoteBytes -Dtests.seed=-24103e6738f06f67:38ea1a30b9f51fea:224bf9f223d1a4c6 -Dargs=\"-Dfile.encoding=UTF-8\"\n\nDon't know whats going on here. ",
            "author": "Robert Muir",
            "id": "comment-13164152"
        },
        {
            "date": "2011-12-07T11:38:03+0000",
            "content": "swapping in SlowMultiReaderWrapper to TestTypePromotion found another bug:\nthat is because SMRW returns MultiSource which doesn't support asSortedSource() maybe we should throw an exception here? ",
            "author": "Simon Willnauer",
            "id": "comment-13164334"
        },
        {
            "date": "2011-12-07T11:47:10+0000",
            "content": "+1, at a glance it wasn't obvious to me what caused the NPE.\n\nSo a clear exception would be a big improvement. ",
            "author": "Robert Muir",
            "id": "comment-13164335"
        },
        {
            "date": "2011-12-07T12:09:37+0000",
            "content": "MultiSource should just override asSortedSource() and throw an unsupportedOperationException. ",
            "author": "Simon Willnauer",
            "id": "comment-13164347"
        },
        {
            "date": "2011-12-07T12:21:22+0000",
            "content": "I committed this to trunk, and opened an issue for the Multi SortedSource stuff. ",
            "author": "Robert Muir",
            "id": "comment-13164351"
        },
        {
            "date": "2011-12-07T14:30:00+0000",
            "content": "MultiSource should just override asSortedSource() and throw an unsupportedOperationException.\n\nThis means you cannot use PKIndexSplitter and MultiPassIndexSplitter with docValues? We should open another issue to make it work per-segment (by implementing a per-segment FilteredReader), which is possible. Currently it wraps the source index by a SlowMultiReaderWrapper. ",
            "author": "Uwe Schindler",
            "id": "comment-13164421"
        },
        {
            "date": "2011-12-07T14:34:52+0000",
            "content": "\nThis means you cannot use PKIndexSplitter and MultiPassIndexSplitter with docValues?\n\nNot totally, since this commit most docvalues will work for those cases, just not the SORTED_BYTES variants. ",
            "author": "Robert Muir",
            "id": "comment-13164426"
        }
    ]
}