{
    "id": "LUCENE-4643",
    "title": "PackedInts: convenience classes to write blocks of packed ints",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "It is often useful to divide a packed stream into fixed blocks which are all compressed independently:\n\n\tif your sequence of ints is very large, you won't have to buffer everything into memory to compute the required number of bits per value,\n\tthe compression ratio will be better in case of rare extreme values.\n\n\n\nThe only drawback compared to the original PackedInts API is that the stream cannot be directly used to deserialize a random-access PackedInts.Reader (but for sequential access, this is just fine).",
    "attachments": {
        "LUCENE-4643.patch": "https://issues.apache.org/jira/secure/attachment/12562087/LUCENE-4643.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-21T15:33:49+0000",
            "content": "Patch. This should be useful for LUCENE-4609 and LUCENE-4599, what do you think? ",
            "author": "Adrien Grand",
            "id": "comment-13538136"
        },
        {
            "date": "2012-12-21T15:41:21+0000",
            "content": "Does it really need negative value support explicitly? If someone wants this, they can zig-zag encode a level above right? ",
            "author": "Robert Muir",
            "id": "comment-13538147"
        },
        {
            "date": "2012-12-21T16:33:43+0000",
            "content": "Good point. I removed zig-zag encoding and modified the javadocs to say these classes only support positive values. ",
            "author": "Adrien Grand",
            "id": "comment-13538191"
        },
        {
            "date": "2013-01-07T16:11:11+0000",
            "content": "I made some tests with my compressed TermVectorsFormat and the problem is that it sometimes wastes space. For example if all values from a block are between -1 and 6, the first patch would require 3 bits whereas the 2nd one + zig-zag encoding a level above would require 4 bits per value so I think I should rather commit the first patch?\n ",
            "author": "Adrien Grand",
            "id": "comment-13545995"
        },
        {
            "date": "2013-01-07T16:22:35+0000",
            "content": "I'm confused how the baked-in zig-zag in the first patch is more efficient.\n\nactually i'm confused why we need it at all, since we are writing only positive numbers (deltas from minValue, which itself is the only one that need be negative). ",
            "author": "Robert Muir",
            "id": "comment-13546007"
        },
        {
            "date": "2013-01-07T16:39:09+0000",
            "content": "actually i'm confused why we need it at all, since we are writing only positive numbers (deltas from minValue, which itself is the only one that need be negative).\n\nOh! I think we misunderstood. The first patch uses zig-zag encoding for minValue only and the 2nd patch requires people to zig-zag encode before feeding the writer. ",
            "author": "Adrien Grand",
            "id": "comment-13546017"
        },
        {
            "date": "2013-01-07T16:48:34+0000",
            "content": "You are right. Hmm I'm not sure i get it for minValue only either. \n\ndo we have any free bits in the 'token' header? Can we just use one as a the sign bit? then we could just use a simple vlong. ",
            "author": "Robert Muir",
            "id": "comment-13546026"
        },
        {
            "date": "2013-01-07T17:01:58+0000",
            "content": "All bits are currently used (one to say whether the minValue is 0 or not and 7 for the number of bitsPerValue (0 <= bpv <= 64, 0 means all values equal, similarly to the block PF). But maybe we could:\n 1. add a constructor argument to say that all values are positive, and it won't zig-zag encode,\n 2. or disable either the 0 or the 64 bits per value cases and add a sign bit?\n\nI think the first option is better? ",
            "author": "Adrien Grand",
            "id": "comment-13546038"
        },
        {
            "date": "2013-01-07T17:07:56+0000",
            "content": "Well i guess my main concern is to double minValue for the \"normal\" cases just because of the silliness in termvectors.\nIsn't the rest of packedints really geared at positives too?\n\nDoes things like facets need (LUCENE-4609) need negative values?\nAnd we know the postings doesnt (it would be nice but i guess not necessary if we refactored blockPF's encoding here).\n\nI guess i feel like its good enough to mark in a termvectors block as a bit if any of the values are negative, in which case its used zig-zag on top.\n\nI dont understand why we should really optimize of the case of vectors where you have all values between -1 and 6, because\nreally it means you have a broken analyzer: it likely wont highlight correctly and so on anyway. ",
            "author": "Robert Muir",
            "id": "comment-13546043"
        },
        {
            "date": "2013-01-07T17:18:31+0000",
            "content": "just because of the silliness in termvectors\n\nActually, the ability to block-encode negative values can be useful for other use-cases, for example to encode the difference from an expected value (for example you can compute an expected offset from the position and the average number of chars per term).\n\nAn other thing to know is that if all values are positive, minValue is likely to be 0. For example, let's say the actual min is 200 and the max is 2000. Given that encoding the [0-2000] range requires as many bits per value as encoding the [200-2000] range, I set minValue=0. This will require only one bit in the token instead of two bytes (a VInt >= 2^7) for the minimum. So in the end, even if one bit is wasted for the minimum value because of zig-zag encoding, this is not too bad. ",
            "author": "Adrien Grand",
            "id": "comment-13546051"
        },
        {
            "date": "2013-01-07T17:58:54+0000",
            "content": "You're right: I forgot about the \"real use-cases\". The stuff like we used in stored fields would be really really nice to factor out somehow,\nI'd like to investigate its use for docvalues variable-length byte[] for example too.\n\n\nAn other thing to know is that if all values are positive, minValue is likely to be 0. For example, let's say the actual min is 200 and the max is 2000. Given that encoding the [0-2000] range requires as many bits per value as encoding the [200-2000] range, I set minValue=0. This will require only one bit in the token instead of two bytes (a VInt >= 2^7) for the minimum. So in the end, even if one bit is wasted for the minimum value because of zig-zag encoding, this is not too bad.\n\nOk, this makes sense. +1  ",
            "author": "Robert Muir",
            "id": "comment-13546096"
        },
        {
            "date": "2013-01-08T11:18:16+0000",
            "content": "[trunk commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1430210\n\nLUCENE-4643: New API to read/write fixed-size blocks of packed ints.\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13546793"
        },
        {
            "date": "2013-01-08T12:14:16+0000",
            "content": "[branch_4x commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1430218\n\nLUCENE-4643: New API to read/write fixed-size blocks of packed ints (merged from r1430210).\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13546823"
        }
    ]
}