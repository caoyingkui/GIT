{
    "id": "LUCENE-428",
    "title": "setPhraseSlop return the same results irrespective of int parameter",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "Please help me for my requirement to have a similiar word search functionality \nusing Lucene.\n\nRead about slop in Lucene FAQ [Is there a way to use a proximity operator (like \nnear or within) with Lucene?] and tried to implement the same.\n\nCalling setPhraseSlop on QueryParser class gives me the same results with \ndifferent querytext values(querytext 1:\"Anil Dhotre\", querytext 2: \"Dhotre \nAnil\"). \n\nThe result of search is always hit count equals to 1. Correct result should \ngive me hit count 0 when i give querytext \"Dhotre Anil\" with the 0 slop value \nof QueryParser.\n\nFollowing is code snippet.\n\nQueryParser queryParser = new QueryParser(\"default\", DEFAULT_ANALYZER);\nqueryParser.setPhraseSlop(0);\nSystem.out.println(\"Slop : \" + queryParser.getPhraseSlop());\nQuery query = queryParser.parse(\"Anil Dhotre\",\"data\",DEFAULT_ANALYZER) ;\nHits hits = searcher.search(query);\n\nNote: index includes \"Anil Dhotre\" as part of indexed data.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2005-08-22T18:46:21+0000",
            "content": "What does the generated query.toString() output?   \n\nIt is best if you bring this discussion to the java-user e-mail list rather than have a discussion here. ",
            "author": "Erik Hatcher",
            "id": "comment-12322571"
        },
        {
            "date": "2005-08-23T02:43:52+0000",
            "content": "You call queryparser.setPhraseSlop but then use the static parse method. That  \nwon't work, at least not as expected    \n ",
            "author": "Daniel Naber",
            "id": "comment-12322572"
        },
        {
            "date": "2005-08-23T04:52:54+0000",
            "content": "Daniel - great catch!  I was looking for it and missed it.  arg - that static method is nothing but trouble! ",
            "author": "Erik Hatcher",
            "id": "comment-12322573"
        },
        {
            "date": "2005-08-23T17:25:47+0000",
            "content": "Thanks. Now got the results as expected. \n\nI would'nt have logged this bug  if this special behaviour of static parse \nmethod is mentioned in Lucene API docs. ",
            "author": "Anil Dhotre",
            "id": "comment-12322574"
        },
        {
            "date": "2005-08-23T17:54:21+0000",
            "content": "However, all modern IDE's (Eclipse, IntelliJ) and perhaps even the javac compiler itself  warns of calling \nstatic methods from an instance variable.  Doing so is considered risky for the very reasons you've \nexperienced. ",
            "author": "Erik Hatcher",
            "id": "comment-12322575"
        }
    ]
}