{
    "id": "SOLR-9689",
    "title": "Process updates concurrently during PeerSync",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "This came up during discussion with Shalin Shekhar Mangar\n\nDuring PeerSync, updates are applied one a time by looping through the updates received from the leader. This is slow and could keep node in recovery for a long time if number of updates to apply were large. \n\nWe can apply updates concurrently, this should be no different than what could happen during normal indexing (we can't really ensure that a replica will process updates in the same order as the leader or other replicas).\n\nThere are few corner cases around dbq we should be careful about.",
    "attachments": {
        "SOLR-9689.patch2": "https://issues.apache.org/jira/secure/attachment/12837291/SOLR-9689.patch2",
        "parallelize-peersync.patch": "https://issues.apache.org/jira/secure/attachment/12839041/parallelize-peersync.patch",
        "SOLR-9689.patch": "https://issues.apache.org/jira/secure/attachment/12835029/SOLR-9689.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-24T22:28:43+0000",
            "author": "Pushkar Raste",
            "content": "POC for applying updates concurrently. \nPlease review it and let me know if there are gaping issues. \n\nI would also appreciate any suggestions to handle out of order DBQ (I think by default we keep a few DBQs around to account for out of order upates), may be we can increase the number of DBQs we keep around if DBQs have PEER_SYNC flag set on it. ",
            "id": "comment-15603424"
        },
        {
            "date": "2016-11-04T21:29:43+0000",
            "author": "Pushkar Raste",
            "content": "A new patch with configurable threshold for parallelism   ",
            "id": "comment-15637750"
        },
        {
            "date": "2016-11-06T11:44:49+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "In SOLR-5944, tlog entries can either be partial or full updates. Partial updates would require that a corresponding full update be applied before it can be applied. With concurrent processing of the updates during PeerSync, we need to be very careful about DBQs in such a scenario. One way to deal with that is to make sure that a DBQ is applied after all previous updates (updates with version lesser than the DBQ update's version) have been applied, and no newer update is applied until the DBQ has been applied. ",
            "id": "comment-15641659"
        },
        {
            "date": "2016-11-06T12:28:39+0000",
            "author": "Pushkar Raste",
            "content": "Ishan Chattopadhyaya - \n\n\n\tEven for normal operations, updates for the leader can arrive at the replica in a different order and we already have a way to handle it.  We currently store 100 DBQs, to handle reordered updates. If reordered DBQs are detected, DBQs are applied along with a add, https://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/update/DirectUpdateHandler2.java#L201\n\n\n\n\n\tI think even for partial updates, corresponding full update is stored in the tlog. I don't think tlog ever stores partial updates like inc value of a field or set value of a field. It always contains entire document with updated values.\n\n\n\n\n\tI am creating a batch of only 100 updates and only 100 updates in the batch will be applied concurrently. I don't think there will be any issues. We can make size of  DBQ list in the DirectUpdateHandler2 configurable as well\n\n ",
            "id": "comment-15641712"
        },
        {
            "date": "2016-11-15T20:23:11+0000",
            "author": "Pushkar Raste",
            "content": "Attached working patch. \nFor my tests I didn't see much improvement (in fact in some cases performance degraded) with parallelization. I could not find any hotspot in the profile.\n\nMy theory is documents in test are so shorts and simple, that although parallelizing is working functionally, we need to test this with more complex documents and verify performance gains. \n\nMost of the parallelization parameters would be subjective and people need to verify which ones work better for them.\n\nIt also seems performance would suffer if there are relatively high DBQs to  applied during DBQs, since updates are applied out of order. ",
            "id": "comment-15668184"
        }
    ]
}