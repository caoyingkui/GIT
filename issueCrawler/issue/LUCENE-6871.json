{
    "id": "LUCENE-6871",
    "title": "Move SpanQueries out of .spans package",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.4,                                            6.0",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "SpanQueries are now essentially the same as a standard query, restricted to a single field and with an extra scorer type returned by getSpans().  There are a number of existing queries that fit this contract, including TermQuery and PhraseQuery, and it should be possible to make them SpanQueries as well without impacting their existing performance.  However, we can't do this while SpanQuery and its associated Weight and Spans classes are in their own package.\n\nI'd like to remove the o.a.l.search.spans package entirely, in a few stages:\n1) Move SpanQuery, SpanWeight, Spans, SpanCollector and FilterSpans to o.a.l.search\n2) Remove SpanTermQuery and merge its functionality into TermQuery\n3) Move SpanNear, SpanNot, SpanOr and SpanMultiTermQueryWrapper to o.a.l.search\n4) Move the remaining SpanQueries to the queries package\n\nThen we can look at, eg, making PhraseQuery a SpanQuery, removing SpanMTQWrapper and making MultiTermQuery a SpanQuery, etc.",
    "attachments": {
        "LUCENE-6871.patch": "https://issues.apache.org/jira/secure/attachment/12769756/LUCENE-6871.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14982365",
            "author": "Alan Woodward",
            "date": "2015-10-30T11:03:59+0000",
            "content": "Here is a patch for stage 1 "
        },
        {
            "id": "comment-14983058",
            "author": "Adrien Grand",
            "date": "2015-10-30T18:46:21+0000",
            "content": "What are your plans for stage 2: would Weights have to take a Map<Term, TermContext> like SpanWeight requires, as well as a new extractTermContexts method?  "
        },
        {
            "id": "comment-14983133",
            "author": "Alan Woodward",
            "date": "2015-10-30T19:27:57+0000",
            "content": "Only those Weights associated with Span-like queries, so eg TermWeight and PhraseWeight would need to be modified to do that, but BooleanWeight could stay as it is. "
        },
        {
            "id": "comment-14985800",
            "author": "Adrien Grand",
            "date": "2015-11-02T19:11:33+0000",
            "content": "I like the idea to reconcile regular queries and span queries, but on the other hand I'm slightly concerned that we could be bitten in the long term by some inconsistencies. For instance boosts on span queries only make sense on the top-level query (if I'm not mistaken). So if we start merging queries, we need to make sure that eg. Query.rewrite would not break scores. For instance it would be tempting to rewrite a SpanNearQuery to the underlying query if there is a single wrapped query. But if this underlying query has a boost that is different from 1f, this will produce different scores than the original SpanNearQuery would have produced. This is one issue I can think of but maybe there are more? "
        },
        {
            "id": "comment-14985824",
            "author": "Robert Muir",
            "date": "2015-11-02T19:15:53+0000",
            "content": "Spans now have a more sane Scorer infra, but are they really comparable with regular queries?\n\nI still wonder about an impedance mismatch, that conceptually (even if implemented more efficiently, to the user at least) spans iterate \"positions\" and other queries iterate \"documents\". For example \"boolean like\" operations mean a different thing to spans versus other queries. "
        },
        {
            "id": "comment-14986069",
            "author": "Alan Woodward",
            "date": "2015-11-02T21:14:59+0000",
            "content": "The idea is that SpanQueries become just like normal queries, but that they can return a special type of Scorer (the Spans) in addition to their normal Scorer, allowing them to be nested.  Maybe it would be a bit clearer if I put up a patch with the changes to TermQuery?\n\nI can see the concern with Boosting, but that's dealt with at the moment by requiring that SpanNear must take at least two child queries.  Although it would be nice to enforce this via the compiler rather than at runtime. "
        },
        {
            "id": "comment-14986292",
            "author": "Robert Muir",
            "date": "2015-11-02T23:43:02+0000",
            "content": "I am still not really thinking about implementation, just basic stuff like BooleanQuery(MUST_NOT) is different than SpanNot... the two things have kind of a different algebra to the user, since one works on documents and the other works on ranges of positions. "
        },
        {
            "id": "comment-14987031",
            "author": "Alan Woodward",
            "date": "2015-11-03T10:25:03+0000",
            "content": "Right, but SpanNot and SpanOr will still be separate queries from BooleanQuery.  Moving packages just means that some queries (like Term and Phrase) that can conceptually be both a standard query and a span query can actually be that. "
        },
        {
            "id": "comment-15210822",
            "author": "Alan Woodward",
            "date": "2016-03-24T19:27:00+0000",
            "content": "Here's an updated patch that just moves everything out of the .spans package into oal.search.  I think this is worth doing before 6.0?  It would also allow us to make package-private a bunch of classes in oal.search that are currently public but marked as internal, just because they're used by Spans.\n\nMerging SpanTermQuery and TermQuery, etc, can be looked at in follow up issues. "
        },
        {
            "id": "comment-15211471",
            "author": "Robert Muir",
            "date": "2016-03-25T06:08:26+0000",
            "content": "Besides the impedence mismatch (working on ranges of positions versus documents), i still see the spans as being pretty sandy. Really they belong in the sandbox \n\nThey've got crazy apis, inefficient apis, straight up ugly apis, and even whole span queries that probably should not exist (FieldMasking). I don't think we should mix them in with our core queries like TermQuery at the moment? But that's just me.\n "
        },
        {
            "id": "comment-15211614",
            "author": "Michael McCandless",
            "date": "2016-03-25T08:58:01+0000",
            "content": "Maybe we could move all span queries to Lucene's queries module? "
        },
        {
            "id": "comment-15211683",
            "author": "Alan Woodward",
            "date": "2016-03-25T10:33:39+0000",
            "content": "The problem with moving them to queries (or sandbox!) is that there are a whole bunch of classes in oal.search like ConjunctionDISI or DisiPriorityQueue that ought to be package-private, but can't be because they're used by the Spans classes.\n\nThey're much more efficient than they were, and I don't think the public APIs are particularly bad?  For the vast majority of users, you use a SpanQuery much as you would use any other query.  And the impedance mismatch I think can be dealt with some better naming?  eg SpanNotQuery could be a NonOverlappingSpanQuery instead. "
        },
        {
            "id": "comment-15211687",
            "author": "Paul Elschot",
            "date": "2016-03-25T10:42:49+0000",
            "content": "Perhaps the java 9 modules are a better way to solve the problem here.\nAs far as I understand these will allow for packages that are not visible outside a module, so we could use invisible packages for the current @lucene.internal code.\nThat also means we could have more packages instead of less.\n\nThere is a duplicate package private method termPositionsCost in SpanTermQuery and PhraseQuery, only a single one would be needed when this is resolved. The patch is so large that I did not check whether an \"unduplication\" is already in there.\n\nThe patch could be a lot smaller if git had an option for a file move in a patch. Does that exist?\n\nAt the moment these core tests on the master branch fail:\n\nant test -Dtestcase=*search.*\n\nTests with failures [seed: 37A276DFB0A942FC]:\n  - org.apache.lucene.search.ElevationComparatorSource.initializationError\n  - org.apache.lucene.search.ElevationComparatorSource.initializationError\n  - org.apache.lucene.search.JustCompileSearch.initializationError\n  - org.apache.lucene.search.JustCompileSearch.initializationError\n  - org.apache.lucene.search.MultiThreadTermVectorsReader.initializationError\n  - org.apache.lucene.search.MultiThreadTermVectorsReader.initializationError\n\n\nJVM J0:     0.42 ..    37.74 =    37.32s\nJVM J1:     0.42 ..    37.82 =    37.40s\nJVM J2:     0.41 ..    37.92 =    37.51s\nJVM J3:     0.42 ..    37.59 =    37.17s\nExecution time total: 37 seconds\nTests summary: 124 suites, 1077 tests, 6 errors, 6 ignored (5 assumptions)\n\n\nThe tests fail in the same way with the patch applied.\nShould these test failures be dealt with at another issue?\n\nHere java -version sais build 1.8.0_74-b02, is that a good one for now? "
        }
    ]
}