{
    "id": "SOLR-8272",
    "title": "Allow user to specify actions allowed for each field",
    "details": {
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Some actions can be very expensive for some specific fields. For example, in my test, a facet query on a text field blow up a few servers in minutes. The reason is probably Solr does 'uninversion' on this field for facet which uses large amount of field cache. Several Solr servers in turn go into back to back full GC cycles and eventually OOM. To prevent scenarios like this, it's useful to add an option to allow user to decide if some action is allowed for a specific field, particularly for actions using field cache.\n\nThere are two ways to design the switch. It can be either for specific action, such as facet, statistic, sorting or for a group of actions, such as all actions doing 'uninversion'.\n\nSome more details about my test. It is a 33-node Solr cluster There is one collection on HDFS with 2.6 billion documents in 30 shards.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-10T19:15:33+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Why would this be in a Solr layer? Sounds like a business logic in whatever you are running between the Solr and the client.  ",
            "id": "comment-14999147"
        },
        {
            "date": "2015-11-10T20:17:10+0000",
            "author": "Hoss Man",
            "content": "While i generally agree with Alexandre, and i think that the current scope of this issue is too broad to be practical (there are a huge number of ways to define an \"action\" on a field just in solr core - let alone the multitude of ways someone might use a field in a plugin ... infeasible to try to enumarate them in the schema) I do think the specific case of requiring explicit permission to Uninvert an indexed field makes sense.\n\nI thought i had already opened a specific issue for that already, but since i couldn't find one i put my thoughts in SOLR-8273 ",
            "id": "comment-14999265"
        },
        {
            "date": "2015-11-10T20:58:42+0000",
            "author": "Michael Sun",
            "content": "Alexandre Rafalovitch Solr is better in enforcing this. If this logic is not in Solr and there are multiple micro services talking to Solr which is a common case, this logic has to be implemented in each micro service which is redundant. ",
            "id": "comment-14999344"
        },
        {
            "date": "2015-11-10T21:17:10+0000",
            "author": "Alexandre Rafalovitch",
            "content": "common case (citation?).\n\nBut just theoretically, this might be possible by doing a custom SearchComponent. By that point some (all?) of the variables and defaults and overrides are resolved (I believe), so it might be a good place to check. \n\nI don't know what happens with local params and variables, etc. There might still be a way to trick its way past the sentinel. But then again, this implies that the client will want to trick the sentinel, which is the whole reason I am finding this request slightly confusing. ",
            "id": "comment-14999362"
        },
        {
            "date": "2015-11-10T21:59:42+0000",
            "author": "Michael Sun",
            "content": "But just theoretically, this might be possible by doing a custom SearchComponent\n\nAny idea to implement is welcome. \n\n\n ",
            "id": "comment-14999416"
        },
        {
            "date": "2015-11-10T22:11:13+0000",
            "author": "Michael Sun",
            "content": "Hoss Man SOLR-8273 is another good way to solve the memory issue mentioned in JIRA. Thanks for good suggestion.  ",
            "id": "comment-14999437"
        },
        {
            "date": "2015-11-10T22:11:59+0000",
            "author": "Alexandre Rafalovitch",
            "content": "A prepare method is a good one. Though I would probably put it in a stack after QueryComponent, looking at its source it is doing some expanding.\n\nAnd prepare method is run before the actual work is being done, so it is a good time to reject it with an exception. I assume that stops the flow then and you don't care how angry you make the client if you stop them from a disallowed operation.\n\nA quick test would be a custom component just cloning something basic from SearchComponent implementors: http://www.solr-start.com/javadoc/solr-lucene/org/apache/solr/handler/component/SearchComponent.html\n\nThen, you put a log statement to dump out the variables in the Request Object. Perhaps combined with the kind of queries you are trying to stop. ",
            "id": "comment-14999439"
        },
        {
            "date": "2015-11-10T22:49:33+0000",
            "author": "Gregory Chanan",
            "content": "Alexandre Rafalovitch Solr is better in enforcing this. If this logic is not in Solr and there are multiple micro services talking to Solr which is a common case, this logic has to be implemented in each micro service which is redundant.\n\nI think this is a little narrow in scope \u2013 it doesn't matter the size of the services \u2013 what matters is multi tenancy. ",
            "id": "comment-14999505"
        }
    ]
}