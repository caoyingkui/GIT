{
    "id": "SOLR-3688",
    "title": "Spellchecker or JSONTestUtil has a bug with Java 8 (or possibly Java 7u6+) - randomly failing spellchecker test",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-BETA"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The Java 8 builds of trunk and branch4x fail >50% of all times with:\n\n\njava.lang.RuntimeException: mismatch: '0'!='2' @ spellcheck/suggestions/bar/startOffset\n\tat __randomizedtesting.SeedInfo.seed([9B1635CDE22895EA:5C18C165EA4480A2]:0)\n\tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:573)\n\tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:521)\n\tat org.apache.solr.handler.component.SpellCheckComponentTest.testPerDictionary(SpellCheckComponentTest.java:102)\n\n\n\nI am scared by JSONTestUtil so I have no idea what causes this. As a lot of other JSON-related things were buggy with Java 8, I think this has same cause. The JSONTestUtil seems to depend on the order of some HashMap/HashSet created by noggit. The order of hashed collections changed in Java 8 in an incompatible way. Later versions of Java 7 (u6+) will do the same with larger collections:\n\n\nFrom: Mike Duigou <mike.duigou@oracle.com>\nDate: Sat, Jul 14, 2012 at 1:09 AM\nSubject: Update on alternative hashing for String keys with hash-based Maps\nTo: core-libs-dev Libs <core-libs-dev@openjdk.java.net>, jdk7u-dev@openjdk.java.net\n\n\nHello all;\n\nAbout a month ago a significant change was made to the Java SE 7 and 8 hash based Map implementations. This change was previously proposed and discussed on this list[1]. The change affects all of the hashing based Map implementations (HashMap, Hashtable, WeakHashMap, LinkedHashMap, ConcurrentHashMap), the derived Set implementations (HashSet, LinkedHashSet,\netc.) and other classes which depend upon these classes (Properties, UIDefaults). The change to hash based Maps improves performance when a large number of key hash code collisions are encountered. This is accomplished by altering the handling of String keys to use a different (better) hash function.\n\nAs initially proposed, the alternative hashing behaviour was planned to apply to all hash based Maps larger than 512 elements. Smaller maps would continue to use the existing hashing approach.\nConcurrentHashMap, because reasons related to the complexity of it's implementation, would always use the improved approach regardless of map capacity. Providing capacity based triggering of the alternative hashing is intended to improve compatibility by ensuring that the order in which elements are iterated does not change. Specifically, at less than the threshold capacity Map elements will be iterated in the same order as today.\nAt or above the threshold, the iteration order will be different than the current order. Testing and evaluation of existing Java applications has shown us that some applications have explicit or implicit dependence upon the order that keys, values or entries will be iterated. The vast majority of iteration order dependent cases involve small maps--once a map contains hundreds of elements generally incorrect assumptions about iteration order will have already been found and resolved. We believed that triggering the alternative hashing behaviour at 512 element capacity would protect iteration order in cases which depended upon the existing iteration order.\nJava SE 7 and Java SE 8 have different policies. Java SE 8 is intended to always use alternative hashing of String keys regardless of the capacity of the Map.\n\nAfter  integration a number of cases of iteration order dependence were encountered within the OpenJDK code itself, in tests and in user code. Some of these faults were easily diagnosed and correct. Some other cases, because iteration order is not consistent from run-to-run under alternative hashing, proved difficult to isolate and resolve.\n\nFollowing this testing and and consultation with Java licensees and developers it was decided disable the alternative hashing behaviour for Java SE 7.  To ensure the greatest degree of compatibility with existing applications it seems best to only enable alternative hashing by explicit control. In Java SE 7u6 it will be necessary to set the system property jdk.map.althashing.threshold in order to enable alternative hashing. It is also still possible that the feature may be enabled by default in future Java SE 7 releases but this will only happen if further testing indicates compatibility can be reasonably assured.\n\nBecause Java 8 is unreleased and we still wish to shake out iteration order dependencies alternative hashing remains enabled in Java SE 8.\nAlternative hashing is very likely to be enabled by default in Java SE 8.\nDoug Lea has been investigating further improvements to handling of key hash code collisions and his design is extremely likely to be the basis for all Java SE 8 hash based Map implementations.[2]\n\nDevelopers and deployers are strongly encouraged to test their applications by enabling the alternative String key hashing feature in Java SE 7u6 or later and/or testing with Java SE 8 builds. BE WARNED:\nit will probably not be possible to disable alternative hashing in Java SE 8. Applications MUST remove dependencies upon iteration order before they can be deployed with Java SE 8.\n\nThanks,\n\nMike\n\nTL;DR:\n\n\tJava SE 7 and 8 both now support alternative hashing for String keys with hash based Maps\n\tAlternative hashing improves performance when many String key hash codes collide\n\tAlternative hashing impacts key, value and element iteration order\n\tAlternative hashing is currently DISABLED by default for Java SE 7\n\tFuture Java SE 7 releases may enable alternative hashing for \"large\"\n(>512 capacity) maps\n\tDevelopers can enable the eature in Java SE 7 for testing and deployment with a system property\n\tAlternative hashing is ENABLED for all maps in Java SE 8\n\tIt will probably not be possible to disable alternative hashing in Java SE\n8\n\tHash map key, value and element iteration order WILL be different and unpredictable in Java SE 8\n\tDifferent implementation approaches are still being investigated for Java SE 8 and remain subject to change\n\n\n\n[1] http://mail.openjdk.java.net/pipermail/core-libs-dev/2012-May/010238.html\n[2] http://cs.oswego.edu/pipermail/concurrency-interest/2012-June/009505.html\n\nIf this is not the case, spellchecker has a problem with Java 8.\n\nThere is nothing I am able to do because of the complexity of this test framework for JSON, but I really would like to fix this bug! So please: Somebody please, please, please give me a hint, I can then try to provide a patch!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13424544",
            "date": "2012-07-29T13:29:44+0000",
            "content": "I disabled the failing test in trunk and 4.x! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13424612",
            "date": "2012-07-29T19:34:26+0000",
            "content": "The JSONTestUtil seems to depend on the order of some HashMap/HashSet\n\nReally?  Can you point to where so it can be fixed? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13424615",
            "date": "2012-07-29T19:42:16+0000",
            "content": "Really? Can you point to where so it can be fixed?\n\nPlease read the full issue description. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13424616",
            "date": "2012-07-29T20:03:45+0000",
            "content": "Please read the full issue description.\n\nThank you... that's a very helpful response.\nI guess I was responding to the part where you thought this was a noggit problem or a JSONTestUtil problem.  But perhaps I should have been paying attention to when you say \"I have no idea what causes this\" instead.\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13424618",
            "date": "2012-07-29T20:17:18+0000",
            "content": "Sorry for being imprecise. I still think this has something to do with hashing order. I thought JSONTestUtil is maybe the problem - because the follwoing: From all tests in this suite, only this test returns a JSON result with 2 entries, all others (and most tests in Solr) return only one. Also the difference here looks exactly like a wrong order issue, because the error message sees the value from one result row, but expects the value from the other.\n\nOf course this can be something in SpellChecker itsself. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13424620",
            "date": "2012-07-29T20:26:34+0000",
            "content": "The test is asserting that the startOffset for suggestion \"bar\" is \"0\", while the response clearly shows it as \"2\".  So this looks like a bad test or a bug in the spellcheck/suggest component.\n\nFrom the log file:\n\n5736 T165 oas.SolrTestCaseJ4.assertJQ SEVERE query failed JSON validation. error=mismatch: '0'!='2' @ spellcheck/suggestions/bar/startOffset\n\t expected =/spellcheck/suggestions/bar=={\"numFound\":1, \"startOffset\":0, \"endOffset\":1, \"suggestion\":[\"foo\"]}\n\t response = {\n\t  \"responseHeader\":{\n\t    \"status\":0,\n\t    \"QTime\":0},\n\t  \"command\":\"build\",\n\t  \"response\":{\"numFound\":0,\"start\":0,\"docs\":[]\n\t  },\n\t  \"spellcheck\":{\n\t    \"suggestions\":{\n\t      \"foo\":{\n\t        \"numFound\":1,\n\t        \"startOffset\":0,\n\t        \"endOffset\":1,\n\t        \"suggestion\":[\"bar\"]},\n\t      \"bar\":{\n\t        \"numFound\":1,\n\t        \"startOffset\":2,\n\t        \"endOffset\":3,\n\t        \"suggestion\":[\"foo\"]}}}}\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13424948",
            "date": "2012-07-30T16:09:07+0000",
            "content": "The issue was a test bug in DummyCustomParamSpellChecker that iterated over map parameters and generated dummy startOffset/endOffset numbers from the param order.\n\nhttp://svn.apache.org/viewvc?view=revision&revision=1367125 "
        }
    ]
}