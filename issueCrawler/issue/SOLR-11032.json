{
    "id": "SOLR-11032",
    "title": "Update solrj tutorial",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "documentation",
            "SolrJ",
            "website"
        ],
        "type": "Task",
        "fix_versions": [
            "7.1",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "The [solrj tutorial](https://wiki.apache.org/solr/Solrj) has the following issues:\n\n\n\tIt refers to 1.4.0 whereas the current release is 6.x, some classes are deprecated or no longer exist.\n\tDocument-object-binding is a crucial feature [which should be working in the meantime](https://issues.apache.org/jira/browse/SOLR-1945) and thus should be covered in the tutorial.",
    "attachments": {
        "SOLR-11032.patch": "https://issues.apache.org/jira/secure/attachment/12891617/SOLR-11032.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-07T10:17:20+0000",
            "content": "And we should probably move it to the ref-guide too. Or would the SolrJ tutorial work better as a GitHub repo with multiple examples that you could run, study, modify, copy/paste? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16077914"
        },
        {
            "date": "2017-07-07T10:23:24+0000",
            "content": "> And we should probably move it to the ref-guide too. Or would the SolrJ tutorial work better as a GitHub repo with multiple examples that you could run, study, modify, copy/paste?\n\nCan't it be both? Maintaining documentation resources outside the code is painful (and maybe therefore didn't happen for 5 years in this afaik), so it should be easy to contribute and there's no easier way than PRs. However, if it's a plain project that one has to build with tools with different installation routines on different OS (which is what a GitHub tutorial is in my understanding), then maintenance need and user frustration might increase. Consequently, an automatically built and updated version in form of HTML should be provided in the ref-guide and the maintenance occur on GitHub. ",
            "author": "Karl Richter",
            "id": "comment-16077922"
        },
        {
            "date": "2017-07-10T19:18:51+0000",
            "content": "Can't it be both?\n\nYes, it could be both.\n\nIf you decide to make a 2nd github repo, and you write your README and any other docs in AsciiDoc format, it would be easily possible to pull sections of it into the Ref Guide as intro or basic materials, and point users to the repo for more details. We could even pull in snippets of example code as necessary (and annotate it).\n\nOr, instead of a separate repo, maybe we should find a way to add the examples to Solr's source itself? Then they can be tested and updated as changes occur in Solr.\n\nEither way, I've long wished someone would beef up the Solr Ref Guide's SolrJ coverage - whether it's in Solr's repo or another one, I hope some progress can be made. ",
            "author": "Cassandra Targett",
            "id": "comment-16080921"
        },
        {
            "date": "2017-07-10T19:52:04+0000",
            "content": "Yes, it's easier for us to maintain a sub directory in solr's git, so perhaps start with that. The ref guide can instruct to clone lucene-solr and then cd into solr/example/solrj or something ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16080975"
        },
        {
            "date": "2017-10-06T14:27:40+0000",
            "content": "Seems like there's two things being talked about in this JIRA:\n1. Updating the content of the SolrJ tutorial (and SolrJ ref-guide page: solr/solr-ref-guide/src/using-solrj.adoc)\n2. Ensure the content stays up to date (with some sort of build-time enforcement).\n\nWe 100% should do both of these things.  But I'm worried that (2) will hold up (1) longer than necessary.  Or, to be more explicit, I'm willing to work on both of these, but I don't want my current lack of knowledge about the ref-guide-build to stand in the way of updating some doc content that could be useful right away.\n\nWould anyone be opposed to updating the ref-guide content, and then figuring out a way to build/test the Java snippets afterwards? ",
            "author": "Jason Gerlowski",
            "id": "comment-16194651"
        },
        {
            "date": "2017-10-06T15:04:33+0000",
            "content": "Would anyone be opposed to updating the ref-guide content, and then figuring out a way to build/test the Java snippets afterwards?\n\n+1, updating the content without tests is still good progress. ",
            "author": "Cassandra Targett",
            "id": "comment-16194711"
        },
        {
            "date": "2017-10-12T03:14:52+0000",
            "content": "I've attached a first pass at a revamp of the \"Using SolrJ\" ref guide page.  (As mentioned in my previous comment, this patch doesn't do anything to build or test the example snippets.  Happy to work on that too, just wanted to work out the content first.)\n\nThe only thing I intentionally did not bring over from the SolrJ wiki/tutorial was the \"reading-from-a-sql-database\" example, which seemed too involved to fit into the \"Using SolrJ\" page.  Though I'm happy to include it if people feel otherwise. ",
            "author": "Jason Gerlowski",
            "id": "comment-16201384"
        },
        {
            "date": "2017-10-12T03:36:57+0000",
            "content": "Looking ahead a bit, it looks like the \"extracting code snippets\" use-case is a common one for Asciidoc.  They include a section in their documentation that's very similar to what we're trying to do here.  Looks like it shouldn't be too difficult to use the \"tagged-regions\" feature of the include-directive, as mentioned here: http://asciidoctor.org/docs/user-manual/#include-partial ",
            "author": "Jason Gerlowski",
            "id": "comment-16201399"
        },
        {
            "date": "2017-10-20T15:27:38+0000",
            "content": "Attaching a ready-for-review patch which adds in the buildable-examples.\n\nThe attached patch moves the Java snippets out from the using-solrj page, to build-able examples that live in solr/solr-ref-guide/src/java.  These examples can be built explicitly using the ant build-examples target in the solr-ref-guide directory.  They're also built implicitly as a part of a normal ant compile from the project root.  (And of course they're built whenever you run ant build-site or ant build-pdf in the solr-ref-guide directory.\n\nPROS\n\n\tcompilation will now fail if a SolrJ API is changed without updating any examples that use it.\n\texamples are compiled in builds by default.  No additional ant target to memorize, etc.\n\n\n\nCONS\n\n\tthe examples need Solr/SolrJ classes on their classpath to compile.  And the ref-guide build will fail if the examples don't compile.  So the ref-guide can't be built in isolation from the rest of Solr anymore.  This is likely expected, but I wanted to mention it anyways in case this was a big deal to anyone.\n\n\n\nThis should be ready for review, if anyone has time to take a look or critique the approach. ",
            "author": "Jason Gerlowski",
            "id": "comment-16212785"
        },
        {
            "date": "2017-10-20T16:56:47+0000",
            "content": "First off: big +1 from me on the idea of moving to using include-partial to pull in solrj samples.  i love that this sort of thing is now possible with the ref-guide.\n\nThe attached patch moves the Java snippets out from the using-solrj page, to build-able examples that live in solr/solr-ref-guide/src/java. ...\n\ni haven't looked at the patch in depth, but i would suggest that instead of adding new, isloated, examples that live in solr/solr-ref-guide/src/java, thes new code snippets belong in tests that live in solr/solrj/src/test.\n\nthat would:\n\n\tkeep the \"PROS\" listed (the solrj APIs can't be updated w/o the tests being updated)\n\tnew PRO: pulling these snippets from actual junit tests means we can not only be confident that they compile, but that they actually do what the doc says they'll do \u2013 by adding asserts after/outside the include tags verifying the expected outcome\n\teliminate the only CONS: no need to change the build dependencies of the ref-guide\n\t\n\t\tbuilding the ref guide won't depend on building solrj, it will just trust that the snippets must be valid because the solrj tests (presumably) pass\n\t\t\n\t\t\tdown the road, once we can more easily integrate the ref guide build directly into the main build this assumption can go away \u2013 but in the mean time it doesn't have to be a concern/issue/question affecting these doc impreovements\n\t\t\n\t\t\n\t\tof course: the ref-guide build ican/should still fail if the \"include\" tags aren't found in the references java file (or if the java test file gets removed/moved)\n\t\t\n\t\t\t(I'm assuming asciidoctor gives an error on this? we should double check that)\n\t\t\n\t\t\n\t\n\t\n\n ",
            "author": "Hoss Man",
            "id": "comment-16212881"
        },
        {
            "date": "2017-10-20T18:05:15+0000",
            "content": "of course: the ref-guide build ican/should still fail if the \"include\" tags aren't found in the references java file (or if the java test file gets removed/moved)\n(I'm assuming asciidoctor gives an error on this? we should double check that)\n\nWe do need to check that it will throw such an error, but a broader issue is that in many cases (as many as possible) asciidoctor will throw an error but continue. From Ant's perspective, the process finished, so it must be good. IOW, unless the error is severe enough that asciidoctor's process fails entirely, the build doesn't fail due to errors thrown by the process as it goes. And it's very conditional when to fail - there are some errors that are fine, as we know, but there are others where we might want to fail the build even if the process completes. ",
            "author": "Cassandra Targett",
            "id": "comment-16212973"
        },
        {
            "date": "2017-10-20T21:48:33+0000",
            "content": "The one/only advantage of having the examples live in solr/solr-ref-guide/src/java is that any attempt to build pages of the ref guide outside of ant will look for included files in descendants of solr/solr-ref-guide/src.  The main time this comes up is if you're using an editor that supports live-preview of your asciidoc pages.\n\nThat said, it's possible to avoid breaking these sort of live-preview cases by having an ant task copy the examples to expected place.  I've taken this approach in the attached patch.  The examples live in a package under solr/solrj/src/test.  They can be copied to solr/solr-ref-guide/src/example by the ref-guide target: {{ant copy-examples]}.  This gets us all of the advantages that Hoss pointed out, while at least providing a work around for people who like their live-preview. ",
            "author": "Jason Gerlowski",
            "id": "comment-16213294"
        },
        {
            "date": "2017-10-20T21:54:58+0000",
            "content": "As far as failing the ref-guide build if a partial-include can't be found, there is a warning that gets spit out.  I took a quick look through asciidoctor's/jekyll's documentation for a way to turn this into a build-halting error, but haven't found anything yet.  I'll keep looking but I'm not sure it's possible (at least not without doing something hacky like grepping output). ",
            "author": "Jason Gerlowski",
            "id": "comment-16213306"
        },
        {
            "date": "2017-10-25T19:26:24+0000",
            "content": "I have no ability to comment on the merits of the test, but I checked out the other parts of the patch:\n\n\n\tThe content changes to the using-solrj.adoc page are very well done. I walked away learning more about SolrJ than I knew before, which is really great.\n\tI tried to find a way to avoid copying the test file into the solr-ref-guide/src/example and solr/build dirs, but remembered yet again that Jekyll has a problem with files that aren't in its own build directory. It seems there has to be a way out of this - the jekyll-asciidoc project claims it's possible, but I spent an hour or so trying to figure it out with various Jekyll/Asciidoctor params, but none of them worked. We can punt on figuring that out for now unless anyone else has a quick idea (Hoss Man maybe?).\n\tWe can parameterize version numbers in .jar filenames and/or paths. In other places of the docs we change, for example, solr-solrj-x.y.z.jar to solr-solrj-{solr-docs-version}.0.jar, and during the build the Ref Guide version is substituted to end up with: solr-solrj-7.1.0.jar. It won't be exact for users on a X.x.1 or X.x.2, etc., release, but we've considered it close enough (since we don't release new versions of the Ref Guide for those bug fix releases).\n\n\n\nIn all, I'm +1 to commit this - I'll make the changes to parameterize the version numbers and then do just that. ",
            "author": "Cassandra Targett",
            "id": "comment-16219351"
        },
        {
            "date": "2017-10-25T21:42:16+0000",
            "content": "I have some concerns about how the current patch works...\n\n\n\tsolr/solrj/src/test/org/apache/solr/example/ should probably be something like solr/solrj/src/test/org/apache/solr/client/ref-guide-examples/ ?\n\t\n\t\tmakes sense to keep these tests under client since that's what they test\n\t\twe already have other pre-existing \"example\" tests that relate specifically to the techproducts example configs, so it would be good to help disambiguate these\n\t\n\t\n\tsome choices in RefGuideSolrJExampleTest don't make a lot of sense to me...\n\t\n\t\twhy use the streaming configset?\n\t\t\n\t\t\tparticularly since using-solrj.adoc says things like The following snippet uses a SolrClient to query Solr's \"techproducts\" example collection\n\t\t\tas things stand: someone could go make drastic changes to the schema in sample_techproducts_configs that would cause these examples/documentation to break, and this \"test\" won't actually catch that problem\n\t\t\n\t\t\n\t\twhy use 4 nodes and a repFactor of 2 ... if nothing in the docs/tests actually care or refer to this?\n\t\tin general, there doesn't really seem to be many assertions that the things we document happening actaully happen.\n\t\t\n\t\t\tExample: queryWithRawSolrParamsExample() ... this test could index a few docs prior to the start tag, and then show in the included snippet accessing the fields specified in the fl (rather then just toString each SolrDocument ... and after the end, the test could assert that the expected number of docs was found and that each doc had the expected field values\n\t\t\tLikewise queryWithSolrQueryExample() ... this test has code to execute a query and loop over the results, but at no point are any SolrInputDocuments added to the index, and that code isn't even included in the tag snippet include in the doc \u2013 so what's the point of executing the query?  why not jsut assert that the SolrQuery object has the expected SolrParams ? (or add some SolrInputDocuments and assert that the QueryResponse contains the expected results\n\t\t\n\t\t\n\t\twe should avoid unneccessary System.out.println\n\t\t\n\t\t\ti understand the value of having those when the code is shown in the doc \u2013 but the doc would probably be just as useful/readabile if the code simply said print(...) where that is a new No-Op static function we define in the test\n\t\t\tbetter still: our print(String) function could be setup as a mock to actually assert that we get the output we expect in the order expected...\n\nprivate static Queue<String> printExpects = new ArrayDeque();\nprivate static expectPrint(String... expected)\n  assertTrue(printExpects.isEmpty(), \"Left over expected strings!\");\n  printExpects = new ArrayDeque<>(expected);\n}\n@After\npublic static checkNoLeftoverPrintsExpected() {\n  expectPrint();\n}\nprivate static print(String value) {\n  String expected = printExpects.poll();\n  assertNotNull(expected, \"Asked to print \" + value + \" but nothing expected.\")\n  assertTrue(value.contains(expected), \"Asked to print \" + value + \" but it does not contain the next expected substring: \" + expected);\n}\npublic void testSomething() {\n  ...\n  expectPrint(\"bar\", \"baz\");\n  // tag::solrj-query-something[]\n  ...\n  final QueryResponse response = client.query(\"techproducts\", query);\n  for(SolrDocument result : response.getResults()) {\n    print(result.getFieldValue());\n  }\n  // end::solrj-query-something[]\n  ...\n\n\n\t\t\n\t\t\n\t\n\t\n\tI really don't like that the build.xml now copies files into solr/solr-ref-guide/src/\n\t\n\t\tthat seems like a recipe for disaster/confusion as people working on these docs see that using-solrj.adoc includes those files and try to edit them directly.\n\t\tI understand that jekyll needs all the files it operates on to be in the same \"work dir\" \u2013 but that's why the solr/solr-ref-guide/build.xml file already creates solr/build/solr-ref-guide/content/ and uses it when running jekyll\n\t\t\n\t\t\tthat's existed for a while because have templatized config files we need to pre-process before running jekyll\n\t\t\tIMHO we should only copy the *.java files we need to copy into this directory, instead of into solr/solr-ref-guide/src/\n\t\t\n\t\t\n\t\tI appreciate the value of enabling \"native\" asciidoctor editors to properly \"preview\" these files w/the includes \u2013 but considering that even with this patch, the person editing the docs will already having to know enough about the ant build system to ensure ant copy-examples gets run before they edit/preview their changes ... i just don't think this \"cure\" is better then the original disease\n\t\t\n\t\t\tparticularly since they'll have to run it every time they want to tweak/change/ammend the original .java files and preview that the included snippets look correct in their preview .. unless of course they accidently forget about the .java coping, and directly edit the files in solr/solr-ref-guide/src/example (or perhaps do it intentionally as a way to \"quick check\" their changes but then forget to change the files \"for real\" in solr/solrj/...) in which case their preview will look fine, but as soon as they run ant build-site or ant build-pdf their changes will get blown away by the original files from {{solr/solrj/....}\n\t\t\n\t\t\n\t\tI would suggest the patch just update build-init to copy the neccessary *.java files to ${build.content.dir} and table discussion of how to make these docs easier to preview in GUI editors to a new jira\n\t\t\n\t\t\tEven if jekyll doesn't have any options to look at multiple dirs, perhaps some of these asciidoc editors do?  Perhaps, much like our dev-tools files for IntelliJ & eclipse, there are config options/files we could setup so that those work better?\n\t\t\n\t\t\n\t\n\t\n\tregardless of what decision is made regarding build.xml changes to copy *.java files around to be used as include files, the meta-docs should be updated to explain what's happening (and probably give a quick explanation of the include syntax in general)\n\n ",
            "author": "Hoss Man",
            "id": "comment-16219590"
        },
        {
            "date": "2017-10-25T22:14:53+0000",
            "content": "some choices in RefGuideSolrJExampleTest don't make a lot of sense to me\n\nto be clear: those suggested changes/improvements shouldn't hold up the basic idea of improving the solrj documentation via includes \u2013 they could/should probably be bumped to new jiras.\n\n(but i really don't think we should commit as is with the \"copy over solr/solr-ref-guide/src/example\" build.xml changes as is) ",
            "author": "Hoss Man",
            "id": "comment-16219643"
        },
        {
            "date": "2017-10-26T04:28:43+0000",
            "content": "some choices in RefGuideSolrJExampleTest don't make a lot of sense to me\n\nThose criticisms are pretty fair.  Most of my attention was to the documentation itself, and I let the test file suffer as a result.  I've addressed many of your points in the attached patch.\n\nThe only exception to this was your feedback regarding unnecessary println statements, which I agree with but opted for a different approach on.  I had initially put these prints into the doc snippets as a stand-in for saying: \"You've got the object X you were after, now use it, however you want\".  But on reflection, those print-statements aren't really conveying any useful information to the reader.  (They don't even show off any of the APIs of the SolrJ value types, since it's literally just an implicit toString call!). \n\nSo instead of hiding our assertions behind mock print statements as Hoss suggested, I just removed them altogether.  Or rather, I replaced them with the assertions you mentioned were previously lacking.  If you'd still prefer the mock-print approach, I'm happy to take that approach too. \n\n[copying Java files to the src tree] ... seems like a recipe for disaster/confusion \n\nI hadn't considered that pitfall, and I agree it's worse than the \"live-preview\" disease it cures.  I've modified the build-init target to copy to build.content.dir as you suggested.\n\nthose suggested changes/improvements shouldn't hold up the basic idea of improving the solrj documentation \n\nI tried to get a fixed patch out for the things you guys mentioned; I know Cassandra's trying to do a ref-guide release this week, I don't want to get in the way of that.  If this latest patch still isn't quite ready for primetime, just wanted to remind you that the first patch on this JIRA has doc updates-only, in anticipation of this sort of scenario.  We could always go with that if you think the doc-content is in a good place, but have reservations about the other moving pieces.\n\nThanks again for your time guys. ",
            "author": "Jason Gerlowski",
            "id": "comment-16219957"
        },
        {
            "date": "2017-10-26T17:11:10+0000",
            "content": "I'm not sure how cassandra will feel about having assert statements in the snippets that get included in the doc, but i'm +1 with the patch as is.\n\nthose print-statements aren't really conveying any useful information to the reader. ...\n\nwell, particulaly because they were just toStringing the object \u2013 but that's why i suggested changing them to print the actual field values (which the mock could assert matched our expectations)\n\n... So instead of hiding our assertions behind mock print statements as Hoss suggested, I just removed them altogether. Or rather, I replaced them with the assertions you mentioned were previously lacking. If you'd still prefer the mock-print approach, I'm happy to take that approach too. \n\nI suspect in the long run we'll want some sort of mock so that the examples in the doc can look more like \"real code\" a user might do something with in an app, and less like a junit test? ... but who knows.  that can be iterated on in a new jira. ",
            "author": "Hoss Man",
            "id": "comment-16220812"
        },
        {
            "date": "2017-10-26T20:22:02+0000",
            "content": "I'm fine with this patch also as it is - we can build on it and other ideas in later JIRAs. I'm more comfortable with the example only being copied into the build.dir also.\n\nI also checked precommit with this and it's fine.\n\nI'll commit the latest patch now. ",
            "author": "Cassandra Targett",
            "id": "comment-16221151"
        },
        {
            "date": "2017-10-26T20:26:11+0000",
            "content": "Commit 7ece47caf1afc5c6b2589280ec4a6e4a21530210 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7ece47c ]\n\nSOLR-11032: Update SolrJ tutorial with new example test for real tested code samples ",
            "author": "ASF subversion and git services",
            "id": "comment-16221160"
        },
        {
            "date": "2017-10-26T20:29:31+0000",
            "content": "Commit 4e993880842fc282af1af5a67859233ff680b422 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4e99388 ]\n\nSOLR-11032: forgot to save merge conflict resolution...grrrrr ",
            "author": "ASF subversion and git services",
            "id": "comment-16221175"
        },
        {
            "date": "2017-10-26T20:31:07+0000",
            "content": "Commit 405cb5ec3b676433ca0d06f73966eef022c5907f in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=405cb5e ]\n\nSOLR-11032: Update SolrJ tutorial with new example test for real tested code samples ",
            "author": "ASF subversion and git services",
            "id": "comment-16221184"
        },
        {
            "date": "2017-10-26T20:31:09+0000",
            "content": "Commit ca084ed40d0c53505a32a783df7adcf193564990 in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ca084ed ]\n\nSOLR-11032: forgot to save merge conflict resolution...grrrrr ",
            "author": "ASF subversion and git services",
            "id": "comment-16221185"
        },
        {
            "date": "2017-10-26T20:31:54+0000",
            "content": "Commit 45ebbc7a94a9a7b43ae1d2e7c1b37380cac301d8 in lucene-solr's branch refs/heads/branch_7_1 from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=45ebbc7 ]\n\nSOLR-11032: Update SolrJ tutorial with new example test for real tested code samples ",
            "author": "ASF subversion and git services",
            "id": "comment-16221190"
        },
        {
            "date": "2017-10-26T20:31:57+0000",
            "content": "Commit 822892a63767f87b956e004a0199c18135ddba46 in lucene-solr's branch refs/heads/branch_7_1 from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=822892a ]\n\nSOLR-11032: forgot to save merge conflict resolution...grrrrr ",
            "author": "ASF subversion and git services",
            "id": "comment-16221191"
        },
        {
            "date": "2017-10-27T14:21:21+0000",
            "content": "I committed the patch yesterday afternoon, but forgot to change the versions to be parameterized as I'd suggested but I'll do that today.\n\nDo you want to keep this issue open for any reason Jason Gerlowski? I think we can file new issues for some of the other things that have been discussed here, but if you think there's something else to do on this issue we can keep it open. ",
            "author": "Cassandra Targett",
            "id": "comment-16222445"
        },
        {
            "date": "2017-10-27T14:38:02+0000",
            "content": "I think closing this and using follow-up issues makes sense.\n\nThe follow-ups that I remember being mentioned were:\n\n\tmake Java snippets more \"real-code-like\"  (the mock print stuff that Hoss suggested)\n\tInvestigate ways to support live-preview.\n\n\n\nAnything missing from that list? ",
            "author": "Jason Gerlowski",
            "id": "comment-16222466"
        },
        {
            "date": "2017-10-27T14:47:58+0000",
            "content": "Yep, that sounds right to me.\n\nThanks so much for working on this. ",
            "author": "Cassandra Targett",
            "id": "comment-16222479"
        }
    ]
}