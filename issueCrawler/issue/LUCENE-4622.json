{
    "id": "LUCENE-4622",
    "title": "TopKFacetsResultHandler should tie break sort by label not ord?",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "EG I now get these facets:\n\nAuthor (5)\n Lisa (2)\n Frank (1)\n Susan (1)\n Bob (1)\n\n\n\nThe primary sort is by count, but secondary is by ord (= order in which they were indexed), which is not really understandable/transparent to the end user.  I think it'd be best if we could do tie-break sort by label ...\n\nBut talking to Shai, this seems hard/costly to fix, because when visiting the facet ords to collect the top K, we don't currently resolve to label, and in the worst case (say my example had a million labels with count 1) that's a lot of extra label lookups ...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-12T14:09:40+0000",
            "content": "I think that there are two issues here Mike - which facets get into the top-K list and how is that list sorted to the user?\n\nCurrently, the facets that make it into the top-K list are the ones that have the higher weight (default, can be reversed). If there are collisions, then the facets with the lower ordinals win. That's very similar to regular Lucene Sort, which breaks ties on doc IDs, and can be easily explained to users as \"if facets have same counts, the top K is determined by which facet was added first to the index\" ... really like doc IDs.\n\nThe second issue is how the top-K categories are sorted on ties. Currently they are not re-sorted by label. All of the applications that I've seen sort the categories in the UI lexicographically (as a secondary sort). And some applications that used facets for computing a tag cloud, sort the tag cloud by label (first sort) and apply UI techniques to emphasize a category by its weight. We figured that it's just a waste of CPU time to do this sort, someone can very easily do that w/ the FacetResults that he gets.\n\nSo in my opinion:\n\n\tWe should still break on ordinal for entering into the Top-K. It'd be very costly otherwise, and I'm not sure how critical it is.\n\tSorting by weight + label worries me. Why should an app pay for that if e.g. it's going to sort in the UI anyway, say by the user's Locale? Or if it doesn't care about the sort?\n\n\n\nI would rather that we don't change the default, but maybe add an API for doing that, like a utility class, or as a method on FacetResult. Whoever cares about sorting, just call this method.\n\nWhat worries me is that it may not be so obvious to apps that don't want the sort, but get it sorted, that there's some extra work being done behind the scenes. However for apps that get the results not sorted and care about it, it's very clear to them that they need to do something, and for that we'll have an API, or they can really implement by themselves?\n\nSorting when depth>1 by label is going to be even trickier ...\n\nMaybe as a compromise we can make FacetResultNode comparable and there break ties on label? Then you could traverse your tree of results and call Collections.sort(resultNodes) at each level? ",
            "author": "Shai Erera",
            "id": "comment-13529965"
        },
        {
            "date": "2012-12-12T14:34:28+0000",
            "content": "I'm not fond of the post processing...\nToday the sort is consistent. Lucene breaks even on doc ids, which order may not be consistent due to out of order merges. This is not the case with category ordinals.\n\nIf one wishes to post process they should be able to do so quite easy? But as pointed out, it might not produce the results as intended due to a lot of categories which scored the same and were left out. ",
            "author": "Gilad Barkai",
            "id": "comment-13529988"
        },
        {
            "date": "2013-01-03T14:14:56+0000",
            "content": "I think the limitation here is I cannot specify 2 sort fields (like I can in Lucene), right?  Ie, I would sort by count (descending) then by label (ascending), and then the top K selection and sorting of the final top K facets would be \"correct\".  And a second limitation is that \"sort by label\" can be costly in general because you'd have to resolve each ord -> label whenever the primary sort was equal.\n\nIt's true Lucene tie breaks by docID, but then the app can specify multiple sort fields so that a dup result really in fact looks like a dup to the user as well and then the tie-break doesn't matter much.\n\nAnyway, given that the app can just sort after-the-fact, and given the cost of sorting-by-label, I think we shouldn't fix this for now ... we can revisit if the issue ever arrises in a real app. ",
            "author": "Michael McCandless",
            "id": "comment-13542947"
        }
    ]
}