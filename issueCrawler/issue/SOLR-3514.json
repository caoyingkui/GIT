{
    "id": "SOLR-3514",
    "title": "WeakHashMap in FileFloatSource's cache only cleaned by GC",
    "details": {
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "We've encountered GC spikes at Etsy after adding new ExternalFileFields a decent number of times. I was always a little confused by this behavior \u2013 isn't it just one big float[]? why does that cause problems for the GC? \u2013 but looking at the FileFloatSource code a little more carefully, I wonder if this is due to using a WeakHashMap that is only cleaned by GC or manual invocation of a\nrequest handler.\n\nFileFloatSource stores a WeakHashMap keyed by IndexReader. In the code, it mentions that the implementation is modeled after FieldCache. However, the FieldCacheImpl adds listeners for IndexReader close events and uses those to purge its caches. Should we be doing the same in FileFloatSource?\n\nAttached is a mostly untested patch with a possible implementation. There are probably better ways to do it (e.g. I don't love using another WeakHashMap), but I found it tough to hook into the IndexReader lifecycle without a) relying on classes other than FileFloatSource b) changing the public API of FIleFloatSource or c) changing the implementation too much.\n\nThere is a RequestHandler inside of FileFloatSource \u2013 ReloadCacheRequestHandler \u2013 that can be used to clear the cache\nentirely, but this is sub-optimal for us for a few reasons:\n\n\n\tIt clears the entire cache. ExternalFileFields often take some\nnon-trivial time to load and we prefer to do so during SolrCore\nwarmups. Clearing the entire cache while serving traffic would likely\ncause user-facing requests to timeout.\n\tIt forces an extra commit with its consequent cache cycling, etc..",
    "attachments": {
        "SOLR-3514.patch": "https://issues.apache.org/jira/secure/attachment/12531167/SOLR-3514.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Greg Bowyer",
            "id": "comment-13290592",
            "date": "2012-06-06T23:37:57+0000",
            "content": "One thing I will add to this, although I dont reject the idea of better cache management is that there are issues with reference processing in some JVMS relating to some configurations of GC's\n\nThis was fixed for release in 1.7.0_04 here http://hg.openjdk.java.net/hsx/hotspot-gc/hotspot/rev/f1391adc6681\n\nEssentially the fix means that references are not traced as part of normal marking, only during big bad stop the world GC's\n "
        }
    ]
}