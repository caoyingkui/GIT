{
    "id": "LUCENE-5729",
    "title": "explore random-access methods to IndexInput",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": []
    },
    "description": "Traditionally lucene access is mostly reading lists of postings and geared at that, but for random-access stuff like docvalues, it just creates overhead.\n\nSo today we are hacking around it, by doing this random access with seek+readXXX, but this is inefficient (additional checks by the jdk that we dont need).\n\nAs a hack, I added the following to IndexInput, changed direct packed ints decode to use them, and implemented in MMapDir:\n\nbyte readByte(long pos) --> ByteBuffer.get(pos)\nshort readShort(long pos) --> ByteBuffer.getShort(pos)\nint readInt(long pos) --> ByteBuffer.getInt(pos)\nlong readLong(long pos) --> ByteBuffer.getLong(pos)\n\n\n\nThis gives ~30% performance improvement for docvalues (numerics, sorting strings, etc)\n\nWe should do a few things first before working this (LUCENE-5728: use slice api in decode, pad packed ints so we only have one i/o call ever, etc etc) but I think we need to figure out such an API.\n\nIt could either be on indexinput like my hack (this is similar to ByteBuffer API with both relative and absolute methods), or we could have a separate API. But i guess arguably IOContext exists to supply hints too, so I dont know which is the way to go.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14016311",
            "author": "Uwe Schindler",
            "content": "An idea would be to add an API to IndexInput that returns a ByteBuffer directly for a slice. Of course, this would be limited to slices of 32 bit size.\nBut we would then allow SIGSEGV, if somebody uses the returned ByteBuffer. On the other hand we have no overhead at all.\n\nThe whole thing should be optional, so if IndexInput does not support random access or does not support the given slice size (i.e., if it spans two buffers), it may throw UOE / return null and the consumer would need to use the alternative implementation. NIOFS and SimpleFS would never support random access; RAMDir could use ByteBuffer.wrap(). ",
            "date": "2014-06-03T08:05:35+0000"
        },
        {
            "id": "comment-14016360",
            "author": "Robert Muir",
            "content": "The problem is not really overhead here, is the two i/o calls with two sets of checks (seek + get). I dont think we need a bytebuffer, its fine to expose a clean random access API.\n\nWhy make it optional? That just makes code messy. The default implementation can just be seek + get and it is no worse than today. ",
            "date": "2014-06-03T10:07:39+0000"
        },
        {
            "id": "comment-14018002",
            "author": "Robert Muir",
            "content": "See LUCENE-5731 ",
            "date": "2014-06-04T18:51:57+0000"
        }
    ]
}