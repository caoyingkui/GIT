{
    "id": "LUCENE-7127",
    "title": "remove epsilon-based testing from lucene/spatial",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Test"
    },
    "description": "Currently, the random tests here allow a TOLERANCE and will fail if the error exceeds. But this is not fun to debug! It also keeps the door wide open for bugs to creep in.\n\nAlternatively, we can rework the tests like we did for sandbox/ points. This means the test is aware of the index-time quantization and so it can demand exact answers.\n\nIts more difficult at first, because even floating point error can cause a failure. It requires us to maybe work through corner cases/rework optimizations. If any epsilons must be added, they can be added to the optimizations themselves (e.g. bounding box) instead of the user's result.",
    "attachments": {
        "LUCENE-7127.patch": "https://issues.apache.org/jira/secure/attachment/12794694/LUCENE-7127.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15205781",
            "author": "Robert Muir",
            "date": "2016-03-22T04:43:41+0000",
            "content": "Here's my patch. Now GeoPoint and LatLonPoint are tested the exact same way (they are already generally returning exact same answers on any reasonable dataset, modulo bugs).\n\nTests generally pass but there are sporatic corner case failures: e.g. \n\n   [junit4] Started J0 PID(16923@localhost).\n   [junit4] Suite: org.apache.lucene.spatial.geopoint.search.TestLegacyGeoPointQuery\n   [junit4]   1> T1: id=1623 should not match but did\n   [junit4]   1>   small=false query=GeoPointDistanceQuery: field=point: Center: [-78.95940156653523,-61.08293957076967] Distance: 5705904.858922883 meters] docID=1623\n   [junit4]   1>   lat=-67.50789809972048 lon=95.3347154147923\n   [junit4]   1>   deleted?=false\n   [junit4]   1>   docID=1623 centerLon=-78.95940156653523 centerLat=-61.08293957076967 pointLon=95.3347154147923 pointLat=-67.50789809972048 distanceMeters=5715359.332616319 vs radiusMeters=5705904.858922883\n   [junit4]   2> ??? 22, 2016 7:36:32 ? com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T1,5,TGRP-TestLegacyGeoPointQuery]\n   [junit4]   2> java.lang.AssertionError: wrong hit (first of possibly more)\n   [junit4]   2> \tat __randomizedtesting.SeedInfo.seed([2E99F05640D677C6]:0)\n   [junit4]   2> \tat org.junit.Assert.fail(Assert.java:93)\n   [junit4]   2> \tat org.apache.lucene.spatial.util.BaseGeoPointTestCase$VerifyHits.test(BaseGeoPointTestCase.java:553)\n   [junit4]   2> \tat org.apache.lucene.spatial.util.BaseGeoPointTestCase$2._run(BaseGeoPointTestCase.java:772)\n   [junit4]   2> \tat org.apache.lucene.spatial.util.BaseGeoPointTestCase$2.run(BaseGeoPointTestCase.java:637)\n   [junit4]   2> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestLegacyGeoPointQuery -Dtests.method=testRandomWithThreads -Dtests.seed=2E99F05640D677C6 -Dtests.locale=ar-EG -Dtests.timezone=Antarctica/Syowa -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n\n\n\nI will start to try to debug through some of these, see if i can get things happy. "
        },
        {
            "id": "comment-15205842",
            "author": "Robert Muir",
            "date": "2016-03-22T05:43:44+0000",
            "content": "Here is more iteration on the tests. I tried to make the multithreaded test reproduce better by using a random for each thread (i still have reproducibility issues when it fails).\n\nSince there are some issues around distances, I also moved the random distance tests from TestLatLonPointDistanceQuery here into the base class.\n\nWith points this test always takes ~ 1s, but I got a hang. I'm not sure its something like simpletext since from the stack it seems like something else is happening, maybe a bug in the TermsEnum? Another thing to investigate.\n\n\n   [junit4] \"TEST-TestLegacyGeoPointQuery.testRandomDistance-seed#[8AC41F463F800FFE]\" #13 prio=5 os_pri\n   [junit4] o=0 tid=0x00007f038006a800 nid=0x52cb runnable [0x00007f03a733e000]\n   [junit4]    java.lang.Thread.State: RUNNABLE\n   [junit4] \tat org.apache.lucene.spatial.util.GeoRelationUtils.rectCrossesCircle(GeoRelationUtils.java:435)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointDistanceQueryImpl$GeoPointRadiusCellComparator.cellCrosses(GeoPointDistanceQueryImpl.java:57)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointDistanceQueryImpl$GeoPointRadiusCellComparator.cellIntersectsShape(GeoPointDistanceQueryImpl.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:91)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNu\n   [junit4] mericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNum\n   [junit4] ericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointN\n   [junit4] umericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:69)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.relateAndRecurse(GeoPointNumericTermsEnum.java:100)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.computeRange(GeoPointNumericTermsEnum.java:70)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointNumericTermsEnum.<init>(GeoPointNumericTermsEnum.java:50)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointTermsEnum.newInstance(GeoPointTermsEnum.java:52)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointMultiTermQuery.getTermsEnum(GeoPointMultiTermQuery.java:94)\n   [junit4] \tat org.apache.lucene.spatial.geopoint.search.GeoPointTermQueryConstantScoreWrapper$1.scorer(GeoPointTermQueryConstantScoreWrapper.java:94)\n   [junit4] \tat org.apache.lucene.search.Weight.bulkScorer(Weight.java:135)\n   [junit4] \tat org.apache.lucene.search.LRUQueryCache$CachingWrapperWeight.bulkScorer(LRUQueryCache.java:644)\n   [junit4] \tat org.apache.lucene.search.AssertingWeight.bulkScorer(AssertingWeight.java:68)\n   [junit4] \tat org.apache.lucene.search.AssertingWeight.bulkScorer(AssertingWeight.java:68)\n   [junit4] \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:666)\n   [junit4] \tat org.apache.lucene.search.AssertingIndexSearcher.search(AssertingIndexSearcher.java:91)\n   [junit4] \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:473)\n   [junit4] \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:592)\n   [junit4] \tat org.apache.lucene.search.IndexSearcher.searchAfter(IndexSearcher.java:577)\n   [junit4] \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:504)\n   [junit4] \tat org.apache.lucene.spatial.util.BaseGeoPointTestCase.doRandomDistanceTest(BaseGeoPointTestCase.java:923)\n   [junit4] \tat org.apache.lucene.spatial.util.BaseGeoPointTestCas\n   [junit4] e.testRandomDistance(BaseGeoPointTestCase.java:855)\n\n\n "
        },
        {
            "id": "comment-15205851",
            "author": "Robert Muir",
            "date": "2016-03-22T05:54:57+0000",
            "content": "Just adding one more print to the new distance test to make it more debuggable.\n\nIt shows a good fail like this which reproduces easily:\n\n   [junit4] Started J0 PID(21772@localhost).\n   [junit4] Suite: org.apache.lucene.spatial.geopoint.search.TestGeoPointQuery\n   [junit4]   1> center: (-2.6859204112252826,-126.5501794954457), radius=1.933955591025525E7\n   [junit4]   1> 0: (-37.8248053137213,30.965997129678726), distance=1.4967104936764924E7\n   [junit4]   1> 1: (-88.12955391593277,-49.35365941375494), distance=9673775.807110526\n   [junit4]   1> 2: (64.47744741104543,-10.247774831950665), distance=1.1518639744313335E7\n   [junit4]   1> 3: (-19.651501905173063,16.937049888074398), distance=1.5335235632819101E7\n   [junit4]   1> 4: (38.89845754019916,163.5567674227059), distance=8487195.64357184\n   [junit4]   1> 5: (-2.730920696631074,-125.4338058270514), distance=124236.35394072857\n   [junit4]   1> 6: (-9.463954903185368,-119.37913874164224), distance=1094829.0184535114\n   [junit4]   1> 7: (2.784616006538272,58.78787197172642), distance=1.9443855071787946E7\n   [junit4]   1> 8: (-76.14117253571749,151.79019374772906), distance=9506656.192332761\n   [junit4]   1> 9: (66.5075888670981,1.8173518404364586), distance=1.1896270113358853E7\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandomDistance -Dtests.seed=BFDD43F3DB3D2FDC -Dtests.locale=zh -Dtests.timezone=Pacific/Pago_Pago -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 12.2s | TestGeoPointQuery.testRandomDistance <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<{0, 1, 2, 3, 4, 5, 6, 8, 9}> but was:<{0, 1, 2, 3, 4, 5, 6, 7, 8, 9}>\n\n\n\nSo document 7 is really too far away, but gets wrongly included in the result. I can probably debug it from here... "
        },
        {
            "id": "comment-15205872",
            "author": "Robert Muir",
            "date": "2016-03-22T06:17:44+0000",
            "content": "The \"fix\" for that failure can look like this, the optimization is just not working:\n\n--- a/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.java\n+++ b/lucene/spatial/src/java/org/apache/lucene/spatial/geopoint/search/GeoPointDistanceQueryImpl.java\n@@ -60,7 +60,7 @@ final class GeoPointDistanceQueryImpl extends GeoPointInBBoxQueryImpl {\n \n     @Override\n     protected boolean cellWithin(final double minLon, final double minLat, final double maxLon, final double maxLat) {\n-      return GeoRelationUtils.rectWithinCircle(minLon, minLat, maxLon, maxLat,\n+      return false && GeoRelationUtils.rectWithinCircle(minLon, minLat, maxLon, maxLat,\n           centerLon, distanceQuery.centerLat, distanceQuery.radiusMeters, true);\n     }\n\n\n\nI also noticed if i just unconditionally returned true for cellCrosses the perf issues with testing go away and its just as fast as points. So I think these problems boil down to the same struggles i encountered when i tried to use them to add distance query to LatLonPoint?\n\nA real/viable/alernative fix (which i can look at tomorrow), would be to just port the logic over from LatLonPointQuery for these? We can also port over its optimizations too to compensate. It might even end out faster. "
        },
        {
            "id": "comment-15205980",
            "author": "Dawid Weiss",
            "date": "2016-03-22T08:13:23+0000",
            "content": "\n+      final Random random = new Random(random().nextLong());\n       Thread thread = new Thread() {\n\nFyi, the test framework is consistent in assigning a new random instance (seed) to any new thread it observes - the seed will be the same regardless of how many or in which order you fork those new threads (random is a thread-local and is initialized based on the master seed for any new thread).\n "
        },
        {
            "id": "comment-15206222",
            "author": "Robert Muir",
            "date": "2016-03-22T11:52:46+0000",
            "content": "Yeah but its not working: this multithreaded test doesnt reproduce correctly. I mean that it works like 75% of the time  Something goes wrong in the test framework and it then it won't repro at all... so in desperation I go back to basics. \n\nI don't want to confuse the issue at hand here, what is happening on this issue is already difficult enough. We can fight the test framework separately elsewhere. \n\nI personally do not feel threads are warranted in the test at all. I will remove them. "
        },
        {
            "id": "comment-15206234",
            "author": "Dawid Weiss",
            "date": "2016-03-22T12:03:24+0000",
            "content": "Hmm. Whatever is wrong, I don't think it's the threading/randomness in the test framework - this is very well tested. If there is a race condition it should be somewhere higher up, perhaps there's state pollution across threads for some other reason. If you find out what's causing it let me know! "
        },
        {
            "id": "comment-15206237",
            "author": "Robert Muir",
            "date": "2016-03-22T12:06:56+0000",
            "content": "I suspect it something happening in LuceneTestCase (some component being swapped in/some random.nextInt(4) in LuceneTestCase somewhere). \n\nLike i said, i'm gonna remove the threads completely. I don't have time for the distraction and we need to walk before we can try to run. Unfortunately I can't chase down whats wrong with multithreaded tests, and I really really don't want to confuse this issue. Its very important and already about at maximum possible confusion level  "
        },
        {
            "id": "comment-15206371",
            "author": "Michael McCandless",
            "date": "2016-03-22T13:41:41+0000",
            "content": "+1 to just remove threads from the base test class. "
        },
        {
            "id": "comment-15206851",
            "author": "Robert Muir",
            "date": "2016-03-22T17:34:56+0000",
            "content": "Updated patch: all tests pass including the new ones.\n\nI used a simplified version of the same logic as LatLonPoint: the algorithm is sane. It also prevents the slowness in tests (and maybe in real queries?)\n\nI will try to figure out how to benchmark, to ensure there is no big regression or anything. If there is a minor drop in perf, I am happy to optimize it further, same as LatLonPoint, but at the moment I think we need to focus on correctness. "
        },
        {
            "id": "comment-15206853",
            "author": "Robert Muir",
            "date": "2016-03-22T17:35:35+0000",
            "content": "also i want to defer removal of the multithreading in the test and other things as much as possible. this issue has got enough going on as-is  "
        },
        {
            "id": "comment-15206929",
            "author": "Michael McCandless",
            "date": "2016-03-22T18:10:42+0000",
            "content": "+1, this is a great simplification, and I love that the two queries (points and postings) use the same approach now.\n\n+1 to defer optimizing, threads removal, etc. "
        },
        {
            "id": "comment-15207326",
            "author": "ASF subversion and git services",
            "date": "2016-03-22T21:12:35+0000",
            "content": "Commit ee1aca86435e501d02c23a93f480f076a8b72f34 in lucene-solr's branch refs/heads/branch_6x from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ee1aca8 ]\n\nLUCENE-7127: remove epsilon-based testing from lucene/spatial, fix distance bugs. "
        },
        {
            "id": "comment-15208186",
            "author": "Michael McCandless",
            "date": "2016-03-23T10:23:56+0000",
            "content": "Yeah but its not working: this multithreaded test doesnt reproduce correctly. \n\nRob suspected and I verified that it's the query cache that made the seeds not reproduce the threaded tests here.\n\nI disabled the query cache, then beasted an unrelated patch to a failing seed on the threads test and confirmed that it reliably reproduces now.\n\nIt's because, depending on thread scheduling, and also because we seed all threads identically, different threads will hit a cache hit vs miss, leading to different random paths for each. "
        },
        {
            "id": "comment-15208195",
            "author": "Dawid Weiss",
            "date": "2016-03-23T10:27:02+0000",
            "content": "Thanks for explanation Mike! "
        },
        {
            "id": "comment-15279042",
            "author": "Hoss Man",
            "date": "2016-05-10T21:52:33+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271\n\n\n\nFYI, not sure why gitbot didn't catch this, but the master commit was 1e5f74a02b8b04d9c9546410f5c49bf1d67abbbf "
        }
    ]
}