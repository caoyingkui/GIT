{
    "id": "LUCENE-6172",
    "title": "Improve the in-order / out-of-order collection decision process",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Today the logic is the following:\n\n\n\tIndexSearcher looks if the weight can score out-of-order\n\tDepending on the value it creates the appropriate top docs/field collector\n\n\n\nI think this has several issues:\n\n\tOnly IndexSearcher can actually make the decision correctly, and it only works for top docs/field collectors. If you want to make a multi collector in order to have both facets and top docs, then you're clueless about whether you should create a top docs collector that supports out-of-order collection\n\tIt is quite fragile: you need to make sure that Weight.scoresDocsOutOfOrder and Weight.bulkScorer agree on when they can score out-of-order. Some queries like BooleanQuery duplicate the logic and other queries like FilteredQuery just always return true to avoid complexity. This is inefficient as this means that IndexSearcher will create a collector that supports out-of-order collection while the common case actually scores documents in order (leap frog between the query and the filter).\n\n\n\nInstead I would like to take advantage of the new collection API to make out-of-order scoring an implementation detail of the bulk scorers. My current idea is as follows:\n\n\tremove Weight.scoresDocsOutOfOrder\n\tchange Collector.getLeafCollector(LeafReaderContext) to Collector.getLeafCollector(LeafReaderContext, boolean canScoreOutOfOrder)\n\n\n\nThis new boolean in Collector.getLeafCollector tells the collector that the scorer supports out-of-order scoring. So by returning a leaf collector that supports out-of-order collection, things will be faster.\n\nThe new logic would be the following. First Weights cannot tell whether they support out-of-order scoring or not. However when a weight knows it supports out-of-order scoring, it will pass canScoreOutOfOrder=true when getting the leaf collector. If the returned collector accepts documents out of order, then the weight will return an out-of order scorer. Otherwise, an in-order scorer is returned.",
    "attachments": {
        "LUCENE-6172.patch": "https://issues.apache.org/jira/secure/attachment/12691353/LUCENE-6172.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14271666",
            "author": "Adrien Grand",
            "date": "2015-01-09T18:37:44+0000",
            "content": "Here is an (in-progress) patch which should give an idea of what I'm trying to do. The interesting bits are mainly in Top(Docs|Field)Collector, IndexSearcher and BooleanWeight. There is one failing lucene/facets test and a couple of failing solr tests that I still need to understand. "
        },
        {
            "id": "comment-14275413",
            "author": "Adrien Grand",
            "date": "2015-01-13T15:42:28+0000",
            "content": "Closed in favor of LUCENE-6179 "
        },
        {
            "id": "comment-14332879",
            "author": "Anshum Gupta",
            "date": "2015-02-23T05:02:24+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}