{
    "id": "SOLR-3861",
    "title": "Refactor SolrCoreState so that it's managed by SolrCore .",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "SOLR-2008 fixed a possible RejectedExecutionException by ensuring that SolrCore closed the updateHandler before the searcherExecutor.\n\nMark Miller re-flipped this logic in r1159378, which is annotated as fixing both SOLR-2654 and SOLR-2654 (dup typo i guess) but it's not clear why - pretty sure this means that the risk of a Rejected exception is back in 4.0-BETA...\n\nhttps://svn.apache.org/viewvc/lucene/dev/trunk/solr/core/src/java/org/apache/solr/core/SolrCore.java?r1=1146905&r2=1159378",
    "attachments": {
        "SOLR-3861.patch": "https://issues.apache.org/jira/secure/attachment/12546379/SOLR-3861.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13459789",
            "date": "2012-09-20T17:49:08+0000",
            "content": "mark: can you please sanity check whether this was an intentional change or a fluke?  is the original risk in SOLR-2008 now eliminated by some other change to how the UpdateHandler is used? "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13459871",
            "date": "2012-09-20T19:28:44+0000",
            "content": "Not sure if this is related but the famous TestReplicationHandler failures seem to throw the mentioned RejectedExecutionException when the test fails. for example here: http://jenkins.sd-datasolutions.de/job/Lucene-Solr-trunk-Linux/1221/ "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13461275",
            "date": "2012-09-22T21:17:16+0000",
            "content": "I'll look at this now. I did it based on some experience with the chaos monkey - I did not consider this past issue though, so I'll have to revisit this. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13461298",
            "date": "2012-09-23T00:16:54+0000",
            "content": "So I did this as part of a long effort at hardening recovery. Some things I tried and seemed to help at some point for some reason, and then later fixes made them unnecessary. I think that was the case with this change, and I'll flip back the ordering. Std tests and chaos monkey tests are still passing. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13461305",
            "date": "2012-09-23T01:21:48+0000",
            "content": "I see what the issue is - closing the updatehandler will close the dir factory - before the searcher releases it's dir. That is why it's switched. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13461306",
            "date": "2012-09-23T01:25:12+0000",
            "content": "I'm not sure I see the problem with the rejected execution, but I do see the problem of closing things in an order that prevents it. I think the current code is correct. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13461521",
            "date": "2012-09-23T21:42:03+0000",
            "content": "Hossman - closing this as I don't think it requires a change. If you disagree, please reopen. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13462088",
            "date": "2012-09-24T20:27:35+0000",
            "content": "In IRC Hossman brought up the case where you don't use an update log - apparently auto commit promises a final commit before shutdown. We probably need better testing for that type of functionality, but we should deal with this. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13462089",
            "date": "2012-09-24T20:28:23+0000",
            "content": "If someone wants to work on it now, we might be able to get it in any rc respin though. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13462122",
            "date": "2012-09-24T21:00:08+0000",
            "content": "I think something like this would work - a little hokey on the API side though. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13462127",
            "date": "2012-09-24T21:05:03+0000",
            "content": "Patch is a little off - doesn't pass tests - but shows the general idea that we probably want to improve on. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13462311",
            "date": "2012-09-25T00:52:58+0000",
            "content": "comments on the patch:\n\n1) overall it seems correct.\n\n2) probably want to move the \":HACK: normally we rely on updateHandler to do this\" down to a new else clauses on the the if block where  getSolrCoreState().tryCloseDirectory() is called just for sanity's sake.\n\n3) Maybe i'm missing something, but it's not really clear to me why we need the new tryCloseDirectory ... it seems like it would be more straight forward just to make SolrCore responsible for creating/decrefing/closing the SolrCoreState before/after creating/closing the UpdateHandler?  (the three arg UpdateHandler constructor could still ask the previous UpdateHandler for the solrCoreState, but the default behavior would be to get it from the SolreCore. ) \n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13462431",
            "date": "2012-09-25T04:12:22+0000",
            "content": "3)\n\nI think it was actually more straight forward to do what I first did - only took a second. Your suggestion makes more logical sense and solves the hackey API issue, but I think it's more of a tricky change to get right. I've started playing with it. "
        },
        {
            "author": "Yandong Yao",
            "id": "comment-13462449",
            "date": "2012-09-25T05:10:30+0000",
            "content": "@Hoss,\n\nComment related with SOLR-2008 and this:\n\nWe are using many shards, and will load/unload shards according to its usage pattern. Sometime when we try to unload shards, we encounter issues mentioned in SOLR-2008. \n\nI am not sure whether this will result in any data loss, (we have encountered some issues, while it is caused by our client code mostly, we have used read write lock to protect unloading shard code, so that if there are threads indexing data to this shard, then it won't be unloaded. After this change, so far so good. while we still encounter exception mentioned in SOLR-2008 in solr log).\n\nAlso we have encountered following exception sometimes when we try to unloading shard (we will always call commit before unloading shard): \n\nBTW: we are using one old (lucene.version=4.0-SNAPSHOT 1189391) solr 4 snapshot build. \n\nSep 14, 2012 4:49:22 AM org.apache.solr.common.SolrException log\nSEVERE: auto commit error...:java.lang.RuntimeException: org.apache.lucene.util.ThreadInterruptedException: java.lang.InterruptedException: sleep interrupted\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1140)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:999)\n        at org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:339)\n        at org.apache.solr.update.CommitTracker.run(CommitTracker.java:184)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)\n        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:138)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$301(ScheduledThreadPoolExecutor.java:98)\n        at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:206)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n        at java.lang.Thread.run(Thread.java:662)\nCaused by: org.apache.lucene.util.ThreadInterruptedException: java.lang.InterruptedException: sleep interrupted\n        at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:644)\n        at org.apache.lucene.index.DirectoryReader.open(DirectoryReader.java:84)\n        at org.apache.lucene.index.IndexReader.open(IndexReader.java:536)\n        at org.apache.lucene.index.IndexReader.open(IndexReader.java:495)\n        at org.apache.solr.core.StandardIndexReaderFactory.newReader(StandardIndexReaderFactory.java:38)\n        at org.apache.solr.search.SolrIndexSearcher.<init>(SolrIndexSearcher.java:109)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1130)\n        ... 11 more\nCaused by: java.lang.InterruptedException: sleep interrupted\n        at java.lang.Thread.sleep(Native Method)\n        at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:642)\n        ... 17 more  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13462462",
            "date": "2012-09-25T05:47:32+0000",
            "content": "Here is a rough patch managing the SolrCore state more in SolrCore. \n\nSomething is off still - TestIndexingPerformance fails - the final rollback it does causes a write.lock to be left behind when we try and close a directory. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13462995",
            "date": "2012-09-25T17:21:08+0000",
            "content": "Here is a completed patch. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13463070",
            "date": "2012-09-25T18:09:05+0000",
            "content": "Looks like as Yonik says in SOLR-3884, the final shutdown commit is explicit not something that comes from auto commit. And the searcher we may try to open and get a rejeceted execution on, is done after commit anyway.\n\nSo I'm back to really not thinking this is a problem. The refactoring work done in the last patch is much better then what we have though. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13463386",
            "date": "2012-09-26T00:06:49+0000",
            "content": "So I'll commit this to 5x and 4x, but my current thinking is again that it's not a big deal at all, so I would not try and put it in 4.0. "
        },
        {
            "author": "Yandong Yao",
            "id": "comment-13463480",
            "date": "2012-09-26T02:45:27+0000",
            "content": "Hi Mark,\n\ndo you mean this issue (RejectException) won't impact system such as lost uncommitted documents? \n\nIt seems happen when autocommit code try to run while the core is closing, could we run commit before close and then disable autocommit in core closing code.\n\nHow about above 'sleep interrupted' exception? Are they caused by same reason?\n\nThanks,\nYandong "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13463485",
            "date": "2012-09-26T03:05:24+0000",
            "content": "do you mean this issue (RejectException) won't impact system such as lost uncommitted documents?\n\nI don't believe so. If you have the UpdateLog on, you would recover any lost updates there - but this rejected execution is after the commit anyway - trying to open the searcher after the commit.\n\nAlso, the UpdateHandler does an explicit commit on shutdown that has nothing to do with auto commit, and does not rely on needing to open a searcher after it's done.\n\nI think if anything, it's an ugly mark in the logs.\n\nThe api changes above will remove the ugly part I think - but as far as I know it's all just cosmetic. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13466832",
            "date": "2012-10-01T14:21:26+0000",
            "content": "I'll commit this refactor shortly. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13494968",
            "date": "2012-11-11T20:27:57+0000",
            "content": "[branch_4x commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1392398\n\nSOLR-3861: Refactor SolrCoreState so that it's managed by SolrCore.\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13610717",
            "date": "2013-03-22T16:29:18+0000",
            "content": "[branch_4x commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1392398\n\nSOLR-3861: Refactor SolrCoreState so that it's managed by SolrCore. "
        }
    ]
}