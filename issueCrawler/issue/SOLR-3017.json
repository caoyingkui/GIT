{
    "id": "SOLR-3017",
    "title": "Allow edismax stopword filter factory implementation to be specified",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently, the edismax query parser assumes that stopword filtering is being done by StopFilter: the removal of the stop filter is performed by looking for an instance of 'StopFilterFactory' (hard-coded) within the associated field's analysis chain.\n\nWe'd like to be able to use our own stop filters whilst keeping the edismax stopword removal goodness. The supplied patch allows the stopword filter factory class to be supplied as a param, \"stopwordFilterClassName\". If no value is given, the default (StopFilterFactory) is used.\n\nAnother option I looked into was to extend StopFilterFactory to create our own filter. Unfortunately, StopFilterFactory's 'create' method returns StopFilter, not TokenStream. StopFilter is also final.",
    "attachments": {
        "SOLR-3017-without-guava-alternative.patch": "https://issues.apache.org/jira/secure/attachment/12512901/SOLR-3017-without-guava-alternative.patch",
        "edismax_stop_filter_factory.patch": "https://issues.apache.org/jira/secure/attachment/12509936/edismax_stop_filter_factory.patch",
        "SOLR-3017.patch": "https://issues.apache.org/jira/secure/attachment/12509949/SOLR-3017.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael Dodsworth",
            "id": "comment-13182758",
            "date": "2012-01-09T20:14:07+0000",
            "content": "previous patch had issues applying "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13184256",
            "date": "2012-01-11T18:19:52+0000",
            "content": "all reviews welcome (sorry to pester) "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13195810",
            "date": "2012-01-29T18:03:01+0000",
            "content": "A couple of questions:\n1> I notice that guava is in here. The only other place I see imports for google.common is in the carrot code. Does anyone object to guava getting used in core? I only ask because it's used in so few places, do we prefer apache commons StringUtils for this kind of stuff or do we just not care?\n\n2> In ExtendedDismaxQParserPlugin, around lines 1140 (in noStopwordFilterAnalyzer) there are a couple of tests like:\n      if (stopwordFilterFactoryClass.isInstance(tf)) {\n\nScanning the code, it seems like stopwordFilterFactoryClass could be null, an NPE here seems questionable.\n\nOtherwise, this seems fine to me from a tactical perspective, anyone want to weigh in on whether this is a good thing overall? "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13197536",
            "date": "2012-02-01T03:01:10+0000",
            "content": "Thanks for the review, Erick. Much appreciated.\n\n1 - I'll create an alternative patch with the guava stuff switched out for StringUtils. I'm personally a big fan of the guava lib but I'm not using it for anything too useful here.\n\n2 - I've actually provided ExtendedSolrQueryParser with a default value (around ExtendedDismaxQParserPlugin:851) for 'stopwordFilterFactoryClass'. It's possible that someone could call 'setStopwordFilterFactoryClass' with null, in which case we would have a NPE. I've no problem adding a defensive null check before the 'isInstance' call. The other option would be to add a @NonNull annotation to that argument...but I'm not sure if findbugs or similar is run as part of the solr build process.\n "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13198480",
            "date": "2012-02-02T02:23:34+0000",
            "content": "Alternative patch with guava calls replaced with StringUtils "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13199900",
            "date": "2012-02-03T17:37:37+0000",
            "content": "new version that:\n1> removes the new schema file and just modifies schema12 instead. All tests pass with this change.\n\n2> Adds null check to setStopwordFilterFactoryClass rather than where it's called.\n\nI guess theoretically someone could override this class, override setStopwordFilterFactoryClass, call it with null and set the member var to null then encounter an NPE in noStopwordFilterAnalyzer which they couldn't fix due to scope issues. But that doesn't sound like something we need to guard against at this point.\n\nIf nobody objects, I'll commit this over the weekend or early next week. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13200018",
            "date": "2012-02-03T20:19:11+0000",
            "content": "Cheers Erick.\n\nRegarding the null check, would it be better to throw an IllegalArgumentException if null is passed through? Either way, it might be a good idea to javadoc the behaviour when null is passed. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13200029",
            "date": "2012-02-03T20:43:47+0000",
            "content": "Yeah, it's unclear to me what the \"right thing\" here is. I'm really a bit fuzzy about whether ever setting this value to null is permissible or whether preventing that is too draconian. I suppose that since we're going from hard checking for StopFilterFactory, we can at least argue that either way it's not likely to break existing code.\n\nPlease feel free to update the patch as you see fit, then we'll wait a couple of days for anyone who looks to object and I'll check it in. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13200042",
            "date": "2012-02-03T21:08:46+0000",
            "content": "Checking for the stop filter always felt a little hacky to me (I know... I'm the one who did it)... but specifying a classname as a query parameter feels like it goes down the wrong path (esp since seems like a very rare issue).  \"stopwordFilterClassName\" isn't even accurate if it's supposed to be specifying the name of the factory.\n\nGoing back to the original issue:\nUnfortunately, StopFilterFactory's 'create' method returns StopFilter, not TokenStream. StopFilter is also final. \n\nThe simplest solution here would seem to be to change StopFilterFactory.create() to return a TokenStream? "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13200085",
            "date": "2012-02-03T21:59:29+0000",
            "content": "That would certainly allow us to hack around the problem in a way that doesn't require a change to the query parser (i.e., extending StopFilterFactory and overriding its create method to return our own filter).\n\nAre we concerned about breaking code that may be calling StopFilterFactory.create() and is expecting a StopFilter (I wonder if there's a reason TokenStream wasn't used originally)?\n\nAgreed on the inaccurate param name. I'll fix that up in the next patch.\n\nSpecifying the factory class name as a param is optional and, as you say, should be a rare case.\nIf there's a better, more general fix for this, I'm happy to take that on.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13200092",
            "date": "2012-02-03T22:09:44+0000",
            "content": "Are we concerned about breaking code that may be calling StopFilterFactory.create()\n\nNope.  I've just committed this change in trunk.  There wasn't a good reason to use a more specific type (and it was not used anywhere). "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13200252",
            "date": "2012-02-04T01:33:11+0000",
            "content": "One word fixes, I love it. Anyway, is there any good reason not to put this in 3.6? I'm running tests after that change now and I'll put it in if this seems reasonable. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13200257",
            "date": "2012-02-04T01:38:53+0000",
            "content": "Great, thank you both. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13200264",
            "date": "2012-02-04T01:52:42+0000",
            "content": "Nope. I've just committed this change in trunk. There wasn't a good reason to use a more specific type (and it was not used anywhere).\n\nFWIW: I'm pretty sure the only reason any of these factories are declared to return specific types (instead of just TokenStream) was SOLR-396 \u2013 which isn't really that important now that lucene & solr development is in a single repo and people can easily commit factories at the same time that new impls are added. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13220447",
            "date": "2012-03-01T22:48:30+0000",
            "content": "Yonik's fix resolves this. Much appreciated. "
        }
    ]
}