{
    "id": "LUCENE-7485",
    "title": "Better storage for `docsWithField` in Lucene70NormsFormat",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "priority": "Minor",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Currently Lucene70NormsFormat uses a bit set to store documents that have a norm, and counts one bits using Long.bitCount in order to know the index of the current document in the set of docs that have a norm value.\n\nI think this is fairly good if a field is moderately sparse (somewhere between 5% and 99%) but it still has some issues like slow advance by large deltas (it still needs to visit all words in order to accumulate the number of ones to know the index of a document) or when very few bits are set.\n\nI have been working on a disk-based adaptation of RoaringDocIdSet that would still give the ability to know the index of the current document. It seems to be only a bit slower than the current implementation on moderately sparse fields. However, it also comes with benefits:\n\n\tit is faster in the sparse case when it uses the sparse encoding that uses shorts to store doc IDs (when the density is 6% or less)\n\tit has faster advance() by large deltas (still linear, but by a factor of 65536 so that should always be fine in practice since doc IDs are bound to 2B)\n\tit uses O(numDocsWithField) storage rather than O(maxDoc), the worst case in 6 bytes per field, which occurs when each range of 65k docs contains exactly one document.\n\tit is faster if some ranges of documents that share the same 16 upper bits are full, this is useful eg. if there is a single document that misses a field in the whole index or for use-cases that would store multiple types of documents (with different fields) within a single index and would use index sorting to put documents of the same type together",
    "attachments": {
        "LUCENE-7485.patch": "https://issues.apache.org/jira/secure/attachment/12832482/LUCENE-7485.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15562417",
            "author": "Adrien Grand",
            "date": "2016-10-10T14:13:48+0000",
            "content": "Here is a patch. I am using norms to play since they have a smaller API, but the idea is to use the same thing for doc values eventually. "
        },
        {
            "id": "comment-15563393",
            "author": "Ryan Ernst",
            "date": "2016-10-10T20:27:16+0000",
            "content": "Looks good! A couple minor suggestions:\n\n\tI would change MAX_ARRAY_LENGTH to (1 << 12) - 1 (and adjust comparisons accordingly), so that the buffer array is actually created with this exact value (otherwise the name is confusing).\n\tAdd explicit tests around the edges of sparse to dense?\n\n "
        },
        {
            "id": "comment-15564721",
            "author": "Adrien Grand",
            "date": "2016-10-11T07:07:59+0000",
            "content": "Thanks for having a look Ryan! Here is an updated patch. "
        },
        {
            "id": "comment-15564763",
            "author": "ASF subversion and git services",
            "date": "2016-10-11T07:32:05+0000",
            "content": "Commit 2fbbcac580fbfd866a8571c86e9e38704d58cf9d in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2fbbcac ]\n\nLUCENE-7485: Better storage of sparse values in Lucene70NormsFormat. "
        }
    ]
}