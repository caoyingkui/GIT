{
    "id": "LUCENE-3297",
    "title": "FST doesn't fully share common prefix across all outputs",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/FSTs"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "FST will try to share prefixes of outputs when possible, however in the [I think unusual in practice] case where all outputs share a common prefix, FST really ought to store this just once, on the root arc, but instead it's only able to push back to the N root arcs.  It's sort of an off-by-one on how far back the pushing goes...\n\nOne [synthetic] example where this makes a big difference is the new Test2BPostings test, when it uses MemoryCodec, because this test has 26 terms (letters of alphabet) and each term has exactly the same long (~85 MB) all 1s byte[] as the postings.  If we fixed this issue, then the resulting FST would only be ~85 MB but now instead it needs to be ~85 * 26 MB.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-09T13:02:15+0000",
            "content": "I don't plan to work on this any time soon... I think it's low priority. ",
            "author": "Michael McCandless",
            "id": "comment-13062369"
        },
        {
            "date": "2011-08-07T17:50:44+0000",
            "content": "Ok, I've found the issue I was looking for. Mike, this should be solved by changing the logical organization of the fst. This would also solve the issue of storing an \"empty\" automaton and its output (which is currently hardcoded in an unpleasant way). The solution is to introduce an epsilon-labeled arc (epsilon meaning an out-of-alphabet symbol, possibly a flag). The \"root\" of the fst would be an eps-labeled transition to the actual root node. Then, an empty automaton is basically an eps-terminal transition and prefix sharing you talk about in this issue is whatever can be pushed onto this eps-arc. The automaton remains deterministic, it's just a small change of logic (and addition of the special eps symbol). ",
            "author": "Dawid Weiss",
            "id": "comment-13080611"
        },
        {
            "date": "2011-08-08T10:09:13+0000",
            "content": "We sort of have this today, in the root arc (FST.getFirstArc), but it \"avoids\" eps by not setting the arc's label at all, ie you're only allowed/expected to use this arc's target state, output/nextFinalOutput.  This arc is how the consumer of the FST API \"gets started\" in accessing the FST.\n\nAdding eps label would make me nervous   For our FST impl (limited because we only support determinized FSTs) we'd never see an eps transition anywhere else right?  Ie, it'd only be for the root arc.\n\nSo the FST already today can represent a globally shared output prefix; the challenge in fixing this issue is to fix the Builder impl to be able to push the output all the way back onto this root arc; the phase where we push outputs as far back as possible doesn't push far enough... ",
            "author": "Michael McCandless",
            "id": "comment-13080878"
        },
        {
            "date": "2011-08-08T10:22:49+0000",
            "content": "Yeah, I know it can be coded by adding new conditions in the implementation. My point was that the code can be more generic and cleaner by introducing the modifications above. I may introduce them in my fst reimplementation and see what comes out. ",
            "author": "Dawid Weiss",
            "id": "comment-13080884"
        },
        {
            "date": "2011-08-09T10:41:34+0000",
            "content": "If indeed we can make the code more generic and not lose (too much)\nperf then that would be awesome... I'm just having trouble seeing how\nadding explicit <eps> label will be more generic since <eps> would\nonly (and, always) be used in exactly one special-cased place (the\nroot arc), I think?\n\nI must be missing something in your proposal...\n\nOr, are you suggesting we actually make a \"before start\" symbol (hmm,\nthe mirror image of FST.END_LABEL) and always forcefully/explicitly\ninsert this in front of every byte[] passed to Builder?  This would in\nfact fix this issue, since Builder should push a global output prefix\nonto that first arc... and then that first arc would become the FST's\nroot arc. ",
            "author": "Michael McCandless",
            "id": "comment-13081557"
        },
        {
            "date": "2011-08-09T11:25:52+0000",
            "content": "I guess I just don't like marker values from the domain range (like END_LABEL)... they make me nervous. I'll experiment. ",
            "author": "Dawid Weiss",
            "id": "comment-13081571"
        }
    ]
}