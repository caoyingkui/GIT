{
    "id": "LUCENE-8007",
    "title": "Require that codecs always store totalTermFreq, sumDocFreq and sumTotalTermFreq",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "master (8.0)"
        ]
    },
    "description": "Javadocs allow codecs to not store some index statistics. Given discussion that occurred on LUCENE-4100, this was mostly implemented this way to support pre-flex codecs. We should now require that all codecs store these statistics.",
    "attachments": {
        "LUCENE-8007.patch": "https://issues.apache.org/jira/secure/attachment/12893943/LUCENE-8007.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16217106",
            "date": "2017-10-24T15:25:46+0000",
            "content": "+1 ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16218656",
            "date": "2017-10-25T13:48:23+0000",
            "content": "Here is a patch. The following index statistics are now required:\n\n\tTerms.size()\n\tTerms.getSumDocFreq()\n\tTerms.geDocCount()\n\tTermsEnum.totalTermFreq() if freqs are stored\n\tTerms.getSumTotalTermFreq() if freqs are stored\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16218687",
            "date": "2017-10-25T14:05:01+0000",
            "content": "Do we need the terms.size? I am concerned about a trappy method there: do we need it?\n\nI don't see this as an index statistic (e.g. no similarity uses it) but instead a heuristic for sizing datastructures and the like. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16218703",
            "date": "2017-10-25T14:11:57+0000",
            "content": "I can remove that one from the list. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16220185",
            "date": "2017-10-26T09:05:41+0000",
            "content": "New patch, allowing Terms.size() to return -1 again. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16223747",
            "date": "2017-10-28T21:53:04+0000",
            "content": "Looks mostly ok but i am confused by some size-related changes (such as sorting reader and check index seeming to require it). Maybe we should split those out to a separate issue?\n\nBut fixing the other index stats here looks great, it removes some unnecessary complexity and untested situations. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16225972",
            "date": "2017-10-30T23:25:37+0000",
            "content": "Based on this issue, SimilarityBase can be really improved and simplified with pseudocode like this:\n\n\nlong totalTermFreq = termStats.totalTermFreq();\nif (totalTermFreq == -1) {\n    // term frequencies were omitted, so we assume all tf values for the field were 1\n    assert collectionStats.sumTotalTermFreq() == -1;\n    totalTermFreq = termStats.docFreq(); // appears 1 time per docFreq\n    sumTotalTermFreq = collectionStats.sumDocFreq(); // number of postings where each freq is 1\n}\n\n\n\nI think this is better than bogusly setting sumTotalTermFreq to docFreq and avgdl to 1 like we do today? It should behave much better for the omitTF case. \n\nNote that BM25 has the same problem for its avgdl computation too, which should also be fixed.\n\nJust makes me wonder if we should reconsider returning -1 for term's totalTermFreq and field's sumTotalTermFreq, when we can alternatively substitute with docFreq and sumDocFreq and it will be the same values as if we actually tracked freqs of 1 and tracked these stats across them for the field? And postings lists return 1 as the freq for such cases today so it seems consistent and may simplify code like CheckIndex etc as well.\n\nReturning -1 doesn't really provide value, i think its just the codec api showing too much of its guts. if you really want to know if freqs were omitted for the field (versus all being 1), you can inspect the IndexOptions for that. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16226165",
            "date": "2017-10-31T03:00:37+0000",
            "content": "I spun off the bogus calculations into LUCENE-8025 as it seems like a more serious issue. But based on what i see there, definitely think we should remove these two -1s, they only cause problems. It will also simplify distributed stats and so on where you have to special case the situation/makes stuff more complex than it needs to be. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16226870",
            "date": "2017-10-31T14:22:23+0000",
            "content": "Updated patch. I'll commit shortly if there are no objections. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16226932",
            "date": "2017-10-31T14:53:16+0000",
            "content": "So we are keeping the possibility of -1 for totalTermFreq and sumTotalTermFreq even though the codec (e.g. BlockTree) could just return docFreq and sumDocFreq instead? Or should we remove the -1 as a followup separately?\n\nAlso the patch corrects calculations for SImilarityBase but not BM25. We should either fix BM25 here too (essentially fold in LUCENE-8025) or just revert the change to SimilarityBase to avoid confusion?  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16226945",
            "date": "2017-10-31T15:04:24+0000",
            "content": "the codec (e.g. BlockTree) could just return docFreq and sumDocFreq instead\n\nGood point. Given that PostingsEnum#freq returns 1 with DOCS_ONLY, that would be consistent.\n\nAlso the patch corrects calculations for SImilarityBase but not BM25. We should either fix BM25 here too (essentially fold in LUCENE-8025) or just revert the change to SimilarityBase to avoid confusion? \n\nI did these changes since you suggested them in your previous comment. I will revert. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16226966",
            "date": "2017-10-31T15:16:20+0000",
            "content": "I think i caused confusion with my comments, sorry. I wanted to test the substitution (totalTermFreq=docFreq, sumTotalTermFreq=sumDocFreq) separately to ensure it worked well. Thats why i broke out LUCENE-8025, but I think its clear from measurements it is what we should do.\n\nBut really IMO BlockTree should do the substitution and we should remove fallback logic, since -1 becomes impossible. It will mean there is no longer -1s in sim stat apis at all.  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16235171",
            "date": "2017-11-02T04:47:42+0000",
            "content": "Adrien i brought the patch up to speed, fixed codecs to return totalTermFreq=docFreq and sumTotalTermFreq=sumDocFreq in DOCS_ONLY cases, and tried to remove all the damage caused by -1 values in code/javadocs/checkindex/tests/etc. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16235478",
            "date": "2017-11-02T10:01:32+0000",
            "content": "+1 ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16235482",
            "date": "2017-11-02T10:01:59+0000",
            "content": "I like how it really makes everything simpler. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16235648",
            "date": "2017-11-02T12:36:11+0000",
            "content": "I'll take another pass on the patch for sure: I'm not sure checkIndex is still as good as it can be, haven't yet run nightly tests, etc. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16235669",
            "date": "2017-11-02T12:45:13+0000",
            "content": "Do you have ideas in mind already regarding CheckIndex? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16235677",
            "date": "2017-11-02T12:52:38+0000",
            "content": "I think there may be some stuff like:\n\n\nif (sumTotalTermFreq != 0) {\n  // leniency that hid a bug in simpletext that i had\n}\n\n\n\nAlso i am not sure all stats relations are really checked there (e.g. docCount <= sumDocFreq <= sumTotalTermFreq), including ensuring that docFreq=totalTermFreq and sumDocFreq=sumTotalTermFreq always in the DOCS_ONLY_CASE and so on. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16236941",
            "date": "2017-11-03T01:44:04+0000",
            "content": "I removed the != 0 checks in checkIndex and added additional checks across the statistics. I also added assert != -1 in places such as CompositeReader/TermContext that are summing from subs. Given the value could previously be -1, it seems good to have these asserts at least for 8.0 ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16237022",
            "date": "2017-11-03T03:02:37+0000",
            "content": "Commit ca5f9b34576545f1a51cde1526f42de519989527 in lucene-solr's branch refs/heads/master from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ca5f9b3 ]\n\nLUCENE-8007: Make scoring statistics mandatory ",
            "author": "ASF subversion and git services"
        }
    ]
}