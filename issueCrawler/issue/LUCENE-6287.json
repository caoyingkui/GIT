{
    "id": "LUCENE-6287",
    "title": "Corrupt index (missing .si file) on first 4.x commit to a 3.x index",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "4.10.4"
        ],
        "priority": "Blocker",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "If you have a 3.x index, and you open it with a 4.x IndexWriter for\nthe first time, and you do something that kicks of merges while\nconcurrently committing, it's possible the index will corrupt itself\nwith exceptions like this:\n\n\njava.nio.file.NoSuchFileException: /l/tmp/reruns.TestBackwardsCompatibility3x.testMergeDuringUpgrade.t2/lucene.index.TestBackwardsCompatibility3x-71F31CCCEF6853A-001/manysegments.362-006/_0.si\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:177)\n\tat java.nio.channels.FileChannel.open(FileChannel.java:287)\n\tat java.nio.channels.FileChannel.open(FileChannel.java:334)\n\tat org.apache.lucene.store.NIOFSDirectory.openInput(NIOFSDirectory.java:81)\n\tat org.apache.lucene.store.FilterDirectory.openInput(FilterDirectory.java:80)\n\tat org.apache.lucene.codecs.lucene3x.Lucene3xSegmentInfoReader.read(Lucene3xSegmentInfoReader.java:106)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:358)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:454)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:906)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:752)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:457)\n\tat org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:414)\n\tat org.apache.lucene.util.TestUtil.checkIndex(TestUtil.java:207)\n\tat org.apache.lucene.util.TestUtil.checkIndex(TestUtil.java:196)\n\tat org.apache.lucene.store.BaseDirectoryWrapper.close(BaseDirectoryWrapper.java:45)\n\tat org.apache.lucene.index.TestBackwardsCompatibility3x.testMergeDuringUpgrade(TestBackwardsCompatibility3x.java:1035)\n\n\n\nBack compat tests in Elasticsearch hit this, and at first I thought maybe LUCENE-6279 was the cause (I still think we should fix that) but after further debugging there is a different concurrency bug lurking here.\n\nI have a test case which after substantial beasting is able to reproduce the bug, but I don't yet have a fix.  I think IW is missing a checkpoint after writing a new commit...",
    "attachments": {
        "LUCENE-6287.patch": "https://issues.apache.org/jira/secure/attachment/12700516/LUCENE-6287.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14335023",
            "author": "Michael McCandless",
            "date": "2015-02-24T15:48:19+0000",
            "content": "Patch w/ test case that fails if you beast it for long enough.\n\nI just created a simple 3.x index with many segments, and in the test case provoke merging and run a concurrent commit.  MDW.close then runs check index which detects the corruption.\n\nNext I'll try to fix the bug ... "
        },
        {
            "id": "comment-14335335",
            "author": "Michael McCandless",
            "date": "2015-02-24T19:59:20+0000",
            "content": "Patch w/ a simple fix ... I'm beasting the test and so far so good ... I'll leave it running.\n\nIW already holds an incRef'd set of files that are in-flight for commit, so I just fixed it to re-compute that set after SIS.prepareCommit (which may write the .si/marker files) and incRef the new set with IFD.  This protects them while the commit runs, and then when the commit finishes we incRef them with IFD again and they are permanent after that. "
        },
        {
            "id": "comment-14335348",
            "author": "Robert Muir",
            "date": "2015-02-24T20:06:40+0000",
            "content": "looks good. Thanks for tracking this down! "
        },
        {
            "id": "comment-14335512",
            "author": "Simon Willnauer",
            "date": "2015-02-24T21:45:52+0000",
            "content": "LGTM +1 to commit "
        },
        {
            "id": "comment-14348918",
            "author": "Michael McCandless",
            "date": "2015-03-05T15:36:30+0000",
            "content": "Bulk close for 4.10.4 release "
        }
    ]
}