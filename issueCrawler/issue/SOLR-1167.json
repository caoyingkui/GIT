{
    "id": "SOLR-1167",
    "title": "Support module xml config files using XInclude",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Current configuration files (schema and solrconfig) are monolithic which can make maintenance and reuse more difficult that it needs to be.  The XML standards include a feature to include content from external files.  This is described at http://www.w3.org/TR/xinclude/\n\nThis feature is to add support for XInclude features for XML configuration files.",
    "attachments": {
        "SOLR-1167.patch": "https://issues.apache.org/jira/secure/attachment/12408106/SOLR-1167.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Peter Wolanin",
            "id": "comment-12710200",
            "date": "2009-05-17T14:40:23+0000",
            "content": "I think you posted a sample snippet for solrconfig to the list - can you report here and possibly include in the patch a change to the sample schema or solrconfig that would demonstrate this feature? "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12710537",
            "date": "2009-05-18T23:22:33+0000",
            "content": "Support for xinclude will allow a few options to include xml (or non-xml) content from an external file.  The external file can be loaded from the file system or from any HTTP resource.\n\nHere are some examples:\n\n  <!-- include solrconfig_master.xml from the file system and generate an error if the file can't be found -->\n  <xi:include href=\"solr/conf/solrconfig_master.xml\" xmlns:xi=\"http://www.w3.org/2001/XInclude\"/>\n\n\n  <!-- include solrconfig_master.xml from an HTTP URL and ignore it if it's missing -->\n  <xi:include href=\"http://localhost:8983/solr/admin/file/?file=replication_master.xml\" \n                    xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n    </xi:fallback/>\n  </xi:include>\n\n\n  <!-- include solrconfig_master.xml from the filesystem.  If it cannot be found, attempt\n        to include solrconfig_slave.xml from the filesystem.  If neither file can be found, don't\n        generate an error.\n     -->\n  <xi:include href=\"solr/conf/solrconfig_master.xml\" xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n    <xi:fallback>\n      <xi:include href=\"solr/conf/solrconfig_slave.xml\" xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n        <xi:fallback/>\n      </xi:include>\n    </xi:fallback>\n  </xi:include>\n\n\n  <!-- attempt to include an optional file containing index options.  If the file can't be found, fall back to some\n        default values.\n   -->\n  <xi:include href=\"solr/conf/solrconfig_indexOptions.xml\" xmlns:xi=\"http://www.w3.org/2001/XInclude\">\n    <xi:fallback>\n      <useCompoundFile>false</useCompoundFile>\n      <ramBufferSizeMB>32</ramBufferSizeMB>\n      <mergeFactor>10</mergeFactor>\n      <maxMergeDocs>2147483647</maxMergeDocs>\n      <maxFieldLength>10000</maxFieldLength>\n    </xi:fallback>\n  </xi:include>\n\n\nI'll update the patch to include solrconfig_master.xml and solrconfig_slave.xml files if they are present in the solr/conf directory.  The inclusions are currently commented out and the resulting configuration is equivalent to the existing sample config.\n "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12710539",
            "date": "2009-05-18T23:24:56+0000",
            "content": "Include changes to example solrconfig.xml to include master and slave settings from an external xml file.  The master file includes replication and dataimport handler definitions.\n\nThe inclusions are commented out currently. "
        },
        {
            "author": "Jianhan",
            "id": "comment-12710551",
            "date": "2009-05-19T00:11:40+0000",
            "content": "It is good that we can now put certain configuration to a separate file with this change, but this does not seem to completely solve the problem raised in SOLR-1154, and we still have to use the hack to disable master/slave if we use the same package for master and slave. Is there a way to conditionally include one file or another (rather than include the other if one is not available)? "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12710582",
            "date": "2009-05-19T01:41:24+0000",
            "content": "It can't conditionally include content, no.  That can be achieved in startup scripts easy enough though: if the \"-master\" flag is given then copy the correct file into place and include it, if the \"-slave\" flag is given then copy the slave file into place, etc.\n\nI believe we'd need to write code to handle conditional inclusion.  The XInclude stuff works at the XML parser level which knows nothing of system and environment variables of course.\n\n-Bryan "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12721879",
            "date": "2009-06-19T17:04:34+0000",
            "content": "I like the simplicity of the patch, and the use of an existing standard.  If I'd realized that xinclude was supported by DocumentBuilderFactory i would have tried this a long time ago ... my only concern is how well supported this feature is in the various DBF impls out there.\n\nBTW: the redundent snippets in DataImporter.java and COnfig.java make me think we need to refactor a helper function for this somewhere in utils, but that's not a huge issue.\n\nIs there a way to conditionally include one file or another (rather than include the other if one is not available)?\n\nKeep in mind that the problem can be inverted: instead of having a common solrconfig.xml file that conditionally includes master-snippet.xml or slave-snippet.xml based on some property, you can have unique solrconfig.xml files for the master and slave (in separate solr home dirs) which only contain the unique options and include the common chunks from other files .. then you can use solr.solr.home to drive which set of configs to use. "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12753186",
            "date": "2009-09-09T17:48:12+0000",
            "content": "What needs to happen to get this into 1.4 before the code freeze? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12753191",
            "date": "2009-09-09T18:01:29+0000",
            "content": "Could we:\n\nif setxincludeaware throws unsupported, load the dbf without that setting, and if contains an include, throw an exception saying its unsupported with the current impl your using? I think its fairly well supported in anything even semi recent. "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12753275",
            "date": "2009-09-09T21:36:44+0000",
            "content": "Allowing the creation of the DBF when setXIncludeAware throws an exception is easy enough.  Detecting that there are xinclude elements present seems much harder since that is all handled by the XML parser.  How about if a warning log message is generated if setXIncludeAware can't be set? "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12753772",
            "date": "2009-09-10T19:00:58+0000",
            "content": "Patch updated to apply cleanly to more recent trunk (r813098).  It also catches an exception if the setXIncludeAware(true) method is unsupported and allows the DBF to still be created.  A warning log is generated in this case: \"XML parser doesn't support XInclude option\" "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12753840",
            "date": "2009-09-10T21:53:54+0000",
            "content": "Just a thought; wouldn'it be possible to use system entities (as in SOLR-712 / SOLR-646) to have variables resolution in entities and use those in the xi:include href ? \n\n<!DOCTYPE schema [\n<!ENTITY myevar SYSTEM \"solr:${myvar}\">\n]>\n...\n<xi:include href=\"&myevar;\".../>\n...\n\n\nThis would allow include of files using variables using standards without reverting the inclusion logic.\n\nIn any case, thanks Bryan for pushing this. "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12759688",
            "date": "2009-09-25T18:41:31+0000",
            "content": "The patch is for the trunk, currently 1.4  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12760246",
            "date": "2009-09-28T13:51:21+0000",
            "content": "Patch looks fine, just not sure that we should add this into the example since it just adds more files to an already.  Perhaps just some comments and some writeup on the wiki in the SolrConfig page? "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12760433",
            "date": "2009-09-28T23:25:17+0000",
            "content": "I agree that the examples should be simple (yet functional) and this does complicate them.  I added changes to the configuration because a previous commented requested it.  I think changing the sample solrconfig to mention support for XInclude and document examples on the wiki is better for new users too.\n\nShould I change the patch to remove the changes to the sample solrconfig and only include a comment about XInclude support? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12760573",
            "date": "2009-09-29T12:23:12+0000",
            "content": "That would be my vote.  If you can do that, I'll take a look today. "
        },
        {
            "author": "Bryan Talbot",
            "id": "comment-12760654",
            "date": "2009-09-29T17:28:41+0000",
            "content": "Updated patch to only add a comment to solrconfig.xml which refers to the wiki SolrConfigXml page for configuration options.  The wiki can then be updated to include details about using XInclude once it's available. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12760836",
            "date": "2009-09-30T05:08:26+0000",
            "content": "\nDetecting that there are xinclude elements present seems much harder since that is all handled by the XML parser. How about if a warning log message is generated if setXIncludeAware can't be set?\n\nIt occured to me that setNamespaceAware(true) has no documented failure case - every DBF implementation is suppose to support it.   So as long as the DocumentBuilder is namespace aware, then if setXIncludeAware(true) fails, we could (in theory) inspect the resulting DOM Document to see if there are any \"\n{http://www.w3.org/2001/XInclude}\ninclude\" nodes in the document \u2013 if there are then the config was expecting XInclude support and we can fail with a hard error, if not then they didn't care about XInclude support anyway, so no need to log a warning if it's not supported\n\n(I'm just throwing this out there as an idea \u2013 if someone wants to try implementing it then great, but  i don't think it should be a roadblock for the existing patch, because honestly: as long as we document that XInclude depends on XML parser support, then if people add XIncludes to their configs, but don't test to verify that it's working in environment they're on their own and i won't feel bad if something fails silently) "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12761157",
            "date": "2009-10-01T10:24:48+0000",
            "content": "Added a test for this.  I'm not sure if it is the right way to go.  I don't want the test to fail if the person running it doesn't have a DocumentBuilder that supports it, b/c that wouldn't fail in the live case either.\n\nThoughts?  I'd like to close this one out. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12761160",
            "date": "2009-10-01T10:43:47+0000",
            "content": "Bryan, I'm not sure if you have followed recent developments. Now it is possible to add a enable attribute to any solr plugin and value of the enable attribute can be driven from an external properties file. With this you don't need separate solrconfig.xml files for master/slave. This is the approach we are using. Was that the original use-case behind this feature? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12761162",
            "date": "2009-10-01T10:51:48+0000",
            "content": "I still think it is useful to be able to use XInclude.  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12761214",
            "date": "2009-10-01T13:32:51+0000",
            "content": "Committed revision 820652.\n\nBryan, can you update the Wiki? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775743",
            "date": "2009-11-10T15:52:05+0000",
            "content": "Bulk close for Solr 1.4 "
        },
        {
            "author": "Peter Karich",
            "id": "comment-12841178",
            "date": "2010-03-04T10:54:37+0000",
            "content": "@Shalin Shekhar Mangar: how can I use the proposed attribute feature to be used for master+slave configuration? Do you have a code snippet? "
        }
    ]
}