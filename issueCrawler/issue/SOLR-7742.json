{
    "id": "SOLR-7742",
    "title": "Support for Immutable ConfigSets",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "See the discussion in SOLR-5955; to properly support collection \"templates\" that can be specified as the starting point for a collection configuration, we need support for ConfigSets that are immutable.",
    "attachments": {
        "SOLR-7742": "https://issues.apache.org/jira/secure/attachment/12742992/SOLR-7742",
        "SOLR-7742log.patch": "https://issues.apache.org/jira/secure/attachment/12746448/SOLR-7742log.patch",
        "SOLR-7742.patch": "https://issues.apache.org/jira/secure/attachment/12744771/SOLR-7742.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-07-01T01:41:29+0000",
            "author": "Gregory Chanan",
            "content": "Here's a patch that implements and tests Immutable ConfigSets.  This seems useful by itself (in the case where you don't want the config to be modified), but could have more uses in the future with config templates and/or a ConfigSet API (that e.g. let you copy / instantiate [copy and unset immutable] ConfigSets).\n\nNote:\nOne part I am unsure about is the best way to mark a ConfigSet as being immutable.  The solution I chose was to have a file in the configDir named \"configSet.immutable\".  I chose that for three reasons:\n1) It exists outside of the solrconfig / schema, which maps well to what the ConfigSet represents\n2) It can be easily skipped as part of an \"instantiate\" operation as described above (where we copy a ConfigSet but turn off immutable) via a ConfigSet API call\n3) It works for both local filesystem and ZK configurations (my original idea was to write some properties in the base directory for ZK data, but that wouldn't work for the local filesystem).\n\nMaybe this would be better:\nWe have an optional file named \"configSet.properties\" that lets you specify (json?) properties that apply to the configset.  Today, \"immutable\" would be the only one that has any meaning, but we could extend this in the future for other properties (e.g. you could have authorization information relevant to a ConfigSet API or specifications like \"shareable\" [can more than one collection use this as a base]?).  The properties file also passes the three motivations listed above.\n\nThoughts? ",
            "id": "comment-14609424"
        },
        {
            "date": "2015-07-07T15:42:37+0000",
            "author": "Yonik Seeley",
            "content": "We have an optional file named \"configSet.properties\" that lets you specify (json?) properties that apply to the configset.\n\nYeah, I think that's a good idea to plan ahead and prevent a proliferation of files-as-boolean-flags in the future.  Then the other decision is whether to expose a generic properties interface (i.e. the ability to set/get arbitrary configset properties).\n\nThe rest of the patch looks good. ",
            "id": "comment-14616877"
        },
        {
            "date": "2015-07-07T16:59:47+0000",
            "author": "Gregory Chanan",
            "content": "Yeah, I think that's a good idea to plan ahead and prevent a proliferation of files-as-boolean-flags in the future. Then the other decision is whether to expose a generic properties interface (i.e. the ability to set/get arbitrary configset properties).\n\nGood points.  My thought here is to introduce a ConfigSet API that lets you modify the properties on copy (this is required for immutable, since otherwise a ConfigSet isn't really immutable and you can't use it as a template), but there is no reason we have to limit the modifiable properties to just immutability on copy.  As for exposing a generic properties interface outside of copy, that seems reasonable as well, though it's not on my short to-do list.  But we could have something like\n\n/admin/configs/myConfig/properties GET/PUT/POST style interfaces. ",
            "id": "comment-14616984"
        },
        {
            "date": "2015-07-10T19:09:10+0000",
            "author": "Gregory Chanan",
            "content": "Updated version of the patch.  Changes:\n\n1) ConfigSets now support \"properties\" in the form of a NamedList rather than a single boolean immutable\n2) ConfigSet properties can now be specified in a file called configsetprops.json that is loaded from the resource handler (i.e. same logic as solrconfig/schema, name of file can also be overridden via CoreDescriptor)\n3) JSON parsing and test for ConfigSet properties file; expects a JSON map to be specified\n\nNote to support 2) above I had to change some error handling around in the resource loader to be able to figure out if a file exists or not (the resource loader throws an IOException if the file can't be found or it can't be open due to permission issues, etc).  Since it is okay for a configsetprops.json file not to exist, this seemed like a logical change.  Another way to approach this would be to only search for the file in the conf dir (so avoid using the resource loader); I don't really have a preference either way. ",
            "id": "comment-14622774"
        },
        {
            "date": "2015-07-13T21:06:49+0000",
            "author": "Mark Miller",
            "content": "Did a quick review.\n\nI had to change some error handling around in the resource loader to be able to figure out if a file exists or not\n\nThat seems fine to me.\n\nRest of the patch all looks good to me as well. I'm +1. ",
            "id": "comment-14625347"
        },
        {
            "date": "2015-07-13T22:01:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1690828 from gchanan@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1690828 ]\n\nSOLR-7742: Support for Immutable ConfigSets ",
            "id": "comment-14625446"
        },
        {
            "date": "2015-07-13T22:12:25+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1690832 from gchanan@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1690832 ]\n\nSOLR-7742: Support for Immutable ConfigSets ",
            "id": "comment-14625464"
        },
        {
            "date": "2015-07-13T22:13:08+0000",
            "author": "Gregory Chanan",
            "content": "Thanks for the reviews, Mark and Yonik.  Committed to trunk and 5.3. ",
            "id": "comment-14625467"
        },
        {
            "date": "2015-07-21T19:51:10+0000",
            "author": "Anshum Gupta",
            "content": "Hi Greg, I've been seeing a lot of Exceptions like the one below after this commit\n\norg.apache.solr.core.SolrResourceNotFoundException: Can't find resource 'configsetprops.json' in classpath or '/configs/conf1', cwd=/Users/anshumgupta/workspace/lucene-trunk/solr/build/solr-core/test/J0\n   [junit4]   2> \tat org.apache.solr.cloud.ZkSolrResourceLoader.openResource(ZkSolrResourceLoader.java:99)\n   [junit4]   2> \tat org.apache.solr.core.ConfigSetProperties.readFromResourceLoader(ConfigSetProperties.java:49)\n   [junit4]   2> \tat org.apache.solr.core.ConfigSetService.createConfigSetProperties(ConfigSetService.java:114)\n   [junit4]   2> \tat org.apache.solr.core.ConfigSetService.getConfig(ConfigSetService.java:76)\n   [junit4]   2> \tat org.apache.solr.core.CoreContainer.create(CoreContainer.java:668)\n   [junit4]   2> \tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:397)\n   [junit4]   2> \tat org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:388)\n   [junit4]   2> \tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n   [junit4]   2> \tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor$1.run(ExecutorUtil.java:156)\n   [junit4]   2> \tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n   [junit4]   2> \tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n   [junit4]   2> \tat java.lang.Thread.run(Thread.java:745)\n\n\n\nP.S: I've noticed this while running the tests generally. ",
            "id": "comment-14635703"
        },
        {
            "date": "2015-07-21T19:55:21+0000",
            "author": "Noble Paul",
            "content": "Yes I see this error often ",
            "id": "comment-14635708"
        },
        {
            "date": "2015-07-21T20:08:48+0000",
            "author": "Gregory Chanan",
            "content": "Do you have a specific test case I can look at? ",
            "id": "comment-14635730"
        },
        {
            "date": "2015-07-22T00:28:11+0000",
            "author": "Gregory Chanan",
            "content": "ok, that isn't indicative of an error, it's just logged at info level giving info about where it looked for the properties (it's not an error to not find the properties).  I agree it's not ideal because people tend to assume something is serious when they see a stacktrace. ",
            "id": "comment-14636061"
        },
        {
            "date": "2015-07-22T00:44:20+0000",
            "author": "Gregory Chanan",
            "content": "Here's a patch to improve the logging:\n\n\n\tMakes it more obvious it's not an error, i.e. says \"assuming default properties\"\n\tOnly prints the exception message, not the stacktrace\n\n ",
            "id": "comment-14636075"
        },
        {
            "date": "2015-07-22T07:34:53+0000",
            "author": "Anshum Gupta",
            "content": "LGTM, thanks Greg. Minor, but this would be a better user experience. ",
            "id": "comment-14636438"
        },
        {
            "date": "2015-07-22T12:22:04+0000",
            "author": "Noble Paul",
            "content": "More often than not configsetprops.json is not present . So why surprise users with any message Just drop the message altogether ",
            "id": "comment-14636805"
        },
        {
            "date": "2015-07-22T12:57:54+0000",
            "author": "Mark Miller",
            "content": "+1 - I think logging it is useful as long as it's clear it's an expected situation and the logging is really just for user and dev debugging. ",
            "id": "comment-14636873"
        },
        {
            "date": "2015-07-22T18:03:59+0000",
            "author": "Anshum Gupta",
            "content": "+1 on logging it. ",
            "id": "comment-14637315"
        },
        {
            "date": "2015-07-22T18:18:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1692309 from gchanan@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1692309 ]\n\nSOLR-7742: Avoid stacktrace in info logging ",
            "id": "comment-14637351"
        },
        {
            "date": "2015-07-22T18:19:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1692310 from gchanan@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1692310 ]\n\nSOLR-7742: Avoid stacktrace in info logging ",
            "id": "comment-14637353"
        },
        {
            "date": "2015-07-22T18:19:21+0000",
            "author": "Gregory Chanan",
            "content": "Thanks for the feedback, committed to trunk and 5x. ",
            "id": "comment-14637355"
        },
        {
            "date": "2015-08-26T13:06:30+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Bulk close for 5.3.0 release ",
            "id": "comment-14713349"
        }
    ]
}