{
    "id": "SOLR-3161",
    "title": "Use of 'qt' should be restricted to searching and should not start with a '/'",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [
            "Admin UI",
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I haven't yet looked at the code involved for suggestions here; I'm speaking based on how I think things should work and not work, based on intuitiveness and security. In general I feel it is best practice to use '/' leading request handler names and not use \"qt\", but I don't hate it enough when used in limited (search-only) circumstances to propose its demise. But if someone proposes its deprecation that then I am +1 for that.\n\nHere is my proposal:\n\nSolr should error if the parameter \"qt\" is supplied with a leading '/'. (trunk only)\nSolr should only honor \"qt\" if the target request handler extends solr.SearchHandler.\nThe new admin UI should only use 'qt' when it has to. For the query screen, it could present a little pop-up menu of handlers to choose from, including \"/select?qt=mycustom\" for handlers that aren't named with a leading '/'. This choice should be positioned at the top.\nAnd before I forget, me or someone should investigate if there are any similar security problems with the shards.qt parameter. Perhaps shards.qt can abide by the same rules outlined above.\n\nDoes anyone foresee any problems with this proposal?\n\nOn a related subject, I think the notion of a default request handler is bad - the default=\"true\" thing. Honestly I'm not sure what it does, since I noticed Solr trunk redirects '/solr/' to the new admin UI at '/solr/#/'. Assuming it doesn't do anything useful anymore, I think it would be clearer to use <requestHandler name=\"/select\" class=\"solr.SearchHandler\"> instead of what's there now. The delta is to put the leading '/' on this request handler name, and remove the \"default\" attribute.",
    "attachments": {
        "SOLR-3161-dispatching-request-handler.patch": "https://issues.apache.org/jira/secure/attachment/12516352/SOLR-3161-dispatching-request-handler.patch",
        "SOLR-3161_limit_qt=_____to_refer_to_SearchHandlers,_and_shards_qt_likewise.patch": "https://issues.apache.org/jira/secure/attachment/12519630/SOLR-3161_limit_qt%3D_____to_refer_to_SearchHandlers%2C_and_shards_qt_likewise.patch",
        "SOLR-3161-disable-qt-by-default.patch": "https://issues.apache.org/jira/secure/attachment/12517878/SOLR-3161-disable-qt-by-default.patch",
        "SOLR-3161_make_the_slash-select_request_handler_the_default.patch": "https://issues.apache.org/jira/secure/attachment/12520067/SOLR-3161_make_the_slash-select_request_handler_the_default.patch",
        "SOLR-3161_handleSelect=false_and_register_slash-select_handler.patch": "https://issues.apache.org/jira/secure/attachment/12531372/SOLR-3161_handleSelect%3Dfalse_and_register_slash-select_handler.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-13215823",
            "date": "2012-02-24T19:02:01+0000",
            "content": "For some context on the security ramifications, see my comment on the linked issue: https://issues.apache.org/jira/browse/SOLR-1233?focusedCommentId=13169425&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13169425 "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13215827",
            "date": "2012-02-24T19:11:35+0000",
            "content": "How about we just get rid of \"qt\" altogether and make everything be path-based?   Internally, request handlers can be defined with a \"rh_name\"  but it'll implicitly be the path.  (and if it is prefixed with a / then we'll just leave it as it works now as a path, of course).  In other words, we can be flexible about whether the name itself has a / in front or not, but same effect either way. Is there a need to continue to support qt at all?  Why?   And in the example configuration we can simply register a \"select\" request handler (that would be mapped to /select).\n\nI concur, no need to have a default setting... /select can be defined and used, otherwise only the request handlers defined can be used. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13215830",
            "date": "2012-02-24T19:16:50+0000",
            "content": "+1 then we can get rid of the \"handleSelect\" logic in RequestDispatcher (this was added when we converted from Servlet to Filter and allowed path based handlers) "
        },
        {
            "author": "David Smiley",
            "id": "comment-13215878",
            "date": "2012-02-24T20:24:44+0000",
            "content": "Well that's a total reversal of opinion Erik (being the one behind SOLR-1233), and I'm glad!\n\n+1 for getting rid of \"qt\" altogether.\n\nBut that may be difficult:\n\n\tThe PingRequestHandler uses 'qt' as is clear in the solrconfig.xml.\n\tfirstSearcher & newSearcher configured in solrconfig.xml can't pick a request handler then.  It would be nice if they could, they really should IMO.\n\n\n\nPerhaps the solution to the above is \"qt\" becomes an internal-only feature that doesn't work from the dispatching servlet filter \u2013 the filter would throw an error if present.  And heck, why don't we rename this thing to \"requestHandler\" while we're at it?\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13215889",
            "date": "2012-02-24T20:45:15+0000",
            "content": "Well that's a total reversal of opinion Erik (being the one behind SOLR-1233), and I'm glad!\n\nNot quite a reversal - but rather a cleaning up.  If we're going to support qt, then it should support any request handler, IMO.  But qt is 1) not an intuitive name at all, and 2) silly given that we should use paths instead for so many reasons.\n\nwhy don't we rename this thing to \"requestHandler\" while we're at it?\n\nI'd be ok with just \"rh\"  \n\nPingRequestHandler and firstSearcher/newSearcher\n\nI see the argument for an internal only \"rh\" parameter, but still seems it shouldn't be necessary to even have that, such that we could dispatch to a request handler internally directly without having to specify qt/rh/requestHandler as a query parameter.  How we do that, I'm not sure yet though.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13215897",
            "date": "2012-02-24T20:49:33+0000",
            "content": "Eh... if we keep \"qt\" in any capacity, it should still be named \"qt\". "
        },
        {
            "author": "David Smiley",
            "id": "comment-13215982",
            "date": "2012-02-24T22:06:28+0000",
            "content": "I see the argument for an internal only \"rh\" parameter, but still seems it shouldn't be necessary to even have that, such that we could dispatch to a request handler internally directly without having to specify qt/rh/requestHandler as a query parameter. How we do that, I'm not sure yet though.\n\nIt seems unavoidable that an internal request handler parameter name be used for the config file in these couple places.  I don't think that's a big deal and I think it can be retained in a way that still brings some overall code clarity, security, and even lines-of-code reduction.  And I guess Yonik's right about keeping the old name, even though it's a bad one. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13216000",
            "date": "2012-02-24T22:27:02+0000",
            "content": "And I guess Yonik's right about keeping the old name, even though it's a bad one.\n\nI don't think its fair to call it a \"bad\" one \u2013 it is just no longer the most appropriate name.  \"qt\" came from before RequestHandlers existed.  Old names is the tradeoff we have with strong back-compatibility "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13216961",
            "date": "2012-02-26T23:45:29+0000",
            "content": "I'm +1 to the original improvements in this ticket, i.e. restricting qt for searching and disallowing qt's starting with \"/\".\n\nHowever, I can't see how forcing people into a path-only style of selecting RH configs is a benefit. The ability to stay at /select and switch between various named RHs through a simple request param is a strength in my experience. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13217199",
            "date": "2012-02-27T14:14:34+0000",
            "content": "However, I can't see how forcing people into a path-only style of selecting RH configs is a benefit. The ability to stay at /select and switch between various named RHs through a simple request param is a strength in my experience.\n\nI've thought this way too, because it does make it convenient to just use /select for everything.  However, for filtering and security of requests, path-based is much better.  I'm of the opinion that if we have qt, it should not be restricted, but even better is to do away with qt and let request handlers define request paths.  Ultimately I'd like to see Solr's request handling be much simpler and cleaner, less \"magic\". "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13217373",
            "date": "2012-02-27T18:44:03+0000",
            "content": "Since when did we start focusing on security in Solr's APIs? The policy has been that Solr is by design insecure and must be locked down. I agree that not knowing that it is possible to do /select?qt=/update may lead someone to expose full access to Solr to external clients, and it would not hurt to plug that hole. But in my opinion qt=<name> is as much part of Solr's public APIs and toolset as is hl=true, and we should think before simplifying this. We're not talking about using /select for \"everything\", but have the ability to use for querying.\n\nI've had customers with external frameworks supporting Solr, but not supporting multiple different query URLs. Solr query URL is typically configured once in a config. However, the ability to plug in qt dynaically for different parts of the GUI saves the day. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13217382",
            "date": "2012-02-27T18:47:47+0000",
            "content": "-0\n\n1) there are plenty of people who are happily using \"qt\" to dynamicly pick their request handler who don't care about securing their solr instances \u2013 we shouldn't break things for them if we can avoid it.\n\n2) assuming qt should be allowed only if it is an instance of solr.SearchHandler seems narrow minded to me \u2013 it puts a totally arbitrary limitation on the ability for people to have their own request handlers that are treated as \"first class citizens\" and seems just as likely to lead to suprise and frustration as it is to appreciation for the \"safety\" of the feature (not to mention it procludes perfectly safe \"query\" type handlers like MLTHnadler and AnalysisRequestHandler\n\n\nif he root goal is \"make solr safer for people who don't want/expect \"qt\" based requests then unless i'm overlooking something it seems like there is a far simpler and more straightforward solution...\n\na) change the example solrocnfig to use handleSelect=\"false\"\nb) remove the (long ago deprecated) SolrServlet\n\nif handleSelect == false, then the request dispatcher won't look at \"/select\" requests at all (unless someone has a handler named \"/select\") and it would do dispatching based on the \"qt\" param.  currently if that's false the logic falls throough to the SolrServlet, but if that's been removed then the request will just fail.\n\nSo new users who copy the example will have only path based request handlers by default, and will have to go out of their way to set handleSelect=true to get qt based dispatching.\n\nBonus points: someone can write a DispatchingRequestHandler that can optionally be configured with some name (such as \"/select\") and does nothing put look for a \"qt\" param and forward to the handler with that name \u2013 but it can have configuration options indicating which names are permitted (and any other names would be rejected)\n\n...on the whole, compared to the original suggestion in this issue, that seems a lot safer for people who want safety, and a lot simpler to document.\n\ncomments?  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13217401",
            "date": "2012-02-27T19:07:32+0000",
            "content": "Since when did we start focusing on security in Solr's APIs? The policy has been that Solr is by design insecure and must be locked down.\n\n+1\n\nSecurity and Accessibility often fight, and we've generally chosen the side of making things easy when it does come to a conflict.  As always though, it depends on the specific issue. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13217409",
            "date": "2012-02-27T19:14:23+0000",
            "content": "I thinks its nice that you can currently set up various handler with all of the different parameters, etc set up in your config and then clients don't have to worry about setting.  (ie...what is the secret sauce for relevance, anyway, and which spelling dictionary goes with which \"qf\" list?, etc)  Its just easier to have this all in the configuration.  This is the beauty of \"qt\" so whatever solution we find here, I'd really like it if this beauty doesn't get spoiled.\n\nBy the way, when we were converting an app from Endeca, we used \"qt\" to roughly emulate Endeca's \"search interface\" concept, which is basically like a dismax request handler that behaves as if it were a field.  Imagine having multiple \"qt\"s (Request Handlers) set up, each with its own \"qf\", spelling config, highlighter config, etc, and then being able to do something like this: q=Handler1+this +that) AND Handler2:(something else) .  Someday I would love to see this kind of enhancement (best I could tell you can't do anything like this even with local params).  But if we lock down qt too much or eliminate it altogether, we might make it harder to have this kind of possibility in the future. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13217489",
            "date": "2012-02-27T20:06:48+0000",
            "content": "I'll just leave this with my final thoughts on it from an architecture/elegance perspective... paths represent resources, or perhaps rather \"views\" of resources.  Solr serves up sets of content, basically.  Treating these views into sets/subsets as first class \"resources\" HTTP-wise (HTTP being something we really tout in Solr-land as a big fat value-add over other networking protocols, caching/proxies/etc-wise, tried/true APIs everywhere) to me just seems like the Right Thing to do.\n\nAdmittedly a RESTafarian, I realize it's a toematoe/tamahtoe-qt/path here, as path/request-param, 6 of 1 down low.  \n\nAs always Hoss has a way of proposing solutions to disagreements with some poignant clarity.  So I'm +1 to this approach:\n\n\nif he root goal is \"make solr safer for people who don't want/expect \"qt\" based requests then unless i'm overlooking something it seems like there is a far simpler and more straightforward solution...\n\na) change the example solrocnfig to use handleSelect=\"false\"\nb) remove the (long ago deprecated) SolrServlet\n\nif handleSelect == false, then the request dispatcher won't look at \"/select\" requests at all (unless someone has a handler named \"/select\") and it would do dispatching based on the \"qt\" param. currently if that's false the logic falls throough to the SolrServlet, but if that's been removed then the request will just fail.\n\nSo new users who copy the example will have only path based request handlers by default, and will have to go out of their way to set handleSelect=true to get qt based dispatching.\n\nI'll give this a trunk whirl myself shortly and see how it goes.  I like it the compromise and the example enforcement of \"best practices\".\n\nBonus points: someone can write a DispatchingRequestHandler that can optionally be configured with some name (such as \"/select\") and does nothing put look for a \"qt\" param and forward to the handler with that name \u2013 but it can have configuration options indicating which names are permitted (and any other names would be rejected)\n\nLOL - true true.  Better that it exist as an explicit Dispatching implementation, if you ask me, though.  Ironicly, once upon a time... LookupDispatchAction\n\nDefinitely +1 to including the Bonus Points into the equation too.  Thanks Hoss for stating the nicely obvious way forward. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13217548",
            "date": "2012-02-27T20:54:35+0000",
            "content": "Since when did we start focusing on security in Solr's APIs?\n\n!! (jaw dropping awe) Not soon enough!  Apparently its when I started looking into it, some 5+ years after Solr was released.  Jan, if I submitted an optional feature to Solr, perhaps a servlet filter that errors if parameters don't meet certain patterns, would you -1 it on principle?\n\nYes, steps need to be taken to lock Solr down; I don't disagree with that.  I think there is a reasonable intuitive expectation that /select will only query data and surprisingly this is false.  I've made this incorrect assumption both in how I've deployed Solr, how I've explained how Solr be secured in my book, and how I've seen others explain how Solr can be secured.  I don't think this is simply an issue of awareness (i.e. documentation).\n\nThe bare minimum I will not \"-1\" (not that my vote counts, I'm not a PMC member), is for \"qt\" to not work with a leading slash, particularly in the default config, and right away in 3x.  Consequently, the admin UI should not use it as such in order for the search screen to work.\n\nSo there's enough interest here to keep \"qt\".  Okay, fine with me.\n\nWhat I would like to see is for it to be brain-dead simple to explain how a request handler is chosen.  The <requestDispatcher handleSelect=\"true\"> setting and <requestHandler default=\"true\"> setting both seem to complicate the explaination and so I think they should go away.  All out of the box solrconfig.xml request handlers should have a name starting with '/'.  On a request handler that supports \"qt\", an attribute should need to be added enableQt=\"true\" added to the request handler.  When qt is enabled, it dispatches to the named request handler, but it must not start with a leading '/'.  Isn't this a simple explanation, and yet is still customizable with 'qt'?  If agreed upon, I imagine this proposal would target 4.0. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13217678",
            "date": "2012-02-27T23:16:05+0000",
            "content": "!! (jaw dropping awe) Not soon enough! Apparently its when I started looking into it, some 5+ years after Solr was released. Jan, if I submitted an optional feature to Solr, perhaps a servlet filter that errors if parameters don't meet certain patterns, would you -1 it on principle?\n\nNo I wouldn't. Security is very important in some environments and in fact I'd like us to start supporting those use cases better, such as writing a generic document-level security component for various connector frameworks (such as MCF) to hook in to. But I'm very clear on that we should not start documenting ways to secure Solr/Tomcat/Jetty in a way that is suitable for public exposure - simply because that is a slippery slope and would give users the impression that Solr is secure and needs no further locking down. But for this issue I'm more interested in the functionality aspect.\n\nI must admit that the way I use qt in my projects is nothing more than a way to select a named instance of a *Search*RequestHandler with request-param defaults. So the fact that qt can completely switch to any RequestHandler is really too generic and seldom used. In that context your suggestion for a enableQt=\"true\" param could make sense. If you enable it for all RH's, QT will work as today, or you can pick a few. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13218331",
            "date": "2012-02-28T16:32:14+0000",
            "content": "Hoss,\n  In your view, is there any value in retaining the <requestDispatcher handleSelect=\"true\"> setting and <requestHandler default=\"true\"> setting for trunk?  They seem legacy to me; I've never messed with them and I doubt anyone does but I don't know.  Whatever their defaults may be or should be, I think their presence complicates keeping things simple, yet I'm unsure if their omission would result in any real loss of capability.  I'm wondering what you think of my simplified proposal where I started saying \"What I would like to see is for it to be brain-dead simple\"...). "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13218356",
            "date": "2012-02-28T17:04:46+0000",
            "content": "I just attached a patch as an example along the lines of what Hoss proposed.  I removed default=\"true\", renamed \"search\" to \"/select\", and set handleSelect=\"false\".  Then I added some request handlers:\n\n\n\tlazy - a lazy loaded search request handler\n\tnotlazy - a concrete (not lazy loaded) search request handler\n\t/dispatch - a DispatchingRequestHandler that uses qt to look up a non-lazy loaded SearchRequestHandler and dispatches to that\n\t/handlers - just a quick/easy way for me to see the defined request handlers (using the handlers.vm) template\n\n\n\nHere are some requests and their effect:\n\nhttp://localhost:8983/solr/handlers\n\n - [/admin/plugins]  - org.apache.solr.handler.admin.PluginInfoHandler@428d5aad\n - [/admin/system]  - org.apache.solr.handler.admin.SystemInfoHandler@4e3c35fd\n - [notlazy]  - org.apache.solr.handler.component.SearchHandler@52fc9d2b\n - [/admin/file]  - org.apache.solr.handler.admin.ShowFileRequestHandler@46b29c9d\n - [/dispatch]  - org.apache.solr.handler.component.DispatchingRequestHandler@78482bad\n - [/admin/luke]  - org.apache.solr.handler.admin.LukeRequestHandler@4a2ba88c\n - [/update/javabin]  - org.apache.solr.handler.BinaryUpdateRequestHandler@7846a55e\n - [/update]  - org.apache.solr.handler.XmlUpdateRequestHandler@6612fc02\n - [/terms]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@685f1ba8\n - [/admin/threads]  - org.apache.solr.handler.admin.ThreadDumpHandler@3c10e820\n - [/replication]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@79f7abae\n - [/analysis/field]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@73286b10\n - [lazy]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@628d2280\n - [/browse]  - org.apache.solr.handler.component.SearchHandler@50c7833c\n - [/admin/ping]  - org.apache.solr.handler.PingRequestHandler@3e5646a5\n - [/analysis/document]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@5da5e65f\n - [/select]  - org.apache.solr.handler.component.SearchHandler@36b79701\n - [/admin/mbeans]  - org.apache.solr.handler.admin.SolrInfoMBeanHandler@4f1adeb7\n - [/update/csv]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@6d13e8f3\n - [/handlers]  - org.apache.solr.handler.DumpRequestHandler@3622e177\n - [/elevate]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@2c006765\n - [/update/xslt]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@4e842e74\n - [/update/json]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@4805e9f1\n - [/get]  - org.apache.solr.handler.RealTimeGetHandler@7c41f227\n - [/update/extract]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@4d811e2c\n - [/admin/properties]  - org.apache.solr.handler.admin.PropertiesRequestHandler@57e40274\n - [tvrh]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@3a5d3ac0\n - [/spell]  - org.apache.solr.core.RequestHandlers$LazyRequestHandlerWrapper@3ebc312f\n - [/debug/dump]  - org.apache.solr.handler.DumpRequestHandler@354124d6\n\n\n\nhttp://localhost:8983/solr/select?q=*:*\n\n\treturns our tried and true Solr response\n\n\n\nhttp://localhost:8983/solr/dispatch?q=*:*&qt=lazy\n\n\treturns HTTP 400 with \"Must be a SearchHandler: lazy\"\n\n\n\nhttp://localhost:8983/solr/dispatch?q=*:*&qt=notlazy\n\n\treturns HTTP 200 using the \"notlazy\" request handler's response\n\n\n\nAnd of course you can with this patch, but maybe that's silly to allow, do this request http://localhost:8983/solr/dispatch?q=*:*&qt=/select\n\n\twhich dispatches to /select, basically the same as http://localhost:8983/solr/select?q=*:*\n\n\n\nI personally really like the idea of qt not being special at all, yet if you do want to use something like that that you wire in a DispatchingRequestHandler.  In fact, I'll go so far as to say that Solr's main dispatching filter shouldn't use any query string parameters, and only request handlers themselves use them.  (that begs the question about wt, but there's HTTP mechanisms for specifying the format you desire a \"resource\" in .  I'll digress on that last point.  The gist here is that with some simple config tweaks and a dispatcher, you can have your cake and eat it too. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13218357",
            "date": "2012-02-28T17:12:43+0000",
            "content": "p.s. What's \"SolrServlet\"?   That must be way legacy out of trunk kinda thing?   I think setting handleSelect=\"false\" itself does the trick in preventing qt from dispatching without a DispatchingRequestHandler. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13218521",
            "date": "2012-02-28T19:32:14+0000",
            "content": "Erik,\n  Cool.  I hope you verified that /select?qt=/.... fails.  What are your thoughts on my question to Hoss? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13218530",
            "date": "2012-02-28T19:40:20+0000",
            "content": "I hope you verified that /select?qt=/\n\nDid you mean that literally, as a single /?   Anyway, with my patch (handleSelect=false and \"/select\" replacing the default \"search\" request handler), qt is nothing special.  So /select?qt=/ is the same as /select since /select handler itself ignores qt.\n\nWhat are your thoughts on my question to Hoss?\n\nIMO, if we're going the way of this DispatchingRequestHandler, then handleSelect should always be \"false\" and there should be no default request handler.  Just map what you want to \"/select\" to make it the \"default\" since that's what the convention is. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13219303",
            "date": "2012-02-29T16:05:45+0000",
            "content": "I meant qt=/update  for example, or anything with a leading slash really.  I understand now that qt won't be interpreted in this case.\n\nWhen you say:\nhandleSelect should always be \"false\" and there should be no default request handler\nTo clarify, are you saying not only the configuration but whatever code underlies these old concepts/features?  That sounds great to me since it would ease code maintenance and would simplify explaining how request handlers are dispatched. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13219430",
            "date": "2012-02-29T19:20:50+0000",
            "content": "I understand now that qt won't be interpreted in this case.\n\nRight, in my patch, only DispatchingRequestHandler does anything with qt.  If a request comes into /select with a qt, it might as well be /select?foo=bar and is just ignored.\n\n\"handleSelect should always be \"false\" and there should be no default request handler\" -  To clarify, are you saying not only the configuration but whatever code underlies these old concepts/features? \n\nI'm going to revise my patch where handleSelect defaults to false and thus won't even be needed in the example config, so I'm removing some comments about that in there.  I realize we may want to kitchen-sink the example config and call this out, or not.  I like the idea of a super lean \"example\"/\"minimal\" config with barely anything spelled out in there because our defaults just cover the best practices for the 80% or so of cases. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13219433",
            "date": "2012-02-29T19:23:28+0000",
            "content": "And I'm not really sure what a \"default\" setting on a handleSelect=\"false\" scenario means.  If you want to use /select as the gateway, have a /select handler declared, without any other \"magic\" involved.  Does default have any operation (I'm having trouble following SolrDispatchFilter's logic fully) when handleSelect=\"false\"?   I'm not seeing it yet. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13219442",
            "date": "2012-02-29T19:35:35+0000",
            "content": "updated patch with handleSelect defaulting to false and removed from example solrconfig.  Tidied /handlers view a little too. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13221383",
            "date": "2012-03-03T00:25:23+0000",
            "content": "+1 Erik. Like the \"/handlers\" view (should it be /admin/handlers?)\nIt is then possible to register the dispatchingRH as /select with a default qt set to the standard handler, and achieve backward compat for old applications.\n\nDo we want to provide backward compat based on LuceneMatchVersion for these changes? If someone with a 3.x config upgrades to 4.0 (or 3.6), their search should work as before even if they don't have an explicit \"/select\" handler in their config. The extra logic we need for this is appx:\n\nif luceneVersion < LUCENE_36:\n  $defaultHander = the handler with default=\"true\"; else \"search\"\n  register a \"/select\" handler being a Dispatching one with qt=$defaultHandler\n}\n\n\n\nThis way we emulate the old behavior without keeping the old code, just adding some backcompat code. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13226381",
            "date": "2012-03-09T19:54:15+0000",
            "content": "I think we need to come up with something for 3x soon.  I think and hope we can find broad agreement on some things.  I think we can take a 2-3 incremental steps, starting with a better default configuration.\n\nI took a closer look at Erik's patch as well as some of the Solr code that makes this stuff work.  Judging from the underlying code, if you already have a \"/select\" registered, then the <requestDispatcher handleSelect=\"...\"> setting and the notion of a default request handler, and  \"qt\" is effectively unused/ignored.  \"qt\" is used internally still such as for specifying a handler in query warming.  I really like this and it merely requires changes to the example solrconfig.xml which both simplify it and secure it.  There could be a little comment on how to get \"qt\" to work, if you so choose.  There is actually one other important thing to do which is to make the admin's query UI not use the 'qt'.  I'll sign up to make that happen.\n\nIs anyone against (-1) me developing a simple patch doing the above and committing to 3x?  I will of course attach the patch first for review and it would only include what I refer to in this JIRA comment.\n\nSubsequent to the above, I'm still concerned that someone's existing configuration is susceptible to /select?qt=/update. IMO if the path is /select, then qt should not start with a leading '/', thereby safeguarding people's existing default configuration.  If you are -1 to my opinion, speak up. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13226994",
            "date": "2012-03-11T05:38:30+0000",
            "content": "Attached is a patch for 3x called \"SOLR-3161-disable-qt-by-default\".  The tests pass.  Aside from the changes I said I did, there were a couple other changes you will notice in the patch:\n\n\tI made handleSelect default to false, as Erik did in his patch. I did this because if someone were to unwittingly rename /select to /whatever, they would be very surprised to discover that /select still works.  And besides, it's basically legacy behavior in my view.  I added a comment on how to get 'qt' to work in solrconfig.\n\tIn the admin UI query form, I renamed \"Query Type\" to \"Request Handler\" with a default choice of \"/select\" and I moved it to the top where it belongs. I wrote some JavaScript to make it switch the form's action to this value when it starts with a '/'.  I tested in FF & Safari and I queried several times using the back-button in-between to ensure there were no lingering state issue with modifying the form.\n\tI couldn't resist; in the admin UI query form, I renamed the label for 'q' from \"Solr/Lucene Statement\" to be \"Query String\" which is the same label seen on the front page.\n\n\n\nIt should be noted that my patch proposal and Erik's before it are about improving the default configuration such that qt doesn't even work without taking steps to enable it, vs making 'qt' safer which is what the title of this issue is.\n\nI'll commit this ~ Tuesday 11am (GMT-5) unless someone objects. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13227300",
            "date": "2012-03-12T02:57:03+0000",
            "content": "It's not clear... do these proposals eliminate the possibility of using qt=/myhandler?  I'm not sure we should be removing functionality that many have found useful.\n\nedit: a quick look at the patch suggests that (after enabling qt) that leading-slash named handlers will still be accessible via qt - but I couldn't discern the final intention from the various comments in this issue.\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13227316",
            "date": "2012-03-12T04:52:26+0000",
            "content": "That's right Yonik; this patch is just the first step though.  In the next step, I am hoping to safeguard user's existing configuration from unintentional qt=/update.  Two solutions come to mind:\n\n\tThrow an error if qt starts with '/'.\n\tThrow an error if qt points to a request handler that is NOT an instance of SearchHandler (subclasses are ok).\n\n\n\nOr some combination of the above, including adding a config flag making qt=/update possible.  Gosh that's messed up though, IMO.\n\nWhat do you think? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13227543",
            "date": "2012-03-12T14:01:51+0000",
            "content": "It's not clear... do these proposals eliminate the possibility of using qt=/myhandler? I'm not sure we should be removing functionality that many have found useful.\n\nMy DispatchingRequestHandler currently (but only as a first draft) handles /-prefixed handlers to dispatch to them.  But only if they are instanceof SearchHandler.  Without DispatchingRequestHandler, and handleSelect=false, no qt dispatching is possible.\n\nedit: a quick look at the patch suggests that (after enabling qt) that leading-slash named handlers will still be accessible via qt - but I couldn't discern the final intention from the various comments in this issue.\n\nAgain, yes, currently, but only if it is a SearchHandler.  There's a TODO in there to consider eliminating dispatching to /-prefixed handlers.  I'm +1 on that.  But it could be made even more flexible such that a list of allowed handlers is provided, or a regex pattern, or ... whatever.  I just like that the crazy dispatching logic is moved out of SolrDispatchFilter and simplified, making it entirely up to the designer of the configuration to determine whether to wire in the DispatchingRequestHandler as /select or not.  I'd generally prefer not, leaving everything as /-prefixed handlers that can only be dispatched to directly with no qt magic capability whatsoever. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13227609",
            "date": "2012-03-12T15:29:22+0000",
            "content": "I don't think we should remove the ability to use qt with /-prefixed handlers, esp since the current patch here would disable \"qt\" by default. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13227619",
            "date": "2012-03-12T15:39:37+0000",
            "content": "BTW I forgot to add a CHANGES.txt in my patch pending commit; it will be as follows:\n\nUpgrading from Solr 3.5\n----------------------\nSOLR-3161: <requestDispatcher handleSelect=\"false\"> is now the default.  An existing config will probably work as-is because handleSelect was explicitly enabled in default configs. HandleSelect makes /select work as well as enables the 'qt' parameter.  Instead, consider explicitly configuring /select as is done in the example solrconfig.xml, and register your other search handlers with a leading '/' which is a recommended practice. \n\nErik, I very much agree with your sentiment that the dispatching logic get moved out of SolrDispatchFilter and get simplified and made configurable and clear in the solrconfig.xml. IMO, the current situation should stay in place in 3x (notwithstanding additions of safety checks to prevent qt=/update).  4x/trunk could then get your DispatchingRequestHandler (credit to Hoss for the idea) and removal of SolrRequestDispatcher's handleSelect.\n\nBy the way, I suspect that assuming \"/select\" works is so ingrained into various parts of Solr, that we may want to log a warning if there isn't one registered at this path.  Maybe I'm wrong but we'll see as we proceed. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13227629",
            "date": "2012-03-12T15:50:38+0000",
            "content": "Yonik: I don't think we should remove the ability to use qt with /-prefixed handlers, esp since the current patch here would disable \"qt\" by default.\n\nOk.  In my view, the worst part of qt=/update is that it's not actually a search.  I'd love adding the SearchHandler instanceof restriction.  However Hoss says he doesn't like it:\n\n2) assuming qt should be allowed only if it is an instance of solr.SearchHandler seems narrow minded to me \u2013 it puts a totally arbitrary limitation on the ability for people to have their own request handlers that are treated as \"first class citizens\" and seems just as likely to lead to suprise and frustration as it is to appreciation for the \"safety\" of the feature (not to mention it procludes perfectly safe \"query\" type handlers like MLTHnadler and AnalysisRequestHandler\n\nHoss, my answer to you is to not use 'qt' for these cases; register the handlers with a leading '/', and for that matter, Erik and I suggest that 'qt' not get used at all although we acknowledge it's still there for those that love it.\n\nPerhaps the restriction to appease most people's wishes should be to error IFF qt starts with a '/' AND it doesn't extend SearchHandler.\n\n~ David "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13228599",
            "date": "2012-03-13T19:03:48+0000",
            "content": "David - I see you committed a bit of this to 3.x.  For the record, I'm -0 on this going to 3.x simply because it's possibly going to cause traumatic issues for some (or many?) environments.  I worry that there will be projects that don't have handleSelect=\"true\" in their config, yet they rely on /select?qt=....   We'll see.\n\nWere you going to make the same changes to 4.x? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13228622",
            "date": "2012-03-13T19:20:09+0000",
            "content": "I gave notice.  As I understand it, handleSelect=\"true\" has been explicitly in the default configs, and as such I think it's safe.  If you'd like it to be safer, we could make the default value be dependent on the lucene version set in the config file like what Jan suggested:\nhttps://issues.apache.org/jira/browse/SOLR-3161?focusedCommentId=13221383&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13221383\nIf this were done, perhaps the CHANGES.txt isn't even necessary?\n\nI am waiting committing it to 4x until SOLR-3232 so that the admin UI query will work.  Kinda important \n\nRegarding qt=/update what is your opinion on a compromise way forward?  That's the next step. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13228629",
            "date": "2012-03-13T19:29:24+0000",
            "content": "Regarding qt=/update what is your opinion on a compromise way forward?\n\nThe most flexible way would be to add a method to SolrRequestHandler like \"boolean indirectDispatch(req)\" that would work for any type of request handler (and update handlers would default to false).\nBut if one doesn't want this feature bleeding into the whole request handler architecture, we could distinguish update handlers from other handlers by adding a new base class or a marker interface. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13228630",
            "date": "2012-03-13T19:30:15+0000",
            "content": "I gave notice.\n\nI know... I was just adding that I think it's possible we'll see some backlash to that change on 3.x but maybe not given that folks will most likely have handleSelect=\"true\" in their configs.\n\nRegarding qt=/update what is your opinion on a compromise way forward? \n\nI guess you mean on 3.x.... no opinion there.  On 4.x, my opinion is qt is for the birds, get rid of it  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13228641",
            "date": "2012-03-13T19:45:56+0000",
            "content": "The most flexible way would be to add a method to SolrRequestHandler like \"boolean indirectDispatch(req)\" that would work for any type of request handler (and update handlers would default to false).\n\nPersonally I think using the DispatchingRequestHandler iff you want qt behavior is the way forward here, cleaning up and streamlining the dispatching code.  We already have a base class that can be used for determining if qt should dispatch in this case: SearchHandler.  Adding what you propose adds more complexity than it's worth, IMO. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13228657",
            "date": "2012-03-13T20:16:20+0000",
            "content": "As hoss points out, not all searching request handlers inherit from SearchHandler.\n\nAdding what you propose adds more complexity than it's worth, IMO.\n\nThe ability to distinguish an update handler from a request handler doesn't sound complex...\nthe majority of the cases could be handled by adding \"implements SolrUpdateHandler\" to ContentStreamHandlerBase. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13229154",
            "date": "2012-03-14T12:42:47+0000",
            "content": "As hoss points out, not all searching request handlers inherit from SearchHandler.\n\nThen use /-prefixed handlers for those rather than qt.   Or, simply add whatever logic to the DispatchingRequestHandler that makes sense and let qt dispatching happen there, not from SDF.  The DispatchingRequestHandler in my patch was merely an example; I really don't care what logic is in there to determine what can be dispatched to, as I'd never use it myself.\n\nThe ability to distinguish an update handler from a request handler doesn't sound complex\n\nAgain, I'd say stuff whatever smarts desired down into a dispatching request handler rather than making Solr's top-level dispatching logic more complicated than need be.\n\nBut, I will say that having a better separated class hierarchy for search vs. update handlers is a good thing in general. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13230842",
            "date": "2012-03-16T02:26:46+0000",
            "content": "Note that \"qt\" is needed even for distrib search in some cases... I was just trying to debug the query elevation component by hitting /elevate, and that turned around and hit /select (which doesn't have QEC by default).  So I needed to use shards.qt=/elevate to get it to work.\n\nWe really need to think about if we really want to disable \"qt\" by default... "
        },
        {
            "author": "David Smiley",
            "id": "comment-13233251",
            "date": "2012-03-20T06:21:50+0000",
            "content": "As long as you provide a leading '/' to shards.qt, there is no problem because the sharded request will use that as the path and not use 'qt'.  The smarts that make that happen is largely due to the logic in QueryRequest.getPath().  I just played around with this in tests and stepped through the code to prove it out.\n\nThis does remind me of another attack vector of sorts for what started all this.  Even with qt disabled, this still leaves the possibility of /mysearch?q=...&shards=...&shards.qt=/update.... "
        },
        {
            "author": "David Smiley",
            "id": "comment-13234114",
            "date": "2012-03-21T05:24:40+0000",
            "content": "Choices, choices.\nI should point out that qt with a leading '/' was disallowed once upon a time and the reason was for security.  It unfortunately came back for no good reason (it simplified Erik's work on dataimport.jsp), not because users didn't like this restriction.  In this light, I think reverting to the old behavior is fine \u2013 dataimport.jsp doesn't use qt with a leading '/' anymore, and hence the rationale for supporting a leading '/' is gone.  To avoid breaking anyone who unwittingly depends on this in 3x, an exception can be made when the target is a SearchHandler.  I repeat, nobody asked for \"qt=/...\" nor does anyone need it.\n\nThe shards.qt parameter is not quite qt and it does need to support a leading '/' but Solr dispatches this as the path so the sharded request will never see qt=/update.  But this does need protection somehow \u2013 its actually riskier than 'qt' since it can reach out to a user-specified arbitrary server.  I don't know why shards.qt exists since I don't see what could go wrong if a sharded request were to go to a path other than the original request, but I digress \u2013 it's here.  In this case, I think the SolrDispatchFilter can check if isShard=true and if so then mandate that the target handler extends SearchHandler \u2013 which it should since only a SearchHandler has the shard logic. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13236620",
            "date": "2012-03-23T14:24:32+0000",
            "content": "Attached is a patch for 3x that does two things:\n\n\tSolrDispatchFilter will now throw an error if 'qt' starts with a '/' and doesn't extend from SearchHandler.  I added a test ensuring qt=/update errors.\n\tSolrCore checks if isShard=true and then requires the target request handler to be a SearchHandler.  I added a test for this. The check for this seemed a little out of place but I can't think of anything better.\n\n\n\nAll tests pass.\n\nThe changes.txt entry is: \n\n\tSOLR-3161: Don't use the 'qt' parameter with a leading '/'.  It probably won't work in 4.0 and it's now limited in 3.6 to SearchHandler subclasses that aren't lazy-loaded.\n\n\n\nI propose I commit this to both 3x and trunk in ~2 days to allow time for review.\n\nFor 4.0, I think Erik and I (and Hoss?) are of like minds.  Introduce the uber-flexible DispatchingRequestHandler to handle 'qt', AND remove handleSelect and related code that DispatchingRequestHandler renders obsolete.  Erik and I would never use it but some of you clearly like 'qt'. Deprecated warnings would need to be added to 3.x to warn people about handleSelect=true going away.  I suspect the hardest part of this may be updating old tests that want to use 'qt'.  Thoughts? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13238103",
            "date": "2012-03-26T05:01:33+0000",
            "content": "I committed the last patch (limit qt=/... to SearchHandler) to 3x and trunk as I said I would.\n\nShould DispatchRequestHandler be committed to trunk, in the form that Erik coded it in his last patch or should it see certain improvements first?  I won't be using it so I don't care that much. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13239186",
            "date": "2012-03-27T05:03:19+0000",
            "content": "I was looking at the logs of Solr's example config, unmodified and I noticed something troubling that I haven't noticed before:\n\nWARNING: [] Null Request Handler 'null':{event=firstSearcher&q=static+firstSearcher+warming+in+solrconfig.xml}\n\n\nIt turns out that the default=\"true\" attribute on the request handler actually does something   In RequestHandlers.initHandlersFromConfig() line 164 it checks this flag and registers the handler under the \"\" name.  QuerySenderListener.newSearcher() line 59 does a lookup of \"qt\" from the its configuration (e.g. firstSearcher) getting null and then calling SolrCore.execute(null,...).\n\nGiven that \"/select\" is referenced as a default in about a dozen places in Solr (.java source, excluding tests), it seems to me that if no request handler is marked as default then \"/select\" should become the default automatically (if present).  Interestingly a similar check occurs as the very last line of RequestHandlers.initHandlersFromConfig() but for a request handler named \"standard\" \u2013 which seems like a very old way things used to be (seems like a candidate for updating in Solr 4 to \"/select\").  So I propose that if \"standard\" isn't found, then it tries \"/select\". "
        },
        {
            "author": "David Smiley",
            "id": "comment-13239201",
            "date": "2012-03-27T05:46:39+0000",
            "content": "I attached a simple patch for 3x, and it also marks DEFAULT_REQUEST_HANDLER as deprecated.\n\nIf 4.0, I propose I simply eliminate DEFAULT_REQUEST_HANDLER since the constant is basically not used and \"/select\" is used seemingly everywhere as a string literal.\n\nI thought about a CHANGES.txt entry but it seems too minor. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13239814",
            "date": "2012-03-27T18:47:32+0000",
            "content": "I'll commit the patch ~midnight EST. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13240141",
            "date": "2012-03-28T03:46:39+0000",
            "content": "I committed it to 3x and 4x.  In 4x I removed DEFAULT_REQUEST_HANDLER=\"standard\" constant which wasn't used anywhere after I removed the only reference within the class.  In 4x if a request handler is named \"standard\" it doesn't have an implied default anymore.\n\nI propose this issue get resolved and Erik & Hoss's DispatchingRequestHandler be a separate issue. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13240421",
            "date": "2012-03-28T13:58:14+0000",
            "content": "Reverted on 4x - tests fail. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13240963",
            "date": "2012-03-29T04:42:28+0000",
            "content": "As an aside, this default request handler patch should probably have been another JIRA issue instead of this JIRA issue including several different things including clarifying the default config.\n\nI stupidly committed the patch without testing and it broke the build because solr/core/src/test-files/solr/conf/solrconfig.xml (and possibly other test configs) has a <requestHandler name=\"standard\"> (with no default=\"true\").  Either the config(s) should be updated to be \"/select\" based (which I don't mind doing) or I could add back \"standard\" as eligible for default request handler nomination.  I committed the latter now because it's the safest.  /select should takes precedence.  I also committed a warning message if there is none registered:\n\n    if(get(\"\") == null)\n      log.warn(\"no default request handler is registered (either '/select' or 'standard')\");\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13259005",
            "date": "2012-04-22T05:35:25+0000",
            "content": "I finally committed the remaining piece that was pending to trunk that had already made it to 3.6.  This was for the example solrconfig.xml to not use the handleSelect logic, and to make handleSelect false by default.  I could do this now because the new UI's query form is finally dispatching queries properly instead of always using 'qt' (SOLR-3317).\n\nOh, and I freshened up the wiki page on how the dispatch works: http://wiki.apache.org/solr/SolrRequestHandler#preview\n\nTrunk commit: r1328798\n\nClosing issue and marked for 3.6 as well. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13259051",
            "date": "2012-04-22T08:58:32+0000",
            "content": "I've reverted this commit, David \u2013 it breaks the tests. Don't know how to fix, so revert seems sensible to avoid spamming the mailing list with jenkins failures. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13259085",
            "date": "2012-04-22T14:13:09+0000",
            "content": "It's caused enough problems for our tests - and it will cause a number of people issues while trying to upgrade.  I think we should leave the ability to use \"qt\" enabled by default.  A number of people have expressed the that they find it useful. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13259399",
            "date": "2012-04-23T05:48:56+0000",
            "content": "I swear I ran the tests before committing (which passed) \u2013 I'll try and be more careful somehow.  I used the IntelliJ test runner for all of Solr and I see it fails now.  Strange.\n\nSo the tests that failed did so because of one test config file solrconfig-tlog.xml doesn't have a handleSelect=true on it nor \"/select\" registered, just the old \"StandardRequestHandler\" registered as the name \"standard\".  This file is so short at ~26 lines of XML from <config> to </config>, it clearly was never copied from a Solr example solrconfig.xml.  Interestingly there are some other configuration files done similarly but they have yet to pose a problem.  I looked into why and the reason is that those tests use embedded Solr and thus the default handler is looked up as such via core.getRequestHandler(null) no matter what its name actually is.\n\nNo test has failed because it wanted to use \"qt\" but couldn't.  Instead, tests have failed regarding \"/select\" not working.  The handleSelect option intertwines the two which is unfortunate and unnecessary.  Here's a proposal:  Make handleSelect do just what it's name implies \u2013 handles \"/select\" when \"/select\" isn't registered.  And this is, in effect, to register the default handler under an alias of \"/select\".  The 'qt' feature should be a distinctly separate option, and IMO disabled by default. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13259425",
            "date": "2012-04-23T07:12:21+0000",
            "content": "I swear I ran the tests before committing (which passed) \n\nI'm not saying you didn't, they are randomized after all (don't know if this particular case depends on the seed but it may). I just felt like you might be asleep at the time and jenkins was going bonkers with trying to repeat that build. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13259585",
            "date": "2012-04-23T13:02:24+0000",
            "content": "I used the IntelliJ test runner for all of Solr and I see it fails now. Strange.\n\nI always run the Ant build to make sure I haven't broken the build.  The IntelliJ build differs in some respects, so errors in one system may not manifest in the other. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13278094",
            "date": "2012-05-17T18:55:38+0000",
            "content": "It's caused enough problems for our tests - and it will cause a number of people issues while trying to upgrade. I think we should leave the ability to use \"qt\" enabled by default. A number of people have expressed the that they find it useful.\n\nAgreed \u2013 I see no advantage in changing the default behavior when \"handleSelect\" isn't specified at all in the solrconfig.xml (specificly: this change to SolrRequestParser that was 1/2 of what Dawid reverted) because it causes pain on upgrade (using existing configs) w/o any obvious value that i see.\n\nI do however think the spirit of what David is proposing is a good idea: the example configs that we ship should have handleSelect=\"false\" with a comment explaining what that means, and encouraging people to use path based request handlers instead of setting it to true.\n\nThat said: i don't think the comments added in the other 1/2 of that commit are really the best way to go, because they are only meaningful to someone who upgrades \u2013 not to a new user looking at the config.  Those comments provides no education about handleSelect (and the tradeoffs of using it) to anyone (old user or new).\n\nI would suggest as an alternative something like...\n\n\n  <!-- Request Dispatcher\n\n       This section contains instructions for how the SolrDispatchFilter\n       should behave when processing requests for this SolrCore.\n\n       handleSelect is a legacy option that affects the behavior of requests \n       such as /select?qt=XXX\n\n       handleSelect=\"true\" will cause the SolrDispatchFilter to process\n       the request and dispatch the query to a handler specified by the \n       \"qt\" param\n\n       handleSelect=\"false\" will cause the SolrDispatchFilter to\n       ignore \"/select\" requests, resulting in a 404 unless a handler\n       is explicitly registered with the name \"/select\"\n\n       handleSelect=\"true\" is not recommended for new users, but is the default \n       for backwards compatibility\n    -->\n  <requestDispatcher handleSelect=\"false\" >\n\n\n\n...and later on...\n\n\n  <!-- Request Handlers \n\n       http://wiki.apache.org/solr/SolrRequestHandler\n\n       Incoming queries will be dispatched to a specific handler by name\n       based on the path specified in the request.\n\n       If handleSelect=\"true\" has been specified in the requestDispatcher, \n       then handlers using names without a leading '/' can be accessed \n       with: http://host/app/[core/]select?qt=name\n\n       If handleSelect=\"true\" and a /select request is processed with out \n       a qt param specified, then the requestHandler that declares default=\"true\" \n       will be used.\n       \n       If a Request Handler is declared with startup=\"lazy\", then it will\n       not be initialized until the first request that uses it.\n\n    -->\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-13278571",
            "date": "2012-05-18T04:33:05+0000",
            "content": "v4.0 is the biggest release ever and I thought it would be an opportune time to reconsider defaults of the past.  If this isn't the time, then I don't think there will ever be a time to do it.\n\nAnd so I'll settle with Hoss's suggestion \u2013 handleSelect is true by default in the code (as it has been) but not the config file (as was changed in v3.6), and the new suggested comments are fine.  Should this proposed change be to the v3.6 branch too? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13291566",
            "date": "2012-06-08T06:13:33+0000",
            "content": "Attached is a patch to solrconfig.xml with comments based off of what Hoss suggested.  I'll commit these to 4x & trunk in ~24 hours if no further comment is given. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13292197",
            "date": "2012-06-09T05:13:10+0000",
            "content": "Committed solrconfig.xml changes to 4x & trunk. Closing issue. "
        }
    ]
}