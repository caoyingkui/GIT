{
    "id": "LUCENE-4517",
    "title": "Suggesters: allow to pass a user-defined predicate/filter to the completion searcher",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "New Feature",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "As a user, I'd like to be able to specify a\nfilter during completion lookup which further determines whether some completion should be considered or not. Assume, for example, that I have a suggestion engine for book titles. In my current search, I'm only interested in computer science books, but I can't/don't want to maintain separate WFSTs for each subject area. \n\nGiven some completion candidate, the filter would be called (with a key and/or the completion string as a parameter) to determine whether or not the completion candidate should be added to the result queue. \n\nNote:\n\nAdding a filter/predicate to the AnalyzingSuggester is simple,\nas TopNSearcher<> already uses acceptResult() to test whether some completion should be added - that can be overridden in a derived searcher class which simply calls the predicate. Ideally the suggesters would access some kind of factory to instantiate the searcher to be used (instead of hardwiring it in).\n\n\nDiscussion on java-user:\n\nMike McCandless:\n\nExactly!  One gotchya is you have to be careful about the maxQueueDepth, because if your acceptResult accepts too few results then the queue may have pruned away paths that would have led to a valid topN path ...\n\nWe may also invert all of these FST based suggests, and expose building blocks for apps to build up custom suggesters.  There are many use cases we need to accommodate and we have a ways to converge on a clear API here ...",
    "attachments": {
        "Lucene-trunk-20121026-AnalyzingSuggester.patch": "https://issues.apache.org/jira/secure/attachment/12551528/Lucene-trunk-20121026-AnalyzingSuggester.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-31T12:18:24+0000",
            "content": "Attached Lucene-trunk-20121026-AnalyzingSuggester.patch\n\nAdds predicate evaluation to AnalyzingSuggester, but does not address the queue pruning issue raised by Mike. ",
            "author": "Oliver Christ",
            "id": "comment-13487700"
        },
        {
            "date": "2012-11-02T14:59:03+0000",
            "content": "Maybe, instead of pushing Predicate all the way down to TopNSearcher, since it already has the acceptResult filtering, we could just pass it to the suggester and it consults the predicate?\n\nOr maybe we add an acceptResult method to AnalyzingSuggester and the app can subclass & override that?\n\nI think to deal w/ the queue depth issue ... we should expose (expert) control over this, eg make the queue depth \"multiplier\" a setter/ctor arg/protected member.  This way the app that subclasses could also pass in a larger queue depth. ",
            "author": "Michael McCandless",
            "id": "comment-13489458"
        }
    ]
}