{
    "id": "LUCENE-7662",
    "title": "Index with missing files should throw CorruptIndexException",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "6.4",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "core/index"
        ],
        "fix_versions": [
            "6.5",
            "7.0"
        ]
    },
    "description": "Similar to what we did in LUCENE-7592 for EOF, we should catch missing files and rethrow those as CorruptIndexException.\n\nIf a particular codec can handle missing files, it should be proactive check for those optional files and not throw anything, so I think we can safely do this at SegmentReader or SegmentCoreReaders level.\n\nStack trace copied from SOLR-10006:\n\n\nCaused by: java.nio.file.NoSuchFileException: /Users/Erick/apache/solrVersions/trunk/solr/example/cloud/node3/solr/eoe_shard1_replica1/data/index/_1_Lucene50_0.doc\n\tat sun.nio.fs.UnixException.translateToIOException(UnixException.java:86)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:102)\n\tat sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:107)\n\tat sun.nio.fs.UnixFileSystemProvider.newFileChannel(UnixFileSystemProvider.java:177)\n\tat java.nio.channels.FileChannel.open(FileChannel.java:287)\n\tat java.nio.channels.FileChannel.open(FileChannel.java:335)\n\tat org.apache.lucene.store.MMapDirectory.openInput(MMapDirectory.java:238)\n\tat org.apache.lucene.store.NRTCachingDirectory.openInput(NRTCachingDirectory.java:192)\n\tat org.apache.solr.core.MetricsDirectoryFactory$MetricsDirectory.openInput(MetricsDirectoryFactory.java:334)\n\tat org.apache.lucene.codecs.lucene50.Lucene50PostingsReader.<init>(Lucene50PostingsReader.java:81)\n\tat org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat.fieldsProducer(Lucene50PostingsFormat.java:442)\n\tat org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsReader.<init>(PerFieldPostingsFormat.java:292)\n\tat org.apache.lucene.codecs.perfield.PerFieldPostingsFormat.fieldsProducer(PerFieldPostingsFormat.java:372)\n\tat org.apache.lucene.index.SegmentCoreReaders.<init>(SegmentCoreReaders.java:109)\n\tat org.apache.lucene.index.SegmentReader.<init>(SegmentReader.java:74)\n\tat org.apache.lucene.index.ReadersAndUpdates.getReader(ReadersAndUpdates.java:143)\n\tat org.apache.lucene.index.ReadersAndUpdates.getReadOnlyClone(ReadersAndUpdates.java:195)\n\tat org.apache.lucene.index.StandardDirectoryReader.open(StandardDirectoryReader.java:103)\n\tat org.apache.lucene.index.IndexWriter.getReader(IndexWriter.java:473)\n\tat org.apache.lucene.index.DirectoryReader.open(DirectoryReader.java:103)\n\tat org.apache.lucene.index.DirectoryReader.open(DirectoryReader.java:79)\n\tat org.apache.solr.core.StandardIndexReaderFactory.newReader(StandardIndexReaderFactory.java:39)\n\tat org.apache.solr.core.SolrCore.openNewSearcher(SolrCore.java:1958)\n\t... 12 more",
    "attachments": {
        "LUCENE-7662.patch": "https://issues.apache.org/jira/secure/attachment/12851476/LUCENE-7662.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15843284",
            "date": "2017-01-27T18:20:58+0000",
            "content": "+1 ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15856829",
            "date": "2017-02-07T21:31:24+0000",
            "content": "Michael McCandless - what do you think of this patch? ",
            "author": "Mike Drob"
        },
        {
            "id": "comment-15857826",
            "date": "2017-02-08T10:52:20+0000",
            "content": "Thanks Mike Drob; I think this patch looks good, except it makes some tests angry, e.g.:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestLucene62SegmentInfoFormat -Dtests.method=testRandomExceptions -Dtests.seed=F65CD1D4D104665D -Dtests.locale=zh -Dtests.timezone=Asia/Khandyga -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.03s J3 | TestLucene62SegmentInfoFormat.testRandomExceptions <<<\n   [junit4]    > Throwable #1: org.apache.lucene.index.CorruptIndexException: Problem reading index. (resource=a random IOException (_e.cfe))\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([F65CD1D4D104665D:9E73BF104F0A3FFD]:0)\n   [junit4]    > \tat org.apache.lucene.index.SegmentCoreReaders.<init>(SegmentCoreReaders.java:142)\n   [junit4]    > \tat org.apache.lucene.index.SegmentReader.<init>(SegmentReader.java:74)\n   [junit4]    > \tat org.apache.lucene.index.ReadersAndUpdates.getReader(ReadersAndUpdates.java:143)\n   [junit4]    > \tat org.apache.lucene.index.ReadersAndUpdates.getReadOnlyClone(ReadersAndUpdates.java:195)\n   [junit4]    > \tat org.apache.lucene.index.StandardDirectoryReader.open(StandardDirectoryReader.java:103)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.getReader(IndexWriter.java:473)\n   [junit4]    > \tat org.apache.lucene.index.DirectoryReader.open(DirectoryReader.java:103)\n   [junit4]    > \tat org.apache.lucene.index.BaseIndexFileFormatTestCase.testRandomExceptions(BaseIndexFileFormatTestCase.java:563)\n   [junit4]    > \tat org.apache.lucene.index.BaseSegmentInfoFormatTestCase.testRandomExceptions(BaseSegmentInfoFormatTestCase.java:50)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]    > Caused by: java.nio.file.NoSuchFileException: a random IOException (_e.cfe)\n   [junit4]    > \tat org.apache.lucene.store.MockDirectoryWrapper.maybeThrowIOExceptionOnOpen(MockDirectoryWrapper.java:575)\n   [junit4]    > \tat org.apache.lucene.store.MockDirectoryWrapper.openInput(MockDirectoryWrapper.java:744)\n   [junit4]    > \tat org.apache.lucene.store.Directory.openChecksumInput(Directory.java:119)\n   [junit4]    > \tat org.apache.lucene.store.MockDirectoryWrapper.openChecksumInput(MockDirectoryWrapper.java:1072)\n   [junit4]    > \tat org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.readEntries(Lucene50CompoundReader.java:105)\n   [junit4]    > \tat org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.<init>(Lucene50CompoundReader.java:69)\n   [junit4]    > \tat org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat.getCompoundReader(Lucene50CompoundFormat.java:71)\n   [junit4]    > \tat org.apache.lucene.index.SegmentCoreReaders.<init>(SegmentCoreReaders.java:99)\n   [junit4]    > \t... 44 more\n\n\n\nMaybe we just need to relax that base test case to accept the new CorruptIndexExcpeption as well, and look to its cause to check the exception message?\n\nAlso, I think it'd be a bit better to use our expectThrows method in the test case, wrapped around the one line where you try to open an index reader, instead of the @Test(expected = ...), which would pass if CorruptIndexException was hit anywhere in that test case? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15858534",
            "date": "2017-02-08T20:57:42+0000",
            "content": "Those are good suggestions, I'll get them into the next version of this patch.\n\nLooking at the code in MockDirectoryWrapper, some of the \"a random IOException\" stuff looks really hackish, especially where we are checking for string messages to match. I'm uncomfortable with how brittle some of that is. We already have FakeIOException available and I think it would be good to use that instead in several places. Do you think we should handle that here, or I can file a new issue for it. ",
            "author": "Mike Drob"
        },
        {
            "id": "comment-15858654",
            "date": "2017-02-08T22:55:10+0000",
            "content": "Updated patch with some test clean up. ",
            "author": "Mike Drob"
        },
        {
            "id": "comment-15858752",
            "date": "2017-02-09T00:20:53+0000",
            "content": "Thanks Mike Drob, the new patch looks great, and +1 to do that test cleanup here.  I'll push soon! ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15858828",
            "date": "2017-02-09T01:41:28+0000",
            "content": "Hmm something is still angry:\n\n\n   [junit4] Suite: org.apache.lucene.index.TestMissingIndexFiles\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestMissingIndexFiles -Dtests.method=testMissingDoc -Dtests.seed=4D7CBCD6B337257 -Dtests.locale=de-CH -Dtests.timezone=Etc/GMT-10 -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.04s J2 | TestMissingIndexFiles.testMissingDoc <<<\n   [junit4]    > Throwable #1: junit.framework.AssertionFailedError: Expected exception CorruptIndexException\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([4D7CBCD6B337257:6405AAA9369B3658]:0)\n   [junit4]    > \tat org.apache.lucene.util.LuceneTestCase.expectThrows(LuceneTestCase.java:2703)\n   [junit4]    > \tat org.apache.lucene.index.TestMissingIndexFiles.testMissingDoc(TestMissingIndexFiles.java:52)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]    > \tSuppressed: java.lang.RuntimeException: MockDirectoryWrapper: cannot close: there are still 1 open files: {_0.cfs=1}\n   [junit4]    > \t\tat org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:841)\n   [junit4]    > \t\tat org.apache.lucene.index.TestMissingIndexFiles.testMissingDoc(TestMissingIndexFiles.java:53)\n   [junit4]    > \t\t... 36 more\n   [junit4]    > \tCaused by: java.lang.RuntimeException: unclosed IndexInput: _0.cfs\n   [junit4]    > \t\tat org.apache.lucene.store.MockDirectoryWrapper.addFileHandle(MockDirectoryWrapper.java:732)\n   [junit4]    > \t\tat org.apache.lucene.store.MockDirectoryWrapper.openInput(MockDirectoryWrapper.java:776)\n   [junit4]    > \t\tat org.apache.lucene.codecs.lucene50.Lucene50CompoundReader.<init>(Lucene50CompoundReader.java:78)\n   [junit4]    > \t\tat org.apache.lucene.codecs.lucene50.Lucene50CompoundFormat.getCompoundReader(Lucene50CompoundFormat.java:71)\n   [junit4]    > \t\tat org.apache.lucene.index.SegmentCoreReaders.<init>(SegmentCoreReaders.java:99)\n   [junit4]    > \t\tat org.apache.lucene.index.SegmentReader.<init>(SegmentReader.java:74)\n   [junit4]    > \t\tat org.apache.lucene.index.StandardDirectoryReader$1.doBody(StandardDirectoryReader.java:62)\n   [junit4]    > \t\tat org.apache.lucene.index.StandardDirectoryReader$1.doBody(StandardDirectoryReader.java:54)\n   [junit4]    > \t\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:666)\n   [junit4]    > \t\tat org.apache.lucene.index.StandardDirectoryReader.open(StandardDirectoryReader.java:77)\n   [junit4]    > \t\tat org.apache.lucene.index.DirectoryReader.open(DirectoryReader.java:63)\n   [junit4]    > \t\tat org.apache.lucene.index.TestMissingIndexFiles.lambda$testMissingDoc$0(TestMissingIndexFiles.java:52)\n   [junit4]    > \t\tat org.apache.lucene.util.LuceneTestCase.expectThrows(LuceneTestCase.java:2694)\n   [junit4]    > \t\tat org.apache.lucene.index.TestMissingIndexFiles.testMissingDoc(TestMissingIndexFiles.java:52)\n   [junit4]    > \t\t... 36 more\n\n ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15859016",
            "date": "2017-02-09T04:46:52+0000",
            "content": "Thanks. That is frustrating. I ran it 10 times and somehow never hit that or a similar seed. When the test uses the compound format, since there is no .doc file to remove, the index doesn't get corrupted and correctly never throws the exception. I couldn't figure out how to disable compound format from the test, so instead we can attempt to delete the doc or the .cfe file.\n\nI also made a change to check that we do delete something, otherwise the index would never be corrupt here. Since I can't imagine all possible future index file layouts, this seems prudent. ",
            "author": "Mike Drob"
        },
        {
            "id": "comment-15861905",
            "date": "2017-02-10T22:02:25+0000",
            "content": "Thanks Mike Drob!\n\nThat is frustrating. I ran it 10 times and somehow never hit that or a similar seed. \n\nThe joys of randomized tests!  I'll review and push soon... ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15862117",
            "date": "2017-02-11T01:21:07+0000",
            "content": "Commit be007a6c1124103ed4b21051a4ec98d94a2f7efa in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=be007a6 ]\n\nLUCENE-7662: throw CorruptIndexException if index files are missing ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15862119",
            "date": "2017-02-11T01:23:50+0000",
            "content": "Commit f8e16e3c4e852bce20d0793d157963777ac8f07b in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f8e16e3 ]\n\nLUCENE-7662: move CHANGES entry under 6.5.0 ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15862123",
            "date": "2017-02-11T01:25:49+0000",
            "content": "Commit 8ad763555012cd7637238380b6bfc5b4d7254325 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8ad7635 ]\n\nLUCENE-7662: throw CorruptIndexException if index files are missing ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15862124",
            "date": "2017-02-11T01:26:15+0000",
            "content": "Thank you Mike Drob! ",
            "author": "Michael McCandless"
        }
    ]
}