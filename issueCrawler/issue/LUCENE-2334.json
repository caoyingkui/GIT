{
    "id": "LUCENE-2334",
    "title": "IndexReader.close() should call IndexReader.decRef() unconditionally ??",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.0.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "IndexReader.close() is defined:\n\n  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n  public final synchronized void close() throws IOException {\n    if (!closed) {\n      decRef();\n      closed = true;\n    }\n  }\n\n\nThis  means that  if the refCount is bigger than one, close() does not actually close, but it is also true that calling close() again has no effect.\n\nWhy does close() not simply call decRef() unconditionally? This way if incRef() is called each time an instance of IndexReader were handed out, if close() is called by each recipient when they are done, the last one to call close will actually close the index. As written it seems the API is very confusing \u2013 the first close() does one thing, but the next close() does something different.\n\nAt a minimum the JavaDoc should clarify the behavior.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-19T15:29:12+0000",
            "content": "IndexReader.close() is guarding against multiple calls; we can't\nremove that (it'd be a back compat break \u2013 I think it's always done\nthat).\n\nIf you separately call .incRef on the IndexReader, you must always\nbalance that with a matching call to .decRef (best in finally\nclause). ",
            "author": "Michael McCandless",
            "id": "comment-12847404"
        },
        {
            "date": "2010-03-19T19:02:37+0000",
            "content": "I wholeheartedly agree this API is confusing as hell.\nNot only it's the first one in my life I'm seeing multiple ways of closing the same thing, it also conceals programming errors.\n\nIf we're so bent on backcompat, I suggest deprecating one of these methods now and removing it in next major release. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12847516"
        },
        {
            "date": "2010-03-19T19:54:56+0000",
            "content": "Actually I think we should continue to protect against double close,\nin general.  We do so in IndexWriter as well... here's a relevant\ncomment:\n\nhttps://issues.apache.org/jira/browse/LUCENE-818?focusedCommentId=12477399&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#action_12477399\n\nAlso, what's confusing?  The rules seem simple: always close any\nIndexReader you'd open.  If you .incRef an IndexReader, match that\nwith a call to .decRef.\n\nThe API works well for simple users (just open/close) and\nadvanced users. ",
            "author": "Michael McCandless",
            "id": "comment-12847547"
        },
        {
            "date": "2010-03-22T13:33:06+0000",
            "content": "The problem is IndexReader implements the Closable interface whose contract is:\n\n    /**\n     * Closes this stream and releases any system resources associated\n     * with it. If the stream is already closed then invoking this \n     * method has no effect. \n     *\n     * @throws IOException if an I/O error occurs\n     */\n\n\n\nThe JavaDoc in IndexReader suggests the Closable index is implemented as per the contract:\n\n  /**\n   * Closes files associated with this index.\n   * Also saves any new deletions to disk.\n   * No other methods should be called after this has been called.\n   * @throws IOException if there is a low-level IO error\n   */\n\n\n\nThis means a user of the API should be certain that one call to close actually does free the system resources.\n\nMy suggestion that close() should always defRef() was by analogy with database connection pooling where the calling code works whether or not connections are pooled. When done with the connection it is just closed and the pool decides if and when the closing actually happens. But admittedly it a perversion to call this and index reader pool.\n\nWith the current implementation of IndexReader, the first close() behaves one way (decRef()), but subsequent ones do not, which means the caller of close() must know if this is a \"simple\" or \"advanced\" use case, so then why not just be direct - close() means close for sure, and if it is a muti-thread type usage close() is a mistake and decRef() should be used. As written the advanced usage case means lots of extra file handles are tied up and some day the app server dies with a \"too many file handles\" problem, but if close() really meant close then the advanced usage case means an exception occurs very early in testing. (As you undoubtly guessed, not hypothetical \u2013 but this is the reason I even looked at this part of the code!) ",
            "author": "Mike Hanafey",
            "id": "comment-12848122"
        },
        {
            "date": "2010-03-22T16:09:50+0000",
            "content": "With the current implementation of IndexReader, the first close() behaves one way (decRef()), but subsequent ones do not, which means the caller of close() must know if this is a \"simple\" or \"advanced\" use case,\n\nIf the caller never uses incRef, then close behaves the way you expect.\n\nAs written the advanced usage case means lots of extra file handles are tied up and some day the app server dies with a \"too many file handles\" problem\n\nNo, if you follow the rules for advanced usage (match every incRef with a decRef), everything should work?\n\nAs you undoubtly guessed, not hypothetical - but this is the reason I even looked at this part of the code!\n\nHmm OK \u2013 can you shed some light on the specifics here? ",
            "author": "Michael McCandless",
            "id": "comment-12848186"
        }
    ]
}