{
    "id": "SOLR-11647",
    "title": "SolrJ's autoscaling.Commands.json has invalid json",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "AutoScaling"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Incomplete",
        "status": "Resolved"
    },
    "description": "https://github.com/apache/lucene-solr/blob/master/solr/solrj/src/resources/apispec/autoscaling.Commands.json#L165-L169\n\nContains a block that has a commented out json stanza. When using solrj this will fail at the json parsing step \n\n\norg.apache.solr.common.SolrException: Error in JSON : apispec/autoscaling.Commands.json\n\tat org.apache.solr.common.util.ValidatingJsonMap.parse(ValidatingJsonMap.java:323)\n\tat org.apache.solr.common.util.Utils.lambda$getSpec$0(Utils.java:394)\n\tat org.apache.solr.common.util.Utils$$Lambda$45/2131952342.getSpec(Unknown Source)\n\tat org.apache.solr.api.Api.getSpec(Api.java:65)\n\tat org.apache.solr.api.ApiBag.register(ApiBag.java:73)\n\tat org.apache.solr.core.PluginBag.put(PluginBag.java:217)\n\tat org.apache.solr.core.PluginBag.put(PluginBag.java:188)\n\tat org.apache.solr.core.CoreContainer.createHandler(CoreContainer.java:1526)\n\tat org.apache.solr.core.CoreContainer.load(CoreContainer.java:539)\n\t--our solr test case with a setup that loads a core container --\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:24)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:27)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\nCaused by: org.noggit.JSONParser$ParseException: Expected string: char=/,position=4851 BEFORE=' to add and update policies that apply to collections\", /' AFTER='* \"patternProperties\": { \"^.+$'\n\tat org.noggit.JSONParser.err(JSONParser.java:223)\n\tat org.noggit.JSONParser.nextEvent(JSONParser.java:693)\n\tat org.noggit.ObjectBuilder.getObject(ObjectBuilder.java:123)\n\tat org.noggit.ObjectBuilder.getVal(ObjectBuilder.java:57)\n\tat org.noggit.ObjectBuilder.getObject(ObjectBuilder.java:127)\n\tat org.apache.solr.common.util.ValidatingJsonMap.fromJSON(ValidatingJsonMap.java:251)\n\tat org.apache.solr.common.util.ValidatingJsonMap.fromJSON(ValidatingJsonMap.java:246)\n\tat org.apache.solr.common.util.ValidatingJsonMap.parse(ValidatingJsonMap.java:321)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-15T23:20:03+0000",
            "content": "Does anyone know how one bypasses this in solrj? We are trying to upgrade a plugin to solr 7.1 but a majority of our tests fail due to this error. ",
            "author": "Evan Fagerberg",
            "id": "comment-16254426"
        },
        {
            "date": "2017-11-17T18:27:24+0000",
            "content": "Evan: \n\nI won't pretend I understand why that commented out block is there, or if noggit is suppose to be respecting that comment structure (i thought it did?)\n\nBut what really confuses me is how exactly you're triggering this in your \"solr test case with a setup that loads a core container\" that isn't also causing similar failures in all of the existing solr tests that spin up a CoreContainer.\n\nCan you please elaborate more on what exactly your code looks like, or provide a minimally viable unit test that triggers a similar exception?\n\n(IIUC the apispec files are only loaded/parsed if they are used by a client call \u2013 so it's possible that someone just got really lazy and wrote this specfile w/o actaully doing any testing of it and that's why we don't see similar failures in solr tests ... but if that were the case i'd expect that you shouldn't see these failures unless you were explicitly trying to use this API command, and it doesn't sound like bsaed on your request for advice on how to \"bypass\" it) ",
            "author": "Hoss Man",
            "id": "comment-16257352"
        },
        {
            "date": "2017-11-17T18:36:19+0000",
            "content": "Wait \u2013 skimming the noggit code i've confirmed that JSONParser \u2013 by default \u2013 should accept /* c style comments */ like the one in that file, in at least noggit-0.8, and probably noggit-0.7 AFAICT... is it possible you have an old version of noggit in your test classpath? ",
            "author": "Hoss Man",
            "id": "comment-16257370"
        },
        {
            "date": "2017-11-17T18:57:09+0000",
            "content": "Hey Hoss Man thanks for the reply. Yeah that is something we are scratching our heads about as well I believe that file is about solr cloud functionality and not an embedded solr server which is what we are using.\n\nI will check to see which noggit we are using, that is a good suggestion.\n\nHere is an example base class we use that will fail on the \n\ncoreContainer.load()\n\n because of the json parse error.\n\n\nimport java.io.File;\nimport java.io.IOException;\n\nimport org.apache.commons.io.FileUtils;\nimport org.apache.solr.client.solrj.SolrServer;\nimport org.apache.solr.client.solrj.SolrServerException;\nimport org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;\nimport org.apache.solr.core.CoreContainer;\nimport org.apache.solr.core.SolrCore;\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\n\npublic class SolrTest {\n\n  static CoreContainer coreContainer;\n  protected SolrServer solr;\n\n    @BeforeClass\n    public static void startup() throws Exception {\n      FileUtils.cleanDirectory(new File(\"solr/collection1/data/\"));\n      FileUtils.cleanDirectory(new File(\"solr/collection1/suggestIndex/\"));\n      // start an embedded solr instance\n      coreContainer = new CoreContainer(\"solr\");\n      coreContainer.load();\n    }\n\n    @AfterClass\n    public static void shutdown() throws Exception {\n        SolrCore core = getDefaultCore();\n        if (core != null) {\n            core.close();\n        }\n        coreContainer.shutdown();\n        FileUtils.cleanDirectory(new File(\"solr/collection1/data/\"));\n        FileUtils.cleanDirectory(new File(\"solr/collection1/suggestIndex/\"));\n        coreContainer = null;\n    }\n\n    @Before\n    public void init() throws Exception {\n        solr = new EmbeddedSolrServer(coreContainer, \"collection1\");\n        clearIndex();\n    }\n    \n    protected void clearIndex () throws SolrServerException, IOException {\n        solr.deleteByQuery(\"*:*\");\n        solr.commit(true, true, false);\n    }\n    \n    protected static SolrCore getDefaultCore() {\n      return coreContainer.getCore(\"collection1\");\n    }\n\n    @After\n    public void cleanup() throws Exception {}\n}\n\n ",
            "author": "Evan Fagerberg",
            "id": "comment-16257396"
        },
        {
            "date": "2017-11-17T19:05:47+0000",
            "content": "I am wondering if there is a config in my test solrconfig that is triggering it but I do not see any obvious things. ",
            "author": "Evan Fagerberg",
            "id": "comment-16257407"
        },
        {
            "date": "2017-11-17T19:24:36+0000",
            "content": "I'm confused \u2013 org.apache.solr.client.solrj.SolrServer doesn't even exist in Solr 7.1, so how is it possible for your test to even compile? ",
            "author": "Hoss Man",
            "id": "comment-16257445"
        },
        {
            "date": "2017-11-17T20:17:22+0000",
            "content": "This was my bad, the sample I showed was from the wrong branch. We are actually in the process of going from 4.10 to 6.6.2 and eventually 7.1 but we are not fully there yet. ",
            "author": "Evan Fagerberg",
            "id": "comment-16257506"
        },
        {
            "date": "2017-12-05T15:23:25+0000",
            "content": "It seems on our end we do not have enough to reproduce this for others so for now I will mark it as incomplete and reopen it if we have more information. Thanks everyone. ",
            "author": "Evan Fagerberg",
            "id": "comment-16278720"
        }
    ]
}