{
    "id": "LUCENE-7477",
    "title": "ExternalRefSorter should use OfflineSorter's actual writer for writing the input file",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "priority": "Minor",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "Consider this constructor in ExternalRefSorter:\n\n  public ExternalRefSorter(OfflineSorter sorter) throws IOException {\n    this.sorter = sorter;\n    this.input = sorter.getDirectory().createTempOutput(sorter.getTempFileNamePrefix(), \"RefSorterRaw\", IOContext.DEFAULT);\n    this.writer = new OfflineSorter.ByteSequencesWriter(this.input);\n  }\n\n\n\nThe problem with it is that the writer for the initial input file is written with the default OfflineSorter.ByteSequencesWriter, but the instance of OfflineSorter may be unable to read it if it overrides getReader to use something else than the default.\n\nWhile this works now, it should be cleaned up (I think). It'd be probably ideal to allow OfflineSorter to generate its own temporary file and just return the ByteSequencesWriter it chooses to use, so the above snippet would read:\n\n\n  public ExternalRefSorter(OfflineSorter sorter) throws IOException {\n    this.sorter = sorter;\n    this.writer = sorter.newUnsortedPartition();\n  }\n\n\n\nThis could be also extended so that OfflineSorter is in charge of managing its own (sorted and unsorted) partitions. Then sort(String file) would simply become ByteSequenceIterator sort() (or even Stream<BytesRef> sort() as Stream is conveniently AutoCloseable). If we made OfflineSorter implement Closeable it could also take care of cleaning up any resources it opens in the directory we pass to it. An additional bonus would be the ability to dodge the final internal merge(1) \u2013 if we manage sorted and unsorted partitions then there are open possibilities of returning an iterator that dynamically merges from multiple partitions.",
    "attachments": {
        "LUCENE-7477.patch": "https://issues.apache.org/jira/secure/attachment/12831995/LUCENE-7477.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15552562",
            "author": "Dawid Weiss",
            "date": "2016-10-06T17:18:12+0000",
            "content": "Oh, it's really confusing how OfflineSorter is shaped right now, in particular temporary file creation (the requirement to add checksum manually), file deletion and cleanup and byte sequence readers/writers. There has to be a way to do it better.\n\nI attach an overview of what I was thinking about, but I stopped half-way. This is very simple and not complete because there are several hacks that currently make use of OfflineSorter's capability to read-write arbitrary files (BKDWriter). "
        },
        {
            "id": "comment-15553151",
            "author": "Michael McCandless",
            "date": "2016-10-06T20:55:26+0000",
            "content": "Oh, it's really confusing how OfflineSorter is shaped right now, in particular temporary file creation (the requirement to add checksum manually), file deletion and cleanup and byte sequence readers/writers. There has to be a way to do it better.\n\nMaybe open a pre-cursor issue and improve things there, so this change is easier? "
        },
        {
            "id": "comment-15554340",
            "author": "Dawid Weiss",
            "date": "2016-10-07T07:06:24+0000",
            "content": "Yeah, I think I'll start from a local (detached) implementation of OfflineSorter first and then see if I can refactor things around. Perhaps I'll need help with BKD, if so I'll ping you, Mike.\n\nThis issue is not a bug (the only subclass changing input/output encoding of byte refs is in BKD), but it's an improvement to make the code shorter and more legible. "
        }
    ]
}