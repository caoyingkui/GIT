{
    "id": "SOLR-5145",
    "title": "wait w/o notify situation happening on shutdown in CoreContainer/CloserThread/SolrCores.modifyLock",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Working on SOLR-4952 i was running tests on the 4x branch and noticed TestManagedSchema.testPersistUniqueKey stalled for 1623s \u2013 but nothing baout hte situation seems to be specific to that test.\n\nI'll attache a threaddump, but the key things i note...\n\n\n\tTestHarness is trying to shutdown the CoreContainer\n\tCoreContainer.shutdown(CoreContainer.java:358) is waiting on <0x00000000f690b880> (a org.apache.solr.core.CloserThread)\n\tCloserThread.run(CoreContainer.java:961) is waiting on <0x00000000e068d718> (a java.lang.Object)\n\t\n\t\tthat's aparently \"SolrCores.modifyLock\"\n\t\n\t\n\ta \"searcherExecutor-46-thread-1\" is still alive and parking to wait for  <0x00000000f66ff860> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tno other threads seem to be doing anything \u2013 so as far as i can tell nothing is ever going to notify on that modifyLock",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13739049",
            "date": "2013-08-14T00:04:47+0000",
            "content": "\nThread dump below\n\nMark Miller, Alan Woodward, Erick Erickson ... any ideas here?\n\n\n2013-08-13 16:47:47\nFull thread dump OpenJDK 64-Bit Server VM (20.0-b12 mixed mode):\n\n\"Attach Listener\" daemon prio=10 tid=0x00007f7a04001000 nid=0x4e01 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Thread-8\" prio=10 tid=0x00007f79ec18c000 nid=0x208c in Object.wait() [0x00007f7a0d2a7000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000e068d718> (a java.lang.Object)\n\tat java.lang.Object.wait(Object.java:502)\n\tat org.apache.solr.core.CloserThread.run(CoreContainer.java:961)\n\t- locked <0x00000000e068d718> (a java.lang.Object)\n\n\"searcherExecutor-46-thread-1\" prio=10 tid=0x00007f79e400d800 nid=0x208b waiting on condition [0x00007f7a0d0a5000]\n   java.lang.Thread.State: WAITING (parking)\n\tat sun.misc.Unsafe.park(Native Method)\n\t- parking to wait for  <0x00000000f66ff860> (a java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject)\n\tat java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n\tat java.util.concurrent.locks.AbstractQueuedSynchronizer$ConditionObject.await(AbstractQueuedSynchronizer.java:2043)\n\tat java.util.concurrent.LinkedBlockingQueue.take(LinkedBlockingQueue.java:386)\n\tat java.util.concurrent.ThreadPoolExecutor.getTask(ThreadPoolExecutor.java:1069)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1131)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:679)\n\n\"TEST-TestManagedSchema.testPersistUniqueKey-seed#[BAF0D5A2ABB1707B]\" prio=10 tid=0x00007f79e80ba800 nid=0x1fb0 in Object.wait() [0x00007f7a0ea9d000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000f690b880> (a org.apache.solr.core.CloserThread)\n\tat java.lang.Thread.join(Thread.java:1203)\n\t- locked <0x00000000f690b880> (a org.apache.solr.core.CloserThread)\n\tat java.lang.Thread.join(Thread.java:1256)\n\tat org.apache.solr.core.CoreContainer.shutdown(CoreContainer.java:358)\n\tat org.apache.solr.util.TestHarness.close(TestHarness.java:338)\n\tat org.apache.solr.SolrTestCaseJ4.deleteCore(SolrTestCaseJ4.java:536)\n\tat org.apache.solr.schema.TestManagedSchema.testPersistUniqueKey(TestManagedSchema.java:402)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:616)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:737)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:773)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:787)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n\tat org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:51)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:782)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:442)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n\tat java.lang.Thread.run(Thread.java:679)\n\n\"SUITE-TestManagedSchema-seed#[BAF0D5A2ABB1707B]\" prio=10 tid=0x00007f7a282ee800 nid=0x1fae in Object.wait() [0x00007f7a0ece5000]\n   java.lang.Thread.State: TIMED_WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000e0000090> (a java.lang.Thread)\n\tat java.lang.Thread.join(Thread.java:1211)\n\t- locked <0x00000000e0000090> (a java.lang.Thread)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:787)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$2.evaluate(ThreadLeakControl.java:385)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:556)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:79)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$1.run(RandomizedRunner.java:492)\n\n\"Low Memory Detector\" daemon prio=10 tid=0x00007f7a280d1800 nid=0x1faa runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread1\" daemon prio=10 tid=0x00007f7a280cf800 nid=0x1fa9 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"C2 CompilerThread0\" daemon prio=10 tid=0x00007f7a280cc800 nid=0x1fa8 waiting on condition [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Signal Dispatcher\" daemon prio=10 tid=0x00007f7a280ca000 nid=0x1fa7 runnable [0x0000000000000000]\n   java.lang.Thread.State: RUNNABLE\n\n\"Finalizer\" daemon prio=10 tid=0x00007f7a2807d800 nid=0x1f9c in Object.wait() [0x00007f7a0fefd000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000e0002510> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:133)\n\t- locked <0x00000000e0002510> (a java.lang.ref.ReferenceQueue$Lock)\n\tat java.lang.ref.ReferenceQueue.remove(ReferenceQueue.java:149)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:189)\n\n\"Reference Handler\" daemon prio=10 tid=0x00007f7a2807b800 nid=0x1f9b in Object.wait() [0x00007f7a0fffe000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000e0000168> (a java.lang.ref.Reference$Lock)\n\tat java.lang.Object.wait(Object.java:502)\n\tat java.lang.ref.Reference$ReferenceHandler.run(Reference.java:133)\n\t- locked <0x00000000e0000168> (a java.lang.ref.Reference$Lock)\n\n\"main\" prio=10 tid=0x00007f7a2800d000 nid=0x1f90 in Object.wait() [0x00007f7a2f16a000]\n   java.lang.Thread.State: WAITING (on object monitor)\n\tat java.lang.Object.wait(Native Method)\n\t- waiting on <0x00000000e00020c8> (a com.carrotsearch.randomizedtesting.RandomizedRunner$1)\n\tat java.lang.Thread.join(Thread.java:1203)\n\t- locked <0x00000000e00020c8> (a com.carrotsearch.randomizedtesting.RandomizedRunner$1)\n\tat java.lang.Thread.join(Thread.java:1256)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:502)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.run(RandomizedRunner.java:399)\n\tat com.carrotsearch.ant.tasks.junit4.slave.SlaveMain.execute(SlaveMain.java:180)\n\tat com.carrotsearch.ant.tasks.junit4.slave.SlaveMain.main(SlaveMain.java:275)\n\tat com.carrotsearch.ant.tasks.junit4.slave.SlaveMainSafe.main(SlaveMainSafe.java:12)\n\n\"VM Thread\" prio=10 tid=0x00007f7a28077000 nid=0x1f9a runnable \n\n\"GC task thread#0 (ParallelGC)\" prio=10 tid=0x00007f7a28018000 nid=0x1f94 runnable \n\n\"GC task thread#1 (ParallelGC)\" prio=10 tid=0x00007f7a2801a000 nid=0x1f96 runnable \n\n\"GC task thread#2 (ParallelGC)\" prio=10 tid=0x00007f7a2801c000 nid=0x1f97 runnable \n\n\"GC task thread#3 (ParallelGC)\" prio=10 tid=0x00007f7a2801d800 nid=0x1f98 runnable \n\n\"VM Periodic Task Thread\" prio=10 tid=0x00007f7a280d4000 nid=0x1fab waiting on condition \n\nJNI global references: 1522\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13739531",
            "date": "2013-08-14T11:22:53+0000",
            "content": "This Shouldn't Be Possible (tm).\n\nThe fact that one thread is at CoreContainer[358] should mean\n1> the isShutDown variable has been set to true\n2> solrCores.getModifyLock().notifyAll() should have been called which would\n3> wake up the closer thread which should\n4> never wait again because once waked up, the next time it tests isShutdown it should exit without waiting on the getModifyLock.\n\nBut that does assume that the container object in the CloserThread class is the same object that holds the isShutDown variable passed in when it was created and that the isShutDown member var doesn't get switched back to false somehow. Not quite sure how I'd track that down though. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13981400",
            "date": "2014-04-25T18:21:48+0000",
            "content": "I'm almost certain this is because somewhere in the code for this test, the core doesn't get closed. Look for instances of cc.getCore(name) outside of the try with resources block, i.e. should be doing:\n\n      try (SolrCore core = cc.getCore(coreName)) \n{\n          // code\n      } "
        }
    ]
}