{
    "id": "LUCENE-5321",
    "title": "Remove Facet42DocValuesFormat",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "The new DirectDocValuesFormat is nearly identical to Facet42DVF, except that it stores the addresses in direct int[] rather than PackedInts. On LUCENE-5296 we measured the performance of DirectDVF vs Facet42DVF and it improves perf for some queries and have negligible effect for others, as well as RAM consumption isn't much worse. We should remove Facet42DVF and use DirectDVF instead.\n\nI also want to rename Facet46Codec to FacetCodec. There's no need to refactor the class whenever the default codec changes (e.g. from 45 to 46) since it doesn't care about the actual Codec version underneath, it only overrides the DVF used for the facet fields. FacetCodec should take the DVF from the app (so e.g. the facet/ module doesn't depend on codecs/) and be exposed more as a utility Codec rather than a real, versioned, Codec.",
    "attachments": {
        "LUCENE-5321.patch": "https://issues.apache.org/jira/secure/attachment/12611761/LUCENE-5321.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-11-02T13:27:00+0000",
            "content": "I ended up removing everything under o.a.l.facet.codecs/, including Facet46Codec. It seemed redundant as all it does is use the app's DVF with the facet fields that are returned by FacetIndexingParams.getAllCategoryListParams(). It's a waste of time and resources to maintain such a Codec.\n\nI also removed some tests which tested Facet42DVF. ",
            "author": "Shai Erera",
            "id": "comment-13811979"
        },
        {
            "date": "2013-11-02T17:39:20+0000",
            "content": "+1, but maybe we can keep that test case if we just change it to an assumeTrue(_TestUtil.fieldSupportsHugeBinaryValues)? ",
            "author": "Michael McCandless",
            "id": "comment-13812082"
        },
        {
            "date": "2013-11-02T17:41:06+0000",
            "content": "Also, maybe somewhere in javadocs we could show how the app could do what Facet46Codec is doing today?  Ie, how to gather up all facet fields and then override getDocValuesFormatForField w/ the default codec? ",
            "author": "Michael McCandless",
            "id": "comment-13812084"
        },
        {
            "date": "2013-11-02T18:00:19+0000",
            "content": "I'll add the test back with the assumeTrue. I'm not sure where to document this FacetCodec example ... it doesn't seem to belong in any of the classes' javadocs, and package.html aren't too verbose (point to blogs). So maybe we can just write a blog about it, though really, this isn't too complicated to figure out. I'll attach a patch shortly, want to make sure this test + assume really work! ",
            "author": "Shai Erera",
            "id": "comment-13812089"
        },
        {
            "date": "2013-11-02T18:37:08+0000",
            "content": "Commit 1538245 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1538245 ]\n\nLUCENE-5321: remove Facet42DocValuesFormat and FacetCodec ",
            "author": "ASF subversion and git services",
            "id": "comment-13812101"
        },
        {
            "date": "2013-11-02T18:43:56+0000",
            "content": "Commit 1538249 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1538249 ]\n\nLUCENE-5321: remove Facet42DocValuesFormat and FacetCodec ",
            "author": "ASF subversion and git services",
            "id": "comment-13812106"
        },
        {
            "date": "2013-11-02T18:45:13+0000",
            "content": "Committed to trunk and 4x. If it turns out FacetCodec is too tricky to write, we can either add it back under facet/ or maybe under demo/. For the moment, I think it's not that important to keep it and maintain it. ",
            "author": "Shai Erera",
            "id": "comment-13812107"
        }
    ]
}