{
    "id": "LUCENE-2903",
    "title": "Improvement of PForDelta Codec",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "There are 3 versions of PForDelta implementations in the Bulk Branch: FrameOfRef, PatchedFrameOfRef, and PatchedFrameOfRef2.\n\nThe FrameOfRef is a very basic one which is essentially a binary encoding (may result in huge index size).\nThe PatchedFrameOfRef is the implmentation based on the original version of PForDelta in the literatures.\nThe PatchedFrameOfRef2 is my previous implementation which are improved this time. (The Codec name is changed to NewPForDelta.).\n\nIn particular, the changes are:\n1. I fixed the bug of my previous version (in Lucene-1410.patch), where the old PForDelta does not support very large exceptions (since\nthe Simple16 does not support very large numbers). Now this has been fixed in the new LCPForDelta.\n\n2. I changed the PForDeltaFixedIntBlockCodec. Now it is faster than the other two PForDelta implementation in the bulk branch (FrameOfRef and PatchedFrameOfRef). The codec's name is \"NewPForDelta\", as you can see in the CodecProvider and PForDeltaFixedIntBlockCodec.\n\n3. The performance test results are:\n1) My \"NewPForDelta\" codec is faster then FrameOfRef and PatchedFrameOfRef for almost all kinds of queries, slightly worse then BulkVInt.\n2) My \"NewPForDelta\" codec can result in the smallest index size among all 4 methods, including FrameOfRef, PatchedFrameOfRef, and BulkVInt, and itself)\n3) All performance test results are achieved by running with \"-server\" instead of \"-client\"",
    "attachments": {
        "for_pfor.patch": "https://issues.apache.org/jira/secure/attachment/12471172/for_pfor.patch",
        "LUCENE-2903.patch": "https://issues.apache.org/jira/secure/attachment/12471136/LUCENE-2903.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-02-01T22:31:31+0000",
            "content": "Patch for the improvement of PForDeltaFixedIntBlockCodec ",
            "author": "hao yan",
            "id": "comment-12989422"
        },
        {
            "date": "2011-02-02T00:58:44+0000",
            "content": "Just curious: why does the patch remove BulkVint's optimization for blocks of all 1's (it writes a 0-byte header only in this case) ?\n\n\n+          allOnes = false;\n           if (allOnes) {\n             // the most common int pattern (all 1's)\n             // write a special header (numBytes=0) for this case.\n\n\n\nThis is an important optimization I think: besides the fact its the most common bitpattern[1], its efficient: a single compare-to-zero for the entire block of 128 ints, and it takes care of several worst-cases for vint: blocks of all 1 docdeltas (something more commonly seen in structured data, but still the most common pattern in unstructured, stopwordish things), and all 1 freqs (e.g. you should have omitTF'ed). Depending on block size this significantly reduces the .doc/.freq files for vint, and still helps in the pure unstructured case (I measured this with luceneutil).\n\n[1] http://portal.acm.org/citation.cfm?id=1712668\n\nFurthermore, I was thinking that along the lines of this allOnes trick, we could evaluate an alternative to the \"Sep\" file layout: instead at least we should consider interleaving .doc and .freq (block of doc deltas, block of freqs).\nWith this interleaved layout, something only interested in doc deltas can just read the freq byte header and skip these bytes to bypass all the freqs... omitTF is then implemented automatically for a lot of cases (though this wouldn't be equivalent to lucene's manually-set omitTFAP today, as positions would still exist). If you did manually set omitTF, we could arguably just write this same 0 byte header for freq blocks, which means all 1 freqs, and not have so much specialization and different codepaths. ",
            "author": "Robert Muir",
            "id": "comment-12989480"
        },
        {
            "date": "2011-02-02T06:41:26+0000",
            "content": "Hi, Robert\n\nSorry. That was a mistake. I commented out that one just for debugging to see if that affect the performance. I should have changed it back. I will attach a new patch. \n\nthanks for pointing that out.  ",
            "author": "hao yan",
            "id": "comment-12989532"
        },
        {
            "date": "2011-02-02T16:15:13+0000",
            "content": "Just one nitpick about the codec name containing 'New'.\nThis will be out of date rather soon, so it may be better to simply use an incremental number. ",
            "author": "Paul Elschot",
            "id": "comment-12989692"
        },
        {
            "date": "2011-02-02T19:09:45+0000",
            "content": "Hi, Paul. thanks for the suggestions. I just uploaded a new patch which renamed the codec as PatchedFrameOfRef3. \n\nI actually have a question to ask. In BulkVInt codec, it writes the compressed byte stream as a chunk of bytes. However, in pfordelta-related codecs, the compressed results are in ints, i have to either write single int with a loop, or first convert int array to byte array and then call out.writeBytes(). Do you know any other smarter way to write an int array to indexOutput? \n\nAnother try I did is to make PForDelta itself produce byte-wise compressed results. However, from my experimental results, it will slow down pfordelta significantly. Also, i do not think the NIO buffer used in FrameOfRef and PatchedFrameOfRef help since essentially it is like the way that we first convert int array to byte array and then writeBytes().\n\nDo you have any good suggestions? thanks!  ",
            "author": "hao yan",
            "id": "comment-12989754"
        },
        {
            "date": "2011-02-02T19:11:33+0000",
            "content": "This patch rename the NewPForDeltaCodec as PatchedFrameOfRef3 to follow the tradition.\n\nAnd also add back the BulkVInt allones trick. (I removed it accidently in the last patch). ",
            "author": "hao yan",
            "id": "comment-12989756"
        },
        {
            "date": "2011-02-02T23:08:30+0000",
            "content": "One way to get an underlying byte array from an IntBuffer is by using ByteBuffer.asIntBuffer() to allocate the IntBuffer via a ByteBuffer from the byte array. Would that be possible here?\nI remember using this for testing the original (P)FOR implementation with Lucene's IndexInput/IndexOutput. I did not look at any code answer this though, so please holler if this is a dead end. ",
            "author": "Paul Elschot",
            "id": "comment-12989856"
        },
        {
            "date": "2011-02-02T23:31:12+0000",
            "content": "Yes, using ByteBuffer.asIntBuffer() is the same as converting int/byte array to byte/int array. I think the underlying implementation ByteBuffer.asIntBuffer() cannot avoid. I also tried ByteBuffer/IntBuffer though, the result is worse which makes sense since it may incur extra costs.\n\nWhere to holler?   ",
            "author": "hao yan",
            "id": "comment-12989872"
        },
        {
            "date": "2011-02-03T17:15:04+0000",
            "content": "When the IntBuffer is produced by ByteBuffer.asIntBuffer() and that ByteBuffer is produced from a byte[], this IntBuffer can be used to compress data into on an int by int basis.\nAfter that, this byte[] can be written directly to an IndexOutput.\n\nWhat is it that cannot be avoided? ",
            "author": "Paul Elschot",
            "id": "comment-12990186"
        },
        {
            "date": "2011-02-03T18:21:25+0000",
            "content": "I think essentially the above step also need to do int->byte->int conversion. So, there is no reason it can save more than I do it manually. ",
            "author": "hao yan",
            "id": "comment-12990214"
        },
        {
            "date": "2011-02-03T19:47:09+0000",
            "content": "The conversion is done in place, no data is being copied. Have a look here:\nhttp://download.oracle.com/javase/1.5.0/docs/api/java/nio/ByteBuffer.html#views ",
            "author": "Paul Elschot",
            "id": "comment-12990260"
        },
        {
            "date": "2011-02-03T23:08:26+0000",
            "content": "Hmm the last patch still seems to have disabled the allOnes opto in BulkVInt?  (I turned it back on in my checkout).\n\nAlso it seems to have an added dep to Kamikaze, but it's not in fact needed?\n\nI ran perf test on 10M Wikipedia docs, of BulkVInt vs PatcheFrameOfRef3, on Linux:\n\n\n\n\nQuery\nQPS bulkvint\nQPS pfor3\nPct diff\n\n\n+nebraska +states\n104.70\n66.87\n-36.1%\n\n\n\"united states\"\n12.19\n9.05\n-25.7%\n\n\nunited states\n16.56\n13.46\n-18.7%\n\n\nspanNear([unit, state], 10, true)\n43.37\n35.84\n-17.4%\n\n\n+united +states\n19.51\n16.27\n-16.6%\n\n\nunited~0.6\n8.52\n7.64\n-10.4%\n\n\nunited~0.75\n13.05\n11.74\n-10.1%\n\n\nstates\n47.99\n43.40\n-9.6%\n\n\nu*d\n9.64\n8.89\n-7.8%\n\n\nspanFirst(unit, 5)\n157.25\n145.20\n-7.7%\n\n\n\"united states\"~3\n5.80\n5.37\n-7.4%\n\n\nunit~0.5\n17.32\n16.12\n-6.9%\n\n\ndoctimesecnum:[10000 TO 60000]\n12.40\n11.68\n-5.8%\n\n\nun*d\n19.11\n18.41\n-3.7%\n\n\nunit*\n33.44\n32.44\n-3.0%\n\n\nunit~0.7\n27.27\n26.90\n-1.4%\n\n\ndoctitle:.[Uu]nited.\n5.34\n5.30\n-0.8%\n\n\nuni*\n18.89\n18.81\n-0.4%\n\n\n\n\n\nSomehow it's substantially slower... but I haven't tested how the other PFor impl we have compares.  Not sure what's up... ",
            "author": "Michael McCandless",
            "id": "comment-12990365"
        },
        {
            "date": "2011-02-04T07:33:13+0000",
            "content": "Yes. Other PFOR impls (FrameOfRef and PatchedFrameOfRef) are even slower. (as long as you set -server when you run them). I am also wondering why. Actually I think wikipedia data is kind of biased. Do you have any other data sets?  ",
            "author": "hao yan",
            "id": "comment-12990480"
        },
        {
            "date": "2011-02-05T12:08:43+0000",
            "content": "Do you have any other data sets?\n\nI'll try using europarl.  I have a line file w/ one \"paragraph\" per line = 5.6M docs, 3.2GB = ~620 UTF8 bytes per doc (smaller than the line file we use for Wikipedia, which targets ~1024 bytes per line). ",
            "author": "Michael McCandless",
            "id": "comment-12990967"
        },
        {
            "date": "2011-02-05T14:36:10+0000",
            "content": "Results on Europarl (each \"paragraph\" is a doc):\n\n\n\n\nQuery\nQPS bulkvint\nQPS pfor3\nPct diff\n\n\ndoctimesecnum:[10000 TO 60000]\n16.73\n12.91\n-22.8%\n\n\nspanFirst(unit, 5)\n5214.47\n4143.21\n-20.5%\n\n\nspanNear([unit, state], 10, true)\n869.71\n719.62\n-17.3%\n\n\n\"united states\"\n320.66\n266.50\n-16.9%\n\n\n\"united states\"~3\n212.07\n187.75\n-11.5%\n\n\nu*d\n41.09\n36.90\n-10.2%\n\n\nunit~0.7\n94.11\n85.34\n-9.3%\n\n\nun*d\n68.38\n62.09\n-9.2%\n\n\n+united +states\n440.68\n406.08\n-7.8%\n\n\nunited states\n272.68\n255.73\n-6.2%\n\n\nstates\n552.36\n532.76\n-3.5%\n\n\nunit~0.5\n18.86\n18.67\n-1.0%\n\n\nuni*\n47.96\n47.65\n-0.6%\n\n\nunited~0.6\n23.82\n23.69\n-0.5%\n\n\nunit*\n435.99\n437.09\n0.3%\n\n\ndoctitle:.[Uu]nited.\n24.16\n24.31\n0.6%\n\n\n+nebraska +states\n35010.33\n36809.36\n5.1%\n\n\nunited~0.75\n172.36\n195.18\n13.2%\n\n\n\n ",
            "author": "Michael McCandless",
            "id": "comment-12990988"
        },
        {
            "date": "2011-02-05T15:22:30+0000",
            "content": "So, the QPS in that run are absurdly high for most queries... I think we need different queries to test against Europarl. ",
            "author": "Michael McCandless",
            "id": "comment-12991004"
        },
        {
            "date": "2011-02-06T21:21:27+0000",
            "content": "HI, Michael\n\nDid u try FrameOfRef and PatchedFrameOfRef?  ",
            "author": "hao yan",
            "id": "comment-12991220"
        },
        {
            "date": "2011-02-06T21:22:15+0000",
            "content": "Hi, Paul\n\nI tested ByteBuffer->IntBuffer, it is not faster than converting int[] <-> byte[].  ",
            "author": "hao yan",
            "id": "comment-12991221"
        },
        {
            "date": "2011-02-06T21:22:50+0000",
            "content": "And it sure complicate the pfordelta algorithm a lot by using intbuffer.set/get. ",
            "author": "hao yan",
            "id": "comment-12991222"
        },
        {
            "date": "2011-02-08T23:39:34+0000",
            "content": "I tried to move memory allocation out of readBlock() to BlockReader's constructor. It improves the performance a little. I also tried to use ByteBuffer/IntBuffer to replace my manual convertsion between bytes[]/int[]. It makes things worse.\n\nThe following is my result for 0.1M data:\n(1) BulkVInt vs patchedFrameoFRef3\n        QueryQPS       bulkVIntQPS patchedFrameoFRef3  Pct diff\n     \"united states\"      393.55      362.84     -7.8%\n   \"united states\"~3      243.84      236.80     -2.9%\n   +nebraska +states     1140.25      998.00    -12.5%\n     +united +states      687.76      633.31     -7.9%\ndoctimesecnum:[10000 TO 60000]      413.56      427.53      3.4%\ndoctitle:.[Uu]nited.      510.46      534.47      4.7%\n  spanFirst(unit, 5)     1240.69     1108.65    -10.6%\nspanNear([unit, state], 10, true)      511.77      463.18     -9.5%\n              states     1626.02     1483.68     -8.8%\n                 u*d      164.23      162.79     -0.9%\n                un*d      257.53      252.97     -1.8%\n                uni*      607.53      591.02     -2.7%\n               unit*     1024.59     1043.84      1.9%\n       united states      627.35      578.70     -7.8%\n          united~0.6       11.51       11.36     -1.3%\n         united~0.75       52.58       53.57      1.9%\n            unit~0.5       12.08       11.93     -1.2%\n            unit~0.7       50.98       51.30      0.6%\n\n(2) FrameOfRef VS PatchcedFrameOfRef3\nQueryQPS        patchedFrameofrefQPS pathcedFrameofref3  Pct diff\n     \"united states\"      314.76      362.71     15.2%\n   \"united states\"~3      227.53      237.08      4.2%\n   +nebraska +states     1075.27     1025.64     -4.6%\n     +united +states      646.41      626.57     -3.1%\ndoctimesecnum:[10000 TO 60000]      412.88      429.37      4.0%\ndoctitle:.[Uu]nited.      481.70      528.82      9.8%\n  spanFirst(unit, 5)     1060.45     1118.57      5.5%\nspanNear([unit, state], 10, true)      409.33      467.73     14.3%\n              states     1353.18     1479.29      9.3%\n                 u*d      158.91      165.98      4.4%\n                un*d      237.36      256.41      8.0%\n                uni*      560.22      593.12      5.9%\n               unit*      946.97     1043.84     10.2%\n       united states      431.22      583.09     35.2%\n          united~0.6       10.91       11.37      4.2%\n         united~0.75       50.30       53.30      5.9%\n            unit~0.5       11.54       11.94      3.5%\n            unit~0.7       47.38       50.38      6.3%\n\n\n(3) PatchedFrameOfRef VS PatchedFrameOfRef3\n\n QueryQPS             FrameOfRefQPS pathcedFrameofref3  Pct diff\n     \"united states\"      326.26      360.49     10.5%\n   \"united states\"~3      226.50      234.69      3.6%\n   +nebraska +states     1077.59     1021.45     -5.2%\n     +united +states      648.51      630.52     -2.8%\ndoctimesecnum:[10000 TO 60000]      324.46      428.45     32.0%\ndoctitle:.[Uu]nited.      485.44      527.70      8.7%\n  spanFirst(unit, 5)     1007.05     1111.11     10.3%\nspanNear([unit, state], 10, true)      446.03      465.55      4.4%\n              states     1449.28     1459.85      0.7%\n                 u*d      158.43      161.79      2.1%\n                un*d      246.37      256.28      4.0%\n                uni*      548.85      594.88      8.4%\n               unit*      920.81     1042.75     13.2%\n       united states      450.65      576.37     27.9%\n          united~0.6       11.07       11.26      1.7%\n         united~0.75       50.70       52.60      3.8%\n            unit~0.5       11.64       11.76      1.0%\n            unit~0.7       49.04       50.70      3.4%\n\n ",
            "author": "hao yan",
            "id": "comment-12992237"
        },
        {
            "date": "2011-02-09T19:49:45+0000",
            "content": "Hi, Robert and Michael\n\nIn order to test if ByteBuffer/IntBuffer works better than int[]<->byte[] conversion, I now separate them into 3 different codecs. All of them use the same PForDelta implementation except that they use different indexinput/indexoutput as follows.\n\n1. PatchedFrameOfRef3 > use in.readBytes(), it will convert int[] <> byte[] manually. Its corresponding java code is: PForDeltaFixedIntBlockCodec.java\n\n2. PatchedFrameOfRef4 > use in.readBytes(), it will convert int[] <> byte[] by ByteBuffer/IntBuffer. Its corresponding java code is: PForDeltaFixedIntBlockWithByteBufferCodec.java\n\n3. PatchedFrameOfRef5 -> use in.readInt() with a loop, it does not need conversion. Its corresponding java code is: PForDeltaFixedIntBlockWithReadIntCodec.java\n\nI tested them against BulkVInt on MacOS. The detailed results are attached. Here is the conclusion:\n\n1) Yes, Michael and Robert, you guys are right! ByteBuffer/IntBuffer are faster then my manual conversion btw byte[]/int[]. I guess the reason I thought they were worse is that i did not separate codecs before, such that the test results is not stable due to JVM/JIT. \n\n2) Now, PatchedFrameOfRef4 is still worse than BulkVInt in many kinds of queries. However, it seems that it can do better for fuzzy queries and wildcardquery.\n\n3) Of course, these PatchedFrameOfRef3,4,5 are all better than PatchedFrameOfRef and FrameOfRef for almost all queries.\n\n4) The new patched is just uploaded, please check them out. \n\nThe following is the experimental results for 0.1M data.\n\n(1) bulkVInt VS patchedFrameOfRef4 (withByteBuffer, in.readBytes(..) )\n\nQueryQPS bulkVIntQPS pathcedFrameofref4-withByteBuffer  Pct diff\n     \"united states\"      389.26      361.79     -7.1%\n   \"united states\"~3      234.52      228.99     -2.4%\n   +nebraska +states     1138.95      992.06    -12.9%\n     +united +states      670.69      603.86    -10.0%\ndoctimesecnum:[10000 TO 60000]      415.28      447.83      7.8%\ndoctitle:.[Uu]nited.      496.03      522.47      5.3%\n  spanFirst(unit, 5)     1176.47     1086.96     -7.6%\nspanNear([unit, state], 10, true)      502.26      423.73    -15.6%\n              states     1612.90     1453.49     -9.9%\n                 u*d      167.95      171.17      1.9%\n                un*d      260.69      275.33      5.6%\n                uni*      602.41      577.37     -4.2%\n               unit*     1016.26     1041.67      2.5%\n       united states      617.28      549.45    -11.0%\n          united~0.6       12.22       12.93      5.9%\n         united~0.75       53.88       56.78      5.4%\n            unit~0.5       12.58       13.19      4.9%\n            unit~0.7       52.41       54.93      4.8%\n\n(2) bulkVInt VS patchedFrameOfRef3 (with my own int[] <-> byte[] conversion, still in.readBytes(..))\n\n QueryQPS bulkVIntQPS pathcedFrameofref3  Pct diff\n     \"united states\"      388.50      363.24     -6.5%\n   \"united states\"~3      234.80      223.56     -4.8%\n   +nebraska +states     1138.95     1016.26    -10.8%\n     +united +states      671.14      607.90     -9.4%\ndoctimesecnum:[10000 TO 60000]      418.24      441.89      5.7%\ndoctitle:.[Uu]nited.      489.00      522.74      6.9%\n  spanFirst(unit, 5)     1246.88     1127.40     -9.6%\nspanNear([unit, state], 10, true)      514.14      473.71     -7.9%\n              states     1612.90     1488.10     -7.7%\n                 u*d      170.77      167.31     -2.0%\n                un*d      261.37      264.48      1.2%\n                uni*      609.38      602.41     -1.1%\n               unit*     1028.81     1052.63      2.3%\n       united states      614.25      564.33     -8.1%\n          united~0.6       12.05       12.11      0.5%\n         united~0.75       53.16       54.97      3.4%\n            unit~0.5       12.43       12.50      0.6%\n            unit~0.7       52.81       53.23      0.8%\n\n\n(3) bulkVInt VS patchedFrameOfRef5 (with my own int[] <-> byte[] conversion, still in.readBytes(..))\n\n      QueryQPS bulkVIntQPS pathcedFrameofref5-withReadInt  Pct diff\n     \"united states\"      391.24      366.70     -6.3%\n   \"united states\"~3      235.40      235.07     -0.1%\n   +nebraska +states     1137.66     1072.96     -5.7%\n     +united +states      673.40      642.26     -4.6%\ndoctimesecnum:[10000 TO 60000]      414.25      407.66     -1.6%\ndoctitle:.[Uu]nited.      492.61      538.21      9.3%\n  spanFirst(unit, 5)     1253.13     1175.09     -6.2%\nspanNear([unit, state], 10, true)      511.25      483.56     -5.4%\n              states     1642.04     1490.31     -9.2%\n                 u*d      166.78      160.28     -3.9%\n                un*d      261.64      255.36     -2.4%\n                uni*      609.38      593.47     -2.6%\n               unit*     1026.69     1042.75      1.6%\n       united states      606.43      580.72     -4.2%\n          united~0.6       12.07       11.18     -7.4%\n         united~0.75       53.57       53.91      0.6%\n            unit~0.5       12.49       11.54     -7.6%\n            unit~0.7       52.75       51.76     -1.9% ",
            "author": "hao yan",
            "id": "comment-12992687"
        },
        {
            "date": "2011-02-09T21:48:07+0000",
            "content": "This patch is to further improve pfordelta codec (PForDeltaFixedIntBlockCodec). I used 3 different implementations (3 codecs) for inputindex/outputindex. In particular, \n\n1. PatchedFrameOfRef3 > use in.readBytes(), it will convert int[] <> byte[] manually. Its corresponding java code is: PForDeltaFixedIntBlockCodec.java\n\n2. PatchedFrameOfRef4 > use in.readBytes(), it will convert int[] <> byte[] by ByteBuffer/IntBuffer. Its corresponding java code is: PForDeltaFixedIntBlockWithByteBufferCodec.java\n\n3. PatchedFrameOfRef5 -> use in.readInt() with a loop, it does not need conversion. Its corresponding java code is: PForDeltaFixedIntBlockWithReadIntCodec.java\n\n ",
            "author": "hao yan",
            "id": "comment-12992731"
        },
        {
            "date": "2011-02-09T22:32:34+0000",
            "content": "Hello, \n\nI don't see the new files you referred to in the patch\nMaybe the new files were not added to svn with 'svn add' before making the patch? ",
            "author": "Robert Muir",
            "id": "comment-12992757"
        },
        {
            "date": "2011-02-10T00:26:42+0000",
            "content": "just uploaded. Sorry.  ",
            "author": "hao yan",
            "id": "comment-12992809"
        },
        {
            "date": "2011-02-10T11:13:08+0000",
            "content": "I don't see a new patch here?  Eg, PForDeltaFixedIntBlockWithReadIntCodec.java seems to be missing (and others)?\n\nAlso, it's best if you can run the perf tests without -debug, since it runs on a more realistic index.  The small (100K docs) debug index over-emphasizes the setup cost for each query, vs the actual time to enum the docs. ",
            "author": "Michael McCandless",
            "id": "comment-12993003"
        },
        {
            "date": "2011-02-16T00:30:09+0000",
            "content": "This new patch provides PForDeltaFixedIntBlockWithIntBufferCodec (PatchedFrameOfRef4) which improves the performance of previous couterparts(PatchedFrameOfRef4,5,6). Note that the PatchedFrameOfRef4 is different from the previous PatchedFrameOfRef4.  ",
            "author": "hao yan",
            "id": "comment-12995089"
        },
        {
            "date": "2011-02-16T00:32:46+0000",
            "content": "This patch improves the performance of previous PatchedFrameOfRef4 and removed the PatchedFrameOfRef5 and PatchedFrameOfRef6. Now the performance ofPatchedFrameOfRef4 is better than BulkVInt and comparable to PatchedFrameOfRef in my tests. ",
            "author": "hao yan",
            "id": "comment-12995090"
        },
        {
            "date": "2011-02-16T13:25:53+0000",
            "content": "Thanks Hao!  The new patch looks great \u2013 much leaner.\n\nI fixed a few things... new patch attache.  To keep the comparison\nfair, I cutover BulkVInt back to Sep (it was Fixed (interleaved)).  I\nalso impl'd skipBlock in PFor4 (though this method is never called by\nSep).  I cutover PFor4 to var gap terms index.\n\nFinally I added back copyright headers (Simple16.java's had been\nstripped but other new sources were missing...).  Also,\nwe need to eventually remove the @author tags..\n\nOne question: it looks like this PFOR impl can only handle up to 28\nbit wide ints?  Which means... could it could fail on some cases?\nThough I suppose you would never see too many of these immense ints in\none block, and so they'd always be encoded as exceptions and so it's\nactually safe...?\n\nHere are the results on Linux, MMapDir, 10M docs, unshuffled:\n\n\n\n\nQuery\nQPS BulkVInt\nQPS PFor4\nPct diff\n\n\n\"united states\"\n13.66\n11.63\n-14.9%\n\n\nu*d\n12.75\n11.55\n-9.4%\n\n\nun*d\n24.71\n22.46\n-9.1%\n\n\nuni*\n24.68\n22.85\n-7.4%\n\n\nunit*\n41.22\n39.25\n-4.8%\n\n\n+nebraska +states\n128.41\n123.73\n-3.6%\n\n\nspanFirst(unit, 5)\n263.41\n258.27\n-1.9%\n\n\n+united +states\n21.37\n21.09\n-1.3%\n\n\ntitle:.[Uu]nited.\n5.70\n5.66\n-0.6%\n\n\ntimesecnum:[10000 TO 60000]\n15.01\n14.96\n-0.4%\n\n\nunit~0.7\n41.78\n43.44\n4.0%\n\n\n\"united states\"~3\n6.48\n6.79\n4.8%\n\n\nunit~0.5\n24.61\n25.83\n4.9%\n\n\nspanNear([unit, state], 10, true)\n52.34\n55.67\n6.4%\n\n\nunited~0.6\n11.36\n12.18\n7.1%\n\n\nunited~0.75\n15.96\n17.58\n10.2%\n\n\nstates\n53.41\n61.03\n14.3%\n\n\nunited states\n16.87\n20.62\n22.2%\n\n\n\n\n\nVery nice! ",
            "author": "Michael McCandless",
            "id": "comment-12995285"
        },
        {
            "date": "2011-02-16T13:52:12+0000",
            "content": "Nice results Hao!\n\nOne idea for the low-frequency multitermqueries (foo* etc) could be in the attached patch: i only implemented this for the existing FrameOfRef and PatchedFrameOfRef but perhaps you could steal/test the idea with your implementation.\n\nIn these cases i switched them over to a single byte header instead of an int. \n\nThis means less overhead per-block, a slightly smaller (maybe 1-2%?) index. It might be more useful if we switch your codec over from Sep layout to interleaved (Fixed) layout, to make a more efficient skipBlock()... but this interleaved layout is still a work in progress. ",
            "author": "Robert Muir",
            "id": "comment-12995295"
        },
        {
            "date": "2011-02-16T18:19:48+0000",
            "content": "Thank both of you! Thanks for testing my codec so quickly, Michael! \n\nRE: One question: it looks like this PFOR impl can only handle up to 28\nbit wide ints? Which means... could it could fail on some cases?\nThough I suppose you would never see too many of these immense ints in\none block, and so they'd always be encoded as exceptions and so it's\nactually safe...?\n\nHao: This won't fail. In my PFOR impl, I will first checkBigNumbers() to see if there is any number >= 2^28, if there is, i will force encoding the lower 4 bits using the 128 4-bit slots. Thus, all exceptions left to simple16 are < 2^28, which can definitely be handled. So, there is no failure cases!!!  . \n\nBTW, my PFOR impl will save more index size than VInt and other PFOR impls. Thus, if the user case is real-time search which requires loading index from disk to memory frequently, my PFOR impl may save even more. \n\n\n\n\n\n ",
            "author": "hao yan",
            "id": "comment-12995436"
        },
        {
            "date": "2011-02-16T18:24:20+0000",
            "content": "And, thanks robert! i am reading your patch too!  ",
            "author": "hao yan",
            "id": "comment-12995439"
        }
    ]
}