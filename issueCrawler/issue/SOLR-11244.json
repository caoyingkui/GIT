{
    "id": "SOLR-11244",
    "title": "Query DSL for Solr",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.1"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "It will be great if Solr has a powerful query DSL. This ticket is an extension of http://yonik.com/solr-json-request-api/.\n\nHere are several examples of Query DSL\n\ncurl -XGET http://localhost:8983/solr/query -d '\n{\n    \"query\" : {\n        \"lucene\" : {\n            \"df\" : \"content\",\n            \"query\" : \"solr lucene\"\n        }\n    }\n}\n\n\nthe above example can be rewritten as (because lucene is the default qparser)\n\ncurl -XGET http://localhost:8983/solr/query -d '\n{\n    \"query\" : \"content:(solr lucene)\"\n}\n\n\nmore complex example:\n\ncurl -XGET http://localhost:8983/solr/query -d '\n{ \n    \"query\" : {\n        \"boost\" : {\n            \"query\" : {\n                \"lucene\" : {\n                    \"q.op\" : \"AND\",\n                    \"df\" : \"cat_s\",\n                    \"query\" : \"A\"\n                }\n            }\n            \"b\" : \"log(popularity)\"\n        }\n    }\n}\n\n\n\nI call it Json Query Object (JQO) and It defined as :\n\n\tIt can be a valid query string for Lucene query parser, for example : \"title:solr\"\n\tIt can be a valid local parameters string, for example : \"\n{!dismax qf=myfield}\nsolr rocks\"\n\tIt can be a json object with structure like this\n\n{\n  \"query-parser-name\" : {\n     \"param1\" : \"value1\",\n     \"param2\" : \"value2\",\n     \"query\" : <JQO>,\n     \"another-param\" : <JQO>\n  }\n}\n\n\nTherefore the above dismax query can be rewritten as ( be noticed that the query argument in local parameters, is put as value of query field )\n\n{\n  \"dismax\" : {\n     \"qf\" : \"myfield\"\n     \"query\" : \"solr rocks\"\n  }\n}\n\n\n\n\n\nI will attach an HTML, contain more examples of Query DSL.",
    "attachments": {
        "Solr Query DSL - examples.html": "https://issues.apache.org/jira/secure/attachment/12882116/Solr%20Query%20DSL%20-%20examples.html",
        "SOLR-11244.patch": "https://issues.apache.org/jira/secure/attachment/12882118/SOLR-11244.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-16T11:02:57+0000",
            "content": "Here are a patch for this feature, it contains \n\n\ttest for json query dsls\n\ta boolean query parser with syntax like this\n\n{\n  \"bool\" : {\n    \"must\" : [<JQO>, <JQO>, ...],\n    \"must_not\" : [<JQO>, <JQO>, ...],\n    \"filter\" : [<JQO>, <JQO>, ...],\n    \"should\" : [<JQO>, <JQO>, ...]\n  }\n}\n\n\n\tthe implementation of query dsl. Basically, the json query object is converted into a local parameter string. For example, the below JQO\n\nboost : {   \n\tquery : {    \n\t\tlucene : {           \n\t\t\tdf : cat_s,           \n\t\t\tquery : A         \n\t\t}   \n\t},     \n\tb : 1.5   \n} \n\n\nis converted into\n\n{!boost b=1.5 v='{!lucene df=cat_s v=A}' }\n\n\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16128632"
        },
        {
            "date": "2017-08-18T11:31:02+0000",
            "content": "It would be great if we could also support multiple queries in a single request. Something like:\n\n[\n {\"query\": ...},\n {\"query\": ...}\n]\n\n\nThat's just a wish. If that is not possible as part of this effort, we can track it elsewhere. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16132075"
        },
        {
            "date": "2017-08-18T11:41:51+0000",
            "content": "Hi Ishan Chattopadhyaya, I think that is not needed, because we can use bool qparser to combine queries ( in much more flexible ways like \"should\", \"must\", \"must_not\", \"filter\" ). For example :\n\ncurl -XGET http://localhost:8983/solr/query -d '\n{ \n    \"query\" : {\n        \"bool\" : {\n            \"should\" : [\n                \"query1\" ,\n                \"query2\" ,\n                ... ,\n            ]\n        }\n    }\n}\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16132084"
        },
        {
            "date": "2017-08-18T14:08:12+0000",
            "content": "Cao Manh Dat I think Ishan is talking about totally separate queries. In you example, IIUC, you'd still get a single result list and have no way to tell which documents in the response were satisfied by which query.\n\nI've seen multiple requests for the ability to send and receive two totally separate queries in the same request, just as though you'd sent them each individually from the client. ",
            "author": "Erick Erickson",
            "id": "comment-16132999"
        },
        {
            "date": "2017-08-18T14:47:50+0000",
            "content": "Great someone is tackling this! I had started a while ago with SOLR-4351\n\nI think the approach I was taking was to combine JSON and local-params/qparser at the Object level (i.e. the parsers end up operating more on Object graphs that were produced from JSON or local params).  Whenever one encounters a raw String where a query is expected, then it can be parsed using the default qparser.  Allowing one back to \"lucene syntax\" at any point in a query tree leads to more concise representations. From your description, it looks like you have exactly that capability.\n\nOne reason I was thinking of changing QParsers to act on Object graphs instead of Strings is because local params can't represent everything that JSON can, and we want future QParsers (or existing qparsers) to be able to take JSON as parameters as well as strings.  I haven't looked at your patch yet, so I don't know how this interface between strings and objects is implemented beyond your note of \"Basically, the json query object is converted into a local parameter string.\"\n ",
            "author": "Yonik Seeley",
            "id": "comment-16133049"
        },
        {
            "date": "2017-08-18T14:58:27+0000",
            "content": "It would be great if we could also support multiple queries in a single request. \n\nI think this JIRA is more about a JSON query representation that can be used anywhere a normal query can be used (and natively used within a JSON request of course).\n\nOur normal request and response formats do not lend themselves to multiple queries.  The JSON Facet API does, however.  One can already facet on multiple different queries in the same request.  We just need to be able to grab the top N documents for each of the queries (SOLR-7830) ",
            "author": "Yonik Seeley",
            "id": "comment-16133075"
        },
        {
            "date": "2017-08-18T15:47:33+0000",
            "content": "Hi Yonik Seeley, SOLR-4351 seems have the same approach with my first attempt for this issue, but as you may know, this require remarkable change in current QParser classes. \n\n\nOne reason I was thinking of changing QParsers to act on Object graphs instead of Strings is because local params can't represent everything that JSON can\nIn fact, after the first attempt, I think local params are powerful enough for represent everything that query DSL need. It support nested queries and parameters for each queries, that's all I need. For example\n\ncurl -XGET http://localhost:8983/solr/query -d '\n{\n  \"query\": { \n    \"bool\": { \n      \"must\": [\n        \"title:solr\", \n        { \"lucene\" : {\"df\": \"content\", query : \"lucene solr\" }  }\n      ],\n      \"must_not\": \"{!frange u=3.0}ranking\"\n    }\n  }\n}\n\n\n\nCan be rewritten as\n\n{!bool must='title:solr' must='{!lucene df=content v=lucene solr }' must_not='{!frange u=3.0}ranking'}\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16133155"
        },
        {
            "date": "2017-08-26T08:44:31+0000",
            "content": "More tests, I think the code base work pretty well. I will do some refactoring and manual tests for the next patch. ",
            "author": "Cao Manh Dat",
            "id": "comment-16142694"
        },
        {
            "date": "2017-08-26T10:32:47+0000",
            "content": "This is great! ",
            "author": "Uwe Schindler",
            "id": "comment-16142744"
        },
        {
            "date": "2017-08-26T15:01:27+0000",
            "content": "This patch refactoring converter process to another class to make the code look nicer. Adding few more tests.\n\nYonik Seeley I think this patch is ready, It will be great if you can take a look before I commit. ",
            "author": "Cao Manh Dat",
            "id": "comment-16142835"
        },
        {
            "date": "2017-08-27T16:05:44+0000",
            "content": "I think local params are powerful enough for represent everything that query DSL need.\n\nWhat about multi-valued parameters?  I the past, I think I was considering adding multi-valued & object support to localParams to remove the majority of the impedance mismatch.\n\nIs that really the full patch (16K)? That's amazingly small once you take out the tests! ",
            "author": "Yonik Seeley",
            "id": "comment-16143149"
        },
        {
            "date": "2017-08-28T01:36:14+0000",
            "content": "What about multi-valued parameters\nIt seems that local params work well in this case. As you can see, dismax qparser has multiple-value parameters (qf field) and it also tested in the patch.\n\n{ \n query : { \n  dismax : { \n   query : 'A NJ' \n   qf : ['cat_s^100', 'where_s^0.1'] \n  }  \n },  \n filter : '-id:2', \n fields : id \n}\n\n\nAnother test is bool qparser, Its 'should' field is multi-value which contain sub-queries.\n\n{  \n  'query': {    \n    'bool' : {      \n      'should' : [        \n        'id:1',        \n        'id:2'      \n      ]    \n    }  \n  }\n}\n\n\nThe above query will be rewritten into \n{!bool should='id:1' should='id:2'}\nIs that really the full patch (16K)?\nYeah, that's the full patch  ",
            "author": "Cao Manh Dat",
            "id": "comment-16143295"
        },
        {
            "date": "2017-08-28T03:02:26+0000",
            "content": "It seems that local params work well in this case.\nAh, I had forgotten that local params got multi-valued support in SOLR-2798 ",
            "author": "Yonik Seeley",
            "id": "comment-16143318"
        },
        {
            "date": "2017-08-28T03:45:01+0000",
            "content": "I looked through the examples, very nice! How does one use this with facet or highlighting or other components? Can you please add a few examples with them? ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16143332"
        },
        {
            "date": "2017-08-28T06:36:21+0000",
            "content": "Hi Shalin Shekhar Mangar, this issue is built on top of JSON Request API. So this is already documented at JSON request APi. Here are an example\n\ncurl -XGET http://localhost:8983/solr/query -d '\n{\n  query : \"*:*\",\n  filter : [\n    \"author:brandon\",\n    \"genre_s:fantasy\"\n  ],\n  offset : 0,\n  limit : 5,\n  fields : [\"title\",\"author\"],  // we could also use the string form \"title,author\"\n  sort : \"sequence_i desc\",\n \n  facet : {  // the JSON Facet API is nicely integrated as well\n    avg_price : \"avg(price)\",\n    top_authors : {terms : author}\n  }\n}'\n\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16143423"
        },
        {
            "date": "2017-08-28T14:51:49+0000",
            "content": "Ah, right. I missed that. Thanks! ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16143848"
        },
        {
            "date": "2017-08-29T03:39:12+0000",
            "content": "The general downside to using local params as the convergence layer (besides double-parsing) is the loss of type info (e.g. was a parameter an integer, string, or map).\nOf course this is really only an issue for future qparsers that would want to take advantage of the extra type info that JSON provides. The important 95% of this issue is the user-visible HTTP API, and that looks fine... a great integration between JSON and the existing qparsers.  This implementation also shouldn't hamper us much in the future if we wanted to change the underlying mechanisms, or just extend it to add more type info.\n\n+1 to commit. ",
            "author": "Yonik Seeley",
            "id": "comment-16144696"
        },
        {
            "date": "2017-08-29T03:49:55+0000",
            "content": "The general downside to using local params as the convergence layer (besides double-parsing) is the loss of type info (e.g. was a parameter an integer, string, or map).\n\nAnd error handling if unknown params are given. Currently everything is parsed to local params, but the later query parsers cannot easily bail out on invalid key names in the JSON. I know we could do the same like with analyzer factories (removing the entries from the local params map), but thats not eay to implement in the current way. With having a JSON parser for every query parser this is easier.\n\nNevertheless, I like the approach, although it double parses! Are we sure that we have no escaping problems anywhere with special characters? ",
            "author": "Uwe Schindler",
            "id": "comment-16144698"
        },
        {
            "date": "2017-08-29T13:09:58+0000",
            "content": "Are we sure that we have no escaping problems anywhere with special characters?\nbuildLocalParams uses parameter dereferencing instead of escaping and including inline for Strings, so no further escaping is needed:\n\n    if (val instanceof String) {\n      builder.append('$').append(putParam(val.toString(), additionalParams));\n      return;\n    }\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-16145251"
        },
        {
            "date": "2017-08-30T11:45:12+0000",
            "content": "Hi Dat,\n\nThis is so cool! \n\n\nIn the Solr Query DSL example html page , none of the URLs include a collection name\n\nI tried running the collapse query parser with like this\n\ncurl -XGET http://localhost:8983/solr/test_dsl/query -d '\n{\n  \"query\": { \n    \"collapse\": { \n      \"field\": \"collapse_s\"\n    }\n  }\n}'\n\n\n\nbut I get this error\n\n\n2017-08-30 11:43:21.030 ERROR (qtp1911006827-19) [   x:test_dsl] o.a.s.s.HttpSolrCall null:java.lang.UnsupportedOperationException: Query  does not implement createWeight\n        at org.apache.lucene.search.Query.createWeight(Query.java:67)\n        at org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:734)\n        at org.apache.lucene.search.IndexSearcher.createNormalizedWeight(IndexSearcher.java:724)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:462)\n        at org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:215)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1591)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1408)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:575)\n        at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:544)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:295)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:177)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2483)\n        at org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:720)\n        at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:526)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:382)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:326)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1751)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:582)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:226)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1180)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:512)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1112)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:213)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:119)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n        at org.eclipse.jetty.rewrite.handler.RewriteHandler.handle(RewriteHandler.java:335)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:134)\n        at org.eclipse.jetty.server.Server.handle(Server.java:534)\n        at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:320)\n        at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:251)\n        at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:283)\n        at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:108)\n        at org.eclipse.jetty.io.SelectChannelEndPoint$2.run(SelectChannelEndPoint.java:93)\n        at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.executeProduceConsume(ExecuteProduceConsume.java:303)\n        at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.produceConsume(ExecuteProduceConsume.java:148)\n        at org.eclipse.jetty.util.thread.strategy.ExecuteProduceConsume.run(ExecuteProduceConsume.java:136)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:671)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$2.run(QueuedThreadPool.java:589)\n        at java.lang.Thread.run(Thread.java:745)\n\n ",
            "author": "Varun Thacker",
            "id": "comment-16147110"
        },
        {
            "date": "2017-08-30T11:59:02+0000",
            "content": "Should we be directly mapping between the old param names here?\n\nFor example,\n\n\ncurl -XGET http://localhost:8983/solr/query -d '\n{\n    \"query\" : {\n        \"lucene\" : {\n            \"df\" : \"content\",\n            \"query\" : \"solr lucene\"\n        }\n    }\n}\n\n\n\nIt is still using df. Given the JSON structure and the chance to rename things we could use default_field ?\n\n\n\nHere's another example :\n\n\ncurl -XGET http://localhost:8983/solr/query -d '\n{\n  query : \"*:*\",\n  filter : [\n    {\n        \"prefix\" : {\n            \"f\" : \"myfield\",\n            \"query\" : \"foo\"\n        }\n    }\n  ]\n}'\n\n\n\nMaybe {[f}} should really be field ?\n\nThe question is more generic : Should we rethink the param names where necessary or keep the old names ? ",
            "author": "Varun Thacker",
            "id": "comment-16147121"
        },
        {
            "date": "2017-08-30T15:19:54+0000",
            "content": "This feature is awesome.\n\nRE param names: I think that's really a separate issue.  I like that this approach piggy-backs on what we already have \u2013 it's just another way to get at the same thing.  It doesn't define new/different param names. ",
            "author": "David Smiley",
            "id": "comment-16147425"
        },
        {
            "date": "2017-08-30T15:27:29+0000",
            "content": "I looked closer at the patch.  Do we really need put all strings into a _tt prefixed param and do variable referencing?  Instead I suggest putting the strings in there and using ClientUtils.encodeLocalParamVal. ",
            "author": "David Smiley",
            "id": "comment-16147437"
        },
        {
            "date": "2017-08-30T15:35:40+0000",
            "content": "Do we really need put all strings into a _tt prefixed param and do variable referencing?\n\nOne benefit to that is fixed encoding and re-parsing costs that does not increase with string size (and some strings could perhaps get large with deeply nested queries?)\n\nWe could also optimize by selectively inlining small strings, but that could be a separate JIRA. ",
            "author": "Yonik Seeley",
            "id": "comment-16147453"
        },
        {
            "date": "2017-08-31T09:35:50+0000",
            "content": "Thank guys!\nSo there are one thing left that make me hesitate to commit this patch. Our solution so far is enrich Json Request Api with a new Query DSL syntax. But should we move this issue as an extension of SOLR-8029? So we will have new well defined Search API and we can remove the old one in Solr 8.0? ",
            "author": "Cao Manh Dat",
            "id": "comment-16148730"
        },
        {
            "date": "2017-08-31T13:49:28+0000",
            "content": "According to the v2 API spec doc attached to that issue, the JSON Request API should already be hooked in?\nBut no, we shouldn't be removing any old query or update APIs, unless they are non-primary perhaps (i.e. not used by the majority of users). ",
            "author": "Yonik Seeley",
            "id": "comment-16148998"
        },
        {
            "date": "2017-08-31T14:21:17+0000",
            "content": "Yonik Seeley Ah cool, If v2 API already use Json Request API as default then it will be great. \n\nIt seems that Json Request API do not support other components other than facet (like highlighting), right? But I think we can tackle that in another issue. ",
            "author": "Cao Manh Dat",
            "id": "comment-16149044"
        },
        {
            "date": "2017-08-31T14:29:51+0000",
            "content": "It seems that Json Request API do not support other components other than facet (like highlighting), right? \n\nRight.  One can access everything via the params block (anything that was a query param, just put in params), but other things haven't been formalized into a JSON API yet. ",
            "author": "Yonik Seeley",
            "id": "comment-16149058"
        },
        {
            "date": "2017-09-01T12:55:30+0000",
            "content": "Hi Varun Thacker, It seems that your query is not a proper way to use collapse query parser. It should be\n\ncurl -XGET http://localhost:8983/solr/test_dsl/query -d '\n{\n  \"query\" : \"*:*\",\n  \"filter\": { \n    \"collapse\": { \n      \"field\": \"collapse_s\"\n    }\n  }\n}'\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16150460"
        },
        {
            "date": "2017-09-01T12:59:44+0000",
            "content": "A patch that cleanup the test ( also add a test for collapse qparser). I will commit the patch soon. ",
            "author": "Cao Manh Dat",
            "id": "comment-16150465"
        },
        {
            "date": "2017-09-01T13:21:55+0000",
            "content": "Commit d3013ab600636c4cd958af3a395ef84e6570af6a in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d3013ab ]\n\nSOLR-11244: Query DSL for Solr ",
            "author": "ASF subversion and git services",
            "id": "comment-16150512"
        },
        {
            "date": "2017-09-01T13:22:48+0000",
            "content": "Commit 04676d2746b4ebc30d59eb041ee73e667b1dca2d in lucene-solr's branch refs/heads/branch_7x from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=04676d2 ]\n\nSOLR-11244: Query DSL for Solr ",
            "author": "ASF subversion and git services",
            "id": "comment-16150513"
        },
        {
            "date": "2017-09-01T13:47:04+0000",
            "content": "Commit 6f6cdf963ad289d7d392fa9b1896746e692088de in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6f6cdf9 ]\n\nSOLR-11244: Fix precommit ",
            "author": "ASF subversion and git services",
            "id": "comment-16150552"
        },
        {
            "date": "2017-09-01T13:47:54+0000",
            "content": "Commit 2174f0d2989632fb27f8da0c30f7bb5828f09b47 in lucene-solr's branch refs/heads/branch_7x from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2174f0d ]\n\nSOLR-11244: Fix precommit ",
            "author": "ASF subversion and git services",
            "id": "comment-16150554"
        },
        {
            "date": "2017-09-01T14:38:01+0000",
            "content": "Commit c141094f6bec699c78a7513d0ccef8b958c4606e in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c141094 ]\n\nSOLR-11244: Add test for bool qparser in QueryEqualityTest ",
            "author": "ASF subversion and git services",
            "id": "comment-16150646"
        },
        {
            "date": "2017-09-01T14:38:58+0000",
            "content": "Commit 26b6cb672d60e0d59c9526e5556feb6e8b39e994 in lucene-solr's branch refs/heads/branch_7x from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=26b6cb6 ]\n\nSOLR-11244: Add test for bool qparser in QueryEqualityTest ",
            "author": "ASF subversion and git services",
            "id": "comment-16150649"
        },
        {
            "date": "2017-10-17T11:04:20+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16207459"
        }
    ]
}