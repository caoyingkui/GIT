{
    "id": "LUCENE-480",
    "title": "NullPointerException during IndexWriter.mergeSegments",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.9",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "Last commit on culprit org.apache.lucene.index.FieldsReader: Sun Oct 30 05:38:46 2005.\n\n---------------------------------------------------------\nOffending code in FieldsReader.java:\n\n...\n  final Document doc(int n) throws IOException {\n    indexStream.seek(n * 8L);\n    long position = indexStream.readLong();\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber); \n//\n// This apparently returns null, presumably either as a result of:\n//   catch (IndexOutOfBoundsException ioobe) \n{\n//      return null;\n//    }\n// in fieldInfos.fieldInfo(int fieldNumber)\n//  - or -\n// because there's a null member of member ArrayList byNumber of FieldInfos\n\n      byte bits = fieldsStream.readByte();\n\n      boolean compressed = (bits & FieldsWriter.FIELD_IS_COMPRESSED) != 0;\n\n....\n\n        Field.Store store = Field.Store.YES;\n//\n// Here --v is where the NPE is thrown.        \n        if (fi.isIndexed && tokenize)\n          index = Field.Index.TOKENIZED;\n...\n\n---------------------------------------------------------\n\nProposed Patch:\nI'm not sure what the behavior should be in this case, but if it's no big deal that there's null field info for an index and we should just ignore that index, an obvious patch could be:\n\nIn FieldsReader.java:\n\n...\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber); \n//    vvvPatchvvv\n      if(fi == null) \n{continue;}\n\n      byte bits = fieldsStream.readByte();\n...\n\n---------------------------------------------------------\n\nOther observations:\nIn my search prior to submitting this issue, I found LUCENE-168, which looks similar, and is perhaps related, but if so, I'm not sure exactly how.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2005-12-09T02:11:15+0000",
            "content": "Is this possible to reproduce in a testcase you can add here?\nFieldInfo should never be null AFAIK, so  I'd rather get to the root cause of the problem rather than covering it up. ",
            "author": "Yonik Seeley",
            "id": "comment-12359750"
        },
        {
            "date": "2005-12-09T02:26:12+0000",
            "content": "Sure, let me try and put that together. ",
            "author": "Jeremy Calvert",
            "id": "comment-12359752"
        },
        {
            "date": "2005-12-09T04:00:06+0000",
            "content": "A little more data: \n\n      int fieldNumber = fieldsStream.readVInt();\n\non line 68 of FieldsReader.java results in fieldNumber = 221997 for my particular fieldsStream, so it would seem that my proposed patch would indeed just gloss over a larger problem wherein the fieldsStream is getting corrupted.\n\nOn the other hand, having this cause an NPE seems less than ideal.  Is there some way to throw an exception that's more indicative of the stream corruption?\n\nIn any case, I'm tracing back how this happened in the first place.   I would simply give you the code and data to reproduce it, but the data is ~500M worth.\n\nStay tuned! ",
            "author": "Jeremy Calvert",
            "id": "comment-12359755"
        },
        {
            "date": "2005-12-09T08:40:42+0000",
            "content": "Apparently my hardware or filesystem is having some difficulties, which could be the reason the fieldsStream is corrupt. I apologize for the false alarm and sincerely appreciate the quick feedback.\n\n\n\tdmesg\n...\nPCI-DMA: Out of IOMMU space for 180224 bytes at device 0000:00:07.0\nend_request: I/O error, dev sda, sector 52463038\nprintk: 1014 messages suppressed.\nBuffer I/O error on device md0, logical block 21106784 \n\n ",
            "author": "Jeremy Calvert",
            "id": "comment-12359810"
        },
        {
            "date": "2005-12-09T08:49:05+0000",
            "content": "No problem... glad to hear it will be an easy fix  ",
            "author": "Yonik Seeley",
            "id": "comment-12359812"
        },
        {
            "date": "2006-06-28T01:19:14+0000",
            "content": "I had a similar problem, and it wasn't obvious at first. It turned out to be a corrupt ram chip. The memory worked fine in most instances, the error would reveal itself when doing large indexing, assuming a few small bits are being written incorrectly. You can narrow down the problem by downloading the [URL=http://www.ultimatebootcd.com]Ultimate Boot CD[/url] and running the memory diagnostic.\n\nGood luck. ",
            "author": "Michael W. Nassif",
            "id": "comment-12418081"
        }
    ]
}