{
    "id": "SOLR-600",
    "title": "XML parser stops working under heavy load",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Cannot Reproduce"
    },
    "description": "Under heavy load, the following is spat out for every update:\n\norg.apache.solr.common.SolrException log\nSEVERE: java.lang.NullPointerException\n        at java.util.AbstractList$SimpleListIterator.hasNext(Unknown Source)\n        at org.apache.solr.update.DocumentBuilder.toDocument(DocumentBuilder.java:225)\n        at org.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:66)\n        at org.apache.solr.handler.XmlUpdateRequestHandler.processUpdate(XmlUpdateRequestHandler.java:196)\n        at org.apache.solr.handler.XmlUpdateRequestHandler.handleRequestBody(XmlUpdateRequestHandler.java:123)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:125)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:965)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:338)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:272)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:175)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:286)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:844)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:447)\n        at java.lang.Thread.run(Thread.java:735)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12605593",
            "date": "2008-06-17T13:19:23+0000",
            "content": "I have not been able to reproduce this.\nIs it possible to create a test case to reproduce?\nDoes this happen  if you use the bundled Jetty?\nWhat is the exact Java version you are using? "
        },
        {
            "author": "John Smith",
            "id": "comment-12605696",
            "date": "2008-06-17T19:11:45+0000",
            "content": "Java(TM) SE Runtime Environment (build pxa6460sr1-20080416_01(SR1))\nIBM J9 VM (build 2.4, J2RE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460-20080415_18762 (JIT enabled, AOT enabled)\nJ9VM - 20080415_018762_LHdSMr\nJIT  - r9_20080415_1520\nGC   - 20080415_AA)\nJCL  - 20080412_01\n\nOnly thing I can think of to test is to push 60,000 to 100,000 updates in the span of a few minutes onto a single machine. If I keep the updates under 30,000 per hour, it runs fine. Due to the sensitivity of the data, I cannot provide a copy of example data or schema, but I can provide analogs if needed. I can also provide scrubbed config files as well. I'm afraid I lack the knowledge to make use of the Jetty.\n\nEdit: System has 8 cores, 32 gigs of memory. Tomcat is not explicitly configured to use multiple cores, however, since it's never been needed. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12605700",
            "date": "2008-06-17T19:35:01+0000",
            "content": "Only thing I can think of to test is to push 60,000 to 100,000 updates in the span of a few minutes onto a single machine. \n\nI've actually recently done that... total of 50M documents, multiple threads adding docs via CSV upload.\nResult was ~4000 docs/second (these were relatively simple docs).  Didn't utilize the XML parser, but a nice testcase.\n\nIBM J9 VM \n\nIf this is relatively reproducible, you could try Sun's JVM to rule out a JVM bug.\n\n "
        },
        {
            "author": "John Smith",
            "id": "comment-12605729",
            "date": "2008-06-17T21:13:07+0000",
            "content": "java version \"1.6.0_06\"\nJava(TM) SE Runtime Environment (build 1.6.0_06-b02)\nJava HotSpot(TM) 64-Bit Server VM (build 10.0-b22, mixed mode)\n\nProblem disappears when using the Sun version. Shall I then assume it's an IBM JVM problem? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12605735",
            "date": "2008-06-17T21:22:01+0000",
            "content": "Certainly sounds like an IBM JVM bug, or perhaps more likely an issue in their XML parser that makes it non-thread safe? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12605747",
            "date": "2008-06-17T21:58:55+0000",
            "content": "based on the stack trace it seems more likely the bug would be in the java.util.AbstractList provided by the IBM JVM "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-12605751",
            "date": "2008-06-17T22:06:43+0000",
            "content": "It could also be a concurrency bug in Solr that shows up on the IBM JVM because the thread scheduler makes different decisions.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12605768",
            "date": "2008-06-17T22:55:30+0000",
            "content": "It could also be a concurrency bug in Solr that shows up on the IBM JVM because the thread scheduler makes different decisions.\n\nit's possible ... but skimming the code in question it seems unlikely.   DocumentBuilder.java:225 is a foreach loop over a SolrInputField.  The fact that AbstractList$SimpleListIterator is being used indicates that the SolrInputField 'value\" object is something that extends AbstractList (and not a single object, so it seems the anonymous Iterator in SolrInputField is off the hook) ... by the time  DocumentBuilder.java:225 is reached, there shouldn't be anything modifying that SolrInputDocument.\n\nbesides: if it was a concurrency problem wouldn't you expect to see ConcurrentModificationException instead of NullPointerException?  Even if something was mucking with the values of the ArrayList, i could understand seeing next() return null ... but not a NPW in hasNext(). "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13589523",
            "date": "2013-02-28T13:20:39+0000",
            "content": "We now have IBM JVM in our nightly tests, don't we? If all those tests pass I think this should be closed as \"Cannot Reproduce\" "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13589541",
            "date": "2013-02-28T13:47:05+0000",
            "content": "Yes, we have; XML-related issues never appear in J9. Maybe it was the case in older J9 versions. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13592752",
            "date": "2013-03-04T22:34:25+0000",
            "content": "Closing as this seems not to be an issue with current versions. Please re-open if you discover this again. "
        }
    ]
}