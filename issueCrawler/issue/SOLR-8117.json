{
    "id": "SOLR-8117",
    "title": "Rule-based placement issue with 'cores' tag",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.3,                                            5.3.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The rule-based placement fails on an empty node (core count = 0) with condition 'cores:<1'.\n\nIt also fails if current core number is equal to the core number in the condition - 1. \n\nDuring the placement strategy process, the core counts for a node are incremented when all the rules match.\n\nAt the end of  the code, an additional verification of all the conditions is done with incremented core count and therefore it fails.\n\nI don't know why this additional verification is needed and removing it seems to fix the issue.",
    "attachments": {
        "SOLR-8117.patch": "https://issues.apache.org/jira/secure/attachment/12765050/SOLR-8117.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-02T20:44:18+0000",
            "author": "Ludovic Boutros",
            "content": "A patch with a test and the additional verification removed.\n\nThe rule test and rule engine test pass. ",
            "id": "comment-14941733"
        },
        {
            "date": "2015-10-03T14:02:40+0000",
            "author": "Noble Paul",
            "content": "The second validation is required to ensure that at the end , the state is as desired. It cannot be eliminated.\n ",
            "id": "comment-14942309"
        },
        {
            "date": "2015-10-03T14:36:46+0000",
            "author": "Ludovic Boutros",
            "content": "Hi Paul, thank you for your answer, \n\nit was just at first glance and all related tests were ok.\n\nThat said, could you please give me an example in order to add a test which should fail without this second validation ?\n\nDoes this mean that the increment of the core count should be done in this second validation ?\nOr do you mean that the condition '<1' should be always true at the end ? This would seem weird to me.\n\nI also have a stability issue in the collection creation, but I did not manage to reproduce it currently in a unit test (Only in production and in Docker). \nThe collection creation fails two or three times and then is created with success on the fourth time for instance. I will check after the fix of this issue. ",
            "id": "comment-14942332"
        },
        {
            "date": "2015-10-03T15:23:06+0000",
            "author": "Noble Paul",
            "content": "Take a condition cores>1. \n\nThis condition can be validated only in the end, because when you start assigning replicas , cores=0 . In the end you will have to check if it is indeed greater than 1 ",
            "id": "comment-14942352"
        },
        {
            "date": "2015-10-05T17:04:36+0000",
            "author": "Ludovic Boutros",
            "content": "Thank you Paul, \n\nThis example is good.\nBut do you agree that the given test in the patch should pass ? (I mean a condition cores<1 should let a core be created on an empty node ?)    ",
            "id": "comment-14943664"
        },
        {
            "date": "2015-10-05T19:36:11+0000",
            "author": "Ludovic Boutros",
            "content": "Ok, so something like this should be better:\n\nI have modified the function Rule.canMatch() in order to prevent the additional verification in case of operator '<' or '='.\n\nI've added another test for your example cores>1. ",
            "id": "comment-14943899"
        },
        {
            "date": "2015-10-06T12:33:11+0000",
            "author": "Noble Paul",
            "content": "I see a rule in the testcase like shard:*,cores:<1 \n\nThis rule will always fail because if I assign at least one replica to a shard the core will become 1 which is NOT LESS THAN 1 . Did you mean to put shard:*,cores:<2 which means exactly one replica or less  ",
            "id": "comment-14944953"
        },
        {
            "date": "2015-10-06T14:58:30+0000",
            "author": "Ludovic Boutros",
            "content": "hmm, I see, the rules should be considered as a mandatory state before and after the collection creation.\nThis type of condition (<1) should be considered as invalid. I misunderstood the rule configuration.\n\nThank you Paul.\n\nI will try to reproduce the other behavior: \n\nsometimes a collection creation is allowed and sometimes not with the same cluster and the same rules.\n\nI use these two rules:\n\nrule=shard:*,host:*,replica:<2\nrule=shard:*,cores:<2\n\n\nThe last time, I had to retry 3 times to finally create a collection (7 shards, 2 replicas per shard).\n\nThe demo cluster contains 4 hosts, 16 nodes (4 per host), 14 empty nodes.\n\nWith your explaination, it should never be allowed to create this collection because all nodes contain 2 cores after the collection creation.\nOr perhaps, the two rules are not applied the way I think.\n\nBy the way, the behavior should always be the same. ",
            "id": "comment-14945144"
        },
        {
            "date": "2015-10-06T15:41:14+0000",
            "author": "Noble Paul",
            "content": "This type of condition (<1) should be considered as invalid. I misunderstood the rule configuration.\n\nSo far I have not put in any checks for \"impossible\" conditions\n\nBy the way, the behavior should always be the same.\n\nYes, it should be. IIRC the state of the system is printed out if the rules fail and it should be possible to debug it easily.\n\nThis should always pass , because for a given shard there can be a max of 1 replica in a host. You have four hosts.  It requires only 14 nodes as per your rule cores:<2 and you have 16 nodes. So , it should always pass. \n\nI guess it has something to do with the order the nodes are assigned. It'll be great if we could write a testcase with the same data  ",
            "id": "comment-14945218"
        },
        {
            "date": "2015-10-14T19:00:00+0000",
            "author": "Ludovic Boutros",
            "content": "Paul, I managed to reproduce the issue in a test case.\nAnd you are right, depending on the empty node positions, the test fails.\n\nI will try to attach the test case and perhaps a fix soon. ",
            "id": "comment-14957527"
        }
    ]
}