{
    "id": "LUCENE-6021",
    "title": "Make FixedBitSet and SparseFixedBitSet share a wider common interface",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0"
        ]
    },
    "description": "Today, the only common interfaces that these two classes share are Bits and Accountable. I would like to add a BitSet base class that would be both extended by FixedBitSet and SparseFixedBitSet. The idea is to share more code between these two impls and make them interchangeable for more use-cases so that we could just use one or the other based on the density of the data that we are working on.",
    "attachments": {
        "LUCENE-6021.patch": "https://issues.apache.org/jira/secure/attachment/12676597/LUCENE-6021.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14181406",
            "author": "Adrien Grand",
            "content": "Here is a patch:\n\n\toal.util.BitSet has the get/set/clear methods you would expect on a BitSet\n\tSparseFixedBitSet and FixedBitSet extend BitSet\n\tBitSet also has nextSetBit but the contract of this method has been changed to return 2^31-1 instead of -1 when there are no more bits set, it makes it possible to reuse this method in DocIdSetIterator.advance/nextDoc\n\tBitSet also has default implementations for and(DISI), or(DISI) and andNot(DISI) than can be overridden by sub-classes (eg. FixedBitSet does)\n\tor/and/andNot have also been added to DocIdSetBuilder\n\tBooleanFilter now uses DocIdSetBuilder to build the bitset of matching docs instead of enforcing a FixedBitSet (so it will sometimes use a SparseFixedBitSet when data is sparse)\n\n ",
            "date": "2014-10-23T14:32:12+0000"
        },
        {
            "id": "comment-14181409",
            "author": "Uwe Schindler",
            "content": "Cool.\n\nIn the patch you have the abstract cardinality() method on BitSet abstract, too. So BitDocIdSet's 2nd ctor does not need to be specialized to FixedBitSet? ",
            "date": "2014-10-23T14:41:33+0000"
        },
        {
            "id": "comment-14181457",
            "author": "Adrien Grand",
            "content": "Good point Uwe. The reason why I did it this way is that for SparseFixedBitSet it makes more sense to use #aproximateCardinality() to get a cost. So I refactored a bit the patch to add an #approximateCardinality() method on BitSet that forwards to #cardinality() for FixedBitSet and is overridden by SparseFixedBitSet to use linear counting. Then BitDocIdSet's 2nd constructor doesn't specialize for FixedBitSet and uses approximateCardinality to get a cost in all cases. Does it make sense to you? ",
            "date": "2014-10-23T15:21:20+0000"
        },
        {
            "id": "comment-14181527",
            "author": "Uwe Schindler",
            "content": "That is fine to me! I was just wondering why you did this specialization at all. Thanks for the explanation! ",
            "date": "2014-10-23T16:19:10+0000"
        },
        {
            "id": "comment-14182532",
            "author": "ASF subversion and git services",
            "content": "Commit 1634012 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1634012 ]\n\nLUCENE-6021: Make SparseFixedBitSet and FixedBitSet share a common \"BitSet\" interface. ",
            "date": "2014-10-24T07:32:21+0000"
        },
        {
            "id": "comment-14182545",
            "author": "ASF subversion and git services",
            "content": "Commit 1634013 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1634013 ]\n\nLUCENE-6021: Make SparseFixedBitSet and FixedBitSet share a common \"BitSet\" interface. ",
            "date": "2014-10-24T07:39:17+0000"
        },
        {
            "id": "comment-14332708",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:01:28+0000"
        }
    ]
}