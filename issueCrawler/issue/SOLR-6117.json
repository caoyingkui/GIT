{
    "id": "SOLR-6117",
    "title": "Replication command=fetchindex always return success.",
    "details": {
        "affect_versions": "4.6,                                            7.5",
        "status": "Resolved",
        "fix_versions": [
            "master (8.0)",
            "7.7"
        ],
        "components": [
            "replication (java)"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Replication API command=fetchindex do fetch the index. while occur the error, still give success response. \nAPI should return the right status, especially WAIT parameter is true.(synchronous).",
    "attachments": {
        "SOLR-6117.txt": "https://issues.apache.org/jira/secure/attachment/12647166/SOLR-6117.txt",
        "SOLR-6117.patch": "https://issues.apache.org/jira/secure/attachment/12647371/SOLR-6117.patch",
        "SOLR-6117-master.patch": "https://issues.apache.org/jira/secure/attachment/12949845/SOLR-6117-master.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14012390",
            "date": "2014-05-29T14:17:38+0000",
            "content": "Thanks Raintung.\n\nIn this patch, I've made changes to store the actual exception and to print it in the response. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14012469",
            "date": "2014-05-29T15:55:57+0000",
            "content": "Another iteration. I removed the exception from the Status class because the SnapPuller API is written to never throw exceptions. Instead, it just returns booleans for success/failure. Throwing exceptions is a very invasive change.\n\nThis patch just returns the right status. I've added a test as well. Is this sufficient for you Raintung? "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14012729",
            "date": "2014-05-29T19:02:55+0000",
            "content": "It looks like all of the other commands also return OK_STATUS \n\n\nelse if (command.equals(CMD_GET_FILE)) {\n      getFileStream(solrParams, rsp);\n    } else if (command.equals(CMD_GET_FILE_LIST)) {\n      getFileList(solrParams, rsp);\n    } else if (command.equalsIgnoreCase(CMD_BACKUP)) {\n      doSnapShoot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    } else if (command.equalsIgnoreCase(CMD_DELETE_BACKUP)) {\n      deleteSnapshot(new ModifiableSolrParams(solrParams), rsp, req);\n      rsp.add(STATUS, OK_STATUS);\n    }\n\n\n\nThe actual error stack trace gets printed in the logs. Should we change how the remaining also get handled? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14013351",
            "date": "2014-05-30T06:37:03+0000",
            "content": "The actual error stack trace gets printed in the logs. Should we change how the remaining also get handled?\n\nI think an exception should be returned in the response if possible. The old days of just logging exceptions are gone. We can't expect users to sift through GBs of logs in SolrCloud to find the reason behind the failure. But that's a big change so I think we should do it in another issue. "
        },
        {
            "author": "Jason Gerlowski",
            "id": "comment-16700791",
            "date": "2018-11-27T17:46:39+0000",
            "content": "Most recent attached patch is a slight update of Shalin's.  I'd hoped to add a lot more tests with this that trigger the various failure conditions, but it's hard to reproduce many of them via JUnit.  Also looked at adding unit tests for ReplicationHandler directly, but it relies heavily on SolrCore, which is final which makes mocking/stubbing difficult as well.  If anyone sees a way to get more coverage on this without major surgery, I'd love to hear it.\n\nThe current patch makes sure that we never advertise a response as status=OK falsely, so it's just a bugfix and should be safe to include in branch_7x from a breaking-change perspective.  There's a lot of other problems with the replication handler responses that would require breaking changes.  Specifically:\n\n\t\"status\" is only present on some responses.  Ideally it should be present on all /replication responses so that clients can rely on it being there.\n\t\"status\" is used inconsistently.  Some uses give it an enum-like value that clients could key off of, others treat it like a \"message\" field and just give it random error messages\n\twhen errors occur, the \"message\" and \"exception\" fields are used inconsistently.  Ideally if an error occurs there would always be a message, and sometimes there would also be an exception.\n\tmany of the error-cases involving argument-validation set the status field properly but return with the wrong HTTP status (200). (i.e. they should throw a SolrException).\n\n\n\nI plan on working some of these out soon in a larger commit that can be put on master. "
        },
        {
            "author": "Jason Gerlowski",
            "id": "comment-16701957",
            "date": "2018-11-28T14:32:32+0000",
            "content": "Attached an updated patch that's intended for the master branch, and thus has liberty to do more to make the various responses from the /replication API more uniform.  This version of the patch addresses all of the bullet points in my previous comment.  Haven't run tests more generally yet, but I hope to commit to master in the next week or so.\n\nOne thing I forgot to clarify in my previous comment: both of these patches address all subcommands in the /replication API (not just \"fetchindex\")  That was a point of discussion in the original effort on this JIRA, so just thought I'd clarify. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16706272",
            "date": "2018-12-02T13:16:08+0000",
            "content": "Commit 1df106e0e726ca0fe83d5074973d91a0fb21fd0a in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1df106e ]\n\nSOLR-6117: Return correct 'status' from ReplicationHandler "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16706476",
            "date": "2018-12-02T21:23:13+0000",
            "content": "Commit c951578fcabfd5520f425156b0fa35f35811554d in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c951578 ]\n\nSOLR-6117: Unify ReplicationHandler error handling\n\nPrior to this commit, ReplicationHandler had a few inconsistencies\nin how it reported errors:\n\n\tSometimes the 'status' field was used as an enum (e.g. 'success'\n    v. 'failure'.  Elsewhere it is used to hold error messages.\n\tSometimes an explicit 'message' field was used, but often not.\n\tSometimes a stack trace was provided in place of an error message.\n\n\n\nThis commit tweaks the various error cases in ReplicationHandler to\nreport errors consistently.  'status' is always an enum-type value.  A\n'message' field is provided for all errors, with an optional 'exception'\nfield. "
        },
        {
            "author": "Jason Gerlowski",
            "id": "comment-16707190",
            "date": "2018-12-03T13:24:00+0000",
            "content": "Marking this as 'Fixed' for 8.0 and 7.7.  To summarize/clarify, the fixes on master and branch_7x are a little different based on the need to avoid potentially breaking changes on 7x.  The 7x changes only go far enough to fix the bug where we return a \n\"success\" status even when the request fails.  The master changes do this, as well as correcting a few inconsistencies between the different error cases. "
        }
    ]
}