{
    "id": "LUCENE-6672",
    "title": "CompiledAutomaton can generate a binary automaton that have more than 12*maxDeterminizedStates",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "4.10.3,                                            6.0",
        "components": [
            "core/index"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "The maxDeterminizedStates parameter to Automaton has introduced a way to prevent massive states explosion during the generation of Automatas. This is a nice feature to protect applications against DoS attacks. Unfortunately in some cases like wildcard queries with a lot of wildcards the resulting binary Automaton can exceed maxDeterminizedStates by a factor of ~12.\nIf I configure my application with the default maxDeterminizedStates to 10,000 CompiledAutomaton can potentially generate Automatas with more than 120,000 states.\n\nThis is because UTF32ToUTF8 ignores maxDeterminizedStates and can generate a large binary automata that will be passed to the costly Operations.getCommonSuffixBytesRef.\n\nCurrent workaround is to set maxDeterminizedStates to expectedMaxStates/13.\n\nI'm not sure what's the best way to fix this issue, UTF32ToUTF8.convert() uses the Automaton.Builder which is very fast to create states, adding a check after each state creation is maybe not the best idea.\n\nA partial quick fix could be to check the size of the resulting binary automata and fail before running the costly Operations.getCommonSuffixBytesRef.\n\nAnother fix would be to generalize maxDeterminizedStates to maxStates at the Automaton.Builder level. The maxStates could be checked before costly operations (before ArrayUtil.grow in addTransition and in finishState). Unfortunately this one requires more refactoring (not included in the patch).\n\nI included two patches to illustrate the above two fixes.",
    "attachments": {
        "maxStates-overview.patch": "https://issues.apache.org/jira/secure/attachment/12744698/maxStates-overview.patch",
        "quick-fix.patch": "https://issues.apache.org/jira/secure/attachment/12744699/quick-fix.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14626406",
            "author": "Michael McCandless",
            "date": "2015-07-14T14:36:32+0000",
            "content": "I'm not sure we need to do anything here: the intention is to set the limit of how many states determinize is allowed to create, not to be a hard limit on the number of states the final automaton has after UTF8 conversion ... "
        },
        {
            "id": "comment-14626628",
            "author": "David Causse",
            "date": "2015-07-14T16:44:06+0000",
            "content": "It makes sense, I was not sure either. My aim was to provide a bit more control. I'm trying to protect an application from a wildcard query that caused some troubles (when parsing the query). But I just realized that maxDeterminizedStates is maybe not the solution for the moment (https://issues.apache.org/jira/browse/LUCENE-6677). "
        }
    ]
}