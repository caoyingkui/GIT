{
    "id": "LUCENE-4120",
    "title": "FST should use packed integer arrays",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/FSTs"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "There are some places where an int[] could be advantageously replaced with a packed integer array.\n\nI am thinking (at least) of:\n\n\tFST.nodeAddress (GrowableWriter)\n\tFST.inCounts (GrowableWriter)\n\tFST.nodeRefToAddress (read-only Reader)\n\n\n\nThe serialization/deserialization methods should be modified too in order to take advantage of PackedInts.get\n{Reader,Writer}\n.",
    "attachments": {
        "LUCENE-4120.patch": "https://issues.apache.org/jira/secure/attachment/12531673/LUCENE-4120.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-08T12:45:11+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13291747"
        },
        {
            "date": "2012-06-11T13:18:32+0000",
            "content": "Patch. I don't fully understand how FST packing works so I would appreciate if someone familiar with it could review this patch. ",
            "author": "Adrien Grand",
            "id": "comment-13292798"
        },
        {
            "date": "2012-06-11T17:09:10+0000",
            "content": "I looked at the patch and it looks good to me but I didn't really analyze it in-depth. As for fst packing, the idea is fairly simple \u2013 you reduce the overall size of the fst by moving states which have lots incoming arcs to offsets which compress well (in vcoding). At least I think that's what Mike implemented (Mike is an unpredictable genius  ).\n\nThis presentation has some details:\nhttp://ciaa-fsmnlp-2011.univ-tours.fr/ciaa/upload/files/Weiss-Daciuk.pdf ",
            "author": "Dawid Weiss",
            "id": "comment-13292885"
        },
        {
            "date": "2012-06-11T18:38:57+0000",
            "content": "Patch looks great!\n\nKuromoji's TokenInfoDictionaryBuilder doesn't compile w/ the patch\n... it just needs the added arg to FST.pack.\n\nIt seems sort of odd to have the new .save method on ReaderImpl... can\nit be on Mutable/Impl instead, or, maybe FST does its own saving or\nsomething?\n\nIn all the places we now pass random.nextFloat() for\nacceptableOverheadRatio (to FST.pack or MemoryPostingsFormat),\nshouldn't it be COMPACT .. FASTEST instead of 0.0 .. 1.0?\n\nCan you fix the comment for FST.pack?  It's no longer necessarily 8\nbytes per node ... maybe just say \"up to 8 bytes per node, depending\non acceptableOverheadRatio\"?\n\nMaybe rename the new PackedInts.getWriter method to eg\ngetWriterByFormat?  I was confused on just staring at it... ",
            "author": "Michael McCandless",
            "id": "comment-13292958"
        },
        {
            "date": "2012-06-11T18:41:44+0000",
            "content": "As for fst packing, the idea is fairly simple \u2013 you reduce the overall size of the fst by moving states which have lots incoming arcs to offsets which compress well (in vcoding).\n\nThat's all I did, inspired by your talk/paper... I think we could do more  ",
            "author": "Michael McCandless",
            "id": "comment-13292966"
        },
        {
            "date": "2012-06-11T19:43:09+0000",
            "content": "That's all I did, inspired by your talk/paper... I think we could do more \n\nRemember I didn't talk about my failed attempts, there is a very likely chance you may be thinking about those   ",
            "author": "Dawid Weiss",
            "id": "comment-13293012"
        },
        {
            "date": "2012-06-11T21:25:37+0000",
            "content": "It seems sort of odd to have the new .save method on ReaderImpl... can it be on Mutable/Impl instead, or, maybe FST does its own saving or something?\n\nMy first intent was to add this method to Mutable. The problem is that nodeRefToAddress needs to be a reader since it may be instantiated through PackedInts.getReader, but it also might need to be serialized because of the save method. This is why I added this method to Reader. I can switch this method to Mutable but this means that it won't be possible to save a FST read from disk anymore (maybe not a problem?). Another solution could be to move the serialization logic to FST but this would require to expose some internals of the packed integer arrays to select the right format (PACKED or PACKED_SINGLE_BLOCK depending on whether the reader/mutable is an instance of Packed64SingleBLock) but I would really like to avoid this as long as possible.\n\nIn all the places we now pass random.nextFloat() for acceptableOverheadRatio (to FST.pack or MemoryPostingsFormat), shouldn't it be COMPACT .. FASTEST instead of 0.0 .. 1.0?\n\n0..1 gives more chances to different implementations to be selected. FASTEST=7 is only useful for bitsPerValue=1 so that a Direct8 is instantiated. If we used an uniformly distributed float between COMPACT=0 and FASTEST=7, a Direct* implementation would be used more than 6/7 of the time when bitsPerValue>=4. For example, if bitsPerValue=15, a Direct16 will be instantiated if acceptableOverheadRatio>=1/15=0.07 and a Packed64 otherwise. A lower upper bound for acceptableOverheadRatio makes the latter case more likely.\n\n[kuromoji], [getWriterByFormat], [javadocs]\n\nAgreed, working on it.\n ",
            "author": "Adrien Grand",
            "id": "comment-13293100"
        },
        {
            "date": "2012-06-11T21:32:12+0000",
            "content": "This presentation has some details: http://ciaa-fsmnlp-2011.univ-tours.fr/ciaa/upload/files/Weiss-Daciuk.pdf\n\nThanks for the link, Dawid! I am considering adding this link to the pack docs. ",
            "author": "Adrien Grand",
            "id": "comment-13293107"
        },
        {
            "date": "2012-06-11T23:48:00+0000",
            "content": "New patch:\n\n\tfixed Kuromoji TokenInfoDictionaryBuilder (but you will need to run ant build-dict to make tests pass),\n\tmoved save to Mutable, FST now cannot be saved if it has been loaded from disk,\n\trenamed getWriter to getWriterByFormat,\n\tfixed docs.\n\n\n\nFST docs say that there is no need to have backward compatibility because FSTs are experimental. Is it still accurate? The fact that FSTs are used in MemoryPostingsFormat and Kuromoji analyzers makes me feel that this is not true anymore (or at least won't be true anymore when 4.0 is released). ",
            "author": "Adrien Grand",
            "id": "comment-13293194"
        },
        {
            "date": "2012-06-12T00:08:23+0000",
            "content": "does the change only affect packed fsts? (sorry,on mobile).\nif so, its no problem. we only support unchanged lucene40 codec\nas far as index back compat, and it only uses unpacked fsts.\nanything else is open season ",
            "author": "Robert Muir",
            "id": "comment-13293207"
        },
        {
            "date": "2012-06-12T01:08:32+0000",
            "content": "Hmm, i forgot, Lucene40's docvalues supports packed ints.\n\nBut, we don't test this well: LUCENE-4085\n\nI'll see if i can do something to improve this: but we should decide if we want\nto just get this issue in before freezing the index format (releasing 4.0 alpha),\nor adding it at a later time and adding backwards compatibility.\n ",
            "author": "Robert Muir",
            "id": "comment-13293242"
        },
        {
            "date": "2012-06-12T07:21:00+0000",
            "content": "@Adrien: I've uploaded a preprint of the full paper; this is probably a better link for the JavaDocs (http://www.cs.put.poznan.pl/dweiss/site/publications/download/fsacomp.pdf). The docs should also say it's not exactly the same implementation (I used a simplified simulated annealing to find the local optimum for the number of states to move; this slows things down a LOT and typically for a marginal gain). ",
            "author": "Dawid Weiss",
            "id": "comment-13293406"
        },
        {
            "date": "2012-06-12T11:10:57+0000",
            "content": "@Robert: Yes, it only affects packed FSTs. In this case, the backward compatibility would be rather easy to set-up (just fill a GrowableWriter instead of an int[]).\n\n@Dawid: Thanks! ",
            "author": "Adrien Grand",
            "id": "comment-13293513"
        },
        {
            "date": "2012-06-12T17:15:59+0000",
            "content": "Patch looks great!\n\nI can switch this method to Mutable but this means that it won't be possible to save a FST read from disk anymore (maybe not a problem?)\n\nI think that's fine; you can't change an FST once it's built (not yet\nanyway...).\n\n0..1 gives more chances to different implementations to be selected. FASTEST=7 is only useful for bitsPerValue=1 so that a Direct8 is instantiated. If we used an uniformly distributed float between COMPACT=0 and FASTEST=7, a Direct* implementation would be used more than 6/7 of the time when bitsPerValue>=4. For example, if bitsPerValue=15, a Direct16 will be instantiated if acceptableOverheadRatio>=1/15=0.07 and a Packed64 otherwise. A lower upper bound for acceptableOverheadRatio makes the latter case more likely.\n\nAhh OK that makes sense, so let's leave it as 0..1.\n\nCan you move the imports under the copyright header in\nGrowableWriter.java?\n ",
            "author": "Michael McCandless",
            "id": "comment-13293780"
        },
        {
            "date": "2012-06-12T18:11:14+0000",
            "content": "I think that's fine; you can't change an FST once it's built (not yet anyway...).\n\nYeah, it'd be hard with the packed format. I once thought it'd be interesting to see incremental fst construction based on merging (much like it's done with inverted indexes). Delete would still be difficult (or impossible) but additions should be relatively easy to merge. ",
            "author": "Dawid Weiss",
            "id": "comment-13293812"
        },
        {
            "date": "2012-06-12T19:33:07+0000",
            "content": "Can you move the imports under the copyright header in GrowableWriter.java?\n\nPatch updated. ",
            "author": "Adrien Grand",
            "id": "comment-13293872"
        },
        {
            "date": "2012-06-12T23:07:34+0000",
            "content": "\nYes, it only affects packed FSTs. In this case, the backward compatibility would be rather easy to set-up (just fill a GrowableWriter instead of an int[]).\n\nFinally had a chance to glance through the patch. I was confusing myself about DocValues (its unaffected here). So this is no backwards break to the index format, since we don't use packed FSTs in our standard codec. I wouldn't do any backwards compatibility. ",
            "author": "Robert Muir",
            "id": "comment-13293988"
        },
        {
            "date": "2012-06-13T12:50:07+0000",
            "content": "+1 to commit.  Thanks Adrien! ",
            "author": "Michael McCandless",
            "id": "comment-13294423"
        },
        {
            "date": "2012-06-13T14:40:47+0000",
            "content": "Committed (r1349826 and r1349830 on trunk, and r1349859 on branch 4.x). ",
            "author": "Adrien Grand",
            "id": "comment-13294502"
        }
    ]
}