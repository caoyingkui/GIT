{
    "id": "LUCENE-6965",
    "title": "Expression's JavascriptCompiler to throw ParseExceptions with bad function names or arity",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Currently JavascriptCompiler will throw IllegalArgumentException for bad function names (or functions that don't exist) and for bad arity. I can see why this was done this way, but I believe ParseException would also be correct and it would be better since that's the exception clients will be prepared to receive.",
    "attachments": {
        "LUCENE-6965.patch": "https://issues.apache.org/jira/secure/attachment/12781027/LUCENE-6965.patch",
        "LUCENE-6965-2.patch": "https://issues.apache.org/jira/secure/attachment/12781091/LUCENE-6965-2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15087894",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2016-01-07T19:08:54+0000",
            "content": "Possible implementation. Ryan Ernst, Jack Conradson, any thoughts? "
        },
        {
            "id": "comment-15087966",
            "author": "Ryan Ernst",
            "date": "2016-01-07T19:43:01+0000",
            "content": "ParseException seems fine, but why the intermediate exception? Also, it looks like you are losing stack frames when creating a new exception from the intermediate. "
        },
        {
            "id": "comment-15088067",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2016-01-07T20:41:42+0000",
            "content": "why the intermediate exception?\nI couldn't find a better way to propagate the exception. Throwing ParseException from the visitor can't be done, since the visitor is called from RuleContext.accept, which doesn't throw any exceptions. \nI wouldn't want to catch a general IllegalArgumentException to convert it to ParseException, something unexpected inside visitor.visit could throw an IllegalArgumentException and I don't want to change the type of that.\n\nAlso, it looks like you are losing stack frames when creating a new exception from the intermediate.\nYes, unfortunately the ParseException doesn't support providing a cause in the constructor. I can add the cause by using: exception.initCause(e);. Attached new patch with this change and made the intermediate exception static "
        },
        {
            "id": "comment-15088092",
            "author": "Ryan Ernst",
            "date": "2016-01-07T20:56:42+0000",
            "content": "Thanks...looks ok I guess then. "
        },
        {
            "id": "comment-15088187",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2016-01-07T21:52:42+0000",
            "content": "Committed to trunk with revission 1723631. Sorry, I forgot to include the Jira code to the commit message. "
        },
        {
            "id": "comment-15088206",
            "author": "ASF subversion and git services",
            "date": "2016-01-07T22:03:44+0000",
            "content": "Commit 1723632 from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1723632 ]\n\nLUCENE-6965: Expression's JavascriptCompiler now throw ParseException with bad function names or bad arity instead of IllegalArgumentException "
        },
        {
            "id": "comment-15088211",
            "author": "Uwe Schindler",
            "date": "2016-01-07T22:06:49+0000",
            "content": "Can we revert the useless variable for the JavaScriptVisitor? It was made like that to have it encapsulated. "
        },
        {
            "id": "comment-15088217",
            "author": "Uwe Schindler",
            "date": "2016-01-07T22:11:12+0000",
            "content": "OK, it is because of the try/catch. Sorry. I hate this extra RuntimeException, sorry! "
        },
        {
            "id": "comment-15088234",
            "author": "Uwe Schindler",
            "date": "2016-01-07T22:16:47+0000",
            "content": "Instead of the runtime exception as cause, it is much better to simply replace the stack trace of the ParseException by the private runtime one:\n\n\nexception.initCause(e);\n// gets:\nexception.setStackTrace(e.getStackTrace());\n\n\n\nBy that it looks like the Exception was thrown from the visitor and the internal private exception is completely hidden.\nI did the same in MMapDirectory to convert wrong OOM because mmap failed to IOEx. "
        },
        {
            "id": "comment-15088236",
            "author": "Ryan Ernst",
            "date": "2016-01-07T22:18:48+0000",
            "content": "+1 to Uwe's suggestion. I did not know that was possible! "
        },
        {
            "id": "comment-15088266",
            "author": "Uwe Schindler",
            "date": "2016-01-07T22:29:33+0000",
            "content": "Another alternative is to use the \"rethrower\" and directly throw ParseException without declaring it. Currently only in test-framework and AttributeFactory classes (to handle invokeExact rethrowing, the one in AttributeFactory is more compact...).\n\nI can make a patch for that. "
        },
        {
            "id": "comment-15088298",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2016-01-07T22:39:54+0000",
            "content": "Another alternative is to use the \"rethrower\" and directly throw ParseException without declaring it. Currently only in test-framework and AttributeFactory classes (to handle invokeExact rethrowing, the one in AttributeFactory is more compact...).\nOK, that would remove the need of the ParseRuntimeException, right? "
        },
        {
            "id": "comment-15088309",
            "author": "Uwe Schindler",
            "date": "2016-01-07T22:46:10+0000",
            "content": "Yes! "
        },
        {
            "id": "comment-15088329",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2016-01-07T22:59:18+0000",
            "content": "(complete) patch with suggestions. Something like this Uwe Schindler? "
        },
        {
            "id": "comment-15088353",
            "author": "Uwe Schindler",
            "date": "2016-01-07T23:12:00+0000",
            "content": "Here is the patch. In Java 8 it would also work with a single method, but this one is more safe  [as it does not rely on type inference]. "
        },
        {
            "id": "comment-15088357",
            "author": "Uwe Schindler",
            "date": "2016-01-07T23:13:23+0000",
            "content": "Mine has the method more private and non-static. I also updated the messages. Should I commit? "
        },
        {
            "id": "comment-15088380",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2016-01-07T23:28:04+0000",
            "content": "Looks good. \nThanks! "
        },
        {
            "id": "comment-15088389",
            "author": "ASF subversion and git services",
            "date": "2016-01-07T23:38:16+0000",
            "content": "Commit 1723642 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1723642 ]\n\nLUCENE-6965: Changed exception handling in JavascriptCompiler using \"sneaky rethrow\" "
        },
        {
            "id": "comment-15088393",
            "author": "ASF subversion and git services",
            "date": "2016-01-07T23:40:34+0000",
            "content": "Commit 1723643 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1723643 ]\n\nMerged revision(s) 1723642 from lucene/dev/trunk:\nLUCENE-6965: Changed exception handling in JavascriptCompiler using \"sneaky rethrow\" "
        },
        {
            "id": "comment-15088402",
            "author": "Uwe Schindler",
            "date": "2016-01-07T23:44:55+0000",
            "content": "I'm done. You can resolve. "
        },
        {
            "id": "comment-15088409",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2016-01-07T23:48:28+0000",
            "content": "Thanks for the help! "
        }
    ]
}