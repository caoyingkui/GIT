{
    "id": "LUCENE-6250",
    "title": "Approximations on Spans",
    "details": {
        "resolution": "Duplicate",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Approximate spans using existing conjunction/disjunction approximations",
    "attachments": {
        "ApproxSpans-20150216a.patch": "https://issues.apache.org/jira/secure/attachment/12699161/ApproxSpans-20150216a.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14323314",
            "author": "Paul Elschot",
            "date": "2015-02-16T21:21:59+0000",
            "content": "This shows a basic plan, but still includes lots of System.out. It is to be used with the TestSpansAdvanced test case only. "
        },
        {
            "id": "comment-14323337",
            "author": "Paul Elschot",
            "date": "2015-02-16T21:38:07+0000",
            "content": "The patch of 20150216 passes down the asTwoPhaseIterator() call from SpanScorer to Spans and implements that on TermSpans.\n\nIt also contains some commented code (for debugging) and lots of System.out. With the patch applied to trunk, this test case:\n\nant test  -Dtestcase=TestSpansAdvanced -Dtests.method=testBooleanQueryWithSpanQueries -Dtests.seed=E42AB3F90E47161\n\nfails because SpanScorer.score() is called while it is still at docID -1, and I am stuck trying to figure this out.\n\nSome questions:\n\nIs this basic approach right?\n\nHow to pass this above test?\n\nWhen I started investigating this test case I was confused by BooleanWeight creating an unused SpansScorer while trying to create a BooleanScorer.\nShall I open another issue to separate the condition to actually use a BooleanScorer from the creation of the BooleanScorer (in BooleanWeight)?\n\nCan the TestFilterSpans class be removed? It only checks that all abstract Span methods are implemented. "
        },
        {
            "id": "comment-14324071",
            "author": "Adrien Grand",
            "date": "2015-02-17T11:27:36+0000",
            "content": "fails because SpanScorer.score() is called while it is still at docID -1, and I am stuck trying to figure this out.\n\nI just tried out the seed and I think I understand why: approximations are supposed to be a view and advancing the approximation should advance the scorer and vice-versa. Yet SpanScorer caches the current doc ID (the 'doc' variable) so when you advance the approximation, SpanScorer.doc is still -1 so when you call score() it tries to get the norm for doc ID -1.\n\nWhen I started investigating this test case I was confused by BooleanWeight creating an unused SpansScorer while trying to create a BooleanScorer. Shall I open another issue to separate the condition to actually use a BooleanScorer from the creation of the BooleanScorer (in BooleanWeight)?\n\nI agree this would be nicer!\n\nCan the TestFilterSpans class be removed? It only checks that all abstract Span methods are implemented.\n\nI never used spans, but looking at https://issues.apache.org/jira/browse/LUCENE-5933 this seems important in order to make sure that FilterSpans delegate everything from the wrapped instance? "
        },
        {
            "id": "comment-14325065",
            "author": "Paul Elschot",
            "date": "2015-02-17T22:56:27+0000",
            "content": "Thanks for trying.\nI retried a few things, and I think the problem that ConjunctionScorer.score() is called before any nextDoc() or advance(target) call.\nThis might happen when there is a scorer that incorrectly returns docID 0 initially, in that case DefaultBulkScorer does not do an initial nextDoc().\nI'm running out of time now, I'll try and post another a patch later that shows this neatly.\n\nAbout TestFilterSpans: currently this test case only repeats the check already done by the compiler on FilterSpans, namely that a non abstract class (FilterSpans) inheriting from an abstract class (Spans) must implement all inherited abstract methods. The delegation itself is not tested. "
        },
        {
            "id": "comment-14330241",
            "author": "Paul Elschot",
            "date": "2015-02-21T13:44:17+0000",
            "content": "After taking a closer look I think SpanScorer should be changed first to be as lazy as possible with the underlying Spans.\nFor example there is a spans.next() call in the SpanScorer constructor, and that is just not a good idea when doing approximations.\n\nAlso I'm adding a Spans.nextAtCurrentDoc() method to allow the span scoring for a single document to stay at the current document.\nThis nextAtCurrentDoc() is easy to implement on TermSpans. For the other Span implementations in core this will take me some time. "
        },
        {
            "id": "comment-14341481",
            "author": "Paul Elschot",
            "date": "2015-02-28T11:47:30+0000",
            "content": "This depends on LUCENE-6308, SpansEnum somewhat like PositionsEnum. Introducing Spans.nextAtCurrentDoc is too invasive. "
        },
        {
            "id": "comment-14373006",
            "author": "Paul Elschot",
            "date": "2015-03-21T20:37:37+0000",
            "content": "The patch at LUCENE-6308 of 21 March 2015 includes two phase doc id set iteration on SpansEnum, so I'm closing this issue as duplicate. "
        }
    ]
}