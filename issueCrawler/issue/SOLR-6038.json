{
    "id": "SOLR-6038",
    "title": "Errors on core start are not properly propagated to Solr clients",
    "details": {
        "affect_versions": "4.8",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "If a core cannot start (in our case index was manually corrupted), and client tries to query, Solr throws org.apache.solr.common.SolrException: Unable to create core: <core-name>, which is not handled by Solr itself and therefore handled by Tomcat - it renders an HTML page with stack trace as the response.\n\nSolrJ, in turn, first checks for the content type (HttpSolrServer.executeMethod() - switch (httpStatus):default is skipped because processor != null). And since response is not application/octet-stream as expected for javabin, but text/html instead, throws org.apache.solr.client.solrj.impl.HttpSolrServer$RemoteSolrException: Expected mime type application/octet-stream but got text/html. <html><head><title>Apache Tomcat/7.0.50 - Error report... - printing the whole HTML page into the message. As result, our logs contain unreadable huge exceptions with HTML, Solr server side stack traces and unclear reason that content type doesn't match. While it would perfectly OK to simply print \"internal server error\" meaning we should check Solr logs.\n\nCurrently we're working around that as follows:\n\n\tadd error page reference to Tomcat's conf/web.xml:\n    <error-page>\n        <exception>java.lang.Throwable</exception>\n        <location>/errors/throwable-javabin.jsp</location>\n    </error-page>\n\tadd throwable-javabin.jsp to webapps/solr/errors/:\n<%@ page contentType=\"application/octet-stream\" %><%\n  new org.apache.solr.common.util.JavaBinCodec().marshal(new org.apache.solr.common.util.NamedList(), response.getOutputStream());\n%>\n\n\n\nThis way, when an exception happens, Solr responds with an empty valid javabin named list. And SolrJ passes content type check and response parsing. Then it properly fails on further http status check (HttpSolrServer.executeMethod() - httpStatus != HttpStatus.SC_OK) and we get a nice message like org.apache.solr.client.solrj.impl.HttpSolrServer$RemoteSolrException: Internal Server Error\nrequest: http://localhost:8983/solr/core/select?q=...",
    "attachments": {},
    "issue_links": {},
    "comments": []
}