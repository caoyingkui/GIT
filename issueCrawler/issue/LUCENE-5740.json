{
    "id": "LUCENE-5740",
    "title": "Add stripContentOfTags option to HTMLStripCharFilter",
    "details": {
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/analysis"
        ],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "HTMLStripCharFilter should have an option to strip out the sub-content of certain elements. It already does this for SCRIPT & STYLE but it should be configurable to add more.  I don't want certain elements to have their contents to be searchable.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14019335",
            "author": "Steve Rowe",
            "content": "+1 - it would likely be very simple to add this functionality. ",
            "date": "2014-06-05T21:57:41+0000"
        },
        {
            "id": "comment-14074516",
            "author": "David Smiley",
            "content": "Due to tag balancing of embedded elements, it doesn't look so simple after all.  The current implementation only strips SCRIPT & STYLE tags which have special rules but conveniently have no child elements.  There's no need to balance embedded elements because there aren't any.  But to do this more generally, if you strip <foo>, you'd want to ensure that it strips <foo><bar><foo>hi</foo></bar></foo> correctly.  Admittedly, the particular application I'm working on strips link text content (<a>) and I'm not expecting embedded tags of the same type... but nonetheless it seems wrong to have this limitation.\n\nIf it did track the state, it would just need an integer depth counter (tagDepthWithinStrippedTag) that would be incremented for each opening element and decremented for each closing element within the current tag being stripped.  Not bad really.\n\nWhat do you think Steve Rowe? ",
            "date": "2014-07-25T16:10:06+0000"
        },
        {
            "id": "comment-14074644",
            "author": "Steve Rowe",
            "content": "If it did track the state, it would just need an integer depth counter (tagDepthWithinStrippedTag) that would be incremented for each opening element and decremented for each closing element within the current tag being stripped.\n\nDon't forget that HTMLStripCharFilter must be able to handle (i.e. not throw an error, and maximize useful extracted content) non-well-formed content.  Assuming you'll see closing tags could be a problem here; some HTML doesn't have these in some cases.\n\nIt might be better to just track nested tags of the same type as the current tag being stripped, rather than all tags - the other contained tags should be ignorable, I think.  (This condition - nested same-type tags - should be fairly rare, but will need to be handled, e.g. <ul><li><ul><li></li></ul></li></ul>.)\n\nThe other thing to worry about is the possible lack of closing tags for a tag the contents of which are to be stripped.  I'm not sure how to handle this - maybe look at how other HTML parsers do it?  (I.e., how to limit scope of never-closed tags.) ",
            "date": "2014-07-25T17:39:13+0000"
        },
        {
            "id": "comment-14074648",
            "author": "Steve Rowe",
            "content": "David, the other thing I worry about is: a fully fledged version of this would allow finer-grained specification of tags, along the lines of XPath, but that would be a much much bigger task... I don't think such a goal should hold up what you're thinking about. ",
            "date": "2014-07-25T17:41:49+0000"
        },
        {
            "id": "comment-14074743",
            "author": "David Smiley",
            "content": "David, the other thing I worry about is: a fully fledged version of this would allow finer-grained specification of tags, along the lines of XPath, but that would be a much much bigger task... I don't think such a goal should hold up what you're thinking about.\n\nYeah I thought of that and agree it's not worth worrying about right now.  My initial use of this will strip generated HTML that is already fairly clean, and will strip these tags purely by element name.  I have no need/plans for more complicated matching.\n\nDon't forget that HTMLStripCharFilter must be able to handle (i.e. not throw an error, and maximize useful extracted content) non-well-formed content. Assuming you'll see closing tags could be a problem here; some HTML doesn't have these in some cases.\n\nIf a tag that is to be stripped opens, then I propose the next close tag at the same level (whatever it's name may be)  is where the strip ends:\n\n<body> bodyStart <p> paraStart <foo>   <b>bold</b>   paraEnd </p> bodyEnd</body>\n\nNotice there is no </foo>.  Stripping tag foo would yield only the text tokens bodyStart, paraStart, and bodyEnd.  I think it's not realistic to expect better than that, not to mention that this issue is optional and would come with disclaimers on this matter.\n\nIt might be better to just track nested tags of the same type as the current tag being stripped, rather than all tags\n\nI don't think that adds any value (at least I don't see it yet), and it hurts the bad-html case like the \"foo\" example above.  In that same example, only same-name tags would mean that bodyEnd would not get emitted.  Right? ",
            "date": "2014-07-25T18:34:51+0000"
        },
        {
            "id": "comment-14074752",
            "author": "David Smiley",
            "content": "I think I may get your concern.   If the tag that I was stripping was paragraph <p> instead of foo, then the paragraph stripping would continue on to </body>.    So it may appear that the stripping should end at the sooner of a closing tag depth, or a matching close of the current element name.  A matching close means I need to keep track of two embedded tag depth integers, one for any element name, one for those that have the same name as what I'm stripping.  Yeah? ",
            "date": "2014-07-25T18:40:55+0000"
        },
        {
            "id": "comment-14074764",
            "author": "Steve Rowe",
            "content": "Real HTML is more complicated: e.g. <p> within <p> is not allowed (or rather is parsed as sibling non-closed elements).\n\nSome pertinent discussion here in the javadocs of the Jericho HTML parser: <http://jericho.htmlparser.net/docs/javadoc/net/htmlparser/jericho/Element.html>.\n\nIn particular, the \"Single Tag Element\" and \"Implicitly Terminated Element\" sections, and the link in the latter section in the sentence \"See the element parsing rules for HTML elements with optional end tags for details on which tags can implicitly terminate a given element.\" ",
            "date": "2014-07-25T18:52:02+0000"
        },
        {
            "id": "comment-14074785",
            "author": "David Smiley",
            "content": "Yeah... to do this feature right, it needs to know about these cases.  Then perhaps the stripping part might be easier if it has an accurate depth, as it wouldn't include implicitly closing elements (e.g. IMG).  But in the end this feature is optional so a best effort attempt with rules about known HTML tags is fine.  I agree this means looking for a close of the same element name.  I'll try working on something this weekend, or Monday. ",
            "date": "2014-07-25T19:16:15+0000"
        },
        {
            "id": "comment-14075749",
            "author": "David Smiley",
            "content": "It might be better to just track nested tags of the same type as the current tag being stripped, rather than all tags - the other contained tags should be ignorable, I think. (This condition - nested same-type tags - should be fairly rare, but will need to be handled, e.g. <ul><li><ul><li></li></ul></li></ul>.)\n\nAs I think about this, I like your earlier idea here, quoted above.  I'll do it this way.\n\nThe other thing to worry about is the possible lack of closing tags for a tag the contents of which are to be stripped. I'm not sure how to handle this - maybe look at how other HTML parsers do it? (I.e., how to limit scope of never-closed tags.)\n\nI think this feature makes no sense for tags that don't (necessarily) have closing tags (e.g. <p>).  The feature could at least have a statement that tags for this feature need to close themselves. ",
            "date": "2014-07-27T20:31:51+0000"
        },
        {
            "id": "comment-14077023",
            "author": "David Smiley",
            "content": "I think this is even more of a bigger change to how this filter works now.  All the parse states that output the current text would have to be modified to not do so if there is a tag being stripped in-process.  I'm going to bail on this and handle my tag stripping requirement in a different way in my application that is less ideal but will take much less time and risk than major rework to HTMLStripCharFilter.   ",
            "date": "2014-07-28T22:24:49+0000"
        }
    ]
}