{
    "id": "SOLR-1422",
    "title": "Add one QParser to Query Chinese Sentences",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "DisMaxQParser do not correctly analysis chinese sentence. So, i implement one QParser derived from DisMax.\nLimis:\n     in schema.xml, set defaultSearchField to chineseFieldType-Field\nResult:\n     if you input C1C2C3C4, then:\n     in DisMaxQParser, we will find that qstr is \"C1C2 C3C4\"\n\n1. SentenceDisMaxQParser Class::\npackage org.apache.solr.search;\n\nimport org.apache.lucene.queryParser.ParseException;\nimport org.apache.lucene.search.BooleanClause;\nimport org.apache.lucene.search.BooleanQuery;\nimport org.apache.lucene.search.Query;\n\nimport org.apache.lucene.analysis.Analyzer;\nimport org.apache.lucene.analysis.TokenStream;\nimport org.apache.lucene.analysis.Token;\nimport java.io.StringReader;\n\nimport org.apache.solr.common.SolrException;\nimport org.apache.solr.common.params.DefaultSolrParams;\nimport org.apache.solr.common.params.DisMaxParams;\nimport org.apache.solr.common.params.SolrParams;\nimport org.apache.solr.common.util.NamedList;\nimport org.apache.solr.request.SolrQueryRequest;\nimport org.apache.solr.util.SolrPluginUtils;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\npublic class SentenceDisMaxQParser extends DisMaxQParser {\n  private static Logger log = LoggerFactory.getLogger(SentenceDisMaxQParser.class);\n  public SentenceDisMaxQParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) {\n    super(qstr, localParams, params, req);\n\n    Analyzer analyzer = req.getSchema().getQueryAnalyzer();\n\tif(null == analyzer)\n\t\treturn;\n\n\tStringBuilder norm = new StringBuilder();\nlog.info(\"before analyzer, qstr=\"+this.qstr);\n\ttry{\n\t\tTokenStream tokens = analyzer.reusableTokenStream( req.getSchema().getDefaultSearchFieldName(), new StringReader( this.qstr ) );\n\t\ttokens.reset();\n\t    Token token = tokens.next();\n\t    while( token != null ) \n{\n\t      norm.append( new String(token.termBuffer(), 0, token.termLength()) ).append(\" \");\n\t      token = tokens.next();\n\t    }\n\t} catch(Exception ex)\n{\nlog.info(\"Ex=\"+ex);\n\t}\n\tif(norm.length() > 0)\n\t\tthis.qstr = norm.toString();\nlog.info(\"after analyzer, qstr=\"+this.qstr);\n  }\n}\n\n2. SentenceDisMaxQParserPlugin Class::\npackage org.apache.solr.search;\n\nimport org.apache.solr.common.params.SolrParams;\nimport org.apache.solr.common.util.NamedList;\nimport org.apache.solr.request.SolrQueryRequest;\n\npublic class SentenceDisMaxQParserPlugin extends QParserPlugin {\n  public static String NAME = \"sdismax\";\n\n  public void init(NamedList args) {\n  }\n\n  public QParser createParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) \n{\n    return new SentenceDisMaxQParser(qstr, localParams, params, req);\n  }\n}",
    "attachments": {},
    "issue_links": {},
    "comments": []
}