{
    "id": "SOLR-12611",
    "title": "Add version information to thread dump",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "7.4",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Thread dumps contain stacktrace info.  Without knowing the Solr version, it can be difficult to compare stacktraces to source code.\n\nIf exact version information is available in the thread dump, it will be possible to look at source code to understand stacktrace information.  If full version information is present, then it would even be possible to learn whether the user is running an official binary build or if they have built Solr themselves.",
    "attachments": {
        "SOLR-12611.patch": "https://issues.apache.org/jira/secure/attachment/12933966/SOLR-12611.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-01T19:56:31+0000",
            "content": "Attached patch against branch_7x that creates a thread on startup.  The thread is given a name that includes full version information.  The thread is set up to wait on synchronization, which I figure is probably the most efficient way for a thread to do absolutely nothing.  If there's a better option, let me know.  At Solr shutdown, the thread is sent an interrupt, which breaks it out of its synchronization wait and allows the thread to end. ",
            "author": "Shawn Heisey",
            "id": "comment-16565890"
        },
        {
            "date": "2018-08-01T19:58:25+0000",
            "content": "That wait() isn't right \u2013 the contract for wait() allows spurious wakeups, so it should be \n\nwhile (true) { obj.wait(); }\n\n\nwith an interrupted exception handler either inside breaking out of the loop or outside, falling-through. ",
            "author": "Dawid Weiss",
            "id": "comment-16565893"
        },
        {
            "date": "2018-08-01T20:30:41+0000",
            "content": "Thanks for looking, Dawid Weiss!\n\nI'm not well-versed in how to properly handle this kind of code.  I think your change would be easy, but if you could detail it, that would be appreciated.\n\nI did have a different idea that I considered, which might be even more bulletproof, but it's probably less efficient.  It would involve an AtomicBoolean object and this code in the thread:\n\n\n      while (versionThreadRun.get()) {\n        try {\n          Thread.sleep(100);\n        } catch (InterruptedException e) {\n        }\n      }\n\n\n\nI figure there are two criteria to satisfy with the \"do nothing\" implementation, and I'm not sure what the best options are: 1) Code must be bulletproof. 2) Code must use as little CPU and memory as possible. ",
            "author": "Shawn Heisey",
            "id": "comment-16565935"
        },
        {
            "date": "2018-08-01T21:00:16+0000",
            "content": "Maybe I should combine the two approaches.  A boolean to control exit, and the wait() call.  Deal with any possible spurious problems \u2013 interrupts or wakeups.  Also avoid any inefficiencies from lots of short sleeps.\n\nTesting this now, will put up a new patch if I see signs of success. ",
            "author": "Shawn Heisey",
            "id": "comment-16565979"
        },
        {
            "date": "2018-08-02T07:48:24+0000",
            "content": "If it's just going to stay dormant, then I'd say object wait is a fine solution. Or a Thread.sleep() with a large constant (why 100 millis if it can be 24 hours...). I'd also make this thread a daemon thread so that the JVM can terminate without even looking at it (and the test framework doesn't consider it a live thread escaping the test?).\n\nAlso, I was just pointing out the fact, I'm not saying this is the right solution to the problem. I understand your rationale, but if somebody can dump a stack trace of all threads they can as well inspect the classpath (even that of a running process) and get Solr's version from there? On the other hand, if it helps with diagnostics, a dormant thread doesn't seem to hurt anybody much. ",
            "author": "Dawid Weiss",
            "id": "comment-16566467"
        },
        {
            "date": "2018-08-02T14:54:33+0000",
            "content": "The reason that the sleep was so short in my alternate code was because I wanted to make sure that the loop can exit quickly when the run flag goes false.\n\nMy overall knowledge did not include information like daemon threads.  After looking that up, it sounds like a great idea, and simplifies the code.  Thanks for the info!\n\nMy motivation here is from the perspective of helping people with Solr problems.  I've seen situations where users do think of sending a stacktrace, but do not mention which version of Solr they're running.  Asking for missing information can mean a long delay in figuring out the problem. ",
            "author": "Shawn Heisey",
            "id": "comment-16566916"
        },
        {
            "date": "2018-08-02T15:28:07+0000",
            "content": "I wanted to make sure that the loop can exit quickly when the run flag goes false.\n\nIt should be flag + long sleep + interrupt to recheck the condition. ",
            "author": "Dawid Weiss",
            "id": "comment-16566953"
        },
        {
            "date": "2018-08-02T16:43:20+0000",
            "content": "New patch that does the wait() in a truly endless loop.  Before starting the thread, daemon is enabled.  Testing (on Windows 7) indicates that the JVM stops immediately, doesn't need to be hard-killed.  CHANGES.txt addition also present. ",
            "author": "Shawn Heisey",
            "id": "comment-16567048"
        }
    ]
}