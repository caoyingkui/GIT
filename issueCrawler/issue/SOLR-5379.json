{
    "id": "SOLR-5379",
    "title": "Query-time multi-word synonym expansion",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "While dealing with synonym at query time, solr failed to work with multi-word synonyms due to some reasons:\n\n\tFirst the lucene queryparser tokenizes user query by space so it split multi-word term into two terms before feeding to synonym filter, so synonym filter can't recognized multi-word term to do expansion\n\tSecond, if synonym filter expand into multiple terms which contains multi-word synonym, The SolrQueryParseBase currently use MultiPhraseQuery to handle synonyms. But MultiPhraseQuery don't work with term have different number of words.\n\n\n\nFor the first one, we can extend quoted all multi-word synonym in user query so that lucene queryparser don't split it. There are a jira task related to this one https://issues.apache.org/jira/browse/LUCENE-2605.\n\nFor the second, we can replace MultiPhraseQuery by an appropriate BoleanQuery SHOULD which contains multiple PhraseQuery in case tokens stream have multi-word synonym.",
    "attachments": {
        "synonym-expander.patch": "https://issues.apache.org/jira/secure/attachment/12610297/synonym-expander.patch",
        "quoted-4_8_1.patch": "https://issues.apache.org/jira/secure/attachment/12649590/quoted-4_8_1.patch",
        "synonym-expander-4_8_1.patch": "https://issues.apache.org/jira/secure/attachment/12648687/synonym-expander-4_8_1.patch",
        "quoted.patch": "https://issues.apache.org/jira/secure/attachment/12609869/quoted.patch",
        "solr-5379-version-4.10.3.patch": "https://issues.apache.org/jira/secure/attachment/12697804/solr-5379-version-4.10.3.patch",
        "conf-test-files-4_8_1.patch": "https://issues.apache.org/jira/secure/attachment/12649589/conf-test-files-4_8_1.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tien Nguyen Manh",
            "id": "comment-13802964",
            "date": "2013-10-23T15:46:22+0000",
            "content": "Here are two patchs for above two issue\n1. quoted.patch is an extended EDismaxQParser with new option to quoted multi-word synonym in user query\n2. synonym-expander.patch is a patch to create new Query structure when user query have multi-word synonym "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13803086",
            "date": "2013-10-23T18:09:20+0000",
            "content": "Tien Nguyen Manh How does this differ from SOLR-4381?  Which cases does SOLR-4381 not handle that this patch handles? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13803199",
            "date": "2013-10-23T19:26:51+0000",
            "content": "My understanding of how this synonym expander (the synonym-expander.patch) works is:\n\nAssume synonyms are:\n\nSeabiscuit, Sea biscit, Biscit\n\n\n\nFor query \"Seabiscuit article\", the regular edismax will construct a MultiPhraseQuery like (\"Seebiscuit|Sea|biscit\", biscit, article\").\n\nInstead of that, this patch rewrites the query differently:\nPhraseQuery(Seabiscit article) OR PhraseQuery(Sea biscit article) OR PhraseQuery(biscit article) "
        },
        {
            "author": "Tien Nguyen Manh",
            "id": "comment-13803652",
            "date": "2013-10-24T01:44:41+0000",
            "content": "Otis Gospodnetic The difference are\n SOLR-4381 is an extension of EDismax so it only work for that query parser, my patch is a patch to SolrQueryParserBase it work for any query parser\n SOLR-4381 rewrite query into lattice (all synonym combination) so it need to parse N modified query, my patch is applied when we read tokenstream to build Lucene Query, so it still parse query 1 time and\nwe can still optimize my work to make the result Lucene Query compacted by combine both MultiPhraseQuery and PhraseQuery, so the Lucene Query of my patch is smaller than SOLR-4381 "
        },
        {
            "author": "Tien Nguyen Manh",
            "id": "comment-13803656",
            "date": "2013-10-24T01:47:29+0000",
            "content": "That corrected Otis Gospodnetic "
        },
        {
            "author": "Marco Wong",
            "id": "comment-13805179",
            "date": "2013-10-25T08:54:47+0000",
            "content": "Excuse me, for the synonym-expander.patch, when I have a ShingleFilter in query time analyzer which emits bigram TermQuery like Term(a b), does the updated SolrQueryParserBase will emitting PhraseQuery(Term(a), Term(b)), making my existing tokenization logic fail? "
        },
        {
            "author": "Tien Nguyen Manh",
            "id": "comment-13805188",
            "date": "2013-10-25T09:15:03+0000",
            "content": "Yes, it will emit PhraseQuery(Term(a), Term(b)).\nWe must additional check to only tokenize term when it is synonym.\nI will change the patch. "
        },
        {
            "author": "Tien Nguyen Manh",
            "id": "comment-13805203",
            "date": "2013-10-25T09:57:07+0000",
            "content": "Patch check synonym term "
        },
        {
            "author": "Bill Steele",
            "id": "comment-13814281",
            "date": "2013-11-05T21:43:09+0000",
            "content": "We found this to be much more useful code for multiword synonyms.  We ran some tests, and when having a synonym set such as:\n\nseabiscuit, sea biscuit, sea biscit\n\nSearch on the following:\n\nseabiscuit article\n\nReturned matches with the following terms\n\nSea biscit article\nSea biscuit article\nSeabiscuit article\nBiscuit Sea article\nSea article\nBiscit article\n\nWith this patch, the above search query just returned the terms:\n\nSea biscit article\nSea biscuit article\nSeabiscuit article\n "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13814848",
            "date": "2013-11-06T12:35:55+0000",
            "content": "Bill - did you also test the other multiword-synonym patches? "
        },
        {
            "author": "Bill Steele",
            "id": "comment-13816243",
            "date": "2013-11-07T18:52:06+0000",
            "content": "Hi Markus,\n\nWhich other multi-word synonym patches are you referring to?  We tested the Solr functionality built into Solr 4.2.1 which didn't support multiple word synonyms, and as far as I know that issue still exists in the latest.  This patch fixes that issue for us.  Not aware of other alternatives available. "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13817133",
            "date": "2013-11-08T09:18:33+0000",
            "content": "Oh i interpreted your comment as if you have tested it against the other patches linked to this one. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13817174",
            "date": "2013-11-08T10:56:37+0000",
            "content": "Bill Steele - maybe you had your colleagues test other patches, like SOLR-4381? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13862536",
            "date": "2014-01-05T11:37:12+0000",
            "content": "So what is the next step with this one? Anyone who have tested it and have comments? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13863481",
            "date": "2014-01-06T21:58:38+0000",
            "content": "Our customers have been using this in production for about half a year now without issues. "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13864147",
            "date": "2014-01-07T12:11:01+0000",
            "content": "How does this patch handle boosts?  Are the synonym and the original keywords boosted equally? "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-13864149",
            "date": "2014-01-07T12:12:00+0000",
            "content": "Assume synonyms are \n\n  usa, united states of america \n\n What happens if I fire the following sloppy phrase query  \"president usa\"~5 "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13864402",
            "date": "2014-01-07T17:07:28+0000",
            "content": "Markus Jelsma: They're boosted equally.  It was the subject of a bug.\n\nAhmet Arslan: I just tested it out now.  I got:\n\n\n(+(DisjunctionMaxQuery((text:\"president usa\"~5)) (((+DisjunctionMaxQuery((text:\"president united states of america\"~5)))/no_coord))))/no_coord // parsedQuery\n+((text:\"president usa\"~5) ((+(text:\"president united states of america\"~5)))) // parsedQuery.toString()\n\n "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13865335",
            "date": "2014-01-08T11:34:45+0000",
            "content": "Nolan, Jan, both of you have extensive knowledge about the one you worked on hosted on github. How do you compare features? I've checked your issue list and there are no new issues coming in and a lot have been resolved already, looks like that one is much more mature and flexible/configurable.  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13866095",
            "date": "2014-01-09T00:14:05+0000",
            "content": "What I like about Nolan's solution is that you control synonyms outside of analysis - for all fields,although there are pros and cons with this. Also that you can deboost the synonyms and easily turn them on/off as you like.\n\nWhat I like about Tien's patch is that it solves exactly the problem at hand without introducing need for completely new configurations or concepts, and that it can work with other Qparsers as well. In that respect it is perhaps better suited for early inclusion in Solr, then we can look at bringing in be best from 4381 later? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13866221",
            "date": "2014-01-09T02:29:24+0000",
            "content": "Jan: +1 "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13866729",
            "date": "2014-01-09T15:51:41+0000",
            "content": "Yes +1 "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13867202",
            "date": "2014-01-09T22:40:17+0000",
            "content": "+1 as well. Tien's patch also seems to be a better candidate seeing as they included Java tests, whereas my tests are in Python 'cuz I was lazy.   "
        },
        {
            "author": "Eric Bus",
            "id": "comment-13892010",
            "date": "2014-02-05T11:30:49+0000",
            "content": "Has anyone modified this patch to work on 4.6.1? I tried to do a manual merge for the second patch. But a lot has changed in the SolrQueryParserBase.java file. "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13892203",
            "date": "2014-02-05T15:03:31+0000",
            "content": "Nolan Lawson is the outcome you describe desired behaviour? I don't really believe it is. For synonyms [a b,x y] and q=\"a b\" you get PhraseQuery(content:\"x y a b\"). While phrase \"a b\" and \"x y\" would ordinarily match some documents, \"x y a b\" will never match. Or is this supposed to expand syns at index time too? "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13893368",
            "date": "2014-02-06T14:16:10+0000",
            "content": "Ok, it seems i had some bad jars laying around messsing things up if a specific token filter was in use. Anyway, this patch works fine from single word to multi word but not the other way around. \n\nI have a 4.5.0 check out here with just this patch. Using the example schema and data and the usual [seabiscuit,sea biscit,biscit] syns:\nhttp://localhost:8983/solr/select?defType=edismax&qf=name&rows=0&debugQuery=true&q=\n\n\nq=biscit => (+DisjunctionMaxQuery(((name:seabiscuit name:\"sea biscit\" name:biscit))))/no_coord\nq=seabiscuit => (+DisjunctionMaxQuery(((name:seabiscuit name:\"sea biscit\" name:biscit))))/no_coord\nq=sea biscit => (+(DisjunctionMaxQuery((name:sea)) DisjunctionMaxQuery(((name:seabiscuit name:\"sea biscit\" name:biscit)))))/no_coord\n\n\n\nThis is all very nice but, if we change the syns from [seabiscuit,sea biscit,biscit] to [seabiscuit,sea biscit] it no longer works for\n\nq=sea biscit => (+(DisjunctionMaxQuery((name:sea)) DisjunctionMaxQuery((name:biscit))))/no_coord\n\n\n\nTien Nguyen Manh So i assume this is clearly not the desired behaviour right? \n "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-13893393",
            "date": "2014-02-06T14:45:15+0000",
            "content": "By the way: using the SynonymQuotedDismaxQParser doesn't change anything. "
        },
        {
            "author": "Tien Nguyen Manh",
            "id": "comment-13894248",
            "date": "2014-02-07T07:01:03+0000",
            "content": "Markus Jelsma It is not the desired behavious!.\n\nyour result above in first example with sync [seabiscuit,sea biscit,biscit]\nq=sea biscit => (+(DisjunctionMaxQuery((name:sea)) DisjunctionMaxQuery(((name:seabiscuit name:\"sea biscit\" name:biscit)))))/no_coord\n\nseem the default behaviour (without the SynonymQuotedDismaxQParser).\nAfter using SynonymQuotedDismaxQParser, it should be the same result for all three queries q=biscit, q=seabiscuit, q=sea biscit "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971083",
            "date": "2014-04-16T12:57:06+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Jeremy Anderson",
            "id": "comment-14020221",
            "date": "2014-06-06T18:52:27+0000",
            "content": "I'm in the process of trying to get this logic ported into the 4.8.1 Released Tag.  I believe I've gotten the code ported over, but am having problems getting the unit test to run to confirm the correctness of the port.  The main reason is the differences in the conf/solrconfig.xml and conf/schema.xml files that exist in the root and I'm guessing those used by Tien when the 4.5.0 patch was created.  \n\nI'm still a SOLR novice so I'm not quite sure how to properly replicate the schema and configuration settings to get the unit test to run.  I'm going to attach patch files shortly for the 4.8.1 code base along with the current stubbed out configuration files.\n\nAny help anyone can provide would be greatly appreciated.  My end goal is to hopefully be able to get the multi-term synonym expansion logic to work with a 4.8.1 deployment where we're using an extended version of the SolrQueryParser.  (I'm not sure if the multi-term synonym logic is only usable with this patch by the new SynonymQuotedDismaxQParser or existing DismaxQarsers).\n\nNotes on 4.8.1 port:\n\n\tThere is now 2 parsers usable by the FSTSynonymFilterFactory: SolrSynonymParser & WordnetSynonymParser.  The latter of which I'm not sure if any additional logic needs to be implemented for proper usage of the tokenize parameter.\n\tAll of the logic implemented in SolrQueryParserBase from 4.5.0 has now been moved into the utility QueryBuilder class.\n\n "
        },
        {
            "author": "Jeremy Anderson",
            "id": "comment-14020225",
            "date": "2014-06-06T18:54:18+0000",
            "content": "Initial files for 4.8.1 port.  Unit test does not run, therefore the validity of the port is unknown. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14191678",
            "date": "2014-10-31T10:51:03+0000",
            "content": "Interest in picking this up again? Jeremy Anderson, I have not looked at your patches yet, but am interested in facilitating / reviewing "
        },
        {
            "author": "Jeremy Anderson",
            "id": "comment-14191824",
            "date": "2014-10-31T14:09:22+0000",
            "content": "Unfortunately, I'm swamped with other stuff on my plate.  Thinking back, I think I abandoned this approach and instead took Nolan Lawson's route (see SOLR-4381).  I don't recall how mature and stable I had gotten my patches before switching paths. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-14301433",
            "date": "2015-02-02T16:32:22+0000",
            "content": "Is there any interest in committing this to 4.x or 5.x?  We have a client at Sematext who needs query-time synonym support for their Solr 4.x setup.  So we can make sure this patch works for 4.x.  If any of the Solr developers wants to commit this to 5.x, please leave a comment here. "
        },
        {
            "author": "Markus Jelsma",
            "id": "comment-14303081",
            "date": "2015-02-03T11:05:26+0000",
            "content": "I am sure there is, but there are no working patches for 4.10 or 5.x thus far. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-14304161",
            "date": "2015-02-03T22:35:04+0000",
            "content": "I am sure there is, but there are no working patches for 4.10 or 5.x thus far.\n\nRight.  What I was trying to ask is whether any of the active Solr committers wants to commit this.  If there is no will to commit, I'd rather keep things simple on our end ignore this issue.  But there is a will to commit, I'd love to see this in Solr, as would 30+ other watchers, I imagine. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14304336",
            "date": "2015-02-03T23:50:43+0000",
            "content": "+1 to get some of this in. I have the desire but not the cycles right now. Perhaps your happy customer could help drive this?\n\nJust looked briefly at the patches.. disclaimer: I did not apply and test this yet\n\n\tI would expect a ton of new unit tests for synonym-expander.patch but cannot find?\n\tWhy create another subclass of ExtendedDismax for this? If going into core, fold the features into edismax? The patch will be smaller too.\n\tI cannot see a test for configuring custom synonymAnalyzers. Also, it should refer to schema fieldTypes instead of adding to qparser config - in the same way e.g. Suggesters do\n\n\n\nProbably the work could be split up - first add more test coverage to the synonym-expander part and commit it. Then fold the quoting-stuff into standard edismax and commit (this part is less risky since it is back-compat if you don't use the new params).\n\nIs Tien Nguyen Manh still around? Other users ot the patch who are willing to step in and improve it? "
        },
        {
            "author": "Rafa\u0142 Ku\u0107",
            "id": "comment-14312536",
            "date": "2015-02-09T18:00:41+0000",
            "content": "I have the code updated to Solr 4.10.3 and I'm running tests now. I see a few issues with the code right now (i.e. some static, magic string objects, because some classes were moved outside of Lucene core). I'll attach the updated patch tomorrow, but I'm not sure if there will be another release from 4.x branch. So I guess the easiest way would be to get the code polished for 5.x branch and try committing there. What do you think? "
        },
        {
            "author": "Rafa\u0142 Ku\u0107",
            "id": "comment-14314376",
            "date": "2015-02-10T16:00:38+0000",
            "content": "As promised I'm attaching an updated patch for Solr 4.10.3. I've updated the code, updated unit tests, included modified configuration files, etc. I'll start working on trunk version of the patch now starting with synonym expander and its unit tests.  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14318052",
            "date": "2015-02-12T12:01:30+0000",
            "content": "Rafa\u0142 Ku\u0107 Do you agree to fold this into edismax? I hate to fragment into another parser, which over time will diverge in features. "
        },
        {
            "author": "Rafa\u0142 Ku\u0107",
            "id": "comment-14318083",
            "date": "2015-02-12T12:06:27+0000",
            "content": "Sure, for now I don't see a reason why we shouldn't get that into edismax  "
        },
        {
            "author": "Timothy Garafola",
            "id": "comment-14635899",
            "date": "2015-07-21T22:02:16+0000",
            "content": "Is there a status on this issue?  Did it get moved forward to 5.x?  Is it available in 4.10? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-14726326",
            "date": "2015-09-01T22:28:24+0000",
            "content": "There is a patch for 4.10.3, but it was not committed, so this is still not available in Solr AFAIK.  Would be great to get this into 5.x. "
        },
        {
            "author": "Mary Jo Sminkey",
            "id": "comment-15152649",
            "date": "2016-02-18T17:22:35+0000",
            "content": "This still isn't available in Solr 5?? What can we do to get this made official??  "
        },
        {
            "author": "Mary Jo Sminkey",
            "id": "comment-15152678",
            "date": "2016-02-18T17:28:24+0000",
            "content": "Also sounds like the code to incorporate it into edismax was never done?   "
        },
        {
            "author": "Daniel Aitken",
            "id": "comment-15163757",
            "date": "2016-02-24T20:32:31+0000",
            "content": "Doesn't look like it from the patch, no; it's still using the extended synonym quoted query parser.\n\nWe have a client who requires matching on multi-word synonyms, so I've I've compiled Solr 4.10.3 with solr-5379-version-4.10.3.patch applied and have it up and running; just testing it now, with a kind of merged config between the unit test files provided in the patch and my regular Solr 4.x configuration.\n\nBehaviour on quoted multi-word synonyms appears to work as expected across the testing I performed; this works well and would be fantastic to have available. I'm not too too concerned about drifting from edismax; unless I'm misunderstanding, wouldn't this solution maintain features from edismax by virtue of it being extended from it? It would be nice, however, not to maintain a custom query parser.\n\nSo, all in all, works well for us, but I am concerned about having to essentially maintain a fork of 4.10.3 just to support this one use case. Is there a possibility of this making it into a release? Is there anything else that needs to be done with it? "
        },
        {
            "author": "Atul Jangra",
            "id": "comment-15181984",
            "date": "2016-03-06T03:54:47+0000",
            "content": "Any update on how soon this work will be included in Solr. This is very common occurrence for anyone working on search. \nI'm using Solr 5.5.0 and this is still a big problem. I even tried some external parser, but nothing seem to work.  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15507778",
            "date": "2016-09-20T20:58:22+0000",
            "content": "Daniel Aitken and Atul Jangra and Mary Jo Sminkey, I'm sorry there were on replies to your questions about updating the patch. What it probably means is that noone has had the capacity or need to spend time on this. It will probably take some effort to lift the patch from 4.x to 6.x, and then get it ready for committing either as part of edismax or as a subclass.\n\nWhat can we do to get this made official??\nIf you can contribute development work yourself (or your company) that would be the best. Else hire someone who can help you and/or just keep nagging here until it is done  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15975337",
            "date": "2017-04-19T19:14:53+0000",
            "content": "Closing as duplicate since SOLR-9185 (sow) and SOLR-10343 (Graph) now provides the official solution to this issue. See https://lucidworks.com/2017/04/18/multi-word-synonyms-solr-adds-query-time-support/ "
        }
    ]
}