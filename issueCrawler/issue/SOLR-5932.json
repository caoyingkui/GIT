{
    "id": "SOLR-5932",
    "title": "DIH: retry query on \"terminating connection due to conflict with recovery\"",
    "details": {
        "affect_versions": "4.7",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When running DIH against a hot-standby PostgreSQL database, one may randomly see queries fail with this error:\n\n\norg.apache.solr.handler.dataimport.DataImportHandlerException: org.postgresql.util.PSQLException: FATAL: terminating connection due to conflict with recovery\n  Detail: User query might have needed to see row versions that must be removed.\n  Hint: In a moment you should be able to reconnect to the database and repeat your command.\n\n\n\nA reasonable course of action in this case is to catch the error and retry. This would support the use case of doing an initial (possibly lengthy) clean full-import against a hot-standby server, and then just running incremental dataimports against the master.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13951809",
            "date": "2014-03-29T08:36:56+0000",
            "content": "What you say makes sense but I don't see a way to do this without specializing the exception handling for PostgreSQL. I'm not sure if we want to do that. Do you have a suggestion?\n\nAlternately, I think you can try tuning the batchSize for your JdbcDataSource. The default is 500 rows per entity which may be too high for you? "
        },
        {
            "author": "Gunnlaugur Thor Briem",
            "id": "comment-13965278",
            "date": "2014-04-10T12:02:06+0000",
            "content": "One way to do this generically: define a set of exception predicates, e.g. retry_on_errors or something like that, which could be set or augmented in configuration. Each might be as simple as a regular expression to be matched against the exception message. When an exception is caught, the predicates are iterated and each applied to the exception. If a predicate evaluates as true (there's a match), then the exception is identified as one for which a retry is appropriate, and the import operation continues (unless the error repeats; maybe N retries with an exponential backoff, in case of a DB restart or momentary network hiccup or such).\n\nThat's reasonably general, i.e. not specific to any one DB engine, and can be extended by users by adding a regexp in an appropriate spot in db-data-config.xml "
        }
    ]
}