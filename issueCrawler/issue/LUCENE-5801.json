{
    "id": "LUCENE-5801",
    "title": "Resurrect org.apache.lucene.facet.util.OrdinalMappingAtomicReader",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "4.7",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "from lucene > 4.6.1 the class:\norg.apache.lucene.facet.util.OrdinalMappingAtomicReader\n\nwas removed; resurrect it because used merging indexes related to merged taxonomies.",
    "attachments": {
        "LUCENE-5801_1.patch": "https://issues.apache.org/jira/secure/attachment/12653589/LUCENE-5801_1.patch",
        "LUCENE-5801_2.patch": "https://issues.apache.org/jira/secure/attachment/12653783/LUCENE-5801_2.patch",
        "LUCENE-5801.patch": "https://issues.apache.org/jira/secure/attachment/12653409/LUCENE-5801.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14048831",
            "author": "Shai Erera",
            "content": "Thanks for opening this, we definitely need to bring this class back. While you're at it, notice that there is a matching test as well as TaxonomyMergeUtils which did some work for the user ... we should consider returning them as well, but this time under o.a.l.facet.taxonomy.utils, as they are specific to the taxonomy index.\n\nI think one change we should make is somehow expose FacetsConfig.dedupAndEncode as a static method, so you can encode the new ordinals and then:\n\n\n\tTake an OrdinalsReader in the ctor (optional, 2nd ctor) in case the app used custom encoding (default to DocValuesOrdinalsReader).\n\tHave a protected method dedupAndEncode, like FacetsConfig, default to FacetsConfig.dedupAndEncode and allow the app to override with its own custom encoding.\n\n ",
            "date": "2014-07-01T12:56:30+0000"
        },
        {
            "id": "comment-14048839",
            "author": "Nicola Buso",
            "content": "Thanks Shai, I will follow you indications and later I will reintroduce also TaxonomyMergeUtils. ",
            "date": "2014-07-01T13:01:47+0000"
        },
        {
            "id": "comment-14048974",
            "author": "Nicola Buso",
            "content": "Simple patch to test it working ",
            "date": "2014-07-01T15:37:51+0000"
        },
        {
            "id": "comment-14049019",
            "author": "Nicola Buso",
            "content": "Shai,\n\nif I accept an OrdinalsReader in ctor I would need later in:\nOrdinalMappingAtomicReader.getBinaryDocValues(String field)\n\nto modify it to respect the parameter 'field' and currently DocValuesOrdinalsReader.field is private final.\nLet me know. ",
            "date": "2014-07-01T16:21:48+0000"
        },
        {
            "id": "comment-14049921",
            "author": "Nicola Buso",
            "content": "public static FacetsConfig.dedupAndEncode(...)\nadded methods to ovveride in case of different encoding ",
            "date": "2014-07-02T13:48:45+0000"
        },
        {
            "id": "comment-14049928",
            "author": "Shai Erera",
            "content": "I will review the patch later, but a static method cannot be overridable by sub-classes, so we still need the protected method, with the default impl delegating to a static utility method... ",
            "date": "2014-07-02T13:53:48+0000"
        },
        {
            "id": "comment-14049948",
            "author": "Nicola Buso",
            "content": "You are right Shai, I think while there is an abstraction for the decode part of the values, it's missing the encode abstraction. ",
            "date": "2014-07-02T14:25:43+0000"
        },
        {
            "id": "comment-14049952",
            "author": "Shai Erera",
            "content": "FacetsConfig.dedupAndEncode is the encode abstraction. The decode abstraction is in the OrdinalsReader. Previously these were encapsulated in an Encoder/Decoder interfaces, but since this added another API (sometimes confusing) and custom encoding of category ordinals is extremely expert, I think the current abstractions are fine. ",
            "date": "2014-07-02T14:29:06+0000"
        },
        {
            "id": "comment-14050278",
            "author": "Nicola Buso",
            "content": "Than would you prefer to have a o.a.l.f.t.utils.DefaultEncoding with a static method called both by FacetsConfig.dedup.. and OrdinalMappingAtomicReader? ",
            "date": "2014-07-02T16:27:07+0000"
        },
        {
            "id": "comment-14050529",
            "author": "Shai Erera",
            "content": "Hmm, I thought about it, maybe we don't need the static method at all. OrdinalMappingAtomicReader.dedupAndEncode() will use a FacetsConfig private extension which exposes its dedupAndEncode()? Yes, this isn't what FacetsConfig is for, but I think it's better than exposing a public static method.. would you mind giving it a try? ",
            "date": "2014-07-02T18:29:18+0000"
        },
        {
            "id": "comment-14051195",
            "author": "Nicola Buso",
            "content": "Sure Shai, this is the patch\n\nLUCENE-5801_2.patch: reverted FacetsConfig, added FacetsConfig inner extension in OrdinalMappingAtomicReader ",
            "date": "2014-07-03T08:43:04+0000"
        },
        {
            "id": "comment-14051309",
            "author": "Shai Erera",
            "content": "Thanks Nicola. I updated the patch with a CHANGES entry. Also, I fixed the DocValues class to not call ordsReader.getReader() for every document. I will run tests and commit shortly. ",
            "date": "2014-07-03T10:43:02+0000"
        },
        {
            "id": "comment-14051310",
            "author": "ASF subversion and git services",
            "content": "Commit 1607582 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1607582 ]\n\nLUCENE-5801: add back OrdinalMappingAtomicReader ",
            "date": "2014-07-03T10:49:40+0000"
        },
        {
            "id": "comment-14051316",
            "author": "ASF subversion and git services",
            "content": "Commit 1607585 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1607585 ]\n\nLUCENE-5801: move test under correct package ",
            "date": "2014-07-03T10:58:28+0000"
        },
        {
            "id": "comment-14051317",
            "author": "ASF subversion and git services",
            "content": "Commit 1607586 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1607586 ]\n\nLUCENE-5801: add back OrdinalMappingAtomicReader ",
            "date": "2014-07-03T11:00:29+0000"
        },
        {
            "id": "comment-14051319",
            "author": "Shai Erera",
            "content": "I moved the classes under the .taxonomy package, as it seemed silly to have a dedicated package for two classes. Committed to trunk and 4x.\n\nThanks Nicola! ",
            "date": "2014-07-03T11:01:33+0000"
        },
        {
            "id": "comment-14052133",
            "author": "ASF subversion and git services",
            "content": "Commit 1607781 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1607781 ]\n\nLUCENE-5801: rename test vars, class and add missing ctor ",
            "date": "2014-07-04T03:34:21+0000"
        },
        {
            "id": "comment-14052134",
            "author": "ASF subversion and git services",
            "content": "Commit 1607782 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1607782 ]\n\nLUCENE-5801: rename test vars, class and add missing ctor ",
            "date": "2014-07-04T03:35:47+0000"
        },
        {
            "id": "comment-14066434",
            "author": "Littlestar",
            "content": "there is may be a java.lang.ArrayIndexOutOfBoundsException in this code.\n4.6.1 works well, but 4.9.0 works fail.\nwhy there only encode, no decode??\n\njava.lang.ArrayIndexOutOfBoundsException: 118\n\tat com.test.OrdinalMappingAtomicReader$OrdinalMappingBinaryDocValues.get(OrdinalMappingAtomicReader.java:100)\n\tat org.apache.lucene.codecs.DocValuesConsumer$2$1.setNext(DocValuesConsumer.java:263)\n\tat org.apache.lucene.codecs.DocValuesConsumer$2$1.hasNext(DocValuesConsumer.java:224)\n\tat org.apache.lucene.codecs.lucene49.Lucene49DocValuesConsumer.addBinaryField(Lucene49DocValuesConsumer.java:256)\n\tat org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addBinaryField(PerFieldDocValuesFormat.java:112)\n\tat org.apache.lucene.codecs.DocValuesConsumer.mergeBinaryField(DocValuesConsumer.java:207)\n\tat org.apache.lucene.index.SegmentMerger.mergeDocValues(SegmentMerger.java:193)\n\tat org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:122)\n\tat org.apache.lucene.index.IndexWriter.addIndexes(IndexWriter.java:2695)\n\n\n @SuppressWarnings(\"synthetic-access\")\n    @Override\n    public BytesRef get(int docID) {\n      try {\n        // NOTE: this isn't quite koscher, because in general\n        // multiple threads can call BinaryDV.get which would\n        // then conflict on the single ordinals instance, but\n        // because this impl is only used for merging, we know\n        // only 1 thread calls us:\n        ordsReader.get(docID, ordinals);\n\n        // map the ordinals\n        for (int i = 0; i < ordinals.length; i++) \n{\n          ordinals.ints[i] = ordinalMap[ordinals.ints[i]];    //here is a ArrayIndexOutOfBoundsException\n        }\n\n        return encode(ordinals);\n      } catch (IOException e) \n{\n        throw new RuntimeException(\"error reading category ordinals for doc \" + docID, e);\n      }\n catch (Throwable e) \n{\n          throw new RuntimeException(\"error reading category ordinals for doc \" + docID, e);   // these line only for breakpoint\n      }\n    }\n  }\n\n\n\n====\nordinals\nints\t(id=257)\t\nlength\t135\t\noffset\t0\t\n[76 db 14d 18a 1bb 1de 241 2a7 315 352 387 3bf 3ee 424 458 48b 4be 4ed 523 558 5b9 5ea 61f 650 681 6e7 714 74b 780 7e1 842 86f 8a3 906 96b 99d 9ca a03 a39 a71 ad5 b02 b63 bc7 c29 c5d c8d cbe d1f d57 dba df2 e29 e61 e84 eed f53 fc1 ffe 1060 1095 10fa 115b 118f 11c7 11fd 122e 125b 1292 12f8 135b 138d 13ba 13ee 1451 1484 14b4 14e1 1543 1579 15db 163f 166c 16a5 170b 1744 1779 17de 1812 1847 187e 18b1 18e8 191d 1950 1973 19e2 1a48 1aae 1aeb 1b1b 1b3e 1baa 1c0f 1c7d 1cba 1ceb 1d1e 1d52 1d86 1db8 1ddb 1e3e 1eb0 1f13 1f50 1f81 1fb1 1fe9 2020 2059 208e 20c4 20f7 2128 215f 2182 21f5 225b 22d3 2310 233e 23a8 2418 247f]\n\nbut \"ordinalMap.length\" only 10 ",
            "date": "2014-07-18T15:19:44+0000"
        },
        {
            "id": "comment-14066443",
            "author": "Nicola Buso",
            "content": "Which type of facets are you using?\n\nI'm testing it with FacetField work ok.\nI did few tests with IntAssociationFacetField and I saw your error, seam that IntAssociationFacetField add more ordinals than the \"normal\" FacetField, but I need to investigate on it.\n\nIf you provide more information I can try to give a look. ",
            "date": "2014-07-18T15:31:58+0000"
        },
        {
            "id": "comment-14066483",
            "author": "Nicola Buso",
            "content": "sorry I did not reply to your question; the decode is mainly a consiquence of:\n\n  /**\n\n\tExpert: override in case you used custom encoding for the categories under\n\tthis field.\n   */\n  protected OrdinalsReader getOrdinalsReader(String field) \n{\n    return new DocValuesOrdinalsReader(field);\n  }\n\n ",
            "date": "2014-07-18T16:18:24+0000"
        },
        {
            "id": "comment-14067556",
            "author": "Littlestar",
            "content": "4.6.1 works well, but 4.9.0 works fail.\n\nIn 4.6.1, I use CategoryPath.\nIn 4.9.0, I use FacetField.\n\n4.9.0 missing OrdinalMappingAtomicReader, I get it from 4.10 trunk.\nI use it for merging indexes with taxonomies. ",
            "date": "2014-07-19T15:35:19+0000"
        },
        {
            "id": "comment-14067583",
            "author": "Littlestar",
            "content": "I test again.\n\nthis bug only occur when there is another BinaryDocValue field.\ntwo field: FacetField + BinaryDocValuesField \n\nwhen I remove the BinaryDocValuesField, tested ok.\n\nI think OrdinalMappingBinaryDocValues#getBinaryDocValues is wrong in 4.10.0\nit has no check whether the BinaryDocValuesField is FacetField or not, just wrapper it to OrdinalMappingBinaryDocValues.\n\nin 4.6.1, it has checked whether the field  exist in dvFieldMap or not.\n\nin 4.6.1\n @Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n    BinaryDocValues inner = super.getBinaryDocValues(field);\n    if (inner == null) \n{\n      return inner;\n    }\n    \n    CategoryListParams clp = dvFieldMap.get(field);\n    if (clp == null) {      return inner;    }\n else \n{\n      return new OrdinalMappingBinaryDocValues(clp, inner);\n    }\n  } ",
            "date": "2014-07-19T16:42:30+0000"
        },
        {
            "id": "comment-14067586",
            "author": "Littlestar",
            "content": "the following patch works well for me.\n\nOrdinalMappingAtomicReader(4.10.0)\n@Override\n  public BinaryDocValues getBinaryDocValues(String field) throws IOException {\n\t  if (!field.equals(facetsConfig.getDimConfig(field).indexFieldName)) \n{\n\t\t  return super.getBinaryDocValues(field);\n\t  }\n\n    final OrdinalsReader ordsReader = getOrdinalsReader(field);\n    return new OrdinalMappingBinaryDocValues(ordsReader.getReader(in.getContext()));\n  } ",
            "date": "2014-07-19T16:52:34+0000"
        },
        {
            "id": "comment-14067900",
            "author": "Shai Erera",
            "content": "Patch fixes the problem. We need to take the source FacetsConfig in OrdinalMappingAtomicReader and then of course only wrap the BinaryDV fields that were indexed with facets. I also improved the test to make sure we only touch facet fields by OrdinalMappingAtomicReader. ",
            "date": "2014-07-20T12:05:40+0000"
        },
        {
            "id": "comment-14067901",
            "author": "ASF subversion and git services",
            "content": "Commit 1612079 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1612079 ]\n\nLUCENE-5801: OrdinalMappingAtomicReader should not wrap non-facet BinaryDocValues fields ",
            "date": "2014-07-20T12:08:28+0000"
        },
        {
            "id": "comment-14067904",
            "author": "ASF subversion and git services",
            "content": "Commit 1612081 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1612081 ]\n\nLUCENE-5801: OrdinalMappingAtomicReader should not wrap non-facet BinaryDocValues fields ",
            "date": "2014-07-20T12:14:46+0000"
        },
        {
            "id": "comment-14067905",
            "author": "Shai Erera",
            "content": "Committed this fix. Please report if you still encounter problems. ",
            "date": "2014-07-20T12:19:02+0000"
        },
        {
            "id": "comment-14067934",
            "author": "Littlestar",
            "content": "the fixs works failed(no exception throws, but result in wrong facet data).\n\ndefault \"$facets\" not in facetFields.\nso merge with wrong result.\n\nthe following works ok.\npublic OrdinalMappingAtomicReader(AtomicReader in, int[] ordinalMap, FacetsConfig srcConfig) {\n    super(in);\n    this.ordinalMap = ordinalMap;\n    facetsConfig = new InnerFacetsConfig();\n    facetFields = new HashSet<>();\n+    if (srcConfig.getDimConfigs().size() == 0) \n{\n+        facetFields.add(FacetsConfig.DEFAULT_DIM_CONFIG.indexFieldName);\n+    }\n    for (DimConfig dc : srcConfig.getDimConfigs().values()) \n{\n      facetFields.add(dc.indexFieldName);\n    }\n  } ",
            "date": "2014-07-20T13:57:57+0000"
        },
        {
            "id": "comment-14067946",
            "author": "Shai Erera",
            "content": "Actually, this isn't the correct fix. I modified the test to index two dimensions, one under custom indexFieldName $tags and one under the default. So facetsConfig.getDimConfigs() returns only the $tags facets. If I add the DEFAULT_INDEX_FIELD_NAME (always) then it solves the problem, but then if the app never uses that field name for faceting, but adds it as another BDV, we try to map ordinals ... I think it's not very likely that this happens though, so I'm willing to go with that fix.\n\nI'm working on a patch with improved test. ",
            "date": "2014-07-20T14:38:37+0000"
        },
        {
            "id": "comment-14067949",
            "author": "Shai Erera",
            "content": "Patch fixes the problem, but I still want to review the test, make sure it covers this index merge end-to-end. ",
            "date": "2014-07-20T14:47:43+0000"
        },
        {
            "id": "comment-14068276",
            "author": "ASF subversion and git services",
            "content": "Commit 1612197 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1612197 ]\n\nLUCENE-5801: add default indexFieldName to facetFields ",
            "date": "2014-07-21T07:07:58+0000"
        },
        {
            "id": "comment-14068277",
            "author": "ASF subversion and git services",
            "content": "Commit 1612198 from Shai Erera in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1612198 ]\n\nLUCENE-5801: add default indexFieldName to facetFields ",
            "date": "2014-07-21T07:09:49+0000"
        },
        {
            "id": "comment-14068279",
            "author": "Shai Erera",
            "content": "Committed the fix. ",
            "date": "2014-07-21T07:11:22+0000"
        }
    ]
}