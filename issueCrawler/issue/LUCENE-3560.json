{
    "id": "LUCENE-3560",
    "title": "add extra safety to concrete codec implementations",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In LUCENE-3490, we reorganized the codec model, and a key part of this is that Codecs are \"safer\"\nand don't rely upon client-side configuration: IndexReader doesn't take Codec or anything of that \nnature, only IndexWriter.\n\nInstead for \"read\" all codecs are initialized from the classpath via a no-arg ctor from Java's \nService Provider Mechanism.\n\nSo, although Codecs can still take parameters in the constructors, be subclassable, etc (for passing\nto IndexWriter), this enforces that they must write any configuration information they need into\nthe index, so that we don't have a flimsy API.\n\nI think we should go even further, for additional safety. Any methods on our concrete codecs that\nare not intended to be subclassed should be final, and we should add assertions to verify this.\n\nFor example, SimpleText's files() implementation should be final. If you want to make an extension\nof simpletext that has additional files, then this is a different index format and should have a\ndifferent name!\n\nNote: This doesn't stop extensibility, only stupid mistakes. \nFor example, this means that Lucene40Codec's postingsFormat() implementation is final, even though \nit offers a configurable \"hook\" (getPostingsFormatForField) for you to specify per-field postings \nformats (which it writes into a .per file into the index, so that it knows how to read each field).\n\n\nprivate final PostingsFormat postingsFormat = new PerFieldPostingsFormat() {\n  @Override\n  public PostingsFormat getPostingsFormatForField(String field) {\n    return Lucene40Codec.this.getPostingsFormatForField(field);\n  }\n};\n\n...\n\n@Override\npublic final PostingsFormat postingsFormat() {\n  return postingsFormat;\n}\n\n...\n\n  /** Returns the postings format that should be used for writing \n   *  new segments of <code>field</code>.\n   *  \n   *  The default implementation always returns \"Lucene40\"\n   */\n  public PostingsFormat getPostingsFormatForField(String field) {\n    return defaultFormat;\n  }",
    "attachments": {
        "LUCENE-3560.patch": "https://issues.apache.org/jira/secure/attachment/12502561/LUCENE-3560.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-05T08:57:45+0000",
            "content": "+1 ",
            "author": "Simon Willnauer",
            "id": "comment-13144635"
        },
        {
            "date": "2011-11-05T10:16:26+0000",
            "content": "Heavy reflecting in the good old TokenStream assertFinal (I was so unhappy when Analyzer was restructured that it had to go there... g).\n\nSome comments:\n\n\tWe should maybe also add a check that there is at least a default constructor available. this.getClass().getConstructor() does not throw exception\n\tIn general, subclassing a Codec or a PostingsFormat is wrong (except the Lucene3x hack). If you subclass a codec/PF, you can no longer  change it's name. So anybody who subclasses a codec will produce a clone with the same name but perhaps another index format. This is prevented by Robert's finalness on the format hooks, but what else could a codec do different if its not final without breaking index format?\n\tI think even 3x Codec should be final and not subclassed by the RW codec. The RW Preflex codec in tests should subclass abstract Codec, and simply delegate all \"read\" methods to the RO-Codec [I am not sure if this all works as its very complicated... *g* - I only mention: new Exception().getStackTrace() to inspect call stack... highly sophisticated!].\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13144645"
        },
        {
            "date": "2011-11-05T11:29:40+0000",
            "content": "\nThis is prevented by Robert's finalness on the format hooks, but what else could a codec do different if its not final without breaking index format?\n\nA codec can take parameters or have a non-final \"hook\": just like the perfield stuff does... (and it records this stuff into the index, so its fine). This is similar to CharTokenizer \n\n\nI think even 3x Codec should be final and not subclassed by the RW codec. The RW Preflex codec in tests should subclass abstract Codec, and simply delegate all \"read\" methods to the RO-Codec [I am not sure if this all works as its very complicated... *g* - I only mention: new Exception().getStackTrace() to inspect call stack... highly sophisticated!].\n\nYeah, it would be nice to clean up the preflex hack... ",
            "author": "Robert Muir",
            "id": "comment-13144660"
        },
        {
            "date": "2011-11-05T15:12:50+0000",
            "content": "Let's not go too far either... we want people to write and contribute new codecs, if we make the api too onerous to use then we risk a lot of copy&paste-ing (e.g. I'd like to extend an existing codec to add one file to files() - bummer, I have to reimplement the whole codec now). So let's leave extensibility where it's clear that stuff can be extended with no harm (or \"no harm if you read the instructions\"). ",
            "author": "Andrzej Bialecki",
            "id": "comment-13144714"
        },
        {
            "date": "2011-11-05T15:15:17+0000",
            "content": "\ne.g. I'd like to extend an existing codec to add one file to files() - bummer, I have to reimplement the whole codec now\n\nBut this is a must: you made a new index format, it needs a name to differentiate itself from the existing codec, otherwise it won't work. ",
            "author": "Robert Muir",
            "id": "comment-13144715"
        },
        {
            "date": "2011-11-05T15:30:20+0000",
            "content": "\nSo let's leave extensibility where it's clear that stuff can be extended with no harm (or \"no harm if you read the instructions\").\n\nAnd thats exactly what this patch does: it only allows extensibility where there is no harm. The problem is, in trunk today, no methods on any codecs are final (and some should be!).\n\nThe places where there is no harm: e.g. getPostingsFormatForField, are still left open. This patch doesn't stop you from doing anything you can't already do today.\n\nIt only stops code that was already doomed to fail at runtime from even compiling. ",
            "author": "Robert Muir",
            "id": "comment-13144721"
        },
        {
            "date": "2011-11-05T15:36:52+0000",
            "content": "I'd like to extend an existing codec to add one file to files() - bummer, I have to reimplement the whole codec now\n\nThe abstract base class Codec is as stupid simple as Analyzer. There is no logic in it, it just defines the following:\n\n\tname of codec (which cannot be changed by subclassing!!!)\n\tfactory methods for the format readers/writers of the different parts of an index (postings, stored fields, segments file,...)\n\n\n\nIf you want to create a new codec, you have to simply write this wrapper with a new name, otherwise SPI won't work.\n\nThe first point in the above list is the real bummer in your \"I only want to add one file\" approach. If you would subclass the codec, the name cannot change anymore. This name is written to the index format. When you open IndexReader, it reads the name and uses Codec.forName() to lookup the codec. As the name was not changed in your subclass it would then use the superclass to read the index -> #fail ",
            "author": "Uwe Schindler",
            "id": "comment-13144724"
        }
    ]
}