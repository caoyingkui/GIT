{
    "id": "LUCENE-8080",
    "title": "GeoExactCircle improvement",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.3",
            "master (8.0)"
        ]
    },
    "description": "Hi Karl Wright,\n\nCurrent implementation of GeoExactCircle seems to work well for planet models with low flattening (~|0.025|). When flattening increase shapes start becoming invalid because of the cutting angle of the circle plane which results on the center of the circle ending up on the wrong side of the plane. \n\nI propose a new version of GeoExactCircle that tries to overcome this problem by creating a new plane for a circle sector in such cases. The new plane is built built for each sector when needed by using two points from the circle edge and the center of the world. The plane is such that it is built as close as possible to the circle plane of the sector. Points from the circle plane must not be within the new plane and the center of the circle must be within the plane.\n\nThis approach seems to work well up to planets with flattening up to around ~|0.1|. I think after that the cutting angles of circle planes can be so thin that the apporach is not valid. \n\nTherefore I propose to add this new approach and limit the creation of such circles to planet models with flattening lower than |0.1|. Probably a limitation that does not affect most of the realistic cases.\n\nIn addition this new version forces a minimum of 4 sectors in a circle. The issue on LUCENE-8071 came up again for circles of any radius so we should enforce it for all circles.\n\nThanks!",
    "attachments": {
        "LUCENE-8080-test.patch": "https://issues.apache.org/jira/secure/attachment/12901221/LUCENE-8080-test.patch",
        "LUCENE-8080.patch": "https://issues.apache.org/jira/secure/attachment/12901220/LUCENE-8080.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16279977",
            "date": "2017-12-06T10:26:29+0000",
            "content": "Attached is the patch with the new version off the circle and a patch for the tests ( some of them become invalid). ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16280139",
            "date": "2017-12-06T12:58:35+0000",
            "content": "Ignacio Vera, I will not have time today to look at this.  But first, in any case please resubmit the patch without all the formatting changes \u2013 those make review difficult.  If you want to reformat things, that is possible, but you would want to submit that as a patch that does not include any functional changes.\n\nThanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16281176",
            "date": "2017-12-07T00:25:19+0000",
            "content": "Ignacio Vera, now I'm getting:\n\n\nfatal: corrupt patch at line 90\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16281334",
            "date": "2017-12-07T05:04:43+0000",
            "content": "sorry about that, I regenerated the patch.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16281501",
            "date": "2017-12-07T08:39:07+0000",
            "content": "Ok, thanks for the fixed patch, Ignacio Vera.\n\nBut now I've been thinking about this further.  Can you try to explain to me why the sector approach fails?  Intuitively, it can only fail if it means that a plane is constructed that doesn't accurately capture the points on the planet surface that belong to that sector.  I'm not convinced this can actually occur unless the plane slices through the world in such a way to not go between the circle center's antipode and the center of the circle.  It occurs to me that it should be easy to detect if that is the case:\n\n\nif (plane.isWithin(-center.x, -center.y, -center.z) == plane.isWithin(center.x, ,center.y, center.z)) {\n  // plane is bogus\n}\n\n\n\nThe question is, what to do if that's the case?  I would think that, for a bad sector, just splitting the sector further might consistently solve the problem.  Why doesn't it?  Maybe the plane is so tilted within its sector that even the above test is inadequate somehow?  Is there any way to determine if the plane excludes points on the surface that are otherwise within the sector planes?  Or maybe the problem is a bit more subtle?\n\nWe've iterated on this a number of times so I think we need to think it through enough to be sure we have a decent fix here.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16281680",
            "date": "2017-12-07T10:52:47+0000",
            "content": "My assumption is that the circle center is always within the plane because it is the point used to choose sideness, therefore what you provide to detect bogus plane is equivalent to what I have in the patch.\n\nForget about mu deleted comment, I need to think a bit more on the issue.  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16283264",
            "date": "2017-12-08T09:37:27+0000",
            "content": "Hi [~karl wright],\n\nThanks for stopping my feet. I had another thought and I tried to simplify the problem. I attached a new test that shows a case when we are building a bogus plane. In the current case we build the first circle and the result is wrong.\n\nI attach a new proposal how to handle those cases. In that case we cannot build the first circle because is too accurate but we can build it with less accuracy and result is right. Below the explanation.\n\nInstead of trying to building a helper plane, what I do, when building a bogus plane, is to build another one, less accurate one, using two points of the cirlcle and the center of the world. Of couse you cannot build too accurate circles with this approach but still you can build it with less precision.\n\nSolution seems to be generic with the penalty of accuracy and performance/number of slices. Note that this does not affect planet models like WGS84.\n\nThe patch forces to build at least 4 slices and I removed a check when building the plane as it seems unnecesary. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16283276",
            "date": "2017-12-08T09:50:54+0000",
            "content": "Right, so I'm convinced that we can detect if a plane is bogus because it slices the world in such a way as to not go between the center and the antipode of the center.  A plane that does that properly is OK and nothing else is needed to use it as part of a sector definition.\n\nIf it is outside, however, then it clearly cannot be used.  The question is what to do then?  I can buy that further splitting does not work, but this all means in essence that you can't actually construct a sector because it doesn't include the center.\n\nSo here's my thinking process.\n(1) We're trying to assemble our set of points by applying an OR operation between membership in multiple sectors.\n(2) If we cannot properly describe a sector, this cannot work.\n(3) If building a specific ExactCircle requires that we construct a bogus sector, then we cannot build an ExactCircle with those parameters.\n\nSo the first thing to do is to simply fail (with an IllegalArgumentException) when we can't build the circle, and we already clearly know how to do that.  I'd strongly suggest that we first commit code that addresses that issue (failing hard when a bogus circle is built) and then analyze whether this is going to stop real-world use of the feature.  As you point out, the Vincenti formula falls apart at a certain point as well, and there's little point in re-engineering it to handle cases people will never use, so we're already in the situation of working with approximations that have a limited range of utility. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16283286",
            "date": "2017-12-08T09:57:12+0000",
            "content": "Ignacio Vera, seems our replies crossed.  But thank you for the response!\n\nThe approach of building planes through the center of the world is, in essence, resorting to standard polygon approximation in the case where the circle cannot be constructed any other way.  That's an OK approach but as you say it means we have to toss the accuracy out the window.  I think at this point I'd prefer just failing hard if we can't build the circle you ask for on the planet model you gave us.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16283291",
            "date": "2017-12-08T10:02:27+0000",
            "content": "I will await your (revised) patch.  Thanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16283322",
            "date": "2017-12-08T10:34:31+0000",
            "content": "I agree that falling back to standard polygon approach is not the idea of this shape so failing hard is good as well as we know how to detect bogus shapes. The important thing is not to build such a shape.\n\nAttached revised patch where an IllegalArgumentException is thrown when bogus planes are detected. I am keeping in the patch the part that is forcing to create at least 4 slices or is better to hadle that in another JIRA ticket? In the same patch is a test where circle construction fails because of a bogus plane. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16283328",
            "date": "2017-12-08T10:36:39+0000",
            "content": "Forcing 4 slices seems innocuous to me.  I'll commit the patch. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16283337",
            "date": "2017-12-08T10:41:50+0000",
            "content": "Commit 18f12fdb2853814bea5f61e5b020b80d6bcebec6 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=18f12fd ]\n\nLUCENE-8080: Detect when we are constructing a bogus exact circle, and throw an IllegalArgumentException in that case.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16283344",
            "date": "2017-12-08T10:42:46+0000",
            "content": "Commit 8d3d2060422b09eb37df988ed64899170731de76 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8d3d206 ]\n\nLUCENE-8080: Detect when we are constructing a bogus exact circle, and throw an IllegalArgumentException in that case.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16283348",
            "date": "2017-12-08T10:43:21+0000",
            "content": "Commit f79baa044e480ae27dfbf5b28674fc426ff542d8 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f79baa0 ]\n\nLUCENE-8080: Detect when we are constructing a bogus exact circle, and throw an IllegalArgumentException in that case.  Committed on behalf of Ignacio Vera. ",
            "author": "ASF subversion and git services"
        }
    ]
}