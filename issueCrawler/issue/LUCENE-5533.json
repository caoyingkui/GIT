{
    "id": "LUCENE-5533",
    "title": "TaxonomyFacetSumIntAssociations overflows, unpredicted results",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/facet"
        ],
        "affect_versions": "4.7",
        "status": "Open",
        "fix_versions": []
    },
    "description": "TaxonomyFacetSumIntAssociations extends IntTaxonomyFacets which uses a int[] to store values. If you sum a lot of integers in the IntAssociatoins, the int will overflow.\n\nThe easiest fix seems to change the value[] to long?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13937677",
            "author": "Michael McCandless",
            "content": "+1\n\nBut maybe we should break out a LongTaxonomyFacets instead?  Ie, the more common-case of simple facet counting would never overlow an int since a Lucene shard can have at most 2.1B docs. ",
            "date": "2014-03-17T11:07:19+0000"
        },
        {
            "id": "comment-13937690",
            "author": "Shai Erera",
            "content": "But maybe we should break out a LongTaxonomyFacets instead?\n\n+1, and especially as it's only relevant to association-based faceting.\n\nRob, is this something you really hit or just a random code review? I agree when you sum integers there's a risk of overflowing, but I'm afraid if we introduce LongTaxoFacets users might want to use it \"just in case\". The risk is that a single ord will overflow, right?\n\nI wonder if we should use a packed long buffer instead of a plain long[] ... that's optimization though. First let's agree that this is something that needs fixing. ",
            "date": "2014-03-17T11:21:01+0000"
        },
        {
            "id": "comment-13937770",
            "author": "Rob Audenaerde",
            "content": "I hit this pretty easily. I tried to build an aggregator that sums the associated values for a given search. In my testcase, I used 1M documents. The n-th document had n as associated int value. Average int value is thus 500.000. 500.000x1M >  2,147,483,648\n\nI currently switched to using Floats, which for me gives results that are accurate enough, and also allow for numbers greater than Integer.MAX_VALUE, so I'm not really sure it is a problem. Maybe there should be a RuntimeException if the accumulated values overflows? ",
            "date": "2014-03-17T13:05:53+0000"
        },
        {
            "id": "comment-13937785",
            "author": "Shai Erera",
            "content": "I see, it is a pretty extreme case indeed! We never hit overflow problems in the past .\n\nThe problem w/ raising RuntimeException is it means adding an if to every aggregation, which is costly and for a really extreme case. I think it's better if you write your own TaxoFacetSumLongAssoc to use a long[], packed-ints, float[] or whatever and raise these exceptions yourself? Also, perhaps it's ok to e.g. stop at weight=1B/2.1B to denote that this category is already very important and all categories beyond this weight are equally important? Not sure of your usecase and if it makes sense, but juts a thought. That too can easily be done in your own Facets impl. ",
            "date": "2014-03-17T13:25:08+0000"
        }
    ]
}