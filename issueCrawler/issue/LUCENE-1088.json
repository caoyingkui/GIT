{
    "id": "LUCENE-1088",
    "title": "PriorityQueue 'wouldBeInserted' method",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "This is a request for a new method in PriorityQueue\n\npublic boolean wouldBeInserted(Object element)\n// returns true if doc would be inserted, without inserting \n\nThis would allow an application to prevent duplicate entries from being added to the queue.\nHere is a reference to the discussion behind  this request:\n\nhttp://www.nabble.com/FieldSortedHitQueue-enhancement-to9733550.html#a9733550",
    "attachments": {
        "LUCENE-1088.patch": "https://issues.apache.org/jira/secure/attachment/12371456/LUCENE-1088.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-12-11T20:47:57+0000",
            "content": "Attached patch.  All tests pass. I plan to commit sometime tomorrow... ",
            "author": "Michael McCandless",
            "id": "comment-12550712"
        },
        {
            "date": "2007-12-12T05:51:22+0000",
            "content": "If you're adding a wouldBeInserted method, I'd add a insertWithNoCheck that either calls put() (if there is room in the queue) or replaces the top() element, without re-evaluating the element (by calling lessThan). This will save unnecessary calls (the lessThan() method can be expensive). It should be documented in the method though that insertWithNoCheck assumes wouldBeInserted before. ",
            "author": "Shai Erera",
            "id": "comment-12550843"
        },
        {
            "date": "2007-12-12T11:52:50+0000",
            "content": "OK, though, now I'm wondering whether one should simply subclass PriorityQueue to achieve this change to insert()'s behavior, instead of adding these two methods.  Is there a reason why this approach can't be used instead?\n\nI realize this would replicate the logic in insert() in a subclass, but I think that's a fairly minor cost vs increasing the complexity of PriorityQueue by adding these two methods? ",
            "author": "Michael McCandless",
            "id": "comment-12550934"
        },
        {
            "date": "2007-12-12T12:34:40+0000",
            "content": "I think that after LUCENE-1089 will be committed, applications will be able to extend PQ more easily and maybe those two methods really belong to an extension of PQ, since they are not really the basics of every PQ. ",
            "author": "Shai Erera",
            "id": "comment-12550951"
        },
        {
            "date": "2007-12-12T13:21:54+0000",
            "content": "Michael, I agree - the most important fix was to make heap protected (and not private). After that, you're right, insertWithOverflow() and wouldBeInserted() could be implemented in a subclass in or even outside Lucene. Whether or not to include these new methods in the basic PriorityQueue should depend, I think, on how commonly needed these features will be for users, and whether we want to use them inside Lucene (like Shai's patches for TopDocCollector and other classes was doing).. ",
            "author": "Nadav Har'El",
            "id": "comment-12550964"
        },
        {
            "date": "2007-12-12T14:09:49+0000",
            "content": "OK, I'm thinking insertWithOverflow is reasonable to add to the core (under LUCENE-1089), but these two proposed methods in this issue should be done in a subclass once LUCENE-1089 makes that possible.  So I'm resolving this one as \"won't fix\", and then I'll work on getting LUCENE-1089 committed... ",
            "author": "Michael McCandless",
            "id": "comment-12550976"
        }
    ]
}