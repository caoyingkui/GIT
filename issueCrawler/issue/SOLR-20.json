{
    "id": "SOLR-20",
    "title": "A simple Java client for updating and searching",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "clients - java"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I wrote a simple little client class that can connect to a Solr server and issue add, delete, commit and optimize commands using Java methods.  I'm posting here for review and comments as suggested by Yonik.",
    "attachments": {
        "solrclient_addqueryfacet.zip": "https://issues.apache.org/jira/secure/attachment/12355066/solrclient_addqueryfacet.zip",
        "solr-client-java-2.zip.zip": "https://issues.apache.org/jira/secure/attachment/12337074/solr-client-java-2.zip.zip",
        "SolrServerException.java": "https://issues.apache.org/jira/secure/attachment/12335003/SolrServerException.java",
        "solr-client-java.zip": "https://issues.apache.org/jira/secure/attachment/12335180/solr-client-java.zip",
        "solr-client.zip": "https://issues.apache.org/jira/secure/attachment/12347949/solr-client.zip",
        "solr-client-sources.jar": "https://issues.apache.org/jira/secure/attachment/12338768/solr-client-sources.jar",
        "DocumentManagerClient.java": "https://issues.apache.org/jira/secure/attachment/12334955/DocumentManagerClient.java",
        "SolrClientException.java": "https://issues.apache.org/jira/secure/attachment/12334934/SolrClientException.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12414361",
            "date": "2006-06-02T13:33:20+0000",
            "content": "Previous version didn't properly escape the query in the deleteByQuery() case. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12414382",
            "date": "2006-06-02T16:17:22+0000",
            "content": "This looks quite good and well documented!   Thanks for this contribution.  The only issue my current project would have with this is the Map which prevents multiple fields of the same name from being added.  I use a lot of multi-valued fields.  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12414394",
            "date": "2006-06-02T16:58:39+0000",
            "content": "One idea for dealing with multivalued fields is to check the type of the object in the Map and if is an array or Collection then iterate over it rather than just doing .toString() on it.  Would that logic work for your use as well? "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12414414",
            "date": "2006-06-02T20:18:44+0000",
            "content": "Iterating over an array or Collection of values is a great suggestion.  I'll change it and resubmit when I have some time later today. "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12414480",
            "date": "2006-06-02T23:58:02+0000",
            "content": "Here is the latest, incorporating Erik's suggestion about supporting multi-valued fields.\n\nBTW, is there any way to delete the older attached versions of this file from JIRA?  There's no real need for them to be there any more. "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12414663",
            "date": "2006-06-05T02:04:49+0000",
            "content": "New exception type for reporting server-side exceptions. "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12414664",
            "date": "2006-06-05T02:05:18+0000",
            "content": "New client code that uses the new exception. "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12415246",
            "date": "2006-06-08T09:05:53+0000",
            "content": "Here's the latest.  There is an abstract base class that handles client connection and request/response and two subclasses.  One is as before, with java APIs, and the other is for cases where you have an XML document you want to transform and send to the server. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12415247",
            "date": "2006-06-08T09:28:27+0000",
            "content": "Great!  Now we need to figure out where it lives, and how to work out the dependencies (a solr-util.jar that a client could use, or perhaps just pull the needed class or two directly into the solr-client.jar) "
        },
        {
            "author": "Philip Jacob",
            "id": "comment-12421774",
            "date": "2006-07-18T03:19:52+0000",
            "content": "delete() in the DocumentManagerClient ought to be doing this:\n\n<delete><id>1234</id></delete>\n\nIt's currently doing this:\n\n<delete><query>1234</query></delete> "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12421785",
            "date": "2006-07-18T05:19:42+0000",
            "content": "Good catch Philip.  For the benefit of future downloaders, here's a complete zip file with everything including this fix. "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12427788",
            "date": "2006-08-14T00:56:48+0000",
            "content": "Here is the latest version of the client code, in the form of solr-client-source.jar.  The big difference here is that there are now two clients, DocumentManagerClient for adding, inserting, and updating, and SearchClient for searching.  They share the same underlying communication mechanism, which consists of a low-level mechanism for doing queries and parsing responses by reading from an InputStream (see ResponseParser) and a slightly higher level mechanism that handles some of the XML for you (see XmlResponseParser).\n\nI've been building this as a seperate project with a Maven2 dependency on Solr, but if the source is dropped into the Solr source tree at the appropriate place I suspect it will just compile and work.  There are no other outside dependencies.\n\nI have some unit tests as well, but for the moment they are too tied in to my environment to be useful to the broader community.  I will correct this and submit them. "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12428555",
            "date": "2006-08-17T02:23:17+0000",
            "content": "Please ignore that last attachment.  It contains an earlier version of the code than I intended, and has a couple of serious bugs.  I'm sure that what I'm running now is a lot better, but I'm going to iterate a little more and build some more complete tests before I submit it again.  Unless anyone out there is dieing to be on the bleeding edge of this. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12438790",
            "date": "2006-09-29T20:15:04+0000",
            "content": "Ping... \nany chance you could make your latest version available? "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12447549",
            "date": "2006-11-06T21:57:18+0000",
            "content": "I'm dieing... which files should I download? "
        },
        {
            "author": "David Halsted",
            "id": "comment-12449911",
            "date": "2006-11-15T04:55:55+0000",
            "content": "it is a little confusing \u2013 any chance one of the attachments could be designated as the right one?  Thanks! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12450843",
            "date": "2006-11-17T18:32:03+0000",
            "content": "I don't know that there is a specific \"right\" one at the moment ... Darren's last comment suggests that he has a better version but it's not quite ready for submission.\n\nFYI: if you click the \"All\" link at teh top left of the comment listing, you can see where in the flow of time each of the attachemnts was added \u2013 from there it's pretty easy to tell that while solr-client-sources.jar is the most recent attachment, it's the one Darren said should be ignored...\n\nat this moment solr-client-java-2.zip.zip seems to be the most recent \"good\" version.\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12457598",
            "date": "2006-12-12T06:39:38+0000",
            "content": "SOLR-20 and SOLR-30 seem to be lingering in JIRA.\nIs the plan to merge them, and get the code into Solr? "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12461050",
            "date": "2006-12-27T17:57:21+0000",
            "content": "SOLR-20: add, delete, commit, optimize \nSOLR-30: search\n\nSo, should be merged.\n\nHttpClient seems to be right choice (easily configurable; 'follow redirects', 'buffer size', etc.).\n\nPossible improvements: \n\n\tmake it independent on implementation (for instance, use interface and HttpClient-based implementation)\n\tXML-based external configuration file\n\tno need for JDOM...\n\n\n\nProbably, we need separate src/client folder for source files (sources do not depend on SOLR) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12461066",
            "date": "2006-12-27T18:48:40+0000",
            "content": "I've attached the client code i have written that merges SOLR-20 & SOLR-30.  It can add, delete, commit, optimize and search.\n\nThe main interface is SolrClient.  \n\nIt uses the XPP parser to parse the search results.  \n\nIf there is interist, i can clean it up some more...   "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12461517",
            "date": "2006-12-30T17:30:59+0000",
            "content": "My previous comment is visible to jira-users only, sorry.\nCode submitted by Ryan looks great! "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12462800",
            "date": "2007-01-07T07:43:24+0000",
            "content": "I just posted a new version of a java client.  This moves things to proper org.apache... packages and adds the waitFlush, waitSearcher suggested by Fuad.  \n\nIf people are interested, i think this should sit next to /client/ruby in: /client/java/solrj/\n\nthere is a build.xml file that will generate a solr-client.jar file.\n\nAs a taste, this is how you perform a search:\n<code>\n    SolrClient client = new SolrClientImpl( new URL(\"http://localhost:8983/solr/\") );\n\n    SolrQuery query = new SolrQuery();\n    query.setQuery( \"video\" );\n\n    QueryResults results = client.query( query );\n\n    for( ResultDoc doc : results.getDocs() ) \n{\n        System.out.println( \"[\"+doc.getId()+\"] \"+ doc.getField( \"name\" ) );\n    }\n</code>\n\nAlso, if there is interest, i can post an example webapp using this client library to search and explore a solr repository.\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12463372",
            "date": "2007-01-09T18:50:04+0000",
            "content": "added APL to zip "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12464641",
            "date": "2007-01-14T23:27:22+0000",
            "content": "\n(NOTE: revised summary since this issue has moved beyond just updating)\n\nI finally had a chance to look this over, here's a few comments in\nno particular order... \n\n1) i like the name solrj, i think this code should definitely live in client/java/solrj so that there is the potential for other java client code that is independent (if nothing else, i suspect something like SOLR-86 might be handy) ... we should probably put solrj in the package name as well.\n\n2) i wouldn't worry about having a special package for the exceptions ... they've got exception in their name, no ones going to be confused.\n\n3) I'm really not fond of \"ParamNames.java\" being a copy of the constants in \"SolrParams.java\", or XML.java being copied, or the xpp jar being duplicated ... it seems like we should just pull in those (compiled) classes at build time ... but that would require that the whole Solr tree be checked out, and there seems to be interest in making it possible to \"svn checkout client/lang/impl\" and build that in isolation ... perhaps we could use svn:externals to pull in specific utility classes and jars from other places in the tree? (although based on what I've read today, branching for releases would be hard since all of the svn:external props would have to be updated).\n\nwhat do people think in general about how the client code can/should/shouldn't depend on the core server code?\n\n\n4) one thing we should really try to support in a client is executing query requests against non-standard request handlers ... handlers that might take in request params that we can't even imagine.  The SolrQuery class has explicit setters for many of the params that the built in request handlers support, but there is no easy way for people to build other queries.  I think it might make sense if SolrQuery was an interface that just defined the methods needed by the SolrClient \u2013 probably just getQueryString().  Then their can be a SimpleSolrQuery that has all of the setters in the current SolrQuery class, possibly using a general baseclass with an impl of getQueryString that uses some SolrParams...\n\npublic class AbstractSolrQuery implements SolrQuery {\n   protected abstract SolrParams getSolrParams();\n   public String getQueryString() \n{\n     ... your current code, looping over getSolrParams() ...\n   }\n}\n\n\n5) what is the purpose of SolrClientStub ?\n\n6) what is the purpose of SolrDocumentable being an empty interface? ... it seems like you could replace SolrDocumentable, SolrDocument, and SolrDocumented with something like this...\n\npublic interface SolrDocument {\n  public Map<String,Object> getSolrDocumentFields();\n}\npublic abstract class SolrDocumented implements SolrDocument {\n  protected abstract SolrDocument getSolrDocument();\n  public Map<String,Object> getSolrDocumentFields() \n{\n    return getSolrDocument().getSolrDocumentFields()\n  }\n}\n\nThen you wouldn't need that instanceof code in SolrClientImpl\n\nNote that we should probably support field and document boosts as well, but field boosts don't really need to be specified in the Map since they apply to the whole field and not the individual values, so we could just add...\n\n  public int getDocumentBoost();\n  public Map<String,Integer> getFieldBoosts()\n\n...to SolrDocument.\n\n7) The ResultsParser and QueryResults classes seem to suffer the same limitation that i was mentioning about the SolrQuery class \u2013 they assume a very specific response structure (only one doc list, an optional facet block, an optional highlighting block, an optional debug block) ... I think since the ResultsParser already understands the all of the various tags that are used, it should be easy to do this as long as the QueryResult object becomes a more general container that any named data can be shoved into (just like SolrQueryResponse is on the server side) ... then a \"SimpleQueryResults\" class could be written that had the convenience methods that make sense when using StandardRequestHandler or DisMaxRequestHandler.\n\n8) There was a comment in SOLR-30 regarding the issue of that code only parsing the XML response ... i think it's completely practical to focus on client code which currently supports only the XmlResponseWriter output \u2013 especially with the solrj ResultsParser class currently having a single public method...\n\n    public QueryResults process( Reader reader ) throws SolrClientException, SolrServerException, XmlPullParserException, IOException\n\n...i think if we removed XmlPullParserException from that list of exceptions (it could always be wrapped in a SolrClientException, or a new SolrClientParseException) we have a really simple API where other ResultParser classes could be written to handle JSON or what not down the road just by adding a simple setResultParser to SolrClient.\n "
        },
        {
            "author": "J.J. Larrea",
            "id": "comment-12464648",
            "date": "2007-01-15T03:05:29+0000",
            "content": "Regarding Hoss' point #3, perhaps it's time to reorganize into something like\n\n/solr/server/...\n/solr/client/...\n/solr/webapp/,,, (or /solr/server/webapp)\n/solr/shared/...\n\n\"To build client XXX check out /solr/client or just /solr/client/java/XXX and /solr/shared\"\n\nShared would include external constants and exceptions. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12466970",
            "date": "2007-01-24T10:09:48+0000",
            "content": "I have dramatically reworked the client code to fit with the pluggable ContentStream model in SOLR-104.  This version makes it easy to customize/extend the request/response behavior.  Once it stabilizes and is better tested, I'll upload a zip, but for now, you can preview it:\n\n  http://svn.lapnap.net/solr/solrj/\n\n\nMajor changes:\n\n\n\tit is based on commons-httpclient-3.0.1.jar\n\tI'm using wt=JSON rather then XML.  (It maps to a hash easier)\n\tI moved some of the common classes to o.a.s.util.  Hopefully the core classes will be refactored to make it easier to share some classes\n\thandles multiple ContentStreams using multi-part form upload\n\tGot rid of the SolrDocumentable/SolrDocumented distinction. \u2013 now there is only SolrDocument()\n\tYou can define and automatically build a solr document with annotations\n\tIncludes a first draft for a HibernateEventListener.  When stuff is added/updated/deleted, it gets sent to solr.  (Note, this class should probable not be in the main client as the hibernate prerequisite libraries are substantial - I've included them because its what i need to have working soon)  When this is more stable, it will be something similar to a Compass Hibernate3GpsDevice (http://www.opensymphony.com/compass/versions/1.1RC1/html/gps-hibernate.html)\n\n\n\n\nThe key interfaces are:\n\npublic interface SolrClient \n{\n\tpublic abstract SolrResponse process( final SolrRequest req );\n}\n\npublic interface SolrRequest \n{\n\tpublic String getMethod();\n\tpublic String getHandlerPath();\n\tpublic RequestParams getParams();\n\tpublic Collection<ContentStream> getContentStreams();\n\tpublic SolrResponse parseResponseBody(InputStream in);\n\tpublic SolrResponse execute(SolrClient solr);\n}\n\n\n\t- - - - - -\nHere is some sample usage:\n\n\n\nSolrClient client = new CommonsHttpSolrClient( \n\tnew URL(\"http://localhost:8983/solr/\") );\n\n// Set up a simple query\nSolrQuery query = new SolrQuery();\nquery.setQuery( \"solr\" );\nquery.addFacetField( \"cat\" );\nquery.setFacetLimit( 15 );\nquery.setQuery( \"video\" );\nquery.setShowDebugInfo( true );\n\nQueryResponse rsp = query.execute( client );\nfor( ResultDoc doc : rsp.getDocs() ) {\n\tSystem.out.println( doc.get( \"name\" ) );\n\tSystem.out.println( doc.getScore() );\n\tSystem.out.println( doc.getExplain() );\n}\n\nSimpleSolrDoc doc = new SimpleSolrDoc();\ndoc.setField( \"id\", \"xxx\" );\ndoc.setField( \"price\", 12.34f );\ndoc.setField( \"cat\", new String[] \n{ \"aaa\", \"bbb\", \"ccc\" }\n );\nnew AddDocuments( doc ).execute( client );\nnew CommitIndex().execute( client );\n\n\n\t- - - - - - - - - -\n\n\n\nThis also includes a utility to make solr documents from annotations.  Given the class:\n\n@SolrSearchable( boost=2.0 )\npublic class Example\n{\n  @SolrSearchable\n  public String getName()\n  {\n    return \"hello\" \n  }\n\n  @SolrSearchable( name=\"cat\", boost=3 )\n  public String getSomeOtherName()\n  {\n    return \"there\" \n  }\n}\n\nThe DocumentBuilder can automatically make:\n\n<doc boost=\"2.0\">\n <field name=\"name\">hello</field>\n <field name=\"cat\" boost=\"3\">there</field>\n</doc>\n\n\n\n\t- - - - - - - - - -\n\n\n\nThere are a few parts of the API i think are awkward, I'd love any feedback / review you may have.\n\nthanks\nryan "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12467116",
            "date": "2007-01-24T19:30:38+0000",
            "content": "> * it is based on commons-httpclient-3.0.1.jar\nCool, +1\n\n> * I'm using wt=JSON rather then XML. (It maps to a hash easier)\nHeh... I quickly checked out the code, but didn't see where you were parsing the code, or where the JSONObject class referenced is.\n\nAnyway, if you want the best JSON parser on the planet, check out\nhttp://www.nabble.com/Apache-Lab-proposal%3A-noggit-tf2701405.html#a7532843\nhttp://svn.apache.org/repos/asf/labs/noggit/\n\nI haven't had a chance to do the writing side, or the \"create full object graph\" part, but the parser is screaming fast.\n\n> * handles multiple ContentStreams using multi-part form upload\nWill a client need to do that?  I had thought a browser would be the only one using multi-part\n\n> * You can define and automatically build a solr document with annotations\nSounds cool\n\n> * Includes a first draft for a HibernateEventListener.\nSounds very cool... it should go in a separate contrib eventually.\n "
        },
        {
            "author": "rubdabadub",
            "id": "comment-12473993",
            "date": "2007-02-18T14:24:09+0000",
            "content": "Hi:\n\nI was really hoping that this patch will make it to trunk soon. I been using it without any problem. I was wondering if there are any specifics that are left for SOLR-20 to make it to trunk? I would be more then happy to help out anyway I can. I need SOLR-20 for Nutch-Solr integration so it would be nice if it was included.\n\nThankful for your kind attention to SOLR-20. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12474012",
            "date": "2007-02-18T19:51:07+0000",
            "content": "I want this on trunk also.  I'll be reviewing it and testing it out this afternoon and committing if all is fine. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12474032",
            "date": "2007-02-18T21:33:18+0000",
            "content": "My bad... it was SOLR-86 that interested me, and I've just committed it.    I can't take on these patches just yet. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12474078",
            "date": "2007-02-19T05:27:46+0000",
            "content": "I don't think this one is quite ready to go, but anyone interested can see an updated versions at:\n\n http://solrstuff.org/svn/solrj/ \n http://solrstuff.org/svn/solrj-hibernate/\n\nI have extracted the hibernate specific stuff into its own project so solrj is a bit more manageable.\n\n\n\t- - - -\n\n\n\nIf you are looking for a stable, simple client \"solr-client.zip\" is still your best bet. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12474080",
            "date": "2007-02-19T06:03:11+0000",
            "content": "to do SOLR-20 properly, it should use shared libraries rather then redefine things like constants and common utility classes. "
        },
        {
            "author": "Frederic Hennequin",
            "id": "comment-12478810",
            "date": "2007-03-07T16:27:51+0000",
            "content": "Hello, we have been testing the solr-client and think we have found a small bug :\n\nthe xml parsers on the query-side is not setup to use \"UTF-8\" encoding\nthis resulted in weird characters being returned by the solr-client...\nfor example : \"\u00e9\" came out like \"\u00c2\u00a9\" ... not really what we would like...\n\nwe fixed it by setting the input stream for the xmlparser to \"UTF8\" which gave us this code in ResultsParser.java :\n[code]\npublic QueryResults process( InputStream reader ) throws SolrClientException, SolrServerException, XmlPullParserException, IOException\n    {\n    \tQueryResults res = new QueryResults();\n\n\t\ttry {\n\t\t\tXmlPullParser xpp = null;\n\t\t\ttry \n{\n\t\t\t\txpp = factory.newPullParser();\n\t\t\t\txpp.setInput(reader,\"UTF-8\");\n\t\t\t\txpp.nextTag();\n\t\t\t}\n \n.....\n[/code]\n\nnotice we changed the argument for this method to InputStream instead of the reader so we could add \"UTF-8\" to the stream.\nby doing this we had to change the reader in SolrClientImpl.java to an inputstream :\n[code]\n....\nInputStream inputStream = urlc.getInputStream();\n\t\t\ttry \n{\n\t\t\t\tQueryResults res = parser.process( inputStream );\n\t\t\t\tres.setSolrURL( qurl );\n\t\t\t\tres.setQuery( query );\n\t\t\t\treturn res;\n\t\t\t}\n....\n[/code]\n\nin our opinion this was a major bug (since all solr-xml is encoded in utf-8) and we guess somebody just forgot to put it in...\n\nyay, now we can all start using freaky characters without the client actually freaking out  enjoy "
        },
        {
            "author": "Thierry Collogne",
            "id": "comment-12483051",
            "date": "2007-03-22T08:12:37+0000",
            "content": "I found that there was no way of adding highlight paramters to an SolrQuery, so I made some modifications to SolrQuery.java and ParamNames.java to allow highlighting\n\nChanges to SolrQuery\n\nFirst add a new variable\n\n          private HighlightParams _highlight = new HighlightParams();\n\nThan I defined a new innerclass (a bit like FacetParams)\n\n       public static class HighlightParams {\n\t\tpublic List<String> field = new ArrayList<String>();\n\t\tpublic int snippets = 3;\n\t\tpublic int fragsize = 100;\n\n\t\tpublic String simple_pre = \"<b>\";\n\t\tpublic String simple_post = \"</b>\";\n\n\t\tpublic boolean isEnabled()\n\t\t{\n\t\t\treturn field.size() > 0;\n\t\t}\n\t}\n\nThan add the following methods\n\n\tpublic void addHighlightField( String f )\n\t{\n\t\t_highlight.field.add( f );\n\t}\n\n\tpublic void setHighlightSnippets( int snippets )\n\t{\n\t\t_highlight.snippets = snippets;\n\t}\n\n\tpublic void setHighlightFragSize( int fragsize )\n\t{\n\t\t_highlight.fragsize = fragsize;\n\t}\n\n       // ATTENTION : only simple tags. No quotes like in <span class=\"tag\">\n\tpublic void setHighlightSurroundingTags( String pre, String post )\n\t{\n\t\t_highlight.simple_pre  = pre;\n\t\t_highlight.simple_post = post;\n\t}\n\nAdd the following code to getQueryString method (for example right before return builder.toString()\n\n              if( _highlight.isEnabled() ) {\n\t\t\tbuilder.append( '&' ).append( ParamNames.HIGHLIGHT ).append( \"=true\" );\n\t\t\tbuilder.append( '&' ).append( ParamNames.HIGHLIGHT_FIELDS ).append( \"=\" );\n\t\t\tfor( String f : _highlight.field ) \n{\n\t\t\t\tbuilder.append( f ).append( ',' );\n\t\t\t}\n\t\t\tbuilder.append( '&' ).append( ParamNames.HIGHLIGHT_SNIPPETS ).append( \"=\" ).append( _highlight.snippets );\n\t\t\tbuilder.append( '&' ).append( ParamNames.HIGHLIGHT_FRAGSIZE ).append( \"=\" ).append( _highlight.fragsize );\n\n\t\t\tbuilder.append( '&' ).append( ParamNames.HIGHLIGHT_SIMPLE_PRE ).append( \"=\" ).append( _highlight.simple_pre );\n\t\t\tbuilder.append( '&' ).append( ParamNames.HIGHLIGHT_SIMPLE_POST ).append( \"=\" ).append( _highlight.simple_post );\n\t\t}\n\n\nChanges to ParamNames.java\n\nAdd/modify the following variables \n\n     /** wether to highlight */\n     public static final String HIGHLIGHT = \"hl\";\n     /** fields to highlight */\n     public static final String HIGHLIGHT_FIELDS = \"hl.fl\";\n     /** maximum highlight fragments to return */\n     public static final String HIGHLIGHT_SNIPPETS = \"hl.snippets\";\n     /** override default highlight fragsize */\n     public static final String HIGHLIGHT_FRAGSIZE = \"hl.fragsize\";\n     /** override default pre highlight */\n     public static final String HIGHLIGHT_SIMPLE_PRE = \"hl.simple.pre\";\n     /** override default post highlight */\n     public static final String HIGHLIGHT_SIMPLE_POST = \"hl.simple.post\";\n\n\nThis can be used as follwed\n    SolrClient client = new SolrClientImpl( new URL(\"http://localhost:8080/solr/\") );\n    // required\n    query.addHighlightField(\"title\");\n    query.addHighlightField(\"content\");\n    // following is optional\n    query.setHighlightFragSize(100);\n    query.setHighlightSnippets(3);\n    query.setHighlightSurroundingTags(\"<i>\",\"</i>\");\n\n\nI think that is all. If I forgot something, post it here. One remark. The setHighlightSurroundingTags method can only take simple tags,\nno tags containing quotes or such.\n\nGreetz. "
        },
        {
            "author": "Chen Lei",
            "id": "comment-12487196",
            "date": "2007-04-06T08:55:13+0000",
            "content": "org.apache.solr.client.impl.ResultsParser.java\norg.apache.solr.client.QueryFacet.java (a copy of FieldFacet)\norg.apache.solr.client.QueryResults.java\norg.apache.solr.client.SolrQuery.java\n\nI changed these four files, add some functions for facet query.\nAdd a facet query is similar as field query.\nExisting methods, new methods:\n  SolrQuery.addFacetField()        SolrQuery.addFacetQuery\n  QueryResults.getFacets()         QueryResults.getQueryFacets()\n  QueryResults.getLimitingFacets   QueryResults.getLimitingFacetsForQueryFacet()\n\n\nSome code here..\n  SolrQuery query = new SolrQuery();\n  // ...\n  query.addFacetQuery(\"cat:music card\");\n  query.addFacetQuery(\"video\");\n\n  SolrClient client = ..\n  // ...\n  QueryResults results = client.query( query );\n\n  for (QueryFacet qf : results.getQueryFacets()) {\n      System.out.println(\"query facet: \"+qf.getName() +\" \"+qf.getValueCount());\n          for (org.apache.solr.client.QueryFacet.Count c :  qf.getValues() ) \n{\n          System.out.println(\"  \"+c.getName()+\": \"+c.getCount());\n      }\n  }\n\n "
        },
        {
            "author": "carlos orrego",
            "id": "comment-12488702",
            "date": "2007-04-13T16:00:45+0000",
            "content": "I am using the client library nad have no issues with adding docs to solr. But when i want to make a simple test query i keep getting this error:\n\norg.apache.solr.client.exception.SolrClientException: unknown type: status\n\nSolr returns and xml with a statis tag in the header wich the client does not know how to handle?\n\nam i right? is this the case? "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12490117",
            "date": "2007-04-19T17:17:22+0000",
            "content": "is there an updated package or anyone working on such a thing at the moment?  the solr-client.zip at the top of the thread works like a charm but seems to be very outdated and the bits on the svn://solrstuff.org site have some rather serious bugs.  \n\ni'm happy to do all the leg work of packaging things, fixing bugs, submitting a patch, etc but i wanted to make sure i'm not about to walk right behind someone else.  also, if anyone has any ideas for the best starting point i'm happy to take suggestions.  \n\n\n\twill\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12490121",
            "date": "2007-04-19T17:40:51+0000",
            "content": "For now, I'd still recommend using solr-client.zip\n\nThe code on solrstuff.org is in the middle of a big overhaul (hopefully stable by the end of this week) \u2013 but it will rely on some changes to solr that are not likely to make it into solr-1.2.    \n\nI'll post another message here when that settles down.\n\nthanks\nryan\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12492608",
            "date": "2007-04-29T23:54:29+0000",
            "content": "For anyone interested, I've finished a major overhaul of the client at:\n  http://solrstuff.org/svn/solrj/\nIt is a dramatically different architecture then before.  Essentially it reads each response into a NamedList and each response type knows what the contents mean.\n\nAfter solr1.2, I'll work on getting something like this into the official apache distribution.\n\nThis client source duplicates many classes that will eventually be extracted into an independent solr-utils.jar (SOLR-135).  Everything that is not in \"client\"\nhttp://solrstuff.org/svn/solrj/src/org/apache/solr/ will be in this .jar\n\nI am using this in production code \u2013 but i don't suggest that it is production ready just yet.  \n "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12492700",
            "date": "2007-04-30T16:12:03+0000",
            "content": "the trunk version at http://solrstuff.org/svn/solrj/  seems to be missing a dependency and a copy of SolrParams.  ant returns....\n\ncompile:\n    [javac] Compiling 40 source files to C:\\data\\workspace\\solrj\\bin\n    [javac] C:\\data\\workspace\\solrj\\src\\org\\apache\\solr\\client\\solrj\\impl\\XMLResponseParser.java:10: package javax.xml.stream does not exist\n    [javac] import javax.xml.stream.XMLInputFactory;\n\n....\n\n[javac] C:\\data\\workspace\\solrj\\src\\org\\apache\\solr\\client\\solrj\\query\\SolrQuery.java:10: cannot find symbol\n    [javac] symbol  : class SolrParams\n    [javac] location: package org.apache.solr.util\n    [javac] import org.apache.solr.util.SolrParams; "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12492716",
            "date": "2007-04-30T16:47:58+0000",
            "content": "aaah, It was compiling with java 6.\n\nI just added stax-api-1.0.jar and cleaned up some imports, it should run on java 5 now. "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12492902",
            "date": "2007-05-01T16:17:58+0000",
            "content": "the new api's work great, thanks!  what's the plan for this going forward?  id' like to start doing some work on this as it's rather critical to my current project and an are i've dealt with a lot in the past.  assuming it's not getting dumped into org.apache.* land any time soon are you accepting patches to this code?  if so i have some modifications to the api's that i think will make them easier to use (such as a method to set FacetParams on SolrQuery) and i'll even flush out the SolrServerTest for fun.  \n\nalso, i noticed that all the methods on SolrServer throw undeclared SolrExceptions which extends RuntimeException when things so south.  should those throw some other sort of non-ignorable exception like a new SolrServerException?  while it made coding/compiling easier to leave out all the usually required try's and catches it made running/debugging much less enjoyable.\n\n\n\twill\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12493006",
            "date": "2007-05-02T03:57:04+0000",
            "content": "great!  Any feedback/help would be wonderful.\n\nI hope it is not too long before this can enter solr trunk, but it will first need two solr1.3 additions SOLR-193 and SOLR-135, until then I can apply any patches necessary.\n\nRe RuntimeException vs SolrServerException, I'm not sure the best choice.  Earlier versions had a client exception and server exception, but in practice those got lumped together (in my case) anyway.  I ended up just using SolrException because it is there. "
        },
        {
            "author": "Ben Incani",
            "id": "comment-12499730",
            "date": "2007-05-29T08:56:25+0000",
            "content": "The SolrClientImpl does not implement the following optional attributes for \"add\" as documented in http://wiki.apache.org/solr/UpdateXmlMessages\n\n  allowDups = \"true\" | \"false\" \u2014 default is \"false\" \n  overwritePending = \"true\" | \"false\" \u2014 default is negation of allowDups \n  overwriteCommitted = \"true\"|\"false\" \u2014 default is negation of allowDups \n\nAttached is patch for SolrClientImpl.java which implements allowDups.\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\tSolrClientImpl.java.patch ***\n48a49,55\n> \t\n> \t/**\n> \t * Optional attributes for \"add\"\n> \t */\n> \tprotected boolean allowDups;\n> \tprotected boolean overwritePending;    // TODO: not implemented\n> \tprotected boolean overwriteCommitted;  // TODO: not implemented\n86a94,97\n> \tpublic SolrClientImpl(URL baseURL) throws Exception \n{\n> \t   this(baseURL, false);\n>     }\n> \n91a103\n> \t * @param allowDups allow duplicates to be added to the index\n95c107\n< \tpublic SolrClientImpl(URL baseURL) throws Exception \n\u2014\n> \tpublic SolrClientImpl(URL baseURL, boolean allowDups) throws Exception \n103c115\n< \t\t\n\u2014\n>         this.allowDups = allowDups;\n243c255,260\n< \t\t\t\twriter.write(\"<add>\");\n\u2014\n> \t\t\t    StringBuffer strAdd = new StringBuffer(\"<add \");\n> \t\t\t    if (allowDups == true) \n{\n> \t\t\t         strAdd.append(\"allowDups=\\\"true\\\"\");\n> \t\t\t    }\n> \t\t\t    strAdd.append(\">\");\n> \t\t\t\twriter.write(strAdd.toString());\n\t\t\tSolrClientImpl.java.patch ***\n\t\t\n\t\t\n\t\n\t\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12499831",
            "date": "2007-05-29T16:14:26+0000",
            "content": "Hi Ben-\n\nThanks for the patch.  Will Johnson added the options to the java client on:\nhttp://solrstuff.org/svn/solrj/\n\nThis implementation is now quite stable (thanks to lots of help from Will!) and I hope will be integrated into solr trunk shortly after 1.2 (this week?!)\n\nAbout the   allowDups/overwritePending/overwriteCommited options... what part of them do you use?  In SOLR-60, there is talk of replacing the three options with a (simpler) overwrite=true/false \u2013 maybe we should change the client api to:\n\n  UpdateResponse add( SolrDocument doc, boolean overwrite ) throws SolrServerException;\n\nIn anticipation of this change? "
        },
        {
            "author": "Walter Ferrara",
            "id": "comment-12502470",
            "date": "2007-06-07T18:49:12+0000",
            "content": "[I'm new to solrj, so everything I'm writing can be useless]\n\nWhile trying to execute range query, using this query:\nText:Hello +Date:[1895011 TO 18971128] \n[jdk 1.6/netbeans 5.5/solr1.2/solrj revision 125]\n\nI kept getting IllegalArgumentException:\n[...]\nCaused by: java.lang.IllegalArgumentException: Invalid uri 'http://localhost:8983/solr/select?q=Text:Hello+%2BDate:[1895011+TO+18971128]&fl=ID,Date,score&rows=800&wt=xml&version=2.2': Invalid query\n        at org.apache.commons.httpclient.HttpMethodBase.<init>(HttpMethodBase.java:222)\n        at org.apache.commons.httpclient.methods.GetMethod.<init>(GetMethod.java:89)\n        at org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.request(CommonsHttpSolrServer.java:108)\n[...]\nIt seems related to un-escaped '[' and ']'.\n\nthe solution was to patch StrUtils.java, in order to encode square brackets. \nIf it is of any use, I'm attaching the patch\n\u2013 Walter\n\n====\nStrUtils.java.patch\n\n204,207d203\n<           case '[': dest.append(\"%5B\"); break; // to allow range query, 20070706 (w)\n<           case ']': dest.append(\"%5D\"); break;\n<           case '\n{': dest.append(\"%7B\"); break;\n<           case '}\n': dest.append(\"%7D\"); break; "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12502489",
            "date": "2007-06-07T19:31:28+0000",
            "content": "Hi Walter-\n\nI just updated http://solrstuff.org/svn/solrj/  to use:\n\n  URLEncoder.encode( val, \"UTF-8\" )\n\nrather then:\n\n  StrUtils.partialURLEncodeVal( val )\n\nGive it a try and let me know if you have problems...   (i have done date range queries successfully with resin/jetty, but netbeans must be different!) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12502852",
            "date": "2007-06-08T15:53:15+0000",
            "content": "FYI partialURLEncodeVal was meant for readable, yet unambiguous logging... hence a minimum of escaping is done (but enough to easily paste into a browser and let it do the rest of the escaping when you sumbit). "
        },
        {
            "author": "Walter Ferrara",
            "id": "comment-12502872",
            "date": "2007-06-08T16:31:36+0000",
            "content": "Latest rev works perfectly thanks. \nI've been making some time test with this client (only searching), and overall results show high times: this maybe due to my minimal knowledge on solr, but solr seems fast, is data-receiving/parsing on client that seems slow. Even when solr report 0ms (due to cache it I presume) it still take 200ms to get results (QueryResponse .getElapsedTime()). I'm using this code: \n\nSolrQuery query = new SolrQuery(queryString);\nCommonsHttpSolrServer server = new CommonsHttpSolrServer(\"http://localhost:8983/solr/\");\nQueryResponse response = server.query(query);\nSolrDocumentList list = response.getResults();\n\nThe slowdown seems to be in client.executeMethod(method) (CommonsHttpSolrServer) Any way to speed up (assuming I'm not totally wrong on how to use this client...)? Reusing same http connection for multiple queries? Playing with MultiThreadedHttpConnectionManager helped a bit, but doesn't seems the solution "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12502885",
            "date": "2007-06-08T17:09:15+0000",
            "content": "I don't know if you are on solr-dev, Yonik noted that the QTime does not include the time to write the response, only the query time.  To get an accurate number for how long the whole query takes, check your app server logs\nhttp://www.nabble.com/Re%3A-A-simple-Java-client-for-updating-and-searching-tf3890950.html\n\nTo get a quick response from solr, try rows=0 or a 404 path.  (Of course, the speed will depend on you network connection speed between client-server) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12504912",
            "date": "2007-06-14T20:52:26+0000",
            "content": "\nI'm integrating SOLR-20 with trunk now...\n\nThe basic stuff is no problem.  I'm struggling with the best way to:\n\n\tincluded shared libraries (commons-io, etc)\n\tstructure build.xml\n\tadd tests that launch jetty\n\tpackage solrj (and dependencies)\n\n\n\nI think the best approach is to commit my best effort and then have you \nall review/fix/modify.  Building a useful patch is unrealistic.\n\nryan\n "
        },
        {
            "author": "Michael Young",
            "id": "comment-12505304",
            "date": "2007-06-15T16:55:36+0000",
            "content": "We are planning to replace our custom Lucene implementation with Solr in the next release of Liferay. This Java client would be extremely useful to us and we would like to see it in the next stable release. When do you anticipate this, or at least an alpha version? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12505313",
            "date": "2007-06-15T17:12:05+0000",
            "content": "solr 1.2 was released ~1 week ago so the next official stable release is at least a few months out.\n\nThe solrj client is quite stable (I won't say that too strongly until more people are using it) and will be included in solr nightly builds.  While I don't recommend using the solr server nightly builds, the client should be ok. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12505314",
            "date": "2007-06-15T17:13:08+0000",
            "content": "Added to trunk...  any new problems should get their own issue. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12579129",
            "date": "2008-03-16T03:23:51+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked \"Resolved\" and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.3 as of today 2008-03-15\n\n\n\nThe Fix Version for all 29 issues found was set to 1.3, email notification was suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this (hopefully) unique string: batch20070315hossman1\n "
        }
    ]
}