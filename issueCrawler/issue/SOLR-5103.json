{
    "id": "SOLR-5103",
    "title": "Plugin Improvements",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "7.0"
        ],
        "components": [
            "Plugin system"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "We should make it easier to add plugins by defining a plugin package, ala a Hadoop Job jar, which is a self--contained archive of a plugin that can be easily installed (even from the UI!) and configured programmatically.\n\nThis serves as an umbrella issue, see sub tasks and linked issues.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-13726362",
            "date": "2013-08-01T11:36:37+0000",
            "content": "https://code.google.com/p/google-guice/wiki/Multibindings has some baseline good ideas in it, see SOLR-5091 as well for how Guice gets brought in. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13728138",
            "date": "2013-08-02T21:23:16+0000",
            "content": "Should be noted that we would want classloader isolation for this packaging. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13728149",
            "date": "2013-08-02T21:33:04+0000",
            "content": "+1 for this!  Keep the configuration w/ the plugin and don't require any central place to \"wire it up\".\n\nShould be noted that we would want classloader isolation for this packaging.\n\nAny downsides to that?\nAlso, any reason it can't be in 4x (provided it's done in time?) "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13728840",
            "date": "2013-08-04T10:11:11+0000",
            "content": "I don't see any downside to it, but the classloader stuff can get real hairy.\n\nIt could be for 4, but I don't want to worry about backporting just yet. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13729137",
            "date": "2013-08-05T06:28:51+0000",
            "content": "does it have  a custom format for the plugin jar? some kind of a meta-data along with the jar? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13729372",
            "date": "2013-08-05T10:38:32+0000",
            "content": "Tying this in w/ Guice, I think we can get away w/o any meta-data, but instead the plugin will need to provide an AbstractModule (maybe even not) and then they can configure the plugin via an API, or it can also default. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13729403",
            "date": "2013-08-05T11:24:31+0000",
            "content": "In any plugin loading , we may just need a Plugin class name and probably that is it\n\nIf the plugin has dependency jars, do you expect it to be a part of the jar itself? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13729404",
            "date": "2013-08-05T11:26:52+0000",
            "content": "If the plugin has dependency jars, do you expect it to be a part of the jar itself?\n\nYes, I'm thinking something along the lines of Hadoop Job Jar. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13729412",
            "date": "2013-08-05T11:31:57+0000",
            "content": "Theoretically you can put references to additional JARs, that are needed for running, into the META-INF/MANIFEST.MF file as classpath. I have not tried this, but it works e.g. for java -jar something.jar. If something.jar has additional JARs in its manifest, those are added to classpath. See http://docs.oracle.com/javase/tutorial/deployment/jar/downman.html "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13729905",
            "date": "2013-08-05T20:40:17+0000",
            "content": "a self--contained archive of a plugin that can be easily installed (even from the UI!) and configured programmatically.\n\n+1 for this! Keep the configuration w/ the plugin and don't require any central place to \"wire it up\".\n\ncan someone give me a practical/hypothetical example of what this would look like to someone setting up a solr instance?\n\nFor all the examples i can think of, this doens't really make sens to me \u2013 specifically: all of the existing plugins you can find in \"solr/contrib\" ... are we expecting users to JAR up their own \"copy\" of DIH with it's config inside of it's jar? are we expecting people who want to use the langid update processor to re-jar it with some bit of config snippet that tells it what fields to populate and what langauge to look for? ... and then what? they drop that jar into some directory, and it still does nothing until they programatically use some API to say which of their (possibly may) update processor chains they want it to be a part of, and where in the chain it should execute?\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13729932",
            "date": "2013-08-05T21:01:06+0000",
            "content": "can someone give me a practical/hypothetical example of what this would look like to someone setting up a solr instance?\n\nSmall stuff shouldn't need any configuration... for instance a custom QParser should just be able to work if it's in the classpath.\n\nare we expecting users to JAR up their own \"copy\" of DIH with it's config inside of it's jar?\n\nI hope not.  That would seem like a step backwards in usability. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13729972",
            "date": "2013-08-05T21:25:24+0000",
            "content": "Small stuff shouldn't need any configuration... for instance a custom QParser should just be able to work if it's in the classpath.\n\nOk, so something like a QParserPlugin could optionally register itself using a \"default\" name hardcoded in it's code (similar to how SolrCore auto-wires the \"default\" QParsers that come with solr-core out of hte box) ... but how would that work if multiple plugins try to use the same name?  (in solr-core we can ensure that doesn't happen, and we don't register something with the same name as a qparser explicitly registered via users configuration) Not to mention you'd still need to support a method of explicitly registering QParserPlugins since it might support init params that you want to specify (none of hte out of the box QParsers do, but it's possible, and we shouldn't take that customization away)\n\nQParsers really seem like the \"special case\" not the common case as far as plugins go and this sort of hypothetical \"automatic loading & registration\" ... FieldTypes, Analysis factories, search components, request handlers, ... these are all things i'm hard pressed to imagine being useul w/o some sort of explicit \"this is how i want to use it\" type information from the person admining the solr instance.\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13730663",
            "date": "2013-08-06T11:27:32+0000",
            "content": "Hoss,\n\nA few of my thoughts on it:\n\n\tI don't think the config necessarily needs to be in the plugin.  Part of the goal here is to be able to easily add a plugin and then easily configure it and manage it (from the UI?).\n\tPlugins should be self-contained and (ideally) class loader isolated\n\tYou shouldn't necessarily have to restart Solr in order to add a plugin\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13730846",
            "date": "2013-08-06T15:00:28+0000",
            "content": "I think we would still need a configuration option that does not involve Java. Other than that, I don't really see too many issues. As far as names, it could possibly default to the name of the plugin jar or something else and first one wins, second one fails. We could also namespace, kind of how you see with eclipse. Honestly though, nothing sounds much better than a simple config file with the jar, same name or whatever, that has the plugin name or url. Probably that's the default minimal setup - even if you can delete that file and run with some default names or whatever for plugins that don't require any config.\n\nI think the path is obviously right - you see it used plenty elsewhere, and it resonates with me. But I think Hoss is right in that the common case will still need configuration. I don't see how the two points argue with each other though.\n\nWe will need to be able to configure with a user friendly format - most plugins will have that - if not just to show the user what can be configured. There is no reason we have to require it though. Some plugin might simply be there to insert some custom code on startup. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14193973",
            "date": "2014-11-02T19:30:47+0000",
            "content": "Also see from mailing list: http://search-lucene.com/m/WwzTb2jQWpl1 "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14222128",
            "date": "2014-11-22T19:32:32+0000",
            "content": "It may be worth considering that plugin may contain more than code. For example, it may contain AdminUI screens, similar to those admin-extra files. Elasticsearch has something like this.\n\nThere might also be some sort of dependency in there to avoid jar rabbits (multiple copies of the same shaded jars). Elasticsarch does NOT seem to have something like this.\n\nOn the positive side, a website to track the plugins and dependencies would make for a very nice Solr demo project and would help the community actually start contributing things as plugins, once the visibility part is solved  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14223096",
            "date": "2014-11-24T16:12:57+0000",
            "content": "We don't yet have a uniform way to manage code+UI . To be honest , all UI is kind of an afterthought in Solr "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14223110",
            "date": "2014-11-24T16:33:33+0000",
            "content": "We don't yet have a uniform way to manage code+UI . To be honest , all UI is kind of an afterthought in Solr\n\nWell, it will continue being an afterthought if you continue not thinking about it. \n\nMay I suggest a thought experiment? Let's imagine we are shipping Solr Javadoc as a plugin. And it will be searchable (e.g. come with pre-built Solr collection). And the HTML itself is - ideally - compressed and is served that way. Now, we can walk through the aspects required to make it work. Maybe they will not all make it into 5, but the pieces that do line up should be on the critical path of making a specific scenario happen.\n\nThe problem with plugins is that they seem easy but the real-life consequences of them get hairy very fast. I think Solr desperately needs plugins, but they need to be a bit more than a class in a jar. There needs to be some sort of management/flow/metadata to avoid fragmentation and user confusion. Does not have to be super-comprehensive in initial setup, just with some advance forethought. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14223627",
            "date": "2014-11-24T22:15:43+0000",
            "content": "There are existing lightweight frameworks out there, such as https://github.com/decebals/pf4j, loading all plugins found in a folder. Looks pretty extensible..\n\nAdding a bin/plugin script for install/uninstall from a repo or github would also be cool. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14223688",
            "date": "2014-11-24T22:42:38+0000",
            "content": "What about something like OSGI? It might be a little heavier but I suspect addresses a bunch of questions that we would be fighting through until Solr 7 otherwise. \n\nAnd there is a corresponding Apache project: http://felix.apache.org/ (and others on top, I think). Which, I am sure, comes with built-in community and tooling support. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14702771",
            "date": "2015-08-19T09:38:15+0000",
            "content": "After we got SOLR-7073, we can now add a single .jar to a collection by uploading it to .system collection. Could we perhaps piggyback on this mechanism for full-blown plugins as well?\n\nI.e. we similarly upload a plugin, e.g. my-cool-responsewriter-plugin.zip to .system. Solr will then automatically inspect the zip, add jars to classpath and register the new responsewriter under its default name.\n\nOn node start, we would iterate over all registered plugins in .system and register them. Perhaps a super generic way to support auto wiring is to allow scripts in the zip root, like config-api-commands.json and schema-api-commands.json, which will be replayed on load. Then a FieldType plugin can e.g. register itself with a fieldType and dynamicField in schema.\n\nThe whole idea of such a zip format would be to encourage creation of 3rd party plugins that can be installed from AdminUI or bin/solr installplugin my-plugin.zip, and perhaps also more modularization of the Solr distro, i.e. our contribs would become plugins and not litter solrconfig.xml with config that is only active if a system property is enabled.\n\nHow cool would it be if you could add e.g. SolrCell to a plain Solr download by typing bin/solr installplugin solrcell, and it would look for http://www.us.apache.org/dist/lucene/solr/_version_/plugins/solrcell.zip. Could also support github sources, i.e. bin/solr installplugin githubuser/plugin-name where plugin-name is a repo with some simple layout rules.\n\nTo aid in user friendliness, solrconfig.xml could even have a new tag to to register expected dependencies:\n\n<dependencies>\n   <plugin name=\"solrcell\" version=\"5.2.1\" />\n   <plugin name=\"cominvent/cool-responsewriter\" version=\">=5.0.0\" />\n</dependencies>\n\n\n...and spit out clear instructions in the logs on how to install those. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14702871",
            "date": "2015-08-19T11:27:16+0000",
            "content": "I fail to see what are you trying to solve here. Please give the problem statement and state the proposed solution. I guess it is worth opening a new ticket "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14702902",
            "date": "2015-08-19T11:56:00+0000",
            "content": "The issue description is quite describing, isn't it? We're on-topic here as far as I can tell:\n\nI think for 5.0, we should make it easier to add plugins by defining a plugin package, ala a Hadoop Job jar, which is a self--contained archive of a plugin that can be easily installed (even from the UI!) and configured programmatically.\nSolr's \"plugins\" today are really just Java classes that happen to implement a certain interface that we have defined as a plugin, and then it is up to the user to get hold of the plugin from <somewhere>, find a way to place it on the classpath, register the full class name into appropriate config file (varies depending on what the plugin does), restart Solr and then start using it.\n\nThis JIRA is trying to define a broader pluging definition, where the Java class is just part of it all, where dependency jars and configuration could be packaged with the plugin, where the whole fetch-install-configure complexity is hidden and can be done by the click of a GUI button or running of one shell command.\n\nBesides - how many Solr \"plugins\" do you know of today in \"the wild\"? How do you find them? Most are just patches in JIRA, others have their own installers, yet others include some description of how to copy thing into various places, editing some XML files etc. The 3rd party \"market\" for cool new features will probably take off once we can offer such a simplified plugin architecture. And we won't force anyone, you can still plug classes in the manual way if you like. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14702925",
            "date": "2015-08-19T12:16:45+0000",
            "content": "I guess I'm getting what you are trying to say\n\nNow we need to follow the following steps to register a plugin from a jar (using SOLR-7073)\n\n\n\tupload the jar to .system collection\n\tadd the jar to collection classpath using the add-runtime-lib command\n\tadd the component using the add-<component-name> command\n\n\n\nSo you are trying to eliminate step #3 here. Is that right ? "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14702947",
            "date": "2015-08-19T12:36:20+0000",
            "content": "I think that's a little more to a plugin than upload mechanics. There is a need for meta-data convention, dependency handling, versioning, etc. Supplementary UI.\n\nSo, making upload mechanics could be a good first step, but the bigger picture needs to be kept in mind as well.\n\nBTW, Velocity loader apparently can load pages from the classpath. So, it might be possible to bundle pages with the plugin somehow already, if the classpath is setup right. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14702953",
            "date": "2015-08-19T12:44:41+0000",
            "content": "We don't yet have a concept of a plugin offering a UI .  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14702955",
            "date": "2015-08-19T12:45:43+0000",
            "content": "So you are trying to eliminate step #3 here. Is that right ?\nNot primarily. Your list is over simplified. Today:\n\n\tRealize that there is a plugin for what you want to do\n\tLocate and download that plugin\n\tRead the docs and find and download any dependencies of the plugin\n\t\n\t\tExample: dist/solr-cell-5.0.0.jar is the plugin, and you also have 34 dependency jars from contrib/lib/\n\t\n\t\n\tFor each jar required (35 in total):\n\t\n\t\t{{curl -X POST -H 'Content-Type: application/octet-stream' --data-binary @filename.jar http://localhost:8983/solr/.system/blob/name }}\n\t\n\t\n\tFor each collection in the system (that needs the plugin):\n\t\n\t\tFor each jar that belongs to the \"plugin\":\n\t\t\n\t\t\tPut each jar on the \"classpath\" for the collection\n\t\t\t\ncurl http://localhost:8983/solr/collection1/config -H 'Content-type:application/json'  -d '{\n\"add-runtimelib\" : {\"name\": \"jarname\" , \"version\":2 },\n\"update-runtimelib\" :{\"name\": \"jarname\" ,\"version\":3},\n\"delete-runtimelib\" :\"jarname\" \n}' \n\n\n\t\t\tRegister the plugin into config or schema or zookeeper or solr.xml depending on the type, e.g.\n\t\t\t\n{\"add-searchcomponent\":\n   \"name\":\"elevator\",\n   \"class\":\"QueryElevationComponent\",\n   \"queryFieldType\":\"string\",\n   \"config-file\":\"elevate.xml\"\n}\n\n\n\t\t\n\t\t\n\t\n\t\n\n\n\nNot to mention when you want to upgrade the plugin to a newer version, or uninstall it..\n\nNow compare this to a click in the Admin UI or:\n\n\nbin/solr installplugin solrcell 5.2.1\nbin/solr removeplugin solrcell\nbin/solr installplugin solrcell 5.3.0\n\n "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14702972",
            "date": "2015-08-19T13:07:12+0000",
            "content": "Actually, wt=velocity&v.template.x allow to serve a velocity template around the search results. Unless broken by recent changes, etc. Erik Hatcher may be able to add details. \n\nAnd, if admin-extra was loaded from classpath, there might be a way to wire it in into UI automatically.\n\nIt may not be pretty on the first round, but at least something like /browse might be more possible than expected. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14702985",
            "date": "2015-08-19T13:11:07+0000",
            "content": "I think that's a little more to a plugin than upload mechanics. There is a need for meta-data convention, dependency handling, versioning, etc. Supplementary UI.\n\nTotally agree. But we need to start in one end. Perhaps defining the minimum zip/jar layout for what to constitute a plugin. What if we choose our own file ending, e.g. .solrplugin which is really just a zip file. Then a possible layout could be\n\nmy-plugin.solrplugin\n/solrplugin.properties -- defining e.g. name, version, dependencies etc\n/lib/  (jars to be added to classpath)\n/config/config-api-commands.json  (a series of commands to be run towards config API)\n/config/schema-api-commands.json  (a series of commands to be run towards config API)\n\n\n\nThen, over time, we can evolve the spec and add support for pluggable UI etc.\n\nThere are tons of questions to address too\n\n\tSize limitation in blob store?\n\tShould Solr unpack all libs from the .solrplugin pkg and add them individually to blob store, or write a classloader that adds everything directly from the zip?\n\tWhat about version clash of dependencies - should not jeopardize the rest of the system\n\tShould a plugin be allowed to depend on another plugin, i.e. fail install unless the other plugin is installed?\n\tShould all plugins be system-level, and then require a new config-API /collection/config \"install-plugin\" command to enable it for each collection?\n\tWhat about system-level plugins, such as Authentication and Authorization plugins? Should security.json be auto updated when installing an auth plugin, or only if it does not exist already?\n\tThere should be a way to install plugins without registering the component with APIs, e.g. bin/solr installplugin solrcell -noregister\n\tUninstall of a plugin - it should also be able to unregister things from config / schema, for all collections where it is enabled (scary)\n\n\n\nFirst step is to see if there is enough committer interest in going down this path, then split things up into many smaller tasks that can be handled separately. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14702990",
            "date": "2015-08-19T13:14:56+0000",
            "content": "My position is still that madness lies that way if we try to reinvent plugin management from scratch and that 3rd party solution may make better sense for that. Even if that solution is not perfect.\n\nBut, on the other hand, I don't know internals of Solr well enough to know whether there is enough extensibility built-in to allow that. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14703009",
            "date": "2015-08-19T13:27:08+0000",
            "content": "If someone wants to offer a plugin with dependency jars , please make a jar with all the dependencies included. Once you make that assumption everything else becomes simpler.\n\nThen it is still possible to write a script which runs as follows\n\n\n/bin/solr install-plugin xyz.jar -conf xyz.json -c collection1\n\n\n\nor we can package the xyz.jar in such a way that the META-INF contains plugin.json and the command can be simplified to\n\n/bin/solr install-plugin xyz.jar -c collection1\n\n\n\nSize limitation in blob store?\n\nas of now it is set to 5MB by default . However the user can increase it to any number with a command "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14703017",
            "date": "2015-08-19T13:33:21+0000",
            "content": "If someone wants to offer a plugin with dependency jars , please make a jar with all the dependencies included.\nWell that is for us to dictate, isn't it? Who says the plugin format must conform to the JAR specs? Is it technically problematic to add all classes from multiple JARs from within a ZIP to a classloader? If yes, the user-facing plugin format could still be a zip with multiple jars in a lib folder, and our plugin installer code handles merging all jars together into one jar plugin-xyz-merged.jar which is the one being registered with the classloader? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14703047",
            "date": "2015-08-19T13:54:10+0000",
            "content": "Well that is for us to dictate, isn't it? Who says the plugin format must conform to the JAR specs?\n\nIt's OK for the plugin format not conform to jar specs. The payload could be a zip file with multiple jars. But, is it a big deal to merge multiple jars. It solves a problem of name collisions. What if the same FQN of a class is found in two jars , which one to load? \n\nand our plugin installer code handles merging all jars together into one jar plugin-xyz-merged.jar \n\nPlease don't . The plugin installer should do as little magic as possible. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14703050",
            "date": "2015-08-19T13:55:48+0000",
            "content": "If someone wants to offer a plugin with dependency jars , please make a jar with all the dependencies included. Once you make that assumption everything else becomes simpler.\n\nI worry about this idea a little bit.  Maybe I don't need to be worried.  What happens if a plugin project uses one of the same dependent jars as Solr, but packages a wildly different version than the version we package?  Are there any situations where that might cause a larger problem than using a little more memory? "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14703072",
            "date": "2015-08-19T14:12:04+0000",
            "content": "Only the classloader leakage hell! :=(\n\nThere is no standard mechanism for inlining the dependencies, though there are a couple of different approaches, all doing weird and less than wonderful things with classloader mechanisms. Something like http://maven.apache.org/plugins/maven-shade-plugin/ and http://docs.spring.io/spring-boot/docs/1.3.0.BUILD-SNAPSHOT/reference/htmlsingle/#executable-jar\n\nOr, of course, OSGI http://www.javaworld.com/article/2075836/description-of-osgi-layer.html "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14703087",
            "date": "2015-08-19T14:23:53+0000",
            "content": "Actually, wt=velocity&v.template.x allow to serve a velocity template around the search results. \n\n\n\nAnd, if admin-extra was loaded from classpath, there might be a way to wire it in into UI automatically. It may not be pretty on the first round, but at least something like /browse might be more possible than expected.\n\nVrW has a VelocitySolrResourceLoader which pulls \"templates\" (anything textual would work), but it is constrained to only look under a `velocity/` sub-tree from the resource loader root. \n\nI'm not quite getting what you're getting at here though, but one can #parse another velocity template or #include anything textual with no parsing.  And easily wrap a response with a layout to get headers/footers, etc. "
        },
        {
            "author": "Upayavira",
            "id": "comment-14703121",
            "date": "2015-08-19T14:45:20+0000",
            "content": "All the above seems to be describing OSGi, for which we have the Apache Felix project here at Apache. If we are considering \"plugins\" that can hold conflicting dependencies, that does seem the obvious way to go. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14704464",
            "date": "2015-08-20T08:00:26+0000",
            "content": "What happens if a plugin project uses one of the same dependent jars as Solr, but packages a wildly different version than the version we package?\n\nI think we don't need to re-invent OSGI to get a better plugin regime for Solr. We can document simple requirements for developers to follow.\n\n\tNever include libraries or classes that is already part of core Lucene/Solr\n\tIn your solrplugin.properties, list the Solr version(s) that the plugin is tested with (and our tooling could require a --force option to disregard this and install anyway)\n\tetc\n\n\n\nIn the first version we can then simply add all jars in the plugin's /lib folder to classloader. Then if a future version of Solr causes trouble for an older plugin, the plugin maintainer must release a compatible update. When it comes to clashes between different 3rd party plugins we can tackle that with more advanced measures when it happens, or plugin developers could treat such cases as bugs and provide a fix themselves. For now let's keep it simple. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15882518",
            "date": "2017-02-24T11:46:14+0000",
            "content": "I looked around a bit and saw that PF4J (https://github.com/decebals/pf4j) actually has been maintained and improved the last few years. Will probably try to do a POC at some point to see how well it fits with our needs. It even has pluggable UpdateManager support which could let us define e.g. Apache's Dist site as a plugin repository, and local disk as another one. That could be the piece we're looking for to be able to strip solr core download to a minimum and support e.g. bin/solr install velocity langid, or tell the installer to install it install_solr_service.sh solr-6.4.1.tgz -plugins velocity,langid. We could then have a new tag in solrconfig <plugins><plugin>velocity</plugin><plugin>langid</plugin></plugins> which would list the required dependencies and either refuse to start or trigger install. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-16009547",
            "date": "2017-05-13T23:17:56+0000",
            "content": "Should we close this ticket? We already have a plugin system in solr. It needs some polish and we should focus our efforts there "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16009817",
            "date": "2017-05-14T18:47:37+0000",
            "content": "I'll use this as an umbrella and close it when sub-tasks are resolved. "
        }
    ]
}