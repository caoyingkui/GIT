{
    "id": "LUCENE-7069",
    "title": "Add LatLonPoint.nearest to find closest indexed point to a given query point",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "KD trees (used by Lucene's new dimensional points) excel at finding \"nearest neighbors\" to a given query point ... I think we should add this to Lucene's sandbox as:\n\n\n  public static Document nearest(IndexReader r, String field, double lat, double lon) throws IOException\n\n\n\nI only implemented the 1 nearest neighbor for starters ... I think we can easily generalize this in the future to K nearest.\n\nIt could also be generalized to more than 2 dimensions, but for now I'm making the class package private in sandbox for just the geo2d (lat/lon) use case.\n\nI don't think this should go into 6.0.0, but should go into 6.1: it's a new feature, and we need to wrap up and ship 6.0.0 already",
    "attachments": {
        "LUCENE-7069.patch": "https://issues.apache.org/jira/secure/attachment/12791666/LUCENE-7069.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15182123",
            "author": "Michael McCandless",
            "date": "2016-03-06T11:49:34+0000",
            "content": "Initial patch, but it fails its randomized test for some seeds.  It's an interesting failure: it happens when the query point is fully outside the shrink wrap bounding box of all indexed points ... I need to mull how to cleanly fix that. "
        },
        {
            "id": "comment-15182175",
            "author": "Michael McCandless",
            "date": "2016-03-06T14:17:43+0000",
            "content": "Here's another iteration, fixing the \"global shrink wrap\" bug in a simplistic yet effective way so the test now passes beasting \n\nHowever I realized there is a nasty adversary across segments ... if the first segment indexed only points really far away from the query point, and then the next segment has tons of points near the query point ... I'll work out a fix ... "
        },
        {
            "id": "comment-15240873",
            "author": "Michael McCandless",
            "date": "2016-04-14T09:43:18+0000",
            "content": "Here's another patch ... I think it's nearly ready.\n\nI added \"nearest neighbor\" to the luceneutil London, UK geo benchmark, and getting top 10 nearest hits from the center of each of the 225 boxes that benchmark tests is extremely fast ... less than 0.5 msec for each call ... KD trees are very good for this \n\nThis adds LatLonPoint.nearest, and it now takes an int topN (vs. single nearest point in previous patches).\n\nI think it solves the adversary issues of the previous patches, at least the ones that are solvable.  Some are not!  Imagine the index only contains many points indexed from a circle, and then you ask for nearest from its center ... no matter your algorithm, that will amount to a linear scan.\n\nThere's one wrinkle though: the search works directly with BKDReader, because it's a best first search across all segments, picking which cell (across all segments) is the most \"promising\" to descend into next.  This means it requires that you use Lucene60PointsFormat (the default codec), and it gets the underlying BKDReader from that.  I think making this work only through the codec APIs is ... tricky.\n\nThere are further optimizations we could do like using haversinSortKey, or maybe fixing the approxBestDistance to be a true best distance (I need heavy geo math help for that!), and using Lucene's priority queue not the JDK's, but these all can come later. "
        },
        {
            "id": "comment-15240984",
            "author": "Robert Muir",
            "date": "2016-04-14T11:12:54+0000",
            "content": "Do we really need NearestHit? I dont think we should add this class.\n\nWe created the FieldDoc nightmare, we should live with it? Distance sort already has to live with its crappiness.\n\nWe should just fix that separately so its less horrible, but i dont think inventing extra classes for different use cases is a better solution? "
        },
        {
            "id": "comment-15240985",
            "author": "Robert Muir",
            "date": "2016-04-14T11:15:58+0000",
            "content": "Otherwise, lets get it in. I just have those concerns about the public part. The rest of it we can improve later.\n\nits the sandbox. "
        },
        {
            "id": "comment-15240991",
            "author": "Robert Muir",
            "date": "2016-04-14T11:22:57+0000",
            "content": "Instead of:\n\n\nNearestHit[] nearest(IndexReader r, String field, double latitude, double longitude, int topN)\n\n\n\nIf we have:\n\nTopDocs nearest(IndexSearcher searcher, String field, double latitude, double longitude, int n)\n\n\n\nThen it can work even if BKD is not present too. We could do a slower sort. I am not sure we should but it makes the api more consistent with others. "
        },
        {
            "id": "comment-15241211",
            "author": "Michael McCandless",
            "date": "2016-04-14T14:10:14+0000",
            "content": "Good ideas Robert Muir, here's a new patch cutting over to TopFieldDocs. "
        },
        {
            "id": "comment-15241218",
            "author": "Robert Muir",
            "date": "2016-04-14T14:14:09+0000",
            "content": "Thanks for fixing the api!\n\nOne nit, i did suggest int n for a reason, that is to be consistent with IndexSearcher.search(). The patch currently has topN. I see no reason why they should be different  Parameter names are important esp when there are no @param to explain them (this can be fixed separately, lets just get the thing in). "
        },
        {
            "id": "comment-15241228",
            "author": "Michael McCandless",
            "date": "2016-04-14T14:17:30+0000",
            "content": "Woops sorry I agree we should name the params consistently ... I'll change to n before pushing. "
        },
        {
            "id": "comment-15241235",
            "author": "David Smiley",
            "date": "2016-04-14T14:21:30+0000",
            "content": "This is awesome!  Nice work Mike.  I very much like Rob's suggestion of using TopDocs instead of creating NearestHit.\n\nIt would be even better, a future issue, to further filter the topN selection by those docs in a Bits doc set.  Of course that complicates the task quite a bit but it's much more useful to use cases that already have other filters in-play.  I've got some code for that against an RPT index somewhere. "
        },
        {
            "id": "comment-15241239",
            "author": "Robert Muir",
            "date": "2016-04-14T14:23:50+0000",
            "content": "\nIt would be even better, a future issue, to further filter the topN selection by those docs in a Bits doc set. Of course that complicates the task quite a bit but it's much more useful to use cases that already have other filters in-play. I've got some code for that against an RPT index somewhere.\n\nI don't think its about complication: i think this would not scale? This easily degrades to linear scan. "
        },
        {
            "id": "comment-15241243",
            "author": "Robert Muir",
            "date": "2016-04-14T14:25:21+0000",
            "content": "And if you really want to have complex logic like filters, you can always just do a search and sort by distance.  "
        },
        {
            "id": "comment-15241291",
            "author": "David Smiley",
            "date": "2016-04-14T14:43:11+0000",
            "content": "If the Bits (doc set) filter is sparsely populated, then I agree \u2013 you're better off just doing a typical sort.  If I recall (it's been years now), my implementation did that.  But if it's heavily populated, then I picked a fairly large grid cell (possibly including some adjacent cells if the query point was close to an edge)  and did a distance sort with that rectangle a filter.  If I not only met the topN budget but the furthest distance in that topN was close enough such that, if I inscribed a circle from the query point to that last point, that the circle would be completely within the cells making the filter, then I'm done.  If unlucky, I had to iterate up to larger cells/filters or give up and fall back to a standard distance sort.  I recall this made a world of difference to an app that previously always distance sorted.  To be clear, to the extent that this used the grid cells, it was only as an approximate filter.  the points were always in DocValues and the distance was computed from that. "
        },
        {
            "id": "comment-15241318",
            "author": "ASF subversion and git services",
            "date": "2016-04-14T15:00:03+0000",
            "content": "Commit f6c7fc7a26584c92a81b3a6cbca179ca232808a9 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f6c7fc7 ]\n\nLUCENE-7069: add LatLonPoint.nearest to find N nearest points "
        },
        {
            "id": "comment-15241322",
            "author": "ASF subversion and git services",
            "date": "2016-04-14T15:01:05+0000",
            "content": "Commit 5bbb5e7748f1191d1a507adc7e69bb25178a46dd in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5bbb5e7 ]\n\nLUCENE-7069: add LatLonPoint.nearest to find N nearest points "
        },
        {
            "id": "comment-15241326",
            "author": "Robert Muir",
            "date": "2016-04-14T15:05:17+0000",
            "content": "like i say, worst case linear scan \n\nI just don't think we should add trappy/slow operations when there are still so many traps in basic functionality. And using a distance sort is fine for use cases like that (where unlike deleted docs, filtering is not \"bound\" by merging or some other process, its arbitrary). It is already designed to handle that situation, prevent any trappy/crazy worst-cases, etc. "
        },
        {
            "id": "comment-15241413",
            "author": "ASF subversion and git services",
            "date": "2016-04-14T16:02:46+0000",
            "content": "Commit 5238de937a84c4de387f0036830811cb3b7d734f in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5238de9 ]\n\nLUCENE-7069: woops, approxBestDistance was way too approximate when the point was inside the cell "
        },
        {
            "id": "comment-15241415",
            "author": "ASF subversion and git services",
            "date": "2016-04-14T16:04:03+0000",
            "content": "Commit 41da63eee3c54ff8f1c9de09d4c03ec1ffb83f3f in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=41da63e ]\n\nLUCENE-7069: woops, approxBestDistance was way too approximate when the point was inside the cell "
        },
        {
            "id": "comment-15241481",
            "author": "ASF subversion and git services",
            "date": "2016-04-14T16:51:22+0000",
            "content": "Commit f6c7fc7a26584c92a81b3a6cbca179ca232808a9 in lucene-solr's branch refs/heads/jira/SOLR-8908 from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f6c7fc7 ]\n\nLUCENE-7069: add LatLonPoint.nearest to find N nearest points "
        },
        {
            "id": "comment-15241483",
            "author": "ASF subversion and git services",
            "date": "2016-04-14T16:51:30+0000",
            "content": "Commit 5238de937a84c4de387f0036830811cb3b7d734f in lucene-solr's branch refs/heads/jira/SOLR-8908 from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5238de9 ]\n\nLUCENE-7069: woops, approxBestDistance was way too approximate when the point was inside the cell "
        },
        {
            "id": "comment-15241651",
            "author": "ASF subversion and git services",
            "date": "2016-04-14T18:08:23+0000",
            "content": "Commit 68e9efc7ac0b00ec8bcc03b52ade73bb3b74d707 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=68e9efc ]\n\nLUCENE-7069: can't wrap with exotic readers when making IndexSearcher "
        },
        {
            "id": "comment-15241653",
            "author": "ASF subversion and git services",
            "date": "2016-04-14T18:09:18+0000",
            "content": "Commit e2c451e6f2c07b128968a95682c626aa61d3a461 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e2c451e ]\n\nLUCENE-7069: can't wrap with exotic readers when making IndexSearcher "
        },
        {
            "id": "comment-15277287",
            "author": "Hoss Man",
            "date": "2016-05-09T23:15:25+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}