{
    "id": "SOLR-12224",
    "title": "there is no API to read collection properties",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.3",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Solr 7.3 added the COLLECTIONPROP API call (https://lucene.apache.org/solr/guide/7_3/collections-api.html#collectionprop) that allows to set arbitrary properties on a collection. There is however no API call that returns the data. The only option is to manually read out the collectionprops.json file in ZK below the collection.\n\nOptions could be that the COLLECTIONPROP command has an option to retrieve properties, have a special command to list the properties and/or to have the properties listed in the clusterstatus output for a collection.\n\nWould be great if SolrJ would also be supported.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-14T14:51:50+0000",
            "content": "Transferring and expanding on my thoughts from the mailing list:\n\nFor contrast with something else in Solr:  The dataimport handler defaults to \"status\" if the command is missing from the request.\n\nWe could do something similar within the COLLECTIONPROP action on the collections API if the propertyName/propertyValue parameters are absent.  Or we could add a new action, something like LISTCOLLECTIONPROP.  (some limited bikeshedding welcome).\n\nIMHO, the functionality to show collection properties should allow multiple \"name\" parameters to get information for multiple collections, or list them all if \"name\" is omitted.  And the output format in json/xml/javabin/whatever should be the same whether there is info from one collection or many. ",
            "author": "Shawn Heisey",
            "id": "comment-16438373"
        },
        {
            "date": "2018-04-14T15:42:01+0000",
            "content": "There is actually a way to read the collection properties using CloudSolrClient.getZkStateReader().getCollectionProperties(collection)\nA REST API would still be nice but for me personally this is actually already enough. ",
            "author": "Hendrik Haddorp",
            "id": "comment-16438392"
        },
        {
            "date": "2018-04-15T02:26:52+0000",
            "content": "WDYT about including that in the CLUSTERSTATUS call? ",
            "author": "Erick Erickson",
            "id": "comment-16438572"
        },
        {
            "date": "2018-04-15T09:03:24+0000",
            "content": "As the clusterstatus contains the cluster properties already it would make sense to me to also include the collection properties. ",
            "author": "Hendrik Haddorp",
            "id": "comment-16438639"
        },
        {
            "date": "2018-04-15T20:18:32+0000",
            "content": "If collection properties are part of CLUSTERSTATUS, the response could potentially be quite large.  If there are five hundred collections, each with a handful of properties, that's a lot of information.  Somebody who's after a quick cluster-wide status response probably isn't interested in all of that.  Gathering it will also increase the response time.\n\nI think it is best to allow the existing COLLECTIONPROP action to return the properties when the request is missing parameters, or create a new action specifically for listing them. ",
            "author": "Shawn Heisey",
            "id": "comment-16438827"
        },
        {
            "date": "2018-04-15T20:27:13+0000",
            "content": "I'm not strongly opposed to having the info in CLUSTERSTATUS.  It just seems like the wrong place to put it, since the info is only applicable to the collections that have the properties, not the whole cluster. ",
            "author": "Shawn Heisey",
            "id": "comment-16438830"
        },
        {
            "date": "2018-04-15T20:31:57+0000",
            "content": "An option could also be to have an option to control how much detail CLUSTERSTATUS is returning. But getting the information via COLLECTIONPROP is also fine to me. ",
            "author": "Hendrik Haddorp",
            "id": "comment-16438831"
        },
        {
            "date": "2018-04-17T18:08:58+0000",
            "content": "Small +1 to including the collection props in CLUSTERSTATUS.  I get your point Shawn, that CLUSTERSTATUS is supposed to be about the cluster, not the collection.  But \"holding the line\" on that distinction seems like a lost battle: we already allow filtering CLUSTERSTATUS by the collection(s)/shard(s) you care about, and the API includes many other bits of collection state in the response (shard hash ranges, replica/shard state, leadership, etc.).  I'm not sure what's more intuitive in general, but speaking only for myself, CLUSTERSTATUS is usually the API I think to hit when I want to see the overview for a collection (which in my mind includes any properties).  I don't care strongly, just my 2 cents.\n\nI'm curious too whether anyone cares how this is exposed in the v2 API.  That's the \"future\" I guess, so worth some discussion.  Would we expose this under GET v2/c/collection-name (which lines up pretty well with action=CLUSTERSTATUS&collection=collection-name), or does it deserve its own collection subpath, like GET v2/c/collection-name/properties? ",
            "author": "Jason Gerlowski",
            "id": "comment-16441281"
        },
        {
            "date": "2018-04-17T19:37:00+0000",
            "content": "I should probably check to see what is in CLUSTERSTATUS.\n\n(final jeopardy music)\n\nI see your point now.  It already has detailed information about every collection, so adding cluster properties is not unreasonable.\n\nSomebody with a really large cloud is already going to be expecting CLUSTERSTATUS to take a while.  The amount of extra time needed to gather property info would not be horrible.\n\nThis isn't what I would have expected from a status action on a whole cluster, but then I remember that this is basically everything that clusterstate.json used to hold in 4.x (plus a little more added in later versions), so from a developer perspective, the direct conversion of clusterstate.json to CLUSTERSTATUS actually does make sense.\n\nI haven't closely examined the v2 API yet, so I'm not going to comment there. ",
            "author": "Shawn Heisey",
            "id": "comment-16441384"
        }
    ]
}