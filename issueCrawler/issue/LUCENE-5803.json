{
    "id": "LUCENE-5803",
    "title": "Add another AnalyzerWrapper class that does not have its own cache, so delegate-only wrappers don't create thread local resources several times",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/analysis"
        ],
        "affect_versions": "4.9",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "This is a followup issue for the following Elasticsearch issue: https://github.com/elasticsearch/elasticsearch/pull/6714\n\nBasically the problem is the following:\n\n\tElasticsearch has a pool of Analyzers that are used for analysis in several indexes\n\tEach index uses a different PerFieldAnalyzerWrapper\n\n\n\nPerFieldAnalyzerWrapper uses PER_FIELD_REUSE_STRATEGY. Because of this it caches the tokenstreams for every field. If there are many fields, this are a lot. In addition, the underlying analyzers may also cache tokenstreams and other PerFieldAnalyzerWrappers do the same, although the delegate Analyzer can always return the same components.\n\nWe should add similar code to Elasticsearch's directly to Lucene: If the delegating Analyzer just delegates per Field or just wraps CharFilters around the Reader, there is no need to cache the TokenStreamComponents a second time in the delegating Analyzers. This is only needed, if the delegating Analyzers adds additional TokenFilters (like ShingleAnalyzerWrapper).\n\nWe should name this new class DelegatingAnalyzerWrapper extends AnalyzerWrapper. The wrapComponents method must be final, because we are not allowed to add additional TokenFilters, but unlike ES, we don't need to disallow wrapping with CharFilters.\n\nInternally this class uses a private ReuseStrategy that just delegates to the underlying analyzer. It does not matter here if the strategy of the delegate is global or per field, this is private to the delegate.",
    "attachments": {
        "LUCENE-5803.patch": "https://issues.apache.org/jira/secure/attachment/12654012/LUCENE-5803.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14051964",
            "author": "Uwe Schindler",
            "content": "In fact, this makes PER_FIELD_REUSE_:STRATEGY for the PerFieldAnalyzerWrapper case obsolete, because in PerFieldAnalyzerWrapper we just leave the components caching up to the inner Analyzer, who can use GLOBAL or whatever else. This has the good effect, that we dont cache a TokenStream for every field, just for every delegate Analyzer. ",
            "date": "2014-07-03T22:06:35+0000"
        },
        {
            "id": "comment-14052013",
            "author": "Uwe Schindler",
            "content": "Patch.\n\nI added more Javadocs and tried to work around the stupid problem with the super constructor call cannot reference to this. There is the possibibility to do this by using the passed-in Analyzer, but then we loose the check throwing the IllegalStateException.\n\nWe need this check, otherwise you would be able to corrumpt your analyzers: If you wrap this analyzer again with some other analyzer that uses the delegate reuse strategy, e.g., new ShingleAnalysisWrapper(new PerFieldAnalyzerWrapper(....)), the ShingleAnalysisWrapper would reuse the PerFieldAnalyzerWrapper's strategy (which is private to the PerFieldAnalysis wrapper) and by that inject illegal TokenStreamComponents into the inner's cache. So we must disallow this.\n\nThis patch misses some tests for this special case and also to test if everything works fine.\n\nSolr is also using this Analyzer, so we see the improvements in Solr, too (not only in Elasticsearch). In fact, PER_FIELD_REUSE_STRATEGY is no longer used for pure per-field delegates. We no longer have one TokenStream instance per field, we have one instance per delegate Analyzer. ",
            "date": "2014-07-03T23:46:45+0000"
        },
        {
            "id": "comment-14052015",
            "author": "Uwe Schindler",
            "content": "I am not sure about the ideal name for this wrapper. Suggestions? ",
            "date": "2014-07-03T23:49:19+0000"
        },
        {
            "id": "comment-14052019",
            "author": "Robert Muir",
            "content": "I think the name is fine myself. Its for delegation ",
            "date": "2014-07-03T23:57:35+0000"
        },
        {
            "id": "comment-14052029",
            "author": "Robert Muir",
            "content": "And for that reason, you shouldnt be able to wrap it with a charfilter. Use the existing subclass for \"tweaking\" the analyzer. Let this one be for pure delegation... ",
            "date": "2014-07-04T00:09:10+0000"
        },
        {
            "id": "comment-14052250",
            "author": "Uwe Schindler",
            "content": "And for that reason, you shouldnt be able to wrap it with a charfilter. Use the existing subclass for \"tweaking\" the analyzer. Let this one be for pure delegation...\n\nI thought about that already and I agree. Although it is not really needed to explicitely forbid wrapping readers, we should still make the method final. Maybe in the future we will somehow also reuse the readers, so having a clear API contract here is a good idea.\n\nAttached is a new patch, but I have a better idea about the IllegalStateException. ",
            "date": "2014-07-04T08:14:36+0000"
        },
        {
            "id": "comment-14052260",
            "author": "Uwe Schindler",
            "content": "This is my new patch, that does not break the common pattern: new ShingleAnalyzerWrapper(new PerFieldAnalyzerWrapper(...)). The previous patch would have thrown IllegalStateException.\n\nIn this patch, also the DelegatingAnalyzerWrapper gets a reuse strategy in its constructor, but this one is only used if you wrap a second time as fallback (this is why its called \"defaultStrategy\". ",
            "date": "2014-07-04T08:37:55+0000"
        },
        {
            "id": "comment-14052314",
            "author": "Uwe Schindler",
            "content": "I added a test to the analysis module that checks that wrapping (also mixed with default non-delegating AnalyzerWrapper) works as expected. ",
            "date": "2014-07-04T09:48:52+0000"
        },
        {
            "id": "comment-14052328",
            "author": "Uwe Schindler",
            "content": "More improved test, does more checks by using a special non-delegating wrapper. ",
            "date": "2014-07-04T10:04:46+0000"
        },
        {
            "id": "comment-14052513",
            "author": "Uwe Schindler",
            "content": "Samuel Garc\u00eda (\u200fhttps://twitter.com/samuelgmartinez) said on Twitter:\n@kimchy @thetaph1 we have a solr server cluster with 150 cores and about 20 indexed fields. We lost 1.5gb due to these zz_buffer tlocal.\n\nThis patch will improve this situation, but not as good as in Elasticsearch. The difference in Solr is: Solr has a complete separation of cores (even with different classloader). Each core has its own schema with own field types. Every field type has its own analyzer. Those are combined in a PerFieldAnalyzer-like wrapper. If Solr would allow to define \"field types\" globally (across cores), this could be shared. But with crrent Solr, each core gets its own zz_buffer tlocal. The improvement in Solr due to this patch is:\nIn the past we had a separate threadlocal per field name, because the AnalyzerWraper had a per-field-reuse strategy. With this patch we now have a global reuse strategy per FieldType. So the imporvement is: If you define a field type one time and reuse it for 20 fields, you have only one cached TokenStream, not 20. This is because we now delegate to the underlying Analyzer (the one from the field type), which has GLOBAL_REUSE_STRATEGY. ",
            "date": "2014-07-04T15:32:46+0000"
        },
        {
            "id": "comment-14052532",
            "author": "Uwe Schindler",
            "content": "New patch:\n\n\trenamed a field and improved docs\n\treplaced a horrible Solr offender: PreAnalyzedField was creating the analyzer over and over instead of creating it one time after field type init().\n\n\n\nI think this is ready. ",
            "date": "2014-07-04T15:58:58+0000"
        },
        {
            "id": "comment-14052841",
            "author": "ASF subversion and git services",
            "content": "Commit 1607998 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1607998 ]\n\nLUCENE-5803: Add DelegatingAnalyzerWrapper, an optimized variant of AnalyzerWrapper that doesn't allow to wrap components or readers ",
            "date": "2014-07-05T11:32:33+0000"
        },
        {
            "id": "comment-14052844",
            "author": "ASF subversion and git services",
            "content": "Commit 1608003 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1608003 ]\n\nMerged revision(s) 1607998 from lucene/dev/trunk:\nLUCENE-5803: Add DelegatingAnalyzerWrapper, an optimized variant of AnalyzerWrapper that doesn't allow to wrap components or readers ",
            "date": "2014-07-05T12:08:44+0000"
        },
        {
            "id": "comment-14052845",
            "author": "ASF subversion and git services",
            "content": "Commit 1608005 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1608005 ]\n\nLUCENE-5803: Add more Javadocs to AnalyzerWrapper to encourage people to use DelegatingAnalyzerWrapper (if possible). Add changes entry for Solr. ",
            "date": "2014-07-05T12:19:53+0000"
        },
        {
            "id": "comment-14052846",
            "author": "ASF subversion and git services",
            "content": "Commit 1608006 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1608006 ]\n\nMerged revision(s) 1608005 from lucene/dev/trunk:\nLUCENE-5803: Add more Javadocs to AnalyzerWrapper to encourage people to use DelegatingAnalyzerWrapper (if possible). Add changes entry for Solr. ",
            "date": "2014-07-05T12:20:40+0000"
        },
        {
            "id": "comment-14052849",
            "author": "Uwe Schindler",
            "content": "Thank you also to Shay Banon, who provided the original idea and patch inside the ES code tree. ",
            "date": "2014-07-05T12:37:31+0000"
        },
        {
            "id": "comment-16296959",
            "author": "ASF subversion and git services",
            "content": "Commit 9f7f76f267bd46b0069731ba1ae4990d31c33df8 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9f7f76f ]\n\nLUCENE-5803: Add a Solr test that we reuse analysis components across fields for the same field type ",
            "date": "2017-12-19T15:28:30+0000"
        }
    ]
}