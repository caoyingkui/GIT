{
    "id": "LUCENE-8180",
    "title": "Explore using (Future)Arrays.mismatch for FixedBitSet.nextSetBit",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "resolution": "Not A Problem",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "Using Arrays.mismatch with a fixed-size array full of zeros might help find the next long that is not 0 faster.",
    "attachments": {
        "LUCENE-8180.patch": "https://issues.apache.org/jira/secure/attachment/12919636/LUCENE-8180.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16370082",
            "date": "2018-02-20T14:10:04+0000",
            "content": "I'm not sure this would help unless the bitset was extraordinarily sparse, in which case fixedbitset isn't a great representation, and processing is going to be fast regardless because of the sparsity? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16370402",
            "date": "2018-02-20T18:20:07+0000",
            "content": "I was mostly thinking about the moderately sparse case (eg. about 1/30th of bits set) on a large index with matches that are not uniformly spread across the doc ID space. I can't tell how common it is but I wouldn't be surprised that it was not so uncommon, and in that case there could be some long runs of zeros. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16374747",
            "date": "2018-02-23T17:59:33+0000",
            "content": "Hi, this is interesting. How is java.util.Bitset internally implemented in Java 9. Does it use that method? ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16442627",
            "date": "2018-04-18T14:50:49+0000",
            "content": "It doesn't seem to.\n\nI tried to test this change but there is a slight slowdown with wikibigall:\n\n\n                    TaskQPS baseline      StdDev   QPS patch      StdDev                Pct diff\n                 Prefix3      107.21      (6.9%)      100.80      (5.7%)   -6.0% ( -17% -    7%)\n                Wildcard       73.71      (6.9%)       70.43      (6.0%)   -4.4% ( -16% -    9%)\n                  IntNRQ       28.69     (10.1%)       27.82      (9.0%)   -3.0% ( -20% -   17%)\n              OrHighHigh       32.25      (3.2%)       32.12      (3.3%)   -0.4% (  -6% -    6%)\n               OrHighMed      101.35      (2.5%)      101.03      (2.2%)   -0.3% (  -4% -    4%)\n            HighSpanNear        5.51      (5.5%)        5.50      (5.4%)   -0.2% ( -10% -   11%)\n               MedPhrase       14.55      (1.7%)       14.52      (1.6%)   -0.2% (  -3% -    3%)\n              AndHighMed      215.89      (3.0%)      215.59      (2.9%)   -0.1% (  -5% -    5%)\n         MedSloppyPhrase       23.26      (3.3%)       23.23      (3.3%)   -0.1% (  -6% -    6%)\n             MedSpanNear       79.38      (5.1%)       79.29      (5.1%)   -0.1% (  -9% -   10%)\n               LowPhrase       67.40      (1.4%)       67.33      (1.4%)   -0.1% (  -2% -    2%)\n               AndCommon      154.32      (4.2%)      154.21      (4.2%)   -0.1% (  -8% -    8%)\n             LowSpanNear       39.95      (3.1%)       39.92      (3.2%)   -0.1% (  -6% -    6%)\n              HighPhrase       60.46      (1.7%)       60.42      (1.6%)   -0.1% (  -3% -    3%)\n         LowSloppyPhrase      706.30      (2.0%)      705.95      (1.9%)   -0.1% (  -3% -    3%)\n             AndHighHigh       37.60      (2.6%)       37.59      (2.8%)   -0.0% (  -5% -    5%)\n               OrHighLow     1380.85      (4.3%)     1380.85      (3.6%)    0.0% (  -7% -    8%)\n        HighSloppyPhrase        1.87      (7.9%)        1.87      (7.7%)    0.1% ( -14% -   17%)\n                OrCommon      217.99      (5.1%)      218.29      (5.1%)    0.1% (  -9% -   10%)\n                HighTerm      433.84      (6.7%)      434.54      (6.5%)    0.2% ( -12% -   14%)\n                 LowTerm     2344.87      (4.6%)     2349.37      (4.7%)    0.2% (  -8% -    9%)\n       HighTermMonthSort       55.69     (11.1%)       55.83     (11.2%)    0.3% ( -19% -   25%)\n                 Respell      211.40      (2.6%)      211.98      (2.5%)    0.3% (  -4% -    5%)\n                 MedTerm     1125.82      (5.6%)     1129.18      (5.4%)    0.3% ( -10% -   11%)\n   HighTermDayOfYearSort       98.79      (9.2%)       99.16      (8.4%)    0.4% ( -15% -   19%)\n                  Fuzzy2      111.64     (12.4%)      112.17     (11.3%)    0.5% ( -20% -   27%)\n                  Fuzzy1      226.93      (7.3%)      228.67      (8.0%)    0.8% ( -13% -   17%)\n              AndHighLow     1720.51      (5.1%)     1741.37      (5.2%)    1.2% (  -8% -   12%)\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16442629",
            "date": "2018-04-18T14:53:05+0000",
            "content": "(Note: I had to patch luceneutil to use the JAR file of lucene-core rather than the classes folder https://github.com/mikemccand/luceneutil/pull/14) ",
            "author": "Adrien Grand"
        }
    ]
}