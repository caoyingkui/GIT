{
    "id": "SOLR-43",
    "title": "query parameter overhaul",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.1.0"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Goals:\n\n\tper field parameters that fall back to global values\n\tdefaults in solrconfig.xml per request handler, overridable per\n\n\n\nThis is desirable for highlighting additions: http://issues.apache.org/jira/browse/SOLR-37 \n\nlast email thread: http://www.nabble.com/parameter-defaults-and-config-tf2020863.html#a5556298",
    "attachments": {
        "dismax-solrparams.patch": "https://issues.apache.org/jira/secure/attachment/12340222/dismax-solrparams.patch",
        "solrparams.patch": "https://issues.apache.org/jira/secure/attachment/12339267/solrparams.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12429537",
            "date": "2006-08-21T21:17:29+0000",
            "content": "prototype implementation for feedback/discussion:\n\n\tchanged standard request handler, but not plugin utils it calls\n\tuntested for new functionallity, but all current tests pass\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12429821",
            "date": "2006-08-22T22:12:07+0000",
            "content": "Attached refresh.\n\nUnless someone thinks this is going off in the wrong direction, I'll commit this soon so others can work on it also. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12429863",
            "date": "2006-08-23T01:43:22+0000",
            "content": "Looks good!  I especially like how trivial it is to create arbitrarily-nested parameter chains.  One thing I believe that was lost in this patch is static (source-level) defaults for parameters.  Presumably these would be defined using another level of defaul parameters which is a static member of CommonParams or somesuch?\n\nAlso, should SolrParams.parseBool() perhaps do a case-insensitive test? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12430086",
            "date": "2006-08-23T19:49:39+0000",
            "content": "Committed current version.\n\nLeft to do off the top of my head:\n\n\tdeprecate methods dealing with params in PluginUtils\n\tchange use of deprecated methods (including dismax handler)\n\tdismax handler: were to get defaults from solrconfig.xml... the base level, or \"defaults\".  If the latter, provide some backward compat for existing configs?\n\n\n\nHighlighter stuff:\n\n\tallow specification of markup\n\tallow fragsize per-field\n\tkeep in mind recent highlighter work going on in Lucene... we should try and specify what instead of how (not use exact class names, etc)\n\tstart using \"hl\" namespace for highlighter params... this is just a convention to help clarify the semantics of a parameter at a glance.\n\tfor consistency, should \"highlight\" => \"hl\", \"highlightFields\" => \"hl.fields\" or \"hl.fl\", \"maxSnippets\" => \"hl.snippets\"?\n    Normally backward compatibility is very important for the external interfaces, but things will change while a feature is in development... every commit does not constitute a release.  Is highlighting new enough that we can change these parameters?  Is anyone using these parameters in production where it would be a burden if we changed these?\n\n\n\nExamples of potential highlighter param names:\nhl=true\nhl.fl=name,title,body\nhl.snippets=4\nhl.fragsize=100\nhl.formatter=simple\nhl.simple.pre=<em>  \nhl.simple.post=</em>\n\nAnd per field params:\nf.title.hl.fragsize=0  // overrides fragsize only for field 'title'\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12432689",
            "date": "2006-09-05T23:09:03+0000",
            "content": "Overhaul of DisMax handler to use SolrParams, and deprecated all of the SolrPluginUtil.get*Param methods.\n\nBackwards compatible support was added to treat all init params as defaults if no init param named \"defaults\" was specified.\n\nIf no one spots any problems with this patch I'd like to commit it tomorow (Wed). "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12432727",
            "date": "2006-09-06T03:30:03+0000",
            "content": "Looks fine after a cursory examination. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12432946",
            "date": "2006-09-06T19:34:09+0000",
            "content": "commited dismax-solrparams.patch\n\nStill todo:  Completely remove refrences to deprecated methods (ie: req.getParam should be req.getParams().get) from within the core code base.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12440952",
            "date": "2006-10-09T18:33:25+0000",
            "content": "closing... the removal of deprecated methods should probably be more tied to releases. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12589358",
            "date": "2008-04-15T23:56:44+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked (\"Resolved\" or \"Closed\") and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.1\n\n\n\nThe Fix Version for all 38 issues found was set to 1.1, email notification\nwas suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this\n(hopefully) unique string: 20080415hossman3 "
        }
    ]
}