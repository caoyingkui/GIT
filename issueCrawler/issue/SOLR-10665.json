{
    "id": "SOLR-10665",
    "title": "POC for a PF4J based plugin system",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Plugin system"
        ],
        "type": "New Feature",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In SOLR-5103 we have been discussing improvements to Solr plugin system, with ability to bundle a plugin as zip, and easily install from shell or Admin UI.\n\nThis task aims to create a working POC to demonstrate how PF4J (Plugin Framework4J) can be used to bring a very simple plugin packaging and installation system to Solr with a minimum of effort. Code speaks louder than words \n\nThe POC effort is a quite large patch and will be cutting some corners to get the feature in the hands of people who can test and evaluate. If there is consensus to add this to Solr, there will be other sub tasks to split up the elephant into committable chunks.\n\nThe design document is located here: https://s.apache.org/solr-plugin (Google Doc) - comments are welcome in the document or here.",
    "attachments": {
        "SOLR-10665.patch": "https://issues.apache.org/jira/secure/attachment/12878191/SOLR-10665.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-20T15:11:24+0000",
            "content": "Attaching a patch of current POC state. Don't mind the patch size, this is not meant for commit but for producing a runnable proof of concept.\n\nI have also produced a \"release\" tarball for easier consumption, see design doc appendix A\n\ncurl -O http://people.apache.org/~janhoy/dist/solr-8.0.0-SNAPSHOT.tgz\ntar -xvzf solr-8.0.0-SNAPSHOT.tgz\ncd solr-8.0.0-SNAPSHOT\nbin/solr start\nbin/solr create -c test\nbin/post -c test example/exampledocs/*.xml\ncurl -s http://localhost:8983/solr/test/browse | grep ClassNotFoundException\nbin/solr plugin search vel\nbin/solr plugin install velocity\nbin/solr restart\ncurl -s http://localhost:8983/solr/test/browse | grep ClassNotFoundException\ncurl -s http://localhost:8983/solr/test/browse | grep \"Solr Admin\"\n\n\n\nEnjoy  ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16094802"
        },
        {
            "date": "2017-07-22T01:29:19+0000",
            "content": "How does it work with SolrCloud? \nHow do you ensure that all nodes in a cloud setup has the same binaries? \nHow hard is it to enhance the blob store system for managing plugins? ",
            "author": "Noble Paul",
            "id": "comment-16097052"
        },
        {
            "date": "2017-07-22T02:41:03+0000",
            "content": "Thanks Jan. I have a few comments:\n\n\tI think we should split up plugin system and plugin repositories features into separate issues. The former can be designed and built without the latter.\n\tWe should make it easy to build install custom plugins. Perhaps a maven archetype might be useful to bootstrap custom plugin projects.\n\tSolrCloud presents its own challenges which aren't addressed by the design at all:\n\t\n\t\tWe shouldn't force people to deploy plugins by ssh'ing into each box and restarting Solr\n\t\tAs Noble said, every node must have the same binary. This must be enforced.\n\t\tAre plugins always cluster-level or should we have them on a per collection basis thereby exposing certain plugins only to specific collections.\n\t\tI agree with Noble that we should consider enhancing blob store to deal with this use-case.\n\t\n\t\n\tThe framework must play well with the security API. Only authorized users must be able to install/upgrade/remove plugins. There should be a separate permission for these operations.\n\tThe API can be called just /admin/plugins instead of /admin/pluginbundles\n\tIt is not clear how we can decide if a plugin is incompatible. If we just rely only on versions specified in the manifest, it would mean that every plugin must have a corresponding release  for each (major?) Solr release even if it is only to bump the version number in the manifest.\n\n ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16097076"
        },
        {
            "date": "2017-07-23T22:05:09+0000",
            "content": "Noble Paul, Shalin Shekhar Mangar: This POC is not supposed to give all the answers, but to point in a direction, thus the \"will be cutting some corners\" phrase in issue description. To comment on your points\n\n How does it work with SolrCloud? \nHow do you ensure that all nodes in a cloud setup has the same binaries? \nHow hard is it to enhance the blob store system for managing plugins?\nAppendix B discusses this and lists it as a point to flesh out further. The plugin-classloader is pluggable, so we could add versions that can load plugins from HDFS, .system collection etc. later.\n\n1. I think we should split up plugin system and plugin repositories features into separate issues. The former can be designed and built without the latter.\nThe elephant will be split up in many many small issues before commit. This is a fast-track POC approach to development where I get the whole thing working first, and then split things up into parts that can be polished and committed independently.\n\n2. We should make it easy to build install custom plugins. Perhaps a maven archetype might be useful to bootstrap custom plugin projects.\nFor sure, see Appendix C - Solr Plugin SDK I already started this effort \n\n3. SolrCloud presents its own challenges which aren't addressed by the design at all:\nSee answer to Noble above. There's a lot to flesh out regarding distrib support. 3.1 Restart is only required in this early POC. \n3.3 Are plugins always cluster-level or should we have them on a per collection basis thereby exposing certain plugins only to specific collections.\nI prefer to simplify this, at least in first version of the feature. I see no clear benefit in allowing per-collection plugins, as long as we can solve user needs with a cluster-wide classpath. If we open up for per-collection stuff we also need to deal with two collections requesting different version of the same plugin, which is opening up a can of worms, unless you want to refactor all of Solr into an OSGI app? See Appendix B - Class-loading and colliding dependencies for some class loading considerations.\n\n3.4 I agree with Noble that we should consider enhancing blob store to deal with this use-case.\nThat could come as a later option, it is not a deal-breaker if we can make sure the nodes have the same binaries in a simpler way in v1. How would you make the .system collection available for class loading before CoreContainer is started and e.g. let authentication plugins be loaded from it?\nThe API can be called just /admin/plugins instead of /admin/pluginbundles\nAgree.\nIt is not clear how we can decide if a plugin is incompatible. If we just rely only on versions specified in the manifest, it would mean that every plugin must have a corresponding release for each (major?) Solr release even if it is only to bump the version number in the manifest.\nThe plugin author fills the plugin metadata Plugin-Requires and thus decides for what Solr versions it is allowed to load. Typically that would be something like >=6.0.0 to set a lower bound only. That could be successful if you release a very simple plugin on a stable API that rarely changes, but an expression that would probably be better in most cases is e.g. >=6.0.0 & <8.0.0 to say that this will work on the 6.x and 7.x range, but since stuff may be deprecated in 7.x the plugin author cannot say anything about 8.x. If the plugin is actively maintained, the author should make sure to release a new version that is compatible with 8.x before 8.x is out the door. The \"this and next major version\" Requires-expression could be the default suggestion in the SDK. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16097816"
        },
        {
            "date": "2017-09-11T11:15:27+0000",
            "content": "One challenge with installing and especially upgrading plugins is that the rest of the system may assume a static classpath and never re-scan for new SPI classes, and a core using version X of a plugin class may not be aware that version Y is now on the classpath after a plugin upgrade. Even worse, both versions X and Y may exist.\n\nSo my current thinking is that we either\nA. Find a way to reload the whole CoreContainer, all cores with config, all security plugins etc gets refreshed and reloaded after a plugin event\nB. Only allow install and uninstall while running. Upgrade only supported in offline mode\n\nWhat do you think? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16161092"
        },
        {
            "date": "2017-09-11T18:16:54+0000",
            "content": "I think (B) is a great way to get somewhere. \n\nOn the other hand, (A) is a great way to reinvent OSGi (which was my idea that I never followed-up on). ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16161712"
        },
        {
            "date": "2017-09-11T20:55:36+0000",
            "content": "There are other factors that point towards B as well, such as when upgrading Solr versions, there will be a need to upgrade many plugins at the same time, so that needs to be done offline anyway. We could have GUI support to notify about plugin upgrades, but the upgrade button would tell the user to stop solr, then run bin/solr plugin upgrade and then start Solr again. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16161976"
        },
        {
            "date": "2018-08-09T01:01:36+0000",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' ",
            "author": "Gavin",
            "id": "comment-16574138"
        }
    ]
}