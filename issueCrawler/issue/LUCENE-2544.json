{
    "id": "LUCENE-2544",
    "title": "Add 'divisor' to NumericField, allows for easy storage of full precision data, but indexing *starting* at lower precision.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.0.2",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "In some cases, we want to index a timestamp or some other high precision numeric at a much lower precision, but we still want to store the full precision data.\nRather than have to do this with two Field objects in the Document, it'd be easier to provide NumericField with a divisor as well as prevision step. The divisor would apply before beginning the trie logic.\n\nmost often, this is a divide by 1, but that will happen only during the constructor or setXXXValue() in NumericTokenStream.\nI have the patch for this, or i will after i isolate it.",
    "attachments": {
        "LUCENE-2544.patch": "https://issues.apache.org/jira/secure/attachment/12449777/LUCENE-2544.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-07-18T03:08:46+0000",
            "content": "decided to leave numerictokenstream untouched and simply modify internals of NumericField. makes the diff very small. ",
            "author": "Woody Anderson",
            "id": "comment-12889556"
        },
        {
            "date": "2010-07-18T07:31:19+0000",
            "content": "I don't think this patch is a good idea it creates much confusion. You don't need to create two fields in the index to achieve the same. You only need two NumericField instances for the same field name, one indexed (with divisor applied) and one stored (without a divisor applied). ",
            "author": "Uwe Schindler",
            "id": "comment-12889580"
        },
        {
            "date": "2010-07-18T18:28:37+0000",
            "content": "which is two Field objects. which is what i meant, i probably should have been more precise.\n\nat any rate, it basically adds a numeric equivalent of the DateTools.Resolution.\n\nThe patch is simple enough for me to always be able to patch releases etc. if really don't like it, but i'm not sure what's so confusing about having one extra optional parameter to index a timestamp as seconds but store as milliseconds, and to do that without adding new Field(..); ",
            "author": "Woody Anderson",
            "id": "comment-12889648"
        },
        {
            "date": "2010-09-21T17:08:04+0000",
            "content": "It is two field instances, but results only in one field in the index. Stored fields and indexed fields are handled separate by the indexer, so there is nothing different between a combined store/index and two separate Field instances (same field name!) with one is stored the other is indexed. If you want to store something different than you indexed, this is the way to go:\n\ndoc.add(new NumericField(name, Field.Store.NO, true).setIntValue(xxx/divisor));\ndoc.add(new NumericField(name, Field.Store.YES, false).setIntValue(xxx));\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12913084"
        },
        {
            "date": "2010-09-21T18:07:04+0000",
            "content": "I really do understand the difference between Field the instance object, and a field in the index. I use cap F for the java class and lowercase for the index.\n\nYou can accomplish this with two NFs, but you can also implement NumericField with a series of \"new Field()\" using the same name as well. But, you don't do this, b/c it's much more convenient to have it bundled up in a nice concise form.\n\nThere is (admittedly, from my perspective) one issue with this kind of feature. It's that the divisor must be known and kept track of by the lucene user during query parsing and during term-enum inspection if they are doing that sort of thing. The current QueryParser uses a map of field to DateTools.Resolution, which this mechanism would effectively mimic. Though it would produce NumericField formatted tokens in the index rather than date strings, which can often be an advantage for ranges etc. The fact that it also provides numeric resolution for any numeric field is a bonus, but it would involve some change to the QueryParser to correctly handle this, as it currently does not handle querying any field indexed as NumericField. Both this edit and DateTools have the same drawbacks for term-enum inspection (facets etc), so clearly the responsibility for handling that lies with the user of lucene already. I have a schema at parse/inspect time, so i had overlooked this issue.\n\nAt any rate, I still don't get what you consider confusing about this functionality. DateTools.Res shows clear use case, modern NumericField features for fast ranges etc. is often a clear improvement over string date tokens at any resolution. And wrapping it up into the single existing class is just easier to use than requiring multiple NF objects be added to the document. Unless you advocated that NF be implemented as a static utility class that injected multiple Field objects into the Document, i'm not sure why this consolidation goes against the grain. ",
            "author": "Woody Anderson",
            "id": "comment-12913133"
        },
        {
            "date": "2012-09-18T18:00:10+0000",
            "content": "Given the fact that this just provides sugar over existing functionality, and considering Uwe Schindler's objections, and the two years with zero activity, resolving as Won't Fix. ",
            "author": "Steve Rowe",
            "id": "comment-13458004"
        },
        {
            "date": "2012-09-18T22:00:04+0000",
            "content": "I agree, this issue will not be fixed as I see no reason to do this. Thanks for closing! ",
            "author": "Uwe Schindler",
            "id": "comment-13458233"
        }
    ]
}