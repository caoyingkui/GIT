{
    "id": "LUCENE-5622",
    "title": "Fail tests if they print over the given limit of bytes to System.out or System.err",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "Some tests print so much stuff they are now undebuggable (see LUCENE-5612).\n\nFrom now on, when tests.verbose is false, the number of bytes printed to standard output and error streams will be accounted for and if it exceeds a given limit an assertion will be thrown. The limit is adjustable per-suite using Limit annotation, with the default of 8kb per suite. The check can be suppressed entirely by specifying SuppressSysoutChecks.",
    "attachments": {
        "LUCENE-5622.patch": "https://issues.apache.org/jira/secure/attachment/12641001/LUCENE-5622.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13975228",
            "author": "Robert Muir",
            "content": "Here's a prototype. ",
            "date": "2014-04-20T19:13:17+0000"
        },
        {
            "id": "comment-13975251",
            "author": "Michael McCandless",
            "content": "+1, debuggability of tests is important. ",
            "date": "2014-04-20T19:32:33+0000"
        },
        {
            "id": "comment-13975261",
            "author": "Dawid Weiss",
            "content": "> I think its bad that the testrunner hides this stuff,\n\nIt technically does not. The report which prints stuff to the console does, but that's a different thing from the runner itself. Also, full content of sysouts/ syserrs is dumped (by another report) to disk. See common-build.xml and all junit4:report-* blocks.\n\nWe could just change\n\n showOutput=\"${tests.showOutput}\"\n\n\nto true and this would bring all the output back to the console. The problem is (and was) Solr tests, which print humongous outputs. ",
            "date": "2014-04-20T20:15:03+0000"
        },
        {
            "id": "comment-13975263",
            "author": "Robert Muir",
            "content": "I know solr tests have humungous outputs, but thats not a problem I'm trying to tackle here (they can just override and set NOISY = true always???)\n\nIn this case its just a matter of fixing lucene tests like TestIndexWriter to be more debuggable. So to fix that i want to remove the leniency... ",
            "date": "2014-04-20T20:19:39+0000"
        },
        {
            "id": "comment-13975265",
            "author": "Dawid Weiss",
            "content": "Aside from my previous comment, I don't like the way sysout/ syserr is restored inside the stream. If you only mean to detect whether anything was printed, you should delegate writes to original streams, but not restore  until the after method is invoked, much like you already do.\n\nI don't see the point of restoring original streams inside write. ",
            "date": "2014-04-20T20:22:00+0000"
        },
        {
            "id": "comment-13975266",
            "author": "Robert Muir",
            "content": "Well we can remove that? I dont care? As long as they fail the test. Like i said its a prototype.\n\nThe one thing this patch does (whether oyu like the details of how this is accomplished or not), is fail the test and remove the leniency  ",
            "date": "2014-04-20T20:24:14+0000"
        },
        {
            "id": "comment-13975268",
            "author": "Dawid Weiss",
            "content": "Sure. I would do it in a slightly different way though \u2013 provide delegate syserr/sysout instances (which always correctly delegate to original streams), get a stack trace of the first call to any write[] methods, mark the test as a failure, but fail it inside the after method (with the captured call stack, which may be useful to debug the sysout). The reason for this is to allow the test to run normally and fail it at the end. Throwing a runtime exception from inside sysout/syserr may result in odd behavior (and may be caught, whereas my suggestion cannot be intercepted by the test code). ",
            "date": "2014-04-20T20:31:16+0000"
        },
        {
            "id": "comment-13975269",
            "author": "Dawid Weiss",
            "content": "By odd behavior I include sysouts from non-main test thread...  ",
            "date": "2014-04-20T20:32:26+0000"
        },
        {
            "id": "comment-13975272",
            "author": "Robert Muir",
            "content": "Which is exactly what happens in TestIndexWriter  Good idea. I like it. \n\nis it ok to fail in that TestRuleSetUpAndRestoreClassEnv.after(), e.g. will the exc be delivered etc?? that part wasnt clear to me since nothing does that. thats why i did it the current hacky way (without doing experiments) ",
            "date": "2014-04-20T20:34:55+0000"
        },
        {
            "id": "comment-13975273",
            "author": "Dawid Weiss",
            "content": "You know what... I'm not sure. How about if you assign it to me and I'll look into it later on, ok? ",
            "date": "2014-04-20T20:37:26+0000"
        },
        {
            "id": "comment-13976602",
            "author": "Dawid Weiss",
            "content": "This was trickier than I initially thought because you need to take into account infrastructure which also prints to system streams.\n\nAnyway, this is the proposed patch. Some tests (in Lucene) don't pass:\n\n   [junit4]   - org.apache.lucene.index.TestBackwardsCompatibility (suite)\n   [junit4]   - org.apache.lucene.index.TestCrash (suite)\n   [junit4]   - org.apache.lucene.index.TestIndexWriter (suite)\n   [junit4]   - org.apache.lucene.index.TestDocValuesIndexing (suite)\n\nI didn't check Solr at all, but I suspect we need to put suppression of this rule on the base class because Solr tests print logs to console. ",
            "date": "2014-04-22T10:05:06+0000"
        },
        {
            "id": "comment-13976610",
            "author": "Dawid Weiss",
            "content": "I see that some of these are randomized, the seed I used was 4BCBDFFC4832769F.\n\n  private static IndexUpgrader newIndexUpgrader(Directory dir) {\n    final boolean streamType = random().nextBoolean();\n...\n      case 1: return new IndexUpgrader(dir, TEST_VERSION_CURRENT, \n                                       streamType ? null : System.err, false);\n\n\n\nDon't know what it does or why it's needed \u2013 Robert, could you address the failing test cases? ",
            "date": "2014-04-22T10:16:30+0000"
        },
        {
            "id": "comment-13976652",
            "author": "Robert Muir",
            "content": "Done.\n\nTHere are problems with the fancy nested tests:\n\n   [junit4] Tests with failures:\n   [junit4]   - org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.testExceptionWithinTestFailsTheTest\n   [junit4]   - org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.testExceptionWithinBefore\n   [junit4]   - org.apache.lucene.util.junitcompat.TestExceptionInBeforeClassHooks.testExceptionInBeforeClassFailsTheTest\n   [junit4]   - org.apache.lucene.util.junitcompat.TestSeedFromUncaught.testUncaughtDumpsSeed\n\n\n\nAlso, I think we should allow output when a sysprop (tests.noisy?) is set. This is important to automatically add when using -Dtestcase, some developers like to debug with SOP. Often times its the case where you need to use a shell-script to beast a test, etc. So these workflows will still work, we just want to fail when running the whole suite. ",
            "date": "2014-04-22T11:28:58+0000"
        },
        {
            "id": "comment-13976653",
            "author": "Dawid Weiss",
            "content": "I'll look at these.\n\n> This is important to automatically add when using -Dtestcase, some developers like to debug with SOP.\n\nIsn't this the purpose of tests.verbose? I agree with what you're saying about SOP and I'm sort of worried that people will hate this feature (and me, indirectly...). ",
            "date": "2014-04-22T11:32:38+0000"
        },
        {
            "id": "comment-13976657",
            "author": "Robert Muir",
            "content": "Maybe you will hate it, but we need it to be practical. tests.verbose is too much, it hides test failures.\n\nFor example if you turned it on, the test in LUCENE-5623 would never fail, because it hides concurrency issues. \n\nI know you may not like that we have to resort to such shellscripts etc, but I can assure you its necessary  ",
            "date": "2014-04-22T11:36:11+0000"
        },
        {
            "id": "comment-13976679",
            "author": "ASF subversion and git services",
            "content": "Commit 1589104 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1589104 ]\n\nLUCENE-5622: fix noisy tests ",
            "date": "2014-04-22T12:19:38+0000"
        },
        {
            "id": "comment-13976687",
            "author": "Dawid Weiss",
            "content": "I've added a patch that does not check for sysouts by default \u2013 this would be very annoying for people using IDEs. The ant test also doesn't check for these by default (to simplify the build file in case of filtering, etc.). You can turn it on by passing -Dtests.sysouts=no to ant (we could modify jenkins runs to do it, perhaps).\n\nAgain, didn't check Solr at all. There's still something odd going on with those nested tests but they did build over 5 times for me now so we'll see how it goes. ",
            "date": "2014-04-22T12:30:05+0000"
        },
        {
            "id": "comment-13976691",
            "author": "ASF subversion and git services",
            "content": "Commit 1589111 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1589111 ]\n\nLUCENE-5622: fix noisy tests ",
            "date": "2014-04-22T12:31:48+0000"
        },
        {
            "id": "comment-13977505",
            "author": "Dawid Weiss",
            "content": "There is something odd going on with those nested tests \u2013 they fail sporadically for me (even though they should not). I am looking into it. ",
            "date": "2014-04-22T21:50:51+0000"
        },
        {
            "id": "comment-13978120",
            "author": "Dawid Weiss",
            "content": "The problem is with Java loggers (default console handler) which grabs the System.out reference once and for all. This causes  tests to be order-dependent and the DelegateStream to be propagated outside a given test's scope.\n\nI'll think of a way to fix this. ",
            "date": "2014-04-23T12:17:48+0000"
        },
        {
            "id": "comment-13979493",
            "author": "Dawid Weiss",
            "content": "While annotating tests that do sysouts I came to the conclusion that it shouldn't be an \"all or nothing\" threshold. It should be much like the memory leak detector \u2013 some sysouts per suite should be fine (say, 1kb), then it should start failing and suggest to change some of the sysouts to if (VERBOSE) or raise the limit by annotating the suite with a higher threshold.\n\nThis would make sense in that we could enable those checks by default without additional jenkins jobs, special properties, etc. What do you think? ",
            "date": "2014-04-24T09:17:01+0000"
        },
        {
            "id": "comment-13979503",
            "author": "ASF subversion and git services",
            "content": "Commit 1589645 from Dawid Weiss in branch 'dev/branches/LUCENE-5622'\n[ https://svn.apache.org/r1589645 ]\n\nBranch for LUCENE-5622 ",
            "date": "2014-04-24T09:22:04+0000"
        },
        {
            "id": "comment-13981625",
            "author": "Robert Muir",
            "content": "+1 to that idea. It at least prevents things from getting out of control, which is the most important. ",
            "date": "2014-04-25T21:20:04+0000"
        },
        {
            "id": "comment-13985314",
            "author": "Dawid Weiss",
            "content": "New patch with an adjustablelimit of bytes written to sysout/ syserr before an assertion is thrown. Disabled the check for Solr tests entirely and a few classes from Lucene as well. ",
            "date": "2014-04-30T09:29:48+0000"
        },
        {
            "id": "comment-13985324",
            "author": "ASF subversion and git services",
            "content": "Commit 1591222 from Dawid Weiss in branch 'dev/trunk'\n[ https://svn.apache.org/r1591222 ]\n\nLUCENE-5622: Fail tests if they print over the given limit of bytes to System.out or System.err ",
            "date": "2014-04-30T09:38:48+0000"
        },
        {
            "id": "comment-13985325",
            "author": "Dawid Weiss",
            "content": "Committed to trunk. Will let it bake a bit before backporting to 4x ",
            "date": "2014-04-30T09:39:31+0000"
        },
        {
            "id": "comment-13985421",
            "author": "ASF subversion and git services",
            "content": "Commit 1591273 from Dawid Weiss in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1591273 ]\n\nLUCENE-5622: Fail tests if they print over the given limit of bytes to System.out or System.err ",
            "date": "2014-04-30T12:42:42+0000"
        },
        {
            "id": "comment-13985432",
            "author": "ASF subversion and git services",
            "content": "Commit 1591279 from Dawid Weiss in branch 'dev/trunk'\n[ https://svn.apache.org/r1591279 ]\n\nFollow up cleanups to LUCENE-5622. ",
            "date": "2014-04-30T12:51:26+0000"
        },
        {
            "id": "comment-13996235",
            "author": "Dawid Weiss",
            "content": "http://builds.flonkings.com/job/Lucene-4x-Linux-Java7-64-test-only/21354/consoleText\n\nIt failed in a test, yet still complained about sysout enforcement; shouldn't be the case (if a suite fails, no checking should be done).\n\n\n  [junit4]   2> NOTE: test params are: codec=Lucene46: {field=PostingsFormat(name=Memory doPackFST= false)}, docValues:{}, sim=RandomSimilarityProvider(queryNorm=false,coord=yes): {field=DFR GL3(800.0)}, locale=sr_RS, timezone=America/Monterrey\n   [junit4]   2> NOTE: Linux 3.2.0-26-generic amd64/Oracle Corporation 1.7.0_25 (64-bit)/cpus=8,threads=1,free=246490792,total=260243456\n   [junit4]   2> NOTE: All tests run in this JVM: [TestTermVectorsReader, TestSegmentTermEnum, TestConstantScoreQuery, TestNRTThreads, TestSentinelIntSet, TestIsCurrent, TestMockDirectoryWrapper, TestLiveFieldValues, TestLucene41StoredFieldsFormat, TestBlockPostingsFormat2, TestNIOFSDirectory, TestIdentityHashSet, TestDoc, TestLucene3xStoredFieldsFormat, TestDocumentsWriterStallControl, TestPerFieldPostingsFormat, TestLucene45DocValuesFormat, TestAutomatonQuery, TestDocTermOrds, TestPayloadTermQuery, Test2BSortedDocValues, TestFlushByRamOrCountsPolicy, TestReusableStringReader, TestOmitPositions, TestIndexWriterThreadsToSegments]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestIndexWriterThreadsToSegments -Dtests.seed=5373C01FEEF4F0D6 -Dtests.slow=true -Dtests.locale=sr_RS -Dtests.timezone=America/Monterrey -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.00s J2 | TestIndexWriterThreadsToSegments (suite) <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: The test or suite printed 18316 bytes to stdout and stderr, even though the limit was set to 8192 bytes. Increase the limit with @Limit, ignore it completely with @SuppressSysoutChecks or run with -Dtests.verbose=true\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([5373C01FEEF4F0D6]:0)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:724)\n   [junit4] Completed on J2 in 56.03s, 4 tests, 1 failure, 1 error <<< FAILURES!\n\n ",
            "date": "2014-05-13T09:55:45+0000"
        },
        {
            "id": "comment-14005852",
            "author": "Dawid Weiss",
            "content": "Can't reproduce this, everything seems to work fine. ",
            "date": "2014-05-22T12:05:00+0000"
        }
    ]
}