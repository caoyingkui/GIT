{
    "id": "LUCENE-2287",
    "title": "Unexpected terms are highlighted within nested SpanQuery instances",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/highlighter"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.3"
        ],
        "affect_versions": "2.9.1",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I haven't yet been able to resolve why I'm seeing spurious highlighting in nested SpanQuery instances.  Briefly, the issue is illustrated by the second instance of \"Lucene\" being highlighted in the test below, when it doesn't satisfy the inner span.  There's been some discussion about this on the java-dev list, and I'm opening this issue now because I have made some initial progress on this.\n\nThis new test, added to the  HighlighterTest class in lucene_2_9_1, illustrates this:\n\n/*\n\n\tRef: http://www.lucidimagination.com/blog/2009/07/18/the-spanquery/\n */\npublic void testHighlightingNestedSpans2() throws Exception {\n\n\n\n  String theText = \"The Lucene was made by Doug Cutting and Lucene great Hadoop was\"; // Problem\n  //String theText = \"The Lucene was made by Doug Cutting and the great Hadoop was\"; // Works okay\n\n  String fieldName = \"SOME_FIELD_NAME\";\n\n  SpanNearQuery spanNear = new SpanNearQuery(new SpanQuery[] \n{\n    new SpanTermQuery(new Term(fieldName, \"lucene\")),\n    new SpanTermQuery(new Term(fieldName, \"doug\")) }\n, 5, true);\n\n  Query query = new SpanNearQuery(new SpanQuery[] \n{ spanNear,\n    new SpanTermQuery(new Term(fieldName, \"hadoop\")) }\n, 4, true);\n\n  String expected = \"The <B>Lucene</B> was made by <B>Doug</B> Cutting and Lucene great <B>Hadoop</B> was\";\n  //String expected = \"The <B>Lucene</B> was made by <B>Doug</B> Cutting and the great <B>Hadoop</B> was\";\n\n  String observed = highlightField(query, fieldName, theText);\n  System.out.println(\"Expected: \\\"\" + expected + \"\\n\" + \"Observed: \\\"\" + observed);\n\n  assertEquals(\"Why is that second instance of the term \\\"Lucene\\\" highlighted?\", expected, observed);\n}\n\nIs this an issue that's arisen before?  I've been reading through the source to QueryScorer, WeightedSpanTerm, WeightedSpanTermExtractor, Spans, and NearSpansOrdered, but haven't found the solution yet.  Initially, I thought that the extractWeightedSpanTerms method in WeightedSpanTermExtractor should be called on each clause of a SpanNearQuery or SpanOrQuery, but that didn't get me too far.",
    "attachments": {
        "LUCENE-2287.patch": "https://issues.apache.org/jira/secure/attachment/12437202/LUCENE-2287.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-02-26T16:49:47+0000",
            "content": "This is a very rough initial patch, has way too much cruft, but I wanted to park it somewhere nonetheless.  ** not meant to be applied yet ** ",
            "author": "Michael Goddard",
            "id": "comment-12838928"
        },
        {
            "date": "2010-02-26T17:26:19+0000",
            "content": "JUnit error solved, but there are still four tests failing.  Caveats still apply to this version of the patch. ",
            "author": "Michael Goddard",
            "id": "comment-12838948"
        },
        {
            "date": "2010-02-26T20:59:52+0000",
            "content": "This patch is closer: 2 errors and 1 failure on the JUnit test.  Still needs a ton of cleanup. ",
            "author": "Michael Goddard",
            "id": "comment-12839014"
        },
        {
            "date": "2010-02-26T21:38:12+0000",
            "content": "0 errors, 2 failures. ",
            "author": "Michael Goddard",
            "id": "comment-12839030"
        },
        {
            "date": "2010-03-01T16:33:52+0000",
            "content": "\n\tRemoved the Java 5 code which had crept in\n\tTwo tests still fail; need to solve\n\tBreaks backward compatibility, so need to find a way around that\n\n ",
            "author": "Michael Goddard",
            "id": "comment-12839741"
        },
        {
            "date": "2010-03-01T16:37:01+0000",
            "content": "Breaks backward compatibility, so need to find a way around that\n\nWouldn't be the end of the world depending on the break. ",
            "author": "Mark Miller",
            "id": "comment-12839744"
        },
        {
            "date": "2010-03-01T17:02:38+0000",
            "content": "The backward compatibility break was adding\n\n  public abstract Spans[] getSubSpans();\n\nto the Spans class.  I had to do this to enable the recursion on Spans and figured it was the way to go since NearSpansUnordered and NearSpansOrdered had this method. ",
            "author": "Michael Goddard",
            "id": "comment-12839753"
        },
        {
            "date": "2010-03-02T20:04:16+0000",
            "content": "Two tests still fail, but more of my own tests are passing.  The issue with testSpanHighlighting in HighlighterTest may be due to the way overlapping spans are handled by NearSpansUnordered.  I don't think this issue arose before since the span was just the outermost span. ",
            "author": "Michael Goddard",
            "id": "comment-12840304"
        },
        {
            "date": "2010-03-02T21:31:59+0000",
            "content": "It seems that the discussion here on overlapping spans bears on the current issue:\n\nhttp://issues.apache.org/jira/browse/LUCENE-569?focusedCommentId=12411904&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12411904\n\nI'll investigate that, experiment with allowing spans to overlap, and see how that goes. ",
            "author": "Michael Goddard",
            "id": "comment-12840333"
        },
        {
            "date": "2010-04-16T17:34:16+0000",
            "content": "Hey Michael - there is a lot of reformatting it looks like in this patch - if its not that much of a hassle, is it possible to get a patch without the formats? ",
            "author": "Mark Miller",
            "id": "comment-12857904"
        },
        {
            "date": "2010-04-20T14:46:54+0000",
            "content": "Mark,\n\nI apologize for that.  Eclipse nicely reformatted that code for me, and I will see if I can fix that over the coming weekend. ",
            "author": "Michael Goddard",
            "id": "comment-12858915"
        },
        {
            "date": "2011-02-25T11:44:08+0000",
            "content": "Hi,\n\nIt seems the last patch was committed with still couple of failures. Any update on this? Do you think this is still better than the default highlighter?\n\nThanks! ",
            "author": "Salman Akram",
            "id": "comment-12999311"
        },
        {
            "date": "2015-10-07T15:39:59+0000",
            "content": "LUCENE-5455 has a few tests that should be added here once this patch is cleaned up. \n\nThere are a few hurdles in cleaning this up though. The first is that this patch was based on a really old version and I can't seem to find anything in SVN or git older than 3.1. The second is that Spans are quite a bit different.\n\nBy the way, I've tried the unit tests in both issues and they still fail in 5.3+. The issue seems to be in WeightedSpanTermExtractor.extractWeightedSpanTerms(). It first builds a list of all position spans, and then it adds all of those position spans to a map of the term irrespective of whether that term was used in that position span. Mike's patch addresses this by keeping a separate list of position spans per term.\n\nThe thing that's not fixed by the patch is the notion of when to stop recursing into the spans. I tried several methods of inspecting and classifying the spans but I either end up with too many positions (resulting in too many term highlights) or too few. \n\nAlan Woodward, why is this so hard? Can't we just use the same methods the searcher uses? Maybe create a new collector and re-search the incoming doc? ",
            "author": "Scott Stults",
            "id": "comment-14947050"
        },
        {
            "date": "2015-10-07T15:47:45+0000",
            "content": "I can't seem to find anything in SVN or git older than 3.1\n\nLucene and Solr were merged in the 3.1 version.  I knew that Solr was in a different place in SVN before that, but I did not know that Lucene was originally in a different location.  I found these locations in SVN for older versions:\n\nhttp://svn.apache.org/viewvc/lucene/java/\nhttp://svn.apache.org/viewvc/lucene/solr/ ",
            "author": "Shawn Heisey",
            "id": "comment-14947066"
        },
        {
            "date": "2015-10-07T16:10:01+0000",
            "content": "why is this so hard?\n\nIt's mainly because of NearSpansOrdered and caching it has to do on what underlying spans it saw at what positions.  By the time NearSpansOrdered says it has a match, the child spans may have moved on.\n\nAny way, recent changes to the Span APIs in 5x should make this solve-able.  See SpanCollector in Lucene 5.3.  I believe Alan Woodward may have some plans to update the highlighters to use this. If not I do likewise; stay tuned  ",
            "author": "David Smiley",
            "id": "comment-14947107"
        },
        {
            "date": "2015-10-07T18:53:20+0000",
            "content": "Thanks Shawn and David. FYI the tests in LUCENE-5455 are actually a superset of the tests attached here and they fail appropriately on 5x. I'll stay tuned! ",
            "author": "Scott Stults",
            "id": "comment-14947362"
        },
        {
            "date": "2018-01-06T16:02:36+0000",
            "content": "I decided to file a separate issue since we already have a patch here and my patch on LUCENE-8121 is for a different highlighter.  I ought to consider any tests in this patch for porting.  I'll close this one when that one is done. ",
            "author": "David Smiley",
            "id": "comment-16314715"
        },
        {
            "date": "2018-01-11T04:30:09+0000",
            "content": "It's very debatable how to close this... I'm setting to \"Won't Fix\" since the extensive patch Michael Goddard supplied towards the original Highlighter was not applied to it.  LUCENE-8121 addresses the issue in the UnifiedHighlighter.  I closed duplicated issues for the original Highlighter as \"Duplicate\".  I ported the test in LUCENE-5455 to LUCENE-8121 which I felt adequately revealed the problem that is fixed; no more is necessary IMO. ",
            "author": "David Smiley",
            "id": "comment-16321687"
        }
    ]
}