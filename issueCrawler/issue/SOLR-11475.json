{
    "id": "SOLR-11475",
    "title": "Endless loop and OOM in PeerSync",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "After problem described in SOLR-11459, I restarted cluster and got OOM on start. \n\nPeerSync#handleVersionsWithRanges contains this logic: \n\n\n    while (otherUpdatesIndex >= 0) {\n      // we have run out of ourUpdates, pick up all the remaining versions from the other versions\n      if (ourUpdatesIndex < 0) {\n        String range = otherVersions.get(otherUpdatesIndex) + \"...\" + otherVersions.get(0);\n        rangesToRequest.add(range);\n        totalRequestedVersions += otherUpdatesIndex + 1;\n        break;\n      }\n\n      // stop when the entries get old enough that reorders may lead us to see updates we don't need\n      if (!completeList && Math.abs(otherVersions.get(otherUpdatesIndex)) < ourLowThreshold) break;\n\n      if (ourUpdates.get(ourUpdatesIndex).longValue() == otherVersions.get(otherUpdatesIndex).longValue()) {\n        ourUpdatesIndex--;\n        otherUpdatesIndex--;\n      } else if (Math.abs(ourUpdates.get(ourUpdatesIndex)) < Math.abs(otherVersions.get(otherUpdatesIndex))) {\n        ourUpdatesIndex--;\n      } else {\n        long rangeStart = otherVersions.get(otherUpdatesIndex);\n        while ((otherUpdatesIndex < otherVersions.size())\n            && (Math.abs(otherVersions.get(otherUpdatesIndex)) < Math.abs(ourUpdates.get(ourUpdatesIndex)))) {\n          otherUpdatesIndex--;\n          totalRequestedVersions++;\n        }\n        // construct range here\n        rangesToRequest.add(rangeStart + \"...\" + otherVersions.get(otherUpdatesIndex + 1));\n      }\n    }\n\n\n\nIf at some point there will be\n\n ourUpdates.get(ourUpdatesIndex) = -otherVersions.get(otherUpdatesIndex) \n\nloop will never end. It will add same string again and again into rangesToRequest until process runs out of memory.",
    "attachments": {
        "SOLR-11475.patch": "https://issues.apache.org/jira/secure/attachment/12899122/SOLR-11475.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-20T09:53:58+0000",
            "content": "I think throwing exception in case of ourUpdates.get(ourUpdatesIndex) = -otherVersions.get(otherUpdatesIndex) than OOM\n\nPushkar Raste, Shalin Shekhar Mangar What do you think? ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16212444"
        },
        {
            "date": "2017-10-20T17:34:00+0000",
            "content": "Version numbers are monotonically increasing sequence numbers and for\ndeletes sequence number is multiplied by -1\n\nI dont think we would ever have version number X in replica's tlog and -X\nin leader's (or any other replica's) tlog\n\nCan you provide a valid test case for your issue. I am not in front of\ncomputer right now, however, IIRC tests have token PeerSync in the name.\n\n\nOn Oct 20, 2017 5:54 AM, \"Andrey Kudryavtsev (JIRA)\" <jira@apache.org>\nwrote:\n\n\n     [ https://issues.apache.org/jira/browse/SOLR-11475?page=\ncom.atlassian.jira.plugin.system.issuetabpanels:all-tabpanel ]\n\nAndrey Kudryavtsev mentioned you on SOLR-11475\n--------------------------------------\n\nI think throwing exception in case of {{ourUpdates.get(ourUpdatesIndex) =\n-otherVersions.get(otherUpdatesIndex)}} than OOM\n\nPushkar Raste, Shalin Shekhar Mangar What do you think?\n\n\ncomment\n\nHint: You can mention someone in an issue description or comment by typing\n\"@\" in front of their username.\n\n\n\n\n\u2013\nThis message was sent by Atlassian JIRA\n(v6.4.14#64029) ",
            "author": "Pushkar Raste",
            "id": "comment-16212935"
        },
        {
            "date": "2017-10-23T09:09:43+0000",
            "content": "Pushkar Raste, In SOLR-11459 I described how I got into this X / -X situation. In short - cause of (probable) defect in distributed in-place updates. \n\nBut having  OOM here because of another bug(s) is not a good idea imho. I even would prefer to have an exception with message like Your index is corrupted, pls clear your tlog... on start instead.  ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16214845"
        },
        {
            "date": "2017-10-23T12:32:24+0000",
            "content": "If you are blocked then you can try to turn using versionRanges off and fallback to using individual versions. \n\nIf you can wait for a code fix, I will take a stab at it this weekend. Solution I am thinking is keeping a counter and incrementing it for every iteration and if we don't break from the outermost `while` loop before `counter > Math.max(ourUpdates.size(), otherVersions.size())` then throw an exception. \n\nor in the `else` before we create a new rage add a check of X and -X and throw an exception if that is true ",
            "author": "Pushkar Raste",
            "id": "comment-16215049"
        },
        {
            "date": "2017-11-24T06:00:59+0000",
            "content": "Here is a working patch. \nI came up completely hypothetical scenario where one replica has a version ver and other has version -version.\n\nShalin Shekhar Mangar / Noble Paul / Ishan Chattopadhyaya \n  Can you please take look at the patch.\n\nI still don't understand how can one get into this scenario but robust check wouldn't hurt.  ",
            "author": "Pushkar Raste",
            "id": "comment-16264959"
        }
    ]
}