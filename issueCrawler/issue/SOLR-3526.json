{
    "id": "SOLR-3526",
    "title": "Remove classfile dependency on ZooKeeper from CoreContainer",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "type": "Wish",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "We are using Solr as a library embedded within an existing application, and are currently developing toward using 4.0 when it is released.\n\nWe are currently instantiating SolrCores with null CoreDescriptors (and hence no CoreContainer), since we don't need SolrCloud functionality (and do not want to depend on ZooKeeper).\n\nA couple of months ago, SearchHandler was modified to try to retrieve a ShardHandlerFactory from the CoreContainer. I was able to work around this by specifying a dummy ShardHandlerFactory in the config.\n\nNow UpdateRequestProcessorChain is inserting a DistributedUpdateProcessor into my chains, again triggering a NPE when trying to dereference the CoreDescriptor.\n\nI would happily place the SolrCores in CoreContainers, except that CoreContainer imports and references org.apache.zookeeper.KeeperException, which we do not have (and do not want) in our classpath. Therefore, I get a ClassNotFoundException when loading the CoreContainer class.\n\nIdeally (IMHO), ZkController should isolate the ZooKeeper dependency, and simply rethrow KeeperExceptions as org.apache.solr.common.cloud.ZooKeeperException (or some Solr-hosted checked exception). Then CoreContainer could remove the offending import/references.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13292082",
            "date": "2012-06-08T23:16:15+0000",
            "content": "I'll defer on the large topic to miller/yonik/sami, but as to a specific comment...\n\nNow UpdateRequestProcessorChain is inserting a DistributedUpdateProcessor into my chains, again triggering a NPE when trying to dereference the CoreDescriptor.\n\n...please note the updated javadocs for UpdateRequestProcessorChain.init... \n\n\n  /**\n   * Initializes the chain using the factories specified by the <code>PluginInfo</code>.\n   * if the chain includes the <code>RunUpdateProcessorFactory</code>, but \n   * does not include an implementation of the \n   * <code>DistributingUpdateProcessorFactory</code> interface, then an \n   * instance of <code>DistributedUpdateProcessorFactory</code> will be \n   * injected immediately prior to the <code>RunUpdateProcessorFactory</code>.\n   *\n   * @see DistributingUpdateProcessorFactory\n   * @see RunUpdateProcessorFactory\n   * @see DistributedUpdateProcessorFactory\n   */\n\n\n\n...and note the existence of NoOpDistributingUpdateProcessorFactory...\n\n\n/**\n * A No-Op implementation of DistributingUpdateProcessorFactory that \n * allways returns null.\n * <p> \n * This implementation may be useful for Solr installations in which neither \n * the <code>{@link DistributedUpdateProcessorFactory}</code> nor any custom \n * implementation of <code>{@link DistributingUpdateProcessorFactory}</code> \n * is desired (ie: shards are managed externally from Solr)\n * </p>\n */\n\n\n\n "
        },
        {
            "author": "Michael Froh",
            "id": "comment-13292689",
            "date": "2012-06-11T08:38:35+0000",
            "content": "Oh, thanks a lot for pointing that out, Hoss! I had completely missed that part.\n\nMy wish for the removal of the KeeperException reference from CoreContainer still stands, but using NoOpDistributingUpdateProcessorFactory lets me remove my current hacky solution (adding a dummy org.apache.zookeeper.KeeperException in one of my libraries). "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15014121",
            "date": "2015-11-19T18:43:03+0000",
            "content": "GitHub user msfroh opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/211\n\n    SOLR-3526: Remove classfile dependency on ZK for core Solr classes\n\n    Replace references to o.a.z.KeeperException with a Solr-owned\n    exception and push uses of o.a.z.data.Stat into ZkController, so that\n    users of vanilla Solr (not SolrCloud) don't need to have ZooKeeper in\n    their classpath.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/msfroh/lucene-solr trunk\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/211.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #211\n\n\ncommit 1d7c8c4cf8fb86c38a55ad544877a824efddec9f\nAuthor: Michael Froh <froh@amazon.com>\nDate:   2015-11-19T18:05:28Z\n\n    SOLR-3526: Remove classfile dependency on ZK for core Solr classes\n\n    Replace references to o.a.z.KeeperException with a Solr-owned\n    exception and push uses of o.a.z.data.Stat into ZkController, so that\n    users of vanilla Solr (not SolrCloud) don't need to have ZooKeeper in\n    their classpath.\n\n "
        },
        {
            "author": "Michael Froh",
            "id": "comment-15014134",
            "date": "2015-11-19T18:52:41+0000",
            "content": "3.5 years later, I decided to try taking a stab at this myself. In the meantime, references to KeeperException and ZooKeeper's Stat class have worked their way through more core Solr classes, including SolrCore and RequestParams.\n\nAfter making these changes, I was able (from a clean work space) to successfully run the tests from TestEmbeddedSolrServerConstructors (removing the \"extends SolrTestCaseJ4\") without ZooKeeper on my classpath. (I couldn't extend SolrTestCaseJ4, since RevertDefaultThreadHandlerRule references org.apache.zookeeper.server.NIOServerCnxnFactory.)\n\nI'm not sure how to add a test to the Solr build that will verify that someone is able to bring up an EmbeddedSolrServer and use core features without ZooKeeper. Does anyone have any suggestions? "
        },
        {
            "author": "Michael Froh",
            "id": "comment-15014167",
            "date": "2015-11-19T19:05:49+0000",
            "content": "Also worth highlighting \u2013 the significant part of the change mostly involves decorating ZooKeeper calls in SolrZkClient to catch KeeperExceptions and rethrow as appropriately-typed SolrZkCheckedExceptions, I decorated those calls by turning them into lambdas. \n\nSo, the change can't easily be backported to 5.x. More significantly, I suppose, I changed the method signatures of about a hundred methods, which probably prevents backporting anyway.  "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15064558",
            "date": "2015-12-18T19:24:30+0000",
            "content": "I think the change makes sense, it's a valid concern that people using EmbeddedSolrServer doesn't want ZooKeeper dependencies. \nI'm wondering if there is an easy way to test this so that dependencies are not inadvertently added later. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-15064657",
            "date": "2015-12-18T20:01:28+0000",
            "content": "I'm not sure we want to deal with those kinds of restrictions. Solr has many dependencies and ZK is not a particularly large one. I don't see why it should get special attention or special rules. "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15094971",
            "date": "2016-01-12T21:20:13+0000",
            "content": "Github user msfroh closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/211 "
        }
    ]
}