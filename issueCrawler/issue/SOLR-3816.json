{
    "id": "SOLR-3816",
    "title": "Need a more granular nrt system that is close to a realtime system.",
    "details": {
        "affect_versions": "4.0",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java",
            "replication (java)",
            "search",
            "(3)",
            "SearchComponents - other",
            "SolrCloud",
            "update"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Need a more granular NRT system that is close to a realtime system. A realtime system should be able to reflect changes to the index as and when docs are added/updated to the index. soft-commit offers NRT and is more realtime friendly than hard commit but is limited by the dependency on the SolrIndexSearcher being closed and reopened and offers a coarse granular NRT. Closing and reopening of the SolrIndexSearcher may impact performance also.",
    "attachments": {
        "SOLR-3816-trunk_request_granularity.patch": "https://issues.apache.org/jira/secure/attachment/12569738/SOLR-3816-trunk_request_granularity.patch",
        "alltests_passed_with_realtime_turnedoff.log": "https://issues.apache.org/jira/secure/attachment/12551852/alltests_passed_with_realtime_turnedoff.log",
        "solr-3816-realtime_nrt.patch": "https://issues.apache.org/jira/secure/attachment/12544471/solr-3816-realtime_nrt.patch",
        "SOLR-3816-4.x.trunk.patch": "https://issues.apache.org/jira/secure/attachment/12551713/SOLR-3816-4.x.trunk.patch",
        "SOLR-3816_4.0_branch.patch": "https://issues.apache.org/jira/secure/attachment/12551186/SOLR-3816_4.0_branch.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13452045",
            "date": "2012-09-10T15:02:17+0000",
            "content": "The attached patch (for Solr 4.0-BETA) provides realtime NRT that is close to a realtime system and offers fine granular NRT at very high performance and offers a path to a true realtime system as and when the underlying IndexWriter system supports it. A performance of about 70,000 document adds / sec has been seen on a user system with realtime queries (almost 1.5-2x improvement over soft-commit)\n\nThe realtime NRT can be enabled by adding the following tag to SolrConfig.xml:\n\n<realtime visible=\"milliseconds\">true/false</realtime>\n\nA true enables realtime nrt while false disables it.\n\nThe visible attribute controls the time a document may not visible in a search. Settng this to 0 means new documents are visible immediately in searches. Very High performance can be \nobserved with visible around 150-200ms.\nFor eg: <realtime visible=\"150\">true</realtime>\n\nThe other parameters supported are:\n\n<deleteDuplicates>true/false</deleteDuplicates>\n\nA true deletes duplicates while a false allows duplicates to exist until a commit. Setting this to true may impact performance.\n\nThe same may be achieved by setting <maxBufferedDeleteTerms> to 1.\n\n\nNote: \n\n1. The cache (Query Result Cache, etc.) needs to be disabled for realtime NRT. \n2. Increase the number of file descriptors to around 64k before starting Solr\n\tie. ulimit -n 65536\n3. This patch is for Solr 4.0-BETA\n\n\n "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13486012",
            "date": "2012-10-29T13:36:58+0000",
            "content": "Lucene/Solr search and commit architecture is designed to work off a \u201cpoint-in-time snapshots\u201d of the index. Any add/update/delete needs a commit to be visible to searches (or atleast a soft-commit). soft-commit re-opens the SolrIndexSearcher object and can be a performance limitation if the soft-commits happen more than one per second, see blog:http://searchhub.org/dev/2011/09/07/realtime-get/. Realtime NRT  makes available a near realtime view of the index. So any changes made to the index is immediately visible. Performance is not a limitation as it does not close the SolrIndexSearcher object as with soft-commit.\n\nRealtime NRT is also different from realtime-get which is a simple lookup by id and needs the transaction log to be enabled. realtime-get does not have search capability. Realtime NRT allows full search, so you could search by id, text, location, etc. using boolean, dismax, faceting, range queries ie. no change to existing functionality. No new request handlers to be defined in solrconfig.xml. So all of your existing queries work as it is with no changes, except that the results returned are in near real time. Realtime NRT also does not need the transaction update log needed by realtime-get. So you can turn this off for improved performance. autoCommit freq can also be increased to an hour from the default of 15 secs for improved performance (remember commits can slow down your update performance) \n\nMore info about Realtime NRT and a integrated download of  Solr 4.0 with Realtime NRT is available here:\nhttp://solr-ra.tgels.org/realtime-nrt.jsp\n\n\n(Attached a patch for Solr 4.0 release branch) "
        },
        {
            "author": "Radim Kolar",
            "id": "comment-13486034",
            "date": "2012-10-29T14:08:55+0000",
            "content": "patch should be against solr trunk. Solr 4.0 branch is for bugfixes only. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13486927",
            "date": "2012-10-30T15:06:15+0000",
            "content": "Since this NRT system does not re-open the SolrIndexSearcher, does it also not refresh its caches?  If it doesn't, wouldn't a cached filter query return incorrect results if the system received updates since when Solr started? "
        },
        {
            "author": "Daniel Collins",
            "id": "comment-13487000",
            "date": "2012-10-30T16:38:28+0000",
            "content": "@David, the original post does say \"The cache (Query Result Cache, etc.) needs to be disabled for realtime NRT.\", so presumably it skips the caches to provide its NRT capability (I'm still working through what the patch does myself). "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13487423",
            "date": "2012-10-31T01:01:08+0000",
            "content": "Nagendra Nagarajayya Have you done any benchmarks against Solr 4.0 that show any performance differences?\nNote that \"A 70,000 document insert with searches in realtime has been observed on a 4 core linux system. This is a real use case of realtime-search at a user location.\" doesn't really tell us much - e.g., who says regular Solr 4 can't achieve the same?\nIt would be best if you could provide something one could easily run and compare performance.  That will convince people.  Otherwise people have to set things up themselves....\n\nI looked at the patch quickly.  Looks clean.  No new classes.  Minor comments:\n\n\tvars_should_not_be_like_this norlikethis. e.g. not thread_id or threadid, but threadId to match the rest\n\tI spotted a few System.out.printlns\n\tI spotted some empty catch Trowable block(s?)\n\tSpotted e.print....()\n\n "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13488720",
            "date": "2012-11-01T14:29:54+0000",
            "content": "Attached a patch for the 4.x trunk. All tests pass with realtime turned off and turned on. Will attach the test logs also. "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13488752",
            "date": "2012-11-01T15:18:45+0000",
            "content": "@Otis:\n\nThe 70,000 update performance is a at a user site. I don't have access to their system other than what they let me know (can only share the performance info). They have also tried soft-commit which was around 20k-40k docs / sec.\n\nI don't have a formal benchmark. The performance tests done sometime back was with the MBArtists index (from the Solr Enterprise book) to measure performance and was about 10k docs / sec. My storage system is not the fastest, default/internal disk that came on a two core system. "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13488755",
            "date": "2012-11-01T15:21:20+0000",
            "content": "@David:\nYou have to disable the caches for now to return results in realtime (nrt).  "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13488905",
            "date": "2012-11-01T18:22:08+0000",
            "content": "Nagendra Nagarajayya Right, that is what I thought.  This doesn't make it clear this change is actually a performance improvement unfortunately - who knows if those people configured Solr optimally in the first place.   Any way you can put together a side by side comparison? "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13489391",
            "date": "2012-11-02T12:33:59+0000",
            "content": "@Otis:\n\nSolr config was a standard config. "
        },
        {
            "author": "Radim Kolar",
            "id": "comment-13489424",
            "date": "2012-11-02T13:32:16+0000",
            "content": "I will test performance of this as soon i will have enough free diskspace to load 100 GB into solr. "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13492457",
            "date": "2012-11-07T16:09:27+0000",
            "content": "@Otis:\n\nRegarding the performance improvement, apart from the performance improvement, realtime-search makes available a realtime (nrt) view of the index as to current Solr implementation of point-in-time snapshots of the index. So each search may return new results ...  "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13492551",
            "date": "2012-11-07T18:01:15+0000",
            "content": "Nagendra Nagarajayya Hmmm.... maybe I'm missing something.... but if you set the soft commit in Solr to something very, very low, then yes, while it is still technically point in time view, that point in time is shifted so frequently that it looks like RT search to a human - new results can show up with every new search.  So the effect can be as (N)RT as you choose with the soft commit frequency.  I think the only Q is whether that approach vs. the approach in your patch yields better performance, and it looks like Radim Kolar will test that soon and we're all anxiously waiting to see the results!  "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13494105",
            "date": "2012-11-09T16:37:37+0000",
            "content": "@Otis:\n\nYes, you could set to something low or 0, but this means it has to close and open the SolrIndexSearcher this often. SolrIndexSearcher is a heavy object that is reference counted so there may be searches going on, etc. has lots critical areas that need to be synchronized to close and reopen a new searcher, warms it up, etc.; was not meant for this kind of a use ...\n\nRealtime-search just gets a new nrt reader from the writer and passes this along to the Searcher, a lean searcher with no state. In the future if lucene's developers make the reader more realtime so it sees more changes as they happen at the writer realtime-search should be able to handle it ...\n\n\"Quote from the user using realtime-search\"\nInsertion speed \u2013 while we can\u2019t really explain this, we are able to insert 70k records per second at a steady rate over time with RA, while we can only do 40k at a descending rate with normal Solr. Granted we haven\u2019t even slightly configured regular Solr for high speed insertion with regard to segment configs, but this was good for us to get us quickly off the ground.\n\"end quote\"\n\nI think has gotten better with the 4.0 release. I have also requested the user to benchmark and update the JIRA as I don't have the required hardware.\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13494554",
            "date": "2012-11-10T03:48:45+0000",
            "content": "Hmmmm... didn't check the sources now, but I'm not sure if the above is all correct.  Lucene gets the new Reader from IndexWriter, and I would think Solr uses that on soft commit and not something else, big and heavy.  Yes, there is Searcher/cache warming, but I'm not sure if that comes into play any more with NRT and soft commits. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13494815",
            "date": "2012-11-11T01:06:13+0000",
            "content": "So I took a quick look at the patch, and it's as I feared from earlier discussions - the reader is changed out from under the searcher at random times.  This approach simply won't work.  Lucene and Solr have searchers that work on a non-changing reader.\n\nYou'll get incorrect documents back, incorrect facets back, pretty much any number of random looking bugs because internal docids will be changing underneath you.  One only has to look at this snippet of the patch as an example of an attempt to be defensive about these changing docids:\n\n\n+      /* realtime NRT changes */\n+      // We may be getting docs that are beyond maxDoc, ignore for this request. \n+      if (doc < maxDoc) {\n+        bits.fastSet(doc);\n+      }\n\n\n\nSo how is it that tests can pass?  Well, the vast majority of our tests (like querying, faceting, etc), index documents and then test the requests.  They do not currently test requests while concurrently indexing (and such tests would be much more difficult to write of course... one would need to know exactly what documents made it into the index in order to know what the correct results should be.\n\nI'm sorry folks, but this really looks like a dead end. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13501194",
            "date": "2012-11-20T14:02:30+0000",
            "content": "Nagendra Nagarajayya should we close this then? "
        },
        {
            "author": "Radim Kolar",
            "id": "comment-13501198",
            "date": "2012-11-20T14:11:21+0000",
            "content": "What kind of incorrect results it can deliver? For me its okay to live with possibility of broken faceting because i do not use that feature. "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13508776",
            "date": "2012-12-03T14:52:27+0000",
            "content": "The check highlighted is a protection for the data structure being used so that it does not overflow. Docs ids should not change except on deletes and a commit. Commit opens a new searcher and a new reader so can watch for this to not change the nrt reader.\n\nIn case of merges, I have implemented a TimedSerialMergeScheduler so that merges are postponed to known time intervals. It works with both tiered and log policies. I can make available that as a patch. It seems to work well on my system here.  "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13508785",
            "date": "2012-12-03T15:02:44+0000",
            "content": "I have implemented a TimedSerialMergeScheduler so that merges are postponed to known time intervals. It works with both tiered and log policies. I can make available that as a patch. It seems to work well on my system here.\n\nSounds like that would be a good separate patch.\nI think Yonik Seeley can address your other comments "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13509460",
            "date": "2012-12-04T02:53:04+0000",
            "content": "@radim:\n\nFaceting should be working. Let me know if you see any problems. "
        },
        {
            "author": "Nagendra Nagarajayya",
            "id": "comment-13580328",
            "date": "2013-02-17T23:49:04+0000",
            "content": "@Yonik:\n\nPlease find a new patch. This patch removes the code that you had highlighted and introduces a request granularity based realtime-search. The mechanism guarantees that the underlying nrt reader does not change for a request. So all components of a request like search, faceting, highlight, etc. see the same view of the index. Each request though may return a new set of results. \n\nI have also implemented a intra-request granularity wherein each component like search, faceting, highlight, etc. may return different results.  This is not included in the patch.\n "
        }
    ]
}