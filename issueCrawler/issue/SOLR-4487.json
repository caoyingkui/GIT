{
    "id": "SOLR-4487",
    "title": "SolrException usage in solrj client code can't handle all possible http error codes returned by servers -- example \"413 Request Entity Too Large\"",
    "details": {
        "affect_versions": "4.0",
        "status": "Closed",
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Solr responds to excessively large queries with a 413 status code, but HttpSolrServer.request() loses this information when it tries to look up the code in SolrException.ErrorCode, resulting in a status code 0 in the thrown exception.\n\nBeing able to see this status code would be helpful.",
    "attachments": {
        "SOLR-4487.patch": "https://issues.apache.org/jira/secure/attachment/12579045/SOLR-4487.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13614473",
            "date": "2013-03-26T19:48:12+0000",
            "content": "Once upon a time (before SolrJ even existed), SolrException's constructor took in an arbitrary numeric code, and it was being used inconsistently, so the ErrorCode enum was defined to help ensure that when errors were thrown by solr, they were thrown using a consistent, finite subset, of http status codes that could be propagate to the end user.\n\nBut once solrj was added, and we started using SolrException in clients to wrap any and all errors returned by Solr via HTTP, i think it's a mistake to continue limiting SolrException to this enumeration.  \n\nSolr as a server should still have a finite, limited list of error codes that it throws, but if the SolrException is going to be used in the client, then it needs to be able to handle all of the possible status codes that might be returned by any arbitrary http server (or proxy) that the client is talking to.\n\nThe really ironic thing is that SolrException still tracks & exposes the status code as an arbitrary int (via the code() method) \u2013 it's only the constructor that limits you to the ErrorCode enum.\n\nSo i propose we re-add a constructor to SolrException that accepts an arbitrary int error code, and start using that in client code like HttpSolrServer where we are building up an exception from an arbitrary http server response.\n\nThe addition is trivial, but we should obviously add some javadocs explaining when/why to use each constructor...\n\n\n  public SolrException(int code, String msg, Throwable th) {\n    super(msg, th);\n    this.code = code;\n  }\n\n\n\n...any objections?\n\nalternative suggestion: add a package protected (or private?) subclass of SolrException to org.apache.solr.client.impl (or maybe even directly in HttpSolrServer) and put this constructor there.  \n\ni actually think i kind of like this alternative idea better, because i would help mitigate the risk of people using the int constructor with bogus error code values in other solr code. "
        },
        {
            "author": "Alexander Dietrich",
            "id": "comment-13627748",
            "date": "2013-04-10T12:54:16+0000",
            "content": "Sounds good to me. In addition, SolrException.code() could use some documentation, so people know that they're getting an HTTP status code (or 0). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13633504",
            "date": "2013-04-16T22:41:59+0000",
            "content": "Patch with fix and tests.\n\nholding off on committing just yet because some other HttpSolrServer changes that just got committed seem to have broken bunch of tests, waiting for things to return to stead state. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13633683",
            "date": "2013-04-17T02:17:15+0000",
            "content": "Committed revision 1468705.\nCommitted revision 1468718. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13653786",
            "date": "2013-05-10T10:32:59+0000",
            "content": "Closed after release. "
        }
    ]
}