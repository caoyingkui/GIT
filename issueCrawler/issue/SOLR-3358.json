{
    "id": "SOLR-3358",
    "title": "Capture Logging Events from JUL and Log4j",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "The UI should be able to show the last few log messages.  To support this, we will need to register an Appender (log4j) or Handler\n(JUL) and keep a buffer of recent log events.",
    "attachments": {
        "SOLR-3358-compile-path.patch": "https://issues.apache.org/jira/secure/attachment/12523213/SOLR-3358-compile-path.patch",
        "SOLR-3358-logging.patch": "https://issues.apache.org/jira/secure/attachment/12522647/SOLR-3358-logging.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-13253921",
            "date": "2012-04-14T01:16:11+0000",
            "content": "This patch moves the LoggerFramework abstraction to its own package and extends it to support registering listeners.\n\nSome things to note about this patch\n\n\tthe log info is static \u2013 we don't want multiple instances running for each Core\n\tBy default it keeps the last 50 error+ messages\n\n\n\nTo see the latest messages, call:\nhttp://localhost:8983/solr/admin/logging?since=0\n\nTo get messages since the last time you asked, pick the last timestamp and call:\nhttp://localhost:8983/solr/admin/logging?since=1334365940591\n\nto change the threshold call:\nhttp://localhost:8983/solr/admin/logging?threshold=ALL\n\n------\n\nThis adds log4j to the build classpath but it is not included in the .war\n "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13254365",
            "date": "2012-04-15T16:40:55+0000",
            "content": "Ryan, very cool .. what do you think about the following things:\n\n\tcombine the key-element which each of the elements in messages\n\tsplit the message element in several parts\n\tno specific call for changing the threshold, instead a /admin/logging?level=whatever&since=.. to get all messages for the specified level (and maybe higher ones)\n\tpossibility to filter the messages by logger\n\n\n\nRight now, i was not able to produce one entry which contains a trace-element, which format will i get there, some plain text which just needs to be shown in the UI?\n\nWill see if i will be able to bring up a first draft the next days  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13254390",
            "date": "2012-04-15T18:07:19+0000",
            "content": "After thinking a bit more on this, I think we can (optionally) take it another step forward.  The log appender/handler could actually send the event to a solr index.  Then we could support more complex search/filtering directly with solr.\n\nAs a first step, I'll replace my custom format with a SolrDocumentList so that anything we do for the in-memory solution could be reused for an index based solution.\n\nIn a cloud/distributed environment, if all the instances log to the same server it would be much easier to spot problems across the whole system.\n\nI'll work up a patch\n\nRight now, i was not able to produce one entry which contains a trace-element\n\ntry: \nhttp://localhost:8983/solr/admin/logging?since=0&test=true\nthis will add a message (and exception) at each level\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13255199",
            "date": "2012-04-17T00:10:09+0000",
            "content": "Here is an updated patch.\n\nRather then have a static initialization in a RequestHandler, this moves the LogWatcher to CoreContainer and makes sure it is initialized early in the process.\n\nThis also avoids wrapping each event like the previous patch.  Each framework needs to convert the message (LogRecord or LoggingEvent) to a SolrDocument that gets passed to the UI \n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13255789",
            "date": "2012-04-17T18:16:58+0000",
            "content": "Added key infrastructure in r1327210. \n\nI will make new issues for ongoing work "
        },
        {
            "author": "Chris Male",
            "id": "comment-13256150",
            "date": "2012-04-18T02:31:20+0000",
            "content": "Hey Ryan,\n\nMy IntelliJ is complaining about compiling Log4jWatcher.  I think its because of the classpath collision of the log4j and log4j-over-slf4j jars.  Both include a org.apache.log4j.LogManager and org.apache.log4j.spi.LoggingEvent, yet they aren't the same classes.  Any thoughts here? I'm not sure we can have the jars as they are. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13256632",
            "date": "2012-04-18T15:14:38+0000",
            "content": "Ryan, Maven compile is failing, AFAICT as a result of your commit: https://builds.apache.org/job/Lucene-Solr-Maven-trunk/459/consoleText "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13256675",
            "date": "2012-04-18T16:21:51+0000",
            "content": "Ryan, Maven compile is failing, AFAICT as a result of your commit: https://builds.apache.org/job/Lucene-Solr-Maven-trunk/459/consoleText\n\nI just committed a fix: from solr-core POM, exclude log4j-over-slf4j transitive dependency from solrj dependency.  Compile/test works locally for me. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13256689",
            "date": "2012-04-18T16:44:19+0000",
            "content": "\nMy IntelliJ is complaining about compiling Log4jWatcher. I think its because of the classpath collision of the log4j and log4j-over-slf4j jars. Both include a org.apache.log4j.LogManager and org.apache.log4j.spi.LoggingEvent, yet they aren't the same classes. Any thoughts here? I'm not sure we can have the jars as they are.\n\nAnt compilation succeeds only because log4j is ordered before log4j-over-slf4j in the classpath.  This is bad. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13256694",
            "date": "2012-04-18T16:54:09+0000",
            "content": "thanks steven\n\nI'm looking at the pom issue now.  Ideally the over* will be optional dependencies in solrj, excluded from solr-core and included in the .war  (this lets the end user decide what logging framework they actually use)\n\nFor the ant build path, any suggestions?  we can exclude it from core, and then add it back to the .war file.  I'm not sure how to get the ivy stuff setup to have .war dependencies though.\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13256695",
            "date": "2012-04-18T16:55:15+0000",
            "content": "Reopening to fix Solr compilation classpath to exclude log4j-over-slf4j "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13256704",
            "date": "2012-04-18T17:07:52+0000",
            "content": "For the ant build path, any suggestions? \n\nAll solr/lib/ jars are put on the compilation classpath via the additional.dependencies path.  I added log4j-over-slf4j to the exclude list and compile/test for all solr+contribs succeeds:\n\n\n  <path id=\"additional.dependencies\">\n-   <fileset dir=\"${common-solr.dir}/lib\" excludes=\"${common.classpath.excludes}\"/>\n+   <fileset dir=\"${common-solr.dir}/lib\"\n+            excludes=\"${common.classpath.excludes},log4j-over-slf4j*\"/>\n    <fileset dir=\"${common-solr.dir}/example/lib\" excludes=\"${common.classpath.excludes}\"/>\n    <fileset dir=\"lib\" excludes=\"${common.classpath.excludes}\" erroronmissingdir=\"false\"/>\n  </path>\n\n\n\nwe can exclude it from core, and then add it back to the .war file. I'm not sure how to get the ivy stuff setup to have .war dependencies though.\n\nant dist under solr/webapp/, which produces the .war, doesn't use additional.dependencies - instead it uses common.classpath.excludes.  So I think with the above change, log4j-over-slf4j will continue to be included in the .war. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13256708",
            "date": "2012-04-18T17:12:35+0000",
            "content": "So I think with the above change, log4j-over-slf4j will continue to be included in the .war.\n\nConfirmed - after running ant dist from solr/webapp/ with the above change in solr/common-build.xml, I can see from running jar tvf solr/dist/*.war:\n\n\n...\n481535 Wed Mar 31 00:25:34 EDT 2010 WEB-INF/lib/log4j-1.2.16.jar\n 20639 Mon Oct 31 18:46:50 EDT 2011 WEB-INF/lib/log4j-over-slf4j-1.6.4.jar\n...\n\n\n\nBut as you can see, log4j is still there - is that intentional, Ryan? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13256710",
            "date": "2012-04-18T17:15:05+0000",
            "content": "hmm, 4 logging jars, excluding certain jars for different things here and there,\nthis creates a lot of complexity and dependency management.\n\nlog4j-over-slf4j already has the log4j api, it must for it to work (http://www.slf4j.org/legacy.html)\n\nso I don't understand why the log4j jar is being added! Why is this necessary?\nIf we are going to add log4j, then slf4j should removed,\notherwise the whole purpose of a logging facade is defeated.\n\nOne of these must go. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13256712",
            "date": "2012-04-18T17:16:11+0000",
            "content": "Steven, do these .pom changes make sense to you?\n\n+1 on your additional.dependencies change\n\nThe problem with idea build is that it includes everything in lib.  The options I see are to either list the jars explicitly (leaving out -over-slf4j) or make a new lib folder under webapp.  Thoughts? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13256717",
            "date": "2012-04-18T17:22:41+0000",
            "content": "Steven, do these .pom changes make sense to you?\n\nYes, but there is a syntax issue - all of these:\n\n\n<scope>optional</scope>\n\n\n\nshould instead be:\n\n\n<optional>true</optional>\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13256723",
            "date": "2012-04-18T17:26:57+0000",
            "content": "so I don't understand why the log4j jar is being added! Why is this necessary?\n\nThe log4j-over-slf4j.jar only wraps the calls to write events, it does not wrap anything for handling events (Appender and LoggingEvent).  Ideally log4j would only be in the classpath for:\nhttps://svn.apache.org/repos/asf/lucene/dev/trunk/solr/core/src/java/org/apache/solr/logging/log4j/\n\nThe point of this is to capture events if the end user binds JUL or Log4j.  Alternatively I could put the log4j implementation elsewhere, but that seems kinda silly since lots of people actually use log4j\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13256739",
            "date": "2012-04-18T17:39:36+0000",
            "content": "Ryan: But you have now a classpath conflict. Depending on the order of jar files in filesystem and order of jar files resulting by that undefinedness, it can happen that log4j events are no longer transferred to slf4j (if user does not use log4j).\n\nThe log4j-over-slf is just a \"catcher\" for compatibility with external libs bundeled with Solr, that use log4j as their logging framework (it emulates log4j). The user has to sort out what chains he need to get correct logging, means: slf4 main jar, the delegator to log4j and log4j to do the actual work, or alternatively log4j-over-slf4j (to catch 3rd party logging events) and sl4fj (like it was before), that will log to JUL or nowhere. Theoretically maybe commons-logging cather is also needed for some 3rd party libs like commons-digester.\n\nI would like that we revert this commit and discuss the logging again! This will be a pain for all WAR users and is already wrong because of duplicate class files in classpath leading to bugs or maybe even stack overflows because of logging-loops (I have seen that already, one logging framework delegates to another one and finally to itsself). "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13256741",
            "date": "2012-04-18T17:41:45+0000",
            "content": "The problem with idea build is that it includes everything in lib. The options I see are to either list the jars explicitly (leaving out -over-slf4j) or make a new lib folder under webapp. Thoughts?\n\nI'd rather not list the jars explicitly - IntelliJ dependency configuration has been quite stable because whole directories are specified, and I'd rather not change that if possible.\n\nSo my vote is to make a new lib folder under webapp.\n\n(I can confirm, though, that explicitly listing all jars except log4j-over-slf4j allows compilation and testing to succeed.)\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13256762",
            "date": "2012-04-18T18:05:17+0000",
            "content": "I would like that we revert this commit and discuss the logging again!\n\nI'll pull out the log4j implementation, but leave in the JUL one \u2013 is that OK for now?  or take out the whole thing? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13256796",
            "date": "2012-04-18T18:37:45+0000",
            "content": "log4j implementation pulled out in r1327608\n\nLet me know if you want me to pull out the whole thing...\n\n\nThis will be a pain for all WAR users\n\nNote the .war does not include log4j.jar\n\nThe aim is to provide a log4j implementation that can be used if the end user implements logging with log4j.\n\nAgain, I am happy to put this elsewhere, but given that log4j is pretty common it would be nice to make it work out-of-the-box\n\nThe first question is if we want to support log4j out of the box.\n\nIf so, I think the right approach is to add a new lib folder to webapp and put all the slf4j-over .jar files in there "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13256815",
            "date": "2012-04-18T18:49:42+0000",
            "content": "I'm gonna dodge your question about 'do we support logging framework X' because i don't really\ncare about logging, i just piped up because i care about the build or release packaging being\ncomplicated.\n\nThe issue stumbles upon an existing problem actually: the solr dependencies and compilation classpaths\nare already quite confusing:\n\n\n\tsolr tests suck in huge classpaths from solr/lib and example/lib and other places: not really\n  testing the 'desired classpath'. For example, nobody wants solrj to depend on lucene-core or \n  lucene-spellchecker, but i can easily add new SpellChecker() to solrj java files and all tests pass.\n\tthe lack of separation (e.g core/lib and solrj/lib), makes packaging a mystery: i dont even know\n  what packaging magic makes the solrj-lib in the binary distribution. But whatever it is probably \n  error-prone (SOLR-3374)\n\tthe webapp/ is confusing to me: if solr core doesn't actually depend on jetty and can even work\n  embedded, then why does it have classes that include/extend jetty/servlet classes? Shouldn't all\n  this stuff be in webapp/ to cleanly separate it out?\n\tthe example/ in my opinion should also be treated as another 'module' and the 'example tests' should\n  sit underneath it. I think its confusing how other tests reach around to the example.\n\n\n\nI think these are generally unrelated to your patch: but trying to do what you want with logging jars\njust puts it over the edge in complexity.\n\nIf things like alternative logging frameworks and servlet containers are actually intended to be supported,\nthen shouldn't we:\n\n\tfix all these classpaths to be per-module, enforcing that our dependencies are what we think they are,\n  and that we package up what we think we are packaging up.\n\tadd things like alternative ivy configurations to allow us to test these different implementations\n (e.g. log4j, tomcat, etc) at least in hudson via -D switches, otherwise how do we know they actually work \n  without manual testing?\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13256845",
            "date": "2012-04-18T19:06:26+0000",
            "content": "Hi,\n\nI strongly agree here with Robert, one thing to add: Maven (sorry) has the notion of \"runtime\", \"test\" and \"compile\" (and even \"test-compile\") classpaths, which may all be different. Log4J is not the only problem that we have on that, since the upgrade to Jetty 8 we have a serious flaw here, too: I just repeat that on every issue because it seems nobody takes care or maybe nobody understands the problem: The Solr webapp / Solr core should be compatible with a lot of servlet containers. All on-the-market stable servlet containers are build on servlet-api 2.4 or 2.5. For compiling Solr-webapp, this API is enough and we must test and compile against and only against servlet-api-2.4 (like we did with Java 5 in LuSolr 3.x). If we then run tests with Jetty 8, we must of course plug in the Jetty-provided servlet-api (which is 3.0), but for compile we must use the generic original servlet-api-2.4 interfaces JAR file from Sun Microsystems (not a Jetty or Tomcat fake).\n\nFor compiling Solr Core, we should only have the slf4j-api.jar file in classpath, no impls or delegators! No log4j, no commons-logging. To compile those \"extra addons loaded by reflection\", we can use a separate compilation unit only containing the appender/listerners for various logging systems compiled solely against its own oficially provided JAR file (not e.g. log4j-over-sfl4j.jar, whcih is a fake like mentioned above).\n\nMy proposal:\n\n\n\tWe should separate the lib folder to handle compile time-only references and runtime/tests execution. The runtime classpatch is also packaged into WAR file.\n\tAs Robert suggests: More clear separation into modules, so Solr core does not need jetty/servlet classes to compile or even run!\n\tOnly use original interface JARs on the minimum required version (servlet 2.4), from the official provider (servlet-api 2.4 from Sun Microsystems, log4j from Apache,...) while compiling (like using Java 5 rt.jar in Lucene 3.x), to ensure compatibility with public APIs.\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13256852",
            "date": "2012-04-18T19:10:12+0000",
            "content": "\nI strongly agree here with Robert, one thing to add: Maven (sorry) has the notion of \"runtime\", \"test\" and \"compile\" (and even \"test-compile\") classpaths, which may all be different.\n\nThe parallel exists in ivy, its easy to use. its called configurations (we actually already use these), and you can\nname them whatever you want.\n\nwith such configurations we could even have things like test-classpath-jetty, test-classpath-tomcat, test-classpath-log4j, whatever whatever.\n\nWe already use configurations (for a different purpose) in some of the solr ivy.xml's... \n\nIf we wanted, i'm sure such a thing could be used to even e.g. implement lucene's test-backwards and things like that\nin the future. This is really a similar situation in many ways if you think about it... "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13256860",
            "date": "2012-04-18T19:16:24+0000",
            "content": "yes, solr classpath is a disaster!  I agree with everything you say/suggest, i figured this was the tradeoff for avoiding maven\n\nThe other thing to consider is a test classpath \u2013 the only class that uses jetty in the src tree is JettySolrRunner.  I think that could be moved to test.\n\nre SpellChecker in solrj.  The maven build should fail if you do this since it does use different classpaths for each module.  (not a real solution, but just pointing it out)\n\nAs a first step, I think we should remove the single solr/lib folder and replace it with:\n solrj/lib\n core/lib\n core/lib-test  (includes jetty)\n webapp/lib (has the slf4j-over stuff)\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13256863",
            "date": "2012-04-18T19:21:04+0000",
            "content": "For compiling Solr-webapp, this API is enough and we must test and compile against and only against servlet-api-2.4\n\nFWIW, the maven build uses 2.4 so we would get a jenkins failure if we use something 3.0 specific\n\nif we had different lib/classpath for core/lib-test and example/lib we could use jetty-7 in core/lib-test and jetty-8 in example/lib \u2013 this would let us test both jetty 7 and 8 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13256867",
            "date": "2012-04-18T19:25:07+0000",
            "content": "Trying to support different servlet containers, different logging frameworks, etc, is a mess... IMO, we should be considering Solr more as a server (and the fact that it uses Jetty and Java logging an implementation detail).  I don't think making everything pluggable buys us much but a lot of headaches. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13256877",
            "date": "2012-04-18T19:31:20+0000",
            "content": "Well for one the current structure is really unrelated to maven. When Steve Rowe and I\nfirst started working on the build, there were other things to fix (core tests depended on contribs, etc).\n\nSo i think its improving, I'm not trying to complain: if we could have fixed this stuff\nsafely when transitioning to ivy, we would have. I feel like Chris Male and I spent an entire\nnight trying to figure out the best approach: populating the huge lib/ folder just like before\nsimple kept the issue scope contained.\n\nJust a few notes about this:\n\n\twe don't really need to be downloading jars and putting them in lib/ at all (LUCENE-3943).\n  what we have now is a 'transition mechanism' that works like the old build, but we should\n  really fix this: then people wont have issues with things like having stale jars or anything\n  else: and we avoid copying around or whatever. Still lets put this aside, we can still improve\n  things right now (see below)\n\ti agree with your suggestions, though i think we actually have jetty-test classes in test-framework?\n  so i think it should be solrj/lib, core/lib, test-framework/lib, etc (don't try to tackle the lib-test\n  initially, i think we should attack 'separation' first).\n\tafter accomplishing #2 above, we can then start to think about alternative configurations,\n  and whether or not we even want to try to do that before fixing #1. Fixing #1 would make this task\n  much simpler and cleaner. i don't think we should have a separate lib/ with jetty7 and example with jetty8,\n  because i think we would ultimately want the flexibility to be able to run both core and example tests with\n  any of (jetty6, jetty7, jetty8, tomcat-xx, ...), and this could be specified with a -D or something.\n  Perhaps the defaults are set to something like you suggest, but hudson could test other possibilities.\n\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13256878",
            "date": "2012-04-18T19:32:28+0000",
            "content": "Yup - by having nothing out of the box and trying to support everything you just ensure you support everything poorly. We should pick a framework and give good out of the box logging. We are a search server first, not a lib. I think our current logging situation is in the stone age. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13256885",
            "date": "2012-04-18T19:39:19+0000",
            "content": "Regardless of how you feel about whether or not we support the different containers,\nwhether solr should be modular or monolithic, the classpath for solrj etc is still totally wrong.\n\nYou can make it depend on anything in solr/lib (e.g. as i said put a SpellChecker or IndexWriter\nin a solrj class), and all tests pass. In fact, I can go find at least 2 situations (one caused\nby me, the other by merging SolrCloud) where this actually happened that solrj depended on lucene.\n\nOnly manual inspection finds this out, but tests should really fail.\n\nBesides the lack of no enforcement that solrj should only depend on certain things, there is no simple\nsolrj/lib folder for packaging solrj-lib (instead some error-prone inclusions/exclusions) "
        },
        {
            "author": "Chris Male",
            "id": "comment-13257125",
            "date": "2012-04-19T01:01:28+0000",
            "content": "+1 to the improvements of the solr classpaths and being wary of over pluggability.\n\nI think our current logging situation is in the stone age.\n\nAre you able to elaborate on what improvements you think should happen? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13263795",
            "date": "2012-04-27T17:01:40+0000",
            "content": "log4j implementation pulled out in r1327608\n\nI don't think this went right? It seems borked - now if Log4j is detected, it tries to load a class called Log4j which does not exist... "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13263845",
            "date": "2012-04-27T17:59:54+0000",
            "content": "check revision 1331522\n\nThis now logs an warning rather then throwing an exception when logging can not be initialized.\n\ndoes that fix thigns for you?\n "
        },
        {
            "author": "Antony Stubbs",
            "id": "comment-13417362",
            "date": "2012-07-18T18:45:56+0000",
            "content": "As per https://issues.apache.org/jira/browse/SOLR-3367?focusedCommentId=13417331&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13417331 , does anyone have a setup already for logback? "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-13418149",
            "date": "2012-07-19T07:55:11+0000",
            "content": "What if instead you add a collection for logs? I think this would just need a new slf4j implementation that uses solrj. We would not be forced to pick a logging package. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13603217",
            "date": "2013-03-15T07:58:35+0000",
            "content": "Closing this issue to be included in SOLR-3706 "
        }
    ]
}