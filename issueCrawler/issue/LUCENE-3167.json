{
    "id": "LUCENE-3167",
    "title": "Make lucene/solr a OSGI bundle through Ant",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We need to make a bundle thriugh Ant, so the binary can be published and no more need the download of the sources. Actually to get a OSGI bundle we need to use maven tools and build the sources. Here the reference for the creation of the OSGI bundle through Maven:\n\nhttps://issues.apache.org/jira/browse/LUCENE-1344\n\nBndtools could be used inside Ant",
    "attachments": {
        "LUCENE-3167.patch": "https://issues.apache.org/jira/secure/attachment/12492526/LUCENE-3167.patch",
        "LUCENE-3167_20130108.patch": "https://issues.apache.org/jira/secure/attachment/12563756/LUCENE-3167_20130108.patch",
        "lucene_trunk.patch": "https://issues.apache.org/jira/secure/attachment/12485598/lucene_trunk.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-12T14:46:10+0000",
            "content": "A starting point is here:\n\nDownloading the biz.aQute.bnd.jar package from http://dl.dropbox.com/u/2590603/bnd/biz.aQute.bnd.jar and put it in the libs home of ant.\n\nThen add this:\n\n\n          <bnd\n              classpath=\"src\"\n              eclipse=\"false\"\n              failok=\"false\"\n              exceptions=\"true\"\n              files=\"${common.dir}/lucene.bnd\" />\n\n\nin the lucene_trunk/lucene/common-build.xml file inside:\n\n\n  <macrodef name=\"build-manifest\" description=\"Builds a manifest file\">\n        <attribute name=\"title\" default=\"Lucene Search Engine: ${ant.project.name}\" />\n        <sequential>\n.....\n\n\nand in the same directory create a lucene.bnd file containing:\n\nExport-Package: *;-split-package:=merge-first\n\n\nNeed testing ",
            "author": "Luca Stancapiano",
            "id": "comment-13048339"
        },
        {
            "date": "2011-07-04T18:44:39+0000",
            "content": "Here a updated version using the correct classpath:\n\n      <property name=\"bndclasspath\" refid=\"classpath\"/>\n  \t  <taskdef resource=\"aQute/bnd/ant/taskdef.properties\" /> \n  \t  <bnd \n  \t      classpath=\"${bndclasspath}\" \n  \t      eclipse=\"false\" \n  \t      failok=\"false\" \n  \t      exceptions=\"true\"\n  \t      files=\"${common.dir}/lucene.bnd\" /> \n\nThe ant classpath is different by the maven classpath so there are differences in the resulting 'Export-Package' variable in the MANIFEST.MF but both are ok ",
            "author": "Luca Stancapiano",
            "id": "comment-13059540"
        },
        {
            "date": "2011-07-06T10:45:04+0000",
            "content": "Some OSGI informations are inside the pom.xml . So if we want an automatism to create the OSGI attributes in the MANIFEST.MF, we have to read inside the pom.xml.template files. \n\nTheese are the OSGI informations to add in the MANIFEST:\n\nBundle-License: http://www.apache.org/licenses/LICENSE-2.0.txt    (project.licenses.license.url in the parent pom.xml.template)\nBundle-SymbolicName: org.apache.lucene.misc    (project.groupId+project.artifactId in the pom.xml.template)\nBundle-Name: Lucene Miscellaneous      (project.name attribute in the pom.xml.template)\nBundle-Vendor: The Apache Software Foundation           (from the parent pom.xml.template)  \nBundle-Version: 4.0-SNAPSHOT           ($version variable from ant)\nBundle-Description: Miscellaneous Lucene extensions             (project.description from pom.xml.template)  \nBundle-DocURL: http://www.apache.org/                            (project.documentation.url in the parent pom.xml.template)\n\nElse we should duplicate the informations. What is the better road? ",
            "author": "Luca Stancapiano",
            "id": "comment-13060469"
        },
        {
            "date": "2011-07-06T10:53:34+0000",
            "content": "The approach I implemented in my patch (attached to LUCENE-1344) used template files for BND. I wonder if both - Ant as well as Maven could use those files. ",
            "author": "Gunnar Wagenknecht",
            "id": "comment-13060472"
        },
        {
            "date": "2011-07-06T12:12:37+0000",
            "content": "It depends by the structure of your templates. Can you tell me how is organized the tree of the template files? ",
            "author": "Luca Stancapiano",
            "id": "comment-13060522"
        },
        {
            "date": "2011-07-07T14:24:49+0000",
            "content": "I expose this patch:\n\n  <macrodef name=\"build-manifest\" description=\"Builds a manifest file\">\n  \t<attribute name=\"title\" default=\"Lucene Search Engine: ${ant.project.name}\" />\n  \t<attribute name=\"bndtempDir\" default=\"${build.dir}/temp\"/>\n  \t<sequential>\n      <xmlproperty file=\"${ant.file}\" collapseAttributes=\"true\" prefix=\"bnd\"/>\n      <property name=\"bndclasspath\" refid=\"classpath\"/>\n  \t  <taskdef resource=\"aQute/bnd/ant/taskdef.properties\" /> \n  \t  <mkdir dir=\"@\n{bndtempDir}\"/>\n  \t  <bnd \n  \t      classpath=\"${bndclasspath}\" \n  \t      eclipse=\"false\" \n  \t      failok=\"false\" \n  \t      exceptions=\"true\"\n  \t      files=\"${common.dir}/lucene.bnd\" \n  \t      output=\"@{bndtempDir}\n/${final.name}-temp.jar\" /> \n  \t  <copy todir=\"${common.dir}/build\" flatten=\"true\">\n  \t      <resources>\n  \t          <url url=\"jar:file://@\n{bndtempDir}\n/${final.name}-temp.jar!/META-INF/MANIFEST.MF\"/>\n  \t      </resources>\n  \t  </copy>\n  \t</sequential>\n  </macrodef>\n\nIt rewrites the build-manifest macrodef because bndlib cannot append the information of the manifest.mf. I moved the information of the manifest in the lucene.bnd file appending the new osgi info:\n\n\nExport-Package: *;-split-package:=merge-first\nSpecification-Title: Lucene Search Engine: ${ant.project.name}\nSpecification-Version: ${spec.version}\nSpecification-Vendor: The Apache Software Foundation\nImplementation-Title: org.apache.lucene\nImplementation-Version: ${version} ${svnversion} - ${DSTAMP} ${TSTAMP}\nImplementation-Vendor: The Apache Software Foundation\nX-Compile-Source-JDK: ${javac.source}\nX-Compile-Target-JDK: ${javac.target}\nBundle-License: http://www.apache.org/licenses/LICENSE-2.0.txt\nBundle-SymbolicName: org.apache.lucene.${name}\nBundle-Name: Lucene Search Engine: ${ant.project.name}\nBundle-Vendor: The Apache Software Foundation\nBundle-Version: ${version}\nBundle-Description: ${bnd.project.description}\nBundle-DocUR: http://www.apache.org/\n\n\nI tested on lucene and solr modules and all jars are created with the correct OSGI info in the manifest.mf. Unluckily bndlib is not flexible so if you use bndlib you are forced to:\n\n\n\tprecompile the classes\n\tcreate a temp directory with a temporary jar\n\textract the new manifest from the jar and put it in the shared directory\n\n\n\n ",
            "author": "Luca Stancapiano",
            "id": "comment-13061340"
        },
        {
            "date": "2011-07-07T15:43:40+0000",
            "content": "I created an issue on https://github.com/bnd/bnd/issues/70 to parametrize the bnd ant task ",
            "author": "Luca Stancapiano",
            "id": "comment-13061393"
        },
        {
            "date": "2011-08-06T20:49:09+0000",
            "content": "I send a new patch. \n\n\treorganized with the new update of the common-build.xml in lucene and solr\n\tConfigurated bnd task so we don't need more to create a jar where extract the new MANIFEST.MF\n\n ",
            "author": "Luca Stancapiano",
            "id": "comment-13080457"
        },
        {
            "date": "2011-08-09T13:50:18+0000",
            "content": "Hi Luca,\n\nI downloaded the bnd jar and applied your patch, then ran ant jar-core under lucene/.  This produced a jar, and didn't seem too awfully slow.  The generated MANIFEST.MF looks mostly okay - see below for some issues.\n\nCan you do some timings with and without the OSGI stuff for creating jars?  If it doesn't take much extra time to produce the OSGi-compatible manifests, I think it would be okay to always produce them.\n\nYour patch doesn't have any special handling for Solr's war file manifest - does OSGi care about war files?  (I know nothing about OSGi.)\n\nThe bnd jar is Apache licensed, so we can put it into our repository, rather than require people to download the jar.  You can see an example of this in lucene/build.xml and lucene/common-build.xml with the Maven Ant Tasks jar - take a look at the definitions of the generate-maven-artifacts target and the maven-ant-tasks.classpath path.\n\nSome stuff that needs to be addressed before this can be committed:\n\n\n\tYou didn't check the box to grant the Apache license to your most recent patch; we can't commit your work unless you do this.\n\tPlease follow the patch naming convention when you name patches; e.g. for this issue, the patch should be named LUCENE-3167.patch.  See http://wiki.apache.org/lucene-java/HowToContribute#Creating_a_patch for more info.\n\tSolr's manifests are built twice - the jarify macro invokes the build-manifest macro.  The jarify macro may need more parameters to be able to handle both Solr and Lucene needs.\n\tIn the generated MANIFEST.MF, the Bundle-Description value is not interpolated properly - here's what I get: Bundle-Description: ${bnd.project.description}\n\tIn the generated MANIFEST.MF, DSTAMP, TSTAMP, and TODAY each have entries, but they don't appear in the lucene.bnd template - if possible, these should be eliminated.\n\tIn lucene.bnd, you have excluded ${user.name} from the Implementation-Version value - please re-sync with the unpatched value.\n\tIn lucene.bnd, should Bundle-DocUR be Bundle-DocURL?\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13081632"
        },
        {
            "date": "2011-08-31T21:12:33+0000",
            "content": "Hi Steven,\n\nI send a new updated patch.\n\nI added two new stamp properties in the build-manifest macro (start.touch.time and end.touch.time) that log the milliseconds of the process.\n\nWar files in OSGI are worked as the jar files. If the OSGI repository has functionalities to work with containers, it takes the informations directly by the bundle. The MANIFEST.MF file doesn't include informations about containers.\n\nI added the bnd library from http://dl.dropbox.com/u/2590603/bnd/biz.aQute.bndlib.jar (actually in the dropbox there is the only version for ant. See: http://www.aqute.biz/Bnd/Download) and added it to the ant classpath how for the 'generate-maven-artifacts' target.\n\nHere the responses to the tasks:\n\n1 - checked the box to grant the Apache license.\n\n2 - Renamed the patch according the convetion.\n\n3 - Deleted the bnd configuration for solr. Now only the build-manifest macro declared in the common-build.xml of lucene project is used. But I was forced to declare the attributes @\n{title}\n and @\n{implementation.title}\n as properties inside the build-manifest macro, else they didn't seen in the external file lucene.bnd.\n\n4 - I see the correct value of ${bnd.project.description} because the property is created through the configuration : <xmlproperty file=\"${ant.file}\" collapseAttributes=\"true\" prefix=\"bnd\"/> inside the build-manifest macro. Maybe I didn't added all in the previous patch. Let me know if the problem persists.\n\n5 - I excluded the DSTAMP, TSTAMP, and TODAY properties by the bnd configuration through the property: -removeheaders . The main problem is that the bnd ant task takes all the ant properties starting with an uppercased lecter and add them without ask. Should be a bnd property -inherit (true/false) that tells if import the ant properties but it doesn't work. This problem is signed in: https://github.com/bnd/bnd/issues/72. An other important thing is that the 'Name' ant property declared in some build.xml is not accepted by the bnd ant task. In the bnd ant task code there is an hard exception if the 'Name' property is found:\n\n\n\t\t\tif (header.equalsIgnoreCase(\"Name\")) {\n\t\t\t\terror(\"Your bnd file contains a header called 'Name'. This interferes with the manifest name section.\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n\n\nSo I was forced to rename the 'Name' property and its references in 'LuceneName'\n\n6 - Added the ${user.name} property in the Implementation-Version manifest property\n\n7 - Renamed the Bundle-DocUR property to Bundle-DocURL  ",
            "author": "Luca Stancapiano",
            "id": "comment-13094903"
        },
        {
            "date": "2011-08-31T21:45:00+0000",
            "content": "Hi Luca,\n\nI'll take a look at your new patch today or tomorrow.  \n\nHave you done any timings yet?\n\nI don't understand a couple of things you wrote:\n\nWar files in OSGI are worked as the jar files.\n\nDo you mean that OSGI treats .war files the same as .jar files?\n\nIf the OSGI repository has functionalities to work with containers, it takes the informations directly by the bundle.  The MANIFEST.MF file doesn't include informations about containers.\n\nWhat is a container?  What is a bundle?  Why does it matter that MANIFEST.MF does not include information about containers?  How are these things related to the other topics under discussion on this issue?  (I wasn't kidding when I wrote that I know nothing about OSGi.)\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13094931"
        },
        {
            "date": "2011-08-31T23:49:16+0000",
            "content": "Hi Stewen\n\nI've done the timing adding the two tstamp properties, so if you start ant will see in the log something as:\n\nTime starting for the build of manifest.mf: 10:55.50.186\n.....\nTime ending for the build of manifest.mf: 10:55.51.821\n\nThe time for each module changes from 1 to a mx of 5 seconds according the number of dependencies during the compilation.\n\nAbout the second point you must not care about the wars because war and jar are read in the same manner in a OSGI repository. External utilities can add jobs to recognize Servlet, EJB or other javaee components but this work is delegated to the OSGI repository.\n\nI've told about javaee containers and I'm sure you know them. \nA package (jar or war) containing the OSGI informations is called 'bundle'.  \n\nSo, don't care about the war. They will be deployed without problems in a OSGI repository!! ",
            "author": "Luca Stancapiano",
            "id": "comment-13095004"
        },
        {
            "date": "2011-09-13T14:38:37+0000",
            "content": "This patch fixes various problems with the created manifests.\n\nI measured OSGI-compliant manifest creation time for all 38 non-example jars (and the Solr war), and the total cost was 153.5 seconds, which is about 4 seconds per bundle on average.\n\nI also measured manifest creation time without the OSGI stuff, and it's basically instantaneous: single-digit milliseconds on average per jar/war.\n\nMaybe 4 seconds per jar/war is okay?  I'll wait a day or two before I commit so people can object or suggest alternatives.\n\nOne alternative to always building the OSGI manifests would be to only build them when preparing a release. ",
            "author": "Steve Rowe",
            "id": "comment-13103663"
        },
        {
            "date": "2011-09-13T14:40:10+0000",
            "content": "Here's the correct patch. ",
            "author": "Steve Rowe",
            "id": "comment-13103664"
        },
        {
            "date": "2011-09-13T14:44:40+0000",
            "content": "\nI measured OSGI-compliant manifest creation time for all 38 non-example jars (and the Solr war), and the total cost was 153.5 seconds, which is about 4 seconds per bundle on average.\n\nOuch: any idea why it takes so long? I think adding 153 seconds to the compilation time is very painful for developers.\n\nFYI: I had encoding problems with the patch (its ISO-8859-1 not UTF-8?) ",
            "author": "Robert Muir",
            "id": "comment-13103666"
        },
        {
            "date": "2011-09-13T14:56:13+0000",
            "content": "Ouch: any idea why it takes so long? I think adding 153 seconds to the compilation time is very painful for developers.\n\nAFAICT, the bnd tool visits everything in the classpath and records everything it finds in the manifest.  Luca, maybe you can add some more info here?\n\nFYI: I had encoding problems with the patch (its ISO-8859-1 not UTF-8?)\n\nHow did you experience these problems?  I generated it using (Cygwin's) svn diff on Windows 7.  I skimmed the patch and didn't see any above-ASCII chars.   The patch applies without complaint using Cygwin's patch.\n ",
            "author": "Steve Rowe",
            "id": "comment-13103671"
        },
        {
            "date": "2011-09-13T15:07:40+0000",
            "content": "Steven and I got to the bottom of this: the issue was the ant license files in lucene/lib. These have a \u00ae sign encoded in ISO-8859-1. ",
            "author": "Robert Muir",
            "id": "comment-13103682"
        },
        {
            "date": "2011-09-13T15:52:31+0000",
            "content": "it takes time because the bndlib is tied to the compilation of the sources. bndlib navigates recursively in the classpath of each module. More the dependencies are lot, more time is used. It is important to create the list of all the dependent classes ",
            "author": "Luca Stancapiano",
            "id": "comment-13103709"
        },
        {
            "date": "2011-09-23T17:30:37+0000",
            "content": "Because OSGi manifest creation is so slow, I will not commit this patch as-is.\n\nI think a good compromise would be to rewrite the make-manifest target to only make OSGi-conformant manifests either when a system property has been set from the command line or when generating release artifacts.  Or maybe only when generating release artifacts? ",
            "author": "Steve Rowe",
            "id": "comment-13113588"
        },
        {
            "date": "2011-09-23T17:49:49+0000",
            "content": "I imagine a property like 'dev' that excludes all heavy builds if it is not just ready. So it could be used for future ant tasks ",
            "author": "Luca Stancapiano",
            "id": "comment-13113606"
        },
        {
            "date": "2011-09-23T18:01:32+0000",
            "content": "I imagine a property like 'dev' that excludes all heavy builds if it is not just ready. So it could be used for future ant tasks\n\nI disagree.  The name of the property should tell people what it's for.  'dev' is the opposite of that.  Also, functionality like this should be individually configurable. ",
            "author": "Steve Rowe",
            "id": "comment-13113617"
        },
        {
            "date": "2011-09-23T19:32:32+0000",
            "content": "The risk for a property for a single functionality is that someone can forget it during the publishing. Surely I will add it but I think a global property (like 'release' or 'dev') that starts sub-tasks (osgi bundle in this case) too can be useful ",
            "author": "Luca Stancapiano",
            "id": "comment-13113679"
        },
        {
            "date": "2011-10-09T09:42:39+0000",
            "content": "I submit the new patch including the switch for the osgi compiler. I add a new property 'development'. This property could be used switch many other cases that can decrease the performances during the build. Here an example:\n\n\nant clean default\n\n\n\nIt will start in 'publish' mode. Actually only the osgi compile is added.\n\n\nant clean default -Ddevelopment=true\n\n\n\nIt will start in 'development' mode. The osgi compile will be removed and used the default manifest.mf\n\n\nant clean default -Ddevelopment=\n\n\n\nSame thing as before ",
            "author": "Luca Stancapiano",
            "id": "comment-13123656"
        },
        {
            "date": "2011-10-10T14:01:53+0000",
            "content": "Luca, you dropped the changes from my patch to solr/ and modules/.  Please put them back.\n\nI add a new property 'development'. This property could be used switch many other cases that can decrease the performances during the build.\n\nAs I have stated previously, I don't like this idea.\n\nThe default build with no properties specified should be development mode (i.e., don't do the extra work needed to build OSGi manifests).  The Lucene/Solr build is for the developers; it must be as fast as possible by default.\n\nThere should be a property named \"build.osgi.manifests\" or something similar that says what's happening, rather than hiding behind some anonymous \"publish mode\".  That is, don't call the property \"development\" or \"publish.mode\".  OSGi manifest building will be the only optional performance-decreasing element in the build, so there is no reason to generalize it at this point. ",
            "author": "Steve Rowe",
            "id": "comment-13124118"
        },
        {
            "date": "2011-11-24T09:47:55+0000",
            "content": "I tried it and it works and I like it. You are free to change it. Cheers ",
            "author": "Luca Stancapiano",
            "id": "comment-13156609"
        },
        {
            "date": "2011-11-24T15:07:07+0000",
            "content": "Luca, you chose to implement your changes in a form that I will not commit - I think I was pretty clear about that.  You too are free to change it.  Leaving it to me means that it will be a while before it gets committed, since I have 10 other things I care about more.  Cheers ",
            "author": "Steve Rowe",
            "id": "comment-13156747"
        },
        {
            "date": "2012-01-11T20:51:04+0000",
            "content": "Is comment-13113588 still the only problem with getting this committed? ",
            "author": "Ryan Hill",
            "id": "comment-13184382"
        },
        {
            "date": "2012-01-11T21:14:28+0000",
            "content": "Is comment-13113588 still the only problem with getting this committed?\n\nNo. comment-13113617 and comment-13124118 mention other problems. ",
            "author": "Steve Rowe",
            "id": "comment-13184397"
        },
        {
            "date": "2012-01-11T21:39:35+0000",
            "content": "The way forward, as I see it: \n\n\n\tMake a new property to control building of OSGi manifests, and give it a properly descriptive name, e.g. \"build-osgi-manifests\" (unlike in the latest patch, where \"dev\" is used as the property name, AFAICT to intentionally obfuscate the fact that OSGi manifests are being built).\n\tMake the default \"build-osgi-manifests\" property value false, so that devs don't have to wait around the extra 90 seconds on every build (unlike in the latest patch, where the default value is true).\n\tInclude solr/ and modules/ in the build modifications (unlike the latest patch, which excludes them).\n\tCause the \"build-osgi-manifests\" property to be set to true when packaging releases.\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13184412"
        },
        {
            "date": "2012-01-12T14:17:55+0000",
            "content": "Thanks for the helpful digest. Your approach sounds completely reasonable to me.\n\nI don't fiddle with ant much, but I'll take a look. ",
            "author": "Ryan Hill",
            "id": "comment-13184982"
        },
        {
            "date": "2012-04-25T15:12:00+0000",
            "content": "Out of curiousity, now that we are using ivy in our ant build, has anyone investigated \nthe upcoming ivy support for OSGI?\n\nWould it do what we want? http://ant.apache.org/ivy/history/trunk/osgi.html, http://ant.apache.org/ivy/history/trunk/osgi/standard-osgi.html, etc.\n\nIt seems to use the same utilities here, so I have a few concerns:\n\n\tit if slows down the build 90seconds, I think its better that to support OSGI this\n  would only be done inside prepare-release, not during normal 'ant test'. This way\n  our ordinary compile-test-debug cycle is unaffected. This is really important.\n\tI don't know anything about OSGI, but how do we know its \"correct\"? Just like any\n  thing else we include in our release, we shouldnt just be releasing arbitrary stuff\n  (even additional metadata) unless we have some mechanism to confirm that its correct.\n\tthe current ivy integration is labeled as experimental (making the above even more important).\n\n\n\nanyway I know nothing of OSGI, so maybe this is useless, I just wanted to bring it up. ",
            "author": "Robert Muir",
            "id": "comment-13261705"
        },
        {
            "date": "2012-04-25T15:48:39+0000",
            "content": "Ivy won't help you for this issue which is about adding OSGi metadata into the jar. Ivy can understand OSGi manifests but it is unable to write them. Tools like bnd (used in the patch IIRC) is definitively the way to go. ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-13261735"
        },
        {
            "date": "2012-08-01T18:53:10+0000",
            "content": "Is anyone actively working on this (i.e. is Luca's patch from October 2011 the latest one)? If not, I can take a look at addressing the concerns raised above. ",
            "author": "Jukka Zitting",
            "id": "comment-13426817"
        },
        {
            "date": "2012-08-01T20:47:51+0000",
            "content": "Hi Jukka, I don't think anyone is working on this (we don't really collectively have enough OSGI expertise around...).  So if you can help out that would be awesome!  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-13426882"
        },
        {
            "date": "2012-08-01T20:51:36+0000",
            "content": "sure, and I'd be happy to lend a hand here. ",
            "author": "Tommaso Teofili",
            "id": "comment-13426884"
        },
        {
            "date": "2012-08-02T20:06:55+0000",
            "content": "Hi guys, Nicolas, I confirm for the October 2011... in that time the patch worked.....I'm wondered that none has still committed the work...I will be here for help. Let me know! ",
            "author": "Luca Stancapiano",
            "id": "comment-13427569"
        },
        {
            "date": "2012-10-04T21:13:10+0000",
            "content": "We discussed this briefly with Tommaso and a few OSGi experts last week.\n\nWhile adding bundle metadata to the Lucene jars is fairly straightforward to implement, doing so comes with a commitment to maintain correct semantic versioning at the package-level (see http://www.osgi.org/wiki/uploads/Links/SemanticVersioning.pdf). Without such a commitment the package version information will eventually become outdated and incorrect, which can lead to tricky problems for OSGi deployments. Most notably properly managed package versions will often not follow the main product version numbers, as even when backwards-incompatible changes is introduced in one package, another package might still remain unchanged.\n\nThe best incremental solution here could be to initially export only one or two key packages for which semantic version information can be maintained without too much overhead going forward. A good starting point could be something like a separate facade package for which stronger-than-usual backwards compatibility promises can be made. Once there's more OSGi experience in the core Lucene community, more packages can be exported to OSGi clients. ",
            "author": "Jukka Zitting",
            "id": "comment-13469713"
        },
        {
            "date": "2012-10-04T21:32:50+0000",
            "content": "This seems like a significantly more complicated issue then than just modifying the ant build to add metadata.\nMaybe this build step should be addressed first (so someone can optionally do it with ant if they want), just like maven\nand leave the thornier back compat issue for another issue.\n\nFrom this PDF it seems OSGI imposes its own backwards compatibility policy that conflicts with ours, and would\nbe very difficult to maintain and detect if they were correct.\n\nI don't see why this would be useful at all: in basically every release binary compatibility is usually\nbroken in some way (and even if its not technically broken, maybe a methods behavior changes or something\nlike). Different lucene modules depend on each other and are only tested with the same version: today\nits not tested to use lucene-foobar-3.2.jar with a lucene-core-3.1.jar.\n\nSo the versioning in that whitepaper doesn't make much sense: I think if we are going to put OSGI information\nin the packages we should simply bump the major version for every release: even bugfix releases. ",
            "author": "Robert Muir",
            "id": "comment-13469736"
        },
        {
            "date": "2012-10-04T21:43:45+0000",
            "content": "Jukka, these are all good point. I'm the maintainer of the Lucene OSGi bundles in Eclipse with quite a bit experience in OSGi-ifying libraries. There is a trade-off between satisfying all of the points and being pragmatic. \n\nHaving real semantic versioning at the package level would be good for OSGi. However, for the time being, I simply use the main Lucene version for all package exports. That works today and should also be a first step here.\n\nFuture work (like removing split packages and package level versioning) should be done as separate steps. ",
            "author": "Gunnar Wagenknecht",
            "id": "comment-13469750"
        },
        {
            "date": "2012-10-04T21:56:36+0000",
            "content": "Wait: I'm saying I'm not sure these additional backwards compat things should be done at all.\n\nChanging things about the backwards compatibility policy to make development and releasing\nmore difficult is serious and I'm not seeing the benefit here.\n\nA better approach would be to adapt the OSGI integration to work well with Lucene's \nexisting backwards compatibility policy (http://wiki.apache.org/lucene-java/BackwardsCompatibility)\ninstead of the other way around. ",
            "author": "Robert Muir",
            "id": "comment-13469763"
        },
        {
            "date": "2012-10-04T22:04:49+0000",
            "content": "I count 280 packages in Lucene/Solr. ",
            "author": "Steve Rowe",
            "id": "comment-13469772"
        },
        {
            "date": "2012-10-04T22:20:19+0000",
            "content": "Robert Muir wrote:\n\nA better approach would be to adapt the OSGI integration to work well with Lucene's existing backwards compatibility policy (http://wiki.apache.org/lucene-java/BackwardsCompatibility) instead of the other way around.\n\nWhat Gunnar Wagenknecht says he's doing now seems close?:\n\n\nHaving real semantic versioning at the package level would be good for OSGi. However, for the time being, I simply use the main Lucene version for all package exports. That works today and should also be a first step here. ",
            "author": "Steve Rowe",
            "id": "comment-13469781"
        },
        {
            "date": "2012-10-04T22:25:21+0000",
            "content": "This conflicts with that PDF though... I guess I'm saying I disagree with that PDF completely  ",
            "author": "Robert Muir",
            "id": "comment-13469784"
        },
        {
            "date": "2012-10-04T22:28:17+0000",
            "content": "I disagree with the whitepaper too, except the part where is says that semantic versioning is optional. ",
            "author": "Steve Rowe",
            "id": "comment-13469786"
        },
        {
            "date": "2012-10-04T22:37:21+0000",
            "content": "Then we are back to my original suggestion above, that we start with just the ant integration\nas maven was done and don't try to change versioning nor back compat (this will be controversial, \nat least I will become really really annoying). ",
            "author": "Robert Muir",
            "id": "comment-13469789"
        },
        {
            "date": "2012-10-05T06:38:18+0000",
            "content": "In my opinion doing and (especially) maintaining the OSGi packages from ant would be a pain, on the other hand I can see that keeping two different versioning could be hard as well. That's the reason way I thought that, at least to start (as Jukka told), a facade package for explicitly exporting the main stuff for OSGi could be a solution.\nThere someone with enough OSGi experience could take care of the whole thing without causing much impact on the project.\nWhat I personally look for is having something that works out without much pain and Jukka's proposal looks to me to go in that direction.\nObviously if there are other ideas I think that they'd be more than welcome.\nGunnar's proposal could be ok as a starting point as well, but actually I don't know how hard it'd be to do that automatically with our build mechanism. ",
            "author": "Tommaso Teofili",
            "id": "comment-13470056"
        },
        {
            "date": "2012-10-05T12:45:43+0000",
            "content": "\nWhat Gunnar Wagenknecht says he's doing now seems close?:\n\nRight, which begs the question if people who understand this stuff can already\ndo this downstream, why should we (people who work on search engines) do it.\n\nIts just more stuff to go wrong when trying to release. ",
            "author": "Robert Muir",
            "id": "comment-13470272"
        },
        {
            "date": "2012-12-21T11:29:38+0000",
            "content": "now trying to rework Luca's patch to see if we can improve it, and have the OSGi manifest build disabled by default but maybe enabled for release and on demand (e.g. -Dosgi=true). ",
            "author": "Tommaso Teofili",
            "id": "comment-13537805"
        },
        {
            "date": "2012-12-23T19:01:30+0000",
            "content": "great, daje Tom   ",
            "author": "Luca Stancapiano",
            "id": "comment-13539074"
        },
        {
            "date": "2013-01-08T14:36:15+0000",
            "content": "New not final version of the patch.\n\nI'm not an Ant expert so I may be missing something, if that's the case feel free to correct / point me to where / how fix things.\n\nWith this new one it's possible to run ant compile -Dosgi=true to have OSGi ready jars' manifests so that single modules can be installed and started in an OSGi container.\nBy default however the OSGi build doesn't happen.\n\nWhat is still missing is a smart and non intrusive way of setting correctly the OSGi exported-package directive. Currently that's set to: org.apache.lucene*;version=${version},org.apache.lucene.*;version=${version};-split-package:=merge-first for all the bundles which is not correct.\n\nAs a side note I noticed that in lucene/core/build.xml the classpath is not set while is set to the core files in the root build.xml; this seems to me a bit odd, is there any specific reason for that?\nIn the patch I temporarily added the correct classpath in lucene/core/build.xml (which is needed for the OSGi build for the core to export the packages). ",
            "author": "Tommaso Teofili",
            "id": "comment-13546921"
        },
        {
            "date": "2013-03-15T22:44:58+0000",
            "content": "To respond to Robert Muir's question about why you (people who work on search engines) should do it.\n\nI see two reasons:\n\n1) People downstream may not KNOW how to do it, or have the time, or want to make all the possible choices over again, when people who know the engine and its packaging are more capable of sorting all that stuff out properly. I didn't get it right the first time (thank's to screwing up with) and now have to repeat.  It's taken you guys a year and a half; obviously not trivial!\n\n2) People downstream would like to do it in a way that does not outright conflict with other people downstream doing it! This is really a big, big deal. If I package it, and put it in a product, and someone else packages it, and puts it in their product \u2013 like for example, the Eclipse foundation \u2013 bad things can happen. I can't even predict WHAT bad things might happen, because I don't know what we might do differently. We could get lucky and not screw each other, but do I really want to trust the other guy \u2013 ALL the other guys \u2013 to do it right? Or do I do something like rename the packages to avoid any potential insanity? That has other problems...\n\nBottom line? I'd rather you guys do it \u2013 even if you don't do a good job of it. Even if I could do it 10x better, it is still 100x better for you to do it.\n\nMaybe I'll be able to help later, once I've sorted out my immediate needs. But in the meantime, I just wanted to let you know the effort is appreciated \u2013 even if it doesn't turn out perfectly.\n\nThanks. ",
            "author": "Bob Kerns",
            "id": "comment-13603944"
        },
        {
            "date": "2013-03-16T12:12:03+0000",
            "content": "\nBottom line? I'd rather you guys do it \u2013 even if you don't do a good job of it. Even if I could do it 10x better, it is still 100x better for you to do it.\n\nSure, its always better to ask someone else to take the burden. But I want the release process to continue to be smooth. The less unnecessary things we take on the better. The less manual stuff that needs to be checked the better.\n\nWe could package up linux RPMs and freebsd ports too, but we just leave this for downstream people. Could we do it better than those folks since we know the packaging? I don't know, but I don't really care either. Its better that we spend our time working on search engines so there are actual releases to put out there.\n\nRecently I threw up a 4.2.0 release candidate on a wednesday night, by monday the release was out. By wednesday my friend forwards an email from freebsd showing they had updated their package already: http://svnweb.freebsd.org/ports?view=revision&revision=314108 . Thats pretty damn efficient downstream packaging and a relatively short release cycle. It required almost no manual effort: I'm insisting that we keep it this way.\n\nSo again, this is just like maven. I push back hard, really hard on the issue because I'm really just saying \"don't add a feature without tests and force the release manager to manually verify the shit works\". I said the same things about maven and someone (thanks Steve!) added automatic testing of maven and then I never said another word about it. ",
            "author": "Robert Muir",
            "id": "comment-13604224"
        },
        {
            "date": "2013-03-16T14:08:32+0000",
            "content": "Just a very stupid question: Looking for \"OSGI\" in Wikipedia and other pages does not make it more clear to me. It confuses me more - this looks to me like completely useless and a duplicate of what Maven provides. Why do we need it when we release with Maven? Just because the Eclipse Foundation does not like Maven and wants to use their own \"standard\" OSGI? We decided to use Maven for publishing artifacts (in addition to the source and binary TGZ files). In my opinion, the Eclipse Foundation should provide a \"converter\" that makes Maven artifacts available to OSGI, they cannot force every project to support just another framework.\n\nMy last comment: If it is only adding some static strings to the META-INF of every JAR, who cares? But if you need crazy magic or must upload the JAR files to another site on the net, I am also -1! ",
            "author": "Uwe Schindler",
            "id": "comment-13604270"
        },
        {
            "date": "2013-03-16T14:35:30+0000",
            "content": "My last comment: If it is only adding some static strings to the META-INF of every JAR, who cares? But if you need crazy magic or must upload the JAR files to another site on the net, I am also -1!\n\nbasically I do agree with the fact that we should keep the release process as smooth as possible, that's why I was not pushing too much this myself.\nI don't think we should upload artifacts anywhere else (and I don't think that's the point here), using the BND Ant tasks with our Ant based build is instead not really smooth, at least as far as I could do.\nMy personal point here is if the Maven build already provides an \"OSGi friendly\" jar / manifest then (to me) we can mark this as resolved as I don't see why we should duplicate our efforts; probably we should instead fix the Maven configuration for the OSGi manifest as till now when I tried to deploy a released Lucene/Solr package into an OSGi container it didn't work correctly as the required manifest information wasn't there (which leads me to think that the problem may be related to the Maven profile used for the release).\n\nMy 2 cents. ",
            "author": "Tommaso Teofili",
            "id": "comment-13604277"
        },
        {
            "date": "2013-03-16T14:44:34+0000",
            "content": "The official Lucene Maven artifacts as uploaded to Maven Central are not built by Maven! They are build by ANT. The POM files in dev-tools are a separate build environment thats not used for releasing.\n\nThis means the missing meta-inf must be added by ANT. The question I have: Why no simple change the JAR task and add the few additional key-value pairs? This would be a simple patch, if it is just some more-or-less static properties derived from some ANT build properties (like module name, version,...). ",
            "author": "Uwe Schindler",
            "id": "comment-13604280"
        },
        {
            "date": "2013-03-16T15:31:04+0000",
            "content": "The official Lucene Maven artifacts as uploaded to Maven Central are not built by Maven! They are build by ANT\n\nthat's what I knew, but I then misunderstood your sentence when you said \"we release with Maven\", sorry for the confusion \n\nThis means the missing meta-inf must be added by ANT. The question I have: Why no simple change the JAR task and add the few additional key-value pairs? This would be a simple patch, if it is just some more-or-less static properties derived from some ANT build properties (like module name, version,...).\n\ngood point ",
            "author": "Tommaso Teofili",
            "id": "comment-13604305"
        },
        {
            "date": "2013-03-16T15:31:05+0000",
            "content": "If I simplify, Maven dependency management is about declaring that a jar depends on another. OSGi is more powerful/complex than that. It can do that jar to jar dependency, but it is not recommended by the advocates of OSGi. The prefered way is when dependencies are declared between the java packages. So instead of declaring a dependency on a jar, you declare a dependency on a java package. It is then like declaring a dependency on an API rather than an implementation. And then comes versioning into the mix : you have a version of an API (the java packages) and the version of the implementation (the jar/bundle). So that static metadata in the manifest is not trivial to maintain.\nThen here comes some tools to help, the patches here use \"bnd\". The java packages are somewhat part of the Java type system, so tools like bnd you can infer nearly automatically these dependencies. \n\nAlso note that contrary to the Maven world, the OSGi world doesn't have a world class reference repository. So you do not need to upload it anywhere else. I guess this issue is \"just\" about making the Lucene jars droppable in the OSGi environement as is.\n\nMaybe if the Lucene committers doesn't feel enough confortable with OSGi, they should let it to some external OSGi packagers, just like there are debian packagers. Here is a exemple of an Ivy repository maintained by 'packagers': https://code.google.com/p/ivyroundup/. There was a tentative for OSGi but it stalled: https://github.com/glyn/bundlerepo ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-13604306"
        },
        {
            "date": "2013-03-19T12:39:40+0000",
            "content": "\nMaybe if the Lucene committers doesn't feel enough confortable with OSGi, they should let it to some external OSGi packagers, just like there are debian packagers. Here is a exemple of an Ivy repository maintained by 'packagers': https://code.google.com/p/ivyroundup/. There was a tentative for OSGi but it stalled: https://github.com/glyn/bundlerepo\n\nYes, I think someone downstream should do it, outside of this project.\n\nI said the same thing about maven, that one didnt work out. But this had to do more with maven advocates lying about the necessity of it taking place in this project: turned out later this wasn't true and pretty much anybody can release anybody else's shit on maven central.\n\nI won't make the same mistake twice. ",
            "author": "Robert Muir",
            "id": "comment-13606281"
        },
        {
            "date": "2013-09-26T13:43:14+0000",
            "content": "reading again the whole history, and especially Robert's comment on eventually leveraging Ivy for this, I found https://ant.apache.org/ivy/history/trunk/osgi.html\n\nI don't know if and how it could be useful, I'll have a look and in case let you know. ",
            "author": "Tommaso Teofili",
            "id": "comment-13778785"
        },
        {
            "date": "2013-09-26T15:09:32+0000",
            "content": "from a first inspection it doesn't seem to enhance the basic Ant + bndTools based approach too much therefore I'm not sure it's worth going that path. ",
            "author": "Tommaso Teofili",
            "id": "comment-13778874"
        },
        {
            "date": "2013-09-26T15:17:12+0000",
            "content": "As wrote earlier, Ivy is indeed useless to build an OSGi Manifest, it is \"just\" able to understand an OSGi remote repository. Here Ant + bndTools is the perfect tool combination for this. (BTW I'm a maintainer of Ivy). ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-13778885"
        }
    ]
}