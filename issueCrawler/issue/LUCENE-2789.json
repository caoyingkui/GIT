{
    "id": "LUCENE-2789",
    "title": "Let codec decide to use compound file system or not",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/codecs",
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "While working on LUCENE-2186  and in the context of recent mails  about consolidating MergePolicy and LogMergePolicy I wanna propose a rather big change how Compund Files are created / handled in IW. Since Codecs have been introduced we have several somewhat different way of how data is written to the index. Sep codec for instance writes different files for index data and DocValues will write one file per field and segment. Eventually codecs need to have more control over how files are written ie. if CFS should be used or not is IMO really  a matter of the codec used for writing.\n\nOn the other hand when you look at IW internals CFS really pollutes the indexing code and relies on information from inside a codec (see SegmentWriteState.flusedFiles) actuall this differentiation spreads across many classes related to indexing including the LogMergePolicy. IMO how new flushed segments are written has nothing to do with MP in the first place and MP currently choses whether a newly flushed segment is CFS or not (correct me if I am wrong), pushing all this logic down to codecs would make lots of code much easier and cleaner.\n\nAs mike said this would also reduce the API footprint if we make it private to the codec. I can imagine some situations where you really want control over certain fields to be stored as non-CFS and other to be stored as CFS.  Codecs might need more information about other segments during a merge to decide if or not to use CFS based on the segments size but we can easily change that API. From a reading point of view we already have Codec#files that can decide case by case what files belong to this codec.\n\nlet me know the thoughts",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-12-02T11:32:43+0000",
            "content": "+1\n\nThis would be an awesome simplification and it really should be a private decision to the Codec. ",
            "author": "Michael McCandless",
            "id": "comment-12966070"
        },
        {
            "date": "2010-12-02T11:38:40+0000",
            "content": "I'd like to a see a switch like setNeverEverUseCompoundFiles(true) somewhere.\nWe'll still need to copypaste CFS handling code to each new Codec :/ ",
            "author": "Earwin Burrfoot",
            "id": "comment-12966071"
        },
        {
            "date": "2010-12-02T11:51:10+0000",
            "content": "Can we move the CFS code outside and the codec simply calls a class/component/whatever during merging and say: I have these files and want to create a CFS out of it? For reading something similar. ",
            "author": "Uwe Schindler",
            "id": "comment-12966076"
        },
        {
            "date": "2010-12-02T12:49:24+0000",
            "content": "We'll still need to copypaste CFS handling code to each new Codec :/\nI don't think that is true at all. Since adding stuff to a CFS is done afterwards we can implement that in a basic class same is true for reading from it really. \n\nI'd like to a see a switch like setNeverEverUseCompoundFiles(true) somewhere.\nif we push it to codec you can just write your own CodecProvider that disables it on all codecs.\n\nCan we move the CFS code outside and the codec simply calls a class/component/whatever during merging and say: I have these files and want to create a CFS out of it? For reading something similar.\nthat is essentially what I think we need to do. ",
            "author": "Simon Willnauer",
            "id": "comment-12966094"
        }
    ]
}