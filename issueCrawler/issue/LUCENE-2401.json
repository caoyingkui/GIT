{
    "id": "LUCENE-2401",
    "title": "Improve performance of CharTermAttribute(Impl) and also fully implement Appendable",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The Appendable.append(CharSequence) method in CharTermAttributes is good for general use. But like StringBuilder has for some common use cases specialized methods, this does the same and adds separate append methods for String, StringBuilder and CharTermAttribute itsself. This methods enable the compiler to directly link the specialized methods and don't use the instanceof checks. The unspecialized method only does the instanceof checks for longer CharSequences (>8 chars), else it simply iterates.\n\nThis patch also fixes the required special \"null\" handling. append() methods are required by Appendable to append \"null\", if the argument is null. I dont like this, but its required. Maybe we should document, that we dont dont support it. Otherwise, JDK's formatter fails with formatting null.",
    "attachments": {
        "LUCENE-2401.patch": "https://issues.apache.org/jira/secure/attachment/12442126/LUCENE-2401.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-04-18T21:18:57+0000",
            "content": "Attached the patch.\n\nThis also makes all implementation methods in the implementation class final (the non-deprecated, new ones), to help the hotspot optimizer.\n\nAlso the tests were partly rewriten, and one test bug removed.\n\nAll tests pass. ",
            "author": "Uwe Schindler",
            "id": "comment-12858342"
        },
        {
            "date": "2010-04-18T21:29:31+0000",
            "content": "One thing:\nI did not add methods taking start and end as parameter for the specialized cases. This is not even supported in StringBuilder or other java classes implementing Appendable. ",
            "author": "Uwe Schindler",
            "id": "comment-12858346"
        },
        {
            "date": "2010-04-18T21:53:19+0000",
            "content": "+1. This all seems great to me! Only one question: do we need the specialized case for CharTermAttribute really? Seems a little specialized to append chartermatt's to each other, but I think the String/StringBuffer methods are good to add and great to have working fast!\n ",
            "author": "Robert Muir",
            "id": "comment-12858348"
        },
        {
            "date": "2010-04-18T21:54:47+0000",
            "content": "Added an test for completely unknown (long) CharSequences, that are not catched by instanceof checks in the general append() method. Clover now reports 100% in this part. ",
            "author": "Uwe Schindler",
            "id": "comment-12858350"
        },
        {
            "date": "2010-04-18T21:59:25+0000",
            "content": "do we need the specialized case for CharTermAttribute really\n\nWhy not, maybe you do copyAttributes to put tokens away and then you want to append them? In general, StringBuilder also has a specialized append() method for itsself. So it does not hurt and it is tested. Its somehow a duplicate to copyTo() [except it appends], but this one only copies the buffer and not the whole attribute (die, Token, die!). ",
            "author": "Uwe Schindler",
            "id": "comment-12858351"
        },
        {
            "date": "2010-04-18T23:22:23+0000",
            "content": "I think at least I will hit that specialized case \nMy filters glue some tokens together. (Die, hard-iterative-API, die!) ",
            "author": "Earwin Burrfoot",
            "id": "comment-12858358"
        },
        {
            "date": "2010-04-19T10:35:21+0000",
            "content": "Improved patch:\n\n\n\tI added a (commented out) perf test that was used to find the best maximum CharSequence length, that is always faster than the instanceof checks in Appendable.append(CSQ).\n\tBecause of above tests I changed the max length to 4\n\n\n\nI will commit this soon. ",
            "author": "Uwe Schindler",
            "id": "comment-12858446"
        },
        {
            "date": "2010-04-19T10:46:22+0000",
            "content": "Committed revision: 935521 ",
            "author": "Uwe Schindler",
            "id": "comment-12858449"
        },
        {
            "date": "2011-03-30T15:50:12+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013397"
        }
    ]
}