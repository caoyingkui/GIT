{
    "id": "SOLR-2671",
    "title": "SchemaField.indexOptions() should return removed to decrease visibility of expert & experimental IndexOptions class",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "LUCENE-2048 introduced a SchemaField.indexOptions method which returns an IndexOptions object based on the omitTermFreqAndPosition and omitPosition boolean properties \u2013 but after some consideration it was decided that it was not a good idea to expose that expert level class at this level of the Solr internal APIs, and that SchemaField should instead only expose direct accessors for the specific properties.",
    "attachments": {
        "SOLR-2671.patch": "https://issues.apache.org/jira/secure/attachment/12487653/SOLR-2671.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13069920",
            "date": "2011-07-23T08:43:30+0000",
            "content": "I think this is ok, but:\n\n\n\tI don't think we should pass null to the lucene Field (its not a valid value for the enum).\ne.g. the part that creates the field shouldn't do:\n    f.setOmitNorms(omitNorms);\n    f.setIndexOptions(options);\n    f.setBoost(boost);\nbut instead if (options != null) \n{ f.setIndexOptions(...) }\n\tSpeaking of omitNorms and Boost, I don't think we should set indexOptions to null, unless we do the same with these consistently.\nSo if indexOptions will be null in the non-indexed case, then boost should become Float and omitNorms Boolean, and these should be null too.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13069996",
            "date": "2011-07-23T16:38:02+0000",
            "content": "I don't think we should pass null to the lucene Field (its not a valid value for the enum).\n\nIt's not a valid value on the enum, but it is seems like it should be a valid value indicating that no IndexOptions should be used  (AbstractField.setIndexOptions doesn't seem to reject null as valid input) \n\nEither that or there should be an explicit IndexOptions.NONE value (which kind of makes me wonder why we have both FieldInfos.IndexOptions and Field.Index ... seems like maybe they should be one Class with setters for the optional parts)\n\nUgh... now my head hurts.\n\nBottom line: if null isn't a valid value to pass to setIndexOptions, then setIndexOptions should be doced as such and throw IllegalArguementException ... right?  because otherwise it seems totally normal to say \"I'm not indexing this field, therefor i'm specifying null IndexOptions\"\n\nSpeaking of omitNorms and Boost, I don't think we should set indexOptions to null, unless we do the same with these consistently.\n\nHmmm .... i see what you're saying, and i agree they createField shouldn't set these on the Field object if !indexed, ala..\n\n\nprotected Fieldable createField(String name, String val, Field.Store storage, Field.Index index,\n                                  Field.TermVector vec, boolean omitNorms, IndexOptions options, float boost){\n  Field f = new Field(name,\n                      val,\n                      storage,\n                      index,\n                      vec);\n  if (index.isIndexed()) {\n    f.setOmitNorms(omitNorms);\n    f.setIndexOptions(options);\n    f.setBoost(boost);\n  }\n  return f;\n}\n\n\n\n\n...but i'm not sure it makes sense to make them nullable...\n\nIn the boost case, it's not a property of the SchemaField, it comes at runtime when the Field instances are being created, and the client code (ie: The Request Handler adding docs) doesn't know (and isn't expected to check) whether a the SchemaField it's using specifies index=true/false.\n\nSo even if we change boost to be a Boolean, your reasoning still holds that the if the field is !indexed, that boost shouldn't be used (null or otherwise).\n\nI suppose from a backcompat standpoint there's not much harm in changing the FieldType.createField args to make it Boolean instead of boolean (all the calling code should still work because of autoboxing) i'm just not sure i see much advantage.\n\n\nIn the case of SchemaField.omitNorms \u2013 and all the term vector methods on SchemaField as well \u2013 those are simple accessors for the properties.  It doesn't seem like a good idea to make them \"smart\" about indexed, they just report wether the property was or was not set when the SchemaField was created.\n\nThe diff between SchemaField.omitNorms() and SchemaField.indexOptions() is that indexOptions isn't a direct accessor for any one property, it returns the effective IndexOptions object used based on two properties (which don't have their own accessors).  So the question of whether indexOptions() should return null seems orthogonal to whether omitNorms() should return null.  But it also makes me realize that for consistency we should really add explicit termFreqAndPosition() and termPosition() accessors to be consistent with omitNorms() ... which leaves us back deciding on how indexOptions() (as a \"smart\" accessor) should behave.\n\n\nNow my head really hurts.\n\nIt seems like maybe the crux of the issue is really:\n\n\n\tadd termFreqAndPosition() and termPosition() methods to SchemaField to be consistent with the other explicit properties\n\tadd docs in AbstractField, SchemaField, and FieldType.createField on which things are meaningless if indexed=false \u2013 just putting \"(value|behavior) is (meaningless|undefined) if #isIndexed() is false\" in the javadocs on most of those get/set methods would be a big win for now)\n\tbetter docs on IndexOptions / AbstractField about null not being a valid value for IndexOptions (unless i've convinced you that it should be)\n\tan IllegalArguementException on any method that takes an IndexOptions arg if that object is null\n\tchange FieldType.createField as described above to only call those Field setters \"if indexed()\"\n\n\n\n...if we do that, then we can leave SchemaField.indexOptions() alone and it will be clear from the docs that the value returned is meaningless for non indexed fields.\n\nwhat do you think? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13069998",
            "date": "2011-07-23T16:47:59+0000",
            "content": "\nIt's not a valid value on the enum, but it is seems like it should be a valid value indicating that no IndexOptions should be used (AbstractField.setIndexOptions doesn't seem to reject null as valid input)\n\nEither that or there should be an explicit IndexOptions.NONE value (which kind of makes me wonder why we have both FieldInfos.IndexOptions and Field.Index ... seems like maybe they should be one Class with setters for the optional parts)\n\n\nbetter docs on IndexOptions / AbstractField about null not being a valid value for IndexOptions (unless i've convinced you that it should be)\n\nI don't think we should do any of this.\nThis thing is totally expert, and labeled as such.\nIts used in the lowest level postings readers and other performance critical places.\nI don't think it should be made friendly, and I don't think we need null checks anywhere in lucene code that takes it.\n\nIf we want the Solr SchemaField stuff to use something more friendly, then it shouldn't use this IndexOptions enum at all, and instead use its own system internally and convert to it at the last minute. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13070000",
            "date": "2011-07-23T16:59:06+0000",
            "content": "\nbetter docs on IndexOptions / AbstractField about null not being a valid value for IndexOptions (unless i've convinced you that it should be)\n\nI don't think we should do any of this.\nThis thing is totally expert, and labeled as such.\n\nFair enough \u2013 it's expert and used at a low level so you don't want to spend cycles on an explicit null check ... but i don't really understand why you are opposed to adding docs to the (public) AbstractField.setIndexOptions that say null is not allowed and that the value of the enum is meaningless/unused unless the field is indexed.\n\nIf we want the Solr SchemaField stuff to use something more friendly, then it shouldn't use this IndexOptions enum at all, and instead use its own system internally and convert to it at the last minute.\n\nisn't that what we do already?  at the user friendly level we use the \"omitTermFreqAndPositions\" and \"termPositions\" prroperties \u2013 indexOptions() is only used by FieldType at the last possible moment.  \n\nThat's my point about adding direct accessors for those properties (so code has a \"friendly\" way of getting the values of those props w/o deciphering the IndexOptions object) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070001",
            "date": "2011-07-23T17:04:34+0000",
            "content": "\nisn't that what we do already? at the user friendly level we use the \"omitTermFreqAndPositions\" and \"termPositions\" prroperties \u2013 indexOptions() is only used by FieldType at the last possible moment. \n\nNot really: currently the xml files have two properties, but the Solr APIs expose indexOptions(), which it then sets on the lucene Field when it makes it.\n\nAlternatively, the Solr APIs could have two booleans, or a real class or something like that so that nobody ever \"sees\" indexOptions unless they interact with a lucene Field.\n\nThe reason i didn't do this initially is because with two booleans and the crazy implication between them, its easy to introduce bugs (as seen by the buggy verification check in SOLR-2669 !)... Plus it forced me to review all usages of the booleans in the current code that uses the SchemaField, versus adding an additional one (which might create bugs where something should be considering the new case but didnt)\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13070277",
            "date": "2011-07-24T23:57:41+0000",
            "content": "\nNot really: currently the xml files have two properties, but the Solr APIs expose indexOptions(), which it then sets on the lucene Field when it makes it.\n\nAlternatively, the Solr APIs could have two booleans, or a real class or something like that so that nobody ever \"sees\" indexOptions unless they interact with a lucene Field.\n\nGood point ... i think getting IndexOptions out of SchemaField and down into FieldType (where the only way you see it is if you are directly dealing with a lucene Field Object) makes sense.\n\nTake a look at the attached patch \u2013 it replaces SchemaField.indexOptions() with two boolean methods corresponding to the properties (and adds back a deprecated omitTf() as an alias - that was removed in LUCENE-2048 but isn't back-compat on the 3x branch) and moves the IndexOptions logic into FieldType.getIndexOptions (which is consistent with the getFieldStore and getFieldIndex that were already in that class)\n\nOpinions?\n\n(obviously we can always add better javadocs, but i wanted to start with the important part) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13070280",
            "date": "2011-07-25T00:22:03+0000",
            "content": "yeah, i like it: this way the surface area is less exposed. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13070670",
            "date": "2011-07-25T18:41:49+0000",
            "content": "linking to issue where indexOptions() was introduced "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13070680",
            "date": "2011-07-25T18:59:23+0000",
            "content": "Committed revision 1150840. - trunk\nCommitted revision 1150848. - 3x\n\n\n...i didn't mention this in CHANGES.txt since it's really just an implementation detail of LUCENE-2048 which is already mentioned "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106218",
            "date": "2011-09-16T14:48:53+0000",
            "content": "bulk close for 3.4 "
        }
    ]
}