{
    "id": "SOLR-5154",
    "title": "StreamingResponseCallback should be used by non-Embedded solr servers too",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Apparently if you use a StreamingResponseCallback, then it is only used by EmbeddedSolrServer.  I'm so surprised to see this was overlooked.  I'd like to write a client that can use this callback no matter wether the SolrServer instance it has was initialized embedded mode or remote'ed.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13740109",
            "date": "2013-08-14T20:03:30+0000",
            "content": "Can you comment what value/profit you pursue? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13740665",
            "date": "2013-08-15T04:30:53+0000",
            "content": "Is the description not clear?  I've got client code that takes a SolrServer that might either be EmbeddedSolrServer or some other variant.  I'd like to stream the docs if possible, so I use the StreamingResponseCallback feature.  Yet apparently that only works with EmbeddedSolrServer, which I think was a major oversight in the API.\n\nMy work around now is:\n\n        QueryRequest queryRequest = ...\n        queryRequest.setStreamingResponseCallback( ... );\n\n        QueryResponse response = queryRequest.process(solrServer);\n\n        SolrDocumentList docList = response.getResults();\n        if (docList != null) {\n            log.debug(\"Not streaming docs from Solr (not supported)\");\n            StreamingResponseCallback callback = tagRequest\n                    .getStreamingResponseCallback();\n            callback.streamDocListInfo(docList.getNumFound(), docList.getStart(), docList.getMaxScore());\n            for (SolrDocument solrDoc : docList) {\n                callback.streamSolrDocument(solrDoc);\n            }\n        }\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13740715",
            "date": "2013-08-15T05:33:01+0000",
            "content": "David,\n\nDescription is clear absolutely, but not context and problem. Now it's clear that you don't need something extreme like consuming super long doclist, etc but just need to unify API between different servers. \n\nbtw, have you tried to set StreamingBinaryResponseParser into response? does it work? or it still seems like divergence between server impls? "
        }
    ]
}