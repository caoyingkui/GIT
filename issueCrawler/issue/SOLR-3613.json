{
    "id": "SOLR-3613",
    "title": "Namespace Solr's JAVA OPTIONS",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.8"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Solr being a web-app, should play nicely in a setting where users deploy it on a shared appServer.\n\nTo this regard Solr's JAVA_OPTS should be properly name spaced, both to avoid name clashes and for clarity when reading your appserver startup script. We currently do that with most: solr.solr.home, solr.data.dir, solr.abortOnConfigurationError, solr.directoryFactory, solr.clustering.enabled, solr.velocity.enabled etc, but for some opts we fail to do so.\n\nBefore release of 4.0 we should make sure to clean this up.",
    "attachments": {
        "SOLR-3613.patch": "https://issues.apache.org/jira/secure/attachment/12574422/SOLR-3613.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13410968",
            "date": "2012-07-10T21:52:20+0000",
            "content": "The ones I've found so far are the new SolrCloud opts: zkRun, bootstrap_confdir, collection.configName, numShards, zkHost "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13411339",
            "date": "2012-07-11T09:31:10+0000",
            "content": "Do we want to allow for people to deploy multiple instances of Solr webapp in same AppServer?\nIf so, each webapp should have the chance of defining its own name space for JAVA OPTS. The ${} substitutions in solrconfig.xml makes this is doable already. But the SolrCloud ones are hardcoded?. A way to make them user configurable is to allow them in solr.xml, not so much for users to edit, but to define the (default) option names:\n\n\n<cloudOptions>\n  <zkRun>${solr.zkRun:false}</zkRun>\n  <bootstrapConfdir>${solr.bootstrapConfdir}</bootstrapConfdir>\n  <collectionConfigName>${solr.collectionConfigName}</collectionConfigName>\n  <numShards>${solr.numShards}</numShards>\n  <zkHost>${solr.zkHost}</zkHost>\n</cloudOptions>\n\n\n\nThe only option which is hard to define a name for up front is solr.solr.home (which has a confusing name btw). Would it be an idea to allow each webapp to have its own solr-home based on the name of the context, i.e. if you deploy solr1.war and solr2.war to same appserver, you could say -Dsolr1.solr.home=/solr1 -Dsolr2.solr.home=/solr2. The old -Dsolr.solr.home could be a fallback/default if no specific home is given? This one perhaps warrants its own JIRA. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13411343",
            "date": "2012-07-11T09:34:18+0000",
            "content": "Is the ZK port number hardcoded to appserver-port+1000? Even if it's not meant for production, perhaps people want to spin up multiple Solr's in same appserver in their dev or test environments, each with own ZK's. It could be solved with a configurable solr.zkRunPort option. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13411463",
            "date": "2012-07-11T13:10:57+0000",
            "content": "The main purpose of Solr is to run as a standalone server.  I don't think we need to support running multiple Solr instances in the same JVM - that's what multicore was developed for. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13411643",
            "date": "2012-07-11T15:45:30+0000",
            "content": "I'd been considering this issue some myself after coming across an email from Jan way back on the mailing list.\n\nOn the whole, just being consistent made sense to me, but I was weighing that vs changing things on everyone already out there using the current stuff, a couple blog posts, talks, etc. This stuff has been out there long enough that we want to weigh the pros and cons of a hard break. I thought about back compat support even though this is trunk and it's not required.\n\nThen I figured we should still do it if we wanted to be just a webapp. But I've been convinced that Solr will be better if we treat it as an app itself instead of a webapp. I really don't see the point in trying to support running other webapps with Solr - it should be the only thing running in it's process. It's a search engine.\n\nBy moving towards the position of Solr being an app and not a war, I think we can make many things nicer and more user friendly for little to no downside. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13411884",
            "date": "2012-07-11T19:25:20+0000",
            "content": "I've always thought of Solr as a web-app; a thin HTTP layer around Lucene, and we do not bother with how people choose to deploy the app or on what appserver. The only reason we ship with Jetty is as an example.\n\nWhat do we gain in restricting deployment options, as long as it's simple enough to keep Solr a clean web-app?\n\nWrt. SolrCloud - consistency in startup param naming should go before back compat, as there is no release version to be back compatible with and no books in the shelves. This is one of the risks of running TRUNK or ALPHA before a FINAL release. Besides, with the proposed addition to solr.xml it is easy enough for end users to change these back to whatever namespace they wish. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13411890",
            "date": "2012-07-11T19:37:37+0000",
            "content": "What do we gain in restricting deployment options, as long as it's simple enough to keep Solr a clean web-app?\n\nWe can do more around out of the box goodness like process management and good logging and have tools and things that know where to find those. Like a good normal application. It also lets us stop worrying about how we behave 'as webapp' and put that energy elsewhere. It also would let us not worry about testing and supporting all these other containers. They could simply be second class best effort, and our primary effort gets better. That is basically matching thinking with reality - as it is, all of our unit tests run in jetty. Most of the use of Solr is in Jetty. Most of the bugs we find at the container level are around Jetty. We have had to patch the version of Jetty we are using to avoid bugs, upgrade Jetty to avoid bugs. If you are not using our shipped Jetty, your probably not doing it right if you ask me.\n\nThis is one of the risks of running TRUNK or ALPHA before a FINAL release. \n\nThat is not really how I look at it. 4 was a special case that took place over years - I care more about the practical effect of the change than I do some rule about when I should easily screw existing users. Using releases promises you back compat to some degree - not using them doesn't mean we will change things wily nilly on you if we can help it. You have to weigh the gains, which seem minimal at best here IMO.\n\nI'm flexible on what we do for this issue overall, but I've stopped thinking about Solr as a webapp - like I said, I don't see the gains, and I've seen how that thought process has held back a good out of the box experience. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13411894",
            "date": "2012-07-11T19:42:09+0000",
            "content": "I don't have an opinion on the matter except to say we advertise exactly the opposite of what Mark describes.\n\nIf you go to lucene.apache.org/solr it says 'Solr is written in Java and runs as a standalone full-text search server within a servlet container such as Tomcat'\n\nWould it be controversial to change this to say Jetty instead? Because Tomcat is completely untested, may not even work, etc,\nbut its whats listed on the website. On the other hand Jetty is tested. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13411895",
            "date": "2012-07-11T19:42:47+0000",
            "content": "Forgot to mention in my pro using shipped jetty list:\n\nWe also configure jetty for the best Solr experience. Raising max threads and so on.\nWe also doc jetty better, and can have better doc about where to go to enable ssl, or this or that. Over time, a single emphasis will provide better doc and a better experience if you are using whats doc'd (even if a lot of the doc is us referencing into jetty docs for specific versions).\n\nHaving one thing to support and tweak is surely better than a range of things?\n\nBy telling people they should feel free to run our Solr webapp anywhere, we are saying, go, have a poor experience with Solr in comparison to using what we ship. I'd rather optimize the out of the box experience, claim that is the recommended experience, and then say, hey, it's open source - if you want to make this all work with tomcat, its probably doable, do what you want. But Solr is shipped as an app rather than some WAR from 1998. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13411901",
            "date": "2012-07-11T19:47:02+0000",
            "content": "An example I just thought about is all the Java CMSes, ECMs and other systems now integrating Solr as their bundled search engine. They tend to integrate Solr alongside their other apps, for small and medium installs, and advice the customers to move it to a dedicated server when things grow big. One of these is Escenic Content Engine, Solr here runs at /solr/ alongside the /escenic/ editors webapp, /escenic-admin administrator webapp and /studio studio webstart webapp. In the same physical appserver/JVM the customer (typically newspapers) deploy their newspaper webapp(s), with any number of libs, Java-opts etc.\n\nI think this will be a more and more common case going forward, and a big reason to keep Solr a web-app, and making it as intuitive as possible to deploy and configure it.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13411917",
            "date": "2012-07-11T20:05:13+0000",
            "content": "Personally, I think if you want to embed Solr, go ahead and use embedded Solr - else run it as it should be run - in it's own process with it's own heap.\n\nnet/net, there are so many positives to simplifying - and this does not sound like a big negative to me?\n\nadvice the customers to move it to a dedicated server when things grow big.\n\nIf you are going to end up moving Solr to another server anyhow, I see no problem with starting with it as a separate process on the same server. That seems more consistent and a more straightforward transition to me.\n\nI think the decision to make a search engine a war was more about ease of picking up http plumbing at the time more than any desire to behave like a typical low resource webapp. At least that's what would make sense to me. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13411944",
            "date": "2012-07-11T20:20:38+0000",
            "content": "some notes of changes needed if we do this:\n\nsolrcloud wiki page\ncloud-dev scripts "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13411961",
            "date": "2012-07-11T20:31:45+0000",
            "content": "Would it be controversial to change this to say Jetty instead? Because Tomcat is completely untested, may not even work, etc,\n\nSupporting only Jetty? We shouldn't go there. Not supporting other app-servers is going backwards. The customers of aforementioned Escenic Content Studio (and other applications embedding Solr) can freely choose what app-server to run their online newspaper on (http://en.wikipedia.org/wiki/Escenic). Do you want them to stop using Solr because we \"drop\" support for anything but Jetty, or force them and their customers into spinning up a Jetty process alongside their ECM? That sucks.\n\nMost of the use of Solr is in Jetty. Most of the bugs we find at the container level are around Jetty. We have had to patch the version of Jetty we are using to avoid bugs, upgrade Jetty to avoid bugs. If you are not using our shipped Jetty, your probably not doing it right if you ask me.\n\nFrom where is that statistics? Most of our customers choose to run Solr in Tomcat, many use Jetty, some use Resin and yet others use whatever their IT department prefer. In the real world - when taking about the big installs - each company's IT dept has their preferred app-server which they know in/out and keep up to date, monitored etc.\n\nPersonally, I think if you want to embed Solr, go ahead and use embedded Solr\n\nI thought we more or less had discouraged use of EmbeddedSolr? According to http://wiki.apache.org/solr/EmbeddedSolr: The simplest, safest, way to use Solr is via Solr's standard HTTP interfaces. Embedding Solr is less flexible, harder to support, not as well tested, and should be reserved for special circumstances.\n\nI think we should ask the broader dev-community and our users what App-servers they use, how they want to deploy or bundle Solr etc. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13411962",
            "date": "2012-07-11T20:32:34+0000",
            "content": "Btw: I'm willing to do some work on this issue, including updating documentation. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13411972",
            "date": "2012-07-11T20:40:06+0000",
            "content": "\nSupporting only Jetty? We shouldn't go there. Not supporting other app-servers is going backwards. The customers of aforementioned Escenic Content Studio (and other applications embedding Solr) can freely choose what app-server to run their online newspaper on (http://en.wikipedia.org/wiki/Escenic). Do you want them to stop using Solr because we \"drop\" support for anything but Jetty, or force them and their customers into spinning up a Jetty process alongside their ECM? That sucks.\n\nIts a fact we only support Jetty: its the only thing we test. I don't care about the relative merits of app servers.\nI don't care if we should or should not support anything else. I don't want to be involved in that.\n\nI'm just talking about what we have tests for.\nThis a basic fact: there are only unit tests for Jetty.\n\nMy problem is that we advertise Tomcat right on the front page, but there are no unit tests for it,\nthus encouraging users to go with an untested configuration.\n\nI think we should just replace the word 'Tomcat' with 'Jetty' there. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13411981",
            "date": "2012-07-11T20:54:58+0000",
            "content": "spinning up a Jetty process alongside their ECM? \n\nYeah, that is really what I would recommend. Especially if they are going to grow into needing another server later anyway. I think a search server (especially one built on java) is simply best run in it's own process. Trying to be all things to everyone has it's costs. \n\nHowever, as long as we continue to use jetty, it should theoretically be possible for anyone to figure things out for another webcontainer - but I'm pushing forward changes that apply to what we ship with and add improvements around that, and I'm not going to worry about tomcat or resin in that work.\n\nI'm not talking about precluding running as a webapp - I'm talking about owning up to the fact that we already are only reliable with jetty - the version that we ship. That's the sweetspot config - so I'm going to pimp it out. And I'm going to argue against promoting other web containers - cause they won't be pimped out and will generally suck as an experience in comparison - this is the case now and I plan on trying to make it worse. If a user wants to go that route, fine - but it would be bad to promote such an option IMO - for the previous myriad of reasons.\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13411983",
            "date": "2012-07-11T20:56:14+0000",
            "content": "I think we should just replace the word 'Tomcat' with 'Jetty' there.\n\n+1  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13411989",
            "date": "2012-07-11T21:01:30+0000",
            "content": "I think we should just replace the word 'Tomcat' with 'Jetty' there.\n\n+1, heavy commit! "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13412002",
            "date": "2012-07-11T21:14:08+0000",
            "content": "Btw: I'm willing to do some work on this issue, including updating documentation.\n\nAlright, lets do it then.\n\nAdding to my list:\nwiki\ndev-scripts\nsolr.xml default entries - there may only be one, but I would have to check - we expose zkClientTimeout (and perhaps other things) as system properties using solr.xml substitution. Those should also by default have solr. prefixes. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13412007",
            "date": "2012-07-11T21:17:55+0000",
            "content": "I will wait a few days and just update the words 'Solr is written in Java and runs as a standalone full-text search server within a servlet container such as Tomcat.' with such as Jetty if no one objects.\n\nWe have a lot of tests for this and we don't release anything unless they pass. So I think\nits the best wording for new users: otherwise they get the impression they should use\nTomcat by default (then get confused -> on the userlist when UTF-8 etc do not work out of box) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412055",
            "date": "2012-07-11T22:05:03+0000",
            "content": "This issue got way off topic \u2013 what system property names we look for should be orthogonal to any discussions about what servlet containers we mention on the website, or test with, or whether we think we should start moving the project towards being a standalone server instead of a webapp.  Those should be discussed on the mailing list, or in other jiras\n\nRight now, today, solr is a webapp and we are inconsistent in how we deal with system property names.\n\nWe shouldn't try to predict the future \u2013 if there's one thing i've learned, it's that we don't know how solr will be used (or what recommendations we might make) in a year, let alone 5.\n\n\n\tInconsistency is bad, and can easily lead to confusion.\n\tWe should try to fix as many inconsistencies as possible in 4.0 since it is a major release and we have more freedom here\n\tAlienating early adopters is also bad, so we should try to avoid it if possible\n\n\n\n\nFor the system properties that have been introduced named \"foo\" It's trivial to change solr so that it starts looking for \"solr.foo\" - it's also trivially to change the code so that it first looks for \"solr.foo\" and if that's not set it looks for \"foo\" as a fallback.  That way we can be consistent, update our documentation so it's clear and consistent for new users that solr's system properties are always named \"solr.*\", and still not screw over early adopters or people who find old blog posts about SolrCloud and try the old \"foo\" commands.  \n\nIn the unlikely event that someone comes along and says \"i see that solr is looking for a 'bar' system property, but i have usecase XYZ where system property 'bar' is also used for PDQ and that's breaking solr\" we can tell them \"where did you see that solr uses 'bar' ?  ... that document is out of date, you can set 'solr.bar' and solr will happily ignore 'bar' that you can use for anything you want\"\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412114",
            "date": "2012-07-11T22:26:03+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13412229",
            "date": "2012-07-11T22:26:42+0000",
            "content": "This issue got way off topic \n\nPersonally, I'm fine with that. The issue itself is small and contained and the discussion started here because it is related. Moving the discussion was more effort than it's worth given the simplicity of the issue IMO - tangents happen in JIRA issues all the time. If other actions or larger discussion lead out of the discussions this issue brought up, sure, take them to other jiras. Personally I don't think Roberts change merits a jira issue - we don't generally make them for website changes.\n\nI think there is a fine balance here between discussing the larger issue while at the same time coming to some agreement on what to do in this particular issue. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13412240",
            "date": "2012-07-11T22:33:26+0000",
            "content": "we don't generally make them for website changes.\n\nI was more thinking the wiki there actually - im about half and half on the web. Personally, if I was trading tomcat for jetty, i'd just commit it as a no brainer and let someone raise a CTR stink if for some reason they found it offensive. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13412603",
            "date": "2012-07-12T08:16:35+0000",
            "content": "I'm not talking about precluding running as a webapp [...] so I'm going to pimp [jetty] it out\n\n+1\n\nI also don't think we should force \"solr.\" for all the system properties.  If someone ads the ability to optionally check for the webapp prefix, then I think we should still be free to use zkHost, collection.*, etc, in the examples/doc.\n\n\na thin HTTP layer around Lucene\n\nI've certainly never thought of Solr as that.  Solr had faceting, numerics, etc, years before Lucene.  Solr is about being a practical useful search server... and lately more morphing into a NoSQL server with first-class full-text search. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13413310",
            "date": "2012-07-12T22:52:13+0000",
            "content": "I also don't think we should force \"solr.\" for all the system properties. If someone ads the ability to optionally check for the webapp prefix, then I think we should still be free to use zkHost, collection.*, etc, in the examples/doc.\n\nWhy not? It is consistent, short and concise. I was first thinking that the \"solr.\" prefix is better had as a convention rather than code? But say we do as you propose and add prefix logic so that given ${myProp:foo}, we'll look for:\n\n\tsolr.myProp\n\telse look for myProp\n\n\n\nIn this case we would need to change all literal solr.* props in all xml config files. I see two drawbacks with this approach; one is that the examples then promote the use of short form while we'd like to encourage use of namespaced form and the other is that if webapp XYZ sets myProp, and we have not explicitly set solr.myProp then Solr will pick up a faulty value for it. This last could very well happen for generic opts like the ${host:} currently defined in solr.xml.\n\nSo I still think it is better to require a solr. prefix for all sys props and leave in the solr. prefix in config files as today.\n\nAnother problematic one from solr.xml is this: hostPort=\"${jetty.port:}\". It assumes Jetty as Java Application Server, and it  feels awkward to say -Djetty.port=8080\u00a0to tell SolrCloud that Tomcat is running on port 8080. Imagine an ops guy reading the Solr bootstrap script, scratching his head. If all we do is read the value and add +1000 to pick the port for our internal ZK, why not be explicit instead and have a solr.localZkPort prop? (No API to get the web containers port? In that case we could support relative values and default to value of \"+1000\" which would behave as today, but less to specify on cmdLine).\n\nWhile in picky mode  I'd prefer zkRun to be solr.localZkRun to distinguish that this starts a local Zk as opposed to the remote one in zkHost. Also, the prop zkHost is misleading, in that it takes a list of host:port; perhaps solr.zkServers is more clear?\n\n\na thin HTTP layer around Lucene\nI've certainly never thought of Solr as that\nWell, not a pure HTTP layer, but still thin in as in the sense that Lucene does as much of the core features as possible "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13413316",
            "date": "2012-07-12T23:08:00+0000",
            "content": "Another problematic one from solr.xml is this: hostPort=\"${jetty.port:}\". It assumes Jetty as Java Application Server,\n\nYup - another way that we have made the user experience better by assuming jetty. This is exactly what I meant - this keeps you from having to specify the port twice on the cmd line - silly when you should just be using jetty and we know the port.\n\nI have been optimizing for jetty for a while now.\n\nit feels awkward to say -Djetty.port=8080 to tell SolrCloud that Tomcat is running on port 8080\n\nThey are free to change it - it's in solr.xml. I'd rather have our default system not be awkward than worry about Tomcat being awkward. This is exactly what I've been talking about. For too long we have been awkward for every thing rather than good for one thing. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13413323",
            "date": "2012-07-12T23:24:53+0000",
            "content": "I'd prefer zkRun to be solr.localZkRun to distinguish that this starts a local Zk as opposed to the remote one in zkHost. \n\n-0 - I like zkRun as it's short and sweet - your are running zk, or you are not and connecting to an external zk. I wouldn't fight very hard though. Yonik named it, I'll defer to you guys.\n\nAlso, the prop zkHost is misleading, in that it takes a list of host:port; perhaps solr.zkServers is more clear?\n\nThe zk guys call it a \"connectString\". I like zkHost because it's short, works fine with a single host url, and easily docable about using more, but again, not something I'm going to fight hard for.\n\nPersonally, I liked the brevity of something like java -DzkRun -DzkHost start.jar and how that works for examples as compared to what we are getting to now: java -Dsolr.zkServers -Dsolr.localRunZk start.jar.\n\nJust starts to get dense fast.\n\nI also think doc is perfectly sufficient on top of the current names.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429771",
            "date": "2012-08-07T03:42:52+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13437317",
            "date": "2012-08-18T13:03:30+0000",
            "content": "I tried to find an API that gives you the webapp name, but could only find it based on an actual Request, not statically. Anyone know of a way (short of explicit config option in solr.xml)? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13437319",
            "date": "2012-08-18T13:14:31+0000",
            "content": "You can get the context path in the init method of the ServletFilter. Just save it somewhere, so when the SilrDispatchFilter is started up, you have it. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451156",
            "date": "2012-09-08T00:02:24+0000",
            "content": "Assigning to Jan since (from what i can see) he volunteered in an earlier comment to do this work. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13457912",
            "date": "2012-09-18T16:16:22+0000",
            "content": "Whats going on here, is this going to make 4.0? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13606934",
            "date": "2013-03-19T22:22:25+0000",
            "content": "Dumping old un-finished patch for revision 1388725 (September 2012) in here, just to record the work I started. Perhaps something can be used for SOLR-4615 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717357",
            "date": "2013-07-23T18:47:58+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13937838",
            "date": "2014-03-17T14:05:54+0000",
            "content": "As Solr is moving away from being a deployable war, this issue becomes less relevant. Closing. "
        }
    ]
}