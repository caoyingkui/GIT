{
    "id": "SOLR-11641",
    "title": "{!frange} / FunctionRangeQuery should default to 100==getCost() so non-cached fq's default to post-filtering",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "While reviewing the code paths that can result in the execution of an 'fq', I realized that executing an '{!frange cache=false ... }' query (with default 'cost=0' localparam) that matches \"very few\" documents (compared to the other q/fq clauses) can result in a pathelogical \"bad\" case situation where the function is computed unneccessarily for lots of documents in order for the Scorer to satisfy the advance(int) API of returning the \"next\" matching document \u2013 making that situation benefit from using the post-filter code path just as much as if the {{'{!frange}'\"\" matches \"very many\" documents (compared to the other q/fq clauses)\n\nIn other words:  because FunctionRangeQuery has no ability to effectively \"skip ahead\" to the next match, there is no advantage (that I can see) in executing a FunctionRangeQuery as \"regular\" Filter in a Conjunction with the other query clauses.\n\nI think we should change the default behavior of '{!frange}' so that the effective default cost==100 so that when a user specifies cache==false they run as post filters.",
    "attachments": {
        "SOLR-11641.patch": "https://issues.apache.org/jira/secure/attachment/12897367/SOLR-11641.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-13T18:42:45+0000",
            "content": "AFAICT regarding FunctionRangeQuery:\n\n\n\tif cache==true then it has to check every doc to build the DocSet anyway and FunctionRangeQuery is as efficient as it can be\n\tif cache==false:\n\t\n\t\tif cost >= 100: the FunctionRangeQuery is used as a post filter and only ever asked to compute the function for docs that are already confirmed candidates by other clauses\n\t\tif cost < 100: the FunctionRangeQuery is used as a regular (Conjunction) FILTER clause, and in order to \"skip to\" it's first/next matching document may have to unnecessaryily compute the function for many (non-candidate) documents that could have been quickly excluded by other clauses if they had been consulted first.\n\t\n\t\n\n\n\nConsider two pathelogical situations:\n\n\n\tA:  the main query matches all docs, but the filter matches nothing, example...\n\t\n\t\t\nq=*:*&fq={!frange cache=false cost=$x h=-1}abs(some_complex_func(...))\n\n\n\t\n\t\n\n\n\n\n\tB: the main query matches exactly one doc, but the filter matches everything, example...\n\t\n\t\t\nq=id:0&fq=\\{!frange cache=false cost=$x l=-1\\}abs(some_complex_funcc(...))\n\n\n\t\n\t\n\n\n\nIn #A, regardless of the x value (determining wether the frange is used as a PostFilter, or as a Conjunction FILTER) the abs(some_complex_func(...) function will be computed for every document:\n\n\n\tas a FILTER:\n\t\n\t\tthe q clauses is checked first, and matches docId#0\n\t\tthen the frange is asked to advance(0) \u2013 and when it confirms docId#0 doesn't match it will start looping over all docs \u2013 executing the function \u2013 looking for the 'next' match after that\n\t\n\t\n\tas a PostFilter:\n\t\n\t\tthe q clauses is checked first\n\t\tfor each doc it matches (all of them) the PostFilter is checked \u2013 executing the function.\n\t\n\t\n\n\n\nIn the case of #B, the number of documens that need to have abs(some_complex_func(...) computed will be drasticly differnet based on the code path used (ie: the value of X)\n\n\n\tas a FILTER:\n\t\n\t\tthe q clauses is checked first, and matches docId#0\n\t\tthen the frange is asked to advance(0) \u2013 and when it confirms docId#0 doesn't match it will start looping over all docs \u2013 executing the function \u2013 looking for the 'next' match after that\n\t\n\t\n\tas a PostFilter:\n\t\n\t\tthe q clauses is checked first\n\t\tfor each doc it matches (only docId#0) the PostFilter is checked \u2013 executing the function\n\t\n\t\n\n\n\n\nRegardless of how bad the pathelogical case \u2013 or in which direction it's pathelogical \u2013 it still seems much more efficient to run all FunctionRangeQuery instances as PostFilters by default.\n\n\nAFAICT: even in a \"50/50\" type situation, where a FunctionRangeQuery matches a random 50% of the documents, and the other q/fq clauses match an different (indepenently) random 50% of the documents, it still seems much more efficient to always execute the FunctionRangeQuery as a PostFilter.  Because fundementally the FunctionRangeQuery can't provide any efficiencies/savings in advance(docId) to identify candidate matches, so any time it's \"behind\" the other clauses in the Conjunction, there's no point in asking it to \"advance\" to it's next patch \u2013 we should just ask it \"do you match X?\" and if not, let the other (likeley more optimized) clauses \"skip ahead\" to their next match, rather then asking the FunctionRangeQuery to try.\n\n\n\nI'm attaching a trivial, untested patch \u2013 hopefully this should fail some caching based tests, and some query equality checks, plus there should be new tests that it optimizes the cases we expect to optimize \u2013 but this shows the bare bones of what i'm suggesting we changing ",
            "author": "Hoss Man",
            "id": "comment-16249973"
        },
        {
            "date": "2017-11-14T05:15:00+0000",
            "content": "updated patch with test adjustments + additions\n\nYonik Seeley - any concerns here?   Seems like a generally good performance boost in the (more) common case. ",
            "author": "Hoss Man",
            "id": "comment-16250880"
        },
        {
            "date": "2017-11-14T14:24:23+0000",
            "content": "Yeah, I think that should be fine. ",
            "author": "Yonik Seeley",
            "id": "comment-16251455"
        },
        {
            "date": "2017-11-14T14:45:49+0000",
            "content": "+1 nice analysis Hoss ",
            "author": "David Smiley",
            "id": "comment-16251478"
        },
        {
            "date": "2017-11-14T17:16:17+0000",
            "content": "updated patch with ref-guide changes ",
            "author": "Hoss Man",
            "id": "comment-16251762"
        },
        {
            "date": "2017-11-14T17:45:42+0000",
            "content": "Commit d77d54b1a65ba1705c8ecff907215260ac3cb82d in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d77d54b ]\n\nSOLR-11641: Change  to default to  so default behavior is to PostFilter if user specifies ",
            "author": "ASF subversion and git services",
            "id": "comment-16251813"
        },
        {
            "date": "2017-11-14T18:54:48+0000",
            "content": "Commit be154e9ea3b2f8f248cbebff8153978a24ed98f6 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=be154e9 ]\n\nSOLR-11641: Change  to default to  so default behavior is to PostFilter if user specifies\n\n(cherry picked from commit d77d54b1a65ba1705c8ecff907215260ac3cb82d) ",
            "author": "ASF subversion and git services",
            "id": "comment-16251954"
        }
    ]
}