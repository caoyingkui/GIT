{
    "id": "LUCENE-12",
    "title": "Delete is not multi-thread safe",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Here is a pseudo-code\n\nwriter.open()\nwriter.add(documentA);\nwriter.close()  // this creates segment1 with 1 document\n\nreader.open()            // this reader can be opened by another process\nwriter.open()            // this creates segment2 with one document\nreader.delete(documentA) // using unique term // here delete is done in-memory\nwriter.add(documentB) \nwriter.close()          // writer will merge two segments, delete segment2 \n                        // and will mark segment1 for deletion because \n                        // reader  holds files to segment1 open\n\nreader.close()          // reader writes out .del file, but that is too\n                        // late\n\nsearcher.open()\nsearcher.search(\"term_common_to_docA_and_docB\") // returns both docA and docB\n\n\nIt seems that either a) deletes should be write-through, or b) deletes should \nbe done by the writer, or c) writer should not optimize non-RAM segments unless \nasked to. As a client, I like option b) the best, though, this is not the \neasiest option to implement. My $0.02",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2002-02-09T06:55:59+0000",
            "content": "This has been fixed.  Document deletion now requires the index write lock, and \nhence cannot be performed concurrently with document addition. ",
            "author": "cutting@apache.org",
            "id": "comment-12320996"
        },
        {
            "date": "2002-09-13T20:15:28+0000",
            "content": "Maybe I should have reopened this bug rather than reporting a new one.  Anyhow, \nplease check the new Bug 12588, which I believe is the same problem from a \ndifferent perspective. ",
            "author": "Tony Lai",
            "id": "comment-12320997"
        }
    ]
}