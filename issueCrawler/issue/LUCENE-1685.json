{
    "id": "LUCENE-1685",
    "title": "Make the Highlighter use SpanScorer by default",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I've always thought this made sense, but frankly, it took me a year to get the SpanScorer included with Lucene at all, so I was pretty much ready to move on after I it got in, rather than push for it as a default.\n\nI think it makes sense as the default in Solr as well, and I mentioned that back when it was put in, but alas, its an option there as well.\n\nThe Highlighter package has no back compat req, but custom has been conservative - one reason I havn't pushed for this change before. Might be best to actually make the switch in 3? I could go either way - as is, I know a bunch of people use it, but I'm betting its the large minority. It has never been listed in a changes entry and its not in LIA 1, so you pretty much have to stumble upon it, and figure out what its for.\n\nI'll point out again that its just as fast as the standard scorer for any clause of a query that is not position sensitive. Position sensitive query clauses will obviously be somewhat slower to highlight, but that is because they will be highlighted correctly rather than ignoring position.",
    "attachments": {
        "LUCENE-1685.patch": "https://issues.apache.org/jira/secure/attachment/12415241/LUCENE-1685.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-06-11T20:30:53+0000",
            "content": "Make the Highlighter use SpanScorer by default\n\n+1!\n\nI think it makes sense as the default in Solr as well, and I mentioned that back when it was put in, but alas, its an option there as well.\n\n+1\n\nIt has never been listed in a changes entry and its not in LIA 1, so you pretty much have to stumble upon it, and figure out what its for.\n\nAnd... in working on LIA2, I had to ask for help on how to use it \n\nConsumability is important.\n\nCan we do this for 2.9?\n\nI think not being buggy by default (w/ PhraseQuery, eg) is far more important that a small loss in performance.  Performance is secondary to correctness. ",
            "author": "Michael McCandless",
            "id": "comment-12718629"
        },
        {
            "date": "2009-06-11T22:36:20+0000",
            "content": "Didn't even have the actual highlighter code in my mind - you have to pass the Scorer to construct one anyway, so no back compat issue to speak of in any case.\n\nThe real change will be in the documentation, and I suppose adding something to changes mentioning that you should probably switch? Can't bring myself to say that we should deprecate the QueryScorer - why not have both - but it would be nice to point out that the SpanScorer is the new \"default\" Scorer for correct highlighting.\n\nI'll work on a patch for the documentation and a changes entry suggestion. I'm not sure there is anything stronger we can do here. ",
            "author": "Mark Miller",
            "id": "comment-12718658"
        },
        {
            "date": "2009-06-11T22:38:38+0000",
            "content": "which reminds me, highlighter has no changes file. I'll make one as well. ",
            "author": "Mark Miller",
            "id": "comment-12718660"
        },
        {
            "date": "2009-06-12T10:01:07+0000",
            "content": "Why not deprecate QueryScorer?  It's buggy, and leaving it in there, with such a juicy name, looking like the right choice, just makes Lucene's (highlighter's) quality look bad.  Correctness trumps performance.\n\nAnd then the javadocs should clearly favor SpanScorer... and I would include a clear code fragment showing how to use it all, in context.  EG this is what LIA2 currently has, which is fine to copy/modify/etc. to get into the javadocs:\n\n\n  public void testHits() throws Exception {\n    IndexSearcher searcher = new IndexSearcher(TestUtil.getBookIndexDirectory());\n    TermQuery query = new TermQuery(new Term(\"title\", \"action\"));\n    TopDocs hits = searcher.search(query, 10);\n\n    Highlighter highlighter = new Highlighter(null);\n    Analyzer analyzer = new SimpleAnalyzer();\n    \n    for (int i = 0; i < hits.scoreDocs.length; i++) {\n      Document doc = searcher.doc(hits.scoreDocs[i].doc);\n      String title = doc.get(\"title\");\n\n      TokenStream stream = TokenSources.getAnyTokenStream(searcher.getIndexReader(),\n                                                          hits.scoreDocs[i].doc,\n                                                          \"title\",\n                                                          doc,\n                                                          analyzer);\n      SpanScorer scorer = new SpanScorer(query, \"title\",\n                                         new CachingTokenFilter(stream));\n      Fragmenter fragmenter = new SimpleSpanFragmenter(scorer);\n      highlighter.setFragmentScorer(scorer);\n      highlighter.setTextFragmenter(fragmenter);\n\n      String fragment =\n          highlighter.getBestFragment(stream, title);\n\n      System.out.println(fragment);\n    }\n  }\n\n\n\nIt would also be nice to simplify that usage, eg, is there some way to not have to make a SpanScorer (and, by extension, fragmenter) per query, but instead make it up-front and add a setter for the new TokenStream for each doc?  (Having to create Highlighter(null) is awkward).  Or I suppose we could simply make a new Highlighter, SpanScorer, SimpleSpanFragmenter per-hit, but that seems wasteful. ",
            "author": "Michael McCandless",
            "id": "comment-12718773"
        },
        {
            "date": "2009-06-12T13:07:06+0000",
            "content": "I've never gone deep into the highlighters, but I don't think we should deprecate QueryScorer unless SpanScorer is a true superset (i.e. you can get SpanScorer to act like QueryScorer if you want... minus any real bugs).  Highlighting is not an exact science.  Given a query of \n\n\"foo bar\" -baz\n\nNot everyone will agree (and it will be application specific) exactly what instances of foo, bar, and baz should be highlighted in the document.  But I agree that by default, we should try to only highlight what matches the query. ",
            "author": "Yonik Seeley",
            "id": "comment-12718827"
        },
        {
            "date": "2009-06-12T13:54:01+0000",
            "content": "Agreed on all that Mike, I'll try to do that for 2.9.\n\nI also wanted to deprecate QueryScorer for a while, but I agree with Yonik that its kind of a feature, and we shouldn't toss it. You have a great point that keeping it around keeps things\nconfusing though. I can probably make the SpanScorer easily flip between both modes, defaulting to position sensitive.\n\nActually, perhaps we deprecate SpanScorer and add the functionality to QueryScorer with the switch, default to position sensitive. ",
            "author": "Mark Miller",
            "id": "comment-12718838"
        },
        {
            "date": "2009-06-12T14:42:40+0000",
            "content": "I consider it a bug that QueryScorer will separately highlight \"foo\" and \"bar\" when the PhraseQuery \"foo bar\" was searched on.\n\nAre there actually compelling things that QueryScorer does over SpanScorer?\n\nActually, perhaps we deprecate SpanScorer and add the functionality to QueryScorer with the switch, default to position sensitive.\n\n+1\n\nAnd that way we keep the more consumable name (QueryScorer). ",
            "author": "Michael McCandless",
            "id": "comment-12718855"
        },
        {
            "date": "2009-06-12T14:48:17+0000",
            "content": "I consider it a bug that QueryScorer will separately highlight \"foo\" and \"bar\" when the PhraseQuery \"foo bar\" was searched on. \n\nRight... but not everyone will agree.\nWe shouldn't deprecate functionality that we don't have a replacement for yet (esp since we'll be quickly removing deprecated stuff in 3.0). ",
            "author": "Yonik Seeley",
            "id": "comment-12718858"
        },
        {
            "date": "2009-06-12T14:52:10+0000",
            "content": "OK.\n\nI think Mark's idea is great: absorb both into QueryScorer, making \"position aware\" the default.  Then if people somehow want the buggy PhraseQuery highlighting, they can switch it back. ",
            "author": "Michael McCandless",
            "id": "comment-12718861"
        },
        {
            "date": "2009-08-01T16:27:00+0000",
            "content": "Has the broad stokes - SpanScorer becomes QueryScorer, QueryScorer becomes QueryTermScorer, and QueryScorer gets a setTokenStream rather than passing it in the constructor.\n\nNot sure how to best preserve any history here since SpanScorer is moving to QueryScorer. ",
            "author": "Mark Miller",
            "id": "comment-12737909"
        },
        {
            "date": "2009-08-02T23:16:34+0000",
            "content": "Another rev making things a little easier.\n\nQueryScorer now takes a TokenStream rather than a CachingTokenFilter - if there are any position sensitive clauses, the TokenStream will be wrapped in a CachingTokenFilter if it is not already a CachingTokenFilter.\n\nThis also removes having to call setTokenStream after constructing a QueryScorer and between calls to getBestFragment - instead, the new init(TokenStream) that the Highlighter already calls is used. This frees the user from having to make that call.\n\ninit(TokenStream) now can return a new TokenStream for the Highlighter to continue using (ie the QueryScorer may return a CachingTokenFilter if their is a position sensitive clause in the query) or null to keep using the same TokenStream.\n\nNow you can use the SpanScorer (as QueryScorer now) the same way you could use the old QueryScorer impl:\n\n    QueryScorer scorer =  new QueryScorer(query, FIELD_NAME);\n    Highlighter highlighter = new Highlighter(this,scorer);\n    highlighter.setTextFragmenter(new SimpleFragmenter(40));\n\n    for (int i = 0; i < hits.length(); i++) \n{\n      String text = hits.doc(i).get(FIELD_NAME);\n      TokenStream tokenStream = analyzer.tokenStream(FIELD_NAME, new StringReader(text));\n\n      String result = highlighter.getBestFragments(tokenStream, text, maxNumFragmentsRequired,\n          \"...\");\n      System.out.println(\"\\t\" + result);\n    } ",
            "author": "Mark Miller",
            "id": "comment-12738143"
        },
        {
            "date": "2009-08-03T03:29:56+0000",
            "content": "Changed the constructors for QueryScorer to more closely match what was available before. Also, expandMultiTerm now defaults to true, and instead of being a constructor option, can be disabled with a method.\n\nAlso cleaned up a bit more of the test class and added a Changes entry. ",
            "author": "Mark Miller",
            "id": "comment-12738180"
        },
        {
            "date": "2009-08-03T20:26:58+0000",
            "content": "I'll commit this within a few days ",
            "author": "Mark Miller",
            "id": "comment-12738560"
        },
        {
            "date": "2009-08-05T02:46:02+0000",
            "content": "I reopened this because I saw that changing benchmark to use QueryScorer rather than QueryTermScorer was failing, and at first it looked like it wasn't producing Highlights - I think the issue is with the Benchmark code (it just wans't counting the highlights), but I have reopened this just in case. When I can test and know for sure, I'll resolve this again. ",
            "author": "Mark Miller",
            "id": "comment-12739319"
        },
        {
            "date": "2009-08-06T00:18:00+0000",
            "content": "Should we also default the fragmenter to SimpleSpanFragmenter? ",
            "author": "Michael McCandless",
            "id": "comment-12739833"
        }
    ]
}