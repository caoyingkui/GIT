{
    "id": "SOLR-1196",
    "title": "Incorrect matches when using non alphanumeric search string !@#$%\\^\\&\\*\\(\\)",
    "details": {
        "affect_versions": "1.3",
        "status": "Reopened",
        "fix_versions": [],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "When matching strings that do not include alphanumeric chars, all the data is returned as matches. (There is actually no match, so nothing should be returned.)\n\nWhen I run a query like  - (activity_type:NAME) AND title!@#$%^&*()) all the documents are returned even though there is not a single match. There is no title that matches the string (which has been escaped).\n\nMy document structure is as follows\n\n<doc>\n<str name=\"activity_type\">NAME</str>\n<str name=\"title\">Bathing</str>\n....\n</doc> \n\nThe title field is of type text_title which is described below. \n\n<fieldType name=\"text_title\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"1\" generateNumberParts=\"1\" catenateWords=\"1\" catenateNumbers=\"1\" catenateAll=\"1\" splitOnCaseChange=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\"/>\n        <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"1\" generateNumberParts=\"1\" catenateWords=\"1\" catenateNumbers=\"1\" catenateAll=\"1\" splitOnCaseChange=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n\n      </analyzer>\n    </fieldType> \n\n-----------------------------------------------------\nYonik's analysis as follows.\n\n<str name=\"rawquerystring\">-features:foo features!@#$%^&*())</str>\n<str name=\"querystring\">-features:foo features!@#$%^&*())</str>\n<str name=\"parsedquery\">-features:foo</str>\n<str name=\"parsedquery_toString\">-features:foo</str>\n\nThe text analysis is throwing away non alphanumeric chars (probably\nthe WordDelimiterFilter).  The Lucene (and Solr) query parser throws\naway term queries when the token is zero length (after analysis).\nSolr then interprets the left over \"-features:foo\" as \"all documents\nnot containing foo in the features field\", so you get a bunch of\nmatches. \n\nAs per his suggestion, a bug is filed.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Oystein Steimler",
            "id": "comment-12717633",
            "date": "2009-06-09T10:12:39+0000",
            "content": "This looks similar to this scenario:\n\n<doc>\n<str name=\"id\">1</str>\n<str name=\"phoneno\">abc</str>\n</doc>\n\nThe field 'phoneno' is among other steps analyzed like this:\n\n<filter class=\"solr.PatternReplaceFilterFactory\" pattern=\"[^0-9]\" replacement=\"\" replace=\"all\" />\n\nWhen using a dismax handler containing the field phoneno, the document id=1\nwill match on every query phrase. (I guess this is the same as matching any\nquery on the field) "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835714",
            "date": "2013-11-30T13:24:26+0000",
            "content": "2013 Old JIRA cleanup "
        }
    ]
}