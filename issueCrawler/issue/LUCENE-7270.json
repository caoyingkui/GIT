{
    "id": "LUCENE-7270",
    "title": "Use better balanced trees for Geo3d complex polygons",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/spatial3d"
        ],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "The current tree data structure in GeoComplexPolygon has a lot of weaknesses.  A better algorithm maybe can be taken from Polygon2D, which basically does the following:\n\nEach node has:\n\n\tlow value (which is for that edge alone)\n\tmax value (which is for that edge and all children)\n\n\n\nBalanced tree building:\n\n\tsort by low value (which is for the individual edge), and use max value as tie breaker (which is max for edge and all children)\n\tbuild tree after sorting, picking midpoint and recursively building lesser and greater children that way\n\n\n\nBalanced tree traversal (looking for range minValue -> maxValue):\n\n\tDescend the entire tree until the node fails this test:\n      if (minValue <= max) \n{ ... }\n  So if the minimum value being sought is greater than the max for this edge and all children, we stop and don't look at children.\n  (Q: does this represent a good split and a targeted range?  Maybe...  We can certainly try it.)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15268797",
            "author": "Karl Wright",
            "date": "2016-05-03T14:30:37+0000",
            "content": "Implemented this and discovered that actually my former implementation performed much better for the London borough case.  In fact, the 2D balanced tree is 4x slower:\n\n\nITER 0: 0.05 M hits/sec, 0.61 QPS (53.91 sec for 33 queries), totHits=2693539\n\n\n\nI believe this may be because it is visiting far more nodes (but not more edges), because of the way the ranging is done:\n\n\n    private static boolean traverse(final Node node, final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (node == null) {\n        return true;\n      }\n      if (minValue <= node.max) {\n        \n        // Does this node overlap?\n        if (minValue <= node.high && maxValue >= node.low) {\n          if (edgeIterator.matches(node.edge) == false) {\n            return false;\n          }\n        }\n        \n        if (traverse(node.left, edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (traverse(node.right, edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n\n\nI'm a bit puzzled as to why this doesn't totally sink the 2D code. Maybe it's because the first edge it finds causes it to exit?  Or maybe I just have a silly error somewhere?  Don't know, maybe Robert Muir has an idea?  I'll attach a patch if requested. "
        },
        {
            "id": "comment-15268819",
            "author": "Karl Wright",
            "date": "2016-05-03T14:47:50+0000",
            "content": "For reference, here's my entire tree implementation.\n\n\n  private static abstract class Tree {\n    private final Node rootNode;\n    \n    protected static final Edge[] EMPTY_ARRAY = new Edge[0];\n    \n    /** Constructor.\n     * @param allEdges is the list of all edges for the tree.\n     */\n    public Tree(final List<Edge> allEdges) {\n      // Dump edges into an array and then sort it\n      final Node[] edges = new Node[allEdges.size()];\n      int i = 0;\n      for (final Edge edge : allEdges) {\n        edges[i++] = new Node(edge, getMinimum(edge), getMaximum(edge));\n      }\n      Arrays.sort(edges, (left, right) -> {\n        int ret = Double.compare(left.low, right.low);\n        if (ret == 0) {\n          ret = Double.compare(left.max, right.max);\n        }\n        return ret;\n      });\n      rootNode = createTree(edges, 0, edges.length - 1);\n    }\n    \n    private static Node createTree(final Node[] edges, final int low, final int high) {\n      if (low > high) {\n        return null;\n      }\n      // add midpoint\n      int mid = (low + high) >>> 1;\n      final Node newNode = edges[mid];\n      // add children\n      newNode.left = createTree(edges, low, mid - 1);\n      newNode.right = createTree(edges, mid + 1, high);\n      // pull up max values to this node\n      if (newNode.left != null) {\n        newNode.max = Math.max(newNode.max, newNode.left.max);\n      }\n      if (newNode.right != null) {\n        newNode.max = Math.max(newNode.max, newNode.right.max);\n      }\n      return newNode;\n    }\n\n    /** Get the minimum value from the edge.\n     * @param edge is the edge.\n     * @return the minimum value.\n     */\n    protected abstract double getMinimum(final Edge edge);\n    \n    /** Get the maximum value from the edge.\n     * @param edge is the edge.\n     * @return the maximum value.\n     */\n    protected abstract double getMaximum(final Edge edge);\n    \n    /** Traverse the tree, finding all edges that intersect the provided value.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     * @param value is the value to match.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double value) {\n      return traverse(edgeIterator, value, value);\n    }\n    \n    /** Traverse the tree, finding all edges that intersect the provided value range.\n     * @param edgeIterator provides the method to call for any encountered matching edge.\n     *   Edges will not be invoked more than once.\n     * @param minValue is the minimum value.\n     * @param maxValue is the maximum value.\n     * @return false if the traversal was aborted before completion.\n     */\n    public boolean traverse(final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      return traverse(rootNode, edgeIterator, minValue, maxValue);\n    }\n    \n    private static boolean traverse(final Node node, final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (node == null) {\n        return true;\n      }\n      if (minValue <= node.max) {\n        \n        // Does this node overlap?\n        if (minValue <= node.high && maxValue >= node.low) {\n          if (edgeIterator.matches(node.edge) == false) {\n            return false;\n          }\n        }\n        \n        if (traverse(node.left, edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (traverse(node.right, edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n      }\n      return true;\n    }\n\n  }\n\n "
        },
        {
            "id": "comment-15268978",
            "author": "Karl Wright",
            "date": "2016-05-03T16:20:35+0000",
            "content": "So here's my next idea, which is to use the basic tree code that's currently in place, but optimize up front for tree depth.  The way this would work would be to order edges by edge length (longest first), so that these would appear at the highest levels of the tree, while the shortest would appear at the leaves.  This would minimize the need to put the same edge into two adjoining subtrees, which will make the tree smaller.  Sorting by edge length would also tend to randomize the edges enough that we'd not have any strict sequence of edges all lining up as a depth-first row.\n\nShould be easy enough to try; will get on it after lunch. "
        },
        {
            "id": "comment-15269117",
            "author": "Karl Wright",
            "date": "2016-05-03T17:14:06+0000",
            "content": "Works great; now performance on my laptop looks like this:\n\n\nITER 4: 0.75 M hits/sec, 9.21 QPS (3.58 sec for 33 queries), totHits=2693539\nITER 5: 0.76 M hits/sec, 9.29 QPS (3.55 sec for 33 queries), totHits=2693539\nITER 6: 0.76 M hits/sec, 9.26 QPS (3.56 sec for 33 queries), totHits=2693539\nITER 7: 0.75 M hits/sec, 9.18 QPS (3.59 sec for 33 queries), totHits=2693539\nITER 8: 0.74 M hits/sec, 9.03 QPS (3.65 sec for 33 queries), totHits=2693539\nITER 9: 0.76 M hits/sec, 9.28 QPS (3.56 sec for 33 queries), totHits=2693539\n\n "
        },
        {
            "id": "comment-15269122",
            "author": "ASF subversion and git services",
            "date": "2016-05-03T17:15:59+0000",
            "content": "Commit d3d754e91de95115a105861ca4b45029f33252e2 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d3d754e ]\n\nLUCENE-7270: Perofmance improvements related to tree structure. "
        },
        {
            "id": "comment-15269128",
            "author": "ASF subversion and git services",
            "date": "2016-05-03T17:17:48+0000",
            "content": "Commit 925f2b28c18ec60c5fdf30ae91d61fc302c59e5c in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=925f2b2 ]\n\nLUCENE-7270: Perofmance improvements related to tree structure. "
        },
        {
            "id": "comment-15269415",
            "author": "ASF subversion and git services",
            "date": "2016-05-03T19:29:40+0000",
            "content": "Commit 8c0bf8b3b6db8c7ad5b5c1b673bc2a138e3355d7 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8c0bf8b ]\n\nLUCENE-7270: Fix javadoc. "
        },
        {
            "id": "comment-15269417",
            "author": "ASF subversion and git services",
            "date": "2016-05-03T19:30:31+0000",
            "content": "Commit ba3d25e53b1ddbbd04f406f809bc2a4e5ace915e in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ba3d25e ]\n\nLUCENE-7270: Fix javadoc. "
        },
        {
            "id": "comment-15269524",
            "author": "Robert Muir",
            "date": "2016-05-03T20:29:47+0000",
            "content": "I think your tree might be doing too much work.\n\n\n private static boolean traverse(final Node node, final EdgeIterator edgeIterator, final double minValue, final double maxValue) {\n      if (node == null) {\n        return true;\n      }\n      if (minValue <= node.max) {\n        \n        // Does this node overlap?\n        if (minValue <= node.high && maxValue >= node.low) {\n          if (edgeIterator.matches(node.edge) == false) {\n            return false;\n          }\n        }\n        \n        if (traverse(node.left, edgeIterator, minValue, maxValue) == false) {\n          return false;\n        }\n        if (traverse(node.right, edgeIterator, minValue, maxValue) == false) { // missing a check here?\n          return false;\n        }\n      }\n      return true;\n    }\n\n\n\non the other hand look at the 1D interval tree traversal of Polygon2D:\n\n    boolean contains(double latitude, double longitude) {\n      // crossings algorithm is an odd-even algorithm, so we descend the tree xor'ing results along our path\n      boolean res = false;\n      if (latitude <= max) {\n        if (lat1 > latitude != lat2 > latitude) {\n          if (longitude < (lon1 - lon2) * (latitude - lat2) / (lat1 - lat2) + lon2) {\n            res = true;\n          }\n        }\n        if (left != null) {\n          res ^= left.contains(latitude, longitude);\n        }\n        if (right != null && latitude >= low) {\n          res ^= right.contains(latitude, longitude);\n        }\n      }\n      return res;\n    }\n\n\n\nSee how it doesn't traverse the right subtree at all when the point is below the lower bound? If you want to see the same logic written another way, see https://en.wikipedia.org/wiki/Interval_tree#Java_Example:_Searching_a_point_or_an_interval_in_the_tree\n\nMaybe its easier to see the problem in two dimensions: Polygon2D code uses the same logic but in two dimensions for polygon components (and holes) themselves, organized by bounding box. So same algorithm just a little bit hairier logic because \"min\" depends on which dimension we split on (x or y). Max of both dimensions is \"pushed up\" so its safe to check that for both dimensions every time.\n\n\n  public boolean contains(double latitude, double longitude) {\n    if (latitude <= maxY && longitude <= maxX) {\n      if (componentContains(latitude, longitude)) {\n        return true;\n      }\n      if (left != null) {\n        if (left.contains(latitude, longitude)) {\n          return true;\n        }\n      }\n      if (right != null && ((splitX == false && latitude >= minLat) || (splitX && longitude >= minLon))) {\n        if (right.contains(latitude, longitude)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n\n\nAnyway, thats the differences I see. Also null checks are in a different place: this way we don't do all those comparisons for \"simple\" cases and we keep a low overhead. "
        },
        {
            "id": "comment-15269696",
            "author": "Karl Wright",
            "date": "2016-05-03T22:00:21+0000",
            "content": "Ok, Robert Muir, making that change brings the 2D implementation to roughly the same as the ordered 3D implementation I had earlier this afternoon:\n\n\nITER 0: 0.46 M hits/sec, 5.60 QPS (5.90 sec for 33 queries), totHits=2693539\n  ***\nITER 1: 0.73 M hits/sec, 9.00 QPS (3.66 sec for 33 queries), totHits=2693539\n  ***\nITER 2: 0.75 M hits/sec, 9.24 QPS (3.57 sec for 33 queries), totHits=2693539\n  ***\nITER 3: 0.75 M hits/sec, 9.15 QPS (3.61 sec for 33 queries), totHits=2693539\nITER 4: 0.75 M hits/sec, 9.17 QPS (3.60 sec for 33 queries), totHits=2693539\nITER 5: 0.75 M hits/sec, 9.15 QPS (3.61 sec for 33 queries), totHits=2693539\nITER 6: 0.76 M hits/sec, 9.27 QPS (3.56 sec for 33 queries), totHits=2693539\n  ***\nITER 7: 0.75 M hits/sec, 9.25 QPS (3.57 sec for 33 queries), totHits=2693539\nITER 8: 0.75 M hits/sec, 9.18 QPS (3.59 sec for 33 queries), totHits=2693539\nITER 9: 0.76 M hits/sec, 9.34 QPS (3.53 sec for 33 queries), totHits=2693539\n  ***\nITER 10: 0.75 M hits/sec, 9.23 QPS (3.58 sec for 33 queries), totHits=2693539\nITER 11: 0.75 M hits/sec, 9.24 QPS (3.57 sec for 33 queries), totHits=2693539\nITER 12: 0.76 M hits/sec, 9.27 QPS (3.56 sec for 33 queries), totHits=2693539\n\n\n\nEssentially it's the same performance-wise, maybe a touch slower, but I like it better because there's no need to duplicate Edge's ever, and thus there's no need to have a Set for deduplication.  Hmm, decisions, decisions... "
        },
        {
            "id": "comment-15269711",
            "author": "ASF subversion and git services",
            "date": "2016-05-03T22:06:34+0000",
            "content": "Commit 6ef0f218f67505b655a5f5327b334bf28259e461 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6ef0f21 ]\n\nLUCENE-7270: Robert's implementation of the tree structure works as well and it's simpler, so I'm switching to that. "
        },
        {
            "id": "comment-15269713",
            "author": "ASF subversion and git services",
            "date": "2016-05-03T22:08:05+0000",
            "content": "Commit 8349546eaa7095fab7e26cc512c86960c6012e50 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8349546 ]\n\nLUCENE-7270: Robert's implementation of the tree structure works as well and it's simpler, so I'm switching to that. "
        }
    ]
}