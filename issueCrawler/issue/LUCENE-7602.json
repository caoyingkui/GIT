{
    "id": "LUCENE-7602",
    "title": "Fix compiler warnings for ant clean compile",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "trunk"
        ]
    },
    "description": "",
    "attachments": {
        "LUCENE-7602.patch": "https://issues.apache.org/jira/secure/attachment/12844626/LUCENE-7602.patch",
        "LUCENE-7602-ContextMap-lucene.patch": "https://issues.apache.org/jira/secure/attachment/12844641/LUCENE-7602-ContextMap-lucene.patch",
        "LUCENE-7602-ContextMap-solr.patch": "https://issues.apache.org/jira/secure/attachment/12844642/LUCENE-7602-ContextMap-solr.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15775460",
            "date": "2016-12-24T21:33:23+0000",
            "content": "Patch of 24 Dec 2016.\n\nThis consists of:\n\n\treplacing Map by Map<?,?> in a few submodules.\n\t7 @SuppressWarnings for unchecked casts (see also below),\n\ta split off of Const*DocValues classes into their own source files,\n\tone removal of close() on an AutoClosable,\n\ta few minor generics improvements,\n\n\n\nI have a question on these cases, there are 7 of them:\n\n\n  @SuppressWarnings(\"unchecked\")\n   public void createWeight(Map<?,?> context, IndexSearcher searcher) throws IOException {\n   // FIXME: how to use a helper method here to avoid the unchecked cast? See https://docs.oracle.com/javase/tutorial/java/generics/capture.html\n     ((Map<Object,Object>)context).put(\"searcher\",searcher);\n\n\n\nI tried to implement such a helper function, but I could not get it to compile cleanly.\nAny suggestions for this? ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15775468",
            "date": "2016-12-24T21:39:53+0000",
            "content": "The patch also contains a few similar fixes for test code, but it is too much work to be complete for the test code, so I left it at that. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15776673",
            "date": "2016-12-25T16:01:44+0000",
            "content": "This ContextMap lucene patch includes the previous patch of 24 December 2016.\nThis also changes all use of Map for function queries to ContextMap, which changes the public API, although not much.\nAll lucene tests pass. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15776675",
            "date": "2016-12-25T16:03:06+0000",
            "content": "The ContextMap solr patch needs the ContextMap lucene patch.\nIt uses ContextMap in solr, also changing public API.\nAll solr tests pass. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15776683",
            "date": "2016-12-25T16:09:20+0000",
            "content": "The interesting pieces of code for ContextMap:\n\nThe class itself:\n\npublic class ContextMap extends HashMap<Object,Object> {\n  public ContextMap() { // empty\n  }\n\n  public ContextMap(ContextMap source) { // new copy\n    super(source);\n  }\n\n  public ContextMap(IdentityHashMap<?,?> source) { // for solr\n    super(source);\n  }\n}\n\n\n\n\nthe way it is used in solr, in SlotAcc.java:\n\nclass SolrContextMap extends ContextMap {\n  SolrContextMap(org.apache.solr.search.QueryContext context) {\n    super((java.util.IdentityHashMap)context); // CHECKME: copy ok?\n  }\n}\n\n// TODO: we should really have a decoupled value provider...\n// This would enhance reuse and also prevent multiple lookups of same value across diff stats\nabstract class FuncSlotAcc extends SlotAcc {\n  protected final ValueSource valueSource;\n  protected FunctionValues values;\n\n  public FuncSlotAcc(ValueSource values, FacetContext fcontext, int numSlots) {\n    super(fcontext);\n    this.valueSource = values;\n  }\n\n  @Override\n  public void setNextReader(LeafReaderContext readerContext) throws IOException {\n    values = valueSource.getValues(new SolrContextMap(fcontext.qcontext), readerContext);\n  }\n}\n\n\n\nand some unchanged code from solr's QueryContext.java:\n\n/*\n * Bridge between old style context and a real class.\n * This is currently slightly more heavy weight than necessary because of the need to inherit from IdentityHashMap rather than\n * instantiate it on demand (and the need to put \"searcher\" in the map)\n * @lucene.experimental\n */\npublic class QueryContext extends IdentityHashMap implements Closeable {\n   ...\n}\n\n ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15776689",
            "date": "2016-12-25T16:14:39+0000",
            "content": "The lucene patch replaces the use of IdentityHashMap in ValueSource.java by a ContextMap, because I think it is wrong to use an IdentityHashMap there. Strings are used as keys, and Strings are not unique objects in java.\n\nHowever, this conflicts somewhat with the way ContextMap is used in solr. There QueryContext needs an IdentityHashMap, but the solr tests pass even with the patch applied. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15776698",
            "date": "2016-12-25T16:21:46+0000",
            "content": "With both patches applied, ant clean compile-test gives a single warning.\n\nPerhaps ContextMap should be separate issue.\n\nFor lucene I think it is worthwhile to use a lucene class without generics as the context map instead of the Map<?,?> variations that are present in the current code.\n\nFor solr I have no idea. I would hope that using IdentityHashMap is no more needed because queries are immutable. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15776733",
            "date": "2016-12-25T16:49:39+0000",
            "content": "I am so happy that you are interested in fixing the function query warnings! \ud83d\ude06 ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15777181",
            "date": "2016-12-25T22:59:59+0000",
            "content": "For solr I have no idea. I would hope that using IdentityHashMap is no more needed because queries are immutable.\n\nMaybe Solr should also switch to ContextMap then? ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15777253",
            "date": "2016-12-26T00:01:27+0000",
            "content": "can't we just use Map<Object,Object> instead of Map<?,?> or ContextMap? ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15778681",
            "date": "2016-12-26T17:15:38+0000",
            "content": "Do you mean like this:\n\npublic class ContextMap extends AbstractMap<Object,Object>\n{ ... }\n\n ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15778692",
            "date": "2016-12-26T17:23:04+0000",
            "content": "Meanwhile I tried implementing solr's QueryContext by extending ContextMap, and no more wrapping of fcontext.qcontext in a SolrContextMap, see FuncSlotAcc.setNextReader above.\n\nThe solr tests passed, so I think there is no more need for IdentityHashMap, in both lucene and solr.\n\nShall I post a complete patch against master, or just the changes changes since yesterday? ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15779034",
            "date": "2016-12-26T21:45:42+0000",
            "content": "Patch of 26 Dec 2016.\nMostly as discussed above.\n\nContextMap extends HashMap. I tried implementing AbstractMap, but that ends up in a detour to a HashMap anyway, so I left it at direct extension.\n\nIs there a way to quickly check for unused imports at top level?\nI used ant precommit for that, but it is quite slow because it stops after the first module with an error, and quite a few modules are involved here. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15779059",
            "date": "2016-12-26T22:02:12+0000",
            "content": "can't we just use Map<Object,Object> ?\n\nContextMap implements that interface.\nSince this is widely used, I prefer to use a lucene class (ContextMap) over an interface that is defined in the java language (Map<Object,Object>), because it allows a change in a single place.\n\nWe could still separate the implementation from the interface, but that would be more than fixing the compiler warnings here.\n ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15780903",
            "date": "2016-12-27T17:58:21+0000",
            "content": "I think the current issue will clean up three previous issues.  ",
            "author": "Ahmet Arslan"
        },
        {
            "id": "comment-15785283",
            "date": "2016-12-29T13:05:41+0000",
            "content": "Thanks for linking to these other issues. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15785292",
            "date": "2016-12-29T13:12:25+0000",
            "content": "Patch of 29 Dec 2016.\n\nThis patch takes tries to separate interface from implementation by making the constructors in ContextMap and QueryContext protected and using only a few factory methods for ContextMap.\n\nIt would be nicer to use private inheritance from HashMap<Object,Object> and only expose Map<Object,Object>, but java does not have private inheritance. The alternative of object composition gives a detour to AbstractMap, and that only complicates the code.\n\nSo the question is which is preferable: use of a local class ContextMap as in the patch, or use of Map<Object,Object> ? ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15785298",
            "date": "2016-12-29T13:15:35+0000",
            "content": "For easy reference, ContextMap now looks like this:\n\n/** Modifiable {@link Map} of key objects to value objects for {@link ValueSource}. */\npublic class ContextMap extends HashMap<Object,Object> {\n  protected ContextMap() {\n  }\n\n  protected ContextMap(Map<Object,Object> source) {\n    super(source);\n  }\n\n  /** Create an empty ContextMap */\n  public static ContextMap newContext() {\n    return new ContextMap();\n  }\n\n  /** Create a ContextMap as a copy of the given one. */\n  public static ContextMap copyOf(Map<Object,Object> source) {\n    return new ContextMap(source);\n  }\n}\n\n\nThe first protected constructor is used in solr's QueryContext, the other one could be private. ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15785307",
            "date": "2016-12-29T13:21:51+0000",
            "content": "Looking at that code, the copyOf method should be named asCopyOf..., and the javadocs should be \"as a copy of the given Map\". ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15785476",
            "date": "2016-12-29T15:05:46+0000",
            "content": "After taking a closer look at the other issues:\n\nHow about renaming the ContextMap here to ValueSourceContext or to VSContext ? ",
            "author": "Paul Elschot"
        },
        {
            "id": "comment-15975456",
            "date": "2017-04-19T20:31:56+0000",
            "content": "Not enough interest ",
            "author": "Paul Elschot"
        }
    ]
}