{
    "id": "LUCENE-7080",
    "title": "MockDirectoryWrapper relies on HashSet iteration order",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.5,                                            6.0",
        "components": [
            "general/test"
        ],
        "labels": "",
        "fix_versions": [
            "6.0",
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "MDW relies on HashSet iteration order in \n\n\n  public synchronized void corruptFiles(Collection<String> files) throws IOException {\n    // Must make a copy because we change the incoming unsyncedFiles\n    // when we create temp files, delete, etc., below:\n    for(String name : new ArrayList<>(files)) { // <<<<< this should be sorted\n      int damage = randomState.nextInt(6);\n\n\n\nthis causes reproducibility issues when files get corrupted.",
    "attachments": {
        "LUCENE-7080.patch": "https://issues.apache.org/jira/secure/attachment/12792215/LUCENE-7080.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15185773",
            "author": "Marius Grama",
            "date": "2016-03-08T20:56:05+0000",
            "content": "Even if the files collection is iterated in a sorted manner, this will not ensure that calling corruptFiles(Collection<String>) method twice, will issue the same results, because of \n\nint damage = randomState.nextInt(6);\n\n "
        },
        {
            "id": "comment-15186829",
            "author": "Simon Willnauer",
            "date": "2016-03-09T09:25:57+0000",
            "content": "Marius Grama, the lucene test framework uses randomized runner which takes care of the reproducibility of our PRNG. The framework / test uses a random seed to initialize the PRNG and that allows use to draw random number like this in a reproducible fashion. The problem here is that different JDKs can have different hashing schemes for the hash set and that causes different iteration order which in-turn breaks the reproducibility. "
        },
        {
            "id": "comment-15186830",
            "author": "Simon Willnauer",
            "date": "2016-03-09T09:26:48+0000",
            "content": "here is a patch "
        },
        {
            "id": "comment-15186868",
            "author": "Michael McCandless",
            "date": "2016-03-09T09:50:58+0000",
            "content": "+1\n\nThis was causing hilarious ES test failures, like:\n\n\njava.lang.IllegalArgumentException: An SPI class of type org.apache.lucene.codecs.Codec with name 'Asseruing' does not exist.  You need to add the corresponding JAR file supporting this SPI to your classpath.  The current classpath supports the following names: [Lucene60, Lucene50, Lucene53, Lucene54, Asserting, CheapBastard, FastCompressingStoredFields, FastDecompressionCompressingStoredFields, HighCompressionCompressingStoredFields, DummyCompressingStoredFields, SimpleText]\n\tat __randomizedtesting.SeedInfo.seed([F5C8F2C1D5BDBA14:48F62EB91B77A0CA]:0)\n\tat org.apache.lucene.util.NamedSPILoader.lookup(NamedSPILoader.java:116)\n\tat org.apache.lucene.codecs.Codec.forName(Codec.java:116)\n\tat org.apache.lucene.index.SegmentInfos.readCodec(SegmentInfos.java:417)\n\tat org.apache.lucene.index.SegmentInfos.readCommit(SegmentInfos.java:349)\n\tat org.apache.lucene.index.SegmentInfos.readCommit(SegmentInfos.java:284)\n\tat org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:507)\n\tat org.apache.lucene.util.TestUtil.checkIndex(TestUtil.java:300)\n\tat org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:848)\n\n\n\nAnother time it failed with AsserTing, then Assertkng  "
        },
        {
            "id": "comment-15186885",
            "author": "ASF subversion and git services",
            "date": "2016-03-09T10:01:20+0000",
            "content": "Commit 588aeeaab731f34af9063ec0dedb714f8740e0b2 in lucene-solr's branch refs/heads/master from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=588aeea ]\n\nLUCENE-7080: Sort files to corrupt to prevent HashSet iteration order issues across JVMs "
        },
        {
            "id": "comment-15186896",
            "author": "ASF subversion and git services",
            "date": "2016-03-09T10:06:53+0000",
            "content": "Commit 6aa9aa66e334b8c415fa6d9976bbef581ea352c9 in lucene-solr's branch refs/heads/branch_6_0 from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6aa9aa6 ]\n\nLUCENE-7080: Sort files to corrupt to prevent HashSet iteration order issues across JVMs "
        },
        {
            "id": "comment-15186897",
            "author": "ASF subversion and git services",
            "date": "2016-03-09T10:06:53+0000",
            "content": "Commit b4eb4fb32cb819199a2fb564750393be439be66e in lucene-solr's branch refs/heads/branch_6x from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b4eb4fb ]\n\nLUCENE-7080: Sort files to corrupt to prevent HashSet iteration order issues across JVMs "
        },
        {
            "id": "comment-15187300",
            "author": "ASF subversion and git services",
            "date": "2016-03-09T16:00:21+0000",
            "content": "Commit 588aeeaab731f34af9063ec0dedb714f8740e0b2 in lucene-solr's branch refs/heads/apiv2 from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=588aeea ]\n\nLUCENE-7080: Sort files to corrupt to prevent HashSet iteration order issues across JVMs "
        },
        {
            "id": "comment-15279111",
            "author": "Hoss Man",
            "date": "2016-05-10T22:21:09+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}