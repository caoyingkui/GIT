{
    "id": "SOLR-2410",
    "title": "ConcurrentLRUCache can throw class cast exception",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "ConcurrentLRUCache throws a class cast exception.",
    "attachments": {
        "SOLR-2410.patch": "https://issues.apache.org/jira/secure/attachment/12472888/SOLR-2410.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13003668",
            "date": "2011-03-07T22:53:20+0000",
            "content": "Here's the smallest version I could reproduce the issue with.\n\n\nclass CacheEntry<K,V> {\n}\n\nclass PQueue<K,V> extends PriorityQueue<CacheEntry<K,V>> {\n  public static void main(String[] args) {\n    new PQueue<String,String>().tst();\n  }\n\n  PQueue() {\n    super.initialize(1);\n  }\n\n  @Override\n  protected boolean lessThan(CacheEntry<K,V> a, CacheEntry<K,V> b) {\n    return true;\n  }\n\n  public CacheEntry<K,V> tst() {\n    return heap[1];\n  }\n}\n\n\n\nI just cut-n-pasted the code into BasicFunctionalityTest, run main() from my IDE, and presto:\n\n\nException in thread \"main\" java.lang.ClassCastException: [Ljava.lang.Object; cannot be cast to [Lorg.apache.solr.CacheEntry;\n\tat org.apache.solr.PQueue.tst(BasicFunctionalityTest.java:81)\n\tat org.apache.solr.PQueue.main(BasicFunctionalityTest.java:68)\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13003674",
            "date": "2011-03-07T23:04:59+0000",
            "content": "Here's an even smaller version w/ no dependencies:\n\n\nclass C<T> {\n}\n\nclass A<T1> {\n  public T1[] arr = (T1[])(new Object[1]);\n}\n\nclass B<T2> extends A<C<T2>> {\n  public C<T2> tst() {\n    return arr[0];\n  }\n\n  public static void main(String[] args) {\n    new B<String>().tst();\n  }\n}\n\n "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13003675",
            "date": "2011-03-07T23:06:45+0000",
            "content": "It's because there's a bug \u2013 PriorityQueue declares a generic array:\n\n  protected T[] heap; \n\nbut assigns an Object[] to it in:\n\n    heap = (T[]) new Object[heapSize]; // T is unbounded type, so this unchecked cast works always\n\nthis is true only if heap is not exposed outside the class (and is the pattern used in JDK's ArrayDeque<E>, for  example). Unfortunately the compiler will insert casts if you have a subclass with a narrowed generic type to ensure the array is indeed of proper type. The solution is to:\n\n1) allocate arrays of real component type (impossible if you don't know it in advance or don't have an existing array or its component). Example: Google Guava's ObjectArrays.newArray, as here:\n\nhttp://guava-libraries.googlecode.com/svn/tags/release08/javadoc/com/google/common/collect/ObjectArrays.html#newArray(java.lang.Class, int)\n\n2) cast superclass's array to (Object[]) first, then cast to the concrete component type. Here:\n\n(CacheEntry<K,V>) ((Object[]) heap)[1];\n\n3) Declare PriorityQueue's internal array as Object[] and provide a getter that casts components to (T)? "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13003676",
            "date": "2011-03-07T23:09:52+0000",
            "content": "Btw. this is exactly the reason Collections declare Object[] toArray() and not T[] toArray \u2013 in the latter case the compiler adds casts to the expression's argument type and collections can't know their component type after type erasure. Eh, C#/.NET is so much more elegant with generics. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13003682",
            "date": "2011-03-07T23:25:46+0000",
            "content": "Yonik, try this and it should be clear why the above doesn't work:\n\n\npublic class Example\n{\n    public static class A<T> {\n        @SuppressWarnings(\"unchecked\") // it is here for a reason :)\n        public T[] array = (T[]) new Object [1]; \n    }\n    \n    public static void main(String [] args)\n    {\n        A<Integer> clazzA = new A<Integer>();\n        System.out.println(clazzA.array[0]);\n    }\n}\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13003690",
            "date": "2011-03-07T23:37:20+0000",
            "content": "Thanks Dawid!\n\n2) cast superclass's array to (Object[]) first, then cast to the concrete component type. Here:\n\nI tried this, but couldn't get it to work:\n\n\nclass Example\n{\n   public static class A<T> {\n       @SuppressWarnings(\"unchecked\") // it is here for a reason :)\n       public T[] array = (T[]) new Object [1];\n   }\n\n   public static void main(String [] args)\n   {\n       A<Integer> clazzA = new A<Integer>();\n       System.out.println(((Integer[])((Object[])clazzA.array))[0]);\n   }\n}\n\n\n\nedit: I got it - you need to access the array as an Object[]\n\n\n       System.out.println( (Integer) (((Object[])clazzA.array)[0]));\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13003736",
            "date": "2011-03-08T00:54:02+0000",
            "content": "Here's a patch that reverts back to a normal PQ (non-generified).  This minimizes the chance of another generics related bug here since the code is so hard to hit. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13003761",
            "date": "2011-03-08T01:36:22+0000",
            "content": "Ad David has pointed out, the root problem is in PriorityQueue \u2013 yonik's patch just avoids this bug by eliminating the generics\n\nLUCENE-2953 trask the underlying problem "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13003764",
            "date": "2011-03-08T01:39:21+0000",
            "content": "Here's the patch with a test added that normally manages to trip the exception. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13003843",
            "date": "2011-03-08T07:26:48+0000",
            "content": "Yep, sorry for belated follow up, I went to sleep last night  The workaround is to access T[] as an Object[] \u2013 the actual type of the object that is stored in that field. I like reverting to Object[] much more since this \"feature\" is quite nasty and puzzling, especially for people who haven't seen it before (I have seen it a few times, for example here: http://issues.carrot2.org/browse/HPPC-46). Glad I could help. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13004432",
            "date": "2011-03-09T09:20:39+0000",
            "content": "This was fixed by trunk revision: 1079707 (through LUCENE-2953) "
        }
    ]
}