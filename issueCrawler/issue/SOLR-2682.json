{
    "id": "SOLR-2682",
    "title": "remove addException() from SimpleFacet",
    "details": {
        "affect_versions": "1.1.0,                                            1.2,                                            1.3,                                            1.4.1,                                            3.1,                                            3.2,                                            3.3,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "addException() which is super historic, pre-apache code, should be removed from SimpleFacet. Hoss described in the mail thread http://mail-archives.apache.org/mod_mbox/lucene-solr-user/201107.mbox/%3Calpine.DEB.2.00.1107281651200.12738@bester%3E\n\n\n: If I got an exception during faceting (e.g. undefined field), Solr doesn't\n: return HTTP 400 but 200 with the exception stack trace in <arr name=\"exception\">\n: ...</arr> tag. Why is it implemented so? I checked Solr 1.1 and saw the same behavior.\n\nsuper historic, pre-apache, code ... the idea at the time was that some \nparts of the response (like faceting, highlightin, watever...) would be \n\"optional\" and if there was an error computing that data it wouldn't fail \nthe main request.\n\nthat logic should really be ripped out.",
    "attachments": {
        "SOLR-2682.patch": "https://issues.apache.org/jira/secure/attachment/12488168/SOLR-2682.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13072661",
            "date": "2011-07-29T02:57:43+0000",
            "content": "Patch.\n\nI removed addException() in SimpleFacet. SimpleFacet now catches IOException and ParseException and throws them as 500 and 400 errors respectively.\n\nThis affects run time behavior. I wrote a note for it in CHANGES.txt. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13072784",
            "date": "2011-07-29T11:54:39+0000",
            "content": "I'll commit tomorrow. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13073160",
            "date": "2011-07-30T11:50:48+0000",
            "content": "trunk: Committed revision 1152456.\n3x: Committed revision 1152458. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13073185",
            "date": "2011-07-30T14:44:04+0000",
            "content": "I think I remember that distributed faceting had explicit support for acting like non-distributed wrt exceptions also. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13073267",
            "date": "2011-07-30T23:57:45+0000",
            "content": "Uh, good point. I'll check. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106228",
            "date": "2011-09-16T14:48:54+0000",
            "content": "bulk close for 3.4 "
        }
    ]
}