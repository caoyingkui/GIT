{
    "id": "SOLR-1419",
    "title": "Solr won't load filters from parent class loader, and the resulting error stacktrace is very confusing",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "I specified a token filter class in my schema, and provided that class in a jar file in the system classpath of my jetty instance instead of in WEB-INF/lib of my solr webapp.\n\nThis did not work.\n\nTo make matters odder, the logged error did not mention my filter, but rather an internal solr interface:\n\nCaused by: java.lang.ClassNotFoundException: org.apache.solr.util.plugin.ResourceLoaderAware\n\tat java.net.URLClassLoader$1.run(URLClassLoader.java:200)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:188)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:319)\n\tat sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:330)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:254)\n\tat java.lang.ClassLoader.loadClassInternal(ClassLoader.java:399)\n\nI note in passing that the token filter in turn uses other classes which stayed happily behind in the outer classloader after moved the immediate filter class into the webapp.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12753412",
            "date": "2009-09-10T04:21:15+0000",
            "content": "Please ask the question in solr-user/solr-dev before you raise a JIRA issue. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12753413",
            "date": "2009-09-10T04:23:12+0000",
            "content": "Do not drop your plugins in the system classpath . it WILL NOT WORK. it can work only if your solr internal classes are also loaded by system classpath. drop your jars in the $solr.home/lib dir "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-12753415",
            "date": "2009-09-10T04:27:29+0000",
            "content": "The error message issue struck me as JIRA-worthy even if the underlying behavior is by design. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12754294",
            "date": "2009-09-11T19:21:24+0000",
            "content": "The error message issue struck me as JIRA-worthy even if the underlying behavior is by design. \n\nthe behavior is by design \u2013 of the VM.  Solr doesn't have anything to do with it, so Solr can't really improve the message produced either.\n\nthere MAY be some tricks Solr can do to recognize when a class load error was caused by another class load error for a class Solr already know about \u2013 and then solr could generate an additional err message explaining the problem \u2013 but that would certainly be a new feature, not a bug. "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-12754324",
            "date": "2009-09-11T20:24:47+0000",
            "content": "I'll comment here and then open a feature request. Solr knows that it just called into the class loader to locate a class by name. So it could certainly include the name of what it was looking for in its exception, even if the VM chooses to describe as the source of the problem.\n "
        }
    ]
}