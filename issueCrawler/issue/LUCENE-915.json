{
    "id": "LUCENE-915",
    "title": "PorterStemmer is incorrectly truncating words ending in e",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index",
            "core/queryparser",
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.9",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "Searching for the word 'orange' will result incorrectly in matches for 'orang'.\n\nLikewise, searching for 'apple' will incorrectly match 'appl'\n\nThe problem is in step6() of the PorterStemmer class.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-06-07T05:12:49+0000",
            "content": "can you elaborate on why you think this is a bug?  \n\nThis is a fairly basic function of the Porter Stemming Algorithm, and exists in the official java version of the algorith published by Martin Porter...\n\nhttp://www.tartarus.org/~martin/PorterStemmer/java.txt\n\n(you may not arge with Porter's decision to strip trailing Es, but it's in the algorithm, and the class implements the algorithm) ",
            "author": "Hoss Man",
            "id": "comment-12502221"
        },
        {
            "date": "2007-06-07T05:19:54+0000",
            "content": "I believe like you say that the algorithm is correctly implemented, however the algorithm has the above bug.\n\nThe end result is false positives in the search results.\nIt's not a big issue, however the search engine has a behaviour that leads to false hits being returned and therefore this is definitely a defect in application functionality.\n\nI'd imagine you aren't going to fix it since it would require explicit 'exception word' checking being added to the algorithm. So feel free to close the issue. The main reason I raise it is so others will hopefully spend less time that I did being confused by this. ",
            "author": "Paul Curren",
            "id": "comment-12502223"
        },
        {
            "date": "2007-06-07T05:39:41+0000",
            "content": "> I'd imagine you aren't going to fix it since it would require explicit 'exception word' \n> checking being added to the algorithm. \n\n...well, my point actually is that there is no bug to fix \u2013 the algorithm is what it is, and the code implements the algorithm.\n\nchanging the code wouldn't be fixing a bug, it would be breaking the PorterStemmer class so that it no longer does what it says \"implementing the Porter Stemming Algorithm\"\n\ni'm sure there are lots of other use cases unrelated the the ones you outlined where people could argue that the Porter algorithm does something they don't want \u2013 but that's just the nature of algorithm stemmers.  as outlined onthe Porter Stemmer homepage...\n\n\"The most frequently asked question is why word X should be stemmed to x1, when one would have expected it to be stemmed to x2. It is important to remember that the stemming algorithm cannot achieve perfection. On balance it will (or may) improve IR performance, but in individual cases it may sometimes make what are, or what seem to be, errors.\" ",
            "author": "Hoss Man",
            "id": "comment-12502227"
        },
        {
            "date": "2007-06-07T06:25:08+0000",
            "content": "I understand, and thanks for you help.\n\nIncidentally, i'm comparing against a commercial search engine which doesn't exhibit this stemming behaviour.\nThey must be using a different or modified algorithm - I don't know which i'm afraid.\n\nThis is the reason why I raise this as a bug - at the application level (forget about low level components and stemmers for now) there is an unexpected behaviour and it relates to an implementation detail within Lucene (the choice of algorithm).\n\nThat's all, thanks again.\n ",
            "author": "Paul Curren",
            "id": "comment-12502233"
        },
        {
            "date": "2007-06-07T07:29:32+0000",
            "content": "NOTE: There are lots of stemmers in the world, not just Porter ... Martin Porter himself recommends using the Snowball stemmer (which also exists as an optional Lucene Filter)\n\nFurther discussion about stemmers and choice of stemmers in building lucene applications should be directed to the java-user mailing list, and not in Jira. ",
            "author": "Hoss Man",
            "id": "comment-12502251"
        }
    ]
}