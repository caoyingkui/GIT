{
    "id": "SOLR-8687",
    "title": "Race condition with RTGs during soft commit",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Invalid",
        "priority": "Major"
    },
    "description": "I am facing a problem with stress testing SOLR-5944, even though I think this problem persists in Solr even without my changes.\n\nThe symptom is that during a stress test (similar to TestStressReorder), RTG gets a document which is older version than that of the last acknowledged write.\n\nPossible reason:\n\n(DUH2's commit())\n...\n1:      if (cmd.softCommit) {\n2:        // ulog.preSoftCommit();\n3:        synchronized (solrCoreState.getUpdateLock()) {\n4:          if (ulog != null) ulog.preSoftCommit(cmd);\n5:          core.getSearcher(true, false, waitSearcher, true);\n6:          if (ulog != null) ulog.postSoftCommit(cmd);\n7:        }\n8:        callPostSoftCommitCallbacks();\n9:      }\n...\n\n\n\n\n\n\tBefore line 1, there was an update (say id=2) which was in ulog's map. Maps are, say, map={2=LogPtr(1234)} , prevMap={...} , prevMap2={...}\n\tDue to line 4 (ulog.preSoftCommit()), the maps were rotated. Now, the id=2 is in prevMap: map={}, prevMap={2=LogPtr(1234)}, prevMap2={...} . Till now RTG for id=2 will work.\n\tDue to line 5, a new searcher is due to be opened. But this is asynchronous, and lets assume this doesn't complete before few more lines are executed.\n\tDue to line 6 (ulog.postSoftCommit()), the previous maps are cleared out. Now the maps are: map={}, prevMap=null, prevMap2=null\n\tIf there's an RTG for id=2, it will not work from the ulog's maps, so it will fall through to be searched using the last searcher. But, the searcher due to be opened in line 5 hasn't yet been opened. In this case, the returned document will be whatever version of id=2 that was present in the previous searcher.\n\n\n\nCan someone please confirm if this is a potential problem? If so, any suggestions for a fix, please? I tried opening a ulog.openRealtimeSearcher() in the above synchronized block, but the problem still persists, but I haven't looked into why that could be.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-02-17T19:57:28+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "My stress test is here:\nhttps://github.com/chatman/lucene-solr/blob/627b9ac9b46796f20be78b04ebbdfa4299b96ab7/solr/core/src/test/org/apache/solr/cloud/TestStressInPlaceUpdates.java ",
            "id": "comment-15151059"
        },
        {
            "date": "2016-02-18T23:20:48+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "This does look like a genuine bug, Ishan. We wait for the new searcher outside of the synchronized block and so as you said, a concurrent RTG request can miss updates. Perhaps Yonik Seeley has a suggestion for us? ",
            "id": "comment-15153329"
        },
        {
            "date": "2016-02-19T00:10:00+0000",
            "author": "Yonik Seeley",
            "content": "Hmmm, RTG should be air-tight (I always hate changes to synchronization in this area because it's hard to re-validate).  We have stress tests for this, so it's also disconcerting if it's not air-tight and our tests don't catch it.\nI'll review the related code again... ",
            "id": "comment-15153413"
        },
        {
            "date": "2016-02-19T00:20:33+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "it's also disconcerting if it's not air-tight and our tests don't catch it\nWith Steve Rowe's help, I stress tested 1000 rounds (16 at a time) of the StressReorderTest and it didn't fail.\nHowever, the above mentioned test, which is similar to StressReorderTest, but on a 3 node cluster instead of a simulated replica, failed around 10 times (each with this exact failure). Also, I had increased the number of read operations within each test from 50k to 200k. That means 10 failures out of 3.2 billion reads (which includes both searches and RTGs). At this time, I am reasonably sure that the test had nothing to do with my other changes. Next up, I shall isolate the test from the other changes and try to run it on a fresh master so as to be sure I can reproduce. ",
            "id": "comment-15153422"
        },
        {
            "date": "2016-03-14T15:30:47+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I realized that there is no race condition. What I was seeing was a condition whereby the searcher was opening fine before the RTG call, just that the update which I was sure should've been in the searcher was not (it was a DV update, as per work done in SOLR-5944). Sorry for the noise. ",
            "id": "comment-15193482"
        }
    ]
}