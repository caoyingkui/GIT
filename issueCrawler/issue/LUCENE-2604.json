{
    "id": "LUCENE-2604",
    "title": "add regexpquery to queryparser",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "patch that adds RegexpQuery if you /enter an expression between slashes like this/\n\ni didnt do the contrib ones but could add it there too if it seems like a good idea.",
    "attachments": {
        "LUCENE-2604.patch": "https://issues.apache.org/jira/secure/attachment/12452243/LUCENE-2604.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-08-17T11:13:24+0000",
            "content": "hehe - since regexquery is now in core this can be easily integrated. By skimming through your patch I figured that you can not run parse a query like \"/[A-Z]/[123]/\" (already a valid java string) because of the slash in the regex. I had similar issues in LUCENE-2039 which I can't really remember how I solved them but it would be nice if you could escape the slashes if you wanna search for regexp with those chars.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12899374"
        },
        {
            "date": "2010-08-17T14:09:13+0000",
            "content": "Thanks Simon: you are right! I updated the patch with your test\n\nI modified the grammar slightly to allow \"/\" when escaped:\n\n<REGEXPTERM: \"/\" (~[ \"/\" ] | \"\\\\/\" )* \"/\" >\n\n\n\nAdditionally i removed any un-escaping in QP itself so that it passes\nthrough unchanged to RegexpQuery: this way you don't have to \ndouble-escape operators. ",
            "author": "Robert Muir",
            "id": "comment-12899413"
        },
        {
            "date": "2010-08-22T20:16:27+0000",
            "content": "Looks good to me robert, want me to take the issue?\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12901205"
        },
        {
            "date": "2010-08-23T00:14:16+0000",
            "content": "Simon, thats great if you would like to, only thing is i would like to try to do contrib ones too.\n\nif you don't have the time to do this part also, i'll get around to it eventually, but in general i think its best to try to keep all the qp's in sync. ",
            "author": "Robert Muir",
            "id": "comment-12901224"
        },
        {
            "date": "2010-08-23T06:21:45+0000",
            "content": "Simon, thats great if you would like to, only thing is i would like to try to do contrib ones too.\n\nwill do - no problem...\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12901277"
        },
        {
            "date": "2010-08-27T11:21:32+0000",
            "content": "This patch adds RegexpQuery to remaining contrib queryparsers. It also extends the original testcases to cache several other cases.  \n\nI would appreciate if somebody more familiar with the contrib queryparser (the IBM one  ) could review that code. Buschmi, would you take a look?\n\nsimon  ",
            "author": "Simon Willnauer",
            "id": "comment-12903371"
        },
        {
            "date": "2010-08-27T15:11:07+0000",
            "content": "Simon, I took a quick look and the changes look good to me, but i am no expert on that contrib queryparser either \n\nThanks for your work here. ",
            "author": "Robert Muir",
            "id": "comment-12903446"
        },
        {
            "date": "2010-08-29T16:13:14+0000",
            "content": "It seems nobody who is more familiar with that contrib query parser code is around to take a look into that. I plan to commit this soon... Any objections? ",
            "author": "Simon Willnauer",
            "id": "comment-12903982"
        },
        {
            "date": "2010-08-30T16:06:44+0000",
            "content": " Committed revision 990836. ",
            "author": "Simon Willnauer",
            "id": "comment-12904236"
        },
        {
            "date": "2012-02-22T18:47:09+0000",
            "content": "I just came across a problem with this, where regular expressions are being parsed across fields. Feels like a bug to me.\n\nQueries like these fail to parse:\nfieldName:/a fieldName:/a\nSEVERE: org.apache.solr.common.SolrException: no field name specified in query and no defaultSearchField defined in schema.xml\n\tat org.apache.solr.search.SolrQueryParser.checkNullField(SolrQueryParser.java:106)\n\tat org.apache.solr.search.SolrQueryParser.getFieldQuery(SolrQueryParser.java:124)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.handleBareTokenQuery(QueryParserBase.java:1058)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Term(QueryParser.java:358)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.java:257)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.java:212)\n\tat org.apache.lucene.queryparser.classic.QueryParser.TopLevelQuery(QueryParser.java:170)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryParserBase.java:118)\n\tat org.apache.solr.search.LuceneQParser.parse(LuceneQParserPlugin.java:74)\n\tat org.apache.solr.search.QParser.getQuery(QParser.java:143)\n\nfieldName:/* fieldName:/*\njava.lang.NullPointerException\n\tat org.apache.solr.schema.IndexSchema$DynamicReplacement.matches(IndexSchema.java:747)\n\tat org.apache.solr.schema.IndexSchema.getDynamicFieldType(IndexSchema.java:1026)\n\tat org.apache.solr.schema.IndexSchema.getFieldType(IndexSchema.java:980)\n\tat org.apache.solr.search.SolrQueryParser.getWildcardQuery(SolrQueryParser.java:172)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.handleBareTokenQuery(QueryParserBase.java:1039)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Term(QueryParser.java:358)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.java:257)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.java:212)\n\tat org.apache.lucene.queryparser.classic.QueryParser.TopLevelQuery(QueryParser.java:170)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryParserBase.java:118)\n\tat org.apache.solr.search.LuceneQParser.parse(LuceneQParserPlugin.java:74)\n\tat org.apache.solr.search.QParser.getQuery(QParser.java:143) ",
            "author": "Yury Kats",
            "id": "comment-13213841"
        },
        {
            "date": "2012-02-22T18:55:56+0000",
            "content": "Its no bug: the regexp syntax is optionalField:/stuff/\n ",
            "author": "Robert Muir",
            "id": "comment-13213847"
        },
        {
            "date": "2012-02-29T03:57:38+0000",
            "content": "Re-opening ... some issues were pointed out in a recent mailing list thread that definitely seem like they should be addressed before this is officially released...\n\n\n\tqueryparsersyntax.xml doesn't mention this feature at all \u2013 as major new syntax is should really get it's own section with an example showing the syntax\n\tqueryparsersyntax.xml's section on \"Escaping Special Characters\" needs to mention that '/' is a special character\n\tQueryParser.escape needs to include '/' in the characters it escapes\n\t\n\t\tditto for Solr's ClientUtils.escapeQueryChars and SolrPluginUtils.partialEscape\n\t\ti've got a patch for this i'll commit as soon as the tests finish.\n\t\n\t\n\n\n\nAlso: Given that Yury encountered some real world situations in which the new syntax caused problems with existing queries, it seems like we should definitely make a note about this possibility more promonient ... i'm not sure if it makes sense in MIGRATE.txt but at a minimum it seems like the existing CHANGES.txt entry should mention it, maybe something like...\n\n\n* LUCENE-2604: Added RegexpQuery support to QueryParser. Regular expressions\n  are now directly supported by the standard queryparser using the syntax... \n     fieldName:/expression/ OR /expression against default field/\n  Users who wish to search for literal \"/\" characters are advised to \n  backslash-escape or quote those characters as needed. \n  (Simon Willnauer, Robert Muir)\n\n\n\n...thoughts? ",
            "author": "Hoss Man",
            "id": "comment-13218885"
        },
        {
            "date": "2012-03-01T06:38:33+0000",
            "content": "+1, thanks for cleaning up. ",
            "author": "Robert Muir",
            "id": "comment-13219844"
        },
        {
            "date": "2012-03-01T07:17:24+0000",
            "content": "+1 thanks hoss those are valuable and important additions... feel free to assign this issue to you...\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13219872"
        },
        {
            "date": "2012-04-13T20:54:19+0000",
            "content": "This feature does not work as of the trunk today.\n\nRun the example.\nPost the exampledocs files.\nThe first document in hd.xml is id=SP2514N.\nThis should return that document but does not:\n\nhttp://localhost:8983/solr/select?q=id:/2541/&start=0&rows=10&wt=xml\n\n\nFrom mail with Robert Muir:\n\nThis looks like a queryparser precedence bug to me. REGEXPTERM should\nbe moved up above PREFIXTERM and WILDTERM or queries with * will be\ntreated as those first, even if they are inside /..../. Open an issue\nand I'll take care of it.\n ",
            "author": "Lance Norskog",
            "id": "comment-13253737"
        },
        {
            "date": "2012-04-13T20:59:31+0000",
            "content": "Lance, its true there is a precedence bug, but your example is not correct.\n\nThere are no implicit \".*\" in the regexp syntax: /2541/ only matches 2541 exactly.\n\nLets open a new issue for this though. This issue needs to be closed. ",
            "author": "Robert Muir",
            "id": "comment-13253743"
        },
        {
            "date": "2012-04-13T20:59:46+0000",
            "content": "This issue has been committed for a while. ",
            "author": "Robert Muir",
            "id": "comment-13253744"
        }
    ]
}