{
    "id": "SOLR-3282",
    "title": "Perform Kuromoji/Japanese stability test before 3.6 freeze",
    "details": {
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Kuromoji might be used by many and also in mission critical systems.  I'd like to run a stability test before we freeze 3.6.\n\nMy thinking is to test the out-of-the-box configuration using fieldtype text_ja as follows:\n\n\n\tIndex all of Japanese Wikipedia documents (approx. 1.4M documents) in a never ending loop\n\tSimultaneously run many tens of thousands typical Japanese queries against the index at 3-5 queries per second with highlighting turned on\n\n\n\nWhile Solr is indexing and searching, I'd like to verify that:\n\n\n\tIndexing and queries are working as expected\n\tMemory and heap usage looks stable over time\n\tGarbage collection is overall low over time \u2013 no Full-GC issues\n\n\n\nI'll post findings and results to this JIRA.",
    "attachments": {
        "jawiki-index-gcviewer.png": "https://issues.apache.org/jira/secure/attachment/12520137/jawiki-index-gcviewer.png",
        "62k-queries-highlight-visualvm.png": "https://issues.apache.org/jira/secure/attachment/12520154/62k-queries-highlight-visualvm.png",
        "long-query-indexing-gc.log": "https://issues.apache.org/jira/secure/attachment/12520225/long-query-indexing-gc.log",
        "250k-queries-no-highlight-gc.log": "https://issues.apache.org/jira/secure/attachment/12520143/250k-queries-no-highlight-gc.log",
        "250k-queries-no-highlight-visualvm.png": "https://issues.apache.org/jira/secure/attachment/12520144/250k-queries-no-highlight-visualvm.png",
        "62k-queries-highlight-gc.log": "https://issues.apache.org/jira/secure/attachment/12520153/62k-queries-highlight-gc.log",
        "long-search-indexing-visualvm.png": "https://issues.apache.org/jira/secure/attachment/12520226/long-search-indexing-visualvm.png",
        "jawiki-index-gc.log": "https://issues.apache.org/jira/secure/attachment/12520136/jawiki-index-gc.log",
        "jawiki-index-visualvm.png": "https://issues.apache.org/jira/secure/attachment/12520138/jawiki-index-visualvm.png"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael McCandless",
            "id": "comment-13239447",
            "date": "2012-03-27T13:34:12+0000",
            "content": "This sounds like a fabulous test!\n\nI wonder if we can somehow make this easily runnable \"on demand\" (eg, like Test2BTerms), assuming you have the prereqs installed locally (eg Japanese Wikipedia export). "
        },
        {
            "author": "Christian Moen",
            "id": "comment-13239513",
            "date": "2012-03-27T14:38:34+0000",
            "content": "Thanks, Mike,\n\nI should have a closer look at Test2BTerms to see how we can automate some of this.  However, this time, I'll do this manually because of the short time available until freeze.  Hope to post some results very soon! "
        },
        {
            "author": "Christian Moen",
            "id": "comment-13239577",
            "date": "2012-03-27T15:57:14+0000",
            "content": "Test setup\n\nMy set up is a MacBook Pro running Mac OS X Lion (10.7) with 8GB memory, a Core i7 CPU (4 cores), a 500GB SSD and too many things running.  (The purpose of the test is to test stability and not to provide accurate performance numbers, although I also hope to do that.)\n\nMy java is as follows:\n\n\n[cm@ayu:~] java -version\njava version \"1.6.0_26\"\nJava(TM) SE Runtime Environment (build 1.6.0_26-b03-383-11M3527)\nJava HotSpot(TM) 64-Bit Server VM (build 20.1-b02-383, mixed mode)\n\n\n\nI've added fields body and title to schema.xml and they're using the default Japanese configuration in text_ja.  The default search field is body. "
        },
        {
            "author": "Christian Moen",
            "id": "comment-13239579",
            "date": "2012-03-27T15:58:39+0000",
            "content": "Test 1 - Indexing Japanese Wikipedia\n\nIn this test I'm only indexing documents \u2013 no searching is being done.\n\nI've extracted text pretty accurately from Japanese Wikipedia and removed all the gory markup so the content is clean.  There are 1,443,764 documents in total and this is mix of short and very long documents.\n\nThese have been converted this to files in Solr XML format and there is 1,000 documents per file.\n\nI'm running my Solr simply using\n\n\njava -verbose:gc -Xmx512m -Dfile.encoding=UTF-8 -jar start.jar\n\n\n\nso I'm not using any fancy GC options.\n\nI'm posting using \n\n\ncurl -s http://localhost:8983/solr/update -H 'Content-type:text/xml; charset=UTF-8' --data-binary @solrxml/SolrXml-171.xml\n\n\n\nand committing after all the files have been posted with\n\n\ncurl -s http://localhost:8983/solr/update -F 'stream.body= <commit />'\n\n\n\nPosting the entire Wikipedia in one file is perhaps a lot faster.\n\nPosting took\n\n\nreal\t18m39.206s\nuser\t0m12.682s\nsys\t0m11.065s\n\n\n\nThe GC log looks fine with a maximum GC time of 0.0187319 seconds.  There wasn't even a full GC probably like to the large heap size.  However, if Kuromoji was generating garbage, I'd expect to see it here since input in XML format is 1.7GB and the Viterbi would generate data many many times that size during tokenization.\n\nI'm attaching these files\n\n\n\n\n Attachment \n Description \n\n\njawiki-index-gc.log\n GC log \n\n\njawiki-index-gcviewer.png\n Screenshot from GCViewer \n\n\njawiki-index-visualvm.png\n Screenshot from VisualVM \n\n\n\n\n\nNote that GCViewer had problems parsing the log file so the data in the screenshot might be off. "
        },
        {
            "author": "Christian Moen",
            "id": "comment-13239597",
            "date": "2012-03-27T16:19:46+0000",
            "content": "Test 2 - Searching without highlighting (no indexing)\n\nAfter the Wikipedia index was build, I've ran 250,000 fairly common Japanese queries against the index without highlighting and by using simple means.\n\nFor this test, I was running Java using\n\n\njava -verbose:gc -Dfile.encoding=UTF-8 -jar start.jar\n\n\n\nso - small/normal heap size to keep memory pressure a bit high and no fancy GC options \u2013 and all of Wikipedia searchable.  Very nice \n\nThe queries are on the form\n\n\n/solr/select/?q=%E7%84%A1%E6%96%99%E5%8D%A0%E3%81%84\n\n\n\nwhich is\n\n\n/solr/select/?q=\u7121\u6599\u5360\u3044\n\n\n\nin plain unquoted form.\n\nRunning the 250,000 queries took 1838.5 seconds and the test was roughly able to keep 80% of its queries within 0.5 second latency and serve a sustained load of 142 QPS.\n\nThe GC logs have some Full GC entries in them:\n\n\n\n\n GC Activity \n Time \n\n\n Full GC 57558K->36262K(126912K) \n 0.2926001 secs \n\n\n Full GC 120759K->37151K(126912K) \n 0.2948184 secs \n\n\n Full GC 118817K->38305K(126912K) \n 0.3726583 secs \n\n\n Full GC 116992K->40203K(126912K) \n 0.3688027 secs \n\n\n Full GC 119572K->39070K(126912K) \n 0.2896587 secs \n\n\n Full GC 121476K->39257K(126912K) \n 0.3034882 secs \n\n\n Full GC 119659K->39451K(126912K) \n 0.3078915 secs \n\n\n Full GC 116948K->39770K(126912K) \n 0.2407321 secs \n\n\n Full GC 118382K->40442K(126912K) \n 0.5224920 secs \n\n\n\n\n\nThe regular GC entries took a maximum of 0.0731031 seconds, but most half or or less.\n\n\n\n\n Attachment \n Description \n\n\n 250k-queries-no-highlight-gc.log \n GC log \n\n\n 250k-queries-no-highlight-visualvm.png \n Screenshot from VisualVM \n\n\n\n\n\nGCViewer seems to have problems parsing the 250k-queries-no-highlight-gc.log so I'm not attaching a screenshot for this. "
        },
        {
            "author": "Christian Moen",
            "id": "comment-13239659",
            "date": "2012-03-27T17:20:08+0000",
            "content": "Test 3 - Searching with highlighting (no indexing)\n\nThe test is similar to Test 2 with highlighting turned on, but only ~62,000 queries were run.  No indexing was done.\n\nSolr was run as follows\n\n\njava -verbose:gc -Dfile.encoding=UTF-8 -jar start.jar\n\n\n\nand - again - notice a small heap size and regular GC options.\n\nThe queries are on the form\n\n\n/solr/select/?q=%E7%84%A1%E6%96%99%E5%8D%A0%E3%81%84&hl=on&hl.fl=body\n\n\n\nwhich is\n\n\n/solr/select/?q=\u7121\u6599\u5360\u3044&hl=on&hl.fl=body\n\n\n\nin unquoted form.\n\nWe have turned on highlighting and we are highlighting on the body field.\n\nThe test completes in 1648.1 seconds and 63200 queries were run and the sustainable query rate was 47 QPS.\n\nTurning on highlighting has a fairly significant performance penalty if we compare QPS to the non-highlighting case where we could sustain 142 QPS.\n\nThere is also increased memory pressure with highlighting turned on.  There were 652 Full GC events in total in the period and the longest Full GC times is given below. \n\n\n\n\n Longest Full GC times (seconds) \n\n\n0.9769069\n\n\n0.8564934\n\n\n0.7585956\n\n\n0.7084318\n\n\n0.6928327\n\n\n0.6781336\n\n\n0.6358398\n\n\n0.6099899\n\n\n0.5628532\n\n\n0.5540237\n\n\n0.5443075\n\n\n0.5429399\n\n\n0.5423989\n\n\n...\n\n\n\n\n\nThe extra memory pressure can also be seen in the VisualVM screenshot.  I believe the root cause of this is the highlighting.\n\n\n\n\n Attachment \n Description \n\n\n 62k-queries-highlight-gc.log\n  GC log \n\n\n 62k-queries-highlight-visualvm.png\n  Screenshot from VisualVM \n\n\n\n "
        },
        {
            "author": "Christian Moen",
            "id": "comment-13239714",
            "date": "2012-03-27T17:45:07+0000",
            "content": "Test 4 - Combined search and indexing test\n\nIn this test, we are both indexing all of Wikipedia while searching.\n\nThe search rate is a constant 10 QPS with highlighting.  The queries in this test are identical to those run above and they are also unique.\n\nSolr is started using\n\n\njava -verbose:gc -Xmx256m  -Dfile.encoding=UTF-8 -jar start.jar\n\n\n\nso I've given it a little more heap because of the memory pressure issue seen in Test 3.\n\nThe indexing posts the XML described in Test 1 - each file contains 1,000 documents and - different from Test 1 we now do a commit after each post.  No optimize is being done.\n\nThe test had been running for 8 hours and 33 minutes before I stopped it and 312,900 queries were run.  Japanese Wikipedia was indexed 23 times.\n\nFull GC occurred 84 times and the maximum heap-size provided to the VM was allocated.  The longest Full GC times are given below.\n\n\n\n\n Longest Full GC (seconds) \n\n\n1.0789668\n\n\n1.0518156\n\n\n1.0288781\n\n\n0.9973905\n\n\n0.9799409\n\n\n0.9582144\n\n\n0.9555027\n\n\n0.9517524\n\n\n0.9456611\n\n\n0.9387380\n\n\n0.9313493\n\n\n0.9117388\n\n\n0.8771426\n\n\n...\n\n\n\n\n\n\nThe longest regular (non-Full) GC times are below.\n\n\n\n\n Longest non-Full GC (seconds) \n\n\n0.1375324\n\n\n0.1206866\n\n\n0.1009028\n\n\n0.0952712\n\n\n0.0928364\n\n\n...\n\n\n\n\n\nThe VisualVM screenshot suggests that the VM is nice and stable.  It might be good to provide a little more maximum heap-space than 256MB to index all of Japanese Wikipedia and serve 10 QPS to have a little more headroom, but 256MB seems quite fine.\n\n\n\n\n Attachment \n Description \n\n\n long-query-indexing-gc.log \n GC log \n\n\n long-search-indexing-visualvm.png \n VisualVM screenshot \n\n\n\n\n\n "
        },
        {
            "author": "Christian Moen",
            "id": "comment-13240126",
            "date": "2012-03-28T02:45:09+0000",
            "content": "Summary\n\nWithout spending too much time interpreting details of this little test, I think Kuromoji looks stable and ready for release.\n\nI also think it's very nice that Solr 3.6 can index Japanese Wikipedia (~1.4 million docs) continuously while serving unique user queries at 10 QPS on a laptop with using only 256MB heap space.\n\nAnyone interested, please feel to add your comments and interpretations of the the results.  Thanks! "
        },
        {
            "author": "Christian Moen",
            "id": "comment-13250751",
            "date": "2012-04-10T15:36:34+0000",
            "content": "I'll resolve this issue now.\n\nI've also been doing additional testing using the VisualVM Visual GC plugin and I'm seeing that the org.apache.lucene.analysis.ja.Token objects gets collected fairly as we expect.  In actual deployments, it's perhaps a good idea to use a larger eden space by using the server GC defaults or tune things up.\n\nIn longer term tests, it seems like Solr's heap-space is being used also in the case of a 512MB heap before a full GC recovered lots of heap.  I suspect this might be caused by searching with highlighting and the heap seems very stable with indexing only.  (In either case, this doesn't seem to be caused by Kuromoji.) "
        }
    ]
}