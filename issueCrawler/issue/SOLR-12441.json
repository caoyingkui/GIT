{
    "id": "SOLR-12441",
    "title": "Add deeply nested documents URP",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "As discussed in SOLR-12298, there ought to be an URP to add metadata fields to childDocuments in order to allow a transformer to rebuild the original document hierarchy.\n\nI propose we add the following fields:\n\n\t_nestParent_\n\tnestLevel\n\t_nestPath_\n\n\n\n_nestParent_: This field wild will store the document's parent docId, to be used for building the whole hierarchy, using a new document transformer, as suggested by Jan on the mailing list.\n\nnestLevel: This field will store the level of the specified field in the document, using an int value. This field can be used for the parentFilter, eliminating the need to provide a parentFilter, which will be set by default as \"level:queriedFieldLevel\".\n\nnestLevel: This field will contain the full path, separated by a specific reserved char e.g., '.'\n for example: \"first.second.third\".\n This will enable users to search for a specific path, or provide a regular expression to search for fields sharing the same name in different levels of the document, filtering using the level key if needed.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-06-25T11:45:26+0000",
            "content": "I have opened a new pull request for this ticket ",
            "author": "mosh",
            "id": "comment-16522188"
        },
        {
            "date": "2018-06-25T16:43:41+0000",
            "content": "Can you please provide further justification for _nestLevel_ like a more fleshed out scenario?  It seems to only be a matter of query convenience based on your description (i.e. there are other ways to accomplish the same query), and we're paying index weight for it (albeit small) so I don't quite see if it's worth it. ",
            "author": "David Smiley",
            "id": "comment-16522510"
        },
        {
            "date": "2018-06-25T16:45:41+0000",
            "content": "CC Mikhail Khludnev and Anshum Gupta as you may be interested in this issue (plus related ones on the parent issue) based on your more extensive experience with (deeply) nested documents. ",
            "author": "David Smiley",
            "id": "comment-16522513"
        },
        {
            "date": "2018-06-25T17:45:00+0000",
            "content": "Thanks for the PR mosh!\n\nWith 8.0 on the horizon this fall, we can think of the best solution that isn't necessarily fully backwards compatible. \nPerhaps this URP should handle _root_ as well to thus unify where fields involved in nested docs are added?  Although that raises other questions like how might this URP be registered automatically?  Wether it should be an URP vs something baked in?  I think it should be an URP but it'd be nice if an URP like this could be registered automatically... but under what circumstances and how to control that \u2013 I don't know (though I have ideas). \n\nCC Dr Oleg Savrasov as this is related to SOLR-5211 in a sense ",
            "author": "David Smiley",
            "id": "comment-16522593"
        },
        {
            "date": "2018-06-25T18:23:29+0000",
            "content": "A more concrete straw-man proposal is as follows:  In SolrCore.loadUpdateProcessorChains() conditionally add a new NestedUpdateProcessorFactory immediately prior to RunUpdateProcessorFactory.  In NestedUpdateProcessorFactory.getInstance(), conditionally wrap the RunUpdateProcessorFactory dependent on the indexSchema.isUsableForChildDocs().  This proposal is for 8.0.  NestedUpdateProcessorFactory would add \"_root_\" in this plan.  If we all generally agree with this, such a proposal would be its own issue and not this one, I think.\n\nIf someone doesn't want nested docs, then they shouldn't define \"root\" in the schema.  There are now other fields to deal with as well though \u2013 like _nestPath_ and _nestParent_ \u2013 where should these be defined?  We could simply add these in the schema by default.  NestedUpdateProcessorFactory could simply look at the schema for their existence to see if it should populate these (or not) instead of bothering with any configuration of the URP \u2013 thus it's easier and more automatic.  It is kinda a shame that a from-scratch schema would require adding a bunch new fields but ah well. ",
            "author": "David Smiley",
            "id": "comment-16522648"
        },
        {
            "date": "2018-06-26T06:46:57+0000",
            "content": "Can you please provide further justification for nestLevel like a more fleshed out scenario?\nAfter sleeping on this it seems like this can be solved using a simple regex.\nThis field was to be used in case the user only wants to query certain levels of the nested document, but this can be filtered using a regex checking for the number of split char('.') in the field name. This can be easily done using a transformer.\nThe thing is we would need to query the whole block instead of including another filter in the query itself to pick only the wanted children. Perhaps this is a better approach in terms of index weight saving. What do you think David Smiley? ",
            "author": "mosh",
            "id": "comment-16523300"
        },
        {
            "date": "2018-06-26T13:24:35+0000",
            "content": "I still don't think I appreciate the real-world use case that brings about the need to query by level... and so I'd rather not discuss solutions to a problem until I appreciate that problem.  I do understand what you mean by query for levels >= some number but, practically speaking what might a higher level search requirement look like that asks for this?  I could invent crazy ones to force fit the need but I'd rather you tell me about a real/practical need.  If it seems very esoteric then lets not add it \u2013 it's within the realm of the possible for search apps to handle this themselves (e.g. they can add an urp themselves). ",
            "author": "David Smiley",
            "id": "comment-16523710"
        },
        {
            "date": "2018-06-26T13:27:55+0000",
            "content": "Yes, this is probably a discussion for another ticket, as it can be done using a block join query anyway.\nI have pushed a new commit a few hours ago which eliminates the level field. ",
            "author": "mosh",
            "id": "comment-16523715"
        },
        {
            "date": "2018-06-26T21:56:08+0000",
            "content": "Have you thought about the possibility of making it optional to supply an id for the children? I mean, if the URP detects that child docs lack the uniqueID field, could it not construct a guaranteed unique id as\u00a0\u00a0ROOT + \"/\" +\u00a0NEST_PATH + \"/\" + child_num\u00a0? This way the burden on the user when constructing the document is lighter and he need only define a root ID manually if he does not want to provide those IDs himself... ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16524248"
        },
        {
            "date": "2018-06-27T02:31:15+0000",
            "content": "Great idea Jan!\nAs an implementation detail, we'd no longer simply have org.apache.solr.handler.loader.JsonLoader.SingleThreadedJsonLoader#isChildDoc simply look for the presence of the ID field to distinguish an \"extended field value\" syntax from a child doc, but that's okay. ",
            "author": "David Smiley",
            "id": "comment-16524478"
        },
        {
            "date": "2018-06-27T07:52:41+0000",
            "content": "It's not important what the child IDs are, could be some generated GUID as well, that varies every time the block is reindexed, but it may be easier to spot the doc's origin if the generated id has some known structure. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16524728"
        },
        {
            "date": "2018-06-27T08:57:23+0000",
            "content": "Yes, the only issue I've been trying to figure out is a fool proof way to figure out whether the nested JSON document is an extended value or a child document.  ",
            "author": "mosh",
            "id": "comment-16524778"
        },
        {
            "date": "2018-06-27T09:07:57+0000",
            "content": "What do you mean by \"extended value\"? I assume you mean whether the nested values should be indexed as fields on the main doc or as separate child docs? Perhaps this could be defined in schema as a special field type or a new attribute?\n\n\n<field name=\"myChildren\" type=\"_child\" />\nor\n<field name=\"myChildren\" nested=\"true\" />\n\n ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16524785"
        },
        {
            "date": "2018-06-27T10:36:53+0000",
            "content": "I was specifically referring to JSON index time boosts, e.g.\n\n{ \"id\": \"test02\",\n    \"title\": { \"boost\": 1, \"value\": [ \"test_title\"] },\n    \"last_update\":{ \"boost\": 2, \"value\": \"2013-04-02T00:00:00Z\"}\n}\n\nOr this:\n\n{\"id\": \"1\", \"val_s\": {\"add\": \"foo\"}}\n\n\nIs there a clear list for SOLR Json keywords?\nI have not been able to find such list in the documentation. ",
            "author": "mosh",
            "id": "comment-16524889"
        },
        {
            "date": "2018-06-27T11:02:06+0000",
            "content": "Hmm, I see. It would be a pity if we need to disallow\u00a0field names \"boost\", \"add\", \"value\", \"set\" in sub docs. Could we always require the child docs to be inside a list and use that as distinction?\u00a0 ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16524905"
        },
        {
            "date": "2018-06-27T11:05:25+0000",
            "content": "Unless we find a better way, we might have to.\n Perhaps we could define in the schema that a specific field is a child key.\n That means that a nested JSON document is a child document if one of these cases is true:\n\n\tThe document has a unique Id key.\n\tThe document is specified as a child document in the collection's schema.\n\n\n\nWith Solr 8.0 around the corner, perhaps we could add something to specify that this is an Atomic update, separating such case from a childDoc? perhaps a prefix (\"atomic\"?) such as \"atomicAdd\" or \"inPlaceAdd\"? ",
            "author": "mosh",
            "id": "comment-16524909"
        },
        {
            "date": "2018-06-28T06:21:31+0000",
            "content": "pity if we need to disallow field names \"boost\", \"add\", \"value\", \"set\" in sub docs\nPerhaps we could specify in the documentation that these values can only be added in child documents which contain an id? ",
            "author": "mosh",
            "id": "comment-16525973"
        },
        {
            "date": "2018-06-28T09:58:17+0000",
            "content": "Perhaps we could specify in the documentation that these values can only be added in child documents which contain an id?\nThat sounds fragile. In practice it means that no-one will trust the auto id feature because it can bomb on you anytime a sub doc contains some not-known field name. I like better a requirement for a list - guess that's the most common use of child docs anyway. Why would you want a single child doc, which could be expressed as fields on the main doc instead? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16526177"
        },
        {
            "date": "2018-06-28T10:35:06+0000",
            "content": "\n{ \"id\": \"X998_Y998\", \"from\": { \"name\": \"Peyton Manning\", \"id\": \"X18\" }, \"message\": \"Where's my contract?\", \"actions\": [ { \"name\": \"Comment\", \"link\": \"http://www.facebook.com/X998/posts/Y998\" }, { \"name\": \"Like\", \"link\": \"http://www.facebook.com/X998/posts/Y998\" } ], \"type\": \"status\", \"created_time\": \"2010-08-02T21:27:44+0000\", \"updated_time\": \"2010-08-02T21:27:44+0000\" }\n\n\nThis is a sample Facebook API response. The array syntax will index the array as child documents, but it will not index the child document under the key \"from\"\n\n { \"from\": { \"name\": \"Peyton Manning\", \"id\": \"X18\" } } \n\nIt would be nice if you could just index JSON as is, like you can in elastic search, moving the responsibility from the user to Solr itself.\n\nPublic APIs seem to use this pattern too. ",
            "author": "mosh",
            "id": "comment-16526204"
        },
        {
            "date": "2018-06-28T10:59:18+0000",
            "content": "Elastic will always index nested objects as plain flat fields on the main document unless the mapping (schema) explicitly defines a particular json-path as \"nested\". I think this explicit definition makes sense for several reasons. We also need to make sure that users don't index two docs where one is adding a simple value to the \"myChildren\" field while another document adds a nested document below the same field. So it sounds like schema should have a way to define nested=true for certain fields or path.to.field so that the URP can know how to interpret a doc. That would also remove the need for guessing based on presence of id field or whatever, you just ask the IndexSchema.\u00a0\n\nWe then also need to handle the case where a sub doc wants to use the same field name as a parent and those are different types, e.g.\n\n\n{ \"id\": 1, \n  \"name\" : \"john\", \n  \"address\" : \"London\", \n  \"child\" : { \n    \"name\" : \"peter\", \n    \"address\" : { \n      \"street\" : \"oxford st 3\", \n      \"zip\" : \"12345\"}}}\n\n\n\nIn ES this is legal, since in the default type-guessing will create lucene fields \"name\", \"address\", \"child.name\", \"child.address.street\", \"child.address.zip\". And in case of nested docs I guess the \"address\" field name would not share the same type in the mapping.\n\nSo in order to tackle this we'd need to do some changes to auto-guessing logic as well as ability to use a fully qualified field name for the nested parts of a document, if we'd like to support both flat-style and nested-style from the same source document. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16526208"
        },
        {
            "date": "2018-06-28T11:43:20+0000",
            "content": "It seems like we have three options:\n\n\tLeave the generation of the childDoc Id as the responsibility of the user.\n\tOnly allow nested JSON docs inside an array.\n\tChange the auto-guessing logic so we can support flat-style and nested-style JSON.\n\n\n\nI will have to think about this one, it's a real head scratcher.\nDo any of you have a preference? ",
            "author": "mosh",
            "id": "comment-16526235"
        },
        {
            "date": "2018-06-28T13:36:07+0000",
            "content": "I was about to suggest a new issue for generating an ID but I guess it's in-scope as we're adding fields to child docs; the uniqueKey is another field to add if it's absent.  Although the related issue of differentiating a child doc from a partial update / extended value syntax was handled here: https://issues.apache.org/jira/browse/SOLR-12362?focusedCommentId=16502456&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16502456  We can un-resolve that issue and do something different.  I think putting the conversation here is distracting to this issue. ",
            "author": "David Smiley",
            "id": "comment-16526311"
        },
        {
            "date": "2018-07-02T13:28:23+0000",
            "content": "Can you please provide further justification for nestLevel like a more fleshed out scenario?\nI have been thinking of a way to implement the nested transformer that can leverage the added meta-data this URP provides. It has struck me that providing an accurate parentFilter can quickly get complicated as the documents nest deeper.\n It seems like using a nestLevel field, we could create the parentFilter in the transfomer, by setting it as nestLevel < childDoc_Nest_Level.\nPerhaps we could open this discussion again David Smiley? ",
            "author": "mosh",
            "id": "comment-16529884"
        },
        {
            "date": "2018-07-04T12:52:00+0000",
            "content": "I have been thinking about a special case where a child documents within an array has other children.\n Perhaps we should keep inside the NEST_PATH field the child documents' index in the hierarchy. e.g.\n\n{\"_NEST_PATH_\": \"book/pages/3//footnote\"}\n\nOr perhaps it should be:\n\n{\"_NEST_PATH_\": \"book/0//pages/3//footnote/0/\"}\n\nWDYT? ",
            "author": "mosh",
            "id": "comment-16532718"
        },
        {
            "date": "2018-07-04T20:00:06+0000",
            "content": "Why would nest_path need to be unique? Guess there could be a use case for listing all child docs having the same path too. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16533029"
        },
        {
            "date": "2018-07-05T04:45:04+0000",
            "content": "What for?  FYI the relative order between siblings is the internal Lucene docID order, and this could be used by some DocTransformer if you need it. ",
            "author": "David Smiley",
            "id": "comment-16533256"
        },
        {
            "date": "2018-07-05T04:56:57+0000",
            "content": "I will have a look at using docID order.\n I was thinking this could be used to prevent the need for more block join queries, since the join can be sorted by the NEST_PATH field, and then we could get each parent from the root SolrInputDocument by using a simple array get e.g.\n\n((List)rootSolrDocument.get(\"childrenArray\")).get(childNum);\n ",
            "author": "mosh",
            "id": "comment-16533259"
        },
        {
            "date": "2018-07-05T05:14:27+0000",
            "content": "What did you think of my suggestion to use some other separator char (not PATH_SEP_CHAR) for generating an id for child documents? My first suggestion was a pound symbol. Though it wouldn't show when in a URL... maybe a comma. But we could stay with a '/'; I just thought it might be nice to make a distinction between the separator between parent/child and the separator to append the child sequence/num.\nI do not hold an opinion regarding this dilemma.\n Currently it seems like comma or the pound sign are the candidates for this separator, unless some one has some other alternative in mind. ",
            "author": "mosh",
            "id": "comment-16533263"
        },
        {
            "date": "2018-07-05T09:14:19+0000",
            "content": "Another thought has popped into my mind.\n\n{ \"from\": { \"name\": \"Peyton Manning\", \"id\": \"X18\" } } \n\nWhen recreating the original JSON structure, there is no way to know whether a single child was inside an array or not.\nWe could also index single children such as the one above with this NEST_PATH: \n\nfrom,s,\n\nwe could have a special character to indicate this child was not inside an array when indexed.\nI just picked the char 's' because it is short for single, perhaps someone might have a better idea. ",
            "author": "mosh",
            "id": "comment-16533427"
        },
        {
            "date": "2018-07-05T14:43:59+0000",
            "content": "Lets not confuse the ID generation with the path field.\n\nRE ID generation:\n\nIt seems both ',' or '#' would be URL encoded so might as well pick '#' which feels better to me in reflecting an indexed/array.  And there needn't be a trailing occurrence.  For a single value we could just omit the number?\n\ngeneratedId = parentId + \"/\" + label + \"#\" + childCounter\n\nWhere \"label\" is the field in which the child document is in and childCounter is the index of the number of this child for this parent & label.\n\nIf we see that there is one child and it's typed that way (not in a wrapping collection) then we can omit the \"#\" + childCounter part ",
            "author": "David Smiley",
            "id": "comment-16533759"
        },
        {
            "date": "2018-07-05T14:50:05+0000",
            "content": "RE path field:\n\nI can see that we may want to add metadata to differentiate a single child from an array that has one value.  Again, we can use the technique of omitting the \"#\" + childCounter part?  For what other purpose do we need the path \u2013 other than a DocTransformer to reconstitute the document?  Does this need to be indexed for some purpose? ",
            "author": "David Smiley",
            "id": "comment-16533769"
        },
        {
            "date": "2018-07-08T04:56:05+0000",
            "content": "For what other purpose do we need the path \u2013 other than a DocTransformer to reconstitute the document? Does this need to be indexed for some purpose?\nThe path field can be used to filter children when using the doc transformer.\n\n { \"from\": { \"name\": \"Peyton Manning\", \"id\": \"X18\" }, \"to\": \"John\" } \n\ne.g. if the user enters from/name:\"Peyton*\", the transformer can construct the following:\n\nq=\"to:John\", childFilter=\"from/name:Peyton*\"\n\nThe transformer could construct the parentFilter by checking whether root=id, and build the childFilter \"_NEST_PATH_:from#*# AND name:Peyton\".\n This would prevent keys with the same names in child documents which are in different levels making false-positive matches.\n\nThe reason I ended each nesting key with #num# is so we can query using the _NEST_PATH_ field regardless of the value type or array index using \"keyName#*#\". ",
            "author": "mosh",
            "id": "comment-16535990"
        },
        {
            "date": "2018-07-08T13:41:52+0000",
            "content": "Few comments:\n\n\tThe childFilter from/name:Peyton* is not a valid query syntax due to the slash.  Right?\n\tNEST_PATH:from#*# wildcards in the middle of a string can be problematic as it may match across 'from' to some other child label.  Wether that's an issue here or not I'm not sure yet.\n\tNote that _NEST_PATH_ need not be a string.  It's quite plausible it's indexed form ought to be stripped of the sibling IDs with PatternReplaceCharFilterFactory and then processed with PathHierarchyTokenizerFactory.  This would allow for more efficient term queries instead of prefix/wildcard queries.\n\n ",
            "author": "David Smiley",
            "id": "comment-16536110"
        },
        {
            "date": "2018-07-08T14:39:48+0000",
            "content": "The childFilter from/name:Peyton* is not a valid query syntax due to the slash. Right?\nIt will only work if it is broken down by the transformer into to separate sub queries.\nNEST_PATH:from#*# wildcards in the middle of a string can be problematic as it may match across 'from' to some other child label. Wether that's an issue here or not I'm not sure yet.\nIt will only match the ones which are children of the key nest, inside the parent document.\nIt's quite plausible it's indexed form ought to be stripped of the sibling IDs with PatternReplaceCharFilterFactory and then processed with PathHierarchyTokenizerFactory\nDo you mean to strip childNum off the _NEST_PATH field? ",
            "author": "mosh",
            "id": "comment-16536139"
        },
        {
            "date": "2018-07-09T03:27:13+0000",
            "content": "I'm still not clear why the right-hand side pound is necessary; I think the left-hand (leading) pound is sufficient. e.g. this is fine:\n child#0/grandchild#0\nDo you mean to strip childNum off the _NEST_PATH field?\nYes \u2013 of the indexed form but not the stored form. The indexed form would look like child/grandchild. For an exact match (no all ancestors or all descendents), we can index using KeywordTokenizerFactory. In your Peyton Manning example, this would mean your child filter would be NEST_PATH:from AND name:Peyton*. See PathHierarchyTokenizerFactoryTest and the descendents vs ancestors distinction as well via two differently indexed fields for use-cases involving descendents and ancestors if we need that. \u00a0With some tricks we could use one field if we need all 3 (exact, descendants, ancestors). ",
            "author": "David Smiley",
            "id": "comment-16536510"
        },
        {
            "date": "2018-07-09T15:14:11+0000",
            "content": "See PathHierarchyTokenizerFactoryTest and the descendents vs ancestors distinction as well via two differently indexed fields for use-cases involving descendents and ancestors if we need that. With some tricks we could use one field if we need all 3 (exact, descendants, ancestors).\nOh this is perfect, it makes it so much easier. I was contemplating how the transformer could check for all three options(exact, descendants, ancestors).\n do you have any suggestions? I have been trying to use the \"!field\" transformer with boolean operators to no avail.\n\nPerhaps this discussion should be moved to the ChildDocTransformer ticket ",
            "author": "mosh",
            "id": "comment-16537051"
        },
        {
            "date": "2018-07-09T15:35:55+0000",
            "content": "Perhaps this discussion should be moved to the ChildDocTransformer ticket\n\nSure. This issue can be focused on what fields should be added and when and what their values look like.  Perhaps some other issue will ultimately add these new fields to a non-test schema and we'll need to then know how we need to index it.  At the moment we have an opt-in feature that requires the user opting in to not only add the URP but add the fields to their schema and know which field types should be used. ",
            "author": "David Smiley",
            "id": "comment-16537081"
        },
        {
            "date": "2018-07-09T17:17:54+0000",
            "content": "Although arguably how the field should be indexed is appropriate to discuss here.  Couldn't the ancestor/descendent query ability be useful outside of the ChildDocTransformer \u2013 and thus it's not the only consumer/user of this field?  For example, maybe I want to find all parent documents (say blog posts) that contain a comment child document that in turn has a comment child by a certain author \"name\" field.  So I want to find where did somebody comment on someone else's comment.  Having a query by ancestor ability would allow me to filter where \"comment\" is an ancestor. ",
            "author": "David Smiley",
            "id": "comment-16537285"
        },
        {
            "date": "2018-07-10T05:55:04+0000",
            "content": "Having a query by ancestor ability would allow me to filter where \"comment\" is an ancestor.\nWould this be fit for the use of PathHierarchyTokenizerFactory in conjunction with the ToParentBlockJoinQuery? ",
            "author": "mosh",
            "id": "comment-16538078"
        },
        {
            "date": "2018-07-10T14:14:06+0000",
            "content": "Yes.  See my comment https://issues.apache.org/jira/browse/SOLR-12519?focusedCommentId=16538657&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16538657 for an example of how this could be used via a field type to encapsulate the specification of which paths, self, ancestors, descendants are desired. ",
            "author": "David Smiley",
            "id": "comment-16538661"
        },
        {
            "date": "2018-07-11T02:59:54+0000",
            "content": "Commit fe180bbd59ef45679f3cffa252fff0aa069b7427 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fe180bb ]\n\nSOLR-12441: New NestedUpdateProcessorFactory ",
            "author": "ASF subversion and git services",
            "id": "comment-16539480"
        },
        {
            "date": "2018-07-11T03:02:31+0000",
            "content": "Commit f3e8180bd71cdc3e51a72e9e529a8e69251bdda5 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f3e8180 ]\n\nSOLR-12441: New NestedUpdateProcessorFactory\n\nCloses #410\n(cherry picked from commit fe180bb) ",
            "author": "ASF subversion and git services",
            "id": "comment-16539483"
        },
        {
            "date": "2018-07-11T03:06:37+0000",
            "content": "\n\tadded some basic javadocs.\n\tmoved the URP to an inner class of the factory instead of the same source file.  I believe multiple classes in a source file is something we're trying to get away from.  I recall Uwe Schindler expressed some reasons but I forget\n\tnote: the test methods here that actually test the indexed behavior are likely to be obsolete or need refactoring once we get to discussing how to properly index the path field.  You partially addressed them in your last commit but not completely.\n\tremoved noIdChildren constant that was no longer being used.\n\n ",
            "author": "David Smiley",
            "id": "comment-16539491"
        },
        {
            "date": "2018-07-12T00:07:28+0000",
            "content": "I'm late to the party, and haven't tried to catch up on the issue too much (stoked you guys are working on this though!) but ... i have a small bit of bike-shedding to ask about...\n\nwhy are these new field names upper case?\u00a0 wouldn't lower case be more consistent with the existing special fields like _root_ and _version_ ?\n\n\n+  public static final String NEST_PARENT_FIELD_NAME = \"_NEST_PARENT_\";\n+  public static final String NEST_PATH_FIELD_NAME = \"_NEST_PATH_\";\n\n\n\n(i couldn't find any comment that seemed to mention the upper casing being a conscious choice compared to the original _nestParent_ etc... \u2013 although +1 to removing the camel case either way) ",
            "author": "Hoss Man",
            "id": "comment-16540915"
        },
        {
            "date": "2018-07-12T02:10:07+0000",
            "content": "Oops; you're right Hoss.  I'll change them to camelCase.\n\nI'd like your opinion on if/where/how this URP (and fields) might be incorporated into the default URP chain and default schema for the fields.  Note that the factory will detect the schema doesn't even have these fields and then pass through to the next URP, so it's low-overhead for those that don't have the fields.  I think it's critical I get another committer's explicit blessing on changing the default URP chain or schema so here I am asking you. ",
            "author": "David Smiley",
            "id": "comment-16541028"
        },
        {
            "date": "2018-07-12T22:38:46+0000",
            "content": "Oops; you're right Hoss. I'll change them to camelCase.\nI'm NOT suggesting camel case... just lowercase...\n\npublic static final String NEST_PARENT_FIELD_NAME = \"_nest_parent_\";\npublic static final String NEST_PATH_FIELD_NAME = \"_nest_path_\";\n\n\n\n(we have not had any camel case fields (of fieldTypes) in the _default configset up to now, i don't see any reason to change that)\n\nI'd like your opinion on if/where/how this URP (and fields) might be incorporated into the default URP chain and default schema for the fields. ...\n\nI don't have strong feelings ... my gut would say: leave it out of _default for at least a few (minor) releases, let people who want it add it, see how well it works in real world usecases and if there are any serious design/API flaws we want to revisit before including it by default.  But that's not based on any specific concerns about this code/api/idea \u2013 it's just my general cautiousness about changing defaults  ",
            "author": "Hoss Man",
            "id": "comment-16542277"
        },
        {
            "date": "2018-07-14T02:51:20+0000",
            "content": "Commit 424608946c10c7af1cb369a2a0247db0e6dd9744 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4246089 ]\n\nSOLR-12441: Lowercase NEST_PARENT and NEST_PATH fields. ",
            "author": "ASF subversion and git services",
            "id": "comment-16543969"
        },
        {
            "date": "2018-07-14T02:52:29+0000",
            "content": "Commit 048a8148f5432309b7016aa8ffb412b072063655 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=048a814 ]\n\nSOLR-12441: Lowercase NEST_PARENT and NEST_PATH fields.\n\n(cherry picked from commit 4246089) ",
            "author": "ASF subversion and git services",
            "id": "comment-16543970"
        },
        {
            "date": "2018-08-16T14:04:23+0000",
            "content": "I just noticed UpdateProcessorTestBase.  If we have to work on this test more, we ought to improve it to use that.  I'll add a comment about this in TestNestedUpdateProcessor. ",
            "author": "David Smiley",
            "id": "comment-16582577"
        },
        {
            "date": "2018-09-06T17:58:42+0000",
            "content": "I don't see this new Nested NestedUpdateProcessorFactory added to the URP page (update-request-processors.adoc) in the Ref Guide - it's not supposed to be hidden from users, is it?\n\nFor URPs so far, we've generally just added a link to the javadocs and a short description - I would be willing to make sure it's added it if someone could give me a sentence or two about what it does/when to use it so I don't have to study this issue to try to figure it out myself. ",
            "author": "Cassandra Targett",
            "id": "comment-16606183"
        },
        {
            "date": "2018-09-07T16:20:37+0000",
            "content": "This is debatable and I'm glad you asked because I'd like your input. mosh and I are overall working to make nested docs in Solr much nicer, under the umbrella SOLR-12298. \u00a0We're going one piece at a time. \u00a0This issue here, SOLR-12441 and recent ones we're doing imply that the schema is explicitly enabled for this new enhanced support for nested documents. \u00a0That means the schema needs to have certain special fields and configured in certain ways. \u00a0The nature of those fields, however, isn't completely nailed down yet. \u00a0Hopefully we can target this in 8.0, as it's a big deal. \u00a0So my preference is to delay ref guide documentation of this URP here right now. \u00a0Stuff that can\u00a0be documented better in the ref guide that is\u00a0part of the umbrella pertain to attaching child documents under field names (versus stand-off anonymous relationship). \u00a0That aspect is complete, I think. ",
            "author": "David Smiley",
            "id": "comment-16607315"
        },
        {
            "date": "2018-09-07T16:24:10+0000",
            "content": "in 8.0, specifically I think we need to figure out:\n\n\thow we need to configure these fields (after exploration of being able to search for relationships in fun ways)\n\twether the field configuration should be plainly in the schema, or perhaps make less verbose by using a FieldType to hide details\n\tdecide how this URP should be enabled; either expressly/manually, or somehow activated automatically as some URPs get special treatment this way\n\n ",
            "author": "David Smiley",
            "id": "comment-16607319"
        },
        {
            "date": "2018-09-07T17:37:34+0000",
            "content": "...imply that the schema is explicitly enabled for this new enhanced support for nested documents.  That means the schema needs to have certain special fields and configured in certain ways.  The nature of those fields, however, isn't completely nailed down yet. \n\nIf the NestedURP needs a specific configuration and we aren't sure yet what that should be, my usual preference is to wait until it's nailed down to document it (unless we can make it clear it's a WIP without being confusing). On the flip side, though, considering the URP docs are really just links to javadocs, it wouldn't be bad in this case if this URP was added and documented now, but if you prefer to wait, that's fine with me too. ",
            "author": "Cassandra Targett",
            "id": "comment-16607412"
        }
    ]
}