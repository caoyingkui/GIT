{
    "id": "LUCENE-1134",
    "title": "BooleanQuery.rewrite does not work properly for minNumberShouldMatch",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "BooleanQuery.rewrite does not respect minNumberShouldMatch if the number of clauses is 1. This causes inconsistencies for the queries \"+def\" and \"+abc +def\", while setting the minNumShouldMatch to '1' for both.\nFor the first query, results are returned although there are no SHOULD clauses in the query.\nFor the second query no results are returned.\nThe reason lies in the optimization BooleanQuery.rewrite has for one clauses queries.\nPatch included - optimize the query for a single clause only if the minNumShouldMatch <= 0.",
    "attachments": {
        "LUCENE-1134.patch": "https://issues.apache.org/jira/secure/attachment/12373239/LUCENE-1134.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-01-15T19:10:48+0000",
            "content": "The fix is very trivial. Which tests should I run to ensure this doesn't break anything? ",
            "author": "Shai Erera",
            "id": "comment-12559180"
        },
        {
            "date": "2008-01-15T19:19:31+0000",
            "content": "I'd start with these tests:\n\nant -Dtestcase='Test*Bool*' test-core\n\nYou might also consider adding a test case in one of those tests that shows the bug without the patch applied. ",
            "author": "Paul Elschot",
            "id": "comment-12559183"
        },
        {
            "date": "2008-01-15T19:34:55+0000",
            "content": "At first glance, the patch seems right .. but an optimization can probably be made ... if there is only once clause, and minNrShouldMatch is greater then 1, the query can rewrite itself to a \"no-op\" type query that doesn't match any docs.\n\nActually: BooleanQuery.rewrite can do something like that anytime minNrShouldMath is greater then the number of optional clauses. ",
            "author": "Hoss Man",
            "id": "comment-12559194"
        },
        {
            "date": "2008-01-15T19:44:57+0000",
            "content": "There is no real need for this optimization because BooleanScorer2 already uses a NonMatchingScorer for this case. ",
            "author": "Paul Elschot",
            "id": "comment-12559200"
        },
        {
            "date": "2008-01-15T20:06:19+0000",
            "content": "Ah... good call.\n\n(Hmmm.... it stil might be worth doing just to make it clear to clients earlier rather then later that they won't match anything.  ie:If you inspect a rewritten FuzzyQuery you get to see right away how many clauses it has ... why not let people inspecting a rewritten BooleanQuery in cases  like this see right away that their query is a No-Op ?) ",
            "author": "Hoss Man",
            "id": "comment-12559210"
        },
        {
            "date": "2008-01-15T21:42:05+0000",
            "content": "A FuzzyQuery rewrites to a BooleanQuery with SHOULD clauses only, so a check and cast to BooleanQuery and then a clauses().size() == 0 can check for a No-Op after a rewrite(). ",
            "author": "Paul Elschot",
            "id": "comment-12559242"
        },
        {
            "date": "2008-01-15T21:48:45+0000",
            "content": "I think you're misunderstanding me Paul: i was just trying to make an analogy \u2013 even if the Scorer optimizes away a BooleanQuery that can never match anything into a NonMatchingScorer, there are other advantages to having rewrite detect these situations (when it can) ... inspection of the rewritten queries being an example. ",
            "author": "Hoss Man",
            "id": "comment-12559247"
        },
        {
            "date": "2008-01-16T06:03:55+0000",
            "content": "Hi\n\nW.r.t. testing, I found TestBooleanMinShouldMatch. It had testNoOptionalButMin which added two MUST clauses. I added testNoOptionalButMin2 that adds only a single clause. It fails without the patch and passes with the patch. Other than that the tests in this class pass.\nI updated the patch to include the additional test.\n\nW.r.t. the optimization that was discussed: I don't understand how it can be done. BooleanQuery has a clauses list. It is not aware of any SHOULD, MUST or MUST_NOT clauses in its rewrite() method. So how exactly this optimization can be done? The only class that seems to be aware of the type of clauses is BooleanScorer2 in its add() method. ",
            "author": "Shai Erera",
            "id": "comment-12559360"
        },
        {
            "date": "2008-01-16T06:07:01+0000",
            "content": "Fix + Test ",
            "author": "Shai Erera",
            "id": "comment-12559361"
        },
        {
            "date": "2008-02-03T08:21:49+0000",
            "content": "Committed. Thanks, Shai! ",
            "author": "Michael Busch",
            "id": "comment-12565152"
        }
    ]
}