{
    "id": "LUCENE-7663",
    "title": "Improve GeoPointDistanceQuery performance",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "GeoPoint queries currently use only the bounding box for filtering.\nBut the query circle is only roughly 80% of the bounding box, so we could be roughly 20% faster. Furthermore, the current approach requires splitting the box if it crosses the date line.\n\n> Schubert, E., Zimek, A., & Kriegel, H. P. (2013, August). Geodetic distance queries on r-trees for indexing geographic data. In International Symposium on Spatial and Temporal Databases (pp. 146-164).\n\nThe minimum spherical distance of a point to a rectangle is given (\"Algorithm 2: Optimized Minimum Distance Point to MBR\"). Rectangles whose minimum distance is larger than the query radius can be skipped. The authors used the R-tree, but it will work with any bounding box, so it can be used in CellComparator#relate.\nIt's not very complex - a few case distinctions, and then either Haversine distance, or cross-track-distance. So the cost ist comparable to Haversine.\nThis could be added as GeoRelationUtils.pointToRectMinimumDistance, for example.\n\nThis approach can also be used to priorize rectangles, for top-k search.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15843638",
            "date": "2017-01-27T23:13:27+0000",
            "content": "This sounds promising!\n\nBut, we are moving away from GeoPointDistanceQuery in favor of the block KD tree (dimensional points) implemenation, LatLonPoint.newDistanceQuery: the latter is quite a bit faster as measured in our nightly geo benchmarks, and it recently just got even faster with LUCENE-7656.\n\nDo you think the ideas from these papers would also apply to LatLonPoint.newDistanceQuery? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15843639",
            "date": "2017-01-27T23:15:22+0000",
            "content": "This approach can also be used to priorize rectangles, for top-k search.\n\nOh we also have a nearest neighbor implementation for points: LatLonPoint.nearest.  Seems like these papers could help that too? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15844044",
            "date": "2017-01-28T12:56:50+0000",
            "content": "Should apply to LatLonPointDistanceQuery as well, to reduce the number of false positives in #compare.\n\nIn NearestNeighbor, it should improve #approxBestDistance (which currently computes haversine to all four corners of the bounding box, which is incorrect for a large bounding box, and a point close to the middle point of an edge & about 4x as expensive). In fact, it would be trueBestDistance as desired in the TODOs. ",
            "author": "Erich Schubert"
        }
    ]
}