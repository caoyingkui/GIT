{
    "id": "SOLR-2204",
    "title": "Cross-version replication broken by new javabin format",
    "details": {
        "affect_versions": "3.1",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "replication (java)"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Slave server is branch_3x, revision 1027974.  Master server is 1.4.1.  Replication fails because of the new javabin format.\n\nSEVERE: Master at: http://HOST:8983/solr/live/replication is not available. Index fetch failed. Exception: Invalid version or the data in not in 'javabin' format\n\nSwitching Solr's internally generated requests to XML, or adding support for both javabin versions would get rid of this problem.  I do not know how to do either of these things.",
    "attachments": {
        "SOLR-2204.patch": "https://issues.apache.org/jira/secure/attachment/12490357/SOLR-2204.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-12925656",
            "date": "2010-10-28T02:02:08+0000",
            "content": "This problem is a direct result of the new javabin format. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12925752",
            "date": "2010-10-28T08:41:05+0000",
            "content": "I don't think this is a bug.\n\nSolr 3.1 is a new major version, why should we support 'cross-version replication' ?\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-12925794",
            "date": "2010-10-28T12:53:45+0000",
            "content": "All of the Solr documentation I've read says that you're supposed to upgrade your slaves first, test it completely, then upgrade your masters.  This is a sensible approach, but it's impossible currently.\n\nWe can't do complete tests of our application against a single test server, we need to test against the entire distributed index.  The amount of hardware required for an entire copy of the index costs too much to have in a lab environment. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-12928129",
            "date": "2010-11-04T05:45:38+0000",
            "content": "I was planning to add 4.0 to the list of affected versions, but realized that it should be fine replicating with 3.1 as long as they both have the same javabin format.  Plus, there is already an existing barrier to upgrading directly from 1.4 to 4.0 - the index format itself.\n\nI don't see a problem with making changes that are incompatible between 4.0 (or 3.2) and 1.4, since they are so far apart.   IMHO the scenario I'm in, with the last release of one major version and the first release (well, current snapshot) of the next major version, it should be possible. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043646",
            "date": "2011-06-03T16:46:18+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13084713",
            "date": "2011-08-13T20:33:17+0000",
            "content": "Would it make sense to restore the old (CESU, I think?) UTF-8 encoding as a fallback for the javabin protocol that would be used after some protocol version negotiation indicated that either client or server only supports javabin version 1?\n\nIf we don't, this seems like a headache for upgrading; you'd really like to be able to upgrade different pieces of a large installation independently.\n\nI was looking at this and have a half-baked untried patch which handles the client side of the negotiation, but before spending more time on it I was hoping to get some opinions. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13084883",
            "date": "2011-08-14T18:51:00+0000",
            "content": "I was looking at this and have a half-baked untried patch which handles the client side of the negotiation, but before spending more time on it I was hoping to get some opinions.\n\nI worked around this in my own installation by modifying my build system.  It can now run two independent copies, one for each set of shards.  By the time I was ready for that, 3.2 was out.  When I upgraded one of the sets, I eliminated replication and began building them independently.  I'm still running that way, even after upgrading both sets to 3.2.  It's actually been advantageous, because I now have a full-scale testbed.  Before I could run tests with a single shard on independent hardware, now I can do it on the entire index because the offline set is built independently.  \n\nThank you for looking into the problem.  Hopefully it will save someone a lot of headache in the future. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13097676",
            "date": "2011-09-06T01:09:53+0000",
            "content": "I'm posting a more fully-realized patch now.  This is an important issue for us, not just because of replication, but also because we may support a bunch of different apps on a single server, would like to upgrade such a server, but can't upgrade all the apps at once.  Some might be stuck on an old version for some time since we are locked into our client's update schedules.  We could set up old and new servers and migrate the apps one by one, but it just seemed to me that the flexibility of being able to mix versions was worth some degree of pain.\n\nThis patch restores support for version 1 utf-8 encoding to JavaBinCodec to be used as a fallback when communicating with older peers.\n\nWhen a v2 server detects a v1 client, it responds using v1. The javabin version is inferred from the version byte read when unmarshalling binary content.  However, non-update requests won't have any such version info, so I increased the version passed on every HTTP request, from 2.2 to 3.4 and also use this string to detect older peers.  I may have missed the significance of this value and broken something else: wiser heads, please review!\n\nThe SolrJ client behaves a bit differently since it has no way of knowing in advance what version the server is.  With this patch, v2 clients detect a version mismatch error by parsing the HTTP response text, retry and then fall back to v1 for all future requests by recording the server javabin version in the RequestWriter.\n\nTesting this requires simulating the old behavior (ie forcing either the client or server into v1 mode).  To do this via jetty seemed to require a built-in hook (in BinaryUpdateRequestHandler) for that, used only for testing, which would be nice to avoid, but I didn't see how.  Also - JettySolrRunner offers a configfile param, but it didn't seem to have any effect, so I added a check for the system property in CoreContainer, but maybe I missed something and there is a better way to do this. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13100412",
            "date": "2011-09-08T15:58:18+0000",
            "content": "Can I interest any committer in reviewing this patch enabling backwards compatibility between 1.4.x clients/servers and 3.x clients/servers talking javabin format?  I think that providing this will reduce a lot of confusion and ease the upgrade path for users.  Maybe it's too late to get in the 3.4 release, but I would really love it if it could. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106359",
            "date": "2011-09-16T14:50:44+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13138492",
            "date": "2011-10-28T16:20:13+0000",
            "content": "I now have a customer facing this very problem, but in another context than replication.\n\nThe case is that they use Escenic ECM system (http://en.wikipedia.org/wiki/Escenic) which is Java based and from version 5 they also have their own built-in Solr search, on version 1.4.\n\nThe online newspaper publications run in the same JVM and then there is a clash between SolrJ versions needed for the built-in editorial search and the enduser-facing search. Thus it would be ideal if we could do a drop-in upgrade to solrj3.x without breaking the internal search of Escenic (which also uses JavaBin of course).\n\nI'll consider committing this, but first it needs some more work I guess.\n\na) Would there be a more robust way of detecting version mismatch than parsing text from the exception? Perhaps a new Solr specific exception with a version variable?\nb) HTTP request param \"version\" is currently 2.2, even for Solr3.4. The patch changes this to 3.4. Should not the version instead be bumped to 2.3, or should we let it follow solr versions (which is less confusing in many cases..)?\nc) How would the new SolrJ version handle talking to 1.4 server? Is there a way to force a new SolrJ to start talking v1 instead of fallback? "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13139522",
            "date": "2011-10-30T02:37:03+0000",
            "content": "a) Would there be a more robust way of detecting version mismatch than parsing text from the exception? Perhaps a new Solr specific exception with a version variable?\n\nI'm not sure how this can be done since there is no way to reach back in time and modify the installed base of older servers (the exception is thrown in the server, caught there, and then the text of the exception is passed back in the HTTP 500 response as the status line).\n\nb) HTTP request param \"version\" is currently 2.2, even for Solr3.4. The patch changes this to 3.4. Should not the version instead be bumped to 2.3, or should we let it follow solr versions (which is less confusing in many cases..)?\n\nI think I agree that tracking the Solr version makes the most sense here - maybe it would prove useful to know what version is running on the other end of the socket even if the binary format is identical?\n\nc) How would the new SolrJ version handle talking to 1.4 server? Is there a way to force a new SolrJ to start talking v1 instead of fallback?\n\nYes the patch only provides a mechanism for forcing the use of v1 on the server (using a parameter in solrconfig.xml), which was really only designed for testing.  I was attempting to make minimal changes.  \n\nBut it does makes sense to provide a means to force a protocol version in production environments (to avoid fallback), and probably the API should allow specifying the version, rather than just having a \"forceVersion1\" method, as the patch has.  I think this would require adding a \"setJavabinVersion()\" to CommonsHTTPSolrServer (and/or SolrServer), BinaryResponseWriter and BinaryRequestWriter. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13139525",
            "date": "2011-10-30T03:06:27+0000",
            "content": "I'm a little worried about this going forward.  If the JavaBin format changes in the future, are we going to detect the common denominator version between nodes? or are we always going to revert to communicating in the rudimentary 'Version 1'? "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13139526",
            "date": "2011-10-30T03:15:32+0000",
            "content": "I don't think adopting this patch commits you to any particular approach in the future, but in my opinion a sensible policy is always to use the most recent protocol version supported by both peers. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13140035",
            "date": "2011-10-31T10:06:51+0000",
            "content": "I like how luceneMatchVersion works - clients shouldn't need to worry about JavaBin version X or XML protocol version Y, they specify the Lucene/Solr version and our code knows what that means in terms of feature support.\n\nSay we introduced Avro as default streaming format in Solr4.9, but some of our servers are still at 4.8. We could then upgrade all clients to 4.9 but initialize with version=4.8 when talking to the old servers, doing fallback to JavaBinV2. For a 1.4.1 server we'd fallback to v1. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13140043",
            "date": "2011-10-31T10:21:57+0000",
            "content": "Why is it undesirable for people to have to explicitly define which format and version they want to communicate using? For most people they won't have to and can just use the default, only those who are tackling these sort of scenarios would need to worry. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13140128",
            "date": "2011-10-31T13:10:56+0000",
            "content": "One of the reasons I was motivated to change the javabin format, is because i went and actually looked at source code to solr clients in other languages and saw that they implemented the protocol wrong: no surprise because CESU-8/Modified UTF-8 is really a crazy java thing. \n\nThe big downside to then sending/receiving UTF-8 when they should send CESU-8 or vice versa is that it breaks unicode support in subtle ways.\n\nSo, I don't really want to see CESU-8 come \"back\". Its really completely absurd to send Modified utf-8 over the wire. I will do everything i can to prevent this! "
        },
        {
            "author": "Chris Male",
            "id": "comment-13140160",
            "date": "2011-10-31T13:37:07+0000",
            "content": "Yeah I agree with Robert.  I'm not sure we should bring a broken format back into the fold.  There is obviously a greater issue here about how to support communication between major versions when there has been a communication format change, but I think that relates to Solr/Lucene's bw compat policy? "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13140184",
            "date": "2011-10-31T14:32:29+0000",
            "content": "As a practical matter, it would be pretty useful for folks performing upgrades to have this backwards compatibility available.  In fact I think in the long term that providing back compat would actually help to reduce the total amount of CESU on the wire since it will make the upgrade path easier.  I understand the appeal of the clean-slate idea; the previous format may have been broken (or easy to get wrong), but the fact is that it is still in wide use, and that can't be changed overnight simply by refusing to support it.  Consider the change from SSH1 to SSH2: the earlier format was not really secure, but ssh continues to support a negotiation protocol for interoperability with old clients and servers, with user-settable options to control the negotiation process.  "
        },
        {
            "author": "Chris Male",
            "id": "comment-13140199",
            "date": "2011-10-31T14:49:39+0000",
            "content": "Again I wonder about going forward.  Jan has mentioned Avro a few times, so I'm sensing he might put forward changing over to that at some stage.  If that were to happen during the Solr 4.x era, would we continue to support Javabin v1 so people can upgrade from 1.4 to 4.x? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13140202",
            "date": "2011-10-31T14:54:38+0000",
            "content": "I dont understand the concept of 'replication' and 'upgrade from 1.4 to 4.x'. This is not supported, lucene 4.0 cannot read lucene 2.9 indexes. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13140208",
            "date": "2011-10-31T15:02:31+0000",
            "content": "Good point "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13140213",
            "date": "2011-10-31T15:11:31+0000",
            "content": "Would something like Avro end up being seen as an alternative to javabin, or a replacement?  Even if it's a replacement, I would still appreciate continued support for javabin 2, at any rate, to allow for simple upgrades between successive major versions (ie 2->3, 3->4). "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13140276",
            "date": "2011-10-31T16:30:15+0000",
            "content": "Perhaps change title to something more generic like \"Better back compat support for requests\"\n\nMy Avro comments relate also to SOLR-1535, and I think it could replace JavaBin2 (after a deprecation period of course).\n\nThinking more about this back compat thing, there is of course a known workaround, namely using XML. I just did that at a customer to be able to use v1.4.0 client towards v3.4 server. Of course that is less efficient and would not work for replication, but then I don't really see the usecase for cross version replication?\n\nSo I guess I still would like to see a more robust back compat support for requests in general, but the JavaBin version problem is not really a blocker in most cases. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13140352",
            "date": "2011-10-31T17:35:03+0000",
            "content": "I agree. The replication issue is not our main concern. XML format would be a workable alternative for maintaining back compat for us, but not as convenient as javabin since to put it in place we'd need to make changes to our client apps, however small. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13196185",
            "date": "2012-01-30T15:50:15+0000",
            "content": "Thinking more about this back compat thing, there is of course a known workaround, namely using XML. I just did that at a customer to be able to use v1.4.0 client towards v3.4 server. Of course that is less efficient and would not work for replication, but then I don't really see the usecase for cross version replication?\n\nImagine this (extremely common) scenario: you've got one master and one or more slaves, and possibly a replication forwarder or two, all running unmodified 1.4.x.  You want to upgrade.  Your build software is only capable of updating one master server and the person who wrote it found themselves a new job.  Without cross-version replication, how do you do this upgrade?  I don't think it's possible.\n\nI've got two copies of my index, purely for redundancy purposes.  As I already mentioned, I solved this problem when I went from 1.4.1 to 3.2.0 by making my software capable of updating two indexes in parallel.  It was not a trivial undertaking. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13196526",
            "date": "2012-01-30T23:12:56+0000",
            "content": "I think there's an acceptable workaround for that too. You disable replication, then upgrade master, then upgrade slave(s) and then enable replication again. Disabling/enabling polling can be done over HTTP so it's easily scriptable. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13196998",
            "date": "2012-01-31T16:11:07+0000",
            "content": "I think there's an acceptable workaround for that too. You disable replication, then upgrade master, then upgrade slave(s) and then enable replication again. Disabling/enabling polling can be done over HTTP so it's easily scriptable.\n\nYes, there are workarounds, but they force you into a rushed upgrade.  While upgrading the master, the index is not being updated.  While upgrading the slaves, it's running single-stranded.  Ideally you'd want hours or days for semi-production testing, a luxury you don't get if you can't upgrade one slave first and replicate from the older version on the master.\n\nIf the application has enough volume to require the services of multiple slaves, there will be application downtime.  Of course any sane company has built-in maintenance outage times, but how many non-technical management people are actually sane when it comes to this?  Mine are extremely intolerant of downtime, even if it's planned.\n\nWhen I upgraded one of my distributed indexes, it was about two weeks before I was ready to declare it a success and upgrade the other one.  I had already been testing on a dev box with a limited shard collection for several weeks before that.  I did find a few problems, and I was able to simply disable the index and fall back to the 1.4.1 version that I was keeping updated separately. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13199234",
            "date": "2012-02-02T21:21:36+0000",
            "content": "Given that 3.1 was released less than a year ago, there must still be a lot of 1.x users who have not upgraded yet.\n\nIf someone wants to refine this patch in a way that eases upgrade, both in terms of replication and SolrJ Streaming, I'm still positive to this. Again, I'm more concerned with SolrJ compat than replication compat, but you make one you get the other.. The hardest part will probably be sneaking the old JavaBin1 into the code base again while Robert is alive  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13237046",
            "date": "2012-03-23T20:31:33+0000",
            "content": "Bulk changing fixVersion 3.6 to 4.0 for any open issues that are unassigned and have not been updated since March 19.\n\nEmail spam suppressed for this bulk edit; search for hoss20120323nofix36 to identify all issues edited "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412224",
            "date": "2012-07-11T22:26:27+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429889",
            "date": "2012-08-07T03:44:01+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451044",
            "date": "2012-09-07T22:03:06+0000",
            "content": "removing fixVersion=4.0 since there is no evidence that anyone is currently working on this issue.  (this can certainly be revisited if volunteers step forward) "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13636588",
            "date": "2013-04-19T16:47:08+0000",
            "content": "This issue did not have nearly the fallout that I expected it would.  We are now many releases past the point where the javabin format changed and the sky hasn't fallen.  Closing the issue.  There is a patch, so if any fellow committers really want to see this happen, feel free to take over.\n\nThis is part of an effort to close old issues that I have reported.  Search tag: elyograg2013springclean "
        }
    ]
}