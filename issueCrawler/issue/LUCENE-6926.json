{
    "id": "LUCENE-6926",
    "title": "Take matchCost into account for MUST_NOT clauses",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "ReqExclScorer potentially has two TwoPhaseIterators to check: the one for the positive clause and the one for the negative clause. It should leverage the match cost API to check the least costly one first.",
    "attachments": {
        "LUCENE-6926.patch": "https://issues.apache.org/jira/secure/attachment/12776875/LUCENE-6926.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15051546",
            "author": "Adrien Grand",
            "date": "2015-12-10T19:53:58+0000",
            "content": "Here is a patch which changes several things:\n\n\tReqExclScorer now always exposes a two phase iterator, using the approximation of the positive clause as an approximation. This is useful because advancing to a non-excluded doc can be heavy if the excluded clause matches lots of documents. It also makes Lucene check deleted docs before we check the excluded clause.\n\tIn case ReqExclScorer needs to confirm both two phase iterators, it will confirm the least-costly one first.\n\tThe matchCost() now includes the match cost of the excluded clause  and tries to take into account the cost of advance (by using an arbitrary constant, but this is probably better than nothing?)\n\n "
        },
        {
            "id": "comment-15051718",
            "author": "Paul Elschot",
            "date": "2015-12-10T21:53:21+0000",
            "content": "First impression is good, and core tests pass here.\nI don't understand everything immediately though, but don't wait for that. "
        },
        {
            "id": "comment-15051721",
            "author": "Adrien Grand",
            "date": "2015-12-10T21:56:19+0000",
            "content": "If anything is not clear, feel free to ask! This might point to something that I overlooked or should document better. "
        },
        {
            "id": "comment-15053794",
            "author": "Paul Elschot",
            "date": "2015-12-11T23:38:33+0000",
            "content": "The patch uses only matchCost  of req and excl, but it might be better to also use their costs as a weight, just like a conjunction. The patch uses equal weights for req and excl.\n\nHere the conjunction is (req and (not excl)), and for weighting their costs are req.cost() and (N - excl.cost()), with N as the number of docs in the segment.\nThis would boil down to normally using req first, as expected. Only when excl matches a lot of docs, its weighting cost would be lower.\n\nWould it be worthwhile to use such weights here?\nSee also LUCENE-6894 where the number of docs in a segment is used much more. "
        },
        {
            "id": "comment-15055816",
            "author": "Adrien Grand",
            "date": "2015-12-14T10:50:27+0000",
            "content": "OK, I gave this idea a try: it weights the cost of matching the prohibited clause by the maximum ratio of the required clause that the prohibited clause might also match. For instance if the required clause has a cost of 1000 and the prohibited clause has a cost of 10, then we know we will be advancing the prohibited iterator and confirming the two-phase iterator at most 1% of the time so the final cost can be (${match cost of the required clause} + 0.01 * (${cost of advancing the prohibited iterator} + ${match cost of the prohibited clause})). Is it what you had in mind? "
        },
        {
            "id": "comment-15056628",
            "author": "Paul Elschot",
            "date": "2015-12-14T20:04:51+0000",
            "content": "I was thinking about using the cost of an excluded clause as (N - cost), and then being consistent with ConjunctionScorer.\n\nBut we could also just wrap each MUST_NOT clause so it becomes a normal non scoring boolean clause. The wrapper would only implement NOT.\n\nThen ConjunctionScorer can do the sorting and the wrapped MUST_NOT would normally come last, just like the normal case here.\n\nSince the current ReqExclScorer is also a wrapper, I would expect that a wrapper for each excluded clause has similar performance. This might also simplify BooleanWeight.\n\nDoes that sound feasible? "
        },
        {
            "id": "comment-15058762",
            "author": "Paul Elschot",
            "date": "2015-12-15T20:43:52+0000",
            "content": "I tried implementing this NOT wrapper, but it is not feasible because the nextDoc() implementation will have to do a linear scan as long as the wrapped iterator provides consecutive docs.\nSo this might be nice in theory, but it will not perform well.\n\nThat means that I can't easily improve on the latest patch, it looks good, and core tests pass here. "
        },
        {
            "id": "comment-15061986",
            "author": "Adrien Grand",
            "date": "2015-12-17T12:34:19+0000",
            "content": "Thanks Paul, I see what you meant now and I agree with your conclusion that it is not practical. This reminds me of a related idea that I had some time ago that some scorers return bitset-based iterators, which could easily be NOT'ed by using nextClearBit instead of nextSetBit so that we could apply them as a required clause (which should perform better) instead of a prohibited clause.\n\nI'll commit the patch shortly. "
        },
        {
            "id": "comment-15062015",
            "author": "ASF subversion and git services",
            "date": "2015-12-17T13:11:01+0000",
            "content": "Commit 1720544 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1720544 ]\n\nLUCENE-6926: Take the match cost into account for MUST_NOT clauses. "
        },
        {
            "id": "comment-15062035",
            "author": "ASF subversion and git services",
            "date": "2015-12-17T13:34:34+0000",
            "content": "Commit 1720548 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1720548 ]\n\nLUCENE-6926: Take the match cost into account for MUST_NOT clauses. "
        }
    ]
}