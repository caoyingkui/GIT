{
    "id": "SOLR-388",
    "title": "Refactor ResponseWriters and Friends.",
    "details": {
        "affect_versions": "1.2",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "Response Writers"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "When developing custom request handlers, it's often necessary to create corresponding response writers that extend existing ones. In our case, we want to augment the result list (more attributes other than numFound, maxScore, on the fly per doc attributes that are not fields etc.) , only to find JSONWriter and friends are private to the package. We could copy the whole thing and modify it, but it wouldn't take advantage of recent fixes like Yonik's FastWriter changes without tedious manual intervention. I hope that we can can at least extends it and overrides writeVal() to add a new result type to call writeMyType. \n\nIdeally the ResponseWriter hierarchy could be rewritten to take advantage of a double dispatching trick to get rid of the ugly if something is instance of someclass else ... list, as it clearly doesn't scale well with number of types (n) and depth (d) of the writer hierarchy, as the complexity would be O(nd), which worse than the O(1) double dispatching mechanism. Some pseudo code here:\n\nSomeResponseWriter.java\n// a list of overloaded write method\npublic void write(SomeType t) {\n  // implementation\n}\n\n\n\nResponseWritable.java\n// an interface for objects that support the scheme\npublic interface ResponseWritable {\n  public abstract void write(ResponseWriter writer);\n}\n\n\n\nSomeType.java\n// Sometype needs to implement the ResponseWritable interface\n// to facilitate double dispatching\npublic void write(ResponseWriter writer) {\n  writer.write(this);\n}\n\n\n\nSo when adding a new MyType and MySomeResponseWriter, we only need to add these two files without having to muck with the writeVal if-then-else list. Note, you still need to use the if else list for builtin types and any types that you can't modify in the write(Object) method. \n\nMyType.java\n// implements the ResponseWritable interface\npublic write(ResponseWriter writer) {\n  writer.write(this);\n}\n\n\n\nMySomeResponseWriter.java\n//  only need to implement this method\npublic void write(MyType t) {\n  // implementation\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12536482",
            "date": "2007-10-21T02:20:42+0000",
            "content": "As a general rule, we've worked hard to ensure Solr will never have the problem of \"RequestHandlerX can't be used with ResponseWriterY because X puts objects of type Z in the response\" ... that's why we have the SolrQueryResponse contract...\n\nhttp://lucene.apache.org/solr/api/org/apache/solr/request/SolrQueryResponse.html#returnable_data\n\n...even if we used double dispatching, this potential for incompatibility would still exist.\n\nThe list of \"returnable data\" in the SolrQueryResponse contract was designed to simple enough that any output format should be able to support all of the types on the list, while still being broad enough that any complex object could be expressed as combinations of the \"primitive\" types on the list.\n\n\nLuke: I suggest you start a thread on solr-user discussing your specific goal, so we can see if people have ideas on how to get your request handler returning the data you want in a format that any response writer can output.\n\n\nThat said: there's not much harm in cleaning up the the ResponseWriters so they could be subclassed by people who want enough rope to hang themselves, but i don't think we should be encouraging ResponseWriters that aren't reusable by going with the double dispatch approach. "
        },
        {
            "author": "Luke Lu",
            "id": "comment-12536487",
            "date": "2007-10-21T03:56:14+0000",
            "content": "Thanks for the pointers, Hoss. I can certainly copy/convert the results into a NamedList composed only of the primitives. But it's an extra copy that's bad for the performance, especially when the result list is relatively large, as in my case it's not an extra field per response, but a few things per document. BTW, the documentation needs to be updated to reflect that Document is also a supported primitive.\n\nI've searched the mailing list for JSONWriter. There are at least two threads asking for it to be public like XMLWriter. But no bugs have been filed and JSONWriter is still a class private to the package as of today in solr trunk, hence this bug. The double dispatching proposal is just an idea to make the code a bit cleaner and more efficient, as well as enable efficient reuse outside the solr release.\n\nI'd be happy if the only outcome of this issue is to have JSONWriter refactored into a public class that people can subclass. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12536773",
            "date": "2007-10-22T18:06:47+0000",
            "content": "A better way might be to add a mechanism to add fields to a document. "
        },
        {
            "author": "Luke Lu",
            "id": "comment-12536888",
            "date": "2007-10-23T02:49:22+0000",
            "content": "Adding pseudo fields to a document in order to be serialized works (as of 1.2, as long as they're specified the schema) but strikes me as being hackish similar to the scoreMap in JSONResponseWriter in the current solr trunk. \n\nAre there any reasons why it would be bad for JSONWriter to be public, especially considering XMLWriter has been public for a while? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12537505",
            "date": "2007-10-25T05:54:37+0000",
            "content": "Sorry, i'm a little behind on some things, several comments...\n\n> Hoss. I can certainly copy/convert the results into a NamedList composed only \n> of the primitives. But it's an extra copy that's bad for the performance\n\nyou don't have to copy anything, you just have to make sure that whatever complex object you want to add to the response implements one of the allowed interfaces (Map or List probably being the easiest) so the ResponseWriter's can access them.\n\nAs i said before: please start a thread on the solr-user list describing what it is you are doing in your RequestHandler, and the community might have lots suggestions for achieving your goals in a performant way that can work with any response writer (and won't require you to hack any internals or wait on any API changes)\n\n> BTW, the documentation needs to be updated to reflect that Document is \n> also a supported primitive.\n\nehhhh...  it's a question of perspective.  the documentation is correct in that response writers have never been required to support Document as a primitive (just DocList).  i haven't looked closely, but it wouldn't surprise me if the recursive nature of the writers that come with Solr can handle it okay, but that doesn't mean the docs for the interface are wrong ... it just means that example impl's do more then they have to.\n\n> Are there any reasons why it would be bad for JSONWriter to be public, especially \n> considering XMLWriter has been public for a while?\n\nonly that making a class public is essentially a one way operation; once a class is public it can't easily be made unpublic, nor can any of it's method signatures be changed .. which can be very limiting in making future improvements.  adding a package protected class with a \"dirty\" API can be done easily, because we don't have to maintain it if we decide we don't like it \u2013 we control all the clients and can change it all at once.  So deciding to make a class public requires careful consideration as to wether or not we think the API of that class is \"dirty\" and if Solr is willing to stand by it for the foreseeable future. "
        },
        {
            "author": "Luke Lu",
            "id": "comment-12537524",
            "date": "2007-10-25T07:11:46+0000",
            "content": "Thanks for the comments, Hoss. You explanations make sense. I can indeed work around the issue by implementing the map interface for our data struture, which is quite tedious as the data structure itself is not really a map. Definitely more code than copying it to NamedList or implementing a custom writer method. It's still less than ideal as they're serialized as <lst>...</lst> instead of the <result>...</result> that I want, when serialized through xml. \n\nI think the problem in the current spec is that the current DocList (which is the only type that can write <result> elements) writer code assumes too much implementation details (using a SolrIndexSearcher (ultimately IndexReader) to populate a document using internal doc ids as input. If the writers can stick to an abstract DocList interface that people can implement, then the problem is mostly solved. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12537613",
            "date": "2007-10-25T14:30:11+0000",
            "content": "\nwriter code assumes too much implementation details (using a SolrIndexSearcher (ultimately IndexReader) to populate a document using internal doc ids as input. If the writers can stick to an abstract DocList interface that people can implement, then the problem is mostly solved.\n\nI agree... and this same issue needs to be addressed for distributed search. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13046143",
            "date": "2011-06-08T19:16:57+0000",
            "content": "the types of thigns this issue points to are taken care of in SOLR-1566 "
        }
    ]
}