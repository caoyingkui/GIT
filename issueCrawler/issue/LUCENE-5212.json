{
    "id": "LUCENE-5212",
    "title": "java 7u40 causes sigsegv and corrupt term vectors",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Done",
        "status": "Resolved"
    },
    "description": "",
    "attachments": {
        "hs_err_pid32714.log": "https://issues.apache.org/jira/secure/attachment/12603182/hs_err_pid32714.log",
        "crashFaster2.0.patch": "https://issues.apache.org/jira/secure/attachment/12603884/crashFaster2.0.patch",
        "crashFaster.patch": "https://issues.apache.org/jira/secure/attachment/12603875/crashFaster.patch",
        "jenkins.txt": "https://issues.apache.org/jira/secure/attachment/12603183/jenkins.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-09-14T06:52:19+0000",
            "content": "This has happened twice in jenkins since Uwe upgraded, so i tried to reproduce myself.\n\nWith update 25, no issues.\nSo i ugpraded to update 40: on the first try with the jenkins commandline:\n\nrmuir@beast:~/workspace/lucene-trunk/lucene/core$ ant test -Dtests.seed=43A1116E7F98BED4 -Dtests.jvms=1 -Dtests.dynamicAssignmentRatio=0 -Dargs=\"-XX:-UseCompressedOops -XX:+UseParallelGC\"\n\n\n   [junit4] #\n   [junit4] # A fatal error has been detected by the Java Runtime Environment:\n   [junit4] #\n   [junit4] #  SIGSEGV (0xb) at pc=0x00007f163d2d34dd, pid=32714, tid=139732803393280\n   [junit4] #\n   [junit4] # JRE version: Java(TM) SE Runtime Environment (7.0_40-b43) (build 1.7.0_40-b43)\n   [junit4] # Java VM: Java HotSpot(TM) 64-Bit Server VM (24.0-b56 mixed mode linux-amd64 )\n   [junit4] # Problematic frame:\n   [junit4] # J  org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.get(I)Lorg/apache/lucene/index/Fields;\n   [junit4] #\n   [junit4] # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try \"ulimit -c unlimited\" before starting Java again\n   [junit4] #\n   [junit4] # An error report file with more information is saved as:\n   [junit4] # /home/rmuir/workspace/lucene-trunk/lucene/build/core/test/J0/hs_err_pid32714.log\n\n ",
            "author": "Robert Muir",
            "id": "comment-13767385"
        },
        {
            "date": "2013-09-14T06:53:30+0000",
            "content": "Attached is the hs_err ",
            "author": "Robert Muir",
            "id": "comment-13767387"
        },
        {
            "date": "2013-09-14T07:03:47+0000",
            "content": "i ran this 3 times... first 2 times SIGSEGV, third time it passed. so its not totally consistent but seems to reproduce.\n\nI will now try to reproduce the other seed from this morning. ",
            "author": "Robert Muir",
            "id": "comment-13767392"
        },
        {
            "date": "2013-09-14T07:13:04+0000",
            "content": "The other seed i cant reproduce:\n\n(from lucene/classification: ant test -Dtests.seed=68F81CB00E47182B -Dtests.jvms=2 -Dtests.dynamicAssignmentRatio=0 -Dargs=\"-XX:-UseCompressedOops -XX:+UseG1GC\")\n\nNote you have to rm -rf your .caches (sorry, dynamicAssignmentRatio=0 doesnt quite work), or the tests wont be executed in the same order as jenkins did. \n\nStill i cant reproduce that one, but the later seed above in core tests is easier anyway since it only launches 1 JVM and it SIGSEGVs. ",
            "author": "Robert Muir",
            "id": "comment-13767395"
        },
        {
            "date": "2013-09-14T07:20:37+0000",
            "content": "attached is original jenkins log (they get removed from the server pretty fast).\n\nin jenkins on os X, it didnt crash but had corrupt term vectors in several unrelated tests. ",
            "author": "Robert Muir",
            "id": "comment-13767397"
        },
        {
            "date": "2013-09-14T07:53:24+0000",
            "content": "> (sorry, dynamicAssignmentRatio=0 doesnt quite work),\n\nThe lack of determinism may be due to work stealing \u2013 dynamicAssignmentRatio=0 preallocates tasks to JVMs, while work stealing may actually assign differently on every run.\n\nPerhaps we should run jenkins jobs with dynamicAssignmentRatio=0... but then all the benefits of work time balancing among cores would be gone and fixed task assignment only helps in very specific bug cases (inter-suite dependency or JVM bugs). Hard to tell. ",
            "author": "Dawid Weiss",
            "id": "comment-13767407"
        },
        {
            "date": "2013-09-14T07:57:26+0000",
            "content": "I'm not complaining, I'm happy we are able to reproduce the 'whole run' in any shape or form. one extra command does not bother me, we shouldnt slow all of our jenkins jobs down to make jvm bug-debugging easier  ",
            "author": "Robert Muir",
            "id": "comment-13767408"
        },
        {
            "date": "2013-09-14T19:57:39+0000",
            "content": "in jenkins on os X, it didnt crash but had corrupt term vectors in several unrelated tests.\n\nVery scary that this can also be a \"silently introduces index corruption\" JVM bug!  I'd much prefer the sudden death SEGV. ",
            "author": "Michael McCandless",
            "id": "comment-13767559"
        },
        {
            "date": "2013-09-16T23:48:11+0000",
            "content": "https://bugs.openjdk.java.net/browse/JDK-8024830 ",
            "author": "Robert Muir",
            "id": "comment-13768967"
        },
        {
            "date": "2013-09-17T02:14:15+0000",
            "content": "I crashed again but with a core file (set 'ulimit -c unlimited').\n\nzip file with core dump and hs_err is here: http://people.apache.org/~rmuir/crash.zip (its too large for JIRA, sorry)\n\nFor some more context, it always happens fairly early in the test run:\nso when it doesnt crash at this exact point, you can ^C and run again until it does.\n\nHere was my commands with output below: (i tried to simplify the procedure to make it easy to reproduce, but its not easy, it took me quite a few tries)\n\n\n# note: we are pulling the exact revision that jenkins failed on, because things have changed in lucene codebase over the weekend!!!!\nsvn co -r 1523179 https://svn.apache.org/repos/asf/lucene/dev/trunk\n# just go to core tests\ncd trunk/lucene/core\n#\n# now the following two commands: just run again and again until it crashes.\n#\nrm -rf ../../.caches/\nant test -Dtests.seed=43A1116E7F98BED4 -Dtests.jvms=1 -Dargs=\"-XX:-UseCompressedOops -XX:+UseParallelGC\"\n\n\n\nHere was the output:\n\n\nrmuir@beast:~/workspace/trunk/lucene/core$ rm -rf ../../.caches/\nrmuir@beast:~/workspace/trunk/lucene/core$ ant test -Dtests.seed=43A1116E7F98BED4 -Dtests.jvms=1 -Dargs=\"-XX:-UseCompressedOops -XX:+UseParallelGC\"\nBuildfile: /home/rmuir/workspace/trunk/lucene/core/build.xml\n\n-clover.disable:\n\n-clover.load:\n\n-clover.classpath:\n\n-clover.setup:\n\nclover:\n\nivy-availability-check:\n\nivy-fail:\n\nivy-configure:\n[ivy:configure] :: Apache Ivy 2.3.0 - 20130110142753 :: http://ant.apache.org/ivy/ ::\n[ivy:configure] :: loading settings :: file = /home/rmuir/workspace/trunk/lucene/ivy-settings.xml\n\nresolve:\n\ninit:\n\ncompile-core:\n\ncompile-test-framework:\n\nivy-availability-check:\n\nivy-fail:\n\nivy-configure:\n[ivy:configure] :: loading settings :: file = /home/rmuir/workspace/trunk/lucene/ivy-settings.xml\n\nresolve:\n\ninit:\n\ncompile-lucene-core:\n\nivy-availability-check:\n\nivy-fail:\n\nivy-configure:\n[ivy:configure] :: loading settings :: file = /home/rmuir/workspace/trunk/lucene/ivy-settings.xml\n\nresolve:\n\ninit:\n\n-clover.disable:\n\n-clover.load:\n\n-clover.classpath:\n\n-clover.setup:\n\nclover:\n\ncompile-core:\n\ncompile-codecs:\n     [echo] Building codecs...\n\nivy-availability-check:\n     [echo] Building codecs...\n\nivy-fail:\n\nivy-configure:\n[ivy:configure] :: loading settings :: file = /home/rmuir/workspace/trunk/lucene/ivy-settings.xml\n\nresolve:\n\ncommon.init:\n\ncompile-lucene-core:\n\ninit:\n\n-clover.disable:\n\n-clover.load:\n\n-clover.classpath:\n\n-clover.setup:\n\nclover:\n\ncompile-core:\n\n-clover.disable:\n\n-clover.load:\n\n-clover.classpath:\n\n-clover.setup:\n\nclover:\n\ncommon.compile-core:\n\ncompile-core:\n\ncompile-test:\n\ninstall-junit4-taskdef:\n\nvalidate:\n\ntest:\n[junit4:pickseed] Seed property 'tests.seed' already defined: 43A1116E7F98BED4\n    [mkdir] Created dir: /home/rmuir/workspace/trunk/.caches/test-stats/core\n   [junit4] <JUnit4> says ciao! Master seed: 43A1116E7F98BED4\n   [junit4] Executing 367 suites with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(26780@beast).\n   [junit4] Suite: org.apache.lucene.store.TestHugeRamFile\n   [junit4] Completed in 1.26s, 1 test\n   [junit4] \n   [junit4] Suite: org.apache.lucene.search.TestTimeLimitingCollector\n   [junit4] Completed in 3.26s, 6 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestLazyProxSkipping\n   [junit4] Completed in 0.68s, 2 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestPostingsOffsets\n   [junit4] Completed in 0.78s, 11 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.search.TestRegexpQuery\n   [junit4] Completed in 0.11s, 7 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestTryDelete\n   [junit4] Completed in 0.03s, 3 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.util.TestDoubleBarrelLRUCache\n   [junit4] Completed in 1.02s, 2 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.analysis.TestGraphTokenizers\n   [junit4] Completed in 3.01s, 21 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestIndexWriterMerging\n   [junit4] Completed in 10.21s, 6 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.search.TestSearchAfter\n   [junit4] Completed in 2.05s, 1 test\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestNoMergeScheduler\n   [junit4] Completed in 0.02s, 3 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.TestSearchForDuplicates\n   [junit4] Completed in 0.08s, 1 test\n   [junit4] \n   [junit4] Suite: org.apache.lucene.util.TestBytesRef\n   [junit4] Completed in 0.02s, 5 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.Test4GBStoredFields\n   [junit4] IGNOR/A 0.02s | Test4GBStoredFields.test\n   [junit4]    > Assumption #1: 'nightly' test group is disabled (@Nightly)\n   [junit4] Completed in 0.03s, 1 test, 1 skipped\n   [junit4] \n   [junit4] Suite: org.apache.lucene.util.TestAttributeSource\n   [junit4] Completed in 0.02s, 5 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestIndexWriterMergePolicy\n   [junit4] Completed in 2.52s, 7 tests\n   [junit4] \n   [junit4] JVM J0: stdout was not empty, see: /home/rmuir/workspace/trunk/lucene/build/core/test/temp/junit4-J0-20130916_220432_129.sysout\n   [junit4] >>> JVM J0: stdout (verbatim) ----\n   [junit4] #\n   [junit4] # A fatal error has been detected by the Java Runtime Environment:\n   [junit4] #\n   [junit4] #  SIGSEGV (0xb) at pc=0x00007f72952cd74d, pid=26780, tid=140129037821696\n   [junit4] #\n   [junit4] # JRE version: Java(TM) SE Runtime Environment (7.0_40-b43) (build 1.7.0_40-b43)\n   [junit4] # Java VM: Java HotSpot(TM) 64-Bit Server VM (24.0-b56 mixed mode linux-amd64 )\n   [junit4] # Problematic frame:\n   [junit4] # J  org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.get(I)Lorg/apache/lucene/index/Fields;\n   [junit4] #\n   [junit4] # Core dump written. Default location: /home/rmuir/workspace/trunk/lucene/build/core/test/J0/core or core.26780\n   [junit4] #\n   [junit4] # An error report file with more information is saved as:\n   [junit4] # /home/rmuir/workspace/trunk/lucene/build/core/test/J0/hs_err_pid26780.log\n   [junit4] #\n   [junit4] # If you would like to submit a bug report, please visit:\n   [junit4] #   http://bugreport.sun.com/bugreport/crash.jsp\n   [junit4] #\n   [junit4] <<< JVM J0: EOF ----\n   [junit4] Execution time total: 28 seconds\n\n ",
            "author": "Robert Muir",
            "id": "comment-13769096"
        },
        {
            "date": "2013-09-17T02:24:15+0000",
            "content": "I ran again and here is the output where it does not crash, but instead corrupts:\n\nrmuir@beast:~/workspace/trunk/lucene/core$ rm -rf ../../.caches/\nrmuir@beast:~/workspace/trunk/lucene/core$ ant test -Dtests.seed=43A1116E7F98BED4 -Dtests.jvms=1 -Dargs=\"-XX:-UseCompressedOops -XX:+UseParallelGC\"\nBuildfile: /home/rmuir/workspace/trunk/lucene/core/build.xml\n\n-clover.disable:\n\n-clover.load:\n\n-clover.classpath:\n\n-clover.setup:\n\nclover:\n\nivy-availability-check:\n\nivy-fail:\n\nivy-configure:\n[ivy:configure] :: Apache Ivy 2.3.0 - 20130110142753 :: http://ant.apache.org/ivy/ ::\n[ivy:configure] :: loading settings :: file = /home/rmuir/workspace/trunk/lucene/ivy-settings.xml\n\nresolve:\n\ninit:\n\ncompile-core:\n\ncompile-test-framework:\n\nivy-availability-check:\n\nivy-fail:\n\nivy-configure:\n[ivy:configure] :: loading settings :: file = /home/rmuir/workspace/trunk/lucene/ivy-settings.xml\n\nresolve:\n\ninit:\n\ncompile-lucene-core:\n\nivy-availability-check:\n\nivy-fail:\n\nivy-configure:\n[ivy:configure] :: loading settings :: file = /home/rmuir/workspace/trunk/lucene/ivy-settings.xml\n\nresolve:\n\ninit:\n\n-clover.disable:\n\n-clover.load:\n\n-clover.classpath:\n\n-clover.setup:\n\nclover:\n\ncompile-core:\n\ncompile-codecs:\n     [echo] Building codecs...\n\nivy-availability-check:\n     [echo] Building codecs...\n\nivy-fail:\n\nivy-configure:\n[ivy:configure] :: loading settings :: file = /home/rmuir/workspace/trunk/lucene/ivy-settings.xml\n\nresolve:\n\ncommon.init:\n\ncompile-lucene-core:\n\ninit:\n\n-clover.disable:\n\n-clover.load:\n\n-clover.classpath:\n\n-clover.setup:\n\nclover:\n\ncompile-core:\n\n-clover.disable:\n\n-clover.load:\n\n-clover.classpath:\n\n-clover.setup:\n\nclover:\n\ncommon.compile-core:\n\ncompile-core:\n\ncompile-test:\n\ninstall-junit4-taskdef:\n\nvalidate:\n\ntest:\n[junit4:pickseed] Seed property 'tests.seed' already defined: 43A1116E7F98BED4\n    [mkdir] Created dir: /home/rmuir/workspace/trunk/.caches/test-stats/core\n   [junit4] <JUnit4> says ciao! Master seed: 43A1116E7F98BED4\n   [junit4] Executing 367 suites with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(27313@beast).\n   [junit4] Suite: org.apache.lucene.store.TestHugeRamFile\n   [junit4] Completed in 1.55s, 1 test\n   [junit4] \n   [junit4] Suite: org.apache.lucene.search.TestTimeLimitingCollector\n   [junit4] Completed in 3.23s, 6 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestLazyProxSkipping\n   [junit4] Completed in 0.57s, 2 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestPostingsOffsets\n   [junit4] Completed in 0.78s, 11 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.search.TestRegexpQuery\n   [junit4] Completed in 0.11s, 7 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestTryDelete\n   [junit4] Completed in 0.04s, 3 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.util.TestDoubleBarrelLRUCache\n   [junit4] Completed in 1.02s, 2 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.analysis.TestGraphTokenizers\n   [junit4] Completed in 3.05s, 21 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.index.TestIndexWriterMerging\n   [junit4] Completed in 10.27s, 6 tests\n   [junit4] \n   [junit4] Suite: org.apache.lucene.search.TestSearchAfter\n   [junit4]   1> CheckIndex failed\n   [junit4]   1> Segments file=segments_2 numSegments=2 version=5.0 format=\n   [junit4]   1>   1 of 2: name=_0 docCount=156\n   [junit4]   1>     codec=Lucene45\n   [junit4]   1>     compound=false\n   [junit4]   1>     numFiles=30\n   [junit4]   1>     size (MB)=0.157\n   [junit4]   1>     diagnostics = {timestamp=1379384646861, os=Linux, os.version=3.5.0-27-generic, source=flush, lucene.version=5.0-SNAPSHOT, os.arch=amd64, java.version=1.7.0_40, java.vendor=Oracle Corporation}\n   [junit4]   1>     no deletions\n   [junit4]   1>     test: open reader.........OK\n   [junit4]   1>     test: fields..............OK [15 fields]\n   [junit4]   1>     test: field norms.........OK [2 fields]\n   [junit4]   1>     test: terms, freq, prox...OK [8628 terms; 10659 terms/docs pairs; 423 tokens]\n   [junit4]   1>     test: stored fields.......OK [1 total field count; avg 0.006 fields per doc]\n   [junit4]   1>     test: term vectors........OK [3 total vector count; avg 1 term/freq vector fields per doc]\n   [junit4]   1>     test: docvalues...........OK [5 docvalues fields; 1 BINARY; 2 NUMERIC; 2 SORTED; 0 SORTED_SET]\n   [junit4]   1> \n   [junit4]   1>   2 of 2: name=_1 docCount=57\n   [junit4]   1>     codec=Lucene45\n   [junit4]   1>     compound=false\n   [junit4]   1>     numFiles=30\n   [junit4]   1>     size (MB)=0.06\n   [junit4]   1>     diagnostics = {timestamp=1379384646900, os=Linux, os.version=3.5.0-27-generic, source=flush, lucene.version=5.0-SNAPSHOT, os.arch=amd64, java.version=1.7.0_40, java.vendor=Oracle Corporation}\n   [junit4]   1>     no deletions\n   [junit4]   1>     test: open reader.........OK\n   [junit4]   1>     test: fields..............OK [15 fields]\n   [junit4]   1>     test: field norms.........OK [2 fields]\n   [junit4]   1>     test: terms, freq, prox...OK [3296 terms; 3969 terms/docs pairs; 227 tokens]\n   [junit4]   1>     test: stored fields.......OK [2 total field count; avg 0.035 fields per doc]\n   [junit4]   1>     test: term vectors........ERROR [null]\n   [junit4]   1> java.lang.NegativeArraySizeException\n   [junit4]   1> \tat org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.get(CompressingTermVectorsReader.java:433)\n   [junit4]   1> \tat org.apache.lucene.index.SegmentReader.getTermVectors(SegmentReader.java:169)\n   [junit4]   1> \tat org.apache.lucene.index.CheckIndex.testTermVectors(CheckIndex.java:1524)\n   [junit4]   1> \tat org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:611)\n   [junit4]   1> \tat org.apache.lucene.util._TestUtil.checkIndex(_TestUtil.java:223)\n   [junit4]   1> \tat org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:641)\n   [junit4]   1> \tat org.apache.lucene.search.TestSearchAfter.tearDown(TestSearchAfter.java:86)\n   [junit4]   1> \tat sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n   [junit4]   1> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]   1> \tat java.lang.reflect.Method.invoke(Method.java:606)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:795)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:51)\n   [junit4]   1> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:782)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:442)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n   [junit4]   1> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n   [junit4]   1> \tat java.lang.Thread.run(Thread.java:724)\n   [junit4]   1>     test: docvalues...........OK [5 docvalues fields; 1 BINARY; 2 NUMERIC; 2 SORTED; 0 SORTED_SET]\n   [junit4]   1> FAILED\n   [junit4]   1>     WARNING: fixIndex() would remove reference to this segment; full exception:\n   [junit4]   1> java.lang.RuntimeException: Term Vector test failed\n   [junit4]   1> \tat org.apache.lucene.index.CheckIndex.checkIndex(CheckIndex.java:624)\n   [junit4]   1> \tat org.apache.lucene.util._TestUtil.checkIndex(_TestUtil.java:223)\n   [junit4]   1> \tat org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:641)\n   [junit4]   1> \tat org.apache.lucene.search.TestSearchAfter.tearDown(TestSearchAfter.java:86)\n   [junit4]   1> \tat sun.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)\n   [junit4]   1> \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]   1> \tat java.lang.reflect.Method.invoke(Method.java:606)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:795)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:51)\n   [junit4]   1> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:782)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:442)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n   [junit4]   1> \tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n   [junit4]   1> \tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n   [junit4]   1> \tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n   [junit4]   1> \tat java.lang.Thread.run(Thread.java:724)\n   [junit4]   1> \n   [junit4]   1> WARNING: 1 broken segments (containing 57 documents) detected\n   [junit4]   1> \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSearchAfter -Dtests.method=testQueries -Dtests.seed=43A1116E7F98BED4 -Dtests.slow=true -Dtests.locale=th_TH_TH_#u-nu-thai -Dtests.timezone=JST -Dtests.file.encoding=ISO-8859-1\n   [junit4] ERROR   2.09s | TestSearchAfter.testQueries <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: CheckIndex failed\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([43A1116E7F98BED4:1F2FDDB565F10B7A]:0)\n   [junit4]    > \tat org.apache.lucene.util._TestUtil.checkIndex(_TestUtil.java:227)\n   [junit4]    > \tat org.apache.lucene.store.MockDirectoryWrapper.close(MockDirectoryWrapper.java:641)\n   [junit4]    > \tat org.apache.lucene.search.TestSearchAfter.tearDown(TestSearchAfter.java:86)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:724)\n   [junit4]   2> NOTE: test params are: codec=Lucene45: {short=PostingsFormat(name=FSTPulsing41), oddeven=PostingsFormat(name=Lucene41WithOrds), bytes=PostingsFormat(name=TestBloomFilteredLucene41Postings), byte=PostingsFormat(name=FSTPulsing41), int=PostingsFormat(name=TestBloomFilteredLucene41Postings), bytesval=PostingsFormat(name=FSTPulsing41), long=PostingsFormat(name=FSTPulsing41), double=PostingsFormat(name=Lucene41WithOrds), float=PostingsFormat(name=FSTPulsing41), english=PostingsFormat(name=Lucene41VarGapFixedInterval)}, docValues:{straightbytesdocvalues=DocValuesFormat(name=SimpleText), intdocvalues=DocValuesFormat(name=Lucene45), floatdocvalues=DocValuesFormat(name=Disk), sortedbytesdocvalues=DocValuesFormat(name=Disk), sortedbytesdocvaluesval=DocValuesFormat(name=SimpleText)}, sim=RandomSimilarityProvider(queryNorm=true,coord=yes): {oddeven=DFR GBZ(0.3), english=DFR I(F)BZ(0.3)}, locale=th_TH_TH_#u-nu-thai, timezone=JST\n   [junit4]   2> NOTE: Linux 3.5.0-27-generic amd64/Oracle Corporation 1.7.0_40 (64-bit)/cpus=8,threads=1,free=167266488,total=400556032\n   [junit4]   2> NOTE: All tests run in this JVM: [TestHugeRamFile, TestTimeLimitingCollector, TestLazyProxSkipping, TestPostingsOffsets, TestRegexpQuery, TestTryDelete, TestDoubleBarrelLRUCache, TestGraphTokenizers, TestIndexWriterMerging, TestSearchAfter]\n   [junit4] Completed in 2.11s, 1 test, 1 error <<< FAILURES!\n\n ",
            "author": "Robert Muir",
            "id": "comment-13769105"
        },
        {
            "date": "2013-09-17T02:32:03+0000",
            "content": "FYI: I ran this procedure about 10 times with the suggested workaround from https://bugs.openjdk.java.net/browse/JDK-8024830 and tests always pass:\n\n-XX:-UseLoopPredicate ",
            "author": "Robert Muir",
            "id": "comment-13769112"
        },
        {
            "date": "2013-09-17T05:59:51+0000",
            "content": "Is there any way to subscribe to that openjdk JIRA to watch issues? I don't see any way to do it  ",
            "author": "Dawid Weiss",
            "id": "comment-13769238"
        },
        {
            "date": "2013-09-17T06:03:14+0000",
            "content": "I cant figure out how to comment or anything. I wanted to just include this information to try to help the openjdk developers reproduce the bug and so on. \n\nBut for now I know I can do it here... ",
            "author": "Robert Muir",
            "id": "comment-13769241"
        },
        {
            "date": "2013-09-17T06:35:16+0000",
            "content": "I don't think you can comment or do anything until you're logged in. And you can't log in because it seems like a registration-closed system... ",
            "author": "Dawid Weiss",
            "id": "comment-13769259"
        },
        {
            "date": "2013-09-17T06:42:47+0000",
            "content": "For the record, this is a different bug than LUCENE-5168 (or a different manifestation of the same underlying bug?) because -XX:-UseLoopPredicate doesn't affect LUCENE-5168 (it still miscompiles). ",
            "author": "Dawid Weiss",
            "id": "comment-13769264"
        },
        {
            "date": "2013-09-17T06:52:50+0000",
            "content": "Yes thats a separate, older bug with the only workaround of -XX:-DoEscapeAnalysis correct?\n\nIf somehow these two bugs decide to drink beers together in the same jenkins run it will fry my brain. ",
            "author": "Robert Muir",
            "id": "comment-13769269"
        },
        {
            "date": "2013-09-17T07:15:20+0000",
            "content": "-XX:-DoEscapeAnalysis \n\nYes, the bug is somewhere in the escape analysis/ ideal graph optimization chain so disabling it does the job. The first JVM revision that had this bug is jdk7u04, versions before that one are not affected.\n\nThe good news is that this problem seems to affect only 32-bit JVMs, I couldn't reproduce it on a 64-bit JVM. It may be due to a larger number of CPU registers (so spill stack variables are not needed and thus there are no missed updates...). If this is the case then the problem may still occur somewhere else, depending on the method/ inlines/ switches/, you name it...\n\nThe current status of LUCENE-5168 is that one of hotspot core developers (Vladimir Kozlov) has collected the information needed for debugging, we know after which commit to hotpot the problem starts appearing and we know it's still present both in jdk7 and in jdk8. I'd have to devote myself full time to getting up to speed with internal hotspot code to figure out anything more \u2013 even the logs get really hairy (and huge) at the detail level we're looking at the problem. Hopefully Vladimir will be able to look into it at some point.\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13769281"
        },
        {
            "date": "2013-09-18T18:19:40+0000",
            "content": "Attached 'crashFaster.patch', which you can apply to the checkout.\n\nIt disables any unnecessary tests to reproduce the bug and speed up bisection. ",
            "author": "Robert Muir",
            "id": "comment-13771040"
        },
        {
            "date": "2013-09-18T18:41:11+0000",
            "content": "I noticed on my system: if the index goes corrupt it tends to happen in TestSearchAfter, but when it SIGSEGVs sometimes that happens in TestLucene45DocValuesFormat (sometimes it corrupts here, too)\n\nSo I updated the patch to include that test too, to try to make it easier to reproduce... (it still takes several tries for me) ",
            "author": "Robert Muir",
            "id": "comment-13771072"
        },
        {
            "date": "2013-09-24T07:18:37+0000",
            "content": "Don't know for sure if they're related or not but linking nonetheless. ",
            "author": "Dawid Weiss",
            "id": "comment-13776067"
        },
        {
            "date": "2013-09-25T05:28:02+0000",
            "content": "java 7u40? mybe also corrupt docvalue.\n================\nLUCENE-5218 background merge hit exception && Caused by: java.lang.ArrayIndexOutOfBoundsException\n ",
            "author": "Littlestar",
            "id": "comment-13777168"
        },
        {
            "date": "2013-10-11T20:50:17+0000",
            "content": "It appears this happens on 7u40 64-bit too. See https://bugs.openjdk.java.net/browse/JDK-8024830\n\nAm I reading this wrong?\n\nStart failing around hs24-b21:\n\n   [junit4] # SIGSEGV (0xb) at pc=0xfffffd7ff91d9f7d, pid=23810, tid=343\n   [junit4] #\n   [junit4] # JRE version: Java(TM) SE Runtime Environment (8.0-b54)\n   [junit4] # Java VM: Java HotSpot(TM) 64-Bit Server VM (24.0-b21 mixed mode solaris-amd64 )\n   [junit4] # Problematic frame:\n   [junit4] # J org.apache.lucene.codecs.compressing.CompressingTermVectorsReader.get(I)Lorg/apache/lucene/index/Fields;\n   [junit4] #\n\nNote, first 7u40 build b01 has hs24-b24.\n\nNext, I will try to find changeset.\n ",
            "author": "Bill Bell",
            "id": "comment-13793037"
        },
        {
            "date": "2013-10-14T05:18:35+0000",
            "content": "Is there a small corrupt index can reproduce the problem by CheckIndex, Thanks. ",
            "author": "Littlestar",
            "id": "comment-13793916"
        },
        {
            "date": "2013-10-24T04:03:05+0000",
            "content": "It seems like Oracle might punt on this until jdk8 comes around.  Which would preclude any safe use of Lucene for jdk7u40 and higher.\n\nFrom the last comment on the JDK issue:\n\nhttps://bugs.openjdk.java.net/browse/JDK-8024830\n\n\nAzeem Jiva added a comment - 2013-10-17 10:06 - edited\n\n8-compiler-defer: It requires a very specific set of circumstances to have this occur. Request to defer and fix when the issue is better understood. Fix for JDK8 update. ",
            "author": "mjuarez",
            "id": "comment-13803726"
        },
        {
            "date": "2013-10-24T16:07:04+0000",
            "content": "This is really disappointing. It's like saying we'll fix your car but for now, in very specific circumstances, it can blow right into your face... ",
            "author": "Dawid Weiss",
            "id": "comment-13804346"
        },
        {
            "date": "2013-10-24T16:22:08+0000",
            "content": "Hi,\n\nthe bug did not appear anymore recently on Jenkins. Michael McCandless refactored the horrible big method around CompressingTermVectorsReader, so the bug seems to be fixed.\n\nIn general we should not create such big methods  Eclipse \"Extract method\" is wonderful! ",
            "author": "Uwe Schindler",
            "id": "comment-13804354"
        },
        {
            "date": "2013-10-24T16:24:57+0000",
            "content": "I'm talking about the JVM bug, not the particular trigger that caused it in Lucene code. We can dodge those errors but sooner or later somebody will trip over them anyway.  ",
            "author": "Dawid Weiss",
            "id": "comment-13804359"
        },
        {
            "date": "2013-10-24T17:11:00+0000",
            "content": "Of course  ",
            "author": "Uwe Schindler",
            "id": "comment-13804418"
        },
        {
            "date": "2013-11-09T19:29:04+0000",
            "content": "Vladimir just pinged me that this issue is (hopefully) fixed, the webrev is here:\nhttp://cr.openjdk.java.net/~kvn/8024830/webrev/\n\nI'll test this patch (with jdk7u40) and let you know if I can (or can no longer) reproduce the issue.\n\nJDK bug ref: https://bugs.openjdk.java.net/browse/JDK-8024830 ",
            "author": "Dawid Weiss",
            "id": "comment-13818247"
        },
        {
            "date": "2013-11-10T16:41:41+0000",
            "content": "I confirm that this patch fixes the problem. I've tested svn rev. 1523179 (trunk) against jdk8-b114 with and without Vladimir's patch. Without the patch the test sequence ends about 50% of the time in a sigsegv. With the patch all executions ended without any errors.\n\nNote that the problem only affects CPUs with the AVX extension. A workaround for affected VMs is to disable vectorization with -XX:-UseSuperWord. ",
            "author": "Dawid Weiss",
            "id": "comment-13818482"
        },
        {
            "date": "2013-11-12T03:29:30+0000",
            "content": "The fix is committed to openjdk trunk. ",
            "author": "Robert Muir",
            "id": "comment-13819786"
        },
        {
            "date": "2013-11-26T15:13:46+0000",
            "content": "Hi,\nI figured out: Policeman Jenkins has no vector extensions! So the bug cannot affect Policeman Jenkins (has Lynfield CPU, no Sanybridge). So the bug causing the sigsegv here is not the same bug as the one we hit on Jenkins (that corrumpted term vectors).\nOf course it could be that the vector extensions bug also affected other CPUs, but I have no idea of that code. ",
            "author": "Uwe Schindler",
            "id": "comment-13832644"
        },
        {
            "date": "2013-11-26T15:52:51+0000",
            "content": "Uwe, i just read the issue slightly, but maybe it would be good to ask Vladimir if the bug really only impacts AVX instructions.\n\nSee the patch, perhaps it impacts 128bit SSE as well and is just easier to trip with the AVX ones since they have 256bit extensions? ",
            "author": "Robert Muir",
            "id": "comment-13832702"
        },
        {
            "date": "2013-11-26T16:38:17+0000",
            "content": "Vladimir said to me I needed an AVX CPU to test the patch. Odd. I may take a look at the openjdk code later on to see when this optimization is enabled. ",
            "author": "Dawid Weiss",
            "id": "comment-13832747"
        },
        {
            "date": "2013-11-27T18:03:09+0000",
            "content": "We inspected the code with Robert Muir and came to the conclusion that this bug may also affect SSE machines. Since hotspot code is very complex I also contacted Vladimir and he kindly replied that yes, this is the case.\n\n\nAnd you are correct the problem also affects SSE for which we can generate 16 bytes vectors which are larger then 8 bytes stack frame alignment we have. Actually in the bug there were only 16 bytes vectors max.\nI think it may be related to register masks we use on AVX machine, they are larger to be able map 32 bytes vectors. But again with SSE and 16 bytes vectors you can hit the same 8024830 problem but may be much less frequent. ",
            "author": "Dawid Weiss",
            "id": "comment-13833990"
        }
    ]
}