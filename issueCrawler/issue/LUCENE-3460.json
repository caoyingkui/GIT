{
    "id": "LUCENE-3460",
    "title": "Move handling of query only containing MUST_NOT to QueryParser (and remove QueryUtils.makeQueryable() hack in Solr)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "3.4,                                            4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "With the parent issue, users entering (a -b) into the queryparser can simply fail with an UnsupportedOperationException, if \"a\" is a stopword.\n\nSolr already has a hack to add a MatchAllDocsQuery, if a query only contains prohibited clauses.\n\nThe other issue (not affecting prohibited clauses) with stopwords is: If the user enters (a the) into queryparser, the query will return no results, as \"a\" and \"the\" are stopwords. This confuses lots of people (not only developers, even ordinary users of our interfaces). If somebody queries for a stopword, the correct way to handle this is to return all documents (MatchAllDocsQuery).\n\nA possible solution, as suggested by Chris Male on IRC was: Add a flag to QueryParser to enable a \"no-should-or-must-clauses\" mode, where this is replaced by MatchAllDocs automatically. This would also solve the prohibited clause case, too.\n\nThe stopword case is bad, but the opposite is as bad as returning all documents.\n\nAt least this issue should somehow handle the only-prohibited case like Solr and remove the hack from Solr.\n\nChanging this in QueryParser is the more correct solution than doing this hidden in BQ.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-25T13:25:48+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13114255"
        },
        {
            "date": "2011-09-25T13:39:16+0000",
            "content": "\nIf the user enters (a the) into queryparser, the query will return no results, as \"a\" and \"the\" are stopwords. This confuses lots of people (not only developers, even ordinary users of our interfaces). If somebody queries for a stopword, the correct way to handle this is to return all documents (MatchAllDocsQuery).\n\n-1.\n\nThere is no terms to search for, and no evidence that all documents are relevant to the query. ",
            "author": "Robert Muir",
            "id": "comment-13114260"
        },
        {
            "date": "2011-09-25T14:06:52+0000",
            "content": "I do kind of agree with Robert here.  If there are no terms remaining (after analysis), then there shouldn't really be a Query at all. ",
            "author": "Chris Male",
            "id": "comment-13114265"
        },
        {
            "date": "2011-09-25T14:54:43+0000",
            "content": "I also agree partly with Robert; with partly i mean: Returning nothing for stop-words only confuses users, too, so we should do something.\n\nJust to make it clear, this was on IRC:\n\n[15:11]\tchrismale: If someones query is all stopwords, then matching everything makes sense.\n[15:11]\tchrismale: every term got filtered out\n[15:12]\tchrismale: Leaving you nothing\n[15:12]\tchrismale: Nothing is parsed to MatchAllDocs\n\nSo the issue description is right \n\nMy idea was to add a setter to QP:\n\n\tthe default is to work as it did before: To prevent the UOE, QP should simply parse to an empty BQ in the case of only prohibited clauses. This would preserve backwards compatibility for QP, it will never throw Exception\n\tadd a \"Solr\" mode: This would add MatchAllDocsQuery with Occur.MUST, so this would be identical behaviour like Solr does in QueryUtils. The special case in Solr can be removed, QP never throws Exception.\n\tmy favourite is this mode: If the user enters a query that only has stop-words as positive clauses (we can easily detect this by counting terms), the QP should throw a good ParseException explaining that the entered query string does no produce a meaningful query, as all clauses may be stop words (it could also be stripped of by other filters, not only stop filter - so the message should be more generic). It would do this also if no negative queries are involved. So a user entering \"a the\" would get a meaningfull explanation that this is an invalid query.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13114275"
        },
        {
            "date": "2011-09-26T00:32:02+0000",
            "content": "a) watch out how/if you remove QueryUtils.makeQueryable ... this \"hack\" isn't just about adding a MatchAllDocsQuery, it's also got logic for dealing with WrappedQuery instances.\n\nb) the original reason why QueryUtils.makeQueryable was added (instead of putting that logic in SolrQueryParser) was so that Solr plugins could use the underlying lucene parser to parse user input (even if the resulting query parsed to all negative clauses, or no clauses) and then programaticly manipulate that query in a manner of their choosing \u2013 calling makeQueryable if that was the desire.  The three useages Uwe describes would eliminate this possibility (specificly bacause of \"QP should simply parse to an empty BQ in the case of only prohibited clauses.\" statement)  ie: Perhaps i want to allow my users to specify all MUST_NOT clauses, and then i want to add my own MUST clause instead of a MatchAllDocsQuery.\n\n\n...all of that said: i'm definitely in favor of more \"signals\" coming out of the query parser of things that the caller should be aware of.  particularly if we can help deal with the situation of nested clauses that are semanticly invalid (ie: \"bar +(foo +(a the))\"\n\n ",
            "author": "Hoss Man",
            "id": "comment-13114414"
        },
        {
            "date": "2013-07-23T18:44:43+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717040"
        },
        {
            "date": "2014-04-16T12:54:53+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970914"
        }
    ]
}