{
    "id": "SOLR-5040",
    "title": "SnapShooter doesn't create a lock as it runs",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "replication (java)"
        ],
        "type": "Bug",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Hi there,\n\nWhile messing around with the replication handler recently, I noticed that the snapshooter didn't seem to be writing a lock file.  I had a look at the SnapShooter.java code, and to my untrained eye it seemed like it was creating a Lock object but never actually taking a lock.\n\nI modified my local installation to use lock.obtain() instead of lock.isLocked() and verified that I'm now seeing lock files.  I've attached a very small patch just in case this is a genuine bug.\n\nCheers,\n\nMark",
    "attachments": {
        "snapshooter-locking.diff": "https://issues.apache.org/jira/secure/attachment/12592183/snapshooter-locking.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13708023",
            "date": "2013-07-14T13:19:19+0000",
            "content": "Nice catch, indeed there is something wrong with that code.\n\nI guess the question is, what is the right behavior? Do we really need that lock? Why not allow multiple calls to proceed in parallel? If they should not, what's the best behavior? It seems now it just would return silently? Shouldn't it log an error? Report failure to the caller? It actually looks like snapshot requests return right away, regardless of how the snapshot proceeds - perhaps it should wait until the snapshot is done like a lot of our other commands that might take a while? (commit, optimize, etc). "
        },
        {
            "author": "Mark Triggs",
            "id": "comment-13708120",
            "date": "2013-07-14T20:40:19+0000",
            "content": "Thanks Mark.\n\nChiming in one data point, I started looking at the SnapShooter code because I was wondering how to start a snapshot from a script and then (programatically) wait for it to complete.\n\nIn the end the only way I could see to do this was to poll the replication handler with 'command=details' to wait for its state to change.  But this wouldn't have been necessary if the replication handler waited the request until the snapshot completed. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13708450",
            "date": "2013-07-15T13:23:19+0000",
            "content": "multiple snapshots running in parallel should be just fine. They are just going to be created with different file names.\n\nBut I don't think the snapshooter is smart enough to check if there sis a copy of the index with the same indexversion.\n\nThe snapshoot process itself is async .There should be a way to poll and get the status of an ongoing snapshoot (if any)\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13708451",
            "date": "2013-07-15T13:26:32+0000",
            "content": "There should be a way to poll and get the status of an ongoing snapshoot\n\nI think that's a fine feature, but less useful than offering the option to have the call wait to return until it's done. "
        }
    ]
}