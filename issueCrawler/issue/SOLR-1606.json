{
    "id": "SOLR-1606",
    "title": "Integrate Near Realtime",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "3.2"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "We'll integrate IndexWriter.getReader.",
    "attachments": {
        "SOLR-1606.patch": "https://issues.apache.org/jira/secure/attachment/12426355/SOLR-1606.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jason Rutherglen",
            "id": "comment-12783365",
            "date": "2009-11-29T06:54:19+0000",
            "content": "Solr config can have an index nrt (true|false), or commit can specify the nrt var.  With nrt=true, when creating a new searcher we call getReader.   "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12786448",
            "date": "2009-12-05T17:15:46+0000",
            "content": "Jason, I got a failure when running TestRefreshReader. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12787206",
            "date": "2009-12-08T00:03:14+0000",
            "content": "Koji,\n\nLooks like a change to trunk is causing the error, also when I step through it passes, when I run without stepping it fails... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12787208",
            "date": "2009-12-08T00:10:45+0000",
            "content": "Don't we need a new command, like update_realtime (bad name i know) or something? Else you will be doing a full commit every time you get the new reader?\n\nedit\n\nI see - you skip the commit - I think we should make a new command though shouldn't we?\n\nStill allow a standard commit, but a new command that kicks in the realtime refresh? "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12787221",
            "date": "2009-12-08T00:37:27+0000",
            "content": "Don't we need a new command, like update_realtime\n\nWe could however it'd work the same as commit?  Meaning afterwards, all pending changes (including deletes) are available?  The commit command is fairly overloaded as is.  Are you thinking in terms of replication? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12787482",
            "date": "2009-12-08T14:54:13+0000",
            "content": "Another thing to consider: allow some things to be turned around for realtime by allowing clients to trigger opens of a new reader.\nFor example, q=foo&freshness=1000 would cause a new realtime reader to be opened of the current one was more than 1000ms old. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12787487",
            "date": "2009-12-08T15:07:39+0000",
            "content": "We could however it'd work the same as commit? \n\nI've never actually used NRT, so I don't fully understand it. Doesn't it not commit the index? Are the changes persisted over a reboot then?\n\nIn any case, I assume it must not fsync the files, so you don't get a commit where you know your in a stable condition?\n\nThere are differences right? Seems like you should have the option of either ... "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12787619",
            "date": "2009-12-08T18:16:57+0000",
            "content": "In any case, I assume it must not fsync the files, so you\ndon't get a commit where you know your in a stable\ncondition?\n\nOK, right, for the user commit currently means that after the\ncall, the index is in a stable state, and that it can be\nreplicated? I agree, for clarity, I'll create a refresh command\nand remove the NRT option from the commit command.\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12787621",
            "date": "2009-12-08T18:18:09+0000",
            "content": "For example, q=foo&freshness=1000 would cause a new realtime reader to be opened of the current one was more than 1000ms old.\n\nGood idea. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12787686",
            "date": "2009-12-08T19:34:54+0000",
            "content": "I was going to start on the auto-warming using IndexWriter's\nIndexReaderWarmer, however because this is heavily cache\ndependent I think it'll have to wait for SOLR-1308 because we\nneed to regenerate the cache per reader.  "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12787800",
            "date": "2009-12-08T23:12:41+0000",
            "content": "The current NRT IndexWriter.getReader API cannot yet support IndexReaderFactory, I'll open a Lucene issue. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872490",
            "date": "2010-05-27T22:06:26+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12986008",
            "date": "2011-01-24T21:12:56+0000",
            "content": "Sorry if this spam's things, however it's unlikely that I'll work on these. "
        }
    ]
}