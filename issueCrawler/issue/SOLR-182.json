{
    "id": "SOLR-182",
    "title": "register SolrRequestHandlers at runtime / lazy loading",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.2"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be useful to be able to register handlers after SolrCore has been initialized initialized.  It is also useful to be able to ask what handlers are registered and to where.  This patch adds the following functions to SolrCore:\n\nSolrRequestHandler registerRequestHandler(String handlerName, SolrRequestHandler handler);\nCollection<SolrRequestHandler> getRequestHandlers(Class<? extends SolrRequestHandler> clazz);\n\nIt also guarantees that request handlers will be initialized with an argument saying what path it is registered to.  RequestHandlerBase gets a bean for the registered path.\n\nWhile discussing this, Yonik suggested making it possible to defer initialization of some handlers that will be infrequently used.  I added the 'LazyRequestHandlerWrapper'  (if taking this out makes the patch any easier to commit - it can get its own issue)\n\ncheck:\nhttp://www.nabble.com/Dynamic-RequestHandler-loading-tf3351707.html",
    "attachments": {
        "SOLR-182-RuntimeRequestHandlers.patch": "https://issues.apache.org/jira/secure/attachment/12352690/SOLR-182-RuntimeRequestHandlers.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12478229",
            "date": "2007-03-06T00:57:31+0000",
            "content": "If you all are more comfortable with\n\n Collection<SolrRequestHandler> getRequestHandlers()\n\nthen:\n\n Collection<SolrRequestHandler> getRequestHandlers(Class<? extends SolrRequestHandler> clazz)\n\nthat is an easy change.  Likewise we can postpone the Lazy bit if it makes anything easier.\n\nI included tests for everything i think is testable about these changes, and added nice javadocs.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12478240",
            "date": "2007-03-06T01:49:09+0000",
            "content": "changed this so that LazyRequestHandlerWrapper is not a public class.  That seems cleaner as it is not something that should be used directly "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12478529",
            "date": "2007-03-06T19:31:12+0000",
            "content": "Updated in response to Hoss' comments:\nhttp://www.nabble.com/Re%3A-Dynamic-RequestHandler-loading-p9337978.html\n\n1. gets rid of the get by class thing\n2. adds Map<> getRequestHandlers() \n3. gets rid of the extra param to init()\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12478561",
            "date": "2007-03-06T20:22:39+0000",
            "content": "two outstanding questions from the email discussion...\n\n1) yonik seemed to be concerned about synchronization issues involved with geting a request handler by name now that they can be registered dynamicly on the fly ... flarify that.\n\n2) if we want request handlers to be able to find out what nam(es) they are registered with (now that anyone can call core.registerRequestHandler I might give the exact same identicle instance multiple names) they should be able to do that from the init method ... since we aren't changing the API of the init method, we should probably make sure that registering a handler causes...\n      handler = clazz.newInstance();\n      this.register( name, handler );\n      handler.init( args );\n...to happen in that order.\n\ni would even argue that when registering multiple handlers (ie: from the config) we may want the psuedocode to be...\n\n    foreach (handlerconfig) \n{\n         handler = clazz.newInstance();\n         this.register( name, handler );\n    }\n    foreach (key in registry) \n{\n         lookup(key).init( args );\n    }\n\n...so that all handlernames are defined before any init methods are called.\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12478571",
            "date": "2007-03-06T20:53:16+0000",
            "content": "#2, smart!  yes "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12478672",
            "date": "2007-03-07T02:29:54+0000",
            "content": "This update loads handlers in the style suggested by Hoss.\n\nIt makes sure everything is instanciated and registered before calling init() on any handlres registered in solrconfig.xml\n\nIt calls init() on handlers in the order they were defined.\n\nThe only open issue is if SolrCore.getRequestHandler() should be synchronized.  I can't think of any potential problems if it isn't but i could be missing something.\n\nI'll let whoever commits this decide if it should be synchronized or not. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12479435",
            "date": "2007-03-08T21:37:07+0000",
            "content": "w.r.t. synchronization of getRequestHandler(), I was just thinking ahead to when registerRequestHandler() may be called after the constructor for SolrCore.\n\nRegistration before initialization is interesting, but again, this only works easily if registerRequestHandler() is restricted to the SolrCore constructor.  If this were to change in the future, it would expose un-initialized handlers to requests. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12479452",
            "date": "2007-03-08T22:43:13+0000",
            "content": "The API in this patch lets you call SolrCofe.registerRequestHandler( path, handler ) at any point.  If you use this api, you are responsible to make sure the handler is initalized \u2013 this may or may not require calling init( NamedList ) depending on the handler implementation.  \n\nThe \"Registration before initialization\" is only save for SolrCore to use within its constructor.  RequestHandlers.registerHandlers( NodeList nodes ) - is package private and only called from the SolrCore constructor.\n\nI still don't see how synchronization becomes an issue - unless someone is trying a bizarro use case where someone registers a handler within SolrRequestHandler.handleRequest() and expects that exactly the next request use the newly registered handler.  \n\nIn my use case, I have a custom filter that extends SolrRequestDispatcher.  This filter initializes solr normally, then inspects what was registered and automatically sets up the rest of the environment.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12479488",
            "date": "2007-03-09T03:01:31+0000",
            "content": "If you modify the map in one thread and read from it in another thread, that requires synchronization to work correctly (even if it's a different entry being accessed). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12479491",
            "date": "2007-03-09T03:18:45+0000",
            "content": "But what is the failure mode?  \n\nSuppose, in thread A, I call:\n  SolrCore.getSolrCore().registerRequestHandler( \"/path/to/handler\", handler );\n\nthen 5 seconds later in thread D, I call:\n  SolrCore.getSolrCore().getRequestHandler( \"/path/to/handler\" )\n\nCan we be sure the new handler will be returned?  Is there any chance of anything exploding?  Is it only in the microseconds around touching the map that things are undefined?  \n\nIf it is a graceful error (null or whatever was there before), i don't think this case needs to be synchronized.  If it is something else could happen, it should be. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12479494",
            "date": "2007-03-09T03:45:06+0000",
            "content": "> But what is the failure mode? \n\nAny number of modes of failure.... it's very tough to predict them (I think you'd have to be Doug Lea \n\n1)\n   thread #1 does map.put(\"/path/to/handler\", handler)\n   thread #2 iterates over the map and gets a ConcurrentModificationException\n\n2)\n  thread #1 does map.put(\"/path/to/handler\", handler)\n  thread #2 does map.put(\"/path/to/handler2\", handler2)\n  a) If they hash to the same bucket, one could overwrite the other\n  b) one or both could cause resize() to be invoked... ouch!  many different modes of failure there\n\n3)\n    thread #1 does map.put(\"/path/to/handler\", handler) causing resize to be called()\n    thread #2 does a map.get(\"/myexistinghandler\") and it gets back null\n\nI'd agree with you if the only mode of failure was to get back null for the current object being put in the map (since it's a race between threads anyway, null is a valid view - one should synchronize externally in that case anyway).  But, any insert can mess up all other reads. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12479506",
            "date": "2007-03-09T04:52:23+0000",
            "content": "synchronized it is!\n\nRather then synchronizing each function call, I'm using a synchonized map:\n\n  private final Map<String, SolrRequestHandler> handlers = Collections.synchronizedMap(\n      new HashMap<String,SolrRequestHandler>() ); "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12483794",
            "date": "2007-03-23T23:40:34+0000",
            "content": "related note i'm typing before i forget...\n\nin SOLR-81 i tried to call SolrCore.getSolrCore.getDataDir() in the init method of a requestHandler and got an infinite loop.  I can't remember if this type of situation would be prevented by this patch or not ... if it isn't that doesn't mean this patch shouldn't be committed, it just means we should probably open a separate bug to try and detect/prevent/error in that situation.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12483796",
            "date": "2007-03-23T23:46:31+0000",
            "content": "yes, that situation is handled by this patch.  This was one of my primary reasons for writing it!\n\nThis patch lets you do call SolrCore.getCore() and inspect the schema/index/whatever.  Without it, you need to do some sort of lazy loading after the first request. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12483871",
            "date": "2007-03-24T20:11:34+0000",
            "content": "A couple of comments...\n\n\tFor lazy loading, you don't even want to load the class if it's not used (loaded classes take up resources, and there may be optional jars that will cause errors).\n\tit really seems like init() must be called before any calls to handleRequest.  To ensure this, I don't think we can do the registration inbetween.  This isn't just a hypothetical problem... think about when a new web page is published that causes a new type of request to start hitting an existing Solr server... 10s to 100s of requests per second for a new hander all of a sudden.  The likelihood becomes very high that another request will cause handleRequest() to be called before or concurrently with init().\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12483879",
            "date": "2007-03-24T20:46:25+0000",
            "content": "> - For lazy loading, you don't even want to load the class if it's not used (loaded classes take up \n> resources, and there may be optional jars that will cause errors).\n\nOk - I'm a little nervous about that because I like things to fail loudly at startup rather then wait to tell you they were configured incorrectly.  (SOLR-179)  But if you are using lazy loading, that is probably the behavior you would expect.\n\nI'll change it so that the LazyRequestHandlerWrapper stores the string value for the class name rather then the Class itself.\n\n>\n> - it really seems like init() must be called before any calls to handleRequest.  \n>\n\nyes, init() must be called before any call to handleRequest() - absolutely\n\nCorrect me if I have the lifecycle wrong, but I think it is ok:\n\n1. SolrDispatchFilter.init() calls SolrCore.getSolrCore() \n2. SolrCore.getSolrCore() calls SolrCore constructor\n3. SolrCore constructor initalizes schema, listeners, index and writers\n4. then calls reqHandlers.initHandlersFromConfig( SolrConfig.config )\n\nthis function:\n a. creates each handler for solrconfig.xml and registers it\n b. calls init() on each handler - (since register was called first, each handler knows what else exists, but it may or may not be initialized)\n\n5. initialize searcher / updateHandler\n6. SolrDispatchFilter.init() finishes and solr starts accepting requests.\n\nAll handlers call init() before they could possibly receive any requests.  No requests can hit solr during the limbo period (a-b), It is only in the \"unstable\" state in the SolrCore constructor - I think the benefits of handlers knowing what else is registered during their init() method is worth the slightly awkward construction.\n\nThe public interface:\n SolrCore.register( String handlerName, SolrRequestHandler handler )\nassumes that the handler is properly initialized.  As soon as this is called it can immediately start accepting requests.  I will make the javadoc more clear on this point.  \n\nThe only potentially dangerous function is (4) initHandlersFromConfig.  This is a package private function that defiantly should not be called anywhere else.  Calling this function twice is not normal, if someone does it, they are asking for trouble. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12484055",
            "date": "2007-03-26T07:50:02+0000",
            "content": "1. Changed the LazyRequestHandlerWrapper to hang on to a string rather then a class and does not access the class until it is needed.  (saves memory, but delays errors)\n\n2. Added more explicit documentation\n\ninitHandlersFromConfig still registers all handlers before initializing them - i am confident this is ok unless it is called outside of the solr core constructor. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12484140",
            "date": "2007-03-26T15:41:59+0000",
            "content": "> (saves memory, but delays errors) \nDelays errors can also be a feature (if things need to be configured first, or jars need to be dropped in the right spot, etc).\n\nI think getWrappedHandler() needs to by synchronized or else\n\n\tmultiple instances could be instantiated\n\tan instantiated instance could be handed back to a different thread before or during the handler's init()\n\tgeneral spookiness even after init() finishes due to lack of synchronization (initialized data won't necessarily be seen correctly in a different thread)\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12484168",
            "date": "2007-03-26T17:34:45+0000",
            "content": "One line change adding synchronized to:\n  public synchronized SolrRequestHandler getWrappedHandler()\n\nthanks yonik\n\n\n\t- - - - - - - - -\n\n\n\n>> (saves memory, but delays errors) \n> Delays errors can also be a feature (if things need to be configured first, or jars need to be dropped in the right spot, etc).\n> \n\nI'm convinced.  With SOLR-179 you can configure things to stop after errors - if you want some things to stop while otheres continue, you can make them lazy loaded.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12484179",
            "date": "2007-03-26T18:24:04+0000",
            "content": "Committed.  Thanks Ryan! "
        }
    ]
}