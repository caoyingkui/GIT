{
    "id": "SOLR-1488",
    "title": "autoCommit when idle",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Enable autoCommit to execute after a given amount of idle time (no documents submitted).",
    "attachments": {
        "SOLR-1488.patch": "https://issues.apache.org/jira/secure/attachment/12421186/SOLR-1488.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Matt Weber",
            "id": "comment-12761806",
            "date": "2009-10-03T05:01:01+0000",
            "content": "This patch adds autoCommit after idle support.  If maxTime and idleTime are both defined in solrconfig.xml, then maxTime takes precedence. "
        },
        {
            "author": "Matt Weber",
            "id": "comment-12761910",
            "date": "2009-10-03T16:41:40+0000",
            "content": "Forgot to mention, the new parameter used to configure this feature is called idleTime.  \n\nHere is an example that will commit every 100k docs or after 10 seconds of idle time:\n\n<autoCommit>\n     <maxDocs>100000</maxDocs>\n     <idleTime>10000</idleTime>\n     <!-- <maxTime>30000</maxTime> -->\n</autoCommit> "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12761912",
            "date": "2009-10-03T16:48:11+0000",
            "content": "Pushing this out of this release... it's non-trivial since it interacts with current autocommit code, and we need to stop adding features and get 1.4 out! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13631196",
            "date": "2013-04-13T21:55:25+0000",
            "content": "SPRING_CLEANING_2013 JIRAS Is this still valid? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13632587",
            "date": "2013-04-16T05:24:05+0000",
            "content": "My gut instinct on reading this was that allowing this could lead to an alternate way of creating \"huge tlog\" problems ... someone might define only idleTime and leave the others out.  After a few minutes of thinking about it, it's probably not any worse than the existing ways that people end up with huge tlogs.\n\nIt seems to me that honoring both idleTime and maxTime would be the best way to go.  Using the example, if you have ten seconds of idle time, it should commit.  If you have a period of 30 seconds where each idle time never gets to 10 seconds, go ahead and commit.  That would be harder to code, but the end result would be better.\n\nIf this issue does get fixed, when I get around to making a 'huge tlog' wiki page, I can include some advice about using maxDocs and/or maxTime in addition to idleTime. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15544180",
            "date": "2016-10-04T03:05:08+0000",
            "content": "We now have Soft and Hard commits based on time, document count, and commitWithin parameters. \n\nIs there still a sufficient use case for this particular one? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-15544193",
            "date": "2016-10-04T03:12:55+0000",
            "content": "I don't see a good use-case here. I suppose you could have something like \"I want to index fast and furiously and then commit once when the pace slackens\". \n\nBut the hard commit with openSearcher=false seems to be much safer. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15557408",
            "date": "2016-10-08T06:56:23+0000",
            "content": "Other commit modes should be sufficient. Additionally, the commit properties could be changed via Config API to affect the Commit settings after indexing (though core will reload at that).\n\nIf there is a particular business need that cannot be addressed by other means, an issue can be reopened or a new one created. "
        }
    ]
}