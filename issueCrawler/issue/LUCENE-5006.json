{
    "id": "LUCENE-5006",
    "title": "Simplify / understand IndexWriter/DocumentsWriter synchronization",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The concurrency in IW/DW/BD is terrifying: there are many locks involved, not just intrinsic locks but IW also has fullFlushLock, commitLock, and there are no clear rules about lock order to avoid deadlocks like LUCENE-5002.\n\nWe have to somehow simplify this, and define the allowed concurrent behavior eg when an app calls deleteAll while other threads are indexing.",
    "attachments": {
        "LUCENE-5006.patch": "https://issues.apache.org/jira/secure/attachment/12587882/LUCENE-5006.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-14T20:18:41+0000",
            "content": "here is a first/rough cut with some nocommits but it shows the idea. This patch removes all dependencies to DocumentsWriter and IndexWriter from DWPT. I factored everything out and made DWPT basically a non-reuseable class. It initializes itself entirely in the ctor including the segment name etc. \n\nAt the same time DWPTThreadPool doesn't initialize DWPT anymore it only handles ThreadStates and pooling and the actual DWPT creation is done on the ThreadPools consumer level. This makes the pool much simpler as well. \n\nDocumentsWriter doesn't communicate with the IW directly. It only creates certain events that will be processed by the IW once the DW action is done. This works since all the Events are kind of atomic operations which can be executed once we exit DW. For instance if we flush a segment the DW doesn't push it up to the IW but once DW returns IW proceses the event an pulls the new flushed segment in. The same is true for pending merges etc.\n\nThis simplifies the locking a lot here since we basically can't deadlock anymore from DW or DWPT since we don't even have a reference to IW anymore. The only remaining thing is when we create a new DWPT we need to call into IW to get a new seg. name but it's a start. ",
            "author": "Simon Willnauer",
            "id": "comment-13683734"
        },
        {
            "date": "2013-06-15T11:56:53+0000",
            "content": "Thanks Simon.\n\nIt looks like most of the changes are 1) the new Events system for DW\nto communicate back to IW when something needs to happen (flush,\napplyDeletes, etc.) so that DW never needs to call back into a sync'd\nIW method, and 2) passing IW as an argument to various methods instead\nof holding it as a member in DW?  (Well and also adding IW as a member\nin DocumentsWriterFlushControl).\n\nWhy does applyAllDeletes need a new boolean forced param?\n\nLooks like BytesRefHash has accidental new int[] hashes?\n\nWhat is flagForcePurge for?  Can it somehow be passed as a param to\nthe ApplyDeletesEvent?\n\nMaybe rename \"boolean iwCheck\" to \"boolean iwHasEvents\" in\nDW.postUpdate?  This returned boolean means new Events were added for\nIW to process right?\n\nThere are some parts I don't quite understand, e.g. the changing logic\nfor when initializeThreadState or deactivateThreadState or\napplyAllDeletes are invoked...\n\nfinishFlush has too much indentation. ",
            "author": "Michael McCandless",
            "id": "comment-13684150"
        },
        {
            "date": "2013-06-19T08:24:44+0000",
            "content": "Here is a cleaned-up version of the patch.\n\nI removed the accidentally added (leftover) int[] from BytesRefHash that was indeed unintended.\n\nI also removed all the leftovers like forcePurge and applyDeletes flags they were still in there from a previous iteration without the Queue. I changed maybeMerge to hasEvents consistently.\n\nThe changes in DWPT and DWPTThreadPool are mainly due to the fact that I move the creation of DWPT into DW and out of the ThreadPool. The ThreadPool only maintains the ThreadState instances but is not responsible for creating the actual DWPT. DWPT is now not \"reuseable\" anymore, yet we never really reused them but if they were initialized and we did a full flush we kept using them with a new DeleteQueue which is gone now. This is nice since DWPT is now solely initialized in its Ctor. This includes the segment name which we obtain from IW when the DWPT is created. This remains the only place where we sync on IW which is done in updateDocument right now. \n\nI think this patch is a step into the right direction making this simpler, at the end of the day I'd want to change the lifetime of a DW to be a single flush and replace the entire DW once we flush or reopen. This would make a lot of logic much simpler but I don't want to make this big change at once so maybe we should work to get the current patch into trunk and let it bake in a bit. ",
            "author": "Simon Willnauer",
            "id": "comment-13687763"
        },
        {
            "date": "2013-06-19T17:04:15+0000",
            "content": "+1, thanks Simon! ",
            "author": "Michael McCandless",
            "id": "comment-13688159"
        },
        {
            "date": "2013-06-21T12:12:29+0000",
            "content": "mike since I am going on vacation and I am not very keen to watch our builds failing with sneaky concurrency problems I created a branch CI build from my github repo to stress this a bit while I am on vacation... http://builds.flonkings.com/job/DWPT_Refactoring/ one I come back I can get this in... I think this makes most sense. ",
            "author": "Simon Willnauer",
            "id": "comment-13690215"
        },
        {
            "date": "2013-08-14T17:38:55+0000",
            "content": "Here is an updated version of the patch that was running CI builds for over a month without a failure here I think we are ready to commit this here.  ",
            "author": "Simon Willnauer",
            "id": "comment-13739927"
        },
        {
            "date": "2013-08-19T15:06:12+0000",
            "content": "Commit 1515459 from Simon Willnauer in branch 'dev/trunk'\n[ https://svn.apache.org/r1515459 ]\n\nLUCENE-5006: Simplified DW and DWPT synchronization and concurrent interaction with IW ",
            "author": "ASF subversion and git services",
            "id": "comment-13743883"
        },
        {
            "date": "2013-08-19T15:20:11+0000",
            "content": "Commit 1515463 from Simon Willnauer in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1515463 ]\n\nLUCENE-5006: Simplified DW and DWPT synchronization and concurrent interaction with IW ",
            "author": "ASF subversion and git services",
            "id": "comment-13743891"
        }
    ]
}