{
    "id": "LUCENE-6596",
    "title": "Make width of unordered near spans consistent with ordered",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.0",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Use actual slop for width in NearSpansUnordered.",
    "attachments": {
        "LUCENE-6596.patch": "https://issues.apache.org/jira/secure/attachment/12740870/LUCENE-6596.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14594726",
            "author": "Paul Elschot",
            "date": "2015-06-20T18:27:32+0000",
            "content": "Patch of 20 June 2015. Fixes NearSpansUnordered, adds test cases in TestNearSpansOrdered to verify that both ordered and unordered give the same width in some easy cases, and has a small correction in Spans.width javadocs. "
        },
        {
            "id": "comment-14595555",
            "author": "Adrien Grand",
            "date": "2015-06-22T09:11:49+0000",
            "content": "Thanks for the javadocs correction.\n\n+1 on making them more consistent, it also looks better to use the same formula to compute whether there is a match and the score.\n\nOne thing I'm wondering about is if we should go even further and sum up the widths of the holes in-between consecutive spans? For instance, if I understand correctly, a SpanNearQuery over A, B, C in the following configuration would be considered a perfect match because of its total span length, even though it has holes:\n\n\n\n\nSub span query\nstart pos\nend pos\n\n\nA\n0\n1\n\n\nB\n10\n20\n\n\nC\n11\n21\n\n\n\n "
        },
        {
            "id": "comment-14595560",
            "author": "Robert Muir",
            "date": "2015-06-22T09:16:16+0000",
            "content": "I do not think we should try to change the scoring by making it more fancy or complicated here. Instead it would be better to keep it simple and try to improve the performance of the spans without additional baggage. "
        },
        {
            "id": "comment-14595782",
            "author": "Paul Elschot",
            "date": "2015-06-22T11:13:18+0000",
            "content": "We could go further to account for nested holes.\nBut for that I would rather have a float method like fuzzyFreq on Spans,\nand that brings more complications on how to score the nested spans.\n\nSo for now I prefer to keep it simple, but consistent. "
        },
        {
            "id": "comment-15090562",
            "author": "Paul Elschot",
            "date": "2016-01-09T11:22:08+0000",
            "content": "Patch of 9 Jan 2016.\n\nUpdated to trunk. "
        },
        {
            "id": "comment-16134542",
            "author": "Paul Elschot",
            "date": "2017-08-20T19:06:34+0000",
            "content": "Closing, not enough interest. "
        }
    ]
}