{
    "id": "SOLR-1123",
    "title": "Change the JSONResponseWriter content type",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently the jSON content type is not used. Instead the palin/text content type is used. The reason for this as I understand is to enable viewing the json response as as text in the browser. While this is valid argument, I do believe that there should at least be an option to configure this writer to use the JSON content type. According to RFC4627 the json content type needs to be application/json (and not text/x-json). The reason this can be very helpful is that today you have plugins for browsers (e.g. JSONView) that can render any page with application/json content type in a user friendly manner (just like xml is supported).",
    "attachments": {
        "JSON_contentType_incl_tests.patch": "https://issues.apache.org/jira/secure/attachment/12406134/JSON_contentType_incl_tests.patch",
        "SOLR-1123.patch": "https://issues.apache.org/jira/secure/attachment/12497422/SOLR-1123.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uri Boness",
            "id": "comment-12701513",
            "date": "2009-04-22T12:45:32+0000",
            "content": "This patch is a simple implementation for this functionality. The writer can be configured with a userJsonContentType boolean parameter that when set to true the content type for the output will be \"application/json\" instead of \"text/plain\". For backward compatibility reasons, when this parameter is absent, the \"text/plain\" content type will be used. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12711066",
            "date": "2009-05-20T08:49:48+0000",
            "content": "Marking for 1.5\n\nI'm -0 on this. I'm not sure if this inconvenience is big enough to warrant adding a request parameter. I'll let others decide this one. "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12711075",
            "date": "2009-05-20T09:16:11+0000",
            "content": "Indeed this is just for convenience and should not be in a high priority, but I definitely see it as a nice to have one. Just to clarify, the suggestion is not to have another request parameter (that would probably be too much as you mentioned) but instead add a configuration parameter in solrconfig. So you'll be able to define the json response writer as follows:\n\n\n<queryResponseWriter name=\"json\" class=\"org.apache.solr.request.JSONResponseWriter\">\n    <bool name=\"useJsonContentType\">true</bool>\n</queryResponseWriter>\n\n  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12711122",
            "date": "2009-05-20T12:37:44+0000",
            "content": "Is there perhaps a more general feature we could turn this into?  An expert level ability or parameter to set a custom content-type? "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12711133",
            "date": "2009-05-20T13:09:59+0000",
            "content": "I think that would be the best option. The problem right now is in the current class hierarchy of the response writers. Basically, I think the QueryResponseWriter interface should change to:\n\n\npublic interface QueryResponseWriter extends NamedListInitializedPlugin {\n \n  public void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse response) throws IOException;\n\n  public String getContentType(SolrQueryRequest request, SolrQueryResponse response);\n\n}\n\n\n\nNote: this interface will play nicer with the binary response writer\n\nThen we can have an AbstractTextResponseWriter which will serve as a parent for all non-binary response writers:\n\n\npublic abstract class AbstractTextResponseWriter extends NamedListInitializedPlugin {\n\n  public final static String CONTENT_TYPE_PARAM = \"contentType\";\n  public static String DEFAULT_CONTENT_TYPE=\"text/plain; charset=UTF-8\";\n  \n  private final String contentType;\n  \n  protected AbstractTextResponseWriter() {\n    this(DEFAULT_CONTENT_TYPE);\n  }\n\n  protected AbstractTextResponseWriter(String defaultContentType) {\n    this.contentType = defaultContentType;\n  }\n\n  public void init(NamedList args) {\n    String configuredContentType = (String) args.get(CONTENT_TYPE_PARAM);\n    if (configuredContentType != null) {\n      contentType = configuredContentType;;\n    }\n  }\n\n  public String getContentType(SolrQueryRequest request, SolrQueryResponse response) {\n    return contentType;\n  }\n \n  public final void write(OutputStream out, SolrQueryRequest request, SolrQueryResponse response) throws IOException {\n    OutputStreamWriter writer = new OutputStreamWriter(out, \"UTF-8\");\n    write(writer, request, response);\n  }\n\n  protected abstract void write(Writer writer, SolrQueryRequest request, SolrQueryResponse response) throws IOException;\n\n}\n\n\n\nThis will make it easy for every response writer to define its default content type, yet it will still allow to override this default using the \"contentType\" parameter in solrconfig. (I assume here that there's no need to customize the content type for the binary response writer as it's internal and specific for the current implementation). "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12711136",
            "date": "2009-05-20T13:16:33+0000",
            "content": "Or we could just add a request parameter and SolrDispatchFilter can set the value of the param as the content type. "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12711145",
            "date": "2009-05-20T13:55:57+0000",
            "content": "Yeah, that's also an option. The only drawbacks like we mentioned above is that you'll need to add yet another request parameter. And I also thought it was a good opportunity to \"fix\"/\"clean\" the class hierarchy of the response writer. But indeed this is a quicker fix to the problem. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789912",
            "date": "2009-12-13T16:38:14+0000",
            "content": "Should we make responsewriters use the GenericTextResponseWriter SOLR-1516? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12789915",
            "date": "2009-12-13T17:06:05+0000",
            "content": "I never got a chance to check out SOLR-1516, but my understanding was that it was a response writer that made it easy for custom response writers to inherit from?  I'm not sure we should introduce that as a dependency for the standard response writers. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789916",
            "date": "2009-12-13T17:09:35+0000",
            "content": "SOLR-1516 has the potential to simplify our existing responsewriters .  "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12789922",
            "date": "2009-12-13T18:21:34+0000",
            "content": "I think the main issue with the inheritance right now is that the QueryResponseWriter interface is dealing with a Writer rather than with an OutputStream. This accounts for the hacky GenericBinaryResponseWriter. \n\nLooking at SOLR-1516 I'm a bit confused. I always had the impression that the main idea behind the response writers is that all they need to know is how to marshal a NamedList (so they don't need explicit knowledge of documents, highlighting, etc...). But now the GenericTextResponseWriter knows about documents (via the SingleResponseWriter). But perhaps I just go it wrong. "
        },
        {
            "author": "Chris A. Mattmann",
            "id": "comment-12789923",
            "date": "2009-12-13T18:32:24+0000",
            "content": "\nI think the main issue with the inheritance right now is that the QueryResponseWriter interface is dealing with a Writer rather than with an OutputStream. This accounts for the hacky GenericBinaryResponseWriter. \n\nI'm taking a look at this.\n\n\nLooking at SOLR-1516 I'm a bit confused. I always had the impression that the main idea behind the response writers is that all they need to know is how to marshal a NamedList (so they don't need explicit knowledge of documents, highlighting, etc...). But now the GenericTextResponseWriter knows about documents (via the SingleResponseWriter). But perhaps I just go it wrong.\n\nWell if that's the main idea behind ResponseWriters as you put it, then as I put it in SOLR-1516, it's pretty confusing. Users (who understand Lucene and SOLR) know that if they query they get back o.a.lucene.Documents or o.a.solr.SolrDocumentList, etc. The whole NamedList structure is pretty confusing to me (and to others as I've noted on other issues and on the mailing list). SOLR-1516 was an attempt to give those people writing ResponseWriters (now) the ability to deal with results of queries, aka Documents (and not all the other NamedList typeless bag of objects where you have to do instanceof everwhere to unmarshall it). Clearly not all ResponseWriters will be able to take advantage of this (e.g., those that need the specified output structures provided by other components, e.g., Facets, etc.), which is why my original patch called the two response writers I added Document*ResponseWriter b/c that's what they dealt with.\n\nCheers,\nChris "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789998",
            "date": "2009-12-14T06:01:56+0000",
            "content": "I always had the impression that the main idea behind the response writers is that all they need to know is how to marshal a NamedList ...\n\nThat is the problem. the NamedList is a weird datastructure for those who are not so used to Solr. You don't know what is included in that unless you do an instanceof. Most of the users are happy to write out the documents . understanding a SolrDocument is far easier than figuring outhow to handle a DocList .So it is an attempt to cater to those needs .  \n\nIf you know how to handle the NamedList beast then you can do that also ( but only if you wish to).  "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12793424",
            "date": "2009-12-21T23:49:47+0000",
            "content": "It should be possible to pass an arbitrary set of parameters to a ResponseWriter. I added this feature to XSLTResponseWriter in a patch; it made it possible to genericize XSL scripts.\n\nSOLR-1354\n\nSince 'tr' chooses the XSLT script, I made 'tr.param=x' pass 'param=x' into the XSL interpreter. 'tr.mime-type=application/json' would be used by the JSON interpreter.\n\nI did not have to change anything outside of XSLTResponseWriter. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12793466",
            "date": "2009-12-22T01:52:03+0000",
            "content": "Thinking about it again, 'wt' selects the writer, so parameters to the JSON writer should be 'wt.param=value'. 'tr' is the transformer script, and 'tr.param=value' should pass data through to the transformer code. So, to handle this problem I would use 'wt=json&wt.mime-type=application/json'. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872528",
            "date": "2010-05-27T22:07:13+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Lorrin Nelson",
            "id": "comment-12903015",
            "date": "2010-08-26T20:00:52+0000",
            "content": "I propose treating this as two issues:\n\nA short-term bug fix to properly return JSON data with the standard application/json ContentType\n\nA low-priority feature request to allow customizing the JSON writer to return non-standard ContentType "
        },
        {
            "author": "Chris Tucker",
            "id": "comment-12904275",
            "date": "2010-08-30T18:29:04+0000",
            "content": "I'd like to +1 the short-term fix.  The incorrect content type makes it difficult to filter/transform the response in a servlet filter or Jetty handler: one has to inspect the wt parameter on the request to establish (guess?) that JSON has been requested and is being sent back. "
        },
        {
            "author": "Ingo Renner",
            "id": "comment-13041308",
            "date": "2011-05-30T22:02:47+0000",
            "content": "+1 for the short term fix "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043755",
            "date": "2011-06-03T16:46:54+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Neil Hooey",
            "id": "comment-13099577",
            "date": "2011-09-07T21:38:43+0000",
            "content": "Can we revive this issue?\n\nDoes anyone have a patch for the short-term fix? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106417",
            "date": "2011-09-16T14:50:59+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Ralph",
            "id": "comment-13118874",
            "date": "2011-10-01T18:33:20+0000",
            "content": "I agree with Neil, can someone post about a solution.  I tried some of the options listed here and none seem to be active.\n\nThanks,\nRalph "
        },
        {
            "author": "Chris Male",
            "id": "comment-13118956",
            "date": "2011-10-02T03:56:12+0000",
            "content": "I had assumed this had been dealt with.  It seems we should just break backwards compat on trunk and change the JSONResponseWriter to return application/json.  Why continue to return text? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13118961",
            "date": "2011-10-02T04:40:52+0000",
            "content": "Why continue to return text?\n\nThis was discussed in a different issue (it has come up a number of times before).  At the time, returning application/json as the content-type would cause all of the major browsers to fail to display the JSON and some would prompt to download it and some would prompt to search for an application that could handle it.  Using \"text\" was much more user friendly.  Clients that are talking to solr and send \"wt=json\" or \"wt=xml\" know exactly what they are going to get back anyway. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13118962",
            "date": "2011-10-02T04:40:54+0000",
            "content": "Why continue to return text?\n\nThis was discussed in a different issue (it has come up a number of times before).  At the time, returning application/json as the content-type would cause all of the major browsers to fail to display the JSON and some would prompt to download it and some would prompt to search for an application that could handle it.  Using \"text\" was much more user friendly.  Clients that are talking to solr and send \"wt=json\" or \"wt=xml\" know exactly what they are going to get back anyway. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13118964",
            "date": "2011-10-02T05:00:35+0000",
            "content": "Okay, what about today when there are plenty of extensions for the major browsers to correctly display JSON?  Do we really need to support users do a manual Solr request through their browser and returning JSON? If they want that, they can use a text protocol like XML.  "
        },
        {
            "author": "Ryo Hideno",
            "id": "comment-13118965",
            "date": "2011-10-02T05:08:28+0000",
            "content": "+1 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13118966",
            "date": "2011-10-02T05:39:50+0000",
            "content": "Okay, what about today when there are plenty of extensions for the major browsers to correctly display JSON?\n\nRequiring the user to install an extension to display a response isn't that friendly either.\nWe should think about the number of users who would be inconvenienced (and in what manner) using one default vs the other.\nThe most flexible approach would allow the user to set the content-type, but the default should remain what gives the best user experience. "
        },
        {
            "author": "Chris Tucker",
            "id": "comment-13118972",
            "date": "2011-10-02T07:11:57+0000",
            "content": "Is there really such a large use case for users who don't have a JSON plugin installed but do need to view JSON results in the browser?  An XML response will almost certainly be rendered more readably for those users (in which case the JSON point is moot), and if the user does intend to view JSON frequently they simply install a JSON plugin: reading JSON as a big lump of text without the aid of a plugin is not a manageable solution for most people I know.  Intentionally returning a known-wrong content type to work around a client issue for casual users while causing a much bigger problem (thwarting well-behaved clients, JSON plugins, and filters) for users who actually need to work with this seems like a poor choice.  I'd argue the default should be changed to application/json immediately, and a separate (lower-priority) ticket raised to address allowing the user to override the content-type in the response if they so desire. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13118976",
            "date": "2011-10-02T07:22:00+0000",
            "content": "I agree with Chris wholeheartedly.  \n\nIt doesn't seem to be user-friendly to return a content-type that isn't inline with the RFC standard and I can't help but feel that the number of users who will be negatively impacted by this change will be small.  Those users can then either use XML or some other text format, or install a JSON plugin for their browser.\n\nThere's a reason this keeps coming up in discussion.\n\nChris, can you put together a patch which changes the content-type? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13119025",
            "date": "2011-10-02T15:42:37+0000",
            "content": "Is there really such a large use case for users who don't have a JSON plugin installed but do need to view JSON results in the browser?\n\nJSON has been all the rage for the past number of years - tons of people have been programmed to say \"yuck XML, yay JSON, YAML, etc\".\nIn my experience, very few people have JSON plugins installed, and the out-of-the-box experience will be horrible for those people (JSON is even used in our beginner tutorial). "
        },
        {
            "author": "Chris Tucker",
            "id": "comment-13119092",
            "date": "2011-10-02T22:20:29+0000",
            "content": "JSON is certainly popular, and I agree that many users have a visceral reaction against XML.  However, we're talking here about maintaining current behavior to support one very specific set of users: those who (1) are not committed enough to JSON to know how to view it (a plugin, Firebug, or what have you, which they will need for every other case where they get JSON from any other service out there) but (2) are committed enough to it to not be able/willing to use the (arguably much better) XML visualization tools built into every browser.  This just seems like a very small population of users.  Meanwhile, the current behavior thwarts many serious users who do want to use a JSON plugin, makes it impossible to write content-type aware servlet filters (which was my use case way back when), and violates the expectation that a response will have the RFC defined content type associated with it.  IMHO the cost vastly outweighs the benefit here: if need be, put a note on the wiki in the tutorial where JSON is mentioned (which, as far as I can tell, is simply to say \"hey, you can get the results in JSON, too!\") pointing people to a browser plugin and be done with it. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13119098",
            "date": "2011-10-02T22:58:54+0000",
            "content": "+1 to change the content type to the official one. I was about to do this together with another ResponseWriter change once ago... the wrong type is a problem for all users actually using browsers with plugins. If Solr would send xml without application/xml I would complain, too, as e.g. Internet Explorer has the best xml viewer on earth (sorry, FF and Chrome have broken namespace prefix support). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13119099",
            "date": "2011-10-02T23:20:26+0000",
            "content": "The downside for the small minority of users likely to have a browser JSON plugin installed is that they will still see a text JSON response.  This is a much more graceful fallback, and we can add an optional parameter to change the content-type.  It seems pretty clear to me that the default content-type should remain as is for the best user experience for the majority of new users.  I originally coded the content-type as something with x-json in it (Solr's JSON support pre-dates the RFC), but sending a query to solr and being prompted to download the reply or search the internet for a plugin is horrible and will definitely turn people off.\n\nAnd don't get me started on the overreaching JSON RFC wrt specifying encodings. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13119102",
            "date": "2011-10-02T23:36:25+0000",
            "content": "Personally i'm a fan of the proposal that was earlier suggested to rethink the response writer API so we can add a generalized SolrParam for overriding the default Content-Type of any response writer, and then letting the example specify \"text/plain\" as a default to make the tutorial easy to read.\n\nbut independent of that (since it's a much bigger issue), why don't we move forward by:\n\n\n\tchanging the default mime type for the writer to be \"application/json\"\n\tadd an init param on the writer to override the mime type used (much like the patch does, but i'm not a fan of the proposed param name nor of making it a simple boolean)\n\tupdate the example solrconfig.xml to explicitly use this init param to set the type to \"text/plain\" with a comment like so...\n\n\n\n\n<queryResponseWriter name=\"json\" class=\"solr.JSONResponseWriter\">\n  <!-- For the purposes of the tutorial, JSON response are written as \n       plain text so that it's easy to read in *any* browser.  \n       If you are building applications that consume JSON, just remove\n       this override to get the default \"application/json\" mime type.\n    -->\n  <str name=\"content.type\">text/plain</str>\n</queryResponseWriter>\n\n\n\n...which seems like a good compromise all the way around:  The default mime type of the writer starts matching the expectations of advanced users, the example configs make the tutorial output easy to read for novices in any browser, and there is clear indication in those example configs how people can change the content type used (crazy people can even use \"text/json-x\" if they really want to)\n\nobjections? \n\n(If/when we adding a more general request time mime type over ride param, this init param can still be used as a fallback, so it doesn't really paint us into a corner or anything) "
        },
        {
            "author": "Chris Tucker",
            "id": "comment-13119107",
            "date": "2011-10-03T00:04:45+0000",
            "content": "Sounds awesome. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13119135",
            "date": "2011-10-03T04:31:06+0000",
            "content": "Patch which implements what Hossman has suggested.  I've verified that the content-type changes based on the configured parameter. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13119220",
            "date": "2011-10-03T09:48:22+0000",
            "content": "+1 "
        },
        {
            "author": "Chris Male",
            "id": "comment-13120715",
            "date": "2011-10-05T06:47:12+0000",
            "content": "As there doesn't seem to be any objections, I plan to commit this shortly. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13120940",
            "date": "2011-10-05T13:20:35+0000",
            "content": "Since this is literally the Content-Type header, should we use a parameter name like \"content-type\" or \"Content-Type\" rather than content.type?  Or are there other content.foo params that would make scoping them all under \"content.\" make more sense? \n\n\n+      If you are building applications that consume JSON, just remove\n+      this override to get the default \"application/json\" mime type.\n\n\n\nThis part makes it sound like you need to remove it... but most programmatic clients won't care (or will actually work better with text since the charset is defined).  Let's change that part to something like:\n\n\nIf your browser or application expects a MIME type of \"application/json\",\njust remove this override.\n\n "
        },
        {
            "author": "Chris Male",
            "id": "comment-13120955",
            "date": "2011-10-05T13:29:00+0000",
            "content": "\nSince this is literally the Content-Type header, should we use a parameter name like \"content-type\" or \"Content-Type\" rather than content.type? Or are there other content.foo params that would make scoping them all under \"content.\" make more sense?\n\nYup 'content-type' makes the most sense.\n\nThis part makes it sound like you need to remove it... but most programmatic clients won't care (or will actually work better with text since the charset is defined).\n\nThe reason this issue keeps getting brought up is that clients do care.  But I will make the change you suggest since it does make it clearer. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13126637",
            "date": "2011-10-13T14:49:57+0000",
            "content": "New patch changing the parameter name and improving the documentation. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13152316",
            "date": "2011-11-17T20:56:05+0000",
            "content": "Chris: any reason not to commit and get this into 3.5? "
        },
        {
            "author": "Chris Male",
            "id": "comment-13152567",
            "date": "2011-11-18T01:26:22+0000",
            "content": "Hey Hoss,\n\nI haven't had a chance to commit it to trunk yet either (it fell between the cracks), I'll commit it to both today. "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13152734",
            "date": "2011-11-18T09:10:46+0000",
            "content": "+1 I will roll a release candidate on monday.... I didn't finish it this week "
        },
        {
            "author": "Chris Male",
            "id": "comment-13153955",
            "date": "2011-11-21T02:51:25+0000",
            "content": "Committed to trunk in revision 1204327. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13153958",
            "date": "2011-11-21T02:59:31+0000",
            "content": "Committed to 3x in revision 1204329. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13153959",
            "date": "2011-11-21T02:59:49+0000",
            "content": "Fixed. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13153962",
            "date": "2011-11-21T03:08:49+0000",
            "content": "FWIW: we should probably add Uri to changes as well, as he filed the issue. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13153963",
            "date": "2011-11-21T03:18:14+0000",
            "content": "Good call Mark, done in both trunk and 3x. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157859",
            "date": "2011-11-27T12:36:06+0000",
            "content": "Bulk close after 3.5 is released "
        }
    ]
}