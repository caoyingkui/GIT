{
    "id": "LUCENE-533",
    "title": "SpanQuery scoring: SpanWeight lacks a recursive traversal of the query tree",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I found the computing of weights to be somewhat different according to the query type (BooleanQuery versus SpanQuery) :\n\norg.apache.lucene.search.BooleanQuery.BooleanWeight :\n\npublic BooleanWeight(Searcher searcher)\n     throws IOException {\n     this.similarity = getSimilarity(searcher);\n     for (int i = 0 ; i < clauses.size(); i++) \n{\n       BooleanClause c = (BooleanClause)clauses.elementAt(i);\n       weights.add(c.getQuery().createWeight(searcher));\n     }\n   }\n\nwhich looks like a recursive descent through the tree, taking into account the weights of all the nodes, whereas :\n\norg.apache.lucene.search.spans.SpanWeight :\n\npublic SpanWeight(SpanQuery query, Searcher searcher)\n   throws IOException \n{\n   this.similarity = query.getSimilarity(searcher);\n   this.query = query;\n   this.terms = query.getTerms();\n\n   idf = this.query.getSimilarity(searcher).idf(terms, searcher);\n }\n\nlacks any traversal and according to what I have understood so far from the rest\nof the code, only takes into account the boost of the tree root in SumOfSquareWeights(),\nwhich is consistent with the resulting scores not considering the boost of the tree\nleaves.\n\nvintz",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-01-04T14:55:43+0000",
            "content": "Hoping we can get this one worked out Vincent. It is odd that the boost are ignored, and certainly seems incorrect to me.\n\nI worked on a fix a few months ago, but unfortunately, things complicated fairly quickly, and I think you end up needing something similar to what BooleanQuery does to compute the tree boosts, which adds a lot of complication and could be a lot of performance loss (Span queries are already generally slower than standard queries).\n\nHope to get this resolved at some point in the future though, just not as simple as I would have hoped. Possibly why it was punted on to begin with. ",
            "author": "Mark Miller",
            "id": "comment-12660579"
        },
        {
            "date": "2009-08-11T07:12:11+0000",
            "content": "One problem here is that the Spans interface does not have a property for a weight value.\n\nSo one way to start this could be to deprecate Spans and to define something like this:\n\npublic abstract class WeightedSpans implements Spans {\n  ... abstract methods as in Spans interface;\n\n  public float getValue()\n  // implement getValue here to allow WeightedSpans to replace Spans everywhere\n  { return 1.0; }\n}\n\n\n ",
            "author": "Paul Elschot",
            "id": "comment-12741730"
        },
        {
            "date": "2009-08-11T20:28:49+0000",
            "content": "Paul:\n\nSpans is breaking back compat in this release. This is the opportunity to change anything.\n\nDo you think we should add something like this? Do you think it might make sense to make Spans abstract?\n\nIts an interface thats gaining methods this release, so back compat is gone anyway (Spans back compat was lost in the last release, and we are correcting things to a degree in 2.9). If we can help pave the way for the future in a reasonably small amount of time - this is likely the best opportunity. ",
            "author": "Mark Miller",
            "id": "comment-12742045"
        },
        {
            "date": "2009-08-12T07:24:51+0000",
            "content": "I see I missed the introduction of payloads into Spans. As back compat is broken anyway, one might as well get rid of the Spans interface completely and make Spans an abstract class.\nSince it is only the interface that is in the way of changes, any way to get rid of the Spans as an interface is ok with me.\n\nPayloads can be yet another way to introduce a (term/spans) weight, so one might subclass these from WeightedSpans:\nSpans -> WeightedSpans -> PayloadSpans.\nThat would also allow to use WeightedSpans inside an object hierarchy for scoring nested span queries, and to use PayloadSpans as a leafs.\n\nScoring nested span queries is not trivial, and allowing a weight on each spans does not make it simpler, but at least it would allow span queries to behave more like boolean queries. ",
            "author": "Paul Elschot",
            "id": "comment-12742249"
        },
        {
            "date": "2013-04-13T21:16:58+0000",
            "content": "SPRING_CLEANING_2013 JIRAS. Spans is an abstract class, suspect this is already done. ",
            "author": "Erick Erickson",
            "id": "comment-13631170"
        },
        {
            "date": "2015-02-04T19:39:08+0000",
            "content": "Re-opening; this is definitely not done. ",
            "author": "David Smiley",
            "id": "comment-14305815"
        },
        {
            "date": "2016-07-13T04:33:59+0000",
            "content": "I believe this is finally no longer an issue so I'm closing it.  Perhaps LUCENE-2880 (in Lucene 5.3) was the one to resolve it, or if not then I'm pretty sure some issue in the 5x series.  createWeight() impls do a tree traversal, and they are also weighted by a customizable boost factor \u2013 SpanBoostQuery. ",
            "author": "David Smiley",
            "id": "comment-15374322"
        }
    ]
}