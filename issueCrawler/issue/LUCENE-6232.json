{
    "id": "LUCENE-6232",
    "title": "Replace ValueSource context Map with a more concrete data type",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "Inspired by LUCENE-3973\n\nThe context object used by ValueSource and friends is a raw Map that provides no type safety guarantees. In our current state, there are lots of warnings about unchecked casts, raw types, and generally unsafe code from the compiler's perspective.\n\nThere are several common patterns and types of Objects that we store in the context. It would be beneficial to instead use a class with typed methods for get/set of Scorer, Weights, etc.",
    "attachments": {
        "LUCENE-6232.patch": "https://issues.apache.org/jira/secure/attachment/12698547/LUCENE-6232.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14313470",
            "author": "Mike Drob",
            "date": "2015-02-10T03:27:47+0000",
            "content": "What are our guarantees about backwards compatability? This would touch a lot of code across both Solr and Lucene.\n\nDo we need to leave the existing methods, and add deprecation annotations? When can we excise them? "
        },
        {
            "id": "comment-14313691",
            "author": "Ryan Ernst",
            "date": "2015-02-10T06:48:33+0000",
            "content": "Mike Drob See LUCENE-5335 for some previous work here.  IIRC, most of the warnings here were because of the raw map, which that issue tried to address by changing it to a String->Object map.  The content of the map is pretty arbitrary. "
        },
        {
            "id": "comment-14314242",
            "author": "Terry Smith",
            "date": "2015-02-10T14:37:05+0000",
            "content": "I have custom code that injects objects into this map. If you refactor this to be concrete class could you leave it non-final so a custom FunctionQuery could provide it's own subclassed instance of this context? "
        },
        {
            "id": "comment-14314468",
            "author": "Mike Drob",
            "date": "2015-02-10T17:01:42+0000",
            "content": "Ryan Ernst - I saw that JIRA, but like the comments said I don't think it solves all the problems. That's maybe a good start, but we need a much more serious refactoring so I thought maybe a separate issue would be more appropriate. "
        },
        {
            "id": "comment-14314471",
            "author": "Mike Drob",
            "date": "2015-02-10T17:04:57+0000",
            "content": "Terry Smith - Leaving it non-final is probably fine. There is also the possibility of leaving some map-like methods on the class (i.e. put(K,V) and get(K) with explicit documentation that they are not safe. "
        },
        {
            "id": "comment-14314555",
            "author": "Terry Smith",
            "date": "2015-02-10T18:08:55+0000",
            "content": "Mike Drob Thanks, either would work. "
        },
        {
            "id": "comment-14319101",
            "author": "Mike Drob",
            "date": "2015-02-12T22:12:34+0000",
            "content": "Attaching a patch that doesn't clean up all of the raw type warnings, but certainly gets a lot of them with a new class ValueSourceContext\n\nCollapseScore stuff in here would introduce a circular dependency, so maybe that gets subclassed.\n\nBy my count there are still 7 calls left to put(), so it's at least a manageable number. At this point we might be able to add docs that say this is obviously unsafe, and supress the warnings if we can't think of anything better. "
        },
        {
            "id": "comment-14320117",
            "author": "Mike Drob",
            "date": "2015-02-13T14:15:43+0000",
            "content": "New patch, updated to the current trunk. Previous one had some issues with import statements and was missing a map initialization. "
        },
        {
            "id": "comment-14320626",
            "author": "Yonik Seeley",
            "date": "2015-02-13T19:35:19+0000",
            "content": "Here's the one I came up with in Heliosearch:\nhttps://github.com/Heliosearch/heliosearch/blob/b7fa35c519d9facc3860dd78d28797542422080b/solr/core/src/java/org/apache/solr/search/QueryContext.java\n\nIt's called QueryContext since it seemed it could be more generic than just for value sources.\n\nIf we switch from IdentityHashMap (which is currently used) to HashMap, it might be good to make sure any heavy-weight equals implementations check for other==this.\n\nRegarding the current patch on this issue, \nhttps://github.com/Heliosearch/heliosearch/blob/b7fa35c519d9facc3860dd78d28797542422080b/solr/core/src/java/org/apache/solr/search/QueryContext.java\n+  public Map<String,FunctionValues> getValuesCache() {\n\nThat seems rather specific to a particular kind of value source and probably doesn't belong at this level? "
        },
        {
            "id": "comment-14320667",
            "author": "Mike Drob",
            "date": "2015-02-13T19:58:30+0000",
            "content": "It's called QueryContext since it seemed it could be more generic than just for value sources.\nNaming things is one of Computer Science's greatest unsolved problems. I initially called mine QueryContext but decided it might be too broad. No objections to changing it back.\n\nIf we switch from IdentityHashMap (which is currently used) to HashMap, it might be good to make sure any heavy-weight equals implementations check for other==this.\nThis is a good idea regardless.\n\nThat seems rather specific to a particular kind of value source and probably doesn't belong at this level?\nYes, this is only used in one place. Easy enough to remove, but then we will have more usage of the unsafe put(). I have toyed around with creating subclasses for the context that can safely store a CollapseScore or other common patterns, but have yet t ocome up with something satisfactory. Maybe we just put this off for now.\n\nHere's the one I came up with in Heliosearch\nI'm glad it looks like we went down similar paths. I'll borrow some ideas from here and put up a new patch. "
        },
        {
            "id": "comment-14320696",
            "author": "Mike Drob",
            "date": "2015-02-13T20:25:43+0000",
            "content": "Patch incorporating Yonik's feedback. "
        },
        {
            "id": "comment-14327925",
            "author": "Mike Drob",
            "date": "2015-02-19T18:36:54+0000",
            "content": "Ping. Has anybody had a chance to look at the latest patch? Thanks! "
        },
        {
            "id": "comment-14384436",
            "author": "Mike Drob",
            "date": "2015-03-27T19:19:28+0000",
            "content": "Yonik Seeley - since you're backporting a bunch of other HelioSearch features already, do you think this will make it in transitively as well? "
        }
    ]
}