{
    "id": "SOLR-12922",
    "title": "Facet parser plugin for json.facet aka custom facet types",
    "details": {
        "type": "New Feature",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [
            "Facet Module"
        ],
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "Why don't introduce a plugin for json facet parsers? Attaching draft patch, it just demonstrate the thing. Test fails, iirc. Opinions?",
    "attachments": {
        "SOLR-12922.patch": "https://issues.apache.org/jira/secure/attachment/12945553/SOLR-12922.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16664234",
            "content": "This is interesting. Could the behavior of the proof-of-concept FuncRangeFacetParser be achieved with stock range faceting? Regardless, it's a good\u00a0proof-of-concept; but curiosity has me wondering about\u00a0additional use cases that might help\u00a0illustrate some of the potential uses/implications of the proposed plugin extension.\n\nAlso, I just uploaded a slightly modified patch with passing test. ",
            "author": "Michael Gibney",
            "date": "2018-10-25T20:01:42+0000"
        },
        {
            "id": "comment-16664236",
            "content": "Could a comment be posted to explain what this means?  It's not apparent from the title & description.  Query parsers produce a Lucene Query.  What would documents would the Query match here pertaining to faceting? ",
            "author": "David Smiley",
            "date": "2018-10-25T20:04:17+0000"
        },
        {
            "id": "comment-16664713",
            "content": "David Smiley, facet parser handles facet types. This plugin, let users to introduce own facet types.\nMichael Gibney, range faceting, that test parser mimics what's discussed in jiras regarding range facets over values. Potential use cases are just wide variety or user specific facet handling logic. I suppose there are more people who can implement own facet handling rather than those who can build patched Solr.     ",
            "author": "Mikhail Khludnev",
            "date": "2018-10-26T06:19:48+0000"
        },
        {
            "id": "comment-16665299",
            "content": "\u00a0\"more people who can implement own facet handling rather than those who can build patched Solr\" \u2013 indeed!\n\n\"wide variety or user specific facet handling logic\" \u2013 sure, but I guess was just curious about more specific use cases. Not necessary, but helpful to avoid requiring everyone to do their own imagining of use cases.\n\nI guess I can also weigh in\u00a0on use cases here\u00a0... this issue piqued my interest because I was interested in the ability to dynamically vary the configuration of subfacets based on attributes of the parent bucket. A concrete example would be:\n\njson.facet={\n  subject_level_0: {\n    type: terms,\n    field: subject_f,\n    facet: {\n      subject_level_1: {\n        type: terms,\n        prefix: $parent,\n        field: subject_f,\n        limit: 5\n      }\n    }\n  }\n}\n\n\nNote that \"$parent\" for the \"prefix\" attribute of the subfacet is not\u00a0supported syntax, but is intended to denote the value of the term in the parent bucket. The idea is to support hierarchical browsing over fields whose values are hierarchical in nature (e.g., \"United States\", \"United States \u2013 History\", \"United States \u2013 History \u2013 1783-1815\", etc.).\n\nSo \"$parent\" is not supported syntax, but this plugin architecture\u00a0would make it possible to create a subclass of\u00a0FacetFieldParser whose parse() method would return a subclass of FacetField whose createFacetProcessor(FacetContext fcontext) method could parse the parent bucket value out of the FacetContext.filter and return a FacetProcessor with a\u00a0contextually-determined prefix ... or something like that.\n\nMore generally though, I could imagine wanting to do other types of dynamic (parameterized and/or contextual) facet configuration, some to support very\u00a0specialized\u00a0use cases, that would be much more straightforwardly and sustainably implemented with this type of plugin architecture. ",
            "author": "Michael Gibney",
            "date": "2018-10-26T15:30:35+0000"
        }
    ]
}