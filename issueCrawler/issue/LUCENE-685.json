{
    "id": "LUCENE-685",
    "title": "Extract interface from IndexWriter",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "org.apache.lucene.index.IndexWriter should probably implement an interface to allow us to more easily write unit tests that use it.  As it stands, it's a complex class that's hard to stub/mock.\n\nFor example, an interface which had methods such as addDocument(), close() and optimize().",
    "attachments": {
        "InterfaceIndexWriter.java": "https://issues.apache.org/jira/secure/attachment/12342998/InterfaceIndexWriter.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-10-16T13:05:34+0000",
            "content": "This is the interface I let IndexWriter implement in http://issues.apache.org/jira/browse/LUCENE-550 in order to subclass my own non-Directory index. Perhaps a start? ",
            "author": "Karl Wettin",
            "id": "comment-12442592"
        },
        {
            "date": "2008-01-12T23:22:18+0000",
            "content": "Interfaces are hard to maintain from an API perspective and we have generally concluded that we should avoid them given Lucene's backward-compatibility requirements. ",
            "author": "Grant Ingersoll",
            "id": "comment-12558313"
        },
        {
            "date": "2008-01-12T23:31:02+0000",
            "content": "Interfaces in APIs are hard to manintain...  you are kidding, right?  Take a look at every well-written Java API out there, they all make heavy use of interfaces, because it makes API maintenance easier.\n\nNever mind.  Now that Spring has a Lucene API wrapper, I can use that to get a usable API. ",
            "author": "Kenny MacLeod",
            "id": "comment-12558315"
        },
        {
            "date": "2008-01-13T13:36:53+0000",
            "content": "Well, they are hard to maintain when you want to go add a new method and you end up breaking 500 users who then flood the list b/c their implementations are broken because of interface changes.  So, in general, we favor abstract classes.  If Lucene had a different policy on back-compatibility, then this could change.  \n\nAt any rate, this issue is not for that discussion.  I'd be happy to visit it on java-dev, as I actually think it is an area Lucene could be better about. ",
            "author": "Grant Ingersoll",
            "id": "comment-12558402"
        }
    ]
}