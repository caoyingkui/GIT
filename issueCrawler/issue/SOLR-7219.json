{
    "id": "SOLR-7219",
    "title": "Access filter cache from lucene query syntax",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "5.4"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "A filter query retrieves a set of documents matching a query from the filter cache. Since scores are not cached, all documents that match the filter produce the same score. Cached filters will be extremely fast when they are used again in another query.\n\nFilter Query Example:\n\ndescription:HDTV OR filter(+promotion:tv +promotion_date:[NOW/DAY-7DAYS TO NOW/DAY+1DAY])\n\n\n\nThe power of the filter() syntax is that it may be used anywhere within a lucene/solr query syntax. Normal fq support is limited to top-level conjunctions.",
    "attachments": {
        "SOLR-7219.patch": "https://issues.apache.org/jira/secure/attachment/12749121/SOLR-7219.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-06T20:09:33+0000",
            "author": "Yonik Seeley",
            "content": "Here's the patch implementing the proposed syntax, along with tests that the filter cache is actually being hit. ",
            "id": "comment-14660716"
        },
        {
            "date": "2015-08-07T16:14:42+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1694708 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1694708 ]\n\nSOLR-7219: add filter() to query syntax ",
            "id": "comment-14662039"
        },
        {
            "date": "2015-08-07T16:18:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1694709 from Yonik Seeley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694709 ]\n\nSOLR-7219: add filter() to query syntax ",
            "id": "comment-14662045"
        },
        {
            "date": "2015-08-08T14:55:48+0000",
            "author": "Steve Rowe",
            "content": "Frequent 5.x failures (nearly 100%?), e.g. https://builds.apache.org/job/Lucene-Solr-Tests-5.x-Java7/3405/:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSolrQueryParser -Dtests.method=testFilter -Dtests.seed=60D190157DF25DD1 -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=no_NO -Dtests.timezone=Atlantic/Canary -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.02s J2 | TestSolrQueryParser.testFilter <<<\n   [junit4]    > Throwable #1: java.lang.UnsupportedOperationException: Query SortedIntDocSetTopFilter does not implement createWeight\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([60D190157DF25DD1:A803F583E2FB7A8B]:0)\n   [junit4]    > \tat org.apache.lucene.search.Query.createWeight(Query.java:79)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:855)\n   [junit4]    > \tat org.apache.lucene.search.ConstantScoreQuery.createWeight(ConstantScoreQuery.java:117)\n   [junit4]    > \tat org.apache.solr.query.FilterQuery.createWeight(FilterQuery.java:96)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:855)\n   [junit4]    > \tat org.apache.lucene.search.BooleanWeight.<init>(BooleanWeight.java:56)\n   [junit4]    > \tat org.apache.lucene.search.BooleanQuery.createWeight(BooleanQuery.java:203)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:855)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.createNormalizedWeight(IndexSearcher.java:838)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:486)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocSetNC(SolrIndexSearcher.java:1259)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getPositiveDocSet(SolrIndexSearcher.java:941)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getProcessedFilter(SolrIndexSearcher.java:1103)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1625)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1501)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:555)\n   [junit4]    > \tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:522)\n   [junit4]    > \tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:277)\n   [junit4]    > \tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\n   [junit4]    > \tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2068)\n   [junit4]    > \tat org.apache.solr.util.TestHarness.query(TestHarness.java:320)\n   [junit4]    > \tat org.apache.solr.util.TestHarness.query(TestHarness.java:302)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:831)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:800)\n   [junit4]    > \tat org.apache.solr.search.TestSolrQueryParser.testFilter(TestSolrQueryParser.java:224)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-14663001"
        },
        {
            "date": "2015-08-08T15:03:36+0000",
            "author": "Yonik Seeley",
            "content": "Interesting...  some key difference between 5x and trunk. Looking into it now. ",
            "id": "comment-14663003"
        },
        {
            "date": "2015-08-08T15:13:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1694807 from Yonik Seeley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694807 ]\n\nSOLR-7219: temporary disable failing test ",
            "id": "comment-14663009"
        },
        {
            "date": "2015-08-08T15:14:05+0000",
            "author": "Yonik Seeley",
            "content": "I've temporarily disabled the test.  At first glance it looks like Lucene's Filter->Query transition introduced a back-compat break. ",
            "id": "comment-14663011"
        },
        {
            "date": "2015-08-10T04:15:14+0000",
            "author": "David Smiley",
            "content": "Just curious; why is this feature implemented as a change to the query grammar versus adding a QParser?  I suppose the grammar change might be nicer looking \u2013 which is subjective.  Another approach could have been a special local param (e.g. cache=true) on top of any QParser. ",
            "id": "comment-14679539"
        },
        {
            "date": "2015-08-10T15:03:00+0000",
            "author": "Erik Hatcher",
            "content": "Re: David Smiley's comment, I do think we shouldn't call this the \"lucene\" query parser any more.  Maybe it should be renamed/aliased to \"solr\"? ",
            "id": "comment-14680233"
        },
        {
            "date": "2015-08-10T15:11:37+0000",
            "author": "Yonik Seeley",
            "content": "Just curious; why is this feature implemented as a change to the query grammar versus adding a QParser?\n\nThe feature was about being able to access the filter cache anywhere within a lucene/solr query string.\nSince qparsers can't encapsulate arbitrary query clauses in lucene syntax, one would need to use additional params.\n\nfoo:bar filter(instock:true)\nvs\nfoo:bar {!filter v=$myfilt}&myfilt=instock:true\n\n\n\nSo possible with just a qparser, but not as easy or nice looking. ",
            "id": "comment-14680245"
        },
        {
            "date": "2015-08-10T16:45:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1695133 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1695133 ]\n\nSOLR-7219: use SolrConstantScoreQuery to fix 5x filter() break ",
            "id": "comment-14680342"
        },
        {
            "date": "2015-08-10T16:47:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1695135 from Yonik Seeley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695135 ]\n\nSOLR-7219: use SolrConstantScoreQuery to fix 5x filter() break ",
            "id": "comment-14680348"
        },
        {
            "date": "2015-08-10T16:50:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1695136 from Yonik Seeley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695136 ]\n\nSOLR-7219: re-enable filter test ",
            "id": "comment-14680351"
        },
        {
            "date": "2015-08-10T17:13:25+0000",
            "author": "Yonik Seeley",
            "content": "Definitely seems like a back compat break in the lucene Filter API, but for now I just switched from ConstantScoreQuery to SolrConstantScoreQuery to fix this issue. ",
            "id": "comment-14680382"
        },
        {
            "date": "2015-11-09T16:27:22+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Does this allow to OR the filter queries efficiently? That was always the limitation of *fq* that you could only effectively AND them.\n\nIf it does, we should document that rather prominently to make people happy. ",
            "id": "comment-14996811"
        },
        {
            "date": "2015-11-09T16:52:36+0000",
            "author": "Yonik Seeley",
            "content": "Does this allow to OR the filter queries efficiently?\n\nYep,\nfq=filter(foo) filter(bar) filter(baz)\n\nAlthough we could prob do it more efficiently in the future.  The current solution will use lucene's disjunction scorer, but we can get more efficient than that if we know we are dealing with DocSets. ",
            "id": "comment-14996868"
        },
        {
            "date": "2015-11-09T16:55:43+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Could we add this to the Changes file or somewhere else as an example then. It is both super cool and completely non-intuitive.  ",
            "id": "comment-14996876"
        },
        {
            "date": "2015-12-16T11:02:13+0000",
            "author": "Alessandro Benedetti",
            "content": "I was wondering if it is really necessary to add the \"filter\" element in the syntax when we want to re-use the filter.\n\nIsn't always true we would ideally re-use all our boolean clauses ?\nOf course doing this automatically could produce a very fast changing filterCache.\nBut probably this should be completely trasparent to the user.\nI got used to the concept of filter queries, but actually more the time passes more I see the opportunity in having an automatic caching for all the boolean clauses in the main query block.\nWhat could be cons of that approach ? ",
            "id": "comment-15059830"
        }
    ]
}