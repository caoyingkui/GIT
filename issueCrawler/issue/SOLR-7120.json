{
    "id": "SOLR-7120",
    "title": "terrible error reporting code in ExtendedDismaxConfiguration",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "This abomination needs to be changed...\n\n\n      try {\n        queryFields = DisMaxQParser.parseQueryFields(req.getSchema(), solrParams);  // req.getSearcher() here causes se$\n      } catch (SyntaxError e) {\n        throw new RuntimeException();\n      }\n\n\n\nIf you don't have a qf or df param in your request (ex: bin/solr -e cloud using \"basic_configs\") this causes a completely unhelpful RuntimeException to be thrown.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-04-20T15:47:18+0000",
            "author": "Shawn Heisey",
            "content": "It looks like simply throwing the original SyntaxError (which is what the similar code in DisMaxQParser does), or perhaps wrapping the orginal SyntaxError in the RuntimeException, would have been far better than this.\n\nLooking at how DisMaxQParser.parseQueryFields gets used in both, it appears to be very different.  DisMax uses it in parse(), but ExtendedDismax uses it during initialization ... which is very odd to me, unless the parser creation happens on every query.  That sounds to me like a very inefficient way of working.\n\nI was thinking about simply allowing the SyntaxError to bubble up through the stack, but I'm not sure what the implications of that might be. ",
            "id": "comment-14503066"
        }
    ]
}