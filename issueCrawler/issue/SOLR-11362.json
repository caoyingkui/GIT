{
    "id": "SOLR-11362",
    "title": "Solr Cloud SSL handshake_failure keystore (SOLR_SSL_KEY_STORE) multiple certs issue",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.6",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Hey all,\n\nI ran into a strange scenario recently so I thought I'd share, it was very frustrating and I only discovered the fix on a whim. \n\nLet's imagine I have three nodes which form a solrcloud: \n\n\n\tnode0.someaddress.com\n\tnode1.someaddress.com\n\tnode2.someaddress.com\n\n\n\nEach of these machines has an SSL key and csr generated which is signed by a CA. The truststore contains the public certificate of the CA (defined as per manual using SOLR_SSL_TRUST_STORE). \n\nThe keystore (SOLR_SSL_KEY_STORE) contains three entries, one for the CA public cert, and two entries for the server itself, with different alises (one has the alias set to the FQDN, the other is set to localhost). \n\nAll parameters for SSL/TLS are configured correctly as per the solr manuals. Obviously the keystore (SOLR_SSL_KEY_STORE) only needs the single cert/private key for the server with no other entries, but this setup works 100% with Kafka using the three entries. \n\nHere is an example:\n\nkeytool -list -keystore node0.jks \nlocalhost ..(omitted)\nnode0.someaddress.com ...(omitted)\ncacert ..(omitted)\n\nkeytool -list -keystore node1.jks \nlocalhost ..(omitted)\ncacert ..(omitted)\nnode1.someaddress.com ...(omitted)\n\nkeytool -list -keystore node2.jks \nnode2.someaddress.com ...(omitted)\nlocalhost ..(omitted)\ncacert ..(omitted)\n\nHere is the interesting part, with this setup, when the nodes are started only 1/3 nodes starts correctly (in my case, node1.someaddress.com) all the other nodes (node0.someaddress.com, node2.someaddress.com) have a handshake_failure error. If you try to run solr status on the two broken nodes it doesn't work but this command works fine for the working node. \n\nI enabled the most detailed level of logging and monitored the handshake but couldn't see anything really a miss, all the configuration properties were set correctly. \n\nWhat I noticed was this: when running keytool to list the keys for each keystore, the certificates in the keystore were displayed in different orders (as shown above) like they were sorted by alphabetical order by the keytool cli tool. This gave me an idea to delete the rest of the certs in each keystore for each node so they only had single entries for the fqdn.\n\nSo the keystores now looked like this: \nkeytool -list -keystore solrkeystore.jks ...\nnode0.someaddress.com ...(omitted)\n\nkeytool -list -keystore solrkeystore.jks ...\nnode1.someaddress.com ...(omitted)\n\nkeytool -list -keystore solrkeystore.jks ...\nnode2.someaddress.com ...(omitted)\n\nAfter I did this and restarted the solr nodes started working again fine. It is obvious that solr only expects a single key/cert in its keystore or it will get messed up. You can have multiple certs in the truststore, that isn't a problem. \n\nSo here are the questions: \n\n1) Why does this setup work with Kafka and not Solr if the java classes used should be very similar? \n\n2) Why can't I use multiple keys/certs in the keystore? Is this expected functionality? \n\n3) Are there any plans to add parameters for SSL/TLS version selection and cipher selection?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-14T14:33:23+0000",
            "content": "\n1) Why does this setup work with Kafka and not Solr if the java classes used should be very similar?\n2) Why can't I use multiple keys/certs in the keystore? Is this expected functionality?\n\nFor Kafka are you specifying the alias of the entry in the JKS? My guess is that the alias needs to be specified so Solr knows which entry in the JKS to pick up.\n\n\n3) Are there any plans to add parameters for SSL/TLS version selection and cipher selection?\n\nThe solr.in.sh variables (SOLR_SSL_*) are wrappers for Java properties for Jetty usually. The solr.jetty Java properties are used in jetty-ssl to setup Jetty.\n\n\n\thttps://github.com/apache/lucene-solr/blob/master/solr/bin/solr#L162\n\thttps://github.com/apache/lucene-solr/blob/master/solr/server/etc/jetty-ssl.xml\n\n\n\nYou should be able to set the Jetty SSL/TLS version and cipher selection as properties that Jetty would pick up through jetty-ssl.xml. It would be something to try. If you get it to work please update this ticket. The documentation can always be improved.\n\nFor reference here are some links about Jetty SSL/TLS configuration which should help point you in the right direction:\n\n\thttps://stackoverflow.com/questions/10425306/if-theres-more-than-one-certificate-in-jettys-key-store-how-does-it-choose\n\t\n\t\tThis states that an alias should be specified or it tries to guess the right alias to use.\n\t\n\t\n\thttp://www.eclipse.org/jetty/documentation/current/configuring-ssl.html#configuring-sslcontextfactory-cipherSuites\n\n ",
            "author": "Kevin Risden",
            "id": "comment-16204648"
        }
    ]
}