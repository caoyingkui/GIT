{
    "id": "LUCENE-1424",
    "title": "Change all multi-term querys so that they extend MultiTermQuery and allow for a constant score mode",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "New Feature",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Cleans up a bunch of code duplication, closer to how things should be - design wise, gives us constant score for all the multi term queries, and allows us at least the option of highlighting the constant score queries without much further work.",
    "attachments": {
        "LUCENE-1424-dep_rng_cstr_fix.patch": "https://issues.apache.org/jira/secure/attachment/12393826/LUCENE-1424-dep_rng_cstr_fix.patch",
        "LUCENE-1424.patch": "https://issues.apache.org/jira/secure/attachment/12392808/LUCENE-1424.patch",
        "lucene-1424.patch": "https://issues.apache.org/jira/secure/attachment/12393744/lucene-1424.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-10-24T22:57:56+0000",
            "content": "What do people think about putting these classes in? They have no max clause limitations, and reports have been that they can be much more efficient on large indexes. Solr has switched from using the boolean rewriting WildcardQuery,PrefixQuery to ConstantScore queries. We already put in the ConstantScoreRange query for just these reasons, so I think it makes since to add the rest of the family. An upside will be that I can add support for these queries to the Span highlighter. That will put our Highlighter in a position of being able to highlight pretty much every major query type, which I think is an important goal.\n\n\n\tMark\n\n ",
            "author": "Mark Miller",
            "id": "comment-12642563"
        },
        {
            "date": "2008-10-25T09:58:39+0000",
            "content": "What do people think about putting these classes in?\n\n+1\n\nI think in general we should more aggressively slurp useful things like this from Solr into Lucene.\n\nIs there any reason to keep the rewrite-to-BooleanQuery version of these (vs, deprecating them in favor of the ConstantScore variety)?  Are the score differences caused by the rewrite-to-BooleanQuery implementations ever \"useful\"? ",
            "author": "Michael McCandless",
            "id": "comment-12642605"
        },
        {
            "date": "2008-10-25T10:03:34+0000",
            "content": "Woops... patch uses @Override (Java 5 only):\n\n\ncommon.compile-core:\n    [mkdir] Created dir: /lucene/lucene.constant/build/classes/java\n    [javac] Compiling 333 source files to /lucene/lucene.constant/build/classes/java\n    [javac] /lucene/lucene.constant/src/java/org/apache/lucene/search/ConstantScoreWildcardQuery.java:69: annotations are not supported in -source 1.4\n    [javac] (use -source 5 or higher to enable annotations)\n    [javac]   @Override\n    [javac]    ^\n    [javac] /lucene/lucene.constant/src/java/org/apache/lucene/search/WildcardFilter.java:49: annotations are not supported in -source 1.4\n    [javac] (use -source 5 or higher to enable annotations)\n    [javac]   @Override\n    [javac]    ^\n    [javac] 2 errors\n\n\n\nI'll fix in my local checkout. ",
            "author": "Michael McCandless",
            "id": "comment-12642606"
        },
        {
            "date": "2008-10-25T10:24:02+0000",
            "content": "Patch looks good.  I plan to commit in a day or two. ",
            "author": "Michael McCandless",
            "id": "comment-12642611"
        },
        {
            "date": "2008-10-25T12:56:11+0000",
            "content": ">> Are the score differences caused by the rewrite-to-BooleanQuery implementations ever \"useful\"?\n\nSo we need to consider what we are losing - TF, IDF, coordination, length norm, doc boosts.\n\nI can only think of one use case which relates to coordination factor.\n\nIf you have a \"category\" field for a product e.g. given Lucene docs for these books:\n\nTitle:            Lucene in Action\nCategory:   /Books/Computing/Languages/Java\n                    /Books/Computing/InformationRetrieval\n\nTitle:           The Long Tail\nCategory:  /Books/Business/Internet\n                   /Books/Computing\n\nYou might then use a wildcard search of /Books/Computing/* and \"Lucene in Action\" would rank higher than \"The Long Tail\" because a BooleanQuery would score a higher coordination factor suggesting LIA got more hits under this \"/Books/Computing..\" category. There would still be the issue of IDF potentially skewing results but the coordination factor is potentially useful here. \n\nI think in general IDF tends to be useless for \"auto-expanded\" terms e.g. Wildcard, fuzzy etc. Incidentally, we still see that IDF issue in fuzzy queries ranking rare mis-spellings higher but that's another issue (one I resolved in contrib's FuzzyLikeThisQuery).\n\nI suppose one other consideration is for people who have created any doc boosts e.g. trying to use this to boost by date.\n\nI don't think any of these cases necessarily outweigh the benefit to be obtained from switching \"wildcard/prefix to constant score queries\"\n\n\nCheers,\nMark\n\n\n\n\n ",
            "author": "Mark Harwood",
            "id": "comment-12642615"
        },
        {
            "date": "2008-10-25T13:10:45+0000",
            "content": "Just a suggestion:\nHow about not inventing new Class names. Just include both code parts into e.g. (Range|Prefix|Wildcard)Query's rewrite() method. It would then be possible to just switch the QueryParser or other code by e.g. setting a global (static) flag in (Range|Prefix|Wildcard)Query that switches between both implementations).\n\nTo your patch:\nFor printing out the boost in toString(): there is a nice helper routine (instead of \"if (getBoost()!=1.0f)....\"). I think it should be consistent with toString() of all other core query types. ",
            "author": "Uwe Schindler",
            "id": "comment-12642617"
        },
        {
            "date": "2008-10-25T15:48:14+0000",
            "content": "Is there any reason to keep the rewrite-to-BooleanQuery\n\nIn addition to the coord example Mark mentioned, there are also cases where the tf and idf values for terms matching a wildcard/prefix are meaningful ... but the other advantage to keeping the existing implementations is use cases where the number of unique terms a query expands to is  is very small, but the number of documents matched is very large ... in theory (but i haven't tested this) the expanding queries should be more efficient in space and equally efficient in time as the ConstantScore equivalents.\n\nIt would then be possible to just switch the QueryParser or other code by e.g. setting a global (static) flag.\n\nI'm loath to see more static \"setter\" methods added to query clauses, but there's no reason this couldn't be a member property on instances of the classes with corresponding properties on QueryParser.\n\nIn theory it could even be a tertiary state property: REWRITE_TO_BOOLEAN, REWRITE_TO_CONSTANT_SCORE. REWRITE_GUESS ... where the third option caused the REWRITE method to make it's best guess using a first pass at the TermEnum iteration and aborting if the number of terms get's above some threshold.\n\n(but that kind of \"optimization\" would be premature without testing .. the point is it would be possible) ",
            "author": "Hoss Man",
            "id": "comment-12642628"
        },
        {
            "date": "2008-10-25T19:57:10+0000",
            "content": "Sorry bout the @overrides...grabbed/copied from solr and forgot the java 1.4 cleanse. There was also one StringBuilder in the wildcardfilter that this patch pulls. ",
            "author": "Mark Miller",
            "id": "comment-12642651"
        },
        {
            "date": "2008-10-28T14:16:50+0000",
            "content": "OK, it sounds like we should preserve the rewrite-to-BooleanQuery\noption for each of these Query classes since there are clear use cases\nwhere it makes sense.\n\nI do like the idea of adding \"constant score capability\" to the\nexisting query classes, instead of adding new ConstantScoreXXXQuery\nclasses.\n\nI don't really like the REWRITE_GUESS option because it could lead to\nstrange inconsistent results as seen by the end user \u2013 eg prefix1\nsorts one way but then a relaxed prefix2 sorts another way.  I think a\nsimple static binary choice is good?\n\nCouldn't we build this functionality (get/setRewriteMethod(...)) into\nMultiTermQuery?  And then fix those queries that don't already to\nsubclass MultiTermQuery (at least RangeQuery and PrefixQuery)?\n\nFinally, I would also prefer non-static methods to instruct\nQueryParser which rewrite method to use.  In fact we already have\nsetUseOldRangeQuery \u2013 maybe change this to\nsetUseConstantScoreRewriteMethod (defaulting to true)? ",
            "author": "Michael McCandless",
            "id": "comment-12643219"
        },
        {
            "date": "2008-11-03T17:12:18+0000",
            "content": "Heres an early review patch.\n\nI switched range and prefix to use multiterm query, but its debatable if thats necessary. Prob a few clock cycles slower, and the benefits are slim beyond overall code design niceness (which counts a lot to me <g>). Just not sure every mutlitermquery would want to have to implement a constantscore version, and the amount of code reuse saved is low (it could do a bit more with something like getConstantScoreQuery, but thats not much either - I may put it in come to think of it).\n\nTODO:\n\nlook over\nsome comments maybe\nsome tests for the constant score versions\nrangequery is not as expressive as constantscorequery, which can have separate inclusive/exclusive ends.\n\n\nWhen I was talking about deprecating constantscorequery being awkward, its wasnt really in the implementation sense (i think we can leave it as is), but more the deprecating one of the newest queries already  Still don't consider that a huge deal though. ",
            "author": "Mark Miller",
            "id": "comment-12644756"
        },
        {
            "date": "2008-11-03T20:48:27+0000",
            "content": "Patch looks good!  Thanks Mark.\n\nI think we should indeed \"factor up\" into MultiTermQuery the ability to create a ConstantScoreQuery out of the filter generated by enumerating the terms and walking the docs for those terms?  Then we don't need to special case in each of the subclasses.\n\nMaybe we can then fix Wildcard/Prefix/RangeFilter to create the corresponding query and then ask it for its filter (assuming we make a method eg \"getDocIdSet\" in MultiTermQuery)?  Or I guess we could just make a QueryWrapperFilter around the corresponding query, though that seems rather roundabout.  I don't think we need to have duplicated code in PrefixFilter, RangeFilter, WildcardFilter.\n\n\nWhen I was talking about deprecating constantscorequery being awkward, its wasnt really in the implementation sense (i think we can leave it as is), but more the deprecating one of the newest queries already  Still don't consider that a huge deal though.\n\nWell ... this is just how software evolves   You can't control which code will be the \"victim\" of a nice refactoring.  It's a healthy sign of progress, and progress is good!\n\nrangequery is not as expressive as constantscorequery, which can have separate inclusive/exclusive ends.\n\nIf we do deprecate ConstantScoreRangeQuery (I think we should) then we could add a ctor to RangeQuery matching ConstantScoreRangeQuery's more expressive one? ",
            "author": "Michael McCandless",
            "id": "comment-12644802"
        },
        {
            "date": "2008-11-03T20:56:35+0000",
            "content": "I think we should indeed \"factor up\" into MultiTermQuery...\n\nAh, I see...I hadn't thought all way up that path - it goes a bit further than was in my mind. The way to go for sure.\n\nAll the comments make perfect sense, I'll work up a new patch while I'm at apachcon. ",
            "author": "Mark Miller",
            "id": "comment-12644805"
        },
        {
            "date": "2008-11-03T22:25:41+0000",
            "content": "bq In favor of new QueryWrapperFilter(new XXXQuery(...))? \n\nI didn't end up going with the wrapper. Check out this patch just so we get back on the same page sooner rather than later...does this look like a doable way of doing it? It kills all the dupe code I think.\n\nWe can just leave Prefixfilter since its their anyway, but the prefixquery wont use it. ",
            "author": "Mark Miller",
            "id": "comment-12644833"
        },
        {
            "date": "2008-11-03T22:54:20+0000",
            "content": "Excellent!\n\nLooks like PrefixGenerator got lost.  Why not have it just get its bits by creating a PrefixQuery and calling getFilter().getDocIdSet()?\n\nWildcardFilter is still in the patch.\n\nMaybe fix getDocIdSet to not call bits() (since that's 2-pass, it's slower).  In fact, does that Filter even need to implement bits?  Can we throw a not implemented exception, since it's a new Filter? ",
            "author": "Michael McCandless",
            "id": "comment-12644842"
        },
        {
            "date": "2008-11-03T23:24:45+0000",
            "content": "No worries, I'm still in the thick of it - plenty of little strings to \nwrap up, just wanted to make sure I was on the right track.\n\n ",
            "author": "Mark Miller",
            "id": "comment-12644848"
        },
        {
            "date": "2008-11-04T02:46:29+0000",
            "content": "Ahhhh...satisfying bringing order to all of that. It kaleidoscopes up quite nicely. Thanks for the help Michael.\n\nBack to just needing:\n\nreview\npossibly some comments/comment changes\ntests for the constantscore side of the queries ",
            "author": "Mark Miller",
            "id": "comment-12644882"
        },
        {
            "date": "2008-11-04T17:09:28+0000",
            "content": "Looks good!  I think we're almost done here...\n\nShouldn't we deprecate ConstantScoreRangeQuery, and maybe change it to\nsimply subclass RangeQuery and set useConstantScoreRewrite to true?\n\nShould we match the ctor of ConstantScoreRangeQuery (field, lower, upper,\ninclLower, inclUpper) with RangeQuery?  Right now you have Term for\nlower & upper, not String.\n\nCan we rename MultiTermQuery.isUseConstantScoreRewrite() to\ngetUseConstantScoreRewrite()?  Or maybe set/getConstantScoreRewrite()?\n\nThere seems to be a leftover \"abstract class TermGenerator implements\nIdGenerator\" at the bottom of Prefixquery.java.\n\nSmall whitespace issue: you need to insert a space in \"if(...\" in a\nfew places. ",
            "author": "Michael McCandless",
            "id": "comment-12645006"
        },
        {
            "date": "2008-11-05T20:35:07+0000",
            "content": "Okay, almost there. Making constantscorerange query extend rangequery exposed a small problem though - there is scoring difference when using multiserver vs single searcher. The simple rangequery test in the multisearcher scoring test fails. The single searcher returns a score of 1 and the multi 1.4 - still trying to figure out how the heck that is happening...there is not a lot going on, so its prob obvious, but not sticking out at the moment... ",
            "author": "Mark Miller",
            "id": "comment-12645313"
        },
        {
            "date": "2008-11-06T19:52:46+0000",
            "content": "Okay, this should be good. Thanks for the guidance. ",
            "author": "Mark Miller",
            "id": "comment-12645556"
        },
        {
            "date": "2008-11-08T17:33:18+0000",
            "content": "I'm having trouble applying the latest patch \u2013 I get failed Hunks, and, patch can't find one of the source files:\n\n\npatching file contrib/highlighter/src/test/org/apache/lucene/search/highlight/HighlighterTest.java\npatching file src/java/org/apache/lucene/queryParser/QueryParser.java\npatching file src/java/org/apache/lucene/search/ConstantScoreRangeQuery.java\nHunk #2 FAILED at 29.\n1 out of 2 hunks FAILED -- saving rejects to file src/java/org/apache/lucene/search/ConstantScoreRangeQuery.java.rej\npatching file src/java/org/apache/lucene/search/MultiTermQuery.java\npatching file src/java/org/apache/lucene/search/PrefixFilter.java\npatching file src/java/org/apache/lucene/search/PrefixQuery.java\npatching file src/java/org/apache/lucene/search/PrefixTermEnum.java\npatching file src/java/org/apache/lucene/search/RangeFilter.java\npatching file src/java/org/apache/lucene/search/RangeQuery.java\nHunk #1 FAILED at 21.\n1 out of 3 hunks FAILED -- saving rejects to file src/java/org/apache/lucene/search/RangeQuery.java.rej\npatching file src/java/org/apache/lucene/search/RangeTermEnum.java\npatching file src/java/org/apache/lucene/search/WildcardQuery.java\npatching file src/java/org/apache/lucene/search/WildcardTermEnum.java\npatching file src/test/org/apache/lucene/queryParser/TestQueryParser.java\npatching file src/test/org/apache/lucene/search/TestConstantScoreRangeQuery.java\ncan't find file to patch at input line 1952\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n|Index: src/test/org/apache/lucene/search/TestMultiTermConstantScore.java\n|===================================================================\n|--- src/test/org/apache/lucene/search/TestMultiTermConstantScore.java\t(revision 710055)\n|+++ src/test/org/apache/lucene/search/TestMultiTermConstantScore.java\t(working copy)\n--------------------------\nFile to patch: \n\n\n\nDid you turn off keyword expansion in your local svn checkout?  That seems to explain the first to failures (if I manually undo the $Id$ keyword expansion then the patch applies cleanly).\n\nOn the 3rd failure, it seems like you renamed TestConstantScoreRangeQuery.java to TestMultiTermConstantScore.java, and then modified it?  This confuses my patch client.\n\nI think I can work through these, but I sure hope this is the last patch  ",
            "author": "Michael McCandless",
            "id": "comment-12646005"
        },
        {
            "date": "2008-11-08T18:04:45+0000",
            "content": "Don't work through it. I'm just using eclipse And did nothing  \ndifferent, but don't waste your time.  Let me figure it out. I'll make  \nsure it works without eclipse before putting it up.\n\nThat test was just an eclipse name refactor.\n\nSorry about all the patches by the way. Tends to be my style  I tried to indicate which were merely progress patches (if someone has the interest, it allows my ,any wrong directions to be pointed out sooner) and which were something that should be considered more final review worthy. I am sure I can do a better job on that though. Certainly not my intention to waste anyones time, especially when that time could be better spent improving Lucene \n\n\n\tMark\n\n\n\n\nOn Nov 8, 2008, at 12:34 PM, \"Michael McCandless (JIRA)\" <jira@apache.org \n ",
            "author": "Mark Miller",
            "id": "comment-12646012"
        },
        {
            "date": "2008-11-08T19:27:37+0000",
            "content": "Sorry about all the patches by the way.\n\nWhoa, no need to apologize \u2013 I in fact love all the patches and fast feedback/iterations.  That's definitely the right way to do it.  When I said \"...but I sure hope this is the last patch\" I meant \"if I need to manually fix the patch failures\".  Since you are fixing the patch problems (thanks!) then it's all good \u2013 keep the patch iterations going. ",
            "author": "Michael McCandless",
            "id": "comment-12646023"
        },
        {
            "date": "2008-11-08T20:17:59+0000",
            "content": "Okay, fingers crossed, this is good.\n\nEclipse was displaying the $id correctly, but it wasn't going out in the patch. Also, I didn't realize refactoring can cause issues like that, so I deleted and created a new class. Personally, I think thats fine, but let me know if you disagree. I also tested applying the patch to a fresh checkout and ran the tests. Should be good.\n\nI think I'm done unless (probably when) you prompt something else / something I missed. ",
            "author": "Mark Miller",
            "id": "comment-12646026"
        },
        {
            "date": "2008-11-08T20:25:21+0000",
            "content": "This time granting license to ASF ",
            "author": "Mark Miller",
            "id": "comment-12646027"
        },
        {
            "date": "2008-11-08T21:09:29+0000",
            "content": "Excellent \u2013 patch applies perfectly and all tests pass.  I'll review the changes.  Thanks Mark! ",
            "author": "Michael McCandless",
            "id": "comment-12646029"
        },
        {
            "date": "2008-11-08T22:37:24+0000",
            "content": "It looks like termContainsWildcard; and the check code can come out of wildcardquery. I pretty much got around that by making wc enum not blow up when the term doesn't contain a wildcard. There are other ways to do it that would keep the check if we prefer (a simple override of rewrite on wildcardquery would be the other option I like). I just liked the idea of WCTermEnum not blowing up like WCQuery doesnt blow up. ",
            "author": "Mark Miller",
            "id": "comment-12646034"
        },
        {
            "date": "2008-11-09T12:27:37+0000",
            "content": "\nOK I made some changes to the patch \u2013 I think we are real close now:\n\n\n\tOverrode WildcardQuery.rewrite to return TermQuery if the pattern has\n    no wildcards (your suggestion above).\n\n\n\n\n\tSimplified MultiTermFilter: made it a static inner class, moved\n    TermGenerator inside it (absorbed IdGenerator interface into it),\n    move bits() and getDocIdSet() out of the anonymous class,\n    simplified the equals method.\n\n\n\n\n\tRemoved extra TermGenerator class from PrefixQuery.\n\n\n\n\n\tFixed but RangeFilter's ctor \u2013 I think you could have gotten null\n    rangeQuery if you pass in null collator.\n\n\n\n\n\tVarious small javadoc fixes, renaming, refactoring.\n\n\n\n\n\tDeprecated ConstantScoreRangeQuery in favor of RangeQuery.\n\n\n\n\n\tOverrode FuzzyQuery.setConstantScoreRewrite to throw\n    UnsupportedOperationException, because it overrides rewrite.\n\n\n\n\n\tAdded set/getConstantScoreRewrite to QueryParser (defaults to\n    true) and deprecated set/getUseOldRangeQuery.\n\n\n\n\n\tDeprecated the ctor's of RangeQuery that take Term (in favor of\n    String versions); removed new ctors in RangeQuery that take Term\n    for upper/lower val.\n\n\n\nMark can you look this over and see if the changes are OK?  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-12646084"
        },
        {
            "date": "2008-11-09T17:26:54+0000",
            "content": "+1 on all of your changes.\n\nStill had an issue with your patch with the two $id classes - I have no clue whats up with that, so I just manually paste the expanded line into my patch.\n\nRemoved some unused imports in new/modified classes and further added/tweaked appropriate javadoc.\n\nChanged RangeQuery tests to use non deprecated constructors, exposed a null pointer issue with RangeQuery.equals and hashcode, fixed. ",
            "author": "Mark Miller",
            "id": "comment-12646097"
        },
        {
            "date": "2008-11-09T19:38:50+0000",
            "content": "\nExcellent!  OK I made a few more changes, new patch attached.  This is like playing ping-pong :\n\n\n\tFixed QueryParser.jj to match our changes to QueryParser.java\n\n\n\n\n\tFixed a few more unused imports, unused assignments, deprecated\n    calls, javadocs, etc\n\n ",
            "author": "Michael McCandless",
            "id": "comment-12646108"
        },
        {
            "date": "2008-11-10T03:42:04+0000",
            "content": "looks great!\n\nSorry to do this, but I had to touch up the javadoc on RangeQuery as it no longer requires at least one term. I promise thats my last!\n\nOh yeah, and co credit would probably be more accurate. ",
            "author": "Mark Miller",
            "id": "comment-12646161"
        },
        {
            "date": "2008-11-10T09:42:07+0000",
            "content": "OK this version looks good!  I plan to commit sometime later today... thanks Mark! ",
            "author": "Michael McCandless",
            "id": "comment-12646215"
        },
        {
            "date": "2008-11-11T00:41:01+0000",
            "content": "Committed revision 712890.\n\nThanks Mark! ",
            "author": "Michael McCandless",
            "id": "comment-12646424"
        },
        {
            "date": "2008-11-11T17:03:52+0000",
            "content": "Since this was committed I get a test failure when I run\n  'ant -Dtag=lucene_2_4_0 test-tag'\n\n    [junit] Testcase: testRange(org.apache.lucene.queryParser.TestQueryParser):FAILED\n    [junit] null\n    [junit] junit.framework.AssertionFailedError\n    [junit] \tat org.apache.lucene.queryParser.TestQueryParser.testRange(TestQueryParser.java:418)\n\nSeems like this might have broken backwards-compatibility. I haven't looked into the reason yet. ",
            "author": "Michael Busch",
            "id": "comment-12646594"
        },
        {
            "date": "2008-11-11T17:07:41+0000",
            "content": "Hmm the culprit is this line in 2.4's TestQueryParser.testRange():\n\n    assertTrue(getQuery(\"[ a TO z]\", null) instanceof ConstantScoreRangeQuery); ",
            "author": "Michael Busch",
            "id": "comment-12646596"
        },
        {
            "date": "2008-11-11T17:16:45+0000",
            "content": "Now it returns a RangeQuery that is set for constant score mode. Its \nbehavior is back compatible with  ConstantScoreRangeQuery, but we no \nlonger return it...\n\n ",
            "author": "Mark Miller",
            "id": "comment-12646602"
        },
        {
            "date": "2008-11-11T17:31:50+0000",
            "content": "Yeah, I understand the reason... and easy \"fix\" would be in QueryParser#newRangeQuery():\n\n  protected Query newRangeQuery(String field, String part1, String part2, boolean inclusive) {\n    RangeQuery query;  \n  \n    if (constantScoreRewrite) {\n      // TODO: remove in Lucene 3.0\n      query = new ConstantScoreRangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    } else {\n      query = new RangeQuery(field, part1, part2, inclusive, inclusive, rangeCollator);\n    }\n    query.setConstantScoreRewrite(constantScoreRewrite);\n    return query;\n  }\n\n\n\nSince ConstantScoreRangeQuery extends RangeQuery this works and should not change any behavior, right?\nI tried it out, \"ant test-core test-tag\" passes with this change. ",
            "author": "Michael Busch",
            "id": "comment-12646606"
        },
        {
            "date": "2008-11-11T17:48:46+0000",
            "content": "Looks like a fine solution to me. Cool tests.\n\n ",
            "author": "Mark Miller",
            "id": "comment-12646609"
        },
        {
            "date": "2008-11-11T18:07:43+0000",
            "content": "Thanks Mark.\n\nOK, I'll make a patch and commit it later today. ",
            "author": "Michael Busch",
            "id": "comment-12646613"
        },
        {
            "date": "2008-11-11T19:34:20+0000",
            "content": "Thanks Michael! ",
            "author": "Michael McCandless",
            "id": "comment-12646639"
        },
        {
            "date": "2008-11-11T23:09:27+0000",
            "content": "For kicks, I tried implementing the MultiTermGenerator so that it returns an inner class DocSetId iterator that iterates over matching terms/docs, thinking we could save some speed by avoiding the OpenBitSet creation, population, read. Instead, even in tests that didn't involve any skip-to (not sure what/if any of these cases actually do, still wrapping my head around that), the non generate the bitset first approach was a tad slower rather than faster. Don't know exactly why I the moment, but thought I'd chronicle the attempt for future optimizers. Probably all the stuff that happens between next calls slows down the enumeration quite a bit, so that doing it all at once saves enough time to make up for the OpenBitSet stuff. ",
            "author": "Mark Miller",
            "id": "comment-12646721"
        },
        {
            "date": "2008-11-11T23:53:39+0000",
            "content": "Here's the patch. \n'ant test test-tag' passes now.\n\nI'll commit shortly. ",
            "author": "Michael Busch",
            "id": "comment-12646733"
        },
        {
            "date": "2008-11-12T00:03:28+0000",
            "content": "Committed revision 713225. ",
            "author": "Michael Busch",
            "id": "comment-12646739"
        },
        {
            "date": "2008-11-12T16:04:58+0000",
            "content": "Another one: looks like as we were iterating back and forth, after I changed the constructors to the non deprecated, we lost the ability of the deprecated constructors to accept null properly. Doh! I'll try and fix it tonight. ",
            "author": "Mark Miller",
            "id": "comment-12646935"
        },
        {
            "date": "2008-11-12T23:38:01+0000",
            "content": "Fixes the null problem with deprecated RangeQuery constructors and adds unit test for it. ",
            "author": "Mark Miller",
            "id": "comment-12647122"
        },
        {
            "date": "2008-11-13T09:31:35+0000",
            "content": "Thanks Mark \u2013 I just committed that. ",
            "author": "Michael McCandless",
            "id": "comment-12647237"
        }
    ]
}