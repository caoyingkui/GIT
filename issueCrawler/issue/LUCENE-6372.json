{
    "id": "LUCENE-6372",
    "title": "Simplify hashCode/equals for SpanQuery subclasses",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Spin off from LUCENE-6308, see the comments there from around 23 March 2015.",
    "attachments": {
        "LUCENE-6372.patch": "https://issues.apache.org/jira/secure/attachment/12730205/LUCENE-6372.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14526834",
            "author": "Paul Elschot",
            "date": "2015-05-04T16:51:40+0000",
            "content": "Patch of 4 May 2015.\nSimplifies hashCode/equals for all subclasses of SpanQuery.\nRemoves this == other checks in equals(), this might affect performance.\nAdds a few Objects.requireNonNull calls in constructors.\nLeaves various getBoost calls in hashCode implementations to super.\nRemoves hashCode/equals from SpanFirstQuery, not needed anymore.\nUses new collectPayloads attribute in SpanNearQuery hashCode/equals. "
        },
        {
            "id": "comment-14526840",
            "author": "Paul Elschot",
            "date": "2015-05-04T16:54:36+0000",
            "content": "See also LUCENE-6333 "
        },
        {
            "id": "comment-14529283",
            "author": "Adrien Grand",
            "date": "2015-05-05T21:11:22+0000",
            "content": "I really like the additional checks and how hashcode/equals properly call super.hashcode and only care about members of the class \u2013 not of its parent.\n\nI think my only concern would be that some bit mixes that these queries have in their hashcode do not have the intended effect now that you changed the order in which members are incorporated into the hash code (referring to this comment in particular: Mix bits before folding in things like boost). It would probably be safer to move to a multiplicative hash. "
        },
        {
            "id": "comment-14530300",
            "author": "Paul Elschot",
            "date": "2015-05-06T10:25:53+0000",
            "content": "I'll remove the comment and use a multiplicative hash instead of rotations.\n\nQuery has a this == other test in equals().\nWhen this passes in the Query superclass, the subclass still has to check its members.\nWouldn't it be better to do that test only in non abstract classes as the first thing to be checked, if at all?\nThis is actually another issue, but anyway. "
        },
        {
            "id": "comment-14530308",
            "author": "Adrien Grand",
            "date": "2015-05-06T10:31:37+0000",
            "content": "\nQuery has a this == other test in equals().\n\nI'm not sure how much it helps and I wouldn't mind seeing it removed, but to answer your question I think it still kicks in for queries that do not need to override equals/hashcode like MatchAllDocsQuery? "
        },
        {
            "id": "comment-14530336",
            "author": "Paul Elschot",
            "date": "2015-05-06T10:58:08+0000",
            "content": "Patch of 6 May 2015.\nCompared to previous patch this changes hash code rotations to multiplicative hashes, and this includes an implementation for SpanPayloadCheckQuery. "
        },
        {
            "id": "comment-14530355",
            "author": "Paul Elschot",
            "date": "2015-05-06T11:15:38+0000",
            "content": "One typical case for equals() is a newly constructed query compared against a query as a key in a cache.\nIn that case the this == other test in Query.equals() will fail, so it can just as well be removed, and never done.\n\nAre there other typical cases for Query.equals()?\nFor example one could cache the result of a query parser by its input string, and reuse a query from that cache to check a cache with query results. In that case the this == other test might help in equals() for non abstract Query subclasses. "
        },
        {
            "id": "comment-14530377",
            "author": "Adrien Grand",
            "date": "2015-05-06T11:33:29+0000",
            "content": "Indeed, I don't think these == checks are useful for anything but corner cases, especially given that query rewriting often involves cloning. "
        },
        {
            "id": "comment-14530385",
            "author": "Adrien Grand",
            "date": "2015-05-06T11:38:08+0000",
            "content": "The patch looks good to me! I'll commit shortly. "
        },
        {
            "id": "comment-14530404",
            "author": "ASF subversion and git services",
            "date": "2015-05-06T11:50:26+0000",
            "content": "Commit 1677963 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1677963 ]\n\nLUCENE-6372: Simplified and improved equals/hashcode of span queries. "
        },
        {
            "id": "comment-14531531",
            "author": "ASF subversion and git services",
            "date": "2015-05-06T22:08:31+0000",
            "content": "Commit 1678104 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1678104 ]\n\nLUCENE-6372: Simplified and improved equals/hashcode of span queries. "
        }
    ]
}