{
    "id": "LUCENE-2311",
    "title": "Pass potent SR to IRWarmer.warm(), and also call warm() for new segments",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9.3",
            "3.0.2",
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently warm() receives a SegmentReader without terms index and docstores.\nIt would be arguably more useful for the app to receive a fully loaded reader, so it can actually fire up some caches. If the warmer is undefined on IW, we probably leave things as they are.\n\nIt is also arguably more concise and clear to call warm() on all newly created segments, so there is a single point of warming readers in NRT context, and every subreader coming from getReader is guaranteed to be warmed up -> you don't have to introduce even more mess in your code by rechecking it.",
    "attachments": {
        "LUCENE-2311.patch": "https://issues.apache.org/jira/secure/attachment/12446059/LUCENE-2311.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-11T22:25:35+0000",
            "content": "Not only newly created, but newly opened too! So your readers are warmed, if you just created an IW, called getReader, and didn't do any writes at all yet. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12844250"
        },
        {
            "date": "2010-06-01T20:10:13+0000",
            "content": "Test case showing the issue.\n\nBasically you cannot run any searches against the reader passed to your warmer...\n\nI also had to fix LuceneTestCase \u2013 it was masking the original exception that CMS hit. ",
            "author": "Michael McCandless",
            "id": "comment-12874211"
        },
        {
            "date": "2010-06-01T20:19:27+0000",
            "content": "It is also arguably more concise and clear to call warm() on all newly created segments, so there is a single point of warming readers in NRT context, and every subreader coming from getReader is guaranteed to be warmed up -> you don't have to introduce even more mess in your code by rechecking it.\n\nI agree this would be nice, however... it's less important that this be called from within IW, because this warming time (on newly flushed segments) must be done in the foreground of the reopen thread.  Ie, whether we do this in IW or app does it externally, this will block an NRT reader turnaround.\n\nVs warming a newly merged segment, where we have the freedom to continue using the old (merged) segments until the newly merged one is warmed. ",
            "author": "Michael McCandless",
            "id": "comment-12874214"
        },
        {
            "date": "2010-06-01T20:28:35+0000",
            "content": "New patch, includes trivial fix (test passes) and CHANGES.\n\nI plan to commit shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12874220"
        },
        {
            "date": "2010-06-01T20:33:42+0000",
            "content": "This is not the issue of reader turnaround. This is the issue of code clarity.\n\nFrom the user's standpoint warming up a new-from-scratch segment and warming up just-merged segment is the same action. The difference of what happens in which thread, and what blocks/doesn't block reopen is totally Lucene-internal API-wise. Now you're forcing people to make this distinction and do absolutely identical warming-up action in two very different places. Moreover, when warming up a new reader from reopen(), they have to get new segments and then discern which ones of them were flushed, and which were merged, to avoid warming them up twice.\n\nI think there is no hurry to push the fix for this into 2.9.3. As of now this feature is broken. There is absolutely no way you can make it work. Thus, there are no applications that are suffering. Thus, not releasing the fix with 2.9.3, does not multiply suffering under the sun  Thus, no need to hurry up and fix this at least somehow instead of doing this properly. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12874224"
        },
        {
            "date": "2010-06-01T21:36:23+0000",
            "content": "From the user's standpoint warming up a new-from-scratch segment and warming up just-merged segment is the same action. \n\nOK, I agree... but, let's open a separate issue to rename\nsetMergedSegmentWarmer -> setSegmentWarmer, and have it be invoked for\nflushed and merged segments?\n\nDoes your pending patch (what's the issue number again?) do this already?\n\nI agree this change isn't needed for 2.9.3.\n\nI think there is no hurry to push the fix for this into 2.9.3. \n\nI think the first part of this bug (that you get an impotent\nSegmentReader passed to your segment warmer) should be fixed for\n2.9.3.  The fix is trivial. ",
            "author": "Michael McCandless",
            "id": "comment-12874249"
        },
        {
            "date": "2010-06-02T15:17:35+0000",
            "content": "OK I opened LUCENE-2485 for the 2nd part of this issue.\n\nI'll commit the first part shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12874606"
        },
        {
            "date": "2010-06-02T16:14:33+0000",
            "content": "Does your pending patch (what's the issue number again?) do this already?\nLUCENE-2355 - this patch doesn't do this yet.\nThe next part removes the need for readerWarmer, as each reader has a number of components that are notified when reader is created/closed (and can warm themselves appropriately).\nThis also takes care of one of Yonik's concerns from LUCENE-2485\nPassing in the complete index (in addition to just the new segment) would allow incremental updating of an index-wide data structure\nThe factories that create components are shared for DirReader+SRs or IW-readerPool+SRs+IWBackedReader, so new components by default have access to index-wide context.\n\nThe part that is missing is the way for the user to specify if he wants his newly merged SRs pre-warmed and up to which runlevel. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12874634"
        }
    ]
}