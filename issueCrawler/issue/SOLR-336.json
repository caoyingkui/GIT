{
    "id": "SOLR-336",
    "title": "Allow setting solr.data.dir with JNDI",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "I would like to be able set the solr.data.dir with JNDI, as I can for the solr.home property. Currently the data directory is only looked up in the ${solr.home}/conf/solrconfig.xml file, or as a parameter passed into the SolrCore(String, IndexSchema) constructor.\n\nThis allows more options for setting the data directory, such as from within a Servlet container's Context fragment.",
    "attachments": {
        "jndi-data-dir.patch": "https://issues.apache.org/jira/secure/attachment/12363711/jndi-data-dir.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Stu Hood",
            "id": "comment-12519479",
            "date": "2007-08-13T17:51:35+0000",
            "content": "Here is a patch to allow the data directory to be set either by JNDI or a system property.\n\nI wasn't sure whether to put the logic in core/SolrCore or core/Config, but since core/Config already imported the necessary libraries for JNDI, and I added it there. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12524580",
            "date": "2007-09-03T20:32:42+0000",
            "content": "I'm opposed to the concept behind this patch for the same reasons i was opposed to adding a specific system property for the data dir...\n\nhttp://www.nabble.com/Re%3A-finer-granularity-of-configuration-p8894861.html\n\nperhaps instead of adding piece meal JNDI names for various things normally specified in the solrconfig.xml, we should take advantage of the existing code that supports using system properties as variables in the solrconfig.xml and write something that will generically convert any comp/env/solr/* JNDI pairs found into solr.* system properties before parsing the config?  that way people can define any JNDI name they want (as long as it starts with solr) and then refer to those names in the solrconfig.xml just like they can with system properties right now.\n\nI don't know much about JNDI to know how feasible it is to get a list of all names matching a prefix, but i'm assuming it's possible (even if it's inefficient, we only need to do it once on startup) "
        },
        {
            "author": "Stu Hood",
            "id": "comment-12524611",
            "date": "2007-09-04T04:21:29+0000",
            "content": "I like your idea about system properties being imported for use in solrconfig.xml, perhaps I'll get a chance to implement that sometime soon to replace this patch.\n\nThanks "
        },
        {
            "author": "Mo Chen",
            "id": "comment-12670268",
            "date": "2009-02-04T07:42:10+0000",
            "content": "convert JNDI name into properties by using <property> element in solrconfig.xml \nI got the same problem yesterday... and this is a solution following the concept of converting JNDI into properties.\n\nThe plan is to implement solr.xml's <property> element in solrconfig.xml, and append JNDI supporting to it.\n3 changes for the implementation:\n\n\n\tMove private method readProperties(Config cfg, Node node) from CoreContainer to Config,\n  use it to read <property> elements in solrconfig.xml during the contruction of Config,\n  and overwrite coreProperties before the process DOMUtil.substituteProperties.\n  \n     this ensure the mapped JNDI values only take effect in solrconfig.xml, but not the system scope\n     the moved method got a Config for the first argument already... so I think that will be ok\n\n\n\n\n\n\tCheck property values and replace all 'java:comp/env/xxx' format value into real JNDI value.\n  \n    I write  ${:java:comp/env/xxx}  for the JNDI ref string... not very good. better solution?\n\n\n\n\n\n\tAppend some default jndi mapping. In fact only one. The \"solr/home\" and \"solr.solr.home\"...\n  \n     the priority: <property> in solrconfig -> default jndi mapping -> core properties\n\n\n\n\nNow you can got JNDI values in solrconfig.xml like this:\n\n<property name=\"solr.solr.home\" value=\"java:comp/env/solr/home\" />\n<dataDir>${solr.solr.home:./solr}/data</dataDir>\n\n\n\n(Or just the second line, this mapping has been setted as default) "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12670643",
            "date": "2009-02-05T06:55:02+0000",
            "content": "Why should the dataDir be a special thing? Why not support JNDI values for all properties implicitly? We currently support two kinds of properties, the ones defined in solr.xml and the environment variables. As a logical extension, we can add JNDI variables too so that we don't need to duplicate JNDI properties again in solr.xml.\n\nI guess the property syntax will need to be changed a bit because ':' is used for default values. We can either escape the ':' in JNDI name or we can make the DOMUtil.substituteProperty method aware of this change. If we go this way, I think the only piece of code which would need to be changed in DOMUtil.substituteProperty method. "
        },
        {
            "author": "Mo Chen",
            "id": "comment-12670678",
            "date": "2009-02-05T09:07:02+0000",
            "content": "> Shalin Shekhar Mangar commented on SOLR-336:\n> --------------------------------------------\n> \n> Why should the dataDir be a special thing? Why not support JNDI values for all properties implicitly? We currently support two kinds of properties, the ones defined in solr.xml and the environment variables. As a logical extension, we can add JNDI variables too so that we don't need to duplicate JNDI properties again in solr.xml.\n\nEr, in fact I don't think dataDir is a special thing... I think any JNDI\nconfiguration is special thing, if it has the same meaning with a system\nproperty.\nThe dataDir is just a example \u2014 I added it just because it's the only\nspecificated one in the wiki document.\n\nBut I opposite to the concept of refering properties and JNDI values in\ndifferent syntax...\nfor example, if <dataDir>${java:comp/env/solr/home}/data</dataDir> and\n<dataDir>${solr.solr.home}/data</dataDir> are both supported\nwhich is the one I should put into the solrconfig.xml?\nThere might be two solr servers using this configuration... one of them has\na JNDI home, and the other one is started from command line.\n\nI think the problem is what we needed in configuration files is not a\nparameter from somewhere, but a server's status in fact.\nThe server can be installed with a console parameter, with a JNDI context\nfile, or with hardcode in web.xml, it's doesn't matter.\nI just want to know where the server's home is.\n\nSo, we either map both the JNDI value and system property into a same system\nstatus variable, or just use properties to do this, and map JNDI values to\nit.\nThat's why I only enabled JNDI lookup in property values.\nIf you think hardcode mapping into Config.java is to ugly, maybe a mapping\nproperties file in solr home dir will be a better choise?\n\nAnyway, thanks for replying\n\n> I guess the property syntax will need to be changed a bit because ':' is used for default values. We can either escape the ':' in JNDI name or we can make the DOMUtil.substituteProperty method aware of this change.\n\nYes, I totally agree with this.\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13580222",
            "date": "2013-02-17T17:08:50+0000",
            "content": "Cleaning up old JIRAs, re-open if necessary. "
        }
    ]
}