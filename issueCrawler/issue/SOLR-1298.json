{
    "id": "SOLR-1298",
    "title": "FunctionQuery results as pseudo-fields",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be helpful if the results of FunctionQueries could be added as fields to a document. \n\nCouple of options here:\n1. Run FunctionQuery as part of relevance score and add that piece to the document\n2. Run the function (not really a query) during Document/Field retrieval",
    "attachments": {
        "SOLR-1298.patch": "https://issues.apache.org/jira/secure/attachment/12427853/SOLR-1298.patch",
        "SOLR-1298-FieldValues.patch": "https://issues.apache.org/jira/secure/attachment/12427854/SOLR-1298-FieldValues.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12733620",
            "date": "2009-07-21T13:52:39+0000",
            "content": "I would only add that we probably don't want to add this to the actual response document returned, but rather attach them to an additional section like highlighting works.  Same really for score, actually too, but I digress. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12733621",
            "date": "2009-07-21T13:56:40+0000",
            "content": "Returning stuff in separate sections is a pain for correlation though.\nSee SOLR-705 for a proposal to add a meta section to documents. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12733624",
            "date": "2009-07-21T14:02:47+0000",
            "content": "Not sure about not adding it - what fields are returned is selectable, right? and it's not possible to obtain this information otherwise. Some time ago I implemented this for a client - it was before SOLR-243, but I used the same idea, i.e. to use a subclass of IndexReader that returns documents with added function fields (and score). "
        },
        {
            "author": "Chris Male",
            "id": "comment-12733631",
            "date": "2009-07-21T14:16:03+0000",
            "content": "In my patch in SOLR-773, I tackled this issue by creating the idea of a FieldValueSource, which mapped a name of a pseudo-field to an arbitrary source of data which could be computed at runtime.  For me it was distances, but it could also be the results of a FunctionQuery.  Since there was a mapping of name to data, it was possible to include or exclude the FieldValueSources from adding their information to the search results through the fl parameter. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12733646",
            "date": "2009-07-21T14:42:51+0000",
            "content": "SOLR-705 meta it is!  Sorry, I had come across that one a while ago and liked it, but forgotten about it.  +1 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12734010",
            "date": "2009-07-22T06:23:11+0000",
            "content": "+1\n\nI guess it should be returned like any other normal field "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12777946",
            "date": "2009-11-14T15:28:32+0000",
            "content": "we should also let search components add extra fields to the document.  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12789878",
            "date": "2009-12-13T11:45:35+0000",
            "content": "Dang, you know it's bad when you wake up in the morning and the first thing that comes into your head is what the interface should look like for some new feature in Solr.  \n\nAlas, having just finished SOLR-1297, I think we should simply make the &fl parameter be able to parse functions and, if need be, they can be materialized/executed as they are being retrieved by the Writer (using SOLR-1650 if implemented).\n\nThus, the interface for this would be:\n\n&fl=sum(x, y),id,a,b,c,score\n\n\nor\n\n&fl=id,sum(x, y),score\n\n\n\n&fl=*,sum(x, y),score\n\n\n\nSo, the output would be:\n\n...\n<str name=\"id\">foo</str>\n<float name=\"sum(x,y)\">40</float>\n<float name=\"score\">0.343</float>\n...\n\n\n "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12789879",
            "date": "2009-12-13T11:47:55+0000",
            "content": "we should also let search components add extra fields to the document. \n\nI think we could handle this via the ResponseBuilder by storing an <id, <name, value>> pairing in a map that the ResponseWriter could then consult when it needs it as it's streaming out the results.  Tricky part is what to do when there are no ids, I suppose. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12789880",
            "date": "2009-12-13T11:49:13+0000",
            "content": "Chris, could you isolate this particular part of your patch from SOLR-773? "
        },
        {
            "author": "Chris Male",
            "id": "comment-12789887",
            "date": "2009-12-13T12:44:53+0000",
            "content": "Hi Grant,\n\nI certainly can.  I hadn't thought about having a function as an fl parameter value, but that makes alot of sense and I can support that through my work as well.  I'll work on extracting the code today and will get a patch here ASAP. "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12789889",
            "date": "2009-12-13T13:07:31+0000",
            "content": "\nI certainly can. I hadn't thought about having a function as an fl parameter value, but that makes alot of sense and I can support that through my work as well. I'll work on extracting the code today and will get a patch here ASAP.\n\nAs far as I recall the fact the functions are specified in the fl parameter should still work with the FieldValueSource as it is at the moment. The registry enables you to register any value for any string key, in this case the string key is the function. "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12789890",
            "date": "2009-12-13T13:11:48+0000",
            "content": "Chris, another thing. You might want to update the FieldValueSource solution to work with SOLR-1644 (instead of the request context) "
        },
        {
            "author": "Chris Male",
            "id": "comment-12789891",
            "date": "2009-12-13T13:17:06+0000",
            "content": "Hi Uri,\n\nYup the functions as fl parameters works straight away with the FieldValueSource so no changes required there.  I will first chuck up a patch without SOLR-1644 so that it can be immediately reviewed, then I'll dive into how to update it to 1644 and will create another patch then. "
        },
        {
            "author": "Chris Male",
            "id": "comment-12789892",
            "date": "2009-12-13T13:39:00+0000",
            "content": "Attaching the patch taken from my SOLR-773 patch.  Adds in a FieldValueSource and FieldValueSourceRegistry, changes the SolrIndexSearcher to use FieldValueSources when building a document, and hooks this process into the ReponseWriters. "
        },
        {
            "author": "Chris Male",
            "id": "comment-12789896",
            "date": "2009-12-13T14:21:38+0000",
            "content": "Attached new patch which changes the names from FieldValueSource to FieldValues, and FieldValueSourceRegistry to FieldValuesRegistry, to avoid confusion with ValueSource. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12789898",
            "date": "2009-12-13T15:11:12+0000",
            "content": "A few comments and random thoughts on this feature in general:\n\n\tThink scalability... there should be a way to keep things streamable.  Some people will want to retrieve values for many documents (10K, 100K, or their whole index).  But of course there should be a way for a component to simply add values calculated all at once too.\n\tFor performance, providers of field values should be able to operate on multiple documents at once.  For example, providers may want to sort big blocks of docids and access in docid order for better performance (important for anything that accesses the index).  A value provider that needs to access another system would want to send multiple IDs in a batch.\n\tField value providers should be given context, including optionally the set of fields for the current document, and probably the request and response objects\n\tPerhaps this should be more generalized in that the value provider be a document mutator - it should be able to also change or remove other fields.  I believe this would also allow stuff like per-field security.  Field value providers should also be able to add multiple fields - it may not know ahead of time what extra fields a document has.\n\tshould work with highlighting... this way people don't have to store large text fields if they already have them in another system.\n\tkeep in mind that some people believe that derived fields (or meta fields) don't belong in the same place as other stored fields.  I think it probably depends on the exact usecase though.\n\tI'm not sure if SolrIndexSearcher is the right place for this or not though - perhaps its document() method should stick to just the stored fields?\n\tThink about how to name these fields nicer names... perhaps this could even include the \"select as\" ability to rename fields.\nOne thought: use an optional '=' or use the \"AS\" syntax\n  fl=foo=bar,dist=gdist(10,20,loc)  or \n  fl=foo AS bar, gdist(10,20,loc) AS dist  (more familiar to DB people?)\nAnother option for providing names that would only work with queries/function queries would be local params:\n  fl=\n{!key=dist}\ngdist(10,20,loc)\nbut that only works for queries so it's not as flexible\n\tIf we use the fl syntax for including function queries, then we should consider providing the ability to use multiple \"fl\" params.  This will make it easier for clients who want to tack something on w/o modifying other params.\n  If we provide multiple fl params, then an alternate way to specify aliases could be:\nfl.dist=gdist(10,20,loc)\n\tfl=foo is ambiguous... do we mean a function query or the field?... perhaps if it's a bare field name, then we treat it as a field unless it has localparams?\n  fl=\n{!func}\nfoo\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789906",
            "date": "2009-12-13T15:40:34+0000",
            "content": "hi Chris, Yonik,\ndid you check out SOLR-1566 ?  it is trying to achieve the same thing. It provides both streaming as well as pre-computed fields "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12789908",
            "date": "2009-12-13T15:46:42+0000",
            "content": "I like the idea of giving the providing a broader context (document, request, response). This will also allow them to operate on multiple documents in the response (whether it's the docset or the doclist).\n\nOne thing to take into consideration here is that one you introduce dependency between the fields, there must be a way to determine the ordering of the providers (as one provider might depend on fields generated by another provider).\n\nas for the \"<field> AS <alias>\" syntax. I think this should be consistent with the work in SOLR-1351 which is currently based on localparams. Perhaps there should be a common approach to handle aliases in requests.\n\nI think that the proper approach is to separate the stored fields from other \"fields.. perhaps even put it in a separate \"meta-data\" section under the document. But once you do that, again, for the sake of consistency, it would also be wise not to include these fields/functions in the \"fl\" parameter. So the \"fl\" parameter will refer to fields, and another parameter \"meta\" will refer to meta-data values.\n\nfl={!func}foo\n+1 or even func:foo. Then you can have things like \"url:<url>\" or \"file:<file path>\" or even \"db:<db alias + field>\" "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789909",
            "date": "2009-12-13T16:10:54+0000",
            "content": "perhaps even put it in a separate \"meta-data\" section under the document\n\nThis has been discussed earlier. The meta section is not a clean idea. We should put them as normal fields. \n\nInstead of inventing a new syntax , let us use the local params syntax. we do not have to try to have any  similarity with SQL . "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794069",
            "date": "2009-12-23T15:19:55+0000",
            "content": "fl=foo is ambiguous... do we mean a function query or the field?... perhaps if it's a bare field name, then we treat it as a field unless it has localparams?\nfl=\nUnknown macro: {!func} \nfoo\n\nIt is and isn't ambiguous, right?  The result should be the same in that the value for that field is loaded (although I suppose it has implications that it would now be possible to load non-stored, single valued fields if we treat it as a function).  FWIW, for the sort by function case, I checked to see if it is a field first, then a function, then puke. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794076",
            "date": "2009-12-23T15:30:11+0000",
            "content": "I think that the proper approach is to separate the stored fields from other \"fields.. perhaps even put it in a separate \"meta-data\" section under the document. But once you do that, again, for the sake of consistency, it would also be wise not to include these fields/functions in the \"fl\" parameter. So the \"fl\" parameter will refer to fields, and another parameter \"meta\" will refer to meta-data values.\n\nI think they should be inline, as they are just values associated with a document.  I think putting it in some other list is sticking too literally to what Lucene calls a field, which I don't think Solr has to do that.  One could easily imagine a Solr component that brought in a database or other storage repository for supplementary fields and it should all be seamless to the client.   \n\nIf we step back and think about the use case for this functionality it is that one wants the output of the function closely associated with the document.  I don't want to have to go look it up in some other list while I am iterating over my results when all the other values I'm displaying/using are right there associated with the document.  That being said, it could be useful to add an attribute that indicates it is a generated name, but in reality, that is inferred by the field name anyway, as in:\n\n<doc>\n<field name=\"pow(foo,2)\">64</field>\n<field name=\"foo\">8</field>\n</doc>\n\n\n\nI'd even argue that highlighter results should be inline, too, but that is a different issue and a bigger can of worms since it has a well used API already. "
        },
        {
            "author": "Chris Male",
            "id": "comment-12794081",
            "date": "2009-12-23T15:45:07+0000",
            "content": "Just a couple of thoughts about the implementation of this:\n\nshould work with highlighting... this way people don't have to store large text fields if they already have them in another system. I'm not sure if SolrIndexSearcher is the right place for this or not though - perhaps its document() method should stick to just the stored fields?\n\nFrom what I can see the Highlighter pulls documents from the SolrIndexSearcher as well through document() so the patch should already support highlighting.  If we move the process away from the SolrIndexSearcher, which I understand the case for, then we need to move all components away from using document(), otherwise the same document could be represented in different ways depending on whether its retrieved via the #document() one time or via whatever way we build.  Equally, we need custom components to do the same.\n\nI do like the idea of changing to a DocumentMutator which is given a context and is able to add/remove fields.  This will then work seamlessly with having the values inline with the documents.\n\nShould I go ahead and mockup a patch for something like this? "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12794111",
            "date": "2009-12-23T17:13:08+0000",
            "content": "I'm not sure if SolrIndexSearcher is the right place for this or not though - perhaps its document() method should stick to just the stored fields?\n\nBoth Chris' patch here and Noble's on SOLR-1566 take the approach of modifying SolrIndexSearcher.doc() for part of the solution.  Not saying this is right or wrong, but I think it would be useful to document here the rationale about why not to do it.  Is it just b/c that method is expected to do, more or less, what the Lucene IndexSearcher does? "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12794250",
            "date": "2009-12-23T22:32:19+0000",
            "content": "I think they should be inline, as they are just values associated with a document. I think putting it in some other list is sticking too literally to what Lucene calls a field, which I don't think Solr has to do that. One could easily imagine a Solr component that brought in a database or other storage repository for supplementary fields and it should all be seamless to the client.\n\nI definitely agree that one shouldn't see a field in Solr as a field in Lucene. That said, I think do have a tendency to see a field in Solr as somehow bound to the Solr schema. \n\nOne thing to notice is that eventually we end up with the same discussion regarding this feature in the context of different issues, let it be highlighting or field collapsing. In some cases it feel just \"right\" to return the data as a field in a document, in other places it feels \"right\" to have as something else. It is true that when you interact with solr directly (specially if you do it manually) you certainly know what queries you send, what functions you request and what you should expect in the result. But from experience, a lot of times you try to automate things a bit and creating a well structured and descriptive protocols is the safe way to enable that. \n\nI don't want to have to go look it up in some other list while I am iterating over my results when all the other values I'm displaying/using are right there associated with the document.\n\nHaving a sub-section under each documents still associates it with the document. The way I see it, It's like OOP... you can have a Person class that holds all the information of the person it it as primitive fields, or you can group related data, like address info, int a separate Address class. \n\nThat being said, it could be useful to add an attribute that indicates it is a generated name\n\nThat's one way to group fields together, but if you're already doing that, then why not go all the way? If you need to distinguish between generated and non-generated names, why not make it simpler and just separate the two in a different list? (To continue the analogies line I started above ) it's like XML, you can have a single level hierarchy were each element defines attributes to relate it to other elements, but a more suitable solution would just be to group all related elements under one parent element.\n\nI'd even argue that highlighter results should be inline, too, but that is a different issue and a bigger can of worms since it has a well used API already.\nIn some cases it might be (well it just is) more appropriate to have the highlighting inlined. In other cases it might not be possible, specially with some of the latest requests to have highlighting functionality available for arbitrary text loaded from anywhere (which I believe will lead for a highlighting component/requestHandler that will be independent of the query component).\n\nNot saying this is right or wrong, but I think it would be useful to document here the rationale about why not to do it. Is it just b/c that method is expected to do, more or less, what the Lucene IndexSearcher does?\nI guess so... I guess SolrIndexSearcher is in fact a Lucene IndexSearcher which is the source for this association. In some ways I think it's also relates a bit to the response structure (not directly though, but conceptually)... if the IndexSearcher represents Lucene and the document contains fields coming from other sources as well, perhaps this functionality of gathering all these fields (/metadata ) should be done in a higher level where SolrIndexSearcher just serves as on \"field source\". The main reason why Chris's patch puts this functionality in the doc() method of the SolrIndexSearcher is simply because it's the easiest and the simplest solution right now... and I don't thing there's nothing wrong with that... simple is good! Even with this solution as it is, the \"field sources\" are still abstracted away in the form of a \"FieldValues\" or \"DocumentMutator\", so architecture-wise I don't see leaving it as is will compromise anything. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12794306",
            "date": "2009-12-24T04:16:52+0000",
            "content": "Both Chris and me are trying to achieve more or less the same thing. just that SOLR-1566 is a bit more ambitious in scope.\n\n@Uri , I would request you to take a look at the patch in SOLR-1566 also . \n\n\nI guess, all of us agree upon the fact that  we need a generic way to add non-Lucene fields to a SolrDocument . The fields could be single-valued/multivalued . Say a function returns a List<int> should be valid too.(I even say it could even be a NamedList) . This is useful for a lot of usecases. \n\nAs long as we can achieve this functionality in a performant way, it is fine. Let us converge our efforts and bring this to a resolution ASAP.   "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872426",
            "date": "2010-05-27T22:05:02+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13011250",
            "date": "2011-03-25T15:51:16+0000",
            "content": "With SOLR-2443 and SOLR-1566 adding functions will be easy "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13011562",
            "date": "2011-03-26T04:57:23+0000",
            "content": "With SOLR-2443, we can now parse the function query, but it still needs to actually write the values:\n\n &fl=id,score,mul(popularity,popularity)\n\n\ngives:\n\n<doc>\n    <str name=\"id\">GB18030TEST</str>\n    <float name=\"score\">1.0</float>\n    <str name=\"mul(popularity,popularity)\">now what...</str></doc>\n\n\n\naliasing also works, so:\n\n &fl=id,score,pop2=mul(popularity,popularity)\n\n\ngives:\n\n<doc>\n    <str name=\"id\">GB18030TEST</str>\n    <float name=\"score\">1.0</float>\n    <str name=\"pop2\">now what...</str></doc>\n\n\n\nIf someone else wants to look into how to get the values filled up, that would be great! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043667",
            "date": "2011-06-03T16:46:25+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13046134",
            "date": "2011-06-08T19:00:42+0000",
            "content": "This has been in trunk for a while \u2013 any problems should get their own issue. "
        },
        {
            "author": "Bill Bell",
            "id": "comment-13048272",
            "date": "2011-06-12T08:35:45+0000",
            "content": "Does this actually do the function results? Or does it always return \"now what...\" ?\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13053212",
            "date": "2011-06-22T12:27:46+0000",
            "content": "Hi, I'm using solr example data on trunk.\n\nIf I post q=ipod&fl=score,price , Solr returns score and price as expected.\nBut if I post q=ipod&fl=score,log(price) , Solr returns score, the value of log(price) and rest of all fields. "
        },
        {
            "author": "James Wilson",
            "id": "comment-13813822",
            "date": "2013-11-05T10:14:45+0000",
            "content": "I just added https://issues.apache.org/jira/browse/SOLR-5423 but someone brought this story to my attention. Feel free to combine the stories. "
        }
    ]
}