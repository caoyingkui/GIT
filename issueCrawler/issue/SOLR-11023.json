{
    "id": "SOLR-11023",
    "title": "Need SortedNumerics/Points version of EnumField",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.0",
            "7.1",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "although it's not a subclass of TrieField, EnumField does use \"LegacyIntField\" to index the int value associated with each of the enum values, in addition to using SortedSetDocValuesField when docValues=\"true\" multivalued=\"true\".\n\nI have no idea if Points would be better/worse then Terms for low cardinality usecases like EnumField, but either way we should think about a new variant of EnumField that doesn't depend on LegacyIntField/LegacyNumericUtils.intToPrefixCoded and uses SortedNumericDocValues.",
    "attachments": {
        "SOLR-11023.patch": "https://issues.apache.org/jira/secure/attachment/12878272/SOLR-11023.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-20T18:06:45+0000",
            "content": "Bulk editing 27 jiras matching the following JQL query to include the \"numeric-tries-to-points label...\n\n\n(issue in linkedIssues(SOLR-10807) OR issue in linkedIssues(SOLR-8396) OR issue in linkedIssues(SOLR-9995)) AND project = SOLR AND status != CLOSED\n\n\n\nthese 27 jiras can be identified by searching for the comment string \"20170720hossbulkeditlabel\"\n\nemail notification is being suppressed. ",
            "author": "Hoss Man",
            "id": "comment-16095109"
        },
        {
            "date": "2017-07-20T18:46:15+0000",
            "content": "I'm going to start working on this, but i'm still unclear if \"points\" is the best way to go for the \"very low cardinality + all values are small positive ints\" situation.\n\nMichael McCandless & Adrien Grand: In terms of disk usage/search performance do you have any sense of what makes more sense for enum type usecases?  using (int) dimensional Points vs just using simple indexed terms Terms?  (I frankly don't understand the points \"encoding\" and segment merging costs well enough to make any educated assumptions) ",
            "author": "Hoss Man",
            "id": "comment-16095183"
        },
        {
            "date": "2017-07-20T23:03:56+0000",
            "content": "step#0: refactor the init logic and xml parsing into an EnumMapping class.\n\nI was initially thinking we could follow in the steps of CurrencyField and inject a new superclass above EnumField (which would default to points) and the (legacy) EnumField could subclass it and override as needed to use LegacyNumeric support where needed ... but the more i look at it the more of a pain in the ass that appears to be.\n\nthe problem being I suspect we'll really want the \"new\" field type to extend PointField (or maybe even IntPointField?) but we definitely don't want the legacy EnumField to transitively extend PointField.\n\nAlternative that's occuring to me now: make the new field type work a lot like CurrencyField, where it wraps a concrete (int) fieldtype and delegates to for create/sort/etc \u2013 only handling the int/string converstion before/after.  then the legacy type just overrides what fieldtype that hidden inner field uses?\n\nfrankly... EnumField has enough weird little quirks about it, that since we know we want to deprecate it and remove it in 8, I'm tempted to leave it alone as much as possible and take the \"i feel dirty\" hit of cut/pasting all the bits we do really need to keep into a new class that has nothing in common with it other then that they are both FieldTypes. ",
            "author": "Hoss Man",
            "id": "comment-16095525"
        },
        {
            "date": "2017-07-22T12:37:31+0000",
            "content": "I'm going to start working on this, but i'm still unclear if \"points\" is the best way to go for the \"very low cardinality + all values are small positive ints\" situation.\n\nI think points are not a good fit in that case, they will use more disk and be slower at exact queries, even though exact queries are probably common on an enum field. Even if the user wants to run range queries, the low cardinality of the field should make the inverted index more efficient than points. I'd really store it like a string field but just add more logic in the field type to restrict what values may be used? ",
            "author": "Adrien Grand",
            "id": "comment-16097303"
        },
        {
            "date": "2017-07-25T01:19:55+0000",
            "content": "\nI think points are not a good fit in that case, they will use more disk and be slower at exact queries, ...\n\nRight, that's kind of what i was suspecting based on what i've read about points in the past \u2013 really low cardinality like this didn't seem appropriate.\n\nI'd really store it like a string field ...\n\nThe hitch there is that, historically, when using \"solr.EnumField\" it's been possible to change the (String) \"values\" in the enumConfig.xml w/o breaking anything because only the (int) ordinals for those values were ever indexed (or put in docValues) ... and ideally we still want to do that.\n\nSo I think we really still want to use ints for the store/index/docvalues and deal with all the String/label conversion only in response writing and query parsing.   Obviously we'll still want to use NumericUtils.intToSortableBytes for the indexed bytes so that our range queries are still \"numeric\" and not \"alphabetical\"\n\n\n\nI'm about to go off-line for 2 weeks, so here's a patch w/ my current work in progress...\n\n\n\tSOLR-5927 related test config beef up\n\tbeef up existing test code a bit so that our enum has more then 10 values (to sanity check against potential \"1 < 11 < 2\" range query mistakes)\n\t\n\t\tadd several nocommit comments about test coverage that seems to be missing\n\t\n\t\n\trefactors the EnumConfig parsing up into a new AbstractEnumField super class of EnumField\n\t\n\t\tclones EnumField into a new \"HuperDuperEnumField\" sibling class\n\t\tmodify HuperDuperEnumField to use SortedNumericDV (and equiv query) instead of SortedSetDV\n\t\n\t\n\tupdate test configs and SolrTestCaseJ4 to randomize HuperDuperEnumField when randomizing in \"point\" fields (i guess really it's just \"not trie fields\" at this point)\n\n\n\nobviously the big item still TODO is removing the existing LegacyIntField code from HuperDuperEnumField and picking a decent name.\n\nIf anyone wants to pick up & continue this patch while i'm gone, by all means please do.\n ",
            "author": "Hoss Man",
            "id": "comment-16099360"
        },
        {
            "date": "2017-07-25T08:13:24+0000",
            "content": "So I think we really still want to use ints for the store/index/docvalues and deal with all the String/label conversion only in response writing and query parsing. Obviously we'll still want to use NumericUtils.intToSortableBytes for the indexed bytes so that our range queries are still \"numeric\" and not \"alphabetical\"\n\nIt sounds good to me. ",
            "author": "Adrien Grand",
            "id": "comment-16099688"
        },
        {
            "date": "2017-07-25T19:50:50+0000",
            "content": "I marked this issue explicitly as a Blocker for 7.0.  ",
            "author": "Steve Rowe",
            "id": "comment-16100647"
        },
        {
            "date": "2017-08-03T18:52:30+0000",
            "content": "WIP patch, hopefully code complete, more testing needed (described by Hoss'ss nocommits in EnumFieldTest).\n\nChanges from Hoss'ss patch: Most nocommits are resolved.  I renamed HuperDuperEnumField to EnumFieldType. I decided not to support uninversion in EnumFieldType (I couldn't figure out how to make it work), and also to require docValues, since I think it would be a trap to allow a situation where sorting isn't supported over a field that claims to support arbitrary sorting over the enum values.  I've added a test to ensure that an exception is thrown when docvalues aren't enabled for an EnumFieldType field. ",
            "author": "Steve Rowe",
            "id": "comment-16113293"
        },
        {
            "date": "2017-08-04T00:34:54+0000",
            "content": "More complete WIP patch, almost done.\n\nThe tests are mostly fleshed out; there is one remaining nocommit, to add a test of set queries over an enum field.\n\nAlso, the docs need fixing up to mention the new type and the fact that the old type is deprecated.\n\nI created SOLR-11193 for problems with multi-valued EnumField; I don't plan on blocking 7.0 for fixes there.  I've put assumes in EnumFieldTest to avoid testing the problematic functionality with EnumField. ",
            "author": "Steve Rowe",
            "id": "comment-16113742"
        },
        {
            "date": "2017-08-04T20:33:35+0000",
            "content": "Hopefully final patch, including a CHANGES entry and ref guide updates.\n\nI'll commit once precommit, a 100-iteration beasting of EnumFieldTest, and all Solr tests pass. ",
            "author": "Steve Rowe",
            "id": "comment-16114943"
        },
        {
            "date": "2017-08-04T23:31:56+0000",
            "content": "Final patch, including some precommit, test, and doc fixes.\n\n100 beasting iterations of EnumFieldTest all passed, as did precommit and all Solr tests.\n\nCommitting shortly. ",
            "author": "Steve Rowe",
            "id": "comment-16115101"
        },
        {
            "date": "2017-08-04T23:37:40+0000",
            "content": "Commit 41f6ae55ba2cbd01848130f2be3db2cea48e34a4 in lucene-solr's branch refs/heads/branch_7_0 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=41f6ae5 ]\n\nSOLR-11023: Added EnumFieldType, a non-Trie-based version of EnumField, and deprecated EnumField in favor of EnumFieldType.\n\n Conflicts:\n\tsolr/core/src/java/org/apache/solr/schema/EnumField.java\n\tsolr/core/src/test/org/apache/solr/schema/EnumFieldTest.java ",
            "author": "ASF subversion and git services",
            "id": "comment-16115107"
        },
        {
            "date": "2017-08-04T23:37:43+0000",
            "content": "Commit ca0696492382e4f44d48c399986a489a82281de0 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ca06964 ]\n\nSOLR-11023: Added EnumFieldType, a non-Trie-based version of EnumField, and deprecated EnumField in favor of EnumFieldType. ",
            "author": "ASF subversion and git services",
            "id": "comment-16115108"
        },
        {
            "date": "2017-08-04T23:37:46+0000",
            "content": "Commit 9627d1db5dccd6dc9c0c307065628efea621d8e5 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9627d1d ]\n\nSOLR-11023: Added EnumFieldType, a non-Trie-based version of EnumField, and deprecated EnumField in favor of EnumFieldType. ",
            "author": "ASF subversion and git services",
            "id": "comment-16115109"
        },
        {
            "date": "2017-08-05T14:15:08+0000",
            "content": "Commit c58bbaa6cabe91c3823d2e9c6395379d987fec60 in lucene-solr's branch refs/heads/branch_7_0 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c58bbaa ]\n\nSOLR-11023: add docValues=\"true\" to an enum field declaration in schema.xml, so that EnumFieldType, which requires docValues, stops causing TestDistributedSearch to fail ",
            "author": "ASF subversion and git services",
            "id": "comment-16115406"
        },
        {
            "date": "2017-08-05T14:15:10+0000",
            "content": "Commit 5d632c0a0e8769b512a365a98d348dd3d5ef0bbc in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5d632c0 ]\n\nSOLR-11023: add docValues=\"true\" to an enum field declaration in schema.xml, so that EnumFieldType, which requires docValues, stops causing TestDistributedSearch to fail ",
            "author": "ASF subversion and git services",
            "id": "comment-16115407"
        },
        {
            "date": "2017-08-05T14:15:12+0000",
            "content": "Commit 3f9e748202ab8619af83f093ba4739f5a1e5c57b in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3f9e748 ]\n\nSOLR-11023: add docValues=\"true\" to an enum field declaration in schema.xml, so that EnumFieldType, which requires docValues, stops causing TestDistributedSearch to fail ",
            "author": "ASF subversion and git services",
            "id": "comment-16115408"
        },
        {
            "date": "2017-08-07T23:21:16+0000",
            "content": "thanks for finishing this steve! ",
            "author": "Hoss Man",
            "id": "comment-16117543"
        },
        {
            "date": "2017-10-17T11:04:12+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16207438"
        }
    ]
}