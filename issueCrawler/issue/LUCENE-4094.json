{
    "id": "LUCENE-4094",
    "title": "Randomize file.encoding",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "general/test"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "4.0-BETA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Stated in the code:\n\n    // TODO we can't randomize this yet (it drives ant crazy) but this makes tests reproduce\n    // in case machines have different default charsets...\n    sb.append(\" -Dargs=\\\"-Dfile.encoding=\" + System.getProperty(\"file.encoding\") + \"\\\"\");\n\n\n\nBut this should work without any problems with junit4 because communication streams are separate and we're decoding output properly (or so I hope). \n\nTry and see what happens",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-30T20:47:55+0000",
            "content": "This would be really nice. The limitation before, if i remember right, was in ant-junit, because\nby changing the default charset of the forked jvm, it would also change the encoding of the output from the test runner:\nthis caused it to go crazy.\n\nIt would be nice if junit4 could somehow separate these two concerns: if this could somehow work, imagine how tests running with\na default charset like UTF-16LE would actually fail when they rely upon the system charset and shouldnt, even if they use all \nascii in their tests like they usually do. ",
            "author": "Robert Muir",
            "id": "comment-13286028"
        },
        {
            "date": "2012-05-30T20:51:47+0000",
            "content": "junit4 is already default encoding independent (it uses its own communication channel). I haven't tested this intensively though so I'll give it a shot locally first and them if everything works well, switch the testing framework to randomize file.encoding. ",
            "author": "Dawid Weiss",
            "id": "comment-13286036"
        },
        {
            "date": "2012-07-05T08:12:46+0000",
            "content": "Follow-up discussion wrt overriding file.encoding:\nhttp://markmail.org/message/q4eeac7q6fjalbtd ",
            "author": "Dawid Weiss",
            "id": "comment-13406902"
        },
        {
            "date": "2012-07-05T09:58:27+0000",
            "content": "I totally disagree with everything the jdk developers are saying. They tend to just whine when we find bugs in their shit.\n\nwe should continue to do this: its important to seek out these default charset bugs (this is because of their stupid design). ",
            "author": "Robert Muir",
            "id": "comment-13406946"
        },
        {
            "date": "2012-07-05T10:08:37+0000",
            "content": "I understand their argument (\"combination not encountered in practice\") but I disagree with the claim it should justify crappy code. The default charset should be independent of the OS-filesystem interaction. It should just work with UTF-16.\n\nAnyway, when I run our stuff with enforced UTF-16 lots of weird things start to happen. new FileReader(file), benchmarks run forever (will provide a seed) and such. I'll commit in one by one and then we can start testing/ fixing locally. ",
            "author": "Dawid Weiss",
            "id": "comment-13406949"
        },
        {
            "date": "2012-07-11T23:12:44+0000",
            "content": "hoss20120711-manual-post-40alpha-change ",
            "author": "Hoss Man",
            "id": "comment-13412335"
        }
    ]
}