{
    "id": "SOLR-5617",
    "title": "Default SolrResourceLoader restrictions may be too tight",
    "details": {
        "affect_versions": "4.6",
        "status": "Open",
        "fix_versions": [
            "6.0"
        ],
        "components": [],
        "type": "Task",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "SOLR-4882 introduced restrictions for the Solr class loader that cause resources outside the instanceDir to fail to load.  This is a very good goal, but what if you have common resources like included config files that are outside instanceDir but are still fully inside the solr home?\n\nI can understand not wanting to load resources from an arbitrary path, but the solr home and its children should be about as trustworthy as instanceDir.\n\nIdeally I'd like to have anything that's in ${solr.solr.home} trusted automatically.  If I need to define a system property to make this happen, I'm OK with that \u2013 as long as I don't have to turn off the safety checking entirely.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13864505",
            "date": "2014-01-07T18:33:33+0000",
            "content": "Here's a stacktrace from my attempted start on 4.6.0 without the option to allow unsafe resource loading.  The solr home is /index/solr4:\n\n\nERROR - 2014-01-07 14:37:05.493; org.apache.solr.common.SolrException; null:org.apache.solr.common.SolrException: SolrCore 's1build' is not available due to init failure: Could not load config file /index/solr4/cores/s1_0/solrconfig.xml\n        at org.apache.solr.core.CoreContainer.getCore(CoreContainer.java:825)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:293)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:201)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1476)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:499)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1086)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:428)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1020)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n        at org.eclipse.jetty.server.Server.handle(Server.java:370)\n        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:494)\n        at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:982)\n        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:1043)\n        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:865)\n        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:240)\n        at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)\n        at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:667)\n        at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n        at java.lang.Thread.run(Thread.java:724)\nCaused by: org.apache.solr.common.SolrException: Could not load config file /index/solr4/cores/s1_0/solrconfig.xml\n        at org.apache.solr.core.CoreContainer.createFromLocal(CoreContainer.java:532)\n        at org.apache.solr.core.CoreContainer.create(CoreContainer.java:599)\n        at org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:253)\n        at org.apache.solr.core.CoreContainer$1.call(CoreContainer.java:245)\n        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:166)\n        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n        at java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n        at java.util.concurrent.FutureTask.run(FutureTask.java:166)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        ... 1 more\nCaused by: org.apache.solr.common.SolrException: org.xml.sax.SAXParseException; systemId: solrres:/solrconfig.xml; lineNumber: 7; columnNumber: 70; An include with href '../../../config/common/luceneMatchVersion.xml'failed, and no fallback element was found.\n        at org.apache.solr.core.Config.<init>(Config.java:148)\n        at org.apache.solr.core.Config.<init>(Config.java:86)\n        at org.apache.solr.core.SolrConfig.<init>(SolrConfig.java:129)\n        at org.apache.solr.core.CoreContainer.createFromLocal(CoreContainer.java:529)\n        ... 11 more\nCaused by: org.xml.sax.SAXParseException; systemId: solrres:/solrconfig.xml; lineNumber: 7; columnNumber: 70; An include with href '../../../config/common/luceneMatchVersion.xml'failed, and no fallback element was found.\n        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.createSAXParseException(ErrorHandlerWrapper.java:198)\n        at com.sun.org.apache.xerces.internal.util.ErrorHandlerWrapper.fatalError(ErrorHandlerWrapper.java:177)\n        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:441)\n        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:368)\n        at com.sun.org.apache.xerces.internal.impl.XMLErrorReporter.reportError(XMLErrorReporter.java:325)\n        at com.sun.org.apache.xerces.internal.xinclude.XIncludeHandler.reportError(XIncludeHandler.java:2326)\n        at com.sun.org.apache.xerces.internal.xinclude.XIncludeHandler.reportFatalError(XIncludeHandler.java:2321)\n        at com.sun.org.apache.xerces.internal.xinclude.XIncludeHandler.emptyElement(XIncludeHandler.java:948)\n        at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.scanStartElement(XMLNSDocumentScannerImpl.java:353)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl$FragmentContentDriver.next(XMLDocumentFragmentScannerImpl.java:2717)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentScannerImpl.next(XMLDocumentScannerImpl.java:607)\n        at com.sun.org.apache.xerces.internal.impl.XMLNSDocumentScannerImpl.next(XMLNSDocumentScannerImpl.java:116)\n        at com.sun.org.apache.xerces.internal.impl.XMLDocumentFragmentScannerImpl.scanDocument(XMLDocumentFragmentScannerImpl.java:489)\n        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:835)\n        at com.sun.org.apache.xerces.internal.parsers.XML11Configuration.parse(XML11Configuration.java:764)\n        at com.sun.org.apache.xerces.internal.parsers.XMLParser.parse(XMLParser.java:123)\n        at com.sun.org.apache.xerces.internal.parsers.DOMParser.parse(DOMParser.java:237)\n        at com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderImpl.parse(DocumentBuilderImpl.java:300)\n        at org.apache.solr.core.Config.<init>(Config.java:134)\n        ... 14 more\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13864741",
            "date": "2014-01-07T22:00:53+0000",
            "content": "I have figured out a workaround.  I've got a config structure that heavily uses xinclude and symlinks.  By changing things around so that only the symlinks traverse upwards and xinclude only refers to \"local\" files, I no longer need to enable unsafe loading.\n\nI still think that it would be useful to fix this issue, but the urgency is gone. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13867287",
            "date": "2014-01-09T23:32:56+0000",
            "content": "Hi Shawn,\nin fact the code was written exactly to support symbolic links! So your workaround is actually wanted.\n\nThe idea of also using the Solr Home directory is theoretically possible, if you would extend SolrResourceLoader.getResource to also look in the parent ResourceLoader. There is already work done that this may work in the future (if ResourceLoaders would have the same parent-child relations like ClassLoaders), but currently its not easy possible.\n\nThere is currently also another elegant workaround: If the file is not in the config dir directly, SolrResourceLoader looks in the classpath (through Core's ClassLoader) and tries to find the file from there. So the easiest for you is to add the shared directory as additional \"lib\" folder to the solrconfig.xml of all cores. You may need to pack the files as JAR, but we can improve solr here, that it might also accept non-jared class path components for lib directives. Thats in fact the most clean solution, also working on windows without symlinks. Also this is easy for the user to understand: Just add another lib / classes / whatevername folder where your shared config files are. "
        }
    ]
}