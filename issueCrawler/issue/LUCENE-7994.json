{
    "id": "LUCENE-7994",
    "title": "Use int/int hash map for int taxonomy facet counts",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ]
    },
    "description": "Int taxonomy facets today always count into a dense int[], which is wasteful in cases where the number of unique facet labels is high and the size of the current result set is small.\n\nI factored the native hash map from LUCENE-7927 and use a simple heuristic (customizable by the user by subclassing) to decide up front whether to count sparse or dense.  I also made loading of the large children and siblings int[] lazy, so that they are only instantiated if you really need them.",
    "attachments": {
        "LUCENE-7994.patch": "https://issues.apache.org/jira/secure/attachment/12892358/LUCENE-7994.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16205719",
            "date": "2017-10-16T10:57:24+0000",
            "content": "Patch; I think it's ready.\n\nFloatTaxonomyFacets could also be improved but let's save that for a later issue. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16206059",
            "date": "2017-10-16T15:28:20+0000",
            "content": "Michael McCandless Issues like LUCENE-7525 would benefit from a int-int hashmap - is it possible for it to be added to something more common rather than the facets module? ",
            "author": "Michael Braun"
        },
        {
            "id": "comment-16206176",
            "date": "2017-10-16T16:45:53+0000",
            "content": "The key value rehash function is pretty simplistic in those implementations. I've had bad experiences with collisions on such trivial functions in real life (in HPPC); these can vary from slow-downs to actual practical deadlocks (not to mention intentional adversaries) [1].\n\nThe current implementation in HPPC uses a different key mixing strategy [2], combined with a unique per-instance seed to minimize the practical impact of such clashes. The performance cost is there, but it's not huge... something to consider?\n\n[1] http://issues.carrot2.org/browse/HPPC-80 http://issues.carrot2.org/browse/HPPC-103\n[2] https://github.com/carrotsearch/hppc/blob/master/hppc/src/main/java/com/carrotsearch/hppc/BitMixer.java ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16206903",
            "date": "2017-10-17T01:55:10+0000",
            "content": "I am confused about the heuristic, can you explain it?\n\n\nreturn taxoReaderSize < 1024 || sumTotalHits < taxoReaderSize/10;\n\n\n\nFor the first condition, Isn't taxoReaderSize essentially the cardinality? Why would we want a sparse hashtable in this low-cardinality case, I would think the opposite (a simple array should be best, it will be small).\n\nAnd the second condition confuses me too, because we seem to be comparing apples and oranges. Wouldn't we instead only look at sumTotalHits/maxDoc (what % of the docs the query matches) when taxoReaderSize > 1024k? If its only 10% of the docs in the collection, we infer that an array could be very wasteful... of course we don't know the distribution but its just a heuristic.\n ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16207815",
            "date": "2017-10-17T15:49:50+0000",
            "content": "The current implementation in HPPC uses a different key mixing strategy [2], combined with a unique per-instance seed to minimize the practical impact of such clashes. The performance cost is there, but it's not huge... something to consider?\n\nWhoa, this looks very cool Dawid Weiss!  Do you remember roughly what performance impact?  I think rather than add a full dependency on HPPC, I would copy over just the specific native maps we are using here; the license is ASL2 (thank you!!).  Does that sound OK?\n\nFor the first condition, Isn't taxoReaderSize essentially the cardinality? Why would we want a sparse hashtable in this low-cardinality case, I would think the opposite (a simple array should be best, it will be small).\n\nDuh, you're right, the logic is backwards for that first clause \u2013 we should just use an array if the cardinality is lowish (< 1024).  And I agree on the 2nd clause too!  I'll fix ... ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16207865",
            "date": "2017-10-17T16:16:06+0000",
            "content": "Michael McCandless Issues like LUCENE-7525 would benefit from a int-int hashmap - is it possible for it to be added to something more common rather than the facets module?\n\nHmm, I'm not sure how we (facet module) could share this utility class with the analysis module?  Maybe the analysis module should depend on HPPC, or poach the specific hash map implementation it needs?  Though, maybe that issue should instead use a perfect hash? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16207921",
            "date": "2017-10-17T17:05:11+0000",
            "content": "Do you remember roughly what performance impact?\n\nWell, in stress tests it was a significant number, but these are fairly unrealistic in the sense that they don't do anything else but map edits... In reality I don't think it'll play a crucial role. Those hash collisions, on the other hand, were possible to hit with trivial map-iteration-copying blocks and they were nasty (and people rightfully didn't and couldn't anticipate them to happen). So I went for \"better slower than sorry\" direction...\n\nI think rather than add a full dependency on HPPC, I would copy over just the specific native maps we are using here; the license is ASL2 (thank you!!). Does that sound OK?\n\nAbsolutely, take what you want. fastutil is also ASL2 and it's very high-quality too, so feel free to take whatever you wish. Koloboke has some nice ideas too (for example storing int key/value as consecutive items in a single array for better cache locality. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16215604",
            "date": "2017-10-23T18:29:21+0000",
            "content": "Another iteration; I think it's ready.\n\nI decided to just add a dependency on HPPC rather than micro-fork; HPPC is fun to work with!  I used IntIntScatterMap and LongIntScatterMap, since I don't every copy from one hashed structure to another.\n\nI also folded in Robert Muir's feedback. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16215610",
            "date": "2017-10-23T18:30:45+0000",
            "content": "Those hash collisions, on the other hand, were possible to hit with trivial map-iteration-copying blocks and they were nasty (and people rightfully didn't and couldn't anticipate them to happen). So I went for \"better slower than sorry\" direction...\n\nI agree that is the right tradeoff!  Reduce the chances of adversarial cases ...\n\nThanks Dawid Weiss. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16215621",
            "date": "2017-10-23T18:36:28+0000",
            "content": "Thanks Mike, the heuristic makes sense now when reading the code! ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16215640",
            "date": "2017-10-23T18:50:16+0000",
            "content": "I don't mind if you just copy the code, Mike, but it's always a pleasant feeling to have the library used.  Upgrade the version before you commit though \u2013 there's a minor performance improvement in addTo, which I see is used.\n\nhttps://github.com/carrotsearch/hppc/releases/tag/0.7.3 ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16215652",
            "date": "2017-10-23T18:57:15+0000",
            "content": "Woops, I will upgrade to 0.7.3; thanks Dawid Weiss! ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16234381",
            "date": "2017-11-01T16:59:05+0000",
            "content": "Commit 77e6e291bf34ffaa6f1afc2d9c64779f4b250b65 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=77e6e29 ]\n\nLUCENE-7994: use int/int scatter map to count facets when number of hits is small relative to number of unique facet labels ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16234399",
            "date": "2017-11-01T17:10:14+0000",
            "content": "Commit ff35365b51b47900d73748fbe1eb05ca4c4de098 in lucene-solr's branch refs/heads/branch_7x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff35365 ]\n\nLUCENE-7994: use int/int scatter map to count facets when number of hits is small relative to number of unique facet labels ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16237619",
            "date": "2017-11-03T13:53:53+0000",
            "content": "Commit 4add3016aff336ed547601cf6a4259d6902596e6 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4add301 ]\n\nLUCENE-7994: Add facets lib/ directory to IntelliJ setup ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16237620",
            "date": "2017-11-03T13:53:55+0000",
            "content": "Commit 1d2787464f4709f4960716dd3314c7123324b15b in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1d27874 ]\n\nLUCENE-7994: Add facets lib/ directory to IntelliJ setup ",
            "author": "ASF subversion and git services"
        }
    ]
}