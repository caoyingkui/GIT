{
    "id": "LUCENE-4252",
    "title": "Detect/Fail tests when they leak RAM in static fields",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/test"
        ],
        "type": "Test",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We run our junit tests without firing up a JVM each time.\n\nBut some tests initialize lots of stuff in @BeforeClass and don't properly null it out in an @AfterClass, which can cause a subsequent test in the same JVM to OOM, which is difficult to debug.\n\nInspiration for this was me committing Mike's cool TestPostingsFormat, which forgot to do this: then we were seeing OOMs in several jenkins runs.\n\nWe should try to detect these leaks in LuceneTestCase with RAMUsageEstimator and fail the test.",
    "attachments": {
        "LUCENE-4252.patch": "https://issues.apache.org/jira/secure/attachment/12537806/LUCENE-4252.patch",
        "sfi.patch": "https://issues.apache.org/jira/secure/attachment/12538512/sfi.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-25T04:34:03+0000",
            "content": "just a prototype, seems to work.\n\nE.g. if i svn up to r1365256, before I committed the fix to TestPostingsFormat (http://svn.apache.org/viewvc/lucene/dev/trunk/lucene/core/src/test/org/apache/lucene/index/TestPostingsFormat.java?r1=1365257&r2=1365256&pathrev=1365257), then TestPostingsFormat fails like this:\n\n\n[junit4:junit4] <JUnit4> says cze\u015b\u0107! Master seed: 4A806862EF7FBAA2\n[junit4:junit4] Executing 1 suite with 1 JVM.\n[junit4:junit4] Suite: org.apache.lucene.index.TestPostingsFormat\n[junit4:junit4] OK      0.27s | TestPostingsFormat.test\n[junit4:junit4]    > (@AfterClass output)\n[junit4:junit4]   2> NOTE: test params are: codec=Lucene40: {=MockFixedIntBlock(blockSize=769), vqvfc=MockFixedIntBlock(blockSize=769), ouan=PostingsFormat(name=Memory doPackFST= false), vhhpavin=MockFixedIntBlock(blockSize=769)}, sim=RandomSimilarityProvider(queryNorm=true,coord=true): {}, locale=fi_FI, timezone=SystemV/AST4ADT\n[junit4:junit4]   2> NOTE: Linux 3.2.0-24-generic amd64/Sun Microsystems Inc. 1.6.0_24 (64-bit)/cpus=8,threads=1,free=145473456,total=317390848\n[junit4:junit4]   2> NOTE: All tests run in this JVM: [TestPostingsFormat]\n[junit4:junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestPostingsFormat -Dtests.seed=4A806862EF7FBAA2 -Dtests.slow=true -Dtests.locale=fi_FI -Dtests.timezone=SystemV/AST4ADT -Dtests.file.encoding=ISO-8859-1\n[junit4:junit4]   2> \n[junit4:junit4] ERROR   0.00s | TestPostingsFormat (suite)\n[junit4:junit4]    > Throwable #1: java.lang.RuntimeException: Please fix the static leaks in your test in a @AfterClass, your test seems to hang on to approximately 125704200 bytes.\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleSetupAndRestoreClassEnv.after(TestRuleSetupAndRestoreClassEnv.java:282)\n\n ",
            "author": "Robert Muir",
            "id": "comment-13421995"
        },
        {
            "date": "2012-07-25T06:18:00+0000",
            "content": "I think this patch should probably just count all the statics after the test instead of\nsubtracting from beforeClass: we don't care. We might have tests creating huge things in static {}\nwhich it won't catch today. ",
            "author": "Robert Muir",
            "id": "comment-13422030"
        },
        {
            "date": "2012-07-25T06:44:58+0000",
            "content": "Cool thing! +1 to add this check  ",
            "author": "Uwe Schindler",
            "id": "comment-13422039"
        },
        {
            "date": "2012-07-25T10:52:54+0000",
            "content": "Static initializers will be very difficult because they're executed before the actual test begins (a side effect of JUnit architecture). You could roll out each test in a separate class loader to overcome this but it'd create large overhead on memory (class GCs, reinitializations, etc.).\n\nI like this nonetheless - it should catch a lot of common use case scenarios. Things like initializing static variables in other classes (or thread locals) will remain a problem but we can probably deal with these later on somehow.\n\nThe only thing is that I'd rather move it to a separate class (and add it to the class rule chain). While it may seem like adding unnecessary complexity putting all the checks in a single rule will eventually lead to a tangled blob that is hard to read and analyze.\n\nI may do it when I come back, Robert \u2013 assign to me or create a new issue. ",
            "author": "Dawid Weiss",
            "id": "comment-13422154"
        },
        {
            "date": "2012-07-25T12:20:19+0000",
            "content": "+1, thanks Robert! ",
            "author": "Michael McCandless",
            "id": "comment-13422188"
        },
        {
            "date": "2012-07-25T12:39:57+0000",
            "content": "I already set this threshold as low as 512KB and was fixing the minor leaks last night...\nlemme update the patch (still at 10MB) with my idea to catch static initializers. ",
            "author": "Robert Muir",
            "id": "comment-13422203"
        },
        {
            "date": "2012-07-25T12:41:17+0000",
            "content": "\nThe only thing is that I'd rather move it to a separate class (and add it to the class rule chain). While it may seem like adding unnecessary complexity putting all the checks in a single rule will eventually lead to a tangled blob that is hard to read and analyze.\n\nWe could do this, I didnt want to make all test stacktraces longer though  ",
            "author": "Robert Muir",
            "id": "comment-13422204"
        },
        {
            "date": "2012-07-25T12:50:00+0000",
            "content": "heres the update patch, it just doesnt do the part before, and looks at the static fields at the end.\n\nwe dont care how they were initialized, we dont want them hogging up RAM! ",
            "author": "Robert Muir",
            "id": "comment-13422212"
        },
        {
            "date": "2012-07-25T12:50:59+0000",
            "content": "assigning to Dawid when he gets back.\n\nits not a 100% check and not even a total must we commit it: but i was reviewing this stuff manually before so its saves time. ",
            "author": "Robert Muir",
            "id": "comment-13422214"
        },
        {
            "date": "2012-07-25T20:46:40+0000",
            "content": "I didnt want to make all test stacktraces longer though \n\nI honestly don't think this is such a big issue \u2013 stack traces are for inspecting what went wrong; if something did you look at it top-to-bottom anyway. Some people are uncomfortable seing a long stack trace (or a nested one); we can apply some filtering to them but I'd say let's just keep them verbose. Better show more than needed than hide what's important.\n\nwith my idea to catch static initializers.\n\nI looked at the patch but I didn't see where this idea went; perhaps I missed something. Anyway, not important for now, I'll revisit after I'm back home. ",
            "author": "Dawid Weiss",
            "id": "comment-13422596"
        },
        {
            "date": "2012-07-26T00:33:26+0000",
            "content": "\nI looked at the patch but I didn't see where this idea went; perhaps I missed something. Anyway, not important for now, I'll revisit after I'm back home.\n\nWell unlike the first patch, it does no subtraction, it just counts the ram usage estimation of all static fields. if they are null, this is of course 0. we don't really care where they were created.\n\nso now if i add this line to TestDemo:\n\nstatic long huge[] = new long[2 * 1024 * 1024];\n\n\n\nIt fails like this:\n\n[junit4:junit4] ERROR   0.00s | TestDemo (suite)\n[junit4:junit4]    > Throwable #1: java.lang.RuntimeException: Please fix the static leaks in your test in a @AfterClass, your test seems to hang on to approximately 16777232 bytes.\n[junit4:junit4]    > \tat org.apache.lucene.util.TestRuleSetupAndRestoreClassEnv.after(TestRuleSetupAndRestoreClassEnv.java:253)\n\n ",
            "author": "Robert Muir",
            "id": "comment-13422772"
        },
        {
            "date": "2012-07-28T20:18:04+0000",
            "content": "Yep, looks good to me and makes sense. When I was thinking about static initializers I had in mind twisted scenarios like:\n\nstatic {\n  KlassB.staticField = new byte [gazillion];\n}\n\n\nbut this will be nearly impossible to detect given that you can fan out from a static initializer to other classes etc. Doesn't make sense to try to make it super complex.\n\nWhat we could do though is to make it not only a lint rule but also an additional cleanup rule, similar to system property invariant guard and cleanup. We could then add this automatic static field cleanup (on the suite class) to the set of class rules on LuceneTestCase. Perhaps it'd make it cleaner compared to manual cleanups done in @AfterClass or similar hooks? ",
            "author": "Dawid Weiss",
            "id": "comment-13424414"
        },
        {
            "date": "2012-07-31T07:48:02+0000",
            "content": "This is useful in general. I've added this to randomized testing package, modifying Robert's code slightly to:\n\n\n\texclude static final fields (typically constants that cannot be erased),\n\texclude fields of primitive types,\n\taccount for superclasses of the suite class (optional but turned on by default),\n\tinclude sorted RAM usage info for accounted fields in the assertion thrown.\n\n\n\nExclusion rules are customizable via rule subclassing (accept(Field) method). ",
            "author": "Dawid Weiss",
            "id": "comment-13425594"
        },
        {
            "date": "2013-03-22T16:41:32+0000",
            "content": "[branch_4x commit] Dawid Weiss\nhttp://svn.apache.org/viewvc?view=revision&revision=1383842\n\nLUCENE-4252: Detect/Fail tests when they leak RAM in static fields. ",
            "author": "Commit Tag Bot",
            "id": "comment-13610872"
        },
        {
            "date": "2013-05-10T10:33:42+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654002"
        }
    ]
}