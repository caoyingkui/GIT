{
    "id": "SOLR-4485",
    "title": "Consider making QParsers throw SyntaxError if field being searched is not indexed",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "For historical reasons that i can't even really remember right now most query parsing in solr don't seem to care if the fields they are asked to search are indexed.  Using hte 4x example schema (where the content field is stored but not indexed), all of these queries return a 200 status code, and match 0 documents...\n\n\nhttp://localhost:8983/solr/select?defType=lucene&q=ignored_xx:foo\nhttp://localhost:8983/solr/select?qf=ignored_xx&defType=edismax&q=foo\nhttp://localhost:8983/solr/select?qf=ignored_xx&defType=dismax&q=foo\nhttp://localhost:8983/solr/select?q={!field%20f=ignored_xx}foo\nhttp://localhost:8983/solr/select?q={!term%20f=ignored_xx}foo\n\n\n\nI'm opening this issue to gather feedback on whether people think we should treat this as a bug that should be fixed, or if folks think it's better to leave things as they stand.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13583637",
            "date": "2013-02-21T22:50:23+0000",
            "content": "After watching someone on IRC struggle to understand why \": -foo:bar\" was giving them unexpected results (answer: foo wasn't indexed so it was matching all docs) my opinion is that in general, we should probably make this return a use error in most of the straight forward cases.\n\nI can imagine some hypothetical arguments in favor of things like dismax/edismax allowing things like qf/pf to contain fields that aren't indexed, and only throw an error if none of them exist, but in general i think any code query parsing code path that complains if a field doesn't exist should probably complain if the field exists but is not indexed. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13583901",
            "date": "2013-02-22T04:21:52+0000",
            "content": "-1\n\nThis is at odds with the concept of docvalues fields.\n\nwhether a field is indexed \"inverted\" or \"forward\" is a user decision. \n\nBut we can certainly now search unindexed fields: e.g. SOLR-4477\n\notherwise I'm happy to revert SOLR-4477. Seriously. I just think its the right way to go. but we need to be consistent. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13583966",
            "date": "2013-02-22T06:38:48+0000",
            "content": "This is at odds with the concept of docvalues fields.\n\nSorry, I used an imprecise choice of words that didn't take into account the recent addition of \"docValues\" as a field attribute that is independent of the \"indexed\" attribute.\n\nA better way to phrase my suggestion would be: \"Consider making QParsers throw SyntaxError if a field being searched is not at all searchable in any way, instead of the current behavior of create a query (clause) that matches nothing\"\n\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13584272",
            "date": "2013-02-22T13:56:30+0000",
            "content": "I agree with the idea, but why shove it into queryparser?\nqueryparsers are already a god object in solr and responsible for way too much.\n\nInstead, make throwing the exception the 'else' case in XXX.getField/Range/etcQuery, \nwhich queryparsers call, so it doesnt have to be part of every parser. \n\nIts already way too hard to make a custom queryparser. Exhibit A is the totally broken TextField.getFieldQuery! "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13584299",
            "date": "2013-02-22T14:17:31+0000",
            "content": "-0 : This is a pretty big change in the user facing query syntax, and will cause tons of applications out there to start crashing with exceptions. So at least it must be controlled by luceneMatchVersion or a config-param so people can upgrade binaries but keep old behavior.\n\nAlso, (e)disMax must probably be changed to catch that exception from lucene-parser and do some : escaping or something, since it's supposed to never crash on you  "
        }
    ]
}