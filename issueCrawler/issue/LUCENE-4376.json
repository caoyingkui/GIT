{
    "id": "LUCENE-4376",
    "title": "Add Query subclasses for selecting documents where a field is empty or not",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/query/scoring"
        ],
        "type": "Improvement",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "Users frequently wish to select documents based on whether a specified sparsely-populated field has a value or not. Lucene should provide specific Query subclasses that optimize for these two cases, rather than force users to guess what workaround might be most efficient. It is simplest for users to use a simple pure wildcard term to check for non-empty fields or a negated pure wildcard term to check for empty fields, but it has been suggested that this can be rather inefficient, especially for text fields with many terms.\n\n1. Add NonEmptyFieldQuery - selects all documents that have a value for the specified field.\n2. Add EmptyFieldQuery - selects all documents that do not have a value for the specified field.\n\nThe query parsers could turn a pure wildcard query (asterisk only) into a NonEmptyFieldQuery, and a negated pure wildcard query into an EmptyFieldQuery.\n\nAlternatively, maybe PrefixQuery could detect pure wildcard and automatically \"rewrite\" it into NonEmptyFieldQuery.\n\nMy assumption is that if the actual values of the field are not needed, Lucene can much more efficiently simply detect whether values are present, rather than, for example, the user having to create a separate boolean \"has value\" field that they would query for true or false.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-11T23:24:10+0000",
            "content": "See LUCENE-3593 ",
            "author": "Robert Muir",
            "id": "comment-13453545"
        },
        {
            "date": "2012-09-11T23:43:14+0000",
            "content": "I don't see how the filter from LUCENE-3593 would be used within a Query.\n\nAs an example, derived from a recent email inquiry, the user may enter a query such as:\n\n\nfoo bar AND imageUrl:*\n\n\n\nMeaning, find documents with those two keywords where the imageUrl field is not empty.\n\nSure, if they are writing raw Lucene they can manually apply the filter, but I want to have that filtering applied within the Query.\n\nFurther, maybe only a much smaller subset of documents meet the non-empty filter requirement. I would want the Query to be as fast as possible. ",
            "author": "Jack Krupansky",
            "id": "comment-13453558"
        },
        {
            "date": "2012-09-11T23:50:33+0000",
            "content": "then use a ConstantScoreQuery ",
            "author": "Robert Muir",
            "id": "comment-13453562"
        },
        {
            "date": "2012-09-12T00:12:37+0000",
            "content": "Okay, so would it be straightforward and super-efficient for PrefixQuery to do exactly that if the prefix term is zero-length?\n\nI think that would transparently provide the desired benefit for parsed queries. ",
            "author": "Jack Krupansky",
            "id": "comment-13453570"
        },
        {
            "date": "2012-09-12T07:47:31+0000",
            "content": "The filter is already there, just QueryParser does not support this. To make this work for your use case, you can override Lucene's/Solr's QueryParser to return ConstantScoreQuery() with the LUCENE-3593 filter as replacement for the \"field:*\" only query. The positive and negative variant works using the boolean to the filter.\n\nTo conclude: The Query is already there, no need for the 2 new classes. The wanted functionality is: \n\nnew ConstantScoreQuery(new FieldValueFilter(String field, boolean negate))\n\n\n\nTo find all document with any term in the field use negate=false, otherwise negate=true. There is absolutely no need for a Query.\n\nOkay, so would it be straightforward and super-efficient for PrefixQuery to do exactly that if the prefix term is zero-length?\n\nIt would be straight forward, but we should not do this as the default (although PrefixQuery could rewrite to that). The problem is that it implicitely needs to build the FieldCache for that field, so automatism is no-go here. If you need that functionality, modify QueryParser. ",
            "author": "Uwe Schindler",
            "id": "comment-13453811"
        }
    ]
}