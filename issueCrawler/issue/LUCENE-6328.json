{
    "id": "LUCENE-6328",
    "title": "Make Filter.clone and Filter.setBoost throw an UnsupportedOperationException",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "The rewrite process uses a combination of calls to clone() and setBoost(boost) in order to rewrite queries. This is a bit weird for filters given that they were not originally designed to care about scoring.\n\nUsing a filter directly as a query fails unit tests today since filters do not pass the QueryUtils checks: it is expected that cloning and changing the boost results in an instance which is unequal. However existing filters do not take into account the getBoost() parameter inherited from Query so this test fails.\n\nI think it would be less error-prone to throw an UnsupportedOperationException for clone() and setBoost() on filters and disable the check in QueryUtils for filters.\n\nIn order to keep rewriting working, filters could rewrite to a CSQ around themselves so that clone() and setBoost() would be called on the CSQ.",
    "attachments": {
        "LUCENE-6328.patch": "https://issues.apache.org/jira/secure/attachment/12702168/LUCENE-6328.patch",
        "queryextendsfilter-20150307.patch": "https://issues.apache.org/jira/secure/attachment/12703232/queryextendsfilter-20150307.patch",
        "queryextendsfilter-20150307b.patch": "https://issues.apache.org/jira/secure/attachment/12703263/queryextendsfilter-20150307b.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14345042",
            "author": "Adrien Grand",
            "date": "2015-03-03T13:10:48+0000",
            "content": "Here is a patch that makes filters rewrite to a CSQ around themselves and throw an UnsupportedOperationException in setBoost() and clone().\n\nFor cloning, maybe another option would be to make clone() abstract in Filter so that existing filters would fail to compile unless implemented instead of relying on the default impl in Query? "
        },
        {
            "id": "comment-14350561",
            "author": "Paul Elschot",
            "date": "2015-03-06T16:42:58+0000",
            "content": "I am probably late with this, but anyway. Using a stricter result type (subclass of the result type) in a subclass method was not available in Java at the time of LUCENE-1518, but it is now.\n\nThat means that there is an alternative that was not available at the time of LUCENE-1518. [corrected, see next post].\n\nI have not tried this, but my guess is that this approach will simplify the code in many places. "
        },
        {
            "id": "comment-14350574",
            "author": "Paul Elschot",
            "date": "2015-03-06T16:55:38+0000",
            "content": "Actually that should be: ... make Weight a subclass of DocIdSet.  This involves using the same method in Weight to return a Scorer as the method that is/was used in DocIdSet to return a DISI.\n\nWith some luck this can then be repeated for Query and Filter: make Query a subclass of Filter. This involves using the same method in Query to return a Weight as the method that is/was used in Filter to return a DocIdSet. "
        },
        {
            "id": "comment-14350840",
            "author": "David Smiley",
            "date": "2015-03-06T20:24:31+0000",
            "content": "FWIW that does sounds more natural.  Filter's don't score; Query's do (or can). "
        },
        {
            "id": "comment-14350866",
            "author": "Robert Muir",
            "date": "2015-03-06T20:46:22+0000",
            "content": "that doesnt quite work because the two are incongruent: Weight is top-level and DocIdSet is per-segment. "
        },
        {
            "id": "comment-14351006",
            "author": "Paul Elschot",
            "date": "2015-03-06T22:15:00+0000",
            "content": "does sound more natural\n\ndoesnt quite work because the two are incongruent: Weight is top-level and DocIdSet is per-segment.\n\nHmmm, perhaps Weight needs to split: first per query and then per-segment? "
        },
        {
            "id": "comment-14351042",
            "author": "Paul Elschot",
            "date": "2015-03-06T22:29:38+0000",
            "content": "Weight already has this:\n\npublic abstract Scorer scorer(LeafReaderContext context, Bits acceptDocs) throws IOException;\n\n\n\nThis means the method that returns a (subclass of) DocIdSet gets a LeafReaderContext argument, which means that the Query-Segment split is almost there: This method would need to be split into a method that returns a (subclass of a) DocIdSet and a method that returns a (subclass of a) DISI. "
        },
        {
            "id": "comment-14351053",
            "author": "Robert Muir",
            "date": "2015-03-06T22:38:13+0000",
            "content": "but it returns the iterator (subclass of DocIdSetIterator)... thats the only place where covariant override might work. Otherwise, DocIDSet just doesn't have a parallel there at all. its wedged in between Weight and Scorer and would be an added abstraction/level of indirection. "
        },
        {
            "id": "comment-14351502",
            "author": "Paul Elschot",
            "date": "2015-03-07T10:24:09+0000",
            "content": "This patch makes Query extend Filter, it is against trunk of 12 Feb 2015 just before LUCENE-1518 (Filter extends Query).\nThe patch only shows the direction I meant, compilation of other code still fails.\nIt introduces IndexDocIdSet as a superclass of Weight. "
        },
        {
            "id": "comment-14351504",
            "author": "Paul Elschot",
            "date": "2015-03-07T10:28:39+0000",
            "content": "The reason to introduce IndexDocIdSet is that the current DocIdSet has an isCacheable() method which is not needed here. "
        },
        {
            "id": "comment-14351628",
            "author": "Paul Elschot",
            "date": "2015-03-07T15:08:51+0000",
            "content": "Actually, it does make sense to cache a Weight.In that case both the docIds and their score values need to be stored in the cache. "
        },
        {
            "id": "comment-14351816",
            "author": "Paul Elschot",
            "date": "2015-03-07T22:05:03+0000",
            "content": "The 20150307b patch uses IndexDocIdSet, Query extends Filter, and to my surprise, all tests pass in core.\n\nI'm not happy with the UnsupportedOperationException that I put in Query in order to extend Filter, but still this could be a start. "
        },
        {
            "id": "comment-14352033",
            "author": "Paul Elschot",
            "date": "2015-03-08T13:16:18+0000",
            "content": "I took this a little further, and then I ran into the still incomplete Weight needsScores implementation. For example SpanWeight does not yet have a needsScores argument, and IndexSearcher.createNormalizedWeight can be called with needsScores == false, but in that case there is no point normalization.\n\nTo conclude, it might be nice to make Weight a subclass of DocIdSet, but at the moment there is no real need for this, unless someone needs to cache docids and score values and reuse the current docidset caches for that.\n\nOther than that, doing this would not bring functionality that is not currently available: mostly QueryWrapperFilter (Query to Filter) and ConstantScoreQuery (Filter to Query) work well already, leaving the actual class structure underlying Query and Filter less important. "
        }
    ]
}