{
    "id": "LUCENE-8581",
    "title": "Change LatLonShape encoding to use 4 BYTES Per Dimension",
    "details": {
        "components": [],
        "status": "Patch Available",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "LatLonShape\u00a0tessellated triangles currently use a relatively naive encoding with the first four dimensions\u00a0as the bounding box of the triangle and the last three dimensions as the vertices of the triangle.\u00a0To encode the x,y vertices in the last three dimensions\u00a0requires bytesPerDim to be set to 8, with 4 bytes for the x & y axis, respectively.\u00a0We can reduce bytesPerDim\u00a0to 4 by encoding the index(es) of the vertices shared by the bounding box along with the\u00a0orientation of the triangle. This also opens the door for supporting CONTAINS queries.",
    "attachments": {
        "LUCENE-8581.patch": "https://issues.apache.org/jira/secure/attachment/12950182/LUCENE-8581.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16704965",
            "author": "Ignacio Vera",
            "content": "Attached an encoding approach that uses 4 bytes per dimensions, 7 dimensions n total. The last dimensions contains the information to reconstruct the triangle encoded on the first three bits.\n\nTo be able to use only three bits, we force the tessellation to produce triangles always in CCW orientation so we do not need to keep track of that information.  ",
            "date": "2018-11-30T16:14:08+0000"
        },
        {
            "id": "comment-16707612",
            "author": "Nicholas Knize",
            "content": "Thanks Ignacio Vera\n\n\u00a0setTriangleValue((aLon), (aLat), (bLon), (bLat), (cLon), (cLat));\n\nI think it would be good to keep the calls to encodeLatitude and encodeLongitude here. The tessellator already encodes polygon triangles, so there's no need to call the encode methods twice.\n\nsetTriangleValue(t.getLon(0), t.getLat(0), t.getLon(1), t.getLat(1), t.getLon(2), t.getLat(2));\n\nJust keep the calls to getEncodedX getEncodedY to unnecessarily encode twice.\n\n\n\nint ccw = GeoUtils.orient(aLon, aLat, bLon, bLat, cLon, cLat);\nif (ccw == 1) {\n  throw new IllegalArgumentException(\"Orientation of the triangle cannot be clock-wise\");\n}\n\n\nEncoding should be\u00a0orientation agnostic, but congruent (order preserved). I think we should remove the orientation dependency.\n\n\u00a0\n\nif (minY == aY && minX == aX) {\n...\n\nFor maintenance I'd really like to reduce this tree of conditionals. Its pretty hard to follow. However, I think we could do that in a separate issue/patch iteration (this is in sandbox after all). For now, lets at least make sure\u00a0this code is well documented so it's clear what's going on.\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "date": "2018-12-03T18:11:07+0000"
        },
        {
            "id": "comment-16708434",
            "author": "Ignacio Vera",
            "content": "I think it would be good to keep the calls to encodeLatitude and encodeLongitude here.\n+1\nEncoding should be orientation agnostic, but congruent (order preserved). I think we should remove the orientation dependency.\nI still think it is worthy to encode triangles always with the same orientation so we do not need to add that information for the encoding. I was having troubles in this part but now I think it was because a was working with the original triangle not with the encoded values.\nFor maintenance I'd really like to reduce this tree of conditionals.\nI totally agree, I need to see which pattern can use here to improve readability.\n\nI attach a new version. It is missing documentation and maybe some test for the encoding.\n\nJust for my curiosity. when creating a triangle in the tessellator points get\u00a0order. is that really needed? what is the purpose?\n\nprotected Triangle(Node a, Node b, Node c) {\n      this.vertex = new Node[] {a, b, c};\n      // sort nodes by morton value\n      Arrays.sort(this.vertex, (x, y) -> x.compareLat(y));\n    }\n\n ",
            "date": "2018-12-04T09:07:07+0000"
        },
        {
            "id": "comment-16708520",
            "author": "Adrien Grand",
            "content": "It seems that giving all triangles the same orientation (either by requiring an orientation or by changing the orientation of triangles that don't have the expected orientation) and rotating vertices so that the first one always has eg. minx as its x coordinate prior to encoding would help reduce the number of conditionals? Is the reason why we think we should preserve ordering that we expect it to be easier later to record which edges of the triangles are shared with the polygon?\n\nRegarding nested if/else statements, we don't seem to be interpreting the value of each bit independently, so maybe we should just have 2^3 constants instead that describe how to reconstruct the triangle from the box and the additional x,y coordinates, eg. public static final MINX_MINY_MAXX_MAXY_X_Y = 0 instead of  FIRST_BIT | SECOND_BIT | THIRD_BIT? ",
            "date": "2018-12-04T10:18:44+0000"
        },
        {
            "id": "comment-16708888",
            "author": "Ignacio Vera",
            "content": "\u00a0\nit seems that giving all triangles the same orientation and rotating vertices would help reduce the number of conditionals?\nYes, with this strategy you reduce the possible combinations to 2^3.\nis the reason why we think we should preserve ordering that we expect it to be easier later to record which edges of the triangles are shared with the polygon?\nI don't think it will matter, you should still be able to recognise each edge and mark it accordingly.\nmaybe we should just have 2^3 constants instead\u00a0 of FIRST_BIT | SECOND_BIT | THIRD_BIT?\nThat\u00a0should make the code more readable. ",
            "date": "2018-12-04T15:41:09+0000"
        },
        {
            "id": "comment-16709022",
            "author": "Nicholas Knize",
            "content": "Just for my curiosity. when creating a triangle in the tessellator points get\u00a0order. is that really needed? what is the purpose?\nThat can be removed. It's legacy from before the selective indexing approach was used. It sounds like that will solve a big part of the problem\n\n+1 for using 2^3 constants. And I also think we can continue to iterate on the readability part in a separate patch. I don't\u00a0think it should\u00a0hold up the bigger benefit of a smaller index.\n\n\u00a0\n\n\u00a0 ",
            "date": "2018-12-04T17:39:11+0000"
        },
        {
            "id": "comment-16710425",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m  3s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 10s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 10s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 10s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 10s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 10s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n   6m 36s \n  sandbox in the patch passed.  \n\n\n  \n   \n  11m 34s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8581 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12950518/LUCENE-8581.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / b0e6a92 \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 20 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/131/testReport/ \n\n\n modules \n C: lucene/sandbox U: lucene/sandbox \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/131/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-12-05T18:03:13+0000"
        },
        {
            "id": "comment-16713880",
            "author": "Ignacio Vera",
            "content": "New iteration over the patch. Main changes are:\n\n\tChange LatLonShape tests to encode/decode the resulting triangles the same way LatLonShape does at index time to ensure orientation consistency.\n\tRemove ordering logic for polygons (tessellator) and lines.\n\tImprove readability of encoding logic following Adrien's recommendation.\n\t\u00a0Add test for LatLonShapeEncoding\n\n ",
            "date": "2018-12-09T07:10:57+0000"
        },
        {
            "id": "comment-16717550",
            "author": "Ignacio Vera",
            "content": "I have added more test to the encoding. Note that the actual orientation of the encoding is CW instead of CCW.\u00a0\n\nI have noticed that if I do the encoding in CCW, then I got into issues with bounding box queries. This test using the polygon logic to check if indexed shape is a hit.\u00a0 ",
            "date": "2018-12-11T17:08:08+0000"
        },
        {
            "id": "comment-16718189",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 4 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 25s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 24s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 24s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 24s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 24s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 24s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n   3m 11s \n  sandbox in the patch passed.  \n\n\n  \n   \n   6m 30s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8581 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12951387/LUCENE-8581.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 61e4486 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/136/testReport/ \n\n\n modules \n C: lucene/sandbox U: lucene/sandbox \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/136/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-12-11T23:35:26+0000"
        },
        {
            "id": "comment-16718977",
            "author": "Ignacio Vera",
            "content": "Attached a new version that includes changes done in LUCENE-8605. Test validators for bounding box uses the same logic than in the query. It makes tests more stable against numerical issues.\n\nThe last thing remaining is which orientation should we use in the encoding (currently CW).\u00a0\n\n\u00a0 ",
            "date": "2018-12-12T13:36:37+0000"
        },
        {
            "id": "comment-16719097",
            "author": "Adrien Grand",
            "content": "The last thing remaining is which orientation should we use in the encoding (currently CW).\n\nIs my assumption correct that with your changes to tests, whether we pick CW or CCW doesn't matter and is just a matter of convention?\n\nI still suspect that we could greatly simplify the encoding logic by first rotating vertices of the triangles so that we always have eg. ax == minx so that we never need to check this condition later on? ",
            "date": "2018-12-12T15:33:26+0000"
        },
        {
            "id": "comment-16719248",
            "author": "Ignacio Vera",
            "content": "Is my assumption correct that with your changes to tests, whether we pick CW or CCW doesn't matter and is just a matter of convention?\nYes, that is the idea because the differences are only numeric and they were showing in the tests for sub-atomic values. A good example is \u00a0TestLatLonShape.testLUCENE8454, it will be a hit in CW and a non-hit in CCW.\nsimplify the encoding\nI got you, new patch rotates edges and indeed simplifies the logic. ",
            "date": "2018-12-12T17:37:17+0000"
        },
        {
            "id": "comment-16719877",
            "author": "Ignacio Vera",
            "content": "New patch handling degenerated case where all longitude on the triangle are equal but lat are different. In this case we need to make sure that we start from one of the points of the triangle that is part of the bounding box.\u00a0 ",
            "date": "2018-12-13T07:54:41+0000"
        },
        {
            "id": "comment-16721336",
            "author": "Adrien Grand",
            "content": "+1 Let's get Nicholas Knize's opinion about whether to go with CW or CCW order? ",
            "date": "2018-12-14T12:16:51+0000"
        }
    ]
}