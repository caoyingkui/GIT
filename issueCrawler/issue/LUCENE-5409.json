{
    "id": "LUCENE-5409",
    "title": "ToParentBlockJoinCollector.getTopGroups returns empty Groups",
    "details": {
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/search"
        ],
        "affect_versions": "4.6",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ]
    },
    "description": "A bug is observed to cause unstable results returned by the getTopGroups function of class ToParentBlockJoinCollector.\n\nIn the scorer generation stage, the ToParentBlockJoinCollector will automatically rewrite all the associated ToParentBlockJoinQuery (and their subqueries), and save them into its in-memory Look-up table, namely joinQueryID (see enroll() method for detail). Unfortunately, in the getTopGroups method, the new ToParentBlockJoinQuery parameter is not rewritten (at least users are not expected to do so). When the new one is searched in the old lookup table (considering the impact of rewrite() on hashCode()), the lookup will largely fail and eventually end up with a topGroup collection consisting of only empty groups (their hitCounts are guaranteed to be zero).\n\nAn easy fix would be to rewrite the original BlockJoinQuery before invoking getTopGroups method. However, the computational cost of this is not optimal. A better but slightly more complex solution would be to save unrewrited Queries into the lookup table.",
    "attachments": {
        "local_history.patch": "https://issues.apache.org/jira/secure/attachment/12625511/local_history.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13878749",
            "author": "Michael McCandless",
            "content": "Hi Peng, this is a good catch!  Probably we could key on the .origChildQuery since we already carry that one along.\n\nDo you have a test case showing the issue? ",
            "date": "2014-01-22T15:14:53+0000"
        },
        {
            "id": "comment-13878809",
            "author": "Peng Cheng",
            "content": "Hi Michael, I'll be working on the test case this evening.\nThanks a lot for the confirmation. I've read your book. ",
            "date": "2014-01-22T16:21:22+0000"
        },
        {
            "id": "comment-13879447",
            "author": "Peng Cheng",
            "content": "I was trying to work on a test case but have encountered the following problem:\n\nThe bug will only be triggered if a ToParentBlockJoinQuery can be rewritten into another query with a different hashcode (Uwe said this is a common situation). But I've experimented with several simple Query and they all have identical hashcode after the rewriting. The query that failed in my project was a very long CustomScoreQuery (used for feature engineering in text analysis), I wouldn't imagine to put that into the unit test. So can you show me an example of a compound query that doesn't preserve hashcode? I can finish other works. ",
            "date": "2014-01-23T05:18:14+0000"
        },
        {
            "id": "comment-13879858",
            "author": "Michael McCandless",
            "content": "Hmm, maybe a BooleanQuery containing just a single TermQuery?\n\nOr, maybe create a custom Query for this test that wraps another query but has its own \"unusual\" hashCode() impl... ",
            "date": "2014-01-23T11:10:39+0000"
        },
        {
            "id": "comment-13880597",
            "author": "Peng Cheng",
            "content": "Still doesn't work, this is my test case, perhaps I still need to implement a Query with custom rewrite and hashcode\n\n  public void testRewriteHash() throws IOException\n  {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir);\n\n    final List<Document> docs = new ArrayList<Document>();\n\n    docs.add(makeJob(\"java\", 2007));\n    docs.add(makeJob(\"python\", 2010));\n    docs.add(makeResume(\"Lisa\", \"United Kingdom\"));\n    w.addDocuments(docs);\n\n    docs.clear();\n    docs.add(makeJob(\"ruby\", 2005));\n    docs.add(makeJob(\"java\", 2006));\n    docs.add(makeResume(\"Frank\", \"United States\"));\n    w.addDocuments(docs);\n\n    IndexReader r = w.getReader();\n    w.close();\n    IndexSearcher s = newSearcher(r);\n\n    Query q = new TermQuery(new Term(\"skill\",\"rudy\"));\n    BooleanQuery qc = new BooleanQuery();\n    qc.add(q,Occur.SHOULD);\n    Filter parentsFilter = new FixedBitSetCachingWrapperFilter(new QueryWrapperFilter(new TermQuery(new Term(\"docType\", \"resume\"))));\n\n    Query qp = new ToParentBlockJoinQuery(qc,parentsFilter,ScoreMode.Max);\n    int hash1 = qp.hashCode();\n    Query qw = s.rewrite(qp);\n    int hash2 = qp.hashCode();\n\n    assertTrue(hash1 != hash2);\n  } ",
            "date": "2014-01-24T01:23:26+0000"
        },
        {
            "id": "comment-13880890",
            "author": "Michael McCandless",
            "content": "Interesting ... because the hashCode for the TermQuery and the BooleanQuery do in fact differ.\n\nOK I see what's happening: ToParentBJQ.hashCode uses origChildQuery to compute its hashcode (and in .equals); so ... rewrite won't change it, by design.\n\nHmm, which then seems like you should not be hitting an issue here?  Maybe try to boil down your problem to a small test case? ",
            "date": "2014-01-24T10:53:47+0000"
        },
        {
            "id": "comment-13881342",
            "author": "Peng Cheng",
            "content": "That's a good point. but I also speculate that ToParentBJQ.rewrite() will change origChildQuery:\n      Query rewritten = new ToParentBlockJoinQuery(childQuery,\n                                childRewrite,\n                                parentsFilter,\n                                scoreMode);\nif rewrite is executed >twice, the origChildQuery won't be the same. ",
            "date": "2014-01-24T19:29:02+0000"
        },
        {
            "id": "comment-13881359",
            "author": "Peng Cheng",
            "content": "Wow I just changed rewritten code to use origChildQuery:\n      Query rewritten = new ToParentBlockJoinQuery(origChildQuery,\n                                childRewrite,\n                                parentsFilter,\n                                scoreMode);\nand it passed all unit test, I never thought the fix being that easy. Thank you so much for pointing it out!\nAlso, is it possible to close the trivial LUCENE-5398? ",
            "date": "2014-01-24T19:44:41+0000"
        },
        {
            "id": "comment-13881464",
            "author": "Michael McCandless",
            "content": "Ahh ... two rewrites will store the wrong origChildQuery.  Nice catch \n\nBut: do we first have a failing test case here?\n\nAlso, were you rewriting yourself externally in your application?  Or is there some path through Lucene that results in more than one rewrite? ",
            "date": "2014-01-24T21:58:10+0000"
        },
        {
            "id": "comment-13881505",
            "author": "Peng Cheng",
            "content": "Not yet, I'm trying to find a special case.\nI never rewrite myself (so does most of lucene users) but IndexSearcher.rewrite method used in search(...) will rewrite any query recursively until it reaches the final stage. ",
            "date": "2014-01-24T22:45:55+0000"
        },
        {
            "id": "comment-13882104",
            "author": "Michael McCandless",
            "content": "I never rewrite myself (so does most of lucene users) but IndexSearcher.rewrite method used in search(...) will rewrite any query recursively until it reaches the final stage.\n\nAhh, right.\n\nBut still I'm confused how this would tickle the bug.  Clearly the bug is there, and we should be passing origChildQuery as the first arg when we rewrite, but I'd still like a small test case here showing the issue, somehow ... ",
            "date": "2014-01-25T23:10:33+0000"
        },
        {
            "id": "comment-13883693",
            "author": "Peng Cheng",
            "content": "Finally got your test case: it only appears in larger scale, this is really excruciating as I'm not a software architect.\n\nTo run the failed test case, please apply the attached patch or manually copy the unit test function into testBlockJoin.java ",
            "date": "2014-01-28T02:55:53+0000"
        },
        {
            "id": "comment-13883694",
            "author": "Peng Cheng",
            "content": "patch file ",
            "date": "2014-01-28T02:56:29+0000"
        },
        {
            "id": "comment-13884265",
            "author": "Michael McCandless",
            "content": "Wow, thanks Peng!  I'll have a look. ",
            "date": "2014-01-28T15:49:23+0000"
        },
        {
            "id": "comment-13884325",
            "author": "ASF subversion and git services",
            "content": "Commit 1562124 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1562124 ]\n\nLUCENE-5409: fix ToParentBlockJoinQuery.rewrite to correctly preserve the origChildQuery after more than one iteration of rewrite ",
            "date": "2014-01-28T16:59:08+0000"
        },
        {
            "id": "comment-13884326",
            "author": "ASF subversion and git services",
            "content": "Commit 1562125 from Michael McCandless in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1562125 ]\n\nLUCENE-5409: fix ToParentBlockJoinQuery.rewrite to correctly preserve the origChildQuery after more than one iteration of rewrite ",
            "date": "2014-01-28T17:00:14+0000"
        },
        {
            "id": "comment-13884327",
            "author": "Michael McCandless",
            "content": "Thanks Peng, I just committed this.  I tweaked the test a bit to reduce the number of indexed docs ... ",
            "date": "2014-01-28T17:00:34+0000"
        },
        {
            "id": "comment-13884424",
            "author": "Peng Cheng",
            "content": "Pleasure to be of service, also thanks Aaron Colak and Long Yao at sciencescape.net for support.\nDo I need a test case to resolve LUCENE-5398? ",
            "date": "2014-01-28T18:54:08+0000"
        }
    ]
}