{
    "id": "LUCENE-8319",
    "title": "A Time-limiting collector that works with CollectorManagers",
    "details": {
        "components": [
            "core/search"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "Currently Lucene has TimeLimitingCollector to support time-bound collection and it will throw\u00a0\nTimeExceededException if timeout happens. This only works nicely with the single-thread low-level API from the IndexSearcher. The method signature is \u2013\n\nvoid search(List<LeafReaderContext> leaves, Weight weight, Collector collector)\n\nThe intended use is to always enclose the\u00a0searcher.search(query, collector) call with a try ... catch and handle the timeout exception. Unfortunately when working with a CollectorManager in the multi-thread search context, the TimeExceededException thrown during collecting one leaf slice will be re-thrown by IndexSearcher without calling CollectorManager's reduce(), even if other slices are successfully collected. The signature \nof the search api with CollectorManager is \u2013\n\n<C extends Collector, T> T search(Query query, CollectorManager<C, T> collectorManager)\n\u00a0\nThe good news is that IndexSearcher handles CollectionTerminatedException gracefully by ignoring it. We can either wrap TimeLimitingCollector and throw  CollectionTerminatedException when timeout happens or simply replace TimeExceededException with CollectionTerminatedException. In either way, we also need to maintain a flag that indicates if timeout occurred so that the user know it's a partial collection.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16480548",
            "author": "Mike Sokolov",
            "content": "I wonder if we could have TimeExceeededException extend CollectionTerminatedException \u2013 if that fixes the issue, it would be a pretty small change, and I don't think there are any cases where you would want to catch CTE and not catch TEE ? ",
            "date": "2018-05-18T11:58:55+0000"
        },
        {
            "id": "comment-16482649",
            "author": "Michael McCandless",
            "content": "I wonder if we could have TimeExceeededException extend CollectionTerminatedException\u00a0\nI think that's a good approach?\u00a0 They both extend RuntimeException today.\u00a0 And then we could add a getter on TimeLimitingCollector to see if a timeout occurred. ",
            "date": "2018-05-21T15:52:10+0000"
        }
    ]
}