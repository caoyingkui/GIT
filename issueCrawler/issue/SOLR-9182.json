{
    "id": "SOLR-9182",
    "title": "Test OOMs when ssl + clientAuth",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "the combination of SOLR-9028 fixing SSLTestConfig to actually pay attention to clientAuth setting, and SOLR-9107 increasing the odds of ssl+clientAuth being tested has helped surface some more tests that seem to fairly consistently trigger OOM when running with SSL+clientAuth.\n\nI'm not sure if there is some underlying memory leak somewhere in the SSL code we're using, or if this is just a factor of increased request/response size when using (double) encrypted requests, but for now I'm just focusing on opening a tracking issue for them and suppressing SSL in these cases with a link here to clarify why we're suppressing SSL.",
    "attachments": {
        "SOLR-9182.patch": "https://issues.apache.org/jira/secure/attachment/12831322/SOLR-9182.patch",
        "SOLR-9182-solrj-suppressssl.patch": "https://issues.apache.org/jira/secure/attachment/12832901/SOLR-9182-solrj-suppressssl.patch",
        "TestSolrJErrorHandling-SOLR-8192.txt": "https://issues.apache.org/jira/secure/attachment/12833065/TestSolrJErrorHandling-SOLR-8192.txt",
        "DistributedFacetPivotLongTailTest-heapintro.png": "https://issues.apache.org/jira/secure/attachment/12831369/DistributedFacetPivotLongTailTest-heapintro.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-06-02T18:13:18+0000",
            "author": "Hoss Man",
            "content": "\nExamples of problematic (and in most cases reliably reproducible) tests/seeds from Jenkins that cause OOM (when ssl & clientAuth are both randomized to true) on master at (or just after) 09372acb660d21b6da01f6ea65f00493126ee32b ...\n\n\nant test  -Dtestcase=DistribCursorPagingTest -Dtests.method=test -Dtests.seed=62CECCCFAC00A40C -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=es-EC -Dtests.timezone=Africa/Kampala -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n\nant test  -Dtestcase=DistribCursorPagingTest -Dtests.method=test -Dtests.seed=D0C25AD7E00EA301 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=nl-SR -Dtests.timezone=Asia/Kashgar -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n\nant test  -Dtestcase=DistributedIntervalFacetingTest -Dtests.method=test -Dtests.seed=D6FFED8B897EFCF1 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=vi-VN -Dtests.timezone=America/Argentina/San_Juan -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n\nant test  -Dtestcase=DistributedIntervalFacetingTest -Dtests.method=test -Dtests.seed=12CAAD932EBCED92 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=hr-HR -Dtests.timezone=Asia/Dili -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n\nant test  -Dtestcase=TestTolerantUpdateProcessorRandomCloud -Dtests.method=testRandomUpdates -Dtests.seed=DDDEE8990E59AD3C -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=da -Dtests.timezone=Australia/Adelaide -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n\nant test  -Dtestcase=TestTolerantUpdateProcessorRandomCloud -Dtests.method=testSanityRandomUnsetBit -Dtests.seed=55D5DE5250D643CB -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/x1/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=es-DO -Dtests.timezone=America/Guatemala -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n ... note: jenkins hit this, but it didn't reproduce for me\n\n\n\nI'll move forward with adding @SuppressSSL to each of these tests linking back to this jira.\nIf anyone wants to investigate this more, that can be replaced with @RandomizeSSL(1.0) to force both SSL + clientAuth usage.\n ",
            "id": "comment-15312808"
        },
        {
            "date": "2016-06-02T18:14:32+0000",
            "author": "Hoss Man",
            "content": "SOLR-9061 & SOLR-9062 are examples of other test that have had OOMs that surface specifically when testing with SSL (TestDistributedSearch, TestDistributedStatsComponentCardinality)\n ",
            "id": "comment-15312812"
        },
        {
            "date": "2016-06-02T18:33:23+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7f821393690624e4d8db4bee45c0645785a72d73 in lucene-solr's branch refs/heads/branch_6x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7f82139 ]\n\nSOLR-9182: SuppressSSL on some tests where it's non to cause OOM\n\n(cherry picked from commit 1eb6c9f816fa09acf2d55370876f79218c0328c3)\n\nConflicts:\n\tsolr/core/src/test/org/apache/solr/cloud/TestTolerantUpdateProcessorRandomCloud.java ",
            "id": "comment-15312840"
        },
        {
            "date": "2016-06-02T18:33:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1eb6c9f816fa09acf2d55370876f79218c0328c3 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1eb6c9f ]\n\nSOLR-9182: SuppressSSL on some tests where it's non to cause OOM ",
            "id": "comment-15312841"
        },
        {
            "date": "2016-10-03T11:06:48+0000",
            "author": "Alan Woodward",
            "content": "According to http://hc.apache.org/httpcomponents-client-ga/tutorial/html/advanced.html#stateful_conn, if we're using client auth then we need to re-use HttpClientContexts between requests, otherwise we don't share pooled connections and have to re-authenticate every time.\n\nCurrently, we generate a new HttpClientContext every time HttpClient.execute() is called.\n\nI think we can cache HttpClientContexts in the following places:\n\n\tHttpSolrCall\n\tHttpSolrClient\n\tConcurrentUpdateSolrClient\n\n ",
            "id": "comment-15542159"
        },
        {
            "date": "2016-10-03T11:31:12+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks for digging, Alan! This is why the CLOSE_WAITs seen in SOLR-9290 were much more easily seen when SSL was enabled. ",
            "id": "comment-15542210"
        },
        {
            "date": "2016-10-03T11:32:51+0000",
            "author": "Alan Woodward",
            "content": "Hm, reading further, it looks like we should be caching the Principals rather than the whole HttpClientContext, because HttpClientContext isn't thread-safe. ",
            "id": "comment-15542216"
        },
        {
            "date": "2016-10-03T11:33:50+0000",
            "author": "Alan Woodward",
            "content": "Thanks for digging, Alan!\n\nCredit to Mikhail Khludnev as well for digging through stack traces! ",
            "id": "comment-15542221"
        },
        {
            "date": "2016-10-03T12:01:32+0000",
            "author": "Mikhail Khludnev",
            "content": "fwiw, I see in debug that BasicHttpContext backs on ConcurrentHashmap ",
            "id": "comment-15542265"
        },
        {
            "date": "2016-10-03T12:56:19+0000",
            "author": "Alan Woodward",
            "content": "I can't actually reproduce the original bug locally, for some reason - Mikhail Khludnev can you try with this patch and see if it fixes the problem? ",
            "id": "comment-15542368"
        },
        {
            "date": "2016-10-03T17:13:19+0000",
            "author": "Hoss Man",
            "content": "Alan Woodward: as noted in some of the comments/commits:\n\n\tany tests that were exhibiting OOMs with ssl+clientAuth had @SuppressSSL annotations added to them\n\tto reproduce you'll almost certianly need to remove those anotations before attempting to test any fix\n\tYou can also replace @SuppressSSL with  @RandomizeSSL(1.0) to force these tests to use both ssl and clientAuth (1.0 = 100% odds of using ssl and 100% odds of using clientAuth)\n\n ",
            "id": "comment-15542892"
        },
        {
            "date": "2016-10-03T18:25:47+0000",
            "author": "Mikhail Khludnev",
            "content": "SOLR-9182.patch makes the cursed seed ( https://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/17953/) pass locally.\n\nI'm absolutely not sure about the approach taken, and hardly able to come up with a proper testing approach. And, btw, what's a clientAuth after all? Seriously, what a proper key for caching http contexts?  ",
            "id": "comment-15543066"
        },
        {
            "date": "2016-10-03T22:50:30+0000",
            "author": "Alan Woodward",
            "content": "Hoss Man I meant that even with RandomizeSsl set to always use both ssl and clientAuth, I still don't see the piling up of available connections when I run the test on my Mac.  No idea why.\n\nMikhail Khludnev As far as I can tell from spelunking the HttpClient source, the user-token key can be anything you like, it's just an object passed to the CPool when retrieving connections, which is why I tried using a static constant.  Your method looks safer though.\n\nAs for testing, this is a bit of a pain as it appears there's no easy way of getting access to the internal PoolStats object that tells you how many connections are hanging around.  You can't even use reflection, because BasicHttpClient wraps things in an anonymous class ",
            "id": "comment-15543657"
        },
        {
            "date": "2016-10-04T20:37:46+0000",
            "author": "Mikhail Khludnev",
            "content": "SOLR-9182.patch reproduces the \"leak\". \n\njava.lang.AssertionError: oh [leased: 0; pending: 0; available: 5000; max: 10000] expected:<1> but was:<5000>\n\tat ...\n\tat org.junit.Assert.assertEquals(Assert.java:472)\n\tat org.apache.solr.client.solrj.impl.HttpSolrClientSSLAuthConPoolTest.testPoolSize(HttpSolrClientSSLAuthConPoolTest.java:52)\n\nIt's worth to add more (probably concurrent) testing and hit few entpoints. it's questionable when to evict that context from cache, now it's happen on any exception, but there is no test coverage. Do \"http routes\" might mess something with those contexts and Principals??    ",
            "id": "comment-15546585"
        },
        {
            "date": "2016-10-04T22:20:05+0000",
            "author": "Hoss Man",
            "content": "FWIW: You guys should probably consider creating a new jira with a more specific, on-point, summary & description regarding the underlying bug (ie: \"connections not being reused by client when SSL clientAuth enabled\", and then mark this issue as being blocked by the new one.\n\nthat way the nature of the underlying issue you're working to fix is more obvious to people skimming jira subjects/searches. ",
            "id": "comment-15546846"
        },
        {
            "date": "2016-10-04T22:26:33+0000",
            "author": "Hoss Man",
            "content": "...it's questionable when to evict that context from cache...\n\nIf you now have a reproducible test that verifies if/when connections are getting re-used by inspecting the PoolStats from the PoolingHttpClientConnectionManager, then perhaps we don't need to a (solrj coded/managed) cache of HttpClientContexts at all? ... why not revisit alan's earlier patch of setting some simple singleton token so that the ConnectionManager knows every request it gets can re-use the same connections .. and then let the test verify that the ConnectionManager actually does that for us.\n\nor am i missunderstanding the root cause? ",
            "id": "comment-15546859"
        },
        {
            "date": "2016-10-05T07:35:11+0000",
            "author": "Mikhail Khludnev",
            "content": "okay. It wasn't obvious to me that the same userToken might be used for another endpoint. Here, SOLR-9182.patch the same client hits two jetties and it's fine. btw, the fix is one-liner now.   ",
            "id": "comment-15547960"
        },
        {
            "date": "2016-10-05T09:03:51+0000",
            "author": "Alan Woodward",
            "content": "Created SOLR-9604 ",
            "id": "comment-15548130"
        },
        {
            "date": "2016-10-12T13:36:54+0000",
            "author": "Alan Woodward",
            "content": "Now that SOLR-9604 is in, I think we can start removing the SuppressSSL annotations from various test cases.  We should try deleting a half-dozen, and checking that we don't start to see test failures. ",
            "id": "comment-15568729"
        },
        {
            "date": "2016-10-12T14:48:24+0000",
            "author": "Alan Woodward",
            "content": "Here's a patch removing SuppressSSL from all solrj tests, as a start. ",
            "id": "comment-15568933"
        },
        {
            "date": "2016-10-13T07:50:46+0000",
            "author": "Mikhail Khludnev",
            "content": "attaching TestSolrJErrorHandling-SOLR-8192.txt  two reproducible failures of TestSolrJErrorHandling on windows with o.a.s.SolrTestCaseJ4 Randomized ssl (true) and clientAuth (false)  ",
            "id": "comment-15571184"
        },
        {
            "date": "2016-10-14T11:45:30+0000",
            "author": "Mikhail Khludnev",
            "content": "Alan Woodward, what about leaving TestSolrJErrorHandling unchanged for a while, and remove SupressSSL from other tests?  ",
            "id": "comment-15575091"
        }
    ]
}