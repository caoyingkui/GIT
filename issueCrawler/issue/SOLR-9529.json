{
    "id": "SOLR-9529",
    "title": "Dates Dynamic Field Inconsistently Defined in Schemas",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "There is a nice convention across all of the schemas that ship with Solr to include field types for single valued fields (i.e. \"string\" -> \"_s\", \"boolean\" -> \"_b\") and separate field types for multivalued fields (i.e. \"strings\" -> \"_ss\", \"booleans\" -> \"_bs\"). Those definitions all follow the pattern (using \"string\" as an example):\n\n<fieldType name=\"string\" class=\"solr.StrField\" sortMissingLast=\"true\"/>\n<fieldType name=\"strings\" class=\"solr.StrField\" sortMissingLast=\"true\" multiValued=\"true\"/>\n<dynamicField name=\"*_s\" type=\"strings\" indexed=\"true\" stored=\"true\"/>\n<dynamicField name=\"*_ss\" type=\"strings\" indexed=\"true\" stored=\"true\"/>\n\nFor some reason, however, the \"date\" field type doesn't follow this pattern, and is instead defined (inconsistently) as follows:\n<fieldType name=\"date\" class=\"solr.TrieDateField\" positionIncrementGap=\"0\" precisionStep=\"0\"/>\n<fieldType name=\"dates\" class=\"solr.TrieDateField\" positionIncrementGap=\"0\" multiValued=\"true\" precisionStep=\"0\"/>\n<dynamicField name=\"*_dt\" type=\"date\" indexed=\"true\" stored=\"true\"/>\n<dynamicField name=\"*_dts\" type=\"date\" multiValued=\"true\" indexed=\"true\" stored=\"true\"/>\n\nNote specifically that the \"_dts\" field should instead be referencing the \"dates\" type and not the \"date\" type, and that subsequently the multiValued=\"true\" setting would become unnecessary on the \"_dts\" dynamicField definition.\n\nI'll get a patch posted for this. Note that nothing is functionally broken, it's just inconsistent and could be confusing for someone looking through the schema or seeing their multivalued dates getting indexed into the field type defined for single valued dates.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-18T04:57:33+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user treygrainger opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/80\n\n    SOLR-9529 - Make multivalued dates dynamic field use dates field type\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/treygrainger/lucene-solr SOLR-9529\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/80.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #80\n\n\ncommit 5428f19bdc72b2d2e55da465e99c4419449dca97\nAuthor: Trey Grainger <code@treygrainger.com>\nDate:   2016-09-18T04:53:34Z\n\n    SOLR-9529 - Make multivalued dates dynamic field use dates field type\n\n ",
            "id": "comment-15500265"
        },
        {
            "date": "2016-09-18T05:18:51+0000",
            "author": "Trey Grainger",
            "content": "Hmm... things were more inconsistent than I thought. There were two fundamental kinds of inconsistencies:\n1) Inconsistencies within a single schema.\n--This is what I described in the issue description regarding \"*_dts\" being handled incorrectly. I submitted a pull request to fix this in the three places we actually define both singular and plural field types: \nsolr/example/files/conf/managed-schema\nsolr/server/solr/configsets/basic_configs/conf/managed-schema\nsolr/server/solr/configsets/data_driven_schema_configs/conf/managed-schema\n\n2) Inconsistencies across different schemas\nWhile the three schemas listed above all separate out single valued and multiValued dynamic fields into different singular and plural field types, every other schema that ships with Solr only defines a single field type (string, boolean, etc.) and uses the dynamic field definition to determine whether the dynamic field should be single or multivalued. This works fine, of course, but is just inconsistent depending upon which schema file you actually end up using. \n\nInterestingly, the tech products example (solr/server/solr/configsets/sample_techproducts_configs/conf/managed-schema), which sits at the same level as the basic_configs and the data_driven_schema_configs, for some reason handles these definitions differently, only defining one field type for both single and multivalued fields (for all types). The following places do the same thing:\n     solr/core/src/test-files/solr/collection1/conf/schema-distrib-interval-faceting.xml\n     solr/core/src/test-files/solr/collection1/conf/schema-docValuesFaceting.xml\n     solr/core/src/test-files/solr/collection1/conf/schema-docValuesJoin.xml\n     solr/core/src/test-files/solr/collection1/conf/schema-non-stored-docvalues.xml\n     solr/core/src/test-files/solr/collection1/conf/schema_latest.xml\n     solr/example/example-DIH/solr/db/conf/managed-schema\n     solr/example/example-DIH/solr/mail/conf/managed-schema\n     solr/example/example-DIH/solr/rss/conf/managed-schema\n     solr/example/example-DIH/solr/solr/conf/managed-schema\n     solr/example/example-DIH/solr/tika/conf/managed-schema\n\nSo while my pull request fixes #1 so that all schemas are consistent with themselves, we still have inconsistency across the various schemas that ship with Solr in terms of what we name the field types for multivalued dynamic fields. If we are going to make these consistent, which way should we go - have a single field type for all single and multivalued fields (and define multivalued=true on the dynamic field definition instead), or separate out plural versions of the field type (booleans, strings, etc.) for multivalued fields? ",
            "id": "comment-15500294"
        },
        {
            "date": "2016-09-18T05:41:38+0000",
            "author": "Alexandre Rafalovitch",
            "content": "We also have inconsistency with docValues, we have field types present in one but not another, etc.\n\nThe question is also whether we really need to ship most of the definitions with each example? This causes both drift over type and confusion for users.\n\nOne alternative is to have absolutely minimal examples (plus one kitchen sink) and then have a mechanism to add those additional field definitions as needed via REST API. Perhaps with using Admin UI and some sort of templates. ",
            "id": "comment-15500327"
        },
        {
            "date": "2016-09-18T10:51:31+0000",
            "author": "Alexandre Rafalovitch",
            "content": "More details on Field Type definition conflicts looking at example and configset definitions in master branch. \n\nFieldType '_bbox_coord' has 1 versions in 1 files\nFieldType 'alphaOnlySort' has 1 versions in 6 files\nFieldType 'ancestor_path' has 1 versions in 9 files\nFieldType 'bbox' has 1 versions in 1 files\nFieldType 'binary' has 1 versions in 9 files\nFieldType 'boolean' has 1 versions in 9 files\nFieldType 'booleans' has 1 versions in 3 files\nFieldType 'currency' has 1 versions in 8 files\nFieldType 'date' has 2 versions in 9 files\nFieldType 'dates' has 2 versions in 3 files\nFieldType 'descendent_path' has 1 versions in 9 files\nFieldType 'double' has 2 versions in 9 files\nFieldType 'doubles' has 2 versions in 3 files\nFieldType 'float' has 2 versions in 9 files\nFieldType 'floats' has 2 versions in 3 files\nFieldType 'html' has 1 versions in 1 files\nFieldType 'ignored' has 2 versions in 9 files\nFieldType 'int' has 2 versions in 9 files\nFieldType 'ints' has 2 versions in 3 files\nFieldType 'location' has 1 versions in 9 files\nFieldType 'location_rpt' has 1 versions in 9 files\nFieldType 'long' has 2 versions in 9 files\nFieldType 'longs' has 2 versions in 3 files\nFieldType 'lowercase' has 1 versions in 9 files\nFieldType 'managed_en' has 1 versions in 1 files\nFieldType 'payloads' has 1 versions in 6 files\nFieldType 'phonetic' has 1 versions in 6 files\nFieldType 'phonetic_en' has 1 versions in 3 files\nFieldType 'point' has 1 versions in 9 files\nFieldType 'preanalyzed' has 1 versions in 1 files\nFieldType 'random' has 1 versions in 9 files\nFieldType 'string' has 2 versions in 9 files\nFieldType 'strings' has 2 versions in 3 files\nFieldType 'tdate' has 2 versions in 9 files\nFieldType 'tdates' has 2 versions in 3 files\nFieldType 'tdouble' has 2 versions in 9 files\nFieldType 'tdoubles' has 2 versions in 3 files\nFieldType 'text_ar' has 2 versions in 9 files\nFieldType 'text_bg' has 2 versions in 9 files\nFieldType 'text_ca' has 2 versions in 9 files\nFieldType 'text_cjk' has 1 versions in 9 files\nFieldType 'text_ckb' has 2 versions in 6 files\nFieldType 'text_cz' has 2 versions in 9 files\nFieldType 'text_da' has 2 versions in 9 files\nFieldType 'text_de' has 2 versions in 9 files\nFieldType 'text_el' has 2 versions in 9 files\nFieldType 'text_email_url' has 1 versions in 1 files\nFieldType 'text_en' has 2 versions in 9 files\nFieldType 'text_en_splitting' has 2 versions in 9 files\nFieldType 'text_en_splitting_tight' has 2 versions in 9 files\nFieldType 'text_es' has 2 versions in 9 files\nFieldType 'text_eu' has 2 versions in 9 files\nFieldType 'text_fa' has 2 versions in 9 files\nFieldType 'text_fi' has 2 versions in 9 files\nFieldType 'text_fr' has 2 versions in 9 files\nFieldType 'text_ga' has 2 versions in 9 files\nFieldType 'text_general' has 3 versions in 9 files\nFieldType 'text_general_rev' has 2 versions in 9 files\nFieldType 'text_gl' has 2 versions in 9 files\nFieldType 'text_hi' has 2 versions in 9 files\nFieldType 'text_hu' has 2 versions in 9 files\nFieldType 'text_hy' has 2 versions in 9 files\nFieldType 'text_id' has 2 versions in 9 files\nFieldType 'text_it' has 2 versions in 9 files\nFieldType 'text_ja' has 2 versions in 9 files\nFieldType 'text_lv' has 2 versions in 9 files\nFieldType 'text_nl' has 2 versions in 9 files\nFieldType 'text_no' has 2 versions in 9 files\nFieldType 'text_pt' has 2 versions in 9 files\nFieldType 'text_ro' has 2 versions in 9 files\nFieldType 'text_ru' has 2 versions in 9 files\nFieldType 'text_shingles' has 1 versions in 1 files\nFieldType 'text_sv' has 2 versions in 9 files\nFieldType 'text_th' has 2 versions in 9 files\nFieldType 'text_tr' has 3 versions in 9 files\nFieldType 'text_ws' has 1 versions in 9 files\nFieldType 'tfloat' has 2 versions in 9 files\nFieldType 'tfloats' has 2 versions in 3 files\nFieldType 'tint' has 2 versions in 9 files\nFieldType 'tints' has 2 versions in 3 files\nFieldType 'tlong' has 2 versions in 9 files\nFieldType 'tlongs' has 2 versions in 3 files\n\nMany of this are due to docValues, but it is easy to see there are other inconsistencies and semi-secret field definitions.\n\nTika example has definitions that use the same names as other examples but skips StopFilter and Elision filter factories. That makes example simpler, but those definitions are not used at all, so what's the point of having them?\n\ntext_general has 3 definitions (including tika example) and the other two differ by whether the field type (not field definition itself) is multiValued or not. 3 of one definition, 5 of another.\n\ntext_tr also has 3 quite different definitions\n\nP.s. This is generated by a tool, so I can give any other level of details required. ",
            "id": "comment-15500772"
        }
    ]
}