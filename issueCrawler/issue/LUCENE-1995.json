{
    "id": "LUCENE-1995",
    "title": "ArrayIndexOutOfBoundsException during indexing",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9.1"
        ],
        "affect_versions": "2.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "http://search.lucidimagination.com/search/document/f29fc52348ab9b63/arrayindexoutofboundsexception_during_indexing",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-10-19T19:30:18+0000",
            "content": "The point at the exception uses a signed shift instead of unsigned, but that shouldn't matter unless the buffer pool is huge?\nAaron, what are your index settings (like ramBufferSizeMB?) ",
            "author": "Yonik Seeley",
            "id": "comment-12767467"
        },
        {
            "date": "2009-10-19T20:47:10+0000",
            "content": "Spooky!  It does look likely we overflowed int, because (1 + Integer.MAX_VALUE) >> 15 is -65536. ",
            "author": "Michael McCandless",
            "id": "comment-12767532"
        },
        {
            "date": "2009-10-19T21:01:00+0000",
            "content": "I make no claims to the reasonableness of these settings, I only recently began efforts to tune our prototype. =)\n\nuseCompoundFile: false\nmergeFactor: 10\nmaxBufferedDocs: 5000000\nramBufferSizeMB: 8192 \nmaxFieldLength: 10000\nreopenReaders: true\n\nMy system has 24gb and my index is typically ~16gb, so I set some of these values a bit high. If the ram buffer is being indexed with an int, that could certainly be my issue; I feel a bit silly for not having thought of that, already.  I'll try setting it down to 2048 and see if the problem disappears. ",
            "author": "Aaron McKee",
            "id": "comment-12767541"
        },
        {
            "date": "2009-10-19T21:21:01+0000",
            "content": "lol - well, there we go.  Looks like perhaps a JavaDoc fix (and a comment in solrconfig.xml)?  The buffered size was never meant to be quite so large \n\nMike - I think keeping the signed shift is the right thing to do... a zero-cost check against silent corruption.\nBut I'm not sure if 2048MiB is safe either... I'm not sure of one could overflow the number of buffers somehow as well (is every buffer except the last fully utilized?) ",
            "author": "Yonik Seeley",
            "id": "comment-12767556"
        },
        {
            "date": "2009-10-19T21:36:02+0000",
            "content": "That's a nice large RAM buffer \n\nMike - I think keeping the signed shift is the right thing to do... a zero-cost check against silent corruption.\n\nAhh good point, OK we'll keep it as is.\n\nBut I'm not sure if 2048MiB is safe either\n\n2048 probably won't be safe, because a large doc just as the buffer is filling up could still overflow.  (Though, RAM is also used eg for norms, so you might squeak by).\n\nI'll update the javadocs to note the limitation! ",
            "author": "Michael McCandless",
            "id": "comment-12767564"
        },
        {
            "date": "2009-10-20T09:07:20+0000",
            "content": "Thanks Aaron!  Maybe someday Lucene will allow a larger RAM buffer than 2GB... ",
            "author": "Michael McCandless",
            "id": "comment-12767757"
        },
        {
            "date": "2009-10-24T18:46:08+0000",
            "content": "I am recalling a bug in Arrays.sort() (Joshua Bloch) which was fixed after 9 years; \"signed\" instead of \"unsigned\"... ",
            "author": "Fuad Efendi",
            "id": "comment-12769699"
        },
        {
            "date": "2009-10-24T21:09:56+0000",
            "content": "If your talking about the merge sort/binary sort fix, that was Martin Buchholz. Joshua Bloch just helped spread the word.\n\nSpeaking of which, there is another one of these in the flex branch \n\nSimpleStandardTermsIndexReader, binary search\n ",
            "author": "Mark Miller",
            "id": "comment-12769709"
        },
        {
            "date": "2009-10-24T21:27:33+0000",
            "content": "Joshua writes in his Google Research Blog:\n\"The version of binary search that I wrote for the JDK contained the same bug. It was reported to Sun recently when it broke someone's program, after lying in wait for nine years or so.\"\nhttp://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n\nAnyway, this is specific use case of reporter; I didn't have ANY problems with ramBufferSizeMB: 8192 during a month (at least) of constant updates (5000/sec)... Yes, I am using term vectors (as Michael niticed it plays a role)... \n\nAnd what exactly causes the problem is unclear; having explicit check for 2048 is just workaround... quick shortcut... ",
            "author": "Fuad Efendi",
            "id": "comment-12769715"
        },
        {
            "date": "2009-10-24T21:30:43+0000",
            "content": "\nJoshua writes in his Google Research Blog:\n\"The version of binary search that I wrote for the JDK contained the same bug. It was reported to Sun recently when it broke someone's program, after lying in wait for nine years or so.\"\nhttp://googleresearch.blogspot.com/2006/06/extra-extra-read-all-about-it-nearly.html\n\nRight - thats Joshua spreading the word. The guy who found the bug also gave the implemented fix. Hence, to him goes the credit of both the bug find and the fix. Simple as that. ",
            "author": "Mark Miller",
            "id": "comment-12769716"
        },
        {
            "date": "2009-10-24T22:22:42+0000",
            "content": "But who did the bug? Joshua writes, it's him  - based on other's famous findings and books...\n===\n\" it just contains a few lines of code that calculates a \ndouble value from two document fields and then stores that value in one of these dynamic fields\"\nAnd problem happens when he indexes document number 15,000,000...\n\n\tI am guessing he is indexing \"double\"... ((type=tdouble, indexed=t, stored=f)... Why do we ever need to index multi-valued field \"double\"? Cardinality is the highest possible... I don't know Lucene internals; I am thinking that (double, docID) will occupy 12 bytes, and with multivalued (or dynamic) field we may need a lot of RAM for 15 mlns docs... especially if we are trying to put into buskets some objects using hash of \"double\"...\n\n\n ",
            "author": "Fuad Efendi",
            "id": "comment-12769725"
        },
        {
            "date": "2009-10-24T22:53:55+0000",
            "content": "Anyway, this is specific use case of reporter; I didn't have ANY problems with ramBufferSizeMB: 8192\n\nWe've been over this on solr-user.  If your usage actually went above 2GB, you would have had a problem.  8192 is not a valid value, we don't support it, and now we'll throw an exception if it's over 2048.\n\nAnd what exactly causes the problem is unclear; having explicit check for 2048 is just workaround... quick shortcut...\n\nNo, we only support a max of 2GB ram buffer, by design currently.  So the explicit check is so you get the error immediately instead of far into an indexing process. ",
            "author": "Yonik Seeley",
            "id": "comment-12769729"
        },
        {
            "date": "2009-10-24T23:39:10+0000",
            "content": "But who did the bug? Joshua writes, it's him\n\nWow you like being obstinate. He put the code in Sun's JVM, but he didn't come up with the algorithm. He took it, and the bug with it, from elsewhere. He didn't \"do\" the bug either. He just propagated it. ",
            "author": "Mark Miller",
            "id": "comment-12769735"
        },
        {
            "date": "2009-10-25T02:45:01+0000",
            "content": "He took it, and the bug with it, from elsewhere. He didn't \"do\" the bug either. He just propagated it.\n\nThis is even worse. Especially for such classic case as Arrays.sort(). Buggy propagating...\n\n\n\tThe sorting algorithm is a tuned quicksort, adapted from Jon\n\tL. Bentley and M. Douglas McIlroy's \"Engineering a Sort Function\",\n\tSoftware-Practice and Experience, Vol. 23(11) P. 1249-1265 (November\n\t1993).  This algorithm offers n*log performance on many data sets\n\tthat cause other quicksorts to degrade to quadratic performance.\n\n\n\nIf your usage actually went above 2GB, you would have had a problem. 8192 is not a valid value, we don't support it, and now we'll throw an exception if it's over 2048.\nNow I think my actual usage was below 2Gb... \n\nNo, we only support a max of 2GB ram buffer, by design currently. \nThanks for confirmation... However, JavaDoc didn't mention explicitly that, and \"by design\" is unclear wordings... it's already several years \"by design\"...\n\n2048 probably won't be safe, because a large doc just as the buffer is filling up could still overflow. (Though, RAM is also used eg for norms, so you might squeak by).\n\n\tUncertainness...\n\n ",
            "author": "Fuad Efendi",
            "id": "comment-12769747"
        },
        {
            "date": "2009-10-25T03:11:30+0000",
            "content": "bq. If your usage actually went above 2GB, you would have had a problem. 8192 is not a valid value, we don't support it, and now we'll throw an exception if it's over 2048.\nNow I think my actual usage was below 2Gb... \nHow I was below 2048 if I had few segments created by IndexWriter during a day, without any \"SOLR-commit\"?.. may be I am wrong, it was few weeks ago... I am currently using 1024 because I need memory for other staff too, and I don't want to try again... ",
            "author": "Fuad Efendi",
            "id": "comment-12769749"
        },
        {
            "date": "2009-11-07T14:57:30+0000",
            "content": "Bulk close all 2.9.1 issues. ",
            "author": "Michael McCandless",
            "id": "comment-12774620"
        }
    ]
}