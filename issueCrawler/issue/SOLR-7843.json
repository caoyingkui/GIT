{
    "id": "SOLR-7843",
    "title": "Importing Delta create a memory leak",
    "details": {
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "5.2.1",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The org.apache.solr.handler.dataimport.SolrWriter is not correctly cleaning itself after finishing importing Deltas as the \"Set<Object> deltaKeys\" is not being cleaned after the process has finished. \n\nWhen using a custom importer or DataSource for my case I need to add additional parameters to the delta keys.\n\nWhen the data import finishes the DeltaKeys is not set back to null and the DataImporter, DocBuilder and the SolrWriter are mantained as live objects because there are being referenced by the \"infoRegistry\" of the SolrCore which seems to be used for Jmx information.\n\nIt appears that starting a second delta import did not freed the memory which may cause on the long run an OutOfMemory, I have not checked if starting a full import would break the references and free the memory.\n\nAn easy fix is possible which  would be to add to the SolrWriter \"deltaKeys = null;\" on the close method.\nOr nullify the writer on DocBuilder after being used on the method execute();",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-22T16:15:57+0000",
            "author": "Joseph Lawson",
            "content": "Why is this not a problem? ",
            "id": "comment-14969374"
        },
        {
            "date": "2015-10-22T19:14:25+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1710078 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1710078 ]\n\nSOLR-7843: DataImportHandler's delta imports leak memory because the delta keys are kept in memory and not cleared after the process is finished ",
            "id": "comment-14969701"
        },
        {
            "date": "2015-10-22T19:16:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1710079 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1710079 ]\n\nSOLR-7843: DataImportHandler's delta imports leak memory because the delta keys are kept in memory and not cleared after the process is finished ",
            "id": "comment-14969705"
        },
        {
            "date": "2015-10-22T19:17:27+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks for the nudge, Joseph and to Pablo for reporting. This fix will be released in 5.4. ",
            "id": "comment-14969709"
        },
        {
            "date": "2015-10-22T23:41:02+0000",
            "author": "Joseph Lawson",
            "content": "Does this affect 5.3+ as well? If I'm using DIH I'm currently assuming 5.2.0 is the only safe version. Is that a correct assumption? ",
            "id": "comment-14970114"
        },
        {
            "date": "2015-10-23T06:10:13+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Joseph Lawson - yes, I'd expect that 5.3.0 is affected as well. And, even though the bug is marked as affecting 5.2.1, I don't think 5.2 is any better either. You may need to patch and run a custom build of Solr until 5.4 is released. ",
            "id": "comment-14970509"
        },
        {
            "date": "2015-10-25T22:00:16+0000",
            "author": "Pablo Lozano",
            "content": "Thanks for fixing it.\nI closed it before because I was starting to think it could have been my fault as I was using the import-handler on a very unorthodox way. Later on I did realize it was a real issue and it should be fixed but by that time I was using a different method of delta import that did not trigger this behavior. I forgot to reopen it again.\nThis issue only happens when the delta import is huge or use the import-handler on a very unorthodox way like I did but it should definitely needed to be fixed.\n\nMaybe this discussion should be for other day but even thoe the import-handler is very good I think it is missing some flexibility  to avoid this type of issues. I think most of the time developers would want to use it as a base and not as full fledged component. Most of the times use cases are very specific to business cases and the default implementation looks like something that has tried to adapt to all possible cases possible. This has constrained the flexibility on this plugin by adding inflexible edge cases rules, made strange abstractions and forces a very opinionated workflow. \nIn my opinion this plugin should serve as a base for developers to implement their own import functionality and set of tools to help them manage the state of the import. It is easier for a developer to implement an api than try to work around a framework.\n\nThat is just my two cents of an overall great plugin.\nThanks ",
            "id": "comment-14973453"
        }
    ]
}