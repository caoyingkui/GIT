{
    "id": "SOLR-10181",
    "title": "CREATEALIAS and DELETEALIAS commands consistency problems under concurrency",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "5.3,                                            5.4,                                            5.5,                                            6.4.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When several CREATEALIAS are run at the same time by the OCP it could happen that, even tho the API response is OK, some of those CREATEALIAS request changes are lost.\n\nThe problem\nThe problem happens because the CREATEALIAS cmd implementation relies on zkStateReader.getAliases() to create the map that will be stored in ZK. If several threads reach that line at the same time it will happen that only one will be stored correctly and the others will be overridden.\n\nThe code I'm referencing is this piece. As an example, let's say that the current aliases map has \n{a:colA, b:colB}\n. If two CREATEALIAS (one adding c:colC and other creating d:colD) are submitted to the tpe and reach that line at the same time, the resulting maps will look like \n{a:colA, b:colB, c:colC}\n and \n{a:colA, b:colB, d:colD}\n and only one of them will be stored correctly in ZK, resulting in \"data loss\", meaning that API is returning OK despite that it didn't work as expected.\n\nOn top of this, another concurrency problem could happen when the command checks if the alias has been set using checkForAlias method. if these two CREATEALIAS zk writes had ran at the same time, the alias check fir one of the threads can timeout since only one of the writes has \"survived\" and has been \"committed\" to the zkStateReader.getAliases() map.\n\nHow to fix it\nI can post a patch to this if someone gives me directions on how it should be fixed. As I see this, there are two places where the issue can be fixed: in the processor (OverseerCollectionMessageHandler) in a generic way or inside the command itself.\n\nThe processor fix\nThe locking mechanism (OverseerCollectionMessageHandler#lockTask) should be the place to fix this inside the processor. I thought that adding the operation name instead of only \"collection\" or \"name\" to the locking key would fix the issue, but I realized that the problem will happen anyway if the concurrency happens between different operations modifying the same resource (like CREATEALIAS and DELETEALIAS do). So, if this should be the path to follow I don't know what should be used as a locking key.\n\nThe command fix\nFixing it at the command level (CreateAliasCmd and DeleteAliasCmd) would be relatively easy. Using optimistic locking, i.e, using the aliases.json zk version in the keeper.setData. To do that, Aliases class should offer the aliases version so the commands can forward that version with the update and retry when it fails.",
    "attachments": {
        "SOLR-10181_testcase.patch": "https://issues.apache.org/jira/secure/attachment/12887847/SOLR-10181_testcase.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-09-18T22:03:02+0000",
            "content": "patch with the test case (and some test improvements) for this issue using master branch ",
            "author": "Samuel Garc\u00eda Mart\u00ednez",
            "id": "comment-16170795"
        },
        {
            "date": "2017-09-18T22:05:13+0000",
            "content": "A code like this would fix the issue (but this is really bad code and difficult to maintain):\n\n\npublic String getTaskKey(ZkNodeProps message) {\n    CollectionAction action = getCollectionAction(message.getStr(Overseer.QUEUE_OPERATION));\n    if(action == CREATEALIAS || action == DELETEALIAS) {\n      return \"/aliases.json\";\n    }\n\n    return message.containsKey(COLLECTION_PROP) ?\n      message.getStr(COLLECTION_PROP) : message.getStr(NAME);\n\n\n\nAnother solution would be let the commands return their own lock key. The only thing I don't like from this approach is that it requires to look into the command map twice with the current code.\n\nIf I get some feedback on the approach I can provide a patch ",
            "author": "Samuel Garc\u00eda Mart\u00ednez",
            "id": "comment-16170798"
        },
        {
            "date": "2017-09-18T22:14:24+0000",
            "content": "Assigning to myself to not lose track of it, feel free to take it if you've a special interest. ",
            "author": "Erick Erickson",
            "id": "comment-16170811"
        },
        {
            "date": "2017-09-21T00:04:16+0000",
            "content": "Thanks Samuel. The right way to fix this is to use ZooKeeper's compare-and-set methods to update the /aliases.json. The SolrZkClient's getData method accepts a Stat object which returns the version of the znode. Then the setData method accepts a version which is used for compare-and-set. If the znode version in ZK does not match the version you provide to the client then the client throws a BadVersionException. You should catch it and retry the changes until you succeed. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16174030"
        },
        {
            "date": "2017-09-22T00:58:26+0000",
            "content": "Samuel:\n\nI've assigned this JIRA to myself as a method to track it so it doesn't fall off my radar. Please work up any patches you have time/desire to and attach them, if I start actively working on this I'll post a notice so we don't duplicate efforts. That said, I don't anticipate having much time in the near future so fire away! ",
            "author": "Erick Erickson",
            "id": "comment-16175763"
        },
        {
            "date": "2017-09-25T08:21:47+0000",
            "content": "Erick Erickson Don't worry, I'll create the patch this week and post it here.  ",
            "author": "Samuel Garc\u00eda Mart\u00ednez",
            "id": "comment-16178716"
        },
        {
            "date": "2017-12-07T18:32:48+0000",
            "content": "this was fixed as part of the work done in SOLR-11444, implementing changes as functions applied to the data. The `ZkStateReader.AliasesManager.applyModificationAndExportToZk`.\n\nReviewing the test code for the `OverseerCollectionConfigSetProcessorTest` there is no test case for the alias management commands. Should I mark this as resolved anyway? ",
            "author": "Samuel Garc\u00eda Mart\u00ednez",
            "id": "comment-16282284"
        },
        {
            "date": "2017-12-07T18:55:01+0000",
            "content": "Glad to have helped fix this with Gus Heck  ",
            "author": "David Smiley",
            "id": "comment-16282320"
        }
    ]
}