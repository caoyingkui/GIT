{
    "id": "LUCENE-7317",
    "title": "Remove auto prefix terms",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Task"
    },
    "description": "This was mostly superseded by the new points API so should we remove auto-prefix terms?",
    "attachments": {
        "LUCENE-7317.patch": "https://issues.apache.org/jira/secure/attachment/12809230/LUCENE-7317.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15322850",
            "author": "Adrien Grand",
            "date": "2016-06-09T16:52:11+0000",
            "content": "Here is a patch. It removes writes of auto prefix terms in the block tree writer and the AutoPrefixTermsPostingsFormat. "
        },
        {
            "id": "comment-15325192",
            "author": "Michael McCandless",
            "date": "2016-06-10T20:02:50+0000",
            "content": "+1.  How much easier it is to remove than it was to add!! "
        },
        {
            "id": "comment-15339125",
            "author": "ASF subversion and git services",
            "date": "2016-06-20T07:58:23+0000",
            "content": "Commit dc95f6d62a192018522caada139008fe57d6126d in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dc95f6d ]\n\nLUCENE-7317: Remove auto-prefix terms. "
        },
        {
            "id": "comment-15339140",
            "author": "ASF subversion and git services",
            "date": "2016-06-20T08:16:08+0000",
            "content": "Commit bac521d1aac6d5d7bbdfde195286c5a50e653364 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bac521d ]\n\nLUCENE-7317: Remove auto-prefix terms. "
        },
        {
            "id": "comment-15400896",
            "author": "Lance Collins",
            "date": "2016-07-31T01:06:08+0000",
            "content": "Does this mean that prefix queries can no longer take advantage of this optimization? "
        },
        {
            "id": "comment-15401284",
            "author": "Adrien Grand",
            "date": "2016-07-31T18:15:29+0000",
            "content": "Yes. For the record however, this optimization was not enabled by default and required to use a custom PostingsFormat that was not supported in terms of backwards compatibility. "
        },
        {
            "id": "comment-15401305",
            "author": "Lance Collins",
            "date": "2016-07-31T19:13:15+0000",
            "content": "What is the motivation for removing if it still has some utility of its own? I was planning to utilize it reduce my index size for our search as you type experience. "
        },
        {
            "id": "comment-15401331",
            "author": "Adrien Grand",
            "date": "2016-07-31T19:46:08+0000",
            "content": "Auto-prefix terms proved hard to integrate with other APIs (eg. is it right to require all postings formats to support auto prefixes? is it fine to expose fake terms to other APIs? (answer to the latter is no as we had to add a couple checks to make sure we never create terms queries on fake terms)) and at the same time we got points / bkd trees working, which solved the prefix/range problem too, and added support for multiple dimensions so it superseded the auto-prefix efforts.\n\nEven with auto-prefix gone, it is still possible to index prefixes, it just has to be done up-front by indexing prefixes as the edge n-gram filter would. It is just a bit less optimized since since we cannot compute some optimal automatic prefixes based on the data. "
        },
        {
            "id": "comment-15426601",
            "author": "Jim Ferenczi",
            "date": "2016-08-18T15:08:38+0000",
            "content": "I wanted to see what we're loosing with the removal of the AutoPrefix so I ran a small test with English Wikipedia title.\n\nI indexed the 12M titles in three indices:\n\n\tdefault: keyword analyzer and the default postings format\n\tauto_prefix: keyword analyzer and the AutoPrefixPostings format with minAutoPrefix=24, maxAutoPrefix=Integer.MAX\n\tedge: edge ngram analyzer  with minGram=1,maxGram=Integer.MAX and the default postings format.\n\n\n\n\n\n\nindex\ndefault\nauto_prefix\nedge\n\n\nsize in MB\n231MB\n274 MB\n1600MB\n\n\n\n\n\nThis table shows the size that each index takes on disk in bytes. As you can see the auto_prefix is very close to the size of the default one even though we compute all the prefix with more than 24 terms. Compared to the edge_ngram which multiplies the index size by a factor 7, the auto prefix seems to be a good trade off for fields where prefix queries are the norm. I didn't compare the query time but any prefix with more than 24 terms could be resolved by one inverted list in the auto_prefix index so it is equivalent to the edge_ngram index. \nThe downside of the auto_prefix seems to be the merge, it takes more than 1 minute to optimize, this is 10 times slower than the default index. Though this is expected since the default index uses a keyword analyzer. \n\nI understand that the new points APIs is better for numeric prefix/range queries but the auto prefix seems to be a good fit for prefix string queries. It saves a lot of spaces compared to edge ngram and the indexation is faster. I am not saying we should restore the functionality inside the default BlockTreeTerms but maybe we could create a separate postings format that exposes this feature ? "
        },
        {
            "id": "comment-15426653",
            "author": "Robert Muir",
            "date": "2016-08-18T15:36:01+0000",
            "content": "I don't think min=1/max=2B is a reasonable setting for n-grams.\n\nAlso, keep in mind this feature is not just a standalone codec. It had tentacles, including in places like TermQuery. "
        },
        {
            "id": "comment-15433832",
            "author": "Jim Ferenczi",
            "date": "2016-08-23T23:12:47+0000",
            "content": "Sorry for the late reply. Yep min=1/max=2B is not a reasonable setting but I have similar results with min=1/max=20 so I think it is worth investigating.\nI opened https://issues.apache.org/jira/browse/LUCENE-7423 which re-implements the auto prefix in a new PostingsFormat that builds the prefixes in two pass like the previous implementation. The nice thing is that it avoids the combinatorial explosion  that affected the previous implementation where we needed to visit all the matching terms for each prefix. "
        },
        {
            "id": "comment-15438944",
            "author": "Michael McCandless",
            "date": "2016-08-26T13:58:33+0000",
            "content": "Bulk close resolved issues after 6.2.0 release. "
        }
    ]
}