{
    "id": "LUCENE-7437",
    "title": "QueryParser with wildcard search does not use Analyzer's tokenizer",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "6.2",
        "components": [
            "core/queryparser"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Reopened",
        "type": "Bug"
    },
    "description": "Using a tokenizer that splits at underscores (e.g. SimpleAnalyzer) splits \"qwert_asdfghjkl\" into two words at the time of indexing.\n\nSearches for \"qwert asdf*\" or \"qwert_asdfghjkl\" work as expected.\n\nHowever, when a query contains wildcards, e.g. \"qwert_asdf*\" the query parser does not use the tokenizer of its analyzer to split the words and thus finds no result.",
    "attachments": {
        "LuceneTest.java": "https://issues.apache.org/jira/secure/attachment/12827351/LuceneTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15470296",
            "author": "Michael Pichler",
            "date": "2016-09-07T11:00:10+0000",
            "content": "The attached test program uses a SimpleAnalyzer (which has a LowerCaseTokenizer) to add a field value \"qwert_asdfghjkl\", which produes two words.\n\nAll test searches work as expected, except those where special characters (like underscore or percent sign) are used together with a wildcard (asterisk).\n\nWithout wildcard the query is tokenized as expected (thus whitespace and separator characters work in the query), however with wildcards the query is no longer tokenized and only whitespaces between searched words/prefixes yield a search result.\n\n\nsearch: 'qwert asdfghjkl', query: '+f:qwert +f:asdfghjkl', #hits: 1\nsearch: 'qwert_asdfghjkl', query: '+f:qwert +f:asdfghjkl', #hits: 1\nsearch: 'qwert%asdfghjkl', query: '+f:qwert +f:asdfghjkl', #hits: 1\nsearch: 'qwert asdf*', query: '+f:qwert +f:asdf*', #hits: 1\nsearch: 'qwert_asdf*', query: 'f:qwert_asdf*', #hits: 0\n  ^^^ expected 1 hit(s), got 0\nsearch: 'qwert%asdf*', query: 'f:qwert%asdf*', #hits: 0\n  ^^^ expected 1 hit(s), got 0\n\n "
        },
        {
            "id": "comment-15470302",
            "author": "Michael Pichler",
            "date": "2016-09-07T11:03:08+0000",
            "content": "This problem with underscores and wildcards seems to exist for quite a while, see also:\nhttp://stackoverflow.com/questions/3458221/lucene-net-search-and-underscore "
        },
        {
            "id": "comment-15470358",
            "author": "Uwe Schindler",
            "date": "2016-09-07T11:33:22+0000",
            "content": "Hi,\n\nthis is a known problem and not solveable by default, because many Analyzers are not working with wildcards, e.g. if stemming is involved. If you know that your analysis is not breaking the wildcard expansion, you can use AnalyzingQueryParser, which is a subclass of the classic queryparser that does special processing of wildcards, ranges, and fuzzy: https://lucene.apache.org/core/6_2_0/queryparser/org/apache/lucene/queryparser/analyzing/AnalyzingQueryParser.html "
        },
        {
            "id": "comment-15470484",
            "author": "Michael Pichler",
            "date": "2016-09-07T12:31:43+0000",
            "content": "Hello Uwe,\nthanks for the quick reply!\n\nAs we do not use stemming on indexing, this would be a suitable option for us (in fact we already override getPrefixQuery and getFuzzyQuery in our custom QueryParser like done in the AnalyzingQueryParser).\n\nI tried to use AnalyzingQueryParser in the test program and got the same result (thus I re-opened the issue). Even though the analyzer gets involved for normalization, it is still not used for tokenizing the input.\n\n\n    // QueryParser queryParser = new QueryParser(FIELD_NAME, analyzer);\n    QueryParser queryParser = new AnalyzingQueryParser(FIELD_NAME, analyzer);\n    System.err.println(\"using QueryParser \" + queryParser.getClass());\n\n\n\n\nusing QueryParser class org.apache.lucene.queryparser.analyzing.AnalyzingQueryParser\nsearch: 'qwert asdf*', query: '+f:qwert +f:asdf*', #hits: 1\nsearch: 'qwert_asdf*', query: 'f:qwert_asdf*', #hits: 0\n  ^^^ expected 1 hit(s), got 0\nsearch: 'qwert%asdf*', query: 'f:qwert%asdf*', #hits: 0\n  ^^^ expected 1 hit(s), got 0\n\n "
        }
    ]
}