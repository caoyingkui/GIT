{
    "id": "SOLR-2953",
    "title": "Introducing hit Count as an alternative to score",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "As of now we have score as relevancy factor for a query against a document, and this score is relative to the number of documents in the index. In the same way why not have some other relevancy feature say \"hitCounts\" which is absolute for a given doc and a given query, It shouldn't depend on the number of documents in the index. This will help a lot for the frequently changing indexes , where the search rules are predefined along the relevancy factor for a document to be qualified for that query(search rule). \n\nEx: consider a use case where a list of queries are formed with a threshold number for each query and these are searched on a frequently updated index to get the documents that score above the threshold i.e. when a document's relevancy factor crosses the threshold for a query the document is said to be qualified for that query. \nFor the above use case to satisfy the score shouldn't change every time the index gets updated with new documents. So we introduce new feature called \"hitCount\"  which represents the relevancy of a document against a query and it is absolute(won't change with index size). \n\nThis hitCount is a positive integer and is calculated as follows \nEx: Document with text \"the quick fox jumped over the lazy dog, while the lazy dog was too lazy to care\" \n1. for the query \"lazy AND dog\" the hitCount will be == (no of occurrences of \"lazy\" in the document) +  (no of occurrences of \"dog\" in the document)  =>  3+2 => 5  \n\n\n2. for the phrase query  \\\"lazy dog\\\"  the hitCount will be == (no of occurrences of exact phrase \"lazy dog\" in the document) => 2\n\nThis will be very useful  as an alternative scoring mechanism.\n\nI already implemented this whole thing in the Solr source code(that I downloaded) and we are using it. So far it's going good. \nIt would be really great if this feature is added to trunk (original  Solr) so that we don't have to implement the changes every time  a new version is released and also others could be benefited with this.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13164386",
            "date": "2011-12-07T13:36:58+0000",
            "content": "Can you make a patch and upload it? See: http://wiki.apache.org/solr/HowToContribute#Generating_a_patch\n\nThen people can take a look and see how you implemented it and discuss. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13164764",
            "date": "2011-12-07T22:09:38+0000",
            "content": "Can't you do this simply by plugging in your own Similarity class in Schema? "
        },
        {
            "author": "Kaleem Ahmed",
            "id": "comment-13165050",
            "date": "2011-12-08T06:58:08+0000",
            "content": "I don't think changing the similarity does it all.. refer this link \nhttp://lucene.apache.org/java/2_9_0/api/core/org/apache/lucene/search/package-summary.html#changingSimilarity\n\nit says\n\n\nChanging Scoring \u2014 Expert Level\n\nChanging scoring is an expert level task, so tread carefully and be prepared to share your code if you want help.\n\nWith the warning out of the way, it is possible to change a lot more than just the Similarity when it comes to scoring in Lucene. Lucene's scoring is a complex mechanism that is grounded by three main classes:\n\n    Query \u2014 The abstract object representation of the user's information need.\n    Weight \u2014 The internal interface representation of the user's Query, so that Query objects may be reused.\n    Scorer \u2014 An abstract class containing common functionality for scoring. Provides both scoring and explanation capabilities.\n I mainly changed the scorers and query classes of different queries to achieve it  .. \n\nWill post the patch soon.. "
        },
        {
            "author": "Kaleem Ahmed",
            "id": "comment-13211798",
            "date": "2012-02-20T12:08:19+0000",
            "content": "Looks like the present trunk 4.0 has the feature of implementing our own score through a plugin by overriding the similarity package's DefaultSimilarityProvider class. so I guess the change is not required through a patch.\n\nThe changes that I've made were on the 3.5 version which won't be compatible with the present trunk. So closing this issue. "
        },
        {
            "author": "Kaleem Ahmed",
            "id": "comment-13211799",
            "date": "2012-02-20T12:09:30+0000",
            "content": "Closing as the 4.0 has this feature already implemented through similarity pacakage classes "
        }
    ]
}