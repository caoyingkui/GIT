{
    "id": "LUCENE-5410",
    "title": "Add fuzziness support to SimpleQueryParser",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/queryparser"
        ],
        "affect_versions": "4.7",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ]
    },
    "description": "It would be nice to add fuzzy query support to the SimpleQueryParser so that:\n\nfoo~2\n\ngenerates a FuzzyQuery with an max edit distance of 2 and:\n\n\"foo bar\"~2\n\ngenerates a PhraseQuery with a slop of 2.",
    "attachments": {
        "LUCENE-5410.patch": "https://issues.apache.org/jira/secure/attachment/12624450/LUCENE-5410.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13878015",
            "author": "Lee Hinman",
            "content": "I would like to work on this also, if that's alright. ",
            "date": "2014-01-21T23:40:20+0000"
        },
        {
            "id": "comment-13879275",
            "author": "Lee Hinman",
            "content": "Attached patch that supports both edit distance for single terms and slop for phrases.\n\nI chose to add only a single flag (FUZZINESS_OPERATOR) for enabling/disabling both behaviors, but it would be easy to separate them if desired. ",
            "date": "2014-01-22T22:27:41+0000"
        },
        {
            "id": "comment-13879319",
            "author": "Robert Muir",
            "content": "Hi Lee, in general this seems like a good approach.\n\nCan we avoid the changes to QueryBuilder? The purpose of QueryBuilder is to interact with the analysis chain, and thats not typically how fuzzy queries are handled (for the same reason QueryBuilder has no prefix logic, so I think the case should be handled in a similar fashion). This way we can avoid adding methods like createFuzzyBooleanQuery, newTermOrFuzzyQuery and so on.\n\nAs far as the parser itself, I don't like having both newPhraseQuery(String) and newPhraseQuery(String, int). Can we just nuke the first one and have the latter instead? Exact phrase queries can just past 0 here.\n\nCan we add the tilde operator to the list in testRandomQueries2 ?\n ",
            "date": "2014-01-22T22:58:35+0000"
        },
        {
            "id": "comment-13879868",
            "author": "Upayavira",
            "content": "If the point of this query parser is to support the sort of thing that users type into search boxes, are they likely to enter fuzzy or phrase slop searches? This seems unlikely to me, and seems to take a SimpleQueryParser away from being \"simple\". I'd suggest that if that functionality is to be added, it should be added somewhere where it is under programmatic control, not user control, such as how the edismax query parser accepts additional request parameters.\n\nThus ps=2 would set a phrase slop. fs=2 could set a value of 2 for fuzzy search also. This would seem more in keeping with the goal of a clean, simple query parser. ",
            "date": "2014-01-23T11:28:05+0000"
        },
        {
            "id": "comment-13879952",
            "author": "Robert Muir",
            "content": "Upayavira: I see your point, however one of the key advantages of this parser is the ability to selectively enable or disable any operator. The same arguments could be made for prefix queries or even the NOT operator , so it was added with that in mind (as well as to provide a way to do multiword synonyms: disable WHITESPACE).\n\nAs far as setting a parameter to make every term fuzzy, I don't think thats a good idea. In such a case I really think you should do n-gram indexing  ",
            "date": "2014-01-23T14:29:45+0000"
        },
        {
            "id": "comment-13880350",
            "author": "Lee Hinman",
            "content": "Upayavira: That does bring up a good point, how should the extra fuzzy characters be treated if fuzziness is turned off? Currently the patch treats the token foo~2 as a TermQuery for \"foo~2\" if FUZZINESS_OPERATOR is disabled. Should it be changed to silently swallow the \"~2\" even if fuzziness is disabled? ",
            "date": "2014-01-23T20:58:01+0000"
        },
        {
            "id": "comment-13880360",
            "author": "Upayavira",
            "content": "If fuzziness is disabled, then that should mean that the ~2 syntax has no meaning whatever, and should be treated as a regular token. Otherwise, you're turning the feature off, but not the syntax, and that will catch people out, and make the component more complex than necessary. ",
            "date": "2014-01-23T21:08:32+0000"
        },
        {
            "id": "comment-13880364",
            "author": "Lee Hinman",
            "content": "Gotcha. Next version of the patch will swallow ~XXX if fuzziness is disabled, and won't touch QueryBuilder.java, as per Roberts comments. ",
            "date": "2014-01-23T21:11:57+0000"
        },
        {
            "id": "comment-13880374",
            "author": "Robert Muir",
            "content": "Wait, why swallow it? When disabling an operator, it means its treated as it does not exist (no special meaning).\n\nE.g. for PREFIX today, if you disable that operator, it means it will literally make a term of foo*\n\nI think this is also agrees with Upayavira's thoughts, but maybe I'm missing something. ",
            "date": "2014-01-23T21:21:01+0000"
        },
        {
            "id": "comment-13880384",
            "author": "Lee Hinman",
            "content": "Okay, I misunderstood then, I was thinking \"the ~2 syntax has no meaning whatever\" meant no meaning (ie, ignore it entirely). I will keep the current behavior of foo~2 being a TermQuery for \"foo~2\" and \"foo bar\"~2 being a BooleanQuery of the PhraseQuery \"foo bar\" and a TermQuery for \"~2\". ",
            "date": "2014-01-23T21:29:18+0000"
        },
        {
            "id": "comment-13880398",
            "author": "Lee Hinman",
            "content": "New version of the patch with these changes:\n\n\n\tNo changes made to QueryBuilder.java\n\tOnly a single method for newPhraseQuery instead of two\n\tAdd \"~\" to testRandomQueries2\n\n ",
            "date": "2014-01-23T21:41:01+0000"
        },
        {
            "id": "comment-13880507",
            "author": "Jack Conradson",
            "content": "I think this patch is a good start.  Personally, there's two changes I'd like to see.  \n\n\n\tThe first was discussed briefly before, but I'm strongly in favor of having phrase slop be a different operator from fuzzy terms.  I can see users wanting phrase slop without wanting fuzzy terms.\n\tThe second is I'd strongly prefer to see a separate method for the parsing logic related to slop/fuzzy where it would account for checking if there's a '~' and the integer afterwards.  I think it will help clean up the consumeTerm and consumePhrase methods significantly.  Once a term/phrase has been found, if fuzzy/slop is on, the method can be called to check for it.\n\n ",
            "date": "2014-01-23T23:27:22+0000"
        },
        {
            "id": "comment-13880511",
            "author": "Lee Hinman",
            "content": "Okay, the first is very simple (I'll add a SLOP_OPERATOR flag and make FUZZINESS_OPERATOR only work for fuzzy terms.\n\nAs for the second, I think this is doable, but I think it will still require a bit of special logic in consumeTerm and consumePhrase based on the differences in how they consume/increment state.data and state.index. I'll work on another revision doing this. ",
            "date": "2014-01-23T23:34:14+0000"
        },
        {
            "id": "comment-13881437",
            "author": "Lee Hinman",
            "content": "Here's a new version of the patch with these changes:\n\n\n\tMake only minimal changes to consumeToken and consumePhrase, all the logic lives in separate \"parseFuzziness\" function used by both.\n\tSeparate the flags for edit distance and slop, there is now FUZZINESS_OPERATOR and SLOP_OPERATOR.\n\tMore tests\n\n ",
            "date": "2014-01-24T21:25:10+0000"
        },
        {
            "id": "comment-13887895",
            "author": "Robert Muir",
            "content": "This patch looks great! I'll do a detailed review now, but I really like the latest iteration.\n\nThanks Lee! ",
            "date": "2014-01-31T16:59:19+0000"
        },
        {
            "id": "comment-13887955",
            "author": "Robert Muir",
            "content": "Updated patch with a few tweaks:\n\n\trename FUZZINESS_OPERATOR -> FUZZY_OPERATOR\n\trename SLOP_OPERATOR -> NEAR_OPERATOR\n\tadd test and check for negative slop in SimpleQP\n\tadd negative slop IAE to Phrase/MultiPhraseQuery\n\tupdate solr support for new operators\n\tmove constants to params so users have access to them.\n\tadd some simple updates to the class javadocs\n\n ",
            "date": "2014-01-31T18:10:19+0000"
        },
        {
            "id": "comment-13888748",
            "author": "Michael McCandless",
            "content": "+1 ",
            "date": "2014-02-01T21:43:35+0000"
        },
        {
            "id": "comment-13888807",
            "author": "ASF subversion and git services",
            "content": "Commit 1563558 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1563558 ]\n\nLUCENE-5410: add fuzzy and near to SimpleQueryParser ",
            "date": "2014-02-02T02:57:04+0000"
        },
        {
            "id": "comment-13888813",
            "author": "ASF subversion and git services",
            "content": "Commit 1563562 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1563562 ]\n\nLUCENE-5410: add fuzzy and near to SimpleQueryParser ",
            "date": "2014-02-02T03:23:30+0000"
        },
        {
            "id": "comment-13888814",
            "author": "Robert Muir",
            "content": "Thanks Lee! ",
            "date": "2014-02-02T03:23:47+0000"
        }
    ]
}