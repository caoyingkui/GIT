{
    "id": "LUCENE-1471",
    "title": "Faster MultiSearcher.search merge docs",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "MultiSearcher.search places sorted search results from individual searchers into a PriorityQueue.  This can be made to be more optimal by taking advantage of the fact that the results returned are already sorted.  \n\nThe proposed solution places the sub-searcher results iterator into a custom PriorityQueue that produces the sorted ScoreDocs.",
    "attachments": {
        "multisearcher.take2.patch": "https://issues.apache.org/jira/secure/attachment/12395623/multisearcher.take2.patch",
        "multisearcher.patch": "https://issues.apache.org/jira/secure/attachment/12394976/multisearcher.patch",
        "multisearcher.take3.patch": "https://issues.apache.org/jira/secure/attachment/12395648/multisearcher.take3.patch",
        "LUCENE-1471.patch": "https://issues.apache.org/jira/secure/attachment/12395053/LUCENE-1471.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-11-30T22:40:03+0000",
            "content": "I had a look at this code and it looks like an easy opportunity.  Here's my analysis\n\n\tlet m = searchables.length\n\tlet n = nDocs\n\n\n\tCurrent performance: n * m * lg( n )\n  n * m * lg( n ) + // fill queue\n  n * lg( n )   // drain queue into scoreDocs[]\n  if each searcher read has n worse documents than the one before it\n\tPossible performance: n * lg( m )\n    m * lg( m ) + // init queue\n    n * lg( m ) + // drain & fill queue\n\n\n\nI'll attach a patch for MultiSearcher search() methods that supports with and without Sort.  Its a little kludgy - had to remove final from FieldDocSortedHitQueue's lessThan method and do some casting.  All tests pass.  I doubt much search time is tied up here since this is all in-memory and n and m are usually small. ",
            "author": "Luke Nezda",
            "id": "comment-12651876"
        },
        {
            "date": "2008-12-01T23:50:19+0000",
            "content": "LUCENE-1471.patch\n\nImplements MultiSearcher.search methods using PriorityQueue of iterators of sorted Score/FieldDocs.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12652205"
        },
        {
            "date": "2008-12-08T19:02:21+0000",
            "content": "\nI agree performance improvement is probably smallish since m & n are\nusually small; still it'd be good to improve it, especially since\nwe're discussing cutting over sort-by-field searching in IndexSearcher\nto the MultiSearcher approach, and, sometimes m & n may not be small.\n\nThere are two different patches here.  I think the approaches are\nmostly the same (ie use 2nd pqueue to extract top N merged results),\nbut on quick inspection there are some differences:\n\n\n\tThe first one shares a common source for the big switch statement\n    (by extending FieldDocSortedHitQueue) on SortField.getType(), which\n    is great.\n\n\n\n\n\tFirst one passes all tests; 2nd one fails at least 3 tests (all\n    due to the AUTO SortField \u2013 what's the fix here?).\n\n\n\n\n\tCode style is closer to Lucene's in the first one ({'s not on\n    separate lines, no _ leader in many variable names).\n\n\n\nI'm sure there are other differences I'm missing.  Can you two work\ntogether to merge the two patches into a single one?  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-12654520"
        },
        {
            "date": "2008-12-08T19:22:21+0000",
            "content": "The patches seem to implement the same concept?  I'm using the 2nd one because FieldDocSortedHitQueue is not public (it should be) and some other class is final that made using the 1st patch impossible.  \n\nIf there is no performance difference then the 1st patch is less code and re-uses Lucene more so the 1st looks best.\n\nMike M:\n\"I agree performance improvement is probably smallish since m & n are\nusually small; \"\nIf results are in the hundreds then the performance matters.  With more microprocessor cores \ngrowing because we don't have nanotech processors yet, parallel thread searching should be the norm \nfor systems that care about response time.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12654529"
        },
        {
            "date": "2008-12-08T19:44:43+0000",
            "content": "The patches seem to implement the same concept?\n\nThat's my impression.\n\nI'm using the 2nd one because FieldDocSortedHitQueue is not public (it should be) and some other class is final that made using the 1st patch impossible.\n\nThe first patch works fine, w/o making FieldDocSortedHitQueue public.\n\nIf there is no performance difference then the 1st patch is less code and re-uses Lucene more so the 1st looks best.\n\nOK I'll go forwards with the first patch.\n\n\nIf results are in the hundreds then the performance matters. With more microprocessor cores\ngrowing because we don't have nanotech processors yet, parallel thread searching should be the norm\nfor systems that care about response time.\n\nI would love to find a clean way to make Lucene's searching \"naturally\" concurrent, so that more cores would in fact greatly reduce the worst case latency.  Our inability to properly use concurrency on the search side to reduce a single query's latency (we can of course use concurrency to improve net throughput, today) will soon be a big limitation.  ParallelMultiSearcher ought to work, but it requires you to manually partition.  And it should pool threads or use ExecutorService.  But I don't see how this applies to this issue... ",
            "author": "Michael McCandless",
            "id": "comment-12654546"
        },
        {
            "date": "2008-12-09T06:00:52+0000",
            "content": "I will prepare a similar derivative patch that covers MultiSearcher and ParallelMultiSearcher. ",
            "author": "Luke Nezda",
            "id": "comment-12654712"
        },
        {
            "date": "2008-12-09T06:46:20+0000",
            "content": "\n\tSimplified MultiSearcherThread\n\t\n\t\tPulled out result merging functionality - was serialized on hq anyway\n    and made much more similar to parent merge logic (actually so similar it felt a little dirty)\n\t\tMade it a non-static inner class to cut down on parameters, though after moving merge logic, only saved searchables[] ref.\n\t\n\t\n\tMade fields searchables[] and starts[] final - really parent version of these same fields should probably just be protected final\n\tFixed some javadoc typos\n\tPatch created against 724620 supersedes previous multisearcher.patch - all tests pass\n\n ",
            "author": "Luke Nezda",
            "id": "comment-12654720"
        },
        {
            "date": "2008-12-09T06:47:53+0000",
            "content": "Patch covering MultiSearcher and ParallelMultiSearcher ",
            "author": "Luke Nezda",
            "id": "comment-12654721"
        },
        {
            "date": "2008-12-09T10:21:22+0000",
            "content": "Luke, it looks like the 2nd patch lost the necessary mods to FieldDocSortedHitQueue \u2013 can you post a new patch that includes it?  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-12654755"
        },
        {
            "date": "2008-12-09T12:57:01+0000",
            "content": "Re: thread, Something makes me think a method more like the IndexWriter merge stuff would be better - a max of 3 or n threads used type of thing. One thread per sub searcher worries me. ",
            "author": "Mark Miller",
            "id": "comment-12654791"
        },
        {
            "date": "2008-12-09T13:30:28+0000",
            "content": "Doh.  Sorry Michael, I reverted my local changes and tested this patch .\n\nI agree Mark, unbounded number of Threads little worrisome. ",
            "author": "Luke Nezda",
            "id": "comment-12654797"
        },
        {
            "date": "2011-01-24T21:16:46+0000",
            "content": "Won't be working on these and they're old ",
            "author": "Jason Rutherglen",
            "id": "comment-12986024"
        }
    ]
}