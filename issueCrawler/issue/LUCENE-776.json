{
    "id": "LUCENE-776",
    "title": "Use WeakHashMap instead of Hashtable in FSDirectory",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "2.1"
        ],
        "affect_versions": "2.0.0",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I was just reading the FSDirectory java code, then I found this :\n\n  /** This cache of directories ensures that there is a unique Directory\n\n\tinstance per path, so that synchronization on the Directory can be used to\n\tsynchronize access between readers and writers.\n   *\n\tThis should be a WeakHashMap, so that entries can be GC'd, but that would\n\trequire Java 1.2.  Instead we use refcounts...\n   */\n  private static final Hashtable DIRECTORIES = new Hashtable();\n\n\n\nSince Lucene is now requiring at least 1.2 (for ThreadLocal for instance, which is using BTW some WeakHashMap), maybe it is time to change ?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-01-14T12:07:05+0000",
            "content": "Good catch!  And thanks for opening this.\n\nBut: how would we actually use WeakHashMap here?\n\nWith WeakHashMap, it's the keys that are the weak reference, so we'd\nneed to have our FSDirectory instance be the keys (I think?).  But\nthen I don't see how we could cleanly \"look up\" a given key to see if\nwe already have an FSDirectory instance for the incoming canonical\npath?\n\nMaybe instead we could keep the current Hashtable, but instead of\nusing the FSDirectory instance directly as the value, wrap it in a\nWeakReference (and unwap on looking it up, later)?\n\nOne other small concern is: the current \"reference counting\" approach\nhas nice \"immediacy\".  Meaning once the final close() occurs on the\nFSDirectory instance, it is immediately removed from the DIRECTORIES\nhashtable.  Whereas, with a WeakReference, it would generally be a\nmuch slower thing (I think?) because it's up to GC to decide when it\nwill actually be removed once only weak references remain?\n\nThough: even with the \"immediacy\" of reference counting, we still must\nthen wait for GC to actually clean up the FSDirectory instance we had\nremoved.  Worse, if that path is re-opened we would create another\nFSDirectory instance (ie more garbage to be collected).  So, since we\nmust wait for GC anyway with our current reference counting solution,\nI guess it is in fact better to have a WeakReference so that if a\ngiven path is re-used, and it hasn't been GC'd yet, we would re-use\nit? ",
            "author": "Michael McCandless",
            "id": "comment-12464589"
        },
        {
            "date": "2007-01-14T18:05:54+0000",
            "content": "Michael McCandless [14/Jan/07 04:07 AM]\n> Good catch! And thanks for opening this.\n>\n> But: how would we actually use WeakHashMap here?\n>\n> With WeakHashMap, it's the keys that are the weak reference, so we'd\n> need to have our FSDirectory instance be the keys (I think?). But\n> then I don't see how we could cleanly \"look up\" a given key to see if\n> we already have an FSDirectory instance for the incoming canonical\n> path? \n\nNot sure if this helps, but I just posted a SoftReferenceMap<K,V>.java in issue 550. Need to take a look at the license though, as it is based on something I found on the net. URL is in the javadoc.  ",
            "author": "Karl Wettin",
            "id": "comment-12464601"
        },
        {
            "date": "2007-01-14T19:24:10+0000",
            "content": "I think you've describe the problem completely Michael. When submitting this issue, I thought that the weak object in a WeakHashMap was the value of the map. So it appears that it is not done for that. About your last though, it is accurate because I think that most of the time, Lucene-based application are opening their directories at the same place.\nMy turn of though : we might have an issue if the table holds some reference that are not yet GCed. A directory is closed, \"manually\" cleaned up, and reopened with a different lock factory : this will fail with the IOException because of the still cached directory, conflicting because of its different lock factory. So the current design might be the best one in fact. ",
            "author": "Nicolas Lalev\u00e9e",
            "id": "comment-12464610"
        },
        {
            "date": "2007-01-14T22:10:14+0000",
            "content": "Karl, thanks for the offer, but we're still on JDK 1.4.x so far, so we\ncan't use that SoftReferenceMap<K,V> directly just yet (but it sounds\nneat!).\n\nOh good point Nicolas.  If we make this change it's actually a\nsemantic difference in the API in that previously you would get a\nbrand new FSDirectory but with this change you would get a \"recycled\"\none.  I agree it's safer to not do this.  I will update the comment to\nremove the tantalizing reference to a WeakHashMap and then resolve.\nThanks! ",
            "author": "Michael McCandless",
            "id": "comment-12464626"
        },
        {
            "date": "2007-01-14T22:14:28+0000",
            "content": "Just updated the javadoc for FSDirectory.DIRECTORIES. ",
            "author": "Michael McCandless",
            "id": "comment-12464627"
        },
        {
            "date": "2007-02-27T18:10:39+0000",
            "content": "Closing all issues that were resolved for 2.1. ",
            "author": "Michael McCandless",
            "id": "comment-12476284"
        }
    ]
}