{
    "id": "SOLR-4715",
    "title": "CloudSolrServer does not provide support for setting underlying server properties",
    "details": {
        "affect_versions": "4.3",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "CloudSolrServer (and LBHttpSolrServer) do not allow the user to set underlying HttpSolrServer and HttpClient settings without arcane java enchantments.",
    "attachments": {
        "SOLR-4715-httpclient.patch": "https://issues.apache.org/jira/secure/attachment/12674517/SOLR-4715-httpclient.patch",
        "SOLR-4715-incomplete.patch": "https://issues.apache.org/jira/secure/attachment/12585662/SOLR-4715-incomplete.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13632562",
            "date": "2013-04-16T04:58:40+0000",
            "content": "Is there a reason that you can't use javabin?  It is more efficient than XML and should work perfectly for any SolrJ code where you are using java objects.\n\nThere could be an aspect of this that I am not seeing, but CloudSolrServer really has no need for XML responses at this time.  It could be argued that allowing for a different response parser is a good idea, so I'll leave this issue open and let someone more experienced decide whether it should be closed or pursued.\n\nThe only compelling reason I know about to use XML responses in SolrJ is when you need to connect to a Solr version running a different version of javabin.  The javabin version changed from 1 to 2 when Solr 3.1.0 was released, in order to fix some bugs.  I'm not aware of any reason at this time to make javabin version 3.\n\nCloudSolrServer only exists in SolrJ 4.0 and later, and can only be used with Solr 4.0 and later, so there are no javabin issues.  Due to how fast SolrCloud (and its Zookeeper integration) is changing, I would not recommend using mismatched Solr and SolrJ versions with CloudSolrServer.  Although cross-version compatibility is a strong goal with SolrJ, SolrCloud is under pretty heavy development.\n\nLBHttpSolrServer is a little different.  It's been around forever, so the javabin incompatibility could be a problem.  Thankfully, it has a contructor that will let you build it with a different response parser:\n\nhttp://lucene.apache.org/solr/4_2_1/solr-solrj/org/apache/solr/client/solrj/impl/LBHttpSolrServer.html#LBHttpSolrServer%28org.apache.http.client.HttpClient,%20org.apache.solr.client.solrj.ResponseParser,%20java.lang.String...%29 "
        },
        {
            "author": "Solr Node",
            "id": "comment-13637534",
            "date": "2013-04-21T10:55:57+0000",
            "content": "Well the reason i am looking for xml response form solrj is, i am having a system which understands xml and json,off course i can use javabin, but in that case i need to manually convert the result to xml before feeding to my system which solr already provides in xml/json. since solr provides xml response i designed my system to directly take xml/json response and hence. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13670497",
            "date": "2013-05-30T17:08:10+0000",
            "content": "My initial inclination is to NOT provide additional constructors, but to provide a number of getters and setters.  In addition to methods for setting timeouts and common httpclient properties, I would include getHttpClient and possibly something with a name like getHttpSolrServer or getInnerSolrServer.  For CloudSolrServer, most of these new methods would just send/request the same information to/from LBHttpSolrServer.\n\nShould I change my approach?  I haven't written any code yet. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13670650",
            "date": "2013-05-30T19:54:41+0000",
            "content": "Solr Node, the following code *MIGHT* allow you to change the response parser back to XML before this issue is implemented.  I have not tested this, and I would be very curious about whether it works for you.  It also changes a couple of HttpClient parameters, but you could remove those two lines.\n\n\nimport org.apache.http.client.HttpClient;\nimport org.apache.solr.client.solrj.ResponseParser;\nimport org.apache.solr.client.solrj.SolrServer;\nimport org.apache.solr.client.solrj.SolrServerException;\nimport org.apache.solr.client.solrj.impl.CloudSolrServer;\nimport org.apache.solr.client.solrj.impl.HttpClientUtil;\nimport org.apache.solr.client.solrj.impl.LBHttpSolrServer;\nimport org.apache.solr.client.solrj.impl.XMLResponseParser;\nimport org.apache.solr.common.params.ModifiableSolrParams;\n\npublic class TestStuff\n{\nvoid test() throws MalformedURLException\n{\n\tString zkHost = \"\";\n\tModifiableSolrParams params = new ModifiableSolrParams();\n\tparams.set(HttpClientUtil.PROP_MAX_CONNECTIONS, 1000);\n\tparams.set(HttpClientUtil.PROP_MAX_CONNECTIONS_PER_HOST, 200);\n\tHttpClient client = HttpClientUtil.createClient(params);\n\tResponseParser parser = new XMLResponseParser();\n\tLBHttpSolrServer lbServer = new LBHttpSolrServer(client, parser, \"http://localhost/solr\");\n\tlbServer.removeSolrServer(\"http://localhost/solr\");\n\tSolrServer server = new CloudSolrServer(zkHost, lbServer);\n}\n}\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13670668",
            "date": "2013-05-30T20:18:16+0000",
            "content": "I have tried some minimal testing with this code for setting the response parser and httpclient params, and it appears to work. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13671181",
            "date": "2013-05-31T05:32:26+0000",
            "content": "I've run into a challenge in creating a patch for this issue.  The response parser object in LBHttpSolrServer is final.  If there's a really good reason for this object to be final, then creating setParser and setRequestWriter methods could be really challenging. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13671195",
            "date": "2013-05-31T06:14:24+0000",
            "content": "After a little bit of thought, I'm thinking the reason the ResponseParser object is final is so that there are no thread visibility problems, because it can't ever change.  The following ideas would require removing that final modifier and adding an object for a shared RequestWriter.\n\nFor CloudSolrServer:  If no requests have been processed yet, then the LBHttpSolrServer object will not yet have any internal HttpSolrServer objects, so passing through setParser and setRequestWriter calls should be perfectly safe.  We can block these methods once the first request gets processed, or we can just pass them through and rely on the following:\n\nFor LBHttpSolrServer, we can do one of three things with setParser and setRequestWriter if there are any ServerWrapper objects (and therefore HttpSolrServer objects):  1) Throw an exception.  2) Ignore the request.  3) Make the requested change on all HttpSolrServer objects. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13671353",
            "date": "2013-05-31T11:24:40+0000",
            "content": "Haven't looked at the code, so this may be from left field. But I'm not enthused about setters that work only some of the time, would it be possible to make a c'tor that took a RequestWriter and Parser? Note that I'm also not enthused about having 15 different c'tors, but it might be the lesser of two evils.\n\nOf the three, I think (1) is the way to go if you must choose between them. (2) fails mysteriously and (3) may be tricky, only worth doing if you can come up with a use case where it's desirable to change mid-stream and it would be too expensive to create a new CloudSolrServer.\n\nFWIW "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13671536",
            "date": "2013-05-31T14:57:55+0000",
            "content": "Erick Erickson, that was my thought too.  I don't like option 2, even if it spits out a WARN log, but it's one way of handling things, so I mentioned it.  I think we would struggle to find a valid use case for changing parser/writer midstream.  The only good time to set these things is at or right after object creation.\n\nDue to how the existing ctors work on the LB object, it seems like a good option to add one more ctor with both parser and writer, but like you, I want to avoid ctor explosion.  Perhaps I could deprecate the one with just the parser and remove it in trunk.  I'd need to make sure that all ctors will work with null values so users can override one but not the other, and log something at INFO (or maybe DEBUG) saying that the default was chosen for null input.\n\nMy instinct after this discussion is to throw an exception at the LB level if you attempt to change parser/writer after ServerWrapper objects have been created.  This means that the signature for the setter methods will include an exception, but SolrServer doesn't have these methods, so there are no inheritance problems with this.  The javadocs will need to be very good. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13671711",
            "date": "2013-05-31T18:21:39+0000",
            "content": "Getting into the code, here's something to note: The javadoc on HttpSolrServer#setParser indicates that it is not thread safe, so I think that throwing the exception is the right thing to do. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13671802",
            "date": "2013-05-31T20:31:22+0000",
            "content": "In-progress patch.  Still a lot left to do, but this is the general direction I'm going.  It compiles, but at least one test fails as a direct result. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13673412",
            "date": "2013-06-03T18:33:30+0000",
            "content": "I appear to have done something really wrong.  I'll have a new patch up soon.  The following applies to the latest patch, but I think that it also applies to the one that's already attached:\n\nThe first part of LBHttpSolrServerTest#testLBHttpSolrServerHttpClientResponseParserStringArray fails with my patch, because when a null value is passed in, the object will create the parser/writer rather than assign the null.  Is there ever a valid reason to have a null parser?\n\nA lot of other solrj tests fail, mostly due to parsing errors in XMLResponseParser, but also due sometimes to NullPointerException.\n\nThe patch also appears to be responsible for a failure in the core test named TestCloudManagedSchema:\n\n\n[junit4:junit4]    > Throwable #1: java.lang.RuntimeException: java.io.UnsupportedEncodingException: text/plain; charset=ISO-8859-1\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([6B54507467721A2F:EAB2DE6C102D7A13]:0)\n[junit4:junit4]    > \tat org.apache.solr.schema.TestCloudManagedSchema$RawResponseParser.processResponse(TestCloudManagedSchema.java:104)\n[junit4:junit4]    > \tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:440)\n[junit4:junit4]    > \tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:213)\n[junit4:junit4]    > \tat org.apache.solr.schema.TestCloudManagedSchema.getFileContentFromZooKeeper(TestCloudManagedSchema.java:87)\n[junit4:junit4]    > \tat org.apache.solr.schema.TestCloudManagedSchema.doTest(TestCloudManagedSchema.java:67)\n[junit4:junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:815)\n[junit4:junit4]    > \tat java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]    > Caused by: java.io.UnsupportedEncodingException: text/plain; charset=ISO-8859-1\n[junit4:junit4]    > \tat sun.nio.cs.StreamDecoder.forInputStreamReader(StreamDecoder.java:71)\n[junit4:junit4]    > \tat java.io.InputStreamReader.<init>(InputStreamReader.java:100)\n[junit4:junit4]    > \tat org.apache.commons.io.IOUtils.copy(IOUtils.java:1435)\n[junit4:junit4]    > \tat org.apache.commons.io.IOUtils.toString(IOUtils.java:585)\n[junit4:junit4]    > \tat org.apache.solr.schema.TestCloudManagedSchema$RawResponseParser.processResponse(TestCloudManagedSchema.java:102)\n[junit4:junit4]    > \t... 45 more\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13673460",
            "date": "2013-06-03T19:22:26+0000",
            "content": "Taking a look at the actual patch, I think I've discovered my basic problem.  Apparently when you want to stream results, you use a null parser \u2013 so there is indeed a use for that. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13677038",
            "date": "2013-06-06T14:04:31+0000",
            "content": "The null parser wasn't the reason for all the failures.  It was me trying to replace the deprecated HttpComponents call (EntityUtils.getContentCharSet) that gets the character set from the response.\n\nUpdated patch, still incomplete.\n\nIs there a valid use case for having a null parser?  The test for LBHttpSolrServer implies that there is. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14166529",
            "date": "2014-10-10T07:39:33+0000",
            "content": "I had the same realization while trying to update flux (clojure solr client) for cloud features. How about a builder class/methods to avoid the explosion of constructor types? We can do something about this in 5.0\n\nAn example:\n\nnew CloudSolrServer.Builder().zkConnectString(zkHosts).httpClient(client).responseParser(parser).requestWriter(writer).defaultCollection(collection).build();\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14169048",
            "date": "2014-10-13T07:47:40+0000",
            "content": "Just add a constructor which accepts HttpClient as a param . It'll be consistent with the other implementations "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14169401",
            "date": "2014-10-13T15:35:16+0000",
            "content": "Here's a patch which adds constructors for HttpClient. Setting other properties such as request writers and response parsers has already been done with SOLR-5223. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14169786",
            "date": "2014-10-13T19:14:05+0000",
            "content": "Merged some javadoc improvements in LBHttpSolrServer that Shawn had in the other patches. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14172392",
            "date": "2014-10-15T14:09:32+0000",
            "content": "Commit 1632049 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1632049 ]\n\nSOLR-4715: Add CloudSolrServer constructors which accept a HttpClient instance "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14172393",
            "date": "2014-10-15T14:11:55+0000",
            "content": "Commit 1632050 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1632050 ]\n\nSOLR-4715: Add CloudSolrServer constructors which accept a HttpClient instance "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14172395",
            "date": "2014-10-15T14:13:24+0000",
            "content": "Thanks Hardik and Shawn! "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14172396",
            "date": "2014-10-15T14:16:36+0000",
            "content": "Oops, I committed wrong javadocs for the setParser method in LbHttpSolrServer. Removing them now. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14172765",
            "date": "2014-10-15T18:51:00+0000",
            "content": "Commit 1632164 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1632164 ]\n\nSOLR-4715: Fixing precommit and removing incorrect javadocs "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14172766",
            "date": "2014-10-15T18:51:30+0000",
            "content": "Commit 1632165 from shalin@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1632165 ]\n\nSOLR-4715: Fixing precommit and removing incorrect javadocs "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332619",
            "date": "2015-02-23T05:01:00+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}