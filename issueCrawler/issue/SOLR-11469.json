{
    "id": "SOLR-11469",
    "title": "LeaderElectionContextKeyTest has flawed logic: 50% of the time it checks the wrong shard's elections",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "LeaderElectionContextKeyTest is very flaky \u2013 and on millers beastit reports it shows a suspiciously close to \"50%\" failure rate.\n\nDigging into the test i realized that it creates a 2 shard index, then picks \"a leader\" to kill (arbitrarily) and then asserts that the leader election nodes for shard1 are affected ... so ~50% of the time it kills the shard2 leader and then fails because it doesn't see an election in shard1.",
    "attachments": {
        "SOLR-11469_incomplete_and_broken.patch": "https://issues.apache.org/jira/secure/attachment/12891771/SOLR-11469_incomplete_and_broken.patch",
        "SOLR-11469.patch": "https://issues.apache.org/jira/secure/attachment/12891535/SOLR-11469.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-11T18:03:00+0000",
            "content": "\nHere's my initial attempt at a fix, mainly focusing on...\n\n\n\tadding comments\n\tadding logging\n\trenaming variables to be more explict what we're expecting\n\ttightening up the call to findLeaderReplicaWithDuplicatedName so we explictly look for the leader of shard1 since that's what we assert against later\n\tadd extra asserts that shard2 doesn't have an election either (the existing asserts only checked the second collection)\n\n\n\n\nWith this fix, the test seems to pass a little more often \u2013 but it's still easy to get a diff type of failure that i was also suspicious would be very plausible given the existing code...\n\nThe entire premise of findLeaderReplicaWithDuplicatedName is that we can find \"a leader\" from collection1 with the same Replica.getName() as a Replica from collection2 \u2013 but IIUC there's no garuntee that will be true.\n\nHere's an example failure with the patch applied...\n\n\n   [junit4]   2> 8485 INFO  (TEST-LeaderElectionContextKeyTest.test-seed#[B0F9446FF638874]) [    ] o.a.s.SolrTestCaseJ4 ###Starting test\n   [junit4]   2> 8486 INFO  (TEST-LeaderElectionContextKeyTest.test-seed#[B0F9446FF638874]) [    ] o.a.s.c.LeaderElectionContextKeyTest All Col1 Replicas: [core_node2:{\"core\":\"testCollection1_shard1_replica_n1\",\"base_url\":\"http://127.0.0.1:56971/solr\",\"node_name\":\"127.0.0.1:56971_solr\",\"state\":\"active\",\"type\":\"NRT\",\"leader\":\"true\"}, core_node4:{\"core\":\"testCollection1_shard2_replica_n3\",\"base_url\":\"http://127.0.0.1:56971/solr\",\"node_name\":\"127.0.0.1:56971_solr\",\"state\":\"active\",\"type\":\"NRT\",\"leader\":\"true\"}]\n   [junit4]   2> 8486 INFO  (TEST-LeaderElectionContextKeyTest.test-seed#[B0F9446FF638874]) [    ] o.a.s.c.LeaderElectionContextKeyTest All Col2 Replicas: [core_node3:{\"core\":\"testCollection2_shard1_replica_n1\",\"base_url\":\"http://127.0.0.1:56971/solr\",\"node_name\":\"127.0.0.1:56971_solr\",\"state\":\"active\",\"type\":\"NRT\",\"leader\":\"true\"}, core_node4:{\"core\":\"testCollection2_shard2_replica_n2\",\"base_url\":\"http://127.0.0.1:56971/solr\",\"node_name\":\"127.0.0.1:56971_solr\",\"state\":\"active\",\"type\":\"NRT\",\"leader\":\"true\"}]\n   [junit4]   2> 8488 INFO  (TEST-LeaderElectionContextKeyTest.test-seed#[B0F9446FF638874]) [    ] o.a.s.SolrTestCaseJ4 ###Ending test\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=LeaderElectionContextKeyTest -Dtests.method=test -Dtests.seed=B0F9446FF638874 -Dtests.slow=true -Dtests.locale=ga -Dtests.timezone=Asia/Chongqing -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.02s | LeaderElectionContextKeyTest.test <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: Unable to find col1+shard1 leader w/same name as replica in col2: [core_node2:{\"core\":\"testCollection1_shard1_replica_n1\",\"base_url\":\"http://127.0.0.1:56971/solr\",\"node_name\":\"127.0.0.1:56971_solr\",\"state\":\"active\",\"type\":\"NRT\",\"leader\":\"true\"}] <=?=> [core_node3:{\"core\":\"testCollection2_shard1_replica_n1\",\"base_url\":\"http://127.0.0.1:56971/solr\",\"node_name\":\"127.0.0.1:56971_solr\",\"state\":\"active\",\"type\":\"NRT\",\"leader\":\"true\"}, core_node4:{\"core\":\"testCollection2_shard2_replica_n2\",\"base_url\":\"http://127.0.0.1:56971/solr\",\"node_name\":\"127.0.0.1:56971_solr\",\"state\":\"active\",\"type\":\"NRT\",\"leader\":\"true\"}]\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B0F9446FF638874:835BAB9C519FE58C]:0)\n   [junit4]    > \tat org.apache.solr.cloud.LeaderElectionContextKeyTest.test(LeaderElectionContextKeyTest.java:95)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n\n\n\nNote:\n\n\tthat seed won't reproduce reliably, because the leader node might randomly have the sane name as one of the replicas from the other collection)\n\tIn the particular log above, if we did out testing/assertions against col1+shard2 instead of col1+shard1 then we'd get lucky and find the coreNodeName overlap with col2 thta the test expects \u2013 but unless i'm missing something that's still just a fluke and not something we can depend upon\n\n\n\nI'm not really sure how to make this test work reliably? ... unless maybe we manually add replicas with explicitly specified coreNodeName and force them to be the leader???? ",
            "author": "Hoss Man",
            "id": "comment-16200693"
        },
        {
            "date": "2017-10-11T18:04:20+0000",
            "content": "Shalin Shekhar Mangar & Cao Manh Dat - it looks like you guys worked on this test as part of SOLR-5245 ... any suggestions how to make it work reliably based on the problems i've diagnosed? ",
            "author": "Hoss Man",
            "id": "comment-16200697"
        },
        {
            "date": "2017-10-12T18:28:01+0000",
            "content": "I'm not really sure how to make this test work reliably? ... unless maybe we manually add replicas with explicitly specified coreNodeName and force them to be the leader????\n\nFWIW, the attached SOLR-11469_incomplete_and_broken.patch attempts this, but i ran into SOLR-11479 which currently makes this impossible. ",
            "author": "Hoss Man",
            "id": "comment-16202399"
        },
        {
            "date": "2017-10-12T20:45:06+0000",
            "content": "Commit 75498a6132ecd6c9afc01b8f12722eebf9b764df in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=75498a6 ]\n\nSOLR-11469: disable LeaderElectionContextKeyTest since we know it's logically flawed\n\n(cherry picked from commit cd1a635898e2d37b723ae648a270242f9fc80323) ",
            "author": "ASF subversion and git services",
            "id": "comment-16202597"
        },
        {
            "date": "2017-10-12T20:45:09+0000",
            "content": "Commit cd1a635898e2d37b723ae648a270242f9fc80323 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cd1a635 ]\n\nSOLR-11469: disable LeaderElectionContextKeyTest since we know it's logically flawed ",
            "author": "ASF subversion and git services",
            "id": "comment-16202598"
        },
        {
            "date": "2017-10-13T12:37:06+0000",
            "content": "Commit 6f33f6d2e2ae3c97ea49eb1c7b85a052811a7fe4 in lucene-solr's branch refs/heads/branch_7_1 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6f33f6d ]\n\nSOLR-11469: disable LeaderElectionContextKeyTest since we know it's logically flawed\n\n(cherry picked from commit cd1a635898e2d37b723ae648a270242f9fc80323)\n\n(cherry picked from commit 75498a6) ",
            "author": "ASF subversion and git services",
            "id": "comment-16203498"
        },
        {
            "date": "2017-10-23T07:43:45+0000",
            "content": "Patch for this ticket. Beasted 150 times. The idea here is if will create two collection with same sequence of requests ( no parallel ). We will have same replica names for each collection. ( This satisfy current logic of Assign.buildCoreNodeName )\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16214775"
        },
        {
            "date": "2017-10-23T07:46:56+0000",
            "content": "Commit 05ebac5a719910abc469b4b07b3a16cb4f883b29 in lucene-solr's branch refs/heads/branch_7x from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=05ebac5 ]\n\nSOLR-11469: LeaderElectionContextKeyTest has flawed logic: 50% of the time it checks the wrong shard's elections ",
            "author": "ASF subversion and git services",
            "id": "comment-16214777"
        },
        {
            "date": "2017-10-24T16:31:08+0000",
            "content": "We will have same replica names for each collection. ( This satisfy current logic of Assign.buildCoreNodeName )\n\nHmmm... i'm -0 having the test make these assumptions.  Fundementally this is the same problem the test had before: it makes assumptions about the lower level implementation of how/when coreNodeMakes will be assigned that the client code used in the test doesn't have any control over \u2013 and doesn't directly validate.  if/when the implementation changes the test may start failing in unpredictable ways.\n\nCan we please at least add some sanity check assertions to this test that will look at the clusterstate and fail with a clear error message if the audo-assigned coreNodeNames don't match the expectations of the test? ",
            "author": "Hoss Man",
            "id": "comment-16217195"
        },
        {
            "date": "2017-10-25T02:10:37+0000",
            "content": "Hoss Man Yeah, It seems a good idea. If someone changes low-level implementation that causes test's assumption invalid, the test must be failed 100% ",
            "author": "Cao Manh Dat",
            "id": "comment-16217988"
        },
        {
            "date": "2017-10-25T02:11:43+0000",
            "content": "Commit 81a4f7cc9cebf9c75387b1b498b556f6aa799932 in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=81a4f7c ]\n\nSOLR-11469: Sanity check assertions about coreNodeNames are identical in 2 collections ",
            "author": "ASF subversion and git services",
            "id": "comment-16217990"
        },
        {
            "date": "2017-10-25T02:12:17+0000",
            "content": "Commit 0994d3d31081edab4a7db9f20dfcd0315d4aa299 in lucene-solr's branch refs/heads/branch_7x from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0994d3d ]\n\nSOLR-11469: Sanity check assertions about coreNodeNames are identical in 2 collections ",
            "author": "ASF subversion and git services",
            "id": "comment-16217991"
        },
        {
            "date": "2017-10-25T07:41:10+0000",
            "content": "Commit f47523d05b48c0357da10c6966c6c1026ba91219 in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f47523d ]\n\nSOLR-11469: forbidden API ",
            "author": "ASF subversion and git services",
            "id": "comment-16218215"
        },
        {
            "date": "2017-10-25T07:42:25+0000",
            "content": "Commit 6b91888d164d244df1915d2237c2bec8f4f72d2a in lucene-solr's branch refs/heads/branch_7x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6b91888 ]\n\nSOLR-11469: forbidden API ",
            "author": "ASF subversion and git services",
            "id": "comment-16218216"
        }
    ]
}