{
    "id": "LUCENE-1290",
    "title": "Deprecate Hits",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Task",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The Hits class has several drawbacks as pointed out in LUCENE-954.\nThe other search APIs that use TopDocCollector and TopDocs should be used instead.\n\nThis patch:\n\n\tdeprecates org/apache/lucene/search/Hits, Hit, and HitIterator, as well as\n  the Searcher.search( * ) methods which return a Hits Object.\n\tremoves all references to Hits from the core and uses TopDocs and ScoreDoc\n  instead\n\tChanges the demo SearchFiles: adds the two modes 'paging search' and 'streaming search',\n  each of which demonstrating a different way of using the search APIs. The former\n  uses TopDocs and a TopDocCollector, the latter a custom HitCollector implementation.\n\tUpdates the online tutorial that descibes the demo.\n\n\n\nAll tests pass.",
    "attachments": {
        "lucene-1290.patch": "https://issues.apache.org/jira/secure/attachment/12382333/lucene-1290.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-05-19T21:32:38+0000",
            "content": "FWIW, the Hits API was originally designed to support desktop applications, with a scrollable pane of hits.  I wonder if anyone ever actually used it that way, and, if so, whether it worked well... ",
            "author": "Doug Cutting",
            "id": "comment-12598105"
        },
        {
            "date": "2008-05-19T21:47:25+0000",
            "content": "\nFWIW, the Hits API was originally designed to support desktop applications, with a scrollable pane of hits. I wonder if anyone ever actually used it that way, and, if so, whether it worked well...\n\nThat's how it was used in the SeartchFiles demo and it worked quite well for this small tool.\n\nBut I believe in real-world apps Hits has quite a few drawbacks. For example, it always \nfetches 50 results and buffers them. This number is not configurable which it should be\nfor performance reasons. Also, I think very often users need to implement their own\nHitCollector anyways, e. g. for duplication detected or security, and can't use Hits then.\n\nAs the new demo shows, it is quite easy to implement paging without Hits, just by  using\nTopDocs and TopDocCollector. ",
            "author": "Michael Busch",
            "id": "comment-12598109"
        },
        {
            "date": "2008-05-20T00:16:42+0000",
            "content": "\nFYI: when applying the patch, i got two failed hunks in src/test/org/apache/lucene/search/TestCustomSearcherSort.java \u2013 but i didn't dig into why, possibly due to eol-style not being set on the files or perhaps because of tabs (see below)\n\nThe only files I looked at closely where the Hits class, the demo code, and the docs...\n\nWe should probably make the deprecation of Hits more obvious in it's class level javadocs ... i would even go so far as to suggest including sample code showing the difference for people who are use to using hits.\n\nThe new SearchFiles.java demo app seems straight forward and easy to understand, although we should probably add some more javadocs to doPagingSearch and doStreamingSearch to explain what we mean by those concepts.  The new code in both of these methods (ie: lines using HitCollector and TopDocCollector) seem to be indented with tabs and not space characters ... so that should be normalized (i didn't check other files modified by the patch to see if they were likewise affected)\n\nThe changes to demo2.xml seem straight forward enough ... although I notice Hits is still referenced in scoring.xml so that should be changed also.\n ",
            "author": "Hoss Man",
            "id": "comment-12598143"
        },
        {
            "date": "2008-05-20T00:58:23+0000",
            "content": "Thanks for the review, Hoss!\n\nYour suggestions make sense. I'll update the patch. ",
            "author": "Michael Busch",
            "id": "comment-12598149"
        },
        {
            "date": "2008-05-20T03:54:23+0000",
            "content": "I'm actually feeling -1-ish about this.  I don't think Hits are hurting those who are truly concerned about performance.  Those who want performance have other API options.  But Hits is so nice and simple, and that must be valuable to a large portion of Lucene users (think CD searches, site searches, desktop search apps, etc., not massive distributed searches and such).\n\nWhy can't we let Hits live?  If we are concerned about its performance, we can easily javadoc and Wiki that. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12598170"
        },
        {
            "date": "2008-05-20T06:16:47+0000",
            "content": "Otis,\n\nwhat do you think are the advantages of Hits over the TopDocCollector/TopDocs approach? If you look at the demo in this patch then you'll notice that I actually didn't make many changes and that it's just as easy to do paging without Hits. \n\nI think almost everybody who wants to have a decent control over performance and memory consumption during hit collection should use a HitCollector.\nAlso, removing Hits will simplify the search methods and we'll have some APIs less to support . ",
            "author": "Michael Busch",
            "id": "comment-12598190"
        },
        {
            "date": "2008-05-20T06:44:39+0000",
            "content": "From the more or less regular mailing list discussions on performance issues with Hits I think one can safely conclude that the real problem is that everyone who tries to use Hits \"for something else\" loses time. Quite a while ago this also happened to me, and I still remember that enough to vote for deprecation. ",
            "author": "Paul Elschot",
            "id": "comment-12598199"
        },
        {
            "date": "2008-05-20T08:23:54+0000",
            "content": "New version of the patch:\n\n\tadded TopDocCollector example to deprecated-section in the javadocs of Hits\n\tadded more comments to new demo code\n\tupdated scoring.html and removed references to Hits\n\tgot rid of tabs (patch only uses whitespaces now)\n\n\n\nHoss, could you try if this patch applies cleanly now and all tests pass, please?\nAfter I committed eol-style=native to all files, changed the tabs to whitespaces \nand recreated the patch file patching and running the tests worked fine for me \non linux.\n\nWow, I didn't imagine before that a patch that simply deprecates one class \nwould have more than 5000 lines!  ",
            "author": "Michael Busch",
            "id": "comment-12598220"
        },
        {
            "date": "2008-05-20T10:52:57+0000",
            "content": "-1 from me for the current solution.\n\nDeprecating Hits necessarily means deprecating HitIterator. With Hits/HitIterator we have two really simple ways to iterate over a long list of search results. The TopDocs/HitCollector-based approach is basically one level below Hits, and thus, Hits can clearly be regarded a convenience class then. It is not as flexible as HitCollector, but serves its purpose very well. \n\nWhat could make sense is to deprecate the Searcher#search() methods which return a Hits instance, to reduce API clutter. Hits could have a public constructor that takes a Searcher instance instead. ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12598252"
        },
        {
            "date": "2008-05-20T18:57:29+0000",
            "content": "\nWith Hits/HitIterator we have two really simple ways to iterate over a long list of search results.\n\nI think this is exactly a problem of Hits. If you use an HitIterator to iterate over let's say\n2000 results, then Hits will run the same query 5 times under the covers with 100, 200, 400,\n800, 1600 as values for the heap used in TopDocCollector.\n\nIMO Hits only makes sense if you want to use it for paging or, as Doug pointed out, for \nprefetching of hits in a scrollable pane. But then it's just as easy to implement this using\nTopDocCollector/TopDocs as shown in the SearchFiles demo (in this patch). The latter approach\nis also much more flexible, as it allows you to control the parameters.\n\n\nThe TopDocs/HitCollector-based approach is basically one level below Hits, and thus, Hits can\nclearly be regarded a convenience class then.\n\nWhat are in your opinion the advantages of using an Iterator interface instead of looping over \na ScoreDoc[] array? ",
            "author": "Michael Busch",
            "id": "comment-12598396"
        },
        {
            "date": "2008-05-20T21:12:41+0000",
            "content": "Michael,\n\nthe current implementation of Hits certainly has its deficiencies, but represents a very simple way to retrieve documents from Lucene. As long as there is no real replacement, I simply do not a reason to deprecate it.\n\nA replacement could be an API which allows something like:\n\nfor(Iterator<ScoreDoc> it = searcher.iterator(query); it.hasNext(); ) {\n  (...)\n  if (...) break;\n}\n\n ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12598471"
        },
        {
            "date": "2008-05-20T22:51:37+0000",
            "content": "\nA replacement could be an API which allows something like:\n\nfor(Iterator<ScoreDoc> it = searcher.iterator(query); it.hasNext(); ) \nUnknown macro: { (...) if (...) break; } \n\nThat would duplicate the search methods that use a HitCollector.\nI still don't understand why an iterator approach is better/easier\nthan Lucene's callback (HitCollector) approach. ",
            "author": "Michael Busch",
            "id": "comment-12598518"
        },
        {
            "date": "2008-05-21T05:30:12+0000",
            "content": "The HitCollerctor and Iterator approach only supports forward displaying of results. In a typical Google-like Website, where the user can just jump to page X, display some results and can jump back to page Y and display results from there too, Hits works really good. The problem with Hits is, that it returns and caches whole \"Documents\". If it could just return ScoreDocs and would implement the Java Collection API \"List\" Interface (using AbstractList), that would be a good replacement for \"navigateable\" result sets. ",
            "author": "Uwe Schindler",
            "id": "comment-12598557"
        },
        {
            "date": "2008-05-21T06:43:55+0000",
            "content": "Michael:\nThe HitCollector callback is called in index order (or in any other, non-deterministic order), whereas the results in Hits are sorted (by relevance or any given Sort order). \n\nUwe:\nGood idea, this would be even better than the plain iterator class. ",
            "author": "Christian Kohlsch\u00fctter",
            "id": "comment-12598565"
        },
        {
            "date": "2008-05-21T07:15:15+0000",
            "content": "Christian:\nFor my project \"panFMP\", I created a List-based wrapper on top of current \"Hits\", which also uses some special assumptions on the index structure behind (which is used by panFMP): http://panfmp.svn.sourceforge.net/viewvc/panfmp/main/trunk/src/de/pangaea/metadataportal/search/SearchResultList.java?view=markup\nOn my plan is to change this to use TopDocCollector and only cache the ScoreDoc instances (id and score). My example just shows, how AbstractList may be used. The problem with AbstractList is, that get() cannot throw Exceptions, but you get the Iterator for free. For better performance, your could also overwrite iterator() and use a sequential TopDocs-based approach for fetching results.\n\nWith the Java Collections List you could also do this syntactical sugar  for displaying Google-Like search results (based on the implementation above):\n\n int start=0,count=10;\n List<SearchResultItem> page=list.subList(\n   Math.min(start, list.size()),\n   Math.min(start+count, list.size())\n );\n for (SearchResultItem item : page) \n{\n   System.out.println(item.getIdentifier());\n } ",
            "author": "Uwe Schindler",
            "id": "comment-12598569"
        },
        {
            "date": "2008-05-21T09:06:38+0000",
            "content": "\nThe HitCollerctor and Iterator approach only supports forward displaying of results.\n\nEven if you want to show results 100-200, then you still need to sort at least 200 results, also Hits needs to, it doesn't do any magic. Then you can as well keep the ScoreDoc[] array to page back.\nPlease take a look at the patch and the new demo code, that will help you understand how Hits and TopDocCollector/TopDocs (which is called from Hits) work.\n\n\nThe HitCollector callback is called in index order (or in any other, non-deterministic order), whereas the results in Hits are sorted (by relevance or any given Sort order).\n\nHits uses TopDocCollector/TopDocs for sorting. The same can be achieved using those APIs, which Searcher offers, directly. Please take a look at the patch. I replaced a lot of usages of Hits in the test cases with the TopDocs APIs. In most cases this was a one line change. ",
            "author": "Michael Busch",
            "id": "comment-12598594"
        },
        {
            "date": "2008-05-21T09:09:46+0000",
            "content": "Of course I don't want to remove something that adds real value to Lucene. IMO, Hits does not. It is a class whose APIs we always discourage to use. Such a class does not belong in the core. The HitCollector (especially TopDocCollector) APIs are similar to use and offer more control, flexibility and insight.\n\nSo I think we should deprecate Hits (it will still be part then of 2.4 and 2.9 and removed in 3.0). In the meantime, if people really think that there should be a replacement for Hits in the future, we can develop a new helper class in contib that doesn't have the drawbacks that Hits has, and contributors like Uwe and Christian are very welcome to submit patches for that!\n\nHowever, I don't want to make a decision here that is in conflict with opinions of others, so maybe it might be a good idea to call a vote on java-dev about this issue? ",
            "author": "Michael Busch",
            "id": "comment-12598595"
        },
        {
            "date": "2008-05-21T12:40:14+0000",
            "content": "Hits does seem to be very good at leading new Lucene users into writing non-performant code and on that basis is probably worth deprecating. \n\nHowever, in it's place I think we can do more to support the commonest search scenario users will have,  which I suspect is the typical web-based search application, serving a page of  \"results xx to yy of  z,zzz,zzz\"..\n\nThe HitPageCollector  in the link below is more helpful in this respect than the raw TopDocCollector - it takes a \"start\" value in the constructor which represents the \"xx\" in the above.  It could be extended to have read-only properties representing y and z too and helper methods e.g. isFirstPage, isLastPage.\nI'm sure many of us have coded this same logic in many different places over the years and I think it could usefully be in core as a better embodiment of best practice than Hits.\n\nSee http://www.mail-archive.com/java-user@lucene.apache.org/msg15344.html\n ",
            "author": "Mark Harwood",
            "id": "comment-12598632"
        },
        {
            "date": "2008-05-22T06:14:39+0000",
            "content": "\nHits does seem to be very good at leading new Lucene users into writing non-performant code and on that basis is probably worth deprecating.\n\nSo it seems that a fair amount of people agree here that Hits should be deprecated.\n\nHits will still be part of Lucene 2.4 and 2.9. In the meantime, we can develop new helper classes,\nlike Mark's HitPageCollector, if people see the need for it. Contrib would be a good place for \nthose classes.\n\nSo in case of no negative votes, I will commit this patch before the weekend. ",
            "author": "Michael Busch",
            "id": "comment-12598914"
        },
        {
            "date": "2008-05-23T18:55:12+0000",
            "content": "Beefed up doPagingSearch() in the SearchFiles demo.\nNo It collects enough results for the first 5 result pages.\nIf the user wants to skip beyond the 5th page, then\nthe query is reexecuted to collect all hits, similar to \nGoogle. The user can now also page back or jump\ndirectly to a page number.\n\nI'm going to commit this patch now. ",
            "author": "Michael Busch",
            "id": "comment-12599464"
        },
        {
            "date": "2008-05-23T19:00:40+0000",
            "content": "Committed. ",
            "author": "Michael Busch",
            "id": "comment-12599467"
        },
        {
            "date": "2008-05-27T16:09:12+0000",
            "content": "i've been away from the party while all the exciting stuff was being discussed, but for my 2 cents...\n\n\n\tI firmly believe deprecating Hits is the way to go\n\tI recognize the value in having a simple API that implements the Iterator API like HitIterator, but that doesn't mean it needs to be powered by \"Hits\",  An alternate approach would be to add an \"iterator()\" method to TopDocs and TopFieldDocs that returned an iterator over the ScoreDocs ... or even an \"iterator(Searcher)\" method that would return a Iterator of \"Hit\" objects \u2013 this could have the exact same API as the HitIterator and Hit classes currently do \u2013 just more efficiently and with different constructors.\n\n\n\nAs Michael said: Hits is deprecated, not deleted.  clients will have plenty of time to change, and the javadocs for Hits provides a good explanation for how to use TopDocs instead \u2013 but if people want to implement an \"Iterator\" based alternative, we should probably do that in a new issue. ",
            "author": "Hoss Man",
            "id": "comment-12600168"
        },
        {
            "date": "2008-06-13T01:21:52+0000",
            "content": "To answer Doug's initial question, yes, we are using this in a desktop application inside a Swing TableModel. ",
            "author": "Trejkaz",
            "id": "comment-12604701"
        }
    ]
}