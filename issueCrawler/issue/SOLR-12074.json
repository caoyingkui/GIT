{
    "id": "SOLR-12074",
    "title": "Add numeric typed equivalents to StrField",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "There ought to be numeric typed equivalents to StrField in the schema.  The TrieField types can be configured to do this with precisionStep=0, but the TrieFields are deprecated and slated for removal in 8.0.  PointFields may be adequate for some use cases but, unlike TrieField, it's not as efficient for simple field:value lookup queries.  They probably should use the same internal sortable full-precision term format that TrieField uses (details currently in LegacyNumericUtils (which are used by the deprecated Trie fields).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-09T04:34:01+0000",
            "content": "To be clear, TrieField at any precisionStep will keep a single term for each original input value.  Higher precision steps add additional terms to speed up range queries.  The task at hand in this issue is only to index those full-precision terms.  If a use-case requires range queries then the user ought to use an additional field for that to be fully optimal.\n\nIt'd be nifty if PointField could additionally have a Terms index for these full-precision terms instead of requiring a separate field in the schema.  For such an approach, the field type would allow the user to control what sort of indexes (Points, Terms, or both).  It should be possible (I think Lucene allows one field to have a Terms index & Points index) but probably more work?  Any way this path ought to be explored since it would, I think, be significantly better from an ease-of-use perspective. ",
            "author": "David Smiley",
            "id": "comment-16392396"
        },
        {
            "date": "2018-09-03T21:33:11+0000",
            "content": "I think Lucene allows one field to have a Terms index & Points index\n\nThis is correct. ",
            "author": "Adrien Grand",
            "id": "comment-16602451"
        },
        {
            "date": "2018-11-18T20:35:04+0000",
            "content": "How would this work with facet-sorting on index and the stats component? Would it behave as a numeric or a String field? ",
            "author": "Toke Eskildsen",
            "id": "comment-16691027"
        },
        {
            "date": "2018-11-18T21:25:28+0000",
            "content": "It'd be nifty if PointField could additionally have a Terms index for these full-precision terms instead of requiring a separate field in the schema.\n\n+1, it's important for it to be the same field in the schema for both usability, and so that solr knows how to optimize single-valued lookups.\nIf we could turn back time, I'd argue for keeping \"indexed=true\" in the schema to mean normal full-text index, and then use another name for the BKD structure (rangeIndexed=true? pointIndexed=true?), but I guess that ship has sailed.\n\nSo what should the name of the new flag for the schema be?\nvalueIndexed?\ntermIndexed?\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-16691097"
        },
        {
            "date": "2018-11-19T04:48:40+0000",
            "content": "How would this work with facet-sorting on index and the stats component? Would it behave as a numeric or a String field?\n\nnumeric\n\n+1, it's important for it to be the same field in the schema for both usability, and so that solr knows how to optimize single-valued lookups.\n\nI agree that's best.  This is more work than some new set of fields expressly for lookup but so be it.  We want a single field that can have distinct options for tweaking the need for a range index and a lookup index independently.  Lets say we add a new two new booleans: lookupIndexed (or valueIndexed) and rangeIndexed?  The presence of indexed=true will pick defaults for those two as we see fit.  The ship hasn't sailed; we are adding further specificity on what type of index(es).\n\nWe could put these options on PointField so that users need not go mess with their schema.  But then it's regrettable that we have \"PointField\" on this field type and its subclass as it's suggestive of Lucene PointValues which implies BKD.  Or we create a new numeric subclass of NumericFieldType (peer to TrieField & PointField).  I'm not sure what to call it but it's the subclasses that have the primitive types in their names (Long, Double, ...) that users see in the schema.  In this scheme they might simply be LongField and DoubleField etc.  What do you think?  I think it's more user friendly.  Even with such generic/universal names, it doesn't prevent some future change in underlying implementation using luceneMatchVersion. ",
            "author": "David Smiley",
            "id": "comment-16691253"
        },
        {
            "date": "2018-11-20T20:26:43+0000",
            "content": "so that solr knows how to optimize single-valued lookups.\nYou mean, in case of term queries use the terms if available, otherwise use points, right? I think that would be good, the same as we do for IndexOrdDocValuesQuery when we have both options.\n\nIf we could turn back time...\nI think Hoss suggested something like that at the time (not sure if in a Jira comment or just talking to me during some conference). The thought was that this would be a full replacement of Trie* fields, similar to how older numerics were replaced, but yes, it could have been better. The one issue though, would that people is selecting the implementation in their schema and it would have been \"Trie*\", which were deprecated and going away. \n\nIn this scheme they might simply be LongField and DoubleField etc\nThe problem I see with this is that, today we choose between the Point* impl or terms (String or equivalent), but tomorrow there may be a new implementation, so how do we go from there? Add more attributes? what if the new implementation is also targetted at range queries?\n\nI'd go with an extra attribute in the current Point* implementation as Yonik suggested, maybe \"terms=true\" or something. This is consistent with how other Solr schema attributes are converted into Lucene fields: stored=true-> Add StoredField, docValues=true-> Add a DocValue field ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16693751"
        },
        {
            "date": "2018-11-20T22:08:53+0000",
            "content": "Either new types or additional attributes may work.\n\nI'd love it if the primitive types such as \"int\", \"long\", \"float\", \"date\", \"boolean\"... were \"just there\" and worked super fast for both lookups, rang, facet and sorting without any further hoops. Now that the plain fieldType names like \"int\" are available (the point types\u00a0uses \"pint\"), what if we\u00a0added a brand new schema tag to auto-register all these, and let it defaults to \"true\" from schema-version 1.7:\n\n<!-- The primitiveTypes tag, when set to true, will auto register all primitive field types under the\n     names 'int', 'long', 'float', 'double', 'date', 'boolean', based on PointField types, and optimized\n     for term lookups (indexed=true), range queries (bkdIndex=true) and sorting and faceting (docValues=true).\n     Individual fields using these types may further enable/disable any of those. \n     If dynamicFIeldMappings is true, Solr will auto-register '*_i'->'int', '*_l'->'long' etc as well.\n -->\n<primitiveTypes enable=\"true\" dynamicFieldMappings=\"true\" />\n\nUsers who prefer to hand-edit all the nitty gritty details of the field type definitions may disable this, or they may \u00a0override various flags on the field definitions. Imagine how small and compact a schema.xml could be for simple use cases! ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16693838"
        }
    ]
}