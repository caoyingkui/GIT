{
    "id": "SOLR-5654",
    "title": "Create a synonym filter factory that is (re)configurable, and capable of reporting its configuration, via REST API",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A synonym filter factory could be (re)configurable via REST API by registering with the RESTManager described in SOLR-5653, and then responding to REST API calls to modify its init params and its synonyms resource file.\n\nRead-only (GET) REST API calls should also be provided, both for init params and the synonyms resource file.\n\nIt should be possible to add/remove/modify one or more entries in the synonyms resource file.\n\nWe should probably use JSON for the REST request body, as is done in the Schema REST API methods.",
    "attachments": {
        "SOLR-5654.patch": "https://issues.apache.org/jira/secure/attachment/12628127/SOLR-5654.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13878957",
            "date": "2014-01-22T18:23:49+0000",
            "content": "Why do we need new factories for synonyms and stopwords? I dont understand this design at all, this seems like duplication of all the analysis factories!\n\nInstead, just pass a different resourceloader or something to the existing ones! "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13878969",
            "date": "2014-01-22T18:32:35+0000",
            "content": "In Lucene server (LUCENE-5376) I just created a custom ResourceLoader to pull stopwords that were specified (inlined) in the JSON when the field is registered.\n\nBut separately I think it's ... dangerous to allow changing stopwords / syns on an already created field / running index?  Ie, such changes won't fully \"take effect\" until you re-index all content ... I know it's convenient to be able to make such changes, but it's also trappy. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13879015",
            "date": "2014-01-22T18:59:14+0000",
            "content": "\nWhy do we need new factories for synonyms and stopwords? I dont understand this design at all, this seems like duplication of all the analysis factories!\n\nInstead, just pass a different resourceloader or something to the existing ones!\n\nThe point of this issue is to provide REST API methods to interrogate and modify/persist synonym config and mappings.  A different resourceloader would only allow for this info to be pulled from an alternate persistence store - it wouldn't do anything for the REST API and persistence part.\n\n\nBut separately I think it's ... dangerous to allow changing stopwords / syns on an already created field / running index? Ie, such changes won't fully \"take effect\" until you re-index all content ... I know it's convenient to be able to make such changes, but it's also trappy.\n\nThat's already true today for people who manually modify config and restart/reload.  I guess your point is that we shouldn't be making this easier.  I disagree: the point of the issue is to allow people more fine-grained control over an already-existing freedom.  I think documentation warning people about the danger of modifying config with an existing index is sufficient to help people who want this capability avoid creating indexes with mixed analysis config. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13879204",
            "date": "2014-01-22T21:27:18+0000",
            "content": "\nThe point of this issue is to provide REST API methods to interrogate and modify/persist synonym config and mappings. A different resourceloader would only allow for this info to be pulled from an alternate persistence store - it wouldn't do anything for the REST API and persistence part.\n\nIt wouldnt prevent it either.\n\nReworded: why is a custom factory necessary? "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13879209",
            "date": "2014-01-22T21:32:16+0000",
            "content": "I guess your point is that we shouldn't be making this easier. \n\nRight.\n\nI disagree: the point of the issue is to allow people more fine-grained control over an already-existing freedom.\n\nJust because there's already an existing (not necessarily good) freedom doesn't mean it must be made easier.  Optimize is an existing freedom \n\nDoes Solr at least record somewhere that \"full re-index required\"?  So the user (if s/he knows to look in the right place on the admin UI) is informed that inconsistent results might be because they didn't fully re-index yet... "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13886574",
            "date": "2014-01-30T13:39:46+0000",
            "content": "Two reasonable and reliable use cases I have encountered:\n\n1. Update or replace query-time synonyms - no risk for existing indexed data.\n\n2. Add new index-time synonyms that will apply to new indexed documents - again, no expectation that they would apply to existing documents, but reindexing would of course apply them anyway. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13897386",
            "date": "2014-02-11T01:02:37+0000",
            "content": "Basic implementation which depends on my patch for SOLR-5653.\n\nIt only supports the \"solr\" format for now and basically uses an adapter to provide a SolrResourceLoader to the existing SynonymFilterFactory which is backed by the managed synonym mappings.\n\nAlso, I should mention that I'm not thrilled with how I handle ignoreCase changes right now, so will probably clean that up a bit in a subsequent patch. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13900369",
            "date": "2014-02-13T14:26:49+0000",
            "content": "Cool stuff!  Can you give some examples of the full URLs?  Do they match the JSON storage format? "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13900570",
            "date": "2014-02-13T18:20:56+0000",
            "content": "Thanks Yonik. Here are some examples:\n\nIn schema.xml, you'd activate this using something like:\n\n    <fieldType name=\"managed_en\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>\n        <filter class=\"org.apache.solr.rest.schema.analysis.ManagedSynonymFilterFactory\" managed=\"english\" />\n      </analyzer>\n    </fieldType>\n\nGET a list of managed synonym mappings for managed handle \"english\" using:\n\ncurl -i -v \"http://localhost:8984/solr/<collection>/schema/analysis/synonyms/english\"\n\nThis would return a JSON structure that looks like (which is pretty much the same as the JSON backed storage structure):\n\n{\n  \"initArgs\": \n{\n    \"ignoreCase\":\"true\",\n    \"format\":\"solr\"\n  }\n,\n  \"managedMap\": \n{\n    \"GB\":[ \"GiB\", \"Gigabyte\"],\n    \"TV\":[\"Television\"],\n    \"happy\":[ \"glad\", \"joyful\"]\n  }\n}\n\nbtw ... I'm not in love the with managedMap or managedList thing so am open to suggestions. My thinking there was that the property name gave some hint as to what the type of data structure the value is.\n\nPUT: Add a mapping using PUT/POST\n\ncurl -v -X PUT \\\n  -H 'Content-type:application/json' \\\n  --data-binary '\n{\"sad\":[\"unhappy\"]}\n' \\\n  'http://localhost:8984/solr/<collection>/schema/analysis/synonyms/english'\n\nThere's some question in my mind if PUT should merge in new values to the existing synonym mappings or replace them. I chose to merge in, which puts a burden on the client to DELETE (not yet working) synonym mappings they don't want to keep around. In other words, there's no way to wholesale replace the existing mappings with another set, but that seems more like how users will use the feature, ie. adding a synonym here and there as needs evolve. \n\nYou can also GET a specific mapping (or 404 if one doesn't exist) using:\n\ncurl i -v \"http://localhost:8984/solr/<collection>/schema/analysis/synonyms/english/happy\" <- would return \n{ \"happy\":[\"glad\"], ... }\ncurl i -v \"http://localhost:8984/solr/<collection>/schema/analysis/synonyms/english/yappy\" <- would return 404\n\nLastly, I'm planning to support a GET request to get all known handles:\n\ncurl -i -v \"http://localhost:8984/solr/<collection>/schema/analysis/synonyms\"\n\nCurrently would return a JSON list of known managed synonym mappings: [ { \"english\": \n{ some stats / metadata here, such as whether it is 'dirty' }\n ]\n "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13911211",
            "date": "2014-02-25T04:01:52+0000",
            "content": "Updated patch to work with the changes in the latest patch for SOLR-5653 "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13931252",
            "date": "2014-03-12T01:36:02+0000",
            "content": "Apply after applying the patch for SOLR-5655 (not quite sure how to handle that otherwise?) "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13931253",
            "date": "2014-03-12T01:37:04+0000",
            "content": "One other thing to notice is that I had to copy-and-paste re-use the getIgnoreCase methods from ManagedWordSetResource. Be better to make that static and re-use it in the synonym code? "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-13950990",
            "date": "2014-03-28T16:33:50+0000",
            "content": "Here's an updated patch that uses a custom SynonymMap.Parser implementation instead of the SolrResourceLoader adapter approach based on the excellent suggestion by Steve Rowe. The only caveat is this requires making the SynonymFilterFactory.loadSynonyms method protected instead of private, which seemed like a good trade-off for being able to plug-in a different parser implementation.\n\nI've also improved the test logic to verify synonyms get applied correctly after core reload. Lastly, I cleaned up a bit of the ignoreCase handling code, such as lowercasing keys / values when building the internal data structures when ignoreCase == true. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13958310",
            "date": "2014-04-02T23:07:18+0000",
            "content": "\nHere's an updated patch that uses a custom SynonymMap.Parser implementation instead of the SolrResourceLoader adapter approach based on the excellent suggestion by Steve Rowe. The only caveat is this requires making the SynonymFilterFactory.loadSynonyms method protected instead of private, which seemed like a good trade-off for being able to plug-in a different parser implementation.\n\nLooks great, thanks for making this change.  I see no problem with making SynonymFilterFactory.loadSynonyms() protected.\n\n\nI've also improved the test logic to verify synonyms get applied correctly after core reload.\n\nCool, good test addition.\n\nThe attached patch includes a CHANGES.txt entry and some minor cleanups:\n\n\n\tRemoved the custom boolean parsing logic in ManagedSynonmyFilterFactory.getIgnoreCase() in favor of the new NamedList.getBooleanArg() method.\n\tAdd missing braces around single-line statement blocks after if and for\n\tAdded Locale.ROOT as the first arg to several String.format() invocations to make ant precommit calm down.\n\tConverted explicit types in generic constructor invocations to the diamond operator.\n\tConverted schema references to ManagedSynonymFilterFactory from using the full package to the short form prefix solr..\n\n\n\nI think it's ready to go.  I'll commit to trunk shortly. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13958312",
            "date": "2014-04-02T23:09:10+0000",
            "content": "Commit 1584211 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1584211 ]\n\nSOLR-5654: Create a synonym filter factory that is (re)configurable, and capable of reporting its configuration, via REST API "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13961170",
            "date": "2014-04-05T17:21:20+0000",
            "content": "Commit 1585147 from sarowe@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1585147 ]\n\nSOLR-5654: Create a synonym filter factory that is (re)configurable, and capable of reporting its configuration, via REST API (merged trunk r1584211) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13961171",
            "date": "2014-04-05T17:24:01+0000",
            "content": "Commit 1585148 from sarowe@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1585148 ]\n\nSOLR-5654: Add CHANGES.txt entry "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13961174",
            "date": "2014-04-05T17:26:03+0000",
            "content": "Committed to trunk and branch_4x.\n\nThanks Tim! "
        }
    ]
}