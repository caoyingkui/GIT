{
    "id": "LUCENE-3314",
    "title": "TestNumericRangeQuery test failure",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "https://builds.apache.org/view/G-L/view/Lucene/job/Lucene-trunk/1624/testReport/org.apache.lucene.search/TestNumericRangeQuery32/testEnum/\n\nant test -Dtestcase=TestNumericRangeQuery32 -Dtestmethod=testEnum -Dtests.seed=-3603272894684698645:-1998239306864854687 -Dtests.multiplier=3 -Dtests.nightly=true",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-14T14:28:11+0000",
            "content": "the assertion is inside of blocktermsreader, when the test expects the termsenum will return null.\n\nwith this seed, its mockvariableintblock codec, but i hacked the test to use StandardCodec and trip the same assert there.\n\nif i hack the test to get simpletext or memorycodec, the test fails because next() returns a term here (i don't understand the test, sorry), but doesn't trip any asserts like it does if we use blocktermsreader.\n\nso, there might be 2 bugs:\n\n\ta bug in the test (or the randomization of #docs or something)\n\ta bug in blocktermsreader\n\n ",
            "author": "Robert Muir",
            "id": "comment-13065290"
        },
        {
            "date": "2011-07-14T14:31:29+0000",
            "content": "Setting affects=4.0, I'm beasting the test on 3.x and 4.0 to try to find seeds that fail faster. ",
            "author": "Robert Muir",
            "id": "comment-13065291"
        },
        {
            "date": "2011-07-14T15:44:51+0000",
            "content": "The \"bug\" is a feature of the test:\nThe test iterates the enum until it returns null. After it returned null (end of enum), it calls again next() and asserts it still returns null. And that is where it fails, it looks like a new bug in MultiTermsEnum. ",
            "author": "Uwe Schindler",
            "id": "comment-13065337"
        },
        {
            "date": "2011-07-14T15:51:14+0000",
            "content": "The javadoc of next says:\n\n Returns the resulting term, or null if the end was hit (which means the enum is unpositioned).\n\n\n\nIt doesn't say anything about the result of next() if the previous call resulted in null, and the \"unpositioned\" verbiage would suggest a more undefined state to me.  If calling next() after null is returned is supported, we should doc it (but this might add extra overhead/state to some implementations?) ",
            "author": "Yonik Seeley",
            "id": "comment-13065340"
        },
        {
            "date": "2011-07-14T15:56:17+0000",
            "content": "I just wanted to make clear, that this test in 3.x was always supported and \"did the right thing\"(tm). In my opinion, we can change the semantics in trunk and simply remove that additional assert in the test. On the other hand, I would prefer to throw IllegalStateEx after you call next() too often (like ju.Iterators do). ",
            "author": "Uwe Schindler",
            "id": "comment-13065344"
        },
        {
            "date": "2011-07-14T16:02:25+0000",
            "content": "Can we meet in the middle?\n\n\texpand the javadocs for termsenum, to say that the result is undefined if you next() after null. this protects us in the future, as if its a performance hit, its no problem.\n\tas a \"best effort\", if there is no performance problem, we \"try\" to throw IllegalStateException for stuff like this. This way users dont report crazy horrific looking things to the user list.\n\n ",
            "author": "Robert Muir",
            "id": "comment-13065347"
        },
        {
            "date": "2011-07-14T16:05:31+0000",
            "content": "+1 ",
            "author": "Uwe Schindler",
            "id": "comment-13065351"
        },
        {
            "date": "2011-07-14T16:09:43+0000",
            "content": "+1 ",
            "author": "Yonik Seeley",
            "id": "comment-13065355"
        },
        {
            "date": "2011-07-14T16:14:05+0000",
            "content": "also, i think if its too slow to do a real check for this, we can always try to add a check that only works if assertions are enabled... this is still something. ",
            "author": "Robert Muir",
            "id": "comment-13065358"
        },
        {
            "date": "2011-07-14T19:17:20+0000",
            "content": "+1\n\nAssertion fail, throwing ISE, are just best effort.  If you call next again after you got null already then it's not defined... ",
            "author": "Michael McCandless",
            "id": "comment-13065478"
        },
        {
            "date": "2011-07-14T20:03:05+0000",
            "content": "To fix the test issue, we should at least remove the additional assertNull. The remaining things can be done later. ",
            "author": "Uwe Schindler",
            "id": "comment-13065508"
        },
        {
            "date": "2011-11-13T02:07:39+0000",
            "content": "i just tripped on this one lately, because i think we are calling countTerms() more often.\n\nFirst to fix the test issue, I will disable the assertNull with a comment, as well as add\njavadocs to TermsEnum that say the result is undefined if you next() after it already returned null.\n\nLater we can investigate on a case-by-case basis if it costs us nothing to throw IAE/assert etc. ",
            "author": "Robert Muir",
            "id": "comment-13149202"
        },
        {
            "date": "2011-11-13T02:10:20+0000",
            "content": "OK! It still good that we have those tests  ",
            "author": "Uwe Schindler",
            "id": "comment-13149203"
        },
        {
            "date": "2011-11-13T02:18:19+0000",
            "content": "Here's another way to trip this one:\n\nant test -Dtestcase=TestNumericRangeQuery32 -Dtestmethod=testEmptyEnums -Dtests.seed=-6cf5377efbeeeaa2:619611fcd3564c6d:24032e2211abf874 -Dargs=\"-Dfile.encoding=MacRoman\"\n\nand was worried that it was because of the changes I was making for SOLR-2881. But now I can rest easier.... ",
            "author": "Erick Erickson",
            "id": "comment-13149205"
        },
        {
            "date": "2011-11-13T02:19:27+0000",
            "content": "Sorry, should have said \"on trunk\" for hitting this error. ",
            "author": "Erick Erickson",
            "id": "comment-13149206"
        },
        {
            "date": "2011-11-13T02:22:50+0000",
            "content": "I committed a fix for this in r1201393 ",
            "author": "Robert Muir",
            "id": "comment-13149207"
        }
    ]
}