{
    "id": "SOLR-11884",
    "title": "find/fix inefficiencies in our use of logging",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "logging"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We've been looking at Solr using Flight Recorder and ran across some interesting things I'd like to discuss. Let's discuss general logging approaches here, then perhaps break out sub-JIRAs when we reach any kind of agreement.\n\n1> Every log message generates a new Throwable, presumably to get things like line number, file, class name and the like. On a 2 minute run blasting updates this meant 150,000 (yes, 150K) instances of \"new Throwable()\".\n\n\u00a0\n\nSee the section \"Asynchronous Logging with Caller Location Information\" at:\n\nhttps://logging.apache.org/log4j/2.x/performance.html\n\nI'm not totally sure changing the layout pattern will fix this in log4j 1.x, but apparently certainly should in log4j 2.\n\n\u00a0\n\nThe cost of course would be that lots of our log messages would lack some of the information. Exceptions would still contain all the file/class/line information of course.\n\n\u00a0\n\nProposal:\n\nChange the layout pattern to, by default, NOT\u00a0 include information that requires a Throwable to be created. Also include a pattern that could be un-commented to get this information back for troubleshooting.\n\n\u00a0\n\n--------------------\n\n\u00a0\n\nWe generate strings when we don't need them. Any construct like\n\nlog.info(\"whatever \" + method_that_builds_a_string + \" : \" + some_variable);\n\ngenerates the string (some of which are quite expensive) and then throws it away if the log level is at, say, WARN. The above link also shows that parameterizing this doesn't suffer this problem, so anything like the above should be re-written as:\n\nlog.info(\"whatever {} : {} \", method_that_builds_a_string, some_variable);\n\n\u00a0\n\nThe alternative is to do something like but let's make use of the built-in capabilities instead.\n\nif (log.level >= INFO) \n{\n\u00a0 \u00a0log.info(\"whatever \" +\u00a0method_that_builds_a_string + \" : \" + some_variable);\n\n}\n\netc.\n\nThis would be a pretty\u00a0huge\u00a0thing to fix all-at-once so I suppose we'll have to approach it incrementally. It's also something that, if we get them all out of the code should be added to precommit failures. In the meantime, if anyone who has the precommit chops could create a target that checked for this it'd be a great help in tracking all of them down, then could be incorporated in the regular precommit checks if/when they're all removed.\n\nProposal:\n\nUse JFR or whatever to identify the egregious violations of this kind of thing (I have a couple I've found) and change them to parameterized form (and prove it works). Then see what we can do to move forward with removing them all through the code base.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-01-22T20:40:33+0000",
            "content": "Forgot to say two things:\n\n\u00a0\n\n1> Assigning to myself to track, don't know when I'll get to it, especially the larger issues of the rest of the code base.\n\n2> I haven't verified these behaviors when using log4j 1.x yet. Whatever doesn't work for log4j 1 we can add after moving to log4j 2 (see SOLR-7887) which should be Real Soon Now. ",
            "author": "Erick Erickson",
            "id": "comment-16334859"
        },
        {
            "date": "2018-01-22T21:46:13+0000",
            "content": "Erick Erickson I previously logged\u00a0 SOLR-10415\u00a0to track some of the issues I found in solr core.\u00a0 ",
            "author": "Michael Braun",
            "id": "comment-16334977"
        },
        {
            "date": "2018-01-23T01:33:21+0000",
            "content": "Thanks Michael, at least they're linked now ",
            "author": "Erick Erickson",
            "id": "comment-16335266"
        },
        {
            "date": "2018-01-23T23:29:14+0000",
            "content": "Hi Erick,\n\nHow about we split this discussion into two parts?\n\npart1: where the %C is grabbing a stack tace and we should disable that by default and tackle that in this jira\npart2: where expensive log messages should be parameterized . This could be addressed via SOLR-10415 and jiras linked from there\n\nIf you think this is a good idea then we could edit the Description/Title of the Jira to only cover the first part so that when we look back at this Jira we'll be more clear as to what this was addressing ",
            "author": "Varun Thacker",
            "id": "comment-16336544"
        },
        {
            "date": "2018-01-24T00:52:54+0000",
            "content": "I pretty much expect this to become an umbrella Jira with sub-tasks, so that'd be fine. And SOLR-10415\u00a0may even get a bunch of sub-tasks. ",
            "author": "Erick Erickson",
            "id": "comment-16336676"
        },
        {
            "date": "2018-03-04T20:48:14+0000",
            "content": "NOTE: SOLR-7887 fixed the %C issues, or at least when I checked on 27-Mar there were no instances of %C in any of the log4j configuration files. ",
            "author": "Erick Erickson",
            "id": "comment-16385372"
        },
        {
            "date": "2018-05-04T18:20:23+0000",
            "content": "> NOTE:\u00a0SOLR-7887\u00a0fixed the %C issues, or at least when I checked on 27-Mar there were no instances of %C in any of the log4j configuration files.\n\n\u00a0\n\nConfirmed. The performance implications of %C were documented https://logging.apache.org/log4j/2.x/manual/layouts.html#LocationInformation\u00a0and up until Solr 7.3 the example log4j.properties had %C ( https://github.com/apache/lucene-solr/blob/releases/lucene-solr/7.3.0/solr/example/resources/log4j.properties#L18\u00a0) but we no longer have any %C starting Solr 7.4\u00a0\n\nCan we close out this issue? ",
            "author": "Varun Thacker",
            "id": "comment-16464233"
        },
        {
            "date": "2018-05-05T01:55:35+0000",
            "content": "Not yet. We're going through the uses of log.info(\"message\" + blahblahblah) type calls. Although that could be another JIRA. ",
            "author": "Erick Erickson",
            "id": "comment-16464564"
        }
    ]
}