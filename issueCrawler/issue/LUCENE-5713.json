{
    "id": "LUCENE-5713",
    "title": "FieldCache related test failure",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "6.0",
        "status": "Open",
        "fix_versions": []
    },
    "description": "The following reproduces for me and Varun  V Shenoy on trunk:\nlucene/spatial %>ant test  -Dtestcase=SpatialOpRecursivePrefixTreeTest -Dtests.method=testContains -Dtests.seed=3AD27D1EB168088A\n\n\n[junit4]   1> Strategy: RecursivePrefixTreeStrategy(SPG:(GeohashPrefixTree(maxLevels:2,ctx:SpatialContext.GEO)))\n   [junit4]   1> CheckReader failed\n   [junit4]   1>     test: field norms.........OK [0 fields]\n   [junit4]   1>     test: terms, freq, prox...OK [207 terms; 208 terms/docs pairs; 0 tokens]\n   [junit4]   1>     test: stored fields.......OK [8 total field count; avg 2 fields per doc]\n   [junit4]   1>     test: term vectors........OK [0 total vector count; avg 0 term/freq vector fields per doc]\n   [junit4]   1>     test: docvalues...........ERROR [dv for field: SpatialOpRecursivePrefixTreeTest has -1 ord but is not marked missing for doc: 0]\n   [junit4]   1> java.lang.RuntimeException: dv for field: SpatialOpRecursivePrefixTreeTest has -1 ord but is not marked missing for doc: 0\n   [junit4]   1> \tat org.apache.lucene.index.CheckIndex.checkSortedDocValues(CheckIndex.java:1414)\n   [junit4]   1> \tat org.apache.lucene.index.CheckIndex.checkDocValues(CheckIndex.java:1536)\n   [junit4]   1> \tat org.apache.lucene.index.CheckIndex.testDocValues(CheckIndex.java:1367)\n   [junit4]   1> \tat org.apache.lucene.util.TestUtil.checkReader(TestUtil.java:229)\n   [junit4]   1> \tat org.apache.lucene.util.TestUtil.checkReader(TestUtil.java:216)\n   [junit4]   1> \tat org.apache.lucene.util.LuceneTestCase.newSearcher(LuceneTestCase.java:1597)\n\n\n\nA 1-in-500 random condition hit to check the index on newSearcher, hitting this.  DocValues used to not be enabled for this spatial test but Robert Muir added it recently as part of the move to the DocValues API in lieu of the FieldCache API, and because the DisjointSpatialFilter uses getDocsWithField (though nothing else).  That probably doesn't have anything to do with whatever the problem here is, though.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14012101",
            "author": "Robert Muir",
            "content": "I did not add docvalues to the lucene/spatial module. It still uses fieldcache. I hope this is clear that this is just a fieldcache bug  ",
            "date": "2014-05-29T05:55:22+0000"
        },
        {
            "id": "comment-14012450",
            "author": "David Smiley",
            "content": "I see.  I guess the term \"DocValues\" has become ambiguous \u2013 are we talking the API or .... that technology Simon first built. ",
            "date": "2014-05-29T15:33:37+0000"
        },
        {
            "id": "comment-14049562",
            "author": "David Smiley",
            "content": "Robert Muir, lets discuss the issue here instead of dev list emails.\n\nFYI the test class has been renamed to \"RandomSpatialOpFuzzyPrefixTreeTest\" and the seed still triggers the error.\n\nThe one line in the test that sets up the UninvertingReader is in setUp() follows:\n\n//Only for Disjoint.  Ugh; need to find a better way.  LUCENE-5692\nuninvertMap.put(getClass().getSimpleName(), UninvertingReader.Type.SORTED);\n\n\n\nThis test class tests RecursivePrefixTreeStrategy (RPT), one of something like 5 SpatialStrategy implementations in the spatial API.  RPT only makes reference to DocValues (formerly FieldCache) for supporting the \"disjoint\" predicate. However, the particular test failure here is for the testContains method which tests the \"contains\" predicate which does not use DocValues.  It would appear based on this fact that the bug is not in the spatial module.  How could it be?\n\nIt's out of scope in this issue to discuss why any particular SpatialStrategy implementation relies on UninvertingReader. I agree that all SpatialStrategies that do should be upgraded \u2013 I'll file an issue for it.  But meanwhile, it seems to me there is a  bug in UninvertingReader, even if in a more perfect world, the spatial module wouldn't be using it in the first place. ",
            "date": "2014-07-02T02:46:55+0000"
        },
        {
            "id": "comment-14049631",
            "author": "Robert Muir",
            "content": "Please don't try to move the discussion from the list here, only to make the same mistake again.\n\nThe bug is the spatial module. I explained exactly why in the previous message. I'm not going to repeat it again. ",
            "date": "2014-07-02T05:06:20+0000"
        }
    ]
}