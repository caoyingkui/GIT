{
    "id": "SOLR-2093",
    "title": "regular expression in PatternReplaceFilter can handle: /([^/]*)",
    "details": {
        "affect_versions": "1.4",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "Using PatternReplaceFilter i want to extract a certain word out of the URI.\nAlthough I now understand that I should handle this outside of Solr, the fact remains that Solr does not adequately handle regular expressions.\n\nViewing the source code, I don't see any problems since it uses the java library.\n\nThe problem:\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter class=\"solr.PatternReplaceFilterFactory\"\n                        pattern=\"/([^/])/[^/]$\" replacement=\"$1\"  replace=\"all\" />\n      </analyzer>\n\nInput text:\n\n\ta/b/c\n\n\n\nExpected\n\n\tb\n\n\n\nResult Solr\n\n\tab\n\n\n\nAn online JAVA regexp tester (http://www.regexplanet.com/simple/index.html):\n\n\tb\n\n\n\nSo the problem area lies at /([^/])",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12904086",
            "date": "2010-08-30T05:32:00+0000",
            "content": "\nAn online JAVA regexp tester (http://www.regexplanet.com/simple/index.html):\n\n\tb\n\n\n\nI tried Java regex tester, but the result of it was same as Solr result, i.e. \"ab\". Please look at replaceAll(), not group(1). "
        },
        {
            "author": "Kuri Masta",
            "id": "comment-12904140",
            "date": "2010-08-30T11:28:47+0000",
            "content": "With a/b/c as input\n\nYou'll notice that I start searching from the end of the line.\n1(a$).        match everything to the left until: /\n2.           match /\n3($1 = b). Repeat the previous but capture the match\n4.           match /\n\nI wouldn't even know how to write regexp so it will concatenate two seperate matches, divided by '/', into one var.\n\nBefore I posted I've tried two regexp tools besides Solr.\n\nI would like you to try again. But please keep in mind that I don't need this fix, I just found a bug and am reporting it. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12916307",
            "date": "2010-09-29T23:39:14+0000",
            "content": "I would like you to try again. But please keep in mind that I don't need this fix, I just found a bug and am reporting it.\n\nI see no bug here.\n\n As Koji described, even using the online regex tool you provided you can see these exact results.\n\nInput...\n\nRegular Expression: /([^/]*)/[^/]*$\nReplacement: $1\nTest String #1: a/b/c\n\n\n\nOutput...\n\n...\nreplaceAll(): ab\n...\ngroup(0): /b/c\ngroup(1): b\n\n\n\nI wouldn't even know how to write regexp so it will concatenate two seperate matches\n\nI don't think you understand the regex you provided.  I don't believe there are two matches, I believe there is one match (refered to in your online tool as \"group(0)\"), and that entire match is replaced by the first parenthetical group (refered to in your online tool as \"group(1)\").\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12916309",
            "date": "2010-09-29T23:46:36+0000",
            "content": "Note: Part of your confusion may lie in the meaning behind replace=\"all\" ... this doesn't mean replace the entire Token, this means replace all matches of the regex with the replacement value \u2013 so the pattern will be evaluated over and over against the input string (starting at the end of the last match) until it no longer matches, and each match will result in a replacement.\n\nIf you want the entire input Token to be replaced by the parenthetical group, you need to anchor your regex at both ends.  This should work..\n\n\n<filter class=\"solr.PatternReplaceFilterFactory\"\n        pattern=\"^.*/([^/]*)/[^/]*$\" replacement=\"$1\" replace=\"all\" />\n\n "
        }
    ]
}