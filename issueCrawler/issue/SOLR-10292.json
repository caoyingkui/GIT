{
    "id": "SOLR-10292",
    "title": "Add cartesian Streaming Expression to build cartesian products from multi-value fields and text fields",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [
            "6.6"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently all the Streaming Expression such as rollups, intersections, fetch etc, work on single value fields. The cartesian expression would create a stream of tuples from a single tuple with a multi-value field. This would allow multi-valued fields to be operated on by the wider library of Streaming Expression.\n\nFor example a single tuple with a multi-valued field:\n\nid: 1\nauthor: [Jim, Jack, Steve]\n\nWould be transformed in the following three tuples:\n\nid:1\nauthor:Jim\n\nid:1\nauthor:Jack\n\nid:1\nauthor:Steve",
    "attachments": {
        "SOLR-10292.patch": "https://issues.apache.org/jira/secure/attachment/12859327/SOLR-10292.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-17T02:33:56+0000",
            "content": "I'm not a huge fan of the function name, but feature-wise I think this would be good.\n\n\ncartesian(\n  <stream>,\n  by=\"field1,field2\",\n  sort=\"field1 ASC\"\n)\n\n\n\n1. Supports any incoming stream\n2. Allows you to do the product over multiple fields\n3. Allows you to indicate a sort order for the new tuples, if not provided will default to incoming order of values in by fields\n4. If a non-array exists in the by fields then this will just return that single tuple, no need to error out. Allows for fields where a mixture of multi and single valued exist.\n\nAnything I'm missing? ",
            "author": "Dennis Gove",
            "id": "comment-15929350"
        },
        {
            "date": "2017-03-17T11:45:19+0000",
            "content": "I was basing the name off of this:\nhttp://docs.aws.amazon.com/machine-learning/latest/dg/data-transformations-reference.html#cartesian-product-transformation\n\nOne of the things I was considering is making the cartesian function be the opposite of reduce. In this scenario we allow for cartesian operations that would take in a single tuple and return an array of tuples. The tuples would then be streamed from the cartesian function rather then returning the array.\n\nThis would allow us to add cartesian operations on text fields which would use tokenizers to emit sentences, shingles, key phrases etc..  ",
            "author": "Joel Bernstein",
            "id": "comment-15929818"
        },
        {
            "date": "2017-03-17T11:49:52+0000",
            "content": "Here is a potential pipeline:\n\ncartesian(cartesian(expr, \n                    sentences(field)), \n          keyPhrases(field))\n\n\n\nThe inner cartesian emits tuples with sentences and the outer cartesian emits tuples with keyPhrases.\n\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-15929822"
        },
        {
            "date": "2017-03-17T13:17:25+0000",
            "content": "I like this. Also, a new set of evaluator types which return arrays/lists. ",
            "author": "Dennis Gove",
            "id": "comment-15929953"
        },
        {
            "date": "2017-03-17T15:28:35+0000",
            "content": "Here are some text cartesian operations that might be interesting to support:\n\n1) Regex extraction\n2) Sentence\n3) Key phrases\n4) Shingles\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-15930135"
        },
        {
            "date": "2017-03-17T17:37:03+0000",
            "content": "Implements everything except the read() function.\n\nExpression is \n\ncartesian(\n  <stream>,\n  <fieldName | evaluator> [as newName],\n  <fieldName | evaluator> [as newName],\n  [productSort=\"how to order new tuples\"\n)\n\n\n\n1. Will create a tuple for each value in the field, and return in the order the values appear in the field\n\ncartesian(\n  <stream>,\n  multivaluedField\n)\n\n\n\n2. Will create a tuple for each value in the field, and return in the order of the ascending order of the values in the field\n\ncartesian(\n  <stream>,\n  multivaluedField,\n  productSort=\"multivaluedField ASC\"\n)\n\n\n\n3. Will create a tuple for each value in the evaluated expression, putting the value in the same fieldName, and return new tuples in ascending order of the evaluated values \n\ncartesian(\n  <stream>,\n  sentence(fieldA) as fieldA,\n  productSort=\"fieldA ASC\"\n)\n\n\n\n4. Will create a tuple for each value in evaluated regex and sentence\n\ncartesian(\n  <stream>,\n  sentence(fieldA) as newField,\n  regexGroups(fieldB, \"some regex expression generating groups\") as fieldB\n  productSort=\"fieldB ASC, newField DESC\"\n)\n\n ",
            "author": "Dennis Gove",
            "id": "comment-15930351"
        },
        {
            "date": "2017-03-17T17:40:10+0000",
            "content": "Also, in search of a better parameter name than \"productSort\". I want it to imply that this is only creating a sort on the new tuples and does not resort the entire stream. ",
            "author": "Dennis Gove",
            "id": "comment-15930354"
        },
        {
            "date": "2017-03-17T18:14:58+0000",
            "content": "We could skip the productSort all together and rely on the sort() expression.\n\nPatch looks great. Looks like we just need to implement a few cartesian evaluators. Regex might be the easiest place to start as it doesn't rely on an analyzer. ",
            "author": "Joel Bernstein",
            "id": "comment-15930412"
        },
        {
            "date": "2017-03-17T18:25:18+0000",
            "content": "For the read() implementation I think each cartesian evaluator's product should be based on the original tuple, not on the tuples created by the proceeding cartesian evaluators. Otherwise the final product will be hard to understand. ",
            "author": "Joel Bernstein",
            "id": "comment-15930428"
        },
        {
            "date": "2017-03-17T22:17:15+0000",
            "content": "My concern with relying on sort() is that it requires reading all tuples before doing the sort. If we're just providing a way to order the generated tuples I think using a sort() stream would be too costly.\n\nI agree that the result of each evaluator will be based on the original tuple. But if multiple evaluators, e1 and e2, are used then the resulting tuples will look like\n\n{\n  fieldA : e1[0],\n  fieldB : e2[0],\n  <other fields> \n},\n{\n  fieldA : e1[0],\n  fieldB : e2[1],\n  <other fields> \n},\n{\n  fieldA : e1[0],\n  fieldB : e2[2],\n  <other fields> \n},\n{\n  fieldA : e1[1],\n  fieldB : e2[0],\n  <other fields> \n},\n{\n  fieldA : e1[1],\n  fieldB : e2[1],\n  <other fields> \n},\n{\n  fieldA : e1[1],\n  fieldB : e2[2],\n  <other fields> \n},\n\n ",
            "author": "Dennis Gove",
            "id": "comment-15930824"
        },
        {
            "date": "2017-03-18T02:34:26+0000",
            "content": "Includes an implementation of read().\n\nAlso, updates FieldEvaluator to support getting multi-valued fields from the tuple. For simplicity in all evaluators, if FieldEvaluator finds an Object[] (object array) it will convert that into an ArrayList (preserving value order). This allows us to only have to check for Collection in evaluators or streams and not have to worry about object arrays.\n\nI don't have any tests yet so I'm crossing my fingers the logic is playing out as I expect it to. ",
            "author": "Dennis Gove",
            "id": "comment-15931014"
        },
        {
            "date": "2017-03-18T03:07:25+0000",
            "content": "Fixes a missed case in FieldEvaluator.\n\nNow this turns both object arrays and Iterables which are not lists into ArrayLists. ",
            "author": "Dennis Gove",
            "id": "comment-15931026"
        },
        {
            "date": "2017-03-19T20:30:36+0000",
            "content": "Tests added and passing.\n\nThis does not add any additional evaluators. I think those can be added in other tickets. All evaluators are supported by this stream so anything you think to add (regex matching, sentence creation, etc...) will work. The stream works with both multi-valued and single-valued fields in so much that it will treat single-valued fields as a collection with a single item. ",
            "author": "Dennis Gove",
            "id": "comment-15931943"
        },
        {
            "date": "2017-03-20T00:49:39+0000",
            "content": "I think this is ready to go. I've decided to be explicit and register it under the function name 'cartesianProduct'.\n\nFull suite of tests and precommit pass. ",
            "author": "Dennis Gove",
            "id": "comment-15932045"
        },
        {
            "date": "2017-03-20T20:03:42+0000",
            "content": "Commit 9738d34fb130924d144c489212c3cc8b915a11d0 in lucene-solr's branch refs/heads/branch_6x from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9738d34 ]\n\nSOLR-10292: Adds CartesianProductStream to turn multivalued fields into multiple tuples ",
            "author": "ASF subversion and git services",
            "id": "comment-15933426"
        },
        {
            "date": "2017-03-20T20:41:57+0000",
            "content": "Commit 92297b58605104106b5b31d3dae5c2daed1886ba in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=92297b5 ]\n\nSOLR-10292: Adds CartesianProductStream to turn multivalued fields into multiple tuples ",
            "author": "ASF subversion and git services",
            "id": "comment-15933503"
        },
        {
            "date": "2017-05-19T23:33:30+0000",
            "content": "Hi Dennis,\n\nCan we close out this issue with \"Fix Version as 6.6\" \nSecondly on master shouldn't this entry be under \"6.6\" instead of  \"7.0.0\" ? It's fine on branch_6x  ",
            "author": "Varun Thacker",
            "id": "comment-16018165"
        },
        {
            "date": "2017-05-20T01:10:46+0000",
            "content": "Commit a622568979ed0b84fe40174fe8b219599c15b72c in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a622568 ]\n\nSOLR-10292: Moves new feature description in solr/CHANGES.txt to the correct version ",
            "author": "ASF subversion and git services",
            "id": "comment-16018222"
        },
        {
            "date": "2017-05-20T01:12:08+0000",
            "content": "Varun Thacker, thank you. I've corrected this. ",
            "author": "Dennis Gove",
            "id": "comment-16018223"
        }
    ]
}