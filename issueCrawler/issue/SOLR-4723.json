{
    "id": "LUCENE-4937",
    "title": "sort order different in branch_4x than trunk",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.3"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I will buy a beer to whoever figures out why +0 sorts before -0 in branch_4x, but works correctly in trunk",
    "attachments": {
        "LUCENE-4937_test.patch": "https://issues.apache.org/jira/secure/attachment/12579027/LUCENE-4937_test.patch",
        "SOLR-4723_test.patch": "https://issues.apache.org/jira/secure/attachment/12579008/SOLR-4723_test.patch",
        "LUCENE-4937.patch": "https://issues.apache.org/jira/secure/attachment/12579028/LUCENE-4937.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13633335",
            "date": "2013-04-16T20:49:08+0000",
            "content": "here's my test. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13633336",
            "date": "2013-04-16T20:49:30+0000",
            "content": "and this might be a lucene bug. i just pulled out a lot of hair trying to track down WTF so i need a break. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13633352",
            "date": "2013-04-16T21:00:42+0000",
            "content": "It might be that trunk uses Double.compare (from a java7 commit?) and branch_4x does this:\n\n\nif (v1 > v2) {\n  return 1;\n} else if (v1 < v2) {\n  return -1;\n} else {\n  return 0;\n}\n\n\n\nIf so this is not right, because NumericUtils documents it is consistent with Double.compareTo and Float.compareTo, so something needs to be fixed. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13633382",
            "date": "2013-04-16T21:22:08+0000",
            "content": "The pre-trunk code is wrong for comparing doubles/floats, as v1 > v2 does not work with +/-0 (its identical for operators <, >, ==). In Java 7, Double/Float.compare() compares the bits.\n\nThe easiest way to solve the problem is using NumericUtils.doubleToSortableLong/floatToSortableInt and then compare the long/int. NumericUtils converts the floating point value to an integer, with fixing the sign to be comparable like a int (see javadocs).\n\nI think this is a corner case (like the crazy bugs if the score is NaN), so maybe we should only fix in 5.0 but leave 4.x and all previous lucene versions as they are. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13633387",
            "date": "2013-04-16T21:26:18+0000",
            "content": "We can fix the bug also in Java 6, because Float.compare(float,float) and Double.compare(double,double) are there since Java 1.4.\n\nIt is only integer's compare which iss missing.\n\nSo we should really use the correct Double/Float functions:\n\n\thttp://docs.oracle.com/javase/1.4.2/docs/api/java/lang/Double.html#compare(double, double)\n\thttp://docs.oracle.com/javase/1.4.2/docs/api/java/lang/Float.html#compare(float, float)\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13633388",
            "date": "2013-04-16T21:26:18+0000",
            "content": "A documentation fix is fine by me... I just found it surprising since i couldnt reproduce from trunk. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13633390",
            "date": "2013-04-16T21:26:55+0000",
            "content": "See my comment, we can fix it. The static compare methods are available in since Java 1.4. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13633435",
            "date": "2013-04-16T21:53:37+0000",
            "content": "here's some tests for lucene (fieldcache and docvalues, both fail in 4.x) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13633438",
            "date": "2013-04-16T21:54:15+0000",
            "content": "Here the patch, what I did:\n\n\tI merged Adriens patch for from trunk to 4.x\n\tI reverted all Java 7 Integer.compare(),...\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13633460",
            "date": "2013-04-16T22:04:21+0000",
            "content": "Patch including all tests on this issue.\n\nI will commit this to 4.x and then merge to trunk (the tests) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13633464",
            "date": "2013-04-16T22:07:16+0000",
            "content": "Thanks Uwe: now i owe some beer! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13633467",
            "date": "2013-04-16T22:08:04+0000",
            "content": "Looking forward to see you in Berlin! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13633477",
            "date": "2013-04-16T22:13:38+0000",
            "content": "I committed to 4.x branch and merged the tests to trunk, the other changes merged successfully as identical code now. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13634033",
            "date": "2013-04-17T13:49:33+0000",
            "content": "Thanks Uwe! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654014",
            "date": "2013-05-10T10:33:44+0000",
            "content": "Closed after release. "
        }
    ]
}