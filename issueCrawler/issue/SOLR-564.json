{
    "id": "SOLR-564",
    "title": "Realtime search in Solr",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "replication (scripts)",
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "Before when I looked at this, the changes required to make Solr realtime would seem to break the rest of Solr.  Is this still the case?  In project Ocean http://code.google.com/p/oceansearch/ there is a realtime core however integrating into Solr has looked like a redesign of the guts of Solr.  \n\n\n\tSupport for replication per update to transaction log\n\tCustom realtime index creation\n\tFilter and facet merging\n\tCustom IndexSearcher that ties into realtime subsystem\n\tCustom SolrCore that ties into realtime subsystem\n\n\n\nIs there a way to plug into these low level Solr functions without a massive redesign?  A key area of concern is the doclist caching which is not used in realtime search because after every update the doclists are no longer valid.  The doclist caching and handling is default in SolrCore.  Ocean relies on a custom threaded MultiSearcher rather than a single IndexSearcher is a difficulty.  DirectUpdateHandler2 works directly on IndexWriter is problematic.",
    "attachments": {
        "solr-564.patch": "https://issues.apache.org/jira/secure/attachment/12383245/solr-564.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12595837",
            "date": "2008-05-10T16:35:38+0000",
            "content": "this seems like a \"discussion\" more then an \"issue\" ... as such it really belongs on solr-dev, not in Jira.\n\n(if after some discussion, people come up with a plan to pursue, or a proposal that includes a patch, that's when a Jira issue starts to make sense) "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12595872",
            "date": "2008-05-11T01:47:17+0000",
            "content": "Jason, are your patches in various other Solr JIRA issues essentially the answer to your question above: Is there a way to plug into these low level Solr functions without a massive redesign?  In other words, are you providing patches incrementally with the goal of getting Ocean Search's functionality merged into Solr? (that would be great!) "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12595960",
            "date": "2008-05-12T02:02:38+0000",
            "content": "The patches are a way to see if integration with Ocean is possible.  \n\nSome issues that have been cropping up include the anywhere direct field cache access is performed.  This includes SimpleFacets, ValueSource, and other places.  These are areas I do not have an immediate solution to and so the first version of OceanCore will not implement.  \n\nBecause Ocean makes use field caching per segment, and new segments are being created all the time, something like MultiDocSet would need to be created to fit Ocean into the existing Lucene field cache framework.  However this is impossible given Lucene field caching uses direct array access whereas DocSet is an interface.  Ocean has a flexible field caching framework that includes a primitive based StringIndex like set of classes which save ram and allow fast range queries.  \n\nPerforming work inside the segments and then merging the results later is how the Ocean is designed.  I'm not sure how much work it would take to have Solr do the same.  The concept is similar to the distributed indexing in Solr.   "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12597635",
            "date": "2008-05-16T22:28:13+0000",
            "content": "Some issues that have been cropping up include the anywhere direct field cache access is performed. This includes SimpleFacets, ValueSource, and other places.\n\n...like sorting.\n\nPerforming work inside the segments and then merging the results later is how the Ocean is designed. I'm not sure how much work it would take to have Solr do the same.\n\nthis sounds akin to LUCENE-831 .. it should probably be dealt with at the Lucene level before attempting any big hoop jumping in Solr "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12598308",
            "date": "2008-05-20T14:29:19+0000",
            "content": "After review, function queries ValueSource should be fine because the values are not loaded from the field cache until the query is executed in the sub-searcher.  Sort is not mentioned because it is handled in the sub-searcher.  LUCENE-831 is a good step, however, if used for the top level reader in a realtime system, large arrays will constantly be created for the top level reader after every transaction.  This is why the work, meaning the query and the results, should be performed in the sub-searcher and then merged.  \n\nSimpleFacets.getFieldCacheCounts should be placed in the SolrIndexSearcher in order for it to be operable which will be placed in SOLR-567.\n\nThe Ocean Solr code patch will be attached to this issue.   "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-12601739",
            "date": "2008-06-02T19:40:33+0000",
            "content": "solr-564.patch\n\nEarly Ocean Solr integration code.  For viewing only.  Depends on SOLR-568, SOLR-567, Lucene contrib InstantiatedIndex, LUCENE-1289, jdom, commons-io, commons-lang, geoapi-nogenerics-2.1-M2.jar, gt2-referencing-2.3.2.jar.  Not sure what to do with heavily modified net.sourceforge.jsorter code (it is Apache license).   "
        }
    ]
}