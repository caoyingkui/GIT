{
    "id": "SOLR-10726",
    "title": "SolrCloud opens multiple searchers on replica creation/startup",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "search",
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.5.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I was investigating some curious behavior reported by a customer around first searcher event listeners and multiple searchers being opened when adding a new replica.\n\nTurns out that if you add a new replica to solrcloud:\n1) Searchers are opened at least twice and possibly a third time\n2) the first time is because of a new core coming online and opening searcher on an empty index \u2013 only firstSearcher event listeners are fired here\n3) second time is after replication is complete and we have new index files available \u2013 firstSearcher event listeners are fired again because the old searcher opened on core load has already been closed and disposed so this is technically again a first searcher\n4) third time happens after documents buffered during recovery are replayed \u2013 if there was no indexing happening on leader then this step is skipped \u2013 a newSearcher event is fired here because we had already opened a searcher in the last step\n\nNow if instead of a new replica, a solr node is restarted then there can be upto four searcher opens \u2013 the additional open is because of log replay on startup.\n\nSo Solr spends a lot of time on unnecessary warming/autowarming on searchers that are discarded. It is not just warming because sometimes plugins such as SpellCheckComponent and SuggestComponent can also tie in to these listener events.\n\nWe can probably cut a few of them or at least defer the decision of whether to fire these listeners to places such as RecoveryStrategy which have a better idea of whether it is worth it.",
    "attachments": {
        "semaphore.newsearcher.test.log.txt": "https://issues.apache.org/jira/secure/attachment/12875834/semaphore.newsearcher.test.log.txt",
        "SOLR-10726.semaphore.newsearcher.test.patch": "https://issues.apache.org/jira/secure/attachment/12875835/SOLR-10726.semaphore.newsearcher.test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-06T00:05:56+0000",
            "content": "\nFWIW...\n\nI was attempting to write a test that would prove/disprove if waitSearcher=true actually worked in SolrCloud, by having a 'newSearcher' event listener that used a semaphore to try and detect if/when a newSearcher was being warmed after the client's commit call had already been returned.\n\nI ran into some weird problems, and in mentioning them in passing to shalin, he pointed me to this jira.\n\nI'm attaching a patch showing what i have at the moment \u2013 it doesn't really do much towards my current goal, but it does help demonstrate a few weird things about when/how newSerchers are being opened in SolrCloud that seems relevant to the related problems shalin mentioned when creating this jira...\n\n\n\tI had to put some special code in to do an initial commit (on the empty index) to work around the fact that evidently SolrCore will re-open a newSearcher after the very first commit \u2013 even if no documents have been added to it's index.\n\t\n\t\tBUT: This doesn't happen on every SolrCore ??? ... it seems to be an \"N-1\" situation, where N is the total number of cores.  Ie: in a 2 shard collection with repFactor=2, aparently only 3 of the cores open a newSearcher on this (empty) commit\n\t\tsee the usage of nocommit_HACK_ON_HACK_nocommit_seriously_nocommit for details\n\t\n\t\n\tOnce the test actaully starts adding docs to the index, things work predictible \u2013 for a bit...\n\t\n\t\tThe test sequentially does an add followed by a commit, and verifies (using the semaphore) that only 2 replicas (presumably of the shard the added document belongs to) open a newSearcher\n\t\tin reality, eventually a commit happens where every SolrCore re-opens a newSearcher (even though nothing in the index has changed on the 2 nodes of the other shards) and there aren't evenough permits in the semaphore.\n\t\n\t\n\n\n\n\n\n\nI'm not planning to pursue this at the moment, but i wanted to share it in case it can serve as a useful starting point for anyone else who wants to look into figuring out why it's happening and/or reducing how often SolrCloud is opening newSearchers. ",
            "author": "Hoss Man",
            "id": "comment-16075667"
        }
    ]
}