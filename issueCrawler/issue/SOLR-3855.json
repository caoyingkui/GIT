{
    "id": "SOLR-3855",
    "title": "DocValues support",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It would be nice if Solr supported DocValues:\n\n\tfor ID fields (fewer disk seeks when running distributed search),\n\tfor sorting/faceting/function queries (faster warmup time than fieldcache),\n\tbetter on-disk and in-memory efficiency (you can use packed impls).",
    "attachments": {
        "SOLR-3855-2.patch": "https://issues.apache.org/jira/secure/attachment/12570572/SOLR-3855-2.patch",
        "SOLR-3855.patch": "https://issues.apache.org/jira/secure/attachment/12547981/SOLR-3855.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Adrien Grand",
            "id": "comment-13458753",
            "date": "2012-09-19T15:29:09+0000",
            "content": "I have planned to start working on this when 4.0 is released. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13470356",
            "date": "2012-10-05T14:39:31+0000",
            "content": "Initial patch:\n\nDocValues can be:\n\n\tconfigured on a per-field-type basis (docValueType=...),\n\tenabled on a per-field basis (docValues=true/false)\n\n\n\nand are available for the following field types:\n\n\tStrField,\n\tUUIDField,\n\tTrie*Field,\n\tBoolField.\n\n\n\nWhen doc values are enabled, they have precedence over the field cache for getValueSource and getSortField, however faceting and stats cannot use doc values yet (I would like to do this as a separate issue).\n\nI force fields that have doc values enabled to be single-valued and to be either required or have a default value.\n\nI also modified a lot of code (ReturnFields especially) to make DocValues behave like stored fields. I think this would be great for ID fields. In a cluster that has numShards shards, it would help decrease the number of disk seeks in the .fdt file (which is often too big to fit entirely in the OS cache) per request from (numShards * (start + rows) + rows) to rows.\n\nThe patch is not committable yet, and I have BasicDistributedZkTest.testDistribSearch that always fails (not sure why yet...) but I'd love to have some feedback to know whether it is going in the right direction. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13487562",
            "date": "2012-10-31T05:48:54+0000",
            "content": "warning: just skimmed the patch.\n\n\n    configured on a per-field-type basis (docValueType=...),\n    enabled on a per-field basis (docValues=true/false)\n\nWe could combine these? e.g. a docValueType of \"none\" or something? This would parallel the lucene apis and maybe make things a bit simpler.\n\n\nWhen doc values are enabled, they have precedence over the field cache for getValueSource and getSortField, however faceting and stats cannot use doc values yet (I would like to do this as a separate issue).\n\nUltimately it would be really great if fieldcache and docvalues had the same API. I worry about the fact that its not this way currently. This shouldn't block this patch, its just a semi-related discussion... seems like fieldcache should be presented as \"build docvalues on the fly for the field\".\n\nWould be awesome if faceting etc could use docvalues: though I think there is likely some work for the multivalued case? e.g. we would have to encode multiple tokens at a level above into the single-valued StraightBytes or whatever ala DocTermOrds? or maybe we should think about an actual type for this that can allow for more efficient impls?\n\n\nI also modified a lot of code (ReturnFields especially) to make DocValues behave like stored fields. I think this would be great for ID fields. In a cluster that has numShards shards, it would help decrease the number of disk seeks in the .fdt file (which is often too big to fit entirely in the OS cache) per request from (numShards * (start + rows) + rows) to rows.\n\nI didn't look at this part, but is this really true? its numFields * rows right? If its some special case for ID fields where #idfields=1 for distributed search or whatever, I think thats a good optimization for that use-case. But in general if docvalues are presented like stored fields for general purposes I think thats not a great illusion to give to the user in case they have a lot of fields?\n\nThanks for getting this started! "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13487620",
            "date": "2012-10-31T08:46:59+0000",
            "content": "We could combine these? e.g. a docValueType of \"none\" or something? This would parallel the lucene apis and maybe make things a bit simpler.\n\nGood point.\n\nAdditionally I currently force doc values to be non-direct (ie. in-memory). Do you think it is fine or should we give people the choice? I wasn't sure when writing the patch because I think they would provide irregular performance depending on the good will of the I/O cache (I was thinking of people benchmarking with a read-only index, then going into production and performing a sort on a large result set while a background merge is running (eating all the I/O cache memory) and BOOM!). But maybe I'm too pessimistic. \n\nit would be really great if fieldcache and docvalues had the same API\n\nYes it would make things so much easier... I also wish DocValues.Source and FunctionValues were the same class.\n\nWould be awesome if faceting etc could use docvalues: though I think there is likely some work for the multivalued case?\n\nRight, DocValues faceting has its own challenges.  But that's clearly an issue where merging fieldcache, DocValues.Source and FunctionValues would make things easier : we would have only one code base that is independant from the source of \"values\" and SOLR-1581 would almost come free.\n\nI didn't look at this part, but is this really true? its numFields * rows right?\n\nI was thinking of non-direct doc values for ID fields. Correct me if I'm wrong but when doing a distributed search:\n\n 1. createMainQuery: Solr first asks every shard for the IDs of the best (start + rows) docs\n 2. createRetrieveDocs: Solr selects the rows IDs of documents to display and asks the shards  they are stored on for their stored fields\n\nSo step 1 requires (start + rows) seeks in the FDT file per shard (to know their IDs) and step 2 requires rows seeks overall. So the total is (numShards * (start + rows)) + rows. If we stored document IDs in memory I think this could help reduce this number to rows (only the second step), which would be great, especially for deep paging or large number of shards.\n\nBut in general if docvalues are presented like stored fields for general purposes I think thats not a great illusion to give to the user in case they have a lot of fields?\n\nOf course it makes no sense to store all fields in DocValues, I think they are best used for ID fields, sorting, scoring factors (function queries) and (soon ) faceting. I wanted them to behave like stored fields so that users don't make their fields stored in addition to DocValues for convenience (this is a waste of space, and the bigger the FDT file is, the more likely the I/O cache can't serve disk seeks in this file). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13487663",
            "date": "2012-10-31T10:40:37+0000",
            "content": "\nAdditionally I currently force doc values to be non-direct (ie. in-memory). Do you think it is fine or should we give people the choice?\n\nI think we should provide direct: maybe even by default? I guess the exception would be things like sorted bytes (I think you cannot sort direct?). But besides that, this is why I raised questions about \"acts like stored fields\".\n\n\nI was thinking of non-direct doc values for ID fields.\n\nI was describing direct  "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13487732",
            "date": "2012-10-31T12:53:24+0000",
            "content": "direct: maybe even by default?\n\nWhat is your motivation to make direct the default? I understand that is requires less memory but at the same time I'm worried that it would completely depend on the I/O cache for performance although it could be used on performance-critical paths (sorting, faceting, scoring factors...). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13488113",
            "date": "2012-10-31T19:11:05+0000",
            "content": "Actually another idea is maybe there should be no default? And it wouldnt be too bad if we combine docValuesType and docValues into one parameter.\n\nSo this way there is no trap (slow-io, or huge ram) on anyone. you would just say docValuesType=packed docValuesMethod=(disk/memory?)\n\nThen down the road once docvalues is really worked out, we could have example fieldtypes for various use cases (id, sort, scoring factors, etc) configured reasonably with whatever makes sense?\n\nI guess it doesnt matter to me if there is a default, and what the default is, as long as we are careful to both offer and advertise the ram/disk option in the example (even if there is actually a default).\n\nfor this initial patch, we could just make it so only \"memory\" actually works and you get a UOE if you ask for direct. I feel like this is a good step to remove uninversion times, etc and we could separately add the disk option... I'm just throwing out future ideas. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13490984",
            "date": "2012-11-05T22:21:43+0000",
            "content": "We could combine these? e.g. a docValueType of \"none\" or something?\n\nSomething I like about having two different parameters is that it gives the ability to specify a default DocValues.Type (used when docValues is true and docValueType is unset). For example, with some FieldTypes only one DocValues.Type makes sense (UUIDField -> FIXED_STRAIGHT) and it would make sense to make FIXED_INTS_32 the default docValueType for TrieIntField.\n\nAdditionally, maybe that not having to learn about all DocValues types before using them would make their adoption smoother?\n\nSo this way there is no trap (slow-io, or huge ram) on anyone.\n\nI like this argument (forcing the trade-off to be explicit)! But this makes me want to merge DocValues activation with the method instead of the type. For example we could say docValues=no|disk|memory (optional, defaults to \"no\", \"disk\" to enable direct doc values, \"memory\" otherwise) docValueType=${type} (optional, default value depends on the FieldType, only taken into account when \"docValues\" is set and is not \"no\").\n\nI don't like the fact that I needed to add createDocValues method in addition to the createField method, but only poly fields can return several fields. We should probably fix the API (maybe something like normal fields must have at most one indexed field but should be able to produce several stored fields?) but I'd rather do it in a different issue.\n\nfor this initial patch, we could just make it so only \"memory\" actually works and you get a UOE if you ask for direct. I feel like this is a good step to remove uninversion times, etc and we could separately add the disk option...\n\nAdding support for direct doc values should be easy: DocValues value sources already support direct DocValues, we just need to fix oal.search.FieldComparator implementations to have an option to use direct DocValues (they currently force in-memory DocValues). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13491013",
            "date": "2012-11-05T22:59:24+0000",
            "content": "\nand it would make sense to make FIXED_INTS_32 the default docValueType for TrieIntField.\n\nAre you sure only one thing makes sense? What if i need integers that are larger than a short, but the range of values (max-min)\nis actually small. Then a Packed impl could make more sense. So we should think about this...\n\n\nAdditionally, maybe that not having to learn about all DocValues types before using them would make their adoption smoother?\n\nWell I don't think there should be so many types \n\nThere is a big todo about this in DocValues.java.\n\nIn my opinion instead of IndexWriter streaming docvalues to the codec directly, only to have the codec buffer up in ram and use\nCounter for accounting, IndexWriter should buffer and things like STRAIGHT/VAR would just be optimizations... \n\nI guess i think the same as for ints, just like if you asked for packed and its going to need 64 bits, its implemented as that \nbehind the scenes (but then still \"pretends\" to be a packed field, which is wierd!).\n\nBut this is a little off-topic \n\n\nI like this argument (forcing the trade-off to be explicit)! But this makes me want to merge DocValues activation with the method instead of the type. For example we could say docValues=no|disk|memory (optional, defaults to \"no\", \"disk\" to enable direct doc values, \"memory\" otherwise) docValueType=${type} (optional, default value depends on the FieldType, only taken into account when \"docValues\" is set and is not \"no\"). \n\nI think this is good!\n\n\nI wanted them to behave like stored fields so that users don't make their fields stored in addition to DocValues for convenience (this is a waste of space, and the bigger the FDT file is, the more likely the I/O cache can't serve disk seeks in this file).\n\nI'm still worried about this case: I don't like them treated as stored fields. Its only going to be more seeks if people have disk-enabled dvs\nthat we must fetch in addition to the stored fields.\n\nI havent looked at the relevant bits, but is it possible we could treat \"*\" as just meaning the stored fields still? Basically, if you CHOOSE to\nrequest them, you get them, but we don't do anything trappy. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13491065",
            "date": "2012-11-06T00:06:34+0000",
            "content": "Are you sure only one thing makes sense? What if i need integers that are larger than a short, but the range of values (max-min)\nis actually small. Then a Packed impl could make more sense. So we should think about this...\n\nI understand your point, I am myself a big supporter of packed ints and plan to use them probably more often than fixed ints, but I still think that fixed_ints would be a good default (no one would be surprised if the doc values of a field which is an int in their schema require 4 bytes per value).\n\nBut if Lucene was able to switch automatically from packed ints to fixed_ints if they have less than x% overhead, this would be great!\n\nWell I don't think there should be so many types\n\nIf you want to sort on a String field, there are 6 available types. And I think it should be easy for people getting started with Solr to do simple things such as sorting data without having to understand the different trade-offs of these doc values types in order to choose one. Otherwise the risk is that they keep using the field cache instead because they find it more convenient.\n\n(I hate this argument because some people will certainly have troubles with SORTED doc values on a unique field of a very large index, but anyway it is still better than the field cache?)\n\nIn my opinion instead of IndexWriter streaming docvalues to the codec directly, only to have the codec buffer up in ram and use\nCounter for accounting, IndexWriter should buffer and things like STRAIGHT/VAR would just be optimizations...\n\n+1\n\n I'm still worried about this case: I don't like them treated as stored fields. Its only going to be more seeks if people have disk-enabled dvs that we must fetch in addition to the stored fields.\nI havent looked at the relevant bits, but is it possible we could treat \"*\" as just meaning the stored fields still? Basically, if you CHOOSE to\nrequest them, you get them, but we don't do anything trappy.\n\nIf we allow for direct doc values, this makes sense to not load them by default, but I think we should add documentation to the example schema.xml so that people know that it is wasteful to store fields if doc values are enabled and in memory, and that they can be added very easily to the response by adding the field name to the fl parameter.\n\nIn case the unique key has doc values and is not stored, maybe it still makes sense to fetch it when fl=*?\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13491092",
            "date": "2012-11-06T00:38:09+0000",
            "content": "\nIf we allow for direct doc values, this makes sense to not load them by default, but I think we should add documentation to the example schema.xml so that people know that it is wasteful to store fields if doc values are enabled and in memory, and that they can be added very easily to the response by adding the field name to the fl parameter.\n\njust as wasteful as your example above: adding DocValues to a TrieIntField right? By adding docvalues, its implying that its a single-valued field, and you could do a DocValuesRangeQuery instead (works just like FieldCacheRangeQuery), so why invert it too: wasting space in the postings lists and term dictionary? "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13492853",
            "date": "2012-11-08T00:31:18+0000",
            "content": "New patch:\n\n\tability to have direct doc values,\n\tdoc values are not fetched by default, you need to explicitely add their name to the fl parameter to load them,\n\tall tests pass except BasicDistributedZkTest.testDistribSearch, but it doesn't pass either without the patch applied on my (very slow...) laptop.\n\n\n\nThis patch is not perfect... for example I am not happy that I had to add a new createDocValuesFields method in FieldType. The reason is that only poly fields are allowed to return several fields in createFields but I think this would require a more globabl refactoring and should not block this issue?\n\nIf you want to play with doc values and Solr, I modified the example schema.xml so that popularity and inStock have doc values enabled. You can try to display their values, sort on them and/or use function queries on them.\n\nWhen a field is indexed and has doc values, the patch always tries to use doc values instead of the field cache. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13493092",
            "date": "2012-11-08T10:32:54+0000",
            "content": "Great stuff Adrien!\n\nI think we should model the docvalues as stored fields (that's how I always planned on doing it - but never got around to it).  fl=* should still return these fields.  Think about optimistic concurrency, etc.  Having to know all of the field names to actually get all of the field values is not a good thing.\n\nI wonder if we could pick a better name? \"doc values\" isn't very descriptive at a higher abstract level.  I always considered CSF/DocValues to be about storing the values separately for better caching by the OS. \"stored separately\" seems closer to the real description.  One thing to consider is that even if Lucene changes the names of the methods later, we try to stick with external APIs longer in Solr - hence it can be less important that the names exactly match what is in lucene and more important that they are something we want for the long haul. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13493110",
            "date": "2012-11-08T10:48:46+0000",
            "content": "DocValues aren't stored fields though: especially when kept on disk.\n\nits a bad idea to mislead users into thinking they are the same. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13493115",
            "date": "2012-11-08T10:54:26+0000",
            "content": "Having to know all of the field names to actually get all of the field values is not a good thing.\n\nGood point. I should rework this part of the patch.\n\nI think we should model the docvalues as stored fields (that's how I always planned on doing it - but never got around to it). fl=* should still return these fields.\n\nThis was my first idea too, but at this time I forced doc values to be memory-resident. I think Robert's point to not fetch doc values automatically because they could potentially imply a crazy number of random disk seeks makes sense.\n\nA trade-off could be to only fetch automatically memory-resident doc values but I think it would be very confusing for users.\n\nI wonder if we could pick a better name?\n\nI used this name because it is the name in the Lucene API and because this feature has been \"marketed\" with this name in various blog posts and conference talks. Do you have an idea for another name? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13493128",
            "date": "2012-11-08T11:46:05+0000",
            "content": "Regarding performance - it seems like for most users, the number of docvalue fields should be relatively small.\nOne of the big advantages to DocValues is the better caching by the OS - so \"seeks\" should often never hit the disk.\nFor those users where performance is a concern, they should set \"fl\" to retrieve only those fields they absolutely need.\nAlso consider existing working clients where the solr server changes the storage type of the field for better performance - that shouldn't be visible to the client (just as changing the precisionStep of a trie type should not be visible).\n\nNaming:\nAt some time in the past I was considering storeSep=true/false (until there were multiple ways to store separately), but I was never crazy about the name.  But since we're just trying to say how the field should be stored, perhaps just overload that parameter?\n\nstored=true  // same as today\nstored=[docValues method]  // store separately using the given method\n\nI'm not sold on it or anything... just throwing out ideas.\n\nI like the separate param for \"disk\"/\"memory\" or \"direct\"/\"memory\" - the default access method for the field really is different from how it's stored.\nBut it seems like that should just be a default and one should be able to access the field via direct or memory depending on the situation?\nFor simply adding additional return fields, direct seems the right approach, unless it's already been loaded into memory, in which case it would be a nice optimization to use that.\n\n\n "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13493138",
            "date": "2012-11-08T12:23:13+0000",
            "content": "\nRegarding performance - it seems like for most users, the number of docvalue fields should be relatively small.\nOne of the big advantages to DocValues is the better caching by the OS - so \"seeks\" should often never hit the disk.\n\nI agree that it is unlikely to affect performance for many users but on the other hand I don't like the fact that Solr could suddenly get insanely slow if doc values fields grow larger than the size of the I/O cache. \n\nstored=[docValues method] // store separately using the given method\n\nI'm afraid it could be confusing for users: doc values are very different from stored fields feature-wise (sorting, function values) and performance-wise (up to 1 seek per doc vs. up to 1 seek per field) so I think we should use another parameter name?\n\nBut it seems like that should just be a default and one should be able to access the field via direct or memory depending on the situation?\n\nTo avoid surprises (OOM on the one hand / extreme slowness on the other hand) I think we should stick to an explicit access method specified in the schema? (I've planned to fix SortField/FieldComparator so that it doesn't force doc values to be memory-resident when sorting.)\n\nThe question of loading or not doc values fields by default seems to raise lots of concerns. Maybe we should fix this issue with no promise that doc values fields would be loaded by default and open another issue to find out whether it is reasonable or not to do so? (I'm just afraid that consensus might be hard to obtain while everyone seems to agree that DocValues support is an improvement?) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13493167",
            "date": "2012-11-08T13:24:01+0000",
            "content": "FYI, Adrien & I chatted a while about this (we're both at ApacheCon now), and came to agreement with roughly what we think addresses both of our concerns. He'll add the details here when he gets a chance. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13493197",
            "date": "2012-11-08T14:10:50+0000",
            "content": "Here are the details:\n\n\tstored fields and doc values are considered very different features (with different parameter names in the schema to enable/disable them)\n\tfl=* would only load stored fields by default (so fields that have doc values would also need to be stored if you want them to be loaded with fl=*),\n\tthe fl parameter can accept field names that have doc values but are not stored (and this would work as expected),\n\tDocValues would be useful for documents' unique keys and version numbers (because having fast random access to these fields is important)\n\tif the fl parameter only contains one field that has both doc values and stored fields enabled, it makes sense to use doc values (same number of disk seeks in the worst case). Otherwise, it should stick to stored fields by default. It might make sense to add an option to force doc values with several fields in the field list (fl.docValues=true?) but we should add appropriate warnings about it in the docs.\n\n\n\nI'll update my patch soon. Yonik, please correct me if I'm wrong! "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13494046",
            "date": "2012-11-09T15:34:56+0000",
            "content": "The DocValues API might change a lot because of LUCENE-4547, I'll wait for it to reintegrate trunk before working again on this issue (but please give me enough time so that this issue can make it into 4.1). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13495058",
            "date": "2012-11-12T01:39:08+0000",
            "content": "stored fields and doc values are considered very different features\n\nI think we see things a bit differently at the conceptual level - but it currently amounts to the same concrete decisions (i.e. I agree with all your other list items).\nstored=true says that a field is conceptualy stored (and will be returned by fl=*), while docValues=??? specifies a different mechanism for storage than the default.\n\nSpecifying both stored=true and docValues=??? will currently add the value to both normal stored fields and docValues, optimizing for number of seeks for fl=*, while being sub-optimal as far as index size is concerned (the value will be stored in two places.) Future configuration options should be able to control this trade-off. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13576540",
            "date": "2013-02-12T10:50:04+0000",
            "content": "New patch based on the new DV API:\n\n\tDoc values can be enabled on a per-field basis (add docValues=\"true\" to your field definition).\n\tI added support for doc values to StrField, UUIDField and all Trie*Field.\n\tThe doc values type can be configured on the fieldType. For example, if your string fields are unique (or almost unique), you can add docValuesType=\"binary\" instead of \"sorted\" to the fieldType definition.\n\tWhen a field has doc values, it needs to be single-valued and to be either required or have a default value. So things like sortMissingFirt/Last don't make sense when a field has doc values.\n\tBy using a SchemaCodecFactory, you can configure the DocValuesFormat you want to use (Lucene42/Disk/SimpleText/CheapBastard/AddYourOwnHere).\n\n\n\nA good news is that thanks to the refactoring of the FieldCache API, faceting will work on fields with doc values out of the box. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13576588",
            "date": "2013-02-12T12:37:42+0000",
            "content": "I like the size of this patch!\n\nOne thing thats a little confusing is the multivalued check against a boolean 'hasDocValues'.\n\nIn lucene this is not a limitation of docvalues per-say, instead its controlled-per-type. it just happens that all 3 types today have consumers that check for this and throw exception, but we might add a multi-valued type later (LUCENE-4765).\n\nSeparately there is also the possibility that someone can lay down their own multi-valued encoding over e.g. a binary dv (like lucene facets/). But if we have a private check called from SchemaField's ctor and checks in e.g. DocumentBuilder, it seems like this would be difficult to change. Maybe as a start we should just let IndexWriter handle the check here? "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13576602",
            "date": "2013-02-12T13:12:28+0000",
            "content": "Good point Robert. My initial goal was to fail as soon as possible but you're right, we should not prevent multi-valued fields from having doc values. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13576613",
            "date": "2013-02-12T13:34:13+0000",
            "content": "Another thing to keep in mind is enforcement of default value. So if this could be controlled per-type like lucene too, this would be ideal.\n\nFor example multivalued dv type is conceptually a sorted set of ordinals per document. It can be empty (doc has 0 ords). "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13576666",
            "date": "2013-02-12T15:07:42+0000",
            "content": "New patch which forces fields to be single-valued / required / have a default value in FieldType.checkSchemaField so that it can be changed on a per-FieldType basis. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13576670",
            "date": "2013-02-12T15:12:28+0000",
            "content": "Looking good!\n\nRegarding the default schema, we try to avoid default values for fields since it slows down indexing and makes the index bigger for those not using them.  It's nice if people can just start using the stock schema w/o having to change anything (and people tend to benchmark this way too).  Not sure what to do about that... except perhaps to only enable docValues in the stock schema that have zero cost when unused (and none do yet?) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13576677",
            "date": "2013-02-12T15:19:54+0000",
            "content": "Maybe for now, for the example we just have two simple unused string_dv/numeric_dv field types.\n\nand have two commented-out fields using them with an explanation of what dv is inside the comment? "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13576736",
            "date": "2013-02-12T16:20:26+0000",
            "content": "I modified the example schema to disable doc values on all fields and added a comment to say that it might be a good idea to enable doc values on popularity and manu_exact. Yonik, Robert, what do you think? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13576889",
            "date": "2013-02-12T18:57:04+0000",
            "content": "Damn i hate our binary type. If it weren't for facets....\n\n\nif (docValuesType != DocValuesType.SORTED && docValuesType != DocValuesType.BINARY) {\n  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,\n    \"StrField only supports binary and sorted doc values\");\n}\n\n\n\n    <!-- Use this field type in conjunction with a field with doc values to sort\n      efficiently on a field which has a lot of unique terms. -->\n    <fieldType name=\"unique_string_sort\" class=\"solr.StrField\" docValuesType=\"binary\" />\n\n\n\n\nCan we either:\n\n\tNOT suggest this and fix the check to only allow sorted values by default.\n\tfix getSortField() and getValueSource() to do the right thing and not call FieldCache.getDocTermsIndex\n\n\n\nSame goes with any other field types. Such insanity should be avoided  "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13576942",
            "date": "2013-02-12T19:50:42+0000",
            "content": "We also need to fix the existing checks for sort/valuesource/etc/etc.\n\nThese currently throw an exception if a field is not indexed: but thats unrelated if it has docvalues. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13578509",
            "date": "2013-02-14T17:31:09+0000",
            "content": "Some progress: I removed support for DocValuesType.BINARY and modified faceting and stats to use the numeric field caches when the field has doc values. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13579383",
            "date": "2013-02-15T18:20:55+0000",
            "content": "New patch, all tests passed.\n\n\n\tI made DV integration in the stats component a little cleaner,\n\tnumeric faceting now works even if facet.mincount=0 but it requires the field to be indexed.\n\n\n\nI think it's ready? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13579833",
            "date": "2013-02-16T16:41:06+0000",
            "content": "modified faceting and stats to use the numeric field caches when the field has doc values.\n\nNice!  I notice a bunch of great cleanups that have long been on my TODO list too (esp in stats)! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13579864",
            "date": "2013-02-16T18:21:12+0000",
            "content": "patch looks good. Awesome! "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13579872",
            "date": "2013-02-16T18:52:13+0000",
            "content": "[trunk commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1446922\n\nSOLR-3855: Doc values support.\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13580018",
            "date": "2013-02-16T20:18:11+0000",
            "content": "[branch_4x commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1446934\n\nSOLR-3855: Doc values support (mergd from r1446922).\n "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13580020",
            "date": "2013-02-16T20:27:58+0000",
            "content": "Committed!\n\nNice! I notice a bunch of great cleanups that have long been on my TODO list too (esp in stats)!\n\nYes. But, there are still a few things to clean up. In particular it would be better if this component supported custom field types and didn't always box numbers. (This would likely require a large refactoring of this component.) Maybe LUCENE-4765 could also help factor more code between the single-valued and multi-valued cases. "
        },
        {
            "author": "Gopal Patwa",
            "id": "comment-13580021",
            "date": "2013-02-16T20:30:47+0000",
            "content": "Is there an example or test case to update DocValues field without updating index or reopening index searcher? is this even possible? "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13580030",
            "date": "2013-02-16T20:55:54+0000",
            "content": "Unfortunately doc values are not updateable. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13580033",
            "date": "2013-02-16T21:00:44+0000",
            "content": "The branch_4x commit has a compiler error in TrieField.  It attempts to override the longToString method in LongFieldSource, but that method isn't there in branch_4x.  If I copy the method over from trunk in LongFieldSource, it seems to fix the compiler error. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13580043",
            "date": "2013-02-16T21:32:04+0000",
            "content": "Thanks Shawn, I committed from the wrong directory! This should be OK now. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13580047",
            "date": "2013-02-16T21:44:13+0000",
            "content": "[branch_4x commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1446951\n\nSOLR-3855: Fix compilation.\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13580048",
            "date": "2013-02-16T21:45:09+0000",
            "content": "This is great, thanks Adrien! "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13584818",
            "date": "2013-02-22T23:27:26+0000",
            "content": "Reopening: I just found that faceting is broken on single-valued trie fields that have a precision step < Integer.MAX_VALUE when facet.mincount is 0 (it adds counts for all terms instead of filtering the \"main\" ones). "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13584885",
            "date": "2013-02-23T00:31:39+0000",
            "content": "Patch that fixes the problem.\n\nI also modified StatsComponent and FacetComponent to use the numeric field cache instead of UnInvertedField on single-valued trie fields (Solr used to use UnInvertedField when precisionStep is < Integer.MAX_VALUE). "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13585157",
            "date": "2013-02-23T16:30:31+0000",
            "content": "[trunk commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1449360\n\nSOLR-3855: Fix faceting on numeric fields with precisionStep < Integer.MAX_VALUE, facet.mincount=0 and facet.method=fcs.\n "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13585164",
            "date": "2013-02-23T16:44:22+0000",
            "content": "[branch_4x commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1449365\n\nSOLR-3855: Fix faceting on numeric fields with precisionStep < Integer.MAX_VALUE, facet.mincount=0 and facet.method=fcs.\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13653700",
            "date": "2013-05-10T10:32:43+0000",
            "content": "Closed after release. "
        }
    ]
}