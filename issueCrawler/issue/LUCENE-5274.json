{
    "id": "LUCENE-5274",
    "title": "Teach fast FastVectorHighlighter to highlight \"child fields\" with parent fields",
    "details": {
        "components": [
            "core/other"
        ],
        "fix_versions": [
            "4.6"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "I've been messing around with the FastVectorHighlighter and it looks like I can teach it to highlight matches on \"child fields\".  Like this query:\nfoo:scissors foo_exact:running\nwould highlight foo like this:\n<em>running</em> with <em>scissors</em>\n\nWhere foo is stored WITH_POSITIONS_OFFSETS and foo_plain is an unstored copy of foo a different analyzer and its own WITH_POSITIONS_OFFSETS.\n\nThis would make queries that perform weighted matches against different analyzers much more convenient to highlight.\n\nI have working code and test cases but they are hacked into Elasticsearch.  I'd love to Lucene-ify if you'll take them.",
    "attachments": {
        "LUCENE-5274.patch": "https://issues.apache.org/jira/secure/attachment/12609315/LUCENE-5274.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-10T17:33:17+0000",
            "content": "Patch implementing merging highlights on child fields. ",
            "author": "Nik Everett",
            "id": "comment-13791711"
        },
        {
            "date": "2013-10-10T17:36:24+0000",
            "content": "I've uploaded a patch for this.  I made the highlighter module depend on the query string parser and analyzer modules for testing.  I probably could have gotten away without the query string parser but it made the test cases simpler to write.  The analyzer module was required to analyze different fields with different analyzers which is kind of the point of this feature.  My ant-foo is too weak for me to be sure I didn't set up some kind of horrible circular dependency that hasn't hit me. ",
            "author": "Nik Everett",
            "id": "comment-13791715"
        },
        {
            "date": "2013-10-10T19:45:56+0000",
            "content": "Thanks Nick for working on this issue, I think this is nice to be able to highlight queries that target fields which have the same content but are analyzed differently!\n\nI made the highlighter module depend on the query string parser and analyzer modules for testing. I probably could have gotten away without the query string parser but it made the test cases simpler to write.\n\nWe tend to avoid doing that in order to not have cross or circular dependencies between modules. This is not an issue at this stage of the patch but we should try replacing the analysis components you are using with MockAnalyzer at some point.\n\nI only had a quick look at the patch so far and I'm a bit unsure about childFields. Maybe it would be better API-wise to specify the stored field and the index fields separately? Or maybe to retrieve the index fields from the terms of the query? What do you think?\n ",
            "author": "Adrien Grand",
            "id": "comment-13791909"
        },
        {
            "date": "2013-10-10T20:16:08+0000",
            "content": "> We tend to avoid doing that in order to not have cross or circular dependencies between modules. This is not an issue at this stage of the patch but we should try replacing the analysis components you are using with MockAnalyzer at some point.\n\nThe PerFieldAnalyzerWrapper was the thing that pulled me there.  I'd appreciate some tips on how to work around that.  I'll have a look at removing the query parser dependency.  I'm also using the EnglishAnalzyer but I'm just using that to have a third analyzer in the mix.  I'll see about using MockAnalzyer for that too.\n\n> I only had a quick look at the patch so far and I'm a bit unsure about childFields. Maybe it would be better API-wise to specify the stored field and the index fields separately? Or maybe to retrieve the index fields from the terms of the query? What do you think?\n\nI don't like retrieving the indexed fields from the query - what if you don't want them all?  how can you make sure that the ones that you take from the query really do share the same stored copy.\n\nAs far as calling out the stored field and the indexed field separately - I think I like the idea.  It'd let you load the source from a field that isn't actively being highlighted.  I'll have a look at that. ",
            "author": "Nik Everett",
            "id": "comment-13791945"
        },
        {
            "date": "2013-10-11T14:48:55+0000",
            "content": "Reworked to remove dependency on query parser and most of the analyzer dependency and to fix errors with phrases.  It'll need to lose the rest of the analyzer dependency and have more test cases in addition to any other concerns raised in the review.  ",
            "author": "Nik Everett",
            "id": "comment-13792669"
        },
        {
            "date": "2013-10-11T18:13:33+0000",
            "content": "New version of the patch.  This one works a lot better with phrases and even works on fields that have the same source but different tokenizers.\n\nIt still makes highlighting depend on the analysis module to pick up PerFieldAnalyzerWrapper.\n\nI think all the new code this adds to FieldPhraseList deserves a unit test on its own but I'm not in the frame of mind to write one at the moment so I'll have to come back to it later. ",
            "author": "Nik Everett",
            "id": "comment-13792900"
        },
        {
            "date": "2013-10-11T18:16:23+0000",
            "content": "Why would a highlighter improvement require mocktokenizer changes? ",
            "author": "Robert Muir",
            "id": "comment-13792907"
        },
        {
            "date": "2013-10-11T18:24:38+0000",
            "content": "Hey, forgot to mention that.  MockTokenizer seems to throw away the character after the end of each token even if that character is the valid start to the next token.  This comes up because I wanted to tokenize strings in a simplistic way to test that the highlighter can handle different tokenizers and it just wasn't working right.  So I \"fixed\" MockTokenizer but I did it in a pretty brutal way.  I'm happy to move the change to another bug and improve it but testing the highlighter change without it is a bit painful. ",
            "author": "Nik Everett",
            "id": "comment-13792913"
        },
        {
            "date": "2013-10-11T18:32:40+0000",
            "content": "if you suspect there is a bug in mocktokenizer, please open a separate issue for that. mocktokenizer is used by like, thousands of tests  ",
            "author": "Robert Muir",
            "id": "comment-13792921"
        },
        {
            "date": "2013-10-11T19:26:41+0000",
            "content": "Filed LUCENE-5278. ",
            "author": "Nik Everett",
            "id": "comment-13792974"
        },
        {
            "date": "2013-10-11T20:06:02+0000",
            "content": "Thanks Nik: I can help with that one!\n\nAnother question: about the MergedIterator \n\nI can see the possible use case here, but I think it deserves some discussion first (versus just making it public).\nThis thing has limitations (its currently only used by indexwriter for buffereddeletes, its basically like a MultiTerms over an Iterator). For example each iterator it consumes should not have duplicate values according to its compareTo(): its not clear to me this WeightedPhraseInfo behaves this way:\n\n\twhat if you have a synonym of \"dog\" sitting on top of \"cat\" with the same boost factor... its a duplicate according to that compareTo, but the text is different.\n\twhat if the synonym is just \"dog\" with posinc=0 stacked ontop of itself (which is totally valid to do)...\n\n\n\nPerhaps highlighting can make use of it, but its unclear to me that its really following the contract. Furthermore the class in question (WeightedPhraseInfo) is public, and adding Comparable to it looks like it will create a situation where its inconsistent with equals()... I think this is a little dangerous.\n\nIf it turns out we can reuse it: great! But i think rather than just slapping public on it, we should move it to .util, ensure it has good javadocs and unit tests, and investigate what exactly happens when these contracts are violated: e.g. can we make an exception happen rather than just broken behavior in a way that won't hurt performance and so on?\n ",
            "author": "Robert Muir",
            "id": "comment-13793000"
        },
        {
            "date": "2013-10-11T20:28:05+0000",
            "content": "\nI can see the possible use case here, but I think it deserves some discussion first (versus just making it public).\nSure!  I'm more used to Guava's tools so I think I was lulled in to a false sense of recognition.  No chance of updating to a modern version of Guava?\n\n\nThis thing has limitations (its currently only used by indexwriter for buffereddeletes, its basically like a MultiTerms over an Iterator). For example each iterator it consumes should not have duplicate values according to its compareTo(): its not clear to me this WeightedPhraseInfo behaves this way\nYikes!  I didn't catch that but now that you point it out it is right there in the docs and I should have.  WeightedPhraseInfo doesn't behave that way and \n\n\nFurthermore the class in question (WeightedPhraseInfo) is public, and adding Comparable to it looks like it will create a situation where its inconsistent with equals()... I think this is a little dangerous.\nI agree on the inconsistent with inconsistent with equals.  I can either fix that or use a Comparator for sorting both WeightedPhraseInfo and Toffs.  That'd require a MergeSorter that can take one but \n\n\nIf it turns out we can reuse it: great! But i think rather than just slapping public on it, we should move it to .util, ensure it has good javadocs and unit tests, and investigate what exactly happens when these contracts are violated: e.g. can we make an exception happen rather than just broken behavior in a way that won't hurt performance and so on?\nMakes sense to me. ",
            "author": "Nik Everett",
            "id": "comment-13793018"
        },
        {
            "date": "2013-10-11T20:38:54+0000",
            "content": "\nSure! I'm more used to Guava's tools so I think I was lulled in to a false sense of recognition. No chance of updating to a modern version of Guava?\n\nThere is no lucene dependency on guava. I don't think we should introduce one, and it wouldnt solve the issues i mentioned anyway (e.g. comparable inconsistent with equals and stuff). It would only add 2.1MB of bloated unnecessary syntactic sugar (sorry, thats just my opinion on it, i think its useless).\n\nWe should keep our third party dependencies minimal and necessary so that any app using lucene can choose for itself what version of this stuff (if any) it wants to use. If we rely upon unnecessary stuff it hurts the end user by forcing them to compatible versions. ",
            "author": "Robert Muir",
            "id": "comment-13793029"
        },
        {
            "date": "2013-10-11T20:56:31+0000",
            "content": "quote\nThere is no lucene dependency on guava. I don't think we should introduce one, and it wouldnt solve the issues i mentioned anyway (e.g. comparable inconsistent with equals and stuff). It would only add 2.1MB of bloated unnecessary syntactic sugar (sorry, thats just my opinion on it, i think its useless).\n\nWe should keep our third party dependencies minimal and necessary so that any app using lucene can choose for itself what version of this stuff (if any) it wants to use. If we rely upon unnecessary stuff it hurts the end user by forcing them to compatible versions.\nquote\nI figured that was the reasoning and I don't intend to argue with it.  In this case it would provide a method to merge sorted iterators just like MergedIterator only without the caveats around duplication but I'm happy to work around it.  Guava certainly wouldn't fix my forgetting equals and hashcode. ",
            "author": "Nik Everett",
            "id": "comment-13793038"
        },
        {
            "date": "2013-10-12T01:50:39+0000",
            "content": "Yeah I guess for me, its not a caveat at all, but a feature \n\nWe need to iterate sorted-union for stuff in the index like terms and fields, so they appear as if they exist only once.\nThe guava one isn't doing a \"union\" operation but just simply maintaining compareTo() order... ",
            "author": "Robert Muir",
            "id": "comment-13793204"
        },
        {
            "date": "2013-10-14T15:23:20+0000",
            "content": "I'm having a look at what I can do to pull MergedIterator into the util package and give it nice unit tests.  Almost done with that and I should be able to spin another version of this patch.  I'm not exactly sure of a good way to test the synonym stuff in FastVectorHighlighterTest - I don't see a mock Synonym filter. ",
            "author": "Nik Everett",
            "id": "comment-13794190"
        },
        {
            "date": "2013-10-14T15:26:22+0000",
            "content": "I'm not exactly sure of a good way to test the synonym stuff in FastVectorHighlighterTest\n\nI usually do that by building the token streams by hand, it is quite easy, see CannedTokenStream and Token for example. ",
            "author": "Adrien Grand",
            "id": "comment-13794197"
        },
        {
            "date": "2013-10-14T17:53:28+0000",
            "content": "Not done yet but progress:\n1.  Move MergedIterator to util.\n2.  Add a mode to it to not remove duplicates (one extra branch per call to next).\n3.  Add a unit test for MergedIterator.\n4.  Make FieldTermStack.TermInfo, FieldPhraseList.WeighterPhraseInfo, FieldPhraseList.WeightedPhraseInfo.Toffs consistent under equals, hashCode, and compareTo.  I don't think any of them would make good hash keys but I fixed up hashCode because I fixed up equals.\n5.  Unit tests for point 4.\n7.  Use the non-duplicate removing mode of MergedIterator in FieldPhraseList's merge methods.\n6.  More tests in FastVectorHighlighterTest - mostly around exact equal matches and how they effect segment sorting.\n\nAt this point this is left:\n1.  Unit tests for equal matches in the same FieldPhraseList.\n2.  Poke around with corner cases during merges.  Test them in FastVectorHighlighterTest if they reflect mockable real world cases.  Expand FieldPhraseListTest if they don't.\n4.  Remove highlighter dependency on analyzer module.  Would it make sense to move PerFieldAnalyzerWrapper into core?  Something else?\n3.  Anything else from review. ",
            "author": "Nik Everett",
            "id": "comment-13794317"
        },
        {
            "date": "2013-10-14T20:20:15+0000",
            "content": "Removed analyzer dependency and added tests covering synonyms. ",
            "author": "Nik Everett",
            "id": "comment-13794425"
        },
        {
            "date": "2013-10-17T21:45:38+0000",
            "content": "I had a problem when applying the patch (it removed MergedIterator.java) but overall the patch looks good to me. There are some things that might be worth checking before committing:\n\n\teven though these are tests, the definition for the 'field_der_red' analyzer in matchedFieldsTestCase looks weird since it declares being an analyzer wrapper but doesn't reuse the underlying analyzer, maybe it should use an anonymous Field impl that would override the tokenStream() method to return a CannedTokenStream instead of defining an analyzer?\n\tthe documentation and some method names still refer to child fields, I think that 'matched' fields, that you used in the FVH javadoc, is a better description?\n\tI think the matchedFields argument of getBestFragments should be a Set<String> instead of an array to ensure uniqueness\n\tmaybe the assert fieldNames.length > 0; in FVH.getFieldFragList should be replaced by a hard check since it is checking user-provided data?\n\tYou added WeightedPhraseInfo.merge which mutates in place although the class seems to have been designed to be immutable (it computes the value of 'text' in the constructor based on termInfos, and you update termInfos in merge, so this seems to invalidate the value of 'text'?)\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13798475"
        },
        {
            "date": "2013-10-17T22:11:06+0000",
            "content": "\n (it removed MergedIterator.java)\nIt was supposed to move it to the util package.  I'll figure out what happened there.\n\nI agree with the other points but it is worth discussing the last one.  The others I'll just make the changes you mention.\n\nI intentionally didn't update text in WeightedPhraseInfo.merge because it is documented as being for debugging so it didn't seem worth the cost.  Would it make sense to remove the member entirely and generate it from stored terms when needed?\n\nIt also doesn't update seqnum mostly because I really don't know the right way to update it.\n\nAs for WeightedPhraseInfo's immutability - I didn't see any final members so setting up the state in the constructor and not having setters just looked more like it wanted to encapsulate logic rather than immutability.  I'll swap the merge method with a merging constructor. ",
            "author": "Nik Everett",
            "id": "comment-13798512"
        },
        {
            "date": "2013-10-17T22:47:32+0000",
            "content": "As for WeightedPhraseInfo's immutability - I didn't see any final members so setting up the state in the constructor and not having setters just looked more like it wanted to encapsulate logic rather than immutability.\n\nI don't know if it was initially designed to be immutable, it's just the fact that 'text' was computed in the constructor and that this class had no method that mutates data that made me think so. But since immutable objects are easier to work with, maybe we should make this class immutable.\n\nI'll swap the merge method with a merging constructor.\n\nOK ",
            "author": "Adrien Grand",
            "id": "comment-13798550"
        },
        {
            "date": "2013-10-18T02:47:13+0000",
            "content": "Fix all issues exception the text on WeightedPhraseInfo.  If we're ok with building it on the fly then I'll get to that in the morning.\n\nI can't get the patch to apply cleanly - something to do with moving a file and then changing its contents.  The closest I can come is:\n svn mv lucene/core/src/java/org/apache/lucene/index/MergedIterator.java lucene/core/src/java/org/apache/lucene/util/\n patch -f -p0 < ~/LUCENE-5274.patch\n svn add lucene/core/src/test/org/apache/lucene/util/TestMergedIterator.java\n\nI'm sure there is a better way to do this.  If you get the chance please let me know. ",
            "author": "Nik Everett",
            "id": "comment-13798737"
        },
        {
            "date": "2013-10-18T12:57:48+0000",
            "content": "Attached a version of the patch that applies cleanly but doesn't clearly show the changes to MergedIterator.  I built it by svn rm and svn add rather than svn mv + edit. ",
            "author": "Nik Everett",
            "id": "comment-13799071"
        },
        {
            "date": "2013-10-18T14:25:42+0000",
            "content": "Finally switch text to generated on the fly.  No other changes.  Patch should apply cleanly but like the last one doesn't clearly show what I changed in MergedIterator. ",
            "author": "Nik Everett",
            "id": "comment-13799131"
        },
        {
            "date": "2013-10-18T19:10:04+0000",
            "content": "Thanks Nik, the patch looks good to me, and all tests passed on my computer. Could we just make TestMergedIterator a bit faster? Maybe we could decrease a bit 'numLists' or 'end - start'?\n\nI will commit the patch next week when I'm back from traveling unless someone commits it before me. ",
            "author": "Adrien Grand",
            "id": "comment-13799421"
        },
        {
            "date": "2013-10-19T14:05:57+0000",
            "content": " Can the style of if '( removeDuplicates )' please not be added to the lucene core?\n\nThanks ",
            "author": "Robert Muir",
            "id": "comment-13799902"
        },
        {
            "date": "2013-10-20T18:21:58+0000",
            "content": "Change codestyle on MergedIterator changes and TestMergedIterator to match the style in the rest of core.  The FVH changes still use the wide style prevalent in the FVH code.\nAlso, sort fewer numbers in TestMergedIterator to make it faster.  The only reason I was sorting so many the first time around was to get a good sense of what I was doing to the speed by adding the additional conditional. ",
            "author": "Nik Everett",
            "id": "comment-13800173"
        },
        {
            "date": "2013-10-21T17:13:24+0000",
            "content": "Commit 1534281 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1534281 ]\n\nLUCENE-5274: FastVectorHighlighter now supports highlighting against several indexed fields ",
            "author": "ASF subversion and git services",
            "id": "comment-13800820"
        },
        {
            "date": "2013-10-21T17:48:37+0000",
            "content": "Commit 1534288 from Adrien Grand in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1534288 ]\n\nLUCENE-5274: FastVectorHighlighter now supports highlighting against several indexed fields ",
            "author": "ASF subversion and git services",
            "id": "comment-13800869"
        },
        {
            "date": "2013-10-21T18:03:14+0000",
            "content": "Committed, thanks Nik! ",
            "author": "Adrien Grand",
            "id": "comment-13800892"
        }
    ]
}