{
    "id": "SOLR-7466",
    "title": "Allow optional leading wildcards in complexphrase",
    "details": {
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "4.8",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Currently ComplexPhraseQParser (SOLR-1604) allows trailing wildcards on terms in a phrase, but does not allow leading wildcards.  I would like the option to be able to search for terms with both trailing and leading wildcards.  \n\nFor example with:\n{!complexphrase allowLeadingWildcard=true}\n \"j* *th\"\nwould match \"John Smith\", \"Jim Smith\", but not \"John Schmitt\"",
    "attachments": {
        "SOLR-7466.patch": "https://issues.apache.org/jira/secure/attachment/12843443/SOLR-7466.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-04-24T19:57:02+0000",
            "author": "Andy hardin",
            "content": "I am currently working on a plugin for our usage which will be a version of ComplexPhraseQParser with lparser.setAllowLeadingWildcard(true);.  I'd like to see the option as shown in my example to be added to ComplexPhraseQParser, though.  I also have a patch in the works, but want to make sure I have good coverage for it. ",
            "id": "comment-14511629"
        },
        {
            "date": "2015-08-04T13:07:27+0000",
            "author": "Martin Leopold",
            "content": "Hi,\nAny news on this issue? Andy: if you need some testers for your patch, I'd love to give it a spin.\n\nBr,\nMartin ",
            "id": "comment-14653594"
        },
        {
            "date": "2015-10-23T13:25:36+0000",
            "author": "Jon Kj\u00e6r Amundsen",
            "content": "Hi Andy\nI'm from Denmark where we excel in compund words.\nTherefore your plugin could really be of use to me. If it's ready for test let me know. ",
            "id": "comment-14970963"
        },
        {
            "date": "2016-11-13T20:49:55+0000",
            "author": "Mikhail Khludnev",
            "content": "I tried to hook up ReversedWildcardFilterFactory SOLR-1321 in {!complexphrase}. The problem is that \n\n ComplexPhraseQueryParser --|> o.a.lucene.q.c.QueryParser\n\n\nBut a cool code, which leverages ReversedWildcardFilterFactory resides in o.a.solr...SolrQueryParserBase.getWildcardQuery(String, String).\nSo far, I copy-pasted CPQP to make it descendant of Solr's parser. It works, but it's not cute. Is there a better idea? Is it really necessary to deal with RWFF?\n ",
            "id": "comment-15662067"
        },
        {
            "date": "2016-11-14T07:12:11+0000",
            "author": "Mikhail Khludnev",
            "content": "Or how to move ReversedWildcardFilterFactory into Lucene and let Lucene's query parser to detect it in analysis chain like it's done in  o.a.solr.p.SolrQueryParserBase.getReversedWildcardFilterFactory(FieldType) ? Isn't there anything in Lucene which gets on par with Solr's one?  ",
            "id": "comment-15663014"
        },
        {
            "date": "2016-12-15T17:54:22+0000",
            "author": "Mikhail Khludnev",
            "content": "What would you think about SOLR-7466.patch? We can add SolrQP as mixing to Lucene's ComplexPhraseQP and delegate wildcards to the former!  ",
            "id": "comment-15752023"
        },
        {
            "date": "2016-12-29T21:27:09+0000",
            "author": "Mikhail Khludnev",
            "content": "Is there any veto to make leading wildcards always on in complexphrase? ",
            "id": "comment-15786176"
        },
        {
            "date": "2016-12-30T03:27:36+0000",
            "author": "Erick Erickson",
            "content": "Mikhail:\n\nI haven't looked at the code, so take this with a large grain of salt. \n\nMy only concern is if having this on by default would cause a full terms scan. If having this always on by default means a user can use a leading wildcard without specifying ReverseWildcardFilterFactory in the analysis chain then it seems trappy.\n\nThat said, I'll defer to your familiarity with the, you know, actual code. ",
            "id": "comment-15786764"
        },
        {
            "date": "2016-12-30T04:34:38+0000",
            "author": "Yonik Seeley",
            "content": "Is there any veto to make leading wildcards always on in complexphrase?\n\nSeems fine to me.  This is limited to the complexphase qparser to begin with, and what makes sense for a default is to return what is requested without second guessing. ",
            "id": "comment-15786862"
        },
        {
            "date": "2017-01-01T16:13:29+0000",
            "author": "Mikhail Khludnev",
            "content": "attaching SOLR-7466.patch, which also covers SOLR-9900 case. ",
            "id": "comment-15791312"
        },
        {
            "date": "2017-01-04T15:28:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d3f83bb948fd44e66099ef9537363ecef5bdb0f3 in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d3f83bb ]\n\nSOLR-7466: reverse-aware leading wildcards in complexphrase query parser ",
            "id": "comment-15798499"
        },
        {
            "date": "2017-01-04T16:09:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e5d063bdbbabec47dc5f53db4a2b35bbd20b0699 in lucene-solr's branch refs/heads/branch_6x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e5d063b ]\n\nSOLR-7466: reverse-aware leading wildcards in complexphrase query parser ",
            "id": "comment-15798606"
        }
    ]
}