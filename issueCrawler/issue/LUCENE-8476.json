{
    "id": "LUCENE-8476",
    "title": "Optimizations in UserDictionary (KoreanAnalyzer)",
    "details": {
        "components": [
            "modules/analysis"
        ],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.5",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Improvement"
    },
    "description": "\u25a0 Bug fix\n\n1) BufferedReader's close method is not called.\u00a0 (Wrong check)\n\n// Line 57 method\npublic static UserDictionary open(Reader reader) throws IOException {\n\n  BufferedReader br = new BufferedReader(reader);\n  String line = null;\n  List<String> entries = new ArrayList<>();\n\n  // text + optional segmentations\n  while ((line = br.readLine()) != null) {\n    ...\n  }\n\n  if (entries.isEmpty()) {\n    return null;\n  } else {\n    return new UserDictionary(entries);\n  }\n}\n\nIf you look at the code above, there is no close() method for the \"br\" variable.\n As I know, BufferedReader can cause a memory leak if the close method is not called.\n So I changed the code below.\n\n// Line 57 method\npublic static UserDictionary open(Reader reader) throws IOException {\n\n  String line = null;\n  List<String> entries = new ArrayList<>();\n\n  // text + optional segmentations\n  try (BufferedReader br = new BufferedReader(reader)) {\n    while ((line = br.readLine()) != null) {\n      ...\n    }\n  }\n\n  if (entries.isEmpty()) {\n    return null;\n  } else {\n    return new UserDictionary(entries);\n  }\n}\n\n\nI solved this problem with \"try-with-resources\" method available since Java 7.\n\n\u00a0\n\n\u25a0 Optimizations\n\n1) Change from Collections.sort to List.sort (UserDictionary constructor)\n\n// Line 82 method\nprivate UserDictionary(List<String> entries) throws IOException {\n  final CharacterDefinition charDef = CharacterDefinition.getInstance();\n  Collections.sort(entries,\n      Comparator.comparing(e -> e.split(\"\\\\s+\")[0]));\n\n  PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n  ...\n}\n\nList.sort in Java 8 is known to be faster than existing\u00a0Collections.sort. (http://ankitsambyal.blogspot.com/2014/03/difference-between-listsort-and.html) So I changed the code below.\n\n// Line 82 method\nprivate UserDictionary(List<String> entries) throws IOException {\n  final CharacterDefinition charDef = CharacterDefinition.getInstance();\n  entries.sort(Comparator.comparing(e -> e.split(\"\\\\s+\")[0]));\n\n  PositiveIntOutputs fstOutput = PositiveIntOutputs.getSingleton();\n  ...\n}\n\n\u00a0\n\n2) Remove unnecessary null check\u00a0(UserDictionary constructor)\n\n// Line 82 method\nprivate UserDictionary(List<String> entries) throws IOException {\n  ...\n  String lastToken = null;\n  ...\n  for (String entry : entries) {\n    String[] splits = entry.split(\"\\\\s+\");\n    String token = splits[0];\n    if (lastToken != null && token.equals(lastToken)) {\n      continue;\n    }\n    char lastChar = entry.charAt(entry.length()-1);\n  ...\n}\n\nLooking at this part of the code,\n\nif (lastToken != null && token.equals(lastToken)) {\n  continue;\n}\n\nA null check for lastToken is unnecessary.\n Because the equals method of the String class internally performs a null check.\n So I changed the code as below.\n\n// Line 82 method\nprivate UserDictionary(List<String> entries) throws IOException {\n  ...\n  String lastToken = null;\n  ...\n  for (String entry : entries) {\n    String[] splits = entry.split(\"\\\\s+\");\n    String token = splits[0];\n    if (token.equals(lastToken)) {\n      continue;\n    }\n    char lastChar = entry.charAt(entry.length()-1);\n  ...\n}",
    "attachments": {
        "LUCENE-8476.patch": "https://issues.apache.org/jira/secure/attachment/12938050/LUCENE-8476.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16601915",
            "author": "Lucene/Solr QA",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 23s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 17s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 17s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 17s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 17s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 17s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n   0m 15s \n  nori in the patch passed.  \n\n\n  \n   \n   2m 27s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8476 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12938050/LUCENE-8476.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / d93c46e \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/82/testReport/ \n\n\n modules \n C: lucene/analysis/nori U: lucene/analysis/nori \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/82/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "date": "2018-09-03T09:04:48+0000"
        },
        {
            "id": "comment-16602449",
            "author": "Adrien Grand",
            "content": "The problem with calling BufferedReader#close is that it will also close the underlying stream, which is unexpected? Other points make sense to me. ",
            "date": "2018-09-03T21:20:36+0000"
        },
        {
            "id": "comment-16602459",
            "author": "Jim Ferenczi",
            "content": "The reader is directly passed to the create method so it is the responsibility of the caller to properly close it after the build (see KoreanTokenizerFactory#inform). A comment should probably solve the confusion ?\n+1 for the other changes, I'll push shortly. Thanks Namgyu Kim ",
            "date": "2018-09-03T22:09:06+0000"
        },
        {
            "id": "comment-16603154",
            "author": "Namgyu Kim",
            "content": "Hi,\u00a0Adrien Grand and Jim Ferenczi.\n\nThank you for your reply.\n\nAfter reviewing the feedback, I realized that I\u00a0checked wrong.\u00a0\n\nI'm sorry I made the wrong report.\n\nHere's how to check :\n\npublic class Test {\n    public static void main(String[] args) throws IOException {\n        String file = \"D:\\\\test.txt\";\n        FileOutputStream stream = null;\n        try {\n            stream = new FileOutputStream(file);\n            writeLine(stream, \"First\");\n            writeLine(stream, \"Second\");\n        } finally {\n            if (stream != null)\n                stream.close();\n        }\n    }\n\n    private static void writeLine(OutputStream stream, String line) throws IOException {\n        BufferedWriter writer = null;\n        try {\n            writer = new BufferedWriter(new OutputStreamWriter(stream));\n            writer.write(line + \"\\n\");\n        } finally {\n            if (writer != null)\n                writer.close();\n        }\n    }\n}\n\nThis code gives me the following results:\n=> (Exception in thread \"main\" java.io.IOException: Stream Closed)\n\nThis means that my modification can cause other problems.\n\nSo I'll update a new patch that doesn't include \"Bug-1)\" ",
            "date": "2018-09-04T15:00:06+0000"
        },
        {
            "id": "comment-16603178",
            "author": "Namgyu Kim",
            "content": "I uploaded a new patch  ",
            "date": "2018-09-04T15:14:20+0000"
        },
        {
            "id": "comment-16603349",
            "author": "Jim Ferenczi",
            "content": "Thanks Namgyu Kim ! The new patch looks good, I'll commit shortly. ",
            "date": "2018-09-04T17:22:29+0000"
        },
        {
            "id": "comment-16604189",
            "author": "ASF subversion and git services",
            "content": "Commit 97ccbc734b004f551383f9c19e1840635fedfdf5 in lucene-solr's branch refs/heads/master from Namgyu Kim\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=97ccbc7 ]\n\nLUCENE-8476: Optimizations in UserDictionary (KoreanAnalyzer)\n\nSigned-off-by: Namgyu Kim <kng0828@gmail.com>\nSigned-off-by: Jim Ferenczi <jimczi@apache.org> ",
            "date": "2018-09-05T09:36:18+0000"
        },
        {
            "id": "comment-16604192",
            "author": "ASF subversion and git services",
            "content": "Commit 7595fd3892b9543978abeeac014993d3a4508fd5 in lucene-solr's branch refs/heads/branch_7x from Namgyu Kim\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7595fd3 ]\n\nLUCENE-8476: Optimizations in UserDictionary (KoreanAnalyzer)\n\nSigned-off-by: Namgyu Kim <kng0828@gmail.com>\nSigned-off-by: Jim Ferenczi <jimczi@apache.org> ",
            "date": "2018-09-05T09:37:16+0000"
        },
        {
            "id": "comment-16604193",
            "author": "Jim Ferenczi",
            "content": "Thanks Namgyu Kim ! ",
            "date": "2018-09-05T09:37:43+0000"
        },
        {
            "id": "comment-16604451",
            "author": "Namgyu Kim",
            "content": "You're welcome, Jim Ferenczi.\n\nThank you for applying my code\u00a0 ",
            "date": "2018-09-05T14:13:49+0000"
        }
    ]
}