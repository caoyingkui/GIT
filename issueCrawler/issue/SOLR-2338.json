{
    "id": "SOLR-2338",
    "title": "improved per-field similarity integration into schema.xml",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently since LUCENE-2236, we can enable Similarity per-field, but in schema.xml there is only a 'global' factory\nfor the SimilarityProvider.\n\nIn my opinion this is too low-level because to customize Similarity on a per-field basis, you have to set your own\nCustomSimilarityProvider with <similarity class=.../> and manage the per-field mapping yourself in java code.\n\nInstead I think it would be better if you just specify the Similarity in the FieldType, like after <analyzer>.\n\nAs far as the example, one idea from LUCENE-1360 was to make a \"short_text\" or \"metadata_text\" used by the\nvarious metadata fields in the example that has better norm quantization for its shortness...",
    "attachments": {
        "SOLR-2338.patch": "https://issues.apache.org/jira/secure/attachment/12474467/SOLR-2338.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12992614",
            "date": "2011-02-09T17:34:29+0000",
            "content": "Yep, sounds like a great idea!\nShould we specify the similarity class in each fieldType that want's to use a non-default similarity:\n\n\n<fieldType>\n  <analyzer>...</analyzer>\n  <similarity class=...></similarity>\n</fieldType>\n\n\n\nOr use named similarities and refer to them:\n\n<fieldType> \n  <analyzer>...</analyzer>\n  <similarity name=\"short_text\"/>\n</fieldType>\n\n<similarity name=\"short_text\" class=...></similarity>\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12992670",
            "date": "2011-02-09T19:15:01+0000",
            "content": "doesn't matter to me really, but what is the advantage of the named similarities?\n\nthis would be a bit inconsistent from how you configure analyzers (and an additional level\nof indirection that might be confusing)... or am I missing something? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12992676",
            "date": "2011-02-09T19:32:36+0000",
            "content": "Other components in solrconfig use that indirection, but\nI'm fine w/ the approach taken by tokenizer / token filter config.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12992728",
            "date": "2011-02-09T21:33:56+0000",
            "content": "Most existing situations where plugins are dereferenced by name are so we can reuse the exact same object instance (ie: for recording stats, or because they are heavyweight to construct on the fly)\n\nin the case of similarity, the main advantage i can think of would be if we wanted true per-field similiarity declaration, not just per field type ie...\n\n\n<similarity name=\"S_XX\" class=...></similarity>\n<similarity name=\"S_YY\" class=...></similarity>\n...\n<fieldType name=\"FT_AA\"> \n  <analyzer>...</analyzer>\n  <similarity name=\"S_XX\"/>\n</fieldType>\n...\n<field name=\"F_111\" type=\"FT_AA\" /><!-- implied S_XX -->\n<field name=\"F_222\" type=\"FT_AA\" similarity=\"S_YY\" />\n\n\n\n...but even if we don't do that, i suppose it's also conceivable that someone might have their own Similarity implementation that is expensive to instantiate (ie: maintains some big in memory data structures?) and might want to be able to declare one instance and then refer to it by name in many different fieldType declarations.\n\nI think for now just supporting the first example yonik cited...\n\n\n<fieldType>\n  <analyzer>...</analyzer>\n  <similarity class=...></similarity>\n</fieldType>\n\n\n\nwould be a huge win, and we can always enhance to add name derefrencing later. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12992735",
            "date": "2011-02-09T21:55:42+0000",
            "content": "\n...but even if we don't do that, i suppose it's also conceivable that someone might have their own Similarity implementation that is expensive to instantiate (ie: maintains some big in memory data structures?) and might want to be able to declare one instance and then refer to it by name in many different fieldType declarations.\n\nI don't think this is really a use case we need to support: the purpose of Similarity today is to do term weighting, not to be a huge data-structure holder.\n\nWhile I know Mike's original patch went this way with LUCENE-2392 (e.g. norms), I'm not sure i like it being in Similarity in the future either.\n\nOtherwise concepts like lazy-loading norms and all this other stuff get pushed onto the sim, which is an awkward place (imagine if you have many fields). \n\nSo, I think we shouldn't really design for abuses of the API. If there are other use cases for \"named similarity\" that have to do with term weighting, I'm interested. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13010552",
            "date": "2011-03-24T04:41:41+0000",
            "content": "Here's a first stab: I included LUCENE-2986's cleanup work for easy testing (this issue depends upon it).\n\nHere is the syntax:\n\n  <!--  specify a Similarity classname directly -->\n  <fieldType name=\"sim1\" class=\"solr.TextField\">\n    <analyzer>\n      <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n    </analyzer>\n    <similarity class=\"org.apache.lucene.misc.SweetSpotSimilarity\"/>\n  </fieldType>\n\n  <!--  specify a Similarity factory -->  \n  <fieldType name=\"sim2\" class=\"solr.TextField\">\n    <analyzer>\n      <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n    </analyzer>\n    <similarity class=\"org.apache.solr.schema.CustomSimilarityFactory\">\n      <str name=\"echo\">is there an echo?</str>\n    </similarity>\n  </fieldType>\n\n\n\nAdditionally, its necessary to allow customization of the SimilarityProvider too, in order to customize the non-field specific stuff like coord()... this is done via:\n\n <!-- expert: SimilarityProvider contains scoring routines that are not field-specific,\n      such as coord() and queryNorm(). most scoring customization happens in the fieldtype.\n      A custom similarity provider may be specified here, but the default is fine\n      for most applications.\n -->\n <similarityProvider class=\"org.apache.solr.schema.CustomSimilarityProviderFactory\">\n   <str name=\"echo\">is there an echo?</str>\n </similarityProvider>\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13011214",
            "date": "2011-03-25T14:16:36+0000",
            "content": "We resolved LUCENE-2986.\n\nHere's the same patch, without those changes for convenience.\n\nWould appreciate anyones opinions on this.. its easier to review now I think. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13012538",
            "date": "2011-03-29T16:13:57+0000",
            "content": "I'll commit this in a few days unless anyone objects. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13012787",
            "date": "2011-03-30T00:35:44+0000",
            "content": "skimming the patch, the one thing i'm not clear on is what happens when someone who has been using a custom similarity (or similarity factory) in Solr 1.4 or 3.1 will be affected on upgrading.\n\nthe patch seems to remove the code that allows for a (global) <similarity/> element in schema.xml (replacing it with a check for <similarityProvider/>\n\ni'm not clear on whether there is really a compelling reason for this (if there is we should have a nice fat warning in the upgrading section of CHANGES.txt) or if we could still continue to respect the <similarity/> syntax ... it seems like that one tag could be used to refrence (by classname) a global SimilarityProviderFactory, or a default Similarity instance (or default SimilarityFactory instance).\n\neven if there's a really good reason not to keep using what we might find in <similarity/>, we should check for it and log a nice fat error message saying it's being ignored. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13012792",
            "date": "2011-03-30T00:45:16+0000",
            "content": "Hoss, thanks for looking at the patch.\n\nAs far as the current form, Similarity is purely per-field, dictated by the schema (like Analyzers). For simplicity i removed the global one completely.\n\nIf we want, the following options are available:\n\n\t(global) <similarity/> configures the \"default\", which is used unless overridden by the fieldtype.\n\t(global) <similarity/> triggers an error.\n\n\n\nThe only reason I yanked it in the patch, was that I felt it could be confusing to have this \"inheritance\" so to speak... but if you think its not confusing, we could support the global <similarity/>, which would always be used unless you supply a different <similarity/> for a specific field. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13012802",
            "date": "2011-03-30T01:11:17+0000",
            "content": "but if you think its not confusing, we could support the global <similarity/>, which would always be used unless you supply a different <similarity/> for a specific field.\n\ni don't personally think it would be confusing, but i also don't think we need to advertise it in the example.\n\nwe should definitely encourage using similarity per field type, but for people who have used it in the past, having it continue to work as a \"global default\" when fieldTypes don't define a similarity gives us nice back-compatibility.\n\nMore generally though, i'm thinking that the same <similarity/> tag can be used for both the old style (global default) Similarity/SimilarityFactory and the new SimilarityProviderFactory using instanceof checks...\n\n\n\tinstanceOf SimilarityProviderFactory\n\t\n\t\tinstantiate it and use it.\n\t\n\t\n\tinstanceOf SimilarityFactory\n\t\n\t\tinstantiate and wrap it in a SolrSimilarityProvider that delegates to it when the field type has no similarity set on it.  return an anonymous SimilarityProviderFactory that uses this SolrSimilarityProvider\n\t\n\t\n\tinstanceOf Similarity\n\t\n\t\tinstantiate and wrap it in a SolrSimilarityProvider that delegates to it when the field type has no similarity set on it.  return an anonymous SimilarityProviderFactory that uses this SolrSimilarityProvider\n\t\n\t\n\n\n\n...that way there is only one \"global\" option that can be specified, and we don't have to deal with weird edge cases of what the default should be for a fieldTYpe w/o a similarity if the schema.xml specifies both <similarity/> and <similarityProvider/>\n\n\nThe one other thing i just noticed is that you have SimilarityProviderFactory.init(SolrParams) ... my vote would be to start using NamedList based initialization for all new types of solr plugins.  it requires more verbosity in the config, but it supports a lot more types of information (multivalued keys, nested lists/maps, etc...) and could eventually lead us to actually being able to validate our config files using an XMLSchema and/or DTD (since the element/node names are finite)\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13012809",
            "date": "2011-03-30T01:36:50+0000",
            "content": "\ni don't personally think it would be confusing, but i also don't think we need to advertise it in the example.\n\nwe should definitely encourage using similarity per field type, but for people who have used it in the past, having it continue to work as a \"global default\" when fieldTypes don't define a similarity gives us nice back-compatibility.\n\nI agree here, this is a good compromise and by not advertising it in the example, I won't have concerns about the example being confusing.\n\n\nMore generally though, i'm thinking that the same <similarity/> tag can be used for both the old style (global default) Similarity/SimilarityFactory and the new SimilarityProviderFactory using instanceof checks...\n\nI have to disagree on this one. The new SimilarityProvider serves a totally different purpose, its not a global sim: it answers to requests for sims for specific fields. The only reason I provided a factory for it, is so that users can tune the parts of lucene's relevance ranking system that are not per-field: coord() and queryNorm(). But its not a way to configure tf() or idf() or anything like that. In the patch I added this with \"expert\" to the example, though we could remove it from the example entirely if its too expert (might be?)\n\nSo I think we should do as you suggest and allow a global <similarity/> that is the default term weighting unless otherwise specified by a field, but we shouldn't confuse this with the parts that arent field-specific...\n\n\nThe one other thing i just noticed is that you have SimilarityProviderFactory.init(SolrParams) \n\nI configured it this way, because this is how <similarity/> worked before (and it was just enough XML to not scare me away). Is it possible we can defer this improvement to a later issue? I think we should give this a little more thought, for example if we do this its a break in the API for <similarityFactory/>, which this patch does not actually do: it only MOVES it to the fieldType. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13012812",
            "date": "2011-03-30T01:44:41+0000",
            "content": "By the way on the last part, its probably hard to see in the patch: this is because SimilarityFactory is currently (temporarily) backwards broken versus say, Solr 1.4, because I didn't want to take away any Solr capabilities until we resolved this issue... so in trunk right now it returns SimilarityProvider (which i know makes looking at the patch confusing). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13012823",
            "date": "2011-03-30T02:24:18+0000",
            "content": "I see, as far as using NamedList for the new SimilarityProviderFactory, that would be easy.\n\nHowever, at the moment my vote is against this, at least until SOLR-2292 is completed.\n\nAt the moment NamedList contains methods such as get(String) which have a slow linear runtime,\nand just out of paranoia I think we should keep NamedList as far away from the scoring system\nas possible. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13013618",
            "date": "2011-03-30T20:06:52+0000",
            "content": "i was confused by some of roberts comments, and clarified them with him on IRC.\n\nsummary (from my perspective)\n\n\n\t\"global default\" similarity(factory) (using existing <similarity/> tag) is a good idea as a fall back for fieldTypes that don't define custom similarity\n\t<similarity/> should probably not be advertised in the example configs .. but maybe, depends\n\tSimilarityProvider should use a distinct config tag (<similarityProvider/> because it really is distinct, and people should (in theory) be able to use both)\n\tSolrSimilarityProvider's get(field) method (which i didn't realize was final, hence part of my confusion) should be changed to use the <similarity/> as a default if it was specified.\n\tSolrSimilarityProvider's get(field) method really needs to stay final, and should have docs explain why (consistency with schema)\n\tSimilarityProviderFactory.init can be changed to using NamedList, but the docs should warn people about the possibility of performance penalties for using it directly in their SolrSimilarityProvider\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13013626",
            "date": "2011-03-30T20:21:54+0000",
            "content": "\n<similarity/> should probably not be advertised in the example configs ..\n\nDo you mean the expert-level SimilarityProvider, which is typically only needed to change coord() or queryNorm()?  If so, I'd agree - it's so expert level that most people shouldn't worry about it, hence it can simply be documented elsewhere. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13013633",
            "date": "2011-03-30T20:31:18+0000",
            "content": "Do you mean the expert-level SimilarityProvider, \n\nno i ment the existing global default <similarity/> mentioned in the previous bullet (but i was definitley vague \u2013 sorry).  we probably shouldn't go out of our way to advertise the global option anymore, we should encourage people to use the fieldType specific similarity instead.\n\nwhether we should promote customizing the SimilarityProvider in the example .. i dunno, i can see it either way.  but it seems like the order of importance for visibility is probably something like:\n\n\n\tcustomize per fieldType similarity (new hotness)\n\tcustomize similarityprovider (not something you are likely to need to do, but if you do there's really only one way so maybe we should advertise it's an option)\n\tcustomize global default similarity (odds are you really don't need this, you can probably do it using per fieldType similarity)\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13013652",
            "date": "2011-03-30T21:08:59+0000",
            "content": "I agree with your order, i think to keep the example simple we should just have a commented out example for a fieldType that customizes its similarity?\n\nI think we can support customizing the similarityprovider (in case you want to change how coord is calculated), and support changing the default-unless-otherwise-specified-in-the-schema similarity (for easier backwards transition), but I'm thinking it would be actually more confusing than helpful to advertise these in the example. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13013686",
            "date": "2011-03-30T21:45:14+0000",
            "content": "I dunno - it seems much more likely that someone would want to easily change the default sim for all fields rather than change coord. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13013696",
            "date": "2011-03-30T21:56:28+0000",
            "content": "OK, well there's clearly no consensus on the example, but fortunately \nnone of this need block this issue.\n\nI'll add support for default <similarity/>, and leave the example unchanged.\nwe can open a followup issue and debate this example stuff separately. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13013713",
            "date": "2011-03-30T22:44:15+0000",
            "content": "attached is the modifications:\n\n\tdefault <similarity/> is used as a fallback if not otherwise specified in the fieldtype\n\tsimprovider takes namedlist\n\tthe get(String) and remove(String) methods are documented to run in linear time.\n\ti left the example unchanged, we can TBD this for later.\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13014180",
            "date": "2011-03-31T20:13:19+0000",
            "content": "Committed revision 1087430.\n\nThanks hoss and yonik for feedback. "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13024811",
            "date": "2011-04-25T14:21:09+0000",
            "content": "test-files/solr/conf/schema.xml contains sample of per-field definitions;\nexample/solr/schema.xml doesn't have it yet "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13050158",
            "date": "2011-06-16T00:13:50+0000",
            "content": "Fuad: note from the comments above that this was intentional \u2013 for now.\n\ni've opened SOLR-2600 to ensure that this is dealt with before the feature is released. "
        }
    ]
}