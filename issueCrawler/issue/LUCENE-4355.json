{
    "id": "LUCENE-4355",
    "title": "improve AtomicReader sugar apis",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I thought about this after looking @ LUCENE-4353:\n\nAtomicReader has some sugar APIs that are over top of the flex apis (Fields, Terms, ...). But these might be a little trappy/confusing compared to 3.x.\n\n\n\tI dont think we need AtomicReader.termDocsEnum(Bits, ...) and .termPositionsEnum(Bits, ...). I also don't think we need variants that take flags here. We should simplify these to be less trappy. I think we only need (String, BytesRef) here.\n\tThis means you need to use the flex apis for more expert usage: but we make this a bit too hard since we only let you get a Terms (which you must null check, then call .iterator() on, then seekExact, ...). I think it could help if we balanced this out by adding some sugar like AtomicReader.termsEnum? 3.x had a method that let you get a 'positioned termsenum'.",
    "attachments": {
        "LUCENE-4355.patch": "https://issues.apache.org/jira/secure/attachment/12544494/LUCENE-4355.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-04T12:13:30+0000",
            "content": "I would start with removing all these APIs except fields() from AtomicReader, fix all tests and then readd \"useful\" ones (useful for enduser). ",
            "author": "Uwe Schindler",
            "id": "comment-13447649"
        },
        {
            "date": "2012-09-04T13:02:30+0000",
            "content": "I agree, this was mainly to start discussion about what sugar apis we should have.\n\nCurrently its very inconsistent.\n\nIndexReader:\n\n\tdocFreq(Term) -> forwards to docFreq(String, BytesRef)\n\tdocFreq(String, BytesRef) -> (abstract: this can be seen as a sugar API)\n\n\n\nAtomicReader:\n\n\ttotalTermFreq(String, BytesRef) -> strange to be treated differently than docFreq, sugar to seekExact+totalTermFreq\n\tterms(String) -> note that in 3.x terms() and terms(Term) are different and go to TermsEnum (unpositioned and positioned)\n\ttermDocsEnum(Bits, String, BytesRef) -> the Bits should be implicit in the reader. if you want your own bits use flex apis?\n\ttermDocsEnum(Bits, String, BytesRef, int) -> flags seems too expert\n\ttermPositionsEnum(Bits, String, BytesRef)\n\ttermPositionsEnum(Bits, String, BytesRef, int)\n\n\n\nSo we should also discuss whether its useful to use Term at the indexReader level. If we are going to have sugar\nfor docFreq(Term) then we should do this elsewhere too? Term is somewhat nice because it means users don't have\nto deal with BytesRef etc.\n\nI wonder if totalTermFreq sugar is necessary here too, if we instead make it easy for you to get a positioned termsenum for\na specific term (you could just call it yourself then).\n\nWe should also think about the names termDocsEnum/termPositionsEnum. in 3.x these were termDocs() and termPositions(),\nand could take Term. \n\nThe only thing I feel pretty strongly about is that I think passing a custom Bits is too expert for these sugar APIs,\nas its something implicit from the Reader itself.  ",
            "author": "Robert Muir",
            "id": "comment-13447666"
        },
        {
            "date": "2012-09-04T16:58:13+0000",
            "content": "Maybe we should remove all the sugar methods...?  It's quite expert to pull a D/D&PEnum?  But maybe stats are more commonly used? ",
            "author": "Michael McCandless",
            "id": "comment-13447811"
        },
        {
            "date": "2012-09-04T19:30:51+0000",
            "content": "I don't think I agree Mike. I think we should degrade into expert territory rather than it being a sharp cliff.\nI think we should also make migration from previous versions of lucene easier too.\n\nI think these apis on IR are a good way to do that. I'm tempted to suggest:\n\ntermDocs(Term) & termPositions(Term) as the sugar postings APIs as those pretty much match the 3.x functionality.\n\nI'm not sure these sugar APIs should take BytesRef, thats another head explosion for someone above Term which\nis simpler and takes Strings.\n\nIf someone is going to be calling these on lots of things anyway they can just use fields()/terms()/etc.\n\nWe also have to realize its a lot of work to compute something like docFreq without any sugar at all,\njust look at the code to docFreq:\n\nfinal Fields fields = fields();\nif (fields == null) {\n  return 0;\n}\nfinal Terms terms = fields.terms(field);\nif (terms == null) {\n  return 0;\n}\nfinal TermsEnum termsEnum = terms.iterator(null);\nif (termsEnum.seekExact(term, true)) {\n  return termsEnum.docFreq();\n} else {\n  return 0;\n}\n\n\n\nThats too much boilerplate and special-cases. the terms(String) sugar helps a lot here, reducing it to:\n\nfinal Terms terms = ir.terms(field);\nif (terms == null) {\n  return 0;\n}\nfinal TermsEnum termsEnum = terms.iterator(null);\nif (termsEnum.seekExact(term, true)) {\n  return termsEnum.docFreq();\n} else {\n  return 0;\n}\n\n\n\nBut thats still too much. Making a positioned termsenum more accessible could help with a lot\nof expert use-cases like getting enums with different Bits or flags or getting term-level stats:\n\n\nfinal TermsEnum te = ir.termsEnum(new Term(\"field\", \"value\"));\nif (te == null) {\n  return 0;\n} else {\n  return te.docFreq();\n}\n\n\n\nThe oddity might be that compared to 3.x, its a seekExact vs. a seekCeil. But i think thats ok,\nafter all we already \"backwards-broke\" since terms() does something totally different than 3.x (and I think\nwe should keep that, making it easy to access field-level metadata!) \n\nAnd I still think we should keep docFreq/totalTermFreq sugar! ",
            "author": "Robert Muir",
            "id": "comment-13447984"
        },
        {
            "date": "2012-09-05T10:34:39+0000",
            "content": "I'm OK with keeping the sugar too.  I agree the boilerplate code is sizable.\n\nI think only taking Term, not taking Bits, keeps the docs/positions enum simple.\n\nShould we sugar for all stats?  (eg IR.getSumTotalTermFreq(String field)). ",
            "author": "Michael McCandless",
            "id": "comment-13448618"
        },
        {
            "date": "2012-09-10T18:01:48+0000",
            "content": "here's an incomplete patch just looking at IR.docFreq: found a few wierd things looking around.\n\nI think fixing all these sugar APIs is going to be pretty major and a lot of work.\n\nIn general I think we can accomplish this issue in a backwards-compatible way later: sure it will mean we have deprecations but I think this is better than rushing stuff in. ",
            "author": "Robert Muir",
            "id": "comment-13452249"
        },
        {
            "date": "2012-09-10T18:41:32+0000",
            "content": "+1, patch looks good for docFreq. ",
            "author": "Michael McCandless",
            "id": "comment-13452292"
        },
        {
            "date": "2012-09-11T09:52:15+0000",
            "content": "updated patch: sugar fixed for docsEnum/d&pEnum as proposed.\n\nwasn't as bad as I thought  ",
            "author": "Robert Muir",
            "id": "comment-13452859"
        },
        {
            "date": "2012-09-11T14:49:21+0000",
            "content": "+1, looks great! ",
            "author": "Michael McCandless",
            "id": "comment-13453070"
        },
        {
            "date": "2012-09-11T16:02:47+0000",
            "content": "Thanks Mike: Ill give some time in case anyone else wants to review, but i'd like to commit this in a day or two. ",
            "author": "Robert Muir",
            "id": "comment-13453137"
        },
        {
            "date": "2013-03-22T16:40:55+0000",
            "content": "[branch_4x commit] Robert Muir\nhttp://svn.apache.org/viewvc?view=revision&revision=1384290\n\nLUCENE-4355: upgrade MIGRATE.txt (also fix a bug in field+term enumeration) ",
            "author": "Commit Tag Bot",
            "id": "comment-13610864"
        },
        {
            "date": "2013-03-22T16:41:00+0000",
            "content": "[branch_4x commit] Robert Muir\nhttp://svn.apache.org/viewvc?view=revision&revision=1384286\n\nLUCENE-4355: improve AtomicReader sugar apis ",
            "author": "Commit Tag Bot",
            "id": "comment-13610865"
        },
        {
            "date": "2013-05-10T10:33:40+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653990"
        }
    ]
}