{
    "id": "LUCENE-5470",
    "title": "Refactoring multiterm analysis",
    "details": {
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "core/queryparser"
        ],
        "affect_versions": "4.7",
        "status": "Open",
        "fix_versions": []
    },
    "description": "There are currently three methods to analyze multiterms in Lucene and Solr:\n\n1) QueryParserBase\n2) AnalyzingQueryParser\n3) TextField (Solr)\n\nThe code in QueryParserBase and in TextField do not consume the tokenstream if more than one token is generated by the analyzer.  (Admittedly, thanks to the magic of MultitermAwareComponents in Solr, this type of exception probably never happens and the unconsumed stream problem is probably non-existent in Solr.)\n\nI propose consolidating the multiterm analysis code into one place: QueryBuilder in Lucene core.\n\nThis is part of a refactoring that will also help reduce duplication of code with LUCENE-5205.",
    "attachments": {
        "LUCENE-5470_QPBase.patch": "https://issues.apache.org/jira/secure/attachment/12633179/LUCENE-5470_QPBase.patch",
        "LUCENE-5470_QBuilder.patch": "https://issues.apache.org/jira/secure/attachment/12633178/LUCENE-5470_QBuilder.patch",
        "LUCENE-5470.patch": "https://issues.apache.org/jira/secure/attachment/12630780/LUCENE-5470.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13910711",
            "author": "Tim Allison",
            "content": "First version of patch.  \n\nI used the code from AnalyzingQueryParser as the template.\n\nIf we want to do this consolidation, some questions:\n\n1) should analyzeMultitermTerm be static?\n2) is the unchecked IllegalArgumentException the way to go if zero or more than one token is generated by the analyzer?\n3) should we try to coalesce around one name: analyzeMultiTerm vs AnalyzeMultitermTerm?\n\nThank you. ",
            "date": "2014-02-24T19:31:42+0000"
        },
        {
            "id": "comment-13911774",
            "author": "Ahmet Arslan",
            "content": "Hey Tim,\n\nSince you are into multi term analysis, and familiar with query parsers, can you look at SOLR-4382 ? May be you can tell where we should look into? \n\nThanks, ",
            "date": "2014-02-25T17:42:58+0000"
        },
        {
            "id": "comment-13911787",
            "author": "Robert Muir",
            "content": "Can we just analyze multiterm queries without trying to parse around wildcards or what not? This is basically what solr is doing today. I think trying to interpret the syntax is a bit too funky and error-prone, and its better if someone wants \"magic\" to have that in their QP itself.\n\nI think its assumed you will use a different analyzer for this stuff (e.g. with keywordtokenizer) than you normally would, so this syntax is no problem really. This is why for example, QueryParserBase is specifically setup for you to supply that simpler, different analyzer:\n\n  protected BytesRef analyzeMultitermTerm(String field, String part, Analyzer analyzerIn) {\n\n ",
            "date": "2014-02-25T17:52:08+0000"
        },
        {
            "id": "comment-13911791",
            "author": "Robert Muir",
            "content": "btw, i do think we want to consolidate this. But I'm not sure QueryBuilder is the appropriate place (in general thats a very very simple subclass and doesnt handle these types of queries).\n\nPersonally i was htinking more along the lines of making the default implementation in QueryParserBase (analyzeMultitermTerm) a simple static method available somewhere that parsers can use? e.g. it just takes an Analyzer, a field name, and some text and ensures there is only one token and returns the term. ",
            "date": "2014-02-25T17:56:06+0000"
        },
        {
            "id": "comment-13911900",
            "author": "Tim Allison",
            "content": "Can we just analyze multiterm queries without trying to parse around wildcards or what not? This is basically what solr is doing today. I think trying to interpret the syntax is a bit too funky and error-prone, and its better if someone wants \"magic\" to have that in their QP itself.\n\nI'm of two minds on this.  From the Solr perspective, absolutely, getMultiterm is sufficient.  From the Lucene perspective, users may want to use the off-the-shelf analyzers like StandardAnalyzer and be puzzled that they don't work for multiterms...AnalyzingQueryParser fits this need for wildcard queries (not for regex, though).  Some thoughts on this:\n\n1) Do the least harm option: consolidate getMultitermTerm as a public static method in QueryParserBase and let AnalyzingQueryParser do its wildcard stuff as is.\n\n2) Do the above, but also add an AnalyzingQueryParserBase layer that does the wildcard trickery (and maybe add something for regex)?  Classic QueryParser and others could then subclass AnalyzingQP.  The benefit of this is that we could get rid of AnalyzingQP and add multiterm analysis to other parsers that currently subclass QPBase.  This would only benefit people working at the Lucene level.\n\n3) A more drastic step would be to move the Solr MultitermAware processing in FieldTypePluginLoader down into the Lucene layer...but this wouldn't solve the problem of Lucene users misusing off the shelf Analyzers. ",
            "date": "2014-02-25T19:06:20+0000"
        },
        {
            "id": "comment-13912891",
            "author": "Tim Allison",
            "content": "On second thought...please disregard above.  We shouldn't be encouraging misuse of analyzers via hacks for wildcard analysis now that the problem has been fixed at the Solr level.\n\nI feel fairly strongly that analyzeMultitermTerm should be fairly high up the stack...not quite at Object, perhaps.   \n\nThe case for putting analyzeMultitermTerm as a static helper function  in QueryBuilder or at least something higher up than QueryParserBase is mostly aesthetic IMHO.  It feels awkward to me to create SolrQueryParserBase as a sister to QueryParserBase and then have it effectively calling its sister's static function (if we put analyzeMultitermTerm in QueryParserBase).  It feels slightly less awkward to have it calling its parent's helper function.  By \"effectively,\" of course, I don't mean that SQPB is actually calling it itself, but it does effectively do it through TextField.\n\nSo, my proposal for this patch is to leave analyzeMultitermTerm in QueryBuilder and put analyzeWildcard back into AnalyzingQueryParser where it belongs.  \n\nI'm happy to defer to the community, though.  I've come late to the party and this has probably been thoroughly discussed. ",
            "date": "2014-02-26T13:39:08+0000"
        },
        {
            "id": "comment-13922779",
            "author": "Tim Allison",
            "content": "Two patches.  One consolidates analysis in QueryBuilder and one consolidates it in QueryParserBase.\n\nI've added a check for position increment.  I don't think this will create false exceptions, but let me know if anyone thinks otherwise.\n\nIf we go with QueryBuilder, I'm not held to static. ",
            "date": "2014-03-06T17:25:52+0000"
        }
    ]
}