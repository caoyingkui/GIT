{
    "id": "LUCENE-7486",
    "title": "DisjunctionMaxScorer Initializes scoreMax to Zero Preventing From Using Negative Scores",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.5.2",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "6.3",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "We are using a log of probability for scoring, which gives us negative scores.  \n\nDisjunctionMaxScorer initializes scoreMax in the score(...) function to zero preventing us from using negative scores.  Is there a reason it couldn't be initialized to something like this:\n\nfloat scoreMax = Float.MAX_VALUE * -1;",
    "attachments": {
        "LUCENE-7486.patch": "https://issues.apache.org/jira/secure/attachment/12832549/LUCENE-7486.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15562664",
            "author": "Uwe Schindler",
            "date": "2016-10-10T15:58:41+0000",
            "content": "It should be Float.NEGATIVE_INFINTY if you would like to do this. "
        },
        {
            "id": "comment-15562771",
            "author": "Ivan Provalov",
            "date": "2016-10-10T16:46:11+0000",
            "content": "Good point, Uwe.  Is there a reason it shouldn't be done in Lucene source? "
        },
        {
            "id": "comment-15562780",
            "author": "Adrien Grand",
            "date": "2016-10-10T16:48:08+0000",
            "content": "I'm not sure DisjunctionMaxScorer makes a lot of sense with negative scores, but I'd be +1 to initialize scoreMax with Float.NEGATIVE_INFINTY like Uwe suggested for consistency. "
        },
        {
            "id": "comment-15563075",
            "author": "Uwe Schindler",
            "date": "2016-10-10T18:30:37+0000",
            "content": "I can take care of this! It should be a one-line change only, if all tests pass. "
        },
        {
            "id": "comment-15563078",
            "author": "Uwe Schindler",
            "date": "2016-10-10T18:31:16+0000",
            "content": "Of course, the comment was just about your suggestion. Of course we can fix this in Lucene, it is not a risk at all. "
        },
        {
            "id": "comment-15563360",
            "author": "Ivan Provalov",
            "date": "2016-10-10T20:16:55+0000",
            "content": "Thanks, Uwe! "
        },
        {
            "id": "comment-15563632",
            "author": "Uwe Schindler",
            "date": "2016-10-10T21:48:14+0000",
            "content": "Simple patch. All Lucene Core tests pass. I am not sure if its worth to add some kind of test for this.\n\nI also checked the code: It should behave the same as before. The score returned can never be NEGATIVE_INFINITY by default, because DisjSumScorer must at least have one scorer, whose score is always > than NEGATIVE_INFINITY. There is only a difference if one of the subscorers returns a score < 0, which is what this issue wants to fix.\n\nThe simplest way to test this would be to create a test using a ConstantScoreQuery with a negative score and add it to DisjMaxQuery.\n\nI will run all tests later, but for now I posted the patch. "
        },
        {
            "id": "comment-15563747",
            "author": "Uwe Schindler",
            "date": "2016-10-10T22:31:48+0000",
            "content": "New patch with test. Test fails without the NEGATIVE_INFINITY fix. The trick was to use a BoostQuery with negative boost. "
        },
        {
            "id": "comment-15564654",
            "author": "Adrien Grand",
            "date": "2016-10-11T06:30:34+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15565854",
            "author": "ASF subversion and git services",
            "date": "2016-10-11T16:07:51+0000",
            "content": "Commit d25aba2336fe8e7e2a831ccceb6635eb8881cf0f in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d25aba2 ]\n\nLUCENE-7486: DisjunctionMaxQuery does not work correctly with queries that return negative scores "
        },
        {
            "id": "comment-15565857",
            "author": "ASF subversion and git services",
            "date": "2016-10-11T16:08:58+0000",
            "content": "Commit 3bd3a4cbc460db20e29e242f27041c20a03218de in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3bd3a4c ]\n\nLUCENE-7486: DisjunctionMaxQuery does not work correctly with queries that return negative scores "
        },
        {
            "id": "comment-15566543",
            "author": "Ivan Provalov",
            "date": "2016-10-11T20:44:00+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15575339",
            "author": "ASF subversion and git services",
            "date": "2016-10-14T13:30:23+0000",
            "content": "Commit b5a98cc52c29dbcb79299396d44db6b604c2c422 in lucene-solr's branch refs/heads/branch_6x from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b5a98cc ]\n\nLUCENE-7486: Explain() should initialize maxScore to NEGATIVE_INFINITY too. "
        },
        {
            "id": "comment-15575340",
            "author": "ASF subversion and git services",
            "date": "2016-10-14T13:30:24+0000",
            "content": "Commit 9304ef9f118d24f76b280299706310ca8a0d40e6 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9304ef9 ]\n\nLUCENE-7486: Explain() should initialize maxScore to NEGATIVE_INFINITY too. "
        },
        {
            "id": "comment-15575437",
            "author": "Uwe Schindler",
            "date": "2016-10-14T14:04:57+0000",
            "content": "Thanks Adrien for fixing this bug! "
        },
        {
            "id": "comment-15650236",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-11-09T08:37:31+0000",
            "content": "Closing after 6.3.0 release. "
        }
    ]
}