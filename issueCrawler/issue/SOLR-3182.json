{
    "id": "SOLR-3182",
    "title": "If there is only one core, let it be the default without specifying a default in solr.xml",
    "details": {
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "multicore"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Our particular need for this is as follows.  We operate in a sharded environment with one core per server.  Each shard also acts as a collator.  We want to use a hardware load balancer to choose which shard will do the collation for each query.  But in order to do that, each server's single core would have to carry the same name so that it could be accessed by the same url across servers.  However we name the cores by their shard number (query0,query1,...) because it parallels with the way we name our indexing/master cores (index0, index1,...).  This naming convention also gives us the flexibility of moving to a multicore environment in the future without having to rename the cores, although admittedly that would complicate load balancing.  \n\nIn a system with a large number of shards and the anticipation of adding more going forward, setting a defaultCoreName attribute in each solr.xml file becomes inconvenient, especially since there is no Solr admin API for setting defaultCoreName.  It would have to be done by hand or with some automated tool we would write in house.  Even if there were an API, logically it seems unnecessary to have to declare the only core to be the default. \n\nFortunately this behavior can be implemented with the following simple patch:\n\n\nIndex: solr/core/src/java/org/apache/solr/core/CoreContainer.java\n===================================================================\n--- solr/core/src/java/org/apache/solr/core/CoreContainer.java\t(revision 1295229)\n+++ solr/core/src/java/org/apache/solr/core/CoreContainer.java\t(working copy)\n@@ -870,6 +870,10 @@\n   }\n \n   private String checkDefault(String name) {\n+    // if there is only one core, let it be the default without specifying a default in solr.xml\n+    if (defaultCoreName.trim().length() == 0 && name.trim().length() == 0 && cores.size() == 1) {\n+      return cores.values().iterator().next().getName();\n+    }\n     return name.length() == 0  || defaultCoreName.equals(name) || name.trim().length() == 0 ? \"\" : name;\n   }",
    "attachments": {
        "SOLR-3182-default-core.patch": "https://issues.apache.org/jira/secure/attachment/12516607/SOLR-3182-default-core.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13220990",
            "date": "2012-03-02T15:28:35+0000",
            "content": "Hmmm, there's no guarantee that the incoming name is not null, so wouldn't\nStringUtils.isBlank() (commons-lang is available) be a better choice for testing name? defaultCoreName is initialized to \"\", but it doesn't seem like it would hurt there either...\n\nOther than that, does anyone object to committing this? I don't see how this bit could generate an NPE given that the size is guaranteed to be > 0\ncores.values().iterator().next().getName()  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13220999",
            "date": "2012-03-02T15:38:25+0000",
            "content": "Other than that, does anyone object to committing this?\n\nI haven't thought through the implications, but it could be dicey for multi-core use.\nIf you start with two cores open (and maybe even no default core), then close one core and all of a sudden the other becomes the default?\n\nPerhaps this need for a default core could instead be generalized... some sort of config option that made the default the first active core (sorted by core name)? "
        },
        {
            "author": "Russell Black",
            "id": "comment-13221005",
            "date": "2012-03-02T15:52:55+0000",
            "content": "If you start with two cores open (and maybe even no default core), then close one core and all of a sudden the other becomes the default?\n\nI have thought about that situation.  It is true that going from two cores to one would result in the remaining core becoming the default.  However, this doesn't change the way the server presents itself to an application that expects a multi-core system, since the remaining core continues to be accessible by the same URL as it was before.  It simply becomes accessible by an additional URL when it becomes the only core.\n\nThanks for considering this patch.   "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13221043",
            "date": "2012-03-02T16:49:06+0000",
            "content": "Seems like a reasonable idea. I'll try to play with the patch a little when I get a free moment. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13221054",
            "date": "2012-03-02T17:04:16+0000",
            "content": "It simply becomes accessible by an additional URL when it becomes the only core.\n\nBut then the reverse case could also be jarring when someone is able to access a core by virtue of it being default, and then that ability is suddenly removed when a new core is created. "
        },
        {
            "author": "Russell Black",
            "id": "comment-13221079",
            "date": "2012-03-02T17:38:12+0000",
            "content": "But then the reverse case could also be jarring when someone is able to access a core by virtue of it being default, and then that ability is suddenly removed when a new core is created.\n\nAgreed.  An application developer would need to understand the implications of adding another core and plan accordingly in his application, or else explicitly declare a defaultCoreName in solr.xml.   "
        },
        {
            "author": "Russell Black",
            "id": "comment-13221098",
            "date": "2012-03-02T17:58:16+0000",
            "content": "Perhaps the confusion you point out could be mitigated with some messaging, something like this:\n\n\nprivate String checkDefault(String name) {\n  // if there is only one core, let it be the default without specifying a default in solr.xml\n  if (StringUtils.isBlank(defaultCoreName) && StringUtils.isBlank(name.trim())) {\n    if (cores.size() == 1) {\n      return cores.values().iterator().next().getName();\n    }\n    else {\n      throw new SolrException( SolrException.ErrorCode.BAD_REQUEST, \"This server hosts multiple cores, \" +\n      \t\t\"but no core name was supplied in the request and no defaultCoreName was declared in solr.xml\" );\n    }\n  }\n  return StringUtils.isBlank(name) || defaultCoreName.equals(name) ? \"\" : name;\n} \n\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13221393",
            "date": "2012-03-03T00:44:03+0000",
            "content": "I'd prefer to avoid such \"magic\" inconsistent behavior.\n\nInstead I propose that if you specify defaultCoreName=\"$1\" it will choose the first core in the list $2 the second etc. This will keep old solr.xml's backward compatible. Sample:\n\n\n  <cores adminPath=\"/admin/cores\" defaultCoreName=\"$1\">\n    <core name=\"myCore\" instanceDir=\"myCore\" />\n  </cores>\n\n "
        },
        {
            "author": "Russell Black",
            "id": "comment-13221412",
            "date": "2012-03-03T01:14:20+0000",
            "content": "Jan, that is an interesting idea and is similar to the one Yonik proposed earlier.  I am happy with your proposal as it would address our situation just fine.  \n\nThat said, you could experience a type of inconsistent behavior with a $1 solution as well.  Let's say I have two cores and have defaultCoreName=$1.  Then the first core gets deleted.  Anyone who was making requests to the default core(/solr/select) will suddenly find that they are getting different data because they are hitting a new core.  From this perspective, the \"magic\" behavior would seem to be no worse than the inconsistency with the $1 solution.  It's possible I am missing something here.  \n\nAs far as the backwards compatibility of my proposed solution, old solr.xmls will continue to operate as they always have, the only difference being that single cores will be available via an additional url.  That is, single cores will continue to be accessible by their name.  \n\nI am willing to build the patch for whatever solution the committers agree on.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13224584",
            "date": "2012-03-07T18:52:28+0000",
            "content": "Do we want to carry this forward for 3.x? If so, we need to get consensus real soon now since there's a movement to cut a 3.6 (the last 3x release planned?) in 10 days or so.\n\nI've assigned it to myself just as a placeholder, if someone else wants to go ahead and take this, please feel free.\n\nOr does all the SolrCloud stuff make this something we don't want to deal with (in which case there never will be a 3.x way to handle this)...\n\nOr does it make sense to do this for 3.6 and not try to move it into trunk? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13233355",
            "date": "2012-03-20T11:25:17+0000",
            "content": "Don't have time to get to this in 3.6, does someone else want to push this forward? "
        },
        {
            "author": "Russell Black",
            "id": "comment-13697955",
            "date": "2013-07-02T16:44:04+0000",
            "content": "We have been using this patch in production now for two years.  Would it be possible to get this into the 4.x code base? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13697961",
            "date": "2013-07-02T16:46:55+0000",
            "content": "Erick Erickson is working on changing a ton around solr.xml, so maybe this no longer even applies? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13697991",
            "date": "2013-07-02T17:12:05+0000",
            "content": "default core is going away "
        },
        {
            "author": "Russell Black",
            "id": "comment-13698017",
            "date": "2013-07-02T17:30:02+0000",
            "content": "That will likely force us to re-architect our load balancing system (described in the ticket summary above).  Is there a ticket or a thread where I can read more about this change?   "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13698031",
            "date": "2013-07-02T17:45:47+0000",
            "content": "Russell Black, I don't think the defaultCoreName attribute was really intended to be a long-term thing.  It bridged the gap between the single-core days and the switch to multi-core as the example default.  Solr 5.0 will be fully multicore, I expect that it will no longer be possible to configure a single-core setup.\n\nThe fact that beginner Solr documentation continues even now to use the http://server:port/solr base URL is going to be a problem in the future when URLs that don't include a core/collection name will cease to work.  I'm actually surprised that they are still supported in 4.x. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13698037",
            "date": "2013-07-02T17:52:39+0000",
            "content": "Sounds like they where using it like an alias? We have alias support in SolrCloud now, but the single node alias stuff was previously deprecated. "
        },
        {
            "author": "Russell Black",
            "id": "comment-15496736",
            "date": "2016-09-16T16:29:03+0000",
            "content": "With Solr Cloud, this feature is not needed. "
        }
    ]
}