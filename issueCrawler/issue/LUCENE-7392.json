{
    "id": "LUCENE-7392",
    "title": "Add point based GeoBoundingBoxField as a new RangeField type",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "7.1",
            "master (8.0)"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "This issue will add a new point based GeoBoundingBoxField type for indexing and querying 2D or 3D Geo bounding boxes. The intent is to construct this as a RangeField type and limit the first two dimensions to the lat/lon geospatial bounds (at 4 bytes each like LatLonPoint, while allowing an optional 8 byte (double) third dimension to serve as an altitude component for indexing 3D geospatial bounding boxes.",
    "attachments": {
        "LUCENE-7392.patch": "https://issues.apache.org/jira/secure/attachment/12866975/LUCENE-7392.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16001425",
            "author": "Nicholas Knize",
            "date": "2017-05-08T19:44:43+0000",
            "content": "Finally got around to getting the patch together for this feature. It includes the following:\n\n\n\tnew GeoBoundingBoxField type in sandbox for indexing two-dimension and three-dimension geo bounding boxes. Like the other POINT based fields there are static helper methods for creating the INTERSECTS, WITHIN, CONTAINS, and CROSSES queries.\n\tnew TestGeoBoundingBoxQueries class that randomly tests indexing and search for both 2d and 3d GeoBoundingBoxField\n\tjavadocs updated\n\n\n\nI think this is pretty close. I've beasted it a few nights without failure. I'd also like to get some thoughts on whether or not this should go into 6.x or 7.0. My inclination is to add it as a new feature for 7.0 since we're already so close to release. Thoughts welcome. Thanks! "
        },
        {
            "id": "comment-16006634",
            "author": "Adrien Grand",
            "date": "2017-05-11T15:26:36+0000",
            "content": "This is an exciting feature!\n\n\tI'm wondering whether we should stick to 2 dimensions to be symmetric with LatLonPoint? Maybe also call it something like LatLonBox (\"LatLon\" prefix to indicate it works similarly to \"LatLonPoint\" and removing the \"Field\" suffix like we did for ranges).\n\tThe impl of newXDLQuery is a bit suspicious, the west builder is not useful since it wraps a single query, which means the queryType is mostly ignored? I haven't thought much about it but I'm wondering it could just do return bboxQuery(field, minLat, minLon, minAlt, maxLat, 360.0D + maxLon, maxAlt, queryType); given how we index?\n\tIt looks like toString does not read bytes at the correct offsets, especially for the longitude.\n\n\n\nMichael McCandless and/or Robert Muir: you might be interested to have a look since you worked on LatLonPoint? "
        },
        {
            "id": "comment-16006640",
            "author": "Adrien Grand",
            "date": "2017-05-11T15:32:11+0000",
            "content": "Regarding which branches it should go into, both options work for me. The benefit of not putting new features in 6.x is that it reduces the likeliness of us having to do a bugfix release once 7.0 is out (which is always problematic because we need to make sure the index format is forward-compatible), so I think your plan to only put it in 7.0 makes sense. "
        },
        {
            "id": "comment-16020712",
            "author": "Nicholas Knize",
            "date": "2017-05-23T06:45:06+0000",
            "content": "Updated patch:\n\n\n\tRemoves 3D support (will add as separate field type in separate issue)\n\tCleans up newXDLQuery to remove superfluous BooleanQuery.Builder\n\tRenames class from GeoBoundingBoxField to LatLonBoundingBox to be more consistent with LatLonPoint\n\n "
        },
        {
            "id": "comment-16022537",
            "author": "Adrien Grand",
            "date": "2017-05-24T08:35:39+0000",
            "content": "\n+  /** rewrite the dateline crossing query to separate western hemisphere and expanded eastern hemisphere */\n+  private static Query newXDLQuery(String field, final double minLat, final double minLon,\n+                                   final double maxLat, final double maxLon, final RangeFieldQuery.QueryType queryType) {\n+    BooleanQuery.Builder bqb = new BooleanQuery.Builder();\n+    bqb.add(bboxQuery(field, minLat, GeoUtils.MIN_LON_INCL, maxLat, maxLon, queryType), BooleanClause.Occur.SHOULD);\n+    bqb.add(bboxQuery(field, minLat, minLon, maxLat, 360.0D + maxLon, queryType), BooleanClause.Occur.SHOULD);\n+    return bqb.build();\n+  }\n\n\n\nThis looks suspicious to me. The fact that the first bbox has a constant minimum longitude would cause bugs I think with CONTAINS, WITHIN and CROSSES? Shouldn't it be just:\n\n+  /** rewrite the dateline crossing query to separate western hemisphere and expanded eastern hemisphere */\n+  private static Query newXDLQuery(String field, final double minLat, final double minLon,\n+                                   final double maxLat, final double maxLon, final RangeFieldQuery.QueryType queryType) {\n+    return bboxQuery(field, minLat, minLon, maxLat, 360.0D + maxLon, queryType);\n+  }\n\n\n\nAt the moment, your patch performs quantization both at index-time and search-time. I think it would be nicer if the impact of quantization only applied to the indexed bboxes, which may be doable by rounding the low/high bounds of the query down or up depending on the query type? "
        },
        {
            "id": "comment-16022563",
            "author": "Adrien Grand",
            "date": "2017-05-24T08:55:42+0000",
            "content": "Shouldn't it be just\n\nScratch that, actually I don't think it would work. However I still think there is a bug when the query crosses the dateline with the current patch? "
        },
        {
            "id": "comment-16142223",
            "author": "Nicholas Knize",
            "date": "2017-08-25T21:22:05+0000",
            "content": "Haven't updated this issue in a while so I'm posting a new patch with the following changes:\n\n\n\tChanged LatLonBoundingBox encoding to be consistent with LatLonPoint\n\tRemoved chaos for supporting dateline crossing - this field now DOES NOT support dateline crossing bounding boxes\n\tUpdated javadocs to include field limitations\n\n\n\nThe primary limitation of this field is the following:\n\nEast / West Bounding boxes that share the meridian will not be counted as intersects. This is due to the encoding of -180 and 180 mapping to Integer.MIN_VALUE Integer.MAX_VALUE, respectively and BKDWriter.writeFieldNDims operating on bytes only with StringHelper.compare. So Western Bounding Boxes that fall at -180 will not be counted as intersecting with Eastern Bounding Boxes that fall at 180 since they are encoded as two different values.\n\nI've thought about this a little bit, and would like to entertain a discussion (best done in a separate issue if felt useful) around modifying BKDWriter (and supporting IndexableField classes) so Points based fields can use custom encodings that are not necessarily byte aligned -\n as its required today. This would be an interesting feature for not just supporting range coordinate wrapping (like in the geo use case) but also supporting compressed encodings. Perhaps useful, (maybe?), for fields that naturally have sparse bit encodings? Just a thought. I'd like to solicit feedback to see if this sounds as interesting to anyone else as it does to me. "
        },
        {
            "id": "comment-16153631",
            "author": "Adrien Grand",
            "date": "2017-09-05T13:20:43+0000",
            "content": "I think these limitations are ok. The patch looks good to me overall, some nit picks:\n\n\tmaybe we should make this class final?\n\tthere seems to be an indentation issue in the newRangeQuery helper method\n\tthe test has some lines that are commented out, should we just remove them?\n\n\n\nmodifying BKDWriter (and supporting IndexableField classes) so Points based fields can use custom encodings that are not necessarily byte aligned\n\nWhat kind of encodings are you thinking about? "
        },
        {
            "id": "comment-16172238",
            "author": "ASF subversion and git services",
            "date": "2017-09-19T19:45:38+0000",
            "content": "Commit bf71650ad7d9cd95084c1a58d12caa11025c0e4f in lucene-solr's branch refs/heads/master from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bf71650 ]\n\nLUCENE-7392: Add point based LatLonBoundingBox as new RangeField Type. "
        },
        {
            "id": "comment-16172251",
            "author": "ASF subversion and git services",
            "date": "2017-09-19T19:56:51+0000",
            "content": "Commit 0dc9f4940406c8be22b69f3c93a6154d8e421c4b in lucene-solr's branch refs/heads/branch_7x from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0dc9f49 ]\n\nLUCENE-7392: Add point based LatLonBoundingBox as new RangeField Type. "
        },
        {
            "id": "comment-16198390",
            "author": "Adrien Grand",
            "date": "2017-10-10T09:06:07+0000",
            "content": "Nicholas Knize Is this issue good to resolve? "
        }
    ]
}