{
    "id": "LUCENE-7194",
    "title": "Ban Math.toRadians/toDegrees and remove all usages of it",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "The result of these methods is unreliable and changes across jvm versions: we cannot use these methods.\n\nThe following program prints 0.7722082215479366 on previous versions of java but 0.7722082215479367 on java 9 because Math.toRadians is no longer doing the same thing:\n\n\npublic class test {\n  public static void main(String args[]) throws Exception {\n    System.out.println(Math.toRadians(44.244272));\n  }\n}\n\n\n\nThis is because of https://bugs.openjdk.java.net/browse/JDK-4477961. \n\nI am not really sure its a bug, because the method says that the conversion is \"generally inexact\".",
    "attachments": {
        "LUCENE-7194.patch": "https://issues.apache.org/jira/secure/attachment/12812424/LUCENE-7194.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15231969",
            "author": "Michael McCandless",
            "date": "2016-04-08T10:16:16+0000",
            "content": "+1, we should roll our own, hopefully correctly this time  "
        },
        {
            "id": "comment-15231972",
            "author": "Robert Muir",
            "date": "2016-04-08T10:19:00+0000",
            "content": "It does seem buggy that even StrictMath shows this difference between versions. WTF is the point of StrictMath then? "
        },
        {
            "id": "comment-15231997",
            "author": "Karl Wright",
            "date": "2016-04-08T10:41:06+0000",
            "content": "This is a simple multiplication, computed using two well-known constants: pi and 180.0.   How can this possibly be inexact??\n\nNo matter: +1 for removing it, BUT if the underlying problem is in fact that they have \"adjusted\" the value of Math.PI, we will still be in trouble. "
        },
        {
            "id": "comment-15231999",
            "author": "Robert Muir",
            "date": "2016-04-08T10:42:57+0000",
            "content": "\nThis is a simple multiplication, computed using two well-known constants: pi and 180.0. How can this possibly be inexact??\n\nSee the linked openjdk issue. Looks like they changed it from division to inverse multiplication.\n\nIMO at least StrictMath should not have this optimization... "
        },
        {
            "id": "comment-15232005",
            "author": "Karl Wright",
            "date": "2016-04-08T10:48:09+0000",
            "content": "IMO at least StrictMath should not have this optimization...\n\n+1 for that. "
        },
        {
            "id": "comment-15232013",
            "author": "Dawid Weiss",
            "date": "2016-04-08T10:53:06+0000",
            "content": "StrictMath doesn't say anything about being constant in time, all it says is, basically:\nTo help ensure portability of Java programs, the definitions of some of the numeric functions in this package require that they produce the same results as certain published algorithms. [...] The Java math library is defined with respect to fdlibm version 5.3.\n\nAnd fdlibm doesn't have these conversion methods, so it's not violating its spec? \n "
        },
        {
            "id": "comment-15232015",
            "author": "Robert Muir",
            "date": "2016-04-08T10:56:27+0000",
            "content": "Then why does StrictMath.java have a separate toRadians method at all with strictfp? "
        },
        {
            "id": "comment-15232019",
            "author": "Karl Wright",
            "date": "2016-04-08T11:02:04+0000",
            "content": "Another way to look at this is that our tests really should not care.  In this view, we should be consistent in our usage of conversion function (e.g. ALWAYS use StrictMath or Math for this purpose), and fix the one test that is failing: the test of \"toString\", which probably doesn't need to be checking all the numeric values anyway. "
        },
        {
            "id": "comment-15232021",
            "author": "Dawid Weiss",
            "date": "2016-04-08T11:03:09+0000",
            "content": "That's what I'm saying \u2013 I don't know! And seriously, I think it indeed misses the point: if StrictMath does have this method and the reference (fdlibm) doesn't have it then it should at least stick to identical implementation. I would file a bug. \n\nstrictfp is another issue; in reality you won't be able to keep floating point computations exact (unless you declare everything as strictfp) because of processor-dependent truncations and roundings? I recall we did hit it once (a long time ago) when we tested on sparcs, amds and intels in parallel \u2013 we had reference results of matrix computations (in high precision) and there was some inaccuracies in tiny digits. "
        },
        {
            "id": "comment-15232024",
            "author": "Robert Muir",
            "date": "2016-04-08T11:05:38+0000",
            "content": "I know what it does, i am saying it makes no sense to have the method there at all if its result may change. "
        },
        {
            "id": "comment-15234003",
            "author": "ASF subversion and git services",
            "date": "2016-04-10T09:11:46+0000",
            "content": "Commit a4bf526a62dbf5e2c3fed6d98112c71ed33e15d6 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a4bf526 ]\n\nLUCENE-7194: Roll our own toRadians() method, and also make it less likely we'll need to restaple the toString() tests. "
        },
        {
            "id": "comment-15234008",
            "author": "ASF subversion and git services",
            "date": "2016-04-10T09:15:07+0000",
            "content": "Commit f6be813308133de06e08717309750e1f47dd73d1 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f6be813 ]\n\nLUCENE-7194: Roll our own toRadians() method, and also make it less likely we'll need to restaple the toString() tests. "
        },
        {
            "id": "comment-15234013",
            "author": "Karl Wright",
            "date": "2016-04-10T09:25:06+0000",
            "content": "+1 to rolling our own in any case.\nCommitted changes to the spatial3d module for this purpose.  Not sure where else it's used? "
        },
        {
            "id": "comment-15234148",
            "author": "Michael McCandless",
            "date": "2016-04-10T15:04:37+0000",
            "content": "Thanks Karl Wright.\n\nI think we should just add this to our forbidden API list, then see what fails (because it's using these APIs), and correct them... "
        },
        {
            "id": "comment-15341550",
            "author": "Karl Wright",
            "date": "2016-06-21T10:53:28+0000",
            "content": "Michael McCandless How do I add these to the forbidden API list? "
        },
        {
            "id": "comment-15341862",
            "author": "Michael McCandless",
            "date": "2016-06-21T14:24:03+0000",
            "content": "Karl Wright Oh, I think you just add it to lucene/tools/forbiddenApis/lucene.txt?  And then run ant precommit and you should see failures from places using these APIs... "
        },
        {
            "id": "comment-15342425",
            "author": "Karl Wright",
            "date": "2016-06-21T18:44:28+0000",
            "content": "Here's what it spits out:\n\n\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toRadians(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.geo.Rectangle (Rectangle.java:94)\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toRadians(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.geo.Rectangle (Rectangle.java:95)\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toDegrees(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.geo.Rectangle (Rectangle.java:121)\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toDegrees(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.geo.Rectangle (Rectangle.java:121)\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toDegrees(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.geo.Rectangle (Rectangle.java:121)\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toDegrees(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.geo.Rectangle (Rectangle.java:121)\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toRadians(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.geo.Rectangle (Rectangle.java:151)\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toDegrees(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.geo.Rectangle (Rectangle.java:169)\n[forbidden-apis] Forbidden method invocation: java.lang.Math#toRadians(double) [Use NIO.2 instead]\n[forbidden-apis]   in org.apache.lucene.util.SloppyMath (SloppyMath.java:212)\n[forbidden-apis] Scanned 2733 (and 585 related) class file(s) for forbidden API\ninvocations (in 2.98s), 9 error(s).\n\n "
        },
        {
            "id": "comment-15342606",
            "author": "Karl Wright",
            "date": "2016-06-21T20:31:23+0000",
            "content": "Robert Muir: Is this still needed?  In SloppyMath.java I see the following:\n\n\n  // haversin\n  // TODO: remove these for java 9, they fixed Math.toDegrees()/toRadians() to work just like this.\n  public static final double TO_RADIANS = Math.PI / 180D;\n  public static final double TO_DEGREES = 180D / Math.PI;\n\n\n\n... which leads me to wonder if Java 9 was fixed and we should instead be using Math.toDegrees()/toRadians() everywhere?  Maybe Uwe Schindler knows? "
        },
        {
            "id": "comment-15342656",
            "author": "Uwe Schindler",
            "date": "2016-06-21T20:51:51+0000",
            "content": "You should supply an error message, the one was copied from the forbids before:\n\"[Use NIO.2 instead]\" (thats simply wrong). The eror message can be appended with \"@\" after the signature.\n\nAnd then run ant precommit and you should see failures from places using these APIs...\n\nMuch faster is \"ant check-forbidden-apis\"! "
        },
        {
            "id": "comment-15343893",
            "author": "Karl Wright",
            "date": "2016-06-22T08:20:26+0000",
            "content": "Here's the patch "
        },
        {
            "id": "comment-15344171",
            "author": "ASF subversion and git services",
            "date": "2016-06-22T11:51:28+0000",
            "content": "Commit b11e48c7553daed127b1b231641d7367a09aed1b in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b11e48c ]\n\nLUCENE-7194: Ban Math.toRadians and Math.toDegrees "
        },
        {
            "id": "comment-15344373",
            "author": "ASF subversion and git services",
            "date": "2016-06-22T14:16:36+0000",
            "content": "Commit 40ca6f1d64ab8ec2e873c2a6c6815ca449b046a4 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=40ca6f1 ]\n\nLUCENE-7194: Ban Math.toRadians and Math.toDegrees "
        },
        {
            "id": "comment-15344374",
            "author": "ASF subversion and git services",
            "date": "2016-06-22T14:16:38+0000",
            "content": "Commit 388d388c990c8d9e05ec9ba9bc881fdc921e734b in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=388d388 ]\n\nLUCENE-7194: Ban Math.toRadians, Math.toDegrees "
        },
        {
            "id": "comment-15344436",
            "author": "Michael McCandless",
            "date": "2016-06-22T15:03:42+0000",
            "content": "Thank you Karl Wright! "
        }
    ]
}