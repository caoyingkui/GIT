{
    "id": "SOLR-10263",
    "title": "Different SpellcheckComponents should have their own suggestMode",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "spellchecker"
        ],
        "type": "Wish",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "As of now, common spellcheck options are applied to all the SpellCheckComponents.\nThis can create problem in the following case:-\n It may be the case that we want DirectSolrSpellChecker to ALWAYS_SUGGEST spellcheck suggestions. \nBut we may want WordBreakSpellChecker to suggest only if the token is not in the index  (for relevance or performance reasons)  (SUGGEST_WHEN_NOT_IN_INDEX) . \n\nUPDATE : Recently, we also figured out that, for WordBreakSolrSpellChecker also, both - The WordBreak and WordJoin should also have different suggestModes.\n\nWe faced this problem in our case, wherein, Most of the WordJoin cases are those where the words individually are valid tokens, but what the users are looking for is actually a  combination (wordjoin) of the two tokens. \nFor example:-\ngold mine sunglasses : Here, both gold and mine are valid tokens. But the actual product being looked for is goldmine sunglasses , where goldmine is a brand.\nIn such cases, we should recommend didYouMean:goldmine sunglasses . But this wont be possible because we had set   SUGGEST_WHEN_NOT_IN_INDEX  for WordBreakSolrSpellChecker (of which, WordJoin is a part)  . \nFor this, we should have separate suggestModes for both `wordJoin` as well as `wordBreak`. \n\nRelated changes have been done at Latest PR. : https://github.com/apache/lucene-solr/pull/218.",
    "attachments": {
        "SOLR-10263.v2.patch": "https://issues.apache.org/jira/secure/attachment/12887616/SOLR-10263.v2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-15T11:30:30+0000",
            "content": "Abhishek Kumar Singh,\n\nWhich version of Solr are we talking about here, the latest one? 6.4.x.  ",
            "author": "Amrit Sarkar",
            "id": "comment-15925948"
        },
        {
            "date": "2017-03-15T14:06:47+0000",
            "content": "Yes, This is what is happening in the latest code too. \n\nSee this,\nhttps://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/spelling/ConjunctionSolrSpellChecker.java#L120\n\nIt passes  the options , for all the SpellCheckComponents. ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-15926226"
        },
        {
            "date": "2017-03-28T15:16:57+0000",
            "content": "Raised this PR for WordBreakSolrSpellChecker.      https://github.com/apache/lucene-solr/pull/176/files ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-15945363"
        },
        {
            "date": "2017-03-28T15:24:26+0000",
            "content": "I am not sure whether it is a popular use case or not at this moment, and maybe changing the current implementation to accommodate this will make things complicated. \n\nAny suggestions on how you would like to see the configuration in solrconfig.xml?\nI can see the patch now. Overriding parameters makes sense. ",
            "author": "Amrit Sarkar",
            "id": "comment-15945380"
        },
        {
            "date": "2017-03-29T04:33:55+0000",
            "content": "Github user abhidemon commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/176\n\n    For this Issue.  https://issues.apache.org/jira/browse/SOLR-10263 ",
            "author": "ASF GitHub Bot",
            "id": "comment-15946513"
        },
        {
            "date": "2017-03-29T04:41:20+0000",
            "content": "The solrconfig.xml   of    WordBreakSolrSpellChecker   (and later, for all the components)   can be configured like this :-\n\n\n    <lst name=\"spellchecker\">\n            <str name=\"name\">spellcheckword</str>\n            <str name=\"classname\">solr.WordBreakSolrSpellChecker</str>\n            <str name=\"field\">fieldspell</str>\n            <str name=\"combineWords\">true</str>\n            <str name=\"breakWords\">true</str>\n            <int name=\"maxChanges\">10</int>\n            <int name=\"minPrefix\">0</int>\n            <str name=\"suggestMode\">SUGGEST_WHEN_NOT_IN_INDEX</str>\n    </lst>\n\n ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-15946518"
        },
        {
            "date": "2017-07-10T07:39:49+0000",
            "content": "GitHub user abhidemon opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/218\n\n    feat: Separate SuggestModes for WordBreak and WordJoin\n\n    We should be able to specify suggestModes for WordBreakSolrspellChecker, and also separately for WordBreak and WordJoin. The feature will let `WordJoin` and `WordBreak` override the suggestMode if they have been specified OR use their parents, if not set.\n\n    See the latest update on https://issues.apache.org/jira/browse/SOLR-10263 for more details.  \n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/abhidemon/lucene-solr SOLR-10263.v2\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/218.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #218\n\n\ncommit 51dd5c817687cb9117976d7e5b0ec257c9f90f74\nAuthor: abhidemon <abhishek.singh@unbxd.com>\nDate:   2017-07-10T07:37:35Z\n\n    feat: Separate SuggestModes for WordBreak and WordJoin\n\n    We should be able to specify suggestModes for WordBreakSolrspellChecker, and also separately for\n\n    WordBreak and WordJoin. The feature will let `WordJoin` and `WordBreak` override the suggestMode if\n\n    they have been specified OR use their parents, if not set.\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16079977"
        },
        {
            "date": "2017-07-10T07:44:29+0000",
            "content": "This PR enables us to configure both wordBreak and/or wordJoin optionally, to override their parent-suggestMode ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16079981"
        },
        {
            "date": "2017-07-10T07:52:59+0000",
            "content": "After PR #218 , \n\nThe solrconfig.xml   of    WordBreakSolrSpellChecker   (and later, for all the components)   can be configured like this :-\n\n\n    <lst name=\"spellchecker\">\n\t    <str name=\"name\">wordbreakspellcheck</str>\n\t    <str name=\"classname\">solr.WordBreakSolrSpellChecker</str>\n\t    <str name=\"field\">fieldspell</str>\n\t    <str name=\"combineWords\">true</str>\n\t    <str name=\"breakWords\">true</str>\n\t    <str name=\"usePhraseQFrequency\">true</str>\n\t    <int name=\"maxChanges\">5</int>\n\t    <int name=\"minPrefix\">0</int>\n\t    <str name=\"wordBreakSuggestMode\">SUGGEST_WHEN_NOT_IN_INDEX</str>\n\t    <str name=\"joinWordsSuggestMode\">SUGGEST_ALWAYS</str>\n    </lst>\n\n\n\nOR Simply as :-\n\n\n    <lst name=\"spellchecker\">\n            <str name=\"name\">spellcheckword</str>\n            <str name=\"classname\">solr.WordBreakSolrSpellChecker</str>\n            <str name=\"field\">fieldspell</str>\n            <str name=\"combineWords\">true</str>\n            <str name=\"breakWords\">true</str>\n            <int name=\"maxChanges\">5</int>\n            <int name=\"minPrefix\">0</int>\n            <str name=\"suggestMode\">SUGGEST_WHEN_NOT_IN_INDEX</str>\n    </lst>\n\n ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16079987"
        },
        {
            "date": "2017-07-10T08:06:09+0000",
            "content": "Abhishek Kumar Singh\n\nCan you put the changes as patch to the master branch on this JIRA? It will be easier to accommodate.\n\nAmrit Sarkar ",
            "author": "Amrit Sarkar",
            "id": "comment-16080001"
        },
        {
            "date": "2017-07-10T14:14:22+0000",
            "content": "The above patch (https://issues.apache.org/jira/secure/attachment/12876418/SOLR-10263.v2.patch) has the changes related to the PR :  https://github.com/apache/lucene-solr/pull/218\n ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16080375"
        },
        {
            "date": "2017-07-10T19:53:06+0000",
            "content": "Abhishek Kumar Singh , Have you tried using the two parameters, \"spellcheck.alternativeTermCount\" and \"spellcheck.maxCollationTries\" to solve your problem?  The first parameter will tell it to offer some suggestions even when a term is in the index.  The second parameter will query the suggestion combinations against the index internally, to find corrections that return results.\n\nThis way even if \"gold\" and \"mine\" are valid terms in your index, specifying \"alternativeTermCount\" will suggest up to your specified number of alternatives for each of these.  Then, by specifying \"maxCollationTries\", it will try up to your specified number of combinations until it finds valid results.\n\nUsing the existing features like this might be a better solution than to add the level of complexity to the component that you are suggesting here. ",
            "author": "James Dyer",
            "id": "comment-16080979"
        },
        {
            "date": "2017-07-11T09:03:05+0000",
            "content": "The problem with \"maxCollationTries\" is that - a collationTry  is an expensive step. So, there is only a limit to which we can increase its value - given a certain level of response time/efficiency requirement. \n\nA control on wordBreak  suggestions can give us more freedom to get the relevant suggestions in cases where we know how our queries are going to be. For example: gold mine sunglasses will even give suggestions like gold mine sun glasses  or even gold mine sung lasses and later waste our precious maxCollationTries. In this case,   SUGGEST_WHEN_NOT_IN_INDEX for wordBreak will avoid above suggestions which we already know are not required.  \n\nThis is why, We faced cases wherein different SpellCheckComponents  required different suggestModes. \nAlso, I think wordBreak and wordJoin  (within WordBreakSolrSpellCheck ) should also have different suggestMode configurations because the use cases can really vary.  (for the above usecase itself, we want gold and mine to be combine to goldmine , so wordJoin will again have SUGGEST_ALWAYS. )\n\nThis is why in our case, after applying the above patch, we had to configure DirectSolrSpellChecker to SUGGEST_ALWAYS , while only wordBreak  was configured as SUGGEST_WHEN_NOT_IN_INDEX and so that wordJoin  still had  SUGGEST_ALWAYS .  ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16081922"
        },
        {
            "date": "2017-07-11T17:51:39+0000",
            "content": "Agreed, \"maxCollationTries\" is expensive, especially if it takes in the tens of tries to find the user one or more good collations.  The worst scenario, when we spend a lot of time trying possibilities and then still come up empty handed can be frustrating.  On the other hand, spell-check should hopefully only come into play for a small % of queries.  In those cases, we hope the user is willing to wait a bit longer to both correct spelling and to give results.  This is where it can pay dividends to have a simpler query that returns quickly in any case:  in the spellcheck scenario it may have to run multiple times so a faster query could result in a much faster spell check.\n\nI am not convinced a typical solr user would know in advance \u2013 globally \u2013 whether or not a user is more likely to misspell words that happen to have the misspelling in the index when it is a word-break misspelling or otherwise.  I sincerely doubt even you can tell for sure if a user is more likely to hit on a word already in the index when they accidently combine words versus when they accidently break words.  My thinking is that real data is too varied for us to be able to set something like this in th configuration and then expect it to be optimal for everyone's query.\n\nI would recommend you look into creating a synonym list for common misspelling for the words in your corpus.  This would be a faster and more sure way to handle the cases you know exist like \"sun glasses > sunglasses\".  The spellchecker would exist as a a fallback for those cases that are less common or you do not know about. ",
            "author": "James Dyer",
            "id": "comment-16082642"
        },
        {
            "date": "2017-09-18T07:38:17+0000",
            "content": "Uploading the updated patch ",
            "author": "Abhishek Kumar Singh",
            "id": "comment-16169700"
        }
    ]
}