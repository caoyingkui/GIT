{
    "id": "SOLR-4175",
    "title": "SearchComponent chain can't contain two components of the same class and use debugQuery",
    "details": {
        "affect_versions": "4.0",
        "status": "Closed",
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "steps to reproduce the issue:\n\n1) Add two components of the same type to the components chain of the request handler\n2) start solr with assertions enabled\n3) run a query to the request handler configured in 1 with debugQuery=true\n\nThe query will throw a java.lang.AssertionError. I'll attach a test case to reproduce the issue.",
    "attachments": {
        "failure.patch": "https://issues.apache.org/jira/secure/attachment/12560641/failure.patch",
        "SOLR-4175.patch": "https://issues.apache.org/jira/secure/attachment/12560790/SOLR-4175.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13530366",
            "date": "2012-12-12T21:35:18+0000",
            "content": "Test case that reproduces the issue. The stacktrace of the exception from the testcase is:\n\njava.lang.AssertionError\n\tat __randomizedtesting.SeedInfo.seed([6728CDE529822998:8CC5D3EF92899577]:0)\n\tat org.apache.solr.util.RTimer.stop(RTimer.java:63)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:195)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:146)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1818)\n\tat org.apache.solr.util.TestHarness.query(TestHarness.java:365)\n\tat org.apache.solr.util.TestHarness.query(TestHarness.java:347)\n\tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:489)\n\tat org.apache.solr.search.TestComponentsName.testComponentsName(TestComponentsName.java:32)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:737)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:773)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:787)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n\tat org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:51)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:782)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:442)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n\tat java.lang.Thread.run(Thread.java:680)\n\n\n\n "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13531108",
            "date": "2012-12-13T15:36:42+0000",
            "content": "I'm attaching a possible fix. The SearchComponent class now uses the name defined in the solrconfig.xml (or the default component name for the default ones).\nThis will change the debugQuery output, the \"timing section\" will use those names instead of the class names, like:\n\n\n <lst name=\"timing\">\n    <double name=\"time\">2.0</double>\n    <lst name=\"prepare\">\n      <double name=\"time\">0.0</double>\n      <lst name=\"query\">\n        <double name=\"time\">0.0</double>\n      </lst>\n      <lst name=\"facet\">\n        <double name=\"time\">0.0</double>\n      </lst>\n      <lst name=\"mlt\">\n        <double name=\"time\">0.0</double>\n      </lst>\n      <lst name=\"highlight\">\n        <double name=\"time\">0.0</double>\n      </lst>\n      <lst name=\"stats\">\n        <double name=\"time\">0.0</double>\n      </lst>\n      <lst name=\"debug\">\n        <double name=\"time\">0.0</double>\n      </lst>\n...\n\n\nIt will also change the MBean names.\n\nthoughts? "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13540019",
            "date": "2012-12-27T16:28:51+0000",
            "content": "Any comments on this issue? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13540055",
            "date": "2012-12-27T17:21:31+0000",
            "content": "Tomas - looks like a good solution to me.  It's one-to-one for a component instance and its name, so this works out nicely.\n\nOne bit of test improvement could be to have MockSearchComponent write something to the response that the test picks up, something that is pulled from the config init, so that both the init params and separate instance cases are accounted for in the tests explicitly. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13540494",
            "date": "2012-12-28T15:37:21+0000",
            "content": "I followed Erik's suggestion. I also added more xpath comparisons to show how the debugQuery will be displayed now. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13540498",
            "date": "2012-12-28T15:40:19+0000",
            "content": "Sorry, the last patch is incorrect, use this one. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13540510",
            "date": "2012-12-28T16:32:47+0000",
            "content": "[trunk commit] Erik Hatcher\nhttp://svn.apache.org/viewvc?view=revision&revision=1426569\n\nSOLR-4175:  SearchComponent chain can't contain two components of the same class and use debugQuery "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13540514",
            "date": "2012-12-28T16:57:08+0000",
            "content": "Thanks Tomas!  I've applied this both to trunk and 4.x. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13540520",
            "date": "2012-12-28T17:04:53+0000",
            "content": "[branch_4x commit] Erik Hatcher\nhttp://svn.apache.org/viewvc?view=revision&revision=1426580\n\nSOLR-4175:  SearchComponent chain can't contain two components of the same class and use debugQuery "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13540578",
            "date": "2012-12-28T20:14:40+0000",
            "content": "[trunk commit] Robert Muir\nhttp://svn.apache.org/viewvc?view=revision&revision=1426614\n\nSOLR-4175: add license headers and eol-style "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13540581",
            "date": "2012-12-28T20:18:15+0000",
            "content": "[branch_4x commit] Robert Muir\nhttp://svn.apache.org/viewvc?view=revision&revision=1426615\n\nSOLR-4175: add license headers and eol-style "
        }
    ]
}