{
    "id": "SOLR-5532",
    "title": "SolrJ Content-Type validation is too strict for some webcontainers / proxies, breaks on equivilent content types",
    "details": {
        "affect_versions": "4.6",
        "status": "Closed",
        "fix_versions": [
            "4.6.1",
            "4.7",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "due to SOLR-3530, HttpSolrServer now does a string equivilence check between the \"Content-Type\" returned by the server, and a getContentTYpe() method declared by the ResponseParser .. but string equivilence is too strict, and can result in errors like this one reported by a user....\n\n\n\nI just upgraded my Solr instance and with it I also upgraded the solrj library in our custom application which sends diverse requests and queries to Solr.\n\nI use the \"ping\" method to determine whether Solr started correctly under the configured address. Since the upgrade the ping response results in an error:\n\nCause: org.apache.solr.client.solrj.impl.HttpSolrServer$RemoteSolrException: Expected content type application/xml; charset=UTF-8 but got application/xml;charset=UTF-8.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n<lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">0</int><lst name=\"params\"><str name=\"df\">searchtext</str><str name=\"echoParams\">all</str><str name=\"rows\">10</str><str name=\"echoParams\">all</str><str name=\"wt\">xml</str><str name=\"version\">2.2</str><str name=\"q\">solrpingquery</str><str name=\"distrib\">false</str></lst></lst><str name=\"status\">OK</str>\n</response>\n\n\n\nThe Solr application itself works fine.\nUsing an older version of the solrj library than solr-solrj-4.6.0.jar (e.g. solr-solrj-4.5.1.jar) in the custom application does not produce this error.\n\nThe Exception is produced in a Code block (HttpSolrServer.java, method request(...), around. line 140) which has been introduced with version 4.6.0.\n\nCode to reproduce the error:\n\ntry {\n\tHttpSolrServer solrServer = new HttpSolrServer(\"http://localhost:8080/Solr/collection\");\n\tsolrServer.setParser(new XMLResponseParser()); // this line is making all the difference\n\tsolrServer.ping();\n} catch (Exception e) {\n\te.printStackTrace();\n}\n\n\n\nA global search for \"charset=UTF-8\" on the source code of solrj indicates that other functions besides \"ping\" might be affected as well, because there are several places where \"application/xml; charset=UTF-8\" is spelled without a space after the semicolon.",
    "attachments": {
        "SOLR-5532.patch": "https://issues.apache.org/jira/secure/attachment/12617432/SOLR-5532.patch",
        "SOLR-5532-elyograg-eclipse-screenshot.png": "https://issues.apache.org/jira/secure/attachment/12617226/SOLR-5532-elyograg-eclipse-screenshot.png"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13840356",
            "date": "2013-12-05T18:12:43+0000",
            "content": "My server is not upgraded to 4.6 - it's running 4.2.1 ... with that server, your test code works fine.  I am in the process of setting up a test server running 4.6, but I don't have it yet.  Is your server also running 4.6?\n\nIf your server is 4.6, this looks like the Solr server code has gotten more strict on the content type header, but SolrJ hasn't been updated to match, and the existing unit tests didn't catch the problem.\n\nWould you be able to try the following addition to your test code, right after you create the HttpSolrServer?\n\n\nsolrServer.setRequestWriter(new BinaryRequestWriter());\n\n\n\nIf that works, it's a potential workaround for you, with the added advantage that requests sent to Solr will be more compact and therefore more efficient.\n\nAlso, just in case I have any trouble reproducing, can you include the entire Java stacktrace from your Solr server log when the problem occurs? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13840368",
            "date": "2013-12-05T18:22:00+0000",
            "content": "Got the example 4.6 server set up.  With the following code, substantially similar to yours, I do NOT get the same problem.\n\n\n\t\ttry\n\t\t{\n\t\t\tHttpSolrServer solrServer = new HttpSolrServer(\n\t\t\t\t\t\"http://localhost:8983/solr/collection1\");\n\t\t\tSolrPingResponse x = solrServer.ping();\n\t\t\tSystem.out.println(x);\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\te.printStackTrace();\n\t\t}\n\n\n\nIf I change \"collection1\" to \"collection\" (so the URL is invalid) then I do get a similar (but not exactly the same) message, but it's part of a much larger error.  Can you help me figure out what I might be doing that's different from your setup?\n\n\norg.apache.solr.client.solrj.impl.HttpSolrServer$RemoteSolrException: Expected content type application/octet-stream but got text/html;charset=ISO-8859-1. <html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"/>\n<title>Error 404 Not Found</title>\n</head>\n<body><h2>HTTP ERROR 404</h2>\n<p>Problem accessing /solr/collection/admin/ping. Reason:\n<pre>    Not Found</pre></p><hr /><i><small>Powered by Jetty://</small></i><br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n<br/>                                                \n\n</body>\n</html>\n\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:455)\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:197)\n\tat org.apache.solr.client.solrj.request.SolrPing.process(SolrPing.java:69)\n\tat org.apache.solr.client.solrj.SolrServer.ping(SolrServer.java:293)\n\tat org.elyograg.TestStuff.main(TestStuff.java:72)\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13840396",
            "date": "2013-12-05T18:44:06+0000",
            "content": "The specific error message being returned here by HttpSolrServer is from lines 438-456 (NOT 140 as initially mentioned in the bug report) ...\n\n\n      String procCt = processor.getContentType();\n      if (procCt != null) {\n        if (!contentType.equals(procCt)) {\n          // unexpected content type\n          String msg = \"Expected content type \" + procCt + \" but got \" + contentType + \".\";\n          Header encodingHeader = response.getEntity().getContentEncoding();\n          String encoding;\n          if (encodingHeader != null) {\n            encoding = encodingHeader.getValue();\n          } else {\n            encoding = \"UTF-8\"; // try UTF-8\n          }\n          try {\n            msg = msg + \" \" + IOUtils.toString(respBody, encoding);\n          } catch (IOException e) {\n            throw new RemoteSolrException(httpStatus, \"Could not parse response with encoding \" + encoding, e);\n          }\n          RemoteSolrException e = new RemoteSolrException(httpStatus, msg, null);\n          throw e;\n        }\n      }\n\n\n\n...the intent of this code is to ensure that the Content-Type of the response it has received from the server is something that the ResponseParser it's configured to use is capable of handling.\n\nThe code as written definitely seems sketchy, because it's trying to do an exact string equality match on the Content-Type, even though (as in this example)...\napplication/xml; charset=UTF-8 (with space) \n...should be considered equivalent to...\napplication/xml;charset=UTF-8 (no space) \n... nothing in the spec requries whitespcae there, or makes them semantically un-equivilent.\n\nhaving said that however: i'm still not clear on how to actually reproduce this.\n\nAs far as i can tell from a quick check, the XML response writer (on the server) has always included a space in it's Content-Type, and that doesn't seem to have changed in 4.6, and the solrj expected XML Content-Type (on the client parser) has always expected a space in the Content-Type, and that doesn't seem to have changed in 4.6.\n\nCan you pleas show us..\n\n\n\tthe full source code of a test client that demonstrates this problem for you?\n\tthe full stack trace produced by your test code\n\tthe command line used to run your test case (with full classpath showing jar versions used)\n\tthe response you get from \"curl -v http://localhost:8983/solr/admin/system\"\n\tthe response you get from \"curl -v http://localhost:8983/solr/collection1/admin/ping\"\n\n\n\nA global search for \"charset=UTF-8\" on the source code of solrj indicates that other functions besides \"ping\" might be affected as well, because there are several places where \"application/xml; charset=UTF-8\" is spelled without a space after the semicolon.\n\nCan you please be specific? I just did the same search of the 4.6 codebase and i can't find anything like what you are describing. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13840406",
            "date": "2013-12-05T18:53:41+0000",
            "content": "Chris Hostetter (Unused): In any case we should fix the parser to accept the content type:\n\n\tcase insensitive (MIME types are defined to be case insensitive= -> this is partly a bug in Solr already, I noticed this in a code review\n\tstrip of the charset from the MIME type before comparing. ContentStreamBase has methods for this (to extract the charset from a ContentType).\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13840444",
            "date": "2013-12-05T19:19:22+0000",
            "content": "In any case we should fix the parser to accept the content type: ...\n\nAgreed \u2013 what you and i are talking about now is definitely a bug, I'm just not convinced i understand how Jakob ran into the specific error he's reportring \u2013 which scares me and makes me worried that there is some subtle second bug i'm not seeing.\n\nFWIW: My personal preference would be to refactor the APIs and abstract the content-type checking out HttpSolrServer, so that instead of calling ResponseParser.getContentType() and doing anything with the value, it calls a new ResponseParser.canParseContentType(String) ... put the logic you are taking about into the XMLResponseParser.canParseContentType, and add some basic backcompat support into ResponseParser.canParseContentType that does a simple case/whitespace insensitive comparison.\n "
        },
        {
            "author": "Jakob Furrer",
            "id": "comment-13840468",
            "date": "2013-12-05T19:36:25+0000",
            "content": "Thanks for looking into this issue so fast.\nAnd my apologies for being very sloppy in the bug description.\nDue to time constraints, I did not test the code provided above in a standalone setting.\nI am aware that this is a big no-no. Mea culpa.\n\nI only now figured out that setting the XMLResponseParser triggers the Exception\n\nsolrServer.setParser(new XMLResponseParser());\n\n\nSetting the BinaryRequestWriter or not does not influence the result for me.\n\nSide-Question:\nThe XMLResponseParser is set in my custom application since very long. I cannot recall when or why set that specific parser.\nCould anyone give my some information whether, when or why this parser should (not) be set?\n\nAs for\n\nA global search for \"charset=UTF-8\" on the source code of solrj indicates that other functions besides \"ping\" might be affected as well, because there are several places where \"application/xml; charset=UTF-8\" is spelled without a space after the semicolon.\nI am not familiar with the Solr sourcecode at all. I saw these search results, where \"; charset=utf-8\" appears 62 times and \";charset=utf-8\" appears 12 times.\nFrom that I conclude that there is an inconsistency how to spell this encoding type within this library.\n\nSuchen nach: charset=UTF-8\nlucene\\common-build.xml(2241): html.append('<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\\n')\nlucene\\analysis\\common\\src\\java\\org\\apache\\lucene\\analysis\\cjk\\package.html(20): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\nlucene\\analysis\\common\\src\\java\\org\\apache\\lucene\\analysis\\cn\\package.html(20): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\nlucene\\analysis\\common\\src\\test\\org\\apache\\lucene\\analysis\\charfilter\\htmlStripReaderTest.html(4): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\nlucene\\analysis\\common\\src\\test\\org\\apache\\lucene\\analysis\\core\\LuceneResourcesWikiPage.html(4): <meta http-equiv=\"Content-Type\" content=\"text/html;charset=utf-8\">\nlucene\\analysis\\icu\\src\\java\\overview.html(19): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\nlucene\\analysis\\morfologik\\src\\java\\overview.html(20): <meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\nlucene\\analysis\\morfologik\\src\\java\\org\\apache\\lucene\\analysis\\morfologik\\package.html(20): <meta http-equiv=\"Content-Type\" content=\"text/html;charset=UTF-8\" />\nlucene\\analysis\\smartcn\\src\\java\\org\\apache\\lucene\\analysis\\cn\\smart\\package.html(20): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\nlucene\\analysis\\smartcn\\src\\java\\org\\apache\\lucene\\analysis\\cn\\smart\\hhmm\\package.html(19): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\nlucene\\analysis\\stempel\\src\\java\\overview.html(20): <meta content=\"text/html; charset=UTF-8\" http-equiv=\"content-type\">\nlucene\\benchmark\\src\\test\\org\\apache\\lucene\\benchmark\\byTask\\feeds\\TestHtmlParser.java(76): \"<meta http-equiv=\\\"Content-Type\\\" content=\\\"text/html;charset=UTF-8\\\" />\" +\nlucene\\benchmark\\src\\test\\org\\apache\\lucene\\benchmark\\byTask\\feeds\\TestHtmlParser.java(84): assertEquals(\"text/html;charset=UTF-8\", tags.get(\"content-type\"));\nlucene\\demo\\src\\java\\overview.html(19): <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\">\nlucene\\queryparser\\docs\\xml\\LuceneContribQuery.dtd.entities.html(3): <meta http-equiv='CONTENT-TYPE' content='text/html; charset=UTF-8' />\nlucene\\queryparser\\docs\\xml\\LuceneContribQuery.dtd.html(3): <meta http-equiv='CONTENT-TYPE' content='text/html; charset=UTF-8' />\nlucene\\queryparser\\docs\\xml\\LuceneContribQuery.dtd.org.html(3): <meta http-equiv='CONTENT-TYPE' content='text/html; charset=UTF-8' />\nlucene\\queryparser\\docs\\xml\\LuceneCoreQuery.dtd.entities.html(3): <meta http-equiv='CONTENT-TYPE' content='text/html; charset=UTF-8' />\nlucene\\queryparser\\docs\\xml\\LuceneCoreQuery.dtd.html(3): <meta http-equiv='CONTENT-TYPE' content='text/html; charset=UTF-8' />\nlucene\\queryparser\\docs\\xml\\LuceneCoreQuery.dtd.org.html(3): <meta http-equiv='CONTENT-TYPE' content='text/html; charset=UTF-8' />\nlucene\\site\\changes\\changes2html.pl(258): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\nsolr\\CHANGES.txt(7359): have a valid contentType: curl -H 'Content-type:text/xml; charset=utf-8' \nsolr\\CHANGES.txt(7451): content.  Using the contentType: \"text/xml; charset=utf-8\" will force\nsolr\\contrib\\clustering\\src\\test-files\\clustering\\solr\\collection1\\conf\\solrconfig.xml(421): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\contrib\\dataimporthandler\\src\\test-files\\dih\\solr\\collection1\\conf\\contentstream-solrconfig.xml(296): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\contrib\\dataimporthandler\\src\\test-files\\dih\\solr\\collection1\\conf\\dataimport-nodatasource-solrconfig.xml(294): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\contrib\\dataimporthandler\\src\\test-files\\dih\\solr\\collection1\\conf\\dataimport-solrconfig.xml(295): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\contrib\\dataimporthandler-extras\\src\\test-files\\dihextras\\solr\\collection1\\conf\\dataimport-solrconfig.xml(292): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\contrib\\uima\\src\\test-files\\uima\\uima-tokenizers-solrconfig.xml(639): now requires: -H 'Content-type:text/xml; charset=utf-8' The response\nsolr\\contrib\\uima\\src\\test-files\\uima\\solr\\collection1\\conf\\solrconfig.xml(640): now requires: -H 'Content-type:text/xml; charset=utf-8' The response\nsolr\\contrib\\velocity\\src\\java\\org\\apache\\solr\\response\\VelocityResponseWriter.java(174): return request.getParams().get(\"v.contentType\", \"text/html;charset=UTF-8\");\nsolr\\core\\src\\java\\org\\apache\\solr\\response\\JSONResponseWriter.java(44): static String CONTENT_TYPE_JSON_UTF8 = \"application/json; charset=UTF-8\";\nsolr\\core\\src\\java\\org\\apache\\solr\\response\\PHPResponseWriter.java(27): static String CONTENT_TYPE_PHP_UTF8=\"text/x-php;charset=UTF-8\";\nsolr\\core\\src\\java\\org\\apache\\solr\\response\\PHPSerializedResponseWriter.java(42): static String CONTENT_TYPE_PHP_UTF8=\"text/x-php-serialized;charset=UTF-8\";\nsolr\\core\\src\\java\\org\\apache\\solr\\response\\QueryResponseWriter.java(46): public static String CONTENT_TYPE_XML_UTF8=\"application/xml; charset=UTF-8\";\nsolr\\core\\src\\java\\org\\apache\\solr\\response\\QueryResponseWriter.java(47): public static String CONTENT_TYPE_TEXT_UTF8=\"text/plain; charset=UTF-8\";\nsolr\\core\\src\\java\\org\\apache\\solr\\response\\RubyResponseWriter.java(26): static String CONTENT_TYPE_RUBY_UTF8=\"text/x-ruby;charset=UTF-8\";\nsolr\\core\\src\\java\\org\\apache\\solr\\servlet\\SolrRequestParsers.java(638): if( idx > 0 ) { // remove the charset definition \"; charset=utf-8\"\nsolr\\core\\src\\test\\org\\apache\\solr\\analysis\\htmlStripReaderTest.html(4): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\nsolr\\core\\src\\test\\org\\apache\\solr\\servlet\\SolrRequestParserTest.java(216): \"application/x-www-form-urlencoded; charset=utf-8\",\nsolr\\core\\src\\test-files\\solr\\collection1\\conf\\solrconfig-implicitproperties.xml(77): <str name=\"content-type\">text/plain; charset=UTF-8</str>\nsolr\\docs\\changes\\Changes.html(31): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\"/>\nsolr\\docs\\changes\\Changes.html(7435): have a valid contentType: curl -H 'Content-type:text/xml; charset=utf-8'\nsolr\\docs\\changes\\Changes.html(7527): content.  Using the contentType: \"text/xml; charset=utf-8\" will force\nsolr\\example\\example-DIH\\solr\\db\\conf\\solrconfig.xml(407): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\example\\example-DIH\\solr\\db\\conf\\xslt\\example.xsl(27): <xsl:output media-type=\"text/html; charset=UTF-8\" encoding=\"UTF-8\"/> \nsolr\\example\\example-DIH\\solr\\db\\conf\\xslt\\luke.xsl(38): <meta http-equiv=\"Content-Type\" content=\"application/xhtml+xml; charset=UTF-8\"/>\nsolr\\example\\example-DIH\\solr\\mail\\conf\\solrconfig.xml(565): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\example\\example-DIH\\solr\\rss\\conf\\solrconfig.xml(406): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\example\\example-DIH\\solr\\solr\\conf\\solrconfig.xml(405): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\example\\example-DIH\\solr\\tika\\conf\\solrconfig.xml(326): the body. For example, curl now requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\example\\example-schemaless\\solr\\collection1\\conf\\solrconfig.xml(999): requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\example\\example-schemaless\\solr\\collection1\\conf\\solrconfig.xml(1710): <str name=\"content-type\">text/plain; charset=UTF-8</str>\nsolr\\example\\exampledocs\\test_utf8.sh(41): curl $URL/select --data-binary 'q=h%C3%A9llo&echoParams=explicit&wt=python' -H 'Content-type:application/x-www-form-urlencoded; charset=UTF-8' 2> /dev/null | grep 'h\\\\u00e9llo' > /dev/null 2>&1\nsolr\\example\\exampledocs\\test_utf8.sh(71): curl $URL/select --data-binary \"q=$URL_UTF8&echoParams=explicit&wt=python\"  -H 'Content-type:application/x-www-form-urlencoded; charset=UTF-8' 2> /dev/null | grep $EXPECTED > /dev/null 2>&1\nsolr\\example\\solr\\collection1\\conf\\solrconfig.xml(1006): requires: -H 'Content-type:text/xml; charset=utf-8'\nsolr\\example\\solr\\collection1\\conf\\solrconfig.xml(1751): <str name=\"content-type\">text/plain; charset=UTF-8</str>\nsolr\\example\\solr\\collection1\\conf\\velocity\\head.vm(7): <meta http-equiv=\"content-type\" content=\"text/html; charset=UTF-8\"/>\nsolr\\scripts\\abc(95): rs=`curl ${curl_url} -s -H 'Content-type:text/xml; charset=utf-8' -d \"<commit/>\"`\nsolr\\scripts\\abo(94): rs=`curl ${curl_url} -s -H 'Content-type:text/xml; charset=utf-8' -d \"<optimize/>\"`\nsolr\\scripts\\commit(87): rs=`curl ${curl_url} -s -H 'Content-type:text/xml; charset=utf-8' -d \"<commit/>\"`\nsolr\\scripts\\optimize(87): rs=`curl ${curl_url} -s -H 'Content-type:text/xml; charset=utf-8' -d \"<optimize/>\"`\nsolr\\site\\html\\tutorial.html(20): <META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\nsolr\\solrj\\src\\java\\org\\apache\\solr\\client\\solrj\\impl\\HttpSolrServer.java(273): \"application/x-www-form-urlencoded; charset=UTF-8\");\nsolr\\solrj\\src\\java\\org\\apache\\solr\\client\\solrj\\impl\\XMLResponseParser.java(50): public static final String XML_CONTENT_TYPE = \"application/xml; charset=UTF-8\";\nsolr\\solrj\\src\\java\\org\\apache\\solr\\client\\solrj\\util\\ClientUtils.java(54): public static final String TEXT_XML = \"application/xml; charset=UTF-8\";  \nsolr\\solrj\\src\\test\\org\\apache\\solr\\client\\solrj\\impl\\BasicHttpSolrServerTest.java(253): assertEquals(\"application/x-www-form-urlencoded; charset=UTF-8\", DebugServlet.headers.get(\"Content-Type\"));\nsolr\\solrj\\src\\test\\org\\apache\\solr\\client\\solrj\\impl\\BasicHttpSolrServerTest.java(289): assertEquals(\"application/x-www-form-urlencoded; charset=UTF-8\", DebugServlet.headers.get(\"Content-Type\"));\nsolr\\solrj\\src\\test\\org\\apache\\solr\\client\\solrj\\impl\\BasicHttpSolrServerTest.java(358): assertEquals(\"application/xml; charset=UTF-8\", DebugServlet.headers.get(\"Content-Type\"));\nsolr\\solrj\\src\\test\\org\\apache\\solr\\client\\solrj\\impl\\BasicHttpSolrServerTest.java(374): assertEquals(\"application/xml; charset=UTF-8\", DebugServlet.headers.get(\"Content-Type\"));\nsolr\\test-framework\\src\\java\\org\\apache\\solr\\util\\RestTestHarness.java(149): connection.setRequestProperty(\"Content-Type\", \"application/json; charset=utf-8\");\nsolr\\webapp\\web\\js\\scripts\\dashboard.js(57): core_basepath + '/admin/file/?file=admin-extra.menu-top.html&contentType=text/html;charset=utf-8',\nsolr\\webapp\\web\\js\\scripts\\dashboard.js(67): core_basepath + '/admin/file/?file=admin-extra.menu-bottom.html&contentType=text/html;charset=utf-8',\nsolr\\webapp\\web\\js\\scripts\\file.js(29): + '&contentType=text/xml;charset=utf-8';\nEs wurden 74 Vorkommen in 62 Datei(en) gefunden.\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13840501",
            "date": "2013-12-05T20:01:02+0000",
            "content": "\nSide-Question:\nThe XMLResponseParser is set in my custom application since very long. I cannot recall when or why set that specific parser.\nCould anyone give my some information whether, when or why this parser should (not) be set?\n\nThe XML parser typically is used for compatibility.\n\nHttpSolrServer defaults to the binary response parser and the XML request writer.  The javabin format (used by the binary writer/parser) changed a few years back.  Solr/SolrJ Version 1.4.1 used version 1, but the next version that was released (3.1.0) used version 2.  They are completely incompatible with each other, so when you need to have communication between incompatible versions, you need to change it to use XML.\n\nI tried setting my parser to a new XMLResponseParser, but I still can't duplicate your symptom.  I will attach a screenshot showing my code in eclipse along with the eclipse build path. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13841295",
            "date": "2013-12-06T14:23:02+0000",
            "content": "There were 2 more issues opened about the same, this time not with PingRequestHandler. The problem seems to be in HttpSolrServer's parsing of ContentType in general. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13841379",
            "date": "2013-12-06T16:13:01+0000",
            "content": "As far as i can tell from a quick check, the XML response writer (on the server) has always included a space in it's Content-Type, and that doesn't seem to have changed in 4.6, and the solrj expected XML Content-Type (on the client parser) has always expected a space in the Content-Type, and that doesn't seem to have changed in 4.6.\n\nOk, here's what i reallize now that i overlooked when i skimmed the old code yesterday:\n\n\n\tthe content type as written by the server has not changed\n\tthe content type as written by the server, and the content type as parsed by the client are in fact 100% identical (same variable)\n\twhat's new in 4.6 is the check to verify that the ContentType's are equal (In my previous skim i totally overlooked that the code throwing this error is new in 4.6, added as part of SOLR-3530\n\n\n\nThat still, however, doesn't explain the bug report, and why elyograg and i can't reproduce, and why the solrj xml tests aren't reproducing it \u2013 specifically: and what's happening to the space character to cause this exception.\n\nMy best guess is that people encountering this problem aren't using the provided jetty server, and the server they are using (or some proxy in between their client and the server) is re-writing the the header slightly.  the fact that the initial problem report here refers to port \"8080\" smells like i may be on to something.\n\nEither way: we should fix how the Content-Type comparison is done.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13841382",
            "date": "2013-12-06T16:21:41+0000",
            "content": "clarify summary and description, not specific to ping. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13841424",
            "date": "2013-12-06T16:57:20+0000",
            "content": "This is why using Jetty is the best choice  We actually test it.\n\nI think we should make the comparison less strict right away, this can go out in 4.6.1.\n\nBeyond that, Hossman has some interesting ideas for improving the API's, but unless someone bangs that out right away, I think the straightforward fix is the right initial thing to do. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13841425",
            "date": "2013-12-06T16:58:15+0000",
            "content": "the content type as written by the server, and the content type as parsed by the client are in fact 100% identical (same variable)\n\nI was careful to ensure that. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13841485",
            "date": "2013-12-06T18:05:32+0000",
            "content": "My best guess is that people encountering this problem aren't using the provided jetty server, and the server they are using (or some proxy in between their client and the server) is re-writing the the header slightly. the fact that the initial problem report here refers to port \"8080\" smells like i may be on to something.\n\nWhen thinking about this, I know for example that Oracle iPlanet webserver does this! And iPlanet uses Catilina internally which is the servlet engine of Tomcat... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13841502",
            "date": "2013-12-06T18:18:18+0000",
            "content": "A first whack. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13841513",
            "date": "2013-12-06T18:25:05+0000",
            "content": "Validated this with the Catilina based PANGAEA server (Oracle iPlanet webserver):\n\n\nVEGA:~ > curl -D - \"http://ws.pangaea.de/oai/?verb=Identify\"\nHTTP/1.1 200 OK\nServer: PANGAEA/1.0\nDate: Fri, 06 Dec 2013 18:17:59 GMT\nContent-type: text/xml;charset=UTF-8\nTransfer-encoding: chunked\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?><OAI-PMH xmlns=\"http://www.openarchives.org/OAI/2.0/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/ http://www.openarchives.org/OAI/2.0/OAI-PMH.xsd\">\n...\n\n\n\nAnd here is how the servlets sets Content-Type:\n\n\nresp.setContentType(\"text/xml; charset=\"+charset);\n\n\n\nIt looks like every Tomcat does this. The reason for this is: The Content-Type header is generally not passed unparsed to the output, the servlet container (Catilina) does some extra parsing, to detect the charset, so when you call the broken getWriter() that the writer has correct charset. Most webservers also do header normalization afterwards (they combine multiple headers into one and also remove whitespace).\n\nThe correct way to handle this is:\n\n\tUse ContentStreamBase to extract the MIME-Type and the charset from the full Content-Type string (MIME-Type != Content-Type, that's the fault here). We have the methods already available and they should also be available to SolrJ.\n\tCompare charset and MIME type with equalsIgnoreCase. But: charset does not need to be compared. The XML parser should do this afterwards, not need to enforce a specific charset in SolrJ. It should only enforce the MIME-Type!\n\n "
        },
        {
            "author": "Jakob Furrer",
            "id": "comment-13841514",
            "date": "2013-12-06T18:25:31+0000",
            "content": "I can confirm, that the problem I described above does not occur when I use Jetty to run the stock solr that is included in Solr 4.6.\nHowever, I see this problem when solr is run in Tomcat.\nIn my custom application that accesses solrI see that\na) the ping fails only when XMLResponseParser is set on the HttpSolrServer\nb) adding document also fails with the same error message as above (even if XMLResponseParser is not set on the HttpSolrServer) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13841517",
            "date": "2013-12-06T18:26:47+0000",
            "content": "Mark: Patch looks ok. Exactly as I wanted to have it  Thanks! "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13841552",
            "date": "2013-12-06T19:01:04+0000",
            "content": "Commit 1548659 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1548659 ]\n\nSOLR-5532: SolrJ Content-Type validation is too strict for some webcontainers / proxies. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13841555",
            "date": "2013-12-06T19:02:16+0000",
            "content": "Commit 1548661 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1548661 ]\n\nSOLR-5532: SolrJ Content-Type validation is too strict for some webcontainers / proxies. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13841562",
            "date": "2013-12-06T19:05:25+0000",
            "content": "As there is a bugfix release planned: I think this one should also go in 4.6.1. Looks like many people are affected. One of my customers called today, too (using Tomcat). "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858148",
            "date": "2013-12-28T22:35:49+0000",
            "content": "Commit 1553949 from Mark Miller in branch 'dev/branches/lucene_solr_4_6'\n[ https://svn.apache.org/r1553949 ]\n\nSOLR-5532: SolrJ Content-Type validation is too strict for some webcontainers / proxies. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858149",
            "date": "2013-12-28T22:36:50+0000",
            "content": "Commit 1553950 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1553950 ]\n\nSOLR-5532: Move CHANGES entry to 4.6.1 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858150",
            "date": "2013-12-28T22:37:44+0000",
            "content": "Commit 1553951 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1553951 ]\n\nSOLR-5532: Move CHANGES entry to 4.6.1 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13862655",
            "date": "2014-01-05T21:02:13+0000",
            "content": "Thanks all! "
        },
        {
            "author": "Magnus L\u00f6vgren",
            "id": "comment-14188249",
            "date": "2014-10-29T11:19:44+0000",
            "content": "I've upgraded from 4.4 to 4.10.1 and have been struggling somewhat with my code that was affected by this change. Some observations that might be useful for others too:\n\nThe patch relies on the \"org.apache.http.entity.ContentType.parse\" method. It fails when parsing an empty string. That's fine (empty string should probably not be seen as a valid type anyway). The caveat is that an empty string is actually used as the \"fallback\" contentType if the response has no Content-Type header! This would be the typical case if the response is a 401 (typically has no Content-Type).\n\n\n\tIn prior versions a 401 response threw a SolrException with code() 401\n\tNow a SolrServerException  is thrown (caused by a org.apache.http.ParseException). Hard to determine if it was due to bad credentials (401).\n\n\n\nTo restore previous behaviour, you'd presumably add the HttpStatus.SC_UNAUTHORIZED case to the switch and then throw a RemoteSolrException (with code 401). In other words - fail early for 401 response (there's no content to parse anyway) "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14188262",
            "date": "2014-10-29T11:48:06+0000",
            "content": "I ran into this same issue in a review for Cloudera Search before I went on vacation a couple weeks ago. Technically, it was a back compat break. Please file a JIRA issue and we can address it.  "
        },
        {
            "author": "Magnus L\u00f6vgren",
            "id": "comment-14188365",
            "date": "2014-10-29T14:08:16+0000",
            "content": "The 401 issue is now added as SOLR-6669 "
        }
    ]
}