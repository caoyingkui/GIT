{
    "id": "SOLR-486",
    "title": "Support binary formats for QueryresponseWriter",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "clients - java",
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "QueryResponse writer only allows text data to be written.\n\nSo it is not possible to implement a binary protocol . Create another interface which has a method \nwrite(OutputStream os, SolrQueryRequest request, SolrQueryResponse response)",
    "attachments": {
        "solr-486.patch": "https://issues.apache.org/jira/secure/attachment/12383667/solr-486.patch",
        "optimizemap.patch": "https://issues.apache.org/jira/secure/attachment/12391797/optimizemap.patch",
        "SOLR-486-iterator.patch": "https://issues.apache.org/jira/secure/attachment/12386456/SOLR-486-iterator.patch",
        "SOLR-486.patch": "https://issues.apache.org/jira/secure/attachment/12376469/SOLR-486.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12572024",
            "date": "2008-02-25T08:16:54+0000",
            "content": "Without breaking the existing stuff we can add another interface\n\nBinaryQueryResponse extends QueryResponseWriter{\npublic void write(OutputStream out, SolrQueryRequest request,SolrQueryResponse response) throws IOException;\n\nand in the SolrDispatchFilter add the following linesQueryResponseWriter responseWriter = core.getQueryResponseWriter(solrReq);\n\nif (responseWriter instanceof BinaryQueryResponse ) \n{\n               BinaryQueryResponse binaryResp = (Object)\nresponseWriter;\nbinaryResp.write(response.getOutputStream(), solrReq, solrRsp);\n   }\n else {\n      responseWriter.write(response.getWriter(), solrReq, solrRsp);\n} "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12572351",
            "date": "2008-02-26T04:04:06+0000",
            "content": "This patch can add support for binary formats.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12579897",
            "date": "2008-03-18T15:37:01+0000",
            "content": "No changes . Just synchronizing with other code changes.\n\nThis is a  very useful option for users who wish to implement a binary format to improve the performance. (I plan to contribute one as soon as this is committed)\n\nCurrently the java clients go though the xml response format which can eat up some time in unmarshalling . It can be quite significant if the document size is large (take the case of facet requests)\n\nI have an xml reponse which took around 30ms for unmarshalling . Binary format would have taken less than 5 ms. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12579943",
            "date": "2008-03-18T17:38:18+0000",
            "content": "This patch is small enough, perhaps just combine it with the patch that implements a specific binary format. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12579977",
            "date": "2008-03-18T18:17:24+0000",
            "content": "I can do that.\nI have a java class which can serialize/deserialize a NamedList using\nwhich I used to send response and deserialize it back\nI can post it as well\n--Noble\n\n\n\n\n\n\u2013 \n--Noble Paul "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12580007",
            "date": "2008-03-18T19:05:03+0000",
            "content": "Great! If we can get it to handle everything that the current XML handler can handle, then we could use it by default for distributed search. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12580026",
            "date": "2008-03-18T19:42:59+0000",
            "content": "I accidentally committed this in conjunction with another patch.\nI think I'll just leave it committed though, since it looks fine.\nWe can continue to use this JIRA issue for the actual binary protocol implementation though. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12584644",
            "date": "2008-04-02T15:43:55+0000",
            "content": "This contains a very simple binary format implementation using DataOutputStream/DataInputStream\n\nThe class that implements this functionality is NamedListCodec which mustbe used on both end of the pipe\n\nIt can marshal/unmarshal a NamedList to/from a stream.\n\nIt supports all the primitives and List/Map/NamedList/SolrDocument/SolrDocumentList\n\nThere is a class BinaryResponseWriter implements BinaryQueryResponseWriter\n\nwhich converts the lucene DocList to SolrDocumentList on demand\n\nA class BinaryResponseParser extends ResponseParser \n\nis also added to solrj\nwhich can be used with the CommonsHttpSolrServer "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12586286",
            "date": "2008-04-07T09:09:40+0000",
            "content": "Added a version byte in the beginning. \nTypes, Byte and Short were missing "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12588122",
            "date": "2008-04-11T21:09:38+0000",
            "content": "Revised patch that switches distributed search to use the binary format.\nCurrently fails the distributed search tests though. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12588294",
            "date": "2008-04-12T18:04:01+0000",
            "content": "There were bugs in the previous patch and it was not writing the SolrDocumentList properly. TestDistributedSearch was failing. \nWith this patch those are fixed.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12588402",
            "date": "2008-04-13T16:35:02+0000",
            "content": "I'm hacking on this now... I like how you separated the dependency on lucene-specific stuff via the resolver.  The problem is that we lose streaming ability for doc lists... if someone requests 1000 documents or whatever, everything is blown up in memory which could cause an OOM.  I'm adding the ability for the resolver to call back to the codec... not as nicely separated, but better results. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12588512",
            "date": "2008-04-14T08:43:50+0000",
            "content": "performance numbers \n=====================\nbin vs. xml read performance : ~3 times faster\nbin vs. xml write performance : ~2.5 times faster\ndatasize : 35% less\n======================\nThe test: \nThe same operation is performed 100 times and an average is taken. Before the execution, a warmup run is performed.\n\nThe output of a faceted query is taken out (xml).The size of the xml is 15.7KB. It is loaded into memory and unmarshalled using XMLResponseParser . Then the same object is written to xml using XMLWriter \n\nThe same dataobject is marshalled to byte[](binary) using NamedListCodec. The datasize is 10.47KB . Then it is unmarshalled using NamedListCodec \n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12588823",
            "date": "2008-04-14T22:17:27+0000",
            "content": "Yep, those are about the numbers I'm seeing for text-heavy documents + faceting on 2 text fields and 1 integer field + highlighting (response was only generated once, but continually reused).  I think I've got some good improvements in the queue that I can attach soon.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12588875",
            "date": "2008-04-15T01:57:52+0000",
            "content": "OK, latest version attached.\n\nThe bad:\n\n\tmore code, a more complex codec, harder to debug with a hex editor\n\n\n\nThe good:\n\n\t2/3 the size of the previous binary codec (50% improvement and 1/3 the size of XML)\n\tcertain common types like named list, array, and string pack a size right in the tag byte\n\tvariable length int and long values.. saves lots of space for facet counts, etc (first 5\n     bits of vint are packed in the tag byte)\n\n\n\n\n\tperformance results: (9 times faster than xml, encoding + decoding)\n  writer xml, size=6885, encodeRate=627, decodeRate=883\n  writer json, size=3556, encodeRate=3084, decodeRate=N/A\n  writer javabin-v1, size=3170\n  writer javabin-current, size=2153, encodeRate=6095, decodeRate=8695 \n\n\n\n\n\tperformance changes:\n\tFastInputStream, FastOutputStream: unsynchronized buffered streams\n\ttoObject() changes to sortable numerics - bypass string and go straight to numeric type\n\ttons of other little things, including everything that was used to decrease the size\n\n\n\n\n\tstring values can now be > 64K (Java writeUTF is limited to that size)\n\n\n\n\n\tmemory use changes: only \"explode\" one doc at a time in a doclist\n\n\n\n\n\ttesting changes: more thorough random testing... (good thing too - found a long encoding bug)\n\n\n\nNoble: I started from your second-to-last patch (we overlapped in the Document fixes...) I diffed your patches and I believe I saw everything.\n\nTODO: preserve SimpleOrderedMap vs NamedList?\nTODO: make SolrJ default?\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12588900",
            "date": "2008-04-15T05:10:06+0000",
            "content": "The changes look good , infact very good. it is highly optimized. \n\nYou already incorporated the Document changes which i added \n\nThe writeUTF bug was a very critical one which I noticed after cutting the patch.Anyway you fixed it.\n\nI guess one test is failing in TestDistributedSearch\nunit.framework.AssertionFailedError: .response.maxScore:4321.0!=null\n       at org.apache.solr.TestDistributedSearch.compareResponses(TestDistributedSearch.java:416)\n       .....\n\nneed to take a look\n\n\nI vote vote for preserving SimpleOrderedMap.(anyway there is are two reserved types one can be taken up)\n\nMakee sense to use this in SolrJ . But there are people using SolrJ with Solr1.2 and older versions of Solr1.3 in production. We must take care of that in the code. \n\n\nsend wt=javabin\nread the response header, if the content type is application/octet-steram use BinaryResponseParser or use XMLResponseparser\n\n "
        },
        {
            "author": "Ian Holsman",
            "id": "comment-12588904",
            "date": "2008-04-15T05:19:31+0000",
            "content": "i'm a bit clueless here.\n\nyou mention that it is 9 times faster. how big a component is encoding/decoding in the general scheme of things? (ie compared to actually getting the results)\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12588909",
            "date": "2008-04-15T05:29:08+0000",
            "content": "If the response not served from  cached there is some extra processing , in which case the share of marshalling/unmarshalling is lower. In cases where the response is given out of a cache it is  probably the only CPU intensive activity.\n\nOverall performance also involves the network latency . It is harder to count that because it is a very subjective number  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12589031",
            "date": "2008-04-15T11:17:36+0000",
            "content": "Yonik: it would be nice the change the interface ObjectResolver as follows\n\npublic static interface ObjectResolver{\n    public Object resolve(Object o, NamedListCodec codec) throws IOException;\n}\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12589074",
            "date": "2008-04-15T13:33:50+0000",
            "content": "Ian: you can sort of figure out what the total overhead would be given your max query rate.\nFor example, XML had an encode rate (for this particular test) of 627 messages per second (on my 3GHz P4).\nIf you wanted 100qps, XML encoding would be taking up 16% (100/627)\n\nNote that the overhead is particularly important for distributed search, given the number of messages that must be sent+received, and also the limited network bandwidth it must be done in. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12589164",
            "date": "2008-04-15T17:46:50+0000",
            "content": "OK, latest changes.\n\n\tSimpleOrderedMap type preserved (and I fixed some other recent code that accidentally used NamedList instead of SimpleOrderedMap).\n\tchanged resolver interface to pass codec\n\n\n\n> I guess one test is failing in TestDistributedSearch\n\nAre you still seeing this? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12589224",
            "date": "2008-04-15T20:33:53+0000",
            "content": "Committed.  Thanks Noble! "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12602740",
            "date": "2008-06-05T18:29:56+0000",
            "content": "Should we make this the default parser for CommonsHttpSolrServer?\nI think so... "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12602741",
            "date": "2008-06-05T18:33:24+0000",
            "content": "+1 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12602918",
            "date": "2008-06-06T05:22:57+0000",
            "content": "+1\nIt is OK to make it default. \nBut we will have to document properly that users with Solr1.2 must explicitly use XMLResponseParser or they will see failure.\n\nor we will have to modify the CommonsHttpSolrServer to fallback to XMLResponseParser if content type header is text/xml. (This is more elegant solution) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12603135",
            "date": "2008-06-06T18:49:46+0000",
            "content": "one test failed in distributed search results when I changed the the default format to binary\n\n\n<testcase classname=\"org.apache.solr.TestDistributedSearch\" name=\"testDistribSearch\" time=\"5.406\">\n    <failure message=\".response.maxScore:4321.0!=null\" type=\"junit.framework.AssertionFailedError\">junit.framework.AssertionFailedError: .response.maxScore:4321.0!=null\n\tat org.apache.solr.TestDistributedSearch.compareResponses(TestDistributedSearch.java:416)\n\tat org.apache.solr.TestDistributedSearch.query(TestDistributedSearch.java:192)\n\tat org.apache.solr.TestDistributedSearch.doTest(TestDistributedSearch.java:456)\n\tat org.apache.solr.TestDistributedSearch.testDistribSearch(TestDistributedSearch.java:427)\n</failure>\n  </testcase>\n\n\n\nI could not figure out the reason "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12603136",
            "date": "2008-06-06T18:50:52+0000",
            "content": "or we will have to modify the CommonsHttpSolrServer to fallback to XMLResponseParser if content type header is text/xml. (This is more elegant solution)\n\nI don't see how this would help.  If the ResponseParser for CommonsHttpSolrServer is the binary one, it will send the parameter: wt=javabin \u2013 in a 1.2 setup, that should give an error.\n\nI think documenting that to use this for 1.2 you should set the XMLResponseParser in the constructor is good enough. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12603281",
            "date": "2008-06-07T02:47:54+0000",
            "content": "I don't see how this would help.  If the ResponseParser for CommonsHttpSolrServer is the binary one, it will send the parameter: wt=javabin \u2013 in a 1.2 setup, that should give an error.\nif the wt= javabin is absent the server deafults to 'xml' so the response format will be xml for Solr 1.2.  However ,it is important that we make the default format to binary before the 1.3 release. \n\nDocumeting this behavior is good enough. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12603475",
            "date": "2008-06-09T05:46:19+0000",
            "content": "I debugged through the problems \n\nyonik: NamedlistCodec is agnostic of the request params. So wherever it has to write SolrDocumentList or SolrDocument it writes down whatever is available.\n\nCases where the maxScore is not asked for and the value is present in SolrDocumentList  it is writtten down.\n\nMay be we should ignore it  if 'maxScore' is available without being asked for\n\n'id' are also written down in the same fashion.\n\nShould it be handed over to BinaryResponseWriter to write the values so that the context is available? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12603480",
            "date": "2008-06-09T06:46:33+0000",
            "content": "changes required to make binary format default in solrJ  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12605126",
            "date": "2008-06-15T04:12:13+0000",
            "content": " If we take a look at the data that is written down by NamedListCodec there are a lot of \"names\" which are repeated.  If we could avoid the repetitions we can achieve better optimization. \nCan we have another type EXTERN_STRING \nThe NamedListCodec maintains a Map<String,Integer>  of EXTERN_STRING vs index as it is written out. When the same string is written it checks up in the List whether it already has a reference.\n\nWhile decoding all the EXTERN_STRING values are copied into a List <String>. When an EXTERN_STRING with an index comes it is copied from the List.\n\nNamedListCodec.java\n  private int stringsCount  =  0;\n  private Map<String,Integer> stringsMap;\n  private List<String > stringsList;\n  public void writeExternString(String s) throws IOException {\n    if(s == null) {\n      writeTag(NULL) ;\n      return;\n    }\n    Integer idx = stringsMap == null ? null : stringsMap.get(s);\n    if(idx == null) idx =0;\n    writeTag(EXTERN_STRING,idx);\n    if(idx == 0){\n      writeStr(s);\n      if(stringsMap == null) stringsMap = new HashMap<String, Integer>();\n      stringsMap.put(s,++stringsCount);\n    }\n\n  }\n  public String  readExternString(FastInputStream fis) throws IOException {\n    int idx = readSize(fis);\n    if (idx != 0) {// idx != 0 is the index of the extern string\n      return stringsList.get(idx-1);\n    } else {// idx == 0 means it has a string value\n      String s = (String) readVal(fis);\n      if(stringsList == null ) stringsList = new ArrayList<String>();\n      stringsList.add(s);\n      return s;\n    }\n  }\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12605210",
            "date": "2008-06-16T07:09:58+0000",
            "content": "This include changes for making Binary format the default for SolrJ and the changes for optimized write of Field names in Documents. So , for a response  with 5 fields and 10 records only 5 names are written instead of 50. there is an overhead of an extra byte per unique string (total 5 bytes in this case)  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12605306",
            "date": "2008-06-16T14:48:57+0000",
            "content": "Thanks Noble, this looks pretty good.\n\nI had previously considered caching strings via some kind of sliding window... keep track of the last 100 or so string values written under some certain length, and then if you see a string again in that window, write a reference (an index that says how many values ago it was seen).\n\nFor Solr responses in general, it seems like the main duplication will be in field names (which you have taken care of).  The only other duplication I can think of would be the \"id\" field values (used as a key in other maps such as highlighting), and any duplication that is custom to the collection (such as string values for a type field, etc).\n\nThoughts?  I'd be happy to commit this version, or give you time to try out an alternative if you think it might be worth it (but I don't currently have time myself to implement the alternative). "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12605329",
            "date": "2008-06-16T16:01:23+0000",
            "content": "Another  level of efficiency can be brought in by preloading the string table with well known strings like responseHeader , QTime etc . That did not look very elegant to me.  \n\nThe sliding window approach is also good . But we do not have too many repeated strings unless we use highlighting etc . \n\nI guess this can go into trunk and give it enough time to 'settle' before the release. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12605601",
            "date": "2008-06-17T13:38:22+0000",
            "content": "OK, I just committed the latest changes. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12605629",
            "date": "2008-06-17T15:00:26+0000",
            "content": "These two constructors are inconsistent\nCommonsHttpSolrServer.java\npublic CommonsHttpSolrServer(URL baseURL) \n  {\n    this(baseURL, null, new BinaryResponseParser());\n  }\n\n  public CommonsHttpSolrServer(URL baseURL, HttpClient client){\n    this(baseURL, client, new XMLResponseParser());\n  }\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12605648",
            "date": "2008-06-17T16:30:08+0000",
            "content": "Fixed (committed) the constructor inconsistency. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12614954",
            "date": "2008-07-19T06:58:59+0000",
            "content": "Iterator was being treated like an array which is not optimal\n\nOn a different note .should we use writeExternString() to write all names in (NamedList, Map) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12615036",
            "date": "2008-07-19T18:57:25+0000",
            "content": "a better one. \n\n(I guess the approach is better even for the other collection types also. ) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12615054",
            "date": "2008-07-19T22:06:41+0000",
            "content": "So if I understand the reasoning behind the \"iterator\" type, it doesn't have a length up-front and instead has a terminator.... the idea being that you don't have to iterate over the entire list and buffer it, just to figure out what the length is, right?\n\nThat's a good idea - but do we actually use any iterator or Iterable objects?\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12615067",
            "date": "2008-07-20T06:38:49+0000",
            "content": "That's a good idea - but do we actually use any iterator or Iterable objects?\n\nWe do not have it now . But NamedListCodec has a public method called writeIterator() . If we leave it like that somebody may actually use it. Iterators are used to stream objects one by one and the current method implementation does not allow it. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12615217",
            "date": "2008-07-21T11:41:49+0000",
            "content": "name in namedlist written as extern string "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617894",
            "date": "2008-07-29T18:20:26+0000",
            "content": "Yonik, can we commit Noble's latest patch? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12617905",
            "date": "2008-07-29T18:55:14+0000",
            "content": "Just because an Iterator was used for writing a value does not mean that it should be reconstituted on the other side as an Iterator.  It seems like the type should still be an array, but that if a length isn't available then there should be an alternate way to serialize. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12617907",
            "date": "2008-07-29T19:03:11+0000",
            "content": "I'm working on a fix. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12617919",
            "date": "2008-07-29T19:41:55+0000",
            "content": "OK, I committed efficient Iterator/Iterable support.  They return lists when unserialized. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12638202",
            "date": "2008-10-09T06:49:39+0000",
            "content": "Just the way NamedList keys can be externalized, Map keys can also be externalized.And this is backward compatible.\n\nMaps are not used very commonly in SOLR. but SOLR-561 uses maps for master-slave communication\n "
        }
    ]
}