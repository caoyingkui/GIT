{
    "id": "SOLR-12414",
    "title": "FunctionScoreQuery no longer displays debug output",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "7.3,                                            7.3.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I have two documents:\n\n{\"text\":\"some text\", \"lang\":\"cn\"}\n{\"text\":\"more text\", \"lang\":\"en\"}\n\n\n\nAnd the following query, a simple edismax with a boost on lang:en:\n\nhttp://localhost:8983/solr/test/select?wt=xml&q=text&defType=edismax&qf=text&debug=true&boost=if(exists(query($bqlang)),2,1)&bqlang=lang:en\n\n\n\nThe parsedQuery is now slightly different because of it being wrapped in a FunctionScoreQuery. The problem is the explain for the document, which is:\n\n\n0.3971361 = product of:\n  1.0 = boost\n  0.3971361 = boost(if(exists(query(lang:en,def=0.0)),const(2),const(1)))\n\n\n\nWhich is now unreadable for complicated queries with many clauses. It should resemble the output of 7.2, which was:\n\n\n0.36464313 = boost(text:text,if(exists(query(lang:en,def=0.0)),const(2),const(1))), product of:\n  0.18232156 = weight(text:text in 0) [SchemaSimilarity], result of:\n    0.18232156 = score(doc=0,freq=1.0 = termFreq=1.0\n), product of:\n      0.18232156 = idf, computed as log(1 + (docCount - docFreq + 0.5) / (docFreq + 0.5)) from:\n        2.0 = docFreq\n        2.0 = docCount\n      1.0 = tfNorm, computed as (freq * (k1 + 1)) / (freq + k1 * (1 - b + b * fieldLength / avgFieldLength)) from:\n        1.0 = termFreq=1.0\n        1.2 = parameter k1\n        0.75 = parameter b\n        2.0 = avgFieldLength\n        2.0 = fieldLength\n  2.0 = if(exists(query(lang:en,def=0.0)=0.6931472),const(2),const(1))\n\n\n\nThis bug was introduced in Solr/Lucene 7.3.\n\nMailing list reference: http://lucene.472066.n3.nabble.com/Solr-7-3-FunctionScoreQuery-no-longer-displays-debug-output-td4389093.html",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-29T21:55:59+0000",
            "content": "Markus Jelsma I've noticed this too. Thanks for reporting. Being a fellow boost user have you noticed any performance regression after the upgrade? ie SOLR-12407 ",
            "author": "Will Currie",
            "id": "comment-16494340"
        },
        {
            "date": "2018-05-29T22:16:21+0000",
            "content": "No, in 7.x we only got poor performance with Point* fields, which could be related to your recent posts i've quickly read.\n\nWe upgraded all our low latency collections and our event log processing collection to 7.3. Our main text search collection is still on 7.2, due to this bug, and a memory leak we suffer on 7.3 on that collection - which is visible in production, but i have been unable to reproduce in a controlled environment for weeks $%$#*##@@%%!!.\n\nThe main text search collection is the only using BoostQuery (or FunctionScoreQuery on 7.3) and with 7.2 and Trie* fields has no performance issues. ",
            "author": "Markus Jelsma",
            "id": "comment-16494367"
        },
        {
            "date": "2018-06-13T14:33:47+0000",
            "content": "CC Alan Woodward maybe this is a Lucene issue related to LUCENE-8099? ",
            "author": "David Smiley",
            "id": "comment-16511217"
        },
        {
            "date": "2018-06-13T15:47:13+0000",
            "content": "Yes, I think FunctionScoreQuery.MultiplicativeBoostValuesSource needs to override the default explain output. ",
            "author": "Alan Woodward",
            "id": "comment-16511321"
        },
        {
            "date": "2018-06-14T08:03:48+0000",
            "content": "I opened LUCENE-8357 ",
            "author": "Alan Woodward",
            "id": "comment-16512130"
        },
        {
            "date": "2018-06-14T13:00:01+0000",
            "content": "Resolved by LUCENE-8357 ",
            "author": "Alan Woodward",
            "id": "comment-16512436"
        }
    ]
}