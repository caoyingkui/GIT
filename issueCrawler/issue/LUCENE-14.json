{
    "id": "LUCENE-14",
    "title": "QueryParser not handling TokenMgrError",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Hi,\n\nWith lucene-1.2-rc3, when a perform a search for \"*\", a TokenMgrError is thrown \n(see below). As a workaround, I started catching \norg.apache.lucene.queryParser.TokenMgrError in my application but I believe the \ncorrect solution is to change QueryParser.jj to start catching TokenMgrError \nand throwing a ParseException instead (just don't know the best place to do \nit \n\nBest regards,\n\n--Daniel\n\norg.apache.lucene.queryParser.TokenMgrError: Lexical error at line 1, column \n11.  Encountered: <EOF> after : \"\"\n\tat org.apache.lucene.queryParser.QueryParserTokenManager.getNextToken\n(Unknown Source)\n\tat org.apache.lucene.queryParser.QueryParser.jj_ntk(Unknown Source)\n\tat org.apache.lucene.queryParser.QueryParser.Clause(Unknown Source)\n\tat org.apache.lucene.queryParser.QueryParser.Query(Unknown Source)\n\tat org.apache.lucene.queryParser.QueryParser.parse(Unknown Source)\n\tat org.apache.lucene.queryParser.QueryParser.parse(Unknown Source)\n\tat com.weblib.search.SearchServlet.doGet(Unknown Source)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:740)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:853)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter\n(ApplicationFilterChain.java:247)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter\n(ApplicationFilterChain.java:193)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke\n(StandardWrapperValve.java:243)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContextValve.invoke\n(StandardContextValve.java:201)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.valves.CertificatesValve.invoke\n(CertificatesValve.java:246)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardContext.invoke\n(StandardContext.java:2344)\n\tat org.apache.catalina.core.StandardHostValve.invoke\n(StandardHostValve.java:164)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.valves.ErrorDispatcherValve.invoke\n(ErrorDispatcherValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke\n(ErrorReportValve.java:170)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.valves.AccessLogValve.invoke\n(AccessLogValve.java:462)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:564)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.core.StandardEngineValve.invoke\n(StandardEngineValve.java:163)\n\tat org.apache.catalina.core.StandardPipeline.invokeNext\n(StandardPipeline.java:566)\n\tat org.apache.catalina.core.StandardPipeline.invoke\n(StandardPipeline.java:472)\n\tat org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:943)\n\tat org.apache.catalina.connector.http.HttpProcessor.process\n(HttpProcessor.java:1011)\n\tat org.apache.catalina.connector.http.HttpProcessor.run\n(HttpProcessor.java:1106)\n\tat java.lang.Thread.run(Thread.java:539)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2002-02-08T05:01:17+0000",
            "content": "I don't think this is a bug. Leading wildcards are not allowed. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12320999"
        },
        {
            "date": "2002-02-08T10:53:52+0000",
            "content": "I agree that leading wildcards are not allowed but the ParseQuery contract \nstates that the parse() method throws ParseException. It doesn't say anything \nabout a TokenMgrError. That's why I've suggested catching TokenMngErr and \nthrowing a ParseException. Anyway, since my application is catching \nTokenMgrError I don't have any problem with that. It was more like a suggestion \nthan a bug report.\n\nRegards,\n\n--Daniel ",
            "author": "Daniel Calvo",
            "id": "comment-12321000"
        },
        {
            "date": "2002-05-08T01:18:45+0000",
            "content": "Fixed by Brian. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321001"
        }
    ]
}