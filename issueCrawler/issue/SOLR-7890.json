{
    "id": "SOLR-7890",
    "title": "By default require admin rights to access /security.json in ZK",
    "details": {
        "components": [
            "security"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Perhaps VMParamsAllAndReadonlyDigestZkACLProvider should by default require admin access for read/write of /security.json, and other sensitive paths. Today this is left to the user to implement.\n\nAlso, perhaps factor out the already-known sensitive paths into a separate class, so that various ACLProvider implementations can get a list of paths that should be admin-only, read-only etc from one central place. Then 3rd party impls pulling ZK creds from elsewhere will still do the right thing in the future if we introduce other sensitive Znodes...",
    "attachments": {
        "SOLR-7890.patch": "https://issues.apache.org/jira/secure/attachment/12751719/SOLR-7890.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-09T22:33:56+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Protecting /security.json from client users does not really solve anything as long as Admin UI shows all ZK content to all authenticated users. I see two options to solve this\n1) Short-term we disable showing of security.json via Admin UI entirely\n2) Long-term after Admin UI is password protected (SOLR-7896), hide the sensitive nodes depending on who is logged in.\n\nWhat do you think? ",
            "id": "comment-14679387"
        },
        {
            "date": "2015-08-21T13:04:26+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "First patch with tests that succeed. It requires the \"solr backend\" credentials for ZK in order to show content in the ZK tree browser for the protected nodes (configurable).\n\nIf a non-backed user tries to access, the node will be seen but *** ZNODE DATA PROTECTED *** will be displayed in place of the content. ",
            "id": "comment-14706716"
        },
        {
            "date": "2015-08-24T08:50:39+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Here is how to use the feature:\n\n\tConfigure solr.xml to use VMParamsAllAndReadonlyDigestZkACLProvider (won't work using VM params due to SOLR-7909)\n\tStart Solr first time with -DzkDigestUsername=admin, -DzkDigestPassword=admin, -DzkDigestReadonlyUsername=client, -DzkDigestReadonlyPassword=client\n\tTo protect other znodes than the default /security.json, pass VM param -DzkProtectedPaths=/live_nodes;/overseer;/foo.....\n\tCreate /security.json in zk using admin credentials\n\tUsing client credentials, attempt to read /security.json using zkcli.sh getfile - will fail, i.e. it is not only read-only, but totally hidden\n\tStart Solr\n\tAttempt to read content of /security.json through Solr Admin UI, e.g. http://localhost:8983/solr/zookeeper?path=/security.json - you will see *** ZNODE DATA PROTECTED *** (since Solr currently always accesses ZK using admin creds, we simply intercept the REST API logic instead)\n\n\n\nPer Steffensen and/or Mark Miller, please take a look at the patch and give feedback. ",
            "id": "comment-14708977"
        },
        {
            "date": "2015-08-25T08:26:02+0000",
            "author": "Per Steffensen",
            "content": "In general, looks good!\n\nLike the JavaDoc you added to VMParamsAllAndReadonlyDigestZkACLProvider\n\nRemember update documentation on cwiki, if you find appropriate.\n\nMaybe ZkZnodeProtection should be closer connected to VMParamsAllAndReadonlyDigestZkACLProvider (e.g. inner class). It is only when you actively decide to use VMParamsAllAndReadonlyDigestZkACLProvider as your ACL-provider that ZkZnodeProtection is used. Default is still DefaultZkACLProvider which does not take ZkZnodeProtection into consideration. When ZkZnodeProtection is a separate standalone class, you might be surprised that it is actually only used when you actively pick VMParamsAllAndReadonlyDigestZkACLProvider.\n\nI believe a few versions of Solr have already been released including SOLR-4580. Therefore you need to think about if Solr behaves appropriate when upgrading to a release including SOLR-7890. Lets say you have a Solr (version before SOLR-7890) installation where you have turned on VMParamsAllAndReadonlyDigestZkACLProvider, so that all your znodes are ACL'ed with all/admin/admin and read-only/client/client.\n\n\tIf you do nothing, but read the release-notes including SOLR-7890 description, you might expect that the ACL's of security.json (already exists in ZK when you start up your new Solr) is automatically changed to only have ACL all/admin/admin (and not read-only/client/client anymore). That will not happen.\n\tSame problem if you upgrade to the new Solr and provide an explicit -DzkProtectedPaths including znodes that already exist\nThere is a consistency issue here, that we at least need to be explicit about. You will not end up with the \"expected\" ACL's on protected-paths if those znodes already exist when you upgrade to an SOLR-7890 Solr. This problem also existed before SOLR-7890, but only if you changed your ACL-provider implementation, and in that case you have a better chance of guessing the issue as an administrator of the system. So I think this problem becomes more urgent to document/solve as we introduce SOLR-7890.\nSame kind of problem will occur, if we in a later release add to the default-list VMParamsAllAndReadonlyDigestZkACLProvider.DEFAULT_PROTECTED_PATHS\n\n\n\nI do know if we should just document this \"behavior\", or make a solution. In case we want to make a solution, we might want to have some code that can run through the entire znode-structure and ensure that the ACL's are as they are supposed to be according to current code and configuration. Then run that code when Solr nodes start and/or as part of upgrading Solr-versions.\n\nSorry, that I do not have time for more than this quick comment. ",
            "id": "comment-14710861"
        },
        {
            "date": "2015-08-25T10:23:07+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks for your review Per! You bring valid points to the table.\n\nMaybe ZkZnodeProtection should be closer connected to VMParamsAllAndReadonlyDigestZkACLProvider (e.g. inner class). \nI intentionally put it as a standalone class with a public API, to have a zkACLProvider-independent way of knowing if a znode should be protected or not, see use in ZookeeperInfoServlet. The intention was that future and 3rd party ACL Providers should update ZkZnodeProtection, but the concept of a boolean protected/not-protected may be a false assumption for more complex, fine-grained ACL providers, where it all depends on the logged in user. I'm inclined to move the class as you propose.\n\nZookeeperInfoServlet's usage is also temporarily. The day we get proper login (SOLR-7896) in place, we can require the security-edit role in order to show /security.json in the zk tree view.\n\nTherefore you need to think about if Solr behaves appropriate when upgrading to a release including SOLR-7890.\nTrue. If Solr somehow could detect if zkProtectedPaths have changed (in existing installs it would be empty), then we could trigger a full walk-through of the zk tree and update ACLs according to the new setting. Or perhaps good enough is to add a -cmd refresh-acls command to zkcli.sh and document it in CHANGES and refguide. ",
            "id": "comment-14711049"
        },
        {
            "date": "2015-10-12T13:46:03+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Happy to get more input on this approach to securing security.json ",
            "id": "comment-14953130"
        }
    ]
}