{
    "id": "SOLR-700",
    "title": "NumberFormatTransformer should have configurable locales",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "NumberFormatTransformer uses a NumberFormatter which relies on the system locale. This makes it impossible to use NumberFormatTransformer with data whose locale does not match the system locale.\n\nTestNumberFormatTransformer fails on some locales for similar reasons because the grouping symbol differs in different locales.\n\nThis issue adds a locale attribute for NumberFormatTransformer which allows the user to specify the locale which should be used for formatting. The locale must be specified as land-country e.g. en-US\n\n\n<field column=\"myNumber\" formatStyle=\"number\" locale=\"de-DE\" />",
    "attachments": {
        "schema.DateField-locale.patch.txt": "https://issues.apache.org/jira/secure/attachment/12388226/schema.DateField-locale.patch.txt",
        "handler.dataimport.TestNumberFormatTransformer-locale.patch.txt": "https://issues.apache.org/jira/secure/attachment/12388225/handler.dataimport.TestNumberFormatTransformer-locale.patch.txt",
        "SOLR-700.patch": "https://issues.apache.org/jira/secure/attachment/12388254/SOLR-700.patch",
        "handler.dataimport.NumberFormatTransformer-locale.patch..txt": "https://issues.apache.org/jira/secure/attachment/12388228/handler.dataimport.NumberFormatTransformer-locale.patch..txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Stefan Oestreicher",
            "id": "comment-12622529",
            "date": "2008-08-14T12:17:08+0000",
            "content": "based on Shalins suggestion to add an attribute for the locale I prepared another patch implementing those changes. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12622530",
            "date": "2008-08-14T12:31:04+0000",
            "content": "Thanks Stefan.\n\nI was thinking about having a locale attribute on each field element in data-config.xml. We should modify the NumberFormatTransformer#transformRow method to read each field's locale attribute. Every field's attributes are exposed as a map, so we should have:\n\n// Each locale must be of format lang:country e.g. en-US\nString locale = fld.get(\"locale\");\n// Create a locale object based on  language and country and pass it to the process method\n\n\n\nThat way locale will be configurable on a per-field basis and no EntityProcessor would need to be modified. "
        },
        {
            "author": "Stefan Oestreicher",
            "id": "comment-12622531",
            "date": "2008-08-14T12:50:09+0000",
            "content": "I see, that's certainly more flexible. I modified the patch. "
        },
        {
            "author": "Stefan Oestreicher",
            "id": "comment-12622534",
            "date": "2008-08-14T12:54:50+0000",
            "content": "minor update using the LOCALE constant instead of literal String. "
        },
        {
            "author": "Stefan Oestreicher",
            "id": "comment-12622539",
            "date": "2008-08-14T13:01:42+0000",
            "content": "setting the locale to the default locale just to have it changed afterwards if the parameter exists is not very nice I guess, so I changed that as well.\n\nFurthermore the user should probably be notified if he supplies an invalid locale, but I'm unsure how to proceed in this case, so I leave this for now as it is. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12622561",
            "date": "2008-08-14T14:18:13+0000",
            "content": "This is great, thanks Stefan!\n\nIMO, one JIRA issue should deal with one task. Do you mind opening another issue for the DateField and LegacyDateField bug and attach it's patch there? I shall commit your NumberFormatTransformer enhancement patch, edit this issue's description and update the wiki docs. "
        },
        {
            "author": "Stefan Oestreicher",
            "id": "comment-12622564",
            "date": "2008-08-14T14:27:17+0000",
            "content": "done: SOLR-701. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12622596",
            "date": "2008-08-14T16:22:19+0000",
            "content": "A new patch (SOLR-700.patch) based on Stefan's work with the following changes:\n\n\tChanged the locale parsing code to use pre-compiled regex.\n\tThrow an exception if an invalid value (which does not match the regex) is specified. Interestingly, the java.util.Locale class's docs do not say anything about invalid language or countries.\n\tModified TestNumberFormatTransformer to demonstrate the fix and enhancement.\n\n\n\nI will commit this shortly. "
        },
        {
            "author": "Stefan Oestreicher",
            "id": "comment-12622603",
            "date": "2008-08-14T16:48:30+0000",
            "content": "Nice. I also stumbled upon the fact that the java docs don't say anything about invalid locales. I quickly tested that and interestingly the DateFormatSymbols instance returned \".\" as decimal and \",\" as grouping separator. I would've expected the default locale (which is de-AT in my case) to be used but obviously it did not. In any case the getISO3Country method of the Locale class (among others) throws an exception if it's invoked on an invalid locale. Maybe it would be best to check all available locales explicitly instead of relying on the regex, possibly by constructing a static HashMap of them?! "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12622650",
            "date": "2008-08-14T19:16:46+0000",
            "content": "In any case the getISO3Country method of the Locale class (among others) throws an exception if it's invoked on an invalid locale. Maybe it would be best to check all available locales explicitly instead of relying on the regex, possibly by constructing a static HashMap of them?!\n\nWe don't need to be paranoid about this because if such a Locale is used for parsing, the NumberFormat#getInstance will throw a MissingResourceException for the lack of corresponding resource bundle.\n\nReading through the docs, another area I'm becoming concerned about is partial parsing of the string.  Pehaps we should use ParsePosition and verify that the whole string was actually used. See the section on validation at http://www.ibm.com/developerworks/java/library/j-numberformat/ "
        },
        {
            "author": "Stefan Oestreicher",
            "id": "comment-12622709",
            "date": "2008-08-14T21:24:18+0000",
            "content": "We don't need to be paranoid about this [...]\n\nOk.\n\nReading through the docs, another area I'm becoming concerned about is partial parsing of the string\n\nI see. Interestingly this behaviour of accepting invalid strings seems to only apply to the generic formatter. I wrote some tests and one of them uses a percent formatter (I also tested currency) and that throws a ParseException.\nFixing that seems to be even easier than shown in the example  I already have a patch ready but I guess I should open another issue for this (seems pretty seperate to me)? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12622711",
            "date": "2008-08-14T21:29:17+0000",
            "content": "Fixing that seems to be even easier than shown in the example  I already have a patch ready but I guess I should open another issue for this (seems pretty seperate to me)?\nBy all means, go ahead \n\nI will commit this one now. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12622839",
            "date": "2008-08-15T08:49:59+0000",
            "content": "Committed revision 686176.\n\nThanks Stefan! "
        }
    ]
}