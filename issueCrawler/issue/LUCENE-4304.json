{
    "id": "LUCENE-4304",
    "title": "Remove PayloadProcessProvider",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Now that we have pluggable codecs (well, PostingsFormat), an app should use a custom PostingsFormat if it really must change payloads while merging.\n\nAlternatively, use a FilteredIndexReader to modify anything during addIndexes (eg the facets use case, modifying payloads).\n\nSince this capability can be handled by existing more-generic functions I don't see why we need to keep PPP around in core.  PPP is also fragile because an app generally has no visibility on when a merge commits so it can't know if the payloads it retrieves are pre or post PPP.\n\nI think merging shouldn't change postings as a side-effect (by default, anyway, since a custom PF can of course override merge and do whatever it wants).",
    "attachments": {
        "LUCENE-4304.patch": "https://issues.apache.org/jira/secure/attachment/12540759/LUCENE-4304.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-13T18:09:39+0000",
            "content": "+1 - This class horrified me while refactoring IndexReaders beginning of the year! I already patched it to better fit in here, but FilterAtomicReader or a custom codec is the way to go.\n\nI think merging shouldn't change postings as a side-effect (by default, anyway, since a custom PF can of course override merge and do whatever it wants).\n\nIf you really want to do this, use a FilterAtomicReader and rewrite payloads while doing IW.addIndexes(FilterAtomicReader...) ",
            "author": "Uwe Schindler",
            "id": "comment-13433378"
        },
        {
            "date": "2012-08-13T18:31:09+0000",
            "content": "The facet module comes with an example code for merging a taxonomy index (followed by IW.addIndexes(Dir)). It'd be good if in the process of removing PPP we can still keep the example, only implemented with a FilterAtomicReader. I think FAR is better than Codec because it doesn't require you to open an IW with that Codec set, rather you can just IW.addIndexes(IndexReader). ",
            "author": "Shai Erera",
            "id": "comment-13433389"
        },
        {
            "date": "2012-08-13T19:36:39+0000",
            "content": "+1 for a FilterReader for the facet module. I was looking at this and I think it would be more efficient and simpler.\n ",
            "author": "Robert Muir",
            "id": "comment-13433455"
        },
        {
            "date": "2012-08-13T21:20:51+0000",
            "content": "here's a prototype patch: needs docs but all tests pass. ",
            "author": "Robert Muir",
            "id": "comment-13433561"
        },
        {
            "date": "2012-08-13T21:29:31+0000",
            "content": "Wow that was fast!\n\nPatch look great. ",
            "author": "Michael McCandless",
            "id": "comment-13433572"
        },
        {
            "date": "2012-08-13T21:32:32+0000",
            "content": "Hi,\n\nI reviewed the FiterAtomicReader, looks much better now.\n\nMinor improvment:\n\n+    DirectoryReader reader = DirectoryReader.open(srcIndexDir);\n+    ArrayList<AtomicReader> subReaders = new ArrayList<AtomicReader>();\n+    for (AtomicReader sub : reader.getSequentialSubReaders()) {\n+      subReaders.add(new OrdinalMappingAtomicReader(sub, ordinalMap, params));\n+    }\n\n\n\nI would use leaves(), although the DirectoryReader subs are atomic, but it would make the whole thing more universal useable (see also MultiPassIndexSplitter and PKIndexSplitter, which are similar). Also the size of leaves() or getSeqReaders() is known before, so you can directly use new AtomicReader[leaves().size()], so no copy/grow needed. ",
            "author": "Uwe Schindler",
            "id": "comment-13433573"
        },
        {
            "date": "2012-08-13T21:36:40+0000",
            "content": "I would use leaves(), although the DirectoryReader subs are atomic\n\nI say this because I want to make getSeqSubReaders abstract protected in CompositeReader, so less work  And yes, your sugar API will come, but a few chars more dont hurt here.... ",
            "author": "Uwe Schindler",
            "id": "comment-13433579"
        },
        {
            "date": "2012-08-13T21:41:49+0000",
            "content": "yes its my silent protest against getTopLevelContext()  ",
            "author": "Robert Muir",
            "id": "comment-13433584"
        },
        {
            "date": "2012-08-13T21:56:46+0000",
            "content": "Can you fix the predefined size and remove ArrayList and replace by AtomicReader[]? ",
            "author": "Uwe Schindler",
            "id": "comment-13433616"
        },
        {
            "date": "2012-08-14T02:39:50+0000",
            "content": "Updated patch:\n\n\tadded javadocs/code example like PPP had\n\tpass divisor=-1 to the reader we open in TaxonomyMergeUtils\n\tuse IR.leaves() in the example/TaxonomyMergeUtils\n\n ",
            "author": "Robert Muir",
            "id": "comment-13433840"
        },
        {
            "date": "2012-08-14T06:35:19+0000",
            "content": "Patch looks good. One minor comment \u2013 OrdinalMappingAtomicReader javadocs refer to LuceneTaxonomyWriter, which is now DirectoryTaxonomyWriter (I guess it's a copy-paste error from FacetPPP).\n\n+1 to commit.\n ",
            "author": "Shai Erera",
            "id": "comment-13433942"
        },
        {
            "date": "2012-08-14T07:06:26+0000",
            "content": "+1 to commit. Can we also add a MIGRATE.txt documentation section? ",
            "author": "Uwe Schindler",
            "id": "comment-13433949"
        },
        {
            "date": "2012-08-14T11:14:23+0000",
            "content": "I think MIGRATE.txt is overkill here. This was a really expert API directly on IndexWriter (not even in IWConfig) ",
            "author": "Robert Muir",
            "id": "comment-13434053"
        },
        {
            "date": "2013-05-10T10:34:40+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654288"
        }
    ]
}