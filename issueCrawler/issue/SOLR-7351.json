{
    "id": "SOLR-7351",
    "title": "MoreLikeThis component doesn't work with dates",
    "details": {
        "components": [
            "MoreLikeThis"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Critical"
    },
    "description": "A simple query on an index which has a TrieDate (at least this is my date type)\n\n<dynamicField name=\"*_dt\"  type=\"date\"    indexed=\"true\"  stored=\"true\" />\n...\n<fieldType name=\"date\" class=\"solr.TrieDateField\" precisionStep=\"0\" positionIncrementGap=\"0\"/>\n\n\n\nQuery for:\nhttp://localhost:8983/solr/tj13/select?q=testDate_dt%3A%221948-09-28T22%3A00%3A00Z%22&wt=json&indent=true&mlt=true&mlt.fl=testDate_dt\n\nresults in:\n\nERROR - 2015-04-06 08:36:52.059; org.apache.solr.common.SolrException; org.apache.solr.common.SolrException: Invalid Date String:'-670816800000'\n        at org.apache.solr.schema.TrieDateField.parseMath(TrieDateField.java:150)\n        at org.apache.solr.schema.TrieField.readableToIndexed(TrieField.java:436)\n        at org.apache.solr.schema.TrieField.readableToIndexed(TrieField.java:414)\n        at org.apache.solr.schema.TrieField.toInternal(TrieField.java:449)\n        at org.apache.solr.schema.FieldType$DefaultAnalyzer$1.incrementToken(FieldType.java:484)\n        at org.apache.lucene.queries.mlt.MoreLikeThis.addTermFrequencies(MoreLikeThis.java:822)\n        at org.apache.lucene.queries.mlt.MoreLikeThis.retrieveTerms(MoreLikeThis.java:745)\n        at org.apache.lucene.queries.mlt.MoreLikeThis.like(MoreLikeThis.java:586)\n        at org.apache.solr.handler.MoreLikeThisHandler$MoreLikeThisHelper.getMoreLikeThis(MoreLikeThisHandler.java:374)\n        at org.apache.solr.handler.component.MoreLikeThisComponent.getMoreLikeThese(MoreLikeThisComponent.java:370)\n        at org.apache.solr.handler.component.MoreLikeThisComponent.process(MoreLikeThisComponent.java:123)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:227)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:144)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2006)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:777)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:413)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:204)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n        at org.eclipse.jetty.server.Server.handle(Server.java:368)\n        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)\n        at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:942)\n        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1004)\n        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)\n        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)\n        at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n        at java.lang.Thread.run(Thread.java:745)\n\n\n\nI think it's weird that solr has the correct date, gives a long to the MoreLikeThis component and when the tokenizer tries to parse the date it throws an exception.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-04-06T19:41:05+0000",
            "author": "Erick Erickson",
            "content": "Hmmm, throwing this error isn't very helpful I'll agree. Though does MLT even work on non-text fields? Not quite sure what MLT on a date field should return on numeric types (which dates really are). To me the most \"natural\" interpretation would be some kind of numeric comparison, which you can already do with a range query.\n\nEven so, catching this up-front and returning a more helpful error like \"MLT only supported for text fields\" would be better.\n\nThis appears to be a dup of SOLR-4860, I'll link it in a bit. ",
            "id": "comment-14481704"
        },
        {
            "date": "2015-04-07T06:57:51+0000",
            "author": "Bogdan Marinescu",
            "content": "I started writing my own MoreLikeThis like component which also performs fuzzy searches. As I understand it from SOLR-4860, another limitation would be numbers (solr.TrieIntField &co). \nCan you perhaps think of a generic solution for this or should I just keep digging 'till I find something ?  ",
            "id": "comment-14482708"
        }
    ]
}