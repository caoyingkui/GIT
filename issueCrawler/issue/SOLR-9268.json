{
    "id": "SOLR-9268",
    "title": "Support adding/updating backup repository configurations via API",
    "details": {
        "components": [
            "Backup/Restore"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Currently users need to manually modify solr.xml in Zookeeper to update the configuration parameters (and restart Solr cluster). This is not quite user friendly. We should provide an API to update this configuration. (This came up during the discussions in SOLR-9242).",
    "attachments": {
        "SOLR-9268.patch": "https://issues.apache.org/jira/secure/attachment/12816378/SOLR-9268.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-07-01T12:13:55+0000",
            "author": "Noble Paul",
            "content": "Let's not do this. solrconfig.xml is a vestige of the non-cloud mode. We should store all the cluster-wide properties in a separate json file ",
            "id": "comment-15358865"
        },
        {
            "date": "2016-07-01T13:56:09+0000",
            "author": "Varun Thacker",
            "content": "The cluster prop API (https://cwiki.apache.org/confluence/display/solr/Collections+API#CollectionsAPI-api11)  supports simple key value pairs.\n\nLet's take the backup/restore repository interface for example - Right now we put the configurations in solr.xml file as that was the only place fit.\n\nSo the discussion came about having better support and hence have APIs for solr.xml . But I agree what we really want is better API support in general. It doesn't need to be exposed as solr.xml . In fact we should't latch on to that and add more stuff . But the motivation remains the same.\n\nOne approach is to have a specific endpoint for backup/restore and that gets stored internally as a reporitory.json file.\nThe other approach is have a generic cluster property API which can deal with nested schemas.\n\n\n ",
            "id": "comment-15358998"
        },
        {
            "date": "2016-07-06T07:43:46+0000",
            "author": "Noble Paul",
            "content": "Refactored the code to help ConfigEditablePlugins to a standard base Class  ",
            "id": "comment-15363919"
        },
        {
            "date": "2016-07-06T07:50:00+0000",
            "author": "Varun Thacker",
            "content": "I've renamed the issue to tackle on the backup repository interface configurations via API in favour of configuring it in the  solr.xml file ",
            "id": "comment-15363931"
        },
        {
            "date": "2016-07-06T17:00:31+0000",
            "author": "Hrishikesh Gadre",
            "content": "Refactored the code to help ConfigEditablePlugins to a standard base Class\n\nCan you give a brief description of the intended design? \n\nOne approach is to have a specific endpoint for backup/restore and that gets stored internally as a reporitory.json file.\n\nVarun Thacker I don't like building specific configuration endpoint for backup/restore. This is/will be a common requirement for many current as well as future features. So I would prefer a generic solution to this. Would Nobel's patch help us to achieve this?\n ",
            "id": "comment-15364628"
        },
        {
            "date": "2016-07-07T16:34:08+0000",
            "author": "Varun Thacker",
            "content": "For cluster level features I am of the opinion that we should have specific endpoints per feature.\n\nFor example basic auth has APIs to manage roles / users etc on a dedicated endpoint ( /solr/admin/authentication  )\nhttps://cwiki.apache.org/confluence/display/solr/Basic+Authentication+Plugin\n\nSimilarly we should have an endpoint for backup repositories ( solr/admin/backup_repository ) where we can define the repositories and modify them dynamically. \n\nIf we have one endpoint I feel it gets messy. Imagine if security / backup repository both could be configured via one endpoint ( /solr/admin/cluster_property ) , each with it's own json payload \n ",
            "id": "comment-15366363"
        },
        {
            "date": "2016-07-07T17:14:55+0000",
            "author": "Noble Paul",
            "content": "Can you give a brief description of the intended design?\n\nHrishikesh Gadre The patch was to refactor out the mechanism used by security plugins into a base class so that all future plugins can reuse the code\n\nThe framework enables you to write  any ConfigEditablePlugin (i.e any plugin that supports editing its JSON configuration through an API).  ",
            "id": "comment-15366427"
        },
        {
            "date": "2018-06-28T09:35:20+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Ready to move further with this?\n\nPerhaps Solr 8.0 is a good time to get rid of solr.xml and replace it with some /clusterconfig.json file in ZK? Even if clusterProps now support more complex objects as values, I think it makes sense to leave clusterProps alone as more generic K/V props, and move all solr.xml stuff into a new config modelled after security.json. The file would then look something like e.g.\n\n{\n  \"backup-repos\" : [\n    { \n      \"class\" : \"solr.S3BackupRepository\",\n      \"bucket\" : \"s3:/foo\",\n      \"credentials\" : { ... }\n    },\n    {\n      \"class\" : \"solr.AzureFilesRepostitory\",\n      ..\n    }\n  ],\n  \"shardHandler\" : {\"class\":\"solr.HttpShardHandlerFactory\" ...},\n  \"zookeeper\" : { \"zkClientTimeout\" : ...}\n\n\n\u00a0 ",
            "id": "comment-16526155"
        }
    ]
}