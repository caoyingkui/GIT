{
    "id": "LUCENE-1095",
    "title": "StopFilter should have option to incr positionIncrement after stop word",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "I've seen this come up on the mailing list a few times in the last month, so i'm filing a known bug/improvement arround it...\n\nStopFilter should have an option that if set, records how many stop words are \"skipped\" in a row, and then sets that value as the positionIncrement on the \"next\" token that StopFilter does return.",
    "attachments": {
        "lucene-1095-pos-incr.patch": "https://issues.apache.org/jira/secure/attachment/12372155/lucene-1095-pos-incr.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-12-18T21:12:34+0000",
            "content": "From <http://mail-archives.apache.org/mod_mbox/lucene-java-user/200510.mbox/%3c435D44FA.6050702@syr.edu%3e>:\n\nA patch implementing this approach was actually applied to \nStopFilter.java in late 2003, but was reverted shortly afterward, \nbecause this approach conflicts with the QueryParser and PhraseQuery \nimplementations.\n\nSee Doug Cutting's description of the problem with the position \nincrement modification approach here:\n<http://mail-archives.apache.org/mod_mbox/lucene-java-dev/200312.mbox/%3c3FCFB3CA.9000103@lucene.com%3e>\n\nSee a colored diff of StopFilter.java, just before and after the \nposition increment modification patch was reverted, here:\n<http://svn.apache.org/viewcvs.cgi/lucene/java/trunk/src/java/org/apache/lucene/analysis/StopFilter.java?rev=150152&r1=150150&r2=150152&diff_format=h> ",
            "author": "Steve Rowe",
            "id": "comment-12552901"
        },
        {
            "date": "2007-12-18T21:29:08+0000",
            "content": "The problem Doug refers to is the effect of this on a Phrase Query.\nI believe that if same analyzer with same stop filter and same option enables is used at search, the PhrasePositions would reflect the same increments due to stop word removals, and so phrase search should work. \nI didn't  check this though.\nTo be also verified for Span Queries. ",
            "author": "Doron Cohen",
            "id": "comment-12552903"
        },
        {
            "date": "2007-12-18T21:40:30+0000",
            "content": "I believe QueryParser has been fixed since that first change I made mentioned by Steven to account for positions returned from an Analyzer.    So maybe all is well with fixing StopFilter now.  Unit tests needed  ",
            "author": "Erik Hatcher",
            "id": "comment-12552905"
        },
        {
            "date": "2007-12-18T21:42:29+0000",
            "content": "I knew there must have been a good reason why it hadn't been done before, but there are some distinctions between then and now:\n\n1) then the position incrementing wasn't optional, i wouldn't suggest making that some change, just making it easier for people who want to do this without having to write an entirely new Filter.\n\n2) now PhraseQuery actually supports the notion of relative positions, so people can do the kind of thing Doug was talking about in the email you linked to ... but i won't go so far as to suggest we should make those changes by default in the QueryParser  ",
            "author": "Hoss Man",
            "id": "comment-12552906"
        },
        {
            "date": "2007-12-18T22:18:56+0000",
            "content": "I checked further. \n\nQuery parser currently ignores the position increment - it is calling PhraseQuery.add(Term) rather than add(Term,position). \n\nSo without changing this - either by default or optionally - the whole thing will not work. \n\n(I think current QP behavior is wrong in this regard.)\nIs there a good reason not to change QP to always pass the position to the PhraseQuery? ",
            "author": "Doron Cohen",
            "id": "comment-12552911"
        },
        {
            "date": "2007-12-18T22:29:10+0000",
            "content": "\nIs there a good reason not to change QP to always pass the position to the PhraseQuery?\n\nBackward compatibility   In all seriousness, if QP's default behavior is changed, regardless of correctness, shouldn't it wait until 3.0?\n\nHoss's suggestion changes no defaults, so caveat user applies - no problem applying to trunk immediately.  Maybe a different patch to change the default behavior in StopFilter and in QP for 3.0? ",
            "author": "Steve Rowe",
            "id": "comment-12552916"
        },
        {
            "date": "2007-12-24T11:33:50+0000",
            "content": "This patch enables increments optionally in QueryParser and StopFilter, as discussed above.\nThe default behavior has not changed, so there should be no back-comp issues.\n\nThe implementation in StopFilter differs slightly from the \"older\" reverted code in\nthat it does not assume incoming tokens to have position-increment of 1. So it\nshould work ok when stop filters and \"expanders\" are concatenated.\n\nAdded API:\n\n\n   QueryParser {\n       public boolean getApplyPositionIncrements();\n       public void setApplyPositionIncrements(boolean applyPositionIncrements);\n   }  \n\n\n\nAnd\n\n\n    StopFilter {\n        public boolean getApplyPositionIncrements();\n        public void setApplyPositionIncrements(boolean applyPositionIncrements);\n        public static boolean getDefaultApplyPositionIncrements()\n        public static void setDefaultApplyPositionIncrements(boolean defaultApplyPositionIncrements)\n   }\n\n\n\nNote the two new static methods in StopFilter - these allow to control behavior system wide, and this way affect the behavior of classes that construct a StopFilter internally, like StopAnalyzer and StandardAnalyzer, without needing to  pollute the API of many classes (all Snowball analyzers for instance) with new API. \n\nParse tests and search tests were added.\nAll tests pass.\n\nFeedback is required:\n\n\tComments on the proposed API:\n\t\n\t\tthe static methods approach?\n\t\tperhaps \"enable\" instead of \"apply\"?\n\t\n\t\n\tDo you think this should be added now (it is ready I think) or would you rather to hold this for after 2.3?\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12554242"
        },
        {
            "date": "2007-12-24T13:03:20+0000",
            "content": "\n... it does not assume incoming tokens to have position-increment of 1. \nSo it should work ok when stop filters and \"expanders\" are concatenated.\n\nWell, chaining stop filters didn't work in previous patch.\nAttached patch fixed this.\n\nProblem was with tokenizers reuse of tokens (next(Token)).\nCharTokenizer, KeywordTokenizer and StandardTokenizer \nwere fixed to reset positionIncrement to 1.\n\nThe way I see it Tokenizers must do this and Filters must not do this.\nIf there's no objection to this observation I'll javadoc it in Tokenizer\nfor future implementors. ",
            "author": "Doron Cohen",
            "id": "comment-12554249"
        },
        {
            "date": "2007-12-26T22:10:08+0000",
            "content": "Ok I separated the tokenizers fix to LUCENE-1101.\nPatch here stands-alone (not depending on 1101), will \nupdate it once 1101 gets committed. ",
            "author": "Doron Cohen",
            "id": "comment-12554472"
        },
        {
            "date": "2007-12-30T08:11:10+0000",
            "content": "Updated patch:\n\n\tToken reuse fixes omitted (handled by LUCENE-1101).\n\tnew feature methods renamed from \"apply\" to \"enable\".\n\n\n\nAll tests pass, default behavior unmodified, ready to commit. ",
            "author": "Doron Cohen",
            "id": "comment-12554983"
        },
        {
            "date": "2007-12-31T08:29:07+0000",
            "content": "Committed . (already yesterday actually, I was sure that I already resolved it...) ",
            "author": "Doron Cohen",
            "id": "comment-12555071"
        }
    ]
}