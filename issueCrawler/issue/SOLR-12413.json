{
    "id": "SOLR-12413",
    "title": "Solr ignores aliases.json from ZooKeeper at startup",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.5"
        ],
        "affect_versions": "7.2.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Since upgrading to 7.2.1, we ran into an issue where Solr ignores aliases.json file stored in ZooKeeper.\n\n\u00a0\n\nSteps to reproduce the problem:\n\n\tSolrCloud cluster is down\n\tDirect update of aliases.json file in ZooKeeper with Solr ZkCLI without using Collections API :\n\t\n\t\tjava ... org.apache.solr.cloud.ZkCLI -zkhost ... -cmd clear /aliases.json\n\t\tjava ... org.apache.solr.cloud.ZkCLI -zkhost ... -cmd put /aliases.json \"new content\"\n\t\n\t\n\tSolrCloud cluster is started => aliases.json not taken into account\n\n\n\n\u00a0\n\nAnalysis:\u00a0\n\nDigging a bit in the code, what is actually causing the issue is that, when starting, Solr now checks for the metadata of the aliases.json file and if the version metadata from ZooKeeper is lower or equal to local version, it keeps the local version.\n\nWhen it starts, Solr has a local version of 0 for the aliases but ZooKeeper also has a version of 0 of the file because we just recreated it. So Solr ignores ZooKeeper configuration and never has a chance to load aliases.\n\n\u00a0\n\nRelevant parts of Solr code are:\n\n\thttps://github.com/apache/lucene-solr/blob/branch_7_2/solr/solrj/src/java/org/apache/solr/common/cloud/ZkStateReader.java\u00a0: line 1562 : method setIfNewer\n\n\n\n\n/**\n* Update the internal aliases reference with a new one, provided that its ZK version has increased.\n*\n* @param newAliases the potentially newer version of Aliases\n*/\nprivate boolean setIfNewer(Aliases newAliases) {\n\u00a0 synchronized (this) {\n  \u00a0 int cmp = Integer.compare(aliases.getZNodeVersion(), newAliases.getZNodeVersion());\n \u00a0  if (cmp < 0) {\n     \u00a0LOG.debug(\"Aliases: cmp={}, new definition is: {}\", cmp, newAliases);\n    \u00a0 aliases = newAliases;\n   \u00a0  this.notifyAll();\n  \u00a0   return true;\n \u00a0  } else {\n   \u00a0  LOG.debug(\"Aliases: cmp={}, not overwriting ZK version.\", cmp);\n  \u00a0   assert cmp != 0 || Arrays.equals(aliases.toJSON(), newAliases.toJSON()) : aliases + \" != \" + newAliases;\n \u00a0  return false;\n\u00a0   }\n  }\n}\n\n\n\thttps://github.com/apache/lucene-solr/blob/branch_7_2/solr/solrj/src/java/org/apache/solr/common/cloud/Aliases.java\u00a0: line 45 : the \"empty\" Aliases object with default version 0\n\n\n\n\n/**\n* An empty, minimal Aliases primarily used to support the non-cloud solr use cases. Not normally useful\n* in cloud situations where the version of the node needs to be tracked even if all aliases are removed.\n* A version of 0 is provided rather than -1 to minimize the possibility that if this is used in a cloud\n* instance data is written without version checking.\n*/\npublic static final Aliases EMPTY = new Aliases(Collections.emptyMap(), Collections.emptyMap(), 0);\n\n\u00a0\n\nNote that a\u00a0workaround is to force ZooKeeper to always have a version greater than 0 for aliases.json file (for instance by not clearing the file and just overwriting it again and again).",
    "attachments": {
        "SOLR-12413.patch": "https://issues.apache.org/jira/secure/attachment/12928631/SOLR-12413.patch",
        "SOLR-12413-nocommit.patch": "https://issues.apache.org/jira/secure/attachment/12928562/SOLR-12413-nocommit.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-29T23:06:03+0000",
            "content": "At initial startup, we not be looking at the version in zookeeper.  There's nothing to compare it to, so it should ALWAYS be read and loaded.  That shouldn't be controversial.\n\nIf collection reloads work in a manner similar to core reloads (where the SolrCore object is built from scratch just like at startup core creation and then replaces the old one), then collection reload should also ignore versions in ZK for things that pertain specifically to that collection.  If a collection reload is more dynamic than a core reload, then that might not be the best option.\n\nBut in general, I don't think it's unreasonable to require a full Solr restart for situation where a central config file has been manually deleted and then re-uploaded.  We do need to fix the bug noticed here so that the restart actually works.  Thank you for bringing this to our attention!\n\nGa\u00ebl Jourdan, the workaround is to make changes to your aliases with the Collections API.  If you do it that way, you don't need to restart Solr or reload anything.  Changes will take effect immediately.  If the reason you are making changes with a replacement file is because we are missing functionality in the Collections API that you require, please discuss it on the mailing list or IRC channel so we can determine whether a feature request is needed. ",
            "author": "Shawn Heisey",
            "id": "comment-16494432"
        },
        {
            "date": "2018-05-29T23:12:09+0000",
            "content": "We upload configuration files to zookeeper, then use a RELOAD command to the collections API. We don't use aliases.\n\nWe keep the files under version control, so loading them to zookeeper works for us. ",
            "author": "Walter Underwood",
            "id": "comment-16494436"
        },
        {
            "date": "2018-05-30T08:10:16+0000",
            "content": "Thanks for your feedback that this is a real issue.\n\nShawn Heisey, you're right, using Collections API\u00a0would work. I did not mention it but actually this problem occurs on a Solr cluster which is shutdown most of the time because it's a backup cluster and we only start it in some emergency cases. This is why we don't use Collections API. ",
            "author": "Ga\u00ebl Jourdan",
            "id": "comment-16494856"
        },
        {
            "date": "2018-06-13T17:30:16+0000",
            "content": "Perhaps the solution is as simple as setting Aliases.EMPTY's zkNodeVersion to -1? ",
            "author": "David Smiley",
            "id": "comment-16511457"
        },
        {
            "date": "2018-06-13T19:45:57+0000",
            "content": "Yes, I think it solves the issue.\n\nBut the comment states that \"a version of 0 is provided rather than -1 to minimize the possibility that if this is used in a cloud instance data is written without version checking\", so I'm wondering if we are missing something ? ",
            "author": "Ga\u00ebl Jourdan",
            "id": "comment-16511589"
        },
        {
            "date": "2018-06-19T13:31:22+0000",
            "content": "Gus Heck I think you wrote that comment. \u00a0Admittedly I don't understand it. \u00a0FWIW I changed it to -1 locally and ran AliasIntegrationTest which passed. ",
            "author": "David Smiley",
            "id": "comment-16517072"
        },
        {
            "date": "2018-06-19T19:23:49+0000",
            "content": "The concern with that comment is that for keeper.setData() a version of -1 means don't check the version:\n\n/**\n* Set the data for the node of the given path if such a node exists and the\n* given version matches the version of the node (if the given version is\n* -1, it matches any node's versions). Return the stat of the node.\n* <p>\n* This operation, if successful, will trigger all the watches on the node\n* of the given path left by getData calls.\n* <p>\n* A KeeperException with error code KeeperException.NoNode will be thrown\n* if no node with the given path exists.\n* <p>\n* A KeeperException with error code KeeperException.BadVersion will be\n* thrown if the given version does not match the node's version.\n* <p>\n* The maximum allowable size of the data array is 1 MB (1,048,576 bytes).\n* Arrays larger than this will cause a KeeperException to be thrown.\n*\n* @param path\n* the path of the node\n* @param data\n* the data to set\n* @param version\n* the expected matching version\n* @return the state of the node\n* @throws InterruptedException If the server transaction is interrupted.\n* @throws KeeperException If the server signals an error with a non-zero error code.\n* @throws IllegalArgumentException if an invalid path is specified\n*/\npublic Stat setData(final String path, byte data[], int version)\nthrows KeeperException, InterruptedException\n{\n\n\n ",
            "author": "Gus Heck",
            "id": "comment-16517442"
        },
        {
            "date": "2018-06-19T19:36:03+0000",
            "content": "Haven't entirely thought it through, but maybe what we want is to change setIfNewer(alias) to setIfNewerOrZeroVersion(alias), thus our inital zero version that was never loaded from ZK anyway disappears in the face of any actual data from zk? ",
            "author": "Gus Heck",
            "id": "comment-16517447"
        },
        {
            "date": "2018-06-19T20:08:33+0000",
            "content": "Running tests for a patch along those lines. AliasIntegrationTest wasn't bothered in my ide FWIW, I think we want to cause an immediate version bump when we see zero too. ",
            "author": "Gus Heck",
            "id": "comment-16517474"
        },
        {
            "date": "2018-06-19T20:59:29+0000",
            "content": "Pull request added ",
            "author": "Gus Heck",
            "id": "comment-16517541"
        },
        {
            "date": "2018-06-20T21:06:39+0000",
            "content": "Here's a test, intended to be added to AliasIntegrationTest\n\n  @Test\n  public void testPreExistingAliases() throws Exception {\n    final byte[] bytes = Aliases.EMPTY.cloneWithCollectionAlias(\"alias1\", \"collection1\").toJSON();\n    cluster.getZkClient().delete(ZkStateReader.ALIASES, -1, true);\n    cluster.getZkClient().create(ZkStateReader.ALIASES, bytes, CreateMode.PERSISTENT, true);\n    Stat stat = new Stat();\n    cluster.getZkClient().getData(ZkStateReader.ALIASES, null, stat, true);\n    assertEquals(0, stat.getVersion());\n\n    // get a new solrClient instead of the one created before our manual ZK manipulation.\n    try (SolrClient solrClient = getCloudSolrClient(cluster)) {\n      // put a basic alias1->collection1 alias mapping into ZK manually ensuring the zk version is 0\n      CollectionAdminRequest.createCollection(\"collection1\", 1, 1).process(cluster.getSolrClient());\n      solrClient.query(\"alias1\", params(\"q\", \"*:*\"));//does not throw; it should resolve\n    }\n  }\n\n ",
            "author": "David Smiley",
            "id": "comment-16518599"
        },
        {
            "date": "2018-06-21T01:57:52+0000",
            "content": "I did test this manually by\n\n\tcreating a 4 node cluster,\n\tcopying the aliases.json to a file,\n\tmodifying it to add an alias,\n\tbringing the\u00a0cluster down,\n\tdeleting aliases.json from zk,\n\tuploading the edited version to zk\n\trestarting the cluster...\u00a0\n\n\n\nAt which time I observed the change in the UI and successfully queried the alias....\u00a0\n\nThat test you supplied doesn't seem to work for me with or without the patch... the deletion of aliases.json appears to blow up the cluster almost immediately... the delete triggers the watch and leads to:\n\n\u00a0\n\n22756 ERROR (zkCallback-21-thread-1) [ ] o.a.s.c.c.ZkStateReader$AliasesManager A ZK error has occurred\norg.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /aliases.json\nat org.apache.zookeeper.KeeperException.create(KeeperException.java:114) ~[zookeeper-3.4.11.jar:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]\nat org.apache.zookeeper.KeeperException.create(KeeperException.java:54) ~[zookeeper-3.4.11.jar:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]\nat org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:1215) ~[zookeeper-3.4.11.jar:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]\nat org.apache.solr.common.cloud.SolrZkClient.lambda$getData$5(SolrZkClient.java:341) ~[java/:?]\nat org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkCmdExecutor.java:60) ~[java/:?]\nat org.apache.solr.common.cloud.SolrZkClient.getData(SolrZkClient.java:341) ~[java/:?]\nat org.apache.solr.common.cloud.ZkStateReader$AliasesManager.process(ZkStateReader.java:1781) ~[java/:?]\nat org.apache.solr.common.cloud.SolrZkClient$1.lambda$process$1(SolrZkClient.java:270) ~[java/:?]\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_144]\nat java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_144]\nat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ExecutorUtil.java:209) ~[java/:?]\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]\nat java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]\n22756 ERROR (zkCallback-28-thread-1) [ ] o.a.s.c.c.ZkStateReader$AliasesManager A ZK error has occurred\norg.apache.zookeeper.KeeperException$NoNodeException: KeeperErrorCode = NoNode for /aliases.json\nat org.apache.zookeeper.KeeperException.create(KeeperException.java:114) ~[zookeeper-3.4.11.jar:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]\nat org.apache.zookeeper.KeeperException.create(KeeperException.java:54) ~[zookeeper-3.4.11.jar:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]\nat org.apache.zookeeper.ZooKeeper.getData(ZooKeeper.java:1215) ~[zookeeper-3.4.11.jar:3.4.11-37e277162d567b55a07d1755f0b31c32e93c01a0]\nat org.apache.solr.common.cloud.SolrZkClient.lambda$getData$5(SolrZkClient.java:341) ~[java/:?]\nat org.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkCmdExecutor.java:60) ~[java/:?]\nat org.apache.solr.common.cloud.SolrZkClient.getData(SolrZkClient.java:341) ~[java/:?]\nat org.apache.solr.common.cloud.ZkStateReader$AliasesManager.process(ZkStateReader.java:1781) ~[java/:?]\nat org.apache.solr.common.cloud.SolrZkClient$1.lambda$process$1(SolrZkClient.java:270) ~[java/:?]\nat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) ~[?:1.8.0_144]\nat java.util.concurrent.FutureTask.run(FutureTask.java:266) ~[?:1.8.0_144]\nat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ExecutorUtil.java:209) ~[java/:?]\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]\nat java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]\n\n\nfollowed by\n\norg.apache.solr.client.solrj.SolrServerException: No live SolrServers available to handle this request:[http://127.0.0.1:33023/solr/alias1]\n\nat __randomizedtesting.SeedInfo.seed([3A63ED446F3BE85D:C178AC5AAC5AF704]:0)\nat org.apache.solr.client.solrj.impl.LBHttpSolrClient.request(LBHttpSolrClient.java:462)\nat org.apache.solr.client.solrj.impl.CloudSolrClient.sendRequest(CloudSolrClient.java:1106)\nat org.apache.solr.client.solrj.impl.CloudSolrClient.requestWithRetryOnStaleState(CloudSolrClient.java:886)\nat org.apache.solr.client.solrj.impl.CloudSolrClient.request(CloudSolrClient.java:819)\nat org.apache.solr.client.solrj.SolrRequest.process(SolrRequest.java:194)\nat org.apache.solr.client.solrj.SolrClient.query(SolrClient.java:942)\nat org.apache.solr.cloud.AliasIntegrationTest.testPreExistingAliases(AliasIntegrationTest.java:105)\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nat java.lang.reflect.Method.invoke(Method.java:498)\nat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1737)\n\n\nAll tests running after it fail, so the test cluster is just hosed at that point (not dying a\u00a0horribly when we can't find the aliases.json might be a nice enhancement/bugfix, but\u00a0one could also argue that if one goes deleting critical files during running,\u00a0that's not ever a supported use case\u00a0).\n\nAFAIK there's also no way in zookeeper to manually set the version back to zero (this is understandable).\n\nI don't think this particular\u00a0fix is unit testable unless we find a way to bring up a truly independent cloud\u00a0server with an independent zookeeper\u00a0instance. Then we might\u00a0have the ability to stop\u00a0solr without stopping zookeeper.\u00a0 ",
            "author": "Gus Heck",
            "id": "comment-16518798"
        },
        {
            "date": "2018-06-21T04:12:10+0000",
            "content": "Good catch on identifying why my proposed test was fundamentally flawed; I wasn't quite sure yet.  I can also see that it's probably impossible to do a unit test for this.\n\nAttached is a \"nocommit\" patch that hacks ZkController.createClusterZkNodes to ensure that the default aliases.json has \"alias1\" pointing to \"collection1\".  And it has a shortened version of the flawed test that merely tries to see if querying \"alias1\" from the get-go works.  I wanted to see if Aliases.EMPTY with a zkNodeVersion of -1 works.  Note the additional asserts as well.  The rationale for why I think this works is because the first aliases operation to occur is update() which sets ZkStateReader.AliasesManager.aliases to be whatever zookeeper has, which will be a good zk version (not -1).  applyModificationAndExportToZk will only ever be called after this point, at which we never see the '-1' again.  This isn't all to say your patch doesn't also solve the problem but if we agree this \"-1\" solution works too then it's way simpler. (no additional lines of code except some assertions) ",
            "author": "David Smiley",
            "id": "comment-16518891"
        },
        {
            "date": "2018-06-21T06:00:32+0000",
            "content": "I had\u00a0previously figured out that the \u00a0\"-1 value for version\" works for the reason you give, but that solution subtly ties this\u00a0in code magic number to the current correct order of operations. If at any time the code saves without updating first (that would be a bug, but\u00a0probably a race condition type of bug that might not show up immediately) we\u00a0wind up\u00a0overwriting the existing aliases.json with a blank one. By using 0 which is a valid version number and handling it as a special case with an automatic increment to version 1 we are guaranteed to never overwrite a long standing aliases.json node. The only case where we can get in trouble due to order of operations is this much narrower case for a\u00a0aliases.json node that has just recently been replaced manually while solr was offline. I also like that it\u00a0doesn't muddle\u00a0the meaning of a -1 value for a version.\n\nSo I feel like\u00a0the patch I supplied is more robust if a bit more complicated. Also the significance is clearer reading the code I think. If these reasons are unconvincing, I can go with\u00a0smaller\u00a0fix based on a -1 value for version\u00a0 ",
            "author": "Gus Heck",
            "id": "comment-16518949"
        },
        {
            "date": "2018-06-21T13:42:23+0000",
            "content": "Here's a new patch (committable) that includes a check at the start of applyModificationAndExportToZk to call update() if the current aliases zk version is -1.  This should never happen but if it does it's at least safe.  I think the use of -1 is Aliases.EMPTY is more correct than 0.  0 is a valid zk version, and thus could be confused with a genuine zk state. ",
            "author": "David Smiley",
            "id": "comment-16519375"
        },
        {
            "date": "2018-06-21T18:03:46+0000",
            "content": "Thanks\u00a0Ga\u00ebl Jourdan for a thorough analysis / bug-report, and Gus for your initial patch.\n\nhttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=commit;h=7c28d5797387fdf68379ec66f0de3c62e6a079ca ",
            "author": "David Smiley",
            "id": "comment-16519649"
        }
    ]
}