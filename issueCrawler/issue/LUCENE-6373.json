{
    "id": "LUCENE-6373",
    "title": "Complete two phase doc id iteration support for Spans",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Spin off from LUCENE-6308, see comments there from about 23 March 2015.",
    "attachments": {
        "LUCENE-6373.patch": "https://issues.apache.org/jira/secure/attachment/12725264/LUCENE-6373.patch",
        "LUCENE-6373-SpanOr.patch": "https://issues.apache.org/jira/secure/attachment/12724754/LUCENE-6373-SpanOr.patch",
        "LUCENE-6373-20150426.patch": "https://issues.apache.org/jira/secure/attachment/12728224/LUCENE-6373-20150426.patch",
        "LUCENE-6737-SpanOr-oneTestFails.patch": "https://issues.apache.org/jira/secure/attachment/12725169/LUCENE-6737-SpanOr-oneTestFails.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14484166",
            "author": "Paul Elschot",
            "date": "2015-04-07T21:57:34+0000",
            "content": "I started on SpanNotQuery, see first patch. This is mostly a cleanup to have an implementation that is better for a DISI subclass.\nThis still has asTwoPhaseIterator commented out to make all test cases pass. With this asTwoPhaseIterator some test cases fail, I have not yet investigated why.\n\nAdded, 11 April: I have deleted the patch for SpanNotQuery. "
        },
        {
            "id": "comment-14484214",
            "author": "Robert Muir",
            "date": "2015-04-07T22:24:20+0000",
            "content": "Paul have you seen my alternative patch on LUCENE-6394? I think that SpanNot operates conceptually just like SpanPositionCheck (with a lazy iterator on the NOT spans), and folded SpanPositionCheck.PositionCheckSpan API into FilterSpans. "
        },
        {
            "id": "comment-14485453",
            "author": "Paul Elschot",
            "date": "2015-04-08T16:10:02+0000",
            "content": "I missed LUCENE-6394, I'll continue the things for SpanNot there. "
        },
        {
            "id": "comment-14490915",
            "author": "Paul Elschot",
            "date": "2015-04-11T11:02:51+0000",
            "content": "Patch for SpanOr of 11 April 2015.\nThis is an improvement on SpanOr, but there is no two phase doc id set iteration yet. "
        },
        {
            "id": "comment-14490918",
            "author": "Paul Elschot",
            "date": "2015-04-11T11:12:10+0000",
            "content": "The SpanOr patch of 11 April 2015:\n\nIntroduces DisiPriorityQueue<Iter extends DocIdSetIterator>, which was started from ScorerPriorityQueue.\nThe DisiPriorityQueue is used to reimplement the doc id iteration of SpanOr, which now works much like DisjunctionScorer.\nThe position iteration for SpanOr is done by a new SpanPositionQueue, which extends PriorityQueue.\nTests pass with this patch, and I would expect this to improve the speed of SpanOr.\n\nStill to be done for SpanOr:\n\nUse DisiPriorityQueue<Scorer> instead of ScorerPriorityQueue.\nAdd two phase doc id iteration in SpanOr similar to DisjunctionScorer.\nSpecialize SpanPositionQueue similar to DisiPriorityQueue, inline the position comparison function.\n "
        },
        {
            "id": "comment-14491504",
            "author": "Robert Muir",
            "date": "2015-04-12T14:58:35+0000",
            "content": "Hi Paul, thanks for tackling the first steps for SpanOr, this is the hardest one \n\nMaybe we can get Adrien Grand opinions, since he implemented the two-phase support for DisjunctionScorer.\nFrom my perspective: Can we still keep asTwoPhaseIterator on scorer/spans? its still just an up-front instanceof and moving it to DISI has other implications. "
        },
        {
            "id": "comment-14491577",
            "author": "Paul Elschot",
            "date": "2015-04-12T16:47:47+0000",
            "content": "Indeed, two phase doc id iteration for SpanOr is not simple. I think I'm getting there though. It needs two tests that I think I have seen  before, but I could not find where:\nOne is to avoid calling an approximation.match() again when match is accepted. This can be done by keeping the last doc for which approximation.match() returned true.\nThe other is to distinguish between approximation+acceptance and normal acceptance of a matching doc. This can be done by keeping the last doc for which twoPhaseCurrentDocMatches returned true.\nThis is still cooking, and I don't expect to finish this very soon.\n\nCan we still keep asTwoPhaseIterator on scorer/spans?\n\nFor the SpanOr patch found I there was a second place that needs an implementation with instanceof checks.\nThis second place is  DisiWrapper for disjunctions, the existing one is in ConjunctionDISI.\nSo I thought about where to put this in a single place, and that place is DocIdSetIterator.\nThe patch implementation with instanceof checks is just writing out the inheritance, it would be simpler to just return null by default,\nand leave the rest to inheritance, and/or lave the method abstract.\nSince there are other implications, the question is: is there a better place to put this?\nThe situation has changed, it is now not only Scorer but also Spans that have this. "
        },
        {
            "id": "comment-14491640",
            "author": "Robert Muir",
            "date": "2015-04-12T18:40:54+0000",
            "content": "Well, it might be that both Scorer and Spans have it (temporarily), but i don't think it should be on DISI since ultimately it does not belong there?  It doesn't make sense for all other subclasses of DISI (e.g. postings) and it doesnt make sense to be recursive.\n\nAnd if the long term goal is to merge the functionality of Spans into Scorer anyway, then i'd prefer the instanceof check for now, rather than adding it to DISI, then having to take it away from DISI and put back into Scorer later. "
        },
        {
            "id": "comment-14491667",
            "author": "Robert Muir",
            "date": "2015-04-12T19:22:34+0000",
            "content": "\nIndeed, two phase doc id iteration for SpanOr is not simple. I think I'm getting there though. It needs two tests that I think I have seen before, but I could not find where:\nOne is to avoid calling an approximation.match() again when match is accepted. This can be done by keeping the last doc for which approximation.match() returned true.\nThe other is to distinguish between approximation+acceptance and normal acceptance of a matching doc. This can be done by keeping the last doc for which twoPhaseCurrentDocMatches returned true.\nThis is still cooking, and I don't expect to finish this very soon.\n\nI had the same problems with SpanNot, and it was too hard for me to debug them with the current tests.\n\nSince LUCENE-6411, we have tons more assertions used by TestSpanSearchEquivalence. It wraps all parts of the span-query-tree in AssertingSpanQuery which means we have consistent checks on every operation and it makes bugs easier to track down since the stacktrace usually points to the offending code.\n\nIt also wraps the two-phase iterator and ensures you don't call matches() twice:\n\n    @Override\n    public boolean matches() throws IOException {\n      if (approximation.docID() == -1 || approximation.docID() == DocIdSetIterator.NO_MORE_DOCS) {\n        throw new AssertionError(\"matches() should not be called on doc ID \" + approximation.docID());\n      }\n      if (lastDoc == approximation.docID()) {\n        throw new AssertionError(\"matches() has been called twice on doc ID \" + approximation.docID());\n      }\n      // ... more checks\n\n\n\nthat you don't call nextStartPosition() if you didn't call matches(), or if it returned false, and so on:\n\n  @Override\n  public int nextStartPosition() throws IOException {\n    assert state != State.DOC_START : \"invalid position access, state=\" + state + \": \" + in;\n    assert state != State.DOC_FINISHED : \"invalid position access, state=\" + state + \": \" + in;\n    assert state != State.DOC_UNVERIFIED : \"invalid position access, state=\" + state + \": \" + in;\n    // ... more checks\n\n "
        },
        {
            "id": "comment-14492039",
            "author": "Adrien Grand",
            "date": "2015-04-13T07:40:03+0000",
            "content": "The patch looks like a good start, it's good to see SpanOr and disjunctions looking similar.\n\n//final long cost; //FIXME: needed?\n\nThis is needed by the min-should-match scorer in order to keep track of scorers which are behind the current document and advance the least-costly instance first.\n\nAlso a minor nitpick but I think we should move SpanPositionQueue to either its own java file or as an inner class of SpanOrQuery in order not to confuse incremental compilation.\n\nMaybe \"Specialize SpanPositionQueue similar to DisiPriorityQueue, inline the position comparison function.\" could be delayed to another issue in order to keep this one small? "
        },
        {
            "id": "comment-14492564",
            "author": "Paul Elschot",
            "date": "2015-04-13T16:13:04+0000",
            "content": "Robert,\n\nAnd if the long term goal is to merge the functionality of Spans into Scorer anyway,\n\nI think that we need some scoring mechanism added to Spans, and that completely merging Spans with Scorer will not happen. But we'll see.\n\nthen i'd prefer the instanceof check for now, rather than adding it to DISI, then having to take it away from DISI and put back into Scorer later.\n\nI don't mind the instanceof checks, but I do mind having the same code for it twice.\nShall I put it in an in between class TwoPhaseDISI (superclass of Scorer and Spans) so other DISI subclasses are not involved?\nThat would continue the merging   "
        },
        {
            "id": "comment-14492575",
            "author": "Paul Elschot",
            "date": "2015-04-13T16:21:25+0000",
            "content": "Adrien,\n\n\n //final long cost; //FIXME: needed?\n \nThis is needed by the min-should-match scorer ...\n\nI ran into that when I deleted ScorerPriorityQueue/ScorerWrapper and replaced them DisiPriorityQueue<Scorer> / DisiWrapper<Scorer>.\nI'll introduce a subclass of DisiWrapper<Scorer> for the min should match scorer, and a subclass of DisiWrapper<Spans> for SpanOr.\n\nI'll put SpanPositionQueue in a separate java file. "
        },
        {
            "id": "comment-14493706",
            "author": "Paul Elschot",
            "date": "2015-04-14T07:16:29+0000",
            "content": "Patch of 14 April 2015, one test method fails:\n\nant test  -Dtestcase=TestBasics -Dtests.method=testSpanComplex1 -Dtests.seed=BC9E11D8F8BBB280 -Dtests.slow=true\n\nAnd sometimes the TestBasics test case passes when no tests.seed is given. "
        },
        {
            "id": "comment-14493717",
            "author": "Paul Elschot",
            "date": "2015-04-14T07:25:55+0000",
            "content": "I'm posting this because it seems to be almost there,  I'll have very little time in the upcoming weeks, and to show that the asserting spans of LUCENE-6411 nicely catch this.\n\nThe patch includes the use of DisiPriorityQueue<Scorer> instead of ScorerPriorityQueue, otherwise there are no changes in the class hierarchy (DocIdSetIterator, DisiWrapper) compared to the previous patch.\n\n\nThe stack trace for the failing test is:\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBasics -Dtests.method=testSpanComplex1 -Dtests.seed=BC9E11D8F8BBB280 -Dtests.slow=true -Dtests.locale=in_ID -Dtests.timezone=Australia/Sydney -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.09s | TestBasics.testSpanComplex1 <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: invalid position access, state=DOC_UNVERIFIED: NearSpansOrdered(spanNear([AssertingSpanQuery(field:seven), AssertingSpanQuery(field:hundred)], 0, true))@0: -1 - -1\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([BC9E11D8F8BBB280:9C85EFEAFD8D21EE]:0)\n   [junit4]    > \tat org.apache.lucene.search.spans.AssertingSpans.nextStartPosition(AssertingSpans.java:80)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanOrQuery$1.fillPositionQueue(SpanOrQuery.java:285)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanOrQuery$1.nextStartPosition(SpanOrQuery.java:300)\n   [junit4]    > \tat org.apache.lucene.search.spans.AssertingSpans.nextStartPosition(AssertingSpans.java:86)\n   [junit4]    > \tat org.apache.lucene.search.spans.NearSpansOrdered.subSpansToFirstStartPosition(NearSpansOrdered.java:133)\n   [junit4]    > \tat org.apache.lucene.search.spans.NearSpansOrdered.toMatchDoc(NearSpansOrdered.java:65)\n   [junit4]    > \tat org.apache.lucene.search.spans.NearSpans.nextDoc(NearSpans.java:65)\n   [junit4]    > \tat org.apache.lucene.search.spans.NearSpansOrdered.nextDoc(NearSpansOrdered.java:48)\n   [junit4]    > \tat org.apache.lucene.search.spans.AssertingSpans.nextDoc(AssertingSpans.java:151)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanScorer.nextDoc(SpanScorer.java:51)\n   [junit4]    > \tat org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:192)\n   [junit4]    > \tat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:164)\n   [junit4]    > \tat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:35)\n   [junit4]    > \tat org.apache.lucene.search.AssertingBulkScorer.score(AssertingBulkScorer.java:69)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:563)\n   [junit4]    > \tat org.apache.lucene.search.AssertingIndexSearcher.search(AssertingIndexSearcher.java:102)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:367)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:486)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.searchAfter(IndexSearcher.java:344)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:355)\n   [junit4]    > \tat org.apache.lucene.search.CheckHits.checkHits(CheckHits.java:170)\n   [junit4]    > \tat org.apache.lucene.search.spans.TestBasics.checkHits(TestBasics.java:408)\n   [junit4]    > \tat org.apache.lucene.search.spans.TestBasics.testSpanComplex1(TestBasics.java:398)\n\n "
        },
        {
            "id": "comment-14493721",
            "author": "Paul Elschot",
            "date": "2015-04-14T07:32:00+0000",
            "content": "To be complete, the patch is against trunk with the last commit less than a day ago from SOLR-6692 ... \"only count match snippets\",\ngit sha1 id: 110eccd07f5d2c95b0f6c49f7d9224ed2e8ccfe1 "
        },
        {
            "id": "comment-14494218",
            "author": "Robert Muir",
            "date": "2015-04-14T15:06:26+0000",
            "content": "Paul, I'll apply the patch and dig into it a bit. Thanks for the work here. "
        },
        {
            "id": "comment-14494258",
            "author": "Robert Muir",
            "date": "2015-04-14T15:29:03+0000",
            "content": "Here is another seed from another test, find the same failure:\n\n   [junit4] Suite: org.apache.lucene.search.spans.TestSpanSearchEquivalence\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSpanSearchEquivalence -Dtests.method=testSpanOrVersusBooleanNear -Dtests.seed=2C8D07E17862417A -Dtests.locale=en_MT -Dtests.timezone=Pacific/Rarotonga -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 0.48s | TestSpanSearchEquivalence.testSpanOrVersusBooleanNear <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: invalid position access, state=DOC_UNVERIFIED: NearSpansOrdered(spanNear([AssertingSpanQuery(field:f), AssertingSpanQuery(field:q)], 10, true))@0: -1 - -1\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([2C8D07E17862417A:E42EBF56AD5D2367]:0)\n   [junit4]    > \tat org.apache.lucene.search.spans.AssertingSpans.nextStartPosition(AssertingSpans.java:80)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanOrQuery$1.fillPositionQueue(SpanOrQuery.java:285)\n   [junit4]    > \tat org.apache.lucene.search.spans.SpanOrQuery$1.nextStartPosition(SpanOrQuery.java:300)\n\n\n\nI will dig in a little bit more. I ran into a similar problem before with SpanNot, maybe this is a similar one, that happened like this:\n\n\tsub-approximation is positioned on docid 1\n\twe call sub.advance(2) and it returns 3\n\t<we do other processing and then move forward to doc 3, but we never called matches()>\n\n\n\nSo in that case we needed some state to be able to lazily call matches() once and only once when actually needed. SpanNot uses this state for its sub, which records the last document we called matches() for and the return value that matches() had.\n\n      int lastApproxDoc = -1;\n      boolean lastApproxResult = false;\n\n\n\nMaybe this one is a similar thing, i will look more. "
        },
        {
            "id": "comment-14494299",
            "author": "Robert Muir",
            "date": "2015-04-14T15:55:33+0000",
            "content": "OK i found the bug. sneaky one. in DISIWrapper this is my fix:\n\n  public int lastApproxMatchDoc = -2; // last doc of approximation that did match\n  public int lastApproxNonMatchDoc = -2; // last doc of approximation that did not match\n\n\n\nPreviously only one of these was initialized, the other was initialized to zero. So this could cause problems for docid 0. "
        },
        {
            "id": "comment-14494304",
            "author": "Robert Muir",
            "date": "2015-04-14T15:59:08+0000",
            "content": "Paul's patch just with the above changes to fix the test failure.\n\nI will look at benchmarking, API changes, and beasting tests to move this forward. Thanks Paul! "
        },
        {
            "id": "comment-14494709",
            "author": "Paul Elschot",
            "date": "2015-04-14T19:25:00+0000",
            "content": "Great, it was indeed almost there.\nBefore benchmarking there is another (small) optimization possible: topPositionSpans can be put at the object level and maintained together with byPositionQueue, and then it can also be tested for null in start/endPosition. "
        },
        {
            "id": "comment-14503423",
            "author": "Paul Elschot",
            "date": "2015-04-20T18:55:31+0000",
            "content": "Patch of 20 April 2015. This includes the fix by Robert in SpanOr, and:\nis based on todays trunk,\nhas topPositionSpans is at object level,\nrenames top to topDocSpans,\nadds a check for topPositionSpan==null in the payload methods,\nhas SpanPositionQueue in its own java file,\nadds method public static TwoPhaseIterator.asTwoPhaseIterator, instead of DocIdSeterator.asTwoPhaseIterator.\n\n "
        },
        {
            "id": "comment-14505941",
            "author": "Paul Elschot",
            "date": "2015-04-21T22:41:32+0000",
            "content": "Specialized version of SpanPositionQueue. This has a private static boolean lessThan(Spans,Spans) which might be good enough in combination with the JIT, and unused methods from PriorityQueue are removed. "
        },
        {
            "id": "comment-14510447",
            "author": "Robert Muir",
            "date": "2015-04-24T04:23:30+0000",
            "content": "+1 for this patch, it is very nice. I love that now spans share both conjunction and disjunction logic and support two-phase execution everywhere. \n\nI benchmarked and found no performance regressions with a variety of tasks, like filter intersection with disjunctions, minshouldmatch queries, etc.\n\nI created a contrived benchmark for SpanOr, \"spanMultiPhrase\" which just reuses the same tasks file from LUCENE-6421, but instead executes as SpanNear(SpanOr, ...). It takes 15 minutes per iteration, and isn't the greatest benchmark but so far i see up to 10% improvement in some cases for that benchmark.\n\nI will do some final tests and plan to commit this soon. "
        },
        {
            "id": "comment-14510471",
            "author": "ASF subversion and git services",
            "date": "2015-04-24T05:12:21+0000",
            "content": "Commit 1675776 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1675776 ]\n\nLUCENE-6373: complete two phase doc id iteration support for Spans "
        },
        {
            "id": "comment-14510485",
            "author": "ASF subversion and git services",
            "date": "2015-04-24T05:33:45+0000",
            "content": "Commit 1675780 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1675780 ]\n\nLUCENE-6373: complete two phase doc id iteration support for Spans "
        },
        {
            "id": "comment-14510486",
            "author": "Robert Muir",
            "date": "2015-04-24T05:34:18+0000",
            "content": "Paul, thank you! "
        },
        {
            "id": "comment-14511305",
            "author": "Paul Elschot",
            "date": "2015-04-24T16:27:47+0000",
            "content": "My pleasure, thanks for benchmarking.\nA last review found a no more used variable in nextStartPosition(), sorry:\n\ndiff --git a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java b/lucene/core/src/java/org/apache/l\nindex eca3635..9d0d09a 100644\n--- a/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java\n+++ b/lucene/core/src/java/org/apache/lucene/search/spans/SpanOrQuery.java\n@@ -288,8 +288,6 @@ public class SpanOrQuery extends SpanQuery implements Cloneable {\n         \n       @Override\n       public int nextStartPosition() throws IOException {\n-        DisiWrapper<Spans> topDocSpans = byDocQueue.top();\n-        assert topDocSpans.doc != NO_MORE_DOCS;\n         if (topPositionSpans == null) {\n           byPositionQueue.clear();\n           fillPositionQueue(); // fills byPositionQueue at first position\n\n "
        },
        {
            "id": "comment-14512955",
            "author": "Paul Elschot",
            "date": "2015-04-26T09:30:39+0000",
            "content": "Patch of 26 April 2015. Includes the removal of the unused variable in the Spans.nextStartPosition() method of SpanOr, and two lines to suppress compilation warnings (unchecked, rawtypes) for the generics used in DisiPriorityQueue and MinShouldMatchSumScorer. "
        },
        {
            "id": "comment-14512956",
            "author": "Paul Elschot",
            "date": "2015-04-26T09:32:28+0000",
            "content": "The specialization of SpanPositionQueue is at LUCENE-6453, I just removed the earlier version that I posted here. "
        },
        {
            "id": "comment-14512958",
            "author": "Paul Elschot",
            "date": "2015-04-26T09:34:19+0000",
            "content": "Reopened because of the patch of 26 April 2015. "
        },
        {
            "id": "comment-14516778",
            "author": "ASF subversion and git services",
            "date": "2015-04-28T10:26:28+0000",
            "content": "Commit 1676464 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1676464 ]\n\nLUCENE-6373: cleanup unused variable and generic array warnings "
        },
        {
            "id": "comment-14516782",
            "author": "ASF subversion and git services",
            "date": "2015-04-28T10:31:58+0000",
            "content": "Commit 1676466 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1676466 ]\n\nLUCENE-6373: cleanup unused variable and generic array warnings "
        },
        {
            "id": "comment-14516784",
            "author": "Robert Muir",
            "date": "2015-04-28T10:32:32+0000",
            "content": "Thanks for the cleanup patch Paul, I just committed it. "
        }
    ]
}