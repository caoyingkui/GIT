{
    "id": "SOLR-826",
    "title": "For the solr-ruby-refactoring movement",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - ruby - flare"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "This is a patch to add a new directory to the solr-ruby-refactoring \"branch\". It's a very lightweight blob of code for connecting, selecting, updating and deleting using Ruby. It requires the URI and Net::HTTP libraries. No tests at the moment but I think the comments will do for now.",
    "attachments": {
        "experiments.patch": "https://issues.apache.org/jira/secure/attachment/12392914/experiments.patch",
        "experiments.2.patch": "https://issues.apache.org/jira/secure/attachment/12392928/experiments.2.patch",
        "experiments.4.patch": "https://issues.apache.org/jira/secure/attachment/12393678/experiments.4.patch",
        "experiments.3.patch": "https://issues.apache.org/jira/secure/attachment/12393606/experiments.3.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Matt Mitchell",
            "id": "comment-12643192",
            "date": "2008-10-28T12:35:41+0000",
            "content": "This is even more stripped down. A basic connection with get/post methods. Keeping it simple like this would provide the possibility of mixing in different modules for higher-level methods like add, delete_by_id etc.. "
        },
        {
            "author": "Matt Mitchell",
            "id": "comment-12644305",
            "date": "2008-10-31T14:35:34+0000",
            "content": "Thoughts on an interface like this? Similar to what's there now I suppose, except for the add part.\n\n\n# add a single doc\nsolr.add :product_name=>'Waffle Pro II'\n\n# add a single doc with doc options (most common use probably)\nsolr.add {:product_name=>'Waffle Semi-Pro'}, :boost=>1.5\n\n# add multiple docs, with add options, doc options and field options\n\nsolr.add(:allowDups=>false, :commitWithin=>10) do |add|\n  add.doc :product_name=>'Waffle Pro II'\n  add.doc {:product_name=>'Waffle Semi-Pro'}, :boost=>1.5\n  add.doc(:boost=>10) do |doc|\n    doc.field :product_name, 'Waffle Basic'\n    doc.field :description, 'The fastest way to get from here to there', :boost=>10.0\n  end\nend\n\n# delete by id\nsolr.delete_by_id 1\n\n# delete multiples by id\nsolr.delete_by_id 1, 2, 3, 4\n\n# delete by query\nsolr.delete_by_query 'quantity:0'\n\n# delete multiples by query\nsolr.delete_by_query 'quantity:0', 'available:false'\n "
        },
        {
            "author": "Matt Mitchell",
            "id": "comment-12646164",
            "date": "2008-11-10T04:05:13+0000",
            "content": "Just to make it clear, the comment above was just me thinking (no code here to support it)... We can get to the fancy higher level API stuff with add-on modules down the road. "
        },
        {
            "author": "Matt Mitchell",
            "id": "comment-12646166",
            "date": "2008-11-10T04:13:46+0000",
            "content": "Here is a version that supports http (standard ruby) and jruby (direct connection) within the same interface. I'm trying my best to keep things as simple as possible and staying away from extra dependencies.\n\nI'm wondering, do we really need to support other response formats? If you decide to set the wt to xml, then returning the raw xml should be good enough right? What if someone wants to use Hpricot? What about REXML? If it's raw, then you could use whatever you'd like. It might be better to let people decide on how they'd like to handle alternate response formats? Thoughts? "
        },
        {
            "author": "Matt Mitchell",
            "id": "comment-12646459",
            "date": "2008-11-11T03:53:34+0000",
            "content": "Added exception handling when querying or updating.\n\n\tparses solr html response errors when using http connection\n\n\n\nReturn a Solr::Response::* if :wt == :ruby\nReturn a raw response (String) if :wt != :ruby\nCan set default_:wt in Solr::Server\nCan set :auto_commit in Solr::Server\nAdded xml escaping to values and attributes\n\n\nExamples:\n\nconnection = Solr::Connection::HTTP.new\n\n\n\tif running under jRuby, could also do:\n\tconnection = Solr::Connection::Direct.new('/solr-home/path')\n\n\n\nsolr = Solr::Server.new(connection, {:default_wt=>:ruby, :auto_commit=>true})\n\nr = solr.add :id=>1, :sku=>'L009'\nr.class == Solr::Response::Update\nputs r.query_time\n\n\n\traises exception (duplicate docs with same :id) - only works with HTTP connection\nr = solr.add :id=>1, :sku=>'L009'\n\n\n\nr = solr.query :q=>':'\nr.class == Solr::Response::Query\n\n\n\traises exception (invalid syntax)\nr = solr.query :q=>':'\n\n\n\nr = solr.query :q=>':', :wt=>:xml\nr.class == String\nh = Hpricot(r)\n\nr = solr.query :q=>':', :wt=>:json\nr.class == String\nj = JSON.parse(r)\n\nMain modules/classes:\n\nSolr\nSolr::XML < Xout (xml generator)\nSolr::Server\nSolr::Connection::HTTP\nSolr::Connection::Direct\nSolr::Connection::URLHelpers\nSolr::Response::Base\nSolr::Response::Query\nSolr::Response::Update "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13421450",
            "date": "2012-07-24T14:40:41+0000",
            "content": "solr-ruby has been \"retired\" to <https://github.com/erikhatcher/solr-ruby-flare/tree/master/solr-ruby>.  RSolr is Matt's API that most rubyists are using these days. "
        }
    ]
}