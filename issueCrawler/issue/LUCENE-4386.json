{
    "id": "LUCENE-4386",
    "title": "Query parser should generate FieldValueFilter for pure wildcard terms to boost query performance",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-BETA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In theory, a simple pure wildcard query (a single asterisk) is an inefficient way to select all documents that have any value in a field. Rather than users having to work around this issue by adding a separate boolean \"has\" field, it would be better to have the query parser directly generate the most efficient Lucene query for detecting all documents that have any value for a specified field. According to the discussion over on LUCENE-4376, the FieldValueFilter is the proper solution.\n\nProposed solution:\n\nQueryParserBase.getPrefixQuery could detect when the query is a pure wildcard (a single asterisk) and then generate a FieldValueFilter instead of a PrefixQuery. My understanding from LUCENE-4376 is that the following would work:\n\n\nnew ConstantScoreQuery(new FieldValueFilter(fieldname, false))\n\n\n\nOh, and the check for whether \"leading wildcard\" is enabled would need to be bypassed for this case.\n\nI still think it would be better to have PrefixQuery perform this optimization internally so that all apps would benefit, but this should be sufficient to address the main concern.\n\nThis improvement would improve the classic Lucene query parser and other query parsers based on it, including edismax. There might be other query parsers which won't see the impact of this change, but they can be updated separately.\n\nHow much performance benefit? Unknown, but supposedly significant. The goal is simply to have a simple pure wildcard be the obvious tool to select fields that have a value in a field.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-13T21:17:16+0000",
            "content": "I'm confused.  As Uwe allready noted in LUCENE-4376...\n\nThe problem is that it implicitely needs to build the FieldCache for that field, so automatism is no-go here. If you need that functionality, modify QueryParser.\n\n...that sounds to me like a pretty clear \"we can not automate this\" response, because using this class requires the FieldCache, and we can't know/assume if/when the FieldCache is safe for a field.\n\nam i missing something? ",
            "author": "Hoss Man",
            "id": "comment-13455303"
        },
        {
            "date": "2012-09-13T21:45:11+0000",
            "content": "I took Uwe's \"we can not automate this\" comment as applying to my request to handle it automatically within PrefixQuery. But this Jira is to do it in the query parser as I thought Uwe was seeming to indicate would work. If there is more to using the filter than advertised in LUCENE-3593, somebody will have to enlighten us. ",
            "author": "Jack Krupansky",
            "id": "comment-13455343"
        },
        {
            "date": "2012-09-13T21:51:52+0000",
            "content": "I would also note that the Javadoc for FieldValueFilter says \"This Filter request Bits from the FieldCache and build the bits if not present\" which I take as indicating that the filter will assure that the bits get added to the field cache if they aren't already there. ",
            "author": "Jack Krupansky",
            "id": "comment-13455346"
        },
        {
            "date": "2012-09-13T23:12:33+0000",
            "content": "The reason for my comment is not \"unsafe\" or whatever. It is just, that this filter needs FieldCache and that is a large performance impact on the first call when automatically build from QueryParser.\n\nI am strongly against adding this to Lucene's QueryParser by default. Solr already has support for : and similar, so it could use this filter in its own QueryParser impl (as replacement for the current ConstantScore RangeQuery, which is slow. ",
            "author": "Uwe Schindler",
            "id": "comment-13455418"
        },
        {
            "date": "2012-09-14T02:46:35+0000",
            "content": "\nI am strongly against adding this to Lucene's QueryParser by default.\n\n+1, I agree with Uwe. This is wrong to do by default. ",
            "author": "Robert Muir",
            "id": "comment-13455541"
        },
        {
            "date": "2012-09-15T12:48:27+0000",
            "content": "Unassigned issues -> 4.1 ",
            "author": "Robert Muir",
            "id": "comment-13456385"
        },
        {
            "date": "2013-07-23T18:44:42+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717034"
        },
        {
            "date": "2014-04-16T12:54:25+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970746"
        }
    ]
}