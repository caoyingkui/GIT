{
    "id": "SOLR-2809",
    "title": "searcher leases",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Leases/reservations on searcher instances would give us the ability to use the same searcher across phases of a distributed search, or for clients to send multiple requests and have them hit a consistent/unchanging view of the index. The latter requires something extra to ensure that the load balancer contacts the same replicas as before.",
    "attachments": {
        "SOLR-2809.patch": "https://issues.apache.org/jira/secure/attachment/12645416/SOLR-2809.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Andrzej Bialecki",
            "id": "comment-13120164",
            "date": "2011-10-04T14:38:07+0000",
            "content": "Multiple leases could lead to searchers piling up ... perhaps it's less expensive to pass around searcher versions and fail+retry distributed requests if the reported version from a node disagrees with the version obtained during earlier phases? I guess it depends on the rate of change, and consequently the likelihood of failure. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13120169",
            "date": "2011-10-04T14:41:12+0000",
            "content": "but fail+retry could lead to slow queries piling up? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13120185",
            "date": "2011-10-04T14:56:19+0000",
            "content": "Multiple leases could lead to searchers piling up\n\nIt's not so much the number, but how long.\nA good default would be perhaps 1 sec... long enough for most individual requests to complete, not long enough to cause massive pile-up.\n\n... perhaps it's less expensive to pass around searcher versions and fail+retry distributed requests if the reported version from a node disagrees with the version obtained during earlier phases?\n\nThat's a good idea, and would have been a nice simple way to do it before NRT appeared on the scene \n\nI guess it depends on the rate of change, and consequently the likelihood of failure.\n\nRight.  It would be nice to allow the user to select the trade-off.  For example with leases, the user could specify an expensive request (that is hopefully run infrequently) that absolutely needs consistency (and fails if it can't be achieved.)  The user could specify a longer lease for this request (like 60 sec) to ensure that it can normally complete.  This is much nicer than saying \"requests longer than the NRT commit frequency cannot be guaranteed to be correct\". "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13120187",
            "date": "2011-10-04T14:59:35+0000",
            "content": "In RT the searchers are cheap.  The easiest approach would be to record the segments and max doc ids used to satisfy phase 1 of a given distributed query, then send that signature back in subsequent phases.  The retry would only be necessary in the infrequent case of a merge have occurred.\n\nWith NRT it's probably best to implement a searcher policy similar to index deletion policy.  Then any timeout / searcher removal system can be implemented by the user, rather than dictated by Solr.  \n\nThe described searcher management system belongs in a module in Lucene rather than Solr, probably in one of Mike's new classes. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13120193",
            "date": "2011-10-04T15:05:28+0000",
            "content": "Distributed search already ensures that different phases of the same request go to the same replicas, so the remainder of this patch should be pretty easy.\n\nWe just need a SolrQueryRequest.getSearcher() that checks the request parameters.  If there is a reserve=1000 parameter, then the reference count is incremented an additional time, and is added to a map / priority queue (or whatever a separate timing thread looks at to decrement the ref after the lease is up), or updated if it already exists.  A unique id for the searcher is returned in the request header.\n\nIf the request params have \"searcher=1294929223\" then getSearcher() retrieves that version from the map if the lease hasn't expired (and applies a new lease if there is also a reserve param).\n\nThis seems nice and isolated from the rest of the solr code... no need to modify any of the guts of the complex SolrCore.getSearcher() "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13120196",
            "date": "2011-10-04T15:07:00+0000",
            "content": "\nThe retry would only be necessary in the infrequent case of a merge have occurred.\n\nI don't know that this is always true: if we support distributed stats (idf etc), then this assumption could break down in a lot of cases, because the stats from the first phase don't make sense with regards to the documents being scored in the second phrase.\n\nwith lucene's simple tf/idf there are probably less concerns, but if we are going to go this route we should consider how this will affect other scoring algorithms, especially ones that use 'global stats' for things like length normalization (BM25's avg dl, DFR, etc) versus just query-term importance. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13120211",
            "date": "2011-10-04T15:24:32+0000",
            "content": "\nif we support distributed stats (idf etc), then this assumption could break down in a lot of cases, because the stats from the first phase don't make sense with regards to the documents being scored in the second phrase.\n\nThey would make sense.  Though it's like discussing the wind since RT isn't completed.  Sounds like you're thinking of a general retry?  That's a good idea, it would need to retry the entire distributed query in all phases.\n\nThat functionality should be modular and should not be 'pre-baked / canned' into Solr.  [Again] a simple policy class would suffice here. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13120213",
            "date": "2011-10-04T15:26:58+0000",
            "content": "\nSounds like you're thinking of a general retry?\n\nI have no idea really, I was just bringing up the issue. We could always use algorithms like what you describe, you know I think we should cheat as much as possible for good performance (whatever that approach is) as long as we come up with tests to ensure it doesnt totally break down scoring (I'm not talking about relevance, but i don't want them returning NaN/Inf if they encounter a tf value > totalTermFreq stat from a previous phase) "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13120217",
            "date": "2011-10-04T15:31:23+0000",
            "content": "no need to modify any of the guts of the complex SolrCore.getSearcher()\n\nThat code should be removed entirely, better now in 4.x.\n\nThe unique id per searcher idea would work, however it needs to also implement a retry when a given id no longer exists.\n\nStill, this would be best implemented in the context of rewriting distributed search and the getSearcher code.  Otherwise is layering hacked up code on top of further hacked up code.  It's a mess to debug and change later. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13120218",
            "date": "2011-10-04T15:31:40+0000",
            "content": "We just need a SolrQueryRequest.getSearcher() that checks the request parameters. If there is a reserve [...]\n\nActually, since a single local request already holds the searcher open for as long as it takes the request to complete, more useful semantics might be for \"reserve\" to be additional time after a request has completed (i.e. in SolrQueryRequest.close()) "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13120223",
            "date": "2011-10-04T15:35:50+0000",
            "content": "SOLR-2778 is the issue that seeks to clean up and modularize the distributed search code.   "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13120267",
            "date": "2011-10-04T16:43:01+0000",
            "content": "I've been working on a similar idea, as a standalone utility class, that records searchers keyed by their IR.getVersion().\n\nI think this is important not only for consistency within a single distributed search request, but also across requests when a user does a follow-on action (next page, drill down/up, etc.), especially now that we have searchAfter where the \"last bottom\" can easily shift.\n\nI'll open a new issue; I'm not sure we can combine the approaches but maybe... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13120301",
            "date": "2011-10-04T17:30:01+0000",
            "content": "I'm not sure we can combine the approaches but maybe...\n\nYeah, Solr has had it's own searcher management since '04... I'm not sure it's practical to try and replace it all, esp when it seems so easy to build leases on top of that and not touch it at all.\nOne thing that comes to mind that we could share is a general purpose class LeaseManager<Key,LeasedResource>\nthat simply has a few methods like\n\nlong reserve(LeasedResource resource, long ms)\nLeasedResource lookup(Key key)\nvoid clearAll()\n\n\n\nInstead of LeasedResource, perhaps it could just be LeaseManager<Key, Closeable>()  as I think close() is the only thing that a LeaseManager would need to call? "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13120359",
            "date": "2011-10-04T18:26:13+0000",
            "content": "OK I opened LUCENE-3486 w/ my current patch. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14000805",
            "date": "2014-05-17T15:34:26+0000",
            "content": "OK, here's a proof-of-concept lease manager that implements the core functionality.  It's nice and small since it just uses the existing searcher management code.\n\nThe remaining work would be integration & HTTP-API:\n\n\tSolrCore would have a LeaseManager\n\tif a lease key is passed in, look up the searcher in the lease manager rather than getting the most recently registered searcher\n\tat the end of a request, do the lease if requested, and return the lease key to the client\n\n "
        }
    ]
}