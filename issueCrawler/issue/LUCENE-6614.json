{
    "id": "LUCENE-6614",
    "title": "IOUtils.spins doesn't work for NVMe drives",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "NVMe is the faster (than AHCI) protocol for newer SSDs that plug into the PCIE bus.\n\nI just built a new beast box with one of these drives, and the partition is named /dev/nvme0n1p1 while the device is /dev/nvme0n1 by Linux - this also appears in /sys/block with rotational=0.\n\nI think Steve Rowe also has an NVME drive ...\n\nUwe Schindler (who got the box working for me: thank you!!!) has ideas on how to fix it!",
    "attachments": {
        "LUCENE-6614.patch": "https://issues.apache.org/jira/secure/attachment/12742094/LUCENE-6614.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14602733",
            "author": "Dawid Weiss",
            "date": "2015-06-26T11:36:53+0000",
            "content": "On a related note, this method also has a problem with any Directory that is wrapped with a delegate (and eventually has an FSDirectory pointing to disk). All such Directories indicate spin=true. \n\nI don't have any ready solution for this. There are a couple of ways to correct it \u2013 move usesSpinningDrive() to be a method on the Directory, for example. Or more generic hasLargeSeekLatency...? "
        },
        {
            "id": "comment-14602738",
            "author": "Uwe Schindler",
            "date": "2015-06-26T11:45:41+0000",
            "content": "Here is a quick patch, completely untested (no Linux available at the moment). The idea:\n\nInstead of stripping off digits from the partition name and do exists() over and over, I think the better solution is to take what's already there and not do brute force. This patch lists the directory contents of /sys/block and for each file name it encounters, it checks if the partition we got from mountpoint starts with the /sys/block device name. Of course there can be overlap (loop1 vs loop10), so the largest match is taken.\n\nMaybe Mike has some time to test, I will do this later in my VirtualBOX. I also added a test for this type of device naming. "
        },
        {
            "id": "comment-14602739",
            "author": "Uwe Schindler",
            "date": "2015-06-26T11:46:56+0000",
            "content": "I don't have any ready solution for this. There are a couple of ways to correct it \u2013 move usesSpinningDrive() to be a method on the Directory, for example. Or more generic hasLargeSeekLatency...?\n\n+1 Yes!!! I like the name! The current solution is horrible. Directory should have a default method returning (true) slow, but any directory like FSdir can override and call IOUtils.spins(). "
        },
        {
            "id": "comment-14602740",
            "author": "Dawid Weiss",
            "date": "2015-06-26T11:48:25+0000",
            "content": "The upside of moving it to Directory would be that any (arbitrarily complex) delegates would simply delegate further or provide composition (for example \u2013 any large seek subdirectory -> return large seek). "
        },
        {
            "id": "comment-14602775",
            "author": "Dawid Weiss",
            "date": "2015-06-26T12:05:42+0000",
            "content": "Thinking about it I think the method should be explicitly named after what it looks for \u2013 we're looking for low-cost random access drives (a RAM directory or a directory based on tmpfs would also return true), so the method could be called simply Directory.supportsFastRandomAccess(). "
        },
        {
            "id": "comment-14602788",
            "author": "Uwe Schindler",
            "date": "2015-06-26T12:14:52+0000",
            "content": "Dawid Weiss: Could you open a separate issue? I am +1 to this approach. I think Robert discussed about this in the original issue, too. But he wanted a simple and quick solution.\n\nBy the way: spins() returns false on mounts of type tmpfs! "
        },
        {
            "id": "comment-14602802",
            "author": "Dawid Weiss",
            "date": "2015-06-26T12:26:02+0000",
            "content": "> By the way: spins() returns false on mounts of type tmpfs!\n\nYes, I know. But I think it should return true (if it's possible to detect a ram mount). Like I said \u2013 the point here is to detect drives that support fast random-access (nearly zero seek penalty) and there seem to be more options than just the ssd-vs.-rotational separation. "
        },
        {
            "id": "comment-14602810",
            "author": "Robert Muir",
            "date": "2015-06-26T12:32:14+0000",
            "content": "-1\n\ntmpfs is not a spinning disk. "
        },
        {
            "id": "comment-14602811",
            "author": "Uwe Schindler",
            "date": "2015-06-26T12:32:30+0000",
            "content": "spins=false is a RAM mount because it detects tmpfs! spins=false => good! "
        },
        {
            "id": "comment-14602813",
            "author": "Uwe Schindler",
            "date": "2015-06-26T12:33:55+0000",
            "content": "OK, let's move this discussion to the new issue. I think this one here is to detect SSDs correctly also with the new device numbering scheme ovm NVMe devices. "
        },
        {
            "id": "comment-14602816",
            "author": "Dawid Weiss",
            "date": "2015-06-26T12:36:32+0000",
            "content": "> tmpfs is not a spinning disk.\n\nSo? Does it have large seek latency? I think the criterion should be: could it run multiple disk operations (like merges) at the same time without additional performance penalty. If it passes then it's just as good as an SSD, regardless of what's behind it. "
        },
        {
            "id": "comment-14602826",
            "author": "Robert Muir",
            "date": "2015-06-26T12:49:13+0000",
            "content": "I'm totally against returning anything but false for tmpfs. Sorry.\n\nWe need to get this method out of lucene. Please propose something to the JDK or something like that. "
        },
        {
            "id": "comment-14602835",
            "author": "Dawid Weiss",
            "date": "2015-06-26T12:55:07+0000",
            "content": "> We need to get this method out of lucene.\n\nThis would be an ideal world. I mentioned it in one of my previous comments on another issue \u2013 the CMS should be agnostic to hardware and have the ability to maximize throughput for the current system conditions rather than rely on detection of spinning/ non-spinning drives, etc. Unfortunately I don't know how to implement this.\n\nIn the mean time there is a problem that's unsolvable - if you have a custom Directory (or a DirectoryFilter) that eventually reaches to disk then the CMS will always come with defaults as if the disk was rotational. There are no solutions to this other than cloning the merging strategy.  "
        },
        {
            "id": "comment-14602839",
            "author": "Robert Muir",
            "date": "2015-06-26T12:57:46+0000",
            "content": "Its not a problem really: the defaults totally work.\n\nIf you have a custom Directory, you are a seriously advanced user, and as one, you can set CMS parameters yourself. \n\nSo i see it that as a non-issue. "
        },
        {
            "id": "comment-14602844",
            "author": "Dawid Weiss",
            "date": "2015-06-26T13:04:20+0000",
            "content": ">  you are a seriously advanced user\n\nThe only reason I know it's working at sub-par performance level is because I am an advanced user... I know the source code. \n\nI disagree with your opinion, but I respect it since I understand those low-level methods to detect various things would proliferate. I still have this vision of the CMS just being smart enough to figure out how many concurrent merges it can run without blocking I/O. This really shouldn't be that difficult since it's essentially a maximization problem of f(count-of-merge-threads, max-throughput-per-thread) = total merge throughput. The problem is in how to pick a strategy that is robust enough to handle and recover from intermediate external system loads, disk/ system buffer spills, etc. An interesting research problem, really. "
        },
        {
            "id": "comment-14602849",
            "author": "Robert Muir",
            "date": "2015-06-26T13:08:58+0000",
            "content": "Writing a custom directory is incredibly risky. Let's be honest, its really something that should be avoided at all costs, its almost asking for index corruption.\n\nLook at the \"simple\" ones lucene ships with, we have a hard enough time keeping those working correctly.\n\nSo I really have absolutely zero sympathy for someone who writes a custom directory. They can set CMS parameters. And they always should if they care. the current logic does not work on windows or OS X for example.\n\nIts a statistical hack. it improves defaults because the vast majority of users are on linux, and the vast majority don't write custom directories. Lets just leave it as a hack and please not put it on Directory. methods on Directory are very expensive to maintain. They are incredibly hard to remove.  "
        },
        {
            "id": "comment-14602865",
            "author": "Michael McCandless",
            "date": "2015-06-26T13:23:43+0000",
            "content": "To verify there really is a bug here (sorry I should have done this in the OP), I installed Elasticsearch 2.0 pre-release and started it and I see this in its startup logging output:\n\n\n[2015-06-26 09:17:54,024][INFO ][env                      ] [Windeagle] using [1] data paths, mounts [[/ (/dev/disk/by-uuid/d7b5a26e-bf10-4789-8443-9fd98798c554)]], net usable_space [364.3gb], net total_space [366.6gb], spins? [possibly], types [ext4]\n\n\n\nSo indeed the bug is really (spins? should say \"no\", not \"possibly\"), but the plot thickens (maybe?) a bit, because of this /dev/disk/by-uuid/... mount point ... or maybe our existing heuristics deal with this dereference already ... "
        },
        {
            "id": "comment-14602874",
            "author": "Robert Muir",
            "date": "2015-06-26T13:31:50+0000",
            "content": "The best way to improve this is to write a unit test for your drive. See TestIOUtils where you can mock up things like /sys and /dev. "
        },
        {
            "id": "comment-14602898",
            "author": "Uwe Schindler",
            "date": "2015-06-26T13:49:24+0000",
            "content": "I think we are talking about different issues here. This is about the problem of detecting a NVMe SSD, which should work, but doesn't based on the way how NVMe's partitions are part of device name. We are not talking about Directory or if tmpfs spins. Please move this to another issue!\n\nThis issue should fix the NVMe device naming and make the bruteforce stripping of partition numbers work better (instead it checks what is there and matches the /sys/block directory contents against the device name). So no bruteforcing and it works also with NVMe.\n\nThe attached patch passes tests on my local Linux computer, so it should really work. Mike, did you check my patch and verify that it works?\n\n/dev/disk/by-uuid/\n\nThat should work, because the IOUtils.spins() code dereferences symbolic links. So just try my patch, please. "
        },
        {
            "id": "comment-14602903",
            "author": "Uwe Schindler",
            "date": "2015-06-26T13:50:50+0000",
            "content": "The best way to improve this is to write a unit test for your drive. See TestIOUtils where you can mock up things like /sys and /dev.\n\nSee the attached patch. I added a unit test and fixed IOUtils.spins to work better with stripping partition numbers. It passes locally, I am just waiting for Mike to confirm. Maybe you also have a look at my patch and test, please! "
        },
        {
            "id": "comment-14602912",
            "author": "Robert Muir",
            "date": "2015-06-26T13:57:06+0000",
            "content": "+1, thank you Uwe. I like the test and also like the code cleanups. "
        },
        {
            "id": "comment-14602914",
            "author": "Steve Rowe",
            "date": "2015-06-26T14:00:03+0000",
            "content": "I think Steve Rowe also has an NVME drive ...\n\nYes, I do.\n\nIn fact, Debian 8 failed to install properly because of the new NVMe device naming scheme, and I had to patch grub-installer and initramfs-tools to deal with it - see the bug reports I created: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=785147 and https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=785149.\n\nIn the grub-installer script's device-to-disk method, which is a longish regex to strip off suffixes based on disk prefixes, there is a comment \"# This should probably be rewritten using udevadm or similar.\"\n\nOn my system, udevadm info /dev/nvme0n1p2 (the root mount point) says:\n\n\nP: /devices/pci0000:00/0000:00:02.0/0000:02:00.0/nvme/nvme0/nvme0n1/nvme0n1p2\nN: nvme0n1p2\nS: disk/by-partuuid/7c4cb587-74ba-471f-8a6d-8b5d94c3c86b\nS: disk/by-uuid/9954878e-5783-4f4b-bca3-55d689f221da\nE: DEVLINKS=/dev/disk/by-partuuid/7c4cb587-74ba-471f-8a6d-8b5d94c3c86b /dev/disk/by-uuid/9954878e-5783-4f4b-bca3-55d689f221da\nE: DEVNAME=/dev/nvme0n1p2\nE: DEVPATH=/devices/pci0000:00/0000:00:02.0/0000:02:00.0/nvme/nvme0/nvme0n1/nvme0n1p2\nE: DEVTYPE=partition\nE: ID_FS_TYPE=ext4\nE: ID_FS_USAGE=filesystem\nE: ID_FS_UUID=9954878e-5783-4f4b-bca3-55d689f221da\nE: ID_FS_UUID_ENC=9954878e-5783-4f4b-bca3-55d689f221da\nE: ID_FS_VERSION=1.0\nE: ID_PART_ENTRY_DISK=259:0\nE: ID_PART_ENTRY_NUMBER=2\nE: ID_PART_ENTRY_OFFSET=1050624\nE: ID_PART_ENTRY_SCHEME=gpt\nE: ID_PART_ENTRY_SIZE=646338560\nE: ID_PART_ENTRY_TYPE=0fc63daf-8483-4772-8e79-3d69d8477de4\nE: ID_PART_ENTRY_UUID=7c4cb587-74ba-471f-8a6d-8b5d94c3c86b\nE: ID_PART_TABLE_TYPE=gpt\nE: ID_PART_TABLE_UUID=c454b1a9-e191-4d93-a9af-db80b81485a8\nE: MAJOR=259\nE: MINOR=2\nE: SUBSYSTEM=block\nE: TAGS=:systemd:\nE: USEC_INITIALIZED=11060677\n\n\n\nSimilarly, taking the /by-uuid/ path from E: DEVLINKS above, udevadm info /dev/disk/by-uuid/9954878e-5783-4f4b-bca3-55d68 says:\n\n\nP: /devices/pci0000:00/0000:00:02.0/0000:02:00.0/nvme/nvme0/nvme0n1/nvme0n1p2\nN: nvme0n1p2\nS: disk/by-partuuid/7c4cb587-74ba-471f-8a6d-8b5d94c3c86b\nS: disk/by-uuid/9954878e-5783-4f4b-bca3-55d689f221da\nE: DEVLINKS=/dev/disk/by-partuuid/7c4cb587-74ba-471f-8a6d-8b5d94c3c86b /dev/disk/by-uuid/9954878e-5783-4f4b-bca3-55d689f221da\nE: DEVNAME=/dev/nvme0n1p2\nE: DEVPATH=/devices/pci0000:00/0000:00:02.0/0000:02:00.0/nvme/nvme0/nvme0n1/nvme0n1p2\nE: DEVTYPE=partition\nE: ID_FS_TYPE=ext4\nE: ID_FS_USAGE=filesystem\nE: ID_FS_UUID=9954878e-5783-4f4b-bca3-55d689f221da\nE: ID_FS_UUID_ENC=9954878e-5783-4f4b-bca3-55d689f221da\nE: ID_FS_VERSION=1.0\nE: ID_PART_ENTRY_DISK=259:0\nE: ID_PART_ENTRY_NUMBER=2\nE: ID_PART_ENTRY_OFFSET=1050624\nE: ID_PART_ENTRY_SCHEME=gpt\nE: ID_PART_ENTRY_SIZE=646338560\nE: ID_PART_ENTRY_TYPE=0fc63daf-8483-4772-8e79-3d69d8477de4\nE: ID_PART_ENTRY_UUID=7c4cb587-74ba-471f-8a6d-8b5d94c3c86b\nE: ID_PART_TABLE_TYPE=gpt\nE: ID_PART_TABLE_UUID=c454b1a9-e191-4d93-a9af-db80b81485a8\nE: MAJOR=259\nE: MINOR=2\nE: SUBSYSTEM=block\nE: TAGS=:systemd:\nE: USEC_INITIALIZED=11060677\n\n\n\nIn both cases, E: DEVPATH has the correct block device name as the second-to-last path segment. "
        },
        {
            "id": "comment-14602918",
            "author": "Steve Rowe",
            "date": "2015-06-26T14:04:51+0000",
            "content": "\n/dev/disk/by-uuid/\nThat should work, because the IOUtils.spins() code dereferences symbolic links. So just try my patch, please.\n\nLooks to me like it will work:\n\n\n$ ls -l /dev/disk/by-uuid/9954878e-5783-4f4b-bca3-55d689f221da     \nlrwxrwxrwx 1 root root 15 Jun 23 18:20 /dev/disk/by-uuid/9954878e-5783-4f4b-bca3-55d689f221da -> ../../nvme0n1p2\n\n "
        },
        {
            "id": "comment-14602920",
            "author": "Uwe Schindler",
            "date": "2015-06-26T14:06:34+0000",
            "content": "Improved patch. This one adds some fake files to /sys/block to verify that it takes the longest patch for matching against the device name from mount point.\n\nTo me this looks good, just waiting for comments & confirmation from Mike. "
        },
        {
            "id": "comment-14602922",
            "author": "Uwe Schindler",
            "date": "2015-06-26T14:12:12+0000",
            "content": "Steve Rowe: Can you also test the patch if it returns spins=false for the NVMe device on your machine.\n\nBy the way: Mike and I had also problems with booting from NVMe, but in his case the BIOS did not detect it and was not able to boot from it. The Ubuntu installer wans able to handle the device name, but we were not able to boot. I helped him to find the fix (my experience with all this kind of shit in earlier days when I had a DEC Alpha Machine with SATA disks) was to use an (Elastic-)USB stick and make the Ubuntu installer mount it as /boot, so grub and kernel went onto it. By that the kernel and Grub bootloader are loaded from the USB drive and it chains to boot with NVMe as root mount. Also Ubuntu kernel updates worked perfectly, because of /boot as mount point. "
        },
        {
            "id": "comment-14602930",
            "author": "Steve Rowe",
            "date": "2015-06-26T14:22:18+0000",
            "content": "\u0010 Mike and I had also problems with booting from NVMe, but in his case the BIOS did not detect it and was not able to boot from it. \n\nI had similar issues, and ASUS support (ASUS mobo) actually told me that booting the NVMe drive wasn't possible.... Turns out all I had to do was select the \"UEFI:optical drive\" option as the first boot device from the BIOS, then boot into the installation DVD. I selected GPT partitions from the installer's partitioning menu, made the PCIe-SSD main OS partition bootable, and installed the Grub boot loader.  No chaining required. "
        },
        {
            "id": "comment-14602934",
            "author": "Michael McCandless",
            "date": "2015-06-26T14:25:14+0000",
            "content": "I tested the patch with a small standalone Java static main, and confirmed I get \"true\" before, and \"false\" with the patch!  Thank you Uwe Schindler! "
        },
        {
            "id": "comment-14602977",
            "author": "Steve Rowe",
            "date": "2015-06-26T14:45:18+0000",
            "content": "I tested with the following in TestIOUtils:\n\n\n  public void testRealNVME() throws Exception {\n    Path dir = createTempDir();\n    dir = FilterPath.unwrap(dir).toRealPath();\n    assertFalse(IOUtils.spinsLinux(dir));\n  }\n\n\n\nWhich caused:\n\n\n  [junit4] ERROR   0.15s | TestIOUtils.testRealNVME <<<\n   [junit4]    > Throwable #1: java.security.AccessControlException: access denied (\"java.io.FilePermission\" \"/dev/nvme0n1p2\" \"read\")\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([45BE167DAA8713BE:C4DF5928E609489]:0)\n   [junit4]    >        at java.security.AccessControlContext.checkPermission(AccessControlContext.java:457)\n   [junit4]    >        at java.security.AccessController.checkPermission(AccessController.java:884)\n   [junit4]    >        at java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n   [junit4]    >        at java.lang.SecurityManager.checkRead(SecurityManager.java:888)\n   [junit4]    >        at sun.nio.fs.UnixPath.checkRead(UnixPath.java:795)\n   [junit4]    >        at sun.nio.fs.UnixPath.toRealPath(UnixPath.java:827)\n   [junit4]    >        at org.apache.lucene.util.IOUtils.spinsLinux(IOUtils.java:495)\n   [junit4]    >        at org.apache.lucene.util.TestIOUtils.testRealNVME(TestIOUtils.java:361)\n\n\n\nI added -Dtests.useSecurityManager=false to the ant cmdline, and the test passed.  When I reverted the patch, the test failed.\n\nSo it works for me. "
        },
        {
            "id": "comment-14602995",
            "author": "Uwe Schindler",
            "date": "2015-06-26T14:54:33+0000",
            "content": "Hi,\nI added another test: This creates an Ubuntu-like mount point with UUID and creates the symlinks. This is only supported on file systems that support symlinks, so there is an additional assume (not all filesystems on Linux support symlinks... I have a remote samba here to my windows box and it did not!). For this to work I added an additional policy entry.\n\nThe test emulates the standard case: mount point points to /dev/disk/by-uuid/...\n\nI think patch is ready. Robert Muir, are you fine with the new test using symlinks? "
        },
        {
            "id": "comment-14602997",
            "author": "Steve Rowe",
            "date": "2015-06-26T14:56:35+0000",
            "content": "Here's the failure message for my test without the patch (the trailing \"p\" shouldn't be there on the block device name):\n\n\n   [junit4] ERROR   0.08s | TestIOUtils.testRealNVME <<<\n   [junit4]    > Throwable #1: java.nio.file.NoSuchFileException: /sys/block/nvme0n1p/queue/rotational\n\n "
        },
        {
            "id": "comment-14603002",
            "author": "Uwe Schindler",
            "date": "2015-06-26T15:00:13+0000",
            "content": "Thanks Steve, exactly that one was the problem! The \"simply strip digits off the device name\" was not working for the new device naming scheme. "
        },
        {
            "id": "comment-14603009",
            "author": "Uwe Schindler",
            "date": "2015-06-26T15:07:53+0000",
            "content": "I had similar issues, and ASUS support (ASUS mobo) actually told me that booting the NVMe drive wasn't possible.... Turns out all I had to do was select the \"UEFI:optical drive\" option as the first boot device from the BIOS, then boot into the installation DVD. I selected GPT partitions from the installer's partitioning menu, made the PCIe-SSD main OS partition bootable, and installed the Grub boot loader. No chaining required.\n\nThis would have been our \"other option\". Michael McCandless, maybe try to install Ubuntu on a GPT formatted disk instead of old style BIOS partitions. We had that in mind, but to us it looked like the device is not seen at all. Maybe the BIOS just looks for devices with GPT partitions and does not even show those with 80s-style BIOS  "
        },
        {
            "id": "comment-14603026",
            "author": "Robert Muir",
            "date": "2015-06-26T15:15:51+0000",
            "content": "\nI think patch is ready. Robert Muir, are you fine with the new test using symlinks?\n\nThe check is wrong. It can actually work on windows if you have system privs to do it, among other reasons. Please do it like this:\n\ntry {\n  Files.createSymbolicLink(x, y);\n} catch (UnsupportedOperationException | IOException e) {\n  assumeNoException(\"test requires filesystem that supports symbolic links\", e);\n}\n\n "
        },
        {
            "id": "comment-14603028",
            "author": "Steve Rowe",
            "date": "2015-06-26T15:16:27+0000",
            "content": "Maybe the BIOS just looks for devices with GPT partitions and does not even show those with 80s-style BIOS \n\nMy BIOS shows my single optical drive as if it were two: once as UEFI and once as \"regular\".  AFAICT, simply booting into the media on the optical drive in UEFI mode allowed the BIOS to see the NVMe drive. "
        },
        {
            "id": "comment-14603033",
            "author": "Robert Muir",
            "date": "2015-06-26T15:20:06+0000",
            "content": "Also the link permission is maybe a little dangerous for people. If there is a bug in the test it could do potentially cause real harm.\n\nMaybe it should have an additional catch block for SecurityException like so:\n\n} catch (SecurityException e) {\n  assumeNoException(\"test cannot create symbolic links with security manager enabled\", e);\n}\n\n "
        },
        {
            "id": "comment-14603038",
            "author": "Uwe Schindler",
            "date": "2015-06-26T15:23:53+0000",
            "content": "The check is wrong. It can actually work on windows if you have system privs to do it, among other reasons. Please do it like this:\n\nYes. But my check was exactly like that...? Actually I changed it to this exact code - I just had the exceptions in other order.\n\nWe don't run test currently on Windows at all (all of those spins tests are assumeFalsed). The problem why I added the catch/assume was to make sure it also works if some Linux filesystem does not have symlinks... (I tested on Linux where it failed on a mounted Samba FS with my checkout). But test of course passed with local FS. "
        },
        {
            "id": "comment-14603051",
            "author": "Robert Muir",
            "date": "2015-06-26T15:33:25+0000",
            "content": "\nWe don't run test currently on Windows at all (all of those spins tests are assumeFalsed). \n\nNot all of them: only 3 of them. And i don't know if those assumes are valid, maybe they in fact work on windows? Its all done with mocks. "
        },
        {
            "id": "comment-14603469",
            "author": "Uwe Schindler",
            "date": "2015-06-26T19:31:54+0000",
            "content": "They dont work on windows, I checked already  Maybe I can look into this but the chrooting somehow fails. Its unrelated.\n\nI just added the assume for the symlinking. Because this also sometimes fails on Linux depending on file system (I ran tests on Samba mount with my checkout on remote checkout). "
        },
        {
            "id": "comment-14603940",
            "author": "ASF subversion and git services",
            "date": "2015-06-27T03:35:02+0000",
            "content": "Commit 1687883 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1687883 ]\n\nLUCENE-6614: Improve partition detection in IOUtils#spins() so it works with NVMe drives "
        },
        {
            "id": "comment-14603942",
            "author": "ASF subversion and git services",
            "date": "2015-06-27T03:37:02+0000",
            "content": "Commit 1687884 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1687884 ]\n\nMerged revision(s) 1687883 from lucene/dev/trunk:\nLUCENE-6614: Improve partition detection in IOUtils#spins() so it works with NVMe drives "
        },
        {
            "id": "comment-14603943",
            "author": "Uwe Schindler",
            "date": "2015-06-27T03:38:12+0000",
            "content": "If I have some time, I will look into the chroot code of the MockFileSystem so I can make it work with Windows. Currently it breaks because of unexpected drive letters. "
        },
        {
            "id": "comment-14713178",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:59+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}