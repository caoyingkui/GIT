{
    "id": "LUCENE-7277",
    "title": "Make Query.hashCode and Query.equals abstract",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "priority": "Trivial",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Custom subclasses of the Query class have the default implementation of hashCode/equals that make all instances of the subclass equal. If somebody doesn't know this it can be pretty tricky to debug with IndexSearcher's query cache on. \n\nIs there any rationale for declaring it this way instead of making those methods abstract (and enforcing their proper implementation in a subclass)?\n\n\n  public int hashCode() {\n    return getClass().hashCode();\n  }\n\n  public boolean equals(Object obj) {\n    if (obj == null)\n      return false;\n    return getClass() == obj.getClass();\n  }",
    "attachments": {
        "LUCENE-7277-20160518.patch": "https://issues.apache.org/jira/secure/attachment/12804801/LUCENE-7277-20160518.patch",
        "LUCENE-7277.patch": "https://issues.apache.org/jira/secure/attachment/12804364/LUCENE-7277.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15283549",
            "author": "Adrien Grand",
            "date": "2016-05-14T13:05:57+0000",
            "content": "+1 on making these abstract, especially now that the boost is gone from the base class "
        },
        {
            "id": "comment-15283854",
            "author": "Paul Elschot",
            "date": "2016-05-15T15:00:59+0000",
            "content": "The rationale is that this code is common to some subclasses of Query, see also the patch at LUCENE-6372.\n\nThere is nothing specific in this code for the Query class, any abstract class without attributes might have these definitions.\nIs there a way to enforce overriding a non abstract method in a subclass?\n\nAside: somehow this reminds me of the TermQuery constructors, see LUCENE-6821 and LUCENE-4483.\nIt's probably better to be on the safe side here too, and make these methods abstract.\n\nOtherwise we could add a remark in the javadocs of these methods that these methods should normally be overridden and called via super.\n\nA reminder in the javadocs of IndexSearcher would also help.\n "
        },
        {
            "id": "comment-15283932",
            "author": "Dawid Weiss",
            "date": "2016-05-15T19:19:12+0000",
            "content": "I fail see how an equivalence relationship over all objects of a class could be useful for caching reason (perhaps with the exception of MatchAllQuery)? I know for a fact it's misleading because a seasoned developer made the mistake of not overriding it (assuming the defaults are instance-equivalence, inherited from Object).\n\nIs there a way to enforce overriding a non abstract method in a subclass?\n\nYes, you redeclare an overriden method as an abstract one. Then all subclasses have to reimplement it properly. "
        },
        {
            "id": "comment-15283975",
            "author": "Paul Elschot",
            "date": "2016-05-15T21:38:06+0000",
            "content": "I fail see how an equivalence relationship over all objects of a class could be useful for caching reason\nThe idea is to make super.equals() determine equality as far as the (object of the) superclass is concerned, and when it returns true to test the local class attributes.\n\nit's misleading ... assuming defaults ... inherited from Object\nSo at least javadocs are needed to indicate that the current implementation only determines class equivalence.\n\nredeclare an overridden method as an abstract one\nThanks for that.\n\nSo there are some solutions here:\n\n\tjavadocs only (not preferred),\n\tjavadocs + redeclaration of overridden method as abstract\n\tabstract methods only\n\n\n\nI'm fine with the latter two.\nRedeclaration is probably a smaller change because it would keep the common code in the superclass.\n\n "
        },
        {
            "id": "comment-15284096",
            "author": "David Smiley",
            "date": "2016-05-16T03:05:00+0000",
            "content": "+1 to make abstract only. "
        },
        {
            "id": "comment-15284233",
            "author": "Dawid Weiss",
            "date": "2016-05-16T07:38:23+0000",
            "content": "While it may sound like a good idea to put some of the shared \"equivalence checks\" in the superclass, it's actually the misleading part because, if left as-is and not overridden in a subclass, it results in an incorrect behavior (the query object is cached for all instances of the subclass).\n\nIf query hash/equals is so important (and it is), I'd make it an abstract method to enforce proper override in all subclasses. "
        },
        {
            "id": "comment-15286188",
            "author": "Dawid Weiss",
            "date": "2016-05-17T07:51:14+0000",
            "content": "So I'm thinking about something like this (it's not a complete patch, but given an idea what the pattern looks like).\n\nLooking at the current implementation only convinces me that the delegation pattern to superclass makes little sense \u2013 every query subclass is typically different, so it really should implement these correctly for its own case.\n\nI also opted to remove Class.hashCode() from hashCode's mixing functions, even if there are collisions they should be infrequent and easily solvable with equals(), so I don't see the point of computing it. But it's a matter of taste. "
        },
        {
            "id": "comment-15286192",
            "author": "Dawid Weiss",
            "date": "2016-05-17T07:54:19+0000",
            "content": "Corrected patch (wrong import). "
        },
        {
            "id": "comment-15287360",
            "author": "Paul Elschot",
            "date": "2016-05-17T19:29:48+0000",
            "content": "LGTM, shall I try this on the span queries? "
        },
        {
            "id": "comment-15287368",
            "author": "Dawid Weiss",
            "date": "2016-05-17T19:32:37+0000",
            "content": "Yes, absolutely, if you have time, do it, go ahead! I noticed some endpoints of inheritance hierarchy (leaf classes) actually do not override equals and rely on superclasses \u2013 this seems incorrect to me, but perhaps there's a valid reason why this is the case. "
        },
        {
            "id": "comment-15287373",
            "author": "Paul Elschot",
            "date": "2016-05-17T19:36:24+0000",
            "content": "For leaf classes without overriding this used to work because of the getClass() in Query.equals() and Query.hashCode().\nWould it be ok use that in the intermediate span classes? "
        },
        {
            "id": "comment-15287396",
            "author": "Dawid Weiss",
            "date": "2016-05-17T19:45:29+0000",
            "content": "What I meant was: if they're different Query classes then the equivalence should be object-specific, not class-specific, right? Otherwise what's the point of having those different classes \u2013 are all of their objects really equal? "
        },
        {
            "id": "comment-15287419",
            "author": "Paul Elschot",
            "date": "2016-05-17T19:53:30+0000",
            "content": "An intermediate class with attributes uses these attributes in its equals()/hashCode(), and a leaf class without attributes currently still has its class used by the default implementation that is called via super.\n\nThe same can be done with sameClassAs() from the patch for equals(), combined with a getClass() in an intermediate hashCode() implementation. I think I'll give that a try. "
        },
        {
            "id": "comment-15289790",
            "author": "Paul Elschot",
            "date": "2016-05-18T20:49:35+0000",
            "content": "While trying this, I found that CommonTermsQuery is still mutable, and that is a bug iirc. "
        },
        {
            "id": "comment-15289910",
            "author": "Paul Elschot",
            "date": "2016-05-18T21:47:59+0000",
            "content": "Patch of 18 May 2016.\n\nThis is for lucene core and for the other lucene modules, solr fails to compile.\n\nI added Objects.requireNonNull in a few constructors to simplify the hashCode/equals implementations.\n\nIn the suggest module the queries throw UOE in hashCode/equals, that is probably correct, but I'm not sure. "
        },
        {
            "id": "comment-15290616",
            "author": "Dawid Weiss",
            "date": "2016-05-19T07:26:06+0000",
            "content": "Paul, which git commit is this patch against? Because, oddly, it doesn't apply for me now (master) and the commit sha's inside the patch I can't find in my local checkout... odd.\n\nIn any case, my notes from manual review:\n\n\n\tone of the reasons I don't like getClass().hashCode() is that it changes with every execution and runtime (classes delegate up to object identity which is ephemeral). While I'm a big fan of randomized testing, I'd like to keep things predictable and with a changing hashCode the layout of hashmaps (iteration order, collisions) will be different every time \u2013 something that may or may not drive you crazy when debugging... For this reason I'd opt to integrate something constant (a hashcode of the name of the class?) rather than the hashcode of the class object itself.\n\n\n\n\n\tI'd throw an AssertionError (explicitly via new AssertionError) rather than UnsupportedOperationException in places where we think these methods should never be called (because of rewriting or other reasons).\n\n\n\nI can make these changes, but let me know what revision this patch was made against (so that I can apply it first and then rebase against master). "
        },
        {
            "id": "comment-15290641",
            "author": "Paul Elschot",
            "date": "2016-05-19T07:51:11+0000",
            "content": "The patch is against commit 4bc3477fbf9be688c14bbb07f5982d5f4b615591 on master of yesterday.\nIt was made with git diff -w master from a local lucene7277 branch, which has commits roughly for each lucene module.\nI don't know which sha's git puts in a patch.\n\nI would not mind rebasing the local branch to update the patch, but I'll have very little time the coming days.\n\nIn case replacing getClass().hashCode() by something like getClass().getName().hashCode() is preferred for easier testing, it would probably be better to add that in a companion method to sameClassAs(), for example classHash().\n "
        },
        {
            "id": "comment-15290643",
            "author": "Paul Elschot",
            "date": "2016-05-19T07:53:16+0000",
            "content": "As to AssertionError or UOE, do we have a standard for that?\nI have seen UOE in a few places, so I used that. "
        },
        {
            "id": "comment-15290662",
            "author": "Dawid Weiss",
            "date": "2016-05-19T08:07:50+0000",
            "content": "Hmm..., try it:\n\ngit co 4bc3477fbf9be688c14bbb07f5982d5f4b615591 \ngit apply LUCENE-7277-20160518.patch\n\n\n\nresults in errors for me:\n\nerror: patch failed: lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java:421\nerror: lucene/core/src/java/org/apache/lucene/search/BooleanQuery.java: patch does not apply\nerror: patch failed: lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java:25\nerror: lucene/core/src/java/org/apache/lucene/search/MatchNoDocsQuery.java: patch does not apply\nerror: patch failed: lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java:315\nerror: lucene/core/src/java/org/apache/lucene/search/PointInSetQuery.java: patch does not apply\nerror: patch failed: lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java:230\nerror: lucene/core/src/java/org/apache/lucene/search/PointRangeQuery.java: patch does not apply\nerror: patch failed: lucene/core/src/java/org/apache/lucene/search/Query.java:74\nerror: lucene/core/src/java/org/apache/lucene/search/Query.java: patch does not apply\nerror: patch failed: lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java:153\nerror: lucene/core/src/test/org/apache/lucene/search/JustCompileSearch.java: patch does not apply\nerror: patch failed: lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java:102\nerror: lucene/core/src/test/org/apache/lucene/search/spans/JustCompileSearchSpans.java: patch does not apply\nerror: patch failed: lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java:299\nerror: lucene/join/src/java/org/apache/lucene/search/join/PointInSetIncludingScoreQuery.java: patch does not apply\nerror: patch failed: lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java:475\nerror: lucene/join/src/java/org/apache/lucene/search/join/ToParentBlockJoinQuery.java: patch does not apply\nerror: patch failed: lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.java:420\nerror: lucene/queryparser/src/java/org/apache/lucene/queryparser/complexPhrase/ComplexPhraseQueryParser.java: patch does not apply\nerror: patch failed: lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java:67\nerror: lucene/test-framework/src/java/org/apache/lucene/search/QueryUtils.java: patch does not apply\nerror: patch failed: solr/core/src/java/org/apache/solr/search/QueryWrapperFilter.java:89\nerror: solr/core/src/java/org/apache/solr/search/QueryWrapperFilter.java: patch does not apply\n\n\n\nIn case replacing getClass().hashCode() by something like getClass().getName().hashCode() is preferred for easier testing, it would probably be better to add that in a companion method to sameClassAs(), for example classHash().\n\nYep, I agree. Could even be lazily initialized once, much like the hash in Boolean query.\n\nAs to AssertionError or UOE, do we have a standard for that? I have seen UOE in a few places, so I used that.\n\nI don't think there's a standard for such things \u2013 IllegalStateException, UOE, RuntimeException, InternalError... all these are used to signal unreachable code (or code that \"theoretically\" shouldn't execute). Not anything specific to Lucene, the inconsistency is everywhere, in the JDK too. I prefer new AssertionError(\"Reason\") because this is an error (not an exception) and it cannot be confused with legitimate exceptions thrown by the java linker (unlike UOE)... but it's really my personal call, not a rule\n\nI would not mind rebasing the local branch to update the patch, but I'll have very little time the coming days.\n\nI can take over if you make that branch available somewhere (github?).\n\n\n "
        },
        {
            "id": "comment-15292149",
            "author": "Paul Elschot",
            "date": "2016-05-19T21:15:14+0000",
            "content": "I rebased locally to a more recent master. This went without conflicts, so I wonder why the patch did not apply cleanly.\nI then added one more commit with more use of sameClassAs in the lucene test code, so now ant compile-test passes for lucene.\nIn this last commit I used AssertionError in few places.\n\nI did not change getClass().hashCode() into getClass().getName().hashCode().\n\nThen I pushed the local branch to github, with an added date in the branch name in order to avoid confusion with other rebases (just treat it as a tag):\nhttps://github.com/PaulElschot/lucene-solr/tree/lucene7277-20160519\nIn case this git branch is not usable, please holler, I'd gladly post another patch here.\n "
        },
        {
            "id": "comment-15292162",
            "author": "Paul Elschot",
            "date": "2016-05-19T21:20:47+0000",
            "content": "One thing to look out for: my editor deletes white space at all ends of lines (even otherwise unchanged lines), so when squashing the commits try and ignore white space, or at the end use a patch generated with git diff -w to ignore whitespace differences.\n\nThis might also be the reason why the patch did not apply cleanly. "
        },
        {
            "id": "comment-15292879",
            "author": "Dawid Weiss",
            "date": "2016-05-20T07:10:47+0000",
            "content": "Whitespace wasn't an issue, but I didn't have time to dig deeper. github tree works much better \u2013 out of curiosity I made a diff from the branch to your master and re-applied it without problems, go figure.\n\nI'll take it from there, thanks Paul! "
        },
        {
            "id": "comment-15293514",
            "author": "Dawid Weiss",
            "date": "2016-05-20T15:09:58+0000",
            "content": "I continue the work here:\nhttps://github.com/dweiss/lucene-solr/tree/work\n\nSome of the query subclasses (and filters) didn't do anything with regard to overriding equals/hashCode, which makes me wonder if they ever worked correctly with query caches enabled...  I'll work on the remaining glitches through the weekend, run tests, etc. "
        },
        {
            "id": "comment-15296027",
            "author": "Dawid Weiss",
            "date": "2016-05-23T07:26:35+0000",
            "content": "Updated patch. Tests pass.\n\nThis is a rather large patch already, so I didn't want to make it any larger, leaving some hashCode implementation the way they were implemented (although some of them look rather odd).\n\nI think we should put this in as soon as possible, it really is a nice cleanup over various forms and shapes of the hashCode/equals implementation encountered in the code.\n\nAs a separate issue, I'd ban the use of getClass().hashCode() entirely (it is still used in a number of places) as it changes from execution to execution and can cause problems with debugging. "
        },
        {
            "id": "comment-15296795",
            "author": "Paul Elschot",
            "date": "2016-05-23T18:14:09+0000",
            "content": "LGTM.\n\nIn case the whitespace line changes cause conflicts later the workaround would be to ignore whitespace.\n\nThe caching of the hash value in the Query class could also be left to places where the hash value is needed multiple times, for example in a query cache entry. "
        },
        {
            "id": "comment-15297899",
            "author": "ASF subversion and git services",
            "date": "2016-05-24T08:35:12+0000",
            "content": "Commit e44509f2dfc22f95f0a13372461d6db58b66611c in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e44509f ]\n\nLUCENE-7277: Make Query.hashCode and Query.equals abstract. "
        },
        {
            "id": "comment-15297901",
            "author": "ASF subversion and git services",
            "date": "2016-05-24T08:38:20+0000",
            "content": "Commit d6264eb4756013fcfd9f6c2d9a224851c331767a in lucene-solr's branch refs/heads/branch_6x from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d6264eb ]\n\nLUCENE-7277: Make Query.hashCode and Query.equals abstract. "
        },
        {
            "id": "comment-15297902",
            "author": "Dawid Weiss",
            "date": "2016-05-24T08:39:32+0000",
            "content": "Pushed to master and branch_6x. Thanks for helping out, Paul! "
        }
    ]
}