{
    "id": "LUCENE-4670",
    "title": "Add TermVectorsWriter.finish{Doc,Field,Term} to make development of new formats easier",
    "details": {
        "components": [],
        "fix_versions": [
            "4.1"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This is especially useful to LUCENE-4599 where actions have to be taken after a doc/field/term has been added.",
    "attachments": {
        "LUCENE-4670.patch": "https://issues.apache.org/jira/secure/attachment/12563963/LUCENE-4670.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-09T17:29:03+0000",
            "content": "Patch, with new assertions in AssertingCodec to make sure that there is a finish call for every start call. Tests passed with -Dtest.codec=Asserting. ",
            "author": "Adrien Grand",
            "id": "comment-13548701"
        },
        {
            "date": "2013-01-09T17:29:48+0000",
            "content": "Wouldnt this be redundant?\n\n\n\tstartDocument(int numVectorFields <-- this tells you how many times startField will be called\n\tstartField(FieldInfo info, int numTerms <-- this tells you how many times startTerm will be called\n\tstartTerm(BytesRef term, int freq <-- this tells you how many times addPosition will be called\n\n ",
            "author": "Robert Muir",
            "id": "comment-13548703"
        },
        {
            "date": "2013-01-09T17:33:01+0000",
            "content": "Wouldnt this be redundant?\n\nYes it is, but I think it can make the format easier to implement and later to understand? PostingsConsumer already does it (startDoc(docID, freq) / finishDoc). ",
            "author": "Adrien Grand",
            "id": "comment-13548709"
        },
        {
            "date": "2013-01-09T17:37:45+0000",
            "content": "For example, if you want to flush data after every field has been added, today you need to do it both in the finish and startField methods, and in both cases you need to check whether startField had already been called earlier on. By having a finishField method, the modification is in one place and doesn't need an extra condition. ",
            "author": "Adrien Grand",
            "id": "comment-13548719"
        },
        {
            "date": "2013-01-09T17:38:05+0000",
            "content": "Terms/PostingsConsumer doesnt do it in general: e.g. startField doesn't tell you the number of terms, and startTerms \ndoesnt tell you the number of documents. so they must have finish() since they are filtering deleted docs on the fly.\n\nFor the per-document apis (Stored Fields, Term Vectors), we instead give you this number totally up-front (as it makes it easier to e.g. write numTerms into your file).\n\nI'm not necessarily opposed to the redundant calls, but it should then also be done with the stored fields api. And i'd like to see if it really simplifies some of our existing impls (SimpleText, Lucene40) as well.\n\nFinally, adding checks to AssertingCodec as a test is a good idea, however it still leaves our default merge implementation untested because the wrapped codec implements bulk merge. ",
            "author": "Robert Muir",
            "id": "comment-13548720"
        },
        {
            "date": "2013-01-09T17:44:56+0000",
            "content": "\nFor example, if you want to flush data after every field has been added, today you need to do it both in the finish and startField methods, and in both cases you need to check whether startField had already been called earlier on. By having a finishField method, the modification is in one place and doesn't need an extra condition.\n\nYeah I think this currently makes Lucene40's impl confusing too: check out its startField. If we can simplify that one too, i'm completely sold.\n\nI still feel like we should do this to the stored fields api too though for consistency. ",
            "author": "Robert Muir",
            "id": "comment-13548725"
        },
        {
            "date": "2013-01-09T17:49:18+0000",
            "content": "and by \"if we can simplify\" for the 4.0 codec, I dont necessarily mean we change the code. Its good enough for to stare at it and be able to tell if it would be simpler  ",
            "author": "Robert Muir",
            "id": "comment-13548737"
        },
        {
            "date": "2013-01-09T18:10:24+0000",
            "content": "I still feel like we should do this to the stored fields api too though for consistency.\n\nAgreed.\n\nIts good enough for to stare at it and be able to tell if it would be simpler\n\nI think it would? Things like\n\n    if (fieldCount == numVectorFields) {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n\n\n in startField could become\n\n    public void finishDocument() throws IOException {\n      // last field of the document\n      // this is crazy because the file format is crazy!\n      for (int i = 1; i < fieldCount; i++) {\n        tvd.writeVLong(fps[i] - fps[i-1]);\n      }\n    }\n\n\n\nIt would help simplify Lucene41StoredFieldsFormat too.\n\nit still leaves our default merge implementation untested because the wrapped codec implements bulk merge.\n\nDo you have an idea how to test it? ",
            "author": "Adrien Grand",
            "id": "comment-13548755"
        },
        {
            "date": "2013-01-09T18:11:23+0000",
            "content": "i think this looks better?\n\nI can go either way on whether or not the finish() methods should be abstract though (versus having a no-op impl). ",
            "author": "Robert Muir",
            "id": "comment-13548756"
        },
        {
            "date": "2013-01-09T18:14:19+0000",
            "content": "\nDo you have an idea how to test it?\n\nI think a very simple solution would be to have two asserting codecs instead of one\n1. Asserting(Lucene41) like we have today\n2. Asserting(SimpleText).\n\nIts already a filtercodec, and this way we test the unoptimized default merge impls everywhere for sure,\nsince simpletext never has such optimizations. ",
            "author": "Robert Muir",
            "id": "comment-13548759"
        },
        {
            "date": "2013-01-09T18:17:35+0000",
            "content": "i think this looks better?\n\nYes it does!\n\nI can go either way on whether or not the finish() methods should be abstract though (versus having a no-op impl).\n\nA no-op impl would make the change backward compatible? ",
            "author": "Adrien Grand",
            "id": "comment-13548765"
        },
        {
            "date": "2013-01-09T18:21:05+0000",
            "content": "I think for this case we should not consider API backwards compatibility (The codec api is experimental).\n\nIts far better to have the best APIs possible. It just seems confusing for finish(FieldInfos, int)\nto be abstract and the others not. \n\nOn the other hand adding more abstract methods makes the API more overwhelming... ",
            "author": "Robert Muir",
            "id": "comment-13548767"
        },
        {
            "date": "2013-01-09T18:27:42+0000",
            "content": "\nI think a very simple solution would be to have two asserting codecs instead of one\n1. Asserting(Lucene41) like we have today\n2. Asserting(SimpleText)\n\nWe don't technically need this actually. Our current bulk merge impls use instanceof,\nso they should never happen when we use the Asserting codec right? \n\nIf this is really true then non-bulk merges are already tested a lot better than I thought  ",
            "author": "Robert Muir",
            "id": "comment-13548777"
        },
        {
            "date": "2013-01-09T19:21:46+0000",
            "content": "I think for this case we should not consider API backwards compatibility (The codec api is experimental).\nOn the other hand adding more abstract methods makes the API more overwhelming...\n\nI'm fine with both options.\n\nWe don't technically need this actually. Our current bulk merge impls use instanceof, so they should never happen when we use the Asserting codec right?\n\nRight. ",
            "author": "Adrien Grand",
            "id": "comment-13548859"
        },
        {
            "date": "2013-01-09T19:50:22+0000",
            "content": "OK... maybe for now just go forward with the no-op impls? Its redundant anyway so if you dont \"notice\" that these\nextra hooks are available it won't hurt you, unless you are doing some kind of wrapping or so on (we should look for that just in case).\n\nI added the assertingstoredfields so we should be able to also move the 'assert fieldCount == 0' to its finishDocument()\n ",
            "author": "Robert Muir",
            "id": "comment-13548909"
        },
        {
            "date": "2013-01-09T23:17:10+0000",
            "content": "New patch with stored fields. ",
            "author": "Adrien Grand",
            "id": "comment-13549173"
        },
        {
            "date": "2013-01-09T23:44:22+0000",
            "content": "looks good. we could also add the state machine in the future to the AssertingStoredFields like the term vectors has.\n\nthis way we ensure we don't forget to call finishDocument somewhere: currently we only check that we actually call\nwriteField numStoredFields times and so on. ",
            "author": "Robert Muir",
            "id": "comment-13549199"
        },
        {
            "date": "2013-01-10T01:06:28+0000",
            "content": "New patch with state machine for stored fields. ",
            "author": "Adrien Grand",
            "id": "comment-13549263"
        },
        {
            "date": "2013-01-10T11:26:11+0000",
            "content": "[trunk commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1431283\n\nLUCENE-4670: Add finish* callbacks to StoredFieldsWriter and TermVectorsWriter.\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13549549"
        },
        {
            "date": "2013-01-10T12:16:09+0000",
            "content": "[branch_4x commit] Adrien Grand\nhttp://svn.apache.org/viewvc?view=revision&revision=1431294\n\nLUCENE-4670: Add finish* callbacks to StoredFieldsWriter and TermVectorsWriter.\n ",
            "author": "Commit Tag Bot",
            "id": "comment-13549562"
        }
    ]
}