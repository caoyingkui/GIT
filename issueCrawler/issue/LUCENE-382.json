{
    "id": "LUCENE-382",
    "title": "[PATCH] Document update contrib (Play with term postings or .. to a easy way to update)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "With this contribution you can add, delete or replace  term/document relation     \n\nA use case is a very fast update of document. Exemple: The update of 1 million\nof documents containing 2 fields  take some seconds (see test case)",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--IndexUpdater0.1.zip": "https://issues.apache.org/jira/secure/attachment/12312602/ASF.LICENSE.NOT.GRANTED--IndexUpdater0.1.zip",
        "ASF.LICENSE.NOT.GRANTED--TermWriter.zip": "https://issues.apache.org/jira/secure/attachment/12312600/ASF.LICENSE.NOT.GRANTED--TermWriter.zip",
        "ASF.LICENSE.NOT.GRANTED--DocumentUpdate.zip": "https://issues.apache.org/jira/secure/attachment/12312601/ASF.LICENSE.NOT.GRANTED--DocumentUpdate.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-04-27T01:29:17+0000",
            "content": "Created an attachment (id=14844)\nthe source  ",
            "author": "Nicolas Maisonneuve",
            "id": "comment-12322346"
        },
        {
            "date": "2005-04-28T00:43:20+0000",
            "content": "Nicolas, thanks for the contribution!  I took a quick look at the ZIP file. \nWould it be possible for you to describe (here and/or in the Javadocs) how these\n12+ classes work to provide Document update functionality? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12322347"
        },
        {
            "date": "2005-04-28T23:04:37+0000",
            "content": "(In reply to comment #2)\n> Nicolas, thanks for the contribution!  I took a quick look at the ZIP file. \n> Would it be possible for you to describe (here and/or in the Javadocs) how these\n> 12+ classes work to provide Document update functionality?\n\n\nThe goal of this contribution is to overwrite only the files containing\ninformation about the term posting list ( .tis , .tii, .frq, etc..).\nIn the Lucene API, the term posting lists are accessible with\nIndexReader.Terms() (Enumerate all the terms) and IndexReader.TermPositions()\n(For a specific term, enumerate each pair <doc number, Freq, <position>^freq > )\nmethods.\n\nSo, if i modified the output of this 2 methods (add new terms, delete  relations\nbetween document and terms, etc..) and rewrite the output in the lucene index, I\nrecreate a new lucene term posting list. That's what this contribution does !\n\nTo do this, i create a interface called TermProducter containing this 2 methods\n(Terms() and TermPositions()).A class implementing this interface have to\nproduce this 2 kind of ouputs (so it produce the posting lists). For Exemple  a\nIndexReader could implements this interface, but you can also create your own\nterm posting list producter, or  create a TermProducter that modify the content\nof the original IndexReader ouput.\n\nThen, with the TermWriter class that takes in input a TermProducter and a lucene\nindex, you can rewrite the lucene term posting list with the content of the\nTermProducter.\n\nSo now the question is : How can i modified the term posting list ? , What are\nmy tools ?\nYou have 2 types of Tools : TermGenerator and TermTransformer.\n\n\tThe TermGenerator Interface. It generates a TermProducter instance. Its goal\nis to create a new posting list.   The interface is simple: \n\tpublic \tTermProducter CreateTermProducter();\n\n\n\n There are 2 proposed Implementations:\n\n\tTermReader . A IndexReader Wrapper implementing TermProducter\n\tTermAdder  . you can create your own posting list by adding term/documen\nrelation. It's like a virtual index.\n\n\n\n\n\n\tThe TermTransformer Interface. It modifies the output of a TermProducter. The\ninterface is:\n\tpublic TermProducter transform(TermProducter producter); \n\n\n\nThere are 2 proposed Implementations:\n\n\tTermFilter. Filter some term/doc relations\n\tTermReplacer. You can replace some term/doc relations by others relations\n\n\n\n\n\n\tYou have also a special TermProducter implementation called TermMerger. It\nmerges several TermProducter. (useful )\n\tvoid add(TermProducter producter )\n\tterms()\n\ttermPositions();\n\n\n\n\n\nNow we can play by combining and create a kind of pipeline. For exemple, a\nupdate process  :\n\n(1) TermReader---> (2) TermFilter ----> (4)TermMeger (----> (5) TermWriter )\n\n\n\n\n\n\n\n                         (3) TermAdder -->----+\n\n1 - we read the lucene posting list\n2- we delete somes terms\n3 - wa add new term\n4- we merge the 2 TermProducters to create the final TermProducter\n5- we write the termproducter informations in the lucene index.\n\n\nThis design allows flexibility because If i just want replace  terms i can use\nthis simple/optimized process:\n(1) TermReader---> (2) TermReplacer (--->TermWriter )\n\nSo you can create your own pipeline of terms transformation.\n\n\n\u2014 A COMPLET EXEMPLE \u2014 \nUse case: i have to delete a term in several documents. \n\n1 - I have to know all the lucene document numbers. \n\nThe main class is the IndexUpdater. It contains a TermWriter and allow to select\nthe desired doc.\nSo i must create a instance. \n\n     IndexUpdater updater = IndexUpdater(IndexReader reader);\n\nAfter this,  i can execute a lucene query to select all the desired documents,  to\n\n     DocumentSelection docsel=updater.selectDoc(Query query);\n\nOk now i have a DocumentSelection instance allowing to a\nTermGenerator/TermTransformer to know which document is selected or not to\ndelete the terms.\n\n\n2 - delete their relations with the desired terms.\nSo now I create a TermFilter and delete the term in the selected document.\n\nfilter=new TermFilter();\nfilter.deleteTerm(new Term(\"field\",\"deletedvalue\"), docsel);\n\n\n3- now i create a pipeline  like this:  TermReader---->  TermFilter (\n---->TermWriter )\n\nWe have a method in the IndexUpdater to create a TermReader of the lucene index.\n\nTermReader reader= updater.getTermReader();\n\nTermProducter finalProducter=filter.transform(reader.createTermProducter());\n\nupdater.setTermProducter(finalProducter);\n\n4- I close and so write in the index the new posting lists.\nupdater.close();\n\n\n\n\nOk , is it clear ?\n\n\nPS: 1 - sorry for english, 2 - I know this contribution is not perfect (name of\nclasses, design, implementation) and can be certainly fixed but it's a first\nstep to a easy update of the postings lists, a lack in Lucene. ",
            "author": "Nicolas Maisonneuve",
            "id": "comment-12322348"
        },
        {
            "date": "2005-04-29T01:29:38+0000",
            "content": "Created an attachment (id=14868)\nfix some minor bugs ",
            "author": "Nicolas Maisonneuve",
            "id": "comment-12322349"
        },
        {
            "date": "2005-05-05T11:02:06+0000",
            "content": "Created an attachment (id=14936)\nIndex Updater v0.1 \n\n+ more javadocs (see IndexUpdater class)\n+ clean code (delete some classes)\n+ API more friendly\n+ add a testcase\n+ replaceTerm bug fix ",
            "author": "Nicolas Maisonneuve",
            "id": "comment-12322350"
        },
        {
            "date": "2011-01-26T11:56:29+0000",
            "content": "This sounds like an offline version of Incremental Field Updates - method proposed allows one to modify an index, offline, by re-creating it with few terms deleted, few added etc. However, it was created over Lucene 1.4 and much has changed since. Due to long inactivity (no one reviewed the patch for 5.5 years !), I'm closing it. I still owe this community an implementation of 'online' Incremental Field Updates . ",
            "author": "Shai Erera",
            "id": "comment-12986959"
        }
    ]
}