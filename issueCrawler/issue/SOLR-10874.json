{
    "id": "SOLR-10874",
    "title": "AIOOBE caused by FloatPayloadValueSource calling PostingsEnum.nextPosition()   more than the given term's frequency in overridden FloatDocValues.floatVal()",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "search"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "6.6,                                            6.6.1,                                            6.6.2,                                            7.0,                                            7.0.1,                                            7.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Using the new payload function will fail with an assertion error if the debug parameter is included in the query. This is caused by the floatValue method in FloatPayloadValueSource being called for the same doc id twice in a row.",
    "attachments": {
        "SOLR-10874.patch": "https://issues.apache.org/jira/secure/attachment/12872773/SOLR-10874.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-12T21:01:03+0000",
            "content": "Here's a patch that fixes this issue on Solr 6.6, including adding to an existing test.  ",
            "author": "Michael Kosten",
            "id": "comment-16047057"
        },
        {
            "date": "2017-06-13T13:36:26+0000",
            "content": "Michael Kosten ouch!  investigating through a test case, but I am not seeing it outside the test case.  I'm trying it like this: http://localhost:9999/solr/payloads/query?q={!func}payload(vals_dpf,one)&fl=*,score&debug=true&fq=id:(1%202)\n\n\n\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":4,\n    \"params\":{\n      \"q\":\"{!func}payload(vals_dpf,one)\",\n      \"debug\":\"true\",\n      \"fl\":\"*,score\",\n      \"fq\":\"id:(1 2)\"}},\n  \"response\":{\"numFound\":2,\"start\":0,\"maxScore\":1.0,\"docs\":[\n      {\n        \"id\":\"1\",\n        \"vals_dpf\":\"one|1.0 two|2.0 three|3.0\",\n        \"_version_\":1569489972428275712,\n        \"score\":1.0},\n      {\n        \"id\":\"2\",\n        \"vals_dpf\":\"weighted|50.0 weighted|100.0\",\n        \"_version_\":1569489972431421440,\n        \"score\":0.0}]\n  },\n  \"debug\":{\n    \"rawquerystring\":\"{!func}payload(vals_dpf,one)\",\n    \"querystring\":\"{!func}payload(vals_dpf,one)\",\n    \"parsedquery\":\"FunctionQuery(payload(vals_dpf,one,const(0.0)))\",\n    \"parsedquery_toString\":\"payload(vals_dpf,one,const(0.0))\",\n    \"explain\":{\n      \"1\":\"\\n1.0 = FunctionQuery(payload(vals_dpf,one,const(0.0))), product of:\\n  0.0 = payload(vals_dpf,one,const(0.0))=0.0\\n  1.0 = boost\\n  1.0 = queryNorm\\n\",\n      \"2\":\"\\n0.0 = FunctionQuery(payload(vals_dpf,one,const(0.0))), product of:\\n  0.0 = payload(vals_dpf,one,const(0.0))=0.0\\n  1.0 = boost\\n  1.0 = queryNorm\\n\"},\n    \"QParser\":\"FunctionQParser\",\n    \"filter_queries\":[\"id:(1 2)\"],\n    \"parsed_filter_queries\":[\"id:1 id:2\"],\n    \"timing\":{\n      \"time\":4.0,\n      \"prepare\":{\n        \"time\":2.0,\n        \"query\":{\n          \"time\":2.0},\n        \"facet\":{\n          \"time\":0.0},\n        \"facet_module\":{\n          \"time\":0.0},\n        \"mlt\":{\n          \"time\":0.0},\n        \"highlight\":{\n          \"time\":0.0},\n        \"stats\":{\n          \"time\":0.0},\n        \"expand\":{\n          \"time\":0.0},\n        \"terms\":{\n          \"time\":0.0},\n        \"debug\":{\n          \"time\":0.0}},\n      \"process\":{\n        \"time\":1.0,\n        \"query\":{\n          \"time\":0.0},\n        \"facet\":{\n          \"time\":0.0},\n        \"facet_module\":{\n          \"time\":0.0},\n        \"mlt\":{\n          \"time\":0.0},\n        \"highlight\":{\n          \"time\":0.0},\n        \"stats\":{\n          \"time\":0.0},\n        \"expand\":{\n          \"time\":0.0},\n        \"terms\":{\n          \"time\":0.0},\n        \"debug\":{\n          \"time\":1.0}}}}}\n\n ",
            "author": "Erik Hatcher",
            "id": "comment-16047913"
        },
        {
            "date": "2017-06-13T16:09:40+0000",
            "content": "It's an assertion error in AssertingLeafReader, so if the code performs correctly if assertions are disabled, then perhaps the assertion is unnecessary?\n\nIf you skip that assertion, then it fails an assertion in Lucene50PostingsReader. The crux is that the postings reader doesn't like nextPosition being called for a document more than the term frequency, which is what happens if floatVal in FloatPayloadValueSource is called sequentially for the same document.\n\nMaybe this scenario only happens in very specific circumstances?\n ",
            "author": "Michael Kosten",
            "id": "comment-16048069"
        },
        {
            "date": "2017-06-14T13:29:39+0000",
            "content": "Maybe this scenario only happens in very specific circumstances?\n\nWhat are your circumstances outside of this test case?   I'd just like to experience it in the wild - I'll get the fix committed, ideally before for a 6.6.1 or 6.7.   I tried with a single doc indexed to see if it had to do with only one document, but still didn't fail to work as expected though the test case definitely fails - my bad. ",
            "author": "Erik Hatcher",
            "id": "comment-16049179"
        },
        {
            "date": "2017-06-14T23:03:44+0000",
            "content": "You're not seeing it in the wild because assertions aren't enabled. I tried running solr in the wild with assertions enabled (which I don't think anyone would do normally), but it failed due to another assertion, so I can't get it to the point of executing a query with the payload function. However, when you do run in in the wild, the explain output is wrong, it shows 0.0 for the results of the payload function. You can see it in your comment above for doc 1: \"product of:\\n  0.0 = payload(vals_dpf,one,const(0.0))=0.0\".\n\nI traced what happens when debug is true. The floatVal is called 3 times sequentially for each doc in the explain output.\n\n\n ",
            "author": "Michael Kosten",
            "id": "comment-16049777"
        },
        {
            "date": "2017-10-25T17:07:28+0000",
            "content": "Patch, incorporates Michael Kosten's patch and adds a new test.\n\nThis new test does not use debug=true, but nevertheless hits the same assertions that Michael referred to in earlier comments.  When I disable assertions, I get an AIOOBE with the new test when excluding the fix - example below. (I'll change the issue title to reflect this in a sec.)\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestFunctionQuery -Dtests.method=testRetrievePayloads -Dtests.seed=D873D8C5E5E58072 -Dtests.slow=true -Dtests.locale=ro -Dtests.timezone=ACT -Dtests.asserts=false -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   1.80s | TestFunctionQuery.testRetrievePayloads <<<\n   [junit4]    > Throwable #1: java.lang.ArrayIndexOutOfBoundsException: -127\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([D873D8C5E5E58072:3CF2F76AD396D173]:0)\n   [junit4]    > \tat org.apache.lucene.codecs.lucene50.ForUtil.readBlock(ForUtil.java:196)\n   [junit4]    > \tat org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.refillPositions(Lucene50PostingsReader.java:1024)\n   [junit4]    > \tat org.apache.lucene.codecs.lucene50.Lucene50PostingsReader$EverythingEnum.nextPosition(Lucene50PostingsReader.java:1226)\n   [junit4]    > \tat org.apache.solr.search.FloatPayloadValueSource$1.floatVal(FloatPayloadValueSource.java:161)\n   [junit4]    > \tat org.apache.lucene.queries.function.docvalues.FloatDocValues.doubleVal(FloatDocValues.java:62)\n   [junit4]    > \tat org.apache.lucene.queries.function.ValueSource$ValueSourceComparator.compareBottom(ValueSource.java:392)\n   [junit4]    > \tat org.apache.lucene.search.TopFieldCollector$SimpleFieldCollector$1.collect(TopFieldCollector.java:117)\n   [junit4]    > \tat org.apache.lucene.search.MatchAllDocsQuery$1$1.score(MatchAllDocsQuery.java:56)\n   [junit4]    > \tat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:658)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:462)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:215)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1591)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1408)\n   [junit4]    > \tat org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:575)\n   [junit4]    > \tat org.apache.solr.handler.component.QueryComponent.doProcessUngroupedSearch(QueryComponent.java:1435)\n   [junit4]    > \tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:375)\n   [junit4]    > \tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:295)\n   [junit4]    > \tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:177)\n   [junit4]    > \tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2484)\n   [junit4]    > \tat org.apache.solr.util.TestHarness.query(TestHarness.java:337)\n   [junit4]    > \tat org.apache.solr.util.TestHarness.query(TestHarness.java:319)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:951)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertJQ(SolrTestCaseJ4.java:920)\n   [junit4]    > \tat org.apache.solr.search.function.TestFunctionQuery.testRetrievePayloads(TestFunctionQuery.java:528)\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16219094"
        },
        {
            "date": "2017-10-25T17:16:49+0000",
            "content": "Oops, didn't include all of Michael's patch in mine - attaching a corrected patch. ",
            "author": "Steve Rowe",
            "id": "comment-16219107"
        },
        {
            "date": "2017-10-26T10:50:29+0000",
            "content": "Steve Rowe - thanks for the test on this - +1 all aound.   Apologies, Michael et al, for letting this slip.    ",
            "author": "Erik Hatcher",
            "id": "comment-16220302"
        },
        {
            "date": "2017-10-26T19:20:50+0000",
            "content": "Commit 18d0f7c4d26bd3b7376c89883ed48d949d7bafc9 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=18d0f7c ]\n\nSOLR-10874: Fix AIOOBE caused by FloatPayloadValueSource calling PostingsEnum.nextPosition() more than the given term's frequency in overridden FloatDocValues.floatVal(). ",
            "author": "ASF subversion and git services",
            "id": "comment-16221067"
        },
        {
            "date": "2017-10-26T19:20:52+0000",
            "content": "Commit c440361a17af3c91ea0d6db3f0805da7762ea2cd in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c440361 ]\n\nSOLR-10874: Fix AIOOBE caused by FloatPayloadValueSource calling PostingsEnum.nextPosition() more than the given term's frequency in overridden FloatDocValues.floatVal(). ",
            "author": "ASF subversion and git services",
            "id": "comment-16221068"
        },
        {
            "date": "2017-10-27T00:41:55+0000",
            "content": "This will be included in Solr 7.2.  Thanks everybody! ",
            "author": "Steve Rowe",
            "id": "comment-16221516"
        }
    ]
}