{
    "id": "LUCENE-1853",
    "title": "SubPhraseQuery for matching and scoring sub phrase matches.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "The goal is to give more control via configuration when searching using user entered queries against multiple fields where sub phrases have special significance.\n\nFor a query like \"homes in new york with swimming pool\", if a document's field matches only \"new york\" it should get scored and it should get scored higher than two separate matches \"new\" and \"york\".  Also, a 3 word sub phrase match must gets scored considerably higher than a 2 word sub phrase match. (boost factor should be configurable)\n\nUsing shingles for this use case, means each field of each document needs to be indexed as shingles of all (1..N)-grams as well as the query. (Please correct me if I am wrong.)\n\nThe query could also support \n\n\tignoring of idf and/or field norms, (so that factors outside the document don't influence scoring)\n\tconsider only the longest match (for example match on \"new york\" is scored and considered rather than \"new\" furniture and \"york\" city)\n\tignore duplicates (\"new york\" appearing twice or thrice does not make any difference)\n\n\n\nThis kind of query  could be combined with DisMax query. For example, something like solr's dismax request handler can be made to use this query where we run a user query as it is against all fields and configure each field with above configurations.\n\nI have also attached a patch with comments and test cases in case, my description is not clear enough. Would appreciate alternatives or feedback. \n\nExample Usage:\n\n<code>\n   // sub phrase config\n    SubPhraseQuery.SubPhraseConfig conf = new SubPhraseQuery.SubPhraseConfig();\n    conf.ignoreIdf = true;\n    conf.ignoreFieldNorms = true;\n    conf.matchOnlyLongest = true;\n    conf.ignoreDuplicates = true;\n    conf.phraseBoost = 2;\n    // phrase query as usual\n   SubPhraseQuery pq = new SubPhraseQuery();\n   pq.add(new Term(\"f\", term));\n   pq.add(new Term(\"f\", term));\n    pq.setSubPhraseConf(conf);\n    Hits hits = searcher.search(pq);\n</code>",
    "attachments": {
        "LUCENE-1853.patch": "https://issues.apache.org/jira/secure/attachment/12417595/LUCENE-1853.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-25T10:25:54+0000",
            "content": "Attached a patch with test cases. Position increment and offset always assumed to be incremented by 1. May not work with increments other than  ",
            "author": "Preetam Rao",
            "id": "comment-12747341"
        },
        {
            "date": "2009-08-31T05:00:34+0000",
            "content": "Remove the dependency on PhraseQuery. Create a new Query called \"SubPhraseQuery\". Created a new patch with seperate new source files, without any changes to existing files. ",
            "author": "Preetam Rao",
            "id": "comment-12749379"
        },
        {
            "date": "2009-08-31T05:06:30+0000",
            "content": "Removed the dependency on PhraseQuery so that this can be reviewed  and used independently. Made it a separate query with configurations specific to sub phrase matches,  The new patch makes no changes to any of existing files. Please let me know your thoughts. ",
            "author": "Preetam Rao",
            "id": "comment-12749381"
        },
        {
            "date": "2013-04-13T21:19:51+0000",
            "content": "SPRING_CLEANING_2013 JIRAS Anyone want to comment whether this is still valid? Doubtless the patch is, at best, a guide. ",
            "author": "Erick Erickson",
            "id": "comment-13631172"
        },
        {
            "date": "2013-04-14T06:15:51+0000",
            "content": "Erick, SubPhraseQuery was written by Preetam for AOL Real Estate search. AFAIK, no one is working actively on it. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13631277"
        },
        {
            "date": "2013-04-14T12:32:31+0000",
            "content": "SPRING_CLEANING_2013 JIRA.\n\nOK, we'll close this given Shalin's comment. ",
            "author": "Erick Erickson",
            "id": "comment-13631303"
        }
    ]
}