{
    "id": "LUCENE-5791",
    "title": "QueryParserUtil, big query with wildcards -> runs endlessly and produces heavy load",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/queryparser"
        ],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "The following \"testcase\" runs endlessly and produces VERY heavy load.\n...\nString query = \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt ut \"\n\t\t\t\t+ \"labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores et \"\n\t\t\t\t+ \"ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet. \"\n\t\t\t\t+ \"Lorem ipsum dolor sit amet, consetetur sadipscing elitr, sed diam nonumy eirmod tempor invidunt \"\n\t\t\t\t+ \"ut labore et dolore magna aliquyam erat, sed diam voluptua. At vero eos et accusam et justo duo dolores \"\n\t\t\t\t+ \"et ea rebum. Stet clita kasd gubergren, no sea takimata sanctus est Lorem ipsum dolor sit amet\"; String query  = query.replaceAll( \"s+\", \"*\" ); try { QueryParserUtil.parse( query, new String[] \n{ \"test\" }\n, new Occur[] \n{ Occur.MUST }\n, new KeywordAnalyzer() ); } catch ( Exception e ) \n{ Assert.fail( e.getMessage() ); }\n ...\n\nI don't say this testcase makes \"sense\", nevertheless the question remains whether this is a bug or a \"feature\"?\n\n99% the threaddump/stacktrace looks as follows:\nBasicOperations.determinize(Automaton) line: 680\t\nAutomaton.determinize() line: 759\t\nSpecialOperations.getCommonSuffixBytesRef(Automaton) line: 165\t\nCompiledAutomaton.<init>(Automaton, Boolean, boolean) line: 168\t\nCompiledAutomaton.<init>(Automaton) line: 91\t\nWildcardQuery(AutomatonQuery).<init>(Term, Automaton) line: 67\t\nWildcardQuery.<init>(Term) line: 57\t\nWildcardQueryNodeBuilder.build(QueryNode) line: 42\t\nWildcardQueryNodeBuilder.build(QueryNode) line: 32\t\nStandardQueryTreeBuilder(QueryTreeBuilder).processNode(QueryNode, QueryBuilder) line: 186\t\nStandardQueryTreeBuilder(QueryTreeBuilder).process(QueryNode) line: 125\t\nStandardQueryTreeBuilder(QueryTreeBuilder).build(QueryNode) line: 218\t\nStandardQueryTreeBuilder.build(QueryNode) line: 82\t\nStandardQueryTreeBuilder.build(QueryNode) line: 53\t\nStandardQueryParser(QueryParserHelper).parse(String, String) line: 258\t\nStandardQueryParser.parse(String, String) line: 168\t\nQueryParserUtil.parse(String, String[], BooleanClause$Occur[], Analyzer) line: 119\t\nIndexingTest.queryParserUtilLimit() line: 1450",
    "attachments": {
        "afterdet.png": "https://issues.apache.org/jira/secure/attachment/12653003/afterdet.png"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14046806",
            "author": "Michael McCandless",
            "content": "Ahh so this is indeed because of the determinize in Automaton.  Unfortunately, determinize has worst-case exponential complexity, and I think this example in fact hits the worst case.  I'm attaching the determinized automaton for abc*mno*xyz*pqr*def ... you can see it gets larger and larger as you add parts between the * ",
            "date": "2014-06-28T10:53:40+0000"
        },
        {
            "id": "comment-14046808",
            "author": "Michael McCandless",
            "content": "abc*mno*xyz*pqr*def determinized ",
            "date": "2014-06-28T10:54:12+0000"
        },
        {
            "id": "comment-14046813",
            "author": "Jack Krupansky",
            "content": "At least consider clear Javadoc on limitations and performance, such as the need to keep wildcard patterns \"brief\".\n\nMaybe consider a limit of how many wildcards can be used in a single wildcard query. Possibly configurable.\n\nMaybe consider a \"trim\" mode - if too many wildcards appear, simply trim trailing portions of the pattern to get under the limit. For example, this test case might get trimmed to abc*mno*xyz*. This would still match all of the intended matches, albeit also matching some unintended cases. Maybe a limit of three wildcards would be reasonable.\n\nDoes ? have the same issue, or is it much more linear? Would ???? be as bad as abc*mno*xyz*pqr ?\n\nDo adjacent ** get collapsed to a single * ?\n\nFuzzy query has a very strict limit to assure that it is performant - I would think that these two query types should have the same performance goals. ",
            "date": "2014-06-28T11:10:07+0000"
        }
    ]
}