{
    "id": "LUCENE-4824",
    "title": "Query time join returns different results based on the field type",
    "details": {
        "components": [
            "modules/join"
        ],
        "fix_versions": [],
        "affect_versions": "4.1,                                            4.2",
        "priority": "Minor",
        "labels": "",
        "type": "New Feature",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I'm experiencing different query time joining behavior based on the type of the 'toField' and 'fromField'. Basically I got correct results when both 'toField' and 'fromField' are StringField, but incorrect in case of LongField.",
    "attachments": {
        "QueryTimeJoinTest.java": "https://issues.apache.org/jira/secure/attachment/12573392/QueryTimeJoinTest.java",
        "LUCENE-4824.patch": "https://issues.apache.org/jira/secure/attachment/12579996/LUCENE-4824.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-12T19:03:46+0000",
            "content": "Attaching simple test case. ",
            "author": "Akos Kitta",
            "id": "comment-13600345"
        },
        {
            "date": "2013-04-11T06:52:06+0000",
            "content": "\nDespite of several bug fixes in the join module for the 4.2. release, I still have different results for the same query time joining when the fields are stored as string and long.\n\nI've already looked into the issue but stuck at \n\n org.apache.lucene.search.MultiTermQueryWrapperFilter.getDocIdSet(AtomicReaderContext, Bits)\n\nI've noticed that an irrelevant document ID is collected with the \n\norg.apache.lucene.search.join.TermsQuery.SeekingTermSetTermsEnum\n\n to the bitset.\nI'm quite eager to contribute some kind of solution if someone could give me some advice or pointer.\nThanks is advance! ",
            "author": "Akos Kitta",
            "id": "comment-13628728"
        },
        {
            "date": "2013-04-11T10:26:38+0000",
            "content": "Hi Atos,\n\nI don't see this is a bug, but a lack of support.\n\nBy default long values are indexed as multiple terms (In a trie structure). \nThe query time joining reads all from / to field values as plain strings and because of that a single number is read as multiple terms and the query time joining doesn't work (joining more docs then it should).\n\nI've updated your test case that indexes long values as one term. The joining then works as expected, because the long is just one term per field.\n\nI think it makes sense to fully support joining on numeric fields even if a number is indexed as a trie. We just need to fetch the values as long type from the FieldCache. ",
            "author": "Martijn van Groningen",
            "id": "comment-13628817"
        },
        {
            "date": "2013-04-11T11:39:54+0000",
            "content": "Hi Martijn,\n\nthank you for the reply and the updated test case. Much appreciated! After you explanation and pointer I'll try to implement something useful for the issue. ",
            "author": "Akos Kitta",
            "id": "comment-13628854"
        },
        {
            "date": "2013-04-11T11:41:19+0000",
            "content": "Setting issue type from bug to new feature. Reducing priority. ",
            "author": "Akos Kitta",
            "id": "comment-13628856"
        },
        {
            "date": "2013-04-23T08:21:03+0000",
            "content": "Hi Martijn,\n\nI've some initial contribution for this issue. I would like to ask for you feedback whether the implementation is in the right direction or not. Also any kind of feedback is much appreciated.\nFYI: the attached patch supports single field per document right now.\n\nThanks in advance for you help.\n\nBest,\n\nAkos ",
            "author": "Akos Kitta",
            "id": "comment-13638880"
        },
        {
            "date": "2013-06-07T15:00:31+0000",
            "content": "Sorry for the late reply. A gave this some more thought and I think the primitive numbers (long, double, etc.) to ByteRef conversion isn't optimal. Instead I think having native primitive number based joining implementations would make more sense and expect it be faster then the current implementation. ",
            "author": "Martijn van Groningen",
            "id": "comment-13678076"
        },
        {
            "date": "2013-06-12T16:52:25+0000",
            "content": "Hi Martijn,\n\nthanks for your feedback. Actually I'm a bit busy recently, but as soon I will have some time I'll contribute an other patch based on your suggestions.\n\nBest,\n\nAkos ",
            "author": "Akos Kitta",
            "id": "comment-13681381"
        }
    ]
}