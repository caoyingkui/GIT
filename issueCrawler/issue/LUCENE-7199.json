{
    "id": "LUCENE-7199",
    "title": "Improve algorithm for randomly finding an interior point for Geo3D polygons",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "6.0",
        "components": [
            "modules/spatial3d"
        ],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Michael McCandless's benchmark for polygon search shows that constructing Geo3D polygon queries is quite expensive compared to other technologies.  My belief is that this is due largely to how an interior point for determination of clockwise/counterclockwise are found: this is currently searched for randomly across the entire globe.\n\nI suspect that we could replace this algorithm with a random algorithm that uses one of the polygon's edge points and looks randomly within a small distance of that point.  This would greatly reduce the number of failed attempts to find a \"pole\" (as I call it).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15234107",
            "author": "ASF subversion and git services",
            "date": "2016-04-10T12:58:40+0000",
            "content": "Commit 22ccccfc3e945636106ad8450dc33bd5fb77f86d in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=22ccccf ]\n\nLUCENE-7199: Use a more refined algorithm for picking the random pole used in clockwise/counterclockwise determination. "
        },
        {
            "id": "comment-15234110",
            "author": "ASF subversion and git services",
            "date": "2016-04-10T13:00:24+0000",
            "content": "Commit 70ab80b341399651bb130176d87a9b25b4617a1e in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=70ab80b ]\n\nLUCENE-7199: Use a more refined algorithm for picking the random pole used in clockwise/counterclockwise determination. "
        },
        {
            "id": "comment-15234111",
            "author": "Karl Wright",
            "date": "2016-04-10T13:04:05+0000",
            "content": "Committed a change to address this.  For most polygons, a correct pole is now chosen in between 1 and 5 iterations.  Some rare ones need up to 23 iterations.  Still, far better than before, which sometimes went through 500 iterations to find the pole.\n\nMichael McCandless, if you are so inclined, it would be great to perf test the polygon non-pre-built query case again to see if this made a substantial difference. "
        },
        {
            "id": "comment-15234120",
            "author": "Michael McCandless",
            "date": "2016-04-10T13:27:45+0000",
            "content": "Indeed it's much faster!  Now it's:\n\n\n24.8 QPS (9.1 sec for 225 queries), totHits=355855224\n\n\n\nfor not-pre-built queries.  If I pre-build I get:\n\n\n25.3 QPS (8.9 sec for 225 queries), totHits=355855224\n\n\n\nSo only a slight gain (possibly within noise) for pre-built queries now! "
        },
        {
            "id": "comment-15234125",
            "author": "Karl Wright",
            "date": "2016-04-10T13:51:58+0000",
            "content": "Thanks for checking this!  Awesome results. \n "
        }
    ]
}