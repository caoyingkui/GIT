{
    "id": "LUCENE-1683",
    "title": "RegexQuery matches terms the input regex doesn't actually match",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.3.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I was writing some unit tests for our own wrapper around the Lucene regex classes, and got tripped up by something interesting.\n\nThe regex \"cat.\" will match \"cats\" but also anything with \"cat\" and 1+ following letters (e.g. \"cathy\", \"catcher\", ...)  It is as if there is an implicit .* always added to the end of the regex.\n\nHere's a unit test for the behaviour I would expect myself:\n\n    @Test\n    public void testNecessity() throws Exception {\n        File dir = new File(new File(System.getProperty(\"java.io.tmpdir\")), \"index\");\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        try \n{\n            Document doc = new Document();\n            doc.add(new Field(\"field\", \"cat cats cathy\", Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n finally \n{\n            writer.close();\n        }\n\n        IndexReader reader = IndexReader.open(dir);\n        try \n{\n            TermEnum terms = new RegexQuery(new Term(\"field\", \"cat.\")).getEnum(reader);\n            assertEquals(\"Wrong term\", \"cats\", terms.term());\n            assertFalse(\"Should have only been one term\", terms.next());\n        }\n finally \n{\n            reader.close();\n        }\n    }\n\nThis test fails on the term check with terms.term() equal to \"cathy\".\n\nOur workaround is to mangle the query like this:\n\n    String fixed = String.format(\"(?:%s)$\", original);",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2009-06-11T01:50:06+0000",
            "content": "I screwed up the formatting.  Fixed version:\n\n\n    @Test\n    public void testNecessity() throws Exception\n    {\n        File dir = new File(new File(System.getProperty(\"java.io.tmpdir\")), \"index\");\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        Document doc = new Document();\n        doc.add(new Field(\"field\", \"cat cats cathy\", Field.Store.YES, Field.Index.TOKENIZED));\n        writer.addDocument(doc);\n        writer.close();\n\n        IndexReader reader = IndexReader.open(dir);\n\n        TermEnum terms = new RegexQuery(new Term(\"field\", \"cat.\")).getEnum(reader);\n        assertEquals(\"Wrong term\", \"cats\", terms.term().text());\n        assertFalse(\"Should have only been one term\", terms.next());\n    }\n\n ",
            "author": "Trejkaz",
            "id": "comment-12718270"
        },
        {
            "date": "2009-07-16T17:49:13+0000",
            "content": "Do you have a proposed fix for this...?  Or, why is RegexQuery treating the trailing \".\" as a \".*\" instead? ",
            "author": "Michael McCandless",
            "id": "comment-12732050"
        },
        {
            "date": "2009-07-16T18:11:41+0000",
            "content": "... why is RegexQuery treating the trailing \".\" as a \".*\" instead? \n\nJavaUtilRegexCapabilities.match() is implemented as j.u.regex.Matcher.lookingAt(), which is equivalent to adding a trailing \".*\", unless you explicity append a \"$\" to the pattern.\n\nBy contrast, JakartaRegexpCapabilities.match() is implemented as RE.match(), which does not imply the trailing \".*\".\n\nThe difference in the two implementations implies this is a kind of bug, especially since the javadoc \"contract\" on RegexCapabilities.match() just says \"@return true if string matches the pattern last passed to compile\".\n\nThe fix is to switch JavaUtilRegexCapabilities.match to use Matcher.match() instead of lookingAt(). ",
            "author": "Steve Rowe",
            "id": "comment-12732060"
        },
        {
            "date": "2009-07-31T17:59:13+0000",
            "content": "I agree this is a bug \u2013 I'll switch to matches shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12737620"
        },
        {
            "date": "2009-07-31T18:03:13+0000",
            "content": "Thanks Trejkaz! ",
            "author": "Michael McCandless",
            "id": "comment-12737622"
        }
    ]
}