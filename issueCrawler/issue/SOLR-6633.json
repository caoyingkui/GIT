{
    "id": "SOLR-6633",
    "title": "let /update/json/docs store the source json as well",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "it is a common requirement to store the entire JSON as a field in Solr. \n\nwe can have a extra param srcField=field_name to specify the field name\n\nthe /update/json/docs is only useful when all the json fields are predefined or in schemaless mode.\n\nThe better option would be to store the content in a store only field and index the data in another field in other modes\n\nthe relevant section in solrconfig.xml\n\n <initParams path=\"/update/json/docs\">\n    <lst name=\"defaults\">\n      <!--this ensures that the entire json doc will be stored verbatim into one field-->\n      <str name=\"srcField\">_src</str>\n      <!--This means a the uniqueKeyField will be extracted from the fields and\n       all fields go into the 'df' field. In this config df is already configured to be 'text'\n        -->\n      <str name=\"mapUniqueKeyOnly\">true</str>\n       <str name=\"df\">text</str>\n    </lst>\n\n  </initParams>",
    "attachments": {
        "SOLR-6633.patch": "https://issues.apache.org/jira/secure/attachment/12675779/SOLR-6633.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-10-20T16:33:03+0000",
            "author": "Noble Paul",
            "content": "added support in the default example schema ",
            "id": "comment-14177080"
        },
        {
            "date": "2014-10-21T14:53:06+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1633390 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1633390 ]\n\nSOLR-6633 ",
            "id": "comment-14178474"
        },
        {
            "date": "2014-10-21T14:58:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1633391 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1633391 ]\n\nSOLR-6633 ",
            "id": "comment-14178482"
        },
        {
            "date": "2014-10-21T15:05:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1633392 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1633392 ]\n\nSOLR-6633 ",
            "id": "comment-14178485"
        },
        {
            "date": "2014-10-21T15:12:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1633394 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1633394 ]\n\nSOLR-6633 changed package ",
            "id": "comment-14178501"
        },
        {
            "date": "2014-10-21T15:16:23+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1633398 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1633398 ]\n\nSOLR-6633 changed package ",
            "id": "comment-14178507"
        },
        {
            "date": "2014-10-21T15:41:17+0000",
            "author": "Steve Rowe",
            "content": "It should be documented that atomic updates over documents indexed using this feature will cause the source field to become out of sync with the rest of the doc. ",
            "id": "comment-14178536"
        },
        {
            "date": "2014-10-21T15:50:59+0000",
            "author": "Noble Paul",
            "content": "sure Use account \"steve_rowe\" instead ",
            "id": "comment-14178548"
        },
        {
            "date": "2014-11-19T01:43:41+0000",
            "author": "Alexandre Rafalovitch",
            "content": "This is truly just storing original document, right? And only returning the whole thing as well?\n\nBecause, in Elasticsearch, the _src field is actually used as source for several operations. For example, it is as a source for dynamic update as - by default - fields are not stored individually. And, I think, _src field also gets re-written/re-created on update, again because it is actually used as a source of truth.\n\nThe second issue I wanted to raise is how this will interplay with UpdateRequestProcessors (ES does not really have those). I guess URPs will apply after the content of the field, so the actual fields may look quite different from what's in the _src.\n\nFinally, I am not clear on what this really means: all fields go into the 'df' . Do we mean, there is a magic copyField or something?\n\nI think we need a bit more specific use-case here, then just an implementation/configuration. Especially, since a similar-but-different implementation in Elasticsearch does not fully match Solr's setup.  ",
            "id": "comment-14217243"
        },
        {
            "date": "2014-11-19T01:59:37+0000",
            "author": "Noble Paul",
            "content": "Because, in Elasticsearch, the _src field is actually used as source for several operations..\n\nThis feature is not the same. it is a feature of the /update/json/docs requesthandler . We can't do it like ES because , the same document can be updated using other commands as well\n\n\nFinally, I am not clear on what this really means: all fields go into the 'df' .\n\nSolr is \"strongly typed\" , so to say. So it means we can't just put the content somewhere for searching. because all components use \"df\" as the default search field this component chooses to piggyback on the same field. The user can configure any other field as 'df' here. The next problem we need to address is that of uniqueKey. The component must extract the uniquekey field from the json itself or it should create one.   That is the purpose of \"mapUniqueKeyOnly\" param\n\nWe are not trying to be ES here. The use case is this.\n User has a bunch of json documents. He needs to index the data without configuring anything in the schema. The search result has to return some stored fields. Because Solr is \"strongly typed\" we can't store them in individual fields . So we must store the whole thing in some field and it made sense to store it in json itself.\n ",
            "id": "comment-14217261"
        },
        {
            "date": "2014-11-19T02:26:45+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Is this somehow superseding the behavior in SOLR-6304 and http://lucidworks.com/blog/indexing-custom-json-data/ ? I mean the field extraction code can already do ID mapping by specifying an appropriate path, right? And for 'df', would you need to specify it as a param (like in the example 4 in the article)?\n\nAnd I am still trying to wrap my head about the use case. I don't expect users not to want to configure anything. At least the dates would need to be parsed/detected. And, usually, after the initial dump, the users go back and start adding specific definitions field by field, type by type (and reindex). Is that part of this scenario as well? \n\nP.s. I know Solr cannot clone Elasticsearch. I was just making sure that we are not somehow missing Solr-specifics by assuming Elasticsearch like behavior. Perhaps having the field also called _all was what confused me. ",
            "id": "comment-14217295"
        },
        {
            "date": "2014-11-19T11:30:26+0000",
            "author": "Yonik Seeley",
            "content": "Finally, I am not clear on what this really means: all fields go into the 'df' . Do we mean, there is a magic copyField or something?\n\nI'm not clear on this either... my best guess is that it is like a copyField.  And all values (but not keys) are copied into this field?\n\nI'm not quite clear on \"mapUniqueKeyOnly\" either... (what the \"Only\" refers to).  I guess if it's false, then all the fields in JSON Object are mapped to Solr fields based on the key in the JSON?\n\nOh, and when we have magic field names, the convention in Solr has been an underscore on both sides (or not at all).\n So can we use _src_ or src of _src please? ",
            "id": "comment-14217770"
        },
        {
            "date": "2014-11-19T13:00:41+0000",
            "author": "Noble Paul",
            "content": "I hope you are all clear about the functionality/usecase. If the API/configuration needs change please suggest .\n\nI'm not clear on this either... my best guess is that it is like a copyField. And all values (but not keys) are copied into this field?\n\nIt is like a copyFIeld but without a src field. \n\nI'm not quite clear on \"mapUniqueKeyOnly\" either... (what the \"Only\" refers to).\n\nAll the values are extracted and dumped into a field. But it ensures that a uniqueKey is created. They don't need to use this attribute at all . f=text:/**&f=uniqueKeyField:/unique-field-name should do the trick.  Then , if the json does not have a value for uniqueKey it fails. \n\nOh, and when we have magic field names, the convention in Solr has been an underscore on both sides\n\n_src is not a magic field . It is explicitly added to the schema and it is explicitly specified here as well ",
            "id": "comment-14217858"
        },
        {
            "date": "2014-11-19T13:12:01+0000",
            "author": "Alexandre Rafalovitch",
            "content": "They don't need to use this attribute at all . f=text:/**&f=uniqueKeyField:/unique-field-name should do the trick.\n\nSo, the advantage of not using the parameter syntax above is that it will automatically figure out what the uniqueKeyField is from the schema? Similar to the UUID URP?\n\nBut what happens if somebody specifies both. Do we get double content in text? Can we also use the params to populate other fields anyway (I guess yes).\n\nAnd what happens if original JSON is super fat, can we specify exclusion rules. I bet this will be asked too. Don't have to implement it, but will it fit into the current model?\n\nI like the feature, I am just trying to make sure it does not cause the confusion through multiplication of options. In my own mind, when I was thinking about this use case (store original JSON), I imagined an URP that just pulls the original JSON from the request. Again, similar to UUID URP one can add into the chain. ",
            "id": "comment-14217881"
        },
        {
            "date": "2014-11-19T13:43:37+0000",
            "author": "Noble Paul",
            "content": "So, the advantage of not using the parameter syntax above is that it will automatically figure out what the uniqueKeyField is from the schema? Similar to the UUID URP?\n\nyes and no. I want this to work seamlessly even if  uniqueKey is changed without mucking up with solrconfig.xml . I also want it to just work when there is no uniqueKey present in json. Basically, out of the box, it should just work for any json. I hate to tell newbies that they need to edit solrconfig.xml to just get anything working\n\nI would recommend this only if you are a newbie . I should document in place to do the explicit mappings with wildcards .\n\nAnd what happens if original JSON is super fat, can we specify exclusion rules.\n\nNo, there are only inclusion rules. but the sytax is quite powerful to achieve that\n\nAgain, similar to UUID URP one can add into the chain.\n\nURP just fails the simplicity  test. It is extremely hard for even experts to get their head around.\n I HATE the fact that we recommend hard to do configuration to everyone. If we want to get the first time users on board we will need to stop all that. First time users just need stuff to work. \n ",
            "id": "comment-14217912"
        },
        {
            "date": "2014-11-19T13:54:11+0000",
            "author": "Alexandre Rafalovitch",
            "content": "We agree completely on the newbie message. I am just trying to make sure it is clear how it fits into the rest of Solr without creating a jarring jump between the step 1 and step 2.\n\nSo, to be clear. This covers step 1. Then, for step 2 (e.g. and now to handle dates....) this connects smoothly to what? To a f=dateField:/xyz and schemaless mode? To an explicit creation of a date field/type in an Admin UI? ",
            "id": "comment-14217918"
        },
        {
            "date": "2014-11-19T13:55:59+0000",
            "author": "Noble Paul",
            "content": "But what happens if somebody specifies both. Do we get double content in text? \n\nNo, if mapUniqueKeyOnly overrides other field definitions ",
            "id": "comment-14217922"
        },
        {
            "date": "2014-11-19T14:08:57+0000",
            "author": "Noble Paul",
            "content": "for step 2 (e.g. and now to handle dates....) this connects smoothly to what? To a f=dateField:/xyz and schemaless mode? To an explicit creation of a date field/type in an Admin UI?\n\nThis is not within the scope of this feature. Actually the objective of this was to introduce the srcField only. Then I realized that it needed to do more to achieve the objective ",
            "id": "comment-14217939"
        },
        {
            "date": "2014-11-28T16:47:41+0000",
            "author": "Yonik Seeley",
            "content": "_src is not a magic field . It is explicitly added to the schema and it is explicitly specified here as well\n\nMy point was that we currently have field/param names with both leading and trailing underscores, and field names without. We should probably stick with that unless we can come up with a common meaning for leading-underscore-only.\n\nAnd it's still partially magic (even though it's configurable)... it's another field that the user did not explicitly ask for (and hence I assume the underscore was a way to avoid clashing with actual user fields). ",
            "id": "comment-14228385"
        },
        {
            "date": "2014-11-28T21:52:55+0000",
            "author": "Alexandre Rafalovitch",
            "content": "+1 on \"it's still partially magic\"  ",
            "id": "comment-14228529"
        },
        {
            "date": "2014-11-29T04:09:44+0000",
            "author": "Noble Paul",
            "content": "OK. let's rename the field to _src_ ",
            "id": "comment-14228622"
        },
        {
            "date": "2014-12-09T16:14:10+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1644100 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1644100 ]\n\nSOLR-6633 field name changed from _src to _src_ by popular demand ",
            "id": "comment-14239585"
        },
        {
            "date": "2014-12-09T16:15:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1644103 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1644103 ]\n\nSOLR-6633 field name changed from _src to _src_ by popular demand ",
            "id": "comment-14239589"
        },
        {
            "date": "2014-12-09T18:05:17+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1644135 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1644135 ]\n\nSOLR-6633 changing the field name from _src to _src_ ",
            "id": "comment-14239757"
        },
        {
            "date": "2014-12-09T18:06:58+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1644136 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1644136 ]\n\nSOLR-6633 changing the field name from _src to _src_ ",
            "id": "comment-14239760"
        },
        {
            "date": "2015-02-23T05:00:43+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "id": "comment-14332568"
        }
    ]
}