{
    "id": "SOLR-4905",
    "title": "Allow fromIndex parameter to JoinQParserPlugin to refer to a single-sharded collection that has a replica on all nodes",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Using a non-SolrCloud setup, it is possible to perform cross core joins (http://wiki.apache.org/solr/Join). When testing with SolrCloud, however, neither the collection name, alias name (we have created aliases to SolrCloud collections), or the automatically generated core name (i.e. <collection>_shard1_replica1) work as the fromIndex parameter for a cross-core join.",
    "attachments": {
        "patch.txt": "https://issues.apache.org/jira/secure/attachment/12653526/patch.txt",
        "SOLR-4905.patch": "https://issues.apache.org/jira/secure/attachment/12690493/SOLR-4905.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13677390",
            "date": "2013-06-06T19:10:08+0000",
            "content": "I'm pretty sure Join only supports a single node. "
        },
        {
            "author": "Philip K. Warren",
            "id": "comment-13677440",
            "date": "2013-06-06T20:04:38+0000",
            "content": "Would this work if there is only a single shard in the collection being joined? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13677487",
            "date": "2013-06-06T20:44:56+0000",
            "content": "You can do a cross-core join on any two cores in the same node (JVM).\nJoin does not (yet) have cross-node support, and doing so would always be an order of magnitude slower in any case. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13677545",
            "date": "2013-06-06T21:40:00+0000",
            "content": "Switching from BUg to feature request.\n\nFWIW: this limitation has been documented in the wiki, but not easy to find ... i've attempted to remedy that by adding better cross linking between the SolrCloud and DistributeSearch wiki pages, as well as adding an explicit note on the Join page\n\nhttps://wiki.apache.org/solr/SolrCloud#Known_Limitations\nhttps://wiki.apache.org/solr/DistributedSearch#Distributed_Searching_Limitations\nhttps://wiki.apache.org/solr/Join#Limitations "
        },
        {
            "author": "Philip K. Warren",
            "id": "comment-13677572",
            "date": "2013-06-06T21:57:22+0000",
            "content": "In our current configuration, both of the cores are in the same JVM. Both are single-shard collections with a replica. I understand however that it is not likely to be implemented for SolrCloud without a better story for distributed search.\n\nThanks for the information. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13677648",
            "date": "2013-06-06T23:14:22+0000",
            "content": "In our current configuration, both of the cores are in the same JVM. Both are single-shard collections with a replica.\n\nIf that's the case, you should be able to get it to work using the actual core names.  Is it not working?\nYou could also try passing \"distrib=false\" to manually prevent distributed search from kicking in. "
        },
        {
            "author": "Chris Toomey",
            "id": "comment-13697400",
            "date": "2013-07-02T01:21:34+0000",
            "content": "I've been experimenting with cross-core joins in SolrCloud and found that this problem does indeed occur when the collection being joined is created via the collections API.  Solr returns the error \"Cross-core join: no such core <fromIndex name>\".\n\nBut if the collection being joined is created at bootstrap time, cross-core join does work and doesn't give that error.\n\nSo the bug must be somewhere in how the collection create command is implemented, such that the join plugin doesn't find created collection's core?  But even if it worked as is, the fact that the collection create command names the created cores \"<collectionName>_shard<x>_replica<y>\" instead of \"<collectionName>\" would prevent this from working across multiple nodes (like 2 replicas) since the fromIndex name is different on each node.  So it seems that naming convention should be changed, agreed?  Should I file a separate bug on that?\n\nMy use case is where the collection being joined is small and doesn't need to be sharded, but the \"outer\" collection may be large and need to be sharded.  So even without distributed joins, this should work, since the collection being joined would be replicated to each node and hence both cores being joined would be on the same node (for each shard of the outer collection).  And like I say, it does work when all the collections are configured/created at bootstrap time.  The problem there is that there's only a single numShards param. which applies to every bootstrapped collection, so having the outer collection sharded and the inner one not isn't possible. "
        },
        {
            "author": "Utkarsh Sengar",
            "id": "comment-13737585",
            "date": "2013-08-13T00:08:08+0000",
            "content": "@Chris I have solrcloud 4.4 running with 3 shards and 2 cores. A cross-core join does not work even when cores are created during the bootstrap time. \n\nThis is my query:\n \n http://SOLR_SERVER/solr/merchant/select?q={!join from=merchantId to=merchantId fromIndex=deals}apple  \n \n\nThis query returns no documents, full response with debugQuery=true: http://apaste.info/uHOw\n\nBut both of my cores have a common merchantId when I query for \"apple\". So I think this problem is a general problem in solrcloud. "
        },
        {
            "author": "Jack Lo",
            "id": "comment-14049570",
            "date": "2014-07-02T03:08:42+0000",
            "content": "I have noticed this issue have been lying around for a year, seems like nobody is bother to use JOIN in solrcloud, so I decide to tackle this myself.\n\nA small patch has been uploaded here to allow fromIndex to specify a collection under cloud environment. Currently, it works if the fromIndex collection is a single shard having at least 1 replica on each node. I am planning to support multi-shard collection but not really sure how to do it given I am not that familiar with the internal mechanics of solr.\n\nEven if we support multishard, given the current implementation of JoinQParser, I think we can only support it when a collection with at least 1 replica of all shards physically residing on every node. We need all local IndexSearcher. If we need full solrcloud join support, I think we need to revamp JoinQParser or make something on a higher level to gather terms collection from remote shards on StandardRequestHandler.\n\nBy the way, I noticed we haven't use JoinUtil in LUCENE, is there a reason to not use it, their implementation seems to be more cleaner than the one in SOLR right now, I have no idea how JoinQParser works, especally the getdocset stage. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14266319",
            "date": "2015-01-06T16:10:38+0000",
            "content": "Good stuff here ... reminds me of a Map-side JOIN in the Map/Reduce world by having a smaller dataset locally available for all shards of a larger data set. I'm cleaning up the patch and adding some unit tests. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14267267",
            "date": "2015-01-07T04:26:12+0000",
            "content": "Here's an updated patch with a few things cleaned up from the previous one, such as checking replica health before querying. Patch also includes a basic unit test. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14302071",
            "date": "2015-02-02T22:33:09+0000",
            "content": "Renaming this ticket to be more clear about the solution it is solving. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14302547",
            "date": "2015-02-03T00:27:11+0000",
            "content": "Updated patch that removes the change to core container in the previous patch and checks if the fromIndex is a collection alias. I wasn't sure how to handle aliases that point to multiple collections, so that produces an error now. I think this is ready to commit unless there are any other comments? "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14302699",
            "date": "2015-02-03T03:07:28+0000",
            "content": "Commit 1656622 from Timothy Potter in branch 'dev/trunk'\n[ https://svn.apache.org/r1656622 ]\n\nSOLR-4905: Allow fromIndex parameter to JoinQParserPlugin to refer to a single-sharded collection that has a replica on all nodes "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14308088",
            "date": "2015-02-05T22:06:14+0000",
            "content": "Commit 1657701 from Timothy Potter in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1657701 ]\n\nSOLR-4905: Allow fromIndex parameter to JoinQParserPlugin to refer to a single-sharded collection that has a replica on all nodes "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14495240",
            "date": "2015-04-15T00:30:13+0000",
            "content": "Bulk close after 5.1 release "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14976992",
            "date": "2015-10-27T19:17:02+0000",
            "content": "Timothy Potter, I want to got further, but not too far..\nJoel Bernstein wrote in https://lucidworks.com/blog/2013/06/13/solr-cloud-document-routing/\nCertain Solr features such as grouping\u2019s ngroups feature and joins require documents to be co-located in the same core or vm.\nIs it worth to raise a jira to allow q-time join for collection with shards collocated via compositeId or implicit router with router.field? Concerns and suggestions are welcome! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14977004",
            "date": "2015-10-27T19:21:40+0000",
            "content": "Is it worth to raise a jira to allow q-time join for collection with shards collocated\n\nNot sure I understand... doesn't this already work? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14977057",
            "date": "2015-10-27T20:02:39+0000",
            "content": "Does it?\nWhen I create join collection with two shards, I got\n\n...\n     \"q\": \"{!join from=manu_id_s to=id fromIndex=join}name:one\",\n...\n  },\n  \"error\": {\n    \"msg\": \"SolrCloud join: multiple shards not yet supported join\",\n    \"code\": 400\n  }\n\n\n\nThe purpose of this jira SOLR-4905 was to allow it for fully replicated (collocated) single shard collection.   "
        },
        {
            "author": "Paul Blanchaert",
            "id": "comment-15001977",
            "date": "2015-11-12T11:16:02+0000",
            "content": "Today, I came across the same issue as reported by Mikhail Khludnev (\"SolrCloud join: multiple shards not yet supported join\").\n\nI would expect that there is no issue to perform a cross-core join over sharded collections when the following conditions are met:\n1) both collections are sharded with the same replicationFactor and numShards\n2) router.field of the collection is set to the same \"key-field\"\n3) the cross-core join is based on that same (from/to) \"key-field\"\n\nThe router.field setup ensures that documents with the same \"key-field\" are routed to the same node. \nSo the combination based on the \"key-field\" should always be available within the same node.\n\nFrom a user perspective, I believe these assumptions seem to be the \"normal\" use-case in the cross-core join.\nSo, when these assumptions are correct, the next question is probably how feasable it is to implement this logic in the JoinQParserPlugin?\n\nThanks for your feedback. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15002865",
            "date": "2015-11-12T20:28:19+0000",
            "content": "Paul Blanchaert would you mind to raise a separate jira for this?  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15003657",
            "date": "2015-11-13T07:30:31+0000",
            "content": "Trey Grainger responded to the list, reposting here\nJust to add another voice to the discussion, I have the exact same use case described by Paul and Mikhail that I'm working through a Proof of Concept for right now. I'd very much like to see the \"single shard collection with a replica on all nodes\" restriction removed. "
        },
        {
            "author": "Paul Blanchaert",
            "id": "comment-15004226",
            "date": "2015-11-13T16:32:33+0000",
            "content": "Hi Mikhail,\nI wanted to raise the issue today, but didn't find the time before the weekend.\nAlso found an issue while debugging, will report next monday...\nThanks "
        },
        {
            "author": "Paul Blanchaert",
            "id": "comment-15007170",
            "date": "2015-11-16T19:24:54+0000",
            "content": "SOLR-8297 created. "
        }
    ]
}