{
    "id": "SOLR-438",
    "title": "Allow multiple stopword files",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "It wouldn't hurt Solr (StopFilterFactory) to allow one to specify multiple stopword files.\nI've patched Solr to support this, for example:\n\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"hr_stopwords.txt, hr_stopmorphemes.txt\"/>\n\nI'll upload a patch shortly and commit later this week.",
    "attachments": {
        "SOLR-438.patch": "https://issues.apache.org/jira/secure/attachment/12371784/SOLR-438.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12552432",
            "date": "2007-12-17T15:03:19+0000",
            "content": "Seems like this could be a more general feature for all the one-entry-per-line type files (synonyms and protected words). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12552658",
            "date": "2007-12-18T09:09:20+0000",
            "content": "haven't looked at the patch, agree with the idea in principle, but concerned about how we can make the syntax work safely ....  comma and space are both legal filename characters. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12552847",
            "date": "2007-12-18T18:33:36+0000",
            "content": "Yonik - I agree.  Is there a different place/class where this could be added then?  I didn't spot one.\n\nHoss - I knew somebody would say that.   I initially wanted to go with File.pathSeparator as the delimiter, but then thought about example config files and how they wouldn't work out of the box if the we used, say, \";\" and the person is using Winblows.  Got a suggestion for that?  Or we can simply document: \"Commas in filenames verboten!\" "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12552855",
            "date": "2007-12-18T19:00:52+0000",
            "content": "I'm not sure either is a good idea, but i'll throw it out there just for arguments sake:\n\nOption 1: check the arguments for names that start with \"words\":\n\n <filter ... words=\"stop1.txt\" words01=\"stop2.txt\" />\n\n\n\nOption 2: change MapInitalizedPlugin from Map<String,String> to Map<String,Object>  (backwards compitable), then this could be:\n\n <filter ... words=\"stop1.txt\" words=\"stop2.txt\" />\n\n\n\nthe plugin loader could make a List<String> if the attribute shows up twice.  I'm sure that breaks some XML spec somewhere though...\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12552865",
            "date": "2007-12-18T19:19:23+0000",
            "content": "duplicate attribute names are bad: (no kidding)\nhttp://www.w3.org/TR/1999/REC-xml-names-19990114/#uniqAttrs\n\nAgain, I'm not sure it is a good idea, but maybe a Filter/Tokenizer could optionally implement NamedListInitalizedPlugin, then it could be:\n\n<filter class=\"solr.StopFilterFactory\" >\n <arr name=\"words\">\n  <str name=\"stop1.txt\"/>\n  <str name=\"stop2.txt\"/>\n </arr>\n</filter>\n\n\n\nkinda ugly.\n\nagain, shooting from the hip, encode a JSON list in the value?\n\n\n  <filter ... wordfilelist=\"{'stop1.txt', 'stop2.txt'}\" />\n\n "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12552893",
            "date": "2007-12-18T20:47:05+0000",
            "content": "If we're going for ugly: pick a filename delimiter.  First test to see if the file exists as a whole string (including all delimiters) and if it doesn't try splitting.\n\nSpecial-case behaviour like that is rather kludgy, though. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12552908",
            "date": "2007-12-18T22:01:21+0000",
            "content": "What about standard backslash escaping? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12552926",
            "date": "2007-12-18T23:08:02+0000",
            "content": "or maybe:\n\n<filter ... words=\"stop.txt,stop2.txt\" words-delimiter=\",\" />\n\n\nIn general, the existence of xxx-delimiter would mean split xxx on that char to make a list. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12553231",
            "date": "2007-12-19T04:53:58+0000",
            "content": "\n> I initially wanted to go with File.pathSeparator as the delimiter, but then thought \n> about example config files and how they wouldn't work out of the box if the we used, \n> say, \";\" and the person is using Winblows. Got a suggestion for that? \n\nI think using File.pathSeparator makes perfect sense ... we just wouldn't use multiple files in the example configs (but can include a comment mentioning that it is possible) "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12553319",
            "date": "2007-12-19T12:22:24+0000",
            "content": "Hoss - duh, why didn't I think of that?   That sounds good to me.  That's what comments are for.\n\nBefore I read this I was going to do (new File(attribVal).exists()) type of a check if the attribVal has a comma and split only if file doesn't exist.  But I like your suggestion better - keep the code clean.\n\nBut there is currently no other \"common\" place for this, right?\nMaybe add String[] getStrings(String) to BaseTokenFilterFactory ? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12553373",
            "date": "2007-12-19T14:55:56+0000",
            "content": "the problem with using File.pathSeparator is that you would need a different config to run the same thing on unix vs windows.  I develop on windows and deploy on linux \u2013 how would that work?\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12553376",
            "date": "2007-12-19T15:07:22+0000",
            "content": "File.pathSeparator makes it platform specific and doesn't solve the problem of what to do if the separator is in the filename (it's a Java concept not an OS concept), so you still have to do escaping if you want to support all filenames.\n\nI'd just pick a logical separator (\",\" seemed fine to me) and allow backslash escaping in the unlikely event that the filename is really weird.  Any bets that no one has configured a word list filename with a \",\" in it anyway? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617231",
            "date": "2008-07-27T02:49:23+0000",
            "content": "This patch tests if the whole string points to a valid file. If not, it uses comma as a separater for multiple files. Allows a preceding backslash to escape a comma in a file name. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617240",
            "date": "2008-07-27T04:51:32+0000",
            "content": "I've opened SOLR-663 to add this general capability or all the one-entry-per-line type files as per Yonik's comment.\n\nOtis \u2013 I think the best common place for the split code would be org.apache.solr.common.util.StrUtils which already has some splitSmart methods. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12617242",
            "date": "2008-07-27T05:29:27+0000",
            "content": "just pick a logical separator (\",\" seemed fine to me) and allow backslash escaping in the unlikely event that the filename is really weird. Any bets that no one has configured a word list filename with a \",\" in it anyway?\n\ncomma is no problem .It looks very intuitive. Though it is a valid filanem character it is OK to have a limitation. User can easily name his files accordingly.\nThe new replication SOLR-561 uses conf file names as comma separated values. If comma is used in names that also will fail "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12618247",
            "date": "2008-07-30T08:14:48+0000",
            "content": "SOLR-663 has been committed. We can mark this issue as resolved. "
        }
    ]
}