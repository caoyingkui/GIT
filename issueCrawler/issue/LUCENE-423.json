{
    "id": "LUCENE-423",
    "title": "thread pool implementation of parallel queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1"
        ],
        "affect_versions": "1.4",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This component is a replacement for ParallelMultiQuery that runs a thread pool\nwith queue instead of starting threads for every query execution (so its\nperformance is better).",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--ConcurrentMultiSearcher.java": "https://issues.apache.org/jira/secure/attachment/12312707/ASF.LICENSE.NOT.GRANTED--ConcurrentMultiSearcher.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-08-16T02:52:38+0000",
            "content": "Created an attachment (id=16054)\nConcurrentMultiSearcher.java\n\nThe implementation (which still lacks a solution for the method that accepts a\nHitCollector).\tIt seems likely that HitCollectors wouldn't expect concurrent\ncalls and would end up breaking.  It might be an idea to add a extension\ninterface to imply the thread awareness then test for the extension in the\nmethod. ",
            "author": "Randy Puttick",
            "id": "comment-12322565"
        },
        {
            "date": "2011-01-25T13:19:28+0000",
            "content": "You can provide an ExecutorService now, so I think this one is resolved. ",
            "author": "Robert Muir",
            "id": "comment-12986369"
        }
    ]
}