{
    "id": "LUCENE-6",
    "title": "new IndexReader.terms(myterm) skips over first term",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "if I do\n\nIndexReader r = IndexReader.open(\"index\");\nTerm t = new Term(\"contents\",\"heidegger\");\nTermEnum terms = r.terms(t);\nout.println(\"zero-term: \"terms.term().text()\"<br>\");\nint cnt = 0;\nwhile (terms.next()) {\n\tout.println(\"term: \"terms.term().text()\"<br>\");\n\tif (cnt++>5) break;\n}\n\nthen the first term I see in the main loop after terms.next() is \nnot \"heidegger\", even though this is in my index. If I query the enumerator \nBEFORE calling next(), the term is there.\nHowever, the comments in TermEnum.term() says that this method is only valid \nafter the first next() and all other enumerators work that way too.\n\nThe terms(Term) should give back the actual term first, just as it says it \ndoes, right?\n\nThe enumerator skips over the first term if I search for a non-existing term \nlike \"heidegge\" as well.\n\nThis means that a PrefixQuery will not work as expected since it uses this \nenumerator, right?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2001-11-01T21:25:58+0000",
            "content": "This is mostly a documentation problem.  One must first call next() on a \nTermEnum created with IndexReader.terms(), but not one created by \nIndexReader.terms(Term).  In that case, one can check if the enun is already at \nits end by checking if enum.term() == null.\n\nThis is what PrefixQuery does, so PrefixQuery in fact works correctly.\n\nStill, this API should be improved, or at least better documented.\n ",
            "author": "cutting@apache.org",
            "id": "comment-12320976"
        },
        {
            "date": "2003-09-19T04:38:06+0000",
            "content": "I believe this was fixed last week, when one of Christoph Goller's patches was\napplied. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12320977"
        }
    ]
}