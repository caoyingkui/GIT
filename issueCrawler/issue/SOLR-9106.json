{
    "id": "SOLR-9106",
    "title": "Cache cluster properties in ZkStateReader",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.1"
        ],
        "affect_versions": "7.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "ZkStateReader currently makes calls into ZK every time getClusterProps() is called.  Instead we should keep the data locally and use a Watcher to update it.",
    "attachments": {
        "SOLR-9106.patch": "https://issues.apache.org/jira/secure/attachment/12803711/SOLR-9106.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-12T17:19:22+0000",
            "author": "Alan Woodward",
            "content": "Patch.  Also adds a type-safe .getClusterProperty() method, which neatens a few things up a bit. ",
            "id": "comment-15281776"
        },
        {
            "date": "2016-05-12T18:13:45+0000",
            "author": "Scott Blum",
            "content": "LGTM if tests pass.  One comment:\n\n\n-  public static boolean isLegacy(Map clusterProps) {\n-    return !\"false\".equals(clusterProps.get(ZkStateReader.LEGACY_CLOUD));\n+  public static boolean isLegacy(ZkStateReader stateReader) {\n+    return stateReader.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\").equals(\"false\") == false;\n   }\n\n\n\nI think !\"false\".equals(stateReader.getClusterProperty(ZkStateReader.LEGACY_CLOUD, \"false\")) would be slightly more readable more like the original.  That whole \"false\").equals(\"false\") == false bit makes my head spin LOL. ",
            "id": "comment-15281863"
        },
        {
            "date": "2016-05-12T22:07:05+0000",
            "author": "Varun Thacker",
            "content": "Hi Alan,\n\nThere is one common catch block now\n\ncatch (KeeperException | InterruptedException e) {\n\nShould we handle them separately as we are currently doing so that we can set the interrupt flag?\n ",
            "id": "comment-15282140"
        },
        {
            "date": "2016-05-12T23:03:31+0000",
            "author": "Alan Woodward",
            "content": "Scott Blum yeah, you're right, that's pretty ugly.  And it's also wrong, as legacyCloud defaults to 'true' at the moment.  Will fix!\n\nVarun Thacker that's dealt with by the call to SolrZkClient.checkInterrupted() ",
            "id": "comment-15282221"
        },
        {
            "date": "2016-05-13T07:28:13+0000",
            "author": "Varun Thacker",
            "content": "that's dealt with by the call to SolrZkClient.checkInterrupted()\n\nTrue! I obviously didn't read the LOG.error line . ",
            "id": "comment-15282497"
        },
        {
            "date": "2016-05-13T16:58:53+0000",
            "author": "Alan Woodward",
            "content": "Hm, so a couple of the tests complicate this a bit by calling ZkStateReader without setting up all the watches, etc (something that I want to make not possible in SOLR-9056).  To get around this, I've introduced a ClusterProperties class that will read and write properties in real-time, if need be.\n\nI've also had to make the ZkController baseURL non-final, because it needs to be set after the state reader watches are created, and that isn't done in the constructor.  Which is annoying, but again SOLR-9056 cleans that up so I'm not too concerned.\n\nAll tests pass with this patch. ",
            "id": "comment-15282872"
        },
        {
            "date": "2016-05-13T21:12:14+0000",
            "author": "Scott Blum",
            "content": "LGTM ",
            "id": "comment-15283167"
        },
        {
            "date": "2016-05-14T09:12:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 77962f4af4e7f376255954f00e8b97f3dff94396 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=77962f4 ]\n\nSOLR-9106: Cache cluster properties on ZkStateReader ",
            "id": "comment-15283500"
        },
        {
            "date": "2016-05-14T09:19:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit dd23fa40153214095527cdeb77c4255cafbc21f9 in lucene-solr's branch refs/heads/branch_6x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dd23fa4 ]\n\nSOLR-9106: Cache cluster properties on ZkStateReader ",
            "id": "comment-15283502"
        },
        {
            "date": "2016-05-14T09:20:13+0000",
            "author": "Alan Woodward",
            "content": "Thanks all. ",
            "id": "comment-15283503"
        },
        {
            "date": "2016-07-11T08:02:17+0000",
            "author": "Noble Paul",
            "content": "Hi Alan Woodward I missed this. Not watching clusterprops was done deliberately. it is read rarely and watching is expensive. ",
            "id": "comment-15370348"
        },
        {
            "date": "2016-07-14T01:07:50+0000",
            "author": "Hrishikesh Gadre",
            "content": "We found a scenario where the ZK watch was not fired in a timely fashion resulting in the unit test failure (SOLR-9242). The changes made to fix that failure are exactly opposite to the intent of this JIRA (i.e. it brings back the old behavior).\n\nhttps://github.com/apache/lucene-solr/commit/eefdc62c997f7936b6db203111d8149dc934b243\n\nI agree with Nobel here. Alan Woodward is reading cluster properties every-time a serious performance problem? \n\nCC Varun Thacker ",
            "id": "comment-15376118"
        },
        {
            "date": "2016-07-14T09:31:10+0000",
            "author": "Varun Thacker",
            "content": "I think its okay to cache it .\n\nWe should maybe add some documentation that getClusterProperty might not always have a latest value if an update has just taken place and that in scenarios where we want the latest value we should forceRefresh it before reading.\n\nSo things like backup/restore can forceRefresh it since its a user facing API where the user can set some values in the cluster property file and expect it to be there. Things like the OverseerAutoReplicaFailoverThread where the feature might kick in after a couple of seconds because of this caching is fine. ",
            "id": "comment-15376659"
        },
        {
            "date": "2016-07-14T09:40:46+0000",
            "author": "Noble Paul",
            "content": "Varun Thacker the problem is, this ticket introduced a new problem where there was none. As Hrishikesh Gadre said reading that value once in a while was not a performance issue. Now we are paying the price for constantly watching it and we still don't have up to date data. ",
            "id": "comment-15376668"
        },
        {
            "date": "2016-07-18T07:52:27+0000",
            "author": "Alan Woodward",
            "content": "Not watching clusterprops was done deliberately. it is read rarely and watching is expensive.\n\nThis seems exactly backwards to me?  Watches are pretty lightweight.  Do you have some numbers here?\n\nIf it's true, then it needs to be explicitly documented on the .getClusterProperties() method that it will always read data from ZK - maybe it should be called .readClusterProperties() instead.  And it ends up being used in some expected places, for example during admin requests from a CloudSolrClient. ",
            "id": "comment-15381851"
        },
        {
            "date": "2016-07-18T07:59:16+0000",
            "author": "Noble Paul",
            "content": "bqThis seems exactly backwards to me? Watches are pretty lightweight. Do you have some numbers here\nThe problem with watches is that we really don't know when the changes are propagated to each node. If we read the data just in time we always get the latest data. Watching is light weight, I haven't done any benchmarking yet. ",
            "id": "comment-15381858"
        },
        {
            "date": "2016-07-20T15:13:31+0000",
            "author": "Alan Woodward",
            "content": "If we read the data just in time we always get the latest data\n\nIf you need this behaviour, you can use an explicit ClusterProperties object.  ZkCLI and some tests already do this.  I'll add some javadocs to ZkStateReader.getClusterProperty() to make this more explicit though. ",
            "id": "comment-15386009"
        },
        {
            "date": "2016-07-28T09:56:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8247f9f0cd8fccf7ecfb6d76cb8f180079ece3bb in lucene-solr's branch refs/heads/branch_6x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8247f9f ]\n\nSOLR-9106: Add javadocs to ZkStateReader cluster properties methods ",
            "id": "comment-15397338"
        },
        {
            "date": "2016-07-28T09:56:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c2db9fae2cc312a13a66e6dab9989ed65738fe02 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c2db9fa ]\n\nSOLR-9106: Add javadocs to ZkStateReader cluster properties methods ",
            "id": "comment-15397339"
        }
    ]
}