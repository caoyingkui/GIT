{
    "id": "LUCENE-5125",
    "title": "Codec classes/packages that do not provide (automatic) file format back compat need to be more explicit about this in javadocs",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "rmuir noted in LUCENE-5121...\n\nCurrently (as documented), we don't provide index back compat for experimental codecs in lucene-codecs.jar.\n\n...but except for a solr wiki page and solrconfig.xml comment, it's extremely non-obvious that any of these codec classes don't provide index backcompat.\n\n\n\tthe codec module overview.html page describes the module as \"Collection of useful codec, postings format and terms dictionary implementations\" \u2013 with no indication that by using these \"useful\" implementations, the user gives up index backcompat.\n\tthe package.html files in the individual packages of the codec module (appending, blockterms, bbloom, diskdv, etc...) also say nothing about index backcompat\n\tthe individual classes in these codecs are mostly labeled with @lucene.experimental but in the resulting javadoc that merely says that \"WARNING: This API is experimental and might change in incompatible ways in the next release\".  Lots of classes in Lucene have this warning on them about their API (including the abstract codec apis themselves in lucene-core: DocValuesFormat, PostingsFormat, etc...) and that annotation (as far back as i can remember) has always only refered to the java API of the labeled class \u2013 never to whether using that class ment you were giving up on index format back compat.\n\n\n\nGiven how much effort and work is put into ensuring good index backcompat for default codec, we should be extremely explicit when/if alternative codecs do not support backcompat, so we don't frustrate/confuse users and leave them with the impression that they can never count on index backcompat just because they may not realize they were using an \"unsupported\" format option because of a blog post they read or advice they got on the mailing list about how to make something faster or use less ram.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-19T17:38:22+0000",
            "content": "Again the user never gives up index compat.\n\nThey just have to merge to the default implementation before upgrading... in the case of LUCENE-5121 the user just didnt read the documentation, several times.\n\nI agree we can add the same warning thats in solrconfig.xml, and the same warning thats on the solr docvalues wiki page to the codecs/overview.html, but I am going to absolutely call out the fact that it would have done nothing for that user's case: I don't see how they could have configured what they did without intentionally choosing to ignore the documentation. ",
            "author": "Robert Muir",
            "id": "comment-13713867"
        },
        {
            "date": "2013-07-19T17:44:29+0000",
            "content": "They just have to merge to the default implementation before upgrading\n\nUnderstood ... but w/o more explicit docs drawing attention to this in more places, it won't be obvious to some users to even think of doing this when they get a weird error on trying to upgrade.\n\nIdeally it should be more obvious to all users (not just solr users) in advance of even using these codecs that \"if you use this class, then X is what you will likeley have to do to upgrade lucene later\"\n\n\nI don't see how they could have configured what they did without intentionally choosing to ignore the documentation.\n\nPerhaps by following some advice they got from a blog or mailing list that suggested they try docValuesFormat=\"Disk\" w/o repeating the caveat?\n\nI'm not trying to re-hash LUCENE-5121 \u2013 i'm just trying to ensure that we cover all our bases in better documenting what codecs will and won't automatically work on upgrade.\n ",
            "author": "Hoss Man",
            "id": "comment-13713872"
        },
        {
            "date": "2013-07-19T17:52:41+0000",
            "content": "\nPerhaps by following some advice they got from a blog or mailing list that suggested they try docValuesFormat=\"Disk\" w/o repeating the caveat?\n\nI'm not trying to re-hash LUCENE-5121 \u2013 i'm just trying to ensure that we cover all our bases in better documenting what codecs will and won't automatically work on upgrade.\n\nSorry I don't buy it. Its absolutely clear if you read all the comments on the issue. ",
            "author": "Robert Muir",
            "id": "comment-13713874"
        },
        {
            "date": "2013-07-19T18:10:25+0000",
            "content": "Sorry I don't buy it. Its absolutely clear if you read all the comments on the issue.\n\nhow/why the solr user mentioned in LUCENE-5121 decided to try the Disk based docValues, or whether they ever looked at the solr wiki page on docvalues has nothing to do with the fundemental point of this issue: improving the lucene codec javadocs.\n\n(unless, for some strange reason, you think any and all java developers build apps using lucene should somehow be implicitly expected to read the entire solr wiki and/or sample solrconig.xml files?) ",
            "author": "Hoss Man",
            "id": "comment-13713894"
        },
        {
            "date": "2013-07-19T18:56:22+0000",
            "content": "+1 to clarifying javadocs. We can put a new @lucene.indexbreak annotation on these codecs and resolve the message once in build.xml. I see no harm documenting that a Codec does not support index backwards. ",
            "author": "Shai Erera",
            "id": "comment-13713944"
        }
    ]
}