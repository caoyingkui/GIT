{
    "id": "SOLR-4589",
    "title": "4.x + enableLazyFieldLoading + large multivalued fields + varying fl = pathological CPU load & response time",
    "details": {
        "affect_versions": "4.0,                                            4.1,                                            4.2",
        "status": "Closed",
        "fix_versions": [
            "4.2.1",
            "4.3",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Following up on a user report of exterme CPU usage in 4.1, I've discovered that the following combination of factors can result in extreme CPU usage and excessively HTTP response times...\n\n\n\tSolr 4.x (tested 3.6.1, 4.0.0, and 4.2.0)\n\tenableLazyFieldLoading == true (included in example solrconfig.xml)\n\tdocuments with a large number of values in multivalued fields (eg: tested ~10-15K values)\n\tmultiple requests returning the same doc with different \"fl\" lists\n\n\n\nI haven't dug into the route cause yet, but the essential observations is: if lazyloading is used in 4.x, then once a document has been fetched with an initial fl list X, subsequent requests for that document using a differnet fl list Y can be many orders of magnitute slower (while pegging the CPU) \u2013 even if those same requests using fl Y uncached (or w/o lazy laoding) would be extremely fast.",
    "attachments": {
        "test.out__3.6.1_nio_nolazy.txt": "https://issues.apache.org/jira/secure/attachment/12573908/test.out__3.6.1_nio_nolazy.txt",
        "test.out__4.0.0_mmap_lazy.txt": "https://issues.apache.org/jira/secure/attachment/12573909/test.out__4.0.0_mmap_lazy.txt",
        "test.out__4.0.0_mmap_nolazy.txt": "https://issues.apache.org/jira/secure/attachment/12573910/test.out__4.0.0_mmap_nolazy.txt",
        "test.out__4.2.0_mmap_lazy.txt": "https://issues.apache.org/jira/secure/attachment/12573913/test.out__4.2.0_mmap_lazy.txt",
        "test.out__4.0.0_nio_nolazy.txt": "https://issues.apache.org/jira/secure/attachment/12573912/test.out__4.0.0_nio_nolazy.txt",
        "test.out__3.6.1_nio_lazy.txt": "https://issues.apache.org/jira/secure/attachment/12573907/test.out__3.6.1_nio_lazy.txt",
        "test.out__3.6.1_mmap_lazy.txt": "https://issues.apache.org/jira/secure/attachment/12573905/test.out__3.6.1_mmap_lazy.txt",
        "test.out__4.2.0_mmap_nolazy.txt": "https://issues.apache.org/jira/secure/attachment/12573914/test.out__4.2.0_mmap_nolazy.txt",
        "SOLR-4589.patch": "https://issues.apache.org/jira/secure/attachment/12573995/SOLR-4589.patch",
        "test-just-queries.sh": "https://issues.apache.org/jira/secure/attachment/12573919/test-just-queries.sh",
        "test.sh": "https://issues.apache.org/jira/secure/attachment/12573917/test.sh",
        "test.out__4.2.0_nio_nolazy.txt": "https://issues.apache.org/jira/secure/attachment/12573916/test.out__4.2.0_nio_nolazy.txt",
        "test-just-queries.out__4.0.0_mmap_lazy_using36index.txt": "https://issues.apache.org/jira/secure/attachment/12573918/test-just-queries.out__4.0.0_mmap_lazy_using36index.txt",
        "test.out__4.0.0_nio_lazy.txt": "https://issues.apache.org/jira/secure/attachment/12573911/test.out__4.0.0_nio_lazy.txt",
        "test.out__3.6.1_mmap_nolazy.txt": "https://issues.apache.org/jira/secure/attachment/12573906/test.out__3.6.1_mmap_nolazy.txt",
        "test.out__4.2.0_nio_lazy.txt": "https://issues.apache.org/jira/secure/attachment/12573915/test.out__4.2.0_nio_lazy.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13603645",
            "date": "2013-03-15T18:27:53+0000",
            "content": "\nThe attached files include a test.sh script that:\n\n\tcreates some data where fields have a large number of values\n\tloads the data into solr\n\texecs 2 queries for a single doc using two different fl options\n\ttriggers a commit to flush caches\n\texecs the same two queries in a differnet order\n\n\n\nAlso attached are the raw results of running this script on my Thinkpad T430s against the example jetty & solr configs where the version of solr, lazyfield loading, and the directory impl were varried...\n\n\n\tversion of solr\n\t\n\t\t3.6.1\n\t\t4.0.0\n\t\t4.2.0\n\t\n\t\n\tlazy field loading:\n\t\n\t\tlazy: default example configs\n\t\tnolazy: perl -i -pe 's\n{<enableLazyFieldLoading>true}\n{<enableLazyFieldLoading>false}\n' solrconfig.xml\n\t\n\t\n\tdirectory impl:\n\t\n\t\tmmap: java -Dsolr.directoryFactory=solr.MMapDirectoryFactory -jar start.jar\n\t\tnio: java -Dsolr.directoryFactory=solr.NIOFSDirectoryFactory -jar start.jar\n\t\n\t\n\n\n\nThere was no apparent difference in the directory impl choosen, or between 4.0 and 4.2.  Here's the summary results for 3.6 vs 4.0 using mmap...\n\n\n\n\n step \n 3.6 nolazy \n 3.6 lazy \n 4.0 nolazy \n 4.0 lazy \n\n\n small fl \n 0m0.308s \n 0m0.998s \n 0m0.260s \n 0m0.202s \n\n\n big fl \n 0m0.178s \n 0m0.263s \n 0m0.084s \n 16m15.735s \n\n\n commit \n XXXXXXX \n XXXXXXX \n XXXXXXX \n XXXXXXX \n\n\n big fl \n 0m0.157s \n 0m0.118s \n 0m0.218s \n 0m0.133s \n\n\n small fl \n 0m0.036s \n 0m0.035s \n 0m0.049s \n 3m2.814s \n\n\n\n\n\nAlso attached is also the results of a single test I did running Solr 4.0 pointed at the configs & index built with 3.6.1 to rule out codec changes: it behaved essentially the same as the 4.0 tests that built the index from scratch. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13603649",
            "date": "2013-03-15T18:29:59+0000",
            "content": "I wonder if this could be related to index compression (and maybe the same block being repeatedly decompressed for each lazy field being accessed?) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13603683",
            "date": "2013-03-15T18:52:59+0000",
            "content": "I wonder if this could be related to index compression (and maybe the same block being repeatedly decompressed for each lazy field being accessed?)\n\nThis also happens in Solr 4.0, which had no compression.\n\nThe reason here might be the changes in stored fields altogether. Lucene natively no longer has support for lazy field loading, but there is a \"backwards layer\" just for Solr in modules/misc (LazyDocument.java). The document does not use maps to lookup, if you have many fields its always a scan through the ArrayList of all fields in the document. The lazyness in LazyDocument is only that the whole document is loaded delayed, but no longer single fields. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13603845",
            "date": "2013-03-15T21:02:28+0000",
            "content": "Lucene natively no longer has support for lazy field loading, but there is a \"backwards layer\" just for Solr in modules/misc (LazyDocument.java)\n\nYeah .. LazyDocument is seriously evil...\n\nThe document does not use maps to lookup, if you have many fields its always a scan through the ArrayList of all fields in the document.\n\nIt's worse then that though \u2013 having many fields and scanning through them all to fetch a single field value (or an array of field values for a single name) is a cost that has to be paid in 4.x regardless of whether you are using LazyDocument or not, the root problem here seems to be having fields that contain many values.  That problem is exacerbated by the fact that unlike 3.x lazy loading, 4.x LaxyDocument/LazyField doesn't do anything to \"cache\" the fields you've already asked for.\n\nBelow are my notes from investigating this and trying to get up to speed on the new world order of document loading w/o FieldSelector.  I'll experiment with some fixes after i get some food...\n\n\n\n\nLUCENE-2308 - r1162347\n\n\tIndexReader.doc(int,FieldSelector) deleted\n\tFieldSelector moved to misc\n\tnew concept StoredFieldVisitor introduced\n\t\n\t\tvoid IndexReader.document(int docID, StoredFieldVisitor visitor)\n\t\n\t\n\tnew impl DocumentStoredFieldVisitor extends StoredFieldVisitor\n\tnew impl FieldSelectorVisitor extends StoredFieldVisitor\n\t\n\t\tappears all the old FieldSelector logic from IndexReader moved here?\n\t\tcontains a private \"LazyField extends Field\" that caches field values once fetched\n\t\n\t\n\tSolrIndexSearcher modified to use FieldSelectorVisitor\n\n\n\nLUCENE-2621 - r1199779\n\n\teliminates FieldSelector & FieldSelectorVisitor\n\tleaves StoredFieldVisitor & DocumentStoredFieldVisitor intact\n\tintroduced public LazyDocument containing \"LazyField implements IndexableField\"\n\t\n\t\tthis version of LazyField does not cache any data once fetched\n\t\n\t\n\tchanges SolrIndexSearcher's SetNonLazyFieldSelector to extend StoredFieldVisitor\n\t\n\t\tadd's LazyField to the Document for any fields not immediately needed\n\t\n\t\n\n\n\n\nThe crux of the problem is that:\n\n\tLazyDocument is lazy about loading the doc, but once you ask for the value any LazyField, the entire Document (with all underlying IndexableField values) is loaded.\n\teven though the entire document has been loaded once a single LazyField is used, the performance of iterating over LazyField's is TERRIBLE when there are lots of values for a single field\n\trequests for the value of individual LazyFields are not cached/stored anywhere, so the poor performace affects all subsequent re-uses of the same LazyDocuments\n\n\n\nDetails...\n\nThe state tracked in a LazyField is a refrence back to the underlying LazyDocument, the field name, and the \"num\" offset of this IndexableField in the list of values for that field name.  When you ask the LazyField for it's value, it asks the underlying LazyDocument to fetch the entire Document (if it hasn't already) and then it asks that Document for all values of the assocaited field name as an arry, and then it looks up it's \"num\" offset in that array.\n\nSo if you build up an (outer) Document containing N LazyField instances for field named \"foo\" (as is done in Solr's SetNonLazyFieldSelector), and then try to iterate over the values with something like String[] values = outerDoc.getValues(\"foo\"); under the covers LazyField will load every value of every field of that document into memory as an \"innerDoc\", that innerDoc will be asked N times to generate a new IndexableField[] of every value of field \"foo\" (which BTW: involves iterating over every IndexableField value of every field) and N-1 elements of that array will then be ignored and thrown away.\n\n\n\nIt's not clear to me why FieldSelectorVisitor was eliminated in LUCENE-2621 (no discussion in the comments on point) but it's also not clear to me why LazyDocument+LazyField would ever be a good idea in any application that had more then a handful of fields (and if you don't have very many fields, why are you lazy loading?).  \n\nIt's also not clear to me why the LazyDocument version of LazyField doesn't include the same caching logic as the version that was included in FieldSelectorVisitor (or the older lazy loading code in 3.6) because w/o that the usage pattern in Solr \u2013 in which Document objects are cached \u2013 results in the worst of all possible worlds: once a Document is cached with only a small subset of \"real\" fields, and the rest are \"LazyField\" instances, every subsequent request for that document that involves those LazyFields is slow, even if they ask for the same LazyField over and over. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13604124",
            "date": "2013-03-16T05:25:44+0000",
            "content": "Digression...\n\n\nIt really feals like the whole LazyDocument API and usage pattern \u2013 particularly the semantics in which \"LazyDocument.getField(FieldInfo)\" can be used \u2013 is really brittle and confusiong.\n\nIt assumes it will be called exactly once for each StorableField that exists for that field name, in order because the internal counter is assumed to correspond exactly wit the array index of the corresponding array of values. (In short: it's really only useful when called from StoredFieldVisitor)\n\nIf, for example, a client app tries to use the same LazyDocument instance to generate LazyField instances for the same field twice \u2013 it will most likeley get an ArrayIndexOutOfBoundsError.  Likewise a user could read the jacadocs for LazyDocument.getField and assume that it works simlar to StorableDocument.getField expecting it to return a LazyField of the first field value for the specified field.  They could wind up calling the method twice on the same field and getting lazy fields pointing at two differnet values (the first and second StorableField instances for that field name)\n\nnone of which directly relates to this particular bug, but since this public class seems to have been added solely for solr, it may be worth considering deprecating it, and moving the logic solr needs into protected/private classes.\n\n\n...as for the matter at hand...\n\nI reworked the internals of hte class a bit so that:\n\n\n\tLazyField instances cache their underlying values similar to how lazy loading worked in 3.x\n\tAsking for the value of a LazyField instance causes all LazyField's (produced by the same LazyDocument) with the same field name to be \"actualized\" in a single pass over the underlying document\n\n\n\nThe changes eliminate the pathalogical case of iterating over many LazyFields, and shouldn't add much even in the edge case of only carrying about a single field value when there are many \u2013 it's still a single loop in the underlying Document of the fields, there's just no more short circut for hte single value case.\n\nIn order for these changes to work, the LazDocument has to now keep a reference to every LazyField it generates so that they can all be repopulated when one of their filed name brothers is repopulated.  The memory footprint of this shouldn't be too bad in the common case (afterall: the LazyDocument was already fetching the entire underlying Document keeping the whole thing around as long as there was a single LazyField in the heap) but just to be safe i made it track the list of LazyFields using weak refrences \u2013 so even if someone asks for a bunch of LazyField instance for a field named \"foo\", and then throws away all but a few of them, they can be garbage collected regardless of how many other \"foo\" LazyFields are still arround or when/if their real values are loaded.\n\nPatch includes a few test updates in solr to sanity check that lazy loading value caching works, but i definitely want to add some true LazyDocument unit tests to the module (there don't seem to be any at all at the moment) to exercise the \"all lazy fields with the same name get populated at the same time\" and \"what if a weakref LazyField goes away\" logic before i'd consider committing.\n\n\n\nFeedback would be greatly appreciated. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13605968",
            "date": "2013-03-19T02:34:05+0000",
            "content": "updated patch\n\nin addition to adding more tests, i added logic so that when the underlying document is fetched to populate the lazy fields, only the specific fields needed will be loaded (so if a doc contains fields w, x, y, and z, and the client code fetches field w and requests that fields y and z be lazy loaded, then field x will never be read. and field w will not be fetched redundantly.\n\nwould really appreciate feedback, i'd like to get this into th 4.2.1 bug fix release "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13606388",
            "date": "2013-03-19T15:08:59+0000",
            "content": "Still trying to wrap my head around how all this works... particularly with synchronization and why the old implementation, or the patch, are thread safe.\n\nI'm not sure we should be using weak references though.  They could cause problems at the rate they could be generated. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13606458",
            "date": "2013-03-19T16:19:46+0000",
            "content": "Yonik Seeley: I can remove the weak references easy enough, but cna you elaborate on what concerns you have about the thread safety?\n\ncan you give me an example of a sequence of (parallel) events that you think would be problematic so i can try to address it? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13606838",
            "date": "2013-03-19T21:21:06+0000",
            "content": "updated patch removing the weak refs and fixing a few doc typoes "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13606910",
            "date": "2013-03-19T22:11:52+0000",
            "content": "I was initially worried about LazyDocument.getField, but I now realize that LazyDocument is not a \"Document\" (i.e. it is not what you will ever retrieve from the document cache).  It's more of a LazyFieldSource\n\nI think there may still be an issue with LazyField.realValue though, in that it may return a partially constructed object (unless realValue is guaranteed to be effectively immutable).  The easiest fix would be to make realValue volatile (and readers will thus cross a read memory barrier).\n\n\n      // edge case: if someone asks this LazyDoc for more LazyFields\n      // after other LazyFields from the same LazyDoc have been\n      // actuallized, we need to force the doc to be re-fetched\n      // so the new LazyFields are also populated.\n      doc = null;\n\n\n\nDoes this happen with Solr?\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13606933",
            "date": "2013-03-19T22:22:14+0000",
            "content": "The easiest fix would be to make realValue volatile (and readers will thus cross a read memory barrier).\n\nI don't fully understand what situation you are concerned about here, but making it volatile is easy .. running tests now.\n\nDoes this happen with Solr?\n\nno, but the way the public API for LazyDocument is defined, it is possible (even though it wouldn't really make any sense given the way the API is really only usable from a StoredFieldVisitor) so i wanted to protect against it  \u2013 i included test randomization to verify that the edge case works. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13607107",
            "date": "2013-03-20T00:39:28+0000",
            "content": "\nI switched to using volatile per yonik's suggestion, but in the process of testing i encountered a test failure that has me convinced that either i'm going insane, or there is some weird state info that gets corrupted if you attempt to use an IndexReader to fetch the stored field values of a doc while a StoredFieldVisitor is already being used to fetch those fields \u2013 and if i can encounter this kind of problem in a single threaded test, it scares me about any multi-threaded usages in any solr/lucene instance.\n\nThe attached patch updates the test with a bunch of nocommit System.out's as well as a new \"sanity\" test where i tried to recreate the underlying problem w/o using LazyDocument at all...\n\nThis is the first failure i encountered...\n\n\nant test  -Dtestcase=TestLazyDocument -Dtests.method=testLazy -Dtests.seed=553F22658CE2D9A9 -Dtests.slow=true -Dtests.locale=sk -Dtests.timezone=Africa/Ndjamena -Dtests.file.encoding=UTF-8\n\n...\n\n[junit4:junit4]    > Throwable #1: java.lang.AssertionError: fieldName count: b expected:<112> but was:<1229>\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([553F22658CE2D9A9:64E62F373CBE0D02]:0)\n[junit4:junit4]    > \tat org.junit.Assert.fail(Assert.java:93)\n[junit4:junit4]    > \tat org.junit.Assert.failNotEquals(Assert.java:647)\n[junit4:junit4]    > \tat org.junit.Assert.assertEquals(Assert.java:128)\n[junit4:junit4]    > \tat org.junit.Assert.assertEquals(Assert.java:472)\n[junit4:junit4]    > \tat org.apache.lucene.document.TestLazyDocument.testLazy(TestLazyDocument.java:170)\n...\n\n\n\nyou can see from the sysout calls prior to the failure that the \"needsField\" method of the LazyTestingStoredFieldVisitor seems to be getting called the correct number of times, but with the wrong field name \u2013 once it randomly calls assertNotNull(lazyDoc.getDocument()); (which calls reader.doc(int)) every successive call to needsField winds up refering to the next field name (\"b\") instead of all the other field names in the document.\n\nif you comment out the assertNotNull(lazyDoc.getDocument()); call, the test passes.\n\nThis lead me to write testHossssSanity which doesn't use any of hte lazy loading code at all, it just uses a simple StoredFieldsVisitor whose needsField method always returns NO but also arbitrarily calls reader.document(doc) for no reason once we start getting to the first lettered field name...\n\n\nant test  -Dtestcase=TestLazyDocument -Dtests.method=testHossssSanity -Dtests.seed=553F22658CE2D9A9 -Dtests.slow=true -Dtests.locale=sk -Dtests.timezone=Africa/Ndjamena -Dtests.file.encoding=UTF-8\n\n...\n\n[junit4:junit4]    > Throwable #1: java.lang.AssertionError: fieldName count: b expected:<139> but was:<1528>\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([553F22658CE2D9A9:FE3621EFA9383F64]:0)\n[junit4:junit4]    > \tat org.junit.Assert.fail(Assert.java:93)\n[junit4:junit4]    > \tat org.junit.Assert.failNotEquals(Assert.java:647)\n[junit4:junit4]    > \tat org.junit.Assert.assertEquals(Assert.java:128)\n[junit4:junit4]    > \tat org.junit.Assert.assertEquals(Assert.java:472)\n[junit4:junit4]    > \tat org.apache.lucene.document.TestLazyDocument.testHossssSanity(TestLazyDocument.java:120)\n...\n\n\n\n...you can again see from the sysout calls that needsField is called the expected number of times, but always with field named \"b\" (the first field name to exist after the first field name that calls reader.document.\n\nWhat finally convinced me that i wasn't insane was when i found a diffenret seed that produced a different low error at a lower level...\n\n\nant test  -Dtestcase=TestLazyDocument -Dtests.method=testHossssSanity -Dtests.seed=4C348A26E496AC38 -Dtests.slow=true -Dtests.locale=fr_CH -Dtests.timezone=Antarctica/Vostok -Dtests.file.encoding=UTF-8\n\n...\n\n[junit4:junit4]    > Throwable #1: java.lang.AssertionError: bits=5f\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([4C348A26E496AC38:E73D89ACC14C4AF5]:0)\n[junit4:junit4]    > \tat org.apache.lucene.codecs.lucene40.Lucene40StoredFieldsReader.visitDocument(Lucene40StoredFieldsReader.java:155)\n[junit4:junit4]    > \tat org.apache.lucene.index.SegmentReader.document(SegmentReader.java:139)\n[junit4:junit4]    > \tat org.apache.lucene.index.BaseCompositeReader.document(BaseCompositeReader.java:116)\n[junit4:junit4]    > \tat org.apache.lucene.document.TestLazyDocument.testHossssSanity(TestLazyDocument.java:118)\n...\n\n\n\n...which suggests to me that maybe there really is a bug in the underlying StoredFieldsVisitor logic (or perhaps just in the Lucene40StoredFieldsReader) ? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13607125",
            "date": "2013-03-20T00:52:44+0000",
            "content": "Ok ... dug into SegmentReader a bit and confirmed that under the covers SegmentCoreReaders is using ThreadLocal to track a stored StoredFieldsReader instance ... so there doesn't seem to be a a true thread safety problem here (whew), you just have to be careful as a StoredFieldVistor writer not to try and do any other stored field visiting inside your visitor callbacks or you'll corrupt internal state.\n\nso i need to change my testLazy to be less evil and not do that. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13607152",
            "date": "2013-03-20T01:13:29+0000",
            "content": "Ok ... made the test less evil so it doesn't trip over the StoredFieldsReader threadlocal, but modified it so it still excercises the possibility that a client might use the LazyDoc to ask for additional LazyField instances after already actualizing other instances\n\nI'm still hammering on the tests, but i'd appreciate review. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13607170",
            "date": "2013-03-20T01:46:57+0000",
            "content": "Sigh .. this time with nocommits removed for real. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13607469",
            "date": "2013-03-20T10:15:02+0000",
            "content": "Ok ... dug into SegmentReader a bit and confirmed that under the covers SegmentCoreReaders is using ThreadLocal to track a stored StoredFieldsReader instance \n\nAhh that's right ... so, the IR.document(int, visitor) is non-reentrant: your visitor cannot go and call IR.document again ... I think we should at least update the javadocs for StoredFieldVisitor to explain this?  I'll do that... "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13607726",
            "date": "2013-03-20T15:34:32+0000",
            "content": "Fixed on trunk, working on backport now...\n\nCommitted revision 1458887. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13607839",
            "date": "2013-03-20T16:45:02+0000",
            "content": "[trunk commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1458887\n\nSOLR-4589: Fixed CPU spikes and poor performance in lazy field loading of multivalued fields "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13607871",
            "date": "2013-03-20T17:15:14+0000",
            "content": "Committed revision 1458938.\nCommitted revision 1458959.\nh "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13607878",
            "date": "2013-03-20T17:22:31+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1458938\n\nSOLR-4589: Fixed CPU spikes and poor performance in lazy field loading of multivalued fields (merge r1458887) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654216",
            "date": "2013-05-10T10:34:25+0000",
            "content": "Closed after release. "
        }
    ]
}