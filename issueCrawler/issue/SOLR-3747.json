{
    "id": "SOLR-3747",
    "title": "Solr Score threshold 'reasonably', independent of results returned",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Task",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "Usually, search results are sorted by their score (how well the document matched the query), but it is common to need to support the sorting of supplied data too.\n\nBoosting affects the scores of matching documents in order to affect ranking in score-sorted search results. Providing a boost value, whether at the document or field level, is optional. \n\nWhen the results are returned with scores, we want to be able to only \"keep\" results that are above some score (i.e. results of a certain quality only). Is it possible to do this when the returned subset could be anything?\n\nI ask because it seems like on some queries a score of say 0.008 is resulting in a decent match, whereas other queries a higher score results in a poor match.\n\nI have written pseudo code to achieve what I said.\nNote: I have attached my code as screenshot\n\n\n      double scoreLimit = 0.75  #For example\n      searchResults = new Results[numberOfResults];\n      boolean lastScore=false;\n      solrSearchResults = Calling Solr Engine.\n      for( Result result : solrSearchResults) \n{\n\n        if (lastScore != false && result.score/lastScore<scoreLimit) break;\n\n        \tlastScore = result.score;\n\n            Adding new result to searchResults array      \t\t\t\t\t\n      }",
    "attachments": {
        "Screen Shot 2012-08-21 at 5.30.38 AM.png": "https://issues.apache.org/jira/secure/attachment/12541703/Screen%20Shot%202012-08-21%20at%205.30.38%20AM.png"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ramzi Alqrainy",
            "id": "comment-13438419",
            "date": "2012-08-21T02:47:57+0000",
            "content": "Pseudo Code "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13438544",
            "date": "2012-08-21T09:02:10+0000",
            "content": "Hi Ramzi,\n\nWhen the results are returned with scores, we want to be able to only \"keep\" results that are above some score (i.e. results of a certain quality only). Is it possible to do this when the returned subset could be anything?\n\nNo it is not. Although scores are comparable for a given query (meaning that if score(docA) > score(docB), docA is more relevant than docB), their absolute values are meaningless (score(docA) > score(docB) doesn't mean that docA is score(docA)/score(docB) times more relevant than docB). There are some explanations about it on the wiki: http://wiki.apache.org/lucene-java/ScoresAsPercentages.\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13438632",
            "date": "2012-08-21T11:59:01+0000",
            "content": "This is really a usage question more appropriate to the user's list. "
        },
        {
            "author": "Ramzi Alqrainy",
            "id": "comment-13438778",
            "date": "2012-08-21T14:59:05+0000",
            "content": "Thank you for a wonderfully detailed answer.  I think this task will help us to avoid poor match. for example.\n\nQuery: solr lucene apple\n\nDoc1 : solr solr apple    score: 10\nDoc2 : lucene apple       score : 7\nDoc3 : test solr test     score : 2        \n\nActually, I don't need Doc3 in my result, I want to ignore it. If we implement this task, we can give solr threshold 30%. then solr will ignore result Doc3 according to below calculation.\n\nDoc1 100% (10/10 *100%)\nDoc2 70%  (7/10 *100%)\nDoc3 20%  (2/10 *100%)\n\nIf my point is invalid, How we can solve this problem? Once again very thoughtful and helpful. Thank you. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13438814",
            "date": "2012-08-21T15:53:05+0000",
            "content": "Your point isn't invalid, it's just not appropriate for a JIRA, it's not likely that anyone will make a code change to handle this as it appears to be a usage question.\n\nIt's better asked on the user's list, which I note you've already done. Please confine the discussion to the user's list and raise a JIRA if there is a bona-fide issue with the Solr code that would require a code change...  "
        },
        {
            "author": "Ramzi Alqrainy",
            "id": "comment-13438833",
            "date": "2012-08-21T16:19:29+0000",
            "content": "Many thanks for your effort, and I am already wrote the post in user's list. \n\nhttp://lucene.472066.n3.nabble.com/Solr-Score-threshold-reasonably-independent-of-results-returned-td4002312.html\n\nIf you want, I can add script or batch to handle it. "
        },
        {
            "author": "alsadi",
            "id": "comment-13439388",
            "date": "2012-08-22T09:59:40+0000",
            "content": "Yes, Eric I agree with you that score is not a percent and if result #1 is twice as of #2 this does not mean it's double relevant. But the need for a threshold is valid.\n\nWe always want to decrease noise to signal ratio, when we have exact matches we don't want to show the rest of noise results.\n\nWe know that when result #1 is more relevant than #2 then its score is bigger, should the threshold be based on percent or on log or atan of the score is a matter of tuning.\n\nwhat worked for me is stop when the score of the current result is less than 0.25 of the score of previous result.\nwhere 0.25 is just fudge factor.\nand since we compare a result with previous result a score that smoothly fades will continue to fade for ever, while when we have a sheer drop of score it will stop. "
        }
    ]
}