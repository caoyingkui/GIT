{
    "id": "LUCENE-3586",
    "title": "Choose a specific Directory implementation running the CheckIndex main",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "It should be possible to choose a specific Directory implementation to use during the CheckIndex process when we run it from its main.\nWhat about an additional main parameter?\nIn fact, I'm experiencing some problems with MMapDirectory working with a big segment, and after some failed attempts playing with maxChunkSize, I decided to switch to another FSDirectory implementation but I needed to do that on my own main.\nShould we also consider to use a FileSwitchDirectory?\nI'm willing to contribute, could you please let me know your thoughts about it?",
    "attachments": {
        "LUCENE-3586.patch": "https://issues.apache.org/jira/secure/attachment/12505132/LUCENE-3586.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-22T14:54:53+0000",
            "content": "I think this makes sense though. sometimes like in your usecase MMap just fails with OOM and since we create the directory instance based on constants like 64bit platform, OS etc. we could make this optional. another option would be to simply use NIOFSDirectory no matter where we are. I don't think it is necessary to use FileSwitchDirectory for CheckIndex. Maybe you can add a commandline option and get a specific Dir impl if specified? NIO, MMAP & SimpleFS should be enough and use FSDirectory.open by default. ",
            "author": "Simon Willnauer",
            "id": "comment-13155184"
        },
        {
            "date": "2011-11-22T14:57:58+0000",
            "content": "Luca, I made you a contributor for Lucene & Solr (JIRA Role) so you can assign issues to you.  ",
            "author": "Simon Willnauer",
            "id": "comment-13155187"
        },
        {
            "date": "2011-11-22T15:04:51+0000",
            "content": "Cool! Thanks, tomorrow I'll add a patch for this. ",
            "author": "Luca Cavanna",
            "id": "comment-13155195"
        },
        {
            "date": "2011-11-22T16:26:59+0000",
            "content": "Hi Simon, hi Luca,\n\nMaybe we get some introduction and background from Luca, because in general issues are assigned to committers/contributors that have already done work for Lucene/Solr?\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-13155233"
        },
        {
            "date": "2011-11-22T16:30:42+0000",
            "content": "About the issue at all:\nwe should maybe have this parameter to all command line tools (e.g. IndexUpgrader,...). It would be good to have some general command line parser for those comand line tools that work on indexes, so we don't have the same/similar code several times.\n\nFor me much more interesting is the problem you have with MMAP? Whats you Java VM / Lucene version and what's your complete command line to CheckIndex? How big is the index? What architecture are you using and which OS? Changing the chunk size is not needed in most cases, if it needs to we need complete configuration details to optimize auto detection. ",
            "author": "Uwe Schindler",
            "id": "comment-13155235"
        },
        {
            "date": "2011-11-22T17:35:49+0000",
            "content": "Hi Uwe, hi all,\nyou're right, I know (virtually) almost every people working at Solr/Lucene, but you of course don't know me!\nI'm Luca, I'm a software developer actually working at Dutchworks in Amsterdam within the enterprise search team. You certainly know my colleague Martijn, Solr/Lucene committer. I really like the open source world and the solr/lucene project. These are my contributions so far: SOLR-1499 and SOLR-2591. Just a few, but I would like to contribute as much as I can. Please,don't hesitate to ask if you have any questions.\nI assigned the issue to myself because I thought I was gonna work on it, but let me know if I made some mistakes.\nTomorrow I'll add more details about the MMAP and the OOM. \nThanks for your help and for your point of view about the issue, it would be great to do something more generic than I initially thought, I'll have a look at the code.\n ",
            "author": "Luca Cavanna",
            "id": "comment-13155285"
        },
        {
            "date": "2011-11-23T14:23:18+0000",
            "content": "Hi Uwe,\nI'm working with lucene 3.4 and jvm 1.6.0_23 64 bit. I have ulimit unlimited and /proc/sys/vm/max_map_count 65530. The index size is 76GB, I have problems with just one segment, the first and definitely the biggest one, on which the fdt is 22GB, tvf is 13GB, prx is 4.2GB, frq is 2.8GB, and so on (others are under 1GB). I tried to run the checkindex with -Xmx512m and -Xms512m. Here is my output:\n\nSegments file=segments_kj numSegments=31 version=3.4 format=FORMAT_3_1 [Lucene 3.1+]\n  1 of 31: name=_1iz docCount=3186709\n    compound=false\n    hasProx=true\n    numFiles=12\n    size (MB)=41,902.362\n    diagnostics = \n{optimize=true, mergeFactor=23, os.version=2.6.27.59-1POi-x86_64, os=Linux, lucene.version=3.4.0 1167142 - mike - 2011-09-09 09:02:09, source=merge, os.arch=amd64, java.version=1.6.0_23, java.vendor=Sun Microsystems Inc.}\n    has deletions [delFileName=_1iz_r.del]\n    test: open reader.........FAILED\n\nThanks, and please let me know if you have any questions. ",
            "author": "Luca Cavanna",
            "id": "comment-13155894"
        },
        {
            "date": "2011-11-25T16:12:15+0000",
            "content": "Here is the first version of my patch, please let me know your comments.\n\nI tried to do something more generic for command line tools and less \"static\" but I found myself reinventing the wheel, writing stuff similar to commons cli, so I gave up.\nI basically added a new option called -dir-impl to CheckIndex, IndexReader and IndexUpgrader (please let me know if I forgot some other tools). The new option can have the following values (case insensitive): mmap, nio or simple. Any other value is ignored and considered as default (FSDirectory.open).\n\nI noticed a finally block used to close the directory inside IndexReader, but it's missing on the other two classes, wouldn't it be better to add it to CheckIndex and IndexUpgrader? ",
            "author": "Luca Cavanna",
            "id": "comment-13157218"
        },
        {
            "date": "2011-11-25T16:30:13+0000",
            "content": "Forgot to mention that the patch applies to the 3x branch. After your comments, and maybe some changes, I'll attach a patch for the trunk as well. ",
            "author": "Luca Cavanna",
            "id": "comment-13157226"
        },
        {
            "date": "2011-11-28T08:53:13+0000",
            "content": "hey luca, you patch looks good. I wonder if we should maybe add an enum to FSDirectory like \n\nenum Type {\n  NIOFS,\n  MMAP,\n  SIMPLE;\n\n}\n\n\n\n\n\nand add FSDirectory#open(File, Type). Just an idea, this would make the CommandlineUtils obsolete and I think it could be useful... not sure what others think... uwe? \n\nForgot to mention that the patch applies to the 3x branch\n\nusually we (I) only provide a patch against trunk since we do a merge when we backport so a patch doesn't help very often. So it'd be better if you'd use trunk to create patches.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13158296"
        },
        {
            "date": "2011-11-28T09:15:57+0000",
            "content": "Hey Simon, \nlooks better! I thought I wasn't allowed to edit FSDirectory just for a new command line option \nI suppose we don't need also FSDirectory#open(File, LockFactory, Type) because we can't specify the LockFactory from command line, right? ",
            "author": "Luca Cavanna",
            "id": "comment-13158309"
        },
        {
            "date": "2011-11-28T11:43:54+0000",
            "content": "Hmm, I don't think we should add an enum to FSDir here?  Can we simply accept the class name and then just load that class (maybe prefixing oal.store so user doesn't have to type that all the time)?\n\nAlso, can we make it a hard error if the specified name isn't recognized?  (Instead of silently falling back to FSDir.open). ",
            "author": "Michael McCandless",
            "id": "comment-13158357"
        },
        {
            "date": "2011-11-30T08:09:18+0000",
            "content": "\nHmm, I don't think we should add an enum to FSDir here? Can we simply accept the class name and then just load that class (maybe prefixing oal.store so user doesn't have to type that all the time)?\n\nAlso, can we make it a hard error if the specified name isn't recognized? (Instead of silently falling back to FSDir.open).\n\nThat's fine as well. Just a little bit longer than writing NIOFS, MMAP or SIMPLE, but I guess it doesn't matter. Mike, do you mean to load the class using reflection or compare the input string to those three class names?\n\nAny other opinion? ",
            "author": "Luca Cavanna",
            "id": "comment-13159894"
        },
        {
            "date": "2011-11-30T15:50:26+0000",
            "content": "I think just load the classes by name via reflection?  This way if I have my own external Dir impl somewhere I can also have CheckIndex use that... ",
            "author": "Michael McCandless",
            "id": "comment-13160102"
        },
        {
            "date": "2011-12-07T15:15:48+0000",
            "content": "New patch against trunk according to Michael's hints.\nIt's now possible to use external FSDirectory implementations. The package oal.store is used if no package is specified. This isn't good if someone has the FSDirectory implementation in the default package, but I'm not sure if this case is worth a fall back. Please, let me know what you think. ",
            "author": "Luca Cavanna",
            "id": "comment-13164450"
        },
        {
            "date": "2011-12-10T20:14:03+0000",
            "content": "Thanks Luca; I think this patch is close!\n\nOne thing I noticed is that LuceneTestCase.java (under\nsrc/test-framework/java/org/apache/lucene/util), has a method\nnewDirectoryImpl doing almost the same thing as the new static method\nhere.  Maybe merge these two (have LTC call the new one, but leave that\nrandom logic in LTC)?\n\nSeparately, can we put the static method in oal.util?  Maybe in a new\nfile, CommandLineUtil.java or something? ",
            "author": "Michael McCandless",
            "id": "comment-13166965"
        },
        {
            "date": "2011-12-12T17:06:08+0000",
            "content": "Good eye! Thanks Michael for your feedback.\nI attached a new patch version. The merge hasn't been so easy since LTC needs sometimes a Directory, while other times a FSDirectory. Furthermore commmand line utilities don't need a fallback while  tests do..before the tests we even create the directory on file system etc.\nLet me know what you think! ",
            "author": "Luca Cavanna",
            "id": "comment-13167599"
        },
        {
            "date": "2011-12-12T18:53:05+0000",
            "content": "Hi Luca,\n\nActually I don't like all the generics required in CommandLineUtil solely to support LTC's case; if not for LTC the util would be much simpler (just one method taking a String class name/path and returning a Directory instance).\n\nSo.... I think we should go back, and leave LTC with its current (private) code for finding the FS/Directory class/instance, and keep CommandLineUtil simple?  Sorry!\n\nOtherwise the patch looks great!  Can you add the lost \" // for javadocs\" comment on one of CheckIndex's imports?  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-13167672"
        },
        {
            "date": "2011-12-13T10:25:38+0000",
            "content": "Hi Michael,\n\nActually I don't like all the generics required in CommandLineUtil solely to support LTC's case; if not for LTC the util would be much simpler (just one method taking a String class name/path and returning a Directory instance).\nI see. But I think we were on the right track. Have a look at the last version, I kept the merged code removing that method with generics. If you don't like even this version I'll go back, no problem at all!\n\n\nCan you add the lost \" // for javadocs\" comment on one of CheckIndex's imports?\nOps, I restored it. ",
            "author": "Luca Cavanna",
            "id": "comment-13168290"
        },
        {
            "date": "2011-12-13T12:21:09+0000",
            "content": "What is the problem with the generics code? I like it  ",
            "author": "Uwe Schindler",
            "id": "comment-13168324"
        },
        {
            "date": "2011-12-13T17:32:10+0000",
            "content": "New patch looks great Luca!  I'll commit & backport shortly... ",
            "author": "Michael McCandless",
            "id": "comment-13168528"
        },
        {
            "date": "2011-12-13T17:51:28+0000",
            "content": "Thanks Luca! ",
            "author": "Michael McCandless",
            "id": "comment-13168540"
        },
        {
            "date": "2011-12-13T17:58:41+0000",
            "content": "Cool, thanks to you Michael! ",
            "author": "Luca Cavanna",
            "id": "comment-13168545"
        }
    ]
}