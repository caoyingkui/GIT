{
    "id": "LUCENE-421",
    "title": "Numeric range searching with large value sets",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I have a set of enhancements that build on the numeric sorting cache introduced\nby Tim Jones and that provide integer and floating point range searches over\nnumeric ranges that are far too large to be implemented via the current term\nrange rewrite mechanism.  I'm new to Apache and trying to find out how to attach\nthe source files for the changes for your consideration.",
    "attachments": {
        "FloatRangeScorer.java": "https://issues.apache.org/jira/secure/attachment/12314993/FloatRangeScorer.java",
        "ASF.LICENSE.NOT.GRANTED--Sort.java": "https://issues.apache.org/jira/secure/attachment/12312703/ASF.LICENSE.NOT.GRANTED--Sort.java",
        "ASF.LICENSE.NOT.GRANTED--FloatRangeScorer.java": "https://issues.apache.org/jira/secure/attachment/12312701/ASF.LICENSE.NOT.GRANTED--FloatRangeScorer.java",
        "ASF.LICENSE.NOT.GRANTED--IntStack.java": "https://issues.apache.org/jira/secure/attachment/12312706/ASF.LICENSE.NOT.GRANTED--IntStack.java",
        "ASF.LICENSE.NOT.GRANTED--RangeQuery.java": "https://issues.apache.org/jira/secure/attachment/12312702/ASF.LICENSE.NOT.GRANTED--RangeQuery.java",
        "ASF.LICENSE.NOT.GRANTED--FieldCache.java": "https://issues.apache.org/jira/secure/attachment/12312704/ASF.LICENSE.NOT.GRANTED--FieldCache.java",
        "IntegerRangeScorer.java": "https://issues.apache.org/jira/secure/attachment/12314994/IntegerRangeScorer.java",
        "ASF.LICENSE.NOT.GRANTED--IntegerRangeQuery.java": "https://issues.apache.org/jira/secure/attachment/12312698/ASF.LICENSE.NOT.GRANTED--IntegerRangeQuery.java",
        "IntegerRangeQueryTestCase.java": "https://issues.apache.org/jira/secure/attachment/12314980/IntegerRangeQueryTestCase.java",
        "ASF.LICENSE.NOT.GRANTED--FieldCacheImpl.java": "https://issues.apache.org/jira/secure/attachment/12312705/ASF.LICENSE.NOT.GRANTED--FieldCacheImpl.java",
        "ASF.LICENSE.NOT.GRANTED--FloatRangeQuery.java": "https://issues.apache.org/jira/secure/attachment/12312700/ASF.LICENSE.NOT.GRANTED--FloatRangeQuery.java",
        "ASF.LICENSE.NOT.GRANTED--IntegerRangeScorer.java": "https://issues.apache.org/jira/secure/attachment/12312699/ASF.LICENSE.NOT.GRANTED--IntegerRangeScorer.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-08-11T06:30:55+0000",
            "content": "Created an attachment (id=15999)\nThe query component for large integer ranges ",
            "author": "Randy Puttick",
            "id": "comment-12322549"
        },
        {
            "date": "2005-08-11T06:31:48+0000",
            "content": "Created an attachment (id=16000)\nThe scorer component complementing the integer range ",
            "author": "Randy Puttick",
            "id": "comment-12322550"
        },
        {
            "date": "2005-08-11T06:32:26+0000",
            "content": "Created an attachment (id=16001)\nlarge floating point range class ",
            "author": "Randy Puttick",
            "id": "comment-12322551"
        },
        {
            "date": "2005-08-11T06:33:05+0000",
            "content": "Created an attachment (id=16002)\nscorer for floating point range ",
            "author": "Randy Puttick",
            "id": "comment-12322552"
        },
        {
            "date": "2005-08-11T06:35:37+0000",
            "content": "Created an attachment (id=16003)\nmodification to rewrite method of RangeQuery\n\nThis allows you to control the use of the larger numeric range queries by\nmanipulating the maximum subclause member of BooleanQuery.  It catches the\nTooManyClauses exception from the construction of the range and attempts to\ncreate either an integer or floating point query of the new variety. ",
            "author": "Randy Puttick",
            "id": "comment-12322553"
        },
        {
            "date": "2005-08-11T06:38:15+0000",
            "content": "Created an attachment (id=16004)\nsome quick sort implementations for the range query implementation\n\nMaybe there are better places to get these algorithm implementations but this\nimplementation requires the fastest possible indirect sort of document numbers\nagainst field values.  I hit fields with many repeated values in testing and\ndecided it was worth having a fat pivot implementation.\n\nThe sort used in actual query execution is everyday, non-recursive quicksort. ",
            "author": "Randy Puttick",
            "id": "comment-12322554"
        },
        {
            "date": "2005-08-11T06:40:22+0000",
            "content": "Created an attachment (id=16005)\ntwo new constants for use against the sorting cache ",
            "author": "Randy Puttick",
            "id": "comment-12322555"
        },
        {
            "date": "2005-08-11T06:44:25+0000",
            "content": "Okay found the attachments.  IMHO numeric range query capability is pretty\nuseful BUT this implementation (like the sorting implementation) introduces a\nfairly lengthy cache-warming cost for the first query executed (like 0.5\nseconds).  The implications of this will vary with application but should\ncertainly be considered in a dynamically updated installation. ",
            "author": "Randy Puttick",
            "id": "comment-12322556"
        },
        {
            "date": "2005-08-11T07:07:31+0000",
            "content": "Created an attachment (id=16006)\nFieldCacheImpl.java\n\nExtensions of the field cache implementation that build the range data\nstructures\nfor integers and floating point ",
            "author": "Randy Puttick",
            "id": "comment-12322557"
        },
        {
            "date": "2005-08-11T14:19:20+0000",
            "content": "How about rewriting to BitSetQuery instead of BooleanQueries? ",
            "author": "Ray Tsang",
            "id": "comment-12322558"
        },
        {
            "date": "2005-08-12T00:02:40+0000",
            "content": "How I cracked this nut was to manipulate numbers such that they index properly\nand then use a ConstantScoreRangeQuery\nhttp://issues.apache.org/bugzilla/show_bug.cgi?id=34673 ",
            "author": "Yonik Seeley",
            "id": "comment-12322559"
        },
        {
            "date": "2005-08-12T01:09:54+0000",
            "content": "(In reply to comment #11)\n> How I cracked this nut was to manipulate numbers such that they index properly\n> and then use a ConstantScoreRangeQuery\n> http://issues.apache.org/bugzilla/show_bug.cgi?id=34673\n\nThanks Yonik, using a filter like this will certainly work functionally but I\nneed range queries to perform well and filtering is kind of like full table\nscans in the relational world.  In my use cases the range queries are the\nprimary document reduction mechanism so I wouldn't benefit from 'skip to'\nimplementation to avoid reading a lot of field values. ",
            "author": "Randy Puttick",
            "id": "comment-12322560"
        },
        {
            "date": "2005-08-12T01:13:10+0000",
            "content": "(In reply to comment #10)\n> How about rewriting to BitSetQuery instead of BooleanQueries?\n\nI'm not familiar with BitSetQuery and it isn't in the released version I'm\nusing.  What does it do? ",
            "author": "Randy Puttick",
            "id": "comment-12322561"
        },
        {
            "date": "2005-08-12T02:24:03+0000",
            "content": "Randy, I haven't looked at the source yet, but is the aim to allow for queries\nsuch as \"give me documents that have a price in a range from 0.99 to 9.99\"?\n\nFrom the sound of this, this looks useful.\nI hardly ever use range queries, so could you please explain what you mean by\n\"... searches over numeric ranges that are far too large to be implemented via\nthe current term range rewrite mechanism\"?\n\nHow does the current implementation deal with a large numeric range, and how\ndoes your contribution fix it?\n\nThanks. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12322562"
        },
        {
            "date": "2005-08-12T02:39:50+0000",
            "content": "(In reply to comment #14)\n> Randy, I haven't looked at the source yet, but is the aim to allow for queries\n> such as \"give me documents that have a price in a range from 0.99 to 9.99\"?\n> \n> From the sound of this, this looks useful.\n> I hardly ever use range queries, so could you please explain what you mean by\n> \"... searches over numeric ranges that are far too large to be implemented via\n> the current term range rewrite mechanism\"?\n> \n> How does the current implementation deal with a large numeric range, and how\n> does your contribution fix it?\n> \n> Thanks.\n> \n\n\nYes, this change will efficiently implement floating point ranges like .99 to 9.99.\n\nThe current rewrite scans terms (therefore lexicographically) from the beginning\nof the range and generates a boolean query that is the disjunction of all the\nterms falling in the lexicographic range.  Any large range throws\nTooManyClauses.  You'll note in an earlier comment that 34673 is a contribution\nthat fixes this case essentially by turning the query into a filter.\n\nMy submission catches the TooManyExceptions exception within the rewrite method\nof RangeQuery then attempts to construct either an IntegerRangeQuery or\nFloatRangeQuery (this permits you to control the mechanism by manipulating the\nmaximum boolean clauses).  Both of these work by:\n1) pulling field values for all docnos (as in the numeric sorting solution)\n2) creating an array of docnos then sorting that array relative to the field values\n3) at query time, the bounds are found using (indirect) binary search on the\ndocnos to find the set of docnos that match the range\n4) the query sorts this set of docnos back into docno order and returns that set\n\nRange sorting is useful for e.g. prices, heights etc. etc. ",
            "author": "Randy Puttick",
            "id": "comment-12322563"
        },
        {
            "date": "2005-08-20T01:16:11+0000",
            "content": "Created an attachment (id=16115)\nIntStack.java\n\nDoh! My fault for not including the attachment ",
            "author": "Randy Puttick",
            "id": "comment-12322564"
        },
        {
            "date": "2005-10-20T16:56:37+0000",
            "content": "I juste made some junit test using some IntegerRangeQuery's, and I get\nsome strange results.\nI attached the junit test I used. It fails on the last assert. I am\nexpecting only one result: the date between 1981 and 1983, but I get 2\nThe test output is:\n\nterm = date:1980\nterm = date:1982\nterm = date:1984\nRangeQuery q = date:[1981 TO 1983]\nDocument<stored/uncompressed,indexed,tokenized<date:1982>>\nIntegerRangeQuery q = date=[1981 TO 1983]\nDocument<stored/uncompressed,indexed,tokenized<date:1982>>\nDocument<stored/uncompressed,indexed,tokenized<date:1984>> ",
            "author": "Antoine",
            "id": "comment-12332560"
        },
        {
            "date": "2005-10-21T02:07:52+0000",
            "content": "Fix for the bug found by IntegerRangeQueryTest ",
            "author": "Randy Puttick",
            "id": "comment-12332605"
        },
        {
            "date": "2009-12-08T03:58:57+0000",
            "content": "Closing - a few years old now and we currently have NumericRangeQuery. ",
            "author": "Mark Miller",
            "id": "comment-12787291"
        }
    ]
}