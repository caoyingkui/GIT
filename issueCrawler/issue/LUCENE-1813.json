{
    "id": "LUCENE-1813",
    "title": "Add option to ReverseStringFilter to mark reversed tokens",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This patch implements additional functionality in the filter to \"mark\" reversed tokens with a special marker character (Unicode 0001). This is useful when indexing both straight and reversed tokens (e.g. to implement efficient leading wildcards search).",
    "attachments": {
        "reverseMark-2.patch": "https://issues.apache.org/jira/secure/attachment/12416671/reverseMark-2.patch",
        "reverseMark.patch": "https://issues.apache.org/jira/secure/attachment/12416664/reverseMark.patch",
        "LUCENE-1813.patch": "https://issues.apache.org/jira/secure/attachment/12416732/LUCENE-1813.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-15T16:16:30+0000",
            "content": "Patch and unit tests. ",
            "author": "Andrzej Bialecki",
            "id": "comment-12743732"
        },
        {
            "date": "2009-08-15T16:52:31+0000",
            "content": "the corresponding solr task (SOLR-1321) is marked as version 1.4\n\ndoes anyone oppose putting this one in 2.9?  ",
            "author": "Robert Muir",
            "id": "comment-12743737"
        },
        {
            "date": "2009-08-15T17:07:21+0000",
            "content": "andrzej, the reverse() methods are public, can you supply default impls (withMark=false) just in the case that someone is using them?\n\nalternatively, maybe the reverse() methods could stay the same, and the marking could happen in incrementToken() ? ",
            "author": "Robert Muir",
            "id": "comment-12743740"
        },
        {
            "date": "2009-08-15T18:08:13+0000",
            "content": "Either way is fine with me. To preserve the public API I think it's better to move this marking logic to incrementToken(). I'll prepare an updated patch. ",
            "author": "Andrzej Bialecki",
            "id": "comment-12743743"
        },
        {
            "date": "2009-08-15T20:23:16+0000",
            "content": "Updated patch that moves the marking logic to incrementToken(). ",
            "author": "Andrzej Bialecki",
            "id": "comment-12743765"
        },
        {
            "date": "2009-08-16T11:48:15+0000",
            "content": "thanks Andrzej, i think this patch is ready. ",
            "author": "Robert Muir",
            "id": "comment-12743834"
        },
        {
            "date": "2009-08-16T22:10:16+0000",
            "content": "if no one objects to this one I will commit it tomorrow. ",
            "author": "Robert Muir",
            "id": "comment-12743916"
        },
        {
            "date": "2009-08-16T22:26:19+0000",
            "content": "+1 ",
            "author": "Mark Miller",
            "id": "comment-12743918"
        },
        {
            "date": "2009-08-16T23:29:14+0000",
            "content": "Very very minor thing, but does it make more sense to choose a more suitable character? U+0001 is an assigned character, with some semantic meaning (\"Start of Heading\", same as ASCII character 0x01) which isn't really relevant to this use. It mightn't be a bad idea to (a) choose a control character which makes sense in context, if there is one (I can't see one, myself), (b) using a character from the private-use area (U+E000 to U+F8FF) or (c) my preferred option, using the Unicode tag characters. The tag characters are designed for just such a purpose.. embedding contextual metadata in text fields. The general syntax for a tag is <TAG TYPE> followed by one or more <TAG CHARACTER>s. Unfortunately, only one tag type is defined in unicode at present (language tag), which isn't suitable.\n\nThat said, I think it makes sense (and is probably 'nicer') to pick one of the Unicode tag characters \u2013 say, U+E0052 TAG LATIN CAPITAL LETTER R (for 'reverse') and use that. This could lead to a de facto standard for Lucene fields, where different variations of the same token could use different leading tag characters. Rather than just everyone picking a character at random, this could lead to some sort of structure around similar situations (i.e. I could envisage a filter which uses U+E004E TAG LATIN CAPITAL LETTER N for a normalised version of the token, etc). \n\nSorry, I'm really anal about Unicode. Can't help it. ",
            "author": "Paul Cowan",
            "id": "comment-12743926"
        },
        {
            "date": "2009-08-16T23:42:19+0000",
            "content": "Sorry, I'm really anal about Unicode. Can't help it.\n\nThis is a full text search engine - we love it! ",
            "author": "Mark Miller",
            "id": "comment-12743928"
        },
        {
            "date": "2009-08-16T23:44:06+0000",
            "content": "\nSorry, I'm really anal about Unicode. Can't help it.\n\nMe too  My problem with tag characters is that they are deprecated.\n\nI will take your advice and look and see if there is something more suitable.  ",
            "author": "Robert Muir",
            "id": "comment-12743929"
        },
        {
            "date": "2009-08-16T23:51:26+0000",
            "content": "another issue, besides the fact they are deprecated, is that tag characters are outside of the BMP. \n\nCurrently, the reverse filter does not properly reverse characters outside of the BMP [it does not recognize them as one character], \nThis means characters such as tag characters will be 'reversed' into trail surrogate followed by lead surrogate (two unpaired surrogates).\nBut we cannot fix the above, as lucene wildcard support does not recognize codepoints > FFFF as one 'character' either.\n\nIf we are gonna pick a character other than U+0001, it needs to be inside the BMP. ",
            "author": "Robert Muir",
            "id": "comment-12743931"
        },
        {
            "date": "2009-08-17T00:04:09+0000",
            "content": "Yeah, ok, makes sense.\n\nI'd suggest choosing a range of Private Use characters from the BMP block then, that's what they're for. Doesn't really matter which... we can pick a block of (say) 256 and use the first one for this, then others can be used for other purposes later if required. U+ECxx, maybe, because that's got 3 letters out of 'lucene' in it  . So EC00 means 'reversed', and then people who need other similar filters can organise amongst themselves. ",
            "author": "Paul Cowan",
            "id": "comment-12743933"
        },
        {
            "date": "2009-08-17T00:10:15+0000",
            "content": "I looked into this and I think using the private use area (U+E000 to U+F8FF) would also not be the best.\nI do not think Lucene should use PUA characters system-internally, besides I have at least a few docs with PUA characters, and I think others will as well.\nWe should leave PUA characters available to the end user.\n\nSo personally I have nothing against this U+0001, but I'll take any recommendations... ",
            "author": "Robert Muir",
            "id": "comment-12743935"
        },
        {
            "date": "2009-08-17T00:18:51+0000",
            "content": "what if we simply make it so there is no boolean option for a marker character, instead it is ReverseFilter() and ReverseFilter(char marker)\nThis way, lucene does not define the character used for this operation, and someone can feel free to select whichever they want (such as U+0001)\n\nWhen we are on java 5 and can support supp. characters properly (reversing/wildcards,etc), then we can change this to ReverseFilter(int marker) and someone can use anything they want, including outside of the BMP?\n\nIf this is ok, I will supply a patch. ",
            "author": "Robert Muir",
            "id": "comment-12743936"
        },
        {
            "date": "2009-08-17T00:27:21+0000",
            "content": "OK, cool. I'm taking an interest in this purely because I have some ideas for other token filters which would do something similar, and really like the idea of tagging them in the same way just with different 'headers'. It would be really beneficial, I think, to come up with something that can be reused and, more importantly, combined (so different filters don't 'clash' with their output). What about making it 2 characters, at least? \n\nU+0001 START OF HEADER\nU+xxxx whatever you like to indicate 'reversing' (i.e. an 'R', or just a 0-byte as this is the first purpose allocated, or whatever)\n\nThis adds 2 bytes to each term, not 1, but terms generally don't take up that much room in the scale of a whole index and I think it's worth the flexibility. Hell, if you're willing to use 3 (that IS starting to seem wasteful, I admit) then maybe\n\nU+0001 START OF HEADER\nU+xxxx whatever\nU+0002 START OF TEXT\n\nThat's at least semantically meaningful. Other ideas, just looking at the ASCII control characters:\n\nU+xxxx whatever\nU+001F UNIT SEPARATOR\n\nor\n\nU+000E SHIFT OUT\nU+xxxx whatever\nU+000F SHIFT IN\n\nI don't really mind, but it's always nice to plan ahead. ",
            "author": "Paul Cowan",
            "id": "comment-12743937"
        },
        {
            "date": "2009-08-17T00:28:35+0000",
            "content": "Yes, or +1 on passing in your own marker, that lets everyone choose a character that won't clash with whatever unicode subset gets used for their tokens. ",
            "author": "Paul Cowan",
            "id": "comment-12743938"
        },
        {
            "date": "2009-08-17T00:28:38+0000",
            "content": "Paul ok, how about instead of char, a sequence \n\nThen you can use however many characters you want... ",
            "author": "Robert Muir",
            "id": "comment-12743939"
        },
        {
            "date": "2009-08-17T00:40:41+0000",
            "content": "updated patch so you can choose your own character for marking.\n\nif one character is not enough let me know (i suppose we could make it a sequence), but I'd rather keep this simple. ",
            "author": "Robert Muir",
            "id": "comment-12743940"
        },
        {
            "date": "2009-08-17T01:12:00+0000",
            "content": "Simple's good. I'm a happy man, thanks Robert. ",
            "author": "Paul Cowan",
            "id": "comment-12743943"
        },
        {
            "date": "2009-08-17T01:17:17+0000",
            "content": "Paul, thanks very much for your feedback... I think its a cleaner change now. ",
            "author": "Robert Muir",
            "id": "comment-12743944"
        },
        {
            "date": "2009-08-17T07:20:25+0000",
            "content": "+1. One comment, perhaps stating the obvious .. I picked char 0001 for two reasons - it's not likely to be used in regular text, and its UTF-8 encoding uses one byte. The use case for this filter means that it will create more or less as many tokens as there were in the original token stream, thus doubling the size of term dictionary. One byte here, one byte there, and suddenly it matters whether we use 0001 or FFFF ... ",
            "author": "Andrzej Bialecki",
            "id": "comment-12743983"
        },
        {
            "date": "2009-08-17T08:04:25+0000",
            "content": "\nI understand the desire to use a mark that requires fewer bytes, but the unicode bidi marks might be better for the purpose of marking writing direction: (U+200E LTR or U+200F RTL)\n\n ",
            "author": "Ted Dunning",
            "id": "comment-12743994"
        },
        {
            "date": "2009-08-17T11:27:54+0000",
            "content": "Ted, with the current patch you can do this: new ReverseStringFilter('\\u200E'), or new ReverseStringFilter('\\u200F'), or new ReverseStringFilter('\\u0001'), or whatever.\n\nAlso, for anyone using this filter its my understanding that each term in lucene's term dictionary is a \"delta\" versus the previous term, so the character you choose should not affect its size? ",
            "author": "Robert Muir",
            "id": "comment-12744023"
        },
        {
            "date": "2009-08-17T13:47:00+0000",
            "content": "Perhaps it is useful to define a few constants for each of these suggested characters to make it super easy for people to use them?  Just a thought.  Otherwise, I like the idea of passing in your own marker. ",
            "author": "Grant Ingersoll",
            "id": "comment-12744062"
        },
        {
            "date": "2009-08-17T14:58:01+0000",
            "content": "I like the idea of a constant and it presented as a default. I suggest that others be given in the JavaDoc.\n\nI have some texts which are using PUAs until Unicode includes the code points (e.g. Myanmar text), so I'm glad that allowing a choice doesn't create a potential conflict there. I think PUA should be left to the text author.\n\nAs my texts are all derived from XML, I like the use of a character that is not allowed in XML. I think 0001 is just fine, even if not from a purity perspective.\n\nSome of my texts have BIDI markers and while these will be stripped by filters, I don't think this use is analogous.\n ",
            "author": "DM Smith",
            "id": "comment-12744092"
        },
        {
            "date": "2009-08-17T20:27:12+0000",
            "content": "thanks for your comments guys, I like the idea of constants for some of these suggested characters.\n\ni will update the patch later tonight if no one wants to tackle it and beat me to it first  ",
            "author": "Robert Muir",
            "id": "comment-12744184"
        },
        {
            "date": "2009-08-18T02:50:09+0000",
            "content": "same as before (you pick your own character), but with some constants for example marker characters, ones mentioned under this issue. ",
            "author": "Robert Muir",
            "id": "comment-12744335"
        },
        {
            "date": "2009-08-18T16:25:19+0000",
            "content": "please let me know if you have any feedback on the latest patch. \nif there are no comments I would like to resolve this issue tomorrow or thursday, thanks! ",
            "author": "Robert Muir",
            "id": "comment-12744586"
        },
        {
            "date": "2009-08-19T01:53:00+0000",
            "content": "just some additional javadocs. ",
            "author": "Robert Muir",
            "id": "comment-12744835"
        },
        {
            "date": "2009-08-19T12:08:38+0000",
            "content": "Committed revision 805769.\n\nThanks Andrzej and also everyone who provided feedback ",
            "author": "Robert Muir",
            "id": "comment-12745025"
        }
    ]
}