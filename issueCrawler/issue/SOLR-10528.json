{
    "id": "SOLR-10528",
    "title": "Use docvalue for range faceting in JSON facet API",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "Facet Module"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "6.5",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Range faceting in JSON facet API has only one implementation. In the implementation, all buckets are allocated and then range queries are executed for all the buckets. Therefore, memory usage and computational cost of range facet can be very high if range is wide and gap is narrow. \n\nI think range faceting in JSON facet should have the implementation which uses DocValues instead of inverted indices. By scanning DocValues, we can execute range facets much more efficiently especially when the number of buckets is large.",
    "attachments": {
        "SOLR-10528.patch": "https://issues.apache.org/jira/secure/attachment/12864172/SOLR-10528.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-20T00:46:16+0000",
            "content": "Yep, we should definitely do this.  Perhaps use method=dv/enum to force one method over the other, and otherwise try to pick the best method based on the data. ",
            "author": "Yonik Seeley",
            "id": "comment-15975826"
        },
        {
            "date": "2017-04-20T00:49:02+0000",
            "content": "Attached the first patch. This patch is for branch_6x.\nI have implemented just only counting and so the first patch is incomplete.\n\nIn our environment (800,000 docs on 4 nodes, 1.5GB heap per node), latency decreases in all situations.\n\n# buckets in the whole range = 3 \u2014> original: 22.2ms, patched: 20.5ms\n# buckets in the whole range = 1000 \u2014> original: 687ms, patched: 22.6ms \n# buckets in the whole range = 1million \u2014> original: OutOfMemoryError, patched:23.3ms\n\n\n\n\nHowever, there are many limitations for now.\n\n\tdoesn't handle multiValued field\n\tdoesn't handle TrieDate field\n\tdoesn't handle subfacets\n\tdoesn't handle substats\n\tdoesn't handle include/others parameters\n\tdoesn't handle mincount == 0\n\n\n\nI am going to remove the above limitations one by one. ",
            "author": "Kensho Hirasawa",
            "id": "comment-15975829"
        },
        {
            "date": "2017-04-20T01:03:32+0000",
            "content": "Yonik, Thanks for the comment.\n\nIn the first patch, I added method parameter so that users can choose an implementation.\nI'm going to remove the limitations first of all and then implement SMART method like terms facet. ",
            "author": "Kensho Hirasawa",
            "id": "comment-15975849"
        },
        {
            "date": "2017-04-20T01:58:56+0000",
            "content": "Thanks Kensho!\nOn first glance, it looks like there is numeric boxing going on... I wonder if it could be replaced with something like MutableValue to avoid that?\nAnyway, we can try to optimize later as well as long as it's just implementation details. ",
            "author": "Yonik Seeley",
            "id": "comment-15975917"
        },
        {
            "date": "2017-04-20T04:02:46+0000",
            "content": "I guess it is possible to avoid numeric boxing by stopping using generics but it leads to duplicated codes. Since the calculation of slot index can be modified a lot to support \"include\" parameter, I will remove numeric boxing after supporting it. ",
            "author": "Kensho Hirasawa",
            "id": "comment-15976029"
        },
        {
            "date": "2017-04-21T15:17:08+0000",
            "content": "Kensho Hirasawa Rustam Hashimov While reviewing facet JIRAs, I ran across SOLR-9868, which appears to have the same goal (although I haven't reviewed the code). ",
            "author": "Yonik Seeley",
            "id": "comment-15978912"
        },
        {
            "date": "2017-04-26T04:02:42+0000",
            "content": "Thank you Yonik. I overlooked that issue...\n\nI read SOLR-9868 and its pull request.\nThe goal is the same in respect of using docvalues to efficiently execute range facets.\nA important difference is that I try to reduce memory consumption by allocating as few buckets as needed in my implementation. When the number of buckets are large but there are many buckets with count 0, this can lead big performance improvement. In contrast, I think SOLR-9868's implementation consumes memory very much in such a situation since slots for all ranges are allocated even if mincount > 0.\n\nHowever, SOLR-9868 has fewer limitations than my implementation.\n\n\tcan handle TrieDate\n\tcan handle include/others\n\tcan handle mincount == 0\n\tcan handle subfacets/substats\n\n\n\nThere are also other small differences as follows.\n\n\tPatch in this issue is for 6.x, pull req of SOLR-9868 is for 7 (master)\n\tPatch in this issue supports range with open end (e.g. [0, inf) , (-inf, inf))\n\n\n\nI wonder whether I should go on developing based on the patch of this issue or I should make some changes in SOLR-9868's pull request.\nPlease give me some advice if you do not mind. ",
            "author": "Kensho Hirasawa",
            "id": "comment-15984133"
        },
        {
            "date": "2017-05-25T09:52:39+0000",
            "content": "I attached a new patch.\nI removed almost all limitations from the last patch.\nThe only limitation is that this implementation cannot handle TrieDateField when both start and end are not specified.\n\nI think tests are not sufficient still, and so I am going to add tests later. (there are many corner cases\u2026)\nAlso, I have a few concerns and I want some comments or advices on them.\n(Of course any comments on other points are welcome.)\n\nFirst, I wrote almost all functions in the one class, FacetRangeProcessorByDV, but this may not be good design.\n\nSecondly, the range facet by DV supports open end range (start == null || end == null) but it is difficult to test open end range facets in TestJsonFacets.testStats because the original range facet cannot support open end range inherently. Though I wrote the tests by limiting executions only when method = dv, I wonder if there are any better ways. ",
            "author": "Kensho Hirasawa",
            "id": "comment-16024468"
        },
        {
            "date": "2017-06-01T05:38:11+0000",
            "content": "I added tests and fixed two bugs found by the tests.\n\nThe fixed bugs are the following.\n\n\n\tWhen sub facet have a domain parameter with excludeTags, sub facets of buckets with zero count are not executed.\n\tWhen hardend is true, the document with the same value as end is collected to a wrong bucket.\n\n ",
            "author": "Kensho Hirasawa",
            "id": "comment-16032472"
        }
    ]
}