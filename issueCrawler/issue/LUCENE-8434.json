{
    "id": "LUCENE-8434",
    "title": "Use shared instance of CollectionTerminatedException",
    "details": {
        "components": [],
        "status": "Resolved",
        "resolution": "Won't Fix",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "Creating exceptions and filling in the stack is expensive (see SOLR-11242 and SOLR-11314 for two such examples). CollectionTerminatedException is used as a signaling mechanism - there are zero instances in code that actually log that it occurred or make use of anything other than the fact that it occurred (unlike Solr's EarlyTerminatingCollectorException, for instance).  Exceptions really should be for something exceptional - the use of CollectionTerminatedException is in place of polluting return values with this condition and is just used as a signal to callers. \n\nBecause CollectionTerminatedException is never inspected directly and is effectively a different return condition, it doesn't make as much sense to generate new Exceptions with fresh stack traces every time - either change the signatures or share the object.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16560374",
            "author": "Uwe Schindler",
            "content": "-1, see other issue LUCENE-8432! ",
            "date": "2018-07-27T21:46:42+0000"
        },
        {
            "id": "comment-16560376",
            "author": "Uwe Schindler",
            "content": "It might be expensive at the beginning, but stack trace creation should be suppressed by the JVM if the trace is not used (at least if all of it happens in one single class and not through several stack frames). The optimization needs some time until it jumps in, so simple tests executed only one or two times don't help for measuring this. ",
            "date": "2018-07-27T21:50:22+0000"
        },
        {
            "id": "comment-16560391",
            "author": "Uwe Schindler",
            "content": "\n\thttps://stackoverflow.com/questions/33241012/can-hotspot-jit-optimizations-for-fast-throw-exceptions-lead-to-ambiguous-result\n\thttp://jawspeak.com/2010/05/26/hotspot-caused-exceptions-to-lose-their-stack-traces-in-production-and-the-fix/\n\n ",
            "date": "2018-07-27T22:02:11+0000"
        },
        {
            "id": "comment-16560393",
            "author": "Michael Braun",
            "content": "Thanks Uwe Schindler - did not know about the OmitStackTraceInFastThrow optimization! When I have some free time I'll look to see if this is kicking in for all practical cases. \n\nIn general though, as to using a RuntimeException as an alternative to adjusting signatures - where has the balance been found between representing an alternate scenario with an Exception versus a representative return value containing that it happened? It could have been represented as part of a return value that clients would need to deal with as opposed to a RuntimeException they'd need to catch.  ",
            "date": "2018-07-27T22:05:21+0000"
        },
        {
            "id": "comment-16560395",
            "author": "Hoss Man",
            "content": "would it make sense to support setting a sentinel exception as an expert level option on Collectors that currently throw new CollectionTerminatedException ?\n\n(for users who generally want -XX:-OmitStackTraceInFastThrow but in this specific case don't care)\n\nie...\n\nprivate CollectionTerminatedException reusableCollectionTerminatedException = null;\npublic void setReusableCollectionTerminatedException(CollectionTerminatedException e) {\n  this.reusableCollectionTerminatedException = e;\n}\n...\n  if (someConditionThatAllowsEarlyTermination) {\n    throw (null != reusableCollectionTerminatedException) ?\n      reusableCollectionTerminatedException : new CollectionTerminatedException();\n    }\n  }\n\n\n\n\n? ",
            "date": "2018-07-27T22:06:15+0000"
        },
        {
            "id": "comment-16560400",
            "author": "Hoss Man",
            "content": "... It could have been represented as part of a return value that clients would need to deal with as opposed to a RuntimeException they'd need to catch. \n\nIIRC: there have been multiple dicussions over the years about the possibility of collect(...) having a return value, but since the common case is to keep collecting, the need for IndexSearcher to explicitly check the return value on every call to collect was prohibitive in terms of performance (compared to just catching CollectionTerminatedException). ",
            "date": "2018-07-27T22:08:49+0000"
        },
        {
            "id": "comment-16560407",
            "author": "Uwe Schindler",
            "content": "As Hoss said, the exception is cheaper for the uncommon case. Checking a return value in hundreds of million hits is way more expensive than a trap. The stack trace costs something but it's still cheaper. One example is MMapDirectory. One could check for correct bounds everytime but the chance to hit a boundary where you have to switch the bytebuffers is extremely low. The additional check would slow down dramatically. Have fun with reading ByteBufferIndexInput about that. We can only get rid of it with minimum required version java 9, where hotspot can eliminate double check using the new checkIndex() intrinsic in java.util.Objects ",
            "date": "2018-07-27T22:14:46+0000"
        },
        {
            "id": "comment-16560446",
            "author": "Michael Braun",
            "content": "Definitely makes sense - appreciate the clarification!  ",
            "date": "2018-07-27T22:57:20+0000"
        },
        {
            "id": "comment-16579964",
            "author": "Michael Braun",
            "content": "Uwe Schindler I checked and OmitStackTraceInFastThrow only applies to the 'standard' runtime exceptions that might be encountered, like AIOOBE, NPE, etc (see https://github.com/JetBrains/jdk8u_hotspot/blob/435f973f98771edfa2126d5e6b6dea9bbf272e86/src/share/vm/opto/graphKit.cpp#L557) so it does not do anything for types outside of these.\n\nThat said this didn't make much of a difference in benchmarks so this ticket can be closed. ",
            "date": "2018-08-14T15:32:45+0000"
        }
    ]
}