{
    "id": "LUCENE-3531",
    "title": "Improve CachingWrapperFilter to optionally also cache acceptDocs, if identical to liveDocs",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff from LUCENE-1536: This issue removed the different cache modes completely and always applies the acceptDocs using BitsFilteredDocIdSet.wrap(), the cache only contains raw DocIdSet without any deletions/acceptDocs. For IndexReaders that are seldom reopened, this might not be as performant as it could be. If the acceptDocs==IR.liveDocs, those DocIdSet could also be cached with liveDocs applied.",
    "attachments": {
        "LUCENE-3531-identityFix.patch": "https://issues.apache.org/jira/secure/attachment/12507264/LUCENE-3531-identityFix.patch",
        "LUCENE-3531-v2.patch": "https://issues.apache.org/jira/secure/attachment/12507440/LUCENE-3531-v2.patch",
        "LUCENE-3531.patch": "https://issues.apache.org/jira/secure/attachment/12506896/LUCENE-3531.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-11T13:59:24+0000",
            "content": "Patch, adding optional boolean \"recacheDeletes\", defaulting to false.  We only cache if the incoming acceptDocs == reader's liveDocs. ",
            "author": "Michael McCandless",
            "id": "comment-13167094"
        },
        {
            "date": "2011-12-11T14:53:39+0000",
            "content": "Looks fine! ",
            "author": "Uwe Schindler",
            "id": "comment-13167107"
        },
        {
            "date": "2011-12-13T19:23:21+0000",
            "content": "Uwe found a sneaky problem here: using acceptDocs as the cache key is bad, eg FixedBitSet's equals/hashCode are horribly costly... we need a WeakIdentityHashMap. ",
            "author": "Michael McCandless",
            "id": "comment-13168632"
        },
        {
            "date": "2011-12-13T19:42:08+0000",
            "content": "I will take care and also use the map then for MMapDirectory.MMapIndexInput where I explicitely overrided the equals/hashcode of the keys to be 100% identity. ",
            "author": "Uwe Schindler",
            "id": "comment-13168647"
        },
        {
            "date": "2011-12-13T22:54:19+0000",
            "content": "I did some investigation. If you want a complete WeakIdentityHashMap witha all iterators and so on its heavy to do and you must in all cases also wrap all keys with a WeakReference even for lookup (unless you implement your completely own HashMap impl). The easy fix here is to use a wrapper \"Reference\" object as cache key, that simply has a final field and equals/hashCode that does the system hashcode. By comparing the wrapper object as key, two wrapper objects are only equal, if the wrapped objects are identical:\n\n\nstatic final class IdentityKeyWrapper<T> {\n  public final T key;\n  private final int hashCode;\n\n  public IdentityKeyWrapper(T key) {\n    this.key = key;\n    this.hashCode = System.identityHashCode(key);\n  }\n\n  public int hashCode() { return hashCode; }\n\n  public boolean equals(Object o) {\n   if (o == this) return true;\n   if (o instanceof IdentityKeyWrapper) {\n     return ((IdentityKeyWrapper<T>)o).key == this.key;\n   }\n   return false;\n  }\n\n}\n\n\n\nThe backside is that you have to wrap the Bits interface even on a lookup, but thats cheap just like boxing/unboxing (eden space). ",
            "author": "Uwe Schindler",
            "id": "comment-13168812"
        },
        {
            "date": "2011-12-13T23:15:36+0000",
            "content": "Here the fix. Mike, I think this is fine?\n\nThe fix also removes the useless genericfication of FilterCache, as we removed the SpanCachingWrapperFilter. ",
            "author": "Uwe Schindler",
            "id": "comment-13168840"
        },
        {
            "date": "2011-12-14T09:03:43+0000",
            "content": "Here an improved patch factoring out the wrapper object to o.a.l.util, adding tests.\n\nOnce this is committed, I will review other code and maybe move to this wrapper class (e.g. MMapIndexInput's cloned inputs) ",
            "author": "Uwe Schindler",
            "id": "comment-13169215"
        },
        {
            "date": "2011-12-14T09:34:04+0000",
            "content": "There is one problem with this wrapper object and WeakHashMap. The wrapped object does not have a reference to the wrapper itsself, so the wrapper may get garbage collected (as nothing refers to it) and the item may get removed from the map.\n\nSo this does not work! ...digging! ",
            "author": "Uwe Schindler",
            "id": "comment-13169232"
        },
        {
            "date": "2011-12-14T09:38:48+0000",
            "content": "This is why most custom implementations of WeakIdentityHashMaps found on the net internally extend WeakReference to add equals/hashCode to it. It must be one object, otherwise GC may purge objects.\n\nThere is no way around implementing an own WeakIdentityHashMap (not fully implementing the Map interface, as not needed for caches). ",
            "author": "Uwe Schindler",
            "id": "comment-13169236"
        },
        {
            "date": "2011-12-14T13:15:45+0000",
            "content": "New patch, now with WeakIdentityHashMap impl from Apache CXF (excluding its inefficient Collection views and supporting null keys).\n\nI also changed the CachingWrapperFilter to hold soft references to the DocIdSet, as otherwise e.g. the Bits==null key will never be purged (as the null key cannot be reclaimed by GC).\n\nWe should maybe also change FieldCache to hold soft references to its arrays, as this makes it more easy to purge them for the GC in low-memory conditions, even if the reader key is still alive (means field cache can be purged although reader is still alive). ",
            "author": "Uwe Schindler",
            "id": "comment-13169315"
        },
        {
            "date": "2011-12-14T14:44:52+0000",
            "content": "Updated patch, now also supporting purging CachingWrapperFilter's cache when the reader(-core) is closed.\n\nThis fix should also be backported to 3.x. ",
            "author": "Uwe Schindler",
            "id": "comment-13169407"
        },
        {
            "date": "2011-12-14T14:51:25+0000",
            "content": "More cleanup and made more fields private/final.\n\nI will commit this now. ",
            "author": "Uwe Schindler",
            "id": "comment-13169411"
        },
        {
            "date": "2011-12-14T14:53:17+0000",
            "content": "Committed trunk revision: 1214274 ",
            "author": "Uwe Schindler",
            "id": "comment-13169413"
        },
        {
            "date": "2011-12-14T15:14:30+0000",
            "content": "Backported adding close listeners to 3.x. ",
            "author": "Uwe Schindler",
            "id": "comment-13169424"
        },
        {
            "date": "2011-12-14T16:38:29+0000",
            "content": "Phew thanks Uwe!  What a doozie that turned out to be  ",
            "author": "Michael McCandless",
            "id": "comment-13169493"
        },
        {
            "date": "2011-12-14T17:12:13+0000",
            "content": "After some investigation, we should remove the purgeing on IndexReader/Core close again, as this holds strong references from the IndexReader to the CachingWrapperFilter. This would lead to problems in the following case: A app has an IndexReader that never changes and is never closed, but creates lots of CachingWrapperFilters for short-time caches. This will fill up the event listener queue. ",
            "author": "Uwe Schindler",
            "id": "comment-13169506"
        },
        {
            "date": "2011-12-14T17:17:16+0000",
            "content": "Reverted backport of listeners in 3.x revision: 1214347\nReverted listeners in trunk revision: 1214349\n\nIf I have a better idea, I will open an issue. ",
            "author": "Uwe Schindler",
            "id": "comment-13169511"
        },
        {
            "date": "2011-12-14T21:46:42+0000",
            "content": "Mike and I discussed on IRC about easier ways to solve the caching problem. We came  to the conclusion, that using the acceptDocs (may be null) as a sub-key are suboptimal, because the null key cannot be evicted from the WeakIdentityHashMap. Also the two caches inside each other are hard to manage.\n\nThe idea was to have a \"combined\" key on segmentreader, thats hard referenced by the instance, changing only when deletions change. This key should also only have identity equals/hashCode.\n\nIndexReader like in 3.x now supplies two keys, one based on the core without deletions, and a second one thats equal for all segmentreaders with same deletions and same core. The trick is to use a Object field in SegmentReader thats initialized with new Object() at the beginning and transferred over to a new instance when cloned. But once deletions change, we reassign a new \"new Object()\", so the key changes.\n\nCachingWrapperFilter uses either the conventional coreCacheKey (if if does not respect deletions at all and caches without acceptDocs), or it uses the combined key (IndexReader.getCombinedCoreAndDeletesKey()) for the cache.\n\nThe WeakIdentityHashMap is therefore obsolete again, I will nuke it. ",
            "author": "Uwe Schindler",
            "id": "comment-13169729"
        },
        {
            "date": "2011-12-14T21:48:46+0000",
            "content": "Patch. ",
            "author": "Uwe Schindler",
            "id": "comment-13169730"
        },
        {
            "date": "2011-12-14T22:09:04+0000",
            "content": "can't this just be on segmentreader only? ",
            "author": "Robert Muir",
            "id": "comment-13169747"
        },
        {
            "date": "2011-12-14T22:40:05+0000",
            "content": "Not yet, once we have split composite readers and atomic reader, yes. But at this point i cannot handle that, as SegmentReader can be replaced by SlowMultiReaderWrapper (and they have no common base class): LUCENE-2858\n\nSo I would like to commit this first and later move this with all this stuff to atomic readers only. ",
            "author": "Uwe Schindler",
            "id": "comment-13169766"
        },
        {
            "date": "2011-12-14T23:34:47+0000",
            "content": "Updated patch with a test for the core key and combined key. I will commit this now and then work on splitting atomic and composite readers. ",
            "author": "Uwe Schindler",
            "id": "comment-13169806"
        },
        {
            "date": "2011-12-14T23:37:55+0000",
            "content": "Committed trunk revision: 1214551 ",
            "author": "Uwe Schindler",
            "id": "comment-13169812"
        }
    ]
}