{
    "id": "SOLR-10934",
    "title": "create a link+anchor checker for the ref-guide that only depends on ivy resources",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "documentation"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We currently have CheckLinksAndAnchors.java which is automatically run against the ref-guide HTML as part of the build to use JSoup to find bad links/anchors that asciidoctor doesn't complain about \u2013 but not everyone does/can build the HTML version of the ref-guide sincif we can e it requires manually installing jekyll.\n\nThis issue initially focused on trying to use PDFBox to do link+anchor checking directly against the \"final\" PDF, but by that point a lot of information that indicates problems (dup anchors, links pointing to the wrong place in the document, etc...) is already lost.\n\nThe current focus is on a way to catch all of the same types of problems we can currently catch today, in a way that anyone can run purely from ant \u2013 w/o any manually instaled tools like jekyll.",
    "attachments": {
        "SOLR-10934.patch": "https://issues.apache.org/jira/secure/attachment/12894884/SOLR-10934.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-21T22:10:57+0000",
            "content": "based on the code in this SO post, it looks like we should be able to..\n\nhttps://stackoverflow.com/a/38846776/689372\n\n\n\tloop over all PDAnnotations in each PDPage\n\tif the annotation isa PDAnnotationLink then we can access it's PDAction and PDDestination\n\tPDActionURI is an external link, PDActionGoTo is an inter-document link\n\tPDActionGoTo can point at either a PDPageDestination (page num?) or a PDNamedDestination (named anchor?)\n\twe lookup PDNamedDestination instances in the document catlog.\n\n\n\nthat should enable us to vet that all inter-document links point to a valid anchor.\n\none thing i'm not sure about is if would be possible to check for the \"anchor used more then once in diff adoc files\" type problem \u2013 i suspect that the catalog's list of PDNamedDestination doesn't allow dups, so that info may already be lost as part of the PDF creation?? ",
            "author": "Hoss Man",
            "id": "comment-16058339"
        },
        {
            "date": "2017-10-31T00:37:09+0000",
            "content": "\n\nOk, I'm attaching a really rough and dirty patch that includes:\n\n\n\tA quick and dirty CheckPDFLinksAndAnchors inspired by the SO post mentioned and the original PrintURLs.java demo from pdfbox\n\ta build.xml 'nocommit' target to run it against our PDF\n\tsome \"broken\" changes to our ref-guide content to deliberatey introduce a few errors...\n\t\n\t\tanchor duplicated in multiple source pages\n\t\tlinks to each of the diff dup anchors\n\t\tlink to an anchor that doesn't exist in the specified source doc, but does exist in a diff doc\n\t\tlinks to an source doc thta doesn't exist\n\t\tlinks to an anchor that doesn't exist (in a source doc that does)\n\t\n\t\n\n\n\nThe results aren't promising...\n\n\n\tFAIL: the dup anchors cause asciidoctor to print a WARNING (even w/o any link checking) that i'd forgotten about, but as far as i can tell from my exploration of the PDDocumentCatalog that duplicated information is lost in the underlying PDF (or if it does make it into the PDF, PDFBox loses it when parsing the PDF, because the \"Catalog\" is just a Map)\n\tFAIL: the PDF Annotations to each of the dup links both wind up mapping to the page with the first occurange \u2013 again: either because the catalog in the file can only track one location for a given anchor, or because that's just how PDF Box deals with the precedence of dup dict keys when reading the file\n\tFAIL: if an anchor doesn't exist in the specified source *.adoc file, but does exist somehwere else in the final PDF, then that's where asciidoctor points the generated link \u2013 there's nothing weird about it i can detect from PDFBox\n\tGOOD: link's to a source *.adoc file that doesn't actaully exist on disk are fairly easy to detect \u2013 asciidoctor's default behavior is to assume that these are links to other docs that will be converted seperately, so they show up as \"relative URIs\" which we can treat as a failure (ie: if a link in a PDF is to a non-absolute URI, it must be a content error)\n\tGOOD: link's to an anchor that doesn't exist are likewise easy to identify: the \"annotation\" is preserved but has no destiation, which we can treat as a failure.\n\n\n\nThe important bits of the output w/this patch are included below...\n\n\n-build-raw-pdf:\n[asciidoctor:convert] Render SolrRefGuide-all.adoc from /home/hossman/lucene/dev/solr/build/solr-ref-guide/content/pdf to /home/hossman/lucene/dev/solr/build/solr-ref-guide/pdf-tmp with backend=pdf\n[asciidoctor:convert] asciidoctor: ERROR: about-this-guide.adoc: line 1: invalid part, must have at least one section (e.g., chapter, appendix, etc.)\n[asciidoctor:convert] asciidoctor: ERROR: solr-glossary.adoc: line 1: invalid part, must have at least one section (e.g., chapter, appendix, etc.)\n[asciidoctor:convert] asciidoctor: WARNING: errata.adoc: line 30: id assigned to section already in use: nocommit_dup_anchor_name\n[asciidoctor:convert] asciidoctor: ERROR: SolrRefGuide-all.adoc: line 37: invalid part, must have at least one section (e.g., chapter, appendix, etc.)\n     [move] Moving 1 file to /home/hossman/lucene/dev/solr/build/solr-ref-guide/pdf-tmp\n...\nnocommit:\n     [java] Page 753:'Link to bogus page @ anchor that does not exist'=> BOGUS URI: nocommit_bogus_page.pdf#nocommit_bogus_x2\n     [java] Page 753:'Link to about @ anchor that does not exist' => link with no page dest\n\n\n\n\n\n\nAll in all these results are disappointing.\n\nThe \"Single Page\" output behavior of asciidoctor, combined with the \"bugs\" in asciidoctors handling of duplicated anchors in page includes, combined with the underlying structure of the PDF, make it really hard to find the same types of failures we can find when parsing the jekyll generated pages using our white-box knowledge of \"there must be no dup anchors across all pages\" ",
            "author": "Hoss Man",
            "id": "comment-16226050"
        },
        {
            "date": "2017-10-31T00:44:09+0000",
            "content": "I think we'll have to abandon any plans of running a robust link checker on the PDF \u2013 or any \"single page\" output format using the master SolrRefGuide-all.adoc file.  The metadata we need to be confident that links/anchors are going where we expect just doesn't exist at that point.\n\nWhat we might want to consider, is refactoring our build.xml, so that the same <asciidoctor:convert/> task options use to generate the PDF, could also be used to generate a bare bones version of the html-site \u2013 ie: not using jekyll, just using raw asciidoctor with the \"html5\" output option.  Then we could (in theory) run the same HTML link checking code we currently have against that output dir \u2013 just for the purpose of checking the links, not with any plan to ever publish it.\n\nThat way, we could have something like ant precommit fail if there are any broken links in the ref-guide \u2013 using entirely ivy managed dependencies, w/o requiring a local install of ruby/jekyll. ",
            "author": "Hoss Man",
            "id": "comment-16226061"
        },
        {
            "date": "2017-11-01T23:12:15+0000",
            "content": "What we might want to consider, is refactoring our build.xml, so that the same <asciidoctor:convert/> task options use to generate the PDF, could also be used to generate a bare bones version of the html-site \u2013 ie: not using jekyll, just using raw asciidoctor with the \"html5\" output option. Then we could (in theory) run the same HTML link checking code we currently have against that output dir \u2013 just for the purpose of checking the links, not with any plan to ever publish it.\n\nI'm attaching a path that takes this approach \u2013 i think it works pretty well.\n\nUnfortunately refactoring just the build.xml file proved to be insufficient to be able to re-use the existing <ascidoctor;convert> in a macro because of how the underlying Task class works \u2013 it has some hard assumptions about XML element attributes like \"sourceDocumentName\" not being used even if they are ht empty string because of ant property expansion \u2013 but i was able to deal with that by adding out own little AntTask subclass into the tools jar.\n\ni also did a little more refactoring of the build.xml file so running building both the PDF & jekyll site via ant wouldn't waste time redudently also building & validating the bare-bones HTML version. (unfortunately if you explicitly run ant build-pdf build-site this still happens, but hey: baby steps)\n\nlike the previous patch, this includes some \"nocommit\" annotated intentional anchor/link errors in the *.adoc files.  If you apply the patch as is, and run ant or ant build-pdf or ant build-site you'll get all the same validation errors that we want to see happen with this kind of bad content.  If you refer the solr/solr-ref-guide/src changes then everything will start building happily.\n\nwhat do folks think of this approach?\n ",
            "author": "Hoss Man",
            "id": "comment-16234938"
        },
        {
            "date": "2017-11-03T17:44:22+0000",
            "content": "Commit 7f033ac12bb290b2cbf5e43672932c31e8b0061a in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7f033ac ]\n\nSOLR-10934: ref-guide link+anchor checking that doesn't require jekyll ",
            "author": "ASF subversion and git services",
            "id": "comment-16238061"
        },
        {
            "date": "2017-11-03T18:10:02+0000",
            "content": "Commit 97e03125ef0d154e50f9cd7ad1315db5eaf44b95 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=97e0312 ]\n\nSOLR-10934: ref-guide link+anchor checking that doesn't require jekyll\n\n(cherry picked from commit 7f033ac12bb290b2cbf5e43672932c31e8b0061a) ",
            "author": "ASF subversion and git services",
            "id": "comment-16238109"
        }
    ]
}