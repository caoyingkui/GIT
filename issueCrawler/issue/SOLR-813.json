{
    "id": "SOLR-813",
    "title": "Add new DoubleMetaphone Filter and Factory",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The existing PhoneticFilter allows for use of the DoubleMetaphone encoder. However, it doesn't expose the maxCodeLength() setting, and it ignores the alternate encodings that the encoder provides for some words. This new filter is not as generic as the PhoneticFilter, but allows more detailed control over the DoubleMetaphone encoder.",
    "attachments": {
        "SOLR-813.patch": "https://issues.apache.org/jira/secure/attachment/12392366/SOLR-813.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Todd Feak",
            "id": "comment-12640602",
            "date": "2008-10-17T18:01:40+0000",
            "content": "Added patch containing Filter, Factor, and Unit Tests for both. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12640637",
            "date": "2008-10-17T19:22:39+0000",
            "content": "rather then create a new Filter for DoubleMetaphone, why not just extend PhoneticFilter to support maxCodeLength?\n\nHere is a quick untested bit that uses reflection to set the maxCodeLength \u2013 the advantage is that it would also work for 'Metaphone' (though i'm not sure anyone uses that).\n\nSince the reflection only happens once at starup, it is not a big deal.\n\n\nIndex: src/java/org/apache/solr/analysis/PhoneticFilterFactory.java\n===================================================================\n--- src/java/org/apache/solr/analysis/PhoneticFilterFactory.java        (revision 704289)\n+++ src/java/org/apache/solr/analysis/PhoneticFilterFactory.java        (working copy)\n@@ -17,10 +17,10 @@\n \n package org.apache.solr.analysis;\n \n+import java.lang.reflect.Method;\n import java.util.HashMap;\n import java.util.Map;\n \n-import org.apache.solr.core.SolrConfig;\n import org.apache.commons.codec.Encoder;\n import org.apache.commons.codec.language.DoubleMetaphone;\n import org.apache.commons.codec.language.Metaphone;\n@@ -80,6 +80,13 @@\n     \n     try {\n       encoder = clazz.newInstance();\n+      \n+      // Try to set the maxCodeLength\n+      String v = args.get( \"maxCodeLength\" );\n+      if( v != null ) {\n+        Method setter = encoder.getClass().getMethod( \"setMaxCodeLength\", Integer.class );\n+        setter.invoke( encoder, Integer.parseInt( v ) );\n+      }\n     } \n     catch (Exception e) {\n       throw new SolrException( SolrException.ErrorCode.SERVER_ERROR, \"Error initializing: \"+name + \"/\"+clazz, e );\n\n\n "
        },
        {
            "author": "Todd Feak",
            "id": "comment-12640640",
            "date": "2008-10-17T19:28:16+0000",
            "content": "Other DoubleMetaphone specific calls are made in the filter. Specifically, it checks to see if there is an alternate encoding for the token, and adds that to the stream as well, if it's different then the default encoding. This is part of the strength of the DoubleMetaphone implementation that the Phonetic filter doesn't leverage.\n\nAn additional change that I made that could be done in the Phonetic filter is blocking empty tokens that are generated on non-alpha strings. This just wraps them all. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12640655",
            "date": "2008-10-17T20:41:19+0000",
            "content": "Here is an update that adresses two concerns:\n1. position increments \u2013 this keeps the tokens in sync with the input\n2. previous version would stop processing after a number.  That is: \"aaa 1234 bbb\" would not process \"bbb\"\n3. Token types... this changes it to \"DoubleMetaphone\" rather then \"ALPHANUM\"\n\nhere is the key part:\n\n      boolean isPhonetic = false;\n      String v = new String(t.termBuffer(), 0, t.termLength());\n      String primaryPhoneticValue = encoder.doubleMetaphone(v);\n      if (primaryPhoneticValue.length() > 0) {\n        Token token = (Token) t.clone();\n        if( inject ) {\n          token.setPositionIncrement( 0 );\n        }\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(primaryPhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n\n      String alternatePhoneticValue = encoder.doubleMetaphone(v, true);\n      if (alternatePhoneticValue.length() > 0\n          && !primaryPhoneticValue.equals(alternatePhoneticValue)) {\n        Token token = (Token) t.clone();\n        token.setPositionIncrement( 0 );\n        token.setType( TOKEN_TYPE );\n        token.setTermBuffer(alternatePhoneticValue);\n        remainingTokens.addLast(token);\n        isPhonetic = true;\n      }\n      \n      // If we did not add something, then go to the next one...\n      if( !isPhonetic ) {\n        t = next(in);\n        t.setPositionIncrement( t.getPositionIncrement()+1 ); \n        return t;\n      }\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12640659",
            "date": "2008-10-17T20:48:03+0000",
            "content": "oops, last patch had a bug if the stream ended in a non-phonetic value:\n\n\n      if( !isPhonetic ) {\n        t = next(in);\n        if( t != null ) {\n          t.setPositionIncrement( t.getPositionIncrement()+1 ); \n        }\n        return t;\n      }\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12640792",
            "date": "2008-10-18T18:39:50+0000",
            "content": "Added in rev: 705903\nThanks Todd! "
        },
        {
            "author": "Todd Feak",
            "id": "comment-12641032",
            "date": "2008-10-20T15:04:38+0000",
            "content": "Good catch on that bug and enhancements. I put them in my current implementation. Thank you. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775554",
            "date": "2009-11-10T15:51:49+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}