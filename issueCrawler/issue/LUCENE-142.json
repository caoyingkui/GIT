{
    "id": "LUCENE-142",
    "title": "[PATCH] DateField support for pre-1970 dates",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I've attached a zip file that contains a set of changes (additions and patches) \nto enable pre 1970 date support for DateField. (I'm working on an app that \nneeds to index historical dates...)\n\nI don't know that this is necessarily the best way to support pre 1970 dates, \nbut its something I've been working with and thought it might work in general...\n\nI've added a class (DateFieldDefinition) that discribes how a DateField should \nbe interpreted. (How far plus/minus of 1970 dates should be supported, and what \nresolution of time differences between dates should be supported.) There are \ntwo \"well-known\" DateFieldDefintions DateFieldDefinition.DEFAULT_DATE_DEF and \nDateFieldDefinition.HISTORICAL_DATE_DEF. DEFAULT_DATE_DEF is what is currently \nin place in DateField, i.e. no pre-1970 dates, resolution on date differences \nof a millisecond. HISTORICAL_DATE_DEF supports dates in the range of 1970 +/- \n5,000 years, with a resolution of date differences of a day.\n\nI've also added an interface FieldStrategy that describes whether a field is a \nDateField and which DateFieldDefinition to use for a given field. I modified \nQueryParser.jj to make use of a FieldStrategy if its available when parsing \nterm queries, range queries and fuzzy queries. QueryParser has been modified to \ninclude the following new public methods (existing methods without the \nFieldStrategy argument remain):\n\nstatic public Query parse(String query, String field, Analyzer analzer, \nFieldStrategy strategy);\n\npublic QueryParser(String field, Analyzer analyzer, FieldStrategy strategy);\n\nIn the absence of a FieldStategy, Queryparser behaves as it does currently with \none exception, range queries no longer automatically attempt to treat the field \nas a date field. (This could be changed, but I'm a fan of parallel semantics \nbetween similar functions.)\n\nI've added an implementation of FieldStategy, more for illustrative purpose and \nuse in test cases. It assumes that any field that contains '.date' in the name \nis a DateField and that all dates should be handled with the default definition.\n\nFinally, I've modified fuzzy search on date to pick up hits based on how far in \ntime one date is from the query target date rather than on the edit distance of \nthe string representations.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--datePatch.zip": "https://issues.apache.org/jira/secure/attachment/12312261/ASF.LICENSE.NOT.GRANTED--datePatch.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2003-10-09T04:08:31+0000",
            "content": "Created an attachment (id=8499)\nPatch and additions to the repository to support suggested change ",
            "author": "Dan Rapp",
            "id": "comment-12321396"
        },
        {
            "date": "2003-10-13T21:41:38+0000",
            "content": "See also: Bug 10849\n\nAs well as:\nhttp://nagoya.apache.org/eyebrowse/ReadMsg?listName=lucene-user@jakarta.apache.org&msgId=116180\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321397"
        },
        {
            "date": "2004-09-19T18:15:51+0000",
            "content": "The new DateTools class now solves the \"pre-1970\" problem. I opened a new bug \nfor the \"fuzzy date search\" idea, see bug #31294.  ",
            "author": "Daniel Naber",
            "id": "comment-12321398"
        }
    ]
}