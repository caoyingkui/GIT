{
    "id": "SOLR-1204",
    "title": "Enhance SpellingQueryConverter to handle UTF-8 instead of ASCII only",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Improvement",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Solr - User - SpellCheckComponent: queryAnalyzerFieldType\nhttp://www.nabble.com/SpellCheckComponent%3A-queryAnalyzerFieldType-td23870668.html\n\nIn the above thread, it was suggested to extend the SpellingQueryConverter to cover the full UTF-8 range instead of handling US-ASCII only. This might be as simple as changing the regular expression used to tokenize the input string to accept a sequence of one or more Unicode letters ( \\p\n{L}\n+ ) instead of a sequence of one or more word characters ( \\w+ ).\n\nSee http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html for Java regular expression reference.",
    "attachments": {
        "SpellingQueryConverter.java.diff": "https://issues.apache.org/jira/secure/attachment/12409943/SpellingQueryConverter.java.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael Ludwig",
            "id": "comment-12716531",
            "date": "2009-06-05T07:58:07+0000",
            "content": "A patch replacing the regular expression used to tokenize the input string as per the description. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12716544",
            "date": "2009-06-05T09:12:50+0000",
            "content": "I know people don't usually use non-ASCII characters in field names but shouldn't we replace the w, before the colon, too for completeness? "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12716549",
            "date": "2009-06-05T09:25:56+0000",
            "content": "What is a legal field name? I assumed it was ASCII only, starting with a letter or underscore, i.e. a typical symbol name. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12716552",
            "date": "2009-06-05T09:31:12+0000",
            "content": "What is a legal field name?\n\nAny UTF-8 string will do actually. There were discussions on limiting valid field names to valid Java identifiers which are also allowed to have UTF-8 characters. "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12716555",
            "date": "2009-06-05T09:50:31+0000",
            "content": "Update of the previous patch to also allow any valid UTF-8 character in the field name, not only in the query string. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12716567",
            "date": "2009-06-05T10:24:16+0000",
            "content": "Committed revision 781975.\n\nThanks Michael! "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12716594",
            "date": "2009-06-05T12:20:17+0000",
            "content": "Sorry for being inexact in my last comment. I wrote \"any valid UTF-8 character\" when I meant \"any valid UTF-8 letter\", which is what the patch contains, and which isn't equivalent to what I wrote.\n\nIn order to produce a correct patch, I need to know what are legal field names. It can hardly be \"any UTF-8 string\" as that will also contain the colon, which is already used to delimit field names from query strings. What about digits? Asterisk? Dash (minus)? Underscore? Space? Tabulator?\n\nMy original idea was to allow letters, digits and underscore. But this may not be sufficient. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12716597",
            "date": "2009-06-05T12:22:46+0000",
            "content": "hi, michael. Its not for some languages. I recommend using this definition of 'identifier' from UTR #8:\n\n<identifier>  \t \t::= <identifier_start > ( <identifier_start> | <identifier_extend> )*\n<identifier_start>  \tLu,Ll,Lt,Lm,Lo,Nl  \tUppercase letter, Lowercase letter, Titlecase letter, Modifier letter, Other letter, Letter number\n<identifier_extend> \tMn,Mc,Nd,Pc,Cf \tNon-spacing mark, Spacing combining mark, Decimal number, Connector punctuation, Formatting code\n<ident_ignorable_char> \tCf \tFormatting code \n\nThanks! "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12716751",
            "date": "2009-06-05T20:56:51+0000",
            "content": "Hi Robert, it looks like you're talking about this report:\nhttp://unicode.org/reports/tr8/\n\nThe XML recommendation might also serve as a point of reference, although both a NAME and a NMTOKEN are probably too liberal in what they accept (the colon among others):\nhttp://www.w3.org/TR/REC-xml/#NT-Name\n\nShalin mentioned Java identifiers, probably without intending to ban names such as \"null\" and \"class\":\nhttp://java.sun.com/docs/books/jls/third_edition/html/lexical.html#40625\n\nI'm not Unicode-savvy enough to know what's behind all these classes, and I'm not Solr-savvy enough to know which of the punctuation characters that have special meaning in the Solr query language should or must be excluded. So first the spec, then the implementation (regular expression, or some schema technology to validate the field names in schema.xml, or whatever). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12716763",
            "date": "2009-06-05T21:49:27+0000",
            "content": "those others you mentioned also look good...\n\nin fact the last one you mentioned (the java one) might be the easiest to implement\n\nhttp://java.sun.com/j2se/1.4.2/docs/api/java/lang/Character.html#isJavaIdentifierStart(char)\nhttp://java.sun.com/j2se/1.4.2/docs/api/java/lang/Character.html#isJavaIdentifierPart(char)\n\ni'm not worried about punctuation just real \"letters\" in languages where .isLetter() returns false! "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12716833",
            "date": "2009-06-06T05:29:07+0000",
            "content": "\nIn order to produce a correct patch, I need to know what are legal field names. It can hardly be \"any UTF-8 string\" as that will also contain the colon, which is already used to delimit field names from query strings. What about digits? Asterisk? Dash (minus)? Underscore? Space? Tabulator?\n\nLucene does not limit the field names. Those special characters are actually limitations of our query parser syntax. However, you are right, we need to view them from Solr's point of view. Let us try to limit this to valid Java identifiers or the closest that we can get to them. "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12717323",
            "date": "2009-06-08T17:00:02+0000",
            "content": "FYI, there is a nice Unicode web tool here: http://rishida.net/scripts/uniview/\n\nJava identifiers exclude dash (minus) and dot ( - and . ); they allow $, \u20ac and other currencies.\n\nAn XML NMTOKEN excludes currency symbols, but allows dash, dot, middle dot, underscore, and colon. It also allows Arabic numerals [0-9] at the beginning.\n\nColons must be excluded for Solr purposes. But I wouldn't exclude dash and dot.\n\nFields are entered in XML (schema.xml), so why not base the type on an XML type? Validation would be easy:\n\n<!DOCTYPE solr-test[\n<!ELEMENT solr-test EMPTY >\n<!ATTLIST solr-test field NMTOKEN #REQUIRED>\n]>\n<solr-test field=\"   123.K\u00e4se-A_Z      \"/>\n\nNote the leading and trailing spaces around the attribute value; the XML parser strips these when validating using an NMTOKEN type, so this user error can be excluded fairly simple. The absence of any colon, however, would have to be guaranteed by some other means. Still, I think there are advantages.\n\nIf ensuring the uniqueness of a field name in a schema.xml matters, one could also consider using the NAME type and defining field/@name as ID in the DTD. This would exclude dash, dot, middle dot and Arabic numerals as start characters.\n\nI think I could supply a patch for NMTOKEN or NAME if this is found desirable. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12718128",
            "date": "2009-06-10T16:28:54+0000",
            "content": "I think I could supply a patch for NMTOKEN or NAME if this is found desirable.\n\nPlease do! "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12718412",
            "date": "2009-06-11T11:29:28+0000",
            "content": "In the original regular expression - (??!(\\w+:|\\d+)))\\w+ - what is the rationale behind treating a sequence of digits - \\d+ - as a separate token? "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12718413",
            "date": "2009-06-11T11:31:33+0000",
            "content": "   A smiley destroyed my regular expression ... "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12721323",
            "date": "2009-06-18T15:52:07+0000",
            "content": "The patch has been ready for a week now, but before supplying it, I'd like to understand what is the rationale behind treating a sequence of digits - \\d+ - as a separate token in the original regular expression - (??!(\\w+:|\\d+)))\\w+ to be found in SpellingQueryConverter.java? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12751121",
            "date": "2009-09-03T18:23:02+0000",
            "content": "The patch has been ready for a week now, but before supplying it, I'd like to understand what is the rationale behind treating a sequence of digits - \\d+ - as a separate token in the original regular expression\n\nI'm sorry I forgot about this issue completely. I'm not sure about the rationale. Grant wrote it originally. Grant, can you share your thoughts? "
        },
        {
            "author": "David Bowen",
            "id": "comment-12751315",
            "date": "2009-09-04T05:44:45+0000",
            "content": "Since this ticket is marked resolved, I filed SOLR-1407 to point out some closely related problems. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12751337",
            "date": "2009-09-04T07:03:25+0000",
            "content": "Since this ticket is marked resolved, I filed SOLR-1407 to point out some closely related problems.\n\nYes, that is how I remembered this one  "
        },
        {
            "author": "Michael Ludwig",
            "id": "comment-12751410",
            "date": "2009-09-04T10:06:30+0000",
            "content": "Shalin, thanks for reporting back  If I marked the issue resolved, that wasn't my intention. Must have overlooked it. I'm going to post the NMTOKEN version I've come up with to SOLR-1407 so it's not lost. Up to you to consider whether it's reasonable or not. The question about the sequence of digits is still entirely unclear to me, though. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775765",
            "date": "2009-11-10T15:52:07+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}