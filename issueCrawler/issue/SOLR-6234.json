{
    "id": "SOLR-6234",
    "title": "Scoring modes for query time join",
    "details": {
        "affect_versions": "5.3",
        "status": "Closed",
        "fix_versions": [
            "5.3"
        ],
        "components": [
            "query parsers"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "it adds ability to call Lucene's JoinUtil by specifying local param, ie  {!join score=...}.... It supports:\n\n\tscore=none|avg|max|total local param (passed as ScoreMode to JoinUtil)\n\tsupports b=100 param to pass Query.setBoost() postponed till SOLR-7814.\n\tmultiVals=true|false is introduced YAGNI, let me know otherwise.\n\tthere is a test coverage for cross core join case.\n\tso far it joins string and multivalue string fields (Sorted, SortedSet, Binary), but not Numerics DVs. follow-up LUCENE-5868",
    "attachments": {
        "SOLR-6234-javadocsfix.patch": "https://issues.apache.org/jira/secure/attachment/12747741/SOLR-6234-javadocsfix.patch",
        "otherHandler.patch": "https://issues.apache.org/jira/secure/attachment/12744355/otherHandler.patch",
        "SOLR-6234-trunk-CHANGES-fix.patch": "https://issues.apache.org/jira/secure/attachment/12748235/SOLR-6234-trunk-CHANGES-fix.patch",
        "SOLR-6234.patch": "https://issues.apache.org/jira/secure/attachment/12659880/SOLR-6234.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jack Lo",
            "id": "comment-14056978",
            "date": "2014-07-10T01:10:33+0000",
            "content": "It would be better to integrate this into the main JoinQParser where no scoring would just be the old and default behavior. And since you are using Lucene JoinUtils, we can get rid of the old code in JoinQParser as well.\nI also have a patch that partially make join work in a distributed environment. It's in SOLR-4905, but that's reusing code in JoinQParser and doesn't work if fromIndex has more than 1 shard. However, by fixing LUCENE-3759 and combining your patch, we can make distributed join work as long as all shards reside locally. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14057188",
            "date": "2014-07-10T06:19:20+0000",
            "content": "Jack Lo\nI still think we need to add this QParse for Solr users, rather than decommission the current Solr join. I agree its' code is not easy to read, but I suppose it performs better in certain cases, and/or consume fewer memory than straightforward JoinUtil. \n\nre LUCENE-3759 : I don't believe that true distributed join performs well for practical usage (here I agree with Yonik's comment at SOLR-4905). As far as I understand, what you've done in SOLR-4905 allows to do collocated join even with multiple shards ie. if we place from and to side documents at the same shard, it's able to join them. I think it's what we need.       \n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14073137",
            "date": "2014-07-24T12:06:34+0000",
            "content": "Martijn van Groningen Robert Muir let me gently remind you about this patch.\nAs a side note, this ticket allows to reveal LUCENE-5653, wouldn't you mind to provide scorejoin for Solr users! "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14086187",
            "date": "2014-08-05T12:24:04+0000",
            "content": "formatted the patch. Still there is no anyone who'd like to have Lucene join with scoring available in Solr. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14086577",
            "date": "2014-08-05T18:20:01+0000",
            "content": "damn, the last patch doesn't use multiVals as a component at equals/hashcode. It's not a big deal, because the param itself seems pretty useless. Anyway, I can fixed it in a few mins, if you want to apply the patch.  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14212701",
            "date": "2014-11-14T19:33:57+0000",
            "content": "Use account \"steve_rowe\" instead do you mean this one? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14213989",
            "date": "2014-11-16T18:09:26+0000",
            "content": "Erik Hatcher this one is great for 4.10.3 "
        },
        {
            "author": "Parnit",
            "id": "comment-14242505",
            "date": "2014-12-11T13:23:15+0000",
            "content": "Hi Mikhail,\nI emailed a few mailing lists and you replied to help solve my scenario.\nI am slightly confused by how this feature would help also would you be able to provide sample usage for my scenario?\nHere it is in case you had forgotten.\n\nI have my mainIndex which looks something like this.\n id     description           name  \n  1   \"description1 \"    \"name1\"  \n  2   \"description2 \"    \"name2\"  \nI also have a subIndex which looks something like this\nid   metric  \n1      4  \n2      5  \nWhat I am trying to do is join the two index's on the id column and have my results sorted based on a column from the subIndex with a query like the following.\n\ntestServer/solr/MainIndex/select?defType=edismax&q=*&fq=\n{!join from=id to=id fromIndex=subIndex}\nid:*&sort=metric desc  \ndesired result\n 2   \"description2 \"    \"name2\"  \n 1   \"description1 \"    \"name1\"  \nI'm aware that you lose all information from the subIndex the moment the parser sees \"&\". What are my options should I want to join two indexes and sort on a column not present in the main index?\n\nIf you or someone else could show me some sample usage I would greatly appreciate it.\n\nThanks "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14242524",
            "date": "2014-12-11T13:36:53+0000",
            "content": "lose all information from the subIndex the moment the parser sees \"&\".\nthat's what I don't understand. \n\nnevertheless it should work by supplying field function query as a \"to\" side query \n\ntestServer/solr/MainIndex/select?q=\n{!scorejoin from=id to=id fromIndex=subIndex}\nmetric \n\n\n "
        },
        {
            "author": "Parnit",
            "id": "comment-14242536",
            "date": "2014-12-11T13:55:23+0000",
            "content": "thanks for the example, what I meant by that was when you supply the \"&\" you go back to querying the main index and no longer have access to fields from the subindex.\nAlso I'm assuming a negative query will give desc or asc order so I would be able to support both orders? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14242647",
            "date": "2014-12-11T15:02:58+0000",
            "content": "I'm sure &sort=score asc&.. will reverse results    "
        },
        {
            "author": "Parnit",
            "id": "comment-14242696",
            "date": "2014-12-11T15:36:59+0000",
            "content": "I have been getting some strange behaviour using scorejoin\ntestServer/solr/MainIndex/select?q=\n{!squarejoin from=id to=id fromIndex=subIndex}\nmetric:*\nreturns the following error\nundefined field metric\n\nIf I try the same with Solr join I am able to access column metric just fine.\ntestServer/solr/MainIndex/select?q=\n{!join from=id to=id fromIndex=subIndex}\nmetric:*\nIf I try using scorejoin with a column that exists in the mainIndex it seems to be returning results.\nIs this a bug?\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14242762",
            "date": "2014-12-11T16:36:41+0000",
            "content": "Is this a bug.\n\nyes it is. the parsing of fromQuery is incorrect in case of cross core join. \nShame on me. The only excuse is the absence of two cores tests in overall test codebase. \n\nCommitters, is there an example of bi-core test? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14243108",
            "date": "2014-12-11T20:46:58+0000",
            "content": "Parnit I have a workaround. The problem occurs only during query parsing. I suppose you can just define optional 'metric' field in the MainIndex that allows to parse fromQuery, and come further. \nPls post exception if it doesn't help you.     "
        },
        {
            "author": "Parnit",
            "id": "comment-14243204",
            "date": "2014-12-11T21:44:01+0000",
            "content": "Hi Mikhail, I tried what you are suggesting although it no longer throws an exception I believe it is not working as intended.\nGiven the hypothetical situation where I add a new metric to subIndex lets say metric2\nso something like this\n\nid metric1    metric2\n1      4             7\n2      5             2\n\ntestServer/solr/MC_10001_CatalogEntry_en_US/select?q=\n{!scorejoin from=id to=id fromIndex=subIndex}metric1:*\nreturns\ndoc1,\ndoc2\nfrom the main index\nThat leads me to believe the scoreJoin is returning results in ascending order.\n\nnow the following \ntestServer/solr/MC_10001_CatalogEntry_en_US/select?q={!scorejoin from=id to=id fromIndex=subIndex}\nmetric2:*\nalso returns\ndoc1,\ndoc2\nfrom the main index \nthe metric appears to have no impact on the ordering of the results returned.\nLastly ideal situation is not having to specify metric in both mainIndex and subIndex as optional as \"metric\" columns are dynamic columns in subIndex, it would be extremely inconvenient to add it to the mainIndex as well each time a new column is added.\n\nThanks for the continued help.  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14243218",
            "date": "2014-12-11T21:56:46+0000",
            "content": "Parnit I asked you to use http://wiki.apache.org/solr/FunctionQuery#field ie you need to \n\ntestServer/solr/MC_10001_CatalogEntry_en_US/select?q=\n{!scorejoin from=id to=id fromIndex=subIndex}\nmetric1\n\njust 'metric1' nothing more, ie no need wildcard metric1:*. Note it will work if metric is number! \nif something goes wrong, add http://wiki.apache.org/solr/CommonQueryParameters#debugQuery and post here the link to the output (I hope, explain works there for scorejoin)\n\nregarding the inconvenience, you can declare it in the schema as dynamicField.   "
        },
        {
            "author": "Parnit",
            "id": "comment-14243254",
            "date": "2014-12-11T22:19:36+0000",
            "content": "ok, trying the function query field I am getting back 0 results.\ntestserver/solr/mainIndex/select?q=\n{!scorejoin%20from=id to=id fromIndex=subIndex}\nview_rank&debugQuery=true\nmetric1 is also an int type like you stated \n\nHere is the debug\n<str name=\"rawquerystring\">\n{!scorejoin from=id to=id fromIndex=subIndex}\nmetric1\n</str>\n<str name=\"querystring\">\n{!scorejoin from=id to=id  fromIndex=subIndex}\nmetric1\n</str>\n<str name=\"parsedquery\">\nOtherCoreJoinQuery(OtherCoreJoinQuery [fromIndex=subIndex, fromCoreOpenTime=1418333501496 extends SameCoreJoinQuery [fromQuery=defaultSearch:\"(metric1 view) rank\", fromField=id , toField=id , scoreMode=None, boost=1.0]])\n</str>\n<str name=\"parsedquery_toString\">\nOtherCoreJoinQuery [fromIndex=subIndex, fromCoreOpenTime=1418333501496 extends SameCoreJoinQuery [fromQuery=defaultSearch:\"(metric1 view) rank\", fromField=id, toField=id, scoreMode=None, boost=1.0]]\n</str>\n<lst name=\"explain\"/> "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14243803",
            "date": "2014-12-12T07:08:10+0000",
            "content": "Parnit, ok...not well but, ok.\npay attention to \n\n\"fromQuery=defaultSearch:\"(metric1 view) rank\"\n\n\nit seems like it wasn't recognized as a function query, make a clue: \n\n{!func}metric1 \n\n\nie \n\n{!scorejoin from=id to=id fromIndex=subIndex}{!func}metric1\n\n "
        },
        {
            "author": "Parnit",
            "id": "comment-14244207",
            "date": "2014-12-12T14:40:57+0000",
            "content": "No luck unfortunately with the sorting, but now I am getting results back with just metric1 and no need for metric1:*\nusing the following \ntestServer/solr/mainIndex/select?q=\n{!scorejoin from=id to=id fromIndex=subIndex}{!func}metric1&debugQuery=true\n\n<lst name=\"debug\">\n<str name=\"rawquerystring\">{!scorejoin from=id to=id fromIndex=subIndex}\n{!func}metric1\n</str>\n<str name=\"querystring\">\n{!scorejoin from=id to=id fromIndex=subIndex}{!func}\nmetric1\n</str>\n<str name=\"parsedquery\">\nOtherCoreJoinQuery(OtherCoreJoinQuery [fromIndex=subIndex, fromCoreOpenTime=1418333501496 extends SameCoreJoinQuery [fromQuery=int(metric1), fromField=id, toField=id, scoreMode=None, boost=1.0]])\n</str>\n<str name=\"parsedquery_toString\">\nOtherCoreJoinQuery [fromIndex=subIndex, fromCoreOpenTime=1418333501496 extends SameCoreJoinQuery [fromQuery=int(metric1), fromField=id, toField=id, scoreMode=None, boost=1.0]]\n</str>\n\nso just to recap metric1,metric2 return the results in the same order\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14244238",
            "date": "2014-12-12T15:08:50+0000",
            "content": "Parnit it clearly explain the reason scoreMode=None, I believe you just need to specify any value for this local param. I put it into description explicitly.    "
        },
        {
            "author": "Parnit",
            "id": "comment-14244306",
            "date": "2014-12-12T16:02:39+0000",
            "content": "I tried all 4 different scoringModes same results. Is it possible that when I introduced the metric1 column to the mainIndex we are actually scoring on that non existent field. I'm not sure how solr deals with null/empty column values. Also the scoreModes do they sort based off of document score or is it something to do with the field being passed in ie (metric1,metric2) "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14244406",
            "date": "2014-12-12T16:29:35+0000",
            "content": "Parnit could you upload solr folder with index and core configs and send me the link? "
        },
        {
            "author": "Parnit",
            "id": "comment-14244438",
            "date": "2014-12-12T16:51:19+0000",
            "content": "Thanks for the help,but currently I am away from that machine and will not be access it for 3+ weeks as I will be away.\nPerhaps when I am back I could get it to you "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14255280",
            "date": "2014-12-21T22:11:49+0000",
            "content": "attaching fix for:\n\n\tcross-core query parsing with test coverage.\nNote: it's the only cross-core test for the current {!join query parser! ; \n\talso added multiVals into equality&hash\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14308784",
            "date": "2015-02-06T07:40:44+0000",
            "content": "that's would be great if we replicate SOLR-4905 here also. Please vote, let me know if you need it. "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14579608",
            "date": "2015-06-09T21:41:37+0000",
            "content": "This is awesome, the normal !join qparser is mainly only good for fq, but with scoring, this is good as a q or subquery. "
        },
        {
            "author": "Neeraj Lajpal",
            "id": "comment-14583350",
            "date": "2015-06-12T12:49:01+0000",
            "content": "I have a doubt regarding query time join.\nExample:\nI have the document structure like this:\nparent1: id, important_category\nchild1: id, root,brandid\nchild2:id,root,brandid\n\nroot field of child doc contains value of parent's id.\n\nI want to use query time join. I want all the parent documents after applying boosts on children's fields and avg their scores, and then apply boost on important_category field on parent.\nMy query is like this without boost on parent's field:\n{!scorejoin from=_root_ to=id score=avg multiVals=false}(brandid:1398^4 OR brandid:237^4.5)\nIt is working fine.\n\nBut, I want to apply boost to important_category field of parent also.\nIf I will use fq it will not impact score, so I have to use q only.\nIf I make q like :  important_category:322^4{!scorejoin from=_root_ to=id score=avg multiVals=false}\n(brandid:1398^4 OR brandid:237^4.5) \nit is not showing any results.\nHow can I do this? "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14583437",
            "date": "2015-06-12T14:13:08+0000",
            "content": "Neeraj Lajpal Solr parses the value of q with a single parser, which will be whatever your defType is.  In order to do something like that you can use nested queries:\n\nimportant_category:322^4 _query_:{!scorejoin from=_root_ to=id score=avg multiVals=false v=$jq}&jq=(brandid:1398^4 OR brandid:237^4.5)\n\n "
        },
        {
            "author": "Neeraj Lajpal",
            "id": "comment-14586427",
            "date": "2015-06-15T18:14:58+0000",
            "content": "Thanks a lot Ryan.\nThis solved my problem.\nBut, needed to change a couple of things, enclose the value of query in double quotes and remove jq.\nWithout these changes it was not showing any result.\n\nI executed this query:\nimportant_category:322^4 query:\"\n{!scorejoin from=_root_ to=id score=avg multiVals=false}(brandid:1398^4 OR brandid:237^4.5)\"\n\n\"debug\": {\n    \"rawquerystring\": \"important_cat:322^4 query:\\\"{!scorejoin from=_root_ to=id score=avg multiVals=false}\n(brandid:1398^4 OR brandid:237^4.5)\\\"\",\n    \"querystring\": \"important_cat:322^4 query:\\\"\n{!scorejoin from=_root_ to=id score=avg multiVals=false}\n(brandid:1398^4 OR brandid:237^4.5)\\\"\",\n    \"parsedquery\": \"important_cat:322^4.0 SameCoreJoinQuery(SameCoreJoinQuery [fromQuery=brandid:1398^4.0 brandid:237^4.5, fromField=_root_, toField=id, scoreMode=Avg, boost=1.0, multiVals=false])\"\n}\n\nEverything looks fine.\nThanks again. "
        },
        {
            "author": "Neeraj Lajpal",
            "id": "comment-14586428",
            "date": "2015-06-15T18:15:05+0000",
            "content": "Thanks a lot Ryan.\nThis solved my problem.\nBut, needed to change a couple of things, enclose the value of query in double quotes and remove jq.\nWithout these changes it was not showing any result.\n\nI executed this query:\nimportant_category:322^4 query:\"\n{!scorejoin from=_root_ to=id score=avg multiVals=false}(brandid:1398^4 OR brandid:237^4.5)\"\n\n\"debug\": {\n    \"rawquerystring\": \"important_cat:322^4 query:\\\"{!scorejoin from=_root_ to=id score=avg multiVals=false}\n(brandid:1398^4 OR brandid:237^4.5)\\\"\",\n    \"querystring\": \"important_cat:322^4 query:\\\"\n{!scorejoin from=_root_ to=id score=avg multiVals=false}\n(brandid:1398^4 OR brandid:237^4.5)\\\"\",\n    \"parsedquery\": \"important_cat:322^4.0 SameCoreJoinQuery(SameCoreJoinQuery [fromQuery=brandid:1398^4.0 brandid:237^4.5, fromField=_root_, toField=id, scoreMode=Avg, boost=1.0, multiVals=false])\"\n}\n\nEverything looks fine.\nThanks again. "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14586444",
            "date": "2015-06-15T18:24:10+0000",
            "content": "I've been using this for a few days now, and here are my comments:\n*) it's more functionally useful to have the scores returned with this than the !join parser.\n*) basing it off JoinUtil is a clean solution that centralizes this type of logic.\n*) That being said, scorejoin has performed worse than !join in my tests, usually almost twice as slow.  It's not an exhaustive test by any means, just an observation.  So it doesn't seem fit to replace !join as it is, although it does feel like this is the right direction to be going for joins.\n*) JoinUtil does not currently support multivalue fields for the \"to\" index.  It chooses one of the matching values instead of applying the ScoreMode for all matching documents.  It's a fairly small change to TermsIncludingScoreQuery to add this feature. "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14586457",
            "date": "2015-06-15T18:34:50+0000",
            "content": "Neeraj Lajpal, glad you got it working.  There might be a caution with using !scorejoin this way.  The scores coming back from !scorejoin are from the query to the fromIndex, and so they're not really related to the score coming from the important_category matches.  The matches from the scorejoin might have a really high max score, while the matches from the important_category might have a really low max_score, in a relative sense.  Or vice versa.  I think this use case is workable but it's something to keep in mind. "
        },
        {
            "author": "Neeraj Lajpal",
            "id": "comment-14587591",
            "date": "2015-06-16T07:23:47+0000",
            "content": "Thanks for pointing that out Ryan. \nI will keep that in mind while designing algo that will decide boosting params. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14619250",
            "date": "2015-07-08T19:53:37+0000",
            "content": "I'm working to get this patch committed to trunk / 5x "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14619373",
            "date": "2015-07-08T21:06:49+0000",
            "content": "Tell me if I need to improve something! Thanks! "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14619385",
            "date": "2015-07-08T21:19:04+0000",
            "content": "That will be great Tim! For my personal use case, I added a feature to the qparser that, after constructing the LocalSolrQueryRequest, would apply the handler config (defaults, appends, invariants) from the otherCore (say \"/select\" handler) to the request so that in a nutshell your other query could be a simple string and it would follow whatever edismax rules you had configured for the other core.  That instead of the more strict db style lucene query syntax.  If there's interest I am happy to share the patch. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14619436",
            "date": "2015-07-08T21:49:18+0000",
            "content": "Ryan Josal sounds cool ... definitely share the patch! "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14619521",
            "date": "2015-07-08T22:46:34+0000",
            "content": "I've attached otherHandler.patch, which is a patch on top of the existing ScoreJoinQParserPlugin.java from the Dec 14 patch, which shows changes to add a feature where the user can supply handler=/select (for example) in localparams, to apply the config from the handler in the other core.  You'll notice that the request is built from localParams instead of \"params\" so that whatever your current core params are don't override the other core configured params.  If this breaks something, it could be changed to only do that when the \"handler\" localParam is present.  This patch is quick and dirty because it uses reflection to get the defaults,appends,invariants config from the BaseRequestHandler class.  Really, the access level of those variables should change, or the method should be moved there.\n\nPersonally I'm using this feature to join my deals core with my products core as the othercore, and I wanted it to do a regular search against the products core.  This approach could actually be used in the !join qparser too.  If this patch is useful for somebody, great! "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14620671",
            "date": "2015-07-09T15:31:23+0000",
            "content": "Here's an updated patch for trunk. The JavaDoc on the ScoreJoinQParserPlugin wasn't passing precommit, so I need to fix that before committing (removed it for now).\n\nThis does not have the code from the patch Ryan posted yet ...\n\nMikhail Khludnev You mentioned this solution would address SOLR-6357, but I'm still seeing the same error when using scorejoin. Can you elaborate on why you think this fixes that problem?\n\n\n[~/dev/lw/projects/solr_trunk_co/solr]$ curl \"http://localhost:8983/solr/techproducts/update?commit=true\" -d '<delete><query>{!scorejoin from=manu_id_s to=id}ipod</query></delete>'\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<response>\n<lst name=\"responseHeader\"><int name=\"status\">500</int><int name=\"QTime\">6</int></lst><lst name=\"error\"><str name=\"msg\">org.apache.lucene.search.IndexSearcher cannot be cast to org.apache.solr.search.SolrIndexSearcher</str><str name=\"trace\">java.lang.ClassCastException: org.apache.lucene.search.IndexSearcher cannot be cast to org.apache.solr.search.SolrIndexSearcher\n\tat org.apache.solr.search.JoinQuery.createWeight(JoinQParserPlugin.java:207)\n\tat org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:704)\n\tat org.apache.lucene.search.BooleanWeight.&lt;init&gt;(BooleanWeight.java:56)\n\tat org.apache.lucene.search.BooleanQuery.createWeight(BooleanQuery.java:197)\n\tat org.apache.solr.update.DeleteByQueryWrapper.createWeight(DeleteByQueryWrapper.java:72)\n\tat org.apache.lucene.search.IndexSearcher.createWeight(IndexSearcher.java:704)\n\tat org.apache.lucene.search.IndexSearcher.createNormalizedWeight(IndexSearcher.java:687)\n\tat org.apache.lucene.search.QueryWrapperFilter.getDocIdSet(QueryWrapperFilter.java:63)\n\tat org.apache.lucene.index.BufferedUpdatesStream.applyQueryDeletes(BufferedUpdatesStream.java:690)\n\tat org.apache.lucene.index.BufferedUpdatesStream.applyDeletesAndUpdates(BufferedUpdatesStream.java:261)\n\tat org.apache.lucene.index.IndexWriter.applyAllDeletesAndUpdates(IndexWriter.java:3148)\n\tat org.apache.lucene.index.IndexWriter.maybeApplyDeletes(IndexWriter.java:3134)\n\tat org.apache.lucene.index.IndexWriter.prepareCommitInternal(IndexWriter.java:2808)\n\tat org.apache.lucene.index.IndexWriter.commitInternal(IndexWriter.java:2962)\n\tat org.apache.lucene.index.IndexWriter.commit(IndexWriter.java:2929)\n\n "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14620709",
            "date": "2015-07-09T15:39:50+0000",
            "content": "Actually ... hold that thought ... looks like code is still hitting JoinQParserPlugin.java for some reason ??? I'll dig. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14620738",
            "date": "2015-07-09T16:00:16+0000",
            "content": "Well, nm ... I must not have done a full clean / rebuild. After doing so, it is working! Sorry for the noise ... will start looking into Ryan's contribution as well now. Thanks Mikhail Khludnev - great feature! "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14621414",
            "date": "2015-07-09T22:52:10+0000",
            "content": "Mikhail Khludnev I'm wondering if we should add the solution for SOLR-4905 to the scorejoin parser too? It seems like this would be a good thing for scorejoin to support as well.\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-14621648",
            "date": "2015-07-10T03:20:14+0000",
            "content": "One tiny bit of input I have on this is rather cosmetic but nonetheless it'd be nice if the scoring mode could be specified via a local-param on the existing {!join} QParserPlugin.  It's still a join, we just want the score too.  It very well may have a different implementation when it's scoring but that's an implementation detail. "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14621658",
            "date": "2015-07-10T03:29:50+0000",
            "content": "That makes a lot of sense David, I would prefer this as it would reduce confusion, some similar code, and make implementation changes in the future more flexible. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14621979",
            "date": "2015-07-10T08:26:47+0000",
            "content": "Timothy Potter I like SOLR-4905 much. If it's possible I prefer to create a patch right after SOLR-6234 is committed, just prefer to work on smaller units. Let me know if you see it as a blocker, and I'll dig into SOLR-4905 (I still unaware of its' details).\n\nDavid Smiley I'm neutral about this - I agree that it would be convenient, but have a concern, nevermind.\n Here is another off-top-just-a-thought: since Lucene has query/filter cache {!join} algorithm can be migrated on intrinsic Lucene's IndexSearcher.  "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14622330",
            "date": "2015-07-10T13:56:28+0000",
            "content": "Ok, we can tackle adding 4905 as a separate ticket.\n\nRegarding David's comment, what does \n{!join} do that {!scorejoin} does not? (besides 4905) if nothing, then it seems to make sense to just replace {!join}\n with this implementation vs. introducing a new qparser type.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14622343",
            "date": "2015-07-10T14:08:11+0000",
            "content": "Regarding David's comment, what does {!join} do that {!scorejoin} does not? (besides 4905) if nothing, then it seems to make sense to just replace {!join}\n\nFrom an API perspective, nothing that I'm aware of. From an implementation perspective, it can be faster or slower depending on the details (it's a different implementation).  So it makes sense to perhaps consolidate the APIs, but keep the different implementations (sort of like facet.method does for faceting). "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14622363",
            "date": "2015-07-10T14:24:26+0000",
            "content": "Thanks Yonik Seeley, makes sense.\n\nMikhail Khludnev I didn't quite grok your last comment:\nI'm neutral about this - I agree that it would be convenient, but have a concern, nevermind. Here is another off-top-just-a-thought: since Lucene has query/filter cache {!join} algorithm can be migrated on intrinsic Lucene's IndexSearcher.\n\nCan you elaborate? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14622375",
            "date": "2015-07-10T14:25:42+0000",
            "content": "Related: my last few commits on heliosearch related to refactoring Solr's Join stuff to accommodate multiple implementations:\nhttps://github.com/Heliosearch/heliosearch/commits/helio_4_10\n\nIn the short term though, it may be easiest for JoinQParser to detect \"score=...\" and delegate to this new qparser?\n\nI haven't had a chance to look at this patch... from an API perspective, can someone explain what the \"multiVals=true|false\" parameter is supposed to do?\nedit: Oh, and this: \"supports b=100 param to pass Query.setBoost().\" - what is the effect of this? (exactly what query is the boost applied to and why aren't we using standard boosting mechanisms?) "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14622426",
            "date": "2015-07-10T15:12:28+0000",
            "content": "it may be easiest for JoinQParser to detect \"score=...\" and delegate \n+1\n\nthe \"multiVals=true|false\" parameter is supposed to do?\nit's just exposing JoinUtil.createJoinQuery() functionality, it implies that fromField is multivalue SortedSetDV and these values are looped. \nanother interesting feature request which I've heard is to treat toField multivalue and hence accumulate several from-side scores in to-side values. it's not in the patch, and should be done in JoinUtil first.\n\nexactly what query is the boost applied to \nthis parser calls JoinUtil.createJoinQuery() and then calls setBoost() on its' result. \n\nwhy aren't we using standard boosting mechanisms?\nI might be unaware of 'standard boosting mechanisms' I only aware about {!boost but people ask for more sugar.   "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14622428",
            "date": "2015-07-10T15:13:47+0000",
            "content": "I think it's not so important.  "
        },
        {
            "author": "Ryan Josal",
            "id": "comment-14622449",
            "date": "2015-07-10T15:19:44+0000",
            "content": "It seems like the parser can find out if it's multivalued for itself by checking the otherCore's Schema.\n\nI think multivalued \"to\" field on the current core should be a separate ticket since it is not a feature of the qparser, it's an improvement to JoinUtil.  I can have a patch for that later; I have it working. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14622461",
            "date": "2015-07-10T15:24:47+0000",
            "content": "it's just exposing JoinUtil.createJoinQuery() functionality, it implies that fromField is multivalue SortedSetDV \n\nThat's a Java API that can change from release-to-release.  Our HTTP APIs should stand alone and not be defined in terms of implementation details.\nIn this specific case, we should either know or be able to figure that out, right?  The user shouldn't have to specify.\n\nthis parser calls JoinUtil.createJoinQuery() and then calls setBoost() on its' result.\n\nSeems like that should be a separate issue (boosting the current query from within local params for that query).  If it's a good idea, it should be done in a generic way for all queries / qparsers. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14624923",
            "date": "2015-07-13T16:42:26+0000",
            "content": "Mikhail Khludnev are you going to update the latest patch I posted to have \n\nJoinQParser to detect \"score=...\" and delegate\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14625777",
            "date": "2015-07-14T03:58:39+0000",
            "content": "I can, if you wish, as well as handle other suggestions, but only in the end of this week.  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14632915",
            "date": "2015-07-19T20:19:16+0000",
            "content": "ok! here we are:\n\n\tqparser is called from the older one (JoinQParserPlugin) by specifying score local param {join score=...}\n\tb= is removed in favor of SOLR-7814\n\tmultiVals was just removed too, it seems docvalues hide multivalued when singlevalued is requested\nwant to watch?\n\n "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14633843",
            "date": "2015-07-20T17:12:00+0000",
            "content": "looks good Mikhail Khludnev +1 to commit. Please be sure to add documentation for this new feature to the refguide. I'll add a separate unit test that uses this feature to verify SOLR-6357 once this is committed. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14642793",
            "date": "2015-07-27T14:38:01+0000",
            "content": "added javadocs and changes. I'm going to commit it tomorrow. Is there any objections? Shouldn't it be merged into 5x right there? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14642935",
            "date": "2015-07-27T16:15:26+0000",
            "content": "found bug in toString() added test coverage.  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14644313",
            "date": "2015-07-28T12:42:32+0000",
            "content": "added link to lucene join for javadocs.  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14644366",
            "date": "2015-07-28T13:24:06+0000",
            "content": "Commit 1693092 from mkhl@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1693092 ]\n\nSOLR-6234: Scoring for query time join "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14644466",
            "date": "2015-07-28T14:44:17+0000",
            "content": "Commit 1693101 from mkhl@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1693101 ]\n\nSOLR-6234: Scoring for query time join "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14644515",
            "date": "2015-07-28T15:19:12+0000",
            "content": "Looks like some problems with the Javadoc still ... I'm getting this from running the smoke tester. Mikhail Khludnev did you run precommit?\n\n\n   [smoker] file:///Users/timpotter/dev/lw/projects/solr_trunk_co/lucene/build/smokeTestRelease/tmp/unpack/solr-6.0.0/solr/build/docs/solr-core/org/apache/solr/search/join/ScoreJoinQParserPlugin.html\n   [smoker]   BROKEN LINK: file:///Users/timpotter/dev/lw/projects/solr_trunk_co/lucene/build/smokeTestRelease/tmp/unpack/solr-6.0.0/lucene/build/docs/core/org/apache/lucene/search/join.ScoreMode.html\n   [smoker] Traceback (most recent call last):\n   [smoker]   File \"/Users/timpotter/dev/lw/projects/solr_trunk_co/dev-tools/scripts/smokeTestRelease.py\", line 1463, in <module>\n   [smoker]     main()\n   [smoker]   File \"/Users/timpotter/dev/lw/projects/solr_trunk_co/dev-tools/scripts/smokeTestRelease.py\", line 1408, in main\n   [smoker]     smokeTest(c.java, c.url, c.revision, c.version, c.tmp_dir, c.is_signed, ' '.join(c.test_args))\n   [smoker]   File \"/Users/timpotter/dev/lw/projects/solr_trunk_co/dev-tools/scripts/smokeTestRelease.py\", line 1453, in smokeTest\n   [smoker]     unpackAndVerify(java, 'solr', tmpDir, 'solr-%s-src.tgz' % version, svnRevision, version, testArgs, baseURL)\n   [smoker]   File \"/Users/timpotter/dev/lw/projects/solr_trunk_co/dev-tools/scripts/smokeTestRelease.py\", line 592, in unpackAndVerify\n   [smoker]     verifyUnpacked(java, project, artifact, unpackPath, svnRevision, version, testArgs, tmpDir, baseURL)\n   [smoker]   File \"/Users/timpotter/dev/lw/projects/solr_trunk_co/dev-tools/scripts/smokeTestRelease.py\", line 701, in verifyUnpacked\n   [smoker]     checkJavadocpathFull('%s/solr/build/docs' % unpackPath, False)\n   [smoker]   File \"/Users/timpotter/dev/lw/projects/solr_trunk_co/dev-tools/scripts/smokeTestRelease.py\", line 893, in checkJavadocpathFull\n   [smoker]     raise RuntimeError('broken javadocs links found!')\n   [smoker] RuntimeError: broken javadocs links found!\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14644577",
            "date": "2015-07-28T16:03:02+0000",
            "content": "the latest patch adds a tag into solr/common-build.xml which fixes it. I did run precommit for sure a plenty of times. fwiw build passed https://builds.apache.org/job/Lucene-Solr-Tests-trunk-Java8/245/ "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14645573",
            "date": "2015-07-29T06:55:44+0000",
            "content": "The problem still occurs in nightly's smoker builds (both 5.x and trunk). Was this committed?\n\n\n   [smoker] Verify...\n   [smoker] \n   [smoker] file:///x1/jenkins/jenkins-slave/workspace/Lucene-Solr-SmokeRelease-5.x/lucene/build/smokeTestRelease/tmp/unpack/solr-5.3.0/solr/build/docs/solr-core/org/apache/solr/search/join/ScoreJoinQParserPlugin.html\n   [smoker]   BROKEN LINK: file:///x1/jenkins/jenkins-slave/workspace/Lucene-Solr-SmokeRelease-5.x/lucene/build/smokeTestRelease/tmp/unpack/solr-5.3.0/lucene/build/docs/core/org/apache/lucene/search/join.ScoreMode.html\n   [smoker] Traceback (most recent call last):\n   [smoker]   File \"/x1/jenkins/jenkins-slave/workspace/Lucene-Solr-SmokeRelease-5.x/dev-tools/scripts/smokeTestRelease.py\", line 1487, in <module>\n   [smoker]     main()\n   [smoker]   File \"/x1/jenkins/jenkins-slave/workspace/Lucene-Solr-SmokeRelease-5.x/dev-tools/scripts/smokeTestRelease.py\", line 1432, in main\n   [smoker]     smokeTest(c.java, c.url, c.revision, c.version, c.tmp_dir, c.is_signed, ' '.join(c.test_args))\n   [smoker]   File \"/x1/jenkins/jenkins-slave/workspace/Lucene-Solr-SmokeRelease-5.x/dev-tools/scripts/smokeTestRelease.py\", line 1477, in smokeTest\n   [smoker]     unpackAndVerify(java, 'solr', tmpDir, 'solr-%s-src.tgz' % version, svnRevision, version, testArgs, baseURL)\n   [smoker]   File \"/x1/jenkins/jenkins-slave/workspace/Lucene-Solr-SmokeRelease-5.x/dev-tools/scripts/smokeTestRelease.py\", line 583, in unpackAndVerify\n   [smoker]     verifyUnpacked(java, project, artifact, unpackPath, svnRevision, version, testArgs, tmpDir, baseURL)\n   [smoker]   File \"/x1/jenkins/jenkins-slave/workspace/Lucene-Solr-SmokeRelease-5.x/dev-tools/scripts/smokeTestRelease.py\", line 702, in verifyUnpacked\n   [smoker]     checkJavadocpathFull('%s/solr/build/docs' % unpackPath, False)\n   [smoker]   File \"/x1/jenkins/jenkins-slave/workspace/Lucene-Solr-SmokeRelease-5.x/dev-tools/scripts/smokeTestRelease.py\", line 918, in checkJavadocpathFull\n   [smoker]     raise RuntimeError('broken javadocs links found!')\n   [smoker] RuntimeError: broken javadocs links found!\n\n\n\nThe link is definitely wrong as it goes to core module not join. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-14645604",
            "date": "2015-07-29T07:16:43+0000",
            "content": "It might be related to the fact that ScoreJoinQParserPlugin was put in a different package in 5.x compared to trunk? (my IDE complains that the package declaration does not match the folder the class is in) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14645640",
            "date": "2015-07-29T07:45:00+0000",
            "content": "This happens under the following condition:\n\n\tThe release TAR file has correct javadocs, all links will be correct for the occifial release (they user http://lucene.apache.org/core/5_3_0/join/...)\n\tSmoke tester fails when it unpacks the SRC-TGZ file (solr-5.3.0-src.tgz) and then runs ant documentation on it. In this case, the cross project links are static filesystem links (as seen above). Unfortunately, under this condition it seems to choose the wrong package. Maybe its a problem of order? I have the feeling we may have the same package in core and join that leads to the fact that it uses wrong module? It may also caused by not fully built Lucene\" javadocs?\n\n\n\nDid you try the following;\n\n\tant clean\n\tcd solr\n\tant javadocs\n\n\n\n(to isolate the whole thing out of full build). To me it looks like smoketester does not generate the full Lucene Javadocs, so it fails (see https://builds.apache.org/job/Lucene-Solr-SmokeRelease-5.x/ws/lucene/build/smokeTestRelease/tmp/unpack/solr-5.3.0/javadocs.log). So this could be a dependency problem. When solr builds javadocs it missies to trigger building of Lucenes Join.\n\nUnfortunately I cannot take care (vacation from today) and the release of 5.3.0 is close, so I would suggest to remove the cross module links for now and open separate issue to fix this. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14645644",
            "date": "2015-07-29T07:46:44+0000",
            "content": "Found the problem: Solr's common-build misses to build Join's Javadocs:\n\n\n  <!-- dependency to ensure all lucene javadocs are present -->\n  <target name=\"lucene-javadocs\" depends=\"javadocs-lucene-core,javadocs-analyzers-common,javadocs-analyzers-icu,javadocs-analyzers-kuromoji,javadocs-analyzers-phonetic,javadocs-analyzers-smartcn,javadocs-analyzers-morfologik,javadocs-analyzers-stempel,javadocs-analyzers-uima,javadocs-backward-codecs,javadocs-codecs,javadocs-expressions,javadocs-suggest,javadocs-grouping,javadocs-queries,javadocs-queryparser,javadocs-highlighter,javadocs-memory,javadocs-misc,javadocs-spatial,javadocs-test-framework\"/>\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14645668",
            "date": "2015-07-29T08:00:52+0000",
            "content": "This patch fixes the problem. Will commit this now. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14645673",
            "date": "2015-07-29T08:06:01+0000",
            "content": "Commit 1693197 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1693197 ]\n\nSOLR-6234: Fix Javadocs dependency to join module "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14645675",
            "date": "2015-07-29T08:07:17+0000",
            "content": "Commit 1693198 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1693198 ]\n\nMerged revision(s) 1693197 from lucene/dev/trunk:\nSOLR-6234: Fix Javadocs dependency to join module "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14645677",
            "date": "2015-07-29T08:07:44+0000",
            "content": "Fixed (hopefully) - waiting for next nightly run. If it still does not work, I hopy you can fix it based on my patch. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-14645700",
            "date": "2015-07-29T08:29:47+0000",
            "content": "Thanks Uwe! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14645758",
            "date": "2015-07-29T09:14:59+0000",
            "content": "Seems to pass now: https://builds.apache.org/job/Lucene-Solr-SmokeRelease-trunk/245/console\n\nThe problem was just that smoke tester does the good test to build the Solr javadocs in \"isolation\". The default builds don't trigger this, because they only check the javadocs as a \"whole\". "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14645763",
            "date": "2015-07-29T09:17:06+0000",
            "content": "...out for vacation  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14645879",
            "date": "2015-07-29T11:05:59+0000",
            "content": "Uwe Schindler, danke sch\u00f6n! Sorry, guys. I knew I broke something by my first commit.  "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-14645934",
            "date": "2015-07-29T11:57:27+0000",
            "content": "Mikhail, was it intentional to move ScoreJoinQParserPlugin to a different package when backporting? It's in oas.search in 5x and oas.search.join in trunk. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14645968",
            "date": "2015-07-29T12:28:32+0000",
            "content": "oh no. to clarify: I committed it to trunk first, then shoot my leg by old svn while merge into branch_5x. \nI prefer to move ScoreJoinQParserPlugin into oas.search.join at branch_5x if there is no objection. But would you tell me what I need to run before commit beside of test and precommit? Is prerelease worth to run? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14646691",
            "date": "2015-07-29T20:18:03+0000",
            "content": "precommit and nightly-smoke passed. Committing \n\nD       solr/core/src/java/org/apache/solr/search/ScoreJoinQParserPlugin.java\n        > moved to solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.java\nA  +    solr/core/src/java/org/apache/solr/search/join/ScoreJoinQParserPlugin.java\n        > moved from solr/core/src/java/org/apache/solr/search/ScoreJoinQParserPlugin.java\n\n\ninto ^/lucene/dev/branches/branch_5x "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14646711",
            "date": "2015-07-29T20:31:30+0000",
            "content": "No worries! This would have happened with me, too. This is just horrible dependency stuff and crazy javadocs & linter.\n\nSee it like that: It wook me half an hour to find out what's going on. After reading Smoke Tester source and seeing that it does \"ant clean\" and then \"ant javadocs\" in Solr only, it was clear to me what's wrong  - Solr was not building all required Lucene Javadocs before creating their own! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-14646715",
            "date": "2015-07-29T20:33:50+0000",
            "content": "run before commit beside of test and precommit? Is prerelease worth to run?\n\nPrecommit is fine. nightly-smoke is only needed for real structural changes. In fact, the Javadocs changes were structural  So whenever you touch the build.xmls it may be good to run nightly-smoke, but in most cases I just wait for Jenkins to fail  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14646744",
            "date": "2015-07-29T20:51:27+0000",
            "content": "Commit 1693343 from mkhl@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1693343 ]\n\nSOLR-6234: move ScoreJoinQParserPlugin.java into oas.search.join "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14648326",
            "date": "2015-07-30T21:20:18+0000",
            "content": "Adrien GrandUwe Schindler thanks for your help!\nTimothy Potter,Cassandra Targett, I hit cwiki, would you mind to check:\n\n\thttps://cwiki.apache.org/confluence/pages/diffpagesbyversion.action?pageId=32604257&selectedPageVersions=50&selectedPageVersions=49\n\thttps://cwiki.apache.org/confluence/pages/diffpagesbyversion.action?pageId=32604277&selectedPageVersions=71&selectedPageVersions=70\n\n "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-14649489",
            "date": "2015-07-31T17:12:38+0000",
            "content": "Mikhail Khludnev. First, thanks so much for proactively updating the Ref Guide with your changes.  \n\nI hope you don't mind too much, but I modified your text in a few ways:\n\n\n\tThe online version of the Ref Guide is always for the upcoming release of Solr, and as such we don't spend a lot of time describing how features used to work. While I understand that causes some confusion from time-to-time, a major problem with the old Solr Wiki was the attempt to maintain documentation for older versions of Solr along with the changes along the way. Personally, I find no harm mentioning when a feature was introduced, but at that point our convention is to remove documentation for the old behavior (unless, of course, the section is describing how to migrate to the new behavior).\n\tWith this general guideline, on the Uploading Data with Index Handlers page I flipped the emphasis to note the need to use the score parameter when deleting with the Join QP to avoid the error, and omitted the reference to 5.3 because the guide is for 5.3 already, and the section we're pointing to says the param was introduced in 5.3.\n\tI re-worded the text a bit to provide more context for a less-expert user.\n\tStandardized phrasings - i.e., \"plain Solr\" is usually referred to as \"standalone Solr\".\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14649792",
            "date": "2015-07-31T20:32:21+0000",
            "content": "Chris Hostetter (Unused) does it make sense? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-14649878",
            "date": "2015-07-31T21:31:59+0000",
            "content": "Impl notes:\n\n\n\ttoString() is a little bit odd, it looks like\n\n  \"debug\": {\n    \"rawquerystring\": \"{!join from=id to=manu_id_s score=max fromIndex=products}inc\",\n    \"querystring\": \"{!join from=id to=manu_id_s score=max fromIndex=products}inc\",\n    \"parsedquery\": \"OtherCoreJoinQuery(OtherCoreJoinQuery [fromIndex=products, fromCoreOpenTime=1438087133575 extends SameCoreJoinQuery [fromQuery=text:inc, fromField=id, toField=manu_id_s, scoreMode=Max]])\",\n    \"parsedquery_toString\": \"OtherCoreJoinQuery [fromIndex=products, fromCoreOpenTime=1438087133575 extends SameCoreJoinQuery [fromQuery=text:inc, fromField=id, toField=manu_id_s, scoreMode=Max]]\",\n    \"explain\": {\n\n\nLet me know if you need to change it.\n\n\n\n\n\tfor cross core join: when you commit into fromIndex query cache entry equality is determined by coreOpenTime() which is obtained from System.currentTimeMillis() it might cause some issues on edge cases/plarforms (that's why it wasn't covered with test), but this approach was inherited from {!join}. Raise an issue if it's significant to you.\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14650527",
            "date": "2015-08-01T20:46:16+0000",
            "content": "Commit 1693760 from mkhl@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1693760 ]\n\nSOLR-6234: moving lines in CHANGES.txt "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14713126",
            "date": "2015-08-26T13:05:50+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}