{
    "id": "LUCENE-3803",
    "title": "Using a searcher with an executor service does not work from within a Callable called by that same executor service",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.5",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The test case I'm about to attach creates an executor service uses invokeAll to run things from it. The 'things' (Callable) that it runs in turn run Lucene searchers using a searcher that has the very same executor service. This turns out to hit some sort of deadlock related to the executor service queue. \n\nI won't be terribly surprised if this is really a matter of a fundamental limitation of the executor service, but if nothing else this JIRA might provoke a warning in the javadoc. Or, what do I know, maybe there's a way Lucene could interact with the executor service that gets along with this?",
    "attachments": {
        "lucene-tc.tgz": "https://issues.apache.org/jira/secure/attachment/12515201/lucene-tc.tgz"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-20T01:00:28+0000",
            "content": "The problem is that you are using the same fixed thread pool for everything. If you only have 1 or 2 threads in the pool (as noted in your mail) and one of those threads calls searcher.search() from within its own callable, searcher.search will try to execute the sub-searches in its own callables. If the thread pool does not have enough free threads, it will wait for a thread to get available (because another callable finishes). The callable that called searcher.search will of course not finish as it waits for itsself to finish -> deadlock.\n\nThe bad idea with thread pools that leads to your problem is: Don't start Callables from within another Callable in the same thread pool. This almost always leads to deadlocks. ",
            "author": "Uwe Schindler",
            "id": "comment-13211622"
        },
        {
            "date": "2012-02-20T01:20:19+0000",
            "content": "This is not really related to your problem (somewhat) but I also looked at the code:\n\nI'm not sure how many queries you are running at once, but for a 'count' operation I'm not sure\nI would even pass a executor service... unless maybe your queries are really intensive to compute\nif a document is a match or not.\n\nYou would have to test: it might be better to just run single-threaded searches for counting in\nyour case, especially if you have multiple threads querying the index at once anyway. ",
            "author": "Robert Muir",
            "id": "comment-13211624"
        }
    ]
}