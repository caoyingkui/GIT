{
    "id": "LUCENE-6321",
    "title": "Make oal.index.Term more defensive",
    "details": {
        "resolution": "Won't Fix",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "oal.index.Term has a Term(String field, BytesRef termBytes) constructor. Even though it warns that the term bytes should not be reused, I'm wondering that we should make it more defensive.\n\n\n   * <p>WARNING: the provided BytesRef is not copied, but used directly.\n   * Therefore the bytes should not be modified after construction, for\n   * example, you should clone a copy by {@link BytesRef#deepCopyOf}\n   * rather than pass reused bytes from a TermsEnum.\n\n \n\nFor example if you have term queries in your query cache and they are modified in-place, it would have very bad consequences and would be hard to diagnose.",
    "attachments": {
        "LUCENE-6321.patch": "https://issues.apache.org/jira/secure/attachment/12701879/LUCENE-6321.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14343115",
            "author": "Robert Muir",
            "date": "2015-03-02T12:26:09+0000",
            "content": "I dont think its commonly a problem.\n\nMoreover, changing this is might be a big performance trap, because lots of code is built around the fact it doesnt copy. \n\nSeems like some clone() or similar must be broken. The query cache should be calling clone() when it caches. "
        },
        {
            "id": "comment-14343131",
            "author": "Adrien Grand",
            "date": "2015-03-02T12:56:28+0000",
            "content": "The query cache already clones queries. But it's not enough since TermQuery does not clone the underlying term. This is a change that would work for me too. "
        },
        {
            "id": "comment-14343134",
            "author": "Robert Muir",
            "date": "2015-03-02T12:59:24+0000",
            "content": "It should really do that. Phrase etc too! "
        },
        {
            "id": "comment-14343259",
            "author": "Adrien Grand",
            "date": "2015-03-02T15:21:00+0000",
            "content": "Here is a patch which makes TermQuery.clone() also clone the wrapped term. The patch also fixes:\n\n\t(Multi)PhraseQuery,\n\tSpanTermQuery,\n\tCommonTermsQuery,\n\tBooleanQuery (which did not clone the wrapped queries)\n\tDisjunctionMaxQuery (same reason)\n\n "
        },
        {
            "id": "comment-14345005",
            "author": "Robert Muir",
            "date": "2015-03-03T12:23:07+0000",
            "content": "Looks ok in general.\n\nNot sure about Term.clone() changes, i think maybe this should be an explicit deepCopyOf method just like bytesref? \n\nIn general, who is modifying term bytes? This seems like an abuse case, and its gonna be problematic everywhere in lucene apis if you do this. \n\nBut maybe its a good idea to do a little \"extra\" clone work to make these core queries defensive. Another thing we could do instead would be a best effort check where we actually throw concurrentmodificationexception or something, that might be more interesting. "
        },
        {
            "id": "comment-14345045",
            "author": "Adrien Grand",
            "date": "2015-03-03T13:13:32+0000",
            "content": "OK to not make Term cloneable.\n\nThe test that showed the issue is ThreadedIndexingAndSearchingTestCase which has the following code:\n\n\nwhile (System.currentTimeMillis() < stopTimeMS) {\n                      BytesRef term = termsEnum.next();\n                      if (term == null) {\n                        totTermCount.set(seenTermCount);\n                        break;\n                      }\n                      seenTermCount++;\n                      // search 30 terms\n                      if ((seenTermCount + shift) % trigger == 0) {\n                        //if (VERBOSE) {\n                        //System.out.println(Thread.currentThread().getName() + \" now search body:\" + term.utf8ToString());\n                        //}\n                        totHits.addAndGet(runQuery(s, new TermQuery(new Term(\"body\", term))));\n                      }\n                    }\n\n "
        },
        {
            "id": "comment-14345048",
            "author": "Adrien Grand",
            "date": "2015-03-03T13:16:08+0000",
            "content": "Another thing we could do instead would be a best effort check where we actually throw concurrentmodificationexception or something, that might be more interesting.\n\nRight, I started working on that and it is actually quite easy to implement. The only thing I'm worried about is that it would only appear on the first time that you need an eviction. So if your cache has a capacity of eg. 10,000 queries, it would take time before you notice the issue. And once it happens, all queries that insert entries into the cache would fail since no eviction could work anymore. So we probably need to also make queries a bit more defensive. "
        },
        {
            "id": "comment-14347046",
            "author": "Adrien Grand",
            "date": "2015-03-04T15:52:46+0000",
            "content": "OK, I made some progress:\n\n\tquery cloning is a bit more defensive to avoid caching issues\n\twe do not clone the wrapped terms but rather copy it when constructing a query (and the copy of the bytes happens in TermQuery (and other queries wrapping terms) instead of oal.index.Term)\n\tthe query cache in tests is configured to have a smaller size to make evictions more likely\n\tthe query cache detects queries which are modified while in the cache and throws a ConcurrentModificationException\n\n\n\nI think it's better? "
        },
        {
            "id": "comment-14347064",
            "author": "Robert Muir",
            "date": "2015-03-04T16:06:27+0000",
            "content": "Is the ctor copy enough for safety, or do we still also need deep clone? I'm just wondering because it could maybe make things simpler in 5.x branch for the filter case... "
        },
        {
            "id": "comment-14347069",
            "author": "Adrien Grand",
            "date": "2015-03-04T16:10:00+0000",
            "content": "The copy ctor is enough for term queries (this is what the patch does). However I had to deeply clone eg. boolean queries to make tests pass (mainly due to the fact that our tests randomly wrap queries into boolean queries or filtered queries here and there). "
        },
        {
            "id": "comment-14347109",
            "author": "Robert Muir",
            "date": "2015-03-04T16:41:18+0000",
            "content": "OK, i see it. Thats because TermQuery is more immutable, and those queries are mutable. I agree this is not good and I'm glad you are looking into it, it is not the fault of any new code, just things unraveled by tests.\n\nBut my concern here, we exclude filter here from clone, and the same problems can happen \"behind it\". \n\nI wonder which queries are impacted by this mutability issue and how hard it would be to just make them all immutable. To me this is the best way to prevent these kinds of problems. "
        },
        {
            "id": "comment-14348395",
            "author": "Adrien Grand",
            "date": "2015-03-05T08:34:43+0000",
            "content": "To me this is the best way to prevent these kinds of problems.\n\nChanging queries to be immutable (up to setBoost()) would make things easier I agree. Eg. clone() could be final, etc. I can give it a try. "
        },
        {
            "id": "comment-14355810",
            "author": "Adrien Grand",
            "date": "2015-03-10T22:01:53+0000",
            "content": "I started working on making queries immutable and while I like the change conceptually, this has a big impact on the code base and makes eg. boolean queries harder to use given how many parameters they have (minShouldMatch, disableCoord, clauses) and how we expect them to work (and throw a TooManyClausesException as soon as you added too many clauses). Maybe we can still do it in the long term but I think making queries clone deeply would be a pragmatic move in the mean time?  "
        },
        {
            "id": "comment-14377607",
            "author": "Adrien Grand",
            "date": "2015-03-24T10:18:09+0000",
            "content": "Closing in favor of LUCENE-6369 since we moved away from the original description of the issue. "
        }
    ]
}