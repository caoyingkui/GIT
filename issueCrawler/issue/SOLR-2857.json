{
    "id": "SOLR-2857",
    "title": "Multi-content-type /update handler",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Something I've been thinking about lately... it'd be great to get rid of all the specific update handlers like /update/csv, /update/extract, and /update/json and collapse them all into a single /update that underneath uses the content-type(s) to hand off to specific content handlers.  This would make it much easier to toss content at Solr and provide a single entry point for updates.",
    "attachments": {
        "SOLR-2857-update-content-type.patch": "https://issues.apache.org/jira/secure/attachment/12523589/SOLR-2857-update-content-type.patch",
        "SOLR-2857-content-type-refactor.patch": "https://issues.apache.org/jira/secure/attachment/12523936/SOLR-2857-content-type-refactor.patch",
        "SOLR-2857_oldUrls.patch": "https://issues.apache.org/jira/secure/attachment/12541104/SOLR-2857_oldUrls.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-13136205",
            "date": "2011-10-26T18:35:02+0000",
            "content": "no such actual implementation in mind here, just an idea at this point. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13136712",
            "date": "2011-10-27T02:10:03+0000",
            "content": "Fantastic idea +1 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13140012",
            "date": "2011-10-31T09:20:39+0000",
            "content": "Yep, I've been thinking about the same. Some kind of DelegatingUpdateRequestHandler which could be the default mapped to /update. It could default to xml with a log warning, if no mimetype detected, for back compat.\n\nQuestions:\n\n\tHow to distinguish between XML and XSLT updates? Both are 'text/xml'?\n\tWhen would the ExtractingRequestHandler be selected? On all unknown types? What if you want to index an XML as verbatim text, but it has the XML content type?\n\tThere should perhaps be a parameter to let you override the auto-detection?\n\n "
        },
        {
            "author": "Chris Male",
            "id": "comment-13140021",
            "date": "2011-10-31T09:40:26+0000",
            "content": "Why not let the UpdateRequestHandlers be configured to the mime types that they should be used for?  So in the configuration of the DelegatingUpdateRequestHandler you'd provide a mapping between mime type and UpdateRequestHandler.  If you provided no mapping then we'd just use whichever supported the mime type of the request. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13140064",
            "date": "2011-10-31T11:06:55+0000",
            "content": "Rather than building this around delegating to other update handlers, I'd rather see it built at least using pluggable ContentStreamLoader's.  The granularity is that a ContentStreamLoader is per-stream, whereas the current ContentStreamHandlerBase extending classes handle the full request and all content streams.  I envision a general purpose /update being able to hand each stream off to different loaders, rather than simply delegate the whole request to a handler.  \n\nThen we tie loaders to content-type's as a solrconfig plugin kinda thing, with of course our built-in ones auto-registered.  Perhaps we even add an \"ContentType[] accepts(SolrQueryRequest req)\" (where ContentType is just a String maybe?, req param desired?) to ContentStreamLoader so that content loaders can be auto-registered to the types they accept?  Maybe then we need ContentStreamLoaderFactory's to get these things constructed from solrconfig with params?  Looks like all ContentStreamLoader's also use UpdateRequestProcessor so that looks like a candidate to pull up to the base class, eh?\n\n... just thinking out loud. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13140069",
            "date": "2011-10-31T11:14:24+0000",
            "content": "I really like the idea of using ContentStreamLoaders, they seem quite lite-weight.  Having a simple Factory seems to serve any configuration and instance creation issues.\n\n+1 "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13140071",
            "date": "2011-10-31T11:29:25+0000",
            "content": "A note of caution here... content-type cannot be determined without first getting the stream (or reader) with some recent changes on trunk (to avoid unused content streams hitting URLs unnecessarily).  So the \"director\" aspect of a new catch-all /update will need to get the stream to determine the type, then hand that stream off to a loader.  This seems like it'd entail some other refactorings to accommodate?  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13140076",
            "date": "2011-10-31T11:36:41+0000",
            "content": "When would the ExtractingRequestHandler be selected? On all unknown types?\n\nTika can report the types it has registered to handle, IIRC.  Can we just leverage that list? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13140078",
            "date": "2011-10-31T11:37:56+0000",
            "content": "There should perhaps be a parameter to let you override the auto-detection?\n\nBut of course!     And the detector itself can be made easily pluggable. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13140625",
            "date": "2011-10-31T22:18:08+0000",
            "content": "Regardless of the implementation...\n\n\n\tHow to distinguish between XML and XSLT updates? Both are 'text/xml'?\n\tWhen would the ExtractingRequestHandler be selected? On all unknown types? What if you want to index an XML as verbatim text, but it has the XML content type?\n\tThere should perhaps be a parameter to let you override the auto-detection?\n\n\n\n..these seem like the kinds of situations where you would make an explicit request to an explicitly named handler, instead of relying on content-type detection (ie: if we remap \"/update\" to some new snazzier handler, and someone says \"but i want to do an xslt based update, not an xml update\" then they can POST to \"/update/xslt\" instead.  etc....) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13258617",
            "date": "2012-04-20T21:59:45+0000",
            "content": "For the text/xml case, if \"tr\" is specified, we use XSLT loader, else we assume the normal XML handler. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258678",
            "date": "2012-04-21T00:12:17+0000",
            "content": "Here is a patch that moves XML,CSV,JSON,javabin and XML+XSLT into a single handler that picks the right Loader based on the content type.\n\nThe bulk of the patch is cleaning up the test config files and moving private inner classes to their own file.\n\nThe single endpoint simplifies the oddities of multiple request formats in SolrServers\n\nThis handles XSLT by looking for the 'tr' param when the content type is XML\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258680",
            "date": "2012-04-21T00:14:55+0000",
            "content": "re ExtractingRequestHandler \u2013 I think this should stay its own Handler. \n\nThere should perhaps be a parameter to let you override the auto-detection?\n\nisn't that the content type?\n\nThis patch uses a lenient mime type matching approach sketched in SOLR-3387 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13258686",
            "date": "2012-04-21T00:20:32+0000",
            "content": "What are thoughts on deprecation?  I think we should go ahead and drop the specific flavors.\n\nNow that I think about the override parameter (and deprecation) I think it may make sense to have something like:\n\n\n  <requestHandler name=\"/update/json\" class=\"solr.UpdateRequestHandler\">\n    <str name=\"force.contentType\">application/json</str>\n  </requestHandler>\n\n\n\nThis would make it behave like the 3.x JsonUpdateRequestHandler "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13260222",
            "date": "2012-04-24T05:06:14+0000",
            "content": "cleans things up a bit more, but the UpdateRequestHandler is still hardcoded for CSV,XML,JSON, and javabin\n\nNext I will move more things around and clean up the API so it promotes registering Map<String,ContentStreamLoader> "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13260223",
            "date": "2012-04-24T05:07:17+0000",
            "content": "last patch was missing files "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13260290",
            "date": "2012-04-24T06:43:53+0000",
            "content": "Here is another version that refactors the base classes to better support reuse and a registry\n\n\n    loaders.put(\"application/xml\", new XMLLoader().init(p) );\n    loaders.put(\"application/javabin\", new JavabinLoader().init(p) );\n    loaders.put(\"application/json\", new JsonLoader().init(p) );\n    loaders.put(\"text/csv\", new CSVLoader().init(p) );\n\n\n\nAre people worried about back-compatibility of the ContentStreamLoader classes?  Ignoring 3.x API will make the final solution much cleaner "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13269838",
            "date": "2012-05-07T18:19:50+0000",
            "content": "This patch is updated to trunk\n\nI would like to commit this in the next couple days, and (possibly) look at configuration in a later issue. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13270105",
            "date": "2012-05-08T00:25:13+0000",
            "content": "updated with a deprecated replacement for XmlUpdateRequestHandler "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13270856",
            "date": "2012-05-08T21:39:47+0000",
            "content": "I added this in #1335768, and have put rough docs on the wiki \u2013 I'm sure there are more links/references that should be updated "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13416051",
            "date": "2012-07-17T10:02:46+0000",
            "content": "I've noticed the lack of the /update/json URL has bit a few people (including me in the past).\nShould we add something for easier back compat by default? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13435384",
            "date": "2012-08-15T18:36:11+0000",
            "content": "Here's a patch that restores the /update/json and /update/csv URLs so other clients/applications will have an easier time moving to Solr 4. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13436070",
            "date": "2012-08-16T16:23:34+0000",
            "content": "Committed to trunk & 4x:\nhttp://svn.apache.org/viewvc?view=revision&revision=1373904 "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-16289242",
            "date": "2017-12-13T13:22:09+0000",
            "content": "GitHub user steeveb972 opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/290\n\n    Removed deprecated reference\n\n    XmlUpdateRequestHandler has been replaced by UpdateRequestHandler as of SOLR-2857\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/steeveb972/lucene-solr master\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/290.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #290\n\n\ncommit 43dece91ffdac55344ff2fbf65eb1207dff6bec7\nAuthor: steeveb972 <steeveb972@users.noreply.github.com>\nDate:   2017-12-13T13:12:50Z\n\n    Removed deprecated reference\n\n    XmlUpdateRequestHandler has been replaced by UpdateRequestHandler\n\n "
        }
    ]
}