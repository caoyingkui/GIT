{
    "id": "SOLR-9126",
    "title": "shutdownAndAwaitTermination interruption handling faulty?",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I'm looking at ExecutorUtil.shutdownAndAwaitTermination:\n\npublic static void shutdownAndAwaitTermination(ExecutorService pool) {\n    pool.shutdown(); // Disable new tasks from being submitted\n    boolean shutdown = false;\n    while (!shutdown) {\n      try {\n        // Wait a while for existing tasks to terminate\n        shutdown = pool.awaitTermination(60, TimeUnit.SECONDS);\n      } catch (InterruptedException ie) {\n        // Preserve interrupt status\n        Thread.currentThread().interrupt();\n      }\n    }\n  }\n\n\nIf the current thread calling this method is interrupted, this loop will loop forever since awaitTermination will likely keep throwing InterruptedException.  If InterruptedException isn't going to be propagated, this method should return, and probably log that it was interrupted prior to termination.\ndisclaimer: this is purely from inspection; I haven't seen this happen.\nnitpick: the shutdown boolean is needless, simply do if (pool.await...) return;",
    "attachments": {},
    "issue_links": {},
    "comments": []
}