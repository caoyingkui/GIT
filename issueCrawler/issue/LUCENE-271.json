{
    "id": "LUCENE-271",
    "title": "Query.toString() and Query.toString(String field) not escaping special characters",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "The Javadoc says that Query.toString(String field) produces a string \nrepresentation that is readable by QueryParser.\nQueryParser gives the ability to escape special characters\n+ - && || ! ( ) { } [ ] ^ \" ~ * ? : \\\nwith a preceding backslash, but Query.toString() doesn't make any escaping.\nSo, QueryParser can parse dc\\:title:hugo into a TermQuery with field dc:title \nand text hugo but toString() gives back dc:title:hugo (which gives a somewhat \ndifferent result when parsed again, actually a TermQuery with field dc and \ntext title, hugo goes in outer space).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2004-09-03T04:50:03+0000",
            "content": "I think you're right. I'll try to fix this in the next few days. \n ",
            "author": "Daniel Naber",
            "id": "comment-12321885"
        },
        {
            "date": "2004-09-03T07:37:46+0000",
            "content": "It's really too good to be true that Query.toString returns a QueryParser string.  There are many Query \ntypes which QueryParser knows nothing about and quite a few nuances.  I do agree in this case it would \nbe nice to have the special characters escaped though.  Hopefully it's possible to share a constant so \nthere is no duplication and potential mismatch later if the list changes. ",
            "author": "Erik Hatcher",
            "id": "comment-12321886"
        },
        {
            "date": "2004-09-04T04:42:05+0000",
            "content": "I just committed a fix but then noticed that it's not so easy for e.g. \nWildcardQuery. We cannot just escape \"*\" in a WildcardQuery. It seems in \nMultiTerQueries toString() we cannot decide anymore if a special character \nneeds to be escaped. What to do now? Does someone have a better approach? \nShould I revert my patch as it doesn't fix the problem completly?  ",
            "author": "Daniel Naber",
            "id": "comment-12321887"
        },
        {
            "date": "2004-09-06T13:47:30+0000",
            "content": "Maybe we should escape characters for query classes that the query parser can \nhandle, not for other query classes. ",
            "author": "Romain Laboisse",
            "id": "comment-12321888"
        },
        {
            "date": "2004-09-07T05:13:32+0000",
            "content": "I reverted my patch as it fixed only a part of the problem which makes the \nsituation even more confusing IMHO. If someone knows how to fix it for all \nquery types (maybe expect those that cannot be parsed anyway), feel free to do \nso...  ",
            "author": "Daniel Naber",
            "id": "comment-12321889"
        },
        {
            "date": "2011-01-26T11:50:27+0000",
            "content": "This is documented by Query.toString() now and according to the comments on the issue, it's not clear that we can handle it consistently across all queries. Given that it's inactive for so long, I'm closing it. ",
            "author": "Shai Erera",
            "id": "comment-12986956"
        }
    ]
}