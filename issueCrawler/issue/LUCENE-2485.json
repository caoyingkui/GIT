{
    "id": "LUCENE-2485",
    "title": "IndexWriter should also warm flushed segments",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Spinoff of LUCENE-2311.\n\nYou can now set a mergedSegmentWarmer on IW, which warms only newly merged segments.\n\nBut for consistency maybe we should change this to warm all new segments (ie, also flushed ones).  We should rename it to something \"setSegmentWarmer\".\n\nReally, the reader pool should be pulled out of IndexWriter, be externally provided, and be responsible for doing warming of new segments.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-06-02T15:23:37+0000",
            "content": "But for consistency maybe we should change this to warm all new segments\n\nAs long as warming a new segment doesn't block that new segment from being exposed via getReader()? ",
            "author": "Yonik Seeley",
            "id": "comment-12874611"
        },
        {
            "date": "2010-06-02T15:33:18+0000",
            "content": "I'm not sure how practical this is or not... but in general, more context would enable a broader range of applications.\n\n\tPassing in the complete index (in addition to just the new segment) would allow incremental updating of an index-wide data structure\n\tIf the new segment was the result of a merge of existing segments, passing in those existing segments could allow more efficient generation of cached items from the cached items of the old segments.\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-12874613"
        },
        {
            "date": "2010-06-02T16:39:28+0000",
            "content": "As long as warming a new segment doesn't block that new segment from being exposed via getReader()?\nIf an application needs warming, it will need to warm up new segments exposed through getReader() anyway. If you're bent on fast turnaround, you're probably not relying on things being warmed up (or okay with the costs).\nAdd to this the thing that for realtime-hungry deployments the size of newly-created (not merged) segments is likely smallish, and any warmup (if present) will take negligible time.\n\nI think you're going to do a bit of overoptimizing here. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12874650"
        },
        {
            "date": "2010-06-02T16:45:39+0000",
            "content": "If an application needs warming, it will need to warm up new segments exposed through getReader() anyway.\n\nBut it's very different... the advantage to warming new segments is that the warm step was considered part of the merge by getReader() - if the whole thing hadn't completed yet, getReader() would still immediately return with the old segments pre-merge.  w/o this ability, there's no advantage to warming in a hook vs warming explicitly after getReader(). ",
            "author": "Yonik Seeley",
            "id": "comment-12874652"
        },
        {
            "date": "2010-06-02T17:31:41+0000",
            "content": "w/o this ability, there's no advantage to warming in a hook vs warming explicitly after getReader()\nThere is. Consistency. I understand that this word is not in high regard amongst Luceners (progress, not perfection!), but still.\nIt is logical to have all your warming happen in one defined place. If Lucene does magic for you, and biggest part of said warming happens in a separate thread without making you wait - that's very nice! But that's just a sideffect, like compiler optimizations that may or may not happen.\nAlso, if your app requires warming for each segment, having a single callback frees you from the need to determine for a given new segment returned from getReader(), if it is a product of merge and thus already warm, or is it a still-cold newly-flushed segment. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12874687"
        },
        {
            "date": "2010-06-03T09:58:54+0000",
            "content": "In addition to the \"more context\" that Yonik proposed (which I like), we could also pass to the warmer whether the segment was created by flush or by merge or by addIndexes.\n\nThis way the app could have a single place for all warming, but if necessary can pick & choose how it warms the difference cases separately, since warming after a merge is done in the background (won't block an NRT reopen).\n\nI'd really like to first factor the ReaderPool out of IW though... ",
            "author": "Michael McCandless",
            "id": "comment-12875027"
        },
        {
            "date": "2013-07-23T18:44:37+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717005"
        },
        {
            "date": "2014-04-16T12:54:33+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970797"
        }
    ]
}