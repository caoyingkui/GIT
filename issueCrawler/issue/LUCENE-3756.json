{
    "id": "LUCENE-3756",
    "title": "Don't allow IndexWriterConfig setters to chain",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Spinoff from LUCENE-3736.\n\nI don't like that IndexWriterConfig's setters are chainable; it\nresults in code in our tests like this:\n\n\nIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n\n\n\nI think in general we should avoid chaining since it encourages hard\nto read code (code is already hard enough to read!).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-07T16:07:21+0000",
            "content": "I disagree . The fact that the API allows chaining (a builder pattern I think?) doesn't mean you need to use it. I find it very useful and convenient that I can do new IWC().setOpenMode() for example.\n\nIf you remove that capability, you will affect many people that like it, while those that don't like it can still call the setters one in each line. ",
            "author": "Shai Erera",
            "id": "comment-13202498"
        },
        {
            "date": "2012-02-07T16:13:21+0000",
            "content": "Shai: Thanks for the comment, I have no idea how to fight against this anti-builder mentality. There is nothing that forces you to use chaining.\n\nSee also LUCENE-3736, I brought all arguments. ",
            "author": "Uwe Schindler",
            "id": "comment-13202502"
        },
        {
            "date": "2012-02-07T20:16:19+0000",
            "content": "\nThe fact that the API allows chaining (a builder pattern I think?) doesn't mean you need to use it.\n\nThe problem is, I haven't yet seen a usage of this chaining that is\nis \"good\".\n\nI know this chaining is apparently a core part of being a builder API,\nwhich confuses me because I think sometimes the separate builder is\njustified yet chaining doesn't seem necessary (eg FST.Builder).\n\nSure, with IWC's chaining, it's faster to write, less LOC, feels good,\netc., but the result is large compound expressions in one line, and\nless readable code, and I think, especially in open-source\ndevelopment, readability is more important than writability.\n\nDoes anyone think the example above is more readable than the\nnon-chained alternative?  Look at all our tests, where we inline the\ncreation/building of an IWC: can you find one where chaining actually\nhelps readability?\n\nChaining offers a dangerous, toxic degree of freedom/ambiguity that I\nthink can only cause our source code, but more importantly our\ncommunity, harm. ",
            "author": "Michael McCandless",
            "id": "comment-13202733"
        },
        {
            "date": "2012-02-07T20:25:50+0000",
            "content": "\nDoes anyone think the example above is more readable than the\nnon-chained alternative? Look at all our tests, where we inline the\ncreation/building of an IWC: can you find one where chaining actually\nhelps readability?\n\nThe not-chaining does not help for readability, chaining makes it more readable. You can format it like I did in the tests (actually, it was not me, it was Eclipse - does it detect builders?). In contrast you can also write all in one line without chaining.\n\nSo where, wtf, is the difference? Everybody can write the code as one like, so I can write a full java class in one line, why not? I can on the opposite also write all parts of a chaining api in separate lines and that's what I generally do (look at my StringBuilders when I code something). Nobody forces me to do it in the one or other variant.\n\nIn contrast, using the API with repeating the instance variable every time makes it really unreadable, especially because the important parts are hidden.\n\nIf you like, I will ask my Eclipse to rewrite all tests to make chains in new lines (if it can do this, because it did this when coding the test).\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-13202741"
        },
        {
            "date": "2012-02-08T04:59:01+0000",
            "content": "Mike, this is purely a style thing. You think that the code is not readable, I think that it is. If you want, we can ask Lucene committers not to chain lots of set() calls in one line, or format the code such that lines are not longer than 120 characters.\n\nBut if you change IWC's API contract, you force your preferred style on everyone. To that I cannot agree. There isn't any technical reason to force IWC to return void. If you think however (and that doesn't seem the case here) that any of the methods should return a different value, then that's a whole different story.\n\nIMO, if a class returns void in all its methods, and it is a configuration class, it should be a builder. It's for convenience. When I want, I chain set() calls. Sometimes I have mixed code, when I want to document the reason for a specific set() call. The point is that I have the freedom to decide how to use the class. ",
            "author": "Shai Erera",
            "id": "comment-13203275"
        },
        {
            "date": "2012-02-09T00:31:27+0000",
            "content": "I can on the opposite also write all parts of a chaining api in separate lines and that's what I generally do (look at my StringBuilders when I code something).\n\nThe problem is that chaining is easily (and, often, from what I've\nseen) abused and quickly results in very large compound expressions\nthat are hard to read (to my eyes anyway).  Just grep for\nnewIndexWriterConfig in our tests to see many examples...\n\nReadability is important.\n\nIf you like, I will ask my Eclipse to rewrite all tests to make chains in new lines (if it can do this, because it did this when coding the test).\n\n+1\n\nIs it easy to have Eclipse fully un-chain it?  Ie so instead of:\n\n\nIndexWriter writer = new IndexWriter(dir, newIndexWriterConfig( TEST_VERSION_CURRENT, new MockAnalyzer(random)).setMaxBufferedDocs(2).setMergePolicy(newLogMergePolicy()));\n\n\n\nWe'd have something like this:\n\n\nIndexWriterConfig iwc = newIndexWriterConfig(TEST_VERSION_CURRENT, new MockAnalyzer(random));\niwc.setMaxBufferedDocs(2);\niwc.setMergePolicy(newLogMergePolicy());\n\nIndexWriter writer = new IndexWriter(dir, iwc);\n\n\n\n?  That would be better... (I think).\n\nThe point is that I have the freedom to decide how to use the class.\n\nNot all freedom is good.  Java and C++ (but not Python!) let you\nindent code however you want, thanks to { } defining scopes, but that\ndoesn't mean you should be taking advantage of that freedom by\nindenting source code in unexpected ways.\n\nAnd in fact we are not free to take advantage of that in Lucene\nbecause (thankfully) we have a common coding style that we all follow.\n\nHaving this freedom suddenly means we have ambiguity on how we format\nthese chained expressions, and I don't like adding ambiguity in our\nsources: there should [generally] be one clear way of doing something.\nWe have enough ambiguity as it is...\n\nSo, I don't think we should be adding any more builders/chaining to\nLucene's sources...  Apps can always create builders on top of Lucene. ",
            "author": "Michael McCandless",
            "id": "comment-13204149"
        },
        {
            "date": "2012-02-09T00:45:19+0000",
            "content": "+1 I agree with Mike. ",
            "author": "Jason Rutherglen",
            "id": "comment-13204160"
        },
        {
            "date": "2012-02-09T04:22:01+0000",
            "content": "\nSo, I don't think we should be adding any more builders/chaining to\nLucene's sources... Apps can always create builders on top of Lucene.\n\nThat's a bit extreme I think. The API should be clear, and easy to consume/use. Why force an app to wrap and object with a Builder if we can do it in Lucene? What else do you want to return from all the setters in IWC? They return void, so why not create the flexibility to the users?\n\nAre you against StringBuilder too?\n\nbecause (thankfully) we have a common coding style that we all follow\n\nI seriously doubt that we have A coding style, much less one that WE ALL follow. Look at Lucene code \u2013 a lot of it is badly formatted. Some people like to write their if statements without {} (if they contain a single instruction), others prefer to always put the braces. Some don't like redundant if-else statements if both the 'if' and 'else' return from the method (Eclipse even has an option to show a warning on it), others prefer to always put an if-else for readability.\n\nCoding style is important, I agree. In my project, we enforce coding style through unit tests - we wrote a framework which checks the source code and asserts all sorts of things like line length (we limit them to 120 chars), spaces before/after opening braces, copyright notices, indentation and what not. We even have a validator that ensures you don't put 2 consecutive empty lines in the code . The framework is executed as part of 'ant test', so these things are always checked, and unless you don't execute tests before commit, there's no chance to commit code which doesn't follow the coding style that we've decided upon. I thought about contributing it to Lucene, but wasn't sure if the community cares much about code formatting/style.\n\nIf we had such a framework, you could easily write a validator which enforces a max-length on a line (we already do), so you wouldn't end up with such long lines in the first place. You can even write a validator that ensures IWC is not used as a Builder pattern in Lucene code. The great thing about this framework is that it doesn't force you to change the API signature. You can still keep IWC as a Builder, but enforce that it's not used in Lucene like that, and I can still enjoy IWC as I do today, chaining calls when I feel it's appropriate.\n\nMike - if you want to change how IWC is used in Lucene tests, let's do that. But I prefer that we keep the builder API and not enforce coding style on the users. ",
            "author": "Shai Erera",
            "id": "comment-13204243"
        },
        {
            "date": "2012-02-09T15:25:23+0000",
            "content": "This is indicative of a larger worrying trend of people thinking of how to do something the best way and then trying to prohibit all other ways.  It ultimately makes Lucene less flexible.\n\nWas LUCENE-3736 really reverted over this coding style?  That's definitely not something we should make a precedent.\n\nRather than let this be decided by attrition like LUCENE-2308 (freeze vs builder vs ???), it would seem fairer to perhaps call a straight up vote.  This isn't a deep technical issue, but rather a style issue that most committers probably have an opinion on. ",
            "author": "Yonik Seeley",
            "id": "comment-13204584"
        },
        {
            "date": "2012-02-09T15:50:59+0000",
            "content": "This is indicative of a larger worrying trend of people thinking of how to do something the best way and then trying to prohibit all other ways. It ultimately makes Lucene less flexible.\n\nI strongly agree! As I said in this, in LUCENE-3736 and other issues. The builder pattern does not prevent anybody from not using it and both patterns can be used to make code unreadable. But I (and I speak also for other committers like Shai) want to have the freedom to chain my method calls if we have builder.\n\nWas LUCENE-3736 really reverted over this coding style? That's definitely not something we should make a precedent.\n\nYes, it was reverted because of that. I already committed and closed that issue, but Mike disagreed (in my opinion, he put not enough stress on his answer). On IRC I gave the \"OK\" to revert it (I wanted to be kept out of the whole process, so I \"allowed\" him to revert).\n\nRather than let this be decided by attrition like LUCENE-2308 (freeze vs builder vs ???), it would seem fairer to perhaps call a straight up vote. This isn't a deep technical issue, but rather a style issue that most committers probably have an opinion on.\n\nYes, please!\n\nMy proposal would be (Robert als suggested that to me privately):\n\n\n\tAllow definition of builder patterns, but dont force users to use them\n\tDon't use the builders to chain in tests (unless it makes it more readable - it does quite often), at least format the tests like I did in 3736.\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13204596"
        },
        {
            "date": "2012-02-09T16:04:30+0000",
            "content": "+/- INFINITY.\n\nPersonally, these kinds of discussions are a monumental waste of time and energy. Not to mention you can't avoid pissing people off no matter what is decided.\n\nI'd rather get work out of volunteers than scare them off with this kind of discussion. And it seems that code gets partitioned pretty much by default so the style starts to take on the characteristics of the person doing the heavy lifting eventually anyway.\n\nIf someone's willing to put the time into writing the code, the least I can do is spend a bit of time adjusting to the convention used. If I'm going to modify it, then I'll feel free to make it more readable to my eyes. I happen to agree that chaining can be confusing. Tough. I'll figure it out.\n\nSee Martin Fowler's excellent book \"Refactoring\". One of my primary take-aways was that going in and gratuitously refactoring working code (which we would be doing if we enforced any policy by, say, removing the pattern) is almost always wrong. If it works, don't \"fix\" it. If you have to go into the code anyway, then feel free.\n\nI guess my approach rather depends on how heavily I'm going into some code. A minor code change and I'll do my best to respect the style already there. Major surgery and I'm much more willing to re-do things to match my preferences. Heck, I'm even managing to refrain from reformattiong the whole file, what more do you want?\n\nThat's all I want to say about that....  ",
            "author": "Erick Erickson",
            "id": "comment-13204606"
        },
        {
            "date": "2012-02-09T17:00:06+0000",
            "content": "I completely agree with Erick.  \n\nAnd as Shai says, if style compliance is going to be a continuing issue, we should agree on a style, and automate compliance checking. ",
            "author": "Steve Rowe",
            "id": "comment-13204650"
        },
        {
            "date": "2012-02-10T01:27:08+0000",
            "content": "Are you against StringBuilder too?\n\nActually I think that's a very appropriate use of builder.  The\nchaining on one line bothers me less here, I think because it's nearly\nalways append, and it's nearly always short things being appended.  I\ndon't usually see it abused...\n\nFST.Builder is another appropriate usage of builder (without chaining).\n\nOther uses (eg for creating a ParallelReader), I don't think are\nappropriate: it's an API change vs 3.x, it's extra work for the common\ncase, it creates API inconsistency (other IRs don't require builders).\n\nI seriously doubt that we have A coding style, much less one that WE ALL follow.\n\nIn fact we do have a standard coding style (it's referenced from\nHowToContribute on the wiki).\n\nIt's true, we don't uniformly/aggressively enforce it.  We can\nconsider doing so... it's neat you get a failure from ant test if you\nbreak the style   But I have mixed feelings on whether we should...\n\nWhat's important is we do have a clear standard, so if there is any\ndoubt, disagreement, etc., it's quickly settled, instead of huge\ndiscussions (like this!): there is no (little) ambiguity; we all can\nfix the code style as we work in a given area.\n\nEg, when I see a single line if statement missing the { }'s, I add\nthem.\n\nYou can even write a validator that ensures IWC is not used as a Builder pattern in Lucene code. \n\n+1\n\nI don't like the ambiguity and easy \"abuse\" made possible by\nchaining.  If we adopt additions to our coding style (Sun's guidelines\ndon't seem to cover chained methods  )... then I think this will\naddress my concerns.\n\n\nMy proposal would be (Robert als suggested that to me privately):\n\n\tAllow definition of builder patterns, but dont force users to use them\n\tDon't use the builders to chain in tests (unless it makes it more readable - it does quite often), at least format the tests like I did in 3736.\n\n\n\n+1, I think this is a good compromise.  The builder is optional (ie\nyou can invoke a big-ctor instead), and we have clear code style when\nbuilders are invoked in Lucene.\n\nThis is indicative of a larger worrying trend of people thinking of how to do something the best way and then trying to prohibit all other ways. It ultimately makes Lucene less flexible.\n\nHmm can you give other examples of this trend? ",
            "author": "Michael McCandless",
            "id": "comment-13205134"
        }
    ]
}