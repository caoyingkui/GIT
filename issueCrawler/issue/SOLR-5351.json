{
    "id": "SOLR-5351",
    "title": "More Like This Handler uses only first field in mlt.fl when using stream.body",
    "details": {
        "affect_versions": "4.4",
        "status": "Closed",
        "fix_versions": [
            "7.4"
        ],
        "components": [
            "MoreLikeThis"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The documentation at: http://wiki.apache.org/solr/MoreLikeThisHandler indicates that one can use multiple fields for similarity in mlt.fl:\nhttp://localhost:8983/solr/mlt?stream.body=electronics%20memory&mlt.fl=manu,cat&mlt.interestingTerms=list&mlt.mintf=0\n\nIn trying this, only one field is used. \nLooking at the code, it only looks at the first field:\n\n public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      // analyzing with the first field: previous (stupid) behavior\n      rawMLTQuery = mlt.like(reader, mlt.getFieldNames()[0]);",
    "attachments": {
        "SOLR-5351.patch": "https://issues.apache.org/jira/secure/attachment/12912602/SOLR-5351.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tommaso Teofili",
            "id": "comment-13925680",
            "date": "2014-03-10T11:47:04+0000",
            "content": "the problem to me is not (only) on the Solr side, but I think Lucene's MoreLikeThis should support multiple fields instead of just one, e.g. adding a new method like\n\nQuery like(Reader r, String... fieldNames) throws IOException\n\n  "
        },
        {
            "author": "Upayavira",
            "id": "comment-13969610",
            "date": "2014-04-15T15:09:52+0000",
            "content": "These two snippets of code seem to work. I will recraft it as a patch soon. However, I wonder if there are more standard ways of rereading a Reader.\n\n\n    private class ResettingReader extends Reader {\n    \tReader wrapped;\n    \tpublic ResettingReader(Reader reader) {\n    \t\twrapped = reader;\n    \t}\n    \tpublic int read(char[]buf, int off, int len) throws IOException {\n    \t\treturn wrapped.read(buf, off, len);\n    \t}\n    \tpublic void close() throws IOException {\n    \t\twrapped.reset();\n    \t}\n    \tpublic void reallyClose() throws IOException {\n    \t\twrapped.close();\n    \t}\n    }\n\n\n\n\npublic DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n     if (mlt.getFieldNames().length==1) {\n    \trawMLTQuery = mlt.like(reader, mlt.getFieldNames()[0]);\n      } else {\n        BooleanQuery mltQuery = new BooleanQuery();\n        ResettingReader reader2 = new ResettingReader(reader);\n        for (String fieldName : mlt.getFieldNames()) {\n      \t  BooleanQuery singleFieldQuery = (BooleanQuery)mlt.like(reader2, fieldName);\n      \t  for (BooleanClause clause : singleFieldQuery.getClauses()) {\n            mltQuery.add(clause);\n    \t  }\n        }\n        reader2.reallyClose();\n        rawMLTQuery = mltQuery;\n      }\n      ...\n\n "
        },
        {
            "author": "Kais Hassan",
            "id": "comment-14557727",
            "date": "2015-05-24T12:46:27+0000",
            "content": "Thanks Upayavira for your solution, I tried it with Solr 4.10 and it works well. I agree with Tommaso, this should be handled at the Lucene level. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-16365277",
            "date": "2018-02-15T09:14:25+0000",
            "content": "This issue is still present in all releases of Solr. When you use multiple mlt.fl fields and a text stream on input, only the first field is taken into account, with this comment in MoreLikeThisHandler:\n\n\n    public DocListAndSet getMoreLikeThis( Reader reader, int start, int rows, List<Query> filters, List<InterestingTerm> terms, int flags ) throws IOException\n    {\n      // analyzing with the first field: previous (stupid) behavior\n      rawMLTQuery = mlt.like(mlt.getFieldNames()[0], reader);\n\n\n\nIt is stupid and trappy, I'd like to fix it. If there are any reasons to keep this behavior for backward compatibility please let me know. I assume it's just a bug (prevents you from using mlt.qf, etc.). "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-16365298",
            "date": "2018-02-15T09:40:25+0000",
            "content": "My plan is to apply the stream (reader) to all fields expressed in mlt.fl. If there is one field, nothing changes. If multiple fields are provided, we have to buffer the reader and then pass the buffer's content to all requested fields, effectively extracting terms of interest. Some care must be taken to apply boosting properly (I'd create a parent Boolean query with sub-clauses for each field, they can preserve all their parameters: min matches, field-boosts, etc.). "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-16381978",
            "date": "2018-03-01T13:17:37+0000",
            "content": "I implemented support for multiple fields in the MLT handler. I also corrected the test which had bugs in it (expected exception block was not guarded and always falling through, effectively verifying nothing). I also cleaned up the code formatting a bit; this will obscure the patch slightly, but shouldn't be too bad.\n\nIf there are no objections, I'd like to commit it in soon. "
        },
        {
            "author": "Tommaso Teofili",
            "id": "comment-16382048",
            "date": "2018-03-01T14:18:55+0000",
            "content": "+1 thanks Dawid Weiss , the patch looks good to me ! "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16490477",
            "date": "2018-05-25T09:40:19+0000",
            "content": "Commit d2e9ad200802801423061fe6019c8e8c6dc1b62f in lucene-solr's branch refs/heads/branch_7x from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d2e9ad2 ]\n\nSOLR-5351: Fixed More Like This Handler to use all fields provided in mlt.fl when used with content stream. The similarity is calculated between the content stream's value and all fields listed in mlt.fl. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16490478",
            "date": "2018-05-25T09:40:21+0000",
            "content": "Commit 41ecad9897bb8949bfed730cd988aec58aa69775 in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=41ecad9 ]\n\nSOLR-5351: Fixed More Like This Handler to use all fields provided in mlt.fl when used with content stream. The similarity is calculated between the content stream's value and all fields listed in mlt.fl. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-16490479",
            "date": "2018-05-25T09:41:51+0000",
            "content": "Committing in to master and 7.4, sorry for the delay. "
        }
    ]
}