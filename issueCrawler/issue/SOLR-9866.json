{
    "id": "SOLR-9866",
    "title": "Reduce memory pressure for expand component",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "A client was having memory pressure issues when running queries with collapse and expand.\n\nI created a setup on my machine with dummy data to reproduce this. This ticket is concentrating just on the expand part as that's the top culprit according to some sampling I did with YourKit.\n\nStarted Solr using  - ./bin/solr start -p 8984 -m 4g and created a collection called \"ct\" ( collapse testing )\n\nThe indexing code below indexes 10M records. We have every 1 out of 10 documents as duplicates.\n\n\npublic void index() throws Exception {\n    HttpSolrClient client = new HttpSolrClient.Builder().withBaseSolrUrl(\"http://localhost:8983/solr\").build();\n\n    client.deleteByQuery(\"ct\", \"*:*\");\n    client.commit(\"ct\");\n\n    //Index 10M documents , with every 1/10 document as a duplicate.\n    List<SolrInputDocument> docs = new ArrayList<>(1000);\n    for(int i=0; i<1000*1000*10; i++) {\n      SolrInputDocument doc = new SolrInputDocument();\n      doc.addField(\"id\", i);\n      if (i%10 ==0 && i!=0) {\n        doc.addField(\"collapseField1_s\", i-1); //with docValues\n        doc.addField(\"collapseField1_s\", i-1); //without docValues\n      } else {\n        doc.addField(\"collapseField1_s\", i); //with docValues\n        doc.addField(\"collapseField1_s\", i); //without docValues\n      }\n      docs.add(doc);\n      if (docs.size() == 1000) {\n        client.add(\"ct\", docs);\n        docs.clear();\n      }\n    }\n    client.commit(\"ct\");\n  }\n\n\n\nI wrote a script to fire 3k such queries &fq={!collapse field=collapseField1}&expand=true&expand.rows=1000\n\nI enabled \"Object Allocation Recording\" on YourKit and I am attaching 2 sets screenshots: \n\n\tStock Solr 6.3 : For 1 query (original-1) and for the 3k queries (original-3k) and also GC logs during the 3k query run\n\tPatched Solr: For 1 query (patch-1) and for the 3k queries (patch-3k) and also GC logs during the 3k query run\n\n\n\nThe patch is nothing but tweaking the initial allocation sizes. I haven't fully verified if it's correct , but TestExpandComponent was happy",
    "attachments": {
        "patch-1.png": "https://issues.apache.org/jira/secure/attachment/12843343/patch-1.png",
        "original-gc.png": "https://issues.apache.org/jira/secure/attachment/12843342/original-gc.png",
        "SOLR-9866.patch": "https://issues.apache.org/jira/secure/attachment/12843346/SOLR-9866.patch",
        "original-3k.png": "https://issues.apache.org/jira/secure/attachment/12843341/original-3k.png",
        "original-1.png": "https://issues.apache.org/jira/secure/attachment/12843340/original-1.png",
        "patch-gc.png": "https://issues.apache.org/jira/secure/attachment/12843345/patch-gc.png",
        "patch-3k.png": "https://issues.apache.org/jira/secure/attachment/12843344/patch-3k.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-12-15T02:43:34+0000",
            "author": "Varun Thacker",
            "content": "The 1 query results looked promising but at 3k they look roughly the same. Maybe I sampled incorrectly for the 1 query test.\n\n\nSo this is still a beta stage of debugging the root cause. The client was load testing for 3k queries per second and one a similar dataset were seeing ~210GB/minute of freed memory in GC viewer as compared to ~50 without collapse and expand. \n ",
            "id": "comment-15750177"
        }
    ]
}