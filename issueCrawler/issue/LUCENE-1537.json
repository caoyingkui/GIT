{
    "id": "LUCENE-1537",
    "title": "InstantiatedIndexReader.clone",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "modules/other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "2.4",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "This patch will implement IndexReader.clone for InstantiatedIndexReader.",
    "attachments": {
        "LUCENE-1537.patch": "https://issues.apache.org/jira/secure/attachment/12399935/LUCENE-1537.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-02-10T18:38:32+0000",
            "content": "\n\tAdded InstantiatedIndexReader.clone method\n\tAdded TestIndicesEquals.testClone method\n\tI tried to remove the InstantiatedIndex requirement\nthat the incoming reader be optimized, though I ran \ninto errors, so backed out\n\n ",
            "author": "Jason Rutherglen",
            "id": "comment-12672354"
        },
        {
            "date": "2009-02-15T12:58:17+0000",
            "content": "I didn't try it out yet, but I have a few comments and questions on the patch:\n\n\nIndex: contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndexReader.java\n+  \n+  public Object clone() {\n+    try {\n+      doCommit();\n+      InstantiatedIndex clonedIndex = index.cloneWithDeletesNorms();\n+      return new InstantiatedIndexReader(clonedIndex);\n+    } catch (IOException ioe) {\n+      throw new RuntimeException(\"\", ioe);\n+    }\n+  }\n\nIndex: contrib/instantiated/src/java/org/apache/lucene/store/instantiated/InstantiatedIndex.java\n+\n+  InstantiatedIndex cloneWithDeletesNorms() {\n+    InstantiatedIndex clone = new InstantiatedIndex();\n+    clone.version = System.currentTimeMillis();\n+    clone.documentsByNumber = documentsByNumber;\n+    clone.deletedDocuments = new HashSet<Integer>(deletedDocuments);\n+    clone.termsByFieldAndText = termsByFieldAndText;\n+    clone.orderedTerms = orderedTerms;\n+    clone.normsByFieldNameAndDocumentNumber = new HashMap<String, byte[]>(normsByFieldNameAndDocumentNumber);\n+    clone.fieldSettings = fieldSettings;\n+    return clone;\n+  }\n\n\n\nPerhaps we should move deleted documents to the reader? It might be a bit of work to hook it up with term enum et c, but it could be worth looking in to. I think it makes more sense to keep the same instance of InstantiatedIndex and only produce a cloned InstantiatedIndexReader. It is the reader#clone we call upon so cloning the store sounds like a future placeholder for unwanted bugs.\n\n\n\nI see there are some left overs from your attempt to handle none  optimized readers:\n\n\n-    documentsByNumber = new InstantiatedDocument[sourceIndexReader.numDocs()];\n+    documentsByNumber = new InstantiatedDocument[sourceIndexReader.maxDoc()];\n \n     // create documents\n     for (int i = 0; i < sourceIndexReader.numDocs(); i++) {\n\n\n\nI think if you switch to maxDoc it should also use maxDoc int the loop and skip any deleted document. \n\n\n\n\n-    for (InstantiatedDocument document : getDocumentsByNumber()) {\n+    //for (InstantiatedDocument document : getDocumentsByNumber()) {\n+    for (InstantiatedDocument document : getDocumentsNotDeleted()) {\n       for (Field field : (List<Field>) document.getDocument().getFields()) {\n         if (field.isTermVectorStored() && field.isStoreOffsetWithTermVector()) {\n           TermPositionVector termPositionVector = (TermPositionVector) sourceIndexReader.getTermFreqVector(document.getDocumentNumber(), field.name());\n@@ -312,7 +325,15 @@\n   public InstantiatedDocument[] getDocumentsByNumber() {\n     return documentsByNumber;\n   }\n-\n+  \n+  public List<InstantiatedDocument> getDocumentsNotDeleted() {\n+    List<InstantiatedDocument> list = new ArrayList<InstantiatedDocument>(documentsByNumber.length-deletedDocuments.size());\n+    for (int x=0; x < documentsByNumber.length; x++) {\n+      if (!deletedDocuments.contains(x)) list.add(documentsByNumber[x]);\n+    }\n+    return list;\n+  } \n+  \n\n\n\nAs the source never contains any deleted documents this really doesn't do anything but consume a bit of resources, or?\n\n\n\n\n-    int maxVal = getAssociatedDocuments()[max].getDocument().getDocumentNumber();\n+    InstantiatedTermDocumentInformation itdi = getAssociatedDocuments()[max];\n+    InstantiatedDocument id = itdi.getDocument();\n+    int maxVal = id.getDocumentNumber();\n+    //int maxVal = getAssociatedDocuments()[max].getDocument().getDocumentNumber();\n\n\n\nIs this refactor just for debugging purposes? I find it harder to read than the original one-liner. ",
            "author": "Karl Wettin",
            "id": "comment-12673610"
        },
        {
            "date": "2009-02-17T19:20:35+0000",
            "content": "handle non-optimized readers\n\nWhy is it that the incoming reader must be optimized?  I did try to change this and ran into issues.\n\nPerhaps we should move deleted documents to the reader?\n\nThat makes sense.  Was there a reason to have it in both?\n\nIs this refactor just for debugging purposes\n\nIt is for debugging.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12674316"
        },
        {
            "date": "2009-02-17T19:23:31+0000",
            "content": "sorry, wrong issue  - reverted ",
            "author": "Uwe Schindler",
            "id": "comment-12674319"
        },
        {
            "date": "2009-07-14T18:38:56+0000",
            "content": "Karl/Jason are you still actively working on this one?  Should we push out? ",
            "author": "Michael McCandless",
            "id": "comment-12731036"
        },
        {
            "date": "2009-07-14T18:43:57+0000",
            "content": "Pushing it out ",
            "author": "Jason Rutherglen",
            "id": "comment-12731042"
        },
        {
            "date": "2011-01-24T21:16:52+0000",
            "content": "Won't be working on these and they're old ",
            "author": "Jason Rutherglen",
            "id": "comment-12986031"
        }
    ]
}