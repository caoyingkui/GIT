{
    "id": "SOLR-12010",
    "title": "Better error handling for Parallel SQL queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "Parallel SQL"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "master (8.0)",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "While building examples in Parallel SQL queries, we encountered strange error messages which didn't make sense unless you look deeply into the code, in my case, using debugger on source code to understand better.\n\ne.g. \n\ncurl --data-urlencode 'stmt=select emp_no_s,emp_no_s from salaries \n    group by emp_no_s\n    limit 10' http://localhost:8983/solr/employees/sql?aggregationMode=map_reduce\n\n\n\naggregate-field 'emp_no_s' is asked to group-by twice and hence this is runtime SQL error, while error message received in solr logs:\n\n\nCaused by: java.sql.SQLException: Error while executing SQL \"select emp_no_s,emp_no_s from salaries \n    group by emp_no_s\n    limit 10\": 1\n        at org.apache.calcite.avatica.Helper.createException(Helper.java:56)\n        at org.apache.calcite.avatica.Helper.createException(Helper.java:41)\n        at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:156)\n        at org.apache.calcite.avatica.AvaticaStatement.executeQuery(AvaticaStatement.java:218)\n        at org.apache.solr.client.solrj.io.stream.JDBCStream.open(JDBCStream.java:269)\n        ... 41 more\nCaused by: java.lang.ArrayIndexOutOfBoundsException: 1\n        at org.apache.solr.handler.sql.SolrTable.buildBuckets(SolrTable.java:559)\n        at org.apache.solr.handler.sql.SolrTable.handleGroupByMapReduce(SolrTable.java:445)\n        at org.apache.solr.handler.sql.SolrTable.query(SolrTable.java:135)\n        at org.apache.solr.handler.sql.SolrTable.access$100(SolrTable.java:64)\n        at org.apache.solr.handler.sql.SolrTable$SolrQueryable.query(SolrTable.java:859)\n        at Baz.bind(Unknown Source)\n        at org.apache.calcite.jdbc.CalcitePrepare$CalciteSignature.enumerable(CalcitePrepare.java:335)\n        at org.apache.calcite.jdbc.CalciteConnectionImpl.enumerable(CalciteConnectionImpl.java:294)\n        at org.apache.calcite.jdbc.CalciteMetaImpl._createIterable(CalciteMetaImpl.java:559)\n        at org.apache.calcite.jdbc.CalciteMetaImpl.createIterable(CalciteMetaImpl.java:550)\n        at org.apache.calcite.avatica.AvaticaResultSet.execute(AvaticaResultSet.java:204)\n        at org.apache.calcite.jdbc.CalciteResultSet.execute(CalciteResultSet.java:67)\n        at org.apache.calcite.jdbc.CalciteResultSet.execute(CalciteResultSet.java:44)\n        at org.apache.calcite.avatica.AvaticaConnection$1.execute(AvaticaConnection.java:630)\n        at org.apache.calcite.jdbc.CalciteMetaImpl.prepareAndExecute(CalciteMetaImpl.java:607)\n        at org.apache.calcite.avatica.AvaticaConnection.prepareAndExecuteInternal(AvaticaConnection.java:638)\n        at org.apache.calcite.avatica.AvaticaStatement.executeInternal(AvaticaStatement.java:149)\n        ... 43 more",
    "attachments": {
        "SOLR-12010.patch": "https://issues.apache.org/jira/secure/attachment/12911343/SOLR-12010.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-21T06:28:26+0000",
            "content": "Patch uploaded with no tests. WIP. ",
            "author": "Amrit Sarkar",
            "id": "comment-16371005"
        }
    ]
}