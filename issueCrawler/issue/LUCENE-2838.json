{
    "id": "LUCENE-2838",
    "title": "ConstantScoreQuery should directly support wrapping Query and simply strip off scores",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Especially in MultiTermQuery rewrite modes we often simply need to strip off scores from Queries and make them constant score. Currently the code to do this looks quite ugly: new ConstantScoreQuery(new QueryWrapperFilter(query))\n\nAs the name says, QueryWrapperFilter should make any other Query constant score, so why does it not take a Query as ctor param? This question was aldso asked quite often by my customers and is simply correct, if you think about it.\n\nLooking closer into the code, it is clear that this would also speed up MTQs:\n\n\tOne additional wrapping and method calls can be removed\n\tMaybe we can even deprecate QueryWrapperFilter in 3.1 now (it's now only used in tests and the use-case for this class is not really available) and LUCENE-2831 does not need the stupid hack to make Simon's assertions pass\n\tCSQ now supports out-of-order scoring and topLevel scoring, so a CSQ on top-level now directly feeds the Collector. For that a small trick is used: The score(Collector) calls are directly delegated and the scores are stripped by wrapping the setScorer() method in Collector\n\n\n\nDuring that I found a visibility bug in Scorer (LUCENE-2839): The method \"boolean score(Collector collector, int max, int firstDocID)\" should be public not protected, as its not solely intended to be overridden by subclasses and is called from other classes, too! This leads to no compiler bugs as the other classes that calls it is mainly BooleanScorer(2) and thats in same package, but visibility is wrong. I will open an issue for that and fix it at least in trunk where we have no backwards-requirement.",
    "attachments": {
        "LUCENE-2838.patch": "https://issues.apache.org/jira/secure/attachment/12467075/LUCENE-2838.patch",
        "LUCENE-2838-no-topscorer-opt.patch": "https://issues.apache.org/jira/secure/attachment/12467177/LUCENE-2838-no-topscorer-opt.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-12-30T13:05:49+0000",
            "content": "Cleaned up patch:\n\n\tremoved a useless testcase, no longer needed\n\tadded test for CSQ, that checks equals and hashCode\n\tcode cleanup\n\tjavadocs\n\n\n\nI will commit this if nobody objects to 3.x and trunk. About deprecating QWF we should discuss in separate issues, maybe we can merge Filter and Query before 4.0! ",
            "author": "Uwe Schindler",
            "id": "comment-12976034"
        },
        {
            "date": "2010-12-30T19:36:36+0000",
            "content": "After thinking one day about it, I found some problems with the \"collector hack\" and this style of decorator pattern:\n\n\tIf you wrap multiple times, the setScorer() method in the wrapped collector may set the wrong scorer (you see this, if you wrap multiple ConstantScoreQueries on top of each other, then the boost of the inner one is returned. The problem is that the score(Collector) method inverts the decorator pattern.\n\tThe inner scorer (like BoolenScorer with its buckets) may set a different scorer in the collector than itsself that implements doc() different, so setting the ConstantScorer always as collector's scorer can lead to wrong results (we dont see this in the test, as no collector uses Scorer.doc(), only Scorer.score(), which returns constant).\n\n\n\nI changed the code so CSQ now passes always topScorer=false to Weight.scorer() of the wrapped query and does not overwrite score(Collector,...) methods. It still allows out-of-order collection. Now BooleanScorer2 is always used with MTQs.\n\nThe question is, would the previous but broken optimization make sense for speed? Mike/Mark? ",
            "author": "Uwe Schindler",
            "id": "comment-12976091"
        },
        {
            "date": "2011-01-01T20:23:35+0000",
            "content": "Attached is the correct solution of ConstantScoreQuery with a scorer that supports topScorer and directly delegates hit collection to its wrapped scorer. This enables use of the bucket-using BooleanScorer instead of BooleanScorer2 for MTQs.\n\nThe test case verifies that the correct boosts are collected and queries wrapped two times with different boosts return the correct scores, too. ",
            "author": "Uwe Schindler",
            "id": "comment-12976445"
        },
        {
            "date": "2011-01-01T20:41:54+0000",
            "content": "Sorry last patch was outdated... ",
            "author": "Uwe Schindler",
            "id": "comment-12976446"
        },
        {
            "date": "2011-01-02T13:39:21+0000",
            "content": "I benchmarked the test (and wired the benchmark to use constant score boolean)...\nI think the changes are in the wind, but its definitely no slower... +1 from me.\n\nseparately, at some point we should open an issue to re-assess the cutoff criteria for constant score auto (maybe after the termstate thing).\nwe have been hacking on the boolean rewrites a lot and we want to make sure we default to the best performance! ",
            "author": "Robert Muir",
            "id": "comment-12976515"
        },
        {
            "date": "2011-01-02T13:48:21+0000",
            "content": "Committed trunk revision: 1054406\n\nNow backporting! ",
            "author": "Uwe Schindler",
            "id": "comment-12976517"
        },
        {
            "date": "2011-01-02T14:17:10+0000",
            "content": "Committed 3.x revision: 1054412\n\nThanks Robert for building heavy indexes and testing performance! ",
            "author": "Uwe Schindler",
            "id": "comment-12976522"
        },
        {
            "date": "2011-01-02T23:26:06+0000",
            "content": "separately, at some point we should open an issue to re-assess the cutoff criteria for constant score auto (maybe after the termstate thing).\n\n+1\n\nI've been wondering about those cutoffs for a while now...\n ",
            "author": "Michael McCandless",
            "id": "comment-12976574"
        },
        {
            "date": "2011-03-30T15:50:14+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013409"
        }
    ]
}