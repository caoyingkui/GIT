{
    "id": "SOLR-899",
    "title": "NullPointerException in ClientUtils.writeXML on NULL field value",
    "details": {
        "affect_versions": "1.3",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "This exception occurs if I have a field in a document with a null value.\n\njava.lang.NullPointerException\n\tat org.apache.solr.client.solrj.util.ClientUtils.writeXML(ClientUtils.java:117)\n\tat org.apache.solr.client.solrj.request.UpdateRequest.getXML(UpdateRequest.java:169)\n\tat org.apache.solr.client.solrj.request.UpdateRequest.getContentStreams(UpdateRequest.java:160)\n...\n\nPrevious versions of this class had a null check, which was subsequently removed. I have no problem with removing the previous null-check, as it seemed to \"hide\" a programming mistake (i.e. null values). However, I think that the exception that occurs here could at least be a bit more informative. Performing a null check and then throwing some sort of RuntimeException or IOException with a descriptive message would be very helpful. Such as \"Failure, NULL value for field named[foo] detected\".\n\nAlternatively, I think that an argument could be made that this NULL shouldn't have been allowed in the document in the first place. If that is the case, then NULL checks with similarly helpful messages could be performed upstream of this issue. I personally lean this way, as I prefer to find a programming mistake closer to the source of the issue. It allows me to find out exactly where the NULL was inserted in the first place.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Todd Feak",
            "id": "comment-12655394",
            "date": "2008-12-10T22:38:45+0000",
            "content": "For our use, I will be subclassing the SolrInputDocument class and putting null checks there. This avoids having to maintain a different version of this library. \n\nMy question is this, is putting the same null checks into the SolrInputDocument class itself a valuable solution? If so, I can create a patch and submit it here. Looking for feedback from the devs on whether or not this is a desirable solution. "
        },
        {
            "author": "Todd Feak",
            "id": "comment-12668646",
            "date": "2009-01-29T22:30:56+0000",
            "content": "I dug a bit more on this bug. I think the null check needs to be put back into ClientUtils.writeXML that was previously there.\n\nThis bit of code\n\nfor( Object v : field ) {\n        if (v instanceof Date) \n{\n          v = fmtThreadLocal.get().format( (Date)v );\n        }\n        if( boost != 1.0f ) \n{\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name, \"boost\", boost ); \n        }\n        else \n{\n          XML.writeXML(writer, \"field\", v.toString(), \"name\", name ); \n        }\n\n        // only write the boost for the first multi-valued field\n        // otherwise, the used boost is the product of all the boost values\n        boost = 1.0f; \n      }\n\nis vulnerable to an NPE if  the value of a field is null. The value of a field will only come back as null for a multi-valued field containing a null. This cannot be completely guarded against at the SolrInputDocument level, as it's impossible to tell if a field is multi-valued or not the first time it is put in.\n\nPatch coming soon. "
        },
        {
            "author": "Sami Siren",
            "id": "comment-13255539",
            "date": "2012-04-17T13:02:15+0000",
            "content": "This does not seem to be a problem with trunk version of solrj: I can add fields with null values and they are silently being ignored when the document is serialized without NPEs being thrown. "
        }
    ]
}