{
    "id": "SOLR-11236",
    "title": "Facet allow paging and make bucketSizeLimit as optional parameter",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "streaming expressions"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "6.6",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "FacetStream in streaming expression do not have paging capability and do not have the ability to retrieve all the facet.\n\nTo resolve the bucketSizeLimit to be optional: \n    1. The \"\\lucene-solr\\solr\\solrj\\src\\java\\org\\apache\\solr\\client\\solrj\\io\\stream\\FacetStream.java\" the constructor with StreamExpression parameters, comment out the checking of limit must be greater zero and when it is exception assign a negative value to bucketSizeLimit.\n    2. The method read() update the logic to \"if(index < tuples.size() && (index < bucketSizeLimit || bucketSizeLimit <= 0))\" \n\nTo add paging to facetStream:\n    1. create a private variable call startAt as int (dafault 0).\n    2. retrieve the value from StreamExpression variable and start the value to startAt.\n    3. overwrite the method writeMap from tupleStream and in the method in the try catch before the for loop. Set index with startAt and set bucketSizeLimit to bucketSizeLimit plus startAt if(bucketSizeLimit is a positive integer).",
    "attachments": {},
    "issue_links": {},
    "comments": []
}