{
    "id": "LUCENE-4043",
    "title": "Add scoring support for query time join",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/join"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Have similar scoring for query time joining just like the index time block join (with the score mode).",
    "attachments": {
        "LUCENE-4043.patch": "https://issues.apache.org/jira/secure/attachment/12526010/LUCENE-4043.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-08T17:19:59+0000",
            "content": "Draft patch. Added ScoreMode as parameter to JoinUtil#createJoinQuery(...).\n\nMaybe ScoreMode should be a public enum inside the join package. ",
            "author": "Martijn van Groningen",
            "id": "comment-13270623"
        },
        {
            "date": "2012-05-18T15:09:59+0000",
            "content": "Updated patch.\n\n\tStarted adding randomizing score mode in TestJoinUtil test class.\n\tMade ScoreMode a public enum in join package.\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13278849"
        },
        {
            "date": "2012-05-28T12:30:12+0000",
            "content": "Updated patch. \n\n\tFixed random tests.\n\tAdded support for explain.\n\tAdded ScoreMode support for documents that relate to more than one document.\n\n\n\nI think it is ready to be committed. ",
            "author": "Martijn van Groningen",
            "id": "comment-13284384"
        },
        {
            "date": "2012-05-28T14:37:42+0000",
            "content": "Patch looks great!\n\nYou don't need to use your own growFactor ... just call ArrayUtil.grow\ndirectly (it already oversizes under the hood for you).\n\nMaybe remove @throws IAE from createJoinQuery's javadocs?  (But, still\nthrow it... in case we add a new ScoreMode and forget to fix this\ncode, in the future).  Because today all ScoreMode enum values work...\n\nFix omitted to emitted in the comment on top of \"class MVInnerScorer\".\n\nProbably javadocs should somewhere explain about the \"first time doc\nis emitted it gets that score\"?\n\nMaybe explain added RAM requirements when scores are tracked in the\njavadocs?\n\nMaybe rename TermsWithScoreCollector.MV.Avg.ordScores -> .scoreCounts\n(and .scores -> .scoreSums?).\n\nCan we put back the non-wildcard imports? ",
            "author": "Michael McCandless",
            "id": "comment-13284417"
        },
        {
            "date": "2012-05-28T19:08:40+0000",
            "content": "Thanks for reviewing Mike! I've updated the patch.\n\nYou don't need to use your own growFactor ... just call ArrayUtil.grow directly (it already oversizes under the hood for you).\nSure. (I didn't release that the ArrayUtil#oversize() was doing this)\n\nMaybe remove @throws IAE from createJoinQuery's javadocs? (But, still throw it... in case we add a new ScoreMode and forget to fix this code, in the future). Because today all ScoreMode enum values work...\nMakes sense. We design it not to throw the exception. If the exception is thrown, then it is a bug.\n\nFix omitted to emitted in the comment on top of \"class MVInnerScorer\".\nDone.\n\nProbably javadocs should somewhere explain about the \"first time doc is emitted it gets that score\"?\nDone.\nMaybe explain added RAM requirements when scores are tracked in the javadocs?\nDone\n\n\nMaybe rename TermsWithScoreCollector.MV.Avg.ordScores -> .scoreCounts (and .scores -> .scoreSums?).\nDone.\n\nCan we put back the non-wildcard imports?\nDone. (IDE was trying to be smart... I'll change my settings...) ",
            "author": "Martijn van Groningen",
            "id": "comment-13284519"
        },
        {
            "date": "2012-05-28T19:32:26+0000",
            "content": "I still see one omitted   Otherwise this looks great: +1 to commit! ",
            "author": "Michael McCandless",
            "id": "comment-13284529"
        },
        {
            "date": "2012-05-28T21:15:17+0000",
            "content": "Oops... I see. I'll commit soon! ",
            "author": "Martijn van Groningen",
            "id": "comment-13284556"
        },
        {
            "date": "2012-05-29T21:04:58+0000",
            "content": "Committed to trunk and branch4x. ",
            "author": "Martijn van Groningen",
            "id": "comment-13285126"
        },
        {
            "date": "2013-01-17T10:13:08+0000",
            "content": "Hi, Is this possible to use in solr I tried setting \n{!scoreMode=Avg}\n, but it doesn't seem to have any effect. ",
            "author": "David vandendriessche",
            "id": "comment-13556033"
        },
        {
            "date": "2013-01-18T11:28:34+0000",
            "content": "Solr uses a different joining implementation. Which doesn't support mapping the scores from the `from` side to the `to` side. If you want to use the Lucene joining implementation you could wrap this in a Solr QParserPlugin extension.  ",
            "author": "Martijn van Groningen",
            "id": "comment-13557151"
        },
        {
            "date": "2013-01-21T14:32:26+0000",
            "content": "Could it be that you're JoinUtil doesn't clear a cache or something?(Could also be my code) My plugin always works once when I start Solr. It joins and gives good scores. The second query it always returns the same as the first one? After restarting Solr it works 1 time and then does the same.\n\npublic class TestParserPlugin extends ExtendedDismaxQParserPlugin {\n\n    @Override\n    public QParser createParser(String string, SolrParams sp, SolrParams sp1, SolrQueryRequest sqr) \n{\n\n        return new TestParserPlugin.TestParser(string, sp1, sp1, sqr);\n\n    }\n\n    @Override\n    public void init(NamedList nl) {\n    }\n\n\n    public class TestParser extends QParser {\n\n        public TestParser(String qstr, SolrParams localParams, SolrParams params, SolrQueryRequest req) \n{\n            super(qstr, localParams, params, req);\n        }\n\n        @Override\n        public org.apache.lucene.search.Query parse() throws org.apache.lucene.queryparser.classic.ParseException {\n            //IndexReader reader;\n            try \n{\n                //IndexSearcher searcher=req.getSearcher();\n                IndexSearcher searcher = req.getSearcher();\n                Query q = QParser.getParser(qstr, \"edismax\", req).getQuery();\n                return JoinUtil.createJoinQuery(\"pageId\", true, \"fileId\", q, searcher, ScoreMode.Max);\n            }\n catch (IOException ex) \n{\n                Logger.getLogger(TestParserPlugin.class.getName()).log(Level.SEVERE, null, ex);\n            }\n            return null;\n        }\n\n        @Override\n        protected void finalize() throws Throwable \n{\n            super.finalize();\n            req.close();\n        }\n\n\n    }\n\n\n\n\n} ",
            "author": "David vandendriessche",
            "id": "comment-13558797"
        },
        {
            "date": "2013-01-21T15:54:30+0000",
            "content": "I think this happens b/c the Query that the JoinUtil returns doesn't override the equals and hashcode method (See TermsIncludingScoreQuery). This should be fixed, otherwise this query can never be cached (this is what the SolrIndexSearcher does). Can you check if the following works:\n\nIndexSearcher searcher = new IndexSearcher(req.getSearcher().getIndexReader());\nreturn JoinUtil.createJoinQuery(\"pageId\", true, \"fileId\", q, searcher, ScoreMode.Max); \n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13558856"
        },
        {
            "date": "2013-01-21T16:07:55+0000",
            "content": "Same problem if I use:\nIndexSearcher searcher = new IndexSearcher(req.getSearcher().getIndexReader());\n\nI can't override the class since the constructor is private. This is probably to only use the static methods.\n\nI've used an output to see the hashcode and it stays the same. Can I change this behaviour somehow? ",
            "author": "David vandendriessche",
            "id": "comment-13558864"
        },
        {
            "date": "2013-01-22T09:00:28+0000",
            "content": "I got suggested to extend the Query class and return a Hash myself.\n\nMy query class contains:\n\n        @Override\n        public int hashCode() \n{\n            return q.toString().hashCode();\n        }\nIt seems to work now. ",
            "author": "David vandendriessche",
            "id": "comment-13559492"
        },
        {
            "date": "2013-01-27T20:19:35+0000",
            "content": "Hi David, I just committed LUCENE-4704. Query instances returned from JoinUtil will implement equals and hashcode in future versions. ",
            "author": "Martijn van Groningen",
            "id": "comment-13563917"
        },
        {
            "date": "2013-01-28T10:56:01+0000",
            "content": "Thanks alot!\n\nI'll try the patch when 4.2 get's released. ",
            "author": "David vandendriessche",
            "id": "comment-13564195"
        }
    ]
}