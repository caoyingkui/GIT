{
    "id": "SOLR-4877",
    "title": "SolrIndexSearcher#getDocSetNC should check for null return in AtomicReader#fields()",
    "details": {
        "affect_versions": "4.2,                                            4.3",
        "status": "Closed",
        "fix_versions": [
            "4.3.1",
            "4.4",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In LUCENE-5023 it was reported that composite reader contexts should not contain null fields() readers. But this is wrong, as a null-fields() reader may contain documents, just no fields.\n\nfields() and terms() is documented to return null, so DocSets should check for null (like all queries do in Lucene). It seems that DocSetNC does not correctly check for null.",
    "attachments": {
        "SOLR-4877-nospecialcase.patch": "https://issues.apache.org/jira/secure/attachment/12585373/SOLR-4877-nospecialcase.patch",
        "SOLR-4877.patch": "https://issues.apache.org/jira/secure/attachment/12585370/SOLR-4877.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13670094",
            "date": "2013-05-30T06:16:32+0000",
            "content": "Simple patch for getDocSetNC().\n\nI am not sure why there is this special handling of TermQuery, in my opinion, the if colause should go away and Solr should call the default TermScorer#collect(). There is nbo reason to have a special handling here (and no performance impact as TermScorer#collect is implemented the same way).\n\nWe should remove the special case here, any comments?! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13670095",
            "date": "2013-05-30T06:16:56+0000",
            "content": "Does anybody has an idea, how to test this bug? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13670106",
            "date": "2013-05-30T06:34:57+0000",
            "content": "Patch removing the special case for TermQuery.\n\nThe reson why this was here may be from older times: In Lucene 2.x, the collect method calculated the score of the Query, too. But since 3.x this is no longer the case, so there is no speed improvement by short-circuiting TermQuery. The original TermScorer/Collector code is identical. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13670273",
            "date": "2013-05-30T12:04:51+0000",
            "content": "I will commit the \"nospecialcase\" patch if nobody objects. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13670437",
            "date": "2013-05-30T16:00:24+0000",
            "content": "+1 "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13686934",
            "date": "2013-06-18T16:52:41+0000",
            "content": "Bulk close after 4.3.1 release "
        },
        {
            "author": "Feihong Huang",
            "id": "comment-13752047",
            "date": "2013-08-28T03:05:06+0000",
            "content": "hi, Uwe, \nI think the special handling of TermQuery just because of  performance impact. \nIf we use the default search function in lucene such as \"super.search(query,null,collector)\", \nit will create TermWeight for TermQuery to calculate  queryNorm(q)  and idf(t)2 * t.getBoost()  and so on.\n\nTherefore, i think the special handling of TermQuery is useful. Any comments? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13752158",
            "date": "2013-08-28T06:41:36+0000",
            "content": "Hi the calculation is not a problem at all, it is done one time in TermWeight. The statistics for the term have to be fetched in any case (as it is part of the term dictionary). If this would be a problem here, a lot of queries in Lucene like MultiTermQuery (NumericRangeQuery, TermRangeQuery, FuzzyQuery) would need to be optimized, too, because they don't calculate scores.  The reason why this special case was here is caused by older Lucene versions where the actual score per document was calculated by TermScorer although not requested. This was the performance impact, not the term statistics.\n\nIf you don't have a benchmark showing that fetching the term statistics for this case is affecting performance I would prefer the simplier code. "
        },
        {
            "author": "Feihong Huang",
            "id": "comment-13752179",
            "date": "2013-08-28T07:22:13+0000",
            "content": "Thanks for comments and it make sense. "
        }
    ]
}