{
    "id": "SOLR-555",
    "title": "Autogenerate \"user\" docs about \"plugins\" from code",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Our current strategy of using javadocs for \"developer\" documentation and the wiki for documenting \"user\" features only gets us so far \u2013 among other things, it makes it hard to include the \"user\" documentation in our releases, but it also results in a disconnect between when code changes and when documentation gets updated.\n\nin an ideal world, \"user\" documentation would live in the code right along side the implementation, just like with javadocs \u2013 but the standard set of information displayed by javadocs isn't very user friendly.  we should find a better way to allow us to \"edit\" the info about how to use a plugin right along side the code for that plugin and generate user friendly documentation from that.",
    "attachments": {
        "SOLR-555.patch": "https://issues.apache.org/jira/secure/attachment/12381287/SOLR-555.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12593675",
            "date": "2008-05-01T23:42:10+0000",
            "content": "For the past few months, I've spent a few hours a week playing around with the javadoc doclet and taglet APIs.  they are horrific to work with, but it cannot be denied: the ability to hook right into the javadoc process allows you to do some fairly powerful things.\n\nI've put together a new \"SolrPluginDoclet\" as well as a SolrInitParamTaglet and a SolrRunParamTaglet.  The Doclet allows us to use the javadoc command to generate \"user documentation\" containing scaled down information about all of the identified \"Solr Plugin\" APIs along with information about how to use all of the implementations of those APIs found in the code base.  The Taglets are used both by the SolrPluginDoclet when building the user docs, as well as by the standard javadoc doclet to output more structured information about initialization and request params that each type of plugin supports.\n\nThere are still a lot of improvements to be made (see todo list below) before i would really consider this ready for end users \u2013 not the least of which is actually documenting all of our plugins using these structured javadoc tags \u2013 but as a proof of concept i think it's pretty cool and worth pursuing.\n\nYou can see an example of what the generated docs currently look at the URLs below.  Note the DemoPlugin and DemoChildPlugin files in the patch which show off the custom taglet...\n\nTraditional javadocs with new taglet added...\n\n\thttp://people.apache.org/~hossman/tmp/SOLR-555/org/apache/solr/DemoPlugin.html\n\thttp://people.apache.org/~hossman/tmp/SOLR-555/org/apache/solr/DemoChildPlugin.html\n\n\n\nPlugin docs for User...\n\n\thttp://people.apache.org/~hossman/tmp/SOLR-555/plugins.html\n\thttp://people.apache.org/~hossman/tmp/SOLR-555/org.apache.solr.request.SolrRequestHandler.html\n\n\n\nTodo List...\n\n *  - change output to first include a summary TOC of all classes by section,\n *    then list the actual info (standardize section header sizes)\n *  - make classes link to their full javadocs\n *  - add css+example for certain things to not display on plugin docs, just\n *    on javadocs.\n *  - make each plugin link to a wiki page with the same name (and some\n *    common prefix)\n *  - rename init.param:solr.initparam and run.param:solr.param\n *  - change param taglet to use inline @solr.type instead of @link in\n *    specific position\n *    (hmm... this is really hard .. skip for now)\n *  - make param taglets more resilient and log errors if @link for type isn't\n *    found in expected spot (might be helped by previous item if @link is\n *    replaced with @solr.type)\n *  - add a taglet for handlers to list their devault components,\n *    list params from components as well.\n *  - improve the CSS for everything so it's nice and pretty\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12593712",
            "date": "2008-05-02T03:51:19+0000",
            "content": "\nbut as a proof of concept i think it's pretty cool and worth pursuing\n\nYes!  This looks great chris.  You discussed this a while back and I sort of ignored it as a real option (having messed with doclet configuration before)\n\nThanks for doing the leg work to get something working, "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12602681",
            "date": "2008-06-05T15:26:08+0000",
            "content": "idea from Bram de Jong on solr-user: include info on the default value for all params as well (why didn't I think of that?!?!?!) "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12602684",
            "date": "2008-06-05T15:32:55+0000",
            "content": "Hoss - have you tried XDoclet?   I'm not sure where the state of that project is, but I used to do a lot of work with it.  I even used it to generate an Ant task reference once upon a time.   Been a long long time since I've tinkered with it though, not sure if XDoclet2 is the better starting point or not either.  \n\nXDoclet can make generating stuff from Java code a lot easier than writing your own doclet.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12602792",
            "date": "2008-06-05T21:09:22+0000",
            "content": "Hoss - have you tried XDoclet?\n\nWhen i first started experimenting with this idea, i assumed a javadoc doclet would make the most sense .. then i tried making one, and i gave up because it has, by far, the worst \"API\" I've ever used in my life (caveat: i'm refering solely to Java APIs when i make that statements). So then i started looking at existing third party  javadoc doclets, hoping to find a nice one that would already extract all of the useful info into XML so i could use XSLT (there was one, but it's really old and couldn't handle some pretty basic stuff) and then i started looking at other technologies.  After experimenting with many of them, I went back and revisited the javadoc doclet approach: came to grips with the cluster f*ck of an API, ignoring the parts of it that were truly abhorent, and using only the core pieces that were really needed (my first attempt was trying to subclass the standard doclet to acutally incorperate the new pages into the existing javadoc navigation) which lead me to the current patch.\n\nXDoclet, XDoclet2, and QDox (the java parser that XDoclet2 uses) were all on that list of other technologies, i don't remember specifically why i decided not to go with them, but one of the broader issues with most alternate solutions was that since they used good APIs for doing things, they couldn't be hooked into normal javadocs \u2013 one of my goals is to try and get to the point where developers write one \"doc\" for each plugin, it lives in the code and is displayed both in the javadocs for the plugin, as well as in the scaled down \"user\" docs that this would generated.  generating \"user\" documentation about a plugin using something like XDoclet probably would have been easy \u2013 but to get the same information included in the \"developer\" javadocs would require just as much orthoginal Taglet work as i'm doing now \u2013 and simple things like \n{@link}\n tags in the body of a javadoc comment wouldn't work automaticly with XDoclet2 (at least: not as far as i can tell)\n\nXDoclet2 certianly seems like the best way to auto generate information from java code but for processing javadoc comments, i (unfortunately) couldn't find many solutions better then javadoc doclets and taglets. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12602853",
            "date": "2008-06-05T23:28:36+0000",
            "content": "some small improvements on the previous patch...\n\n\n\tall new files now live in a \"plugins/\" directory, so they don't pollute the top level javadocs dir.\n\tadded a \n{@solr.default}\n for indicating the default value of a solr param\n\tadded a table of contents to the top of each plugin page with relative links down to the details for each plugin Impl listed.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12610379",
            "date": "2008-07-04T00:05:47+0000",
            "content": "added a @solr.component taglet ... any info can be listed in it, and aqt minimum that info will show up in the javadocs (and the plugin docs) but if it contains a \n{@see classname}\n the first sentence summary of that class, and the Runtime Params for that \"component\" will be listed on the plugin docs as well.\n\nneed to figure out a clean way to make hyperlinking arround the plugin docs work ... wasn't really a big deal before since i was focusing on \"flat\" plugin docs (plugins directly listed all params inherited from their superclasses) but in the case of components you want just the summary of what the component does for people who are familiar with it; but for people that aren't, you want them to be able to click a link to learn more (without sending them to developer javadocs). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12610673",
            "date": "2008-07-05T02:23:48+0000",
            "content": "whoops ... last version was missing a file "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12614583",
            "date": "2008-07-18T00:25:38+0000",
            "content": "checkpoint\n\nincludes demo of component info, as well as new code that makes any @link or @see tag which refer to a plugin become a link to that plugin in the plugin docs (but still a link to the javadocs in the javadocs) ... this is kind of a hack right now because it uses static info about which classes are plugins .. just need some refactoring to pass that info along as appropriate. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12618897",
            "date": "2008-07-31T23:00:05+0000",
            "content": "same patch, just updated against trunk.\n\nI've also updated the generated docs for people to see what the generated doc structure looks like now with the \"components\" tag and the \"smart linking\" (if a @see or @link tag refers to a class that is a \"plugin\" link to it as a plugin, otherwise link to it's normal javadocs)\n\n\n\tlist of types of plugins: http://people.apache.org/~hossman/tmp/SOLR-555/plugins/\n\tlist of instances of a type of plugin: http://people.apache.org/~hossman/tmp/SOLR-555/plugins/org.apache.solr.request.SolrRequestHandler.html\n\tA specific instance: http://people.apache.org/~hossman/tmp/SOLR-555/plugins/org.apache.solr.request.SolrRequestHandler.html#org.apache.solr.DemoChildPlugin\n\tthe regular javadocs for the same class: http://people.apache.org/~hossman/tmp/SOLR-555/org/apache/solr/DemoChildPlugin.html\n\n\n\nSomething i didn't really make clear before is that the @solr.component tag isn't specific to the \"SearchComponent, it can refer to any class in the tree, and if that class defines some @solr.run.params they will be listed. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13604352",
            "date": "2013-03-16T18:41:35+0000",
            "content": "Hossman:\n\nIs there stuff worth keeping here? Doc improvement is really worthwhile, but this has lingered for a looong time. Or should we close it since it hasn't been touched in so long? "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15588943",
            "date": "2016-10-19T14:36:33+0000",
            "content": "Just as an update of the concept, I am able to get the Javadoc API to work and to generate http://www.solr-start.com/info/analyzers/ and http://www.solr-start.com/info/update-request-processors/ lists.\n\nThe challenges were that Javadoc plugins were actually broken in JDK 6 (I think) and were unusable. I got around that by using JDK 8, which is open-sourced and modifying the Javadoc source.....\n\nOnce that was done, information extraction itself is not too bad and I am actually using it to generate Solr Index for hosted Javadoc apart from the lists above.\n\nUnfortunately, in JDK 9, this will all break again, as the Javadoc is being rewritten and - at the moment - it cannot even process straight Lucene source JDK-8157611. "
        }
    ]
}