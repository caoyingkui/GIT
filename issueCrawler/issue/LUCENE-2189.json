{
    "id": "LUCENE-2189",
    "title": "Simple9 (de)compression",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "Simple9 is an alternative for VInt.",
    "attachments": {
        "LUCENE-2189a.patch": "https://issues.apache.org/jira/secure/attachment/12429321/LUCENE-2189a.patch",
        "Simple16Codec.java": "https://issues.apache.org/jira/secure/attachment/12430664/Simple16Codec.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-01-03T22:10:07+0000",
            "content": "I've started some work on Simple9, also known as S9. It works like this:\n\nA compressed 32-bit word contains 4 status bits and 28 data bits.\nThere are nine different ways of dividing up the 28\ndata bits: 28 1-bit numbers, 14 2-bit numbers, 9 3-bit numbers (one\nbit unused), 7 4-bit numbers, 5 5-numbers (three bits unused), 4\n7-bit numbers, 3 9-bit numbers (one bit unused), 2 14-bit numbers,\nor 1 28-bit number. The four status bits store which of the\n9 cases is used. Decompression can be done by doing a switch operation\non the status bits, where each of the 9 cases applies a \ufb01xed bit mask to\nextract the integers.\n\nI've used this paper:\nJiangong Zhang, Xiaohui Long, Torsten Suel,\n\"Performance of Compressed Inverted List Caching in Search Engines\",\nWWW 2008 / Refereed Track: Search - Corpus Characterization & Search\nPerformance, Beijing, China\n\nA decoder is working decently. The encoder still needs a bit of work,\nmostly because I initially assumed it would be ok to encode more numbers\nthan given. I'll post a patch later this week, hopefully with a better encoder.\n\nFrom the paper one can conclude that, when compared to VInt, Simple9 is useful for encoding:\n\n\tfrequencies and positions, (smaller compressed size, higher decompression speed)\n\texceptions for PFOR, as in LUCENE-1410, which is blocked by this issue.\n\n\n\nNo performance measurements yet, but comparing the code to the PFOR code\nsupports the view of the paper that Simple9 improves VInt, but will never be as good\nas PFOR.\n ",
            "author": "Paul Elschot",
            "id": "comment-12796034"
        },
        {
            "date": "2010-01-04T08:02:48+0000",
            "content": "Simple9 encoder/decoder and passing tests.\nThis 2189a patch still has a fixme at the encoder to not use more elements than given. ",
            "author": "Paul Elschot",
            "id": "comment-12796109"
        },
        {
            "date": "2010-01-04T08:11:10+0000",
            "content": "Just a comment on the switch:\nAs far as I know: Java switch statements are very fast if there are few cases and these cases are near together and therefore small numbers. I would suggest to not switch on the raw ANDed status, but better instead shift the status >>> 28 (and remove the &) and then only list the status values 0..9 in the switch statement. ",
            "author": "Uwe Schindler",
            "id": "comment-12796111"
        },
        {
            "date": "2010-01-04T08:14:35+0000",
            "content": "Here the explanation: http://java.sun.com/docs/books/jvms/first_edition/html/Compiling.doc.html ",
            "author": "Uwe Schindler",
            "id": "comment-12796112"
        },
        {
            "date": "2010-01-04T08:32:16+0000",
            "content": "About the switch: I had the shift down in there initially, but then I left it out for speed of decoding. I could move the status bits to the lower part so that the shift is not needed at all if that does not affect data decoding. I'll have a look at it. Thanks. ",
            "author": "Paul Elschot",
            "id": "comment-12796113"
        },
        {
            "date": "2010-01-05T19:59:03+0000",
            "content": "2010, Jan 5: this patch has a good encoder, and includes a good number of test cases for normal use. I also changed the decoder switch statement to use only small label values.\n\nStill to be tested: out of bounds situations for offsets, sizes and input element values,\nand performance comparisons with VInt and PFor. ",
            "author": "Paul Elschot",
            "id": "comment-12796822"
        },
        {
            "date": "2010-01-18T19:14:29+0000",
            "content": "Hi Paul,\n\nI have uploaded the version of the Simple16 I have. It is a old piece of code (I worked on it one year ago) which cannot be used directly for Lucene, and it looks less advanced than your version of Simple9. But maybe it could be interesting for you (for inspiration). ",
            "author": "Renaud Delbru",
            "id": "comment-12801906"
        },
        {
            "date": "2010-08-04T15:01:03+0000",
            "content": "It'd be best if the interface to Simple9/16 (and in general any variable sized int block encoder that we can tap into as a codec) were an incremental one.\n\nEG I could instantiate the encoder, then call .add(int value) to add a new value, which'd return maybe a boolean indicating that a new output block has been flushed/created as a result of adding that value.\n\nI'm trying to make a simple-to-reuse variable sized int block codec where we could just drop in Simple9/16/etc, and this incremental API would work well for this. ",
            "author": "Michael McCandless",
            "id": "comment-12895283"
        },
        {
            "date": "2010-08-21T18:06:05+0000",
            "content": "A variation on Simple9 in between VByte and PFOR \nto improve compression for position deltas.\n\nVByte is byte aligned, and Simple9 and PFOR are int aligned.\nFor decoding VByte uses a test on the high bit of each byte, and Simple9 and PFOR use\na selector value for a switch statement.\nThe variation discussed here is byte aligned, and uses a switch statement\non a selector value for decoding.\n\nFor position data (see the prx data posted in October 2008 at LUCENE-1410 for an example)\nVByte has two problems. VByte can encode data lengths of multiples of 7 bits quite well,\nbut for other numbers of bits the higher multiple of 7 has to be chosen\nand all remaining bits are unused.\nAlso there is some correlation between successive values, and this results\nin redundancies in the encoding bits of VByte.\nSo to improve the compression short series of 2-5 bits\nand 8-12 bits would be good, as well as short series of about 7 and 14 bits\nin order not to lose the strong parts of VByte.\n\nThe first question is then how long these short series should be.\nVByte currently encodes one number at a time, so one could try by using rather\nshort series of 2-4 numbers.\n\nTaking another look at the data at LUCENE-1410, one can see that for example\n3 times 11 bits would be quite effective, and these would fit in 5 bytes,\nbut Simple9 only has 4 bytes.\n\nOn the other hand, Simple9 has among others 2 times 14 and 4 times 7 bits in 4 bytes\nand those cases should not be lost when comparing to VByte.\n\nThat means that the number of bytes used to encode position data should be variable,\nin other words there should be some cases with 4 bytes, and some with 5 bytes.\nThe next question is then how many bits in the selector value (4 bits in Simple9)\nshould be dedicated to the number of bytes, and how many bits should be dedicated\nto the number of encoded values.\nThere are quite a few variations possible for that, and the following\none is worth discussing some more.\n\nI have called this compression method Simple4In36, and the name means that\nit can encode 1 to 4 values in 3 to 6 bytes. It uses 4 bits to select these\n16 cases, 2 bits for the number of encoded values, and 2 bits for the number of bytes.\n\nThe following table shows the field sizes in bits, ((8 * #bytes - 4) / #values)\nfor all these cases (the number of unused bits is in brackets):\n\n    #bytes  3      4      5   6\n#values\n1          20     28     36  44\n2          10     14     18  22\n3           6(2)   9(1)  12  14(2)\n4           5      7      9  11\n\n\n\nTo encode these cases, the encoder tries to use a minimal number of bytes\nfor the given input, and outputs the selector value and the input data into\nthe output bytes once no more input will fit.\nThe decoder does a switch statement on the selector value for the cases, and\neach case decodes the values with constant masks and shifts.\n\nCompared to the data bits of VByte, that only has multiples of 7 data bits, this\ntable shows quite a few cases with 9-12 bits, so there is good opportunity to save\nencoded data bits, and there are also cases for 7, 14, 22 (3*7+1) and 28 bits.\n\nComparing the encoding bits, Simple4In36 always uses 4, and VByte uses 1 per byte,\nso to improve on VByte, one would prefer to use 5 or 6 bytes in Simple4In36.\nFor proximity data the most frequent case would be 5 bytes with 3 values of 12 bits each,\nso that should improve compression.\n\nThat brings the question of why this table has a column for 3 bytes, and not one\nfor 7 bytes. The reason is the case of 3 bytes and 4 values of 5 bits each.\nVByte cannot get below 7 data bits for such small values, and I think this case\nwould help encoding stop words or other rather frequent terms.\nThis is also the area where PFOR should do well for very frequent terms,\nand cases smaller than 5 bits are probably better left to PFOR.\nLong gene data (four terms A, C, T, G) for example would be a good candidate for PFOR.\n\nSince there is no point in using fewer bytes than 3, the question is whether\nthe column with 6 byte cases could have been replaced by for example a row\nwith 5 encoded values. The main reason for that is that I would expect the\n6 byte cases with 3 values of 14 bits and 4 values of 11 bits to be effective\nfor sparse terms in longer documents. Also encoding more than 4 values will\naffect the compression ratio because all numbers should fit, and the maximum of these\nnumbers determines the field size, so each value smaller than the maximum\ntends to unused data bits in the fields.\n\nFor position data distributed as the data at LUCENE-1410 it does not make sense\nto use Simple4In36 to encode a single position. Nevertheless there is a row\nwith 1 value to be encoded. The reason for this is that when the first number\nhas too many data bits (more than 22 bits for Simple4In36) only a single number\ncan be encoded.\nTo allow (arbitrarily) long values to be encoded, the longest one of the cases\nfor 1 value could be extended to encode extra bits in the same way as VByte does:\nas long as the highest bit is set, there is another VByte of data available.\nFor efficient decoding of this case, the first bit of the data could be added\nto the selector value.\n\nAs for the decoding speed of Simple4In36 compared to VByte, I would expect\nthat a switch statement for the selector value of Simple4In36 takes about the\nsame time as 4 conditional jumps of VByte. That means that for the most frequent\ncases (o.a. 5 bytes, 3 values, 12 bit data) Simple4In36 should be somewhat\nfaster than VByte. For infrequent cases of 3 bytes and 3 or fewer numbers,\nSimple4In36 will be somewhat slower.\n\nMany variations on the theme of using some selector bits for the maximum number\nof encoded values and the rest for the number of bytes of encoded data are possible.\nFor example one could use one bit more in the selector to allow 8 values to be encoded,\nor to allow 2-9 bytes to be used.\nOne could also use one bit less in the selector and drop two\nof the columns for the numbers of encoded bytes, leaving for example only\nthe 4 and 5 byte cases.\nAdding or removing one bit in the selector however leaves an odd number of bits for the fields,\nso in many of these cases some data bits might be unused. A provision could be\nmade to encode some fields with one bit more to use these bits, but that would\nadd some complexity to the encoder. Simple4In36 has no unused bits\nexcept in 3 of the cases with 3 encoded numbers, so there is real no need to make\nsuch a provision.\nAdding two bits to the selector would allow 64 cases to be encoded. This would\nallow more decompression speed at the cost of the compression ratio.\nOne could also encode 63 cases (7*9) to allow 9 possibilities for the number of\nbytes and 1-7 for the values encoded, or the other way round. It is an open question\nwhether using this many bits for the selector is competitive with PFOR.\nPFOR without patching could be seen as a limit case.\n\nNo program code yet, just these design ideas. Any takers? ",
            "author": "Paul Elschot",
            "id": "comment-12901067"
        },
        {
            "date": "2010-11-04T09:25:11+0000",
            "content": "Any one test the performance of it?\na comparision of index size(frq file size) and decoding speeding with normal d-gap VINT   ",
            "author": "LiLi",
            "id": "comment-12928167"
        },
        {
            "date": "2010-11-04T09:37:05+0000",
            "content": "Any one test the performance of it?\n\nNot that I know of.\n\nSomeone needs to convert the Simple9/16 impl here to match the incremental API that VariableIntBlockCodec wants, ie provide a .add(int value), returning an int count of how many values were just flushed to the output.  Ie, it'd return a series of 0's and then suddenly like 7 indicating 7 values were just written.\n\nOnce we do that, it's trivial to make a codec out of it... ",
            "author": "Michael McCandless",
            "id": "comment-12928169"
        },
        {
            "date": "2010-12-19T11:47:33+0000",
            "content": "hao yan has posted a patch at LUCENE-1410 on 16 Dec 2010  that contains a Simple16 implementation. ",
            "author": "Paul Elschot",
            "id": "comment-12972964"
        },
        {
            "date": "2011-02-19T10:58:52+0000",
            "content": "Meanwhile a Simple64 implementation has become available, so the chance that there is real use for a Simple9 implementation has become very low. ",
            "author": "Paul Elschot",
            "id": "comment-12996753"
        }
    ]
}