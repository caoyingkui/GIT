{
    "id": "SOLR-8727",
    "title": "Limit Threadpools by default",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.2.1",
        "status": "Resolved",
        "resolution": "Duplicate",
        "priority": "Major"
    },
    "description": "Yesterday we had a problem in our prodution cluster, it was running out of native threads:\n\n\nnull:java.lang.RuntimeException: java.lang.OutOfMemoryError: unable to create new native thread\n\tat org.apache.solr.servlet.HttpSolrCall.sendError(HttpSolrCall.java:593)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:465)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:227)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:196)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:497)\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\n\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\n\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\n\tat java.lang.Thread.run(Unknown Source)\nCaused by: java.lang.OutOfMemoryError: unable to create new native thread\n\tat java.lang.Thread.start0(Native Method)\n\tat java.lang.Thread.start(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor.addWorker(Unknown Source)\n\tat java.util.concurrent.ThreadPoolExecutor.execute(Unknown Source)\n\tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.execute(ExecutorUtil.java:135)\n\tat java.util.concurrent.ExecutorCompletionService.submit(Unknown Source)\n\tat org.apache.solr.handler.component.HttpShardHandler.submit(HttpShardHandler.java:250)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:352)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2064)\n\tat org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:654)\n\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:450)\n\t... 22 more\n\n\n\nAfter digging a little bit through the source code I found several ThreadPools which a default maxCoreSize of Integer.MAX_VALUE. I think we should figure out a better default then this.\n\nGoing to create the corresponding pull reuquest on github for this.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-02-24T10:57:29+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user bjoernhaeuser opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/11\n\n    Limit threadpools by default to 128\n\n    Integer.MAX_VALUE could kill the VM instead of providing useful error\n    messages.\n\n    128 is a wild guess by myself. Let's discuss a good default value for\n    this \n\n    Jira: https://issues.apache.org/jira/browse/SOLR-8727\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/rebuy-de/lucene-solr limit-threadpools\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/11.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #11\n\n\ncommit cff552d1dc4e7bc7892d9521355c651c2ed2ad06\nAuthor: Bj\u00f6rn H\u00e4user <b.haeuser@rebuy.de>\nDate:   2016-02-24T10:44:09Z\n\n    Limit threadpools by default to 128\n\n    Integer.MAX_VALUE could kill the VM instead of providing useful error\n    messages.\n\n    128 is a wild guess by myself. Let's discuss a good default value for\n    this \n\n ",
            "id": "comment-15162809"
        },
        {
            "date": "2016-02-24T11:36:24+0000",
            "author": "Noble Paul",
            "content": "Integer.MAX_VALUE is definitely bad. 128 seems like a small value . BTW , it should also be possible to control it through a sys prop ",
            "id": "comment-15162859"
        },
        {
            "date": "2016-02-24T11:42:02+0000",
            "author": "Bj\u00f6rn H\u00e4user",
            "content": "How should that look like? I can add this to the PR  ",
            "id": "comment-15162868"
        },
        {
            "date": "2016-02-24T13:55:40+0000",
            "author": "Mark Miller",
            "content": "And this deals with distributed deadlock issues how? ",
            "id": "comment-15163020"
        },
        {
            "date": "2016-02-24T13:57:23+0000",
            "author": "Mark Miller",
            "content": "I think this is probably the right path for trying to deal with how many threads we currently have to allow: https://issues.apache.org/jira/browse/SOLR-7344 ",
            "id": "comment-15163024"
        },
        {
            "date": "2016-02-24T14:17:11+0000",
            "author": "Bj\u00f6rn H\u00e4user",
            "content": "Well, I was never aware of a problem of distributed locks in solr. So I was just aiming at the smallest possible fix to ensure that there are no threadpools which dont have a limit.\n\nAfter reading the linked issue I can see the problem which is imposed by limiting the threadpools. But I also would say that consuming as much threads as possible from the OS is also not good user behaviour. In this scenario (with the linked stack trace) I am not able to see the underlying problem. \n\nSure, most of the threadpools can be limited through configuration  \n\nShould we close this issue here and rather solve 7344? ",
            "id": "comment-15163047"
        },
        {
            "date": "2016-02-24T14:26:10+0000",
            "author": "Noble Paul",
            "content": "Yeah this could be marked as a duplicate of solr-7344 ",
            "id": "comment-15163064"
        },
        {
            "date": "2016-03-01T07:28:07+0000",
            "author": "Bj\u00f6rn H\u00e4user",
            "content": "Done  Thank you! ",
            "id": "comment-15173376"
        },
        {
            "date": "2016-03-01T21:44:32+0000",
            "author": "Mark Miller",
            "content": "But I also would say that consuming as much threads as possible from the OS is also not good user behaviour. \n\nIndeed, and we would like to limit the number of threads and connections used much more so than today - work in progress  Some complications abound. SOLR-7344 is close and should be a big step forward though. ",
            "id": "comment-15174465"
        },
        {
            "date": "2016-05-17T21:07:02+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user bjoernhaeuser closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/11 ",
            "id": "comment-15287554"
        }
    ]
}