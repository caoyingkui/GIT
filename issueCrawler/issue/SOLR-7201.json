{
    "id": "SOLR-7201",
    "title": "Implement multicore handling on HttpSolrClient",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "Now that SOLR-7155 has added a collection parameter to the various SolrClient methods, we can let HttpSolrClient use it to allow easier multicore handling.",
    "attachments": {
        "SOLR-7201.patch": "https://issues.apache.org/jira/secure/attachment/12703022/SOLR-7201.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-06T09:23:49+0000",
            "author": "Alan Woodward",
            "content": "Patch. ",
            "id": "comment-14350142"
        },
        {
            "date": "2015-03-06T15:21:32+0000",
            "author": "Shawn Heisey",
            "content": "With this change, would the URL to create HttpSolrClient objects change so that you would pass in the container app context instead of a core base URL?  If so, what happens if the object is created with a core URL?  Do we need setDefaultCollection in HttpSolrClient? ",
            "id": "comment-14350454"
        },
        {
            "date": "2015-03-06T15:28:58+0000",
            "author": "Alan Woodward",
            "content": "You can still create an HttpSolrClient pointing at a core, but core-specific queries won't work in that case.  I don't think we want to add setDefaultCollection here though.  The problem is, there's no way to know from just the passed-in URL string if we're pointing at the container app or at a specific core.\n\nI'll add some JavaDoc to the class explaining the different use-cases:\n\n\tcreate an HttpSolrClient pointing to a specific core (can't do core admin requests or requests to another core)\n\tcreate an HttpSolrClient pointing to the container app (can do core admin requests, all core-specific requests should use the core-specific request methods)\n\n ",
            "id": "comment-14350461"
        },
        {
            "date": "2015-03-06T15:44:44+0000",
            "author": "Shawn Heisey",
            "content": "Thanks for the update.\n\nI've been wondering whether the \"old\" methods should be deprecated.  It's clear that they can still be useful in some circumstances, but I think perhaps we should encourage people to use the new methods with \"null\" for the collection in those circumstances ... and explain everything as clearly as we can in the javadoc. ",
            "id": "comment-14350489"
        },
        {
            "date": "2015-03-06T15:55:52+0000",
            "author": "Alan Woodward",
            "content": "I've been wondering whether the \"old\" methods should be deprecated\n\nI wouldn't have thought so, they still work fine for lots of situations.  And forcing people to add a null parameter to their code all over the place is just ugly. ",
            "id": "comment-14350501"
        },
        {
            "date": "2015-03-06T16:11:55+0000",
            "author": "Shawn Heisey",
            "content": "And forcing people to add a null parameter to their code all over the place is just ugly.\n\nI agree with this, but I think the suggested forward migration path should be a situation where only the new methods are used, and every call will include a non-null string for collection.  Leaving out setDefaultCollection would encourage this as well, so that sounds like a good plan.  I think perhaps we should deprecate setDefaultCollection in CloudSolrClient as well, since it is not threadsafe and new functionality removes the need for it.\n\nDeprecation gives the developer a instant clue that they are not using the class in the way that the authors intended.  We can describe the design intent in the javadoc ... but deprecation gives an IDE user an immediate indicator that they should read that javadoc and change their code.\n\nI'm excited about this new functionality.  I'll be able to change code that currently creates sixty HttpSolrServer objects (56 for talking to individual cores, four for CoreAdminRequest functionality to the servers) so it only creates four HttpSolrClient objects. ",
            "id": "comment-14350518"
        },
        {
            "date": "2015-03-06T16:22:24+0000",
            "author": "Shawn Heisey",
            "content": "Further thoughts:  If we pursue deprecation, then the trunk code should probably throw an IllegalArgumentException when collection is null. ",
            "id": "comment-14350539"
        },
        {
            "date": "2015-03-09T11:57:18+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1665199 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1665199 ]\n\nSOLR-7201: HttpSolrClient can handle collection parameters ",
            "id": "comment-14352852"
        },
        {
            "date": "2015-03-09T12:14:21+0000",
            "author": "Alan Woodward",
            "content": "We can open another issue to talk about deprecations if needed. ",
            "id": "comment-14352871"
        },
        {
            "date": "2015-03-09T12:15:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1665203 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1665203 ]\n\nSOLR-7201: HttpSolrClient can handle collection parameters ",
            "id": "comment-14352872"
        }
    ]
}