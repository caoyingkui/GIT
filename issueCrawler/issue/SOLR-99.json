{
    "id": "SOLR-99",
    "title": "Allow default sort order",
    "details": {
        "affect_versions": "1.2",
        "status": "Closed",
        "fix_versions": [
            "1.2"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The current search throws an \"ArrayIndexOutOfBoundsException\" if you specify a sort field but do not include an order.  This is anoying and difficult to debug (when you are starting)\n\nHere is a patch to avoid the exception and use the default sort order if you only specify a field.  I'm not sure the 'null' case was even possible in the current code:\n\nIndex: QueryParsing.java\n===================================================================\n\u2014 QueryParsing.java\t(revision 494681)\n+++ QueryParsing.java\t(working copy)\n@@ -186,13 +186,12 @@\n       }\n\n       // get the direction of the sort\n\n\tstr=parts[pos];\n\tif (\"top\".equals(str) || \"desc\".equals(str)) \n{\n-        top=true;\n-      }\n else if (\"bottom\".equals(str) || \"asc\".equals(str)) \n{\n-        top=false;\n-      }\n  else {\n\treturn null;  // must not be a sort command\n+      // by default, top is true, only change it if it is \"bottom\" or \"asc\"\n+      if( parts.length > pos ) \nUnknown macro: {+    \t  str=parts[pos];+    \t  if (\"bottom\".equals(str) || \"asc\".equals(str)) {\n+\t         top=false;\n+\t      }       }",
    "attachments": {
        "DefaultSortOrder.patch": "https://issues.apache.org/jira/secure/attachment/12348610/DefaultSortOrder.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12463530",
            "date": "2007-01-10T11:18:44+0000",
            "content": "I apologize... the first version does not pass ConvertedLegacyTest.testABunchOfConvertedStuff()!\n\nThis second version rewrites most of parseSort() and passes the tests.\n\nI am a bit confused by the old parser because it seems to be handling a legacy paging system.  The javadocs show the sort formats as:\n\n\n\tExamples:\n\t<pre>\n\ttop 10                        #take the top 10 by score\n\tdesc 10                       #take the top 10 by score\n\tscore desc 10                 #take the top 10 by score\n\tweight bottom 10              #sort by weight ascending and take the first 10\n\tweight desc                   #sort by weight descending\n\theight desc,weight desc       #sort by height descending, and use weight descending to break any ties\n\theight desc,weight asc top 20 #sort by height descending, using weight ascending as a tiebreaker\n    *</pre>\n\n\n\nThis puts the \"count\" in the SortSpec.num field.\n\nSortSpec.getCount() is only called from:  SolrPluginUtils.doSimpleQuery().  Is this a mistake?  Isn't the count specified from rows=XXX?\n\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12463695",
            "date": "2007-01-10T20:17:10+0000",
            "content": "specifying the number of results to return as part of the sort information is in fact some fairly \"legacy\" behavior that we probably don't need to worry about supporting (i don't think anyone has ever used it in the history of Solar/Solr ... but in general i don't think the proper way to address this bug is to \"assume\" a default direction if all the user does is specify a field name ... mainly because i don't know that we can really assume a particular \"default\" ... failing with an error at query time definitely seems like the right behavior to me ... but we should certainly return a usefull eror message instead of an ArrayIndexOutOfBoundsException.\n\nIn the same way a query which can't be parsed cleanly generates a ParseException, a sort specification which can't be parsed cleanly should generate a ParseException (or soemthing like it) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12463702",
            "date": "2007-01-10T20:27:56+0000",
            "content": "The number was there because I originally thought about allowing a chain of sorts to narrow results, so you could do things like:\n\ngive me TVs with a 50\" screen or bigger, then take the bottom 50% by weight, then take the bottom 50% by depth, then give me the top 10 by review rating.\n\nexpressible by the following syntax:\n\ninches:[50 TO *]; weight bottom 50%; depth bottom 50%; rating top 10\n\nBut I never really got around to implementing that \n\nRelated bugs:  https://issues.apache.org/jira/browse/SOLR-9 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12463740",
            "date": "2007-01-10T22:43:35+0000",
            "content": "I agree that throwing a ParseException (ideally a SolrException with a code of 400) with a meaningful error message to help out the user is the right way to go. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12463813",
            "date": "2007-01-11T06:24:38+0000",
            "content": "\nOk, we all agree, that it should \n1. Throw a reasonable error if something goes wrong\n2. Throw an error if you sort on a non-indexed field (SOLR-9)\n\nI still think it should have a default sort order (SQL does) but as long as it does not throw an ArrayIndexOutOfBoundsException exception I am happy \n\nWhat should happen with the 'legacy' format?\na. leave it as is.  (perhaps add a comment for the next person who can't figure out what it does)\nb. get rid of it. \n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12464013",
            "date": "2007-01-11T21:00:38+0000",
            "content": "the problem with a default sort order (which ANSI SQL does wrong in my opinion) is that it can lead to \"buggy\" behavior without making it clear to the user what happened ... users can test their app, get results, and those results might look like they are in the correct order because of the nature of the data (ie: they sort by popularity and all documents currently have no popularity because their application isn't live yet) and only later do they discover that it's acctually \"defaulting\" and the default isn't what they want.\n\nas for the legacy format: if it's not hurting anything, i don't see any reason to remove it.  if it's easy to catch the ArrayIndexOutOfBoundsException and rethrow a better aexception without gutting the legacy parsing code, we might as well leave it in.\n\nif that parsing code is buggy and would require a lot of additional work to get it's parsing/error handling equally robust, then purning it is probably fine. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12464052",
            "date": "2007-01-11T23:46:05+0000",
            "content": "I just attached a new version.  It throws an exception when:\n1) missing sort order\n2) sort on unindexed field (SOLR-6)\n3) sort on a field it can not find\n\nIt does not assume a default sort order.\n\nI added some tests.  I did not see any general way to test stuff that should throw exceptions, so i added assertQEx() to AbstractSolrTestCase.\n\nI added the tests to ConvertedLegacyTest because that is where the other stuff testing sorting happens.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12464053",
            "date": "2007-01-11T23:48:05+0000",
            "content": "oops, by SOLR-6, i really mean SOLR-9\n\nI appologize in advance for my dyslexia.  Thank goodness for compilers! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12464378",
            "date": "2007-01-12T22:51:26+0000",
            "content": "Committed.  Thanks Ryan! "
        }
    ]
}