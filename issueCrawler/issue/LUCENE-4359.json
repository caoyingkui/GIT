{
    "id": "LUCENE-4359",
    "title": "Allow DocValues to be unstored",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "6.0",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Lucene trunk currently forces DocValues to be stored:\n\n\tFieldType.setDocValueType sets stored to true,\n\tDocFieldProcessor.processDocument handles DocValues in a for (StorableField field: docState.doc.storableFields()) loop, meaning that DocValues won't be consumed if they are not stored.",
    "attachments": {
        "LUCENE-4359.patch": "https://issues.apache.org/jira/secure/attachment/12543722/LUCENE-4359.patch",
        "LUCENE-4359_test.patch": "https://issues.apache.org/jira/secure/attachment/12543705/LUCENE-4359_test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-04T16:32:20+0000",
            "content": "Nice catch: I think this is related to LUCENE-4349, in that we should treat DocValues differently (neither stored nor indexed, its just its own thing) ",
            "author": "Robert Muir",
            "id": "comment-13447796"
        },
        {
            "date": "2012-09-04T17:01:45+0000",
            "content": "just adding a test: i ran into another bug (i think i saw this on the issue tracker, will look) that confused me for a second, as my test initially passed with assertNull(document.get(\"dv\")):\n\n\ndoc 0\n  numfields 2\n  field 1\n    name dv\n    type long\n    value 0\n  field 0\n    name docId\n    type string\n    value 0\n\n\n\nThis second bug is in Document/StoredDocument for numeric fields:\n\n   /** Returns the string value of the field with the given name if any exist in\n    * this document, or null.  If multiple fields exist with this name, this\n    * method returns the first value added. If only binary fields with this name\n    * exist, returns null.\n    * For {@link IntField}, {@link LongField}, {@link\n    * FloatField} and {@link DoubleField} it returns the string value of the number. If you want\n    * the actual numeric field instance back, use {@link #getField}.\n    */\n   public final String get(String name) {\n     for (StorableField field : fields) {\n       if (field.name().equals(name) && field.stringValue() != null) {\n         return field.stringValue();\n       }\n     }\n     return null;\n   }\n\n\n\nIt clearly does not return the string value of a number for numeric fields. Ill separate this into another issue (or reuse the existing one if i find it) ",
            "author": "Robert Muir",
            "id": "comment-13447813"
        },
        {
            "date": "2012-09-04T18:56:05+0000",
            "content": "here's a patch. it doesn't fix all the issues but I think we should commit it.\n\nI think its really confusing that setDocValuesType sets stored as a side effect. ",
            "author": "Robert Muir",
            "id": "comment-13447945"
        },
        {
            "date": "2012-09-04T19:05:25+0000",
            "content": "+1 ",
            "author": "Michael McCandless",
            "id": "comment-13447951"
        },
        {
            "date": "2012-09-04T21:46:36+0000",
            "content": "Robert, thanks for fixing this issue so quickly! ",
            "author": "Adrien Grand",
            "id": "comment-13448090"
        }
    ]
}