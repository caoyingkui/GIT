{
    "id": "SOLR-1603",
    "title": "Perl Response Writer",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "Response Writers"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "I've made a patch that implements a Perl response writer for Solr.\n\nIt's nan/inf and unicode aware.\n\nI don't know whether some fields can be binary but if so I can probably extend it to support that.",
    "attachments": {
        "SOLR-1603.patch": "https://issues.apache.org/jira/secure/attachment/12426141/SOLR-1603.patch",
        "SOLR-1603.2.patch": "https://issues.apache.org/jira/secure/attachment/12431715/SOLR-1603.2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Simon Rosenthal",
            "id": "comment-12782605",
            "date": "2009-11-25T20:35:02+0000",
            "content": "I'd be curious to know what the use case is for this - I've used the both JSON and XMLWriters to write results for a Perl web application with few problems.\n "
        },
        {
            "author": "Claudio Valente",
            "id": "comment-12782694",
            "date": "2009-11-26T00:20:32+0000",
            "content": "I guess the use case is analogous to the use cases for the python, php, phps and ruby output writers. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12805186",
            "date": "2010-01-26T20:36:54+0000",
            "content": "I realize this is analogous to the python, php, and ruby writers, but while i can't speak much to how those (language) communities feel about evaling \"code\" from remote sources to generate data structures, i know that the majority of the Perl community considers that a bad practice ... it's the reason things like YAML was created: to allow simple serialization w/o needing to execute \"untrusted\" code.\n\nSo i'm a little leery about adding this (beyond my general leeryness of adding code w/o tests). "
        },
        {
            "author": "Claudio Valente",
            "id": "comment-12805977",
            "date": "2010-01-28T16:39:55+0000",
            "content": "Evaluating code from a foreign string is always a security risk and as far as I know is certainly discouraged in python, perl and php (I suppose ruby too but I don't have enough info).\n\nThat's why in python 2.6 the ast.literal_eval was added http://docs.python.org/library/ast.html#ast.literal_eval\n\nUp until that version there was no \"safe\" way to recover the structures returned from solr's python response writer apart from using eval or parsing the string yourself. In fact, even the python bindings to solr I know of use the XML writer.\n\nphp and ruby writers suffer from the same problems and I'm not aware of any mitigating approach such as ast.literal_eval for python.\n\nEven phps (built with the purpose to share data in this way) can crash php, cause massive memory allocations and even result in code injection.\n\nFollowing your reasoning (and I'm not questioning its validity) the python, ruby, php and even phps response writers should be removed or at the very least shouldn't have been added to the tree.\n\nAs for tests, I tried to make some but found none except for JSON and phps  writers. These are seriously lacking (only test minimal serialization without taking into account indentation and no unicode for example). Since there were no tests for python, ruby nor php (only phps) writers I thought these weren't mandatory. If these tests exist, please show me where so that I can get a feel on what I'm supposed to do here.\n\nIf the JSON test is the usual example for this kind of test then I can write an analogous one for the perl writer but given its naivet\u00e9 I don't think it will add much. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12806009",
            "date": "2010-01-28T18:06:23+0000",
            "content": "I'm aware of the risk of eval'ing untrusted strings, but I'm not sure how this could be a problem with a Solr response.  Can someone provide an example of how a Solr response in any of these formats could be problematic security-wise?  \n\nAll strings are escaped, so code within a string value of a field would still eval only to a string, and would only execute if that string got eval'd.\n "
        },
        {
            "author": "Claudio Valente",
            "id": "comment-12806016",
            "date": "2010-01-28T18:29:46+0000",
            "content": "Network corruption or malicious tampering with data (from Solr to the client) could result in injected code being executed.\n\nAll I'm trying to say is that this is by no means a new concern for the perl output writer alone.\n\nIf you do need tests to merge this please read my paragraph regarding that and tell me whether there are others that I'm missing. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12806084",
            "date": "2010-01-28T20:48:06+0000",
            "content": "First, some history and motivation from my POV:\nThe original goal was JSON... but it was just so close to some other interpreted languages like Python, that I implemented that too since it was almost free.  That, and I've been a long-time python user, but at the time I don't think any JSON libs were bundled, and if any XML libs were bundled, I had never used them.  I did know how to \"eval()\" though - nice and simple.  And then Ruby was a hot language, so I did that too because I thought some of those guys might appreciate it.\n\nSecurity: when talking to Solr, the client is in control of what format is returned - if you are talking to trusted servers, use whatever format you want.  If you're hitting some remote server on the internet somewhere that you don't have control over, don't trust it period.  Don't even trust the data from it.  If people are feeding you malicious data, it's not like switching to JSON or XML will magically fix the security issues anyway.  The vast majority of Solr clients talk directly to trusted solr servers... this isn't an issue for most people.\n\nTests: yes, I got lazy.  It's actually very hard to do a good test for this stuff w/o making the tests too fragile.  I tested by hand via cut-n-paste and eval() in a real target interpreter.\n\nUsefulness: I still use the python format all the time, for the simple reason that since that character set of a python script wasn't well defined at the time, I stuck to ASCII and used unicode escape sequences for everything else.  When I suspect charset issues now, I automatically go to the python response format to see what the actual numeric values are of anything outside ASCII.\n\nBottom line: will perl people like this or not?  If so, put it in, it's small! "
        },
        {
            "author": "Claudio Valente",
            "id": "comment-12806090",
            "date": "2010-01-28T21:08:12+0000",
            "content": "Thanks for the history.\n\n\"If people are feeding you malicious data, it's not like switching to JSON or XML will magically fix the security issues anyway.\"\n\nYes, agree but it will make code injection a lot harder though theoretically possible.\n\nOne of the main reasons I use it is also due to unicode strings. This output writer makes this problems go away for perl since it uses the right escapes and unicode strings end with the utf8 bit set.\n\nThe patch is small and has virtually no impact on current code.\n\nIf you need something else don't hesitate to let me know.\n\nThanks for the comments. "
        },
        {
            "author": "Simon Rosenthal",
            "id": "comment-12806097",
            "date": "2010-01-28T21:24:41+0000",
            "content": "\nCouldn't build Solr with the current patch (against trunk). probably because the package for ResponseWriters was changed recently to org.apache.solr.response; "
        },
        {
            "author": "Claudio Valente",
            "id": "comment-12806148",
            "date": "2010-01-28T23:19:10+0000",
            "content": "New version after refactoring of Solr source. "
        },
        {
            "author": "Simon Rosenthal",
            "id": "comment-12806586",
            "date": "2010-01-30T00:59:02+0000",
            "content": "\nThe patch installed fine.\n\n+1 for committing it.\n\nthe output is a complex Perl data structure with search results which would presumably immediately be assigned to a variable - not eval'd.  Absolutely agree with Erik and Yonik - I can't think of a realistic case in which this would present a security risk. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12806616",
            "date": "2010-01-30T02:36:10+0000",
            "content": "\n\nthe output is a complex Perl data structure with search results which would presumably immediately be assigned to a variable - not eval'd.\nAbsolutely agree with Erik and Yonik - I can't think of a realistic case in which this would present a security risk.\n\nThe only way (i know of) to utilize a string based representation of a data structure like this in perl is using eval to convert it from a string representation to the intended data structures...\n\nI'm aware of the risk of eval'ing untrusted strings, but I'm not sure how this could be a problem with a Solr response.\n\n...The issue is that If you have a network service whose output format is only useful when \"eval\"ed by the client, then even if that service only ever produces serialized data (and not serialized code) it still opens the client up to man in the middle attacks where a malicious server can generate a response that does include malicious code, and that code is executed by the client ... man in the middle attacks of something like XML that provide tainted data are bad enough, but the possibility of tainted code is really sketchy.\n\nAs i said before: i'm not making any statements about this patch being more/less safe then any of the other existing response writers that are only useful when \"eval\"ed in a particular language interpreter \u2013 my point was that while I have never had any clear notion about how/when evaling strings from an external source was considered \"acceptable\" in those language communities (the example of python's literal_eval is a good one), I am a heavy perl user, and i do know that the Perl community as a whole actively discourages using eval to deserialize \"perl\" from remote services \u2013 this is precisely why things like YAML and the Storable API were created.  Both have options to control how they should behave if/when code is encountered in the serialized data.\n\nI can see value in adding an output format designed to be trivially useful for perl, but i don't feel comfortable advertising something for Perl users that directly violates Perl best practices \u2013 Particularly when we already have two writers that are fairly easy to use from perl anyway (XML and JSON)\n\n "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15517405",
            "date": "2016-09-23T19:52:34+0000",
            "content": "This issue is 6+ years without comments, so I'm gonna close it as won't fix for now. If you still feel strongly that Solr needs a perl response writer, feel free to reopen and continue the discussion  "
        }
    ]
}