{
    "id": "SOLR-2175",
    "title": "DIH needs Mock (or real in-memory) JDBC/Mail impls for tests... especially JDBC",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Test",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "contrib/dih has some @Ignored tests because there is no in-memory or mock database/mail server:\n\n\n    [junit] ------------- ---------------- ---------------\n    [junit] Testsuite: org.apache.solr.handler.dataimport.TestJdbcDataSource\n    [junit] Tests run: 3, Failures: 0, Errors: 0, Time elapsed: 0.034 sec\n    [junit]\n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: Ignoring test method 'testBasic': Needs a Mock database server to work\n...\n    [junit] Testsuite: org.apache.solr.handler.dataimport.TestMailEntityProcessor\n    [junit] Tests run: 0, Failures: 0, Errors: 0, Time elapsed: 0.038 sec\n    [junit]\n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: Ignoring test method 'testConnection': Needs a Mock Mail Server to work\n    [junit] NOTE: Ignoring test method 'testRecursion': Needs a Mock Mail Server to work\n    [junit] NOTE: Ignoring test method 'testExclude': Needs a Mock Mail Server to work\n    [junit] NOTE: Ignoring test method 'testInclude': Needs a Mock Mail Server to work\n    [junit] NOTE: Ignoring test method 'testIncludeAndExclude': Needs a Mock Mail Server to work\n    [junit] NOTE: Ignoring test method 'testFetchTimeSince': Needs a Mock Mail Server to work\n    [junit] ------------- ---------------- ---------------\n\n\n\nOne way to improve this would be to use something like apache derby for tests to make little databases and test against.\n\nAdditionally, looking thru JIRA there are a lot of JDBC-related issues and once something like this is setup,\nI think things could improve without introducing more bugs.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-12922594",
            "date": "2010-10-19T15:42:58+0000",
            "content": "we could bundle HSQLDB for an internal test-only database [if java6, alternatively Apache Derby is bundled with the JDK in some cases - but derby always creates files on disk]. We could then use it to fill a database. Ideally we should simply provide the HSQLDB dump output in the tests/resources folder (which contains of tons of CREATE TABLE, INSERT,...) statements that on-the-fly build the database in memory. After that we run the tests and release the JDBC driver again. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12922600",
            "date": "2010-10-19T15:53:12+0000",
            "content": "we could bundle HSQLDB for an internal test-only database [if java6, alternatively Apache Derby is bundled with the JDK in some cases - but derby always creates files on disk]\n\nYes, I'm a big fan of HSQLDB (never really used Derby). \nBut either one is fine with me, since currently we are not really testing JDBC at all...\n\nif someone knows Derby and wants to implement a patch, \nas long as it uses TEMP_DIR its just great if it creates relatively small files on disk in tests. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12922675",
            "date": "2010-10-19T19:13:38+0000",
            "content": "\"example/example-DIH\" already includes the hsqldb jar and a sample hsqldb (on disk) that the \"db\" core indexes as a demo.\n\nthat could be repurposed as a test (either via refactoring, or along the lines of the existing \"example\" tests that actually verify the example works correctly by spinning up jetty) "
        }
    ]
}