{
    "id": "LUCENE-8280",
    "title": "Repeatable failure for GeoConvexPolygons",
    "details": {
        "components": [
            "modules/spatial3d"
        ],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "6.7",
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "Reproduce with:\n\n\nant test  -Dtestcase=TestGeo3DPoint -Dtests.method=testGeo3DRelations -Dtests.seed=1F49469C1989BC0 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=fr-BE -Dtests.timezone=Europe/Malta -Dtests.asserts=true -Dtests.file.encoding=Cp1252",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16454359",
            "author": "ASF subversion and git services",
            "content": "Commit 08cf263132977fdc620880865a07bfcf43d7530c in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=08cf263 ]\n\nLUCENE-8280: Add a test for the case the automation found. ",
            "date": "2018-04-26T15:04:14+0000"
        },
        {
            "id": "comment-16454361",
            "author": "ASF subversion and git services",
            "content": "Commit 99605431613c3a260ce7f8e9957f5966e56594a5 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9960543 ]\n\nLUCENE-8280: Add a test for the case the automation found. ",
            "date": "2018-04-26T15:05:32+0000"
        },
        {
            "id": "comment-16454362",
            "author": "ASF subversion and git services",
            "content": "Commit 03251de94654a87a1808ec21688a2cf403c53383 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=03251de ]\n\nLUCENE-8280: Add a test for the case the automation found. ",
            "date": "2018-04-26T15:06:00+0000"
        },
        {
            "id": "comment-16454368",
            "author": "Karl Wright",
            "content": "I committed the test with an @AwaitsFix annotation.\n\nThe original failure finds a number of documents where the polygon says they should be inside but the bounds disagrees.  Because it's not just one, I'm inclined to think that we have one of two things happening:\n\n(1) The bounds is wrong.\nOR\n(2) The secondary (backup) test point's \"in-set\" status is being computed incorrectly, so all \"isWithin\" operations that require it fail.\n ",
            "date": "2018-04-26T15:09:20+0000"
        },
        {
            "id": "comment-16454378",
            "author": "Karl Wright",
            "content": "I was able to rule out possibility (2), so it really just has to be the bounds computation. ",
            "date": "2018-04-26T15:15:25+0000"
        },
        {
            "id": "comment-16454384",
            "author": "Ignacio Vera",
            "content": "I think the problem is that the intersection point is on an edge of the polygon. ",
            "date": "2018-04-26T15:19:12+0000"
        },
        {
            "id": "comment-16457209",
            "author": "Karl Wright",
            "content": "Ignacio Vera, an intersection point on the edge of the polygon is automatically \"in-set\", so that is not a problem.\n\nHave you plotted this polygon?  There's an edge that goes from (lat=-0.25, lon=-PI) -> (lat=-0.40, lon=0), as well as another edge intersection at (lat=-0.91, 0).  Therefore, it looks to me like there's quite a likelihood that this polygon overlaps itself, at least glancingly.  I'm not sure how the complex polygon code behaves under those conditions frankly.\n\nI've verified that the bounds look correct.\n\nWhat isn't correct is the decision that the point is actually \"in set\".  It's clearly not. ",
            "date": "2018-04-27T23:27:11+0000"
        },
        {
            "id": "comment-16457263",
            "author": "Karl Wright",
            "content": "Ignacio Vera, whether the polygon crosses itself turns out to not be germane to the failing isWithin() result.  The travel plane goes nowhere near the questionable area.  But it is right on top of one of the edges. ",
            "date": "2018-04-28T00:37:30+0000"
        },
        {
            "id": "comment-16457265",
            "author": "Karl Wright",
            "content": "Here's the debugging output for the problematic leg, where we go from the in-set intersection point, to the out-of-set check point.  Note that we actually do run into the place where the polygon almost crosses itself, but we don't detect a crossing there.\n\nWe do properly detect an \"exit\" on one side from the travel plane.  But since there's no entrance on the other side, we don't consider that a crossing.\n\nI think that there's a flaw in the logic when we start at a point already known to be on an edge.  Any exit, either side, should count as a crossing in that case.  But let me think this through carefully before I change anything.\n\n\n   [junit4]   1>  Finding whether [-0.9876510422569805,-1.2095236875745584E-16,0.16311061810965483] is in-set, based on travel from [X=-0.6376117950289407, Y=-1.2095236875745584E-16, Z=-0.7692219331120902] along [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16] (value=-1.2095236875745584E-16)\n   \n   [junit4]   1>  Edge [[lat=2.4457272005608357E-47, lon=-0.6244585784444767([X=0.8121874885299789, Y=-0.5853122613567737, Z=2.448463612203698E-47])] --> [lat=-0.914670478121684, lon=2.4457272005608357E-47([X=0.609446252447186, Y=1.4905392768899487E-47, Z=-0.7915752112532345])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   There are no intersection points within bounds.\n   [junit4]   1>    Endpoint(s) of edge are on travel plane!\n   [junit4]   1>  Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   Above crossings: 0; below crossings: 0\n   \n   [junit4]   1>  Edge [[lat=-0.737919215699403, lon=-1.0814374159521924([X=0.34764272191418555, Y=-0.6527705659008658, Z=-0.6724777381306498])] --> [lat=-0.2581712131420987, lon=-3.141592653589793([X=-0.9677277372221494, Y=-1.1851246758352164E-16, Z=-0.2555423342455023])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   There were intersection points!\n   [junit4]   1>  Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   Above crossings: 1; below crossings: 0\n   \n   [junit4]   1>  Edge [[lat=-0.914670478121684, lon=2.4457272005608357E-47([X=0.609446252447186, Y=1.4905392768899487E-47, Z=-0.7915752112532345])] --> [lat=-0.737919215699403, lon=-1.0814374159521924([X=0.34764272191418555, Y=-0.6527705659008658, Z=-0.6724777381306498])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   There are no intersection points within bounds.\n   [junit4]   1>    Endpoint(s) of edge are on travel plane!\n   [junit4]   1>  Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   Above crossings: 0; below crossings: 0\n   \n   [junit4]   1>  Edge [[lat=-0.40516490647074055, lon=2.4457272005608357E-47([X=0.919584346757591, Y=2.2490524500750083E-47, Z=-0.39440489992508504])] --> [lat=2.4457272005608357E-47, lon=-0.6244585784444767([X=0.8121874885299789, Y=-0.5853122613567737, Z=2.448463612203698E-47])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   There are no intersection points within bounds.\n   [junit4]   1>    Endpoint(s) of edge are on travel plane!\n   [junit4]   1>  Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   Above crossings: 0; below crossings: 0\n   \n   [junit4]   1>  Edge [[lat=-0.2581712131420987, lon=-3.141592653589793([X=-0.9677277372221494, Y=-1.1851246758352164E-16, Z=-0.2555423342455023])] --> [lat=-0.40516490647074055, lon=2.4457272005608357E-47([X=0.919584346757591, Y=2.2490524500750083E-47, Z=-0.39440489992508504])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   Planes were identical\n   [junit4]   1>  Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=1.2095236875745584E-16]\n   [junit4]   1>   Above crossings: 0; below crossings: 0\n   \n   [junit4]   1>  Check point in set? true\n\n ",
            "date": "2018-04-28T00:46:59+0000"
        },
        {
            "id": "comment-16457427",
            "author": "Karl Wright",
            "content": "Still working on this.  A fix seems to reliably break LUCENE8227, both cases.  I need to analyze why that is. ",
            "date": "2018-04-28T07:34:46+0000"
        },
        {
            "id": "comment-16457531",
            "author": "Karl Wright",
            "content": "For testLUCENE8227, we have the following log output, which shows that indeed we were not \"catching\" the edge transition for the starting point of the second leg, and now we do.  Unfortunately, we're also apparently missing another transition that we should be catching.  I analyzed this case before; will have to repeat the work.\n\nThese are the edges:\n\n\n   [junit4]   1> Recording edge [[lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])] --> [lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])]]; bounds = XYZBounds: [xmin=-0.3424714974202101 xmax=0.44467597874035253 ymin=-9.999999580593378E-10 ymax=0.6707549864468698 zmin=-0.9658414221587766 zmax=-0.5934780727681112]\n   [junit4]   1> Recording edge [[lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])] --> [lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])]]; bounds = XYZBounds: [xmin=0.4446759767403525 xmax=1.0011188549924792 ymin=-1.0E-9 ymax=0.6707549864468698 zmin=-0.5934780747681111 zmax=1.0E-9]\n   [junit4]   1> Recording edge [[lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])] --> [lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])]]; bounds = XYZBounds: [xmin=-0.8989684554372841 xmax=1.0011188549924792 ymin=-1.0E-9 ymax=1.0000002501693679E-9 zmin=-1.0E-9 zmax=0.997762293022105]\n   [junit4]   1> Recording edge [[lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])] --> [lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])]]; bounds = XYZBounds: [xmin=-0.9936143692718389 xmax=-0.8989684534372842 ymin=-9.99999889908116E-10 ymax=0.21100591038346708 zmin=-0.3673266868240589 zmax=0.43908465595727525]\n   [junit4]   1> Recording edge [[lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])] --> [lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])]]; bounds = XYZBounds: [xmin=-0.9065744430970767 xmax=-0.34247149542021005 ymin=-9.999999580593378E-10 ymax=0.21100591038346708 zmin=-0.9375649467139603 zmax=-0.36732668482405884]\n\n\n\n\nThis is the output:\n\n\n   [junit4]   1> IsWithin() for [-1.0011188539924791,1.226017000107956E-16,0.0]\n   [junit4]   1>  Trying testPoint1...\n   [junit4]   1> \n   [junit4]   1> IsInSet called for [-1.0011188539924791,1.226017000107956E-16,0.0], testPoint=[X=0.3804488906595847, Y=-0.47772089071622287, Z=0.7906122375677148]; is in set? true\n   [junit4]   1>  Using two planes\n   \n   [junit4]   1>  Finding whether [X=-0.6107033713930277, Y=1.226017000107956E-16, Z=0.7906122375677148] is in-set, based on travel from [X=0.3804488906595847, Y=-0.47772089071622287, Z=0.7906122375677148] along [A=0.0, B=0.0; C=1.0; D=-0.7906122375677148] (value=0.7906122375677148)\n   [junit4]   1>  Constructing sector linear crossing edge iterator\n   [junit4]   1>  Edge [[lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])] --> [lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])]] potentially crosses travel plane [A=0.0, B=0.0; C=1.0; D=-0.7906122375677148]\n   [junit4]   1>   Point is on the edge; in-set\n   [junit4]   1>   Intersection point in-set? true On edge? true\n   \n   [junit4]   1>  Finding whether [-1.0011188539924791,1.226017000107956E-16,0.0] is in-set, based on travel from [X=-0.6107033713930277, Y=1.226017000107956E-16, Z=0.7906122375677148] along [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16] (value=1.226017000107956E-16)\n   [junit4]   1>  Constructing sector linear crossing edge iterator\n   [junit4]   1>  Edge [[lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])] --> [lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Finding intersections between edge plane and travel plane...\n   [junit4]   1>   Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Above crossings = 0; below crossings = 0\n   [junit4]   1>  Edge [[lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])] --> [lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Finding intersections between edge plane and travel plane...\n   [junit4]   1>   Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Starting point crossing detected!\n   [junit4]   1>   Above crossings = 0; below crossings = 0\n   [junit4]   1>  Edge [[lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])] --> [lat=0.0, lon=0.0([X=1.0011188539924791, Y=0.0, Z=0.0])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Finding intersections between edge plane and travel plane...\n   [junit4]   1>   Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Above crossings = 0; below crossings = 0\n   [junit4]   1>  Edge [[lat=-1.2205765069413237, lon=3.141592653589793([X=-0.3424714964202101, Y=4.194066218902145E-17, Z=-0.9375649457139603])] --> [lat=-0.63542308910253, lon=0.9853722928232957([X=0.4446759777403525, Y=0.6707549854468698, Z=-0.5934780737681111])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Finding intersections between edge plane and travel plane...\n   [junit4]   1>   Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Above crossings = 0; below crossings = 0\n   [junit4]   1>  Edge [[lat=0.45435018176633574, lon=3.141592653589793([X=-0.8989684544372841, Y=1.1009188402610632E-16, Z=0.4390846549572752])] --> [lat=-0.375870856827283, lon=2.9129132647718414([X=-0.9065744420970767, Y=0.21100590938346708, Z=-0.36732668582405886])]] potentially crosses travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Finding intersections between edge plane and travel plane...\n   [junit4]   1>   Edge intersects travel plane [A=0.0, B=1.0; C=0.0; D=-1.226017000107956E-16]\n   [junit4]   1>   Above crossings = 0; below crossings = 1\n   [junit4]   1>  Check point in set? false\n\n\n\nNote that the \"starting point crossing detected\" is logged for an edge that otherwise does not contribute at all to above or below crossings.  That means that this is has been effectively broken since the DualCrossingIterator went away.  We seemingly have a corresponding exit for the edge too, so the crossing count of 1 is reasonable.\n\nIt's possible that I never really fixed LUCENE8227 properly in the first place; the test depends on whether the bounds line up with the in-set-ness of a given point.  Let me confirm that it is really broken before trying to fix things. ",
            "date": "2018-04-28T10:49:26+0000"
        },
        {
            "id": "comment-16457557",
            "author": "Karl Wright",
            "content": "Hmm, Ignacio Vera, I've concluded that the flaw is really more subtle.  Effectively, it is not possible to count crossings starting on an edge and come up with a good number.  It's straightforward to prove this, in retrospect \u2013 which is probably why I created the DualCrossingIterator in the first place, because it doesn't suffer from this problem, because we can guarantee that neither the start point nor the end point is on a polygon edge.\n\nOf course, the reason that I got rid of the DualCrossingIterator was because it cannot be readily modified to allow travel on any one leg of a full 180 degrees, so it has its own problems.\n\nThe good news is that we can readily detect when we've picked a bad choice for travel planes.  The bad news is that there is no guarantee we can find a good choice.\n\nAs far as a strategy going forward, here's my thought:\n\n\n\tBasic strategy: Try a number of approaches, and hope that one eventually succeeds.\n\tWhen we try an approach, we throw IllegalArgumentException if we find ourselves with a bad intersection point.\n\tWith two test points, there are two choices of intersection point immediately available.  But if we restructure the code a bit, there are at least three choices available per test point, barring those excluded because they are too close to the world edge.\n\tWe can also resurrect the DualCrossingIterator, to include as part of our \"strategy mix\", provided it knows how to error out of someone tries to use it for too big a leg.\n\n\n\n ",
            "date": "2018-04-28T12:05:45+0000"
        },
        {
            "id": "comment-16457586",
            "author": "ASF subversion and git services",
            "content": "Commit c94a83fd283bb7d081e7b3c1578e863a6c58363a in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c94a83f ]\n\nLUCENE-8280: Use a combination of strategies to work around the fact that no strategy can be used in all situations. ",
            "date": "2018-04-28T13:14:32+0000"
        },
        {
            "id": "comment-16457596",
            "author": "ASF subversion and git services",
            "content": "Commit ecb30a90aa13e326c8504a7836f26936dffab527 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ecb30a9 ]\n\nLUCENE-8280: Use a combination of strategies to work around the fact that no strategy can be used in all situations. ",
            "date": "2018-04-28T13:20:11+0000"
        },
        {
            "id": "comment-16458449",
            "author": "ASF subversion and git services",
            "content": "Commit ff68acf2449f0f705a949e7afb592c4139fd52ad in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff68acf ]\n\nLUCENE-8280: Reorganize to allow us to try lots of strategies until we get one. ",
            "date": "2018-04-30T10:13:10+0000"
        },
        {
            "id": "comment-16458450",
            "author": "ASF subversion and git services",
            "content": "Commit 419cdd0981ce5fa2b11752a026921931cc3c5f30 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=419cdd0 ]\n\nLUCENE-8280: Reorganize to allow us to try lots of strategies until we get one. ",
            "date": "2018-04-30T10:13:44+0000"
        },
        {
            "id": "comment-16458451",
            "author": "ASF subversion and git services",
            "content": "Commit ec50b224dfed558b18b5ed39e44ef6d504c66442 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ec50b22 ]\n\nLUCENE-8280: Reorganize to allow us to try lots of strategies until we get one. ",
            "date": "2018-04-30T10:14:12+0000"
        }
    ]
}