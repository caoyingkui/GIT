{
    "id": "SOLR-3591",
    "title": "Startup error not reflected in Solr web view",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-BETA"
        ],
        "components": [
            "Admin UI"
        ],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "When Solr has a fatal startup error, it used to be reflected in general responses from Solr.  With the new UI, it's relegated to only the logs.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--screenshot-1.jpg": "https://issues.apache.org/jira/secure/attachment/12534471/ASF.LICENSE.NOT.GRANTED--screenshot-1.jpg"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-13405402",
            "date": "2012-07-02T22:35:04+0000",
            "content": "Actual startup error was due to (experimenting with failure modes of SOLR-1725):\n\n\nJul 2, 2012 6:29:57 PM org.apache.solr.common.SolrException log\nSEVERE: null:org.apache.solr.common.SolrException: Unable to initialize scripts: No ScriptEngine found by file extension: update_processor.rb -- supported extensions: scpt, applescript, app, js\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:664)\n\tat org.apache.solr.core.SolrCore.<init>(SolrCore.java:548)\n\n\n\n\nby having this in my configuration:\n\n\n  <updateRequestProcessorChain name=\"script\">\n    <processor class=\"solr.StatelessScriptUpdateProcessorFactory\">\n      <str name=\"script\">update_processor.rb</str>\n    </processor>\n    <processor class=\"solr.RunUpdateProcessorFactory\" />\n  </updateRequestProcessorChain>\n\n\n\nWithout jruby being present. "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13406300",
            "date": "2012-07-04T06:32:11+0000",
            "content": "Just for reproducing the UI-Steps, i changed elevate.xml into elevate.xm to produce an exception:\n\n\n\tWe're trying to get Information about available cores from /solr/admin/cores?wt=json:\n\n{\n  responseHeader: {\n    status: 0,\n    QTime: 1\n  },\n  defaultCoreName: \"collection1\",\n  status: { }\n}\n\n\n\n\n\n\tAfterwards we try to fetch System Information (from the first available core), because there are no cores listed .. we end up with /solr/null/admin/system?wt=json - which just gives an 404 Not Found\n\n\n\nSo how to decide if the user has no admin-handler defined or we have an startup error? my first idea was to display the latest logentry when we display this error message, so the user may decide himself what happend - but this will not work because /solr/admin/logging also responds with a 404 Not Found\n\nRight now i don't really have an idea how to solve that? "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13406706",
            "date": "2012-07-04T20:09:31+0000",
            "content": "hum, quick thought was, that we maybe see a difference in the output if the AdminCoreHandler .. but that's not the fact .. it looks exactly the same. having no cores defined gives the same result as an startup error.\n\nIs there really no way to see/detect if solr was started like expected? Until that Issue i was pretty sure, that we have most of the cases covered ;o\n\nPerhaps someone can give a few insights, why all the resources return 404 Not Found even w/o hitting Solr itself? At least you'll see no requests in the default logs .. which are normally populated for every request. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13410991",
            "date": "2012-07-10T22:15:28+0000",
            "content": "It sounds like there are two related problems that compound int oa really bad experience...\n\n\n\n1) the web ui isn't cleaning dealing with the situation where there are \"no cores\" returned by the CoreAdminHandler.\n\nthis is a legitimate situation, that doesn't neccessarily indicate an error.  \n\nif there are no cores, then the ui shouldn't blindly try to load \"/solr/null/admin/system?wt=json\" and then complain that the admin handler can't be found \u2013 the logic should be something like:\n\n\n\tcan we talk to CoreAdminHandler at all? if not give a specific error\n\tif CoreAdminHandler says there are no cores, give a message to that effect\n\t\n\t\toffer the info/commands that are stil available (ie: \"Core Admin\" functionality)\n\t\tperhaps suggesting that if they expected to cores to already exist, they should check logs 9allthough this may not be needed depending on how far we get with \"#2\" below)\n\t\n\t\n\tif cores are available, then try to use /corename/admin to get the other info to populate the UI, and if we can't find it then mention that they need to add config\n\t\n\t\ti would also suggest using the \"defaultcore\" if non-null instead of just whatever core happens to be listed first (but that's a good fallback if there is no default core)\n\t\n\t\n\n\n\n\n\n2) no external reporting of errors in initializing cores\n\nonce upon a time, Solr had an \"abortOnConfigurationError\" option per core, that never really worked well, and would try to partially initialize a core even if some things failed.  In conjunction with that (broken) setting, was a static list of Exceptions that had been thrown during SolrCore construction, which the SolrRequestDispatcher would try to use to generate an error messages if there was a problem.\n\nAll of that code has been ripped out of trunk for a long while, largely because it didn't work, and it REALLY didn't work well with multicore, but as erik points out the one thing that it did help with was in making it obvious when there were config problems on startup.\n\nI think we should at least partially revive the idea of keeping track of the list of \"severe\" errors, but there are a lot of things we can do differnetly now:\n\n\n\tinstead of being static, it can be managed by the CoreContainer\n\tit can specificly be exceptions caught by CoreContainer while initializing SolrCores.\n\twe can maintain it as a map of (String)coreName -> Pair<(Date)timstamp,(Exception)error> so it's clear what exception came from initializing which solr core\n\t\n\t\tby using a name mapping, we can delete entires if/when a SolrCore is re-loaded to fix the error.\n\t\n\t\n\twe can return this map in CoreAdminHandler so the UI can display a big flashing warning about cores that failed to initialize (both on startup, or if some remote command tried to create a core programaticly)\n\n\n\n\n\ni suggest we spin off a new Jira for #1 since that is somewhat independent (we need to change the \"no cores\" behavior of the UI no matter what else we do) and use sub-tasks of this issue to track improvements to CoreContainer/CoreAdminHandler/UI to display errors related to SolrCore initialization.\n\nsound good? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13411011",
            "date": "2012-07-10T22:37:13+0000",
            "content": "Perhaps we can use part of SOLR-3358 to capture FATAL exceptions and somehow expose them regardless of the core?\n\nThen the UI behavior could essentially show the logging when /solr/admin/xxxx does not exist?\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13411059",
            "date": "2012-07-10T23:34:00+0000",
            "content": "Perhaps we can use part of SOLR-3358 to capture FATAL exceptions and somehow expose them regardless of the core?\n\ni don't have any objections to that, what i've seen of SOLR-3358 looks great so far, and it would be nice if it was accesible even w/o having any SolrCores \u2013 but i think we need a more specific targeted solution for reporting core initialization problems...\n\n\n\twe can't uniquely identify which core caused which log messages\n\twe can't control what log messages might come out of a plugin from a core\n\twe can't identify which log message was the \"straw that broke the camels back\" and actually caused the core init to fail.\n\twe can't definitively know if a log message is \"still important\" as more log messages come in (from other cores)\n\twe can't know if a specific log messages related to core initialization is \"still a problem\" or if that specific core has already been fix and re-created\n\n\n\n...but we can, in CoreContainer, catch and record the specific exceptions related to each core name, and track them relative that core name, and let CoreAdminHandler have thta data when it's asked to report status.\n\nso if a plugin in coreA logged 99 \"fatal\" log messages, but coreA still started fine; while coreB didn't log anything but the constructor threw an exception X we can make CoreAdminHAndler reliably (and confidently) say \"here's your status for coreA, and FYI: coreB failed to initialize because of X\" w/o making the user wade through 100 other log messages that are unrelated.  And even if the user doesn't look at the core status for hours and hours after trying to startup (or after some cron tried to programaticly create coreB), and there have been thousands of other \"errors\" logged by other cores, CoreAdminHandler can still say \"this error X is the reason you don't have a coreB right now\".\n\nsee what i mean? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412219",
            "date": "2012-07-11T22:26:26+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13425381",
            "date": "2012-07-30T23:29:11+0000",
            "content": "subtasks are all done, related issue open to look at future improvements to making the UI work better when no SolrCores are available.\n\nnothing left to do here. "
        }
    ]
}