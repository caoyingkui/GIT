{
    "id": "LUCENE-414",
    "title": "Java NIO patch against Lucene 1.9",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "Robert Engels previously submitted a patch against Lucene 1.4 for a Java NIO-\nbased Directory implementation.  It also included some changes to FSDirectory \nto allow better concurrency when searching from multiple threads.  The \ncomplete thread is at:\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-java-dev/200505.mbox/%\n3cLMENLAOACIBLMOIILNNNEEOEEPAA.rengels@ix.netcom.com%3e\n\nThis thread ended with Doug Cutting suggesting that someone port Robert's \nchanges to the SVN trunk.  This is what I've done in this patch.\n\nThere are two parts to the patch.  The first part modifies FieldsReader, \nCompoundFileReader, and SegmentReader, to allow better concurrency when \nreading an index.  The second part includes the new NioFSDirectory \nimplementation, and makes small changes to FSDirectory and IndexInput to \naccomodate this change.  I'll put a more detailed outline of the changes to \neach file in a separate message.\n\nTo use the new NioFSDirectory, set the system property \norg.apache.lucene.FSDirectory.class to \norg.apache.lucene.store.NioFSDirectory.  This will cause \nFSDirectory.getDirectory() to return an NioFSDirectory instance.  By default, \nNioFile limits the number of concurrent channels to 4, but you can override \nthis by setting the system property org.apache.lucene.nio.channels.  \n\nI did some performance tests with these patches.  The biggest improvement came \nfrom the concurrency improvements.  NioFSDirectory performed about the same as \nFSDirectory (with the concurrency improvements).  \n\nI ran my tests under Fedora Core 1; uname -a reports:\nLinux myhost 2.4.22-1.2199.nptlsmp #1 SMP Wed Aug 4 11:48:29 EDT 2004 i686 \ni686 i386 GNU/Linux\n\nThe machine is a dual xeon 2.8GHz with 4GB RAM, and the tests were run against \na 9GB compound index file.  The tests were run \"hot\" \u2013 with everything \nalready cached by linux's filesystem cache.  The numbers are:\n\nFSDirectory without patch:          13.3 searches per second\nFSDirectory WITH concurrency patch: 14.3 searches per second\n\nBoth tests were run with 6 concurrent threads, which gave the highest numbers \nin each case.  I suspect that the concurrency improvements would make a bigger \ndifference on a more realistic test where the index isn't all cached in RAM \nalready, since the I/O happens whild holding the sychronized lock.  Patches to \nfollow...\n\nThoughts?",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--nio-lucene-1.9.patch": "https://issues.apache.org/jira/secure/attachment/12312681/ASF.LICENSE.NOT.GRANTED--nio-lucene-1.9.patch",
        "ASF.LICENSE.NOT.GRANTED--MemoryLRUCache.java": "https://issues.apache.org/jira/secure/attachment/12312683/ASF.LICENSE.NOT.GRANTED--MemoryLRUCache.java",
        "ASF.LICENSE.NOT.GRANTED--NioFile.java": "https://issues.apache.org/jira/secure/attachment/12312682/ASF.LICENSE.NOT.GRANTED--NioFile.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-07-24T12:28:02+0000",
            "content": "Created an attachment (id=15757)\nConcurrency and NIO patch for lucene SVN trunk\n\n\nNioFile: new class\nNioFSDirectory: new class, extends FSDirectory, uses java's NIO classes\n\nFSDirectory - changes for NioFSDirectory\n\n\tmade init() method protected so NioFSDirectory can call it\n\n\n\nIndexInput - changes for NioFSDirectory\n\n\tadd readBytes() method that takes a position while preserving the\nIndexInput's position (overridden in NioInputStream)\n\n\n\n\nCONCURRENCY IMPROVEMENTS\n------------------------\nFieldsReader - concurrency improvements\n\n\tadd and use ThreadStream inner class for istream and fstream (ThreadLocal\nvariables)\n\n\n\nCompoundFileReader - concurrency improvements\n\n\tremove synchronized block in readInternal().\tThe sychronization is now in\nIndexInput implementation.\n  This allows subclasses (such as NioFSDirectory.NioIndexInput) to NOT use\nsychronized blocks for better concurrency.\n\n\n\nSegmentReader - concurrency improvement\n\n\tremoved synchronized from isDeleted() by getting a copy of the reference\ninstead\n\n ",
            "author": "Chris Lamprecht",
            "id": "comment-12322523"
        },
        {
            "date": "2005-07-26T22:27:56+0000",
            "content": "(In reply to comment #0)\n\nI've attached an improved NioFile and caching mechanism. One of the problems\nwith the earlier implementation was that the cache size could grow enemorous\n(since it was a certain percentage of all outstanding segements).\n\nThe attached cache is shared by all segments and has an upper bound.\n\nAs a note, your performance improvement numbers do not jive with what I have\nseen. How many simultaneous threads are you using? What was the cache size? ",
            "author": "robert engels",
            "id": "comment-12322524"
        },
        {
            "date": "2005-07-26T22:30:16+0000",
            "content": "Created an attachment (id=15781)\nNioFile with shared cache ",
            "author": "robert engels",
            "id": "comment-12322525"
        },
        {
            "date": "2005-07-26T22:31:01+0000",
            "content": "Created an attachment (id=15782)\nshared cache with multi-segment keys ",
            "author": "robert engels",
            "id": "comment-12322526"
        },
        {
            "date": "2005-10-27T06:29:23+0000",
            "content": "The channels should all be opened when the IndexInput is created, as files can subsequently get deleted.\n\nAlso, I'm not sure why this uses nio.  Classic io would also permit you to have multiple file handles per file, for more parallel io.  So you could just patch FSDirectory to permit that, no?\n\nFinally, if files are on a single drive, then the concurrency improvements are probably negligible.  This would only really pay off with a RAID, where different parts of a file are stored on different physical devices.  Or am I missing something? ",
            "author": "Doug Cutting",
            "id": "comment-12356015"
        },
        {
            "date": "2008-09-22T17:56:28+0000",
            "content": "I believe most of this is a dup of LUCENE-753, and/or separately incporated into Lucene already. ",
            "author": "Michael McCandless",
            "id": "comment-12633402"
        }
    ]
}