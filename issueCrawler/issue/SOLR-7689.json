{
    "id": "SOLR-7689",
    "title": "ReRankQuery rewrite method can change the QueryResultKey causing cache misses.",
    "details": {
        "components": [
            "search",
            "SearchComponents - other"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.2.2",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "In SolrIndexSearcher class, the key used to lookup results in queryResultCache uses the original query. \n\nHowever later in createNormalizedWeight the query gets re-written, and then saved in the queryResultCache after it's re-written. \n\nThis causes cache misses for the same query, and un-necessary inserts in the queryResultCache.\n\nI can reproduce this using a re-ranking query that is using a main query as a dismax query, the dismax Query could be re-written into a TermQuery, which makes sense, but will cause cache misses.\n\nI tested a quick solution by just using q.clone()  when it comes to build QueryResultKey, and it works fine, but not sure if that is the best way of doing it.",
    "attachments": {
        "SOLR-7689.patch": "https://issues.apache.org/jira/secure/attachment/12739918/SOLR-7689.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-16T09:48:42+0000",
            "author": "Joel Bernstein",
            "content": "Wondering if this is a bug in the re-ranking? I'll investigate. ",
            "id": "comment-14587769"
        },
        {
            "date": "2015-06-16T10:11:56+0000",
            "author": "Joel Bernstein",
            "content": "It looks like the only way this could be a problem is if the Query was not immutable. Can you post the exact query that is causing the cache miss? ",
            "id": "comment-14587797"
        },
        {
            "date": "2015-06-16T10:15:20+0000",
            "author": "Joel Bernstein",
            "content": "Quick search turns this up: https://issues.apache.org/jira/browse/LUCENE-6570.\n\nSo cloning would seem like the safe thing to do. \n\nWould be good to get some more eyes on this. ",
            "id": "comment-14587798"
        },
        {
            "date": "2015-06-16T12:45:42+0000",
            "author": "Joel Bernstein",
            "content": "Yonik Seeley curious to see what you see with this ticket.  ",
            "id": "comment-14587971"
        },
        {
            "date": "2015-06-16T14:27:45+0000",
            "author": "Yonik Seeley",
            "content": "This would definitely be a bug if we actually do use a rewritten query for any caches.  SolrIndexSearcher certainly didn't do that in the past, but it's possible that a bug was introduced somewhere along the way.\n\nIs this because some other code passes SolrIndexSearcher a rewritten query, or do you think there's a bug internal to SolrIndexSearcher?\n\nedit: I reviewed SolrIndexSearcher, and nothing jumps out at me as incorrect.\nWe should not clone the queries in general though (in SolrIndexSearcher) - that's a lot of overhead and the wrong fix.  If there's a bad-egg query somewhere that is not effectively immutable (i.e. using it in a search can change it) then that's what should be fixed. ",
            "id": "comment-14588101"
        },
        {
            "date": "2015-06-16T14:44:09+0000",
            "author": "Yonik Seeley",
            "content": "Took a brief look at ReRankQuery, and I do see one problem:\n\n\n          this.boostedPriority = (Map<BytesRef, Integer>)context.get(QueryElevationComponent.BOOSTED_PRIORITY);\n\n\n\nboostedPriority is a field on ReRankQuery, so this query won't be immutable or thread safe.   ",
            "id": "comment-14588136"
        },
        {
            "date": "2015-06-16T14:50:50+0000",
            "author": "Joel Bernstein",
            "content": "I'll review this. ",
            "id": "comment-14588142"
        },
        {
            "date": "2015-06-16T14:57:49+0000",
            "author": "Joel Bernstein",
            "content": "I think the problem would be in the query itself. If they are not immutable now, under what conditions can they change? The Lucene IndexSearcher calls rewrite on the query, do any queries change internally because of a call like this? ",
            "id": "comment-14588154"
        },
        {
            "date": "2015-06-16T15:08:41+0000",
            "author": "Yonik Seeley",
            "content": "I think the problem would be in the query itself. If they are not immutable now, under what conditions can they change?\n\nThe work in LUCENE-6570 is only tangentially related.\nAll the core Lucene queries are what I guess I would call \"weakly immutable\".  If the user (in this case Solr) does not change the query, then the query won't be changed by other read / search operations and is safe to use concurrently across different threads, etc.\n\nSo stuff like LUCENE-6570 is to make stuff like BooleanQuery truly immutable.  It would only matter to Solr in the event of a bug.\n\nThe Lucene IndexSearcher calls rewrite on the query, do any queries change internally because of a call like this?\n\nNo, they should not. ",
            "id": "comment-14588166"
        },
        {
            "date": "2015-06-16T15:20:27+0000",
            "author": "Joel Bernstein",
            "content": "Not seeing a problem with the boostedPriority Map. This is map is created by the main execution thread in the QueryElevationComponent and is only used for a specific query. So each query should have a unique HashMap. Once it's created I believe it's read only. The code is pretty confusing though because of the callback to QueryElelvationComponent. This should probably be looked at. ",
            "id": "comment-14588197"
        },
        {
            "date": "2015-06-16T15:39:06+0000",
            "author": "Joel Bernstein",
            "content": "Ok, I see the issue. It's a bug specific to the ReRankQParserPlugin. Rewritten queries will foil the query result cache. I'll work on a fix. ",
            "id": "comment-14588240"
        },
        {
            "date": "2015-06-16T17:32:18+0000",
            "author": "Joel Bernstein",
            "content": "Patch that resolves the issue. More details to follow. ",
            "id": "comment-14588418"
        },
        {
            "date": "2015-06-16T17:50:12+0000",
            "author": "Yonik Seeley",
            "content": "Hmmm, the patch makes rewrite on ReRankQuery do nothing.\nAre the internal queries rewritten at some point (some queries require that).\n\nThe normal pattern of rewrite is to rewrite your child queries and if any of them changed, create a new parent query with those child queries. ",
            "id": "comment-14588459"
        },
        {
            "date": "2015-06-16T20:04:40+0000",
            "author": "Joel Bernstein",
            "content": "Added a set of tests that ensures that the queryResultCache misses are resolved. ",
            "id": "comment-14588670"
        },
        {
            "date": "2015-06-16T21:30:25+0000",
            "author": "Joel Bernstein",
            "content": "Yeah this is special case. The ReRankQuery is just a wrapper that peels off on the rewrite() method. The wrapper stays on in the SolrIndexSearcher to set the topdocs collecter and act as the cache key. In the Lucene IndexSearcher search() method where rewrite() is called, all it needs to do is return the mainQuery. The rewrite method in the Lucene IndexSearcher does a nifty little loop that ensures the main query then gets rewritten. ",
            "id": "comment-14588811"
        },
        {
            "date": "2015-06-16T21:42:46+0000",
            "author": "Yonik Seeley",
            "content": "Ah, I had missed that you were returning this.mainQuery and not just \"this\" ",
            "id": "comment-14588833"
        },
        {
            "date": "2015-06-17T00:48:46+0000",
            "author": "Emad Nashed",
            "content": "Thanks a lot for giving this issue your attention. The query I am trying looks basically like this (after omitting some unimportant stuff)\n\n\nq={!dismax qf=$sqf pf=$spf v=$sq}\nrq={!rerank reRankQuery=$rqq reRankDocs=1000 reRankWeight=2}\nrqq=_val_:\"recip(ms(NOW/DAY+1DAY,DateUpdated),3.16e-11,1.4,1)\"\nsq=\"test\"\n\n\n\nI tried the patch, although it fixes the caching issue, but now the Re-Ranking doesn't happen anymore. This is basically because when rewrite is called, ReRanking query will just return the inner dismax query and just hide itself from the searcher. I'll propose another patch shortly. I'd propose that rewrite method on ReRankQuery would clone itself (if the mainQuery has changed) and return the new instance. Sorry for the delay, I just live on the other side of the earth, and there is a big time difference.\nCheers\n ",
            "id": "comment-14589107"
        },
        {
            "date": "2015-06-17T02:03:05+0000",
            "author": "Emad Nashed",
            "content": "This patch changes the rewrite function in ReRankQuery. It will rewrite the mainQuery, and if there is a change it will create a new clone instead of modifying itself.  ",
            "id": "comment-14589178"
        },
        {
            "date": "2015-06-17T09:40:54+0000",
            "author": "Joel Bernstein",
            "content": "The test cases are showing that the rerank is occurring with this patch. \n\nThe SolrIndexSearcher never calls rewrite on the query. So it sees the query as the RankQuery wrapper, and will use the ReRankCollector. The search method inside of the parent Lucene IndexSearcher calls rewrite on the RankQuery which returns the mainQuery. IndexSearcher.rewrite() will then call rewrite on the mainQuery. There is a loop in the IndexSearcher.rewrite() method that loops over the query until all the rewrites have been completed.\n\nIf you can provide a failing test case for your example I'll take a look at it.  ",
            "id": "comment-14589548"
        },
        {
            "date": "2015-06-17T10:18:08+0000",
            "author": "Emad Nashed",
            "content": "I was actually relying on the output from debugQuery to see if it is re-ranking. I didn't see any output for reranking with your patch, so it looks like I made the wrong assumption that if there is no output in debugQuery then it is not re-ranking.   ",
            "id": "comment-14589591"
        },
        {
            "date": "2015-06-17T10:52:39+0000",
            "author": "Joel Bernstein",
            "content": "I'll take a look at that. It sounds like we lost the explain part of the re-ranking with this patch. Thanks. ",
            "id": "comment-14589620"
        },
        {
            "date": "2015-06-17T11:00:36+0000",
            "author": "Joel Bernstein",
            "content": "Emad Nashed you're right we lost the ReRank portion of the Explain with this patch. You're approach of cloning the ReRankQuery in the rewrite method should solve the issue. I'll put another patch up to review.  ",
            "id": "comment-14589625"
        },
        {
            "date": "2015-06-17T13:46:51+0000",
            "author": "Joel Bernstein",
            "content": "New patch using a different approach then cloning the ReRankQuery. See comments for explanation. I believe this should resolve the cache miss issue and preserve the ReRankQuery's Explain ",
            "id": "comment-14589777"
        },
        {
            "date": "2015-06-17T15:05:00+0000",
            "author": "Yonik Seeley",
            "content": "ReRankQuery looks like a normal query type to me (i.e. it can be produced by a QParser from a user request, and can be used as a cache key, etc).  This also means that a single ReRankQuery object can be used concurrently on different indexes (autowarming is one way this can happen).\n\nSo caching both \"rewrittenQuery\" and \"boostedPriority\" which depend on specific requests / indexes is problematic.  As a general rule, queries shouldn't change themselves during execution.\n\nIs there a reason we can't use the normal pattern of returning a new main query in rewrite if any of the child queries were changed by a rewrite? ",
            "id": "comment-14589897"
        },
        {
            "date": "2015-06-17T15:23:36+0000",
            "author": "Joel Bernstein",
            "content": "Ok I see the issue you're taking about with the rewrittenQuery. I believe it doesn't apply to the boostedPriority because that won't get regenerated during autowarming. I'll verify this.\n\nThe normal pattern is a little different here because we need to return the re-written query wrapped in a ReRankQuery in order to preserver the re-rank Explain. Otherwise we could just return the mainQuery and let that get rewritten. I'll work on a patch that returns a clone of the ReRankedQuery wrapped around the rewritten query. The only trick to this is that the cloned ReRankQuery will also have rewrite() called on it because of the loop in IndexSearcher.rewrite(). So the cloned ReRankQuery will need to return itself from the rewrite method, rather then cloning again in an endless loop. ",
            "id": "comment-14589917"
        },
        {
            "date": "2015-06-17T15:32:00+0000",
            "author": "Yonik Seeley",
            "content": "The normal pattern is a little different here because we need to return the re-written query wrapped in a ReRankQuery in order to preserver the re-rank Explain. \n\nBut that is the normal pattern of how rewrite() is implemented.\n\nThe only trick to this is that the cloned ReRankQuery will also have rewrite() called on it because of the loop in IndexSearcher.rewrite()\n\nThis isn't a problem if you follow the normal pattern of returning a clone only if one of your sub-queries was changed by the rewrite.  The query will change the first time through the loop and won't change the second time.\n\nCheck something like BoostedQuery.rewrite() for the standard way of doing it. ",
            "id": "comment-14589929"
        },
        {
            "date": "2015-06-17T15:44:31+0000",
            "author": "Yonik Seeley",
            "content": "As for ReRankQuery.boostedPriority, which is retrieved from the request context, it seems like it can be safely removed?\nIt's only used to pass to the collector during creation, and that's also where it's set. ",
            "id": "comment-14589944"
        },
        {
            "date": "2015-06-17T15:54:47+0000",
            "author": "Joel Bernstein",
            "content": "I believe it was kept around to handle the cache warming scenario when the QueryElevationComponent is not called. I'll need to do a full review again though because the code looks odd. ",
            "id": "comment-14589957"
        },
        {
            "date": "2015-06-17T15:55:43+0000",
            "author": "Joel Bernstein",
            "content": "Supporting the QueryElevationComponent with ReRanking was tricky ",
            "id": "comment-14589959"
        },
        {
            "date": "2015-06-17T16:04:11+0000",
            "author": "Joel Bernstein",
            "content": "Ok, new patch using the normal pattern for query rewriting. ",
            "id": "comment-14589968"
        },
        {
            "date": "2015-06-17T16:17:12+0000",
            "author": "Yonik Seeley",
            "content": "Don't forget to replicate the boost in clone() ",
            "id": "comment-14589992"
        },
        {
            "date": "2015-06-17T17:55:24+0000",
            "author": "Joel Bernstein",
            "content": "New patch cloning the boost as well. The boost on the ReRankQuery is not actually applied though. There is a reRankWeight param that serves as a boost. The boost is included in the hashCode and equals of the ReRankQuery because the test framework enforces that. ",
            "id": "comment-14590177"
        },
        {
            "date": "2015-06-18T03:50:10+0000",
            "author": "Emad Nashed",
            "content": "Thanks a lot for that, it works for me! (Y) ",
            "id": "comment-14591192"
        },
        {
            "date": "2015-06-18T12:51:57+0000",
            "author": "Joel Bernstein",
            "content": "Ok, this is looking pretty good. New test scenario ensures that cache hit occurs when the main query is re-written. The reRank Explain is showing up properly in the debugQuery output. \n\nRunning the full test suite now so hope to commit and backport to the 5x branch shortly.\n\nThanks Emad Nashed for reporting the bug and collaborating on the ticket. Thanks Yonik Seeley for guidance on the rewrite.\n ",
            "id": "comment-14591732"
        },
        {
            "date": "2015-06-18T13:27:58+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1686213 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1686213 ]\n\nSOLR-7689: ReRankQuery rewrite method can change the QueryResultKey causing cache misses ",
            "id": "comment-14591779"
        },
        {
            "date": "2015-06-18T14:35:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1686236 from Joel Bernstein in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1686236 ]\n\nSOLR-7689: ReRankQuery rewrite method can change the QueryResultKey causing cache misses ",
            "id": "comment-14591899"
        },
        {
            "date": "2015-06-18T14:43:03+0000",
            "author": "Joel Bernstein",
            "content": "I have this labeled as 5.2.2 fix, but not sure if there will be a 5.2.2. I'll keep an eye out for it and backport to lucene_solr_5_2 if it materializes. I'll also hold off updating the CHANGES.txt until we know what release it will be in. ",
            "id": "comment-14591909"
        },
        {
            "date": "2015-06-18T15:07:09+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I'll also hold off updating the CHANGES.txt until we know what release it will be in.\n\nCreating the list of changes for 5.2.2 in the CHANGES.txt is part of the release process. So, please add this issue to the CHANGES.txt under 5.3 so that we can make a decision to backport this to 5.2.2. At least, this way this fix will not be forgotten even if you're on vacation or not paying attention. ",
            "id": "comment-14591941"
        },
        {
            "date": "2015-06-18T15:19:00+0000",
            "author": "Joel Bernstein",
            "content": "ok ",
            "id": "comment-14591955"
        },
        {
            "date": "2015-06-18T15:24:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1686243 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1686243 ]\n\nSOLR-7689: Updating CHANGES.txt ",
            "id": "comment-14591962"
        },
        {
            "date": "2015-06-18T15:27:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1686245 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1686245 ]\n\nSOLR-7689: Updating CHANGES.txt ",
            "id": "comment-14591969"
        },
        {
            "date": "2015-06-18T15:31:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1686246 from Joel Bernstein in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1686246 ]\n\nSOLR-7689: Updating CHANGES.txt ",
            "id": "comment-14591975"
        }
    ]
}