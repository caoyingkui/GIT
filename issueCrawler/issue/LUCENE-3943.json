{
    "id": "LUCENE-3943",
    "title": "Use ivy cachepath and cachefileset instead of ivy retrieve",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/build"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In LUCENE-3930 we moved to resolving all external dependencies using ivy:retrieve.  This process places the dependencies into the lib/ folder of the respective modules which was ideal since it replicated the existing build process and limited the number of changes to be made to the build.\n\nHowever it can lead to multiple jars for the same dependency in the lib folder when the dependency is upgraded, and just isn't the most efficient way to use Ivy.\n\nUwe pointed out that when working from svn or in using src releases we can remove the ivy:retrieve calls and make use of ivy:cachepath and ivy:cachefileset to build our classpaths and packages respectively, which will go some way to addressing these limitations \u2013 however we still need the build system capable of putting the actual jars into specific lib folders when assembling the binary artifacts",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-03T10:54:32+0000",
            "content": "Would this also mean ivy doesn't have to copy the JARs from its cache, into each checkout?  So this will save disk space for devs w/ multiple checkouts... ",
            "author": "Michael McCandless",
            "id": "comment-13245123"
        },
        {
            "date": "2012-04-03T11:15:59+0000",
            "content": "Correct ",
            "author": "Chris Male",
            "id": "comment-13245133"
        },
        {
            "date": "2012-04-03T11:16:47+0000",
            "content": "We do this already for the maven-tasks dependency for example. ",
            "author": "Chris Male",
            "id": "comment-13245135"
        },
        {
            "date": "2012-04-03T11:21:16+0000",
            "content": "This will require moving license checks till after the distribution is assembled, but it's a good idea. It's much like with Maven when things get stored once and IDEs and the build system reuses the same artifacts. ",
            "author": "Dawid Weiss",
            "id": "comment-13245139"
        },
        {
            "date": "2012-04-03T11:27:07+0000",
            "content": "That works with your goal of making it a top-level target, right? ",
            "author": "Chris Male",
            "id": "comment-13245143"
        },
        {
            "date": "2012-04-03T11:31:03+0000",
            "content": "Yep, sure. ",
            "author": "Dawid Weiss",
            "id": "comment-13245147"
        },
        {
            "date": "2012-04-03T11:32:43+0000",
            "content": "+1. Perhaps with an ant target to explicitly list out all JARs currently on the classpath, for debugging? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13245154"
        },
        {
            "date": "2012-04-03T11:36:58+0000",
            "content": "You can already see that with ant -v. ",
            "author": "Chris Male",
            "id": "comment-13245155"
        },
        {
            "date": "2012-04-03T11:51:32+0000",
            "content": "-v gives you a lot but not a clear and concise listing of the classpath, including solr-jars and dependency jars? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13245161"
        },
        {
            "date": "2012-04-03T15:35:56+0000",
            "content": "updating summary to note that this will really only help when working with svn checkouts and src releases \u2013 we'll still need to actually copy jar files around when building the binary artifacts (which means we'll probably also still want something like clean-jar for use by the R.M.) ",
            "author": "Hoss Man",
            "id": "comment-13245405"
        },
        {
            "date": "2012-04-03T16:04:03+0000",
            "content": "\nwe'll still need to actually copy jar files around when building the binary artifacts (which means we'll probably also still want something like clean-jar for use by the R.M.)\n\nIs this really the case?\n\nIn my opinion, the ideal situation would be that we pass these filesets directly to the zip/tar/gz whatever in the\nbinary release targets: they never see lib/, they are just added directly to the zip. So we could nuke the \nclean-jars stuff totally.\n\nThis is also way more ideal because then compile/test/release packaging tasks only change files in build/ and dist/, not\nelsewhere (be it tests modifying the source tree: SOLR-3268, or dist-maven modifying the source tree: LUCENE-3944,\nor ivy:retrieve modifying the source tree: lib/), this is bad news and makes releasing complicated.\n\nThe tradeoff is we have to seriously modify packaging tasks to implement this, which I think is too risky to do\nfor 3.x, but this would be a very nice improvement for making the release process less error-prone for 4.0 or possibly even 4.1 or later. ",
            "author": "Robert Muir",
            "id": "comment-13245440"
        },
        {
            "date": "2012-04-03T16:08:52+0000",
            "content": "In my opinion, the ideal situation would be that we pass these filesets directly to the zip/tar/gz whatever in the binary release targets\n\nAh... ok didn't think of that... +1 ",
            "author": "Hoss Man",
            "id": "comment-13245447"
        },
        {
            "date": "2012-04-03T18:11:13+0000",
            "content": "In my opinion, the ideal situation would be that we pass these filesets directly to the zip/tar/gz whatever in the binary release targets\n\n+1. ",
            "author": "Dawid Weiss",
            "id": "comment-13245551"
        },
        {
            "date": "2012-04-03T19:09:00+0000",
            "content": "In my opinion, the ideal situation would be that we pass these filesets directly to the zip/tar/gz whatever in the binary release targets\n\nthe one catch that occurs to me is the solr example: start.jar, the libraries jetty looks for, and the optional jar's solr load by path based on it's configuration ... we just have to make sure \"ant example\" takes care of putting all those jars where they need to be  ",
            "author": "Hoss Man",
            "id": "comment-13245613"
        },
        {
            "date": "2012-04-03T21:40:57+0000",
            "content": "ant example can also use ivy:cachepath as classpath, no need to copy anything. ",
            "author": "Uwe Schindler",
            "id": "comment-13245780"
        },
        {
            "date": "2012-04-03T21:51:20+0000",
            "content": "\"ant example\" doesn't run the example, so it can't use any ephemeral classpaths that ant creates on the fly.  \"ant example\" currently sets up the example files (ie: copying the war to where jetty will look for it) hence my point that it could copy the jars as needed in order for jetty & solr to find them\n\n(the example has to work in the binary build via \"java -jar start.jar\" even if users don't have any of the original build.xml files) ",
            "author": "Hoss Man",
            "id": "comment-13245788"
        }
    ]
}