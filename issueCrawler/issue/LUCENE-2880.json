{
    "id": "LUCENE-2880",
    "title": "SpanQuery scoring inconsistencies",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "5.3"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff of LUCENE-2879.\n\nYou can see a full description there, but the gist is that SpanQuery sums up freqs with \"sloppyFreq\".\nHowever this slop is simply spans.end() - spans.start()\n\nFor a SpanTermQuery for example, this means its scoring 0.5 for TF versus TermQuery's 1.0.\nAs you can imagine, I think in practical situations this would make it difficult for SpanQuery users to\nreally use SpanQueries for effective ranking, especially in combination with non-Spanqueries (maybe via DisjunctionMaxQuery, etc)\n\nThe problem is more general than this simple example: for example SpanNearQuery should be consistent with PhraseQuery's slop.",
    "attachments": {
        "LUCENE-2880.patch": "https://issues.apache.org/jira/secure/attachment/12469082/LUCENE-2880.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-23T15:10:57+0000",
            "content": "Here's a quickly hacked up patch (core tests pass, but i didnt go fixing contrib, etc yet).\n\nIts just to get ideas.\n\nThe approach I took was for SpanQuery to have a new method:\n\n  /** \n   * Returns the length (number of positions) in the query.\n   * <p>\n   * For example, for a simple Term this is 1.\n   * For a NEAR of \"foo\" and \"bar\" this is 2.\n   * This is used by SpanScorer to compute the appropriate slop factor,\n   * so that SpanQueries score consistently with other queries.\n   */\n  public abstract int getLength();\n\n\n\nThis is called once by the Weight, and passed to SpanScorer.\n\nThen SpanScorer computes the slop as:\n\nint matchLength = (spans.end() - spans.start()) - queryLength;\n\n\ninstead of:\n\nint matchLength = spans.end() - spans.start();\n\n ",
            "author": "Robert Muir",
            "id": "comment-12985339"
        },
        {
            "date": "2011-01-23T15:41:36+0000",
            "content": "thinking about this one, for this to really work correctly with the current setup (e.g. with SpanOrQuery), \nthis length might have to be in the Spans class...\n\nbut with LUCENE-2878 we nuke this class, so we can keep the issue open to think about how\nthe slop should be computed for these queries, i think just using the end - start is not the best. ",
            "author": "Robert Muir",
            "id": "comment-12985347"
        },
        {
            "date": "2011-01-23T18:16:15+0000",
            "content": "A related problem is that Spans does not have a weight (or whatever factor) of its own.\nCurrently Spans can only be scored at the top level (by SpanScorer) and not when they are nested.\nIn the nested case the only way to affect to score value is via the length. ",
            "author": "Paul Elschot",
            "id": "comment-12985387"
        },
        {
            "date": "2011-01-23T18:30:52+0000",
            "content": "The getLength() method may not be straightforward.\n\nDoes the getLength() method in SpanQuery also work in the nested case when there is an spanOr over two spanQueries of different length?\n\nIt may be necessary to add this length to Spans because of this.\n\nSome reasons for a negative match length:\n\n\tmultiple terms indexed at the same position,\n\tspan distance queries with the same subqueries.\n\n\n\nI wish I had a good solution for this, but I did not find one yet. ",
            "author": "Paul Elschot",
            "id": "comment-12985388"
        },
        {
            "date": "2011-01-23T20:51:47+0000",
            "content": "Paul I agree, I think the only way it would work is to be in Spans itself,\nwhich is the real 'Scorer' for spanqueries. Because its wrong for SpanOrQuery\nto have a getLength() really... just like it would be wrong for BooleanQuery\nto know anything about phrase slops of its subqueries!\n\nwe can just leave this issue open and see what happens with\nLUCENE-2878, and maybe a good solution will then be more obvious. ",
            "author": "Robert Muir",
            "id": "comment-12985407"
        },
        {
            "date": "2013-06-18T12:13:57+0000",
            "content": "I subclassed DefaultSimilarity to work around this.\nSeemed simple enough.\n\n\npublic class LUCENE2880_SloppyFreqDistanceAdjuster {\n\tprivate static Logger logger = Logger.getLogger(LUCENE2880_SloppyFreqDistanceAdjuster.class);\n\n\tpublic int distance(int distance) {\n\t\tif(distance < 2) {\n\t\t\tlogger.warn(\"distance - distacne is <, 2, has LUCENE-2880 been resolved?\");\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn distance - 2;\n\t}\n\n}\n\npublic class LUCENE2880_DefaultSimilarity extends DefaultSimilarity {\n\tprivate static final long serialVersionUID = 1L;\n\tprivate static final LUCENE2880_SloppyFreqDistanceAdjuster ADJUSTER = new LUCENE2880_SloppyFreqDistanceAdjuster();\n\n\t@Override\n\tpublic float sloppyFreq(int distance) {\n\t\treturn super.sloppyFreq(ADJUSTER.distance(distance));\n\t}\n\n}\n\n\n ",
            "author": "Adam Ringel",
            "id": "comment-13686631"
        },
        {
            "date": "2013-07-23T18:44:22+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716928"
        },
        {
            "date": "2014-04-16T12:54:31+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970783"
        },
        {
            "date": "2015-06-17T06:52:54+0000",
            "content": "Here is an updated patch that moves the method to the Spans class as suggested.\n\nSpanTermQuery now scores like TermQuery and an ordered SpanNearQuery scores like a PhraseQuery where all terms are at consecutive positions (the common case). ",
            "author": "Adrien Grand",
            "id": "comment-14589380"
        },
        {
            "date": "2015-06-17T13:36:12+0000",
            "content": "+1\nWow this is simpler than I thought it would be, based on the title & description any way. ",
            "author": "David Smiley",
            "id": "comment-14589765"
        },
        {
            "date": "2015-06-17T15:44:16+0000",
            "content": "+1\n\nMaybe width rather than distance as the method name? ",
            "author": "Alan Woodward",
            "id": "comment-14589943"
        },
        {
            "date": "2015-06-18T16:48:45+0000",
            "content": "OK for width, I'll commit with distance renamed as width if there are no objections. ",
            "author": "Adrien Grand",
            "id": "comment-14592084"
        },
        {
            "date": "2015-06-18T19:37:08+0000",
            "content": "Commit 1686301 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1686301 ]\n\nLUCENE-2880: Make span queries score more consistently with regular queries. ",
            "author": "ASF subversion and git services",
            "id": "comment-14592383"
        },
        {
            "date": "2015-06-18T19:57:58+0000",
            "content": "Commit 1686308 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1686308 ]\n\nLUCENE-2880: Make span queries score more consistently with regular queries. ",
            "author": "ASF subversion and git services",
            "id": "comment-14592407"
        },
        {
            "date": "2015-06-18T22:41:02+0000",
            "content": "Commit 1686337 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1686337 ]\n\nLUCENE-2880: Relax assertion: span near and phrase queries don't have the same scores if they wrap twice the same term. ",
            "author": "ASF subversion and git services",
            "id": "comment-14592659"
        },
        {
            "date": "2015-06-18T22:41:45+0000",
            "content": "Commit 1686339 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1686339 ]\n\nLUCENE-2880: Relax assertion: span near and phrase queries don't have the same scores if they wrap twice the same term. ",
            "author": "ASF subversion and git services",
            "id": "comment-14592661"
        },
        {
            "date": "2015-08-26T13:06:19+0000",
            "content": "Bulk close for 5.3.0 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14713290"
        }
    ]
}