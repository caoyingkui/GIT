{
    "id": "SOLR-12298",
    "title": "Index Full nested document Hierarchy For Queries (umbrella issue)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Solr ought to have the ability to index deeply nested objects, while storing the original document hierarchy.\n Currently the client has to index the child document's full path and level to manually reconstruct the original document structure, since the children are flattened and returned in the reserved \"_childDocuments_\" key.\n\nIdeally you could index a nested document, having Solr transparently add the required fields while providing a document transformer to rebuild the original document's hierarchy.\n\n\u00a0\n\nThis issue is an umbrella issue for the particular tasks that will make it all happen \u2013 either subtasks or issue linking.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-01T11:39:29+0000",
            "content": "Approach: I see Jan H\u00f8ydahl's proposal\u00a0as a starting point for this issue, as it addresses most of the problems, as well as this\u00a0talk on Solr Revolution 2016: \"Working with Deeply Nested Documents in Apache Solr\", as the starting points to this issue.\n\nFirstly, the way a nested document is indexed has to be changed.\n I propose we add the following fields:\n\n\t_parent_\n\t_level_\n\t_path_\n\n\n\n_parent_: This field wild will store the document's parent docId, to be used for building the whole hierarchy, using a new document transformer, as suggested by Jan on the mailing list.\n\n_level_: This field will store the level of the specified field in the document, using an int value. This field can be used for the parentFilter, eliminating the need to provide a parentFilter, which will be set by default as \"_level_:queriedFieldLevel\".\n\n_path_: This field will contain the full path, separated by a specific reserved char e.g., '.'\n for example: \"first.second.third\".\n This will enable users to search for a specific path, or provide a regular expression to search for fields sharing the same name in different levels of the document, filtering using the level key if needed.\n\nTo make this happen at index time, changes have to be made to the JSON loader, which will add the above fields, as well as the _root_\u00a0field, which holds the documents top most level docId. This will only happen when a specified parameter is added to the update request, e.g. \"nested=true\".\n\nThe new child doc transformer will be able to either reassemble the whole document structure, or do so from a specific level, if specified.\n Full hierarchy reconstruction can be done relatively cheaply, using the _root_\u00a0field to get to the highest level document, and querying the block for its children, ordering the query by the _level_\u00a0field. ",
            "author": "mosh",
            "id": "comment-16459631"
        },
        {
            "date": "2018-05-03T15:05:38+0000",
            "content": "It'll be exciting to see Solr's nested document support get improved!\n\n\n\tYou said the JSON loader could have changes but then wouldn't that limit the benefit to only that update method? \u00a0Why not an URP instead?\n\tWill\u00a0_path_ have a chain of uniqueKey IDs from parent to child?  You didn't specify what it is.  Or, after re-examining Anshum's LSR presentation you referenced, is this a list of the name of the entity type at each level (e.g. \"post.comment.reply.keywords\" etc.)?  If it is some sort of entity name, then this name needs to be put into each child document so that this type path can be constructed?\n\n\n\nPerhaps these special fields should all start with \"nest\" so as to clearly distinguish these for support of nested documents?  e.g. nestParent, nestLevel, nestPath  (with leading & trailing underscores; escaping in JIRA is a pain  ) ",
            "author": "David Smiley",
            "id": "comment-16462570"
        },
        {
            "date": "2018-05-06T12:43:28+0000",
            "content": "An URP could be used to add those fields, but that will not prevent the need for a new JSON loader, since the current one requires the childDocument to be added at each level. This could be prevented only by writing a new JSON loader, which will override the parseExtendedFieldValue\u00a0function. The overridden function should populate the needed fields (_nestLevel, _nestPath, nestParent),\n since the current JSON loader does not support regular nested JSON. Does this warrant the addition of a new URP?\n\nThe nestPath field will contain the name of the key at each level, e.g. \"post.comment\" for the child {\"a\": \"b\", \"post\": {\"comment\" : *\n\n{\"reply\" : \"a\"}\n\n*}}, the child solr document ending up as \n{ \"reply\": \"a\", \"_nestLevel_\" : 2, \"_nestParent_\": parentId, \"_root_\": rootDocId, \"_nestPath_\": \"post.comment\" }\n\nadding a \"nest\" prefix to each special fields sounds like a good way to differentiate them from other fields. ",
            "author": "mosh",
            "id": "comment-16465110"
        },
        {
            "date": "2018-05-07T21:51:27+0000",
            "content": "that will not prevent the need for a new JSON loader, since the current one requires the _childDocument_ to be added at each level.\n\nI'm not sure I understand you.  Firstly, _childDocument_ isn't required; you could instead provide an array as a JSON value and it'll be assumed to contain multiple child documents.  JsonLoaderTest.PARENT_TWO_CHILDREN_JSON demonstrates that.  Secondly, I don't get the point/consequence of why this is a problem.\n\nNevertheless, I can see that  SolrInputDocument.getChildDocuments doesn't capture the nature of the relationship, plus some child docs may have a varying relationship.  The JSON structure will usually have labels that are indicative of that relationship, like a \"comments\" array of child docs on a blog post, and perhaps an \"author\" child doc for the author of the post (if we imagine modeling it this way).  \n\nStill; it'd be a shame if a solution here were fixed to JSON only, so I'm stubborn on going with an URP for at least part of this.  Perhaps if the SolrInputDocument held optional contextual metadata populated by JsonLoader, then an URP could use this information.  Lacking that information it could work in a general way (e.g. assume simply \"child\" relationship).  Or... what if SolrInputDocument did not have an explicit _childDocuments field list.  What if a SolrInputDocument was simply a supported value inside SolrInputField? That would be a bigger change but may be a more appropriate fix, since adding the relationship after the fact (what we're talking about) could be seen a hack on top of SolrInputDocument which doesn't capture it natively when it should.  I'll sleep on it. ",
            "author": "David Smiley",
            "id": "comment-16466517"
        },
        {
            "date": "2018-05-08T05:43:22+0000",
            "content": "David you have some really\u00a0strong points.\n\nFirstly,\nWhile it is true _childDocument_ is not required, sometimes the JSON you get is not an array, but a child document, e.g.\n\n{ \"id\": \"X998_Y998\", \"from\": { \"name\": \"Peyton Manning\", \"id\": \"X18\" }, \"message\": \"Where's my contract?\", \"actions\": [ { \"name\": \"Comment\", \"link\": \"http://www.facebook.com/X998/posts/Y998\" }, { \"name\": \"Like\", \"link\": \"http://www.facebook.com/X998/posts/Y998\" } ], \"type\": \"status\", \"created_time\": \"2010-08-02T21:27:44+0000\", \"updated_time\": \"2010-08-02T21:27:44+0000\" }\n\n\nThis is a sample Facebook API response. The array syntax will index the array as child documents, but it will not index the child document under the key \"from\"\n\n { \"from\": { \"name\": \"Peyton Manning\", \"id\": \"X18\" } } \n\nIt would be nice if you could just index JSON as is, like you can in elastic search, moving the responsibility from the user to Solr itself.\nThis feature could also be added to the XML loader if needed, to enable feature equality. After this change the is introduced to the data loaders, the rest can be done using an URP, as long as the loaders add the needed metadata for the URP to add the required fields.\n\nAfterwards, a new transformer could be introduced that rebuilds the whole JSON structure, including the full original hierarchy.\n\nOn the other hand, adding a SolrInputDocument as a supported field could be the better way to go, making most of the logic \"hack\" redundant and unneeded. Perhaps you are right, and this is the better choice in the long run. ",
            "author": "mosh",
            "id": "comment-16466905"
        },
        {
            "date": "2018-05-08T14:59:38+0000",
            "content": "I think I'm liking more and more getting rid of SolrInputDocument's _childDocuments list.  I think it would simplify some special-casing logic in some places, and it would add more semantic information on the relationships.  There aren't that many non-test accessors of getChildDocuments() + addChildDocument() + addChildDocuments().  Some of those locations would melt away if hypothetically anonymous children were added under the field key _childDocuments_.  Mikhail Khludnev you work with block joins a lot; what do you think of this refactoring proposal?  I'm proposing removing explicit SolrInputField._childDocuments in favor of having fields contains child document values.\n\nIf this all sounds good, lets create a sub-task about this refactoring.\n\nJust an idea: imagine a new dummy FieldType called \"ChildDocument\".  In this way the schema could explicitly capture the information that child docs exist at what name, and wether it's single or multiValued.  This needn't come to pass until it's of use.  AddSchemaFieldsUpdateProcessorFactory and AddUpdateCommand.flatten/recUnwrap need to navigate the child documents without knowing at what names they will exist.  Perhaps it's reasonably efficient to just iterate all fields in the document to look, but if the schema declared which fields have child relationships, then it'd be faster. ",
            "author": "David Smiley",
            "id": "comment-16467523"
        },
        {
            "date": "2018-05-08T15:21:45+0000",
            "content": "mosh I think your suggestion of having a JSON child object represent a singular child document to the parent is fine but would be another issue.  You'd need to propose what params would enable the JSON loader to know this.  Perhaps it's simply the split? ",
            "author": "David Smiley",
            "id": "comment-16467548"
        },
        {
            "date": "2018-05-08T22:57:11+0000",
            "content": "I'm proposing removing explicit SolrInputField._childDocuments in favor of having fields contains child document values.\nDavid Smiley, I've found some by considerations by Hoss Man here. Personally I don't have strong opinion.  ",
            "author": "Mikhail Khludnev",
            "id": "comment-16468082"
        },
        {
            "date": "2018-05-09T19:43:07+0000",
            "content": "Quoting Hoss Man\u00a0here inline (hoping for his input):\nAre you suggesting we model child documents as objects (SolrInputDocuments i guess?) in a special field?\nYes. \u00a0Not as a special field, although anonymous children (those that don't have any particular label (no named relationship)) could use the childDocuments key as it's consistent with existing use of this label.\n \u00a0\n... what if i put child documents in multiple fields? would that signify the different types of child?\nYes indeed. \u00a0This is largely the point of this approach, since the current anonymous relationship has a loss of semantics in the relationship.\n\n\u00a0\nhow would solr model that in the (lucene) Documents when giving them to the InddexWriter?\nIn this issue, Moshe has proposed a labeled path field, e.g. \"post.comment\". \u00a0This\u00a0path would be added in an URP, or perhaps it would be done by AddUpdateCommand.flatten/recUnwrap right when the URP chain is done.\nHow would solr know how to order the children in from multiple fields/lists when creating the block?\nAh, I think that's a non-issue as they are indexed in the order given (notwistanding the hierarchy flattening with parent last). \u00a0If you meant how might the order be reconstituted later at retrieval time then we can rely on the docID order since they are kept in order and never broken up. \u00a0\nWouldn't the \"type of child\" information be better living in the child documents itself? (particularly since that \"type\" information needs to be in the child documents anyway so that the filter query for a BJQ can be specified.)\nUltimately it does in the generated Lucene Document. \u00a0\nIt also seems like it would require code that wants to know what children exist in a document to do a lot of work to find that out (need to iterate ever field in the SolrInputDocument and do reflection to see if they are child-documents or not)\nI looked at this; it's\u00a0AddSchemaFieldsUpdateProcessorFactory and AddUpdateCommand.flatten/recUnwrap. \u00a0I'm not concerned about the former as it's for schema-guessing; only the latter. \u00a0Perhaps this is no big deal; it's only the number of distinct field names in the average document? \u00a0Also if the schema contained special \"ChildDoc\" fields or some-such, then the schema could guide these code paths to know which field names to lookup in the incoming document.\nAnother concern off the top of my head is that a lot of existing code (including any custom update processors people might have) would assume those child documents are multivaluved field values and would probably break \u2013 hence a new method on SolrInputDocument seems wiser (code that doens't know about may not do what you want, but at least it won't break it)\nFixable on a case by case basis. \u00a0If this is worse than I imagine it is, then what URP would be the worst offender?\n\nIn summary, the current approach doesn't retain the semantic information of relationships, and I believe removing SolrInputFields.childDocuments will result in something simpler. \u00a0It also allows a cleaner separation between the format-specific input (JSON vs XML vs ...) and logic that should be ignorant to that.\n\nThe next-best alternative I can think of\u00a0that doesn't disturb\u00a0SolrInputDocument._childDocuments would be if hypothetically SolrInputDocument had overloaded\u00a0addChildDocument to accept a relationship string. \u00a0And the impl would add the child document along with mutating it to have the fields moshe has spoken of. \u00a0But this seems trappy to me since some methods would do this and the existing ones wouldn't, and so the format loader would need to be careful to always use or or the other. ",
            "author": "David Smiley",
            "id": "comment-16469375"
        },
        {
            "date": "2018-05-09T21:52:43+0000",
            "content": "Quoting Hoss Man here inline (hoping for his input):\n\nI don't have a lot of input / opinions on this general topic of childDocs at the moment...\n\nFrom skimming the issue description & last few comments I gather the push here is to make the \"arbitrary nested documents of different types\" experience/API for external clients simpler/easier/cleaner/sexier ... and to then have rules/conventions enforced by Solr (either via URPs or the underlying DUH, ... not certain which exactly is being suggested at the moment) handle the mapping of those \"external relationships\" into the internal nested childDocs w/new fields based on the original hierarchy.\n\nIe: an external client could psueod-code  documents that look like via parentDoc[ ...normalfields..., someFieldName => childDoc1[...], someOtherFieldName => childDoc2[...] ] and then something in solr would translate that into the internal  representation of nested documents by moving that relationship info into fields of the child documents ala... parentDoc[ ...normalfields..., _childDocuments_=>[ childDoc1[ ..., typeField => someFieldName], childDoc2[ ..., typeField => someOtherFieldName]] .  (And i guess, also add some ohter standard metadata fields to every doc like what the type of the ancestors are?)\n\nOr to put it another way: give solr the power to do internally what clients currently have to do externally to model this information.\n\nis that about right?\n\nThis approach seems fine in general ... off the top of my head the biggest concern i can think of is how how you make something like the JSON ContentLoader smart enough to tell the differnece between a \"child document expressed as JSON object/map (in a field)\" from \"atomic update (of a field) as a JSON object/map\" (not an issue with the XML ContentLoader since the <doc/> tag is distinct from the <lst/>\n\nFWIW: i don't particularly remember making those ~6year old comments/questions fromSOLR-3535 cited here, but i'm guessing my concerns at the time where just that these questions all needed answered in order to take that leap, and that until/unless we had those answers it seemed simplest to move forward with exposing a \"lower level\" modeling of child documents so users could take advantage of it ... if we're ready to answer those questions to support a cleaner/simpler API then by all means let's support it) ",
            "author": "Hoss Man",
            "id": "comment-16469560"
        },
        {
            "date": "2018-05-10T01:01:09+0000",
            "content": "is that about right?\n\nYes; well put Hossman.\n\nOne other variation on an approach is to keep the _childDocuments member of SolrInputDocument but have it be a Map<String,List<SolrInputDocument>> to capture the relationship name.  It would probably be less work, although some of the existing logic I spoke of would not \"melt away\" as I said.  Shrug. ",
            "author": "David Smiley",
            "id": "comment-16469779"
        },
        {
            "date": "2018-05-10T14:07:26+0000",
            "content": "It would be nice if you could just index JSON as is, like you can in elastic search, moving the responsibility from the user to Solr itself.\nSo, it is been a couple of years since I looked at Elasticsearch, but there were some things about their \"you can\" implementation:\n\n\tThey only accepted JSON, so did not have to deal with content coming in potentially in different formats (e.g. XML)\n\tTo\u00a0update the document, they had to retrieve the original json from the _source_ field, modify it, rewrite it (losing all original formatting/comments/etc) and reindex from scratch.\u00a0\n\tThat _source_ field was considered a bad idea for the production as it was very performance-limiting (just like any large stored field would be)\n\tThat,\u00a0AFAIK, is how they remembered whether the original field was single-valued or multi-valued, because internally they would have everything as magically multivalued\n\n\n\nPerhaps somebody who has a recent ES installation can do this quick test on what happens now, but - regardless - I think those original lessons may still be something to consider as we are planning Solr changes. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16470418"
        },
        {
            "date": "2018-05-10T15:10:28+0000",
            "content": "Alexandre, this feature is fundamentally about block-join / child-docs in Solr. \u00a0It isn't necessary to provide the entire JSON; Solr's JSON support already has an option for that \u2013 \"srcField\". \u00a0I really don't think this issue has anything to do with ES. ",
            "author": "David Smiley",
            "id": "comment-16470524"
        },
        {
            "date": "2018-05-10T16:53:26+0000",
            "content": "An additional thing to consider... besides block/join there's graph query, which potentially fetches a hierarchy of arbitrary depth (and additional complexity too). It might be interesting to think about doing something that's general here with the ability to express nesting and also cycles (for an example of a nice solution to cycles in JSON see https://github.com/jsog/jsog\u00a0if you're not already familiar with it). ",
            "author": "Gus Heck",
            "id": "comment-16470720"
        },
        {
            "date": "2018-05-10T16:57:55+0000",
            "content": "To clarify my comment above: I'm only advocating that the serialization of the result be general so that future work could use it for more than parent/child. I'm not suggesting that this ticket needs to provide nested documents for all possible cases. ",
            "author": "Gus Heck",
            "id": "comment-16470730"
        },
        {
            "date": "2018-05-13T08:02:01+0000",
            "content": "Alexandre Rafalovitch\nPerhaps somebody who has a recent ES installation can do this quick test on what happens now, but - regardless - I think those original lessons may still be something to consider as we are planning Solr changes.\naccording to ES docs there are three ways to index relations between docs.\nIt seems like the most flexible one is the parent-child, since it allows faster updates, with a slightly slower read performance, because the documents are not indexed in the same Lucene block, although they are indexed in the same shard. ",
            "author": "mosh",
            "id": "comment-16473401"
        }
    ]
}