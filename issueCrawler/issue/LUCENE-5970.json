{
    "id": "LUCENE-5970",
    "title": "Remove IndexReaderContext/CompositeReaderContext/AtomicReaderContext",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "This hierarchy is mega-confusing, has a overcomplicated hierarchy, and is full of bugs.\n\nFor example, in a two-segment index with one document in each:\n\n\n\ncontext.docbase: 1\ncontext.reader().getContext().docBase: 0\n\n\n\n\nThere is just no need for all this. We can replace it all with 'docbase'. For the esoteric stuff solr wants to do, like top-level crap, it can do this with its own filterreader instead, rather than pushing the complexity into lucene.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14171386",
            "author": "Yonik Seeley",
            "content": "I disagree that it's esoteric to want context, but if you really want to go down this path then just look back to when Solr did this by itself via SolrIndexReader.  It was removed as part of LUCENE-2831 ",
            "date": "2014-10-14T19:25:26+0000"
        },
        {
            "id": "comment-14171500",
            "author": "Uwe Schindler",
            "content": "I agree with Yonik here. I had a talk about IndexReader context on 2 Lucene conferences (in Boston and Berlin) and the need for the context is quite clear (in non-esoteric use cases).\n\nMy problem is only that the rename of the getContext() method on reader leads to this confusion. reader -> contex -> reader is unfortunately not bidirectional (otherwise the context would not be needed). Previously the method was named getTopReaderContext(), but this was also not easy to understand.\n\nThe getContext() method returns a context with the reader the method was called on as \"top\" reader.\n\nHardcoding things like docBases into the Reader itsself is impossible, because what happens if you wrap 3 DirectoryReaders with one MultiReader? From the viewpoint of the multireader the 3 subreaders and its leaf readers have different docbases than when seen from the 3 directory readers. This was the main reason to add the reader context. In general, calling \"getContext\" on a reader should only be done once and not suddenly from inside a query, because this is a bug.\n\nI will post a link to my explanatory talk here. ",
            "date": "2014-10-14T20:51:11+0000"
        },
        {
            "id": "comment-14171502",
            "author": "Uwe Schindler",
            "content": "Here is the talk: http://de.slideshare.net/lucenerevolution/is-your-index-reader-really-atomic-or-maybe-slow ",
            "date": "2014-10-14T20:53:05+0000"
        },
        {
            "id": "comment-14173131",
            "author": "Robert Muir",
            "content": "My problem is how special cases (like 3 DRs -> one multireader) completely screw up the api for the simple cases. In your example there, MultiReader could easily handle it itself: so the expert shit stays exactly where it belongs, instead of being in the way of all queries.\n\nThis api currently introduces useless indirection etc, in my opinion is totally unnecessary. \n\nThe problems with how hard it is to maintain some reader subclass, are more about how the IR api looked before (it was more complicated to subclass).\n\nIf you are so hellbent on keeping it, then fine, but keeping these contexts around doesnt mean we have to let them infect every api. I am happy to instead to try to remove them and keep them away at a fine-grained level from as many methods as possible, instead passing things like AtomicReader + docBase unless there is a clearly justified reason to do otherwise for each, individual, API. ",
            "date": "2014-10-15T23:16:28+0000"
        }
    ]
}