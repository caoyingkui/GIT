{
    "id": "SOLR-8282",
    "title": "Move Solr internal APIs to NIO2, and ban use of java.io.File",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "This is an umbrella issue for removing all usage of java.io.File from Solr, and replacing it with NIO2.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-12T13:56:10+0000",
            "author": "Alan Woodward",
            "content": "There are a whole bunch of smallish steps that can be taken here (SOLR-8260 and SOLR-8278 are the first ones).  I think it's important to try and do this piece-wise, as changing everything at once ends up with massive patches that are difficult to review.\n\nI see a number of steps here:\n\n\tFirstly, try and move our internal APIs that deal with file paths away from using Strings to represent those paths, using Path instead.  For example, SolrResourceLoader takes a String to point to its instance directory, as does CoreDescriptor.  I have a half-done patch for SRL already, which I will open a separate ticket for.  SolrCore.getDataDir() and CoreContainer.getSolrHome() are also candidates here.\n\tBan use of java.io.File in core, and try and load everything either through SolrResourceLoader or via SolrCore.getDataDir().\n\tBan use of java.io.File in core tests.  This will likely take the longest.\n\tBan use of Paths.get() in core and core tests, expect for a few places (eg SolrDispatchFilter).  This will mean that all file system resolution is done via SolrResourceLoader, and we can try and do interesting things like use the lucene exception-throwing file systems to test resilience.\n\n ",
            "id": "comment-15002125"
        }
    ]
}