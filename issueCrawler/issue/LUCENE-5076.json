{
    "id": "LUCENE-5076",
    "title": "Incorrect behavior for TestLaoBreakIterator.isWord()",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "4.3.1",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The incorrect behavior appears in version 4.3.1 and in revision\n1496055.\n\nMethod \"TestLaoBreakIterator.isWord\" contains this loop:\n\n\nfor (int i = start; i < end; i += UTF16.getCharCount(codepoint)) {\n    codepoint = UTF16.charAt(text, 0, end, start);\n\n    if (UCharacter.isLetterOrDigit(codepoint))\n        return true;\n}\n\n\n\nIt appears that the code is reading only one character again and\nagain, irrespective of \"i\".  This looks incorrect.  I think the code\ninside the loop should use \"i\", e.g., read characters based on \"i\".\n\nIf the intended behavior is to read only one character, then the loop\nshould not be necessary.\n\nA similar problem appears in method\n\"BreakIteratorWrapper.BIWrapper.calcStatus\" for this loop:\n\n\nfor (int i = begin; i < end; i += UTF16.getCharCount(codepoint)) {\n    codepoint = UTF16.charAt(text, 0, end, begin);\n\n    if (UCharacter.isDigit(codepoint))\n        return RuleBasedBreakIterator.WORD_NUMBER;\n    else if (UCharacter.isLetter(codepoint)) {\n        // TODO: try to separately specify ideographic, kana? \n        // [currently all bundled as letter for this case]\n        return RuleBasedBreakIterator.WORD_LETTER;\n    }\n}\n\n\n\nAgain, the computation inside the loop does not use \"i\", which seems\nincorrect.  It appears that the code is reading only one character\nagain and again, irrespective of \"i\".",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-24T16:22:07+0000",
            "content": "Thanks for reporting this: I think its a bug. ",
            "author": "Robert Muir",
            "id": "comment-13692107"
        }
    ]
}