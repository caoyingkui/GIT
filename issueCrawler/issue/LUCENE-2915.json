{
    "id": "LUCENE-2915",
    "title": "make CoreCodecProvider convenience class so apps can easily pick per-field codecs",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We already have DefaultCodecProvider, which simply registers all core codecs and uses Standard for all fields, but it's package private.\n\nWe should make this public, and name it CoreCodecProvider.",
    "attachments": {
        "LUCENE-2915.patch": "https://issues.apache.org/jira/secure/attachment/12470778/LUCENE-2915.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-02-10T14:18:56+0000",
            "content": "Simple patch.. I'll commit shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12993062"
        },
        {
            "date": "2011-02-10T15:04:19+0000",
            "content": "Hi Mike,\n\nI would prefer to remove the hardcoded core providers from source code. In Java is a standard mechanism (so called Service Provider framework) that can be used to find out all codecs that ship with all given JAR files in classpath. This makes it easy to add custom codecs, you just add the JAR file to class path and it is available.\n\nIf you like I could code the lookup code (unfortunately its only \"standardized\" in Java 6, but its available in a different public class since Java 1.2. It is mainly used by:\n\n\tXML, XSLT (all of javax.xml)\n\timage formats (png, gif,..)\n\t...\n\n\n\nIn general it works very simple:\nThe JAR file contains a MANIFEST that lists all classes that implement a codec under a key that is the class name of the abstract base class. A simple example is: if you plug xercesImpl.jar into your classpath, it's manifest contains a javax.xml.dom.DocumentBuilder=someClass. Based on this information DocumentuilderFactory returns a suitable implementation of a DOM parser. The same would be for Lucene, the MANIFEST of lucene-core.jar would contain a simple list of classes (all of them are returned to the provider!). If you then add the JAR file of contrib-misc to it, also the AppendingOnlyCoded would automatically be available.\n\nImplementation is quite simple: you can ask the service provider API for the above key (in our case a oal.index.Codec-like one) and the codec provier returns an Iterator of implementation classes. Those would get registered on Startup of DefaultCodecProvider. ",
            "author": "Uwe Schindler",
            "id": "comment-12993080"
        },
        {
            "date": "2011-02-10T15:07:38+0000",
            "content": "By the way, also Apache TIKA uses this mechanism for plugging in the list of document parsers. We can e.g. copy their impl. ",
            "author": "Uwe Schindler",
            "id": "comment-12993082"
        },
        {
            "date": "2011-02-10T15:13:01+0000",
            "content": "See this commit from TIKA-317: http://svn.apache.org/viewvc?view=revision&revision=911225\n\nIt also uses the Java ImageIO service provider helper classes available since Java 1.2 (and yes, also available in Android and Harmony!) ",
            "author": "Uwe Schindler",
            "id": "comment-12993085"
        },
        {
            "date": "2011-02-10T15:20:00+0000",
            "content": "This sounds like a great idea!  (Automatically discovering external CPs contained in JARs in the classpath).\n\nIf we can get that working, then I suppose we wouldn't need to hard-code our core codecs?  Ie, they'd \"naturally\" be discovered since they are in the core JAR.\n\nHow would it work for codecs that take args to their ctor?  EG pulsing takes an int cutoff (terms w/ <= that many positions are inlined into terms dict).\n\nI think this should be a new issue? ",
            "author": "Michael McCandless",
            "id": "comment-12993090"
        },
        {
            "date": "2011-02-10T15:28:33+0000",
            "content": "Parameters to codecs are a problem. The instantiation is done by the Java SPI API (see TIKA commit). In general maybe we should only register all codecs that are needed to open also existing indexes. E.g. if you have an index that requires an ExternalSmartHuperDuperCodec, IndexWriter/Reader should complain on opening this index. The user then should simply add the required jar file and then the Index should be possible to open.\n\nIn my opinion IndexReader should not take any config for this, but IndexWriter should maybe take a per-field config (which codec for which field). In my opinion, the whole codec configuration would then suddenly get much easier. Parameters like the pulsing paramter should be given to indexwriter in this configuration, but IndexReader should be able to read any index, as far as all referenced codecs are in classpath.\n\nDo I miss something? But I agree maybe we should open another issue. I can help with the SPI-impl and ANT manifest changes. ",
            "author": "Uwe Schindler",
            "id": "comment-12993094"
        },
        {
            "date": "2011-02-10T15:30:29+0000",
            "content": "Ah, by the way, in javax.xml, you can pass key-value pairs to your xml parser, changing functionality. If the parser that was loaded by SPI does not support this, it throws Ex. ",
            "author": "Uwe Schindler",
            "id": "comment-12993095"
        },
        {
            "date": "2011-02-10T15:39:47+0000",
            "content": "We could create an alternative, more user-friendly codec provider impl as you describe, but still keep the old one? ",
            "author": "Robert Muir",
            "id": "comment-12993096"
        },
        {
            "date": "2012-09-11T15:36:59+0000",
            "content": "PerFieldPostingsFormat solved this. ",
            "author": "Michael McCandless",
            "id": "comment-13453115"
        },
        {
            "date": "2013-05-10T10:33:30+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653942"
        }
    ]
}