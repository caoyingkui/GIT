{
    "id": "SOLR-7316",
    "title": "API to create a core is broken",
    "details": {
        "components": [
            "Server"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Steps To Reproduce\n\n\ncurl 'http://localhost:8983/solr/admin/cores?action=CREATE&name=new_core&instanceDir=new_core'\n\n\n\nExpected Result\n\nCreate a core called \"new_core\".\n\nActual Result\n\n\nError CREATEing SolrCore 'new_core': Unable to create core [new_core] Caused by: Can't find resource 'solrconfig.xml' in classpath or '/var/solr/data/new_core/conf'\n\nSomebody on solr-users tells me:\n\n\nThe CoreAdmin API requires that the instanceDir already exist, with a\nconf directory inside it that contains solrconfig.xml, schema.xml, and\nany other necessary config files.\n\nHuh? Where is this magical knowledge mentioned in the API documentation?\n\nAnother user on the list serve says:\n\n\nIn fact, yes. The thing to remember here is that you're using a much\nolder approach that had its roots in the pre-cloud days.\n\nThe whole point of creating APIs is to abstract out details that the caller doesn't need to know, and yet this API requires an understanding of Solr's internal file structure and history of the project? I'm speechless.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-28T18:59:41+0000",
            "author": "Shawn Heisey",
            "content": "In the general non-cloud case, where is the config going to come from?  A core cannot be created if it doesn't have a config, so you need a mechanism to provide it.\n\nNamed configsets are one solution that exists now in recent code:\n\nhttps://cwiki.apache.org/confluence/display/solr/Config+Sets\n\nI have had a somewhat complex system for my shared configs since version 1.4.0 that uses symlinks.  I may convert that to configsets when I upgrade. ",
            "id": "comment-14385470"
        },
        {
            "date": "2015-03-28T19:02:30+0000",
            "author": "Shawn Heisey",
            "content": "I have updated the reference guide page you linked to indicate that when using CREATE, it must be able to find a configuration, or the call will not succeed.  I think that takes care of this issue.\n\nA question for my fellows: I included this sentence in the \"warning\" section:  \"One thing you COULD do is use config and schema parameters that point at absolute paths, but this can lead to confusing configurations unless you fully understand what you are doing.\"  Is this a correct statement? ",
            "id": "comment-14385474"
        },
        {
            "date": "2015-03-28T19:30:29+0000",
            "author": "Mark Haase",
            "content": "Shawn, thanks for updating the doc, it is much clearer now that the conf directory must be set up before making the API call. \n\n\nIn the general non-cloud case, where is the config going to come from? A core cannot be created if it doesn't have a config, so you need a mechanism to provide it.\n\nI realize this problem is obvious to you, but you're a Solr expert. I'm not. I'm a normal user, like many, many of the other normal users out here.\n\nI have no idea where the config comes from, nor do I care. Lots of servers come with a default config that can be used when the user doesn't specify one. If the documentation doesn't say I need one, then I assume that I don't need one. When I call an HTTP API, I expect that success does not depend on me having filesystem access to the host machine or having intimate knowledge of the structure of the /conf directory.\n\nI can SSH into the machine to set up conf files, but at that point I'd rather just run `solr create -c foo`. It's easy, only takes one step, and doesn't require me to have any knowledge of how Solr works under the hood. That's the whole point of abstraction, right?!\n\nI see that `solr create -c foo` actually does use the HTTP API, so clearly there is a need for it. That's why I suggested that it should be marked PRIVATE, as in, don't use this API unless you really know what you're doing. Normal people should use `solr create -c foo` or should move to cloud mode.\n\nBetter yet, split this into 2 APIs. One API is REGISTER and it takes an existing /conf dir and registers it as a new core \u2014 it does not have a configSet argument. The other is CREATE and it requires a configSet argument so that it can truly create a core without the caller having to escalate privileges and do a magical dance.\n\nThe most annoying thing by far about tis API is that, Solr does include a perfectly good default configuration in \"basic_configs\". In fact, when you use `solr create -c foo`, IT USES THAT DEFAULT CONFIGURATION! So why doesn't the CREATE API also use the same default configuration? What's the huge difference?\n\nAll of you guys that are Solr experts, please take a step back and see this through the eyes of somebody who's not tracking every single 0.0.1 release or every single commit on master. I am only following the instructions in the Solr wiki: I downloaded a ZIP, ran the installer, and I want to run a single node. And guess what? It's been a total pain in my ass at every single step along the way, and everytime I ask a question the reply is basically, \"well duh WTF are you doing that for?\" It's frustrating and insulting.  ",
            "id": "comment-14385497"
        },
        {
            "date": "2015-03-28T20:33:19+0000",
            "author": "Shawn Heisey",
            "content": "We want it to be as easy to use as possible.  That said, we are saddled with years of history to contend with.\n\nWriting features that will appeal to new users without alienating the experienced user requires a lot of careful thought, and even more careful coding.  I will admit that sometimes we don't give enough thought to the complete novice user in what we do ... it's hard to take a step back and look at it from another point of view.\n\nYou've given great feedback, and pointed out some serious flaws in our documentation.  You may encounter some grumbling, but most of us appreciate the pointers.  I can tell you that I appreciate it. ",
            "id": "comment-14385515"
        },
        {
            "date": "2015-03-28T22:06:22+0000",
            "author": "Mark Haase",
            "content": "Thanks, Shawn.\n\n\nI will admit that sometimes we don't give enough thought to the complete novice user in what we do\n\nI have to clarify a misperception here: I'm not a complete novice to Solr, just new to Solr 5. I used Solr quite a bit back in the 1.4 days, and I spent a lot of time back then carefully crafting my schema.xml, declaring dynamic fields, etc. (Note that most of what I did back in those days is no provided out-of-the-box in the Solr basic_config, which would be serendipitous if I could figure out how to actually use basic_config.) I have several applications still in production, quietly humming along with Solr 1.4.\n\nSo in some ways, I'm both the novice user and the experienced user.\n\nI'm not insisting that it needs to be brain-dead easy. This is a complicated domain, and I'm willing to put in time reading and learning. I'm not objecting to a learning curve; I'm objecting to a culture of shoddy documentation and \"works for me #wontfix\" responses to bugs. It appears that none of the Solr expert guys are using Solr instances installed by the installation script, as evidenced by this issue where the response is, \"why did you set your SOLR_HOME to /var/solr/data?\" Umm... I didn't. That's the installation script's default. ",
            "id": "comment-14385545"
        },
        {
            "date": "2015-03-28T22:10:45+0000",
            "author": "Shawn Heisey",
            "content": "There's a LOT of legacy baggage ... Solr has been around for more than ten years, Lucene for several years longer.  When you're in the trenches, you might not even notice it's there ... so when new features are implemented, that work is often done without thinking about legacy APIs.\n\nWhen we DO notice divergence between new functionality and legacy baggage, we try to rectify the situation, but the work required is difficult and huge, and tends to be very hard to keep in sync with the work that other people are doing at the same time.\n\nI have no idea where the config comes from, nor do I care. \n\nI would wager that this point of view will not survive beyond your first production deployment.  The expert users definitely care, and they do not want that to be controlled by us, they want it to be controlled by them.  Can we do better, and give users a place to put the config they'll get by default?  You bet we can, and I think you'll probably see that in the near future.\n\nThe most annoying thing by far about tis API is that, Solr does include a perfectly good default configuration in \"basic_configs\". In fact, when you use `solr create -c foo`, IT USES THAT DEFAULT CONFIGURATION! So why doesn't the CREATE API also use the same default configuration? What's the huge difference?\n\nThe bin/solr script is a very recent innovation.  It first appeared in 4.10.0, and only in 5.0.0 has it started to become usable.  The \"basic_configs\" directory doesn't exist in any of the Solr versions that I currently use in production, which are 4.2.1, 4.6.1, 4.7.2. and 4.9.1.  It was created as part of the startup script work.  The bin/solr script knows how to use basic_configs ... but the Solr internal APIs have absolutely no idea that it exists.  \n\nWe are in the process of making Solr into a completely standalone application that is fully aware of absolutely everything contained in its directory structure, but we are hogtied by dependence on historical truths in the current implementation.  The bin/solr script is the first step in that migration.\n\nI'm aware that all I'm really giving here is excuses.  We are aware of many deficiencies that we want to correct, and users inform us of problems we might not have known about.  It takes time to correct course on a large project like Solr. ",
            "id": "comment-14385550"
        },
        {
            "date": "2015-03-28T23:38:22+0000",
            "author": "Mark Haase",
            "content": "\nI would wager that this point of view will not survive beyond your first production deployment. The expert users definitely care, and they do not want that to be controlled by us, they want it to be controlled by them.\n\nShawn, consider Apache Web Server.\n\n\n\tDoes it come with a default config? Yes\n\tDoes the default config serve a basic purpose: Yes, Apache is configured to serve files over HTTP\n\tWould I typically take that default config to production? No\n\n\n\nHow about OpenSSH?\n\n\n\tDoes it come with a default config? Yes\n\tDoes the default config serve a basic purpose: Yes, OpenSSH is configured to allow remote login\n\tWould I typically take that default config to production? No\n\n\n\nHow about Elastic Search?\n\n\n\tDoes it come with a default config? Yes\n\tDoes the default config serve a basic purpose: Yes, I can start indexing documents and searching right away.\n\tWould I typically take that default config to production? Dunno, I haven't taken ES into production. It's probably a \"no\" all the same.\n\n\n\nI had never used Elastic Search up until a few minutes ago. In order to make a point, I googled \"elastic search installation\", clicked the first result, and followed the instructions. That was at 7:27 PM EST. By 7:33, I had index 3 documents in the tutorial and had performed several searches against those documents.\n\nNumber of configuration files I need to be aware of: 0.\n\nNow THAT'S an out-of-the-box experience. Wow.\n\nHow about Solr?\n\n\n\tDoes it come with a default config? Yes and no; it depends on whether you're logged into a shell or using the HTTP API.\n\tDoes the default config serve a basic purpose: Yes, but only if you're using the shell. HTTP API doesn't do anything OOTB.\n\tWould I typically take that default config to production? No, but if I could manipulate the schema over HTTP, then yes!\n\n\n\nDo you understand why I filed a bug report that the API is broken? ",
            "id": "comment-14385568"
        },
        {
            "date": "2015-03-28T23:54:01+0000",
            "author": "Shawn Heisey",
            "content": "Excellent points and examples.\n\nYour concerns will not be ignored.  The wheels are already in motion.  I wish I could say that we'll have it to you by the next release, but I don't think that's very realistic. ",
            "id": "comment-14385571"
        },
        {
            "date": "2017-09-28T01:00:13+0000",
            "author": "Steve Rowe",
            "content": "Can this issue be resolved now that there is a default configset (SOLR-10272) ? ",
            "id": "comment-16183515"
        },
        {
            "date": "2017-10-04T23:22:37+0000",
            "author": "Jason Gerlowski",
            "content": "From my reading of the JIRA, there are two aspects of Mark's concerns here:\n\n1. There should be a default configSet.  As you pointed out Steve, this is done.\n2. For user-friendliness, the CreateCores API should use the default configset _default when the configSet parameter isn't specified.  This hasn't been addressed, one way or another.\n\nThe create-cores API still fails with the same error message originally reported by Mark:\n\n[~/c/l/solr] $ curl -ilk 'http://localhost:8983/solr/admin/cores?action=CREATE&name=new_core&instanceDir=new_core'\n{\n  \"responseHeader\":{\n    \"status\":400,\n  \"error\":{\n    \"metadata\":[\n      \"error-class\",\"org.apache.solr.common.SolrException\",\n    \"msg\":\"Error CREATEing SolrCore 'new_core': Unable to create core [new_core] Caused by: Can't find resource 'solrconfig.xml' in classpath or '/home/asdf/checkouts/lucene-solr/solr/server/solr/new_core'\",\n    \"code\":400}}\n\n\n\nNot that I necessarily agree with Mark's points.  Quietly allowing a core to be created with the default configset _would make getting started a little less painless.  But it also introduces trappy behavior for those who just messed up their API call and forgot the parameter.  There's tradeoffs here.\n\nSo I don't necessarily agree, but it's tough to close this, unless you were going to close it as \"wont-fix\". ",
            "id": "comment-16192194"
        },
        {
            "date": "2017-11-21T21:47:00+0000",
            "author": "Jaya Naga Bhavana",
            "content": "Hello,\n\nIs this issue resolved?\nI am working on a project where the user should be able to create multiple core's from the projects UI.\nso I came up with an idea of using the above mentioned curl command.\nAnd after a lot of research I am still not able to create the core with curl command it always give me an error that :\n\nError CREATEing SolrCore 'coreX': Unable to create core [coreX] Caused by: Can't find resource 'solrconfig.xml' in classpath or 'C:\\solr-6.6.0\\server\\solr\\coreX'\n ",
            "id": "comment-16261537"
        },
        {
            "date": "2017-11-21T22:11:08+0000",
            "author": "Erick Erickson",
            "content": "No, nor is there any consensus on what should be done. For SolrCloud, the process has been resolved for creating collections, but for stand-alone Solr you have to put the configurations \"in the right place\" to create a core with the core admin API.\n\nFor that matter, the create core API has never been broken, it's worked as expected. The question is whether that expectation should be changed. ",
            "id": "comment-16261577"
        }
    ]
}