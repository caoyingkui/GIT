{
    "id": "LUCENE-3957",
    "title": "Document precision requirements of setBoost calls",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/javadocs"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.5",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "The behaviour of index-time boosts seems pretty erratic (e.g. a boost of 8.0 produces the exact same score as a boost of 9.0) until you become aware that these factors end up encoded in a single byte, with a three-bit mantissa. This consumed a whole day of research for us, and I still believe we were lucky to spot it, given how deeply dug into the code & documentation this information is.\n\nI suggest adding a small note to the JavaDoc of setBoost methods in Document, Fieldable, FieldInvertState, and possibly AbstractField, Field, and NumericField.\n\nSuggested text:\n\"Note that all index-time boost values end up encoded using Similarity.encodeNormValue, with a 3-bit mantissa \u2013 so differences in the boost value of less than 25% may easily be rounded away.\"",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-05T12:23:55+0000",
            "content": "I don't think we should put docs there in those classes:\n\nin trunk you can use however many bytes you want for this,\nso the text would be wrong anyway. \n\nits an implementation detail of the default similarity that \nit uses a single byte, and it documents it does this already. ",
            "author": "Robert Muir",
            "id": "comment-13247185"
        },
        {
            "date": "2012-04-06T09:52:44+0000",
            "content": "I don't think we should put docs there in those classes:\n+1 thats a very long standing impl detail. If it is not on the wiki in the FAQ we should add it or maybe add a pitfalls section to the wiki. ",
            "author": "Simon Willnauer",
            "id": "comment-13248215"
        },
        {
            "date": "2012-04-18T17:36:47+0000",
            "content": "Wherever, but please increase exposure of this detail, for the sake of those who're coming in later.\n\nIt's a VERY long and winded way between setting a $docBoost in a SolR dataSource transformer script and the current location of this information. Would be kind of acceptable if the value was held with a couple of decimal digits of precision, but the default (3-bit) implementation doesn't hold even ONE digit, making the behaviour really shocking \u2013 specially since the boost value is not directly visible, but only through its impact on search scores. ",
            "author": "Jordi Salvat i Alabart",
            "id": "comment-13256736"
        },
        {
            "date": "2012-04-18T18:02:53+0000",
            "content": "I don't understand why its long and winded, its documented in tons of places in lucene,\nin-fact its actually over-specified in file-formats, for example, because even in 3.5\nthe encoding of the normalization byte is an implementation detail of the Similarity:\nits just that you can only use a single byte.\n\nIn trunk its definitely overspecified since besides the above, the Similarity can use\nmore than a byte if it wants to.\n\n1. Main website (scoring): \nhttp://lucene.apache.org/core/old_versioned_docs/versions/3_5_0/scoring.html\n\nIndexing time boosts are preprocessed for storage efficiency and written to the directory (when writing the document) in a single byte (!) as follows.\n...\nThis composition of 1-byte representation of norms...\n...\nEncoding and decoding of the resulted float norm in a single byte are done by the static methods of the class Similarity: encodeNorm() and decodeNorm(). Due to loss of precision, it is not guaranteed that decode(encode(x)) = x, e.g. decode(encode(0.89)) = 0.75. At scoring (search) time, this norm is brought into the score of document as norm(t, d), as shown by the formula in Similarity. \n\n\n\n2. Main website (file formats):\nhttp://lucene.apache.org/core/old_versioned_docs/versions/3_5_0/fileformats.html#Normalization%20Factors\n\nEach byte encodes a floating point value. Bits 0-2 contain the 3-bit mantissa, and bits 3-8 contain the 5-bit exponent.\n\nThese are converted to an IEEE single float value as follows: \n...\n\n\n\n3. Javadocs (Similarity): \nhttp://lucene.apache.org/core/old_versioned_docs/versions/3_5_0/api/core/org/apache/lucene/search/Similarity.html\n\nHowever the resulted norm value is encoded as a single byte before being stored. At search time, the norm byte value is read from the index directory and decoded back to a float norm value. This encoding/decoding, while reducing index size, comes with the price of precision loss...\n \nCompression of norm values to a single byte saves memory at search time, because once a field is referenced at search time, its norms - for all documents - are maintained in memory.\n \nThe rationale supporting such lossy compression of norm values is that given the difficulty (and inaccuracy) of users to express their true information need by a query, only big differences matter. \n\n\n ",
            "author": "Robert Muir",
            "id": "comment-13256760"
        },
        {
            "date": "2018-09-19T13:49:33+0000",
            "content": "We don't support index-time boosts anymore. ",
            "author": "Adrien Grand",
            "id": "comment-16620608"
        }
    ]
}