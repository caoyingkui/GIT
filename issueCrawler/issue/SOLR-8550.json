{
    "id": "SOLR-8550",
    "title": "Add asynchronous DaemonStreams to the Streaming API",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Currently all streams in the Streaming API are synchronously pulled by a client.\n\nIt would be great to add the capability to have asyncronous DaemonStreams that live within Solr that can push content as well. This would facilite large scale alerting and background aggregation use cases.",
    "attachments": {
        "SOLR-8550.patch": "https://issues.apache.org/jira/secure/attachment/12782681/SOLR-8550.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-14T17:28:15+0000",
            "author": "Joel Bernstein",
            "content": "The general design is to add a new DaemonStream which will be handled differently by the /stream handler. When the /stream handler sees an DaemonStream it will open it and just keep it around in a memory. The DaemonStream will have a thread that wakes up periodically and opens, reads, and closes it's underlying stream. Syntax would look like this:\n\n\ndaemon(alert())\n\n\n\nThe AlertStream would be a new stream created in a different ticket. \n\nParallel async streams should work fine as well, facilitating very large scale alerting systems:\n\nparallel(daemon(alert()))\n\n\n\nIn the parallel example the DaemonStream would be pushed to worker nodes where they would live.\n\nAn example of background aggregation:\n\n\nparallel(daemon(update(rollup(...))))\n\n ",
            "id": "comment-15098459"
        },
        {
            "date": "2016-01-16T04:42:20+0000",
            "author": "Joel Bernstein",
            "content": "First attempt at the DaemonStream. No tests yet.  ",
            "id": "comment-15102979"
        },
        {
            "date": "2016-01-16T04:54:22+0000",
            "author": "Joel Bernstein",
            "content": "Added an Info Tuple to report stats kept by the DaemonStream ",
            "id": "comment-15102985"
        },
        {
            "date": "2016-01-18T17:14:28+0000",
            "author": "Kevin Risden",
            "content": "Any thoughts about how a daemon stream be stopped/started/cancelled/removed?  ",
            "id": "comment-15105538"
        },
        {
            "date": "2016-01-18T17:48:47+0000",
            "author": "Joel Bernstein",
            "content": "I was thinking of adding simple admin commands to the /stream handler (list, stop, start, remove etc..)\n\nThe DeamonStreams are also meant to be held onto outside of Solr by another application that wants continous streaming. ",
            "id": "comment-15105576"
        },
        {
            "date": "2016-01-18T17:58:33+0000",
            "author": "Joel Bernstein",
            "content": "To give you an idea of where this is eventually headed, imagine a system with Daemons that are building models:\n\n\ndaemon(update(logit()))\n\n\n\nAnd then other Daemons that are alerting based on those models:\n\n\ndaemon(alert())\n\n\n\nThis is basically an AI driven alerting system. ",
            "id": "comment-15105594"
        },
        {
            "date": "2016-01-18T19:31:24+0000",
            "author": "Joel Bernstein",
            "content": "New patch begins the work on the /stream handler. Initial patch just starts the DaemonStream and puts it in a map. A Tuple is returned which includes the core where the Daemon started. In parallel mode this will return a Tuple from each worker the Daemon was started on. ",
            "id": "comment-15105721"
        },
        {
            "date": "2016-01-18T22:52:01+0000",
            "author": "Joel Bernstein",
            "content": "Added redimentary API for stoping, starting and listing DaemonStreams on the /stream handler ",
            "id": "comment-15105920"
        },
        {
            "date": "2016-01-18T23:02:36+0000",
            "author": "Joel Bernstein",
            "content": "Added Thread state to info Tuple.  \n\nI think the next step is to start adding tests. ",
            "id": "comment-15105928"
        },
        {
            "date": "2016-01-21T20:53:29+0000",
            "author": "Joel Bernstein",
            "content": "New patch making the DaemonStream Expressible ",
            "id": "comment-15111274"
        },
        {
            "date": "2016-01-21T22:31:26+0000",
            "author": "Joel Bernstein",
            "content": "Added a simple test that iterates 10 times over a rollup. The data doesn't change underneath so the values are the same each time. This tests the internal thread and queue setup of the DaemonStream. It also demonstrates how a DaemonStream.read() blocks until there is new data in the queue populated by the underlying Stream. \n\nThe RollupStream needed to be changed so that it resets it's state upon closing to support calling open() and close() multiple times on the same stream. Any Stream wrapped by the DaemonStream will need to do the same. ",
            "id": "comment-15111516"
        },
        {
            "date": "2016-01-21T23:14:53+0000",
            "author": "Joel Bernstein",
            "content": "Expanded the tests to show that the rollup count changed after a new document was added to the index. The daemon stream was left open and the changed rollup count was streamed out after the new document was indexed.\n\nThis tests the main functionality of the DaemonStream.\n\nThe next step is to test the DaemonStream running inside of the /stream handler. ",
            "id": "comment-15111581"
        },
        {
            "date": "2016-01-22T00:38:02+0000",
            "author": "Joel Bernstein",
            "content": "New patch that tests parallel DaemonStream's, running inside of the /stream handler, updating a collection. Still need to expand the tests to include the different actions that are supported. ",
            "id": "comment-15111687"
        },
        {
            "date": "2016-01-22T01:10:57+0000",
            "author": "Joel Bernstein",
            "content": "New patch tests the list action.\n\nI think the next step is manual testing. If that looks good I think this ready to commit. ",
            "id": "comment-15111725"
        },
        {
            "date": "2016-01-22T03:25:49+0000",
            "author": "Joel Bernstein",
            "content": "Added StreamExpressionToExpression test ",
            "id": "comment-15111859"
        },
        {
            "date": "2016-01-22T17:46:07+0000",
            "author": "Joel Bernstein",
            "content": "Added error logging and a test that ensures the DaemonStream thread has been stopped when using the stop action. This also exercises the list action.\n\nThese tests are passing every time now locally and a whole lot of things have to go right for these tests to pass. I'm feeling pretty good about committing this. ",
            "id": "comment-15112763"
        },
        {
            "date": "2016-01-22T19:07:17+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1726291 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1726291 ]\n\nSOLR-8550: Add asynchronous DaemonStreams to the Streaming API ",
            "id": "comment-15112888"
        }
    ]
}