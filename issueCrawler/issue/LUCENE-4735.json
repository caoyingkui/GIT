{
    "id": "LUCENE-4735",
    "title": "IBM J9 JVM bug causes test failure in Kuromoji's TestExtended",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Note that this is not a Lucene bug; it's a JVM bug, but I wanted to track it in Lucene as well in case others hit it.\n\nI noticed this test frequently fails when running under IBM's J9 JVM (1.6.0) ... and I finally tracked down the root cause and made a small test case, eg on trunk, rev 1439839, if you run:\n\n\n  ant test -Dtestcase=TestExtendedMode -Dtestmethod=testRandomHugeStrings -Dtests.seed=26D2B352E9603950\n\n\n\nit fails with this:\n\n\n[junit4:junit4]    > Throwable #1: java.lang.IllegalArgumentException: startOffset must be non-negative, and endOffset must be >= startOffset, startOffset=4272,endOffset=4271\n[junit4:junit4]    > \tat __randomizedtesting.SeedInfo.seed([26D2B352E9603950:BEF1D491B7168518]:0)\n[junit4:junit4]    > \tat org.apache.lucene.analysis.tokenattributes.OffsetAttributeImpl.setOffset(OffsetAttributeImpl.java:45)\n[junit4:junit4]    > \tat org.apache.lucene.analysis.ja.JapaneseTokenizer.incrementToken(JapaneseTokenizer.java:463)\n[junit4:junit4]    > \tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkAnalysisConsistency(BaseTokenStreamTestCase.java:635)\n[junit4:junit4]    > \tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:546)\n[junit4:junit4]    > \tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:447)\n[junit4:junit4]    > \tat org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:375)\n[junit4:junit4]    > \tat org.apache.lucene.analysis.ja.TestExtendedMode.testRandomHugeStrings(TestExtendedMode.java:76)\n\n\n\nI've seen other analyzer tests fail with similar exceptions.\n\nI dug in, and found that there's a bug in TreeMap.subMap, and it's easily reproduced with a small test case, which I'll attach.  I'll also open an issue with J9.\n\nI also found a workaround that seems to sidestep the bug for Lucene.",
    "attachments": {
        "LUCENE-4735.patch": "https://issues.apache.org/jira/secure/attachment/12567041/LUCENE-4735.patch",
        "TestTreeMap2.java": "https://issues.apache.org/jira/secure/attachment/12567042/TestTreeMap2.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-29T20:38:50+0000",
            "content": "Patch w/ workaround for Lucene.  If you use TreeMap.lowerEntry instead of TreeMap.subMap.lastKey then it seems to sidestep the issue. ",
            "author": "Michael McCandless",
            "id": "comment-13565779"
        },
        {
            "date": "2013-01-29T20:40:15+0000",
            "content": "Simple standalone test... if you run with J9 1.6, or at least with this version:\n\nJava(TM) SE Runtime Environment (build pxa6460sr9fp2ifix-20111111_05(SR9 FP2+IV03622+IV02378+IZ99243+IZ97310+IV00707))\nIBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr9-20111111_94827 (JIT enabled, AOT enabled)\nJ9VM - 20111111_094827\nJIT  - r9_20101028_17488ifx45\nGC   - 20101027_AA)\nJCL  - 20110727_04\n\n\n\nThen the test will print:\n\nFAILED: subMap.lastKey=4545 but should be 4576\n\n\n\nBut with Oracle Java 1.6 it prints \"OK\". ",
            "author": "Michael McCandless",
            "id": "comment-13565783"
        },
        {
            "date": "2013-01-29T20:43:01+0000",
            "content": "LOL\n\n+1 to commit the workaround, its just MockCharFilter (which is not fast!) ",
            "author": "Robert Muir",
            "id": "comment-13565785"
        },
        {
            "date": "2013-01-29T21:18:11+0000",
            "content": "[trunk commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1440137\n\nLUCENE-4735: workaround IBM J9 JVM bug ",
            "author": "Commit Tag Bot",
            "id": "comment-13565820"
        },
        {
            "date": "2013-01-29T21:28:11+0000",
            "content": "[branch_4x commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1440143\n\nLUCENE-4735: workaround IBM J9 JVM bug ",
            "author": "Commit Tag Bot",
            "id": "comment-13565829"
        },
        {
            "date": "2013-01-31T14:30:38+0000",
            "content": "OK, this was fixed in IBM's JVM, sometime between this version:\n\njava version \"1.6.0\"\nJava(TM) SE Runtime Environment (build pxa6460sr9fp2ifix-20111111_05(SR9 FP2+IV03622+IV02378+IZ99243+IZ97310+IV00707))\nIBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr9-20111111_94827 (JIT enabled, AOT enabled)\nJ9VM - 20111111_094827\nJIT  - r9_20101028_17488ifx45\nGC   - 20101027_AA)\nJCL  - 20110727_04\n\n\n\nand this one:\n\n\njava version \"1.6.0\"\nJava(TM) SE Runtime Environment (build pxa6460sr12-20121025_01(SR12))\nIBM J9 VM (build 2.4, JRE 1.6.0 IBM J9 2.4 Linux amd64-64 jvmxa6460sr12-20121024_126067 (JIT enabled, AOT enabled)\nJ9VM - 20121024_126067\nJIT  - r9_20120914_26057\nGC   - 20120928_AA)\nJCL  - 20121014_01\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13567668"
        }
    ]
}