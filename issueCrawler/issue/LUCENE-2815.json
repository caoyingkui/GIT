{
    "id": "LUCENE-2815",
    "title": "MultiFields not thread safe",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "MultiFields looks like it has thread safety issues",
    "attachments": {
        "LUCENE-2815.patch": "https://issues.apache.org/jira/secure/attachment/12466437/LUCENE-2815.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-12-16T00:49:35+0000",
            "content": "So I started looking into MultiFields more closely, just from a performance perspective, and noticed a couple of thread safety issues:\n\n\tMultiFields is reused (a good thing), but isn't safely published to other threads.\n\tMultiFields has a HashMap that is used and modified unsynchronized to cache MultiTerms instances\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-12971909"
        },
        {
            "date": "2010-12-16T01:40:16+0000",
            "content": "It looks like MultiReaderBits also has issues with safe object publication. ",
            "author": "Yonik Seeley",
            "id": "comment-12971930"
        },
        {
            "date": "2010-12-16T12:10:50+0000",
            "content": "Ugh, nice finds Yonik!  We should fix these.\n\nMaybe MultiFields should just pre-build its Map<String,Term> on init?\n\nYou're right, we do reuse MultiFields today (we stuff the instance of MultiFields onto the IndexReader with IndexReader.store/retrieveFields), but I wonder whether we really should?  (In fact I thought at one point we decided to stop doing that... yet, we still are... can't remember the details; maybe perf hit was too high eg for MTQs/Solr facets/etc.).\n\nWhat do we need to do to make the publication safe?  Is making IR.store/retrieveFields sync'd sufficient?\n\nAside: Java concurrency is a mess.  I understand why JMM is needed, to get good perf on modern CPUs, but allowing the low level CPU cache coherency requirements to bubble all the way up to complex requirements in the language itself, is a disaster. ",
            "author": "Michael McCandless",
            "id": "comment-12972057"
        },
        {
            "date": "2010-12-16T15:06:03+0000",
            "content": "but I wonder whether we really should? (In fact I thought at one point we decided to stop doing that... yet, we still are... can't remember the details; maybe perf hit was too high eg for MTQs/Solr facets/etc.).\n\nIt wouldn't be solr facets... that code asks for fields() once up front (per facet request) and the rest of the work will dwarf that.\nI think there probably are a lot of random places that use it where the overhead could be significant.  For example IndexReader.deleteDocuments(), ParallelReader, FuzzyLikeThisQuery, and anyone else that uses any of the static methods on Field on a non-segment reader.\n\nWhat do we need to do to make the publication safe? Is making IR.store/retrieveFields sync'd sufficient?\n\nMore than sufficient.  A volatile would also work fine provided that a race shouldn't matter (i.e. more than one MultiFields object could be constructed).\n\nMaybe MultiFields should just pre-build its Map<String,Term> on init?\n\nOuch... those folks with 1000s of fields wouldn't be happy about that. ",
            "author": "Yonik Seeley",
            "id": "comment-12972096"
        },
        {
            "date": "2010-12-16T22:37:26+0000",
            "content": "It looks like MultiReaderBits also has issues with safe object publication. \n\nActually, it looks like this one is OK with most of our current code.\nSegmentReader.getDeletedDocs() returns an object stored in a volatile, so that counts as a safe publish.  Other implementations seem to either throw an exception or directly call a segment reader.  One exception is instantiated index (I think).\n\nWe can't call getDeletedDocs() just once up-front, because an IndexReader may still be used to delete documents. ",
            "author": "Yonik Seeley",
            "id": "comment-12972258"
        },
        {
            "date": "2010-12-16T23:17:37+0000",
            "content": "I was going to fix InstantiatedIndex, but while I was in there, I saw a lot of non-threadsafe code.  I think that really deserves it's own issue.\nWhat range of docs is InstantiatedIndex faster for, and is it something we want to continue to maintain? ",
            "author": "Yonik Seeley",
            "id": "comment-12972281"
        },
        {
            "date": "2010-12-17T02:14:12+0000",
            "content": "Here's a patch that uses a ConcurrentHashMap for the Terms cache, and makes IndexReader.fields volatile.\n\nThat IndexReader.fields variable is just the type of stuff that could just be stored in a generic cache on the IndexReader, if/when we get something like that. ",
            "author": "Yonik Seeley",
            "id": "comment-12972337"
        },
        {
            "date": "2010-12-17T14:55:34+0000",
            "content": "Hmmm, this patch causes test failures because ConcurrentHashMap doesn't handle null values. ",
            "author": "Yonik Seeley",
            "id": "comment-12972505"
        },
        {
            "date": "2010-12-17T15:03:46+0000",
            "content": "Here's an updated patch that avoids containsKey() followed by get() (just an optimization)\nand avoids caching null Terms instances.  This is the right thing to do anyway, since one could easily blow up the cache with fields that don't exist. ",
            "author": "Yonik Seeley",
            "id": "comment-12972509"
        },
        {
            "date": "2010-12-17T15:26:36+0000",
            "content": "committed. ",
            "author": "Yonik Seeley",
            "id": "comment-12972518"
        }
    ]
}