{
    "id": "LUCENE-5663",
    "title": "Fix FSDirectory.open API",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "Spinoff from LUCENE-5658\n\n\nThis does not use NIOFSDir! open() is a static factory method on FSDirectory, just inherited to NIOFSDirectory. \n\nI think its confusing we have this method on FSDirectory, so its visible in subclasses. We should at least consider doing this in another way so its not confusing.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13994475",
            "author": "Shai Erera",
            "content": "We can have FSDirectoryFactory, but I usually sort these out in eclipse by turning on a compilation warning \"indirect access to static member\". I know it's not a generic solution though ... so Factory? ",
            "date": "2014-05-11T08:46:57+0000"
        },
        {
            "id": "comment-14000389",
            "author": "Hoss Man",
            "content": "...This does not use NIOFSDir...\n\nExcept that it might: that's the point, isn't it? that it's a factory method that gives you the best FSDir impl supported on your system?\n\nEven if you see it in the method list for NIOFSDirectory, and even if you ignore the method javadocs, the return type should tip you off that you aren't garunteed to get an NIOFSDir back.\n\nWe can have FSDirectoryFactory,...\n\nI'm not convinced a new factory class is really neccessary \u2013 It seems like it would probably be enough just to rename the method to make it more obvious that this method will return some FSDirectory that we recommend based on your OS...\n\n\npublic static FSDirectory openRecommendedFSDirectory(File) throws IOException\n\n ",
            "date": "2014-05-16T22:09:01+0000"
        },
        {
            "id": "comment-14000584",
            "author": "Robert Muir",
            "content": "I dont think a hellacious long method name solves anything.\n\nI think we should just 'shadow' the static method on NIO/MMAP to open NIO and MMAP respectively.  ",
            "date": "2014-05-17T01:06:52+0000"
        },
        {
            "id": "comment-14000611",
            "author": "Hoss Man",
            "content": "I think we should just 'shadow' the static method on NIO/MMAP to open NIO and MMAP respectively.\n\nAn open method in each sub-class? Isn't that what the constructors are for?\n\nThe idea of deliberately shadowing a static method in all of the subclasses smells really bad to me.\n\nIf we're going to have 4 diff static \"open()\" methods that return 3 diff impls (3 fixed, and one hueristic in the abstract base class) then adding an FSDirectoryFactory class to put them in and eliminating FSDirectory.open certainly sounds like a cleaner solution.\n ",
            "date": "2014-05-17T02:05:54+0000"
        },
        {
            "id": "comment-14000631",
            "author": "Robert Muir",
            "content": "If it smells bad, its the code calling the shadowed methods that is smelly. so they could throw exception... ",
            "date": "2014-05-17T02:32:20+0000"
        },
        {
            "id": "comment-14000695",
            "author": "Uwe Schindler",
            "content": "I think the main problem here is just the name \"open()\". The problem here is that \"NIOFSDir.open()\" reads like \"open a NIOFSDir\". I agree with Hoss, that this is the standard,well known factory pattern and this problem with it applies to other cases, too (you can also call Lucene43Codec.forName(\"Lucene3x\") which is also bullshit. But here it is obvious from the method name that forName relates to a factory.\n\nSo people should really listen to their Eclipse warning (better would be to have it as error and Java should not allow access to static methods on subclasses).\n\nThe better fix is in my opinion to just rename the method to a better name: FSDirectory.newPlatformDefault(...); Then no need to shadow them and its more obvious, that this is a \"factory\" method.\n\nIn 4.x we can still provide a deprecated open(), which is shadowed in the subclasses and throws UOE in subclasses. ",
            "date": "2014-05-17T07:09:06+0000"
        },
        {
            "id": "comment-14001363",
            "author": "Shai Erera",
            "content": "I don't like the shadowing idea. The \"open\" method, IMO, is not so confusing case, and in most cases resolved by properly configuring your eclipse settings. Also, if the method does not explicitly return NIOFSDirectory in its signature, there's no reason for you to assume that it does ... this is the standard practice with static \"factory\" methods.\n\nIf it will make it more clear, I would rename to Uwe's suggestion, or a simple create(), but I don't think we need to go overboard with shadowing static methods.\n\nThe user who reported it didn't report any real issue, just a misunderstanding about which instance is created. I don't think that turns the API into confusing or inconvenient. ",
            "date": "2014-05-19T04:05:08+0000"
        }
    ]
}