{
    "id": "LUCENE-6801",
    "title": "PhraseQuery incorrectly advertises it supports terms at the same position",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [
            "5.4"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "The following in PhraseQuery has been here since Sept 15th 2004 (by \"goller\"):\n\n    /**\n     * Adds a term to the end of the query phrase.\n     * The relative position of the term within the phrase is specified explicitly.\n     * This allows e.g. phrases with more than one term at the same position\n     * or phrases with gaps (e.g. in connection with stopwords).\n     * \n     */\n    public Builder add(Term term, int position) {\n\n\n\nOf course this isn't true; it's why we have MultiPhraseQuery.  Yet we even allow you to have consecutive terms with the same positions.  We shouldn't allow that; we should throw an exception.  For my own sanity, I modified a simple MultiPhraseQuery test to use PhraseQuery instead and of course it didn't work.",
    "attachments": {
        "LUCENE_6801.patch": "https://issues.apache.org/jira/secure/attachment/12767253/LUCENE_6801.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14962421",
            "author": "David Smiley",
            "date": "2015-10-18T14:53:50+0000",
            "content": "The following patch enhances the javadocs on PhraseQuery and MultiPhraseQuery.  I also made trivial code refactorings in MultiPhraseQuery that my IDE pointed out (like using Java 5 for loop where possible or removing explicit primitive boxing/unboxing) "
        },
        {
            "id": "comment-14963028",
            "author": "Adrien Grand",
            "date": "2015-10-19T09:13:49+0000",
            "content": "+1 overall. I'm just bit worried about the following comment you added to getPositions():\n\n\nIt's a copy of the underlying data.\n\n\n\nIt might sound like it's ok to modify it since it will not mutate internal data of the phrase query? "
        },
        {
            "id": "comment-14963309",
            "author": "David Smiley",
            "date": "2015-10-19T13:35:22+0000",
            "content": "Thanks for the review, Adrien!\n\nRE getPositions: Yes \u2013 it would be okay.  I guess maybe we shouldn't advertise that fact? "
        },
        {
            "id": "comment-14963315",
            "author": "Adrien Grand",
            "date": "2015-10-19T13:37:55+0000",
            "content": "Right, this is what I meant.  So maybe for this method we should just leave the javadocs untouched? "
        },
        {
            "id": "comment-14963317",
            "author": "David Smiley",
            "date": "2015-10-19T13:38:51+0000",
            "content": "Cool.  I'll commit today. "
        },
        {
            "id": "comment-14963325",
            "author": "Adrien Grand",
            "date": "2015-10-19T13:48:43+0000",
            "content": "Oh, I think I just understood the intention of these javadocs: imagine you have a token stream that sometimes puts terms at the same position and you want to find all documents that have both terms A and B at the same position. You can do it with PhraseQuery. On the other hand, what MultiPhraseQuery allows you to do is to search for documents that have either A or B at a given position (relatively to some other terms). Then maybe the javadoc change should be to say that PhraseQuery will try to match all terms at a given position, and that for the synonym use-case MultiPhraseQuery should be used instead? "
        },
        {
            "id": "comment-14963550",
            "author": "David Smiley",
            "date": "2015-10-19T16:17:50+0000",
            "content": "Hmm; looks like you're right!  Although it's only tested with respect to it's toString() in TestPhraseQuery.testToString().  I'll add a test of the functionality. "
        },
        {
            "id": "comment-15012969",
            "author": "David Smiley",
            "date": "2015-11-19T06:31:03+0000",
            "content": "Here's an updated patch.  I added a simple test, ported from one in MultiPhraseQuery.  I adjusted the class javadocs of both query classes a bit, as well as their methods that add terms at specified positions. "
        },
        {
            "id": "comment-15022088",
            "author": "David Smiley",
            "date": "2015-11-23T13:23:07+0000",
            "content": "I'll commit this in a few hours. It'll be nice to have these docs finally reflect what's going on here.\n\nMy only lingering concern is that this \"feature\" of PhraseQuery seems so hidden (not documented till now) and weird (would anyone actually want this behavior?), that I wonder if it should be supported at all.  If this feature is brought to light then it makes MultiPhraseQuery seem like a misnomer... PhraseQuery also supports multiple terms at the same position but simply doesn't have the same convenience method and has different semantics.  Shrug.  Any way, at least document and test the behavior than pretend it's no there. "
        },
        {
            "id": "comment-15022275",
            "author": "Jason Gerlowski",
            "date": "2015-11-23T15:32:05+0000",
            "content": "LGTM "
        },
        {
            "id": "comment-15022640",
            "author": "ASF subversion and git services",
            "date": "2015-11-23T18:17:09+0000",
            "content": "Commit 1715908 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1715908 ]\n\nLUCENE-6801: Clarify javadocs of PhraseQuery, MultiPhraseQuery RE terms at same position. Add test. "
        },
        {
            "id": "comment-15022680",
            "author": "ASF subversion and git services",
            "date": "2015-11-23T18:34:30+0000",
            "content": "Commit 1715911 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1715911 ]\n\nLUCENE-6801: Clarify javadocs of PhraseQuery, MultiPhraseQuery RE terms at same position. Add test. "
        },
        {
            "id": "comment-15022767",
            "author": "Adrien Grand",
            "date": "2015-11-23T19:07:16+0000",
            "content": "I'm a bit late to the party but the change looks good to me too. Thanks David. "
        }
    ]
}