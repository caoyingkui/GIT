{
    "id": "SOLR-5955",
    "title": "Add config templates to SolrCloud.",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "You should be able to upload config sets to a templates location and then specify a template as your starting config when creating new collections via REST API. We can have a default template that we ship with.\n\nThis will let you create collections from scratch via REST API, and then you can use things like the schema REST API to customize the template config to your needs.",
    "attachments": {
        "SOLR-5955.patch": "https://issues.apache.org/jira/secure/attachment/12640386/SOLR-5955.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13958896",
            "date": "2014-04-03T15:42:12+0000",
            "content": "If the default template is implicit, this also gets us to a point I've been hoping to reach:\n\ndownload solr\nstart solr\ncreate mycollection -s 9 -r 3 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13970431",
            "date": "2014-04-16T05:11:02+0000",
            "content": "Not ready yet, but here is a patch with a lot of the ground work done.\n\nI'll probably split off having any preexisting / default templates into another issue - that may not be so straightforward. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14306064",
            "date": "2015-02-04T22:04:06+0000",
            "content": "It would be good to support templates in SolrCloud but here's what I'm thinking:\nA user can at the time of collection creation, specify a config as a template i.e. configTemplate=xxx. This would imply 2 things:\n\n\tCopy the config from /configs/xxx to /collections/<collection_name>config/xxx.\n\tThe copied config truly belongs to this collection and would be cleaned up when the collection gets deleted.\n\n\n\nThis would work in parallel with the current concept of configSets where a config in /configs/ can be shared among multiple collections (a totally valid and practical use case).\n\nMark Miller : Do you think I could just reuse this issue for this or should I create another issue? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14556204",
            "date": "2015-05-22T14:22:01+0000",
            "content": "Perhaps more general functionality : the ability to easily make a copy of a configset and the ability to easily switch what configset is being used for a collection.\n\nThis covers a lot more usecases.  Multiple collections share a configset but then you can make a new one based on the old one, switch only one collection over to it and try it out before migrating the others.\n\nThe fact that something is a template vs just a normal config set could be one of convention (i.e. any configset can be a template).\nThere could even be an implicit default template called something clever like \"default_template\" to cover Mark's original use case. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14556395",
            "date": "2015-05-22T16:23:43+0000",
            "content": "It sounds like what I suggested but with the ability to dynamically switch a config-set for a collection. That might get tricky unless you're only talking about allowing a one time move from a shared config-set to a collection specific config-set. e.g.\n\n\tcollection1 uses conf1 (shared config-set)\n\tyou want collection1 to have it's own copy of conf1, so you make the API call, which copies the config to another location (/collections/collection1/config/... ) ? and then links it there.\n\tGoing forward, you could edit this config using the API without worrying about the impact on other collections.\n\n\n\nIt would be tricky to have an API that allows collection1 to be linked to a new config called, conf2, and then in a while switch it to say, conf3, which may or may-not be even compatible. "
        },
        {
            "author": "Gregory Chanan",
            "id": "comment-14556994",
            "date": "2015-05-22T23:31:28+0000",
            "content": "Some thoughts on this and SOLR-7570:\n\n1) The motivation here is really about having some immutability around configsets.  This is important in a couple of scenarios:\n  a) you want built-in immutable templates that people can use to get started quickly.  This should be immutable so no one else accidently screws it up.\n  b) in a secure setup, you don't want end-users to write directly to zookeeper or to disk.  We've seen security complaints when we've allowed that sort of thing in the past.  Providing an immutable template that end-users can build on and modify via Config APIs is much more sensible.  Again, you want to make this immutable so no one accidently or maliciously screws up the template.\n\n2) A template is really just an immutable configset where instantiating creates a mutable copy\nFrom a complexity POV, It seems not worth it to maintain a separate \"template\" concept if mutability is the only difference from configsets.  I.e. templates are stored in a different location in ZK, have different zkcli commands that need to be maintained, would need to have separate handling from ConfigSets in a UI, require a different paramter in the CollectionsAPI for instantiation (\"configTemplate\" above).  If ConfigSets could be marked as mutable vs immutable, a ConfigSet API could have reasonable semantics here, like copying an immutable configset makes a mutable copy (since making an immutable copy seems pointless), or that copy is disallowed on immutable ConfigSets, instead you have to call a different command like \"instantiate\" instead.  Anshum's idea above (/collections/collection_name/config/xxx could be implemented in this setup, by just creating a collection-specific mutable diff as described in SOLR-7570.  From an engineering complexity perspective, maintaining mutable-vs-immutable seems a lot simpler than having templates.\n\nThat said, from the end-user-perspective referring to immutable configsets as \"templates\" is great \u2013 I think most users would immediately understand what that means and why it is important rather than \"immutable configsets.\"  Perhaps the correct way to go here is to allow (do we already?) configs in subdirectories, e.g. we put all \"immutable configsets\" under /configs/templates and we can refer to them as \"templates\" in the documentation, but they don't need any special handling in the code compared to ConfigSets (i.e. you could create a collection in one step via &collection.configName=template/secureTemplate.\n\nSo, TLDR: we should have the concept of immutable ConfigSets, we don't need a separate concept of templates.  Thoughts? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14559280",
            "date": "2015-05-26T15:49:21+0000",
            "content": "we should have the concept of immutable ConfigSets, we don't need a separate concept of templates. Thoughts?\n\nYep.  Depending on how you look at it, the concepts could be rather orthogonal.\nAny config-set can be a template for creating another config-set.  Any config-set can be marked as immutable. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14559571",
            "date": "2015-05-26T18:31:44+0000",
            "content": "Any config-set can be a template for creating another config-set. Any config-set can be marked as immutable.\n+1 "
        },
        {
            "author": "Gregory Chanan",
            "id": "comment-14609427",
            "date": "2015-07-01T01:42:50+0000",
            "content": "I posted an initial patch for the immutable part of config sets in SOLR-7742.  I think this jira is still relevant as a separate jira because it is tackling related issues (e.g. creating a collection in one step from a config template). "
        }
    ]
}