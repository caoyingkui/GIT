{
    "id": "LUCENE-5796",
    "title": "Scorer.getChildren() can throw or hide a subscorer for some boolean queries",
    "details": {
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/search"
        ],
        "affect_versions": "4.9",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "I've isolated two example boolean queries that don't behave with release 4.9 of Lucene.\n\n\n\tA BooleanQuery with three SHOULD clauses and a minimumNumberShouldMatch of 2 will throw an ArrayIndexOutOfBoundsException.\n\njava.lang.ArrayIndexOutOfBoundsException: 2\n\tat __randomizedtesting.SeedInfo.seed([2F79B3DF917D071B:2539E6DBC4DF793C]:0)\n\tat org.apache.lucene.search.MinShouldMatchSumScorer.getChildren(MinShouldMatchSumScorer.java:119)\n\tat org.apache.lucene.search.TestBooleanQueryVisitSubscorers$ScorerSummarizingCollector.summarizeScorer(TestBooleanQueryVisitSubscorers.java:261)\n\tat org.apache.lucene.search.TestBooleanQueryVisitSubscorers$ScorerSummarizingCollector.setScorer(TestBooleanQueryVisitSubscorers.java:238)\n\tat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:161)\n\tat org.apache.lucene.search.AssertingBulkScorer.score(AssertingBulkScorer.java:64)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:621)\n\tat org.apache.lucene.search.AssertingIndexSearcher.search(AssertingIndexSearcher.java:94)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:309)\n\tat org.apache.lucene.search.TestBooleanQueryVisitSubscorers.testGetChildrenMinShouldMatchSumScorer(TestBooleanQueryVisitSubscorers.java:196)\n\n\n\tA BooleanQuery with two should clauses, one of which is a miss for all documents in the current segment will accidentally mask the scorer that was a hit.\n\n\n\n\nUnit tests and patch based on branch_4x are available and will be attached as soon as this ticket has a number.\n\nThey are immediately available on GitHub on branch shebiki/bqgetchildren as commit c64bb6f.\n\nI took the liberty of naming the relationship in BoostingScorer.getChildren() BOOSTING. Suspect someone will offer a better name for this. Here is a summary of the various relationships in play for all Scorer.getChildren() implementations on branch_4x to help choose.\n\n\n\n\n\n class                                                               \n relationships\n\n\n org.apache.lucene.search.AssertingScorer                             \n SHOULD\n\n\n org.apache.lucene.search.join.ToParentBlockJoinQuery.BlockJoinScorer \n BLOCK_JOIN\n\n\n org.apache.lucene.search.ConjunctionScorer                           \n MUST\n\n\n org.apache.lucene.search.ConstantScoreQuery.ConstantScorer           \n constant\n\n\n org.apache.lucene.queries.function.BoostedQuery.CustomScorer         \n CUSTOM\n\n\n org.apache.lucene.queries.CustomScoreQuery.CustomScorer              \n CUSTOM\n\n\n org.apache.lucene.search.DisjunctionScorer                           \n SHOULD\n\n\n org.apache.lucene.facet.DrillSidewaysScorer.FakeScorer               \n MUST\n\n\n org.apache.lucene.search.FilterScorer                                \n calls in.getChildren()\n\n\n org.apache.lucene.search.ScoreCachingWrappingScorer                  \n CACHED\n\n\n org.apache.lucene.search.FilteredQuery.LeapFrogScorer                \n FILTERED\n\n\n org.apache.lucene.search.MinShouldMatchSumScorer                     \n SHOULD\n\n\n org.apache.lucene.search.FilteredQuery                               \n FILTERED\n\n\n org.apache.lucene.search.ReqExclScorer                               \n MUST\n\n\n org.apache.lucene.search.ReqOptSumScorer                             \n MUST, SHOULD\n\n\n org.apache.lucene.search.join.ToChildBlockJoinQuery                  \n BLOCK_JOIN\n\n\n\n\n\nI also removed FilterScorer.getChildren() to prevent mistakes and force subclasses to provide a correct implementation.",
    "attachments": {
        "LUCENE-5796.patch": "https://issues.apache.org/jira/secure/attachment/12653190/LUCENE-5796.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14049850",
            "author": "Robert Muir",
            "content": "I don't think we should remove the default implementation for FilterScorer, as the scorer is not really changed when using this abstract class, its just wrapped? For the same reason, i think the boostingscorer (since its just an implementation detail of how the current BS2 stuff solves this case) should be transparent. ",
            "date": "2014-07-02T11:59:54+0000"
        },
        {
            "id": "comment-14049941",
            "author": "Terry Smith",
            "content": "Thanks for taking the time to review my patch and comment on the approach.\n\nThe reason that I advocated changing FilterScorer and BoostedScorer is to allow some of my custom Query implementations to use a regular BooleanQuery for recall and optionally scoring while taking advantage of the actual Scorers used on a per document, per clause basis.\n\nThis has been working great across quite a few Lucene releases but failed when I upgraded to 4.9 due to the two regressions in behavior for Scorer.getChildren() as described in this ticket.\n\nIn this scenario, a BooleanQuery containing two TermQueries (one a miss and the other a hit) returns the following from BooleanWeight.scorer():\n\n\n\tBoostedScorer\n\t\n\t\tTermScorer (hit)\n\t\n\t\n\n\n\nCalling getChildren() on this returns an empty list because the BoostedScorer just returns in.getChildren() and thus you are unable to navigate to the actual TermScorer in play. This would impact any classes that extend FilterScorer and don't override getChildren(). In other words, the current wiring does make the BoostedScorer transparent but with the disadvantage of hiding the actual scorer that performs the work.\n\nIf this is an unsupported workflow, I'm happy to move the discussion over to the user mailing list.     ",
            "date": "2014-07-02T14:17:21+0000"
        },
        {
            "id": "comment-14049969",
            "author": "Robert Muir",
            "content": "I see: this makes sense. If you have a custom scorer you may need access to the raw one, so this makes sense to remove the transparency... I'll look at the patch again and reply back if I have more questions. ",
            "date": "2014-07-02T14:42:14+0000"
        },
        {
            "id": "comment-14053636",
            "author": "ASF subversion and git services",
            "content": "Commit 1608454 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1608454 ]\n\nLUCENE-5796: Fix Scorer getChildren for two combinations of BooleanQuery ",
            "date": "2014-07-07T13:17:52+0000"
        },
        {
            "id": "comment-14053641",
            "author": "ASF subversion and git services",
            "content": "Commit 1608457 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1608457 ]\n\nLUCENE-5796: Fix Scorer getChildren for two combinations of BooleanQuery ",
            "date": "2014-07-07T13:24:36+0000"
        },
        {
            "id": "comment-14053642",
            "author": "Robert Muir",
            "content": "Thanks Terry! ",
            "date": "2014-07-07T13:24:56+0000"
        }
    ]
}