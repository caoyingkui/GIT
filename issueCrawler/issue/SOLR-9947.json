{
    "id": "SOLR-9947",
    "title": "Miscellaneous metrics cleanup",
    "details": {
        "components": [
            "metrics"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "Misc cleanup in metrics API to fix:\n\n\tmetrics reporting themselves under the wrong category\n\tcore container metrics are without a category",
    "attachments": {
        "screenshot-1.png": "https://issues.apache.org/jira/secure/attachment/12846825/screenshot-1.png",
        "SOLR-9947-with-mbeans.patch": "https://issues.apache.org/jira/secure/attachment/12846828/SOLR-9947-with-mbeans.patch",
        "SOLR-9947.patch": "https://issues.apache.org/jira/secure/attachment/12846625/SOLR-9947.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-10T12:22:11+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "A few of the things to fix:\n\n\tConfig handler is under \"OTHERS\" category\n\tThe /update/* handlers are under \"QUERYHANDLER\"\n\tThe container level metrics such as \"core.*\" gauges, threadPool.coreContainerWorkExecutor and threadPool.coreLoadExecutor are without a category unlike other metrics. Perhaps we can introduce a CONTAINER category?\n\tInfoHandler which is created in CoreContainer and has sub-handler such as /admin/logging, /admin/threads etc which show up in each core. I am not sure why.\n\n\n\nI think we are too tied with SolrInfoMBean and the categories that exist already. It feels wrong for a new API to use outdated category names. For example, \"/replication\" is not a query handler, it is something else entirely. Same for core admin handlers and other such stuff. I am not sure how to fix this without breaking back-compat with existing monitoring solutions. What do you think Andrzej Bialecki ? ",
            "id": "comment-15814835"
        },
        {
            "date": "2017-01-10T14:24:58+0000",
            "author": "Andrzej Bialecki",
            "content": "We can put \"infrastructure\" handlers into other categories, especially those that weren't previously reported via JMX anyway.\n\nMoving SolrConfigHandler from OTHER would slightly break back-compat, since this value is also reported in the old JMX interface as a bean attribute, similarly moving /update or /replication handlers from QUERYHANDLER. I'm not sure whether it's a big deal or not - maybe Otis Gospodnetic or Walter Underwood could comment on this? ",
            "id": "comment-15815089"
        },
        {
            "date": "2017-01-10T17:37:02+0000",
            "author": "Andrzej Bialecki",
            "content": "Current patch with the following changes:\n\n\tsimplified UPDATEHANDLER and QUERYHANDLER to UPDATE and QUERY respectively. This also allows us to put into this category those plugins that are not handlers.\n\tadded ADMIN and CONTAINER. The first category covers all admin handlers, the other covers CoreContainer-specific handlers.\n\tmoved some handlers to UPDATE and REPLICATION\n\n\n\nThis seems to bring much more consistency and transparency into where plugins logically belong to, as oppose to them being RequestHandlerBase subclasses, which is an implementation detail. If there are no objections I'd like to commit it soon, so that it makes it into 6.4. ",
            "id": "comment-15815612"
        },
        {
            "date": "2017-01-11T03:50:03+0000",
            "author": "David Smiley",
            "content": "The existing SolrInfoMBeans hierarchy isn't what we want them to be if we were to start over.  It's good to see a refactor like this.  Is it possible to register beans in the legacy location and the new location as a transition?  And then in the UI we'd not show the legacy ones. ",
            "id": "comment-15817069"
        },
        {
            "date": "2017-01-11T09:28:51+0000",
            "author": "Andrzej Bialecki",
            "content": "These changes only marginally affect the legacy mbeans, in that their \"category\" attribute may be different than before but their hierarchy (such as it is) remains unchanged.\n\nOr do you mean that we should register them both at the legacy and new locations? I can see that could be useful - SolrInfoMBean interface provides many useful non-numeric data, which the new metrics API doesn't cover at all. Let me see how much work it would take, maybe this should be done in a separate issue. ",
            "id": "comment-15817784"
        },
        {
            "date": "2017-01-11T11:16:06+0000",
            "author": "Andrzej Bialecki",
            "content": "More cleanups:\n\n\tfix broken tests\n\talways report total size of tlogs, not just during recovery\n\tadd a note about UpdateLog.State enum being reported, to take care when adding or modifying this enum, and use explicit values for this enum.\n\tHIGHTLIGHTING -> HIGHLIGHTER for consistency\n\tTLOG.applying_buffered.ops -> TLOG.applyingBuffered.ops for consistency.\n\n ",
            "id": "comment-15818031"
        },
        {
            "date": "2017-01-11T12:58:43+0000",
            "author": "David Smiley",
            "content": "Or do you mean that we should register them both at the legacy and new locations?\n\nYes that's what I mean. ",
            "id": "comment-15818263"
        },
        {
            "date": "2017-01-11T13:21:20+0000",
            "author": "Andrzej Bialecki",
            "content": "It turned out that it's not a major change - I attached a screenshot of what it looks like in JConsole.\nEdit: the \"_jmx_NNNNNN\" is a reporter name in the new API. I had to come up with something that is unique because JmxMonitoredMap uses core hash code for removing mbeans when core is closed. This is unlike the metrics' lifecycle, which survive across core reloads. ",
            "id": "comment-15818313"
        },
        {
            "date": "2017-01-11T13:29:04+0000",
            "author": "Andrzej Bialecki",
            "content": "I attached a patch with this modification. ",
            "id": "comment-15818331"
        },
        {
            "date": "2017-01-11T13:46:57+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "+1 to commit ",
            "id": "comment-15818381"
        },
        {
            "date": "2017-01-11T16:54:59+0000",
            "author": "David Smiley",
            "content": "I don't think we should rush the naming on the eve of a feature freeze.\n\nThanks for the screenshot; though it's not clear how the patch retains both the old and new hierarchy; can you clarify?\n\nI don't like \"QUERY\" nor \"QUERYHANDLER\" before it.  I suggest \"SEARCHHANDLER\", leaving \"Query\" terminology across Solr for literally either a Query object or query string to be parsed, but not as a synonym for searching generally.  Then SearchHandler could return SEARCHHANDLER... though perhaps at the base level a generic simply HANDLER (I dunno). ",
            "id": "comment-15818818"
        },
        {
            "date": "2017-01-11T17:15:05+0000",
            "author": "Andrzej Bialecki",
            "content": "I don't think we should rush the naming on the eve of a feature freeze.\nAs I mentioned above, this mainly affects the new API, with a very limited impact on the old API, so I think we should be fine. I'd rather make a couple renames in the next release than to withhold the dozens of renames in this patch that really make the new API much cleaner. \n\nhow the patch retains both the old and new hierarchy\nThe same instances of SolrInfoMBean-s are registered under the old names and new hierarchical names. This way we preserve the back-compat, and at the same time we provide an alternative, improved view of the same information.\n\nthough perhaps at the base level a generic simply HANDLER (I dunno).\nYeah, naming is hard  On one hand it needs to be specific enough to be informative, on the other hand it needs to be generic enough to limit the total number of categories, and on the third hand  if it's too generic then it becomes meaningless.\n\nI discussed this with Shalin, we considered and rejected HANDLER, PLUGIN and the like as too generic, after all all these components are handlers and plugins. In the latest patch I moved quite a few components from QUERY to other categories, leaving only those that actually support query-response interaction with users. ",
            "id": "comment-15818873"
        },
        {
            "date": "2017-01-11T17:17:04+0000",
            "author": "Andrzej Bialecki",
            "content": "Current patch. Includes the alternative view for SolrInfoMBeans. ",
            "id": "comment-15818882"
        },
        {
            "date": "2017-01-11T20:29:25+0000",
            "author": "David Smiley",
            "content": "HANDLER may be a bit too succinct.  I suggest REQUESTHANDLER and specifically SEARCHHANDLER (when subclassing SearchHandler) which are actually fairly specific and meaningful.  QUERY though.... I dunno what to think of it; one has to guess.\n\nRE renaming in a subsequent release: ok.\n\nI see your patch now; ok. ",
            "id": "comment-15819076"
        },
        {
            "date": "2017-01-12T12:50:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6c6c077435bcc5bd3f4520a70a4c678d4b3f7661 in lucene-solr's branch refs/heads/master from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6c6c077 ]\n\nSOLR-9947 Clean up metrics and SolrInfoMBean categories. Add a hierarhical view of\nSolrInfoMBeans in JMX. ",
            "id": "comment-15820929"
        },
        {
            "date": "2017-01-12T13:40:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 16452a9f207a8555c3f7870e22dc566c520cbad8 in lucene-solr's branch refs/heads/branch_6x from Andrzej Bialecki \n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=16452a9 ]\n\nSOLR-9947 Clean up metrics and SolrInfoMBean categories. Add a hierarhical view of\nSolrInfoMBeans in JMX.\n\n(cherry-picked from 6c6c077435bcc5bd3f4520a70a4c678d4b3f7661) ",
            "id": "comment-15821017"
        },
        {
            "date": "2017-01-12T14:59:39+0000",
            "author": "David Smiley",
            "content": "Ok I guess my opinion that SEARCHHANDLER is more specific than QUERY isn't shared by you.\n\nOn master branch, we should not register the old names as well... we will likely forget about this in the coming days/weeks and then one day 7.0 will arrive with this cruft still present making it harder to justify removing later.   It could be a separate issue marked as blocker for 7.0, or just do in this issue. ",
            "id": "comment-15821185"
        },
        {
            "date": "2017-01-12T15:19:56+0000",
            "author": "ASF subversion and git services",
            "content": "Commit dee7709dd86c64529ee0455d05805ab41b34c736 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dee7709 ]\n\nSOLR-9947: Fix CloudSolrClientTest.testNonRetryableRequests failure ",
            "id": "comment-15821236"
        },
        {
            "date": "2017-01-12T15:21:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit bd80359debc343c1f4969472c6cf30b69639f045 in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bd80359 ]\n\nSOLR-9947: Fix CloudSolrClientTest.testNonRetryableRequests failure\n\n(cherry picked from commit dee7709) ",
            "id": "comment-15821241"
        },
        {
            "date": "2017-01-12T15:32:17+0000",
            "author": "Andrzej Bialecki",
            "content": "Ok I guess my opinion that SEARCHHANDLER is more specific than QUERY isn't shared by you.\n David, if you have strong feelings about this, let's create a separate issue and discuss this. I wanted to complete this round of cleanup before 6.4 is out to avoid leaving some obvious mistakes and omissions that resulted from incremental work across several Jira issues.\n\nAs I explained above, I tried to minimize the number of categories, and at the same time I wanted to reflect the functionality of components... SEARCHHANDLER reflects IMHO an implementation detail, whereas QUERY (I admit, it may sound too generic at first) tries to encompass an idea of components that users use for query / response interaction.\n\nOn master branch, we should not register the old names as well...\nI'll create a separate blocker issue for 7.0. There's a lot of cleanup that still needs to be done in the naming of eg. QPlugin-s, Highlighter-s etc, but that would break back-compat in 6.x, so 7.0 seems like the right place to do it. ",
            "id": "comment-15821265"
        },
        {
            "date": "2017-01-26T09:28:05+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The renamings in 6.4 already seem to have caused back-compat problems, see SOLR-10035 and Shawn's comment about external tools that will break.\nShould we not treat the mbeans API in the same way as other APIs and not change before 7.x? We still have time to revert in 6.4.1 (or register same metrics double up under old and new paths?) ",
            "id": "comment-15839457"
        }
    ]
}