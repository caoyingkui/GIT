{
    "id": "SOLR-12505",
    "title": "Streaming expressions - fetch() does not work as expected",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "streaming expressions"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.3.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The issue:\n\n\twhen I try to use fetch() within a streaming expression, it does not enrich the inner source data. The result is exactly the same as if there was no surrounding fetch() function.\n\tbut it works if I try to do a leftOuterJoin() function instead.\n\n\n\nUse the attached 'names' collection configuration.\n SOLR works in cloud mode, streaming expressions do work, ie. stream(), join(), etc\n\nData to be inserted:\n ==\n\n<add>\n <doc>\n  <field name=\"id\">1</field>\n  <field name=\"type\">entity</field>\n  <field name=\"name\">Orignal Darek name</field>\n  <field name=\"country\">uk</field>\n  <doc>\n   <field name=\"id\">N001</field>\n   <field name=\"parentId\">1</field>\n   <field name=\"type\">alternate</field>\n   <field name=\"alias\">Darek</field>\n  </doc>\n  <doc>\n   <field name=\"id\">N002</field>\n   <field name=\"parentId\">1</field>\n   <field name=\"type\">alternate</field>\n   <field name=\"alias\">Darke</field>\n  </doc>\n  <doc>\n   <field name=\"id\">N003</field>\n   <field name=\"parentId\">1</field>\n   <field name=\"type\">alternate</field>\n      <field name=\"alias\">Darko</field>\n  </doc>\n </doc>\n <doc>\n  <field name=\"id\">2</field>\n  <field name=\"type\">entity</field>\n  <field name=\"name\">Texaco</field>\n  <field name=\"country\">de</field>\n  <doc>\n   <field name=\"id\">N0011</field>\n   <field name=\"parentId\">2</field>\n   <field name=\"type\">alternate</field>\n   <field name=\"alias\">Texxo</field>\n  </doc>\n  <doc>\n   <field name=\"id\">N0012</field>\n   <field name=\"parentId\">2</field>\n   <field name=\"type\">alternate</field>\n   <field name=\"alias\">Texoco</field>\n  </doc>\n </doc>\n</add>\n\n\n==\n The streaming query to execute.\n Simplified, as the mainsearch usually does more complext stuff.\n ==\n\n fetch( \n names,\n search(names,\n qt=\"/select\",\n q=\"*:*\",\n fq=\"type:alternate\",\n fl=\"parentId, alias\",\n rows=10,\n sort=\"parentId asc\"), \n on=\"parentId=id\",\n fl=\"name,country\"\n )\n\n\n==\n\nResult:\n\n\tCollection of attributes: parentId, alias\n\n\n\nExpected result:\n\n\tCollection of attributes: parentId, alias, name, country",
    "attachments": {
        "names.zip": "https://issues.apache.org/jira/secure/attachment/12928539/names.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-06-21T00:50:38+0000",
            "content": "Ok, I will test this out tomorrow and see what's happening. ",
            "author": "Joel Bernstein",
            "id": "comment-16518761"
        },
        {
            "date": "2018-06-21T02:38:33+0000",
            "content": "David Smiley, in a previous ticket (SOLR-10404) you changed how the fetch query was being sent down to the following:\n\nbuf.append(\"{! df=\").append(rightKey).append(\" q.op=OR cache=false }\");//disable queryCache\n\n\nI think we want this to be:\n\nbuf.append(\"{!lucene df=\").append(rightKey).append(\" q.op=OR cache=false }\");//disable queryCache\n\n\nOtherwise if a defType is defined in the request handler that does not use \"df\" or \"q.op\" those local params will be ignored.\n\nI'm not sure if that is what's causing the problem in this case, but it does appear like it would be a problem in general. ",
            "author": "Joel Bernstein",
            "id": "comment-16518834"
        },
        {
            "date": "2018-06-21T03:30:36+0000",
            "content": "I think it doesn't matter either way?  I'd at least be surprised to learn it could matter.  Local-params aren't even parsed unless the default parser (based on context of use) is \"lucene\"; it's basically assumed in every case except 'q' which is governed by defType.  Does the context of this scenario above go to a 'q' to a request handler that might be customized with a defType? ",
            "author": "David Smiley",
            "id": "comment-16518873"
        },
        {
            "date": "2018-06-21T06:31:14+0000",
            "content": "Joel Bernstein - your guess is correct.\n\nI have tried two changes in the /select handler definition:\n\n\tchanged defType to lucene\n\tcommented out the defType parameter\n\n\n\nand in both cases it started to work as expected, I get the enriched values.\n\n\u00a0 ",
            "author": "Dariusz Wojtas",
            "id": "comment-16518981"
        },
        {
            "date": "2018-06-21T14:06:22+0000",
            "content": "Ok, then it's a fairly straightforward fix. I should be able to make the change today.\n\nThe basic issue is that if the defType defined for the /select handler does not support the local params \"df\" and \"q.op\" then the fetch will fail. Explicitly defining the query parser as \"lucene\" should resolve the issue. ",
            "author": "Joel Bernstein",
            "id": "comment-16519404"
        },
        {
            "date": "2018-06-21T15:05:58+0000",
            "content": "What is the straightforward fix? Changing buf.append(\"{! df=\") to buf.append(\"{!lucene df=\")? If that works I owe you a beer \u00a0 \u00a0\u00a0It deliberately doesn't work as\u00a0SOLR-11501 (v7.2.0) because it would, for example, give end-users (people entering a query into a search box) the\u00a0ability to hack the engine in ways we don't want them to, potentially leading to security bugs.\n\nPerhaps an underlying issue here is that people can change the configuration of \"/select\". \u00a0I propose that \"/select\" in particular be locked down for 8.0. \u00a0I'm definitely a believer in creating customized request handlers in Solr, just that they have names for your app's purpose (e.g. /suggest or /search or /mlt), and not messing with /select. ",
            "author": "David Smiley",
            "id": "comment-16519471"
        },
        {
            "date": "2018-06-21T15:08:06+0000",
            "content": "On a separate but related note, the\u00a0query being built here really ought to use the terms qparser. ",
            "author": "David Smiley",
            "id": "comment-16519475"
        },
        {
            "date": "2018-06-21T17:07:12+0000",
            "content": "I believe\n\n{!lucene ...}\n\nwill resolve the issue. All we need to do is ensure that the lucene parser is used even if there is a defType hard coded in the /select handler.\u00a0If I understand SOLR-11501 you can only use the construct\n\n{! ...}\n\nif the default qparser is lucene. But we can still specify any qparser we want with the construct {!myparser ..}.\n\nThe batch size on the fetch is small (defaults to 50) so I'm not sure the terms qparser will have much of an advantage over the lucene qparser performance wise.\u00a0 ",
            "author": "Joel Bernstein",
            "id": "comment-16519588"
        },
        {
            "date": "2018-06-21T17:22:08+0000",
            "content": "I've read SOLR-11501 more closely. It sounds like specifying the query parser with local params has been limited a great deal.\n\nSince the /select handler defaults to lucene I believe this is not an issue unless someone has set the default defType in the /select handler.\n\nBut it does raise a question about how to deal with this ticket. Perhaps we should set the defType parameter rather then use local params when sending the fetch request. ",
            "author": "Joel Bernstein",
            "id": "comment-16519604"
        },
        {
            "date": "2018-06-21T17:53:30+0000",
            "content": "Perhaps we should set the defType parameter rather then use local params when sending the fetch request.\n+1 great idea.\nThe batch size on the fetch is small (defaults to 50) so I'm not sure the terms qparser will have much of an advantage over the lucene qparser performance wise.\nI argue it's up to the Lucene TermInSetQuery to make that heuristic determination than it is to make this choice at the level of a streaming expression. FWIW TermInSetQuery uses the value of 16 and if I recall Adrien did some benchmarking when setting that choice. \u00a0It could even get smarter in the future by using knowledge of the size of the number of indexed terms. And besides {!terms} is I think more semantically clear than using the lucene query parser. It's non-scoring too. ",
            "author": "David Smiley",
            "id": "comment-16519637"
        }
    ]
}