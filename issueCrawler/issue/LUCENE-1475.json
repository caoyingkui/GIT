{
    "id": "LUCENE-1475",
    "title": "Expose sub-IndexReaders from MultiReader or MultiSegmentReader",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "MultiReader and MultiSegmentReader are package protected and do not expose the underlying sub-IndexReaders.  A way to expose the sub-readers is to have an interface that an IndexReader may be cast to that exposes the underlying readers.  \n\nThis is for realtime indexing.",
    "attachments": {
        "LUCENE-1475.patch": "https://issues.apache.org/jira/secure/attachment/12395582/LUCENE-1475.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-12-08T18:51:45+0000",
            "content": "LUCENE-1475.patch\n\n\n\tAdded getSubReaders to IndexReader which by default returns null\n\tAdded IndexReader.isMultiReader default false.  MultiSegmentReader and MultiReader return true\n\n\n\nI took this approach rather than add an interface as this seemed to be more with the kitchen sink IndexReader API currently in use (meaning it's not my first choice, but because it's a small addition I don't care). ",
            "author": "Jason Rutherglen",
            "id": "comment-12654514"
        },
        {
            "date": "2008-12-08T19:00:31+0000",
            "content": "I think the API is wrong.\n\nThe method should either be\n\nIndexReader[] getSubReaders()\n\nIt should return an empty array, not null when there are no sub readers.\n\nBut a better API is probably\n\nIndexReader[] getReaders()\n\nwhich contains an array containing itself if there are no sub-readers. The only drawback to this is if we allow multiple levels, then you need to make a check that this!=getReaders[0]\n\nUsing null adds null-checks in the common case. ",
            "author": "robert engels",
            "id": "comment-12654518"
        },
        {
            "date": "2008-12-08T19:29:19+0000",
            "content": "I agree: a better default impl is length 1 array with yourself.\n\nWhat should be returned if a Multi*Reader has embedded Multi*Readers as sub-readers?  (Admittedly rare but still... eg from the standpoint of LUCENE-831, we'd want them expanded & inlined (recursively) into the returned array, I think).\n\nAlso, this API implicitly carries a promise which is the readers are logically sequentially concatenated to define the docID sequence.  Maybe we should name it getSequentialReaders or something less generic, to reflect this?  EG ParallelReader also contains an array of sub-readers, but one should never return that in getReaders(). ",
            "author": "Michael McCandless",
            "id": "comment-12654532"
        },
        {
            "date": "2008-12-09T19:46:42+0000",
            "content": "RE:\n\"It should return an empty array, not null when there are no sub readers.\"\n\nIt should return null because there are no results.  An empty array almost implies the SegmentReader can contain other readers or that they may show up in the future.  IMO the API is garbage anyways because it should be using an interface like the JDK classes do.\n\nMM:\n\"What should be returned if a Multi*Reader has embedded Multi*Readers as sub-readers?\"\n\nI don't like this approach and the comments seem sound like over engineering a simple solution.  If the user wants all the sub of sub readers, they need to write that code externally to Lucene.  Otherwise it is not easy to know what the sub readers are for the given reader.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12654923"
        },
        {
            "date": "2008-12-09T19:51:57+0000",
            "content": "That is not correct. By returning a non-null array, it is trivially to get an ordered list of all subreaders using simple recursion.\n\nIt does not need to be an interface... no reason, if adding a new method to IndexReader (and changing the implementations). ",
            "author": "robert engels",
            "id": "comment-12654924"
        },
        {
            "date": "2009-01-23T19:27:15+0000",
            "content": "LUCENE-1483 adds IndexReader.getSequentialReaders. ",
            "author": "Michael McCandless",
            "id": "comment-12666662"
        }
    ]
}