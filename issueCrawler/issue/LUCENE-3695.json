{
    "id": "LUCENE-3695",
    "title": "FST Builder methods need fixing,documentation,or improved type safety",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Its confusing the way an FST Builder has 4 add() methods, and you get assertion errors (what happens if assertions are disabled?) if you use the wrong one:\n\nFor reference we have 3 FST input types:\n\n\tBYTE1 (byte)\n\tBYTE2 (char)\n\tBYTE4 (int)\n\n\n\nFor the builder add() method signatures we have:\n\n\tadd(BytesRef)\n\tadd(char[], int offset, int len)\n\tadd(CharSequence)\n\tadd(IntsRef)\n\n\n\nBut certain methods only work with certain FST input types, and these mappings are not the ones you think. \n\nFor example, you would think that if you have a char-based FST you should use add(char[]) or add(CharSequence), but this is not the case: those add methods actually only work with int-based FST (they use codePointAt() to extract codepoints). Instead, you have to use add(IntsRef) for the char-based one.\n\nThe worst is if you use the wrong one, you get an assertion error, but i'm not sure what happens if assertions are disabled.\n\nMaybe the ultimate solution is to parameterize FST's generics on input too (FST<input,output>) and just require BytesRef/CharsRef/IntsRef as the parameter? Then you could just have add(), and this might clean up FSTEnum too (it would no longer need that InputOutput class but maybe could use Map.Entry<input,output> or something?\n\nI think the documentation is improving but i still notice add(BytesRef) has no javadoc at all, and it only works with BYTE1, so I think we still have some work to do even if we want to just pursue a documentation fix.",
    "attachments": {
        "LUCENE-3695.patch": "https://issues.apache.org/jira/secure/attachment/12510549/LUCENE-3695.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-01-13T17:59:54+0000",
            "content": "+1 to doing something here!  It's very confusing now.\n\nThe Builder today only operates on IntsRef inputs; the other add methods taking char[]/CharSequence, BytesRef are sugar, translating to IntsRef.  Maybe... we should move these elsewhere (eg Util.XXX) and rename them to reflect that they are just converting XXX to IntsRef?  Then Builder would only have add(IntsRef[]).\n\nThe \"INPUT_TYPE\" really describes the allowed range of the input int labels...\n\nI'd love to parameterize by input type as well, but I think it's tricky (Uwe!?)?  Ideally Builder, FST, and the FSTEnums would take <K,V>; FST is just like a SortedMap. ",
            "author": "Michael McCandless",
            "id": "comment-13185707"
        },
        {
            "date": "2012-01-13T18:14:56+0000",
            "content": "Just a note. Ideally it would be <<K extends Comparable>, <V extends ByteArraySerializable>, AlgebraOperations<V>>; K is Comparable for binary lookups inside array-expanded nodes, V is arbitrary as long as it can be serialized into bytes and we need certain algebraic operations defined for V... eh, this would be close to perfection   ",
            "author": "Dawid Weiss",
            "id": "comment-13185726"
        },
        {
            "date": "2012-01-14T00:26:00+0000",
            "content": "Patch, just moving the confusing sugar out of FST into Util... this makes it explicit that the Builder only takes IntsRef, and you have to pre-convert other things to IntsRef first... ",
            "author": "Michael McCandless",
            "id": "comment-13186015"
        },
        {
            "date": "2012-01-14T00:48:22+0000",
            "content": "Another iteration, removing confusing sugar from Util, and removing an iffy assert. ",
            "author": "Michael McCandless",
            "id": "comment-13186037"
        },
        {
            "date": "2012-01-15T23:42:23+0000",
            "content": "OK I committed de-sugaring... but we can leave this open for any more improvements. ",
            "author": "Michael McCandless",
            "id": "comment-13186620"
        },
        {
            "date": "2012-03-06T02:37:54+0000",
            "content": "Lets resolve this for now? we made progress. We know we can further improve the FST APIs, \nbut this fix solves the worst of the confusion in my opinion. ",
            "author": "Robert Muir",
            "id": "comment-13222943"
        }
    ]
}