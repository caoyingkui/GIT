{
    "id": "SOLR-9231",
    "title": "SolrInputDocument no-args constructor removed without notice",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "In 6.0.1 and previous, SolrInputDocument provided two constructors - one with no arguments, the other accepting a Map object.  As of 6.1.0, the no-arguments constructor is replaced with one that accepts zero or more strings.\n\nWith 6.0.1, this worked:\n\ncls = LoadClass(\"org.apache.solr.common.SolrInputDocument\");\n\nConstructor foo = cls.getConstructor();\n\nThis fails with Solr 6.1.0\n\nWe get the same error after updating the code to this:\n\ncls = LoadClass(\"org.apache.solr.common.SolrInputDocument\");\n\nClass[] argArray = new Class[0];\nConstructor foo = cls.getConstructor(argArray);\n\nAre we missing something?  If not, please restore the missing no-arguments constructor.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-06-20T18:54:42+0000",
            "author": "Alan Woodward",
            "content": "Does cls.getConstructor(String[].class) work? ",
            "id": "comment-15340172"
        },
        {
            "date": "2016-06-20T19:33:00+0000",
            "author": "Tim Parker",
            "content": "not sure, but...even if it did work, it's not viable for a couple of reasons:\n\n1) this won't work with 6.0.1 - I don't think anyone wants to get into maintaining interface code full of 'if the Solr version is earlier than 6.1.0, do this...' logic\n\n2) We're calling this from ColdFusion, so it's not trivial to get that specific about types.  We have built a wrapper class around URLClassLoader, but this shouldn't be burdened with special cases like \"getNewInstanceAndCallConstructorWhichMightTakeArrayOfString()\" - nor should we suddenly have to enumerate through all available constructors looking for one that won't throw exceptions if called with a zero-sized array ",
            "id": "comment-15340250"
        },
        {
            "date": "2016-10-14T20:10:57+0000",
            "author": "Shawn Heisey",
            "content": "Interesting problem.  I guess the underlying question is ... what sort of API guarantees do we intend to honor for SolrJ?\n\nI think the removal of the no-arg constructor fits with a policy of \"typical API usage will continue to compile with a minor-version update.\"  IMHO, your usage is not typical.  Classloaders and other things that utilize method signatures are an advanced kind of Java programming.\n\nA more strict guarantee of \"code compiled against SolrJ X.Y will work if the jar is upgraded in place to version X.Z\" would be required for your usage.  It may be reasonable for users to expect this kind of guarantee, but apparently whoever removed the constructor did not share this opinion, or was not aware that it could break existing binaries. ",
            "id": "comment-15576356"
        },
        {
            "date": "2016-10-14T20:40:24+0000",
            "author": "Tim Parker",
            "content": "Use of SolrJ with ColdFusion requires a separate classloader because ColdFusion is bundled with an ancient Solr release and some other libraries which aren't compatible with current Solr releases.  We do not bundle Solr with our product, so we're trying to maximize the range of Solr releases which can be used with our product - with this in mind, we needed a solution which is able to load a 'SolrInputDocument' object with no constructor arguments.  With a no-args constructor, this is easy - just call newInstance() with no arguments.  After the API change, however, this failed - updating our logic to change the newInstance() call to pass an (empty) array of strings would have cut off our ability to work with older Solr releases - and we also don't want to add conditional logic based on the Solr release we're using.\n\nThe work-around is to do some gymnastics with reflection if the argument-free newInstance() throws an exception - it's not optimal, but it does get the job done ",
            "id": "comment-15576414"
        },
        {
            "date": "2016-10-14T20:46:29+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Marked as duplicate of SOLR-9373 ",
            "id": "comment-15576436"
        },
        {
            "date": "2017-11-15T02:15:01+0000",
            "author": "Pat Moody",
            "content": "Tim Parker\nDid you ever get Solr 6.x + with SolrInputDocument working with ColdFusion? I am trying the same with Lucee 5 + Solr 7 and am having real problems with constructors for this object.\nWe do have it working with our current Solr 4.6 and Lucee 5 as there are no constructors required.\n\nI've started work on creating a Lucee extension for Solr 7 and having OSGI issues so may resort to the old Javaloader mechanisms we are using currently for Solr 4.6.\nHere are a couple of references.\nhttps://dev.lucee.org/t/solr-7-extension/3002\nhttps://luceeserver.atlassian.net/browse/LDEV-1584\n\nAny help would be appreciated.\n\nCheers\nPat ",
            "id": "comment-16252845"
        }
    ]
}