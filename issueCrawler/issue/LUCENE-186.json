{
    "id": "LUCENE-186",
    "title": "[PATCH] Get/Set for Searcher in Hits and Searchable in RemoteSearchable",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "First of all thanks for Lucene!\n\nI want to contribute some thoughts, perhaps it's interesting for others. \nPerhaps not. But if I want to know? I have to post \n\n\nI've added:\nA getSearcher and setSearcher Method for the Searcher used from the Hits object.\nThis Searcher is used from the Hits object to load new HitDoc objects into the\nhitDocs cache (Vector).\n\nI've added a getSearcher and setSearcher Method for the RemoteSearchable too. \n\n\n\nReason:\n\nI've read the threads in the dev mailing list about remote and distributed\nsearching and reusing Searcher objects in a multi threaded environment like\napplication servers or servlet containers. The overall opinion is to instantiate\na IndexSearcher for a index and reuse these object with many threads. This\nsounds ok. \n\nExample Situation: \n\nA Singleton with a HashMap can act as a registry vor Searcher objects\ninitialized and populated during application startup.\n\nNow we can acces these Searcher objects through lookups to this registry and use\nthem for searching. \n\nNote: The same Searcher object used for searching is referenced in the resulting\nHits object of each search!\n\n\nIn a web production environment with 7x24 it must be possible to replace a whole\nindex with a new one during runtime (because of many changes or architecture\ndecissions...). This means reloading/replacing these Searcher objects too. \n\nSituation in a web or ejb environment with sessions. \n\nMany clients start a search and receive a Hits object. (Or any wrapper around a\nHits object like a HitsIterator to browse large collections of search results or\nRemoteSearchable). Typically a reference to this Hits (or wrapper) object is\nstored in a Session context of the conversation (HttpSession, Stateful Session\nBean) and so a reference to originally used Searcher. \n\nBut what happens when the Hits object tries to load new HitDoc objects into\nhitDocs cache (Vector). \n\nThe reference to the Searcher object is no longer available because it is\nreplaced with a new Searcher object. Perhaps the same lucene index is available\nagain but not the same hash code of the object... the reference is broken and\nit's really hard to find out why no more results (documents are available) in\nthe Hits object. This breaks iterating over large collections of search results\nin long sessions when the reusable Searcher object has changed.\n\nThe same problem appears when we use the RemoteSearchable which acts on the\nlower level search api. In this implementation UnicastRemoteObject is extended.\nThe javadoc explains the same problem.\n\n\n\"The UnicastRemoteObject class defines a non-replicated remote object whose\nreferences are valid only while the server process is alive. The\nUnicastRemoteObject class provides support for point-to-point active object\nreferences (invocations, parameters, and results) using TCP streams.\n\nObjects that require remote behavior should extend RemoteObject, typically via\nUnicastRemoteObject. If UnicastRemoteObject is not extended, the implementation\nclass must then assume the responsibility for the correct semantics of the\nhashCode, equals, and toString methods inherited from the Object class, so that\nthey behave appropriately for remote objects.\"\n\n\n\nA quick Solution for Hits:\n\nA possibility for wrapper objects to read the original Searcher object from the\n\"Hits\" object and do some checks on the Searcher object (e.g. compare hashCode).\nIf not it must be possible to set a new Searcher object to the Hits object to\nreceive new documents.\n\n\nA quick Solution for Remote:\n\n\tsame as for Hits\n\n\n\nsee PATCHES\n\n\nA long solution:\n\nImplement all Searcher objects as serializable objects. So it's possible to\nshare these objects in a distributed environment like application servers\nthrough JNDI. In the moment they don't travel very well ;-( \n\nDO NOT add a reference to the Searcher to the Hits object. A better approach is\nto use a proxy inside the Hits object with the possibility to check the\nexistence of the searcher object and if needed to receive a new one.\n\nExample of Proxy implementations:\n\n\n\tJNDI\n\tRegistry Service in the same VM\n\tRMI\n\tHA-JNDI (clustered JBoss)\n\tor a combination of above\n\n\n\nThis is not so hard but needs a little different architecture.\n\n\nResults from experiments with distributed lucene indexe in a clustered JBoss\n3.2.3 environment (implemented as JMX services):\n\n\n\tRemote or distributed searching with Lucene is a big problem.\n\tA RemoteSearchable implementation is available for searching a lucene index\nover RMI but this is not a real solution for production environments. \n\tDo not use Searcher implementations in distributed environments as components\n\tThe only save approach without changing to much on the lucene code is to use\nSearcher in the same VM. Only RAMDirectory is useful with many search requests.\nApply read/write methods for Seracher objects in Hits and RemoteSearchable. Wrap\nHits and RemoteSearchable with a object responsible for checking Searcher's\navailability and when needed the functionality to lookup a new Searcher. \n\n\n\n\nI'm very interested in re open a new thread in the dev mailing list if anyone is\ninterested in a discussion about distributed searching. \nPerhaps this topic is dicussed elsewhere and I'm to stupid to find it, please\ngive me a tip if so.\n\nThanks for your time. \n\nyo",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--patch-hits.txt": "https://issues.apache.org/jira/secure/attachment/12312311/ASF.LICENSE.NOT.GRANTED--patch-hits.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2004-02-27T03:24:37+0000",
            "content": "Created an attachment (id=10570)\n[PATCH] Get/Set methods for Hits Object ",
            "author": "Joachim Schreiber",
            "id": "comment-12321578"
        },
        {
            "date": "2004-02-27T03:27:27+0000",
            "content": "Created an attachment (id=10571)\n[PATCH] Get/Set methods for Searchable in RemoteSearchable ",
            "author": "Joachim Schreiber",
            "id": "comment-12321579"
        },
        {
            "date": "2004-02-27T03:44:50+0000",
            "content": "What happens when a document referenced in a Hits has been deleted?  Also, index\nmerging will automatically renumber documents falling after deleted documents,\nso references to all of these documents would be invalid.  Thus, if you're doing\ndeletions, you cannot update a Searcher in a single step.  You must keep the\nprevious version of the Searcher around while references remain in Hits.\n\nSo I think it is a bad idea to be able to update a Hit's searcher, and similarly\na RemoteSearchable's searcher. ",
            "author": "cutting@apache.org",
            "id": "comment-12321580"
        }
    ]
}