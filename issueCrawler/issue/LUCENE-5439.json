{
    "id": "LUCENE-5439",
    "title": "Add Jacoco option for Test Coverage",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.2",
            "6.0"
        ]
    },
    "description": "Jacoco (http://www.jacoco.org/) is a much cleaner and simpler to use code coverage tool than clover and additionally doesn't require having a third party license since it is open source.  It also has nice Jenkins integration tools that make it incredibly easy to see what is and isn't tested.  We should convert the Lucene and Solr builds to use Jacoco instead of Clover.",
    "attachments": {
        "LUCENE-5439.patch": "https://issues.apache.org/jira/secure/attachment/12724116/LUCENE-5439.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13894581",
            "author": "Robert Muir",
            "content": "I don't know how i feel about this. Clover's reports are far superior though from everything ive seen. We would lose a lot of capabilities: like being able to see individual test contributions. I'm not ready to give that up.\n\npersonally I use both. I look at the batch reports from jenkins but I use jacoco (eclemma) in my IDE because... i dont want code coverage completely taking over my IDE.\n\nMaybe we should wait until jacoco matures and catches up feature-wise so we don't lose things? ",
            "date": "2014-02-07T14:50:44+0000"
        },
        {
            "id": "comment-13894624",
            "author": "Grant Ingersoll",
            "content": "Fair enough.  I'll probably put up a patch, but leave in the Clover stuff and then we can compare side-by-side.  I like that Jacoco doesn't require you to pre-instrument your classes, but I admit I am not up on Clover's latest capabilities to know whether it can or not.\n\nI forget the Clover licensing terms.  Can anyone use it or only committers?  If it is the latter, I think we should add Jacoco too, since then anyone can run it.  If it is the former, then we can either leave alone or use side-by-side. ",
            "date": "2014-02-07T15:20:41+0000"
        },
        {
            "id": "comment-13894734",
            "author": "Robert Muir",
            "content": "I think anyone can use it, but I think we should add jacoco either way? I was just speaking to \"switch\" (as in removing clover).\n ",
            "date": "2014-02-07T17:12:38+0000"
        },
        {
            "id": "comment-13894783",
            "author": "Uwe Schindler",
            "content": "I forget the Clover licensing terms. Can anyone use it or only committers? If it is the latter, I think we should add Jacoco too, since then anyone can run it. If it is the former, then we can either leave alone or use side-by-side.\n\nAnyone can use Clover. The License is not personalized, it enables use for code in the org.apache Java Package name. The license is shipped in SVN checkout, in Source Artifacts it is excluded.\n\nIn my opinion we should have both options: Why remove Clover? - it is very useful!!! ",
            "date": "2014-02-07T18:02:05+0000"
        },
        {
            "id": "comment-14486596",
            "author": "Robert Muir",
            "content": "I retitled the issue, not to remove clover but add jacoco as an option. I hope you don't mind if i assign, I have a working patch.\n\n ",
            "date": "2015-04-09T02:30:35+0000"
        },
        {
            "id": "comment-14486607",
            "author": "Robert Muir",
            "content": "Here is an initial patch that adds 'ant jacoco' (its per-module).\n\nThe logic is fairly contained and not nearly as invasive on the build as clover. The jacoco task just downloads the jacoco ant tasks from ivy and sets up JVM parameters to junit4 slaves so that each slave writes its own coverage database. When producing reports we just merge coverage databases across all the slaves.\n\nToday the clover build takes many hours and this is a nice alternative. For example 'ant jacoco' on lucene-core is quite fast (on my machine, about as fast as running tests normally).\n\n\n  ...\n   [junit4] JVM J0:     1.24 ..   146.46 =   145.22s\n   [junit4] JVM J1:     1.46 ..   146.30 =   144.85s\n   [junit4] JVM J2:     1.71 ..   146.37 =   144.65s\n   [junit4] JVM J3:     1.46 ..   146.49 =   145.03s\n   [junit4] Execution time total: 2 minutes 26 seconds\n   [junit4] Tests summary: 414 suites, 3438 tests, 154 ignored (144 assumptions)\n     [echo] 5 slowest tests:\n[junit4:tophints]  14.63s | org.apache.lucene.index.TestDocValuesFormat\n[junit4:tophints]  14.31s | org.apache.lucene.index.TestNormsFormat\n[junit4:tophints]  11.80s | org.apache.lucene.index.TestTermVectorsFormat\n[junit4:tophints]  11.76s | org.apache.lucene.codecs.compressing.TestCompressingTermVectorsFormat\n[junit4:tophints]  11.16s | org.apache.lucene.codecs.lucene50.TestLucene50DocValuesFormat\n\n-check-totals:\n\n-post-jacoco:\n   [delete] Deleting directory /home/rmuir/workspace/trunk-iw/lucene/build/jacoco/core\n    [mkdir] Created dir: /home/rmuir/workspace/trunk-iw/lucene/build/jacoco/core\n[jacoco:report] Loading execution data file /home/rmuir/workspace/trunk-iw/lucene/build/core/test/J0/jacoco.db\n[jacoco:report] Loading execution data file /home/rmuir/workspace/trunk-iw/lucene/build/core/test/J1/jacoco.db\n[jacoco:report] Loading execution data file /home/rmuir/workspace/trunk-iw/lucene/build/core/test/J2/jacoco.db\n[jacoco:report] Loading execution data file /home/rmuir/workspace/trunk-iw/lucene/build/core/test/J3/jacoco.db\n[jacoco:report] Writing bundle 'lucene-core-6.0.0-SNAPSHOT JaCoCo coverage report' with 1371 classes\n\njacoco:\n\nBUILD SUCCESSFUL\nTotal time: 2 minutes 30 seconds\n\n\n\nYou can see this coverage report for lucene-core (only from lucene-core's tests) here:\nhttp://people.apache.org/~rmuir/jacoco-core/\n\nI will now look at adding some top-level build tasks that merge coverage dbs across all modules for an aggregate view similar to what clover does, too. But i really like having the per-module option at least for now. ",
            "date": "2015-04-09T02:41:50+0000"
        },
        {
            "id": "comment-14486724",
            "author": "Robert Muir",
            "content": "updated patch. I added top-level \"jacoco\" targets for lucene and solr that run coverage+generate report for each module, and then additionally create \"lucene-all\" and \"solr-all\" aggregated reports. \n\nThe time to run \"ant jacoco\" for lucene/ for me is 9 minutes, essentially the same amount of time it takes to run \"ant test\".\n\nI think its ready. ",
            "date": "2015-04-09T05:20:50+0000"
        },
        {
            "id": "comment-14486745",
            "author": "Robert Muir",
            "content": "Slight tweak to the top-level targets. ",
            "date": "2015-04-09T05:39:10+0000"
        },
        {
            "id": "comment-14486911",
            "author": "Adrien Grand",
            "content": "+1 being able to create coverage reports on my local machine in a reasonable time will be super useful! ",
            "date": "2015-04-09T07:37:31+0000"
        },
        {
            "id": "comment-14487052",
            "author": "Uwe Schindler",
            "content": "Hi Robert,\nvery cool. I had the same idea for clover a while back to have separate databases per thread, but i gave up, because clover has no merging functionality (at least I did not understand how to use it). Also the setup of clover in lucene was to have a one-for-all clover database...\n\nI checked you patch, very minimal invasive, cool! Just a few test policy files and the \"hack\" with relative paths for the database. I just wonder why the \"clover\" target is sometimes included as dependency to the new tasks, but maybe thats just copypaste.\n\nA further imprvement could be to have a root-level report with lucene+solr for Jenkins. Should be easy. Maybe make the report generator a macro in common-build.\n\nI still like the clover reports more (they have much nicer report output and functionality), but jacoco is fast and - as Grant said - does not need to istrument classes at compile time. So you can quickly switch between jacoco and non-jacoco without recompiling (for Clover you had to \"ant clean\" first).\n\n+1 to start with this. Maybe we can remove the invasive clover at some time - but not under the scope of that issue!  ",
            "date": "2015-04-09T09:42:05+0000"
        },
        {
            "id": "comment-14487055",
            "author": "Uwe Schindler",
            "content": "+1 being able to create coverage reports on my local machine in a reasonable time will be super useful!\n\nThis was possible with Clover, too. Just took longer  ",
            "date": "2015-04-09T09:43:05+0000"
        },
        {
            "id": "comment-14487154",
            "author": "Robert Muir",
            "content": "\nI just wonder why the \"clover\" target is sometimes included as dependency to the new tasks, but maybe thats just copypaste.\n\nNo copypaste. Because tests may fail if you do not. this target initializes stuff even for the case where clover is not used! So it must be called. Seems like clover integration should be cleaned up a bit here.\n\n\nA further imprvement could be to have a root-level report with lucene+solr for Jenkins. Should be easy. Maybe make the report generator a macro in common-build.\n\nI don't want this. I am tired of not having a code coverage report in jenkins for lucene for months, and its because solr tests fail! Nobody wants to make solr tests reliable, so fine, i will make code coverage separate so that we have it again for lucene. That is why i worked on this issue, so that lucene will have code coverage again.\n ",
            "date": "2015-04-09T11:07:08+0000"
        },
        {
            "id": "comment-14487223",
            "author": "ASF subversion and git services",
            "content": "Commit 1672298 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1672298 ]\n\nLUCENE-5439: add jacoco coverage ",
            "date": "2015-04-09T11:47:59+0000"
        },
        {
            "id": "comment-14487226",
            "author": "ASF subversion and git services",
            "content": "Commit 1672300 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1672300 ]\n\nLUCENE-5439: add jacoco coverage ",
            "date": "2015-04-09T11:48:36+0000"
        },
        {
            "id": "comment-14487233",
            "author": "Uwe Schindler",
            "content": "I don't want this. I am tired of not having a code coverage report in jenkins for lucene for months, and its because solr tests fail! \n\nThe code coverage is calculated in any case, because jenkins does not fail on broken tests (it passes some Dtests.dontfail like property, see root clover job.\n\nThe problem why code coverage was \"red\" for several month was another issue: Clover OOMed because the -Xmx of Jenkins's ANT call was to small  If solr tests fail, Jenkins just turns \"yellow\", but still produces coverage. Look at the console output... I just did not notice and forgot to fix! Sorry. ",
            "date": "2015-04-09T11:55:20+0000"
        },
        {
            "id": "comment-14487254",
            "author": "Uwe Schindler",
            "content": "This is what root's build.xml contains:\n\n\n      <!-- The idea behind Clover is to determine test coverage, so be immune to failing tests: -->\n      <param name=\"tests.haltonfailure\" value=\"false\"/>\n\n\n\nIf we do the same there is no problem to also generate a combined coverage report for Jenkins. Users can still generate reports as they like for sub-modules. I will open another issue about that. ",
            "date": "2015-04-09T11:57:51+0000"
        },
        {
            "id": "comment-14487256",
            "author": "Robert Muir",
            "content": "Sorry, I think i've explained my position. Feel free to open another issue, but personally my vote will be -1.\n\nI want to keep lucene code coverage working by itself and not influenced by unreliable solr tests. ",
            "date": "2015-04-09T11:59:34+0000"
        },
        {
            "id": "comment-14487260",
            "author": "Uwe Schindler",
            "content": "I want to keep lucene code coverage working by itself and not influenced by unreliable solr tests.\n\nYou can still calculate the coverage and there is no influence at all. Its just for Jenkins. ",
            "date": "2015-04-09T12:02:47+0000"
        },
        {
            "id": "comment-14487264",
            "author": "Robert Muir",
            "content": "I also don't think combined coverage reports are useful. I only added one for each project here because its similar to what clover did: but these -all summaries do not highlight the source code so you cannot do much with them (you need to go to e.g. lucene-core report for that)\n\nEach module should test itself. ",
            "date": "2015-04-09T12:09:34+0000"
        },
        {
            "id": "comment-14487338",
            "author": "Uwe Schindler",
            "content": "I agree for jacoco. In Clover you have much more possibilities, so its also quite nice that you have combined coverage. Because when looking at block join module you see which calls are coming from Solr. As this is impossible with Jacoco, I agree.\n\nI also agree that we should keep Clover, it is much more fancy report-wise and records much more information (like call counts, which are useful to find hotspots) or from where the call is coming from. If it runs like 6 hours nightly on jenkins, who cares? But we get more results. For quickly testing coverage locally, a simple and fast ant task is much more useful. ",
            "date": "2015-04-09T13:24:23+0000"
        },
        {
            "id": "comment-14487352",
            "author": "Robert Muir",
            "content": "I agree, the clover report is better here. I would love to see it functioning again. But in the meantime I wanted something, to ensure we fix test coverage for the span queries. ",
            "date": "2015-04-09T13:36:55+0000"
        },
        {
            "id": "comment-14487485",
            "author": "Uwe Schindler",
            "content": "I would love to see it functioning again.\n\nThe 5.x one works. But Trunk builds were disabled, because FreeBSD crushes Java 8. The migration of Lucene.zones to Ubuntu is on the go, I am just waiting for INFRA to activate it (see INFRA-9096). ",
            "date": "2015-04-09T15:10:10+0000"
        },
        {
            "id": "comment-14586874",
            "author": "Anshum Gupta",
            "content": "Bulk close for 5.2.0. ",
            "date": "2015-06-15T21:43:46+0000"
        }
    ]
}