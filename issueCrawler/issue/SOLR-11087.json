{
    "id": "SOLR-11087",
    "title": "Get rid of jar duplicates in release",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Build"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Sub task of SOLR-6806\n\nThe dist/ folder contains many duplicate jar files, totalling 10,5M:\n\n4,6M   ./dist/solr-core-6.6.0.jar (WEB-INF/lib)\n1,2M   ./dist/solr-solrj-6.6.0.jar (WEB-INF/lib)\n4,7M   ./dist/solrj-lib/* (WEB-INF/lib and server/lib/ext)\n\n\n\nThe rest of the files in dist/ are contrib jars and test-framework.\n\nTo weed out the duplicates and save 10,5M, we can simply add a dist/README.md file listing what jar files are located where. The file could also contain a bash one-liner to copy them to the dist folder. Another possibility is to ship the binary release tarball with symlinks in the dist folder, and advise people to use cp -RL dist mydist which will make a copy with the real files. Downside is that this won't work for ZIP archives that do not preserve symlinks, and neither on Windows.",
    "attachments": {
        "SOLR-11087.patch": "https://issues.apache.org/jira/secure/attachment/12877562/SOLR-11087.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-17T11:33:15+0000",
            "content": "First attempt on this, see patch\n\n\n\tChanges the build not to copy duplicate jars into dist/\n\tWebapp \"dist\" target copies solr-core and solr-solrj jars from build folders, not from dist\n\tdist target puts a README.md file in dist/, explaining where to find remaining files\n\tNew bin/solr utils dist <path-to-folder> command that assembles a complete dist folder\n\n\n\nThe tarball created before this patch is 144Mb, and after 132Mb, which is a 12Mb (9%) reduction.\n\nTodo:\n\n\tTest on Windows\n\tUpdate ref-guide\n\tAssess whether the change has other side effects (scripts, docs mm)\n\n ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16089681"
        },
        {
            "date": "2017-07-17T12:06:21+0000",
            "content": "Hi,\n\nI like the cleanup. Personally, I'd go the other route: I would remove the whole webapp folder and instead of using start.jar, I'd assemble the servlet context in a simple Java main() method, where the JAR files are picked from the server or dist folder. I have done this several times. You can build a webapp without a web.xml in code with about 30 lines of code to startup jetty and link servlet filters and code. The good thing with that is on top, that you don't even need a webapp folder anywhere. And static resources can also be delivered directly from a JAR file! Here is a simple example I did for a micro-service:\n\n\n      final Server server = new Server();\n      server.setStopAtShutdown(true);\n      server.setStopTimeout(1000L);\n      \n      // setup connectors...\n      final ServerConnector ipv6 = new ServerConnector(server);\n      ipv6.setPort(PORT);\n      ipv6.setHost(\"::1\");\n      ipv6.setIdleTimeout(IDLE_TIMEOUT);\n      server.addConnector(ipv6);\n\n      // add servlet context:\n      final ServletContextHandler context = new ServletContextHandler(ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS);\n      context.insertHandler(new ResourceHandler());\n      context.setBaseResource(Resource.newClassPathResource(\"/webroot/\"));\n      context.addServlet(SelectServlet.class, \"/select\");\n      context.addServlet(RecordServlet.class, \"/record/*\");\n      server.setHandler(context);\n\n      // start webserver\n      server.start();\n      server.join();\n\n\n\nThis is just an example binding 2 servlets, i just removed other non-servlet and logging stuff, so you can add your own access/jetty logging, too. The good thing with that is also that we can get rid of the stupid internal \"/c\" redirects as you have full flexibility where you bind what. And finally the WAR file is gone and the server does not unpack it on startup. In addition, we can do all the startup logic before spawning jetty (e.g. starting embedded zookeeper, checking log4j config,...)\n\nStatic files and stuff are loaded using context.insertHandler(new ResourceHandler()); context.setBaseResource(Resource.newClassPathResource(\"/webroot/\")); directly from one of the JAR files (where a webroot/ folder is part of the JAR's contents/resources). This can be a separate JAR file or simply in main solr.jar. This makes it very small and unpacking Solr would take only a second then (currently unzipping all those small static files is a mess).\n\nSo I'd go that route and as a first step refactor the web.xml file into a simple startup main() method as seen before. I can help with that. I have some time this week, so I may make a quick and dirty mockup - if you agree. ",
            "author": "Uwe Schindler",
            "id": "comment-16089721"
        },
        {
            "date": "2017-07-17T12:20:47+0000",
            "content": "This makes it very small and unpacking Solr would take only a second then (currently unzipping all those small static files is a mess).\nSolr no longer unzips a war since long time ago?\n\nI did not go down that route now because it sounds very much more invasive. But I like it a lot, and it would give us much more control over everything, including the naming of Java options such as jetty.port which we could now rename to solr.port etc. Guess this is how our Test framework constructs Jetty instances already.\n\nI'm in no hurry with this. If you have time to mock up a refactoring to get rid of the dependence of all jars being in WEB-INF/lib and instead pick them from /dist then that would be perfect and achieve two goals in one  ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16089739"
        },
        {
            "date": "2017-07-17T12:37:59+0000",
            "content": "Solr no longer unzips a war since long time ago?\n\nThis was meant about unzipping the solr distribution on its own. If all the \"static stuff\" like jquery and a lot of HTML is gone, it would unzip faster and allocate a lot less disk space. You just have one JAR file with the whole admin interface as a single JAR. This would also allow to package the old and new admin interface separately and maybe exchange them or make it pluggable!? I agree, the WAR is no longer unpacked - you are right. I was taking care of this with the others a while ago. The Unzipping of distribution is now also a lot faster since we removed the Javadocs - thanks about that! ",
            "author": "Uwe Schindler",
            "id": "comment-16089760"
        },
        {
            "date": "2017-07-17T12:47:53+0000",
            "content": "Ah, now I see. You mean jaring up the webapp/web folder. I did a count and those are 310 files. I agree it would compress better and make fewer files to unzip.\nBut on the other hand I like the fact that you very easily can simply edit a HTML or JS file and see the change in Solr's Admin. I think it has helped people identifying and fixing UI bugs for us. If it was all inside a jar that needed unpack -> edit -> re-pack to see the change, then hacking on Solr's UI would be less accessible both for users and developers.\n\nMoving all the solr.xml things into Java code is actually just a benefit, it keeps folks from treating Solr as a Web app and doing things the wrong way. At the same time, I think we'll see complaints once we do the move, from people who depend on their custom filters etc. But as I said, I think that is just a positive step towards a truly standalone app. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16089774"
        }
    ]
}