{
    "id": "SOLR-8146",
    "title": "Allowing SolrJ CloudSolrClient to have preferred replica for query/read",
    "details": {
        "components": [
            "clients - java"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.3",
        "status": "Reopened",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Backgrouds\n\nCurrently, the CloudSolrClient randomly picks a replica to query.\nThis is done by shuffling the list of live URLs to query then, picking the first item from the list.\n\nThis ticket is to allow more flexibility and control to some extend which URLs will be picked up for queries.\n\nNote that this is for queries only and would not affect update/delete/admin operations.\n\nImplementation\n\nThe current patch uses regex pattern and moves to the top of the list of URLs only those matching the given regex specified by the system property \n\nsolr.preferredQueryNodePattern\n\n\nInitially, I thought it may be good to have Solr nodes tagged with a string pattern (snitch?) and use that pattern for matching the URLs.\n\nAny comment, recommendation or feedback would be appreciated.\n\nUse Cases\n\nThere are many cases where the ability to choose the node where queries go can be very handy:\n\nSpecial node for manual user queries and analytics\n\nOne may have a SolrCLoud cluster where every node host the same set of collections with:  \n\n\tmultiple large SolrCLoud nodes (L) used for production apps and\n\thave 1 small node (S) in the same cluster with less ram/cpu used only for manual user queries, data export and other production issue investigation.\n\n\n\nThis ticket would allow to configure the applications using SolrJ to query only the (L) nodes\n\nThis use case is similar to the one described in SOLR-5501 raised by Manuel Lenormand\n\nMinimizing network traffic\n\nFor simplicity, let's say that we have  a SolrSloud cluster deployed on 2 (or N) separate racks: rack1 and rack2.\n\nOn each rack, we have a set of SolrCloud VMs as well as a couple of client VMs querying solr using SolrJ.\n\nAll solr nodes are identical and have the same number of collections.\n\nWhat we would like to achieve is:\n\n\tclients on rack1 will by preference query only SolrCloud nodes on rack1, and\n\tclients on rack2 will by preference query only SolrCloud nodes on rack2.\n\tCross-rack read will happen if and only if one of the racks has no available Solr node to serve a request.\n\n\n\nIn other words, we want read operations to be local to a rack whenever possible.\n\nNote that write/update/delete/admin operations should not be affected.\n\nNote that in our use case, we have a cross DC deployment. So, replace rack1/rack2 by DC1/DC2\n\nAny comment would be very appreciated.\n\nThanks.",
    "attachments": {
        "SOLR-8146.patch": "https://issues.apache.org/jira/secure/attachment/12765715/SOLR-8146.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-10T22:36:32+0000",
            "author": "Arcadius Ahouansou",
            "content": "Using LinkedList instead ",
            "id": "comment-14952078"
        },
        {
            "date": "2015-11-10T07:54:36+0000",
            "author": "Arcadius Ahouansou",
            "content": "Updated with more tests.\nAny comment or feedback would be most appreciated ",
            "id": "comment-14998123"
        },
        {
            "date": "2015-11-10T15:14:10+0000",
            "author": "Shawn Heisey",
            "content": "Rack awareness is covered by SOLR-6205. ",
            "id": "comment-14998723"
        },
        {
            "date": "2015-11-10T17:11:58+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Shawn Heisey\nThank you very much for having a look at this issue.\n\nThis issue and SOLR-6205 (that I have raised a while back) are different things.\nSOLR-6205 about the solrCloud server availability/redundancy across 2 DCs while this one is solely about SolrJ preferences.\n\nFor instance let's say\n\n\ta SolrJ client is deployed in DC1 and\n\twe have replica of a given shard in both DC1 and DC2.\n\tThis patch allows to configure SolrJ to by preference query the replica in DC1 first, minimizing unnecessary trip to the other DC2 to get data that is available in its own DC1.\n\n\n\nThanks. ",
            "id": "comment-14998924"
        },
        {
            "date": "2015-11-10T17:12:38+0000",
            "author": "Arcadius Ahouansou",
            "content": "they are not the same issue ",
            "id": "comment-14998928"
        },
        {
            "date": "2015-11-11T07:10:28+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Shawn Heisey\nI thought the initial issue description may have been misleading and unclear.\nSo, I have re-edited it.\n\nPlease let me know in case there is any question.\n\nThanks. ",
            "id": "comment-15000038"
        },
        {
            "date": "2015-12-18T13:17:06+0000",
            "author": "Noble Paul",
            "content": "I see that a regex is used for expressing the affinity.\n\nI would rather have something like the replica placement rule and piggy back on same syntax\n\nexamples \n\npreferredNodes=host:<hostName>\n\n\nyou can implement new snitches such as DCAwareSnitch or RackAwareSnitch and add to the patch and use rules like\n\n\npreferredNodes=dc:DC2\nprefrredNodes=rack:RACK3\n\n ",
            "id": "comment-15063936"
        },
        {
            "date": "2015-12-18T17:05:12+0000",
            "author": "Arcadius Ahouansou",
            "content": "Thank you very much Noble Paul.\nI will have a look into snitch ",
            "id": "comment-15064219"
        },
        {
            "date": "2015-12-21T12:46:54+0000",
            "author": "Noble Paul",
            "content": "Actually you can write a snitch which uses a regex predicate as in\n\n\npreferredNodes=hostPattern:<theregex>\n\n\n\nAs the Snitch does not need any extra params , just add it to the list of well known snitches  ",
            "id": "comment-15066409"
        },
        {
            "date": "2016-01-04T11:06:13+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Noble Paul\nThank you very much for your suggestions.\n\nRegarding: preferredNodes=hostPattern:<theregex>,\n\nIf I understand well ( and correct me if I am wrong), in order to use the preferredNodes snitch, one will have to add that snitch to the collection. Is this correct?\n\nThe way the current implementation works is that there is not change at all on the SolrCloud server or collection. \n\nAll the configuration is on the client SolrJ: This is on purpose because it's the client SolrJ that needs to choose its preferred servers.\nIdeally, with the use of snitch, we would like to let the client make this choice without having to add anything to the server or collection.\n\nHow can this be achieved? Any hint will be appreciated.\n\nThank you very my Noble Paul\n ",
            "id": "comment-15080997"
        },
        {
            "date": "2016-01-04T12:58:34+0000",
            "author": "Noble Paul",
            "content": "in order to use the preferredNodes snitch, one will have to add that snitch to the collection. Is this correct?\n\nwell, no. The implicit snitches are available to all collections. A snitch just has to say that I can provide values for a particular tag . \n\n\nUsing regex is not really possible in the current design . It is only possible to provide discrete values. or ranges. \n\nLets assume an ip address 192.93.255.255 . It is possible for a Snitch to provide values such as\nip_1 = 192\nip_2 = 93\nip_3 = 255\nip_4 = 255\n\nIn this case you can provide a rule which says preferredNodes=ip_1:192,ip_2:93\nThis means it will choose only nodes 192.93.*.* \nThis can be a part of the ImplicitSnitch itself. The implicitSnitch can provide values for tags ip_1, ip_2. ip_3, ip_4 and for ip v6 it can provide values for ip_5 and ip_6 as well ",
            "id": "comment-15081120"
        },
        {
            "date": "2016-01-04T13:56:36+0000",
            "author": "Arcadius Ahouansou",
            "content": "Thank you very much Noble Paul for the clarification.\n\nLooking at SOLR-6289, maybe there is an overlap between ip_2 vs dc and ip_3 vs rack? ",
            "id": "comment-15081175"
        },
        {
            "date": "2016-01-04T14:00:11+0000",
            "author": "Noble Paul",
            "content": "It's OK , the tag names should make sense , that is all using DC or rack does not necessarily make sense in all cases ",
            "id": "comment-15081176"
        },
        {
            "date": "2016-01-07T12:17:08+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Noble Paul\nI have been working on the support for IP tags such as ip_1, ip_2, ip_3 and ip_4 in ImplicitSnitch.\n\nSupport for IPv6 is not yet implemented but I do have some failing tests for that\n\nIs it OK for me to create a different ticket/card for support for the IP tags?\n\nThanks. ",
            "id": "comment-15087281"
        },
        {
            "date": "2016-01-07T12:19:10+0000",
            "author": "Noble Paul",
            "content": "Yeah, open a ticket for enhancing the snitch ",
            "id": "comment-15087282"
        },
        {
            "date": "2016-01-09T09:03:45+0000",
            "author": "Arcadius Ahouansou",
            "content": "The new ticket is SOLR-8522 ",
            "id": "comment-15090508"
        },
        {
            "date": "2016-07-06T20:09:26+0000",
            "author": "Susheel Kumar",
            "content": "Hello Noble, Arcadius,\n\nCan you please describe how exactly ImplicitSnitch can be used for preferredNodes and if there is anything to be done on SolrJ client to use preferredNodes for querying replicas?\n\nI have created a JIRA  https://issues.apache.org/jira/browse/SOLR-9283 to document the exact steps/details for anyone to refer.\n\nThanks,\nSusheel ",
            "id": "comment-15364991"
        },
        {
            "date": "2016-07-17T20:37:40+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Susheel.\n\nThis ticket is not fully implemented yet.\n\nThe attached patch is the very first version which does work, but relies on passing regex as start up param to the SolrJClient in the format\n\n\n-Dsolr.preferredQueryNodePattern=SOME_REGEX_MATCHING_A_SET_OF_SOLR_NODES\n\n\n\nThis approached worked well for us but:\n\n\tIt does not look very elegant and\n\tit does not integrate well into the current code base.\n\n\n\nso, a better way to do this is to use the snitch.\n\nUnfortunately, due to changes in priority, I was not able to come back to finish this work. ",
            "id": "comment-15381513"
        },
        {
            "date": "2016-07-18T14:53:26+0000",
            "author": "Susheel Kumar",
            "content": "Thanks, Noble and Arcadius for clarifying the status of SOLR-8146.  \n\n\nHello Noble,  I can start working on the patch.  Have a question to clarify\n\n1. For multi-data center scenario, the preferredNodes rule may specify different values / ranges depending on, from which data center solrj client is querying?  So do you see preferredNodes rule being used during query operation like \n\nhttp://localhost:8983/solr/collection1/select?rule=preferredNodes=ip_1:192,ip_2:93\n\nThe current Snitches design/implementation is only being used in Admin Collections API (https://cwiki.apache.org/confluence/display/solr/Collections+API) for replica placement so this will be another usage of Snitches and extending to query operations.\n\nThanks,\nSusheel\n ",
            "id": "comment-15382390"
        },
        {
            "date": "2016-07-18T15:09:16+0000",
            "author": "Noble Paul",
            "content": "It should be also honored by SolrJ . SolrJ should look for the parameters and identify the nodes right there itself. If the request indeed reaches a node, The first server to receive this request should route the request to the right nodes\nThe params could be as follows\n\nroutingRule=ip_1:192&routingRule=ip_2:93\n\n\n ",
            "id": "comment-15382424"
        },
        {
            "date": "2016-07-18T18:13:06+0000",
            "author": "Susheel Kumar",
            "content": "Thanks, Paul.  I like the routingRule terminology than preferredNodes. The current rules like cores, freeDisk, host etc doesn't include \"rule\" in their names, so wanted to double check if \"routingRule\" name is okay and there is similar parameter name _route_ for routing keys https://cwiki.apache.org/confluence/display/solr/Advanced+Distributed+Request+Options.  Hope these names all fit together to avoid any ambiguity.  ",
            "id": "comment-15382761"
        },
        {
            "date": "2016-08-10T01:29:56+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user susheelks opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/66\n\n    SOLR-8146: Allowing SolrJ CloudSolrClient to have preferred replica for query/read\n\n    This pull request is to get feedback on the approach of implementing routingRule. \n\n    The unit test is not ready yet as facing challenges on how to mock/ inject dependency to simulate a cluster with different IP addresses machines and only matching one gets added to urlList which ultimately gets passed to LBHttpSolrClient.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/susheelks/lucene-solr SOLR-8146\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/66.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #66\n\n\ncommit e761d7c2e1ecf6ce37eb43bc764897fbed8cdc4e\nAuthor: Kumar, Susheel (CORP) <susheel.kumar@adp.com>\nDate:   2016-08-10T00:42:45Z\n\n    changes for limiting query to shard matching routing rule\n\n ",
            "id": "comment-15414569"
        },
        {
            "date": "2016-09-28T00:51:27+0000",
            "author": "Susheel Kumar",
            "content": "Hello Noble,\n\nCan you please review the pull request and provide feedback on the approach of implementing routingRule and accordingly i can move forward with it.\n\nThanks,\nSusheel ",
            "id": "comment-15527951"
        },
        {
            "date": "2016-09-29T14:08:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3ab22f6e3a21e748220946aed7bac9bce3c9b332 in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3ab22f6 ]\n\nSOLR-8146: refactored the replica rules classes so that they can be accessed from SolrJ ",
            "id": "comment-15532879"
        },
        {
            "date": "2016-09-29T14:16:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 063d624cdcf73e0eeb3c11487a76d4c3de7f40dc in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=063d624 ]\n\nSOLR-8146: refactored the replica rules classes so that they can be accessed from SolrJ ",
            "id": "comment-15532902"
        },
        {
            "date": "2016-09-29T14:22:38+0000",
            "author": "Noble Paul",
            "content": "The patch after the recent refactoring. Without that you cannot access it from SolrJ\n\n\tclass ClientSnitchContext is not implemented yet.\n\twe will need to cache the tag (with a timeout) values (only the ones that need server input ) at SolrJ\n\n\n ",
            "id": "comment-15532920"
        },
        {
            "date": "2016-09-30T12:36:11+0000",
            "author": "Noble Paul",
            "content": "Susheel Kumar you can take up my patch and continue with that ",
            "id": "comment-15535876"
        },
        {
            "date": "2016-10-02T01:47:21+0000",
            "author": "Susheel Kumar",
            "content": "Thank you, Noble. I am going thru the changes and will get back to you. ",
            "id": "comment-15539501"
        },
        {
            "date": "2016-10-08T16:11:27+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user susheelks commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/66\n\n    Merged routingRule changes after latest refactored code ",
            "id": "comment-15558228"
        },
        {
            "date": "2016-10-28T02:39:21+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "What is the status of this issue? Seems like some code has been committed but there is no mention in CHANGES.txt. Also now we have two Snitch classes on master (I did not check the other branches) one in org.apache.solr.cloud.rule.Snitch (which seems to be unused) and another in org.apache.solr.common.cloud.rule.Snitch. Can we please clean this up? ",
            "id": "comment-15614065"
        },
        {
            "date": "2016-10-28T02:47:40+0000",
            "author": "Noble Paul",
            "content": "What is done is just a refactoring so that this can be used in solrj. So, no need to mention it in changes.txt.  yeah there is an unused snitch class that needs to go ",
            "id": "comment-15614085"
        },
        {
            "date": "2016-10-28T02:56:16+0000",
            "author": "ASF subversion and git services",
            "content": "Commit e6ce903a76b2fd6bb28dc76805add6b37a7814eb in lucene-solr's branch refs/heads/master from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e6ce903 ]\n\nSOLR-8146: removing the unused class ",
            "id": "comment-15614098"
        },
        {
            "date": "2016-10-28T03:02:18+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 591984cd0325c387e3b4976e5236eb7c7cd1e93e in lucene-solr's branch refs/heads/branch_6x from Noble Paul\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=591984c ]\n\nSOLR-8146: removing the unused class ",
            "id": "comment-15614108"
        },
        {
            "date": "2017-01-24T13:58:22+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user susheelks closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/66 ",
            "id": "comment-15836157"
        },
        {
            "date": "2017-01-28T13:44:55+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user susheelks opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/147\n\n    SOLR-8146 decouple building url list from CloudSolrClient to separate class for\u2026\n\n    I am suggesting to decouple building the url list from CloudSolrClient.sendRequest(..) to a separate class.  The advantage will be the ability to easily write unit test for building the url list part and as we implement more routingRules for querying like query only the same rack replica's / OR query replica's where mem/cpu/disk utilisation is below a threshold can be easily unit tested etc.\n\n    I can add more tests if approach looks good. Please review.\n\n\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/susheelks/lucene-solr SOLR-8146\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/147.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #147\n\n\ncommit 852aa685cc626a4a03c649895ae5ccbfb0008887\nAuthor: Susheel Kumar <susheel2777@gmail.com>\nDate:   2017-01-28T13:33:53Z\n\n    decouple building url list from CloudSolrClient to separate class for better testability\n\n ",
            "id": "comment-15844065"
        },
        {
            "date": "2018-06-04T08:34:34+0000",
            "author": "Edwin Yeo Zheng Lin",
            "content": "Hi,\n\nWould like to check, is there other ways which we can achieve this preferred replica for query/read in CloudSolrClient, or is it still pending implementation?\n\nThis feature is good, so that we can use a different replica for query/read and the replica used for indexing, to maximize the performance of both.\n\nEdwin\n\u00a0 ",
            "id": "comment-16499896"
        },
        {
            "date": "2018-06-07T21:34:47+0000",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "content": "I just related some related Jiras: SOLR-11982 adds support for indicating preferred replicas, although this only works on the server side (meaning, when working with multiple shards). SOLR-12217 is the follow up code to make it work on the client side too ",
            "id": "comment-16505333"
        }
    ]
}