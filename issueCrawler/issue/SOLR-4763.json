{
    "id": "SOLR-4763",
    "title": "Performance issue when using group.facet=true",
    "details": {
        "affect_versions": "4.2",
        "status": "Resolved",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I do not know whether this is bug or not. But calculating facets with group.facet=true is too slow.\n\nI have query that:\n\n\"matches\": 730597,\n\"ngroups\": 24024,\n\n\n\n1. All queries with group.facet=true:\n\n\"QTime\": 5171\n\"facet\": {\n    \"time\": 4716\n\n\n\n2. Without group.facet:\n\n\tFirst query:\n\n\"QTime\": 3284\n\"facet\": {\n    \"time\": 3104\n\n\n\n\n\n\n\tNext queries:\n\n\"QTime\": 230,\n\"facet\": {\n    \"time\": 76\n\n\n\n\n\nSo I think with group.facet=true Solr doesn't use cache to calculate facets.\n\nIs it possible to improve performance of facets when group.facet=true?",
    "attachments": {
        "SOLR-4763.patch": "https://issues.apache.org/jira/secure/attachment/12620488/SOLR-4763.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13641883",
            "date": "2013-04-25T15:14:53+0000",
            "content": "If you don't know if it's a bug or not it's best to bring it up on the mailing list first, so devs don't have to manage invalid JIRA issues and so you can get a better discussion (and help) going.  I'm not sure if this a big or not.  Maybe Martijn van Groningen will know. "
        },
        {
            "author": "Alexander Koval",
            "id": "comment-13641922",
            "date": "2013-04-25T16:14:59+0000",
            "content": "I'm sorry for that. I found 2 discussions in the mailing list:\nhttp://lucene.472066.n3.nabble.com/Grouping-performance-problem-td3995245.html\nhttp://lucene.472066.n3.nabble.com/group-facet-true-performances-td4021639.html\n\nThe solution has not been found.\n\nI think with this issue it is not possible to use group.facet=true option in production. "
        },
        {
            "author": "Miriam C",
            "id": "comment-13680951",
            "date": "2013-06-12T05:27:09+0000",
            "content": "This bug leaves no choice but to choose between facets and groups.\nIs This going to be fixed?\n "
        },
        {
            "author": "Daniel Bryant",
            "id": "comment-13689420",
            "date": "2013-06-20T17:27:19+0000",
            "content": "This is a major issue for me too. I have an index with 2 million documents, and I query with five facet fields (each with 30+ groups) \n\nif I set group.facet=false the query can take 2000ms on first run, but no more than 250ms on subsequent execution\n\nif I set group.facet=true it takes on average 18000ms on the first run, and the same time on all subsequent runs (clearly indicating the cache is not being used)\n\nCould anyone in the Solr team indicate whether this is going to be fixed please? "
        },
        {
            "author": "Tom Burton-West",
            "id": "comment-13720994",
            "date": "2013-07-26T17:52:04+0000",
            "content": "I have similar problems with performance, but in my case memory use is an issue as well. This is probably an extreme use case, but I thought it might be helpful to add to the discussion.\n\nWe currently index close to 11 million books with the entire book being a Solr document.  We are considering instead indexing pages as the Solr document and using grouping to return results organized by book.\n\nI'm currently testing an index of about 1 million books indexed on a page level, spread out over 3 shards.  There are about 360 million pages.  For a worst-case query that returns about 200 million documents, group.truncate takes about 10 seconds (which is acceptable for us as a worst-case).  However, group.facet takes closer to 15 minutes.  We are running on a server with 74GB of memory with 32GB dedicated to the JVM.  What I see for this query with group.facet is that memory use goes up above about 30GB and then multiple full garbage collections occur.  \n\nIn contrast, using normal rather than the worst case queries, our 90th percentile queries (which return only a few million hits rather than 200 million) took about 700 ms with facet.truncate and 2000 ms with group.facet.\n\nI'm wondering how much of the performance issues others are observing might be due to memory requirements and slowdowns due to garbage collection.\n\nTom "
        },
        {
            "author": "Daniel Bryant",
            "id": "comment-13803997",
            "date": "2013-10-24T09:10:28+0000",
            "content": "Hi all,\n\nFor anyone following this issue it is worth looking at an upcoming related fix in Solr 4.6 https://issues.apache.org/jira/browse/SOLR-5027\n\nWe're just testing if this meets our requirements now.\n\nThanks to Charlie Hull from Flax for pointing us towards this!\n\nDaniel "
        },
        {
            "author": "Hua Jiang",
            "id": "comment-13856823",
            "date": "2013-12-26T10:57:15+0000",
            "content": "This patch solved the problem for me. Apply it to TermGroupFacetCollector.java, lucene 4.6.\n\nThe problem occurs when querying against an unoptimized index, and having a large number of distinct (groupField, facetField) value pairs. The TermGroupFacetCollector works in a way that avoids retrieving values for group field or facet field for each doc, but it introduces much more field value retrievings in the case of segmented index and large (groupField, facetField) value pair number. "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14006822",
            "date": "2014-05-23T05:27:55+0000",
            "content": "I tried out the patch and SimpleFacetsTest.testSimpleGroupedFacets() fails.\n\nUnless my understanding is incorrect, the patch seems to be incorrect. \n\nThis change does not affect anything. That is because this condition will always be true - \n\n-      segmentTotalCount++;\n-      segmentFacetCounts[facetOrd]++;\n\n-        groupedFacetHits.add(new GroupedFacetHit(groupKey, null));\n+        if (groupedFacetHits.add(new GroupedFacetHit(groupKey, null))) {\n+          segmentTotalCount++;\n+          segmentFacetCounts[facetFieldNumTerms]++;\n+        }\n\n\n\nThe reason being the code will return if that segment does not have the necessary values  -  \n\n\nif (segmentGroupedFacetHits.exists(segmentGroupedFacetsIndex)) {\n        return;\n      }\n\n\n\n\nAlso I don't think removing the for loop in setNextReader() is correct. If you add this back the test will pass.\n\nI haven't looked into the MultiValued scenario yet but I feel that if it's a caching issue the bug will be not at the lucene level.  I'll look into it in greater detail. "
        },
        {
            "author": "Hua Jiang",
            "id": "comment-14017623",
            "date": "2014-06-04T11:18:06+0000",
            "content": "Hello, Varun. Thanks for your feedback. \n\nI rebuild lucene_solr on my laptop, and every tests just pass. I made this patch base on revision 1553089. If you are using a different revision, you may have to do some modification yourself. I will explain the patch a little more, and hope it helps.\n\nIn the unpatched code, the groupedFacetHits is a list of GroupedFacetHit objects, which stores unique combinations of values of the group field and the facet field in the previous segments. When a new segment is opened, this list is traversed first to recalculate the segmentGroupedFacetsIndex, because that value may differ from segment to segment. That's what the loop you mentioned in the setNextReader() is doing.\n\nDuring the the recalculation, the lookupTerm() method is invoked on facetFieldTermsIndex and groupFieldTermsIndex. This method uses binary search to lookup values among all the values that appears in the group/facet field in the current segment.\n\nLet's assume that we have D documents distributed in S segments. And the docments are distributed evenly, so that we have G and F unique values in each segment for the group and facet field, and that the length of the groupedFacetHits list after the nth segment is processed is n*L. Then the complexity of the recalculation is (logG + logF) * (L + 2L + ... + (S-1)L) ~ O((LogG + LogF)*L*S^2). It's proportion to S squared. As S grows, performance drops rapidly.\n\nIn the patched version, I changed groupedFacetHits from a list to a set. So the recalculation can be avoided, because when you get a GroupFacetHit, you just add it the to set without worrying about that some other GroupFacetHit with the same group and facet field values has been added before, because it is a set. The add() method on a set will return false, when the same values is already added. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14034610",
            "date": "2014-06-17T23:41:22+0000",
            "content": "Hua Jiang's patch, modified to patch trunk.\n\nI didn't get any test failures from Hua Jiang's patch against tags/lucene_solr_4_6_0/, and SimpleFacetsTest succeeds for me with this patch against trunk. "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14113022",
            "date": "2014-08-27T22:58:46+0000",
            "content": "Going to review this in depth over the next couple of days and try to get it committed soon. "
        },
        {
            "author": "Adrien Brault",
            "id": "comment-14224845",
            "date": "2014-11-25T17:08:40+0000",
            "content": "Timothy Potter Hey, are you still planning to work on this ? "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14224888",
            "date": "2014-11-25T17:38:14+0000",
            "content": "haven't had a chance to review this yet ... "
        },
        {
            "author": "Jim Musil",
            "id": "comment-14291888",
            "date": "2015-01-26T14:37:30+0000",
            "content": "I submitted an alternative approach and patch to solve this problem: https://issues.apache.org/jira/browse/SOLR-7036.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14536765",
            "date": "2015-05-09T16:59:17+0000",
            "content": "I may not get to this for a while, we need to reconcile this and 7036. If anyone has spare cycles, I won't be offended by someone else doing the heavy lifting  "
        },
        {
            "author": "Anh Hoang Tong",
            "id": "comment-14602539",
            "date": "2015-06-26T08:01:35+0000",
            "content": "I encountered the same problem when I faceted on some fields docValues=false. That query took about 1300 ms. But when I turn docValues=true for all fields I want to facet. This time, it took only 140 ms. (I have about 500.000 documents). For me, this result is acceptable. (I run on Solr 5.1) "
        },
        {
            "author": "Ovidiu Mihalcea",
            "id": "comment-14681683",
            "date": "2015-08-11T11:51:52+0000",
            "content": " Would really need some good news with this. We really need result grouping with faceting and this is really slowing our site...  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14713384",
            "date": "2015-08-26T13:14:26+0000",
            "content": "Bulk move to 5.4 after 5.3 release. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-15613881",
            "date": "2016-10-28T01:08:31+0000",
            "content": "Given Yonik's comments on SOLR-7036 and assuming that Jim Musil reports back that Yonik's approach makes it so we can close SOLR-7036, should we close this one too? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-15786627",
            "date": "2016-12-30T01:53:37+0000",
            "content": "Actually, probably previous to 6.4. The consensus seems to be use JSON facets.\n\nIf JSON facets don't really answer we can re-open this "
        }
    ]
}