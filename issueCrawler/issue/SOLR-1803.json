{
    "id": "SOLR-1803",
    "title": "ExtractingRequestHandler does not propagate multiple values to a multi-valued field",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "contrib - Solr Cell (Tika extraction)"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "When multiple values for one field are extracted from a document, only the last value is stored in the document. If one or more values are given as parameters, those values are all stored.",
    "attachments": {
        "display-extracting-bug.patch": "https://issues.apache.org/jira/secure/attachment/12437684/display-extracting-bug.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Lance Norskog",
            "id": "comment-12840472",
            "date": "2010-03-03T05:25:17+0000",
            "content": "The attached patch does not fix the bug. It causes the ExtractingRequestHandler test program to illustrated the bug.  Line 90 in TestExtractingRequestHandler.java should succeed and does not.\n\nSOLR-1633 comments on a related behavior. This test patch also checks for that behavior. \n\nSince both this and 1633 are in the same area, work should be combined. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12840474",
            "date": "2010-03-03T05:27:14+0000",
            "content": "This patch illustrates the problem. Line 90 should succeed but does not. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12843367",
            "date": "2010-03-09T23:56:39+0000",
            "content": "A few comments:\n\n1. If you want to test multi-valued field stuff, you really need to use a field that is multi-valued. multi_s is not as far as I can see.\n\n2. You search for multi_s:value1 and multi_s:value2, but where do you ever add them? It seems valid that they are not found.\n\n3. Your test (if/when written correctly) will pass whether the field is multivalued or not - ie it won't test if the params were really added as a multi-valued field.\n     Solr cell does add multiple literals as multi-values when the the field is actually multi-valued, but when its not, it just concatenates the values - so those searches\n    would still pass. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12843372",
            "date": "2010-03-10T00:06:04+0000",
            "content": "Strike number one - didn't realize that the test schema for extraction is 1.0 - multivalued by default it is.\n\nSo I'd address 2 and 3:\n\nadd the values \"value1\" and \"value2\".\n\nThat will get the test passing. You'd still need to device a test to tell you its making a mulivalue rather than concatenating as well. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12845656",
            "date": "2010-03-16T01:53:56+0000",
            "content": "Actually the problem is that the effect of combining params and generated values is not defined well. I suggest that the semantics should be, \"a param is treated exactly like a generated field\".\n\nUnder this theory, these are the test cases:\n\nliteral.single_s=abc and no generated single_s data:\n    <str name=\"single_s\">abc</str>\n\nliteral.single_s=abc and generated data \"def\":\n    <str name=\"single_s\">abc def</str>\n\nliteral.multi_s=abc and generated data \"def\":\n    <arr name=\"multi_s\">\n      <str>abc</str>\n      <str>def</str>\n    </arr>\n\nIs this a coherent and useful semantics?  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12845691",
            "date": "2010-03-16T03:51:52+0000",
            "content": "Lance: i agree that the current semantics are either poorly definied, or not very useful, but your suggestion seems like it overlooks what is probably the two most common cases:\n\n\tto have literal values that overwrite/replace extracted values\n\tto have literal values that act as \"defaults\" unless extracted values are found\n...those seem like they should both be possible for single and multivalued fields\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12845692",
            "date": "2010-03-16T03:52:40+0000",
            "content": "As noted in an earlier issue about how literal fields interact with fmap.* "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12845697",
            "date": "2010-03-16T04:08:09+0000",
            "content": "Actually the problem is that the effect of combining params and generated values is not defined well.\n\nYour tests and summary don't appear to try and cover this ... should we update the Title and Description?\n\nI suggest that the semantics should be, \"a param is treated exactly like a generated field\".\n\nHave you tested that this is not the case? When I look at the code, it appears to me that it does what your proposed semantics say -\nparams are treated like generated fields when adding multiple fields or concatenating - I have not tested this, but thats what the\ncode looks like its doing ... "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12851681",
            "date": "2010-03-31T01:17:26+0000",
            "content": "3 other issues go after this same problem - probably SOLR-1856 will win the turtle race. "
        }
    ]
}