{
    "id": "SOLR-4492",
    "title": "Please add support for Collection API CREATE method to evenly distribute leader roles among instances",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently in SolrCloud 4.1, a CREATE call to the Collection API will cause the server receiving the CREATE call to become the leader of all shards.\n\nI would like to ask for the ability for the CREATE call to evenly distribute the leader role across all instances, ie: if I create 3 shards over 3 SOLR 4.1 instances, each instance/node would only be the leader of 1 shard.\n\nThis would be logically consistent with the way replicas are randomly distributed by this same call across instances/nodes.\n\nCurrently, this CREATE call will cause the server receiving the call to become the leader of 3 shards.\n\ncurl -v 'http://<HOST>:8983/solr/admin/collections?action=CREATE&name=test&numShards=3&replicationFactor=2&maxShardsPerNode=2'\n\nPS: Thank you SOLR developers for your contributions!\n\nTim Vaillancourt",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13584936",
            "date": "2013-02-23T01:38:54+0000",
            "content": "I don't know a lot about how leader election/creation currently works, but as a novice in this area, here are some suggestions i havne't fully thought through...\n\n\n\tit seems like picking the leaders on collection creation should use the same algo as leader election when a leader goes down\n\tinstead of picking leaders purely randomly, it seems like the leader election algo could be a lottery, with the number of tickets each node has inversely proportionate to the amount of \"load\" that node is handling\n\t\"load\" could be an generic numeric concept contributed by various things along the lines of \"(num_local_shards + (17 * num_shards_we_are_leader_for) + $some_admin_configurable_property) * OperatingSystemMXBean.html.getAvailableProcessors() / OperatingSystemMXBean.html.getSystemLoadAverage()\"\n\n\n\n(where \"$some_admin_configurable_property\" gives users the ability to say \"this machine is N times beefier then that machine\") "
        },
        {
            "author": "Tim Vaillancourt",
            "id": "comment-13585002",
            "date": "2013-02-23T04:41:47+0000",
            "content": "Major -> Minor, I think this isn't so critical as you can workaround removing/adding nodes. "
        },
        {
            "author": "Tim Vaillancourt",
            "id": "comment-13586253",
            "date": "2013-02-25T20:18:50+0000",
            "content": "I like the logic mentioned. As an Ops guy I'm basically looking for a \"least leader\" algo, ie: make the winner the node with the least leader roles, otherwise random. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14119331",
            "date": "2014-09-03T04:41:25+0000",
            "content": "Tim:\n\nThis is old, but I'm about to get into this code a bit.\n\nCurrently, I think this could be accomplished by the following steps (note, this is making use of the collections API, which is evolving)\n\n1> create a collection with no replicas and a 'nodeset' where the there were exactly as many nodes specified in the nodeset as shards. I think this will put one leader on each shard.\n\n2> use the ADDREPLICA command to, well, add replicas on specific nodes to the collection.\n\nThat's if you want to take total control including leader placement. If you don't particularly care, you could just specify the nodeset on the create command and let the leaders and followers fall where they may.\n\nMore later in all probability. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14175237",
            "date": "2014-10-17T16:54:03+0000",
            "content": "Fixed with the checkins under SOLR-6491\n\nNeeds two steps:\n1> either manually assign the \"preferredLeader\" property to nodes of your choice\nOR\nuse the BALANCESLICEUNIQUE command on the \"preferredLeader\" property to auto-assign the preferredLeader property\n2> issue the REBALANCELEADERS call to \"make it so\".\n\nSee the reference guide. "
        },
        {
            "author": "Tim Vaillancourt",
            "id": "comment-14250149",
            "date": "2014-12-17T17:19:05+0000",
            "content": "Thanks Erick! "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332965",
            "date": "2015-02-23T05:02:50+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}