{
    "id": "LUCENE-4627",
    "title": "Migration layer for facets",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "Spin-off from LUCENE-4602 (and LUCNE-4623). It will be good if we can develop some migration layer so that users don't need to re-index their content when we change how facets are written in the index. Currently the two open issues are cut over to DV and index drill-down terms w/ DOCS_ONLY, but in the future there could be other changes.\n\nI don't think that this layer needs to be very heavy. Something in the form of a FacetsAtomicReaderWrapper. For instance, to support the DV migration, we can implement a PayloadFacetsAtomicReader which translates the payload to DV API (i.e. its docValues() API will actually read from the payload).\n\nWe'd need some API on IW I think to initialize that reader, so that data can be migrated from payload to DV during segment merges.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-13T12:00:37+0000",
            "content": "We can also explore other ideas. E.g. I thought about whether this can be done through a Codec impl, like FacetsCodec41 or something, but I need to dig into Codecs first to learn more what can be done w/ them. ",
            "author": "Shai Erera",
            "id": "comment-13530935"
        },
        {
            "date": "2012-12-13T12:04:32+0000",
            "content": "I think a custom Codec may work?  Its DV impl would secretly, for only the facet$ field, go off to the payloads and load them?  (eg like the hacked up CachedFacetsCollector).  Or if it's DirectSource, just use advance on the D&PEnum ... ",
            "author": "Michael McCandless",
            "id": "comment-13530937"
        },
        {
            "date": "2012-12-13T12:31:51+0000",
            "content": "I think that Codec doesn't even need to load stuff into RAM, I mean as an optimization yes. But this is just meant to get existing indexes workable with the new code. But I'll keep that in mind as well. ",
            "author": "Shai Erera",
            "id": "comment-13530952"
        },
        {
            "date": "2013-01-21T11:20:14+0000",
            "content": "So, LUCENE-4602 went out without the migration layer. Rather, it provides FacetsPayloadMigrationReader which do a one-time migration of payload data to DocValues.\n\nThe DOCS_ONLY case doesn't require migration per se. It is ok for old indexes to retain the existing drill-down terms' posting lists with positions, as this information won't be accessed during search. New documents will be added w/ DOCS_ONLY, and thus positions will be removed from old segments, as they are merged.\n\nThe other side of the migration story, is migrating how facets are encoded in the DocValues. E.g. today they are encoded using dgap+vint. This can be solved in two ways, both by the user:\n\n\n\tProvide a CategoryListDataMigratingReader, which will read the data using the old IntDecoder and encode using the new IntEncoder. If required, e.g. if we'll come up with a better encoder in LUCENE-4609, we can provide such utility.\n\n\n\n\n\tThe user can keep the data encoded as-is, and write a special CategoryListParams which returns a CategoryListIterator, whose setNextReader loads the appropriate IntDecoder for that reader. Since the reader provides information about which version of Lucene created it, it should be an easy task.\n\t\n\t\tHmmm ... but as soon as an old and new segments are merged, the data in the DocValues will be mixed, so that's a viable solution only as long as segments aren't merged.\n\t\n\t\n\n\n\nI think that if we'll introduce another index break for facets, we should revisit this. For now, I don't think that much is needed to be done here. ",
            "author": "Shai Erera",
            "id": "comment-13558696"
        }
    ]
}