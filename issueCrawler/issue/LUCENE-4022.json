{
    "id": "LUCENE-4022",
    "title": "Offline Sorter wrongly uses MIN_BUFFER_SIZE if there is more memory available",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spellchecker"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA",
            "3.6.1"
        ],
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The Sorter we use for offline sorting seems to use the MIN_BUFFER_SIZE as a upper bound even if there is more memory available. See this snippet:\n\nlong half = free/2;\nif (half >= ABSOLUTE_MIN_SORT_BUFFER_SIZE) { \n  return new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n}\n      \n// by max mem (heap will grow)\nhalf = (max - total) / 2;\nreturn new BufferSize(Math.min(MIN_BUFFER_SIZE_MB * MB, half));\n\n\n\nuse use use Math.max instead of min here.",
    "attachments": {
        "LUCENE-4022.patch": "https://issues.apache.org/jira/secure/attachment/12525980/LUCENE-4022.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-04-26T10:05:40+0000",
            "content": "It's a bug, don't know if it was a regression when we talked about how to estimate \"half available heap\" or if it was there even before then, but it should be Math.max().\n\nShould we check for max array size overflows (for folks with super-large heaps)? ",
            "author": "Dawid Weiss",
            "id": "comment-13262502"
        },
        {
            "date": "2012-05-08T11:24:35+0000",
            "content": "here is a patch with a slightly change algorithm. It still takes free/2 as the base buffer size but checks if it is reasonable to grow the heap if the total available mem is 10x larger than the free memory or if the free memory is smaller than MIN_BUFFER_SIZE_MB. If we run into small heaps like on mobile phones where you only have up to 3MB this falls back to the 1/2 or the ABSOLUTE_MIN_SORT_BUFFER_SIZE. \n\nThe actual buffer size is bounded by Integer.MAX_VALUE ",
            "author": "Simon Willnauer",
            "id": "comment-13270371"
        },
        {
            "date": "2012-05-09T07:54:36+0000",
            "content": "Looks good to me Simon. How did you come up with the 10x factor though? Is it something off the top of your head? ",
            "author": "Dawid Weiss",
            "id": "comment-13271194"
        },
        {
            "date": "2012-05-09T11:07:33+0000",
            "content": "How did you come up with the 10x factor though? Is it something off the top of your head?\n\nI wanted to differentiate between a significantly bigger \"unallocated\" heap to force a grow if it makes sense so factor 10 seemed to be a good start. I mean this automatic stuff should be a conservative default that gives you reasonable performance. In the first place it should make sure your system is stable and doesn't run into OOM etc. It might seem somewhat arbitrarily. I will add a changes entry and commit this stuff. Seems like robert wants to roll a 3.6.1 soonish   ",
            "author": "Simon Willnauer",
            "id": "comment-13271312"
        },
        {
            "date": "2012-05-09T18:11:17+0000",
            "content": "committed to 3.6 branch and trunk ",
            "author": "Simon Willnauer",
            "id": "comment-13271647"
        },
        {
            "date": "2012-07-22T16:04:54+0000",
            "content": "Bulk close for 3.6.1 ",
            "author": "Uwe Schindler",
            "id": "comment-13420200"
        }
    ]
}