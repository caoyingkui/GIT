{
    "id": "SOLR-6846",
    "title": "deadlock in UninvertedField#getUninvertedField()",
    "details": {
        "components": [
            "search"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "affect_versions": "4.10.2",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Multiple concurrent calls to UninvertedField#getUninvertedField may deadlock: \nif a call gets to cache.wait() before another thread gets to the synchronized block around cache.notifyAll() code will deadlock because cache.wait() is synchronized with the same monitor object.",
    "attachments": {
        "SOLR-6846.patch": "https://issues.apache.org/jira/secure/attachment/12687111/SOLR-6846.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-14T09:50:42+0000",
            "author": "Avishai Ish-Shalom",
            "content": "A patch using a single synchronized block and no .wait() calls. should be free of deadlocks. ",
            "id": "comment-14245879"
        },
        {
            "date": "2015-05-20T21:52:37+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Avishai Ish-Shalom, have you experienced this deadlock yourself, and did the patch fix it for you? ",
            "id": "comment-14553194"
        },
        {
            "date": "2015-05-22T10:03:31+0000",
            "author": "Avishai Ish-Shalom",
            "content": "yes, i've experienced this bug myself and this patch seems to resolve the issue. unfortunately i was not able to create a reliable test reproducing this issue, since it is triggered statistically on high load over a large dataset. ",
            "id": "comment-14555915"
        },
        {
            "date": "2015-05-22T15:15:09+0000",
            "author": "Yonik Seeley",
            "content": "It's not clear from the description what the problem is.\n\nbecause cache.wait() is synchronized with the same monitor object.\n\nThis is how wait/notify are supposed to work - use the same monitor.  The call to wait() will release the monitor while the thread that called it is blocked. ",
            "id": "comment-14556278"
        },
        {
            "date": "2015-05-22T15:43:18+0000",
            "author": "Avishai Ish-Shalom",
            "content": "You're right of course, cache.wait() isn't the problems here. it seems the problem is monitor granularity, the code uses the same lock and notifies all waiting threads regardless of what field they are waiting for.\nIt's been a while since I worked on this issue, I'll try reproducing it when I have some time on my hand. ",
            "id": "comment-14556341"
        },
        {
            "date": "2016-02-23T04:03:54+0000",
            "author": "Prasanna Ranganathan",
            "content": "I was looking into heap/memory leak issues on our Solr nodes and found the same symptom with many threads stuck on cache.wait() call when analyzing the heap dump. I think the issue is caused by the following:\n\n\nuif = new UnInvertedField(field, searcher);\n\nThe above constructor can throw an IOException. If there happens to be any exception thrown in the constructor then there will be a bunch of threads stuck on the cache.wait() call. Hence the exception needs to be caught and re-thrown after clearing the placeholder object and notifying all the waiting threads. ",
            "id": "comment-15158240"
        }
    ]
}