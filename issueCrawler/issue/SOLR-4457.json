{
    "id": "SOLR-4457",
    "title": "Queries ending in question mark interpreted as wildcard",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "For many search applications, queries ending in a question mark such as foo bar? would not mean a search for a four-letter word starting with bar. Neither will it mean a literal search for a question mark.\n\nThe query parsers should have an option to discard trailing question mark before passing to analysis.",
    "attachments": {
        "SOLR-4457.patch": "https://issues.apache.org/jira/secure/attachment/12570805/SOLR-4457.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jack Krupansky",
            "id": "comment-13578397",
            "date": "2013-02-14T14:32:30+0000",
            "content": "I implemented this feature once for a Solr-based query parser. It can be tricky since you don't won't to preclude the use of a trailing single-character wildcard. You can read about the rules/heuristics I used here:\n\nhttp://lucidworks.lucidimagination.com/display/lweug/Natural+Language+Queries "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13578417",
            "date": "2013-02-14T15:00:09+0000",
            "content": "Ok, crossing fingers for some code contribution here, else we'll go ahead and implement something. I already have a patch for eDisMax which stupidly removes trailing \"?\", and it works well. You can even disable it with the same trick of adding a space and a . or + at the end to not trigger the removal. But it's nothing fancy about detecting question words or such.\n\nPerhaps a better solution is a generic query-preprocessor plugin, which hooks in at the very top of parse(). The default implementation would be a class doing the question mark stuff, but if anyone wants to plug their own processing, they can write their own. This gets us back to supporting pluggable QP extensions... I implemented a simple plugin method for CurrencyField, the same could be used. Or is there some generic plugin type which can be defined in solrconfig.xml and refered to by name we could use? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13585936",
            "date": "2013-02-25T15:41:07+0000",
            "content": "First quick patch subclassing edismax, which can be used as a plugin for existing versions. Will proceed with proper code as an option inside edismax itself. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13698461",
            "date": "2013-07-03T00:52:19+0000",
            "content": "Any comments on this? First implementation could be a new eDismax config parameter maskTrailingQmark. If set to true (default=false) then a trailing \"?\" would be removed - but only if query consists of 3 or more terms.\n\nThis would be a simple fix until we get more flexible QParsers which could allow this as pluggable extensions for all parsers. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-14583125",
            "date": "2015-06-12T08:10:15+0000",
            "content": "Another option is perhaps to rewrite abcd? as (abcd OR abcd?^0) so that you'll both match the word literally and get the wildcard match, but with lower rank. Then this could be applied for all tokens in the input ending with ?, not only the very last word. This should ideally be done after parsing to avoid edismax falling back to boolean mode. At first thought this feels a bit too complex - comments? "
        }
    ]
}