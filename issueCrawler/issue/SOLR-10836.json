{
    "id": "SOLR-10836",
    "title": "TextLogisticRegression parser (and others) assume non-empty index.",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "6.7",
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "TextLogisticRegressionQParserPlugin, IGainTermsQParserPlugin and SignificantTermsQParserPlugin are similarly affected:\n\nfinish() contains this line of code:\n\nTerms terms = MultiFields.getFields(searcher.getIndexReader()).terms(trainingParams.feature);\n\n\nInstead I think it should be this:\n\nTerms terms = ((SolrIndexSearcher)searcher).getSlowAtomicReader().terms(trainingParams.feature);\n\n\n\nMultiFields can take some time to build and Solr (via SlowAtomicReader) has already done this work.\n\nIn addition, the code assumes Terms is non-null when in fact it will be null if there's no data.",
    "attachments": {
        "SOLR-10836.patch": "https://issues.apache.org/jira/secure/attachment/12872072/SOLR-10836.patch",
        "SOLR_10836_use_SolrIndexSearcher_cached_MultiFields_instead_of_recreating.patch": "https://issues.apache.org/jira/secure/attachment/12872293/SOLR_10836_use_SolrIndexSearcher_cached_MultiFields_instead_of_recreating.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-08T13:54:45+0000",
            "content": "Saved you the trouble and ran tests on your change.  All tests pass locally. ",
            "author": "Jason Gerlowski",
            "id": "comment-16042723"
        },
        {
            "date": "2017-06-08T15:23:10+0000",
            "content": "Thanks Jason Gerlowski; I've done this same already as part of LUCENE-7500 and updated some similarly affected QParserPlugins as well.\n\nOne problem I see in this code is that it assumes the Terms instance it gets back is not null.  But it can be if the field has no indexed data.  This might in practice not be a big deal but nonetheless it's wrong.\n\nAs an aside, I've been using Kotlin Lang on some other projects and I love that null-ness is part of the type system.  It makes bugs like this very rare. ",
            "author": "David Smiley",
            "id": "comment-16042848"
        },
        {
            "date": "2017-06-09T17:33:21+0000",
            "content": "The attached patch is for several parsers that had the same code.  I also fixed the null Terms bug... I should probably reclassify this issue as a bug fix. ",
            "author": "David Smiley",
            "id": "comment-16044738"
        },
        {
            "date": "2017-06-10T03:39:31+0000",
            "content": "Commit 5c781d5679716dc46a28015c03ef9bcae824e58c in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5c781d5 ]\n\nSOLR-10836: igain, significantTerms, and tlogit assumed existing terms ",
            "author": "ASF subversion and git services",
            "id": "comment-16045361"
        },
        {
            "date": "2017-06-10T03:56:05+0000",
            "content": "Commit a08bdf572ba4450d153e36f1db2bf62f35a061e8 in lucene-solr's branch refs/heads/branch_6x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a08bdf5 ]\n\nSOLR-10836: igain, significantTerms, and tlogit assumed existing terms\n\n(cherry picked from commit 5c781d5) ",
            "author": "ASF subversion and git services",
            "id": "comment-16045366"
        }
    ]
}