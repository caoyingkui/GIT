{
    "id": "LUCENE-5456",
    "title": "The demo run under the smoke tester OOMs on OS X",
    "details": {
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Not A Problem",
        "components": [
            "general/build"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": []
    },
    "description": "When running the smoke tester for the 4.7 RC1, I got an OOM when the demo's IndexFiles was run:\n\n\n[...]\n  unpack lucene-4.7.0.tgz...\n    verify JAR metadata/identity/no javax.* or java.* classes...\n    test demo with 1.6...\n      got 5653 hits for query \"lucene\"\n    test demo with 1.7...\n\ncommand \"export JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home\" PATH=\"/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home/bin:$PATH\" JAVACMD=\"/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home/bin/java\"; java -cp \"core/lucene-core-4.7.0.jar:demo/lucene-demo-4.7.0.jar:analysis/common/lucene-analyzers-common-4.7.0.jar:queryparser/lucene-queryparser-4.7.0.jar\" org.apache.lucene.demo.IndexFiles -index index -docs docs\" failed:\nIndexing to directory 'index'...\nadding docs/analyzers-common/allclasses-frame.html\n[...]\nadding docs/core/org/apache/lucene/index/class-use/Term.html\nException in thread \"main\" java.lang.OutOfMemoryError: Java heap space\n\tat org.apache.lucene.util.ByteBlockPool$DirectTrackingAllocator.getByteBlock(ByteBlockPool.java:103)\n\tat org.apache.lucene.util.ByteBlockPool.nextBuffer(ByteBlockPool.java:202)\n\tat org.apache.lucene.util.ByteBlockPool.allocSlice(ByteBlockPool.java:257)\n\tat org.apache.lucene.index.TermsHashPerField.writeByte(TermsHashPerField.java:252)\n\tat org.apache.lucene.index.TermsHashPerField.writeVInt(TermsHashPerField.java:273)\n\tat org.apache.lucene.index.FreqProxTermsWriterPerField.writeProx(FreqProxTermsWriterPerField.java:145)\n\tat org.apache.lucene.index.FreqProxTermsWriterPerField.addTerm(FreqProxTermsWriterPerField.java:239)\n\tat org.apache.lucene.index.TermsHashPerField.add(TermsHashPerField.java:235)\n\tat org.apache.lucene.index.DocInverterPerField.processFields(DocInverterPerField.java:171)\n\tat org.apache.lucene.index.DocFieldProcessor.processDocument(DocFieldProcessor.java:248)\n\tat org.apache.lucene.index.DocumentsWriterPerThread.updateDocument(DocumentsWriterPerThread.java:253)\n\tat org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:453)\n\tat org.apache.lucene.index.IndexWriter.updateDocument(IndexWriter.java:1529)\n\tat org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:1199)\n\tat org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:1180)\n\tat org.apache.lucene.demo.IndexFiles.indexDocs(IndexFiles.java:199)\n\tat org.apache.lucene.demo.IndexFiles.indexDocs(IndexFiles.java:155)\n\tat org.apache.lucene.demo.IndexFiles.indexDocs(IndexFiles.java:155)\n\tat org.apache.lucene.demo.IndexFiles.indexDocs(IndexFiles.java:155)\n\tat org.apache.lucene.demo.IndexFiles.indexDocs(IndexFiles.java:155)\n\tat org.apache.lucene.demo.IndexFiles.indexDocs(IndexFiles.java:155)\n\tat org.apache.lucene.demo.IndexFiles.indexDocs(IndexFiles.java:155)\n\tat org.apache.lucene.demo.IndexFiles.indexDocs(IndexFiles.java:155)\n\tat org.apache.lucene.demo.IndexFiles.main(IndexFiles.java:110)\n\n\nTraceback (most recent call last):\n  File \"dev-tools/scripts/smokeTestRelease.py\", line 1377, in <module>\n  File \"dev-tools/scripts/smokeTestRelease.py\", line 1321, in main\n  File \"dev-tools/scripts/smokeTestRelease.py\", line 1358, in smokeTest\n  File \"dev-tools/scripts/smokeTestRelease.py\", line 635, in unpackAndVerify\n  File \"dev-tools/scripts/smokeTestRelease.py\", line 785, in verifyUnpacked\n  File \"dev-tools/scripts/smokeTestRelease.py\", line 961, in testDemo\n  File \"dev-tools/scripts/smokeTestRelease.py\", line 560, in run\nRuntimeError: command \"export JAVA_HOME=\"/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home\" PATH=\"/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home/bin:$PATH\" JAVACMD=\"/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home/bin/java\"; java -cp \"core/lucene-core-4.7.0.jar:demo/lucene-demo-4.7.0.jar:analysis/common/lucene-analyzers-common-4.7.0.jar:queryparser/lucene-queryparser-4.7.0.jar\" org.apache.lucene.demo.IndexFiles -index index -docs docs\" failed; see log file /Users/sarowe/temp/smoke_test_4_7/unpack/lucene-4.7.0/index.log",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13905577",
            "author": "Steve Rowe",
            "content": "This patch (against lucene_solr_4_7) allowed the smoke tester to finish for me:\n\n\nIndex: dev-tools/scripts/smokeTestRelease.py\n===================================================================\n--- dev-tools/scripts/smokeTestRelease.py\t(revision 1569745)\n+++ dev-tools/scripts/smokeTestRelease.py\t(working copy)\n@@ -958,7 +958,7 @@\n   else:\n     cp = 'core/lucene-core-{0}.jar{1}demo/lucene-demo-{0}.jar{1}analysis/common/lucene-analyzers-common-{0}.jar{1}queryparser/lucene-queryparser-{0}.jar'.format(version, sep)\n     docsDir = 'docs'\n-  run('%s; java -cp \"%s\" org.apache.lucene.demo.IndexFiles -index index -docs %s' % (javaExe(jdk), cp, docsDir), 'index.log')\n+  run('%s; java -Xmx128m -cp \"%s\" org.apache.lucene.demo.IndexFiles -index index -docs %s' % (javaExe(jdk), cp, docsDir), 'index.log')\n   run('%s; java -cp \"%s\" org.apache.lucene.demo.SearchFiles -index index -query lucene' % (javaExe(jdk), cp), 'search.log')\n   reMatchingDocs = re.compile('(\\d+) total matching documents')\n   m = reMatchingDocs.search(open('search.log', encoding='UTF-8').read())\n\n\n\nIf there are no objections, I'll commit this later today (to trunk, branch_4x, and lucene_solr_4_7). ",
            "date": "2014-02-19T15:48:17+0000"
        },
        {
            "id": "comment-13905600",
            "author": "Robert Muir",
            "content": "Hmm what is the demo indexing? I'm surprised its running out of heap: The default ramBuffer is only 16MB here.\n\nSteve can you print the default value of Xmx on your jvm/system ? something like java -XX:+PrintFlagsFinal -version | grep -i HeapSize ?\n\nI'm a little worried we are masking a bug here.\n ",
            "date": "2014-02-19T16:01:33+0000"
        },
        {
            "id": "comment-13905613",
            "author": "Steve Rowe",
            "content": "Steve can you print the default value of Xmx on your jvm/system ? something like java -XX:+PrintFlagsFinal -version | grep -i HeapSize ?\n\n\n\n\n    uintx ErgoHeapSizeLimit                         = 0               {product}           \n    uintx HeapSizePerGCThread                       = 87241520        {product}           \n    uintx InitialHeapSize                          := 6815736         {product}           \n    uintx LargePageHeapSizeThreshold                = 134217728       {product}           \n    uintx MaxHeapSize                              := 23068672        {product}           \njava version \"1.7.0_25\"\nJava(TM) SE Runtime Environment (build 1.7.0_25-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)\n\n\n\nWeird, if I'm reading that correctly, looks like default -Xmx is only 22MB??? ",
            "date": "2014-02-19T16:08:01+0000"
        },
        {
            "id": "comment-13905619",
            "author": "Robert Muir",
            "content": "How much RAM does this machine have?  ",
            "date": "2014-02-19T16:11:04+0000"
        },
        {
            "id": "comment-13905632",
            "author": "Steve Rowe",
            "content": "How much RAM does this machine have?  \n\n16GB\n\nMore info - my (Apple) Java6 JVM has a more reasonable looking default of 128MB:\n\n\n    uintx ErgoHeapSizeLimit                         = 0               {product}           \n    uintx InitialHeapSize                           = 0               {product}           \n    uintx LargePageHeapSizeThreshold                = 134217728       {product}           \n    uintx MaxHeapSize                              := 134217728       {product}           \njava version \"1.6.0_65\"\nJava(TM) SE Runtime Environment (build 1.6.0_65-b14-462-11M4609)\nJava HotSpot(TM) 64-Bit Server VM (build 20.65-b04-462, mixed mode)\n\n\n\nI looked in my environment settings for \"-Xmx\" and JAVA_OPTS, nothing suspicious there. ",
            "date": "2014-02-19T16:16:06+0000"
        },
        {
            "id": "comment-13905634",
            "author": "Robert Muir",
            "content": "Very strange, I use the same jvm on my 16GB mac:\n\n$ java -XX:+PrintFlagsFinal -version | grep -i HeapSize\n    uintx ErgoHeapSizeLimit                         = 0               {product}           \n    uintx HeapSizePerGCThread                       = 87241520        {product}           \n    uintx InitialHeapSize                          := 78444352        {product}           \n    uintx LargePageHeapSizeThreshold                = 134217728       {product}           \n    uintx MaxHeapSize                              := 1256194048      {product}           \njava version \"1.7.0_25\"\nJava(TM) SE Runtime Environment (build 1.7.0_25-b15)\nJava HotSpot(TM) 64-Bit Server VM (build 23.25-b01, mixed mode)\n\n\n\nAnyway, +1 to the fix ",
            "date": "2014-02-19T16:19:34+0000"
        },
        {
            "id": "comment-13905652",
            "author": "Steve Rowe",
            "content": "uintx MaxHeapSize                              := 1256194048      {product} \n\nI'm guessing you have something like JAVA_OPTS=-Xmx1198m in your environment.\n\nI have default max heap sizes set for Maven and Ant, but $JAVA_OPTS isn't set:\n\n\nexport MAVEN_OPTS=-Xmx512m\nexport ANT_OPTS='-Xmx1g -XX:+CMSClassUnloadingEnabled -XX:MaxPermSize=256m -Djava.awt.headless=true'\n\n ",
            "date": "2014-02-19T16:34:10+0000"
        },
        {
            "id": "comment-13905656",
            "author": "Robert Muir",
            "content": "i dont set anything like that:\n\n\n$ env | grep JAVA\nJAVA6_HOME=/System/Library/Java/JavaVirtualMachines/1.6.0.jdk/Contents/Home\nJAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home\nJAVA7_HOME=/Library/Java/JavaVirtualMachines/jdk1.7.0_25.jdk/Contents/Home\n\n\n\nI seriously think something funky is happening that it picks 22MB -Xmx for your machine with 16GB ram. ",
            "date": "2014-02-19T16:37:13+0000"
        },
        {
            "id": "comment-13905658",
            "author": "Steve Rowe",
            "content": "I seriously think something funky is happening that it picks 22MB -Xmx for your machine with 16GB ram.\n\nI agree  - I'll try installing the latest 7 and see what it does. ",
            "date": "2014-02-19T16:40:29+0000"
        },
        {
            "id": "comment-13905722",
            "author": "Hoss Man",
            "content": "I'm guessing you have something like JAVA_OPTS=-Xmx1198m in your environment.\n\nIt might be part of the java wrapper?\n\nSomething like this should show you guys if/when there are any env vars you might not realize...\n\n\nimport java.util.Map;\npublic final class EnvAndProps {\n    public static final void main(String... args) {\n        System.out.println(\"### ENV ###\");\n        for (Map.Entry x : System.getenv().entrySet()) {\n            System.out.println(x.getKey() + \"\\t\" + x.getValue());\n        }\n        System.out.println(\"### PROPS ###\");\n        for (Map.Entry x : System.getProperties().entrySet()) {\n            System.out.println(x.getKey() + \"\\t\" + x.getValue());\n        }\n    }\n}\n\n ",
            "date": "2014-02-19T17:33:40+0000"
        },
        {
            "id": "comment-13906631",
            "author": "Steve Rowe",
            "content": "Hoss, thanks, I tried your program and nothing looked weird. ",
            "date": "2014-02-20T05:20:32+0000"
        },
        {
            "id": "comment-13906636",
            "author": "Steve Rowe",
            "content": "I installed the Oracle 1.7.0_51 JDK, and now:\n\n\n$ java -XX:+PrintFlagsFinal -version | grep -i HeapSize\n    uintx ErgoHeapSizeLimit                         = 0               {product}           \n    uintx HeapSizePerGCThread                       = 87241520        {product}           \n    uintx InitialHeapSize                          := 268435456       {product}           \n    uintx LargePageHeapSizeThreshold                = 134217728       {product}           \n    uintx MaxHeapSize                              := 4294967296      {product}           \n\n\n\nSo I guess I won't commit the patch here. ",
            "date": "2014-02-20T05:28:28+0000"
        }
    ]
}