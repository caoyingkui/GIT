{
    "id": "SOLR-7602",
    "title": "Frequent MultiThreadedOCPTest failures on Jenkins",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.2"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The number of failed MultiThreadedOCPTest runs on Jenkins has gone up drastically since Apr 30, 2015.\n\nREGRESSION:  org.apache.solr.cloud.MultiThreadedOCPTest.test\n\nError Message:\nCaptured an uncaught exception in thread: Thread[id=6313, name=parallelCoreAdminExecutor-1988-thread-15, state=RUNNABLE, group=TGRP-MultiThreadedOCPTest]\n\nStack Trace:\ncom.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=6313, name=parallelCoreAdminExecutor-1988-thread-15, state=RUNNABLE, group=TGRP-MultiThreadedOCPTest]\n        at __randomizedtesting.SeedInfo.seed([1FD11A82D96D185B:97852558779175A3]:0)\nCaused by: java.lang.AssertionError: Too many closes on SolrCore\n        at __randomizedtesting.SeedInfo.seed([1FD11A82D96D185B]:0)\n        at org.apache.solr.core.SolrCore.close(SolrCore.java:1138)\n        at org.apache.solr.common.util.IOUtils.closeQuietly(IOUtils.java:31)\n        at org.apache.solr.core.CoreContainer.create(CoreContainer.java:535)\n        at org.apache.solr.core.CoreContainer.create(CoreContainer.java:494)\n        at org.apache.solr.handler.admin.CoreAdminHandler.handleCreateAction(CoreAdminHandler.java:598)\n        at org.apache.solr.handler.admin.CoreAdminHandler.handleRequestInternal(CoreAdminHandler.java:212)\n        at org.apache.solr.handler.admin.CoreAdminHandler$ParallelCoreAdminHandlerThread.run(CoreAdminHandler.java:1219)\n        at org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor$1.run(ExecutorUtil.java:148)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:745)\n\n\n\nLast failure:\nBuild: http://jenkins.thetaphi.de/job/Lucene-Solr-5.x-Linux/12665/",
    "attachments": {
        "SOLR-7602.patch": "https://issues.apache.org/jira/secure/attachment/12735945/SOLR-7602.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-05-28T02:59:29+0000",
            "author": "Anshum Gupta",
            "content": "Seems like the changes in SOLR-7408 triggered this. Since that change, solrCore.close() is called for every failed creation attempt i.e. in case of an exception during Core creation.\nSolrCore.close has this check:\n\n    int count = refCount.decrementAndGet(); // #1\n    if (count > 0) return; // close is called often, and only actually closes if nothing is using it.\n    if (count < 0) {\n      log.error(\"Too many close [count:{}] on {}. Please report this exception to solr-user@lucene.apache.org\", count, this );\n      assert false : \"Too many closes on SolrCore\";\n      return;\n    }\n\n\nWhen the core creation fails, #1 could return -1.\n\nWe should bypass this check in such cases or increment the refCount as the first thing during creation. ",
            "id": "comment-14562220"
        },
        {
            "date": "2015-05-28T08:02:07+0000",
            "author": "Noble Paul",
            "content": "We should bypass this check in such cases or increment the refCount as the first thing during creation.\nReply\n\nIt is initialized with a value of 1 . So , that should not be a problem. The recent changes would have added a SolrCore.close() somewhere  ",
            "id": "comment-14562457"
        },
        {
            "date": "2015-05-28T08:16:12+0000",
            "author": "Anshum Gupta",
            "content": "Noble Paul you're correct.\n\nThere's a close in the SolrCore constructor, so that calls a close in case of an exception and also rethrows the exception.\nThe coreContainer.create method also tries to close the same core in the catch block, which causes this issue when an exception occurs while creating a new SolrCore. ",
            "id": "comment-14562480"
        },
        {
            "date": "2015-05-28T10:21:29+0000",
            "author": "Noble Paul",
            "content": "Yes, that is the problem. We should just check the refcount before calling a close in the CoreContainer. ",
            "id": "comment-14562636"
        },
        {
            "date": "2015-05-28T12:48:27+0000",
            "author": "Mark Miller",
            "content": "There's a close in the SolrCore constructor, so that calls a close in case of an exception and also rethrows the exception.\nThe coreContainer.create method also tries to close the same core in the catch block, which causes this issue when an exception occurs while creating a new SolrCore.\n\nHow would the CoreContainer get a reference to call close on if an exception was thrown from the constructor of the SolrCore? ",
            "id": "comment-14562837"
        },
        {
            "date": "2015-05-28T18:07:43+0000",
            "author": "Anshum Gupta",
            "content": "hmmm, I'm looking at other code paths now. Plan to get this into the next 5.2 RC. ",
            "id": "comment-14563377"
        },
        {
            "date": "2015-05-28T19:06:06+0000",
            "author": "Anshum Gupta",
            "content": "I think just checking if a core is closed already before calling a close on it should be a good solution.\n\nThe problem here is that registerCore fails, as the coreContainer is closed. This exception is then caught and an attempt is made to close the core whereas the core would already be closed by this time, causing the ref count to be -1. ",
            "id": "comment-14563495"
        },
        {
            "date": "2015-05-28T19:25:52+0000",
            "author": "Anshum Gupta",
            "content": "Added a null check. ",
            "id": "comment-14563530"
        },
        {
            "date": "2015-05-28T19:31:57+0000",
            "author": "Noble Paul",
            "content": "It's fine ",
            "id": "comment-14563542"
        },
        {
            "date": "2015-05-28T20:28:03+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1682323 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1682323 ]\n\nSOLR-7602: Check if SolrCore object is already closed before trying to close it in case of an exception during Core creation. ",
            "id": "comment-14563625"
        },
        {
            "date": "2015-05-28T21:15:02+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1682336 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1682336 ]\n\nSOLR-7602: Check if SolrCore object is already closed before trying to close it in case of an exception during Core creation.(merge from trunk) ",
            "id": "comment-14563697"
        },
        {
            "date": "2015-05-28T21:54:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1682346 from Anshum Gupta in branch 'dev/branches/lucene_solr_5_2'\n[ https://svn.apache.org/r1682346 ]\n\nSOLR-7602: Check if SolrCore object is already closed before trying to close it in case of an exception during Core creation.(merge from branch_5x) ",
            "id": "comment-14563757"
        },
        {
            "date": "2015-08-20T17:48:45+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I guess these commits fixed the problem. Can we close this issue? ",
            "id": "comment-14705399"
        },
        {
            "date": "2015-08-20T17:56:53+0000",
            "author": "Anshum Gupta",
            "content": "Marking this as resolved as we haven't seen these since fix was committed. ",
            "id": "comment-14705428"
        }
    ]
}