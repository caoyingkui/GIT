{
    "id": "SOLR-1116",
    "title": "Add a Binary FieldType",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Lucene supports binary data for field but Solr has no corresponding field type.",
    "attachments": {
        "SOLR-1116.patch": "https://issues.apache.org/jira/secure/attachment/12406432/SOLR-1116.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12702685",
            "date": "2009-04-25T11:47:45+0000",
            "content": "\n\tadded a new field BinaryField\n\tJavabinCodec writes ByteBuffer as byte[]\n\tin text formats the binary data is written down as hex encoded bytes\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12704081",
            "date": "2009-04-29T11:42:06+0000",
            "content": "\n\tmask the byte to get a +ve int\n\timplement toExternal()\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12704192",
            "date": "2009-04-29T16:33:15+0000",
            "content": "We could use base64 as the standard for input/output in text protocols - that will only expand the size by 33% over binary. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12704258",
            "date": "2009-04-29T19:06:22+0000",
            "content": "Perhaps we could use a url safe option too... this would let use query binary fields with our existing interfaces.\n\nCheck:\nhttp://iharder.sourceforge.net/current/java/base64/\n\nhttp://iharder.sourceforge.net/current/java/base64/api/Base64.html#URL_SAFE\n\nThat refers to RFC3548 "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12704284",
            "date": "2009-04-29T19:46:00+0000",
            "content": "+1 for url-safe base64 (-_ being the extra chars) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12704464",
            "date": "2009-04-30T03:44:56+0000",
            "content": "We could use base64 as the standard for input/output in text protocols\nI thought of it. But we will need to add some external library to do base64 encode<->decode . Which one to use?\n\nThere is one other challenge. The xml response format does not have a binary type . for backcompat reasons I have used <str> as the type. To add another type we may need to bump up the version "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12704512",
            "date": "2009-04-30T07:37:40+0000",
            "content": "for url-safe base64 (-_ being the extra chars) \nwhy do we need it to be url safe?. I guess the binary fields in Lucene is not indexed (Just stored) . If that is the case then we may not need to send it in the 'q' param. \n "
        },
        {
            "author": "Tao Jiang",
            "id": "comment-12706772",
            "date": "2009-05-07T09:16:49+0000",
            "content": "I just couldn't patch it to Solr 1.3. JavaBinCodec.java and solrconfig-slave1.xml do not actually exist in apache-solr-1.3.0 release. And when I tried again after removing those code related with the two files from the patch, I got the following response:\n\npatch -p0 <SOLR-1116.patch \npatching file src/java/org/apache/solr/request/BinaryResponseWriter.java\nHunk #1 FAILED at 210.\n1 out of 1 hunk FAILED \u2013 saving rejects to file src/java/org/apache/solr/request/BinaryResponseWriter.java.rej\npatching file src/java/org/apache/solr/schema/BinaryField.java\npatching file src/java/org/apache/solr/update/DocumentBuilder.java\nHunk #1 FAILED at 29.\nHunk #2 FAILED at 216.\nHunk #3 FAILED at 225.\nHunk #4 FAILED at 263.\nHunk #5 FAILED at 286.\n5 out of 5 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/update/DocumentBuilder.java.rej\npatching file src/test/org/apache/solr/schema/TestBinaryField.java\npatching file src/test/test-files/solr/conf/schema-binaryfield.xml "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12706781",
            "date": "2009-05-07T09:41:00+0000",
            "content": "the patch will not apply on Solr 1.3 . it will apply only on trunk "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12710733",
            "date": "2009-05-19T13:51:24+0000",
            "content": "\n\n\n why do we need it to be url safe?\n\n\n\n\n\nMore then anything it seems like a pending gotcha and the fix (with URL safe base64) is trivial. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12710754",
            "date": "2009-05-19T15:12:26+0000",
            "content": "my only concern is that does the standard tools available in other languages (php/python etc) for Base64 encoding/decoding work with the url safe format? if it doesn't, it beats the purpose "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12710764",
            "date": "2009-05-19T15:39:57+0000",
            "content": "quick google seach shows a few options in other languages:\nhttp://search.cpan.org/~kazuho/MIME-Base64-URLSafe-0.01/lib/MIME/Base64/URLSafe.pm\n\nIn php, you can use \"base64_url_encode\"\nhttp://us.php.net/base64_encode "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12710772",
            "date": "2009-05-19T16:01:36+0000",
            "content": "There's no reason we can't accept either Base64 variant as input.\nFor output, should it be the normal Base64 or the URL-safe variant? (and no, I don't want yet another parameter that lets you choose  "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12710782",
            "date": "2009-05-19T16:25:42+0000",
            "content": "One scenario that I have experience with is when you store small images as fields, to be displayed on the result list. URL-safe encoding means you can directly embed the returned string without re-encoding it. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12711007",
            "date": "2009-05-20T05:05:25+0000",
            "content": "I don't want yet another parameter that lets you choose\n\n+1\n\nI am fine with either format. we will stick to one . \n\n+0 for standard base64\n\n\nou can directly embed the returned string without re-encoding it. \n\n\nNo browser accepts the image data as Base64. your front-end will have to read the string and send it out as a byte[]. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12711081",
            "date": "2009-05-20T10:02:48+0000",
            "content": "No browser accepts the image data as Base64. your front-end will have to read the string and send it out as a byte[].\n\nPlease see http://en.wikipedia.org/wiki/Data_URI_scheme - this is the use case I was referring to, and indeed you can send base64 encoded content directly to any modern browser. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12711087",
            "date": "2009-05-20T10:21:18+0000",
            "content": "silly me  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12711502",
            "date": "2009-05-21T07:25:38+0000",
            "content": "hi Andrzej from the wikipedia documentation what I understand is that browsers support standard base64 not the url-safe version "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12711528",
            "date": "2009-05-21T09:15:53+0000",
            "content": "Indeed! then it's not relevant here. +0 from me for the regular base64. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12712520",
            "date": "2009-05-24T07:23:09+0000",
            "content": "The text format is standard base64 encoding "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12712575",
            "date": "2009-05-24T17:17:55+0000",
            "content": "I plan to commit this in a day or two . Please let me know if there is any feedback "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12712894",
            "date": "2009-05-26T07:45:22+0000",
            "content": "committed revision:778600 "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775478",
            "date": "2009-11-10T15:50:36+0000",
            "content": "Bulk close Solr 1.4 issues "
        }
    ]
}