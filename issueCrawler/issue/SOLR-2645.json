{
    "id": "SOLR-2645",
    "title": "NullPointerException in StopFilter",
    "details": {
        "affect_versions": "3.3",
        "status": "Closed",
        "fix_versions": [
            "3.4"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "To reproduce:\nDownload and unzip attached and from the extracted directory run: \n\n mvn test \n\n\n\njava.lang.NullPointerException\n\tat org.apache.lucene.analysis.CharArraySet.<init>(CharArraySet.java:91)\n\tat org.apache.lucene.analysis.StopFilter.<init>(StopFilter.java:101)\n\tat org.apache.lucene.analysis.StopFilter.<init>(StopFilter.java:93)\n\tat org.apache.solr.analysis.StopFilterFactory.create(StopFilterFactory.java:84)\n\tat org.apache.solr.analysis.StopFilterFactory.create(StopFilterFactory.java:43)\n\tat org.apache.solr.analysis.TokenizerChain.getStream(TokenizerChain.java:71)\n\tat org.apache.solr.analysis.SolrAnalyzer.reusableTokenStream(SolrAnalyzer.java:75)\n\tat org.apache.solr.schema.IndexSchema$SolrIndexAnalyzer.reusableTokenStream(IndexSchema.java:385)\n\tat org.apache.lucene.index.DocInverterPerField.processFields(DocInverterPerField.java:126)\n\tat org.apache.lucene.index.DocFieldProcessorPerThread.processDocument(DocFieldProcessorPerThread.java:278)\n\tat org.apache.lucene.index.DocumentsWriter.updateDocument(DocumentsWriter.java:766)\n\tat org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:2056)\n\tat org.apache.lucene.index.IndexWriter.addDocument(IndexWriter.java:2030)\n\tat com.mysimpatico.solraddbug.SolrTest.test(SolrTest.java:45)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:41)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n\tat org.junit.rules.TestWatchman$1.evaluate(TestWatchman.java:48)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:76)\n\tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1277)\n\tat org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1195)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n\tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:31)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\n\tat org.apache.maven.surefire.junit4.JUnit4TestSet.execute(JUnit4TestSet.java:35)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:115)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:97)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.apache.maven.surefire.booter.ProviderFactory$ClassLoaderProxy.invoke(ProviderFactory.java:103)\n\tat $Proxy0.invoke(Unknown Source)\n\tat org.apache.maven.surefire.booter.SurefireStarter.invokeProvider(SurefireStarter.java:150)\n\tat org.apache.maven.surefire.booter.SurefireStarter.runSuitesInProcess(SurefireStarter.java:91)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:69)",
    "attachments": {
        "SolrAddBug.zip": "https://issues.apache.org/jira/secure/attachment/12485996/SolrAddBug.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13062738",
            "date": "2011-07-10T13:51:14+0000",
            "content": "runnable test with mvn test  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13062743",
            "date": "2011-07-10T14:51:08+0000",
            "content": "This is not a bug in StopFilter, it has more something to do with your strange test setup:\n\n\tSolr loads its files referenced from schema.xml by the class loader (its called ResourceLoader in Solr, whcih is just a \"Classloader\" with some extra functionality).\n\tIn your example, it seems that the stopword file is not found in the ResourceLoader.\n\tClassloader's getResource method returns null, when file not found -> null is passed to StopFilter -> crash\n\n\n\nSo please explain what you are intending to do, because it seems that you dont create a complete solr instance, but instead just use parts of solr in a pure-lucene app. This is not easy to do and not officially supported. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13062744",
            "date": "2011-07-10T14:55:49+0000",
            "content": "Most Lucene/Solr developers do not use Maven, so you're making it hard for people to help you when you provide test cases in Maven format.  My suggestion: use the official Ant build to host tests. "
        },
        {
            "author": "Gabriele Kahlout",
            "id": "comment-13062745",
            "date": "2011-07-10T14:59:57+0000",
            "content": "Well, then would you tell me what would be a full instance !strange setup?\n\nI'm trying to test Solr using 'transparent' API classes from lucene (such as IndexWriter), and the following is the starting point:\n\n\npublic class SolrTest extends SolrTestCaseJ4 {\n\n    public static String TEST_HOME() {\n        return new File(\"target/test-classes/solr\").getPath(); //in here I've a copy paste of solr default conf, and data (empty).\n    }\n\n    public SolrTest() {\n        try {\n            File conf = new File(TEST_HOME(), \"conf\");\n            initCore(new File(conf, \"solrconfig.xml\").getPath(), new File(conf, \"schema.xml\").getPath());\n        } catch (Exception e) {\n            Logger.getLogger(SolrTest.class.getName()).log(Level.FINE, \"message\", e);\n            fail(e.getLocalizedMessage());\n        }\n    }\n\n    @Test\n    public void test() throws IOException {\n        final IndexWriter writer = new IndexWriter(FSDirectory.open(new File(dataDir,\"index\")), new IndexSchema(solrConfig, schemaString).getAnalyzer(), IndexWriter.MaxFieldLength.LIMITED);\n        final Document doc = new Document();\n        doc.add(new Field(\"content\", \"essen fressen essen\", Field.Store.YES, Field.Index.ANALYZED)); //FIXME\n        writer.addDocument(doc);\n        writer.commit();\n    }\n}\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13062746",
            "date": "2011-07-10T15:02:14+0000",
            "content": "Please read my comment before, its a broken classpath (because solr loads config files from classpath). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13062747",
            "date": "2011-07-10T15:08:46+0000",
            "content": "Another hint that maybe the issue:\nYou are instantiating IndexySchema directly and it seems, it's not initialized completely. One part is calling the inform() methods on all factories. When inform() is not called, the set of stopwords is never loaded.\n\nI just say, this is not a bug in solr, its a bug in your setup (the way you use the Schema). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13062748",
            "date": "2011-07-10T15:13:38+0000",
            "content": "I would suggest a setup like this:\n\n\npublic class TestLuceneMatchVersion extends SolrTestCaseJ4 {\n\n  @BeforeClass\n  public static void beforeClass() throws Exception {\n    initCore(\"solrconfig.xml\",\"schema.xml\",\"/path/to/your/solr/home\");\n  }\n  \n\n  public void testYourStuff() throws Exception {\n    final IndexSchema schema = h.getCore().getSchema();    \n    FieldType type = schema.getFieldType(\"textDefault\");\n    ...\n  }\n}\n\n "
        }
    ]
}