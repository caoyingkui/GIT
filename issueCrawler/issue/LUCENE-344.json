{
    "id": "LUCENE-344",
    "title": "[PATCH] Introduction of QueryFactory interface for Query construction",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "To override the default behaviour of the QueryParser you must currently extend  \nit and override the appropriate methods.  This seemed to be a little awkward.  \n\nTo enable a (hopefully) more flexible means of creating Query instances it  \nwould seem better to introduce a QueryFactory interface and pass an instance of  \nan implementation of this interface to the QueryParser, having the QueryParser  \ncallback to it to construct the query as it parses it.  With this design you  \ncould write something like:  \n\nQueryParser parser = new QueryParser(\"defaultField\", new StandardAnalyzer(),  \nnew QueryFactoryImpl());  \n\nWhere 'QueryFactoryImpl' is an implementation of the QueryFactory interface.   \nIf you wanted to add the ability to lower case all of your queries you could  \nthen write:  \n\nQueryParser parser = new QueryParser(\"defaultField\", new StandardAnalyzer(),  \nnew LowerCaseQueryFactory(new QueryFactoryImpl()));  \n\nWhere 'LowerCaseQueryFactory' is a decorator around another QueryFactory  \ninstance and it simply lowercases all the terms passed to it before delegating  \nthe actual query construction.  This is a simple example, but more powerful  \nfunctionality could be added not by changing the QueryParser, but by creating a  \nnew QueryFactory implementation. \n\nI have a patch for this which will be forthcoming in a moment.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--Lucene-QueryParser.patch": "https://issues.apache.org/jira/secure/attachment/12312520/ASF.LICENSE.NOT.GRANTED--Lucene-QueryParser.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-02-09T04:46:15+0000",
            "content": "Created an attachment (id=14212)\nAdds a QueryFactory interface and refactors code to use it\n\nThis patch adds a org.apache.lucene.search.QueryFactory interface and refactors\nthe Lucene code to use it.  It has 3 implementations included:\n\n\n\torg.apache.lucene.search.queryfactory.QueryFactoryImpl is an implementation\ncreated by extracting the QueryParser code for Query construction\n\torg.apache.lucene.search.queryfactory.LowerCaseQueryFactory is a decorator\nimplementation that will convert all terms to lowercase\n\torg.apache.lucene.search.queryfactory.MultiFieldQueryFactory is an\nimplementation created by extracting the MultiFieldQueryParser code for Query\nconstruction\n\n\n\nNote that for some reason that I can't quite fathom at the moment this patch\nseems to be rejected for the SearchTestForDuplicates code.  To fix this you'll\nneed to manually edit this file and change the construction of the QueryParser\nimplementations to take a QueryFactoryImpl instance, i.e.\n\nnew QueryParser(PRIORITY_FIELD, analyzer, new QueryFactoryImpl())\n\nI have added unit-tests for the QueryFactory implementations as best I could\nand changed one or two tests in the TestQueryParser unit-test because of the\nintroduction of the LowerCaseQueryFactory.  Because I have added these\nunit-tests they rely on the MockObjects (http://www.mockobjects.com/) JAR file\n(specifically I have used mockobjects-core-0.09.jar) which I have not included\nin the patch but will attach here for download if so required.\n\nPlease also note that some of the API in QueryParser has moved into the\nQueryFactoryImpl class as it seemed to be needed there more than in the\nQueryParser itself, although that is not what I'm necessarily suggesting as a\nchange.  So you might find your code breaks which I apologise for!\n\nHopefully that's everything! ",
            "author": "Matthew Denner",
            "id": "comment-12322185"
        },
        {
            "date": "2011-01-26T08:33:13+0000",
            "content": "Not sure this is a problem anymore since QP now allows extending and overriding getXYZ() methods for creating specific Query instances. ",
            "author": "Shai Erera",
            "id": "comment-12986893"
        }
    ]
}