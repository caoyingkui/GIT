{
    "id": "LUCENE-6095",
    "title": "Remove RamUsageTester.IdentityHashSet",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "priority": "Trivial",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "RamUsageTester has an implementation of an identity hash set. I am not sure why it is there but now that RamUsageTester can only be used in the context of tests (ie. memory usage or speed are less of a concern) I think we can switch to Collections.newSetFromMap(new IdentityHashMap<>())?",
    "attachments": {
        "LUCENE-6095.patch": "https://issues.apache.org/jira/secure/attachment/12685371/LUCENE-6095.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14235824",
            "author": "Adrien Grand",
            "date": "2014-12-05T18:11:54+0000",
            "content": "Here is a patch. "
        },
        {
            "id": "comment-14235830",
            "author": "Dawid Weiss",
            "date": "2014-12-05T18:15:08+0000",
            "content": "It's there because newSetFromMap wastes additional (unnecessary) memory. "
        },
        {
            "id": "comment-14235831",
            "author": "Robert Muir",
            "date": "2014-12-05T18:15:28+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14235834",
            "author": "Adrien Grand",
            "date": "2014-12-05T18:18:29+0000",
            "content": "Dawid Weiss This is what I thought, thanks for confirming! "
        },
        {
            "id": "comment-14235844",
            "author": "Dawid Weiss",
            "date": "2014-12-05T18:23:19+0000",
            "content": "Don't get me wrong \u2013 you can remove it if you really want to. That custom identity set is just a plug for a missing class in the JDK; turning a map into a set still keeps the map's backend implementation and storage for keys, so it should be slightly slower and memory-hungry... but it may not matter at all in our case (unless we're really collecting super-large object graphs).\n\nSo if this simplifies things, feel free to remove it. "
        },
        {
            "id": "comment-14332896",
            "author": "Anshum Gupta",
            "date": "2015-02-23T05:02:29+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}