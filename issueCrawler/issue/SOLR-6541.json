{
    "id": "SOLR-6541",
    "title": "Enhancement for SOLR-6452 StatsComponent \"missing\" stat won't work with docValues=true and indexed=false",
    "details": {
        "affect_versions": "4.10,                                            6.0",
        "status": "Open",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "This issue is refactoring of solution provided in SOLR-6452 StatsComponent \"missing\" stat won't work with docValues=true and indexed=false.\nI think the following points need to be addressed:\n1. Accumulate methods should not return stats specific numbers (it is generic). Attached solution with container class. Also made them private scoped.\nReturning just missing fields from accumulate methods does not allow you to extend it with additional counts field, therefore i propose to leave void.\n2. Reduced visibility of fields in FieldFacetStats.\n3. Methods FieldFacetStats#accumulateMissing and FieldFacetStats#accumulateTermNum does not throw any IO exception\n4. We don't need intermediate maps to accumulate missing counts. Method  org.apache.solr.handler.component.FieldFacetStats#facetMissingNum \ncan be changed to work directly on StatsValues structure and removed org.apache.solr.handler.component.FieldFacetStats#accumulateMissing. \nWe don't need to have it in 2 phases.",
    "attachments": {
        "SOLR-6541.patch": "https://issues.apache.org/jira/secure/attachment/12669942/SOLR-6541.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14140155",
            "date": "2014-09-19T08:01:54+0000",
            "content": "Patch based on trunk to address mentioned issues. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14144067",
            "date": "2014-09-22T23:57:13+0000",
            "content": "\nSetting aside point #2 & #3 for a moment (since they seem to be purely about API visibility)...\n\n1. Accumulate methods should not return stats specific numbers (it is generic). ...\n\nI'm not sure that i understand this sentence \u2013 it seems to be refering to the DocValuesStats.accumSingle and DocValuesStats.accumMulti, and the fact that they return the number of docs \"missing\" values.  but i don't understand:\n\na) in what way are you saying these methods are \"generic\" ?  ... they aren't part of any API contract, they're just package private static methods.\n\nb) how is the missing count a \"stats specific number\" ? ... at first glance, i thought you ment it was being accumulated in the AbstractStatsValues base class (or code tightly coupled with it) when really it should be associated with code in a specific subclass (similar to how subclasses like \"NumericStatsValues\" adds stats like \"sum\" and \"mean\" that don't make sense for string & enum fields) \u2013 but even if that's hwat you ment, that doens't make sense given that \"missing\" is part of the AbstractStatsValues contract.\n\n4. We don't need intermediate maps to accumulate missing counts. ...\n\nAt a glance this seems like a good idea to me \u2013 but it seems to straight forward it makes me suspicious of why it wasn't done that way in the first place?\n\nLooking at the comments in SOLR-6452, this seems to have been very deliberate...\n\nAs an optimization, why don't you make the missingStats a Map<Integer, Integer> and use the ords as keys instead of the terms. That way you don't need to do the lookupOrd for all docs, and you do it only once per term in the accumulateMissing() method.  "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14148145",
            "date": "2014-09-25T18:57:49+0000",
            "content": "Looking at the comments in SOLR-6452, this seems to have been very deliberate...\n\"facetMissingNum\" is called for every doc with a missing value. The original patch was doing:\n\nMap<String, Integer> missingStats;\n...\n\nint termOrd = topLevelSortedValues.getOrd(docID)\nString term = topLevelSortedValues.lookupOrd(termOrd).utf8ToString()\nmissingStat.put(term, theMissingValue)\n\n\nThe optimization was: Make the map ordinal->count instead of termString->count, and do the \"lookupOrd\" only once per term (with missing>0) in accumulateMissing() \nWe can remove the map. I'll take a look "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14148316",
            "date": "2014-09-25T21:13:51+0000",
            "content": "We can remove the map. I'll take a look\nOK, I see that in order to remove the map we need to restore the lookupOrd for all the docs with missing values, or do a bigger refactor (something like making facetStatsValues also use ords instead of terms, however, this is used from both stats implementations so I don't know how much of an impact this is yet). \nThat said, and given that we are trying to move the \"stats' facet\" to the \"pivot faceting\" (SOLR-6351), I don't know if it make sense to spend all the effort this issue would require, it probably makes more sense to spent that effort in SOLR-6351. "
        }
    ]
}