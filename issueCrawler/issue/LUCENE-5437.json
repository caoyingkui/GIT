{
    "id": "LUCENE-5437",
    "title": "ASCIIFoldingFilter that emits both unfolded and folded tokens",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "modules/analysis"
        ],
        "affect_versions": "4.7,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ]
    },
    "description": "I've found myself wanting an ASCIIFoldingFilter that emits both the folded tokens and the original, unfolded tokens.",
    "attachments": {
        "LUCENE-5437.patch": "https://issues.apache.org/jira/secure/attachment/12628224/LUCENE-5437.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13893860",
            "author": "Nik Everett",
            "content": "Sorry for moving so much code. ",
            "date": "2014-02-06T21:56:10+0000"
        },
        {
            "id": "comment-13894388",
            "author": "Simon Willnauer",
            "content": "nik, can't we just use the keyword attribute and support it in ASCIIFoldingFilter? this should be an easy one no? ",
            "date": "2014-02-07T10:44:49+0000"
        },
        {
            "id": "comment-13894500",
            "author": "Nik Everett",
            "content": "I thought about that but my instinct was that duplicating with the keyword attribute would add overhead in the case where there aren't characters to fold which is by far the more common case.  I think you'd also have to make supporting the keyword attribute optional so it wouldn't break backwards compatibility.  I figured optionally supporting the keyword attribute would be about the same amount of work/code as only duplicating when required so I went that way.  I went with adding the extra class and moving the real implementation to an absract base class more out of desire to be minimally invasive to the original then anything technical. ",
            "date": "2014-02-07T13:24:54+0000"
        },
        {
            "id": "comment-13894538",
            "author": "Simon Willnauer",
            "content": "well the keyword attribute is supported all over the place for that purpose. For BW compat we have the version attribute and to remove duplicates there is RemoveDuplicatesTokenFilter. We should really think about if we want to add an abstract class here. I don't think so to be honest. Another way is to make it an option or to use a delegator and store the state in the delegate TokenFilter? ",
            "date": "2014-02-07T13:52:41+0000"
        },
        {
            "id": "comment-13894563",
            "author": "Nik Everett",
            "content": "I suppose I'm just used to abstract classes but you are right, the delegate would work better here.  I'll make that change.  Before I do, though, does my argument (more instinct, really) about only cloning the token if there is anything to fold make sense?  If not I'll just add support for the keyword attribute with a version check. ",
            "date": "2014-02-07T14:26:23+0000"
        },
        {
            "id": "comment-13894578",
            "author": "Simon Willnauer",
            "content": "well I mean actually doing the delegate in user land aka in your code. I could see this being useful but why makeing such an effort, can't you just add a boolean to the ctor and implement it in the filter? ",
            "date": "2014-02-07T14:42:49+0000"
        },
        {
            "id": "comment-13894642",
            "author": "Nik Everett",
            "content": "Patch that uses a simple boolean rather than crazy subclassing. ",
            "date": "2014-02-07T15:46:26+0000"
        },
        {
            "id": "comment-13894646",
            "author": "Nik Everett",
            "content": "Minor improvement in the names of things in the tests. ",
            "date": "2014-02-07T15:49:38+0000"
        },
        {
            "id": "comment-13897083",
            "author": "Simon Willnauer",
            "content": "I like this patch much better. I wonder if we can come up with a better naming for the variables / options. In PatternCaptureGroupTokenFilter we use preserveOriginal which I kind of like better.  For the tests I wonder if you can make assertNextTerms accept a ASCIIFoldingFilter instead of a TokenFilter and add a getter to it so we can randomly set if the orig should be preserved? That would also prevent the subclass? ",
            "date": "2014-02-10T22:00:36+0000"
        },
        {
            "id": "comment-13897869",
            "author": "Nik Everett",
            "content": "Uploading new diff with changes Simon asked for. ",
            "date": "2014-02-11T14:20:20+0000"
        },
        {
            "id": "comment-13898974",
            "author": "Simon Willnauer",
            "content": "this looks good to me - I plan to commit this soon ",
            "date": "2014-02-12T10:15:40+0000"
        },
        {
            "id": "comment-13898984",
            "author": "ASF subversion and git services",
            "content": "Commit 1567595 from Simon Willnauer in branch 'dev/trunk'\n[ https://svn.apache.org/r1567595 ]\n\nLUCENE-5437: ASCIIFoldingFilter now has an option to preserve the original token ",
            "date": "2014-02-12T10:42:54+0000"
        },
        {
            "id": "comment-13898986",
            "author": "ASF subversion and git services",
            "content": "Commit 1567597 from Simon Willnauer in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1567597 ]\n\nLUCENE-5437: ASCIIFoldingFilter now has an option to preserve the original token ",
            "date": "2014-02-12T10:47:49+0000"
        },
        {
            "id": "comment-13898987",
            "author": "Simon Willnauer",
            "content": "thanks Nik ",
            "date": "2014-02-12T10:48:27+0000"
        },
        {
            "id": "comment-14000274",
            "author": "Ahmet Arslan",
            "content": "ASCIIFoldingFilter's preserveOriginal=true breaks wildcard queries, since it is a MultiTermAwareComponent.\n\n\n  <fieldType name=\"text_ascii_preserve\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.StandardTokenizerFactory\"/>            \n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.ASCIIFoldingFilterFactory\" preserveOriginal=\"true\"/>\n      </analyzer>      \n    </fieldType>\n\n\n\nWith the above type, q=manu:Belk\u0131* yields: \n\n\n \"error\": {\n    \"msg\": \"analyzer returned too many terms for multiTerm term: Belk\u0131\",\n    \"code\": 400\n  } \n\n\n\nI think preserveOriginal is dangerous for token filters that implement MultiTermAwareComponent. \nWhat is the preferred action here? Document this limitation/behavior? Or consider this as a bug and open a jira? ",
            "date": "2014-05-16T20:37:53+0000"
        },
        {
            "id": "comment-14000279",
            "author": "Ahmet Arslan",
            "content": "How about this change in ASCIIFoldingFilterFactory?. Aways return preserveOriginal=false in getMultiTermComponent so we don't get exceptions.\n\n\n@Override\n  public AbstractAnalysisFactory getMultiTermComponent() {\n    if (preserveOriginal) {\n      Map<String, String> args = new HashMap<>(1);\n      args.put(\"preserveOriginal\", \"false\");\n      return new ASCIIFoldingFilterFactory(args);\n    } else\n      return this;\n  }\n\n ",
            "date": "2014-05-16T20:40:34+0000"
        }
    ]
}