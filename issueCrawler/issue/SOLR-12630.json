{
    "id": "SOLR-12630",
    "title": "Query children without using block join",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently work is being put into Solr to support nested document hierarchies, keeping the original relation between parent and child docs (SOLR-12298, SOLR-12441). Currently the only way to query child documents is using BlockJoin. I was thinking perhaps we could introduce a way to query documents that are not indexed in the same block with a different transformer, or perhaps add this feature to the ChildDocTransformer.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-07T14:33:29+0000",
            "content": "This is just a thought, but perhaps we could use something like the node stream, except the transformer will rebuild the document structure instead of only adding one field.\nAnother option is to query all documents by root, ordering by nest_path, and rebuilding the original document structure from there.\nThe first option seems a lot more versatile, but I do admit I should probably sleep on it, perhaps there is more to it then meets the eye. ",
            "author": "mosh",
            "id": "comment-16571754"
        },
        {
            "date": "2018-08-07T16:27:19+0000",
            "content": "The internal\u00a0ROOT field and other\u00a0nested doc fields we've been adding are only populated for nested documents, which is today equivalent to \"block\" addition \u2013 i.e. atomically all at once. \u00a0Your proposal implies that somehow they would need to be populated when they are provided stand-alone somehow. \u00a0How would that work?\n\nYour claim \"currently the only way to query child documents is using BlockJoin\" is false, I think. \u00a0Adding docs in \"block\" fashion allows BlockJoin queries to work, but BlockJoin queries are not required to do all/any queries. \u00a0You could use JoinQParser if you wanted to. \u00a0The point of adding docs in blocks is to allow you to use BlockJoin queries which are pretty fast compared to JoinQParser equivalents.\n\nPerhaps you mean to convey this idea: it'd be nice if the query method could work consistently using either \"block\" style doc addition or standalone docs (+ metadata to express relationships). \u00a0Internally somehow it should detect which mechanism is most efficient (use BlockJoin if possible). \u00a0This sounds hard; I'm not sure if this is even what you mean though. ",
            "author": "David Smiley",
            "id": "comment-16571925"
        },
        {
            "date": "2018-08-08T05:16:28+0000",
            "content": " Perhaps you mean to convey this idea: it'd be nice if the query method could work consistently using either \"block\" style doc addition or standalone docs (+ metadata to express relationships).  Internally somehow it should detect which mechanism is most efficient (use BlockJoin if possible).  This sounds hard; I'm not sure if this is even what you mean though. \nThis is actually exactly what I was going for, except perhaps we could let the user decide, or even have this set in the schema. Perhaps if the user has nested updates, this well be a lot more performant then indexing the whole block. Perhaps using the nested update URP we could add the needed metadata field(ROOT, _nest_path, _nest_parent) and index the doc in the same shard as the other children.\nWould a nested field in schema with a type of block or shard make this simpler?\nWe could use the field type to determine which query or atomic update ought to be used in each scenario.\nAgain, just a thought. ",
            "author": "mosh",
            "id": "comment-16572689"
        },
        {
            "date": "2018-08-08T14:42:05+0000",
            "content": "Perhaps using the nested update URP we could add the needed metadata field(ROOT, _nest_path, _nest_parent)\nFrom where? Oh; perhaps if it's an update to an existing child doc, then we could fetch the same metadata fields from that document? (if so this underscores the need to use docValues to store that information, e.g. nest path & nest parent ID & root)\n\nNew children won't have metadata that can be accessed in the existing index. Perhaps a special field provided with a new document could point to its parent and the label/relationship to that parent. Then this special field is removed in the URP as its use is transient. Hmmm; maybe we should do away with the child index number appended to the nest_path field. I don't think we actually need this digit? Maintaining it would be problematic with ad-hoc addition of docs.\n\nI think the schema would need a setting to indicate if the collection has strict \"block\" nested docs, or wether it may be ad-hoc nested docs, or if there are no nested docs at all (3-way toggle). With such a mechanism, fields like \"root\" and others needn't be explicitly defined; they can be considered implementation details of Solr's nested docs. It's not clear to me how your suggestion of a field type would be used to make the distinction.\n\nBefore proceeding in this direction on the above aspects, it'd be good to consider\u00a0what an implementation-neutral query might look like. It would not mention {!join} or {!child} or {!parent}. \u00a0Or alternatively, maybe child|parent might be made aware of the aforementioned setting to \"do the right thing\". ",
            "author": "David Smiley",
            "id": "comment-16573303"
        },
        {
            "date": "2018-08-08T15:45:46+0000",
            "content": "Although not a strict alternative, I've been interested in ways of exploring how to make updates faster, and thus make choices like the above more favorable to simply sticking with block join if only updates cold be cheaper. \u00a0Admittedly these ideas are wildly out of scope with this issue (and broadly beneficial to many use-cases unrelated to nested docs!). But what the heck; I'll share them here any way. Some ideas:\n\n\tFor full-text fields with an expensive analysis configuration, the update process could be made to leverage term vectors to avoid re-analysis. \u00a0Although given the weight of them; I'm unsure how fruitful it\u00a0is. I have a pretty good idea of what's involved internally though, and have always wanted to try a POC/experiment.\n\tWe have numeric in-place updates but not yet String in-place updates for docValue only fields. I recall there was WIP for that by Shai but for whatever reason it stalled.\n\tLucene's ParallelLeafReader is a hidden gem, allowing you to partition updates of fields to different internal indexes (and other use-cases). PLR is itself actually rather simple; it would take a lot of other (complex) code to completely implement the strategy. If you only need to update certain fields, typically small ones (while leaving lots of other data alone), then this is an interesting possibility. Implementation of this would likely result in a new attribute in the schema on fields called \"fieldGroup\" or some-such to segment certain fields aside that are able to be updated faster alone, since it wouldn't involve re-indexing fields in other field groups.\n\n ",
            "author": "David Smiley",
            "id": "comment-16573404"
        }
    ]
}