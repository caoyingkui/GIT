{
    "id": "LUCENE-6956",
    "title": "TestBKDTree.testRandomMedium() failure: some hits were wrong",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "My Jenkins found a reproducible seed for a failure of TestBKDTree.testRandomMedium() on branch_5x with Java8:\n\n\n  [junit4] Suite: org.apache.lucene.bkdtree.TestBKDTree\n   [junit4]   1> T1: id=29784 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29528\n   [junit4]   1>   lat=86.88086835667491 lon=-8.821268286556005\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=29801 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29545\n   [junit4]   1>   lat=86.88149104826152 lon=-9.34366637840867\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=29961 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29705\n   [junit4]   1>   lat=86.8706679996103 lon=-9.38328042626381\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30015 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29759\n   [junit4]   1>   lat=86.84762765653431 lon=-9.44802425801754\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30017 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29761\n   [junit4]   1>   lat=86.8753323610872 lon=-9.091365560889244\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30042 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29786\n   [junit4]   1>   lat=86.85837233439088 lon=-9.127480667084455\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30061 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29805\n   [junit4]   1>   lat=86.85876209288836 lon=-9.408821929246187\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30077 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29821\n   [junit4]   1>   lat=86.84681385755539 lon=-8.837449550628662\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30185 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=29929\n   [junit4]   1>   lat=86.84285902418196 lon=-9.196635894477367\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30457 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=30201\n   [junit4]   1>   lat=86.85951378196478 lon=-9.43030072376132\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30510 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=30254\n   [junit4]   1>   lat=86.87674303539097 lon=-9.011097270995378\n   [junit4]   1>   deleted?=false\n   [junit4]   1> T1: id=30541 should match but did not\n   [junit4]   1>   small=true query=BKDPointInPolygonQuery: field=point: Points: [-9.594408497214317, 86.83882305398583] [-9.594408497214317, 86.8827043287456] [-8.752231243997812, 86.8827043287456] [-8.752231243997812, 86.83882305398583] [-9.594408497214317, 86.83882305398583]  docID=30285\n   [junit4]   1>   lat=86.8406930565834 lon=-9.17652016505599\n   [junit4]   1>   deleted?=false\n   [junit4]   2> 1? 01, 2016 8:21:44 ?? com.carrotsearch.randomizedtesting.RandomizedRunner$QueueUncaughtExceptionsHandler uncaughtException\n   [junit4]   2> WARNING: Uncaught exception in thread: Thread[T1,5,TGRP-TestBKDTree]\n   [junit4]   2> java.lang.AssertionError: some hits were wrong\n   [junit4]   2>        at __randomizedtesting.SeedInfo.seed([17908CAA7FD53E04]:0)\n   [junit4]   2>        at org.junit.Assert.fail(Assert.java:93)\n   [junit4]   2>        at org.apache.lucene.util.BaseGeoPointTestCase$VerifyHits.test(BaseGeoPointTestCase.java:547)\n   [junit4]   2>        at org.apache.lucene.util.BaseGeoPointTestCase$2._run(BaseGeoPointTestCase.java:753)\n   [junit4]   2>        at org.apache.lucene.util.BaseGeoPointTestCase$2.run(BaseGeoPointTestCase.java:618)\n   [junit4]   2> \n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBKDTree -Dtests.method=testRandomMedium -Dtests.seed=17908CAA7FD53E04 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=zh_HK -Dtests.timezone=Europe/Jersey -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   7.46s | TestBKDTree.testRandomMedium <<<\n   [junit4]    > Throwable #1: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=25, name=T1, state=RUNNABLE, group=TGRP-TestBKDTree]\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([17908CAA7FD53E04:AA4EBB023EB05D62]:0)\n   [junit4]    > Caused by: java.lang.AssertionError: some hits were wrong\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([17908CAA7FD53E04]:0)\n   [junit4]    >        at org.apache.lucene.util.BaseGeoPointTestCase$VerifyHits.test(BaseGeoPointTestCase.java:547)\n   [junit4]    >        at org.apache.lucene.util.BaseGeoPointTestCase$2._run(BaseGeoPointTestCase.java:753)\n   [junit4]    >        at org.apache.lucene.util.BaseGeoPointTestCase$2.run(BaseGeoPointTestCase.java:618)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene54): {}, docValues:{}, sim=RandomSimilarityProvider(queryNorm=true,coord=crazy): {}, locale=zh_HK, timezone=Europe/Jersey\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.8.0_45 (64-bit)/cpus=16,threads=1,free=381269328,total=513802240\n   [junit4]   2> NOTE: All tests run in this JVM: [TestBKDTree]\n   [junit4]   2> NOTE: download the large Jenkins line-docs file by running 'ant get-jenkins-line-docs' in the lucene directory.\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBKDTree -Dtests.seed=17908CAA7FD53E04 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=zh_HK -Dtests.timezone=Europe/Jersey -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.00s | TestBKDTree (suite) <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: The test or suite printed 11178 bytes to stdout and stderr, even though the limit was set to 8192 bytes. Increase the limit with @Limit, ignore it completely with @SuppressSysoutChecks or run with -Dtests.verbose=true\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([17908CAA7FD53E04]:0)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n   [junit4] Completed [1/1 (1!)] in 7.90s, 1 test, 1 failure, 1 error <<< FAILURES!\n   [junit4] \n   [junit4] \n   [junit4] Tests with failures [seed: 17908CAA7FD53E04]:\n   [junit4]   - org.apache.lucene.bkdtree.TestBKDTree.testRandomMedium\n   [junit4]   - org.apache.lucene.bkdtree.TestBKDTree (suite)\n   [junit4] \n   [junit4] \n   [junit4] JVM J0:     1.00 ..     9.75 =     8.75s\n   [junit4] Execution time total: 9.76 sec.\n   [junit4] Tests summary: 1 suite, 1 test, 1 suite-level error, 1 error",
    "attachments": {
        "LUCENE-6956-enc.patch": "https://issues.apache.org/jira/secure/attachment/12784385/LUCENE-6956-enc.patch",
        "LUCENE-6956.patch": "https://issues.apache.org/jira/secure/attachment/12783668/LUCENE-6956.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15081010",
            "author": "ASF subversion and git services",
            "date": "2016-01-04T11:09:20+0000",
            "content": "Commit 1722841 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1722841 ]\n\nLUCENE-6956: make sure specific test method fails, instead of relying on 'unhandled exc in thread' from test framework "
        },
        {
            "id": "comment-15081012",
            "author": "ASF subversion and git services",
            "date": "2016-01-04T11:10:36+0000",
            "content": "Commit 1722843 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1722843 ]\n\nLUCENE-6956: make sure specific test method fails, instead of relying on 'unhandled exc in thread' from test framework "
        },
        {
            "id": "comment-15082856",
            "author": "Michael McCandless",
            "date": "2016-01-05T11:13:08+0000",
            "content": "OK I finally isolated this test failure to an apparently bug/lossy double point precision issue in GeoRelationUtils.rectCrossesPoly; if you add this test case to TestGeoUtils.java, the 2nd (last) assert in the test fails:\n\n\n  public void testBKDCase1() throws Exception {\n    double[] polyLats = new double[] {86.83882305398583, 86.8827043287456, 86.8827043287456, 86.83882305398583, 86.83882305398583};\n    double[] polyLons = new double[] {-9.594408497214317, -9.594408497214317, -8.752231243997812, -8.752231243997812, -9.594408497214317};\n    double polyMinLat = 86.83882305398583;\n    double polyMaxLat = 86.8827043287456;\n    double polyMinLon = -9.594408497214317;\n    double polyMaxLon = -8.752231243997812;\n\n    double cellMinLat = -89.99999997904524;\n    double cellMaxLat = 86.8827033836041;\n    double cellMinLon = -179.99999995809048;\n    double cellMaxLon = 179.99999995809048;\n\n    // Cell is massive vs small poly so it's definitely NOT within:\n    assertFalse(GeoRelationUtils.rectWithinPoly(cellMinLon, cellMinLat, cellMaxLon, cellMaxLat, polyLons, polyLats, polyMinLon, polyMinLat, polyMaxLon, polyMaxLat));\n\n    // But cell does cross the poly (barely!):\n    assertTrue(GeoRelationUtils.rectCrossesPoly(cellMinLon, cellMinLat, cellMaxLon, cellMaxLat, polyLons, polyLats, polyMinLon, polyMinLat, polyMaxLon, polyMaxLat));\n  }\n\n\n\nI think the problem is that the polyMaxLat is just a wee bit over cellMaxLat and floating point errors in lineCrossesLine must then incorrectly conclude the poly is fully contained inside the cell?\n\nThis causes BKD tree on recursing to incorrectly skip a whole part of the sub-tree, missing hits that are well within the query polygon.\n\nNicholas Knize any ideas what we can do to fix this? "
        },
        {
            "id": "comment-15111272",
            "author": "Nicholas Knize",
            "date": "2016-01-21T20:50:54+0000",
            "content": "The issue is related to the performance improvements added in LUCENE-6951. That approximation exploits characteristics of the range based GeoPoint encoding which are \"well formed\" quad cells.  Much like the issue seen with range queries and BKD's tendency to create exotic splits, the polygon approximation can fail with these irregular rectangles.\n\nThe attached patch changes the following:\n\n\n\tadd the original rectCrossesPoly method and uses it for more \"precise\" relations required by BKD.\n\tremove tolerance comparisons from GeoRelationUtils.pointInRect. This method should operate independent of the tolerance factor.\n\tfor LatLonPoint BoundingBox queries, ignore false positives/negatives that are within TOLERANCE rounding error\n\n "
        },
        {
            "id": "comment-15111280",
            "author": "Nicholas Knize",
            "date": "2016-01-21T20:56:34+0000",
            "content": "Patch has been successfully beast tested and passes on the jenkins failures I was able to reproduce. I'm unable to reproduce some of the java 9 failures due to a java.util.IllformedLocaleException so if there are no objections I'll commit this fix shortly and get jenkins working on it.  "
        },
        {
            "id": "comment-15111346",
            "author": "Michael McCandless",
            "date": "2016-01-21T21:42:58+0000",
            "content": "Hmm I'm having trouble understanding this change \n\n\n   public static double compare(final double v1, final double v2) {\n-    final double delta = v1-v2;\n-    return Math.abs(delta) <= TOLERANCE ? 0 : delta;\n+    final int delta = (int)(v1*TOLERANCE - v2*TOLERANCE);\n+    return Math.abs(delta/TOLERANCE) <= TOLERANCE ? 0 : delta;\n   }\n\n\n\nCan you maybe add a comment here, and break it out as an if statement not ternary?\n\nTOLERANCE is 1e-6 right?  So isn't final int delta always going to be 0 when v1/v2 are typical lat/lon values?\n\nThe way it is today is much clearer I think? "
        },
        {
            "id": "comment-15111361",
            "author": "Uwe Schindler",
            "date": "2016-01-21T21:51:57+0000",
            "content": "I was able to reproduce. I'm unable to reproduce some of the java 9 failures due to a java.util.IllformedLocaleException\n\nCan you give a short note with reproduce line? This could be related to my changes last weekend. Could be that I missed a forbidden Locale.toString() when printing reproduce line.\n\nIf this only happens in Java 9, it could be some JVM bug. "
        },
        {
            "id": "comment-15111376",
            "author": "Uwe Schindler",
            "date": "2016-01-21T21:59:40+0000",
            "content": "Ah, I think I know. The issue is older. Could it be that you tried to use an old reproduce line from last week, e.g.:\n\n\n[junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestBKDTree -Dtests.seed=17908CAA7FD53E04 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=zh_HK -Dtests.timezone=Europe/Jersey -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n\n\n\nThis line no longer works, unless you change the underscore in the Locale to a dash. Since LUCENE-6978 you have to pass a IETF standardized locale (en-US instead en_US). So you seem to have used an old reprodiuce line with newer test-framework. "
        },
        {
            "id": "comment-15111382",
            "author": "Nicholas Knize",
            "date": "2016-01-21T22:02:52+0000",
            "content": "Sure Uwe Schindler. Just tried w/ java 7, 8, and 9. Same exception on all. Looks like its related to the mer_KE locale tag.\n\nThe exception:\n\n\n   [junit4]   2> Jan 21, 2016 3:57:10 PM com.carrotsearch.randomizedtesting.RandomizedRunner runSuite\n   [junit4]   2> SEVERE: Panic: RunListener hook shouldn't throw exceptions.\n   [junit4]   2> java.lang.NullPointerException\n   [junit4]   2> \tat org.apache.lucene.util.RunListenerPrintReproduceInfo.printDebuggingInformation(RunListenerPrintReproduceInfo.java:132)\n   [junit4]   2> \tat org.apache.lucene.util.RunListenerPrintReproduceInfo.testRunFinished(RunListenerPrintReproduceInfo.java:119)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSuite(RandomizedRunner.java:706)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner.access$200(RandomizedRunner.java:140)\n   [junit4]   2> \tat com.carrotsearch.randomizedtesting.RandomizedRunner$2.run(RandomizedRunner.java:591)\n   [junit4]   2> \n   [junit4] ERROR   0.00s | TestGeoPointQuery (suite) <<<\n   [junit4]    > Throwable #1: java.util.IllformedLocaleException: Invalid subtag: mer_KE [at index 0]\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([30950A47BB2DFA04]:0)\n   [junit4]    > \tat java.util.Locale$Builder.setLanguageTag(Locale.java:2426)\n   [junit4]    > \tat org.apache.lucene.util.LuceneTestCase.localeForLanguageTag(LuceneTestCase.java:1530)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4] Completed [1/1 (1!)] in 0.29s, 0 tests, 1 error <<< FAILURES!\n\n\n\nreproduce with:\n\n\nant test  -Dtestcase=TestGeoPointQuery -Dtests.method=testRandomTiny -Dtests.seed=30950A47BB2DFA04 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=mer_KE -Dtests.timezone=America/Martinique -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n "
        },
        {
            "id": "comment-15111384",
            "author": "Nicholas Knize",
            "date": "2016-01-21T22:03:43+0000",
            "content": "got it.. posted my reply 3 mins too late   Thanks! "
        },
        {
            "id": "comment-15111495",
            "author": "Uwe Schindler",
            "date": "2016-01-21T22:22:41+0000",
            "content": "No prob. So it was as I thought? You tried to run the old reproduce line with newer checkout?\n\nSo I assume test passes fine if you fix the reproduce line with \"zh-HK\" or \"zh-hk\" instead of the old-style \"zh_HK\". "
        },
        {
            "id": "comment-15111530",
            "author": "Nicholas Knize",
            "date": "2016-01-21T22:40:32+0000",
            "content": "Correct. I was testing against an old failure in an open issue. New style locale fixed it. Thx for the help! "
        },
        {
            "id": "comment-15111532",
            "author": "Nicholas Knize",
            "date": "2016-01-21T22:41:46+0000",
            "content": "That was my fault, stale change. Reverted and updated the patch. "
        },
        {
            "id": "comment-15111658",
            "author": "Michael McCandless",
            "date": "2016-01-22T00:11:40+0000",
            "content": "Thanks, I'm glad that change was stale \n\nInstead of passing a boolean approx can we make both precise and approx methods public and fix callers to invoke the one they need? "
        },
        {
            "id": "comment-15112455",
            "author": "Michael McCandless",
            "date": "2016-01-22T14:28:11+0000",
            "content": "Currently we use 1e-7 (POLY_TOLERANCE) as the tolerance for incorrect results in the test for polygon queries, but this patch makes that 10X larger (1e-6) ... is that really necessary?  1e-6 works out to +/- ~11cm in the worst case.\n\nCan we De Morganize this change?\n\n\n-    return (GeoUtils.compare(lon, minLon) >= 0 && GeoUtils.compare(lon, maxLon) <= 0\n-        && GeoUtils.compare(lat, minLat) >= 0 && GeoUtils.compare(lat, maxLat) <= 0);\n+    return !(lon < minLon || lon > maxLon || lat < minLat || lat > maxLat);\n\n\n\nI.e., remove the leading ! and push change the || to && and reverse the comparisons? "
        },
        {
            "id": "comment-15112464",
            "author": "Michael McCandless",
            "date": "2016-01-22T14:32:43+0000",
            "content": "Also, can we fix this test weakness now?\n\n\n      // TODO: GeoUtils APIs are still buggy for large distances:\n      if (true || useSmallRanges) {\n        // Approx 3 degrees lon at the equator:\n        radiusMeters = random().nextDouble() * 333000;\n      } else {\n        radiusMeters = random().nextDouble() * GeoProjectionUtils.SEMIMAJOR_AXIS * Math.PI / 2.0;\n      }\n\n\n\nIe, remove that true ||? "
        },
        {
            "id": "comment-15114557",
            "author": "Michael McCandless",
            "date": "2016-01-24T21:58:34+0000",
            "content": "Nicholas Knize can you fold the revert of this change into this patch?: https://git1-us-west.apache.org/repos/asf?p=lucene-solr.git;a=commitdiff;h=b62c6715;hp=9d35aafc565a880c5cae7c21fa6c10fbdd0399ec\n\nThanks. "
        },
        {
            "id": "comment-15114771",
            "author": "Nicholas Knize",
            "date": "2016-01-25T05:15:15+0000",
            "content": "Updated patch that includes all feedback. "
        },
        {
            "id": "comment-15114772",
            "author": "Nicholas Knize",
            "date": "2016-01-25T05:15:41+0000",
            "content": "done! "
        },
        {
            "id": "comment-15115897",
            "author": "Michael McCandless",
            "date": "2016-01-25T20:12:40+0000",
            "content": "Thanks Nicholas Knize, I like seeing further fixing of previous test castrations like this  :\n\n\n   @Override\n   protected boolean forceSmall() {\n-    // TODO: GeoUtils are potentially slow if we use small=false with heavy testing\n-    return true;\n+    return false;\n   }\n\n\n\nBut what about my worries on 10x increase on tolerance for test\nfailures?  I'd rather not weaken tests by increasing the allowed\n\"fuzz\" unless it's really necessary ... it's 1e-7 now but the patch\nchanges it to 1e-6 for poly and rect tests.\n\nCan we rename GeoRelationUtils.pointInRect to\n.pointInRectPrecise since it's now comparing doubles directly?\n\nHmm I hit this failure with the patch after a some beasting:\n\n\n[junit4:pickseed] Seed property 'tests.seed' already defined: CDA594C3EF930919\n   [junit4] <JUnit4> says hallo! Master seed: CDA594C3EF930919                                                                                                                                                                 \n   [junit4] Executing 1 suite with 1 JVM.                                                                                                                                                                                      \n   [junit4]                                                                                                                                                                                                                    \n   [junit4] Started J0 PID(71413@localhost).                                                                                                                                                                                   \n   [junit4] Suite: org.apache.lucene.util.TestGeoUtils                                                                                                                                                                         \n   [junit4]   1> doc=983 matched but should not on iteration 49                                                                                                                                                                \n   [junit4]   1>   lon=139.60821881890297 lat=69.31676804088056 distanceMeters=4715192.068461553 vs radiusMeters=4698375.33421177                                                                                              \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoUtils -Dtests.method=testGeoRelations -Dtests.seed=CDA594C3EF930919 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed\\\n -Dtests.locale=tr-TR -Dtests.timezone=America/Matamoros -Dtests.asserts=true -Dtests.file.encoding=UTF-8                                                                                                                      \n   [junit4] FAILURE 0.43s | TestGeoUtils.testGeoRelations <<<                                                                                                                                                                  \n   [junit4]    > Throwable #1: java.lang.AssertionError: 1 incorrect hits (see above)                                                                                                                                          \n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([CDA594C3EF930919:F8680769B647FA7]:0)                                                                                                                             \n   [junit4]    >        at org.apache.lucene.util.TestGeoUtils.testGeoRelations(TestGeoUtils.java:532)                                                                                                                         \n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)                                                                                                                                                               \n   [junit4]   2> NOTE: test params are: codec=Lucene60, sim=RandomSimilarity(queryNorm=true,coord=no): {}, locale=tr-TR, timezone=America/Matamoros                                                                            \n   [junit4]   2> NOTE: Linux 3.19.0-21-generic amd64/Oracle Corporation 1.8.0_65 (64-bit)/cpus=72,threads=1,free=428760240,total=514850816                                                                                     \n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeoUtils]                                                                                                                                                               \n   [junit4] Completed [1/1 (1!)] in 0.83s, 1 test, 1 failure <<< FAILURES!                                                                                                                                                     \n   [junit4]                                                                                                                                                                                                                    \n   [junit4]                                                                                                                                                                                                                    \n   [junit4] Tests with failures [seed: CDA594C3EF930919]:                                                                                                                                                                      \n   [junit4]   - org.apache.lucene.util.TestGeoUtils.testGeoRelations                                                                                                                                                           \n   [junit4]                                                                                                                                                                                                                    \n   [junit4]                                                                                                                                                                                                                    \n   [junit4] JVM J0:     0.41 ..     1.79 =     1.38s                                                                                                                                                                           \n   [junit4] Execution time total: 1.80 sec.                                                                                                                                                                                    \n   [junit4] Tests summary: 1 suite, 1 test, 1 failure              \n\n "
        },
        {
            "id": "comment-15115991",
            "author": "Nicholas Knize",
            "date": "2016-01-25T20:40:40+0000",
            "content": "Oh, sorry for not addressing the 1e-7 question. With the 32 bit quantization encoding error can exceed 1e-7 but not 1e-6. So its not that its weakening the test, its that once a point is indexed (quantized from two doubles to two 32 bit ints) the location can be affected by that much. I'm not exactly sure where 1e-7 came from? I can reduce it from 1e-6 but, in all honesty, I haven't worked out the exact maximum error. That could be a fun and useful exercise, just haven't had the time.\n\nHmm I hit this failure with the patch after a some beasting:\n\nLooks like the TestGeoUtils distance test doesn't have any boundary checks, so this is related to above. I thought I added a boundary check (e.g., return null boolean)? Maybe it was stepped on? I can add it back.\n\nCan we rename GeoRelationUtils.pointInRect to .pointInRectPrecise since it's now comparing doubles directly?\n\nAbsolutely! "
        },
        {
            "id": "comment-15116244",
            "author": "Nicholas Knize",
            "date": "2016-01-25T22:57:37+0000",
            "content": "Updated patch to address comments.  Note: distance size restriction was added back and new issue LUCENE-6994 was opened to investigate distance accuracy issues. "
        },
        {
            "id": "comment-15116246",
            "author": "Nicholas Knize",
            "date": "2016-01-25T23:00:48+0000",
            "content": "Hmm I hit this failure with the patch after a some beasting\n\nDug deeper and this error revealed a 2x accuracy issue with large exotic rectangles created by the BKD split approach. (different from the pole crossing). I added back the distance restriction and opened LUCENE-6994 to address the accuracy issue. "
        },
        {
            "id": "comment-15117015",
            "author": "Michael McCandless",
            "date": "2016-01-26T10:03:58+0000",
            "content": "> With the 32 bit quantization encoding error can exceed 1e-7 but not 1e-6.\n\nHmm I don't think that's true?  E.g.:\n\n\n>>> 360./(1<<32)\n8.381903171539307e-08\n\n\n\nI made a test case (attached) for LatLonPoint's encoding, and it\nindeed passes with 1e-7 TOLERANCE.\n\nSo then I made the same test case for GeoPoint's encoding and it\nfails!\n\nI dug into why, and it's because GeoPoint is only use 31 bits\n(GeoUtils.BITS) to encode each value, and indeed with 31 bits the\nquantization errors becomes:\n\n\n>>> 360./(1<<31)\n1.6763806343078613e-07\n\n\n\nWhy do we only use 31 bits to encode?  Since we are breaking the\nformat now in LUCENE-6930 maybe we can fix that?\n\n(I also separately added tests to confirm the encode/decode are\nstable, thanks to Robert Muir's suggestion, and they seem to pass).\n\nI'll commit these new tests... "
        },
        {
            "id": "comment-15117389",
            "author": "Nicholas Knize",
            "date": "2016-01-26T15:33:40+0000",
            "content": "++ Thanks for reminding me where that came from! I forgot we are using 2 different encoding methods for BKD and GeoPoint. The GeoPointEncoding of 31 bits was for supporting the GeoHash bit twiddle methods in GeoHashUtils. We had issue LUCENE-6710 that used the full 32 bits but I reverted it because of conflicts the the GeoHash string encoding.\n\nI'll go back to 32 bits so BKD and GeoUtils encoding methods and rounding error are consistent and we can use the same encoding methods for BKD and GeoPoint. Separately I'll fix up the GeoHash string encoding to work with the 32 bit encoding changes and deconflict tests.  \n\nI also separately added tests to confirm the encode/decode are stable\n\nWhich encoding, BKD? TestGeoUtils.testGeoHash tests morton and geohash stabilization for GeoUtils.  "
        },
        {
            "id": "comment-15117554",
            "author": "Nicholas Knize",
            "date": "2016-01-26T16:57:43+0000",
            "content": "Updated patch that reverts BKD tolerance back to 1e-7. I opened LUCENE-6996 as a separate issue to reconcile encoding/decoding resolution and tolerance between BKD and GeoPoint.\n\nThis should be ready, I'd like to get this committed before LUCENE-6930 and then tackle the encoding resolution. "
        },
        {
            "id": "comment-15118212",
            "author": "Michael McCandless",
            "date": "2016-01-26T22:40:24+0000",
            "content": "Thanks Nicholas Knize, the latest patch looks great!  +1 "
        },
        {
            "id": "comment-15118528",
            "author": "ASF subversion and git services",
            "date": "2016-01-27T03:02:14+0000",
            "content": "Commit f3ca357802be7d492a5cdfaac26c6bdb1f0c48d9 in lucene-solr's branch refs/heads/master from Nick Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f3ca357 ]\n\nLUCENE-6956: Fix polygon approximation for LatLonPoint Queries "
        },
        {
            "id": "comment-15118584",
            "author": "ASF subversion and git services",
            "date": "2016-01-27T03:45:23+0000",
            "content": "Commit 257413bbe18eb4d7a8de085b0d6d12373732be80 in lucene-solr's branch refs/heads/branch_5x from Nick Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=257413b ]\n\nLUCENE-6956: Fix polygon approximation for LatLonPoint Queries "
        }
    ]
}