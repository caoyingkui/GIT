{
    "id": "LUCENE-8551",
    "title": "Purge unused FieldInfo on segment merge",
    "details": {
        "components": [
            "core/index"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Improvement"
    },
    "description": "If a field is effectively unused (no norms, terms index, term vectors, docValues, stored value, points index), it will nonetheless hang around in FieldInfos indefinitely.\u00a0 It would be nice to be able to recognize an unused FieldInfo and allow it to disappear after a merge (or two).\n\nSegmentMerger merges FieldInfo (from each segment) as nearly the first thing it does.\u00a0 After that, the different index parts, before it's known what's \"used\" or not.\u00a0 After writing, we theoretically know which fields are used or not, though we're not doing any bookkeeping to track it.\u00a0 Maybe we should track the fields used during writing so we write a filtered merged fieldInfo at the end instead of unfiltered up front?\u00a0\u00a0Or perhaps upon reading a segment, we make it cheap/easy for each index type (e.g. terms index, stored fields, ...) to know which fields have data for the corresponding type.\u00a0 Then, on a subsequent merge, we know up front to filter the FieldInfos.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16670205",
            "author": "Erick Erickson",
            "content": "David:\n\nThis would be way cool to get to happen on merge. We've had situations where some wild program adds over a million fields and the only remedy was to re-index.\n\nI'm working on SOLR-12259 which will, I hope, allow us to \"do things\" to the index. If this is too expensive to make happen as part of the regular merging process, that might be an alternative way to go about it on a one-off basis. I'd rather have it happen as part of regular merging of course.\n\nIf this is part of regular segment merging, we should still be able to make it happen with SOLR-12259\u00a0 to cover those cases where there are segments that are never merged because they're full and aren't having records deleted. ",
            "date": "2018-10-31T14:58:34+0000"
        },
        {
            "id": "comment-16673119",
            "author": "David Smiley",
            "content": "Agreed \u2013 if this\u00a0does not\u00a0wind up\u00a0happening automatically, it could be added\u00a0to some other mechanism like SOLR-12259.\u00a0 I'm not sure yet how much complexity it would add to the regular merge.\u00a0 I'm also not yet sure how much\u00a0performance degradation this is causing my employer... it remains to be measured.\u00a0 Even then, it's a YMMV thing. ",
            "date": "2018-11-02T13:48:55+0000"
        },
        {
            "id": "comment-16687703",
            "author": "Christophe Bismuth",
            "content": "Sounds challenging, I'd like to work on it! ",
            "date": "2018-11-15T09:31:58+0000"
        },
        {
            "id": "comment-16687705",
            "author": "Christophe Bismuth",
            "content": "I'll first implement unused FieldInfo tracking and let you know. ",
            "date": "2018-11-15T09:33:21+0000"
        },
        {
            "id": "comment-16688146",
            "author": "Adrien Grand",
            "content": "That would have overhead for sure. For instance it's not cheap to know which fields are used in stored fields, the only way to do this is to iterate over all documents and compute the set of used field names. In contrast merging can often copy raw compressed bytes and skip decompressing+decoding entirely.\n\nI'm also a bit worried of the fact that a field could be added back with a different number or with different options. For instance in the NRT case that means that you could have two consecutive point-in-time views of the same index that disagree on the FieldInfo of a field? ",
            "date": "2018-11-15T14:31:04+0000"
        },
        {
            "id": "comment-16688170",
            "author": "Christophe Bismuth",
            "content": "The overhead makes me think a dedicated optimize/purge API would be wiser. But, I don't know NRT internals enough to have a valuable opinion on the second point. ",
            "date": "2018-11-15T14:51:21+0000"
        },
        {
            "id": "comment-16688303",
            "author": "David Smiley",
            "content": "For instance in the NRT case that means that you could have two consecutive point-in-time views of the same index that disagree on the FieldInfo of a field?\n\nCan you please elaborate on that?  I'm unclear how NRT in particular relates. ",
            "date": "2018-11-15T16:26:54+0000"
        },
        {
            "id": "comment-16688331",
            "author": "Adrien Grand",
            "content": "Field infos are tracked at IndexWriter#globalFieldNumberMap and written with every segment. My understanding of this issue is that we would like to garbage-collect unused fields, so I was thinking that if a point-in-time view is open, then a field is removed, then a field with the same name is added back with a different configuration, then the point-in-time view that got open before the field got removed would have different field infos from IndexWriter. The fact that field infos are currently (almost) append-only makes things easier to reason about. It's a different issue but related: for a long time index options could be downgraded. Only until we figured out that this prevented a relevancy bug (LUCENE-8031) from being addressed, so we removed this feature (LUCENE-8134). ",
            "date": "2018-11-15T16:41:58+0000"
        }
    ]
}