{
    "id": "LUCENE-4360",
    "title": "Support running the same test suite multiple times in parallel",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "general/test"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The current \"test execution multiplier\" or:\n\n-Dtests.iters=N\n\n\ngenerates multiple tests (method executions) under a test class (suite). All these tests, however, are bound to a single class so they must run sequentially and on a single JVM (because of how JUnit works \u2013 nesting of rules, class hooks, etc.).\n\nMark pointed out that if somebody has a multi-core CPU then it'd be nice to be able to run a single suite in parallel, possibly in combination with tests.iters (so that a single test method is executed X times on Y parallel JVMs).\n\nThis is surprisingly easy with the randomized runner because it currently accepts \"duplicate\" suite names and will load-balance them in a normal way. So, if one has Y cores (JVMs) then providing a suite name X times will result in X executions, balanced across Y JVMs.\n\nThe only problem is how to \"multiply\" suite names. This can be done in a number of ways, starting from a custom resource collection wrapper and ending at a built-in code in the runner itself. I think the custom collection wrapper approach would be interesting, I'll explore this direction.",
    "attachments": {
        "quickhack.patch": "https://issues.apache.org/jira/secure/attachment/12543733/quickhack.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-09-04T19:49:17+0000",
            "content": "This is a quick hack that multiplies execution of all tests by N-fold by just repeating the same fileset a few times.\n\nA proof of concept, but working. ",
            "author": "Dawid Weiss",
            "id": "comment-13447999"
        },
        {
            "date": "2012-09-05T08:33:54+0000",
            "content": "Any ideas what to call this parameter? It's not the same as tests.iters because it multiplies entire suites. I came up with:\n\n-Dtests.multiply\n-Dtests.duplicate\n\nor the short equivalents:\n\n-Dtests.mply\n-Dtests.dups\n\n ",
            "author": "Dawid Weiss",
            "id": "comment-13448571"
        },
        {
            "date": "2012-09-05T10:03:11+0000",
            "content": "Example of use:\n\nant test-core -Dtests.dups=3 -Dtestcase=TestCharFilter\n\n<JUnit4> says kaixo! Master seed: 4CE0022F3CDFF5D7\nYour default console's encoding may not display certain unicode glyphs: windows-1252\nExecuting 3 suites with 3 JVMs.\n\nSuite: org.apache.lucene.analysis.TestCharFilter\nOK      0.05s J1 | TestCharFilter.testCharFilter1\nOK      0.01s J1 | TestCharFilter.testCharFilter11\nOK      0.00s J1 | TestCharFilter.testCharFilter2\nOK      0.00s J1 | TestCharFilter.testCharFilter12\nCompleted on J1 in 0.35s, 4 tests\n\nSuite: org.apache.lucene.analysis.TestCharFilter\nOK      0.04s J2 | TestCharFilter.testCharFilter1\nOK      0.01s J2 | TestCharFilter.testCharFilter11\nOK      0.00s J2 | TestCharFilter.testCharFilter2\nOK      0.01s J2 | TestCharFilter.testCharFilter12\nCompleted on J2 in 0.35s, 4 tests\n\nSuite: org.apache.lucene.analysis.TestCharFilter\nOK      0.04s J0 | TestCharFilter.testCharFilter1\nOK      0.02s J0 | TestCharFilter.testCharFilter11\nOK      0.00s J0 | TestCharFilter.testCharFilter2\nOK      0.00s J0 | TestCharFilter.testCharFilter12\nCompleted on J0 in 0.36s, 4 tests\n\nJVM J0:     0.67 ..     1.56 =     0.89s\nJVM J1:     0.67 ..     1.55 =     0.88s\nJVM J2:     0.67 ..     1.57 =     0.90s\nExecution time total: 1.58 sec.\nTests summary: 3 suites, 12 tests\n\n\n\nIn combination with tests.iters:\n\nant test-core -Dtests.dups=2 -Dtests.iters=2 -Dtestcase=TestCharFilter\n\n<JUnit4> says \u00edHola! Master seed: 592442048D98540B\nYour default console's encoding may not display certain unicode glyphs: windows-1252\nExecuting 2 suites with 2 JVMs.\n\nSuite: org.apache.lucene.analysis.TestCharFilter\nOK      0.04s J1 | TestCharFilter.testCharFilter12 {#0 seed=[592442048D98540B:5E8780464DC70845]}\nOK      0.00s J1 | TestCharFilter.testCharFilter12 {#1 seed=[592442048D98540B:EAD13CBA7905C369]}\nOK      0.00s J1 | TestCharFilter.testCharFilter11 {#0 seed=[592442048D98540B:4AC9FEB2457325F4]}\nOK      0.00s J1 | TestCharFilter.testCharFilter11 {#1 seed=[592442048D98540B:FE9F424E71B1EED8]}\nOK      0.00s J1 | TestCharFilter.testCharFilter1 {#0 seed=[592442048D98540B:643276B2D133E783]}\nOK      0.00s J1 | TestCharFilter.testCharFilter1 {#1 seed=[592442048D98540B:D064CA4EE5F12CAF]}\nOK      0.00s J1 | TestCharFilter.testCharFilter2 {#0 seed=[592442048D98540B:D339FCA65F87D49C]}\nOK      0.01s J1 | TestCharFilter.testCharFilter2 {#1 seed=[592442048D98540B:676F405A6B451FB0]}\nCompleted on J1 in 0.34s, 8 tests\n\nSuite: org.apache.lucene.analysis.TestCharFilter\nOK      0.05s J0 | TestCharFilter.testCharFilter12 {#0 seed=[592442048D98540B:5E8780464DC70845]}\nOK      0.00s J0 | TestCharFilter.testCharFilter12 {#1 seed=[592442048D98540B:EAD13CBA7905C369]}\nOK      0.00s J0 | TestCharFilter.testCharFilter11 {#0 seed=[592442048D98540B:4AC9FEB2457325F4]}\nOK      0.00s J0 | TestCharFilter.testCharFilter11 {#1 seed=[592442048D98540B:FE9F424E71B1EED8]}\nOK      0.00s J0 | TestCharFilter.testCharFilter1 {#0 seed=[592442048D98540B:643276B2D133E783]}\nOK      0.00s J0 | TestCharFilter.testCharFilter1 {#1 seed=[592442048D98540B:D064CA4EE5F12CAF]}\nOK      0.00s J0 | TestCharFilter.testCharFilter2 {#0 seed=[592442048D98540B:D339FCA65F87D49C]}\nOK      0.00s J0 | TestCharFilter.testCharFilter2 {#1 seed=[592442048D98540B:676F405A6B451FB0]}\nCompleted on J0 in 0.35s, 8 tests\n\nJVM J0:     0.66 ..     1.49 =     0.82s\nJVM J1:     0.66 ..     1.28 =     0.62s\nExecution time total: 1.49 sec.\nTests summary: 2 suites, 16 tests\n\n\n\nNote each JVM will start from the same master seed. Each test will work in its own working directory and JVM  though so it can be useful for performing stress testing of a single suite. ",
            "author": "Dawid Weiss",
            "id": "comment-13448606"
        },
        {
            "date": "2012-09-05T10:54:05+0000",
            "content": "Cool! This is a really nice addition! ",
            "author": "Sami Siren",
            "id": "comment-13448627"
        },
        {
            "date": "2012-09-05T10:56:47+0000",
            "content": "Thanks! It was Mark's request, actually. I had all the infrastructure ready, I just needed that duplicating resource collection and this was trivial. ",
            "author": "Dawid Weiss",
            "id": "comment-13448631"
        },
        {
            "date": "2013-03-22T16:43:59+0000",
            "content": "[branch_4x commit] Dawid Weiss\nhttp://svn.apache.org/viewvc?view=revision&revision=1381124\n\nLUCENE-4360: Support running the same test suite multiple times in parallel. ",
            "author": "Commit Tag Bot",
            "id": "comment-13610915"
        },
        {
            "date": "2013-05-10T10:32:49+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653737"
        }
    ]
}