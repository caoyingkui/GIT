{
    "id": "SOLR-1867",
    "title": "CachedSQLentity processor is using unbounded hashmap",
    "details": {
        "affect_versions": "1.4",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "I am using cachedSqlEntityprocessor in DIH to index the data. Please find a sample dataconfig structure, \n\n<entity x query=\"select * from x\"> ---> object \n<entity y query=\"select * from y\" processor=\"cachedSqlEntityprocessor\" cachekey=y.id cachevalue=x.id> --> object properties \n\nFor each and every object I would be retrieveing corresponding object properties (in my subqueries). \n\nI get in to OOM very often and I think thats a trade off if I use cachedSqlEntityprocessor. \n\nMy assumption is that when I use cachedSqlEntityprocessor the indexing happens as follows, \n\nFirst entity x will get executed and the entire table gets stored in cache \nnext entity y gets executed and entire table gets stored in cache \nFinally the compasion heppens through hash map . \n\nSo always I need to have the memory allocated to SOLR JVM more than or equal to the data present in tables.\n\nOne more issue is that even after SOLR completes indexing, the memory used previously is not getting released. I could still see the JVM consuming 1.5 GB after the indexing completes. I tried to use Java hotspot options but didnt see any differences.. GC is not getting invoked even after a long time when using CachedSQLentity processor\n\nMain issue seem to be the fact that  the CachedSQLentity processor cache is an unbounded HashMap, with no option to bound it. \n\nReference: http://n3.nabble.com/Need-info-on-CachedSQLentity-processor-tt698418.html#a698418",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Lance Norskog",
            "id": "comment-12854729",
            "date": "2010-04-07T23:37:50+0000",
            "content": "Possibly it is from using ThreadLocal. All classes are in contrib/..../dataimport:\n\nContext.java:\n\n\nstatic final ThreadLocal<Context> CURRENT_CONTEXT = new ThreadLocal<Context>();\n\n\n\nDocBuilder.buildDocument():\n\n\nContextImpl ctx = new ContextImpl(entity, vr, null,\n    pk == null ? Context.FULL_DUMP : Context.DELTA_DUMP,\n    session, parentCtx, this);\nentityProcessor.init(ctx);\nContext.CURRENT_CONTEXT.set(ctx);\n\n\n\nIf the CachedSqlEntityProcessor is saving rows in the Context, this may be the problem.\n\nThreadLocal is notorious for causing memory leaks because the thread gets reused in some way but the code forgets to null out the local object.\n\nThe DIH needs to do Context.CURRENT_CONTEXT.set(null) before the request returns, if the DIH index operation is synchronous. It probably should do this anyway for safety. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13255671",
            "date": "2012-04-17T15:55:06+0000",
            "content": "SOLR-2382 allowed for plugable cache implementations (3.6 & 4.x).  There are 2 (uncommitted thus far) cache implementations that store the cache on-disk (See SOLR-2613 and SOLR-2948).  \n\nFinally, if the memory leak described was due to ThreadLocal usage, this was eliminated in 4.0 with the removal of the \"threads\" feature. "
        }
    ]
}