{
    "id": "LUCENE-4864",
    "title": "Add AsyncFSDirectory to work around Windows issues with NIOFS (Lucene 5.0 only)",
    "details": {
        "components": [
            "core/store"
        ],
        "fix_versions": [],
        "affect_versions": "6.0",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "On LUCENE-4848 a new directory implementation was proposed that uses AsyncFileChannel to make a sync-less directory implementation (only needed for IndexInput). The problem on Windows is that positional reads are impossible without overlapping (async) I/O, so FileChannel in the JDK has to syncronize all reads, because they consist of an atomic seek and atomic read.\n\nAsyncFSDirectoty would not have this issue, but has to take care of thread management, because you need a separate thread to get notified when the read is done. This involves overhead, but might still be better than the synchronization.",
    "attachments": {
        "LUCENE-4864.patch": "https://issues.apache.org/jira/secure/attachment/12574857/LUCENE-4864.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-21T19:17:01+0000",
            "content": "I took the latest patch by Dawid Weiss from LUCENE-4848:\n\n\tRemoved the IndexOutput\n\tKept the AsyncFSIndexInput\n\tKept the QuickThreadsFilter\n\n\n\nAll tests pass at least on Windows. ",
            "author": "Uwe Schindler",
            "id": "comment-13609330"
        },
        {
            "date": "2013-03-21T19:19:38+0000",
            "content": "This patch also registers the new directory in LuceneTestCase to be randomly used. ",
            "author": "Uwe Schindler",
            "id": "comment-13609335"
        },
        {
            "date": "2013-03-21T21:36:50+0000",
            "content": "Hi Uwe. \n\nMichael is right \u2013 we will need to override that default factory and mark those threads somehow because on non-windows systems the threadpool generated threads that just cannot be linked to their source. Now I recall this was the reason I was changing a lot of Solr's anonymous threadpools to something that could be identified.\n\nAn alternative is to ignore all daemon threads. This is also an option. Although Michael is probably right that this property should be supported on all JVMs (it's a contract on a stdlibrary class) so there's nothing to worry about.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13609518"
        },
        {
            "date": "2013-03-21T22:08:40+0000",
            "content": "I ran a perf test with the full (wikimediumall) Wiki index, base = MMapDir, comp = AsyncFSDir:\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n              AndHighLow      567.56      (0.8%)       69.48      (0.1%)  -87.8% ( -87% -  -87%)\n                 Respell       42.45      (4.0%)        5.70      (0.2%)  -86.6% ( -87% -  -85%)\n               LowPhrase       23.23      (1.4%)        3.34      (0.1%)  -85.6% ( -85% -  -85%)\n                  Fuzzy2       54.01      (5.1%)        8.60      (0.1%)  -84.1% ( -84% -  -83%)\n                  Fuzzy1       51.34      (4.3%)        9.47      (0.2%)  -81.6% ( -82% -  -80%)\n         LowSloppyPhrase       24.87      (1.0%)        5.28      (0.0%)  -78.7% ( -79% -  -78%)\n              AndHighMed       78.75      (0.5%)       19.49      (0.3%)  -75.2% ( -75% -  -74%)\n                Wildcard       26.69      (2.7%)        7.97      (0.3%)  -70.1% ( -71% -  -69%)\n              HighPhrase       12.71      (7.2%)        3.98      (1.0%)  -68.6% ( -71% -  -65%)\n               MedPhrase      138.73      (6.5%)       51.65      (1.3%)  -62.8% ( -66% -  -58%)\n             LowSpanNear        8.73      (1.6%)        3.28      (0.6%)  -62.5% ( -63% -  -61%)\n         MedSloppyPhrase       27.76      (1.1%)       11.54      (0.3%)  -58.4% ( -59% -  -57%)\n                 MedTerm       64.12     (16.2%)       28.16      (3.2%)  -56.1% ( -64% -  -43%)\n             AndHighHigh       19.39      (0.4%)        8.78      (0.3%)  -54.7% ( -55% -  -54%)\n                HighTerm       51.06     (16.8%)       23.16      (4.6%)  -54.6% ( -65% -  -39%)\n               OrHighMed       28.74      (0.4%)       14.31      (0.6%)  -50.2% ( -51% -  -49%)\n               OrHighLow       27.15      (0.2%)       13.69      (0.9%)  -49.6% ( -50% -  -48%)\n              OrHighHigh       16.17      (0.2%)        8.25      (0.8%)  -49.0% ( -49% -  -48%)\n            HighSpanNear        3.28      (0.6%)        1.68      (0.6%)  -48.7% ( -49% -  -47%)\n             MedSpanNear       29.58      (0.5%)       15.59      (0.8%)  -47.3% ( -48% -  -46%)\n        HighSloppyPhrase        0.78      (3.2%)        0.42      (0.3%)  -46.3% ( -48% -  -44%)\n                  IntNRQ        3.35      (2.8%)        1.80      (1.0%)  -46.2% ( -48% -  -43%)\n                 Prefix3       18.97      (2.6%)       10.45      (1.1%)  -44.9% ( -47% -  -42%)\n                 LowTerm      312.34      (9.0%)      182.24      (2.8%)  -41.7% ( -49% -  -32%)\n\n\n\nI think the Future/wait is just too costly ... ",
            "author": "Michael McCandless",
            "id": "comment-13609573"
        },
        {
            "date": "2013-03-21T22:18:31+0000",
            "content": "Mike, the comparison should be between SimpleFSDir (which is the default on windows for 32 bit), NIOFSDir and this new async one. It is of course slower than MMap, that was expected. It is important to have hight concurrency. ",
            "author": "Uwe Schindler",
            "id": "comment-13609584"
        },
        {
            "date": "2013-03-21T22:22:02+0000",
            "content": "Ah, did you test on windows? ",
            "author": "Uwe Schindler",
            "id": "comment-13609592"
        },
        {
            "date": "2013-03-21T22:25:54+0000",
            "content": "Ah, did you test on windows?\n\nSorry, no: I tested on Linux.  I don't have a decent Windows box to run perf tests on ...\n\nIf this is only gonna help Windows 32 (ancient platform by now?) ... we should limit its visibility somehow I think. ",
            "author": "Michael McCandless",
            "id": "comment-13609596"
        },
        {
            "date": "2013-03-21T22:35:49+0000",
            "content": "I would like to see a comparison between SimpleFSDir on Windows (or Linux) and this one. If its slower we can close this issue as won't fix and better dont't provide this directory at all. According to Michael, he just implemented what the Sun bug tracker suggested: http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265734 (see also LUCENE-753 and http://wiki.apache.org/lucene-java/SunJavaBugs)\n\nUnfortunately I have no luceneutil working on windows, so I cannot test, too. ",
            "author": "Uwe Schindler",
            "id": "comment-13609619"
        },
        {
            "date": "2013-03-21T23:43:57+0000",
            "content": "On any platform other than Windows (at least in JDK7, haven't checked JDK8 prereleases) the AsynchronousFileChannel is quite unlikely to be faster since it's just a normal NIO read + the cost of notifying the future.  On Windows it should theoretically be better as long as multiple threads are being used for reads (perhaps with tweaking the ExecutorService passed to it) since it uses overlapped IO.  For the case of single threaded reads it is again likely to be roughly the same as SimpleFSDirectory.  I'd love to run some comparisons on a Windows platform if someone can point out to me the best way to do so. ",
            "author": "Michael Poindexter",
            "id": "comment-13609698"
        },
        {
            "date": "2013-03-21T23:56:26+0000",
            "content": "If this is only gonna help Windows 32 (ancient platform by now?) ... we should limit its visibility somehow I think.\n\nPerhaps you are right.  I implemented this stuff because I am doing some \"interesting\" things with directories, and the inability to delete open files on Windows boxes was causing me some trouble.  I really want to compare this vs. NIOFS on Windows, since I'll probably end up using one of those because as Uwe pointed out mmap'ing files prevents them from being deleted.  \n\nSeems like this might still be useful for anyone on Win 32, or does not want to be reflecting into JRE core code to clean up buffers like MMap directory does (I see why it does it, but I'm still a bit wary of doing something like this in my app...my indexes are fairly small, and search is a small enough part of what my app does that I'm willing to take a reasonable performance hit to avoid it). ",
            "author": "Michael Poindexter",
            "id": "comment-13609714"
        },
        {
            "date": "2013-03-22T21:47:10+0000",
            "content": "Linux, all wikipedia docs (wikimediumall), SimpleFSDir vs AsyncFSDir,\nusing 3 search threads:\n\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n                 Respell       29.43      (0.0%)        5.60      (0.0%)  -81.0% ( -80% -  -80%)\n              AndHighLow      352.00      (0.0%)       68.00      (0.0%)  -80.7% ( -80% -  -80%)\n               LowPhrase       15.94      (0.0%)        3.28      (0.0%)  -79.4% ( -79% -  -79%)\n                  Fuzzy2       40.14      (0.0%)        8.79      (0.0%)  -78.1% ( -78% -  -78%)\n                  Fuzzy1       39.92      (0.0%)        9.65      (0.0%)  -75.8% ( -75% -  -75%)\n         LowSloppyPhrase       19.18      (0.0%)        5.17      (0.0%)  -73.0% ( -73% -  -73%)\n              AndHighMed       62.82      (0.0%)       19.42      (0.0%)  -69.1% ( -69% -  -69%)\n                Wildcard       22.52      (0.0%)        8.09      (0.0%)  -64.1% ( -64% -  -64%)\n              HighPhrase       10.12      (0.0%)        3.72      (0.0%)  -63.2% ( -63% -  -63%)\n             LowSpanNear        8.25      (0.0%)        3.29      (0.0%)  -60.1% ( -60% -  -60%)\n               MedPhrase      115.26      (0.0%)       48.02      (0.0%)  -58.3% ( -58% -  -58%)\n                 MedTerm       74.15      (0.0%)       31.30      (0.0%)  -57.8% ( -57% -  -57%)\n         MedSloppyPhrase       25.16      (0.0%)       11.35      (0.0%)  -54.9% ( -54% -  -54%)\n                HighTerm       60.19      (0.0%)       27.50      (0.0%)  -54.3% ( -54% -  -54%)\n             AndHighHigh       17.72      (0.0%)        8.75      (0.0%)  -50.6% ( -50% -  -50%)\n            HighSpanNear        3.28      (0.0%)        1.69      (0.0%)  -48.3% ( -48% -  -48%)\n        HighSloppyPhrase        0.76      (0.0%)        0.40      (0.0%)  -48.0% ( -48% -  -48%)\n             MedSpanNear       29.04      (0.0%)       15.41      (0.0%)  -46.9% ( -46% -  -46%)\n               OrHighLow       25.70      (0.0%)       13.96      (0.0%)  -45.7% ( -45% -  -45%)\n               OrHighMed       27.11      (0.0%)       14.76      (0.0%)  -45.5% ( -45% -  -45%)\n              OrHighHigh       15.32      (0.0%)        8.37      (0.0%)  -45.4% ( -45% -  -45%)\n                  IntNRQ        3.10      (0.0%)        1.78      (0.0%)  -42.5% ( -42% -  -42%)\n                 Prefix3       17.69      (0.0%)       10.26      (0.0%)  -42.0% ( -42% -  -42%)\n                 LowTerm      334.97      (0.0%)      211.06      (0.0%)  -37.0% ( -36% -  -36%)\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13611309"
        },
        {
            "date": "2013-03-22T22:19:01+0000",
            "content": "Thanks Mike, I almost expected this.\n\nIn my opinion, the whole overhead of this thread management is making it slower 2 times than the slow SimpleFSDir. This will not be different on Windows. So the only working alternative to MMap is SimpleFSDir on windows.\n\nI tend to close this as won't fix. Any other comments? ",
            "author": "Uwe Schindler",
            "id": "comment-13611352"
        },
        {
            "date": "2013-03-22T22:32:19+0000",
            "content": "I really think it would be worth running a test on windows with a larger number of threads (3 seems quite low for something like a web app where there could be a large number of concurrent users).  The implementation on Windows in the JRE is very, very different internally, so I'm not sure I'm quite as sure as you are that this would necessarily be the same.\n\nI'd love to run some tests on windows with different concurrency levels and play around with tweaking the executor service used for this to see if it can have better performance than SimpleFSDirectory/NIOFSDirectory if I had a way to do that.  If you guys think it's not worth it I'll drop it, but I'm willing to put in the effort to get a test setup going and tweak things and report back numbers if there is any interest and someone can point me in the right direction to run a perf test.\n\nIf there is any interest, I'm going out of town for the next week, but I'll check in on this when I get back and look at doing the tests if you guys want.\n\nThanks for the attention on this either way! ",
            "author": "Michael Poindexter",
            "id": "comment-13611369"
        },
        {
            "date": "2013-03-25T17:01:52+0000",
            "content": "I figured out how to run the benchmark utility and ran a few tests on Windows.  Results are not promising.  When I'm back I'll post the complete results here for posterity (I still want to run one or two more tests before then), but I think this issue can probably be closed as won't fix. ",
            "author": "Michael Poindexter",
            "id": "comment-13612846"
        },
        {
            "date": "2013-03-29T17:48:55+0000",
            "content": "The use case of this drectory (Windows, 32 bit) is still slower than SimpleFSDirectory, so there is no reason to use this directory. The overhead caused by the Futures is too big. ",
            "author": "Uwe Schindler",
            "id": "comment-13617553"
        }
    ]
}