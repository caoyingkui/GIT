{
    "id": "SOLR-3335",
    "title": "testDistribSearch failure",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Happened on my test machine. Is there a way to disable these tests if we cannot fix them? There are two three tests that fail most of the time and that apparently nobody knows how to fix (including me).\n\nThere is also a typo in the error message (I'm away from home for Easter, can't do it now).\n\n\nbuild\t06-Apr-2012 16:11:54\t    [junit] Testsuite: org.apache.solr.cloud.RecoveryZkTest\nbuild\t06-Apr-2012 16:11:54\t    [junit] Testcase: testDistribSearch(org.apache.solr.cloud.RecoveryZkTest):\tFAILED\nbuild\t06-Apr-2012 16:11:54\t    [junit] There are still nodes recoverying\nbuild\t06-Apr-2012 16:11:54\t    [junit] junit.framework.AssertionFailedError: There are still nodes recoverying\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.Assert.fail(Assert.java:93)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.solr.cloud.AbstractDistributedZkTestCase.waitForRecoveriesToFinish(AbstractDistributedZkTestCase.java:132)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.solr.cloud.RecoveryZkTest.doTest(RecoveryZkTest.java:84)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:670)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat java.lang.reflect.Method.invoke(Method.java:597)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:63)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.LuceneTestCase$SubclassSetupTeardownRule$1.evaluate(LuceneTestCase.java:754)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.LuceneTestCase$InternalSetupTeardownRule$1.evaluate(LuceneTestCase.java:670)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:69)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.LuceneTestCase$TestResultInterceptorRule$1.evaluate(LuceneTestCase.java:591)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:75)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.LuceneTestCase$SaveThreadAndTestNameRule$1.evaluate(LuceneTestCase.java:642)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:164)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:57)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:63)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:75)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.StoreClassNameRule$1.evaluate(StoreClassNameRule.java:38)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:69)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:879)\nbuild\t06-Apr-2012 16:11:54\t    [junit] \nbuild\t06-Apr-2012 16:11:54\t    [junit] \nbuild\t06-Apr-2012 16:11:54\t    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 181.377 sec\nbuild\t06-Apr-2012 16:11:54\t    [junit]",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Chris Male",
            "id": "comment-13249047",
            "date": "2012-04-06T23:36:10+0000",
            "content": "+1 to disabling these tests.  They fail often in Jenkins and locally. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13249199",
            "date": "2012-04-07T07:10:28+0000",
            "content": "I'll wait a few days to give people a chance to object. If I hear nothing I will successively disable those tests that fail for me often (without much feedback). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13249263",
            "date": "2012-04-07T13:47:44+0000",
            "content": "I looped this test (RecoveryZkTest) over night on my linux box and it didn't fail until this morning (after ~900 iterations).\nDawid, what does your test machine look like? "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13249279",
            "date": "2012-04-07T15:00:47+0000",
            "content": "I couldn't reproduce it either. My test machine is an ubuntu quad core (I7) and it is running full Lucene builds much like Jenkins. There are a few recurring problems that I couldn't reproduce locally no matter what. This ALSO happens on LUCENE-3808 branch which leads me to believe the problem may stem from interaction between concurrently running JVMs, not the code itself (perhaps they're modifying each other's configs, perhaps something else).\n\nAnything comes to your mind? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13249287",
            "date": "2012-04-07T15:47:39+0000",
            "content": "OK, I'm still on my old ubuntu quad core opteron.\nFWIW I started looping TestDistributedSearch (which has started failing consistently on jenkins) a few hours ago with tests.multiplier=3.  Just 3 hours in (with each run taking ~1min) and no failures yet... "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13249290",
            "date": "2012-04-07T16:00:58+0000",
            "content": "Try looping over full ant test cycles (maybe limited to solr-core only). I did this a while back in a shell loop and redirected output to files. This brought back some failures after 30 iterations or so.\n\nI can also try to see if doing the above with 1 forked jvm is any different than with 3-4 forked jvms \u2013 this would make it clear if it's a concurrent tests conflict or not (and possibly provide a way to reproduce).\n\nThanks for trying to clean this up \u2013 it's been bugging me for a while now.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13249394",
            "date": "2012-04-07T22:40:57+0000",
            "content": "FWIW I started looping TestDistributedSearch (which has started failing consistently on jenkins) a few hours ago with tests.multiplier=3. Just 3 hours in (with each run taking ~1min) and no failures yet...\n\nUpdate: I just got a failure after 642 runs.  A response mismatch here:\n\n    // random value sort\n    for (String f : fieldNames) {\n      query(\"q\",\"*:*\", \"sort\",f+\" desc\");\n\n\n\nThe actual number of documents failed to match... and no other exceptions in the test, so I'm not sure how that can happen.  Anyway, it doesn't appear to be related to the super high failure rate on our freebsd-jenkins, which I am unable to reproduce so far.\n\nedit: I've started looping the full \"ant test\" to see how often it fails on my system. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13249492",
            "date": "2012-04-08T07:28:34+0000",
            "content": "This is weird. I've had something like this before on the branch \u2013 see SOLR-3233. If you go back to that particular revision it was reproducible (but no longer is with that seed). I didn't investigate further. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13250125",
            "date": "2012-04-09T20:09:10+0000",
            "content": "I've been looping the full \"ant test\" for a while... it failed after about 4 hours (30 runs) the first time and the second time hasn't failed yet (over 8 hours). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13250157",
            "date": "2012-04-09T20:38:40+0000",
            "content": "Something weird is going on with the nightly builds (which mostly fail) vs the normal tests (which mostly pass) on jenkins.\n\nAnyway, it seems like we should keep these tests enabled since they do mostly pass with the normal tests and provide critical coverage. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13250177",
            "date": "2012-04-09T20:59:28+0000",
            "content": "\n\tnightly builds seem to fail almost every time\n\ttest only builds seem to pass almost every time\n\n\n\n...are folks remembering to use \"-Dtests.nightly=true\" when trying to reproduce this?\n\nI tried the reproduce line from nightly build #1819 and got the same ConnectException as jenkins three times in a row...\n\n\nhossman@bester:~/lucene/dev/solr$ ant test -Dtestcase=TestDistributedSearch -Dtestmethod=testDistribSearch -Dtests.seed=-64cffe89df6d3a71:-2543436b41d480f3:21aa64ce023d4a8a -Dtests.nightly=true -Dargs=\"-Dfile.encoding=ISO8859-1\"\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13250196",
            "date": "2012-04-09T21:22:16+0000",
            "content": "ignoring the seed, and just trying the test with \"-Dtests.nightly=true\" i've only seen this test pass once (and i might have had a typo in that nightly param \u2013 it was the first time i tried it and i didn't have a shell log).\n\nUnless i'm missing something...\n\n\n\tBaseDistributedSearchTestCase.createServers initializes the following pairwise...\n\t\n\t\tprotected List<JettySolrRunner> jettys\n\t\tprotected List<SolrServer> clients\n\t\n\t\n\tTestDistributedSearch.doTest then...\n\t\n\t\tcopies those lists into local upJettys and upClients instances and maintains a list of \"upShards\"\n\t\titeratively shutsdown some number of jetty instances, removing from upJettys, upShards, and upClients\n\t\tpasses upShards and upClients to queryPartialResults\n\t\n\t\n\tTestDistributedSearch.queryPartialResults ...\n\t\n\t\tdoes some random quering of upShards and upClients\n\t\tif stress is non-zero (which it is if it's nightly) then it also spins up a bunch of threads using a client from the original \"clients\" list\n\t\n\t\n\n\n\n...which seems fundamentally flawed to me ... because each \"client\" knows about a specific jetty instance, and the test has explicitly shut down some jetty instances.\n\nIs this just a typo?  are the refs to \"clients\" in queryPartialResults all just suppose to be \"upClients\" ? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13250205",
            "date": "2012-04-09T21:41:15+0000",
            "content": "if stress is non-zero (which it is if it's nightly)\n\nGack - I don't know when that happened... seems like we should have some degree of \"stress\" (i.e. query from multiple threads) in the tests that run after any changes!\n\nIs this just a typo? are the refs to \"clients\" in queryPartialResults all just suppose to be \"upClients\" ?\n\nshrug... I never reviewed the partial results stuff, but I guess the changes to this test are from this commit?\n\n\nr1294995 | ryan | 2012-02-29 02:32:02 -0500 (Wed, 29 Feb 2012) | 1 line\nSOLR-3134:  Adding test and fix from Russell Black\n\n\n\nThanks for looking into that Hoss! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13250213",
            "date": "2012-04-09T21:53:16+0000",
            "content": "looking at the province of the test method, it comes from SOLR-3134 and seems to be a cut/paste clone/refactoring of the \"query\" method from the base class with the clients/jetties replaced by upclients and upjetties \u2013 but this part was clearly missed.\n\nCommitted revision 1311477. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13250214",
            "date": "2012-04-09T21:54:34+0000",
            "content": "for got to mention: that commit causes hte test to pass reliably for me ~20 times, including all of the reproduce lines from the last 5 failed nightly builds "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13250265",
            "date": "2012-04-09T22:44:41+0000",
            "content": "seems like we should have some degree of \"stress\" \n\nBecause I was not worried about more query side testing, for simplicity, all of those solrcloud tests don't use the stress mode. Those tests are all focused on indexing and then querying simply for correctness - we have solrcloud stress querying in previous tests that where done. When developing the indexing side, it wasn't worth the refactoring to me. Looks like you have done some of needed refactoring later given the refs to upCliens and downClients. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13250518",
            "date": "2012-04-10T08:50:28+0000",
            "content": "@Yonik: I run trunk tests in non-nightly mode and I see at least 1-2 failures a day (runs every two hours). This does change over time though as i merge with new commits. Some tests are frequent offenders though, like the latest one \u2013\n\nbuild\t10-Apr-2012 00:25:25\t    [junit] Testsuite: org.apache.solr.cloud.OverseerTest\nbuild\t10-Apr-2012 00:25:25\t    [junit] Testcase: testShardLeaderChange(org.apache.solr.cloud.OverseerTest):\tFAILED\nbuild\t10-Apr-2012 00:25:25\t    [junit] Unexpected shard leader coll:collection1 shard:shard1 expected:<core4> but was:<null>\nbuild\t10-Apr-2012 00:25:25\t    [junit] junit.framework.AssertionFailedError: Unexpected shard leader coll:collection1 shard:shard1 expected:<core4> but was:<null>\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.Assert.fail(Assert.java:93)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.Assert.failNotEquals(Assert.java:647)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.Assert.assertEquals(Assert.java:128)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.solr.cloud.OverseerTest.verifyShardLeader(OverseerTest.java:549)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.solr.cloud.OverseerTest.testShardLeaderChange(OverseerTest.java:711)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat java.lang.reflect.Method.invoke(Method.java:597)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:63)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.LuceneTestCase$SubclassSetupTeardownRule$1.evaluate(LuceneTestCase.java:754)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.LuceneTestCase$InternalSetupTeardownRule$1.evaluate(LuceneTestCase.java:670)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:69)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.LuceneTestCase$TestResultInterceptorRule$1.evaluate(LuceneTestCase.java:591)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:75)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.LuceneTestCase$SaveThreadAndTestNameRule$1.evaluate(LuceneTestCase.java:642)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:164)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:57)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:63)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:75)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.StoreClassNameRule$1.evaluate(StoreClassNameRule.java:38)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:69)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:879)\nbuild\t10-Apr-2012 00:25:25\t    [junit] \nbuild\t10-Apr-2012 00:25:25\t    [junit] \nbuild\t10-Apr-2012 00:25:25\t    [junit] Tests run: 7, Failures: 1, Errors: 0, Time elapsed: 92.518 sec\n\n "
        }
    ]
}