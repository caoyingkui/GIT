{
    "id": "SOLR-8508",
    "title": "Implement DatabaseMetaDataImpl.getCatalogs()",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "DBVisualizer users DatabaseMetaDataImpl.getCatalogs() to populate information after connecting. It causes the below error and shows up in the connection window.\n\n2016-01-07 13:30:10.848 FINE    83 [ExecutorRunner-pool-2-thread-10 - B.execute] Execute Command: getCatalogs\n2016-01-07 13:30:10.848 FINE    83 [ExecutorRunner-pool-2-thread-10 - O.\uffc4\uff98] getCatalogs() for: abc\n2016-01-07 13:30:10.848 FINE    83 [pool-3-thread-10 - E.\uffc4\uff81] RootConnection: DatabaseMetaDataImpl.getCatalogs()\n2016-01-07 13:30:10.851 FINE    83 [AWT-EventQueue-0 - B.executionFinished] Exception while Connecting\ncom.onseven.dbvis.K.B.P: java.util.concurrent.ExecutionException: java.lang.IllegalArgumentException: model passed to DefaultTableModelWrapper cannot be null\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff81(Z:2680)\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff81(Z:1521)\n\tat com.onseven.dbvis.K.B.L$3.run(Z:3032)\n\tat java.awt.event.InvocationEvent.dispatch(InvocationEvent.java:311)\n\tat java.awt.EventQueue.dispatchEventImpl(EventQueue.java:756)\n\tat java.awt.EventQueue.access$500(EventQueue.java:97)\n\tat java.awt.EventQueue$3.run(EventQueue.java:709)\n\tat java.awt.EventQueue$3.run(EventQueue.java:703)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat java.security.ProtectionDomain$JavaSecurityAccessImpl.doIntersectionPrivilege(ProtectionDomain.java:76)\n\tat java.awt.EventQueue.dispatchEvent(EventQueue.java:726)\n\tat java.awt.EventDispatchThread.pumpOneEventForFilters(EventDispatchThread.java:201)\n\tat java.awt.EventDispatchThread.pumpEventsForFilter(EventDispatchThread.java:116)\n\tat java.awt.EventDispatchThread.pumpEventsForHierarchy(EventDispatchThread.java:105)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:101)\n\tat java.awt.EventDispatchThread.pumpEvents(EventDispatchThread.java:93)\n\tat java.awt.EventDispatchThread.run(EventDispatchThread.java:82)\nCaused by: java.util.concurrent.ExecutionException: java.lang.IllegalArgumentException: model passed to DefaultTableModelWrapper cannot be null\n\tat java.util.concurrent.FutureTask.report(FutureTask.java:122)\n\tat java.util.concurrent.FutureTask.get(FutureTask.java:192)\n\tat javax.swing.SwingWorker.get(SwingWorker.java:602)\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff81(Z:990)\n\t... 16 more\nCaused by: java.lang.IllegalArgumentException: model passed to DefaultTableModelWrapper cannot be null\n\tat com.jidesoft.grid.TableModelWrapperImpl.<init>(Unknown Source)\n\tat com.jidesoft.grid.DefaultTableModelWrapper.<init>(Unknown Source)\n\tat com.jidesoft.grid.FilterableTableModel.<init>(Unknown Source)\n\tat com.jidesoft.grid.FilterableTreeTableModel.<init>(Unknown Source)\n\tat com.onseven.dbvis.K.B._.<init>(Z:1161)\n\tat com.onseven.dbvis.db.AbstractFacade.executeAndGet(Z:975)\n\tat com.onseven.dbvis.db.AbstractFacade.getCatalogNames(Z:621)\n\tat com.onseven.dbvis.db.AbstractFacade.runConnectionSetup(Z:2515)\n\tat com.onseven.dbvis.db.A.I.\uffc4\uffb7(Z:3512)\n\tat com.onseven.dbvis.db.A.B.execute(Z:2933)\n\tat com.onseven.dbvis.K.B.Z.\uffc4\uff81(Z:2285)\n\tat com.onseven.dbvis.K.B.L.\uffc4\uff82(Z:1374)\n\tat com.onseven.dbvis.K.B.L.doInBackground(Z:1521)\n\tat javax.swing.SwingWorker$1.call(SwingWorker.java:295)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat javax.swing.SwingWorker.run(SwingWorker.java:334)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)",
    "attachments": {
        "SOLR-8508.patch": "https://issues.apache.org/jira/secure/attachment/12785262/SOLR-8508.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-07T19:42:34+0000",
            "author": "Kevin Risden",
            "content": "Requires SOLR-8503 to be merged first. ",
            "id": "comment-15087965"
        },
        {
            "date": "2016-01-07T20:11:47+0000",
            "author": "Kevin Risden",
            "content": "Need to figure out best way to return a java.sql.ResultSet since this is used a LOT in the JDBC driver implementation.  ",
            "id": "comment-15088024"
        },
        {
            "date": "2016-01-27T19:52:37+0000",
            "author": "Joel Bernstein",
            "content": "I think the best approach is to subclass StatementImpl and create a statement that sends these types of database meta data requests to the SQLHandler. The SQLHandler can respond with custom Streams that fulfill the request.\n\nI think for the catalog request we can simply return one Tuple with the zkHost address. Eventually there will be a mechanism for mapping zkHosts to names so that we can query across zkHosts like this:\n\nselect a from table@zkJapan\n\nThe schema's will map directly to SolrCloud collections.\n\nAs we dig deeper into this we start to overlap with work that needs to be done for the Calcite optimizer implementation (SOLR-8593).\n\n\n\n\n ",
            "id": "comment-15120068"
        },
        {
            "date": "2016-01-29T16:42:29+0000",
            "author": "Kevin Risden",
            "content": "What makes more sense to me is:\n\nselect a from zkJapan.table;\n\nUse the existing database.table convention. Database = zkHost. Table = collection. ",
            "id": "comment-15123724"
        },
        {
            "date": "2016-01-29T17:01:35+0000",
            "author": "Joel Bernstein",
            "content": "This could work as well. In the early stages it's fairly easy to support table@host because zkHost is a parameter many Streaming classes including CloudSolrStream. So without supporting a name lookup we can support constructs like the one below that already have a dot:\n\nselect a from 'table@123.11.11.3/solr' ",
            "id": "comment-15123765"
        },
        {
            "date": "2016-01-29T17:04:38+0000",
            "author": "Joel Bernstein",
            "content": "But we can push these types of decisions down the road a little. Supporting tables (collections) in the same zkHost is a good start. ",
            "id": "comment-15123776"
        },
        {
            "date": "2016-01-29T22:17:09+0000",
            "author": "Kevin Risden",
            "content": "This patch implements two pieces:\n\n\tfixes issue where getCatalog and getSchema were mixed up before\n\tImplements DatabaseMetaDataImpl.getCatalogs()\n\n\n\nIt uses the existing framework for executingQueries. It relies on a special table name \"CATALOGS\". There might be a better way to do this, but it seemed to be the least intrusive.\n\nThe reason I don't like this approach is that for each type of metadata (Catalogs, Schemas, etc) there will be a new implementation of TupleStream. Maybe thats ok though? ",
            "id": "comment-15124326"
        },
        {
            "date": "2016-01-29T22:29:22+0000",
            "author": "Kevin Risden",
            "content": "Updated patch to improve handling of SolrStream. Moved the SolrStream opening/closing to the ResultSetImpl from StatementImpl. This made it able to close the Statement in getCatalogs instead of leaving it open. ",
            "id": "comment-15124350"
        },
        {
            "date": "2016-01-29T22:40:36+0000",
            "author": "Joel Bernstein",
            "content": "Patch looks good. I like that it uses SQL to get the catalogs. This approach will come in very handy for accessing schemas.\n\nA couple of implementation details:\n\n1) Why move the SolrStream handling to the ResultSet? It seems like the Statement was the right place to do that.\n2) It looks like you've embedded the catalog code into the doSelect() method. Another approach would be to add a doCatalog method and add that to the decision tree that chooses doSelect, doSelectDistinct etc. We can check the SQLVisitor.table variable in the if else. ",
            "id": "comment-15124383"
        },
        {
            "date": "2016-01-29T22:48:34+0000",
            "author": "Kevin Risden",
            "content": "\n1) Why move the SolrStream handling to the ResultSet? It seems like the Statement was the right place to do that.\n\nI thought it was weird that the Statement was closing the SolrStream out from underneath the ResultSet. ResultSet.next() calls SolrStream.read() so it just seemed wrong to have it opened/closed from the Statement instead of in the class that called SolrStream read().\n\n\n2) It looks like you've embedded the catalog code into the doSelect() method. Another approach would be to add a doCatalog method and add that to the decision tree that chooses doSelect, doSelectDistinct etc. We can check the SQLVisitor.table variable in the if else.\n\nSo my thought was here that it was still just a regular select statement. I wasn't sure if there was more in the doSelect that could be useful for getting catalogs. I think it could definitely be moved to doCatalogs just wasn't how I originally went about it. ",
            "id": "comment-15124388"
        },
        {
            "date": "2016-01-29T22:54:02+0000",
            "author": "Kevin Risden",
            "content": "Attached patch with improved error handling and letting the Connection make a statement to be reused by DatabaseMetaDataImpl. ",
            "id": "comment-15124400"
        },
        {
            "date": "2016-01-29T23:33:49+0000",
            "author": "Joel Bernstein",
            "content": "I think we'll need to keep the SolrStream handling in the StatementImpl so that the statement can quietly close the underlying SolrStream when it's reused.\n ",
            "id": "comment-15124436"
        },
        {
            "date": "2016-01-30T14:08:38+0000",
            "author": "Joel Bernstein",
            "content": "Actually the statement still has access to the underlying ResultSet which it can close. I'll review the latest patch with the SolrStream handling moved to the ResultSet. ",
            "id": "comment-15124902"
        },
        {
            "date": "2016-02-01T18:12:59+0000",
            "author": "Kevin Risden",
            "content": "Joel Bernstein - Any more comments on this patch? If this is good I'll get started on SOLR-8510 for getSchemas which should follow a similar approach. ",
            "id": "comment-15126696"
        },
        {
            "date": "2016-02-01T20:00:49+0000",
            "author": "Joel Bernstein",
            "content": "I plan on looking at this later today. I may make a change or two but the approach looks great. ",
            "id": "comment-15126920"
        },
        {
            "date": "2016-02-01T20:47:11+0000",
            "author": "Joel Bernstein",
            "content": "After reviewing the patch I like how you handled the solrStream. Constructing in the StatementImpl and opening/closing in the ResultSetImpl seems clean. I moved the logic in the SQLHandler around so that it was not embedded in the doSelect. I believe thats the only change I'll make.  ",
            "id": "comment-15126998"
        },
        {
            "date": "2016-02-01T20:59:45+0000",
            "author": "Joel Bernstein",
            "content": "Patch with slight changes. Tests pass. Running precommit and will commit shortly. ",
            "id": "comment-15127017"
        },
        {
            "date": "2016-02-01T21:16:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit edf665988d6f7acf95ec49ed16a3afc30ffcb342 in lucene-solr's branch refs/heads/master from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=edf6659 ]\n\nSOLR-8508: Implement DatabaseMetaDataImpl.getCatalogs() ",
            "id": "comment-15127050"
        },
        {
            "date": "2016-02-02T09:53:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit edf665988d6f7acf95ec49ed16a3afc30ffcb342 in lucene-solr's branch refs/heads/master-solr-8621 from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=edf6659 ]\n\nSOLR-8508: Implement DatabaseMetaDataImpl.getCatalogs() ",
            "id": "comment-15127988"
        }
    ]
}