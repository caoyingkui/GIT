{
    "id": "LUCENE-1559",
    "title": "Highlighting not working in some instances even though indexsearcher returns result.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "In some instances highlighting does not return a result.  However when you use a different term for teh same document you get results.\n\nPlease see attach testcase and template file.",
    "attachments": {
        "HighLightingSummaryTest(2).java": "https://issues.apache.org/jira/secure/attachment/12402045/HighLightingSummaryTest%282%29.java",
        "HighLightingSummaryTest.java": "https://issues.apache.org/jira/secure/attachment/12402038/HighLightingSummaryTest.java",
        "HighLightingSummaryTestV3.java": "https://issues.apache.org/jira/secure/attachment/12402075/HighLightingSummaryTestV3.java",
        "fileToSearch.txt": "https://issues.apache.org/jira/secure/attachment/12402074/fileToSearch.txt",
        "AJiA CH 02.doc": "https://issues.apache.org/jira/secure/attachment/12402037/AJiA%20CH%2002.doc"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-03-12T12:28:49+0000",
            "content": "Sorry to be picky but can you submit a self-contained test with no external dependencies other than Lucene+Highlighter+JUnit\n\nI don't want POI versions to be a factor here.\n\nCheers\nMark ",
            "author": "Mark Harwood",
            "id": "comment-12681287"
        },
        {
            "date": "2009-03-12T13:35:44+0000",
            "content": "This problem occurs when using this exact document and other document which is pdf.  I'm not sure the test will be valid if i just use a normal test file.  The version of POI am currently using is :\n\n3.1-Final\npoi-scratchpad-3.1-final\n\nI can try to extract the test with no other libraries but I;'m not sure if it will work.   ",
            "author": "Amin Mohammed-Coleman",
            "id": "comment-12681310"
        },
        {
            "date": "2009-03-12T13:43:04+0000",
            "content": "Updated test case with no external dependencies\n\n HighLightingSummaryTest(2).java ",
            "author": "Amin Mohammed-Coleman",
            "id": "comment-12681315"
        },
        {
            "date": "2009-03-12T13:58:36+0000",
            "content": "Your code still imports POI and is now importing a .DOC file without parsing, producing garbage.\n\nYou'll need to supply an example Junit which illustrates this problem with plain text before we can look at it.\n\nYou should be able to turn the .Doc into text at your end using POI and then supply the file.\n\nAre you sure there isn't a problem with POI failing to parse the file correctly?  ",
            "author": "Mark Harwood",
            "id": "comment-12681323"
        },
        {
            "date": "2009-03-12T14:15:45+0000",
            "content": "Ok.  So it looks like there is an issue when POI extracts the text.  \n\nI don't understand this to be honest.  When indexing obviously I am indexing the word \"document\" and when I perform the search with the term \"document\" I get the correct result.  \n\nIt seems strange that I cannot have the term \"document\" in the file.  This also happens for a pdf file which makes it even more confusing.   ",
            "author": "Amin Mohammed-Coleman",
            "id": "comment-12681329"
        },
        {
            "date": "2009-03-12T14:40:27+0000",
            "content": "Can I close this then as it appears to be an issue with your parser, not Lucene? ",
            "author": "Mark Harwood",
            "id": "comment-12681336"
        },
        {
            "date": "2009-03-12T14:46:00+0000",
            "content": "Yep.  I'm still confused and I don't understand how Lucene indexes the term \"document\" and I can perform the search.  The content of the file is stored in the document compressed (I'm not reparsing the file for highlighting).  The document must be in the Lucene document otherwise I would not be able to find the document from the search. \n\nSorry...I don't know what I should do at this stage (as I mentioned earlier it's also happening to a certain pdf document (unless something is being chooped off during compression).\n ",
            "author": "Amin Mohammed-Coleman",
            "id": "comment-12681339"
        },
        {
            "date": "2009-03-12T14:52:31+0000",
            "content": ">>Sorry...I don't know what I should do at this stage\n\nGive us a Junit example of your problem code when working with plain text (Not PDF, word or .doc) that clearly demonstrates where Lucene fails to index/search or highlight this text correctly. ",
            "author": "Mark Harwood",
            "id": "comment-12681344"
        },
        {
            "date": "2009-03-12T15:00:08+0000",
            "content": "The problems with POI often come from the fact, that POI does not filter the outputted characters and sometimes even generates non Unicode conform char values (>0xd000). E.g. you sometimes have non-breaking-spaces instead of normal spaces or other things. Depending on the Lucene Analyzer you use, there may be problems. E.g., TIKA uses a filter that maps all incorrect characters coming from POI according to aloowed chars in XML (because it generates XHTML from the docs that can be indexed using TikaAnalyzer).\nI think, your problem is invalid plain text content coming from POI. ",
            "author": "Uwe Schindler",
            "id": "comment-12681347"
        },
        {
            "date": "2009-03-12T15:17:26+0000",
            "content": "Seems to make sense.   I am using the StandardAnaylzer when indexing.  I can understand that there maybe an issue with POI, my only concern is how come Lucene managed to index the term \"document\" in the first place?  The term \"document\" is in the content of the word document.  If there was a problem as you mentioned then I would expect that the \"document\" would not be indexed.\n\nI am toying with the idea of using TIKA, however I can't find an example from which I could work from.  I know the new Lucene In Action book uses TIKA, does anyone have some sample code that I could look at?\n\nI presume I should bring this up in the lucene mailing rather than adding to the JIRA.\n\nCheers ",
            "author": "Amin Mohammed-Coleman",
            "id": "comment-12681351"
        },
        {
            "date": "2009-03-12T18:40:57+0000",
            "content": "Updated test case with no external dependencies except for lucene and junit.   ",
            "author": "Amin Mohammed-Coleman",
            "id": "comment-12681436"
        },
        {
            "date": "2009-03-12T20:03:18+0000",
            "content": "I ran a quick test and I dont  think I could see \"document\" in the Token.termText() of any tokens in the TokenStream you provide to the Highlighter.\n\nIt's late and I need to be elsewhere but if you have time to pursue this check the above statement is true.\nIf so, check the body text retrieved from Document.get(\"body\") in the search results  is the same as the String you store at index time (just in case the act of storing/retrieving has altered the text somehow).\n\nWill look into this more later ",
            "author": "Mark Harwood",
            "id": "comment-12681466"
        },
        {
            "date": "2009-03-12T20:11:29+0000",
            "content": "Hi Mark\n\nThanks for looking into this, your help is much appreciated.  I compared the body of the file (value to be indexed) against the doc.get(\"body\") and they are both the same. \n\nassertEquals(bodyToBeStored, bodyText);\n\nAlso\n\ntokenText = text.substring(startOffset, endOffset); line 240 of Highlighter doesn't return \"document\" all i get is \"documentation\"\n\nCheers ",
            "author": "Amin Mohammed-Coleman",
            "id": "comment-12681468"
        },
        {
            "date": "2009-03-12T21:34:37+0000",
            "content": "Ah. Try set this....\n\n\t\thighlighter.setMaxDocCharsToAnalyze(Integer.MAX_VALUE); ",
            "author": "Mark Harwood",
            "id": "comment-12681507"
        },
        {
            "date": "2009-03-12T21:36:39+0000",
            "content": "Working as designed with feature designed to prevent too-costly analysis ",
            "author": "Mark Harwood",
            "id": "comment-12681508"
        },
        {
            "date": "2009-03-12T21:56:26+0000",
            "content": "That did the trick.  Thanks. ",
            "author": "Amin Mohammed-Coleman",
            "id": "comment-12681514"
        }
    ]
}