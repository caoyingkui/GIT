{
    "id": "SOLR-1630",
    "title": "StringIndexOutOfBoundsException in SpellCheckComponent",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "Schema and Analysis",
            "spellchecker"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "For some documents/search strings, the SpellCheckComponent throws StringIndexOutOfBoundsException\nSee: http://www.lucidimagination.com/search/document/3be6555227e031fc/\n\nReplication\n\n\n\tSave attached schema.xml and solrconfig.xml in apache-solr-1.4.0/example/solr/conf\n\tStart Solr\n\tIndex attached bug.xml\n\tQuery http://localhost:8983/solr/select/?q=awehjse-wjkekw\n\n\n\nIt throws a StringIndexOutOfBoundsException\n\n String index out of range: -7\n\njava.lang.StringIndexOutOfBoundsException: String index out of range: -7\n\tat java.lang.AbstractStringBuilder.replace(Unknown Source)\n\tat java.lang.StringBuilder.replace(Unknown Source)\n\tat org.apache.solr.handler.component.SpellCheckComponent.toNamedList(SpellCheckComponent.java:248)\n\tat org.apache.solr.handler.component.SpellCheckComponent.process(SpellCheckComponent.java:143)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:195)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1316)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:338)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:241)",
    "attachments": {
        "bug.xml": "https://issues.apache.org/jira/secure/attachment/12427198/bug.xml",
        "schema.xml": "https://issues.apache.org/jira/secure/attachment/12427199/schema.xml",
        "solrconfig.xml": "https://issues.apache.org/jira/secure/attachment/12427200/solrconfig.xml",
        "spellcheckconfig.xml": "https://issues.apache.org/jira/secure/attachment/12428160/spellcheckconfig.xml",
        "SOLR-1630.patch": "https://issues.apache.org/jira/secure/attachment/12428157/SOLR-1630.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robin Wojciki",
            "id": "comment-12786978",
            "date": "2009-12-07T16:39:35+0000",
            "content": "Solr config and Solr doc for replicating the issue "
        },
        {
            "author": "Guillaume Lebourgeois",
            "id": "comment-12790816",
            "date": "2009-12-15T16:54:35+0000",
            "content": "Hi, it seems I've encountered the same bug. All queries using the - char, or the _ char make solr throw an exception when using the SpellCheckComponent. It is possible to temporary fix it by setting accuracy parameter to 1.0 (which makes the spellcheck pretty useless, but avoid exceptions). "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12791318",
            "date": "2009-12-16T11:05:54+0000",
            "content": "I'm not able to reproduce this issue. I used Robin's document, schema and solrconfig.xml in the form of a unit test and it gives an empty spell check response but no exceptions. "
        },
        {
            "author": "Guillaume Lebourgeois",
            "id": "comment-12791325",
            "date": "2009-12-16T11:12:56+0000",
            "content": "Ok, i'lm gonna try to upload my own config in case it can help. "
        },
        {
            "author": "Guillaume Lebourgeois",
            "id": "comment-12791334",
            "date": "2009-12-16T11:35:56+0000",
            "content": "This file provide a spellcheck configuration and a requesthandler which may raise an exception when making queries\n\n    Example of queries which work fine :\n\n\t?q=test\n\t?q=my+name+is+henry\n\t?q=\u00e9l\u00e9phant\n\n\n\n    Example of queries which throw an exception :\n\n\t?q=sous-marin\n\t?q=sous-marin+russe\n\t?q=sous_marin\n\t?q=\u00e9l\u00e9phant-blanc\n\n\n\n\n   It may be linked to the content of the index, and/or the spellcheck index.\n\nHere is the stack :\n\n\tat java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:797)\n\tat java.lang.StringBuilder.replace(StringBuilder.java:271)\n\tat org.apache.solr.handler.component.SpellCheckComponent.toNamedList(SpellCheckComponent.java:248)\n\tat org.apache.solr.handler.component.SpellCheckComponent.process(SpellCheckComponent.java:143)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:195)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1316)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:338)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:241)\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1089)\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:365)\n\tat org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:181)\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:712)\n\tat org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:405)\n\tat org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:211)\n\tat org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:139)\n\tat org.mortbay.jetty.Server.handle(Server.java:285)\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:502)\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.headerComplete(HttpConnection.java:821)\n\tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:513)\n\tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:208)\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:378)\n\tat org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:226)\n\tat org.mortbay.thread.BoundedThreadPool$PoolThread.run(BoundedThreadPool.java:442) "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12791342",
            "date": "2009-12-16T12:09:40+0000",
            "content": "Thanks Guillaume, can you give me an example document too? "
        },
        {
            "author": "Guillaume Lebourgeois",
            "id": "comment-12791360",
            "date": "2009-12-16T13:25:07+0000",
            "content": "I've been trying to reproduce the bug with a \"one-document index\", but I fail... on the other hand, on index of 500k+ documents this issue is \"automatic\". Maybe it's linked with some kinds of documents ? I don't know, I'm gonna test some other possibilities in case it can help. "
        },
        {
            "author": "Ralf Kraus",
            "id": "comment-12800622",
            "date": "2010-01-15T08:46:55+0000",
            "content": "We have found an hint to the problem:\n\nWe run into into this problem ONLY when the search result includes words with \"-\" in it! \nFor example \"t-bone-steak\".\n\nWhen I search with \"t-bone-steak\" the error occurs every time !\n\nI hope we could help! "
        },
        {
            "author": "Jay Hill",
            "id": "comment-12802630",
            "date": "2010-01-20T02:44:34+0000",
            "content": "I have seen another case of a production system hitting this exact same exception. However I'm unable to reproduce it outside of production. However it is occurring on all queries with hyphenated words. For a search on: ochoa-brillembourg\n\nSEVERE: java.lang.StringIndexOutOfBoundsException: String index out of range: -14\n        at java.lang.AbstractStringBuilder.replace(AbstractStringBuilder.java:797)\n        at java.lang.StringBuilder.replace(StringBuilder.java:271)\n        at org.apache.solr.handler.component.SpellCheckComponent.toNamedList(SpellCheckComponent.java:248)\n        at org.apache.solr.handler.component.SpellCheckComponent.process(SpellCheckComponent.java:143)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:195)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1316)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:338)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:241)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:128)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:293)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:849)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:583)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:454)\n        at java.lang.Thread.run(Thread.java:619) "
        },
        {
            "author": "Graham P",
            "id": "comment-12858474",
            "date": "2010-04-19T12:39:02+0000",
            "content": "We get the same StringIndexOutOfBoundsException with hyphenated query strings, on production and development - Solr 1.4.0 on CentOS 5.4 x86_64 using 32-bit Java 1.6.0_12 "
        },
        {
            "author": "Khaled Hammouda",
            "id": "comment-12874765",
            "date": "2010-06-02T19:55:22+0000",
            "content": "We just hit this bug as well. To reproduce, you must index a document that contains a hyphen (or underscore) and then search with a misspelled version of the indexed text; e.g.\n\ndocument contains: mid-term\nquery: mis-term\nresult: exception thrown\n\nI looked at the code of where this is happening and it seems to be related to token offsets (of the tokenized query) in conjunction with a feature of the spellcheck component called collation. Basically collation tries to replace the original query with the top suggested words. It relies on the tokenizer to remove the original misspelled words and insert the suggested ones (using StringBuilder.replace). Unfortunately the token offsets look weird for words with hyphens (or underscore); for example:\n\nquery: abc_def\n1st token: value = abc; startOffset = 0; endOffset = 7\n2nd token: value = def; startOffset = 0; endOffset = 7\n\nBecause the two tokens occupy the same range (0-7) this messes up the replacement logic. I'm not sure if this tokenizer behavior is the correct one, but it's part of the problem.\n\nHaving said that, I tried to change the spellcheck tokenizer from standard to whitespace and this actually solved the problem; no errors and I get correct suggestions.\n\nSo, until this gets fixed you can either:\n\n1) Disable spellchecker collation, or\n2) Use a whitespace tokenizer for the spellchecker component "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12895001",
            "date": "2010-08-03T19:39:45+0000",
            "content": "attached is a patch with a testcase for the issue (and maybe a fix/workaround, though it still doesnt seem really right to me and i dont completely understand what this spellcheck collate should do)\n\nI was able to trigger it easily by using synonymfilter + wdf at querytime, which i know will muck with the offsets. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12900687",
            "date": "2010-08-20T13:24:27+0000",
            "content": "I'm fine w/ the fix, but it should be noted that we say in http://wiki.apache.org/solr/SpellCheckingAnalysis, which is linked from the http://wiki.apache.org/solr/SpellCheckComponent#Spell_Checking_Analysis page that the analysis used for spelling should be dead simple, even stemming is not recommended. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12900694",
            "date": "2010-08-20T14:01:42+0000",
            "content": "Trunk: Committed revision 987509.\n\n3.x: Committed revision 987511. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12900704",
            "date": "2010-08-20T14:24:15+0000",
            "content": "\nI'm fine w/ the fix, but it should be noted that we say in http://wiki.apache.org/solr/SpellCheckingAnalysis, which is linked from the http://wiki.apache.org/solr/SpellCheckComponent#Spell_Checking_Analysis page that the analysis used for spelling should be dead simple, even stemming is not recommended.\n\nThanks Grant, that was the gist of my concern with the fix. It didn't seem obvious to me what the \"correct\" behavior of collation should be with this sort of analysis, but this answers my question. \n\nAt least we have the \"defensive\" measure in case someone configures it like this, thinks its working for the most part, but then a user enters a hyphen. "
        }
    ]
}