{
    "id": "LUCENE-3332",
    "title": "FastVectorHighlighter ignores MultiPhraseQuery (and more)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/highlighter"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.3,                                            4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Similar to LUCENE-495.\n\nCreate a MultiPhraseQuery, use FastVectorHighlighter, you'll have no fragment.\nUsing PhraseQuery and/or Highlighter works, but not the previous combination.",
    "attachments": {
        "UsingCombinationAndFallback.patch": "https://issues.apache.org/jira/secure/attachment/12487440/UsingCombinationAndFallback.patch",
        "TestMultiPhraseQueryHighlighting.java": "https://issues.apache.org/jira/secure/attachment/12487438/TestMultiPhraseQueryHighlighting.java",
        "UsingFallback.patch": "https://issues.apache.org/jira/secure/attachment/12487439/UsingFallback.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-22T14:04:48+0000",
            "content": "A code for testing the 2 highlighters with different queries. ",
            "author": "Olivier Favre",
            "id": "comment-13069556"
        },
        {
            "date": "2011-07-22T14:12:22+0000",
            "content": "Implementing a simple fallback creating TermQuerys for each Term gotten via Query.extractTerms().\nThis gives basic highlighter for any type of query, though some may throw an UnsupportedOperationException. ",
            "author": "Olivier Favre",
            "id": "comment-13069559"
        },
        {
            "date": "2011-07-22T14:14:32+0000",
            "content": "Flattens a MultiPhraseQuery into multiple PhraseQuerys by generating all the term combinations (can be costly).\n\nAnd\n\nImplementing a simple fallback creating TermQuerys for each Term gotten via Query.extractTerms().\nThis gives basic highlighter for any type of query, though some may throw an UnsupportedOperationException. ",
            "author": "Olivier Favre",
            "id": "comment-13069560"
        },
        {
            "date": "2011-07-22T14:34:06+0000",
            "content": "The advantage of the generating multiple PhraseQuerys, is that highlighting outputs a single highlighted fragment, instead of multiple highlighted words, one next to the other.\nI think looking at WeightedSpanTermExtractor's handling of MultiPhraseQuery may help, but considering the job of FieldQuery.expand(), it may need deep modifications.\n\nThe cons of generating the combination is that it generates lots of other PhraseQuerys (bad complexity class), and that they will all be processed by expand() which itself is O(n^2).\nIf each term is doubled in the source MultiTermQuery (say once stemmed, once intact), for a query having 5 words we will end up with n=32 generated PhraseQuerys, thus making 1024 comparison inside expand().\nFortunately, this process can be done only a single time per query, no need to do it all over again for each field or for each doc. ",
            "author": "Olivier Favre",
            "id": "comment-13069565"
        }
    ]
}