{
    "id": "LUCENE-5056",
    "title": "Indexing non-point shapes close to the poles doesn't scale",
    "details": {
        "components": [
            "modules/spatial"
        ],
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.3",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "From: Hal Deadman\nWe are seeing an issue where certain shapes are causing Solr to use up all available heap space when a record with one of those shapes is indexed. We were indexing polygons where we had the points going clockwise instead of counter-clockwise and the shape would be so large that we would run out of memory. We fixed those shapes but we are seeing this circle eat up about 700MB of memory before we get an OutOfMemory error (heap space) with a 1GB JVM heap.\nCircle(3.0 90 d=0.0499542757922153)\nGoogle Earth can't plot that circle either, maybe it is invalid or too close to the north pole due to the latitude of 90, but it would be nice if there was a way for shapes to be validated before they cause an OOM error.\nThe objects (4.5 million) are all GeohashPrefixTree$GhCell objects in an ArrayList owned by PrefixTreeStrategy$CellTokenStream.\nIs there anyway to have a max number of cells in a shape before it is considered too large and is not indexed? Is there a geo library that could validate the shape as being reasonably sized and bounded before it is processed?\nWe are currently using Solr 4.1.\n<fieldType name=\"location_rpt\" class=\"solr.SpatialRecursivePrefixTreeFieldType\"\nspatialContextFactory=\"com.spatial4j.core.context.jts.JtsSpatialContextFactory\"\ngeo=\"true\" distErrPct=\"0.025\" maxDistErr=\"0.000009\" units=\"degrees\" />",
    "attachments": {
        "indexed circle close to the pole.png": "https://issues.apache.org/jira/secure/attachment/12587729/indexed%20circle%20close%20to%20the%20pole.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-06-13T23:35:11+0000",
            "content": "The attached pic shows the circle of the same size (some ~5km radius) at 88 degrees latitude.  It generated a whopping 7888 cells; and it gets worse closer to the pole.  Technically this approach works but it clearly doesn't scale at the poles.\n\nI'm gonna have to think about this one for a bit.  I think a fix requires a new SpatialPrefixTree encoding that divides the world differently at the poles.  Solving this is arguably a new requirement for LUCENE-4922. ",
            "author": "David Smiley",
            "id": "comment-13682902"
        },
        {
            "date": "2013-06-14T17:48:01+0000",
            "content": "This might not be the same issue, but we have a small rectangle that uses a really large amount of memory:\n\nPOLYGON((1.025 1.025, 1.025 1.101, 1.101 1.101, 1.101 1.025, 1.025 1.025))\n\nIf we change it just a little we don't get out of memory errors:\n\nPOLYGON((1.025001 1.025, 1.025 1.101, 1.101 1.101, 1.101 1.025, 1.025001 1.025)) ",
            "author": "Hal Deadman",
            "id": "comment-13683596"
        },
        {
            "date": "2013-06-14T17:56:07+0000",
            "content": "The WKT spec says counter-clockwise order for the outer shell, and Spatial4j demands that for rectangles expressed as polygons.  A lot of software (OpenLayers, JTS, PostGIS) doesn't care and lets you do it however you want, even though technically the shape is ambiguous (which part of the ring is the inside vs the outside?).  This is in the FAQ on Solr's wiki.  In the next version of Spatial4j I'll make it support both. ",
            "author": "David Smiley",
            "id": "comment-13683606"
        },
        {
            "date": "2013-11-20T19:42:15+0000",
            "content": "FWIW I'm going to try hard to get a fix in by Lucene 4.7:\nhttps://github.com/spatial4j/spatial4j/issues/52 ",
            "author": "David Smiley",
            "id": "comment-13828029"
        },
        {
            "date": "2014-04-05T14:14:19+0000",
            "content": "I was just thinking about this bug/shortcoming or whatever one might call it.  There's an easy solution to this \u2013 modify the algorithm that determines how many \"levels\" to go down so it's based on a Euclidean computation, not geodesic.  It means that the shape is going to be a lot more \"blocky\" (approximated) than the same same on the equator.  But I feel that doesn't matter, or at least it won't matter soon once RecursivePrefixTree & SerializedDVStrategy get linked up such that indexed non-point shapes will be validated for precision against the actual vector geometry.  Once that happens, it will matter very little how few grid cells represent a shape since you'll always have absolute precision as far as the shape geometry can calculate it. ",
            "author": "David Smiley",
            "id": "comment-13961102"
        },
        {
            "date": "2014-04-16T12:54:34+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970802"
        }
    ]
}