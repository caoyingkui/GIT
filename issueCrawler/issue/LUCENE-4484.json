{
    "id": "LUCENE-4484",
    "title": "NRTCachingDir can't handle large files",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I dug into this OOME, which easily repros for me on rev 1398268:\n\nant test  -Dtestcase=Test4GBStoredFields -Dtests.method=test -Dtests.seed=2D89DD229CD304F5 -Dtests.multiplier=3 -Dtests.nightly=true -Dtests.slow=true -Dtests.linedocsfile=/home/hudson/lucene-data/enwiki.random.lines.txt -Dtests.locale=ru -Dtests.timezone=Asia/Vladivostok -Dtests.file.encoding=UTF-8 -Dtests.verbose=true\n\n\n\nThe problem is the test got NRTCachingDir ... which cannot handle large files because it decides up front (when createOutput is called) whether the file will be in RAMDir vs wrapped dir ... so if that file turns out to be immense (which this test does since stored fields files can grow arbitrarily huge w/o any flush happening) then it takes unbounded RAM.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-15T23:22:18+0000",
            "content": "Can uncache() be changed to return the still-open newly created IndexOutput? this way you could uncache() in writeBytes or wherever you want and it would be seamless... ",
            "author": "Robert Muir",
            "id": "comment-13476565"
        },
        {
            "date": "2012-10-16T11:02:56+0000",
            "content": "Can uncache() be changed to return the still-open newly created IndexOutput?\n\nI think we'd have to wrap the RAMOutputStream .. then we could 1) know when too many bytes have been written, 2) close the wrapped RAMOutputStream and call uncache to move it to disk, 3) fix uncache to not close the IO (return it), 4) cutover the wrapper to the new on-disk IO.  And all of this would have to be done inside a writeByte/s call (from the caller's standpoint) ... it seems hairy.\n\nWe could also just leave it be, ie advertise this limitation.  NRTCachingDir is already hairy enough...  The purpose of this directory is to be used in an NRT setting where you have relatively frequent reopens compared to the indexing rate, and this naturally keeps files plenty small.  It's also particularly unusual to index only stored fields in an NRT setting (what this test is doing).\n\nYet another option would be to somehow have the indexer be able to flush based on size of stored fields / term vectors files ... today of course we completely disregard these from the RAM accounting since we write their bytes directly to disk.  Maybe ... the app could pass the indexer an AtomicInt/Long recording \"bytes held elsewhere in RAM\", and indexer would add that in its logic for when to trigger a flush... ",
            "author": "Michael McCandless",
            "id": "comment-13476908"
        },
        {
            "date": "2012-10-16T12:47:21+0000",
            "content": "\n... it seems hairy.\n\nWe could also just leave it be, ie advertise this limitation. NRTCachingDir is already hairy enough... The purpose of this directory is to be used in an NRT setting where you have relatively frequent reopens compared to the indexing rate, and this naturally keeps files plenty small.\n\nThis seems fine to me. I think lets just do javadocs?\n\nBecause in general there are lots of other combinations of stupid parameters that can cause OOM/Out of Open Files/etc and we can't prevent all of them. ",
            "author": "Robert Muir",
            "id": "comment-13476964"
        },
        {
            "date": "2012-10-16T13:02:24+0000",
            "content": "Doesn't seem like a great answer to me - if you want to use NRTCachingDir, please make sure you are constantly indexing and reopening so that you don't run into problems...that sounds hairy as well... ",
            "author": "Mark Miller",
            "id": "comment-13476969"
        },
        {
            "date": "2012-10-16T13:07:12+0000",
            "content": "The test in question is extreme in that it doesnt actually index anything, its just adding stored fields.\n ",
            "author": "Robert Muir",
            "id": "comment-13476973"
        },
        {
            "date": "2012-10-16T13:13:30+0000",
            "content": "Yeah, I know - its a special case of stored fields and term vectors - but it would still be great if it was a special case you didn't have to worry about.\n\nIt's not the end of the world - if someone has problems we can tell them to stop using NRTCachingDir - but it would also be great if it just worked well in that case too.\n\n(Solr defaults to NRTCachingDir) ",
            "author": "Mark Miller",
            "id": "comment-13476977"
        },
        {
            "date": "2012-10-16T13:23:04+0000",
            "content": "I know it does: I think a much safer general solution to keep e.g. file counts low would be to just match the lucene defaults:\nFSDirectory.open and CFS enabled.\n\nI tend to agree with Mike on \"NRTCachingDirectory can really be especially for the NRT use case\"\nbecause otherwise I think its going to be ugly to make it work well for all use-cases... and \neven then not OOM'ing doesnt necessarily mean working well. If its always overflowing its cache\nand having to uncache files because its not really an NRT use case that doesn't seem great.\n\nBut i don't disagree with trying to make it more general either, I do just think that this should be done in NRTCachingDir\nitself and not hacked into indexwriter (flushing when stored files get too large is illogical outside of hacking around this) ",
            "author": "Robert Muir",
            "id": "comment-13476981"
        },
        {
            "date": "2012-10-16T13:32:30+0000",
            "content": "\nAnd all of this would have to be done inside a writeByte/s call (from the caller's standpoint)\n\nIn trunk at least this could be done in switchBuffer or whatever instead. Not that it makes\nit cleaner, just less ugly. ",
            "author": "Robert Muir",
            "id": "comment-13476989"
        },
        {
            "date": "2012-10-16T22:54:52+0000",
            "content": "(Solr defaults to NRTCachingDir)\n\nMaybe it shouldn't?\n\nOr ... does it also default to NRT searching, like ElasticSearch (I think), i.e. frequently opening a new searcher?  In which case it's a good default I think... ",
            "author": "Michael McCandless",
            "id": "comment-13477434"
        },
        {
            "date": "2012-10-17T02:03:02+0000",
            "content": "Right, we have changed the defaults to favor NRT.\n\nYou can always say to switch that if someone runs into a problem, but of course it would be nicer if NRTCachingDir was more versatile and could deal well with term vectors / stored fields.\n\nI agree it's more of a niche situation (it's not likely a common problem), but it would be my preference. ",
            "author": "Mark Miller",
            "id": "comment-13477536"
        }
    ]
}