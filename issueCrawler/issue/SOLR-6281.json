{
    "id": "SOLR-6281",
    "title": "PostingsSolrHighlighter should be more configurable",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ],
        "components": [
            "highlighter"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The DefaultSolrHighlighter (works on non-FVH and FVH modes) and PostingsSolrHighlighter are quite different, although they do share some highlighting parameters where it's directly applicable.  DSH has its fragListBuilder, fragmentsBuilder, boundaryScanner, configurable by letting you defined your own class in solrconfig.xml.  PSH does not; it uses the Lucene default implementations of DefaultPassageFormatter, PassageScorer, and Java BreakIterator, though it configures each of them based on options. I have a case where I need to provide a custom PassageFormatter, for example.",
    "attachments": {
        "SOLR-6281_PostingsSolrHighlighter_more_configurable.patch": "https://issues.apache.org/jira/secure/attachment/12658249/SOLR-6281_PostingsSolrHighlighter_more_configurable.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-14074478",
            "date": "2014-07-25T15:33:38+0000",
            "content": "A simple good-enough solution is to make the inner class extending PostingsHighlighter delegate out to protected methods on PSH for getting & initializing  the PassageFormatter and a few other things.  Then I could extend PostingsSolrHighlighter to override the method.\n\nFollowing from that step, the components could have their classes declared in solrconfig.xml.  But that would probably mean a new SolrPassageFormatter class.  I'm not sure if I want to bother going that far down the configurability road right now. \n\nAs an aside... it's a shame that these different highlighters don't share more abstractions and terminology that seem orthogonal.  That is, a \"Passage\" is conceptually the same as \"Fragment\".  I appreciate that different highlighters work differently and thus have somewhat different data associated with them. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14076871",
            "date": "2014-07-28T21:08:31+0000",
            "content": "In the attached patch, I made the anonymous inner class non-anonymous \"SolrExtendedPostingsHighlighter\" (so that it can be extended) and instantiated via a new method getHighlighter(req) that can be overridden.  And I made a minor refactoring to reduce indentation levels, plus added a TODO as I observed this highlighter does not use the logic in DefaultSolrHighlighter.alternateField().\n\nI'll commit this in a couple days. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14079458",
            "date": "2014-07-30T16:27:25+0000",
            "content": "Commit 1614702 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1614702 ]\n\nSOLR-6281: Made PostingsSolrHighlighter more configurable "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14079462",
            "date": "2014-07-30T16:30:10+0000",
            "content": "Commit 1614704 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1614704 ]\n\nSOLR-6281: Made PostingsSolrHighlighter more configurable "
        }
    ]
}