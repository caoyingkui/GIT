{
    "id": "SOLR-12172",
    "title": "Race condition in collection properties can cause invalid cache of properties",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "Tests"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "From: https://builds.apache.org/job/Lucene-Solr-BadApples-Tests-master/24\n\njava.lang.AssertionError: Could not see value change after setting collection property. Name: property2, current value: value2, expected value: newValue\n\tat __randomizedtesting.SeedInfo.seed([1BCE6473A2A5E68A:FD89A9BD30939A79]:0)\n\tat org.junit.Assert.fail(Assert.java:93)\n\tat org.apache.solr.cloud.CollectionPropsTest.waitForValue(CollectionPropsTest.java:146)\n\tat org.apache.solr.cloud.CollectionPropsTest.testReadWriteCached(CollectionPropsTest.java:115)",
    "attachments": {
        "SOLR-12172.patch": "https://issues.apache.org/jira/secure/attachment/12917076/SOLR-12172.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-30T22:44:37+0000",
            "content": "I can reproduce this by adding a sleep in ZkStateReader.fetchCollectionProperties(...) like:\n\nprivate Map<String, String> fetchCollectionProperties(String collection, Watcher watcher) throws KeeperException, InterruptedException {\n    final String znodePath = getCollectionPropsPath(collection);\n    while (true) {\n      try {\n        Stat stat = new Stat();\n        byte[] data = zkClient.getData(znodePath, watcher, stat, true);\n        Thread.sleep((int)(Math.random()*100));\n        return (Map<String, String>) Utils.fromJSON(data);\n      } catch (ClassCastException e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Unable to parse collection properties for collection \" + collection, e);\n      } catch (KeeperException.NoNodeException e) {\n        if (watcher != null) {\n          // Leave an exists watch in place in case a collectionprops.json is created later.\n          Stat exists = zkClient.exists(znodePath, watcher, true);\n          if (exists != null) {\n            // Rare race condition, we tried to fetch the data and couldn't find it, then we found it exists.\n            // Loop and try again.\n            continue;\n          }\n        }\n        return Collections.emptyMap();\n      }\n    }\n  }\n\n ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16421032"
        },
        {
            "date": "2018-03-31T00:32:38+0000",
            "content": "Attached a possible fix ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16421103"
        },
        {
            "date": "2018-04-02T22:56:34+0000",
            "content": "Commit 2c1f110b6bf0053cfa50608a70454d9102744511 in lucene-solr's branch refs/heads/master from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2c1f110 ]\n\nSOLR-12172: Fixed race condition in collection properties ",
            "author": "ASF subversion and git services",
            "id": "comment-16423257"
        },
        {
            "date": "2018-04-02T22:57:08+0000",
            "content": "Commit ca7d72a0700e7fe37cfc8b47c448cc2ff4b103e1 in lucene-solr's branch refs/heads/branch_7x from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ca7d72a ]\n\nSOLR-12172: Fixed race condition in collection properties ",
            "author": "ASF subversion and git services",
            "id": "comment-16423260"
        },
        {
            "date": "2018-04-03T05:38:21+0000",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe \u2013 I don't think we should introduce another thread(pool) just for this feature. We can use a method similar to updateWatchedCollection which checks if the new znode version is greater than the old one. This ensures that we replace the old collection props only if the new one is actually newer. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16423500"
        },
        {
            "date": "2018-04-03T22:17:05+0000",
            "content": "Thanks for the review Shalin Shekhar Mangar. I thought about doing something like that, but decided not to since it requires to keep something like a map with collection -> version and handling it made the code more complex. I'll put up a patch, maybe it's still better to go that route anyway ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16424689"
        },
        {
            "date": "2018-04-03T23:59:13+0000",
            "content": "Shalin Shekhar Mangar, just by keeping the synchronization I added to refreshAndWatch in the previous commit we can guarantee that we won't be setting the collection property map to an older value, however, I don't think we can guarantee that the notifications to watchers won't be out of order without using the single thread executor. Are you suggesting that we go that way anyway? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16424785"
        },
        {
            "date": "2018-04-11T20:58:40+0000",
            "content": "Shalin, I created SOLR-12213 to continue the discussion there. I'll resolve this one since the test bug is fixed ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16434567"
        }
    ]
}