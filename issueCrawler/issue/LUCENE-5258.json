{
    "id": "LUCENE-5258",
    "title": "add distance function to expressions/",
    "details": {
        "components": [
            "modules/other"
        ],
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "New Feature",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Adding this static function makes it really easy to incorporate distance with the score or other signals in arbitrary ways, e.g. score / (1 + log(distance)) or whatever.",
    "attachments": {
        "LUCENE-5258.patch": "https://issues.apache.org/jira/secure/attachment/12606528/LUCENE-5258.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-10-06T20:47:34+0000",
            "content": "Commit 1529679 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1529679 ]\n\nLUCENE-5258: add distance function to expressions/ ",
            "author": "ASF subversion and git services",
            "id": "comment-13787768"
        },
        {
            "date": "2013-10-06T20:55:29+0000",
            "content": "Commit 1529685 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1529685 ]\n\nLUCENE-5258: add distance function to expressions/ ",
            "author": "ASF subversion and git services",
            "id": "comment-13787771"
        },
        {
            "date": "2013-10-07T00:10:44+0000",
            "content": "Really cool Rob!  It wasn't obvious in the issue description but after looking at your patch, I see that you bring in here some other open-source implementations of cosine and sine that are not quite as accurate but run much faster.  I might find a way to use these routines in Lucene-Spatial / Spatial4j. ",
            "author": "David Smiley",
            "id": "comment-13787832"
        },
        {
            "date": "2013-10-08T05:56:18+0000",
            "content": "I know that it is all fashionable to dis on the Java cos and sin functions, but really... this code can never generate an angle greater than pi and yet it uses code that falls through to standard cos for anything smaller than MAX_INT * 1e9.  \n\nDid you test to see if this actually helps with the speed? ",
            "author": "Ted Dunning",
            "id": "comment-13788941"
        },
        {
            "date": "2013-10-08T05:58:13+0000",
            "content": "Also, isn't the dot product formulation for distance faster and simpler in the first place?  I thought that the point of the spherical geometry formulations was that they allowed direct use of log trig tables in the bad old days of sextants and paper tables. ",
            "author": "Ted Dunning",
            "id": "comment-13788942"
        },
        {
            "date": "2013-10-08T06:07:21+0000",
            "content": "\nI know that it is all fashionable to dis on the Java cos and sin functions, but really... this code can never generate an angle greater than pi and yet it uses code that falls through to standard cos for anything smaller than MAX_INT * 1e9. \n\nHi Ted: I think you are looking at the logic backwards? it only falls thru for large values.\n\n\nDid you test to see if this actually helps with the speed?\n\nOf course: using thousands of queries. ",
            "author": "Robert Muir",
            "id": "comment-13788945"
        },
        {
            "date": "2013-10-08T06:12:23+0000",
            "content": "\nHi Ted: I think you are looking at the logic backwards? it only falls thru for large values.\nOops.  You are right.  I read it backwards.  It is early in the morning here. (or something)\n\n\n ",
            "author": "Ted Dunning",
            "id": "comment-13788951"
        },
        {
            "date": "2013-10-08T06:28:03+0000",
            "content": "\nAlso, isn't the dot product formulation for distance faster and simpler in the first place? I thought that the point of the spherical geometry formulations was that they allowed direct use of log trig tables in the bad old days of sextants and paper tables.\n\nHmm at least with the naive formulation, its no faster at all? acos vs asin or whatever to solve for distance? Unless you have a trick?  ",
            "author": "Robert Muir",
            "id": "comment-13788964"
        },
        {
            "date": "2013-10-08T07:20:09+0000",
            "content": "So I whipped up a quick test and find that the dot product form seems a bit slower.\n\nI also tested with Math.cos and Math.asin and find that haversin runs almost twice faster if you avoid the fancy \"fast\" math stuff (at least on my laptop).  The actual times are about 1.6 microseconds versus about .85 microseconds.  Your mileage will vary on micro-benchmarks, of course. ",
            "author": "Ted Dunning",
            "id": "comment-13789005"
        },
        {
            "date": "2013-10-08T07:50:51+0000",
            "content": "Can you share the code to your microbenchmark? I didnt write any microbenchmarks: I just use search queries, I definitely see the opposite. ",
            "author": "Robert Muir",
            "id": "comment-13789021"
        },
        {
            "date": "2013-10-08T08:43:49+0000",
            "content": "I also tested with Math.cos and Math.asin and find that haversin runs almost twice faster if you avoid the fancy \"fast\" math stuff (at least on my laptop). The actual times are about 1.6 microseconds versus about .85 microseconds. Your mileage will vary on micro-benchmarks, of course.\n\nLaptop with smaller CPU cache? ",
            "author": "Uwe Schindler",
            "id": "comment-13789046"
        },
        {
            "date": "2013-10-08T09:12:14+0000",
            "content": "All is possible.\n\nI build up a more principled test using caliper and now see the Fast.* methods coming in about 30% faster.  Dot method is slower.\n\nBenchmark results at https://microbenchmarks.appspot.com/runs/b79313c0-bbc0-45bf-9f96-8ae5ff0bac77\n\nCode for the benchmark is at https://gist.github.com/tdunning/6881908\n\n ",
            "author": "Ted Dunning",
            "id": "comment-13789057"
        },
        {
            "date": "2013-10-08T09:28:31+0000",
            "content": "It occurs to me that you don't need the final inverse trig function if you only want to rank distances.\n\nSo if you want speed, peel that baby off.  Results for comparison at https://microbenchmarks.appspot.com/runs/43b5e3b9-5d1b-4a6c-9aaf-d4834c82523d ",
            "author": "Ted Dunning",
            "id": "comment-13789061"
        },
        {
            "date": "2013-10-08T16:42:55+0000",
            "content": "\nI build up a more principled test using caliper and now see the Fast.* methods coming in about 30% faster. Dot method is slower.\n\nHi Ted: thank you for spending the time to do the caliper benchmarks!\n\n\nIt occurs to me that you don't need the final inverse trig function if you only want to rank distances.\n\nI absolutely agree. I do think its handy to get the real distance back in the TopFieldDocs from this function, and I think honestly this function is often way-overkill especially if you combine with many other scoring factors?\n\nI know Uwe has some stuff here like optimized flat-earth formulas, I hope he adds it in the future. ",
            "author": "Robert Muir",
            "id": "comment-13789369"
        },
        {
            "date": "2013-10-08T16:54:36+0000",
            "content": "\nI absolutely agree. I do think its handy to get the real distance back in the TopFieldDocs from this function, and I think honestly this function is often way-overkill especially if you combine with many other scoring factors?\n\nWell, since sin(epsilon) = epsilon, losing the asin doesn't actually hurt the accuracy much at the scale of hundreds of kilometers.  At the scale of thousands of km, what you get is the distance straight through the earth.  That is OK in lots of cases, especially where you are sorting results by distance.\n\nCombining distance with other scores doesn't ever make much sense unless you are using distance as a boolean cutoff.  In that case, it makes sense to add a cutoff argument to the distance function and apply the sin to the cutoff instead of applying asin to every distance. ",
            "author": "Ted Dunning",
            "id": "comment-13789382"
        },
        {
            "date": "2013-10-08T17:08:20+0000",
            "content": "I'll buy it (or rather, let Uwe argue it, since i know he combines distance with score), but within the context of this functionality its not so trivial to integrate such cutoff optimizations: as the JIRA here is not to make this accessible via java code but instead from the context of an arbitrary javascript-like expression? ",
            "author": "Robert Muir",
            "id": "comment-13789399"
        },
        {
            "date": "2013-10-08T17:18:12+0000",
            "content": "One possible way is if we change our function list from Map<String,Method> to Map<String,Method[]> so that you can have overloaded functions? This would allow us to allow this function to have an \"optional\" argument with a cutoff as Ted suggests... ",
            "author": "Robert Muir",
            "id": "comment-13789408"
        },
        {
            "date": "2013-10-08T17:50:47+0000",
            "content": "\nA new name suffices as well.  For instance: closerThan(double)\n\nSent from my iPhone\n\n ",
            "author": "Ted Dunning",
            "id": "comment-13789438"
        },
        {
            "date": "2013-10-08T18:12:21+0000",
            "content": "I think that can work. Maybe we can specialize compareBottom() in some way to use it, so that necessary work is only done when the hit stands a chance of being competitive to the top-N... ",
            "author": "Robert Muir",
            "id": "comment-13789465"
        },
        {
            "date": "2013-10-08T19:08:14+0000",
            "content": "I Robert, hi Ted,\nif I have some time later, I will post another \"sloppy\" distance function, which is still almost correct (also near the poles) and works very good for distances up to 500 km: \"Polar coordinate flat-Earth formula\" (see http://en.wikipedia.org/wiki/Geographical_distance#Polar_coordinate_flat-Earth_formula)\n\nThis one only needs one cosinus and a square root, which can be the table lookup and the native sqrt() processor instruction.\n\nThis formula is perfect for scoring. If you score and just multiply someting like 1/distance or 1/ln(distance) to your score, the precision is not really important. We use the above formula for that. By that it is possible to find all places around some coordinate, but still have better matching (similarity wise) results score higher, although they are far more away and vice versa (my favourite example: if user searches for \"vegetarian pizza\", a pizzaria with the name \"veggi pizza place\" should score higher than \"meat pizza place\", although more far away). As our scoring factors are floats and the norms are just 8 bit floats, the distance can be very simplified. In our case, we just needed a good distance also near the poles, so the polar coordinate flat earth formula is perfect (and still very correct, also near poles).\n\nIn addition, if you multiply the score like score/ln(distance), you can remove the sqrt from the formula, too, because ln() makes just a factor out of it! This is perfect for similarity matches combined with distance. ",
            "author": "Uwe Schindler",
            "id": "comment-13789559"
        },
        {
            "date": "2013-11-21T06:29:19+0000",
            "content": "Hi Robert,\n\nthis is a great patch!!\nMaybe it's possible to set the scale value (TO_KILOMETERS) of the haversin function via argument, so it can also be used with units different from kilometers? ",
            "author": "Florian Schilling",
            "id": "comment-13828532"
        }
    ]
}