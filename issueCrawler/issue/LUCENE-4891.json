{
    "id": "LUCENE-4891",
    "title": "Only a part of CategoryPath is recorded if I add \"me\" category.",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [],
        "affect_versions": "4.2",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "If I add type/CHAT, me, network/hanirc/chan/#sdgsdgsd as \"categories\" to a document and add the document to a writer as below, Only \"network/hanirc/chan\", not \"network/hanirc/chan/#sdgsdgsd \"is\" recorded into a taxonomy directory. type/CHAT and me are recorded well. I confirmed it with a test.\n\nFacetFields ff = new FacetFields(taxoWriter);\nff.addFields(doc, categories);\nnrtWriter.addDocument(doc);\n\nIf I add type/CHAT, network/hanirc/chan/#sdgsdgsd to a document, everything is recorded fine.\n\nWhat's wrong with \"me\" category?\n\nYou could clone git://snowberry.me/ZeroIrcLog.git and read the code if you want.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-28T05:34:21+0000",
            "content": "I cannot reproduce it. I wrote this code:\n\n\nDirectory indexDir = new RAMDirectory(), taxoDir = new RAMDirectory();\nIndexWriter iw = new IndexWriter(indexDir, new IndexWriterConfig(Version.LUCENE_50, null));\nDirectoryTaxonomyWriter tw = new DirectoryTaxonomyWriter(taxoDir);\nFacetFields ff = new FacetFields(tw);\nDocument doc = new Document();\nff.addFields(doc, Arrays.asList(new CategoryPath(\"type/CHAT\", '/'), new CategoryPath(\"me\"), new CategoryPath(\"network/hanirc/chan/#sdgsdgsd\", '/')));\niw.addDocument(doc);\niw.close();\ntw.close();\n\nDirectoryReader ir = DirectoryReader.open(indexDir);\nTaxonomyReader tr = new DirectoryTaxonomyReader(taxoDir);\n\n// print the categories encoded for the document\nCategoryListIterator cli = new CategoryListParams().createCategoryListIterator(0);\ncli.setNextReader(ir.leaves().get(0));\nIntsRef ints = new IntsRef();\ncli.getOrdinals(0, ints);\nfor (int i = 0; i < ints.length; i++) {\n  System.out.println(ints.ints[i] + \"=\" + tr.getPath(ints.ints[i]));\n}\n\nIndexSearcher searcher = new IndexSearcher(ir);\nCountFacetRequest me = new CountFacetRequest(new CategoryPath(\"me\"), 10);\nCountFacetRequest network = new CountFacetRequest(new CategoryPath(\"network\", \"hanirc\", \"chan\"), 10);\nCountFacetRequest type = new CountFacetRequest(new CategoryPath(\"type\"), 10);\nFacetSearchParams fsp = new FacetSearchParams(me, network, type);\nFacetsCollector fc = FacetsCollector.create(fsp, ir, tr);\nsearcher.search(new MatchAllDocsQuery(), fc);\nSystem.out.println(fc.getFacetResults());\n\nir.close();\ntr.close();\n\n\n\nAnd it prints category ordinals:\n\n\n2=type/CHAT\n3=me\n5=network/hanirc\n6=network/hanirc/chan\n7=network/hanirc/chan/#sdgsdgsd\n\n\n\nAnd result:\n\n\n[Request: me nRes=10 nLbl=10\nNum valid Descendants (up to specified depth): 0\n\tme (1.0), Request: network/hanirc/chan nRes=10 nLbl=10\nNum valid Descendants (up to specified depth): 1\n\tnetwork/hanirc/chan (1.0)\n\t\t  network/hanirc/chan/#sdgsdgsd (1.0), Request: type nRes=10 nLbl=10\nNum valid Descendants (up to specified depth): 1\n\ttype (0.0)\n\t\t  type/CHAT (1.0)]\n\n\n\nAs you can see, #sdgsdgsd returns a count of 1.0.\n\nI ran the code with and without the fix applied to LUCENE-4882 and it ran fine. Can you please review the code snippet and fix it so that it fails? It's best if you can attach a .patch file, with a (unit) test that fails. ",
            "author": "Shai Erera",
            "id": "comment-13616071"
        },
        {
            "date": "2013-03-28T05:45:42+0000",
            "content": "Update, I ran the test without the fix applied to LUCENE-4882 and reordered the categories that are indexed so that 'me' comes last and indeed there's a missing category network/hanirc. So I guess it is related to that fix, and perhaps you index the categories in different order, although I'm seeing a different category missing. Can you try to run with that fix? ",
            "author": "Shai Erera",
            "id": "comment-13616081"
        },
        {
            "date": "2013-03-28T21:05:15+0000",
            "content": "I made a test with LUCENE-4882.patch applied locally and a test with OrdinalPolicy.ALL_PARENTS.\n\nPlease clone the tests from git://snowberry.me/LuceneTest.git and run \"mvn test\" in it.(or visit http://gitweb.snowberry.me/?p=LuceneTest.git;a=summary and read the code)\n\nIt tests lucene 4.2.\n\n\n\tTest result\n1) LUCENE-4882.patch fixes LUCENE-4891 and LUCENE-4882.\n2) OrdinalPolicy.ALL_PARENTS fixes LUCENE-4891 but not LUCENE-4882.\n\n\n\nWithout LUCENE-4882.patch and OrdinalPolicy.ALL_PARENTS, CountingListBuilder.build(IntsRef ordinals, Iterable<CategoryPath> categories) removes the last element from ordinals when it meets \"me\" category.\nThus, if CountingListBuilder.build is given \"type/CHAT\", \"me\", and \"network/hanirc/chan/#anything\", then\nCountingListBuilder.build removes \"network/hanirc/chan/#anything\" but adds its parents.\nYou could track how CountingListBuilder.build works in a debugger.\n\nI think LUCENE-4882.patch fixes LUCENE-4891, but please test git://snowberry.me/LuceneTest.git to make sure I am not wrong. ",
            "author": "crocket",
            "id": "comment-13616653"
        },
        {
            "date": "2013-03-30T14:52:52+0000",
            "content": "LUCENE-4882 fixes two issues, the NPE you reported and the one you report here. Indexing with ALL_PARENTS will also resolve the problem you report here, but it's unrelated to the NPE you reported on 4882. You're right that if the categories are indexed in the order you specified, and 4882 patch is not applied, then the child of the category that follows \"me\" is not recorded. I briefly reviewed your test and it looks ok. Therefore I think this can be resolved as duplicate of 4882? ",
            "author": "Shai Erera",
            "id": "comment-13618089"
        },
        {
            "date": "2013-03-30T20:13:43+0000",
            "content": "I think, as long as I didn't make a mistake in my test, it can be resolved as duplicate of 4882.\nHowever, the test is reproducible. ",
            "author": "crocket",
            "id": "comment-13618145"
        },
        {
            "date": "2013-03-31T04:25:12+0000",
            "content": "Thanks for reporting crocket! ",
            "author": "Shai Erera",
            "id": "comment-13618235"
        }
    ]
}