{
    "id": "SOLR-8176",
    "title": "Model distributed graph traversals with Streaming Expressions",
    "details": {
        "components": [
            "clients - java",
            "SolrCloud",
            "SolrJ"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Won't Fix",
        "priority": "Major"
    },
    "description": "I think it would be useful to model a few distributed graph traversal use cases with Solr's Streaming Expression language. This ticket will explore different approaches with a goal of implementing two or three common graph traversal use cases.",
    "attachments": {
        "SOLR-8176.patch": "https://issues.apache.org/jira/secure/attachment/12795480/SOLR-8176.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-10T19:47:19+0000",
            "author": "Ran Magen",
            "content": "Hey guys,\nHave you thought of using TinkerPop to help with graph traversals?\nImplementing their API will enable graph queries with various query languages - Gremlin, SPARQL, and more in the future.\n ",
            "id": "comment-14999203"
        },
        {
            "date": "2015-11-13T18:08:33+0000",
            "author": "Joel Bernstein",
            "content": "I need to dig into the TinkerPop API. I think implementing Gremlin would be the desired end game. \n\nI see a distributed Gremlin implementation as another Parallel Computing problem, like the Parallel SQL interface. This is where the Streaming API comes in. If we can model graph traversals with the Streaming API then we can have a Gremlin parser that compiles to Streaming API objects. This was the approach taken with the SQL interface.\n\nSo this ticket is really about laying the Parallel Computing framework for supporting graph traversals. \n\nI do agree that looking at TinkerPop will be very useful in understanding what to model. ",
            "id": "comment-15004412"
        },
        {
            "date": "2015-12-29T12:07:10+0000",
            "author": "Dennis Gove",
            "content": "I've been thinking about this a little bit and one thing I keep coming back to is that there are different kinds of graph traversals and I think our model should take that into account. There are lots of types but I think the two major categories are node traversing graphs and edge traversing graphs. \n\nNode Traversing Graphs\nThese are graphs where you have some set of root nodes and you want to find connected nodes with some set of criteria. For example, given a collection of geographic locations (city, county, state, country) with fields \"id\", \"type\", \"parentId\", \"name\" find all cities in NY. As a hiccup the data is not completely normalized and some cities have their county listed as their parent while some have their state listed as their parent. Ie, you do not know how many nodes are between any given city and any given state.\n\ngraph(\n  geography,\n  root(q=\"type=state AND name:ny\", fl=\"id\"),\n  leaf(q=\"type=city\", fl=\"id,parentId,name\"),\n  edge(\"id=parentId\")\n)\n\n\nIn this example you're starting with a set of nodes in the geography collection, all which have some relationship to each other. You select your starting (root) nodes as all states named \"ny\" (there could be more than one). You then define what constitutes an ending (leaf) node as all cities. And finally, you say that all edges where nodeA.id == nodeB.parentId should be followed.\n\nThis traversal can be implemented as a relatively simple iterative search following the form\n\nfrontier := search for all root nodes\nleaves := empty list\n\nwhile frontier is not empty\n  frontierIds := list of ids of all nodes in frontier list\n  leaves :append: search for all nodes whose parentId is in frontierIds and matches the leaf filter\n  frontier := search for all nodes whose parentId is in frontierIds and does not match the leaf filter\n\n\n\nIn each iteration the leaves list can grow and the frontier list is replaced with the next set of nodes to consider. In the end you have a list of all leaf nodes which in some way connect to the original root nodes following the defined edge. Note that for simplicity I've left a couple of things out, including checking for already traversed nodes to avoid loops. Also, the leaf nodes are not added to the frontier but they can be. This would be useful in a situation where leaves are connected to leaves.\n\nEdge Traversal Graphs\nThese are graphs where you have some set of edges but the nodes themselves are relatively unimportant for traversal. For example, finding the shortest path between two nodes, or finding the minimum spanning tree for some set of nodes, or finding loops. ",
            "id": "comment-15073843"
        },
        {
            "date": "2016-01-13T18:12:13+0000",
            "author": "Joel Bernstein",
            "content": "Thinking some about the mechanics of what you're describing.\n\nOne possible approach to this is to implement each iteration as a parallel join. The initial join would shuffle results from the initial query to worker nodes. Then the worker nodes would persist the current working set locally. Then the next iteration starts from the worker nodes that persisted the working set. Each step in the traversal could be done like this. The effect would be that the graph traversal would hop from one set of workers to another set of workers with each iteration. ",
            "id": "comment-15096707"
        },
        {
            "date": "2016-01-29T21:05:08+0000",
            "author": "Marko A. Rodriguez",
            "content": "I work on Apache TinkerPop. Ran Magen sent our dev@ list a link to this ticket. He thought it might be good for us to tell you the advantages of TinkerPop.\n\n\n\tTinkerPop supports the property graph representation. There are vertices, edges, and vertices and edges can have key/value properties.\n\tThere is a core API that any graph system provider must implement: Graph, Vertex, Edge, etc.\n\tIf the graph system provider wants to support OLAP operations, then they need to implement GraphComputer.\n\tThere is an extensive test suite that validates the implementation to ensure consistent semantics.\n\t\n\t\tProviders can deviate from the norm a bit here and there and they articulate their variations in their Features implementation.\n\t\n\t\n\tOnce that is all said an done the providers implementation is deemed \"TinkerPop-enabled.\"\n\t\n\t\tAll TinkerPop-enabled graph systems \"feel the same\" to the end user. Think \"JDBC for graphs.\"\n\t\n\t\n\tThe Gremlin VM can execute over any TinkerPop-enabled graph system.\n\t\n\t\tThe Gremlin VM is a distributed VM that supports both OLTP and OLAP operations.\n\t\t\n\t\t\thttp://arxiv.org/abs/1508.03843\n\t\t\n\t\t\n\t\tThe same Gremlin query compiles down to either execution representation.\n\t\t\n\t\t\thttp://www.datastax.com/dev/blog/the-benefits-of-the-gremlin-graph-traversal-machine\n\t\t\n\t\t\n\t\tGremlin's instruction set can be written out by any other compiler and thus, there exists:\n\t\t\n\t\t\tSPARQL-Gremlin: https://github.com/dkuppitz/sparql-gremlin\n\t\t\tSQL-Gremlin: https://github.com/twilmes/sql-gremlin\n\t\t\n\t\t\n\t\n\t\n\tThe graph system provider can implement InputRDD or InputFormat interfaces to all SparkGraphComputer and GiraphGraphComputer to process their graph.\n\t\n\t\thttp://tinkerpop.apache.org/docs/3.1.0-incubating/#sparkgraphcomputer\n\t\thttp://tinkerpop.apache.org/docs/3.1.0-incubating/#giraphgraphcomputer\n\t\n\t\n\n\n\nThats the general gist of TinkerPop. It would be great to see SOLR support it. Take care.\n ",
            "id": "comment-15124208"
        },
        {
            "date": "2016-01-30T01:06:02+0000",
            "author": "Dennis Gove",
            "content": "I'm having trouble envisioning the expression for this. ",
            "id": "comment-15124557"
        },
        {
            "date": "2016-03-13T04:26:23+0000",
            "author": "Kevin Watters",
            "content": "Hey Guys,  I know you're really focusing on streaming expressions for graph traversal, I just wanted to throw it out there.  I have a version of it working based on the GraphQuery.  It's completely distributed, the only kicker is, I implemented it with a dependency on Kafka as a message broker to handle the shuffling of the frontier query.  I was curious if there's a message broker already in the Solr stack, if so, it should be reasonably easy to swap out the kafka dependency and then we'll all have a fully distributed graph traversal in Solr.  Let me know what you think,  ",
            "id": "comment-15192120"
        },
        {
            "date": "2016-03-13T16:12:28+0000",
            "author": "Joel Bernstein",
            "content": "Sounds like an interesting implementation. I'd be happy to review the patch. I'm very curious to see how the Kafka integration works. Solr now has it's own messaging capability called the TopicStream but I'm not sure if it will meet the needs in this case. But let's definitely pursue the work you've been doing.  ",
            "id": "comment-15192404"
        },
        {
            "date": "2016-03-14T21:07:30+0000",
            "author": "Gopal Patwa",
            "content": "Kevin, I am also interested in your solution using GraphQuery with Kafka  ",
            "id": "comment-15194132"
        },
        {
            "date": "2016-03-16T17:58:59+0000",
            "author": "Kevin Watters",
            "content": "Hi Gopal,\n  I'm running a little bit behind the times,  I'm still working off a branch that was checked out from SVN.  I'll update to trunk from git and make sure my local tests are still passing and I'll post a patch after I can clean up my comments and code a little bit.\n\nJoel, \n  Thanks for the pointer,  I'll have a look at the TopicStream...  It might do what we need.  If not, maybe we can extend it.  I've been focusing on Kafka because it's pretty simple, generic, robust and scales really well.  I'm not tied to any particular technology for it, so long as we can publish some objects with a unique topic identifier.\n ",
            "id": "comment-15197814"
        },
        {
            "date": "2016-03-23T14:49:40+0000",
            "author": "Joel Bernstein",
            "content": "I've been thinking about starting to work on this as well, but with a slightly different approach then Kevin Watters.\n\nThe approach I'm thinking of taking is fully distributed and doesn't rely on low level query operations. Instead it moves the Iterative joins into a single worker node that sees all the shards. That single worker node will issue iterative joins using a batch nested loop approach. Cycle detection will be implemented with a locally sorted list of visited nodes (on disk) that can be intersected with the nodes coming back from the nested loop joins. This approach will not be anywhere near as fast as the low level query work that Kevin has done, but it will be really scalable and eventually always get to the answer given enough time. So while the low level approach will be great for use cases like access control, the fully distributed approach will be great for use cases where the graph traversal is the main query and some allowances can be made in the time it takes to complete. ",
            "id": "comment-15208523"
        },
        {
            "date": "2016-03-23T16:24:21+0000",
            "author": "Joel Bernstein",
            "content": "In regards to the tinkerpop discussions on this ticket. I think it makes sense to first add some Streaming Expressions that model some basic graph traversal use cases. This will iron out some of the mechanics involved in doing graph traversals. This will start to build the foundation for supporting the Gremlin query language. This was the same approach taken when the parallel relational algebra expressions came first and became the foundation of the SQL interface. This approach achieves a number of things:\n\n1) It doesn't put the cart before the horse. In order to properly support Gremlin we need a scalable distributed graph traversal capability. Once we have that adding Gremlin or SparkQL support will be much easier then trying to bootstrap graph capabilities while working on Gremlin at the same time.\n\n2) We can then use Gremlin as a driver for building out the full range of graph traversal streaming expressions. The SQL interface plays this role for the parallel relational algebra Streaming Expressions. \n\n3)  Building out all Graph traversals as streaming expression means that we can than directly plug in the graph expressions with the existing expression library. \n\n4) Each Graph Streaming Expression can be released on it's own providing useful functionality incrementally.  ",
            "id": "comment-15208699"
        },
        {
            "date": "2016-03-23T16:55:56+0000",
            "author": "Jack Krupansky",
            "content": "To what extent can the graph traversal be parallelized for the data on a single node? The eternal question with Solr is how much data you can put on a node before you need to shard, or how big each shard can be. I'm curious how graph traversal affects that calculation. Also, how merge policy and segment size should be configured so that segments can be traversed in parallel. If there was some more idea way to organize the nodes in segments, maybe people could pack a lot more data on fat nodes to reduce the inter-node delays. Alternatively, maybe have more nodes mean more of the operations can be done in parallel without conflicting on local machine resources. Interesting tradeoffs. ",
            "id": "comment-15208763"
        },
        {
            "date": "2016-03-23T17:14:43+0000",
            "author": "Joel Bernstein",
            "content": "The data would be spread across an entire collection. The traversal would be done in a single worker node by performing iterative joins across the collection. The book keeping needed for the traversal would be written to files on the worker node. I looked at using multiple worker nodes to do the graph traversal and it may be possible but looks much trickier.\n\nFor small traversals this approach will be sub-second. For really large traversals this will take longer but should get to an answer. ",
            "id": "comment-15208794"
        },
        {
            "date": "2016-03-25T22:41:10+0000",
            "author": "Kevin Watters",
            "content": "Here's a patch with a basic implementation of a Kafka based frontier query broker to support distributed graph query traversal in Solr.  The unit test is commented out because it requires a Kafka broker to be running.  Also, there's some config parameters / properties that are hard coded.  Either way, this shows how to use the GraphQuery in a distributed graph traversal mode. \n\nDisclaimer:  this patch isn't intended to be merged, it's really only an example of how to do it.  there's a lot of cleanup that still needs to happen to make it ready for primetime. ",
            "id": "comment-15212525"
        },
        {
            "date": "2016-04-12T14:59:44+0000",
            "author": "Marko A. Rodriguez",
            "content": "I thought people on this ticket might like to learn more about how they could leverage Apache TinkerPop for this problem.\n\nhttp://www.planettinkerpop.org/#gremlin\nhttp://www.planettinkerpop.org/#vendors ",
            "id": "comment-15237331"
        },
        {
            "date": "2016-08-24T21:57:28+0000",
            "author": "Joel Bernstein",
            "content": "I think it's ok to resolve this issue as SOLR-8925 is now committed. We can open up new graph expression tickets as they come up. ",
            "id": "comment-15435780"
        }
    ]
}