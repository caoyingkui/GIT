{
    "id": "SOLR-6045",
    "title": "atomic updates w/ solrj + BinaryRequestWriter aren't working when adding multiple fields w/ same name in a single SolrInputDocument",
    "details": {
        "affect_versions": "4.8",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I'm using the following code snippet:\n\n\n        HttpSolrServer srvr = new HttpSolrServer(\"HOST:8983/solr/foo-test\");\n\n        SolrInputDocument sid = new SolrInputDocument();\n        sid.addField(\"id\", \"some_id\");\n        Map<String, String> fieldModifier = Maps.newHashMap();\n        fieldModifier.put(\"set\", \"new_value1\");\n        sid.addField(\"field1\", fieldModifier);\n        Map<String, Object> fieldModifier2 = Maps.newHashMap();\n        fieldModifier2.put(\"set\", \"new_value2\");\n        sid.addField(\"field1\", fieldModifier2);\n\n        srvr.add(sid);\n        srvr.commit();\n\n\n\n\nNOTE: the important part here is that I am using the same field name and adding 2 values separately to the same solr document.\n\nThis produces the correct values in the index.  Here is the output from searching from the admin console:\n\n\"field1\": [\n          \"new_value1\",\n          \"new_value2\"\n        ]\n\n\n\nHowever if I modify the above code to have the following lines after creating the SolrServer:\n\n\n        srvr.setRequestWriter(new BinaryRequestWriter());\n        srvr.setParser(new BinaryResponseParser());\n\n\n\nThen the values that are returned are incorrect:\n\n\"field1\": [\n          \"{set=new_value1}\",\n          \"{set=new_value2}\"\n        ]\n\n\n\nThis also behaves the same if I use the CloudSolrServer as well.\n\nIf I modify my code to look like the following:\n\n\n        Map<String, List<String>> fieldModifier = Maps.newHashMap();\n        fieldModifier.put(\"set\", Lists.newArrayList(\"new_value1\", \"new_value2\"));\n        sid.addField(\"field1\", fieldModifier);\n\n\n\nThen this does work with the BinaryRequestWriter.  So this seems to be an issue when calling addField() with the same name multiple times.\n\nIn the process of debugging this I think I also uncovered a few other similar issues but I will file separate bugs for those.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Scott Lindner",
            "id": "comment-13991567",
            "date": "2014-05-07T05:44:53+0000",
            "content": "Digging into this more it's due to the fact that DistributedUpdateProcessor assumes the top-most element in a field's value must be a Map, but when you call addField(..) multiple times this creates an array list of Maps.  So code like:\n\n\n  public static boolean isAtomicUpdate(final AddUpdateCommand cmd) {\n    SolrInputDocument sdoc = cmd.getSolrInputDocument();\n    for (SolrInputField sif : sdoc.values()) {\n      if (sif.getValue() instanceof Map) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n\n\ndoes not treat this as an atomic update.  Also code in the getUpdatedDocument function also makes these same assumptions.\n\nNow this doesn't explain why the behavior is different when using the BinaryRequestWriter vs. the OOB xml so something is definitely screwy here as simply changing the request transport mechanism should have no impact on behavior.\n\nI'm not sure which is the intended behavior but from where I stand it would be nice to be able to just call .addField multiple times and have the API support this - otherwise I need to build / track my own state for values while I'm creating the document and combine them myself. "
        },
        {
            "author": "Scott Lindner",
            "id": "comment-13992784",
            "date": "2014-05-08T14:28:27+0000",
            "content": "Maybe the problem is actually the fact that the OOB RequestWriter works when it shouldn't?  It must be taking the multiple \"actions\" and combining them into a single Map - and while that actually sounded good to me at first, the code in the distributed update processor is basically unpredictable if you combine multiple actions.\n\nFor instance a \"set\" followed by an \"add\" is OK but if they are processed in the other order then the \"set\" will overwrite the \"add\".  I think logically that's fine but then the actions need to have a predictable precedence and I think the only logical ordering would be something like:\n\nremove --> incr --> set --> add\n\nIn any case I think the point here is that using the OOB RequestWriter or the BinaryRequestWriter shouldn't impact behavior and should be consistent. "
        }
    ]
}