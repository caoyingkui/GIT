{
    "id": "SOLR-7913",
    "title": "Add stream.body support to MLT QParser",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Continuing from https://issues.apache.org/jira/browse/SOLR-7639?focusedCommentId=14601011&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14601011.\n\nIt'd be good to have stream.body be supported by the mlt qparser.",
    "attachments": {
        "SOLR-7913_tag_7.5.0.patch": "https://issues.apache.org/jira/secure/attachment/12943481/SOLR-7913_tag_7.5.0.patch",
        "SOLR-7913_fixTests.patch": "https://issues.apache.org/jira/secure/attachment/12878283/SOLR-7913_fixTests.patch",
        "SOLR-7913.patch": "https://issues.apache.org/jira/secure/attachment/12756061/SOLR-7913.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-09-15T19:38:05+0000",
            "author": "Steve Molloy",
            "content": "Patch allowing to use stream.body in mlt QParser. Need to align RequestUtil logic and TestRemoteStreaming, both of which would prevent stream from getting to QParser in there current state. Hacked the RequestUtil and ignored one of the TestRemoteStreaming for now, everything else passes on 5.3.1 code and applies cleanly on trunk. ",
            "id": "comment-14746007"
        },
        {
            "date": "2016-02-13T13:28:25+0000",
            "author": "Steve Molloy",
            "content": "Properly propagate content streams to shards so they can parse request properly. ",
            "id": "comment-15145974"
        },
        {
            "date": "2016-03-03T22:48:23+0000",
            "author": "Upayavira",
            "content": "Steve Molloy Looking at this patch, there's quite a lot of reformatting in it, which makes it hard to distinguish between substantive changes and layout changes. Could you provide a patch that is purely substantive changes? Whilst I won't (yet) promise to commit it, I'd certainly like to see if we can get it to that point. ",
            "id": "comment-15178757"
        },
        {
            "date": "2017-07-20T21:52:42+0000",
            "author": "Isabelle Giguere",
            "content": "Patch SOLR-7913, updated to Solr 6.6.0.\n\nAdding unit tests.\n\nFirst 2 unit tests in CloudMLTQParserTest look scary, because the results are so different, between the MLT query with id, and the \"equivalent\" query with stream.body.\n\nI tested locally, to compare results with Solr 5.4.1 + patch (in our product, currently) and Solr 6.6.0 + patch, and there is no important difference, when comparing results of MLT with stream.body between Solr versions.  That's the important thing for us... Your opinion may differ.\n\nI'm actually more puzzled that SimpleMLTQParser retrieves exactly the same results with id, and with stream.body!  How does it know what document to remove?\n\nOne note about that weird \"TODO\" in RequestUtils : why not let the handler propagate the content-type it expects, if any, instead of trying to guess in the utility method?  I'm not sure exactly where/how to do that, and how much impact it would have. ",
            "id": "comment-16095431"
        },
        {
            "date": "2017-07-20T21:59:06+0000",
            "author": "Isabelle Giguere",
            "content": "One more note about the patch for Solr 6.6.0, that I just attached:\n\nCloudMLTQParser contains the changes done in the patch for SOLR-8604.  If, for some strange reason, you don't want support for the \"collection\" parameter in MLT queries, just ignore in patch SOLR-7913 the changes to method CloudMLTQParser.getDocument(String,String), so that you keep the previous version, with just one parameter.\n\nIf you do want support for the \"collection\" parameter in MLT queries, then you need to apply SOLR-8604 too.\n\nIt's easier to weed out SOLR-8604 from SOLR-7913 than the reverse !\n\nUpayavira : this patch is not as messy as the previous, I did not incorporate the useless layout changes. ",
            "id": "comment-16095452"
        },
        {
            "date": "2017-07-21T00:46:00+0000",
            "author": "Isabelle Giguere",
            "content": "Oops!\nMy patch on Solr 6.6.0 makes these 3 tests fail :\norg.apache.solr.search.TestSmileRequest.testDistribJsonRequest\norg.apache.solr.search.json.TestJsonRequest.testLocalJsonRequest\norg.apache.solr.search.json.TestJsonRequest.testDistribJsonRequest\n\nAdding SOLR-7913_fixTests.patch, to be applied on top of SOLR-7913.patch (2017-07-20).\nIt contains a ridiculous, horrifying hack.  But the advantage is that the 3 search tests listed above pass, and it also allows to re-enable org.apache.solr.request.TestRemoteStreaming.testNoUrlAccess(). A boolean to filter only MLT with stream.body has a lot less impact everywhere else.\n\nI ran all solr tests, this time \n ",
            "id": "comment-16095612"
        },
        {
            "date": "2018-10-11T16:21:16+0000",
            "author": "Isabelle Giguere",
            "content": "Solr 7.5.0:\n\nSince Solr 7.1, requestParsers param enableStreamBody allows control over stream.body support, but stream.body still cannot be used with the MLT Qparser.  Current behavior insists on looking for a doc id.\n\nSOLR-7913_tag_7.5.0.patch : \nClean patch to allow stream.body im MLT QParser (no trace of SOLR-8604 as previously)\nPatch based on revision 61870, tag 7.5.0, latest release\n\nNotes:\nNew class org.apache.solr.client.solrj.request.ContentStreamQueryRequest should override SolrRequest.getContentWriter(String) instead of SolrRequest.getContentStreams()\n\nChanges in org.apache.solr.request.json.RequestUtil allow stream.body on an MLT Qparser request, but test TestRemoteStreaming.testNoUrlAccess fails (meaning the test query doesn't fail), so is ignored for now.\nThere should be a better fix, that would consider MLT QParser, Json requests, and still pass test TestRemoteStreaming.testNoUrlAccess\n\n\tSet a contentType on MLT QParser requests with stream.body, and check for that contentType along with \"/json\" in RequestUtil ?\n\tRequire param 'json' on all Json requests ?  Meaning the query at line 178 in TestJsonRequest.doJsonRequest(Client, boolean) would not be allowed\n\n\n\nThere could be a more streamlined solution, closer to how requestParsers param enableStreamBody is supported elsewhere in the code ? ",
            "id": "comment-16646715"
        }
    ]
}