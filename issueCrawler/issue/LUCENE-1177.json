{
    "id": "LUCENE-1177",
    "title": "IW.optimize() can do too many merges at the very end",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.3.1",
            "2.4"
        ],
        "affect_versions": "2.3",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This was fixed on trunk in LUCENE-1044 but I'd like to separately\nbackport it to 2.3.\n\nWith ConcurrentMergeScheduler there is a bug, only when CFS is on,\nwhereby after the final merge of an optimize has finished and while\nit's building its CFS, the merge policy may incorrectly ask for\nanother merge to collapse that segment into a compound file.  The net\neffect is optimize can spend many extra iterations unecessarily\nmerging a single segment to collapse it to compound file.\n\nI believe the case is rare (hard to hit), and maybe only if you have\nmultiple threads calling optimize at once (the TestThreadedOptimize\ntest can hit it), but it's a low-risk fix so I plan to commit to 2.3\nshortly.",
    "attachments": {
        "LUCENE-1177.patch": "https://issues.apache.org/jira/secure/attachment/12375354/LUCENE-1177.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-02-12T13:31:45+0000",
            "content": "Attached patch.  Will commit shortly to 2.3. ",
            "author": "Michael McCandless",
            "id": "comment-12568108"
        },
        {
            "date": "2008-02-14T15:28:08+0000",
            "content": "Committed to 2.3 (and was already fixed on trunk). ",
            "author": "Michael McCandless",
            "id": "comment-12568965"
        }
    ]
}