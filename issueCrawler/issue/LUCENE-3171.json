{
    "id": "LUCENE-3171",
    "title": "BlockJoinQuery/Collector",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I created a single-pass Query + Collector to implement nested docs.\nThe approach is similar to LUCENE-2454, in that the app must index\ndocuments in \"join order\", as a block (IW.add/updateDocuments), with\nthe parent doc at the end of the block, except that this impl is one\npass.\n\nOnce you join at indexing time, you can take any query that matches\nchild docs and join it up to the parent docID space, using\nBlockJoinQuery.  You then use BlockJoinCollector, which sorts parent\ndocs by provided Sort, to gather results, grouped by parent; this\ncollector finds any BlockJoinQuerys (using Scorer.visitScorers) and\nretains the child docs corresponding to each collected parent doc.\n\nAfter searching is done, you retrieve the TopGroups from a provided\nBlockJoinQuery.\n\nLike LUCENE-2454, this is less general than the arbitrary joins in\nSolr (SOLR-2272) or parent/child from ElasticSearch\n(https://github.com/elasticsearch/elasticsearch/issues/553), since you\nmust do the join at indexing time as a doc block, but it should be\nable to handle nested joins as well as joins to multiple tables,\nthough I don't yet have test cases for these.\n\nI put this in a new Join module (modules/join); I think as we\nrefactor join impls we should put them here.",
    "attachments": {
        "LUCENE-3171.patch": "https://issues.apache.org/jira/secure/attachment/12481456/LUCENE-3171.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-04T16:20:07+0000",
            "content": "Patch.  The basic impl is working, I think (the random test passes),\nbut I have alot of nocommits still! ",
            "author": "Michael McCandless",
            "id": "comment-13044325"
        },
        {
            "date": "2011-06-18T10:36:09+0000",
            "content": "New patch, I think it's ready to commit! ",
            "author": "Michael McCandless",
            "id": "comment-13051494"
        },
        {
            "date": "2011-06-21T12:26:09+0000",
            "content": "BlockJoinQuery still needs hashCode/equals, and a javadoc note (as I remarked earlier at 2454) about the possible inefficiency of the use of OpenBitSet for larger group sizes. When the typical group size gets a lot bigger than the number of bits in a long, another implementation might be faster. This remark the in javadocs would allow us to wait for someone to come along with bigger group sizes and a real performance problem here.\n\nI would prefer to use single pass and for now I only need the parent docs. That means that I have no preference for 2454 or this one. ",
            "author": "Paul Elschot",
            "id": "comment-13052513"
        },
        {
            "date": "2011-06-21T16:18:12+0000",
            "content": "BlockJoinQuery still needs hashCode/equals\n\nWoops, thanks, I'll add!\n\n\nand a javadoc note (as I remarked earlier at 2454) about the possible inefficiency of the use of OpenBitSet for larger group sizes. When the typical group size gets a lot bigger than the number of bits in a long, another implementation might be faster. This remark the in javadocs would allow us to wait for someone to come along with bigger group sizes and a real performance problem here.\n\nHmm: do you have an improvement in mind for OpenBitSet.prevSetBit to better handle large groups?  Or, where is this possible inefficiency (is it something specific)?\n\nI would prefer to use single pass and for now I only need the parent docs. That means that I have no preference for 2454 or this one.\n\nI wonder how often apps \"typically\" need just the parent docs vs the groups (w/ child docs)...\n\nBut, still this patch only calls .nextSetBit() once per group so that ought to be faster than LUCENE-2454, I think... hmm, unless you typically only have 1 child match per parent. ",
            "author": "Michael McCandless",
            "id": "comment-13052642"
        },
        {
            "date": "2011-06-21T18:16:52+0000",
            "content": "Patch, adding equals and hashCode and clone to BlockJoinQuery.  Also, I now throw UOE from get/setBoost, stating that you should do so against the child query instead. ",
            "author": "Michael McCandless",
            "id": "comment-13052733"
        },
        {
            "date": "2011-06-21T19:13:10+0000",
            "content": "The possible inefficiency is the same as the one for a any sparsely filled OpenBitSet.\n\nAnother implementation (should be another issue, but since you asked...) could be a set of increasing integers, based on a balanced tree structure with a moderate fanout (e.g. 32), and all integer values relative to the minimum determined by the data for the pointer from the parent. The whole thing could be stored in one int[], the pointers would be (forward) indexes into this one array, and each internal node would consist of two rows of integers (one data, one pointers), and each row would be compressed as a frame of reference into the array.\n\nThis thing can implement \n\nint next(int x)\n\n and \n\nint previous(int x)\n\n easily, and an iterator over this can implement \n\nadvance(target)\n\n for a DocIdSetIterator, and because of the symmetry it can also do that in the reverse direction as needed here.\nCompression at higher levels might not be necessary.\n\nFor now, there is no code for this, except for the frame of reference.\nOccasionaly the need for a more space efficient filter shows up on the mailing lists, so if anyone wants to give this a try...\n ",
            "author": "Paul Elschot",
            "id": "comment-13052770"
        },
        {
            "date": "2011-06-26T15:10:43+0000",
            "content": "The possible inefficiency is the same as the one for a any sparsely filled OpenBitSet.\n\nAhh, OK.  Though, I suspect this (the linear scan OBS does for next/prevSetBit) is a minor cost overall, if indeed the app has so many child docs per parent that a sparse bit set would be warranted?  Ie, the Query/Collector would still be visiting these many child docs per parent, I guess?  (Unless the query hits few results).\n\nI don't think a jdoc warning is really required for this... but I'm fine if you want to add one?\n\nI'll commit this soon and resolve LUCENE-2454 as duplicate! ",
            "author": "Michael McCandless",
            "id": "comment-13055096"
        },
        {
            "date": "2012-05-12T00:47:44+0000",
            "content": "Is there a wiki page on how to use this?  I need to implement an index with nested docs and an example scheme and query would be awesome. Thanks! ",
            "author": "David Webb",
            "id": "comment-13273759"
        },
        {
            "date": "2012-05-12T10:45:15+0000",
            "content": "I wrote this blog post giving a quick overview: http://blog.mikemccandless.com/2012/01/searching-relational-content-with.html ",
            "author": "Michael McCandless",
            "id": "comment-13273926"
        }
    ]
}