{
    "id": "SOLR-9217",
    "title": "{!join score=..}.. should delay join to createWeight",
    "details": {
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.6",
            "7.0"
        ],
        "affect_versions": "6.1",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "ScoreJoinQParserPlugin.XxxCoreJoinQuery executes JoinUtil.createJoinQuery on rewrite(), but it's inefficient in filter(...) syntax or fq  I suppose it's filter() only problem, not fq. It's better to do that in createWeigh() as it's done in classic Solr JoinQuery, JoinQParserPlugin.\nAll existing tests is enough, we just need to assert rewrite behavior - it should rewrite on enclosing range query or so, and doesn't on plain term query.",
    "attachments": {
        "SOLR_9217.patch": "https://issues.apache.org/jira/secure/attachment/12862294/SOLR_9217.patch",
        "SOLR-9217.patch": "https://issues.apache.org/jira/secure/attachment/12862526/SOLR-9217.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-03T16:14:07+0000",
            "author": "Shashank Tyagi",
            "content": "Is this fixed?Where is good place for starting this. ",
            "id": "comment-15851655"
        },
        {
            "date": "2017-02-03T20:04:20+0000",
            "author": "Mikhail Khludnev",
            "content": "Hello, \nShashank Tyagi, you are welcome, just look at https://wiki.apache.org/solr/HowToContribute .\nI've checked that the description is still valid and describes where to start well.    ",
            "id": "comment-15852031"
        },
        {
            "date": "2017-02-09T06:34:56+0000",
            "author": "Sachini Malindi",
            "content": "Can i look at this issue ",
            "id": "comment-15859114"
        },
        {
            "date": "2017-02-10T06:10:40+0000",
            "author": "Shashank Tyagi",
            "content": "Sure, go ahead.\n\n ",
            "id": "comment-15860798"
        },
        {
            "date": "2017-04-03T21:25:24+0000",
            "author": "gopikannan venugopalsamy",
            "content": "Can I work on this? ",
            "id": "comment-15954183"
        },
        {
            "date": "2017-04-03T21:29:20+0000",
            "author": "Mikhail Khludnev",
            "content": "absolutely ",
            "id": "comment-15954187"
        },
        {
            "date": "2017-04-03T21:43:16+0000",
            "author": "gopikannan venugopalsamy",
            "content": "Great\n\nMikhail,\n   I am unable to understand from code what exactly is inefficient here, Rewrite and createWeight are called one after another from createNormalizedWeight \n{IndexSearcher.java}\n, Could you please shed some more light at the inefficiency part?\n\nI debugged below queries, The inefficiency is when join is part of filter query(fq) right?\n\nhttp://localhost:8983/solr/techproducts/select?q=*:*&fq=\n{!join%20from=id%20to=id%20score=max}:&fl=score,price\n\nhttp://localhost:8983/solr/techproducts/select?q={!join%20from=id%20to=id%20score=max}\n:&fl=score,price\n ",
            "id": "comment-15954201"
        },
        {
            "date": "2017-04-04T06:23:33+0000",
            "author": "gopikannan venugopalsamy",
            "content": "Mikhail Khludnev\n\n fromSearcher.search(fromQuery, collector) gets executed inside rewrite, Is this the inefficiency?\n\n[JoinUtil.java]\n  private static Query createJoinQuery(boolean multipleValuesPerDocument, String toField, Query fromQuery,\n      IndexSearcher fromSearcher, ScoreMode scoreMode, final GenericTermsCollector collector)\n          throws IOException {\n\n    fromSearcher.search(fromQuery, collector); ",
            "id": "comment-15954612"
        },
        {
            "date": "2017-04-04T11:29:51+0000",
            "author": "Mikhail Khludnev",
            "content": "gopikannan venugopalsamy, to get the idea you can set showItems=100 at FastLRUCache and LFUCache filterCache, and then execute score and non-score join under q=filter(). Then, you can see in cache stats that score-join entries use 'to'-terms lists as cache entry keys. You can also check it with debugger. \nAlso, have a look at org.apache.solr.query.FilterQuery  ",
            "id": "comment-15955016"
        },
        {
            "date": "2017-04-05T21:33:48+0000",
            "author": "gopikannan venugopalsamy",
            "content": "Mikhail Khludnev, Thanks for the explanation, I was trying to assert behavior of join  with range query in filter() but it fails during parsing, The same join query works with out filter. Is this known?\n\nhttp://localhost:8983/solr/techproducts/select?q=filter(\n{!join%20from=id%20to=id}id:[1%20TO%205])\n\norg.apache.solr.search.SyntaxError: Cannot parse 'id:[1': Encountered \"<EOF>\" at line 1, column 5. Was expecting one of: \"TO\" ... <RANGE_QUOTED> ... <RANGE_GOOP> ...\n\nThis works\nhttp://localhost:8983/solr/techproducts/select?q={!join%20from=id%20to=id}\nid:[1%20TO%205]\n ",
            "id": "comment-15957751"
        },
        {
            "date": "2017-04-06T09:19:22+0000",
            "author": "Mikhail Khludnev",
            "content": "gopikannan venugopalsamy, you can reproduce it with q=filter({!join from=id to=id score=none}id:G*) that particular range query with space can be fixed with v=$nested. Yep, the query syntax lacks of predictability.  \nIf you set <filterCache showItems=\"100\"... and execute that filter({!join score=...}) you'll see {{item_TermsQuery{field=id}:org.apache.solr.search.SortedIntDocSet@\u200b75fee8b0 entry in filterCache and this is a problem since TermsQuery enumerates id values and it might consume a lot of heap. You can see that it's not a case if you run classic join query without score local param. ",
            "id": "comment-15958633"
        },
        {
            "date": "2017-04-06T14:40:29+0000",
            "author": "Andrey Kudryavtsev",
            "content": "gopikannan venugopalsamy, I think that the idea behind this Jira is to do something like SOLR_9217.patch\n\nUnfortunately, I'm not good at software development, so you will have to check this patch by yourself -( ",
            "id": "comment-15959018"
        },
        {
            "date": "2017-04-07T20:27:59+0000",
            "author": "gopikannan venugopalsamy",
            "content": "Mikhail Khludnev Thanks again, I understood the inefficiency.\n\nAndrey Kudryavtsev your patch works. Thanks.\n\nAttached patch [SOLR-9217.patch] ",
            "id": "comment-15961387"
        },
        {
            "date": "2017-04-22T21:31:19+0000",
            "author": "Mikhail Khludnev",
            "content": "Patch looks good. Let it go shortly.  ",
            "id": "comment-15980140"
        },
        {
            "date": "2017-04-22T22:31:02+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a07ac63357c3ecd817e85a5f392a558709998d05 in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a07ac63 ]\n\nSOLR-9217: delay JoinUtil call to createWeight for score join ",
            "id": "comment-15980154"
        },
        {
            "date": "2017-04-22T23:03:59+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c215c780cd0462a9f5e4ea0a5dc80d44234e8149 in lucene-solr's branch refs/heads/branch_6x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c215c78 ]\n\nSOLR-9217: delay JoinUtil call to createWeight for score join ",
            "id": "comment-15980161"
        }
    ]
}