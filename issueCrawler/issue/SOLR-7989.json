{
    "id": "SOLR-7989",
    "title": "After a new leader is elected it, it should ensure it's state is ACTIVE if it has already registered with ZK.",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "It is possible that a down replica gets elected as a leader, and that it stays down after the election.\n\nHere's how I hit upon this:\n\n\tThere are 3 replicas: leader, notleader0, notleader1\n\tIntroduced network partition to isolate notleader0, notleader1 from leader (leader puts these two in LIR via zk).\n\tKill leader, remove partition. Now leader is dead, and both of notleader0 and notleader1 are down. There is no leader.\n\tRemove LIR znodes in zk.\n\tWait a while, and there happens a (flawed?) leader election.\n\tFinally, the state is such that one of notleader0 or notleader1 (which were down before) become leader, but stays down.",
    "attachments": {
        "SOLR-7989.patch": "https://issues.apache.org/jira/secure/attachment/12770516/SOLR-7989.patch",
        "DownLeaderTest.java": "https://issues.apache.org/jira/secure/attachment/12753115/DownLeaderTest.java",
        "SOLR-8233.patch": "https://issues.apache.org/jira/secure/attachment/12770575/SOLR-8233.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-04T04:32:04+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Finally understood why this is happening. \n\nWhen a DOWN replica is elected a leader, the ElectionContext's runLeaderProcess() finally tries to publish the new leader as well as the new state (now ACTIVE) in the same message. For example:\n\n{\n  \"operation\":\"leader\",\n  \"shard\":\"shard1\",\n  \"collection\":\"forceleader_test_collection\",\n  \"base_url\":\"http://127.0.0.1:36501/sz_sie\",\n  \"core\":\"forceleader_test_collection_shard1_replica2\",\n  \"state\":\"active\"}\n\n\n\nHowever, the OverseerAction for LEADER operation doesn't actually update the \"state\" that was passed in. So, although the replica gets elected as the leader, its state stays DOWN in the cluster state. Example (immediately after the leader election in above example):\n\nshard1:{\n  \"range\":\"80000000-7fffffff\",\n  \"state\":\"active\",\n  \"replicas\":{\n    \"core_node1\":{\n      \"core\":\"forceleader_test_collection_shard1_replica1\",\n      \"base_url\":\"http://127.0.0.1:44845/sz_sie\",\n      \"node_name\":\"127.0.0.1:44845_sz_sie\",\n      \"state\":\"down\"},\n    \"core_node2\":{\n      \"state\":\"down\",\n      \"base_url\":\"http://127.0.0.1:36501/sz_sie\",\n      \"core\":\"forceleader_test_collection_shard1_replica2\",\n      \"node_name\":\"127.0.0.1:36501_sz_sie\",\n      \"leader\":\"true\"},\n    \"core_node3\":{\n      \"state\":\"down\",\n      \"base_url\":\"http://127.0.0.1:33088/sz_sie\",\n      \"core\":\"forceleader_test_collection_shard1_replica3\",\n      \"node_name\":\"127.0.0.1:33088_sz_sie\"}}}\n\n\n\nI'll raise a patch for this soon. ",
            "id": "comment-14988858"
        },
        {
            "date": "2015-11-04T04:41:52+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Patch for fixing this problem.\nSplit out the current overseer LEADER operation message into two messages, one for the LEADER and one for the STATE. ",
            "id": "comment-14988863"
        },
        {
            "date": "2015-11-04T04:48:30+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The DownLeaderTest passes after this fix, fails without it.\n\nI'm adding the test separate from the patch for fix, since this test relies on a very specific scenario to hit this bug. However, there might be a more generic way of simulating the same scenario, just that I can't think of any simpler way of simulating in a unit test. ",
            "id": "comment-14988867"
        },
        {
            "date": "2015-11-04T09:26:12+0000",
            "author": "Noble Paul",
            "content": "Send the state=ACTIVE first before the LEADER msg\nLet's check if the node is actually active before sending the state=ACTIVE message  ",
            "id": "comment-14989195"
        },
        {
            "date": "2015-11-04T10:34:23+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks Noble, makes sense. Changed the order of the two messages. ",
            "id": "comment-14989284"
        },
        {
            "date": "2015-11-04T12:20:43+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Forgot the check for current state in the last patch. Added it now. ",
            "id": "comment-14989460"
        },
        {
            "date": "2015-11-04T15:18:32+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "This check for state, and more precisely the use of zkStateReader to update/access the cluster state, is causing a hang/stall in `LeaderElectionTest`. I'm looking into the reason / fix. ",
            "id": "comment-14989679"
        },
        {
            "date": "2015-11-04T15:25:30+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "From that test, LeaderElectionTest, the clusterstate was obtained as null. Added a check for that, so now the test passes smoothly as before.\n\nAttached the updated patch, running full suite of tests now. ",
            "id": "comment-14989699"
        },
        {
            "date": "2015-11-04T15:32:10+0000",
            "author": "Mark Miller",
            "content": "Great catch Ishan!\n\nHere's how I hit upon this:\n\nCan we catch this in a unit test using the proxy jetties to simulate the partitions? ",
            "id": "comment-14989720"
        },
        {
            "date": "2015-11-04T15:33:18+0000",
            "author": "Mark Miller",
            "content": "Nevermind, I see a new test is broken out on it's own, was just looking at the patch files. Awesome. ",
            "id": "comment-14989723"
        },
        {
            "date": "2015-11-04T15:39:54+0000",
            "author": "Noble Paul",
            "content": "That is a unit test. Never has any clusterstate . It only tests for leader election ",
            "id": "comment-14989741"
        },
        {
            "date": "2015-11-04T15:53:15+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Can we catch this in a unit test using the proxy jetties to simulate the partitions?\n\nRight, there's the DownLeaderTest. However, I don't think we should commit the test. The test is quite a complex way of proving that there is a problem, and that the problem is fixed once this patch goes in. But, it relies on LIR logic, and if LIR code changes later, the test will have to keep up with that, which is maintenance work. I couldn't find an easier way (apart from LIR) to trigger this particular situation (down replica becoming leader, staying down). ",
            "id": "comment-14989768"
        },
        {
            "date": "2015-11-04T16:06:23+0000",
            "author": "Mark Miller",
            "content": "I'd still lean toward trying to get that test in, even if just in some nightly form. I think these specific tests are great. And I'm hoping LIR is not going to have to change too much. As recovery code hardens, it should actually continually change less and less is my hope.\n\nUp to you though, I get the current concern with the test. But while the test is specific, it doesn't seem too terribly complicated. And we are going to want to add more and more specific tests over time. Perhaps we should do some work to make a test like this more possible with built in support somehow? ",
            "id": "comment-14989798"
        },
        {
            "date": "2015-11-04T16:21:28+0000",
            "author": "Erick Erickson",
            "content": "How about just a comment in the test about \"don't waste too much time making this test pass if LIR code changes\" or something? ",
            "id": "comment-14989824"
        },
        {
            "date": "2015-11-05T10:09:13+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Attached the updated patch, running full suite of tests now.\nRan many times now, some test or the other fails. Neither of them reproducible. I think this is good to go in.\n\nI just realized that I've written up a very similar test for SOLR-7569 (ForceLeaderTest). One of the tests in that suite does exactly what the DownLeaderTest is doing here. As with the test here, that test too fails without this patch in. Only difference is that in that test, the call to FORCELEADER is clearing the LIR state, whereas the DownLeaderTest here is clearing the LIR state directly. I think we should ignore the test here and when SOLR-7569 goes in, we'll have a test that covers the code path taken in this patch.\n\nNoble Paul, Mark Miller Can you please review and commit this? Thanks. ",
            "id": "comment-14991446"
        },
        {
            "date": "2015-11-05T12:51:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1712753 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1712753 ]\n\nSOLR-7989: After a new leader is elected it should change it's state to ACTIVE even\n  if the last published state is something else ",
            "id": "comment-14991619"
        },
        {
            "date": "2015-11-05T14:19:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1712781 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1712781 ]\n\nSOLR-7989: After a new leader is elected it should change it's state to ACTIVE even\nif the last published state is something else ",
            "id": "comment-14991715"
        },
        {
            "date": "2015-11-05T14:21:19+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks, Noble! ",
            "id": "comment-14991716"
        },
        {
            "date": "2015-11-05T18:17:45+0000",
            "author": "Mark Miller",
            "content": "I think I was just hitting this pretty consistently while working on a new ChaosMonkey type test after fixing SOLR-8244.\n\nHad a live and down replica at the end that would never recover. Updated to this commit and it no longer happens. ",
            "id": "comment-14992163"
        },
        {
            "date": "2015-11-10T15:36:00+0000",
            "author": "Mark Miller",
            "content": "Why do we use the stale clusterstate to see if we are already active and prevent publishing active if we are not? Doesn't that just allow for unknown races? Shouldn't we just publish active regardless? ",
            "id": "comment-14998758"
        },
        {
            "date": "2015-11-11T05:47:41+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Shouldn't we just publish active regardless?\nThat's what I wanted to do in my initial patch. Though, upon's Noble's comment to add the check, I thought it would help reduce one overseer message and be more efficient.\n\nWhy do we use the stale clusterstate to see if we are already active and prevent publishing active if we are not?\nWhat do you think we should do, do you suggest (1) we force update the cluster state before the check so that we don't check against stale clusterstate, or (2) send the active state message regardless?\n\nAttaching the patch for (1), this required a change to the LeaderElectionTest. \n\nTo do (2), it would require a change to OverseerTest.testOverseerStatsReset (SOLR-8249), and I don't currently know how to make it work if the STATE=ACTIVE message is sent regardless. If that's the way you suggest we should go, maybe I could raise a patch to send the message without a state check and disable the test for now. ",
            "id": "comment-14999972"
        },
        {
            "date": "2015-11-11T11:24:47+0000",
            "author": "Noble Paul",
            "content": "99/100 times the state=ACTIVE\n\nyou can do a force read before checking the state . ",
            "id": "comment-15000256"
        },
        {
            "date": "2015-11-11T14:15:12+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "you can do a force read before checking the state .\nThat's what I think I've done in the last patch. Can you/Mark please review?\nSorry for missing this out; I did this update cluster state in a patch before the original commit itself; but the LeaderElectionTest failure threw me off and I somehow missed the update cluster state in the final patch for the commit. ",
            "id": "comment-15000414"
        },
        {
            "date": "2015-11-11T15:04:56+0000",
            "author": "Mark Miller",
            "content": "I actually think this is wrong on other levels.\n\nAll publishing of state should go through ZkController - we do things like track the last published state. I'm not sure this is the right place to do this either. I'm reviewing this in another issue. ",
            "id": "comment-15000474"
        },
        {
            "date": "2015-11-11T15:11:58+0000",
            "author": "Mark Miller",
            "content": "Also, what about basic stuff like:\n\nCore starts up, starts election, it's not active. Becomes leader, it's not active so it's made active with this change.\n\nNow register is called. Register has the core do tlog replay and then is ready to go active. So it does. But we are already active too early? ",
            "id": "comment-15000483"
        },
        {
            "date": "2015-11-11T15:12:49+0000",
            "author": "Mark Miller",
            "content": "There is def an issue to be fixed here, but I think it may be more complicated than this. ",
            "id": "comment-15000486"
        },
        {
            "date": "2015-11-11T15:54:22+0000",
            "author": "Mark Miller",
            "content": "Hmm...doesn't this test create the problem itself?\n\nIt puts all bunch of replicas in LIR manually, causing the DOWN state. Then it manually clears LIR and tries to see who will become leader.\n\nThis is not a normal case?\n\nIn any case, I will revert the current fix. Now I think the test may be creating the problem itself, but regardless, this change really breaks things. ",
            "id": "comment-15000554"
        },
        {
            "date": "2015-11-11T16:02:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1713882 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1713882 ]\n\nSOLR-7989: Revert changes. ",
            "id": "comment-15000571"
        },
        {
            "date": "2015-11-11T16:05:45+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1713883 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1713883 ]\n\nSOLR-7989: Revert changes. ",
            "id": "comment-15000574"
        },
        {
            "date": "2015-11-11T16:06:52+0000",
            "author": "Mark Miller",
            "content": "Ishan Chattopadhyaya, I don't think this is a valid test at all.\n\nWhy does it clear LIR while Solr is running? That is not a valid real world scenario. ",
            "id": "comment-15000576"
        },
        {
            "date": "2015-11-11T16:10:58+0000",
            "author": "Mark Miller",
            "content": "Why does it clear LIR while Solr is running? \n\nI guess this tests our emergency force a leader API? That's part of why that API is so janky. It's not really valid to simply clear out LIR nodes on a running system. And it's a really hard problem to make it doable - this approach certainly won't work.\n\nWhat we really need to do is fix things so it's not needed. ",
            "id": "comment-15000578"
        },
        {
            "date": "2015-11-11T17:26:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1713898 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1713898 ]\n\nSOLR-7989, SOLR-7569: Ignore this test. ",
            "id": "comment-15000721"
        },
        {
            "date": "2015-11-11T17:27:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1713899 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1713899 ]\n\nSOLR-7989, SOLR-7569: Ignore this test. ",
            "id": "comment-15000725"
        },
        {
            "date": "2015-11-11T18:00:14+0000",
            "author": "Mark Miller",
            "content": "Something like this might work. ",
            "id": "comment-15000794"
        },
        {
            "date": "2015-11-11T20:28:18+0000",
            "author": "Mark Miller",
            "content": "New version.\n\nAdded some logging.\n\nChanged so we won't publish ACTIVE after a leader election win if the current state is RECOVERING. Doesn't seem safe to force a move from RECOVERING to ACTIVE. ",
            "id": "comment-15001034"
        },
        {
            "date": "2015-11-12T15:32:42+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I don't think this is a valid test at all. Why does it clear LIR while Solr is running? That is not a valid real world scenario.\nIndeed, that's why I didn't include it in the patch. I just wanted to bring out that there is a problem, but then I couldn't replicate it in a test in any other way that represents a real world situation. However, just that fact that there were two messages passed as one (LEADER message had a state param) indicated to me that we should, in theory, split them out.\n\n+1 to your patch, I hadn't considered the core registration scenario. Also, the change from only DOWN to ACTIVE makes sense, and excluding the RECOVERING to ACTIVE change. ",
            "id": "comment-15002241"
        },
        {
            "date": "2015-11-12T15:55:07+0000",
            "author": "Mark Miller",
            "content": "Indeed, that's why I didn't include it in the patch.\n\nI think that doing that is fine in a test - we just have to carefully understand what we are testing and what we are fixing. This one was particularly tricky - I did not catch the issue the first few times I looked at it. Many things are impossible to test without some of this artificial hand waving though.\n ",
            "id": "comment-15002288"
        },
        {
            "date": "2015-11-13T14:31:18+0000",
            "author": "Mark Miller",
            "content": "Also, something I was not really aware of initially, what you are doing does seem to be a valid test for the force leader API that you added in the other issue. ",
            "id": "comment-15004035"
        },
        {
            "date": "2015-11-13T14:33:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1714211 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1714211 ]\n\nSOLR-7989: After a new leader is elected it, it should ensure it's state is ACTIVE if it has already registered with ZK. ",
            "id": "comment-15004038"
        },
        {
            "date": "2015-11-13T14:35:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1714212 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1714212 ]\n\nSOLR-7989: After a new leader is elected it, it should ensure it's state is ACTIVE if it has already registered with ZK. ",
            "id": "comment-15004040"
        }
    ]
}