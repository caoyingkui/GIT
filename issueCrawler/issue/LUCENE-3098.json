{
    "id": "LUCENE-3098",
    "title": "Grouped total count",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [
            "3.2",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "When grouping currently you can get two counts:\n\n\tTotal hit count. Which counts all documents that matched the query.\n\tTotal grouped hit count. Which counts all documents that have been grouped in the top N groups.\n\n\n\nSince the end user gets groups in his search result instead of plain documents with grouping. The total number of groups as total count makes more sense in many situations.",
    "attachments": {
        "LUCENE-3098.patch": "https://issues.apache.org/jira/secure/attachment/12479255/LUCENE-3098.patch",
        "LUCENE-3098-3x.patch": "https://issues.apache.org/jira/secure/attachment/12479278/LUCENE-3098-3x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-14T14:28:41+0000",
            "content": "I think this can be implemented as separate collector and then together with the SecondPassGroupingCollector executed in the second search. We can use the MultiCollector for that. ",
            "author": "Martijn van Groningen",
            "id": "comment-13033537"
        },
        {
            "date": "2011-05-14T15:59:30+0000",
            "content": "I agree we should make it easy to get total number of (unique) groups.\n\nWe may want to just fold this into the 1st pass collector since it's already looking up group ord + value? ",
            "author": "Michael McCandless",
            "id": "comment-13033569"
        },
        {
            "date": "2011-05-15T10:58:49+0000",
            "content": "Attached an initial patch for computing the total group count.\n\nCurrently it is implemented as a separate collector. The collector can be executed in the first and second pass if the MultiCollector is used.\n\nWe may want to just fold this into the 1st pass collector since it's already looking up group ord + value? \nThe 1st pass collector is more concerned with finding the top N groups. For this it takes in account the sort within a group to choose the right group head. The total group count collector doesn't care about the group sort. It just increments the count if an unseen group has been detected. The group count collector needs to do this for all groups, not just the top N. Therefore I think it is best implemented in a separate collector.\n\nI also measured some basic performance. I used a machine with a 2.16 GHz Core 2 Duo processor and 4GB RAM. I used an index of 30M documents. The group field has around 7500 unique values. The average search time was around 350 ms. The average heap usage was 122 MB. I ran 50 searches in parallel with only the total group count collector. ",
            "author": "Martijn van Groningen",
            "id": "comment-13033660"
        },
        {
            "date": "2011-05-15T12:14:48+0000",
            "content": "Thanks for the quick pach Martijn!\n\nOK I think a dedicated separate collector is a good approach.\n\nThough, I'm nervous that you pull a top level DocTermsIndex just to get the max number of unique groups.  In fact, it's sort of odd that the user should even have to pass this in?  Actually, SentinelIntSet rehashes itself... so why do we need to alloc it to the max possible values up front?\n\nAlso, it'd be great to fold this collector in the random test in TestGrouping; I can do that too if you don't want to (TODO <-- I put this here to try to remind my later self!). ",
            "author": "Michael McCandless",
            "id": "comment-13033668"
        },
        {
            "date": "2011-05-15T13:43:15+0000",
            "content": "SentinelIntSet rehashes itself... so why do we need to alloc it to the max possible values up front?\nActually we don't. I will remove it. \n\nit'd be great to fold this collector in the random test in TestGrouping\nNo problem. I will fold it into the random test. ",
            "author": "Martijn van Groningen",
            "id": "comment-13033687"
        },
        {
            "date": "2011-05-15T14:00:37+0000",
            "content": "OK thanks Martijn!  The new collector looks great. ",
            "author": "Michael McCandless",
            "id": "comment-13033691"
        },
        {
            "date": "2011-05-15T17:35:30+0000",
            "content": "Attached new patch.\n\n\tAdded total count collector to random tests\n\tRemoved calculating max possible values upfront. Instead I added a initial size instead. A larger initial size results in less rehashing. Handy if you know more or less the number of groups upfront.\n\n\n\nI'm nervous that you pull a top level DocTermsIndex just to get the max number of unique groups.\nI should have been nervous too! Turns out that the average heap usage is now around 59MB. A decrease of heap usage around 50%!\n\nThe random tests are really valuable! I found a bug with it. Group with null values weren't handled properly. Changing the random test was a bit difficult for me. So I think it is good if you take a look at it. ",
            "author": "Martijn van Groningen",
            "id": "comment-13033790"
        },
        {
            "date": "2011-05-15T18:05:11+0000",
            "content": "Patch looks great!  And the changes to TestGrouping look spot on \u2013\nyou randomly swap in the TotalGroupCountCollector (via MultiCollector) and\nassert that slowGrouping matches.\n\n\n\tMaybe only one ctor for TopGroups?  (Ie, we just pass in null as\n    totalGroupCount).  I'm wary of ctor explosion over time...\n\n\n\n\n\tIn TestGrouping, you don't need a separate uniqueGroupCount int?\n    Can't you just use knownGroups.size() in the end?\n\n\n\n\n\tFor TotalGroupCountCollector, in the jdocs for the ctor maybe\n    state that caller should set initialSize to rough estimate of how\n    many uniuqe groups are expected, but that this uses up 4 bytes *\n    initialSize?  Maybe we should also add a ctor that sets a default\n    for this (128?) and mark the other ctor as expert?\n\n\n\nHmm, it's a little odd to have TopGroups hold the totalGroupCount?\nIe, it's only the test case that makes use of this, because the 2nd\npass collector just sets it to null?  It'd be nice to find some way to\nhave 2nd pass collector be able to set this... ",
            "author": "Michael McCandless",
            "id": "comment-13033794"
        },
        {
            "date": "2011-05-15T18:06:32+0000",
            "content": "\nI'm nervous that you pull a top level DocTermsIndex just to get the max number of unique groups.\n\nI should have been nervous too! Turns out that the average heap usage is now around 59MB. A decrease of heap usage around 50%!\n\nRight, we should avoid pulling FieldCache entries for top level reader, since it doubles the RAM usage if you also pull per-segment (as we do here).  Also, it's rather CPU costly to compute \u2013 does a merge sort of all terms in the index. ",
            "author": "Michael McCandless",
            "id": "comment-13033795"
        },
        {
            "date": "2011-05-15T18:08:28+0000",
            "content": "The random tests are really valuable! I found a bug with it. Group with null values weren't handled properly.\n\nOh, I'm glad to hear that   I had just added testing of the null case...\n\nWe are big fans of randomized testing \u2013 I wrote about this here: http://blog.mikemccandless.com/2011/03/your-test-cases-should-sometimes-fail.html ",
            "author": "Michael McCandless",
            "id": "comment-13033796"
        },
        {
            "date": "2011-05-15T19:13:10+0000",
            "content": "\n\n\tMaybe only one ctor for TopGroups?  (Ie, we just pass in null as\n   totalGroupCount).  I'm wary of ctor explosion over time...\n\n\n\n\n\tIn TestGrouping, you don't need a separate uniqueGroupCount int?\n   Can't you just use knownGroups.size() in the end?\n\n\n\n\n\tFor TotalGroupCountCollector, in the jdocs for the ctor maybe\n   state that caller should set initialSize to rough estimate of how\n   many uniuqe groups are expected, but that this uses up 4 bytes *\n   initialSize?  Maybe we should also add a ctor that sets a default\n   for this (128?) and mark the other ctor as expert?\n\n\nI agree. I've updated the patch.\n\n\nHmm, it's a little odd to have TopGroups hold the totalGroupCount?\nIe, it's only the test case that makes use of this, because the 2nd\npass collector just sets it to null?  It'd be nice to find some way to\nhave 2nd pass collector be able to set this...\nThat would be nice. Future collectors might need something similar. I'm currently think about a TopGroupsEnrich interface that collectors can implement. This allows them to add data to the TopGroups like total group count. The SecondPassGroupingCollector has a list of collectors that implement the TopGroupsEnrich interface. When the getTopGroups() method is executed it iterates of the these collectors and the TopGroups is enriched with data. Downside is that the fields inside TopGroups can't be final and properly we need setters. I think if we do something like this we should do this in a new Jira issue.  ",
            "author": "Martijn van Groningen",
            "id": "comment-13033801"
        },
        {
            "date": "2011-05-15T20:02:20+0000",
            "content": "Last but not least: the 3x branch backport. ",
            "author": "Martijn van Groningen",
            "id": "comment-13033805"
        },
        {
            "date": "2011-05-16T09:39:22+0000",
            "content": "Patch looks great Martijn; thanks!\n\nMaybe, until we work out how multiple collectors can \"update\" a single TopGroups result, we should make TopGroups' totalGroupCount changeable after the fact?  Ie, add a setter?  This way apps can at least do it themselves before passing the TopGroups onto consumers within the apps?\n\nAlso, could you update the code sample in package.html, showing how to also use the TotalGroupCountCollector, incl. setting this totalGroupCount in the TopGroups? ",
            "author": "Michael McCandless",
            "id": "comment-13033937"
        },
        {
            "date": "2011-05-16T10:02:12+0000",
            "content": "I will update both patches today. A setter in TopGroups for now seems fine to me. ",
            "author": "Martijn van Groningen",
            "id": "comment-13033943"
        },
        {
            "date": "2011-05-16T10:07:06+0000",
            "content": "One more idea: should we add a getter to TotalGroupCountCollector so you can actually get the groups (Collection<BytesRef>) themselves...?  (Ie, not just the total unique count). ",
            "author": "Michael McCandless",
            "id": "comment-13033946"
        },
        {
            "date": "2011-05-16T14:03:58+0000",
            "content": "Hmmm... So you get a list of all grouped values. That can be useful. Only remember that doesn't tell anything about the group head (most relevant document of a group), since we don't sort inside the groups. ",
            "author": "Martijn van Groningen",
            "id": "comment-13034025"
        },
        {
            "date": "2011-05-16T14:51:06+0000",
            "content": "Right, we'd make it clear the collection is unordered.\n\nIt just seems like, since we are building up this collection anyway, we may as well give access to the consumer? ",
            "author": "Michael McCandless",
            "id": "comment-13034040"
        },
        {
            "date": "2011-05-16T15:08:16+0000",
            "content": "That is true. It is just a simple un-orded collection of all values of the group field that have matches the query. I'll include this as well. ",
            "author": "Martijn van Groningen",
            "id": "comment-13034050"
        },
        {
            "date": "2011-05-16T18:11:07+0000",
            "content": "Attached patch with the discussed changes.\n3x patch follows soon. ",
            "author": "Martijn van Groningen",
            "id": "comment-13034165"
        },
        {
            "date": "2011-05-16T19:05:36+0000",
            "content": "Attached a new patch.\n\n\n\tRenamed TotalGroupCountCollector to AllGroupsCollector. This rename reflects more what the collector is actual doing.\n\tGroup values are now collected in an ArrayList instead of a LinkedList. The initialSize is now also used for the ArrayList.\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13034204"
        },
        {
            "date": "2011-05-16T19:22:03+0000",
            "content": "Looks great Martijn!\n\nI'll commit in a day or two if nobody objects... ",
            "author": "Michael McCandless",
            "id": "comment-13034214"
        },
        {
            "date": "2011-05-16T19:37:33+0000",
            "content": "Great! Attached the 3x backport. ",
            "author": "Martijn van Groningen",
            "id": "comment-13034227"
        },
        {
            "date": "2011-05-16T19:57:01+0000",
            "content": "Thanks Martijn!!  But, in general, you don't have to do the 3.x backport   I can do it too...\n\nWe want to minimize the effort for people to contribute to Lucene/Solr!\n\nBut thank you for backporting! ",
            "author": "Michael McCandless",
            "id": "comment-13034247"
        },
        {
            "date": "2011-05-17T17:35:14+0000",
            "content": "Committed.  I made a small change to TestGrouping (renamed one variable) and tweaked jdocs a bit on AllGroupsCollector.\n\nThis is a great addition to the grouping module \u2013 thanks Martijn! ",
            "author": "Michael McCandless",
            "id": "comment-13034909"
        },
        {
            "date": "2011-06-03T16:37:19+0000",
            "content": "Bulk closing for 3.2 ",
            "author": "Robert Muir",
            "id": "comment-13043517"
        }
    ]
}