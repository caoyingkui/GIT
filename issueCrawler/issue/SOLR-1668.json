{
    "id": "SOLR-1668",
    "title": "Declarative configuration meta-data for Solr plugins",
    "details": {
        "affect_versions": "1.4",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The idea here is for plugins in Solr to carry more meta data over their configuration. This can be very useful for building tools around Solr where this meta data can be used to assist users in configuring solr. One common mechanism to provide this meta data is by using standard Java Beans for the different configuration constructs where the properties define the configurable attributes and annotations are used to provide extra information about them.",
    "attachments": {
        "SOLR-1668.patch": "https://issues.apache.org/jira/secure/attachment/12428380/SOLR-1668.patch",
        "commons-beanutils-1.8.2.jar": "https://issues.apache.org/jira/secure/attachment/12428381/commons-beanutils-1.8.2.jar"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uri Boness",
            "id": "comment-12792268",
            "date": "2009-12-18T01:15:18+0000",
            "content": "This patch provides Java Bean configuration for all MapInitializedPlugins. To showcase this functionality, I changed the TokenizerFactory to implement the MapInitializedPlugin interface and changed the PatternTokenizerFactory to use the new Java Bean configuration. This implementation depends on the commons-beanutils library which should be added to the lib directory. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12792298",
            "date": "2009-12-18T02:13:20+0000",
            "content": "That's getting warmer, Uri!   Good stuff.\n\nWhat I'd ideally like to see, and of course this comes from my view that Ant has the answer to all Java coding roadblocks, is the plugins themselves, say MyCustomTokenizer(Factory) having metadata about its parameters through good ol' setters (or ctor introspection, but setters allow more flexibility).  For example, our great friend the <java> task, documented here - http://ant.apache.org/manual/CoreTasks/java.html and it's underlying source code - http://svn.apache.org/repos/asf/ant/core/trunk/src/main/org/apache/tools/ant/taskdefs/Java.java\n\nNotice setters/creators/adders (setX, createY, addZ named methods).  Metadata about the type of the parameter is natural... so for example MyCustomTokenFilter that adjusted token text could have a setKeepOriginal(boolean b) method. \n\nWith this sort of magic, we could generate not only documentation but admin GUIs that could introspect arbitrary plugins and create checkboxes, or drop-down pickers, or file picker, etc.\n\nSo, again, getting warmer, but it ain't Ant yet  "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12792312",
            "date": "2009-12-18T02:57:18+0000",
            "content": "Thanks! Well... no it's not Ant yet or Spring, but it's a start that can already help with Tokenizers & Filters. The current patch is actually based on setters but adding annotations on top of them can add even more meta data. For example, marking a property as required or associating a different configuration name perhaps to differentiate user friendly naming from code friendly naming (How does Ant deal with these stuff?). "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12792329",
            "date": "2009-12-18T04:26:51+0000",
            "content": "Yeah, for sure annotations make sense to leverage here for part of it.  \n\nAs for user vs. code friendly - I'm of the opinion that they can be one and the same basically.  setStopWordFile(SolrFile f) has a lot of metadata in it.  Why not simply File?  I just figured we might want to abstract that one step from file system directness.\n\n@Required makes sense for mandatory ones, indeed.  This is (with my dated knowledge of Ant internals) where Ant does the runtime kinda validation in the execute() method for a Task.  Maybe they've gone a step further with annotations now?  \n\nAnd having a mechanism to override the parameter name or key, sure - but as much should be induced from the method signature as possible.  Making it a rich descriptive interface. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12792335",
            "date": "2009-12-18T04:30:58+0000",
            "content": "Also note that Ant's configuration mechanism isn't just with setters.  A <java> task for example can take any number of <sysproperty> sub-elements, and they get \"injected\" via addSysproperty(Environment.Variable sysp).\n\nSpring isn't even that clever, is it?    (probably is and I'm just making myself look foolish, huh?) "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12792339",
            "date": "2009-12-18T04:46:04+0000",
            "content": "In looking at your patch in more detail, we're actually not far from agreeing.  It's the specifying of the converter class in the annotation that I don't like.  It can be more implicit than that, like \"magic\".  public void setPattern(Pattern pattern) - perfect, we agree 100% on that!\n\nSure, there's always some String -> Object converter in the process, as this config will come from strings almost always.  But no need to clutter the plugin itself with converters.  Make sense? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12792341",
            "date": "2009-12-18T04:54:29+0000",
            "content": "Another thought here is to make these configurations later-bound, if that makes sense.  Suppose I want something like: stopWordFile=\"${company.code}_stopwords.txt\"\n\nMaybe a bit of a stretch of an example, with the fabricated idea that you want to have a single Solr configuration (schema, etc) and be able to launch multiple solr instances (can you do this with per-core params too?  maybe so) that use the same config, but use a different stop word list.    \n\nWe'd have setStopWordList(SolrFile f), and we'd only that setter after the system properties were in the mix.  \n\nMaybe this is neither here nor there as far as this issue is concerned, as the property substitution is at a previous step no matter what, just wanted to make sure this use case is kept in mind too. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12792425",
            "date": "2009-12-18T10:26:47+0000",
            "content": "This can be very useful for building tools around Solr where this meta data can be used to assist users in configuring solr. \n\nis there anyone building it?\n\nWhat else is the value add other than exposing metadata to tools?\n\npublic void setPattern(Pattern pattern) - perfect, we agree 100% on that! public void setPattern(Pattern pattern) - perfect, we agree 100% on that!\n\nWhy do we need this magic in String-> Object conversion at all?  "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12792454",
            "date": "2009-12-18T12:33:32+0000",
            "content": "@Erik\n\n\nAlso note that Ant's configuration mechanism isn't just with setters. A <java> task for example can take any number of <sysproperty> sub-elements, and they get \"injected\" via addSysproperty(Environment.Variable sysp). \n\nSystem properties can be supported in 2 ways:\n1. On the configuration level using an expression language (a la Spring... yes.. Spring supports it ). This means that in the schema you'll be able to configure properties like: stopWordFile=\"${conf.dir}/stopwords.txt\". the \"conf.dir\" parameter can be replaced either from system properties, properties file, or other source. Eventually these properties  \n2. Using another annotation (say, @SystemProperty) which indicates the value should first be taken from the system properties and then converted to the required data type\n\nIt's the specifying of the converter class in the annotation that I don't like. It can be more implicit than that, like \"magic\"\n\nThe @Converter annotation is mainly aimed for user extensions. Indeed all the out-of-the-box plugins don't need to have it as default converters can be pre-registered to handle all the data types we need at the moment. For users who want to provide their own plugins, we need to provide them a simple mechanism to register converters and I found the @Converter annotation to be the simplest one.\n\nWe'd have setStopWordList(SolrFile f), and we'd only that setter after the system properties were in the mix. \nAs you said, I believe once we have system properties supported this will be a no brainer and indeed I believe this belongs to an earlier \"properties substitution\" phase (as mentioned above).\n\n@Noble\n\nis there anyone building it?\nOh yes , but beyond that, this will open up opportunities to develop plugins to IDE's/TextEditors for Solr... even just for better support in writing the schema files with auto-completion, validation, etc...\n\nWhy do we need this magic in String-> Object conversion at all? \nWell, my obvious response is because of the nature of Solr configuration which is text based while at runtime you're dealing with other data types. Of course you can just create String setters and do the conversion yourself, but why do that if you can have done automatically and keep your classes clean. Just to be clear, the magic is not really \"magic\" we can be very clear about what converters are supported out of the box and (as I mentioned above) with the @Converter annotation users can be more explicit in how they want the conversion to take place. Bottom line, in the end of the day you want to be able to focus and write the plugins as POJO's  using properties of the correct data types and focus on the plugin's logic rather than also focusing on configuration logic. \n\n "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12792743",
            "date": "2009-12-19T01:18:05+0000",
            "content": "In this patch I removed the need for the @InitProperty annotation. Instead any setter in the class will be considered as an initialization property. You can use the @Required annotation to mark properties as mandatory and the @ArgumentName to customize the name of the argument used to initialize it. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872593",
            "date": "2010-05-27T22:08:28+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043838",
            "date": "2011-06-03T16:47:19+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106298",
            "date": "2011-09-16T14:50:27+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234757",
            "date": "2012-03-21T18:09:12+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717444",
            "date": "2013-07-23T18:48:15+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971143",
            "date": "2014-04-16T12:57:16+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}