{
    "id": "LUCENE-1602",
    "title": "Rewrite TrieRange to use MultiTermQuery",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/other"
        ],
        "type": "New Feature",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Issue for discussion here: http://www.lucidimagination.com/search/document/46a548a79ae9c809/move_trierange_to_core_module_and_integration_issues\n\nThis patch is a rewrite of TrieRange using MultiTermQuery like all other core queries. This should make TrieRange identical in functionality to core range queries.",
    "attachments": {
        "LUCENE-1602.patch": "https://issues.apache.org/jira/secure/attachment/12405419/LUCENE-1602.patch",
        "queries.zip": "https://issues.apache.org/jira/secure/attachment/12405438/queries.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-04-14T14:22:16+0000",
            "content": "Here the patch:\n1. There are some changes to FilterTermEnum in core:\n\n\tMake the private members protected, to have access to them from the very special TrieRangeTermEnum\n\tFix a small inconsistency (docFreq() now only returns a value, if a valid term is existing)\n\tAll core tests pass\n\n\n\n2. TrieRange patch:\n\n\tNew TrieRangeQuery classes\n\tTrieRangeFilter is now only a wrapper (like in core)\n\tThe work is done in package-private TrieRangeTermEnum. This was really a fun to implement this: It started with a very large and complicated version that got simplier and simplier at the end. I am really happy with it now. Maybe a extra test for the \"special cases\" should be added\n\n\n\nSome additional comments:\nThe functions that return the unique term count hit during executing query/filter is implemented as a counter in the enum that counts all valid terms in termCompare(). Maybe this information is also interesting for other MultiTermQueries. How about counting this directly in MultiTermQuery for all such queries and export the method there? It would be really nice, to get e.g. the number of terms for a classical range query, to see the improvement. I could patch the MultiTermQuery to do this internally. Any comments about that?\n\nThe package and class names are still contrib-like as before. A move to core would rename the classes as discussed. ",
            "author": "Uwe Schindler",
            "id": "comment-12698783"
        },
        {
            "date": "2009-04-14T14:28:49+0000",
            "content": "An additional extension to MultiTermQuery:\nThe original version of TrieRange had a shortcut in the getDocIdSet call: If the range was inverse and would return for sure no documents, it returned the DocIdSet.EMPTY_DOCID_SET instance and did not allocate any OpenBitSet. MultiTermQuery could also do this automatically, if the FilteredTermEnum is empty from the beginning (simple check before allocating the bitset). This would be a nice memory-friendly imporvement. I could try to implement this in MultiTermQuery's getDocIdSet(). ",
            "author": "Uwe Schindler",
            "id": "comment-12698784"
        },
        {
            "date": "2009-04-14T14:50:13+0000",
            "content": "It'd be great to do both the EMPTY_DOCID_SET optimization and the getTermCount() addition to MultiTermQuery. ",
            "author": "Michael McCandless",
            "id": "comment-12698792"
        },
        {
            "date": "2009-04-14T16:33:14+0000",
            "content": "For some reason, I'm having trouble applying this patch \u2013 alot of failures:\n\npatch -p0 < patch.x\npatching file contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter.java\nHunk #1 FAILED at 18.\n1 out of 1 hunk FAILED -- saving rejects to file contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeFilter.java.rej\npatching file contrib/queries/src/java/org/apache/lucene/search/trie/AbstractTrieRangeQuery.java\npatching file contrib/queries/src/java/org/apache/lucene/search/trie/IntTrieRangeFilter.java\nHunk #1 FAILED at 17.\nHunk #2 FAILED at 39.\n2 out of 2 hunks FAILED -- saving rejects to file contrib/queries/src/java/org/apache/lucene/search/trie/IntTrieRangeFilter.java.rej\npatching file contrib/queries/src/java/org/apache/lucene/search/trie/IntTrieRangeQuery.java\npatching file contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter.java\nHunk #1 FAILED at 17.\nHunk #2 FAILED at 39.\n2 out of 2 hunks FAILED -- saving rejects to file contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeFilter.java.rej\npatching file contrib/queries/src/java/org/apache/lucene/search/trie/LongTrieRangeQuery.java\npatching file contrib/queries/src/java/org/apache/lucene/search/trie/package.html\npatching file contrib/queries/src/java/org/apache/lucene/search/trie/TrieRangeTermEnum.java\npatching file contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter.java\nReversed (or previously applied) patch detected!  Assume -R? [n] n\nn\nApply anyway? [n] n\nn\nSkipping patch.\n1 out of 1 hunk ignored -- saving rejects to file contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeFilter.java.rej\npatching file contrib/queries/src/test/org/apache/lucene/search/trie/TestIntTrieRangeQuery.java\npatching file contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeFilter.java\npatching file contrib/queries/src/test/org/apache/lucene/search/trie/TestLongTrieRangeQuery.java\npatching file src/java/org/apache/lucene/search/FilteredTermEnum.java\n\n\n\nUwe, is your area up to date?  How did you generate the diff? ",
            "author": "Michael McCandless",
            "id": "comment-12698823"
        },
        {
            "date": "2009-04-14T16:47:04+0000",
            "content": "New patch that includes new tests: \n\n\tEMPTY_DOCIDSET case on inverse range\n\ta comparison of TrieRange and classic Range in term numbers\n\n\n\nThe patch LUCENE-1603 must be applied before. ",
            "author": "Uwe Schindler",
            "id": "comment-12698827"
        },
        {
            "date": "2009-04-14T16:49:32+0000",
            "content": "Hi Mike:\nI'm up-to-date. Maybe its the old problem of TortoiseSVN on Windows: It generates CR-LF instead of LF alone. dostounix should help. I always apply patches using the TortoiseSVN merge function (that also keeps track of correct local versions from patch header and merges alltogether). ",
            "author": "Uwe Schindler",
            "id": "comment-12698828"
        },
        {
            "date": "2009-04-14T17:09:27+0000",
            "content": "Hmm it's not the end-of-line issue (though I see that the files are all DOS; we should fix with \"svn propset svn:eol-style native contrib/queries/src/java/org/apache/lucene/search/trie/*.java\" after we've committed these changes); when I normalize the EOLs it's failing in the same way.  Odd.\n\nCan you instead post a tar file w/ your current *.java? ",
            "author": "Michael McCandless",
            "id": "comment-12698837"
        },
        {
            "date": "2009-04-14T17:30:19+0000",
            "content": "Here a ZIP file with the source and tests only of the trie package. Please note: two test files were removed by the patch, so you must remove them by hand.\n\nI tried to patch a fresh checkout of trunk without problems. TortoiseMerge patched all files without problems. ",
            "author": "Uwe Schindler",
            "id": "comment-12698842"
        },
        {
            "date": "2009-04-14T19:53:31+0000",
            "content": "These changes look good on quick pass.  I can't compile/test based on the zip (since we renamed the new method), but I like the new approach. ",
            "author": "Michael McCandless",
            "id": "comment-12698897"
        },
        {
            "date": "2009-04-14T20:50:30+0000",
            "content": "Here updated files. It also fixes a bug in the tests (filter term count was incorrect) ",
            "author": "Uwe Schindler",
            "id": "comment-12698921"
        },
        {
            "date": "2009-04-14T21:34:36+0000",
            "content": "OK all tests pass for me!  Looks good. ",
            "author": "Michael McCandless",
            "id": "comment-12698948"
        },
        {
            "date": "2009-04-15T06:35:51+0000",
            "content": "This patch adds some missing getter methods in filter variant. The ZIP file is not added, as this methods are not really needed for testing, just for completeness. ",
            "author": "Uwe Schindler",
            "id": "comment-12699084"
        },
        {
            "date": "2009-04-16T12:12:50+0000",
            "content": "This is the final patch, with the changes for LUCENE-1603. I also added svn:eol-style to all files in trie and test-trie.\nBecause this is not yet committed, the patch may still fail to apply, but I will commit in the next few hours. ",
            "author": "Uwe Schindler",
            "id": "comment-12699667"
        },
        {
            "date": "2009-04-16T12:59:18+0000",
            "content": "Committed revision 765618. ",
            "author": "Uwe Schindler",
            "id": "comment-12699689"
        },
        {
            "date": "2009-04-23T17:08:54+0000",
            "content": "Fixed the incomplete hashcode(), equals() and toString() of TrieRangeQueries in revision 767982. ",
            "author": "Uwe Schindler",
            "id": "comment-12702013"
        }
    ]
}