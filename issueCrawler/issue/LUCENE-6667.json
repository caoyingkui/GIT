{
    "id": "LUCENE-6667",
    "title": "Custom attributes get cleared by SynonymFilter",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.10.4",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "I believe the Lucene API enables users to define their custom attributes (by extending AttributeImpl) which may be added by custom Tokenizers. \nIt seems, the clear and copyTo methods must be implemented to clear and restore the state of this custom attribute.\n\nHowever, some filters (in our case the SynonymFilter) simply call AttributeSource.clearAttributes without invoking copyTo. Instead the filter just resets some known attributes, simply ignoring all other custom attributes. In the end our custom attribute value is lost.\n\nIs this a bug in SynonymFilter (and others) or are we using the API in the wrong way?\n\nA solution might be of course to provide empty implementations of clear and copyTo, but I'm not sure if this has other unwanted effects.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14618292",
            "author": "Michael McCandless",
            "date": "2015-07-08T09:35:35+0000",
            "content": "Hmm, SynonymFilter tries to preserve all attributes of the original incoming tokens (it uses capture/restoreState to do this).\n\nBut for the new tokens it inserts, it does use clearAttributes to make a completely blank slate, and then sets the term, offset, posInc/Length etc.\n\nWhich tokens (original input tokens vs. the inserted ones) are missing your custom attribute? "
        },
        {
            "id": "comment-14618309",
            "author": "Uwe Schindler",
            "date": "2015-07-08T09:54:25+0000",
            "content": "In filters the approach should be the following:\n\n\tOf the original token capture the state\n\twhen you insert new tokens, restore the state instead of clearAttributes()\n\tset the \"changed\" attributes\n\n\n\nThis approach is used by stemmers that insert stemmed tokens (preserve original), so the original attributes keep alive.\n\nclearAttributes should only be called in Tokenizers or root TokenStreams. "
        },
        {
            "id": "comment-14618312",
            "author": "Uwe Schindler",
            "date": "2015-07-08T09:56:22+0000",
            "content": "I have not looked at SynonymFilter, but maybe there is a bug. In general the above is how all filters should call. Maybe we should somehow add some assertions that Filters never call clearAttributes(), but this is hard because of shared state between filters and root. "
        },
        {
            "id": "comment-14618512",
            "author": "Michael McCandless",
            "date": "2015-07-08T12:29:22+0000",
            "content": "when you insert new tokens, restore the state instead of clearAttributes()\n\nBut e.g. if syn filter matched \"domain name system\" and wants to insert \"dns\" which token's attributes is it supposed to clone for the \"dns\" token? "
        },
        {
            "id": "comment-14618515",
            "author": "Uwe Schindler",
            "date": "2015-07-08T12:35:23+0000",
            "content": "But e.g. if syn filter matched \"domain name system\" and wants to insert \"dns\" which token's attributes is it supposed to clone for the \"dns\" token?\n\nThat's the problem with the multi word synonyms... It has to be defined (first, last,...). But I am not sure what the right thing to do is! "
        },
        {
            "id": "comment-14618517",
            "author": "Oliver Becker",
            "date": "2015-07-08T12:39:00+0000",
            "content": "Ah, ok, now I understand. Yes, this happens for tokens that will be replaced by the synonym filter, i.e. for inserted tokens (and it is a single token replacement). But I see the problem. "
        },
        {
            "id": "comment-14618542",
            "author": "Michael McCandless",
            "date": "2015-07-08T13:04:59+0000",
            "content": "Maybe we could special case the single-token case to always clone the attrs from the token it matched? "
        },
        {
            "id": "comment-14618574",
            "author": "Robert Muir",
            "date": "2015-07-08T13:29:23+0000",
            "content": "you never know what the attribute is doing. this might be inappropriate.\n\nI don't think we should change it for synonymfilter in an inconsistent way, because it will be confusing, and then be confusing for other tokenfilters too. "
        },
        {
            "id": "comment-14618951",
            "author": "David Smiley",
            "date": "2015-07-08T17:11:28+0000",
            "content": "Yeah, it could be appropriate or it could be inappropriate; there is no API/mechanism for an attribute to specify what it wants.  I think it's better to err on copying the attribute state for inserted tokens from the (first) input token, versus dropping attribute state.  It needn't be done in an \"inconsistent\" way \u2013 we could do it in a documented consistent way \u2013 such as take from the first token.  I've had to work around this problem (also in WordDelimiterFilter, and CommonGrams) with ugly hacks in a custom attribute \u2013 e.g. the clear() method not actually clearing, with my custom Tokenizer controlling the actual clearing.\n\nAs an aside, when I was doing some custom attribute stuff, I couldn't help but think our approach to saving attribute state seemed a little heavy, since a call to capture() creates a linked list to hold each attribute impl.  Maybe the state could be re-used with some ref-counting.  I dunno. "
        }
    ]
}