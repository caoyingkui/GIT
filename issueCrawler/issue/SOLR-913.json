{
    "id": "SOLR-913",
    "title": "org/apache/solr/handler/SnapPuller.java  - Expensive Pattern object made static (HttpClient object too )",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "replication (java)"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In the class -  org.apache.solr.handler.SnapPuller - there seems to be an expensive Pattern object created locally in the method \n\n  static Integer readInterval(String interval) ; \n\nPattern instances are better created as static objects and reused.\n\nThe same is true for HttpClient instances. These are one per core right now. We can make that static too.",
    "attachments": {
        "SOLR-913.patch": "https://issues.apache.org/jira/secure/attachment/12396034/SOLR-913.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karthik K",
            "id": "comment-12656414",
            "date": "2008-12-14T17:16:56+0000",
            "content": "Pattern object is a static object instead of being created locally in a function since the regex pattern object is very expensive to create.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12656419",
            "date": "2008-12-14T17:43:23+0000",
            "content": "this object is used only in the startup a couple of times  It is better to use it and throw away rather than holding on to the reference forever "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12656422",
            "date": "2008-12-14T17:50:41+0000",
            "content": "this object is used only in the startup a couple of times It is better to use it and throw away rather than holding on to the reference forever\n\nI just committed this, too trigger happy you see \n\nBut I see your point, this method is used on startup only. Is it worth reverting this change? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12656423",
            "date": "2008-12-14T18:01:46+0000",
            "content": "Marking as won't fix because the readInterval method is called only on core startup and it is better to create and throw away Pattern object rather then keep it in static.\n\nThanks for going through the code Kay, please keep the suggestions coming  "
        },
        {
            "author": "Karthik K",
            "id": "comment-12656426",
            "date": "2008-12-14T18:09:20+0000",
            "content": "The bigger problem that we are trying to address on our end is a fast SolrCore shutdown and restart and this is part of the bigger picture. \n\nPattern objects are notoriously heavy to create. \n\nIf necessary - they could be wrapped around as a resource handler that can set the static reference to null after the last use so that the static reference does not take up the space.  \n\nAllowing this to persist because we have 2 calls might affect the scalability as some other piece of code , inadvertently uses the same.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12656429",
            "date": "2008-12-14T18:15:06+0000",
            "content": "The bigger problem that we are trying to address on our end is a fast SolrCore shutdown and restart and this is part of the bigger picture.\nThis does not cause longer shutdowns. If it is used only once in the lifetime of a core, why would we need to keep it around all the time?\n\nIf necessary - they could be wrapped around as a resource handler that can set the static reference to null after the last use so that the static reference does not take up the space.\nAs Noble pointed out, it is not used more than once. Keeping it static and then nulling the reference after the only use, serves no purpose.\n\nAllowing this to persist because we have 2 calls might affect the scalability as some other piece of code , inadvertently uses the same.\nI do not understand this point at all. "
        },
        {
            "author": "Karthik K",
            "id": "comment-12656432",
            "date": "2008-12-14T18:28:54+0000",
            "content": "It causes longer time to restart in terms of recreating the heavy Pattern object once again. \n\nThere is a difference between keeping a static reference pointing to a live object and setting it to null . In the case of the latter - it definitely frees up the memory on a good implementation. \n\nI meant to say  that - if there were to be another piece of code , that inadvertently - calls this piece of code  once again by creating additional Pattern objects would be suicidal. These are not random starting pain points that I am encountering in the startup but rather in the descending order of the time from profiling the shutdown / startup process. \n\nWhile I believe the concern about static Pattern object is misplaced - we can implement a global ResourceMap with Key as String, Object and the users of the Resources removing entries from the Map after they are used . This is pretty standard across projects in the sense it addresses the issue of duplicate creation of resources and the issue of releasing the resources after the last use.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12656434",
            "date": "2008-12-14T18:35:59+0000",
            "content": "if there were to be another piece of code , that inadvertently - calls this piece of code once again by creating additional Pattern objects would be suicidal\n\nthere is no other piece of code currently calling it inside Solr.\n\nThere is a tradeoff of complexity Vs. perf advantage\n\nMaintaining a large system such as Solr is hard as it is. So we have to keep in mind that we keep the code simpler. Unless there is a known issue let us not solve it now and add complexity\n "
        },
        {
            "author": "Karthik K",
            "id": "comment-12656469",
            "date": "2008-12-14T21:40:02+0000",
            "content": "As mentioned earlier - this is a bottleneck got from profiling.   By providing better abstractions - we can move make complex systems more tractable.  Performance advantage, for something as big as a regex object, is  not something that should not be sacrificed here in this case. \n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12656485",
            "date": "2008-12-14T22:25:09+0000",
            "content": "How many cores how often?   Does changing it to static make any mesurable difference?\n\nA bottleneck has to be somewhere \u2013 perhaps it is not really an issue (i don't know if it is or is not) \u2013 it sounds like this was designed thinking the function is called infrequently while your use case is different... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12656534",
            "date": "2008-12-15T03:25:02+0000",
            "content": "As mentioned earlier - this is a bottleneck got from profiling\n\nProfiling tools alone cannot be used to make a judgment because they are dumb and just spits out suggestions on the basis of a few rules. While it is useful, we need to study the environment in which the code is run and  a it is good to have better understanding of a system to make relevant changes. \nIt is also worthwhile to run the system and see the real-world impact .\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12656571",
            "date": "2008-12-15T08:17:34+0000",
            "content": "Is it true that you have a large no:of cores and you start/stop them very frequently and the start/stop performance is a concern for you? "
        },
        {
            "author": "Karthik K",
            "id": "comment-12656711",
            "date": "2008-12-15T19:28:25+0000",
            "content": " > Is it true that you have a large no:of cores and you start/stop them very frequently and the start/stop performance is a concern for you? \n\nUnfortunately yes. Hence my focus has been primarily on profiling the code path to start the solr system  and hence to stress this. I agree with your concern about having static objects being live (after their intended use ) affecting memory but may be that could be grouped under ResourceMap but recreating the Pattern object , internally with all the NFA graph compilation would be better to be optimized as against the memory constraint. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12656872",
            "date": "2008-12-16T03:58:28+0000",
            "content": "OK. In that case this is a valid concern . It is better off to make it a static object so that every core startup can reuse the same instance.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12656888",
            "date": "2008-12-16T05:41:03+0000",
            "content": "HttpClient can be made static too in that case. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12656892",
            "date": "2008-12-16T05:51:39+0000",
            "content": "Attached patch changes HttpClient to static as well so that connections may be shared in cases of multiple cores. "
        },
        {
            "author": "Karthik K",
            "id": "comment-12657017",
            "date": "2008-12-16T15:26:08+0000",
            "content": "Shalin - the new patch looks good. Thanks for helping with it. \n\nThanks everybody in the thread for the discussions regarding this.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12657361",
            "date": "2008-12-17T12:07:15+0000",
            "content": "Committed revision 727354.\n\nThanks Kay! "
        }
    ]
}