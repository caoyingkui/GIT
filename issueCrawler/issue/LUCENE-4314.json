{
    "id": "LUCENE-4314",
    "title": "The specification of DocIdSetIterator is needlessly ambiguous.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "3.6.1,                                            4.0-BETA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Quoth Lucene at org.apache.lucene.search.DocIdSetIterator.advance:\n\n     \"Advances to the first beyond (see NOTE below) the current whose document\n      number is greater than or equal to <i>target</i>. [...]\n      NOTE:</b> when <code> target \u2264 current</code> implementations may opt\n      not to advance beyond their current \n{@link #docID()}\n.\"\n\nHowever, the same specification contradictorily states that advance must behave as if written:\n\n     int advance(int target) {\n       int doc;\n       while ((doc = nextDoc()) < target) {}\n       return doc;\n     }\n\nThat is, with at least one call to nextDoc() always made, unconditionally.\n\nThis ambiguity can lead to unexpected behavior. In fact, arguably every user of this interface that does not test after every call whether the iterator has exhausted AND has advanced is incorrect.\n\nFor example, I myself had one experimental implementation (coded against a previous Lucene release) that caused an infinite loop in PhraseScorer.java because, following the above specification, it \"opted\" not to move the iterator when advance(target) was called with target < current.",
    "attachments": {
        "DocIdSetIterator.patch": "https://issues.apache.org/jira/secure/attachment/12541624/DocIdSetIterator.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-20T07:08:10+0000",
            "content": "I think its fine to leave the behavior undefined if you advance() backwards.\n\nI already think DocIdSetIterator API is overspecified, boxing in implementations and slowing them down for stupid reasons.\n\nFor example, it should not be defined what docID() must return on an unpositioned iterator. Instead of having to make 5 or 10 codec implementations hairy here, we should fix the single broken Scorer that relies upon this behavior and declare it undefined instead. ",
            "author": "Robert Muir",
            "id": "comment-13437689"
        },
        {
            "date": "2012-08-20T13:08:40+0000",
            "content": "Hi Robert, I think you misunderstand my point. \n\nIt is not about advancing backwards (which makes no sense whatsoever in the context of a unidirectional iterator), it's about what the iterator should do when it is \"asked\" to advance backwards. \n\nThe current status is not that the behavior is unspecified. Rather it is specified in two contradictory ways. That is, the current specification allows iterator implementations to either (a) stay put, or (b) move one step forward anyway. This means that every single client of DocIdSetIterator must check for both eventualities, i.e. must contain code such as:\n\n   int doc = iter.docID();\n   while (doc != -1 && doc != NO_MORE_DOCS && doc < target) \n{\n      doc = iter.avance(target);\n      /* do useful stuff */\n   }\n\nNote the comparison doc < target in the if() clause. \n\nOne may call an API specification that forces you to go through those hoops a good one. I think it's error-prone - so prone, in fact, that PhraseScorer was doing picturesque, yet infinite, loops when applied to a \"stay put\" iterator. \n\nTo reiterate: it is not a matter of fixing \"the single broken Scorer\" - it's a about a poor API specification that forces scorers to be needlessly more complicated than they should be, under penalty of breaking for some correct implementations of the iterator API.\n\nJust specify one behavior and the problem is solved. Having the word \"opt\" in a specification is a big red flag.\n\nI won't comment on your point about docID() on an unpositioned iterator, since it does seem germane to this bug report.  ",
            "author": "Franco Callari",
            "id": "comment-13437841"
        },
        {
            "date": "2012-08-20T13:37:00+0000",
            "content": "I think i understand it enough: what I'm saying is when consumers \"abuse\" the api in any way (calling stuff on unpositioned iterators, asking to advance backwards, any of this), I think we should try to leave the behavior undefined. Otherwise it makes it much harder on these iterators.\n\n\nTo reiterate: it is not a matter of fixing \"the single broken Scorer\" - it's a about a poor API specification that forces scorers to be needlessly more complicated than they should be, under penalty of breaking for some correct implementations of the iterator API.\n\nBut it really is. If I add checks for this situation, basically its only (sloppy) PhraseScorer that does this crazy stuff (i think some spans impl might too). But its not done by exact phrase scorer, conjunction scorer, or any of that. In fact this sloppy phrase scorer does things like call advance(-1), which in my eyes is totally bogus... this is what we should fix.\n\n\nIndex: lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java\n===================================================================\n--- lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java\t(revision 1375005)\n+++ lucene/test-framework/src/java/org/apache/lucene/index/AssertingAtomicReader.java\t(working copy)\n@@ -241,6 +241,7 @@\n     @Override\n     public int advance(int target) throws IOException {\n       assert state != DocsEnumState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n+      assert target > docID() : \"consumer asked to advance backwards: \" + target + \" from: \" + docID();\n       int advanced = super.advance(target);\n       assert advanced >= 0 : \"invalid doc id: \" + advanced;\n       assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n@@ -296,6 +297,7 @@\n     @Override\n     public int advance(int target) throws IOException {\n       assert state != DocsEnumState.FINISHED : \"advance() called after NO_MORE_DOCS\";\n+      assert target > docID() : \"consumer asked to advance backwards: \" + target + \" from: \" + docID();\n       int advanced = super.advance(target);\n       assert advanced >= 0 : \"invalid doc id: \" + advanced;\n       assert advanced >= target : \"backwards advance from: \" + target + \" to: \" + advanced;\n\n ",
            "author": "Robert Muir",
            "id": "comment-13437854"
        },
        {
            "date": "2012-08-20T16:05:51+0000",
            "content": "The current status is not that the behavior is unspecified. Rather it is specified in two contradictory ways.\n\nTrue ... maybe we should just fix the javadocs to state that it's unspecified (ie remove both contradictory specifications).\n\nAnd fix the scorers that rely on the unspecified behavior...\n\nFor example, it should not be defined what docID() must return on an unpositioned iterator.\n\n+1. ",
            "author": "Michael McCandless",
            "id": "comment-13437968"
        },
        {
            "date": "2012-08-20T16:14:44+0000",
            "content": "Michael McCandless scripsit:\n> True ... maybe we should just fix the javadocs to state that it's unspecified (ie remove both contradictory specifications).\n\n+1. Where do I send the patch? ",
            "author": "Franco Callari",
            "id": "comment-13437975"
        },
        {
            "date": "2012-08-20T17:09:04+0000",
            "content": "Hi Franco, just attach the patch here.  Thanks! ",
            "author": "Michael McCandless",
            "id": "comment-13438003"
        },
        {
            "date": "2012-08-20T18:27:59+0000",
            "content": "There we go...\n\n--- lucene-4.0.0-BETA/core/src/java/org/apache/lucene/search/DocIdSetIterator.java\t2012-06-11 15:46:14.000000000 -0400\n+++ /tmp/lucene-fix/core/src/java/org/apache/lucene/search/DocIdSetIterator.java\t2012-08-20 14:25:55.000000000 -0400\n@@ -60,13 +60,17 @@\n    */\n   public abstract int nextDoc() throws IOException;\n \n-  /**\n-   * Advances to the first beyond (see NOTE below) the current whose document\n-   * number is greater than or equal to <i>target</i>. Returns the current\n-   * document number or {@link #NO_MORE_DOCS} if there are no more docs in the\n-   * set.\n+ /**\n+   * Advances to the first beyond the current whose document number is greater \n+   * than or equal to <i>target</i>, and returns the document number itself. \n+   * Exhausts the iterator and returns {@link #NO_MORE_DOCS} if <i>target</i> \n+   * is greater than the highest document number in the set.\n    * <p>\n-   * Behaves as if written:\n+   * The behavior of this method is <b>undefined</b> when called with\n+   * <code> target &le; current</code>, or after the iterator has exhausted.\n+   * Both cases may result in unpredicted behavior.\n+   * <p>\n+   * When <code> target &gt; current</code> it behaves as if written:\n    * \n    * <pre>\n    * int advance(int target) {\n@@ -79,18 +83,12 @@\n    * \n    * Some implementations are considerably more efficient than that.\n    * <p>\n-   * <b>NOTE:</b> when <code> target &le; current</code> implementations may opt\n-   * not to advance beyond their current {@link #docID()}.\n-   * <p>\n    * <b>NOTE:</b> this method may be called with {@link #NO_MORE_DOCS} for\n    * efficiency by some Scorers. If your implementation cannot efficiently\n    * determine that it should exhaust, it is recommended that you check for that\n    * value in each call to this method.\n    * <p>\n-   * <b>NOTE:</b> after the iterator has exhausted you should not call this\n-   * method, as it may result in unpredicted behavior.\n-   * <p>\n-   * \n+   *\n    * @since 2.9\n    */\n   public abstract int advance(int target) throws IOException;\n\n ",
            "author": "Franco Callari",
            "id": "comment-13438060"
        },
        {
            "date": "2012-08-20T18:33:13+0000",
            "content": "Please use the upload functionality of this Issue Tracker JIRA and upload as a file (with extension .patch or .diff): Click on \"More Actions...\" -> \"Attach Files\" and also select that you agree with Apache's License. ",
            "author": "Uwe Schindler",
            "id": "comment-13438070"
        },
        {
            "date": "2012-08-20T18:45:57+0000",
            "content": "Patch for DocIdSetIterator's advance() javadoc ",
            "author": "Franco Callari",
            "id": "comment-13438079"
        },
        {
            "date": "2012-08-20T23:56:04+0000",
            "content": "Thanks Franco, patch looks good!  I'll commit. ",
            "author": "Michael McCandless",
            "id": "comment-13438328"
        },
        {
            "date": "2012-08-20T23:57:49+0000",
            "content": "Thanks Franco! ",
            "author": "Michael McCandless",
            "id": "comment-13438331"
        },
        {
            "date": "2012-08-22T12:52:23+0000",
            "content": "Michael, you are welcome. Thanks for the quick review.  ",
            "author": "Franco Callari",
            "id": "comment-13439463"
        },
        {
            "date": "2013-05-10T10:33:05+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653823"
        }
    ]
}