{
    "id": "SOLR-12297",
    "title": "Add Http2SolrClient, capable of HTTP/1.1, HTTP/2, and asynchronous requests.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Blocking or async support as well as HTTP2 compatible with multiplexing.\n\nOnce it supports enough and is stable, replace internal usage, allowing async, and eventually move to HTTP2 connector and allow multiplexing. Could support HTTP1.1 and HTTP2 on different ports depending on state of the world then.\n\nThe goal of the client itself is to work against HTTP1.1 or HTTP2 with minimal or no code path differences and the same for async requests (should initially work for both 1.1 and 2 and share majority of code).\n\nThe client should also be able to replace HttpSolrClient and plug into the other clients the same way.\n\nI doubt it would make sense to keep ConcurrentUpdateSolrClient eventually though.\n\nI evaluated some clients and while there are a few options, I went with Jetty's HttpClient. It's more mature than Apache HttpClient's support (in 5 beta) and we would have to update to a new API for Apache HttpClient anyway.\n\nMeanwhile, the Jetty guys have been very supportive of helping Solr with any issues and I like having the client and server from the same project.",
    "attachments": {
        "SOLR-12297.patch": "https://issues.apache.org/jira/secure/attachment/12931145/SOLR-12297.patch",
        "starburst-ivy-fixes.patch": "https://issues.apache.org/jira/secure/attachment/12926205/starburst-ivy-fixes.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-01T16:14:17+0000",
            "content": "FWIW I once reconfigured Solr's Jetty to support HTTP2.  It took a little futzing around but it worked.  No programming changes needed.  I could try and dig up my config on that; I'd need to do a diff.  It was a for a POC. ",
            "author": "David Smiley",
            "id": "comment-16459809"
        },
        {
            "date": "2018-05-01T16:59:57+0000",
            "content": "It's very easy to add an HTTP2 connector to Jetty, just swap in the right config, it's a lot more work to have HTTP2 user clients and internal clients that can actually do anything with it. Our clients don't support talking to HTTP2 so I'm not sure how that would actually work unless it was single server Solr with no internal communication. The clients also need new async API options. This is about that work.\n\nOne option is Apache HttpClient 5 I guess, but I've been playing around with Jetty HttpClient instead, given there past interest and effort with helping the project and the fact that we use Jetty for the container. ",
            "author": "Mark Miller",
            "id": "comment-16459859"
        },
        {
            "date": "2018-05-01T20:52:06+0000",
            "content": "My plan for this would be done in stages:\n\nStage1: Add this new Http2SolrClient. It would initially be used with Http1.1 and serve as a better alternative to both ConcurrentUpdateSolrClient (other than for very special use cases) and HttpSolrClient. It would offer non blocking IO and async request options. It may not offer every feature of HttpSolrClient (mostly non basic auth security).\n\nStage2: Over time, Http2SolrClient offers every feature of HttpSolrClient.\n\nStage3: We replace internal usage of HttpSolrClient with Http2SolrClient. Now we can freely explore async options or changes over time.\n\nStage4: We wait for a major version to switch to Http2 from Http1.1, or we offer Http2 as an option, or use two connectors and offer Http2 on another port.\n\nStage5: We can explore taking advantage of other Http2 options that we don't get for free as we do multiplexing.\n\nStage6: We consider removing HttpSolrClient and ConcurrentUpdateSolrClient in future versions of Solr. ",
            "author": "Mark Miller",
            "id": "comment-16460140"
        },
        {
            "date": "2018-05-05T01:40:22+0000",
            "content": "I've grown even more confident we should move away from Apache's HttpClient.\n\n\tIt's been slow to support HTTP2 (support is in 5 beta currently).\n\tThere is a separate sub project called AsyncHttpClient for async support.\n\tHTTP2 is a different API than HTTP1/1.1\n\tI've never been a fan of the API itself.\n\tThe project has fairly low activity compared to Jetty.\n\n\n\nFor Jetty HttpClient\n\n\tThere is a single client for blocking and async support. That client also works for HTTP2 (although there is a lower level client as well).\n\tThe same project releases both client and server, testing them together, building them together.\n\tAnything Jetty supports or fixes will flow much faster to their own client.\n\tThere API rewrite is much nicer IMO than what Apache HttpClient has been.\n\tThe Jetty team is very responsive to our project.\n\n ",
            "author": "Mark Miller",
            "id": "comment-16464559"
        },
        {
            "date": "2018-05-05T02:07:47+0000",
            "content": "Our clients don't support talking to HTTP2 so I'm not sure how that would actually work unless it was single server Solr with no internal communication. \n\nAh, you actually could get this to work with our clients, they just wouldn't use HTTP2. I didn't know that you can serve HTTP1.1 and HTTP2 on the same port. You have to use ALPN though and that is kind of a mess before Java 9. Good to know though, that is a much nicer option for our transition to support HTTP2 than running two connectors on two ports. ",
            "author": "Mark Miller",
            "id": "comment-16464567"
        },
        {
            "date": "2018-05-05T08:03:08+0000",
            "content": "Oh nice, I was reading outdated Jetty 9 docs, the recent versions have built in support for SSL via Conscrypt. That's sweet.\n\nI think for protocol negotiation to run Http1.1 and Http2 on the same port probably still requires the alpn stuff, which means either Java 9 and passing a startup arg pointing to the boot jar. ",
            "author": "Mark Miller",
            "id": "comment-16464701"
        },
        {
            "date": "2018-05-05T09:27:00+0000",
            "content": "Actually I think it does protocol negotiation too. That remove any time based roadblocks for great http2 support. ",
            "author": "Mark Miller",
            "id": "comment-16464718"
        },
        {
            "date": "2018-05-05T16:53:50+0000",
            "content": "I'm generally on the \"TLS everywhere\" bandwagon for anything happening on the Internet.  But for internal services, especially those running java software, I think h2c is a must-have, with an option to disable it.  TLS configuration with most Java software (including Solr and Jetty) is a little messy.  I think we need to make things a lot easier than they are now before we consider https out of the box.  At the very least we need scripts to automate keystore creation and REALLY good documentation for using them.\n\nOn switching to the jetty client: Sounds good to me, especially if we're going to continue to use Jetty on the server side for the foreseeable future.  I agree that they've been a great community to work with.  The apache client seems to be very good software, and although I haven't noticed any actual problems in dealing with the httpcomponents community, the project moves very slowly.  That doesn't look like it's going to change anytime soon.\n\nOn ALPN and Java 8/9:  The docs I've read say that the conscrypt ALPN solution works in both Java 8 and Java 9, so we don't need to have different solutions for those versions.  (what do we know about Java 10?)\n\nSide thought regarding http2: For installations on a LAN, http2 is not likely to achieve much of a performance boost compared to http/1.1.  TCP/HTTP negotiation is cheap on a LAN, even when using speeds below gigabit.  We shouldn't let that be a justification for not keeping up with the advance of technology.\n\nAnother side thought: Java 8 hits the \"end of public updates\" milestone in January 2019.  I think it would be a mistake for us to consider requiring Java 9 in any release that happens this year. And I think we should stick to major releases for Java upgrades.  The upgrade to Java 7 in the 4.8 minor release did not generate the upheaval I thought it might, but that sort of change in a minor release doesn't strike me as a good idea in general. ",
            "author": "Shawn Heisey",
            "id": "comment-16464835"
        },
        {
            "date": "2018-05-05T18:12:24+0000",
            "content": "I think we need to make things a lot easier than they are now before we consider https out of the box.\nDefaulting to having TLS on out of the box is completely unrelated to this issue.\nOn ALPN and Java 8/9:\nWe don't really need to worry about it now that they don't require the ALPN boot jar stuff pre 9.\nhttp2 is not likely to achieve much of a performance boost compared to http/1.1. TCP/HTTP negotiation is cheap on a LAN\nMy motivation for http2 is not TCP/HTTP negotiation or general performance - we count on connection pooling largely, we are not an html web server - it's for things like fewer connections with multiplexing and connection stability / reuse simplicity. Of course HPACK compression and stuff is also nice to be able to use. And we may find other benefits we can take advantage of. Multiplexing is what I want most and support for that is what gives us hardier connection reuse.\nI think it would be a mistake for us to consider requiring Java 9\nWhen we move to Java 9 is also a separate issue from this JIRA and http2 wouldn't really factor in even if we needed Java9 for it, which we don't anymore. ",
            "author": "Mark Miller",
            "id": "comment-16464855"
        },
        {
            "date": "2018-05-05T18:55:02+0000",
            "content": "Keep in mind that most of what you will read or see regarding Http2 is related to standard web browser serving when we are looking to use it in the context of a client server application.\n\nThe browsers say they will will require TLS with Http2 - that is a personal decision. We won't require TLS with Http2. If you hit Solr with a browser and no TLS, it will use Http1.1. We don't care about browser->solr and the Http protocol.\n\nHttp2 also improves the performance of Http pipelining - this is the type of thing that can make a new Http2 capable client as nice as ConcurrenUpdateSolrClient but with actually good responses, especially when paired with async. The Jetty HttpClient even works in a similar manner as CUSC with per dentition queues and a thread pool and multiple connections (multiplexed with http2!).\n\nThe bulk API that puts multiple updates in a single request will still be the fastest way to bulk load, but the responses can never be good for that. You have to consider the whole batch as good or bad depending on the response and even if we added fine grained responses, for you some failure cases you would still have to treat the bulk call as a single success/fail unit.\n\nSo that is what is exciting to me and\u00a0part of why this was titled making a good client for SolrCloud. This will let us make CloudSolrServer as good as it can be. Right now it's lackluster and the alternative of using CUSC is a bitter alternative. This will also let us improve the other clients when it comes to internal communication and connection breaks and efficiency and performance, etc, etc. One Http2SolrClient makes the whole world better - even without http2, there will be improvements.\n\nWe also get better update streaming encoding than chunked and fewer connections pooled. We also get all these other little improvements. It's just a better server / client experience. ",
            "author": "Mark Miller",
            "id": "comment-16464863"
        },
        {
            "date": "2018-05-06T02:04:40+0000",
            "content": "FWIW, we did move change the minimum requirement for a point release at least once in the past (Lucene 4.8 was the first to require java 7).\n\nNot saying that's a precedent we should follow here, but at least it's been done before. ",
            "author": "Erick Erickson",
            "id": "comment-16464961"
        },
        {
            "date": "2018-05-07T02:14:38+0000",
            "content": "I'm sure that was for some special case. Http2 is never going to be a strong enough wind for a Java version change in the project. It\u00a0turns out, as mentioned above, we don't need Java 9 for good out of the box SSL or protocol negotiation anyway though.\n\nI've got most of this working. The main things to finish are a few places where low level Apache HttpClient has been used, as well as stuff that uses HttpClientUtil stuff to do advanced configuration or callback injection. Most\u00a0things and tests\u00a0are working though.\n\nI'm not putting that in any time soon though. I'll push that to a branch and when the new client is cleaned up and a little nicer, focus on putting that in first. Then over time we can bring in the rest of the branch. ",
            "author": "Mark Miller",
            "id": "comment-16465363"
        },
        {
            "date": "2018-05-07T04:03:27+0000",
            "content": "This is all very rough and in progress - only the client itself will come in soon - but for anyone interested the current WIP can be seen here:\u00a0https://github.com/markrmiller/lucene-solr/commit/f1134ee6581ffd11aea6c1413d0f4375aa8406d9 ",
            "author": "Mark Miller",
            "id": "comment-16465408"
        },
        {
            "date": "2018-05-15T04:54:52+0000",
            "content": "This is going to be a bit of a slow burn, I just kind of hack on it here and there when I have the time, but just to start measuring some progress:\n\nCurrently approx 40-50 of the 806 core tests don't pass with everything forced to full Http2 and usage of the new Http2SolrClient.\n\nI've got the new V2 API stuff working it seems.\n Proxying to remote replicas is basically working.\n\nHowever, minimally still to do:\n\nTODO: Finish client side SSL support\n TODO: All tests passing\n TODO: Tune settings / streaming payloads vs not, etc\n TODO: Configure shipping Jetty\n TODO: Serve HTTP2 and HTTP on same port\n TODO: Multiple content streams with Http2SolrClient\n TODO: Finish and finalize APIs, especially Async API\n TODO: Performance and scale testing\nTODO: Basic Auth and Kerberos / Security support\nTODO: Special HttpClientUtil stuff like lifecycle injectors\n\nI havn't focused on just extracting the client for http 1.1 use yet because I'm learning more and more about what needs to happen with it as I work through\u00a0many of\u00a0the outstanding issues. ",
            "author": "Mark Miller",
            "id": "comment-16475280"
        },
        {
            "date": "2018-05-20T18:37:07+0000",
            "content": "I wrote an article that was initially motivated by trying to sum up a little why I am interested in this issue and where I would like it to help take us.\n\nhttps://www.linkedin.com/pulse/back-work-solid-distributed-system-awaits-mark-miller/ ",
            "author": "Mark Miller",
            "id": "comment-16482009"
        },
        {
            "date": "2018-05-20T21:12:51+0000",
            "content": "Mark Miller, I would like to be as helpful as I can in these efforts.  Big +1 to your goals expressed in the article.\n\nI can't devote as much time as I would like to, and my experience levels with the inner workings of a lot of systems (SolrCloud, Jetty, Ant, and others) are not where I want them to be.  But maybe I can be useful to you in some way.  At the very least we can make sure we're not stepping on each others toes as we work on things in parallel.  SOLR-6733, SOLR-6734, and SOLR-12309 are examples of issues I'm spearheading where we'll want to have some coordination and discussion. ",
            "author": "Shawn Heisey",
            "id": "comment-16482035"
        },
        {
            "date": "2018-05-24T04:04:57+0000",
            "content": "Sounds good Shawn - looking at those issues, I don't anticipate too much clashing.\n\nOne thing that may interest you that I would love help on is configuring our Jetty instance for Http/2 as well as Http/1.1. Currently I'm just setting everything up for JettySolrRunner and our core tests. ",
            "author": "Mark Miller",
            "id": "comment-16488386"
        },
        {
            "date": "2018-05-24T04:06:36+0000",
            "content": "There is probably work\u00a0there around SSL as well. Those are the major things I have to do differently in JettySolrRunner. ",
            "author": "Mark Miller",
            "id": "comment-16488388"
        },
        {
            "date": "2018-05-26T06:28:49+0000",
            "content": "I've been playing around and I'm not sure we have the same high thread pool count issues now that Jetty only supports NIO connectors. I think NIO2 support for not using a thread when waiting on IO changes things. ",
            "author": "Mark Miller",
            "id": "comment-16491537"
        },
        {
            "date": "2018-05-26T08:39:03+0000",
            "content": "I take that back - we wait for IO holding container threads. Harder to catch in\u00a0a test than I expected though.\n\nPerhaps we can use Continuations to get around this. ",
            "author": "Mark Miller",
            "id": "comment-16491575"
        },
        {
            "date": "2018-05-26T10:31:59+0000",
            "content": "Perhaps we can use Continuations to get around this.\n\nWell we can, but the model is a bit difficult for what we have and I think we would want it to be an optional path as well. It would also be a fair amount of work to hit everything beyond distrib search and distrib updates which already looks difficult to adapt to efficiently.\n\nI created SOLR-12405 for a better way to limit resources vs configuring lots of pools anyway. Trying to queue with limits will still eat threads and you have too configure many pools properly. Better to have one or two configuration options and make sure our pools are properly configured and working I think.  ",
            "author": "Mark Miller",
            "id": "comment-16491606"
        },
        {
            "date": "2018-05-31T05:34:34+0000",
            "content": "Mark Miller are you ready for feedback and help on starburst yet, or are there things you want to get committed before we put a lot of effort in?  Would this issue be an appropriate place to discuss it, or would you prefer the dev list? ",
            "author": "Shawn Heisey",
            "id": "comment-16496130"
        },
        {
            "date": "2018-05-31T07:19:48+0000",
            "content": "Just give me a short bit to ignore the rest of the currently failing tests so that we can have a clean test run as a base and then I'll move it over to an Apache branch.\n\nI'll make a new issue to track and discuss the overall objective.\n\nThis issue will be about Jetty HttpClient and Http2SolrClient.\n\nI split out HTTP/2 to\u00a0SOLR-12404\u00a0Start using HTTP/2 instead of HTTP/1.1.\n\nSOLR-12405\u00a0is for request throttling / dropping.\n\nThere are other issues that can be pulled out - stop using sleeps for example, clean up thread usage, clean up resource usage, add tests and enforcers to keeps things in shape, etc.\n\nHTTP/2 is probably the most work to finish,\u00a0along with full Jetty HttpClient usage. We can keep using Apache HttpClient and add Http2SolrClient powered by Jetty HttpClient against HTTP/1.1 if we want though.\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Mark Miller",
            "id": "comment-16496208"
        },
        {
            "date": "2018-05-31T17:17:34+0000",
            "content": "In my travels trying to get the server working on starburst, I came across a comment on this issue:\n\nhttps://github.com/eclipse/jetty.project/issues/1308#issuecomment-277940891\n\nWhere it is revealed that jetty's Http2Client only talks to http2 servers.\n\nThe documentation link in the comment suggests that it might only be possible for a single client object to speak one http version, because its transport appears to be explicitly set.\n\nIf one jetty client object can only speak either http/1.1 or http/2, then that causes us some difficulties.  SolrClient implementations and the shard handler will need to support both versions, and explicitly decide which version to use for all connections.  If we don't do that, rolling upgrades would be impossible.  A mixed-version cluster will have to force usage of the http/1.1 client until the entire cluster is upgraded.\n\nAsking about this on the jetty IRC channel, this is the response I got:\n\n\n10:59 <@jmcconnell> @elyograg @sbordet was working on a unified client at one\n                    point, I think that was targeted for Jetty 10 but he would\n                    know the latest and greatest on that\n\n ",
            "author": "Shawn Heisey",
            "id": "comment-16496880"
        },
        {
            "date": "2018-05-31T18:49:26+0000",
            "content": "It's a unified client, not sure what that references.\n\nJetty HttpClient was originally just HTTP/1.1 and still can be, that is how I first configured it and I left in the code to do it - it existed before there was any Jetty client side support for HTTP/2. For HTTP/2 there is actually a new lower level HTTP/2 client, but conveniently and unusual in the world of HTTP Java clients, the high level original Jetty HttpClient can do Async, HTTP/1.1, and HTTP/2 with the same API. Most other HTTP clients require using different client API's depending on which of those you want.\n\nSo using the Jetty HttpClient without HTTP/2 is as easy as flipping the code path in Http2SolrClient to 1.1 support.\n\nWe also can use the ALPN support to negotiate protocols on a single connector - which means we will be able to serve HTTP/1.1 and HTTP/2 on the same port depending on the clients capabilities. ",
            "author": "Mark Miller",
            "id": "comment-16497002"
        },
        {
            "date": "2018-06-02T00:28:52+0000",
            "content": "Mark Miller if I am confusing things or making life harder for you, I do apologize.  I'm trying to be helpful.\n\nOn the Jetty side, things have moved from the issue I linked above to another:\n\nhttps://github.com/eclipse/jetty.project/issues/1350\n\nThere isn't currently a client that can use both protocols.  The idea of using two HttpClient objects within the solr client is something I was thinking I might explore.\n\nFYI, I'm in this particular rabbit hole because I'm trying to get the server started on starburst.  I worked through some classloader issues (I have a patch for you that only touches the ivy config) and finally did manage to get the server started.  But as soon as I tried \"bin/solr create\" to create a core, it didn't work.  I also tried forcing http 1.1 in SolrCLI and that didn't help, but I haven't had a chance to discover whether I did something wrong. ",
            "author": "Shawn Heisey",
            "id": "comment-16498754"
        },
        {
            "date": "2018-06-02T00:37:16+0000",
            "content": "I really like the \"starburst\" name you chose.  I had this crazy notion that maybe we could rename Http2SolrClient to StarBurstClient, and build CloudBurstClient as the successor to CloudSolrClient.  I do think it's a good idea to preserve all of the existing SolrClient implementations, not just HttpSolrClient, so existing user codebases are less likely to encounter problems. ",
            "author": "Shawn Heisey",
            "id": "comment-16498762"
        },
        {
            "date": "2018-06-02T00:45:07+0000",
            "content": "There isn't currently a client that can use both protocols.\u00a0\nAgain, there is. I'm using it. I used it with Http 1.1 before I even turned on Http 2. Now I use it with Http 2. regardless of what you are reading, I simply have a client I'm contributing that supports 1.1 or 2. ",
            "author": "Mark Miller",
            "id": "comment-16498769"
        },
        {
            "date": "2018-06-02T00:50:22+0000",
            "content": "There's one substantive change in the starburst ivy patch \u2013 adding jetty-io to solrj, which also causes the jar to end up in the webapp.  I came across information saying that using the jetty client within the webapp requires its dependencies in WEB-INF/lib, even those that are present in Jetty's main lib directory for jetty itself.  This fixed some startup problems.\n\nThe bulk of the changes in the patch are precommit-related, and aside from bumping versions in a few places, don't actually change anything. ",
            "author": "Shawn Heisey",
            "id": "comment-16498776"
        },
        {
            "date": "2018-06-02T00:51:23+0000",
            "content": "Again, there is. I'm using it. \n\nIf that works, great.  I must be doing something wrong. ",
            "author": "Shawn Heisey",
            "id": "comment-16498777"
        },
        {
            "date": "2018-06-02T01:12:40+0000",
            "content": "With the patch for ivy, building the server and typing \"bin/solr start\" will work.  But creating a core will fail:\n\n\nelyograg@smeagol:~/asf/starburst/solr$ bin/solr create -c foo\nWARNING: Using _default configset with data driven schema functionality. NOT RECOMMENDED for production use.\n         To turn off: bin/solr config -c foo -p 8983 -property update.autoCreateFields -value false\nINFO  - 2018-06-01 18:59:05.287; org.apache.solr.util.configuration.SSLCredentialProviderFactory; Processing SSL Credential Provider chain: env;sysprop\n\nERROR: java.io.IOException: 1/unknown_frame_type_80\n\n\n\nIt's not completely clear whether that error means the client failed to talk to the v1.1 server, or if there was an error because the h2-enabled client is expecting TLS and didn't find it.  There's nothing in solr.log about the attempt.  I also enabled the request log and nothing was written there at all. ",
            "author": "Shawn Heisey",
            "id": "comment-16498794"
        },
        {
            "date": "2018-06-04T14:00:15+0000",
            "content": "If that works, great. I must be doing something wrong.\nFor\u00a0the Http2SolrClient, you would have to enable it in code - it uses a different Transport class It's not setup to work with 1.1 without flipping what Transport class is used in the code.\n\nThanks for fixing the hard coded versions, I'll look at that.\nBut creating a core will fail\nWell the client will speak HTTP/2, but have you setup Jetty to run an HTTP/2 connector instead of HTTP/1.1? ",
            "author": "Mark Miller",
            "id": "comment-16500253"
        },
        {
            "date": "2018-06-04T19:55:23+0000",
            "content": "Well the client will speak HTTP/2, but have you setup Jetty to run an HTTP/2 connector instead of HTTP/1.1?\n\nNo, I just tried to get starburst started with minimal changes \u2013 only the patch for ivy.    The Jetty config is unchanged, so it's listening for 1.1 requests only.\n\nI did try to go into SolrCLI and explicitly tell it to use the 1.1 client, but either I didn't make the right change, or it failed to work. ",
            "author": "Shawn Heisey",
            "id": "comment-16500779"
        },
        {
            "date": "2018-06-04T21:21:52+0000",
            "content": "You either have to switch the SolrHttpClient to use HTTP/1.1 or change etc/jetty-http.xml to use HTTP/2.\n\n\u00a0\n\nhttps://www.eclipse.org/jetty/documentation/9.4.x/http2-configuring.html\n\n\u00a0\n\nId try changing the connection factory to\u00a0org.eclipse.jetty.http2.server.HTTP2ServerConnectionFactory at a minimum. ",
            "author": "Mark Miller",
            "id": "comment-16500859"
        },
        {
            "date": "2018-06-04T21:35:29+0000",
            "content": "You will see this in the logs when running under HTTP/2:\u00a0\n\n2018-06-04 16:15:56.319 INFO\u00a0 (main) [\u00a0 \u00a0] o.e.j.s.AbstractConnector Started ServerConnector@3300f4fd{h2,[h2]}\n{0.0.0.0:8983}\n\nUntil SSL is working correctly or we configure to also server HTTP/1.1 on the same port, browsers are not going to work with HTTP/2. ",
            "author": "Mark Miller",
            "id": "comment-16500881"
        },
        {
            "date": "2018-06-05T03:58:20+0000",
            "content": "One thing that may interest you that I would love help on is configuring our Jetty instance for Http/2 as well as Http/1.1. Currently I'm just setting everything up for JettySolrRunner and our core tests.\n\nI think we should have a plan to move from Solr get loaded by Jetty to Solr boot-up Jetty and do all the configuration.  This will save us a lot of difference between running Solr from bin/solr to testing Solr by using JettySolrRunner. ",
            "author": "Cao Manh Dat",
            "id": "comment-16501256"
        },
        {
            "date": "2018-06-05T16:15:31+0000",
            "content": "I think we should have a plan to move from Solr get loaded by Jetty to Solr boot-up Jetty and do all the configuration.\n\nCao Manh Dat, see SOLR-6733 and SOLR-6734.  I have not been able to put the time in that I want to.  I have begun writing a new bin/solr script to leverage these new ideas, but there's not a lot there yet, and I haven't shared it with anyone.  Before it can get very far, other pieces like the agent and the solr start jar must be available in at least a limited form.  Part of that whole thing will be starting over with how Solr gets configured, to try and make it more centralized, hierarchical, and sane.\n\nI lack the skills to realize some of what I have envisioned, particularly the parts related to the build system (ant).  I'm willing to learn, but not really sure where to begin. ",
            "author": "Shawn Heisey",
            "id": "comment-16502024"
        },
        {
            "date": "2018-07-09T08:57:51+0000",
            "content": "Hi, I skimmed through https://github.com/markrmiller/starburst/commit/f1134ee6581ffd11aea6c1413d0f4375aa8406d9.patch (the patch is huge). A large part of the patch is replacing HttpSolrClient by Http2SolrClient which I think can be postponed. Because\n\n\tHttpSolrClient and Http2SolrClient will coexist, by replacing it we can't sure that HttpSolrClient will work after future changes\n\tIt makes the patch really large and hard to review.\n\n\n\nTherefore, in my opinion, for this issue, we should focus on \n\n\tHttp2SolrClient.java and some minimal tests.\n\tJettySolrRunner support booting up a server that accepts http2 connection\n\n ",
            "author": "Cao Manh Dat",
            "id": "comment-16536709"
        },
        {
            "date": "2018-07-09T14:17:09+0000",
            "content": "I don\u2019t plan on doing any of this piece mail. If it goes in, it will be like SolrCloud and be a full switch on a major version. Basically my branch is way better than the main branch. Either people will want to switch to it or they won\u2019t. \n\nAlso any sort of review beyond high level comments now won\u2019t be very useful. This isn\u2019t even close to done.  ",
            "author": "Mark Miller",
            "id": "comment-16536963"
        },
        {
            "date": "2018-07-09T14:27:52+0000",
            "content": "Of course anyone can feel free to pull in what they want. I\u2019m fully focused on addressing SolrCloud shortcomings and making a branch with passing tests.  ",
            "author": "Mark Miller",
            "id": "comment-16536973"
        },
        {
            "date": "2018-07-11T09:19:04+0000",
            "content": "I attached a draft patch for this ticket, changes compare to Mark's patch include\n\n\tMinimal changes for JettySolrRunner\n\tIn case of https, only http/1.1 will be supported (until we upgrade to jdk 9 or find a better way for handling ALPN)\n\tIn case of http, HTTP/1.1 and HTTP2 (h2c) will be supported via http2 upgrade header\n\tSetting default SslContextFactory for Http2SolrClient\n\tRemove Http2SolrClient.makeResponse() (the method is buggy in counting the time has passed and also lead to many different chance of other SolrRequest classes)\n\tRemove the replacement of HttpSolrClient by Http2SolrClient\n\n\n\nI'm thinking about an easier/more convenient solution for above last item. Ie : making HttpSolrClient and Http2SolrClient swap-able.  ",
            "author": "Cao Manh Dat",
            "id": "comment-16539770"
        },
        {
            "date": "2018-07-11T12:40:06+0000",
            "content": "I don\u2019t plan on doing any of this piece mail. If it goes in, it will be like SolrCloud and be a full switch on a major version. Basically my branch is way better than the main branch. Either people will want to switch to it or they won\u2019t.\n\nI'm kinda concerned by this.  I think we all appreciate your heroics, but I think things need to be done in a way conducive to peer review.  An all or nothing, take it or leave it, attitude concerns me. ",
            "author": "David Smiley",
            "id": "comment-16540030"
        },
        {
            "date": "2018-07-18T04:12:31+0000",
            "content": "My idea for this ticket :\n\n\tAdd Http2SolrClient.java\n\tA minimal test for Http2SolrClient based on BasicHttpSolrClient (this ensure the consistency in behaviors between Http2SolrClient and HttpSolrClient)\n\tEnable Http2 in JettySolrRunner for test environment only.\n\n\n\nBy doing that we can slowly introduce more supports on Http2 \n\n\tAll the changes will be tested for a very long time before we switch from Http to Http2\n\tWon't impact the current final build/release.\n\n\n\nI attached a nearly finished patch for this ticket :\n\n\tHttp2SolrClient's behaviors consistent with HttpSolrClient (include error handling, V2Request, multipart request, queryParams)\n\tAdd Http2SolrClientTest which mimic BasicHttpSolrClientTest\n\n\n\nI wonder that should I keep continue working on this issue, or create another one. Because my vision for this issue seems not match with others. ",
            "author": "Cao Manh Dat",
            "id": "comment-16547351"
        },
        {
            "date": "2018-07-18T10:01:57+0000",
            "content": "My idea for introducing http2 to Solr is\n\n\tSlowly introduce http2 support to test environment only (by setting System.property variables) therefore users can't use any features of http2 in solr server build.\n\tAll public classes belong to http2 must be annotated as @experimental\n\tWhen all the features are mature enough we will do a full switch from old http1 to http2\n\tAll commits are done on master/branch_7x instead of baking a temporary branch (ie: http2 branch), reasons\n\t\n\t\tIt will the merge a lot easier since we seem to touch frequent update classes\n\t\tIt will force us to commit well-test code\u00a0\n\t\tIt will force us to not abandon it\n\t\tWe can leverage current jenkins\u00a0(as well as their reports) for knowing the status of new tests for http2\n\t\n\t\n\n\n\nNote (need an agreement on this): The only downside of this approach is solrj and solr\u00a0server will include several jars that they do not need (around 2 mb\u00a0in total for both).\u00a0 ",
            "author": "Cao Manh Dat",
            "id": "comment-16547635"
        },
        {
            "date": "2018-07-19T02:51:42+0000",
            "content": "I attached a patch that pass ant precommit.\u00a0 The problem here I want to discuss here is how we commit the patch. There are a couple of\u00a0ways\n\n\tCommit the patch on master/branch_7x since Http2SolrClient are marked as @experimental, and it can't be used to talk any solr servers. Users won't use it.\n\tCommit the patch on master and enable Http2 support in \"bin/solr\" by modifying jetty-http.xml. Users may try to use it, and we may get some reports about problems of new client\n\tCommit the patch on jira/http2 branch, cook everything relate to http2 there.\n\n\n\n\u00a0 ",
            "author": "Cao Manh Dat",
            "id": "comment-16548716"
        },
        {
            "date": "2018-07-19T20:48:34+0000",
            "content": "Commit the patch on master and enable Http2 support in \"bin/solr\" by modifying jetty-http.xml. Users may try to use it, and we may get some reports about problems of new client\n\nIf we do not break 1.1 support in the server as we enable http2, and do not change the behavior of existing clients, I think this is a good option.\n\nSide note:  I like the idea of using Mark's github project name for the new clients.  StarBurstClient and CloudBurstClient for example.  Those could be temporary names - fold the functionality back into HttpSolrClient and CloudSolrClient after everything stabilizes and eliminate the temporary names in the next major version.\n\nAdditional side note: I haven't been able to put much time into it, but for SOLR-6733 and SOLR-6734 I was considering some ideas about how to enable TLS by default and make it a lot easier for users to create certificates or utilize certificates they already have, without needing to mess with Java's complicated repositories.  Only mentioning this here because browsers are not implementing h2c.  Not sure if that means it would just fall back to 1.1, or if there might be issues with the admin UI. ",
            "author": "Shawn Heisey",
            "id": "comment-16549850"
        },
        {
            "date": "2018-07-20T01:53:02+0000",
            "content": "Shawn Heisey , by using h2c, browser will fall back on using 1.1. So we won't see any problem here.\u00a0 ",
            "author": "Cao Manh Dat",
            "id": "comment-16550108"
        },
        {
            "date": "2018-07-20T01:56:24+0000",
            "content": "On the second thought, let's cook everything in the \"jira/http2\" until everybody gets confident with the changes.\u00a0 ",
            "author": "Cao Manh Dat",
            "id": "comment-16550110"
        },
        {
            "date": "2018-07-20T03:16:14+0000",
            "content": "Commit a9aa50d60064163a91ba48bdc9d1ea5d33776d32 in lucene-solr's branch refs/heads/jira/http2 from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a9aa50d ]\n\nSOLR-12297: Add Http2SolrClient, capable of HTTP/1.1, HTTP/2, and asynchronous requests. ",
            "author": "ASF subversion and git services",
            "id": "comment-16550165"
        },
        {
            "date": "2018-07-20T03:22:57+0000",
            "content": "I pushed my patch on branch jira/http2. This branch will be served like a stepping stone between the master branch and Mark Miller starburst branch. I will try to keep jira/http2 as close as master as possible (this will make merging in the future easier). In the same time, I will gradually split changes in starburst\u00a0branch into smaller/testable parts then push it to jira/http2 branch. Anyone who interests at http2 for Solr can use\u00a0jira/http2 branch but there is no backward-compatibility guarantee. ",
            "author": "Cao Manh Dat",
            "id": "comment-16550169"
        },
        {
            "date": "2018-07-20T03:36:18+0000",
            "content": "Commit 3358d9366532020e4bde061d8a7cf39e1dd5c589 in lucene-solr's branch refs/heads/jira/http2 from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3358d93 ]\n\nSOLR-12297: Remove SupressSSL from Http2SolrClientTest ",
            "author": "ASF subversion and git services",
            "id": "comment-16550180"
        }
    ]
}