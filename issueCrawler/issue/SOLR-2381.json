{
    "id": "SOLR-2381",
    "title": "The included jetty server does not support UTF-8",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "3.2",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Some background here: http://www.lucidimagination.com/search/document/6babe83bd4a98b64/which_unicode_version_is_supported_with_lucene\n\nSome possible solutions:\n\n\twait and see if we get resolution on http://jira.codehaus.org/browse/JETTY-1340. To be honest, I am not even sure where jetty is being maintained (there is a separate jetty project at eclipse.org with another bugtracker, but the older releases are at codehaus).\n\tinclude a patched version of jetty with correct utf-8, using that patch.\n\tremove jetty and include a different container instead.",
    "attachments": {
        "jetty-util-6.1.26-patched-SOLR-2381.jar": "https://issues.apache.org/jira/secure/attachment/12473131/jetty-util-6.1.26-patched-SOLR-2381.jar",
        "utf8enhanced.xml": "https://issues.apache.org/jira/secure/attachment/12473109/utf8enhanced.xml",
        "SOLR-2381_xmltest.patch": "https://issues.apache.org/jira/secure/attachment/12473023/SOLR-2381_xmltest.patch",
        "SOLR-ServletOutputWriter.patch": "https://issues.apache.org/jira/secure/attachment/12472000/SOLR-ServletOutputWriter.patch",
        "SOLR-2381-3.x+3.1.patch": "https://issues.apache.org/jira/secure/attachment/12473171/SOLR-2381-3.x%2B3.1.patch",
        "jetty-6.1.26-patched-JETTY-1340.jar": "https://issues.apache.org/jira/secure/attachment/12471970/jetty-6.1.26-patched-JETTY-1340.jar",
        "jetty-6.1.26-patched-SOLR-2381.jar": "https://issues.apache.org/jira/secure/attachment/12473130/jetty-6.1.26-patched-SOLR-2381.jar",
        "jetty-util-6.1.26-patched-JETTY-1340.jar": "https://issues.apache.org/jira/secure/attachment/12471971/jetty-util-6.1.26-patched-JETTY-1340.jar",
        "SOLR-2381.patch": "https://issues.apache.org/jira/secure/attachment/12471969/SOLR-2381.patch",
        "post_utf8enhanced.sh": "https://issues.apache.org/jira/secure/attachment/12473108/post_utf8enhanced.sh",
        "SOLR-2381_take2.patch": "https://issues.apache.org/jira/secure/attachment/12473153/SOLR-2381_take2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Karl Wright",
            "id": "comment-12999468",
            "date": "2011-02-25T18:46:37+0000",
            "content": "The resolution of this issue is of interest to me, since ManifoldCF uses the same jetty container currently used by Solr. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12999474",
            "date": "2011-02-25T19:02:51+0000",
            "content": "include a patched version of jetty with correct utf-8, using that patch.\n\n+1\n\nThere's no telling when the next point release of jetty is going to come out. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12999549",
            "date": "2011-02-25T20:44:55+0000",
            "content": "attached is a patch file for trunk (just adding a tiny test so we stand a chance of knowing if this somehow breaks again).\n\nincluded are the patched jar files, i applied the patch to the release version of 6.1.26.\n\nthe test_utf8.sh is now correct by default, additionally the manual test I did before on the mailing list works.\n\nI tested this against branch_3x too. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12999602",
            "date": "2011-02-25T22:19:52+0000",
            "content": "Seems to work fine, +1 to commit!\n\nI added an output test to test_utf8.sh, but the char is directly included in the script and it's probably not that robust (but it is just a test).  I tried using \"od\" first, but that took different args in OS X and ubuntu. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12999623",
            "date": "2011-02-25T23:06:31+0000",
            "content": "Committed revision 1074726, 1074742 (branch_3x) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12999635",
            "date": "2011-02-25T23:22:38+0000",
            "content": "Just for reference, i took a look at the jetty 7 branch (from http://download.eclipse.org/jetty/stable-7/dist/)\n\nIt appears the code was fixed to try to cover these cases... not saying it actually works, I didn't test it and that would be a scarier larger change. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12999663",
            "date": "2011-02-26T00:19:19+0000",
            "content": "I just want to attach the patch, that removes usage of ServletResponse.getWriter() and uses own Writer on ServletOutputStream.\n\nWith a fixed Jetty, thats not needed, but may get interesting, if other servlet containers are broken, too.\n\nJust to note: on the input side (reading POST requests) we no longer use ServletRequest.getReader() since long time... "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13000027",
            "date": "2011-02-27T19:09:04+0000",
            "content": "Looks already much better. \nFirst tests show that with DIH the unicode above BMP get correctly stored in a string index field.\nIf displayed with wt=json it is correct unicode.\nIf displayed with wt=xml it is invalid unicode.\n\nExample (Mathematical sans-serif capital S):\nloaded unicode with DIH - U+1D5B2 (F0 9D 96 B2)\ndisplayed with wt=json  - U+1D5B2 (F0 9D 96 B2)\ndisplayed with wt=xml   - ??????? (ED A0 B5 ED B6 B2)\n\nThis was logged with wireshark directly from the network.\n\nOpen question:\n\n\tis the xml output a jetty problem or XMLwriter from Lucene/Solr?\n\n "
        },
        {
            "author": "William Bell",
            "id": "comment-13000102",
            "date": "2011-02-28T04:13:37+0000",
            "content": "I vote for Jetty 7. I have been using it with SOLR since v1.4.0\n "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13001963",
            "date": "2011-03-03T11:39:59+0000",
            "content": "Sorry for the delay, have checked last trunk version with wt=json , wt=xml and wt=velocity.\nWorks fine now, thanks a lot. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13002069",
            "date": "2011-03-03T16:58:35+0000",
            "content": "Ok, thanks for reporting back. So there was maybe a problem in the past with XMLWriter, which is solved with Lucene trunk. Can you also check branch_3x (Lucene 3.1), because this is the next release and trunk (Lucene 4.0) is very unstable. "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13002599",
            "date": "2011-03-04T13:17:44+0000",
            "content": "Hmmm, disregard my last. \nAfter loading real data with code above BMP I get a reproducable error with destroyed UTF-8 code via xml...\nNo error with wt=json.\nSo is this a jetty problem or a solr problem?\n\nAnother strange thing to mention, the error is only if the server can send all data at once.\nThere is a \"Content-Length: xxxx\" in the server header.\n\nThe error is not if the server chunks his reply (sends it in multiple parts).\nThe server header has then \"Transfer-Encoding: chunked\" and no \"Content-Length: xxxx\".\n\nI have solr under eclipse but my runjettyrun is only jetty version 6.1.6.\nHave to get the jetty 6.1.26 source. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13002611",
            "date": "2011-03-04T14:06:37+0000",
            "content": "Bernd, two things:\n\n\tuse the patched jetty from the issue and also use it in Eclipse\n\tyour comment explains why JSON writer works, because JSON is much more compact and so it was not chunked in your tests.\n\n\n\nThis is all a Jetty problem, because inside Solr there is really no difference between XML and JSON output, both is written in UTF-8 using the Writer supplied by the underlying servlet container. "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13002620",
            "date": "2011-03-04T14:27:13+0000",
            "content": "Well, just tested with jetty7 (jetty-hightide-7.3.0.v20110203.tar.gz) \nfrom http://dist.codehaus.org/jetty/jetty-hightide-7.3.0/\n\n\n\tsame problem with jetty 7 (broken utf8 with xml output)\n\tif a utf8 code gets mangled under jetty 7 is the same position and outputs the same\n  broken byte code as with jetty 6\n\tjetty 7 always sends the result without chunking it and always sets \"Content-Length: xxxx\".\n\n\n\nThis leads me to the conclusion that either jetty 7 is also buggy or it is still a solr problem.\nWhat do you think? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13002622",
            "date": "2011-03-04T14:32:29+0000",
            "content": "Bernd, is it possible for you to produce some sort of reproducible test that demonstrates the problem? \n\nThen we could try to track down wherever the problem is with xml.\n\nBecause when I use solr with unicode outside the BMP (the example test documents), I'm not seeing this issue... but there could be some boundary-related problem in jetty or solr. SOLR-1489 was an example of this. "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13002628",
            "date": "2011-03-04T14:39:19+0000",
            "content": "Yes, I'm trying to build a reproducible test. "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13003980",
            "date": "2011-03-08T15:00:04+0000",
            "content": "Robert, unfortunately I wasn't able to build a reproducible test so I decided to debug it on my server.\nThe bug is in Jetty and has been fixed with jetty-7.3.1.v20110307.\nBecause I started debugging during weekend I used the older jetty.7.3.0 with the bug included, located the bug \nand recognized today that it had just been fixed in the new version from yesterday.\n\nNevertheless here is the description because I went through all the bits and bytes.\nIn jetty-7 there is jetty-server with org.eclipse.jetty.server.HttpWriter.java.\nThat is the OutputWriter which extends Writer and does the UTF-8 encoding.\nThe buffer comes of size 8192 bytes and is chunked and encoded with HttpWriter in sizes of 512 bytes.\nThe encoding is that in java it is UTF-16 and is read as integer. If the code is above BMP ist has a surrogate\nwhich is read first and thereafter the next integer.\nExcample: 55349(dec) and 56320(dec) is converted to 119808(10) which is U+1D400\n\nRemember that the buffer is of size 512 bytes. But what if the counter is at 510 and a Unicode above\nBMP comes up? The solution is to write the current buffer to output, reset it and start over with an empty\nbuffer. And here is/was the bug.\nThe \"surrogate reminder\" was cleared to early at a wrong place and got lost.\n\nIf I find a svn with jetty-6.1.26 sources I will look into that one also.\nOtherwise use jetty-7.3.1-v20110307 that is fixed.\n\nMay be we should setup a xml page for testing that has at least more than 512 characters of UTF-8 code \nabove BMP in a row for testing? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13003983",
            "date": "2011-03-08T15:04:16+0000",
            "content": "\nIf I find a svn with jetty-6.1.26 sources I will look into that one also.\n\nBut can you test the patched version of jetty we have here? This is more useful because its the version we include (its the only one we worry about) "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13003991",
            "date": "2011-03-08T15:19:59+0000",
            "content": "I first tested the patched version jetty-6.1.26-patched and still have the bug.\nThen I used jetty-7.3.0 and got the same bug.\nThen I debugged jetty-7.3.0 and located the bug and saw that it is fixed in jetty-7.3.1.\nAnd now I need the sources of the patched jetty-6.1.26 to see why there is still a bug\nand fix taht one also.\nOr if you know where to look for then I leave to you, no problem.\n\nMay be you have contact to the jetty developer and they want to fix this for jetty-6.1.26 at all\nand make a jetty-6.1.27 out of it? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13003994",
            "date": "2011-03-08T15:27:54+0000",
            "content": "Bernd, you can download 6.1.26 then apply the patch from http://jira.codehaus.org/browse/JETTY-1340\n\nIf you can produce any kind of testcase showing there is a bug with 6.1.26-patched, then we can reopen this issue and try to fix it (as to me its a blocker if UTF-8 is not supported).\n\nWithout a test case its going to be slow-going though... we really need a Solr test for any problems you are encountering. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13004118",
            "date": "2011-03-08T18:29:17+0000",
            "content": "reopening as I produced a unit test finding more problems along the lines of what Bernd reported (possibly in jetty, possibly in Solr, dont know yet) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13004130",
            "date": "2011-03-08T18:41:17+0000",
            "content": "attached is a unit test. if you disable the 'case 4' so that it only uses 1, 2, and 3 byte codepoints, the test always passes.\n\nadditionally it only fails with the XML response format (the default binary is fine). the test chooses different formats for each iteration.\n\n\njunit-sequential:\n    [junit] Testsuite: org.apache.solr.client.solrj.embedded.SolrExampleJettyTest\n    [junit] Tests run: 1, Failures: 0, Errors: 1, Time elapsed: 3.829 sec\n    [junit]\n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with: ant test -Dtestcase=SolrExampleJettyTest -Dtestmethod=testUnicode -Dtests.seed=-8507816048970822444:1424998400651628841\n    [junit] WARNING: test class left thread running: Thread[MultiThreadedHttpConnectionManager cleanup,5,main]\n    [junit] RESOURCE LEAK: test class left 1 thread(s) running\n    [junit] NOTE: test params are: codec=PreFlex, locale=es_GT, timezone=Asia/Hovd\n    [junit] NOTE: all tests run in this JVM:\n    [junit] [SolrExampleJettyTest]\n    [junit] NOTE: Windows Vista 6.0 x86/Sun Microsystems Inc. 1.6.0_23 (32-bit)/cpus=4,threads=2,free=9760576,total=16252928\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: testUnicode(org.apache.solr.client.solrj.embedded.SolrExampleJettyTest):  Caused an ERROR\n    [junit] Error executing query\n    [junit] org.apache.solr.client.solrj.SolrServerException: Error executing query\n    [junit]     at org.apache.solr.client.solrj.request.QueryRequest.process(QueryRequest.java:95)\n    [junit]     at org.apache.solr.client.solrj.SolrServer.query(SolrServer.java:119)\n    [junit]     at org.apache.solr.client.solrj.SolrExampleTests.testUnicode(SolrExampleTests.java:290)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1213)\n    [junit]     at org.apache.lucene.util.LuceneTestCase$LuceneTestCaseRunner.runChild(LuceneTestCase.java:1145)\n    [junit] Caused by: org.apache.solr.common.SolrException: parsing error\n    [junit]     at org.apache.solr.client.solrj.impl.XMLResponseParser.processResponse(XMLResponseParser.java:145)\n    [junit]     at org.apache.solr.client.solrj.impl.XMLResponseParser.processResponse(XMLResponseParser.java:106)\n    [junit]     at org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.request(CommonsHttpSolrServer.java:478)\n    [junit]     at org.apache.solr.client.solrj.impl.CommonsHttpSolrServer.request(CommonsHttpSolrServer.java:245)\n    [junit]     at org.apache.solr.client.solrj.request.QueryRequest.process(QueryRequest.java:89)\n    [junit] Caused by: com.ctc.wstx.exc.WstxIOException: Invalid UTF-8 character 0xdf05(a surrogate character)  at char #2475, byte #127)\n    [junit]     at com.ctc.wstx.sr.StreamScanner.throwFromIOE(StreamScanner.java:708)\n    [junit]     at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1086)\n    [junit]     at org.apache.solr.client.solrj.impl.XMLResponseParser.readNamedList(XMLResponseParser.java:218)\n    [junit]     at org.apache.solr.client.solrj.impl.XMLResponseParser.readNamedList(XMLResponseParser.java:244)\n    [junit]     at org.apache.solr.client.solrj.impl.XMLResponseParser.processResponse(XMLResponseParser.java:130)\n    [junit] Caused by: java.io.CharConversionException: Invalid UTF-8 character 0xdf05(a surrogate character)  at char #2475, byte #127)\n    [junit]     at com.ctc.wstx.io.UTF8Reader.reportInvalid(UTF8Reader.java:335)\n    [junit]     at com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:247)\n    [junit]     at com.ctc.wstx.io.MergedReader.read(MergedReader.java:101)\n    [junit]     at com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:84)\n    [junit]     at com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:57)\n    [junit]     at com.ctc.wstx.sr.StreamScanner.loadMore(StreamScanner.java:992)\n    [junit]     at com.ctc.wstx.sr.StreamScanner.getNext(StreamScanner.java:763)\n    [junit]     at com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2721)\n    [junit]     at com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1019)\n    [junit]\n    [junit]\n\n "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13004423",
            "date": "2011-03-09T08:59:08+0000",
            "content": "I have created a test with a longer text from Apache Solr web page. The text is all transformed in UTF8 code with chars above BMP.\nShould be readable in your Browser.\nTo load it copy post_utf8enhanced.sh and utf8enhanced.xml to your exampledocs dir and call post_utf8enhanced.sh.\nHope this helps. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13004428",
            "date": "2011-03-09T09:10:23+0000",
            "content": "additionally it only fails with the XML response format (the default binary is fine). the test chooses different formats for each iteration.\n\nWith binary it cannot fail, as no Writers from Jetty are in use. What other formats (text-based using Writers) are used and work? Or is e.g. JSON also failing?\n\nBecause all text formats use a Writer supplied by Jetty. "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13004429",
            "date": "2011-03-09T09:16:04+0000",
            "content": "I couldn't reproduce the error with JSON, only mit XML response. \nBut you never know... "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13004507",
            "date": "2011-03-09T12:19:47+0000",
            "content": "Bend according to my tests, solr is fine except when using XML.\n\nIn general I recommend STRONGLY AGAINST using xml technologies if you need good unicode support. We can try to fix this bug, but I suspect you will only encounter more in your application if you decide to go with xml, it will be a long, tough, battle. "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13004519",
            "date": "2011-03-09T12:51:42+0000",
            "content": "I just debugged jetty-6.1.26-patched-JETTY-1340 and located the bug.\nAs I already said above, it is due to buffer size of 512 bytes for output and the surrogates.\nIf the buffer is filled up to 510 bytes and the next one is a UTF-8 above BMP (greater than 2 bytes) then\njetty is in trouble.\nQuickest fix would be to use the working code snippet from jetty-7.3.1 and replace the buggy jetty-6.1.26-patched-JETTY-1340.\n\nUnfortunately, as we are switching from FAST System to Solr, all our Interfaces are using XML.\nWe never had any problems with FAST, XML and UTF-8. \nIt would be a mess reworking everything to JSON just for Solr. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13004534",
            "date": "2011-03-09T13:19:13+0000",
            "content": "Quickest fix would be to use the working code snippet from jetty-7.3.1 and replace the buggy jetty-6.1.26-patched-JETTY-1340.\n\nThere's nothing quick about fixing bugs in jetty at all: for example the 6.1 branch's unit test suite does not even reliably pass out of box, making it difficult to test changes.\n\nI'm certainly going to fix it, but its going to take probably a day of my time to ensure that its done safely (just like it took a day for me to fix the previous jetty bug on this issue).\n\n\nUnfortunately, as we are switching from FAST System to Solr, all our Interfaces are using XML.\nWe never had any problems with FAST, XML and UTF-8. \nIt would be a mess reworking everything to JSON just for Solr.\n\nI'm not really concerned at all with what FAST does or doesn't do.\n\nI still stand by my statement that I strongly recommend against the use of XML (in general, nothing to do with Jetty) if you need correct unicode support and are using java-based components. This is just my practical advice based on building applications that have to work with all of unicode.\n\nYou won't be reworking just for Solr, its pretty likely as your system grows you will run into other unicode bugs in java-based XML libraries, too. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13004546",
            "date": "2011-03-09T13:58:35+0000",
            "content": "Hi Bernd,\nwe know where the problem in Jetty is (they buffer 512 chars without respecting surrogates). When they then convert those buffered chars to UTF-8 its broken at the boundaries. This bug in Jetty may also affect JSON output, but JSON is much more compact and may not easily hit this buffer issue (as it does not use Strings to feed to writer, the broken method in JETTY is handling Writer.write(String,...).\n\nIn general we are discussing to not use Readers and Writers supplied by the Servlet Container. As HTTP is a byte-based protocol, code should only use InputStreams and OutputStreams to communicate with the client. Writers and Readers are only provided for convenience with JSP engines.\n\nThe input part of Solr no longer uses Readers, they pass always pass InputStreams around. I uploaded a patch a week ago to do the same on the output side of Solr: SOLR-ServletOutputWriter.patch\n\nPlease note: As JSP pages use Jetty's writers, analysis.jsp may still produce corrupt output.\n\nCan you patch your solr with that one, then your problems should disappear for all OutputHandler generated content except JSP pages in Solr. We are thinking about optimizing this, internally, but the above patch removes all use of Solr. The patch is against trunk as far as I know. "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13004567",
            "date": "2011-03-09T14:27:54+0000",
            "content": "And here it is, the fixed jetty.\njetty-6.1-26-patched-SOLR-2381.jar\njetty-util-6.1.26-patched-SOLR-2381.jar\n\nPlease test it and give your feedback.\nAt least my problems are gone.\n\nThanks for your patience and help. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13004584",
            "date": "2011-03-09T14:59:34+0000",
            "content": "Bernd, i didn't test your jars, but can you update the patch on http://jira.codehaus.org/browse/JETTY-1340\nwith your fixes?\n\nAs an open source project, we can't just commit the binary jars.\n\nI did however, test Uwe's patch. I think we should fix this bug in jetty, but I think we should also use Uwe's patch (my random test passes always with his patch).\n\nThis jetty writer is hardly fast, i think it makes sense to try to bypass this \"optimization\" in jetty which only causes bugs and likely only makes things slower actually (for example lots of conditionals and state-keeping, Character.isLowSurrogate on every char, and handling silly 6-byte UTF-8 cases which do not exist).\n\nIts also a good safety net, I don't trust these servlet containers to do this correctly. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13004586",
            "date": "2011-03-09T15:02:45+0000",
            "content": "Robert and me discussed about the Jetty OutputWriter and found out:\n\n\n\tIt's much more broken, as it would even not support writing half surrogates in write(char[], ofset, length), which may also fail for other ResponseWriters!!!\n\tJettys implementation is SLOOOOOOOOOOOW!\n\n\n\nThe attached patch now uses no Writer supplied by Jetty or any other servlet container at all - it just handles HTTP as it is: a binary protocol using byte streams. Like for UpdateReqHandler it uses its own mapper inside Solr (on the input side ContentStream is used for that).\n\nAs most output in solr is done using UTF-8 (the default), it uses a pre-looked up NIO Charset for that. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13004595",
            "date": "2011-03-09T15:11:20+0000",
            "content": "Thanks Uwe: my test passes with your patch.\n\nTo summarize, this is what I think we should do, once we get Bernd's patch:\n\n1. we should commit the random test (SOLR-2381_xmltest.patch)\n2. rebuild/test jetty with Bernd's modifications, and commit that if everything is ok.\n3. we should commit Uwe's patch for extra safety and improved performance. "
        },
        {
            "author": "Bernd Fehling",
            "id": "comment-13004597",
            "date": "2011-03-09T15:15:27+0000",
            "content": "Jetty patch will be uploaded to http://jira.codehaus.org/browse/JETTY-1340.\n\nI'm installing Uwe's patch also and try to \"stay away\" from XML for java. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13004632",
            "date": "2011-03-09T16:17:34+0000",
            "content": "Here is _take2.patch:\n\n1. I took Bernd's update to JETTY-1340, retested and rebuilt jetty. things look good from this perspective.\n2. I then added my random test, and things look fine with the new Jetty.\n3. Finally I incorporated uwe's patch also.\n\nI think this is the best solution, much safer and with a lot better tests. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13004688",
            "date": "2011-03-09T18:13:33+0000",
            "content": "Awesome news guys... not using Jetty's writers did in fact result in performance improvements!\nThis was a simple test that requested 500 docs per request (hitting all the caches to try and isolate writer performance).  Performance improvements of almost 30% for XML!\n\n\n=============== trunk, using jetty's writers ==========\nwt=javabin\nqps: 1297\n50%   = 7938\nqps: 1317\n50%   = 8114\nqps: 1319\n50%   = 8395\nqps: 1349\n50%   = 8160\nqps: 1293\n50%   = 8922\nwt=xml\nqps: 634\n50%   = 21983\nqps: 713\n50%   = 22138\nqps: 718\n50%   = 21594\nqps: 717\n50%   = 20935\nqps: 741\n50%   = 20546\nwt=json\nqps: 945\n50%   = 15500\nqps: 938\n50%   = 16812\nqps: 921\n50%   = 15467\nqps: 930\n50%   = 15337\nqps: 932\n50%   = 15447\nwt=python\nqps: 1024\n50%   = 12975\nqps: 1046\n50%   = 12883\nqps: 996\n50%   = 14033\nqps: 988\n50%   = 14295\nqps: 1013\n50%   = 13206\nwt=ruby\nqps: 893\n50%   = 18897\nqps: 878\n50%   = 18943\nqps: 871\n50%   = 18413\nqps: 857\n50%   = 19190\nqps: 902\n50%   = 18554\n========= trunk with SOLR-2381_take2.patch (not using jetty's writers) ===========\nwt=javabin\nqps: 1315\n50%   = 7884\nqps: 1285\n50%   = 8946\nqps: 1280\n50%   = 8083\nqps: 1340\n50%   = 7899\nqps: 1310\n50%   = 7872\nwt=xml\nqps: 773\n50%   = 16006\nqps: 938\n50%   = 14316\nqps: 946\n50%   = 15709\nqps: 956\n50%   = 14735\nqps: 950\n50%   = 14825\nwt=json\nqps: 1127\n50%   = 10168\nqps: 1104\n50%   = 11147\nqps: 1166\n50%   = 10691\nqps: 1100\n50%   = 10654\nqps: 1138\n50%   = 10437\nwt=python\nqps: 1004\n50%   = 12502\nqps: 1033\n50%   = 13525\nqps: 1007\n50%   = 13762\nqps: 1043\n50%   = 11854\nqps: 985\n50%   = 13289\nwt=ruby\nqps: 1164\n50%   = 9457\nqps: 1175\n50%   = 9994\nqps: 1212\n50%   = 9437\nqps: 1203\n50%   = 9756\nqps: 1197\n50%   = 10640\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13004689",
            "date": "2011-03-09T18:14:10+0000",
            "content": "Here the patch for 3.x and 3.1, also fixing the other Servlets to use only byte streams when reading/writing. This also contains the rest of issue SOLR-2347 to fix deprecated parts of XML using Readers (legacyUpdateRequest). "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13004708",
            "date": "2011-03-09T18:32:21+0000",
            "content": "Patch for 3.1 and 3.x, revised & cleaned up as described before "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13004721",
            "date": "2011-03-09T18:46:42+0000",
            "content": "Again revised (one optimization in the deprecated UpdateServlet). Sorry for multiple patch posts.\n\nIts now ready to commit (all branches). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13004745",
            "date": "2011-03-09T19:20:07+0000",
            "content": "OK, i committed my patch to trunk: Committed revision 1079949.\n\nUwe, can you take it from here for 3.x and 3.1? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13004755",
            "date": "2011-03-09T19:37:19+0000",
            "content": "Committed 3.x revision: 1079954\nCommitted 3.1 revision: 1079955 "
        },
        {
            "author": "uygar bayar",
            "id": "comment-13008428",
            "date": "2011-03-18T13:28:32+0000",
            "content": "hi i use 3.x trunk. I insert documents with pecl php. \n\nrw-rr-  1 nutch nutch 540234 Mar 17 12:37 jetty-6.1.26-patched-JETTY-1340.jar\nrw-rr-  1 nutch nutch  11358 Mar 17 12:37 jetty-LICENSE.txt\nrw-rr-  1 nutch nutch   1621 Mar 17 12:37 jetty-NOTICE.txt\nrw-rr-  1 nutch nutch 177393 Mar 17 12:37 jetty-util-6.1.26-patched-JETTY-1340.jar\n\nSEVERE: org.apache.solr.common.SolrException: Invalid UTF-8 middle byte 0x63 (at char #334, byte #127)\n\tat org.apache.solr.handler.XMLLoader.load(XMLLoader.java:79)\n\tat org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:55)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1360)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:356)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:252)\n\tat org.mortbay.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1212)\n\tat org.mortbay.jetty.servlet.ServletHandler.handle(ServletHandler.java:399)\n\tat org.mortbay.jetty.security.SecurityHandler.handle(SecurityHandler.java:216)\n\tat org.mortbay.jetty.servlet.SessionHandler.handle(SessionHandler.java:182)\n\tat org.mortbay.jetty.handler.ContextHandler.handle(ContextHandler.java:766)\n\tat org.mortbay.jetty.webapp.WebAppContext.handle(WebAppContext.java:450)\n\tat org.mortbay.jetty.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:230)\n\tat org.mortbay.jetty.handler.HandlerCollection.handle(HandlerCollection.java:114)\n\tat org.mortbay.jetty.handler.HandlerWrapper.handle(HandlerWrapper.java:152)\n\tat org.mortbay.jetty.Server.handle(Server.java:326)\n\tat org.mortbay.jetty.HttpConnection.handleRequest(HttpConnection.java:542)\n\tat org.mortbay.jetty.HttpConnection$RequestHandler.content(HttpConnection.java:945)\n\tat org.mortbay.jetty.HttpParser.parseNext(HttpParser.java:756)\n\tat org.mortbay.jetty.HttpParser.parseAvailable(HttpParser.java:218)\n\tat org.mortbay.jetty.HttpConnection.handle(HttpConnection.java:404)\n\tat org.mortbay.jetty.bio.SocketConnector$Connection.run(SocketConnector.java:228)\n\tat org.mortbay.thread.QueuedThreadPool$PoolThread.run(QueuedThreadPool.java:582)\nCaused by: com.ctc.wstx.exc.WstxIOException: Invalid UTF-8 middle byte 0x63 (at char #334, byte #127)\n\tat com.ctc.wstx.sr.StreamScanner.throwFromIOE(StreamScanner.java:708)\n\tat com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1086)\n\tat org.apache.solr.handler.XMLLoader.readDoc(XMLLoader.java:281)\n\tat org.apache.solr.handler.XMLLoader.processUpdate(XMLLoader.java:146)\n\tat org.apache.solr.handler.XMLLoader.load(XMLLoader.java:77)\n\t... 22 more\nCaused by: java.io.CharConversionException: Invalid UTF-8 middle byte 0x63 (at char #334, byte #127)\n\tat com.ctc.wstx.io.UTF8Reader.reportInvalidOther(UTF8Reader.java:313)\n\tat com.ctc.wstx.io.UTF8Reader.read(UTF8Reader.java:204)\n\tat com.ctc.wstx.io.MergedReader.read(MergedReader.java:101)\n\tat com.ctc.wstx.io.ReaderSource.readInto(ReaderSource.java:84)\n\tat com.ctc.wstx.io.BranchingReaderSource.readInto(BranchingReaderSource.java:57)\n\tat com.ctc.wstx.sr.StreamScanner.loadMoreFromCurrent(StreamScanner.java:1046)\n\tat com.ctc.wstx.sr.StreamScanner.parseLocalName2(StreamScanner.java:1796)\n\tat com.ctc.wstx.sr.StreamScanner.parseLocalName(StreamScanner.java:1756)\n\tat com.ctc.wstx.sr.BasicStreamReader.handleNsAttrs(BasicStreamReader.java:2981)\n\tat com.ctc.wstx.sr.BasicStreamReader.handleStartElem(BasicStreamReader.java:2936)\n\tat com.ctc.wstx.sr.BasicStreamReader.nextFromTree(BasicStreamReader.java:2848)\n\tat com.ctc.wstx.sr.BasicStreamReader.next(BasicStreamReader.java:1019)\n\t... 25 more\n\nMar 18, 2011 3:13:42 PM org.apache.solr.core.SolrCore execute\nINFO: [] webapp=/solr path=/update/ params=\n{indent=on&wt=xml&version=2.2}\n status=400 QTime=0  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013131",
            "date": "2011-03-30T15:45:39+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}