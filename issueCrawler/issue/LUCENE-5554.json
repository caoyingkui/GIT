{
    "id": "LUCENE-5554",
    "title": "Add TermBulkScorer",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/search"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ]
    },
    "description": "Hotspot was unhappy with the changes in LUCENE-5487, e.g.: http://people.apache.org/~mikemccand/lucenebench/OrHighHigh.html\n\nBut it looks like we can get the performance back by making a dedicated BulkScorer for TermQuery.",
    "attachments": {
        "LUCENE-5554.patch": "https://issues.apache.org/jira/secure/attachment/12636748/LUCENE-5554.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13946919",
            "author": "Michael McCandless",
            "content": "Patch. ",
            "date": "2014-03-25T18:36:38+0000"
        },
        {
            "id": "comment-13946920",
            "author": "Michael McCandless",
            "content": "Perf of patch vs trunk:\n\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n              AndHighLow      394.80      (2.4%)      390.51      (2.8%)   -1.1% (  -6% -    4%)\n             LowSpanNear       10.98      (3.9%)       10.88      (3.4%)   -0.8% (  -7% -    6%)\n            HighSpanNear       10.03      (7.5%)        9.95      (6.0%)   -0.8% ( -13% -   13%)\n             MedSpanNear       33.49      (3.7%)       33.28      (3.2%)   -0.6% (  -7% -    6%)\n              AndHighMed       34.43      (1.7%)       34.24      (1.3%)   -0.5% (  -3% -    2%)\n         LowSloppyPhrase       44.55      (1.8%)       44.32      (2.3%)   -0.5% (  -4% -    3%)\n             AndHighHigh       28.39      (1.5%)       28.26      (1.3%)   -0.5% (  -3% -    2%)\n                 Respell       48.70      (3.3%)       48.58      (3.4%)   -0.2% (  -6% -    6%)\n               LowPhrase       13.15      (2.1%)       13.14      (1.9%)   -0.1% (  -4% -    3%)\n         MedSloppyPhrase        3.53      (3.7%)        3.52      (4.9%)   -0.0% (  -8% -    8%)\n        HighSloppyPhrase        3.44      (5.5%)        3.44      (9.0%)    0.0% ( -13% -   15%)\n              HighPhrase        4.21      (6.7%)        4.27      (7.0%)    1.2% ( -11% -   15%)\n               MedPhrase      208.99      (6.0%)      211.61      (6.8%)    1.3% ( -10% -   14%)\n                Wildcard       19.08      (3.4%)       19.39      (3.0%)    1.6% (  -4% -    8%)\n                 Prefix3       85.31      (3.6%)       87.89      (1.6%)    3.0% (  -2% -    8%)\n                  IntNRQ        3.37      (5.0%)        3.47      (2.2%)    3.1% (  -3% -   10%)\n                  Fuzzy2       46.34      (3.8%)       48.72      (2.6%)    5.1% (  -1% -   11%)\n                  Fuzzy1       58.95      (4.3%)       62.40      (2.3%)    5.9% (   0% -   13%)\n                 LowTerm      323.43      (5.1%)      352.16      (4.9%)    8.9% (  -1% -   19%)\n                 MedTerm      100.56      (8.8%)      118.56     (11.2%)   17.9% (  -1% -   41%)\n            OrHighNotMed       31.20      (6.0%)       38.53      (3.1%)   23.5% (  13% -   34%)\n                HighTerm       64.41     (11.6%)       80.45     (17.2%)   24.9% (  -3% -   60%)\n               OrHighMed       26.99      (6.3%)       33.75      (3.5%)   25.0% (  14% -   37%)\n               OrHighLow       19.16      (6.4%)       24.24      (3.7%)   26.5% (  15% -   39%)\n            OrHighNotLow       25.28      (6.3%)       31.98      (3.7%)   26.5% (  15% -   38%)\n              OrHighHigh        8.36      (6.3%)       10.60      (3.5%)   26.8% (  16% -   39%)\n           OrHighNotHigh       11.28      (6.3%)       14.33      (3.1%)   27.0% (  16% -   38%)\n           OrNotHighHigh        9.02      (6.4%)       11.57      (3.4%)   28.2% (  17% -   40%)\n            OrNotHighMed       19.35      (7.2%)       24.84      (2.3%)   28.4% (  17% -   40%)\n            OrNotHighLow       20.01      (7.4%)       25.84      (2.3%)   29.1% (  18% -   42%)\n\n ",
            "date": "2014-03-25T18:36:57+0000"
        },
        {
            "id": "comment-13946933",
            "author": "Robert Muir",
            "content": "I don't really like the idea of adding classes to lucene just because of some quirks in the oracle hotspot compiler.\n\nespecially ones as core as this that score query terms. \n\nPerformance isn't everything. ",
            "date": "2014-03-25T18:43:23+0000"
        },
        {
            "id": "comment-13946962",
            "author": "Shai Erera",
            "content": "I think it's good to add this specialization. We play around hotspot issues in other places too (e.g. DataInput.readVInt). But perhaps you can add it as an anonymous class? It will have less impact on the code and I don't think anyone will want to do e.g. instanceof checks or override it? ",
            "date": "2014-03-25T18:54:03+0000"
        },
        {
            "id": "comment-13946967",
            "author": "Yonik Seeley",
            "content": "Performance is a primary goal, and the Oracle JDK is a primary JVM (and specialization is likely to help other hotspot-type JVMs as well).  I think we should commit this. ",
            "date": "2014-03-25T18:55:24+0000"
        },
        {
            "id": "comment-13946970",
            "author": "Robert Muir",
            "content": "I dont think its good to commit a specialization to \"work around a hotspot problem\" without detailing exactly what the problem is.\n\nWhy did it become slower? We should simply debug this and understand what is happening. \n\nPlease don't give the patient medicine without a diagnosis. ",
            "date": "2014-03-25T18:56:22+0000"
        },
        {
            "id": "comment-13947316",
            "author": "Robert Muir",
            "content": "I debugged this. look at the old Scorer.java (say from 4.7) and it has two methods:\n\n\n/* scores all docs (whole segment) until exhausted. */\nscore(Collector collector)\n\n/* scores range (typically small range of just 2K or whatever BS1 does). More complicated logic than the first one (range checks, must return 'more', etc). */\nscore(Collector collector, int max, int firstDocID)\n\n\n\nIn LUCENE-5487 these got combined into a single, more complicated method. Actually the API is fine: we just have to split out these two very different cases in the default implementation, and its fixed for all scorers.\n\nhere's a patch that does that, and restores the performance. Mike's patch just dodges this for his benchmark, but the issue here is more general. However, before committing we should probably see if we can clean up the patch a bit. ",
            "date": "2014-03-25T23:10:21+0000"
        },
        {
            "id": "comment-13947331",
            "author": "Uwe Schindler",
            "content": "Thanks Robert! I agree, specialisation medicine is not good for the patient. ",
            "date": "2014-03-25T23:29:06+0000"
        },
        {
            "id": "comment-13947345",
            "author": "Yonik Seeley",
            "content": "Thanks Robert! I agree, specialisation medicine is not good for the patient.\n\nshrug - it's still specialization - providing different pathways for hotspot to go through so it can specialize better.  Of course it's better specialization if it can work in more cases. ",
            "date": "2014-03-25T23:44:14+0000"
        },
        {
            "id": "comment-13947357",
            "author": "Robert Muir",
            "content": "Well I'm not really sure its specialization. IMO these two methods are different things, and should probably be named as such: score() and scoreRange() or something. \n\nThey take different parameters and have different return values.\n\nIts just the case (which I did not notice) in LUCENE-5487, that one is changed to call the other to try to shoehorn them into one method. Thats why i said, we should investigate cleaning this up better: all this patch does is \"undo the shoehorning\".\n\nBut we don't need to duplicate term scorer nor change the API if we don't really want to. ",
            "date": "2014-03-25T23:56:56+0000"
        },
        {
            "id": "comment-13947405",
            "author": "Yonik Seeley",
            "content": "combining two methods into one... generalization (or shoehorning... but that's a rather subjective term)\nsplitting one method into two... specialization\n\nSplit all the hairs you want, as long as we get something committed that brings back the performance  ",
            "date": "2014-03-26T00:48:37+0000"
        },
        {
            "id": "comment-13947436",
            "author": "Robert Muir",
            "content": "I'm not splitting hairs: I'm putting the API here first. There is no rush, we can do this right.\n\nThe onus is not on me to prevent the code from going crazy in the name of \"performance\". Its actually quite the opposite.\n\nWe can wait here on this issue for the best solution. ",
            "date": "2014-03-26T01:32:21+0000"
        },
        {
            "id": "comment-13947782",
            "author": "Michael McCandless",
            "content": "I think both approaches amount to hotspot voodoo.\n\nBut I agree Rob's patch is less voodoo-ey, and I ran a perf test where base = just before LUCENE-5487 was committed, and comp = just after it was committed PLUS Rob's patch:\n\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n              AndHighLow      300.56      (3.0%)      291.94      (2.4%)   -2.9% (  -8% -    2%)\n                  Fuzzy1       43.83      (2.9%)       42.85      (4.0%)   -2.2% (  -8% -    4%)\n                  Fuzzy2       34.41      (2.5%)       33.65      (3.5%)   -2.2% (  -8% -    3%)\n               OrHighLow       17.16      (1.7%)       16.91      (2.8%)   -1.4% (  -5% -    3%)\n            OrHighNotLow       22.29      (1.8%)       22.02      (2.8%)   -1.2% (  -5% -    3%)\n           OrHighNotHigh       10.41      (1.7%)       10.29      (2.6%)   -1.2% (  -5% -    3%)\n           OrNotHighHigh        8.40      (1.9%)        8.31      (2.7%)   -1.2% (  -5% -    3%)\n               OrHighMed       23.29      (1.7%)       23.03      (2.6%)   -1.1% (  -5% -    3%)\n             AndHighHigh       23.08      (2.2%)       22.85      (2.0%)   -1.0% (  -5% -    3%)\n            OrHighNotMed       26.20      (1.5%)       25.94      (2.6%)   -1.0% (  -4% -    3%)\n                 Respell       37.25      (3.0%)       36.90      (3.7%)   -1.0% (  -7% -    5%)\n              AndHighMed       27.81      (2.5%)       27.56      (2.0%)   -0.9% (  -5% -    3%)\n            OrNotHighLow       19.65      (1.4%)       19.54      (2.6%)   -0.6% (  -4% -    3%)\n        HighSloppyPhrase        2.67      (6.8%)        2.66      (7.2%)   -0.5% ( -13% -   14%)\n            OrNotHighMed       18.70      (1.5%)       18.61      (2.5%)   -0.5% (  -4% -    3%)\n         MedSloppyPhrase        2.87      (5.0%)        2.86      (4.3%)   -0.4% (  -9% -    9%)\n              OrHighHigh        7.55      (2.0%)        7.53      (3.2%)   -0.3% (  -5% -    5%)\n                Wildcard       15.12      (3.8%)       15.08      (3.6%)   -0.3% (  -7% -    7%)\n              HighPhrase        3.25      (7.6%)        3.26      (6.6%)    0.5% ( -12% -   15%)\n         LowSloppyPhrase       35.48      (2.3%)       35.66      (2.4%)    0.5% (  -4% -    5%)\n             MedSpanNear       24.07      (4.0%)       24.26      (3.6%)    0.8% (  -6% -    8%)\n               LowPhrase       10.25      (3.2%)       10.34      (2.3%)    0.9% (  -4% -    6%)\n                 Prefix3       72.06      (2.7%)       72.71      (3.2%)    0.9% (  -4% -    6%)\n                  IntNRQ        2.79      (5.0%)        2.82      (5.3%)    1.1% (  -8% -   11%)\n             LowSpanNear        8.19      (4.0%)        8.29      (4.2%)    1.2% (  -6% -    9%)\n            HighSpanNear        6.15      (5.8%)        6.23      (5.3%)    1.3% (  -9% -   13%)\n               MedPhrase      157.17      (6.9%)      159.52      (6.9%)    1.5% ( -11% -   16%)\n                 MedTerm       70.27     (11.4%)       71.81     (12.4%)    2.2% ( -19% -   29%)\n                HighTerm       49.45     (12.8%)       50.94     (14.9%)    3.0% ( -21% -   35%)\n                 LowTerm      209.81     (13.9%)      218.70     (11.2%)    4.2% ( -18% -   33%)\n\n\n\nIe, we want everything to be 0%, and so it looks like Rob's patch makes hotspot happy again and is more general than my first patch.\n\nSo +1 to commit. ",
            "date": "2014-03-26T10:30:05+0000"
        },
        {
            "id": "comment-13949038",
            "author": "Shai Erera",
            "content": "+1 to commit as well.\n\nBut Mike, your patch seemed to improve performance in some cases by up to 30% - I wonder if with Rob's patch, it still would show the same perf gains (i.e. trunk + Rob's patch vs trunk + Rob's patch + your patch). If it will, I think we should commit both patches, but make the scorer in TermQuery an anonymous class. ",
            "date": "2014-03-27T08:41:10+0000"
        },
        {
            "id": "comment-13949134",
            "author": "Robert Muir",
            "content": "-1 to committing anything here right now, and definitely not mikes patch, ever.\n\nThats just reckless code duplication.\n\nthats also not what mike's benchmark was measuring, and i dont care if measuring it does speed that microbenchmark up. \n\nI am also unsure if the current \"performance degradation\" is real at all. Its a benchmark and the methods in question are compiled with OSR. It seems like it may just be a benchmark issue. ",
            "date": "2014-03-27T10:37:42+0000"
        },
        {
            "id": "comment-13949211",
            "author": "Yonik Seeley",
            "content": "I wonder if with Rob's patch, it still would show the same perf gains\n\nIt shouldn't show the same gains as before... but it could show some speedups.  We should try it out! ",
            "date": "2014-03-27T12:16:01+0000"
        },
        {
            "id": "comment-13949468",
            "author": "Michael McCandless",
            "content": "I ran the same \"pre vs post\" perf test as above, this time with my original patch:\n\n\n                    Task    QPS base      StdDev    QPS comp      StdDev                Pct diff\n                  IntNRQ        2.81      (4.6%)        2.61      (5.2%)   -7.0% ( -16% -    2%)\n                 Prefix3       72.54      (2.7%)       68.45      (3.5%)   -5.6% ( -11% -    0%)\n                Wildcard       15.13      (3.7%)       14.47      (3.5%)   -4.3% ( -11% -    3%)\n              AndHighLow      296.42      (3.1%)      286.01      (3.5%)   -3.5% (  -9% -    3%)\n            HighSpanNear        6.14      (6.2%)        6.00      (6.0%)   -2.3% ( -13% -   10%)\n             AndHighHigh       23.06      (2.2%)       22.77      (2.4%)   -1.3% (  -5% -    3%)\n             MedSpanNear       24.03      (4.3%)       23.73      (4.1%)   -1.2% (  -9% -    7%)\n              AndHighMed       27.80      (2.6%)       27.51      (2.4%)   -1.1% (  -5% -    4%)\n        HighSloppyPhrase        2.63      (5.7%)        2.60      (7.0%)   -1.0% ( -12% -   12%)\n             LowSpanNear        8.17      (4.1%)        8.10      (4.1%)   -0.9% (  -8% -    7%)\n               OrHighLow       17.03      (2.9%)       16.90      (6.5%)   -0.7% (  -9% -    8%)\n            OrHighNotMed       26.17      (2.7%)       25.98      (6.2%)   -0.7% (  -9% -    8%)\n           OrHighNotHigh       10.36      (2.7%)       10.30      (6.9%)   -0.6% (  -9% -    9%)\n         MedSloppyPhrase        2.85      (5.3%)        2.83      (4.2%)   -0.5% (  -9% -    9%)\n         LowSloppyPhrase       35.49      (2.5%)       35.32      (2.1%)   -0.5% (  -4% -    4%)\n            OrNotHighLow       19.51      (3.0%)       19.43      (7.3%)   -0.4% ( -10% -   10%)\n            OrHighNotLow       22.14      (2.7%)       22.06      (6.2%)   -0.4% (  -9% -    8%)\n               OrHighMed       23.18      (2.5%)       23.10      (6.0%)   -0.3% (  -8% -    8%)\n            OrNotHighMed       18.66      (2.9%)       18.62      (7.1%)   -0.2% (  -9% -   10%)\n           OrNotHighHigh        8.35      (3.0%)        8.35      (6.9%)   -0.1% (  -9% -   10%)\n              OrHighHigh        7.54      (2.6%)        7.54      (6.9%)   -0.0% (  -9% -    9%)\n                 Respell       37.21      (3.9%)       37.26      (4.2%)    0.1% (  -7% -    8%)\n              HighPhrase        3.22      (7.7%)        3.23      (7.6%)    0.3% ( -13% -   16%)\n               LowPhrase       10.27      (3.1%)       10.32      (2.7%)    0.5% (  -5% -    6%)\n               MedPhrase      156.68      (7.1%)      158.03      (6.9%)    0.9% ( -12% -   15%)\n                  Fuzzy2       34.20      (3.2%)       34.80      (3.0%)    1.8% (  -4% -    8%)\n                  Fuzzy1       43.47      (3.3%)       44.63      (2.8%)    2.7% (  -3% -    9%)\n                 LowTerm      216.83     (15.8%)      227.80      (9.3%)    5.1% ( -17% -   35%)\n                 MedTerm       71.04     (11.6%)       77.63      (8.7%)    9.3% (  -9% -   33%)\n                HighTerm       49.15     (11.7%)       57.07     (12.5%)   16.1% (  -7% -   45%)\n\n\n\nLooks like similar gains as Rob's patch, except TermQuery saw a bigger speedup ...\n\nRob had a good idea: to try having IndexSearcher handle the default bulk-scoring case, instead of Weight.bulkScorer creating a DefaultBulkScorer ... I'll try that next. ",
            "date": "2014-03-27T15:52:25+0000"
        },
        {
            "id": "comment-13949484",
            "author": "Michael McCandless",
            "content": "I am also unsure if the current \"performance degradation\" is real at all. Its a benchmark and the methods in question are compiled with OSR. It seems like it may just be a benchmark issue.\n\nWe should improve the luceneutil benchmark if we can, but just because hotspot chose to use OSR doesn't mean the benchmark is a microbenchmark (the reverse is often true I guess).\n\nThe benchmark takes a large task file (many different queries in each of the categories), randomly picks one query per category, executes each query 100 times, but shuffles the order that all these queries will run, and runs with 3 threads.\n\nI think there are clear improvements we could make, e.g. using \"real world\" queries (these queries were generated by walking the index to find \"good\"/hard queries; the source for that is CreateQueries.java in luceneutil), also do faceting/grouping/joining/sort by field/highlighting as well, etc.  Basically make it closer to a real search app ...\n\nBut net/net I don't think this is a microbenchmark; I think it's a fair test.  Please don't shoot the messenger \n\nIf anyone else has different benchmarks to try, please do so!  Even just running luceneutil on your env is great because maybe my env has some strange behavior or something... ",
            "date": "2014-03-27T16:03:20+0000"
        },
        {
            "id": "comment-13949607",
            "author": "Yonik Seeley",
            "content": "Thanks for the details - that's exactly what the benchmarker should do to avoid falling into the trap that many micro-benchmark do (provided there's enough query variety to avoid over-specialziation that would otherwise not occur in the real world).  We want hotspot to be able to specialize... in the presence of real-world workloads. ",
            "date": "2014-03-27T17:07:33+0000"
        },
        {
            "id": "comment-13963325",
            "author": "Michael McCandless",
            "content": "I think for now we should just commit Rob's patch here: it's more general \"hotpot voodoo\" than my patch, and appears to fix the perf loss from LUCENE-5487.  I plan to commit soon ... ",
            "date": "2014-04-08T19:18:18+0000"
        },
        {
            "id": "comment-13964145",
            "author": "ASF subversion and git services",
            "content": "Commit 1585967 from mikemccand@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1585967 ]\n\nLUCENE-5554: break out separate Weight.scoreRange/scoreAll so hotspot is relatively happy again after LUCENE-5487 ",
            "date": "2014-04-09T13:39:00+0000"
        },
        {
            "id": "comment-13964149",
            "author": "ASF subversion and git services",
            "content": "Commit 1585968 from mikemccand@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1585968 ]\n\nLUCENE-5554: break out separate Weight.scoreRange/scoreAll so hotspot is relatively happy again after LUCENE-5487 ",
            "date": "2014-04-09T13:41:32+0000"
        },
        {
            "id": "comment-13982641",
            "author": "Uwe Schindler",
            "content": "Close issue after release of 4.8.0 ",
            "date": "2014-04-27T23:26:03+0000"
        }
    ]
}