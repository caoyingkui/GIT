{
    "id": "SOLR-10654",
    "title": "Expose Metrics in Prometheus format",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "metrics"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Implemented",
        "status": "Resolved"
    },
    "description": "Expose metrics via a `wt=prometheus` response type.\n\nExample scape_config in prometheus.yml:\n\n\nscrape_configs:\n\n  - job_name: 'solr'\n\n    metrics_path: '/solr/admin/metrics'\n\n    params:\n      wt: [\"prometheus\"]\n\n    static_configs:\n      - targets: ['localhost:8983']",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-09T19:06:22+0000",
            "content": "GitHub user kelaban opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/200\n\n    SOLR-10654 - Expose Prometheus metrics under /admin/metrics with wt=p\u2026\n\n    \u2026rometheus\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/kelaban/lucene-solr jira/master/SOLR-10654/prometheus-metrics\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/200.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #200\n\n\ncommit 70d88101b2cb7b893e63f775b63fcd0a91e9d9b7\nAuthor: Keith Laban <klaban1@bloomberg.net>\nDate:   2017-05-08T20:41:22Z\n\n    SOLR-10654 - Expose Prometheus metrics under /admin/metrics with wt=prometheus\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16003322"
        },
        {
            "date": "2017-05-09T19:09:50+0000",
            "content": "Exposing prometheus metrics by creating a new response writer type. I couldn't think of a more graceful way to handle this then creating a new response format. ",
            "author": "Keith Laban",
            "id": "comment-16003328"
        },
        {
            "date": "2017-05-09T19:22:20+0000",
            "content": "Does Prometheus use a pull or push model for collecting metrics from monitored systems? Metrics API uses SolrMetricReporter subclasses for pushing metrics to external systems using custom formats, so that would be the way to go when using push model.\n\nWriter types are a kind of global thing, ie. should not be specific to a particular handler. ",
            "author": "Andrzej Bialecki",
            "id": "comment-16003357"
        },
        {
            "date": "2017-05-09T19:37:04+0000",
            "content": "Prometheus uses a pull model. I thought of setting up a reporter which also setups up a servlet to serve stats in prometheus format but that seemed more cumbersome. I also wasn't sure if it was possible to expose an arbitrary servlet easily. Using a solr request handler would still require the custom response format.  ",
            "author": "Keith Laban",
            "id": "comment-16003379"
        },
        {
            "date": "2017-05-09T21:24:13+0000",
            "content": "Very cool. Perhaps the reporter framework needs to support pull (if it does not already)? What if the reporter's defined name in solr.xml would automatically be exposed as a sub-path of /admin/metrics, where latest version is served, e.g. http://localhost:8983/solr/admin/metrics/prometheus ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16003584"
        },
        {
            "date": "2017-05-10T14:54:36+0000",
            "content": "Jan, I think the problem would still be that each handler would most likely need their own very specific custom response format. If we were to do this we would need to expose them as a raw Filter or Servlet instead of a SolrRequestHandler. I'm not aware of anywhere else in solr where this is happening. The other option would be to add a custom response writer format for each metrics type, kind of like Iike I did here.  ",
            "author": "Keith Laban",
            "id": "comment-16004814"
        },
        {
            "date": "2017-05-11T10:30:41+0000",
            "content": "I see, it's an interesting issue. The metrics API as it is today is focused on the push model, but indeed the MetricsHandler seems like the ideal place for adding custom formats to support pull models. However, response writers are registered globally per SolrCore, and it seems weird and potentially misleading to globally register a writer that is a) handler-specific, b) supports only numeric values.\n\nOTOH there are precedents for a) above - graphml, schema.xml and filestream writers. There are also precedents for b) - handlers that accept requests in one format but return response in a different (hardcoded) format, eg. ExportHandler, so maybe it's not such a big deal...\n\nIn the current patch the registration is hardcoded - it would have to be made more dynamic. Eg. you could consider adding generic support for custom pull formats to MetricsHandler, which would go through every SolrMetricReporter instance that implements a SolrMetricPullReporter (what an ugly name...) or something like that, and register its response writers and WT-s that it supports, and then based on either a reporter name, or path or WT, call a method from that interface to prepare a report to be serialized.\n\nCurrent patch also ignores all metric / property filtering logic present in MetricsHandler.handleRequestBody - I understand that DropwizardExports doesn't support any filtering, but it should be possible to reimplement this using MetricUtils.toMaps or similar methods from MetricUtils.\n\nAnd finally, Solr now uses many non-numeric gauges, most notably String and a dynamic MetricsMap, so you would have to add a special treatment for these. ",
            "author": "Andrzej Bialecki",
            "id": "comment-16006214"
        },
        {
            "date": "2017-05-11T14:30:05+0000",
            "content": "Seems like there a few things here:\n\n1.  \n\n\ta: Pull reporter framework. An interesting idea, but is it over engineering for an initial effort? I'm not aware any other mainstream metrics frameworks that pull metrics in a very specific format. Any home rolled thing can consume the default format we expose.\n\tb: Additionally, we can expose these metrics under /metrics/prometheus like suggested above, to avoid having to change the api if we later decide there is a need for more generic framework.\n\n\n\n2. Response writers. It might be interesting to expose response writers dynamically with a plugin-style interface. Or add a Function to the response object that can dictate the writer to be used (optionally). Either way, I think this is separate enough from metrics, and useful in other places, that it should be pursued in a separate issue. \n\n3. Dropwizard Exports - yes, there is not feature parity with default solr metrics, but is it required for an initial patch? To me it seems like a lot of work that isn't required on day one. But I agree it should be added at some point. \n\nI propose that we tackle #2 and #1.b for the initial patch. And circle back to #3 and #1.a if we find it necessary. ",
            "author": "Keith Laban",
            "id": "comment-16006516"
        },
        {
            "date": "2018-10-02T20:20:16+0000",
            "content": "Solr already implements the prometheus exporter\u00a0https://lucene.apache.org/solr/guide/7_5/monitoring-solr-with-prometheus-and-grafana.html\u00a0 ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16636067"
        }
    ]
}