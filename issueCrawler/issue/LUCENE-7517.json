{
    "id": "LUCENE-7517",
    "title": "Explore making Scorer.score() return a double",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Wish"
    },
    "description": "Follow-up to http://search-lucene.com/m/l6pAi1BoyPJ1vr2382&subj=Re+JENKINS+EA+Lucene+Solr+master+Linux+64bit+jdk+9+ea+140+Build+18103+Unstable+.\n\nWe could make Scorer.score() return a double in order to lose less accuracy when combining scores together, while still using floats on TopDocs and more generally all parts of the code that need to store scores.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15595047",
            "author": "Uwe Schindler",
            "date": "2016-10-21T13:20:15+0000",
            "content": "I agree here, especially with Robert's comment: We should store and return scores as float to the user (a double makes no sense, because it leads to wrong expectations for users - who always tend to misuse scores for stuff they are not made for: they are just there to compare to search results and bring them in right order; for that we should use the float, so minor calculation differences don't matter). But when we actually calculate the score we should use double precision for all calculation steps.\n\nThe good thing: at the end we round everything to a float, so some differences by order of clauses would be removed during this round at end before it goes to TopDocs. "
        },
        {
            "id": "comment-15595051",
            "author": "David Smiley",
            "date": "2016-10-21T13:22:11+0000",
            "content": "+1 Makes sense to me. "
        },
        {
            "id": "comment-15595150",
            "author": "Adrien Grand",
            "date": "2016-10-21T13:51:54+0000",
            "content": "Any opinions about whether things like CachingCollector should keep buffering floats or switch to doubles if we do that? On the one hand, it seems too wasteful to use doubles but on the other hand storing floats would mean that the replay would return slightly different scores than during the buffering phase. Buffering scores sounds weird to me but apparently it's used for grouping. "
        },
        {
            "id": "comment-15595168",
            "author": "Yonik Seeley",
            "date": "2016-10-21T13:58:03+0000",
            "content": "Any opinions about whether things like CachingCollector should keep buffering floats or switch to doubles if we do that?\n\nSeems like it should switch to doubles (that original caching was meant to be totally transparent). "
        },
        {
            "id": "comment-15595211",
            "author": "Michael McCandless",
            "date": "2016-10-21T14:14:15+0000",
            "content": "Seems like it should switch to doubles (that original caching was meant to be totally transparent).\n\n+1\n\nAnd +1 to the API change. "
        },
        {
            "id": "comment-15604773",
            "author": "Adrien Grand",
            "date": "2016-10-25T09:30:01+0000",
            "content": "I started exploring making this change and would appreciate if somebody could cross-check these assumptions:\n\n\tthe Explanation API needs to be switched to doubles, so that it can combine scores from sub queries the same way as the Scorer API\n\tTopDocsCollector and TopFieldCollector with SortField.Type.SCORE need to cast to a float before comparing the bottom score and adding to the priority queue. Otherwise the final top docs could appear as being out of order.\n\tscore-based value sources still need to expose the score as a float rather than a double, so that sorting by a score value source yields the same result as sorting by score\n\n "
        }
    ]
}