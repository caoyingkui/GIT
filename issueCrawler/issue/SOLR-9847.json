{
    "id": "SOLR-9847",
    "title": "Deadlock on ManagedIndexSchema lock.",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Seems we hold the lock while in ManagedIndexSchema.waitForSchemaZkVersionAgreement, so we may never see agreement because are updates may also be waiting on that lock.",
    "attachments": {
        "SOLR-9847.patch": "https://issues.apache.org/jira/secure/attachment/12842747/SOLR-9847.patch",
        "SOLR-9847-release-lock-before-replica-version-agreement.patch": "https://issues.apache.org/jira/secure/attachment/12843966/SOLR-9847-release-lock-before-replica-version-agreement.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-12-12T02:51:06+0000",
            "author": "Mark Miller",
            "content": "Not a complete deadlock I guess, but takes a long time to sort out:\n\n   [junit4] HEARTBEAT J9 PID(4929@totalmetal): 2016-12-11T21:27:14, stalled for  190s at: TestBulkSchemaConcurrent.test\n   [junit4] HEARTBEAT J9 PID(4929@totalmetal): 2016-12-11T21:28:14, stalled for  250s at: TestBulkSchemaConcurrent.test\n   [junit4] HEARTBEAT J9 PID(4929@totalmetal): 2016-12-11T21:29:14, stalled for  310s at: TestBulkSchemaConcurrent.test\n   [junit4] HEARTBEAT J9 PID(4929@totalmetal): 2016-12-11T21:30:14, stalled for  370s at: TestBulkSchemaConcurrent.test\n   [junit4] HEARTBEAT J9 PID(4929@totalmetal): 2016-12-11T21:31:14, stalled for  430s at: TestBulkSchemaConcurrent.test\n   [junit4] HEARTBEAT J9 PID(4929@totalmetal): 2016-12-11T21:32:14, stalled for  490s at: TestBulkSchemaConcurrent.test\n   [junit4] HEARTBEAT J9 PID(4929@totalmetal): 2016-12-11T21:33:14, stalled for  550s at: TestBulkSchemaConcurrent.test\n   [junit4] HEARTBEAT J9 PID(4929@totalmetal): 2016-12-11T21:34:14, stalled for  610s at: TestBulkSchemaConcurrent.test\n   [junit4] Suite: org.apache.solr.schema.TestBulkSchemaConcurrent\n\n ",
            "id": "comment-15740799"
        },
        {
            "date": "2016-12-12T02:51:42+0000",
            "author": "Mark Miller",
            "content": "I suppose that eventually happens because of:\n\n// eventually, this loop will get killed by the ExecutorService's timeout ",
            "id": "comment-15740801"
        },
        {
            "date": "2016-12-12T02:57:41+0000",
            "author": "Mark Miller",
            "content": "I don't know this code so well, but here is one idea. ",
            "id": "comment-15740809"
        },
        {
            "date": "2016-12-12T02:59:40+0000",
            "author": "Mark Miller",
            "content": "The stacks:\n\n\nqtp1112580055-3894 [WAITING]\nsun.misc.Unsafe.park(boolean, long) Unsafe.java (native)\njava.util.concurrent.locks.LockSupport.parkNanos(Object, long) LockSupport.java:215\njava.util.concurrent.FutureTask.awaitDone(boolean, long) FutureTask.java:426\njava.util.concurrent.FutureTask.get(long, TimeUnit) FutureTask.java:204\njava.util.concurrent.AbstractExecutorService.invokeAll(Collection, long, TimeUnit) AbstractExecutorService.java:289\norg.apache.solr.schema.ManagedIndexSchema.waitForSchemaZkVersionAgreement(String, String, int, ZkController, int) ManagedIndexSchema.java:238\norg.apache.solr.schema.SchemaManager.waitForOtherReplicasToUpdate(TimeOut, int) SchemaManager.java:167\norg.apache.solr.schema.SchemaManager.doOperations(List) SchemaManager.java:137\norg.apache.solr.schema.SchemaManager.performOperations(Reader) SchemaManager.java:92\norg.apache.solr.handler.SchemaHandler.handleRequestBody(SolrQueryRequest, SolrQueryResponse) SchemaHandler.java:91\norg.apache.solr.handler.RequestHandlerBase.handleRequest(SolrQueryRequest, SolrQueryResponse) RequestHandlerBase.java:152\norg.apache.solr.core.SolrCore.execute(SolrRequestHandler, SolrQueryRequest, SolrQueryResponse) SolrCore.java:2227\n\n\n\n\nzkCallback-535-thread-2-processing-n:127.0.0.1:34881_c_c [BLOCKED]\norg.apache.solr.schema.ZkIndexSchemaReader.updateSchema(Watcher, int) ZkIndexSchemaReader.java:131\norg.apache.solr.schema.ZkIndexSchemaReader.access$200(ZkIndexSchemaReader, Watcher, int) ZkIndexSchemaReader.java:39\norg.apache.solr.schema.ZkIndexSchemaReader$2.process(WatchedEvent) ZkIndexSchemaReader.java:97\norg.apache.solr.common.cloud.SolrZkClient$3.lambda$process$0(Watcher, WatchedEvent) SolrZkClient.java:268\norg.apache.solr.common.cloud.SolrZkClient$3$$Lambda$62.run()\njava.util.concurrent.Executors$RunnableAdapter.call() Executors.java:511\njava.util.concurrent.FutureTask.run() FutureTask.java:266\norg.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ArrayList, List, Map, String, Runnable, Exception) ExecutorUtil.java:229\norg.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor$$Lambda$40.run()\njava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) ThreadPoolExecutor.java:1142\njava.util.concurrent.ThreadPoolExecutor$Worker.run() ThreadPoolExecutor.java:617\njava.lang.Thread.run() Thread.java:745\n\n\n\n\nzkCallback-522-thread-2-processing-n:127.0.0.1:39199_c_c [BLOCKED]\norg.apache.solr.schema.ZkIndexSchemaReader.updateSchema(Watcher, int) ZkIndexSchemaReader.java:131\norg.apache.solr.schema.ZkIndexSchemaReader.access$200(ZkIndexSchemaReader, Watcher, int) ZkIndexSchemaReader.java:39\norg.apache.solr.schema.ZkIndexSchemaReader$2.process(WatchedEvent) ZkIndexSchemaReader.java:97\norg.apache.solr.common.cloud.SolrZkClient$3.lambda$process$0(Watcher, WatchedEvent) SolrZkClient.java:268\norg.apache.solr.common.cloud.SolrZkClient$3$$Lambda$62.run()\njava.util.concurrent.Executors$RunnableAdapter.call() Executors.java:511\njava.util.concurrent.FutureTask.run() FutureTask.java:266\norg.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor.lambda$execute$0(ArrayList, List, Map, String, Runnable, Exception) ExecutorUtil.java:229\norg.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor$$Lambda$40.run()\njava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor$Worker) ThreadPoolExecutor.java:1142\njava.util.concurrent.ThreadPoolExecutor$Worker.run() ThreadPoolExecutor.java:617\njava.lang.Thread.run() Thread.java:745\n\n ",
            "id": "comment-15740813"
        },
        {
            "date": "2016-12-14T02:20:23+0000",
            "author": "Mark Miller",
            "content": "Steve Rowe, any thoughts on this one? It has bit me quite a lot locally over the months. ",
            "id": "comment-15746977"
        },
        {
            "date": "2016-12-14T20:07:46+0000",
            "author": "Steve Rowe",
            "content": "I see this failure rarely on my Jenkins - like once every couple months.\n\nMark Miller, have you noticed whether the SOLR-9832 changes impacted frequency of this failure?\n\nI'll start beasting to see whether I can get this failure locally. ",
            "id": "comment-15749331"
        },
        {
            "date": "2016-12-19T18:05:46+0000",
            "author": "Steve Rowe",
            "content": "I beasted TestBulkSchemaConcurrent for 500 iterations with and without the patch, and the patch doesn't seem to change anything: unpatched, 27/500 iterations had the 600 second timeout; and patched, 28/500 iterations did.  Mark Miller, did your patch improve things for you locally?\n\nA different idea: we could release the update lock after local changes are made, but before waiting for all replicas to receive the update.  I'll try this out. ",
            "id": "comment-15761858"
        },
        {
            "date": "2016-12-19T18:08:13+0000",
            "author": "Mark Miller",
            "content": "Sorry, I have not yet had a lot of time on a branch with the test fix. Been meaning to get back to it. No evidence it works yet, just a thought looking at the deadlock stack traces. ",
            "id": "comment-15761861"
        },
        {
            "date": "2016-12-19T23:13:29+0000",
            "author": "Steve Rowe",
            "content": "Patch that narrows the period during which the schema update lock is held to exclude waiting for other replicas to receive the update.  With this patch, there were no stalls when I beasted TestBulkSchemaConcurrent for 500 iterations (versus 5% of the time unpatched and with Mark Miller's patch on this issue).  Running all Solr tests now. ",
            "id": "comment-15762589"
        },
        {
            "date": "2016-12-19T23:46:49+0000",
            "author": "Steve Rowe",
            "content": "Running all Solr tests now.\n\nAll Solr tests passed for me with my alternate patch, as does precommit.  Mark Miller: does it look good to commit? ",
            "id": "comment-15762671"
        },
        {
            "date": "2016-12-20T16:18:09+0000",
            "author": "Mark Miller",
            "content": "Patch that narrows the period during which the schema update lock is held\n\nThat was my first inclination, but I don't know how all this works that well yet, so I tried to hack something sim with the wait.\n\ndoes it look good to commit?\n\n+1. I'll report if I run into anything further. ",
            "id": "comment-15764557"
        },
        {
            "date": "2016-12-20T17:07:10+0000",
            "author": "ASF subversion and git services",
            "content": "Commit cfbfc13209c57e1c76bd478c3b584135b5d109eb in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cfbfc13 ]\n\nSOLR-9847: Stop blocking further schema updates while waiting for a pending update to propagate to other replicas.  This reduces the likelihood of a (time-limited) distributed deadlock during concurrent schema updates. ",
            "id": "comment-15764692"
        },
        {
            "date": "2016-12-20T17:07:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 04108d993574537d9623d5d1bf2658cafad12ef8 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=04108d9 ]\n\nSOLR-9847: Stop blocking further schema updates while waiting for a pending update to propagate to other replicas.  This reduces the likelihood of a (time-limited) distributed deadlock during concurrent schema updates. ",
            "id": "comment-15764693"
        },
        {
            "date": "2016-12-20T17:08:15+0000",
            "author": "Steve Rowe",
            "content": "Thanks Mark. ",
            "id": "comment-15764696"
        }
    ]
}