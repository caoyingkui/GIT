{
    "id": "SOLR-4641",
    "title": "Schema should throw exception on illegal field parameters",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently FieldType does this correctly, but SchemaField does not.\n\nso for example simple typos like (one from solr's test configs itself) omitOmitTermFrequencyAndPositions=true... on the field elements themselves are silently ignored.",
    "attachments": {
        "SOLR-4641.patch": "https://issues.apache.org/jira/secure/attachment/12575269/SOLR-4641.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13612350",
            "date": "2013-03-25T01:34:56+0000",
            "content": "here's a (quickly done, maybe hacky) patch with a test. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13612415",
            "date": "2013-03-25T06:08:27+0000",
            "content": "+1, patch looks good. "
        },
        {
            "author": "jefferyyuan",
            "id": "comment-13645989",
            "date": "2013-04-30T21:10:37+0000",
            "content": "This is a useful feature, but as in the old code, Solr didn't check the the validity in field and dynamicField in schema.xml.\n\nSo we extend Solr to add some custom parameters, such as \n<field MYPARAM=\"VALUE\" indexed=\"true\" multiValued=\"true\" name=\"f1\" stored=\"true\" type=\"string\"/>\n\nBut after apply this patch, my code doesn't work any more. \n\u2013 I think this should not be rare case as users usually need extend Solr - this is the good part of open source \n\nI can change the code to make it work, but I think maybe we can add a parameter in schema.xml:  validate=true/false in schema.xml level or in field/or dynamicField level, by default the value is true.\n\nIf users specify validate=false in schema.xml, field or dynamicField level, Solr will not validate trelated values.\n\nIn this way, users who extend Solr can easily makes their code works after upgrade.\nThanks.  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13653862",
            "date": "2013-05-10T10:33:13+0000",
            "content": "Closed after release. "
        },
        {
            "author": "Mathias H.",
            "id": "comment-13656889",
            "date": "2013-05-14T08:27:40+0000",
            "content": "Like yuanyun.cn, I also extended my solr schema with a custom attribute. So something like validate=false would be very useful. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13657046",
            "date": "2013-05-14T13:20:38+0000",
            "content": "jefferyyuan and Mathias H., I don't think you'll find much support for reducing schema validation.\n\nOne thing you can do right now as an alternative to custom <field> attributes is child elements, e.g.:\n\n\n<field indexed=\"true\" multiValued=\"true\" name=\"f1\" stored=\"true\" type=\"string\">\n  <MYPARAM>VALUE</MYPARAM>  <!-- Maven property style -->\n  <custom MYPARAM=\"VALUE\"/> <!-- Alternative syntax; element name could be anything you want  -->\n  ...\n</field>\n\n\n\nIs the above sufficient for your use cases? "
        },
        {
            "author": "Mathias H.",
            "id": "comment-13657051",
            "date": "2013-05-14T13:30:38+0000",
            "content": "Thanks Steve Rowe, in my case this is sufficient. "
        },
        {
            "author": "\u00d8yvind Stegard",
            "id": "comment-13665762",
            "date": "2013-05-23T22:20:26+0000",
            "content": "Hi, we use some extra custom attributes on schema fields in a separate XML namespace (in schema.xml). These attributes are read by our Solr client code. Solr now fails to parse schema.xml because of this, with \"Invalid field property: foo:bar\". Shouldn't you only validate attributes that are in the default/known XML namespace, and leave unknown namespaces alone ? "
        },
        {
            "author": "\u00d8yvind Stegard",
            "id": "comment-13665784",
            "date": "2013-05-23T22:34:03+0000",
            "content": "I suppose we could do the child element work-around, that would be sufficient in our case. "
        }
    ]
}