{
    "id": "SOLR-9174",
    "title": "After Solr 5.5, mm parameter doesn't work properly",
    "details": {
        "components": [
            "query parsers",
            "search"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.5,                                            6.0,                                            6.0.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "\u201cmm\" parameter does not work properly, when I set \"q.op=AND\u201d after Solr 5.5.\nIn Solr 5.4, mm parameter works expectedly with the following setting.\n\n[schema]\n\n<fieldType name=\"bi_gram\" class=\"solr.TextField\">\n  <analyzer>\n    <tokenizer class=\"solr.NGramTokenizerFactory\" minGramSize=\"2\" maxGramSize=\"2\"/>\n  </analyzer>\n</fieldType>\n\n\n\n[request]\n\nhttp://localhost:8983/solr/collection1/select?defType=edismax&q.op=AND&mm=2&q=solar\n\nAfter Solr 5.5, the result will not be the same as Solr 5.4.\n\n\n\n[Solr 5.4]\n\n<response>\n...\n  <lst name=\"params\">\n    <str name=\"mm\">2</str>\n    <str name=\"q\">solar</str>\n    <str name=\"defType\">edismax</str>\n    <str name=\"q.op\">AND</str>\n  </lst>\n...\n<result name=\"response\" numFound=\"1\" start=\"0\">\n  <doc>\n    <str name=\"id\">0</str>\n    <arr name=\"content\">\n      <str>solr</str>\n    </arr>\n  </doc>\n</result>\n<lst name=\"debug\">\n  <str name=\"rawquerystring\">solar</str>\n  <str name=\"querystring\">solar</str>\n  <str name=\"parsedquery\">\n  (+DisjunctionMaxQuery((((text:so text:ol text:la text:ar)~2))))/no_coord\n  </str>\n  <str name=\"parsedquery_toString\">+(((text:so text:ol text:la text:ar)~2))</str>\n  ...\n</response>\n\n\n\n\n[Solr 6.0.1]\n\n<response>\n...\n  <lst name=\"params\">\n    <str name=\"mm\">2</str>\n    <str name=\"q\">solar</str>\n    <str name=\"defType\">edismax</str>\n    <str name=\"q.op\">AND</str>\n  </lst>\n...\n<result name=\"response\" numFound=\"0\" start=\"0\"/>\n  <lst name=\"debug\">\n    <str name=\"rawquerystring\">solar</str>\n    <str name=\"querystring\">solar</str>\n    <str name=\"parsedquery\">\n    (+DisjunctionMaxQuery(((+text:so +text:ol +text:la +text:ar))))/no_coord\n    </str>\n    <str name=\"parsedquery_toString\">+((+text:so +text:ol +text:la +text:ar))</str>\n...\n\n\n\nAs shown above, parsedquery also differs from Solr 5.4 and Solr 6.0.1(after Solr 5.5).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-31T07:50:43+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "As a workaround you could try to set q.op=OR ",
            "id": "comment-15307383"
        },
        {
            "date": "2016-05-31T17:37:32+0000",
            "author": "Issei Nishigata",
            "content": "Thank you for your suggestion.\n\nIs q.op=OR completely replaceable with q.op=AND parameter?\nIs the result with q.op=OR perfectly identical with the result with q.op=AND parameter \nas long as mm parameter is used, even under different condition such that there are multiple search words?\nIf so, I will use q.op=OR tentatively. ",
            "id": "comment-15308192"
        },
        {
            "date": "2016-05-31T18:14:58+0000",
            "author": "Ahmet Arslan",
            "content": "Can someone explain why (e)dismax should honor/respect/care the q.op parameter?\n(e)dismax has its own parameter mm for the task. ",
            "id": "comment-15308266"
        },
        {
            "date": "2016-05-31T20:44:30+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "There is a long history here. Back in the days, (e)dismax did only care about mm, which defaulted to 100%. Then people got confused when they had q.op=OR or defaultOperator=OR in the schema, so we added some logic if q.op==OR then mm=0 else mm=100% which kicked in if user did not explicitly set mm.\n\nBut then there was the case of explicit operators in the query, which pre-5.5 used to ignore mm completely, see SOLR-2649. So in 5.5 we tried to solve that one, changing the interaction between q.op and mm a bit, leading to SOLR-8812, and perhaps also the root case for this issue? ",
            "id": "comment-15308589"
        },
        {
            "date": "2016-05-31T20:50:02+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "As long as you set mm, you should not need to set q.op. But there seems to be a bug leading to q.op=AND overriding mm in some cases, so just try your particular use case with q.op=OR and report back your findings. I'm afraid you may end up with other queries not working the way you intended with q.op=OR  ",
            "id": "comment-15308597"
        },
        {
            "date": "2016-06-01T15:26:48+0000",
            "author": "Issei Nishigata",
            "content": "I think I misunderstood the behavior of mm.\nIn this particular case, it seems that I can also get expected result by the q.op=OR.\n\nAs a matter of fact, it does have no meaning that I mixed up q.op and mm together.\n\nI have confirmed that q.op is interpreted mm in the source code.\nI understood that q.op overrides mm.\n\nIs my understanding mentioned above right? ",
            "id": "comment-15310477"
        },
        {
            "date": "2016-06-01T21:35:03+0000",
            "author": "David Smiley",
            "content": "This is definitely broken.  The current situation is that you can only have ONE OF:\n\n\tdefault AND but let users explicitly put \"OR\".  No partial \"mm\" requirement.  To do this >= 5.5, set q.op=AND and mm=0%.  (FWIW I kinda hate setting q.op or df as it effects all filter queries, facet queries, etc. not just 'q')\n\tmm of something other than 0%.   To do this, set mm as desired; q.op won't matter.\n\n\n\nI can't seem to have it both ways no matter what combo of parameters I use.  I could have it both ways prior to 5.5 easily enough by, if I recall, setting mm=whatever and let q.op default to OR.\n\nI understood that q.op overrides mm. Is my understanding mentioned above right?\n\nNo, the other way around.  At least I say this from my historical pre 5.5 perspective; 5.5 forward I dunno any more :-/ ",
            "id": "comment-15311167"
        },
        {
            "date": "2016-06-07T17:50:36+0000",
            "author": "Steve Rowe",
            "content": "I can't seem to have it both ways no matter what combo of parameters I use.\n\nDavid Smiley, can you give an example of \"having it both ways\"? ",
            "id": "comment-15318996"
        },
        {
            "date": "2016-06-07T19:50:28+0000",
            "author": "David Smiley",
            "content": "In Solr 5.4 and before, you could use edismax like so (example assumes the techproducts data):\nhttp://localhost:8983/solr/techproducts/select?q=ipod+OR+(power+AND+nonexistentword)&wt=json&indent=true&debugQuery=true&defType=edismax&mm=2%3C-1&stopwords=true&lowercaseOperators=true\n\nNotice that it is a query that shows that the user knows the search syntax.  And notice the mm allows 1 word to be optional.\n\nIf you run that query in 5.5 and forward, you get nothing. ",
            "id": "comment-15319232"
        },
        {
            "date": "2016-06-10T05:44:39+0000",
            "author": "Steve Rowe",
            "content": "David, when I run your query against 5.4.1, it does indeed match 3 documents, but I see two problems:\n\n1. The parsedquery includes no minShouldMatch at all:\n\n\n\"parsedquery\":\"(+(DisjunctionMaxQuery((text:ipod)) (+DisjunctionMaxQuery((text:power)) +DisjunctionMaxQuery((text:nonexistentword)))))/no_coord\",\n\n\n\n2. The mm spec \"2>-1\" means: if there are two or fewer optional clauses, then all clauses are required; if there are more than 2 optional clauses, then all but one is required.  In your query, there are only two optional clauses, so both are required in the case that minShouldMatch applies.\n\nBy contrast, in 5.5.0, the parsedquery includes a minShouldMatch of 2:\n\n\n    \"parsedquery\":\"(+((DisjunctionMaxQuery((text:ipod)) (+DisjunctionMaxQuery((text:power)) +DisjunctionMaxQuery((text:nonexistentword))))~2))/no_coord\",\n\n\n\nIf I change the mm spec to \"1>-1\" (if more than one optional clause, then all but one is required), then the parsedquery includes a minShouldMatch of 1, and I get 3 hits.\n\nSo I don't think you were \"having it both ways\"; rather, your explicit mm spec was being ignored when you included explicit operators in queries against Solr < 5.5.0. ",
            "id": "comment-15323914"
        },
        {
            "date": "2016-06-10T13:13:20+0000",
            "author": "David Smiley",
            "content": "So I don't think you were \"having it both ways\"; rather, your explicit mm spec was being ignored when you included explicit operators in queries against Solr < 5.5.0.\n\nThat's much better said; yes.  So if a user uses explicit operators, then I think \"mm\" should be ignored.  This was the case < 5.5.0 and it appears you restored that today for 6.1.  A better example may have been a \"ipod AND power AND nonexistentword\" which should return nothing despite the 'mm'. ",
            "id": "comment-15324426"
        },
        {
            "date": "2016-06-10T15:00:05+0000",
            "author": "Steve Rowe",
            "content": "So if a user uses explicit operators, then I think \"mm\" should be ignored. This was the case < 5.5.0 and it appears you restored that today for 6.1.\n\nNo, I didn't - the SOLR-8812 changes were all about choosing a more appropriate mm default where there is no explicit mm spec.\n\nA better example may have been a \"ipod AND power AND nonexistentword\" which should return nothing despite the 'mm'.\n\nTwo issues with the above example:\n\n1. \"AND\" is ignored when deciding whether a query has operators that should affect mm.  AFAICT this behavior is as old as edismax.  I don't understand why it's this way, since all other boolean operators are respected, especially since the \"+\" operator has always been among those that cause default mm to be 0%.  I didn't change this in my SOLR-8812 commit.\n\n2. A query with all required clauses will be unaffected by mm (which applies to optional clauses), regardless of whether the explicit mm spec is ignored. ",
            "id": "comment-15324579"
        }
    ]
}