{
    "id": "LUCENE-7577",
    "title": "PrefixCodedTerms should cache its hash code",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Open",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "We have several queries that cache the hashcode of a PrefixCodedTerms instance on top of it, so we could simplify by moving the caching to PrefixCodedTerms directly.",
    "attachments": {
        "LUCENE-7577.patch": "https://issues.apache.org/jira/secure/attachment/12841013/LUCENE-7577.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15708141",
            "date": "2016-11-30T10:11:32+0000",
            "content": "Here is a patch. The hash code is computed lazily in order not to incur a hit on consumers of this class that would not need the hash code. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15708455",
            "date": "2016-11-30T12:28:46+0000",
            "content": "i think these shit-slow queries should keep their own caching? PrefixCodedTerms is supposed to be an impl detail of indexwriter.\n\nadding complexity to it over time, i dunno, is it really the right thing? The benefit is what, slightly speeding up crappy queries like TermsQuery at the risk of breaking indexwriter?\n\nJust not sure that's really the right way to go. This is the danger of oversharing. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15708718",
            "date": "2016-11-30T14:21:13+0000",
            "content": "Centralizing the hashcode caching in one single place sounded like a good way to avoid caching bugs in the various places that do that. But I also see how IndexWriter should remain the main use-case for PrefixCodedTerms so I don't mind leaving things as-is if you don't like this change. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15708807",
            "date": "2016-11-30T15:00:04+0000",
            "content": "Well, I'm not that strongly opinionated on it to block the change, I just think its important to look at the tradeoffs. This class is a part of indexwriter, and indexwriter is complicated. \n\nI don't think its good to let some esoteric queries make the index package even more complicated than it needs to be.\n\nI already don't like that termsquery & co use it from the beginning, i mean that change is really unfortunate since it means prefixcodedterms and ramfile both have to have hashcode/equals at all: just to support these queries!\n\nadding stuff like caching the hashcode, i mean its not that i'm against that one little change, esp since its immutable, but its just continuing in the same direction. \n\nIts also the case that lucene queries have historically had a ton of hashcode and equals bugs, and adding optimizations for that, man, I honestly think that isn't a good idea and shouldnt be done at all, anywhere. Lucene isn't tall enough to ride, it shouldn't have optimizations like this unless something is changed to show it can have correctness first. but adding those optos to a piece that indexwriter uses for low level stuff? IMO that's even more dangerous, especially around equals/hashcode which could easily \"slip in\" to IW without much notice due to how it works in java. ",
            "author": "Robert Muir"
        }
    ]
}