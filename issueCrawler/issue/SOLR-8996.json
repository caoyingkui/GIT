{
    "id": "SOLR-8996",
    "title": "Add Random Streaming Expression",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.1"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The random Streaming Expression will return a limited random stream of Tuples that match a query. This will be useful in many different scenarios where random data sets are needed.\n\nProposed syntax:\n\nrandom(baskets, q=\"productID:productX\", rows=\"100\", fl=\"basketID\") \n\n\n\nThe sample code above will query the baskets collection and return 100 random basketID's where the productID is productX.\n\nThe underlying implementation will rely on Solr's random field type.",
    "attachments": {
        "RandomStream.java": "https://issues.apache.org/jira/secure/attachment/12799002/RandomStream.java",
        "SOLR-8996-decrease-failure-probability.patch": "https://issues.apache.org/jira/secure/attachment/12802564/SOLR-8996-decrease-failure-probability.patch",
        "SOLR-8996.patch": "https://issues.apache.org/jira/secure/attachment/12799336/SOLR-8996.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-15T19:26:10+0000",
            "author": "Joel Bernstein",
            "content": "Attached the initial impl as a Java class. I'll post a patch after I do some cleanup on my local master branch.  ",
            "id": "comment-15243460"
        },
        {
            "date": "2016-04-18T19:46:28+0000",
            "author": "Joel Bernstein",
            "content": "Patch with impl and basic tests ",
            "id": "comment-15246397"
        },
        {
            "date": "2016-04-18T20:59:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7b5f12e622f10206f3ab3bf9f79b9727c73c6def in lucene-solr's branch refs/heads/master from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7b5f12e ]\n\nSOLR-8996: Add Random Streaming Expression ",
            "id": "comment-15246523"
        },
        {
            "date": "2016-04-19T15:49:29+0000",
            "author": "Dennis Gove",
            "content": "Joel Bernstein, do you intend to apply this to branch_6x? I'd like to apply SOLR-9009 but it includes changes in RandomStream.java. I can of course pull my changes to that file out before applying but if you do intend to put this on branch_6x then I'll just wait. ",
            "id": "comment-15248023"
        },
        {
            "date": "2016-04-19T16:05:56+0000",
            "author": "Joel Bernstein",
            "content": "I do plan on putting this in 6x along with SOLR-8925. I was planning on backporting this week, but I can move this along faster if I'm blocking progress. \n\nCan you make your changes in master and then we can backport everything to 6x as the next step?  ",
            "id": "comment-15248049"
        },
        {
            "date": "2016-04-19T16:07:42+0000",
            "author": "Dennis Gove",
            "content": "No need to rush. The changes have already appeared on master so this can wait until you're ready. ",
            "id": "comment-15248053"
        },
        {
            "date": "2016-04-29T15:06:06+0000",
            "author": "Joel Bernstein",
            "content": "Dennis Gove, I'm going to do one last round of manual testing at scale, then I'm ready to backport. \n\nWe'll need to apply the cherrypick's in order. Probably easier for one of us to them all. If you can provide a list of commits you want backported I'll create an ordered list of commits. Then either one of us can do them. ",
            "id": "comment-15264167"
        },
        {
            "date": "2016-04-30T00:25:59+0000",
            "author": "Dennis Gove",
            "content": "Sure thing. Below is the history of my commits from master waiting on this one to backport to 6x\n\n\ncommit e6e495c79588c60db1ac45bcba1a1dcaa970bcea\nAuthor: Dennis Gove <dpgove@gmail.com>\nDate:   Tue Apr 19 13:49:26 2016 -0400\n\n    SOLR-8918: Corrects usage of a global variable in admin page's stream.js which was overriding the same variable in cloud.js\n\ncommit af7dad6825d47e76c39842e97be8b37ab4c2cffd\nAuthor: Dennis Gove <dpgove@gmail.com>\nDate:   Tue Apr 19 11:40:20 2016 -0400\n\n    SOLR-8918: Adds Streaming to the admin page under the collections section\n\n    Includes ability to see graphically the expression explanation\n\ncommit 2e95a54a52878c1d6305a282a324705a79d56e65\nAuthor: Dennis Gove <dpgove@gmail.com>\nDate:   Mon Apr 18 21:34:36 2016 -0400\n\n    SOLR-9009: Adds ability to get an Explanation of a Streaming Expression\n\n ",
            "id": "comment-15265007"
        },
        {
            "date": "2016-05-02T13:29:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 60a9e386687d04fc4163731897b5ba9d6f5dd8c0 in lucene-solr's branch refs/heads/branch_6x from jbernste\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=60a9e38 ]\n\nSOLR-8996: Add Random Streaming Expression ",
            "id": "comment-15266604"
        },
        {
            "date": "2016-05-02T13:35:25+0000",
            "author": "Joel Bernstein",
            "content": "Ok, I applied the commits locally to branch_6x and things looked good. Tests pass, precommit passes, UI looks good with quick inspection. \n\nSo I pushed the changes out.\n\nDennis Gove, take a look when you get a chance and see if things are looking OK to you. ",
            "id": "comment-15266617"
        },
        {
            "date": "2016-05-02T13:36:29+0000",
            "author": "Joel Bernstein",
            "content": "These are the commits that were pushed:\n\nremote: lucene-solr:branch_6x: SOLR-9027: Pull the TermsEnum once for each segment\nremote: lucene-solr:branch_6x: SOLR-9027: Collect the TermContexts in createWeight\nremote: lucene-solr:branch_6x: SOLR-9027: GraphTermsQuery optimizations and more explicit handling of non-caching behavior\nremote: lucene-solr:branch_6x: SOLR-8925: Integrate the GraphTermsQuery into the gatherNodes expression\nremote: lucene-solr:branch_6x: SOLR-9027: Add GraphTermsQuery to limit traversal on high frequency nodes\nremote: lucene-solr:branch_6x: SOLR-8918: Corrects usage of a global variable in admin page's stream.js which was overriding the same variable in cloud.js\nremote: lucene-solr:branch_6x: SOLR-8918: Adds Streaming to the admin page under the collections section\nremote: lucene-solr:branch_6x: SOLR-9009: Adds ability to get an Explanation of a Streaming Expression\nremote: lucene-solr:branch_6x: SOLR-8996: Add Random Streaming Expression\nremote: lucene-solr:branch_6x: SOLR-8925: Add gatherNodes Streaming Expression to support breadth first traversals\nTo https://git-wip-us.apache.org/repos/asf/lucene-solr.git\n   f603e15..32f7d04  branch_6x -> branch_6x\n\n\n ",
            "id": "comment-15266619"
        },
        {
            "date": "2016-05-02T14:55:50+0000",
            "author": "Dennis Gove",
            "content": "Looks good to me. Thank you for putting these in. ",
            "id": "comment-15266725"
        },
        {
            "date": "2016-05-02T18:04:53+0000",
            "author": "Joel Bernstein",
            "content": "No, problem! This is going to be a fun release! ",
            "id": "comment-15267119"
        },
        {
            "date": "2016-05-05T23:19:54+0000",
            "author": "Dennis Gove",
            "content": "Joel Bernstein, I saw a failure of the test for this stream. Because there are only 5 records in the collection during the test I believe there is a probability of 1 in 5! that the test will fail (1 in 120) because the two streams return the records in the same order. Below is a small patch that increases the # of records to 1000 thus decreasing the probability of a failure to 1 in 1000! (1 in basically never). Do you think it's worth re-opening this and applying the patch?\n\n\ndiff --git a/solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java b/solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java\nindex d273477..267eeca 100644\n--- a/solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java\n+++ b/solr/solrj/src/test/org/apache/solr/client/solrj/io/stream/StreamExpressionTest.java\n@@ -483,13 +483,12 @@ public class StreamExpressionTest extends SolrCloudTestCase {\n   @Test\n   public void testRandomStream() throws Exception {\n\n-    new UpdateRequest()\n-        .add(id, \"0\", \"a_s\", \"hello0\", \"a_i\", \"0\", \"a_f\", \"0\")\n-        .add(id, \"2\", \"a_s\", \"hello2\", \"a_i\", \"2\", \"a_f\", \"0\")\n-        .add(id, \"3\", \"a_s\", \"hello3\", \"a_i\", \"3\", \"a_f\", \"3\")\n-        .add(id, \"4\", \"a_s\", \"hello4\", \"a_i\", \"4\", \"a_f\", \"4\")\n-        .add(id, \"1\", \"a_s\", \"hello1\", \"a_i\", \"1\", \"a_f\", \"1\")\n-        .commit(cluster.getSolrClient(), COLLECTION);\n+    UpdateRequest update = new UpdateRequest();\n+    for(int idx = 0; idx < 1000; ++idx){\n+      String idxString = new Integer(idx).toString();\n+      update.add(id,idxString, \"a_s\", \"hello\" + idxString, \"a_i\", idxString, \"a_f\", idxString);\n+    }\n+    update.commit(cluster.getSolrClient(), COLLECTION);\n\n     StreamExpression expression;\n     TupleStream stream;\n@@ -504,17 +503,17 @@ public class StreamExpressionTest extends SolrCloudTestCase {\n     try {\n       context.setSolrClientCache(cache);\n\n-      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n+      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n       stream = factory.constructStream(expression);\n       stream.setStreamContext(context);\n       List<Tuple> tuples1 = getTuples(stream);\n-      assert (tuples1.size() == 5);\n+      assert (tuples1.size() == 1000);\n\n-      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"10\\\", fl=\\\"id, a_i\\\")\");\n+      expression = StreamExpressionParser.parse(\"random(\" + COLLECTION + \", q=\\\"*:*\\\", rows=\\\"1000\\\", fl=\\\"id, a_i\\\")\");\n       stream = factory.constructStream(expression);\n       stream.setStreamContext(context);\n       List<Tuple> tuples2 = getTuples(stream);\n-      assert (tuples2.size() == 5);\n+      assert (tuples2.size() == 1000);\n\n       boolean different = false;\n       for (int i = 0; i < tuples1.size(); i++) {\n\n ",
            "id": "comment-15273301"
        },
        {
            "date": "2016-05-05T23:28:12+0000",
            "author": "Joel Bernstein",
            "content": "Sure, sounds good. ",
            "id": "comment-15273315"
        },
        {
            "date": "2016-05-05T23:34:27+0000",
            "author": "Dennis Gove",
            "content": "Re-opening to apply updated test. ",
            "id": "comment-15273317"
        },
        {
            "date": "2016-05-05T23:36:12+0000",
            "author": "Dennis Gove",
            "content": "Increases the # of records in the test collection to reduce the probability of a failure from 1 in 5! (1 in 120) to 1 in 1000! (1 in basically never).\n\nThis still doesn't guarantee a passing test but greatly increases the probability of a passing test. ",
            "id": "comment-15273318"
        },
        {
            "date": "2016-05-05T23:51:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ff565317621287c174ad42f2af9fdcc7b221eff3 in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff56531 ]\n\nSOLR-8996: Greatly decreases the probability of a RandomStream test failure from 1 in 5! to 1 in 1000! ",
            "id": "comment-15273331"
        },
        {
            "date": "2016-05-05T23:58:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 06a675ce2c57e6fc1adf18d88528d578e79a3463 in lucene-solr's branch refs/heads/branch_6x from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=06a675c ]\n\nSOLR-8996: Greatly decreases the probability of a RandomStream test failure from 1 in 5! to 1 in 1000! ",
            "id": "comment-15273343"
        },
        {
            "date": "2016-05-06T00:02:53+0000",
            "author": "Dennis Gove",
            "content": "New test applied in master and 6.1 ",
            "id": "comment-15273345"
        },
        {
            "date": "2016-05-06T02:46:51+0000",
            "author": "Erick Erickson",
            "content": "I've gotta ask (without even looking at the code) why decreasing the probability of failure is good enough?\n\nFeel free to say \"that's the best we can do\" and blow the question off, just askin'.....\n\nAnd if it does fail, can we include as part of the message that \"very occasional failures are acceptable\"? ",
            "id": "comment-15273555"
        },
        {
            "date": "2016-05-06T03:02:32+0000",
            "author": "Dennis Gove",
            "content": "Valid question and I did give that some thought. \n\nBecause this is testing randomness, I can't think of a way to make it pass 100% of the time. There is still a probability (much much much smaller now) that two RandomStreams will return the documents in the same order. By increasing the # of documents that probability has become an effective 'never gonna happen' (until it does, of course).\n\nAssuming the random field type is truly random this works out to 1000! possible distinct list of tuples (because tuple order matters in the test) and the probability of the two streams in the test resulting in the same order is infinitesimally small. That said, technically it's not impossible so an updated message might be worthwhile. ",
            "id": "comment-15273569"
        },
        {
            "date": "2016-05-06T03:44:24+0000",
            "author": "Erick Erickson",
            "content": "Works for me. Let me see, 1000! is \n4.0238726 E+2567 =\n\nso...er...relatively rare \n\nEven 100 is really, really rare...\n9.332621544 E+157\n\nI love the net. There's a factorial calculator that it took me about 30 seconds to find...... ",
            "id": "comment-15273600"
        },
        {
            "date": "2016-05-06T14:42:38+0000",
            "author": "Shawn Heisey",
            "content": "I've never looked at streaming at all, so perhaps I should be ignored ...\n\nIs there any way to detect this situation and note in the error message that it may not be a real failure? ",
            "id": "comment-15274139"
        }
    ]
}