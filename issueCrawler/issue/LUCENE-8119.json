{
    "id": "LUCENE-8119",
    "title": "Remove SimScorer.maxScore(maxFreq)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Task",
        "components": [],
        "fix_versions": [
            "master (8.0)"
        ]
    },
    "description": "Now that SimScorer directly takes a frequency and a norm, this can be replaced with SimScorer.freq(maxFreq, 1).",
    "attachments": {
        "LUCENE-8119.patch": "https://issues.apache.org/jira/secure/attachment/12904797/LUCENE-8119.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16313123",
            "date": "2018-01-05T13:47:56+0000",
            "content": "Here is a patch. It documents some additional constraints on similarities, like the fact that norm 0 is reserved to empty fields and that scores must not increase when the unsigned norm increases. The latter is something I need for LUCENE-4198 as well. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16313193",
            "date": "2018-01-05T14:25:51+0000",
            "content": "I don't understand the 0 stuff. This shouldn't happen right? At query-time we fixed sims so that they aren't ever asked to score non-existent fields/terms, to clear up all the divide-by-zero issues and make the api simpler. But this is an index-time API, the question is do we really invoke this when there are no terms? \n\nand why write a 0 value at all, if norms are supposed to be sparse we shouldnt call this method nor write anything, correct? we certainly won't be scoring any terms for the field on such documents, no value is needed.  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16313272",
            "date": "2018-01-05T15:08:52+0000",
            "content": "I overspecified it, but my intention was to make sure that non-empty fields never get 0 as a norm value, so that 1 is the norm value that produces the best scores for a given freq. I agree with you there is no reason to enforce that it is 0 on empty fields. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16313280",
            "date": "2018-01-05T15:13:37+0000",
            "content": "Right, I think its better to look at 0 as just an impossible/unused value: that's the perspective at query-time for the similarity class so it would be good to match that at index-time. All the divide by zero possibilities caused a real mess before. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16313287",
            "date": "2018-01-05T15:18:53+0000",
            "content": "I think we can see it does what we want via the assert: \n\n\nassert state.getLength() > 0;\n\n\n\nhttps://github.com/apache/lucene-solr/blob/master/lucene/test-framework/src/java/org/apache/lucene/search/similarities/AssertingSimilarity.java#L37\n\nSo it would be good to simplify the language, keeping in mind this method will never be called for empty fields. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16318082",
            "date": "2018-01-09T09:04:57+0000",
            "content": "Updated patch, I removed the requirement that norm is 0 if the field is empty. I wasn't aware but this is already taken care of by DefaultIndexingChain which doesn't call the similarity anyway on empty fields and hard codes 0. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16318384",
            "date": "2018-01-09T13:07:10+0000",
            "content": "+1 ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16318428",
            "date": "2018-01-09T13:42:29+0000",
            "content": "Commit 838c604b76534a8774c846dcf6b1e94532f0d62c in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=838c604 ]\n\nLUCENE-8119: Remove SimScorer.maxScore(float maxFreq). ",
            "author": "ASF subversion and git services"
        }
    ]
}