{
    "id": "LUCENE-381",
    "title": "Contributing a High-performance single-document main memory Apache Lucene fulltext search index.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Here is my contribution: a High-performance single-document main memory Apache Lucene fulltext \nsearch index. I'll try to attach the files, hoping for comments on how to proceed with this...",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--PatternAnalyzer.java": "https://issues.apache.org/jira/secure/attachment/12312587/ASF.LICENSE.NOT.GRANTED--PatternAnalyzer.java",
        "ASF.LICENSE.NOT.GRANTED--testqueries.txt": "https://issues.apache.org/jira/secure/attachment/12312581/ASF.LICENSE.NOT.GRANTED--testqueries.txt",
        "ASF.LICENSE.NOT.GRANTED--PatternAnalyzerTest.java": "https://issues.apache.org/jira/secure/attachment/12312588/ASF.LICENSE.NOT.GRANTED--PatternAnalyzerTest.java",
        "ASF.LICENSE.NOT.GRANTED--MemoryIndex.java": "https://issues.apache.org/jira/secure/attachment/12312579/ASF.LICENSE.NOT.GRANTED--MemoryIndex.java",
        "ASF.LICENSE.NOT.GRANTED--MemoryIndexTest.java": "https://issues.apache.org/jira/secure/attachment/12312580/ASF.LICENSE.NOT.GRANTED--MemoryIndexTest.java",
        "ASF.LICENSE.NOT.GRANTED--package.html": "https://issues.apache.org/jira/secure/attachment/12312582/ASF.LICENSE.NOT.GRANTED--package.html"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-04-23T05:50:30+0000",
            "content": "Created an attachment (id=14799)\nMemoryIndex.java\n\nMemoryIndex.java ",
            "author": "hoschek",
            "id": "comment-12322317"
        },
        {
            "date": "2005-04-23T05:51:06+0000",
            "content": "Created an attachment (id=14800)\nMemoryIndexTest.java\n\nMemoryIndexTest.java ",
            "author": "hoschek",
            "id": "comment-12322318"
        },
        {
            "date": "2005-04-23T05:51:30+0000",
            "content": "Created an attachment (id=14801)\ntestqueries.txt\n\ntestqueries.txt ",
            "author": "hoschek",
            "id": "comment-12322319"
        },
        {
            "date": "2005-04-23T05:51:55+0000",
            "content": "Created an attachment (id=14802)\npackage.html\n\npackage.html ",
            "author": "hoschek",
            "id": "comment-12322320"
        },
        {
            "date": "2005-04-24T17:04:17+0000",
            "content": "Created an attachment (id=14816)\nMemoryIndex.java\n\n\n\tslighly faster indexing\n\treduced sort code duplication\n\n ",
            "author": "hoschek",
            "id": "comment-12322321"
        },
        {
            "date": "2005-04-27T07:04:31+0000",
            "content": "(From update of attachment 14800)\nmade obsolete my new submitted version ",
            "author": "hoschek",
            "id": "comment-12322322"
        },
        {
            "date": "2005-04-27T07:04:51+0000",
            "content": "(From update of attachment 14816)\nmade obsolete my new submitted version ",
            "author": "hoschek",
            "id": "comment-12322323"
        },
        {
            "date": "2005-04-27T07:06:45+0000",
            "content": "Created an attachment (id=14848)\nnew update\n\n\n\tadded addField(String, TokenStream)\n\tadded addField(String, String, Analyzer)\n\trefined getMemorySize()\n\tcosmetics\n\n ",
            "author": "hoschek",
            "id": "comment-12322324"
        },
        {
            "date": "2005-04-27T07:08:02+0000",
            "content": "Created an attachment (id=14849)\nMemoryIndex.java\n\n\n\tadded addField(String, TokenStream)\n\tadded addField(String, String, Analyzer)\n\trefined getMemorySize()\n\tcosmetics\n\n ",
            "author": "hoschek",
            "id": "comment-12322325"
        },
        {
            "date": "2005-04-27T07:08:41+0000",
            "content": "Created an attachment (id=14850)\nMemoryIndexTest.java\n\na little more flexible tests ",
            "author": "hoschek",
            "id": "comment-12322326"
        },
        {
            "date": "2005-04-27T07:09:49+0000",
            "content": "Created an attachment (id=14851)\nPatternAnalyzer.java\n\n\n\tEfficient Lucene analyzer/tokenizer that preferably operates on a String\nrather than a\n\t{@link java.io.Reader}\n, that can flexibly separate on a regular expression\n{@link Pattern}\n\t(with behaviour idential to \n{@link String#split(String)}),\n * and that combines the functionality of\n * {@link org.apache.lucene.analysis.LetterTokenizer},\n * {@link org.apache.lucene.analysis.LowerCaseTokenizer},\n * {@link org.apache.lucene.analysis.WhitespaceTokenizer},\n * {@link org.apache.lucene.analysis.StopFilter} into a single efficient\n * multi-purpose class.\n * <p>\n * If you are unsure how exactly a regular expression should look like,\nconsider \n * prototyping by simply trying various expressions on some test texts via\n * {@link String#split(String)}\n. Once you are satisfied, give that regex to\n\tPatternAnalyzer. Also see <a target=\"_blank\"\n\thref=\"http://java.sun.com/docs/books/tutorial/extra/regex/\">Java Regular\nExpression Tutorial</a>.\n\t<p>\n\tThis class can be considerably faster than the \"normal\" Lucene tokenizers.\n\tIt can also serve as a building block in a compound Lucene\n\t{@link org.apache.lucene.analysis.TokenFilter}\n chain. For example as in this\n\n\n\n\n\tstemming example:\n\t<pre>\n\tPatternAnalyzer pat = ...\n\tTokenStream tokenStream = new SnowballFilter(\n\tpat.tokenStream(\"content\", \"James is running round in the woods\"),\n\t\"English\"));\n\t</pre>\n\n ",
            "author": "hoschek",
            "id": "comment-12322327"
        },
        {
            "date": "2005-04-27T07:10:37+0000",
            "content": "Created an attachment (id=14852)\nPatternAnalyzerTest.java\n\nVerifies that Lucene PatternAnalyzer and normal Lucene Analyzers have the same\nbehaviour,\nreturning the same results for any given free text.\nRuns a set of texts against a tokenizers/analyzers\nCan also be used as a simple benchmark.\n<p>\nExample usage:\n<pre>\ncd lucene-cvs\njava org.apache.lucene.index.memory.PatternAnalyzerTest 1 1 patluc 1 2 2 *.txt\n.xml docs/.html src/java/org/apache/lucene/index/.java xdocs/.xml\n../nux/samples/data/*.xml\n</pre>\n\nwith WhitespaceAnalyzer problems can be found; These are not bugs but\nquestionable \nLucene features: CharTokenizer.MAX_WORD_LEN = 255.\nThus the PatternAnalyzer produces correct output, whereas the\nWhitespaceAnalyzer \nsilently truncates text, and so the comparison results in assertEquals() don't\nmatch up.  ",
            "author": "hoschek",
            "id": "comment-12322328"
        },
        {
            "date": "2005-04-27T18:15:51+0000",
            "content": "Two requests - could you provide a MemoryIndex implementation that works with\nthe latest codebase?  The inner MemoryIndexReader does not implement some new\nabstract methods, as you have noted.\n\nAlso, having your two tests converted to JUnit tests would be very helpful, as\nonly the JUnit tests get run automatically from Ant.\n\nOnce these two things are done, all looks great to commit.  Initially I will put\nthis in a new contrib/misc area (moving the old sandbox/contributions/misc there). ",
            "author": "Erik Hatcher",
            "id": "comment-12322329"
        },
        {
            "date": "2005-05-02T11:09:43+0000",
            "content": "Created an attachment (id=14890)\nMemoryIndex.java\n\n\n\tnow runs against current lucene-svn\n\tadded support for position offsets\n\tadded toString() for easier prototyping/debugging\n\trenamed query() to search()\n\tbetter internal documentation\n\n ",
            "author": "hoschek",
            "id": "comment-12322330"
        },
        {
            "date": "2005-05-02T11:10:57+0000",
            "content": "Created an attachment (id=14891)\nMemoryIndexTest.java\n\nNow also runs as junit test case (be prepared for a run to take several\nminutes) ",
            "author": "hoschek",
            "id": "comment-12322331"
        },
        {
            "date": "2005-05-02T11:11:57+0000",
            "content": "Created an attachment (id=14892)\nPatternAnalyzer.java\n\nMinor internal optimizations ",
            "author": "hoschek",
            "id": "comment-12322332"
        },
        {
            "date": "2005-05-02T11:13:18+0000",
            "content": "Created an attachment (id=14893)\nPatternAnalyzerTest.java\n\nNow also runs as junit test case (Erik might need to adjust default test file\nnames on moving this to a different package/directory location; same for\nMemoryIndexTest) ",
            "author": "hoschek",
            "id": "comment-12322333"
        },
        {
            "date": "2005-05-02T18:11:39+0000",
            "content": "Committed with some minory tweaks. ",
            "author": "Erik Hatcher",
            "id": "comment-12322334"
        },
        {
            "date": "2005-05-12T12:21:00+0000",
            "content": "Created an attachment (id=15001)\nMemoryIndex.java\n\n\n\tjavadoc improvements, cometics, indentation\n\tno functional changes\n\n ",
            "author": "hoschek",
            "id": "comment-12322335"
        },
        {
            "date": "2005-05-21T06:40:43+0000",
            "content": "Created an attachment (id=15097)\nMemoryIndex.java\n\n\n\tjavadoc cosmetics\n\tadded performance improvement: using far less Term interning\n\trequires the following addition to Term:\n\n\n\n/** Constructs a term with the given text and the same interned field name as\n\n\tthis term (minimizes interning overhead). */\n  public Term createTerm(String txt) \n{ // WH\n      return new Term(field, txt, false);\n  }\n\n ",
            "author": "hoschek",
            "id": "comment-12322336"
        },
        {
            "date": "2005-05-21T06:41:25+0000",
            "content": "Created an attachment (id=15099)\nPatternAnalyzer.java\n\njavadoc cosmetics ",
            "author": "hoschek",
            "id": "comment-12322337"
        },
        {
            "date": "2005-05-23T11:33:24+0000",
            "content": "Created an attachment (id=15124)\nMemoryIndex.java\n\n\n\tsmall bug fix for rare cases\n\tminor performance improvements\n\n ",
            "author": "hoschek",
            "id": "comment-12322338"
        },
        {
            "date": "2005-05-23T11:34:06+0000",
            "content": "Created an attachment (id=15125)\nPatternAnalyzer.java\n\nadded EXTENDED_ENGLISH_STOP_SET ",
            "author": "hoschek",
            "id": "comment-12322339"
        },
        {
            "date": "2005-05-25T14:17:34+0000",
            "content": "Created an attachment (id=15157)\nMemoryIndex.java\n\n\n\tminor performance optimizations\n\tjavadoc cosmetics\n\n ",
            "author": "hoschek",
            "id": "comment-12322340"
        },
        {
            "date": "2005-05-25T14:18:33+0000",
            "content": "Created an attachment (id=15158)\nPatternAnalyzer.java\n\n\n\tminor performance optimizations\n\tjavadoc cosmetics\n\n ",
            "author": "hoschek",
            "id": "comment-12322341"
        },
        {
            "date": "2005-07-01T06:45:23+0000",
            "content": "These latest versions of MemoryIndex and PatternAnalyzer are now committed in \ncontrib area, and the new createTerm() method it relies on in Term.java has \nbeen added to the core.\n\nMy personal unit tests show it works but the \"official\" Junit test in contrib \narea doesn't seem to run as there seems to be a hard-coded path to test query \nfiles in the wrong place.  ",
            "author": "Mark Harwood",
            "id": "comment-12322342"
        },
        {
            "date": "2005-07-01T07:35:28+0000",
            "content": "Thanks Mark,\n\nCan you please take the source from the Nux download. http://dsd.lbl.gov/nux\nAs mentioned before, that source contains a small bug fix, some minor performance improvements, plus \ndocumention improvements. I also believe the test file paths are right in that version. ",
            "author": "hoschek",
            "id": "comment-12322343"
        },
        {
            "date": "2005-07-01T07:40:47+0000",
            "content": "Never mind, Mark. The versions appear to be identical. ",
            "author": "hoschek",
            "id": "comment-12322344"
        },
        {
            "date": "2005-07-01T08:19:49+0000",
            "content": "Actually, the versions seem to be slightly different. For example search for \"sortedTemplates\" in \nMemoryIndex.java. I've moved this into the internal \"Info\" class. Please use the Nux versions. They are the \nmost up-to-date. Thanks. \n\n[The confusion stems in part from me struggling with subversion on eclipse-3.1 on OSX. subclipse seems \nto be riddled with bugs.] ",
            "author": "hoschek",
            "id": "comment-12322345"
        },
        {
            "date": "2005-10-28T02:15:58+0000",
            "content": "MemoryIndex and friends live in contrib/ now. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12356107"
        },
        {
            "date": "2005-10-28T02:16:27+0000",
            "content": "Contribution accepted, closing the issue. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12356108"
        }
    ]
}