{
    "id": "SOLR-12457",
    "title": "field(x,min|max) sorting doesn't work on trie or str fields in multi-shard collections",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When I go to sort on a multi-valued field in a 2 shard collection, which has trie fields the query fails.\n\nTo reproduce we need 2+ shards, a multi-valued trie field and \"desc\" sort criteria.\n\nHere's my schema\n\n<dynamicField name=\"*_is\" type=\"int\" indexed=\"true\" stored=\"true\" multiValued=\"true\" docValues=\"true\"/>\n<fieldType class=\"solr.TrieIntField\" docValues=\"true\" name=\"int\" positionIncrementGap=\"0\" precisionStep=\"0\"/>\n\n<dynamicField name=\"*_i\" type=\"pint\" indexed=\"true\" stored=\"true\" multiValued=\"true\"/>\n<fieldType name=\"pint\" class=\"solr.IntPointField\" docValues=\"true\"/>\n\n\n\nNow If I add a few docs\n\n[\n{\"id\" : \"1\", \"test_is\" : [\"1\", \"2\", \"3\", \"4\", \"5\"], \"test_i\" : [\"1\", \"2\", \"3\", \"4\", \"5\"]},\n{\"id\" : \"2\", \"test_is\" : [\"1\", \"2\", \"3\", \"4\", \"5\"], \"test_i\" : [\"1\", \"2\", \"3\", \"4\", \"5\"]},\n{\"id\" : \"3\", \"test_is\" : [\"1\", \"2\", \"3\", \"4\", \"5\"], \"test_i\" : [\"1\", \"2\", \"3\", \"4\", \"5\"]}\n]\n\nWorks:\n\nhttp://localhost:8983/solr/gettingstarted/select?q=*:*&sort=field(test_i,max)%20desc\n\n\u00a0\n\nDoesn't Work:\n\nhttp://localhost:8983/solr/gettingstarted/select?q=*:*&sort=field(test_is,max)%20desc\n\n\u00a0\n\nTo be more clear when I say it doesn't work , the query throws and error and here's the stack trace for it:\n\nERROR - 2018-06-06 22:55:06.599; [c:gettingstarted s:shard2 r:core_node8 x:gettingstarted_shard2_replica_n5] org.apache.solr.common.SolrException; null:java.lang.ClassCastException: java.lang.String cannot be cast to org.apache.lucene.util.BytesRef\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.lucene.search.FieldComparator$TermOrdValComparator.compareValues(FieldComparator.java:561)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.component.ShardFieldSortedHitQueue$1.compare(ShardFieldSortedHitQueue.java:161)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.component.ShardFieldSortedHitQueue$1.compare(ShardFieldSortedHitQueue.java:153)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.component.ShardFieldSortedHitQueue.lessThan(ShardFieldSortedHitQueue.java:91)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.component.ShardFieldSortedHitQueue.lessThan(ShardFieldSortedHitQueue.java:33)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.lucene.util.PriorityQueue.upHeap(PriorityQueue.java:263)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.lucene.util.PriorityQueue.add(PriorityQueue.java:140)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.lucene.util.PriorityQueue.insertWithOverflow(PriorityQueue.java:156)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.component.QueryComponent.mergeIds(QueryComponent.java:924)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.component.QueryComponent.handleRegularResponses(QueryComponent.java:585)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.component.QueryComponent.handleResponses(QueryComponent.java:564)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:423)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:177)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.core.SolrCore.execute(SolrCore.java:2484)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.servlet.HttpSolrCall.execute(HttpSolrCall.java:720)\n\n\u00a0 \u00a0 \u00a0 \u00a0 at org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:526)",
    "attachments": {
        "SOLR-12457.patch": "https://issues.apache.org/jira/secure/attachment/12927547/SOLR-12457.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-06-11T17:41:35+0000",
            "content": "Hmmm... i guess it never occured to me to add a cloud based test to SOLR-2522? ... crap, sorry about that.\n\n(FWIW: I think TestMinMaxOnMultiValuedField could be converted to a MiniCloud based test fairly easily)\n\n\n\nI'm not possitive, but I think the fix here is that the Trie based fields need to override FieldType.marshalSortValue (& maybe unmarshalSortValue) to check if the field is multivalued & if so explicitly deal with the BytesRef values that come out of the SortedSetDocValuesField ... i think the marshal method can probably just go ahead and convert to the \"real\" numeric value, and the unmarshal method can just inherit the default behavior? ... not certain.\n\nI suspect this bug may also affect StrField (SOLR-11854) and SortableTextField (SOLR-11916) but the fix should likewise be straight forward (i hope) ",
            "author": "Hoss Man",
            "id": "comment-16508423"
        },
        {
            "date": "2018-06-12T21:56:09+0000",
            "content": "I was hoping to crank out a quick fix for this in time for 7.4, but the problem is more nuanced then i realized...\n\nthe FieldType marshalSortValue & unmarshalSortValue functions don't come into play in these cases because we're not sorting on a field we're sorting on a ValueSource\n\nAs I speculated in my earlier comment, this means that the same problem occurs with string fields if you try something like sort=field(multivalued_string,min) asc ... but it does NOT affect you if you use the implicit min|max syntax added in SOLR-11854 (ie: sort=multivalued_string asc ) because in that case there is no ValueSource involved and the SortField used is directly tied to the (multivalued) field name \u2013 so StrField's marshalSortValue & unmarshalSortValue methods (which handle the BytesRef/String conversion) take care of things for you.\n\nNOTE: The same implicit min|max syntax  (ie: sort=multivalued_trie_field asc ) does NOT work for trie fields, because they don't override the default  marshalSortValue & unmarshalSortValue (even if we only cared about solving this bug for the implicit syntax, the marshalling methods don't have access to the SchemaField, so there's no easy way for the marshalling methods to know if the \"field\" being sorted on is multivalued or not \u2013 so we'd have to do some kind of kludgy hack where the TrieField marshaling logic did instance of checks to decide if it should convert things)\n\n\n\nAt the moment, i can't think of a simple/clean fix for this. ",
            "author": "Hoss Man",
            "id": "comment-16510279"
        },
        {
            "date": "2018-06-12T22:14:47+0000",
            "content": "... so StrField's marshalSortValue & unmarshalSortValue methods (which handle the BytesRef/String conversion) take care of things for you.\n\nFWIW: i started second guessing myself as to why I was seeing the implicit syntax work for str fields, because in both cases the SortField should be identical SortedSetSortField instances with the field name set on them \u2013 but then i realized QueryComponent.unmarshalSortValues uses SortSpec.getSchemaFields() to decide which SortFields should be unmarshalled \u2013 and that knows the difference between a SortField whose String getField() might happen to match a schema field name, vs an actual usage of sorting on a SchemaField (which is important for field aliasing, etc...) ",
            "author": "Hoss Man",
            "id": "comment-16510308"
        },
        {
            "date": "2018-06-12T22:17:29+0000",
            "content": "attached a patch that converts SortByFunctionTest to a MiniSolrCloud based test (NOTE: TestSortByMinMaxFunction extendsSortByFunctionTest ) as a starting point for testing & fixing this ",
            "author": "Hoss Man",
            "id": "comment-16510314"
        },
        {
            "date": "2018-06-12T23:39:36+0000",
            "content": "Ok ... here's some spit balling...\n\nultimatley the root of the \"ClassCastException: java.lang.String cannot be cast to org.apache.lucene.util.BytesRef\" comes down to the age old problem of JavaBinCodec defaulting to writeVal(val.getClass().getName() + ':' + val.toString()); when it doesn't know how to write ab Object.\n\nIn particular: QueryComponent.doFieldSortValues tries to be agnostic to the SortFields/Comparators used, and puts the \"raw\" sort value directly in the response (unless there is a SchemaField that can be used to marshall it) .. in the case of functions like these, that's a BytesRef \u2013 on the other side of things, the resulting \"String\" (ie: org.apache.lucene.util.BytesRef:[DEADBEEF] ) gets read in and cases the class cast when it's passed to TermOrdValComparator.\n\nIn an ideal world, the intra node communication would just happily \"work\" even with BytesRef objects \u2013 in which case we wouldn't even need the existing marshall/unmarshall logic that StrField has \u2013 and we could potentially configure an ObjectResolver on the JavaBinCodec used for intra node communication to do so ... but that seems like a pretty big change for this and still wouldn't fix things for anyone still using xml for intra node communication (do these people exist?)\n\na \"hack\" with a more limited surface area of change would be to make QueryComponent.doFieldSortValues and QueryComponent.unmarshalSortValues \"smarter\" such that they take care of automatically base64 encoding/decoding sort values if/when the SortField uses a TermOrdValComparator\n\n...that's really the best idea i've got. ",
            "author": "Hoss Man",
            "id": "comment-16510391"
        }
    ]
}