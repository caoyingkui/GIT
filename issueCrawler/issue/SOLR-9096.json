{
    "id": "SOLR-9096",
    "title": "Add PartitionStream to Streaming Expressions",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The basic idea of a PartitionStream is to take a one or more input streams of tuples, partition them out to a set of workers such that each worker can work with a subset of the tuples, and then bring them all back into a single stream. This differs from a ParallelStream because in ParallelStream the data is partitioned at the source whereas with a PartitionStream one can take an existing stream and spread it out across workers.\n\nThe use-case here is for when one has a source stream (or more) which cannot be parallelized at the source but which can be parallelized after some level of processing. I see this being used most for parallelized sort, rollups, or graph searches.\n\n\n                            /--- sort ----\\\n                           /               \\                      /--- Collection A\n                          / ---- sort ----- \\                    /\nClient <--- rollup  <----<                    <----- innerJoin <\n                          \\ ---- sort ----- /                    \\\n                           \\               /                      \\--- Collection B\n                            \\--- sort ----/\n\n\n\n\n                            /--- sort -- rollup ----\\\n                           /                         \\                      /--- Collection A\n                          / ---- sort -- rollup ----- \\                    /\nClient <-- innerJoin <---<                              <----- innerJoin <\n                    \\     \\ ---- sort -- rollup ----- /                    \\\n                     \\     \\                         /                      \\--- Collection B\n                      \\     \\--- sort -- rollup ----/\n                       \\\n                        \\\n                         \\ <--- jdbc source\n\n\n\n\n                            /--- sort -- innerJoin ----\\\n                           /                            \\  \n                          / ---- sort -- innerJoin ----- \\  <--- jdbc source\nClient <-- innerJoin <---<                                | \n                    \\     \\ ---- sort -- innerJoin ----- /  <--- rollup <---- Collection A\n                     \\     \\                            /  \n                      \\     \\--- sort -- innerJoin ----/\n                       \\\n                        \\\n                         \\ <--- jdbc source\n\n\n\n\n\nI imagine partition expression would look something like this\n\n\npartition(\n  inputA=<source stream A>,\n  inputB=<source stream B>,\n  work=<stream for the workers>,\n  over=\"fieldA,fieldB\",\n  workers=6,\n  zkHost=<zk connection string>\n)\n\n\n\nfor example\n\n\ninnerJoin(\n  partition(\n    inputA=jdbc(database1),\n    inputB=rollup(\n      search(collectionA, ...),\n      ...\n    ),\n    work=sort(\n      innerJoin(\n        inputA,\n        inputB,\n        on=\"fieldA,fieldB\"\n      ),\n      by=\"jdbcFieldC asc, collectionAFieldB desc\"\n    ),\n    workers=6,\n    zkHost=localhost:12345\n  ),\n  jdbc(database2),\n  on=\"fieldZ\"\n)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-10T20:58:32+0000",
            "author": "Joel Bernstein",
            "content": "I'm curious about the implementation. How do the workers receive the data? are the streams pushed to the workers? or is it a callback? ",
            "id": "comment-15278880"
        }
    ]
}