{
    "id": "SOLR-11196",
    "title": "Solr 6.5.0 consuming entire Heap suddenly while working smoothly on Solr 6.1.0",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.5,                                            6.6",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "Please note, this issue does not occurs on Solr-6.1.0 while the same occurs on Solr-6.5.0 and above. To fix this we had to move back to Solr-6.1.0 version.\n\nWe have been hit by a Solr Behavior in production which we are unable to debug. To start with here are the configurations for solr:\n\nSolr Version: 6.5, Master with 1 Slave of the same configuration as mentioned below.\n\nJVM Config:\n\n\n\n     -Xms2048m\n     -Xmx4096m\n     -XX:+ParallelRefProcEnabled\n     -XX:+UseCMSInitiatingOccupancyOnly\n     -XX:CMSInitiatingOccupancyFraction=50\n\n\n\nRest all are default values.\n\nSolr Config :\n\n\n\n   <autoCommit>\n      <!-- Auto hard commit in 5 minutes -->\n      <maxTime>{solr.autoCommit.maxTime:300000}</maxTime>\n      <openSearcher>false</openSearcher>\n    </autoCommit>\n    <autoSoftCommit>\n    <!-- Auto soft commit in 15 minutes -->\n      <maxTime>{solr.autoSoftCommit.maxTime:900000}</maxTime>\n    </autoSoftCommit>\n    </updateHandler>\n\n    <query>\n      <maxBooleanClauses>1024</maxBooleanClauses>\n      <filterCache class=\"solr.FastLRUCache\" size=\"8192\" initialSize=\"8192\" autowarmCount=\"0\" />\n      <queryResultCache class=\"solr.LRUCache\" size=\"8192\" initialSize=\"4096\" autowarmCount=\"0\" />\n      <documentCache class=\"solr.LRUCache\" size=\"12288\" initialSize=\"12288\" autowarmCount=\"0\" />\n      <cache name=\"perSegFilter\" class=\"solr.search.LRUCache\" size=\"10\" initialSize=\"0\" autowarmCount=\"10\" regenerator=\"solr.NoOpRegenerator\" />\n      <enableLazyFieldLoading>true</enableLazyFieldLoading>\n      <queryResultWindowSize>20</queryResultWindowSize>\n      <queryResultMaxDocsCached>${solr.query.max.docs:40}\n      </queryResultMaxDocsCached>\n      <useColdSearcher>false</useColdSearcher>\n      <maxWarmingSearchers>2</maxWarmingSearchers>\n    </query>\n\n\n\nThe Host (AWS) configurations are:\n\nRAM: 7.65GB\nCores: 4\n\nNow, our solr works perfectly fine for hours and sometimes for days but sometimes suddenly memory jumps up and the GC kicks in causing long big pauses with not much to recover. We are seeing this happening most often when one or multiple segments gets added or deleted post a hard commit. It doesn't matter how many documents got indexed. The images attached shows that just 1 document was indexed, causing an addition of one segment and it all got messed up till we restarted the Solr.\n\nHere are the images from NewRelic and Sematext (Kindly click on the links to view):\n\nJVM Heap Memory Image \n1 Document and 1 Segment addition Image \n\nUpdate: Here is the JMap output when SOLR last died, we have now increased the JVM memory to xmx of 12GB:\n\n\n\n num     #instances         #bytes  class name\n  ----------------------------------------------\n  1:      11210921     1076248416  org.apache.lucene.codecs.lucene50.Lucene50PostingsFormat$IntBlockTermState\n  2:      10623486      934866768  [Lorg.apache.lucene.index.TermState;\n  3:      15567646      475873992  [B\n  4:      10623485      424939400  org.apache.lucene.search.spans.SpanTermQuery$SpanTermWeight\n  5:      15508972      372215328  org.apache.lucene.util.BytesRef\n  6:      15485834      371660016  org.apache.lucene.index.Term\n  7:      15477679      371464296  org.apache.lucene.search.spans.SpanTermQuery\n  8:      10623486      339951552  org.apache.lucene.index.TermContext\n  9:       1516724      150564320  [Ljava.lang.Object;\n 10:        724486       50948800  [C\n 11:       1528110       36674640  java.util.ArrayList\n 12:        849884       27196288  org.apache.lucene.search.spans.SpanNearQuery\n 13:        582008       23280320  org.apache.lucene.search.spans.SpanNearQuery$SpanNearWeight\n 14:        481601       23116848  org.apache.lucene.document.FieldType\n 15:        623073       19938336  org.apache.lucene.document.StoredField\n 16:        721649       17319576  java.lang.String\n 17:         32729        7329640  [J\n 18:         14643        5788376  [F\n\n\n\n\nThe load on Solr is not much - max it goes to 2000 requests per minute. The indexing load can sometimes be in burst but most of the time its pretty low. But as mentioned above sometimes even a single document indexing can put solr into tizzy and sometimes it just works like a charm.\n\nEdit : \n\n The last configuration on which 6.1 works but not 6.5 is:   \n  JVM Config:\n\n\n     Xms: 2 GB\n     Xmx: 12 GB\n\n\n\n\nSolr Config:\nWe also removed soft commit. \n\n\n  <autoCommit>\n   <!-- Auto hard commit in 5 minutes -->\n   <maxTime>${solr.autoCommit.maxTime:300000}</maxTime>\n   <openSearcher>true</openSearcher>\n  </autoCommit>\n\n\n\n\nThe Host (AWS) configurations:\nRAM: 16GB\nCores: 4",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-04T15:14:06+0000",
            "content": "cut-n-paste from the user's list reply from Walter Underwood:\n1. This should be a question on the solr-user@lucene.apache.org, not a bug report.\n\n2. A 12 GB heap on an instance with 7.65 GB of RAM is a fatal configuration. A full GC will cause lots of swapping and an extreme slowdown.\n\n3. A 4 GB heap on an instance with 7.65 GB of RAM is not a good configuration. That does not leave enough room for the OS, other processes, and file buffers to cache Solr\u2019s index files.\n\n4. That instance is pretty small for Solr. The smallest AWS instance we run has 15 GB of RAM. We run an 8 GB heap. Check the disk access on New Relic during the slowdown. \n\n5. Does this instance swap to magnetic disk? Are the Solr indexes on magnetic ephemeral or magnetic EBS? Check the iops on New Relic. When you hit the max iops for a disk volume, very bad performance things happen.\n\n6. Set -Xms equal to -Xmx. Growing the heap to max at startup is a waste of time and makes Solr slow at the beginning. The heap will always get to max.\n\n7. Setting a longer time for auto soft commit than for auto hard commit is nonsense. Just don\u2019t do the soft commit.\n\nwunder ",
            "author": "Erick Erickson",
            "id": "comment-16114490"
        },
        {
            "date": "2017-08-04T15:20:37+0000",
            "content": "Disagree with your point 7. The hard commit has openSearcher set to false so the soft commit is the only thing making documents visible. This is a relatively common pattern to limit the size of the tlog without doing the work of opening new searchers.\n\nOtherwise agree totally and would add that the caches are very large relative to the memory. You have a filterCache set to 8192. Each entry can consume maxDoc/8 bytes, have you examined how much actually gets used when you go into the bad state?\n\nYou say \"we have now increased the JVM memory to xmx of 12GB\". Where is it coming from when you only have 7.65 GB available? My rule of thumb is to reserve at least half the physical memory for the OS for MMapDirecotry's use, see: http://blog.thetaphi.de/2012/07/use-lucenes-mmapdirectory-on-64bit.html\n\nAll in all this is a misconfigured system, I doubt it's anything Solr can do much about. I'll close this JIRA, we can re-open it if you can show this is really a Solr problem and not just misconfiguration on your part, but let's discuss this on the user's list first. ",
            "author": "Erick Erickson",
            "id": "comment-16114500"
        },
        {
            "date": "2017-08-04T15:25:26+0000",
            "content": "Ah, missed that openSearcher was false.\n\nThis host is named production-solr-master, so it might be master-slave.  ",
            "author": "Walter Underwood",
            "id": "comment-16114510"
        },
        {
            "date": "2017-08-08T10:39:08+0000",
            "content": "\n1. As this issue occurs on 6.5.0 and not on 6.1.0 so I expect it to be a bug.\n\n2. Please note, we have xmx of 12GB on AWS with RAM 16GB, have made an edit, please refer.\n\n3. We are running our instances on gp2 type EBS storage. Solr indexes are on magnetic EBS disk.  ",
            "author": "Amit",
            "id": "comment-16118160"
        },
        {
            "date": "2017-08-08T16:48:06+0000",
            "content": "As this issue occurs on 6.5.0 and not on 6.1.0 so I expect it to be a bug.\n+1, lets reopen until we are sure this is not some bug\n\nIs it correct that this is Master-Slave architecture (not SolrCloud)? You are indexing on the master only, and searching on the slave only? Which server is getting OOM? Master or Slave?\nYour JMap lists a bunch of (span) queries, so I'd assume you are talking about the slave here, however you also say this happens when you add docs, could you clarify? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16118615"
        },
        {
            "date": "2017-08-09T09:34:23+0000",
            "content": "This is a  Master-Slave architecture. Indexing happens on master only. While searching is on both master and slave through a load balancer. Both Master and Slave gets OOM frequently. Both master and slave works smoothly on 6.1.0 with the same configurations. ",
            "author": "Amit",
            "id": "comment-16119629"
        }
    ]
}