{
    "id": "SOLR-5652",
    "title": "Heisenbug in DistribCursorPagingTest: \"walk already seen ...\"",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Several times now, Uwe's jenkins has encountered a \"walk already seen ...\" assertion failure from DistribCursorPagingTest that I've been unable to fathom, let alone reproduce (although sarowe was able to trigger a similar, non-reproducible seed, failure on his machine)\n\nUsing this as a tracking issue to try and make sense of it.\n\nSummary of things noticed so far:\n\n\tSo far only seen on http://jenkins.thetaphi.de & sarowe's mac\n\tSo far seen on MacOSX and Linux\n\tSo far seen on branch 4x and trunk\n\tSo far seen on Java6, Java7, and Java8\n\tfails occured in first block of randomized testing:\n\t\n\t\twe've indexed a small number of randomized docs\n\t\twe're explicitly looping over every field and sorting in both directions\n\t\n\t\n\tfails were sorting on one of the \"*_dv_last\" or \"*_dv_first\" fields (docValues=true, either sortMissingLast=true OR sortMissingFirst=true)\n\t\n\t\tfor desc sorts, sort on same field asc has worked fine just before this (fields are in arbitrary order, but \"asc\" always tried before \"desc\")\n\t\tsorting on some other random fields has sometimes been tried before this and worked\n\t\n\t\n\n\n\n(specifics of each failure seen in the wild recorded in comments)",
    "attachments": {
        "str_dv.post-patch.log.txt": "https://issues.apache.org/jira/secure/attachment/12627848/str_dv.post-patch.log.txt",
        "SOLR-5652.patch": "https://issues.apache.org/jira/secure/attachment/12625488/SOLR-5652.patch",
        "372.log": "https://issues.apache.org/jira/secure/attachment/12624996/372.log",
        "jenkins.thetaphi.de_Lucene-Solr-4.x-MacOSX_1217.log.txt": "https://issues.apache.org/jira/secure/attachment/12624199/jenkins.thetaphi.de_Lucene-Solr-4.x-MacOSX_1217.log.txt",
        "SOLR-5652-dont-sort-on-any-dv-fields-when-codec-doesnt-support-missing-dvs.patch": "https://issues.apache.org/jira/secure/attachment/12627849/SOLR-5652-dont-sort-on-any-dv-fields-when-codec-doesnt-support-missing-dvs.patch",
        "SOLR-5652.nocommit.patch": "https://issues.apache.org/jira/secure/attachment/12625476/SOLR-5652.nocommit.patch",
        "jenkins.thetaphi.de_Lucene-Solr-4.x-MacOSX_1200.log.txt": "https://issues.apache.org/jira/secure/attachment/12624198/jenkins.thetaphi.de_Lucene-Solr-4.x-MacOSX_1200.log.txt",
        "SOLR-5652.codec.skip.dv.patch": "https://issues.apache.org/jira/secure/attachment/12625439/SOLR-5652.codec.skip.dv.patch",
        "129.log": "https://issues.apache.org/jira/secure/attachment/12624863/129.log",
        "bin_dv.post-patch.log.txt": "https://issues.apache.org/jira/secure/attachment/12625613/bin_dv.post-patch.log.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13877675",
            "date": "2014-01-21T18:08:56+0000",
            "content": "http://jenkins.thetaphi.de/job/Lucene-Solr-4.x-MacOSX/1200/\nRevision: 1558588\nUsing Java: 64bit/jdk1.6.0 -XX:-UseCompressedOops -XX:+UseParallelGC\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=DistribCursorPagingTest -Dtests.method=testDistribSearch -Dtests.seed=B7F9EFE0FC392581 -Dtests.slow=true -Dtests.locale=es_MX -Dtests.timezone=America/Tortola -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 29.3s | DistribCursorPagingTest.testDistribSearch <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: walk already seen: 39\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B7F9EFE0FC392581:361F61F88B6645BD]:0)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.assertFullWalkNoDups(DistribCursorPagingTest.java:628)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.doRandomSortsOnLargeIndex(DistribCursorPagingTest.java:465)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.doTest(DistribCursorPagingTest.java:86)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:867)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:695)\n\n\n\nAfter this I made teh following commits to tryand help track down the bug, in the hopes it would uncover some shard out of sync problems (which is the only explanation i could think of)...\n\nhttps://svn.apache.org/r1558939\nhttps://svn.apache.org/r1558945 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13877683",
            "date": "2014-01-21T18:18:11+0000",
            "content": "http://jenkins.thetaphi.de/job/Lucene-Solr-4.x-MacOSX/1217/\nRevision: 1559847\nUsing Java: 64bit/jdk1.7.0 -XX:+UseCompressedOops -XX:+UseSerialGC\n\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=DistribCursorPagingTest -Dtests.method=testDistribSearch -Dtests.seed=F09D8E3EF23506C2 -Dtests.slow=true -Dtests.locale=sr_RS -Dtests.timezone=Australia/Tasmania -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 21.5s | DistribCursorPagingTest.testDistribSearch <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: walk already seen: 93, don't know why; q=id:93 gives: {responseHeader={status=0,QTime=7},response={numFound=1,start=0,maxScore=4.555348,docs=[SolrDocument{id=93, long=5077, long_last=5077, long_first=5077, long_dv_last=5077, long_dv_first=5077, float=-3.6574272E8, float_last=-3.6574272E8, float_first=-3.6574272E8, float_dv_last=-3.6574272E8, float_dv_first=-3.6574272E8, double=-1.3713607226255326E9, double_last=-1.3713607226255326E9, double_first=-1.3713607226255326E9, double_dv_last=-1.3713607226255326E9, double_dv_first=-1.3713607226255326E9, str=\u02dc\u02fa\u02b5, str_last=\u02dc\u02fa\u02b5, str_first=\u02dc\u02fa\u02b5, str_dv_last=\u02dc\u02fa\u02b5, str_dv_first=\u02dc\u02fa\u02b5, bin=LfuliMaoJJG5866cs8lYmtS89ZDH2owXyi2QPp9kw6zpPlrrT4UAZw==, bin_last=LfuliMaoJJG5866cs8lYmtS89ZDH2owXyi2QPp9kw6zpPlrrT4UAZw==, bin_first=LfuliMaoJJG5866cs8lYmtS89ZDH2owXyi2QPp9kw6zpPlrrT4UAZw==, bin_dv_last=LfuliMaoJJG5866cs8lYmtS89ZDH2owXyi2QPp9kw6zpPlrrT4UAZw==, bin_dv_first=LfuliMaoJJG5866cs8lYmtS89ZDH2owXyi2QPp9kw6zpPlrrT4UAZw==, _version_=1457794677110472704}]}}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([F09D8E3EF23506C2:717B0026856A66FE]:0)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.assertFullWalkNoDups(DistribCursorPagingTest.java:636)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.doRandomSortsOnLargeIndex(DistribCursorPagingTest.java:465)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.doTest(DistribCursorPagingTest.java:86)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:867)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:744)\n\n\n\nOne thing that jumps out at me here is that in this failure the doc in question (93) doesn't have a value for the int_dv_last field being sorted on - no concrete info on whether that was true in the first failure as well.\n\nThe next steps I can think of:\n\n\tget the explicit sort criteria into the assertion failure so it's easier to verify w/o digging through the logs\n\tadd more logging so every time a doc is seen in one of these cursor walks, we log it's sort value \u2013 i'm still not convinced this problem isn't a general shard inconsistency problem\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13877913",
            "date": "2014-01-21T22:07:53+0000",
            "content": "Full logs from the two builds that have failed so far "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13877914",
            "date": "2014-01-21T22:08:32+0000",
            "content": "Heisenbug on Policeman Jenkins  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13878011",
            "date": "2014-01-21T23:32:44+0000",
            "content": "Commit 1560219 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1560219 ]\n\nSOLR-5652: Make test more deterministicly random, and increase logging to try and track down strange test failure "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13878017",
            "date": "2014-01-21T23:41:16+0000",
            "content": "Commit 1560220 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1560220 ]\n\nSOLR-5652: Make test more deterministicly random, and increase logging to try and track down strange test failure (merge r1560219) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13878020",
            "date": "2014-01-21T23:42:49+0000",
            "content": "\nThe next steps I can think of: ...\n\nDone.\n\nIt also occurred to me that even though the test is just looping over the all the sort fields, and even though the requests are suppose to be completely independent of each other; the ordering of the sort fields was based on a Map iteration \u2013 which might explain why the seeds don't reproduce for other people on other OSs/JVMs (presuming that there is a bug in the code itself, and that bug is dependent on some past behavior).  So in addition to the extra logging i mentioned wanting to add, the code that gets the list of all sort field names now explicitly sorts those names, then shuffles them using the tests random() ... so hopefully the failures will now be more easy to reproduce. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13880191",
            "date": "2014-01-23T18:31:19+0000",
            "content": "On OS X Mavericks with Apple Java 1.6.0_65 on branch_4x I ran ant -Dtestcase=DistribCursorPaginTest in solr/core/ in a bash loop to try to find failures with reproducible seeds.  Out of a little over 400 trials, 5 failed.\n\nBelow is the repro line from one I picked at random (trial #129) to attempt to reproduce.  I've re-run it six times, and the failure reproduced the first time, but the test succeeded each of the following five times.  (I tried a seventh time, but performed ant clean at the top-level directory first, and it still didn't reproduce.) \n\n\nant test  -Dtestcase=DistribCursorPagingTest -Dtests.method=testDistribSearch -Dtests.seed=55FB0127DC22CD98 -Dtests.slow=true -Dtests.locale=en_AU -Dtests.timezone=Atlantic/Madeira -Dtests.file.encoding=US-ASCII\n\n\n\nI'm attaching the test log (129.log) from the original failure with the above seed. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13880371",
            "date": "2014-01-23T21:20:10+0000",
            "content": "updating description based on variables seen in sarowe's failure "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13880639",
            "date": "2014-01-24T02:16:41+0000",
            "content": "I tried reproducing the other four seeds I found by running each of them ten times, but they all passed.\n\nHere's the output of egrep 'Throwable|SOLR-5652: [^(]' over the other four failed trials' log files:\n\n\n25.log:   [junit4]   2> 19647 T10 oasc.DistribCursorPagingTest.doRandomSortsOnLargeIndex SOLR-5652: Begining Loop over smallish num of docs\n25.log:   [junit4]    > Throwable #1: java.lang.AssertionError: ({params(q=*%3A*&fl=id%2Cint_dv_last&rows=50&sort=int_dv_last+desc%2C+id+desc),defaults(cursorMark=AoIGycP9Cl8B)}) walk already seen: 53, don't know why; q=id:53 gives: {responseHeader={status=0,QTime=7},response={numFound=1,start=0,maxScore=4.3672957,docs=[SolrDocument{id=53, long=-1762578138619777716, long_last=-1762578138619777716, long_first=-1762578138619777716, long_dv_last=-1762578138619777716, long_dv_first=-1762578138619777716, float=7.8670176E8, float_last=7.8670176E8, float_first=7.8670176E8, float_dv_last=7.8670176E8, float_dv_first=7.8670176E8, double=-5.708345229626098E8, double_last=-5.708345229626098E8, double_first=-5.708345229626098E8, double_dv_last=-5.708345229626098E8, double_dv_first=-5.708345229626098E8, str=\u3055\u304a\u308c\u3093, str_last=\u3055\u304a\u308c\u3093, str_first=\u3055\u304a\u308c\u3093, str_dv_last=\u3055\u304a\u308c\u3093, str_dv_first=\u3055\u304a\u308c\u3093, bin=O69Ees9vzo65vMxdlD794IAfqQgcvHEy+6USZ9bEELcM4PnS, bin_last=O69Ees9vzo65vMxdlD794IAfqQgcvHEy+6USZ9bEELcM4PnS, bin_first=O69Ees9vzo65vMxdlD794IAfqQgcvHEy+6USZ9bEELcM4PnS, bin_dv_last=O69Ees9vzo65vMxdlD794IAfqQgcvHEy+6USZ9bEELcM4PnS, bin_dv_first=O69Ees9vzo65vMxdlD794IAfqQgcvHEy+6USZ9bEELcM4PnS, _version_=1457993135883812864}]}}\n330.log:   [junit4]   2> 19366 T10 oasc.DistribCursorPagingTest.doRandomSortsOnLargeIndex SOLR-5652: Begining Loop over smallish num of docs\n330.log:   [junit4]    > Throwable #1: java.lang.AssertionError: ({params(q=*%3A*&fl=id%2Cdouble_dv_first&rows=33&sort=double_dv_first+desc%2C+id+desc),defaults(cursorMark=AoIFP6OxOxOxOxRRAQ%3D%3D)}) walk already seen: 53, don't know why; q=id:53 gives: {responseHeader={status=0,QTime=6},response={numFound=1,start=0,maxScore=4.5409594,docs=[SolrDocument{id=53, int=1280166143, int_last=1280166143, int_first=1280166143, int_dv_last=1280166143, int_dv_first=1280166143, long=-9052102457621824595, long_last=-9052102457621824595, long_first=-9052102457621824595, long_dv_last=-9052102457621824595, long_dv_first=-9052102457621824595, float=3.0276464E8, float_last=3.0276464E8, float_first=3.0276464E8, float_dv_last=3.0276464E8, float_dv_first=3.0276464E8, str=\u27c9\u27d1, str_last=\u27c9\u27d1, str_first=\u27c9\u27d1, str_dv_last=\u27c9\u27d1, str_dv_first=\u27c9\u27d1, bin=rS4=, bin_last=rS4=, bin_first=rS4=, bin_dv_last=rS4=, bin_dv_first=rS4=, _version_=1458022773190295552}]}}\n358.log:   [junit4]   2> 20392 T10 oasc.DistribCursorPagingTest.doRandomSortsOnLargeIndex SOLR-5652: Begining Loop over smallish num of docs\n358.log:   [junit4]    > Throwable #1: java.lang.AssertionError: ({params(q=*%3A*&fl=id%2Cdouble_dv_last&rows=26&sort=double_dv_last+asc%2C+id+asc),defaults(cursorMark=AoIFQcxu1GR52DdbBQ%3D%3D)}) walk already seen: 53, don't know why; q=id:53 gives: {responseHeader={status=0,QTime=6},response={numFound=1,start=0,maxScore=4.713572,docs=[SolrDocument{id=53, int=326151412, int_last=326151412, int_first=326151412, int_dv_last=326151412, int_dv_first=326151412, long=2982275399264847435, long_last=2982275399264847435, long_first=2982275399264847435, long_dv_last=2982275399264847435, long_dv_first=2982275399264847435, float=-4.07416768E8, float_last=-4.07416768E8, float_first=-4.07416768E8, float_dv_last=-4.07416768E8, float_dv_first=-4.07416768E8, str=s, str_last=s, str_first=s, str_dv_last=s, str_dv_first=s, bin=XR3Lrq5HZ64ra30SYdaN4EkoTS0jNYojEq+1McIN6T4QD136dLnbj4v/fp1VK+lN, bin_last=XR3Lrq5HZ64ra30SYdaN4EkoTS0jNYojEq+1McIN6T4QD136dLnbj4v/fp1VK+lN, bin_first=XR3Lrq5HZ64ra30SYdaN4EkoTS0jNYojEq+1McIN6T4QD136dLnbj4v/fp1VK+lN, bin_dv_last=XR3Lrq5HZ64ra30SYdaN4EkoTS0jNYojEq+1McIN6T4QD136dLnbj4v/fp1VK+lN, bin_dv_first=XR3Lrq5HZ64ra30SYdaN4EkoTS0jNYojEq+1McIN6T4QD136dLnbj4v/fp1VK+lN, _version_=1458025403210792960}]}}\n372.log:   [junit4]   2> 20889 T10 oasc.DistribCursorPagingTest.doRandomSortsOnLargeIndex SOLR-5652: Begining Loop over smallish num of docs\n372.log:   [junit4]    > Throwable #1: java.lang.AssertionError: ({params(q=*%3A*&fl=id%2Cstr_dv_last&rows=18&sort=str_dv_last+desc%2C+id+desc),defaults(cursorMark=AoIgSg%3D%3D)}) walk already seen: 45, don't know why; q=id:45 gives: {responseHeader={status=0,QTime=10},response={numFound=1,start=0,maxScore=4.8394523,docs=[SolrDocument{id=45, int=55600073, int_last=55600073, int_first=55600073, int_dv_last=55600073, int_dv_first=55600073, long=-5726302924934473981, long_last=-5726302924934473981, long_first=-5726302924934473981, long_dv_last=-5726302924934473981, long_dv_first=-5726302924934473981, float=4.3000288E8, float_last=4.3000288E8, float_first=4.3000288E8, float_dv_last=4.3000288E8, float_dv_first=4.3000288E8, double=-6.3097894268989615E7, double_last=-6.3097894268989615E7, double_first=-6.3097894268989615E7, double_dv_last=-6.3097894268989615E7, double_dv_first=-6.3097894268989615E7, bin=TMQSu87+U6mLrws1ot/s491jlIrAp1SdDMSIc/wF8H7JW8Uvk9/Z216erOE8JFucgFQ=, bin_last=TMQSu87+U6mLrws1ot/s491jlIrAp1SdDMSIc/wF8H7JW8Uvk9/Z216erOE8JFucgFQ=, bin_first=TMQSu87+U6mLrws1ot/s491jlIrAp1SdDMSIc/wF8H7JW8Uvk9/Z216erOE8JFucgFQ=, bin_dv_last=TMQSu87+U6mLrws1ot/s491jlIrAp1SdDMSIc/wF8H7JW8Uvk9/Z216erOE8JFucgFQ=, bin_dv_first=TMQSu87+U6mLrws1ot/s491jlIrAp1SdDMSIc/wF8H7JW8Uvk9/Z216erOE8JFucgFQ=, _version_=1458026742612492288}]}}\n\n\n\nThe trial #358 failure has sort=double_dv_last+asc\n\nOne thing that jumps out at me here is that in this failure the doc in question (93) doesn't have a value for the int_dv_last field being sorted on\n\nThis is also true for all of the above failures, and for the failure in the attached 129.log. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13880659",
            "date": "2014-01-24T02:35:41+0000",
            "content": "In the trial #129 failure, the second (failing) page is sorted wrong - the sort field is long_dv_first, but multiple docs with missing values (including the \"walk already seen\" doc: id=53) are not sorted first.  Below is the output of egrep 'SOLR-5652: [^(]|id=53' over 129.log - note that the first page has the id=53 doc sorted properly:\n\n\n   [junit4]   2> 21647 T10 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Clong_dv_first&rows=24&sort=long_dv_first+desc%2C+id+desc),defaults(cursorMark=*)}) gave us these docs: {id=53}; {id=25, long_dv_first=9028609258260341288}; {id=1, long_dv_first=8079898934015269594}; {id=21, long_dv_first=7851701882515113803}; {id=62, long_dv_first=7838548354468740764}; {id=15, long_dv_first=7703783121293450688}; {id=77, long_dv_first=7259374194906229471}; {id=59, long_dv_first=7109412730326436803}; {id=29, long_dv_first=6983226518504627711}; {id=69, long_dv_first=6894002903936490262}; {id=108, long_dv_first=6425678483825374576}; {id=48, long_dv_first=6162850160620829991}; {id=18, long_dv_first=6050872288145443429}; {id=10, long_dv_first=5639159091440117036}; {id=49, long_dv_first=5585109074321704897}; {id=121, long_dv_first=5564641483351446975}; {id=73, long_dv_first=5557697725656376716}; {id=124, long_dv_first=5515795054987553907}; {id=91, long_dv_first=5446634527267601359}; {id=66, long_dv_first=5412453097925579481}; {id=57, long_dv_first=5391575838257268802}; {id=67, long_dv_first=5285225733925278855}; {id=76, long_dv_first=5196111855800982134}; {id=118, long_dv_first=4962434967015612730}; \n   [junit4]   2> 21673 T10 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Clong_dv_first&rows=24&sort=long_dv_first+desc%2C+id+desc),defaults(cursorMark=AoJ%2FvAJZAg%3D%3D)}) gave us these docs: {id=94, long_dv_first=5064}; {id=74, long_dv_first=5045}; {id=100, long_dv_first=5038}; {id=95, long_dv_first=5024}; {id=71, long_dv_first=5010}; {id=117}; {id=53}; {id=46}; {id=99, long_dv_first=-57033495908952210}; {id=84, long_dv_first=-369682029177105515}; {id=51, long_dv_first=-571619284359424369}; {id=33, long_dv_first=-777789016127771765}; {id=89, long_dv_first=-827568794981027330}; {id=27, long_dv_first=-874200373569477439}; {id=32, long_dv_first=-897758339419136464}; {id=37, long_dv_first=-1097686452252701951}; {id=20, long_dv_first=-1142352694920116441}; {id=60, long_dv_first=-1237791953129111727}; {id=78, long_dv_first=-1381169508523349434}; {id=58, long_dv_first=-1427953974149921646}; {id=104, long_dv_first=-1433781337878484605}; {id=8, long_dv_first=-1778050783003838576}; {id=55, long_dv_first=-1879894088937473264}; {id=38, long_dv_first=-1955827817437289663}; \n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13880735",
            "date": "2014-01-24T05:40:05+0000",
            "content": "Uh, the trial #129 failure isn't just sorted wrong on the second page, the whole thing is sorted wrong: all the missing-value docs should be on the first page.  On the second page, the three missing value docs are sorted as if they had the value 0.\n\nThe same thing happened on trial #25 - on the second page, missing value doc id=53 is sorted as if its int_dv_last value were zero, rather than missing, and then it shows up again as the final doc on the third page, where it belongs:\n\n\n   [junit4]   2> 19917 T10 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Cint_dv_last&rows=50&sort=int_dv_last+desc%2C+id+desc),defaults(cursorMark=*)}) gave us these docs: {id=115, int_dv_last=2091290595}; {id=113, int_dv_last=2037908394}; {id=41, int_dv_last=2010364276}; {id=55, int_dv_last=1998540267}; {id=61, int_dv_last=1928174044}; {id=10, int_dv_last=1926002179}; {id=6, int_dv_last=1860315269}; {id=68, int_dv_last=1813333298}; {id=72, int_dv_last=1788709893}; {id=94, int_dv_last=1775138667}; {id=103, int_dv_last=1759722924}; {id=19, int_dv_last=1708818408}; {id=62, int_dv_last=1702707874}; {id=95, int_dv_last=1575599582}; {id=18, int_dv_last=1539900646}; {id=3, int_dv_last=1534894477}; {id=16, int_dv_last=1513487396}; {id=122, int_dv_last=1512368828}; {id=91, int_dv_last=1490726417}; {id=100, int_dv_last=1369044665}; {id=129, int_dv_last=1366930639}; {id=2, int_dv_last=1335797630}; {id=12, int_dv_last=1311171495}; {id=17, int_dv_last=1197587669}; {id=71, int_dv_last=1075041470}; {id=14, int_dv_last=1062057736}; {id=87, int_dv_last=1062050843}; {id=98, int_dv_last=1026760294}; {id=32, int_dv_last=987606417}; {id=48, int_dv_last=971706716}; {id=25, int_dv_last=860420389}; {id=58, int_dv_last=844256726}; {id=120, int_dv_last=784821778}; {id=26, int_dv_last=778495105}; {id=89, int_dv_last=759861936}; {id=42, int_dv_last=731134129}; {id=38, int_dv_last=507728088}; {id=66, int_dv_last=504369368}; {id=88, int_dv_last=461655530}; {id=127, int_dv_last=443109475}; {id=28, int_dv_last=395812574}; {id=76, int_dv_last=390559531}; {id=27, int_dv_last=388277668}; {id=128, int_dv_last=312954617}; {id=101, int_dv_last=288358140}; {id=36, int_dv_last=262776063}; {id=8, int_dv_last=258137179}; {id=49, int_dv_last=203957872}; {id=104, int_dv_last=193961933}; {id=70, int_dv_last=177134041}; \n   [junit4]   2> 19936 T10 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Cint_dv_last&rows=50&sort=int_dv_last+desc%2C+id+desc),defaults(cursorMark=AoJZndujBVYE)}) gave us these docs: {id=4, int_dv_last=159428848}; {id=109, int_dv_last=146424475}; {id=82, int_dv_last=118282228}; {id=54, int_dv_last=85706438}; {id=5, int_dv_last=53954157}; {id=90, int_dv_last=34653341}; {id=125, int_dv_last=22280683}; {id=74, int_dv_last=49}; {id=84, int_dv_last=47}; {id=44, int_dv_last=45}; {id=40, int_dv_last=40}; {id=126, int_dv_last=39}; {id=79, int_dv_last=38}; {id=96, int_dv_last=36}; {id=77, int_dv_last=29}; {id=124, int_dv_last=26}; {id=52, int_dv_last=26}; {id=99, int_dv_last=24}; {id=51, int_dv_last=22}; {id=92, int_dv_last=20}; {id=53}; {id=86, int_dv_last=-27969262}; {id=63, int_dv_last=-64632197}; {id=111, int_dv_last=-65674043}; {id=78, int_dv_last=-92357840}; {id=69, int_dv_last=-128203234}; {id=118, int_dv_last=-174163156}; {id=56, int_dv_last=-213598056}; {id=64, int_dv_last=-250673657}; {id=116, int_dv_last=-349965047}; {id=73, int_dv_last=-363194086}; {id=112, int_dv_last=-365330802}; {id=97, int_dv_last=-378023587}; {id=20, int_dv_last=-425200925}; {id=22, int_dv_last=-447702352}; {id=110, int_dv_last=-457782308}; {id=50, int_dv_last=-458057913}; {id=65, int_dv_last=-464626829}; {id=43, int_dv_last=-479019126}; {id=81, int_dv_last=-490373572}; {id=46, int_dv_last=-491310745}; {id=35, int_dv_last=-524855567}; {id=93, int_dv_last=-562980068}; {id=102, int_dv_last=-603711742}; {id=106, int_dv_last=-664725432}; {id=37, int_dv_last=-861444535}; {id=30, int_dv_last=-872755266}; {id=108, int_dv_last=-905452841}; {id=85, int_dv_last=-908362401}; {id=31, int_dv_last=-909902582}; \n   [junit4]   2> 19950 T10 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Cint_dv_last&rows=50&sort=int_dv_last+desc%2C+id+desc),defaults(cursorMark=AoIGycP9Cl8B)}) gave us these docs: {id=39, int_dv_last=-1040495703}; {id=83, int_dv_last=-1098867850}; {id=60, int_dv_last=-1130244120}; {id=75, int_dv_last=-1241745669}; {id=9, int_dv_last=-1248082530}; {id=29, int_dv_last=-1263869241}; {id=121, int_dv_last=-1269818264}; {id=67, int_dv_last=-1368223478}; {id=24, int_dv_last=-1402120260}; {id=117, int_dv_last=-1432445507}; {id=21, int_dv_last=-1445804798}; {id=13, int_dv_last=-1448419734}; {id=114, int_dv_last=-1450149432}; {id=57, int_dv_last=-1455879499}; {id=45, int_dv_last=-1465395474}; {id=123, int_dv_last=-1507457930}; {id=1, int_dv_last=-1563035961}; {id=105, int_dv_last=-1615487083}; {id=34, int_dv_last=-1656779776}; {id=23, int_dv_last=-1734132255}; {id=15, int_dv_last=-1745083413}; {id=33, int_dv_last=-1755075260}; {id=107, int_dv_last=-1819329253}; {id=47, int_dv_last=-1835223018}; {id=119, int_dv_last=-1860312074}; {id=80, int_dv_last=-1875371069}; {id=7, int_dv_last=-1884862947}; {id=59, int_dv_last=-1963096931}; {id=11, int_dv_last=-1978568913}; {id=53}; \n\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13880750",
            "date": "2014-01-24T06:12:51+0000",
            "content": "I see the same pattern (missing value docvalue sorting as if it had a value of zero, or zero-length in the string case) in all the other failed trials:\n\ntrial #330: sort=double_dv_first+desc; missing value doc id=53 is the first doc on page one, and is also given as one of six missing value docs at the zero position on page three.\n\ntrial #358: sort=double_dv_last+asc; missing value doc id=53 is given as one of five missing value docs at the zero position on page three, and then again as the last doc on page seven. \n\ntrial #372: sort=str_dv_last+desc; missing value doc id=45 is mentioned on two different pages, and missing str_dv_last value docs are sorted at the same position as, and interleaved with, zero-length value docs.  I've attached the full log for this one (372.log). "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13881173",
            "date": "2014-01-24T17:23:02+0000",
            "content": "I ran branch_4x DistribCursorPagingTest 1000 times in a bash loop overnight on Linux using Oracle Java 1.6.0_45 - no failures.  "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13881432",
            "date": "2014-01-24T21:18:42+0000",
            "content": "It looks to me like there are two problems here: 1) the same doc is showing up on different pages when deep paging; and 2) missing docvalue docs are sorted incorrectly.\n\nI can easily find examples of problem #2 in logs of non-failing trials, e.g. from trial #91 - when sort=long_dv_first+asc, missing value docs id=19, id=32 and id=37 are sorted as if they had the value 0, on the second page, when they should be sorted first on the first page:\n\n\n   [junit4]   2> 19554 T10 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Clong_dv_first&rows=31&sort=long_dv_first+asc%2C+id+asc),defaults(cursorMark=*)}) gave us these docs: {id=49, long_dv_first=-8979994988935574161}; {id=92, long_dv_first=-8755571709855874971}; {id=84, long_dv_first=-8574119732015592678}; {id=56, long_dv_first=-8572499504943249879}; {id=91, long_dv_first=-8203042523619772390}; {id=75, long_dv_first=-8115138008435097864}; {id=85, long_dv_first=-7569390009163464752}; {id=58, long_dv_first=-7543350239050885008}; {id=45, long_dv_first=-7525477648502620266}; {id=80, long_dv_first=-7520859819773031357}; {id=20, long_dv_first=-7124229734364778199}; {id=64, long_dv_first=-6830701259982220043}; {id=60, long_dv_first=-6805829375857154103}; {id=2, long_dv_first=-6659642971458854219}; {id=72, long_dv_first=-6436183300694469323}; {id=41, long_dv_first=-6013357013156317440}; {id=16, long_dv_first=-5909224636078497253}; {id=90, long_dv_first=-5891044973987397315}; {id=21, long_dv_first=-5139637696689790888}; {id=95, long_dv_first=-4964664340542583607}; {id=25, long_dv_first=-4953002351284696779}; {id=101, long_dv_first=-4409331376874778593}; {id=40, long_dv_first=-4123215048596655849}; {id=4, long_dv_first=-3899694572079828547}; {id=94, long_dv_first=-3621827719107024030}; {id=29, long_dv_first=-3602538116122488005}; {id=54, long_dv_first=-3286165773326701533}; {id=5, long_dv_first=-3144094377585650477}; {id=22, long_dv_first=-3050916496497308906}; {id=71, long_dv_first=-2534895618188255748}; {id=48, long_dv_first=-2165485763197155213}; \n   [junit4]   2> 19567 T10 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Clong_dv_first&rows=31&sort=long_dv_first+asc%2C+id+asc),defaults(cursorMark=AoIH4fKmK%2B53yHNQAw%3D%3D)}) gave us these docs: {id=76, long_dv_first=-1932456939352186404}; {id=68, long_dv_first=-1878698959726559452}; {id=88, long_dv_first=-1623167100548405744}; {id=83, long_dv_first=-1589461579047178358}; {id=13, long_dv_first=-1411021277082593064}; {id=74, long_dv_first=-1013366478463336966}; {id=17, long_dv_first=-946883306115055217}; {id=99, long_dv_first=-663522491219747257}; {id=42, long_dv_first=-92189538677577379}; {id=19}; {id=32}; {id=37}; {id=82, long_dv_first=5004}; {id=97, long_dv_first=5006}; {id=24, long_dv_first=5012}; {id=11, long_dv_first=5013}; {id=87, long_dv_first=5035}; {id=33, long_dv_first=5037}; {id=10, long_dv_first=5048}; {id=34, long_dv_first=5051}; {id=28, long_dv_first=5067}; {id=3, long_dv_first=5073}; {id=43, long_dv_first=5076}; {id=23, long_dv_first=5083}; {id=89, long_dv_first=5087}; {id=8, long_dv_first=58919190259123570}; {id=51, long_dv_first=225066202121560643}; {id=67, long_dv_first=844890816756093941}; {id=6, long_dv_first=1032728410845862227}; {id=36, long_dv_first=1141671958716920319}; {id=96, long_dv_first=1226886190401658912};\n\n\n\nTestDistributedMissingSort does not test sorting by docvalue - I'll work on adding docvalue tests there. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13882122",
            "date": "2014-01-26T00:17:38+0000",
            "content": "Uwe's Jenkins found a \"walk already seen\" Linux failure on branch_4x using Oracle 1.8.0-ea-b124 JVM: http://jenkins.thetaphi.de/job/Lucene-Solr-4.x-Linux/9136/ - a missing value str_dv doc (id=2) appears at both the first and last positions and pages:\n\n\n   [junit4]   2> 414765 T2177 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Cstr_dv_last&rows=41&sort=str_dv_last+asc%2C+id+asc),defaults(cursorMark=*)}) gave us these docs: {id=2}; {id=3, str_dv_last=}; {id=9, str_dv_last=}; {id=18, str_dv_last=}; {id=35, str_dv_last=}; {id=41}; {id=43, str_dv_last=}; {id=46, str_dv_last=}; {id=48, str_dv_last=}; {id=51, str_dv_last=}; {id=55}; {id=80, str_dv_last=}; {id=125, str_dv_last=}; {id=117, str_dv_last=u}xPe}; {id=11, str_dv_last=CVLjZ-k U}; {id=104, str_dv_last=g}; {id=66, str_dv_last=h}; {id=27, str_dv_last=j}; {id=120, str_dv_last=l}; {id=128, str_dv_last=o}; {id=19, str_dv_last=q}; {id=76, str_dv_last=t}; {id=42, str_dv_last=x}; {id=92, str_dv_last=y}; {id=40, str_dv_last=z}; {id=6, str_dv_last=???????????}; {id=82, str_dv_last=????}; {id=1, str_dv_last=??}; {id=103, str_dv_last=???????}; {id=15, str_dv_last=???????????????????}; {id=81, str_dv_last=??????????}; {id=29, str_dv_last=?}; {id=98, str_dv_last=????????????????}; {id=78, str_dv_last=????????????}; {id=72, str_dv_last=??????????????}; {id=73, str_dv_last=???????????????????}; {id=33, str_dv_last=???????????}; {id=121, str_dv_last=????????????????}; {id=97, str_dv_last=??}; {id=47, str_dv_last=??????????????}; {id=32, str_dv_last=????????????}; \n   [junit4]   2> 414781 T2177 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Cstr_dv_last&rows=41&sort=str_dv_last+asc%2C+id+asc),defaults(cursorMark=AoI%2FBeC%2FpeC8neC9teC%2Bu%2BC9nOC%2FhuC%2BgeC8geC9ruC%2BgeC9s%2BC%2Bl1AC)}) gave us these docs: {id=106, str_dv_last=??????}; {id=54, str_dv_last=??????}; {id=94, str_dv_last=????}; {id=63, str_dv_last=????????????????????}; {id=88, str_dv_last=??}; {id=24, str_dv_last=??}; {id=17, str_dv_last=????????}; {id=99, str_dv_last=??????????}; {id=7, str_dv_last=?????????????????}; {id=50, str_dv_last=?????????????}; {id=85, str_dv_last=????????????}; {id=77, str_dv_last=??}; {id=102, str_dv_last=?}; {id=89, str_dv_last=??????????????}; {id=8, str_dv_last=????????}; {id=74, str_dv_last=?????????????????}; {id=60, str_dv_last=????????????????}; {id=67, str_dv_last=?????}; {id=109, str_dv_last=????????????????}; {id=118, str_dv_last=???????????}; {id=112, str_dv_last=?}; {id=56, str_dv_last=???}; {id=5, str_dv_last=????????}; {id=95, str_dv_last=???????????????????}; {id=22, str_dv_last=??????????}; {id=31, str_dv_last=???????????????}; {id=16, str_dv_last=?}; {id=52, str_dv_last=???????????}; {id=57, str_dv_last=????????????????????}; {id=113, str_dv_last=???????????}; {id=91, str_dv_last=??}; {id=34, str_dv_last=??????}; {id=39, str_dv_last=?????????}; {id=59, str_dv_last=?????}; {id=61, str_dv_last=???????}; {id=44, str_dv_last=?????????????????}; {id=69, str_dv_last=????????????}; {id=119, str_dv_last=???????}; {id=12, str_dv_last=??????}; {id=90, str_dv_last=????}; {id=123, str_dv_last=???????????????????}; \n   [junit4]   2> 414795 T2177 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Cstr_dv_last&rows=41&sort=str_dv_last+asc%2C+id+asc),defaults(cursorMark=AoI%2FGuOEm%2BOEpOOEjuOEoeOEmeOEpuOEo%2BOEmeOEh%2BOEneOEjeOEheOErOOEguOEoeOElOOEluOEpeOEgVsH)}) gave us these docs: {id=68, str_dv_last=??????????????}; {id=96, str_dv_last=?????????????}; {id=45, str_dv_last=????????}; {id=38, str_dv_last=??????????}; {id=110, str_dv_last=???????????????}; {id=20, str_dv_last=??????}; {id=129, str_dv_last=??????????????????}; {id=75, str_dv_last=???????}; {id=79, str_dv_last=????}; {id=62, str_dv_last=?????????}; {id=30, str_dv_last=??????????????????}; {id=111, str_dv_last=???????????}; {id=28, str_dv_last=????????}; {id=105, str_dv_last=??????????????}; {id=100, str_dv_last=?}; {id=37, str_dv_last=??????}; {id=115, str_dv_last=???????????????}; {id=107, str_dv_last=?????????????}; {id=49, str_dv_last=??}; {id=93, str_dv_last=???????????????}; {id=65, str_dv_last=??????}; {id=25, str_dv_last=????????}; {id=14, str_dv_last=????????}; {id=83, str_dv_last=???????????????????}; {id=124, str_dv_last=????????????????}; {id=114, str_dv_last=???????????????????}; {id=71, str_dv_last=??????????????????}; {id=108, str_dv_last=???????????????}; {id=36, str_dv_last=?????????????????}; {id=86, str_dv_last=??????????}; {id=122, str_dv_last=?????????}; {id=84, str_dv_last=?????????}; {id=127, str_dv_last=???????????}; {id=70, str_dv_last=?????????????}; {id=13, str_dv_last=????}; {id=10, str_dv_last=?????}; {id=64, str_dv_last=????}; {id=26, str_dv_last=???????????}; {id=58, str_dv_last=??????????????????}; {id=4, str_dv_last=?????????????????}; {id=101, str_dv_last=??????????}; \n   [junit4]   2> 414805 T2177 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Cstr_dv_last&rows=41&sort=str_dv_last+asc%2C+id+asc),defaults(cursorMark=AoI%2FCfCdhojwnYSm8J2Es%2FCdhKvwnYWo8J2FqfCdhYfwnYaE8J2HpPCdhqJVBg%3D%3D)}) gave us these docs: {id=87, str_dv_last=??}; {id=116, str_dv_last=?????}; {id=23, str_dv_last=???????????}; {id=53, str_dv_last=??????}; {id=126, str_dv_last=???????????????}; {id=21, str_dv_last=???????????}; \n   [junit4]   2> 414813 T2177 oasc.DistribCursorPagingTest.assertFullWalkNoDups SOLR-5652: ({params(q=*%3A*&fl=id%2Cstr_dv_last&rows=41&sort=str_dv_last+asc%2C+id+asc),defaults(cursorMark=AoI%2FDfSEm7v0jba69IqEqvSFmYX0hram9IeujPSLqIX0ibic9IeajfSAlKX0hZqwVQE%3D)}) gave us these docs: {id=2}; \n   [junit4]    > Throwable #1: java.lang.AssertionError: ({params(q=*%3A*&fl=id%2Cstr_dv_last&rows=41&sort=str_dv_last+asc%2C+id+asc),defaults(cursorMark=AoI%2FDfSEm7v0jba69IqEqvSFmYX0hram9IeujPSLqIX0ibic9IeajfSAlKX0hZqwVQE%3D)}) walk already seen: 2, don't know why; q=id:2 gives: {responseHeader={status=0,QTime=5},response={numFound=1,start=0,maxScore=4.3672957,docs=[SolrDocument{id=2, int=-1269312747, int_last=-1269312747, int_first=-1269312747, int_dv_last=-1269312747, int_dv_first=-1269312747, long=-7073619055149191639, long_last=-7073619055149191639, long_first=-7073619055149191639, long_dv_last=-7073619055149191639, long_dv_first=-7073619055149191639, float=-5.1121048E7, float_last=-5.1121048E7, float_first=-5.1121048E7, float_dv_last=-5.1121048E7, float_dv_first=-5.1121048E7, double=1.209537768077775E9, double_last=1.209537768077775E9, double_first=1.209537768077775E9, double_dv_last=1.209537768077775E9, double_dv_first=1.209537768077775E9, _version_=1458244495980101632}]}}\n\n\n\nAlso, I found a trunk failure on OS X using Oracle 1.7.0_25 JVM - one failure out of 875 trials:\n\n\n797.log:   [junit4]   2> 33038 T10 oasc.DistribCursorPagingTest.doRandomSortsOnLargeIndex SOLR-5652: Begining Loop over smallish num of docs\n797.log:   [junit4]    > Throwable #1: java.lang.AssertionError: ({params(q=*%3A*&fl=id%2Clong_dv_last&rows=41&sort=long_dv_last+asc%2C+id+asc),defaults(cursorMark=AoIHQPUmIuYgRStcBA%3D%3D)}) walk already seen: 94, don't know why; q=id:94 gives: {responseHeader={status=0,QTime=8},response={numFound=1,start=0,maxScore=4.650658,docs=[SolrDocument{id=94, int=-1526187839, int_last=-1526187839, int_first=-1526187839, int_dv_last=-1526187839, int_dv_first=-1526187839, float=-4.343064E8, float_last=-4.343064E8, float_first=-4.343064E8, float_dv_last=-4.343064E8, float_dv_first=-4.343064E8, double=2.4889970242543688E8, double_last=2.4889970242543688E8, double_first=2.4889970242543688E8, double_dv_last=2.4889970242543688E8, double_dv_first=2.4889970242543688E8, str=\u1097\u1068\u1010\u101f\u1000\u1096\u1018\u1015\u1069\u101b\u1062\u1047\u1083, str_last=\u1097\u1068\u1010\u101f\u1000\u1096\u1018\u1015\u1069\u101b\u1062\u1047\u1083, str_first=\u1097\u1068\u1010\u101f\u1000\u1096\u1018\u1015\u1069\u101b\u1062\u1047\u1083, str_dv_last=\u1097\u1068\u1010\u101f\u1000\u1096\u1018\u1015\u1069\u101b\u1062\u1047\u1083, str_dv_first=\u1097\u1068\u1010\u101f\u1000\u1096\u1018\u1015\u1069\u101b\u1062\u1047\u1083, bin=1OWONkZ+pQ9N1WTd+bro5Ubqx8FFEGtqPDSD, bin_last=1OWONkZ+pQ9N1WTd+bro5Ubqx8FFEGtqPDSD, bin_first=1OWONkZ+pQ9N1WTd+bro5Ubqx8FFEGtqPDSD, bin_dv_last=1OWONkZ+pQ9N1WTd+bro5Ubqx8FFEGtqPDSD, bin_dv_first=1OWONkZ+pQ9N1WTd+bro5Ubqx8FFEGtqPDSD, _version_=1458175223436148736}]}}\n\n\n\nAlso, I ran 1000 trials on Win7 on branch_4x using Oracle 1.6.0_45 JVM, and saw 0 failures. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13882838",
            "date": "2014-01-27T14:29:20+0000",
            "content": "Updated summary "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13882958",
            "date": "2014-01-27T16:57:05+0000",
            "content": "It looks to me like there are two problems here: 1) the same doc is showing up on different pages when deep paging; and 2) missing docvalue docs are sorted incorrectly.\n\nI think I understand problem #2: non-multi-valued numeric and string fields are created (by TrieField's and StrField's createFields() methods) as NumericDocValuesField-s and SortedDocValuesField-s, respectively, and these require each doc to have a value, which apparently defaults to zero for NumericDocValuesField-s and the empty string for SortedDocValueField-s.\n\nHere are the declarations for the field types that have this problem in DistribCursorPagingTest (from schema-sorts.xml):\n\n\n<fieldtype name=\"str_dv_last\" class=\"solr.StrField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingLast=\"true\"/>\n<fieldtype name=\"str_dv_first\" class=\"solr.StrField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingFirst=\"true\"/>\n\n<fieldtype name=\"int_dv_last\" class=\"solr.TrieIntField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingLast=\"true\"/>\n<fieldtype name=\"int_dv_first\" class=\"solr.TrieIntField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingFirst=\"true\"/>\n\n<fieldtype name=\"long_dv_last\" class=\"solr.TrieLongField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingLast=\"true\"/>\n<fieldtype name=\"long_dv_first\" class=\"solr.TrieLongField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingFirst=\"true\"/>\n\n<fieldtype name=\"float_dv_last\" class=\"solr.TrieFloatField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingLast=\"true\"/>\n<fieldtype name=\"float_dv_first\" class=\"solr.TrieFloatField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingFirst=\"true\"/>\n\n<fieldtype name=\"double_dv_last\" class=\"solr.TrieDoubleField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingLast=\"true\"/>\n<fieldtype name=\"double_dv_first\" class=\"solr.TrieDoubleField\" stored=\"true\" indexed=\"false\" docValues=\"true\" sortMissingFirst=\"true\"/>\n\n\n\nI think that the above declarations should by disallowed by Solr, because they contain docValues=\"true\" + sortMissing<Last|First>=\"true\"; the user is asking for a particular sorting behavior for missing values, when there never will be missing values.\n\nAlso, the Solr Ref Guide says about docvalue fields \"If this type is used, the field must be either required or have a default value, meaning every document must have a value for this field.\"  However, neither the above field types nor the fields using them are required or have a default specified.  Maybe this should be enforced by schema parsing? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13882976",
            "date": "2014-01-27T17:16:46+0000",
            "content": "NumericDocValuesField-s and SortedDocValuesField-s, respectively, and these require each doc to have a value, \n\nAlthough that used to be true, it should no longer be the case: LUCENE-5178\n\nNow.... one thing that does look a little fishy to me that might cause a problem is how things like IntComparator deals with missing values...\nit simply substitutes in MAX_INT or MIN_INT when the value is missing.\n\nIf the tests here are generating random values, you might try taking out MAX_<numeric_type>, MIN_<numeric_type> and see if it makes a difference? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13883023",
            "date": "2014-01-27T18:02:06+0000",
            "content": "Although that used to be true, it should no longer be the case: LUCENE-5178\n\nRight, see also: SOLR-5165 & SOLR-5222\n\nOn IRC, i drew sarowe's attention to these issues and DocValuesMissingTest and he pointed out that DocValuesMissingTest uses the following...\n\n@SuppressCodecs({\"Lucene40\", \"Lucene41\", \"Lucene42\"}) // old formats cannot represent missing values\n\n...so this may be the smoking gun to explain what's going wrong here, since we don't do anything like this in the cursor tests. (yet ... i'm going to fix that now) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13883044",
            "date": "2014-01-27T18:20:13+0000",
            "content": "To clarify one thing: steve mentioned that it seems like there are two problems...\n\nIt looks to me like there are two problems here: 1) the same doc is showing up on different pages when deep paging; and 2) missing docvalue docs are sorted incorrectly.\n\nAs far as #2 goes, now that we log every doc on every page, i can confirm that when i try some of these failed seeds (for example steves #129 log), i also see the incorrect ordering even though the test passes for me \u2013 so #2 is almost certainly the codec issue.\n\nthat still leaves the question about #1, and what it isn't completely reproducible \u2013 but that may just be an artifact of #2 (ie: if these codecs have non-deterministic behavior when trying to access \"missing\" values, there could be arbitrary data in a reused bytebuffer) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13883048",
            "date": "2014-01-27T18:22:45+0000",
            "content": "Also, the Solr Ref Guide says about docvalue fields...\n\nfixed. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13883311",
            "date": "2014-01-27T21:09:31+0000",
            "content": "rather then just use SupressCodec in this test, here's a patch that checks to see if the codec supports docvalues with sort missing, and if not then it skips those fields \u2013 but the other fields are still checked.\n\nyou can see it working by comparing the logs messages (showing the fields tested) between things like...\n\n\nant test -Dtestcase=DistribCursorPagingTest -Dtests.codec=Lucene40\n   vs\nant test -Dtestcase=DistribCursorPagingTest -Dtests.codec=Lucene45\n\n\n\nBefore i commit this though, i really want to add an explicit sanity checking that the docs are in the expected order so we can see a definitive and consistent fail from the problem this tries to prevent ... i'm going to work on that this afternoon.\n\n(I also want to docValue fields to the test schema that don't use either sortMissingLast or sortMissingFirst, and just rely on the default behavior ... not sure why i didn't think to include that in the first place) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13883317",
            "date": "2014-01-27T21:17:32+0000",
            "content": "\nOn IRC, i drew sarowe's attention to these issues and DocValuesMissingTest and he pointed out that DocValuesMissingTest uses the following...\n\n    @SuppressCodecs(\nUnknown macro: {\"Lucene40\", \"Lucene41\", \"Lucene42\"} \n) // old formats cannot represent missing values\n\n...so this may be the smoking gun to explain what's going wrong here, since we don't do anything like this in the cursor tests. (yet ... i'm going to fix that now)\n\nDammit, I feel pretty terrible. You guys have been debugging this thing for a long time, and I've been trying to stay up to date on the issue, but not once did I even think about this...\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13883402",
            "date": "2014-01-27T22:04:01+0000",
            "content": "rather then just use SupressCodec in this test, here's a patch that checks to see if the codec supports docvalues with sort missing, and if not then it skips those fields \u2013 but the other fields are still checked.\n\n+1, looks good, though on trunk \"Lucene3x\" and \"Appending\" can be removed from the blacklist in LTC.defaultCodecSupportsMissingDocValues().  I see these elsewhere on trunk (Solr tests only), though, so maybe they're not just vestiges? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13883538",
            "date": "2014-01-28T00:02:20+0000",
            "content": "Ok, this new patch has the following...\n\n\tnew *_dv fields in the schema for all the various types w/o using any of the sort missing options\n\ttweaked the simple testing in both the single node and distrib test so that:\n\t\n\t\tone doc is missing an int value\n\t\twe randomly pick either \"int\" or \"int_dv\" as a field to use in explicit sorts\n\t\t\n\t\t\tcurrently a nocommit in place to force this to be \"int_dv\"\n\t\t\n\t\t\n\t\twe explicitly sort on all 3 \"missing\" sub-variants (\"\", \"_first\", \"_last\") and check the doc order exactly matches our expectations\n\t\n\t\n\tincludes everything from SOLR-5652.codec.skip.dv.patch...\n\t\n\t\t...but there is a nocommit bypassing hte codec check so docvalues are always used.\n\t\n\t\n\n\n\nWith this patch, and these nocommits, it's pretty trivial to reliably reproduce failing seeds that pop up when running...\n\n\nant test  -Dtests.class=\\*Cursor\\* -Dtests.codec=Lucene40\n\n\n\n...and likewise, my limted testing so far hasn't seen any failures when running this patch with Lucene45 codec...\n\n\nant test  -Dtests.class=\\*Cursor\\* -Dtests.codec=Lucene45\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13883578",
            "date": "2014-01-28T00:52:48+0000",
            "content": "patch i think is commitable - same as SOLR-5652.nocommit.patch but with the nocommits removed, and the (in hindsight) obvious change needed to my new \"intsort\" field ranomization so that when the codec's docvalues support can't handle missing values, we use the non-docvalues version of that field for the explicit checks of *_last and *_first sorting\n\nI'm currently bash loop hammering on this patch \u2013 would appreciate it if others could try the same. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13884375",
            "date": "2014-01-28T18:11:46+0000",
            "content": "Using my patch, my laptop hammered out 154 iterations of all the cursor tests last night before encountering a failure \u2013 but this smells like it might be a completely different bug.\n\nIn particular:\n\n\tthe sort is \"bin_dv desc\" \u2013 note that sort missing last/first isn't used\n\tthe \"bin_dv asc\" sort works fine, and produces the exact reverse sort of as \"bin_dv desc\" \u2013 except that with the desc sort, after the last doc (id=5) is returned, the next cursor call generates a response consisting of that last doc again.\n\n\n\nDetails...\n\ntrunk 1561765M\nheres the seed (which doesn't reproduce for me) and failure details...\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=DistribCursorPagingTest -Dtests.method=testDistribSearch -Dtests.seed=A98D5436D5ABD5E2 -Dtests.slow=true -Dtests.locale=lt_LT -Dtests.timezone=IET -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 30.8s J0 | DistribCursorPagingTest.testDistribSearch <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: ({params(q=*%3A*&fl=id%2Cbin_dv&rows=30&sort=bin_dv+desc%2C+id+desc),defaults(cursorMark=AoIgRQ%3D%3D)}) walk already seen: 5, don't know why; q=id:5 gives: {responseHeader={status=0,QTime=10},response={numFound=1,start=0,maxScore=4.8607297,docs=[SolrDocument{id=5, int=472194186, int_last=472194186, int_first=472194186, int_dv=472194186, int_dv_last=472194186, int_dv_first=472194186, long=9045528501943660239, long_last=9045528501943660239, long_first=9045528501943660239, long_dv=9045528501943660239, long_dv_last=9045528501943660239, long_dv_first=9045528501943660239, double=-1.0261364741663126E9, double_last=-1.0261364741663126E9, double_first=-1.0261364741663126E9, double_dv=-1.0261364741663126E9, double_dv_last=-1.0261364741663126E9, double_dv_first=-1.0261364741663126E9, str=\ud802\udf3f, str_last=\ud802\udf3f, str_first=\ud802\udf3f, str_dv=\ud802\udf3f, str_dv_last=\ud802\udf3f, str_dv_first=\ud802\udf3f, _version_=1458455185121607680}]}}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([A98D5436D5ABD5E2:286BDA2EA2F4B5DE]:0)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.assertFullWalkNoDups(DistribCursorPagingTest.java:760)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.doRandomSortsOnLargeIndex(DistribCursorPagingTest.java:542)\n   [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.doTest(DistribCursorPagingTest.java:91)\n   [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:867)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:724)\n\n\n\nI'm going to go ahead and commit & backport the patch since we know it's needed for the sortMissing docvalues stuff \u2013 but in the meantime, if anyone can help brainstorm possible causes for this slightly new variant that would certainly be helpful "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13884377",
            "date": "2014-01-28T18:13:46+0000",
            "content": "I'm currently bash loop hammering on this patch \u2013 would appreciate it if others could try the same.\n\nI applied the patch to branch_4x and ran 1200 iterations of ant -Dtests.class=*Cursor* test using Apple JVM 1.6.0_65 on OS X Mavericks.  Zero failures. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13884439",
            "date": "2014-01-28T19:03:37+0000",
            "content": "Commit 1562155 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1562155 ]\n\nSOLR-5652: test fixes: add 'plain' docvalue field variants to schema, and check codecs for support of missing docValues before trying to sort on them "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13884450",
            "date": "2014-01-28T19:12:05+0000",
            "content": "Commit 1562160 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1562160 ]\n\nSOLR-5652: test fixes: add 'plain' docvalue field variants to schema, and check codecs for support of missing docValues before trying to sort on them (merge r1562155) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13895834",
            "date": "2014-02-09T05:36:15+0000",
            "content": "I've attached a log from another failure (trunk, Linux, trial #90), with a complex sort with str_dv as the primary, where the \"walk already seen\" doc is missing its str_dv value, and the codec is Lucene40.\n\nHoss's bin_dv sort failure was on a doc missing its bin_dv value, and the codec is Lucene42.\n\nI'm pretty sure both these failures are evidence of another test bug. \n\nHoss set up the full walk tests to skip sorting on dv_first and dv_last fields when the codec doesn't support missing docvalues, but dv fields should not be sorted on in that case either, since they too may have missing values (and in both the above cases, that's what caused the failures).\n\nI've attached another patch that also skips sorting on dv fields. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13896104",
            "date": "2014-02-09T23:18:27+0000",
            "content": "I've attached another patch that also skips sorting on dv fields.\n\nOn Linux, on trunk with this patch, I ran 1000 trials of ant -Dtests.class=*Cursor* test in a bash loop (well, three concurrent bash loops), and there were no failures.  I'd call this one licked. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13896992",
            "date": "2014-02-10T20:55:14+0000",
            "content": "Commit 1566741 from Steve Rowe in branch 'dev/trunk'\n[ https://svn.apache.org/r1566741 ]\n\nSOLR-5652: in cursor tests, don't sort on 'plain' docvalue fields (i.e., those using standard Lucene sorting for missing values) when the codec doesn't support missing docvalues. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13896996",
            "date": "2014-02-10T20:59:49+0000",
            "content": "Commit 1566742 from Steve Rowe in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1566742 ]\n\nSOLR-5652: in cursor tests, don't sort on 'plain' docvalue fields (i.e., those using standard Lucene sorting for missing values) when the codec doesn't support missing docvalues. (merged trunk r1566741) "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13897001",
            "date": "2014-02-10T21:02:22+0000",
            "content": "I committed my patch to also skip sorting on *_dv fields when the codec doesn't support missing docvalues, to trunk and branch_4x.\n\nResolving, as I think we have now addressed all of the missing-docvalues-related failures we've seen. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13897030",
            "date": "2014-02-10T21:22:22+0000",
            "content": "I committed my patch to also skip sorting on *_dv fields when the codec doesn't support missing docvalues, to trunk and branch_4x.\n\nthanks steve.\n\nResolving, as I think we have now addressed all of the missing-docvalues-related failures we've seen.\n\nI actually want to keep this one open a bit ... give it another week or two, and assuming no more failures i want to dial back on some of the extra logging we added here to be less verbose in the non-failure case. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13897043",
            "date": "2014-02-10T21:29:48+0000",
            "content": "\nResolving, as I think we have now addressed all of the missing-docvalues-related failures we've seen.\n\nI actually want to keep this one open a bit ... give it another week or two, and assuming no more failures i want to dial back on some of the extra logging we added here to be less verbose in the non-failure case.\n\nSure, makes sense. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13902544",
            "date": "2014-02-15T21:58:59+0000",
            "content": "Commit 1568690 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1568690 ]\n\nSOLR-5652: remove doc details logging now that we've identified hte original codec problem with the test "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13902546",
            "date": "2014-02-15T22:06:57+0000",
            "content": "Commit 1568694 from hossman@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1568694 ]\n\nSOLR-5652: remove doc details logging now that we've identified hte original codec problem with the test (merge r1568690) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13902551",
            "date": "2014-02-15T22:26:29+0000",
            "content": "ok ... now i'm comfortable calling this done.\n\nthanks everybody who helped figure this out. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13902555",
            "date": "2014-02-15T22:35:08+0000",
            "content": "Thanks to you for committing the fix! "
        }
    ]
}