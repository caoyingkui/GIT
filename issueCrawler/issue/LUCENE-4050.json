{
    "id": "LUCENE-4050",
    "title": "Make segments_NN file codec-independent",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/codecs"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I propose to change the format of SegmentInfos file (segments_NN) to use plain text instead of the current binary format.\n\nSegmentInfos file represents a commit point, and it also declares what codecs were used for writing each of the segments that the commit point consists of. However, this is a chicken and egg situation - in theory the format of this file is customizable via Codec.getSegmentInfosFormat, but in practice we have to first discover what is the codec implementation that wrote this file - so the SegmentCoreReaders assumes a certain fixed binary layout of a preamble of this file that contains the codec name... and then the file is read again, only this time using the right Codec.\n\nThis is ugly. Instead I propose to use a simple plain text format, either line oriented properties or JSON, in such a way that newer versions could easily extend it, and which wouldn't require any special Codec to read and parse. Consequently we could remove SegmentInfosFormat altogether, and instead add SegmentInfoFormat (notice the singular) to Codec to read single per-segment SegmentInfo-s in a codec-specific way. E.g. for Lucene40 codec we could either add another file or we could extend the .fnm file (FieldInfos) to contain also this information. \n\nThen the plain text SegmentInfos would contain just the following information:\n\n\n\tlist of global files for this commit point (if any)\n\tlist of segments for this commit point, and their corresponding codec class names\n\tuser data map",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-12T06:30:00+0000",
            "content": "I agree this is a total mess. We should really revisit how we handle:\n\n\n\tcommit file (in my opinion this should just be a list of segments! only!)\n  currently segmentinfos stores a ton of stuff more than this, it stores\n  per-segment metadata within this file when it really should not.\n\tper-segment metadata. In this case we have a lot of confusion with\n  segmentinfo and fieldinfo. It would be great for the codec to have more\n  flexibility here, via abstract classes/interfaces+attributes or something\n  that ensures its lossless yet still a codec can add what it needs. Really\n  for the most part segmentinfo is basically useless since many values actually\n  return \"well if you want to know this, then go look at the fieldinfos\".\n\tactual commit strategy. We do a lot of funky stuff like writing fake bogus\n  data, seeking backwards, etc. Why not just a normal atomic rename like\n  any other computer program on the planet????\n\n ",
            "author": "Robert Muir",
            "id": "comment-13273858"
        },
        {
            "date": "2012-05-12T10:38:48+0000",
            "content": "+1 to fully separate (separate files maybe?) the codec-neutral \"list\nof committed segments\" from \"the codec-specific details/metadata for\neach segment\".\n\nThen, a codec can easily store its own stuff in the segment metadata.\n\nAnd I agree the FieldInfo/SegmentInfo duality is confusing...\n\nPlain text encoding of these files would be really nice but isn't as\nimportant, I think... and will be a fair amount of work (I suspect we\nneed a JSON or YAML or something that represents lists, maps,\ndifferent native types, etc.).  I think this is separate / can come\nlater.\n\n\nWe do a lot of funky stuff like writing fake bogus\ndata, seeking backwards, etc. Why not just a normal atomic rename like\nany other computer program on the planet????\n\nIn fact Lucene used to use rename to commit the segments file but this\nproved problematic on Windows (sometimes the rename would hit \"access\ndenied\" error). ",
            "author": "Michael McCandless",
            "id": "comment-13273921"
        },
        {
            "date": "2012-05-12T10:45:56+0000",
            "content": "\nIn fact Lucene used to use rename to commit the segments file but this\nproved problematic on Windows (sometimes the rename would hit \"access\ndenied\" error).\n\nWell, problematic at least once right? I dont think it justifies doing\nthings a strange way.\n\nSurely this is just some problem only on windows 3.1 and java 1.2 or\nsomething and now fixed, since this is how every other linux/cygwin program\n(e.g. vi) works. ",
            "author": "Robert Muir",
            "id": "comment-13273927"
        },
        {
            "date": "2012-05-12T20:12:57+0000",
            "content": "Plain text encoding of these files would be really nice but isn't as important, I think...\n\nYeah, it could be sufficient if we would agree on necessarily separate the \"plain list of segments:codec\" from the segmentInfo/fieldInfo parts and push those parts down to the codec-specific formats.\n\nThen we could just use a version number as the first element of this file to allow for extensions in the future, like e.g. switching to JSON or to some other format du jour.\n\nSurely this is just some problem only on windows 3.1 and java 1.2 or something and now fixed, since this is how every other linux/cygwin program (e.g. vi) works.\n\nI'm not so sure. I know for a fact that Windows doesn't allow renames or deletes of open files, no matter if it's open by you or by some other process (e.g. user examining the file in Notepad.exe), and IIRC the issue was that JVM doesn't release OS file handles quickly enough. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13274064"
        },
        {
            "date": "2012-05-13T14:14:35+0000",
            "content": "Discussing this further with Robert, it looks like this is a (smaller) part of a larger issue, in that SegmentInfo+FieldInfo should be made extensible and the process of reading/writing this information should be completely codec-specific. Let's make a separate issue for that part.\n\nAnd the smaller issue discussed here is to record only the information about a commit point in a completely codec-independent, versioned format, whatever that format is. Let's call it CommitInfo or whatever other name fits. This part would be written to a file that is separate from the codec-dependent parts.\n\nRegarding two-phase commit and checksums - one reason we have SegmentInfosWriter/Reader was the AppendingCodec, because we couldn't make it work for append-only filesystems. However, we could change the two-phase commit implementation to the following:\n\n\n\twrite the data to the CommitInfo file\n\twrite a marker indicating \"end of data, checksum follows\"\n\tfinally, write the checksum\n\n\n\nThen the reading code knows that:\n\n\tif there's a marker missing then the file is invalid\n\tif the marker is present then the checksum must be present too\n\tand the checksum must be correct.\n\n\n\nThis implementation doesn't require seek back / overwrite so it's supported on any filesystem. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13274271"
        },
        {
            "date": "2012-05-13T14:24:05+0000",
            "content": "Changing the title to better reflect the scope of this issue. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13274274"
        },
        {
            "date": "2012-05-13T15:09:32+0000",
            "content": "It's actually a bug - it's not possible to cleanly extend index format via Codec-s without addressing this issue. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13274282"
        },
        {
            "date": "2012-05-15T20:59:27+0000",
            "content": "However, we could change the two-phase commit implementation to the following:\n\nI think that's a good solution?  It seems important to keep the non-codec-controlled write/read as simple as possible...\n\nThe only small thing we lose is if a disk full is going to strike... today we write the 0s ahead (in prepareCommit) so that we'll hit disk full during prepareCommit and not commit... but I think the chance of those 4 bytes hitting the disk full is very low so the simpler code is better... ",
            "author": "Michael McCandless",
            "id": "comment-13276204"
        },
        {
            "date": "2012-05-15T23:13:48+0000",
            "content": "The only small thing we lose is if a disk full is going to strike... \nI thought about this too - if it's really a big concern we could use the following trick: > 99% filesystems keep data in blocks that are multiples of 512 bytes. We could add filler bytes at the end of the file so that it comes out to a round multiple of 512 B, and only then append the marker and the checksum. This way we will know that writing a marker required allocation of a new block, and if it succeeded then writing a checksum should also succeed. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13276325"
        },
        {
            "date": "2012-05-16T19:33:01+0000",
            "content": "Ever considered using hard links instead of renaming? ",
            "author": "Marvin Humphrey",
            "id": "comment-13277041"
        },
        {
            "date": "2012-05-17T00:12:35+0000",
            "content": "Ever considered using hard links instead of renaming?\n\nThat's a neat option ... but I think it's only in Java 7 that we can create hard links (java.nio.file.Files.createLink)?  And even then it's an optional operation... ",
            "author": "Michael McCandless",
            "id": "comment-13277281"
        },
        {
            "date": "2012-07-11T23:03:43+0000",
            "content": "bulk cleanup of 4.0-ALPHA / 4.0 Jira versioning. all bulk edited issues have hoss20120711-bulk-40-change in a comment ",
            "author": "Hoss Man",
            "id": "comment-13412288"
        },
        {
            "date": "2012-08-03T13:34:48+0000",
            "content": "This was never resolved (segments_N file is codec-independent now) ",
            "author": "Robert Muir",
            "id": "comment-13428083"
        }
    ]
}