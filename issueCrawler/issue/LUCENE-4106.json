{
    "id": "LUCENE-4106",
    "title": "StopFillCacheException is defined twice and the one is actually thrown is private and not catchable",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "lucene/core/src/java/org/apache/lucene/search/FieldCacheImpl.java\n145:  static final class StopFillCacheException extends RuntimeException {\n383:        } catch (StopFillCacheException stop) {\n456:        } catch (StopFillCacheException stop) {\n560:        } catch (StopFillCacheException stop) {\n710:        } catch (StopFillCacheException stop) {\n798:        } catch (StopFillCacheException stop) {\n887:        } catch (StopFillCacheException stop) {\n\nlucene/core/src/java/org/apache/lucene/search/FieldCache.java\n57:  public static final class StopFillCacheException extends RuntimeException {\n216:        throw new FieldCacheImpl.StopFillCacheException();\n232:        throw new FieldCacheImpl.StopFillCacheException();\n248:        throw new FieldCacheImpl.StopFillCacheException();\n264:        throw new FieldCacheImpl.StopFillCacheException();",
    "attachments": {
        "LUCENE-4106.patch": "https://issues.apache.org/jira/secure/attachment/12530750/LUCENE-4106.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-04T09:52:55+0000",
            "content": "In which version do you see this. We had lots of refecatorings in trunk, maybe it is a relict. But the numeric FieldCache code should fail to work, if this is wrong? ",
            "author": "Uwe Schindler",
            "id": "comment-13288457"
        },
        {
            "date": "2012-06-04T09:54:27+0000",
            "content": "Ah, the public declaration in the FC interface is obsolete and unusded, we should remove it.\n\nThe Exception is internal and not be intended to be used outside of Lucene's core. ",
            "author": "Uwe Schindler",
            "id": "comment-13288459"
        },
        {
            "date": "2012-06-04T09:57:32+0000",
            "content": "But then if you wish to loop over all DoubleField values you need to know to do that check yourself?\n\n\n    Terms terms = reader.terms(field);\n    TermsEnum termsEnum = terms.iterator(null);\n    BytesRef term = termsEnum.next();\n    if (term != null) {\n        double min = FieldCache.NUMERIC_UTILS_DOUBLE_PARSER.parseDouble(term);\n        double max = min;\n        try {\n            while ((term = termsEnum.next()) != null) {\n               max = FieldCache.NUMERIC_UTILS_DOUBLE_PARSER.parseDouble(term);\n            }\n        } catch (StopFillCacheException ignored) {\n        }\n        doSomething(min, max);\n     }\n\n\n\nOr am i indexing something wrong to hit that exception? (i don't think i am) ",
            "author": "selckin",
            "id": "comment-13288460"
        },
        {
            "date": "2012-06-04T10:01:59+0000",
            "content": "Easy patch. This one removes the obsolete public declaration in Lucene trunk.\n\nIf yor really want to catch this internal Exception, you can do this via RuntimeException. ",
            "author": "Uwe Schindler",
            "id": "comment-13288462"
        },
        {
            "date": "2012-06-04T10:04:56+0000",
            "content": "@selckin: I agree, we could move the Exception to the FC interface as public one.\n\nThe code you are using is very expert, the Exception was only used as a Hack to break ther iteration when populating the FieldCache, but it might be good to make it public.\n\nIf you really want to catch it with current code, catch RuntimeEx. ",
            "author": "Uwe Schindler",
            "id": "comment-13288463"
        },
        {
            "date": "2012-06-04T10:11:52+0000",
            "content": "Simple patch again, this time using the public Exception, removing the private one.\n\nI have no preference, but the duplication has to be fixed (possibly also in 3.6) ",
            "author": "Uwe Schindler",
            "id": "comment-13288467"
        },
        {
            "date": "2012-06-17T14:07:10+0000",
            "content": "Committed trunk revision: 1351108\nCommitted 4.x revision: 1351109\n\nLucene 3.6.0 is not broken, it only has the private Exception. ",
            "author": "Uwe Schindler",
            "id": "comment-13393546"
        }
    ]
}