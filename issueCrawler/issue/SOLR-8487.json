{
    "id": "SOLR-8487",
    "title": "Add CommitStream to Streaming API and Streaming Expressions",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.3"
        ],
        "affect_versions": "6.3",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Minor"
    },
    "description": "(Paraphrased from Joel's idea/suggestions in the comments of SOLR-7535).\n\nWith SOLR-7535, users can now index documents/tuples using an UpdateStream.  However, there's no way currently using the Streaming API to force a commit on the collection that received these updates.\n\nThe purpose of this ticket is to add a CommitStream, which can be used to trigger commit(s) on a given collection.\n\nThe proposed usage/behavior would look a little bit like:\ncommit(collection, parallel(update(search()))\n\nNote that...\n1.) CommitStream has a positional collection parameter, to indicate which collection to commit on. (Alternatively, it could recurse through children() nodes until it finds the UpdateStream, and then retrieve the collection from the UpdateStream).\n2.) CommitStream forwards all tuples received by an underlying, wrapped stream.\n3.) CommitStream commits when the underlying stream emits its EOF tuple. (Alternatively, it could commit every X tuples, based on a parameter).",
    "attachments": {
        "SOLR-8487.patch": "https://issues.apache.org/jira/secure/attachment/12825478/SOLR-8487.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-05T12:20:10+0000",
            "author": "Joel Bernstein",
            "content": "Closed this issue by mistake and then re-opened. ",
            "id": "comment-15082950"
        },
        {
            "date": "2016-08-24T20:22:27+0000",
            "author": "Dennis Gove",
            "content": "I'm working on this. Hoping to have a first draft in a day or two. ",
            "id": "comment-15435610"
        },
        {
            "date": "2016-08-25T14:25:11+0000",
            "author": "Dennis Gove",
            "content": "No tests (will add soon).\nDoesn't add any summary tuples - not sure if these are necessary.\n\nSupports setting batchSize, waitFlush, waitSearcher, and softCommit settings. ",
            "id": "comment-15436972"
        },
        {
            "date": "2016-08-25T18:29:49+0000",
            "author": "Joel Bernstein",
            "content": "Looks good!\n\nWondering if we should tie this more closely with the update stream. A couple of possibilities:\n\n1) The update stream returns a tuple with each batch, which includes the batch size. Should we use that to calculate when to commit? \n2) We could have the update stream add the collection to its outgoing tuples and then use that, instead of specifying the collection as a parameter to the commit function. ",
            "id": "comment-15437411"
        },
        {
            "date": "2016-08-26T15:23:23+0000",
            "author": "Dennis Gove",
            "content": "I'm not a huge fan of tying two streams together like that (ie, one is dependent on the other). If we wanted to tie update and commit more closely I'd rather see the commit as an operation inside the UpdateStream like \n\nupdate(foo, stream(...), batchSize=#, commit(nBatches/batchSize/time))\n\n ",
            "id": "comment-15439256"
        },
        {
            "date": "2016-08-26T17:47:50+0000",
            "author": "Kevin Risden",
            "content": "I like the commit() outside update(). This makes commit look more like a count or something similar. One thing that may be useful is amount of time passed (I know this makes it harder):\n\nLets say the underlying stream is a daemon that happens every 30 seconds. If you set the batch size to 1 that would work but maybe you want to commit every 1000 tuples or every 5 minutes.\n\nI guess at that point you could instead have Solr doing the auto commit. Just a thought. ",
            "id": "comment-15439454"
        },
        {
            "date": "2016-08-27T01:58:49+0000",
            "author": "Joel Bernstein",
            "content": "The original patch had the update function do it's own commits. But it was taken out because if an expression is doing parallel updates there would be multiple workers committing at the same time. So the commit function is needed to support this scenario:\n\n\ncommit(parallel(update(search())))\n\n\n\nSo I think we're left with the choice of using the data in the tuples returned by the update stream, or leaving it decoupled.\n ",
            "id": "comment-15440446"
        },
        {
            "date": "2016-08-27T02:01:10+0000",
            "author": "Joel Bernstein",
            "content": "I'll be on vacation next week, so I don't want to hold things up, if you're feeling good about your current approach. ",
            "id": "comment-15440449"
        },
        {
            "date": "2016-09-13T15:26:22+0000",
            "author": "Dennis Gove",
            "content": "I just realized I had a fundamental misunderstanding of the UpdateStream. I thought it was returning all source tuples on a call to read() but that is not the case. It is instead sending a batch of source tuples into the destination collection, dropping them, and then returning a summary tuple.\n\nThis will change some of the implementation details of the CommitStream. ",
            "id": "comment-15487515"
        },
        {
            "date": "2016-09-21T15:57:49+0000",
            "author": "Dennis Gove",
            "content": "Properly handles the UpdateStream summary tuple and takes that into account when sizing batches. The CommitStream will not swallow any tuples (ie, all tuples it reads, whether summary or not, will be returned to any wrapping stream).\n\nAdds commit, parallelCommit, and daemonParallelCommit tests.\n\nI believe this is ready to go. ",
            "id": "comment-15510365"
        },
        {
            "date": "2016-09-21T19:12:52+0000",
            "author": "Joel Bernstein",
            "content": "+1 looks good ",
            "id": "comment-15510877"
        },
        {
            "date": "2016-09-22T17:07:24+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6365920a0e9ed3bf0b13b90955cd73535d495f9a in lucene-solr's branch refs/heads/master from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6365920 ]\n\nSOLR-8487: Adds CommitStream to support sending commits to a collection being updated ",
            "id": "comment-15513823"
        },
        {
            "date": "2016-09-22T17:22:21+0000",
            "author": "Dennis Gove",
            "content": "Added a section in the reference guide - https://cwiki.apache.org/confluence/display/solr/Streaming+Expressions#StreamingExpressions-commit ",
            "id": "comment-15513872"
        },
        {
            "date": "2016-09-22T18:04:23+0000",
            "author": "Dennis Gove",
            "content": "Should've been resolved, not closed. ",
            "id": "comment-15514017"
        },
        {
            "date": "2016-10-14T15:43:31+0000",
            "author": "ASF subversion and git services",
            "content": "Commit edde433594c104668137350d9db640180b04f648 in lucene-solr's branch refs/heads/branch_6x from Dennis Gove\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=edde433 ]\n\nSOLR-8487: Adds CommitStream to support sending commits to a collection being updated ",
            "id": "comment-15575681"
        },
        {
            "date": "2016-11-09T08:38:46+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Closing after 6.3.0 release. ",
            "id": "comment-15650291"
        }
    ]
}