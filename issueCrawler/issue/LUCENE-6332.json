{
    "id": "LUCENE-6332",
    "title": "join query scanning \"toField\" docValue",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.0",
        "components": [
            "modules/join"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "New Feature"
    },
    "description": "I want to contribute the subj which should do something like ..WHERE EXISTS (SELECT 1 FROM fromSearcher.search(fromQuery) WHERE fromField=toField). It turns out, that it can be returned by the current method createJoinQuery(...ScoreMode.None)\n\n\tat first, it should run fromQuery first, collect fromField into BytesRefHash by TermsCollector, like it's done now\n\tthen it should return query with TwoPhase Scorer\n\twhich obtains toField docValue on matches() and check term for existence in  BytesRefHash\n\n\n\nDo you think it's ever useful? if you do, I can bake a patch. \nAnyway, suggest the better API eg separate method, or enum and actual  name!",
    "attachments": {
        "LUCENE-6332.patch": "https://issues.apache.org/jira/secure/attachment/12704127/LUCENE-6332.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14345689",
            "author": "Mikhail Khludnev",
            "date": "2015-03-03T20:34:14+0000",
            "content": "might be made available for Solr as a query parser like SOLR-6234 "
        },
        {
            "id": "comment-14346538",
            "author": "Mikhail Khludnev",
            "date": "2015-03-04T07:34:11+0000",
            "content": "ok referring to semijoin doesn't really make sense, because all Lucene join queries are semijoins. Hence, I rename the summary, though it still lacks of clarity.    \nAny feedback? "
        },
        {
            "id": "comment-14352350",
            "author": "Martijn van Groningen",
            "date": "2015-03-08T23:39:01+0000",
            "content": "+1 I think it makes sense for the query time join to leverage the `TwoPhaseIterator` optimization. For the scoring based query that is trivial (just override `asTwoPhaseIterator()` method in the scorer), but for the `TermsQuery` is tricker as it seems that via the `MultiTermQuery` the TwoPhaseIterator optimization isn't accessible. "
        },
        {
            "id": "comment-14358389",
            "author": "Mikhail Khludnev",
            "date": "2015-03-12T09:45:34+0000",
            "content": "attaching DocValuesScanQuery.java with a trivial test. It works for BinaryDV only (ord- coded Sorted(Set)DV can be implemented too, but avoiding term lookups is more preferable, eg LUCENE-6352). \nOne more idea is to check number of collected terms at from side and choose between TermsQuery (lookup in term dict, current JoinUtil) and this approach - scanning all DV column. WDYT?  "
        }
    ]
}