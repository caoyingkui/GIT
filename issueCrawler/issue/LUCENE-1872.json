{
    "id": "LUCENE-1872",
    "title": "Improve javadocs for Numeric*",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I'm working on improving Numeric* javadocs.",
    "attachments": {
        "LUCENE-1872.patch": "https://issues.apache.org/jira/secure/attachment/12418058/LUCENE-1872.patch",
        "LUCENE-1872-cardinality.patch": "https://issues.apache.org/jira/secure/attachment/12419540/LUCENE-1872-cardinality.patch",
        "LUCENE-1872-uwe.patch": "https://issues.apache.org/jira/secure/attachment/12418085/LUCENE-1872-uwe.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-29T09:25:38+0000",
            "content": "Can someone confirm that this is technically accurate (I've added it to the javadoc for NumericField):\n\nYou may add the same field name as a NumericField to the same document more than once. Range querying and filtering will be the logical OR of all values, and sorting will sort according to the first value added. ",
            "author": "Michael McCandless",
            "id": "comment-12749095"
        },
        {
            "date": "2009-08-29T09:37:51+0000",
            "content": "This is correct (first part), you can add a field more than once and it really works (there is a test about that: TestMultiValuedNumericRangeQuery). The results are the same like with a normal range query (so the trie terms do not interfere between each other). See SOLR-1322\n\nI think your sentence is a little bit complicated. It would hit all documents in the range, where at least one of the values of a multi-valued doc is in the range.\n\nAbout the second one: Sorting is not different from other numeric multi-value fields (in contrast to StringIndex where only one value/doc is allowed). The univerter assigns a value to each document. As it overrides values previously assigned to the document when iterating over all terms in the field, the last term would be the one saved in the FieldCache. So you would sort against the largest value per doc (because the smaller values are overridden by the larger ones in the field cache). ",
            "author": "Uwe Schindler",
            "id": "comment-12749097"
        },
        {
            "date": "2009-08-29T09:44:05+0000",
            "content": "About the second one: Sorting is not different from other numeric multi-value fields (in contrast to StringIndex where only one value/doc is allowed). The univerter assigns a value to each document. As it overrides values previously assigned to the document when iterating over all terms in the field, the last term would be the one saved in the FieldCache. So you would sort against the largest value per doc (because the smaller values are overridden by the larger ones in the field cache).\n\nAhh right.\n\nI'm confused on why it's the \"largest\" value?  EG if I add 4, 17, 10 as a NumericField \"x\" on my doc, when I then try to sort, wouldn't 10 \"win\" since it was added last to the document? ",
            "author": "Michael McCandless",
            "id": "comment-12749100"
        },
        {
            "date": "2009-08-29T09:49:31+0000",
            "content": "I'm confused on why it's the \"largest\" value? EG if I add 4, 17, 10 as a NumericField \"x\" on my doc, when I then try to sort, wouldn't 10 \"win\" since it was added last to the document?\n\nBecause of the uninverter. It iterates over all terms, starting from the lowest one in the field. When he comes to term 4, it would add it to the field cache at the document's position. The same with 10 and then 17. Because the TermEnum lists 17 at last, it would win:\n\n\nlong[] retArray = null;\nTermDocs termDocs = reader.termDocs();\nTermEnum termEnum = reader.terms (new Term(field));\ntry {\n  do {\n    Term term = termEnum.term();\n    if (term==null || term.field() != field) break;\n    long termval = parser.parseLong(term.text());\n    if (retArray == null) // late init\n      retArray = new long[reader.maxDoc()];\n    termDocs.seek (termEnum);\n    while (termDocs.next()) {\n      retArray[termDocs.doc()] = termval;\n    }\n  } while (termEnum.next());\n} catch (StopFillCacheException stop) {\n} finally {\n  termDocs.close();\n  termEnum.close();\n}\nif (retArray == null) // no values\n  retArray = new long[reader.maxDoc()];\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12749102"
        },
        {
            "date": "2009-08-29T10:57:58+0000",
            "content": "Because of the uninverter. \n\nAhh right!\n\nI think it's best to document that the effect of sorting is undefined/not guaranteed, but filtering/searching by range is defined. ",
            "author": "Michael McCandless",
            "id": "comment-12749106"
        },
        {
            "date": "2009-08-29T11:12:15+0000",
            "content": "Thank you at all for looking after the documentation! A native speaker is always better than my \"frankish\" English (as my colleague call it).  ",
            "author": "Uwe Schindler",
            "id": "comment-12749107"
        },
        {
            "date": "2009-08-29T12:01:26+0000",
            "content": "Thank you at all for looking after the documentation! A native speaker is always better than my \"frankish\" English (as my colleague call it).\n\nNo problem!  This is how open source works   It's great. ",
            "author": "Michael McCandless",
            "id": "comment-12749111"
        },
        {
            "date": "2009-08-29T12:02:10+0000",
            "content": "Only javadoc fixes, mostly for Numeric* but also some small fixes to a few other classes. ",
            "author": "Michael McCandless",
            "id": "comment-12749112"
        },
        {
            "date": "2009-08-29T12:17:26+0000",
            "content": "Will we mark it as experimental or not? In some classes you remove the experimental warning, in others not. I will review it more detailed later!\n\nBy the way, I also reviewd the LIA chapter and have also seen the reference to DateTools (will send you my updates soon). ate to a String with a special date resolution and then convertin back to numeric is somehow ineffective. When indexing only hour resolution, I would take Date.getTime() / 3600L / 1000L. ",
            "author": "Uwe Schindler",
            "id": "comment-12749113"
        },
        {
            "date": "2009-08-29T12:25:03+0000",
            "content": "Maybe you could copy some of your explanations also to NumericTokenStream, e.g. the example. In the original, both classes had similar introduction texts. ",
            "author": "Uwe Schindler",
            "id": "comment-12749114"
        },
        {
            "date": "2009-08-29T12:34:39+0000",
            "content": "Will we mark it as experimental or not?\n\nYes, I think we should keep the experimental warning.  I didn't mean to remove any \u2013 I'll make sure they're all still there.\n\nBy the way, I also reviewd the LIA chapter and have also seen the reference to DateTools (will send you my updates soon)\n\nExcellent, thanks!\n\nate to a String with a special date resolution and then convertin back to numeric is somehow ineffective. When indexing only hour resolution, I would take Date.getTime() / 3600L / 1000L.\n\nTrue, and that'll work for DAY as well, but not for MONTH / YEAR resolution.\n\nMaybe you could copy some of your explanations also to NumericTokenStream, e.g. the example. In the original, both classes had similar introduction texts.\n\nOK I'll update NumericTokenStream too. ",
            "author": "Michael McCandless",
            "id": "comment-12749117"
        },
        {
            "date": "2009-08-29T13:13:18+0000",
            "content": "New rev.\n\nAs far as I can tell, I didn't lose any of the experimental warnings \u2013 Uwe where did you see that?\n\nI worked on NumericTokenStream's javadocs too.\n\nFinally, I removed reference to DateTools entirely and suggested either quantizing by dividing getTime()'s returned result, or, using Date's getters (getYear, getMonth, etc.) to construct a numeric value. ",
            "author": "Michael McCandless",
            "id": "comment-12749124"
        },
        {
            "date": "2009-08-29T13:22:42+0000",
            "content": "As far as I can tell, I didn't lose any of the experimental warnings - Uwe where did you see that?\n\nMy fault. I did not see that you moved the warning to the top in NumericRangeQuery.\n\nLooks good. ",
            "author": "Uwe Schindler",
            "id": "comment-12749127"
        },
        {
            "date": "2009-08-29T13:38:28+0000",
            "content": "One small thing (I found this also in the LIA chapter):\n\"Trie\" is the whole \"prefix tree\". So \"trie\" means the whole list of different precision terms for one numeric value. You have this explanation which suggests one trie is one term:\n\n+ * <p>Within lucene, each numeric value is indexed as\n+ * multiple encoded terms representing larger and larger\n+ * pre-defined brackets called <em>trie</em>s.  The step\n+ * size between each successive trie is called the\n+ * <code>precisionStep</code> in this API.  Smaller\n\n\nThere should also be the explanation that the precStep is in \"bits\". ",
            "author": "Uwe Schindler",
            "id": "comment-12749132"
        },
        {
            "date": "2009-08-29T14:14:51+0000",
            "content": "\"Trie\" is the whole \"prefix tree\".\n\nOK \u2013 I tweaked NumericField to fix that.  I'll fix LIA2's manuscript too... thanks! ",
            "author": "Michael McCandless",
            "id": "comment-12749148"
        },
        {
            "date": "2009-08-29T14:15:15+0000",
            "content": "State that precSteps is \"bits\", and trie is the entire data structure. ",
            "author": "Michael McCandless",
            "id": "comment-12749150"
        },
        {
            "date": "2009-08-29T20:30:25+0000",
            "content": "I think this is fine now! Thanks. ",
            "author": "Uwe Schindler",
            "id": "comment-12749179"
        },
        {
            "date": "2009-08-29T20:52:19+0000",
            "content": "OK thanks Uwe! ",
            "author": "Michael McCandless",
            "id": "comment-12749180"
        },
        {
            "date": "2009-08-30T09:16:56+0000",
            "content": "Hi Mike, I made some small improvements in formatting and also added a relation between precisionStep and \"brackets\" which one would not understand (what is the relation between terms bracket and precisionStep). Also the term bracket does not appear anywhere else. So I added, that the larger brackets are simply lower-precision representations of the original value. I also added a link to NumericUtils which get lost, that describes the format (in the advanced section of NumericField).\n\nI committed this, revision: 809284 ",
            "author": "Uwe Schindler",
            "id": "comment-12749236"
        },
        {
            "date": "2009-08-30T09:27:52+0000",
            "content": "The new changes look good \u2013 thanks Uwe! ",
            "author": "Michael McCandless",
            "id": "comment-12749239"
        },
        {
            "date": "2009-08-30T09:36:11+0000",
            "content": "Oh I thought you were still sleeping... Good morning! ",
            "author": "Uwe Schindler",
            "id": "comment-12749240"
        },
        {
            "date": "2009-08-30T11:07:52+0000",
            "content": "Good morning! ",
            "author": "Michael McCandless",
            "id": "comment-12749246"
        },
        {
            "date": "2009-09-14T16:32:53+0000",
            "content": "Some small updates after discussion on java-user. ",
            "author": "Uwe Schindler",
            "id": "comment-12755069"
        },
        {
            "date": "2009-09-14T16:34:44+0000",
            "content": "Some notes about cardinality and precision step. ",
            "author": "Uwe Schindler",
            "id": "comment-12755071"
        },
        {
            "date": "2009-09-14T16:53:44+0000",
            "content": "Looks good Uwe! ",
            "author": "Michael McCandless",
            "id": "comment-12755076"
        },
        {
            "date": "2009-09-15T07:29:02+0000",
            "content": "Committed revision: 815195 ",
            "author": "Uwe Schindler",
            "id": "comment-12755402"
        }
    ]
}