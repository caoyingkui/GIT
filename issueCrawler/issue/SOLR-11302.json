{
    "id": "SOLR-11302",
    "title": "Flexible LTR model which uses DSL for describing the scoring function",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "contrib - LTR"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We implment new LTR model which uses DSL for describing the scoring function. This model is inspired by the implementation of JavascriptCompiler which compiles javascript codes by using ANTLR and ASM. The syntax of our DSL is based on Java and FunctionQuery, and we can describe various models freely by using the DSL. Please see ltr/dsl/package-info.java for more details.\n\nThe configuration of our model looks like belows:\n\n\n{\n  \"class\":\"org.apache.solr.ltr.model.DSLModel\",\n  \"name\":\"dslmodel\",\n  \"features\":[\n    {\"name\":\"popularity\"},\n    {\"name\":\"normHits\"},\n    {\"name\":\"isTrendy\"}\n  ],\n  \"params\":{\n    \"dsl\": \"(0.2 * popularity / 10 + 0.3 * normHits) * if(isTrendy==1, 2.0, 1.0)\"\n  }\n}\n\n\n\nThis approach is similar to re-ranking with FunctionQuery, except that our model compiles the DSL into bytecodes on ahead and can calculate scores faster. In practice, the performance of the model is depended on the structure of formula. For example, if we convert existing models (i.e., LinearModel and MultipleAdditiveTreesModel) to DSLs and compare the performance (with large models), our model is 4.5x slower than LinearModel but 1.5x faster than MultipleAdditiveTreesModel.",
    "attachments": {
        "SOLR-11302_master.patch": "https://issues.apache.org/jira/secure/attachment/12884838/SOLR-11302_master.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-09-01T00:31:34+0000",
            "content": "adjust javadocs ",
            "author": "Yuki Yano",
            "id": "comment-16149839"
        }
    ]
}