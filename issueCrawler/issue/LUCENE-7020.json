{
    "id": "LUCENE-7020",
    "title": "TieredMergePolicy - cascade maxMergeAtOnce setting to maxMergeAtOnceExplicit",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "5.4.1",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "SOLR-8621 covers improvements in configuring a merge policy in Solr.\n\nDiscussions on that issue brought up the fact that if large values are configured for maxMergeAtOnce and segmentsPerTier, but maxMergeAtOnceExplicit is not changed, then doing a forceMerge is likely to not work as expected.\n\nWhen I first configured maxMergeAtOnce and segmentsPerTier to 35 in Solr, I saw an optimize (forceMerge) fully rewrite most of the index twice in order to achieve a single segment, because there were approximately 80 segments in the index before the optimize, and maxMergeAtOnceExplicit defaults to 30.  On advice given via the solr-user mailing list, I configured maxMergeAtOnceExplicit to 105 and have not had that problem since.\n\nI propose that setting maxMergeAtOnce should also set maxMergeAtOnceExplicit to three times the new value \u2013 unless the setMaxMergeAtOnceExplicit method has been invoked, indicating that the user wishes to set that value themselves.",
    "attachments": {
        "LUCENE-7020.patch": "https://issues.apache.org/jira/secure/attachment/12787222/LUCENE-7020.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15140406",
            "author": "Shawn Heisey",
            "date": "2016-02-10T06:42:04+0000",
            "content": "A further idea \u2013 when setMaxMergeAtOnce is used, also cascade the same value to segmentsPerTier, unless that value has already been set. "
        },
        {
            "id": "comment-15140407",
            "author": "Shawn Heisey",
            "date": "2016-02-10T06:43:26+0000",
            "content": "Attaching patch implementing the automatic setting of maxMergeAtOnceExplicit to three times the value used in the setMaxMergeAtOnce method. "
        },
        {
            "id": "comment-15140510",
            "author": "Michael McCandless",
            "date": "2016-02-10T08:48:33+0000",
            "content": "I'm nervous about this change: three times the maxMergeAtOnce value is dangerous since this implies opening 3X the number of file descriptors on force merge, spreading the OS's readahead efforts by 1/3rd, etc.\n\nAlso the new boolean explicitValueManuallySet is sort of awkward ... how do I unset it once I've set it?  It's spooky to have such unexpected state/behavior what at first blush looks like an ordinary setter.\n\nI'd rather keep these two settings clearly separated. "
        },
        {
            "id": "comment-15140689",
            "author": "Christine Poerschke",
            "date": "2016-02-10T12:05:59+0000",
            "content": "... keep these two settings clearly separated.\n\nJust wondering if there is a 'recommended' ratio between the two, and assuming there is a recommended ratio, then could it be surfaced somehow when users choose to configure an 'unusual' ratio?\n\nOr in other words, the user still gets what they configure but if say the maxMergeAtOnceExplicit is unusually low relative to maxMergeAtOnce then some warning would be logged? Having said that, currently TieredMergePolicy logs nothing and if it did then a warning would be logged every time a new index writer/merge policy is created, which would be too much maybe. "
        },
        {
            "id": "comment-15140762",
            "author": "Shai Erera",
            "date": "2016-02-10T13:32:06+0000",
            "content": "I don't see how maxMergeAtOnce and maxMergeAtOnceExplicit are related, and why there should be any ratio defined between the two. The former specifies how many segments to merge at once during regular merges, and the latter specifies the same for forceMerge. Why should they be dependent on each other?\n\nI agree with Michael McCandless that setting any of them too high is risky. If they user explicitly sets that, that's fine. But if the user sets one of them, blindly changing the other seems like a surprising effect to me, which could have negative impact on the performance of the system.\n\nThe reason why the 'explicit' setting is higher by default than the non-explicit one is I believe cause in regular merges, you don't want to consume too many resources, cause there are other operations (indexing, search) that happen in parallel. But when you explicitly call forceMerge, and assuming you know what you're doing and its impact on the server, you do that at quiet hours. I wouldn't use the defaults to come up w/ any global recommended settings for the ratio between these two. "
        },
        {
            "id": "comment-15140810",
            "author": "Shawn Heisey",
            "date": "2016-02-10T14:07:02+0000",
            "content": "None of the easy to find examples I've seen (at least in the Solr world) for configuring TMP include a setting for the explicit value ... but not setting this can make an optimize (forceMerge) take twice as long as it should.  I think users who have very large indexes are more likely to choose larger values for TMP (so merging is less frequent), and those are the users who will be hit hardest if they do not also increase the explicit value.\n\nMaybe this is a documentation problem, rather than a technical problem.  I still like my idea, but it's opposed, so I can let it drop. "
        },
        {
            "id": "comment-15140902",
            "author": "Shai Erera",
            "date": "2016-02-10T14:47:05+0000",
            "content": "I think users who have very large indexes are more likely to choose larger values for TMP\n\nBut that's wrong. The number that you set this too is not linearly-related to the number of segments in the index. If for instance you have an index a/ 1000 segments, you wouldn't want to run a merge with maxMergeAtOnce=500 .. not sure you'll even have that many resources.\n\nIMO, the only relation between the two settings is that neither of them should be set so high. I'd even say that if you consider setting maxMergeAtOnce to 30, do the same for *Explicit. That is, when you set a too high value for regular merges, set the same value for explicit merges. Unless, you benchmarked your system that found out that merging 100 segments together is (a) possible and (b) really improves perf speed of the merge. "
        },
        {
            "id": "comment-15141049",
            "author": "Shawn Heisey",
            "date": "2016-02-10T16:00:49+0000",
            "content": "I have no benchmark data, only personal experience, which was a number of years ago:\n\nWith the two main settings for TMP at 35 (and no explicit setting), I saw the total number of segments during and after a full reindex hovering between 70 and 100.  An optimize on an index like this turned out to be a two phase process \u2013 creating a handful of very large segments and a few tiny segments, then a second pass where those segments were merged down to a single segment.  After bumping maxMergeAtOnceExplicit to 105, an optimize completed in half the time and only did a single merge. "
        },
        {
            "id": "comment-15141065",
            "author": "Shai Erera",
            "date": "2016-02-10T16:07:48+0000",
            "content": "Sure, that's expected behavior and is noted as cascaded merges. The reason for these two settings is to better control system resources. And again, if you had a 150-segments index, would you change the setting to 150? I think that if you run forceMerge(1), you should expect few rounds of merges. Unless you feel comfortable with merging 150 segments at once.\n\nBut, I don't think this is a global setting and relation that we should set between these two settings. "
        },
        {
            "id": "comment-15141072",
            "author": "Shawn Heisey",
            "date": "2016-02-10T16:14:37+0000",
            "content": "On the issue of file descriptors ... does Lucene open segment files a second time for a merge?  The files should already be opened so that queries will work.  I would hope there would not be any additional file descriptors required beyond the files for the new segment that is being built. "
        },
        {
            "id": "comment-15144672",
            "author": "Michael McCandless",
            "date": "2016-02-12T15:03:39+0000",
            "content": "I would hope there would not be any additional file descriptors required beyond the files for the new segment that is being built.\n\nIndexWriter uses the same near-real-time readers for merging, so no further file descriptors should be opened, except for the segment being written. "
        }
    ]
}