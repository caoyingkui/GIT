{
    "id": "LUCENE-1121",
    "title": "Use nio.transferTo when copying large blocks of bytes",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "When building a CFS file, and also when merging stored fields (and\nterm vectors, with LUCENE-1120), we copy large blocks of bytes at\nonce.\n\nWe currently do this with an intermediate buffer.\n\nBut, nio.transferTo should be somewhat faster on OS's that offer low\nlevel IO APIs for moving blocks of bytes between files.",
    "attachments": {
        "LUCENE-1121.patch": "https://issues.apache.org/jira/secure/attachment/12372637/LUCENE-1121.patch",
        "testIO.java": "https://issues.apache.org/jira/secure/attachment/12373625/testIO.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-01-07T16:54:54+0000",
            "content": "Attached patch.  All tests pass.\n\nWe shouldn't push this into 2.3.\n\nI still need to test across more platforms and see what performance\nimpact is. ",
            "author": "Michael McCandless",
            "id": "comment-12556621"
        },
        {
            "date": "2008-01-20T17:15:36+0000",
            "content": "Attached patch.  All tests pass ... but, I don't think we should\ncommit this.\n\nI ran performance tests across several platforms.  All times are best\nof 3 runs, indexing first 200K docs of Wikipedia.  I used\nSerialMergeScheduler for these tests so I could more easily measure\nthe impact on merging as well:\n\n  Linux (2.6.22), ReiserFS on RAID5 array: 528.1 sec vs 537.0 sec ( 1.7% faster)\n  Mac OS X 10.4 on RAID0 array:            402.6 sec vs 405.0 sec ( 0.6% faster)\n  Windows Server 2003 R64 on RAID0 array:  472.3 sec vs 752.6 sec (59.3% SLOWER)\n\nI was rather stunned by the result on Windows Server 2003; I ran that\ntest twice to be sure.  It's really true.  My only guess is write\ncaching (which is turned on for this drive) is somehow not used when\nusing transferTo.\n\nSo then I made a standalone test that creates a big file (you specify\nthe size X 10 MB), and then copies that big file using transferTo and\nthen using an intermediate 64 KB buffer.  Results below:\n\nOS X 10.4 on external firewire drive: FASTER \n  create 500 MB file... 31689 msec\n  transferTo... 31947 msec\n  create 500 MB file... 31412 msec\n  buffer... 31215 msec\n  SLOWER 2.345%\n\nOS X 10.4 on 4-drive RAID 0 array\n  create 500 MB file... 2409 msec\n  transferTo... 2449 msec\n  create 500 MB file... 2366 msec\n  buffer... 2649 msec\n  FASTER 7.55%\n\nLinux 2.6.22 on single SATA drive, ext3\n  create 500 MB file... 12841 msec\n  transferTo... 12438 msec\n  create 500 MB file... 11219 msec\n  buffer... 12003 msec\n  SLOWER 3.624%\n\nLinux 2.6.22 on 6-drive RAID 5 array, ext3\n  create 500 MB file... 9647 msec\n  transferTo... 9107 msec\n  create 500 MB file... 9092 msec\n  buffer... 10089 msec\n  FASTER 9.733%\n\nWindows Server 2003 64 R2, single NTFS internal SATA drive\n  create 500 MB file... 32485 msec\n  transferTo... 38922 msec\n  create 500 MB file... 33484 msec\n  buffer... 1375 msec\n  SLOWER 2,730.691%\n\nWindows XP Pro SP2, laptop hard drive\n  create 200 MB file... 20159 msec\n  transferTo... 17515 msec\n  create 200 MB file... 24265 msec\n  buffer... 18397 msec\n  FASTER 4.794%\n\nBottom line is: FileChannel.transferTo is not always a win, and, can\nbe a catastrophic loss.  I think we should stick with tried & true,\nsimple, buffer copying, at least for now... ",
            "author": "Michael McCandless",
            "id": "comment-12560825"
        },
        {
            "date": "2008-01-20T17:16:47+0000",
            "content": "Attaching standalone test (testIO.java).  Just run it like this:\n\n  java testIO 50\n\nand it will create a 500 MB file and test copying it w/ transferTo vs\nintermediate buffer. ",
            "author": "Michael McCandless",
            "id": "comment-12560826"
        },
        {
            "date": "2008-01-23T00:56:13+0000",
            "content": "What JVM were these tests run with? ",
            "author": "Doug Cutting",
            "id": "comment-12561539"
        },
        {
            "date": "2008-01-23T08:35:12+0000",
            "content": "Sun's JVM, 1.4 (on the Windows XP Pro SP2 laptop), Sun's JVM 1.6 (on the Windows Server 2003 64 R2 machine), Sun's JVM 1.5 on Linux and Apple's release of Sun's JVM for the two OS X runs. ",
            "author": "Michael McCandless",
            "id": "comment-12561609"
        },
        {
            "date": "2008-01-23T19:09:39+0000",
            "content": "For Hadoop, we've seen significant performance improvements on Linux in Sun's 1.6 over 1.5.  Clearly, 1.6 didn't help on Windows Server 2003, but it would be good to know if there are any cases where it makes a huge improvement.  If there are, then it could be a useful option. ",
            "author": "Doug Cutting",
            "id": "comment-12561778"
        },
        {
            "date": "2008-01-23T19:35:27+0000",
            "content": "That's interesting ... I'll test Sun's JVM 1.6 on Linux.\n\nMaybe we should commit this, but, leave the default copy method using intermediate buffer?  The patch adds set/getCopyMethod to FSDirectory. ",
            "author": "Michael McCandless",
            "id": "comment-12561789"
        },
        {
            "date": "2008-01-24T00:21:03+0000",
            "content": "Here are some more results from a windows xp and server 2003 machine. This is with java 1.6. \n\n  Windows 2003 R2 - internal sata drive\n\n  D:\\>java Test 50\n  create 500 MB file... 28625 msec\n  transferTo... 17656 msec\n  create 500 MB file... 13390 msec\n  buffer... 8391 msec\n  SLOWER 110.416%\n\n  D:\\>java Test 50\n  create 500 MB file... 14141 msec\n  transferTo... 8765 msec\n  create 500 MB file... 13531 msec\n  buffer... 1531 msec\n  SLOWER 472.502%\n\n  D:\\>java Test 50\n  create 500 MB file... 13578 msec\n  transferTo... 9282 msec\n  create 500 MB file... 13391 msec\n  buffer... 1235 msec\n  SLOWER 651.579%\n\n\n  Windows XP SP2 - laptop drive\n\n  D:\\>java Test 50\n  create 500 MB file... 18737 msec\n  transferTo... 28239 msec\n  create 500 MB file... 19113 msec\n  buffer... 65839 msec\n  FASTER 57.109%\n\n  D:\\>java Test 50\n  create 500 MB file... 21785 msec\n  transferTo... 24801 msec\n  create 500 MB file... 17940 msec\n  buffer... 33615 msec\n  FASTER 26.22%\n\n  D:\\>java Test 50\n  create 500 MB file... 22520 msec\n  transferTo... 24300 msec\n  create 500 MB file... 19644 msec\n  buffer... 34349 msec\n  FASTER 29.256% ",
            "author": "Mark Miller",
            "id": "comment-12561886"
        },
        {
            "date": "2008-01-24T09:09:47+0000",
            "content": "OK I ran Sun JDK 1.6.0_04 on Linux:\n\nLinux 2.6.22, single SATA drive, ext3:\n  create 500 MB file... 13088 msec\n  transferTo... 12796 msec\n  create 500 MB file... 10727 msec\n  buffer... 12291 msec\n  SLOWER 4.109%\n\nLinux 2.6.22, on 6-drive RAID 5 array, reiserfs:\n  create 500 MB file... 11135 msec\n  transferTo... 11068 msec\n  create 500 MB file... 8599 msec\n  buffer... 10708 msec\n  SLOWER 3.362%\n ",
            "author": "Michael McCandless",
            "id": "comment-12561982"
        },
        {
            "date": "2008-04-04T18:13:39+0000",
            "content": "Only savings I would expect from transferTo() would be CPU reduction. Does the benchmark above measure wall clock time or \"cpu time\"? Btw, the windows results are pretty... strange.\n\nHADOOP-3164 shows expected CPU benefit. Still need to do more extensive tests where I max out CPU with and without patch and compare the wall clock time. Initial test just compares cpu reported on /proc/pid/stat with a test that is disk bound. ",
            "author": "Raghu Angadi",
            "id": "comment-12585677"
        },
        {
            "date": "2009-10-08T16:16:18+0000",
            "content": "Isn't this still a nice little optimization for compound copies? When not using Win server, its faster in general, and even when similar, you get the less CPU usage optimization.\n\nAt worst it seems we should enable for that case when detecting non windows? We could even throw in a couple specific Windows versions we know work well - the XP results I got were fantastic, and the ones Mike got were not bad. Prob not necessary, as most deployments will prob be on server, but future versions might be better.\n\nSeems like a little win on 'nix systems anyway, just from the CPU savings. ",
            "author": "Mark Miller",
            "id": "comment-12763544"
        },
        {
            "date": "2009-10-08T17:15:52+0000",
            "content": "NM - it appears that when you chunk, you lose the CPU win - and when you don't chunk, you get the win, but it performs nasty after other java io operations. Bummer. ",
            "author": "Mark Miller",
            "id": "comment-12763573"
        }
    ]
}