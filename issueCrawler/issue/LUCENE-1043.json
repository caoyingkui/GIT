{
    "id": "LUCENE-1043",
    "title": "Speedup merging of stored fields when field mapping \"matches\"",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.3"
        ],
        "affect_versions": "2.2",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Robert Engels suggested the following idea, here:\n\n  http://www.gossamer-threads.com/lists/lucene/java-dev/54217\n\nWhen merging in the stored fields from a segment, if the field name ->\nnumber mapping is identical then we can simply bulk copy the entire\nentry for the document rather than re-interpreting and then re-writing\nthe actual stored fields.\n\nI've pulled the code from the above thread and got it working on the\ncurrent trunk.",
    "attachments": {
        "LUCENE-1043.patch": "https://issues.apache.org/jira/secure/attachment/12368892/LUCENE-1043.patch",
        "LUCENE-1043.take2.patch": "https://issues.apache.org/jira/secure/attachment/12368987/LUCENE-1043.take2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-11-02T18:30:02+0000",
            "content": "Initial patch.  All tests pass. ",
            "author": "Michael McCandless",
            "id": "comment-12539660"
        },
        {
            "date": "2007-11-02T19:13:56+0000",
            "content": "You're fast!\n\nFuture optimizations could include bulk copying multiple documents at once (all ranges between deleted docs).  The speedup would probably be greatest for small docs, but I'm not sure if it would be worth it or not.\n\nMore controversial:  maybe even expand the number of docs that can be bulk copied by  not bothering removing deleted docs if it's some very small number (unless it's an optimize).  This is probably not worth it. ",
            "author": "Yonik Seeley",
            "id": "comment-12539675"
        },
        {
            "date": "2007-11-02T19:39:46+0000",
            "content": "\nFuture optimizations could include bulk copying multiple documents at once (all ranges between deleted docs). The speedup would probably be greatest for small docs, but I'm not sure if it would be worth it or not.\n\nOoh, I like that idea!  I'll explore that.\n\n\nMore controversial: maybe even expand the number of docs that can be bulk copied by not bothering removing deleted docs if it's some very small number (unless it's an optimize). This is probably not worth it.\n\nThat's a neat idea too but I agree likely not worth it.\n\nAnother idea: we can almost just concatenate the posting lists\n(frq/prx) for each term, because they are \"delta coded\" (we write the\ndelta between docIDs).  The only catch is you have to \"stitch up\" the\nboundary: you have to read the docID from the start of the next\nsegment, write the delta-code, then you can copy the remaining bytes.\nI think this could be a big win especially when merging larger\nsegments. ",
            "author": "Michael McCandless",
            "id": "comment-12539682"
        },
        {
            "date": "2007-11-02T19:48:47+0000",
            "content": "You have to be careful with the bulk copy because you will need to also copy the offsets from the source, sticking them up, and then write them in bulk.\n\nWith large enough input and output buffers I am not sure the bulk copy will make that large a difference. ",
            "author": "robert engels",
            "id": "comment-12539686"
        },
        {
            "date": "2007-11-02T19:57:07+0000",
            "content": "re bulk copying: Ideally, read a group of docs into a buffer big enough that it triggers the IndexInput to read directly into it, and write directly from it.  The field index needs to be done int by int, but it's just adding a constant to all of them and probably isn't worth optimizing (trying to not fully encode/decode).... just loop over them ahead of time, fixing them up.  The total size of the stored fields to write is simply the difference between the indicies (need to slightly special case the end of the index of course...)\n\nAnother idea: we can almost just concatenate the posting lists\n(frq/prx) for each term, because they are \"delta coded\" (we write the\ndelta between docIDs)\n\nNice!  new JIRA issue? ",
            "author": "Yonik Seeley",
            "id": "comment-12539688"
        },
        {
            "date": "2007-11-02T20:38:04+0000",
            "content": "When bulk copying the documents, I think you need to:\n\nread array of long from index (8 * (ndocs+1)) in long[ndocs+1] offsets;\ncalculate length = offset[ndocs]-offset[0];\nread bytes of length from document file\nstartoffset = current output document stream position\nwrite bytes to output document\nmodify offset[] adding startoffset-offset[0] to each entry\nwrite offset[] in bulk to index output ",
            "author": "robert engels",
            "id": "comment-12539696"
        },
        {
            "date": "2007-11-03T09:36:41+0000",
            "content": "\nNice!  new JIRA issue?\n\nYes, though I need to mull it over some ... I think it would require a\nchange to the index file format to have each term record the last\ndocID in its posting list, which then increases the size of the\nindex.  Maybe we could do it only when the posting list is long.  So\nthere are tricky tradeoffs.... ",
            "author": "Michael McCandless",
            "id": "comment-12539907"
        },
        {
            "date": "2007-11-05T18:01:55+0000",
            "content": "Attached new rev of the patch, using the bulk copy approach instead.\n\nI changed the approach slightly: I allocate an array to store the\nlength (in bytes) of each docs's stored fields, but then I do a low\nlevel byte copy (added IndexOutput.copyBytes) from the FieldsReader's\nfieldsStream to the FieldWriter's fieldsStream.\n\nAll tests pass.  I plan to commit in a day or two. ",
            "author": "Michael McCandless",
            "id": "comment-12540228"
        },
        {
            "date": "2007-11-08T11:08:10+0000",
            "content": "I just committed this.  Thanks Robert! ",
            "author": "Michael McCandless",
            "id": "comment-12541024"
        }
    ]
}