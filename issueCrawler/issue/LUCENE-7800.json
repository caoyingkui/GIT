{
    "id": "LUCENE-7800",
    "title": "Remove code that potentially rethrows checked exceptions from methods that don't declare them (\"sneaky throw\" hack)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Task",
        "components": [],
        "fix_versions": [
            "6.7",
            "7.0"
        ]
    },
    "description": "For a long time I considered the \"sneaky\" throw hack to be a nice way of coding around some of Java's limitations (especially with invoking methods via reflection or method handles), but with time I started to see how it can be potentially dangerous and is nearly always confusing. If you have a Java method and its signature doesn't indicate the possibility of a checked exception you, as a programmer, simply don't expect it to happen. Never. So, for example, you could write:\n\ntry {\n luceneApi();\n} catch (RuntimeException | Error e) {\n  // Handle unchecked exceptions here.\n}\n\n\nand consider the code above to be absolutely bullet-proof in terms of handling exceptions. Unfortunately with sneaky throws anywhere in the \"luceneApi\" this is no longer the case \u2013 you can receive a checked exception that will simply fall through and hit some code frame above.\n\nSo I suggest we remove sneaky throw from the core entirely. It only exists in two places \u2013 private methods inside Snowball programs invoked via method handles (these don't even declare checked exceptions so I assume they can't occur) and AttributeFactory \u2013 here there is a real possibility somebody could declare an attribute class's constructor that does throw an unchecked exception. In that case I think it is more reasonable to wrap it in a RuntimeException than rethrow it as original.\n\nAlternatively, we can modify the signature of createAttributeInstance and getStaticImplementation to declare some kind of checked exception (either a wrapper or even a Throwable), but I see little reason for it and it'd change the API.",
    "attachments": {
        "LUCENE-7800.patch": "https://issues.apache.org/jira/secure/attachment/12864650/LUCENE-7800.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15980096",
            "date": "2017-04-22T19:30:25+0000",
            "content": "Patch removing sneaky throw from attribute factory and snowball programs. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15980141",
            "date": "2017-04-22T21:38:38+0000",
            "content": "What's the reason to remove it in Attributefactory? The MethodHandles called there are known to not throw unexpected Exceptions!\nThe problem is that MethodHandles declare throws Throwable, because the Exceptions are unknown to compiler. The code knows, so it should preserve the original ones.\n\n-1 to remove it without a reason. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15980142",
            "date": "2017-04-22T21:43:09+0000",
            "content": "The IMHO correct fix is to disallow checked Exceptions when doing the reflection on the ctor in the Attributefactory.\n\nSnowballProgram is special. Please also patch the converter, as the generated code is modified by regexes in the Ant script. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15980149",
            "date": "2017-04-22T22:02:58+0000",
            "content": "Sorry, SnowballProgram is not affected by generated code. The rethrow used there is uncritical, because the code called cannot throw any checked Exceptions.\n\nThe rethrow hack with MethodHandles is not against the type system. By using MethodHandles you already left all strong typing behind... ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15980156",
            "date": "2017-04-22T22:34:20+0000",
            "content": "If you want to change the Snowball code, use throw new AssertionError(\"Snowball programs don't throw checked Exceptions\", e) instead of RuntimeException. Then the comment is also obsolete. RuntimeException is too general - its usage in \"throw new\" should be on forbiddenapis  ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15980321",
            "date": "2017-04-23T08:27:46+0000",
            "content": "The MethodHandles called there are known to not throw unexpected Exceptions!\n\nSee my example in https://issues.apache.org/jira/browse/LUCENE-7796?focusedCommentId=15980320 - there's definitely a way to propagate a checked exception up the caller stack. To me this is surprising and is a low-level hack that really has little motivation. We could replace it with a dedicated (unchecked) exception wrapper, but just letting a checked exception propagate up the stack seems like the wrong way to go. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15988610",
            "date": "2017-04-28T10:32:17+0000",
            "content": "Moving the discussion here from LUCENE-7796. Uwe, I don't think this code is actually any cleaner than the existing sneaky throws:\n\n@FunctionalInterface\npublic interface Unchecked<R,T extends Throwable> {\n  \n  R call() throws T;\n  \n  @SuppressWarnings(\"unchecked\")\n  static <R> R exec(Unchecked<R,?> lambda) {\n    return ((Unchecked<R,RuntimeException>) lambda).call();\n  } \n}\n\n\n\nSure, it's cleaner to call, but the fact that you can cast Unchecked<R,?> to Unchecked<R, RuntimeException> is a fault of the type system/ erasure \u2013 to me it's still  the same argument as for sneaky throw: it catches you by surprise with a potential of getting a checked exception from java code that invokes it and has no type system-safe way of reacting to it. Sure, it's permitted by the JVM, but it's still an abuse of the holes in Java's type system definition.\n\nLet me put it this way: do you think there are benefits of not wrapping the (checked) exception thrown by such code? I can think of one \u2013 you'd get one fewer \"caused by\" in the stack trace, should you dump it somewhere. But other than that nothing comes to my mind. Hell, it's even worse \u2013 hacks like this one completely break the type system's utility. Look at this code that uses the above:\n\n    try {\n      Unchecked.exec(() -> {\n        throw new IOException();\n      });\n    } catch (IOException e) {\n      // bam, doesn't compile.\n    }\n\n\n\nThis catches the IOException propagated directly from exec... but it won't compile because the type system doesn't \"see\" any checked exception thrown from exec. See my point? ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16010414",
            "date": "2017-05-15T12:30:20+0000",
            "content": "I return to this issue to either resolve it or have it vetoed, because otherwise it'll be forgotten forever.\n\nAttached is a patch which removes unchecked-exception throwing hacks from the codebase for reasons I already mentioned. The changes are:\n\n1) SnowballProgram throws an AssertionError should an exception happen in find_among (it shouldn't).\n\n2) AttributeFactory rethrows Error and RuntimeException classes, but wraps checked exceptions in a AttributeInstantiationException that is a subclass of RuntimeException. I made the AttributeInstantiationException class public just in case somebody desperately wanted to instanceof it and get the cause.\n\n3) JavascriptCompiler throws throws a RuntimeException with a cause set to ParseException. The code unwraps such checked parse exceptions in getAntlrParseTree anyway, so this is only an internal change.\n ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16011821",
            "date": "2017-05-16T06:35:21+0000",
            "content": "Precommit (javadoc) and ParseException unwrapping in the compiler pulled up. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16012170",
            "date": "2017-05-16T11:19:27+0000",
            "content": "Looks good. Maybe for cases like the snowball Throwable case UndeclaredThrowableException would be better than wrapping in AssertionError. I think it was designed for this exact purpose... ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16012203",
            "date": "2017-05-16T11:48:21+0000",
            "content": "Very good idea, will use that. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16012204",
            "date": "2017-05-16T11:49:30+0000",
            "content": "In fact, we could even use it for the attribute factory too \u2013 this would save us from creating yet another wrapper exception class and it's in fact taking nothing from the functionality or the behavior. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16013171",
            "date": "2017-05-16T21:56:15+0000",
            "content": "go for it. I am not happy with it in expressions, but IMHO, we should change the code to use another unchecked exception instead of ParseException. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16015851",
            "date": "2017-05-18T14:40:01+0000",
            "content": "Commit 5a50887a4b92f18d8f33e6472cbb9bbdc9631499 in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5a50887 ]\n\nLUCENE-7800: Remove code that potentially rethrows checked exceptions from methods that don't declare them (\"sneaky throw\" hack). ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16015853",
            "date": "2017-05-18T14:40:55+0000",
            "content": "Commit 4c06552a31b383be29b5f137190ba42a188a3670 in lucene-solr's branch refs/heads/branch_6x from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4c06552 ]\n\nLUCENE-7800: Remove code that potentially rethrows checked exceptions from methods that don't declare them (\"sneaky throw\" hack). ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16017342",
            "date": "2017-05-19T12:45:58+0000",
            "content": "Thanks for your perseverance on this Dawid. ",
            "author": "David Smiley"
        }
    ]
}