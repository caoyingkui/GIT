{
    "id": "SOLR-7141",
    "title": "RecoveryStrategy: Raise time that we wait for any updates from the leader before they saw the recovery state to have finished.",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The current wait of 3 seconds is pushing the envelope a bit.",
    "attachments": {
        "SOLR-7141.patch": "https://issues.apache.org/jira/secure/attachment/12700915/SOLR-7141.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-22T17:23:30+0000",
            "author": "Mark Miller",
            "content": "\n        // we wait a bit so that any updates on the leader\n        // that started before they saw recovering state \n        // are sure to have finished\n        try {\n          Thread.sleep(3000);\n        } catch (InterruptedException e) {\n          Thread.currentThread().interrupt();\n        }\n\n ",
            "id": "comment-14332259"
        },
        {
            "date": "2015-02-22T18:10:10+0000",
            "author": "Mark Miller",
            "content": "I guess we should probably go up to like 10 seconds. Longer term, perhaps there is something else we can try that would better deal with a really badly timed long GC or something. ",
            "id": "comment-14332273"
        },
        {
            "date": "2015-02-22T18:12:03+0000",
            "author": "Mark Miller",
            "content": "I'll also make it configurable. ",
            "id": "comment-14332275"
        },
        {
            "date": "2015-03-22T16:04:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1668396 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1668396 ]\n\nSOLR-7141: RecoveryStrategy: Raise time that we wait for any updates from the leader before  they saw the recovery state to have finished. ",
            "id": "comment-14375039"
        },
        {
            "date": "2015-03-24T13:15:26+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1668884 from Mark Miller in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1668884 ]\n\nSOLR-7141: RecoveryStrategy: Raise time that we wait for any updates from the leader before  they saw the recovery state to have finished. ",
            "id": "comment-14377822"
        },
        {
            "date": "2015-04-15T00:30:22+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495272"
        },
        {
            "date": "2015-04-18T15:48:02+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Hi Mark, can you please explain why this wait is necessary? ",
            "id": "comment-14501426"
        },
        {
            "date": "2015-04-18T16:20:00+0000",
            "author": "Mark Miller",
            "content": "Its as the comment says:\n\n\n        // we wait a bit so that any updates on the leader\n        // that started before they saw recovering state \n        // are sure to have finished\n\n\n\nSlow updates based on old state can be wrong. We started this at 2 seconds just kind of out of thin air. I had to raise it because I saw it wasn't enough in some hdfs chaosmonkey test fails and so we need to make sure we have plenty of padding for real world hardware.\n\nIt might be nice to do something more concrete, but it's very tricky to solve nicely. ",
            "id": "comment-14501446"
        },
        {
            "date": "2015-04-18T17:38:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Mark. What do you mean by \"wrong\" in this context? If the leader saw this node's state as down then it wouldn't send any updates our way; if it saw this node's state as recovering or active then it would send the exact same request. What kinds of requests or scenarios are we trying to prevent by waiting? ",
            "id": "comment-14501487"
        },
        {
            "date": "2015-04-18T23:08:27+0000",
            "author": "Yonik Seeley",
            "content": "It's tricky \n\nFrom memory, here's how it's supposed to work:\n1. replica tells leader it want's to recover\n2. leader starts forwarding updates to replica (which the replica buffers since it's in recovery)\n3. leader executes a hard commit (so replica can replicate the current index)\n4. replica starts replicating index from the last leader commit point\n\nNote that the ordering of #2 and #3 is very important.  If we did #3 first and then #2 after, some updates won't make it into the commit and also won't be forwarded to the replica (and that leads to data loss).\n\nNow the issue: even though we do #2 first and #3 after... it's possible to have an unfortunately scheduled update in a different thread that started before we did #2, and doesn't complete until after #3, so that update was not forwarded, and it's also not in the replicated index.  The sleep (which should be between steps #2 and #3) is to try and give time for this update to complete and make it into the index.\n\nIt occurs to me that the lucene IndexWriter thread stealing (same issue that caused this: SOLR-6820) could make this much more likely than we would have thought.\n\nOne possible alternative is to block updates for a commit of this type (replication commit).  Any blocked updates would need to see that they need to be forwarded to the replica too (once they are unblocked) - I don't know if the code is currently written that way. ",
            "id": "comment-14501622"
        },
        {
            "date": "2015-04-19T18:35:26+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks for explaining in detail, Yonik. This is indeed tricky. Shard splitting can suffer from the same problem. I'll open an issue to track this. ",
            "id": "comment-14502048"
        },
        {
            "date": "2015-04-19T18:53:06+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I opened SOLR-7427 ",
            "id": "comment-14502056"
        },
        {
            "date": "2017-04-25T21:17:46+0000",
            "author": "Mihaly Toth",
            "content": "Until SOLR-7427 gets fixed solr.cloud.wait-for-updates-with-stale-state-pause could be set shorter in tests. I have seen failures caused by this long delay appearing couple of times. ",
            "id": "comment-15983639"
        },
        {
            "date": "2017-04-26T09:14:49+0000",
            "author": "Mano Kovacs",
            "content": "Mihaly Toth, I created SOLR-10570 about your proposal. ",
            "id": "comment-15984423"
        },
        {
            "date": "2017-04-26T12:10:42+0000",
            "author": "Mano Kovacs",
            "content": "Sorry, the 7 seconds was already lowered in SOLR-9848. ",
            "id": "comment-15984679"
        },
        {
            "date": "2017-04-26T15:28:30+0000",
            "author": "Mark Miller",
            "content": "Mihaly Toth, on lowering that for tests see SOLR-9849 Use a very low value for solr.cloud.wait-for-updates-with-stale-state-pause in tests. ",
            "id": "comment-15985005"
        }
    ]
}