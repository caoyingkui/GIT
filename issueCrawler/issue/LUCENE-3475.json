{
    "id": "LUCENE-3475",
    "title": "ShingleFilter should handle positionIncrement of zero, e.g. synonyms",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Patch Available"
    },
    "description": "ShingleFilter is creating shingles for a single term that has been expanded by synonyms when it shouldn't. The position increment is 0.\n\nAs an example, I have an Analyzer with a SynonymFilter followed by a ShingleFilter. Assuming car and auto are synonyms, the SynonymFilter produces two tokens and position 1: car, auto. The ShingleFilter is then producing 3 tokens, when there should only be two: car, car auto, auto. This behavior seems incorrect.",
    "attachments": {
        "LUCENE-3475.patch": "https://issues.apache.org/jira/secure/attachment/12909801/LUCENE-3475.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-28T20:45:49+0000",
            "content": "From the ShingleFilter javadocs: \"This filter handles position increments > 1 by inserting filler tokens (tokens with termtext \"_\"). It does not handle a position increment of 0.\" ",
            "author": "Steve Rowe",
            "id": "comment-13116782"
        },
        {
            "date": "2011-09-28T20:48:49+0000",
            "content": "See ShingleMatrixFilter for a shingle implementation that appears to support synonyms.  But it's deprecated and slated for removal in Lucene 4.0.  So caveat emptor. ",
            "author": "Steve Rowe",
            "id": "comment-13116786"
        },
        {
            "date": "2011-09-28T21:38:59+0000",
            "content": "\"It does not handle a position increment of 0.\"\n\n...I had interpreted that to mean it would just 'ignore' or not try to do anything with tokens where posIncr=0. I guess that is an incorrect assumption? ",
            "author": "Cameron",
            "id": "comment-13116829"
        },
        {
            "date": "2011-09-28T21:43:36+0000",
            "content": "That sentence was intended to warn users that ShingleFilter behavior was undefined over streams with position increment of zero. ",
            "author": "Steve Rowe",
            "id": "comment-13116833"
        },
        {
            "date": "2012-03-20T14:55:15+0000",
            "content": "I think this is important, now that we have \"graph\" analyzers (like Kuromoji).\n\nSo ShingleFilter should pay attention to posInc as well as posLength... ",
            "author": "Michael McCandless",
            "id": "comment-13233459"
        },
        {
            "date": "2013-05-03T20:58:57+0000",
            "content": "LUCENE-4170 includes an example of what it would look like if ShingleFilter properly handled its input as a graph, i.e. respected posincr=0 and poslen>1. ",
            "author": "Steve Rowe",
            "id": "comment-13648799"
        },
        {
            "date": "2018-01-29T08:38:17+0000",
            "content": "I'm not going to work on this in the short term but I just wrote a test case in case someone else has interest in fixing this issue:\n\n\n  public void testSynonyms1() throws IOException {\n    Token t1 = new Token(\"small\", 0, 5);\n    Token t2 = new Token(\"little\", 0, 5);\n    t2.setPositionIncrement(0);\n    Token t3 = new Token(\"thing\", 6, 11);\n    TokenStream tk = new CannedTokenStream(t1, t2, t3);\n    ShingleFilter f = new ShingleFilter(tk, 2, 2);\n    f.setOutputUnigrams(false);\n    assertTokenStreamContents(f,\n        new String[] { \"small thing\", \"little thing\" },\n        new int[] {0, 0},\n        new int[] {11, 11},\n        new int[] {1, 0});\n  }\n\n  public void testSynonyms2() throws IOException {\n    Token t1 = new Token(\"small\", 0, 5);\n    Token t2 = new Token(\"thing\", 6, 11);\n    Token t3 = new Token(\"object\", 6, 11);\n    t3.setPositionIncrement(0);\n    TokenStream tk = new CannedTokenStream(t1, t2, t3);\n    ShingleFilter f = new ShingleFilter(tk, 2, 2);\n    f.setOutputUnigrams(false);\n    assertTokenStreamContents(f,\n        new String[] { \"small thing\", \"small object\" },\n        new int[] {0, 0},\n        new int[] {11, 11},\n        new int[] {1, 0});\n  }\n\n ",
            "author": "Adrien Grand",
            "id": "comment-16343073"
        },
        {
            "date": "2018-01-29T23:29:00+0000",
            "content": "Adrien Grand Hi Adrien!\u00a0 I wonder what would be the best approach to\u00a0handle positionIncrement=0?\n\nI was thinking that in\u00a0 ShingleFilter:getNextToken we can do something like this:\n\nif (input.incrementToken()) {\n   while (posIncrAtt.getPositionIncrement()  == 0) { // we may have multiple synonyms\n      if (input.incrementToken()) { // go to next token \n           ....\n          // store synonyms tokens and following tokens somewhere and create a new input TokenStream from them? \n\n\nI guess I am wondering if we have any other\u00a0reference\u00a0code that recreates a tokenStream from synonym tokens?\n \u00a0 ",
            "author": "Mayya Sharipova",
            "id": "comment-16344192"
        },
        {
            "date": "2018-01-31T13:23:53+0000",
            "content": "Mayya Sharipova I think we need to do something like this indeed. We might also need getNextToken I don't think you should try to recreate a token stream from the synonyms, however it is true that you need to record their state somewhere. There are multiple ways to do this, for instance ShingleFilter uses cloneAttributes, but there is also captureState}}/restoreState. You can look at EdgeNGramTokenFilter for an example of how to use them.\n\n\u00a0\n\nI haven't looked deeply at how the token filter currently works, but I wouldn't be surprised that significant refactorings are required to make things work, so feel free to reorganize the code if it makes this problem any easier to fix! ",
            "author": "Adrien Grand",
            "id": "comment-16346807"
        },
        {
            "date": "2018-01-31T16:10:34+0000",
            "content": "Adrien Grand thank so much for suggestions. \n\nAlan Woodward is going to work on this issue. I will study his solution. ",
            "author": "Mayya Sharipova",
            "id": "comment-16347069"
        },
        {
            "date": "2018-02-08T13:40:27+0000",
            "content": "Here's a patch with a try at implementing a ShingleGraphFilter.\u00a0 Still requires javadocs, more testing, randomized testing, adding into RandomChains, etc, but it would be good to get some more eyes on it.\n\nIt has a slightly different output to ShingleFilter on non-graph tokenstreams, in that it emits shingles longest first, due to the way I went about it.\u00a0 It might not be too difficult to change that though.\n\nTo support backtracking in the TokenStream, the underlying stream is read (lazily) into a linked list, with Token objects reused once the filter has moved past them.\u00a0\u00a0The current shingle is just an array of references into the list.\u00a0 Shingles are built using the nextTokenInGraph(Token) method, which will use a token's length attribute to move through the linked list and find its successor.\u00a0 If there are multiple tokens sharing a position, then incrementToken() will iterate through each one, rebuilding the graph each time. ",
            "author": "Alan Woodward",
            "id": "comment-16356949"
        },
        {
            "date": "2018-02-08T18:37:08+0000",
            "content": "Exciting! I'll need some time to digest this new implementation but I already have some questions/remarks \n\n\tIs my understanding correct that this filter can consume graphs but won't generate a graph unless the input is a graph too (ie. it won't require FlattenGraphTokenFilter at index time unless the input is a graph)?\n\tAt first sight, this impl looks compatible with the existing ShingleFilter, or do I miss something? Should we just replace it?\n\tCan the tests create token stream graphs explicitly with CannedTokenStream instead of implicitly with SynonymGraphTokenStream?\n\tI'd be curious to see tests on more complex token stream graphs eg. like those used in TestFlattenGraphFilter.testWTF1/testWTF2, does your impl support such complex graphs?\n\n ",
            "author": "Adrien Grand",
            "id": "comment-16357375"
        },
        {
            "date": "2018-02-09T10:23:44+0000",
            "content": "but won't generate a graph unless the input is a graph too\nCorrect\nShould we just replace it?\nI'll need to rejig it slightly so that it produces identical output, but I think that's worth doing.\u00a0 And a drop-in replacement would be easier for upgrades as well.\n\nI'll add some more tests, mixing up CannedTokenStream and real analyzer outputs. ",
            "author": "Alan Woodward",
            "id": "comment-16358207"
        },
        {
            "date": "2018-03-12T12:14:59+0000",
            "content": "Updated patch:\n\n\ttrailing terms that would produce shingles < minShingleLength are emitted as single tokens\n\tall shingles have positionLength=1, which fixes issues with QueryBuilder\n\tadded tests using CannedTokenStream from FlattenGraphFilter\n\n\n\nSome of this behaviour is different to the standard ShingleFilter, so I think we should probably keep them separate (while deprecating the old version and removing in master) ",
            "author": "Alan Woodward",
            "id": "comment-16395140"
        },
        {
            "date": "2018-03-13T02:22:04+0000",
            "content": "Some of this behaviour is different to the standard ShingleFilter, so I think we should probably keep them separate (while deprecating the old version and removing in master)\n\nWouldn't this be a Version switch situation instead?  Why bother the users with a new name instead? ",
            "author": "David Smiley",
            "id": "comment-16396416"
        }
    ]
}