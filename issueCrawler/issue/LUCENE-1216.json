{
    "id": "LUCENE-1216",
    "title": "CharDelimiterTokenizer",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "WhitespaceTokenizer is very useful for space separated languages, but my Japanese text is not always separated by a space. So, I created an alternative Tokenizer that we can specify the delimiter. The file submitted will be an improvement of the current WhitespaceTokenizer.\n\nI tried to extend it from CharTokenizer, but CharTokenizer has a limitation that a token can't be longer than 255 chars.",
    "attachments": {
        "TestCharDelimiterTokenizer.java": "https://issues.apache.org/jira/secure/attachment/12377750/TestCharDelimiterTokenizer.java",
        "CharDelimiterTokenizer.java": "https://issues.apache.org/jira/secure/attachment/12377582/CharDelimiterTokenizer.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-03-11T06:12:15+0000",
            "content": "for example, I'd like to instanciate CharDelimiterTokenizer like this:\n\nCharDelimiterTokenizer tkz=new CharDelimiterTokenizer(input);\ntkz.addDelimiter(\"\\u3002\"); ",
            "author": "Hiroaki Kawai",
            "id": "comment-12577316"
        },
        {
            "date": "2008-03-12T21:33:33+0000",
            "content": "This looks useful.\nCould you please write a simple unit test and put ASL on top of all .java files, and change the formating to match the rest of Lucene source code (two spaces, no tabs...)?\n\nThanks! ",
            "author": "Otis Gospodnetic",
            "id": "comment-12578023"
        },
        {
            "date": "2008-03-13T04:54:18+0000",
            "content": "Update CharDelimiterTokenizer.java\n1. replaced TAB -> 2 spaces\n2. added JavaDoc comments ",
            "author": "Hiroaki Kawai",
            "id": "comment-12578146"
        },
        {
            "date": "2008-03-13T04:56:38+0000",
            "content": "Add test file (TestCharDelimiterTokenizer.java) for CharDelimiterTokenizer.java ",
            "author": "Hiroaki Kawai",
            "id": "comment-12578147"
        },
        {
            "date": "2008-05-14T05:52:00+0000",
            "content": "Thanks for the updates and sorry for the 2 months wait.  I had another look at this.  Why does whitespace character still get special treatment - that is, why is there this method:\n\n  /**\n\n\tSets white space char as deimiter\n   *\n\tBy default, whitespaces are not delimters.\n\t@param flag True to switch whitespace as delimiter\n   */\n  public void setWhitespaceDelimiter(boolean flag)\n{\n    this.whitespaceDelimiter=flag;\n  }\n\n\n\n\nIf one wants to use space as a delimiter, wouldn't one just call addDelimiter(' ') instead of using setWhitespaceDelimiter(true)?\n\nYour unit test is nice and clean, but have a look at the javadoc fo JUnit, especially startUp() and tearDown() methods.  Tour test* methods have several lines of code that repeats in each test* method.  You could easily move some of that to startUp() (called before each test) and tearDown().\n\nWould you like to make this change before I commit?\n\nThanks! ",
            "author": "Otis Gospodnetic",
            "id": "comment-12596636"
        },
        {
            "date": "2008-05-15T07:33:08+0000",
            "content": "The reason of setWhitespaceDelimiter():\nOf cource we can call addDelimiter(' '), but it is usually insufficient.\n\nWhitespace chars we think, is described as:\n\n\tIt is a Unicode space character (SPACE_SEPARATOR, LINE_SEPARATOR, or PARAGRAPH_SEPARATOR)\n but is not also a non-breaking space ('\\u00A0', '\\u2007', '\\u202F'). \n\tIt is '\\u0009', HORIZONTAL TABULATION.\n\tIt is '\\u000A', LINE FEED.\n\tIt is '\\u000B', VERTICAL TABULATION.\n\tIt is '\\u000C', FORM FEED.\n\tIt is '\\u000D', CARRIAGE RETURN.\n\tIt is '\\u001C', FILE SEPARATOR.\n\tIt is '\\u001D', GROUP SEPARATOR.\n\tIt is '\\u001E', RECORD SEPARATOR.\n\tIt is '\\u001F', UNIT SEPARATOR.\nhttp://java.sun.com/javase/6/docs/api/java/lang/Character.html#isWhitespace(char)\n\n\n\nI thought the white space chars are so many that it is hard to register each time.  ",
            "author": "Hiroaki Kawai",
            "id": "comment-12597036"
        },
        {
            "date": "2008-05-15T16:15:03+0000",
            "content": "Aha, that makes sense - thanks for clarifying.  I think I'm not the only one who won't immediately realize that setWhitespaceDelimiter delimits on all isWhitespace characters, so it would be good to add that to the javadoc.\n\nCould you please do that and upload the new class + its unit test class as a patch?\n\nThanks! ",
            "author": "Otis Gospodnetic",
            "id": "comment-12597178"
        },
        {
            "date": "2008-08-04T10:06:06+0000",
            "content": "I'm sorry for delay. Added a comment about what white space is. ",
            "author": "Hiroaki Kawai",
            "id": "comment-12619457"
        },
        {
            "date": "2013-03-10T13:30:02+0000",
            "content": "SPRING_CLEANING_2013 We can reopen if necessary. Lots of work has been done with CJK since this was opened. ",
            "author": "Erick Erickson",
            "id": "comment-13598244"
        }
    ]
}