{
    "id": "SOLR-7584",
    "title": "Add Joins to the Streaming API and Streaming Expressions",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Minor"
    },
    "description": "Add InnerJoinStream, LeftOuterJoinStream, and supporting classes to the Streaming API to allow for joining between sub-streams.\n\nAt its basic, it would look something like this\n\ninnerJoin(\n  search(collection1, q=*:*, fl=\"fieldA, fieldB, fieldC\", ...),\n  search(collection2, q=*:*, fl=\"fieldA, fieldD, fieldE\", ...),\n  on=\"fieldA=fieldA\"\n)\n\n\nor with multi-field on clauses\n\ninnerJoin(\n  search(collection1, q=*:*, fl=\"fieldA, fieldB, fieldC\", ...),\n  search(collection2, q=*:*, fl=\"fieldA, fieldD, fieldE\", ...),\n  on=\"fieldA=fieldA, fieldB=fieldD\"\n)\n\n\n\nI'd also like to support the option of doing a hash join instead of the default merge join but I haven't yet figured out the best way to express that. I'd like to let the user tell us which sub-stream should be hashed (the least-cost one).\n\nAlso, I've been thinking about field aliasing and might want to add a SelectStream which serves the purpose of allowing us to limit the fields coming out and rename fields.\n\nDepends on SOLR-7554",
    "attachments": {
        "SOLR-7584.patch": "https://issues.apache.org/jira/secure/attachment/12734705/SOLR-7584.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-05-22T00:27:08+0000",
            "author": "Dennis Gove",
            "content": "Adds abstract JoinStream to support joins of N sub-streams.\nAdds abstract BiJoinStream to limit JoinStream to 2 sub-streams, left and right.\nAdds concrete InnerJoinStream with support for merge join.\n\nDoes not handle hash joins.\nUses aliasing concept already available in CloudSolrStream.\n\nStill work to be done. ",
            "id": "comment-14555348"
        },
        {
            "date": "2015-05-22T09:30:08+0000",
            "author": "Joel Bernstein",
            "content": "Syntax looks really good. \n\nHad a brief look at the implementation to checkout the outer join syntax. Looks like you may have left the LeftOuterJoinStream out of the patch? ",
            "id": "comment-14555886"
        },
        {
            "date": "2015-05-22T11:31:42+0000",
            "author": "Dennis Gove",
            "content": "That's right. LeftOuterJoin wasn't included in the first version of the patch. At the moment the patch includes changes to a set of supporting classes and adds inner join. Left outer join isn't ready yet. I expect the expression syntax to be the same (two streams with an on clause) and the implementation to be fairly similar to inner join but taking into account that a right-side record isn't required for the left-side record to be returned. ",
            "id": "comment-14556008"
        },
        {
            "date": "2015-06-02T10:34:41+0000",
            "author": "Dennis Gove",
            "content": "Adds LeftOuterJoinStream to support left outer joins w/tests (work done by Corey Wu).\nMoves some functions from InnerJoinStream up to parent classes as they are shared in LeftOuterJoinStream. ",
            "id": "comment-14568909"
        },
        {
            "date": "2015-06-02T10:38:46+0000",
            "author": "Dennis Gove",
            "content": "Missed a single line in my diff that corrected a throw statement. Sorry for the double upload. ",
            "id": "comment-14568912"
        },
        {
            "date": "2015-08-07T01:32:21+0000",
            "author": "Dennis Gove",
            "content": "Recreated patch off current trunk. Previous patch was a little outdated. ",
            "id": "comment-14661166"
        },
        {
            "date": "2015-09-16T15:08:20+0000",
            "author": "Nagasharath",
            "content": "Does this support join on faceting as well?\n\nCan we apply functions like sum and avg on the joined data?  ",
            "id": "comment-14790519"
        },
        {
            "date": "2015-09-16T15:22:16+0000",
            "author": "Dennis Gove",
            "content": "This supports joining any incoming set of streams. If you have a FacetStream instance (SOLR-7903) then you could absolutely join it with some other stream instance. \n\nDue to current use of merge-join style it is a requirement that the incoming streams be sorted in a similar order. That said, a hash-join style can relatively easily be added in which case the ordering requirement will go away. I think a hash-join would make a lot of sense for a FacetStream (or really any kind of aggregation stream).\n\nThe result of the join is just another stream so you can then feed that into any other stream for further processing (including aggregation for functions like sum and avg).  ",
            "id": "comment-14790546"
        },
        {
            "date": "2015-10-24T02:59:35+0000",
            "author": "Dennis Gove",
            "content": "Part of this ticket is a change in comparators and equalitors to support differing field names on either side of the comparison (ie, fieldA = fieldB). Due to changes that have come into trunk between the creation of this patch and now it was required that I propagate those changes to a couple of other files.\n\nNote, I originally included this change in SOLR-7669 but realized today that it's actually necessary in this patch. Here's me regretting the decision to not create a separate ticket for the equalitor/comparator changes but this patch does also add support for distributed joins so there's that. Either way, description of change is below.\n\nRequired a couple of changes in the SQL and FacetStream areas related to FieldComparator. The FieldComparator has been changed to support different field names on the left and right side. The SQL and FacetStream areas use FieldComparator for sorting (a totally valid use case) but do expect the left and right side field names to be equal. The changes I made go through and validate that assumption.\n\nIn the future I think I may circle back around and create a new FieldComparator with a single field name so that on construction that assumption can be enforced.\n\nAll tests pass. ",
            "id": "comment-14972314"
        },
        {
            "date": "2015-10-24T03:06:43+0000",
            "author": "Dennis Gove",
            "content": "Could you describe your use-case for joining on facets? I can imagine that a HashJoin (SOLR-8188) would be good for something like that because it removes the sort requirement.\n\nYes, you can apply functions like sum and average on the joined data by wrapping the resulting joined stream in a RollupStream and using metrics. ",
            "id": "comment-14972324"
        },
        {
            "date": "2015-11-11T01:41:55+0000",
            "author": "Dennis Gove",
            "content": "Rebased against current trunk. A couple of comment changes. All tests pass. ",
            "id": "comment-14999773"
        },
        {
            "date": "2015-11-11T01:45:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1713753 from dpgove@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1713753 ]\n\nSOLR-7584: Adds Inner and LeftOuter Joins to the Streaming API and Streaming Expressions (Dennis Gove, Corey Wu) ",
            "id": "comment-14999778"
        }
    ]
}