{
    "id": "LUCENE-241",
    "title": "NullPointerException in CompoundFileReader",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Hello,\n\nwe have got a NullPointerException in the Lucene-class CompoundFileReader:\n\njava.lang.NullPointerException\n        at\norg.apache.lucene.index.CompoundFileReader.<init>(CompoundFileReader.java:94)\n        at org.apache.lucene.index.SegmentReader.<init>(SegmentReader.java:97)\n        at org.apache.lucene.index.IndexWriter.mergeSegments(IndexWriter.java:466)\n        at\norg.apache.lucene.index.IndexWriter.flushRamSegments(IndexWriter.java:426)\n        at org.apache.lucene.index.IndexWriter.close(IndexWriter.java:236)\n\nLucene has been working fine for some days, until this NullPointerException\nhas occured which has corrupted the complete index.\n\nThe reason for this NullPointerException is the following Code \nin Lucenes source file CompoundFileReader.java:\n\n    public CompoundFileReader(Directory dir, String name)\n    throws IOException\n    {\n        boolean success = false;\n        ...\n\n        try \n{\n            stream = dir.openFile(name);\n\n            // read the directory and init files\n            ...\n\n            success = true;\n\n        }\n finally {\n            if (! success) {\n                try \n{\n                    stream.close();\n                }\n catch (IOException e) { }\n            }\n        }\n    }\n\nIf the IO-method-call \"dir.openFile()\" throws an IOExeption,\nthen the variable \"stream\" remains its null value.\nThe statement \"stream.close()\" in the finally clause will then cause a\nNullPointerException.\n\nI would suggest that you change the code from:\n    stream.close();\nto:\n    if ( stream != null ) \n{\n        stream.close();\n    }\n\nThere are a lot of reasons why an IO-operation like \"dir.openFile()\"\ncould throw an IOException.\nI cannot guarantee that such an IO exception will never occur again.\nTherefore it is better to handle such an IO exception correctly.\n\nThis issue is similar to bug# 29774, except that I recommand an easy way\nto solve this problem.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2004-07-12T20:05:41+0000",
            "content": "\n\t\n\t\n\t\t\n\t\t\n\t\t\tBug 29774 has been marked as a duplicate of this bug. ***\n\t\t\n\t\t\n\t\n\t\n\n ",
            "author": "Daniel Naber",
            "id": "comment-12321751"
        },
        {
            "date": "2004-07-12T21:38:14+0000",
            "content": "Thanks, fixed. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12321752"
        },
        {
            "date": "2004-08-05T02:15:13+0000",
            "content": "\n\t\n\t\n\t\t\n\t\t\n\t\t\tBug 30452 has been marked as a duplicate of this bug. ***\n\t\t\n\t\t\n\t\n\t\n\n ",
            "author": "Daniel Naber",
            "id": "comment-12321753"
        }
    ]
}