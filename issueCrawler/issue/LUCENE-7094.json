{
    "id": "LUCENE-7094",
    "title": "spatial-extras BBoxStrategy and (confusingly!) PointVectorStrategy use legacy numeric encoding",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Blocker",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "We need to deprecate these since they work on the old encoding and provide points based alternatives.",
    "attachments": {
        "LUCENE-7094.patch": "https://issues.apache.org/jira/secure/attachment/12795134/LUCENE-7094.patch",
        "LUCENE_7094.patch": "https://issues.apache.org/jira/secure/attachment/12795501/LUCENE_7094.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15209529",
            "author": "Nicholas Knize",
            "date": "2016-03-24T01:05:25+0000",
            "content": "\n\tCuts PointVectorStrategy and BBoxStrategy over to DoublePoint while supporting backcompat through static methods newInstance and newLegacyInstance this forces users of the API to conciously use newLegacyInstance for supporting old indexes. The public constructor can be added back in 7.0 when Legacy numerics are completely removed.\n\tSimplifies tests by removing UninvertingReader and adding needsDocValues helper\n\tTests and javadocs updated\n\n\n "
        },
        {
            "id": "comment-15209694",
            "author": "David Smiley",
            "date": "2016-03-24T03:55:46+0000",
            "content": "Thanks for working on this Nick!  It's nice to see spatial-extras join the new PointValues world.\n\nI see you added the constant SpatialStrategy.SUFFIX_DV, and that it\u2019s used by BBoxStrategy & PointVectorStrategy.  (BTW statics should be ordered above non-statics)  I see it\u2019s used to put DocValue data in separate field names from the field name given to the strategy.  Why this change?  It would thwart someone using this code against an index created with 5.x.  In case you didn\u2019t know, the terms index, docValues, stored values, pointValues etc. are independent and so a field name might have data in all of them.  There\u2019s no need for a field name suffix to differentiate the type.\n\nI think BBoxStrategy.ComboField (private) shouldn\u2019t be deprecated; it\u2019s not quite tied to legacy numerics as the comment you added claims, although it can support it if someone provides a field type with the index enabled.  It supports DV data, stored data, and terms index data, mostly all via the FieldType passed in.  But I don\u2019t think it can hold the PointValue data, so that would still be a reason to have the Field[] array have a variable size.  If you don't get my drift, I'd be happy to take over and give it a shot.  Maybe i'm overlooking something; maybe not.\n\nThe SpatialStrategy.get/setFieldType option you added is only used by BBoxStrategy.  That seems trappy to an unwitting user who doesn't know which does.  And the \"needsDocValues\" field is set from this, yet only for numeric DV, not binary DV.  I wonder if this field should be called needsNumericDocValues then?  And why define it here instead of pertinent subclasses?\n\nI see some false && conditions added to RandomSpatialOpStrategyTestCase I don't think you meant to have in the patch; right?\n\nPortedSolr3Test.testIntersections: maybe move the enabling of docValues on PointVectorStrategy out to the parameters() static method?  Or perhaps... arguably PVS should enable this by default since without it, one can't even do a circle query. "
        },
        {
            "id": "comment-15209738",
            "author": "Nicholas Knize",
            "date": "2016-03-24T04:38:14+0000",
            "content": "I see it\u2019s used to put DocValue data in separate field names from the field name given to the strategy.  Why this change? \n\nIt's necessary to cut over from UninvertingReader - which still works on 5.x segments - to DocValues. If you just set DocValues.NUMERIC on a DoubleField the Double.longValue is what's stored as the DocValue (aka the truncated value). \n\nI think BBoxStrategy.ComboField (private) shouldn\u2019t be deprecated\n\nIt's unnecessary - especially once legacy numerics are removed in 7.0 since Point types lock down the FieldType. There is no need to Circumvent Field limitations, anyway.\n\nThe SpatialStrategy.get/setFieldType option you added is only used by BBoxStrategy. \n\nI'm actually in favor of removing this altogether. I just left it for backcompat with applications that need it to circumvent field limitations. I meant to take it back out of PVS. I'll make that change. \n\nI see some false && conditions\n\nGood catch! Missed that. \n\narguably PVS should enable this by default since without it, one can't even do a circle query.\n\n+1\n\n "
        },
        {
            "id": "comment-15209769",
            "author": "David Smiley",
            "date": "2016-03-24T05:11:02+0000",
            "content": "It's necessary to cut over from UninvertingReader - which still works on 5.x segments - to DocValues. If you just set DocValues.NUMERIC on a DoubleField the Double.longValue is what's stored as the DocValue (aka the truncated value).\n\nI don't understand that; you description sounds related to ComboField not to UninvertingReader, but I'm not sure.  Tomorrow I'll try with a debugger to see why it doesn't work (presumably a test fails).  \n\nNote that adding this field suffix will break back-compat with a 5.x index for someone using this strategy since their data won't be in a _dv suffixed field.  If we need to keep the suffix, we should add a note to the CHANGES.txt that this is so.\n\n(RE ComboField) It's unnecessary - especially once legacy numerics are removed in 7.0 since Point types lock down the FieldType. There is no need to Circumvent Field limitations, anyway.\n\nEven without PointValues, it's definitely not strictly necessary.  It was a convenient hack enabling the code to return exactly 5 field values instead of sometimes 9.  Now with PointValues we might need 9.  FYI note that DoubleDocValuesField doesn't allow setting the stored value, but ComboField can do stored value + DV in one shot. "
        },
        {
            "id": "comment-15210194",
            "author": "David Smiley",
            "date": "2016-03-24T13:18:56+0000",
            "content": "BTW even if UninvertingReader doesn't work when the field names are the same, I think that's fine.  Whoever may be using UninvertingReader should have enabled docValues.  Perhaps it's a requirement, not just a suggestion, based on your observations; I'd like to see for myself but either way I think you should remove the addition of a field suffix to your patch.  That will limit the changes in the patch a bit too.\n\nI slept on this a bit and I think we'll need a better way for BBoxStrategy users to articulate what index options they want; it's now insufficient / ambiguous to provide a FieldType:\n\n\tterms index (legacy)\n\tpointValues index?\n\tdocValues?\n\tstored?\n\ttype: double or float? (needed for pointValues & docValues)\n\n\n\nBy default we can have pointValues, docValues, type double, not stored.  Perhaps a little inner builderclass would work well.  For legacy purposes, we could support the fieldType but it's either-or with the builder.  It may take a bit of time to make double vs float configurable so that could be a follow-on issue. As it was, it was a TODO. "
        },
        {
            "id": "comment-15210891",
            "author": "Nicholas Knize",
            "date": "2016-03-24T20:17:16+0000",
            "content": "Updated patch includes the following:\n\n\n\tPer request, ComboField deprecation has been removed. I'm still not convinced we need to keep this around but if its a blocker for the Point cut over I'm fine leaving it alone.\n\tMoved get/setFieldType back to BBoxStrategy only\n\tPointVectorStrategy requires docvalues without leniency\n\tBBoxStrategy and PointVectorStrategy still index docvalues in a separate field. This is needed because docvalues on a DoubleField stores a long cast from the double value, resulting in truncation of the original double. This is a bug that was not caught before because the test used whole values instead of decimal values. DistanceStrategyTest.testRecipScore was updated to test on decimal values.\n\n "
        },
        {
            "id": "comment-15211667",
            "author": "Michael McCandless",
            "date": "2016-03-25T10:05:31+0000",
            "content": "Thank you Nicholas Knize for tackling this!\n\nIt's important to do since 1) it can uncover tricky bugs in dimensional points (LUCENE-7133) and 2) we get better numerics performance. "
        },
        {
            "id": "comment-15211822",
            "author": "Nicholas Knize",
            "date": "2016-03-25T13:57:12+0000",
            "content": "Thanks Michael McCandless  I think the patch is about ready (pending another review) at which point all LegacyNumerics should be deprecated in spatial-extras. I think that should leave just LUCENE-7095 and LUCENE-7096? "
        },
        {
            "id": "comment-15212447",
            "author": "David Smiley",
            "date": "2016-03-25T21:32:14+0000",
            "content": "I'm working on improving it... I'll have a patch for you to see tonight. "
        },
        {
            "id": "comment-15212811",
            "author": "David Smiley",
            "date": "2016-03-26T05:19:15+0000",
            "content": "I uploaded another patch.  I mostly just focused on PointVectorStrategy because it's simpler than BBoxStrategy.  I touched SpatialTestCase (mostly restoring it) too.  I removed the docValue field suffix, and I'm unable to reproduce the issue with UninvertingReader you spoke of.  Might you see if it's really gone and if it isn't upload a patch that fails a test?\n\nThe main thing I did with PointVectorStrategy was to show how the various stored, docValues, pointValues, and legacyNumeric options can be configured by passing in a FieldType.  I want to get your opinion on this approach.  From an API standpoint, it's basically the same approach that BBoxStrategy takes, although I obviously did it without using the ComboField thing which maybe is too hacky and not worth it.\n\nLet me know if you'd like to use Reviewboard; I'd like to so that we can better see what changes we're making... but I understand if you don't want to. "
        },
        {
            "id": "comment-15214530",
            "author": "Nicholas Knize",
            "date": "2016-03-28T17:41:41+0000",
            "content": "I'm unable to reproduce the issue with UninvertingReader you spoke of.\n\nThat's because you added back UninvertingReader. The intent was to completely cut the tests over to docvalues and remove test complexity with UninvertingReader. I'm fine discussing that in a separate issue and leaving in UIR for now. I don't want this further delaying the release.\n\nLet me know if you'd like to use Reviewboard;\n\nI have no problem using Reviewboard. While I think there's some more clean up to do in these Strategies I think we've achieved the main objective for this issue with re: to the 6.0 release (cut over to Point values and deprecate LegacyNumerics)?\n\nDo you have any issues with me committing this and performing code/test cleanup in 6.x? "
        },
        {
            "id": "comment-15214592",
            "author": "David Smiley",
            "date": "2016-03-28T18:06:20+0000",
            "content": "That's because you added back UninvertingReader. The intent was to completely cut the tests over to docvalues and remove test complexity with UninvertingReader. I'm fine discussing that in a separate issue and leaving in UIR for now. I don't want this further delaying the release.\n\nFor now i'd rather continue to test that UninvertingReader works; particularly since we can feel better about the upgrade path.  In some separate issue we can remove it if you feel it isn't warranted (there is some complexity in testing it, sure).\n\nDo you have any issues with me committing this and performing code/test cleanup in 6.x?\n\nSort of... I'd rather we not commit something that should be cleaned up unless it's like way too complex to do at once.  That's pretty normal.  I get the sense that you feel we're in a hurry, and I have time today to help.  What do you think of my patch, particularly to PointVectorStrategy?  I'm willing to immediately get on doing the same approach to BBoxStrategy; it won't take long.  FWIW I'm on #lucene-dev IRC to expedite any communication. "
        },
        {
            "id": "comment-15214669",
            "author": "David Smiley",
            "date": "2016-03-28T18:50:10+0000",
            "content": "Also, one concern I have with your last patch is that it's no longer possible to disable the index for BBoxStrategy.  For example, a user may just need it for sorting/relevancy and not for any filtering.  Perhaps the ComboField thingy made this less obvious, but I hope you agree my change to PointVectorStrategy (which doesn't use ComboField) clarifies these options.  I should have added a negative test to demonstrate this. "
        },
        {
            "id": "comment-15214868",
            "author": "Nicholas Knize",
            "date": "2016-03-28T20:51:41+0000",
            "content": "What do you think of my patch, particularly to PointVectorStrategy?\n\nI like this approach. Its much more clear what's going on. +1 for taking the same approach with BBoxStrategy and for tackling the UIR issue separately. "
        },
        {
            "id": "comment-15217313",
            "author": "David Smiley",
            "date": "2016-03-30T03:10:50+0000",
            "content": "Both BBoxStrategy & PointVectorStrategy:\n\n\tall state is now final; setters are removed.  The constructor has everything it needs to know.  The constructor is public, and represents an alternative to the static factory methods you added, for when the caller has options to customize.  Perhaps instead this should be another factory method?\n\tOptions are set via a passed FieldType; and there\u2019s a getter for it.\n\tThe code for state, construction & createFields are very consistent now.  It\u2019s a bit dejavu but it\u2019s not clear refactoring to reduce duplication would be worthwhile.\n\tno special name prefix is needed for DocValues based field.  (same as it has been)\n\tsome javadocs updates; remove references to legacy numerics\n\n\n\nBBoxStrategy: \n\n\tthe internal ComboField is gone\n\n\n\nPointVectorStrategy:\n\n\tconsistency with BBoxStrategy now means this has some options formerly only in BBoxStrategy: can be marked stored (default false), the index (be it PointValues or legacy numeric) is optional (default true), and DocValues is optional (default true).  An error is thrown if you call makeQuery and there\u2019s no index.\n\n\n\nTests:\n\n\tAdded test for being able to turn stored on/off, the index on/off on PointVectorStrategy\n\tremoved automatic use of UninvertedField, and the needsDocValues overrideable method.  Instead I added a utility method a test can invoke to introduce UninvertedField with the specified list of fields and the UninvertedField.Type (thus enabling testing uninverting of Double PointValues)).  I know we said this could be another issue but it didn't take long and it's comforting to see it works\n\tTestBBoxStrategy now tests uninverting behavior and for both legacy & pointValues\n\n\n\nMisc:\n\n\tNo changes to SpatialStrategy\n\n "
        },
        {
            "id": "comment-15217818",
            "author": "Robert Muir",
            "date": "2016-03-30T11:33:58+0000",
            "content": "-1 to keep hanging on to uninverting reader in this way. It already has its own tests.\n\nWe need to be able to e.g. get rid of it at some point and you are just being difficult here.\n\nIf someone is going to reindex, they can reindex with docvalues too. "
        },
        {
            "id": "comment-15218200",
            "author": "David Smiley",
            "date": "2016-03-30T15:53:47+0000",
            "content": "The attached patch modifies the previous by removing use of UninvertingReader in the tests, and thus altogether from spatial-extras.  In DistanceStrategyTest I commented out use of \"pointvector_legacy\" with a comment explaining it requires docValues that aren't present, and mentioning Solr has such tests. "
        },
        {
            "id": "comment-15218449",
            "author": "Nicholas Knize",
            "date": "2016-03-30T17:55:23+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15218895",
            "author": "David Smiley",
            "date": "2016-03-30T21:28:37+0000",
            "content": "Great; who shall commit?  I will tonight (~4 more hours) if I don't hear otherwise.  Suggested CHANGES.txt:\n\n\n\tLUCENE-7094: BBoxStrategy and PointVectorStrategy now support PointValues (in addition to legacy numeric trie).  Their APIs were changed a little and also made more consistent.  PointValues/Trie is optional, DocValues is optional, stored value is optional.  (Nick Knize, David Smiley)\n\n "
        },
        {
            "id": "comment-15219045",
            "author": "ASF subversion and git services",
            "date": "2016-03-30T23:15:16+0000",
            "content": "Commit e1b45568b41bf67b48baae7b8fec5793300a6814 in lucene-solr's branch refs/heads/master from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e1b4556 ]\n\n\n\tLUCENE-7094: BBoxStrategy and PointVectorStrategy now support PointValues (in addition to legacy numeric trie).  Their APIs were changed a little and also made more consistent.  PointValues/Trie is optional, DocValues is optional, stored value is optional.\n\n "
        },
        {
            "id": "comment-15219059",
            "author": "ASF subversion and git services",
            "date": "2016-03-30T23:30:17+0000",
            "content": "Commit f9da8164483912cad40032387783f07e8c0cfc73 in lucene-solr's branch refs/heads/branch_6_0 from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f9da816 ]\n\n\n\tLUCENE-7094: BBoxStrategy and PointVectorStrategy now support PointValues (in addition to legacy numeric trie).  Their APIs were changed a little and also made more consistent.  PointValues/Trie is optional, DocValues is optional, stored value is optional.\n\n "
        },
        {
            "id": "comment-15219073",
            "author": "ASF subversion and git services",
            "date": "2016-03-30T23:42:59+0000",
            "content": "Commit 08dae30f738b5766b29600cf58dbaa74419ea0fa in lucene-solr's branch refs/heads/branch_6x from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=08dae30 ]\n\n\n\tLUCENE-7094: BBoxStrategy and PointVectorStrategy now support PointValues (in addition to legacy numeric trie).  Their APIs were changed a little and also made more consistent.  PointValues/Trie is optional, DocValues is optional, stored value is optional.\n\n "
        }
    ]
}