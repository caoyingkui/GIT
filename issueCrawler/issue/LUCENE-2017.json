{
    "id": "LUCENE-2017",
    "title": "CloseableThreadLocal is now obsolete",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.0"
        ],
        "affect_versions": "3.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Since Lucene 3 depends on Java 5, we can use ThreadLocal#remove() to take care or resource management.",
    "attachments": {
        "CloseableThreadLocal.patch": "https://issues.apache.org/jira/secure/attachment/12423596/CloseableThreadLocal.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-10-29T17:57:28+0000",
            "content": "I don't think using remove() is sufficient \u2013 it only removes the\ncalling thread's entry, whereas we want all entries for any thread\nthat stored something into the ThreadLocal, to be eligible for GC when\nclose is called.\n\nThe problem is a live thread is slow(ish) to free its objects in a\nThreadLocal instance even when the ThreadLocal instance is GC'd.  The\nclose method works around this. ",
            "author": "Michael McCandless",
            "id": "comment-12771520"
        },
        {
            "date": "2009-10-29T19:01:16+0000",
            "content": "Oh, I see! The lifecyle is different, as close()'ing 1 instance of ClosableThreadLocal will take care of all threads that have accessed it (vs only the caller thread for ThreadLocal).\nThis is a very subtle difference, and should be documented as such in ClosableThreadLocal IMHO:\n\nYou only need to close() a ClosableThreadLocal instance once, whereas you need to remove() a ThreadLocal instance from every thread that accessed that ThreadLocal instance.\n\nThat said, wouldn't we risk that one thread close() the ClosableThreadLocal when other threads are still using it? That would invalidate currently used values!\n\nGiven that all threads supposedly follow the same code path, wouldn't a remove() be called by each thread? ",
            "author": "C\u00e9drik LIME",
            "id": "comment-12771561"
        },
        {
            "date": "2009-10-29T19:10:16+0000",
            "content": "If we would do it that way, we wouldn't need the CloseableThreadLocal at all. Because even with 1.4 you can do a remove() by simply setting the value to null (internally remove() does exactly that, see src.java in yor jdk). So CloseableThreadLocal is needed.\n\nAbout the multiple-Threads closing problem: This does not affect Lucene, as it keeps track, when it can be closed. If you close it to early it is the same as closing an IndexInput at the wrong time. So do not worry! ",
            "author": "Uwe Schindler",
            "id": "comment-12771566"
        },
        {
            "date": "2009-10-29T19:32:32+0000",
            "content": "Right. May I suggest we amend CloseableThreadLocal with some additional documentation?\nHere is a proposal. I have also \"optimised\" the removal for the current thread. O\n\nIn any case, this issue can be now be closed as invalid. Thanks for the explanation Michael! ",
            "author": "C\u00e9drik LIME",
            "id": "comment-12771575"
        },
        {
            "date": "2009-10-29T20:37:59+0000",
            "content": "Why did you add that the class should not be used outside of Lucene?  Also, I don't think we need to reference this issue in the javadocs? ",
            "author": "Michael McCandless",
            "id": "comment-12771595"
        },
        {
            "date": "2009-10-30T09:24:06+0000",
            "content": "Michael,\n\nI wrote the class should not be closed outside Lucene because of the potential multiple-Threads closing problem mentioned earlier.\nFeel free to change the comments (including removing the reference to this issue); my JavaDoc patch was a proposal, not the absolute truth!  ",
            "author": "C\u00e9drik LIME",
            "id": "comment-12771885"
        },
        {
            "date": "2009-10-30T09:53:06+0000",
            "content": "OK, no problem... I'll sharpen the javadoc to state \"don't close this when other threads are still using it\", and remove reference to this issue. ",
            "author": "Michael McCandless",
            "id": "comment-12771893"
        },
        {
            "date": "2009-10-30T10:07:27+0000",
            "content": "Thanks C\u00e9drik! ",
            "author": "Michael McCandless",
            "id": "comment-12771895"
        }
    ]
}