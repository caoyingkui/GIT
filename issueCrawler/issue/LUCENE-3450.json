{
    "id": "LUCENE-3450",
    "title": "BooleanQuery seems broken on trunk",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Not A Problem",
        "status": "Resolved"
    },
    "description": "Converting a Solr SearchComponent from using filters to using equivalent queries causes its test cases to fail.  The reasons are unclear, and I've tried several things to isolate the problem, but with no luck so far.\n\nThe failure manifests itself by the constructed query returning no documents whatsoever, at least within the Solr context it's being used in.  The equivalent filter version of the component works properly (as you can see by the passed test).\n\nTo run the test:\n\ncd solr/contrib/mcf\nant test\n\nI will attach both filter and query versions of the code, as patches.",
    "attachments": {
        "query.diff": "https://issues.apache.org/jira/secure/attachment/12496136/query.diff",
        "filter.diff": "https://issues.apache.org/jira/secure/attachment/12496135/filter.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-09-22T16:37:26+0000",
            "content": "The filter version of the search component ",
            "author": "Karl Wright",
            "id": "comment-13112695"
        },
        {
            "date": "2011-09-22T16:38:03+0000",
            "content": "The query version of the search component, which fails the test ",
            "author": "Karl Wright",
            "id": "comment-13112696"
        },
        {
            "date": "2011-09-23T09:06:46+0000",
            "content": "Apologies for not finishing this ticket promptly, but minutes after creating it I lost internet and phone service for seven hours.\n\nSome notes:\n(1) The filter-based plugin passes the tests, the query-based one fails two out of the four tests.  I've been concentrating initially on the failure that comes from ManifoldCFSecurityFilterTest.java line 100.  Here's the error:\n\n\n[junit] ------------- Standard Error -----------------\n    [junit] +((-allow_token_share:* -deny_token_share:*) allow_token_share:token1 -deny_token_share:token1) +((-allow_token_document:* -deny_token_document:*) allow_token_document:token1 -deny_token_document:token1)\n    [junit] 22/09/2011 08:26:50 ? org.apache.solr.SolrTestCaseJ4 assertQ\n    [junit] SEVERE: REQUEST FAILED: xpath=//*[@numFound='3']\n    [junit]     xml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    [junit] <response>\n    [junit] <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">116</int><lst name=\"params\"><str name=\"echoParams\">all</str><str name=\"fl\">id</str><str name=\"q\">*:*</str><str name=\"qt\">/mcf</str><str name=\"UserTokens\">token1</str><str name=\"mcf\">true</str></lst></lst><result name=\"response\" numFound=\"0\" start=\"0\"></result>\n    [junit] </response>\n\n\n\nThis output includes the actual query I am generating for this test, which looks correct to me.\n\n(2) The test indexes 5 documents into four access token fields.  These documents are summarized below.\n\n\n    //             |     share    |   document\n    //             |--------------|--------------\n    //             | allow | deny | allow | deny\n    // ------------+-------+------+-------+------\n    // da12        |       |      | 1, 2  |\n    // ------------+-------+------+-------+------\n    // da13-dd3    |       |      | 1,3   | 3\n    // ------------+-------+------+-------+------\n    // sa123-sd13  | 1,2,3 | 1, 3 |       |\n    // ------------+-------+------+-------+------\n    // sa3-sd1-da23| 3     | 1    | 2,3   |\n    // ------------+-------+------+-------+------\n    // notoken     |       |      |       |\n    // ------------+-------+------+-------+------\n\n\n\n\n\n(2) Initially the query-based plugin directly corresponded to the filter based one. Still failed in exactly the same way.  Here's the diff between the filter-based one and the initial query-based one:\n\n\nIndex: src/java/org/apache/solr/mcf/ManifoldCFSecurityFilter.java\n===================================================================\n--- src/java/org/apache/solr/mcf/ManifoldCFSecurityFilter.java\t(revision 1173895)\n+++ src/java/org/apache/solr/mcf/ManifoldCFSecurityFilter.java\t(working copy)\n@@ -150,7 +150,8 @@\n       userAccessTokens = getAccessTokens(authenticatedUserName);\n     }\n \n-    BooleanFilter bf = new BooleanFilter();\n+    BooleanQuery bq = new BooleanQuery();\n+    //bf.setMaxClauseCount(100000);\n     \n     if (userAccessTokens.size() == 0)\n     {\n@@ -159,28 +160,26 @@\n       // (fieldAllowShare is empty AND fieldDenyShare is empty AND fieldAllowDocument is empty AND fieldDenyDocument is empty)\n       // We're trying to map to:  -(fieldAllowShare:*) , which should be pretty efficient in Solr because it is negated.  If this turns out not to be so, then we should\n       // have the SolrConnector inject a special token into these fields when they otherwise would be empty, and we can trivially match on that token.\n-      bf.add(new FilterClause(new QueryWrapperFilter(new WildcardQuery(new Term(fieldAllowShare,\"*\"))),BooleanClause.Occur.MUST_NOT));\n-      bf.add(new FilterClause(new QueryWrapperFilter(new WildcardQuery(new Term(fieldDenyShare,\"*\"))),BooleanClause.Occur.MUST_NOT));\n-      bf.add(new FilterClause(new QueryWrapperFilter(new WildcardQuery(new Term(fieldAllowDocument,\"*\"))),BooleanClause.Occur.MUST_NOT));\n-      bf.add(new FilterClause(new QueryWrapperFilter(new WildcardQuery(new Term(fieldDenyDocument,\"*\"))),BooleanClause.Occur.MUST_NOT));\n+      bq.add(new WildcardQuery(new Term(fieldAllowShare,\"*\")),BooleanClause.Occur.MUST_NOT);\n+      bq.add(new WildcardQuery(new Term(fieldDenyShare,\"*\")),BooleanClause.Occur.MUST_NOT);\n+      bq.add(new WildcardQuery(new Term(fieldAllowDocument,\"*\")),BooleanClause.Occur.MUST_NOT);\n+      bq.add(new WildcardQuery(new Term(fieldDenyDocument,\"*\")),BooleanClause.Occur.MUST_NOT);\n     }\n     else\n     {\n       // Extend the query appropriately for each user access token.\n-      bf.add(new FilterClause(calculateCompleteSubfilter(fieldAllowShare,fieldDenyShare,userAccessTokens),BooleanClause.Occur.MUST));\n-      bf.add(new FilterClause(calculateCompleteSubfilter(fieldAllowDocument,fieldDenyDocument,userAccessTokens),BooleanClause.Occur.MUST));\n+      bq.add(calculateCompleteSubquery(fieldAllowShare,fieldDenyShare,userAccessTokens),BooleanClause.Occur.MUST);\n+      bq.add(calculateCompleteSubquery(fieldAllowDocument,fieldDenyDocument,userAccessTokens),BooleanClause.Occur.MUST);\n     }\n \n     // Concatenate with the user's original query.\n-    //FilteredQuery query = new FilteredQuery(rb.getQuery(),bf);\n-    //rb.setQuery(query);\n     List<Query> list = rb.getFilters();\n     if (list == null)\n     {\n       list = new ArrayList<Query>();\n       rb.setFilters(list);\n     }\n-    list.add(new ConstantScoreQuery(bf));\n+    list.add(new ConstantScoreQuery(bq));\n   }\n \n   @Override\n@@ -193,28 +192,27 @@\n   * ((fieldAllowShare is empty AND fieldDenyShare is empty) OR fieldAllowShare HAS token1 OR fieldAllowShare HAS token2 ...)\n   *     AND fieldDenyShare DOESN'T_HAVE token1 AND fieldDenyShare DOESN'T_HAVE token2 ...\n   */\n-  protected Filter calculateCompleteSubfilter(String allowField, String denyField, List<String> userAccessTokens)\n+  protected Query calculateCompleteSubquery(String allowField, String denyField, List<String> userAccessTokens)\n   {\n-    BooleanFilter bf = new BooleanFilter();\n+    BooleanQuery bq = new BooleanQuery();\n+    bq.setMaxClauseCount(1000000);\n     \n     // Add a clause for each token.  This will be added directly to the main filter (as a deny test), as well as to an OR's subclause (as an allow test).\n-    BooleanFilter orFilter = new BooleanFilter();\n+    BooleanQuery orQuery = new BooleanQuery();\n+    orQuery.setMaxClauseCount(1000000);\n+\n     // Add the empty-acl case\n-    BooleanFilter subUnprotectedClause = new BooleanFilter();\n-    subUnprotectedClause.add(new FilterClause(new QueryWrapperFilter(new WildcardQuery(new Term(allowField,\"*\"))),BooleanClause.Occur.MUST_NOT));\n-    subUnprotectedClause.add(new FilterClause(new QueryWrapperFilter(new WildcardQuery(new Term(denyField,\"*\"))),BooleanClause.Occur.MUST_NOT));\n-    orFilter.add(new FilterClause(subUnprotectedClause,BooleanClause.Occur.SHOULD));\n+    BooleanQuery subUnprotectedClause = new BooleanQuery();\n+    subUnprotectedClause.add(new WildcardQuery(new Term(allowField,\"*\")),BooleanClause.Occur.MUST_NOT);\n+    subUnprotectedClause.add(new WildcardQuery(new Term(denyField,\"*\")),BooleanClause.Occur.MUST_NOT);\n+    orQuery.add(subUnprotectedClause,BooleanClause.Occur.SHOULD);\n     for (String accessToken : userAccessTokens)\n     {\n-      TermsFilter tf = new TermsFilter();\n-      tf.addTerm(new Term(allowField,accessToken));\n-      orFilter.add(new FilterClause(tf,BooleanClause.Occur.SHOULD));\n-      tf = new TermsFilter();\n-      tf.addTerm(new Term(denyField,accessToken));\n-      bf.add(new FilterClause(tf,BooleanClause.Occur.MUST_NOT));\n+      orQuery.add(new TermQuery(new Term(allowField,accessToken)),BooleanClause.Occur.SHOULD);\n+      bq.add(new TermQuery(new Term(denyField,accessToken)),BooleanClause.Occur.MUST_NOT);\n     }\n-    bf.add(new FilterClause(orFilter,BooleanClause.Occur.MUST));\n-    return bf;\n+    bq.add(orQuery,BooleanClause.Occur.MUST);\n+    return bq;\n   }\n\n\n\nAfter this I experimented for a bit, flattening out one level of BooleanQuery, commenting out the ConstantScoreQuery wrapper, and adding output to stderr of the generated query.  None of this fixed things, although the test behavior did change somewhat, which was another worrisome sign.  The failure at ManifoldCFSecurityFilterTest.java line 100 still occurred just the same, however.\n\nThis is as far as I've gotten so far.  If you need a more condensed test case, I'm happy to try and produce one, but I am unfamiliar with the Lucene-side testing infrastructure so I'd need to be pointed at an example to emulate. ",
            "author": "Karl Wright",
            "id": "comment-13113281"
        },
        {
            "date": "2011-09-23T12:28:17+0000",
            "content": "This doesn't sound good!\n\nMaybe you could boil it down to Lucene only test?  Maybe use src/test/org/apache/lucene/search/TestBooleanQuery.java as an example? ",
            "author": "Michael McCandless",
            "id": "comment-13113365"
        },
        {
            "date": "2011-09-23T12:37:59+0000",
            "content": "From your example patch, i see only MUST_NOT clauses. This cannot work. \n\nAs I was working on BooleanFilter yesterday, I know that BooleanFilter has a hack to support pure-negative queries. BooleanQuery with only negative clauses always returns no results (I was thinking about removing the stupid hack in BF, because it cannot correctly handle deleted docs.... - its still there because backwards compatibility) ",
            "author": "Uwe Schindler",
            "id": "comment-13113372"
        },
        {
            "date": "2011-09-23T12:45:06+0000",
            "content": "From your example patch, i see only MUST_NOT clauses. This cannot work. \n\nI agree that the first clause must have a MatchAllQuery added, but that's not the failure I'm looking at.  The case in question involves the SECOND clause:\n\n\n       // Extend the query appropriately for each user access token.\n-      bf.add(new FilterClause(calculateCompleteSubfilter(fieldAllowShare,fieldDenyShare,userAccessTokens),BooleanClause.Occur.MUST));\n-      bf.add(new FilterClause(calculateCompleteSubfilter(fieldAllowDocument,fieldDenyDocument,userAccessTokens),BooleanClause.Occur.MUST));\n+      bq.add(calculateCompleteSubquery(fieldAllowShare,fieldDenyShare,userAccessTokens),BooleanClause.Occur.MUST);\n+      bq.add(calculateCompleteSubquery(fieldAllowDocument,fieldDenyDocument,userAccessTokens),BooleanClause.Occur.MUST);\n\n\n\nThe first clause is used only when a user has no tokens, which has a test but is not the one I've singled out.\n\nThe actual query being generated in this case is:\n\n\n    [junit] +((-allow_token_share:* -deny_token_share:*) allow_token_share:token1 -deny_token_share:token1) +((-allow_token_document:* -deny_token_document:*) allow_token_document:token1 -deny_token_document:token1)\n\n\n\n\nDoes this look like it is constructed incorrectly to you?  Or are you saying that the subclause \"(-allow_token_share:* -deny_token_share:*)\" has the same problem?  I'll experiment with this and see what I get...\n\n ",
            "author": "Karl Wright",
            "id": "comment-13113376"
        },
        {
            "date": "2011-09-23T12:48:23+0000",
            "content": "I opened LUCENE-3451 about the stupid BooleanFilter hack that is inconsistent and confuses people. ",
            "author": "Uwe Schindler",
            "id": "comment-13113383"
        },
        {
            "date": "2011-09-23T12:56:39+0000",
            "content": "Yup, adding MatchAllDocsQuery() in the appropriate places makes filters and queries consistent again, and the tests pass.\n\n ",
            "author": "Karl Wright",
            "id": "comment-13113393"
        }
    ]
}