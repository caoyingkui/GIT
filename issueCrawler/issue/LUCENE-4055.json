{
    "id": "LUCENE-4055",
    "title": "Refactor SegmentInfo / FieldInfo to make them extensible",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/codecs"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "After LUCENE-4050 is done the resulting SegmentInfo / FieldInfo classes should be made abstract so that they can be extended by Codec-s.",
    "attachments": {
        "LUCENE-4055.patch": "https://issues.apache.org/jira/secure/attachment/12529363/LUCENE-4055.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-14T01:13:20+0000",
            "content": "rough plan:\n\n\tcreate branch for this and LUCENE-4050, the work is related really.\n\tseparate per commit information (SegmentList? Commit?) from per-segment metadata (SegmentInfo? SegmentMetadata?). the latter is basically si and fi. these names can change. maybe fi is still preserved mostly asis.\n\tclean up the way per-segment metadata is used in such a way that it is abstract and minimal to what IndexWriter/MP needs, not full of codec specific stuff.\n\tensure codecs can privately write any metadat they need (eg hasProx) and that its accessible via all codec apis.\n\ttry to ensure codecs write things they need like hasProx to compute files() without iterating over fieldinfos. this would be a bonus, its currently a concern of mine.\n\tadd a basic introspection api (like map<string,string>) for tools like luke to be able to display codec private values.\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-13274401"
        },
        {
            "date": "2012-05-14T02:24:40+0000",
            "content": "+1. Per commit information could be named CommitInfo (which it really is). I like SegmentMetadata - if we left SegmentInfo as a name it would be confusing with its current functionality.\n\nIntrospection could return Map<String,Object> to avoid converting e.g. numeric values back and forth. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13274412"
        },
        {
            "date": "2012-05-16T00:28:09+0000",
            "content": "Branch location for this issue and LUCENE-4050: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene4055\n ",
            "author": "Robert Muir",
            "id": "comment-13276363"
        },
        {
            "date": "2012-05-22T17:24:54+0000",
            "content": "Just some updates from the work in the branch (scary changes but proceeding nicely since Mike jumped in and did a lot of it).\nHere's a list of the current progress:\n\n\n\ton disk, the segments_N is reduced to the stuff that actually is per-commit: a list of segments and deleted gens/counts, etc.\n\tper-segment metadata (doc count, diagnostics, etc) that is write-once is encoded by the codec, e.g. for 4.0's codec this is in the .si file.\n\tremoved backwards-seeking on segments_N. so appendingcodec still works but doesn't need any special hacks.\n\tflush/merge order is changed so that fieldinfos are written last so codecs have a chance to add metadata to it.\n\tfieldinfo has a \"codec metadata\" api that codec components can use, and that metadata will be available on reading the segment. this metadata\n  is for the codec to use to extend fieldinfo, its not carried along during merge or anything. \n\tPerFieldPostingsFormat is changed to use the fieldinfo metadata api rather than a separate .per file (e.g. it records that the \"id\" field uses Pulsing).\n\tall the hairiness involving files() is really nice now, instead we simply track which files were created, and add them to the .si file. Previously\n  there was a lot of logic to compute this in a symmetric way at both read and write time, and if you had a bug, your punishment was FNFE.\n\n\n\nnot yet done:\n\n\tadd metadata api to segmentinfo too, so that codec components can record per-segment information that they care about.\n\tsee if we can implement 3.x's shared doc stores support with segmentinfo metadata api. This is tricky to do and for addIndexes/indexSplitter etc which\n  do sneaky things to still work.\n\tsee if we can implement 3.x normGen (separate norms) with segmentinfo metadata. while in 3.x lucene this was actually per-commit, since 3.x support\n  is read-only we can effectively treat it as per-segment this way.\n\trename stuff so that we have a clearer naming for some of these classes.\n\n\n\nI'm also probably missing a few other things. In general I'm pretty happy with the \"metadata\" key-value attributes api versus subclassing. \n\nI tried to make subclassing work, but subclassing turned really ugly fast and made various codec components too tightly-coupled, e.g. \nif someone wants to combine a CompressedStoredFields with a PerFieldPostingsFormat and SpecialTermVectors, what would the impls be . \n\nSo the overly simple Map<String,String> avoids these issues, and hey its just metadata after all so I don't think anything more complex is really needed.  ",
            "author": "Robert Muir",
            "id": "comment-13281105"
        },
        {
            "date": "2012-05-24T21:44:03+0000",
            "content": "The last nocommits are cleared up: I think the branch is ready to be merged.\n\nAttached is a patch showing the differences between trunk and branch. ",
            "author": "Robert Muir",
            "id": "comment-13282797"
        },
        {
            "date": "2012-05-25T20:15:09+0000",
            "content": "+1, this looks very good.\n\nOne comment re. SegmentInfoPerCommit. This class is not extensible and contains a fixed set of attributes. In LUCENE-3837 this or similar place would be the ideal mechanism to carry info about stacked segments, since this information is specific to a commit point. Unfortunately, there are no Map<String,String> attributes on this level, so I guess for now this type of aux data will have to be put in SegmentInfos.userData even though it's not index global but segment-specific. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13283725"
        },
        {
            "date": "2012-05-25T20:34:45+0000",
            "content": "Right, but I think this is correct: the codec should be responsible for encode/decode of inverted index segments only (the whole problem here originally was trying to have it also look after commits).\n\nSo it really shouldn't be customizing things about the commit, as that creates a confusing impedance mismatch.\n\nI think things like stacked segments in LUCENE-3837 that need to do things other than implement encoding/decoding of segment should be above the codec level: since its a separate concern, if someone wants to have updatable fields thats unrelated to the integer compression algorithm used or what not. ",
            "author": "Robert Muir",
            "id": "comment-13283738"
        },
        {
            "date": "2012-05-25T21:21:22+0000",
            "content": "stacked segments in LUCENE-3837 that need to do things other than implement encoding/decoding of segment should be above the codec level ..\nCertainly, that's why it would make sense to put this extended info in SegmentInfoPerCommit and not in any file handled by Codec. My comment was about the lack of easy extensibility of the codec-independent per-segment data (SegmentInfoPerCommit - info about stacked data is per-segment and per-commit), so LUCENE-3837 will need to use for now the codec-independent index-global data (SegmentInfos). It's not ideal but not a deal breaker either, especially since we now have version info in both of these places. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13283755"
        },
        {
            "date": "2012-05-25T22:37:17+0000",
            "content": "\nMy comment was about the lack of easy extensibility of the codec-independent per-segment data (SegmentInfoPerCommit - info about stacked data is per-segment and per-commit), so LUCENE-3837 will need to use for now the codec-independent index-global data (SegmentInfos).\n\nWell SegmentInfos is just the list of SegmentInfoPerCommit, so I think in the case of LUCENE-3837 we would just place this data alongside the only other per-segment-per-commit data: deletes (e.g. we would add something like updatesGen and updatesCount or whatever).\n\nSure, we have to bump the file header and what not, but the file is so simple now in the sense its just a list of segment names, the codec to decode them, with their deletes, that it wouldn't be a big deal.\n\nAnd I think per-segment-per-commit data is pretty rare: we only have deletes, and in the future updates, but I can't imagine lots of other stuff belonging in this category (versions the per-segment metadata in SI which has been pretty volatile in the past). ",
            "author": "Robert Muir",
            "id": "comment-13283793"
        },
        {
            "date": "2012-05-27T13:06:40+0000",
            "content": "Does this patch allows TermsHashConsumerPerField to be dependent to the Codec/Field ? I have a use case where I need my own TermsHashConsumerPerField for certain fields.\n\nAt the moment, the only extension of TermsHashConsumer is FreqProxTermsWriter which is creating a FreqProxTermsWriterPerField for every field (see FreqProxTermsWriter#addField()).\n\nA possible solution of my problem would be to have a PostingsTermsWriter (extension of TermsHashConsumer) that will create a specific PostingsTermsWriterPerField (extension of TermsHashConsumerPerField) depending on the codec information found in the FieldInfo object. ",
            "author": "Renaud Delbru",
            "id": "comment-13284153"
        },
        {
            "date": "2012-05-28T19:14:16+0000",
            "content": "Renaud, what you are talking about is not really related to this issue: this issue is about allowing codecs to add metadata to SegmentInfo and FieldInfo.\n\nwhat you are talking about is the indexing chain, if you want to customize that, just set a custom one on IndexWriterConfig. ",
            "author": "Robert Muir",
            "id": "comment-13284523"
        },
        {
            "date": "2012-05-28T20:01:24+0000",
            "content": "Hi Robert,\n\nsorry if it seemed a bit out of context, but I am trying to understand how to properly do it.\n\nIndeed, I can create my own indexing chain which includes my TermsHashConsumer customisation. However, I would still need the codec metadata for every field. But from what you told me, it seems that this codec specific metadata could be now added to FeildInfo. Is that correct ? ",
            "author": "Renaud Delbru",
            "id": "comment-13284533"
        },
        {
            "date": "2012-05-28T20:08:20+0000",
            "content": "\nHowever, I would still need the codec metadata for every field.\n\nWhat codec metadata? this change only allows codecs to add additional things to fieldinfo/segmentinfo so they can later be read when the segment is opened. E.g. a CompressingStoredFieldsWriter could put in the segmentinfo an additional key-value like \"CompressingStoredFieldsWriter.algorithm=deflate\"\n\nThese are private to that component basically: i don't understand why your indexing chain would care about this? its at a level above all that. ",
            "author": "Robert Muir",
            "id": "comment-13284537"
        },
        {
            "date": "2012-05-28T20:43:28+0000",
            "content": "\nWhat codec metadata?\n\nMetadata that indicates which codec is used for a particular field.\n\nLet say I want to have a specific TermsHashConsumerPerField depending on the codec used by a field. For example, for field A and field B which use the Lucen40 codec, we need to use the FreqProxTermsWriterPerField. And for field C that uses my own specific codec, I need to use the MyOwnTermsWriterPerField.\n\nMy current understanding tells me that to do this, the only way is to customise the IndexingChain with a new TermsHashConsumer that overrides the method TermsHashConsumer#addField(TermsHashPerField termsHashPerField, FieldInfo fieldInfo). This method addField will be able to instantiate the correct TermsHashConsumerPerField if and only if there is codec metadata in the FieldInfo parameter. That's why I am interested of using a customised FieldInfo to store codec-related metadata about a field.\n\nOr is there a better way to get codec-related information about a field in the IndexingChain ? ",
            "author": "Renaud Delbru",
            "id": "comment-13284544"
        },
        {
            "date": "2012-05-28T20:50:46+0000",
            "content": "Codecs are not per-field, they encode the entire inverted index segment. ",
            "author": "Robert Muir",
            "id": "comment-13284548"
        },
        {
            "date": "2012-05-28T20:53:27+0000",
            "content": "Sorry, I meant PostingsFormat instead of Codec. ",
            "author": "Renaud Delbru",
            "id": "comment-13284551"
        },
        {
            "date": "2012-05-28T20:58:44+0000",
            "content": "Well you can do postingsFormat instanceof PerFieldPostingsFormat + postingsFormat.getPostingsFormatForField if you really want.\n\nBut keep in mind PerFieldPostingsFormat is not really special and just one we provide for convenience, obviously one could write their own PostingsFormat \nthat implements the same thing in a different way. ",
            "author": "Robert Muir",
            "id": "comment-13284553"
        },
        {
            "date": "2013-06-02T15:06:20+0000",
            "content": "Michael McCandless what's the replacement strategy for IndexFileNameFilter?  I'm updating some old code from 3.x to 4.3 (MAHOUT-944) and not sure on what the equivalent approach is, or whether I even need it.  (Note, I'm still trying to figure out whether the patch for MAHOUT-944 is even the best way to do what it is trying to do, but I want to at least get it compiling first) ",
            "author": "Grant Ingersoll",
            "id": "comment-13672556"
        },
        {
            "date": "2013-06-02T18:08:14+0000",
            "content": "Hi Grant Ingersoll, I think you can use the IndexFileNames.CODEC_FILE_PATTERN in your filter?  You may need to add in segments_N and segments.gen as well ... ",
            "author": "Michael McCandless",
            "id": "comment-13672622"
        },
        {
            "date": "2013-06-05T13:33:33+0000",
            "content": "Hmm, Mike, CODEC_FILE_PATTERN is package access only.  Easy enough to replicate/fix, any reason not too? ",
            "author": "Grant Ingersoll",
            "id": "comment-13675907"
        },
        {
            "date": "2013-06-05T16:30:10+0000",
            "content": "Hmm looks like it's package private in 4.3 but is (will be) public in 4.x/trunk.  Just replicate for now  ",
            "author": "Michael McCandless",
            "id": "comment-13676083"
        }
    ]
}