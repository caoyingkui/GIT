{
    "id": "LUCENE-6045",
    "title": "Refator classifier APIs to work better with multi threading",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/classification"
        ],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "In https://issues.apache.org/jira/browse/LUCENE-4345?focusedCommentId=13454729&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13454729 Simon Willnauer pointed out that the current Classifier API doesn't work well in multi threading environments: \n\nThe interface you defined has some problems with respect to Multi-Threading IMO. The interface itself suggests that this class is stateful and you have to call methods in a certain order and at the same you need to make sure that it is not published for read access before training is done. I think it would be wise to pass in all needed objects as constructor arguments and make the references final so it can be shared across threads and add an interface that represents the trained model computed offline? In this case it doesn't really matter but in the future it might make sense. We can also skip the model interface entirely and remove the training method until we have some impls that really need to be trained.\n\nI missed that at that point but I think for 6.0  it would be wise to rearrange the API to address that properly.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14521541",
            "author": "ASF subversion and git services",
            "date": "2015-04-30T14:12:05+0000",
            "content": "Commit 1676997 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1676997 ]\n\nLUCENE-6045 - refactor Classifier API to work better with multithreading "
        },
        {
            "id": "comment-14521544",
            "author": "ASF subversion and git services",
            "date": "2015-04-30T14:13:47+0000",
            "content": "Commit 1676998 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1676998 ]\n\nLUCENE-6045 - removed train exceptions "
        },
        {
            "id": "comment-14521550",
            "author": "Tommaso Teofili",
            "date": "2015-04-30T14:19:05+0000",
            "content": "refactored API (and impl) in r1676998, 1677000 "
        },
        {
            "id": "comment-14525605",
            "author": "Shawn Heisey",
            "date": "2015-05-03T02:19:41+0000",
            "content": "BooleanPerceptronClassifier is missing javadocs after r1676997, which breaks precommit.  This was mentioned twice on the dev list, once on 2015/04/30 and again on 2015/05/01. "
        },
        {
            "id": "comment-14525694",
            "author": "Tommaso Teofili",
            "date": "2015-05-03T06:49:10+0000",
            "content": "thanks for the pointer and sorry for the inconvenience, I'll fix it right away. "
        },
        {
            "id": "comment-14525697",
            "author": "ASF subversion and git services",
            "date": "2015-05-03T06:54:30+0000",
            "content": "Commit 1677367 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1677367 ]\n\nLUCENE-6045 - fixed javadocs "
        },
        {
            "id": "comment-14526489",
            "author": "ASF subversion and git services",
            "date": "2015-05-04T10:06:34+0000",
            "content": "Commit 1677573 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1677573 ]\n\nLUCENE-6045 - immutable ClassificationResult, minor fixes "
        },
        {
            "id": "comment-14540230",
            "author": "ASF subversion and git services",
            "date": "2015-05-12T17:04:51+0000",
            "content": "Commit 1679005 from Tommaso Teofili in branch 'dev/trunk'\n[ https://svn.apache.org/r1679005 ]\n\nLUCENE-6045 - refactored BPC constructor to be more consistent with others "
        }
    ]
}