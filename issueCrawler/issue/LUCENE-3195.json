{
    "id": "LUCENE-3195",
    "title": "MockDirectoryWrapper should throw 'too many open files' if too many are open",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Test",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "regardless of operating system.\n\nWe should take a good default value, like the lowest one we consider 'reasonable' macosX? and it should throw exception on openInput if openFiles hashmap is too large.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-12T17:20:34+0000",
            "content": "That's a great idea !\n\nand it should throw exception on openInput\n\nand createOutput too?\n\nwe should take a good default value\n\nLet's just start w/ 1024? I doubt our tests need to open that many anyway, and it's, I think, low enough to fit any OS?\n\nAlso, and this can be added in future iterations, I think it'd be good if the exception includes a list of all test classes + count of open files, to make it easier to spot offending classes.\n\nHmmm ... now that I think of it, if our tests are run in different JVMs, we will fail to faithfully track the number of open file handles (I mean the true number)? In that case, we might want to lower the value to whatever we think a single JVM should allocate ... which gets tricky. ",
            "author": "Shai Erera",
            "id": "comment-13048377"
        },
        {
            "date": "2011-06-12T17:28:05+0000",
            "content": "\nAlso, and this can be added in future iterations, I think it'd be good if the exception includes a list of all test classes + count of open files, to make it easier to spot offending classes.\n\nWell, the test spits this out when it fails already? it says \"tests run in this jvm: [TestX, TestY, TestZ]...\"\n\n\nHmmm ... now that I think of it, if our tests are run in different JVMs, we will fail to faithfully track the number of open file handles (I mean the true number)? In that case, we might want to lower the value to whatever we think a single JVM should allocate ... which gets tricky.\n\nRight, its not going to be totally accurate anyway, I guess I think the goal is not to emulate an operating system but instead to catch a runaway test on all platforms.\n\nFor example, as a start MDW could just check its own hashmap, as 99% of tests only make one directory, and a JVM only runs one test at a time.\n\nBut it would be better for MDW to have a static atomic counter, for better detection of the crazy tests (those are probably the ones opening too many files sometimes anyway).\n ",
            "author": "Robert Muir",
            "id": "comment-13048379"
        },
        {
            "date": "2011-06-12T17:36:38+0000",
            "content": "Great idea!\n\nI dont think it will help on Jenkins (as it was caused by something else), but its a good idea. ",
            "author": "Uwe Schindler",
            "id": "comment-13048381"
        },
        {
            "date": "2011-06-12T17:49:32+0000",
            "content": "Well, the test spits this out when it fails already? it says \"tests run in this jvm: [TestX, TestY, TestZ]...\"\n\nOk. But for easier spotting the offending test, I meant it'd be more useful if at the point of exception you'd know which tests keep the open files and how many each test holds. Because \"TestX\" and \"TestY\" which run in this JVM may not keep any open files at the moment, so it's just noise that you need to filter? Are they reported even if they have already finished? ",
            "author": "Shai Erera",
            "id": "comment-13048389"
        },
        {
            "date": "2011-06-12T17:52:03+0000",
            "content": "\nBecause \"TestX\" and \"TestY\" which run in this JVM may not keep any open files at the moment, so it's just noise that you need to filter?\n\nThey had better not! or, they should fail because they had file leaks!\n\nI think its useful to provide some debugging information, but on the other hand I also think the exception we throw should be as much as possible, exactly like the one the OS throws (isn't it FNFE or something strange?) ",
            "author": "Robert Muir",
            "id": "comment-13048392"
        },
        {
            "date": "2011-06-12T17:54:41+0000",
            "content": "but in line with what you said Shai, i think its hard to debug when one test goes over the limit, and fails, currently its like this chain reaction where all the tests in hudson then fail.\n\nso if we add this atomic variable, maybe we check it with an assume() in beforeClass or something, so that if one test blows it up, the rest are @Ignored? ",
            "author": "Robert Muir",
            "id": "comment-13048393"
        },
        {
            "date": "2011-06-12T18:14:02+0000",
            "content": "so that if one test blows it up, the rest are @Ignored?\n\nThat sounds good.\n\nThey had better not! or, they should fail because they had file leaks!\n\nRight . But I meant what if N tests are run in parallel in the same JVM (do we do that today?), and one test causes the TooManyOpenFiles exception (or FNFE as you said), it'd be good to know which how many open files each test holds.\n\nIf tests are run sequentially in the same JVM though, then this is unnecessary and we can do w/ that global counter + assume(). ",
            "author": "Shai Erera",
            "id": "comment-13048401"
        }
    ]
}