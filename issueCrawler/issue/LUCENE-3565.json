{
    "id": "LUCENE-3565",
    "title": "StandardQueryParser generates incorrect query for groups containing one term if using default operator AND",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.4",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "The following test demonstrates a bug in StandardQueryParser when DEFAULT_OPERATOR is set to AND:\n\n\n    @Test\n    public void testDefaultOperatorSingleGrouped() throws Exception\n    {\n        StandardQueryParser parser = new StandardQueryParser();\n        parser.getQueryConfigHandler().set(StandardQueryConfigHandler.ConfigurationKeys.DEFAULT_OPERATOR, StandardQueryConfigHandler.Operator.AND);\n\n        BooleanQuery expectedQuery = new BooleanQuery();\n        BooleanQuery innerQuery1 = new BooleanQuery();\n        innerQuery1.add(new TermQuery(new Term(\"text\", \"a\")), BooleanClause.Occur.MUST);\n        expectedQuery.add(innerQuery1, BooleanClause.Occur.SHOULD);\n        BooleanQuery innerQuery2 = new BooleanQuery();\n        innerQuery2.add(new TermQuery(new Term(\"text\", \"b\")), BooleanClause.Occur.MUST);\n        expectedQuery.add(innerQuery2, BooleanClause.Occur.SHOULD);\n        Query actualQuery = parser.parse(\"(a) OR (b)\", \"text\");\n\n        assertEquals(\"Wrong query was generated\", expectedQuery, actualQuery);\n    }\n\n\n\nBooleanSingleChildOptimizationQueryNodeProcessor appears to be responsible because if I remove it, the correct query is generated (however, doing so breaks a number of other tests of our own.)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-11-06T21:48:42+0000",
            "content": "I guess another valid result of parsing this query could be:\n\n\n        BooleanQuery expectedQuery = new BooleanQuery();\n        expectedQuery.add(new TermQuery(new Term(\"text\", \"a\")), BooleanClause.Occur.SHOULD);\n        expectedQuery.add(new TermQuery(new Term(\"text\", \"b\")), BooleanClause.Occur.SHOULD);\n\n\n\nWhich would still keep the spirit of removing single-child boolean queries.\n\nWhat is actually generated, however, is the same query with MUST for both clauses. ",
            "author": "Trejkaz",
            "id": "comment-13145125"
        },
        {
            "date": "2014-01-21T22:06:37+0000",
            "content": "Seems to have been fixed in 3.6.2. ",
            "author": "Trejkaz",
            "id": "comment-13877912"
        },
        {
            "date": "2014-01-22T04:20:36+0000",
            "content": "I don't think the suggested test case is correct. It's not wrong either. The problem is that the query parsers (both classic and standard) return an optimized query. In my opinion, (+text:a) OR (+text:b) is the same as text:a OR text:b, but the latter is optimized. ",
            "author": "Adriano Crestani",
            "id": "comment-13878241"
        },
        {
            "date": "2014-01-22T12:52:45+0000",
            "content": "The expectation in the test case aside, what Lucene was actually returning was \"+text:a +text:b\", ignoring the OR entirely.\n\nThis seems to have been fixed somewhere between 3.6.0 and 3.6.2, though. ",
            "author": "Trejkaz",
            "id": "comment-13878608"
        },
        {
            "date": "2014-01-22T12:58:18+0000",
            "content": "And actually, if you read my original comment from 2011, I accepted that both being SHOULD would have been a valid result too. But that is definitely not what it was generating.  ",
            "author": "Trejkaz",
            "id": "comment-13878615"
        }
    ]
}