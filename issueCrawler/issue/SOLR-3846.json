{
    "id": "SOLR-3846",
    "title": "TestReplicationHandler.test always (?) takes many minutes on OS X (lion)",
    "details": {
        "affect_versions": "4.0-BETA,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "components": [
            "Build"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Here's the seed was using, but this is apparently unnecessary:\n\n<JUnit4> says \u00a1Hola! Master seed: 6785BB3284A15298\n\neventually it seems to complete, but it takes many minutes, for instance this was reported once, but I usually lose patience and ctrl-c out:\n\n[junit4:junit4] Completed on J2 in 2449.62s, 1 test\n[junit4:junit4] \n[junit4:junit4] JVM J0:     1.21 ..   266.67 =   265.47s\n[junit4:junit4] JVM J1:     1.21 ..   238.33 =   237.12s\n[junit4:junit4] JVM J2:     1.21 ..  2538.60 =  2537.39s\n[junit4:junit4] JVM J3:     0.97 ..   267.37 =   266.40s\n[junit4:junit4] Execution time total: 42 minutes 18 seconds\n\n\nand a lot of lines like:\nHEARTBEAT J2: 2012-09-16T17:38:38, no events in:  187s, approx. at: TestReplicationHandler.test\n\n\nYonik reports that he can make this happen 100% of the time on OS X/Lion, which squares with my experience as I recall. Yonik also reports...\n\nOn my linux box (built in '09, PhenomII, HDD) the test takes 50-55 sec.\nOn my kids old windows box ('08, athlon64, HDD, Win7) the test takes 88-95 sec.\n\nOn my mac it always takes forever, and I see loops of stuff like this:\n\n\nSEVERE Master at: http://localhost:62803/solr is not available. Index\nfetch failed. Exception:\norg.apache.solr.client.solrj.SolrServerException: Server refused\nconnection at: http://localhost:62803/solr\n[junit4:junit4]   2> 52751 T219 C17 UPDATE [collection1] webapp=/solr\npath=/update params={wt=javabin&version=2} {add=[150]} 0 0\n[junit4:junit4]   2> 52755 T219 C17 UPDATE [collection1] webapp=/solr\npath=/update params={wt=javabin&version=2} {add=[151]} 0 0\n[junit4:junit4]   2> 62758 T215 oash.SnapPuller.fetchLatestIndex\nSEVERE Master at: http://localhost:62803/solr is not available. Index\nfetch failed. Exception:\n\n\n\nAnd I'm soooo happy it's not happening to others and just being swept under the rug, restores my faith. I should have known better \n\nSee the discussion on the dev list labeled \"being a good citizen is hard when you can't successfully run tests\" for more context.\n\nI don't know how much time I'll have to dive in to it but I'll certainly be happy to test anyone's patch.",
    "attachments": {
        "stacks.txt": "https://issues.apache.org/jira/secure/attachment/12545361/stacks.txt",
        "SOLR-3846.patch": "https://issues.apache.org/jira/secure/attachment/12545363/SOLR-3846.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13456769",
            "date": "2012-09-17T05:20:54+0000",
            "content": "I'm seeing this on my macbook air as well. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13456771",
            "date": "2012-09-17T05:28:13+0000",
            "content": "Some of the more interesting stack traces where this is hanging...odd... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13456772",
            "date": "2012-09-17T05:30:47+0000",
            "content": "Those threads are locked up good - stack traces in the attached stacks.txt file. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13456774",
            "date": "2012-09-17T05:35:35+0000",
            "content": "I suppose the most suspicious looking fellow is:\n\n\"qtp1716711701-794\" prio=5 tid=7fe8a1b03800 nid=0x10f124000 waiting for monitor entry [10f122000]\n   java.lang.Thread.State: BLOCKED (on object monitor)\n\tat java.security.Permissions.implies(Permissions.java:162)\n\t- waiting to lock <7dee37460> (a java.security.Permissions)\n\tat sun.security.provider.PolicyFile.implies(PolicyFile.java:1111)\n\tat java.security.ProtectionDomain.implies(ProtectionDomain.java:224)\n\tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:352)\n\tat java.security.AccessController.checkPermission(AccessController.java:546)\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:532)\n\tat java.lang.reflect.AccessibleObject.setAccessible(AccessibleObject.java:107)\n\tat com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:84)\n\tat com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.internal.ConstructorConstructor.getConstructor(ConstructorConstructor.java:66)\n\tat com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:64)\n\tat com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.internal.bind.MiniGson.getAdapter(MiniGson.java:92)\n\tat com.carrotsearch.ant.tasks.junit4.dependencies.com.google.gson.Gson.toJson(Gson.java:504)\n\tat com.carrotsearch.ant.tasks.junit4.events.Serializer.serialize(Serializer.java:61)\n\t- locked <7dee9ec18> (a java.lang.Object)\n\tat com.carrotsearch.ant.tasks.junit4.slave.SlaveMain$4.write(SlaveMain.java:329)\n\tat java.io.BufferedOutputStream.flushBuffer(BufferedOutputStream.java:65)\n\tat java.io.BufferedOutputStream.flush(BufferedOutputStream.java:123)\n\t- locked <7dee420a0> (a java.io.BufferedOutputStream)\n\tat java.io.PrintStream.flush(PrintStream.java:288)\n\t- locked <7deeaebc8> (a java.io.PrintStream)\n\tat sun.nio.cs.StreamEncoder.implFlush(StreamEncoder.java:278)\n\tat sun.nio.cs.StreamEncoder.flush(StreamEncoder.java:122)\n\t- locked <7def6b868> (a java.io.OutputStreamWriter)\n\tat java.io.OutputStreamWriter.flush(OutputStreamWriter.java:212)\n\tat java.util.logging.StreamHandler.flush(StreamHandler.java:225)\n\t- locked <7def6ae48> (a java.util.logging.ConsoleHandler)\n\tat java.util.logging.ConsoleHandler.publish(ConsoleHandler.java:89)\n\tat java.util.logging.Logger.log(Logger.java:478)\n\tat org.slf4j.impl.JDK14LoggerAdapter.log(JDK14LoggerAdapter.java:579)\n\tat org.slf4j.impl.JDK14LoggerAdapter.info(JDK14LoggerAdapter.java:276)\n\tat org.apache.solr.update.processor.LogUpdateProcessor.finish(LogUpdateProcessorFactory.java:210)\n\tat org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:83)\n\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13456785",
            "date": "2012-09-17T06:14:19+0000",
            "content": "I think the first stack trace is more valuable than the one you posted. Maybe the problem is some crazy problem with IPv6 here, thats enabled by default on OS-X. It looks like this test maybe seems to use not \"127.0.0.1\" but instead \"localhost\" or anything else like InetAddrAdress.getLocalhost() and thats slow to lookup on OS-X? Intersttingly only this test has this problem, so there must be something different in this test - the lock here comes from the AccessController that waits for resolving some IPv6 adress to check if it falls. It similar to the stupid FreeBSD blackhole, some tests were more affected by this. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13456788",
            "date": "2012-09-17T06:25:22+0000",
            "content": "Can you try the attached patch if it brings back the test to speed?\n\nIf this solves the issue, we should fix some other tests (5 or so, most solr tests use correctly 127.0.0.1) to use the localhost ip adress directly.\n\nThe problem here is known to me, that resolving localhost on IPv6 enabled machines is slow and often causes problems. It looks like OS-X seems to go through DNS to get the ip adress (maybe it no longer has /etc/hosts).\n\nDon't ask me why this is a problem, but I was fighting against that several times (especially windows machines), so don't care and use the ip adress, we already do this in most othe tests. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13456842",
            "date": "2012-09-17T06:56:41+0000",
            "content": "And I'm soooo happy it's not happening to others and just being swept under the rug, restores my faith. I should have known better \n\nYes, I'm for sweeping things that don't work under the (JIRA-marked and annotated) rug, Yonik. Otherwise you get people like Erick who are on the edge of not running tests at all. I think it's bad and I think this kind of shows we're both right but have a different angle on this. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13456969",
            "date": "2012-09-17T12:38:30+0000",
            "content": "Thanks Uwe!\n\nI tried your patch, but a variant of the problem seemed to continue, but note the \"localhost\" in the URL. So I grepped for \"localhost\" in *.java and there were none. So then I tried grepping for localhost in *.xml and found three configs that I changed to 127.0.0.1 and the tests ran (the XML changes are in the attached patch). I have no clue whether this is the right thing to do but you seemed to have identified the problem.\n\nI'll run the tests repeatedly today and report if anything pops up.\n\nThanks again!\n\n[junit4:junit4]   2> 249902 T216 oash.SnapPuller.fetchLatestIndex SEVERE Master at: http://localhost:52274/solr is not available. Index fetch failed. Exception: org.apache.solr.client.solrj.SolrServerException: Server refused connection at: http://localhost:52274/solr\n[junit4:junit4]   2> 249904 T220 C17 UPDATE [collection1] webapp=/solr path=/update params=\n{wt=javabin&version=2} {add=[230]} 0 0\n[junit4:junit4] HEARTBEAT J0: 2012-09-17T08:07:57, no events in:  248s, approx. at: TestReplicationHandler.test\n[junit4:junit4]   2> 249907 T220 C17 UPDATE [collection1] webapp=/solr path=/update params={wt=javabin&version=2}\n \n{add=[231]}\n 0 0\n[junit4:junit4]   2> 259909 T216 oash.SnapPuller.fetchLatestIndex SEVERE Master at: http://localhost:52274/solr is not available. Index fetch failed. Exception: org.apache.solr.client.solrj.SolrServerException: Server refused connection at: http://localhost:52274/solr\n[junit4:junit4]   2> 259911 T220 C17 UPDATE [collection1] webapp=/solr path=/update params=\n{wt=javabin&version=2}\n \n{add=[232]}\n 0 1\n[junit4:junit4]   2> 269913 T216 oash.SnapPuller.fetchLatestIndex SEVERE Master at: http://localhost:52274/solr is not available. Index fetch failed. Exception: org.apache.solr.client.solrj.SolrServerException: Server refused connection at: http://localhost:52274/solr\n[junit4:junit4]   2> 269 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13456992",
            "date": "2012-09-17T13:19:36+0000",
            "content": "For me there were some more localhosts in *.java files. If you confirm that the bug is fixed, we should change all those to 127.0.0.1 everywhere. \n\nI think the problem seems to be that on OS-X \"localhost\" maps to some other (maybe IPv6) ipadress and Jetty always only listens on IPv4 in default config. what does \"ping localhost\" show as address?\n\nBtw: You patch contaisn some unrelated changes in JFlex. Before committing this we should get rid of all localhosts. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13457000",
            "date": "2012-09-17T13:26:01+0000",
            "content": "I think the problem seems to be that on OS-X \"localhost\" maps to some other (maybe IPv6) ipadress and Jetty always only listens on IPv4 in default config.\n\nIs this just our embedded jetty, or our stock server too?  This may be something we want to adress in the jetty config since users are very likely to use \"localhost\". "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457011",
            "date": "2012-09-17T13:35:54+0000",
            "content": "See also: http://bugs.sun.com/view_bug.do?bug_id=6230761 (Windows only9\n\nBy default Jetty only listens on IPv4 addresses... (I tested it with ,my linux box, \"netstat -an\" shows only the IPv4 address in the LISTEN section). If (on OSX) localhost maps to ::1 and not 127.0.0.1, then this fails.\n\nIn all cases we should use a consistent way to adress localhost in the tests, and for portability it should be 127.0.0.1 and not the \"non-canonic\" localhost.\n\nIn general for running tests, we should also make the included Jetty also listen explicit on 127.0.0.1 and not 0.0.0.0 (all interfaces). When running tests on my windows box the firewall always complains that its opening a port to the internet... This can be enabled in the internal jetty runner for tests to not only pass a random port, but also pass 127.0.0.1 using setHost() on the connector. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13457021",
            "date": "2012-09-17T13:50:11+0000",
            "content": "bq: Btw: You patch contaisn some unrelated changes in JFlex. Before committing this we should get rid of all localhosts.\n\nI meant to note that I never intended that patch to be committed, just putting it up for info. I suspect that there's some more generic fix available as you and Yonik have been discussing. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457029",
            "date": "2012-09-17T13:58:18+0000",
            "content": "This discussion was not meant as a more generic fix. The problem is to make it consistent through all tests. Most tests are already using 127.0.0.1, so we should use this address also in this tests. \"localhost\" is known to be broken on tons of systems (e.g. by modified /etc/hosts or by default pointing to ::1 in some linux distribs). Depending on OS kernel config, the internal redirection of ::1 to 127.0.0.1 done by lots of linux distribs is not really reliable.\n\nMy above proposal was an additional suggestion, to also make the \"listening\" address for tests spawning jetty to be hardcoded to 127.0.0.1 (IPv4 is always available). This prevents security warnings in windows and also makes the machine running tests more protected (it's serious to open ports on public interfaces!). The important thing: If we bind the local test jettes to 127.0.0.1, the connection URL used in tests/configs must be 127.0.0.1, too.\n\nIn general, I recommend to all people setting up local TomCats and Jetties (Solr) to explicitely use 127.0.0.1 as bind address in the server configs and always use the absolute localhost IP address in their client. This solves most problems and makes the systems much more secure, if external access is not needed. And if you have a reverse proxy in front, it is also mandatory to bind to 127.0.0.1 (security-wise). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13457069",
            "date": "2012-09-17T15:01:11+0000",
            "content": "I'm pretty sure this was affecting one of my tests on linux as well - it wouldn't hang, but it would randomly oscillate between taking 2 seconds and 2-3 minutes - the only pertinent stack trace I could get was in a socket read wait. I've been trying to figure out what's going on for a couple days now. There was no smoking gun getAddr stack trace like this though. Anyway, I checked and it had some localhost usage. I'm not home to test on my linux box, but that test is already looking better on my macbook air (last night it was also taking a long time on the air - this morning, after the change from localhost, it seems to be consistently faster).  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13457206",
            "date": "2012-09-17T18:25:05+0000",
            "content": "Looks like I mixed up this patch with the no-tab patch, so I removed it. \n\nHere's a new patch with the changes to the xml files as well as Uwe's changes. Running tests on 4x and trunk now and plan to commit it when I've verified that tests run unless there are objections. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457212",
            "date": "2012-09-17T18:34:14+0000",
            "content": "I am fine with that patch, but I found more \"localhosts\" in tests, grep throughout lucene:\n\n\nbash-4.1$ PATH=/bin find . -name '*.java' | xargs grep localhost\n./solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestContentStreamDataSource.java:\n     * on localhost at the specified port.\nFile ./solr/contrib/dataimporthandler/src/test/org/apache/solr/handler/dataimport/TestSolrEntityProcessorEndToEnd.java:\n  //rivate static final String SOLR_SOURCE_URL = \"http://localhost:8983/solr\";\n    return \"http://localhost:\" + port + \"/solr\";\nFile ./solr/core/src/java/org/apache/solr/cloud/SolrZkServer.java:\n    return \"localhost:\" + zkProps.getClientPortAddress().getPort();\n  // Given zkHost=localhost:1111,localhost:2222 this will inject\n  // server.0=localhost:1112:1113\n  // server.1=localhost:2223:2224\n    String myHost = \"localhost\";\n      // default to localhost:<solrPort+1001>\nFile ./solr/core/src/java/org/apache/solr/handler/admin/ShowFileRequestHandler.java:\n *   http://localhost:8983/solr/admin/file?file=schema.xml&contentType=text/plain\nFile ./solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java:\n    // maps \"localhost:8983|localhost:7574\" to a shuffled List(\"http://localhost:8983\",\"http://localhost:7574\")\n    // for back compat, a shards param with URLs like localhost:8983/solr will mean that this\nFile ./solr/core/src/java/org/apache/solr/handler/component/ShardResponse.java:\n  /** What was the shard address that returned this response.  Example:  \"http://localhost:8983/solr\" */\nFile ./solr/core/src/java/org/apache/solr/schema/RandomSortField.java:\n * <li>http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_1234%20desc</li>\n * <li>http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_2345%20desc</li>\n * <li>http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_ABDC%20desc</li>\n * <li>http://localhost:8983/solr/select/?q=*:*&fl=name&sort=rand_21%20desc</li>\nFile ./solr/core/src/java/org/apache/solr/util/SimplePostTool.java:\n  private static final String DEFAULT_POST_URL = \"http://localhost:8983/solr/update\";\n     \"  java -Durl=http://localhost:8983/solr/update/extract -Dparams=literal.id=a -Dtype=application/pdf -jar post.jar a.pdf\\n\"+\nFile ./solr/core/src/test/org/apache/solr/AnalysisAfterCoreReloadTest.java:\n      String url = \"http://localhost:\"+port+context+\"/\"+name;\nFile ./solr/core/src/test/org/apache/solr/schema/TestBinaryField.java:\n    String url = \"http://localhost:\" + jetty.getLocalPort() + context;\nFile ./solr/core/src/test/org/apache/solr/search/TestSolrJ.java:\n    String addr = \"http://localhost:8983/solr\";\n    HttpSolrServer client = new HttpSolrServer(\"http://localhost:8983/solr\");\nFile ./solr/core/src/test/org/apache/solr/TestSolrCoreProperties.java:\n    String url = \"http://localhost:\" + solrJetty.getLocalPort() + \"/solr\";\n   * on localhost at the specified port.\nFile ./solr/solrj/src/java/org/apache/solr/client/solrj/impl/HttpSolrServer.java:\n   *          <code>http://localhost:8983/solr/</code>\" if you are using the\nFile ./solr/solrj/src/java/org/apache/solr/client/solrj/impl/LBHttpSolrServer.java:\n  // keys to the maps are currently of the form \"http://localhost:8983/solr\"\nFile ./solr/solrj/src/test/org/apache/solr/client/solrj/embedded/JettyWebappTest.java:\n    String adminPath = \"http://localhost:\"+port+context+\"/\";\nFile ./solr/solrj/src/test/org/apache/solr/client/solrj/embedded/MultiCoreExampleJettyTest.java:\n      String url = \"http://localhost:\"+port+context+\"/\"+name;\n    String baseURL = \"localhost:\"+port+context+\"/\";\nFile ./solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleJettyTest.java:\n      String url = \"http://localhost/?core=xxx\";\nFile ./solr/solrj/src/test/org/apache/solr/client/solrj/embedded/SolrExampleStreamingTest.java:\n      String url = \"http://localhost:\"+port+context;       // smaller queue size hits locks more often\nFile ./solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleBinaryTest.java:\n      String url = \"http://localhost:\"+port+context;\nFile ./solr/solrj/src/test/org/apache/solr/client/solrj/SolrExampleXMLTest.java:\n      String url = \"http://localhost:\" + port + context;\nFile ./solr/solrj/src/test/org/apache/solr/client/solrj/TestLBHttpSolrServer.java:\n      return \"http://localhost:\" + port + \"/solr\";\nFile ./solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java:\n  // protected String[] deadServers = {\"does_not_exist_54321.com:33331/solr\",\"localhost:33332/solr\"};\n      String url = \"http://localhost:\" + port + context;\nFile ./solr/test-framework/src/java/org/apache/solr/cloud/AbstractDistribZkTestBase.java:\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\nFile ./solr/test-framework/src/java/org/apache/solr/cloud/AbstractFullDistribZkTestBase.java:\n      sb.append(\"localhost:\").append(j.getLocalPort()).append(context);\n      sb.append(\"|localhost:\").append(j2.getLocalPort()).append(context);\n      String url = \"http://localhost:\" + port + context + \"/\"\nFile ./solr/test-framework/src/java/org/apache/solr/SolrJettyTestBase.java:\n        String url = \"http://localhost:\"+port+context;\nbash-4.1$\n\n\n\nI think we should fix all of those in the same way, to be consistent in tests! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13457220",
            "date": "2012-09-17T18:51:52+0000",
            "content": "I'm not so sure we should change non-test uses of \"localhost\" at this point, esp since a release is right around the corner. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457226",
            "date": "2012-09-17T18:56:22+0000",
            "content": "I posted the whole grep, but only wanted to refer to src/test folder. I assumed it was clear from the corresponding comment. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13457241",
            "date": "2012-09-17T19:18:25+0000",
            "content": "Sure, I can try that.\n\nUwe:\nIs the ::1 pattern also a Bad Thing? See BaseDistributedTestCase[90] for one case... I'll grep for others if so.\n\n\nYeah, a number of the non-test cases occur in the SolrCloud stuff. I wouldn't dare change that until consulting with people who've done significant work in that area.\n\nRunning tests now with all the \"localhost\" entries I found in test files changed..... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13457254",
            "date": "2012-09-17T19:40:15+0000",
            "content": "OK, this patch includes substituting 127.0.0.1 for all occurrences of \"localhost\" in code in test files, including a bunch of base classes.\n\nAll the tests for 4x ran, running trunk now (it's a miracle, the patch is sufficient and complete for both!).\n\nSound like I should commit later tonight? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457255",
            "date": "2012-09-17T19:40:30+0000",
            "content": "I think the 2 IPv6 cases are sepcial: deadServers should explicitely assume not working server. I think using the IPv6 Adress was done to work around the FreeBSD blackhole (maybe). I am a little bit nervous, what happens if there is actually something listening on that port?\n\n\nFile ./solr/solrj/src/test/org/apache/solr/client/solrj/SolrExceptionTest.java:\n      SolrServer client = new HttpSolrServer(\"http://[ff01::114]:11235/solr/\", httpClient);\nFile ./solr/test-framework/src/java/org/apache/solr/BaseDistributedSearchTestCase.java:\n  protected String[] deadServers = {\"[::1]:33332/solr\"};\n\n\n\nI think the one in BaseDistributedSearchTestCase should use the same fake address like the first one: ff01::114, ff01 are \"reserved\" private addresses in IPv6 for thing like broadcasting. The connection will fail 100%. Can you try that, too? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457273",
            "date": "2012-09-17T20:09:35+0000",
            "content": "Erick: I think you can commit that later. I would only like to see a test when you replace the ::1 in BaseDistributedSearchTestCase by ff01::114?  The test is invalid, as Port 33332 might be used by some other service at the moment, so this is not \"safe\". You may also add more invalid addresses here: Maybe 3 of them, just replace the last 114 by 2 other numbers? Then you can emulate the old comment that failed on FreeBSD blackhole with 3 example servers! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13457486",
            "date": "2012-09-17T23:48:00+0000",
            "content": "New patch with Uwe's suggestions. All tests pass 4.x and trunk.\n\nWhen I said in my earlier message that I'd grepped java files for localhost I must have been on drugs. Or I had the filter set to *.xml or something; thanks for not believing me <G>...\n\nTo Commit or not to Commit? That is the question. I admit I'm ignorant as an apple about why this works, but it sure makes my problem go away. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13457493",
            "date": "2012-09-18T00:05:46+0000",
            "content": "<hits self on head with blunt object. Repeatedly>\n\nOf course the damn test runs. I managed to commit the 4.x version of TestReplicationHandler with the offending test @Ignore'd.\n\nBut I'm still reasonably optimistic, since I managed to remove it from the trunk and that runs.\n\nRe-running all that rot now, will post corrected patch when it completes. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13457529",
            "date": "2012-09-18T01:29:12+0000",
            "content": "This time fer sure.\n\nI think it's ready to commit. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457625",
            "date": "2012-09-18T06:03:21+0000",
            "content": "+1, It is a great improvement! Thanks for testing. I also ran all tests on windows locally and they successfully passed!\n\nFor another issue an improvement: In my dreams last night I found a very good solution for the problem with timeouting connections to IP addresses of \"dead\" servers (like we have seen in the above 2 tests). My idea how to solve this completely predictive (means it works on every computer, although firewall settings may delay execution,...):\n\nWe already have a security manager and policy. The idea would be to also implement checkConnect() and checkResolve() for this custom manager, which is called on every connect. This method checks for a set of \"default dead servers\" (would work with ip adresses, or fake host names): If it gets called with such an address, it could throw IOException (like a SocketConnectException) so make the fail predcicatable. The underlying O/S's network layer is then never called, so no timeouts can occur. As SecurityManager cannot throw checked exceptions, I would use:\n\n\nRethrow.rethrow(new IOException(\"Emulated network failure\"));\n\n\ninside the SecurityManager. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13457628",
            "date": "2012-09-18T06:07:26+0000",
            "content": "The blackhole problem could also be solved: If all started Jetties \"register\" themselves at LTC (like the MocjDirWrappers), this security manager could also keep track of used port numbers and make the no longer actoive ones fail early! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13457756",
            "date": "2012-09-18T11:40:57+0000",
            "content": "trunk: r1387099\n4.x  : r1387098\n\nUwe:\nWant to open another JIRA for your brainstorm? "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13610813",
            "date": "2013-03-22T16:37:00+0000",
            "content": "[branch_4x commit] Erick Erickson\nhttp://svn.apache.org/viewvc?view=revision&revision=1387098\n\nFixes for SOLR-3846 (very long tests on OS X for TestReplicationHandler) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654218",
            "date": "2013-05-10T10:34:26+0000",
            "content": "Closed after release. "
        }
    ]
}