{
    "id": "SOLR-6581",
    "title": "Efficient DocValues support and numeric collapse field implementations for Collapse and Expand",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "The 4x implementation of the CollapsingQParserPlugin and the ExpandComponent are optimized to work with a top level FieldCache. Top level FieldCaches have a very fast docID to top-level ordinal lookup. Fast access to the top-level ordinals allows for very high performance field collapsing on high cardinality fields. \n\nLUCENE-5666 unified the DocValues and FieldCache api's so that the top level FieldCache is no longer in regular use. Instead all top level caches are accessed through MultiDocValues. \n\nThis ticket does the following:\n\n1) Optimizes Collapse and Expand to use MultiDocValues and makes this the default approach when collapsing on String fields\n\n2) Provides an option to use a top level FieldCache if the performance of MultiDocValues is a blocker. The mechanism for switching to the FieldCache is a new \"hint\" parameter. If the hint parameter is set to \"top_fc\" then the top-level FieldCache would be used for both Collapse and Expand.\n\nExample syntax:\n\nfq={!collapse field=x hint=TOP_FC}\n\n\n\n3)  Adds numeric collapse field implementations.\n\n4) Resolves issue SOLR-6066",
    "attachments": {
        "renames.diff": "https://issues.apache.org/jira/secure/attachment/12689585/renames.diff",
        "SOLR-6581.patch": "https://issues.apache.org/jira/secure/attachment/12684689/SOLR-6581.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-03T14:25:41+0000",
            "author": "Joel Bernstein",
            "content": "The latest patch includes changes for both the CollapsingQParserPlugin and the ExpandComponent. These changes are designed to provide the 5.0 version with the same performance characteristics as the 4.0 versions.\n\nThis is somewhat of an interesting ticket as it involved exploring the tradeoffs of using the new Lucene DocValues class versus the UninvertedReader class which can be used to hook into the FieldCache. I'll update the description of this ticket with the details. ",
            "id": "comment-14233029"
        },
        {
            "date": "2014-12-29T22:19:47+0000",
            "author": "Joel Bernstein",
            "content": "A patch with the current state of the work being done. Patch includes implementations for top level String FieldCache and String MultiDocValues. The patch also includes initial implementations for collapsing on an integer field.  ",
            "id": "comment-14260485"
        },
        {
            "date": "2014-12-30T22:49:20+0000",
            "author": "David Smiley",
            "content": "While you are improving CollapsingQParserPlugin, I suggest doing some variable renames.  In my work I needed something like this code so I forked it to be modified, but found my first task was to do a bunch of renames so that it was clear what variable was for what.  The attached patch is a redacted version from my code and includes a tad bit of other stuff to be ignored, but see the change in variable names, and a getter rename or two.  As a random example, \"docId\" is unclear; is this a global doc ID or is it segment local?  Likewise for ordinals.  Arguably most of Lucene/Solr is guilty of this but this one source file I found hard to penetrate until I did the renames to decipher what's going on. ",
            "id": "comment-14261589"
        },
        {
            "date": "2014-12-31T14:04:24+0000",
            "author": "Joel Bernstein",
            "content": "Yeah, I see what you mean. I'm knee deep into a large refactoring of this code and I'll work on clarifying variables and naming conventions. \n\nI'm also adding specific implementations for collapsing on numeric fields which are a little slower at query time, but very real-time indexing friendly. Hope to wrap all this up this week. ",
            "id": "comment-14262192"
        },
        {
            "date": "2014-12-31T20:16:22+0000",
            "author": "Joel Bernstein",
            "content": "Latest work including test cases for collapsing on numeric field.  Not all tests are passing yet. ",
            "id": "comment-14262407"
        },
        {
            "date": "2015-01-03T14:55:39+0000",
            "author": "Joel Bernstein",
            "content": "Getting much closer. The numeric collapse field tests are now passing and variables have been renamed for clarity. ",
            "id": "comment-14263552"
        },
        {
            "date": "2015-01-05T19:34:19+0000",
            "author": "Joel Bernstein",
            "content": "Added implementation to the ExpandComponent to handle expanding on numeric fields. Test cases have not yet been updated to include numeric field expansion. ",
            "id": "comment-14264968"
        },
        {
            "date": "2015-01-06T18:44:06+0000",
            "author": "Joel Bernstein",
            "content": "New patch with working tests for the new ExpandComponent implementations. Test for expanding on Numeric fields is included. ",
            "id": "comment-14266539"
        },
        {
            "date": "2015-01-06T21:10:45+0000",
            "author": "Joel Bernstein",
            "content": "New patch adding testing for FAST_QUERY \"hint\" to the ExpandComponent tests. ",
            "id": "comment-14266769"
        },
        {
            "date": "2015-01-08T03:13:05+0000",
            "author": "Joel Bernstein",
            "content": "Patch with performance improvements for the ExpandComponent. Tests still need to be re-worked to support the performance enhancements. ",
            "id": "comment-14268771"
        },
        {
            "date": "2015-01-08T22:20:21+0000",
            "author": "Joel Bernstein",
            "content": "Patch with all updated trunk code and all tests passing. ",
            "id": "comment-14270137"
        },
        {
            "date": "2015-01-09T18:40:56+0000",
            "author": "Joel Bernstein",
            "content": "Added more error handling and removed all debugging/timing code. ",
            "id": "comment-14271675"
        },
        {
            "date": "2015-01-09T18:41:53+0000",
            "author": "Joel Bernstein",
            "content": "Very close to committing this now. I'll do some more manual testing and if all looks good I plan to commit in the next day or two. ",
            "id": "comment-14271676"
        },
        {
            "date": "2015-01-10T16:36:27+0000",
            "author": "Joel Bernstein",
            "content": "Patch with bugfix when collapsing on numeric fields that was turned up during manual testing. Testcases have be updated to catch this bug as well. ",
            "id": "comment-14272576"
        },
        {
            "date": "2015-01-11T21:44:47+0000",
            "author": "Joel Bernstein",
            "content": "unit test are passing, manual testing looks good, pre-commit passes.  ",
            "id": "comment-14273071"
        },
        {
            "date": "2015-01-12T02:24:46+0000",
            "author": "Yonik Seeley",
            "content": "FAST_QUERY doesn't give much of an idea of what's going on under the covers, and a more descriptive name would probably be better if more methods/optimizations may be added in the future.  Maybe something like \"top_fc\"?  Probably best to stick to lower case too...  ",
            "id": "comment-14273162"
        },
        {
            "date": "2015-01-12T02:59:31+0000",
            "author": "Joel Bernstein",
            "content": "\"top_fc\" sounds good to me. I'll make the change. ",
            "id": "comment-14273182"
        },
        {
            "date": "2015-01-12T13:40:36+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1651087 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1651087 ]\n\nSOLR-6581: Efficient DocValues support and numeric collapse field implementations for Collapse and Expand ",
            "id": "comment-14273597"
        },
        {
            "date": "2015-01-12T15:01:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1651109 from Joel Bernstein in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1651109 ]\n\nSOLR-6581: Efficient DocValues support and numeric collapse field implementations for Collapse and Expand ",
            "id": "comment-14273671"
        },
        {
            "date": "2015-01-14T14:35:05+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1651685 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1651685 ]\n\nSOLR-6581: Additional test for Collapse and fixed problem with Expand float tests ",
            "id": "comment-14276958"
        },
        {
            "date": "2015-01-14T15:04:58+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1651693 from Joel Bernstein in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1651693 ]\n\nSOLR-6581: Additional test for Collapse and fixed problem with Expand float tests ",
            "id": "comment-14277018"
        },
        {
            "date": "2015-01-14T17:26:17+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1651736 from Joel Bernstein in branch 'dev/branches/lucene_solr_5_0'\n[ https://svn.apache.org/r1651736 ]\n\nSOLR-6581: Additional test for Collapse and fixed problem with Expand float tests ",
            "id": "comment-14277259"
        },
        {
            "date": "2015-01-21T20:53:27+0000",
            "author": "Joel Bernstein",
            "content": "The hint in the code is still upper case TOP_FC. This was meant to be lower case. I'll open another issue for this and have it accept both cases. 5.0 will go out with the upper case syntax though so I'll update the documentation. ",
            "id": "comment-14286240"
        },
        {
            "date": "2015-02-23T05:01:34+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "id": "comment-14332724"
        },
        {
            "date": "2015-02-24T20:35:22+0000",
            "author": "Dallan Quass",
            "content": "Any ideas how much slower numeric collapse/expand implementation is than string collapse/expand with the top_fc hint? I'm trying to decide if I should re-index my int collapse field as a string. (I don't care about real-time performance.) ",
            "id": "comment-14335405"
        },
        {
            "date": "2016-07-25T16:07:34+0000",
            "author": "David Smiley",
            "content": "Dallan:\nAny ideas how much slower numeric collapse/expand implementation is than string collapse/expand with the top_fc hint?\n\nI would guess a numeric impl would beat a string impl every time.\n\nHey FYI everyone... this is weird but while I just finished doing a major Solr 4.10 -> Solr 6.1.0 upgrade, I found that the top_fc for the collapse had quite the opposite effect in a test environment with no indexing/commits.  top_fc took twice as long as without.  Shrug; no clue.  So folks don't go setting this blindly without actually measuirng before & after in your own environment. ",
            "id": "comment-15392175"
        },
        {
            "date": "2016-07-25T16:58:42+0000",
            "author": "Joel Bernstein",
            "content": "Were you using the sort param or max/min param? All the top_fc performance testing was done with max/min param. The sort param came later and I'm not sure how it performs with top_fc.\n\nThe top_fc param should always be the fastest approach when using min/max. If it's not then something odd is going on.\n ",
            "id": "comment-15392287"
        },
        {
            "date": "2016-07-25T17:12:06+0000",
            "author": "Joel Bernstein",
            "content": "David Smiley, can you post the query you were using. And also some specs on the data set and result set. Things like how many unique values in the collapse field, how documents in the result set pre-collapse. Thanks! ",
            "id": "comment-15392310"
        },
        {
            "date": "2016-07-25T18:00:57+0000",
            "author": "Joel Bernstein",
            "content": "I just ran a test with collapse on trunk and validated David Smiley findings.  Collapse at this point is so slow both with and without top_fc that it's really not fit for purpose. \n\nI'll dig a little to see if I can see what's happening. ",
            "id": "comment-15392392"
        },
        {
            "date": "2016-07-25T18:03:32+0000",
            "author": "David Smiley",
            "content": "Joel Bernstein It's a single index (shard) of 20.8M docs spanning 180 segments (kinda a lot I know) containing a string parent-document-id field with docValues.  The field is always populated and has almost as many distinct values as there are documents \u2013 18.9M. The collapse usage has max=(aBooleanField) and no sort.  I do see a field cache (UninvertedReader) entry on this field via looking at the admin screen (says it takes up ~403MB). ",
            "id": "comment-15392402"
        },
        {
            "date": "2016-07-25T18:32:28+0000",
            "author": "Joel Bernstein",
            "content": "Ok, false alarm. my initial tests were faulty. I thought a had loaded 5,000,000 docs and actually a had set the job to load 50,000,000 docs. So the test was running with the indexing running.\n\nAfter running a proper test I found that things are as expected. I'm seeing to_fc queries running almost 3 times faster with the top_fc hint.\n\nI was running with these simple queries:\n\n\n{!collapse field=test_s hint=top_fc}\n\nand\n\n{!collapse field=test_s}\n\n\n\nI had an index of 5 million docs and the test_s field had 1.8 million unique values.\n\nWith the top_fc hint the query was taking around 160 millis.\nWithout the top_fc hint the query was taking around 440 millis. ",
            "id": "comment-15392451"
        },
        {
            "date": "2016-07-25T18:44:05+0000",
            "author": "Joel Bernstein",
            "content": "Wow that's a hard case.\n\nThe string collapse is done into a fixed array the size of the unique values in the field. Similar to faceting on a string field. So we're talking about a huge amount of memory for a single query. Still not sure why MultiDocValues would outperform the top level field cache in this scenario. \n\nIn this scenario sharding would be very useful, but you would have to shard on the collapse field.\n ",
            "id": "comment-15392469"
        },
        {
            "date": "2016-07-25T18:51:59+0000",
            "author": "David Smiley",
            "content": "This is just one shard; the actual total collection is sharded beyond the levels most people shard.\n\nIn any case, maybe some time I'll peek into profiling what's going on to see if I can find any insights.  But that's low priority as our Solr 6 upgrade without the hint=top_fc is already a huge improvement overall. ",
            "id": "comment-15392478"
        },
        {
            "date": "2016-07-25T19:02:43+0000",
            "author": "Jeff Wartes",
            "content": "For what it's worth, I recall having a bad experience with that hint in a Solr 5.4 cluster late last year. I never did dig into why though.\nI had a similar case where I was collapsing on a highly distinct field, and as Joel indicates, the memory allocation rate was bad enough I had to give up on the whole thing. Joel and I discussed this a little in SOLR-9125 if you're curious. ",
            "id": "comment-15392504"
        }
    ]
}