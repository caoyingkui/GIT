{
    "id": "LUCENE-8344",
    "title": "TokenStreamToAutomaton doesn't ignore trailing posInc when preservePositionIncrements=false",
    "details": {
        "components": [
            "modules/suggest"
        ],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "7.4"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "TokenStreamToAutomaton in Lucene core is used by the AnalyzingSuggester (incl. FuzzySuggester subclass ) and NRT Document Suggester and soon the SolrTextTagger. \u00a0It has a setting\u00a0preservePositionIncrements defaulting to true.  If it's set to false (e.g. to ignore stopwords) and if there is a trailing position increment greater than 1, TS2A will still add position increments (holes) into the automata even though it was configured not to.\n\nI'm filing this issue separate from LUCENE-8332 where I first found it.  The fix is very simple but I'm concerned about back-compat ramifications so I'm filing it separately.  I'll attach a patch to show the problem.",
    "attachments": {
        "LUCENE-8344.patch": "https://issues.apache.org/jira/secure/attachment/12926121/LUCENE-8344.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16498266",
            "author": "David Smiley",
            "content": "The patch fixes the issue and has a couple tests.  It's a bit WIP; I just want to get this up here for you all to see.  I don't intend on working more on it today.  I think we need to identify back-compat issues with this.  Is it okay to tell people that on a minor release that they need to rebuild their suggester index to avoid this edge case bug?  For the NRT Doc Suggester, that may be a lot to task as it's not a side-car index. ",
            "date": "2018-06-01T17:14:39+0000"
        },
        {
            "id": "comment-16498455",
            "author": "Jim Ferenczi",
            "content": "I don't think a reindex is needed. With the fix we'll have an automaton that doesn't contain the hole which should still match the indexed version without the fix since it's a prefix of it. Did I miss something ? ",
            "date": "2018-06-01T19:36:55+0000"
        },
        {
            "id": "comment-16500343",
            "author": "David Smiley",
            "content": "To demonstrate the issue in the patch I added a \n TokenStreamToAutomaton.BUG boolean flag so a test can see what happens when the suggest index had trailing holes but differs at query time.\n\norg.apache.lucene.search.suggest.analyzing.AnalyzingSuggesterTest#testStandard see the \"round trip\" test\n With BUG==true: fails (bad for back-compat)\n With BUG==false: passes (therefore a reindex fixes)\n\norg.apache.lucene.search.suggest.document.TestPrefixCompletionQuery#testAnalyzerWithSepAndNoPreservePos see \"test trailing stopword with a new document\"\n With BUG==true: passes (good for back-compat)\n With BUG==false: fails\u00a0\n : however if you flip the analyzer passed to the PrefixCompletionQuery constructor to the \"completionAnalyzer\" (instead of the plain/original \"analyzer\"), then it passes.\u00a0 So\u00a0apparently this may require users change how it's used? (ouch)\n\nCC Areek Zillur ",
            "date": "2018-06-04T15:03:42+0000"
        },
        {
            "id": "comment-16500766",
            "author": "Jim Ferenczi",
            "content": "\norg.apache.lucene.search.suggest.document.TestPrefixCompletionQuery#testAnalyzerWithSepAndNoPreservePos see \"test trailing stopword with a new document\"\n\nIf you index with preservePositionIncrements=false you cannot match a query that preserves the position increments and contains a stop word. This is expected. \"baz the\" indexed with preservePositionIncrements=false cannot match the query \"baz the\" if you preserve the position increments. However it should work if you query \"baz\" with and without preserving the pos increment. This is why I said that the completion field (and all the related queries) should be fine with this change. It works without reindexing.\n\n\norg.apache.lucene.search.suggest.analyzing.AnalyzingSuggesterTest#testStandard see the \"round trip\" test\nWith BUG==true: fails (bad for back-compat)\nWith BUG==false: passes (therefore a reindex fixes)\n\nThis one is more tricky because it tries to find exact match first so the indexed version and the query version should be the same otherwise the assertion line 789 of the AnalyzingSuggester fails. We can probably fix the discrepancy by adding a BWC layer that removes the trailing POS_SEP of the indexed version when sameSurfaceForm is called and preservePosInc is false ? WDYT ? \nThis would remove the need to rebuild the FST on a version that contains the fix.\n ",
            "date": "2018-06-04T19:47:53+0000"
        },
        {
            "id": "comment-16500848",
            "author": "David Smiley",
            "content": "RE NRT Doc Suggester: \u00a0\"This is expected\" \u2013 Okay I see what you mean. \u00a0I guess if any user (past/present/future) wants to use\u00a0 preservePositionIncrements=false effectively then they need to be using CompletionAnalyzer/CompletionTokenStream both at index and\u00a0query time. \u00a0The existing tests are not doing that \u2013 it is using the input analyzer at query time. The particular two queries it did use in a test, \"fo\" and \"foob\" didn't demonstrate something important this test should be testing for \u2013 position increments\u00a0(stopwords) in the query. \u00a0Ditto for some similar test methods here (pos and negative assertions).  I'll try and improve this some.\n\nRE AnalyzingSuggester:  Hmmm.  What if the \"exactFirst\" logic first phase captured the \"output2\" lookup results in a place that could be examined by the second pass?  I think this would be more robust, and wouldn't need to even invoke sameSurfaceForm in second phase.  If the FST was built with the bug (7.3 or prior) then an exact match of a trailing stopword with this setting wouldn't be recognized as an exact match, but I think that's a minor loss easily fixed with reindexing? ",
            "date": "2018-06-04T21:04:54+0000"
        },
        {
            "id": "comment-16500922",
            "author": "Jim Ferenczi",
            "content": "The exact match pass filters prefix paths that don't end with END_BYTE so we'd have to change it to ignore trailing POS_SEPs (line 709 and 727). Though we have no way to infer the value of preservePositionIncrements for an indexed suggestion so I am not even sure that we can handle the BWC safely. Considering that re-build should be trivial in the AnalyzingSuggester, we could simply consider the fix a breaking change and discuss if it's acceptable to backport to 7x ? ",
            "date": "2018-06-04T22:01:17+0000"
        },
        {
            "id": "comment-16501217",
            "author": "David Smiley",
            "content": "Considering that re-build should be trivial in the AnalyzingSuggester, we could simply consider the fix a breaking change and discuss if it's acceptable to backport to 7x ?\n\nThat gets my vote! ",
            "date": "2018-06-05T02:49:23+0000"
        },
        {
            "id": "comment-16501717",
            "author": "Michael McCandless",
            "content": "we could simply consider the fix a breaking change and discuss if it's acceptable to backport to 7x ?\n+1 ",
            "date": "2018-06-05T12:54:18+0000"
        },
        {
            "id": "comment-16503741",
            "author": "ASF subversion and git services",
            "content": "Commit 7c6d74376a784224963b57cb8380a07279fd7608 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7c6d743 ]\n\nSOLR-12376: AwaitsFix testStopWords pending LUCENE-8344 ",
            "date": "2018-06-06T18:45:33+0000"
        },
        {
            "id": "comment-16503745",
            "author": "ASF subversion and git services",
            "content": "Commit 33b1c1d1416ed3b8dbce4066ad4b982a15e1b0d0 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=33b1c1d ]\n\nSOLR-12376: AwaitsFix testStopWords pending LUCENE-8344\n\n(cherry picked from commit 7c6d743) ",
            "date": "2018-06-06T18:47:23+0000"
        },
        {
            "id": "comment-16506649",
            "author": "David Smiley",
            "content": "The patch may be hard to review as a diff.  There are 3 tests now in TestPrefixCompletionQuery that are the same in data and queries but differ in expected results based on different CompletionAnalyzer settings.  I think it may be hard to maintain this as-such... it ought to be one so we don't have so much duplication and it may become easier to understand how the change in settings adjusts the expectations.  But hopefully you all think it's fine as is.\n\nAfter some reflection, I figured that if preserveSep=false, then preservePositionIncrement is irrelevant, and so that's why we have one fewer test method than 2x2 would suggest.  This ought to throw an exception to the user.  Perhaps 3 factory methods would be better than the one constructor with two booleans?  There's likely an analogous situation with AnalyzingSuggester's long constructor.  Anyway this proposal doesn't belong in this issue.\n\nSuggested CHANGES.txt notes:\n\n\tLUCENE-8344: TokenStreamToAutomaton (used by some suggesters) was not ignoring a trailing position increment when the preservePositionIncrement setting is false.  (David Smiley, Jim Ferenczi)\n\n\n\nUpgrading (a new section)\n\n\tLUCENE-8344: If you are using the AnalyzingSuggester or FuzzySuggester subclass, and if you explicitly use the preservePositionIncrements=false setting (not the default), then you ought to rebuild your suggester index.  If you don't, queries or indexed data with trailing position gaps (e.g. stop words) may not work correctly.\n\n ",
            "date": "2018-06-08T22:29:41+0000"
        },
        {
            "id": "comment-16511415",
            "author": "David Smiley",
            "content": "Any thoughts on this one Jim Ferenczi? ",
            "date": "2018-06-13T16:44:53+0000"
        },
        {
            "id": "comment-16511445",
            "author": "Adrien Grand",
            "content": "FYI Jim is on vacation for a couple weeks. ",
            "date": "2018-06-13T17:20:31+0000"
        },
        {
            "id": "comment-16511547",
            "author": "David Smiley",
            "content": "What about Areek Zillur who AFAIK wrote this stuff originally? ",
            "date": "2018-06-13T18:56:00+0000"
        },
        {
            "id": "comment-16511879",
            "author": "Jim Ferenczi",
            "content": "+1 to the patch and +1 to backport to 7.4 especially if ConcatenateGraphFilter is released in this version. ",
            "date": "2018-06-14T01:24:46+0000"
        },
        {
            "id": "comment-16511955",
            "author": "David Smiley",
            "content": "Thanks for the review during your vacation Jim! \u00a0Indeed CGF is in 7.4.\n\nI committed to master, branch_7x, and branch_7_4 but I don't yet see the comment bot saying so. \u00a0Here's a link to one such commit:\u00a0https://github.com/apache/lucene-solr/commit/228a84fd6db3ef5fc1624d69e1c82a1f02c51352 ",
            "date": "2018-06-14T03:49:36+0000"
        }
    ]
}