{
    "id": "SOLR-3039",
    "title": "ExtendedDismaxQParser should allow for extension of parsing-related behavior",
    "details": {
        "affect_versions": "6.0",
        "status": "Closed",
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "ExtendedDismaxQParser.parse does not currently allow for things like query pre-processing prior to its parsing, specifying the parser to be used, and whether particular clause should be included in the query being parsed. Furthermore, ExtendedDismaxQParser and inner ExtendedSolrQueryParser cannot be subclassed. By resolving this issue, we'll provide a way for Solr implementations to extend the parser and parsing related behavior.",
    "attachments": {
        "SOLR-3039.patch": "https://issues.apache.org/jira/secure/attachment/12510599/SOLR-3039.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Danny Dvinov",
            "id": "comment-13186374",
            "date": "2012-01-15T00:08:27+0000",
            "content": "Made ExtendedDismaxQParser public for implementations that will be extending it. "
        },
        {
            "author": "Danny Dvinov",
            "id": "comment-13241489",
            "date": "2012-03-29T18:30:22+0000",
            "content": "Refactored the previous change to be more generic to allow pre-processing user query prior to parsing for whatever reasons one might have (as opposed to only for expanding wildcarded terms). "
        },
        {
            "author": "Danny Dvinov",
            "id": "comment-13474572",
            "date": "2012-10-11T22:37:59+0000",
            "content": "Changes include:\n\n\tMaking ExtendedDismaxQParser public to allow implementations that can extend it (and pulling it out into a separate file, ExtendedDismaxQParser.java).\n\tMaking ExtendedSolrQueryParser protected to allow to allow implementations that can extend it.\n\tIntroducing 3 protected methods on ExtendedDismaxQParser to allow implementations that extend ExtendedDismaxQParser to override some of the behavior:\n1. ExtendedSolrQueryParser getQueryParser to allow specifying the parser used to parse the query.\n2. boolean includeClause(Clause clause) to allow overriding whether given clause should be part of the \n{@link org.apache.lucene.search.Query}\n being parsed.\n3. String preProcessUserQuery(String queryString) to allow pre-processing the query string prior to parsing.\n\n "
        },
        {
            "author": "Danny Dvinov",
            "id": "comment-13553382",
            "date": "2013-01-15T01:27:10+0000",
            "content": "Please feel free to make comments/suggestions! "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13553455",
            "date": "2013-01-15T03:27:25+0000",
            "content": "Haven't looked at the patch but I suspect it might be in conflict with Tom\u00e1s Fern\u00e1ndez L\u00f6bbe's SOLR-4208.  Oh, maybe not, SOLR-4208 was committed... assuming Danny based his latest patch on the more recent trunk revision?  I'm eyeing this with LUCENE-4499 in mind. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13553622",
            "date": "2013-01-15T10:07:44+0000",
            "content": "Yes, it looks like this patch is based on an older revision, prior to SOLR-4208. Most of the things that are suggested here were implemented and committed. \nI didn't add a \"preProecessUserQuery(...)\", I thought about this, but I think now it is something easier to extend now (either wrapping the parse method, overriding the \"getString()\" method, when parsing the configuration, when getting the different clauses, depending on the needs). I didn't thought it was necessary to add an empty hook for this. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13553967",
            "date": "2013-01-15T16:33:00+0000",
            "content": "Danny Dvinov maybe you can close after you've confirmed? "
        },
        {
            "author": "Danny Dvinov",
            "id": "comment-13554274",
            "date": "2013-01-15T20:18:22+0000",
            "content": "Thank you, Otis Gospodnetic and Tom\u00e1s Fern\u00e1ndez L\u00f6bbe, looked at Tomas' patch, and looks like it pretty much covers everything I was suggesting (and further improves the refactoring!). The only thing we won't be able to do out of the box is decide on whether or not a particular clause should be included/excluded while in splitIntoClauses (includeClause method from this suggested patch), but I suppose this is minor, and we could either override entire splitIntoClauses or just apply a minor patch to accomplish this. Thank you for looking into this! "
        }
    ]
}