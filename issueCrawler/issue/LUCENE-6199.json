{
    "id": "LUCENE-6199",
    "title": "Reduce per-field heap usage for indexed fields",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "Lucene uses a non-trivial baseline bytes of heap for each indexed\nfield, and I know it's abusive for an app to create 100K indexed\nfields but I still think we can and should make some effort to reduce\nheap usage per unique field?\n\nE.g. in block tree we store 3 BytesRefs per field, when 3 byte[]s\nwould do...",
    "attachments": {
        "LUCENE-6199.patch": "https://issues.apache.org/jira/secure/attachment/12694516/LUCENE-6199.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14291645",
            "author": "Michael McCandless",
            "date": "2015-01-26T10:15:00+0000",
            "content": "Initial patch w/ nocommits...\n\nThis gives a 2.4x reduction (137 MB to 56 MB) in heap usage in a\nsimple test that creates 100K indexed fields in a single-segment\nindex.\n\nI fixed Lucene50FISReader to share a single attributes map if it\nnotices that multiple fields have exactly the same attributes (the map\nis read-only).  It would be nice if we could fix this higher up,\ne.g. fix PerFieldXXXFormat to not store its attributes if the format\nis \"the default\" somehow.\n\nIt also moves some FST fields out to the builder, and adds a new\nFST BytesReader impl for when it's a single byte[] page.\n\nSeparately, CodecReader.ramBytesUsed is missing some per-field heap:\nit reports only 18.8 MB (out of 56 MB) with the patch ... I put some\nnocommits for the ones I could find.  I'll fix this in the next\niteration. "
        },
        {
            "id": "comment-14291749",
            "author": "Robert Muir",
            "date": "2015-01-26T12:02:11+0000",
            "content": "\nI fixed Lucene50FISReader to share a single attributes map if it\nnotices that multiple fields have exactly the same attributes (the map\nis read-only). It would be nice if we could fix this higher up,\ne.g. fix PerFieldXXXFormat to not store its attributes if the format\nis \"the default\" somehow.\n\nI don't think we should be doing this. This is letting the abuse case make our code (for field metadata, which is fucking important stuff!) more complicated.\n\n-1: let them buy more ram. "
        },
        {
            "id": "comment-14291759",
            "author": "Robert Muir",
            "date": "2015-01-26T12:12:51+0000",
            "content": "\nSeparately, CodecReader.ramBytesUsed is missing some per-field heap:\nit reports only 18.8 MB (out of 56 MB) with the patch ... I put some\nnocommits for the ones I could find. I'll fix this in the next\niteration.\n\nIts not missing, it just doesnt report trivial things. This only impacts abuse cases. Please do not make Fieldinfos Accountable, etc. Its high time lucene stopped letting abuse cases screw over the average case. "
        },
        {
            "id": "comment-14291850",
            "author": "Michael McCandless",
            "date": "2015-01-26T14:08:54+0000",
            "content": "Rob are you only vetoing the changes to Lucene50FIS?  I really don't think that's so much added complexity, but if you are vetoing it, I'll revert that part.\n\nAnd I'll just remove the nocommits about not accounting for RAM used by FieldInfos. "
        },
        {
            "id": "comment-14292717",
            "author": "Robert Muir",
            "date": "2015-01-27T00:27:53+0000",
            "content": "All i want is a reasonable tradeoff. You know, if the code can be rearranged so this stuff is clear and isn't causing bugs for non-abuse cases, then I think its ok. But the current stuff seems to go far too far?\n\nI don't fully get the blocktree changes without spending more time to understand if the right risk/reward tradeoffs (where reward is an abuse case) are being made, i mean maybe its fine, but could there be sneaky reuse bugs? Also why did we lose node/arc counts in stats? Was this on accident?\n\nThe FISReader attributes caching stuff seems extraordinarily risky. Are you sure it is really ok to suddenly become null where it was not before? Why not propose caching the attributes in SIReader too for abuse cases where people have too many segments?\n\ni think adding Accountable to FieldInfos will ultimately be very invasive no matter how you do it? And in most cases, this is pretty ridiculous right? Shouldnt we instead think about non-abuse cases like adding LiveDocs to this ram computation before looking at making FieldInfos more complex?\n\nHonestly, if the right tests are in place, i think I would get a lot less upset about it. But i don't like the idea of introducing bugs, that hurt real use cases, caused by complexity of optimizing abuse cases. Do you agree or disagree these changes are really scary? "
        },
        {
            "id": "comment-14299740",
            "author": "Michael McCandless",
            "date": "2015-01-31T09:50:10+0000",
            "content": "All i want is a reasonable tradeoff. \n\nWell, that is what I tried for in the current patch ... I think there are further things we could explore (e.g. packing N longs, which are often small) that I didn't do because that seemed too much.\n\nAlso why did we lose node/arc counts in stats? Was this on accident?\n\nThis wasn't by accident: you have access to these from the FST.Builder, and you can save them away if you really need them later (nothing does in Lucene).\n\ni think adding Accountable to FieldInfos will ultimately be very invasive no matter how you do it? \n\nOK I won't add Accountable to FIS...\n\nHonestly, if the right tests are in place, i think I would get a lot less upset about it. But i don't like the idea of introducing bugs, that hurt real use cases, caused by complexity of optimizing abuse cases. Do you agree or disagree these changes are really scary?\n\nI agree FIS.getAttributes should not be null, and I'll add a test case for that.  I'm happy to add further tests, what do you have in mind?  But net/net, no, I don't think these changes are scary: they look low risk to me, and they give an enormous reduction on per-indexd-field RAM used. "
        },
        {
            "id": "comment-14299752",
            "author": "Robert Muir",
            "date": "2015-01-31T10:33:00+0000",
            "content": "\n But net/net, no, I don't think these changes are scary: they look low risk to me, and they give an enormous reduction on per-indexd-field RAM used.\n\nFirst of all, no: the changes do not give even a noticeable reduction of RAM for 99.9% of users. Thats my number one problem.\n\nSecond, I am disappointed that you see this as low-risk. Perhaps the biggest risk of all is doing this with a shitty risk-reward. The reward is nothing, since it only impacts abuse cases.\n\nBut ill stay out of the way. This kinda stuff is why the codebase gets so damn complicated, because, without any reservations at all, we'd greatly overcomplicate very central core classes to lucene for use cases that flat out do not exist. "
        },
        {
            "id": "comment-14299755",
            "author": "Robert Muir",
            "date": "2015-01-31T10:49:01+0000",
            "content": "Maybe as a compromise, you can try to make a much smaller patch here that makes some progress on the abuse case you want to help.\n\nBut the current patch is a big problem, it adds WHOLE CLASSES to lucene and tons of crazy code. "
        },
        {
            "id": "comment-14299942",
            "author": "Michael McCandless",
            "date": "2015-01-31T19:05:19+0000",
            "content": "adds WHOLE CLASSES to lucene and tons of crazy code.\n\nOK ... I think I have an alternative approach that doesn't need the new classes for < 1 GB sized FSTs (the common case by far).  I'll try it. "
        },
        {
            "id": "comment-14299985",
            "author": "Robert Muir",
            "date": "2015-01-31T20:58:02+0000",
            "content": "Maybe the fieldinfos changes can be split out to a separate patch as well. this should be tiny and we can probably contain it and feel safe about it. "
        },
        {
            "id": "comment-14342121",
            "author": "Michael McCandless",
            "date": "2015-03-01T10:33:33+0000",
            "content": "New patch with a simpler approach:\n\n\n\tI took a different approach for < 1 GB FSTs, and removed the two\n    added classes.\n\n\n\n\n\tRemoved all nocommits about per-field RAM accounting being wrong.\n\n\n\n\n\tAdded a test case to BaseFIFormatTestCase to assert that a field's\n    attributes are never null; this failed in my last patch so I fixed\n    it to pass an empty map instead.\n\n "
        },
        {
            "id": "comment-14342123",
            "author": "Michael McCandless",
            "date": "2015-03-01T10:34:28+0000",
            "content": "Maybe the fieldinfos changes can be split out to a separate patch as well.\n\nThis change is really small and does make a big difference on per-field RAM usage.\n\nBut if you are really so against it, I can just remove it entirely? "
        },
        {
            "id": "comment-14342197",
            "author": "Robert Muir",
            "date": "2015-03-01T12:25:33+0000",
            "content": "\nThis change is really small and does make a big difference on per-field RAM usage.\n\nI don't think it does? If i have an index with say, 10 fields. How much will this patch save me? "
        },
        {
            "id": "comment-14342198",
            "author": "Robert Muir",
            "date": "2015-03-01T12:26:23+0000",
            "content": "\nNew patch with a simpler approach:\n\nIts still a 51KB patch. This is too much for an abuse case. It needs to be less invasive. "
        },
        {
            "id": "comment-14342201",
            "author": "Robert Muir",
            "date": "2015-03-01T12:32:48+0000",
            "content": "btw: I think you still missed my entire point. This is a big scary patch, to help only an abuse case.\n\nIt brings incredible risk to all lucene users, just to help a few that licked lead paint growing up.\n\nSo if we can break it down into digestible chunks, then I feel we can make steps to simplify the logic, carefully review changes, and improve tests to help reduce that risk. One digestible chunk at a time.\n\nBut if the only way this is gonna go in, is a huge scary patch that rips across the codebase changing codec code, then yeah, we shouldnt do it.  "
        },
        {
            "id": "comment-14342204",
            "author": "Robert Muir",
            "date": "2015-03-01T12:40:22+0000",
            "content": "I dont think the readStringStringMap is safe.\n\nThe problem is that the empty map is immutable and this breaks the expectations of callers of this method (bug). "
        },
        {
            "id": "comment-14342219",
            "author": "Robert Muir",
            "date": "2015-03-01T13:15:15+0000",
            "content": "I created a subtask for the readStringStringMap issue (LUCENE-6317). Can we tackle this one separate? \n\nI think we can do the same for other proposed changes here. It takes more time but prevents bugs. "
        },
        {
            "id": "comment-14342639",
            "author": "Robert Muir",
            "date": "2015-03-02T02:33:27+0000",
            "content": "\nThis gives a 2.4x reduction (137 MB to 56 MB) in heap usage in a\nsimple test that creates 100K indexed fields in a single-segment\nindex.\n\nDo you have this test? I am unhappy with several of the changes remaining in this patch, e.g. doing more object creation at runtime, hurting the typical case, to save a few bytes for abusers, because you can avoid a BytesRef per field. \n\nFIS changes on the subtasks (LUCENE-6317 and LUCENE-6318) are safe and should save the most per-field memory with the default configuration (100s of bytes per field). \n\nIMO we should not introduce performance regressions for typical cases to save an abuser 8 bytes, 8 megabytes, or even 8 gigabytes. But if we split out these controversial things we can examine them individually and maybe some can be improved without bad tradeoffs. "
        },
        {
            "id": "comment-14342801",
            "author": "Robert Muir",
            "date": "2015-03-02T05:59:24+0000",
            "content": "also see LUCENE-6320, it has another improvement to FIS. In general if you have an abuse-case like this, you probably can't even run checkindex without that patch today  "
        }
    ]
}