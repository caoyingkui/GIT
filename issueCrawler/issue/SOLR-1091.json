{
    "id": "SOLR-1091",
    "title": "\"phps\" (serialized PHP) writer produces invalid output",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The serialized PHP output writer can outputs invalid string lengths for certain (unusual) input values.  Specifically, I had a document containing the following 6 byte character sequence: \\xED\\xAF\\x80\\xED\\xB1\\xB8\n\nI was able to create a document in the index containing this value without issue; however, when fetching the document back out using the serialized PHP writer, it returns a string like the following:\n\ns:4:\"\u00ed\u00af\u20ac\u00ed\u00b1\u00b8\";\n\nNote that the string length specified is 4, while the string is actually 6 bytes long.\n\nWhen using PHP's native serialize() function, it correctly sets the length to 6:\n\n\n\tphp -r 'var_dump(serialize(\"\\xED\\xAF\\x80\\xED\\xB1\\xB8\"));'\nstring(13) \"s:6:\"\u00ed\u00af\u20ac\u00ed\u00b1\u00b8\";\"\n\n\n\nThe \"wt=php\" writer, which produces output to be parsed with eval(), doesn't have any trouble with this string.",
    "attachments": {
        "SOLR-1091.patch": "https://issues.apache.org/jira/secure/attachment/12417898/SOLR-1091.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Donovan Jimenez",
            "id": "comment-12693517",
            "date": "2009-03-29T04:42:27+0000",
            "content": "I haven't look at the java code, but my guess would be its setting string length as the character length (which is encoding dependent) where serialized php actually uses the byte length so it can be binary safe (independent of encodings used for textual strings). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12706260",
            "date": "2009-05-06T00:00:59+0000",
            "content": "Is this valid unicode?  The serialized PHP writer already calculates the size of the UTF-8 encoded string, so it's difficult to see what's going on. "
        },
        {
            "author": "Donovan Jimenez",
            "id": "comment-12706458",
            "date": "2009-05-06T15:31:56+0000",
            "content": "the character sequence specified seems to be windows 1252 - based on just getting it to look like what's in the description in a text editor. \n\nI see it getting the utf-8 byte length now, but is the output writer guaranteed to be outputting in utf-8? sorry if it's a naive question, I do see the content-type is text/plain; charset=utf-8 - does that change the output writer's encoding?\n\nif it IS guaranteed, then maybe its how the character data is added - i.e. the add xml was interpreted utf-8 but the data was actually windows-1252 or similar. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12740971",
            "date": "2009-08-08T21:17:05+0000",
            "content": "Does anyone know if there is actually a bug here, and if so, how it should be fixed? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12748160",
            "date": "2009-08-26T21:26:37+0000",
            "content": "If someone can give a URL that demonstrates incorrect behavior before 1.4 is released, we can look at it.\n\nSince parameters are echoed back by default, please provide something of the following form to help us reproduce:\nhttp://localhost:8983/solr/select?q=abcdef&a=problematic_string&wt=phps "
        },
        {
            "author": "frank farmer",
            "id": "comment-12748165",
            "date": "2009-08-26T21:36:18+0000",
            "content": "http://localhost:8983/solr/select?q=abcdef&a=%ED%AF%80%ED%B1%B8&wt=phps\n\nClearly 6 bytes, but again solr's output claims only 4. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12748169",
            "date": "2009-08-26T21:48:35+0000",
            "content": "Thanks Frank, do you know what unicode code points this input corresponds to?\nI'm still not sure if those bytes are valid UTF8 (which would explain why you don't get 6 chars back) - if the input is incorrectly encoded, the output may not be what you expect. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12748172",
            "date": "2009-08-26T21:53:12+0000",
            "content": "Looking closer at the byte sequence, this really looks like invalid UTF8 since the 8th bit is set on every byte. The decoder is probably just doing the best that it can with this, but the result isn't going to be what you want in any case. "
        },
        {
            "author": "frank farmer",
            "id": "comment-12748174",
            "date": "2009-08-26T21:54:09+0000",
            "content": "As far as I know, the string is garbage.  However, PHP's serialize() operates on bytes, not characters.  So any 6 byte string of data (whether those bytes are valid unicode, or just binary gibberish) should always be preceded by \"s:6:\".  \n\n6 bytes in, 6 bytes out  "
        },
        {
            "author": "frank farmer",
            "id": "comment-12748184",
            "date": "2009-08-26T22:11:43+0000",
            "content": "My concern is not that solr do anything specific with this garbled data, only that wt=phps always returns a string that can be run through unserialize() without error.\n\nHere's the exact case in which I encountered this bug, which may help explain why I reported this issue in the first place:\n\n1) Somehow, a user inserted the aforementioned sequence of bytes in some user-editable content in my application.\n2) My code blindly passed that data directly into solr (in retrospect, I should probably be filtering anything that's not valid UTF-8)\n3) Users ran queries which included the affected document\n4) My code tried to unserialize() the output, and failed with a PHP error (simply replacing the offending \"s:4:\" with \"s:6:\" caused the output to unserialize without issue, however).  This caused my users to be unable to retrieve results for many queries.\n\nLong story short, if you let users insert arbitrary byte sequences into your index (which I'll admit is naive, but I'm sure I'm not the only one who's done this), and you use wt=phps, a malicious user can effectively cause a DoS.\n\nAgain, I don't care about actually getting these bytes back out of solr unmangled.  I only care that the output of wt=phps make it through unserialize() without causing a PHP error. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12748212",
            "date": "2009-08-27T00:00:01+0000",
            "content": "Hmmm, I thought this might be a decoding error.  Instead it perhaps looks like the JVM not handling UTF8 encoding the same as Jetty.\n\nAs one can see by this:\n$ curl --trace - 'http://localhost:8983/solr/select?q=abcdef&a=%ED%AF%80%ED%B1%B8&wt=phps'\n\nThe ascii portion of the dump looks like:\ns:4:\"......\";\n\nSo the JVM is telling us that the string will serialize to 4 bytes, and when Jetty actually does the serialization, it comes out to 6.\n\nJava's String.getBytes() does have the following warning:\n\n\t<p> The behavior of this method when this string cannot be encoded in\n\tthe given charset is unspecified.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12748228",
            "date": "2009-08-27T01:04:13+0000",
            "content": "Echoing the param from the python writer (which escapes chars outside the ascii range) shows that the internal UTF-16 string after decoding the invalid UTF8 is \\udbc0\\udc78\n\nThis represents unicode code point 1048696, which encoded into UTF8 should be\nf4 80 81 b8  (4 bytes).\n\nThus, I'm thinking that it's perhaps a jetty bug in not being able to handle characters outside the BMP? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12748403",
            "date": "2009-08-27T15:23:11+0000",
            "content": "Confirmed - it's jetty.  The latest version of Jetty exhibits the same behavior - it produces incorrect UT8 for code points outside the BMP.  I tried with LucidWorks/Solr (Tomcat based) and it works correctly by only outputting 4 bytes. "
        },
        {
            "author": "frank farmer",
            "id": "comment-12748419",
            "date": "2009-08-27T16:17:38+0000",
            "content": "Thanks for looking in to this.  I take it this issue can be closed, and I should go open a ticket against Jetty? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12748447",
            "date": "2009-08-27T17:06:57+0000",
            "content": "Here's a patch that can handle the modified UTF8 that Jetty puts out, as well as speeding up the normal UTF8 case using Lucene's UTF8 encoding.\n\nmodified UTF8 support is switched on if the jetty.home property is set (jetty does this by default). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12748943",
            "date": "2009-08-28T19:02:53+0000",
            "content": "committed. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12754714",
            "date": "2009-09-13T16:05:40+0000",
            "content": "Additional patch that allows overriding of the CESU-8 guess with the CESU8 system property.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12755727",
            "date": "2009-09-15T21:59:06+0000",
            "content": "reopening because of discssion on list and yonik's new patch.\n\nYonik: this looks good, but i would suggest changing the system property to \"solr.phps.cesu8\" so people don't set it and then later forget what it's for. \n\nThe javadoc are also a little abiguous about what people should set it to, how about...\n\n\n\nIn order to support PHP Serialized strings with a proper byte count, This ResponseWriter \nmust know if the Writers passed to it will result in an output of CESU-8 (UTF-8 w/o support \nfor large code points outside of the BMP)\n\nCurrently Solr assumes that all Jetty servlet containers (detected using the \"jetty.home\" \nsystem property) use CESU-8 instead of UTF-8 (verified to the current release of 6.1.20).\n\nIn installations where Solr auto-detects incorrectly, the Solr Administrator should set the\n\"solr.phps.cesu8\" system property to either \"true\" or \"false\" accordingly.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12755740",
            "date": "2009-09-15T22:20:57+0000",
            "content": "committed suggestions. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775701",
            "date": "2009-11-10T15:52:00+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}