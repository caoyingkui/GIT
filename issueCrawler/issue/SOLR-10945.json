{
    "id": "SOLR-10945",
    "title": "Get expression fails to operate on sort expr",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.6",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Get expr fails to operate on a variable which has sort stream and returns \"Invalid MergeStream - all substream comparators (sort) must be a superset of this stream's comparator.\" Exception tuple.\n\nBelow get is given variable a and b which are having sort expr and fails to work\n==\nlet(\na=sort(select(tuple(id=3,email=\"C\"),id,email),by=\"id asc,email asc\"),\nb=sort(select(tuple(id=2,email=\"B\"),id,email),by=\"id asc,email asc\"),\nc=merge(get(a),get(b),on=\"id asc,email asc\"),\nget(c)\n)\n\n{\n  \"result-set\": {\n    \"docs\": [\n      {\n        \"EXCEPTION\": \"Invalid MergeStream - all substream comparators (sort) must be a superset of this stream's comparator.\",\n        \"EOF\": true\n      }\n    ]\n  }\n}\n\nwhile below sort outside get works\n==\nlet(\na=select(tuple(id=3,email=\"C\"),id,email),\nb=select(tuple(id=2,email=\"B\"),id,email),\nc=merge(sort(get(a),by=\"id asc,email asc\"),sort(get(b),by=\"id asc,email asc\"),\non=\"id asc,email asc\"),\nget(c)\n)\n\n{\n  \"result-set\": {\n    \"docs\": [\n      \n{\n        \"email\": \"B\",\n        \"id\": \"2\"\n      }\n,\n      \n{\n        \"email\": \"C\",\n        \"id\": \"3\"\n      }\n,\n      {\n        \"EOF\": true,\n        \"RESPONSE_TIME\": 0\n      }\n    ]\n  }\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-29T14:50:55+0000",
            "content": "Hi Joel - I looked the code to debug this issue and here is what i found\n\nThe above two expressions (...merge(get(a)... or ...merge(sort(get(a)...) which are similar (mathematically/syntactically/functionally) as a whole,  but the one which fails where merge is passed get(a) directly, results into error since GetStream is passed in the merge init method and GetStream.getStreamSort() method returns null (below) while in the other case SortStream is passed  its getStreamSort() method returns proper comparator.  \n\nWondering how can we handle this either by passing StreamComparator to GetStream (and how) or do something in merge to not upfront check.  Please share your thoughts\n\n  /** Return the stream sort - ie, the order in which records are returned */\n  public StreamComparator getStreamSort()\n{\n    return null;\n  }\n\nMergeStream\n\u2013\n private void init(StreamComparator comp, TupleStream ... streams) throws IOException {\n\n    // All streams must both be sorted so that comp can be derived from\n    for(TupleStream stream : streams){\n      if(!comp.isDerivedFrom(stream.getStreamSort()))\n{\n        throw new IOException(\"Invalid MergeStream - all substream comparators (sort) must be a superset of this stream's comparator.\");\n      }\n    } ",
            "author": "Susheel Kumar",
            "id": "comment-16068433"
        }
    ]
}