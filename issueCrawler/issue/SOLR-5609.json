{
    "id": "SOLR-5609",
    "title": "Don't let cores create slices/named replicas",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.8",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In SolrCloud, it is possible for a core to come up in any node , and register itself with an arbitrary slice/coreNodeName. This is a legacy requirement and we would like to make it only possible for Overseer to initiate creation of slice/replicas\n\nWe plan to introduce cluster level properties at the top level\n\n/cluster-props.json\n\n{\n\"noSliceOrReplicaByCores\":true\"\n}\n\n\nIf this property is set to true, cores won't be able to send STATE commands with unknown slice/coreNodeName . Those commands will fail at Overseer. This is useful for SOLR-5310 / SOLR-5311 where a core/replica is deleted by a command and  it comes up later and tries to create a replica/slice",
    "attachments": {
        "SOLR-5609_5130.patch": "https://issues.apache.org/jira/secure/attachment/12628771/SOLR-5609_5130.patch",
        "SOLR-5609.patch": "https://issues.apache.org/jira/secure/attachment/12631295/SOLR-5609.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-13863200",
            "date": "2014-01-06T18:26:41+0000",
            "content": "There was a discussion to revert SOLR-5311 in favor of an explicit configuration parameter to achieve the same "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13863216",
            "date": "2014-01-06T18:42:04+0000",
            "content": "I don't really like this design.\n\nI think the mode that tries to make ZK the truth should end up being the standard mode. We don't want some confusing param for this that looks like an option and controls just how cores register.\n\nWe want something like one option that will become the new default - something name like \"legacyCloudMode\". \n\nWe could start putting it in as legacyCloudMode=false when we want to default to it. Eventually we would remove the legacy mode in a major release most likely. We can't afford to support it long term IMO.\n\nHaving legacyCloudMode (or whatever it's named) = false should allow the cluster to disable the ability for cores to create collections or remove them and turn on the features that let the cluster use zk as the truth.\n\nThen we can have further options for more advanced cluster behavior.\n\nMaking ZK the truth should be the default mode when you are not using our legacy mode though. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13863227",
            "date": "2014-01-06T18:48:50+0000",
            "content": "The other thing to note, is that we don't have to have this new mode do everything that makes sense to do to make zk the truth initially. It's ability to make zk the truth can improve over time. We won't be limited by the history that are with the legacy mode.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13864241",
            "date": "2014-01-07T13:47:21+0000",
            "content": "makes sense to have an omnibus property like \"legacyCloudMode\"  rather than having specific properties for each behavior. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13874900",
            "date": "2014-01-17T16:07:29+0000",
            "content": "We should really be discussing this under SOLR-5096.\n\nHaving legacyCloudMode (or whatever it's named) = false should allow the cluster to disable the ability for cores to create collections or remove them and turn on the features that let the cluster use zk as the truth.\n\n+1 in general. This also bring up the question of what features are must to have to use zk as the truth. I don't think we can have users invoke core admin CREATE and UNLOAD commands directly. Instead they should use collection APIs such as addReplica and deleteReplica exclusively. These APIs will invoke overseer commands (to assign a coreNodeName) and then invoke the core admin APIs.\n\nThe other thing to note, is that we don't have to have this new mode do everything that makes sense to do to make zk the truth initially. It's ability to make zk the truth can improve over time. We won't be limited by the history that are with the legacy mode.\n\nI think at a minimum we need to implement this mode plus SOLR-5130 (addReplica API) before we release this. The modifyCollection APIs and other things can come in later.\n\nWhat do you think? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13896397",
            "date": "2014-02-10T11:11:35+0000",
            "content": "Takeaway from my discussion with Mark Miller .\n\n If legacyCloud=false , delete the \"collection1\" or \"defaultcol\" cores when they send the STATE commands "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13897645",
            "date": "2014-02-11T08:55:50+0000",
            "content": "Commit 1567014 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1567014 ]\n\nSOLR-5609 Reverting accidental commit "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13900430",
            "date": "2014-02-13T15:30:34+0000",
            "content": "\n\tCLUSTERPROP handling moved to Overseer from OCP\n\thonors legacyCloud=false\n\taddReplica command\n\ttests for addReplica\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13904077",
            "date": "2014-02-18T14:14:21+0000",
            "content": "more testcases \nre-enabled the DeleteInactiveReplica test which was Ignored earlier "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13904288",
            "date": "2014-02-18T17:28:50+0000",
            "content": "OverseerCollectionProcessorTest was failing "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13905473",
            "date": "2014-02-19T14:18:43+0000",
            "content": "another test added "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13905598",
            "date": "2014-02-19T15:58:42+0000",
            "content": "I don't think we can have users invoke core admin CREATE and UNLOAD commands directly. Instead they should use collection APIs such as addReplica and deleteReplica exclusively. These APIs will invoke overseer commands (to assign a coreNodeName) and then invoke the core admin APIs.\n\nNoble and I had an offline discussion about this \u2013 The coreadmin CREATE will fail if used directly against a collection in the new mode. The UNLOAD will still work but it won't remove the node from cluster state. This is because the removeReplica API must also call UNLOAD after removing the node from cluster state so the unload has to work independently. I don't see a way around that. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13905649",
            "date": "2014-02-19T16:31:18+0000",
            "content": "I don't really see a problem with that. I think we want to keep this new zk=truth mode subject to change for a few releases and the semantics of any of the commands can still be worked out. The most important part is that you can't create a new collection by creating a new core. Unload is not really tied into that. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13910252",
            "date": "2014-02-24T12:33:32+0000",
            "content": "Commit 1571264 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1571264 ]\nSOLR-5609 Don't let cores create slices/named replicas , SOLR-5130 addReplica Collections API "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13910272",
            "date": "2014-02-24T13:09:46+0000",
            "content": "Commit 1571272 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1571272 ]\n\nSOLR-5609 Don't let cores create slices/named replicas , SOLR-5130 addReplica Collections API "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13910279",
            "date": "2014-02-24T13:17:50+0000",
            "content": "Commit 1571276 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1571276 ]\n\nSOLR-5609 Don't let cores create slices/named replicas , SOLR-5130 addReplica Collections API "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13910283",
            "date": "2014-02-24T13:21:17+0000",
            "content": "Commit 1571279 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1571279 ]\n\nSOLR-5609 Don't let cores create slices/named replicas , SOLR-5130 addReplica Collections API "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910466",
            "date": "2014-02-24T16:41:19+0000",
            "content": "The test in this will not pass locally for me - I get the same failure you see from the jenkins cluster. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910477",
            "date": "2014-02-24T16:51:25+0000",
            "content": "\n+      try {\n +        if(reader.getZkClient().exists(ZkStateReader.CLUSTER_PROPS,true))\n +          reader.getZkClient().setData(ZkStateReader.CLUSTER_PROPS,ZkStateReader.toJSON(m),true);\n +        else\n +          reader.getZkClient().create(ZkStateReader.CLUSTER_PROPS, ZkStateReader.toJSON(m),CreateMode.PERSISTENT, true);\n +        clusterProps = reader.getClusterProps();\n +      } catch (Exception e) {\n +        log.error(\"Unable to set cluster property\", e);\n +\n +      }\n\n\n\nThis doesn't seem good? You just log an error and don't return a problem to the client? And it's not handling interrupted exception properly?\n\nWe should also probably use the ensureExists code up front to create the clusterstate prop node rather than do this if / then stuff.\n\nCan we change this code to be more in line with similar code that is already in? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910479",
            "date": "2014-02-24T16:53:53+0000",
            "content": "if (baseUrl.startsWith(\"http://\")) baseUrl = baseUrl.substring(7);\n\nThis doesn't seem right? Why was this added? We can't have special code that looks for http anymore. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910483",
            "date": "2014-02-24T16:56:08+0000",
            "content": "\n-    Replica parentShardLeader = null;\n -    try {\n -      parentShardLeader = zkStateReader.getLeaderRetry(collectionName, slice, 10000);\n -    } catch (InterruptedException e) {\n -      Thread.currentThread().interrupt();\n -    }\n -\n +    Replica parentShardLeader = clusterState.getLeader(collectionName, slice);\n\n\n\nWhy was this change made? You have moved to an API that might return null for the leader and it's not handled at all. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910488",
            "date": "2014-02-24T16:58:24+0000",
            "content": "\n-    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toString().toLowerCase(Locale.ROOT));\n +    Map<String, Object> map = ZkNodeProps.makeMap(Overseer.QUEUE_OPERATION, action.toLower());\n\n\n\nWhy was this done? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910498",
            "date": "2014-02-24T17:03:07+0000",
            "content": "\n-  private void handleProp(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n + /* private void handleProp(ZkNodeProps message, NamedList results) throws KeeperException, InterruptedException {\n      String name = message.getStr(\"name\");\n      String val = message.getStr(\"val\");\n      Map m = zkStateReader.getClusterProps();\n @@ -440,7 +444,7 @@ private void handleProp(ZkNodeProps message, NamedList results) throws KeeperExc\n  \n  \n  \n -  }\n +  }*/\n\n\n\nWhy comment that out?  Shouldn't we just clean up? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910528",
            "date": "2014-02-24T17:23:47+0000",
            "content": "checkStateInZk(cd);\n\nDo you have testing for that? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910531",
            "date": "2014-02-24T17:25:49+0000",
            "content": "Also, in checkStateInZk:\n\n\n+          if(cd.getName().equals(r.get(ZkStateReader.CORE_NAME_PROP)) && getBaseUrl().equals(r.get(ZkStateReader.BASE_URL_PROP))){\n\n\n\nThat should use the core node name to match up and not the base url. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13910533",
            "date": "2014-02-24T17:26:09+0000",
            "content": "Why was this change made? You have moved to an API that might return null for the leader and it's not handled at all.\n\n I don't remember making that change.  May be it an SVN merge issue. I will take a look right away\n\nWhy was this done?\n\nThat toLowerCase() was looking ugly. But I guess we can avoid that too\n\nWhy comment that out? Shouldn't we just clean up?\n\nYes. It should have been cleaned up "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13910540",
            "date": "2014-02-24T17:27:50+0000",
            "content": "Do you have testing for that?\n\nYes. It is in the DeleteInactiveReplicaTest "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910541",
            "date": "2014-02-24T17:28:37+0000",
            "content": "As a general comment, there is a lot of odd spacing and new lines - can we use the std project formatting? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13910544",
            "date": "2014-02-24T17:29:57+0000",
            "content": "That should use the core node name to match up and not the base url.\n\nThere was a problem , the first time the core is created there is no corenodename assigned. Hence I was comparing the BASE_URL && CORENAME "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13910560",
            "date": "2014-02-24T17:40:12+0000",
            "content": "This doesn't seem good? You just log an error and don't return a problem to the client? \n\nThe problem is , AFAIK , the Overseer does not have a way to return an error to the client "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13910576",
            "date": "2014-02-24T17:52:57+0000",
            "content": "I thought the cluster props were managed via the collections api?\n\nAre you saying that for all of that api, if the call fails, the client learns of it, but for this one, it will just silently fail unless they dig through the cluster logs to notice? I see this code is in the Oveerseer, so internally it's different, but from a user level, that seems wrong.\n\nOr what am I missing? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13910587",
            "date": "2014-02-24T18:05:07+0000",
            "content": "This doesn't seem right? Why was this added? We can't have special code that looks for http anymore.\n\nI didn't add this either , I guess the last SVN merge screwed up a lot of stuff . I'm looking into the code and removing the wrong additions \n\nI thought the cluster props were managed via the collections api?\nYes, the CLUSTERPROP is a collections API\n\nThe CollectionsHandler is just posting this request to Overseer Queue directly. Unlike most of our APIs this one just does not need the help of OCP. The only possible failure is a ZK write fail. Overseer is not able to communicate the error back . If there is a failure we only come to know about it indirectly .  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13910750",
            "date": "2014-02-24T20:09:39+0000",
            "content": "Commit 1571421 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1571421 ]\n\nSOLR-5609 , removing accidental changes "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13910775",
            "date": "2014-02-24T20:29:42+0000",
            "content": "Commit 1571428 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1571428 ]\n\nSOLR-5609 , removing accidental changes "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13911546",
            "date": "2014-02-25T13:06:25+0000",
            "content": "Mark Miller\n\nI'm planning to change the comparing base_url by creating the coreNodeName upfront. I'm going to fix that soon "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13913228",
            "date": "2014-02-26T17:49:28+0000",
            "content": "Stop comparing baseUrl and core name use coreNodeName.\n\nthe CollectionsAPIDistributedZkTest.testCollectionsAPI() will randomly switch between legacy and non-legacy modes "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13914137",
            "date": "2014-02-27T06:50:23+0000",
            "content": "Commit 1572449 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1572449 ]\n\nSOLR-5609 use coreNodeName to compare replicas, CollectionsAPIDistributedZkTest.testCollectionsAPI() randomly switches to legacyCloud=false "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13914446",
            "date": "2014-02-27T12:16:07+0000",
            "content": "Commit 1572530 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1572530 ]\n\nSOLR-5609 use coreNodeName to compare replicas, CollectionsAPIDistributedZkTest.testCollectionsAPI() randomly switches to legacyCloud=false "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13970990",
            "date": "2014-04-16T12:56:49+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-14002643",
            "date": "2014-05-20T00:36:43+0000",
            "content": "Noble Paul, shouldn't this be resolved with a fix version of 4.8? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14002907",
            "date": "2014-05-20T07:31:19+0000",
            "content": "resolved "
        }
    ]
}