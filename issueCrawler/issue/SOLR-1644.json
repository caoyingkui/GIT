{
    "id": "SOLR-1644",
    "title": "Provide a clean way to keep flags and helper objects in ResponseBuilder",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Many components such as StatsComponent, FacetComponent etc keep flags and helper objects in ResponseBuilder. Having to modify the ResponseBuilder for such things is a very kludgy solution.\n\nLet us provide a clean way for components to keep arbitrary objects for the duration of a (distributed) search request.",
    "attachments": {
        "SOLR-1644.patch": "https://issues.apache.org/jira/secure/attachment/12427712/SOLR-1644.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12789226",
            "date": "2009-12-11T10:42:34+0000",
            "content": "Let us keep a Map in RB so that each component can store/retrieve  any values it want. It can be considered as a session object . "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12789236",
            "date": "2009-12-11T11:06:32+0000",
            "content": "Don't you have it already with the SolrQueryRequest.getContext() "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789251",
            "date": "2009-12-11T11:33:30+0000",
            "content": "A new Map is kept is ResponseBuilder. It is also possible to use SolrQueryRequest.getContext(). Let us make that call.\n\nEvery component keeps a private Object as the key and stores values by that key in rb.store . No other component can access that value because the key is a private Object  (So no conflict).  The patch illustrates  how FacetComponent has eliminated the variables from ResponseBuilder. If it is fine , we can remove the rest of it too such as doStats,needDocList,needDocSet etc "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12789259",
            "date": "2009-12-11T12:00:41+0000",
            "content": "It should also be possible to share objects between components to eliminate duplicate computations (if one component can re-use a computation that was already done in another component). I guess this can be supported by publishing the key as a public static field. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789271",
            "date": "2009-12-11T12:16:36+0000",
            "content": "I guess this can be supported by publishing the key as a public static field.\n\nWe should not keep it static. public final should be good enough "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12789290",
            "date": "2009-12-11T13:07:57+0000",
            "content": "We should not keep it static. public final should be good enough\n\nIs there a special reason for this? Is the plan to have a KEY per component instance? If so, how would it be possible to refer to the key from other components?\n\nThis is what I had in mind - Assuming Component1 computed something and registered it in the store using KEY. Then Component2 can reuse this computation by accessing it as follows: \n\n\nObject someValue = rb.store.get(Component2.KEY);\n// do something with someValue\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12789745",
            "date": "2009-12-12T14:21:58+0000",
            "content": "While we should make it easy for custom components to store their own flags + state, etc, we should be careful about hiding the state of well known components.  It's OK to hide internal implementation stuff, but we should leave anything useful to other components exposed (and more explicitly spell out what it means, if it can be changed by another component, etc).\n\nWhether a request is a faceting request or not could certainly be useful to other components... and as a bonus it eliminates a hash lookup for each component each time through the loop. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789911",
            "date": "2009-12-13T16:22:39+0000",
            "content": "While we should make it easy for custom components to store their own flags + state, etc, we should be careful about hiding the state of well known components\n\nBy keeping the key public we ensure that other components can see/change it.\n\nit eliminates a hash lookup for each component each time through the loop\n\nWe do 100s of hash lookups in each request. This one change can keep the ResponseBuilder from being a kitchen sink and the design cleaner .\n\nIs the plan to have a KEY per component instance? If so, how would it be possible to refer to the key from other components?\n\nyou are right. We should make it public static. I hope that there aren't multiple instances of the same component registered in the same handler\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12789917",
            "date": "2009-12-13T17:15:04+0000",
            "content": "This one change can keep the ResponseBuilder from being a kitchen sink\n\nBut we should do it selectively.  Replacing a bunch of flags with public strings that one needs to look up doesn't seem to be an improvement.\n\nif (rb.doHighlighting)\n vs\nif ((Boolean)rb.store.get(HighlightingComponent.DO_HIGHLIGHTING)) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789919",
            "date": "2009-12-13T17:28:33+0000",
            "content": "if ((Boolean)rb.store.get(HighlightingComponent.DO_HIGHLIGHTING))\n\nThis may cause NPE\n\nso it will look like \n\nif (rb.store.get(HighlightingComponent.DO_HIGHLIGHTING) == Boolean.TRUE)\n\ndefinitely it looks verbose (ugly) . But the point is where do we stop? Which all components qualify to be important enough. Is 'my component' more/lessimportant than FacetComponent. If we set a coding standard , isn't that better? I believe the public API's  should have no dependency on components . "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12789920",
            "date": "2009-12-13T18:12:53+0000",
            "content": "if (rb.store.get(HighlightingComponent.DO_HIGHLIGHTING) == Boolean.TRUE)\n\nThis is verbose... too verbose to my taste. I believe a Store interface can help here which provide access to data by a key and will also provide helper methods to keep the code clean. (a MapStore can be a simple implementation which wraps a Map<String, Object> instance):\n\n\npublic interface Store {\n\n    Boolean getBoolean(String key);\n    boolean getBoolean(String key, boolean defaultValue);\n    \n    Integer getInt(String key);\n    int getInt(String key, int defaultValue);\n\n    //other methods for all primitive types and dates.\n}\n\n\n\nso now you have:\n\n\nif (rb.store.getBoolean(HighlightingComponent.DO_HIGHLIGHTING, false))\n\n\n\nwhich is cleaner and is NPE-safe.\n\nI believe the public API's should have no dependency on components .\nI agree. Basically avoid having circular dependencies. You don't want to change the platform API every time you introduce a new component. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12789925",
            "date": "2009-12-13T18:39:57+0000",
            "content": "definitely it looks verbose (ugly) . But the point is where do we stop?\n\nWhere it makes sense.  There's no reason for an all or nothing approach.  There's no reason not to give some special treatment to some main components.\n\nIf one want's to better decompose some of the state for each handler, I guess there could be objects that represented that too?\nclass ResponseBuilder {\n  QueryInfo queryInfo;\n  FacetInfo facetInfo;\n}\n\nBut perhaps we should have gone with the same strategy as the UpdateProcessorChain... an actual object is created for each component to keep the state for the request.\n\nI believe the public API's should have no dependency on components .\n\nChanging from a method or member to a hash lookup doesn't reduce a dependency when it's needed.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12789986",
            "date": "2009-12-14T04:52:22+0000",
            "content": "But perhaps we should have gone with the same strategy as the UpdateProcessorChain\n\nyes, it is. because there are more than one method call per component per request. Should we still try to do it?\n\nChanging from a method or member to a hash lookup doesn't reduce a dependency when it's needed.\n\nnot true. The fact is that ResponseBuilder stops depending on other components . It is ok for components to depend on  ResponseBuilder.\n\nI believe a Store interface can help here which provide access to data by a key \n\nLooks better.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12791266",
            "date": "2009-12-16T08:33:41+0000",
            "content": "implemented as Uri said "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12796119",
            "date": "2010-01-04T09:08:29+0000",
            "content": "no changes to any component. The Store field is created. and if any component wishes to use it , it can do so.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872628",
            "date": "2010-05-27T22:09:31+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043863",
            "date": "2011-06-03T16:47:27+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106332",
            "date": "2011-09-16T14:50:37+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412089",
            "date": "2012-07-11T22:25:58+0000",
            "content": "bulk fixing the version info for 4.0-ALPHA and 4.0 all affected issues have \"hoss20120711-bulk-40-change\" in comment "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429766",
            "date": "2012-08-07T03:42:48+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13445552",
            "date": "2012-08-31T01:22:22+0000",
            "content": "There is no indication that anyone is actively working on this issue, so removing 4.0 from the fixVersion. "
        }
    ]
}