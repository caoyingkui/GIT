{
    "id": "SOLR-7896",
    "title": "Add a login page for Solr Administrative Interface",
    "details": {
        "components": [
            "Admin UI",
            "Authentication",
            "security"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "5.2.1",
        "status": "Reopened",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Now that Solr supports Authentication plugins, the missing piece is to be allowed access from Admin UI when authentication is enabled. For this we need\n\n\tSome plumbing in Admin UI that allows the UI to detect 401 responses and redirect to login page\n\tPossibility to have multiple login pages depending on auth method and redirect to the correct one\n\tAngularJS HTTP interceptors\u00a0to add correct HTTP headers on all requests when user is logged in\n\n\n\nThis issue should aim to implement some of the plumbing mentioned above, and make it work with Basic Auth.",
    "attachments": {
        "logout.png": "https://issues.apache.org/jira/secure/attachment/12943033/logout.png",
        "unknown_scheme.png": "https://issues.apache.org/jira/secure/attachment/12943035/unknown_scheme.png",
        "login-page.png": "https://issues.apache.org/jira/secure/attachment/12943030/login-page.png",
        "login-screen-2.png": "https://issues.apache.org/jira/secure/attachment/12951008/login-screen-2.png",
        "dispatchfilter-code.png": "https://issues.apache.org/jira/secure/attachment/12919901/dispatchfilter-code.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-07T05:03:01+0000",
            "author": "Erick Erickson",
            "content": "Please bring this kind of thing up on the user's list rather than raise JIRAs to be sure you're not simply misunderstanding things. If it's a real problem in Solr, then raise a JIRA.\n\nSolr has never been intended to allow end-user access and thus has never implemented this kind of security. You allow me to get to the Solr URL directly and I can\nhttp://machine:port/solr/collection/update?commit=true&stream.body=<delete><query>:</query></delete>\n\nAll your docs are gone. ",
            "id": "comment-14661324"
        },
        {
            "date": "2015-08-07T05:16:07+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "You are in luck. Basic authentication has been added for the next release (5.3). See SOLR-7837.\n\nAlso, Solr has supported SSL for a while now, see https://cwiki.apache.org/confluence/display/solr/Enabling+SSL ",
            "id": "comment-14661334"
        },
        {
            "date": "2015-08-07T05:17:51+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Of course, this doesn't mean that you should expose Solr to the world-wide-web. It is still not secure against all kinds of attacks. ",
            "id": "comment-14661338"
        },
        {
            "date": "2015-08-07T05:19:46+0000",
            "author": "Aaron Greenspan",
            "content": "SSL should be enabled by default. ",
            "id": "comment-14661339"
        },
        {
            "date": "2015-08-07T05:22:21+0000",
            "author": "Aaron Greenspan",
            "content": "It's all well and good to say that users shouldn't do things, but they're being done, and the code needs to be written to account for real-world use, not some hypothetical ideal that doesn't exist.\n\nAlso, I would love for Solr to just be exposed exclusively on my server's internal IP address(es)--but I have no idea how to do that. The administrative web interface certainly doesn't let me select which IPs to bind to, which would be the easy way to implement that ideal. But regardless, it should never be assumed that every user will want to or know to operate Solr the same way (e.g. exclusively on a LAN behind a firewall). ",
            "id": "comment-14661341"
        },
        {
            "date": "2015-08-07T05:23:10+0000",
            "author": "Aaron Greenspan",
            "content": "I find it incredibly surprising that you could write the above and then change the issue status to \"Not a Problem.\" ",
            "id": "comment-14661342"
        },
        {
            "date": "2015-08-07T05:33:23+0000",
            "author": "Upayavira",
            "content": "Given we have a new auth framework, and SSL support, this is do-able. I've not yet payed with, nor needed to, play with either.\n\nThe benefit of discussing on the User list first, as Erick suggests, is to get more of an understanding of the use-cases you are looking at before we decide on an approach to solving them.\n\nErick is right - Solr is not something that has traditionally been placed outside a firewall, because, well, it hasn't offered features that would allow that. This is starting to change, and I think auth on the admin UI would be a good thing, although I'm not yet in a position to work on it.\n\nTherefore, I'm inclined to re-open, even if I'm aware it'd take me some time to get around to it. ",
            "id": "comment-14661360"
        },
        {
            "date": "2015-08-07T05:34:19+0000",
            "author": "Upayavira",
            "content": "As a slightly longer term goal, I believe this ticket does have merit, and given we have auth capabilities in Solr now, it makes sense to place the admin UI behind that. ",
            "id": "comment-14661361"
        },
        {
            "date": "2015-08-07T05:37:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "SSL should be enabled by default.\n\nI disagree. We have the option. People who need it can use them. We also have kerberos support so you can use that too along with SSL if you're really paranoid about security.\n\nIt's all well and good to say that users shouldn't do things, but they're being done, and the code needs to be written to account for real-world use, not some hypothetical ideal that doesn't exist.\n\nYeah, which is why we are building some support for security. But enabling it by default requires a lot of education for new users. We need to balance between the two. Perhaps some of this can be done via documentation? For example, we can link to the guides on SSL/Kerberos/BasicAuth on the \"Taking Solr to Production\" page?\n\nhttps://cwiki.apache.org/confluence/display/solr/Taking+Solr+to+Production\n\nAlso, I would love for Solr to just be exposed exclusively on my server's internal IP address(es)--but I have no idea how to do that. \n\nYou can do that by setting the \"SOLR_HOST\" property to the internal hostname or IP address in solr.in.\n{sh,cmd}\n. The problem with doing that from the admin web interface is:\n\n\tSolr has already started and bound to a port by then so reconfiguring from the UI is a bit difficult\n\tWe don't have enough people contributing to the admin UI sadly so contributions are hard to come by. That being said, we have a new committer (Upayavira) who is working on improving the UI these days, so there's still hope \n\n ",
            "id": "comment-14661364"
        },
        {
            "date": "2015-08-07T05:38:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "As a slightly longer term goal, I believe this ticket does have merit, and given we have auth capabilities in Solr now, it makes sense to place the admin UI behind that.\n\nUpayavira, this already works if you enable Basic Auth via the new capabilities added by SOLR-7837 ",
            "id": "comment-14661366"
        },
        {
            "date": "2015-08-07T06:51:41+0000",
            "author": "Shawn Heisey",
            "content": "Regarding SSL on by default ... while this would provide some security out of the box, it annoys me when I try to connect to a web interface and I am immediately greeted by a security warning regarding a certificate that doesn't validate.  An experienced user knows that it is safe to ignore that warning and proceed anyway, but a beginner may misinterpret what their browser is telling them, decide that Solr has security problems, and go looking for a different solution.\n\nI would rather present an insecure interface out of the box so that a new user can immediately see that their install is operational.  I'd be OK with a warning box on every page telling the user that they should enable SSL, as long as it could be removed with a config change.  Turning on SSL should be very easy for a novice to do.  Another piece that must be straightforward is the installation of a custom certificate that the user might get from a public CA, and any required intermediate certificates.\n\nAs already mentioned, we have a framework for authentication coming in 5.3.  Once we are sure it's stable and effective, turning on authentication for the admin UI by default would be a good idea.  The out-of-the-box credentials should be easy to locate on our website, in the first few pages of the documentation, and one or more of the .txt files included in the download. ",
            "id": "comment-14661410"
        },
        {
            "date": "2015-08-24T09:04:40+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I would rather present an insecure interface out of the box so that a new user can immediately see that their install is operational. I'd be OK with a warning box on every page telling the user that they should enable SSL, as long as it could be removed with a config change. Turning on SSL should be very easy for a novice to do.\n+1\n\nturning on authentication for the admin UI by default would be a good idea. The out-of-the-box credentials should be easy to locate on our website, in the first few pages of the documentation, and one or more of the .txt files included in the download.\n-0\n\nPerhaps not by default, it would make the simplest tutorial unnecessary complicated. And it would only work for cloud anyway. How about adding some warnings to Admin UI in cloud mode if authentication is not enabled and another warning if it is enabled with ootb passwords. And we could add an -auth flag to /bin/solr -e cloud to optionally start the cloud example with basic auth enabled... ",
            "id": "comment-14708990"
        },
        {
            "date": "2015-08-24T13:14:29+0000",
            "author": "Konstantin Gribov",
            "content": "My point on enabling/disabling SSL by default is that Solr is often behind firewall and near to back-end which use it, they are both in some kind of private network, so TLS will be cpu, network and management overhead for such cases. I believe that it's primary use case and exposed Solr installations are rare.\n\nAlso, requiring admin UI auth seems to be a good idea only at first glance. \n\nUnder the cover it will require non-trivial role model to separate user actions and admin actions on all available handlers (like discussed in SOLR-7838) which heavy depends on configured handlers and use case: sometimes update is normal action for user and delete by id is not, sometimes delete by id should be allowed, but delete by query shouldn't etc.\n\nAnother potential issue with self-made security framework is creating high quality security modules. If some of them may be created and distributed with Solr, so pass some QA by Solr committers, third party modules can have lesser quality and affect overall Solr experience. Buggy or just slow third party security filter will lead to bad user experience. Credentials and authN/authZ rules caching and synchronization are other hard-to-implement-correctly part, especially in distributed environment.\n\nSince role to user mapping is non-trivial and authN/authZ is hard to configure, security setup as standard Solr installation step would be frightening for many users. I think, it should be optional for users, who want or have to use such security model. ",
            "id": "comment-14709254"
        },
        {
            "date": "2015-08-25T09:49:28+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Changed title and description to reflect that this is a new feature request about adding a login screen to the Admin UI, as the Basic Authentication plugin already supports the very simplest way of requiring a user/pass for all of Solr.\n\nSome initial text by Aaron Greenspan was removed from the issue description to keep it short and concise. Pasting it here for reference:\n\nApparently there are ways of configuring Jetty to do this with HTTP AUTH or whatever. I'm a moderately experienced Linux admin and a programmer; I've tried, numerous times, and I've not once been able to get it to work. The point is this, though:\n\nNo one should have to try to get their Solr instance to support password authentication and preferably SSL (even if it's just with a self-signed certificate). Solr is designed to store huge amounts of data and is therefore a likely target for malicious users.\n\nThis needs to be addressed! It's 2015 and Solr is on version 5! ",
            "id": "comment-14711015"
        },
        {
            "date": "2015-08-25T10:07:03+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Let's keep this issue focused on loggin in to the Admin UI..\n\nSome questions regarding a possible Solr Admin Login:\n\n\tShould it be SolrCloud only?\n\tShould it require an Authentication Plugin to be configured or be separate? Can the login screen support any and all Auth methods? How?\n\tWhat about Single Sign on? Cookies?\n\t\n\t\tIf you log in to one Solr node, should we require another login if you navigate to another node?\n\t\n\t\n\tIf SSL is configured, can we treat SSL client certificate based auth as a valid login, independent of what AuthPlugin is configured?\n\n\n\nOnce the Admin UI has a login, we have the framework for adapting the UI depending on what roles the logged-in user has, i.e. create collection etc, that would be a bunch of new JIRAs. ",
            "id": "comment-14711034"
        },
        {
            "date": "2017-03-20T14:10:26+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Guess we could use this AngularJS module https://github.com/sahat/satellizer for the frontend. It uses JWT\nOn the Solr end we'd need to add e.g. /auth/login/ endpoint to validate the login.\nOn the Admin UI end we'd need to add the login controller and a login screen/dialogue.\nGuess we'd also need to add some kind of TokenAuthenticationPlugin which validates the Authorization: Bearer <token> header much in the same way that we have a special path to validate the SolrAuth header for PKI auth. This fellow could also take care of Single Sign on (to support user browsing away to another solr node) by securely asking the original Solr node if the token is valid.\nFurther, the Admin UI will on first load make a request to Solr to ask wether login will be required, and if so, pop up the dialogue immediately.\n\nDo I miss anything here? Anyone who have experience in these things?\nHow do the /auth/login endpoint validate a user login in case of Kerberos/Hadoop auth? Perhaps by forwarding user with OAuth2 to some other server in the network? I'm quite blank on this.. ",
            "id": "comment-15932690"
        },
        {
            "date": "2017-03-20T14:38:27+0000",
            "author": "Alexandre Rafalovitch",
            "content": "I think Satellizer is for 3rd party authentication. So, with user authenticating to Google/Twitter and Solr using that for internal access. That feels like a different thing from what I understand us having - which is basic authentication with passwords stored internally. ",
            "id": "comment-15932737"
        },
        {
            "date": "2017-03-20T15:01:11+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Solr may be protected by any AuthPlugin, not only BasicAuth, so we need something that is future proof too. Of course if we limit this to only supporting BasicAuthPlugin we could let the UI add user:pass for all requests directly. However, I was hoping to have something generic. So for the BasicAuth case I think we could be using the email/password flow: https://github.com/sahat/satellizer#-login-with-email-and-password and let Solr backend validate the user/pass? ",
            "id": "comment-15932776"
        },
        {
            "date": "2017-03-20T15:54:22+0000",
            "author": "Shawn Heisey",
            "content": "Been a while since I said anything on this issue.  I have skimmed the newest comments, but haven't read them in-depth.\n\nFor security on the admin UI, do we want basic authentication, or do we want to use a form-and-cookie approach like the vast majority of web applications?  HTTP basic authentication is probably the only sane choice for the API, though.\n\nEnabling SSL out of the box still seems like a bad idea, and enabling authentication on the API by default also seems like a bad idea.  Requiring authentication out of the box for the admin UI, probably with cookies, doesn't seem quite so insane, though.  It might be the sort of thing where no password exists initially, but the first time you access the UI, it forces you to set one.  In cloud mode, that would probably update zookeeper, affecting all Solr instances.\n\nWhat would be really nice to have is the ability to enable/disable and configure API authentication within the admin UI. ",
            "id": "comment-15932884"
        },
        {
            "date": "2018-03-08T08:50:26+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Reviving this.\nRequiring authentication out of the box for the admin UI, probably with cookies, doesn't seem quite so insane, though. It might be the sort of thing where no password exists initially, but the first time you access the UI, it forces you to set one\nWhat good does it do to authenticate with Admin UI if the Solr APIs are not protected? You can't do a thing in Admin that you cannot do with curl \u00a0So the login feature must somehow relate to all the auth plugins available in Solr. Many plugins will require username/password input and can probably use the same login form in AdminUI, but let the Java plugin validate pw in a different way. Other methods may require custom JS code in the UI.\n\nSo the UI must probably be pluggable in this area. ",
            "id": "comment-16390925"
        },
        {
            "date": "2018-03-09T08:20:17+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "It would also be nice to allow a different Auth method for Admin UI users than for API users, e.g. allow API clients to use Kerberos while AdminUI users can login with BasicAuth and local users. Currently you must choose between the two, but security.json cold be made to accept a list of auth plugins, try each one and only fail if all return false? That way\u00a0the Admin UI could support e.g. BasicAuth login at first and there would always be a way to allow superusers to log in to Admin even if they use some custom AuthPlugin that the admin does not understand. ",
            "id": "comment-16392566"
        },
        {
            "date": "2018-03-09T21:16:42+0000",
            "author": "Gus Heck",
            "content": "It should take special configuration to make the auth schemes diverge I think. That seems like the corner case\u00a0and\u00a0unified auth management would be the core use case IMHO. By default all one scheme for all urls, if further configured secondary schemes per URL path...\u00a0 ",
            "id": "comment-16393600"
        },
        {
            "date": "2018-03-29T10:17:24+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Can you elaborate? I was thinking that Admin UI is just some other client, like SolrJ, and thus it should handle passing correct credentials to the Solr APIs whether that is username/pass, some http header or redirecting user to external login page. The alternative I guess is some custom login mechanism just for Admin, but that risks adding a security risk. ",
            "id": "comment-16418698"
        },
        {
            "date": "2018-03-29T14:32:46+0000",
            "author": "Gus Heck",
            "content": "but that risks adding a security risk.\nYes that's my point I would think that whatever protects the admin UI should also protect the API's by default. More schemes\u00a0creates\u00a0more attack surface, noting that if (as you suggested above) basic auth allows admin UI access, then either that UI is completely functionless without additional Kerberos auth as well (your example) or the Basic Auth is sufficient for requests from the UI to access the api's (the UI accesses the api's via javascript Ajax requests, I believe)... I don't really like the idea of allowing 2 ways (one for admin and one for api), but if it's needed for some use case, my point is such a configuration should not be default. ",
            "id": "comment-16419090"
        },
        {
            "date": "2018-03-29T15:47:40+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Ok, so some kind of fallback Auth that is disabled by default but can be turned on if you need to use a primary Auth not yet natively supported by the AdminUI.\nAnother option is to allow more than one Auth plugin to be enabled at the same time, and let the framework resolve which one to use for each request. ",
            "id": "comment-16419227"
        },
        {
            "date": "2018-03-29T16:02:04+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I agree with Gus here. Ideally, whatever security scheme is enabled for Solr APIs, the same should be enabled for the Admin UI. It is a bad idea to have a different scheme that is used only by the Admin UI. ",
            "id": "comment-16419250"
        },
        {
            "date": "2018-03-29T16:21:55+0000",
            "author": "Upayavira",
            "content": "Let's just be clear what we are talking about here.\n\nThe Admin UI is a set of HTML and JS files.\n\nIt makes use of a set of APIs, that are typically JSON over HTTP: the same APIs as end users use.\n\nSo talking about one auth for the UI and one for the API doesn't entirely make sense. Serving the UI files up over a different auth scheme may be possible, but without the APIs they are pretty darn useless, no?\n\nSo what are we actually talking about here? ",
            "id": "comment-16419281"
        },
        {
            "date": "2018-03-29T16:56:08+0000",
            "author": "Aaron Greenspan",
            "content": "Here's how I'd like Solr to work. When installing it fresh (no content), the first thing you have to do is go to the UI and set an admin password. Once you've done that, you should be given a choice to\u00a0leave your API wide open (how it works now, firewalls aside), or generate a security key that in the future gets passed to every API request as an HTTP GET variable. If you don't pass the key and it's set to be required, the API request fails. If you pass the wrong key and it's required, the API request fails. If you pass the right key and it's required, or if no key is required, you get results back. You can change the security key settings in the admin UI by signing in with your username and password. Potentially, you could have different security keys for different use cases, and track their usage.\n\nI have no experience as a Solr Java developer so maybe doing this is impossible or just merely difficult. But it would bring Solr in line with almost every other enterprise software product I've ever used. ",
            "id": "comment-16419378"
        },
        {
            "date": "2018-03-29T18:15:18+0000",
            "author": "Gus Heck",
            "content": "Aaron Greenspan While this could be implemented, permanent key systems are not very secure. If they key is lifted (i.e. from browser dev tools) by someone nefarious (think disgruntled employee for example, or code bug exposing the key on a request), your server is forever compromised. Unless you have some protocol for regenerating the key regularly, and then getting that out to the clients that should have it, you're hosed. I for one wouldn't want to invest time in building something like that as it will be eschewed by anyone truly serious about security.\n\nAlso as you point out roles are likely to be desirable. But I think we are in danger of mixing two things here... Authentication and Authorization. My read of the original ticket is that this was about adding an Authentication check only, and only for a single admin user. A separate issue designing a fine grained permission-role-user mapping system should be filed if authorization beyond all or nothing is desired.\n\nThe initial password setting routine however sounds good. Perhaps all requests to api or UI should get redirected to the password setting page when\u00a0solr is started with passworded admin\u00a0enabled.\n\n\u00a0 ",
            "id": "comment-16419519"
        },
        {
            "date": "2018-03-29T18:28:27+0000",
            "author": "Aaron Greenspan",
            "content": "I agree with Gus that the primary issue here is just getting some kind of simple protection for the admin UI in place.\n\nMaybe there's a better solution than the key I've proposed, but I would note that the worst-case scenario of the server being \"forever compromised\" is already the default way Solr works now. Everything is open and effectively pre-compromised. If\u00a0browser development tools can see requests to a Solr back-end to discover my hypothetical key, they can already see requests to the server and can discover everything in the store, so something is wrong with how the developer built their site. (I'd think Solr requests should be going on in the background, not in some client-side JavaScript call.) Furthermore, all of the general arguments as to why a key would be insecure could be made for any password authentication scheme (someone could discover it, it should be changed regularly, etc.).\n\nMy point was that users\u00a0should not be sending their admin passwords in a HTTP GET string. So a randomly-generated key would be preferable given that Solr works that way. ",
            "id": "comment-16419536"
        },
        {
            "date": "2018-03-29T19:04:17+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Let\u2019s keep this issue for adding a login screen and handling initial authentication if such a plugin is enabled in Solr. I agree Aaron that next step could be to simplify initial bootstrap of authentication, but we have already a solution for that with a simple bin/solr auth command. But feel free to open another Jira about Admin UI support for enabling and managing security.\n\nAs Upayavira says, the Admin UI must handle authentication just as any other Solr client, we cannot have some \u201cbackdoor\u201d for the UI only. But we could potentially allow two or more auth plugins active at the same time, so the Admin UI can always be used even if user has configured an auth plugin that the UI does not support. We already have implicit support for PKI auth at all times. ",
            "id": "comment-16419594"
        },
        {
            "date": "2018-03-30T13:19:43+0000",
            "author": "Shawn Heisey",
            "content": "Something said a REALLY long time ago:\n\nAlso, I would love for Solr to just be exposed exclusively on my server's internal IP address(es)--but I have no idea how to do that.\n\nAll operating systems these days come with a host firewall, and most of them have that firewall turned on by default.  Organizations also usually have firewalls and other routing equipment that can filter traffic.\n\nControlling which interfaces Solr binds to actually cannot be done by Solr itself.  By the time Solr starts, all interface binding is already done by the servlet container.  I do not know if there are sysprops that can be passed in the Solr startup config to tell Jetty how to do network binding.\n\nFor what Gus Heck's has asked about:\n\nThe admin UI doesn't get protected when authentication is turned on.  The actual files making up the admin UI don't NEED protection \u2013 there's absolutely nothing in them related to your Solr config or data.  It's completely static html/css/javascript/images, data that is identical on every Solr install using that version.  The UI is retrieved and then runs in your browser, and makes requests to Solr's API to get information and perform actions.\n\nIf you enable authentication (and require it for everything), running the admin UI actually does prompt for authentication.  But it's not the UI itself that needs it \u2013 when it asks for username/password, it is actually requests to Solr's API (being made by your browser \u2013 not the Solr server) that are being authenticated.\n\nAuthenticating the admin UI while leaving the API unprotected is only an illusion of security.  Everything the admin UI does can be done directly, using the API. ",
            "id": "comment-16420488"
        },
        {
            "date": "2018-04-04T15:29:27+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "If you enable authentication (and require it for everything), running the admin UI actually does prompt for authentication. But it's not the UI itself that needs it \u2013 when it asks for username/password, it is actually requests to Solr's API (being made by your browser \u2013 not the Solr server) that are being authenticated.\nYour statement may be true for Basic Authentication since most browsers have ootb support for that scheme. But for Auth plugin X which may not even use username/passwd at all but some other scheme, your browser will simply display the 401 error message or some exception or whatever. And this will happen only once you click something in the UI that triggers a request to Solr, which is not a very good user experience. But since Solr allows for e.g. wide open search while admin or write requests require authentication, the UI should probably display the login box on demand whenever it gets a 401 from the server.\n\nThe HTTP 401 response when user tries to access a protected path will also include a WWW-Authenticate\u00a0header which tells the client (AdminUI) what type of auth plugin is used. If we later on add support for more than one auth scheme\u00a0at the same time, then Solr can output a list of supported ones:\n\nWWW-Authenticate: Basic realm=\"solr\"\nWWW-Authenticate: Bearer realm=\"solr\"\nWWW-Authenticate: OAuth realm=\"solr\"\n\n\nI think the first phase of Admin UI login/auth support will be\n\n\tAdd a widget to the top/bottom of Admin UI screen that shows auth state, e.g.:\u00a0User:\u00a0George\n\tAdd interceptor for AJAX responses from Solr, identifying WWW-Autenticate\u00a0header. If no header, just continue as before\n\tAdd parsing of WWW-Authenticate header: If header(s) exist, check whether Admin UI supports one of the auth schemes, if not display error message that Admin UI is not compatible with Auth XX, otherwise trigger login screen for given scheme\n\tImplement login screen for Basic Auth (simple login form) along with an\u00a0AngularJS request interceptor that adds the Authorization: Basic ... header on all requests\n\tImplement caching of user credentials in the Webapp\n\tTry to make it possible for Auth plugins to provide AdminUI login screens and request interceptor implementations, as some sort of HTML5 plugins living inside the jar file??\n\n ",
            "id": "comment-16425721"
        },
        {
            "date": "2018-04-19T14:04:12+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I was certain that Solr used to be able to load the (static) Admin UI files, such as {{/solr/libs/angular-resource.min.js.map\u00a0}}without the browser prompting for authentication, if Basic Auth is enabled. But now when I test I get the browser prompt on every single\u00a0load of the Admin UI front page, triggered by the browser trying to load a static file.\n\u00a0\nI tried with master, 7.x, 6.x and even 5.5.5 and same results. Please refresh my memory.\n\u00a0\nFor this feature to work we need all static resources to be served (by Jetty or by Solr) to the browser without auth, and only enforce authentication\u00a0on the Solr APIs which are called with Ajax calls from Angular. Else we'll not be able to throw up the nice login page before the browser throws up its ugly one  ",
            "id": "comment-16444088"
        },
        {
            "date": "2018-04-19T21:19:54+0000",
            "author": "Gus Heck",
            "content": "Authenticating the admin UI while leaving the API unprotected is only an illusion of security. Everything the admin UI does can be done directly, using the API.\nShawn Heisey We are on the same page, and if you took anything I said to be recommending such a configuration, then my prose was unclear .\n\nWhat I do advocate is that the html pages (except maybe a special login page?) be similarly protected, not because they require protection for security reasons, but because a set of non-functional html pages that don't work properly without login can only confuse the user if rendered. We should only show the user pages that can provide full functionality.\n\nA login/landing page is much more friendly than the standard browser basic auth pop-up so I'd say there's some value in that too, and it would potentially allow for a consistent experience across\u00a0any auth mechanism that didn't fundamentally require a redirect to an external auth provider login.\n\nI do think it would be good to have Solr password protected by default, with command line switch to start it in legacy \"open\" mode if the server has not previously protected by authentication.\u00a0The \"please set a password\" dance on first startup would also be user friendly,\u00a0and this should set the password for both the UI files and the API. If solr has been configured to run it's auth vs Kerberos, LDAP, SiteMinder or a database etc, the config for that should specify if solr has write access to that backend and skip the the set password\u00a0 dance if access is read-only.\nBy the time Solr starts, all interface binding is already done by the servlet container.\nAs far as things happening during startup of \"the web container\" that should be entirely under our control now since we now supply the jetty container. Running as a war file in arbitrary containers is not supported anymore.\n\n\u00a0\n\n\u00a0 ",
            "id": "comment-16444820"
        },
        {
            "date": "2018-04-19T21:55:04+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "But now when I test I get the browser prompt on every single\u00a0load of the Admin UI front page, triggered by the browser trying to load a static file.\nFound it. In web.xml we have an excludePatterns list that tries to short circuit SolrDispatchFilter/HttpSolrCall for static files:\nExclude patterns is a list of directories that would be short circuited by the \n SolrDispatchFilter. It includes all Admin UI related static content.\n NOTE: It is NOT a pattern but only matches the start of the HTTP ServletPath.\nHowever, after the introduction of Authentication (committed four days after the excludePatterns actually, at 2015-05-19), the authentication logic is ran before the excludePatterns check, causing e.g. BasicAuthPlugin to request authentication through WWW-Authenticate headers. See relevant code in screenshot below:\n\n\n\nMoving the short circuit logic before authenticateRequest() fixed this part. Now the browser is allowed to load all static resources even if BasicAuth with blockUnknown=true is enabled.\u00a0But the \"/\" and \"/solr/\" endpoints would still trigger authentication so I added an exclusion rule in authenticateRequest() right after the check for PKI path exclusion. ",
            "id": "comment-16444859"
        },
        {
            "date": "2018-04-19T22:05:54+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "What I do advocate is that the html pages (except maybe a special login page?) be similarly protected, not because they require protection for security reasons, but because a set of non-functional html pages that don't work properly without login can only confuse the user if rendered. We should only show the user pages that can provide full functionality.\nExactly. What I'm currently about to do in this issue is to add that login page. But since it is fully legal to configure Solr's authentication such that you only protect e.g. security-edit or some admin resources, while the rest of the system can be used anonymously, the UI should not request login until it is actually required.\n\nThat's what the WWW-Authenticate headers are all about. Solr auth plugins will already today send such headers to the client if one tries to access a protected resource. I have implemented an AngularJS http interceptor\u00a0that looks for code 401 and this header. The idea is that if an Ajax call results in 401 then we'll redirect user to the login page. And we'll choose the login page based on the header, i.e. Authorization: Basic xxx\u00a0header will cause the login page for basic auth etc.\u00a0\n\nActually it turned out not to be as straight-forward, since the browser actually throws up its login dialogue before our Angular app even gets the chance to look at the HTTP response. The solution is outlined in this blog post\u00a0and involves sending the X-Requested-With: XMLHttpRequest header from Admin UI and conditionally changing the WWW-Authenticate header for BasicAuth from Basic xxx to e.g. xBasic xxx so that our Angular intercept code understands it but not the browser. For non-Ajax clients you stil get the ordinary header. ",
            "id": "comment-16444877"
        },
        {
            "date": "2018-04-20T11:12:39+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I do think it would be good to have Solr password protected by default, with command line switch to start it in legacy \"open\" mode\nPlease open another Jira if you want to work on capabilities of making some auth being enabled by \"default\" (whatever that means), I think there is a similar Jira about making SSL enabled by default.\n\nFor the sake of this login page feature, it is already quite simple to enable auth as the first thing you do after installation:\n\n\nbin/solr auth enable -credentials solr:solrRocks -blockUnknown true\n\n\n\nAfter this Jira is completed, this is all you need to do - the next time you open the Admin UI it will redirect to the new login page  ",
            "id": "comment-16445606"
        },
        {
            "date": "2018-10-09T13:49:19+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "See GitHub Pull Request #465\u00a0for my first iteration of my above plan. Features:\n\n\tUI behaves exactly the same if no auth is enabled\n\tOn first HTTP 401 response from Solr (may come when e.g. attempting to delete a collection), login page shows up\n \n\tOnce logged in, the browser stores HTTP header in session storage and displays who is logged in. Clicking that meny brings you to the login page but with a Logout button:\n \n\tIf some other auth plugin than Basic is enabled, you get an error msg\n \n\n\n\nAppreciate review comments.\n\nFeel free to check out my branch and test locally. You can enable auth by cmd line\n\nbin/solr auth enable -credentials solr:solr -blockUnknown true\n\n\u00a0 ",
            "id": "comment-16643457"
        }
    ]
}