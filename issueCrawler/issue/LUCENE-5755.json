{
    "id": "LUCENE-5755",
    "title": "Explore alternative build systems",
    "details": {
        "type": "Task",
        "priority": "Minor",
        "labels": "",
        "resolution": "Later",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": []
    },
    "description": "I am dissatisfied with how ANT and submodules currently work in Lucene/ Solr. It's not even the tool's fault; it seems Lucene builds just hit the borders of what it can do, especially in terms of submodule dependencies etc.\n\nI don't think Maven will help much too, given certain things I'd like to have in the build (for example collect all tests globally for a single execution phase at the end of the build, to support better load-balancing).\n\nI'd like to explore Gradle as an alternative. This task is a notepad for thoughts and experiments.\n\nAn example of a complex  gradle build is javafx, for example.\nhttp://hg.openjdk.java.net/openjfx/8/master/rt/file/f89b7dc932af/build.gradle",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14029103",
            "author": "Michael McCandless",
            "content": "+1 ",
            "date": "2014-06-12T12:30:22+0000"
        },
        {
            "id": "comment-14029139",
            "author": "David Smiley",
            "content": "+1 to Gradle ",
            "date": "2014-06-12T13:31:54+0000"
        },
        {
            "id": "comment-14029161",
            "author": "Uwe Schindler",
            "content": "I am fine with both (Erik Hatcher mentioned Buildr), but gradle looks more java-centric, so better to build java projects (ruby is not a good idea from java world in my opinion).\n\nIt also looks like we can use \"ANT tasks\" using the AntBuilder groovy API (which is not part of gradle, its inherited from groovy). So it looks like we can download ANT tasks like forbidden, javacc, jflex as dependency, create a classpath and then execute them as custom tasks. The magic here is Grape (http://groovy.codehaus.org/Grape).\n\nP.S.: If you have an example how to use the forbidden-apis task from gradle, I would be happy to add an example to its wiki page. ",
            "date": "2014-06-12T14:04:05+0000"
        },
        {
            "id": "comment-14029185",
            "author": "Uwe Schindler",
            "content": "Jenkins can also run Gradle builds: https://wiki.jenkins-ci.org/display/JENKINS/Gradle+Plugin\n\nI would be happy to setup a separate build on Policeman Jenkins to build a \"fork\" of Lucene using Gradle (e.g. a separate development branch using Gradle). ",
            "date": "2014-06-12T14:16:59+0000"
        },
        {
            "id": "comment-14029196",
            "author": "Uwe Schindler",
            "content": "The smoke tester may also be implemented in groovy: We can do the checks smoker does with groovy, too. ",
            "date": "2014-06-12T14:29:04+0000"
        },
        {
            "id": "comment-14029235",
            "author": "Shalin Shekhar Mangar",
            "content": "+1 ",
            "date": "2014-06-12T15:12:42+0000"
        },
        {
            "id": "comment-14029523",
            "author": "Robert Muir",
            "content": "+1 to exploring something simpler.\n\nHowever, I'm concerned about:\n\nI don't think Maven will help much too, given certain things I'd like to have in the build (for example collect all tests globally for a single execution phase at the end of the build, to support better load-balancing).\n\nCan you expand on this a little? I know for example that mike's python runner does this, and yeah its faster, but its \"cheating\" because it runs the tests with a giant classpath, including classes that various modules shouldnt actually depend on. \n\nMaybe its paranoia (as if you compile them with the correct dependencies, it should catch 99% of the mistakes), but java still has reflection and other similar things and I do really like running tests with the correct classpath of what they should rely upon. ",
            "date": "2014-06-12T18:03:12+0000"
        },
        {
            "id": "comment-14029527",
            "author": "Robert Muir",
            "content": "Actually I think its more dangerous than I alluded to. If we depend on libfoobar.jar and libfoobar.jar has a ton of dependencies itself, then we are totally relying upon the test classpath to verify we didnt screw things up.\n\nI know Steve recently added stuff that compares the \"transitive\" dependencies against our explicit ones, but still I'm worried about running tests with a gigantic classpath. ",
            "date": "2014-06-12T18:05:53+0000"
        },
        {
            "id": "comment-14029540",
            "author": "Uwe Schindler",
            "content": "I think the change of build system is unrelated to the giant classpath problem. We could do the same with ANT, too (the giant classpath could be created in the root build.xml).\n\nI think the main problem of ANT is the slowness when compiling while comparing timestamps over and over. E.g. if I start solr tests it takes endless until they start. The worst is creating solr's javadocs (the main reason is, that ant forgets everything it did before after it exits subant task). Stuff like solrj is built dozens of times just to build javadocs of morphlines. With a better dependency management (gradle), we could improve that.\n\nRunning all tests in the same set of JVMs but separate classpaths is theoretically possible with a special test runner: If we have a separate Classloader per module, we can still run them sequential in one JVM (changing classloader when changing module in one sequence) + parallel with multiple JVMs. But this would be something carrotsearch's testrunner would need to take care of. ",
            "date": "2014-06-12T18:15:48+0000"
        },
        {
            "id": "comment-14029548",
            "author": "Robert Muir",
            "content": "\nI think the change of build system is unrelated to the giant classpath problem.\n\nI don't think its unrelated at all since its listed on the issue as a reason motivating the change in the first place! ",
            "date": "2014-06-12T18:20:41+0000"
        },
        {
            "id": "comment-14030291",
            "author": "Dawid Weiss",
            "content": "Robert Muir Robert, what I meant by test collection is not what Mike does. The runner would collect all parameters for all tests (including classpath) and it'd have to respect classpath differences. It would still help with load-balancing because you wouldn't have to wait for all forked JVMs of a single module to finish \u2013 once you have fewer tests than workers you could fork another JVM (to run another module's tests) without waiting. \n\nI am aware of classpath/ JVM parameters differences and I will definitely not go in the direction Mike already explored (partly because that already works so there's no need to duplicate).\n\nUwe Schindler Uwe, gradle supports ant tasks \"almost natively\", there is no need for any special groovy constructs. See here, for example:\nhttp://www.gradle.org/docs/current/userguide/ant.html\n\nI also agree with Uwe that currently ant is doing things over and over which is slowing builds down significantly. Gradle has a downside in that it takes a longer time to run the first time, but it comes with a daemon that runs in the background and speeds things up significantly. My impressions so far from using gradle far outweight its deficiencies. I hope others will share my feelings here. We'll see. ",
            "date": "2014-06-13T06:14:35+0000"
        },
        {
            "id": "comment-14030400",
            "author": "Uwe Schindler",
            "content": "Uwe, gradle supports ant tasks \"almost natively\", there is no need for any special groovy constructs. See here, for example: http://www.gradle.org/docs/current/userguide/ant.html\n\nThat is exactly what I was referring to: Gradle uses Groovy's integrated AntBuilder support. The only thing is that we need in addition is to load the plugins from Maven Central first, and this can be done with with a dependency config as usual (or through Groovy). ",
            "date": "2014-06-13T09:01:45+0000"
        },
        {
            "id": "comment-14030456",
            "author": "Michael McCandless",
            "content": "The runner would collect all parameters for all tests (including classpath) and it'd have to respect classpath differences.\n\nDoes this mean RandomizedTesting's runner would be able to run tests under different classpaths within a single JVM?  E.g. use separate classloaders within one JVM? ",
            "date": "2014-06-13T10:32:36+0000"
        },
        {
            "id": "comment-14030476",
            "author": "Dawid Weiss",
            "content": "No. I don't think it's realistic. It's possible, but it'd quickly lead to depleted system resources and permgens (because you can't forcibly 'detach' a classloader and release its resources; any leaked thread or other native handle will keep the entire class tree in memory). But you can sort all tests by their unique combination of classpath/ attributes and then fork JVMs as needed. This shouldn't be too costly (it's what we do now anyway).\n ",
            "date": "2014-06-13T10:43:58+0000"
        },
        {
            "id": "comment-14030488",
            "author": "Robert Muir",
            "content": "\nGradle has a downside in that it takes a longer time to run the first time, but it comes with a daemon that runs in the background and speeds things up significantly.\n\nHow slow is it if you disable this daemon? Surely it can be disabled right? Hopefully its disabled by default?\n\nSome of us are not willing or able to have java daemons running around sucking up all their resources. ",
            "date": "2014-06-13T10:57:08+0000"
        },
        {
            "id": "comment-14030493",
            "author": "Dawid Weiss",
            "content": "It is slow. But it also depends on the build. I don't know how much sys resources it takes. ",
            "date": "2014-06-13T11:01:53+0000"
        },
        {
            "id": "comment-14030501",
            "author": "Robert Muir",
            "content": "According to http://www.gradle.org/docs/current/userguide/gradle_daemon.html some tasks require it. Does not look good. Hopefully they are obscure things we dont need? ",
            "date": "2014-06-13T11:08:13+0000"
        },
        {
            "id": "comment-14030509",
            "author": "Dawid Weiss",
            "content": "Note what those \"tasks\" are \u2013 they're simple invocations of Gradle. The problem is similar to that of other scripted languages over the JVM: bootstrap, class loading and switching from interpreted to jitted code. The daemon is not required for anything functional, it just keeps the core code warmed up. At least that's my understanding (and experience).\n\nI am using this daemon because I find it annoying that it starts so slow, even for 'gradle tasks'. Again, I never found it to be any problem, but you can disable it if you so desire. Anyway, even if gradle invocation is 10 seconds (oddball), I assume if we can shrink the time for a simple compilation from 1 minute to 10 seconds it's still a win of 40 seconds... ",
            "date": "2014-06-13T11:17:53+0000"
        },
        {
            "id": "comment-14030513",
            "author": "Robert Muir",
            "content": "\nThe daemon is not required for anything functional, it just keeps the core code warmed up.\n\nThis does not appear to be the case:\n\nThe Tooling API (see Chapter 62, Embedding Gradle) uses the daemon all the time, e.g. you cannot officially use the Tooling API without the daemon. ",
            "date": "2014-06-13T11:24:02+0000"
        },
        {
            "id": "comment-14030538",
            "author": "Dawid Weiss",
            "content": "It is the case \u2013 this 'tooling API' is basically IDE support? It's not needed for regular builds. If you do have IDE then they probably communicate with the daemon to run builds.\n\n\"The Tooling API (see Chapter 62, Embedding Gradle) uses the daemon all the time, e.g. you cannot officially use the Tooling API without the daemon. This means that whenever you are using the STS Gradle plugin for Eclipse or the Gradle support in Intellij IDEA, you're already using the Gradle Daemon.\"\n ",
            "date": "2014-06-13T11:38:57+0000"
        },
        {
            "id": "comment-14031173",
            "author": "Ramkumar Aiyengar",
            "content": "There seems to be a way to stop the daemon with a `gradle --stop`, so if you really don't want it lurking around, you could just have a wrapper running the build and then stopping it?\n\n(This assuming the daemon has benefits even if started with every build \u2013 say with how different submodules are run, if not, of course you get no benefit over disabling the daemon altogether) ",
            "date": "2014-06-13T21:09:52+0000"
        },
        {
            "id": "comment-14031179",
            "author": "Robert Muir",
            "content": "We should disable it by default and just never start the thing in the first place.\n\nSorry but some of the tests here leak file handles, chew up memory, etc, I gotta keep my computer usable.  ",
            "date": "2014-06-13T21:13:54+0000"
        },
        {
            "id": "comment-14031678",
            "author": "Dawid Weiss",
            "content": "I don't think you understand Robert \u2013 the daemon is not the JVM that is used for anything test-related. It's the JVM that runs the build script; any tests would run in a separate JVM anyway.\n\nThis really is a non-issue: the daemon can be disabled by default, over. ",
            "date": "2014-06-14T20:02:14+0000"
        },
        {
            "id": "comment-14031871",
            "author": "Steve Rowe",
            "content": "Over on the ASF Incubator list there is an ongoing discussion about source releases and bootstrapping gradle that may be relevant here: http://markmail.org/message/l7bqbuiwlmqub2rd ",
            "date": "2014-06-15T13:18:21+0000"
        },
        {
            "id": "comment-14041557",
            "author": "Matt Davis",
            "content": "I get errors due to the System.out checks compiling Lucene tests cases due to Gradle stealing System.out in my project:\n\njava.lang.AssertionError: Something has changed System.out to: org.gradle.util.LinePerThreadBufferingOutputStream\n\nhttp://forums.gradle.org/gradle/topics/capturing_output_in_unit_test_and_verifying_it ",
            "date": "2014-06-24T01:05:32+0000"
        },
        {
            "id": "comment-14041717",
            "author": "Dawid Weiss",
            "content": "You will have to revert the sysout to what it was before the test suite started. This isn't a bug, it's a requirement to cleanup to pristine state after a suite is complete. ",
            "date": "2014-06-24T05:40:40+0000"
        },
        {
            "id": "comment-14041719",
            "author": "Dawid Weiss",
            "content": "Also, do you have a gradle build for Lucene (even partial)? I'd be nice if you could share! ",
            "date": "2014-06-24T05:42:03+0000"
        },
        {
            "id": "comment-14041839",
            "author": "Uwe Schindler",
            "content": "I get errors due to the System.out checks compiling Lucene tests cases due to Gradle stealing System.out in my project:\n\nLucene's test suite requires that the test is running in separate child VMs (this is what ANT's fork=\"true\" while running JUnit tests does, the same applies to RandomizedTesting JUNit4 Runner). If you run the tests as parts of the Gradle JVM, this will happen. ",
            "date": "2014-06-24T07:55:49+0000"
        },
        {
            "id": "comment-14042068",
            "author": "Matt Davis",
            "content": "As far as I can tell gradle alway runs tests in a separate JVM (http://www.gradle.org/docs/current/javadoc/org/gradle/api/tasks/testing/Test.html) but maybe I am missing something here.\n\nUnfortunately, I do not have a Gradle build for Lucene.   I work a project storing Lucene indexes into MongoDB and test the MongoDB Lucene directory with a handleful of Lucene test cases and this is how I noticed the issue.   I don't think anything I have done would be too much help other than maybe the publish to maven (https://github.com/lumongo/lumongo/blob/master/maven.gradle) which turned out to be more of a pain that I thought.  I am happy to help / give a port a try if wanted. ",
            "date": "2014-06-24T12:59:45+0000"
        },
        {
            "id": "comment-14045920",
            "author": "Matt Davis",
            "content": "I have managed to get all lucene modules to compile under gradle.  All test cases fail due to the system out issue.  It will compile successfully with ./gradlew build -x test but will fail with a ./gradlew build due to the test cases.  It is not running javacc either but my guess is that this would due the trick https://github.com/RobertFischer/gradle-javacc-plugin.  I have not validated that the output it is generating is at all valid.  Solr modules are not compiling yet either.\n\nIf anyone wants to play around with it: https://github.com/apache/lucene-solr/pull/59\n ",
            "date": "2014-06-27T13:07:31+0000"
        },
        {
            "id": "comment-14045923",
            "author": "Uwe Schindler",
            "content": "All test cases fail due to the system out issue\n\nYou have to use the Carrotsearch JUnit4 runner components (available as ANT and Maven task) to run tests, not gradle's integrated test runner: http://labs.carrotsearch.com/randomizedtesting.html ",
            "date": "2014-06-27T13:14:04+0000"
        },
        {
            "id": "comment-14046345",
            "author": "Dawid Weiss",
            "content": "Yeah, you really should use junit4; you theoretically don't have to, but it's probably for the better if you did. Thanks for the effort, it certainly helps! I have a good few things in my pipeline already, but I'll get to it unless somebody else gets there first. ",
            "date": "2014-06-27T20:06:54+0000"
        },
        {
            "id": "comment-14049094",
            "author": "Matt Davis",
            "content": "Gradle does use which ever junit version you specific. For example:\n\ndependencies {\n\t\ttestCompile 'junit:junit:[4.10,)'\n}\n\nAnd because of the annotation RunWith(RandomizedRunner.class) and the configured dependency to 'com.carrotsearch.randomizedtesting:randomizedtesting-runner:2.1.3' it uses the RandomizedRunner from CarrotSearch.  As I said before it also launches a separate JVM.  The actually issue is that it switches the system.out before each test to capture the output.  See the following classes:\nhttps://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/groovy/org/gradle/api/internal/tasks/testing/processors/CaptureTestOutputTestResultProcessor.java\nhttps://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/groovy/org/gradle/api/internal/tasks/testing/junit/JUnitTestClassProcessor.java\nhttps://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/groovy/org/gradle/api/internal/tasks/testing/junit/JULRedirector.java\nhttps://github.com/gradle/gradle/blob/master/subprojects/core/src/main/groovy/org/gradle/logging/internal/DefaultStandardOutputRedirector.java\nhttps://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/groovy/org/gradle/api/internal/tasks/testing/junit/JUnitTestFramework.java\nhttps://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/groovy/org/gradle/api/tasks/testing/Test.java\n\nIf I disable the System.out check (https://github.com/mdavis95/lucene-solr/commit/1b8798894e9f2c52b905eb5f259ef4108bb0b6d7), and allow lucene benchmark to find alg files through a hack (https://github.com/mdavis95/lucene-solr/commit/6be7c4a3b68fdc9ee749674d101a1c75b2f725be).  A whole lot of tests start to past.  \n\nFor the lucene core I have 783 test successfull, 518 skipped, and 5 failures.  The only 5 that failed were in TestVirtualMethod.\n\njava.lang.RuntimeException: Suite class org.apache.lucene.util.TestVirtualMethod$TestClass1 should be public.\n\n ",
            "date": "2014-07-01T17:30:38+0000"
        },
        {
            "id": "comment-14049180",
            "author": "Dawid Weiss",
            "content": "RandomizedRunner and Ant's launcher for randomized testing are two different things. The launcher for Ant does more things than just isolate/ fork the subprocess JVM. See here for an overview.\n\nhttp://labs.carrotsearch.com/download/randomizedtesting/2.1.2/docs/junit4-ant/Tasks/junit4.html\n\n\njava.lang.RuntimeException: Suite class org.apache.lucene.util.TestVirtualMethod$TestClass1 should be public\n\n\nYou need to filter out nested classes from the pattern; these are not tests.\n\nI'm not saying gradle's test runner cannot be used \u2013 it probably can be \u2013 but you'll lose some of the functionality specifically written for Lucene (such as load balancing, cwd isolation or master seed propagation). ",
            "date": "2014-07-01T18:50:16+0000"
        },
        {
            "id": "comment-14049245",
            "author": "Matt Davis",
            "content": "Understood.  I was not aware of Junit4.  I thought you meant Junit version 4.  Gradle does support a few things along those the lines of parallelism:\n\nhttp://www.gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html\nmaxParallelForks\t\nThe maximum number of forked test processes to execute in parallel. The default value is 1 (no parallel test execution).\nforkEvery\t\nThe maximum number of test classes to execute in a forked test process. The forked test process will be restarted when this limit is reached. The default value is 0 (no maximum).\n\nIt however doesn't isolate the working directories, doesn't have global seeding, or load balancing as far as I know.\n\nSeems to me that it would be good to push these features upstream into gradle because they sound useful to other projects but it is outside my ability.\n\nFiltering inner clases worked for me.  Thanks.\nhttps://github.com/mdavis95/lucene-solr/commit/53217bccff2a14efa58951d8b3c0dbbbb20635f6\n ",
            "date": "2014-07-01T19:51:59+0000"
        },
        {
            "id": "comment-14049355",
            "author": "Uwe Schindler",
            "content": "Hi Matt,\n\nI don't think that the junit4-runner needs to be included into gradle itsself. Just see it as a plugin for running tests. It is the same as Elasticsearch uses this runner instead of surefire (in their Maven build). And because gradle is able to execute Ant tasks without any problems, there is no need to make a \"gradle\" plugin out of it. Just use the gradle scripting to execute the ant task. \n\nIn fact Lucene uses many other additional things to make the tests validate more: We use a special SecurityManager that also prevents to escape the test's working dir or to prevent that a tests calls System.halt(). This security manager relies on the Junit4-Runner.\n\nAlso the runner not only parallelizes, it also keeps statistics about the performance of tests to reorder them on next run, so slower tests don't leave the last JVM run longer just because the running tests take too long. Another important thing is that the runner randomizes the test execution order, whcih is important to prevent bugs that are caused by tests leaving state that influence others.\n\nIn any case, Lucene's build uses lots of other Ant tasks and Groovy scripts while building, e.g. forbidden-apis. Those are not available (and will never be as native gradle tasks), because you can invoke them as plain Ant tasks. You just have to declare a dependency in gradle and then invoke them.\n\nWe also have special tasks to build the documentation, including XSL transformations and Markdown processing. This is all implemented in groovy (\"ant pegdown task\"), so you can just copypaste the code to gradle (which is groovy). This is one reason why I prefer Gradle instead of buildr.\n\nSo my wish:\nWe should use Gradle to do the dependency management, but all tasks/targets and functionality that are available in Lucene/Solr's Ant build should be preserved in an identical way, using the same external build tools (mainly ant tasks) we currently use in Ant. Very important is also to not use transitive dependencies (Lucene prefers to declare every source code dependency explicit, the exemption are just build tools like Ant tasks loaded from Maven central) ",
            "date": "2014-07-01T21:39:47+0000"
        },
        {
            "id": "comment-14049370",
            "author": "Robert Muir",
            "content": "\nVery important is also to not use transitive dependencies (Lucene prefers to declare every source code dependency explicit, the exemption are just build tools like Ant tasks loaded from Maven central)\n\nStrong +1. \n\nThere is a discussion on the legal list right now \"transitive 3rd party dependencies\", where others ran into such trouble: an apache-licensed dependency itself depending on LGPL. The fact is, we just have too many dependencies in this build (100+) to manage this transitively.  ",
            "date": "2014-07-01T21:59:16+0000"
        },
        {
            "id": "comment-14049383",
            "author": "Matt Davis",
            "content": " I have all Lucene test case compiling on my fork with the system out check suppressed.   Solr is untouched and javacc.  I am using transitive dependencies but that is an easy fix.\n\nI disagree that these features are not features that would useful for gradle to implement natively.  The following seem pretty useful in general but I will let someone from gradle decide that:\n\n1)We use a special SecurityManager that also prevents to escape the test's working dir or to prevent that a tests calls System.halt(). This security manager relies on the Junit4-Runner.\n2)Also the runner not only parallelizes, it also keeps statistics about the performance of tests to reorder them on next run, so slower tests don't leave the last JVM run longer just because the running tests take too long\n3)Another important thing is that the runner randomizes the test execution order, which is important to prevent bugs that are caused by tests leaving state that influence others.\n\nThings like forbidden-apis make sense to call from ant tasks but it is easy to make a gradle plugin out of them.\n\nAs a side note, I think making eclipse projects with gradle is going to be problem unless i am missing something.  lucene-core test depends on lucene-test-framework and lucene-test-framework depends back on lucene-core.\n\nI will leave this to others that are more knowledgeable about lucene to continue. ",
            "date": "2014-07-01T22:21:52+0000"
        },
        {
            "id": "comment-14050971",
            "author": "Matt Davis",
            "content": "Sample forbidden api ant called from gradle, not sure it is good form but it does work for a trivial example:\nhttps://gist.github.com/mdavis95/94217e972c879d430028 ",
            "date": "2014-07-03T01:35:32+0000"
        },
        {
            "id": "comment-14050985",
            "author": "Hoss Man",
            "content": "FWIW:\n\n\n\ti was recently made aware of the existence of the pants BUILD system: https://pantsbuild.github.io/\n\ti have not looked into it in depth, but some of it's stated \"optimizes for\" design goals seem inline with the stated objective of this issue: https://pantsbuild.github.io/first_concepts.html\n\t\n\t\tbuilding multiple, dependent things from source\n\t\tbuilding code in a variety of languages\n\t\tspeed of build execution\n\t\n\t\n\tfor Java based compilation:\n\t\n\t\tit uses ivy: https://pantsbuild.github.io/3rdparty_jvm.html\n\t\tit exposes a simple mechanism to depend on set versions and prevent transitive dependencies\n\t\tdocs suggest that it's default way of tracking 3rd party deps is designed around preventing multiple sub-modules from depending on conflicting versions of the same 3rd party dep: https://pantsbuild.github.io/3rdparty.html\n\t\n\t\n\tthe build files are implemented via python code, so \"scripting\" certain rules (ie: call intransitive() on all jars()) seems like it would probably be easy.\n\n\n\nNote: that is the sum total of my knowledge on Pants ... if folks think it looks promising, then the next step for folks would be to read more about it \u2013 asking me follow up questions is probably a waste of time. ",
            "date": "2014-07-03T01:53:06+0000"
        },
        {
            "id": "comment-15635927",
            "author": "Dawid Weiss",
            "content": "I'm marking this as \"later\"... I won't have the time to do it and it's really a major undertaking (technically doing it and finding a consensus on which system to choose). ",
            "date": "2016-11-04T10:26:00+0000"
        }
    ]
}