{
    "id": "SOLR-4502",
    "title": "ShardHandlerFactory not initialized in CoreContainer when creating a Core manually.",
    "details": {
        "affect_versions": "4.1",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "We are using an embedded solr server for our unit testing purposes. In our scenario, we create a CoreContainer using only the solr-home path, and then create the cores manually using a CoreDescriptor.\n\nWhile the creation appears to work fine, it hits an NPE when it handles the search:\n\n\nCaused by: java.lang.NullPointerException\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:181)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1816)\n\tat org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(EmbeddedSolrServer.java:150)\n\nAccording to http://mail-archives.apache.org/mod_mbox/lucene-solr-user/201301.mbox/%3CE8A9BF60-5577-45F9-8BEA-B85616C6539D%40gmail.com%3E , this is due to a missing CoreContainer#load.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13717121",
            "date": "2013-07-23T18:47:11+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971238",
            "date": "2014-04-16T12:57:32+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14011291",
            "date": "2014-05-28T16:44:36+0000",
            "content": "This is annoying; it's bitten me twice now. I think if this is tackled, we should step back a bit and think about how to make it easier to create an EmbeddedSolrServer considering that an ESS is limited to a single SolrCore.  In light of that, the user shouldn't have to be bothered with a CoreContainer, and I argue not with a SolrConfig object either.  They should be able to point to a SolrCore's instance directory, and that's it.  Anything else is superfluous ceremony.\n\nFYI I'm creating my CoreContainer like this, before I then do all the other stuff:\n\npublic static SolrServer createEmbeddedSolr(final String instanceDir) throws Exception {\n    final String coreName = new File(instanceDir).getName();\n    final String dataDir = instanceDir + \"/../../cores_data/\" + coreName;//or use null for default\n    // note: this is more complex than it should be. See SOLR-4502\n    SolrResourceLoader resourceLoader = new SolrResourceLoader(instanceDir);\n    CoreContainer container = new CoreContainer(resourceLoader,\n            ConfigSolr.fromString(resourceLoader, \"<solr />\") );\n    container.load();\n    CoreDescriptor descriptor = new CoreDescriptor(container, coreName, instanceDir);\n    SolrConfig config = new SolrConfig(instanceDir, descriptor.getConfigName(), null);\n    SolrCore core = new SolrCore(coreName, dataDir, config, null, descriptor);\n    container.register(core, false);\n    return new EmbeddedSolrServer(container, core.getName());\n  }\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14011600",
            "date": "2014-05-28T21:17:47+0000",
            "content": "bq: and I argue not with a SolrConfig object either\n\nHmmm. What about running EmbeddedSolrServer as part of the MapReduceIndexerTool, especially when the configs are kept in ZooKeeper and the index is backed by HDFS?\n\n\"...and the thigh bone is connected to the arm bone....\" "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14076562",
            "date": "2014-07-28T18:42:28+0000",
            "content": "I wonder if some of the refactoring around CoreContainer has fixed this by now? "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14262246",
            "date": "2014-12-31T15:18:10+0000",
            "content": "The bug description actually describes the solution for this, you need to call CoreContainer.load() (or create with CoreContainer.createAndLoad()).  But this is trappy.  You always have to call load(), or you'll start to get weird issues like this one if you try to use any SolrCores created by the container.\n\nI think the best solution is to call load() from the constructor.  Rename load() to init(), make it a private method, and add a no-op deprecated load() method so that compilation still works.  We can deprecate createAndLoad() as well. "
        }
    ]
}