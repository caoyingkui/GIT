{
    "id": "SOLR-5228",
    "title": "Deprecate <fields> and <types> tags in schema.xml",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.8",
            "6.0"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "On the solr-user mailing list, Nutan recently mentioned spending days trying to track down a problem that turned out to be because he had attempted to add a <dynamicField .. /> that was outside of the <fields> block in his schema.xml \u2013 Solr was just silently ignoring it.\n\nWe have made improvements in other areas of config validation by generating statup errors when tags/attributes are found that are not expected \u2013 but in this case i think we should just stop expecting/requiring that the <fields> and <types> tags will be used to group these sorts of things.  I think schema.xml parsing should just start ignoring them and only care about finding the <field>, <dynamicField>, and <fieldType> tags wherever they may be.\n\nIf people want to keep using them, fine.  If people want to mix fieldTypes and fields side by side (perhaps specify a fieldType, then list all the fields using it) fine.  I don't see any value in forcing people to use them, but we definitely shouldn't leave things the way they are with otherwise perfectly valid field/type declarations being silently ignored.\n\n\u2014\n\nI'll take this on unless i see any objections.",
    "attachments": {
        "SOLR-5228.patch": "https://issues.apache.org/jira/secure/attachment/12636233/SOLR-5228.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-13762455",
            "date": "2013-09-09T23:37:20+0000",
            "content": "I think its annoying the fields and fieldTypes have to be in separate sections too. This makes it hard for you to logically arrange things in such a way that its readable without lots of scrolling up and down and getting lost.\n\nCan we just go the simple route of deprecating 'fields' and 'types' in 4.x (throw error in 5.x), and in 4.x also allow field/fieldtypes to be \"top-level\" in the schema.\n\nI think this is ultimately simpler than just willy-nilly allowing shit to be nested underneath anywhere: thats hard to maintain: and it still allows people who want to group types/fields together to do that, and those that want to put them side-by-side to do that too. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13762497",
            "date": "2013-09-10T00:07:07+0000",
            "content": "not very far below where fieldType and fields are parsed out with a path that includes <types> or <fields> there's this bit for copyField:\n\n      expression = \"//\" + COPY_FIELD;\n      nodes = (NodeList) xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n      for (int i=0; i<nodes.getLength(); i++) {\n\n\nI happened to run into this because a customer put <copyField> tags inside the <fields> tag and it worked which surprised me at the time.... \n\nSeems like the model we could use, we wouldn't even need to formally deprecate the <types> or <fields> tags, just comment that they were no longer necessary.\n\nFWIW "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13762508",
            "date": "2013-09-10T00:19:54+0000",
            "content": "thats the willy-nilly approach I mentioned: I dont like it.\n\nif we are gonna do that, no point in using xml at all, we get no value from it, only horrors.\n\nThe problem here is not field/dynamicField elements and \"where they can be\", the problem is the fieldType/types elements: they are useless and bring no value. Lets get rid of them. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13942559",
            "date": "2014-03-21T00:10:08+0000",
            "content": "What about increasing the schema version? It is currently 1.5. Solr could continue supporting 1.5 as it is now with <types> and <fieldTypes>, create the version 1.6 that does not support those (and throws exception if present). 5.x would support 1.6+ versions, 4.x should support both but use 1.6 in the example. Anyone who needs to upgrade between 4.x versions can just keep their schema using 1.5. Anyone creating a new schema would start with the 1.6. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13942792",
            "date": "2014-03-21T05:04:38+0000",
            "content": "The schema version changes how Solr interprets default settings.  I'm fairly sure that it has nothing to do with the XML structure.  I don't think we need a new schema version for this.\n\n+1 to Robert's idea in the first comment.  I will restate it below to make sure I understand it properly:\n\n\n\tAllow <field> and <fieldType> at the top level under <schema>.\n\tDeprecate <fields> and <types> in 4x.  Remove them in trunk.  The unknown tags will fail parsing.\n\tDon't worry about supporting all options in the deprecated sections.\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13943052",
            "date": "2014-03-21T13:28:58+0000",
            "content": "I like Erick's idea.  No need to make people's life hard who are upgrading (or who have existing tools to deal with our schema's schema \nWe should support field and fieldType definitions at the top level and stop using the old way. \n\nedit: re-reading the issue, this is the idea that Hoss originally had too.  People can still use the old style if they want. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13943278",
            "date": "2014-03-21T17:30:58+0000",
            "content": "\u0010\nThe schema version changes how Solr interprets default settings. I'm fairly sure that it has nothing to do with the XML structure. I don't think we need a new schema version for this.\nSchema version should be used for whatever is necessary. It should be telling Solr how the schema.xml should be read, and I think this is a good case. I think it would make more clear which type of schema you want to use. Also, in case of an external tool reading Solr schema, it could tell how it should be read. That said, I\u2019m OK with increasing it or not, it's just an idea.\n\n\nPeople can still use the old style if they want.\nI think this could lead to confusion. Someone that\u2019s new with Solr will probably read a couple of sample schema files (the example schema for sure, but also probably also reading from blogs, forums, etc), that will be different but do the same thing, trying to track a bug may be more complicated until they understand this change. I\u2019d prefer to get a clear error that says that I\u2019m configuring the fields/types in the wrong place, that it has changed, or something like that. \nMigrating this should be easier, because by that time you probably have more understanding of how the schema is structured and why/how it has change. After that, it's a trivial change. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13943287",
            "date": "2014-03-21T17:37:30+0000",
            "content": "Someone that\u2019s new with Solr will probably read a couple of sample schema files (the example schema for sure, but also probably also reading from blogs, forums, etc), that will be different but do the same thing,\n\nThe change will lead to confusion since there will be tons of existing blogs, examples, etc, that use the old style.  I don't see being lenient with what we accept leading to more confusion, esp if we take care to change all of our examples. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13943729",
            "date": "2014-03-21T23:43:55+0000",
            "content": "Well, I don't think it's confusing if you get an error message that's clear about the change. A similar strategy was taken for example when indexDefault/indexMain were removed from solrconfig.xml and and now that solr.xml has changed. \nIts also better in the sense that you don't need to maintain all configuration formats variations forever, just for the current version.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13943797",
            "date": "2014-03-22T00:46:10+0000",
            "content": "Well, I don't think it's confusing if you get an error message that's clear about the change.\n\nWhat's confusing about having no error message and having it \"just work\"?  A user trying an older schema and having it work is less confusing than them getting an error.\n\nThe confusion is initially seeing both formats and wondering what the difference is.  That confusion will exist no matter what we do (assuming we make this change).\n\nA similar strategy was taken for example when indexDefault/indexMain were removed from solrconfig.xml and and now that solr.xml has changed.\n\nIt's a different situation.  The danger in that case was that someone would change indexDefault and expect the changes to take effect, when in fact they were ignored.  That situation does not exist here if we do as Erick suggests and use a copyField like pattern: expression = \"//\" + COPY_FIELD;\n\nIts also better in the sense that you don't need to maintain all configuration formats variations forever\n\nDue to the power of xpath, it's a one line change. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13944098",
            "date": "2014-03-22T14:56:16+0000",
            "content": "Yonik hit it I think. There is no maintenance here after the change to support\nboth, this isn't at all like the back-compat issues faced in index support\nbetween versions for instance.\n\nI spend more time than I probably should on the user's list, I don't want to spend\nmore of it explaining to people that we made a decision to change this and\ncaused their existing tools/environment/whatever to blow up.\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13944275",
            "date": "2014-03-22T23:44:26+0000",
            "content": "Decided to work up a patch to see what it would take. Was a little surprised by some of the work with the schema api, had to modify a few tests:\n\nSteve Rowe - if you have a chance, please see if I've done violence to the managed schema code I changed. There were a few changes both to code and tests.\n\nAll:\nThe \"FIELDS\" static in IndexSchema.java turns out to be overloaded a bit in case you're wondering why I took \"types\" out but left \"fields\" in. It's used to put together output packets as well as parse the schema.xml file.\n\nFinally, I just took some of the <fields> and <types> tags out of some of the stock test files on the theory that would test code more randomly than I would.\n\nFor the final patch, I'll take the <fields> and <types> tags out of the stock distro schema.xml file(s).\n\nLet me know if there are objections, I'll commit next week if not. I hear what Robert and Tomas are saying, but in this case I don't think the hassle to the users of enforcing these tag's absence is worth it. And it would be more work for the devs I think. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13944282",
            "date": "2014-03-23T00:25:01+0000",
            "content": "Hi Erick,\n\nPatch looks fine, except, as Robert said earlier:\n\n\nCan we just go the simple route of deprecating 'fields' and 'types' in 4.x (throw error in 5.x), and in 4.x also allow field/fieldtypes to be \"top-level\" in the schema.\nI think this is ultimately simpler than just willy-nilly allowing shit to be nested underneath anywhere: thats hard to maintain:\n\nYour XPath changes in IndexSchema willy-nilly allow (dynamic)field / fieldType to be nested underneath anywhere:\n\n\n465: // ../fieldType or fieldtype\n466: expression = \"//\" + FIELD_TYPE + XPATH_OR + \"//\" + FIELD_TYPE.toLowerCase(Locale.ROOT);\n[...]\n638: //  ../field | /schema/dynamicField\n639: String expression = \"//\" + FIELD + XPATH_OR + \"//\" + DYNAMIC_FIELD;\n640: NodeList nodes = (NodeList)xpath.evaluate(expression, document, XPathConstants.NODESET);\n\n\n\nI think we should keep the old XPath and add ones allowing top-level versions, something like (untested) the following (after putting back the TYPES constant):\n\nedit reordered the XPath alternatives to have the old-school versions last\n\n\n466: //               /schema/fieldtype | /schema/fieldType | /schema/types/fieldtype | /schema/types/fieldType \n467: expression =     stepsToPath(SCHEMA, FIELD_TYPE.toLowerCase(Locale.ROOT)) // backcompat(?) \n468:     + XPATH_OR + stepsToPath(SCHEMA, FIELD_TYPE)\n469:     + XPATH_OR + stepsToPath(SCHEMA, TYPES, FIELD_TYPE.toLowerCase(Locale.ROOT))\n470:     + XPATH_OR + stepsToPath(SCHEMA, TYPES, FIELD_TYPE);\n[...]\n642: //                  /schema/field | /schema/dynamicField | /schema/fields/field | /schema/fields/dynamicField\n643: String expression = stepsToPath(SCHEMA, FIELD)\n644:        + XPATH_OR + stepsToPath(SCHEMA, DYNAMIC_FIELD)\n645:        + XPATH_OR + stepsToPath(SCHEMA, FIELDS, FIELD) \n646:        + XPATH_OR + stepsToPath(SCHEMA, FIELDS, DYNAMIC_FIELD);\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13944292",
            "date": "2014-03-23T01:41:11+0000",
            "content": "Hmm, I guess the discussion has been about whether it makes sense to ever pull out the old-style /schema/fields or /schema/types sections. Deprecating them is certainly reasonable, but I'd balk at dis-allowing them. Your suggestion doesn't dis-allow them though.\n\nThinking about it some more, my patch allows definitions like\n\n<fieldType>\n   <field>...</field>\n</fieldType>\n\n\nor\n\n<field>\n   <fieldType>...</fieldType>\n</field>\n\n\nor, for that matter, something like\n\n<copyField>\n  <fieldType>\n    <field>...</field>\n  </fieldType>\n</copyField>\n\n\nto be defined in schema.xml. Blech. I haven't a clue how Solr would behave in these cases...... and there's always case N+1.\n\nLooks like I'm talking myself into adopting your suggestion.\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13944438",
            "date": "2014-03-23T14:57:27+0000",
            "content": "Patch implementing Steve's suggestion and removing <types> and <fields> tags from a bunch of our example files.\n\nI'll commit this after testing today/tomorrow. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13944450",
            "date": "2014-03-23T15:40:53+0000",
            "content": "Commit 1580515 from Erick Erickson in branch 'dev/trunk'\n[ https://svn.apache.org/r1580515 ]\n\nSOLR-5228: Deprecate <fields> and <types> tags in schema.xml "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13944453",
            "date": "2014-03-23T15:46:13+0000",
            "content": "+1, thanks Erick.\n\nOne (maybe intentional?) thing I noticed: You removed <types> and </types> from src/test-files/solr/collection1/conf/schema-add-schema-fields-update-processor.xml, but not <fields> and </fields> - in all other changed files, you removed all of them. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13944455",
            "date": "2014-03-23T15:56:15+0000",
            "content": "Erick, I think the CHANGES.txt entry should go under \"Other Changes\" instead of \"New Features\" (I don't think config changes for existing features qualifies as new?), and I also think there should be some form of extra notice, probably in the \"Upgrading from 4.7\" section at the top, calling out this change in the examples and in accepted user config. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13944504",
            "date": "2014-03-23T18:06:57+0000",
            "content": "Taking this path I think the changes look good. Thanks Erick.\nAre you planning on committing to 4x too? "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13944509",
            "date": "2014-03-23T18:14:11+0000",
            "content": "Why was this committed so quickly? It was less than 24 hours from the initial patch, on a weekend (Sat night to Sunday morning), on a semi contentious issue (there are differing opinions on how this issue should be handled).\n\nFrom reading through previous comments, it seemed there was some basic agreement on deprecation in 4x and then error in 5.0.  The committed change has no deprecation in 4x, and no error in 5.0.  It simply adds support for fieldType/field at the root level.  There are also no tests to check the \"old\" way still works in 4x? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13944516",
            "date": "2014-03-23T18:29:29+0000",
            "content": "From reading through previous comments, it seemed there was some basic agreement on deprecation in 4x and then error in 5.0.\n\nThere seemed to be mostly consensus for allowing all field/fieldType declarations at the top level, but I didn't see a consensus for removing support for the old/existing style. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13944519",
            "date": "2014-03-23T18:34:51+0000",
            "content": "Why was this committed so quickly? \n\n+1 - given the comments from so many different people on this issue, seems like there should have been an attempt to work with everyone here. A warning to commit and a chance for people to object. We are a commit then review project, but on an issue that has pulled in attention from so many, we should favor a process that includes everyone.\n\n\nFrom reading through previous comments, it seemed there was some basic agreement on deprecation in 4x and then error in 5.0. The committed change has no deprecation in 4x, and no error in 5.0. It simply adds support for fieldType/field at the root level. There are also no tests to check the \"old\" way still works in 4x?\n\n\n\n+1 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13944523",
            "date": "2014-03-23T18:38:59+0000",
            "content": "Why was this committed so quickly?\n\nRyan Ernst, from the other side, nothing is set in stone yet. This issue can certainly still evolve if people still have objections. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13944554",
            "date": "2014-03-23T19:57:09+0000",
            "content": "There appeared to be two camps:\n1) allow field declarations at the top level\n2) allow field declarations at the top level, disallow (in 5x) current style\n\nIt doesn't seem to be a stretch to do the part that people agree with (which is what I think Erick did).\nUnless one considers a third option (do nothing) and considers that a better option than #1?  I didn't see any one expressing that opinion. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13944590",
            "date": "2014-03-23T21:35:49+0000",
            "content": "What Erick did is not crazy. I don't think he thought he was doing anything controversial.\n\nBut that has little relevance to Ryan's very valid comments. I support them 100%. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13944600",
            "date": "2014-03-23T21:59:17+0000",
            "content": "I was one in support of removing the old enclosing tags in trunk.  I believe it's a good idea to fail early and loudly when old syntax gets used \u2013 once you cross the major version boundary, anyway.\n\nI am OK with what I know about Erick's commit - Yonik has a good point regarding the longevity of existing information on the Internet.  I've not actually looked at the commits, so these statements might be premature:  Perhaps we can simply have 5.0 log a warning.  When 5.0 begins the march towards release and trunk becomes 6.0, we can discuss whether we think it's a good idea to make it an unrecoverable error. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13944626",
            "date": "2014-03-23T23:10:23+0000",
            "content": "http://en.wikipedia.org/wiki/Parkinson%27s_Law_of_Triviality\n "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13944636",
            "date": "2014-03-23T23:27:29+0000",
            "content": "I apologize for showing up so late with an opinion. I can't get over the feeling that this might be solving the wrong problem.\n\nIn XML, the structure of \n\n\n  <SOME_ITEMs>\n    <SOME_ITEM>\n    </SOME_ITEM>\n    ...\n</SOME_ITEMs>\n\n\n\nis ancient and honorable. Yea, some schemas dispense with the container for the group, but plenty do not. The source of this was someone who misplaced an item and didn't get a diagnosis. Why don't we concentrate on diagnosis? Why not create a schema and, by default, check it? It's not like we're in a giant hurry at start-up compared to the extra time of enabling a validating parse.\n\nGrouping these guys together is harmless at worst and slight helpful at best.\n\nIf we are going to change the schema, I would beg that anyone changing it put forth an actual, well, schema that is an accurate representation of what is allowed.\n\nSo I'm belatedly -1 on this change, for why tiny little bit its worth.\n "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-13944640",
            "date": "2014-03-23T23:37:31+0000",
            "content": "I certainly agree that validating XML configs against a schema is far more useful than making the parser more permissive. We should fix the problem, not the symptom.\n\nJust this week, I found that the \"required\" attribute is not documented, not even the default value. That sort of stuff is easier to spot with validation, because you can check the docs against that.\n\nAnd how many questions have we answered about \"multivalued\" vs. \"multiValued\"?\n\nAs we start supporting modification for config files, this gets more important. They should be validated before write. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13944686",
            "date": "2014-03-24T01:41:15+0000",
            "content": "The source of this was someone who misplaced an item and didn't get a diagnosis. Why don't we concentrate on diagnosis?\n\nThat's a good point.  We shouldn't conflate that with the other schema-changing issues here. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13944717",
            "date": "2014-03-24T03:34:21+0000",
            "content": "Commit 1580725 from Erick Erickson in branch 'dev/trunk'\n[ https://svn.apache.org/r1580725 ]\n\nSOLR-5228: Deprecate <fields> and <types> tags in schema.xml. Moved entries in CHANGES.txt as per Steve Rowe's comments "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13944738",
            "date": "2014-03-24T04:31:09+0000",
            "content": "Why was it committed so quickly? Because I was about to catch a trans-continental flight.\nNot much of a reason, true. We can always un-commit if I've screwed the pooch, it\nhasn't been released yet after all.\n\nWhy wasn't it committed to 4x? Because  I didn't have time to merge, test, precommit and \ncommit before I had to leave and the plane didn't have WiFi. Taking care of that now. Again,\nnot much of an excuse although it is a reason.\n\nWhy wasn't a deprecated message created? Because I had to leave before being\nable to commit the CHANGES.txt following Steve's suggestions, as far as the\nCHANGES.txt file is concerned. We can always raise another JIRA about logging\ndeprecation messages if people feel it is important. Just did that for trunk.\n\nBenson:\nI go back and forth on the formal schema idea, but I think that's a separate issue?\nHow does that alter this patch?\n\nI'm pretty sure it's been suggested multiple times, but somehow it's never gotten\nany traction. It'd have to deal with any custom components and their parameters,\nwhich might be a challenge.\n\nFrom my perspective, I made an attempt to synthesize the comments of people\nwho had expressed their opinions. I think this is an OK patch, we can always alter\nit before it gets released.\n\nI'm rushed for the next two weeks. I hereby authorize anyone with enough interest\nto roll back, alter, or submit new patches as they see fit. It seems like 6 months is \nenough time for people to have commented if they were interested though. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13944739",
            "date": "2014-03-24T04:32:10+0000",
            "content": "Commit 1580736 from Erick Erickson in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1580736 ]\n\nSOLR-5228: Deprecate <fields> and <types> tags in schema.xml, plus incorporated Steve's comments about CHANGES.txt "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13944741",
            "date": "2014-03-24T04:34:15+0000",
            "content": "P.S. Steve:\nI intentionally left the <fields> </fields> in\n src/test-files/solr/collection1/conf/schema-add-schema-fields-update-processor.xml\non the theory that there might be something weird with only one of them defined.\n\nGood eyes!\n\nA bit ugly I'll admit... "
        },
        {
            "author": "David Smiley",
            "id": "comment-13944770",
            "date": "2014-03-24T05:53:55+0000",
            "content": "I like the idea of having a bona-fide schema, but it's not clear how to deal with custom extensions \u2013 which I've done in custom coding.  If the schema defines the core but lets any other XML element be anywhere else for extensibility, it doesn't help the user that misnames or misplaces something. "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13944920",
            "date": "2014-03-24T11:00:18+0000",
            "content": "Allow the person extending the schema to provide a, well, extended schema.\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13944953",
            "date": "2014-03-24T12:07:09+0000",
            "content": "bq: Allow the person extending the schema to provide a, well, extended schema.\n\nNow, in order to run, we either have to\n1> incorporate each and every extension anyone in the world wants to write into our releases\nor\n2> require everyone who doesn't want to/can't give their extension back to Apache to maintain their own DTD forevermore, updating it at each release of Solr they want to upgrade.\n\nDon't get me wrong, I have complete and total sympathy with the end goal here. If we can solve this in a way that extends we could save users countless hours, your point about multivalued .vs. multiValued is well taken indeed. I suppose trading that off against the added pain caused by invalidating current tools is a judgement call.\n\nAnd I don't know that much about extending DTDs. Is there a way to do something similar to xinclude? Or shutting off validation. Hmmm, I rather like that one at first glance, although I'm not sure where to specify it. Perhaps a default of on, expert users could turn validation off if they added custom stuff or decide to keep their own copy of the DTD up to date.\n\nHow much you want to bet the first time we tried to run tests we'd find some of our test schemas have errors? "
        },
        {
            "author": "Benson Margulies",
            "id": "comment-13944971",
            "date": "2014-03-24T12:37:04+0000",
            "content": "DTD's are useless. We need to pick one of W3C XML Schema or RNG. RNG is a lot easier to work with. Schematron is another possibility, but I have no experience. See http://docs.oracle.com/javase/7/docs/api/javax/xml/validation/package-summary.html.\n\nChoices are:\n\n\n\tvalidation is easy to disable; people who customize disable it\n\tcustomizers take the entire schema, add to it, and provide their added one. Not so good for multiples.\n\tcustomizers are constrained to use namespaces \u2013 you customize, you add an XML namespace, and you provide a schema for your namespace.\n\n\n\nOf course the first time we try this we'll find problems in the test schemas.\n\nHas anyone done anything in this area that I could start from if I was inclined to try to work on this? "
        },
        {
            "author": "David Smiley",
            "id": "comment-13945095",
            "date": "2014-03-24T13:40:00+0000",
            "content": "+1 to namespaces.  External code could add the namespace to the custom stuff, and that part could be non-validating and excluded from the \"core\" schema.  It also makes it clear where there's custom stuff. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13945781",
            "date": "2014-03-24T22:24:24+0000",
            "content": "Works for me I guess. Let's move this to another JIRA though, it'll get lost here. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13945803",
            "date": "2014-03-24T22:40:06+0000",
            "content": "Why was it committed so quickly? Because I was about to catch a trans-continental flight. Not much of a reason, true. \n\nHeh - Dude, that's a fantastic reason to not quick commit. I've heard the reason come up before - a much more Apache like rule of thumb is to just hold off if you are going off the grid rather than hurry up.  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13945874",
            "date": "2014-03-24T23:41:01+0000",
            "content": "If anyone plans to remove support for the old syntax in 5.x, remember that it should be possible for people to upgrade the WAR to 5.x while keeping their existing config and schema without things crashing. I.e. when parsing chema, deprecate/fail depending on <luceneMatchVersion> in solrconfig, not depending on actual Solr version.\n\nA customer of mine has extended schema with their custom namespace and that works very well. +1 for validating non-namespaced tags only. This brings to memory the Currency field type which takes providerClass as one of its xml attributes. Then, depending on the provider class, it may expect other attributes to exist, such as OpenExchangeRatesOrgProvider expecting attributes ratesFileLocation and refreshInterval without a prefix. It will be hard to strictly validate xml attributes that can be user-defined like this, and in fact our core FieldTypes are really just plugins too...\n\nAll in all I think we'd be in better shape through some simple custom validation in Java code which validates the basics such as allowed tags and sub tags, and complains if there are unknown tags without a namespace. Perhaps also check for existence of misspelled stuff such as multivalued, precisionstep etc. Then we can save full XSD or whatever for another day  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13959282",
            "date": "2014-04-03T21:48:25+0000",
            "content": "Commit 1584414 from sarowe@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1584414 ]\n\nRemove SOLR-5228 from the \"New Features\" section - it's already in the \"Other Changes\" section "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13959289",
            "date": "2014-04-03T21:50:47+0000",
            "content": "Commit 1584416 from sarowe@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1584416 ]\n\nRemove SOLR-5228 from the \"New Features\" section - its already in the \"Other Changes\" section (merged trunk r1584414) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982527",
            "date": "2014-04-27T23:25:37+0000",
            "content": "Close issue after release of 4.8.0 "
        },
        {
            "author": "Parvesh Garg",
            "id": "comment-13989326",
            "date": "2014-05-05T07:22:07+0000",
            "content": "One use case for keeping sections is to have the capability of <xi:include functionality. We have a lot of cores and use this for common fields and field types that we don't want anyone to modify per core. \n\n<xi:includes take only well formed xml (meaning they need a root element) and make the included xml a child element at the place where the directive is put. We already struggled with not being able to put <copyField and <similarity in a common file as they are directly under the root element <schema.\n\nMy understanding of <xi:include could be wrong, happy to get corrected. If not and we still want to remove these sections, can there be another way to provide an include directive. Something like commons-configuration does. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13989499",
            "date": "2014-05-05T13:21:06+0000",
            "content": "Good point Parvesh!  I wonder if Solr should handle this in a generic sense... like if hypothetically there was a special tag like <INCLUDE> that Solr auto-removes first things after it reads the XML.  That would enable new uses of XInclude where today there is no natural enclosing tag to do so. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13989565",
            "date": "2014-05-05T14:49:26+0000",
            "content": "I wonder if Solr should handle this in a generic sense... like if hypothetically there was a special tag like <INCLUDE> that Solr auto-removes first things after it reads the XML.  That would enable new uses of XInclude where today there is no natural enclosing tag to do so.\n\nI really like this idea.  If the issue doesn't show up in the next few hours (and hasn't been filed already), I'll go ahead and file it.  My solrconfig.xml is almost entirely xinclude tags.  I would have used all xinclude tags, but the admin, analysis, and jmx handlers didn't make much sense to put into individual xml files, and I couldn't put them in an xml file together.  Also, I have entirely too many includes, I'd like to be able to combine some of them together.\n\nI've never touched xml/xpath parsing ... does the parser support an easy way of moving tags up a level in the structure?  If we can convert XML to a NamedList, I would expect that to be pretty easy. "
        }
    ]
}