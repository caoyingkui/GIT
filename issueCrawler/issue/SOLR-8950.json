{
    "id": "SOLR-8950",
    "title": "Provide an option to \"disable\" a specified Solr collection",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10.3,                                            6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Currently Solr does not provide facility to \"disable\" read/write requests for a specified collection. This is essential for certain admin operations (e.g. restore collection data from an earlier snapshot). Without this support, we need to bring down the Solr cluster during the snapshot recovery. In case of multi-tenant Solr cluster, it is not always feasible to bring down the Solr service since it can affect the availability of other collections too.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-06T00:22:49+0000",
            "author": "Hoss Man",
            "content": "I think the conventional wisdom around this sort of thing is that you create an alias for every collection and only use alias names from external clients \u2013 when you want to \"disable\" a collection (w/o actaully deleting it) you simply delete the (public) alias.  later you can add a new collection (w/ a new name) to take it's place, and re-add the old alias.\n\nthis also works very well in the specific case you mentioned of wanting to restore a collection from odler snapshots w/o ever even needing any downtime from the point of view of external clients (unles you real want to)...\n\n\n\tcreate collection named foo_internal_1\n\t\n\t\tcreate alias foo -> foo_internal_1\n\t\n\t\n\tclients use collection name foo w/o ever knowing it's an alias\n\ttime goes on\n\tyou decide you want to replace foo/foo_internal_1 with an older snapshot, or that you want to change the way some fields are indexed and completely rebuild\n\t\n\t\tyou create a new collection named foo_internal_2\n\t\tyou populate foo_internal_2 however you want\n\t\twhen you are ready to make the switch for your users, you move the 'foo' alias to foo_internal_2\n\t\n\t\n\teventually, you can remove foo_internal_1 completely\n\n\n\n\n\nI makethis comments/suggestions not because i'm particularly opposed to adding \"disable\" and \"enable\" options to the collections API, but just to point out an alternative workflow worth considering .. and perhaps to suggest that instead of putting effort into enable/disable Collection API options, we should put effort into an \"atomic rename & alias\" feature to make this workflow possible for users who don't realize it's a good idea when they first create their collections ... so you can send a single command that says \"rename collection foo to foo_internal and create an alias foo that points at foo_internal\"\n\nthoughts? ",
            "id": "comment-15227430"
        },
        {
            "date": "2016-04-06T02:56:26+0000",
            "author": "Hrishikesh Gadre",
            "content": "Hoss Man Thanks a lot for the comments. I think using \"aliases\" is certainly a pragmatic option to satisfy the requirement and we can use it as a starting point. I have couple of questions.\n\n\n\tDo aliases incur extra overhead ? If the overhead is not significant, should we think about providing this support automatically from usability perspective? e.g. we can define an extra parameter as part of CREATECOLLECTION action. If this param is set, Solr will create an internal collection and an alias automatically. Atomic rename and alias feature will also help in migrating existing users to this design.\n\tAlso in this case, the internal collection is available for read/write operations . Should we consider an option to hide such collection permanently? (i.e. such collection can only be accessed via associated alias name). If such support is implemented, the above mentioned approach will become robust (instead of relying on users following the best practices).\n\n\n\nCan you please share your thoughts? ",
            "id": "comment-15227614"
        },
        {
            "date": "2016-04-06T07:38:51+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "+1 to \"atomic rename & alias\"\n\nA bit outside the scope of this JIRA, but perhaps later we could then also add a convenience restore collection command which replaces an existing collection atomically, e.g. (&name=foo&replace=true). Under the hoods, it would do:\n\n\tRestore backup to foo.restored.20151224121300 (time stamp of the backup)\n\tIf foo exists and is a collection: atomic rename foo as foo.20160406092300 (current timestamp), and add alias foo --> foo.20160406092300\n\tAtomic replace alias foo to point to foo.restored.20151224121300\n\tOptionally, rename old real collection as trash.foo.20160406092300 (simulate a trashcan), so it is easy to delete it later, manually or through a \"purge\" command\n\n\n ",
            "id": "comment-15227892"
        },
        {
            "date": "2016-04-06T18:27:18+0000",
            "author": "Noble Paul",
            "content": "I think all this alias solutions are complex, We probably should just provide a simple command which can enable/disable read or writes. How hard is it to implement ? ",
            "id": "comment-15228828"
        },
        {
            "date": "2016-04-11T21:31:39+0000",
            "author": "Hrishikesh Gadre",
            "content": "Another option may be implementing SOLR-6399 ",
            "id": "comment-15236010"
        }
    ]
}