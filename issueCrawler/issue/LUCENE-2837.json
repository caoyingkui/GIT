{
    "id": "LUCENE-2837",
    "title": "Collapse Searcher/Searchable/IndexSearcher; remove contrib/remote; merge PMS into IndexSearcher",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We've discussed cleaning up our *Searcher stack for some time... I\nthink we should try to do this before releasing 4.0.\n\nSo I'm attaching an initial patch which:\n\n\n\tRemoves Searcher, Searchable, absorbing all their methods into IndexSearcher\n\n\n\n\n\tRemoves contrib/remote\n\n\n\n\n\tRemoves MultiSearcher\n\n\n\n\n\tAbsorbs ParallelMultiSearcher into IndexSearcher (ie you can now\n    pass useThreads=true, or a custom ES to the ctor)\n\n\n\nThe patch is rough \u2013 I just ripped stuff out, did search/replace to\nIndexSearcher, etc.  EG nothing is directly testing using threads with\nIndexSearcher, but before committing I think we should add a\nnewSearcher to LuceneTestCase, which randomly chooses whether the\nsearcher uses threads, and cutover tests to use this instead of making\ntheir own IndexSearcher.\n\nI think MultiSearcher has a useful purpose, but as it is today it's\ntoo low-level, eg it shouldn't be involved in rewriting queries: the\nQuery.combine method is scary.  Maybe in its place we make a higher\nlevel class, with limited API, that's able to federate search across\nmultiple IndexSearchers?  It'd also be able to optionally use thread\nper IndexSearcher.",
    "attachments": {
        "LUCENE-2837.patch": "https://issues.apache.org/jira/secure/attachment/12467069/LUCENE-2837.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-12-28T21:57:30+0000",
            "content": "\nbut before committing I think we should add a\nnewSearcher to LuceneTestCase, which randomly chooses whether the\nsearcher uses threads, and cutover tests to use this instead of making\ntheir own IndexSearcher.\n\nI did this on LUCENE-2751, but the tests won't all pass until we fix the FieldCache autodetect \nsynchronization bug (the Numerics tests will fail with multiple threads)... ",
            "author": "Robert Muir",
            "id": "comment-12975649"
        },
        {
            "date": "2010-12-28T22:52:53+0000",
            "content": "I like that! +1\n\nWe should discuss about how many threads should be spawned. If you have an index with many segments, even small ones, I think only the larger segments should be separate threads, all others should be handled sequentially. So maybe add a maxThreads cound, then sort the IndexReaders by maxDoc and then only spawn maxThreads-1 threads for the bigger readers and then one additional thread for the rest? ",
            "author": "Uwe Schindler",
            "id": "comment-12975668"
        },
        {
            "date": "2010-12-28T23:01:14+0000",
            "content": "\nI think MultiSearcher has a useful purpose, but as it is today it's\ntoo low-level, eg it shouldn't be involved in rewriting queries: the\nQuery.combine method is scary. Maybe in its place we make a higher\nlevel class, with limited API, that's able to federate search across\nmultiple IndexSearchers? It'd also be able to optionally use thread\nper IndexSearcher.\n\nQuery.combine is simply broken, this is another issue. It violates DeMorgans law...: LUCENE-2756 ",
            "author": "Uwe Schindler",
            "id": "comment-12975670"
        },
        {
            "date": "2010-12-28T23:15:09+0000",
            "content": "Query.combine is simply broken, this is another issue.\n\nI agree, but with this issue we don't need Query.combine anymore, so its then fixed.\nThis method only exists for MultiSearcher (and there is some other dead code in \nQuery.java related to it, that we could even delete now, totally unused today!) ",
            "author": "Robert Muir",
            "id": "comment-12975676"
        },
        {
            "date": "2010-12-29T08:49:50+0000",
            "content": "Mike, I like it! This issue together with LUCENE-2831 will make the API so much better and powerful IMO. IndexSearcher is the right class to be passed to Query#weight / Query#createWeight and Weight ctors should take it too. That would make all the instanceof checkes unnecessary and would always have access to the ReaderContext, yet I think we should like those issues as related though.  ",
            "author": "Simon Willnauer",
            "id": "comment-12975742"
        },
        {
            "date": "2010-12-30T11:11:29+0000",
            "content": "\nbut before committing I think we should add a newSearcher to LuceneTestCase, which randomly chooses whether the searcher uses threads, and cutover tests to use this instead of making their own IndexSearcher.\n\nI did this on LUCENE-2751, but the tests won't all pass until we fix the FieldCache autodetect\nsynchronization bug (the Numerics tests will fail with multiple threads)...\n\nDuh, I knew newSearcher() sounded familiar   OK so we have to fix the multi-threaded bug in FC first and then I think commit the newSearcher cutover from LUCENE-2751, then commit this issue.\n\nThen, I think, separately create a new \"higher level\" MultiSearcher w/ a limited search API.  I'll open a new issue for that. ",
            "author": "Michael McCandless",
            "id": "comment-12976011"
        },
        {
            "date": "2010-12-30T11:12:45+0000",
            "content": "We should discuss about how many threads should be spawned. If you have an index with many segments, even small ones, I think only the larger segments should be separate threads, all others should be handled sequentially. So maybe add a maxThreads cound, then sort the IndexReaders by maxDoc and then only spawn maxThreads-1 threads for the bigger readers and then one additional thread for the rest?\n\nThat sounds like a great improvement \u2013 Uwe can you open a new issue for that?  Let's try to leave this issue as a rote refactoring... ",
            "author": "Michael McCandless",
            "id": "comment-12976012"
        },
        {
            "date": "2010-12-30T11:59:23+0000",
            "content": "That sounds like a great improvement - Uwe can you open a new issue for that? Let's try to leave this issue as a rote refactoring...\n\nDone: LUCENE-2840 ",
            "author": "Uwe Schindler",
            "id": "comment-12976020"
        },
        {
            "date": "2010-12-30T12:52:55+0000",
            "content": "i noticed the comment about the shutting down of executorservice... can we just make the executorservice arg mandatory for parallel?\n\nin my opinion, whoever creates it should be responsible for shutting it down, no one else. \n\nso i don't like the dual mode where we sometimes make our own but you can set a different one.\nwe don't clean up correctly at all wrt this in ParallelMultiShredder today in my opinion. ",
            "author": "Robert Muir",
            "id": "comment-12976031"
        },
        {
            "date": "2010-12-30T12:57:42+0000",
            "content": "\nOK so we have to fix the multi-threaded bug in FC first and then I think commit the newSearcher cutover from LUCENE-2751, then commit this issue.\n\nWell, you don't have to do all of that (you could commit this one, then chase down all the bugs). I was just warning you\nso you don't get surprised. ",
            "author": "Robert Muir",
            "id": "comment-12976032"
        },
        {
            "date": "2010-12-30T13:19:03+0000",
            "content": "Mike, also if you apply LUCENE-2751, tests randomly fails because of the LUCENE-2756 bug.\n\nFor example TestBoolean2.testRandomQueries will fail because sometimes it uses a wildcard query,\nand if it then incorporates MUST_NOT, this will fail against the multisearcher/parallelmultisearcher \nbecause the combine() is wrong.\n\nSo I'm thinking we should add the newSearcher tests after you committed this one \n(as long as this one has some reasonable standalone tests to show it works) ",
            "author": "Robert Muir",
            "id": "comment-12976035"
        },
        {
            "date": "2011-01-04T17:55:18+0000",
            "content": "can we just make the executorservice arg mandatory for parallel?\n\nThe thing is, I'd like for \"use threads\" to be easy for the app/user.\n\nBut: we aren't near a good solution here (the threads are tied to segments, which I don't like).\n\nSo I agree, for now, how about I remove the IS ctor that takes boolean useThreads, leaving only the one that takes an ES?  And in the jdoc I can say \"for example here's how to get an ES, but, be sure you properly shut it down when done, and then close the IS/IR\"?\n\nIdeally, in the future, we make it very easy to use concurrency within a single search... ",
            "author": "Michael McCandless",
            "id": "comment-12977375"
        },
        {
            "date": "2011-01-04T19:17:00+0000",
            "content": "Another iteration.  I think it's ready to commit!\n\nI removed the IS ctors that took boolean useThreads \u2013 you must make your own ES instead.\n\nI fixed TestNRTThreads to pass an ES (and at least TestSort does as well), so we have some minimal testing until we commit newSearcher. ",
            "author": "Michael McCandless",
            "id": "comment-12977420"
        },
        {
            "date": "2011-01-05T08:21:29+0000",
            "content": "Mike that patch looks good to me. I just have one small comment about the executor service. You stated that the user has to shutdown the service upon IS#close(). This is absolutely the recommended way but I see a little risk for people calling ExecutorService#shutdownNow()  which interrupts the executing threads and can cause a AlreadyClosedException down in one of our NIO Directories if there are still searches going on etc. I don't think this is super important but I would point it out in the JDoc to give folks a heads-up. Thoughts?\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12977677"
        },
        {
            "date": "2011-01-05T10:35:53+0000",
            "content": "Good point Simon \u2013 I'll add that warning to the jdoc. ",
            "author": "Michael McCandless",
            "id": "comment-12977717"
        },
        {
            "date": "2011-01-05T12:16:50+0000",
            "content": "This broke ant target 'eclipse' - just fixed it (remove the 'remote' dir).\nProbably the same is needed also for \"Idea\" but I'm not sure how to do this. ",
            "author": "Doron Cohen",
            "id": "comment-12977753"
        },
        {
            "date": "2011-01-05T13:15:45+0000",
            "content": "Hello, I think we should revisit branch_3x here. I'm not asking for a backport but i think we should do some targeted javadoc+deprecations:\n\n\tI think we should deprecate Searcher, suggesting to use IndexSearcher instead. Searcher->IndexSearcher is probably the only way\nthis change will affect 99% of users and so this fixes that case, as most users make a simple change to their code.\n\tWe could add some wordage to MultiSearcher, such as 'if you are making a MS of IS you might want to consider MR instead'. This would\nbe nice since we are still going to have the lurking combine() bug, at least people then know that MR is recommended.\n\ti think it would be nice to add something to contrib/remote so users expect to change their code? Personally I think we should deprecate.\nDeprecate doesn't mean there has to be a 1-1 replacement... sometimes we re-think and it wasnt the best idea all along. But deprecation\nhelps alert anyone using it so they wont be surprised with 4.0\n\n ",
            "author": "Robert Muir",
            "id": "comment-12977764"
        },
        {
            "date": "2011-01-05T14:51:35+0000",
            "content": "\nThis broke ant target 'eclipse' - just fixed it (remove the 'remote' dir).\nProbably the same is needed also for \"Idea\" but I'm not sure how to do this. \n\nDone:  r1055474 ",
            "author": "Steve Rowe",
            "id": "comment-12977784"
        },
        {
            "date": "2011-01-05T17:57:09+0000",
            "content": "I agree we should fix 3.x, too.\n\nAlso I didn't fix all the jdocs that reference Searcher/Searchable!\n\nI'll reopen... ",
            "author": "Michael McCandless",
            "id": "comment-12977882"
        },
        {
            "date": "2011-01-05T19:27:59+0000",
            "content": "Reopen to also backport merging of PMS into IS in 3.x. ",
            "author": "Michael McCandless",
            "id": "comment-12977919"
        },
        {
            "date": "2011-01-05T19:31:21+0000",
            "content": "The multithreaded stuff feels like it should be in a subclass of IndexSearcher.\nBut barring that, perhaps make it so that the subSearcher array is only populated if there is an executor passed in (to try and keep IndexSearcher as light weight as possible)? ",
            "author": "Yonik Seeley",
            "id": "comment-12977923"
        },
        {
            "date": "2011-01-05T21:21:05+0000",
            "content": "How about this little patch to avoid creation of IndexSearcher per-segment if not needed? ",
            "author": "Yonik Seeley",
            "id": "comment-12977973"
        },
        {
            "date": "2011-01-05T22:58:25+0000",
            "content": "How about this little patch to avoid creation of IndexSearcher per-segment if not needed?\n\nLooks great! ",
            "author": "Michael McCandless",
            "id": "comment-12978021"
        },
        {
            "date": "2011-01-10T23:16:59+0000",
            "content": "3rd time's a charm? ",
            "author": "Michael McCandless",
            "id": "comment-12979842"
        },
        {
            "date": "2011-03-30T15:50:13+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013404"
        }
    ]
}