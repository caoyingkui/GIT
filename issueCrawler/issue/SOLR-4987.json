{
    "id": "SOLR-4987",
    "title": "Add reindex API",
    "details": {
        "affect_versions": "4.3.1",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "A lot of users ask \"how do I reindex?\"  We have a wiki page that explains this:\n\nhttp://wiki.apache.org/solr/HowToReindex\n\nFor many such users, this is not acceptable.  They assume that once the information is in Solr, it should be possible for Solr to change how it's indexed at the touch of a button.  I don't think they like it when they are told that it's not possible.\n\nPerhaps it's time to give these users what they want \u2013 if they store all fields that are not copyField destinations.\n\nA note to people who find this issue: Until it is marked Resolved with a \"Fixed\" or \"Implemented\" notation, be aware that this has not yet happened, and there is no guarantee that it WILL happen.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13697901",
            "date": "2013-07-02T15:47:29+0000",
            "content": "At this time, I don't know what would be best for many of the implementation details.  Would it be best to have it work like DIH, where you kick it off and then watch it with a status call, or have it work like an optimize with default options, where the http call blocks until it's done? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13697998",
            "date": "2013-07-02T17:15:34+0000",
            "content": "Would we want the new API to be enabled by default, or something you have to specifically turn on in the config?\n\nIf we want it always enabled, then we should log a warning if the user's schema is incompatible with automated reindexing, and any attempt to use the API should fail spectacularly.  If it must be specifically enabled, then we should throw an exception that prevents core startup.  My initial bias is to make it something you have to enable, so if the user enables it and has an incompatible schema, they'll know it immediately because they won't be able to use their index.  I could be persuaded the other way with a good argument. "
        },
        {
            "author": "Upayavira",
            "id": "comment-13698364",
            "date": "2013-07-02T22:56:47+0000",
            "content": "Implement update by query on top of atomic updates, then you can reindex really easily. \n\nYou do an atomic update of <query>:</query> without specifying any fields to be updated, and it would iterate over every document matching the query (much like a delete by query does now), pull the fields back, make a new document, and post it. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16009841",
            "date": "2017-05-14T20:30:32+0000",
            "content": "I think streaming API supports this now through an search(coll1) wrapped in an update(newcoll) wrapped in daemon(). Probably with a requirement that all fields are stored or docValues. If so, this could be documented and close this? "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-16009888",
            "date": "2017-05-14T23:56:23+0000",
            "content": "Streaming Expressions are very strong at re-indexing. Stored fields and docValues are both supported. Massive amounts of data can be moved quickly using the techniques described here:\n\nhttp://joelsolr.blogspot.com/2016/10/solr-63-batch-jobs-parallel-etl-and.html "
        }
    ]
}