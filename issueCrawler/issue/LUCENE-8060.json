{
    "id": "LUCENE-8060",
    "title": "Enable top-docs collection optimizations by default",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "master (8.0)"
        ]
    },
    "description": "We are getting optimizations when hit counts are not required (sorted indexes, MAXSCORE, short-circuiting of phrase queries) but our users won't benefit from them unless we disable exact hit counts by default or we require them to tell us whether hit counts are required.\n\nI think making hit counts approximate by default is going to be a bit trappy, so I'm rather leaning towards requiring users to tell us explicitly whether they need total hit counts. I can think of two ways to do that: either by passing a boolean to the IndexSearcher constructor or by adding a boolean to all methods that produce TopDocs instances. I like the latter better but I'm open to discussion or other ideas?",
    "attachments": {
        "LUCENE-8060.patch": "https://issues.apache.org/jira/secure/attachment/12933654/LUCENE-8060.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16263111",
            "date": "2017-11-22T18:41:00+0000",
            "content": "I don't think it should be mandatory, it should be the default... its a search engine. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16263133",
            "date": "2017-11-22T18:50:04+0000",
            "content": "I'd like to change defaults too but I'm worried that since there won't be a compilation error, users will blindly upgrade and miss the fact that we did this change, regardless of how well we document this change. Or we should at least do something like renaming TopDocs.totalHits to TopDocs.totalHitsApproximate? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16263148",
            "date": "2017-11-22T18:56:41+0000",
            "content": "+1, I think something like that is a better tradeoff. I don't think it needs to be so verbose though. It may be enough to just change it to \"hitCount\" or similar and separately add a boolean indicating if it is exact. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16263175",
            "date": "2017-11-22T19:11:27+0000",
            "content": "What if we conceptually remove TopDocs.totalHits and if users require that, they can chain their Collector with TotalHitCountCollector? We can also add that boolean as a sugar to IndexSearcher.search() API.\n\nIf we're OK w/ removing TopDocs.totalHits, and users getting a compilation error (that's easy to fix), then that's an easy option/change. Or... we deprecate it, but keep the simple IndexSearcher.search() APIs still compute it (by chaining this collector), and let users who'd like to optimize use the search() API which takes a Collector.\n\nJust a thought... ",
            "author": "Shai Erera"
        },
        {
            "id": "comment-16263491",
            "date": "2017-11-22T22:44:49+0000",
            "content": "At first I thought it would be less user-friendly, but the methods I was thinking of in order to get approximate counts (basically assuming that the hit ratio is the same until collection is terminated as in the whole index) would be of low quality, so maybe it's better to not return any hit count as well indeed. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16546522",
            "date": "2018-07-17T12:32:19+0000",
            "content": "Commit d730c8b214bd8b659aa92011e7a8d455af535382 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d730c8b ]\n\nLUCENE-8060: Remove usage of TopDocs#totalHits that should really be IndexSearcher#count.\n\nMany tests were written before we introduced IndexSearcher#count and used\n`searcher.search(query, 1).totalHits` to get the number of matches of a query\nrather than `searcher.count(query)`. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16555890",
            "date": "2018-07-25T16:08:50+0000",
            "content": "Our current hit count estimations are terrible. I don't think any user would want to rely on them or even display them in a UI. Problem is that hit counts are useful from a UI perspective, for instance for pagination, or to improve the user experience by giving users a sense of how many matches there are and giving confidence in the search engine by showing the user that there is a lot of content that matches his query.\n\nI think an ok trade-off that would address the two above use-cases would be to only count up to a certain hit count? For instance if you allow users to paginate up to page 10 and have 20 hits per page, you only need to count up to 200 hits to know how many pages to display. Similarly if your end goal is only to show users that you have lots of content, you could only count up to eg. 10,000 matches and show something like \"more than 10,000 hits\" in the UI if that number is reached. In both cases, this should help keep the counting overhead contained so that it doesn't end up being the bottleneck of query processing?\n\nI believe both TopScoreDocCollector and TopFieldCollector could easily be changed in order to replace `boolean trackTotalHits` with something like `int maxTotalHits` and we would stop counting after visiting maxTotalHits documents?\n\nRegarding integration in IndexSearcher, I am thinking of 3 ideas:\n\n\thardcode a value for this parameter, maybe 10,000 and rename TopDocs.totalHits to make sure users get a compile error\n\tadd a parameter to the search() methods to require users to pass a maxTotalHits\n\tadd a required constructor argument to IndexSearcher that would affect all search() methods\n\n\n\nWe could also make the top docs collectors just compute a ScoreDoc[] (ie. no total hits) and require users to compute the hit count separately, but I'm concerned that it would make simple usage of Lucene harder.\n\nOpinions? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16556071",
            "date": "2018-07-25T18:02:57+0000",
            "content": "I don't know a lot about how the current estimation code works, but would it be worthwhile to capture info in the TopDocs about how accurate/confident the totalHits is, and instead of an\u00a0int maxTotalHits option make it an int minExactTotalHits\u00a0option?\n\nSo if a caller specifies minExactTotalHits=5000 and the resulting TopDocs.totalHits == 42 then there would also be a TopDocs.totalHitsAccuracy == 1.0D because we're 100% confident that that's the number of hits ... but if TopDocs.totalHits == 42000000 then maybe  TopDocs.totalHitsAccuracy == 0.1D or maybe TopDocs.totalHitsAccuracy == 0.9D depending on how confident the estimation is.\n\nwould that even be possible?\n\n\n\nRegarding integration in IndexSearcher, I am thinking of 3 ideas:\n\nI think as long as totalHits is renamed/replaced to force a compilation error and draw attention to the need to use a Collector if you want to control if/how-much the total number of hits is accurately recorded, it's fine to hadcode a default in the IndexSearcher methods that return TopDocs directly ... i would go so far as to suggest that in that in that situation, hardcoding maxTotalHits/minExactTotalHits to \"0\" (ie: don't bother trying to track exactly at all) would be fine. ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16556214",
            "date": "2018-07-25T20:05:57+0000",
            "content": "I don't know a lot about how the current estimation code works\nIt assumes that the density of matches is the same in the whole index. So if docs are collected exactly until doc id 1000 and there are 1M documents in the index, it just multiplies the number of collected documents by 1000. This is often a bad estimate and we have no idea of how large the error is.\nwould that even be possible?\nI'm not aware of ways to get good estimates for queries that match many documents efficiently, especially conjunctions. So the error bound would be terrible in those cases I'm afraid. Maybe we could give a lower bound and an upper bound, or an enum that would say whether the hit count is accurate or a lower bound of the actual hit count.\ni would go so far as to suggest that in that in that situation, hardcoding maxTotalHits/minExactTotalHits to \"0\" (ie: don't bother trying to track exactly at all) would be fine.\nOK. Thanks for the feedback! ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16556268",
            "date": "2018-07-25T21:07:19+0000",
            "content": "I think as long as totalHits is renamed/replaced to force a compilation error and draw attention to the need to use a Collector if you want to control if/how-much the total number of hits is accurately recorded, it's fine to hadcode a default in the IndexSearcher methods that return TopDocs directly ... i would go so far as to suggest that in that in that situation, hardcoding maxTotalHits/minExactTotalHits to \"0\" (ie: don't bother trying to track exactly at all) would be fine.\nTo elaborate, my thinking is that having the \"simple\" IndexSearcher\u00a0 APIs use a default of \"nothing\" (or \"everything\", ie: maxTotalHitsToTrack=Integer.MAX_VALUE ) seems much easier to explain/understand to new users regardless of their index size/usecases then some arbitrary positive number like \"10,000\")\n\nBut better still \u2013 let's assume:\n\n\twe deprecate/remove TopDocs.totalHits\n\t\n\t\treplace it with a TopDocs.getTotalHits()\n\t\n\t\n\twe add an int maxTotalHitsToTrack option on the collectors (builders)\n\t\n\t\tdocument it such that any positive number means \"track accurate hit count up to this amount, after that just stop\"\n\t\tdocument everything such that if maxTotalHitsToTrack is set to a negative number then then TopDocs.getTotalHits() will throw an illegal state exception.\n\t\n\t\n\n\n\n...then i would suggest that the IndexSearcher methods that return TopDocs directly should default to using maxTotalHitsToTrack=-1 .. so any attempt to use the \"simple\" apis makes it really clear it doesn't support hit tracking. ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16556323",
            "date": "2018-07-25T21:51:20+0000",
            "content": "I'd like to avoid IndexSearcher doing \"nothing\" or \"everything\". \"everything\" has the downside that it makes queries slow. On the other hand I'm concerned that the \"nothing\" approach is not very usable in practice as it is hard to build a UI with pagination, which I see is a very common need. I wouldn't like that simple use-cases can't use the simple search() methods on IndexSearcher and need to create collectors manually.\n\nIt is true that a value of 1000 or 10,000 feels arbitrary and might not be ideal for everybody depending on data volumes or use-case, but maybe we could add a setter on IndexSearcher? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16556397",
            "date": "2018-07-25T23:21:06+0000",
            "content": "On the other hand I'm concerned that the \"nothing\" approach is not very usable in practice as it is hard to build a UI with pagination, which I see is a very common need. ...\nOh, right \u2013 because if we default to \"0\" (or \"-1\" or whatever means \"don't track at all\") the the consumer of TopDocs doesn't even know if there should be a \"next\" link. yeah, i guess some arbitrary finite positive integer is the least bad option.\n... maybe we could add a setter on IndexSearcher?\nYeah i dunno... that just feels kind of weird to me \u2013 i guess i have two straw man concerns about that approach...\n\n\twhy have a setDefaultNumTotalHitsToTrack(int) just for this concept, and not a setter for all the other collector concepts that we currently have defaults for in the simple search/searchAfter methods (like Sort sort , boolean doDocScores , boolean doMaxScore , etc...)\n\t\n\t\tdo we want to go down the route of an IndexSearcherConfig ?\n\t\n\t\n\tthis seems like it introduces divergent \"intermediate APIs\" for users to learn about that might frustrate them down the road...\n\t\n\t\tToday, the first time you build an app you just call something like IndexSearcher.search(myQuery, 100, mySort) and you're happy, and then later if you decide you want to do something more complicated you read the docs and learn about Collectors and you start using the builder methods to create collectors that solve common problems, and if you get to the point that those don't meet your needs you already understand the collector concept and you can write your own (composing existing ones)\n\t\tif there's IndexSearcher setters that change the default behavior of the search() methods, then that becomes the path of least resistence that intermediate users go down to do slightly more complex things, but if they reach the point where they want to do something new that doesn't have a setter, they have to \"start over\" learning about how to do searchers, and read up on writting/composing collectors w/o having used the out of the box collector builds yet.\n\t\n\t\n\n ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16558683",
            "date": "2018-07-26T17:53:56+0000",
            "content": "why have a setDefaultNumTotalHitsToTrack(int) just for this concept, and not a setter for all the other collector concepts that we currently have defaults for in the simple search/searchAfter methods (like Sort sort , boolean doDocScores , boolean doMaxScore , etc...)\nActually some concepts like the similarity and the query cache policy are set as members of IndexSearcher, so this isn't really new? I think the assumption is that you most likely need the same values for most your requests and do not need it to be configurable on a per-request basis, unlike the sort or the number of hits to collect?\ndo we want to go down the route of an IndexSearcherConfig ?\nA user suggested adding this class last year: LUCENE-7902. I don't have a strong opinion on this one besides keeping a simple IndexSearcher ctor that only take a reader and has sensible defaults.\nthis seems like it introduces divergent \"intermediate APIs\" for users to learn about that might frustrate them down the road...\nThis is a good point. I also dislike a bit adding new setters/configuration options if we can come up with a default value that is reasonable and should work for most users, at least as long as their use-case remains simple. I'm seeing pros and cons either way and I would probably be fine either way too.\n\nBased on your comments I am getting the feeling that you are leaning towards to exposing this configuration option, having a sensible default and pointing users to creating collectors manually if they have more specific needs, do I get it right? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16558729",
            "date": "2018-07-26T18:34:04+0000",
            "content": "Based on your comments I am getting the feeling that you are leaning towards to exposing this configuration option, having a sensible default and pointing users to creating collectors manually if they have more specific needs, do I get it right?\nI dunno ... i like your TotalHits proposal in LUCENE-8430, i like that if new users see that object they can read the docs and see that sometimes they might not get accurate counts, and that class can have javadoc links to ways they can ensure a higher threshold (or an unlimited threshold to force exact counts) ... i'm just not sure i like the idea of the TotalHits javadocs needing to link to two differnet ways of achieving the samething: an IndexSearcher config option to change the \"defaults\" and a TopFieldCollector builder method that takes in a value ... seems clunky to me...\n\nBut to be clear: i don't have super strong feelings about the clunkiness. Happy to defer to you on this.\u00a0 Just wanted to point out (in my last comment) why it felt weird to me. ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16562411",
            "date": "2018-07-30T19:44:43+0000",
            "content": "I merged both sub tasks, and now propose this patch which make IndexSearcher's search and searchAfter only count hits accurately up to 1,000. My reasoning is that this number is sufficiently low so that queries that have lots of hits wouldn't be slow because of the need to count hit, and sufficiently high to implement pagination or let the user know that there are \"plenty\" of hits. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16564195",
            "date": "2018-07-31T18:52:17+0000",
            "content": "To give some perspective, here are the results of luceneutil on wikimediumall with this patch that only changes defaults. Some queries get a very serious speedup.\n\n                    TaskQPS baseline      StdDev   QPS patch      StdDev                Pct diff\n              AndHighMed       45.93      (1.4%)       40.67      (2.7%)  -11.4% ( -15% -   -7%)\n              AndHighLow      836.13      (2.5%)      771.97      (4.0%)   -7.7% ( -13% -   -1%)\n       HighTermMonthSort       22.10     (12.7%)       20.76      (9.3%)   -6.1% ( -24% -   18%)\n                  IntNRQ        8.35     (11.7%)        7.96     (14.1%)   -4.7% ( -27% -   23%)\n                 Prefix3       69.56      (4.6%)       67.11      (4.4%)   -3.5% ( -11% -    5%)\n                Wildcard       41.95      (4.3%)       40.48      (5.0%)   -3.5% ( -12% -    6%)\n            HighSpanNear       13.65      (1.6%)       13.41      (2.0%)   -1.8% (  -5% -    1%)\n             LowSpanNear        7.84      (2.1%)        7.72      (3.3%)   -1.6% (  -6% -    3%)\n             MedSpanNear       15.41      (4.0%)       15.21      (3.8%)   -1.3% (  -8% -    6%)\n         LowSloppyPhrase        6.67      (2.4%)        6.59      (3.7%)   -1.1% (  -7% -    5%)\n                 Respell      260.19      (2.1%)      258.37      (2.6%)   -0.7% (  -5% -    4%)\n              OrHighHigh        9.49      (3.8%)       10.45      (2.1%)   10.0% (   4% -   16%)\n         MedSloppyPhrase       42.89      (2.5%)       49.14      (4.7%)   14.6% (   7% -   22%)\n   HighTermDayOfYearSort       19.88      (5.5%)       23.16      (5.4%)   16.5% (   5% -   29%)\n               LowPhrase       21.20      (1.5%)       24.98      (1.7%)   17.8% (  14% -   21%)\n        HighSloppyPhrase        8.70      (4.1%)       12.41      (5.8%)   42.7% (  31% -   54%)\n            OrNotHighLow      703.04      (1.9%)     1024.70      (4.9%)   45.8% (  38% -   53%)\n             AndHighHigh       22.95      (1.2%)       35.81      (4.4%)   56.0% (  49% -   62%)\n              HighPhrase        6.41      (4.8%)       10.25      (2.8%)   60.0% (  49% -   70%)\n                  Fuzzy1       71.70      (2.8%)      130.01      (7.0%)   81.3% (  69% -   93%)\n               MedPhrase        3.69      (7.0%)        7.05      (3.2%)   90.7% (  75% -  108%)\n               OrHighMed       27.98      (3.5%)       68.75      (7.7%)  145.7% ( 129% -  162%)\n                  Fuzzy2       15.03      (3.3%)       43.46     (11.5%)  189.1% ( 168% -  210%)\n                 LowTerm      312.94      (4.6%)     1939.36     (35.1%)  519.7% ( 458% -  586%)\n               OrHighLow       47.32      (4.4%)      658.31     (46.8%) 1291.1% (1187% - 1404%)\n                 MedTerm       82.45      (3.0%)     1532.45     (94.1%) 1758.6% (1612% - 1913%)\n            OrNotHighMed       55.34      (3.3%)     1075.65     (47.4%) 1843.8% (1736% - 1958%)\n            OrHighNotLow       50.30      (2.8%)     1369.26    (113.1%) 2622.1% (2438% - 2815%)\n           OrHighNotHigh       22.97      (4.2%)     1371.00    (205.8%) 5869.7% (5430% - 6347%)\n           OrNotHighHigh       15.33      (4.0%)     1070.48    (254.4%) 6881.0% (6368% - 7435%)\n            OrHighNotMed       11.76      (2.9%)     1097.78    (315.6%) 9235.1% (8669% - 9833%)\n                HighTerm       12.71      (3.4%)     1549.32    (581.9%)12094.4% (11132% - 13123%)\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16564923",
            "date": "2018-08-01T08:04:55+0000",
            "content": "Commit 99dbe936818add5723f2014a90bd0ea8a17c8f19 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=99dbe93 ]\n\nLUCENE-8060: IndexSearcher's search and searchAfter methods now only compute total hit counts accurately up to 1,000. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16565243",
            "date": "2018-08-01T12:42:48+0000",
            "content": "Commit 116309160e3e4c9df37f60e077126f58bd7e3e8e in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1163091 ]\n\nLUCENE-8060: ToChildBlockJoinQuery can't delegate getMaxScore but not advanceShallow. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16568929",
            "date": "2018-08-03T23:49:49+0000",
            "content": "Seed for a reproducing TestApproximationSearchEquivalence.testReqOpt() failure, from https://builds.apache.org/job/Lucene-Solr-BadApples-NightlyTests-master/22/; git bisect says the first bad commit is 99dbe93 on this issue:\n\n\nChecking out Revision 6afd3d11929a75e3b3310638b32f4ed55da3ea6e (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestApproximationSearchEquivalence -Dtests.method=testReqOpt -Dtests.seed=195B60C59D5CF096 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.badapples=true -Dtests.linedocsfile=/home/jenkins/jenkins-slave/workspace/Lucene-Solr-BadApples-NightlyTests-master/test-data/enwiki.random.lines.txt -Dtests.locale=th-TH -Dtests.timezone=Pacific/Tahiti -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 2.01s J1 | TestApproximationSearchEquivalence.testReqOpt <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: target = 4043 < docID = 4044\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([195B60C59D5CF096:7DBAE508B63B8854]:0)\n   [junit4]    > \tat org.apache.lucene.search.AssertingScorer.advanceShallow(AssertingScorer.java:81)\n   [junit4]    > \tat org.apache.lucene.search.ReqOptSumScorer.advanceShallow(ReqOptSumScorer.java:215)\n   [junit4]    > \tat org.apache.lucene.search.AssertingScorer.advanceShallow(AssertingScorer.java:82)\n   [junit4]    > \tat org.apache.lucene.search.BlockMaxConjunctionScorer.advanceShallow(BlockMaxConjunctionScorer.java:228)\n   [junit4]    > \tat org.apache.lucene.search.BlockMaxConjunctionScorer$1.moveToNextBlock(BlockMaxConjunctionScorer.java:89)\n   [junit4]    > \tat org.apache.lucene.search.BlockMaxConjunctionScorer$1.advanceTarget(BlockMaxConjunctionScorer.java:110)\n   [junit4]    > \tat org.apache.lucene.search.BlockMaxConjunctionScorer$1.doNext(BlockMaxConjunctionScorer.java:181)\n   [junit4]    > \tat org.apache.lucene.search.BlockMaxConjunctionScorer$1.advance(BlockMaxConjunctionScorer.java:137)\n   [junit4]    > \tat org.apache.lucene.search.BlockMaxConjunctionScorer$1.nextDoc(BlockMaxConjunctionScorer.java:132)\n   [junit4]    > \tat org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:261)\n   [junit4]    > \tat org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:214)\n   [junit4]    > \tat org.apache.lucene.search.BulkScorer.score(BulkScorer.java:39)\n   [junit4]    > \tat org.apache.lucene.search.AssertingBulkScorer.score(AssertingBulkScorer.java:71)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:652)\n   [junit4]    > \tat org.apache.lucene.search.AssertingIndexSearcher.search(AssertingIndexSearcher.java:72)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:443)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:567)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.searchAfter(IndexSearcher.java:419)\n   [junit4]    > \tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:430)\n   [junit4]    > \tat org.apache.lucene.search.SearchEquivalenceTestBase.assertSameScores(SearchEquivalenceTestBase.java:251)\n   [junit4]    > \tat org.apache.lucene.search.SearchEquivalenceTestBase.assertSameScores(SearchEquivalenceTestBase.java:228)\n   [junit4]    > \tat org.apache.lucene.search.TestApproximationSearchEquivalence.testReqOpt(TestApproximationSearchEquivalence.java:296)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> NOTE: test params are: codec=CheapBastard, sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@150ed858), locale=th-TH, timezone=Pacific/Tahiti\n   [junit4]   2> NOTE: Linux 4.4.0-112-generic amd64/Oracle Corporation 1.8.0_172 (64-bit)/cpus=4,threads=1,free=389119792,total=526385152\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16568940",
            "date": "2018-08-04T00:07:14+0000",
            "content": "Another separate reproducing failure, of TestIndexWriterReader.testDuringAddIndexes(), from https://builds.apache.org/job/Lucene-Solr-BadApples-NightlyTests-master/22/; git bisect says the first bad commit is also 99dbe93 on this issue:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestIndexWriterReader -Dtests.method=testDuringAddIndexes -Dtests.seed=195B60C59D5CF096 -Dtests.multiplier=2 -Dtests.nightly=true -Dtests.slow=true -Dtests.badapples=true -Dtests.linedocsfile=/home/jenkins/jenkins-slave/workspace/Lucene-Solr-BadApples-NightlyTests-master/test-data/enwiki.random.lines.txt -Dtests.locale=de-AT -Dtests.timezone=Asia/Yangon -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 7.95s J2 | TestIndexWriterReader.testDuringAddIndexes <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([195B60C59D5CF096:EB820ED6FAF5E600]:0)\n   [junit4]    > \tat org.apache.lucene.index.TestIndexWriterReader.testDuringAddIndexes(TestIndexWriterReader.java:772)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   1> TEST: now get reader\n   [junit4]   2> NOTE: leaving temporary files on disk at: /home/jenkins/jenkins-slave/workspace/Lucene-Solr-BadApples-NightlyTests-master/checkout/lucene/build/core/test/J2/temp/lucene.index.TestIndexWriterReader_195B60C59D5CF096-001\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {field1=FSTOrd50, indexname=PostingsFormat(name=LuceneFixedGap), field=PostingsFormat(name=LuceneVarGapFixedInterval), foo=PostingsFormat(name=LuceneVarGapFixedInterval), id=FSTOrd50, field3=PostingsFormat(name=LuceneFixedGap), field2=PostingsFormat(name=LuceneVarGapFixedInterval), field5=FSTOrd50, field4=TestBloomFilteredLucenePostings(BloomFilteringPostingsFormat(Lucene50(blocksize=128)))}, docValues:{}, maxPointsInLeafNode=258, maxMBSortInHeap=7.974682291420739, sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@7f24c04), locale=de-AT, timezone=Asia/Yangon\n   [junit4]   2> NOTE: Linux 4.4.0-112-generic amd64/Oracle Corporation 1.8.0_172 (64-bit)/cpus=4,threads=1,free=176866848,total=520617984\n\n ",
            "author": "Steve Rowe"
        },
        {
            "id": "comment-16569575",
            "date": "2018-08-05T20:46:22+0000",
            "content": "Commit 3b15be378101ddd1e6f4529f6b02694128fb9ae4 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3b15be3 ]\n\nLUCENE-8060: Fix test bug.\n\nShould use IndexSearcher#count to get accurate counts. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16569576",
            "date": "2018-08-05T20:46:28+0000",
            "content": "Thanks Steve. The second one was a test bug due to the fact that TopDocs.totalHits is not accurate anymore, but the first one was an actual bug that could cause boolean queries that mix SHOULD and MUST clauses to advance the SHOULD clauses backwards. I just pushed fixes. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16569720",
            "date": "2018-08-06T04:15:48+0000",
            "content": "Commit 3b15be378101ddd1e6f4529f6b02694128fb9ae4 in lucene-solr's branch refs/heads/jira/http2 from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3b15be3 ]\n\nLUCENE-8060: Fix test bug.\n\nShould use IndexSearcher#count to get accurate counts. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16571940",
            "date": "2018-08-07T16:34:50+0000",
            "content": "Mike just fixed nightly benchmarks so that we can see the impact on this change: http://people.apache.org/~mikemccand/lucenebench/. Results are very promising with most queries including exact phrases and fuzzy queries getting a significant speedup. On the other hand, nested boolean queries had a performance regression so I opened LUCENE-8448. ",
            "author": "Adrien Grand"
        }
    ]
}