{
    "id": "LUCENE-6793",
    "title": "NumericRangeQuery.hashCode() produces frequent collisions",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "4.6,                                            5.3",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "We have a user who is developing a Solr plugin and needs to store NumericRangeQuery objects in a hash table.  They found that NumericRangeQuery.hashCode() produces extremely frequent collisions.  I understand that the contract for hashCode doesn't (and can't) guarantee unique hash codes for every value, but the distribution of this method seems particularly bad with an affinity for the hash value 897548010. Out of a set of 31 ranges, hashCode returned 897548010 14 times. This is going to result in very inefficient distribution of the objects in the hash table. The standard \"times 31\" hash function recommended by Effective Java fares quite a bit better, although it still produces quite a few collisions.  Here's a test case that compares the results of the current hashCode function with the times 31 method.  An even better method, like Murmur3 might be found here: http://floodyberry.com/noncryptohashzoo/\n\n\npackage com.company;\n\nimport org.apache.lucene.search.NumericRangeQuery;\n\npublic class Main {\n\n    public static int betterHash(NumericRangeQuery query) {\n        // I can't subclass NumericRangeQuery since it's constructor is private, so I can't call super and\n        // had to copy and paste from the hashCode method for both MultiTermQuery and NumericRangeQuery\n\n        // MultiTermQuery.hashCode (copied verbatim)\n        final int prime = 31;\n        int result = 1;\n        result = prime * result + Float.floatToIntBits(query.getBoost());\n        result = prime * result + query.getRewriteMethod().hashCode();\n        if (query.getField() != null) result = prime * result + query.getField().hashCode();\n\n        // NumericRangeQuery.hashCode (changed XOR with random constant to times 31)\n        result = result * prime + query.getPrecisionStep();\n        if (query.getMin() != null) result = result * prime + query.getMin().hashCode();\n        if (query.getMax() != null) result = result * prime + query.getMax().hashCode();\n        result = result * prime + Boolean.valueOf(query.includesMin()).hashCode();\n        result = result * prime + Boolean.valueOf(query.includesMax()).hashCode();\n        return result;\n    }\n\n    public static void main(String[] args) {\n        long previous = Long.MIN_VALUE;\n        long[] list = {\n                -9223372036854775798L,\n                -8608480567731124078L,\n                -7993589098607472357L,\n                -7378697629483820637L,\n                -6763806160360168916L,\n                -6148914691236517196L,\n                -5534023222112865475L,\n                -4919131752989213755L,\n                -4304240283865562034L,\n                -3689348814741910314L,\n                -3074457345618258593L,\n                -2459565876494606873L,\n                -1844674407370955152L,\n                -1229782938247303432L,\n                -614891469123651711L,\n                10L,\n                614891469123651730L,\n                1229782938247303451L,\n                1844674407370955171L,\n                2459565876494606892L,\n                3074457345618258612L,\n                3689348814741910333L,\n                4304240283865562053L,\n                4919131752989213774L,\n                5534023222112865494L,\n                6148914691236517215L,\n                6763806160360168935L,\n                7378697629483820656L,\n                7993589098607472376L,\n                8608480567731124097L,\n                Long.MAX_VALUE\n        };\n\n        for (long current : list) {\n            NumericRangeQuery<Long> query =  NumericRangeQuery.newLongRange(\"_token_long\", 8, previous, current, true, true);\n            System.out.println(\"[\" + previous + \" TO \" + current + \"]: \" + query.hashCode() + \" / \" + betterHash(query));\n            previous = current + 1;\n        }\n    }\n}",
    "attachments": {
        "LUCENE-6793.patch": "https://issues.apache.org/jira/secure/attachment/12790141/LUCENE-6793.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14737955",
            "author": "Yonik Seeley",
            "date": "2015-09-10T01:26:27+0000",
            "content": "Hmmm, yeah... the XORs of random constants don't actually accomplish much in the current hashCode since there is no bit shifting (and the xor operations will be done the same for all NumericRangeQueries).\nYour betterHash looks much better, more in line with our other hashCode implementations. "
        },
        {
            "id": "comment-14738736",
            "author": "Adrien Grand",
            "date": "2015-09-10T13:26:42+0000",
            "content": "+1 to switching to the \"times 31\" method "
        },
        {
            "id": "comment-15169094",
            "author": "Adrien Grand",
            "date": "2016-02-26T14:34:39+0000",
            "content": "Here is a patch. This also fixes the new point queries that were using the same pattern for their hashcode. "
        },
        {
            "id": "comment-15169177",
            "author": "Michael McCandless",
            "date": "2016-02-26T15:20:00+0000",
            "content": "Thanks Adrien Grand! "
        },
        {
            "id": "comment-15169218",
            "author": "ASF subversion and git services",
            "date": "2016-02-26T15:48:14+0000",
            "content": "Commit 509c6a0acbeaee6291bb80a5f9537aaff55599c4 in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=509c6a0 ]\n\nLUCENE-6793: Make LegacyNumericRangeQuery and point queries less subject to hash collisions. "
        }
    ]
}