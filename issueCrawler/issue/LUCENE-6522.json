{
    "id": "LUCENE-6522",
    "title": "Reproducible fieldcache AIOOBE only on J9",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "Haven't dug in yet, just:\n\n\treproduces easily on J9\n\tdoes not happen on Oracle JVM\n\n\n\n\n   [junit4] Suite: org.apache.lucene.uninverting.TestFieldCacheVsDocValues\n   [junit4] IGNOR/A 0.51s J2 | TestFieldCacheVsDocValues.testHugeBinaryValueLimit\n   [junit4]    > Assumption #1: test requires codec with limits on max binary field length\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestFieldCacheVsDocValues -Dtests.method=testSortedSetFixedLengthVsUninvertedField -Dtests.seed=831619B333C362E6 -Dtests.locale=es_UY -Dtests.timezone=Atlantic/Bermuda -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.54s J2 | TestFieldCacheVsDocValues.testSortedSetFixedLengthVsUninvertedField <<<\n   [junit4]    > Throwable #1: java.lang.ArrayIndexOutOfBoundsException\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([831619B333C362E6:B6EC641493EA4AD3]:0)\n   [junit4]    > \tat org.apache.lucene.uninverting.DocTermOrds$OrdWrappedTermsEnum.seekCeil(DocTermOrds.java:692)\n   [junit4]    > \tat org.apache.lucene.uninverting.TestFieldCacheVsDocValues.assertEquals(TestFieldCacheVsDocValues.java:570)\n   [junit4]    > \tat org.apache.lucene.uninverting.TestFieldCacheVsDocValues.assertEquals(TestFieldCacheVsDocValues.java:511)\n   [junit4]    > \tat org.apache.lucene.uninverting.TestFieldCacheVsDocValues.doTestSortedSetVsUninvertedField(TestFieldCacheVsDocValues.java:385)\n   [junit4]    > \tat org.apache.lucene.uninverting.TestFieldCacheVsDocValues.testSortedSetFixedLengthVsUninvertedField(TestFieldCacheVsDocValues.java:105)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:785)\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestFieldCacheVsDocValues -Dtests.method=testSortedSetVariableLengthVsUninvertedField -Dtests.seed=831619B333C362E6 -Dtests.locale=es_UY -Dtests.timezone=Atlantic/Bermuda -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.42s J2 | TestFieldCacheVsDocValues.testSortedSetVariableLengthVsUninvertedField <<<\n   [junit4]    > Throwable #1: java.lang.ArrayIndexOutOfBoundsException\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([831619B333C362E6:2AB51ED6D324E426]:0)\n   [junit4]    > \tat org.apache.lucene.uninverting.DocTermOrds$OrdWrappedTermsEnum.seekCeil(DocTermOrds.java:692)\n   [junit4]    > \tat org.apache.lucene.uninverting.TestFieldCacheVsDocValues.assertEquals(TestFieldCacheVsDocValues.java:570)\n   [junit4]    > \tat org.apache.lucene.uninverting.TestFieldCacheVsDocValues.assertEquals(TestFieldCacheVsDocValues.java:511)\n   [junit4]    > \tat org.apache.lucene.uninverting.TestFieldCacheVsDocValues.doTestSortedSetVsUninvertedField(TestFieldCacheVsDocValues.java:385)\n   [junit4]    > \tat org.apache.lucene.uninverting.TestFieldCacheVsDocValues.testSortedSetVariableLengthVsUninvertedField(TestFieldCacheVsDocValues.java:112)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:785)\n   [junit4]   2> NOTE: leaving temporary files on disk at: /home/rmuir/workspace/trunk-ibm/lucene/build/misc/test/J2/temp/lucene.uninverting.TestFieldCacheVsDocValues 831619B333C362E6-001\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene50): {indexed=FSTOrd50, id=Lucene50(blocksize=128)}, docValues:{dv=DocValuesFormat(name=Asserting), field=DocValuesFormat(name=Asserting)}, sim=DefaultSimilarity, locale=es_UY, timezone=Atlantic/Bermuda\n   [junit4]   2> NOTE: Linux 3.13.0-49-generic amd64/IBM Corporation 1.8.0 (64-bit)/cpus=8,threads=1,free=10179616,total=32243712\n   [junit4]   2> NOTE: All tests run in this JVM: [TestDocTermOrds, TestNumericTerms32, TestFieldCacheVsDocValues]\n   [junit4] Completed [21/25] on J2 in 4.50s, 10 tests, 2 errors, 1 skipped <<< FAILURES!",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14572066",
            "author": "Robert Muir",
            "date": "2015-06-04T03:54:26+0000",
            "content": "Test passes with -Dargs=\"-Xint\" added to the reproduce line. Smells like a compiler bug. "
        },
        {
            "id": "comment-14572080",
            "author": "Robert Muir",
            "date": "2015-06-04T04:04:51+0000",
            "content": "I reported this here: https://developer.ibm.com/answers/questions/194669/reproducible-compilation-bug-with-lucene-test-suit.html "
        },
        {
            "id": "comment-14575200",
            "author": "Kevin Langman",
            "date": "2015-06-05T20:52:29+0000",
            "content": "Can you give me the \"java -version\" output from the JVM used when you hit the problem? "
        },
        {
            "id": "comment-14575504",
            "author": "Robert Muir",
            "date": "2015-06-06T02:03:10+0000",
            "content": "Hmm, I meant to include that:\n\n java version \"1.8.0\"\n Java(TM) SE Runtime Environment (build pxa6480sr1-20150417_01(SR1))\n IBM J9 VM (build 2.8, JRE 1.8.0 Linux amd64-64 Compressed References 20150410_243669 (JIT enabled, AOT enabled)\n J9VM - R28_Java8_SR1_20150410_1531_B243669\n JIT  - tr.r14.java_20150402_88976.03\n GC   - R28_Java8_SR1_20150410_1531_B243669_CMPRSS\n J9CL - 20150410_243669)\n JCL - 20150413_01 based on Oracle jdk8u45-b13\n\n "
        },
        {
            "id": "comment-14577584",
            "author": "Kevin Langman",
            "date": "2015-06-08T18:13:49+0000",
            "content": "I have recreated the problem. I am narrowing it down now and will comment again when I have some progress to report. "
        },
        {
            "id": "comment-14579708",
            "author": "Kevin Langman",
            "date": "2015-06-09T22:50:56+0000",
            "content": "Found the problem. Now I am just looking for an appropriate fix. "
        },
        {
            "id": "comment-14582136",
            "author": "Kevin Langman",
            "date": "2015-06-11T15:52:18+0000",
            "content": "OK. Looks like we have a good fix now. This fix is being proposed for inclusion for the next release cycle for the IBM JVM which is currently scheduled for release at the end of July 2015. "
        },
        {
            "id": "comment-14582862",
            "author": "Robert Muir",
            "date": "2015-06-12T02:47:51+0000",
            "content": "Thanks for reporting back! In the meantime, I can mute this test for J9 so we can move forwards with testing.\n\nIs there a particular code shape affected / anything you can tell us about the bug in case we see other failures? "
        },
        {
            "id": "comment-14582874",
            "author": "ASF subversion and git services",
            "date": "2015-06-12T03:06:53+0000",
            "content": "Commit 1685019 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1685019 ]\n\nLUCENE-6522: mute test temporarily on J9 "
        },
        {
            "id": "comment-14582875",
            "author": "ASF subversion and git services",
            "date": "2015-06-12T03:07:30+0000",
            "content": "Commit 1685020 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685020 ]\n\nLUCENE-6522: mute test temporarily on J9 "
        },
        {
            "id": "comment-14582964",
            "author": "Robert Muir",
            "date": "2015-06-12T05:25:53+0000",
            "content": "For example this failure might take a lot more time for me to create a repro for: LUCENE-6557\n\nSymptoms are different, but the code being test is pretty simple (http://svn.apache.org/viewvc/lucene/dev/branches/branch_5x/lucene/analysis/common/src/java/org/apache/lucene/analysis/sv/SwedishLightStemmer.java?view=markup).\n\nIn that case it might depend on some compilation or what not that happened earlier in another test, our tests reuse JVM instances... and also randomize order of test classes which for better or worse, seems to give the tests the ability to find fun things.\n\nIf you think it might be the same bug I'll defer digging into that one until we have your fix.  "
        },
        {
            "id": "comment-14583329",
            "author": "Kevin Langman",
            "date": "2015-06-12T12:23:48+0000",
            "content": "The problem boils down to this: In some cases the x86 code generator will \"forget\" to add a \"TEST\" instruction after a \"NOT\" instruction and before a conditional branch. This means that the conditional branch is not based on the results of the \"NOT\" instruction as was intended by the code. Since this problem is occurring at such a low level, it's near impossible to link it back to the Java code that triggered the problem.\n\nAs for LUCENE-6557, The badly compiled method that caused the first issue is org/apache/lucene/uninverting/DocTermOrds$OrdWrappedTermsEnum.seekCeil() which was the 2nd method down on the AIOOB exception stack trace. In this new case I don't see that method in the stack trace, but I can't rule out that some other method was effected by the same bug resulting in this new issue. It's hard to give a probability here but I would not be surprised to find that it's the same issue. "
        },
        {
            "id": "comment-14629909",
            "author": "Kevin Langman",
            "date": "2015-07-16T15:47:03+0000",
            "content": "Just to complete the documentation of this problem.. The IBM APAR that describes this problem is: IV75206\n\nYou should be able to find the APAR text using a search engine in a few days. "
        },
        {
            "id": "comment-14629935",
            "author": "Michael McCandless",
            "date": "2015-07-16T16:05:55+0000",
            "content": "Thanks for the update Kevin Langman.\n\nIs there some way we all can see the IBM APAR IV75206 directly?  Is J9's issue tracking system publicly accessible?  I guess it must be, if search engines will find it in a few days ... "
        },
        {
            "id": "comment-14630069",
            "author": "Kevin Langman",
            "date": "2015-07-16T17:45:35+0000",
            "content": "An APAR defines a fix rather then a problem report. APARs are published, but we only create APARs once we know a code change is required. "
        },
        {
            "id": "comment-16466983",
            "author": "Dawid Weiss",
            "date": "2018-05-08T07:13:40+0000",
            "content": "We can probably remove assumptions ignoring tests under J9 due to this issue (there's one in TestFieldCacheVsDocValues for example). The bug seems to be fixed (it was a long time ago). "
        }
    ]
}