{
    "id": "LUCENE-6243",
    "title": "jflex files are out of sync with the generated files",
    "details": {
        "resolution": "Invalid",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Trivial",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "This kind of sucks I think \u2013 there have been a few changes to generated Java files that make the jflex sources out of sync. This means that if somebody regenerates those files he or she has to apply the same changes manually again. For example:\n\nhttps://svn.apache.org/viewvc?view=revision&revision=r1625586\n\nI understand some of these would require changes in jflex but just wanted to raise the issue.\n\nAlso, ant jflex currently doesn't work for me on trunk:\n\ncd lucene/analysis/common\nant jflex\n\n-jflex-StandardAnalyzer:\n    [jflex] Generated: StandardTokenizerImpl.java\n    [jflex] Generated: ClassicTokenizerImpl.java\n\n-jflex-UAX29URLEmailTokenizer:\n    [jflex] Generated: UAX29URLEmailTokenizerImpl.java\n\n-jflex-wiki-tokenizer:\n    [jflex] Generated: WikipediaTokenizerImpl.java\n\ngenerate-jflex-html-char-entities:\n     [exec]   File \"htmlentity.py\", line 22\n     [exec]     print get_apache_license()\n     [exec]                            ^\n     [exec] SyntaxError: invalid syntax\n\nBUILD FAILED\nC:\\Work\\lucene-solr-svn\\trunk\\lucene\\analysis\\common\\build.xml:49: exec returned: 1",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14320057",
            "author": "Dawid Weiss",
            "date": "2015-02-13T13:19:34+0000",
            "content": "Oh jeez... I now see the patch in full. Ok, nevermind.\n\n  <macrodef name=\"run-jflex-and-disable-buffer-expansion\">\n    <attribute name=\"dir\"/>\n    <attribute name=\"name\"/>\n    <sequential>\n      <jflex file=\"@{dir}/@{name}.jflex\" outdir=\"@{dir}\" nobak=\"on\" inputstreamctor=\"false\"/>\n      <!-- LUCENE-5897: Disallow scanner buffer expansion -->\n      <replaceregexp file=\"@{dir}/@{name}.java\"\n                     match=\"[ \\t]*/\\* is the buffer big enough\\? \\*/\\s+if \\(zzCurrentPos >= zzBuffer\\.length.*?\\}[ \\t]*\\r?\\n\"\n                     replace=\"\" flags=\"s\" />\n      <replaceregexp file=\"@{dir}/@{name}.java\"\n                     match=\"private static final int ZZ_BUFFERSIZE =\"\n                     replace=\"private int ZZ_BUFFERSIZE =\"/>\n      <replaceregexp file=\"@{dir}/@{name}.java\"\n                     match=\"int requested = zzBuffer.length - zzEndRead;\"\n                     replace=\"int requested = zzBuffer.length - zzEndRead - zzFinalHighSurrogate;\"/>\n      <replaceregexp file=\"@{dir}/@{name}.java\"\n                     match=\"(zzFinalHighSurrogate = 1;)(\\r?\\n)\"\n                     replace=\"\\1\\2          if (totalRead == 1) { return true; }\\2\"/>\n    </sequential>\n  </macrodef>\n\n "
        }
    ]
}