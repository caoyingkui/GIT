{
    "id": "LUCENE-783",
    "title": "Store all metadata in human-readable segments file",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Various index-reading components in Lucene need metadata in addition to data.\nThis metadata is presently stored in arbitrary binary headers and spread out\nover several files.  We should move to concentrate it in a single file, and \nthis file should be encoded using a human-readable, extensible, standardized \ndata serialization language \u2013 either XML or YAML.\n\n\n\tMaking metadata human-readable makes debugging easier.  Centralizing it\n  makes debugging easier still.  Developers benefit from being able to scan\n  and locate relevant information quickly and with less debug printing.  Users\n  get a new window through which to peer into the index structure.\n\tSince metadata is written to a separate file, there would no longer be a\n  need to seek back to the beginning of any data file to finish a header, \n  solving issue LUCENE-532.\n\tSpecial-case parsing code needed for extracting metadata supplied by\n  different index formats can be pared down.  If a value is no longer \n  necessary, it can just be ignored/discarded.\n\tRemoving headers from the data files simplifies them and makes the file\n  format easier to implement. \n\tWith headers removed, all or nearly all data structures can take the\n  form of records stacked end to end, so that once a decoder has been\n  selected, an iterator can read the file from top to tail.  To an extent,\n  this allows us to separate our data-processing algorithms from our\n  serialization algorithms, decoupling Lucene's code base from its file\n  format.  For instance, instead of further subclassing TermDocs to deal with\n  \"flexible indexing\" formats, we might replace it with a PostingList which\n  returns a subclass of Posting.  The deserialization code would be wholly\n  contained within the Posting subclass rather than spread out over several\n  subclasses of TermDocs.\n\tYAML and XML are equally well suited for the task of storing metadata,\n  but in either case a complete parser would not be needed \u2013 a small subset \n  of the language will do.  KinoSearch 0.20's custom-coded YAML parser \n  occupies about 600 lines of C \u2013 not too bad, considering how miserable C's \n  string handling capabilities are.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2008-05-22T06:58:05+0000",
            "content": "I don't think I will be able anytime soon to work on this.\n\nI still think this is a good idea, maybe someone else would like to take it? ",
            "author": "Michael Busch",
            "id": "comment-12598926"
        },
        {
            "date": "2011-01-27T11:00:38+0000",
            "content": "I assign this to Lucene 4.0, as we may support this with flexible indexing when we enable custom segments files. ",
            "author": "Uwe Schindler",
            "id": "comment-12987495"
        },
        {
            "date": "2012-03-20T16:12:09+0000",
            "content": "Actually I think SimpleText's SegmentInfosFormat does this well? ",
            "author": "Michael McCandless",
            "id": "comment-13233519"
        }
    ]
}