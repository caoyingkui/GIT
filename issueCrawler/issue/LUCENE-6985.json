{
    "id": "LUCENE-6985",
    "title": "Create some (simple) guides on how to use git to perform common dev tasks",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Resolved",
        "type": "Task"
    },
    "description": "Some simple guides that demonstrate basic git principles and routine tasks (below). The guides are here:\n\nhttps://github.com/dweiss/lucene-git-guides\n\nCore concepts\n\n1. how to clone and setup lucene/solr git repo for local work.\n2. basic git concepts: branches, remote branches, references, staging area.\n\nSimple tasks:\n\n1. Checkout branch X, create local branch Y, modify something, create a diff for Jira.\n2. Apply simple patches on (remote-tracking) branch X, without creating any intermediate branches. This also explains how to resolve conflicts, how to rebase, how to merge and what a fast-forward is.\n\nMore advanced:\n\n1. Create a feature branch off branch X, develop the feature, then apply it back to X (as a single patch or a history of intermediate commits).\n2. Create a feature branch off branch X, develop the feature, then apply it as a series of commits to X and Y (different branch).\n3. Locate a historical SVN revision or tag/branch",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15108490",
            "author": "Uwe Schindler",
            "date": "2016-01-20T13:05:26+0000",
            "content": "Thanks!\n\nP.S.: As said before: SVN was so easy to use - merging for me was milliseconds\u2122, the list of points above already looks complicated!  "
        },
        {
            "id": "comment-15108492",
            "author": "Shai Erera",
            "date": "2016-01-20T13:08:11+0000",
            "content": "Uwe Schindler I can assure you that rebasing in GIT is not more complicated than merging in SVN. The list of steps above are one of the advantages of GIT - how to work on multiple issues in parallel, without have multiple checkouts. "
        },
        {
            "id": "comment-15108520",
            "author": "Uwe Schindler",
            "date": "2016-01-20T13:20:42+0000",
            "content": "The list of steps above are one of the advantages of GIT - how to work on multiple issues in parallel, without have multiple checkouts.\n\nOh not always!!! I tried to use a single GIT repo many times, but because of the way my brain works and my daily workflow dictates (I often do several things in parallel), I switched to multiple parallel ones every time. For my personal work it is much easier to have separate checkout than all the time switching with crazy command lines (or mouseclicks) just to quickly lookup a file from another branch. The backside is of multiple repos: You have to push/pull all the time to get those repos in sync. So is there any possibility to have a single GIT repo but have more than one view on them in separate FS directories and once I commit to any of them I don't need to push/pull? And sorry, disk space is not an issue today, so I want to have 5 Lucene checkouts in parallel  "
        },
        {
            "id": "comment-15108532",
            "author": "Dawid Weiss",
            "date": "2016-01-20T13:28:03+0000",
            "content": "Yes, there are ways to do it, but it's not a sane environment to work in. I'd rather script the pull from all your checkouts, Uwe, but this will quickly shoot you in the foot as \"pull\" is actually fetching remote commits and merging them onto the local branch you're on (and if you have conflicting changes, it'll bail out).\n\nBesides, I don't understand \u2013 you need to svn up with SVN too, what's the difference? "
        },
        {
            "id": "comment-15108533",
            "author": "Uwe Schindler",
            "date": "2016-01-20T13:29:12+0000",
            "content": "One reason why a single repo with a single working folder is not working: If you switch to another branch quickly with \"git checkout\", it changes all files under version control (also rolls back their modification time). If you then don't do \"ant clean\" globally, you get crazy compile failures or tests not working. So it is much easier to have separate working folders because they keep their state like partly compiled source files.. "
        },
        {
            "id": "comment-15108564",
            "author": "Uwe Schindler",
            "date": "2016-01-20T13:45:34+0000",
            "content": "Another reason: I have tests on trunk running a final time before pushing/committing to Apache while preparing the merge and commit of 5.x. Doing this in parallel only works with different checkouts (you know running precommit/tests takes some time).\n\nI agree: with the current setup, you could pull the repo 2 times. When I committed at SVN time I do always 2 steps: commit + push. If I do svn up, i do a git pull now. So I can manage to get the same workflow like with svn, just more stuff to do. I was just hoping to have an easier way to have a single repo with multiple checkouts. "
        },
        {
            "id": "comment-15108573",
            "author": "Dawid Weiss",
            "date": "2016-01-20T13:56:30+0000",
            "content": "I think you're ranting, Uwe. \n\nI agree: with the current setup, you could pull the repo 2 times.\n\nYou can also copy-over your .git file locally after you've cloned it once, then git reset --hard to restore your HEAD commit's state.\n\nSo I can manage to get the same workflow like with svn,\n\nI don't think you should try to \"simulate\" SVN. Play around and find a workflow that suits you with git. Every pair of new shoes seems less comfortable than the comfy old ones (at first)... "
        },
        {
            "id": "comment-15108594",
            "author": "Uwe Schindler",
            "date": "2016-01-20T14:10:24+0000",
            "content": "OK, without ranting: How to have separate working copies in parallel to do stuff in parallel (real parallel like multithreaded)?\n...should be on the agena of this issue. "
        },
        {
            "id": "comment-15108626",
            "author": "Dawid Weiss",
            "date": "2016-01-20T14:31:27+0000",
            "content": "The answer is the same as with SVN, Uwe \u2013 you need separate repositories (either cloned from remote or copied locally). The problem, like you said, is not really with git, but also with higher-level tools \u2013 ant, junit, etc. If you wish for these processes to run in the background you need a separate working copy for each branch you work on. And you will need to sync up before you do any push. You don't need to sync up for local commits. "
        },
        {
            "id": "comment-15108641",
            "author": "Uwe Schindler",
            "date": "2016-01-20T14:49:36+0000",
            "content": "There is also: http://stackoverflow.com/questions/6270193/multiple-working-directories-with-git\nLooks interesting, especially as its now in Git's main codebase (since July 15). "
        },
        {
            "id": "comment-15108653",
            "author": "Dawid Weiss",
            "date": "2016-01-20T14:57:03+0000",
            "content": "See? You're hooked already...  "
        },
        {
            "id": "comment-15108673",
            "author": "Yonik Seeley",
            "date": "2016-01-20T15:06:37+0000",
            "content": "Nice! "
        },
        {
            "id": "comment-15108953",
            "author": "Mark Miller",
            "date": "2016-01-20T17:11:24+0000",
            "content": "you need separate repositories (either cloned from remote or copied locally). \n\nThis has been what I was doing - I have a couple checkouts (I have 9 SVN checkouts), cloned the first and then just copied, hard reset. Not super satisfying but works fine.\n\nThere is also: http://stackoverflow.com/questions/6270193/multiple-working-directories-with-git\n\nThis looks awesome and may be my new approach  Initial testing seems to work out well. Might be hit or miss with GUI's though. I had to update to SmartGit 7.1 preview to get worktree support. "
        },
        {
            "id": "comment-15113426",
            "author": "Steve Rowe",
            "date": "2016-01-23T01:05:19+0000",
            "content": "Some docs for writeable git repos at the ASF here: https://git-wip-us.apache.org "
        },
        {
            "id": "comment-15114007",
            "author": "Paul Elschot",
            "date": "2016-01-23T22:50:06+0000",
            "content": "I have some long running branches against trunk that I needed to move onto master.\nThese branches regularly get trunk merged into them, so rebasing will not work.\n\nThis command sequence takes a local branch brn from trunk to master.\nExcept for the merge and the cherry-pick, these steps can be easily done in gitk, normally with a right click:\n\ngit checkout brn\ngit merge trunk # produce a merge commit, possibly resolve any conflicts.\n\ngit tag brn.20160123 # tag the merge commit\ngit branch -D brn # delete the branch\n\ngit checkout master\ngit branch brn # recreate the branch starting on master\ngit checkout brn \ngit cherry-pick brn.20160123 -m 2 # add a commit with the diff to trunk as merged above\n "
        }
    ]
}