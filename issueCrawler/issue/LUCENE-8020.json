{
    "id": "LUCENE-8020",
    "title": "Don't force sim to score bogus terms (e.g. docfreq=0)",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Bug",
        "components": [],
        "fix_versions": [
            "master (8.0)"
        ]
    },
    "description": "Today all sim formulas have to be \"hacked\" to deal with the fact that they may be passed stats such as docFreq=0, totalTermFreq=0. This happens easily with spans and there is even a dedicated test for it. All formulas have hacks such as what you see in https://issues.apache.org/jira/browse/LUCENE-6818:\n\nInstead of:\n\nexpected = stats.getTotalTermFreq() * docLen / stats.getNumberOfFieldTokens();\n\n\nthey must do tricks such as:\n\nexpected = (1 + stats.getTotalTermFreq()) * docLen / (1 + stats.getNumberOfFieldTokens());\n\n\n\nThere is no good reason for this, it is just sloppiness in the Query/Weight/Scorer api. I think formulas should work unmodified, we shouldn't pass terms that dont exist or bogus statistics.\n\nIt adds a lot of complexity to the scoring api and makes it difficult to have meaningful/useful explanations, to debug problems, etc. It also makes it really hard to add a new sim.",
    "attachments": {
        "LUCENE-8020.patch": "https://issues.apache.org/jira/secure/attachment/12894588/LUCENE-8020.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16223682",
            "date": "2017-10-28T17:59:59+0000",
            "content": "I noticed this when trying to debug AfterEffectB in LUCENE-8015.\n\nThe formula should be:  (F + 1) / (n * (tfn + 1)) but we currently use (F + 1 + 1) / ((n + 1) * (tfn + 1)) and I couldn't remember why we had this mess everywhere. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16223690",
            "date": "2017-10-28T18:17:16+0000",
            "content": "Here is a patch. core tests pass. I didn't yet revert all the similarity formula hacks as that will take more time. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16223704",
            "date": "2017-10-28T19:02:02+0000",
            "content": "Updated patch with javadocs improvements for Term/CollectionStatistics. solr distributed idf code needed small tweaks but they were easy because it already assumed this method might return null. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16223722",
            "date": "2017-10-28T19:52:25+0000",
            "content": "I reviewed callers of termStatistics and found also TermAutomatonQuery in sandbox (scores like phrase query but has the same current issue as SpanOrQuery if some don't exist), fixed it the same way, and added unit tests. I think its ready. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16226045",
            "date": "2017-10-31T00:32:30+0000",
            "content": "Commit e0bde579815ae5ce2525bb659d04e908812f1605 in lucene-solr's branch refs/heads/master from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e0bde57 ]\n\nLUCENE-8020: don't force sim to score bogus terms (e.g. docfreq=0) ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16226053",
            "date": "2017-10-31T00:39:33+0000",
            "content": "I spun off LUCENE-8023 and LUCENE-8024 to simplify sim impls. ",
            "author": "Robert Muir"
        }
    ]
}