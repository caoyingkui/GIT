{
    "id": "LUCENE-3537",
    "title": "Add note about Java 7u1 and 6u29 to Lucene/Solr sites",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/website"
        ],
        "type": "Task",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Oracle confirmed, that the bugs leading to index corruption and SIGSEGV are fixed in Java 7u1 and 6u29. We should post a message to the news sections revising the previous WARNING (LUCENE-3349). I prepared something, please comment before i commit:\n\n\n<section><title>26 October 2011 - Java 7u1 fixes index corruption and crash bugs in Apache Lucene Core and Apache Solr</title>\n<p>Oracle released <a href=\"http://www.oracle.com/technetwork/java/javase/7u1-relnotes-507962.html\">Java 7u1</a> on October 19.\nAccording to the release notes and tests done by the Lucene committers, all bugs reported on July 28 are fixed in this release,\nso code using Porter stemmer no longer crashes with <code>SIGSEGV</code>. We were not able to experience any index corruption anymore,\nso it is safe to use Java 7u1 with Lucene Core and Solr.</p>\n<p>On the same day, Oracle released <a href=\"http://www.oracle.com/technetwork/java/javase/6u29-relnotes-507960.html\">Java 6u29</a>\nfixing the same problems occurring with Java 6, if the JVM switches <code>-XX:+AggressiveOpts</code>\nor <code>-XX:+OptimizeStringConcat</code> were used. Of course, you should <strong>not</strong> use experimental JVM options like\n<code>-XX:+AggressiveOpts</code> in production environments! We recommend everybody to upgrade to this latest version 6u29.</p>\n<p>In case you upgrade to Java 7, remember that you may have to reindex, as the unicode\nversion shipped with Java 7 changed and tokenization behaves differently\n(e.g. lowercasing). For more information, read <code>JRE_VERSION_MIGRATION.txt</code>\nin your distribution package!</p>\n</section>\n\n\n\nI plan to commit this later this afternoon.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-10-26T13:17:05+0000",
            "content": "Looks good Uwe! ",
            "author": "Robert Muir",
            "id": "comment-13135931"
        },
        {
            "date": "2011-10-26T14:42:24+0000",
            "content": "Committed to root, Lucene-Core and Solr website. Just waiting for publishing process to be finished. ",
            "author": "Uwe Schindler",
            "id": "comment-13136023"
        },
        {
            "date": "2011-10-28T06:24:34+0000",
            "content": "I have one question about JDK7 and JDK6u, is it the same issues case by the parameter: -XX:+OptimizeStringConcat ?\n\nThe root cause is loop issue, or string concat compile issue? More any informations?\n ",
            "author": "Raintung Li",
            "id": "comment-13138102"
        },
        {
            "date": "2011-10-28T08:07:15+0000",
            "content": "There are several bugs, a complete report is here:\n\n\tMain article\n\tExplanation of the string concat issues, this explains why StringConcat optimizations trigger this\n\tDiscussion about the update release\n\n\n\nIn general: Use a recent JVM and don't use experimental tuning options. Otherwise you risk data loss.\n\nThe Porter Stemmer SIGSEGV bug simply crashes the JVM and is caused by the String optimization. The Data Corruption issues are triggered by loop optimizations and cannot be prevented in Java 7 without u1 or significant performance loss (I emphasize: significant). In Java 6 with AggressiveOpts enabled, the index corruption can also occur but more seldom (it is not easy to reproduce). ",
            "author": "Uwe Schindler",
            "id": "comment-13138160"
        }
    ]
}