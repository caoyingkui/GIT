{
    "id": "SOLR-9333",
    "title": "Add list and tup Streaming Expressions",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Duplicate",
        "priority": "Major"
    },
    "description": "Currently in streaming expression, if we wanna provide a list of named/unamed parameters. We wrap the values inside a StreamExpressionValue and manually separate value based on ',' character. \n\nIn order to make the streaming expression more compact and extendable, I propose new kind of parameter to streaming expression. \n\nMap Expression Parameter : { key1 = value1, key2 = value2, .... }\n\n\n\nSo new tuple stream can be \n\narrays({term=a, score=1.0}, {term=b, score=2.0})\nor\nsearch(collection1, q=*:*, fl=\"id,a_s,a_i,a_f\", sort=\"a_f asc, a_i asc\", aliases={a_i=alias.a_i, a_s=name})",
    "attachments": {
        "SOLR-9333.patch": "https://issues.apache.org/jira/secure/attachment/12863657/SOLR-9333.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-07-23T14:23:01+0000",
            "author": "Joel Bernstein",
            "content": "This is a really interesting ticket because it gives Streaming Expressions data structures. As Cao Manh Dat describes, I think it makes sense to have a list and a map as the first two structures. I think both should be implemented as TupleStreams so that they are interchangeable with other Streams. In this case it might make sense to use the same syntax as other streams. For example\n\nmap(a=\"1\", b=\"2\", c=\"3\")\n\nlist(map(), map(), search()) \n\n\n\nThe map is basically a single Tuple. A list contains a list of streams.\n\nCalling read() on a map would return a single Tuple.\n\nCalling read() on a list is a little more complicated. Here is one possible approach to this:\n\nCalling read() on a list would take the first stream in the list and call read() on it. Each call to read on the list will continue to read from the first stream in the list.  When the first stream in the list returns EOF the next call to read() on the list will call read() on the second stream() in the list. The list will keep track of the stream index and add an index property to each tuple.\n\nThe list can also support nested lists:\n\n\nlist(map(), map(), list(map(), map()))\n\n\n\nThe list will keep track of the current depth in the StreamContext and add the depth parameter to each tuple as well. \n\nSo the list would add two properties to each tuple which track the index in the list and the nesting depth.\n\n\n\n\n\n\n\n\n\n ",
            "id": "comment-15390705"
        },
        {
            "date": "2017-04-17T01:46:15+0000",
            "author": "Joel Bernstein",
            "content": "I've been giving this ticket more thought lately and I have a design that I think works well. The design is to add two new data structure expressions called list and tup. These are based on on Lisp's list and con structures.\n\nThe tup expression returns a single tuple based on a list of key/value pairs.\n\ntup(\"key1\", \"value1\", \"key2\", \"value2\")\n\n\nThe list expression is a list of Streaming Expressions in the following syntax:\n\nlist(expr, expr, expr)\n\n\n\nThe list expression will iterate each expression in the list in order.\n\n\n ",
            "id": "comment-15970583"
        },
        {
            "date": "2017-04-17T16:06:28+0000",
            "author": "Joel Bernstein",
            "content": "Patch that adds first implementation of the ListStream ",
            "id": "comment-15971272"
        },
        {
            "date": "2017-04-17T16:42:27+0000",
            "author": "Joel Bernstein",
            "content": "Add the initial TupStream implementation ",
            "id": "comment-15971319"
        },
        {
            "date": "2017-04-17T18:16:16+0000",
            "author": "Joel Bernstein",
            "content": "Added initial tests for the TupStream ",
            "id": "comment-15971435"
        },
        {
            "date": "2017-04-21T19:27:35+0000",
            "author": "Joel Bernstein",
            "content": "Based on the work on SOLR-10551, I think this ticket can be closed. We can consider the tup expression in another ticket. ",
            "id": "comment-15979253"
        }
    ]
}