{
    "id": "SOLR-1353",
    "title": "implement reusable token streams for all Solr tokenizers / token filters",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The new lucene token architecture causes bad indexing performance if you don't happen to use reusable token streams.",
    "attachments": {
        "SOLR-1353.patch": "https://issues.apache.org/jira/secure/attachment/12416715/SOLR-1353.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-12741134",
            "date": "2009-08-09T20:02:38+0000",
            "content": "Yonik, at least in the case of analyzer class=xxx, I think many lucene contrib analyzers do not even implement reusableTokenStream... (so they are creating a new copy each time)! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12743855",
            "date": "2009-08-16T17:14:43+0000",
            "content": "Patch implementing reusable analyzers.\nSimple filters have been converted to use the new API.\nComplex filters such as synonym and WFD have not been converted. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12743857",
            "date": "2009-08-16T17:44:02+0000",
            "content": "Committed. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12743858",
            "date": "2009-08-16T17:46:34+0000",
            "content": "seems to almost double throughput... how does this compare to pre-reflection etc... is it actually any faster? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12743859",
            "date": "2009-08-16T17:55:21+0000",
            "content": "Yes, on my simple short field test, I got about a 90% increase in performance vs the pre-reflection (but still attribute based) code.\nI don't know how it compares to the code pre-attributes. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12743860",
            "date": "2009-08-16T18:01:09+0000",
            "content": "FYI, with all these changes, but with reuse turned off, I was seeing 10% slower performance than the pre-reflection code.  Some of that performance impact could have been due to more mixing of old and new style APIs, or proper clearing of attributes, etc. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775483",
            "date": "2009-11-10T15:50:36+0000",
            "content": "Bulk close Solr 1.4 issues "
        }
    ]
}