{
    "id": "SOLR-6062",
    "title": "Phrase queries are created for each field supplied through edismax's pf, pf2 and pf3 parameters (rather them being combined in a single dismax query)",
    "details": {
        "affect_versions": "4.0",
        "status": "Resolved",
        "fix_versions": [
            "4.10"
        ],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "SOLR-2058 subtly changed how phrase queries, created through the pf, pf2 and pf3 parameters, are merged into the main user query.\n\nFor the query: 'term1 term2' with pf2:[field1, field2, field3] we now get (omitting the non phrase query section for clarity):\n\n\n<main query>\nDisjunctionMaxQuery((field1:\"term1 term2\"^1.0)~0.1)\nDisjunctionMaxQuery((field2:\"term1 term2\"^1.0)~0.1)\nDisjunctionMaxQuery((field3:\"term1 term2\"^1.0)~0.1)\n\n\n\nPrior to this change, we had:\n\n\n<main query> \nDisjunctionMaxQuery((field1:\"term1 term2\"^1.0 | field2:\"term1 term2\"^1.0 | field3:\"term1 term2\"^1.0)~0.1)\n\n\n\nThe upshot being that if the phrase query \"term1 term2\" appears in multiple fields, it will get a significant boost over the previous implementation.",
    "attachments": {
        "combined-phrased-dismax.patch": "https://issues.apache.org/jira/secure/attachment/12644564/combined-phrased-dismax.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael Dodsworth",
            "id": "comment-13996085",
            "date": "2014-05-13T05:44:09+0000",
            "content": "As was mentioned on this issue, the behavioral change was not desirable. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13996098",
            "date": "2014-05-13T06:01:29+0000",
            "content": "Rather than sending each FieldParam through addShingledPhraseQueries individually (which results in a dismax query per field), we're now grouping the phrase fields by their wordGram count and sending each group through addShingledPhraseQueries.\n\nOne slight complication is that the original/linked issue allowed the same field to be passed through a pf parameter with differing slop values. The intent being that those scores would be combined, rather than the max being used across those fields. In order to continue support for that feature, we're also grouping FieldParams by their associated slop values (passing each group through independently).\n\nI've added a test for the multi-field case. If people are happy with the approach, I can combine the wordGram and slop value grouping into a single pass.\n "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13996547",
            "date": "2014-05-13T16:15:29+0000",
            "content": "Naomi Dushay Ron Mayer "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-13999275",
            "date": "2014-05-15T21:28:54+0000",
            "content": "all comments and feedback welcome. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-14010368",
            "date": "2014-05-27T22:00:17+0000",
            "content": "adding James Dyer Jan H\u00f8ydahl, as you were involved in https://issues.apache.org/jira/browse/SOLR-2058 "
        },
        {
            "author": "Ron Mayer",
            "id": "comment-14012039",
            "date": "2014-05-29T04:04:15+0000",
            "content": "Regarding \"the original/linked issue allowed the same field to be passed through a pf parameter with differing slop values. The intent being that those scores would be combined, rather than the max being used across those fields\".    The observation that lead to using the same field with different slop values was that if: either many of the words in searched clauses were in the same paragraph ( a pretty large slop value); or many pairs of words from search clauses were in the same adjectives/noun clauses of the text (quite small small slop value; to make a search for 'old hairy cat' rank well against 'hairy old cat' ) a document was likely to be interesting.\n\nIf I understand right, it sounds to me like what Michael described continue to be good for those cases.    I'm traveling this week, but have some test cases comparing ranking of solr-2058 vs human-sorted documents that I can run when I'm back thursday of next week.\n "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-14012659",
            "date": "2014-05-29T18:23:06+0000",
            "content": "Thanks for looking at this, Ron Mayer,\n\nHere's an example (post fix) that shows both the grouping within a particular pf? query (where the supplied fields have the same slop) and the splitting out/layering of queries when different slops are used for the same field(s). Hold on to your hats...\n\n\n{\"q\", \"aaaa bbbb cccc\",\n \"qf\", \"phrase_sw phrase1_sw\",\n \"pf\", \"phrase_sw~1^10 phrase_sw~2^20 phrase_sw^30\",\n \"pf2\", \"phrase_sw~2^22 phrase_sw^33 phrase1_sw~2^44 phrase1_sw~4^55\",\n \"pf3\", \"phrase_sw~2^222 phrase_sw^333 phrase1_sw~2^444 phrase1_sw~4^555\"}\n\n# pf -- phrase_sw with 3 different slop values results in 3 independent dismax queries\nDisjunctionMaxQuery((phrase_sw:\"aaaa bbbb cccc\"~1^10.0)) \nDisjunctionMaxQuery((phrase_sw:\"aaaa bbbb cccc\"~2^20.0)) \nDisjunctionMaxQuery((phrase_sw:\"aaaa bbbb cccc\"^30.0)) \n\n# pf2 -- phrase_sw and phrase1_sw were both supplied with a slop of 2, so those queries are grouped\n(\n  DisjunctionMaxQuery((phrase_sw:\"aaaa bbbb\"~2^22.0 | phrase1_sw:\"aaaa bbbb\"~2^44.0)) \n  DisjunctionMaxQuery((phrase_sw:\"bbbb cccc\"~2^22.0 | phrase1_sw:\"bbbb cccc\"~2^44.0))\n) \n\n(\n  DisjunctionMaxQuery((phrase_sw:\"aaaa bbbb\"^33.0)) \n  DisjunctionMaxQuery((phrase_sw:\"bbbb cccc\"^33.0))\n)\n\n(\n  DisjunctionMaxQuery((phrase1_sw:\"aaaa bbbb\"~4^55.0)) \n  DisjunctionMaxQuery((phrase1_sw:\"bbbb cccc\"~4^55.0))\n)\n\n# pf3\nDisjunctionMaxQuery((phrase_sw:\"aaaa bbbb cccc\"~2^222.0 | phrase1_sw:\"aaaa bbbb cccc\"~2^444.0)) \nDisjunctionMaxQuery((phrase_sw:\"aaaa bbbb cccc\"^333.0)) \nDisjunctionMaxQuery((phrase1_sw:\"aaaa bbbb cccc\"~4^555.0)))\n\n\n "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-14034070",
            "date": "2014-06-17T17:27:41+0000",
            "content": "Ron Mayer does that output look correct to you? "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-14086543",
            "date": "2014-08-05T17:53:32+0000",
            "content": "Any feedback, Ron Mayer "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-14094812",
            "date": "2014-08-12T22:35:27+0000",
            "content": "James Dyer, any feedback? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14094874",
            "date": "2014-08-12T23:20:54+0000",
            "content": "Michael Dodsworth looks reasonable to me, but I think best if we get some others deep into this stuff to weigh in.  One typo, looks like, in the patch is \"WORK_GRAM_EXTRACTOR\", should be WORD. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-14094907",
            "date": "2014-08-12T23:53:22+0000",
            "content": "Thanks for looking at this, Erik Hatcher. Any suggestions on folks to pull in? "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14094926",
            "date": "2014-08-13T00:02:34+0000",
            "content": "Any suggestions on folks to pull in?\n\nI guess maybe easier to ask if there are any objections or cons to making this change by anyone?   Seems like there's a bit of agreement that SOLR-2058 made things worse and this is better.  Any negatives? "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-14094935",
            "date": "2014-08-13T00:21:03+0000",
            "content": "not that I know of \u2013 the wanted behavior of SOLR-2058 is supported (by supplying different slop values for the same field) as well as the original behavior. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14095437",
            "date": "2014-08-13T12:56:27+0000",
            "content": "Commit 1617719 from Erik Hatcher in branch 'dev/trunk'\n[ https://svn.apache.org/r1617719 ]\n\nSOLR-6062: Fix undesirable edismax query parser effect (introduced in SOLR-2058) in how phrase queries "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14095440",
            "date": "2014-08-13T12:59:30+0000",
            "content": "Commit 1617721 from Erik Hatcher in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1617721 ]\n\nSOLR-6062: Fix undesirable edismax query parser effect (introduced in SOLR-2058) in how phrase queries generated from pf, pf2, and pf3 are merged into the main query. (merged from trunk r1617719) "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14095448",
            "date": "2014-08-13T13:07:36+0000",
            "content": "oops, my commit message on trunk (r1617719) got truncated. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14095449",
            "date": "2014-08-13T13:08:56+0000",
            "content": "Michael Dodsworth - I'm with you on this, and decided to take your work as-is (with s/WORK/WORD) and commit it to both trunk and 4x.  Thanks for your effort and patience! "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-14095691",
            "date": "2014-08-13T16:49:06+0000",
            "content": "Fantastic. Thank you, Erik Hatcher. "
        }
    ]
}