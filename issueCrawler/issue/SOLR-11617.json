{
    "id": "SOLR-11617",
    "title": "Expose Alias Properties CRUD in REST API",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "SolrCloud"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "7.3"
        ],
        "affect_versions": "master (8.0)",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Note: Aliases metadata is now \"properties\". \u00a0\u00a0See the\u00a0Ref Guide for final documentation for V1\u00a0ALIASPROP\u00a0or V2 introspect on set-alias-property\n\n\n\nSOLR-11487 is adding Java API for metadata on aliases, this task is to expose that functionality to end-users via a REST API.\n\nSome proposed commands, for initial discussion:\n\n\tSETALIASMETA - upsert, or delete if blank/null/white-space provided.\n\tGETALIASMETA - read existing alias metadata\n\n\n\nGiven that the parent ticket to this task is going to rely on the alias metadata, and I suspect a user would potentially completely break their time partitioned data configuration by editing system metadata directly, we should either document these commands as \"use at your own risk, great power/responsibility etc\" or consider protecting some subset of metadata.",
    "attachments": {
        "SOLR_11617.patch": "https://issues.apache.org/jira/secure/attachment/12899326/SOLR_11617.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-09T14:22:54+0000",
            "content": "Perhaps we don't need entirely separate commands.  When we retrieve aliases today to list them, we can return the metadata in a new separate section (easy back-compat).  When creating an alias, we can specify the metadata with a prefix, e.g. \"metadata.route.field\" would set the \"route.field\" metadata.  This is consistent with such settings on collection creation.  \n\nOne new command \"MODIFYALIAS\" could be used to set alias metadata on an existing alias.  This \"MODIFY\" prefix is consistent with \"MODIFYCOLLECTION\" in naming convention.  In the future, perhaps we might abuse MODIFYALIAS slightly to not just be about setting metadata, but to effectively issue commands to time partitioning, like to tell it to create a new collection, rolling new indexing traffic to it.\n\nBTW during implementation keep in mind the V2 stuff, including introspect. ",
            "author": "David Smiley",
            "id": "comment-16245727"
        },
        {
            "date": "2017-11-27T01:03:29+0000",
            "content": "Patch implementing MODIFYALIAS and returning a \"metadata\" section along side the existing \"aliases\" section. One minor quirk is that if you remove all alias metadata from an alias it still shows up with an empty metadata section like this: \n\n\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":6},\n  \"aliases\":{\n    \"name\":\"test1,test2\",\n    \"name1\":\"test1,test2\"},\n  \"metadata\":{\n    \"name\":{},\n    \"name1\":{\"foo\":\"bar2\"}}}\n\n\n\nI'm not sure if that's really such a bad thing though. The metadata section for the alias is of course still removed if the alias is removed.\n\nV2 stuff not yet contemplated... ",
            "author": "Gus Heck",
            "id": "comment-16266281"
        },
        {
            "date": "2017-11-27T01:13:56+0000",
            "content": "Also docs yet to created for this... ",
            "author": "Gus Heck",
            "id": "comment-16266284"
        },
        {
            "date": "2017-11-27T06:02:30+0000",
            "content": "After looking at the ref guide documentation, and trying to write some for MODIFYALIAS, it occurs to me that the MODIFYALIAS name is somewhat confusing... As documented in the ref guide one can \"modify\" an alias by changing what it points to by issuing a second create command that just overwrites the previous collection list for the alias. However \"MODIFYALIAS\" won't provide any functionality actually modifying the alias itself... and only relates to metadata?\n\nMaybe ALIASMETADATA would be a better, less confusing name? ",
            "author": "Gus Heck",
            "id": "comment-16266406"
        },
        {
            "date": "2017-11-27T06:03:02+0000",
            "content": "patch with docs and v2 api support ",
            "author": "Gus Heck",
            "id": "comment-16266407"
        },
        {
            "date": "2017-12-05T16:56:25+0000",
            "content": "Nice work Gus.\n\nI can see your point about the name of MODIFYALIAS name being a bit dubious but I suppose it's a matter of perspective.  If you view the alias & metadata as entirely separate then I think your recommendation for a different name is right.  I think the user can think of this like collection configuration, which is basically metadata in a sense.  I still like the name MODIFYALIAS.  Maybe MODIFYALIAS should allow specifying what it points to as well as being usable for metadata?  Granted I don't love having two ways to do one thing that are arbitrary but it at least enhances the sensibility of the MODIFYALIAS name/purpose.\n\nWhy the \"or whitespace\" qualification in the implementation and thus docs around the metadata value?  Do other V2 API commands work this way?  If so then keep it but otherwise I think whitespace shouldn't be special.\n\nIt seems this API can only handle setting one name-value at a time.  I think it should be a bunch, perhaps using the sub-properties mechanism in the v2 doc, which I think translates to say meta.mykey1=myvalue1&meta.mykey2=myvalue2  assuming we have a \"meta\" prefix.\n\nminor: When returning the metadata, I think the outgoing map should be a LinkedHashMap so that the alias names are in the same order as earlier (whatever that may be). ",
            "author": "David Smiley",
            "id": "comment-16278853"
        },
        {
            "date": "2018-01-17T23:19:51+0000",
            "content": "\n\tI don't really want to create two ways to\u00a0modify aliases\u00a0(and 2 places to maintain the functionality) I'll leave MODIFYALIAS as is unless additional opinions surface.\n\tI don't think we accept whitespace for collection names etc and I think that it's not very friendly to make whitespace significant in general. I'm generally thinking that metadata keys should be trimmed. It would be a very strange use case to want to be able to set values for keys like ' foo', 'foo ' and ' foo '..\u00a0 and much more common for such a thing to result in\u00a0confusing\u00a0debugging sessions. for values, it feel a bit trappy to set a value of ' ' instead of deleting if the person issuing the command accidentally appends a space... However, I suppose there's some possibility that someone might want to keep a metadata property that contained a delimiter and have that delimiter be whitespace... for values its a trade off i guess. I could go either way.\n\tmulti-properties, yeah that would be good.\u00a0\n\tLinked Hash Map \n\n ",
            "author": "Gus Heck",
            "id": "comment-16329672"
        },
        {
            "date": "2018-01-24T04:04:09+0000",
            "content": "GitHub user fsparv opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/310\n\n    SOLR-11617\n\n    Changes as mentioned in Jira comment, plus rather than decide I provided an option for the user to enable whitespace values. By default this is off and whitespace values are treated as null, but if the user really wants to set a value to 3 spaces they can by passing allowWhitespaceValues=true. I'm fairly set against pure whitespace keys unless someone can supply up with a good reason for that.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/nsoft/lucene-solr SOLR-11617\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/310.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #310\n\n\ncommit 959401b9ac6bac5e4d696a750c3e5eb42b7da9f5\nAuthor: gus <gus@...>\nDate:   2018-01-23T19:28:11Z\n\n    SOLR 11617 - patch 2\n\ncommit 218890d7b8c01bddabd1de2a6bbe2f1735ac238c\nAuthor: Gus Heck <gus@...>\nDate:   2018-01-23T20:43:54Z\n\n    Merge branch 'master' into SOLR-11617\n\ncommit 4b4c656a107eba82ec1bfe11e8f5b14b1ea751bf\nAuthor: Gus Heck <gus@...>\nDate:   2018-01-24T03:44:46Z\n\n    adjust for package changes in master\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16336864"
        },
        {
            "date": "2018-01-25T02:50:36+0000",
            "content": "Github user dsmiley commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/310\n\n    Nice docs.  Lets not provide an option to configure whitespace/trim handling \u2013 configuration-itis.  IMO we should be consistent with other parts of Solr on what to do (e.g. props on core creation) but you seem to feel strongly about it so whatever.  It's not that I don't disagree with your point of view, it's only that I think consistency is a higher virtue.\n\n    Can you add a test please?  It could be a simple modification to an existing test. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16338646"
        },
        {
            "date": "2018-01-28T08:12:41+0000",
            "content": "Pull request updated, thought that was supposed to result in a message here, but it doesn't seem to. I removed the parameter for whitespace optionality but also removed the requirement. As I said above I'm not able to convince myself that there isn't a use case for a value that is whitespace so If there isn't going to be an option, then we probably should allow it. Tests & a CollectionAdminRequest method/class were added. ",
            "author": "Gus Heck",
            "id": "comment-16342496"
        },
        {
            "date": "2018-01-28T21:56:29+0000",
            "content": "Commit 154bdeb7db1794c4019ceb1c27b47ff6159a08e8 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=154bdeb ]\n\nSOLR-11617: Alias metadata API; returned from LISTALIASES, set via MODIFYALIAS ",
            "author": "ASF subversion and git services",
            "id": "comment-16342744"
        },
        {
            "date": "2018-01-28T21:58:10+0000",
            "content": "Commit e3fc0631960cdd9b6bf05a939045480f0ab4b18e in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e3fc063 ]\n\nSOLR-11617: Alias metadata API; returned from LISTALIASES, set via MODIFYALIAS\n\n(cherry picked from commit 154bdeb) ",
            "author": "ASF subversion and git services",
            "id": "comment-16342745"
        },
        {
            "date": "2018-01-28T22:01:20+0000",
            "content": "Great; thanks Gus! ",
            "author": "David Smiley",
            "id": "comment-16342746"
        },
        {
            "date": "2018-01-29T03:49:33+0000",
            "content": "Commit 00d453d27c36b9c52928b5ccd1946a2e2aee5c75 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=00d453d ]\n\nSOLR-11617: Fix test: delete aliases without async in tearDown ",
            "author": "ASF subversion and git services",
            "id": "comment-16342859"
        },
        {
            "date": "2018-01-29T03:52:23+0000",
            "content": "Commit 16e80e6a33e3e6029437c804a3a6b5944a51aafa in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=16e80e6 ]\n\nSOLR-11617: Fix test: delete aliases without async in tearDown\n\n(cherry picked from commit 00d453d) ",
            "author": "ASF subversion and git services",
            "id": "comment-16342866"
        },
        {
            "date": "2018-02-06T04:45:56+0000",
            "content": "Commit 812d400807bcebc782f85dcf3bba5619421880cb in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=812d400 ]\n\nSOLR-11722 SOLR-11617: Alias tests: Ensure zkStateReader's view is up to date before acting ",
            "author": "ASF subversion and git services",
            "id": "comment-16353344"
        },
        {
            "date": "2018-02-06T04:47:02+0000",
            "content": "Commit 3251679abd3f4cb8325423ab0d96ff71bcb198e2 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3251679 ]\n\nSOLR-11722 SOLR-11617: Alias tests: Ensure zkStateReader's view is up to date before acting\n\n(cherry picked from commit 812d400) ",
            "author": "ASF subversion and git services",
            "id": "comment-16353346"
        },
        {
            "date": "2018-03-08T16:38:34+0000",
            "content": "Now that there is a \"collection property\" API Tom\u00e1s Fern\u00e1ndez L\u00f6bbe, I was thinking we should quickly mark the \"alias metadata api\" as experimental for 7.3 so that we are more free to change it, to harmonize it with the \"collection property\" one.  Perhaps we need only harmonize the names a bit \"alias properties\", not \"alias metadata\", keeping everything the same.  Or maybe go further.  I very much welcome your input. ",
            "author": "David Smiley",
            "id": "comment-16391492"
        },
        {
            "date": "2018-03-08T17:23:44+0000",
            "content": "I think that's a great idea. We should try to unify the API regardless of the implementation. We now have CLUSTERPROP, COLLECTIONPROP, we could make this API be ALIASPROP, and maybe we could also modify the API of \"replica properties\", from ADD/DELETEREPLICAPROP to REPLICAPROP, and work in the same way others work (\u00a0null value unsets the property).\n\nAlso:\nIt seems this API can only handle setting one name-value at a time.I think it should be a bunch\n+1 (looks like this is already supported for alias metadata). We should add something similar to the other \"PROPS\" if they don't have that already.\nWhen creating an alias, we can specify the metadata with a prefix, e.g. \"metadata.route.field\" would set the \"route.field\" metadata\n+1, we should have that for COLLECTIONPROP. We already have that for Replica props I think ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16391564"
        },
        {
            "date": "2018-03-08T20:15:29+0000",
            "content": "Naming consistency is good, but we still have N api's that do\u00a0something similar just with slightly different targets. I think further unification is possible by allowing arbitrary targets with a consistent naming convention for targets (8.x type thing though, definitely not this issue) ",
            "author": "Gus Heck",
            "id": "comment-16391868"
        },
        {
            "date": "2018-03-08T20:35:44+0000",
            "content": "True. In the V2 API you can set cluster properties with a \"set-property\" on /cluster. Maybe we should rename the collection properties form set-collection-property to set-property too (in the /collections/{collection} path). Unfortunately replica properties are also set in the same target. Not sure if there is a /collections/{collection/replicas/\n{replica}\n path to use. Also, then there would be a set-property /cluster/aliases/{alias}? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16391884"
        },
        {
            "date": "2018-03-08T21:52:27+0000",
            "content": "Another thing to think about is that this exists\n\nPOST /api/c\n{ \"create\": {\n    \"name\": \"foo\",\n    // etc etc...\n    \"properties\":{\n      // arbitrary properties here\n    }\n  }\n}\n\nwhich I believe translate to \"core\" properties... I'm suddenly realizing that the distinction between that and collection properties in\u00a0SOLR-11960 is confusing, especially with this notation in the v2 api.\n\n\u00a0 ",
            "author": "Gus Heck",
            "id": "comment-16391961"
        },
        {
            "date": "2018-03-08T22:55:08+0000",
            "content": "Further unifications sounds good, again for 8.x.  For now lets try to have consistent names in the API.  \n\n\t(v1) \"MODIFYALIAS\" -> \"ALIASPROP\".\n\t(v2) \"modify-alias\" -> \"set-alias-property\".  \"metadata\" -> \"properties\" json object.   Note that the collection property mechanism is defined on collections.collection.Commands.json whereas modify-alias is defined on collections.Commands.json \u2013 pretty confusing.\n\t(SolrJ) CollectionAdminRequest.modifyAlias -> setAliasProperty.  Harmonize methods a bit more to that of setCollectionProperty.\n\trename \"metadata.*\" prefix parameters to \"property.*\" v1 and in v2 \"properties\" parent object\n\tedit pertinent documentation to refer to \"property\" or \"properties\" instead of \"metadata\".  A parenthetical mention that properties are metadata is helpful, but we shall call them properties.\n\n\n\nThat's about as much as we can handle right now.\nThe paint is still wet on SOLR-11960, so to speak.  Before it's API gets set in stone (by a 7.3 release), perhaps now is the last moment to give the API more of a bulk parameter feel (like here for aliases) instead of limited to one at a time?  Even if the code can only handle one pair right now, at least the API would be what we want it to be.\n\nBTW the solr config API itself has \"properties\" too   \"set-property\" and \"unset-property\" v2.\n\nAlan Woodward (7.3 RM) it's pretty important we do a little something here for 7.3.  Bare minimum is we put \"experimental\" warnings both here (for alias metadata/properties) and SOLR-11960 (collection properties), or perhaps we can do a bit better for our users sake. ",
            "author": "David Smiley",
            "id": "comment-16392059"
        },
        {
            "date": "2018-03-08T22:57:45+0000",
            "content": "which I believe translate to \"core\" properties\n\nYeah I was gonna mention that it's pretty confusing that Solr's create collection API doesn't make that important clarification about what sort of properties these are.  It really ought to! ",
            "author": "David Smiley",
            "id": "comment-16392067"
        },
        {
            "date": "2018-03-08T23:08:20+0000",
            "content": "It does say so in the description, but if you don't read the\u00a0_introspect carefully you'll quite easily get confused I think.\n\n\"properties\": {\n  \"type\": \"object\",\n  \"documentation\": \"https://lucene.apache.org/solr/guide/defining-core-properties.html\",\n  \"description\": \"Allows adding core.properties for the collection. Some examples of core properties you may want to modify include the config set, the node name, the data directory, among others.\",\n  \"additionalProperties\": true\n},\n\n\u00a0 ",
            "author": "Gus Heck",
            "id": "comment-16392083"
        },
        {
            "date": "2018-03-10T16:04:41+0000",
            "content": "Reopening for renames (metadata -> property   etc.) ",
            "author": "David Smiley",
            "id": "comment-16394240"
        },
        {
            "date": "2018-03-10T23:13:17+0000",
            "content": "BTW Gus added a new PR for the renames (it's auto-linked thanks to JIRA-GitHub integration).  Next time please comment here so Watchers get notified. ",
            "author": "David Smiley",
            "id": "comment-16394358"
        },
        {
            "date": "2018-03-12T05:57:23+0000",
            "content": "Added another commit addressing comments ",
            "author": "Gus Heck",
            "id": "comment-16394833"
        },
        {
            "date": "2018-03-12T13:10:06+0000",
            "content": "Looks good except for a minor omission I can fix now.  CHANGES.txt ought to be updated, and the collections-api.adoc have a couple examples of v1 that you changed to \"properties.*\" that should have been \"property.*\" (it's V1 not V2).  I'm running precommit and tests.  It should be committed relatively soon.  Thanks for doing the renames Gus! ",
            "author": "David Smiley",
            "id": "comment-16395215"
        },
        {
            "date": "2018-03-12T14:36:46+0000",
            "content": "Commit bf6503ba5871228692ca79f0b2204a935538e00a in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bf6503b ]\n\nSOLR-11617: rename alias metadata to properties ",
            "author": "ASF subversion and git services",
            "id": "comment-16395317"
        },
        {
            "date": "2018-03-12T14:37:35+0000",
            "content": "Commit 9957e0eed2f93cc69abc132ec631a57decd22b77 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9957e0e ]\n\nSOLR-11617: rename alias metadata to properties\n\n(cherry picked from commit bf6503b) ",
            "author": "ASF subversion and git services",
            "id": "comment-16395318"
        },
        {
            "date": "2018-03-12T14:40:12+0000",
            "content": "Commit 4a0d96974b4d5ee1e68036c6b3782e4f3f2136b8 in lucene-solr's branch refs/heads/branch_7_3 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4a0d969 ]\n\nSOLR-11617: rename alias metadata to properties\n\n(cherry picked from commit 9957e0e) ",
            "author": "ASF subversion and git services",
            "id": "comment-16395324"
        }
    ]
}