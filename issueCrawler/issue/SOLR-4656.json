{
    "id": "SOLR-4656",
    "title": "Add hl.maxMultiValuedToExamine to limit the number of multiValued entries examined while highlighting",
    "details": {
        "affect_versions": "4.3,                                            6.0",
        "status": "Closed",
        "fix_versions": [
            "4.3",
            "6.0"
        ],
        "components": [
            "highlighter"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I'm looking at an admittedly pathological case of many, many entries in a multiValued field, and trying to implement a way to limit the number examined, analogous to maxAnalyzedChars, see the patch.\n\nAlong the way, I noticed that we do what looks like unnecessary copying of the fields to be examined. We call Document.getFields, which copies all of the fields and values to the returned array. Then we copy all of those to another array, converting them to Strings. Then we actually examine them. a> this doesn't seem very efficient and b> reduces the benefit from limiting the number of mv values examined.\n\nSo the attached does two things:\n1> attempts to fix this\n2> implements hl.maxMultiValuedToExamine\n\nI'd really love it if someone who knows the highlighting code takes a peek at the fix to see if I've messed things up, the changes are actually pretty minimal.",
    "attachments": {
        "SOLR-4656-4x.patch": "https://issues.apache.org/jira/secure/attachment/12576264/SOLR-4656-4x.patch",
        "SOLR-4656.patch": "https://issues.apache.org/jira/secure/attachment/12576231/SOLR-4656.patch",
        "SOLR-4656-trunk.patch": "https://issues.apache.org/jira/secure/attachment/12576263/SOLR-4656-trunk.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13618077",
            "date": "2013-03-30T14:00:41+0000",
            "content": "Trunk patch for comment. Haven't run through the unit tests yet.\n\nIs there a better way to get all the StorableFields in a document for a particular field than testing for the fieldName? I.e. \n if (! thisField.name().equals(fieldName))\nseems inefficient.\n\nPatch will apply to trunk only, StorableField will need to be changed to IndexableField for 4x.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13618212",
            "date": "2013-03-31T02:17:38+0000",
            "content": "Patches with tests. All tests pass. If there are no objections, I'll commit these in a couple of days. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13618213",
            "date": "2013-03-31T02:20:48+0000",
            "content": "P.S. I actually added two parameters, \nmaxMultiValuedToExamine which governs the number of multiValued fields to examine before bailing and\nmaxMultiValuedToMatch which governs the number of matches to find before bailing.\n\nBTW, the first patch sucks. It counts matches rather than values..... "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13618367",
            "date": "2013-03-31T15:58:57+0000",
            "content": "I plan on committing this Tuesday or so unless there are objections....\n\nhl.maxMultiValuedToMatch   - stops looking in the values in a multiValued field after N matches are found. Default is Integer.MAX_VALUE\n\nhl.maxMultiValuedToExamine - stops looking in the values in a multiValued field after N values are examined, regardless of how many have been found (no matches is perfectly reasonable). Defaults to Integer.MAX_VALUE\n\nIf both are specified, the first condition met stops the comparisons.\n\nThe patch also restructures traversing the fields in the document so we aren't copying things around so much, I'd particularly like someone to glance at that code. All tests pass, but a second set of eyes would be welcome.\n\nAlso along the way I found this parameter that I'd never seen before: hl.preserveMulti and added it to the highlight parameter page (http://wiki.apache.org/solr/HighlightingParameters) with the explanation from a comment in the code, some clarification there might be a good thing.\n\nFortunately, the changes are actually relatively minor, most of the bulk of the patch is additional tests. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13618373",
            "date": "2013-03-31T16:07:49+0000",
            "content": "When I was reconciling the patch for 4x I decremented the mvToMatch outside the for loop. Harmless since I wasn't looking at it any more, but unnecessary. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13619802",
            "date": "2013-04-02T13:45:23+0000",
            "content": "Committed trunk: r - 1463543 "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13620004",
            "date": "2013-04-02T17:07:01+0000",
            "content": "4x: r - 1463627 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654197",
            "date": "2013-05-10T10:34:21+0000",
            "content": "Closed after release. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14194869",
            "date": "2014-11-03T18:40:47+0000",
            "content": "I saw the results of the modifications here during my work on SOLR-6680.  It's not clear to me there needed to be new parameters.  Shouldn't the field value lengths be accumulated, approaching maxAnalyzedChars and then exit at that point?  And furthermore, shouldn't this field value loop exit early once it sees fragTexts.size() >= numFragments (i.e. hl.snippets is reached) ? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14194962",
            "date": "2014-11-03T19:33:11+0000",
            "content": "David:\n\nbq:  Shouldn't the field value lengths be accumulated,\nI see where you're going, and I have I admit I didn't originate this code so all things are possible.\nIt's a little different sense than maxAnayzedChars in that the unit of measurement is the number of MV entries rather than the number of characters analyzed, but I could argue either way.\n\nbq:  shouldn't this field value loop exit early once ...\nI have no objection.\n\nAlthough it sees kind of late to take away this parameter, should we deprecate it insteas?\n\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-14195001",
            "date": "2014-11-03T19:59:54+0000",
            "content": "It's a little different sense than maxAnayzedChars in that the unit of measurement is the number of MV entries rather than the number of characters analyzed, but I could argue either way.\n\nSure... but was there per-value overhead involved that was a bit heavy for the particular client you did this for (i.e. massive number of values) or was it just a matter of not accumulating value lengths?\n\nAlthough it sees kind of late to take away this parameter, should we deprecate it instead?\n\nIf there are a large number of values, I guess it has some value.\n\nIn my last comment to SOLR-6680 I stated I think multi-value handling should be done a bit differently in which each value should be virtually concatenated/iterated via a CharSequence wrapper and handed to the highlighter.  Likewise the TokenStreams of each value could be wrapped into a concatenating wrapper.  If that were done, then I think these parameters would be completely obsolete as it would handle the case of massive number of values.\n\nI'll create a separate issue to accumulate maxAnalyzedChars per value and exit early. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14394644",
            "date": "2015-04-03T16:19:52+0000",
            "content": "While working on SOLR-6692 I noticed this again, and I'm wondering two things:\n\n\tIs the semantics of maxMultiValuedToMatch intentional with respect to that it counts snippets (i.e. fragments), as opposed to values?  It's unfortunate the parameter name doesn't make this clear, which is suggestive that it counts values (maxMultiValuedToExamine counts values).  There's a difference when hl.snippets isn't 1.\n\tI don't believe mvToMatch should be decremented when bestTextFragment.getScore() is <= 0 since there actually was no match.  This can happen often when hl.preserveMulti=true.  I think this is a bug.\n\n\n\nI can fix but I'd like your thoughts, Erick Erickson. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14395034",
            "date": "2015-04-03T20:24:53+0000",
            "content": "David Smiley You're right on both counts. The intent of maxMultiValuedToMatch is, indeed, it should stop after matching N fragments, so the name is unfortunate. It should trip if it was set to, say, 3 and a single MV entry had 3 snippets. Maybe maxSnippetsToMatch? Deprecate and usenew terms IMO, but up to you.\n\nRight, if there is no snippet it shouldn't be decremented.\n\nGood catch!\n\nErick "
        },
        {
            "author": "David Smiley",
            "id": "comment-14490154",
            "date": "2015-04-10T19:09:29+0000",
            "content": "Maybe maxSnippetsToMatch? Deprecate and usenew terms IMO, but up to you.\n\nNaming is hard, and this parameter especially. I don't think it's worth trying to change a parameter's name after release.  I may enhance the ref guide to make it more clear what this does.\n\nRight, if there is no snippet it shouldn't be decremented.\n\nOk; I'll fix this in SOLR-6692 with a test. "
        }
    ]
}