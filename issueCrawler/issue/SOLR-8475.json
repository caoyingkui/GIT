{
    "id": "SOLR-8475",
    "title": "Some refactoring to SolrIndexSearcher",
    "details": {
        "components": [
            "search"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "While reviewing SolrIndexSearcher, I started to correct a thing here and there, and eventually it led to these changes:\n\n\n\tMoving QueryCommand and QueryResult to their own classes.\n\tMoving FilterImpl into a private static class (was package-private and defined in the same .java file, but separate class).\n\tSome code formatting, imports organizing and minor log changes.\n\tRemoved fieldNames (handled the TODO in the code)\n\tGot rid of usage of deprecated classes such as LegacyNumericUtils and Legacy-*-Field.\n\n\n\nI wish we'd cut down the size of this file much more (it's 2500 lines now), but I've decided to stop here so that the patch is manageable. I would like to explore further refactorings afterwards, e.g. extracting cache management code to an outer class (but keep SolrIndexSearcher's API the same, if possible).\n\nIf you have additional ideas of more cleanups / simplifications, I'd be glad to do them.",
    "attachments": {
        "SOLR-8475.patch": "https://issues.apache.org/jira/secure/attachment/12779962/SOLR-8475.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-30T11:55:12+0000",
            "author": "Shai Erera",
            "content": "Patch with the mentioned changes. ",
            "id": "comment-15074971"
        },
        {
            "date": "2015-12-30T13:55:41+0000",
            "author": "Anshum Gupta",
            "content": "Good stuff! \n\nI'm +1 on the idea Shai but I need more time to look at the patch and also suggest more stuff that belongs to this JIRA without bloating up the scope by a lot. ",
            "id": "comment-15075042"
        },
        {
            "date": "2015-12-31T14:42:39+0000",
            "author": "Shai Erera",
            "content": "New patch with a fix uncovered by one of the tests. Anshum Gupta I think that we can commit this patch and continue iterating on further improvements within this issue, but in additional patches? ",
            "id": "comment-15075979"
        },
        {
            "date": "2016-01-02T05:21:43+0000",
            "author": "Anshum Gupta",
            "content": "Shai Erera seems like you forgot to svn add the extracted classes. ",
            "id": "comment-15076438"
        },
        {
            "date": "2016-01-02T06:19:53+0000",
            "author": "Anshum Gupta",
            "content": "Patch with a few changes :\n\n\tExtracted QueryResult and QueryCommand\n\tRemoved a few redundant declarations, null checks, and explicit type arguments that could be inferred from SolrIndexSearcher\n\tcacheDocSet never uses mustCache flag, removing it as the javadocs right now misguide.\n\tmade a few objects final\n\n ",
            "id": "comment-15076440"
        },
        {
            "date": "2016-01-02T16:30:46+0000",
            "author": "Yonik Seeley",
            "content": "Why was \"log\" changed to \"LOG\"?  That seems inconsistent with all other instances in the code base.\n\nNew patch with a fix uncovered by one of the tests.\n\nDo you mean you found an existing bug?  Or that your first refactor patch caused a bug?\n\nI assume this patch should be for trunk only?\n\nI notice a lot of changes like this:\n\n-\n+    \n\n\nIt looks like empty lines are being replaced with spaces.  That's not intentional is it?\n\nSome of these changes I don't necessarily find more readable.  This for instance:\n\n-    qc.setQuery(query)\n-      .setFilterList(filter)\n-      .setSort(lsort)\n-      .setOffset(offset)\n-      .setLen(len)\n-      .setNeedDocSet(true);\n+    qc.setQuery(query).setFilterList(filter).setSort(lsort).setOffset(offset).setLen(len).setNeedDocSet(true);\n\n ",
            "id": "comment-15076574"
        },
        {
            "date": "2016-01-02T17:55:22+0000",
            "author": "Shai Erera",
            "content": "Why was \"log\" changed to \"LOG\"?\n\nI think that static fields should be uppercase. I've done the same in SOLR-8454. Is it a problem?\n\nOr that your first refactor patch caused a bug?\n\nThe refactoring had a bug, and I fixed it in the second patch.\n\nI assume this patch should be for trunk only?\n\nNo, I intend to commit it to 5x too, as I've noted in the \"Fix Versions\". Why would it be trunk only?\n\nI notice a lot of changes like this:\n\nHmm .. I'm not sure why. I always run \"ant eclipse\" as that applies our formatting rules too, but for some reason, when I hit ENTER inside a file, new lines are automatically indented. I looked inside dev-tooles/eclipse/dot.settings/org.eclipse.jdt.core/prefs: org.eclipse.jdt.core.formatter.indent_empty_lines=true \u2013 this could explain it? I changed it to false and now it doesn't do that anymore.\n\nI agree about the re-wrapped lines. I found it annoying too. But again, I thought this is just the standard of our formatting rules. E.g. if I change org.eclipse.jdt.core.formatter.join_wrapped_lines to false, it doesn't do that.\n\nI changed both of these and will include them in a new patch, which also reverts the .set() wrapping and leading whitespace in new lines. ",
            "id": "comment-15076606"
        },
        {
            "date": "2016-01-02T17:56:44+0000",
            "author": "Shai Erera",
            "content": "Thanks Yonik Seeley for the review. I addressed your comments in this patch. Anshum Gupta, I forgot to \"svn add\" the new files in the first patches, but I applied your patch and hopefully this patch includes all of your other changes too. ",
            "id": "comment-15076607"
        },
        {
            "date": "2016-01-02T19:19:04+0000",
            "author": "Yonik Seeley",
            "content": "I think that static fields should be uppercase. \n\nThat's not our convention (or even common in my experience)... it's usually only constants (i.e. static final strings/ints/empty_maps) that get uppercase treatment.\nchanging \"log\" to \"LOG\" everywhere (or all statics to uppercase) definitely deserves to get it's own JIRA issue and consensus if we want to change that.\n\nNo, I intend to commit it to 5x too, as I've noted in the \"Fix Versions\". Why would it be trunk only?\n\nBack compat breaks... things like QueryCommand are higher-level and more likely to be used by custom code / plugins.\n\nI agree about the re-wrapped lines. I found it annoying too. But again, I thought this is just the standard of our formatting rules.\n\nI don't think we ever had / agreed to coding standards to that level of detail.  Some things just fall into the realm of personal preference.  Once something is committed I just tend to leave the formatting alone unless I'm actively editing that part of the code, or if it's really bad. ",
            "id": "comment-15076636"
        },
        {
            "date": "2016-01-02T19:52:33+0000",
            "author": "Shai Erera",
            "content": "Once something is committed I just tend to leave the formatting alone unless I'm actively editing that part of the code, or if it's really bad.\n\nI usually follow that pattern too, however in this case I also re-formatted SolrIndexSearcher code (thought it'd be nice). But also, if we don't change our standard settings, then with the current settings, whenever I'll hit ENTER in a class, it will indent the empty line. Or, if I write new code and want to use that builder-pattern, it will rewrap lines. So, I think we should change those two settings that I included in the patch. I doubt that people really want to see indented empty lines, or forcing re-wrapping of wrapped lines.\n\nit's usually only constants (i.e. static final strings/ints/empty_maps)\n\nLOG is a static final field and I try to follow that convention with any static-final field. Also, we already sometimes use \"log\" and other times \"logger\" and even with the casing we're not consistent (LineRandomizedMapper, TreeMergeMapper, SafeConcurrentUpdateSolrClient to name a few).\n\nBack compat breaks\n\nTrue, but it's a really simple one to address (\"Organize Imports\" in any modern IDE). I can add a note in CHANGES? Really, the class is huge and even though extracting those two classes does not greatly reduce its size, it's a change in the right direction. And it's really a simple break to address. What do you think? ",
            "id": "comment-15076648"
        },
        {
            "date": "2016-01-02T20:48:38+0000",
            "author": "Yonik Seeley",
            "content": "LOG is a static final field and I try to follow that convention with any static-final field.\n\nIMO, it's more about if the object is a constant, not if the reference is final, and loggers aren't effectively immutable.\nhttp://stackoverflow.com/questions/1417190/should-a-static-final-logger-be-declared-in-upper-case \n\nCurrent frequency in the code base suggests that lowercase is our current default.\n\n/opt/code/lusolr$ find . -name \\*.java | xargs grep \"Logger LOG\"  | wc\n      78     624   14141\n/opt/code/lusolr$ find . -name \\*.java | xargs grep \"Logger log\"  | wc\n     421    3315   71490\n\n\n\nIf we want to refactor and change all of one to the other, it seems like there should be another JIRA issue and consensus around the issue.\n\n\n> Back compat breaks\nTrue, but it's a really simple one to address\nIf it requires recompilation, it's not back compat though. ",
            "id": "comment-15076659"
        },
        {
            "date": "2016-01-02T21:25:41+0000",
            "author": "Mark Miller",
            "content": "Over the years I've certainly come to prefer log over LOG in our code base, even if some some rule(s) actually did say otherwise. I've just stuck to using what is already in each file, but if anything changed I'd vote for LOG -> log. ",
            "id": "comment-15076675"
        },
        {
            "date": "2016-01-03T06:23:36+0000",
            "author": "Shai Erera",
            "content": "Thanks Yonik Seeley and Mark Miller. Following your feedback I renamed LOG back to log.\n\nAs for the QueryCommand \"back compat\", is it going to be a deal breaker for you Yonik Seeley? It seems really trivial back-compat and we've certainly broke stuff in the past which had much bigger impact. If you feel so strong about it though, I can make this change trunk-only. ",
            "id": "comment-15076766"
        },
        {
            "date": "2016-01-04T05:45:51+0000",
            "author": "Anshum Gupta",
            "content": "I had a bit of concern regarding the log -> LOG conversion but as it's more of an opinion than a standard at this point, I guess it makes sense to leave it at log as someone else might just change it back to log again due to differing opinions \n\nAbout the back-compat, I think that's a small enough change and it makes sense to do that in 5x too. I wish we could provide stronger guarantees. ",
            "id": "comment-15080722"
        },
        {
            "date": "2016-01-04T07:01:26+0000",
            "author": "Shai Erera",
            "content": "Thanks Anshum Gupta. So Yonik Seeley, with the latest patch, do you have any more concerns? If not, I'll commit it. ",
            "id": "comment-15080763"
        },
        {
            "date": "2016-01-04T15:33:17+0000",
            "author": "Yonik Seeley",
            "content": "About the back-compat, I think that's a small enough change and it makes sense to do that in 5x too.\n\nI'm not sure I understand the standard being applied here.  The size of a change, or how easy it will be to convert plugin code doesn't seem that relevant when discussing back compat. QueryCommand/QueryResponse are top level classes likely to be used by plugins.  We have always had a back compat policy of remaining back compat for \"major\" Java interfaces across minor versions.\n\nIf we wish to discontinue, change, or clarify that policy, there should probably be a discussion on the mailing lists to come to consensus (it will get lost in this issue). ",
            "id": "comment-15081278"
        },
        {
            "date": "2016-01-04T19:39:09+0000",
            "author": "Shawn Heisey",
            "content": "If it's possible to leave deprecated inner classes extending the extracted classes, then existing user code should work just fine.  I haven't attempted to do this, but I think that should work.\n\nThe discussion really becomes moot if we expect to create branch_6x in the near future (perhaps after 5.5 is released).  If that's the case, then we should concentrate all major efforts on 6.0 and not make big changes like this to 5.x. ",
            "id": "comment-15081655"
        },
        {
            "date": "2016-01-05T12:26:46+0000",
            "author": "Christine Poerschke",
            "content": "If it's possible to leave deprecated inner classes extending the extracted classes, then existing user code should work just fine. I haven't attempted to do this, but I think that should work.\n\nI am in the process of attempting this for QueryCommand only (since my unrelated SOLR-8482 change also concerns that class), hoping to post patch(es) later today. ",
            "id": "comment-15082968"
        },
        {
            "date": "2016-01-05T15:05:41+0000",
            "author": "Christine Poerschke",
            "content": "If it's possible to leave deprecated inner classes extending the extracted classes, then existing user code should work just fine. I haven't attempted to do this, but I think that should work.\n\nSOLR-8490 (created as a sub-task of this ticket) is my attempt at this for QueryCommand only. Having the deprecated inner class extend the extracted class of the same name was a little tricky but having an interim helper class seems to work though perhaps there is another more proper alternative to that also.\n\n+++ b/solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java\n...\n-  public static class QueryCommand {\n+  @Deprecated\n+  public static class QueryCommand extends QueryCommandAdapter {\n\n+++ b/solr/core/src/java/org/apache/solr/search/QueryCommandAdapter.java\n...\n+@Deprecated\n+public class QueryCommandAdapter extends QueryCommand {\n\n+++ b/solr/core/src/java/org/apache/solr/search/QueryCommand.java\n...\n+public class QueryCommand {\n\n ",
            "id": "comment-15083191"
        },
        {
            "date": "2016-01-05T16:51:55+0000",
            "author": "Shai Erera",
            "content": "It looks fine, though I really think it's an over-kill . Let's see if we get to a consensus on that issue on the dev list, and if not, I'll try your approach. ",
            "id": "comment-15083345"
        },
        {
            "date": "2016-01-06T15:02:26+0000",
            "author": "Anshum Gupta",
            "content": "Christine Poerschke I strongly thing we should avoid creating the deprecated constructors/classes and just change the underlying code.\nThe discussion on the developer list was started just to get a consensus on that and I think we have a consensus on not having to maintain strong back-compat guarantees for Java APIs.\n\nAll of this would come back to bite us if we start doing this for everything.\n\nLet's just refactor the code without adding extra classes for back-compat and make sure that we don't change any REST/SolrJ APIs. ",
            "id": "comment-15085623"
        },
        {
            "date": "2016-01-06T15:18:27+0000",
            "author": "Christine Poerschke",
            "content": "Sorry for the confusion. Added note to SOLR-8490 and will close/withdraw it. ",
            "id": "comment-15085649"
        },
        {
            "date": "2016-01-06T15:28:16+0000",
            "author": "Anshum Gupta",
            "content": "No problem Christine Poerschke. ",
            "id": "comment-15085678"
        },
        {
            "date": "2016-01-06T18:32:45+0000",
            "author": "Shai Erera",
            "content": "Updated patch with recent changes to SolrIndexSearcher. ",
            "id": "comment-15086012"
        },
        {
            "date": "2016-01-10T07:39:43+0000",
            "author": "Shai Erera",
            "content": "Updated patch to latest SVN commit. Also added a note under the \"5.x upgrade\" section. I will commit it to trunk only. ",
            "id": "comment-15090940"
        },
        {
            "date": "2016-01-10T08:30:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1723910 from Shai Erera in branch 'dev/trunk'\n[ https://svn.apache.org/r1723910 ]\n\nSOLR-8475: Some refactoring to SolrIndexSearcher ",
            "id": "comment-15090950"
        },
        {
            "date": "2016-01-10T08:33:47+0000",
            "author": "Shai Erera",
            "content": "Committed to trunk only, since 6.0 seems very close, no point back porting this issue to 5x. ",
            "id": "comment-15090951"
        }
    ]
}