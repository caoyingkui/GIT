{
    "id": "SOLR-1687",
    "title": "add param for limiting start and rows params",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "conventional wisdom is that it doesn't make sense to paginate with \"huge\" pages, or to drill down \"deep\" into high numbered pages \u2013 features like faceting tend to be a better UI experience, and less intensive on solr.\n\nAt the moment, Sold adminstrators can use \"invariant\" params to hardcode the \"rows\" param to something reasonable, but unless they only want to allow users to look at page one, the can't do much to lock down the \"start\" param expect inforce these rules in the client code\n\nwe should add new params that set an upper bound on both of these, which can then be specified as default/invarient params in solrconfig.xml",
    "attachments": {
        "SOLR-1687.patch": "https://issues.apache.org/jira/secure/attachment/12436153/SOLR-1687.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12794543",
            "date": "2009-12-25T06:46:42+0000",
            "content": "suggest \"start.max\" and \"rows.max\" ... behavior would be to simply error if start > start.max or rows > rows.max. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12835075",
            "date": "2010-02-18T00:38:16+0000",
            "content": "Hmmm... QParser.getSort is where the current sort/start/rows param parsing happens right now, but looking at it makes me realize there's some local params semantics to consider with something like this.\n\nCurrently, QParser.getSort won't consult the global params if any of sort/start/rows are specified as a local param (or if the caller explicitly says useGlobalParams=false, but there doesn't seem to be a code path where that happens)\n\nbut what should happen in these situations...\n\n\n#1) q={!lucene rows.max=9999999999 rows=9999}foo&rows.max=100\n#2) q={!lucene rows.max=100 v=$qq}&qq=foo&rows=9999999&rows.max=99999999999\n\n\n\nsituation #1 could come up if a greedy client attempted to ask for too many rows, and the admin has a configured invariant of rows.max=100 \u2013 in which case we'd want the global rows.max param to superseded the local rows param.  But situation #2 is equally possible where the q param is an invariant set by the admin, and the other params come from a greedy client.\n\nThe best situation i can think of off the top of my head would be to ignore local param values for start.max and rows.max, and look for them as global params even if false==useGlobalParams.  That takes care of situation #1, and makes situation #2 easy to deal with by also adding rows.max=100 as an invariant outside of the local params.\n\nAnyone see any holes in that? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12835078",
            "date": "2010-02-18T00:55:14+0000",
            "content": "patch with the logic i attempted to describe.  it doesn't contain any Unit Tests yet, but it seems to be working.\n\nthe real question is: are there any any holes i haven't plugged in the local/global param handling logic that a greedy client could exploit? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12835288",
            "date": "2010-02-18T16:59:07+0000",
            "content": "There are a lot of params that people may want to restrict control of... and I'm not sure it makes sense to add mins and maxes for all of them.  Traditionally, this type of stuff  is delegated to the front-end clients to restrict.  Would it make more sense to add an optional component to check restrictions?  The restrictions could optionally be in the config for the component and thus wouldn't have to be looked up and parsed for every request. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12836930",
            "date": "2010-02-22T21:54:05+0000",
            "content": "Traditionally, this type of stuff is delegated to the front-end clients to restrict.\n\nTrue, but my suggestion wasn't so much along the lines of \"end users\" entering really big numbers as much as that \"client developers\" might make mistakes, and this would allow a solr admin to lock things down in a sane way.\n\nWould it make more sense to add an optional component to check restrictions? The restrictions could optionally be in the config for the component and thus wouldn't have to be looked up and parsed for every request.\n\nI like this idea, but given the way local versions of start/rows are treated special wouldn't we still need special like what i added in the patch to deal with them?  (a generic component added to the front of the list could check validate a list of global params, but it wouldn't have anyway of knowing for certain what other params later components might parse with a QParser. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15999973",
            "date": "2017-05-07T18:01:43+0000",
            "content": "I have written a generic RequestSanitizerComponent that can solve this in a generic way, see https://github.com/cominvent/request-sanitizer-component. If there is interest, I can prepare it for inclusion. "
        },
        {
            "author": "Christine Poerschke",
            "id": "comment-16002461",
            "date": "2017-05-09T10:38:41+0000",
            "content": "ticket cross-reference: in SOLR-10610 my colleague Domenico Fabio Marino started work on a CanaryComponent and it sounds like there's some similarities between the request sanitizer component just mentioned here and the proposed canary component. "
        }
    ]
}