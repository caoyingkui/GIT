{
    "id": "SOLR-10682",
    "title": "Add variance Stream Evaluator",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The variance Stream Evaluator will calculate the variance of a vector of numbers.\n\n\nv = var(colA)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-13T10:38:30+0000",
            "content": "I'm wondering if we should try to standardize the names of some of these functions across things like streaming, function queries, and json facet aggregations?  I imagine some of the may be more tightly integrated over time, and having var() in one context and variance() in another context isn't great.\n\nThe current facet aggregations we have are named: min, max, sum, sumsq, avg, unique, hll, percentile, variance, stddev ",
            "author": "Yonik Seeley",
            "id": "comment-16009253"
        },
        {
            "date": "2017-05-13T12:30:49+0000",
            "content": "Yeah, we do need to put some thought into the function names when they overlap with facet aggregations. Either they need to be different or we'll need a math path package for Stream Evaluators. For example the variance Stream Evaluator could be called: math.variance.\n\nBut keeping the Stream Evaluator function names short may be more important then making them the same as facet aggregations. So we could make them different. For example: arrayMax instead of max. ",
            "author": "Joel Bernstein",
            "id": "comment-16009311"
        },
        {
            "date": "2017-05-13T12:41:32+0000",
            "content": "I was just thinking of making it consistent everywhere, so someone wouldn't have to memorize when to use var() and when to use variance()\nIf var() is actually more desirable than variance() because of shortness, then shouldn't that be used in both places?\n\nWe only need to avoid overlap when it would create ambiguous semantics (hopefully context resolves most of the ambiguities?) ",
            "author": "Yonik Seeley",
            "id": "comment-16009320"
        },
        {
            "date": "2017-05-13T14:35:02+0000",
            "content": "Overlapping names will be a problem because in Streaming Expressions a name is mapped directly to a function implementation. Currently we have Metrics, which are stream aggregators and Evaluators which are non-streaming functions. They have different interfaces and implementations.\n\nRather then overloading function names, I think it makes sense to have more specific function names.\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-16009357"
        },
        {
            "date": "2017-05-13T16:06:16+0000",
            "content": "Overlapping names will be a problem because in Streaming Expressions a name is mapped directly to a function implementation.\n\nHmmm, we can't overload at all based on context or arguments currently?\nI'm thinking min(field) is nicer than explicitly naming every implementation: min_double(field), min_long(field), min_string(field), etc... ",
            "author": "Yonik Seeley",
            "id": "comment-16009390"
        },
        {
            "date": "2017-05-13T17:56:51+0000",
            "content": "Apache Commons Math just expects double arrays, so at this point Stream Evaluators transforms any incoming data into double arrays.  So we would just need an \"arrayMin\", and \"arrayMax\" function. \n\nThe vast majority of Stream Evaluators won't overlap with facet functions. I'll continue moving forwards with functions that don't overlap until we figure out a plan for overlapping function names.\n\nDennis Gove, any thoughts on this?\n\n\n\n ",
            "author": "Joel Bernstein",
            "id": "comment-16009441"
        },
        {
            "date": "2017-05-13T20:51:37+0000",
            "content": "I think overloading and relying somewhat on context should be fine. An overloaded function in java is contingent on the incoming type of argument, so min(array), min(tupleStream) both make sense within the context of usage.  ",
            "author": "Dennis Gove",
            "id": "comment-16009505"
        },
        {
            "date": "2017-05-25T16:39:32+0000",
            "content": "The problem I see with overloading the function names is the following scenario:\n\n\nselect(timeseries(collection, q=\"*:*\", start=\"...\", end=\"...\", gap=\"...\", var(fieldx)),\n          add(var(fieldx), 1) as outField))\n\n\n\nIn this scenario is var(fieldx) referring to the aggregation result or to the var Stream Evaluator. I don't think there is an easy way to deal with issue. So I think we should separate the Stream Evaluator function names from the aggregation function names to avoid this situation.\n\nDennis Gove, any thoughts on the example? ",
            "author": "Joel Bernstein",
            "id": "comment-16024980"
        }
    ]
}