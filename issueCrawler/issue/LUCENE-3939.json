{
    "id": "LUCENE-3939",
    "title": "ClassCastException thrown in the map(String,int,TermVectorOffsetInfo[],int[]) method in org.apache.lucene.index.SortedTermVectorMapper",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.0.2,                                            3.1,                                            3.4,                                            3.5",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The method \"map\" in the \"SortedTermVectorMapper\" class does not check the parameter \"term\" for the valid values. It throws ClassCastException when called with a invalid string for the parameter \"term\" (i.e., \"var3.map(\"*\", (-1), null, null)\"). The exception thrown is due to an explict cast(i.e., casting the return value of termToTVE.get(term) to type \"TermVectorEntry\"). \n\nSuggested Fixes: Replace the beginning of the method body for the class \"SortedTermVectorMapper\" by changing it like this:\n\npublic void map(String term, int frequency, TermVectorOffsetInfo[] offsets, int[] positions) {\n\tif(termToTVE.get(term) instanceof TermVectorEntry)\n{\n\t  \tTermVectorEntry entry = (TermVectorEntry) termToTVE.get(term);\n \t\t...\n\t}\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-31T10:29:52+0000",
            "content": "I'm confused on how something's that not a TermVectorEntry can get into the termToTVE map... can you post a small test case showing this problem? ",
            "author": "Michael McCandless",
            "id": "comment-13243108"
        },
        {
            "date": "2012-03-31T17:43:43+0000",
            "content": "Thanks for the comment. \n\nBelow is a test case that illustrate the problem: The second invocation to the method \"map\" throws ClassCastException although it is expected to run normally without any exception.\n\n     org.apache.lucene.index.SortedTermVectorMapper var3 = new org.apache.lucene.index.SortedTermVectorMapper(false, false,(java.util.Comparator)null);\n     var3.setExpectations(\"\", 0, false, false);\n     org.apache.lucene.index.TermVectorOffsetInfo[] var11 = new org.apache.lucene.index.TermVectorOffsetInfo[] { };\n     var3.map(\"\", (-1), var11, (int[])null);\n     var3.map(\"*\", (-1), (org.apache.lucene.index.TermVectorOffsetInfo[])null, (int[])null); ",
            "author": "SHIN HWEI TAN",
            "id": "comment-13243243"
        },
        {
            "date": "2012-03-31T21:33:52+0000",
            "content": "OK I see this ClassCastException:\n\n\n    [junit] Testcase: testMisUse(org.apache.lucene.index.TestTermVectorsReader):\tCaused an ERROR\n    [junit] org.apache.lucene.index.TermVectorEntry cannot be cast to java.lang.Comparable\n    [junit] java.lang.ClassCastException: org.apache.lucene.index.TermVectorEntry cannot be cast to java.lang.Comparable\n    [junit] \tat java.util.TreeMap.put(TreeMap.java:542)\n    [junit] \tat java.util.TreeSet.add(TreeSet.java:238)\n    [junit] \tat org.apache.lucene.index.SortedTermVectorMapper.map(SortedTermVectorMapper.java:71)\n    [junit] \tat org.apache.lucene.index.TestTermVectorsReader.testMisUse(TestTermVectorsReader.java:456)\n    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    [junit] \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n    [junit] \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n    [junit] \tat java.lang.reflect.Method.invoke(Method.java:597)\n    [junit] \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n    [junit] \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n    [junit] \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n    [junit] \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n    [junit] \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    [junit] \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase$SubclassSetupTeardownRule$1.evaluate(LuceneTestCase.java:630)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase$InternalSetupTeardownRule$1.evaluate(LuceneTestCase.java:536)\n    [junit] \tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:67)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase$TestResultInterceptorRule$1.evaluate(LuceneTestCase.java:457)\n    [junit] \tat org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:74)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase$SaveThreadAndTestNameRule$1.evaluate(LuceneTestCase.java:508)\n    [junit] \tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\n    [junit] \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n    [junit] \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n    [junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:146)\n    [junit] \tat org.apache.lucene.util.LuceneTestCaseRunner.runChild(LuceneTestCaseRunner.java:50)\n    [junit] \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n    [junit] \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n    [junit] \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n    [junit] \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n    [junit] \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n    [junit] \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n    [junit] \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n    [junit] \tat org.apache.lucene.util.UncaughtExceptionsRule$1.evaluate(UncaughtExceptionsRule.java:74)\n    [junit] \tat org.apache.lucene.util.StoreClassNameRule$1.evaluate(StoreClassNameRule.java:36)\n    [junit] \tat org.apache.lucene.util.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:67)\n    [junit] \tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\n    [junit] \tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n    [junit] \tat junit.framework.JUnit4TestAdapter.run(JUnit4TestAdapter.java:39)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:518)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.launch(JUnitTestRunner.java:1052)\n    [junit] \tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.main(JUnitTestRunner.java:906)\n\n\n\nHowever, I think it's because you're passing null as the Comparator<TermVectorEntry> to SortedTermVectorMapper, forcing the TreeSet to try to cast the TermVectorEntry to Comparable, which then fails.\n\nReally you should not pass a null Comparator... ",
            "author": "Michael McCandless",
            "id": "comment-13243294"
        },
        {
            "date": "2012-03-31T23:39:06+0000",
            "content": "Thanks for the quick response.\n\nI don't think that passing null as Comparator is the problem. For example, if the first invocation of the method \"map\" is commented out(as below), then there is no exception thrown. In this case, the Comparator is still null.\n\n   org.apache.lucene.index.SortedTermVectorMapper var3 = new        org.apache.lucene.index.SortedTermVectorMapper(false, false,(java.util.Comparator)null);\n   var3.setExpectations(\"\", 0, false, false);\n   var3.map(\"*:\", (-1), (org.apache.lucene.index.TermVectorOffsetInfo[])null, (int[])null); ",
            "author": "SHIN HWEI TAN",
            "id": "comment-13243607"
        },
        {
            "date": "2012-04-01T13:43:12+0000",
            "content": "For example, if the first invocation of the method \"map\" is commented out(as below), then there is no exception thrown. In this case, the Comparator is still null.\n\nThis is because of sneakiness/trapiness in TreeSet (and maybe Java's type erasure for generics), I think.\n\nIe, on inserting only one object into it, it does not need to cast that object to Comparator (there's nothing to compare to).  But on adding a 2nd object, it will try to cast. ",
            "author": "Michael McCandless",
            "id": "comment-13243727"
        },
        {
            "date": "2012-04-02T04:00:03+0000",
            "content": "\nIe, on inserting only one object into it, it does not need to cast that object to Comparator (there's nothing to compare to). But on adding a 2nd object, it will try to cast.\nYou are right about this. The ClassCastException is not thrown when there is only one object because there is nothing to compare to. \n\nThe test case below shows that ClassCastException is still thrown even when the Comparator is not null:\n\n\n \npublic void testMisUse(){\n   java.util.Comparator comp = java.util.Collections.reverseOrder();\n   org.apache.lucene.index.SortedTermVectorMapper mapper = new org.apache.lucene.index.SortedTermVectorMapper(false, false, comp);\n   mapper.setExpectations(\"\", 0, false, false);\n   org.apache.lucene.index.TermVectorOffsetInfo[] array1 = new org.apache.lucene.index.TermVectorOffsetInfo[] {};\n   mapper.map(\"\", 0, array1, (int[]) null);\n   mapper.map(\"*\", 1, array1, (int[]) null);\n}\n\n ",
            "author": "SHIN HWEI TAN",
            "id": "comment-13243963"
        },
        {
            "date": "2012-04-02T15:44:51+0000",
            "content": "Hmm, that example has basically the same problem: when you call Collections.reverseOrder() without passing it a Comparator, it will fall back to natural order, ie, try to cast the incoming objects to Comparable... you need to provide your own comparator that directly compares the two TermVectorEntry instances... ",
            "author": "Michael McCandless",
            "id": "comment-13244268"
        },
        {
            "date": "2012-04-02T15:46:14+0000",
            "content": "By the way, in 4.0 we've simplified access to term vectors: they use the same API as postings (so you can visit terms/docs/positions), except covering only one document.  Term vectors are an inverted index for just one document... ",
            "author": "Michael McCandless",
            "id": "comment-13244272"
        }
    ]
}