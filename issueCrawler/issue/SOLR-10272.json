{
    "id": "SOLR-10272",
    "title": "Use a default configset and make the configName parameter optional.",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "This Jira's motivation is to improve the creating a collection experience better for users.\n\nTo create a collection we need to specify a configName that needs to be present in ZK. When a new user is starting Solr why should he worry about having to know about configsets before he can can create a collection.\n\nWhen you create a collection using \"bin/solr create\" the script uploads a configset and references it. This is great. We should extend this idea to API users as well.\n\nSo here is the rough outline of what I think we can do here:\n\n1. When you start solr , the bin script checks to see if \"/configs/_baseConfigSet\" znode is present . If not it uploads the \"basic_configs\". \n\nWe can discuss if its the \"basic_configs\" or something other default config set. \n\nAlso we can discuss the name for \"/_baseConfigSet\". Moving on though\n\n2. When a user creates a collection from the API  admin/collections?action=CREATE&name=gettingstarted here is what we do :\n\n\nUse https://cwiki.apache.org/confluence/display/solr/ConfigSets+API to copy over the default config set to a configset with the name of the collection specified.\n\ncollection.configName can truly be an optional parameter. If its specified we don't need to do this step.\n\n3. Have the bin scripts use this and remove the logic built in there to do the same thing.",
    "attachments": {
        "SOLR-10272.patch.gz": "https://issues.apache.org/jira/secure/attachment/12865229/SOLR-10272.patch.gz",
        "SOLR-10272.patch": "https://issues.apache.org/jira/secure/attachment/12864971/SOLR-10272.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-13T19:16:28+0000",
            "content": "Not quite sure what you mean by <3>. Change which parts of that script?\n> zk upconfig|downconfig?\n> create_collection?\n> example startup?\n\nI really don't want to remove any of those. I often use the example startup to specify a custom configset 'cause it's easy, I don't have to do the separate step of uploading a configset.\n\nThe first two seem to need to be kept for advanced users. ",
            "author": "Erick Erickson",
            "id": "comment-15922779"
        },
        {
            "date": "2017-03-13T19:29:31+0000",
            "content": "Hi Erick,\n\nOkay I should have been more descriptive here. Today the start script works like this when we create a collection\n\n\n\n~/solr-6.4.2$ ./bin/solr create -c test\n\nConnecting to ZooKeeper at localhost:9983 ...\nINFO  - 2017-03-13 12:28:04.069; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider; Cluster at localhost:9983 ready\nUploading /Users/varunthacker/solr-6.4.2/server/solr/configsets/data_driven_schema_configs/conf for config test to ZooKeeper at localhost:9983\n\nCreating new collection 'test' using command:\nhttp://localhost:7574/solr/admin/collections?action=CREATE&name=test&numShards=1&replicationFactor=1&maxShardsPerNode=1&collection.configName=test\n\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":2555},\n  \"success\":{\"192.168.0.4:7574_solr\":{\n      \"responseHeader\":{\n        \"status\":0,\n        \"QTime\":1425},\n      \"core\":\"test_shard1_replica1\"}}}\n\n\n\nGiven that this Jira adds a default configset and uses that if no \"collection.configName\" is present , we can remove this logic from the create command as this will be done automatically\n\n\nConnecting to ZooKeeper at localhost:9983 ...\nINFO  - 2017-03-13 12:28:04.069; org.apache.solr.client.solrj.impl.ZkClientClusterStateProvider; Cluster at localhost:9983 ready\nUploading /Users/varunthacker/solr-6.4.2/server/solr/configsets/data_driven_schema_configs/conf for config test to ZooKeeper at localhost:9983\n\n\n ",
            "author": "Varun Thacker",
            "id": "comment-15922798"
        },
        {
            "date": "2017-03-14T08:30:04+0000",
            "content": "Could the bootstrapping of the default/generic configSet be done by collection API instead of start script? Then also our unit tests will trigger the same code path as a user starting Solr by start script. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15923785"
        },
        {
            "date": "2017-03-14T15:44:34+0000",
            "content": "Jan:\n\nI wouldn't want to lose the capability from the bin/solr script, but if you're thinking of an additional collections API \"BOOTSTRAPCONFIG\" or something I don't see why not. Maybe a separate JIRA? ",
            "author": "Erick Erickson",
            "id": "comment-15924440"
        },
        {
            "date": "2017-03-14T15:58:26+0000",
            "content": "From a user's point of view, the Collections API's CREATE command should be able to create a collection without specifying a configset - in that case, the basicconfigset could be used by default (whether this basicconfigset was pre-loaded when Solr started up, or the Solr process itself uploaded it from its install directory into ZK is an implementation detail).\n\nAlso, the Collection API's CREATE command should optionally accept a configset (zipped), and it should create a collection based on that configset. (Internally, it can use SOLR-6736, but that's an implementation detail.)\n\nAlso, the user could first upload a configset (using SOLR-6736) and then specify the configName while creating a collection.\n\nI wouldn't want to lose the capability from the bin/solr script\nThe functionality of being able to upload a config by using bin/solr would stay. But, the way collection creation happens now, using the bin/solr script, could change (internally) to leverage the Solr endpoints directly (either only the collections API or the configset API and collections API), instead of needing to upload a configset to ZK directly.\n\nan additional collections API \"BOOTSTRAPCONFIG\" or something I don't see why not. Maybe a separate JIRA?\nI think SOLR-6736's configset API's upload functionality can do this. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15924460"
        },
        {
            "date": "2017-03-14T16:05:26+0000",
            "content": "Could the bootstrapping of the default/generic configSet be done by collection API instead of start script? Then also our unit tests will trigger the same code path as a user starting Solr by start script.\n+1, that's one of the motivations behind my previous comment. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15924476"
        },
        {
            "date": "2017-03-14T17:07:33+0000",
            "content": "bq: Also, the Collection API's CREATE command should optionally accept a configset (zipped),\n\nBe careful here. See SOLR-5287, particularly Uwe's comments on 3-Nov-13 and following on that JIRA. Allowing someone to upload arbitrary files  with XML/XSL has security implications. For the functionality you mention, the zipped files could be anything. I can't claim to understand the details, but before putting the work into it we should check this out.\n\nStefan and I had this brilliant idea to allow editing schema and config from the UI that...er...wasn't so brilliant. ",
            "author": "Erick Erickson",
            "id": "comment-15924579"
        },
        {
            "date": "2017-04-18T15:55:36+0000",
            "content": "I'm planning the following:\n1. When Solr starts up, the datadriven configset is uploaded to ZK, called \"_default\".\n2. When Collection API's CREATE command is called without any configset name, it copies over [0] \"_default\" configset to, say, \"collection1\" and creates a collection.\n\n[0] - https://cwiki.apache.org/confluence/display/solr/ConfigSets+API#ConfigSetsAPI-create ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15972956"
        },
        {
            "date": "2017-04-18T16:19:05+0000",
            "content": "Thanks for doing this Ishan Chattopadhyaya; overall your plan looks great.\n\nBut I'm concerned about the choice of the \"data driven\" configset being chosen as the default.  The \"data driven\" feature is really only appropriate for fooling around; we shouldn't elevate it's status as the new default.  I recall a conversation I had with Noble Paul and Varun Thacker in person in February and, I could be mistaken, but I think the 3 of us liked the idea of a default configset that could be used that had the \"add-unknown-fields-to-the-schema\" URP chain configured and available but not registered by default by /update.  For example, perhaps a different /update/createSchema or something like that?  Heck; it could even be an URP chain that deliberately has no RunUpdateProcessorFactory if it's job is purely to create the schema for you.  I think Hoss Man had a similar idea discussed with us all at the last Lucene/Solr Revolution.  I loved the idea! ",
            "author": "David Smiley",
            "id": "comment-15972993"
        },
        {
            "date": "2017-04-18T16:26:15+0000",
            "content": "I agree with you! I just want to be clear that this issue is about the collection API using the default, and not about what the default should be.\n\nIn this issue, I just want to maintain current behaviour as in bin/solr: if you create a collection using the script, without a configset, the configset used is the data driven schema.\n\nHowever, we could discuss and do the cool parts in another issue SOLR-10574 (esp. the \"training mode\" schema generation and other ideas).  ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15973004"
        },
        {
            "date": "2017-04-25T16:04:08+0000",
            "content": "Adding a patch for this. \n\n\n\tIt bootstraps the data_driven_schema_configs as _default upon startup and uses it for creating collections when configset name is not specified.\n\tTODO: Resolve a few minor nocommits (documentation etc.)\n\tThere is no change in behaviour from bin/solr script, but internally it is using the _default when collection name is not specified.\n\tBehaviour so far has been: if collections API's CREATE command is called without a configName, and there is only 1 configset uploaded, it is used for creating the collection. However, with the _default being bootstrapped, this behaviour would be broken, and in such a case the _default would be used. This is a break in backcompat (if we do this in branch_6x), but I think it is okay to do this for the sake of consistency (script vs. collections API). If someone thinks otherwise, I can commit this issue only for master/7.0.\n\tThe tests can use the _default if we add a data_driven_schema_configs folder to solr/core/src/test-files/solr/configsets folder or use the \"solr.default.configdir\" sysprop. I have not changed existing tests to do this, so as to minimize this patch size. It can be done separately.\n\n ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15983115"
        },
        {
            "date": "2017-04-26T22:12:45+0000",
            "content": "Adding another patch (needed to gzip it since data_driven_schema_configs has some international characters that my browser is struggling to upload / server is refusing to accept)\n\n\n\tUnit tests can use the _default.\n\tAll existing tests that were looking for conf1, without even specifying the configset name during collection creation, now explicitly specify conf1.\n\tTODO: test the bin/solr.cmd (my windows box is unable to resolve ivy dependencies, getting stuck at io.dropwizard.metrics*.)\n\tIf a configset exists with the same name as the collection, and no configName is specified during collection creation, then the configset (same name as collection) is overwritten by _default configset. This is another backcompat break.\n\n\n\nDue to the backcompat breaks, I'm planning to commit this only to master/7.0, and skip branch_6x. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15985654"
        },
        {
            "date": "2017-04-27T09:26:39+0000",
            "content": "Updated patch, fixed a bunch of bugs in solr.cmd (and tested it manually on Windows). ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15986262"
        },
        {
            "date": "2017-04-27T12:08:24+0000",
            "content": "I understand that bin/solr might default to use a \"data driven\" config but it's easy enough to be explicit at the CLI and make another choice.  It's very depressing and sad to me to hear that this very JIRA issue is going to make that particular configuration so prominent that it's the only one that will be in Solr by default already there.  If users (you, me, us, everyone) are to use the feature you are working on here \u2013 relying on a config already in Solr \u2013 then what step do we do to turn the data-driven schema aspect of the config off?  Unless I'm doing a demo or POC, I will always be performing this step.  If there is no step (short of outright replacing solrconfig.xml in ZK), then I feel I need to -1 this change. ",
            "author": "David Smiley",
            "id": "comment-15986446"
        },
        {
            "date": "2017-04-27T12:24:47+0000",
            "content": "As far as I understand, we made a conscious choice of making the data_driven_schema_configs as the default when using the script. This issue just delegates the selection of the default configset to the Collections API instead of the script.\n\nMy thought was to first get the default configset to be used by the Collections API, and then (in another issue in SOLR-10574) decide upon which configset is best suited for being the default \u2013 I agree that data_driven_schema_configs is not the best choice. Do you think we should decide upon the best choice for the default configset first, before making whatever is the default be used by the Collections API? SOLR-10574 I can open another JIRA, where we can discuss the possibilities. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-15986480"
        },
        {
            "date": "2017-04-27T13:59:57+0000",
            "content": "The default at the CLI doesn't matter much to me because there are other options at the CLI \u2013 particularly \"basic_configs\".  That isn't the case for this feature \u2013 a baked in SolrCloud default.  So the default choice is way more important here.\n\nDo you think we should decide upon the best choice for the default configset first, before making whatever is the default be used by the Collections API?\n\nUnless the data-driven (auto schema modifications) can be easily disabled, then yes.\n\nIf at this stage (this issue) we simply want to pick an existing config and not make changes to any particular config, then I think the only suitable choice is \"basic_configs\".\n\nThen in SOLR-10574 I think we can discuss modifying this config, perhaps making a data-driven option toggle-able instead of fundamental to the config.  AFAIK that wouldn't involve new code; just some configuration in such a way that users can toggle easily \u2013 perhaps by setting update.chain with the request parameters API: https://cwiki.apache.org/confluence/display/solr/Request+Parameters+API ",
            "author": "David Smiley",
            "id": "comment-15986661"
        },
        {
            "date": "2017-04-27T19:21:49+0000",
            "content": "When Solr starts up, the datadriven configset is uploaded to ZK, called \"_default\".\nAre we sure we want to upload a new _default thingie? Default does not really say anything, just like the old collection1 default was not a great idea. The bin/solr script uploads a config to a user-named config - or if no name given - to a new config with the same name as the collection. Should not the Collection API behaviour be something like that?\n\nThen in SOLR-10574 I think we can discuss modifying this config, perhaps making a data-driven option toggle-able instead of fundamental to the config.\nThat could work. Perhaps write in CHANGES that the default is to be considered experimental for the next few releases... ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15987353"
        },
        {
            "date": "2017-05-24T20:22:02+0000",
            "content": "I know this issue is about making the configName param optional, but what if we just pre-loaded all three examples at initial startup? It wouldn't remove the requirement that the configName param is specified, but it removes the need to pre-upload it. The CLI already requires you to choose one, but API users could use the Config API's LIST command to get a list of them, and UI users would see all of them in the UI to choose from.\n\nJust throwing it out there - IMO it could accomplish a lot of the ease-of-use goals behind the idea for this issue, but doesn't require us to redo any examples or come up with odd names (like \"_default\") that aren't used anywhere else in the software. ",
            "author": "Cassandra Targett",
            "id": "comment-16023620"
        },
        {
            "date": "2017-05-24T21:15:16+0000",
            "content": "That sounds good too Cassandra.  That's complementary to this issue; I do like what this issue (title) proposes... I just don't want a default that automatically manipulates the schema based on new data.  That should be chosen explicitly, not accidentally. ",
            "author": "David Smiley",
            "id": "comment-16023702"
        },
        {
            "date": "2017-06-26T21:36:11+0000",
            "content": "I've updated the patch here, and created a branch: jira/solr-10272.\nhttps://github.com/apache/lucene-solr/tree/jira/solr-10272\n\nThis now uses the _default configset (SOLR-10574), which is bootstrapped upon Solr's startup.\n\nA few more cleanups related to the \"conf1\" configset in unit tests are remaining, and then planning to commit soon. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16063836"
        },
        {
            "date": "2017-06-27T03:37:22+0000",
            "content": "Commit ee572b052a9163d2884bad9e53cef52fc937bcbb in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ee572b0 ]\n\nSOLR-10272: Use _default config set if config name is not specified with CREATE collection ",
            "author": "ASF subversion and git services",
            "id": "comment-16064204"
        },
        {
            "date": "2017-06-27T03:44:33+0000",
            "content": "Commit c66a8d9fda97f24216e561df410f3eb351b5c934 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c66a8d9 ]\n\nSOLR-10272: Reverting a mistakenly deleted file ",
            "author": "ASF subversion and git services",
            "id": "comment-16064208"
        },
        {
            "date": "2017-06-27T04:04:37+0000",
            "content": "Leaving this open for documentation changes (ref guide). ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16064222"
        },
        {
            "date": "2017-06-27T09:08:03+0000",
            "content": "Hey Ishan, I think this has broken precommit?  ZkController is using the context class loader, which is not permitted by forbidden-apis. ",
            "author": "Alan Woodward",
            "id": "comment-16064508"
        },
        {
            "date": "2017-06-27T10:38:24+0000",
            "content": "Thanks Alan, I'll fix. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16064631"
        },
        {
            "date": "2017-06-27T11:31:13+0000",
            "content": "Commit e4d0bb7dc45905b6ab231b940adecd5c5a39eb8e in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e4d0bb7 ]\n\nSOLR-10272: Fixing precommit ",
            "author": "ASF subversion and git services",
            "id": "comment-16064672"
        },
        {
            "date": "2017-06-27T11:31:36+0000",
            "content": "Apologies for the failure. I've committed a fix to suppress the forbidden method call, since it is for a test.\n\nI am looking to move that method call to somewhere in the test-framework (by figuring out the _default configdir in the tests, possibly using that forbidden method call, and setting the appropriate sysprop from there) so that I can take the suppression there instead of doing it in ZkController. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16064673"
        },
        {
            "date": "2017-06-27T12:52:01+0000",
            "content": "Just a note on errors like: \"This is the _default configset, which is designed to throw error upon collection creation.\"\n\nAlmost all tests either use the \"conf1\" configset (which is uploaded initially) or explicitly upload a configset and use that. However, almost all CREATE commands did not specify the configset name. After this change, if configset name is not specified, the _default configset would be used. Hence, if you see this error, it means you inadvertently used a _default configset and you should modify your test to explicitly specify your configset name while creating a collection (usually this is called \"conf\" or \"conf1\"). The _default configset available to the test-framework is a bogus one that deliberately throws that error so that no one inadvertently uses it and instead explicitly specifies the required configset name.\n\nThis is no longer the case after implementing the idea which Shalin proposed in the subsequent comment.  ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16064780"
        },
        {
            "date": "2017-06-27T12:53:27+0000",
            "content": "Commit e6f48ca6bcea8962282b82826709fbfd3c2fa6bb in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e6f48ca ]\n\nSOLR-10272: More detailed error message, explaining what to do ",
            "author": "ASF subversion and git services",
            "id": "comment-16064782"
        },
        {
            "date": "2017-06-27T13:18:41+0000",
            "content": "I can see why a bogus _default configset for tests would have been useful during development to identify tests that were not specifying configset names already during collection creation and switch them to use \"conf\" or \"conf1\" configsets explicitly. But I don't see its usefulness once this exercise is complete.\n\nSince our collection creation API now uses _default configset by default, our tests should also do the same if no explicit configset name is specified. The _default for tests should be identical to the ones that users will use. This ensures that if a functionality is tested using the _default configset, it will actually work in the hands of our users. If we need to duplicate _default in two places to achieve this, then we should add a test to assert that both are same. This only really affects new tests since I am assuming existing ones have been cut over to \"conf\" already. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16064813"
        },
        {
            "date": "2017-06-27T16:29:50+0000",
            "content": "Commit ab319eab2427e0da6979c78cd391de2c49da1259 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ab319ea ]\n\nSOLR-10272: Fix precommit (the correct way) ",
            "author": "ASF subversion and git services",
            "id": "comment-16065071"
        },
        {
            "date": "2017-06-28T07:48:02+0000",
            "content": "It seems bin/solr's create_core for standalone Solr is not working due to this. There's no unit test for this at the moment. I'm looking into it. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16066073"
        },
        {
            "date": "2017-06-29T05:16:30+0000",
            "content": "Commit 85069cacf40e757b3eb4d4d211b1783faf800bc5 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=85069cac ]\n\nSOLR-10272: Adding user _default configset to test-files, fixing solr & solr.cmd script bugs ",
            "author": "ASF subversion and git services",
            "id": "comment-16067750"
        },
        {
            "date": "2017-06-29T05:19:38+0000",
            "content": "Leaving this issue open for adding documentation changes (ref guide), and will also do more manual testing across GNU/Linux and Windows over the next few days. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16067754"
        },
        {
            "date": "2017-06-29T14:19:42+0000",
            "content": "Policeman Jenkins failure https://jenkins.thetaphi.de/job/Lucene-Solr-master-Solaris/1408/ - doesn't reproduce for me on Linux, but I suspect the Solaris platform is relevant here, and that the failing directory comparison is depending on a sort that's not stable across platforms, since the directory contents are the same, just in a different order:\n\n\nChecking out Revision c9c0121d9399ff0009c51d6a32632dd0962e8c8f (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestConfigSetsAPI -Dtests.method=testUserAndTestDefaultConfigsetsAreSame -Dtests.seed=DBE6E9A12E3D770 -Dtests.slow=true -Dtests.locale=zh -Dtests.timezone=Africa/Sao_Tome -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 2.02s J1 | TestConfigSetsAPI.testUserAndTestDefaultConfigsetsAreSame <<<\n   [junit4]    > Throwable #1: org.junit.ComparisonFailure: Mismatch in files expected:<[[lang, elevate.xml, currency.xml, managed-schema, params.json, protwords.txt, stopwords.txt, synonyms.txt, solrconfig.xml]]> but was:<[[params.json, solrconfig.xml, lang, currency.xml, stopwords.txt, elevate.xml, protwords.txt, managed-schema, synonyms.txt]]>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([DBE6E9A12E3D770:72C37467A4C75D3]:0)\n   [junit4]    > \tat org.apache.solr.cloud.TestConfigSetsAPI$1.preVisitDirectory(TestConfigSetsAPI.java:747)\n   [junit4]    > \tat org.apache.solr.cloud.TestConfigSetsAPI$1.preVisitDirectory(TestConfigSetsAPI.java:741)\n   [junit4]    > \tat java.nio.file.Files.walkFileTree(Files.java:2677)\n   [junit4]    > \tat java.nio.file.Files.walkFileTree(Files.java:2742)\n   [junit4]    > \tat org.apache.solr.cloud.TestConfigSetsAPI.compareDirectories(TestConfigSetsAPI.java:741)\n   [junit4]    > \tat org.apache.solr.cloud.TestConfigSetsAPI.testUserAndTestDefaultConfigsetsAreSame(TestConfigSetsAPI.java:732)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n   [junit4]   2> NOTE: leaving temporary files on disk at: /export/home/jenkins/workspace/Lucene-Solr-master-Solaris/solr/build/solr-core/test/J1/temp/solr.cloud.TestConfigSetsAPI_DBE6E9A12E3D770-001\n   [junit4]   2> Jun 29, 2017 11:31:15 AM com.carrotsearch.randomizedtesting.ThreadLeakControl checkThreadLeaks\n   [junit4]   2> WARNING: Will linger awaiting termination of 1 leaked thread(s).\n   [junit4]   2> NOTE: test params are: codec=Lucene70, sim=RandomSimilarity(queryNorm=false): {}, locale=zh, timezone=Africa/Sao_Tome\n   [junit4]   2> NOTE: SunOS 5.11 amd64/Oracle Corporation 1.8.0_131 (64-bit)/cpus=3,threads=1,free=176703120,total=518979584\n   [junit4]   2> NOTE: All tests run in this JVM: [TestQueryUtils, MoveReplicaTest, EchoParamsTest, SparseHLLTest, TestPayloadScoreQParserPlugin, TestLegacyFieldCache, SimpleMLTQParserTest, TestLockTree, V2StandaloneTest, TestPushWriter, TestDynamicFieldCollectionResource, BasicAuthStandaloneTest, TestPerFieldSimilarity, TestFieldCollectionResource, OverseerModifyCollectionTest, TestPostingsSolrHighlighter, TestMultiValuedNumericRangeQuery, TestUseDocValuesAsStored, TestStressLucene, TestInPlaceUpdatesStandalone, SolrGraphiteReporterTest, DistributedFacetPivotSmallTest, TestChildDocTransformer, TestFastWriter, TestSolrJ, TestDistributedGrouping, TestDynamicLoading, DistribDocExpirationUpdateProcessorTest, FieldMutatingUpdateProcessorTest, SolrPluginUtilsTest, TestFiltering, TestSizeLimitedDistributedMap, SolrCmdDistributorTest, TestSolrConfigHandlerCloud, DocumentAnalysisRequestHandlerTest, HdfsTlogReplayBufferedWhileIndexingTest, TestCryptoKeys, DirectSolrSpellCheckerTest, TestPolicyCloud, LukeRequestHandlerTest, TestReplicaProperties, BasicZkTest, SolrCoreCheckLockOnStartupTest, ParsingFieldUpdateProcessorsTest, DistributedQueryComponentCustomSortTest, SpellCheckCollatorTest, DistributedFacetPivotLongTailTest, SolrIndexConfigTest, TlogReplayBufferedWhileIndexingTest, TestRandomCollapseQParserPlugin, TestRequestStatusCollectionAPI, CurrencyFieldTypeTest, TestExclusionRuleCollectionAccess, HdfsSyncSliceTest, HdfsChaosMonkeySafeLeaderTest, ReplicationFactorTest, TestAnalyzedSuggestions, TermsComponentTest, TestWordDelimiterFilterFactory, ClassificationUpdateProcessorTest, TestManagedSynonymGraphFilterFactory, FileBasedSpellCheckerTest, TestSchemaNameResource, TestSlowCompositeReaderWrapper, SolrCloudExampleTest, TestInitQParser, CachingDirectoryFactoryTest, TestTolerantUpdateProcessorCloud, TestCloudRecovery, SolrShardReporterTest, TestRecovery, BlockCacheTest, TestInfoStreamLogging, TestConfigSetsAPIExclusivity, TestSolrFieldCacheBean, FullSolrCloudDistribCmdsTest, TestValueSourceCache, OpenExchangeRatesOrgProviderTest, DocExpirationUpdateProcessorFactoryTest, ConnectionManagerTest, TestBulkSchemaConcurrent, TestBadConfig, ShufflingReplicaListTransformerTest, TestReRankQParserPlugin, PolyFieldTest, TestRealTimeGet, TestElisionMultitermQuery, TestRandomRequestDistribution, StatsComponentTest, TestSegmentSorting, TestRuleBasedAuthorizationPlugin, AddBlockUpdateTest, CustomCollectionTest, InfixSuggestersTest, ExitableDirectoryReaderTest, TestOverriddenPrefixQueryForCustomFieldType, ActionThrottleTest, TestCloudPivotFacet, ChaosMonkeySafeLeaderTest, TestMultiWordSynonyms, TestLMJelinekMercerSimilarityFactory, SuggesterFSTTest, InfoHandlerTest, PropertiesRequestHandlerTest, TestRTGBase, TestSuggestSpellingConverter, TestFieldTypeCollectionResource, DocValuesMultiTest, TestSolrIndexConfig, TestJsonFacetRefinement, DocValuesNotIndexedTest, TestConfigSetProperties, TestConfigOverlay, SystemInfoHandlerTest, TestCoreDiscovery, IndexSchemaRuntimeFieldTest, TestAuthorizationFramework, TestLeaderElectionWithEmptyReplica, DeleteReplicaTest, TestPartialUpdateDeduplication, TestMacroExpander, TestCorePropertiesReload, LeaderElectionIntegrationTest, TestTestInjection, TestHdfsBackupRestoreCore, TestHdfsUpdateLog, PingRequestHandlerTest, CdcrUpdateLogTest, UUIDUpdateProcessorFallbackTest, TestXmlQParser, TestLegacyNumericUtils, TestNumericRangeQuery64, TestNRTOpen, SharedFSAutoReplicaFailoverTest, JSONWriterTest, ZkSolrClientTest, BaseCdcrDistributedZkTest, TestFieldCache, TestSerializedLuceneMatchVersion, CoreAdminRequestStatusTest, TestNamedUpdateProcessors, TestBinaryResponseWriter, TestSimpleTrackingShardHandler, TestPullReplicaErrorHandling, NodeMutatorTest, BlobRepositoryCloudTest, SaslZkACLProviderTest, TestFastOutputStream, CollectionStateFormat2Test, TestFreeTextSuggestions, SampleTest, TestConfigsApi, PreAnalyzedFieldTest, SuggesterTSTTest, BufferStoreTest, CollectionsAPIDistributedZkTest, RuleEngineTest, AnalyticsMergeStrategyTest, ManagedSchemaRoundRobinCloudTest, SpellPossibilityIteratorTest, ConvertedLegacyTest, TestPerFieldSimilarityWithDefaultOverride, TestJoin, TestSolrCloudWithHadoopAuthPlugin, TestSolrCloudSnapshots, TestDistributedMissingSort, TestManagedSchema, TestFieldSortValues, DistributedTermsComponentTest, TestRTimerTree, TestSQLHandler, TestLRUStatsCache, TestGraphMLResponseWriter, ZkStateWriterTest, TestStressLiveNodes, TestReqParamsAPI, BasicDistributedZk2Test, OpenCloseCoreStressTest, OverseerTest, ShardRoutingTest, RecoveryZkTest, ClusterStateUpdateTest, TestRandomFaceting, LeaderElectionTest, TestZkChroot, ZkCLITest, ShardRoutingCustomTest, TestDistributedSearch, AutoCommitTest, TestFaceting, DistributedSpellCheckComponentTest, TermVectorComponentDistributedTest, TestStressReorder, TestReload, TestStressVersions, TestRangeQuery, TestCoreContainer, TestSolr4Spatial, SpellCheckComponentTest, PeerSyncTest, BadIndexSchemaTest, TestSort, TestFunctionQuery, BasicFunctionalityTest, DirectUpdateHandlerTest, TestIndexSearcher, HighlighterTest, ShowFileRequestHandlerTest, DistributedQueryElevationComponentTest, SolrIndexSplitterTest, AnalysisAfterCoreReloadTest, SignatureUpdateProcessorFactoryTest, TestExtendedDismaxParser, SolrRequestParserTest, TestTrie, TestCSVLoader, NoCacheHeaderTest, SchemaVersionSpecificBehaviorTest, QueryEqualityTest, StatelessScriptUpdateProcessorFactoryTest, TestRemoteStreaming, TestSolrDeletionPolicy1, SolrInfoBeanTest, XsltUpdateRequestHandlerTest, DebugComponentTest, CacheHeaderTest, IndexBasedSpellCheckerTest, TestSurroundQueryParser, DisMaxRequestHandlerTest, TestQueryTypes, PrimitiveFieldTypeTest, RequestHandlersTest, DocumentBuilderTest, PathHierarchyTokenizerFactoryTest, TermVectorComponentTest, MoreLikeThisHandlerTest, TestSolrQueryParser, LoggingHandlerTest, RegexBoostProcessorTest, TestJmxIntegration, TestCollationField, ReturnFieldsTest, UpdateRequestProcessorFactoryTest, MBeansHandlerTest, QueryParsingTest, JsonLoaderTest, TestPHPSerializedResponseWriter, TestComponentsName, SearchHandlerTest, TestLFUCache, HighlighterConfigTest, SOLR749Test, UpdateParamsTest, AlternateDirectoryTest, CopyFieldTest, BadComponentTest, TestStressRecovery, TestMergePolicyConfig, TestDocSet, TestBinaryField, TestSearchPerf, NumericFieldsTest, TestConfig, TestFuzzyAnalyzedSuggestions, ExternalFileFieldSortTest, TestSolrCoreProperties, DirectSolrConnectionTest, TestLuceneMatchVersion, TestCharFilters, SynonymTokenizerTest, TestXIncludeConfig, TestDFRSimilarityFactory, TestLMDirichletSimilarityFactory, TestBM25SimilarityFactory, TimeZoneUtilsTest, ScriptEngineTest, PluginInfoTest, TestFastLRUCache, DateMathParserTest, ChaosMonkeyNothingIsSafeTest, TestSystemIdResolver, SpellingQueryConverterTest, DOMUtilTest, TestLRUCache, TestDocumentBuilder, ZkNodePropsTest, UUIDFieldTest, FileUtilsTest, CircularListTest, DistributedMLTComponentTest, DistributedIntervalFacetingTest, TestCrossCoreJoin, TestHighlightDedupGrouping, TestTolerantSearch, TestEmbeddedSolrServerConstructors, TestEmbeddedSolrServerSchemaAPI, TestJettySolrRunner, ConnectionReuseTest, AssignTest, AsyncCallRequestStatusResponseTest, CdcrBootstrapTest, CdcrReplicationDistributedZkTest, CdcrRequestHandlerTest, CdcrVersionReplicationTest, ChaosMonkeyNothingIsSafeWithPullReplicasTest, CloudExitableDirectoryReaderTest, CollectionTooManyReplicasTest, ConcurrentDeleteAndCreateCollectionTest, ConfigSetsAPITest, DeleteLastCustomShardedReplicaTest, DeleteNodeTest, DeleteStatusTest, DistribCursorPagingTest, HttpPartitionTest, LeaderInitiatedRecoveryOnShardRestartTest, MigrateRouteKeyTest, MultiThreadedOCPTest, SharedFSAutoReplicaFailoverUtilsTest, SimpleCollectionCreateDeleteTest, SolrCLIZkUtilsTest, TestAuthenticationFramework, TestConfigSetsAPI]\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16068402"
        },
        {
            "date": "2017-06-29T14:21:21+0000",
            "content": "Wow that's an insightful catch Steve Rowe! ",
            "author": "David Smiley",
            "id": "comment-16068406"
        },
        {
            "date": "2017-06-29T16:22:35+0000",
            "content": "Commit 46bfd9cf7e9da99e936fe986af88f4ab47d7fe33 in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=46bfd9c ]\n\nSOLR-10272: Fix for test failure, while comparing directory contents of _default configsets ",
            "author": "ASF subversion and git services",
            "id": "comment-16068560"
        },
        {
            "date": "2017-06-29T16:27:20+0000",
            "content": "Thanks Steve. I think it was the case of Solaris kernel returning list of files in a different order.\n\nShalin, your suggestion is implemented; thanks! Now, if a unit test doesn't specify a configset name while creating a collection, it will use the _default configset, not conf1. Also, any change to the _default configset would need to go into two places: the user's _default configset, i.e. server/solr/configsets/_default, and the _default configset in solr/core/test-files/_default.* ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16068569"
        },
        {
            "date": "2017-07-06T12:39:10+0000",
            "content": "Commit 112bdda47eb9827e80500c767d09422efeb9b91e in lucene-solr's branch refs/heads/master from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=112bdda ]\n\nSOLR-10574, SOLR-10272: Refguide documentation for _default configset ",
            "author": "ASF subversion and git services",
            "id": "comment-16076430"
        },
        {
            "date": "2017-07-06T14:22:13+0000",
            "content": "Commit d3acebcfe58320fa94517517caa1e3a537640a51 in lucene-solr's branch refs/heads/branch_7x from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d3acebc ]\n\nSOLR-10574, SOLR-10272: Refguide documentation for _default configset\n\n(cherry picked from commit 112bdda) ",
            "author": "ASF subversion and git services",
            "id": "comment-16076579"
        },
        {
            "date": "2017-07-06T14:34:47+0000",
            "content": "Commit 04054fc524432388c7cea722b766815a950ca736 in lucene-solr's branch refs/heads/branch_7_0 from Ishan Chattopadhyaya\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=04054fc ]\n\nSOLR-10574, SOLR-10272: Refguide documentation for _default configset\n\n(cherry picked from commit 112bdda) ",
            "author": "ASF subversion and git services",
            "id": "comment-16076609"
        },
        {
            "date": "2017-07-24T19:16:00+0000",
            "content": "Ishan Chattopadhyaya I think this is resolved, but can you confirm? ",
            "author": "Anshum Gupta",
            "id": "comment-16099005"
        },
        {
            "date": "2017-07-24T19:42:56+0000",
            "content": "Hi Anshum, just minor ref guide documentation remains for a related issue, SOLR-10574. I'll take it up tomorrow. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16099037"
        },
        {
            "date": "2017-07-24T19:44:34+0000",
            "content": "Ah, I was wrong; I had finished it up already and just forgot to close out this issue; doing so now. ",
            "author": "Ishan Chattopadhyaya",
            "id": "comment-16099039"
        }
    ]
}