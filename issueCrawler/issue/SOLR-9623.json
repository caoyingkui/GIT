{
    "id": "SOLR-9623",
    "title": "Disable remote streaming by default",
    "details": {
        "components": [
            "security"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Blocker"
    },
    "description": "As we set more and more config settings suitable for production use, perhaps it is time to disable remoteStreaming by default, and document how to enable it.",
    "attachments": {
        "SOLR-9623.patch": "https://issues.apache.org/jira/secure/attachment/12869182/SOLR-9623.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-11T18:57:03+0000",
            "author": "Alexandre Rafalovitch",
            "content": "I believe it is disabled by default in code (though RefGuide says otherwise). Perhaps we don't need that whole section. People who need it, can find it in the Reference Guide. ",
            "id": "comment-15566270"
        },
        {
            "date": "2016-10-11T20:31:27+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "You are right that Java code default is false. What I meant is make the example solrconfig's comply with that, so that e.g. data_driven_schema_configs and the other configs either removes the whole section or changes it to false and commented out (for educational reason, like much of the other config).\n\nI think I'm +1 to removing it from the example configs. You can always call the config API to enable it... ",
            "id": "comment-15566499"
        },
        {
            "date": "2016-10-31T10:26:01+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Let's have a quick vote shall we. Vetos also welcome at this stage:\n\nA. Remove this section from all solrconfig.xml and let the Java default of false be the new default\nB.\u00a0Leave the tag in XML files, but change the variable default from true->false\nC. Leave streaming enabled as is\n\nMy vote: A ",
            "id": "comment-15621814"
        },
        {
            "date": "2016-10-31T10:30:18+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "A. Remove this section from all solrconfig.xml and let the Java default of false be the new default\n\n+1 ",
            "id": "comment-15621824"
        },
        {
            "date": "2016-10-31T14:31:07+0000",
            "author": "David Smiley",
            "content": "B. Leave the tag in XML files, but change the variable default from true->false\n\n+1 to 'B' because it's then easy to enable it with a System property.  I think this better supports some people getting started with Solr, so that they don't have to go mucking with solrconfig.xml. ",
            "id": "comment-15622313"
        },
        {
            "date": "2016-10-31T17:13:43+0000",
            "author": "Erik Hatcher",
            "content": "... because it's then easy to enable it with a System property.\n\nMaybe this could be generalized, such that all settings can correspond to a \"solr.some.key\" system property override?   [maybe with a solr.system.property.resolver=off setting too]  Just thinking outloud... ",
            "id": "comment-15622763"
        },
        {
            "date": "2016-10-31T20:23:36+0000",
            "author": "Alexandre Rafalovitch",
            "content": "A. Remove this section from all solrconfig.xml and let the Java default of false be the new default\n+1 on A. \n\nI am -0 on B, because each section in solrconfig.xml also contributes to the decision fatigue. My anecdotal survey indicates that many people don't even know that this section is there because they get tired of reading solrconfig.xml before that due to all other sections. ",
            "id": "comment-15623302"
        },
        {
            "date": "2016-10-31T21:11:45+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "You mean to build EnvVar override support into the Java code for each config property instead of relying on solr.xml to have the config? Would be sweet if we had some kind of dot convention that would always work, like solr.<module>.<section>.<property>, e.g. solr.config.request_parsers.enable_remote_streaming, here with a convention of inserting a \"_\" for camelCase.\n\nMakes me think - we already have such a mepping convention for the Config REST API, don't we? ",
            "id": "comment-15623435"
        },
        {
            "date": "2017-05-20T18:58:17+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Looking at this again, trying to target 7.0\n\nI may do this together with SOLR-5077 and adjust both multipartUploadLimitInKB and enableRemoteStreaming in all configs, and comment out the section instead of removing. ",
            "id": "comment-16018589"
        },
        {
            "date": "2017-05-21T21:49:28+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Patch.\n\n\tFlips all configs to \"false\", in line with code defaults\n\tComments out most <requestParsers> configs\n\tChanges all multipartUploadLimitInKB=\"2048000\" to 2048, in line with code defaults\n\tUpdates ref-guide\n\n\n\nCould be wise to include a Config-API example somewhere in the RefGuide of how to enable streaming ",
            "id": "comment-16018988"
        },
        {
            "date": "2017-05-23T20:31:46+0000",
            "author": "Yonik Seeley",
            "content": "Changes all multipartUploadLimitInKB=\"2048000\" to 2048\n\nThis seems like it's just one more step to get to useable remote streaming that won't break when it goes over a magic limit.  If it's disabled by default, surely we can have a very high limit, or disable the limit altogether by default? ",
            "id": "comment-16021784"
        },
        {
            "date": "2017-05-23T20:56:53+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I follow that logic, to upper the default limit both in Java and in config, now that we disable streaming by default anyway. What is a good value? The number 2048000 feels a bit like adding zeros to make a big number.. Perhaps 2097152 (2048 x 1024) could be the new default  I could update this patch to make that change too. ",
            "id": "comment-16021847"
        },
        {
            "date": "2017-05-25T09:05:00+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "New patch with new default (2097152) in both Java and configs for multipartUploadLimitKB. What about formdataUploadLimitInKB? ",
            "id": "comment-16024429"
        },
        {
            "date": "2017-05-25T10:05:50+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I was hoping that this would also disallow stream.body but it doesn't. In fact there is no way to disable stream.body. Although useful in tests, I think it is an anti pattern to be able to fake a POST request using GET, which is what this allows in practice.\n\nAnyone in favor of adding the remoteStreaming check also for stream.body, or alternatively introducing a new requestParsers attribute enableStreamBody which is also false by default? ",
            "id": "comment-16024472"
        },
        {
            "date": "2017-05-25T11:51:01+0000",
            "author": "David Smiley",
            "content": "Anyone in favor of adding the remoteStreaming check also for stream.body\n\nHmm.  It seems these are separate concerns.  Remote streaming is the concern that you pull from a remote service, and the caller gets to pick the URL which is a security concern.  But stream.body is actually related to a GET vs POST issue, which should be handled separately.  So I'm -0 on your suggestion.\n\nAll these security checks can be a bit of a downer (depressingly hobbled) for local work.  It'd be nice if these checks could be auto-disabled when issues from localhost in non-SolrCloud.  Ah well. ",
            "id": "comment-16024611"
        },
        {
            "date": "2017-05-25T19:26:59+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Created SOLR-10748 for the enableStreamBody config. ",
            "id": "comment-16025250"
        },
        {
            "date": "2017-05-25T19:29:22+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "[~yonik] any thought about whether the default limit for formdataUploadLimitInKB should also be raised? As I understand it applies when you post a HTML form or use curl to post without specifying content-type? ",
            "id": "comment-16025253"
        },
        {
            "date": "2017-06-16T08:17:02+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "There has been no more feedback on this, so I plan to commit in a few days ",
            "id": "comment-16051575"
        },
        {
            "date": "2017-06-16T14:54:27+0000",
            "author": "Yonik Seeley",
            "content": "Sorry, this fell off my radar.\n\n[~yonik] any thought about whether the default limit for formdataUploadLimitInKB should also be raised?\n\nIt should be unlimited.\n\nThe number 2048000 feels a bit like adding zeros to make a big number.\n\nThat's exactly what I did when I hit the magic limit previously... I didn't know the implementation details, and didn't know if this was internally an integer or a long.  And without knowing the implementation details, things like MAX_INT or MAX_LONG can cause boundary condition bugs.  So I just added some zeroes   But if there's a way to make it effectively unlimited, it seems like that's what it should be. ",
            "id": "comment-16051999"
        },
        {
            "date": "2017-06-16T16:36:38+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "New patch\n\n\tSets defaults for both multipartUploadLimitInKB and formdataUploadLimitInKB to MAX_INT\n\tAllows value \"-1\" in configs, meaning MAX_INT\n\tUpdates all solrconfig.xml files with \"-1\" instead of a number\n\tUpdate ref-guide docs. Let doc example still set a limit of 2048, to highlight example use\n\n ",
            "id": "comment-16052107"
        },
        {
            "date": "2017-06-20T09:00:32+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4746ff0ec8a008d42a44c6e6dd3e94cbb2886410 in lucene-solr's branch refs/heads/master from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4746ff0 ]\n\nSOLR-9623: Disable remote streaming in example configs by default. Adjust Upload Limit defaults ",
            "id": "comment-16055403"
        },
        {
            "date": "2017-06-20T09:01:35+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Resolved. Thanks to all who participated, especially Yonik. ",
            "id": "comment-16055406"
        },
        {
            "date": "2017-06-20T15:42:13+0000",
            "author": "Steve Rowe",
            "content": "TestRemoteStreaming.testStreamUrl() now fails for me without a seed (for an example, see https://jenkins.thetaphi.de/job/Lucene-Solr-master-Linux/19916/) ",
            "id": "comment-16055972"
        },
        {
            "date": "2017-06-20T16:15:37+0000",
            "author": "Steve Rowe",
            "content": "git bisect blames the commit on this issue for a reproducing CacheHeaderTest.testCacheVetoHandler() failure https://jenkins.thetaphi.de/job/Lucene-Solr-master-Solaris/1384/:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=CacheHeaderTest -Dtests.method=testCacheVetoHandler -Dtests.seed=E690D262D7E2F6BE -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=nl-NL -Dtests.timezone=America/Panama -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 0.04s J0 | CacheHeaderTest.testCacheVetoHandler <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<200> but was:<400>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([E690D262D7E2F6BE:3636A5FEF7DCEF8F]:0)\n   [junit4]    > \tat org.apache.solr.servlet.CacheHeaderTest.testCacheVetoHandler(CacheHeaderTest.java:67)\n\n ",
            "id": "comment-16056026"
        },
        {
            "date": "2017-06-20T16:18:27+0000",
            "author": "Steve Rowe",
            "content": "Also these SolrRequestParserTest failures (\"Remote Streaming is disabled.\") https://jenkins.thetaphi.de/job/Lucene-Solr-master-Solaris/1384/:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=SolrRequestParserTest -Dtests.method=testStreamURL -Dtests.seed=E690D262D7E2F6BE -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=de-DE -Dtests.timezone=America/Aruba -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] ERROR   0.01s J2 | SolrRequestParserTest.testStreamURL <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Remote Streaming is disabled.\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([E690D262D7E2F6BE:BFA5EC71A3C03B8B]:0)\n   [junit4]    > \tat org.apache.solr.servlet.SolrRequestParsers.buildRequestFrom(SolrRequestParsers.java:190)\n   [junit4]    > \tat org.apache.solr.servlet.SolrRequestParsers.buildRequestFrom(SolrRequestParsers.java:178)\n   [junit4]    > \tat org.apache.solr.servlet.SolrRequestParserTest.testStreamURL(SolrRequestParserTest.java:140)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=SolrRequestParserTest -Dtests.method=testStreamFile -Dtests.seed=E690D262D7E2F6BE -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=de-DE -Dtests.timezone=America/Aruba -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] ERROR   0.00s J2 | SolrRequestParserTest.testStreamFile <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Remote Streaming is disabled.\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([E690D262D7E2F6BE:795923A829FF9159]:0)\n   [junit4]    > \tat org.apache.solr.servlet.SolrRequestParsers.buildRequestFrom(SolrRequestParsers.java:205)\n   [junit4]    > \tat org.apache.solr.servlet.SolrRequestParsers.buildRequestFrom(SolrRequestParsers.java:178)\n   [junit4]    > \tat org.apache.solr.servlet.SolrRequestParserTest.testStreamFile(SolrRequestParserTest.java:162)\n\n ",
            "id": "comment-16056028"
        },
        {
            "date": "2017-06-20T18:30:48+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Thanks Steve, I'm on the case ",
            "id": "comment-16056248"
        },
        {
            "date": "2017-06-20T19:11:30+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a4f27bbfbb1d0542a95e13507555cf74ebccbe45 in lucene-solr's branch refs/heads/master from Jan H\u00f8ydahl\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a4f27bb ]\n\nSOLR-9623: Fix test errors related to some test expecting streaming to be enabled ",
            "id": "comment-16056296"
        },
        {
            "date": "2018-03-20T20:25:43+0000",
            "author": "Mikhail Khludnev",
            "content": "Can it be closed?\u00a0 ",
            "id": "comment-16406955"
        }
    ]
}