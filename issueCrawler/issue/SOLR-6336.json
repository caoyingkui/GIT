{
    "id": "SOLR-6336",
    "title": "DistributedQueue (and it's use in OCP) leaks ZK Watches",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The current DistributedQueue implementation leaks ZK watches whenever it finds children or times out on finding one. OCP uses this in its event loop and can loop tight in some conditions (when exclusivity checks fail), leading to lots of watches which get triggered together on the next event (could be a while for some activities like shard splitting).\n\nThis gets exposed by SOLR-6261 which spawns a new thread for every parallel watch event.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "ASF GitHub Bot",
            "id": "comment-14089230",
            "date": "2014-08-07T13:55:50+0000",
            "content": "GitHub user andyetitmoves opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/80\n\n    Reuse watcher in DistributedQueue across peek/take\n\n    Initial patch for SOLR-6336. Some more work can probably be done (other functions in the queue still do this, and probably tests would be good to check this in general), but here's an initial fix which passes tests and fixes Jenkins failures currently happening..\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/bloomberg/lucene-solr fix-watch-leak\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/80.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #80\n\n\ncommit d61f5de2056a4ea841c2d637b9def1c2cb8597b0\nAuthor: Ramkumar Aiyengar <raiyengar@bloomberg.net>\nDate:   2014-08-07T12:30:22Z\n\n    Reuse watcher in DistributedQueue across peek/take\n\n "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14089527",
            "date": "2014-08-07T17:57:51+0000",
            "content": "other functions in the queue still do this\n\nThat's only offer, which is best managed by the caller as the watcher depends on the arguments passed in. In any case, that's handled reasonably well by CollectionsHandler which uses it. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14090139",
            "date": "2014-08-08T01:16:59+0000",
            "content": "Commit 1616654 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1616654 ]\n\nSOLR-6336: DistributedQueue can easily create too many ZooKeeper Watches. (closes #80) "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14090140",
            "date": "2014-08-08T01:17:56+0000",
            "content": "Commit 1616655 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1616655 ]\n\nSOLR-6336: DistributedQueue can easily create too many ZooKeeper Watches. (closes #80) "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-14090164",
            "date": "2014-08-08T01:45:26+0000",
            "content": "Github user asfgit closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/80 "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-14090630",
            "date": "2014-08-08T11:01:39+0000",
            "content": "GitHub user andyetitmoves opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/81\n\n    Cache children as well so that they can be returned when the watcher is reused\n\n    Fixes an issue with apache/lucene-solr#80 pulled to SOLR-6336. If the first `getChildren` actually returns nodes, and the second request happens before the watch is fired, currently it will return no children.\n\n    The rest of the patch is just minor code cleanup.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/bloomberg/lucene-solr trunk-reuse-latch-fix\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/81.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #81\n\n\ncommit f603e7506d1fe5d956a75cdb13897b1b7af7ac70\nAuthor: Ramkumar Aiyengar <andyetitmoves@gmail.com>\nDate:   2014-08-08T07:44:10Z\n\n    Cache children as well so that they can be returned when the watcher is reused\n\n "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14090634",
            "date": "2014-08-08T11:04:30+0000",
            "content": "Fixed a bug with children not being returned when the watcher is reused. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14090795",
            "date": "2014-08-08T14:23:27+0000",
            "content": "Commit 1616771 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1616771 ]\n\nSOLR-6336: Cache children as well so that they can be returned when the watcher is reused. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14090797",
            "date": "2014-08-08T14:25:52+0000",
            "content": "Commit 1616772 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1616772 ]\n\nSOLR-6336: Cache children as well so that they can be returned when the watcher is reused. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14093317",
            "date": "2014-08-11T21:24:01+0000",
            "content": "Thanks Ramkumar! "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-14095461",
            "date": "2014-08-13T13:23:24+0000",
            "content": "I raised SOLR-6370 to catch such issues proactively. "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14174420",
            "date": "2014-10-16T23:02:08+0000",
            "content": "Please let me know if I'm supposed to open a new issue (not sure what the policy is).\n\nI'm encountering a bug from this patch where now I'm stuck in a loop making getChildren() request to zookeeper with this thread dump:\n\nThread-51 [WAITING] CPU time: 1d 15h 0m 57s\njava.lang.Object.wait()\norg.apache.zookeeper.ClientCnxn.submitRequest(RequestHeader, Record, Record, ZooKeeper$WatchRegistration)\norg.apache.zookeeper.ZooKeeper.getChildren(String, Watcher)\norg.apache.solr.common.cloud.SolrZkClient$6.execute()<2 recursive calls>\norg.apache.solr.common.cloud.ZkCmdExecutor.retryOperation(ZkOperation)\norg.apache.solr.common.cloud.SolrZkClient.getChildren(String, Watcher, boolean)\norg.apache.solr.cloud.DistributedQueue.orderedChildren(Watcher)\norg.apache.solr.cloud.DistributedQueue.getChildren(long)\norg.apache.solr.cloud.DistributedQueue.peek(long)\norg.apache.solr.cloud.DistributedQueue.peek(boolean)\norg.apache.solr.cloud.Overseer$ClusterStateUpdater.run()\njava.lang.Thread.run()\n\nLooking at the code, I think the issue is that LatchChildWatcher#process always sets the event to its member, regardless of its type, but the problem is that once an event is set, the await no longer waits. In this state, the while loop in getChildren(long), when called with wait being Integer.MAX_VALUE will come back, NOT wait at await because event != null, but then it still will not get any children.\n\n\n    while (true) {\n      if (!children.isEmpty()) break;\n      watcher.await(wait == Long.MAX_VALUE ? DEFAULT_TIMEOUT : wait);\n      if (watcher.getWatchedEvent() != null) \nUnknown macro: {        children = orderedChildren(null);      } \n      if (wait != Long.MAX_VALUE) break;\n    }\n\nI think the fix would be to only set the event in the watcher if the type is a NodeChildrenChanged. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14174514",
            "date": "2014-10-17T00:16:31+0000",
            "content": "Jessica Cheng Mallet, because this issue is resolved and you're having what looks to you like a related bug, it's standard practice to open a new issue.  Sometimes discussion may continue on an issue after it's resolved, typically that would be for clarification purposes, to decide whether a new issue should be filed.  You can link the new issue to this as a related issue after you create it.\n\nI do not understand the cloud/zookeeper internals well enough to know what you were saying above.  One day I hope to. "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14174519",
            "date": "2014-10-17T00:22:25+0000",
            "content": "Thanks for the clarification Shawn Heisey! I'll open a new issue. Thanks! "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14174541",
            "date": "2014-10-17T00:41:41+0000",
            "content": "Best rule of thumb: if the issue is released, new issue and link it to the related one. If it's not released, reopen the issue.  "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14174556",
            "date": "2014-10-17T00:56:54+0000",
            "content": "Got it! Thanks! "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-14262144",
            "date": "2014-12-31T12:30:38+0000",
            "content": "Github user andyetitmoves closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/81 "
        }
    ]
}