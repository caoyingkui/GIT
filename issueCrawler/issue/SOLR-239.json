{
    "id": "SOLR-239",
    "title": "Read IndexSchema from InputStream instead of Config file",
    "details": {
        "affect_versions": "1.2",
        "status": "Closed",
        "fix_versions": [
            "1.2"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Incomplete"
    },
    "description": "Soon to follow patch adds a constructor to IndexSchema to allow them to be created directly from InputStreams.  The overall logic for the Core's use of the IndexSchema creation/use does not change however this allows java clients like those in SOLR-20 to be able to parse an IndexSchema.  Once a schema is parsed, the client can inspect an index's capabilities which is useful for building generic search UI's.  ie provide a drop down list of fields to search/sort by.",
    "attachments": {
        "IndexSchemaStream.patch": "https://issues.apache.org/jira/secure/attachment/12357309/IndexSchemaStream.patch",
        "IndexSchemaStream2.patch": "https://issues.apache.org/jira/secure/attachment/12357396/IndexSchemaStream2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Will Johnson",
            "id": "comment-12495773",
            "date": "2007-05-14T20:20:03+0000",
            "content": "patch with test cases attached.  i also had to change raw-schema.jsp to be a redirect to get-files.jsp however it wasn't clear that raw-schema.jsp was in use anymore. "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12496023",
            "date": "2007-05-15T15:42:49+0000",
            "content": "patch updated.  now with the added benefit of compiling. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12496606",
            "date": "2007-05-17T16:04:57+0000",
            "content": "Minor comment: if you use the same name for the patch file, JIRA will automatically gray out the older one, thus making it easier to spot which patches are out of date, and which one is the fresh one to look at.\n\nThanks for the patch, this sounds useful. "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12498731",
            "date": "2007-05-24T17:26:39+0000",
            "content": "the attached patch (IndexSchemaStream2.patch) includes a cleaned up test case as well as making the IndexSchema constructors throw a SolrException since they are reading InputStreams (which they were before).  i think perhaps they should throw something a big 'stronger' but that seemed to have more wide-reaching implications. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12498840",
            "date": "2007-05-24T21:07:04+0000",
            "content": "a few notes from skimming the patch...\n\n1) there is a public API change here by removing the getIputStream() method from IndexSearcher.  probably not a big deal but important that we consider it.\n\n2) why did you remove testDynamicCopy() from IndexSchemaTest ?\n\n3) raw-schema.jsp on the trunk appears to be completely broken (multiple <%@ page contentType=\"...\"%> declarations), and not linked to from the admin screen anyway ... we might want to just remove it completely and make a note in the CHANGES in case people have the old URL bookmarked. "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12499087",
            "date": "2007-05-25T14:02:41+0000",
            "content": "updated with fixed and test raw-schema.jsp and added back the IndexSchema testDynamicCopy() test.\n "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12500704",
            "date": "2007-06-01T13:21:29+0000",
            "content": "after seeing that i'd need to regenerate a patch for the new IndexSchema's SolrException handling i got to thinking about ways to preserve the getInputStream() functionality.  tracing things down a bit it seems to all fall to Config.openResource(fileName).  i was wondering if it might not be better to extend that code to handle URL's as well as file names by looking for http:// at the beginning of the resourceName.  this might open up other avenues for centralized configuration of all of solr in the future but it does at least solve this problem and maintain more backwards compatibility with the existing api.  \n\nthoughts? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12500888",
            "date": "2007-06-01T23:37:47+0000",
            "content": "FWIW: I really don't think preserving getIputStream() is really necessary, but as a public method it shouldn't' be removed without discussion.\n\nThinking about this whole issue a little bit more now, am i correct in understanding that your original goal was to allow clients to parse a remote schema as an InputStream (fetched from the server via a URL).\n\ni have to question whether it really makes sense for clients to use the IndexSchema class ... it requires a lot of baggage (like all of the field types and all of the analyzers) that are probably overkill for most clients, and break the abstraction solr provides where clients only need to know about fields names, and the server takes care of the rest.  A simple DOM model of hte schema.xml seems like it would really solve 99.9999% of the problems clients might need.\n\nBut for the purposes of this discussion let's focus on the other 0.0001% of the problems...\n\nMaking Config.openResource(String) support URLs might be a little overkill for achieving the immediate goal, and it seems like it would raise a lot more questions then it may solve.\n\nWhy not just add an IndexSchema(URL) constructor...\n\n\n\tadd new private URL schemaUrl\n\tadd new IndexSchema(URL) constructor that sets schemaUrl and calls readConfig()\n\tmodify getInputStream to return Config.openResource(schemaFile) only if it's not null, otherwise return URL.openStream()\n\n\n\n(this doesn't preclude or make more complex any possible future decision to allow Config.openResource to support URLs) \n\nwhile we're at it we should probably...\n\n\tchange the private readConfig to take an InputStream as a param\n\tmodify the constructors that call readConfig to pass an explict InputStream made from their input\n\tdeprecate public getInputStream()\n\n "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12501211",
            "date": "2007-06-04T13:39:17+0000",
            "content": "New patch that address all 6 suggestions.  The one thing that is interesting is that using http://localhost:8983/solr/admin/get-file.jsp?file=schema.xml does not work as it prints out a number of newlines before the XML declaration which causes it to be invalid.  I'm not quite sure how to fix this without rewriting get-file.jsp as a servlet and making sure it only prints out the xml.\n\nIn any case it does work against url's that only contain valid xml however I wasn't sure how we go about testing things that require the example to be running. (the test is therefore commented out)\n\nas for motivations, yes it does require a good bit of overhead and i think it would be good to have a 'lighter' IndexSchema implementation for client api's.   i do think however that it's nice to know exactly what is running and to be able to inspect each fields capabilities so i'm not sure what the right thing to do is.\n\n\n\twill\n\n "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12502826",
            "date": "2007-06-08T14:28:30+0000",
            "content": "new patch that includes a GetFile servlet to possibly replace get-file.jsp due to the fact that it writes out invalid xml.   "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12505846",
            "date": "2007-06-18T15:38:43+0000",
            "content": "after looking at all the dependencies for IndexSchema and with the addition of the new solrj stuff in trunk i no longer think this approach is the correct way to go about things.  the LukeRequest/LukeResponse seems to give most of the same info with ~0 overhead and it's already checked in.   "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12525171",
            "date": "2007-09-05T18:08:32+0000",
            "content": "Comments indicate that this is no longer being pursued. "
        }
    ]
}