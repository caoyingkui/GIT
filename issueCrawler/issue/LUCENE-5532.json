{
    "id": "LUCENE-5532",
    "title": "AutomatonQuery.hashCode is not thread safe",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7.1",
            "4.8",
            "6.0"
        ]
    },
    "description": "This hashCode is implemented based on  #states and #transitions.\n\nThese methods use getNumberedStates() though, which may oversize itself during construction and then \"size down\" when its done. But numberedStates is prematurely set (before its \"ready\"), which can cause a hashCode call from another thread to see a corrupt state... causing things like NPEs from null states and other strangeness. I don't think we should set this variable until its \"finished\".",
    "attachments": {
        "LUCENE-5532.patch": "https://issues.apache.org/jira/secure/attachment/12635036/LUCENE-5532.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13937460",
            "author": "Robert Muir",
            "content": "I am also unhappy about this:\n\n      // we already minimized the automaton in the ctor, so\n      // this hash code will be the same for automata that\n      // are the same:\n      int automatonHashCode = automaton.getNumberOfStates() * 3 + automaton.getNumberOfTransitions() * 2;\n\n\n\nThis comment is out of date! So the whole algorithm is broken in some cases I think.\nI would really prefer if we don't mess with mutable stuff in equals/hashcode. \nI think it would be better if this stuff was impl'ed in CompiledAutomaton? I'll give it a stab. ",
            "date": "2014-03-17T05:06:05+0000"
        },
        {
            "id": "comment-13937477",
            "author": "Robert Muir",
            "content": "Here's a test for the thread safety bug, fails like this:\n\nCaused by: java.lang.NullPointerException\n\tat org.apache.lucene.util.automaton.Automaton.getNumberOfTransitions(Automaton.java:543)\n\tat org.apache.lucene.search.AutomatonQuery.hashCode(AutomatonQuery.java:84)\n\tat org.apache.lucene.search.TestAutomatonQuery$1.run(TestAutomatonQuery.java:228)\n\n\n\nthis patch takes a different approach: it doesnt assert \"same language\" at all, thats expensive and I don't think its nearly as important as things like being thread-safe, hashcode being consistent with equals, etc.\n\nSo we just impl hashcode/equals with the compiled form. If the automata have the same structure (e.g. same regex or wildcard), it will return true. The previous stuff was overkill anyway, because  e.g. foo* would not equate to foo** since the \"term\" is different!\n\nI also made getNumberedStates a little less trappy, even though its no longer used here by this stuff. ",
            "date": "2014-03-17T05:49:14+0000"
        },
        {
            "id": "comment-13937483",
            "author": "Robert Muir",
            "content": "same patch, just with some reordering of things in RunAutomaton.equals for faster speed. ",
            "date": "2014-03-17T06:05:12+0000"
        },
        {
            "id": "comment-13937585",
            "author": "Simon Willnauer",
            "content": "+1 to the patch - I agree with the change to go away from acceptsSameLanguage! speedups are also good though. Let's make sure we put this on the change runtime behavior section in CHANGES.TXT ",
            "date": "2014-03-17T09:23:04+0000"
        },
        {
            "id": "comment-13937594",
            "author": "Uwe Schindler",
            "content": "+1 to the patch.\n\nI am not sure about this, I did not get the latest test-framework updates: It looks to me that the thread does not use a custom name or is the thread group inherited by the test framework? I would also change the thread to simply Assert.fail() on Exception in the thread. ",
            "date": "2014-03-17T09:35:14+0000"
        },
        {
            "id": "comment-13937611",
            "author": "Robert Muir",
            "content": "Uwe, it just inherits. Its similar to many tests in the .index package that work this way. If we want to do something else, we should ban some methods. But I can name the threads if you want \n\nAs far as Assert.fail, this would lose the stacktrace of the original exception? In the case of this test failing due to a thread safety issue, I think thats useful for debugging ",
            "date": "2014-03-17T09:56:53+0000"
        },
        {
            "id": "comment-13937619",
            "author": "Uwe Schindler",
            "content": "Uwe, it just inherits. Its similar to many tests in the .index package that work this way. If we want to do something else, we should ban some methods. But I can name the threads if you want \n\nAll fine, just wanted to be sure. And we dont have Thread#<init>() on the forbidden list \n\nAs far as Assert.fail, this would lose the stacktrace of the original exception? In the case of this test failing due to a thread safety issue, I think thats useful for debugging\n\nYes it will loose. I dont like RuntimeExceptions wrapping others. You can ideally do Rethrow.rethrow(ex). In tests this is I think the preferred way. You will get the original Exception in the thread stack dump, unwrapped. This is why we have Rethrow class in test framework. ",
            "date": "2014-03-17T10:03:43+0000"
        },
        {
            "id": "comment-13937623",
            "author": "Robert Muir",
            "content": "Rethrow is good: I'll use that! ",
            "date": "2014-03-17T10:05:28+0000"
        },
        {
            "id": "comment-13937672",
            "author": "Michael McCandless",
            "content": "+1\n\nI love the use of startingGun in the test  ",
            "date": "2014-03-17T11:01:23+0000"
        },
        {
            "id": "comment-13937723",
            "author": "Dawid Weiss",
            "content": "> or is the thread group inherited by the test framework? \n\nThe test suite runs in its own test group so any thread (unless explicitly assigned to another group) will inherit that group from its parent.\n ",
            "date": "2014-03-17T12:08:46+0000"
        },
        {
            "id": "comment-13938099",
            "author": "ASF subversion and git services",
            "content": "Commit 1578483 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1578483 ]\n\nLUCENE-5532: AutomatonQuery.hashCode is not thread safe ",
            "date": "2014-03-17T17:47:23+0000"
        },
        {
            "id": "comment-13938138",
            "author": "ASF subversion and git services",
            "content": "Commit 1578491 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1578491 ]\n\nLUCENE-5532: AutomatonQuery.hashCode is not thread safe ",
            "date": "2014-03-17T18:12:01+0000"
        },
        {
            "id": "comment-13938142",
            "author": "Robert Muir",
            "content": "Should I backport to 4.7.1 branch? ",
            "date": "2014-03-17T18:13:19+0000"
        },
        {
            "id": "comment-13938166",
            "author": "Steve Rowe",
            "content": "Should I backport to 4.7.1 branch?\n\n+1 ",
            "date": "2014-03-17T18:24:15+0000"
        },
        {
            "id": "comment-13938190",
            "author": "ASF subversion and git services",
            "content": "Commit 1578506 from Robert Muir in branch 'dev/branches/lucene_solr_4_7'\n[ https://svn.apache.org/r1578506 ]\n\nLUCENE-5532: AutomatonQuery.hashCode is not thread safe ",
            "date": "2014-03-17T18:46:09+0000"
        },
        {
            "id": "comment-13957760",
            "author": "Steve Rowe",
            "content": "Bulk close 4.7.1 issues ",
            "date": "2014-04-02T15:04:52+0000"
        }
    ]
}