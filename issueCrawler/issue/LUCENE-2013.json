{
    "id": "LUCENE-2013",
    "title": "QueryScorer and SpanRegexQuery are incompatible.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/highlighter"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9.1",
            "3.0"
        ],
        "affect_versions": "2.9",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Since the resolution of #LUCENE-1685, users are not supposed to rewrite their queries before submitting them to QueryScorer:\n\n------------------------------------------------------------------------\nr800796 | markrmiller | 2009-08-04 06:56:11 -0700 (Tue, 04 Aug 2009) | 1 line\n\nLUCENE-1685: The position aware SpanScorer has become the default scorer for Highlighting. The SpanScorer implementation has replaced QueryScorer and the old term highlighting QueryScorer has been renamed to QueryTermScorer. Multi-term queries are also now expanded by default. If you were previously rewritting the query for multi-term query highlighting, you should no longer do that (unless you switch to using QueryTermScorer). The SpanScorer API (now QueryScorer) has also been improved to more closely match the API of the previous QueryScorer implementation.\n------------------------------------------------------------------------\n\nThis is a great convenience for the most part, but it's causing me difficulties with SpanRegexQuerys, as the WeightedSpanTermExtractor uses Query.extractTerms() to collect the fields used in the query, but SpanRegexQuery does not implement this method, so highlighting any query with a SpanRegexQuery throws an UnsupportedOpertationException.  If this issue is circumvented, there is still the issue of SpanRegexQuery throwing an exception when someone calls its getSpans() method.\n\nI can provide the patch that I am currently using, but I'm not sure that my solution is optimal.  It adds two methods to SpanQuery: extractFields(Set<String> fields) which is equivalent to fields.add(getField()) except when MaskedFieldQuerys get involved, and mustBeRewrittenToGetSpans() which returns true for SpanQuery, false for SpanTermQuery, and is overridden in each composite SpanQuery to return a value depending on its components.  In this way SpanRegexQuery (and any other custom SpanQuerys) do not need to be adjusted.\n\nCurrently the collection of fields and non-weighted terms are done in a single step.  In the proposed patch the WeightedSpanTerm extraction from a SpanQuery proceeds in two steps.  First, if the QueryScorer's field is null, then the fields are collected from the SpanQuery using the extractFields() method.  Second the terms are collected using extractTerms(), rewriting the query for each field if mustBeRewrittenToGetSpans() returns true.",
    "attachments": {
        "LUCENE-2013.patch": "https://issues.apache.org/jira/secure/attachment/12423511/LUCENE-2013.patch",
        "lucene-2013-2009-10-28.patch": "https://issues.apache.org/jira/secure/attachment/12423493/lucene-2013-2009-10-28.patch",
        "lucene-2013-2009-10-29-0136.patch": "https://issues.apache.org/jira/secure/attachment/12423521/lucene-2013-2009-10-29-0136.patch",
        "lucene-2013-2009-10-28-2135.patch": "https://issues.apache.org/jira/secure/attachment/12423494/lucene-2013-2009-10-28-2135.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-10-28T21:14:56+0000",
            "content": "Patch for LUCENE-2013 ",
            "author": "Benjamin Keil",
            "id": "comment-12771122"
        },
        {
            "date": "2009-10-28T21:19:44+0000",
            "content": "Resolving LUCENE-1685 has caused some difficulties for non-core queries in contrib-regex and in client code. ",
            "author": "Benjamin Keil",
            "id": "comment-12771123"
        },
        {
            "date": "2009-10-28T21:37:25+0000",
            "content": "This patch does a better job of collecting fields from the queries.  The previous patch only had the desired result if there were no FieldMaskingSpanQueries, or if there was just one and it was at the very root of the hierarchy. ",
            "author": "Benjamin Keil",
            "id": "comment-12771126"
        },
        {
            "date": "2009-10-28T21:52:38+0000",
            "content": "Removed failed attempts at monospace font in description. ",
            "author": "Benjamin Keil",
            "id": "comment-12771131"
        },
        {
            "date": "2009-10-28T23:29:14+0000",
            "content": "Thanks for the report Benjamin -\n\nNot sure I like adding the methods to SpanQuerys though - \n\nhow about putting a check for regex query before the check for spanquery, and rewriting if we see it? It means adding the contrib with regex as a dependency of the highlighter, but it lets us avoid modifying any core classes. ",
            "author": "Mark Miller",
            "id": "comment-12771196"
        },
        {
            "date": "2009-10-28T23:42:57+0000",
            "content": "Here is what I would propose - with additional handling of regular regex queries if needed (havn't check yet). ",
            "author": "Mark Miller",
            "id": "comment-12771202"
        },
        {
            "date": "2009-10-29T01:38:13+0000",
            "content": "The problem with that solution is that it doesn't handle any kind of nested span queries.  Let's update the test case to use this query:\n\npublic void testSpanRegexQuery() throws Exception {\n    query = new SpanOrQuery(new SpanQuery [] \n{\n        new SpanRegexQuery(new Term(FIELD_NAME, \"ken.*\")) }\n);\n\nI've attached a counter-counter-proposal  that does not add SpanRegexQuery as a dependency of WeightedSpanTermExtractor (although the test-case still needs it ... does the build have a concept of test-only dependencies?).\n\nIt doesn't add any methods to the core classes, but this also means that no third-party queries have any way to influence their highlighting. ",
            "author": "Benjamin Keil",
            "id": "comment-12771251"
        },
        {
            "date": "2009-10-29T15:58:10+0000",
            "content": "Nice catch - I think I like this method better than the core modifications.\n\nbut this also means that no third-party queries have any way to influence their highlighting.\n\nUnfortunately, I think thats already the deal in many cases. The Highlighter is very special case - ugly, but the current state of things. We will hopefully get away from that eventually. ",
            "author": "Mark Miller",
            "id": "comment-12771458"
        },
        {
            "date": "2009-10-29T16:41:25+0000",
            "content": "Thanks Benjamin! ",
            "author": "Mark Miller",
            "id": "comment-12771469"
        },
        {
            "date": "2009-10-29T17:45:48+0000",
            "content": "Awesome, Mark.  Thank you! ",
            "author": "Benjamin Keil",
            "id": "comment-12771512"
        },
        {
            "date": "2009-10-29T18:19:50+0000",
            "content": "No problem - and we can refine if we need to for the next release - I plopped it in now to make sure at least this fix gets into 2.9.1 ",
            "author": "Mark Miller",
            "id": "comment-12771532"
        },
        {
            "date": "2009-11-02T23:53:10+0000",
            "content": "bug alert - I screwed up the backport ",
            "author": "Mark Miller",
            "id": "comment-12772763"
        },
        {
            "date": "2009-11-03T00:14:08+0000",
            "content": "Mark, does this require a 2.9.1 respin? ",
            "author": "Michael McCandless",
            "id": "comment-12772778"
        },
        {
            "date": "2009-11-03T00:17:41+0000",
            "content": "Umm - yes. Unless we want to draw a line. Its worse than the bug we fixed. Very sorry - entirely my fault. ",
            "author": "Mark Miller",
            "id": "comment-12772782"
        },
        {
            "date": "2009-11-03T00:33:03+0000",
            "content": "OK, no problem, I'll respin! ",
            "author": "Michael McCandless",
            "id": "comment-12772785"
        },
        {
            "date": "2009-11-07T14:57:31+0000",
            "content": "Bulk close all 2.9.1 issues. ",
            "author": "Michael McCandless",
            "id": "comment-12774626"
        }
    ]
}