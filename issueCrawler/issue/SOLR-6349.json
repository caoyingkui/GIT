{
    "id": "SOLR-6349",
    "title": "LocalParams for enabling/disabling individual stats",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "components": [],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Stats component currently computes all stats (except for one) every time because they are relatively cheap, and in some cases dependent on eachother for distrib computation \u2013 but if we start layering stats on other things it becomes unnecessarily expensive to compute all the stats when they just want the \"sum\" (and it will definitely become excessively verbose in the responses).  \n\nThe plan here is to use local params to make this configurable.  All of the existing stat options could be modeled as a simple boolean param, but future params (like percentiles) might take in a more complex param value...\n\nExample:\n\nstats.field={!min=true max=true percentiles='99,99.999'}price\nstats.field={!mean=true}weight",
    "attachments": {
        "SOLR-6349.patch": "https://issues.apache.org/jira/secure/attachment/12699384/SOLR-6349.patch",
        "SOLR-6349___bad_idea_broken.patch": "https://issues.apache.org/jira/secure/attachment/12674023/SOLR-6349___bad_idea_broken.patch",
        "make-data-and-queries.pl": "https://issues.apache.org/jira/secure/attachment/12700897/make-data-and-queries.pl",
        "SOLR-6349-xu.patch": "https://issues.apache.org/jira/secure/attachment/12674904/SOLR-6349-xu.patch",
        "SOLR-6349-tflobbe.patch": "https://issues.apache.org/jira/secure/attachment/12674830/SOLR-6349-tflobbe.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14091534",
            "date": "2014-08-09T01:19:47+0000",
            "content": "\nProposed implementation...\n\n\n\tChange StatsValuesFactory.createStatsValues (and the constructors for the various StatsValues impls) to take in the local params from the stats.field\n\teach StatsValue impl should validate the stat params it's asked to compute\n\tall stats should default to disabled, but we need a special backcompat case that if no stats are specified in local param, all current default stats are computed\n\t\n\t\twe can't be lazy and just check 0==localparams.size() - need to check the actuals stats params because of local params like \"ex\" and \"key\"\n\t\n\t\n\tfor the distributed logic where things get a bit more complex (ie: distrib mean needs sum+count from all shards; distrib stddev needs sum+count+sumOfSquares from each shard) we can go two possible routes:\n\t\n\t\tA) StatsValue needs a new method to be asked by StatsComponent what local params it needs when sending shard requests\n\t\t\n\t\t\tin this case the localparams of the shard requests have diff localparams and the processing of those shard stats requests can be ignorant of the fact that they are distributed\n\t\t\n\t\t\n\t\tB) StatsValue (via the factory method) needs to be informed when it's computing stats for an \"isShard\" request, so it can internally decide what per-shard values to return based on the input\n\t\t\n\t\t\tin this case, the localparams are not modified per shard, but since \"isShard=true\" the StatsValue may return diff metrics then the ones requested so that the coordinator gets what it needs to aggregate.\n\t\t\n\t\t\n\t\tI think i'm leaning towards option \"B\" - particularly because it simplifies the idea of how to deal with situations like \"percentiles\" where the per-shard info isn't really a stat that should have it's own localparma folks migth ask for.\n\t\n\t\n\tdeprecate stats.calcdistinct but use it as a default for the new corresponding localparam(s)\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14165846",
            "date": "2014-10-09T22:07:15+0000",
            "content": "\nI've been trying to work on this off and on over the psat week and i keep running into problems.\n\nthe attached \"SOLR-6349___bad_idea_broken.patch\" shows the (lack of) \"progress\" made and should stand as a warning sign of the problems of going down this particular route.\n\nUltimately i kept running into 2 problems with trying to modify the existing code in AbstractStatsValues & its subclasses...\n\n\n\tparsing the localparams to know when the (legacy) default set of stats should be computed, vs specific individual stats\n\t\n\t\tthis got very hairy very fast because of the superclass/subclass relationship \u2013 each class needs properties to track what it's suppose to be computing (ie: \"boolean needCount\"), and the default initalization of those properties needs to be based on wether any specific propeties are requested (ie: \"count\" in localparams), but to do that properly it means the superclass can't init it's properties until giving the subclass a chance to check if any of it's specific properties have been requested.\n\t\n\t\n\tstats depending on other stats\n\t\n\t\tsubclasses need to be able to override the init logic for the superclasses properties based on the subclass specific stats (ie: numeric \"mean\" and \"stddev\" stats both depends on the generic \"count\" stat)\n\t\tthere's a different between neding to compute a stat locally (ie: count->mean) and wether we should return that stat to the caller.\n\t\t\n\t\t\tfor single node \"mean\" computation, we depend on the local computation of \"sum\" and \"count\" but we don't want to return either \"sum\" or \"count\"\n\t\t\tfor distributed \"mean\": each shard needs to compute & return \"count\" and \"sum\" but we don't need a per-shard \"mean\"; the coordinator needs to collect & combine all the (per-shard) \"count\" and \"sum\" stats to produce a \"mean\" that will be returned to the client, but it shouldn't return the combined \"count\" and \"sum\"\n\t\t\n\t\t\n\t\n\t\n\n\n\n...which is why i ultimately abandoned this current patch.\n\n\n\nI have a rough idea forming in the back of my head about a better way to solve this problem via a bit of an overhaul to the internals of AbstractStatsValues ... trying to outline what i'm thinking...\n\n\n\tkeep the basic contract of \"StatsValues\" intact\n\tkeep the AbstractStatsValues and subclasses\n\t\n\t\tthese should focus only on the differences in the data type of the source data (ie: Number vs Date vs String vs Enum)\n\t\n\t\n\trefactor the meat of how each stat is computed into smaller \"Stats\" classes (ie: \"StatsMean\", \"StatsSum\", \"StatsCount\").\n\t\n\t\tthese should be construct based on looping over the local params looking up the keys in some map (SPI?)\n\t\teach \"Stat\" can ask the StatsValues holding it to construct other dependent Stats as needed (\"StatsMean\" would ask for a StatsSum and StatsCount\n\t\t\n\t\t\tif those already exist (because they were explicitly requested or because some other Stat also needed them) it would be given a ref to the existing instances, else StatsValues would create a new instance\n\t\t\n\t\t\n\t\teach \"Stat\" will have some boolean state indicating if it should write data in the response\n\t\t\n\t\t\tStatsValues would set that state to true on a Stats instance only if it was explicitly requested via local param\n\t\t\tStats can forcible set that state to true on other stats, notably when the request \"isShard\" (ie: StatsMean can choose not to write anything to the response on an \"isShard\" request, but can tell the StatsSum and StatsCount objects that they must)\n\t\t\n\t\t\n\t\n\t\n\n\n\n\nI'm going to sit on this for a few days, focus on other things, and then come back and revisit it with fresh eyes and see if i can think of anything better (or if anyone else comes along with a better suggestion) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14165856",
            "date": "2014-10-09T22:13:54+0000",
            "content": "\nSide note...\n\none good bit of discovery that came out of my failed patch was a realization of why the StatsComponent currently doesn't write out any stats values in some cases \u2013 as discussed in this comment in SOLR-6351...\n\nhttps://issues.apache.org/jira/browse/SOLR-6351?focusedCommentId=14160658&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14160658\n\n\n...\nmy thinking, was that:\n\n\n\tthe behavior when hanging stats off pivots should mirror that of regular stats\n\tif you ask for a stats block , you should always get that block, so the client doesn't have to conditionally check if it's there before looking at the values.\n\tthe included stat values matter even if no doc has the stats.field, becuase one of the stats is in fact \"missing\" and that if you ask for stats, you should be able to look at that missing count. (and it should match up with your doc set size if the field is completely missing, etc...)\n\n\n\nbut looking at an example of this now, i see that for simple field stats (w/o pivots), that's not even how it currently works \u2013 consider this URL using hte example data...\n\nhttp://localhost:8983/solr/select?rows=0&q=name:utf&stats.field=foo_d&stats.field=popularity&stats=true\n...\n\nI found that the source of this behavior comes from this code in StatsComponent...\n\n\n\nif (isShard == true || (Long) stv.get(\"count\") > 0) {\n  stats_fields.add(statsField.getOutputKey(), stv);\n} else {\n  stats_fields.add(statsField.getOutputKey(), null);\n}\n\n\n\n...obviously if we're going to start making stats optional, we can't make the response data conditional on wether \"count\" is greater then 0, because there might not be a count.\n\nSo we'll need to revamp this, and i'm more and more convinced my comment in SOLR-6351 is the right way to go...\n\n\nI thought (and still think) that the \"correct\" behavior for this query would be to get a stats block back for those fields where things like min/max/mean are \"null\", count==0, and missing=1 ... but that's not how it currently works.\n\n\n "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14171405",
            "date": "2014-10-14T19:41:57+0000",
            "content": "What about doing something like this: \nStatsFields knows about the stats to calculate and the stats include in response.\nFor the basic \u201cstandalone\u201d statistics, those sets are equal, but when a statistic requires others, the \u201ccalculate\u201d set includes the depended stats.\nAll stats in the \u201ccalculate\u201d set are calculated. \nAll stats in the \u201cinclude in response\u201d set are responded. \nIn the case of a shard request, all stats in the \u201ccalculate\u201d set are also included in the response. \nStatsField gets the local params from the request, the StatsValues ask the statsField instance before calculating a stat / including in the response.\nThe bad part of it is that all the stats need the \n\nif (statsField.calculateStat(X)) {\n      X = calculateX()\n}\n\n\nThe good part is that we don\u2019t need to create classes for every single stat, that may have to be generic in some way depending on the field type.\nI\u2019m uploading a patch with the idea, it\u2019s not even close to complete, just to show the idea (see only the NumericStatsValues implementation).\nThere are tests failing in StatsComponent that I haven\u2019t looked at yet. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14171415",
            "date": "2014-10-14T19:49:51+0000",
            "content": "Sorry, this is the correct version of the patch "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14171527",
            "date": "2014-10-14T21:06:39+0000",
            "content": "The failing tests were related to the fact that I now include stats even for count=0. For now I modified them to pass, but should be fixed based on what we decide to do in that case.\nI added some more tests, all for numeric stats for now. "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14171904",
            "date": "2014-10-15T02:30:59+0000",
            "content": "+1 for Tomas's idea.\n\nI tried to improve it a little bit by using bit wise operation, but no big difference.\nAnd modified the Individual test in Tomas's patch, which basically test all combinations of all individual stats.  "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14173931",
            "date": "2014-10-16T16:49:57+0000",
            "content": "Thanks Xu\nI tried to improve it a little bit by using bit wise operation, but no big difference.\nYes, my understanding is that there should not be much of a difference in this case. I think EnumSet is a bit more clear\n\nChris Hostetter (Unused) Any thoughts on this path? I'll change the other stat types soon "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14174476",
            "date": "2014-10-16T23:42:56+0000",
            "content": "\nTomas: thanks a lot for working on this.\n\nI have mixed feelings about your approach...\n\n\n\t-1 to the way StatsField nows has to directly know about every possible stat for every possible data type, & the stat dependency logic is spread between the StatsValue classes and the new Enum in StatsField.\n\t-0 to making it harder to add new types of stats in the future (one of the nice side effects of my hypothetical idea was that if we did go an SPI route or something like that it would have made it trivial for people to add new types of stats as plugins, even depending on other stats for distributed logic)\n\t-1 for the need to have that ...\n\nif (statsField.calculateStat(X)) { \n  X = calculateX() \n}\n\n\n...pattern you mentioned in so much code \u2013 that's one of the reasons i abandomed my last patch (and before i abandoned it, i was focusingon trying to ensure that it was at least always a comarison with a final boolean in the hops that the JVM could optimize the if away)\n\t+99 to the fact that you have something that actually works as opposed to my half-thought out idea that i never tried to implement.\n\n\n\n\nOn balance, i think we should move forward with your idea \u2013 if nothing else, then as a straw man to help us flesh out the exact expected behavior & write more tests. If down the road we come up with a better internal implementation, then so be it.\n\nA few specific comments on what you've got so far...\n\n\n\tkind of weird the way your patch's API uses a variety of Stat[], EnumSet<Stat> and Set<Stat> ... probably best just to use EnumSet everywhere?\n\tbe careful about your \"statsInResponse.isEmpty() || statsInResponse.contains(stat)\" logic ... we need to make sure we don't break existing behavior for things like stats.field=foo&stats.calcDistinct=true\n\t\n\t\tspeaking of calcDistinct, it needs to be accounted for in your new enum so we can start supporting it as a localparam and deprecate the top level stats.calcDistinct, maybe along the lines of...\n\nif (statsInResponse.isEmpty()) {\n  statsInResponse.addAll(LEGACY_DEFAULT_STATS); // static final EnumSet\n  statsToCalculate.addAll(LEGACY_DEFAULT_STATS_DEPENDS); // static {} built EnumSet looping over LEGACY_DEFAULT_STATS \n}\nif (params.getFieldBool(f, STATS_CALCDISTINCT, false)) { // top level req params\n  statsInResponse.add(Stat.calcDistinct);\n  statsToCalculate.add(Stat.calcDistinct);\n}\n\n\n\t\n\t\n\ti'm not positive - but i don't think your patch currently accounts for the idea that in a distributed request, we may need to calculate & return a stats dependencies, but not compute & return the stat itself (ie: for mean, we need each shard to compute a sum & count, but we don't wnat each shard to compute or return the per-shard mean)\n\t\n\t\twe should be abl to easily test this behavior by \"faking\" an isShard request to a single node and asserting which keys we do/don't get back\n\t\n\t\n\trather then a static dependsOn(Stat) method with a case statement, why not make it a property of of the enum objects themselves?\n\t\n\t\tmaybe something like this, which also shows one idea for dealing with the \"stat doesn't depend on itself in distributed calculations\"...\n\n  static enum Stat {\n    min(true),\n    max(true),\n    missing(true),\n    sum(true),\n    count(true),\n    mean(false, sum, count),\n    sumOfSquares(true),\n    stddev(false,sum,count,sumOfSquares);\n    \n    private final List<Stat> distribDeps;\n\n    Stat(boolean selfDep, Stat... deps) {\n      distribDeps = new ArrayList<Stat>(deps.length+1);\n      distribDeps.addAll(Arrays.asList(deps));\n      if (selfDep) { \n        distribDeps.add(this);\n      }\n    }\n    public EnumSet<Stat> getDistribDeps() {\n      return EnumSet.copyOf(this.distribDeps);\n    }\n  }\n\n\n\t\n\t\n\tplease help me fight against the trend of distributed tests that only do comparisons against single node w/o asserting specific results, ie...\n\n+    // only ask for \"min\" and \"mean\"\n+    query(\"q\",\"*:*\", \"sort\",i1+\" desc\", \"stats\", \"true\",\n+          \"stats.field\", \"{!min=true mean=true}\" + i1);\n+    \n+    // only ask for \"min\", \"mean\" and \"stddev\"\n+    query(\"q\",\"*:*\", \"sort\",i1+\" desc\", \"stats\", \"true\",\n+          \"stats.field\", \"{!min=true mean=true stddev=true}\" + i1);\n+    \n+    String[] stats = new String[]{\"min\", \"max\", \"sum\", \"sumOfSquares\", \"stddev\", \"mean\", \"missing\", \"count\"};\n+    \n+    for (String stat:stats) {\n+      for (String innerStat:stats) {\n+        query(\"q\",\"*:*\", \"sort\",i1+\" desc\", \"stats\", \"true\",\n+            \"stats.field\", \"{!\" + stat + \"=true \" + innerStat + \"=true}\" + i1);\n+      }\n+    }\n+    \n\n\n...all of those can & should include xpaths asserting that the count() of keys in the stats is only N, and that the expected keys exist (and in the case of the first 2: we should be able to assert the expected value)\n\n\n\n\n\nThe failing tests were related to the fact that I now include stats even for count=0. For now I modified them to pass, but should be fixed based on what we decide to do in that case.\n\nWhat's your opinion on this?  mine hasn't really changed...\n\n\n... the \"correct\" behavior for this query would be to get a stats block back for those fields where things like min/max/mean are \"null\", count==0, and missing=1 ...\n\ntht would be really easy to do \u2013 the only minor hitch is that i think the code right now (assuming count==0) winds up giving you things like -/+Infinity for min/max instead of null \u2013 so we'd have to start tracking a boolean of wether we'd collected any values at all.\n "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-14177373",
            "date": "2014-10-20T19:44:47+0000",
            "content": "I'll iterate this patch to improve what you are mentioning. I'll probably won't have time this week to work on this, so I'll take it next week, or if someone else wants to continue, please feel free. "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14179477",
            "date": "2014-10-22T02:09:27+0000",
            "content": "Made some adjustments based on Hoss's comments.\n\n1. Only use EnumSet now.\n2. Move calcDistinct into Enum.  \n     But the question is, do we consider calcDistinct is a local parameter like min/max, or it should be the top-level parameter. (Which keeps the existing behavior for things like stats.field=foo&stats.calcDistinct=true)\n\n3. Support distributed request, add faking test. \n4. Remove static dependsOn(Stat) methods, use Enum property instead. \n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14180712",
            "date": "2014-10-22T22:57:13+0000",
            "content": "Xu:\n\nI havne't had a chance to review your patch, but it sounds like awesome progress \u2013 in respose to your specific question...\n\ndo we consider calcDistinct is a local parameter like min/max, or it should be the top-level parameter. (Which keeps the existing behavior for things like stats.field=foo&stats.calcDistinct=true)\n\n...the key is that we need to support both.  as i mentioned previously...\n\ndeprecate stats.calcdistinct but use it as a default for the new corresponding localparam(s)\n\nand note the psuedo code i postd in my last comment...\n\n\nif (statsInResponse.isEmpty()) {\n  statsInResponse.addAll(LEGACY_DEFAULT_STATS); // static final EnumSet\n  statsToCalculate.addAll(LEGACY_DEFAULT_STATS_DEPENDS); // static {} built EnumSet looping over LEGACY_DEFAULT_STATS \n}\nif (params.getFieldBool(f, STATS_CALCDISTINCT, false)) { // top level req params\n  statsInResponse.add(Stat.calcDistinct);\n  statsToCalculate.add(Stat.calcDistinct);\n}\n\n\n\nto give some concrete examples, if we assume that \"foo\" is a numeric field, (where stats.field=foo currently returns min/max/missing/sum/count/mean/sumOfSquares/stddev) then these are the results you should get in various situations...\n\n\n\n1) stats.field=foo\nor stats.field=foo&stats.calcDistinct=false\nor stats.field=foo&f.foo.stats.calcDistinct=false\nor stats.field={!min=true max=true missing=true sum=true count=true mean=true sumOfSquares=true stddev=true}foo\nor stats.field={!min=true max=true missing=true sum=true count=true mean=true sumOfSquares=true stddev=true}foo&f.foo.stats.calcDistinct=false\nor stats.field={!min=true max=true missing=true sum=true count=true mean=true sumOfSquares=true stddev=true calcDistinct=false}foo&f.foo.stats.calcDistinct=true\n\n=> min + max + missing + sum + count + mean + sumOfSquares + stddev\n\n----\n\n2) stats.field=foo&stats.calcDistinct=true\nor stats.field=foo&f.foo.stats.calcDistinct=true\nor stats.field={!min=true max=true missing=true sum=true count=true mean=true sumOfSquares=true stddev=true calcDistinct=true}foo\nor stats.field={!min=true max=true missing=true sum=true count=true mean=true sumOfSquares=true stddev=true calcDistinct=true}foostats.calcDistinct=false\nor stats.field={!min=true max=true missing=true sum=true count=true mean=true sumOfSquares=true stddev=true calcDistinct=true}foo&f.foo.stats.calcDistinct=false\n\n=> min + max + missing + sum + count + mean + sumOfSquares + stddev + calcDistinct\n\n----\n\n3) stats.field={!calcDistinct=true}foo\nor stats.field={!calcDistinct=true}foo&stats.calcDistinct=false\nor stats.field={!calcDistinct=true}foo&f.foo.stats.calcDistinct=false\n\n=> calcDistinct\n\n----\n\n3) stats.field={!min=true}foo&stats.calcDistinct=true\nor stats.field={!min=true calcDistinct=true}foo&stats.calcDistinct=false\nor stats.field={!min=true calcDistinct=true}foo&f.foo.stats.calcDistinct=false\n\n=> min + calcDistinct\n\n\n\n\ndoes that make sense? "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14180718",
            "date": "2014-10-22T23:06:03+0000",
            "content": "Thanks so much, totally agree.\n\n I will try to update Tomas's change and tests this evening.  "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14181119",
            "date": "2014-10-23T08:20:30+0000",
            "content": "Super naive implementation, but should work. \n\nAdded more tests around calcDistinct, basically tests every case in the Hoss's comment.\n "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14182307",
            "date": "2014-10-24T02:03:44+0000",
            "content": "Updated:\n1. Use lower case calcdistinct in local parameters, as the same with the one in top level parameter.\n2. Clean unneeded methods in UnInvertedField class.\n\nPass all tests. "
        },
        {
            "author": "Oliver Mannion",
            "id": "comment-14273607",
            "date": "2015-01-12T13:51:34+0000",
            "content": "Can this patch allow output of countDistinct but not distinctValues? We have this requirement, as the distinctValues field is not needed and its inclusion increases the response size dramatically (to the point where it becomes too slow to process).  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14273832",
            "date": "2015-01-12T17:47:32+0000",
            "content": "Can this patch allow output of countDistinct but not distinctValues?\n\ni don't think we should tackle that as part of this issue - it's already fairly complicated w/o introducing new permutations of options.\n\ni think the best approach would be to leave \"calcDistinct\" alone as it is now but deprecate/discourage it andmove towards adding an entirely new stats option for computing an aproximated count using hyperloglog (i opened a new issue for this: SOLR-6968) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14325206",
            "date": "2015-02-18T00:40:04+0000",
            "content": "\nStarting to get back into this, here's a quick checkpoint of some small progress\n\n\nStep #1: This new patch brings Xu's latest patch up to date with trunk using the minimal changes that seemed to work \u2013 in particular: I haven't started really digging into the code changes other then getting things to compile & tests to pass.\n\nStep #2...\n\nMy main focus for now is making sure the tests are rock solid & all inclusive so we can then iterate on the code changes (see early comments about my cocerns with spreading hte logic arround).  Only 2 noticable changes in this patch...\n\n\n\tFixed FacetPivotSmallTest.testPivotFacetStatsUnsortedTagged\n\t\n\t\twas prematurely specifying 'mean=true' but then trying to assert that all stats were returned\n\t\tbeefed this up to also assert that it got an expected number of stats - if we add more stats in the future, this will be a canary that the test needs updated to assert the correct values for these new stats.\n\t\n\t\n\n\n\n\n\tStatsComponentTest\n\t\n\t\tadded more asserts to the 3 testFieldStatisticsResults_TYPE_FieldAlwaysMissing to ensure expected values for all stats (when there is nothing to compute stats on)...\n\n// numerics & strings & dates\nmin=null\nmax=null\n// just numerics\nsum=0.0\nsumOfSquares=0.0\nstddev=0.0\nmean=NaN\n\n\n\t\t\n\t\t\tthese are based on the current behavior of the code ... my initial gut reaction was that they should all be null, but a quick bit of research says that in maths the \"empty sum\" is defined as \"0\" \u2013 if you start with that premise, then the values for the rest seems correct to me, but i'm definitely interested in knowing if there are contrary opinions (is NaN better?)\n\t\t\n\t\t\n\t\tincluded \"expected number of stats\" asserts in these tests as well - more canary's if/when future stats are added.\n\t\n\t\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14326762",
            "date": "2015-02-18T23:54:35+0000",
            "content": "some mor progress auditing & enhancing the test changes in this patch...\n\n\n\tSolrTestCaseJ4\n\t\n\t\trevert unneccssary whitespace change\n\t\n\t\n\tTestDistributedSearch\n\t\n\t\tmake new test queries include hard asserts on the values returned\n\t\t\n\t\t\teven when looping over permutations of multiple stats, assert we don't get too many diff stats back\n\t\t\tthis also asserts that SolrJ is well behalved for these partial stat requests (ie: 'null' is returned for the stats we didn't ask for)\n\t\t\n\t\t\n\t\tadded a request + asserts of specific stats over a field that doesn't exist\n\t\n\t\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14334180",
            "date": "2015-02-24T00:51:00+0000",
            "content": "some more udpates to the patch...\n\n\n\tStatsComponentTest\n\t\n\t\tundid an odd calcDistinct param change in testFieldStatisticsDocValuesAndMultiValuedIntegerFacetStats that shouldn't affect the test goal\n\t\t\n\t\t\twant to ensure the behavior in this test isn't broken by changes\n\t\t\n\t\t\n\t\tfixed testFieldStatisticsDocValuesAndMultiValuedDouble\n\t\t\n\t\t\twas doing stats.field twice in same request diff ways, but only checking one\n\t\t\tchanged to do 2 explicit requests and assert results are the same\n\t\t\tadded in canary assert for future numeric stats\n\t\t\n\t\t\n\t\ttestIndividualStatLocalParams\n\t\t\n\t\t\tadded a canary assert to protect us against new stats in the future w/o updating the test\n\t\t\t\n\t\t\t\tcanary helped catch that we weren't testing calcdistinct in these permutations\n\t\t\t\n\t\t\t\n\t\t\tadded some sanity checks of localparams with 'false' values inspired by bug i found in testCalcDistinctStats\n\t\t\t\n\t\t\t\tsee question & nocommit (below)\n\t\t\t\n\t\t\t\n\t\t\tadded comment explaining point of isShard queries as best i understanding, see question & nocommit (below)\n\t\t\tfixed asserts to play nice with calcdistinct excentricities\n\t\t\n\t\t\n\t\titerateParaCombination\n\t\t\n\t\t\tkind of hard to understand what this is doing and how it works because of recursive nature\n\t\t\tdefinitely need to replace magic number \"8\" since that is brittle against future stats and already doesn't jive with num of legal Stat params (missing calcdistinct)\n\t\t\tin general, i want to refactor this to replace it with commons-math's Combinations class - i'll look into that tomorow\n\t\t\n\t\t\n\t\ttestCalcDistinctStats\n\t\t\n\t\t\tpart of the importance here is in the equivilence relationships - so i refactored each of the equivilent asesrt conditions to be a single assert inside a loop over the params.\n\t\t\t\n\t\t\t\tthis helps protect us against someone later thinking it's okay to change one assert w/o changing all of the equivilences\n\t\t\t\n\t\t\t\n\t\t\talso simplified asserts to be less brittle: assert if expected stat keys are in response or not \u2013 not number of stat keys returned (which might change in future if more default stats added \u2013 in the case of these asserts, that isn't really relevant, what we care about here is the behavior of interaction of the various ways to request calcdistinct)\n\t\t\tadded some more permutations to each of the equivilences sets\n\t\t\t\n\t\t\t\tthis lead to discovring a semantics question so far undiscussed as far as what if only one stat is specified in a local param, but it's value is 'false' (see below)\n\t\t\t\n\t\t\t\n\t\t\tfixed some mistakes in formatting params (eg: \"f.a_i.stats.calcdistinct=false)\"=\"true\")\n\t\t\tthese changes let me eliminate the unused expectedStats and expectedType maps from this method (there were virtually unused cut/paste cruft prior to these changes anyway)\n\t\t\n\t\t\n\t\n\t\n\tTestDistributedSearch\n\t\n\t\tadded some asserts that the (distrib) handling of calcdistinct works a variety of ways\n\t\n\t\n\tDistributedFacetPivotSmallTest\n\t\n\t\tsmall update to assert that when stats hang off pivots the local params correctly control which stats are returned.\n\t\n\t\n\n\n\n\n\nNew Questions...\n\n\n\tsee nocommit in StatsComponentTest.testIndividualStatLocalParams - why the double loop here?\n\n   // whitebox test: explicitly ask for isShard=true with an individual stat\n   //\n   // :nocommit: why loop over every stat to get it's deps and then loop over them? ...\n   // ... isn't it enough to loop over the set of all known stats?\n   for (Stat statAsk:expectedStats.keySet()) {\n     EnumSet <Stat> statAskEvaluate = statAsk.getDistribDeps();\n\n     for (Stat stat : statAskEvaluate){\n\n\n\n\n\n\n\thow should these two queries behave...\n\na) stats = true & stats.field = {!key=k min='false'}a_i\n\nb) stats = true & stats.field = {!key=k min='false'}a_i & stats.calcdistinct = true\n\n\n...my gut says that for (a) the stats result set should be completley empty; and for (b) only countDistinct and distinctValues should be returned; \u2013 because in both cases because the use of localparams regardless of values should indicate that the implicit set of default stats should be ignored, and only explicitly requested stats should be returned \u2013 but the only explicity mentioned stat via localparams is deliberately disabled with 'false'.  at the moment however, both of these cases returns all of the implicit default stats (see nocommits in tests) \u2013 we'll need to fix this\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14335620",
            "date": "2015-02-24T23:00:22+0000",
            "content": "\nin general, i want to refactor this to replace it with commons-math's Combinations class - i'll look into that tomorow\n\nThis patch replaces the confusing (to me) recursive method for testing all possible combinations of params with simple iteration using commons-math's Combinations iterator.\n\nalso new in this patch: tweaks to DistributedFacetPivotSmallAdvancedTest to assert that when stats hang off pivots the local params correctly control which stats are returned ... even when refinement happens (this test already forces that condition). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14337442",
            "date": "2015-02-25T23:21:43+0000",
            "content": "SOLR-6349\n\n\nI did a bit of crude benchmarking this morning with the following two uses cases in mind:\n\n\tuser currently asks for stats on fields, cares about all 8 of the stats\n\tuser currently asks for stats on fields, only cares about 4of8 of them\n\n\n\nthe attached script shows my methodology \u2013 it generates a CSV file with 10 million docs + 2 bash files that use curl to hit Solr with 300 : query urls using randomly selected stats.field.  the sequence of stat field requests are identicle between the 2 bash files, but in one URLs include localparams to only compute min/max/mean/stddev for the field.  \n\nHere's the results...\n\n\nNOW     BASELINE: 126.008 seconds (ie: all stats ... queries-old.sh)\n\nPATCH  ALL STATS: 133.571 seconds (6% slower ... queries-old.sh)\nPATCH FOUR STATS: 130.515 seconds (3% slower ... queries-new.sh)\n\n\n\nSo not only has asking for all stats on a field gotten slower with this patch, but even asking for only 4 of the 8 possible numeric stats on a field is still slower then the existing code when all of them are returned.\n\nA key thing to note here is that this is the total wall clock time from the perspective of the client, including reading the response from Solr.  Not only are we (in theory) computing only only 1/2 as much math per request in the \"FOUR STATS\" situation, the XML response size of each query is only ~3/4ths the size of the original queryies.  This should mean a lot less time both in processing the results and in writing/reading the data over the wire ... and yet instead of seeing some perf improvements, we see performance suffer.\n\nI suspect a key factor here goes back to one of the concerns i mentioned earlier...\n\n\n\nif (statsField.calculateStat(X)) { \n  X = calculateX() \n}\n\n\n...pattern you mentioned in so much code - that's one of the reasons i abandomed my last patch (and before i abandoned it, i was focusingon trying to ensure that it was at least always a comarison with a final boolean in the hops that the JVM could optimize the if away)\n\n...the cumulative overhead of those method calls for every possible stat is probably counter acting any gains made by reducing the stats that are computed.\n\n\n\nMy next step is to focus on fixing the current patch code so the few remaining nocommit assertions in the test start passing (see earlier comments re \"min='false'\") \u2013 but once the behavior is locked down and solid i think we really need to re-assess and re-factor the code to see some perf gains before there's any point in moving towards adding this feature.\n\n(NOTE: if anyone spots any flaws in my little mini-benchmark, please speak up \u2013 i would be very happy to be wrong)\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14339444",
            "date": "2015-02-27T00:10:19+0000",
            "content": "Two steps forward, one step back: I fixed the bugs i mentioned before dealing with localparam stats that are all 'false', and cleaned up a bit of the stats returned/calculated logic \u2013 this lead me to understanding that the \"whitebox\" isShard test i was confused by before was definitely broken (see below) ... i tried to use SOLR-7147 to do a true whitebox test and inspect real shard requests/responses, but got blocked by some bugs in the test framework\n\nFull notes about changes in this patch...\n\n\n\tStatsField\n\t\n\t\tadd Set<Stat> DEFAULT_STATS\n\t\tpopulateStatsRequested(...)\n\t\t\n\t\t\trename to populateStatsSets() and eliminate args \u2013 method is already mucking with other state directly\n\t\t\tuse DEFAULT_STATS if and only if there are no stat localparams (even if false)\n\t\t\n\t\t\n\t\tcalculateStats()\n\t\t\n\t\t\tfix to not assume anything about the empty set - empty set means calculate nothing\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tStatsComponentTest\n\t\n\t\ttestIndividualStatLocalParams\n\t\t\n\t\t\tmy review & bug fixing in StatsField confirmed that the whitebox testing here wasn bogus - the types of \"isShard=true\" requests simulated here don't actaully look like what a real shard request looks like.  This test was asking for each of the individual stats that appear as in getDistribDeps() of any stat in an isShard request and confirmed that only that single stat was returned \u2013 but the actual code doesn't ask for individual distribDeps that way.  it asks for the oroginally requested stat and trusts that the isShard indication will cause only the deps to be returned\n\t\t\tfixed the whitebox queries to simulate the real requests for every stats, and assert all deps come back - even if the original request excluded those deps\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\tTestDistributedSearch\n\t\n\t\tbeefed up testing of distrib requests where the deps of a stat requested by the client are also explicitly excluded by the client (ie: \"mean=true sum=false count=false\"\n\t\tstarted down the path of leveraging SOLR-7147 to inspect the shard req/rsp to ensure we only get what we need - but got blocked by SOLR-7171 (see nocommits)\n\t\n\t\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14346341",
            "date": "2015-03-04T03:50:28+0000",
            "content": "Well, after wrapping up SOLR-7171, i came back to this patch and started making the following improvements...\n\nchanges in this patch\n\n\tTestDistributedSearch\n\t\n\t\tbeefed up inspection of shard responses now that SOLR-7171 is fixed\n\t\n\t\n\tStatsValuesFactory\n\t\n\t\tintroduce new final booleans to track the stats we want to encourage JIT optimization\n\t\tfix some inconsistencies in when/if various stats are returned to clients depending on values seen (notably with Dates before the epoch)\n\t\n\t\n\tStatsComponentTest\n\t\n\t\ttestFieldStatisticsResultsDateFieldAlwaysMissing\n\t\t\n\t\t\tthe set of stats that we've returned for Dates in the past has been inconsistent depending on if there were \"non-missing\" docs ... updated this test to expect everything\n\t\t\n\t\t\n\t\n\t\n\n\n\n...after making these changes, i went to re-run that mini-benchmark i wrote before, and in looking at it realized i made a serious conceptual mistake...\n\n\n\n\tuser currently asks for stats on fields, only cares about 4of8 of them\n...\n...the sequence of stat field requests are identicle between the 2 bash files, but in one URLs include localparams to only compute min/max/mean/stddev for the field. \n\n\n\n...the problem being that because these are distributed requests, the new style requests still require that sum, count & sumOfSquares be computed on every shard (in addition to the min & max) ... the final responses to the query client are smaller, but we're still computing virtually the same amount of math calculations and each shard is returning virtually the same amount of data.  (the only calculation \"skipped\" is the \"missing\" stat which is actually irrelevant in this test because every doc has a value in every field)\n\nSo i did a quick tweak to make-data-and-queries.pl so that the only stats requested are \"min\" & \"mean\" \u2013 so the shards only have to compute min, sum, count.  With that change, and the new patch, the numbers look much better...\n\n\n        pre-patch        with patch       with patch \nRun #   old style        old style        new style\n        (all stats)      (all stats)      (2 stats, 3 deps)\n  1      135.7 sec        134.4 sec        109.9 sec\n  2      130.1 sec        132.4 sec        109.0 sec\n  3      132.3 sec        132.8 sec        108.2 sec\ntotal    398.1 sec        399.6 sec        327.1 sec\n                        00.3 % slower    17.8 % faster\n\n\n\n...so these numbers are a lot more promising.\n\nthis also makes me want to run some more perf tests, on more permutations of stats - in particular i want to check the non-cloud mode, make sure we haven't slowed that down. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14349189",
            "date": "2015-03-05T18:14:40+0000",
            "content": "\nHere's an updated version of make-data-and-queries.pl that:\n\n\tintroduces some missing values into each field\n\tonly hits port 8983 so singled node & cloud can be tested\n\ttests more diff types of individual stats and pairs of stats\n\n\n\nMy results are below, these numbers make me feel pretty good about the state of the code (although i'm perplexed as to why \"min\" is consistently slower then other stats that are more numerically complicated like mean & sum).\n\n\n## single node (seconds)\n        trunk    patch...\nRun      all      all      mean   mean_stdv  min      sum    sum_miss\n  1     168.22   165.99   112.89   114.39   137.12   107.83   108.01\n  2     167.63   166.31   113.28   114.29   136.58   107.72   108.63\n  3     168.83   167.45   112.73   114.50   132.84   109.06   108.91\ntotal   504.68   499.75   338.90   343.18   406.54   324.61   325.55\n\n\n## two node cloud (seconds)\n        trunk    patch...\nRun      all      all      mean   mean_stdv  min      sum    sum_miss\n  1     115.66   115.32    70.27    73.57    90.72    68.06    68.97\n  2     111.68   111.16    70.27    71.20    89.62    68.82    67.53\n  3     112.16   112.85    70.38    70.47    91.48    68.39    70.00\ntotal   339.50   339.33   210.92   215.24   271.82   205.27   206.50\n\n\n\n...my next steps:\n\n\n\tanother pass of code review (i kind of glossed over it when doing the refactoring\n\tmore tests of other field types\n\t\n\t\tcurrent patch has detailed tests of individual stats on nmeric fields, but i remember thinking the string,enum, and date code looked brittle and i supsect they have bugs and NPEs when computing individual stats\n\t\n\t\n\tjavadocs\n\tpoke around \"min\" (and \"max\") and see if i can figure out why they are slow (probably tangential to this issue, may punt)\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14353898",
            "date": "2015-03-09T23:43:45+0000",
            "content": "\nbut i remember thinking the string,enum, and date code looked brittle ...\n\n...looks i already fixed most of what i remember being worried about in my last patch?  reviewing this did however job my memory about SOLR-6682 - so i've folded the patch from that issue into here\n\nUpdates since last patch...\n\n\n\tIncorporated SOLR-6682 in here to help ensure good test coverage of enum stats\n\tTestDistributedSearch\n\t\n\t\tbeef up testing of stat subset permutations on other field types\n\t\tadd some trivial sanity check asserts to the test queries added by SOLR-6682\n\t\n\t\n\tStatsComponentTest\n\t\n\t\tremoved nocommit reminders to sanity check stat values when no values available (haven't seen any complaints)\n\t\tcleaned up some bogus assert msgs from the SOLR-6682 patch\n\t\n\t\n\tStatsValuesFactory\n\t\n\t\tEnumStatsValues.updateMinMax\n\t\t\n\t\t\tmy previous code had a bug here using computeMin to update the max stat\n\t\t\n\t\t\n\t\n\t\n\tStatsField\n\t\n\t\tclean up some lingering nocommits - mostly related to javadocs\n\t\n\t\n\tadd SHA1, LICENSE, and NOTICE for new commons-math3 dependency\n\n\n\n...i think this is good to go .. going to do another total review of things and aim to commit tomorow. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14355077",
            "date": "2015-03-10T15:36:39+0000",
            "content": "Commit 1665579 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1665579 ]\n\nSOLR-6349 + SOLR-6682: Added support for stats.field localparams to enable/disable individual stats; Fix response when using EnumField with StatsComponent "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14355303",
            "date": "2015-03-10T17:51:31+0000",
            "content": "Commit 1665635 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1665635 ]\n\nSOLR-6349 + SOLR-6682: test workaround since (deprecated) stats.facet doesn't garuntee order of list "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14355316",
            "date": "2015-03-10T17:56:35+0000",
            "content": "Commit 1665639 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1665639 ]\n\nSOLR-6349 + SOLR-6682: Added support for stats.field localparams to enable/disable individual stats; Fix response when using EnumField with StatsComponent (merge r1665579, r1665635) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14355669",
            "date": "2015-03-10T20:48:20+0000",
            "content": "Thanks Tomas & Xu "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14355845",
            "date": "2015-03-10T22:28:01+0000",
            "content": "Commit 1665730 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1665730 ]\n\nSOLR-6349: real fix for out of order stats facet's "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14355856",
            "date": "2015-03-10T22:35:39+0000",
            "content": "Commit 1665733 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1665733 ]\n\nSOLR-6349: real fix for out of order stats facet's (merge r1665730) "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14495354",
            "date": "2015-04-15T00:30:45+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}