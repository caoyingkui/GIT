{
    "id": "LUCENE-789",
    "title": "Custom similarity is ignored when using MultiSearcher",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.2"
        ],
        "affect_versions": "2.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Symptoms:\nI am using Searcher.setSimilarity() to provide a custom similarity that turns off tf() factor. However, somewhere along the way the custom similarity is ignored and the DefaultSimilarity is used. I am using MultiSearcher and BooleanQuery.\n\nProblem analysis:\nThe problem seems to be in MultiSearcher.createWeight(Query) method. It creates an instance of CachedDfSource but does not set the similarity. As the result CachedDfSource provides DefaultSimilarity to queries that use it.\n\nPotential solution:\nAdding the following line:\n    cacheSim.setSimilarity(getSimilarity());\nafter creating an instance of CacheDfSource (line 312) seems to fix the problem. However, I don't understand enough of the inner workings of this class to be absolutely sure that this is the right thing to do.",
    "attachments": {
        "TestMultiSearcherSimilarity.java": "https://issues.apache.org/jira/secure/attachment/12354993/TestMultiSearcherSimilarity.java",
        "789_patch.txt": "https://issues.apache.org/jira/secure/attachment/12356191/789_patch.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-04-05T02:02:02+0000",
            "content": "Alexey, the best way to start with this, and the way that will help get this fixed in Lucene core is to write a unit test class that does what your code does with MultiSearcher and BooleanQuery, and shows that the test fails when a custom Similarity class is used.  You can make that custom Similarity an inner class in your unit test class, to contain everything neatly in a single class.\n\nOnce we see the test failing we cann apply your suggested fix and see if that works, if your previously broken unit test now passes, and if all other unit tests still pass. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12486835"
        },
        {
            "date": "2007-04-05T09:38:32+0000",
            "content": "Attached unit test ",
            "author": "Alexey Lef",
            "id": "comment-12486896"
        },
        {
            "date": "2007-04-25T00:01:40+0000",
            "content": "Thanks for the test case, Alexey!\n\nProblem was in MultiSearcher.CachedDfSource.\nAttached patch fixes this in MultiSearcher, plus adds the test-case to existing MultiSearcherTest.\n ",
            "author": "Doron Cohen",
            "id": "comment-12491489"
        },
        {
            "date": "2007-04-25T21:16:53+0000",
            "content": "Fix committed, thanks Alexey!\n\nIt should be noted that as before this fix, creating a multiSearcher from Searchers for whom custom similarity was set has no effect - the custom similarities of those searchers are masked by the similarity of the MultiSearcher. This is as designed, because MultiSearcher operates on Searchables (not on Searchers). ",
            "author": "Doron Cohen",
            "id": "comment-12491781"
        }
    ]
}