{
    "id": "SOLR-11749",
    "title": "regression-test-like functionality for bin/solr*",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "scripts and tools"
        ],
        "type": "Wish",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "",
    "attachments": {
        "SOLR-11749.patch": "https://issues.apache.org/jira/secure/attachment/12901702/SOLR-11749.patch",
        "test-output.txt": "https://issues.apache.org/jira/secure/attachment/12910940/test-output.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-12T15:33:25+0000",
            "content": "minimal start ",
            "author": "Christine Poerschke",
            "id": "comment-16287751"
        },
        {
            "date": "2018-02-09T23:44:56+0000",
            "content": "I'm a big fan of this as an idea.  I've been toying with some bin/solr changes recently, but the lack of tests has been a real burden.  Conceivably if we get a good suite of tests here, we could even hook them into ant test so it runs as a part of ant command most people run.\n\nThe only downside is that having these tests in bash/batch means we'll need two copies of the same test-logic (one in bash, one in Windows batch script).  Not sure of a way around that.  Technically the logic could be in Java, but it'd be full of a bunch of isWindows/isLinux conditionals, which wouldn't be much better.  Just thinking aloud here...\n\nAnyways, if you don't mind, I'll add a few example tests to the minimal start you attached above, and see what we can learn from that.  ",
            "author": "Jason Gerlowski",
            "id": "comment-16359111"
        },
        {
            "date": "2018-02-13T18:10:14+0000",
            "content": "...  bin/solr changes ... lack of tests has been a real burden. ...\n\nYes, that was also what led me to starting the minimal patch.\n\n... if you don't mind, I'll add a few example tests to the minimal start you attached above, and see what we can learn from that.\n\nYes, please! That was exactly the idea behind starting a minimal patch which can grow. ",
            "author": "Christine Poerschke",
            "id": "comment-16362763"
        },
        {
            "date": "2018-02-16T15:23:19+0000",
            "content": "I attached a patch above which adds enough tests to establish a pattern for how these might be developed.\n\nI tried my best to make the tests look as much as possible like the Java JUnit tests everyone is familiar with.\n\n\n\tthere are test suites (files named \"test_*.sh\" anywhere under bin-test)\n\tinside suites, there are individual test cases (bash functions prefixed with solr_test_)\n\tthere are @Before and @After analogues (solr_unit_test_before and solr_unit_test_after)\n\tthere are @BeforeClass and @AfterClass analogues (solr_suite_before and solr_suite_after)\n\n\n\nThe output, with the uploaded patch, is also attached. test-output.txt\n\nI'm curious what people think of the attached approach.  If people like it (or at least no one hates it too much), I'm happy to go forward and commit the base framework and start adding a base level of test coverage.  And porting the approach to Windows batch scripts, so we can test bin/solr.cmd as well. ",
            "author": "Jason Gerlowski",
            "id": "comment-16367468"
        },
        {
            "date": "2018-02-24T18:25:51+0000",
            "content": "I've attached an update patch with finished test suites for bin/solr create_collection and bin/solr delete (collection).\n\nPROS\n\n\tFollowing in xUnit footsteps makes the tests readable and understandable.\n\tAdding individual test cases is pretty easy.\n\n\n\nCONS\n\n\tno parallelism makes test running slow. The latest patch runs about 26 tests in about 3 and a half minutes locally for me. If there's a clean way to do parallelism in bash, it'd be new to me. I'm open to ideas. This is concerning, but not a showstopper IMO. Slow bin/solr tests are better than none at all. We probably shouldn't hook them into the normal ant-test target until we find some way to improve the speed though.\n\tMany of the more useful @Before/@After actions end up talking to ZK to list all the collections/configs, etc. This really adds to the test-suite runtime. Probably a good place for optimization if we need to cut down the runtime.\n\tImplementing all of my bash logic in Windows/batch is a little scary. Both because I don't know batch as well as bash, but also because I only have intermittent access to a Windows OS.\n\n\n\nNEXT STEPS\n\n\tAdd support for single-test/single-suite running.\n\tAdd Windows/batch equivalents\n\tExpand test coverage.\n\n\n\nQUESTIONS\n\n\tThe tests I've been able to write so far assert on a lot of things. Some assert on the actual text output of the script. Some assert on changes to global state in ZK (created collections/configs, etc.). I think a mix of both is healthy. But if you had tests of a certain type in mind when you created this JIRA Christine Poerschke, let me know and I can make sure I get coverage for the things you're interested in.\n\n\n\nIdeally, I would like to merge this once I get a Windows equivalent of the work I've done so far. The current test coverage is limited, but getting even limited coverage merged is beneficial, as some tests are better than none. It also allow would allow other interested devs to contribute tests in parallel. So getting to parity on Windows is my top priority.\n\nAlso, gonna assign this JIRA to myself, unless others want it. ",
            "author": "Jason Gerlowski",
            "id": "comment-16375717"
        },
        {
            "date": "2018-03-06T23:11:18+0000",
            "content": "Just noticed that my previous patch was broken.  Due to some .gitignore rules I didn't know about, some bash functions I'd pulled into a lib directory under bin-test didn't get picked up when I wrote the patch.  Fixed that and reuploaded.\n\nIn other minor news, I'm making creeping progress on a batch version of this functionality, but it's slow going. ",
            "author": "Jason Gerlowski",
            "id": "comment-16388679"
        },
        {
            "date": "2018-03-11T15:52:20+0000",
            "content": "Changes\n\n\tadded the ability to run a single test suite -s, or a single specific test -t\n\tadded basic help text -h\n\tAdded a README.md which gives a little more help for those looking to add tests or understand how the test-runner/framework works.\n\n\n\nI've had a lot of trouble making progress on the Windows version of this script.  Mostly because I only rarely have access to a Windows machine to make and test changes.  For that reason, I'm starting to wonder if it's worth committing the *nix tests by themselves, and following up with the Windows logic afterward.  If I'm being honest, it'll be at least another few weeks before I can hope to have the Windows side done.  Committing the Linux tests in the meantime would (in theory) allow others to add tests of their own, improve the framework, or even port the logic to Windows on their own.\n\nIf no one objects to this approach, or has review comments, I hope to commit this later this week.  I'll probably ask for specific review of this on the mailing list too, since bash has a lot of pitfalls that I may not have caught, and I think this is a change others might be interested in too. ",
            "author": "Jason Gerlowski",
            "id": "comment-16394548"
        },
        {
            "date": "2018-03-11T16:04:09+0000",
            "content": "+1 to check in the Unix version. Perhaps someone with access to Windows could pitch in... ",
            "author": "Erick Erickson",
            "id": "comment-16394556"
        },
        {
            "date": "2018-03-16T01:20:48+0000",
            "content": "Commit 2ca741d36a3078e7d7b03cb73176a1e99377eefc in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2ca741d ]\n\nSOLR-11749: Introduce bin/solr test suite ",
            "author": "ASF subversion and git services",
            "id": "comment-16401354"
        },
        {
            "date": "2018-03-16T01:33:09+0000",
            "content": "Commit bd83a339474f34c91e0f2e9a1057ef43ede645d7 in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bd83a33 ]\n\nSOLR-11749: Introduce bin/solr test suite ",
            "author": "ASF subversion and git services",
            "id": "comment-16401361"
        },
        {
            "date": "2018-03-25T14:00:49+0000",
            "content": "Was thinking about next steps for this test suite, and there's a lot of branches that I'd like this to go in.\n\n\texpand test coverage for other bin/solr tools (auth, zk, assert, start/stop/restart).\n\tadd Windows equivalent functionality\n\tminor test harness/runner improvements (add verbosity controls, etc.)\n\tperformance improvements (currently the suite takes too long to run to make it practical to run on normal builds).\n\tintegrate with ant test target\n\n\n\nI plan on writing up JIRA issues for each of these, and using this issue as a parent/umbrella for the remaining functionality that I think is still low-hanging fruit here.  That should make it easy for others to pitch in too if they feel the urge. ",
            "author": "Jason Gerlowski",
            "id": "comment-16413046"
        },
        {
            "date": "2018-04-27T14:08:59+0000",
            "content": "Commit 43c086a002b3488a6fdd6a71ce1879a2538cce4e in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=43c086a ]\n\nSOLR-11749: Fix logic errors in some assert funcs ",
            "author": "ASF subversion and git services",
            "id": "comment-16456495"
        },
        {
            "date": "2018-04-27T14:13:37+0000",
            "content": "Commit b3f736d2653143e5b4fc8dfa48f4dfde93f0e299 in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b3f736d ]\n\nSOLR-11749: Fix logic errors in some assert funcs ",
            "author": "ASF subversion and git services",
            "id": "comment-16456503"
        },
        {
            "date": "2018-04-27T19:01:55+0000",
            "content": "This is great that you guys are addressing this!\n\nI wonder if trying to make ScriptUnit is the best approach though. It's been done a couple times before for bash at least, but I've\u00a0always tried to avoid those projects.\n\nJust a thought, but I wonder if it would not be better to just drive these by junit? If they are very long we could make some or all of them @Nightly.\n\nWhat I kind of like is to make sure all of my bash scripts are setup to fail if any single command fails. Then a test gets its own bash scipt that just executes the test. If that returns non 0, we fail the junit test method.\n\nNow, if any command fails in the Solr script, the test is failed. If anything fails in the test itself, the test is failed. Now you can do really simple assert stuff like try and list a file, if it doesn't exist the test will fail.\n\nThis gives you the same test reporting we get with our other tests, lets you do things like run the tests from an IDE, all of them or individually, and lets us treat the tests the same as our other tests for the most part with the same reporting. You can add an @assume to only run on the right OS for the script, or just an explicit check of the OS and call the right script.\n\nIt also lets us avoid almost any scripting\u00a0related to a script testing framework. Really, all you need to do is set bash up to be easily debuggable so that fails show the right info, which is just a few lines of bash. ",
            "author": "Mark Miller",
            "id": "comment-16456922"
        },
        {
            "date": "2018-04-27T19:06:54+0000",
            "content": "Oh yeah, and then you don't have to implement the test framework for windows as well. ",
            "author": "Mark Miller",
            "id": "comment-16456923"
        },
        {
            "date": "2018-04-27T19:22:45+0000",
            "content": "Just as an example, your Junit tests would end up looking something like this:\n\n\u00a0\n\npublic class TestSolrScriptsStuff1 extends Assert {\n\n\u00a0 public TestSolrScriptsStuff1() {\n\n\u00a0 }\n\n\u00a0 @BeforeClass\n\u00a0 public static void setUpBeforeClass() throws Exception {\n\n\u00a0 \u00a0 String[] cmd = new String[]{\"bash\", \"test-setup.sh\"};\n\n\u00a0 \u00a0 int exitVal = Util.runCmd(cmd).returnCode;\n\n\u00a0 \u00a0 if (exitVal > 0) {\n\u00a0 \u00a0 \u00a0 fail(\"Setup Failed!\");\n\u00a0 \u00a0 }\n\u00a0 }\n\n\u00a0 @AfterClass\n\u00a0 public static void tearDownAfterClass() throws Exception {\n\n\u00a0 \u00a0 String[] cmd = new String[] {\"bash\",\n\n\u00a0 \u00a0 \u00a0 \u00a0 \"test-teardown.sh\"};\n\n\u00a0 \u00a0 int exitVal = Util.runCmd(cmd).returnCode;\n\n\u00a0 \u00a0 if (exitVal > 0) {\n\u00a0 \u00a0 \u00a0 fail(\"Tear Down Failed!\");\n\u00a0 \u00a0 }\n\u00a0 }\n\n\u00a0 @Test\n\u00a0 public void test1() throws Exception {\n\n\u00a0 \u00a0 String[] cmd = new String[]{\"bash\", \"test1.sh\"};\n\n\u00a0 \u00a0 Util.PbResult result = Util.runCmd(cmd);\n\n\u00a0 \u00a0 assertEquals(\"Testing test1.sh failed\", 0, result.returnCode);\n\u00a0 }\n\n\u00a0 @Test\n\u00a0 public void test2() throws Exception {\n\n\u00a0 \u00a0 String[] cmd = new String[]{\"bash\", \"test2.sh\"};\n\n\u00a0 \u00a0 Util.PbResult result = Util.runCmd(cmd);\n\n\u00a0 \u00a0 assertEquals(\"Testing test2.sh failed\", 0, result.returnCode);\n\u00a0 }\n\n}\n ",
            "author": "Mark Miller",
            "id": "comment-16456944"
        }
    ]
}