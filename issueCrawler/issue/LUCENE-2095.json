{
    "id": "LUCENE-2095",
    "title": "Document not guaranteed to be found after write and commit",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9.2",
            "3.0.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "2.4.1,                                            2.9.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "after same email on developer list:\n\"I developed a stress test to assert that a new document containing a\nspecific term \"X\" is always found after a commit on the IndexWriter.\nThis works most of the time, but it fails under load in rare occasions.\n\nI'm testing with 40 Threads, both with a SerialMergeScheduler and a\nConcurrentMergeScheduler, all sharing a common IndexWriter.\nAttached testcase is using a RAMDirectory only, but I verified a\nFSDirectory behaves in the same way so I don't believe it's the\nDirectory implementation or the MergeScheduler.\nThis test is slow, so I don't consider it a functional or unit test.\nIt might give false positives: it doesn't always fail, sorry I\ncouldn't find out how to make it more likely to happen, besides\nscheduling it to run for a longer time.\"\n\nI tested this to affect versions 2.4.1 and 2.9.1;",
    "attachments": {
        "lucene-stresstest.patch": "https://issues.apache.org/jira/secure/attachment/12426146/lucene-stresstest.patch",
        "LUCENE-2095.patch": "https://issues.apache.org/jira/secure/attachment/12426318/LUCENE-2095.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-11-25T21:21:32+0000",
            "content": "attaching the testcase, apply to version 2.9.1.\nIt's slow, please be patient. ",
            "author": "Sanne Grinovero",
            "id": "comment-12782625"
        },
        {
            "date": "2009-11-25T21:59:54+0000",
            "content": "I can get this to fail fairly quickly, using 2 threads.\n\nIt's a thread safety issue of commit itself.  If you only allow 1 thread into commit at a time I believe the issue won't happen.\n\nIt has to do with what thread #2 does when it enters commit and thread #1 is already in the process of committing.  In this case thread #2 basically waits for thread #1 to finish and then returns, whereas it should start its own new commit. ",
            "author": "Michael McCandless",
            "id": "comment-12782644"
        },
        {
            "date": "2009-11-25T22:39:27+0000",
            "content": "Why do we allow un-synchronized commit if doFlush is\nsynchronized? The main cost of commit is most likely in the\nflush as it doesn't wait for merges? There's a todo above\ndoFlush indicating we may want to make it un-synchronized in the\nfuture to not block merges, how tenable is this? ",
            "author": "Jason Rutherglen",
            "id": "comment-12782659"
        },
        {
            "date": "2009-11-26T01:38:42+0000",
            "content": "I think the main cost is often fsync'ing the new files.\n\nBut I agree we should simply lock so only one thread can be in commit\nat once.  Concurrency inside commit (when fscyning) seems silly (it\nused to be slightly more interesting when we had autoCommit=true).\n\nWe shouldn't use IW's lock.  First, it's overkill (doing so would\nunnecessarily block other sync'd ops from running).  Second, it leads\nto deadlock, at least in CMS (if it waits because too many merges are\nrunning).  I'll use a separate lock.\n\nI'm not adding locking around the separate calls to prepareCommit then\ncommit.  An app must ensure these two calls are always balanced.\n\nMaking flush unsynchronized would be great but I think wouldn't be\nthat big a gain in practice, unless we could make it truly unsync'd\neven with adding new docs.  Ie, if while we are flushing the last\nsegment, we can accept adding/deleting docs into a new ram buffer in\nDW, that'd be quite interesting.  But that's a big change! ",
            "author": "Michael McCandless",
            "id": "comment-12782715"
        },
        {
            "date": "2009-11-28T09:09:47+0000",
            "content": "Patch attached.  I think it's ready to commit:\n\n\n\tAdded a simple monitor lock during commit() to serialize threads.\n\n\n\n\n\tBoiled down the test case to a new test case in TestIndexWriter.\n\n\n\n\n\tFound & fixed the [unrelated] deadlock in TestCrash, and cutover\n    RAMDir's tracking of sizeInBytes to an AtomicLong, as discussed on\n    java-dev.\n\n ",
            "author": "Michael McCandless",
            "id": "comment-12783221"
        },
        {
            "date": "2009-11-28T09:34:35+0000",
            "content": "Your patch only works for trunk and 3.0. If you want to fix it in 2.9 you must remove the j.u.concurrent* class usage. ",
            "author": "Uwe Schindler",
            "id": "comment-12783222"
        },
        {
            "date": "2009-11-28T09:38:58+0000",
            "content": "Thanks for reminding me \u2013 I'll remove it on backport. ",
            "author": "Michael McCandless",
            "id": "comment-12783223"
        },
        {
            "date": "2009-12-02T19:44:01+0000",
            "content": "Thanks Sanne! ",
            "author": "Michael McCandless",
            "id": "comment-12784974"
        },
        {
            "date": "2009-12-04T14:27:23+0000",
            "content": "Thanks a lot Michael, this makes my distributed testing reliable again \n\nI see you didn't apply my testcase, do you think it's not needed to have such a test?\nIf you need I could change it as you wish. ",
            "author": "Sanne Grinovero",
            "id": "comment-12785943"
        },
        {
            "date": "2009-12-04T15:34:25+0000",
            "content": "Thanks a lot Michael, \n\nThank you!\n\nthis makes my distributed testing reliable again\n\nI'm glad to hear it   Thanks for bringing closure...\n\nI see you didn't apply my testcase\n\nActually, I did: I boiled your testcase down and added it, in TestIndexWriter.java (testCommitThreadSafety).  The more tests the better! ",
            "author": "Michael McCandless",
            "id": "comment-12785965"
        },
        {
            "date": "2010-08-25T10:37:04+0000",
            "content": "I am currently using LUCENE Net 2.9.2 version. We have upgraded from v1.9.0 to 2.9.2. Basically we want to use threading concept now. But i am strucked with a lock. How to over come with these locks. Can any one provide .net code sample. Thank you in advance.  ",
            "author": "vijaykumarraja.grandhi",
            "id": "comment-12902371"
        },
        {
            "date": "2010-08-25T12:39:08+0000",
            "content": "Please help me. Slowly all my trails are getting dried out. failing to resolve multi threading with Lucene. It is getting deadlog. Always I am seeing some Write.Lock file inside Index folder. ",
            "author": "vijaykumarraja.grandhi",
            "id": "comment-12902410"
        },
        {
            "date": "2010-08-25T16:24:17+0000",
            "content": "Hey man, you should really ask you question on a Lucene .NET mailing list and NOT on a Lucene Java JIRA issues which is completely unrelated.\nPlease make sure you are asking your questions on the appropriate list - those folks will be happy to help and answer your question.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12902498"
        },
        {
            "date": "2010-08-26T11:49:40+0000",
            "content": "Thank you for guiding me correctly. will do that. ",
            "author": "vijaykumarraja.grandhi",
            "id": "comment-12902829"
        }
    ]
}