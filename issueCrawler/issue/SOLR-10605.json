{
    "id": "SOLR-10605",
    "title": "TestSolrCLIRunExample.testInteractiveSolrCloudExample() ObjectTracker failure",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "This case arose during beasting TestSolrCLIRunExample under SOLR-9867.\nThe race is\n\n\tRunExampleTool.runCloudExample() updates softCommit time config\n\tbut it waits only for Zk change, but not till cores are reloaded.\n\thence test goes further and deletes collection that breaks a core which reload the core. see logs excerpt\nThe possible measures are \n\tprobably RunExampleTool.runCloudExample() should spin wait until cores' config has changed like it's done in SolrCloudExampleTest.doTestConfigUpdate()\n\tCore UNLOAD might wait to accuire SolrConfigHandler.reloadLock, which I should be polished itself under SOLR-10594 and that similar to what's done under SOLR-9867, where SolrCores.close() waits until all cores are loaded (not reloaded).\n\n\n\nWhich of these do you like more?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-04T15:09:43+0000",
            "content": "The spin in SolrCloudExampleTest is better than what used to be there, but not all that great. It handles insuring that each replica's view of solrconfig.xml is consistent rather than just seeing that ZK got the right thing, but there's still a weakness here if two reloads are happening. The first succeeds and the property changes, then the second one comes along and interferes with, say, a subsequent delete. I'd vastly prefer option <2>, let's not return until the operation is done if at all possible.\n ",
            "author": "Erick Erickson",
            "id": "comment-15996885"
        },
        {
            "date": "2017-05-08T21:03:59+0000",
            "content": "I think it's a dupe of SOLR-10588 ",
            "author": "Mikhail Khludnev",
            "id": "comment-16001531"
        }
    ]
}