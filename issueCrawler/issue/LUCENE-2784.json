{
    "id": "LUCENE-2784",
    "title": "Change all FilteredTermsEnum impls into TermsEnum decorators",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Currently, FilteredTermsEnum has two ctors:\n\n\tFilteredTermsEnum(IndexReader reader, String field)\n\tFilteredTermsEnum(TermsEnum tenum)\n\n\n\nBut most of our concrete implementations (e.g. TermsRangeEnum) use the IndexReader+field ctor\n\nIn my opinion we should remove this ctor, and switch over all FilteredTermsEnum implementations to just take a TermsEnum.\n\nAdvantages:\n\n\tThis simplifies FilteredTermsEnum and its subclasses, where they are more decorator-like (perhaps in the future we could compose them)\n\tRemoves silly checks such as if (tenum == null) in every next()\n\tAllows for consumers to pass in enumerators however they want: e.g. its their responsibility if they want to use MultiFields or not, it shouldnt be buried in FilteredTermsEnum.\n\n\n\nI created a quick patch (all core+contrib+solr tests pass), but i think this opens up more possibilities for refactoring improvements that haven't yet been done in the patch: we should explore these too.",
    "attachments": {
        "LUCENE-2784.patch": "https://issues.apache.org/jira/secure/attachment/12464879/LUCENE-2784.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-11-29T16:39:41+0000",
            "content": "first quick stab ",
            "author": "Robert Muir",
            "id": "comment-12964806"
        },
        {
            "date": "2010-11-29T16:45:27+0000",
            "content": "+1, definitely seems like the right path. ",
            "author": "Yonik Seeley",
            "id": "comment-12964809"
        },
        {
            "date": "2010-11-29T16:54:01+0000",
            "content": "Looks god, but I think (no tests hit this), that you must do a null check when calling MultiFields.getTerms().\n\nWe should really remove usage of MultiFields here, all Filters and Queries now work directly on segment readers. ",
            "author": "Uwe Schindler",
            "id": "comment-12964816"
        },
        {
            "date": "2010-11-29T16:57:47+0000",
            "content": "Looks god, but I think (no tests hit this), that you must do a null check when calling MultiFields.getTerms().\n\nWe need tests for this, and to decide how to handle it: e.g. return emptytermsenum or whatever is my first idea.\n\nits still better than the empty condition being handled in FTE though (and checked on every call to next())\n\nWe should really remove usage of MultiFields here, all Filters and Queries now work directly on segment readers.\n\nI agree, we don't need multifields in these queries. (I just did it to be consistent with trunk). ",
            "author": "Robert Muir",
            "id": "comment-12964819"
        },
        {
            "date": "2010-11-29T17:01:44+0000",
            "content": "We need tests for this, and to decide how to handle it: e.g. return emptytermsenum or whatever is my first idea.\n\nFor IR.terms() what should be called in MTQ.getTermsEnum(IR) - not MultiFields, null is a vlaid return value. Mike and you decided that. MTQ's internal handling can also live with null enum. I will look further into it and post modified patch! ",
            "author": "Uwe Schindler",
            "id": "comment-12964820"
        },
        {
            "date": "2010-11-29T17:07:41+0000",
            "content": "I looked into the code of MTQ: The reason why we don't hit the null case here is: MTQ itsself gets IR's Terms and checks for null, so later calls here always return something. In my opinion this is also not the right thing (I don't know for what reason this was added). Maybe we should simply also change MTQ.getTermsEnum() to simply take a enum to wrap? ",
            "author": "Uwe Schindler",
            "id": "comment-12964829"
        },
        {
            "date": "2010-11-29T17:09:30+0000",
            "content": "Right, we could check in every query and return TermsEnum.EMPTY\n\nor a crazier idea, we could change MTQ.getTermsEnum(IndexReader reader, AttributeSource atts)\nto instead take a TermsEnum versus a reader.\n\nthen MTQ itself could handle this if null, return TermsEnum.EMPTY case?\n\nBut i didnt try this yet. ",
            "author": "Robert Muir",
            "id": "comment-12964832"
        },
        {
            "date": "2010-11-29T17:13:03+0000",
            "content": "or a crazier idea, we could change MTQ.getTermsEnum(IndexReader reader, AttributeSource atts) to instead take a TermsEnum versus a reader.\n\nI already checked for that (that was the reason for my prev. comment).\n\nBut in my opinion, we should not do this. As some MTQs may quicker return EMPTY for some reasons, like for a range when upper<lower. So you don't even need to look into the IR's fields/terms. So I would lie to remove the checks in MTQ and simply call always MTQ.getTermsEnum and then exit if empty. Thats much more clean. I was just wondering why these checks were added by Mike? For TermRange and Numeric its too much work. ",
            "author": "Uwe Schindler",
            "id": "comment-12964837"
        },
        {
            "date": "2010-11-29T17:19:04+0000",
            "content": "ok, either way is fine by me. \nbtw there is a similar check in AutomatonQuery too (where it looks at the query and knows it can return EMPTY)\n\nwe can clean up these getEnums though (such as that one) a lot though, i didnt do it in the patch...\nit was almost a find-replace job. ",
            "author": "Robert Muir",
            "id": "comment-12964839"
        },
        {
            "date": "2010-11-29T18:07:02+0000",
            "content": "here is an improved patch: this changes MultiTermQuery.getTermsEnum(IndexReader ir) to MultiTermQuery.getTermsEnum(Terms terms).\n\nI also removed multifields usage in these multitermqueries (maybe missed a few, will look more), because all rewrite methods are per-segment. ",
            "author": "Robert Muir",
            "id": "comment-12964859"
        },
        {
            "date": "2010-11-29T18:24:06+0000",
            "content": "That patch looks very good!\n\n\n+      if (term == null) // TODO: is this really necessary? we should be positioned already?\n\n\n\nThe check is really necessary, as on the first call of nextSeekTerm on the uninitialized TermsEnum (before first next()), the current term is null. If we would change this and place it on the first term of the underlying enum we would break everything: TermsEnum must be unpositioned initially before next() [this was the broken thing before 4.0] and we would have an unneeded seek on a never needed term.\n\nSo you can remove that comment from patch! ",
            "author": "Uwe Schindler",
            "id": "comment-12964864"
        },
        {
            "date": "2010-11-29T18:26:23+0000",
            "content": "I also removed multifields usage in these multitermqueries (maybe missed a few, will look more), because all rewrite methods are per-segment.\n\nMultiTermQueryWrapperFilter still has it  And TermCollectingRewrite does not have it, which is correct because it knows that it works per-segment (that was always the case).\n\nBut I think we should remove remaining MultiFields in a separate issue. ",
            "author": "Uwe Schindler",
            "id": "comment-12964867"
        },
        {
            "date": "2010-11-29T19:11:13+0000",
            "content": "ok, i removed the TODO (i understand now), and also some unused imports in tests.\n\nother than that the patch is the same, all core+contrib+solr tests pass. ",
            "author": "Robert Muir",
            "id": "comment-12964884"
        },
        {
            "date": "2010-11-30T01:23:51+0000",
            "content": "Committed revision 1040379. ",
            "author": "Robert Muir",
            "id": "comment-12965056"
        }
    ]
}