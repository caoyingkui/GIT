{
    "id": "LUCENE-6227",
    "title": "Add BooleanClause.Occur.FILTER",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Now that we have weight-level control of whether scoring is needed or not, we could add a new clause type to BooleanQuery. It would behave like MUST exept that it would not participate in scoring.\n\nWhy do we need it given that we already have FilteredQuery? The idea is that by having a single query that performs conjunctions, we could potentially take better decisions. It's not ready to replace FilteredQuery yet as FilteredQuery has handling of random-access filters that BooleanQuery doesn't, but it's a first step towards that direction and eventually FilteredQuery would just rewrite to a BooleanQuery.\n\nI've been calling this new clause type FILTER so far, but feel free to propose a better name.",
    "attachments": {
        "LUCENE-6227.patch": "https://issues.apache.org/jira/secure/attachment/12697447/LUCENE-6227.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14312039",
            "author": "Adrien Grand",
            "date": "2015-02-09T09:51:32+0000",
            "content": "Patch. ConjunctionScorer now takes two sets of scorers, a first one which contains required clauses and is used for advancing to the next match, and another one which only takes the scoring clauses and is used when score() is called. "
        },
        {
            "id": "comment-14312043",
            "author": "Michael McCandless",
            "date": "2015-02-09T09:56:08+0000",
            "content": "This looks wonderful!  Does it mean we can remove BooleanFilter?  Maybe TermsFilter?  Or that can come later; this is already an awesome step.\n\nMinor silly Englishism: \"participate to\" -> \"participate in\" "
        },
        {
            "id": "comment-14312049",
            "author": "Uwe Schindler",
            "date": "2015-02-09T10:06:09+0000",
            "content": "JUHUUUUUUU!  "
        },
        {
            "id": "comment-14312052",
            "author": "Uwe Schindler",
            "date": "2015-02-09T10:08:59+0000",
            "content": "If we now manage to nuke the whole Filter class (or make it just a specialization of Query that supports caching + random access), we can clean up more! This is a great step forwards.\n\nAs far as I see, currently you cannot add a Filter to BooleanQuery, you still have to wrap it - because BooleanClause needs a \"Query\" object. This would be solved if above becomes true. "
        },
        {
            "id": "comment-14312059",
            "author": "Adrien Grand",
            "date": "2015-02-09T10:17:25+0000",
            "content": "Yes. I don't have concrete plans yet, but the only thing that filters have but queries don't is random-access. For instance FilteredQuery today has a not-so-bad way to execute doc-values filters by advancing the query first and then checking the filter, we don't have this on BooleanQuery today. But I think something like LUCENE-6198 could be a better alternative, ie. doc-values filters would return a match-all iterator and do the heavy work in confirm() and boolean queries would work on it just fine. So once this kind of stuff is in, I think we'll be able to remove filters? "
        },
        {
            "id": "comment-14312070",
            "author": "Adrien Grand",
            "date": "2015-02-09T10:33:33+0000",
            "content": "New patch with fixed frenglishism. I tried to remove BooleanFilter and replace it with BooleanQuery but it makes lucene/facets angry because the filter does not implement bits() anymore (look for \"fastMatchFilter does not implement DocIdSet.bits\" in DoubleRange) so I'd like to delay it to another issue. "
        },
        {
            "id": "comment-14312071",
            "author": "Michael McCandless",
            "date": "2015-02-09T10:34:57+0000",
            "content": "New patch with fixed frenglishism.\n\nThanks, love that term frenglishism \n\nI tried to remove BooleanFilter and replace it with BooleanQuery but it makes lucene/facets angry because the filter does not implement bits() \n\nOh, grrr .... +1 to delay. "
        },
        {
            "id": "comment-14312168",
            "author": "Robert Muir",
            "date": "2015-02-09T12:24:24+0000",
            "content": "ConjunctionScorer's required bucket could now be DISI, in that it doesn't need Scorer right? It only scores 'requiredScoring'. \n\nAs far as the new Occur, i like it, but I think its a little confusing that it has the same toString() impl as MUST. Can these be different? It would be nice to think about e.g. adding queryparser support for this Occur in the future. "
        },
        {
            "id": "comment-14312289",
            "author": "Adrien Grand",
            "date": "2015-02-09T14:40:52+0000",
            "content": "New patch:\n\n\ttakes '#' for filter clauses instead of '+' like MUST\n\tConjunctionScorer takes DocIdSetIterators instead of Scorers for the intersection part.\n\n "
        },
        {
            "id": "comment-14312504",
            "author": "Hoss Man",
            "date": "2015-02-09T17:28:14+0000",
            "content": "two tangential thoughts/questions...\n\n1) From an API/conceptual standpoint, does it make more sense for this to be a new \"Occur\" instance (the Occur.FILTER here) or would it make more sense for this to be a property on BooleanClause that could be set to true with either MUST or MUST_NOT clauses?\n\n2) Assuming it's a new Occur.FILTER, should we plan on renaming Occur.MUST_NOT to something like Occur.FILTER_NEGATION since (unless i'm missunderstanding something) the \"non-scoring\" semantics of Occur.FILTER and Occur.MUST_NOT are basicly the inverse of each other right?  so it seems like we should probably do something ot make it more clear that Occur.MUST_NOT has more in common with FILTER then with MUST ? "
        },
        {
            "id": "comment-14312524",
            "author": "Adrien Grand",
            "date": "2015-02-09T17:43:05+0000",
            "content": "I agree that the names lack symmetry and it would be nice to fix it... I like the idea of renaming MUST_NOT to something like FILTER_NEGATION to make clear that it does not score. Or maybe even shorter, eg. FILTER_NOT? "
        },
        {
            "id": "comment-14313944",
            "author": "Adrien Grand",
            "date": "2015-02-10T10:12:43+0000",
            "content": "Here is a new patch with improved naming: I renamed MUST_NOT to FILTER_NOT to make it clear that it is conceptually closed to FILTER than to MUST. The patch applies to 5.x and keeps backward compatibility for MUST_NOT. "
        },
        {
            "id": "comment-14314066",
            "author": "Robert Muir",
            "date": "2015-02-10T12:01:42+0000",
            "content": "Renaming of MUST_NOT is a big scope creep to this issue. I think it should be done elsewhere instead of adding any confusion to this patch. its unrelated. this patch just adds FILTER. completely unrelated to the name of MUST_NOT. "
        },
        {
            "id": "comment-14314067",
            "author": "Robert Muir",
            "date": "2015-02-10T12:02:48+0000",
            "content": "I also personally think MUST_NOT's name is just fine. I dont think adding something else, FILTER makes this confusing at all. I dont think we should rename it. "
        },
        {
            "id": "comment-14314143",
            "author": "Adrien Grand",
            "date": "2015-02-10T13:00:46+0000",
            "content": "Then I'll commit the patch without renaming and open an issue issue to discuss whether we should rename our boolean clauses (if that's ok with everyone). "
        },
        {
            "id": "comment-14314159",
            "author": "Robert Muir",
            "date": "2015-02-10T13:17:31+0000",
            "content": "+1 to the earlier patch. Can we add some comments in BooleanWeight that 'requiredScoring' is a subset of 'required'?\n\nWhen reviewing the logic of e.g. req(), its not immediately obvious that its correct without going up hundreds of lines to look at how 'required' and 'requiredScoring' buckets are created (e.g. a MUST clause will be in both lists).\n\nI'm also staring at req() and trying to figure out what happens if we have only a single, non-scoring clause (yet needsScores=true for the BQ as a whole). I suppose it falls through to the BoostedScorer case? Maybe we can add a simple unit test for this case to ensure it does what its supposed to do? "
        },
        {
            "id": "comment-14314161",
            "author": "Adrien Grand",
            "date": "2015-02-10T13:22:12+0000",
            "content": "I'll add the suggested comments.\n\nI'm also staring at req() and trying to figure out what happens if we have only a single, non-scoring clause (yet needsScores=true for the BQ as a whole). I suppose it falls through to the BoostedScorer case? Maybe we can add a simple unit test for this case to ensure it does what its supposed to do?\n\nExactly, it gets a BoostedScorer with a boost of 0. The tests already cover it (they create a single filter clause and make sure that scores are equal to 0), but I can make them more explicit. "
        },
        {
            "id": "comment-14314164",
            "author": "Robert Muir",
            "date": "2015-02-10T13:24:42+0000",
            "content": "Yeah, i saw the random test, and i have no doubt its tested by that thing. But sometimes a very stupid-simple unit test is good in cases like this. It could prevent it from being broken by some boolean refactoring in the future. "
        },
        {
            "id": "comment-14314444",
            "author": "Adrien Grand",
            "date": "2015-02-10T16:48:22+0000",
            "content": "Patch:\n\n\tmore comments\n\tadded assertion that scorers is a subset of required in ConjunctionScorer\n\tadded unit test decicated to the single filter clause, with two cases: 1. when BooleanQuery rewrite to a single term query and 2. when Boolean cannot rewrite because of SHOULD clauses that return a null scorer.\n\n "
        },
        {
            "id": "comment-14314486",
            "author": "ASF subversion and git services",
            "date": "2015-02-10T17:24:12+0000",
            "content": "Commit 1658764 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1658764 ]\n\nLUCENE-6227: Add BooleanClause.Occur.FILTER. "
        },
        {
            "id": "comment-14314542",
            "author": "ASF subversion and git services",
            "date": "2015-02-10T18:03:17+0000",
            "content": "Commit 1658769 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1658769 ]\n\nLUCENE-6227: Add BooleanClause.Occur.FILTER. "
        },
        {
            "id": "comment-14315175",
            "author": "Paul Elschot",
            "date": "2015-02-10T23:30:00+0000",
            "content": "See also LUCENE-1345 and LUCENE-1518. "
        },
        {
            "id": "comment-14336503",
            "author": "ASF subversion and git services",
            "date": "2015-02-25T14:13:11+0000",
            "content": "Commit 1662218 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1662218 ]\n\nLUCENE-6227: Fix explanations of FILTER clauses. "
        },
        {
            "id": "comment-14336525",
            "author": "ASF subversion and git services",
            "date": "2015-02-25T14:20:45+0000",
            "content": "Commit 1662220 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1662220 ]\n\nLUCENE-6227: Fix explanations of FILTER clauses. "
        },
        {
            "id": "comment-14495219",
            "author": "Timothy Potter",
            "date": "2015-04-15T00:30:07+0000",
            "content": "Bulk close after 5.1 release "
        },
        {
            "id": "comment-15160252",
            "author": "yuejianjun",
            "date": "2016-02-24T06:29:09+0000",
            "content": " Adrien Grand \n\n Declarationorg.apache.lucene.search.QueryWrapperFilter\n@Deprecated\nDeprecated. You can use Query objects directly for filtering by using BooleanClause.Occur.FILTER clauses in a BooleanQuery.\n\nBooleanClause.Occur.FILTER is a BooleanClause.Occur.MUST of no score \n\nQueryWrapperFilter is a OR query\nBooleanClause.Occur.FILTER  is a AND query\n\nwhy QueryWrapperFilter is replaced with the BooleanClause.Occur.FILTER ?\n\n\n\n\n "
        },
        {
            "id": "comment-15169098",
            "author": "Adrien Grand",
            "date": "2016-02-26T14:37:58+0000",
            "content": "Maybe you can show how you are constructing queries currently so that I can help you move them to the new way of applying filters? "
        },
        {
            "id": "comment-15186972",
            "author": "yuejianjun",
            "date": "2016-03-09T11:33:53+0000",
            "content": "/**\n\n\tfilter \u67e5\u8be2\u7ed3\u679c(Filter \u8fc7\u6ee4\u67e5\u8be2)\u3002 filter=id:1,2\n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tpublic TermsFilter getTermsFilter(String filter) {\n\t\ttry {\n\t\t\tif (filter != null && filter.length() > 0) \nUnknown macro: {\t\t\t\tString[] arrFilter = filter.split(\"} \n\t\t} catch (Exception e) \n{\n\t\t\tlogger.error(\"SearchQuery getTermsFilter is error\", e);\n\t\t}\n\t\treturn null;\n\t}\n\n\n\nsearch id=1 or id=2 \nhow to  use  BooleanClause.Occur.FILTER replace \uff1f "
        },
        {
            "id": "comment-15186976",
            "author": "yuejianjun",
            "date": "2016-03-09T11:36:13+0000",
            "content": "\n\n\t/**\n\n\tfilter \u67e5\u8be2\u7ed3\u679c(Filter \u8fc7\u6ee4\u67e5\u8be2)\u3002 filter=id:1,2\n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tpublic TermsFilter getTermsFilter(String filter) {\n\t\ttry {\n\t\t\tif (filter != null && filter.length() > 0) \nUnknown macro: {\t\t\t\tString[] arrFilter = filter.split(); \t\t\t\tString key = arrFilter[0];\t\t\t\tString[] values = arrFilter[1].split(\",\");\t\t\t\tList<Term> listTerms = new ArrayList<Term>();\t\t\t\tfor (String value } \n\t\t} catch (Exception e) \n{\n\t\t\tlogger.error(\"SearchQuery getTermsFilter is error\", e);\n\t\t}\n\t\treturn null;\n\t}\n\n\n\nsearch id=1 or id=2 \nhow to use BooleanClause.Occur.FILTER replace \uff1f "
        }
    ]
}