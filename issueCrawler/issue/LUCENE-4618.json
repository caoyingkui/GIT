{
    "id": "LUCENE-4618",
    "title": "reproducable failure of TestMaxFailuresRule",
    "details": {
        "components": [],
        "fix_versions": [
            "4.1",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "james mentioned on the dev list that TestMaxFailuresRule fails reliable for him on multiple platforms when using -Dtests.seed=3FACDC7EBD23CB80:3D65D783617F94F1\n\nI was able to reproduce on my linux box as of trunk r1420486.",
    "attachments": {
        "LUCENE-4618.patch": "https://issues.apache.org/jira/secure/attachment/12560490/LUCENE-4618.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-12T00:29:48+0000",
            "content": "\ntest:\n    [mkdir] Created dir: /home/hossman/lucene/dev/lucene/build/core/test\n[junit4:pickseed] Seed property 'tests.seed' already defined: 3FACDC7EBD23CB80:3D65D783617F94F1\n[junit4:junit4] <JUnit4> says \u4eca\u65e5\u306f! Master seed: 3FACDC7EBD23CB80:3D65D783617F94F1\n[junit4:junit4] Executing 1 suite with 1 JVM.\n[junit4:junit4] \n[junit4:junit4] Suite: org.apache.lucene.util.TestMaxFailuresRule\n[junit4:junit4] FAILURE 1.26s | TestMaxFailuresRule.testMaxFailures <<<\n[junit4:junit4]    > Throwable #1: java.lang.AssertionError: expected:<2> but was:<0>\n[junit4:junit4]    > \tat org.junit.Assert.fail(Assert.java:93)\n[junit4:junit4]    > \tat org.junit.Assert.failNotEquals(Assert.java:647)\n[junit4:junit4]    > \tat org.junit.Assert.assertEquals(Assert.java:128)\n[junit4:junit4]    > \tat org.junit.Assert.assertEquals(Assert.java:472)\n[junit4:junit4]    > \tat org.junit.Assert.assertEquals(Assert.java:456)\n[junit4:junit4]    > \tat org.apache.lucene.util.TestMaxFailuresRule.testMaxFailures(TestMaxFailuresRule.java:92)\n[junit4:junit4]    > \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[junit4:junit4]    > \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n[junit4:junit4]    > \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[junit4:junit4]    > \tat java.lang.reflect.Method.invoke(Method.java:616)\n[junit4:junit4]    > \tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:45)\n[junit4:junit4]    > \tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\n[junit4:junit4]    > \tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:42)\n[junit4:junit4]    > \tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:20)\n[junit4:junit4]    > \tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:28)\n[junit4:junit4]    > \tat org.junit.internal.runners.statements.RunAfters.evaluate(RunAfters.java:30)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n[junit4:junit4]    > \tat com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n[junit4:junit4]    > \tat org.junit.rules.RunRules.evaluate(RunRules.java:18)\n[junit4:junit4]    > \tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:263)\n[junit4:junit4]    > \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:68)\n[junit4:junit4]    > \tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:47)\n[junit4:junit4]    > \tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:231)\n[junit4:junit4]    > \tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:60)\n[junit4:junit4]    > \tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:229)\n[junit4:junit4]    > \tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:50)\n[junit4:junit4]    > \tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:222)\n[junit4:junit4]    > \tat org.junit.runners.ParentRunner.run(ParentRunner.java:300)\n[junit4:junit4]    > \tat com.carrotsearch.ant.tasks.junit4.slave.SlaveMain.execute(SlaveMain.java:161)\n[junit4:junit4]    > \tat com.carrotsearch.ant.tasks.junit4.slave.SlaveMain.main(SlaveMain.java:255)\n[junit4:junit4]    > \tat com.carrotsearch.ant.tasks.junit4.slave.SlaveMainSafe.main(SlaveMainSafe.java:12)\n[junit4:junit4] Completed in 1.27s, 1 test, 1 failure <<< FAILURES!\n[junit4:junit4] \n[junit4:junit4] \n[junit4:junit4] Tests with failures:\n[junit4:junit4]   - org.apache.lucene.util.TestMaxFailuresRule.testMaxFailures\n[junit4:junit4] \n[junit4:junit4] \n[junit4:junit4] JVM J0:     0.47 ..     2.35 =     1.87s\n[junit4:junit4] Execution time total: 2.35 sec.\n[junit4:junit4] Tests summary: 1 suite, 1 test, 1 failure\n\n ",
            "author": "Hoss Man",
            "id": "comment-13529510"
        },
        {
            "date": "2012-12-12T00:35:48+0000",
            "content": "If i'm reading this correctly, i'm guessing this seed is just really lucky, and causes less then 2 out of the 500 repititions to fail. ",
            "author": "Hoss Man",
            "id": "comment-13529515"
        },
        {
            "date": "2012-12-12T01:40:12+0000",
            "content": "very hackish attempt at preserving the randomness of hte test, while still ensuring we get a minimum number of failures. ",
            "author": "Hoss Man",
            "id": "comment-13529556"
        },
        {
            "date": "2012-12-12T07:51:30+0000",
            "content": "Yeah... I already bumped those conditions once. I guess I underestimated the probability of touching the impossible, ehm. \n\nI assigned it to myself but then looked at the patch and I like your solution to the problem, Hoss. Feel free to commit it! ",
            "author": "Dawid Weiss",
            "id": "comment-13529724"
        },
        {
            "date": "2012-12-12T20:06:23+0000",
            "content": "[trunk commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1420941\n\nLUCENE-4618: fix test to not be so lucky about avoiding failures when we actually want them ",
            "author": "Commit Tag Bot",
            "id": "comment-13530272"
        },
        {
            "date": "2012-12-12T20:09:32+0000",
            "content": "Thanks for reviewing Dawid.\n\nCommitted revision 1420941.\nCommitted revision 1420943.\n\n(didn't bother with CHANGES.txt) ",
            "author": "Hoss Man",
            "id": "comment-13530276"
        },
        {
            "date": "2012-12-12T20:14:19+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1420943\n\nLUCENE-4618: fix test to not be so lucky about avoiding failures when we actually want them (merge r1420941) ",
            "author": "Commit Tag Bot",
            "id": "comment-13530280"
        }
    ]
}