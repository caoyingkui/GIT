{
    "id": "SOLR-6365",
    "title": "specify  appends, defaults, invariants outside of the component",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The components are configured in solrconfig.xml mostly for specifying these extra parameters. If we separate these out, we can avoid specifying the components altogether and make solrconfig much simpler. Eventually we want users to see all functions as paths instead of components and control these params from outside , through an API and persisted in ZK\n\nobjectives :\n\n\tdefine standard components implicitly and let users override some params only\n\treuse standard params across components\n\tdefine multiple param sets and mix and match these params at request time\n\n\n\nexample\n\n<!-- use json for all paths and _txt as the default search field-->\n<initParams name=\"global\" path=\"/**\">\n  <lst name=\"defaults\">\n     <str name=\"wt\">json</str>\n     <str name=\"df\">_txt</str>\n  </lst>\n</initParams>\n\n\n\nother examples\n\n\n<initParams name=\"a\" path=\"/dump3,/root/*,/root1/**\">\n    <lst name=\"defaults\">\n      <str name=\"a\">A</str>\n    </lst>\n    <lst name=\"invariants\">\n      <str name=\"b\">B</str>\n    </lst>\n    <lst name=\"appends\">\n      <str name=\"c\">C</str>\n    </lst>\n  </initParams>\n  <requestHandler name=\"/dump3\" class=\"DumpRequestHandler\"/>\n  <requestHandler name=\"/dump4\" class=\"DumpRequestHandler\"/>\n  <requestHandler name=\"/root/dump5\" class=\"DumpRequestHandler\"/>\n  <requestHandler name=\"/root1/anotherlevel/dump6\" class=\"DumpRequestHandler\"/>\n  <requestHandler name=\"/dump1\" class=\"DumpRequestHandler\" initParams=\"a\"/>\n  <requestHandler name=\"/dump2\" class=\"DumpRequestHandler\" initParams=\"a\">\n    <lst name=\"defaults\">\n      <str name=\"a\">A1</str>\n    </lst>\n    <lst name=\"invariants\">\n      <str name=\"b\">B1</str>\n    </lst>\n    <lst name=\"appends\">\n      <str name=\"c\">C1</str>\n    </lst>\n  </requestHandler>",
    "attachments": {
        "SOLR-6365.patch": "https://issues.apache.org/jira/secure/attachment/12665393/SOLR-6365.patch",
        "SOLR-6365-crappy-test.patch": "https://issues.apache.org/jira/secure/attachment/12678395/SOLR-6365-crappy-test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14094173",
            "date": "2014-08-12T15:35:16+0000",
            "content": "<params path=\"/some-other-path*\" defaults=\"a=b&c=d&e=f\" invariants=\"x=y\" appends=\"i=j\"/>\n\nthat's not even valid XML (bare &)\n\nand what does it even mean to say that you want to set some defaults and invariants on /some-other-path* if you don't configure any type of information about what handler /some-other-path* uses?\n\nhow would this kind of syntax help with \"...we can avoid specifying the components altogether and make solrconfig much simpler.\" ?\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14094181",
            "date": "2014-08-12T15:41:36+0000",
            "content": "I'm a bit puzzled too at what the point is here. From a sysadmin's standpoint,\nthis would move all the configuration (which is vitally important to me) to\nsome scattered code that lives on, like, people's personal laptops, a nightmare\nto administer.\n\nSo I guess you're thinking of some higher-level problem that this is part of,\nwhat is that problem? A REST API for solrconfig? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14094225",
            "date": "2014-08-12T16:05:10+0000",
            "content": "that's not even valid XML (bare &)\nyeah, you are right, according to xml standards it is not. But all parsers accept that  . But that is besides the point\n\nand what does it even mean to say that you want to set some defaults and invariants on /some-other-path/*  if you don't configure any type of information about what handler /some-other-path/ uses?\n\nYes, Looking from a user's point of view. They don't really think about the solr components. They assume that a given path , say /update, has certain capabilities and accepts certain parameters . For them it is not a component , it is just an API end point.  Yes, you can of course specify wrong parameters which you are free to do even now.  I'm not saying we will take away all configuration from solrconfig.xml . It is mainly for the fixed paths. \n\nThe other use case this addresses is our REST APIs.  It is managed completely outside of solrconfig.xml and there is no way to specify params . \n\nhow would this kind of syntax help with \"...we can avoid specifying the components altogether and make solrconfig much simpler.\" ?\n\nI'm thinking of fixing certain paths and avoiding certain common definitions in the xml file. We should make it fixed saying that certain paths and their parameters are fixed say /select , /update, /admin/* , /get etc. All I should be able to do is set params \n\nIn the current design it is impossible to have global level configurations which spans multiple components , say wt=json or df=text for all paths. \n\nSo I guess you're thinking of some higher-level problem that this is part of, what is that problem? A REST API for solrconfig?\n\nYes, you are right , this issue is not addressing that use case, But it becomes much simpler to provide an API to modify params than the entire components. Most often the usecase is about changing the params "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14094273",
            "date": "2014-08-12T16:26:53+0000",
            "content": "I like this idea. We can also provide a way to name a certain defaults/appends/invariants combination such that people can just provide a name while querying. This will become more powerful when we build REST APIs for creating/modifying such named param-sets.\n\nFrom a sysadmin's standpoint, this would move all the configuration (which is vitally important to me) to some scattered code that lives on, like, people's personal laptops, a nightmare to administer.\n\nI didn't get that impression from reading the description. What makes you say that? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14094276",
            "date": "2014-08-12T16:29:15+0000",
            "content": "We can also provide a way to name a certain defaults/appends/invariants combination \n\nI like that idea, naming a bunch of params and using it as a reference in queries "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14094578",
            "date": "2014-08-12T19:53:45+0000",
            "content": "naming a bunch of params and using it as a reference in queries\n\n+1, and I'll add a bit of interesting historical correlation to Ant's \"data types\" http://ant.apache.org/manual/using.html#path \n\nI'd suggest rather than trying to make the params be represented as HTTP query string fragments (a messy implementation detail, embedded solr usage for example doesn't need to talk HTTP or query strings), that they be <lst name=\"defaults\"><str name=\"param_name\">param_value</str></lst> kind of format.  In the spirit of the Ant, maybe something like:\n\n  <paramset id=\"my_facet_params\">\n    <lst name=\"defaults\">\n      <str name=\"facet.field\">category</str>\n      <!-- ... -->\n    </lst>\n  </paramset>\n\n\n\nAnd then request handlers could pick up one or more parameter sets such as /select?q=query&paramset=my_facet_params (or maybe &paramsets=my_facet_params,.... so they can be in guaranteed order of evaluation). "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14095230",
            "date": "2014-08-13T07:09:42+0000",
            "content": "There are clearly two aspects to this ticket. \n\nFirst and the important one is the ability to define params(or paramsets ) outside of components . Reference them by name in request/component config, or assign them to paths etc. I see params as just name-values used in requests or component initialization and not as integral parts of components.  While, we the devs ,see Solr as a system of carefully assembled components as per an xml configuration (solrconfig.xml) , the average user sees Solr as a server which supports a bunch of APIs (of http paths) . I don't see a reason why a certain component should not be there as long as it is not consuming resources (lazy loading) or is a security hole (Tika?) . So , all the paths are available all the time and fixed (unless a user explicitly overrides it) . Once we separate out the params we have better ways to configure them via REST apis or in a zookeeper node . \n\n\nThe second part is the syntax and we should move towards a syntax that is more palatable to the 'new generation' and not just the old timers.I'm sure we can arrive at a reasonably clean way to put them in solrconfig.xml and we should choose one that is best for our users . I see no reason to have type info (str,int,bool etc) in configuration when http has no ways to support them . So, all components will have to assume that all variables are strings and parse them accordingly .\n\ncompare the following \n\n<!-- use json for all paths and _txt as the default search field-->\n<params id=\"global\" path=\"/**\" defaults=\"wt:'json',df:'_txt'\"  />\n\n\n\nor \n\n\n<!-- use json for all paths and _txt as the default search field-->\n<params id=\"global\" path=\"/**\">\n  <lst name=\"defaults\">\n     <str name=\"wt\">json</str>\n     <str name=\"df\"_txt</str>\n  </lst>\n</params>\n\n\n\nPlease suggest other options if you can think of "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14095339",
            "date": "2014-08-13T10:11:39+0000",
            "content": "The second part is the syntax and we should move towards a syntax that is more palatable to the 'new generation' and not just the old timers\n\nI like the new syntax for defaults, appends and invariants.\n\nFirst and the important one is the ability to define params(or paramsets ) outside of components . Reference them by name in request/component config, or assign them to paths etc.\n\nWhere do I say that path=/search should be used for searching "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14095367",
            "date": "2014-08-13T11:19:17+0000",
            "content": "Where do I say that path=/search should be used for searching\n\nNo, users don't say  what is the there in the path /search . we should decide it for the users. But if the users insist on doing that they can do that. \n\nBTW you should look at SOLR-6191 and apply the patch and play with it . if you know any path and append /meta to that path and you will get the documentation on that path.\n\nfor instance /meta will tell you all the registered paths at the root. And /select will be listed there . If you hit /select/meta it will describe the capabilities+ params for /select \n\nAnd  planning to add more things such as /select/meta/stats should give you stats for /select\n\n\nThe objective is to take the focus away from the configuration xmls for the normal user and make the http end point act as the API and documentation "
        },
        {
            "author": "Varun Thacker",
            "id": "comment-14095387",
            "date": "2014-08-13T11:35:51+0000",
            "content": "Okay so you are saying we will have fixed paths defined in Solr - /select, /update, /get, /suggest, /spellcheck etc.\n\nNow all the user has to do is define his paramset. And then their API calls would look like - \n/select?q=foo&paramset=category-search\nOr\n/select/param-set-name?q=foo\n\nAlso if we are making this change would it also make sense to rename /select to /search ?\n\nHow does one plug in their custom component?\n\nBTW you should look at SOLR-6191 and apply the patch and play with it . if you know any path and append /meta to that path and you will get the documentation on that path.\n\nSounds awesome \n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14095392",
            "date": "2014-08-13T11:41:42+0000",
            "content": "How does one plug in their custom component?\n\nWe are not taking away the ability of user to define his own components. .He can still do that and everything will work just as fine. For standard components ,we will have them implicitly defined. But,  if the user overrides /update in solrconfig.xml , that will take precedence "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14109859",
            "date": "2014-08-25T22:20:00+0000",
            "content": "I'm going with the legacy solr way of doing this\n\n\n\n\n<!-- use json for all paths and _txt as the default search field-->\n<paramSet name=\"global\" path=\"/**\">\n  <lst name=\"defaults\">\n     <str name=\"wt\">json</str>\n     <str name=\"df\">_txt</str>\n  </lst>\n</paramSet>\n\n\n\n\nThe feature is more important than the syntax itself "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14115696",
            "date": "2014-08-29T19:22:54+0000",
            "content": "Fix with testcases. I plan to commit this soon "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14116199",
            "date": "2014-08-30T02:53:28+0000",
            "content": "Commit 1621414 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1621414 ]\n\nSOLR-6365: specify appends, defaults, invariants outside of the request handler "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14116453",
            "date": "2014-08-30T16:37:06+0000",
            "content": "Commit 1621489 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1621489 ]\n\nSOLR-6365: specify appends, defaults, invariants outside of the request handler "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14119064",
            "date": "2014-09-03T00:35:31+0000",
            "content": "Commit 1622156 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1622156 ]\n\nSOLR-6365 multiparamset bug "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14119425",
            "date": "2014-09-03T06:10:52+0000",
            "content": "Commit 1622168 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1622168 ]\n\nSOLR-6365 NPE bug "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14119430",
            "date": "2014-09-03T06:15:13+0000",
            "content": "Commit 1622169 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1622169 ]\n\nSOLR-6365 paramset bug "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14120740",
            "date": "2014-09-04T00:16:33+0000",
            "content": "Commit 1622384 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1622384 ]\n\nSOLR-6365 refactoring and cleanup "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14120744",
            "date": "2014-09-04T00:18:08+0000",
            "content": "Commit 1622385 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1622385 ]\n\nSOLR-6365 refactoring and cleanup "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14120759",
            "date": "2014-09-04T00:31:58+0000",
            "content": "Commit 1622387 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1622387 ]\n\nSOLR-6365 refactoring and cleanup "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14138731",
            "date": "2014-09-18T09:46:43+0000",
            "content": "Sorry for being late with feedback but I really think this shouldn't be called \"paramSet\". This is basically about refactoring the initial configuration for request handlers out of their section. In future when do have real query/param templates then this name will come back to bite us. We should call it what it is such as initArgs or something similar. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14138749",
            "date": "2014-09-18T10:10:48+0000",
            "content": "yeah let's make it initArgs how about just initParams ? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14138836",
            "date": "2014-09-18T11:55:06+0000",
            "content": "changed the tag name from <paramSet> to <initParams> "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14139323",
            "date": "2014-09-18T18:45:47+0000",
            "content": "Commit 1626045 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1626045 ]\n\nSOLR-6365 <paramSet> renamed to <initParams> "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14139363",
            "date": "2014-09-18T19:22:50+0000",
            "content": "Commit 1626052 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1626052 ]\n\nSOLR-6365 <paramSet> renamed to <initParams> "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14191265",
            "date": "2014-10-31T03:29:31+0000",
            "content": "Is this really unresolved at this point? Assuming so, I'll make the comments here but perhaps we should open a new JIRA instead.\n\nOn a trunk build with the stock Solr example I see\n  <initParams path=\"/update/**,/query,/select,/tvrh,/elevate,/spell,/browse\">\n    <lst name=\"defaults\">\n      <str name=\"df\">text</str>\n    </lst>\n  </initParams>\n\nI changed the df param in my /select requestHandler to:\n     <lst name=\"defaults\">\n       <str name=\"df\">name</str>\n     </lst>\n\nThen when I just issue ....collection1/select?q=whatever it parses to q=text:whatever rather than q=name:whatever, which is quite surprising.\n\nIs this the intended behavior? Or should defaults in the requestHandler override the initParams?\n\nEither way we need to do something. Either it's a bug in the current implementation and the defaults section of the individual handler should override the initParams or we should remove the defaults from all the request handlers in the sample solrconfig.xml. The current behavior is disconcerting to someone who hasn't followed this JIRA closely, i.e. almost all of our users.\n\nIf we remove the defaults section from the request handlers in solrconfig.xml, I think it would be best to make an explicit reference to initParams, we need to give users some clue what's going on here. This assumes that the notion of being able to call out initParams by ID didn't fall by the wayside.\n\nBut this will make the vexing problem with, say, people who remove the \"text\" field from schema.xml and then can't load cores soooo much easier to fix. Rather than finding all the places that the text field is referenced in solrconfig.xml and change them to something that is in the schema, there'll be just one place to change......\n\nI've attached a test case for the trunk illustrating. I labeled it totally-crappy because it should NOT be used verbatim, it's a miserable hack to illustrate. I changed solrconfig-minimal.xml and schema-tiny.xml and have NOT re-run all tests with those changes and I fully expect those changes will break something. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14191295",
            "date": "2014-10-31T03:49:00+0000",
            "content": "Is this the intended behavior? Or should defaults in the requestHandler override the initParams?\n\nIt is intended behavior, but is it desirable . We can of course change it "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14191310",
            "date": "2014-10-31T04:06:21+0000",
            "content": "I haven't thought about it too deeply. Off the top of my head, having locally-defined parameters override the initParams seems best. Say you want to have a different default search field for the /query handler and the /select handler, but want all the other params to remain the same. You could call out the initParams, but add a single param in the \"defaults\" section of one of the handlers. Not entirely sure it's a valid example, but you see where it's going.\n\nI don't feel super-strongly about either approach. I come down somewhat on the side of the individual request handlers being able to override the initParams on the basis that inevitably there'll be a questions like \"I just want to change one thing, why do I have to define a whole new initParams node?\".\n\nI'll argue though that we should make it harder to fall into the trap I just fell into; taking my experience with solrconfig.xml and thinking I knew what I was doing. We could accomplish this just by taking all the defaults, invariants etc out of the individual request handlers. This would at least cause some head-scratching, perhaps with a comment in solrconfig.xml directing them to the initParams (and possibly this JIRA or the Reference Guide?) to let people know where to look for all of the details. I flat guarantee that people will copy/paste their old defaults (& etc) sections from old solrconfig files to the new one and be puzzled if we don't direct their attention appropriately. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14191695",
            "date": "2014-10-31T11:09:41+0000",
            "content": "request_params > initParams> params in handler\n\nthis means the \n\nvalues are applied in that order for defaults and in the opposite order for invariants\n\nso if you used \"invariants\" in the request handler , it would have taken precedence over initParams\n\nWe can go either way\n\nI haven't thought about it too deeply. Off the top of my head, having locally-defined parameters override the initParams seems best. \n\nJust keep one thing in mind that \"invariants\" is expected to work differently than \"defaults\" "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14191831",
            "date": "2014-10-31T14:17:03+0000",
            "content": "Hmm, it seems more intuitive that the order be\n\ninitParams are superseded by params_in_handler which are superseded by request_params\n\nInvariants:\nRight, then I should think that the last step in the above is omitted.\ninitParams are superseded by params_in_handler\nand request_params are ignored.\n\nI guess my thinking is that initParams are the most general bucket, and users  may have reasons\nfor different handlers to override some of them and people issuing requests would have the\nlast chance to change them....\n\nI urge that we apply them in the same order for both invariants and defaults, I'd much rather\nlearn one rule than two, and I really don't want to explain it over and over an over again\nto confused users  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14191836",
            "date": "2014-10-31T14:20:34+0000",
            "content": "\nHmm, it seems more intuitive that the order be\n\ninitParams are superseded by params_in_handler which are superseded by request_params\n\nInvariants:\nRight, then I should think that the last step in the above is omitted.\ninitParams are superseded by params_in_handler\nand request_params are ignored.\n\n\n\n+1, I'm exactly with Erick Erickson on this. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14191849",
            "date": "2014-10-31T14:25:53+0000",
            "content": "agreed\nI shall change this right away "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14193733",
            "date": "2014-11-02T06:36:00+0000",
            "content": "changes the order of applying params.\nthe variables defined in the requesthandler will always override initParams "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14194477",
            "date": "2014-11-03T11:57:01+0000",
            "content": "Commit 1636330 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1636330 ]\n\nSOLR-6365 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14194479",
            "date": "2014-11-03T11:59:15+0000",
            "content": "Commit 1636331 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1636331 ]\n\nSOLR-6365 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14194483",
            "date": "2014-11-03T12:00:28+0000",
            "content": "done.\nThe new behavior is very simple. Whatever is put inside the <requestHandle> takes precedence over <initParams> "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14194582",
            "date": "2014-11-03T14:37:02+0000",
            "content": "Great! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-14203735",
            "date": "2014-11-09T02:28:49+0000",
            "content": "Noble Paul Can we close this JIRA? "
        },
        {
            "author": "David Smiley",
            "id": "comment-14203972",
            "date": "2014-11-09T16:08:11+0000",
            "content": "Wow I'm late to this; I wish there was a way to signal particular JIRA issues as worthy of more eyeballs.  \n\nThis feature reminds me of my feature-request \"request handler inheritance\" \u2013 SOLR-3293.  I understand the design goals of this new \"initParams\" feature and it's nice to see this accomplished.  What I don't like about the newly added \"initParams\" feature is that it seems redundant with request handlers themselves, and thus creates inevitable confusion as to what takes precedence, and it's another parameter (not a big deal but something), and it's another \"thing\" (the initParams) vs easily-grok'able feature of another \"thing\" (requestHandlers) which already exist.  With request handler inheritance, you could have /select and /mainSearch and /selectHighlight and /selectAutoSuggest or whatever.  Instead of making the parameter set the configurable thing that is managed by ZooKeeper & a REST API, why not do this for request handlers?\n\nWhat I like about user-created requestHandlers is (a) Solr keeps stats on them separately, and (b) they are easily distinguished in the URL.  Other things I like about them are achieved in this patch, like changing a parameter relevant for some searches but not for others.  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14218121",
            "date": "2014-11-19T16:47:20+0000",
            "content": "Commit 1640594 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1640594 ]\n\nSOLR-6365 \"implicit  requesthandler (specifiedin code) takes lower precedence over <initParams>\" "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14218130",
            "date": "2014-11-19T16:54:12+0000",
            "content": "Commit 1640595 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1640595 ]\n\nSOLR-6365 implicit requesthandler (specified in code) takes lower precedence over <initParams> "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14228864",
            "date": "2014-11-29T17:48:20+0000",
            "content": "Question: What's the application order of multiple initParams sections?\n\nI see in the current Solr 5 build that we have two initParams section, both applicable to /update/**. They do not conflict now, but there must be an implicit order in which they are applied, just in case somebody decides to do a Venn diagram of settings. \n\nI think, previously, the order was non-deterministic, as different components were just plucked out in whatever order. So, this might be the first time we need to care about this. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14229043",
            "date": "2014-11-30T08:58:26+0000",
            "content": "They do not conflict now, but there must be an implicit order in which they are applied, just in case somebody decides to do a Venn diagram of settings.\nThe order in which they are applied is in the order they are written in solrconfig.xml\n\nI see in the current Solr 5 build that we have two initParams section, both applicable to /update/**\n\none is a set of parameters applied on /update/** and the other is /update/json/docs . So, for the path /update/json/docs  both <initParams> are added up "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14250779",
            "date": "2014-12-17T23:15:36+0000",
            "content": "something isn't working right here.  \n\nthe techproducts example has the following...\n\n\n  <initParams path=\"/update/**,/query,/select,/tvrh,/elevate,/spell,/browse\">\n    <lst name=\"defaults\">\n      <str name=\"df\">text</str>\n    </lst>\n  </initParams>\n\n\n\n...but if you try to use /elevate like this...\n\nhttp://localhost:8983/solr/techproducts/elevate?q=ipod&enableElevation=true\n\n...you get 400 error...\n\n>> no field name specified in query and no default specified via 'df' param "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14251048",
            "date": "2014-12-18T02:35:09+0000",
            "content": "curious, let me check this "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14251368",
            "date": "2014-12-18T08:25:33+0000",
            "content": "Commit 1646401 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1646401 ]\n\nSOLR-6365 lazy loaded components did not have initParams applied "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14251372",
            "date": "2014-12-18T08:27:17+0000",
            "content": "Commit 1646402 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1646402 ]\n\nSOLR-6365 lazy loaded components did not have initParams applied "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14251374",
            "date": "2014-12-18T08:28:03+0000",
            "content": "when startup=\"lazy\" was specified , <initParams> were not applied "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-14267238",
            "date": "2015-01-07T03:33:34+0000",
            "content": "The matchPath(String path, String name) implementation is broken. It will match \"/update\" request against \"/update/json/docs\" and will use the later's defaults for the former.\n\nThe problem is with returning true when falling out of the loop when the name is a shorter prefix of path.\n\nI have noticed it in the debug log when I did an update request (on Solr 5) and saw the unexpected default:\n\nDEBUG - 2015-01-07 02:20:59.970; org.apache.solr.update.processor.LogUpdateProcessor; PRE_UPDATE add{,id=GB18030TEST} {{params({params(),defaults(mapUniqueKeyOnly=true&df=text&srcField=_src_)}),defaults(wt=xml)}}\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14267307",
            "date": "2015-01-07T06:10:50+0000",
            "content": "Commit 1649996 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1649996 ]\n\nSOLR-6365 bug fix matching wrong  name when it is a shorter prefix of path "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14267309",
            "date": "2015-01-07T06:12:47+0000",
            "content": "Commit 1649997 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1649997 ]\n\nSOLR-6365 bug fix matching wrong  name when it is a shorter prefix of path "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14267310",
            "date": "2015-01-07T06:13:10+0000",
            "content": "thanks Alexandre Rafalovitch . fixed "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14267671",
            "date": "2015-01-07T14:24:32+0000",
            "content": "Commit 1650064 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1650064 ]\n\nSOLR-6365 last commit caused regression "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14267673",
            "date": "2015-01-07T14:27:10+0000",
            "content": "Commit 1650065 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1650065 ]\n\nSOLR-6365 last commit caused regression "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14267932",
            "date": "2015-01-07T17:41:02+0000",
            "content": "Commit 1650125 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1650125 ]\n\nSOLR-6365 path /update/** should match /update as well "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14267933",
            "date": "2015-01-07T17:42:24+0000",
            "content": "Commit 1650126 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1650126 ]\n\nSOLR-6365 path /update/** should match /update as well "
        },
        {
            "author": "Martin Grotzke",
            "id": "comment-14332378",
            "date": "2015-02-22T21:15:22+0000",
            "content": "Moving to solr 5, I'm trying to configure the \"healthcheckFile\" for the PingRequestHandler.\n\nI added\n\n  <initParams path=\"/admin/ping\">\n    <str name=\"healthcheckFile\">server-enabled.txt</str>\n  </initParams>\n\n\nto solrconfig, unfortunately this did not do the trick. I had to configure the PingRequestHandler completely to get the healthcheckFile configured.\n\nMy assumption is that only appends, defaults and invariants can be specified outside of the component, so what I'm experiencing is expected and not a bug or an issue on my side. Is that correct? "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332683",
            "date": "2015-02-23T05:01:19+0000",
            "content": "Bulk close after 5.0 release. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14333010",
            "date": "2015-02-23T05:08:26+0000",
            "content": "Martin Grotzke Plz open a seprate ticket and I shall fix it in 5.1 "
        },
        {
            "author": "Martin Grotzke",
            "id": "comment-14336299",
            "date": "2015-02-25T09:41:44+0000",
            "content": "Noble Paul Sounds great, I submitted SOLR-7157 "
        }
    ]
}