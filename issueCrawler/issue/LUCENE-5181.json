{
    "id": "LUCENE-5181",
    "title": "Passage knows its own docID",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "4.4",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The new PostingsHighlight package allows for retrieval of term matches from a query if one creates a class that extends PassageFormatter and overrides format(). However, class Passage does not have a docID field, nor is this provided via PassageFormatter.format(). Therefore, it's very difficult to know which Document contains a given Passage.\n\nIt would suffice for PassageFormatter.format() to be passed the docID as a parameter. From the code in PostingsHighlight, this seems like it would be easy.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-08-19T19:39:25+0000",
            "content": "+1, I think this (pass docID as a parameter to PassageFormatter.format) is reasonable? ",
            "author": "Michael McCandless",
            "id": "comment-13744139"
        },
        {
            "date": "2013-08-22T13:09:10+0000",
            "content": "True, having the doc id would be useful there. Why not adding it directly to the Passage, to be able know which document the Passage comes from? ",
            "author": "Luca Cavanna",
            "id": "comment-13747493"
        },
        {
            "date": "2013-08-22T13:13:26+0000",
            "content": "Can you give a concrete example where docid is actually useful? ",
            "author": "Robert Muir",
            "id": "comment-13747499"
        },
        {
            "date": "2013-08-24T11:32:53+0000",
            "content": "Sure. I'm working in a high recall/low precision domain, where a large portion of the source documents are irrelevant junk. For their review, users are often presented with a match-oriented table view rather than a document-oriented table view, i.e., each row in the table represents a term match, generally with some context, and is joined with some document metadata.\n\nI can use the PassageFormatter to get access to the Passages in a result set, but it is hard to generate this table view without knowing which Document goes with the Passage. Additionally, a research problem I'm working on is using a combination of match properties and Document properties to score the individual matches (including metadata, like file type, created dates, etc.). The properties get normalized and fed into liblinear and out comes a score for us to sort on. This, too, is difficult without having the Document.\n\nHappy to contribute a patch if there's consensus. Passing in the docID via PassageFormatter.format is what I did, but that breaks backwards compatibility. It'd be easy enough to set on Passage as a field. ",
            "author": "Jon Stewart",
            "id": "comment-13749363"
        },
        {
            "date": "2013-08-24T15:28:28+0000",
            "content": "\nFor their review, users are often presented with a match-oriented table view rather than a document-oriented table view, i.e., each row in the table represents a term match, generally with some context, and is joined with some document metadata.\n\nHow does highlighting fit into this?\n\nMy general concern is that passing docid/encouraging the use of o.a.l.document.Document within passage-processing will mean that people are retrieving from the stored fields for every single match: and this would be very slow.\n\nAre you using highlighting to rank the most relevant sentences or do you really want to enumerate term matches? In the latter case Query.extractTerms() + TermsEnum.docsAndPositionsEnum(FLAG_OFFSETS) would be much more efficient. ",
            "author": "Robert Muir",
            "id": "comment-13749414"
        },
        {
            "date": "2013-08-26T13:35:47+0000",
            "content": "\nHow does highlighting fit into this?\n\n1. It's convenient to have the Passage snippet, for showing context around the term matches.\n\n2. It's very unclear how to actually retrieve term matches per doc given a TopDocs result set. This was the subject of recent mailing list traffic, and the PostingsHighlighter was suggested as the efficient way to do this, which led to this JIRA being opened. ",
            "author": "Jon Stewart",
            "id": "comment-13750086"
        }
    ]
}