{
    "id": "LUCENE-4335",
    "title": "Builds should regenerate all generated sources",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "We have more and more sources that are generated programmatically (query parsers, fuzzy levN tables from Moman, packed ints specialized decoders, etc.), and it's dangerous because developers may directly edit the generated sources and forget to edit the meta-source.  It's happened to me several times ... most recently just after landing the BlockPostingsFormat branch.\n\nI think we should re-gen all of these in our builds and fail the build if this creates a difference.  I know some generators (eg JavaCC) embed timestamps and so always create mods ... we can leave them out of this for starters (or maybe post-process the sources to remove the timestamps) ...",
    "attachments": {
        "LUCENE-4335.patch": "https://issues.apache.org/jira/secure/attachment/12542911/LUCENE-4335.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-28T19:25:25+0000",
            "content": "I think we should use replaceRegexp commands (like that are already there) to remove the various system information (time, paths, etc) that jflex/javacc/etc add from the generated code.\n\nthen we could have an 'ant regenerate' command that regens all sources, and our usual 'svn status' check would ensure nothing changed. ",
            "author": "Robert Muir",
            "id": "comment-13443427"
        },
        {
            "date": "2012-08-28T19:50:35+0000",
            "content": "Thats a good idea, there is one problem with one of the tools, not sure if jflex or javacc. It happens that one of these tools reorders the switch statement's \"case XX:\" labels and so creating different source. This seems to depend on JDK version used, if you regen again its the same, but often i changed the metafile (like fixing /** to /* for license) and regened, it was different order. The pattern looks like one of these tools use a HashSet/HashMap of \"case\" statements, where the order is undefined.\n\nWe should check what causes this.\n\nthen we could have an 'ant regenerate' command that regens all sources, and our usual 'svn status' check would ensure nothing changed.\n\nWe have to extend that one to also detect modifications. The current checker task only looks for unversioned files and checks properties. By this you can run it before commit. This one would need to check for mods, too. ",
            "author": "Uwe Schindler",
            "id": "comment-13443455"
        },
        {
            "date": "2012-08-28T19:57:43+0000",
            "content": "\nWe should check what causes this.\n\nI agree, this is always scary when it happens. It makes it harder to tell if something really changed. ",
            "author": "Robert Muir",
            "id": "comment-13443464"
        },
        {
            "date": "2012-08-28T21:37:43+0000",
            "content": "I'm not sure about Javacc, but I've seen JFlex reorder cases in switch statements, even when there are no .jflex source changes, when run under different JVM versions.  I recall seeing this specifically when generating under Java5 and Java6, both Oracle JVMs on Windows.\n\nI'll look into the generator to see how to fix the output order. ",
            "author": "Steve Rowe",
            "id": "comment-13443560"
        },
        {
            "date": "2012-08-29T10:31:59+0000",
            "content": "Small patch to have createLevAutomata.py do the hg checkout of moman under build/core/... instead of into the source tree. ",
            "author": "Michael McCandless",
            "id": "comment-13443948"
        },
        {
            "date": "2012-08-31T14:06:38+0000",
            "content": "I've seen JFlex reorder cases in switch statements, even when there are no .jflex source changes, when run under different JVM versions. I recall seeing this specifically when generating under Java5 and Java6, both Oracle JVMs on Windows.\n\nDawid sent me a patch to use LinkedHashMaps instead of HashMaps for the data structures emitted as switch cases, so insertion order will be the emit order.  I committed Dawid's patch to JFlex trunk r614.  Please update and rebuild to get the change. ",
            "author": "Steve Rowe",
            "id": "comment-13445966"
        },
        {
            "date": "2012-08-31T14:14:36+0000",
            "content": "is there a possibility of a jflex release in the future? It would be nice to regenerate it via IVY like javacc. ",
            "author": "Robert Muir",
            "id": "comment-13445978"
        },
        {
            "date": "2012-08-31T16:13:17+0000",
            "content": "is there a possibility of a jflex release in the future? It would be nice to regenerate it via IVY like javacc.\n\nI agree, it would be nice for several reasons to make JFlex downloadable via IVY.\n\nI had planned on working toward a JFlex release this summer, but haven't done any work on it yet. ",
            "author": "Steve Rowe",
            "id": "comment-13446083"
        },
        {
            "date": "2012-08-31T16:19:11+0000",
            "content": "Cool, i think it would be convenient for the long term: in the short\nterm I think we can still try to make some progress here towards something\nalong the lines of an 'ant regenerate'. \n\nI am thinking the easiest way is to just add a 'regenerate' task to \ncommon-build.xml that is a no-op by default, and then each module can do \nwhat it needs to do?\n\nThen we would just call it across the build.\n\nI think we should try to regenerate as much as possible (data too) when \nwe do this: e.g. kuromoji would call 'build-dict', icu module would\nregenerate its stuff, and so on. ",
            "author": "Robert Muir",
            "id": "comment-13446089"
        },
        {
            "date": "2012-08-31T16:22:58+0000",
            "content": "Generation of content that's static should be fine, but generation based on external content we don't control, e.g. rules matching TLDs generated for UAX29URLEmailTokenizer, shouldn't be a regular part of the build. ",
            "author": "Steve Rowe",
            "id": "comment-13446096"
        },
        {
            "date": "2012-08-31T16:30:21+0000",
            "content": "Right: in cases like that we should just not include it in 'ant regenerate' I think,\nunless we can find a way to make it static.\n\nroot TLDs have a registration date in the IANA database, and they don't ever get deleted\nright? ",
            "author": "Robert Muir",
            "id": "comment-13446101"
        },
        {
            "date": "2012-08-31T16:33:39+0000",
            "content": "Sorry, I don't know how the IANA database works.  I'll look into it though. ",
            "author": "Steve Rowe",
            "id": "comment-13446104"
        },
        {
            "date": "2012-08-31T17:56:12+0000",
            "content": "I'm not an expert either: I could be wrong about how it works. \n\nBut still I think we can make progress, excluding things like this from 'regenerate'\nand just try to have regenerate \"regenerate as much as possible\", hooking\nthis into the nightly build or something like that. ",
            "author": "Robert Muir",
            "id": "comment-13446180"
        },
        {
            "date": "2013-03-22T16:43:17+0000",
            "content": "[branch_4x commit] Michael McCandless\nhttp://svn.apache.org/viewvc?view=revision&revision=1381702\n\nLUCENE-4335: checkout Moman under build dir ",
            "author": "Commit Tag Bot",
            "id": "comment-13610903"
        },
        {
            "date": "2013-07-23T19:30:18+0000",
            "content": "First cut at top-level \"ant regenerate\"...\n\nSomething is still wrong w/ my ant changes because a top-level \"ant\nregenerate\" hits this:\n\n\nBUILD FAILED\n/l/trunk/lucene/build.xml:614: The following error occurred while executing this line:\n/l/trunk/lucene/common-build.xml:1902: The following error occurred while executing this line:\n/l/trunk/lucene/analysis/build.xml:139: The following error occurred while executing this line:\n/l/trunk/lucene/analysis/build.xml:38: The following error occurred while executing this line:\nTarget \"regenerate\" does not exist in the project \"analyzers-morfologik\". \n\n\n\nBut some of the generators make \"harmless\" mods to the sources,\ne.g. JavaCC does this:\n\n\nIndex: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream.java\n===================================================================\n--- lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream.java\t(revision 1506176)\n+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream.java\t(working copy)\n@@ -112,4 +112,4 @@\n   void Done();\n \n }\n-/* JavaCC - OriginalChecksum=c95f1720d9b38046dc5d294b741c44cb (do not edit this line) */\n+/* JavaCC - OriginalChecksum=53b2ec7502d50e2290e86187a6c01270 (do not edit this line) */\n\n\n\nJFlex does this:\n\n\nIndex: lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java\n===================================================================\n--- lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java\t(revision 1506176)\n+++ lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.java\t(working copy)\n@@ -1,4 +1,4 @@\n-/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 9/19/12 6:23 PM */\n+/* The following code was generated by JFlex 1.5.0-SNAPSHOT on 7/23/13 3:22 PM */\n@@ -33,8 +33,8 @@\n /**\n  * This class is a scanner generated by \n  * <a href=\"http://www.jflex.de/\">JFlex</a> 1.5.0-SNAPSHOT\n- * on 9/19/12 6:23 PM from the specification file\n- * <tt>C:/svn/lucene/dev/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.jflex</tt>\n+ * on 7/23/13 3:22 PM from the specification file\n+ * <tt>/l/trunk/lucene/analysis/common/src/java/org/apache/lucene/analysis/standard/ClassicTokenizerImpl.jflex</tt>\n  */\n class ClassicTokenizerImpl implements StandardTokenizerInterface {\n\n\n\nI was able to remove some timestamps from our own gen tools in\nanalysis/icu/src/tools (thanks Rob for the pointers!)...\n\nAlso, there seem to be some real cases where the generated code was\nchanged but not the generator, e.g. packed ints sources show real\ndiffs (and won't compile after regeneration... I haven't dug into this\nyet), and JFlex seemed to lose some @Overrides... ",
            "author": "Michael McCandless",
            "id": "comment-13717509"
        },
        {
            "date": "2013-07-23T19:31:12+0000",
            "content": "Commit 1506234 from Michael McCandless in branch 'dev/branches/lucene4335'\n[ https://svn.apache.org/r1506234 ]\n\nLUCENE-4335: make branch ",
            "author": "ASF subversion and git services",
            "id": "comment-13717511"
        },
        {
            "date": "2013-07-23T19:32:19+0000",
            "content": "Commit 1506240 from Michael McCandless in branch 'dev/branches/lucene4335'\n[ https://svn.apache.org/r1506240 ]\n\nLUCENE-4335: commit current patch ",
            "author": "ASF subversion and git services",
            "id": "comment-13717513"
        },
        {
            "date": "2013-07-23T19:33:04+0000",
            "content": "OK I made a branch https://svn.apache.org/repos/asf/lucene/dev/branches/lucene4335 and committed the last (broken, but a starting point) patch ... ",
            "author": "Michael McCandless",
            "id": "comment-13717515"
        },
        {
            "date": "2013-07-23T19:54:36+0000",
            "content": "Commit 1506248 from Michael McCandless in branch 'dev/branches/lucene4335'\n[ https://svn.apache.org/r1506248 ]\n\nLUCENE-4335: add empty target in common-build.xml ",
            "author": "ASF subversion and git services",
            "id": "comment-13717539"
        },
        {
            "date": "2013-07-23T20:23:51+0000",
            "content": "Commit 1506258 from Michael McCandless in branch 'dev/branches/lucene4335'\n[ https://svn.apache.org/r1506258 ]\n\nLUCENE-4335: fix generators to match recent code changes to the gen'd files ",
            "author": "ASF subversion and git services",
            "id": "comment-13717567"
        },
        {
            "date": "2013-07-23T21:04:13+0000",
            "content": "Commit 1506281 from Michael McCandless in branch 'dev/branches/lucene4335'\n[ https://svn.apache.org/r1506281 ]\n\nLUCENE-4335: add -r 623 to instructions for checking out jflex ",
            "author": "ASF subversion and git services",
            "id": "comment-13717620"
        },
        {
            "date": "2013-07-23T21:05:43+0000",
            "content": "Cool Mike: regenerate seems to be working!\n\nBut now I think we need to edit Uwe Schindler's groovy script to be a macro that fails also if any files were modified.\nWe should use this for verifying the regenerated sources have not changed.\nI think we should also use this in jenkins after running tests.\n\nThe precommit test can keep it off as it does now, but jenkins can be more strict. ",
            "author": "Robert Muir",
            "id": "comment-13717625"
        },
        {
            "date": "2013-07-23T21:08:09+0000",
            "content": "Commit 1506284 from Michael McCandless in branch 'dev/branches/lucene4335'\n[ https://svn.apache.org/r1506284 ]\n\nLUCENE-4335: don't regenerate for precommit ",
            "author": "ASF subversion and git services",
            "id": "comment-13717627"
        },
        {
            "date": "2013-07-23T23:02:20+0000",
            "content": "\nregenerateAndCheck:\n\nBUILD SUCCESSFUL\nTotal time: 57 seconds\n\n ",
            "author": "Robert Muir",
            "id": "comment-13717740"
        },
        {
            "date": "2013-07-24T09:04:04+0000",
            "content": "But now I think we need to edit Uwe Schindler's groovy script to be a macro that fails also if any files were modified.\n\nIf we change the top-level task that runs on ant validate, the problem with that is that you are then no longer be able to run validate on a modified checkout before committing. But I think you are thinking of running this check only on the generated files?\n\nWe could create a separate svnkit macro that does a before/after check. I am thinking about a groovy script that runs a check for modified files, saves that information in a Set<?>, then calls a subant with the regenerate task and runs the macro code again, this time adding to a different set. If the Sets are not identical something has changed \n\nI can assist with that! ",
            "author": "Uwe Schindler",
            "id": "comment-13718148"
        },
        {
            "date": "2013-07-24T11:20:21+0000",
            "content": "Uwe take a look at the branch.\n\nI didn't change the top-level task that runs on validate. i only changed the jenkins task.\nprecommit still does the same checks as before.\n\njenkins should not have modified files in any way... ",
            "author": "Robert Muir",
            "id": "comment-13718237"
        },
        {
            "date": "2013-07-24T11:22:44+0000",
            "content": "The thing stopping us from merging this branch to trunk right now is the jenkins configuration. To run regenerate, jenkins needs to have the correct versions installed of:\n\n\tmercurial (hg)\n\tjavacc\n\tjflex\n\ticu4c\n\n ",
            "author": "Robert Muir",
            "id": "comment-13718239"
        },
        {
            "date": "2013-07-24T11:30:39+0000",
            "content": "Hi Robert, that was an alternattive way to fix the precommit Task by a more intelligent approach.\n\nIn general my current problem is:\nI don't want to setup a fixed JFlex on Jenkins, I want to download it with IVY, so before resolving this issue we should have a JFlex version available. If Steve Rowe is not able to relaese the version on Maven, we should maybe fork jflex on Google Code and make a release including the ANT task.\n\nThe second problem in: Moman - I dont want to have Mercurial (hg) on Jenkins, this makes the setup much worse. Python on Windows is terrible already.\n\nIdeally, the sources generated by Python should be converted to a ant <script> task using jython. This would make setup easier. ",
            "author": "Uwe Schindler",
            "id": "comment-13718251"
        },
        {
            "date": "2013-07-24T11:33:31+0000",
            "content": "\n\n\tjavacc\n\n\n\nJavaCC is already downloaded from IVY in ANT ",
            "author": "Uwe Schindler",
            "id": "comment-13718255"
        },
        {
            "date": "2013-07-24T11:35:54+0000",
            "content": "Uwe: right, well then we can disable the jenkins task and merge this to trunk without the check.\n\nI dont think we should block this issue on shit like jflex releases (I look at my mailing list, last discussion about this was in 2009).... and this isnt my fault.\n\nIll back out the jenkins check, merge this to trunk, and open a new issue. ",
            "author": "Robert Muir",
            "id": "comment-13718256"
        },
        {
            "date": "2013-07-24T11:54:12+0000",
            "content": "Ill back out the jenkins check, merge this to trunk, and open a new issue.\n\nCan you provide a patch here, I just wanted to have a quick look! Otherwise if we leave out jenkins from the game at the moment and fix that in later issues and talk with Steve Rowe about releasing or forking JFlex. The Moan stuff should maybe downloaded as a ZIP file from the specific HG version (e.g. from Bitbucket as ZIP file using the commit hash) and unzipped. ",
            "author": "Uwe Schindler",
            "id": "comment-13718272"
        },
        {
            "date": "2013-07-24T12:08:04+0000",
            "content": "That can be in a new issue too. Its unrelated to what we are doing here. ",
            "author": "Robert Muir",
            "id": "comment-13718284"
        },
        {
            "date": "2013-07-24T12:12:43+0000",
            "content": "Here is the patch.\n\nbecause it adds a new target thats new and hurts no one, i plan to commit soon. ",
            "author": "Robert Muir",
            "id": "comment-13718290"
        },
        {
            "date": "2013-07-24T12:16:57+0000",
            "content": "+1 looks good\nWe can fix the remaing stuff on trunk.\n\nI am currently working on removing the HG clone. ",
            "author": "Uwe Schindler",
            "id": "comment-13718295"
        },
        {
            "date": "2013-07-24T12:20:09+0000",
            "content": "+1, patch looks great! ",
            "author": "Michael McCandless",
            "id": "comment-13718299"
        },
        {
            "date": "2013-07-24T12:21:05+0000",
            "content": "Commit 1506516 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1506516 ]\n\nLUCENE-4335: ant regenerate ",
            "author": "ASF subversion and git services",
            "id": "comment-13718302"
        },
        {
            "date": "2013-07-24T12:49:05+0000",
            "content": "Commit 1506533 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1506533 ]\n\nLUCENE-4335: Make moman not use HG anymore. Just download as ZIP from bitbucket and unzip ",
            "author": "ASF subversion and git services",
            "id": "comment-13718328"
        },
        {
            "date": "2013-07-24T13:14:55+0000",
            "content": "Commit 1506542 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1506542 ]\n\nLUCENE-4335: ant regenerate ",
            "author": "ASF subversion and git services",
            "id": "comment-13718347"
        },
        {
            "date": "2013-07-24T13:37:40+0000",
            "content": "Commit 1506548 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1506548 ]\n\nLUCENE-4335: Fix the bug with modifications on the SVN root folder ",
            "author": "ASF subversion and git services",
            "id": "comment-13718364"
        },
        {
            "date": "2013-07-24T13:42:20+0000",
            "content": "Commit 1506549 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1506549 ]\n\nMerged revision(s) 1506533 from lucene/dev/trunk:\nLUCENE-4335: Make moman not use HG anymore. Just download as ZIP from bitbucket and unzip\nMerged revision(s) 1506548 from lucene/dev/trunk:\nLUCENE-4335: Fix the bug with modifications on the SVN root folder ",
            "author": "ASF subversion and git services",
            "id": "comment-13718367"
        },
        {
            "date": "2013-07-24T13:42:21+0000",
            "content": "Commit 1506549 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1506549 ]\n\nMerged revision(s) 1506533 from lucene/dev/trunk:\nLUCENE-4335: Make moman not use HG anymore. Just download as ZIP from bitbucket and unzip\nMerged revision(s) 1506548 from lucene/dev/trunk:\nLUCENE-4335: Fix the bug with modifications on the SVN root folder ",
            "author": "ASF subversion and git services",
            "id": "comment-13718368"
        },
        {
            "date": "2013-07-29T21:07:47+0000",
            "content": "I don't want to setup a fixed JFlex on Jenkins, I want to download it with IVY, so before resolving this issue we should have a JFlex version available. If Steve Rowe is not able to relaese the version on Maven, we should maybe fork jflex on Google Code and make a release including the ANT task.\n\nI can't promise I'll release JFlex anytime soon, sorry.  If you want to fork, you can certainly do that.  FYI, Gerwin Klein, the JFlex founder, has done some work (maybe all that needs to be done? not sure at this point) to convert JFlex to a BSD license.  I'll review the source and see what state that effort is in - BSD licensing should simplify forking, I think. ",
            "author": "Steve Rowe",
            "id": "comment-13722974"
        },
        {
            "date": "2013-11-08T21:10:43+0000",
            "content": "Commit 1540187 from Ryan Ernst in branch 'dev/trunk'\n[ https://svn.apache.org/r1540187 ]\n\nLUCENE-4335: Add Namespaces to Expressions Javascript Compiler ",
            "author": "ASF subversion and git services",
            "id": "comment-13817683"
        },
        {
            "date": "2014-03-24T15:07:05+0000",
            "content": "As of the JFlex 1.5.1 upgrade (LUCENE-5552), the only changes I see after running ant regenerate at the top level are in the queryparser module:\n\n\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/CharStream.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/ParseException.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/Token.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/TokenMgrError.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/CharStream.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/ParseException.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/Token.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/TokenMgrError.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/CharStream.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/ParseException.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/QueryParser.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/Token.java\nM       lucene/queryparser/src/java/org/apache/lucene/queryparser/surround/parser/TokenMgrError.java\n\n\n\nMost of these are diamond operator issues: the generated source was manually converted to use the diamond operator, but the corresponding .jj files were not.  I removed the appropriate explicit types in the .jj files and ran ant regenerate, but JavaCC 5.0 doesn't like it:\n\n\njavacc-QueryParser:\n   [javacc] Java Compiler Compiler Version 5.0 (Parser Generator)\n   [javacc] (type \"javacc\" with no arguments for help)\n   [javacc] Reading from file /Users/sarowe/svn/lucene/dev/trunk7/lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/QueryParser.jj . . .\n   [javacc] org.javacc.parser.ParseException: Encountered \" \">\" \"> \"\" at line 225, column 47.\n   [javacc] Was expecting one of:\n   [javacc]     \"boolean\" ...\n   [javacc]     \"byte\" ...\n   [javacc]     \"char\" ...\n   [javacc]     \"double\" ...\n   [javacc]     \"float\" ...\n   [javacc]     \"int\" ...\n   [javacc]     \"long\" ...\n   [javacc]     \"short\" ...\n   [javacc]     \"?\" ...\n   [javacc]     <IDENTIFIER> ...\n   [javacc]     \n   [javacc] Detected 1 errors and 0 warnings.\n\n\n\nI see JavaCC 6.0 was recently released - maybe it can handle the diamond operator?\n\nOne other problem with some JavaCC-generated sources: the checksum seems to have somehow changed, even though nothing else has? - e.g. for the classic queryparser's CharStream.java:\n\n\nIndex: lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/CharStream.java\n===================================================================\n--- lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/CharStream.java   (revision 1580832)\n+++ lucene/queryparser/src/java/org/apache/lucene/queryparser/classic/CharStream.java   (working copy)\n@@ -112,4 +112,4 @@\n   void Done();\n \n }\n-/* JavaCC - OriginalChecksum=c847dd1920bf7901125a7244125682ad (do not edit this line) */\n+/* JavaCC - OriginalChecksum=30b94cad7b10d0d81e3a59a1083939d0 (do not edit this line) */\n\n\n\nOne last thing: I accidentally ran ant regenerate using Java8, and the supplementary character jflex macro files output by the icu module changed, and this caused the JFlex-generated scanner classes to change too.  On cursory inspection, some lines are reordered, but I wouldn't think that would trigger scanner class changes.  At a minimum, the output should be changed to have a fixed ordering.  ",
            "author": "Steve Rowe",
            "id": "comment-13945198"
        },
        {
            "date": "2014-03-24T15:31:12+0000",
            "content": "One other problem with some JavaCC-generated sources: the checksum seems to have somehow changed, even though nothing else has? - e.g. for the classic queryparser's CharStream.java:\n\nThis is because the checksum is generated on the binary input file. As I regenerated the files the last time and I have Windows CR-LF as line separator, the checksum was different. If you run JavaCC on Linux afterwards, the file checksum changes, unfortunately. I know about this problem, but I have no idea how to fix. I would remove the checkum from the files completely after regenerating (using a regex). We already have many regex replaces, this is just one more.\n\nI see JavaCC 6.0 was recently released - maybe it can handle the diamond operator?\n\nI would simply let JavaCC use old-style generics. We have no must to use diamonds. If generated code uses conventional declarations, it is no problem at all.\n\nIf we want to upgrade to JavaCC 6.0, we should carefully compare its output. If its identical, I have no problem with upgrading (if its available in Maven Central). ",
            "author": "Uwe Schindler",
            "id": "comment-13945214"
        },
        {
            "date": "2014-03-24T15:32:59+0000",
            "content": "One last thing: I accidentally ran ant regenerate using Java8, and the supplementary character jflex macro files output by the icu module changed, and this caused the JFlex-generated scanner classes to change too. On cursory inspection, some lines are reordered, but I wouldn't think that would trigger scanner class changes. At a minimum, the output should be changed to have a fixed ordering.\n\nJava 8 has a different hashing algorithm for string keys... The usual problem. ",
            "author": "Uwe Schindler",
            "id": "comment-13945215"
        },
        {
            "date": "2014-12-08T21:49:48+0000",
            "content": "I think it's really important that we test \"ant regenerate\" in Jenkins: we have many, many places that generate complex code, and users are finding problems (LUCENE-6102).\n\nMaybe for this issue, it's too ambitious for now to insist on \"no svn diffs after 'ant regenerate' \" ... can we relax this to say \"ant test\" should pass after ant regenerate and ignore any svn diffs (for a new, special Jenkins build) for starters? ",
            "author": "Michael McCandless",
            "id": "comment-14238510"
        },
        {
            "date": "2014-12-08T21:52:17+0000",
            "content": "+1 ! \n\nWe have to make some small progress. Just the other day i fixed 'ant regenerate' to actually create code for lucene/core that will actually compile. I think a job that just runs 'regenerate test' (but no svn status check afterwards) is a good interim solution.  ",
            "author": "Robert Muir",
            "id": "comment-14238514"
        },
        {
            "date": "2014-12-08T23:17:48+0000",
            "content": "I might be missing some of the more historical context, but why are generated sources part of SVN? I've seen other projects make compile depend on generate and that way there is no risk of attempting to edit generated files.\n\nThe disadvantages of this approach are increased build time and possibly not as portable across platforms, but I think those can both be worked through given enough time. ",
            "author": "Mike Drob",
            "id": "comment-14238643"
        },
        {
            "date": "2014-12-08T23:23:30+0000",
            "content": "There are a ton of reasons why:\n\n\tactually working with a modern IDE is important.\n\tsome are very slow, for example kuromoji compacts a segmentation model into data files.\n\tothers require tools like icu4c, python, mercurial, all kinds of stuff which must be installed on the machine.\n\n\n\nIts not feasible, and losing portability is not an option. ",
            "author": "Robert Muir",
            "id": "comment-14238655"
        },
        {
            "date": "2014-12-08T23:28:56+0000",
            "content": "Those are all good reasons! I would not submit a patch that does not address all of those issues.\n\nAssuming I can keep things working with IDEs, runs quickly (order of seconds), and doesn't need additional installed tools, would there be interest in working towards the goal of deleting sources from version control? Probably would happen one tool at a time. That's a big list of assumptions, so I can't promise to get everything, but I'm just trying to guage community interest in that direction. ",
            "author": "Mike Drob",
            "id": "comment-14238664"
        },
        {
            "date": "2014-12-08T23:39:54+0000",
            "content": "Well the easiest way would be to speed up the current regeneration? It currently takes 47 seconds.\n\nBut honestly I don't have a lot of confidence this stuff can be that much faster faster. Its not like we are making it intentionally ineffecient. Look at what some of the regenerators are doing... packing large FSTs of tokenization models, minimizing large jflex DFAs, etc.  ",
            "author": "Robert Muir",
            "id": "comment-14238681"
        }
    ]
}