{
    "id": "SOLR-4021",
    "title": "JavaBinCodec has poor default behavior for unrecognized classes of objects",
    "details": {
        "affect_versions": "4.0",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "It seems that JavaBinCodec has inconsistent serialize/deserialize behavior when dealing with objects of classes that it doesn't recognized.  In particular, unrecnognized objects seem to be serialized with the full classname prepented to the \"toString()\" value, and then that resulting concatentated string is left as is during deserialization.\n\nas a concrete example: serializing & deserializing a BigDecimal value results in a final value like \"java.math.BigDecimal:1848.66\" even though for most users the simple toString() value would have worked as intended.",
    "attachments": {
        "SOLR-4021.patch": "https://issues.apache.org/jira/secure/attachment/12772278/SOLR-4021.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13488041",
            "date": "2012-10-31T18:13:18+0000",
            "content": "https://mail-archives.apache.org/mod_mbox/lucene-solr-user/201210.mbox/%3CCAJX67vuAJzL98O7qdNwQ8q+Q791b5Tmh9_fsethLJ2OPe407-Q@mail.gmail.com%3E "
        },
        {
            "author": "David Fennessey",
            "id": "comment-13644485",
            "date": "2013-04-29T13:43:01+0000",
            "content": "Any news on this one? I'm getting the exact same issue in 4.2.1 "
        },
        {
            "author": "Sandro Mario Zbinden",
            "id": "comment-13751087",
            "date": "2013-08-27T08:49:23+0000",
            "content": "\nI am getting the same exception. With solr 4.2.1 and using partial updates configured like.\n\n\n\n\n    <updateHandler class=\"solr.DirectUpdateHandler2\">\n        <autoCommit>\n            <maxDocs>25000</maxDocs>\n            <maxTime>300000</maxTime>\n            <openSearcher>false</openSearcher>\n        </autoCommit>\n        <updateLog class=\"solr.FSUpdateLog\">\n            <str name=\"dir\">${solr.data.dir:}</str>\n        </updateLog>\n    </updateHandler>\n\n\n\nDavid Fennessey Did you find a way to manage this issue ? "
        },
        {
            "author": "David Fennessey",
            "id": "comment-13751094",
            "date": "2013-08-27T08:57:38+0000",
            "content": "Hi Sandro, \n\nWe found that the error message was more of a red herring rather than an actual data issue. The problem was that we were using the DataImportHandler and the new Atomic Updates simultaneously (for different types of updates). From what I understood, it would happen when they both tried accessing the same document before the updates were totally finished. Once we introduced basic semaphores which would ensure that both wouldn't run at the same time, we stopped seeing this error message. \n\nHope it helps!\n\nDave "
        },
        {
            "author": "Sandro Mario Zbinden",
            "id": "comment-13751269",
            "date": "2013-08-27T13:54:28+0000",
            "content": "Hey Dave\n\nThank you very much for the tip. The problem was exactly what you described. We were running a DataImport and in the same time we did an update with solrj (solserver.add(inputdocuments). We will implement a lock feature now that synchronized the calls between DataImport and the Update.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13751404",
            "date": "2013-08-27T16:32:40+0000",
            "content": "Sandro Mario Zbinden & David Fennessey: what you both seem to be describing sounds like it may be a distinct issue from what was initially reported here that may just happen to have a similar looking stack trace.\n\nThe initial problem report here should only be a factor if people try to index more complex objects then the JavaBinCodec is ment to deal with \u2013 but what you are describing sounds like a more basic thread safety concern when using atomic updates.\n\nI've opened SOLR-5194 as a new issue \u2013 if one or both of you could please post more specifics about the problems you have seen along with full stack traces from your logs it would be very helpful to get to the bottom of things. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13754152",
            "date": "2013-08-29T22:40:29+0000",
            "content": "It looks like DIH can produce BigDecimal values, which historically did not have support in Solr, and currently only has partial support.\nEither DIH needs to be changed to avoid BigDecimal, or we need to add better BigDecimal support (at a minimum, the JavaBin format, and perhaps to atomic updates too). "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13888314",
            "date": "2014-01-31T23:40:02+0000",
            "content": "I am getting reyplay_err I/O exceptions using Solr 4.5.1\n\n\norg.apache.solr.common.SolrException: ERROR: [doc=96in turlington natural cove basebruce!2190668] Error adding field 'weight'='java.math.BigDecimal:5.00' msg=For input string: \"java.math.BigDecimal:5.00\"\n\tat org.apache.solr.update.DocumentBuilder.toDocument(DocumentBuilder.java:167)\n\tat org.apache.solr.update.AddUpdateCommand.getLuceneDocument(AddUpdateCommand.java:77)\n\tat org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:215)\n\tat org.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:69)\n\tat org.apache.solr.update.processor.UpdateRequestProcessor.processAdd(UpdateRequestProcessor.java:51)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.doLocalAdd(DistributedUpdateProcessor.java:556)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.versionAdd(DistributedUpdateProcessor.java:692)\n\tat org.apache.solr.update.processor.DistributedUpdateProcessor.processAdd(DistributedUpdateProcessor.java:435)\n\tat org.apache.solr.update.UpdateLog$LogReplayer.doReplay(UpdateLog.java:1313)\n\tat org.apache.solr.update.UpdateLog$LogReplayer.run(UpdateLog.java:1202)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:471)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\nCaused by: java.lang.NumberFormatException: For input string: \"java.math.BigDecimal:5.00\"\n\tat sun.misc.FloatingDecimal.readJavaFormatString(FloatingDecimal.java:1241)\n\tat java.lang.Float.parseFloat(Float.java:452)\n\tat org.apache.solr.schema.TrieField.createField(TrieField.java:598)\n\tat org.apache.solr.schema.TrieField.createFields(TrieField.java:655)\n\tat org.apache.solr.update.DocumentBuilder.addField(DocumentBuilder.java:47)\n\tat org.apache.solr.update.DocumentBuilder.toDocument(DocumentBuilder.java:118)\n\t... 18 more\n\n "
        },
        {
            "author": "Peter Davis",
            "id": "comment-14606430",
            "date": "2015-06-29T21:22:43+0000",
            "content": "Using HttpSolrServer, the default settings work and object's toString() .\n\nUsing CloudSolrServer, suddenly custom objects we were passing as values are serialized as \"<classname>:<value>\" \u2013 a default that makes no sense and causes silent corruption!\n\nSo this is really an insidious issue due to the different behavior of HttpSolrServer and CloudSolrServer!  Forgetting to call toString() on our custom objects and BigDecimals leads to silent corruption with CloudSolrServer! "
        },
        {
            "author": "Gregg Donovan",
            "id": "comment-15004590",
            "date": "2015-11-13T19:45:41+0000",
            "content": "This patch adds BigDecimal support to javabin by serializing/deserializing as a string. The JavaDocs make toString sound like a reasonable way to serialize BigDecimal. "
        }
    ]
}