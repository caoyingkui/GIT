{
    "id": "SOLR-8973",
    "title": "TX-frenzy on Zookeeper when collection is put to use",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5.1",
            "5.6",
            "6.0.1",
            "6.1",
            "7.0"
        ],
        "affect_versions": "5.0,                                            5.1,                                            5.2,                                            5.3,                                            5.4,                                            5.5,                                            5.6,                                            6.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "This is to do with a distributed data-race. Core-creation happens at a time when collection is not yet visible to the node. In this case a fallback code-path is used which de-references collection-state lazily (on demand) as opposed to setting a watch and keeping it cached locally.\n\nDue to this, as requests towards the core mount, it generates ZK fetch for collection proportionately. On a large solr-cloud cluster, this generates several Gbps of TX traffic on ZK nodes. This affects indexing throughput(which floors) in addition to running ZK node out of network bandwidth. \n\nOn smaller solr-cloud clusters its hard to run into, because probability of this race materializing reduces.",
    "attachments": {
        "SOLR-8973.patch": "https://issues.apache.org/jira/secure/attachment/12798316/SOLR-8973.patch",
        "SOLR-8973-ZkStateReader.patch": "https://issues.apache.org/jira/secure/attachment/12798821/SOLR-8973-ZkStateReader.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-12T17:17:26+0000",
            "author": "Janmejay Singh",
            "content": "Patch allows a node to wait upto 1 minute for collection to become visible. The wait-time can perhaps be made configurable, but this is sufficient (because tick time on zk is usually 2 seconds and delay is never more than 2 ticks). ",
            "id": "comment-15237570"
        },
        {
            "date": "2016-04-12T22:23:36+0000",
            "author": "Erick Erickson",
            "content": "Is this related to https://issues.apache.org/jira/browse/SOLR-8416? ",
            "id": "comment-15238109"
        },
        {
            "date": "2016-04-13T06:32:25+0000",
            "author": "Janmejay Singh",
            "content": "No, SOLR-8416 deals with collections handler waiting for cores to be active, this deals with core-create handler waiting for collection definition to be known/visible (as published by collection-create operation). ",
            "id": "comment-15238702"
        },
        {
            "date": "2016-04-14T13:54:25+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks for the bug report, Janmejay Singh! There's definitely a race here but instead of waiting for the collection to be visible (which has its own problem that I'll describe later), we can simply call `ZkStateReader.addCollectionWatch` anyway (without checking if the collection exists already) which will force ZkStateReader to fetch the collection state from Zk and cache it.\n\nThe problem with waiting for the collection as done in this patch is that it is allowed for collections to be created using the core admin API directly i.e. the collection is created in ZK by the Overseer when the core publishes its state. So in such cases, you will see spurious waits. ",
            "id": "comment-15241188"
        },
        {
            "date": "2016-04-14T15:39:22+0000",
            "author": "Janmejay Singh",
            "content": "Won't the watch-setup fail when collection is not available on ZK? ",
            "id": "comment-15241372"
        },
        {
            "date": "2016-04-14T16:59:10+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Won't the watch-setup fail when collection is not available on ZK?\n\nThis is not possible because when a collection create API is invoked, the Overseer message handler will first create the collection in ZK, wait upto 30 seconds to see the collection in ZK and only then proceeds to create the cores. So the collection always exists in ZK when the core create is called and in such a case the watch-setup will always succeed. ",
            "id": "comment-15241505"
        },
        {
            "date": "2016-04-14T17:07:54+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "You may also be interested in SOLR-8327 which is a separate bug but has similar symptoms. ",
            "id": "comment-15241518"
        },
        {
            "date": "2016-04-14T17:43:22+0000",
            "author": "Janmejay Singh",
            "content": "No, there is a difference in what overseer and core-api (on a different node) see at the same instant. Some ZK nodes may be lagging (ZK does not ensure visibility of changes across all nodes at the same time), when clients can't tolerate delay in visibility of changes, they need to execute sync operation before read.\n\nOverseer's session may be connected to a zk-node that is ahead of the zk-node that the core-node is connected to. So while overseer sees the change, core-node will not (unless it executes sync before read).\n\nIf all nodes saw the same version as overseer, the race wouldn't exist at all.\n\nWe can change the patch to lazily setup watch for a collection that is fetched using active(on-demand) fetcher. In this model, once the fetch is done successfully, it will setup watch for the collection before returning the fetched collection-def. ",
            "id": "comment-15241580"
        },
        {
            "date": "2016-04-14T18:04:25+0000",
            "author": "Janmejay Singh",
            "content": "SOLR-8327 seems to propose the same thing except in the context of solrj client. I was suggesting the same approach as an viable alternative to wait (in this case we are not worried about #watches, because #watches would anyway have been the same had the delay not been present. ",
            "id": "comment-15241644"
        },
        {
            "date": "2016-04-14T18:18:04+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Ah, you are right that the watcher won't be set if the new collection's znode is not visible.\n\nBut the solution that I proposed will still work \u2013 if you see ZkStateReader.constructState(), you'll see that it tries to re-create the watcher every time a collection is in the \"interestingCollections\" set but neither in legacyCollectionStates nor in watchedCollectionStates. Since the constructState method is called each and every time any watched znode changes, the new collection's state will eventually be cached. I don't think that any alternate solution will achieve a better result. This may be a side-effect of the way the state is managed but it will work. We can document this as a code comment as well. The bug here is that we do not call ZkStateReader.addCollectionWatch at all if the collection is not visible to the node yet.\n\nScott Blum Since you recently wrote most of this state management code, what do you think? ",
            "id": "comment-15241669"
        },
        {
            "date": "2016-04-14T18:38:29+0000",
            "author": "Janmejay Singh",
            "content": "Cool, allow me some time to go trough the interestingCollections and watch-setup code. I'll upload a new patch tomorrow (assuming it won't throw any surprises our way). ",
            "id": "comment-15241695"
        },
        {
            "date": "2016-04-14T18:39:02+0000",
            "author": "Scott Blum",
            "content": "I'll need to look at the code again and run it to verify, but I'm 99% sure adding a collection watch to a non-existent collection will cause it to get mapped as soon as the collection's state node appears.  That was for sure my design intent, so if it doesn't work that way, it's a bug and I'll fix it ASAP.  I'll check it out and get back. ",
            "id": "comment-15241697"
        },
        {
            "date": "2016-04-14T21:06:58+0000",
            "author": "Scott Blum",
            "content": "Shalin Shekhar Mangar I've come to the conclusion that ZkStateReader isn't doing as well as it could be.  Adding watchers in constructState() seems (retroactively) like a hack.  It doesn't correctly cover the case where a collection parent node exists (e.g. /solr/collections/coll1) but no state.json child yet appears.\n\nI believe I have a patch and test to fix this.  Attached it to this JIRA, but not sure if I should create a new one. ",
            "id": "comment-15241923"
        },
        {
            "date": "2016-04-14T21:17:26+0000",
            "author": "Scott Blum",
            "content": "BTW: this may also fix a \"bug\" where we could queue more watchers than we need on a single node. ",
            "id": "comment-15241936"
        },
        {
            "date": "2016-04-15T09:45:42+0000",
            "author": "Janmejay Singh",
            "content": "What you suggested should work in either case (where core-admin RPC request arrives first, or when /collections path watch triggers first).\n ",
            "id": "comment-15242706"
        },
        {
            "date": "2016-04-15T09:46:32+0000",
            "author": "Janmejay Singh",
            "content": "I created this patch without applying Scott's patch. Let me know if rebase is required. ",
            "id": "comment-15242708"
        },
        {
            "date": "2016-04-19T06:49:48+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I really like Scott's solution. It explicitly handles the race condition in a clear way. But it is not complete i.e. we still need to modify ZkController to add a watch for the collection regardless of whether it is visible or not. So this patch merges both Scott's and Janmejay's patches. ",
            "id": "comment-15247269"
        },
        {
            "date": "2016-04-19T18:27:43+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "This is all yours Scott. Commit away! ",
            "id": "comment-15248360"
        },
        {
            "date": "2016-04-19T19:48:32+0000",
            "author": "Erick Erickson",
            "content": "Scott:\n\nAs it happens, I may be interested in this patch Real Soon Now and have access to a dev environment that would stress this a lot. How close do you think this is to being committable?  Or, more precisely, testable? The \"dev environment\" is expensive to run in this case, so when there's a patch you're satisfied with the patch I might be able to give a it a spin; it doesn't have to be committed.  Dev environment is 5x, do you think that matters?\n\nThanks!\nErick ",
            "id": "comment-15248485"
        },
        {
            "date": "2016-04-20T00:43:41+0000",
            "author": "Scott Blum",
            "content": "Anshum Gupta Landing this on master/6x now.  Another one to consider for 5.5.1 backport (and I'll volunteer). ",
            "id": "comment-15249048"
        },
        {
            "date": "2016-04-20T00:46:47+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 71a5870ae7022d7a30ebd1147de36c44aa14dc63 in lucene-solr's branch refs/heads/master from Scott Blum\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=71a5870 ]\n\nSOLR-8973: Zookeeper frenzy when a core is first created. ",
            "id": "comment-15249052"
        },
        {
            "date": "2016-04-20T00:57:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7c356bad06418d95c5394a7d7d5bf5e54cbf39bb in lucene-solr's branch refs/heads/branch_6x from Scott Blum\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7c356ba ]\n\nSOLR-8973: Zookeeper frenzy when a core is first created. ",
            "id": "comment-15249057"
        },
        {
            "date": "2016-04-20T05:49:43+0000",
            "author": "Anshum Gupta",
            "content": "+1 Scott! ",
            "id": "comment-15249310"
        },
        {
            "date": "2016-04-20T06:34:36+0000",
            "author": "Erick Erickson",
            "content": "+1 for 5.5.1 ",
            "id": "comment-15249369"
        },
        {
            "date": "2016-04-20T18:09:44+0000",
            "author": "Erick Erickson",
            "content": "Scott Blum So I just applied this as-is to 5.5 for my own exploration and it applied cleanly. Would that be what you expect?\n\nThanks,\nErick ",
            "id": "comment-15250408"
        },
        {
            "date": "2016-04-20T18:31:26+0000",
            "author": "Scott Blum",
            "content": "Yeah it wouldn't surprise me if it applies clean. ",
            "id": "comment-15250457"
        },
        {
            "date": "2016-04-20T23:11:12+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9c7a031f988a0fa3a15d6fc23f7269d0c12fae16 in lucene-solr's branch refs/heads/branch_5x from Scott Blum\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9c7a031 ]\n\nSOLR-8973: Zookeeper frenzy when a core is first created. ",
            "id": "comment-15250907"
        },
        {
            "date": "2016-04-20T23:13:43+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 802ee6f8c90ba6462f29c963a760aa1dfeeb09b1 in lucene-solr's branch refs/heads/branch_5_5 from Scott Blum\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=802ee6f ]\n\nSOLR-8973: Zookeeper frenzy when a core is first created. ",
            "id": "comment-15250913"
        },
        {
            "date": "2016-04-26T02:36:18+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Is SOLR-9001 (overseer exception in the OOTB cloud example) result of the same issue? Or is it something different? ",
            "id": "comment-15257454"
        },
        {
            "date": "2016-05-09T22:53:02+0000",
            "author": "Hoss Man",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 ",
            "id": "comment-15277240"
        },
        {
            "date": "2016-05-19T17:21:25+0000",
            "author": "Steve Rowe",
            "content": "Reopening to backport to 6.0.1. ",
            "id": "comment-15291566"
        },
        {
            "date": "2016-05-19T17:33:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b663e5bcad9974f2d80c16b85c862407a38290e0 in lucene-solr's branch refs/heads/branch_6_0 from Scott Blum\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b663e5b ]\n\nSOLR-8973: Zookeeper frenzy when a core is first created.\n\nFor branch_6_0: Modified ZkStateReaderTest to use ZkStateReader.updateClusterState() instead of .forceUpdateCollection(), since SOLR-8745 will land in 6.1. ",
            "id": "comment-15291599"
        },
        {
            "date": "2016-05-28T13:38:23+0000",
            "author": "Steve Rowe",
            "content": "Bulk close issues included in the 6.0.1 release. ",
            "id": "comment-15305360"
        }
    ]
}