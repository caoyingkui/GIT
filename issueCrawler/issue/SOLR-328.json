{
    "id": "SOLR-328",
    "title": "Proposal: ObjectField for storing and retrieving arbitrary serializable Objects",
    "details": {
        "affect_versions": "1.3",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A while back I developed a means of storing and retrieving arbitrary Objects in a Lucene Document [Field], and I thought that something similar might be useful for Solr.  Clearly, it will have more use in embedded Solr implementations, but there's no reason why remote clients couldn't share Object implementations and benefit too.\n\nI wanted to attach a draft implementation of ObjectField, a subclass of org.apache.solr.schema.FieldType, but I soon got lost in a sea of Solr Strings.  Instead, I've ended this message with code for getting and setting Object values in Lucene Fields.  Someone who's closer to Solr could easily include this in an implementation of ObjectField.\n\nThe approach uses Java serialisation, which is often seen as fragile in the sense that changes in class implementation can easily break the serialisation format.  However, imo that doesn't matter at all here: if a class's implementation changes all you'd need to do is re-index; and in any case object structure changes are nowhere near as common as object content changes, which are bread and butter to Solr.\n\nComments welcomed.  Oh, and since this is my first communication with Solr - thanks to all concerned for a great piece of software.\n\nJon\n========================================================\n\npublic static Object getObject(final Document document, final String fieldName) {\n\tfinal byte[] serialisation = document.getBinaryValue(fieldName);\n\n\ttry \n{\n\t\treturn new ObjectInputStream(new ByteArrayInputStream(serialisation)).readObject();\n\t}\n\tcatch (final Exception e) \n{\n\t\tthrow new SearchRuntimeException(\"While trying to deserialise object from Field\", e);\n\t}\n}\n\n\npublic static void indexObject(final Document document, final String fieldName, final Serializable object, final boolean compress) throws IndexingException {\n\tfinal ByteArrayOutputStream boas = new ByteArrayOutputStream();\n\n\ttry \n{\n\t\tObjectOutputStream oos = new ObjectOutputStream(boas);\n\t\toos.writeObject(object);\n\t\toos.close();\n\t}\n\tcatch (IOException e) \n{\n\t\tthrow new IndexingException(\"On trying to serialise object\", e);\n\t}\n\n\tdocument.add(new Field(fieldName, boas.toByteArray(), compress ? Store.COMPRESS : Store.YES));\n}",
    "attachments": {
        "ObjectField.patch": "https://issues.apache.org/jira/secure/attachment/12363528/ObjectField.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12518819",
            "date": "2007-08-09T19:16:55+0000",
            "content": "> but I soon got lost in a sea of Solr Strings.\nYes, some of the Strings are unfortunate... this was done before Lucene supported byte[] for stored fields.\nHopefully some day Lucene will support byte[] for indexed values as well, and then we'll really need a bit of a change \n\nBut it seems like a generic BinaryFieldType would be more broadly usable., and users could store whatever they want in it.  Solr could optionally even support indexing of a binary field even before lucene supports that (if stored-only, use lucene binary field, otherwise transform to string)\n\nFieldType now has toObject, which could efficiently return a byte[] for embedded use. "
        },
        {
            "author": "Jonathan Woods",
            "id": "comment-12518839",
            "date": "2007-08-09T20:30:19+0000",
            "content": "For what it's worth, I've attached a first attempt at an implementation of ObjectField, as a sub-class of FieldType, for the Solr-orchestrated storage and retrieval of serialisable objects in Lucene fields.  I considered naming the class BinaryField, but this really is about [de-]serialisation to and from serialisable Objects, not about generic binary storage.\n\nI'm sure there's plenty wrong with the semantics of the implementation, and I've not yet been able to use it in anger, but it might point up something useful.  At any rate, I look forward to being able to do in Solr-world what I'm currently doing using Lucene:\n\nfor (Hit hit: searchResults) \n{ Book book = (Book) LuceneDocumentHandler.getObject(hit.getDocument(), STORED_OBJECT_FIELD_NAME);  bookDetailsRenderer.render(book); }\n\nI've found rehydrating objects from Lucene a lot faster than regenerating them from my CMS's XML representation.  I'm not implying that stashing objects in Documents is always the way to go, just that it makes some difficult things trivially easy. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13579824",
            "date": "2013-02-16T16:21:24+0000",
            "content": "Cleaning up old JIRAs, re-open if necessary. Exists binary type now. "
        }
    ]
}