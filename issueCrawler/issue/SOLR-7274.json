{
    "id": "SOLR-7274",
    "title": "Pluggable authentication module in Solr",
    "details": {
        "components": [],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "5.2"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "It would be good to have Solr support different authentication protocols.\nTo begin with, it'd be good to have support for kerberos and basic auth.\n\nStarting point for documentation: https://cwiki.apache.org/confluence/display/solr/Security",
    "attachments": {
        "SOLR-7274-reconfigure-sdf-httpclient.patch": "https://issues.apache.org/jira/secure/attachment/12734325/SOLR-7274-reconfigure-sdf-httpclient.patch",
        "SOLR-7274.patch": "https://issues.apache.org/jira/secure/attachment/12724637/SOLR-7274.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-31T20:27:54+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I am working on implementing pluggable authentication support, initially supporting Kerberos and Basic Auth mechanisms. \n\nHere's a high level design that I'm working towards:\n\n\tAn authentication layer, consisting of plugins for each of the supported mechanisms, needs to be written to be invoked before the SolrDispatchFilter.\n\tThe configuration as to which plugin to be used, or if at all a security mechanism is needed, could come from ZK.\n\tEvery plugin's configuration (e.g. a keytab file path, service principal for kerberos) could be done using System.getProperties().\n\tThis authentication layer should ensure that the request, which leaves this layer and gets propogated down the chain, must, at least, have a java.security.Principal object associated with the request.\n\tThis user principal could be used, for example, by any downstream authorization layer (SOLR-7275) to perform fine grained access control based on requests, resources etc.\n\tAs for inter-node requests, the interfaces should support both (a) inter-node requests authenticating using the original user principal (where possible); as well as (b) inter-node requests authenticating using a node's own service principal.\n\n\n\n(SOLR-4470 has some context for this with respect to basic auth.) ",
            "id": "comment-14389336"
        },
        {
            "date": "2015-04-01T02:15:17+0000",
            "author": "Noble Paul",
            "content": "Users editing web.xml is not an option ",
            "id": "comment-14389888"
        },
        {
            "date": "2015-04-01T02:37:04+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I would think this one time editing would be performed by a security conscious system administrator, not a \"user\" per se. However, if even that is not a good idea, then, in such a case, the configuration properties can be fetched from ZK. Though, doing that would mean we wouldn't be able to support SolrCloud. ",
            "id": "comment-14389904"
        },
        {
            "date": "2015-04-01T03:03:33+0000",
            "author": "Noble Paul",
            "content": "I would think this one time editing would be performed by a security conscious system administrator, not a \"user\" per se.\n\nWe don't expose web.xml anymore. So it is not even something we would like to document. OTOH , A user would be hacking Solr to add a servlet filter . it could be an option for some esoteric custom authentication plugin. But , it cannot be an option that we document or recommend ",
            "id": "comment-14389918"
        },
        {
            "date": "2015-04-01T03:30:49+0000",
            "author": "Anshum Gupta",
            "content": "+1 on what Noble says.\n\nCan we use what Cloudera does? \nGregory Chanan, you might have something to say here.\n\nIdeally, we should not expose web.xml or any other jetty specific implementation detail to the end users. Perhaps configure this via environment variables? ",
            "id": "comment-14389933"
        },
        {
            "date": "2015-04-01T03:35:07+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Sure, sounds good. We could do the configuration via environment variables. I've modified my initial comment to reflect this. ",
            "id": "comment-14389935"
        },
        {
            "date": "2015-04-01T03:48:13+0000",
            "author": "Noble Paul",
            "content": "Let me give a thread dump of my thought process\n\n\n\tWe give an interface for an authentication plugin. The users can choose to use it or not use it (our basic impl must use it) . All it does is , return an instance of java.security.Principal. Solr would just set it to request.setAttribute(\"java.security.Principal\", principalObj).\n\tSolr would provide an interface the user can implement and we also give a mechanism to configure that.\n\tIf somebody wishes to implement this using a filter , they can still do the same without our plugin interface . Because, it just uses the servlet API. And, in that case they would NOT have an authentication plugin and Solr doesn't care . It only only cares about the request attribute. We will NOT have to support or document the filter mode. In the future, if we move away from a web container, all the plugins implemented using our API will be back compatible and we DO NOT have to offer any such guarantees to the filter based implementations\n\tThe authorization module would be passed the Principal and it can decide on how to authorize the Principal for the given request\n\tSolr would give an API and a mechanism  to configure the authorization plugin and . Solr will give  a basic impl for the same .\n\n ",
            "id": "comment-14389945"
        },
        {
            "date": "2015-04-01T06:00:06+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Even the basic auth implementation could be a plugin, just like kerberos and others, as per the design. Even if someone has a servlet filter to be used as a authentication mechanism, it can be wrapped around into the authentication layer as a plugin (since plugins could have servlet filter semantics). I've updated the design in my initial comment to reflect this, https://issues.apache.org/jira/browse/SOLR-7274?focusedCommentId=14389336&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14389336\n ",
            "id": "comment-14390032"
        },
        {
            "date": "2015-04-01T15:53:16+0000",
            "author": "Gus Heck",
            "content": "Doesn't Apache Shiro do all of this and give you an ini file with which to configure everything? They also have a web-app filtering system too (also see http://shiro.apache.org/web.html#Web-EnablingandDisablingFilters) ",
            "id": "comment-14390859"
        },
        {
            "date": "2015-04-02T04:19:02+0000",
            "author": "Gregory Chanan",
            "content": "Can we use what Cloudera does? Gregory Chanan, you might have something to say here.\n\nRight now we edit the web.xml.  Given that is going away, I don't have an objection to alternative configuration, whether in ZK, system props, some combination of those, etc.  What I'm not sure about is how you will make the configuration general enough without mentioning Filters.  I.e. will there be pre-approved authentication mechanisms?   Will I be able to write my own?\n\nThis discussion also seems focused on the server side.  Is the client side considered outside the scope of this jira?  (i'm thinking something like SOLR-6625, but SOLR-4470 is related).\n\nHere's a pointer to the server-side stuff we do at Cloudera.  I'm eager to contribute (or help contribute) this as part of a new authentication module.  I just want to make sure the pluggable authentication model is general enough for our use case.\n\nOur web.xml:\nhttps://github.com/cloudera/lucene-solr/blob/cdh5-4.4.0_5.3.2/solr/webapp/web/WEB-INF/web.xml\nThis adds two filters: HostnameFilter and SolrHadoopAuthenticationFilter.  Together these support:\n\n\tbasic auth\n\tkerberos auth\n\tproxy user support (like sudo, see https://hadoop.apache.org/docs/r1.2.1/Secure_Impersonation.html)\n\tdelegation token support (used for MR/spark related jobs: get an authentication token at the outset and use it throughout the job lifetime so you don't have to pass kerberos keytabs around the cluster)\n\n\n\nThe Filters:\nhttps://github.com/cloudera/lucene-solr/blob/cdh5-4.4.0_5.3.2/solr/core/src/java/org/apache/solr/servlet/HostnameFilter.java\nhttps://github.com/cloudera/lucene-solr/blob/cdh5-4.4.0_5.3.2/solr/core/src/java/org/apache/solr/servlet/SolrHadoopAuthenticationFilter.java \u2013 Note this supports delegation tokens.\n\nSome tests around the various functional pieces:\nhttps://github.com/cloudera/lucene-solr/blob/cdh5-4.4.0_5.3.2/solr/core/src/test/org/apache/solr/servlet/SolrHadoopAuthenticationFilterTest.java\nhttps://github.com/cloudera/lucene-solr/blob/cdh5-4.4.0_5.3.2/solr/core/src/test/org/apache/solr/servlet/SolrHadoopAuthenticationFilterProxyUserTest.java\nhttps://github.com/cloudera/lucene-solr/blob/cdh5-4.4.0_5.3.2/solr/core/src/test/org/apache/solr/servlet/SolrHadoopAuthenticationFilterDelegationTokenTest.java\nhttps://github.com/cloudera/lucene-solr/blob/cdh5-4.4.0_5.3.2/solr/core/src/test/org/apache/solr/servlet/HostnameFilterTest.java ",
            "id": "comment-14392112"
        },
        {
            "date": "2015-04-02T15:18:46+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Gregory Chanan Thanks for pitching in! Cloudera's implementation was actually one of my starting points when I started looking into this.\n\nWhat I'm not sure about is how you will make the configuration general enough without mentioning Filters. I.e. will there be pre-approved authentication mechanisms? Will I be able to write my own?\n\nMy thought was to have configurations actually mention the filters (which may deal with any authentication mechanism, not just preapproved ones), without the user having to add it to the web.xml. For instance (and this may look different in the implementation), a user could have a configuration as \"HostnameFilter,SolrHadoopAuthenticationFilter\" and the authentication layer (which might itself be a servlet filter) would call the doFilter() on each of the two filters.\n\nThis discussion also seems focused on the server side. Is the client side considered outside the scope of this jira? (i'm thinking something like SOLR-6625, but SOLR-4470 is related).\n\nClient side configurations are in the scope of pluggable items for each authentication mechanism. My thought was that this issue (SOLR-7274) could leverage the callback \"frameworks\" of SOLR-6625, SOLR-4470 and focus on the pluggable aspects of the configurations for each authc mechanism. ",
            "id": "comment-14392816"
        },
        {
            "date": "2015-04-02T15:24:44+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Doesn't Apache Shiro do all of this and give you an ini file with which to configure everything? They also have a web-app filtering system too (also see http://shiro.apache.org/web.html#Web-EnablingandDisablingFilters)\n\nI did have a look at Shiro, but my initial thought was that it might not fit our bill due to a couple of reasons:\n\n\tShiro doesn't have out of the box support for Kerberos\n\tShiro's commit patterns indicated that it is not a very active project at the moment, and hence I wasn't sure if having Solr depend on Shiro was a good idea.\n\n\n\nMaybe someone more experienced with Shiro might help me understand if this isn't true. Hadoop Common's hadoop-auth library seems easier to leverage here, esp. for Kerberos, and it is already a dependency for Solr. ",
            "id": "comment-14392822"
        },
        {
            "date": "2015-04-10T19:38:22+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Added an initial patch, mainly focussing around the pluggable framework part.\n\nIt defines an AuthenticationLayerFilter which is called just before the SolrDispatchFilter. The AuthenticationLayerFilter (during its init()) looks for a AuthenticationLayerPlugin classname from the following places, in order, (a) ZK's clusterprops.json containing an \"authcPlugin\" property, (b) System property \"authcPlugin\". \n\nAuthenticationLayerPlugin has the following interface:\n\n\npublic interface AuthenticationLayerPlugin {\n  \n  public void init(FilterConfig conf);\n  \n  public void doAuthenticate(ServletRequest req, ServletResponse rsp,\n      FilterChain chain) throws Exception;\n\n  public HttpClientConfigurer getDefaultConfigurer();\n}\n\n\n\nA reference Kerberos authentication plugin, based on the hadoop-auth's AuthenticationFilter, is included in the patch. \n\nOn the server side, the plugin contains a filter, called KerberosFilter, whose properties (e.g. keytab, service principal etc.) are populated from system properties.\n\nOn the client side (also used for internode communication), an extended HttpClientConfigurer instance (derived from Cloudera's implementation) is used to configure the HttpClient used by HttpSolrClient. It uses a jaas config file from the system property \"java.security.auth.login.config\" containing client's keytab and user principal. For repeatable requests through the HttpSolrClient, I've wrapped around the request entities in BufferedHttpEntity. Currently, in this patch, no extra authentication metadata is being passed around from main request to sub request for now. Going forward, a generic callback framework might be more desireable, e.g. SOLR-6625.\n\nHere's how I start and test this:\n\nHere's my clusterprops.json in ZK, before starting solr (if one doesn't want to use ZK for this, could pass -DauthcPlugin=org.apache.solr.security.KerberosPlugin to start script):\n\n{\"authcPlugin\":\"org.apache.solr.security.KerberosPlugin\"}\n\n\n\nHere's my start command:\n\nbin/solr -c -z localhost:2181 -a \"-Djava.security.auth.login.config=/home/ishan/jaas-client.conf \n\\     -Dcookie.domain=192.168.0.107 -Dkerberos.principal=HTTP/192.168.0.107@EXAMPLE.COM \n\\     -Dkerberos.keytab=/tmp/107solr.keytab\"\n\n\n\nHere's my /home/ishan/jaas-client.conf file:\n\n\nSolrClient {\n com.sun.security.auth.module.Krb5LoginModule required\n useKeyTab=true\n keyTab=\"/tmp/107solr.keytab\"\n storeKey=true\n useTicketCache=true\n debug=true\n principal=\"HTTP/192.168.0.107@EXAMPLE.COM\"; \n};\n\n\n\nHere's a way to test:\n\nkinit\ncurl --negotiate -u : \"http://192.168.0.107:8983/solr/\"\n\n ",
            "id": "comment-14490230"
        },
        {
            "date": "2015-04-11T01:04:18+0000",
            "author": "Gregory Chanan",
            "content": "Some initial thoughts...\n\n\n--- solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java\t(revision 1672548)\n+++ solr/core/src/java/org/apache/solr/handler/component/HttpShardHandler.java\t(working copy)\n@@ -215,7 +215,7 @@\n           if (urls.size() <= 1) {\n             String url = urls.get(0);\n             srsp.setShardAddress(url);\n-            try (SolrClient client = new HttpSolrClient(url, httpClient)) {\n+            try (SolrClient client = new HttpSolrClient(url)) {\n               ssr.nl = client.request(req);\n             }\n           } else {\n\n\nWhy this change?\n\n2.  Can we comment on the AuthenticationLayerPlugin?  I don't think it's obvious what needs to be implemented\n\n3.      params.put(\"token.valid\", System.getProperty(\"kerberos.name.rules\", \"30\"));\nThis doesn't look correct\n\n4.  Using \"SolrClient\" instead of whatever zookeeper uses (default \"Client\", see the code I linked above) for the jaas configuration app name will cause you to have to deal with two issues.  I'm not against doing something different here, just pointing out that these problems need to be solved before you can make this change:\nA) kerberos tickets need to be refreshed.  The zookeeper client automatically refreshes kerberos tickets, so if you just use the same configuration and app name, that's handled for you.  If you want to use something different, you'll have to write code to refresh the tickets.  This also means you only refresh the code when using zookeeper (i.e. SolrCloud)...you might want to pull out support for specifying the plugin via system props (so you know they have to be using solrcloud in order to read the zk props), or may want to add some error checking.\nB) assuming you want to use the same properties for talking to zookeeper as talking to other solr servers, you'll have to specify the jaas entry twice (once for SolrClient, once for Client or whatever zookeeper is using (ZooKeeperSaslClient.LOGIN_CONTEXT_NAME_KEY).  Or you may be able to change how we handle zookeeper sasl (see SaslACLProvider, I think you'd have to write a Credentials provider?).\nAs I said, I'm not against doing this, it just introduces additional issues for a first version.  The code I linked above just uses whatever zookeeper users.\n\n5. In HttpSolrClient.java: \"postOrPut.setEntity(new BufferedHttpEntity(postOrPut.getEntity()));\"\nWhy are we always buffering the http entities?  That seems like something that should be handled by the authentication plugin, i.e. usually we don't buffer.  If we are using kerberos, we set up a client configurer that is smart enough to handle the http requests for that authentication scheme (here buffering is probably fine for the initial version, there are some discussions of an optimization in SOLR-6625).  See this comment in SOLR-6625 for some implementation ideas https://issues.apache.org/jira/browse/SOLR-6625?focusedCommentId=14238865&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14238865\n\n6.  This doesn't seem to handle forwarding requests in the SolrDispatchFilter.  There's more discussion in SOLR-6625, see here: https://issues.apache.org/jira/browse/SOLR-6625?focusedCommentId=14239957&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14239957\nI don't know how to solve that without implementing SOLR-6625, though. ",
            "id": "comment-14490669"
        },
        {
            "date": "2015-04-12T02:50:37+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for putting up this patch Ishan.\nI just had a quick look and most of my concerns were covered by Gregory Chanan! Thanks for looking at this. It would be good to have more details about AuthenticationLayerPlugin and what needs to be implemented.\n\n3. params.put(\"token.valid\", System.getProperty(\"kerberos.name.rules\", \"30\"));\nThis doesn't look correct\nThis just seems like a typo.\n\nThis change I assume is also just for the purpose of testing/dev, right?\n\n-log4j.logger.org.apache.hadoop=WARN\n+log4j.logger.org.apache.hadoop=TRACE\n\n\n\nAbout forwarding of requests, do you think we could borrow the code to send a repeatable request beforehand in case of POST/PUT? Or does it make sense to fix SOLR-6625 ?\n\nMinor but can you also fix the parameters to more understandable names instead of arg(0|1|..)?\n\nMost importantly, unless I'm missing out on something, are you propagating the userPrincipal out of the plugin and back to Solr? ",
            "id": "comment-14491303"
        },
        {
            "date": "2015-04-13T15:59:19+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Some initial thoughts...\nGregory Chanan, thanks a lot for your review!\n\n\n\n\n\ttry (SolrClient client = new HttpSolrClient(url, httpClient)) {\n+            try (SolrClient client = new HttpSolrClient(url)) {\nWhy this change?\n\n\n\nI couldn't think of a way to configure the httpclient used by the HttpShardHandler for inter node communication. This was because by the time the plugin's init() did a HttpClientUtils.setConfigurer() with the plugin's httpclient configurer, the default httpclient used by the HttpShardHandler and its factory was already configured by the stock HttpClientConfigurer. So, to go ahead with the rest of my testing, I made had used this hack, which in effect created a new httpclient for every request (and thus used the plugin's configurer). \n\nNow, I've fixed this 1 by adding a reconfigureHttpClient() method for the ShardHandlerFactory. \n\n\n2. Can we comment on the AuthenticationLayerPlugin? I don't think it's obvious what needs to be implemented\n\nI've added some javadocs 1. \n\n\npublic interface AuthenticationLayerPlugin {\n\n  /**\n   * This is called upon loading up of a plugin, used for setting it up.\n   * @param filterConfig used for any configs passed in from the servlet filter \n   * config, or for access to the servlet context.\n   * @param zkController the zk controller\n   */\n  public void init(FilterConfig filterConfig, ZkController zkController);\n \n  /**\n   * This method must authenticate the request. Upon a successful authentication, this \n   * must call the next filter in the filter chain and set the user principal of the request,\n   * or else, upon an error or an authentication failure, throw an exception.\n   * \n   * @param request the http request\n   * @param response the http response\n   * @param filterChain the servlet filter chain\n   * @throws Exception any exception thrown during the authentication, e.g. \n   * PriviledgedAccessException\n   */\n  public void doAuthenticate(ServletRequest request, ServletResponse response,\n      FilterChain filterChain) throws Exception;\n\n  /**\n   * \n   * @return Returns an instance of a HttpClientConfigurer to be used for configuring the\n   * httpclients for use during internode communication.\n   */\n  public HttpClientConfigurer getDefaultConfigurer();\n}\n\n\n\nDo you think it is clearer now? Also, do you have any questions or suggestions for a change to the interface?\n\n\n\n 3. params.put(\"token.valid\", System.getProperty(\"kerberos.name.rules\", \"30\"));\nThis doesn't look correct\n\nOops, fixed 1. Over zealous copy-pasting.\n\n\n\n5. In HttpSolrClient.java: \"postOrPut.setEntity(new BufferedHttpEntity(postOrPut.getEntity()));\"\n...\nwe set up a client configurer that is smart enough to handle the http requests for that authentication scheme\n\nThanks for the pointer! I had put it in there, thinking of ways to fix it in a subsequent patch. The HttpRequestInterceptor seems like a much cleaner way than I had initially planned for. I've updated the patch to reflect this 1.\n\n\n\n\n6. This doesn't seem to handle forwarding requests in the SolrDispatchFilter.\n...\n I don't know how to solve that without implementing SOLR-6625, though.\n\nAfter the change to add a reconfigureHttpClient() to ShardHandlerFactory 1, the SolrDispatchFilter's remoteQuery() now works. Do you see any problem with that in the patch 1 / have I missed something?\n\n\n\n\n4. ....\n Using \"SolrClient\" instead of whatever zookeeper uses (default \"Client\", see the code I linked above) for the jaas configuration app name will cause you to have to deal with two issues.\n\nThe reason why I went with a different app name for ZK and solr clients in the patch was that in my dev testing environment, zk wasn't kerberized, and hence I wanted to use plain unsecured connection to zk, while using kerberos based authc for Solr. I don't know how users actually setup their deployments of ZK and Solr, so I am looking for suggestions on how to go about it. I wasn't aware of the side effect of refreshing of tickets, so that seems like a great benefit. Do you think the plugin should should support both (1. same jaas configs for zk & solr clients, and 2. different jaas configs for zk and solr clients), configureably? Of course, that would involve code for refreshing credentials, but maybe some generic hooks for this in an \"pluggable authentication framework\" might be handy anyway?\n\n\n[1] I'll add the patch shortly ",
            "id": "comment-14492547"
        },
        {
            "date": "2015-04-13T16:14:51+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks Anshum Gupta for your review!\n\nThis change I assume is also just for the purpose of testing/dev, right?\nOh yes, and it was very helpful. But, I've removed it from the next patch.\n\nAbout forwarding of requests, do you think we could borrow the code to send a repeatable request beforehand in case of POST/PUT? Or does it make sense to fix SOLR-6625 ?\n\nPOST/PUT requests are implementations of HttpEntityEnclosingRequestBase, and in this patch, I've wrapped such entities inside a BufferedHttpEntity (in Krb5HttpClientConfigurer) to take care of repeatable requests.\n\nMost importantly, unless I'm missing out on something, are you propagating the userPrincipal out of the plugin and back to Solr?\n\nThe plugin should set the user principal to the request so that req.getUserPrincipal() returns a javax.security.Principal object. The way this can be done is to use a HttpServletRequestWrapper in the plugin. Would you instead prefer that we use an internal solr header / parameter for passing along the user principal? ",
            "id": "comment-14492567"
        },
        {
            "date": "2015-04-13T16:27:12+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Added an updated patch (still WIP). This has:\n\n\tUsing HttpRequestInterceptor to wrap up the entity into BufferedHttpEntity\n\tAdding a zk controller instance to a plugin's init()\n\tAdding support to reconfigure the already configured httpclients of ShardHandlerFactory using the plugin's httpclient configurer. This is for the httpclients used during internode communication.\n\n\n\nStill TODO:\n\n\tTests\n\tSolrCLI, bin/solr script to use authentication\n\tRefreshing kerberos credentials (for the kerberos plugin). Maybe go with cloudera's approach, to keep things simple, by using the zk jaas configs for solr clients?\n\t...\n\n ",
            "id": "comment-14492590"
        },
        {
            "date": "2015-04-21T19:03:26+0000",
            "author": "Anshum Gupta",
            "content": "Yet to look at the patch but you shouldn't be passing zkController instance to the init. You might want to piggy back on what I'm trying to do in SOLR-7275 i.e. read and pass the JSON/Map to the init instead of the zkController.\nI'll provide more feedback once I have a look at the patch. ",
            "id": "comment-14505531"
        },
        {
            "date": "2015-04-24T21:48:01+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Splitting out the framework (here) and the kerberos plugin (SOLR-7468). Here's a patch with just the plugin framework. ",
            "id": "comment-14511843"
        },
        {
            "date": "2015-04-27T12:40:01+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the patch to trunk.\n\nI'm working on integrating the ZK configuration part of SOLR-7275. Right now, to use authc, the \"authcPlugin\" system property can be used. This will go away in a subsequent patch.\n\nHere's an example of starting Solr with SOLR-7468 also applied:\n\nbin/solr -c -z localhost:2181 -a \"-Djava.security.auth.login.config=/home/ishan/jaas-client.conf -Dcookie.domain=192.168.0.107 -Dkerberos.principal=HTTP/192.168.0.107@EXAMPLE.COM -Dkerberos.keytab=/tmp/107solr.keytab -DauthcPlugin=org.apache.solr.security.KerberosPlugin\"\n\n ",
            "id": "comment-14514063"
        },
        {
            "date": "2015-05-01T20:48:42+0000",
            "author": "Don Bosco Durai",
            "content": "Ishan Chattopadhyaya, I had some issues running with the above syntax. The code is expecting that -Dsolr.hdfs.security.kerberos.keytabfile passed. I have not yet traced through the code, but maybe some other defaults are kicking in and expecting the above property.\n\nMy working syntax is below. I think, -Dkerberos.keytab is not getting into affect. \n\nbin/solr -c -z localhost:2181 -a \"-Djava.security.auth.login.config=$HOME/conf/jaas-client.conf -Dcookie.domain=`hostname -f` -Dkerberos.principal=HTTP/`hostname -f`@EXAMPLE.COM -Dkerberos.keytab=/keytabs/http.keytab -DauthcPlugin=org.apache.solr.security.KerberosPlugin -Dsolr.hdfs.security.kerberos.keytabfile=/keytabs/http.keytab\"\n ",
            "id": "comment-14523901"
        },
        {
            "date": "2015-05-12T00:39:56+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the patch, now uses ZK changes (/security.json) from SOLR-7275. Please apply SOLR-7275 patch first before this. ",
            "id": "comment-14538987"
        },
        {
            "date": "2015-05-12T08:30:03+0000",
            "author": "Don Bosco Durai",
            "content": "Ishan Chattopadhyaya, thanks for uploading the updated patch. Can you give the sample json for configuring the kerberos plugin?\n\nThanks ",
            "id": "comment-14539509"
        },
        {
            "date": "2015-05-12T12:08:06+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I've used stuff from SOLR-7275, so it should be same format as Anshum mentions here:\nhttps://issues.apache.org/jira/browse/SOLR-7275?focusedCommentId=14497128&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14497128\n\nSomething like:\n\n{\"authorization\":\n  {\"class\":\"solr.SimpleSolrAuthorizationPlugin\",\n  \"deny\":[\"user1\",\"user2\"]\n  },\n  \"authentication\":\n  {\"class\":\"org.apache.solr.security.KerberosPlugin\",\n   \"conf1\": \"val1\", ...\n  }\n}\n\n\n\nThe kerberos plugin (SOLR-7468) doesn't require any other config than \"class\" at the moment. All the other config parameters are host specific and are picked up from system properties. ",
            "id": "comment-14539721"
        },
        {
            "date": "2015-05-14T08:08:47+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for the patch Ishan. Here's some feedback:\n\n\tYou've converted protected methods to be static protected, that doesn't sound right to me. It makes more sense to merge the AuthenticationLayerFilter with SDF and not change those methods. SDF is just a wrapper now and so this should be easy to plugin. I'm not sure but it's perhaps just a matter of moving the code into SDF.\n\tThere are unused imports in your code, you should clean them up.\n\n ",
            "id": "comment-14543359"
        },
        {
            "date": "2015-05-14T08:46:54+0000",
            "author": "Anshum Gupta",
            "content": "Got rid of the AuthenticationLayerFilter and moved all of that into SDF. Also cleaned up unused imports.\nAnother pair of eyes would be good to confirm that it's all good. Ishan Chattopadhyaya and Gregory Chanan? ",
            "id": "comment-14543394"
        },
        {
            "date": "2015-05-15T18:54:27+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks Anshum Gupta for the patch. I think it should be possible to fold in all the changes from the extra \"AuthenticationLayerFilter\" to SDF. However, at this point, I am unable to get Kerberos plugin (SOLR-7468) to work with this due to the fact that the hadoop-auth's AuthenticationFilter (which the plugin is based on) does a chain.doFilter() for the next filter/servlet in the chain, and this doesn't work since SDF is the only filter in the chain. I'll try to fix that for SOLR-7468 later, and then fold in your changes.\n\nMeanwhile, I'm putting out a patch which doesn't contain your changes, and does the following:\n\n\tSolrCLI, bin/solr support for authentication options. (TODO: Windows bin/solr.cmd changes)\n\tFixed a bug where the CUSC wasn't getting configured using the plugin's client configurer.\n\n\n\nNote: I have added code from my patch for SOLR-7545 (which was a blocker for this issue), which I'll remove from this patch as soon as it gets committed. ",
            "id": "comment-14545992"
        },
        {
            "date": "2015-05-16T16:11:30+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated patch.\n\n\n\tAdding a test, TestAuthenticationFramework.\n\tIncluded changes in latest patch for SOLR-7545 (without the bin/solr.cmd change). Once SOLR-7545 is committed, some of bin/solr changes should be not necessary.\n\n\n\nTODO:\nbin/solr.cmd changes for Windows. ",
            "id": "comment-14546834"
        },
        {
            "date": "2015-05-18T08:43:29+0000",
            "author": "Noble Paul",
            "content": "From the discussions and looking at the code , I believe it's totally possible to make this work without the extra filter. Committing it without that change will be lame.\nPlease rename the classes to drop the \"Layer\" from class names\n ",
            "id": "comment-14547731"
        },
        {
            "date": "2015-05-18T11:03:34+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the previous patch, now with some changes made in SOLR-7468 and with changes committed in SOLR-7545.\n\nNoble Paul, I'll look at folding the extra filter (AuthenticationLayerFilter) into SDF next. Thanks for your review. ",
            "id": "comment-14547869"
        },
        {
            "date": "2015-05-19T06:32:37+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the patch. Now got rid of the extra filter and folded in all the initialization code into the core container. ",
            "id": "comment-14549877"
        },
        {
            "date": "2015-05-19T12:51:47+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated patch after some cleanup. Also put this up at https://reviews.apache.org/r/34400 for any line-by-line review comments. ",
            "id": "comment-14550379"
        },
        {
            "date": "2015-05-19T13:33:51+0000",
            "author": "Noble Paul",
            "content": "it's possible to move the excludedPatterns check before authc , right ? ",
            "id": "comment-14550437"
        },
        {
            "date": "2015-05-19T20:06:05+0000",
            "author": "Anshum Gupta",
            "content": "A bit of cleanup and I think this is good to go in. I'll commit this after running the tests one last time. ",
            "id": "comment-14551119"
        },
        {
            "date": "2015-05-19T21:10:18+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1680391 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1680391 ]\n\nSOLR-7274: Pluggable authentication module in Solr. This defines an interface and a mechanism to create, load, and use an Authentication plugin. ",
            "id": "comment-14551236"
        },
        {
            "date": "2015-05-19T22:51:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1680415 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680415 ]\n\nSOLR-7274: Pluggable authentication module in Solr. This defines an interface and a mechanism to create, load, and use an Authentication plugin.(merge from trunk) ",
            "id": "comment-14551395"
        },
        {
            "date": "2015-05-20T06:00:50+0000",
            "author": "Anshum Gupta",
            "content": "Thanks Ishan, this is good.\nAlso, thanks Noble, and Greg. ",
            "id": "comment-14551873"
        },
        {
            "date": "2015-05-21T04:04:00+0000",
            "author": "Anshum Gupta",
            "content": "We also need to reconfigure the HttpClient in SDF after the coreContainer (authc plugin init) have happened. ",
            "id": "comment-14553587"
        },
        {
            "date": "2015-05-21T04:59:31+0000",
            "author": "Anshum Gupta",
            "content": "ignore this patch! I'm getting an NPE with this on the admin UI (with the SOLR-7468 patch). fixing this. It might be something with the Kerberos patch too. ",
            "id": "comment-14553626"
        },
        {
            "date": "2015-05-21T08:50:48+0000",
            "author": "Anshum Gupta",
            "content": "One more fix. ",
            "id": "comment-14553904"
        },
        {
            "date": "2015-05-21T09:03:09+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The HttpSolrCall's remoteQuery() was blindly copying the headers from original request to the forwarded request, including the \"Host\" header, which should be avoided for SPNego to work. ",
            "id": "comment-14553930"
        },
        {
            "date": "2015-05-21T09:27:21+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "And adding more offending headers (\"Authorization\" and \"Accept\", along with \"Host\") that were forwarded, which were screwing up SPNego for forwarded requests. Updated the patch. ",
            "id": "comment-14553967"
        },
        {
            "date": "2015-05-21T17:21:45+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1680931 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1680931 ]\n\nSOLR-7274: Stop forwarding Authorization, Host, and Accept headers for SPNego to work. Also fixed an exception forwarding from SDF and reconfigure SDF's httpClient after authentication has been initialized. ",
            "id": "comment-14554686"
        },
        {
            "date": "2015-05-21T18:18:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1680940 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1680940 ]\n\nSOLR-7274: Stop forwarding Authorization, Host, and Accept headers for SPNego to work. Also fixed an exception forwarding from SDF and reconfigure SDF's httpClient after authentication has been initialized.(merge from trunk) ",
            "id": "comment-14554790"
        },
        {
            "date": "2015-06-08T20:16:11+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1684268 from Anshum Gupta in branch 'dev/branches/lucene_solr_5_2'\n[ https://svn.apache.org/r1684268 ]\n\nSOLR-7623: backporting for Solr 5.2.1 (commit was actually a part of SOLR-7274) ",
            "id": "comment-14577762"
        },
        {
            "date": "2015-06-13T16:58:58+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1685289 from Ramkumar Aiyengar in branch 'dev/trunk'\n[ https://svn.apache.org/r1685289 ]\n\nSOLR-7274: Removed a few eager string constructions from log.debug ",
            "id": "comment-14584713"
        },
        {
            "date": "2015-06-13T17:00:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1685290 from Ramkumar Aiyengar in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685290 ]\n\nSOLR-7274: Removed a few eager string constructions from log.debug ",
            "id": "comment-14584716"
        },
        {
            "date": "2015-06-13T17:41:34+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for cleaning this up Ram but it's recommended to commit changes related to an already released issue as a new JIRA . ",
            "id": "comment-14584732"
        },
        {
            "date": "2015-06-14T23:53:54+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Sure, normally would have, just didn't bother for a couple of log lines  ",
            "id": "comment-14585330"
        },
        {
            "date": "2015-06-15T21:42:59+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close for 5.2.0. ",
            "id": "comment-14586821"
        }
    ]
}