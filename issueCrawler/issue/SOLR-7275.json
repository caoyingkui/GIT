{
    "id": "SOLR-7275",
    "title": "Pluggable authorization module in Solr",
    "details": {
        "components": [],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "5.2"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Solr needs an interface that makes it easy for different authorization systems to be plugged into it. Here's what I plan on doing:\n\nDefine an interface SolrAuthorizationPlugin with one single method isAuthorized. This would take in a SolrRequestContext object and return an SolrAuthorizationResponse object. The object as of now would only contain a single boolean value but in the future could contain more information e.g. ACL for document filtering etc.\n\nThe reason why we need a context object is so that the plugin doesn't need to understand Solr's capabilities e.g. how to extract the name of the collection or other information from the incoming request as there are multiple ways to specify the target collection for a request. Similarly request type can be specified by qt or /handler_name.\n\nFlow:\nRequest -> SolrDispatchFilter -> isAuthorized(context) -> Process/Return.\n\n\npublic interface SolrAuthorizationPlugin {\n  public SolrAuthorizationResponse isAuthorized(SolrRequestContext context);\n}\n\n\n\n\npublic  class SolrRequestContext {\n  UserInfo; // Will contain user context from the authentication layer.\n  HTTPRequest request;\n  Enum OperationType; // Correlated with user roles.\n  String[] CollectionsAccessed;\n  String[] FieldsAccessed;\n  String Resource;\n}\n\n\n\n\n\npublic class SolrAuthorizationResponse {\n  boolean authorized;\n\n  public boolean isAuthorized();\n}\n\n\n\nUser Roles: \n\n\tAdmin\n\tCollection Level:\n\tQuery\n\tUpdate\n\tAdmin\n\n\n\nUsing this framework, an implementation could be written for specific security systems e.g. Apache Ranger or Sentry. It would keep all the security system specific code out of Solr.",
    "attachments": {
        "SOLR-7275.patch": "https://issues.apache.org/jira/secure/attachment/12725140/SOLR-7275.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-03-23T09:38:30+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Linking up SOLR-7236, which is an attempt to gather planning of security interfaces for Solr in an umbrella issue. This topic deserves broad high-level discussions before starting a custom implementation. ",
            "id": "comment-14375627"
        },
        {
            "date": "2015-03-31T21:04:59+0000",
            "author": "Anshum Gupta",
            "content": "Jan, I am working on what I've described above as I think it's a straight framework that would allow for easy pluggability of multiple authorization implementations and would keep the implementation details for the security layer (Sentry/Ranger/...) outside of Solr for the most part. ",
            "id": "comment-14389408"
        },
        {
            "date": "2015-04-11T02:37:25+0000",
            "author": "Dennis Gove",
            "content": "I like this concept but I think the response can be expanded to add a bit more functionality. It would be nice if the pluggable security layer could respond in such a way as to not wholly reject a request but to instead restrict what is returned from a request. It could accomplish this by providing additional filters to apply to a request.\n\n\npublic class SolrAuthorizationResponse {\n  boolean authorized;\n  String additionalFilterQuery;\n\n  ...\n}\n\n\n\nBy adding additionalFilterQuery, this would give the security layer an opportunity to say, \"yup, you're authorized but you can't see records matching this filter\" or \"yup, you're authorized but you can only see records also matching this filter\". It provides a way to add fine-grained control of data access but keep that control completely outside of SOLR (as it would live in the pluggable security layer).\n\nAdditionally, it allows the security layer to add fine-grained control *without notifying the user they are being restricted* as this lives wholly in the SOLR <---> security layer communication. There are times when telling the user their request was rejected due to it returning records they're not privileged to see actually gives the user some information you may not want them to know - the fact that these restricted records even exist. Instead, by adding filters and just not returning records the user isn't privileged for, the user is non-the-wiser that they were restricted at all. ",
            "id": "comment-14490733"
        },
        {
            "date": "2015-04-11T03:10:40+0000",
            "author": "Noble Paul",
            "content": "Yes. That is totally possible\n ",
            "id": "comment-14490745"
        },
        {
            "date": "2015-04-11T12:54:06+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "By adding additionalFilterQuery, this would give the security layer an opportunity to say, \"yup, you're authorized but you can't see records matching this filter\"\n\nIt does not feel clean to mix document level security filtering with authorization. The authz filter should either grant or deny a certain user access to perform a certain operation on a certain resource. There are existing means of filtering docs based on user, which will live perfectly fine in parallel with any new authz solution. Let's keep things simple. ",
            "id": "comment-14491008"
        },
        {
            "date": "2015-04-12T01:58:05+0000",
            "author": "Anshum Gupta",
            "content": "Dennis Gove that's the intention behind returning a Response object instead of a plain boolean. As I'm not adding any of that in this phase, I didn't add those variables but yes, the intention is to use this object to return ACLs etc. from the authorization layer.\n\nI have the first patch ready, but I'm just in the process of cleaning it up a bit. I'll try and post it over the weekend. ",
            "id": "comment-14491297"
        },
        {
            "date": "2015-04-14T03:48:24+0000",
            "author": "Anshum Gupta",
            "content": "Here's the first patch. This introduces the following:\n1. SolrAuthorizationPlugin interface - The interface that would need to be implemented for custom security plugins e.g. Ranger/Sentry/...\n2. Configuration mechanism for security - /security.json in zoo keeper.\n3. SolrRequestContext - HttpHeader, UserPrincipal etc. I'm working on extracting more context from the request e.g. Collection, handler, etc. and populate those in here.\n\nUsage:\nTo try this out, you need to add /security.json node in zk, with the following data format\n\n{\"class\":\"solr.SimpleSolrAuthorizationPlugin\"}\n\n\n\nAlso, access rules (black list for now) goes into /simplesecurity.json\n\n{\"blacklist\":[\"user1\",\"user2\"]}\n\n\n\nThis uses the http param (uname) to filter out/authorize requests. \nThe following request would then start returning 401:\nhttp://localhost:8983/solr/techproducts/select?q=*:*&wt=json&uname=user1\n\nNOTE: The authorization plugin doesn't really do anything about inter-shard communication (and doesn't propagate the user principal), it can be used only for black listing right now. You could write a plugin that sets up IP based rules or I could add those rules to the plugin that would be shipped out of the box to support white listing of User info + IP information.\n\n\nTo summarize, I'm still working on the following:\n1. Extract more information and populate the context object.\n2. Have a watch on the access rules file. I'm still debating between a watch vs having an explicit RELOAD like call that updates the access rules.\n3. Support IP and/or user based whitelist. ",
            "id": "comment-14493519"
        },
        {
            "date": "2015-04-14T06:38:07+0000",
            "author": "Noble Paul",
            "content": "A few comments\n\n\tDo the initialization and other things of Authorization plugin in CoreContainer\n\tThis just does not feel right. CoreContainer SHOULD NOT be stored in PluginInfo. PluginInfo is supposed to be an immutable data structure that contains just data\n\ncoreContainer = (CoreContainer) info.initArgs.get(\"cc\");\n\n\n\n\n\nwhy multiple json files? /security.json  and /simplesecurity.json ?\n\nLet us standardize one on one json file. Why should a component use SolrZkClient directly to read configuration?   ",
            "id": "comment-14493673"
        },
        {
            "date": "2015-04-14T07:58:13+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The authorization plugin doesn't really do anything about inter-shard communication (and doesn't propagate the user principal),\n\nIf a pre-authorized request is forwarded to another node, it shouldn't need to go via the authorization process again (e.g. a SolrDispatchFilter forwarded request, aka SDF.remoteQuery()). Towards that, don't you think the authorization plugin framework should have a way to let internode requests propagate some authorization info from the original user request? ",
            "id": "comment-14493754"
        },
        {
            "date": "2015-04-14T09:42:19+0000",
            "author": "Noble Paul",
            "content": "Authorization is usually a low cost operation. I would say, lets us not optimize for it now.  ",
            "id": "comment-14493848"
        },
        {
            "date": "2015-04-14T09:55:21+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "but yes, the intention is to use this object to return ACLs etc. from the authorization layer.\nNoble Paul Even basides avoiding the re-authorization, don't you think ACLs/user principal etc. should to be propagated to other nodes during an internode request? ",
            "id": "comment-14493856"
        },
        {
            "date": "2015-04-14T10:26:54+0000",
            "author": "Noble Paul",
            "content": "It depends.\n\nIf you are going to authenticate to the other nodes as the node itself  then the original principal does not even matter. If you replacing to authenticate as the original user then all of it should be sent across ",
            "id": "comment-14493877"
        },
        {
            "date": "2015-04-14T11:33:33+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Anshum. I have a comment and a few questions:\n\n\tSince this issue is about creating a pluggable authorization module, please create a different linked issue for a default/basic implementation. We should not be discussing/reviewing any specific implementation here.\n\tWe need to define the contract between this new plugin type and Solr better. For example:\n\t\n\t\tWhen is it created?\n\t\tWhen is it shutdown?\n\t\tHow is it configured? How is the configuration changed?\n\t\tIs it per-collection or for the whole cluster?\n\t\tCan we have multiple such plugins?\n\t\tHow are configuration changes propagated to different nodes? Is the plugin re-initialized or re-created?\n\t\n\t\n\n ",
            "id": "comment-14493947"
        },
        {
            "date": "2015-04-14T15:49:49+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for looking at it Noble. \n\nDo the initialization and other things of Authorization plugin in CoreContainer\nSure, I'll move it.\n\nwhy multiple json files? /security.json and /simplesecurity.json ?\nThey are used for 2 different reasons, the /security.json is the one used for/by Solr's framework whereas /simplesecurity.json could also be called anything else tomorrow and is used by a specific implementation. Doesn't make any sense to merge the 2 and Solr be bothered about a specific plugin data.\n\nWhy should a component use SolrZkClient directly to read configuration?\nIs there a reason not to? The client would need information about zk and also might need to read information about it, I don't see a reason why we should create a new zkclient there. ",
            "id": "comment-14494296"
        },
        {
            "date": "2015-04-14T15:52:17+0000",
            "author": "Anshum Gupta",
            "content": "That was my thought at this point. I'd want to propagate ACL/principal information when we get to say, Document level security but as I'm not handling that right now, let's just move ahead and build that in when we get to it. ",
            "id": "comment-14494298"
        },
        {
            "date": "2015-04-14T16:06:32+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for looking at this Shalin.\n\nplease create a different linked issue for a default/basic implementation.\nSure, that makes sense. I'll split it and create a new sub-issue.\n\nWe need to define the contract between this new plugin type and Solr better.\nI did try to answer most of those questions in the write up above but I'm happy to explain that again.\n\n\n\tThis framework is a cluster level configuration (and hence the need to specify and set up the implementation before starting a node).\n\tIt gets created in the init for SDF.\n\tThe configuration goes into /security.json (implementation to use) and plugin details go into plugin-specific file/mechanism e.g. you could write your own plugin that has hard-coded list for IPs or usernames or combination etc.\n\tYou can only have 1 such plugin used by a cluster at any given point (there's no check for that and the node would end up using the implementation defined in /security.json when it comes up.\n\tAs this happens at CoreContainer level, I didn't add anything to change the implementation type for plugin but I'm working on configuration changes. The change would need to be handled by the plugin writer e.g. in case of the OTB plugin, which depends on access rules stored in zk, it needs to watch that file for changes and update the blacklist accordingly. For cases involving 3rd party security mechanisms e.g. Apache Ranger/Sentry, the config changes would be handled by those plugins. When a request comes in after the access rules are updated, the plugin should be able to use the new rules from Ranger, without any need to update anything in Solr.\n\tI'm moving this to be initialized and kept in the corecontainer, and also adding a shutdown hook for the plugins. The hook would get invoked during the corecontainer shutdown.\n\n ",
            "id": "comment-14494317"
        },
        {
            "date": "2015-04-14T17:21:42+0000",
            "author": "Noble Paul",
            "content": "whereas /simplesecurity.json could also be called anything else tomorrow and is used by a specific implementation. Doesn't make any sense to merge the 2 and Solr be bothered about a specific plugin data.\n\nI fail to see why it is not possible, If Solr already supports configuration of almost a dozen plugins with standardized formats , what is so special about an authorization plugin? This is akin to having solrconfig_myplugin.xml for every custom plugin I write\n\nIs there a reason not to? The client would need information about zk and also might need to read information about it, I don't see a reason why we should create a new zkclient there.\n\nThere should be no need for the client to read stuff from ZK. Take the analogy of our current set of plugins. Do they ever try to read solrconfig.xml/ or configoverlay.json?   ",
            "id": "comment-14494429"
        },
        {
            "date": "2015-04-14T17:54:36+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "+1 to a single /security.json file.\nI propose the following format for /security.json, to fold in both SOLR-7274 and SOLR-7275 (this issue) zk configs. This would need support for nested objects in ZkStateReader. The \"configs\" could be passed in into the plugins' init() and hence it will no longer be necessary to pass in a ZkClient/ZkController into the plugin's init().\n\n\n{\n  \"authentication\": {\n    \"pluginClass\": \"org.blahblah\",\n    \"pluginName\": \"kerberos\",\n    \"configs\": {\n      \"prop1\": \"val1\",\n      \"prop2\": \"val2\"\n    }\n  },\n  \"authorization\": {\n    \"pluginClass\": \"...\",\n    \"pluginName\": \"ranger\",\n    \"configs\": {\n      \"prop1\": \"val1\",\n      \"prop2\": \"val2\"\n    }\n  }\n}\n\n ",
            "id": "comment-14494484"
        },
        {
            "date": "2015-04-14T20:43:13+0000",
            "author": "Anshum Gupta",
            "content": "I'm just trying to keep custom plugin config for security separate from other configuration. About merging authc and authz configs, that was on my mind and I plan to do it when I'm integrating the changes here with SOLR-7274.\n\nLet's consider an example of a user wanting to use some proprietary non-json format data in a custom security plugin, to store access rules. There wouldn't be a way to do that. I am all for exploring more options if there are any as long as they don't stop users from doing their own thing.\n\nI can have a straight mechanism to just read the authorization part of /security.json and pass that map to the plugin during init instead of the plugin reading from a file directly, but then instead of the security plugin deciding if it wants to keep a watch on the file, Solr would always keep a watch (when authz is enabled). In cases where access rules don't reside in zk and are in a 3rd party system, we don't want to keep a watch. Allowing the plugin to make that choice might be a better way to move.\n\nI'm about to separate out the implementation of default/OTB plugin from this JIRA and I guess things would be clearer for everyone to understand after that happens. ",
            "id": "comment-14494837"
        },
        {
            "date": "2015-04-15T10:08:59+0000",
            "author": "Noble Paul",
            "content": "Allowing the plugin to make that choice might be a better way to move.\n\nNotifying the plugin of conf changes is not same as reloading the plugin. When a data change callback is received , the plugin can decide what to  do with the the callbck. How the API is designed is upto you.\n\nSolr components watching ZK nodes is a big red flag. We should not do it ",
            "id": "comment-14495981"
        },
        {
            "date": "2015-04-15T22:21:46+0000",
            "author": "Anshum Gupta",
            "content": "Patch for just the framework. It includes the following changes:\n\n\n\tAll security config now goes into /security.json. Here's a sample:\n\n{\"authorization\":\n  {\"class\":\"solr.SimpleSolrAuthorizationPlugin\",\n  \"deny\":[\"user1\",\"user2\"]\n  }\n}\n\n\nEverything from the authorization section would be passed on to the authorization plugin.\n\tAfter a discussion with Noble, it made more sense to restrict the access at this point to what's required and if we feel the need to expose zkStateReader, zkClient or the coreContainer itself to the plugin, we could do that at a later time. For now, all configuration for the plugin should just go into the authorization section.\n\tSimpleSolrAuthorizationPlugin is no longer in the direct scope of this issue, but I created a new issue for that. I'll put up the updated patch, that doesn't use the coreContainer or access zk directly right after posting this patch.\n\tI tried to have the SolrAuthorizationPlugin extend MapInitializedPlugin but that was more invasive than required as it takes a Map<String, String> whereas we need a Map<String, Object> here. I'll see if there's a way to do that without being invasive or duplicating a lot of the code so it still just extends PluginInfoInitialized.\n\n\n\nHere are the steps to test this patch (you would need the patch from SOLR-7402 along with this patch to actually see this work, as this is just the framework):\n1. Start zk.\n2. Using zk CLI, \n\nset /security.json {\"authorization\":{\"class\":\"solr.SimpleSolrAuthorizationPlugin\",\"deny\":[\"user1\",\"user2\"]}}\n\nChange the userlist to whatever you want to use to test.\n3. Start SolrCloud, make sure you use the zk server/ensemble you just setup.\ne.g. \n\nbin/solr start -z localhost:2181 -c\n\n\nTo write your own plugin:\n\n\tExtend SolrAuthorizationPlugin, this requires implementing\n\t\n\t\tinit(PluginInfo info) : This is called when the node comes up. It is called once and creates the plugin object. This is where you can define your connections to 3rd party security systems etc.\n\t\tauthorize(SolrRequestContext context) and optionally overriding\n\t\n\t\n\tFollow the steps above (testing this patch) and specify the FQN of the implementation class in the authorization{{class}}. e.g.\n\n{\"authorization\":{\"class\":\"solr.MyCustomSolrAuthorizationPlugin\",\"connect_string\":\"hostname:port/somepath\"}}\n\n\n\n\n\nStill todo:\n\n\tWork on the context object.\n\tCleanup/shutdown hook.\n\tReloading/watching for changes in the /security.json file or documenting how to change it.\n\tTests\n\n ",
            "id": "comment-14497128"
        },
        {
            "date": "2015-04-16T08:17:07+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Quick thought:\n\n\n+      //Initialize the Authorization module\n+      if(cores.getZkController().getZkClient().exists(SOLR_SECURITY_CONF_PATH, true)) {\n+        byte[] data = cores.getZkController().getZkClient()\n+            .getData(SOLR_SECURITY_CONF_PATH, null, new Stat(), true);\n+        Map securityConf = (Map) ZkStateReader.fromJSON(data) ;\n+        Map authorizationConf = (Map) securityConf.get(\"authorization\");\n+        log.info(\"Initializing authorization plugin: \" + authorizationConf.get(\"class\"));\n+        authorizationPlugin = cores.getResourceLoader().newInstance((String) authorizationConf.get(\"class\"), \n+            SolrAuthorizationPlugin.class);\n\n\nMaybe we should move this to the ZkStateReader, so that we can do something like this here:\n\nzkcontroller.getSecurityProps().getAuthorizationProps() or zkcontroller.getSecurityProps().getAuthenticationProps()\n\n ",
            "id": "comment-14497711"
        },
        {
            "date": "2015-04-16T08:56:08+0000",
            "author": "Noble Paul",
            "content": "Use the MapInitializedPlugin instead of PluginInfoInitialized . PluginInfo is created with xml in mind. For  a component that is exclusively loaded from JSON , it does not make sense to use PluginInfo ",
            "id": "comment-14497791"
        },
        {
            "date": "2015-04-16T15:54:53+0000",
            "author": "Anshum Gupta",
            "content": "I was trying to use the MapInitializedPlugin but that involves changing MapPluginLoader.init(..) which forces me to change DOMUtil.toMapExcept. which is used at a lot of places. I'll create a new GenericMapInitializedPlugin and use that instead.\nThanks for bringing this up. ",
            "id": "comment-14498202"
        },
        {
            "date": "2015-04-16T19:45:22+0000",
            "author": "Anshum Gupta",
            "content": "Updated patch. This one doesn't implement any Plugin interface but extends Closeable. There wasn't really a need to implement MapInitializedPlugin or any other variant as it wasn't 1. helpful, 2. used by anyone else.\n\nAfter speaking to Noble, seems like we're on the path to actually deprecate those. \n\nOther things that this patch changes:\n1. Moved the authorizationPlugin init to CoreContainer.\n2. Added the close hook for plugins, it's called during coreContainer.shutdown().\n3. Moved the security.json reading to ZkStateReader and made it accessible as a map via a method. ",
            "id": "comment-14498575"
        },
        {
            "date": "2015-04-29T05:00:01+0000",
            "author": "Anshum Gupta",
            "content": "Moving the refactoring code to it's own issue and linking it from here. ",
            "id": "comment-14518737"
        },
        {
            "date": "2015-04-29T15:11:17+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "\n\n+      if (!authResponse.isAuthorized()) {\n+        sendError((HttpServletResponse) response, 401, \"Unauthorized request\");\n\n\n\nUsually, a 401 means that the request needs to be repeated with appropriate authentication/authorization headers. 403 means that the authentication/authorization headers that are needed were provided, but still the server refused to fulfill the request.\nI think 403 (Forbidden) is more appropriate here. ",
            "id": "comment-14519516"
        },
        {
            "date": "2015-04-29T16:11:02+0000",
            "author": "Anshum Gupta",
            "content": "From http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html:\n\n401:\nThe client MAY repeat the request with a suitable Authorization header field (section 14.8). If the request already included Authorization credentials, then the 401 response indicates that authorization has been refused for those credentials.\n\n403:\nThe server understood the request, but is refusing to fulfill it. Authorization will not help and the request SHOULD NOT be repeated. If the request method was not HEAD and the server wishes to make public why the request has not been fulfilled, it SHOULD describe the reason for the refusal in the entity.\n\nAs per what I undersand, I think 401 still makes more sense in this case. ",
            "id": "comment-14519638"
        },
        {
            "date": "2015-04-29T16:26:53+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "\n\nFrom the same source, I can see this for 401:\nThe request requires user authentication. The response MUST include a WWW-Authenticate header field (section 14.47) containing a challenge applicable to the requested resource. \n\nSo, that means a 401 response must also contain a WWW-Authenticate header with a challenge, which seems inappropriate in this situation. Hence, I still feel 403 is more appropriate. ",
            "id": "comment-14519667"
        },
        {
            "date": "2015-05-01T20:26:50+0000",
            "author": "Don Bosco Durai",
            "content": "Yes, for authorization, we should return 403 (post authentication). 401 is more appropriate for authentication flow ",
            "id": "comment-14523851"
        },
        {
            "date": "2015-05-01T20:31:28+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for that input Don and Ishan, I read up a bit more and it certainly now makes more sense to use 403 for authorization and 401 for authentication. I'm changing things a bit to have the SolrAuthrorizationReponse contain an int HttpStatus code and Solr would just return that back if it's not an SC_OK or SC_ACCEPTED. That would allow the authorization plugin to act independently and decide what to return. I'll just put up the patch with that update in a bit. ",
            "id": "comment-14523859"
        },
        {
            "date": "2015-05-02T21:50:26+0000",
            "author": "Don Bosco Durai",
            "content": "Anshum Gupta thanks. When you are doing the change, can you give set method to the member attribute or make it public? With the current code, I need to extend the class to return the value.\n\npublic class SolrAuthorizationResponse {\n  boolean authorized;\n\n  public boolean isAuthorized() \n{\n    return authorized;\n  }\n}\n\n ",
            "id": "comment-14525503"
        },
        {
            "date": "2015-05-04T15:08:21+0000",
            "author": "Anshum Gupta",
            "content": "Updated patch. This doesn't incorporate the context bit as that depends on committing of SOLR-7484 which I plan to commit in a bit.\nIt changes the public SolrAuthorizationResponse and also how the statusCode set for the SolrAuthorizationResponse impacts the processing in SDF. ",
            "id": "comment-14526732"
        },
        {
            "date": "2015-05-04T21:59:04+0000",
            "author": "Anshum Gupta",
            "content": "Updated patch. This doesn't incorporate the context bit as that depends on committing of SOLR-7484 which I plan to commit in a bit.\nIt changes the public SolrAuthorizationResponse and also how the statusCode set for the SolrAuthorizationResponse impacts the processing in SDF.\n\nThe last patch was wrong and really meant for SOLR-7484. I'll just delete that from here.\n\nI'm just wrapping up the patch to work with the current trunk after the SDF refactoring too. ",
            "id": "comment-14527406"
        },
        {
            "date": "2015-05-04T23:13:02+0000",
            "author": "Anshum Gupta",
            "content": "Patch updated to trunk. Working on integrating the context object. ",
            "id": "comment-14527530"
        },
        {
            "date": "2015-05-04T23:58:25+0000",
            "author": "Anshum Gupta",
            "content": "Right now, this also lacks a mechanism to Reload / Reinit without restarting the node. Perhaps it'd be a good idea to have an API to do that. ",
            "id": "comment-14527592"
        },
        {
            "date": "2015-05-05T06:31:32+0000",
            "author": "Anshum Gupta",
            "content": "Need to clean up things here but this patch now returns some context e.g. userPrincipal, request header and collection request list. Working on adding more things and tests. ",
            "id": "comment-14528014"
        },
        {
            "date": "2015-05-06T07:43:44+0000",
            "author": "Anshum Gupta",
            "content": "Updated patch that returns a request type and the list of collections involved in the request. It also works for aliases i.e. returns the collection list instead of alias name.\nThe request type right now is left to unknown for cases other than ADMIN requests. In case of admin requests, it's set to 'ADMIN'. ",
            "id": "comment-14530100"
        },
        {
            "date": "2015-05-07T21:41:47+0000",
            "author": "Anshum Gupta",
            "content": "This patch also extracts collection name in case of a call targeted towards a core e.g.:\nhttp://hostname:port/solr/collection1_shard1_replica1/select?q=*:*\n\nThe collection info in the context would contain the name of the collection that the core collection1_shard1_replica1 belongs to, assuming it's not actually the name of a collection. ",
            "id": "comment-14533442"
        },
        {
            "date": "2015-05-08T17:21:28+0000",
            "author": "Anshum Gupta",
            "content": "Changes visibility and cleans up code, removing unused methods.\nI've also changed all fields in SolrRequestContext to be final as they are initialized in the constructor and shouldn't be changed, in the process also getting rid of all the setters. ",
            "id": "comment-14535010"
        },
        {
            "date": "2015-05-11T06:34:28+0000",
            "author": "Anshum Gupta",
            "content": "The request context now provides Collection name in \n\n\tRegular /select etc. requests\n\tCollection API requests\n\tCore specific requests.\n\tCollection Alias requests\n\n\n\nWorking on adding a test. Will add it tonight or tomorrow and should be done with this. ",
            "id": "comment-14537644"
        },
        {
            "date": "2015-05-12T06:55:09+0000",
            "author": "Noble Paul",
            "content": "some cleanup and simplification ",
            "id": "comment-14539389"
        },
        {
            "date": "2015-05-12T08:13:27+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for looking at this Noble. I've fixed a few things in this patch. Functionally, this patch also extracts collection list in case of a /select request that looks like:\n\n/solr/collectionname/select?q=foo:bar&collection=anothercollection,yetanothercollection ",
            "id": "comment-14539486"
        },
        {
            "date": "2015-05-12T20:30:32+0000",
            "author": "Anshum Gupta",
            "content": "Adding back a way to get the 1. Resource 2. RequestType from the context. Seems like it was removed in an update a couple of patches back. ",
            "id": "comment-14540648"
        },
        {
            "date": "2015-05-13T06:25:31+0000",
            "author": "Anshum Gupta",
            "content": "Patch that adds request type info for /select [READ] and /update [WRITE] requests. ",
            "id": "comment-14541437"
        },
        {
            "date": "2015-05-13T07:31:30+0000",
            "author": "Anshum Gupta",
            "content": "This patch filters out authz and context creation for *.png and *.html requests.\nThere were a lot of those coming in for the new Admin UI. ",
            "id": "comment-14541521"
        },
        {
            "date": "2015-05-13T18:40:05+0000",
            "author": "Anshum Gupta",
            "content": "Patch with test. I think this is good to go now.\nAny feedback would be appreciated. ",
            "id": "comment-14542399"
        },
        {
            "date": "2015-05-13T19:27:54+0000",
            "author": "Anshum Gupta",
            "content": "Accidentally added the SimpleSolrAuthorizationPlugin to the last patch. Removing it. Also added 2 more static file extensions to ignore for authz purpose. ",
            "id": "comment-14542516"
        },
        {
            "date": "2015-05-13T19:31:21+0000",
            "author": "Noble Paul",
            "content": "We need to tackle the modification of security.json  pretty soon. But that can be dealt separately\n\nThe security.json needs to be watched and the plugin needs to be notified of the change. That should not prevent us from committing this ",
            "id": "comment-14542521"
        },
        {
            "date": "2015-05-14T05:35:03+0000",
            "author": "Anshum Gupta",
            "content": "Thanks for the feedback Noble.\n\nRight, as of now, a node restart would be required for security.json to be re-read. I'll create another issue for that and as I understand, you don't have an objection to committing this, right?  ",
            "id": "comment-14543224"
        },
        {
            "date": "2015-05-14T06:20:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1679316 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1679316 ]\n\nSOLR-7275: Authorization framework for Solr. It defines an interface and a mechanism to create, load and use an Authorization plugin. ",
            "id": "comment-14543266"
        },
        {
            "date": "2015-05-14T06:23:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1679317 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1679317 ]\n\nSOLR-7275: Authorization framework for Solr. It defines an interface and a mechanism to create, load and use an Authorization plugin.(merge from trunk) ",
            "id": "comment-14543269"
        },
        {
            "date": "2015-05-14T06:30:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1679319 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1679319 ]\n\nSOLR-7275: compile error ",
            "id": "comment-14543279"
        },
        {
            "date": "2015-05-14T06:39:22+0000",
            "author": "Anshum Gupta",
            "content": "Damn! Thanks for fixing this. Just discovered I ran the test using Java8. ",
            "id": "comment-14543290"
        },
        {
            "date": "2015-05-15T06:11:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1679497 from Anshum Gupta in branch 'dev/trunk'\n[ https://svn.apache.org/r1679497 ]\n\nSOLR-7275: Setting requestType for context object in case of a /get request ",
            "id": "comment-14544993"
        },
        {
            "date": "2015-05-15T16:44:23+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1679604 from Anshum Gupta in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1679604 ]\n\nSOLR-7275: Setting requestType for context object in case of a /get request(merge from trunk) ",
            "id": "comment-14545766"
        },
        {
            "date": "2015-06-15T21:44:07+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close for 5.2.0. ",
            "id": "comment-14586895"
        },
        {
            "date": "2016-10-29T04:46:27+0000",
            "author": "Thomas Quinot",
            "content": "Back in the time of Solr 4, it was possible to control access using the Java security service, loading LoginService modules provided by Jetty. For example\n     <Call name=\"addBean\">\n       <Arg>\n        <New class=\"org.eclipse.jetty.security.HashLoginService\">\n           <Set name=\"name\">Infosys</Set>\n          <Set name=\"config\">/myapp/auth/webauth.properties</Set>\n         </New>\n       </Arg>\n\nallowed user authentication against a list of UNIX crypt(3) hashes.\n\nIs this officially gone? If so this seems to be a significant regression.\n\nIf this is still supported, could the org.ecliporg.eclipse.jetty.plus.jaas.JAASLoginService class be added to the Jetty instance packaged with Solr? JAAS provides a lot of flexibility without requiring Solr to reinvent the wheel (for example allowing authentication against an LDAP server). ",
            "id": "comment-15617430"
        },
        {
            "date": "2016-10-29T04:54:37+0000",
            "author": "Noble Paul",
            "content": "This issue did not eliminate any feature.  The configuration you mentioned was not a feature of solr and it was not even documented. You please verify if it actually works and open a separate discussion ",
            "id": "comment-15617446"
        },
        {
            "date": "2016-10-29T19:18:13+0000",
            "author": "Thomas Quinot",
            "content": "Thanks for your feedback Paul. I will open a separate issue for followup discussion. ",
            "id": "comment-15618593"
        },
        {
            "date": "2016-10-29T19:35:41+0000",
            "author": "Thomas Quinot",
            "content": "SOLR-9702 created. ",
            "id": "comment-15618615"
        }
    ]
}