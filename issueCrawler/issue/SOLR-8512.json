{
    "id": "SOLR-8512",
    "title": "Implement minimal set of get* methods in ResultSetImpl for column indices",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "6.0",
        "status": "Resolved",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "SQL clients use the proper get* methods on the ResultSet to return items to be displayed. At minimum, the following methods should be implemented for column index:\n\n\tpublic Object getObject\n\tpublic String getString\n\tpublic boolean getBoolean\n\tpublic short getShort\n\tpublic int getInt\n\tpublic long getLong\n\tpublic float getFloat\n\tpublic double getDouble\n\tpublic BigDecimal getBigDecimal\n\tpublic Date getDate\n\tpublic Time getTime\n\tpublic Timestamp getTimestamp",
    "attachments": {
        "sql-preserve-order.patch": "https://issues.apache.org/jira/secure/attachment/12781981/sql-preserve-order.patch",
        "SOLR-8512.patch": "https://issues.apache.org/jira/secure/attachment/12782055/SOLR-8512.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-13T03:07:29+0000",
            "author": "Kevin Risden",
            "content": "Adding some notes here after thinking about this in relation to SOLR-8002 and a rough idea patch.\n\nAny reason to not always return a SelectStream from SQL handler instead of checking if there are columnAliases?\n\nThe SelectStream can guarantee the tuples have the fields in the same order as the SQL statement. For example: select a, b, c from table; will result in tuple.get(0) being a, tuple.get(1) = b, etc. Without the SelectStream wrapping, the fields are in an arbitrary order.\n\nIn addition to wrapping the result in SelectStream, this also requires that the columnAliases, reverseColumnAliases, and tuple.fields are LinkedHashMap instead of just plain HashMap to keep the keys in insertion order. I have a rough patch that has these changes just wasn't sure if it made sense to add to this or to a separate JIRA. ",
            "id": "comment-15095518"
        },
        {
            "date": "2016-01-13T03:35:54+0000",
            "author": "Joel Bernstein",
            "content": "I like the idea of using the SelectStream. But I think the order will be lost by the JDBC driver. The JDBC driver uses a SolrStream under the covers which is using the JSONTupleStream. I believe the JSONTupleStream is going to lose the field order as it reads the stream in.\n\n\n\n ",
            "id": "comment-15095540"
        },
        {
            "date": "2016-01-13T03:41:17+0000",
            "author": "Kevin Risden",
            "content": "I can cleanup this patch and add some tests to TestSQLHandler and JdbcTest to check this works in the test cases tomorrow.\n\nFrom the limited manual testing I did, the order was not lost when coming back from the JSONTupleStream. The order was kept since the LinkedHashMap was serialized/deserialized properly. I tried it with simple select, limit, and grouping manually in a debugger and it looked ok. ",
            "id": "comment-15095545"
        },
        {
            "date": "2016-01-13T13:34:01+0000",
            "author": "Joel Bernstein",
            "content": "This would also help with the visual display of Tuples. Rather then randomly ordering the columns, having a fixed column order is a nice improvement. ",
            "id": "comment-15096182"
        },
        {
            "date": "2016-01-13T14:12:49+0000",
            "author": "Kevin Risden",
            "content": "This patch contains the fixes to preserve ordering of tuples by using the LinkedHashMap, implements get* for column indices in ResultSetImpl, and adds some tests to JdbcTest for this. ",
            "id": "comment-15096236"
        },
        {
            "date": "2016-01-25T14:52:34+0000",
            "author": "Kevin Risden",
            "content": "Depends upon metadata from SOLR-8519 and implemented methods from SOLR-8517 ",
            "id": "comment-15115317"
        },
        {
            "date": "2016-01-25T14:54:47+0000",
            "author": "Kevin Risden",
            "content": "Patch that builds upon metadata passing from SOLR-8519. This is much simpler than modifying the underlying map of the tuples. ",
            "id": "comment-15115322"
        },
        {
            "date": "2016-01-25T19:08:12+0000",
            "author": "Kevin Risden",
            "content": "Fixed merge issues on top of SOLR-8519 and SOLR-8517 ",
            "id": "comment-15115783"
        },
        {
            "date": "2016-01-26T02:48:34+0000",
            "author": "Kevin Risden",
            "content": "Patch that takes into account changes from SOLR-8517 ",
            "id": "comment-15116548"
        },
        {
            "date": "2016-01-26T03:45:18+0000",
            "author": "Joel Bernstein",
            "content": "Patch looks great. Running precommit now. ",
            "id": "comment-15116616"
        },
        {
            "date": "2016-01-26T03:54:42+0000",
            "author": "Joel Bernstein",
            "content": "commit: https://github.com/apache/lucene-solr/commit/0ff8d11367f8fe734abba9203d48be878f4ce7f2 ",
            "id": "comment-15116629"
        }
    ]
}