{
    "id": "LUCENE-4616",
    "title": "Clarify what the score means in SpatialStrategy#makeQuery()",
    "details": {
        "components": [
            "modules/spatial"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Trivial",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "SpatialStrategy#makeQuery() returns a Query, but the docs don't make it clear with the score value should be.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-11T17:08:56+0000",
            "content": "Earlier today, I committed a small change on LUCENE-3795 but realize the change was based on not-understanding some assumptions.\n\nWe should clarify the assumptions in javadoc and/or the API.\n\nMy understanding now is that the API returned ConstantScoreQuery rather then Query to explicitly say the score is undefined (not necessarily distance/overlap/whatever).\n\nI see two directions for this call:\n\n#1 - Return a Query, and in the javadoc for SpatialStrategy say that the score value is undefined (but strategies may have a meaningful score)\n\n#2 - return ConstantScore and make the javadoc explicit that the score is not meaningful\n\n\nI vote for #1 since it is more general and lets applications/implementations work more easily\n ",
            "author": "Ryan McKinley",
            "id": "comment-13529129"
        },
        {
            "date": "2012-12-11T17:09:49+0000",
            "content": "FYI, earlier commits were:\n\n\thttp://svn.apache.org/viewvc?view=revision&revision=1419687\n\thttp://svn.apache.org/viewvc?view=revision&revision=1419688\n\n ",
            "author": "Ryan McKinley",
            "id": "comment-13529130"
        },
        {
            "date": "2012-12-11T19:24:37+0000",
            "content": "So #2 was the behavior in place; somewhat altered now since your commit yesterday.\n\nI can understand the draw to #1 but leaving it completely undefined doesn't feel right to me.  How about this proposed definition:\n\nBy default, the score should be a spatial relevance metric between 0 and 1 where 1 is the most relevant.  This might happen internally via makeRecipDistanceValueSource() or it might be another algorithm left up to the Strategy.  If the Strategy or SpatialArgs is somehow configured to use something else, such as simply using the distance as the score, then that will override the default behavior. ",
            "author": "David Smiley",
            "id": "comment-13529241"
        },
        {
            "date": "2012-12-11T19:51:36+0000",
            "content": "I don't think that saying the score should be between 0-1 helps anything.  This seem to just overdefine things.\n\nI think improving javadocs to say what is expected is the key thing, not forcing a unified meaning to the score.  \n\nApplications can sort out what the different things are possible, but Strategies will know (within themselves what is possible/relevant)\n ",
            "author": "Ryan McKinley",
            "id": "comment-13529272"
        },
        {
            "date": "2012-12-11T21:17:32+0000",
            "content": "I agree with Ryan, we shouldn't try to over-define this.  Returning Query gives the Strategies freedom to have a meaningful score if they support it.  But we should just add a simple comment stating that the score from the Query may or may not be meaningful and the Strategy used should be checked for further details. ",
            "author": "Chris Male",
            "id": "comment-13529343"
        },
        {
            "date": "2012-12-11T21:23:34+0000",
            "content": "Another option, more big picture I guess, is to take this opportunity and remove the Strategy abstraction.  We've touched upon this in other issues, but the fact is that each Strategy (including those not contributed) behaves differently and the notion of score is a big example of this.  There is some consistently in the Prefix Strategies so having an abstraction there probably helps but otherwise I think we should just dump Strategy and let some Strategies return a Query with meaningful score and some return a CSQ showing that their score is meaningless. ",
            "author": "Chris Male",
            "id": "comment-13529349"
        },
        {
            "date": "2012-12-12T07:17:51+0000",
            "content": "The point of a 0-1 score is that it is usable for both sorting and relevancy boosting.  And I don't have to look at the docs to know I can use the result of the query these ways. ",
            "author": "David Smiley",
            "id": "comment-13529693"
        },
        {
            "date": "2012-12-28T20:48:51+0000",
            "content": "FYI Solr's AbstractSpatialFieldType#getQueryFromSpatialArgs() has this excerpt:\n\n    String score = (localParams == null ? null : localParams.get(SCORE_PARAM));\n    if (score == null || \"none\".equals(score) || \"\".equals(score)) {\n      //FYI Solr FieldType doesn't have a getFilter(). We'll always grab\n      // getQuery() but it's possible a strategy has a more efficient getFilter\n      // that could be wrapped -- no way to know.\n      //See SOLR-2883 needScore\n      return strategy.makeQuery(spatialArgs); //ConstantScoreQuery\n    }\n\n\n\nWith the change that Ryan proposes in this issue, that SpatialStrategy#makeQuery can return a scoring query if it chooses, this code should no longer return makeQuery(), it should wrap makeFilter() in a ConstantScoreQuery.  Not a big deal but I just want to make note of it as it affects this issue. ",
            "author": "David Smiley",
            "id": "comment-13540590"
        }
    ]
}