{
    "id": "LUCENE-4755",
    "title": "Unmap MMapIndexInput's in a delayed way, and avoid WeakReference usage.",
    "details": {
        "components": [
            "core/store"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "(Most of this is shamelessly borrowed from Uwe Schindler)\n\nIt would be nice to move away from using WeakReference to clean up clones.\nInstead, the clones could depend on the master by using a shared boolean closed-flag.\n\nIn order to ensure visibility of this value, or at least make it less likely to crash, we could delay the unmapping operation.\n\nRough suggestion of changes:\n\npublic class ByteBufferUnmapper {\n  /**\n   * <code>true</code>, if this platform supports unmapping mmapped files.\n   */\n  public static final boolean UNMAP_SUPPORTED;\n  private static final ScheduledExecutorService SCHEDULED_EXECUTOR_SERVICE = Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(\"unmapper-\"));\n\n  static {\n    boolean v = false;\n    try {\n      Class.forName(\"sun.misc.Cleaner\");\n      Class.forName(\"java.nio.DirectByteBuffer\")\n        .getMethod(\"cleaner\");\n      v = true;\n    } catch (Exception e) {\n      // Do nothing\n    } finally {\n      UNMAP_SUPPORTED = v;\n    }\n  }\n\n\n  public static void unmap(final ByteBuffer buffer) throws IOException {\n    try {\n      AccessController.doPrivileged(new PrivilegedExceptionAction<Object>() {\n        public Object run() throws Exception {\n          Method getCleanerMethod = buffer.getClass().getMethod(\"cleaner\");\n          getCleanerMethod.setAccessible(true);\n          final Object cleaner = getCleanerMethod.invoke(buffer);\n          if (cleaner != null) {\n            cleaner.getClass().getMethod(\"clean\").invoke(cleaner);\n          }\n          return null;\n        }\n      });\n    } catch (PrivilegedActionException e) {\n      final IOException ioe = new IOException(\"unable to unmap the mapped buffer\");\n      ioe.initCause(e.getCause());\n      throw ioe;\n    }\n  }\n\n  public static void unmapLater(final ByteBuffer buffer, long delay, TimeUnit unit) {\n    SCHEDULED_EXECUTOR_SERVICE.schedule(new Runnable() {\n      public void run() {\n        try {\n          unmap(buffer);\n        } catch (IOException e) {\n          e.printStackTrace();\n        }\n      }\n    }, delay, unit);\n  }\n}\n\n\n\n\n// MMapDirectory\n  final void cleanMapping(final ByteBuffer buffer) throws IOException {\n    if (useUnmapHack) {\n      ByteBufferUnmapper.unmapLater(buffer, 10, TimeUnit.SECONDS);\n    }\n  }\n\n\n\n\n// MMapIndexInput\n    @Override\n    public short readShort() throws IOException {\n      if (closed[0]) {\n        throw new AlreadyClosedException(\"MMapIndexInput already closed: \" + this);\n      }\n\n\n\n\n    @Override\n    public void close() throws IOException {\n      try {\n        if (isClone || buffers == null) return;\n        closed[0] = true;\n        \n        // make local copy, then un-set early\n        final ByteBuffer[] bufs = buffers;\n        \n        for (final ByteBuffer b : bufs) {\n          cleanMapping(b);\n        }\n      } finally {\n        unsetBuffers();\n      }\n    }",
    "attachments": {},
    "issue_links": {},
    "comments": []
}