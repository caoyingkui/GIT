{
    "id": "LUCENE-4711",
    "title": "IBM J9 1.7.0 JIT bug in CategoryPath",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [
            "4.2",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "When running facet tests with IBM J9 1.7.0, most of the tests fail with bizarre exceptions from CategoryPath (AIIOBE mostly). I tried to add few asserts to CategoryPath, but they didn't help to reveal the bug.\n\nToday I ran a single test TestAssociationExample (randomly picked) w/ -Dtests.iters=1000 and it failed too on the same error. If run w/ -Xint, it doesn't fail.\n\nIn the end, Gilad and I discovered that when CategoryPath(String... components) constructor is used, which inside does this.components = components, the bug is triggered. At some point, probably after JIT kicks in, the array's length is 0'ed !!!\n\nWe've added the following workaround to CategoryPath:\n\n\n// TODO: revisit when IBM releases Java 7 newer than SR3 (with a fix)\n// to validate, run e.g. TestAssociationExample with -Dtests.iters=1000\nprivate static final boolean IS_J9_JAVA7 = Constants.JRE_IS_MINIMUM_JAVA7 && Constants.JVM_VENDOR.contains(\"IBM\");\n\n...\n\npublic CategoryPath(final String... components) {\n  assert components.length > 0 : \"use CategoryPath.EMPTY to create an empty path\";\n  if (IS_J9_JAVA7) {\n    // On IBM J9 Java 1.7.0, if we do 'this.components = components', then\n    // at some point its length becomes 0 ... quite unexpectedly. If JIT is\n    // disabled, it doesn't happen. This bypasses the bug by copying the \n    // array (note, Arrays.copyOf did not help either!).\n    this.components = new String[components.length];\n    System.arraycopy(components, 0, this.components, 0, components.length);\n  } else {\n    this.components = components;\n  }\n  length = components.length;\n}",
    "attachments": {
        "JavaVarargsBug.java": "https://issues.apache.org/jira/secure/attachment/12566132/JavaVarargsBug.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-23T11:27:22+0000",
            "content": "I already committed a fix, opened the bug so that it's on record. ",
            "author": "Shai Erera",
            "id": "comment-13560585"
        },
        {
            "date": "2013-01-23T15:20:07+0000",
            "content": "I reported a bug with the J9 team, let's wait for their response.\n\nIn the meanwhile, Gilad and I have investigated it more. Gilad found this link: http://www.javaspecialists.eu/archive/Issue179.html, which says \"With a small test, we see that the varargs also does not create objects on the Java Heap as long as the array is small enough\". That's weird .. as if the JVM implementation can decide to allocate small arrays outside the heap space .. so what does it mean? Is it not safe to save a reference to a vararg parameter?\n\nWe searched the JLS, but couldn't find anything relevant. Also, we've been able to isolate the problem to a small testcase (attached), which reproduces the problem quite easily. Interestingly, if we pass many arguments to the varargs constructor, the error doesn't happen .. maybe because then the JVM is forced to allocate the array on the heap, since it's \"large enough\". ",
            "author": "Shai Erera",
            "id": "comment-13560741"
        },
        {
            "date": "2013-01-23T15:20:33+0000",
            "content": "File which exposes the bug ",
            "author": "Shai Erera",
            "id": "comment-13560742"
        },
        {
            "date": "2013-01-23T16:27:36+0000",
            "content": "the JVM implementation can decide to allocate small arrays outside the heap space .. so what does it mean? Is it not safe to save a reference to a vararg parameter?\n\nMy understanding is that the JVM can decide to allocate small objects on the stack if the object is small (for some definition of small) enough and if it is safe to do so (the object doesn't escape the scope of the compiled method). So it is perfectly safe to save any object reference. ",
            "author": "Adrien Grand",
            "id": "comment-13560805"
        },
        {
            "date": "2013-01-28T10:11:16+0000",
            "content": "I received a response from the JIT team, that they believe they've tracked the bug, and it's somehow related to the private default ctor (used by the CategoryPath.EMPTY) which allocates an empty String[]. As a workaround, until a fix will be issued, they suggested I set components = null instead. I tried it locally, and it works. It even makes sense, since length=0 and there's no real need to allocate even an empty String[]. I ran tests w/ J9 1.7.0 and they pass. Also, the testcase I've produced for the bug report works with that workaround. So I'll commit this to CategoryPath, and remove the IS_IBM check. ",
            "author": "Shai Erera",
            "id": "comment-13564171"
        },
        {
            "date": "2013-01-28T10:14:13+0000",
            "content": "[trunk commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1439327\n\nLUCENE-4711: workaround to J9 1.7.0 JIT bug ",
            "author": "Commit Tag Bot",
            "id": "comment-13564172"
        },
        {
            "date": "2013-01-28T10:22:31+0000",
            "content": "[branch_4x commit] Shai Erera\nhttp://svn.apache.org/viewvc?view=revision&revision=1439329\n\nLUCENE-4711: workaround to J9 1.7.0 JIT bug ",
            "author": "Commit Tag Bot",
            "id": "comment-13564176"
        },
        {
            "date": "2013-05-10T10:34:10+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654142"
        }
    ]
}