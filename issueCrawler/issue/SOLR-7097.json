{
    "id": "SOLR-7097",
    "title": "Update other Document in DocTransformer",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "Solr DocTransformer is good, but it only allows us to change current document: add or remove, update fields.\n\nIt would be great if we can update other document(previous especially) , or better we can delete doc(especially useful during test) or add doc in DocTransformer.\n\nUser case:\nWe can use flat group mode(group.main=true) to put parent and child close to each other(parent first), then we can use DocTransformer to update parent document when access its child document.\n\nSome thought about Implementation:\norg.apache.solr.response.TextResponseWriter.writeDocuments(String, ResultContext, ReturnFields)\nwhen cachMode=true, in the for loop, after transform, we can store the solrdoc in a list, write these doc at the end.\n\ncachMode = req.getParams().getBool(\"cachMode\", false);\nSolrDocument[] cachedDocs = new SolrDocument[sz];\nfor (int i = 0; i < sz; i++) {\n SolrDocument sdoc = toSolrDocument(doc);\n if (transformer != null) \n{\n  transformer.transform(sdoc, id);\n }\n if(cachMode)\n {\n    cachedDocs[i] = sdoc;\n }\n else\n{\n    writeSolrDocument( null, sdoc, returnFields, i );\n }\n\n}\nif (transformer != null) {\n transformer.setContext(null);\n}\nif(cachMode) {\n for (int i = 0; i < sz; i++) \n{\n  writeSolrDocument(null, cachedDocs[i], returnFields, i);\n }\n}\nwriteEndDocumentList();",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-11T20:00:38+0000",
            "author": "Noble Paul",
            "content": "I could not really understand the use case. Can you give out a PoC patch ? ",
            "id": "comment-14316875"
        },
        {
            "date": "2015-02-19T19:56:06+0000",
            "author": "jefferyyuan",
            "content": "Hi, Noble:\n\nIn some cases, we may want to change previous documents: add/update/remove fields.\nOr totally remove previous documents.\n\nOne use case: in solr group flat mode: group.main=true, and groupCount to the first document in this group:\n\nWe choose to not change Solr code in our product instead we write a new CachedXMLWriter whose writeSolrDocument caches the SolrDocument, and write all documents out in writeEndDocumentList. \nhttp://lifelongprogrammer.blogspot.com/2015/01/use-solr-transformer-to-gen-groupcount.html\n\nIt would be great if Solr allows us to change previous documents. ",
            "id": "comment-14328034"
        },
        {
            "date": "2015-02-20T05:26:32+0000",
            "author": "Noble Paul",
            "content": "documents are always streamed out . So we only handle one document at a time. So , Solr cannot give a mechanism to modify previous docs.\n\nHowever, it is possible for the transformer to cache docs . \n\nThe API does not let you do that today , it is pretty rigid.\n\nThe current method is like this\n\n public abstract void transform(SolrDocument doc, int docid) throws IOException;\n\n\nIf it was like the following\n\n\n public abstract List<SolrDocument> transform(SolrDocument doc, int docid) throws IOException;\n\n\nThen you could return an empty list when you want to cache stuff. or you can spit out multiple docs all at once.\n\nBut the challenge is , your rows parameter will be totally screwed. you may specify rows=10 and you may get 100 in return or none at all\n\n ",
            "id": "comment-14328574"
        }
    ]
}