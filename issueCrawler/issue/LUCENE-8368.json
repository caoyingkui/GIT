{
    "id": "LUCENE-8368",
    "title": "facet by polygon",
    "details": {
        "components": [
            "modules/facet"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "This can give some nice flexibility if you are working with search results on a map. Of course if everything about your use-case is static, its better to compute this up-front and index string values, but its not always the case. Also it can be helpful if your polygons are changing often, since you don't have to reindex.\n\nPolygon2D already supports multipolygons, but today it only returns a boolean value. This patch adds a find method that returns the polygon that actually matched, or -1 if it doesn't match. contains is then just written as find >= 0.\n\nThen we can solve the problem with just some sugar over the existing range faceting, as each multipolygon is just a range of ids coming back from find that correspond with it. e.g. if you were faceting by country, you might have ~200 countries with 100,000 total polygons, and polygons 22,000-32,000 correspond to Canada or whatever.",
    "attachments": {
        "LUCENE-8368.patch": "https://issues.apache.org/jira/secure/attachment/12928961/LUCENE-8368.patch",
        "LUCENE-8368_hacky_grid.patch": "https://issues.apache.org/jira/secure/attachment/12928978/LUCENE-8368_hacky_grid.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16521706",
            "author": "Robert Muir",
            "content": "I didn't yet hook up the OSM benchmark for this, would be good to know. If its too sluggish, we can emphasize things like RandomSamplingFacetsCollector and fastMatchQuery more in the javadocs which will help. ",
            "date": "2018-06-24T22:15:59+0000"
        },
        {
            "id": "comment-16521755",
            "author": "Robert Muir",
            "content": "On the OSM benchmark it can facet-by-london-borough at ~ 20M hits/sec on my machine, better than I thought it would do. \n\nThere is some smelly stuff to figure out first though:\n\n\tthe LongValues abstraction used here doesn't support SortedNumeric, that's a problem for LatLonDV. It seems to also be an issue for the numeric range facet classes here.\n\tthe re-use of range stuff makes for less code, but we really shouldn't be doing binary search, since our ranges are 100% dense.\n\tmaybe not so great in the API to force construction of a polygon2D in every query? But when i benchmarked with the boroughs polygons (33 polygons, 186,318 total vertices), this didn't seem to matter either.\n\n ",
            "date": "2018-06-25T01:36:50+0000"
        },
        {
            "id": "comment-16521787",
            "author": "Robert Muir",
            "content": "I also see 4M hits/sec if instead of MatchAllDocsQuery on the OSM, i use newBoxQuery(London) to try to better approach the worst-case. Besides removing the binary search, it would be really good to support Adrien Grand's Grid to do this. It is dumb to descend the tree unless it is an edge case. Conceptually that Grid already just associates an integer value with each sub-box so it might as well be the int of the poly if it fully contains it, but java makes it hard... I will try to think on that. ",
            "date": "2018-06-25T02:42:22+0000"
        },
        {
            "id": "comment-16521796",
            "author": "David Smiley",
            "content": "Clever\u00a0 ",
            "date": "2018-06-25T03:12:42+0000"
        },
        {
            "id": "comment-16521798",
            "author": "Robert Muir",
            "content": "Attached is a hacky way of doing the grid-by-ID. it records ID of polygon for the box, or -1 if its ambigous (and will go to the tree). It bumps the benchmark up to 5M hits/sec at least... feel like it should be better.\n\nI pushed my benchmark mods to https://github.com/rmuir/luceneutil/tree/LUCENE-8368 and you can index/run with -facet -points arguments to IndexAndSearchOpenStreetMaps ",
            "date": "2018-06-25T03:16:28+0000"
        },
        {
            "id": "comment-16521840",
            "author": "Robert Muir",
            "content": "eeked out a bit more from the grid by not throwing way \"outside query\" knowledge: ~ 5.25M hits/sec on that benchmark. I think removing the binary search/numeric range stuff is the next step. ",
            "date": "2018-06-25T04:35:43+0000"
        },
        {
            "id": "comment-16522032",
            "author": "Alan Woodward",
            "content": "the LongValues abstraction used here doesn't support SortedNumeric\n\nThis is something I've wanted to address for a while, as it's the last thing that the old-style ValueSources support that can't be replaced yet.  I think it would need another set of classes, something like MultiLongValuesSource/MultiDoubleValuesSource? ",
            "date": "2018-06-25T08:45:44+0000"
        },
        {
            "id": "comment-16522148",
            "author": "Robert Muir",
            "content": "Alan it doesn't hold me up here, and I havent looked outside of facets to see what the impact would be. In general the numeric range stuff here is geared at (potentially updatable) numericdv... but this is different enough in that it isnt updateable and all the \"ranges\" are contiguous: probably best to just tease it apart from that. ",
            "date": "2018-06-25T11:08:11+0000"
        }
    ]
}