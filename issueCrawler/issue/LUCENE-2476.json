{
    "id": "LUCENE-2476",
    "title": "Constructor of IndexWriter let's runtime exceptions pop up, while keeping the writeLock obtained",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9.3",
            "3.0.2",
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.0.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Constructor of IndexWriter let's runtime exceptions pop up, while keeping the writeLock obtained.\n\nThe init method in IndexWriter catches IOException only (I got NegativeArraySize by reading up a corrupt index), and now, there is no way to recover, since the writeLock will be kept obtained. Moreover, I don't have IndexWriter instance either, to \"grab\" the lock somehow, since the init() method is called from IndexWriter constructor.\n\nEither broaden the catch to all exceptions, or at least provide some circumvention to clear up. In my case, I'd like to \"fallback\", just delete the corrupted index from disk and recreate it, but it is impossible, since the LOCK_HELD NativeFSLockFactory's entry about obtained WriteLock is never cleaned out and is no (at least apparent) way to clean it out forcibly. I can't create new IndexWriter, since it will always fail with LockObtainFailedException.",
    "attachments": {
        "LUCENE-2476.patch": "https://issues.apache.org/jira/secure/attachment/12445466/LUCENE-2476.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-05-25T15:37:28+0000",
            "content": "Can you post here the full stacktrace? ",
            "author": "Shai Erera",
            "id": "comment-12871200"
        },
        {
            "date": "2010-05-25T15:37:54+0000",
            "content": "I agree, we should fix this.  I'll change to a try/finally w/ a success boolean.\n\nYou can use IndexWriter#unlock to forcefully remove the lock, as a workaround. ",
            "author": "Michael McCandless",
            "id": "comment-12871201"
        },
        {
            "date": "2010-05-25T15:44:56+0000",
            "content": "I tried both IndexWriter#unlock and Directory#cleanLock(IndexWriter.WRITE_LOCK_NAME) but non of those removed the entry from LOCK_HELD HashSet. It was unchanged.\n\nThe NativeFSLock#release() was returning false in both cases.\n\nSo, this is what I meant by \"provide some circumvention\", since up to now, I did not figure out any other means to remove the entry from LOCK_HELD. All of these did not remove it. ",
            "author": "Cservenak, Tamas",
            "id": "comment-12871206"
        },
        {
            "date": "2010-05-25T15:44:57+0000",
            "content": "Patch. ",
            "author": "Michael McCandless",
            "id": "comment-12871207"
        },
        {
            "date": "2010-05-25T16:02:12+0000",
            "content": "I tried both IndexWriter#unlock and Directory#cleanLock(IndexWriter.WRITE_LOCK_NAME) but non of those removed the entry from LOCK_HELD HashSet. It was unchanged.\n\nAhh, sorry, I think you are hitting LUCENE-2104. ",
            "author": "Michael McCandless",
            "id": "comment-12871217"
        },
        {
            "date": "2010-05-25T16:03:41+0000",
            "content": "Just to confirm this patch as fix.\n\nThe patch applied to 3.0.1 (I had to do it manually, since I believe this patch is against trunk, not 3.0.1) does fix my problem. The IndexWriter is now successfully recreated and my UT does recover just fine from corrupted indexes. ",
            "author": "Cservenak, Tamas",
            "id": "comment-12871218"
        },
        {
            "date": "2010-05-25T16:05:13+0000",
            "content": "Yes, I do hit LUCENE-2104 at the same time... nice. ",
            "author": "Cservenak, Tamas",
            "id": "comment-12871219"
        },
        {
            "date": "2010-05-25T16:07:18+0000",
            "content": "Out of curiosity - would you mind posting here the exception? ",
            "author": "Shai Erera",
            "id": "comment-12871220"
        },
        {
            "date": "2010-05-25T16:13:09+0000",
            "content": "This is an UT, that 1st copies a known (broken) Index files to a place, and than tries to use it. Naturally, it fails (since the index files are corrupted), and then it tries to recreate the index files and recreate the index content, but it fails to obtain the write lock again. After patch above applied to 3.0.1, the UT does pass okay.\n\nThis is the stack trace I have with vanilla 3.0.1:\n\n\norg.sonatype.timeline.TimelineException: Fail to configure timeline index!\n\tat org.sonatype.timeline.DefaultTimelineIndexer.configure(DefaultTimelineIndexer.java:106)\n\tat org.sonatype.timeline.DefaultTimeline.repairTimelineIndexer(DefaultTimeline.java:79)\n\tat org.sonatype.timeline.DefaultTimeline.configure(DefaultTimeline.java:60)\n\tat org.sonatype.timeline.TimelineTest.testRepairIndexCouldNotRead(TimelineTest.java:103)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat junit.framework.TestCase.runTest(TestCase.java:164)\n\tat junit.framework.TestCase.runBare(TestCase.java:130)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:120)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: org.apache.lucene.store.LockObtainFailedException: Lock obtain timed out: NativeFSLock@/Users/cstamas/worx/sonatype/spice/trunk/spice-timeline/target/index/write.lock\n\tat org.apache.lucene.store.Lock.obtain(Lock.java:84)\n\tat org.apache.lucene.index.IndexWriter.init(IndexWriter.java:1045)\n\tat org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:868)\n\tat org.sonatype.timeline.DefaultTimelineIndexer.configure(DefaultTimelineIndexer.java:99)\n\t... 19 more\n\n ",
            "author": "Cservenak, Tamas",
            "id": "comment-12871224"
        },
        {
            "date": "2010-05-25T16:14:11+0000",
            "content": "The patch applied to 3.0.1 (I had to do it manually, since I believe this patch is against trunk, not 3.0.1) does fix my problem. The IndexWriter is now successfully recreated and my UT does recover just fine from corrupted indexes.\n\nOK thanks for confirming \u2013 I'll backport to 3.0.x as well.\n\n(Yes patch is against trunk). ",
            "author": "Michael McCandless",
            "id": "comment-12871226"
        },
        {
            "date": "2010-05-25T16:17:22+0000",
            "content": "The patch applied to 3.0.1 (I had to do it manually, since I believe this patch is against trunk, not 3.0.1) does fix my problem. The IndexWriter is now successfully recreated and my UT does recover just fine from corrupted indexes.\n\nOK thanks for confirming \u2013 I'll backport to 3.0.x as well.\n\n(Yes patch is against trunk). ",
            "author": "Michael McCandless",
            "id": "comment-12871227"
        },
        {
            "date": "2010-05-25T16:19:32+0000",
            "content": "This exception shows a LockObtainFailed exception - can you post the one that resulted in NegativeArraySize \u2013 curious to know where you hit it, and what sort of corruption yields to that . ",
            "author": "Shai Erera",
            "id": "comment-12871230"
        },
        {
            "date": "2010-05-25T16:39:27+0000",
            "content": "This is a Lucene index known to be corrupt (got from a \"live\" Nexus or just \"breaking\" it manually by tampering with hex editor, not remember anymore). The Lucene used to create this index is 2.3.2, so during this UT I believe an index upgrade happens too.\n\n\n[INFO] Failed to configure timeline index, trying to repair it.\norg.sonatype.timeline.TimelineException: Fail to configure timeline index!\n\tat org.sonatype.timeline.DefaultTimelineIndexer.configure(DefaultTimelineIndexer.java:107)\n\tat org.sonatype.timeline.DefaultTimeline.configure(DefaultTimeline.java:49)\n\tat org.sonatype.timeline.TimelineTest.testRepairIndexCouldNotRead(TimelineTest.java:103)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat junit.framework.TestCase.runTest(TestCase.java:164)\n\tat junit.framework.TestCase.runBare(TestCase.java:130)\n\tat junit.framework.TestResult$1.protect(TestResult.java:106)\n\tat junit.framework.TestResult.runProtected(TestResult.java:124)\n\tat junit.framework.TestResult.run(TestResult.java:109)\n\tat junit.framework.TestCase.run(TestCase.java:120)\n\tat org.eclipse.jdt.internal.junit.runner.junit3.JUnit3TestReference.run(JUnit3TestReference.java:130)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: java.lang.NegativeArraySizeException\n\tat org.apache.lucene.store.IndexInput.readString(IndexInput.java:126)\n\tat org.apache.lucene.index.SegmentInfo.<init>(SegmentInfo.java:173)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:258)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:312)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:677)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:521)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:308)\n\tat org.apache.lucene.index.IndexWriter.init(IndexWriter.java:1076)\n\tat org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:868)\n\tat org.sonatype.timeline.DefaultTimelineIndexer.configure(DefaultTimelineIndexer.java:100)\n\t... 18 more\n\n ",
            "author": "Cservenak, Tamas",
            "id": "comment-12871236"
        },
        {
            "date": "2010-05-30T12:13:44+0000",
            "content": "Merged to 2.9 revision: 949507 ",
            "author": "Uwe Schindler",
            "id": "comment-12873409"
        }
    ]
}