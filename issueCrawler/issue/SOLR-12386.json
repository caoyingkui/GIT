{
    "id": "SOLR-12386",
    "title": "Test fails for \"Can't find resource\" for files in the _default configset",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "SolrCloud"
        ],
        "type": "Test",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Some tests, especially\u00a0ConcurrentCreateRoutedAliasTest, have failed sporadically\u00a0failed\u00a0with the message\u00a0\"Can't find resource\" pertaining to a file that is in the default ConfigSet yet mysteriously can't be found. \u00a0This happens when a collection is being created that ultimately fails for this reason.",
    "attachments": {
        "cant find resource, stacktrace.txt": "https://issues.apache.org/jira/secure/attachment/12924622/cant%20find%20resource%2C%20stacktrace.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-22T21:08:16+0000",
            "content": "Commit af59c46363f3497d44548021e4ff15d924ddbec3 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=af59c46 ]\n\nSOLR-12386: Apply AwaitsFix to ConcurrentCreateRoutedAliasTest ",
            "author": "ASF subversion and git services",
            "id": "comment-16484575"
        },
        {
            "date": "2018-05-22T21:12:27+0000",
            "content": "Commit 982268efd14147ab99ab5b3e152fd4106e6581f1 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=982268e ]\n\nSOLR-12386: Apply AwaitsFix to ConcurrentCreateRoutedAliasTest\n\n(cherry picked from commit af59c46) ",
            "author": "ASF subversion and git services",
            "id": "comment-16484582"
        },
        {
            "date": "2018-05-22T21:19:27+0000",
            "content": "Analysis strategy:\n\n\tEnumerate each test that has failed this way (share here). \u00a0What do they have in common?\n\tTry to make a test that easily reproduces; maybe with some beasting.\n\t? go digging; come up with hair brained theories ?\n\n ",
            "author": "David Smiley",
            "id": "comment-16484591"
        },
        {
            "date": "2018-05-23T21:46:14+0000",
            "content": "This overall symptom sounds really familar \u2013 see SOLR-12021.\n\nI wonder if the root cause here is similar to what I found in that jira?\n[resource files] are being loaded with ...getClassLoader().getResourceAsStream(resourceName) \u2013 but nothing is ever closing the stream, so it can eventually (depending on what test classes run in each JVM and how many files they try to open like this) cause the JVM to hit the ulimit for open file handles \u2013 but that specific cause of the failure is never reported, because ClassLoader.getResourseAsStream(...) is explicity designed to swallow any IOExceptions encountered and just returns \"null\"...\n...allthough there was definitely some leaked InputStreams in that jira, there wouldn't neccessarily even have to be a resource leak to see similar problems: if individual tests are opening a lot of cores concurrently, they could be hitting the ulimit on jenkins (\"randomly\" depending on what other tests were run in the same JVM causing a variable number of open file handles to various class files held open by the current system classloader) but instead of throwing a clean error to that effect getSourceAsStream just returns null and causes the SolrResourceLoader to assume it doesn't exist ... maybe?\n\n(we should probably consider making ClassLoader.getResourceAsStream a forbidden API to prevent this risk even if it's not the cause of the current failures.) ",
            "author": "Hoss Man",
            "id": "comment-16488082"
        },
        {
            "date": "2018-05-23T21:52:02+0000",
            "content": "You can't make getResourceAsStream a forbidden-api, because this method(s) is basically all Java resource handling is going through. All other classloader methods are behaving the same way, so how to load resources then? ",
            "author": "Uwe Schindler",
            "id": "comment-16488088"
        },
        {
            "date": "2018-05-23T21:57:19+0000",
            "content": "All other classloader methods are behaving the same way, so how to load resources then?\nNot true \u2013 getResourceAsStream explicitly swallows any IOExceptions (which might be thrown if there are too many open files) and returns \"null\" if they are encountered \u2013 we can do the same thing but actually catch & wrap/rethrow the IOExceptions by calling ClassLoader.getResource() + URL.openConnection() instead.\n\nAs i said: see SOLR-12021...\nhttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=blobdiff;f=solr/solrj/src/java/org/apache/solr/common/util/Utils.java;h=d35486e6c7688c4b32d8bd6840e590a36b4a5ab2;hp=4ab24d2be3e2aaf39b041c2a3676f456040b5e58;hb=9e0e301;hpb=df0f141907b0701d7b1f1fc297ae33ef901844a0\n\n ",
            "author": "Hoss Man",
            "id": "comment-16488095"
        },
        {
            "date": "2018-05-23T22:04:29+0000",
            "content": "GetResource() may also return null, if the lookup of a file name does not work. Happens easily when you run out of file handles and the JAR file to be search in was closed by another call before. ",
            "author": "Uwe Schindler",
            "id": "comment-16488104"
        },
        {
            "date": "2018-05-23T22:34:57+0000",
            "content": "GetResource() may also return null ...\n\nBut at least then you can tell the difference between \"getResource() returned null meaning we didn't locate the file resource name\" and \"openConnection() threw 'IOException: Too many open files'\"\n\nAnd now that i look at it again: if we used Enumeration<URL> getResources(String name) instead of URL getResource(String) wouldn't that ensure we would get an IOException instead of \"null\" in the case you're talking about where even the lookup of the name failed because of too many filehandles? ",
            "author": "Hoss Man",
            "id": "comment-16488133"
        },
        {
            "date": "2018-05-23T22:45:49+0000",
            "content": "And now that i look at it again: if we used Enumeration<URL> getResources(String name) instead of URL getResource(String) wouldn't that ensure we would get an IOException instead of \"null\" in the case you're talking about where even the lookup of the name failed because of too many filehandles?\n\nThis could work if we create a static utility method taking Class or ClassLoader and a resource name, returning an InputStream. Unfortunately there is no Class#getResources(), it's only on classloader. We still have the problem outside of Solr's code that after running out of file handles, loading of resources fails - and sometimes fails with NPE (depending on the brokenness of code)!\n\nIMHO, the file handle leak in the mentioned commit could habe been fixed by just using try-with-resources around Class(Loader)#getResourceAsStream(). But we should fix the underlying issue (the leaks first), then think about improving that situation. ",
            "author": "Uwe Schindler",
            "id": "comment-16488143"
        },
        {
            "date": "2018-05-23T22:59:22+0000",
            "content": "Unfortunately there is no Class#getResources(), it's only on classloader.\n\nWhy does that matter? Doesn't Class.getResourceAsStream() just call Class.getClassLoader().getResourceAsStream() ?  we could still replace it with a helper utility like you're describing by passing Class.getClassLoader()\n\nBut we should fix the underlying issue (the leaks first), then think about improving that situation.\n\nMy point before is that there may not actually be a leak \u2013 it may very well be that all streams are getting closed properly, but that some tests are opening just enough resources that (depending on what other tests ran in the same JVM and what classes got loaded) they are hitting the ulimit for open files \u2013 but instead of a clear error to that effect, we're getting \"null\" from getResourceAsStream()\n\nie: i agree with you that if there is a file handle leak we should fix it, but that is an indepenent possibility from the fact that we can/should \"fix\" the code we have which opens Resources to better report/propogate when we hit 'IOException: Too many open files' under the covers so people aren't baffled and confused by \"Can't find resource\" for files that definitely exist. ",
            "author": "Hoss Man",
            "id": "comment-16488164"
        },
        {
            "date": "2018-05-23T23:04:07+0000",
            "content": "BTW...\nIMHO, the file handle leak in the mentioned commit could habe been fixed by just using try-with-resources around Class(Loader)#getResourceAsStream() ...\n...that would have solved that particular leak, but it would not have fixed the error message returned in the event that the getResourceAsStream() in that line of code returned 'null' down the road because some other place in the code had a different resource leak ... we would still have the possibility of the caller throwing confusing invalid API spec: apispec/core.config.Commands.json exceptions because the method just returned 'null' and it couldn't distinguish \"resource doesn't exist\" from \"OS wouldn't let the JVM open that resource\" ",
            "author": "Hoss Man",
            "id": "comment-16488172"
        },
        {
            "date": "2018-05-24T21:17:47+0000",
            "content": "Interesting.\nI'm not sure how this would be an issue for the SolrCloud tests for configSet resources since they are in ZooKeeper.  Or am I missing something? ",
            "author": "David Smiley",
            "id": "comment-16489821"
        },
        {
            "date": "2018-06-18T17:01:39+0000",
            "content": "David Smiley Looking at BadApple'd tests, ConcurrentCreateRoutedAliasTest is AwaitsFix on this. This test hasn't failed in 4 weeks, WDYT about un-annotating it on the theory that it's fixed by SOLR-12021? ",
            "author": "Erick Erickson",
            "id": "comment-16516017"
        },
        {
            "date": "2018-06-19T02:24:06+0000",
            "content": "No; SOLR-12021 does not fix it; I've seen this error several times well after that was committed.  As Hoss says in his first comment here:\n\nI wonder if the root cause here is similar to what I found in that jira?\n\n\"similar\" (not same) ",
            "author": "David Smiley",
            "id": "comment-16516573"
        }
    ]
}