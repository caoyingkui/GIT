{
    "id": "SOLR-10807",
    "title": "Randomize PointFields in all tests unless explicit reason not to",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "7.0",
            "7.1",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We need to seriously beef up our testing of PointFields to figure out what Solr features don't currently work with PointFields.\n\nThe existing Trie/Point randomization logic in SolrTestCaseJ4 is a good start \u2013 but only a handful of schema files leverage it.\n\n\n\nAllthough a jira/SOLR-10807 branch was originally created with this goal, it was ultimately just used for initial experimentation, and has been abandoned.  The \"meat\" of the work needed to improve how we randomize in Point fields was done in SOLR-10864, and other sub-tasks of this issue have been / are being used to track rolling out this randomization to more and more test schema files and validating the affected tests.\n\nThis effort is now highly parallelizable  \u2013 so here are some rough guidelines/suggestions for folks interested in contributing to this effort:\n\n\tcreate a subtask identifying the name (or glob) of the test-files schema file you plan to tackle before starting (so multiple people don't duplicate work on the same tests\n\trun the following one liner (assumming bash/perl) to change all Trie field types in the schema(s) to use the new randomized system vars...\n\nfind -name \\*your-schema-glob-or-name\\* -type f | xargs perl -i -ple 's/class=\"solr.TrieIntField\"/class=\"solr.TrieIntegerField\"/g; s/class=\"solr.Trie(.*)Field\"/class=\"\\${solr.tests.$1FieldType}\"/g; unless (/docValues/) { s/(class=\"\\${solr.tests..*FieldType}\")/$1 docValues=\"\\${solr.tests.numeric.dv}\"/g; }'\n\n\n\tidentify the affected tests\n\t\n\t\tgrep for the schema file names in all test classes to start building the list\n\t\trecursively check each test class in the list for subclasses\n\t\n\t\n\thammer on all affected tests with many diff seeds\n\t\n\t\tNOTE: you can force the points vs trie choice by specifying -Dsolr.tests.use.numeric.points=true vs -Dsolr.tests.use.numeric.points=false\n\t\t\n\t\t\tfolks with beefy machines may find it handy to use 2 git working dirs to hammer on diff seeds with a diff hardcoded values of that sysprop\n\t\t\n\t\t\n\t\n\t\n\tIf you encounter any test failures...\n\t\n\t\tfigure out the root  cause\n\t\tfile a new \"Bug\" jira, link it as related to SOLR-10807 & SOLR-8396\n\t\t\n\t\t\tNOTE: first double check there isn't already a bug on point linked to from one of those places\n\t\t\n\t\t\n\t\tuse @SuppressPointFields (citing the new jira) if necessary for any functionality that absolutely will not work with point fields\n\t\tuse something like this in tests where functionality requires docValues in order to work properly with points (although in practice, the comment should always cite the relevant jira)\n\t\t\n\t\t\thttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=blobdiff;f=solr/core/src/test/org/apache/solr/handler/component/DistributedFacetPivotLargeTest.java;h=eb6f54d5db42ba6f24d88d9bbda78bfab198a94e;hp=0c5e128ba8a5cf1a8b488b17ddf9ce2030e0f22d;hb=38f29b2;hpb=a948e1714609ef662184c71eedb219caf44fc037\n\t\t\n\t\t\n\t\tuse something like this if a small subset of a test is known to not work with points...\n\t\t\n\t\t\thttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=blobdiff;f=solr/core/src/test/org/apache/solr/search/function/TestFunctionQuery.java;h=4cee94b86bb41dcc451f72c81c21f6ed911b9e95;hp=f19e4b08530c9650515c64ef7d589f21db939ccf;hb=38f29b2;hpb=a948e1714609ef662184c71eedb219caf44fc037\n\t\t\n\t\t\n\t\tuse something like this if the test has a need/reason to care/assert what the underying FieldType is of a numeric field...\n\t\t\n\t\t\thttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=blobdiff;f=solr/core/src/test/org/apache/solr/schema/IndexSchemaTest.java;h=4719f0408fbc39e8b806197c2eb0b26bf533b0c7;hp=7790859fcde43fb9ecedaed8a146aef3cac1ae10;hb=38f29b2;hpb=a948e1714609ef662184c71eedb219caf44fc037\n\t\t\n\t\t\n\t\n\t\n\twhen committing changes, the commit msg should cite both the original sub-task jira#, as well as any bug jira#s that needed special annotation/handling/assumptions - so that in the future people working on fixing those bugs have easy to find GIT SHAs identifying when/where tests are currently hacked to avoid the bugs.",
    "attachments": {
        "core.test.log.txt": "https://issues.apache.org/jira/secure/attachment/12871105/core.test.log.txt",
        "core.test.log.fde06f34b7f9d0916a134b3efaa8780892ff8e39.txt": "https://issues.apache.org/jira/secure/attachment/12871299/core.test.log.fde06f34b7f9d0916a134b3efaa8780892ff8e39.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-03T04:32:16+0000",
            "content": "\nI've started experimenting with bulk change to all test schemas to use the randomization logic \u2013 or more specifically: a slight modification of the existing randomization logic, because of the issues noted in SOLR-10177.\n\nIn a nutshell...\n\n\n\tchange every schema, and every test that uses managed schema to create a numeric field, to use a \"randomly\" choosen sysprop for defining the Int/Float/Long/Double/Date FieldType Class name to use\n\t\n\t\tforce the \"random\" logic to always choose points (temporarily)\n\t\t\n\t\t\tNOTE: this still allows TrieFields for the tests that use @SuppressPointFields\n\t\t\n\t\t\n\t\n\t\n\tHACK: in \"test mode\": force PointFields to ignore extra TrieField args (ie: precisionStep)\n\t\n\t\tto minimize number of changes needed to test schemas\n\t\n\t\n\n\n\n(w/o that last HACK, a simple \"search and replace\" in test schemas wouldn't be good enough, because many schemas might have multiple \"Integer\" Trie fieldTypes with diff precisionSteps \u2013 I was looking for a simple brute force way to replace every usage of Trie fields with Point fields ... even if it's not something we want to commit to master)\n\nOnce that was in place, I started running tests and needed to HACK a few more things to get past some large barrieres that were obvious very quickly...\n\n\n\thad to disable some useless code in ExternalFileField to get most schemas to load\n\t\n\t\tshould probably commit this change either way\n\t\n\t\n\tin SimpleFacets & StatsComponent, I tweaked the error handling to allow uninversion of single valued points\n\t\n\t\tsee SOLR-10472 which came after these error checks were added\n\t\ttests using multivalued non-DV numerics still fail of course, but a lot of single valued ones seem to wrok now\n\t\n\t\n\twe have 48 test schemas that use numeric fields for the uniqueKey Field (why?!?!?!)\n\t\n\t\tthis very obviously/visibly breaks things like QEC on init - and lots of configs have QEC registered even if the test doesn't care about it\n\t\tmore subtly: it also breaks simple things like deleteById (no term to delete by IIUC)\n\t\tI attempted to brute force these schemas to use \"string\" for the id, expecting it might cause some \"false failures\" (ie: if a test using one of these schemas was depending on numeric order for sorting/range-queries on the uniqueKeyField) but in practice there were still lots of confusing failures due to tests expecting Numerc types for the 'id' field in returned documents.\n\t\tSo instead I just made IndexSchema fail fast if someone tries to use a PointField for uniqueKey \u2013 this means we're still probably masking some other PointField realted bugs in tests that use these schema, but my hope was that at least the \"masking\" failures would now unambiguious.\n\t\n\t\n\n\n\nThat's as far as i got today \u2013 but i plan to continue to spend a lot of time on this next week as well.\n\nI'm attaching my ant output from running just the solr/core tests.  I haven't had a chance to dig into the results much \u2013 but at a glance...\n\n\nCompleted [724/724 (145!)] on J0 in 0.00s, 5 tests\n...\nTests with failures [seed: DA139D8A7DC075B6] (first 10 out of 207):\n...\nTests summary: 724 suites (8 ignored), 2866 tests, 104 suite-level errors, 71 errors, 34 failures, 1631 ignored (85 assumptions)\n\n$ grep -l \"facet on a multivalued PointField without docValues\" ../build/solr-core/test/*.xml\n../build/solr-core/test/TEST-org.apache.solr.schema.TestPointFields.xml\n../build/solr-core/test/TEST-org.apache.solr.TestRandomDVFaceting.xml\n$ grep -l \"stats on a multivalued PointField without docValues\" ../build/solr-core/test/*.xml\n\n# no matches to the last grep ... i guess we're not doing much multi-valued numeric stats testing???\n\n$ grep -l \"nocommit: uniqueKey\" ../build/solr-core/test/*.xml | wc -l\n119\n\n$ grep -L \"nocommit: uniqueKey\" ../build/solr-core/test/*.xml | xargs grep -L 'errors=\"0\" failures=\"0\"'\n../build/solr-core/test/TEST-org.apache.solr.cloud.BasicDistributedZk2Test.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.DistribCursorPagingTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.DistribJoinFromCollectionTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.ForceLeaderTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.HttpPartitionTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.LeaderFailoverAfterPartitionTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.LeaderFailureAfterFreshStartTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.LeaderInitiatedRecoveryOnCommitTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.RecoveryAfterSoftCommitTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.SolrCloudExampleTest.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.TestCloudDeleteByQuery.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.TestCryptoKeys.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.TestOnReconnectListenerSupport.xml\n../build/solr-core/test/TEST-org.apache.solr.cloud.TestRandomRequestDistribution.xml\n../build/solr-core/test/TEST-org.apache.solr.core.TestCustomStream.xml\n../build/solr-core/test/TEST-org.apache.solr.core.TestDynamicLoading.xml\n../build/solr-core/test/TEST-org.apache.solr.handler.TestSolrConfigHandlerCloud.xml\n../build/solr-core/test/TEST-org.apache.solr.handler.TestSQLHandler.xml\n../build/solr-core/test/TEST-org.apache.solr.response.TestGeoJSONResponseWriter.xml\n../build/solr-core/test/TEST-org.apache.solr.schema.TestBulkSchemaConcurrent.xml\n../build/solr-core/test/TEST-org.apache.solr.schema.TestPointFields.xml\n../build/solr-core/test/TEST-org.apache.solr.search.join.BlockJoinFacetDistribTest.xml\n../build/solr-core/test/TEST-org.apache.solr.search.join.TestCloudNestedDocsSort.xml\n../build/solr-core/test/TEST-org.apache.solr.search.TestSolr4Spatial2.xml\n../build/solr-core/test/TEST-org.apache.solr.servlet.CacheHeaderTest.xml\n../build/solr-core/test/TEST-org.apache.solr.TestRandomDVFaceting.xml\n\n\n\n\nNOTE: A spot check of a few suites from that last list suggests that many of them are still failing due to a root cause of the uniqueKey field using points \u2013 but that's not manifesting in the failure message for various reasons (ie: test doesn't check if core/collection loaded/created successfully before hiting it with queries)\n\n\nNow that I have a jira# I'll create a branch to iterate on and investigating further.  The biggest priority being figuring out a quick & dirty solution to working around the schemas using numeric uniqueKey fields \u2013 so we can get past the \"known known\" of points not working for uniqueKey and see what new failures pop up in these tests)\n\n(unless someone has a better idea, i'll probably script up a change to add an explict, non-randomized, TrieFooField fieldType to any schema whose 'id' field uses type \"foo\" and adjust the 'id' field to use that fieldType)\n ",
            "author": "Hoss Man",
            "id": "comment-16035797"
        },
        {
            "date": "2017-06-03T04:35:15+0000",
            "content": "Commit c76a79b5bb47e9b2903b90b84958c6bdeb043d52 in lucene-solr's branch refs/heads/jira/SOLR-10807 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c76a79b ]\n\nSOLR-10807: first start at brute forcing PointFields to replace Tries in all test schemas to see what features break\n\nlots of missleading failures due to test schemas using numeric uniqueKey fields ",
            "author": "ASF subversion and git services",
            "id": "comment-16035798"
        },
        {
            "date": "2017-06-05T20:51:32+0000",
            "content": "Commit 48d16b92734831543b68bb3e28aceb12a3936a70 in lucene-solr's branch refs/heads/jira/SOLR-10807 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=48d16b9 ]\n\nSOLR-10807: add an explicit trie fieldType back to any schema that needs it for the 'id' field.\n\nthese changes were made with the following quick & dirty script, followed by some manual cleanup of 2 schema files\nthat still use '<types/>' tags and use uniqueKey.\n\nif ($_ =~ /name=\"id\"/ and $_ =~ /type=\"[^\"](int|float)[^\"]\"/) {\n    my $type = $1;\n    my $class = ($type eq 'int') ? 'solr.TrieIntField' : 'solr.TrieFloatField';\n    $_ =~ s/type=\"[^\"]*\"/type=\"nocommit_id_type\"/;\n    print qq\n{<fieldType name=\"nocommit_id_type\" class=\"$class\" indexed=\"true\" stored=\"true\" multiValued=\"false\" />}\n;\n} ",
            "author": "ASF subversion and git services",
            "id": "comment-16037568"
        },
        {
            "date": "2017-06-05T20:51:34+0000",
            "content": "Commit fde06f34b7f9d0916a134b3efaa8780892ff8e39 in lucene-solr's branch refs/heads/jira/SOLR-10807 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fde06f3 ]\n\nSOLR-10807: some small hacks to get past some obvious test problems ",
            "author": "ASF subversion and git services",
            "id": "comment-16037569"
        },
        {
            "date": "2017-06-05T20:59:17+0000",
            "content": "(unless someone has a better idea, i'll probably script up a change to add an explict, non-randomized, TrieFooField fieldType to any schema whose 'id' field uses type \"foo\" and adjust the 'id' field to use that fieldType)\n\nDone.\n\nAs of fde06f34b7f9d0916a134b3efaa8780892ff8e39 (branch jira/SOLR-10807) this is what ant test on solr-core gives ...\n\n   [junit4] Tests with failures [seed: 40DB535C83C56F23] (first 10 out of 72):\n   ...\n   [junit4] Tests summary: 724 suites (8 ignored), 3226 tests, 5 suite-level errors, 32 errors, 35 failures, 111 ignored (97 assumpassumptions)\n\n\n\nThe full log is attached. I skimmed the reproduce lines and here's the ones that jumped out at me as not being obvious \"false-negatives\" (ie: facet/stats tests failing on multivalued non-dv points fields, or points tests failing because they expected errors when they didn't get them, or because of whitebox introspection that fails because of our schema changes)...\n\n(In otherwords: every thing on the list below concerns/scares me, roughly in order of how concerned I am)\n\n\n### Spooky PeerSync failure...\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=PeerSyncTest -Dtests.method=test -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=es-US -Dtests.timezone=US/Samoa -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 10.1s J1 | PeerSyncTest.test <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<[7001, 7001001, 7001002, 8000, 8000001, 8000002]> but was:<[8000001, 8000002, 8000, 8000003, 8000004, 8000005, 7001001, 7001002, 7001]>\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:C88F6C862D3902DB]:0)\n   [junit4]    >        at org.apache.solr.update.PeerSyncTest.validateQACResponse(PeerSyncTest.java:348)\n   [junit4]    >        at org.apache.solr.update.PeerSyncTest.validateDocs(PeerSyncTest.java:334)\n   [junit4]    >        at org.apache.solr.update.PeerSyncTest.test(PeerSyncTest.java:325)\n\n### Spooky CDCR failure...\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=CdcrBootstrapTest -Dtests.method=testConvertClusterToCdcrAndBootstrap -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=ja-JP -Dtests.timezone=Europe/Vaduz -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 13.6s J0 | CdcrBootstrapTest.testConvertClusterToCdcrAndBootstrap <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: COLLECTIONCHECKPOINT from target cluster should have returned the maximum version across all updates made to source expected:<1569392138418913329> but was:<-1>\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:970C7C2B379AF764]:0)\n   [junit4]    >        at org.apache.solr.cloud.CdcrBootstrapTest.testConvertClusterToCdcrAndBootstrap(CdcrBootstrapTest.java:142)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n\n\n\n\n### Points Numerics don't handle bad input consistent with how Trie numerics did...\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestCloudDeleteByQuery -Dtests.method=testMalformedDBQViaShard2LeaderClient -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-US -Dtests.timezone=Asia/Nicosia -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.18s J1 | TestCloudDeleteByQuery.testMalformedDBQViaShard2LeaderClient <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: not the expected DBQ failure: Error from server at http://127.0.0.1:33708/solr/test_col: Async exception during distributed update: Error from server at http://127.0.0.1:52266/solr/test_col_shard1_replica_n1: Server Error\n   [junit4]    > request: http://127.0.0.1:52266/solr/test_col_shard1_replica_n1/update?update.distrib=TOLEADER&distrib.from=http%3A%2F%2F127.0.0.1%3A33708%2Fsolr%2Ftest_col_shard2_replica_n1%2F&wt=javabin&version=2\n   [junit4]    > Remote error message: For input string: \"not_a_num\" expected:<400> but was:<500>\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestCloudDeleteByQuery -Dtests.method=testMalformedDBQViaCloudClient -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-US -Dtests.timezone=Asia/Nicosia -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestCloudDeleteByQuery -Dtests.method=testMalformedDBQViaShard1LeaderClient -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-US -Dtests.timezone=Asia/Nicosia -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   \n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestCloudDeleteByQuery -Dtests.method=testMalformedDBQViaShard1NonLeaderClient -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-US -Dtests.timezone=Asia/Nicosia -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestCloudDeleteByQuery -Dtests.method=testMalformedDBQViaNoCollectionClient -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-US -Dtests.timezone=Asia/Nicosia -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestCloudDeleteByQuery -Dtests.method=testMalformedDBQViaShard2NonLeaderClient -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-US -Dtests.timezone=Asia/Nicosia -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestTolerantUpdateProcessorCloud -Dtests.method=testSanity -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-PH -Dtests.timezone=Hongkong -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.31s J0 | TestTolerantUpdateProcessorCloud.testSanity <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: not the expected DBQ failure: Error from server at https://127.0.0.1:59814/solr/test_col: Async exception during distributed update: Error from server at https://127.0.0.1:37939/solr/test_col_shard2_replica_n1: Server Error\n   [junit4]    > request: https://127.0.0.1:37939/solr/test_col_shard2_replica_n1/update?update.distrib=TOLEADER&distrib.from=https%3A%2F%2F127.0.0.1%3A59814%2Fsolr%2Ftest_col_shard1_replica_n2%2F&wt=javabin&version=2\n   [junit4]    > Remote error message: For input string: \"not_a_num\" expected:<400> but was:<500>\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestIntervalFaceting -Dtests.method=testParse -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=ar-DZ -Dtests.timezone=Africa/Luanda -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.02s J0 | TestIntervalFaceting.testParse <<<\n   [junit4]    > Throwable #1: java.lang.NumberFormatException: For input string: \"A\"\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:2F5E18043FB35CCC]:0)\n   [junit4]    >        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n   [junit4]    >        at java.lang.Long.parseLong(Long.java:589)\n   [junit4]    >        at java.lang.Long.parseLong(Long.java:631)\n   [junit4]    >        at org.apache.solr.schema.LongPointField.readableToIndexed(LongPointField.java:126)\n   [junit4]    >        at org.apache.solr.schema.PointField.toInternalByteRef(PointField.java:194)\n   [junit4]    >        at org.apache.solr.request.IntervalFacets$FacetInterval.getLimitFromString(IntervalFacets.java:699)\n   [junit4]    >        at org.apache.solr.request.IntervalFacets$FacetInterval.getLimitFromString(IntervalFacets.java:691)\n   [junit4]    >        at org.apache.solr.request.IntervalFacets$FacetInterval.<init>(IntervalFacets.java:571)\n   [junit4]    >        at org.apache.solr.request.TestIntervalFaceting.assertBadInterval(TestIntervalFaceting.java:565)\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=BasicFunctionalityTest -Dtests.method=testClientErrorOnMalformedNumbers -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=es -Dtests.timezone=Brazil/DeNoronha -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.00s J1 | BasicFunctionalityTest.testClientErrorOnMalformedNumbers <<<\n   [junit4]    > Throwable #1: java.lang.NumberFormatException: For input string: \"NOT_A_NUMBER\"\n\n\n\n### Export writer aparently requires Trie fields...\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSQLHandler -Dtests.method=doTest -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=ja -Dtests.timezone=Canada/East-Saskatchewan -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   22.3s J0 | TestSQLHandler.doTest <<<\n   [junit4]    > Throwable #1: java.io.IOException: --> http://127.0.0.1:33899/collection1:Failed to execute sqlQuery 'select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc' against JDBC connection 'jdbc:calcitesolr:'.\n   [junit4]    > Error while executing SQL \"select id, field_i, str_s from collection1 where (text='(XXXX)' OR text='XXXX') AND text='XXXX' order by field_i desc\": java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: --> http://127.0.0.1:33899/collection1/:Export fields must either be one of the following types: int,float,long,double,string,date,boolean\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestExportWriter -Dtests.method=testSortingOutput -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-PH -Dtests.timezone=America/Kentucky/Louisville -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 0.03s J1 | TestExportWriter.testSortingOutput <<<\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestExportWriter -Dtests.method=testExportRequiredParams -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-PH -Dtests.timezone=America/Kentucky/Louisville -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.01s J1 | TestExportWriter.testExportRequiredParams <<<\n   [junit4]    > Throwable #1: java.io.IOException: Sort fields must be one of the following types: int,float,long,double,string,date,boolean\n\n\n\n### SpatialPointVectorFieldType requires Trie fields...\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeoJSONResponseWriter -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=zh -Dtests.timezone=Brazil/Acre -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.00s J1 | TestGeoJSONResponseWriter (suite) <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Can't load schema /home/hossman/lucene/dev/solr/core/src/test-files/solr/collection1/conf/schema-spatial.xml: field type must be TrieDoubleField: tdouble{class=org.apache.solr.schema.DoublePointField,analyzer=org.apache.solr.schema.FieldType$DefaultAnalyzer,args={precisionStep=8, class=solr.DoublePointField}}\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSolr4Spatial -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=ar-SD -Dtests.timezone=Europe/Belgrade -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.00s J1 | TestSolr4Spatial (suite) <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Can't load schema /home/hossman/lucene/dev/solr/core/src/test-files/solr/collection1/conf/schema-spatial.xml: field type must be TrieDoubleField: tdouble{class=org.apache.solr.schema.DoublePointField,analyzer=org.apache.solr.schema.FieldType$DefaultAnalyzer,args={precisionStep=8, class=solr.DoublePointField}}\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSolr4Spatial2 -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=fi -Dtests.timezone=Asia/Srednekolymsk -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.00s J1 | TestSolr4Spatial2 (suite) <<<\n   [junit4]    > Throwable #1: org.apache.solr.common.SolrException: Can't load schema /home/hossman/lucene/dev/solr/core/src/test-files/solr/collection1/conf/schema-spatial.xml: field type must be TrieDoubleField: tdouble{class=org.apache.solr.schema.DoublePointField,analyzer=org.apache.solr.schema.FieldType$DefaultAnalyzer,args={precisionStep=8, class=solr.DoublePointField}}\n\n\n\n\n### Inexplicable incorrect \"results\" of some kind (maybe hidden cascading failure caused by something above?)\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestDistributedGrouping -Dtests.method=test -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=ar-YE -Dtests.timezone=Africa/Juba -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 7.93s J2 | TestDistributedGrouping.test <<<\n   [junit4]    > Throwable #1: junit.framework.AssertionFailedError: .facet_counts.facet_fields.a_t.0:2!=1\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:C88F6C862D3902DB]:0)\n   [junit4]    >        at junit.framework.Assert.fail(Assert.java:50)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase.compareSolrResponses(BaseDistributedSearchTestCase.java:913)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase.compareResponses(BaseDistributedSearchTestCase.java:932)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:607)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:587)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:566)\n   [junit4]    >        at org.apache.solr.TestDistributedGrouping.test(TestDistributedGrouping.java:214)\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=SpatialHeatmapFacetsTest -Dtests.method=test -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=es-BO -Dtests.timezone=Antarctica/South_Pole -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 1.23s J1 | SpatialHeatmapFacetsTest.test <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<400> but was:<500>\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:C88F6C862D3902DB]:0)\n   [junit4]    >        at org.apache.solr.handler.component.SpatialHeatmapFacetsTest.test(SpatialHeatmapFacetsTest.java:62)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsRepeatStatement.callStatement(BaseDistributedSearchTestCase.java:1011)\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=HardAutoCommitTest -Dtests.method=testCommitWithin -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-MT -Dtests.timezone=Africa/Conakry -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.29s J1 | HardAutoCommitTest.testCommitWithin <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:FA093C2400EB8136]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:940)\n   [junit4]    >        at org.apache.solr.update.HardAutoCommitTest.testCommitWithin(HardAutoCommitTest.java:100)\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestFaceting -Dtests.method=testFacetSortWithMinCount0 -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-US -Dtests.timezone=America/Indiana/Marengo -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.01s J2 | TestFaceting.testFacetSortWithMinCount0 <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:9A441BC96DFD46D9]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:940)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:907)\n   [junit4]    >        at org.apache.solr.request.TestFaceting.testFacetSortWithMinCount0(TestFaceting.java:337)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.RuntimeException: REQUEST FAILED: xpath=*[count(//lst[@name='f_td']/int)=3]\n   [junit4]    >        xml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]    > <response>\n   [junit4]    > <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">0</int></lst><result name=\"response\" numFound=\"1\" start=\"0\"><doc><float name=\"id\">1.0</float><double name=\"f_td\">-420.126</double><long name=\"_version_\">1569393347178528768</long></doc></result><lst name=\"facet_counts\"><lst name=\"facet_queries\"/><lst name=\"facet_fields\"><lst name=\"f_td\"><int name=\"-420.126\">1</int></lst></lst><lst name=\"facet_ranges\"/><lst name=\"facet_intervals\"/><lst name=\"facet_heatmaps\"/></lst>\n   [junit4]    > </response>\n   [junit4]    >        request was:q=id:1.0&facet.field=f_td&f.f_td.facet.sort=index&facet.method=fc&facet.mincount=0&facet=true&wt=xml\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestFaceting -Dtests.method=testTrieFields -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=en-US -Dtests.timezone=America/Indiana/Marengo -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.01s J2 | TestFaceting.testTrieFields <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:25664F12A6A7456E]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:940)\n   [junit4]    >        at org.apache.solr.request.TestFaceting.testTrieFields(TestFaceting.java:289)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.RuntimeException: REQUEST FAILED: xpath=*[count(//lst[@name='f_ti']/int)=1]\n   [junit4]    >        xml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]    > <response>\n   [junit4]    > <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">0</int></lst><result name=\"response\" numFound=\"0\" start=\"0\"></result><lst name=\"facet_counts\"><lst name=\"facet_queries\"/><lst name=\"facet_fields\"><lst name=\"f_ti\"/></lst><lst name=\"facet_ranges\"/><lst name=\"facet_intervals\"/><lst name=\"facet_heatmaps\"/></lst>\n   [junit4]    > </response>\n   [junit4]    >        request was:q=f_ti:43&facet.field=f_ti&facet.method=enum&facet.mincount=0&facet=true&wt=xml&facet.sort=count\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGraphTermsQParserPlugin -Dtests.method=testQueries -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=es-CU -Dtests.timezone=Asia/Macao -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.07s J1 | TestGraphTermsQParserPlugin.testQueries <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:1C559F8799ACDA8D]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:940)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:907)\n   [junit4]    >        at org.apache.solr.search.TestGraphTermsQParserPlugin.testQueries(TestGraphTermsQParserPlugin.java:106)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.RuntimeException: REQUEST FAILED: xpath=*[count(//doc)=5]\n   [junit4]    >        xml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]    > <response>\n   [junit4]    > <lst name=\"responseHeader\">\n   [junit4]    >   <int name=\"status\">0</int>\n   [junit4]    >   <int name=\"QTime\">0</int>\n   [junit4]    > </lst>\n   [junit4]    > <result name=\"response\" numFound=\"0\" start=\"0\">\n   [junit4]    > </result>\n \n\n\n\n\n### Test timeouts (possibly unrelated to points work?)\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=UnloadDistributedZkTest -Dtests.method=test -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=sr-ME -Dtests.timezone=Etc/GMT+2 -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR    106s J0 | UnloadDistributedZkTest.test <<<\n   [junit4]    > Throwable #1: com.carrotsearch.randomizedtesting.UncaughtExceptionError: Captured an uncaught exception in thread: Thread[id=14493, name=testExecutor-5210-thread-1, state=RUNNABLE, group=TGRP-UnloadDistributedZkTest]\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:C88F6C862D3902DB]:0)\n   [junit4]    > Caused by: java.lang.RuntimeException: org.apache.solr.client.solrj.SolrServerException: Timeout occured while waiting response from server at: http://127.0.0.1:46895\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23]:0)\n   [junit4]    >        at org.apache.solr.cloud.UnloadDistributedZkTest.lambda$testUnloadLotsOfCores$0(UnloadDistributedZkTest.java:412)\n\n\n### ExternalFileField/FileFloatSource doesn't work if *keyField* is points based numeric\n\n# Root cause seems to be because no term enum for points fields.\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestFunctionQuery -Dtests.method=testExternalFileFieldNumericKey -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=es-AR -Dtests.timezone=America/Argentina/San_Juan -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.01s J2 | TestFunctionQuery.testExternalFileFieldNumericKey <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:6C2C41715AC0AECB]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:940)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:907)\n   [junit4]    >        at org.apache.solr.search.function.TestFunctionQuery.singleTest(TestFunctionQuery.java:126)\n   [junit4]    >        at org.apache.solr.search.function.TestFunctionQuery.singleTest(TestFunctionQuery.java:132)\n   [junit4]    >        at org.apache.solr.search.function.TestFunctionQuery.testExternalFileFieldNumericKey(TestFunctionQuery.java:302)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.NullPointerException\n   [junit4]    >        at org.apache.solr.search.function.FileFloatSource.getFloats(FileFloatSource.java:273)\n\n\n\n### Terms component doesn't work with Points\n\n   [junit4]   2> 1597484 INFO  (TEST-DistributedTermsComponentTest.test-seed#[40DB535C83C56F23]) [    ] o.e.j.s.h.ContextHandler Stopp\ned o.e.j.s.ServletContextHandler@146e0738{/,null,UNAVAILABLE}\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=DistributedTermsComponentTest -Dtests.method=test -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=und -Dtests.timezone=Pacific/Guam -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   1.64s J2 | DistributedTermsComponentTest.test <<<\n   [junit4]    > Throwable #1: org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at http://127.0.0.1:47383//collection1: Can't generate internal string in PointField. use PointField.toInternalByteRef\n\n\n\n\n### ord() and rord() functions don't play nice with points?\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=DisMaxRequestHandlerTest -Dtests.method=testSomeStuff -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=sl -Dtests.timezone=Atlantic/South_Georgia -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.00s J2 | DisMaxRequestHandlerTest.testSomeStuff <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:AEC94260775C9E19]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:940)\n   [junit4]    >        at org.apache.solr.DisMaxRequestHandlerTest.doTestSomeStuff(DisMaxRequestHandlerTest.java:76)\n   [junit4]    >        at org.apache.solr.DisMaxRequestHandlerTest.testSomeStuff(DisMaxRequestHandlerTest.java:72)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.IllegalStateException: unexpected docvalues type NONE for field 'iind' (expected one of [SORTED, SORTED_SET]). Re-index with correct docvalues type.\n   [junit4]    >        at org.apache.lucene.index.DocValues.checkField(DocValues.java:340)\n   [junit4]    >        at org.apache.lucene.index.DocValues.getSortedSet(DocValues.java:433)\n   [junit4]    >        at org.apache.solr.search.function.ReverseOrdFieldSource.getValues(ReverseOrdFieldSource.java:98)\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=DisMaxRequestHandlerTest -Dtests.method=testExtraBlankBQ -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=sl -Dtests.timezone=Atlantic/South_Georgia -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.01s J2 | DisMaxRequestHandlerTest.testExtraBlankBQ <<<\n   [junit4]    > Throwable #1: java.lang.IllegalStateException: unexpected docvalues type NONE for field 'iind' (expected one of [SORTED, SORTED_SET]). Re-index with correct docvalues type.\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:F5DCCAEC43212E62]:0)\n   [junit4]    >        at org.apache.lucene.index.DocValues.checkField(DocValues.java:340)\n   [junit4]    >        at org.apache.lucene.index.DocValues.getSortedSet(DocValues.java:433)\n   [junit4]    >        at org.apache.solr.search.function.ReverseOrdFieldSource.getValues(ReverseOrdFieldSource.java:98)\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestFunctionQuery -Dtests.method=testGeneral -Dtests.seed=40DB535C83C56F23 -Dtests.slow=true -Dtests.locale=es-AR -Dtests.timezone=America/Argentina/San_Juan -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.11s J2 | TestFunctionQuery.testGeneral <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([40DB535C83C56F23:76294761B4024BBD]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:940)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:907)\n   [junit4]    >        at org.apache.solr.search.function.TestFunctionQuery.testGeneral(TestFunctionQuery.java:333)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.IllegalStateException: Type mismatch: id was indexed with multiple values per document, use SORTED_SET instead\n   [junit4]    >        at org.apache.solr.uninverting.FieldCacheImpl$SortedDocValuesCache.createValue(FieldCacheImpl.java:931)\n   [junit4]    >        at org.apache.solr.uninverting.FieldCacheImpl$Cache.get(FieldCacheImpl.java:199)\n   [junit4]    >        at org.apache.solr.uninverting.FieldCacheImpl.getTermsIndex(FieldCacheImpl.java:899)\n   [junit4]    >        at org.apache.solr.uninverting.FieldCacheImpl.getTermsIndex(FieldCacheImpl.java:879)\n   [junit4]    >        at org.apache.solr.uninverting.UninvertingReader.getSortedDocValues(UninvertingReader.java:339)\n   [junit4]    >        at org.apache.lucene.index.MultiDocValues.getSortedValues(MultiDocValues.java:586)\n   [junit4]    >        at org.apache.solr.index.SlowCompositeReaderWrapper.getSortedDocValues(SlowCompositeReaderWrapper.java:132)\n   [junit4]    >        at org.apache.lucene.index.DocValues.getSortedSet(DocValues.java:431)\n   [junit4]    >        at org.apache.solr.search.function.OrdFieldSource.getValues(OrdFieldSource.java:98)\n\n\n\n\n\n\n\nI want to dig into this list a bit and open new jiras once i've confirmed they are real problems and not just silly mistakes on my end \u2013 but before I do that the other idea that occured to me is to go ahead and kludge in a quick & dirty version of SOLR-10808 (assumes docValues=\"true\" unless explicitly told otherwise ... or maybe just only in PointsField and only in \"pretend i'm a test mode\" ?).\n\nThis might produce more \"false failures\" in whitebox style tests, or in TestPointFields where it's expecting errors when docValues aren't used \u2013 but for all the older tests where we've swapped points fields in for trie fields it should help get past the current \"can't facet on multivalued poins w/o DV\" errors to see if anything else goes wrong \u2013 The idea being: if we assume that moving forward we want points as defaults, and if we assume moving forward we'll just tell people \"you need docValues to facet/stats on points\" then let's brute force test that scenerio and see if there are any problems. ",
            "author": "Hoss Man",
            "id": "comment-16037584"
        },
        {
            "date": "2017-06-06T03:37:46+0000",
            "content": "\n... other idea that occured to me is to go ahead and kludge in a quick ... assumes docValues=\"true\" unless explicitly told otherwise ...  This might produce more \"false failures\" in whitebox style tests, or in TestPointFields where it's expecting errors when docValues aren't used ..\n\nThis idea was largely a bust so i didn't even bother committing it.  It did in fact produce more errors in whitebox tests (and or test that did a good job sanity checking their schema expectations), but what i didn't really think through is that most tests are defining docValues=\"foo\" directly on the field/dynamicField and not inheriting it from the fieldType ... so kludging this into PointField.init() didn't really help in most cases (i guess maybe it would have to be hacked into SchemaField, with an instanceof check on the FieldType ?)\n\nOf the new failures It did turn up, there were 2 interesting/non-obvious failures (note: these won't reproduce on any committed version of the branch ... just posting here so i remember to look into these later)\n\n\n### Grouped Facets has explicit assumptions about DocVals type?\n\n   [junit4]   2> 287824 INFO  (TEST-SimpleFacetsTest.testSimpleGroupedFacets-seed#[63854996088ED7B7]) [    ] o.a.s.SolrTestCaseJ4 ###Ending testSimpleGroupedFacets\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=SimpleFacetsTest -Dtests.method=testSimpleGroupedFacets -Dtests.seed=63854996088ED7B7 -Dtests.slow=true -Dtests.locale=it -Dtests.timezone=SST -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] ERROR   0.01s J2 | SimpleFacetsTest.testSimpleGroupedFacets <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([63854996088ED7B7:D674368DBC1D40A8]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:940)\n   [junit4]    >        at org.apache.solr.request.SimpleFacetsTest.testSimpleGroupedFacets(SimpleFacetsTest.java:386)\n   [junit4]    >        at org.apache.solr.request.SimpleFacetsTest.testSimpleGroupedFacets(SimpleFacetsTest.java:374)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: org.apache.solr.common.SolrException: Exception during facet.field: duration_i1\n   [junit4]    >        at org.apache.solr.request.SimpleFacets.lambda$getFacetFieldCounts$0(SimpleFacets.java:812)\n   [junit4]    >        at java.util.concurrent.FutureTask.run(FutureTask.java:266)\n   [junit4]    >        at org.apache.solr.request.SimpleFacets$3.execute(SimpleFacets.java:745)\n   [junit4]    >        at org.apache.solr.request.SimpleFacets.getFacetFieldCounts(SimpleFacets.java:821)\n   [junit4]    >        at org.apache.solr.handler.component.FacetComponent.getFacetCounts(FacetComponent.java:329)\n   [junit4]    >        at org.apache.solr.handler.component.FacetComponent.process(FacetComponent.java:273)\n   [junit4]    >        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:295)\n   [junit4]    >        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:178)\n   [junit4]    >        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2487)\n   [junit4]    >        at org.apache.solr.util.TestHarness.query(TestHarness.java:337)\n   [junit4]    >        at org.apache.solr.util.TestHarness.query(TestHarness.java:319)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:914)\n   [junit4]    >        ... 41 more\n   [junit4]    > Caused by: java.lang.IllegalStateException: unexpected docvalues type NUMERIC for field 'duration_i1' (expected=SORTED). Re-index with correct docvalues type.\n\n\n### (distributed?) HLL hashing bug?\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestDistributedStatsComponentCardinality -Dtests.method=test -Dtests.seed=63854996088ED7B7 -Dtests.slow=true -Dtests.locale=de-GR -Dtests.timezone=Etc/UCT -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 13.3s J2 | TestDistributedStatsComponentCardinality.test <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: int_i: hashed vs prehashed, real=7260, p=q=id:[1186+TO+8445]&rows=0&stats=true&stats.field={!cardinality%3Dtrue+hllLog2m%3D7+hllRegwidth%3D8}int_i&stats.field={!cardinality%3Dtrue+hllLog2m%3D7+hllRegwidth%3D8+hllPreHashed%3Dtrue}int_i_prehashed_l&stats.field={!cardinality%3Dtrue+hllLog2m%3D7+hllRegwidth%3D8}long_l&stats.field={!cardinality%3Dtrue+hllLog2m%3D7+hllRegwidth%3D8+hllPreHashed%3Dtrue}long_l_prehashed_l&stats.field={!cardinality%3Dtrue+hllLog2m%3D7+hllRegwidth%3D8}string_s&stats.field={!cardinality%3Dtrue+hllLog2m%3D7+hllRegwidth%3D8+hllPreHashed%3Dtrue}string_s_prehashed_l expected:<6632> but was:<7929>\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([63854996088ED7B7:EBD1764CA672BA4F]:0)\n   [junit4]    >        at org.apache.solr.handler.component.TestDistributedStatsComponentCardinality.test(TestDistributedStatsComponentCardinality.java:149)\n\n\n ",
            "author": "Hoss Man",
            "id": "comment-16038050"
        },
        {
            "date": "2017-06-07T01:16:15+0000",
            "content": "\nBeen reviewing some of these issues to try and wrap my head around the current problems so i can keep them in mind when looking for the best way to move forward with total randomization of trie vs points.  Here's what i've got so far...\n\n\n\tSOLR-10834 tracks the broader problem of test schemas using TrieFooFields for uniqueKey\n\tSOLR-10830 (w/ SOLR-10829) is the root cause of the PeerSyncTest failure\n\tSOLR-10832 is the root cause of the CdcrBootstrapTest failure\n\tSOLR-10833 is the root cause of all the failures realted to NumberFormatException on bad input (TestCloudDeleteByQuery, etc...)\n\tSpatialPointVectorFieldType is deprecated with the plan to remove it in 8.0 (see SOLR-10729)\n\t\n\t\tso that seems like a candidate for leaving one explicit TrieDoubleField in schema-spatial.xml\n\t\n\t\n\tSOLR-10835 tracks ExportWriter explicitly rejecting non-Trie fields\n\n ",
            "author": "Hoss Man",
            "id": "comment-16039949"
        },
        {
            "date": "2017-06-07T23:07:21+0000",
            "content": "\n\n\tSOLR-10807: group.facet bugs when grouping on point fields\n\t(deprecated) SpatialPointVectorFieldType's init failure on non-Trie fields is also the root cause of the patialHeatmapFacetsTest - just not as obvious because of how tests is written\n\t\n\t\tI confirmed tweaking schema-spatial.xml to a TrieDoubleFields where needed for the deprecated classes did in fact fix SpatialHeatmapFacetsTest, TestGeoJSONResponseWriter, TestSolr4Spatial and TestSolr4Spatial2 such that all tests pass\n\t\n\t\n\tThe HardAutoCommitTest looks like a red herring - i can't reproduce it, and nothing about it seems related to trie vs points changes (timing glitch?)\n\tSOLR-10033: existing known problem with points fields and facet.mincount, causing failures in both TestFaceting.testFacetSortWithMinCount0 and TestFaceting.testTrieFields\n\tSOLR-10845: GraphTermsQParserPlugin doesn't work with points fields\n\tSOLR-10846: ExternalFileField doesn't work with points fields\n\tSOLR-10847: TermsComponent doesn't work with Points fields\n\n ",
            "author": "Hoss Man",
            "id": "comment-16041862"
        },
        {
            "date": "2017-06-08T18:30:56+0000",
            "content": "Commit c373f5c8dddf2a981e0867aae5e2d5a315b8474b in lucene-solr's branch refs/heads/jira/SOLR-10807 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c373f5c ]\n\nSOLR-10807: temporarily allow non-randomized sme TrieDouble type instances used by deprecated classes so the cores will load and things can be tested ",
            "author": "ASF subversion and git services",
            "id": "comment-16043200"
        },
        {
            "date": "2017-06-22T17:09:29+0000",
            "content": "FWIW: now that SOLR-10864 has landed on master, I'm probably going to abandon the jira/SOLR-10807 branch (which has served it's purpose for experimentation) and move forward with multiple individual sub-tasks focusing on adding the (new) randomized variables into more and more schema files/tests in small chunks untill we have them everywhere. ",
            "author": "Hoss Man",
            "id": "comment-16059696"
        },
        {
            "date": "2017-06-27T00:25:04+0000",
            "content": "FWIW, here's a handy oneliner for replacing Trie fieldType declarations with the new randomized variables into some (subset of) schema files...\n\n\nfind -name \\*schema\\* -type f | xargs perl -i -ple 's/class=\"solr.TrieIntField\"/class=\"solr.TrieIntegerField\"/g; s/class=\"solr.Trie(.*)Field\"/class=\"\\${solr.tests.$1FieldType}\"/g; unless (/docValues/) { s/(class=\"\\${solr.tests..*FieldType}\")/$1 docValues=\"\\${solr.tests.numeric.dv}\"/g; }'\n\n ",
            "author": "Hoss Man",
            "id": "comment-16064040"
        },
        {
            "date": "2017-07-19T17:38:07+0000",
            "content": "Since we're nearly finished with all known/expected subtasks, and they were all finished & backported to both 7x and 7.0, There doesn't seem to be any reason we can't just consolidate the CHANGES entries into a single line item \u2013 if no one objects, i'll collapse everything nested under the existing SOLR-10807 entry down into something like...\n\n\n* SOLR-10807: Randomize Points based numeric field types in all existing tests & test schemas\n  where Trie numerics were previously hardcoded. (hossman, Steve Rowe, Anshum Gupta)\n\n\n\n...once i finish with SOLR-11123 ",
            "author": "Hoss Man",
            "id": "comment-16093476"
        },
        {
            "date": "2017-07-20T01:13:26+0000",
            "content": "Commit 25c1ac7423a301e05b53cee2f0f022756c6c5c5e in lucene-solr's branch refs/heads/branch_7_0 from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=25c1ac7 ]\n\nSOLR-10807: CHANGES simplification to summarize all completed sub-tasks\n\n(cherry picked from commit 82d29e3a091476cf27ecadc2a32fca4bea50f13c) ",
            "author": "ASF subversion and git services",
            "id": "comment-16094046"
        },
        {
            "date": "2017-07-20T01:13:28+0000",
            "content": "Commit adbe74b61f30462b87eae4d60514836455ae99c0 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=adbe74b ]\n\nSOLR-10807: CHANGES simplification to summarize all completed sub-tasks\n\n(cherry picked from commit 82d29e3a091476cf27ecadc2a32fca4bea50f13c) ",
            "author": "ASF subversion and git services",
            "id": "comment-16094047"
        },
        {
            "date": "2017-07-20T01:13:30+0000",
            "content": "Commit 82d29e3a091476cf27ecadc2a32fca4bea50f13c in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=82d29e3 ]\n\nSOLR-10807: CHANGES simplification to summarize all completed sub-tasks ",
            "author": "ASF subversion and git services",
            "id": "comment-16094048"
        },
        {
            "date": "2017-10-17T11:03:40+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16207351"
        }
    ]
}