{
    "id": "SOLR-7171",
    "title": "BaseDistributedSearchTestCase.getSolrXml() not used consistently - multiple divergent ways a JettySolrRunner may be inited",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "As part of SOLR-6349, i wanted to take advantage of the new features in SOLR-7147 to inspect shard requests in TestDistributedSearch, but even though i added a proper override of getSolrXml...\n\n\n  @Override\n  protected String getSolrXml() {\n    return \"solr-trackingshardhandler.xml\"; \n  }\n\n\n\n...that value was being ignored, and i was never getting an instance of TrackingShardHandlerFactory.\n\nI poked around a bit and confirmed that getSolrXml() is used by \"setupJettySolrHome(File)\" but that method is never called by BaseDistributedSearchTestCase - it's only called in framework subclasses like AbstractDistribZkTestBase and AbstractFullDistribZkTestBase.  Instead, for simple subclasses of BaseDistributedSearchTestCase the jetty instances seem to be coming from createServers(int)\n\n\n\nI don't really understand why there are so many diff ways for a shard instance to be inited, and presumably that should be refactored? .. but a more immediate concern is that subclasses of BaseDistributedSearchTestCase which attempt to override the solr.xml file used can't (unless they are actually a subclass of AbstractDistribZkTestBase of AbstractFullDistribZkTestBase)",
    "attachments": {
        "SOLR-7171.patch": "https://issues.apache.org/jira/secure/attachment/12701455/SOLR-7171.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-27T21:29:31+0000",
            "author": "Hoss Man",
            "content": "here's a patch i'm currently hammering on ... doesn't completley eliminate all the code/logic duplication, but at least gets us consistently using getSolrXml() (as far as i can tell)\n\nPart of making this work, was to change createControlJetty() and createServers(int numShards) to clone the getSolrHome() dir ... previously (if you subclassed BaseDistributedSearchTestCase) these methods would just re-use the same getSolrHome() dir for all the jetty instances, and only override the cores & data dirs.\n\nNot sure if folks have any strong opinion against this?  it seems like a \"fix\" to the previous awkward hoops, and makes these simple distrib test work more like the cloud tests .. but it would certainly be possible to add more awkwards hoops to only clone getSolrHome() in the event that we need to override the solr.xml. ",
            "id": "comment-14340843"
        },
        {
            "date": "2015-02-27T23:07:21+0000",
            "author": "Hoss Man",
            "content": "\nthe previous patch broke DistributedClusteringComponentTest - which is evidently the only contrib test we have that test distributed queries.\n\nOnce i got logs enabled for the test, it was clear thatthe problem was that in the contrib test, where getSolrHome() was overridden to point to the contrib test directory with a collection1 that had all the clustering configs enabled, Solr was failing to init because there were do directories under the coreRootDirectory that both had a core.properties claiming they were collection1 ... there was the real collection1 that the test wanted, but there was also an empty cores directory that contained nothing but a core.properties file (claiming to be name=collection1.\n\nI spent a while trying to figure out how the hell this was working before my patch, before finally giving up \u2013 because whatever it was actually doing, it seems pretty clear this was some kind of mistake \u2013 the core.properties file being created was directly in a ./cores/ directory that lookd like it was intended to be the coreRootDirectory \u2013 except the coreRootDirectory was always getting set to be the same as getSolrHome().\n\nIn any case: here's an updated patch where the (previously) odd ./cores/ directory is no longer created; the (now cloned) getSolrHome() directory is still used as the coreRootDirectory; a ./collection1/core.properties file is created if and only if it does not exist.\n\nThis fixes the problem with DistributedClusteringComponentTest in a way that also keeps my TestSimpleTrackingShardHandler working w/o modifications to either \u2013 so hopefully it should work for any end-user subclasses as well.\n\nStill hammering on the full test suite, but i'd really appreciate it if Alan Woodward and Erick Erickson could review this since it seems like a lot of this \"./cores/ dir as collection1\" weirdness came about as a result of SOLR-6840 (and perhaps SOLR-6902? ... not certain) ",
            "id": "comment-14340991"
        },
        {
            "date": "2015-02-28T22:03:49+0000",
            "author": "Alan Woodward",
            "content": "Oh God, I spent days trying to refactor this before I gave up and used the hacky \"just create a damn core.properties file\" solution.  The issue with SOLR-6840 was that there were a bunch of solr.xml files that defined a core called collection1, and the tests assumed that this core would exist when they started.  But the new format doesn't allow for that, so the tests now had to create core.properties files instead.\n\nAnyway, your fix looks good Hoss.  I like that it makes it explicit that it's creating a new solr.xml and empty core. ",
            "id": "comment-14341799"
        },
        {
            "date": "2015-03-01T20:20:24+0000",
            "author": "Erick Erickson",
            "content": "What Alan said.\n\nIt looks fine to me too. One quick note is that it's not even necessary (in non-cloud mode at least) for anything to be in the core.properties file if all the defaults are acceptable, its mere existence is all that's absolutely required. Then the core name is taken from the directory core.properties is found in, the data dir is expected to be a directory in at the same level as core.properties etc..\n\nOn a side note, it'd be nice, sometime, to get all traces of \"collection1\" out of there, but that's not something for the faint of heart, nor should it be conflated with this issue... ",
            "id": "comment-14342441"
        },
        {
            "date": "2015-03-02T18:10:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1663381 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1663381 ]\n\nSOLR-7171: BaseDistributedSearchTestCase now clones getSolrHome() for each subclass, and consistently uses getSolrXml() ",
            "id": "comment-14343510"
        },
        {
            "date": "2015-03-02T20:33:51+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1663421 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1663421 ]\n\nSOLR-7171: BaseDistributedSearchTestCase now clones getSolrHome() for each subclass, and consistently uses getSolrXml() (merge r1663381) ",
            "id": "comment-14343711"
        },
        {
            "date": "2015-04-15T00:30:09+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495227"
        }
    ]
}