{
    "id": "LUCENE-4584",
    "title": "Compare the LZ4 implementation in Lucene against the original impl",
    "details": {
        "components": [],
        "fix_versions": [
            "4.1"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Task",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "We should add tests to make sure that the LZ4 impl in Lucene compresses data the exact same way as the original impl.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-01T22:50:50+0000",
            "content": "Do you want to run the C code? Oh, oh for platform compatibility...! ",
            "author": "Uwe Schindler",
            "id": "comment-13508091"
        },
        {
            "date": "2012-12-01T23:35:29+0000",
            "content": "I have planned to add example of files compressed with the C version to Lucene's svn repo and add tests that check that our impl generate the same compressed bytes. This would make me more confident that our impl compresses data efficiently and that it does not have bugs. ",
            "author": "Adrien Grand",
            "id": "comment-13508103"
        },
        {
            "date": "2012-12-01T23:40:52+0000",
            "content": "I would be cool to have randomized input to the C code compressor decompressed by the Java code, and vice versa .  (Much better than static compressed C code results.)  ",
            "author": "Steve Rowe",
            "id": "comment-13508104"
        },
        {
            "date": "2012-12-01T23:48:21+0000",
            "content": "Adrien: good idea.\n\nSteven: We are a Java project and we have no platform independent way to run C code. I think Adrien's idea is enough, maybe use 2 or 3 different length examples. Just like Apache TIKA parading MS Office docs, they also don't start MS Office while testing \u2665 ",
            "author": "Uwe Schindler",
            "id": "comment-13508106"
        },
        {
            "date": "2012-12-01T23:59:07+0000",
            "content": "Testing cross-implementation compression/decompression would indeed be very cool but I'm a little worried about adding the sources of LZ4 and a task to compile C code to the lucene-core build (or maybe I could do these LZ4 tests in a dedicated module so that it doesn't make lucene-core depend on native code?).\n\nI think we should also compare the output bytes to make sure the compressor is efficient (a perfectly valid LZ4 implementation would be to always write a single sequence that only contains the input bytes as literals, this is what should happen only when the input is incompressible). Given that the LZ4 output depends on the endianess of the machine, this can unfortunately only be done with static files. ",
            "author": "Adrien Grand",
            "id": "comment-13508110"
        },
        {
            "date": "2012-12-02T00:33:07+0000",
            "content": "Steven: We are a Java project and we have no platform independent way to run C code. I think Adrien's idea is enough, maybe use 2 or 3 different length examples. Just like Apache TIKA parading MS Office docs, they also don't start MS Office while testing \u2665\n\nI agree Adrien's idea is enough, and in any case is better than what we have now (pnp), but I still think cross-impl testing would be nice.\n\ncpp-tasks is used to compile NativePosixUtil.cpp, so there is precedent for this in our project...\n\nI'm a little worried about adding the sources of LZ4 and a task to compile C code to the lucene-core build (or maybe I could do these LZ4 tests in a dedicated module so that it doesn't make lucene-core depend on native code?).\n\nI think it would be fine to include test-only native code in lucene-core tests, as long as compilation and testing were both fast.\n\nI think we should also compare the output bytes to make sure the compressor is efficient. [...] Given that the LZ4 output depends on the endianess of the machine, this can unfortunately only be done with static files.\n\nYou wouldn't need static files if you compared output lengths, though correctness would of course no longer be implied.\n ",
            "author": "Steve Rowe",
            "id": "comment-13508119"
        },
        {
            "date": "2012-12-02T09:10:27+0000",
            "content": "cpp-tasks is used to compile NativePosixUtil.cpp, so there is precedent for this in our project...\n\n-1. THIS IS NOT PART OF OUR (OFFICIALLY SUPPORTED) BUILD SYSTEM; IT IS NOT EVEN TESTED AT ALL! ",
            "author": "Uwe Schindler",
            "id": "comment-13508191"
        },
        {
            "date": "2012-12-02T13:51:12+0000",
            "content": "I'm confused why this is a blocker at all: I'm going to unset it.\n\nI don't actually care if our LZ4 is conformant to the original impl.\n\nI only care that it compresses well, is reasonably fast, and doesn't corrumpt. ",
            "author": "Robert Muir",
            "id": "comment-13508269"
        },
        {
            "date": "2012-12-02T14:01:08+0000",
            "content": "You wouldn't need static files if you compared output lengths\n\nEven the output length depends on the endianess: LZ4 uses a hash table without collision resolution (it maps hash -> last offset that produced this hash) to find matchs of 4 consecutive bytes in the input bytes, and this hash function is not endian-neutral (it interprets the 4 bytes as an 32-bits int, multiplies it by a prime number and keeps the 12 first bits (13 if there are less than 2^16 input bytes)), so the collisions won't be the same depending on the endianess and LZ4 won't find the same matchs. ",
            "author": "Adrien Grand",
            "id": "comment-13508270"
        },
        {
            "date": "2012-12-02T14:08:25+0000",
            "content": "I only care that it compresses well, is reasonably fast, and doesn't corrupt.\n\nRight, the issue is probably badly named. The reason why I want to compare against the original impl is exacly for the reasons you mention: making sure that our impl compresses well and trying to find bugs in it. ",
            "author": "Adrien Grand",
            "id": "comment-13508276"
        },
        {
            "date": "2012-12-02T15:34:04+0000",
            "content": "I agree with Robert here. We don't need to test random data, for Lucene only 2 things are important:\n\n\tWhen you compress random data and decompress it again, the same exact bytes must come back. This should be tested and needs no external C code. This is the doesn't corrumpt\u2122 Robert is talking about.\n\tThe compressed content should never get significantly bigger\n\n\n\nThere is no reason at all that Lucene's LZ4 returns the same compressed output. E.g. if we find a better algorithm that performs better in Hotspot, although it compresses to a different byte array, we are perfectly fine.\n\nIf we want to assert for now that both algorithms create the same compressed output, we should have three different size random byte files (e.g. generated by /dev/urandom) as test resources and the C-compressed ones also as test resources, and then we can compare the results. We should just document how the test data was created. But keep in mind: We may change the algorithm to produce different bytes, so this is not mandatory. I think we may only assert that the compression percentage of the random data is identical, not the actual bytes. ",
            "author": "Uwe Schindler",
            "id": "comment-13508292"
        },
        {
            "date": "2012-12-03T01:23:23+0000",
            "content": "Comparing the compressed output against the original impl seemed to be a good mean to detect bugs, but if we want to be able to have a different algorithm as Uwe suggests, I'll try to add softer tests (like checking that the algorithm manages to detect a match which is 65535 bytes backwards, gives a reasonable compression ratio on inputs that are known to be easily compressible, etc.) ",
            "author": "Adrien Grand",
            "id": "comment-13508430"
        }
    ]
}