{
    "id": "SOLR-11756",
    "title": "FilteredQuery in 5.5.4 needs scorer loop much more than 4.4.7",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "5.5.4",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "In Solr 5.5.4, FilteredQuery no longer has the LeapFrogScorer as in Solr 4.7. And the whole query is rewritten into a BooleanQuery.  \n\nAs for query, if main query is like \"name:zoo\" which hits 10k docs in index but filterquery like \"location:NewYork\" helped to filter the resultset to 5 docs. \n\nAnd in final, the loop name:zoo set is maximum to 5 times as the filter is there. \nBut in 5.5.4, we are seeing the name:zoo needs to loop 10k docs at first then join with the filter set.\n\nIn our environment, the filter doesn't changed too much so FilterQuery cache can helped in performance. But keyword might changes, so the whole QueryResult cache is not helping in this case.\n\nThis significantly increase the CPU cost for keyword search since we ran the profiling of the same query for these two versions.\n\nIs it possible to have the LeapFrogScorer back?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-13T17:04:00+0000",
            "content": "There won't be any work done on 5.5 at this point, even 6.x is not under any active development at this point.\n\nIf the same behavior is true in 7.x, please re-open this JIRA. ",
            "author": "Erick Erickson",
            "id": "comment-16289532"
        },
        {
            "date": "2018-07-05T20:05:14+0000",
            "content": "This was likely resolved in 6.0 which introduced a FILTER clause to BooleanQuery.  FilteredQuery was removed in 6.0 as well \u2013 LUCENE-6583.  Current code should result in leap-frogging via ConjunctionDISI internally.\n\nSide-note:  ConjunctionDISI has a special case optimization for BitSetIterator DISIs, though Solr won't provide a filter query as-such, unfortunately, because Solr's BitDocSet.getTopFilter/.getDocIdSet/.iterator impl implements DISI directly and not BitSetIterator because the bitSet here is of the whole index instead of partitioned by segment.  FYI Yonik Seeley.  I'm not sure how much that may matter. ",
            "author": "David Smiley",
            "id": "comment-16534087"
        }
    ]
}