{
    "id": "LUCENE-8178",
    "title": "Bulk operations for LongValues and Sorted[Set]DocValues",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "7.2.1",
        "status": "Open",
        "type": "Improvement",
        "components": [],
        "fix_versions": []
    },
    "description": "One-by-one DocValues iteration by advanceExact and nextOrd/ordValue is really slow for bulk operations like facetting.\u00a0Reading and unpacking integers in blocks is substantially faster but DocValues for now can be queried only for single document.\n\nTo apply document-based bulk processing DocIdSetIterator matches have to be splitted to sequential docID runs and remapped to underlying LongValues positions.\n After this transformation relatively large linear scans can be performed over packed integers.\n\n\u00a0\n\nTo do this two new interfaces\n\n1. LongValuesCollector (collectValue(long index, long value)).\n 2. OrdStatsCollector (collectOrd(long ord), collectMissing(int count)).\n\nand three new functions are introduced\n\n1. LongValues.forRange(long begin, long end, LongValuesCollector collector)\n 2. SortedDocValues.forEach(DocIdSetIterator disi, OrdStatsConsumer collector)\n 3. SortedSetDocValues.forEach(DocIdSetIterator disi, OrdStatsConsumer collector)\n\nwith reference implementations.\n\nOptimized versions of these functions are provided for:\n 1. DirectReader for non-32/64 bits per value cases (using PackedInts.Decoder).\n 2. Lucene70DocValuesProducer getSorted and getSortedSet (both sparse and dense).\n\n\u00a0\n\nMeasured Solr facetting performance boost is up to 2 - 2.5x on real index.\n Patch for Solr DocValuesFacets is also provided as separate file.\n\n\u00a0\n\nImplementation notes:\n\n\tOrdStatsCollector does not accept document id because it will ruin performance for SortedSetDocValues due to excessive position lookups.\n\tThis patch is fully compatible with Lucene 7.0 DocValues format.",
    "attachments": {
        "LUCENE-8178.patch": "https://issues.apache.org/jira/secure/attachment/12911152/LUCENE-8178.patch",
        "graph.png": "https://issues.apache.org/jira/secure/attachment/12911236/graph.png",
        "LUCENE-8178-for-solr.patch": "https://issues.apache.org/jira/secure/attachment/12911153/LUCENE-8178-for-solr.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16369904",
            "date": "2018-02-20T10:29:14+0000",
            "content": "I understand how it can make things faster, but I'm a bit on the fence due to how specialized it is (it seems to focus on faceting on MatchAllDocsQuery on an index with not too many deletions) vs. the number of additional APIs. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16369985",
            "date": "2018-02-20T12:06:39+0000",
            "content": "I agree, I think decode done in bulk shouldn't be an api detail. it should be just like the postings lists. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16370186",
            "date": "2018-02-20T16:03:57+0000",
            "content": "Adrien Grand, yes, I've mainly tested it on matchall\u00a0case and non-random\u00a0queries (like date ranges) and after your point I've performed\u00a0small stress test for different random samplings using RandomSortField from Solr\u00a0(image attached: not quite accurate, warmup excluded, several\u00a0low-time points below main clouds seems to be ramp-up phase \u2013 quasi single thread time). Unfortunately, there is\u00a0a regression on less-than-half random portions of document set.\n\nI\u00a0will try to find a way to reduce this penalty for\u00a0random cuts (like many deletions).\n\nRobert Muir, I didn't found suitable API for terminal operations involving DocValues (sorting, top-n selection, faceting, etc \u2013 when query phase is done and no filtering will be performed on DISI), so I have a timid idea about it. ",
            "author": "Nikolay Khitrin"
        }
    ]
}