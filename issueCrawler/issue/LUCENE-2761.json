{
    "id": "LUCENE-2761",
    "title": "specialize payload processing from of DocsAndPositionsEnum",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "In LUCENE-2760 i started working to try to improve the speed of a few spanqueries.\nIn general the trick there is to avoid processing positions if you dont have to.\n\nBut, we can improve queries that read lots of positions further by cleaning up SegmentDocsAndPositionsEnum, \nin nextPosition() this has no less than 3 payloads-related checks.\n\nhowever, a large majority of users/fields have no payloads at all.\nI think we should specialize this case into a separate implementation and speed up the common case.\n\nedit: dyslexia with the jira issue number.",
    "attachments": {
        "LUCENE-2761.patch": "https://issues.apache.org/jira/secure/attachment/12459611/LUCENE-2761.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-11-15T15:37:39+0000",
            "content": "Here's my result from a crappy benchmark that just does SpanFirst query on a very common term:\n\n\n    SpanQuery sq = new SpanFirstQuery(new SpanTermQuery(new Term(\"body\", \"the\")), 1);\n    System.out.println(searcher.search(sq, 10).totalHits);\n    long ms = System.currentTimeMillis();\n    for (int i = 0; i < 100; i++) {\n      searcher.search(sq, 10);\n    }\n    long ms2 = System.currentTimeMillis();\n    System.out.println(\"time = \" + (ms2 - ms));\n\n\n\nAll times below in milliseconds.\n\n\n\n\nsetup\nrun1\nrun2\nrun3\nrun4\nrun5\nrun6\n\n\nTRUNK\n13055\n13054\n13061\n13068\n13070\n13058\n\n\nLUCENE-2760\n7987\n7993\n7995\n7987\n8012\n7989\n\n\nLUCENE-2760+LUCENE-2761\n7741\n7723\n7701\n7702\n7693\n7702\n\n\n\n\n\nI think it sucks to introduce duplication, but if we can eek out a few \n% faster phrasequeries/spanqueries for the common case, i think this is worth it for codecs ",
            "author": "Robert Muir",
            "id": "comment-12932079"
        },
        {
            "date": "2010-11-15T15:43:03+0000",
            "content": "This looks great Robert!  I think it makes sense to manually specialize this. ",
            "author": "Michael McCandless",
            "id": "comment-12932086"
        },
        {
            "date": "2010-11-15T19:41:15+0000",
            "content": "updated patch: in the non-payloads case, when we are blasting through \"useless positions\", we dont care about \nthe return value from readVint, just want to skip over them.\n\nthis seems to help a lot, none of the shifting etc.\n\n\n\n\nsetup\nrun1\nrun2\nrun3\nrun4\nrun5\nrun6\n\n\nLUCENE-2760+LUCENE-2761\n7175\n7204\n7175\n7169\n7176\n7165\n\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-12932164"
        },
        {
            "date": "2010-11-15T20:34:18+0000",
            "content": "same patch with an additional optimization from Mike.\n\n\n\n\nsetup\nrun1\nrun2\nrun3\nrun4\nrun5\nrun6\n\n\nLUCENE-2760+LUCENE-2761\n6854\n6874\n6850\n6855\n6856\n6846\n\n\n\n\n\nalso, because we assume things about read/writeVint, i made these final in DataInput.\n\nI think we can use this same trick to speed up the terms dictionary, where it scans past lots of useless vints/vlongs ",
            "author": "Robert Muir",
            "id": "comment-12932184"
        },
        {
            "date": "2010-11-15T22:20:17+0000",
            "content": "Committed revision 1035473. ",
            "author": "Robert Muir",
            "id": "comment-12932226"
        }
    ]
}