{
    "id": "SOLR-10048",
    "title": "Distributed result set paging sometimes yields incorrect results",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "SearchComponents - other"
        ],
        "type": "Bug",
        "fix_versions": [
            "6.5",
            "7.0"
        ],
        "affect_versions": "6.4",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "This bug appeared in 6.4 and i spotted it yesterday when i upgraded a my project. It has, amongst others,an extension of QueryComponent, its unit test failed, but never in any predictable way and always in another spot.\n\nThe test is very straightforward, it indexes a bunch of silly documents and then executes a series of getAll() queries. An array of ids is collected and stored for comparison. Then, the same query is executed again but it pages through the entire result set.\nIt then compares ids, the id at position N must be the same as id NUM_PAGE * PAGE_SIZE + M (where M is the position of the result in the paged set). The comparison sometimes failes.\n\nI'll attach the test for 6.4 shortly. If it passes, just try it again (or increase maxDocs). It can pass over ten times in a row, but it can also fail ten times in a row.\n\nYou should see this if it fails, but probably with different values for expected and actual. Below was a few minutes ago, now i can't seem to reproduce it anymore.\n\n\n   [junit4] FAILURE 25.1s | DistributedPagedQueryComponentTest.testTheCrazyPager <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: ids misaligned expected:<406> but was:<811>\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([97A7F02D1E4ACF75:7493130F03129E6D]:0)\n   [junit4]    >        at org.apache.solr.handler.component.DistributedPagedQueryComponentTest.testTheCrazyPager(DistributedPagedQueryComponentTest.java:83)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:992)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:967)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)",
    "attachments": {
        "DistributedPagedQueryComponentTest.java": "https://issues.apache.org/jira/secure/attachment/12849673/DistributedPagedQueryComponentTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-01-27T18:16:15+0000",
            "content": "I don't see a \"sort\" specified in the test queries, which means the order is non-deterministic (and practically speaking winds up depending on the on disk ordering of the docs). so there is no guarantee that the order of documents matching the query will be the same in two identical queries \u2013 let alone if you change the paging.\n\neven in a non distrib setup, this test could fail if your config alows for background merges that re-order segments. ",
            "author": "Hoss Man",
            "id": "comment-15843215"
        },
        {
            "date": "2017-01-27T18:56:55+0000",
            "content": "As far as i know, the sort is implicitly score desc. Knowing this test never failed between 5.4 (give or take), it seems the result sets never had any ties on score, apparently on 6.4 it does. Of course, explicitly sorting on score desc,id asc solves the problem.\n\nAny idea on why this is not reproducible on 6.3? I ran it hundreds of times without failure. Is it possible 6.4 causes scores to tie in some cases?\n\nThanks ",
            "author": "Markus Jelsma",
            "id": "comment-15843327"
        },
        {
            "date": "2017-01-27T22:03:05+0000",
            "content": "I'm sorry, I was confusingly imprecise before...\n\n... which means the order is non-deterministic (and practically speaking winds up depending on the on disk ordering of the docs).\n\n...what i should have said was:  ... Which means the default sort is by score desc w/o any secondary sort \u2013 but since the query is *:* all docs (should) score identically, so the effective sort is non-deterministic ...\n\nI'm not sure what might have changed between 6.3 and 6.4 to cause this test to only start failing recently (perhaps something change in the shard querying logic to improve the randomized distribution of sub-requests?) but the bottom line is that w/o a deterministic sort, Solr has never guaranteed consistent ordering between multiple requests. ",
            "author": "Hoss Man",
            "id": "comment-15843557"
        },
        {
            "date": "2017-02-15T12:43:11+0000",
            "content": "I know. But the change between 6.3 and 6.4 was kind of confusing. Let's close this issue as not a problem. ",
            "author": "Markus Jelsma",
            "id": "comment-15867757"
        }
    ]
}