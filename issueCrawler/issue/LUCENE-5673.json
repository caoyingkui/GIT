{
    "id": "LUCENE-5673",
    "title": "MMapDirectory shouldn't pass along OOM wrapped as IOException",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/store"
        ],
        "affect_versions": "4.8",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "The bug here is in java (not MMapDir), but i think we shoudl do something.\n\nUsers get confused when they configure their JVM to trigger something on OOM, and then see \"OutOfMemoryError: Map Failed\": but their trigger doesnt fire.\n\nThats because in the jdk, when it maps files it catches OutOfMemoryError, asks for a garbage collection, sleeps for 100 milliseconds, then tries to map again. if it fails a second time it wraps the OOM in a generic IOException.\n\nI think we should add a try/catch to our filechannel.map",
    "attachments": {
        "LUCENE-5673.patch": "https://issues.apache.org/jira/secure/attachment/12645001/LUCENE-5673.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13998678",
            "author": "Uwe Schindler",
            "content": "Hi,\nthis is indeed a problem. The existence of the OOM somewhere in the stack trace confuses users, because whenever they see OOM, they start to raise -Xmx and by that make the problem worse.\nThe behaviour is correct from the API, because the javadocs of FileChannel.map specify that it throws IOException when mapping fails. But the implementation in OpenJDK is bullshit:\nWe should do something like this:\n\n\n...catch (IOException ioe) {\n  if (ioe.getCause() instanceof OutOfMemoryError) {\n    throw new IOException(\"Memory mapping failed. There might not be enough unfragmented address space available to mmap the index file: \" + ioe.getCause().getMessage()); // without root cause!!!\n  }\n  throw ioe;\n}\n\n\n\nBy that the user just gets a good IOException not referring to OOM.\n\nIndeed the OOM is the real bug, because its caused by OutOfAddressSpaceError and not OutOfMemoryError  ",
            "date": "2014-05-15T11:15:29+0000"
        },
        {
            "id": "comment-13998694",
            "author": "Uwe Schindler",
            "content": "Here is a patch, hiding the OOM (because it is definitley no real OOM). This patch also takes care of \"other more correct\" impls around (like J9). It only triggers by OOM as root cause of IOE. ",
            "date": "2014-05-15T11:39:37+0000"
        },
        {
            "id": "comment-13998706",
            "author": "Robert Muir",
            "content": "I think its a good start but we need to be careful here.\n\nFirst of all my problem is with the \"OutOfMemoryError\" text. I do still think the message should start with \"Map failed\" instead of \"Memory mapping failed\". We want users to be able to google the error and still find some assistance.\n\nIf we are going to offer more explanation in addition to that, it woudl be good to try to add practical stuff: e.g. mention 'ulimit' and 'sysctl vm.max_map_count' and so on. ",
            "date": "2014-05-15T11:53:25+0000"
        },
        {
            "id": "comment-13998711",
            "author": "Uwe Schindler",
            "content": "Thanks Robert!\nI already improved the error message in my patch to also include the file name and the original message of the OOM. We can improve that.\nThe message already contains some hints, but no direct refercces to sysctl, becaus ethis is too OS specific. Of course we could add a switch statement with constants giving some hints per OS.\nThe logic in the patch is ready, we can now just improve the error message. ",
            "date": "2014-05-15T12:05:01+0000"
        },
        {
            "id": "comment-13998828",
            "author": "Uwe Schindler",
            "content": "Slightly improved patch:\n\n\tPreserves the original OOM message text at the beginning of the message\n\tFollowed by FilleChannel.toString()\n\tThen add more explaining text, including the buffer size that failed to map\n\n ",
            "date": "2014-05-15T15:08:46+0000"
        },
        {
            "id": "comment-13999129",
            "author": "Robert Muir",
            "content": "Wait, we absolutely don't want the original text. This is the whole thing that causes confusion, the whole reason I opened this issue.\n\nThe whole reason its confusing is because its \"OutOfMemoryError: Map failed\". Why can't it just start with \"Map failed\"\n\nIf you want the text to say \"OutOfMemoryError\", then please, unwrap the OutOfMemoryError from the IOE and throw that. ",
            "date": "2014-05-15T19:13:18+0000"
        },
        {
            "id": "comment-13999718",
            "author": "Uwe Schindler",
            "content": "The attached patch should bring only the \"Map failed\". But in any case we can also hardcode the text, so we can remove the getMessage(). I just wanted to preserve the original message. The \"OutOfMemoryError\" comes from the wrapped exception, but is not part of the message (see FileChannelImpl of Java 7): throw new IOException(\"Map failed\", oome);. My code takes the message of the IOException (\"Map failed\"), ignores the cause and adds more information like resourceDescription and the hint \"why it failed\".\n\nI was thinking about the problem a bit more, we should always add the resource description, so have 2 exception reformats:\n\n\tChange IOExceptions with OOM wrapped to have a hard-coded text \"Map failed: resourceDescription (this may be caused...)\"\n\tAll other IOExceptions maybe get the resourceDescription just appended? I am not sure about this, which is a more general issue of adding resourceDescription to all IOExceptions our DirectoryImpls throw.\n\n ",
            "date": "2014-05-16T10:15:00+0000"
        },
        {
            "id": "comment-13999725",
            "author": "Uwe Schindler",
            "content": "Attached is a patch with hardcoded \"Map failed\" message. The inner OOM is ignored completely, it is just used to detect this special case.\n\nI also used resourceDescription in the unmapper and removed the Java7-obsolete initCause() there. ",
            "date": "2014-05-16T10:25:26+0000"
        },
        {
            "id": "comment-13999744",
            "author": "Robert Muir",
            "content": "ok now we just need the practical advice to the message...\n\nCONSTANTS.32BIT: \"get a new computer\"\nCONSTANTS.WINDOWS: \"get a new operating system\"\nCONSTANTS.LINUX: \"please review 'ulimit -v' and 'sysctl vm.max_map_count'\" ",
            "date": "2014-05-16T11:19:09+0000"
        },
        {
            "id": "comment-13999768",
            "author": "Uwe Schindler",
            "content": "Here is a new patch:\n\n\tThe additional information and resourceDescription is now used on any IOException while mapping.\n\tIf the cause is a OOM, the new Exception does not get a cause anymore, just \"Map failed\" and the additional infos\n\tIn all other cases, the original message is preserved and annotated with our information. The original cause is preserved (initCause on new Ex).\n\tthe stack trace of original Exception is preserved\n\n ",
            "date": "2014-05-16T12:19:40+0000"
        },
        {
            "id": "comment-13999769",
            "author": "Uwe Schindler",
            "content": "I will now do some tests on Linux with very limited ulimit -v. ",
            "date": "2014-05-16T12:20:34+0000"
        },
        {
            "id": "comment-13999776",
            "author": "Uwe Schindler",
            "content": "I tried the latest patch with Linux 32 bit and an ulimit -v 1_000_000:\n\n\n   [junit4] ERROR    132s | Test4GBStoredFields.test <<<\n   [junit4]    > Throwable #1: java.io.IOException: Map failed: MMapIndexInput(path=\"/media/sf_Host/Projects/lucene/trunk-lusolr1/lucene/build/core/test/J0/lucene.index.Test4GBStoredFields-C16129C282E2746E-001/4GBStoredFields-001/_0.fdt\") [this may be caused by lack of enough unfragmented virtual address space or too restrictive virtual memory limits enforced by the operating system, preventing us to map a chunk of 268435456 bytes. MMapDirectory should only be used on 64bit platforms, because the address space on 32bit operating systems is too small. More information: http://blog.thetaphi.de/2012/07/use-lucenes-mmapdirectory-on-64bit.html]\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([C16129C282E2746E:493516182C1E1996]:0)\n   [junit4]    > \tat sun.nio.ch.FileChannelImpl.map(FileChannelImpl.java:888)\n   [junit4]    > \tat org.apache.lucene.store.MMapDirectory.map(MMapDirectory.java:271)\n   [junit4]    > \tat org.apache.lucene.store.MMapDirectory$MMapIndexInput.<init>(MMapDirectory.java:221)\n   [junit4]    > \tat org.apache.lucene.store.MMapDirectory.openInput(MMapDirectory.java:196)\n   [junit4]    > \tat org.apache.lucene.store.Directory.copy(Directory.java:187)\n   [junit4]    > \tat org.apache.lucene.store.MockDirectoryWrapper.copy(MockDirectoryWrapper.java:947)\n   [junit4]    > \tat org.apache.lucene.store.TrackingDirectoryWrapper.copy(TrackingDirectoryWrapper.java:50)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.createCompoundFile(IndexWriter.java:4504)\n   [junit4]    > \tat org.apache.lucene.index.DocumentsWriterPerThread.sealFlushedSegment(DocumentsWriterPerThread.java:485)\n   [junit4]    > \tat org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:452)\n   [junit4]    > \tat org.apache.lucene.index.DocumentsWriter.doFlush(DocumentsWriter.java:518)\n   [junit4]    > \tat org.apache.lucene.index.DocumentsWriter.flushAllThreads(DocumentsWriter.java:629)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.doFlush(IndexWriter.java:3042)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.flush(IndexWriter.java:3018)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.forceMerge(IndexWriter.java:1671)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.forceMerge(IndexWriter.java:1647)\n   [junit4]    > \tat org.apache.lucene.index.Test4GBStoredFields.test(Test4GBStoredFields.java:83)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:744)\n\n ",
            "date": "2014-05-16T12:51:52+0000"
        },
        {
            "id": "comment-13999799",
            "author": "Robert Muir",
            "content": "+1 !\n\nthis is going to save a lot of headaches. ",
            "date": "2014-05-16T13:42:05+0000"
        },
        {
            "id": "comment-13999807",
            "author": "Uwe Schindler",
            "content": "Should I backport to 4.8.1? This does not brea logic, it just cleans up the exception, so no risk to break something. ",
            "date": "2014-05-16T13:54:59+0000"
        },
        {
            "id": "comment-13999819",
            "author": "Uwe Schindler",
            "content": "Oh the vote was already called. If we respin we can add this, but I will for now only do 4.9 and 5.0 ",
            "date": "2014-05-16T14:14:38+0000"
        },
        {
            "id": "comment-13999826",
            "author": "ASF subversion and git services",
            "content": "Commit 1595213 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1595213 ]\n\nLUCENE-5673: MMapDirectory: Work around a \"bug\" in the JDK that throws a confusing OutOfMemoryError wrapped inside IOException if the FileChannel  mapping failed because of lack of virtual address space. The IOException is rethrown with more useful information about the problem, omitting the incorrect OutOfMemoryError ",
            "date": "2014-05-16T14:24:48+0000"
        },
        {
            "id": "comment-13999830",
            "author": "ASF subversion and git services",
            "content": "Commit 1595214 from Uwe Schindler in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1595214 ]\n\nMerged revision(s) 1595213 from lucene/dev/trunk:\nLUCENE-5673: MMapDirectory: Work around a \"bug\" in the JDK that throws a confusing OutOfMemoryError wrapped inside IOException if the FileChannel  mapping failed because of lack of virtual address space. The IOException is rethrown with more useful information about the problem, omitting the incorrect OutOfMemoryError ",
            "date": "2014-05-16T14:26:35+0000"
        },
        {
            "id": "comment-13999833",
            "author": "Uwe Schindler",
            "content": "Reopen, if we backport on respin! ",
            "date": "2014-05-16T14:27:15+0000"
        }
    ]
}