{
    "id": "LUCENE-912",
    "title": "DisjunctionMaxScorer.skipTo has bug that keeps it from skipping",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "2.2"
        ],
        "affect_versions": "2.0.0,                                            2.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "as reported on the mailing list, DisjunctionMaxScorer.skipTo is broken if called before next in some situations...\n\nhttp://www.nabble.com/Potential-issue-with-DisjunctionMaxScorer-tf3846366.html#a10894987",
    "attachments": {
        "checkTwoCallsToScore.patch": "https://issues.apache.org/jira/secure/attachment/12359107/checkTwoCallsToScore.patch",
        "dismax_skipto.patch": "https://issues.apache.org/jira/secure/attachment/12359040/dismax_skipto.patch",
        "lucene-912.patch": "https://issues.apache.org/jira/secure/attachment/12359115/lucene-912.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-06-06T06:44:12+0000",
            "content": "patch with test and fix ... it would be helpful if someone who understands scorers better then i do could take a look at this and make sure there isn't some obvious cases that aren't accounted for in the (existing or new) tests that are still obviously broken ",
            "author": "Hoss Man",
            "id": "comment-12501821"
        },
        {
            "date": "2007-06-06T07:29:17+0000",
            "content": "I'm not sure, but the patch allows to increment all generators right after the first time, and that might cause it to make a mistake in the score computation for its first doc.\n\nIt might be worthwhile to make DisjunctionMaxScorer use the same specialized queue/heap as DisjunctionSumScorer.\nFactoring this out could lead to a common superclass that provides e.g. an array of Scorers that match the disjunction.\nAt the same time the score computations of the subscorers could be delayed until an actual score value is needed.\nThat is a rather drastic approach, but the specialized queue/heap of DisjunctionSumScorer might also help performance of DisjunctionMaxScorer ",
            "author": "Paul Elschot",
            "id": "comment-12501827"
        },
        {
            "date": "2007-06-06T18:08:56+0000",
            "content": "> I'm not sure, but the patch allows to increment all generators right after the first time, and that might cause it to make a mistake in the score computation for its first doc. \n\nIf all the sub-scorers are on the correct document after skipTo is called (which looks to be the case), then everything should be OK when DisjunctionMaxScorer.score() is called after that (dismax score calculation isn't incremental... it's all done during the call to score()).  Is there an issue I'm not thinking of?\n ",
            "author": "Yonik Seeley",
            "id": "comment-12502011"
        },
        {
            "date": "2007-06-06T19:09:15+0000",
            "content": "> dismax score calculation isn't incremental... it's all done during the call to score()). \n> Is there an issue I'm not thinking of? \n\nI was wondering why QueryUtils.checkSkipTo() did not expose that. But this is because that check skips doc by doc, always to docs found by the tested query. \n\nEnhancing that test reveals that for some scorers, two consecutive calls to score() return different scores (no next() or skipTo() calls in between).\nThis seems like a bug. ",
            "author": "Doron Cohen",
            "id": "comment-12502048"
        },
        {
            "date": "2007-06-06T19:18:58+0000",
            "content": "Yes, two calls to score() should yield the same score.\nWhat scorer was broken? ",
            "author": "Yonik Seeley",
            "id": "comment-12502054"
        },
        {
            "date": "2007-06-06T20:00:34+0000",
            "content": "Attached adds to QueryUtils.check(Query q1, Searcher s):\n\n\tscore() stability test (two calls to score() should return same score)\n\tfirst skipTo tests\n\n\n\nThe score() stability tests has failures for BooleanQueries and for DisjunctionMaxQuery.\n\nI didn't look into the failures cause yet. ",
            "author": "Doron Cohen",
            "id": "comment-12502067"
        },
        {
            "date": "2007-06-06T20:18:57+0000",
            "content": "Updating  checkTwoCallsToScore.patch  (unintended comment out in previous file). ",
            "author": "Doron Cohen",
            "id": "comment-12502078"
        },
        {
            "date": "2007-06-06T20:48:13+0000",
            "content": "In BooleanScorer2.score() the coordinator is initialized: coordinator.initDoc();\nThis results in Coordinator.nrMatchers = 0. \n\nNow look at the statements that change the value of nrMatchers in BooleanScorer.\nThere are three of those. E. g. in countingDisjunctionSumScorer:\n        if (this.doc() > lastScoredDoc) \n{\n          lastScoredDoc = this.doc();\n          coordinator.nrMatchers += super.nrMatchers;\n        }\n\nnrMatchers is only increased in case this.doc() is greater than lastScoredDoc.\nBut if score() is called twice, than those values are equal. So we have to\nfix the if statement to \n        if (this.doc() >= lastScoredDoc) {\n\nWith this patch and dismax_skipto.patch now all tests pass (including your\nnew ones, Doron). ",
            "author": "Michael Busch",
            "id": "comment-12502090"
        },
        {
            "date": "2007-06-06T21:19:28+0000",
            "content": "This would recompute, but correctly. \nIf this fix is just for sanity, ie main search methods really call score() just once, then I guess this is good enough.\nI was thinking more on not recomputing score if it was already computed (for current doc).\n(That would require to also maintain the last score returned.) ",
            "author": "Doron Cohen",
            "id": "comment-12502111"
        },
        {
            "date": "2007-06-06T21:31:54+0000",
            "content": "Yes I agree. Keeping the score in BooleanScorer until next() or skipTo() is \ncalled is a good optimization to avoid recomputation. I guess I was just \ncurios about the reasons why the tests failed.  ",
            "author": "Michael Busch",
            "id": "comment-12502120"
        },
        {
            "date": "2007-06-06T21:38:27+0000",
            "content": "Actually I changed my mind....  (and saw your reply just before clicking \"Add\" on this comment): \n  Taking back my last comment - with Michael's fix there are no extra cycles in the expected use of score().\n  If we try to avoid re-computation in case score() is called twice for same doc, there would be an additional if() for every call to score().\n\nI think I will take it from here to a new issue and handle these two separately. ",
            "author": "Doron Cohen",
            "id": "comment-12502121"
        },
        {
            "date": "2007-06-07T02:21:01+0000",
            "content": "Committed the original lucene-912.patch by Hoss. \nThanks Hoss and Sudaakeran B. ! ",
            "author": "Doron Cohen",
            "id": "comment-12502170"
        },
        {
            "date": "2007-06-08T07:10:21+0000",
            "content": "> > I'm not sure, but the patch allows to increment all generators right after the first time, and that might cause it to make a mistake in the score computation for its first doc.\n\nThis is from code inspection only, I have no test cases showing wrong behaviour:\nWhat I meant is that during DisjunctionMaxScorer.next() initially the subscorers have next() called on them, so they are at their first docs, and then during next() (with the return statement deleted) the \"generators are incremented again\" even when at firstTime. That means that the score() might be computed on the wrong subscorer docs after the first call to next().\n\nBut this issue is about DisjunctionMaxScorer.skipTo(), and removing the firstTime return statement there is correct I think.\n ",
            "author": "Paul Elschot",
            "id": "comment-12502704"
        },
        {
            "date": "2007-06-08T16:02:49+0000",
            "content": "I think you're right, and actually wondered about the same thing while verifying that fix: \"why return in next() but not in skipTo()?\" - I believe this is the right thing to do because at the initialization (ie in add(Scorer)) each added sub-scorer is advanced to its first match. So the first time that next() is called, sub-scorers are already \"on the right spot\", and not so for the first time skipTo() is called, because skipTo does not necessarily goes to the first match. ",
            "author": "Doron Cohen",
            "id": "comment-12502854"
        }
    ]
}