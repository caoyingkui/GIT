{
    "id": "LUCENE-3402",
    "title": "LuceneTestCase shouldn't go crazy if a test fails in an @AfterClass annotated method",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "An example can be seen here: http://sierranevada.servebeer.com/1314308641.log\n\nThe general problem is this: the assertions and cleanups in lucenetestcase's afterclass should be reordered, and have better error handling.\nIn this particular case these were the steps that happened:\n\n\tAutoCommitTest didn't close its searchers, so SolrTestCaseJ4 threw an assertion exception in its @AfterClass method.\n\tBecause the searcher wasn't closed, LuceneTestCase threw an assertion exception about unclosed directories/file handles in its afterClass. Even though the test had already \"failed\" it ran this assertion because testsFailed is false, since our TestWatchMan isnt aware of failures that happen in @AfterClass methods \n\tBecause it threw this exception, it never made it to the part where it resets the random, so the next test blew up in its BeforeClass.\n\n\n\nTo add insult to injury, all this happened but we didnt get a random seed printed, so we cant even hope to reproduce the situation.\n\nAfter discussion with hossman, we came up with some ideas on how to improve this, and I'm adding some i just thought of, too:\n\n\ttry to divide up these assertions and cleanups in LuceneTestCase: we could use multiple @AfterClass-annotated methods but then i'm not sure we can control the order, which is scary. But one safe thing to do is to put these pieces of code in little methods and afterclass can handle this stuff with try/finally.\n\tthink about exposing the testsFailed variable for subclasses that do assertions in their @AfterClasses. otherwise you might not get a random seed, which is bad.\n\tthink about upgrading junit, because I know from experimentation that the TestWatchMan (or whatever its replacement is) can \"see more\" of the test lifecycle and this would probably make a lot of this much cleaner.",
    "attachments": {
        "LUCENE-3402.patch": "https://issues.apache.org/jira/secure/attachment/12491735/LUCENE-3402.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-08-26T02:20:55+0000",
            "content": "This class is so horrendously out of control right now I'm gonna try to do some rote reorganization/refactoring before tackling this. ",
            "author": "Robert Muir",
            "id": "comment-13091521"
        },
        {
            "date": "2011-08-26T05:17:44+0000",
            "content": "patch makes sure you get some sort of seed in all situations, if we fail in afterclass we don't actually know which test method is responsible (maybe none!),\nbut it prints a \"reproduce with (Hopefully)\" in this case.\n\nfailing in LTC's tearDown() checks should now always give you a seed.\n\nHere's what it looks like now with the same simulated situation: TestA has a afterClass that opens a Directory, then calls fail()\nIn the Solr situation it should look better, since I hacked the Solr test classes to set testsFailed = true if their afterClass checks fail, this way we won't even bother trying to close the directory, but this is just to show it still works even without that, and TestB passes normally.\n\n\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.foo.TestA\n    [junit] Tests run: 1, Failures: 1, Errors: 1, Time elapsed: 0.135 sec\n    [junit] \n    [junit] ------------- Standard Error -----------------\n    [junit] NOTE: reproduce with (hopefully): ant test -Dtestcase=TestA -Dtests.seed=7360d49cf342a985:0:-184b15f6f34c023d\n    [junit] ------------- ---------------- ---------------\n    [junit] Testcase: org.apache.lucene.foo.TestA:\tFAILED\n    [junit] \n    [junit] junit.framework.AssertionFailedError: \n    [junit] \tat org.apache.lucene.foo.TestA.afterClass(TestA.java:12)\n    [junit] \n    [junit] \n    [junit] Testcase: org.apache.lucene.foo.TestA:\tCaused an ERROR\n    [junit] java.lang.AssertionError: directory of test was not closed, opened from: org.apache.lucene.foo.TestA.afterClass(TestA.java:11)\n    [junit] java.lang.RuntimeException: java.lang.AssertionError: directory of test was not closed, opened from: org.apache.lucene.foo.TestA.afterClass(TestA.java:11)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase.afterClassLuceneTestCaseJ4(LuceneTestCase.java:462)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase.checkResourcesAfterClass(LuceneTestCase.java:519)\n    [junit] \tat org.apache.lucene.util.LuceneTestCase.afterClassLuceneTestCaseJ4(LuceneTestCase.java:430)\n    [junit] \n    [junit] \n    [junit] TEST org.apache.lucene.foo.TestA FAILED\n    [junit] Testsuite: org.apache.lucene.foo.TestB\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.006 sec\n    [junit] \n    [junit] Tests FAILED\n\n ",
            "author": "Robert Muir",
            "id": "comment-13091592"
        },
        {
            "date": "2011-08-26T05:34:21+0000",
            "content": "didn't mean to delete the fieldcache sanity-checking commentary, also print the debugginginfo (JRE/OS) if we fail in afterclass. ",
            "author": "Robert Muir",
            "id": "comment-13091596"
        },
        {
            "date": "2011-08-26T15:07:14+0000",
            "content": "I'm gonna give this patch a try, if things go crazy i'll back it out. ",
            "author": "Robert Muir",
            "id": "comment-13091817"
        },
        {
            "date": "2011-08-26T15:14:02+0000",
            "content": "Go for it. ",
            "author": "Uwe Schindler",
            "id": "comment-13091819"
        }
    ]
}