{
    "id": "LUCENE-2346",
    "title": "Explore other in-memory postinglist formats for realtime search",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The current in-memory posting list format might not be optimal for searching. VInt decoding performance and the lack of skip lists would arguably be the biggest bottlenecks.\n\nFor LUCENE-2312 we should investigate other formats.\n\nSome ideas:\n\n\tPFOR or packed ints for posting slices?\n\tMaybe even int[] slices instead of byte slices? This would be great for search performance, but the additional memory overhead might not be acceptable.\n\tFor realtime search it's usually desirable to evaluate the most recent documents first.  So using backward pointers instead of forward pointers and having the postinglist pointer point to the most recent docID in a list is something to consider.\n\tSkipping: if we use fixed-length postings ([packed] ints) we can do binary search within a slice.  We can also locate a pointer then without scanning and thus skip entire slices quickly.  Is that sufficient or would we need more skipping layers, so that it's possible to skip directly to particular slices?\n\n\n\n\nIt would be awesome to find a format that doesn't slow down \"normal\" indexing, but is very efficient for in-memory searches.  If we can't find such a fits-all format, we should have a separate indexing chain for real-time indexing.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-07-21T21:42:46+0000",
            "content": "Are there any additional thoughts on this one? ",
            "author": "Jason Rutherglen",
            "id": "comment-12890915"
        }
    ]
}