{
    "id": "LUCENE-8544",
    "title": "In SpanNearQuery, add support for inOrder semantics equivalent to that of (Multi)PhraseQuery",
    "details": {
        "components": [
            "core/search"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "As discussed in LUCENE-8531, the semantics of phrase search differs among (Multi)PhraseQuery, SpanNearQuery (inOrder=true), and SpanNearQuery (inOrder=false):\n\n\t(Multi)PhraseQuery: incorporates the concept of order, and allows\u00a0negative offsets in calculating slop/edit distance\n\tSpanNearQuery (inOrder=true): incorporates the concept of order, and does not allow negative offsets in calculating slop/edit distance\n\tSpanNearQuery (inOrder=false): does not incorporate the concept of order at all\n\n\n\nThis issue concerns the possibility of adjusting SpanNearQuery to be configurable to support semantics equivalent to that of (Multi)PhraseQuery.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16662390",
            "author": "Michael Gibney",
            "content": "I can't immediately speak to the possibility of adding this functionality to the existing implementation of SpanNearQuery, but building on a\u00a0pending patch for LUCENE-7398, I think it\u00a0might actually be pretty straightforward.\n\nThe above-referenced patch makes NearSpansOrdered aware of indexed PositionLengthAttribute. In a positionLength-aware context, it wasn't clear to me how to port the NearSpansOrdered changes to NearSpansUnordered; there were a number of ways to interpret the task, all of which looked pretty complicated and/or messy and/or difficult-verging-on-impossible to implement in a performant way (and\u00a0at a higher level, they all seemed a bit semantically weird).\n\nBut positionLength-aware implementation of (Multi)PhraseQuery semantics in the context of the above-referenced patch\u00a0should be much simpler: given that you have a fixed clause ordering, it just requires supporting negative offsets in calculation of slop/edit distance. ",
            "date": "2018-10-24T14:55:45+0000"
        },
        {
            "id": "comment-16675130",
            "author": "Elizabeth Haubert",
            "content": "Is this a duplicate of LUCENE-8531? ",
            "date": "2018-11-05T13:18:47+0000"
        },
        {
            "id": "comment-16675132",
            "author": "Elizabeth Haubert",
            "content": "No, no it is not.  Looking at the comment at the end of 8531. ",
            "date": "2018-11-05T13:19:40+0000"
        }
    ]
}