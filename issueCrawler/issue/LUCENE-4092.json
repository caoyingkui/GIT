{
    "id": "LUCENE-4092",
    "title": "Check what's Jenkins pattern for e-mailing log fragments (so that it includes failures).",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "general/test"
        ],
        "type": "Task",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-30T20:16:25+0000",
            "content": "Editable Email Notification/Default Content configuration for the Lucene-Solr-tests-only-trunk job:\n\n\nBuild: ${BUILD_URL}\n\n${FAILED_TESTS}\n\nBuild Log (for compile errors):\n${BUILD_LOG_REGEX,regex=\"\\\\[javac\\\\]\\\\s+\\\\d+ error(s*)\\\\b\",linesBefore=100,linesAfter=0}\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13285981"
        },
        {
            "date": "2012-05-30T20:22:44+0000",
            "content": "Yeah, but what is ${FAILED_TESTS}? I mean \u2013 can we edit it to detect \"<<< FAILURES!\" and report 100 lines before this string? ",
            "author": "Dawid Weiss",
            "id": "comment-13285991"
        },
        {
            "date": "2012-05-30T20:47:04+0000",
            "content": "Yeah, but what is ${FAILED_TESTS}? I mean \u2013 can we edit it to detect \"<<< FAILURES!\" and report 100 lines before this string?\n\n\nJenkins's Content Token Reference\nAll arguments are optional. Arguments may be given for each token in the form name=\"value\" for strings and in the form name=value for booleans and numbers.  The {'s and }'s may be omitted if there are no arguments.\n\nExamples: $TOKEN, ${TOKEN}, ${TOKEN, count=100}, ${ENV, var=\"PATH\"}\n\nAvailable Tokens\n\n\n\t${DEFAULT_SUBJECT} - This is the default email subject that is configured in Jenkins's system configuration page.\n\t${DEFAULT_CONTENT} -  This is the default email content that is configured in Jenkins's system configuration page.\n\t${PROJECT_DEFAULT_SUBJECT} -  This is the default email subject for this project.  The result of using this token in the advanced configuration is what is in the Default Subject field above. WARNING: Do not use this token in the Default Subject or Content fields.  Doing this has an undefined result.\n\t${PROJECT_DEFAULT_CONTENT} -  This is the default email content for this project.  The result of using this token in the advanced configuration is what is in the Default Content field above. WARNING: Do not use this token in the Default Subject or Content fields.  Doing this has an undefined result.\n\t${BUILD_LOG, maxLines, escapeHtml} - Displays the end of the build log.\n\t\n\t\tmaxLines - display at most this many lines of the log.\nDefaults to 250.\n\t\tescapeHtml - If true, HTML is escaped.\nDefaults to false.\n\t\n\t\n\t${BUILD_LOG_REGEX, regex, linesBefore, linesAfter, maxMatches, showTruncatedLines, substText, escapeHtml, matchedLineHtmlStyle} - Displays lines from the build log that match the regular expression.\n\t\n\t\tregex - Lines that match this regular expression are included. See also java.util.regex.Pattern\nDefaults to \"(?i)\\b(error|exception|fatal|fail(ed|ure)|un(defined|resolved))\\b\".\n\t\tlinesBefore - The number of lines to include before the matching line. Lines that overlap with another match or linesAfter are only included once.\nDefaults to 0.\n\t\tlinesAfter - The number of lines to include after the matching line. Lines that overlap with another match or linesBefore are only included once.\nDefaults to 0.\n\t\tmaxMatches - The maximum number of matches to include. If 0, all matches will be included.\nDefaults to 0.\n\t\tshowTruncatedLines - If true, include ...truncated ### lines... lines.\nDefaults to true.\n\t\tsubstText - If non-null, insert this text into the email rather than the entire line.\nDefaults to null.\n\t\tescapeHtml - If true, escape HTML.\nDefaults to false.\n\t\tmatchedLineHtmlStyle - If non-null, output HTML. matched lines will become <b style=\"your-style-value\">html escaped matched line</b>.\nDefaults to null.\n\t\n\t\n\t${BUILD_LOG_EXCERPT, start, end} - Displays an excerpt from the build log.\n\t\n\t\tstart - Regular expression to match the excerpt starting line to be included (exluded). See java.util.regex.Pattern\n\t\tend - Regular expression to match the excerpt ending line to be included (exluded)\n\t\n\t\n\t${BUILD_NUMBER} - Displays the number of the current build.\n\t${BUILD_STATUS} - Displays the status of the current build. (failing, success, etc...)\n\t${BUILD_URL} - Displays the URL to the current build.\n\t${CHANGES, showPaths, showDependencies, format, pathFormat} - Displays the changes since the last build.\n\t\n\t\tshowDependencies - if true, changes to projects this build depends on are shown.\nDefaults to false.\n\t\tshowPaths - if true, the paths modified by a commit are shown.\nDefaults to false.\n\t\tformat - for each commit listed, a string containing %X, where %X is one of %a for author, %d for date, %m for message, %p for paths, or %r for revision.  Not all revision systems support %d and %r.  If specified, showPaths is ignored.\nDefaults to \"[%a] %m\\n\".\n\t\tpathFormat - a string containing %p to indicate how to print paths.\nDefaults to \"\\t%p\\n\".\n\t\n\t\n\t${CHANGES_SINCE_LAST_SUCCESS, reverse, format, showPaths, changesFormat, pathFormat} - Displays the changes since the last successful build.\n<ul>\n\t\n\t\treverse - indicates that most recent builds should be at the top.\nDefaults to false.\n\t\tformat - for each build listed, a string containing %X, where %X is one of %c for changes, or %n for build number.\nDefaults to \"Changes for Build #%n\\n%c\\n\".\n\t\tshowPaths, changesFormat, pathFormat - defined as showPaths, format, and pathFormat from ${CHANGES}, respectively.\n\t\n\t\n\t${CHANGES_SINCE_LAST_UNSTABLE, reverse, format, showPaths, changesFormat, pathFormat} - Displays the changes since the last unstable or successful build.\n\t\n\t\treverse - indicates that most recent builds should be at the top.\nDefaults to false.\n\t\tformat - for each build listed, a string containing %X, where %X is one of %c for changes, or %n for build number.\nDefaults to \"Changes for Build #%n\\n%c\\n\".\n\t\tshowPaths, changesFormat, pathFormat - defined as showPaths, format, and pathFormat from ${CHANGES}, respectively.\n\t\n\t\n\t${ENV, var} - Displays an environment variable.\n\t\n\t\tvar - the name of the environment variable to display.  If \"\", show all.\nDefaults to \"\".\n\t\n\t\n\t${FAILED_TESTS, showStack, maxTests} - Displays failing unit test information, if any tests have failed.\n\t\n\t\tshowStack - indicates that most recent builds should be at the top.\nDefaults to true.\n\t\tmaxTests - display at most this many failing tests.\nNo limit is set by default.\n\t\n\t\n\t${JENKINS_URL} - Displays the URL to the Jenkins server. (You can change this on the system configuration page.)\n\t${HUDSON_URL} - deprecated, please use $JENKINS_URL\n\t${PROJECT_NAME} - Displays the project's name.\n\t${PROJECT_URL} - Displays a URL to the project's page.\n\t${SVN_REVISION} - Displays the subversion revision number.\n\t${CAUSE} - Displays the cause of the build.\n\t${JELLY_SCRIPT, template} - Custom message content generated from a Jelly script template. There are two templates provided: \"html\" and \"text\". Custom Jelly templates should be placed in $JENKINS_HOME/email-templates. When using custom templates, the template filename without \".jelly\" should be used for the \"template\" argument.\n\t\n\t\ttemplate - the template name.\nDefaults to \"html\".\n\t\n\t\n\t${FILE, path} - Includes the content of a specified file.\n\t\n\t\tpath - The path to the file. Relative to the workspace root.\n\t\n\t\n\t${TEST_COUNTS, var} - Displays the number of tests.\n\t\n\t\tvar - Defaults to \"total\".\n\t\t\n\t\t\ttotal - the number of all tests.\n\t\t\tfail - the number of failed tests.\n\t\t\tskip - the number of skipped tests.\n\t\t\n\t\t\n\t\n\t\n\t${SCRIPT, script, template, init} - Custom message content generated from a script using JSR 223. Custom scripts should be placed in $JENKINS_HOME/email-templates. When using custom scripts, the script filename WITH .py/.rb/etc should be used for the \"script\" argument.\ntemplates and other items may be loaded using the host.readFile(String fileName) function\nthe function will look in the resources for the email-ext plugin first, and then in the $JENKINS_HOME/email-templates directory. No other directories will be searched.\n\t\n\t\tscript - the script name.\nDefaults to \"email-ext.groovy\".\n\t\ttemplate - the template filename.\nDefaults to \"groovy-html.template\"\n\t\tinit - true to run the language's init script.\nDefaults to true\n\t\tAvailable Script Engines\n\t\t\n\t\t\tECMAScript - 1.8 (js)\n\t\t\tGroovy - 1.8.5 (groovy)\n\t\t\n\t\t\n\t\n\t\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13286026"
        },
        {
            "date": "2012-05-30T20:59:16+0000",
            "content": "Ok, so BUILD_LOG_REGEX should do! I don't know Jenkins but any failed test (suite) will have the \"<<< FAILURES!\" marker attached \u2013 feel free to experiment  ",
            "author": "Dawid Weiss",
            "id": "comment-13286042"
        },
        {
            "date": "2012-05-30T21:13:42+0000",
            "content": "I'll switch it to the following - hopefully it will capture everything (any length multiline) between the suite header and \"<<< FAILURES!\"\n\n\nBuild: ${BUILD_URL}\n\n${FAILED_TESTS}\n\nBuild Log (for compile errors):\n${BUILD_LOG_REGEX,regex=\"(?s:\\\\[java4\\\\]\\\\s*Suite:.*?<<<\\\\s*FAILURES!)\"}\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13286064"
        },
        {
            "date": "2012-05-30T21:19:31+0000",
            "content": "regex=\"(?s:\\\\[java4\\\\]\\\\s*Suite:.*?<<<s*FAILURES!)\"\n\nHmm, that won't work - it'll grab everything from the first \"Suite:\" to \"<<< FAILURES!\", including any number of (non-failing) Suite mentions inbetween.\n\nI guess \"<<< FAILURES!\" and 100 previous lines will work, but I'd rather get the exact region.  I'll work on it. ",
            "author": "Steve Rowe",
            "id": "comment-13286075"
        },
        {
            "date": "2012-05-30T21:28:14+0000",
            "content": "This will be a killer regexp, I can feel it  ",
            "author": "Dawid Weiss",
            "id": "comment-13286078"
        },
        {
            "date": "2012-05-30T21:33:53+0000",
            "content": "Is there also a way we could improve the output of other checks (e.g. the javadocs warnings task, two javadocs checkers in javadocs-lint, and the rat-checker)\nso that if it causes a build failure its included as well, rather than just \"No tests ran\" or \"All tests passed\" or whatever it does today? ",
            "author": "Robert Muir",
            "id": "comment-13286086"
        },
        {
            "date": "2012-05-30T21:34:55+0000",
            "content": "By the way: I'm not suggesting to make the regex even more hairy, i'm just wondering if we can modify these tasks\nso that when they fail, they can include certain symbols/stuff to ensure they are included in the summary... ",
            "author": "Robert Muir",
            "id": "comment-13286088"
        },
        {
            "date": "2012-05-30T21:54:43+0000",
            "content": "This one seems to work (from Perl against a recent Jenkins log with a failure):\n\n\n[^\\r\\n]*\\[junit4\\]\\s*Suite:.*[\\r\\n]+[^\\r\\n]*\\[junit4\\]\\s*(?!Completed)(?!IGNOR)\\S(?s:.*?)<<<\\s*FAILURES!\n\n\n\nI'll change the Lucene-Solr-tests-only-trunk job configuration to use it (after escaping backslashes). ",
            "author": "Steve Rowe",
            "id": "comment-13286106"
        },
        {
            "date": "2012-05-30T22:04:30+0000",
            "content": "\nIs there also a way we could improve the output of other checks (e.g. the javadocs warnings task, two javadocs checkers in javadocs-lint, and the rat-checker)\nso that if it causes a build failure its included as well, rather than just \"No tests ran\" or \"All tests passed\" or whatever it does today?\n\nIt may be that alternates can be added to the BUILD_LOG_REGEX - I'll look at the output and see if any changes need to be made to enable that. ",
            "author": "Steve Rowe",
            "id": "comment-13286116"
        },
        {
            "date": "2012-05-31T17:00:26+0000",
            "content": "I plan on adding the following (as suggested by Robert) as alternations to the BUILD_LOG_REGEX for all non-Maven Jenkins jobs (some of these things don't run under the Maven jobs, and Maven's output is different enough that it'll require separate treatment):\n\nthe javadocs warnings task\n\n\n(?:[^\\r\\n]*\\[javadoc\\].*\\r?\\n)*[^\\r\\n]*\\[javadoc\\]\\s*[1-9]\\d*\\s+warnings.*\\r?\\n\n\n\n\ntwo javadocs checkers in javadocs-lint\n\nOutput from javadocs-lint seems to show up only when there's a problem, so any output from it will always be extracted by the following regex:\n\n\n[^\\r\\n]*javadocs-lint:.*\\r?\\n(?:[^\\r\\n]*\\[echo\\].*\\r?\\n)*\n\n\n\nand the rat-checker\n\n\n[^\\r\\n]*rat-sources:\\s+\\[echo\\].*(?:\\r?\\n[^\\r\\n]*\\[echo\\].*)*\\s*[1-9]\\d*\\s+Unknown\\s+Licenses.*\\r?\\n(?:[^\\r\\n]*\\[echo\\].*\\r?\\n)*\n\n\n\nAlong with two others:\n\n\n\tCompilation failures:\n\n(?:[^\\r\\n]*\\[javac\\].*\\r?\\n)*[^\\r\\n]*\\[javac\\]\\s*[1-9]\\d*\\s*error.*\\r?\\n\n\n\n\tJenkins FATAL errors:\n\n[^\\r\\n]*FATAL:(?s:.*)\n\n\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13286744"
        },
        {
            "date": "2012-05-31T17:18:51+0000",
            "content": "I plan on adding the following (as suggested by Robert) as alternations to the BUILD_LOG_REGEX for all non-Maven Jenkins jobs\n\nDone.  Here's the full Editable Email Notification/Default Content configuration:\n\n\nBuild: ${BUILD_URL}\n\n${FAILED_TESTS}\n\nBuild Log:\n${BUILD_LOG_REGEX,regex=\"(?x:\n# Compilation failures\n(?:[^\\\\r\\\\n]*\\\\[javac\\\\].*\\\\r?\\\\n)*[^\\\\r\\\\n]*\\\\[javac\\\\]\\\\s*[1-9]\\\\d*\\\\s*error.*\\\\r?\\\\n\n# Test failures\n|[^\\\\r\\\\n]*\\\\[junit4\\\\]\\\\s*Suite:.*[\\\\r\\\\n]+[^\\\\r\\\\n]*\\\\[junit4\\\\]\\\\s*(?!Completed)(?!IGNOR)\\\\S(?s:.*?)<<<\\\\s*FAILURES!\n# License problems\n|[^\\\\r\\\\n]*rat-sources:\\\\s+\\\\[echo\\\\].*(?:\\\\r?\\\\n[^\\\\r\\\\n]*\\\\[echo\\\\].*)*\\\\s*[1-9]\\\\d*\\\\s+Unknown\\\\s+Licenses.*\\\\r?\\\\n(?:[^\\\\r\\\\n]*\\\\[echo\\\\].*\\\\r?\\\\n)*\n# Javadocs warnings\n|(?:[^\\\\r\\\\n]*\\\\[javadoc\\\\].*\\\\r?\\\\n)*[^\\\\r\\\\n]*\\\\[javadoc\\\\]\\\\s*[1-9]\\\\d*\\\\s+warnings.*\\\\r?\\\\n\n# Other javadocs problems (broken links and missing javadocs)\n|[^\\\\r\\\\n]*javadocs-lint:.*\\\\r?\\\\n(?:[^\\\\r\\\\n]*\\\\[echo\\\\].*\\\\r?\\\\n)*\n# Jenkins problems\n|[^\\\\r\\\\n]*FATAL:(?s:.*)\n)\"}\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13286757"
        },
        {
            "date": "2012-05-31T17:44:18+0000",
            "content": "I'm going to add one more to the regex:\n\n\n# Third-party dependency license/notice problems\n|[^\\\\r\\\\n]*validate:.*\\\\r?\\\\n[^\\\\r\\\\n]*\\\\[echo\\\\].*\\\\r?\\\\n(?:[^\\\\r\\\\n]*\\\\[licenses\\\\].*\\\\r?\\\\n)*[^\\\\r\\\\n]*\\\\[licenses\\\\].*[1-9]\\\\d*\\\\s+error.*\\\\r?\\\\n\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13286771"
        },
        {
            "date": "2012-05-31T17:48:07+0000",
            "content": "I'm going to add one more to the regex\n\nDone - added to the configuration on all non-Maven Jenkins jobs ",
            "author": "Steve Rowe",
            "id": "comment-13286774"
        },
        {
            "date": "2012-05-31T18:15:30+0000",
            "content": "awesome! thank you! ",
            "author": "Robert Muir",
            "id": "comment-13286794"
        },
        {
            "date": "2012-05-31T20:09:28+0000",
            "content": "Thanks for working on this, Steve. It'll really be useful. ",
            "author": "Dawid Weiss",
            "id": "comment-13286887"
        },
        {
            "date": "2012-05-31T22:08:04+0000",
            "content": "Two problems:\n\n\n\tSpreading the BUILD_LOG_REGEX regex value over multiple lines is not supported by Jenkins's email templating functionality, which is provided by the Jenkins Email Extension Plugin (email-ext) https://wiki.jenkins-ci.org/display/JENKINS/Email-ext+plugin.  See the configuration token parsing regexes in ContentBuilder.Tokenizer, in particular the comment over the stringRegex field:\n\n// Sequence of (1) not \\ \" CR LF and (2) \\ followed by non line terminator\nprivate static final String stringRegex = \"\\\"([^\\\\\\\\\\\"\\\\r\\\\n]|(\\\\\\\\.))*\\\"\";\n\nThis could be fixed by allowing line terminators to be escaped:\n\n// Sequence of (1) not \\ \" CR LF and (2) \\ followed by any non-CR/LF character or (CR)LF\nprivate static final String stringRegex = \"\\\"([^\\\\\\\\\\\"\\\\r\\\\n]|(\\\\\\\\(?:.|\\r?\\n)))*\\\"\";\n\nI submitted a Jenkins JIRA issue for this: https://issues.jenkins-ci.org/browse/JENKINS-13976.\n\tBuildLogRegexContent, the content parser for BUILD_LOG_REGEX, matches line-by-line, so regexes targeting multiple lines will fail.  I can see two possible routes to address this:\n\t\n\t\tThe BUILD_LOG_EXCERPT token allows specification of begin/end line regexes, and includes everything inbetween matches.  I'm doubtful this will enable capture of the stuff we want, though.\n\t\tI'll try to add an argument to BUILD_LOG_REGEX to enable multi-line content matching, and make a pull request/JIRA issue to get it included in the next release of the plugin.\n\t\n\t\n\n\n\nIn the mean time, I'll switch the configuration in our Jenkins jobs to the following:\n\n\nBuild: ${BUILD_URL}\n\n${FAILED_TESTS}\n\nBuild Log:\n${BUILD_LOG_REGEX,regex=\"[ \\\\t]*(?:\\\\[javac\\\\]\\\\s+[1-9]\\\\d*\\\\s+error|\\\\[junit4\\\\].*<<<\\\\s+FAILURES!|\\\\[javadoc\\\\]\\\\s+[1-9]\\\\d*\\\\s+warning).*\",linesBefore=100}\n${BUILD_LOG_REGEX,regex=\"[ \\\\t]*\\\\[echo\\\\].*)*\\\\s*[1-9]\\\\d*\\\\s+Unknown\\\\s+Licenses.*\",linesBefore=17,linesAfter=20}\n${BUILD_LOG_REGEX,regex=\"[ \\\\t]*javadocs-lint:.*\",linesBefore=0,linesAfter=75}\n${BUILD_LOG_REGEX,regex=\".*FATAL:.*\",linesBefore=0,linesAfter=100}\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13286994"
        },
        {
            "date": "2012-05-31T23:03:36+0000",
            "content": "Steve you are a regexp God. ",
            "author": "Michael McCandless",
            "id": "comment-13287026"
        },
        {
            "date": "2012-06-01T02:02:23+0000",
            "content": "I'll switch the configuration in our Jenkins jobs to the following ... \n\nDone. ",
            "author": "Steve Rowe",
            "id": "comment-13287097"
        },
        {
            "date": "2012-06-01T19:50:21+0000",
            "content": "This one had syntax problems (a recent test failure notification email complained about it):\n\n\n${BUILD_LOG_REGEX,regex=\"[ \\\\t]*\\\\[echo\\\\].*)*\\\\s*[1-9]\\\\d*\\\\s+Unknown\\\\s+Licenses.*\",linesBefore=17,linesAfter=20}\n\n\n\nI switched it to the following on all non-Maven Jenkins job configuratinos:\n\n\n${BUILD_LOG_REGEX,regex=\"[ \\\\t]*\\\\[echo\\\\]\\\\s+[1-9]\\\\d*\\\\s+Unknown\\\\s+Licenses.*\",linesBefore=17,linesAfter=20}\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13287621"
        },
        {
            "date": "2012-06-01T19:54:36+0000",
            "content": "\nSpreading the BUILD_LOG_REGEX regex value over multiple lines is not supported by Jenkins's email templating functionality \n[...]\nThis could be fixed by allowing line terminators to be escaped:\n[...]\nI submitted a Jenkins JIRA issue for this: https://issues.jenkins-ci.org/browse/JENKINS-13976.\n\nI forked the email-ext project on github and made a pull request, which has now been incorporated into the upstream project. ",
            "author": "Steve Rowe",
            "id": "comment-13287627"
        },
        {
            "date": "2012-06-05T17:56:29+0000",
            "content": "\nBuildLogRegexContent, the content parser for BUILD_LOG_REGEX, matches line-by-line, so regexes targeting multiple lines will fail. [...] I'll try to add an argument to BUILD_LOG_REGEX to enable multi-line content matching, and make a pull request/JIRA issue to get it included in the next release of the plugin.\n\nI made a new content token named BUILD_LOG_MULTILINE_REGEX in my fork of the email-ext-plugin - see JENKINS-14000.  My pull request (#40) was merged into the upstream project a few days ago, so the next release will include this change.  (Looks like this plugin releases once a month or so, so the wait before we can use it shouldn't be too long, assuming the plugins on the ASF Jenkins instance are kept up-to-date.) ",
            "author": "Steve Rowe",
            "id": "comment-13289581"
        },
        {
            "date": "2012-06-07T12:47:38+0000",
            "content": "Assigning to you, Steven, since you do the heavy lifting here anyway. Thanks! ",
            "author": "Dawid Weiss",
            "id": "comment-13290974"
        },
        {
            "date": "2012-06-16T15:39:04+0000",
            "content": "v2.22 of the Jenkins Email-ext plugin was released today, incorporating the new BUILD_LOG_MULTILINE_REGEX content token functionality.  Olivier Lamy kindly upgraded the plugin in ASF Jenkins and restarted it.\n\nI'm going to re-try using the full-log multiline regex I posted in comment-13286757, with modification I've since added to Lucene jobs' configurations (using multiple BUILD_LOG_REGEX content tokens, one per context window a.k.a. linesBefore/linesAfter).  \n\nHopefully now we'll be able to get exactly the right snippet from the logs for each failure case. ",
            "author": "Steve Rowe",
            "id": "comment-13296168"
        },
        {
            "date": "2012-06-16T16:58:43+0000",
            "content": "Here is the Editable Email Notification/Default Content configuration I applied to all non-Maven ASF Jenkins jobs (modulo whitespace in front of the trailing line-continuation backslashes):\n\nedit: BUILD_LOG_REGEX -> BUILD_LOG_MULTILINE_REGEX\n\n\nBuild: ${BUILD_URL}\n\n${FAILED_TESTS}\n\nBuild Log:\n${BUILD_LOG_MULTILINE_REGEX,regex=\"(?x:                                                                                      \\\n# Compilation failures                                                                                             \\\n(?:.*\\\\[javac\\\\].*\\\\r?\\\\n)*.*\\\\[javac\\\\]\\\\s+[1-9]\\\\d*\\\\s+error.*\\\\r?\\\\n                                            \\\n# Test failures                                                                                                    \\\n|.*\\\\[junit4\\\\]\\\\s*Suite:.*[\\\\r\\\\n]+.*\\\\[junit4\\\\]\\\\s*(?!Completed)(?!IGNOR)\\\\S(?s:.*?)<<<\\\\s*FAILURES!            \\\n# Source file license problems                                                                                     \\\n|.*rat-sources:.*(?:\\\\r?\\\\n.*\\\\[echo\\\\].*)*\\\\s+[1-9]\\\\d*\\\\s+Unknown\\\\s+Licenses.*\\\\r?\\\\n(?:.*\\\\[echo\\\\].*\\\\r?\\\\n)* \\\n# Third-party dependency license problems - include 2 preceding lines and 1 following line                         \\\n|(?:.*\\\\r?\\\\n){2}.*\\\\[licenses\\\\]\\\\s+MISSING\\\\s+sha1(?:.*\\\\r?\\\\n){2}                                               \\\n# Javadoc warnings                                                                                                 \\\n|(?:.*\\\\[javadoc\\\\].*\\\\r?\\\\n)*.*\\\\[javadoc\\\\]\\\\s*[1-9]\\\\d*\\\\s+warnings.*\\\\r?\\\\n                                    \\\n# Other javadocs problems: broken links and missing javadocs                                                       \\\n|.*javadocs-lint:.*\\\\r?\\\\n(?:.*\\\\[echo\\\\].*\\\\r?\\\\n)*                                                               \\\n# Thread dumps - include 1 preceding line and the remainder of the log                                             \\\n|.*\\\\r?\\\\n.*Full thread dump(?s:.*)                                                                                \\\n# Jenkins problems - include the remainder of the log                                                              \\\n|.*(?:FATAL|ERROR):(?s:.*)                                                                                         \\\n# Include the Ant call stack - include the remainder of the log                                                    \\\n|.*BUILD\\\\s+FAILED(?s:.*)                                                                                          \\\n)\"}\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13296183"
        },
        {
            "date": "2012-06-16T17:14:54+0000",
            "content": "${BUILD_LOG_REGEX,regex=\"(?x: [...]\n\nAck!  I forgot to switch the previous version to use the new BUILD_LOG_MULTILINE_REGEX content token!\n\nFixed now... ",
            "author": "Steve Rowe",
            "id": "comment-13296185"
        },
        {
            "date": "2012-07-30T12:34:13+0000",
            "content": "A bug effectively prevented use of the new BUILD_LOG_MULTILINE_REGEX config: JENKINS-14132.  The fix on that issue has been incorporated in v2.24.1 of the Email-ext plugin, and Olivier Lamy has kindly installed this version on ASF Jenkins.  Uwe helped work out the kinks, and has been running the patched version for a while on his Jenkins instance - upgraded to the release version now.\n\nI will close as fixed later today once it's clear the ASF configuration is functional. ",
            "author": "Steve Rowe",
            "id": "comment-13424819"
        },
        {
            "date": "2012-07-30T12:41:21+0000",
            "content": "Here's the current configuration regex (edited so that the trailing backslashes are lined up):\n\n\nBuild Log:\n${BUILD_LOG_MULTILINE_REGEX,regex=\"(?x:                                                                         \\\n                                                                                                                \\\n(?:.*\\\\[javac\\\\]\\\\s++(?![1-9]\\\\d*\\\\s+error).*\\\\r?\\\\n)*+.*\\\\[javac\\\\]\\\\s+[1-9]\\\\d*\\\\s+error.*\\\\r?\\\\n             \\\n                                                                                                                \\\n|.*\\\\[(?:junit4:)?junit4\\\\]\\\\s+Suite:.*+\\\\s++.*\\\\[(?:junit4:)?junit4\\\\]\\\\s++(?!Completed)(?!IGNOR).*\\\\r?\\\\n     \\\n (?:.*\\\\[(?:junit4:)?junit4\\\\]\\\\s++(?!Completed\\\\s+.*<<<\\\\s*FAILURES!).*\\\\r?\\\\n)*+                              \\\n .*\\\\[(?:junit4:)?junit4\\\\]\\\\s++Completed\\\\s+.*<<<\\\\s*FAILURES!\\\\r?\\\\n                                          \\\n                                                                                                                \\\n|.*rat-sources:.*\\\\r?\\\\n                                                                                        \\\n (?:\\\\s*+\\\\[echo\\\\]\\\\s*\\\\r?\\\\n|\\\\s*+\\\\[echo\\\\]\\\\s++(?![1-9]\\\\d*\\\\s+Unknown\\\\s+License)\\\\S.*\\\\r?\\\\n)*+           \\\n \\\\s*+\\\\[echo\\\\]\\\\s+[1-9]\\\\d*\\\\s+Unknown\\\\s+License.*\\\\r?\\\\n                                                    \\\n (?:\\\\s*+\\\\[echo\\\\].*\\\\r?\\\\n)*+                                                                                 \\\n                                                                                                                \\\n|(?:.*\\\\r?\\\\n){2}.*\\\\[licenses\\\\]\\\\s+MISSING\\\\s+sha1(?:.*\\\\r?\\\\n){2}                                            \\\n                                                                                                                \\\n|.*check-licenses:.*\\\\r?\\\\n\\\\s*\\\\[echo\\\\].*\\\\r?\\\\n\\\\s*\\\\[licenses\\\\]\\\\s+MISSING\\\\s+LICENSE.*\\\\r?\\\\n             \\\n (?:\\\\s*+\\\\[licenses\\\\].*\\\\r?\\\\n)++                                                                             \\\n                                                                                                                \\\n|(?:.*\\\\[javadoc\\\\]\\\\s++(?![1-9]\\\\d*\\\\s+warning).+\\\\r?\\\\n)*+.*\\\\[javadoc\\\\]\\\\s+[1-9]\\\\d*\\\\s+warning.*\\\\r?\\\\n    \\\n                                                                                                                \\\n|.*javadocs-lint:.*\\\\r?\\\\n(?:.*\\\\[exec\\\\].*\\\\r?\\\\n)*+                                                           \\\n                                                                                                                \\\n|.*check-forbidden-apis:.*\\\\r?\\\\n                                                                               \\\n (?:\\\\s*+\\\\[forbidden-apis\\\\]\\\\s*\\\\r?\\\\n                                                                        \\\n  |\\\\s*+\\\\[forbidden-apis\\\\]\\\\s++(?!Scanned\\\\s+\\\\d+\\\\s+class\\\\s+file\\\\(s\\\\))\\\\S.*\\\\r?\\\\n)*+                     \\\n \\\\s*+\\\\[forbidden-apis\\\\]\\\\s++Scanned\\\\s+\\\\d+\\\\s+class\\\\s+file\\\\(s\\\\).*[1-9]\\\\d*\\\\s+error\\\\(s\\\\)\\\\.\\\\r?\\\\n     \\\n                                                                                                                \\\n|.*\\\\r?\\\\n.*Full\\\\s+thread\\\\s+dump(?s:.*+)                                                                      \\\n                                                                                                                \\\n|.*(?:FATAL|ERROR):(?s:.*+)                                                                                     \\\n                                                                                                                \\\n|.*BUILD\\\\s+FAILED(?s:.*+)                                                                                      \\\n)\"}\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13424823"
        },
        {
            "date": "2012-07-30T21:55:51+0000",
            "content": "ASF Jenkins build log excerpts in notification emails are looking good. ",
            "author": "Steve Rowe",
            "id": "comment-13425291"
        }
    ]
}