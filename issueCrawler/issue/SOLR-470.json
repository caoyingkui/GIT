{
    "id": "SOLR-470",
    "title": "DateField throws error on iso8601 date",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A correct iso 8601 date 2006-01-01T12:01:00Z throws an error.\nUnparseable date: \"2006-01-01T12:01:00Z\" at org.apache.solr.schema.DateField.toObject(DateField.java:173) at org.apache.solr.schema.DateField.toObject(DateField.java:83)\n\nThe ThreadLocalDateFormat requires fractional seconds \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\nto parse with simple date format. Where as the jdoc states their optional.",
    "attachments": {
        "SOLR-470.patch": "https://issues.apache.org/jira/secure/attachment/12380595/SOLR-470.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12565564",
            "date": "2008-02-04T22:06:55+0000",
            "content": "a quick glance at the code verifies this (to me anyway ... i haven't written a test case for it)\n\nI believe the problem only exists when dealing with DateMath relative to an absolute date ... when indexing or querying on a pure date value (ie: ending with a Z) the SimpleDateFormatter isn't used, so the milliseconds are still optional.\n\nThe ThreadLocalDateFormat helper was introduced in Solr 1.2, but this bug shouldn't affect 1.2 because it didn't support date math relative anything except \"NOW\"\n\nThe root of the problem is that when i added the ThreadLocalDateFormat before 1.2, i tried to make it clear in the javadocs it was only for formatting, not for parsing...\n\n\n  /**\n   * Returns a formatter that can be use by the current thread if needed to\n   * convert Date objects to the Internal representation.\n   */\n  protected DateFormat getThreadLocalDateFormat() {\n\n\n\n....but when i generalized the DateMath support i forgot to read my own javadoc and starte using it for parsing as well.\n\nThere's no simple way (that i know of) to make a SimpleDateFormatter support optional milliseconds.  So the most straight forward fix is probably to use a (Parsing) Formatter that stops reading before the milliseconds, and then add them manually \u2013 this means two seperate SimpleDateFormatters, (one for parsing and one for formatting) but that's \"OK\" since we never said the existing one was safe for parsing anyway. "
        },
        {
            "author": "patrick o'leary",
            "id": "comment-12565571",
            "date": "2008-02-04T22:32:20+0000",
            "content": "It's a little iffy but what if you just default the dateFields to have 0 milliseconds\nunless specified.\ne.g.\n\norg.apache.solr.util.DateMathParser\n\n\n public Date parseMath(String math) throws ParseException {\n\n    Calendar cal = Calendar.getInstance(zone, loc);\n    cal.setTime(getNow());\n    cal.add(Calendar.Calendar.MILLISECOND, 0);\n...................\n\n\n\nAnd if a millisecond field is added, it over writes the default ? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12565584",
            "date": "2008-02-04T22:46:33+0000",
            "content": "I'm notsure i understand your comment ... i don't see any reason why this bug would have anything to do with DateMathParser \u2013 which only deals with the \"math\" portion of an input string (ie: \"/HOUR\", \"+2YEARS\", \"+6MONTHS+3DAYS/DAY\" etc...) and evaluates them relative some concept of \"now\" \u2013 the problem seems to fall squarely on DateField.toObject which assumes it can call call getThreadLocalDateFormat().parse(...) even though that DateFormat is only intended for formatting.\n\nEven if we changed DateMathParser as you described i don't see how that would stop the parser from throwing the \"Invalid Date in Date Math String:...\" exception. "
        },
        {
            "author": "patrick o'leary",
            "id": "comment-12565637",
            "date": "2008-02-05T04:12:05+0000",
            "content": "parseMath returns a Date object that's formated to the SDF in the LocalThread that's fine /scratch last un-caffeinated comment.\n\nI think the root of the problem is any call to 'toInternal(String)' with a string that end's in 'Z' is indexed directly, which now means there can be multiple date formats represented internally in the index.\n\nBut in saying that, I'm guessing that a Field does not necessarily have to be indexed to call toObject.\n\nWhat would be nice is to switch from using SimpleDateFormat to org.apache.commons.lang.time.DateUtils\nWhich supports parseDate(String str, String[] parsePatterns) , where multiple patterns can be tried, and using\ninit to allow users supply their own patterns.\n\nAnd then using org.apache.commons.lang.time.FastDateFormat to represent the dates internally.\n\nBoth of these are thread safe, which should make a Flexible DateField a lot easier to implement without\nmuch over head. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12575506",
            "date": "2008-03-05T21:58:35+0000",
            "content": "note: in addition to DateField.toObject(String) (which is used when there is DateMath)  DateField.toObject(Fieldable) also has the same bug...\n\nhttp://www.nabble.com/Unparseable-date-td15854401.html "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12590875",
            "date": "2008-04-21T09:33:26+0000",
            "content": "A simple patch which can parse a date that ends with 'Z'\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12591001",
            "date": "2008-04-21T19:12:05+0000",
            "content": "Paul: there are a few things that concern me about your patch...\n\n\n\tit isn't back compatible (changes the sig of getThreadLocalDateFormat)\n\tit doesn't address the root problem.  The issue isn't Z or no Z, it's millis or no millis (SimpleDateFormat.parse will happily ignore extra stuff at end of string if it's not in the format, so specifying the Z isn't needed) ... what is needed is a parser that doesn't require the millis \u2013 which you have, but drawing the distinction between Z and not Z isn't correct.\n\tit doesn't really work: toObject is always called on the indexed form which never has a Z at the end, so your new DateFormat isn't used ... and you'll still get an error if a date without millis is in the index.\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12591002",
            "date": "2008-04-21T19:13:57+0000",
            "content": "alternate patch that addresses the problem in the way i described back in my first comment ... along with some test cases.\n\nThe parsing isn't pretty, but it's fairly straightforward (and doesn't add any dependencies on third party libraries) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12592654",
            "date": "2008-04-27T16:29:58+0000",
            "content": "hoss:  The approach is fine and if we need to refine it it can be taken up later. The fix is important to be checked in as we have made the binary format the default for distributed search.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12592702",
            "date": "2008-04-27T23:41:45+0000",
            "content": "I agree that it needs to be fixed, but i want to make sure it gets fixed correctly \u2013 i would prefer we come up with a patch that also addresses SOLR-552 before committing half cocked. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12596581",
            "date": "2008-05-14T00:37:14+0000",
            "content": "checkpoint ... better test cases that take into account SOLR-552 as well.\n\nThis still isn't completed because it doesn't deal with formating correctly (see failing test cases) ... attaching in case i get hit by a bus before i have time to work on it again.\n\nin this approach, i'm attempting to make the parsing \"forgiving\" of trailing zeros in the millis, but strict about ensuring that the indexed form is always the canonical per the docs.\n\nAs a result, i introduced a LegacyDateField for people who relied on the old broken behavior that anything ending with a Z was \"ok\"\n\nReminder to self: if applying patch to commit, do an \"svn copy DateField.java LegacyDateField.java; rm LegacyDateField.java\" before applying patch. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12596982",
            "date": "2008-05-15T00:33:23+0000",
            "content": "builds on the previous patch to include fixes for the formatting issues, code clean up, better tests (LegacyDateFieldTest is now standalone, and can be droped into Solr1.2 to regress against the old DateField), and better documentation ... addresses  SOLR-552 and SOLR-544 as well.\n\n\nI think this is ready to commit, but i'd like to see some positive feedback before proceeding \u2013 both on the implementation, and the documentation changes. (something approximating the class docs for LegacyDateField should show up in CHANGES.txt's  upgrading section as well). "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12597006",
            "date": "2008-05-15T05:11:20+0000",
            "content": "The patch did not apply properly on trunk. SVN cound not fetc the given version of LegacyDateField\n\nThe implementation looks fine "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12597627",
            "date": "2008-05-16T21:41:18+0000",
            "content": "Grr... apparently \"svn diff\" does really foolish things in conjunction with \"svn copy\"\n\nThis new patch should apply much cleaner (although there will probably still be a stray javadoc hunk because of $Id$ interpolation) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12598110",
            "date": "2008-05-19T22:01:26+0000",
            "content": "Committed revision 658003.\n\nvariation on last patch that included some javadoc formating, spelling, and grammar fixes "
        }
    ]
}