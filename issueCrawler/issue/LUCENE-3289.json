{
    "id": "LUCENE-3289",
    "title": "FST should allow controlling how hard builder tries to share suffixes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.4",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Today we have a boolean option to the FST builder telling it whether\nit should share suffixes.\n\nIf you turn this off, building is much faster, uses much less RAM, and\nthe resulting FST is a prefix trie.  But, the FST is larger than it\nneeds to be.  When it's on, the builder maintains a node hash holding\nevery node seen so far in the FST \u2013 this uses up RAM and slows things\ndown.\n\nOn a dataset that Elmer (see java-user thread \"Autocompletion on large\nindex\" on Jul 6 2011) provided (thank you!), which is 1.32 M titles\navg 67.3 chars per title, building with suffix sharing on took 22.5\nseconds, required 1.25 GB heap, and produced 91.6 MB FST.  With suffix\nsharing off, it was 8.2 seconds, 450 MB heap and 129 MB FST.\n\nI think we should allow this boolean to be shade-of-gray instead:\nusually, how well suffixes can share is a function of how far they are\nfrom the end of the string, so, by adding a tunable N to only share\nwhen suffix length < N, we can let caller make reasonable tradeoffs.",
    "attachments": {
        "LUCENE-3289.patch": "https://issues.apache.org/jira/secure/attachment/12485566/LUCENE-3289.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-07T10:48:24+0000",
            "content": "Initial rough patch showing the idea. ",
            "author": "Michael McCandless",
            "id": "comment-13061193"
        },
        {
            "date": "2011-07-07T10:51:04+0000",
            "content": "NOTE: patch applies to 3.x.\n\nI ran the patch on the titles, varying the max prefix sharing length:\n\n\n\n\nLen\nFST Size\nSeconds\n\n\n1\n135446807\n8.2\n\n\n2\n137632702\n8.5\n\n\n3\n135177994\n8.3\n\n\n4\n132782016\n8.3\n\n\n5\n130415331\n8.4\n\n\n6\n128086200\n8.0\n\n\n7\n125797396\n8.2\n\n\n8\n123552157\n8.5\n\n\n9\n121358375\n8.4\n\n\n10\n119228942\n8.1\n\n\n11\n117181180\n8.8\n\n\n12\n115229788\n8.7\n\n\n13\n113388260\n9.5\n\n\n14\n111664442\n9.0\n\n\n15\n110059167\n9.2\n\n\n16\n108572519\n9.7\n\n\n17\n107201905\n9.8\n\n\n18\n105942576\n10.3\n\n\n19\n104791497\n10.1\n\n\n20\n103745678\n11.1\n\n\n21\n102801693\n10.8\n\n\n22\n101957797\n11.4\n\n\n23\n101206564\n11.1\n\n\n24\n100541849\n11.0\n\n\n25\n99956443\n11.1\n\n\n26\n99443232\n12.9\n\n\n27\n98995194\n13.2\n\n\n28\n98604680\n13.9\n\n\n29\n98264184\n13.5\n\n\n30\n97969241\n13.6\n\n\n31\n97714049\n13.8\n\n\n32\n97494104\n14.3\n\n\n33\n97304045\n14.0\n\n\n34\n97140033\n14.3\n\n\n35\n96998942\n14.6\n\n\n36\n96877590\n16.5\n\n\n37\n96773039\n16.9\n\n\n38\n96682961\n16.6\n\n\n39\n96605160\n17.8\n\n\n40\n96537687\n18.3\n\n\n41\n96479286\n17.8\n\n\n42\n96428710\n17.5\n\n\n43\n96384659\n18.9\n\n\n44\n96346174\n17.0\n\n\n45\n96312826\n19.3\n\n\n46\n96283545\n17.8\n\n\n47\n96257708\n19.4\n\n\n48\n96235159\n19.0\n\n\n49\n96215220\n18.7\n\n\n50\n96197450\n19.6\n\n\n51\n96181539\n17.3\n\n\n52\n96167235\n16.9\n\n\n53\n96154490\n17.7\n\n\n54\n96143081\n18.8\n\n\n55\n96132905\n17.4\n\n\n56\n96123776\n17.5\n\n\n57\n96115462\n20.7\n\n\n58\n96108051\n19.2\n\n\n59\n96101249\n19.1\n\n\n60\n96095107\n18.7\n\n\nALL\n96020343\n22.5\n\n\n\n\n\nVery very odd that FST size first goes up at N=2... not yet sure why.  But from this curve it looks like there is a sweet spot around maybe N=24.  I didn't measure required heap here, but it also will go down as N goes down. ",
            "author": "Michael McCandless",
            "id": "comment-13061195"
        },
        {
            "date": "2011-07-07T17:10:59+0000",
            "content": "Patch, I think it's ready to commit!\n\nSeparately we should think about how suggest module should set these... I left it at \"costly but perfect minimization\". ",
            "author": "Michael McCandless",
            "id": "comment-13061444"
        },
        {
            "date": "2011-07-07T17:32:02+0000",
            "content": "I think thats probably good for most cases?\n\nIn the example you gave, it seems that FST might not be the best algorithm? The strings are extremely long (more like short documents) and probably need to be \"compressed\" in some different datastructure, e.g. a word-based one? ",
            "author": "Robert Muir",
            "id": "comment-13061453"
        },
        {
            "date": "2011-07-07T17:40:47+0000",
            "content": "Yeah I think \"costly but perfect minimization\" is the right default. ",
            "author": "Michael McCandless",
            "id": "comment-13061456"
        },
        {
            "date": "2011-07-07T19:21:33+0000",
            "content": "Exactly. This is a very specific use case (long suggestions). ",
            "author": "Dawid Weiss",
            "id": "comment-13061512"
        },
        {
            "date": "2011-07-08T07:02:35+0000",
            "content": "The strings are extremely long (more like short documents) and probably need to be \"compressed\" in some different datastructure, e.g. a word-based one?\n\nThat would be indeed cool, e.g. FST with words (ngrams?) as symbols. Ages ago we used one trie, for all unique terms to get prefix/edit distance on words and one word-trie (symbols were words via symbol table) for \"documents\". I am sure this would cut memory requirements significantly for multiword cases when compared to char level FST.\ne.g. TermDictionary that supports ord() could be used as a symbol table.\n\n\n\n ",
            "author": "Eks Dev",
            "id": "comment-13061804"
        }
    ]
}