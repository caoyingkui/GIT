{
    "id": "LUCENE-8204",
    "title": "ReqOptSumScorer should leverage sub scorers' per-block max scores",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "master (8.0)"
        ]
    },
    "description": "Currently it only looks at max scores on the entire segment. Given that per-block max scores usually give lower upper bounds of the score, this should help.\n\nThis is especially important for LUCENE-8197 to work well since the main query would typically be added as a MUST clauses of a boolean query while the query that scores on features would be a SHOULD clause.",
    "attachments": {
        "LUCENE-8204.patch": "https://issues.apache.org/jira/secure/attachment/12933048/LUCENE-8204.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16555729",
            "date": "2018-07-25T14:08:17+0000",
            "content": "Here is a patch that implements the block skipping logic. I had to modify the RandomApproximationQuery in the tests to make it compatible with advanceShallow. I also ran some benchmarks on\u00a0wikimediumall, I used the HighLow, HighMed and HighHigh queries from the original benchmark and made the second clause optional to test this scorer:\n\n  TaskQPS lucene_baseline      StdDevQPS lucene_candidate      StdDev                Pct diff\n    HighMed       37.51      (0.0%)       38.05      (0.0%)    1.4% (   1% -    1%)\n    HighHigh      11.02      (0.0%)       16.47      (0.0%)   49.5% (  49% -   49%)\n    HighLow      103.91      (0.0%)      219.08      (0.0%)  110.8% ( 110% -  110%)\n\n ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16556445",
            "date": "2018-07-26T00:25:14+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n -1 \n  test4tests  \n   0m  0s \n  The patch doesn't appear to include any new or modified tests. Please justify why no new tests are needed for this patch. Also please list what manual steps were performed to verify this patch.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 51s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 20s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 20s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 17s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 14s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 14s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  37m  6s \n  core in the patch passed.  \n\n\n +1 \n  unit  \n   4m 46s \n  test-framework in the patch passed.  \n\n\n  \n   \n  48m 28s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8204 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12933048/LUCENE-8204.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 6ab3ff8 \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 20 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/53/testReport/ \n\n\n modules \n C: lucene/core lucene/test-framework U: lucene \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/53/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA"
        },
        {
            "id": "comment-16558269",
            "date": "2018-07-26T12:48:40+0000",
            "content": "The benchmark numbers look great! Some comments on the patch:\n\n\t\u00a0Could we somehow merge optIsRequiredBlock and optIsRequiredSegment to have fewer variables to take care of? For instance could we somehow set upTo=NO_MORE_DOCS so that optIsRequiredBlock=true's effect lasts til the end of the segment instead of optIsRequiredSegment?\n\tadvanceTarget does target = reqApproximation.advance(upTo + 1) and then moveToNextBlock(target). Should we just do target = upTo+1 to avoid reading postings? There might not be any matches in the next block and calling advance() forces the postings reader to decompress the block, while I would expect advanceTarget() to only advance the target based on impacts?\n\tadvanceShallow should check that optScorer.docID() is less than or equal to target before calling advanceShallow on it?\n\n ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16558370",
            "date": "2018-07-26T14:35:55+0000",
            "content": "\nCould we somehow merge optIsRequiredBlock and optIsRequiredSegment to have fewer variables to take care of? For instance could we somehow set upTo=NO_MORE_DOCS so that optIsRequiredBlock=true's effect lasts til the end of the segment instead of optIsRequiredSegment?\n\nI've done that in my first attempt but the benchmark showed no improvement for the HighHigh case. The current patch can skip blocks even when the disjunction is required on the entire segment so setting upTo to NO_MORE_DOCS would disable this optim. \n\n\nadvanceTarget does target = reqApproximation.advance(upTo + 1) and then moveToNextBlock(target). Should we just do target = upTo+1 to avoid reading postings? There might not be any matches in the next block and calling advance() forces the postings reader to decompress the block, while I would expect advanceTarget() to only advance the target based on impacts?\n\nI didn't know what to do here so I choose to use advance but I agree that advanceTarget should only use impacts. I tested this change and it improves the benchmark by a nice margin (nice call  ):\n\n    TaskQPS lucene_baseline      StdDevQPS lucene_candidate      StdDev                Pct diff\n        HighMed       48.81      (0.0%)       52.29      (0.0%)    7.1% (   7% -    7%)\n        HighHigh       14.47      (0.0%)      23.82      (0.0%)   64.6% (  64% -   64%)\n        HighLow      132.44      (0.0%)      312.50      (0.0%)  135.9% ( 135% -  135%)\n\n\nI'll modify the patch with this change.\n\n\nadvanceShallow should check that optScorer.docID() is less than or equal to target before calling advanceShallow on it?\n\nI didn't touch this part but I agree that it looks buggy. I'll add some tests to stress the case where this scorer is shallow advanced (inside an inner clause). ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16561657",
            "date": "2018-07-30T09:01:11+0000",
            "content": "Here is a new patch that changes the heuristic for the advance shallow to prefer blocks where the optional clause does not match. \nI also simplified and replaced the two booleans with a check to test if the max score of the required clause is greater than the min score at the segment level. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16561774",
            "date": "2018-07-30T11:04:50+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 27s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 23s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 23s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 21s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 18s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 18s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  13m 58s \n  core in the patch passed.  \n\n\n +1 \n  unit  \n   1m 43s \n  test-framework in the patch passed.  \n\n\n  \n   \n  18m 23s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8204 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12933563/LUCENE-8204.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / e264d03 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/56/testReport/ \n\n\n modules \n C: lucene/core lucene/test-framework U: lucene \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/56/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA"
        },
        {
            "id": "comment-16564306",
            "date": "2018-07-31T20:03:36+0000",
            "content": "+1 on the approach, thanks for the explanation about why we need to care about requiring the opt clause on the whole block. It would be nice to only wrap the approximation when scoreMode == TOP_SCORES?\n\nTests could use CheckHits#checkTopScores which does a bit more testing than just checking whether top hits are ok. It'd also be nice to have one explicit test for the case that the scorer keeps advancing block by block all the time, and another one for the case that it considers the whole segment to decide that the opt clause is required. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16571237",
            "date": "2018-08-07T08:02:06+0000",
            "content": "Thanks for looking Adrien ! I pushed a new patch that adds more tests and uses the block max heuristic only with TOP_SCORES mode. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16571575",
            "date": "2018-08-07T12:31:04+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 27s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 24s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 24s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 23s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 19s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 19s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  10m 54s \n  core in the patch passed.  \n\n\n +1 \n  unit  \n   1m 56s \n  test-framework in the patch passed.  \n\n\n  \n   \n  15m 28s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8204 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12934611/LUCENE-8204.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 208d59b \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/63/testReport/ \n\n\n modules \n C: lucene/core lucene/test-framework U: lucene \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/63/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA"
        },
        {
            "id": "comment-16571947",
            "date": "2018-08-07T16:40:09+0000",
            "content": "Thanks Jim! It looks great in general, I'm just a bit worried about the way that advanceInternal and nextCommonDoc call each other, which looks like it could cause stack overflows in some cases? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16572880",
            "date": "2018-08-08T08:31:50+0000",
            "content": "\n\n\u00a0I'm just a bit worried about the way that advanceInternal and nextCommonDoc call each other, which looks like it could cause stack overflows in some cases?\n\n\n\u00a0\n\nI agree this is problematic. I pushed a new patch that removes the recursive calls and uses a simple loop. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16572971",
            "date": "2018-08-08T10:01:30+0000",
            "content": "+1 in general, some minor comments below:\n\n\n        @Override\n        public int advance(int target) throws IOException {\n          return advanceInternal(reqApproximation.advance(target));\n        }\n\n\n\nShould we call advanceImpacts on target before calling reqApproximation.advance() on it? This would save decoding postings if target is in a block that doesn't contain competitive matches? Same for nextDoc()?\n\n\n          // Potentially move to a conjunction\n          if (reqMaxScoreBlock < minScore) {\n            optIsRequired = true;\n          } else {\n            optIsRequired = false;\n          }\n\n\n\nLet's just do optIsRequired = reqMaxScoreBlock < minScore? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16573030",
            "date": "2018-08-08T11:09:18+0000",
            "content": "Thanks Adrien, I pushed a new patch that addresses your comments. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16573112",
            "date": "2018-08-08T12:07:15+0000",
            "content": "+1 ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16573150",
            "date": "2018-08-08T12:33:33+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 23s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   0m 24s \n  the patch passed  \n\n\n +1 \n  javac  \n   0m 24s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 22s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 19s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 19s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  11m 18s \n  core in the patch passed.  \n\n\n +1 \n  unit  \n   1m 45s \n  test-framework in the patch passed.  \n\n\n  \n   \n  15m 19s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-8204 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12934795/LUCENE-8204.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-130-generic #156~14.04.1-Ubuntu SMP Thu Jun 14 13:51:47 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 9306922 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/67/testReport/ \n\n\n modules \n C: lucene/core lucene/test-framework U: lucene \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/67/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA"
        },
        {
            "id": "comment-16573249",
            "date": "2018-08-08T13:50:17+0000",
            "content": "Commit 49e3cca77f868dd8dcf766a528ab23c686a6edfc in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=49e3cca ]\n\nLUCENE-8204: Boolean queries with a mix of required and optional clauses are now faster if the total hit count is not required ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16573251",
            "date": "2018-08-08T13:50:40+0000",
            "content": "Thanks Adrien ! ",
            "author": "Jim Ferenczi"
        }
    ]
}