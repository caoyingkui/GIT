{
    "id": "LUCENE-7523",
    "title": "UpgradeIndexMergePolicy: beyond one-off use, monster segment avoidance",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Task"
    },
    "description": "(Was looking at UpgradeIndexMergePolicy as part of SOLR-9648 and came up with these possibilities here, what do people think?)\n\nCurrently one probably would not configure use of the UpgradeIndexMergePolicy (UIMP) permanently since findForcedMerges becomes a no-op after all segments have been upgraded.\n\n\tHow about adding an optional fallbackToInnerAfterUpgrade flag? That way UIMP.findForcedMerges could fallback to its inner/delegate merge policy's findForcedMerges call after all segments have been upgraded.\n\n\n\nCurrently UIMP.findForcedMerges identifies all the segments to be upgraded and then asks its inner/delegate merge policy to come up with a MergeSpecification for those segments. If the inner/delegate merge policy does not supply a merge for all the segments to be upgraded then UIMP merges the remaining segments into one new segment. That extra new segment could be quite a large 'monster' segment.\n\n\tHow about adding an optional upgradeUnmergedSegmentsIndividually flag? That way UIMP.findForcedMerges could upgrade (but not merge) the remaining segments.\n\tOr indeed should 'upgradeUnmergedSegmentsIndividually' be the default behaviour?\n\n\n\nNoticed whilst looking at the code:\n\n\tUIMP.findMerges does not pass the mergeTrigger to the inner/delegate merge policy.\n\t\n\t\tIf we can figure out why that is, let's add a comment to say why that is.\n\t\tUnderstanding why that is would also be needed before proceeding with beyond one-off use of UIMP.",
    "attachments": {
        "LUCENE-7523-outline.patch": "https://issues.apache.org/jira/secure/attachment/12835318/LUCENE-7523-outline.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15608299",
            "author": "Christine Poerschke",
            "date": "2016-10-26T12:25:03+0000",
            "content": "Attaching outline/incomplete patch to show in code what i described narratively. "
        },
        {
            "id": "comment-15615379",
            "author": "Michael McCandless",
            "date": "2016-10-28T13:18:27+0000",
            "content": "UIMP was really designed for one-off usage via the IndexUpgrader tool, but I agree it's interesting to maybe have it become instead a merge policy that passes through ordinary merging as well?\n\nIt's a somewhat complex problem, though: if the merge policy is presented with an index that has N old segments and M new ones, and it's in need of merging, how does it pick?  Is it only forceMerge that would explicitly target only old segments first?  Would there be just an added bias to favor old ones, like how TieredMergePolicy biases to segments that have more deletions.\n\nMaybe we just fold this behavior into TMP and remove UIMP?\n\nThat extra new segment could be quite a large 'monster' segment.\n\nMaybe we could have a maxMergedSegmentMB, like TieredMergePolicy?  Then UIMP could only send segments whose total size is less than that to the wrapped merge policy, maybe?\n\nUIMP.findMerges does not pass the mergeTrigger to the inner/delegate merge policy.\n\nThat seems like a bug to me. "
        }
    ]
}