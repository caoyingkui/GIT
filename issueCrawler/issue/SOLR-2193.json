{
    "id": "SOLR-2193",
    "title": "Re-architect Update Handler",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "The update handler needs an overhaul.\n\nA few goals I think we might want to look at:\n\n1. Cleanup - drop DirectUpdateHandler(2) line - move to something like UpdateHandler, DefaultUpdateHandler\n2. Expose the SolrIndexWriter in the api or add the proper abstractions to get done what we now do with special casing:\nif (directupdatehandler2)\n  success\n else\n  failish\n3. Stop closing the IndexWriter and start using commit (still lazy IW init though).\n4. Drop iwAccess, iwCommit locks and sync mostly at the Lucene level.\n5. Keep NRT support in mind.\n6. Keep microsharding in mind (maintain logical index as multiple physical indexes)\n7. Address the current issues we face because multiple original/'reloaded' cores can have a different IndexWriter on the same index.",
    "attachments": {
        "SOLR-2193.patch": "https://issues.apache.org/jira/secure/attachment/12475485/SOLR-2193.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-12924427",
            "date": "2010-10-25T02:09:15+0000",
            "content": "I've been playing with a patch the keeps the IndexWriter open always (shares them across core reloads) and drops our internal update locks - so far, all tests pass, but there are still issues to deal with.\n\nI'll post the patch once I work a few more things out. Won't cover everything - just a start to explore different ideas. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13015269",
            "date": "2011-04-04T04:13:01+0000",
            "content": "I've updated my patch to trunk.\n\nYou can find the most recent work here: https://github.com/markrmiller/Lucene-Solr-Lab/commit/051995d50160e7081854febd471e72b9e81b8a3f\n\nI'll upload a patch after I start lazy creating the IndexWriter.\n\nThis can be a fairly large win on time to visibility - you don't wait for background merges to finish before opening a new IndexReader now.\n\nIt's also a start at solving our rather nasty reload a core, briefly different writers on the same index problem (usually avoided because the overlap is brief and the IndexWriter created lazily).\n\nIt's still early work. Issues remain. "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13015440",
            "date": "2011-04-04T14:44:41+0000",
            "content": "I've updated my patch to trunk.\n\nhmm maybe I miss something but I don't see a patch on this issue.\n\nYou can find the most recent work here: https://github.com/markrmiller/Lucene-Solr-Lab/commit/051995d50160e7081854febd471e72b9e81b8a3f\nthis seems to be good stuff why don't you create a branch for it?\n\nsimon "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13015441",
            "date": "2011-04-04T14:46:45+0000",
            "content": "I'll upload a patch after I start lazy creating the IndexWriter. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13015940",
            "date": "2011-04-05T14:51:19+0000",
            "content": "here is my first patch "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13016862",
            "date": "2011-04-07T15:05:28+0000",
            "content": "I've started experimenting with some simple Lucene near-realtime support, which lets you avoid the commit on reopen as well. Even if everything in Solr is not ready to fit in with near-realtime, we might as well start pushing down the path.\n\nWe can work out the names and strategy, but for the moment I have added a 'softCommit' boolean to the commit cmd - if you commit with this set to true, the SolrCore will repen the indexreader using the indexwriter from the updatehandler. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13016874",
            "date": "2011-04-07T15:22:10+0000",
            "content": "NRT finally... sweet!\n\nI wonder how this should work with autocommit?\nSomeone may want a soft/reopen autocommit once every x seconds, but still may want a hard \"flush to stable storage in case I crash\" commit at some other duration.\n\nThe other thing that might be cool is a client-specified freshness per request.  For example, when they pass in a query, they specify that they need data that's no more than 1 second old... and if it's too old that will trigger a reopen (and block that specific request until the new searcher can be used).  The benefit here is that big bulk uploads won't be interrupted if there is no time sensitive query traffic.  The downside is that a high latency may be exposed to those requests if they depend on stuff that can take a lot of time the first time (like faceting).\n "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13016875",
            "date": "2011-04-07T15:24:52+0000",
            "content": "Fabulous!!  Elimination of the IW.close() on Solr's commit, and using Lucene's NRT!! "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13017461",
            "date": "2011-04-08T13:55:26+0000",
            "content": " I wonder how this should work with autocommit?\nSomeone may want a soft/reopen autocommit once every x seconds, but still may want a hard \"flush to stable storage in case I crash\" commit at some other duration. \n\nRight - I agree. How about another simple start? Simply add another commitTracker that does soft commits - then you can schedule a mix of soft and hard commits.\n\n\nThe other thing that might be cool is a client-specified freshness per request. For example, when they pass in a query, they specify that they need data that's no more than 1 second old... and if it's too old that will trigger a reopen (and block that specific request until the new searcher can be used). The benefit here is that big bulk uploads won't be interrupted if there is no time sensitive query traffic. The downside is that a high latency may be exposed to those requests if they depend on stuff that can take a lot of time the first time (like faceting).\n\nYeah - I remember you mentioning this before - I def think this would be cool - perhaps as a follow on issue - though hopefully the affect on bulk updates will be minimized when Lucene takes care of the 'flush blocks the world' issue. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13017468",
            "date": "2011-04-08T14:17:19+0000",
            "content": "new patch\n\n\n\tsome refactoring - pull committracker and indexwriterprovider out of directupdatehandler2 - move creatIndexWriter from updatehandler to indexwriterprovider\n\n\n\n\n\tnaively add another committracker for soft commits - solrconfig is the same except that instead of autocommit its autosoftcommit\n\n\n\nI prefer gits branching and merging for keeping patches up to date with trunk, so code also available here initially:\nhttps://github.com/markrmiller/Lucene-Solr-Lab/commits/SOLR-2193 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13017880",
            "date": "2011-04-09T14:38:22+0000",
            "content": "New Patch:\n\n\tmore polish, comments, refactoring\n\ti've tried to take/keep IndexWriter type out of UpdateHandler API\n\treenables an autocommit test that was disabled long ago\n\tcouple of minor bug fixes to previous work\n\tremove the unused waitFlush cmd\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13017909",
            "date": "2011-04-09T16:59:35+0000",
            "content": "So one issue to consider:\n\nIf we start sharing the IndexWriter across SolrCores like this, on SolrCore reload, if you have changed IndexWriter settings, they will not take affect.\n\nMy thinking here is that that is not really a big deal.\n\nI'm thinking perhaps we might do the following:\n1. On reload, print a log warning that if IndexWriter settings have changed, they have not been picked up?\n2. Add another param to the update/commit cmd that lets you force the opening of a new IndexWriter with the latest settings. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13017912",
            "date": "2011-04-09T17:00:48+0000",
            "content": "If we really wanted, we could also apply the 'live' setting changes on the fly rather than opening a new IndexWriter if we wanted to detect that case. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13018105",
            "date": "2011-04-10T16:27:15+0000",
            "content": "Also need to consider how we should work in IndexReaderWarmer. Have not thought about it in depth yet, but it could optionally reuse the warming queries? Or have a separate conf section? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13018111",
            "date": "2011-04-10T16:58:59+0000",
            "content": "it could optionally reuse the warming queries?\n\nOff the top of my head, I don't see a reason to differentiate between hard/soft commits wrt warming in general. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13018113",
            "date": "2011-04-10T17:24:08+0000",
            "content": "Hmm...yeah - doesn't seem like we could get away with only warming the one segment in Solr... "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-13019953",
            "date": "2011-04-14T18:08:10+0000",
            "content": "Some of this was already solved in:\nhttps://issues.apache.org/jira/browse/SOLR-1155\n\n(locking and re-opening index writer were fixed) "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-13019961",
            "date": "2011-04-14T18:17:20+0000",
            "content": "Since SOLR-1155 is probably an easier change for Solr 3.1 due to its ancestry, so to get the same benefits I'll work to update it for that version, assuming this patch of yours is for 4.x onwards.   "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13019983",
            "date": "2011-04-14T18:52:44+0000",
            "content": "Yes - my plan for this was 4.x. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13034818",
            "date": "2011-05-17T15:33:39+0000",
            "content": "I've got some fixes for this, and I've started on some tests and other minor steps forward. I'll put it up before too long. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13034908",
            "date": "2011-05-17T17:34:48+0000",
            "content": "Here is a new patch - couple tests, couple fixes, etc, etc. Still has no commitWithin type support for soft commits.\n\nTested and made auto soft commit code work.\n\nI spent some time today firing documents rapidly at Solr with a soft commit max time of 1 second. Fantastic results at about 100 wikipedia documents per second. Didn't change any other example settings this time. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13034918",
            "date": "2011-05-17T17:59:54+0000",
            "content": "Next I need to look at the thread safety of CommitTracker under the new locking system. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13035051",
            "date": "2011-05-17T21:04:34+0000",
            "content": "If we go with this separate softAutoCommit as an option, still need to think about overlapping hard/soft commits.\n\nEg you might want to do a soft commit every 4 seconds and a hardcommit every 16 seconds, but on the 16th second you don't necessarily want to do both types of commit (though not likely that big a deal). I've got logic to avoid this in the commit by doc case, but nothing for the time based auto commit.\n\nCommitWithin support is also still an interesting additional option - as well as Yonik's adea about specifying a staleness hint at query time. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13035075",
            "date": "2011-05-17T21:35:06+0000",
            "content": "Crazy idea: drop the notion of commits all together (or make it an expert thing for the hard core).  Default it to 1 second.  I wonder how all of this plays with warming/caching, etc.  Do you even need those things in this type of setup? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13035086",
            "date": "2011-05-17T21:48:07+0000",
            "content": "Crazy idea: drop the notion of commits all together (or make it an expert thing for the hard core). Default it to 1 second.\n\nThat should just be a matter of configuration after this patch... set a default of commitWithin=1000 in the (an) update request handler.\n\nI think that commitWithin should mean soft commit.  Users of commitWithin care about when the changes become visible, not when they are guaranteed to be fsync'd. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13035112",
            "date": "2011-05-17T22:53:10+0000",
            "content": "I think that commitWithin should mean soft commit. Users of commitWithin care about when the changes become visible, not when they are guaranteed to be fsync'd.\n\nwhile i don't know that we can assume that's the expectation of all existing commitWithin users, i think it probably is safe to assume that the users who do expect commitWithin to refer to fsync can be expected to pay attention enough if we add a new \"hardCommitWithin=35\" option and start using that if it's what they want.\n\nAlternately: add commitWithin.style=(hard|soft) where the default is \"soft\" and let people specify it as a default on their update request handlers if the behavior they really want is \"hard\"\n\nOr simplify things even further: eliminate \"softCommit\" as an explicit type of action and add a new \"commit.type=(hard|soft)\" param exists \u2013 \"commit.type\" would affect both explicitly requested commits, and commitWithin.\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041235",
            "date": "2011-05-30T19:03:11+0000",
            "content": "There are a few things I'd like to do first, but I think we should likely commit this sooner rather than later, then we can iterate on trunk. I don't think I'll get to the few things I want to before buzzwords (and then I'm taking a week and a half semi vaca after that), but I plan to push for commit after that if I've hit anything I consider a blocker. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041261",
            "date": "2011-05-30T19:57:09+0000",
            "content": "Reporting the current state regarding original goals:\n\n1. Cleanup - drop DirectUpdateHandler(2) line - move to something like UpdateHandler, DefaultUpdateHandler\n\nI want to do this, but it's just easier to handle after the first commit.\n\n 2. Expose the SolrIndexWriter in the api or add the proper abstractions to get done what we now do with special casing:\nif (directupdatehandler2)\nsuccess\nelse\nfailish \n\nThere is no need for this anymore.\n\n3. Stop closing the IndexWriter and start using commit (still lazy IW init though).\n\nThis is done.\n\n4. Drop iwAccess, iwCommit locks and sync mostly at the Lucene level.\n\nThis is done.\n\n5. Keep NRT support in mind.\n\nAlways  This patch certainly won't complete the NRT work needed, but it's a large start, and a huge step forward for Solr. Much of what is left to do is in this area though.\n\n6. Keep microsharding in mind (maintain logical index as multiple physical indexes)\n\nHave not really addressed anything here - don't think I hurt anything either though. Worth considering the new IndexWriterProvider and how it might relate to this though.\n\n7. Address the current issues we face because multiple original/'reloaded' cores can have a different IndexWriter on the same index.\n\nI've made an attempt at this with the IndexWriterProvider and some simple ref counting that could use a once over. This changes how you should reload a Solrcore - rather than just opening a new one and closing the old one, you want to call a method on the SolrCore itself and get the new SolrCore.\n\nMore to come. I've updated the patch to trunk as well - will attach shortly. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041265",
            "date": "2011-05-30T20:07:36+0000",
            "content": "I think the Solr ref counting code should go/exit, it's prone to pile up.\nInstead as with Twitter's system, a new reader is opened per query,\nbecause the readers are lightweight enough. I think that's a better path\nto pursue than monkey wrenching Solr's existing system which from the\nground up, is not designed for NRT. If this patch isn't implementing NRT,\nwhat is the point? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041268",
            "date": "2011-05-30T20:14:55+0000",
            "content": "Hi Jason - long time no see \n\nI think the Solr ref counting code should go/exit, it's prone to pile up.\n\nCan you elaborate? I'm def open to other approaches. I'm not yet sure why you are concerned about pile up? Whenever a new SolrCore is opening, the previous ref will be closing. Have you tried the patch and seen a problem here?\n\nInstead as with Twitter's system, a new reader is opened per query,\nbecause the readers are lightweight enough.\n\nHmmm...opening a new IndexReader is not usually lightweight at all right now...which is why we use reopen.\n\nIf this patch isn't implementing NRT, what is the point?\n\nCan you elaborate on why you don't think it's implementing NRT? I've tested basic indexing/searching using wikipedia documents at about 50-100 documents a second, opening a new reader every second. That felt pretty near-real-time to me, but the phrase is subjective. There are remaining issues - Solr does not currently do everything at a per segment level as you know - but per segment use cases will be very fast, and non per segment use cases will be much more NRT too.\n\nYou are questioning my whole patch  Which I am happy about - but I'm wondering if you have actually reviewed it - if not, I wish you would! "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041275",
            "date": "2011-05-30T20:25:55+0000",
            "content": "Also - if it helps clarify:\n\nThis issue simply starts taking advantage of Lucene's NRT work. Much of that is being improved as some of the cool ideas from the Twitter work are being made more generally applicable and integrated into trunk Lucene. This issue does not address NRT at that low level - for that see the Lucene JIRA issues on this topic. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041276",
            "date": "2011-05-30T20:25:56+0000",
            "content": "This patch certainly won't complete the NRT work needed\n\nMark, I was reading this comment.  \n\nYou are questioning my whole patch\n\nI think it'll be easier to add what's needed for this patch into Lucene rather than retrofit Solr.  I mentioned this a while back however there was pushback on re-architecting Solr.  Making everything per-segment would be much more productive than allowing NRT at this stage.  Ah, I think you're simply trying to avoid the stop the world Solr has right now?  If so that should be more prevalent in the Jira.  \n\nIndexWriter writer = ((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\nUgly Solr style code?!\n\nThe commit in X time can be simple contrib class for Lucene.  It doesn't need to be Solr specific.  \n\nAnyways I tried to do this 2 years ago for NRT, there was pushback just get the IndexWriter like the above code from the update handler.  <political>Wow</political> "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041277",
            "date": "2011-05-30T20:29:29+0000",
            "content": "I think it'll be easier to add what's needed for this patch into Lucene rather than retrofit Solr.\n\nThis makes no sense  See my above comment.\n\nUgly Solr style code?!\n\nThis is simply to detect the case where the update handler was changed on reload - not something we even necessarily have to support - but a case I did consider. If you can suggest better code to handle such a case, please do.\n\nThe commit in X time can be simple contrib class for Lucene. It doesn't need to be Solr specific.\n\nMoving the location of the auto commit code would be a very different issue. Not one that makes sense to me right now either.\n\nAnyways I tried to do this 2 years ago for NRT, there was pushback just get the IndexWriter like the above code from the update handler. <political>Wow</political>\n\nI remember that issue - I tried to make some comments to help you out with it - you never managed to get it very far if memory serves though - so now I'm taking my own crack at it, along with addressing a few other pet peeves I have. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041307",
            "date": "2011-05-30T21:56:32+0000",
            "content": "P.S. While it may not be believed, there are no politics behind this issue  I did not intentionally side step any other issues - nor did Lucid even initiate that I work on this.\n\nI wanted to fix the update handler - I didn't want to let any history or pre conceived notions get in my way. Was I successful at that? I don't know. But I approached this as blank slate as I could - if I could change the update handler, what would I do? I didn't look at what anyone else had done. So far, this is it.\n\nThe community can take my effort or reject it, just like any others out there. The motivation of this issue, as far as I am concerned, is my own self interest in doing some interesting coding, and my good will towards Lucene/Solr. Any other motivations where so minor they don't even register.\n\nTake it or leave it - I'm not looking to cram this down anyones throat. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041390",
            "date": "2011-05-31T02:39:41+0000",
            "content": "Here is a to trunk patch - I'll try and get to something that should be fairly committable before to long as I said - to a large degree that just means a thorough review myself, as well as working with any additional feedback.  "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041399",
            "date": "2011-05-31T03:53:04+0000",
            "content": "IndexWriter writer =((DirectUpdateHandler2)core.getUpdateHandler()).getIndexWriterProvider().getIndexWriter();\n\nWhy isn't IW a part of SolrCore? It's the main class running the show. How\ncan there be a Solr core without an IW? I think IW never gets closed until\nthe SolrCore is closed. The next move would be to place all of the caches\nat the segment level. \n\nIt's been clear for quite a while that you folks at \"Lucid\" are trying to\nprotect your golden goose, eg, Solr from changing much unless dictated by\nyour staff or a paying customer. I think in politics those are called\nbribes? Hence a large part of the recent fracas regarding modularizing the\ngoose, whose 'resolution' has resulted in no changes.\n\nIt's astonishing the changes that are OK for Solr by some people, that are\nno OK from others. This is not a meritocracy. If you insist on driving,\nyou should incorporate some of the feedback given. Solr was hacked\ntogether from the beginning and this is yet another ugly retrofit that is\nbeing steamrolled in. If you're confident in your abilities you're\nconfident enough to make major changes. I've never seen that on the Solr\nside of the Lucene project.\n\nI remember that issue - I tried to make some comments to help you out with it \n\nNo there was push back on something silly and simple, eg, getting the IW\nfrom the UpdateHandler, just as you have done here. What is the point in\ncontributing when they are blocked for no reason?\n\nSOLR-1155\n\nWhat happened to this poor guys patch?  Nothing. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041408",
            "date": "2011-05-31T04:34:08+0000",
            "content": "Heh. Golden Goose. There are geese on the farm I grew up next too. They never needed much protected - they ran in a pack and charged around fearless.\n\nIf I had a Golden Goose (and I'm still looking if you know anyone), I'd choose to protect it with like a knife or a gun rather than code \n\nThis is a meritocracy. Those with merit impart it on the deserving. There are a wide variety of those with merit from a diverse set of companies. So others that deserve merit can be sure to get a fair shake over time. Those without merit...well...they will be what they be. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041414",
            "date": "2011-05-31T04:43:24+0000",
            "content": "Mark, \n\nThat's an odd non-technical answer, and in the meritocracy of comedy, not funny either. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041420",
            "date": "2011-05-31T04:58:06+0000",
            "content": "Plus this is a holiday  Do I really have to take unfounded lucid crap even in my free time?\n\nWell, I'm game. I've pulled out my bottle of wine, and I'm ready to answer your questions:\n\n\nWhy isn't IW a part of SolrCore?...\n\nI leave this as an exercise for the reader.\n\nI think in politics those are called bribes? \n\nI want it always to be known - that I will in fact take bribes. In fact, I'd like to take my first one any time anyone is willing to pay me. As this is a legally gray area, you will have to understand that I cannot place any guarantees on my work. Also, I'm currently only accepting bitcoin.\n\nIf you insist on driving, you should incorporate some of the feedback given.\n\nI don't need to drive. I love it when others drives. Some people are such good drivers! Trust me - I was never one to jump to drive. I can be fairly absent minded. My friends often preferred to drive. But by golly, there where some people even I wouldn't drive with...sometimes cause I was never needing to go anywhere when they where driving, and other times cause they where scary drivers!\n\nIf you're confident in your abilities you're confident enough to make major changes. I've never seen that on the Solr side of the Lucene project.\n\nI'm sorry! I will try harder! My abilities are not insane. But I think they are good. I've never been great with self rating, but I think I'm a solid above average. I'm even better at 4v4 Warcraft3, all archer strategy. If not for Korea, that is how I'd make my money. It would be way easier to accumulate bitcoin that way.\n\nSolr was hacked together from the beginning and this is yet another ugly retrofit that is being steamrolled in.\n\nSteamrolled? You hurt me...I only just above I don't won't to steam roll this issue that I am working in my free time of my own volition? My you are a fun guy  \n\n\n\nNo there was push back on something silly and simple, eg, getting the IW\nfrom the UpdateHandler, just as you have done here. What is the point in\ncontributing when they are blocked for no reason?\n\nJason, that is in test code  My approach is plenty different from what you are up to \n\nWhat happened to this poor guys patch? Nothing.\n\nI had never seen this guys patch. It's not my job to jump on anyones patch if I did. Since I have started my rearchitect issue, I have seen a couple issues out there that do a small piece of what I am up to. I have looked at a couple, and they did not work how I wanted. You can try it a different way. Honestly, if you write some code that I like, I will commit it for you. But I will only commit what I'm comfortable with. Lucky for you there are a bunch of us. Many not from Lucid. All you gotto do is convince one of them to take on your issue or tackle your code.\n\nPersonally, I make my contributions lately out of my own time and will. If it bothers you so much, I'll be happy to hold off - those that voted for this issue can wait for someone else to fix this at the \"lucene level like twitter\". "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041422",
            "date": "2011-05-31T05:07:05+0000",
            "content": "Mark I think you're missing the point.  If you're \"committer\" then it's implied you review patches and interact with the community, nicely.  That's not happening with in this issue, or in Solr as noted by in fact many people.   "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041427",
            "date": "2011-05-31T05:12:59+0000",
            "content": "Hey man - I can only do what I can do. Let god sort it out. I'm ready to be judged. I didn't do it all perfect. I didn't make all the right choices. But overall I'd say I was way more good than bad. I may have been a little sociopathic during that one short stint in my teens, but other than that, its worked out well I think. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041428",
            "date": "2011-05-31T05:16:33+0000",
            "content": "-1 on the patch, I just reviewed again.  IndexWriter should be a part of SolrCore (IW is canonical), as we should not be opening and closing IWs in the life of a Solr core. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13041431",
            "date": "2011-05-31T05:19:43+0000",
            "content": "Guys, this has gotten beyond ridiculous.  Lets stick to the goal of helping Mark complete this work.  If there's concerns about issues being ignored or whatever, lets address that elsewhere without the accusations and sarcasm.\n\n\nWhy isn't IW a part of SolrCore?...\n\nI leave this as an exercise for the reader.\n\nI don't know if this is immediately obvious from the code (and consequently doesn't need explaining), but it seems on the surface to be a reasonable question to ask.  Are you able to say why this isn't a preferable direction to take?  The answer might prove useful to others too. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041432",
            "date": "2011-05-31T05:25:30+0000",
            "content": "-1 on the patch, I just reviewed again. IndexWriter should be a part of SolrCore (IW is canonical), as we should not be opening and closing IWs in the life of a Solr core.\n\nOkay, -1 accepted. You win, good fight. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041433",
            "date": "2011-05-31T05:32:26+0000",
            "content": "Okay, -1 accepted. You win, good fight\n\nMark this was no fight, this is the open source Apache way. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041434",
            "date": "2011-05-31T05:35:10+0000",
            "content": "I meant in the figurative sparring sense, not negative fight sense. Honestly Jason, you made my night  I enjoyed our dialogue honestly. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041464",
            "date": "2011-05-31T07:11:12+0000",
            "content": "I enjoyed our dialogue honestly\n\nI'd prefer to simply get things done rather than banter with no results. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13041547",
            "date": "2011-05-31T12:17:26+0000",
            "content": "Heh - you approached me the wrong way then. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13041550",
            "date": "2011-05-31T12:30:53+0000",
            "content": "clear javadocs warnings from the patch. "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13041554",
            "date": "2011-05-31T12:39:27+0000",
            "content": "Jason, your action on this issue is not appropriate and with my PMC Hat on I can't tolerate this! I want remind you to move back to an appropriate tone and help out rather than randomly -1. I don't see any political issues here neither is the -1 appropriate. You have done lots of realtime work and mark seems to be pretty open to comments too so get back to technical discussion. If you have any general issues feel free to raise them on dev@l.a.o\n\nsimon "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13041688",
            "date": "2011-05-31T17:22:06+0000",
            "content": "Reading over the comments here and without knowing the details, it looks like a big improvement over what we currently have.\n\nJason \u2013 is your concern that this is a fundamentally wrong direction, or that it does not go far enough to support NRT?  Can this patch be improved?  Can it be committed, then improved?\n\n\n\n\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041691",
            "date": "2011-05-31T17:23:22+0000",
            "content": "As previously suggested, we need a new issue that refactors IndexWriter into SolrCore, instead of placing it into an UpdateHandler.  Then we can iterate on re/factoring the NRT functionality. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041693",
            "date": "2011-05-31T17:25:32+0000",
            "content": "this is a fundamentally wrong direction\n\nYes.  The idea of adding NRT is good though. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-13041711",
            "date": "2011-05-31T17:57:24+0000",
            "content": "I haven't looked that closely a this patch yet, but it already fixes a long standing problem in Solr, that a long running merge blocks a Solr commit, because it switches to IW.commit instead of closing/opening the writer.\n\nThis seems like a great step forward?\n\nSure, we should pursue moving IW to SolrCore, cutting over to IW's NRT's APIs, making all caching per-segment, etc., but these should not block committing this improvement; they can be pursued as followon/parallel issues: progress not perfection. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041715",
            "date": "2011-05-31T18:03:08+0000",
            "content": "I haven't looked that closely a this patch yet, but it already fixes a long standing problem in Solr, that a long running merge blocks a Solr commit, because it switches to IW.commit instead of closing/opening the writer.\n\nYes, that is/was not clear in the issue.  Thank you for spelling it out.  However I think the patch is creating new abstract classes, that would then go away?  Why not spend a little more time trying to do a more overall design for future refactoring? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13041749",
            "date": "2011-05-31T18:57:13+0000",
            "content": " However I think the patch is creating new abstract classes, that would then go away? \n\nJust one interface right, IndexWriterProvider? \n\nMark seems to describe the reasoning behind this pretty well:\n\n\n    7. Address the current issues we face because multiple original/'reloaded' cores can have a different IndexWriter on the same index.\n\nI've made an attempt at this with the IndexWriterProvider and some simple ref counting that could use a once over. This changes how you should reload a Solrcore - rather than just opening a new one and closing the old one, you want to call a method on the SolrCore itself and get the new SolrCore.\n\nand in the original goals\n\n\nsolving our rather nasty reload a core, briefly different writers on the same index problem (usually avoided because the overlap is brief and the IndexWriter created lazily).\n\nI'm at best a Solr dummy, but it seems to me to be a good tradeoff. We could toss @lucene.internal or @lucene.experimental on this so its clear that things are still in flux? "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041767",
            "date": "2011-05-31T19:18:07+0000",
            "content": "solving our rather nasty reload a core, briefly different writers on the same index problem (usually avoided because the overlap is brief and the IndexWriter created lazily).\n\nRobert I fully agree, however then the title of the Jira is incorrect. \n\nAlso the whole ref counted thing in Solr:\n\n\nRefCounted<SolrIndexSearcher> holder = core.getNewestSearcher(false);\nSolrIndexSearcher s = holder.get();\nholder.decref();\n// since there could be two commits in a row, don't test for a specific new searcher\n// just test that the old one has been replaced.\n\n\n\nShould not be needed anymore.  We're also adding ref counting on IWs now as well?  All of this is unnecessary.  If we're modularizing, this isn't right path to go one. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13041771",
            "date": "2011-05-31T19:24:17+0000",
            "content": "we need a new issue that refactors IndexWriter into SolrCore, instead of placing it into an UpdateHandler\n\nCan't that be done as an iteration/improvement?  Nothing here blocks that possible change \u2013 and this patch sorts out a bunch of stuff that needs to be taken care of anyway.\n\nRecent dev on /trunk has been fast and iterative (very exciting!) \u2013 this patch seems like a good way to get the ball rolling and move forward.  \n\nLets mark anything as @lucene.internal that has viable alternatives and start smaller patches to move that along.  I apologize that this stuff is out of my league, but the smaller the issue the easier it is to understand and actually get committed. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13041776",
            "date": "2011-05-31T19:29:14+0000",
            "content": "Robert I fully agree, however then the title of the Jira is incorrect. \n\nHow is it incorrect? The description of the issue is to overhaul the UpdateHandler, not to rearchitect Solr for NRT, move IW into SolrCore, or other things.\n\nWe're also adding ref counting on IWs now as well? All of this is unnecessary. If we're modularizing, this isn't right path to go one.\n\nHow do you propose supporting core reloads without it? It seems to me (again solr dummy) that some mechanism like this is needed.\n\nI guess personally, just looking at the big picture, this issue seems like a great win for Solr.\n\nI tested the patch and all tests pass... if there are technical concerns with test coverage I'm happy to try to help there to help see this thing committed. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041904",
            "date": "2011-06-01T00:13:57+0000",
            "content": "I guess personally, just looking at the big picture, this issue seems like a great win for Solr.\n\nYes the concept of not stopping the world is great.  The concept of Solr continuing to be difficult to customize is not so great.  \n\n-1 on the implementation which introduces even more awkward layers into Solr, which should be going in the direction of removing the old cruft. "
        },
        {
            "author": "Shai Erera",
            "id": "comment-13041974",
            "date": "2011-06-01T03:56:43+0000",
            "content": "The concept of Solr continuing to be difficult to customize is not so great. \n\nI haven't looked at the patch at all, as I'm not familiar w/ Solr code and cannot comment on the technical issues here. But I do would like to understand if this patch indeed gets us further from being able to customize Solr in the future or not.\n\nBy customizing I mean (and I realize not all of it is handled in this issue):\n\n\tControl the IW instance through not only properties, but IW extensions (for e.g. overriding addDocument / commit so that other custom data structures can be updated at the same time as well).\n\tControl the replication process, for e.g., replicating additional files, not only IW files, that are required by the runtime logic.\n\tControl the IndexSearcher instance, or the query execution engine, in order to run queries at the low-level. i.e., being able to call IS.search(Q, Collector), and not from some high-level API where I can only submit a String and get back Result.\n\n\n\nThese are important extension points, IMO, to Solr that we can offer applications. I admit, really advanced applications that know what they do and want, that just don't want to rewrite Solr entirely in order to execute queries differently.\n\nNOTE: I am not trying, nor do I want, to discuss here whether it should be the roadmap of Solr (i.e., provide all sorts of extensions that enable the above), but merely asking if that patch indeed gets us further from accomplishing that. I will not cast any +/-1 vote if it does, just (being a Solr dummy, not even \"at best\") trying to understand if that's really what's being proposed here. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13041986",
            "date": "2011-06-01T04:50:54+0000",
            "content": "\n-1 on the implementation which introduces even more awkward layers into Solr, which should be going in the direction of removing the old cruft.\n\nSorry Jason, you cannot simply say -1 without answering my questions about how these problems can be solved in an alternative way. \n\nI hate to be an asshole, but your vote is non-binding. I'm going to take this issue to the finish line now. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13041995",
            "date": "2011-06-01T06:09:03+0000",
            "content": "I'm curious if someone who doesn't work at Lucid can be involved in Solr design discussions.  In any case, please autocratically continue. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13041997",
            "date": "2011-06-01T06:26:00+0000",
            "content": "I committed this patch (with some additional ref counting checks in SolrTestCaseJ4) to https://svn.apache.org/repos/asf/lucene/dev/branches/solr2193\n\nJason (or anyone else!): if you want to be involved, please contribute constructively in the form of useful ideas and patches against this branch.\n\nIn the meantime, I will be trying to improve the tests for what exists now, as its the best way (not manual reviews) to increase my confidence. "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13042004",
            "date": "2011-06-01T06:43:51+0000",
            "content": "This article is an indicator of the types of benchmarks to perform: http://engineering.socialcast.com/2011/05/realtime-search-solr-vs-elasticsearch/   "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13042009",
            "date": "2011-06-01T06:56:36+0000",
            "content": "Jason, this issue isn't intended to solve NRT.\nYou might want to create a followup issue for improved NRT support.\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13042011",
            "date": "2011-06-01T07:04:01+0000",
            "content": "Jason, this issue isn't intended to solve NRT\n\nWhat is this line doing?\n\n\nnewReader = currentReader.reopen(indexWriterProvider.getIndexWriter(), true);\n\n "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13042013",
            "date": "2011-06-01T07:08:08+0000",
            "content": "Also:\n\nhttps://issues.apache.org/jira/browse/SOLR-2193?focusedCommentId=13016875&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13016875\n\nAnd this comment:\n\n\nCan you elaborate on why you don't think it's implementing NRT? I've tested basic indexing/searching using wikipedia documents at about 50-100 documents a second, opening a new reader every second. That felt pretty near-real-time to me, but the phrase is subjective. \n\nfrom: https://issues.apache.org/jira/browse/SOLR-2193?focusedCommentId=13041268&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-13041268\n\nRobert, your statement's confusing. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13042015",
            "date": "2011-06-01T07:11:21+0000",
            "content": "Its not confusing at all... its a step towards NRT, thats all.\n\nthe main improvement to me, is to not close the indexwriter\nthis patch doesn't need to fully make solr realtime.\n\nyou can keep whining that it isn't, but this doesn't accomplish anything. "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13042026",
            "date": "2011-06-01T07:42:55+0000",
            "content": "I intend to close this issue and go on in SOLR-2565 / SOLR-2566 I hope these issues provide a more clear focus on what the issues trying to address. If nobody objects I am going to close this today.\n\nsimon "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13042032",
            "date": "2011-06-01T07:53:57+0000",
            "content": "+1 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13042146",
            "date": "2011-06-01T12:53:18+0000",
            "content": "+1\n\nthis is a great step forward.  better NRT support can come in later patches.    "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13042150",
            "date": "2011-06-01T13:04:14+0000",
            "content": "further developments in SOLR-2565 and SOLR-2566 "
        },
        {
            "author": "Jason Rutherglen",
            "id": "comment-13042259",
            "date": "2011-06-01T16:11:27+0000",
            "content": "Simon, thanks for opening new issues. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13053456",
            "date": "2011-06-22T20:28:51+0000",
            "content": "Curious; why is the resolution status \"invalid\"?  If work gets committed to a feature-branch instead of trunk, does that mean the issue gets resolved this way?  Perhaps it shouldn't be closed until it lands on trunk. "
        },
        {
            "author": "Simon Willnauer",
            "id": "comment-13053678",
            "date": "2011-06-23T07:11:34+0000",
            "content": "Curious; why is the resolution status \"invalid\"?\n\nwell we decided to cut this into two new issues and close this one. see:\n\nfurther developments in SOLR-2565 and SOLR-2566\n\n\nthere have been discussions about the focus here so we made it more clear. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13057833",
            "date": "2011-06-30T14:06:46+0000",
            "content": "This issue is superceded by: SOLR-2565 Prevent IW#close and cut over to IW#commit "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13057834",
            "date": "2011-06-30T14:07:23+0000",
            "content": "Curious; why is the resolution status \"invalid\"?\n\nDunno - it's not invalid. I've re-resolved as \"duplicate\" "
        }
    ]
}