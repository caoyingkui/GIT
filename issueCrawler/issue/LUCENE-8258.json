{
    "id": "LUCENE-8258",
    "title": "GeoComplexPolygon fails computing traversals",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.4",
            "master (8.0)"
        ]
    },
    "description": "There are some situations when checking for memebership for a GeoComplexPolygon results in the following error:\n\njava.lang.IllegalArgumentException: No off-plane intersection points were found; can't compute traversal\n\nIt seems the intersection of auxiliary planes created is outside of the world.",
    "attachments": {
        "LUCENE-8258.jpg": "https://issues.apache.org/jira/secure/attachment/12919785/LUCENE-8258.jpg",
        "LUCENE-8258.patch": "https://issues.apache.org/jira/secure/attachment/12919781/LUCENE-8258.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16443928",
            "date": "2018-04-19T11:39:56+0000",
            "content": "Debugging output shows that the outside-outside point of the dual traversal doesn't lie on the world:\n\n\n   [junit4]   1> Calling pickProximate for outsideOutside point for plane intersection of [A=0.0, B=0.0; C=1.0; D=-3.590718044207102E-6] and [A=1.0, B=0.0; C=0.0; D=-0.9999999999942558]\n\n\n\nThis is very close to being a single-edge traversal \u2013 it misses by a small fraction.\n\nThe second plane is very very close to being eliminated by the check Ignacio Vera added.  I think we may just need to tighten up those checks further.  We need MINIMUM_RESOLUTION either way in order to guarantee that the envelopes intersect the world.  What do you think? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16443943",
            "date": "2018-04-19T11:56:48+0000",
            "content": "Hmm, that does not seem to help.  Something else must be going on.  Perhaps the issue is the intersection bounds? ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16443956",
            "date": "2018-04-19T12:06:04+0000",
            "content": "Nope, it isn't the bounds.  There's no actual intersection on the world:\n\n\n   [junit4]   1> Looking for intersection between plane [A=0.0, B=0.0; C=1.0; D=-3.590718044207102E-6] and plane [A=1.0, B=0.0; C=0.0; D=-0.9999999999942558] within bounds\n   [junit4]   1>  no solutions - no intersection - BsquaredMinus=-5.619504861442692E-12\n\n\n\nI'm at a loss to explain why it picks these travel planes.  The ellipsoid is a sphere, which should be easy.  The BsquaredMinus term's limit is 1e-24, so this is off by the proverbial mile from intersecting the world, and even when I try limiting the choice of planes by restricting their legal values further, it doesn't seem to have any problem with any of them, and we still pick exactly the same ones.\n\nI have no further time today, but if Ignacio Vera would like to explore the problem a bit more maybe by this weekend we can at least understand what the issue is.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16443998",
            "date": "2018-04-19T12:42:39+0000",
            "content": "Last comment:  When I tried restricting the use of planes, an additional MINIMUM_RESOLUTION was insufficient, as was even 5.0 * MINIMUM_RESOLUTION.  I had to use 10.0 * MINIMUM_RESOLUTION to make it work.  That's probably not acceptable in general, although it may be acceptable in the case of dual-plane travel because there's always a second choice.\n\nSo the problem is: (1) the current code SHOULD work but doesn't, and (2) we probably can't just disallow travel planes that seem valid unless we're sure there's an alternative. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16444005",
            "date": "2018-04-19T12:47:23+0000",
            "content": "Commit a033759f127cec8137351a47dc4f6703941eab01 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a033759 ]\n\nLUCENE-8258: Tighten rejection of travel planes that are too close to an edge.  Note: this may cause failures in some cases; haven't seen it, but if that happens, the logic will need to change instead of just the cutoff. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16444007",
            "date": "2018-04-19T12:49:10+0000",
            "content": "Commit f3e0fab70a9e115ea86bf9b4ee42b702e335c9cc in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f3e0fab ]\n\nLUCENE-8258: Tighten rejection of travel planes that are too close to an edge.  Note: this may cause failures in some cases; haven't seen it, but if that happens, the logic will need to change instead of just the cutoff. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16444008",
            "date": "2018-04-19T12:49:35+0000",
            "content": "Commit a61018fd99875f9a280924f6943fef4d797ca7ca in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a61018f ]\n\nLUCENE-8258: Tighten rejection of travel planes that are too close to an edge.  Note: this may cause failures in some cases; haven't seen it, but if that happens, the logic will need to change instead of just the cutoff. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16444014",
            "date": "2018-04-19T12:51:37+0000",
            "content": "I committed what I had; it makes the test pass, but I have reservations that it may cause failures in other situations, so I don't think we're ready to close this ticket. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16444016",
            "date": "2018-04-19T12:55:06+0000",
            "content": "Thanks Karl Wright, yes I think we should keep it open. I will have some time to look into it, I will report any findings. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16445291",
            "date": "2018-04-20T04:42:09+0000",
            "content": "I think the solution needs to check if the above and below planes actually intersect inside the world. I had a look into the intersection code and that is determine by the solution of a quadratic formula, in particular the square root of the solution.\n\nIn our problem because planes are perpendicular to each other and both parallel to one of the axes. Therefore checking if the square root of the quadratic has a solution is straight forward.\n\nAttached a patch with the extra check.\n\n\u00a0\n\n\u00a0\n\n\u00a0 \n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16445416",
            "date": "2018-04-20T07:16:59+0000",
            "content": "Ignacio Vera This is essentially looking \"into the future\" and doing a piece of the intersection calculation ahead of time, in order to choose a better traversal choice.  I think that is a reasonable approach.  I will look at cleaning it up and merging it in later today.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16445434",
            "date": "2018-04-20T07:30:59+0000",
            "content": "Commit 493bdec3a7e6b684efd72b68304f3a8c0ca7601e in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=493bdec ]\n\nLUCENE-8258: A better fix to avoid out-of-world plane intersections for traversal planes. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16445437",
            "date": "2018-04-20T07:31:33+0000",
            "content": "Commit eb331c4ef045ff3c357c4410a4476e3a0e00ff4d in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=eb331c4 ]\n\nLUCENE-8258: A better fix to avoid out-of-world plane intersections for traversal planes. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16445438",
            "date": "2018-04-20T07:32:02+0000",
            "content": "Commit 422ef65f09aa0d4f65ecca1532ee98198b11ae2c in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=422ef65 ]\n\nLUCENE-8258: A better fix to avoid out-of-world plane intersections for traversal planes. ",
            "author": "ASF subversion and git services"
        }
    ]
}