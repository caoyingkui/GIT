{
    "id": "SOLR-7669",
    "title": "Add SelectStream to Streaming API",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Minor"
    },
    "description": "Adds a new stream called SelectStream which can be used for two purpose.\n 1. Limit the set of fields included in an outgoing tuple to remove unwanted fields\n 2. Provide aliases for fields. With this it acts as an alternative to the CloudSolrStream's 'aliases' option.\n\n For example, in a simple case\n\nselect(\n  id, \n  fieldA_i as fieldA, \n  fieldB_s as fieldB,\n  search(collection1, q=\"*:*\", fl=\"id,fieldA_i,fieldB_s\", sort=\"fieldA_i asc, fieldB_s asc, id asc\")\n)\n\n\n\nThis can also be used as part of complex expressions to help keep track of what is being worked on. This is particularly useful when merging/joining multiple collections which share field names. For example, the following results in a set of tuples including only the fields id, left.ident, and right.ident even though the total set of fields required to perform the search and join is much larger than just those three fields.\n\nselect(\n  id, left.ident, right.ident,\n  innerJoin(\n    select(\n      id, join1_i as left.join1, join2_s as left.join2, ident_s as left.ident,\n      search(collection1, q=\"side_s:left\", fl=\"id,join1_i,join2_s,ident_s\", sort=\"join1_i asc, join2_s asc, id asc\")\n    ),\n    select(\n      join3_i as right.join1, join2_s as right.join2, ident_s as right.ident,\n      search(collection1, q=\"side_s:right\", fl=\"join3_i,join2_s,ident_s\", sort=\"join3_i asc, join2_s asc\"),\n    ),\n    on=\"left.join1=right.join1, left.join2=right.join2\"\n  )\n)\n\n\n\nThis depends on SOLR-7584.",
    "attachments": {
        "SOLR-7669.patch": "https://issues.apache.org/jira/secure/attachment/12739157/SOLR-7669.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-07T01:27:35+0000",
            "author": "Dennis Gove",
            "content": "Updated to add support for performing operations on the selected values. The only operation included in this patch is Replace which can be used to replace field values (or nulll) with a different value or the value of another field.\n\nIn the following example, if fieldA is null then it will be replaced with value 123 and if fieldB is \"foo\" then it will be set to \"bar\".\n\nselect(\n  id, \n  fieldA_i as fieldA, \n  fieldB_s as fieldB,\n  replace(fieldA, null, withValue=123),\n  replace(fieldB, foo, withValue=bar),\n  search(collection1, q=\"*:*\", fl=\"id,fieldA_i,fieldB_s\", sort=\"fieldA_i asc, fieldB_s asc, id asc\")\n)\n\n\n\nIn the following example, if fieldA is null or \"???\" then it will be replaced with the value of fieldB.\n\nselect(\n  id, \n  fieldA_s as fieldA, \n  fieldB_s as fieldB,\n  replace(fieldA, null, withField=fieldB),\n  replace(fieldA, \"???\", withField=fieldB)\n  search(collection1, q=\"*:*\", fl=\"id,fieldA_i,fieldB_s\", sort=\"fieldA_i asc, fieldB_s asc, id asc\")\n)\n\n ",
            "id": "comment-14661163"
        },
        {
            "date": "2015-10-22T01:02:55+0000",
            "author": "Dennis Gove",
            "content": "Rebased against trunk (git hash f63fc48, SOLR-8114: in Grouping.java rename groupSort to withinGroupSort)\n\nRequired a couple of changes in the SQL and FacetStream areas related to FieldComparator. The FieldComparator has been changed to support different field names on the left and right side. The SQL and FacetStream areas use FieldComparator for sorting (a totally valid use case) but do expect the left and right side field names to be equal. The changes I made go through and validate that assumption.\n\nIn the future I think I may circle back around and create a new FieldComparator with a single field name so that on construction that assumption can be enforced.\n\nAll tests pass. ",
            "id": "comment-14968301"
        },
        {
            "date": "2015-10-22T23:04:04+0000",
            "author": "Dennis Gove",
            "content": "Deleted the EditStream as its functionality (the removal of fields from a tuple) is superseded by the SelectStream. Updated the SQLHandler to use the SelectStream instead of the EditStream.\n\nAll relevant tests pass.  ",
            "id": "comment-14970072"
        },
        {
            "date": "2015-11-12T00:24:06+0000",
            "author": "Dennis Gove",
            "content": "Rebased against trunk. ",
            "id": "comment-15001399"
        },
        {
            "date": "2015-11-12T04:35:15+0000",
            "author": "Dennis Gove",
            "content": "Fixes for pre-commit failures. Add documentation on the operations. ",
            "id": "comment-15001677"
        },
        {
            "date": "2015-11-12T04:37:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1713967 from dpgove@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1713967 ]\n\nSOLR-7669: Add SelectStream and Tuple Operations to the Streaming API and Streaming Expressions ",
            "id": "comment-15001680"
        }
    ]
}