{
    "id": "SOLR-5200",
    "title": "Add REST support for reading and modifying Solr configuration",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.1"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "There should be a REST API to allow full read access to, and write access to some elements of, Solr's per-core and per-node configuration not already covered by the Schema REST API: solrconfig.xml/core.properties/solrcore.properties and solr.xml/solr.properties (SOLR-4718 discusses addition of solr.properties).\n\nUse cases for runtime configuration modification include scripted setup, troubleshooting, and tuning.\n\nTentative rules-of-thumb about configuration items that should not be modifiable at runtime:\n\n\n\tStartup-only items, e.g. where to start core discovery\n\tItems that are deprecated in 4.X and will be removed in 5.0\n\tItems that if modified should be followed by a full re-index\n\n\n\nSome issues to consider:\n\nPersistence: How (and even whether) to handle persistence for configuration modifications via REST API is not clear - e.g. persisting the entire config file or having one or more sidecar config files that get persisted.  The extent of what should be modifiable will likely affect how persistence is implemented.  For example, if the only solrconfig.xml modifiable items turn out to be plugin configurations, an alternative to full-solrconfig.xml persistence could be individual plugin registration of runtime config modifiable items, along with per-plugin sidecar config persistence.\n\n\"Live\" reload: Most (if not all) per-core configuration modifications will require core reload, though it will be a \"live\" reload, so some things won't be modifiable, e.g. <dataDir> and IndexWriter related settings in <indexConfig> - see SOLR-3592.  (Should a full reload be supported to handle changes in these places?)\n\nInterpolation aka property substitution: I think it would be useful on read access to optionally return raw values in addition to the interpolated values, e.g. solr.xml hostPort raw value ${jetty.port:8983} vs. interpolated value 8983.   Modification requests will accept raw values - property interpolation will be applied.  At present interpolation is done once, at parsing time, but if property value modificationmvn archetype:generate -DgroupId=com.mkyong.core -DartifactId=ProjectName\n\t-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=falsemvn archetype:generate -DgroupId=com.mkyong.core -DartifactId=ProjectName\n\t-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=falsemvn archetype:generate -DgroupId=com.mkyong.core -DartifactId=ProjectName\n\t-DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false is supported via the REST API, an alternative could be to delay interpolation until values are requested; in this way, property value modification would not trigger re-parsing the affected configuration source.\n\nResponse format: Similarly to the schema REST API, results could be returned in XML, JSON, or any other response writer's output format.\n\nTransient cores: How should non-loaded transient cores be handled?  Simplest thing would be to load the transient core before handling the request, just like other requests.\n\nBelow I provide an exhaustive list of configuration items in the files in question and indicate which ones I think could be modifiable at runtime.  I don't mean to imply that these must all be made modifiable, or for those that are made modifiable, that they must be made so at once - a piecemeal approach will very likely be more appropriate.\n\nsolrconfig.xml\n\nNote that XIncludes and includes via Document Entities won't survive a modification request (assuming persistence is via overwriting the original file).\n\n\n\n\nXPath under /config/\nShould be modifiable via REST API?\nRationale\nDescription\n\n\nluceneMatchVersion\nNo\nModifying this should be followed by a full re-index\nControls what version of Lucene various components of Solr adhere to\n\n\nlib\nYes\nRequired for adding plugins at runtime\nContained jars available via classloader for solrconfig.xml and schema.xml\n\n\ndataDir\nNo\nNot supported by \"live\" RELOAD\nHolds all index data\n\n\ndirectoryFactory\nNo\nNot supported by \"live\" RELOAD\nindex directory factory\n\n\ncodecFactory\nNo\nModifying this should be followed by a full re-index\nindex codec factory, per-field SchemaCodecFactory by default\n\n\nschemaFactory\nPartial\nAlthough the class shouldn't be modifiable, it should be possible to modify an already Managed schema's mutability\nManaged or Classic (non-mutable) schema factory\n\n\nindexConfig\nNo\nIndexWriter-related settings not supported by \"live\" RELOAD\nlow-level indexing behavior\n\n\njmx\nYes\n\u00a0\nEnables JMX if an MBeanServer is found\n\n\nupdateHandler@class\nNo\n\u00a0\nDefaults to DirectUpdateHandler2\n\n\nupdateHandler/updateLog\nNo\n\u00a0\nEnables a transaction log, configures its directory and synchronization\n\n\nupdateHandler/autoCommit\nYes\n\u00a0\nDurability: enables hard autocommit, configures max interval and whether to open a searcher afterward\n\n\nupdateHandler/autoSoftCommit\nYes\n\u00a0\nVisibility: enables soft autocommit, configures max interval\n\n\nupdateHandler/commitWithin/softCommit\nYes\n\u00a0\nWhether commitWithin update request param should trigger a soft commit instead of hard commit\n\n\nupdateHandler/listener\nYes\n\u00a0\nUpdate-related event listeners, e.g. snapshooter\n\n\nindexReaderFactory\nNo\n\u00a0\nSpecify custom index reader factory (default StandardIndexReaderFactory)\n\n\nquery/maxBooleanClauses\nYes\n\u00a0\nMaximum boolean clauses allowed in a query\n\n\nquery/filterCache\nYes\n\u00a0\nEnables the filter cache - unordered docsets, configures class, initial size, max size, and entries to pull from an old cache\n\n\nquery/queryResultCache\nYes\n\u00a0\nEnables the query result cache - ordered docid lists,configures class, initial size, max size, and entries to pull from an old cache\n\n\nquery/documentCache\nYes\n\u00a0\nEnables the document cache - document stored fields, configures class, initial size, and max size\n\n\nquery/fieldValueCache\nYes\n\u00a0\nEnables the field value cache - field values by docid, created by default, configures class, size, # entries to report stats for (showItems)\n\n\nquery/cache\nYes\n\u00a0\nEnables a custom cache, configures name, class, initial size, max size, regenerator class, and entries to pull from an old cache\n\n\nquery/enableLazyFieldLoading\nYes\n\u00a0\nWhether to enable lazy field loading\n\n\nquery/useFilterForSortedQuery\nYes\n\u00a0\nWhether to use a filter for a sorted non-scoring search\n\n\nquery/queryResultWindowSize\nYes\n\u00a0\nCached result window size\n\n\nquery/queryResultMaxDocsCached\nYes\n\u00a0\nMaximum number of documents to cache for any entry in the queryResultCache\n\n\nquery/listener\nYes\n\u00a0\nQuery-related event listener, configures event type, class, and queries, e.g. newSearcher and firstSearcher events with solr.QuerySenderListener\n\n\nquery/useColdSearcher\nYes\n\u00a0\nWhether to interrupt searcher warming to service a query request if there are no registered searchers\n\n\nquery/maxWarmingSearchers\nYes\n\u00a0\nMax searchers to warm\n\n\nrequestDispatcher\nYes\n\u00a0\nConfigures SolrDispatchFilter behavior, Including requestParsers and httpCaching\n\n\nrequestHandler\nYes\n\u00a0\nConfigures request handlers, including SearchHandler, RealTimeGetHandler, UpdateRequestHandler, ReplicationHandler, etc., and their URL path mapping (name)\n\n\nsearchComponent\nYes\n\u00a0\nConfigures search components available to SearchHandlers\n\n\nupdateRequestProcessorChain\nYes\n\u00a0\nConfigures named update request processor chains usable by UpdateRequestHandler\n\n\nqueryResponseWriter\nYes\n\u00a0\nConfigures named response writers\n\n\nqueryParser\nYes\n\u00a0\nConfigures query parser plugins\n\n\nvalueSourceParser\nYes\n\u00a0\nConfigures named function parsers, usable by the \"func\" QParser\n\n\ntransformer\nYes\n\u00a0\nConfigures named document transformers, which transform documents returned to the user, e.g. adding fields - defaults are explain, value, shard, docid\n\n\nadmin/defaultQuery\nNo\n\u00a0\nLegacy config for the admin UI\n\n\n\n\n\n\ncore.properties\n\ncore.properties marks a core directory.  Each core will parse its solrconfig.xml using these properties.\n\nI don't think any of the Solr-internal properties in this file should be modifiable at runtime: \"name\", \"config\", \"instanceDir\", \"absoluteInstDir\", \"dataDir\", \"ulogDir\", \"schema\", \"shard\", \"collection\", \"roles\", \"properties\", \"loadOnStartup\", \"transient\", \"coreNodeName\".  But it would be useful to allow for addition/modification of user-defined properties here.\n\nRead/write access will be provided, both for individual properties and in bulk.  solrconfig.xml will need to be re-parsed using new property values; alternatively, interpolation could be delayed until values are accessed.  Problem: changing properties that aren't valid in a \"live\" RELOAD - see SOLR-3592.\n\nsolrcore.properties\n\nsolrcore.properties is a per-config-set properties map used to interpolate property values when parsing solrconfig.xml.\n\nRead/write access will be provided, both for individual properties and in bulk.  solrconfig.xml will need to be re-parsed using new property values; alternatively, interpolation could be delayed until values are accessed.   Problem: changing properties that aren't valid in a \"live\" RELOAD - see SOLR-3592.\n\nsolr.xml\n\nsolr.xml is used to configure multi-core and SolrCloud features.\n\nMost of the configuration items in this file are related to startup-only operations, and so shouldn't be changed at runtime.\n\n\n\n\nXPath under /solr/ (4.X old-style)\nXPath under /solr/ (5.0 and 4.4+ core discovery style)\nShould be modifiable via REST API?\nDescription/rationale\n\n\n@persistent\nN/A\nNo\nDeprecated in 4.X old-style, removed in 5.0 and 4.4+ core discovery style\n\n\ncores/@defaultCoreName\nN/A\nNo\nDeprecated in 4.X old-style, removed in 5.0 and 4.4+ core discovery style\n\n\ncores/@adminPath\nN/A\nNo\nRemoved in 5.0, where it's always /admin/cores \n\n\nN/A\nstr[@name='coreRootDirectory']\nNo\nThe root of the core discovery tree, defaults to the solrhome\n\n\n@coreLoadThreads\nint[@name='coreLoadThreads']\nYes\nCore loading fixed thread pool size\n\n\n@sharedLib\nstr[@name='sharedLib']\nNo\nLib directory used by all cores on the same node\n\n\ncores/@adminHandler\nstr[@name='adminHandler']\nNo\nAdmin handler class, CoreAdminHandler by default\n\n\ncores/@managementPath\nstr[@name='managementPath']\nNo\nRequest URL path prefix that gets stripped by SolrDispatchFilter\n\n\ncores/@shareSchema\nstr[@name='shareSchema']\nNo\nWhether to cache and share schema object among cores on the same node\n\n\ncores/@transientCacheSize\nint[@name='transientCacheSize']\nYes\nMax active transient cores; reducing this would trigger immediate unloading\n\n\ncores/shardHandlerFactory\nshardHandlerFactory\nNo\nShard handler factory class and configuration\n\n\nlogging/@class\nlogging/str[@name='class']\nNo\nLogging class\n\n\nlogging/@enabled\nlogging/str[@name='enabled']\nYes\nWhether to enable logging\n\n\nlogging/watcher/@size\nlogging/watcher/int[@name='size']\nYes\nMax log history entries\n\n\nlogging/watcher/@threshold\nlogging/watcher/int[@name='threshold']\nNo\nRoot logger level; per-logger level setting already available through LoggingHandler via the /admin/logging endpoint\n\n\n@zkHost\nsolrcloud/str[@name='zkHost']\nNo\nSolrCloud: ZooKeeper host holding cluster state\n\n\ncores/@distribUpdateConnTimeout\nsolrcloud/int[@name='distribUpdateConnTimeout']\nNo\nSolrCloud: initial distributed update connection timeout\n\n\ncores/@distribUpdateSoTimeout\nsolrcloud/int[@name='distribUpdateSoTimeout']\nNo\nSolrCloud: distributed update socket read timeout\n\n\ncores/@host\nsolrcloud/str[@name='host']\nNo\nSolrCloud: Local Solr host name\n\n\ncores/@hostContext\nsolrcloud/str[@name='hostContext']\nNo\nSolrCloud: Local Solr servlet context path\n\n\ncores/@hostPort\nsolrcloud/int[@name='hostPort']\nNo\nSolrCloud: Local Solr host port\n\n\ncores/@leaderVoteWait\nsolrcloud/int[@name='leaderVoteWait']\nNo\nSolrCloud: Leader vote wait time (ms)\n\n\ncores/@genericCoreNodeNames\nsolrcloud/bool[@name='genericCoreNodeNames']\"\nNo\nSolrCloud: If true, don't base core node names on the node address\n\n\ncores/@zkClientTimeout\nsolrcloud/int[@name='zkClientTimeout']\nNo\nSolrCloud: ZooKeeper connection timeout\n\n\n\n\n\nsolr.properties\n\nContains local per-node (not in ZooKeeper) properties used to parse solr.xml.\n\nRead/write access will be provided, both for individual properties and in bulk.  solr.xml will need to be re-parsed using new property values.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Michael Della Bitta",
            "id": "comment-13753781",
            "date": "2013-08-29T16:21:02+0000",
            "content": "We've wanted the ability to tune commit properties for bulk indexing, and then switch to more incremental indexing-friendly setup on the fly, for a while. +1. "
        },
        {
            "author": "Dmitry Kan",
            "id": "comment-13754452",
            "date": "2013-08-30T07:15:20+0000",
            "content": "One parameter relevant to us is mergeFactor. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14306823",
            "date": "2015-02-05T08:29:10+0000",
            "content": "This would help define the URP APIs for config "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15517353",
            "date": "2016-09-23T19:30:39+0000",
            "content": "Looks like the feature is complete, can this parent JIRA now be closed? "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-15678005",
            "date": "2016-11-18T22:46:53+0000",
            "content": "Closing this since all the sub-tasks are done. Some will be revised as part of SOLR-8029 and other params can be added if necessary once that is complete. "
        }
    ]
}