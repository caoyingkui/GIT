{
    "id": "SOLR-6521",
    "title": "CloudSolrClient should synchronize cache cluster state loading",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "priority": "Critical",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Under heavy load-testing with the new solrj client that caches the cluster state instead of setting a watcher, I started seeing lots of zk connection loss on the client-side when refreshing the CloudSolrServer collectionStateCache, and this was causing crazy client-side 99.9% latency (~15 sec). I swapped the cache out with guava's LoadingCache (which does locking to ensure only one thread loads the content under one key while the other threads that want the same key wait) and the connection loss went away and the 99.9% latency also went down to just about 1 sec.",
    "attachments": {
        "SOLR-6521.patch": "https://issues.apache.org/jira/secure/attachment/12693619/SOLR-6521.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-14135272",
            "date": "2014-09-16T10:51:11+0000",
            "content": "AFAIK SolrJ does not have  a dependency on guava. I shall do a single threaded loading of state and it should be fine "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14135713",
            "date": "2014-09-16T16:58:06+0000",
            "content": "I worry that this will not be performant enough since that makes lookups of different keys serial, and in a system with lots of active collections, lookups will be unnecessarily blocked.\n\nIn the same vein, I feel that the codebase can benefit from a LoadingCache-style cache that only synchronizes loading of the same key. Incidentally we also found that the FilterCache population suffers from the same problem. We've found that in our load test, when a filter query is heavily used, it actually adversely impacts performance to cache the fq because whenever the filter cache is invalidated, all the request threads try to build the cache entry for that exact same fq and locks the system up. We would get 30 second 99% request time when we cache the fq, and when we added \n{!cache=false}\n to the fq, 99% went back down to the 100ms range.\n\nI understand that adding guava to solrj would probably require a lot of discussions and voting, etc., but I think the benefit of a LoadingCache-style cache is high enough that even if we can't include guava, it might make sense for solr/apache to implement their own. "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14136156",
            "date": "2014-09-16T20:39:55+0000",
            "content": "Thanks Jessica, I think we met a similar question. Could I get more information about your tests? I would like to reproduce it.\nJust curious, you said you using guava's cache for collectionStateCache ? Is it right? "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14136363",
            "date": "2014-09-16T22:19:02+0000",
            "content": "Xu, I think it's unlikely you've hit the same issue unless you are using the new split clusterstate feature in https://issues.apache.org/jira/browse/SOLR-5473. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14284019",
            "date": "2015-01-20T17:04:18+0000",
            "content": "Noble Paul do you intend to get this in for 5.0? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14284051",
            "date": "2015-01-20T17:15:38+0000",
            "content": "It' unlikely for 5.0. I would take it up for the next release "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14285925",
            "date": "2015-01-21T17:27:12+0000",
            "content": "The patch is locking the entire cache for all loading, which might not be an ideal solution for a cluster with many, many collections. Guava's implementation of LocalCache would only lock and wait on \"Segment\"s, which increases the concurrency level (which is tunable).  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14285985",
            "date": "2015-01-21T18:00:21+0000",
            "content": "The patch is locking the entire cache for all loading, which might not be an ideal solution for a cluster with many\n\nI understand that. In reality , different  collections expire at different time .so everyone waiting on the lock would be a rare thing.  The common use case is one collection expired  and every thread is trying to refresh that simultaneously.\n\nI agree that the concurrency can be dramatically improved . Using Guava may not be an option because it is not yet a dependency on SolrJ. The other option would be to make the cache pluggable through an API . So ,if you have Guava or something else in your package you can plug it in through an API "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-14286062",
            "date": "2015-01-21T18:59:16+0000",
            "content": "I agree that the concurrency can be dramatically improved . Using Guava may not be an option because it is not yet a dependency on SolrJ. The other option would be to make the cache pluggable through an API . So ,if you have Guava or something else in your package you can plug it in through an API\n\nThat'd be awesome! "
        },
        {
            "author": "Noble Paul",
            "id": "comment-14286068",
            "date": "2015-01-21T19:01:16+0000",
            "content": "hi Jessica Cheng Mallet\n\nThis patch increases the parallelism and makes it tunable.  "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14287084",
            "date": "2015-01-22T08:00:27+0000",
            "content": "We should use CloudSolrClient.setParallelCacheRefreshes() while initializing the default locks (size=3) instead of Arrays.asList(..) directly.\nAlso, can you add a bit of javadoc mentioning that the user can use custom cache implementation by overriding the getDocCollection() method? I think that would be helpful for users looking forward to do that.\n\nThe rest looks good to me. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287200",
            "date": "2015-01-22T10:23:37+0000",
            "content": "Commit 1653801 from Noble Paul in branch 'dev/branches/lucene_solr_5_0'\n[ https://svn.apache.org/r1653801 ]\n\nSOLR-6521 CloudSolrServer should synchronize cache cluster state loading "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287240",
            "date": "2015-01-22T10:43:12+0000",
            "content": "Commit 1653805 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1653805 ]\n\nSOLR-6521 CloudSolrServer should synchronize cache cluster state loading "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287331",
            "date": "2015-01-22T12:11:59+0000",
            "content": "Commit 1653822 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1653822 ]\n\nSOLR-6521 CloudSolrServer should synchronize cache cluster state loading "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14287407",
            "date": "2015-01-22T13:23:36+0000",
            "content": "There's a test failure on jenkins due to this fix. I guess it's because of:\n\nlocks.get(collection.hashCode() % locks.size())\n\n\n\nhttp://jenkins.thetaphi.de/job/Lucene-Solr-5.0-Linux/29/\n\n1 tests failed.\nFAILED:  org.apache.solr.cloud.HttpPartitionTest.testDistribSearch\n\nError Message:\n-2\n\nStack Trace:\njava.lang.ArrayIndexOutOfBoundsException: -2\n        at __randomizedtesting.SeedInfo.seed([117EBA4326468C3C:9098345B5119EC00]:0)\n        at java.util.ArrayList.elementData(ArrayList.java:418)\n        at java.util.ArrayList.get(ArrayList.java:431)\n        at org.apache.solr.client.solrj.impl.CloudSolrClient.getDocCollection(CloudSolrClient.java:1099)\n        at org.apache.solr.client.solrj.impl.CloudSolrClient.requestWithRetryOnStaleState(CloudSolrClient.java:762)\n        at org.apache.solr.client.solrj.impl.CloudSolrClient.request(CloudSolrClient.java:737)\n        at org.apache.solr.cloud.HttpPartitionTest.sendDoc(HttpPartitionTest.java:481)\n        at org.apache.solr.cloud.HttpPartitionTest.testRf3(HttpPartitionTest.java:271)\n        at org.apache.solr.cloud.HttpPartitionTest.doTest(HttpPartitionTest.java:120)\n        at org.apache.solr.BaseDistributedSearchTestCase.testDistribSearch(BaseDistributedSearchTestCase.java:878)\n        at sun.reflect.GeneratedMethodAccessor40.invoke(Unknown Source)\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287440",
            "date": "2015-01-22T14:00:41+0000",
            "content": "Commit 1653862 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1653862 ]\n\nSOLR-6521 use murmurhash because hashCode can give -ve val "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287453",
            "date": "2015-01-22T14:04:12+0000",
            "content": "Commit 1653864 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1653864 ]\n\nSOLR-6521 use murmurhash because hashCode can give -ve val "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287461",
            "date": "2015-01-22T14:08:51+0000",
            "content": "Commit 1653866 from Noble Paul in branch 'dev/branches/lucene_solr_5_0'\n[ https://svn.apache.org/r1653866 ]\n\nSOLR-6521 use murmurhash because hashCode can give -ve val "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287635",
            "date": "2015-01-22T15:55:24+0000",
            "content": "Commit 1653921 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1653921 ]\n\nSOLR-6521 use abs() to handle -ve hash "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287642",
            "date": "2015-01-22T16:00:39+0000",
            "content": "Commit 1653923 from Noble Paul in branch 'dev/branches/lucene_solr_5_0'\n[ https://svn.apache.org/r1653923 ]\n\nSOLR-6521 use abs() to handle -ve hash "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14287643",
            "date": "2015-01-22T16:00:45+0000",
            "content": "Commit 1653924 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1653924 ]\n\nSOLR-6521 use abs() to handle -ve hash "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-14332810",
            "date": "2015-02-23T05:02:02+0000",
            "content": "Bulk close after 5.0 release. "
        }
    ]
}