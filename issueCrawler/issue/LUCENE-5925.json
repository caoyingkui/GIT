{
    "id": "LUCENE-5925",
    "title": "Use rename instead of segments_N fallback / segments.gen etc",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [
            "core/index",
            "core/store"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "Our commit logic is strange, we write corrupted commit points and only on the last phase of commit do we \"correct them\".\n\nThis means the logic to get the latest commit is always scary and awkward, since it must deal with partial commits, and try to determine if it should fall back to segments_N-1 or actually relay an exception. \n\nThis logic is incomplete/sheisty as we, e.g. i think we only fall back so far (at most one).\n\nIf we somehow screw up in all this logic do the wrong thing, then we lose data (e.g. LUCENE-4870 wiped entire index because of TooManyOpenFiles).\n\nWe now require java 7, i think we should expore instead writing pending_segments_N and then in finishCommit() doing an atomic rename to segments_N. \n\nWe could then remove all the complex fallback logic completely, since we no longer have to deal with \"ignoring partial commits\", instead simply delivering any exception we get when trying to read the commit and sleep better at night.\n\nIn java 7, we have the apis for this (ATOMIC_MOVE).",
    "attachments": {
        "LUCENE-5925.patch": "https://issues.apache.org/jira/secure/attachment/12667085/LUCENE-5925.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14122930",
            "author": "Michael McCandless",
            "content": "+1, this would be so much simpler, and it's great Java 7 gives us the APIs to do this. ",
            "date": "2014-09-05T13:37:08+0000"
        },
        {
            "id": "comment-14122964",
            "author": "Yonik Seeley",
            "content": "Do we still need to contend with Windows and the possibility that a virus scanner or something else peeks at pending_segments_N at the wrong time when we are trying to move it?  Does that cause the ATOMIC_MOVE to fail? ",
            "date": "2014-09-05T13:50:03+0000"
        },
        {
            "id": "comment-14122966",
            "author": "Robert Muir",
            "content": "yes. the main thing it doesnt guarantee is atomic replacement, but we don't need that:\n\nhttp://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#move%28java.nio.file.Path,%20java.nio.file.Path,%20java.nio.file.CopyOption...%29 ",
            "date": "2014-09-05T13:53:28+0000"
        },
        {
            "id": "comment-14122972",
            "author": "Uwe Schindler",
            "content": "Does that cause the ATOMIC_MOVE to fail?\n\nYes it could in windows. But this would not be bad, it just fails the commit. You get Exception and all is fine, no corrumption.\nAs we never move to an already existing file or different file system, atomic moves should always work. ",
            "date": "2014-09-05T14:00:08+0000"
        },
        {
            "id": "comment-14122990",
            "author": "Shai Erera",
            "content": "What would be the fallback logic in case of AtomicMoveNotSupportedException? E.g. if it's a shared FS, or distributed FS like GPFS (which is usable with FSDirectory)? ",
            "date": "2014-09-05T14:20:05+0000"
        },
        {
            "id": "comment-14122991",
            "author": "Robert Muir",
            "content": "You would get an exception. So it needs to be supported. ",
            "date": "2014-09-05T14:21:27+0000"
        },
        {
            "id": "comment-14122997",
            "author": "Robert Muir",
            "content": "By the way, like the java apis, we can relax the requirements on the Directory method:\n\n\tguarantee target will never exist\n\twe don't care about atomicity of \"source\" vs \"dest\", its fine if both exist for a while, etc.\n\tdon't require that \"dest\" is visible in listAll() on return, as long as fsyncing the directory will make it so.\n\t...\n\n\n\nAll we care about is the contents of \"dest\" appear atomic for read operations against it. ",
            "date": "2014-09-05T14:29:09+0000"
        },
        {
            "id": "comment-14123001",
            "author": "Shai Erera",
            "content": "You would get an exception. So it needs to be supported.\n\nWhat do you mean? We will no longer support indexing on FileSystems that don't support atomic-move? ",
            "date": "2014-09-05T14:33:16+0000"
        },
        {
            "id": "comment-14123004",
            "author": "Robert Muir",
            "content": "Exactly, it would be an abstract method in the Directory API with the semantics i described above. ",
            "date": "2014-09-05T14:35:14+0000"
        },
        {
            "id": "comment-14124928",
            "author": "Robert Muir",
            "content": "Initial patch. all tests pass. ",
            "date": "2014-09-07T15:34:54+0000"
        },
        {
            "id": "comment-14124947",
            "author": "Uwe Schindler",
            "content": "Hi,\nI like the patch. The description of the rename operation is good: The renamed file must appear atomically, not the rename itsself.\n\nI can beast the whole stuff on Windows later! ",
            "date": "2014-09-07T16:11:18+0000"
        },
        {
            "id": "comment-14125001",
            "author": "Uwe Schindler",
            "content": "I ran ant beast -Dbeast.iters=10 -Dtests.dups=6 -Dtestcase=TestIndex* -Dtests.directory=SimpleFSDirectory on Windows 7 without errors. Took more than an hour! ",
            "date": "2014-09-07T18:37:07+0000"
        },
        {
            "id": "comment-14125055",
            "author": "Uwe Schindler",
            "content": "The full test suite (Lucene + Solr) also succeeded on Windows. ",
            "date": "2014-09-07T20:34:17+0000"
        },
        {
            "id": "comment-14125070",
            "author": "Michael McCandless",
            "content": "+1, patch looks great, and I ran 56 iterations of full Lucene core + module tests w/ distributed beaster and no failures ... ",
            "date": "2014-09-07T22:05:27+0000"
        },
        {
            "id": "comment-14125684",
            "author": "Robert Muir",
            "content": "Updated patch. This also solves LUCENE-2585.\n\nToday, segments.gen \"helps\" with the fact that directory listing is not point in time (its a weakly consistent iterator and can reflect changes that happen during iteration). But it cannot be totally relied upon due to timing (you can get unlucky like LUCENE-2585).\n\nInstead, in FindSegmentsFile, we simply detect that contents have changed during the execution of listAll, by executing it again and doing a comparison. This way we can detect \"ConcurrentModificationException\" and just continue the loop. ",
            "date": "2014-09-08T15:44:20+0000"
        },
        {
            "id": "comment-14125786",
            "author": "Michael McCandless",
            "content": "+1, I like this solution.  It passed 85 iters of all lucene core + module tests... ",
            "date": "2014-09-08T17:31:33+0000"
        },
        {
            "id": "comment-14126174",
            "author": "Robert Muir",
            "content": "Thanks for beasting guys! I ran 150 iterations of 'test-core' myself. I'll give it a few days. ",
            "date": "2014-09-08T21:54:18+0000"
        },
        {
            "id": "comment-14129621",
            "author": "ASF subversion and git services",
            "content": "Commit 1624194 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1624194 ]\n\nLUCENE-5925: use rename instead of segments_N fallback/segments.gen ",
            "date": "2014-09-11T05:04:08+0000"
        },
        {
            "id": "comment-14130502",
            "author": "ASF subversion and git services",
            "content": "Commit 1624362 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1624362 ]\n\nLUCENE-5925: use rename instead of segments_N fallback/segments.gen ",
            "date": "2014-09-11T18:56:47+0000"
        },
        {
            "id": "comment-14332540",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:00:34+0000"
        }
    ]
}