{
    "id": "SOLR-8016",
    "title": "CloudSolrClient has extremely verbose error logging",
    "details": {
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.2.1,                                            6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "CloudSolrClient has this error logging line which is fairly annoying:\n\n\n      log.error(\"Request to collection {} failed due to (\"+errorCode+\n          \") {}, retry? \"+retryCount, collection, rootCause.toString());\n\n\n\nGiven that this is a client library and then gets embedded into other applications this line is very problematic to handle gracefully. In today's example I was looking at, every failed search was logging over 100 lines, including the full HTML response from the responding node in the cluster.\n\nThe resulting SolrServerException that comes out to our application is handled appropriately but we can't stop this class complaining in logs without suppressing the entire ERROR channel, which we don't want to do. This is the only direct line writing to the log I could find in the client, so we could suppress errors, but that just feels dirty, and fragile for the future.\n\nFrom looking at the code I am fairly certain it is not as simple as throwing an exception instead of logging... it is right in the middle of the method. I suspect the simplest answer is adding a marker (http://www.slf4j.org/api/org/slf4j/Marker.html) to the logging call.\n\nThen solrj users can choose what to do with these log entries. I don't know if there is a broader strategy for handling this that I am ignorant of; apologies if that is the case.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-09-08T14:55:52+0000",
            "author": "Mark Miller",
            "content": "I think it is incorrect logging levels.\n\nThis method is expected to have to retry sometimes. When it does, it prints out all kinds of errors and warnings. But this is an expected case.\n\nReally, at most, the error and warn logging done in this area should be info and then only perhaps log the error when the retries are done without success.\n\nMarkers don't seem very satisfying - do we know what implementations respect them? ",
            "id": "comment-14734935"
        },
        {
            "date": "2015-09-08T22:34:10+0000",
            "author": "Greg Pendlebury",
            "content": "Lowering the level to INFO would be good in our case, although when you say that after all the retries it will eventually error would just delay the event... unless the error is thrown instead of logged. The Solr nodes were in a bad way and needed intervention from sysadmins because of locked index segments from a graceless shutdown.\n\nUnder this scenario, the UI clients were logging enormous amounts of useless content ('rootCause.toString()') and making finding other lines in the log very difficult. Because the client also throws Exceptions we had already gracefully handled the outage by degrading functionality.\n\nWith regards to Markers I have never used them personally, but before I suggested them I looked at the fact that both log4j and logback support them via slf4j. This covers both the solr default (log4j) and the binding we use in production (logback) so I am selfishly happy with the possibility... and I think it is the simplest change. I didn't want to propose a rethink of the logging, or that method's flow, but I am happy if this prompts that as well. ",
            "id": "comment-14735752"
        },
        {
            "date": "2015-09-08T23:09:14+0000",
            "author": "Mark Miller",
            "content": "That sounds like a different issue - the CloudSolrClient really should not be retrying like this on such an error? ",
            "id": "comment-14735798"
        },
        {
            "date": "2015-09-08T23:21:37+0000",
            "author": "Greg Pendlebury",
            "content": "I haven't looked at the innards of the method enough to say for sure. I know in our particular use case it is fruitless to keep trying. The nodes are online, but cannot answer in the way expected:\n\n\nERROR o.a.s.c.s.i.CloudSolrClient - Request to collection trove failed due to (500) org.apache.solr.client.solrj.impl.HttpSolrClient$RemoteSolrException: Error from server at <snip>/solr/trove: Expected mime type application/octet-stream but got text/html. <html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"/>\n<title>Error 500 {msg=SolrCore 'trove' is not available due to init failure: Index locked for write for core trove,trace=org.apache.solr.common.SolrException: SolrCore 'trove' is not available due to init failure: Index locked for write for core trove\n\n\n\nAnd then lots and lots more html output.\n\nThe Exception that bubbles up to our code is more than enough for us know where to start looking:\n\nERROR a.g.n.n.c.r.SolrService - Solr search failed: No live SolrServers available to handle this request:[<snip>]\n\n ",
            "id": "comment-14735813"
        },
        {
            "date": "2015-09-08T23:29:48+0000",
            "author": "Mark Miller",
            "content": "Pretty sure CloudSolrClient should not be retrying on such errors. The load balancing code is in another class - if anything, it might chose to retry depending on the request type, but code in CloudSolrClient should probably not be retrying in this case. ",
            "id": "comment-14735827"
        },
        {
            "date": "2016-09-28T09:56:09+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Any conclusion on this?  ",
            "id": "comment-15529128"
        },
        {
            "date": "2016-10-19T01:06:14+0000",
            "author": "Greg Pendlebury",
            "content": "Not that I am aware of. I can see the problem still in our newest server (5.5.3). I like Mark Miller's suggestion of lowering the log level to info. It is simple and we can filter it out via logging config. The deeper issues of whether the retry should even be attempted sound interesting to me, but I'd be happy to just not see the log entries. ",
            "id": "comment-15587251"
        }
    ]
}