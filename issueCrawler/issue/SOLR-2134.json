{
    "id": "SOLR-2134",
    "title": "Trie* fields should support sortMissingLast=true, and deprecate Sortable* Field Types",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "With the changes in LUCENE-2649, the FieldCache also returns if the bit is valid or not.  This is enough to support sortMissingLast=true with Trie* fields.  Then we can get rid of the Sortable* fields",
    "attachments": {
        "SOLR-2134-SortMissingLast.patch": "https://issues.apache.org/jira/secure/attachment/12455597/SOLR-2134-SortMissingLast.patch",
        "SOLR-2134-tests.patch": "https://issues.apache.org/jira/secure/attachment/12503546/SOLR-2134-tests.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12914934",
            "date": "2010-09-26T07:36:24+0000",
            "content": "This patch adds 'missingValue' to the lucene SortField and then passes that on to the FieldComparator.  Setting the 'missingValue' to MIN_VALUE or MAX_VALUE lets you either sort the missing fields first or last.\n\nSince the majority of the work is actually in lucene, it may make more sense to have this as a LUCENE issue.\n\nThe solr side still needs some tests, but wanted to get this out for folks to see. "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12914995",
            "date": "2010-09-26T16:34:16+0000",
            "content": "This looks great!\n\nSo it moves the \"sort missing last\" capability down into Lucene, it enables SortField & Comparators to use XXXValuesCreator, so that (I think) an app could make its own external source of values (ie not use the \"uninversion\" that FieldCache/ReaderCache uses).\n\nIf you pass null for the missing value then the bits are not loaded in the FieldCache right?  (And then the comparator behaves as it does today, ie treats these as 0, though probably we should advertise that the missing value behavior is undefined). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12915045",
            "date": "2010-09-26T21:33:36+0000",
            "content": "If you pass null for the missing value then the bits are not loaded in the FieldCache right?\n\nPassing null as the missing value indicates that the Comparator should not even try looking for missing values.  Setting the missing value will turn on the 'CACHE_BITS' option\n\npublic SortField setMissingValue( Object v )\n  {\n    missingValue = v;\n    if( missingValue != null ) {\n      if( this.creator == null ) {\n        throw new IllegalArgumentException( \"Missing value only works for sort fields with a CachedArray\" );\n      }\n\n      // Set the flag to get bits \n      creator.setFlag( CachedArrayCreator.OPTION_CACHE_BITS );\n    }\n    return this;\n  }\n\n\n\nBut the Comparators only actually set the bit if the bits are in the field cache:\n\n    @Override\n    public void copy(int slot, int doc) {\n      values[slot] = ( checkMissing && cached.valid != null && !cached.valid.get(doc) )\n        ? missingValue : cached.values[doc];\n    }\n\n\n\nI will make a LUCENE jira issue for adding 'sort missing first/last' to SortField/XxxxComparator \u2013 and use this issue for the solr integration.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12915088",
            "date": "2010-09-27T01:56:46+0000",
            "content": "Here is an updated patch that includes everything from LUCENE-2671\n\nThis also introduces NumericFieldCacheSource in solr so that the ValueSources use the new EntryCreator API with flags set to generate the valid bits.\n\nI still need to get tests included for solr "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12915089",
            "date": "2010-09-27T01:59:25+0000",
            "content": "this is the Tri* getSortField code:\n\n  public SortField getSortField(SchemaField field, boolean top) {\n    int flags = CachedArrayCreator.CACHE_VALUES_AND_BITS;\n    Object missingValue = null;\n    boolean sortMissingLast  = on( SORT_MISSING_LAST,  properties );\n    boolean sortMissingFirst = on( SORT_MISSING_FIRST, properties );\n    \n    switch (type) {\n      case INTEGER:\n        if( sortMissingLast ) {\n          missingValue = Integer.MAX_VALUE;\n        }\n        else if( sortMissingFirst ) {\n          missingValue = Integer.MIN_VALUE;\n        }\n        return new SortField( new IntValuesCreator( field.getName(), \n            FieldCache.NUMERIC_UTILS_INT_PARSER, flags ), top).setMissingValue( missingValue );\n      \n      case FLOAT:\n        if( sortMissingLast ) {\n          missingValue = Float.MAX_VALUE;\n        }\n        else if( sortMissingFirst ) {\n          missingValue = Float.MIN_VALUE;\n        }\n        return new SortField( new FloatValuesCreator( field.getName(), \n            FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ), top).setMissingValue( missingValue );\n      \n      case DATE: // fallthrough\n      case LONG:\n        if( sortMissingLast ) {\n          missingValue = Long.MAX_VALUE;\n        }\n        else if( sortMissingFirst ) {\n          missingValue = Long.MIN_VALUE;\n        }\n        return new SortField( new LongValuesCreator( field.getName(), \n            FieldCache.NUMERIC_UTILS_LONG_PARSER, flags ), top).setMissingValue( missingValue );\n        \n      case DOUBLE:\n        if( sortMissingLast ) {\n          missingValue = Double.MAX_VALUE;\n        }\n        else if( sortMissingFirst ) {\n          missingValue = Double.MIN_VALUE;\n        }\n        return new SortField( new DoubleValuesCreator( field.getName(), \n            FieldCache.NUMERIC_UTILS_DOUBLE_PARSER, flags ), top).setMissingValue( missingValue );\n        \n      default:\n        throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Unknown type for trie field: \" + field.name);\n    }\n  }\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12915126",
            "date": "2010-09-27T05:28:17+0000",
            "content": "An updated patch with tests that almost works good.  \n\nThe tests for int and long fields work great, for float/double fields, it is not behaving as I would expect.  Sort desc does not put the missing fields at the bottom.\n\nI follow the same pattern that works for int/long:\n\n      case FLOAT:\n        if( sortMissingLast ) {\n          missingValue = top ? Float.MIN_VALUE : Float.MAX_VALUE;\n        }\n        else if( sortMissingFirst ) {\n          missingValue = top ? Float.MAX_VALUE : Float.MIN_VALUE;\n        }\n        return new SortField( new FloatValuesCreator( field.getName(), \n            FieldCache.NUMERIC_UTILS_FLOAT_PARSER, flags ), top).setMissingValue( missingValue );\n\n\n\n\nAny ideas?\n\n\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12915129",
            "date": "2010-09-27T05:42:57+0000",
            "content": "For floats you may not use MIN_VALUE and MAX_VALUE (which is defined different for float/doubles), its NEGATIVE_INFINITY and POSITIVE_INFINITY. Thats all  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12915132",
            "date": "2010-09-27T05:52:43+0000",
            "content": "Heh, yeah - Double.MIN_VALUE is only the smallest positive number... definitely deceiving. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12915284",
            "date": "2010-09-27T12:14:45+0000",
            "content": "Ahhh \u2013 well that fixes things!\n\nusing top NEGATIVE_INFINITY / POSITIVE_INFINITY makes all the tests pass.\n\nIf someone has some time, I think this is ready to go "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12915780",
            "date": "2010-09-28T15:16:03+0000",
            "content": "Anyone get a chance to look at this?  I'd like to commit it soon. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12915792",
            "date": "2010-09-28T15:46:13+0000",
            "content": "I have not closely looked into it (because the Solr sorting stuff is out of my scope), but I have one comment about floats and doubles:\nThe problem with the approach of setting infinity as replacement value is, that NaN values are still undefined and may be ordered before/after these infinity values. But I think the problem is minor.\nThe same problem applies if you have infinity itsself or for long/double min/max values as field value, then the sorting is also undefined (the not set values should go after/before all real infinities). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12915809",
            "date": "2010-09-28T16:18:28+0000",
            "content": "\nThe problem with the approach of setting infinity as replacement value is, that NaN values are still undefined and may be ordered before/after these infinity values. But I think the problem is minor.\nThe same problem applies if you have infinity itsself or for long/double min/max values as field value, then the sorting is also undefined (the not set values should go after/before all real infinities).\n\nwhat behavior would you expect when a values in NaN or +- infinity?   It seems OK to have that be undefined (but towards the end)\n\nAlternativly we could do something like:\n\n    @Override\n    public void copy(int slot, int doc) {\n      if( checkMissing ) {\n        if( cached.valid != null && cached.valid != null && !cached.valid.get(doc) ) {\n          values[slot] = missingValue;\n          return;\n        }\n        if( cached.values[doc] == Double.NaN ) {\n          cached.values[doc] = missingValue; //???  perhaps check sign and go 2+- that value?  2 because INFINITY may be +- 1\n        }\n        else if( cached.values[doc] == Double.POSITIVE_INFINITY ) {\n          cached.values[doc] = Double.POSITIVE_INFINITY - 1; //???  2 just \n        }\n        else if( cached.values[doc] == Double.NEGATIVE_INFINITY ) {\n          cached.values[doc] = Double.NEGATIVE_INFINITY + 1; //???\n        }\n      }\n      values[slot] = cached.values[doc];\n    }\n\n\nI have not checked that adding anything to infinity is different...  it is CS, not the real world afterall\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12915816",
            "date": "2010-09-28T16:28:14+0000",
            "content": "I don't expect adding/subtracting anything to infinity changes its value (at least the IEEE-754 specs say it should not change anything). I would keep this as it is, I wanted to just note, that the undefined value may collide with a real value. So if you have e.g. Integer.MAX_VALUE in the slot but your missingValue is also Integer.MAX_VALUE, then sorting at this place is strange. But this affects all data types and was like that since ever?\n\nThe problem is NaN (as it is with function queries where the score is NaN):\nNaN order is not undefined but behaves different than you expect (it means if you ever compare NaN with anything using <, >, == it will return always false). This will mix up the sorting, so defining it as missingValue is maybe a good idea. But as said before, you cannot compare with NaN, it will always return false, so use Double.isNan(cached.values[doc])  "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12915822",
            "date": "2010-09-28T16:34:05+0000",
            "content": "Maybe a good idea is to use http://download.oracle.com/javase/1.5.0/docs/api/java/lang/Double.html#compare(double, double) to compare the doubles in the comparator as it has a defined order for all values including NaN! "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12915826",
            "date": "2010-09-28T16:40:16+0000",
            "content": "Hmmm is that going to be a perf hit (Double.compare) for the common case (no NaNs)? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12915827",
            "date": "2010-09-28T16:42:02+0000",
            "content": "Hmmm is that going to be a perf hit (Double.compare) for the common case (no NaNs)? \n\nAgree.  We shouldn't need to suport NaNs  as a fieldcache value.  If we want that in the future, it can be a different comparator. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12915828",
            "date": "2010-09-28T16:48:17+0000",
            "content": "Is it worth the added complexity and potential performance hit to fudge the behavior for the edge case?\n\nAs long as things don't crash with NaN, I'm not sure if worrying about NaN vs Infinity sorting is worth it.\n\nI don't really care though.\n\nas it has a defined order \n\nI don't see anything in the javadocs \u2013 are you just saying it is defined because it is the same as what your JVM will do?  Conceptually I guess NaN is closer to zero then Infinity, but the other way round seems just as likely. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-12915831",
            "date": "2010-09-28T16:58:10+0000",
            "content": "NaN is always returning false when compared to anything. Its not JVM dependent it is mathematical correct and defined in IEEE-754 standard: http://en.wikipedia.org/wiki/NaN, http://forums.sun.com/thread.jspa?threadID=5419285\n\nThe coolest thing is how you test for NaN (from JDK source code):\n\n\npublic static public boolean isNaN(double v) {\n  return (v != v);\n}\n\n\n\nThis really returns only true for NaN, because as I said NaN always returns inequality in any comparison. The problem with that in Lucene's/Solr's sorting is the fact that the PriorityQueue uses lessThan which would return always false, in any case, so the PriorityQueue gets mixed up. You can see that, because NaN values are mixed between the other values, dependent on the order when they were inserted.\n\nSo to remove the method call above use:\n\n\nif (cached.values[doc] != cached.values[doc]) // test for NaN\n\n\n\nLooks pervers but is correct g\n\nNot related to that: One thing about your patches, some of them already committed: Can you please use the Lucene Coding Conventions (no extra space around if statements and the opening { at the end of a method declaration is in the same line). We have a Eclipse style file in wiki. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12916011",
            "date": "2010-09-29T04:46:21+0000",
            "content": "Committed to trunk in   #1002464, this should be back ported when LUCENE-2665 is ready for 3.x\n\nThis patch does not yet deprecate the Sortable* field types.    "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13001746",
            "date": "2011-03-02T22:59:17+0000",
            "content": "trunk does not pay attention to sortMissingLast/sortMissingFirst on the field, only the fieldType for trie fields.  I've got a patch in progress. "
        },
        {
            "author": "Teun Duynstee",
            "id": "comment-13132580",
            "date": "2011-10-21T10:25:50+0000",
            "content": "If I understood the comments at the Eurocon yesterday, this issue can be resolved. Correct? "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13132855",
            "date": "2011-10-21T17:34:40+0000",
            "content": "I think the backport is still missing! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13141210",
            "date": "2011-11-01T14:42:49+0000",
            "content": "Should we at least mark this as fixed in 4.0? Perhaps open another JIRA for back-porting? Whether or not this is in trunk is confusing as it stands, I took a quick look and see the code in trunk, so.....\n\nI'll be happy to do that if so. "
        },
        {
            "author": "Teun Duynstee",
            "id": "comment-13141264",
            "date": "2011-11-01T16:00:00+0000",
            "content": "Can't you just resolve and set the Fix Version to 4.0? Or is the Fix Version field not in use in the project? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13141292",
            "date": "2011-11-01T16:25:08+0000",
            "content": "Of course I can, but I'm not about to until someone who really understands the status of this patch weighs in... Yonik's comment from 02-Mar makes me nervous. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13141484",
            "date": "2011-11-01T19:32:47+0000",
            "content": "The whole story is more complicated:\n\nThe sortMissingLast/First part in Lucene is different between 3.x and trunk (4.0). The implementation in trunk is not good designed and is to be replaced by the 3.x version, which needs heavy reverting \n\nThe Lucene 3.x version supports sortmissinglast/first (since 3.4, using a new API), but this was not yet ported to Solr. We want to first fix trunk to use the better approach and will also revert the Solr implementation when we do this. After that we have a clean start and can do: LUCENE-3443 "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13141488",
            "date": "2011-11-01T19:37:06+0000",
            "content": "From a Solr user standpoint it's simple though:  sortMissingLast/First works fine on trunk, and is not yet implemented in 3.x (currently 3.4) "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13141597",
            "date": "2011-11-01T21:08:43+0000",
            "content": "OK, so I'll mark this as \"fixed 4.0\" and open up a new JIRA referring back to this and to SOLR-3433 that mentions both trunk and 3.5, right? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13145543",
            "date": "2011-11-07T15:07:19+0000",
            "content": "If nobody objects, I'll do what I last mentioned. Mark this as fixed in 4.0 and raise another JIRA for the cleanup in 3.x. I'd like to do this today if possible (just so I won't forget!).\n\nI see the comments are already taken out of the schema.xml file, so I think doing this would accurately reflect the current state of the code. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13145546",
            "date": "2011-11-07T15:13:42+0000",
            "content": "Go for it! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13145671",
            "date": "2011-11-07T18:20:14+0000",
            "content": "But NOT fixed in 3.x. See SOLR-2881 "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13149335",
            "date": "2011-11-13T19:44:39+0000",
            "content": "Added some tests for dates. "
        }
    ]
}