{
    "id": "LUCENE-5421",
    "title": "MorfologicFilter doesn't stem legitimate uppercase terms (surnames, proper nouns, etc.)",
    "details": {
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix",
        "components": [
            "modules/analysis"
        ],
        "affect_versions": "4.6.1",
        "status": "Resolved",
        "fix_versions": []
    },
    "description": "Morfologic filter search stems in input or lowercase format:\norg.apache.lucene.analysis.morfologik.MorfologikFilter.incrementToken()\n\nif (!keywordAttr.isKeyword() && (lookupSurfaceForm(termAtt) || lookupSurfaceForm(toLowercase(termAtt)))) {\n  [...]\n}\n\n\nIn this situation, if input token is sienkiewicza - it isn't stemmed\nbut: Sienkiewicza --> Sienkiewicz\nfor comparison:\npRoDuKtY --> produkt\n\nIt should stem also input token with capitalized first letter",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-13886434",
            "author": "Dawid Weiss",
            "content": "Yeah, do you care to provide a patch or a github pull request? It'd speed up the process. Include a test case for this as well, thanks. ",
            "date": "2014-01-30T09:15:59+0000"
        },
        {
            "id": "comment-13886492",
            "author": "Grzegorz Sobczyk",
            "content": "https://github.com/apache/lucene-solr/pull/25\nbut see: TestMorfologikAnalyzer:128\n\n\tI didn't find the reason why assertion aarona->aarona is present there\n\n\n\nOther thing: poznania (TestMorfologikAnalyzer:125) should return \"poznanie, pozna\u0107, Pozna\u0144\" but I don't know how to do this.\nIf this would be possible, then we could configure MorfologikFilter. ",
            "date": "2014-01-30T11:09:40+0000"
        },
        {
            "id": "comment-13903263",
            "author": "Dawid Weiss",
            "content": "Sorry for the delay. I looked at your patch. You see, the problem here is not code-based but dictionary-based. Morfologik dictionaries contain \"correct\" word forms, they are not directly suitable for spell checking, which you're trying to do here. The test case which you commented out is exactly about that, consider this:\n\n     assertAnalyzesTo(a, \"Aarona\",   new String[] \n{ \"Aaron\" }\n);\n     assertAnalyzesTo(a, \"aarona\",   new String[] \n{ \"aarona\" }\n);\n\nIn the first case, the dictionary indeed contains a word form \"Aarona\", which then gets stemmed to the root form \"Aaron\". Here's a dictionary excerpt:\n\nAarona\tAaron\tsubst:sg:acc:m1+subst:sg:gen:m1\n\nIn the second case, the word form \"aarona\" is not in the dictionary (because Aaron is a proper name and should be capitalized in Polish) so no entries are found in the dictionary. Because this component is a filter, it just returns the token as-is (\"aarona\") and leaves it in.\n\nHaving reconsidered this issue I think the filter should not be fixed as you described it (by checking for the first-letter uppercase form). \"poznania\" is a good example when this isn't the best idea \u2013 there is a clear grammatical difference between \"Poznania\" and \"poznania\" and this filter shouldn't blur this difference.\n\nYou have two choices:\n\n1) you can recompile the morfologik's FSA dictionary and lowercase (or otherwise normalize) all word forms; then the filter will find \"sienkiewicza\" and other capitalized words. This isn't as complicated as it seems, check out morfologik-stemming from github, build it, dump pl.dict data in raw format, edit and recompile the FSA again.\n\n2) you can write a filter which will try to correct mispelled words. The complexity of solutions here can vary from very simple unigram analysis (morfologik-stemming actually has a class called Speller which is an out-of-the-box help here) to context-aware analysis which is probably better and will yield more sensible corrections. ",
            "date": "2014-02-17T14:18:27+0000"
        },
        {
            "id": "comment-13903267",
            "author": "Dawid Weiss",
            "content": "Perhaps one more comment concerning \"pRoDuKtY --> produkt\". The lookup for \"convert to all lowercase\" form was added to help in scenarios where the input is uppercased or mixed-case (first word of a sentence, for example). If such a term is indeed in the dictionary (in a lowercased version) then we may pretty safely assume it's a common word and stem it. This reasoning doesn't really work for words which are in upper-case in the dictionary and it could lead to odd mistakes. ",
            "date": "2014-02-17T14:23:31+0000"
        },
        {
            "id": "comment-13910127",
            "author": "Grzegorz Sobczyk",
            "content": "There is workaround. Simply put this before MorfologicFilter:\n<filter class=\"solr.CapitalizationFilterFactory\" onlyFirstWord=\"false\"/> ",
            "date": "2014-02-24T09:16:59+0000"
        },
        {
            "id": "comment-13910129",
            "author": "Dawid Weiss",
            "content": "Good hint, thanks Grzegorz. ",
            "date": "2014-02-24T09:19:51+0000"
        }
    ]
}