{
    "id": "SOLR-8082",
    "title": "can't query against negative float or double values when indexed=\"false\" docValues=\"true\" multiValued=\"false\"",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5.1",
            "5.6",
            "6.0",
            "6.1",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Blocker"
    },
    "description": "Haven't dug into this yet, but something is evidently wrong in how the DocValues based queries get build for single valued float or double fields when negative numbers are involved.\n\nSteps to reproduce...\n\n\n$ bin/solr -e schemaless -noprompt\n...\n$ curl -X POST -H 'Content-type:application/json' --data-binary '{ \"add-field\":{ \"name\":\"f_dv_multi\", \"type\":\"tfloat\", \"stored\":\"true\", \"indexed\":\"false\", \"docValues\":\"true\", \"multiValued\":\"true\" }, \"add-field\":{ \"name\":\"f_dv_single\", \"type\":\"tfloat\", \"stored\":\"true\", \"indexed\":\"false\", \"docValues\":\"true\", \"multiValued\":\"false\" } }' http://localhost:8983/solr/gettingstarted/schema\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":84}}\n$ curl -X POST -H 'Content-type:application/json' --data-binary '[{\"id\":\"test\", \"f_dv_multi\":-4.3, \"f_dv_single\":-4.3}]' 'http://localhost:8983/solr/gettingstarted/update/json/docs?commit=true'\n{\"responseHeader\":{\"status\":0,\"QTime\":57}}\n$ curl 'http://localhost:8983/solr/gettingstarted/query?q=f_dv_multi:\"-4.3\"'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":5,\n    \"params\":{\n      \"q\":\"f_dv_multi:\\\"-4.3\\\"\"}},\n  \"response\":{\"numFound\":1,\"start\":0,\"docs\":[\n      {\n        \"id\":\"test\",\n        \"f_dv_multi\":[-4.3],\n        \"f_dv_single\":-4.3,\n        \"_version_\":1512962117004689408}]\n  }}\n$ curl 'http://localhost:8983/solr/gettingstarted/query?q=f_dv_single:\"-4.3\"'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":5,\n    \"params\":{\n      \"q\":\"f_dv_single:\\\"-4.3\\\"\"}},\n  \"response\":{\"numFound\":0,\"start\":0,\"docs\":[]\n  }}\n\n\n\nExplicit range queries (which is how numeric \"field\" queries are implemented under the cover) are equally problematic...\n\n\n$ curl 'http://localhost:8983/solr/gettingstarted/query?q=f_dv_multi:%5B-4.3+TO+-4.3%5D'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":0,\n    \"params\":{\n      \"q\":\"f_dv_multi:[-4.3 TO -4.3]\"}},\n  \"response\":{\"numFound\":1,\"start\":0,\"docs\":[\n      {\n        \"id\":\"test\",\n        \"f_dv_multi\":[-4.3],\n        \"f_dv_single\":-4.3,\n        \"_version_\":1512962117004689408}]\n  }}\n$ curl 'http://localhost:8983/solr/gettingstarted/query?q=f_dv_single:%5B-4.3+TO+-4.3%5D'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":0,\n    \"params\":{\n      \"q\":\"f_dv_single:[-4.3 TO -4.3]\"}},\n  \"response\":{\"numFound\":0,\"start\":0,\"docs\":[]\n  }}",
    "attachments": {
        "SOLR-8082.patch": "https://issues.apache.org/jira/secure/attachment/12761761/SOLR-8082.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-09-22T23:46:49+0000",
            "author": "Hoss Man",
            "content": "the attached patch demonstrates the breadth of the problems i've found with queries against negative values in both float and double based docvalues (only) fields \u2013 ie: queries in which DocValuesRangeQuery is used instead of the inverted index (via NumericRangeQuery)\n\nI'm still not really clear what the root bug / fix is, but best i can tell this is ultimately about a disconnect between how the DocValuesRangeQuery objects are built at query time (using NumericUtils.floatToSortableInt and NumericUtils.doubleToSortableLong) vs how the NumericDocValuesField objects are build at index time (using Float.floatToIntBits and Double.doubleToLongBits)\n\nMy bare bones understanding is that both places should be using NumericUtils.floatToSortableInt and NumericUtils.doubleToSortableLong \u2013 but (besides being a back compat break on how the values are written to disk) if that's the case then why does sorting work for negative float values today? (see DocValuesTest.testDocValuesSorting2, which \u2013 in addition to many faceting tests \u2013 broke when i experimented with using NumericUtils.floatToSortableInt and NumericUtils.doubleToSortableLong to build the NumericDocValuesField in TrieField.createFields)\n\nCan anyone explain to me:\n\n\twhen/why floatToIntBits & doubleToLongBits should be used instead of floatToSortableInt & doubleToSortableLong\n\thow to fix these tests so they pass and queries against negative float / double values will work?\n\n ",
            "id": "comment-14903674"
        },
        {
            "date": "2015-09-22T23:48:26+0000",
            "author": "Hoss Man",
            "content": "updated summary & description to capture new info (affects doubles, only seems to affect negative values) ",
            "id": "comment-14903676"
        },
        {
            "date": "2016-03-14T16:34:27+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Probably related to SOLR-8838. ",
            "id": "comment-15193588"
        },
        {
            "date": "2016-03-15T15:11:34+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Here's a summary of my understanding / observations:\n\n\tFloats and doubles need to be converted to longs before writing them to NumericDocValues.\n\tWe have two options, Double.doubleToLongBits() and NumericUtils.doubleToSortableLong(). For positive doubles, both these methods return the same long value, but different ones for negative doubles.\n\tCurrently, we use Double.doubleToLongBits() to write these doubles/floats. Hence, to use term query against such docValues, we should use the same method with the query value, but current code uses NumericUtils.doubleToSortableLong() during querying and hence term queries against negative values fail. Similarly, range queries also fail when min is negative.\n\tI tried changing initial writing logic to use NumericUtils.doubleToSortableLong(). With this change, both term queries and range queries work, but sorting fails (when there are negative values). That is counter intuitive, since the individual long values themselves are in sorted order. Since this is an intrusive change that breaks backcompat, I didn't investigate deeper to understand why this is happening.\n\tTo arrive at a least intrusive fix, I tried changing the range query logic to split out the queries into two distinct ranges (negatives and positives) using a boolean query. I had to do this since the Double.doubleToLongBits() values are not monotonically increasing (they are decreasing for Double.MIN_VALUE to 0, but increasing for 0 to Double.MAX_VALUE).\n\n\n\nAttached the patch for the last point, which I think is the least intrusive way to pull things together so that they work. When the range query crosses the 0 boundary, there are two dv range queries which is less efficient, but better than not working at all (which is the case today). The patch passes the tests, but it might benefit from some neater refactoring.\n\nHoss Man Can you please review? Do you think there's a cleaner way to do this? ",
            "id": "comment-15195456"
        },
        {
            "date": "2016-03-15T15:14:00+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "if that's the case then why does sorting work for negative float values today?\n\nIt is something even I was unable to figure out and surprises me, since the converted long values currently written to disk (as a result of Double.doubleToLongBits()) are not monotonic. ",
            "id": "comment-15195459"
        },
        {
            "date": "2016-03-16T15:09:19+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Tackling some boundary cases, added another test (testFloatRangeQuery). This is still WIP, I'm working on:\n\n\tA randomized test for ranges\n\tCleanup / refactor\n\tBetter handling and testing around inclusion operators\n\n\n\nThis approach looks clumsy, but might be the least intrusive way of getting this to work? Once done with this patch, I'll take a shot at evaluating, once again, as to possibly rewriting the logic for writing floats/doubles as longs into docValues. ",
            "id": "comment-15197467"
        },
        {
            "date": "2016-03-16T16:07:15+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updated the patch, refactored the fix and a test. Still WIP and the above TODO items are not here. ",
            "id": "comment-15197578"
        },
        {
            "date": "2016-03-17T12:59:41+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Updating the patch. This contains a randomized test, which I am currently beasting now.\nThis depends on a patch for a bug I found during testing this, LUCENE-7111.\n\nIf the beasting goes fine, I think this is a fix that behaves correctly. But, still not sure if this is the best fix to have, since there possibly exists another alternative (which I'll look into after this) to write the longs in sortable order itself. ",
            "id": "comment-15199455"
        },
        {
            "date": "2016-03-17T13:47:16+0000",
            "author": "Yonik Seeley",
            "content": "Building a boolean query is the slowest option of all (will look up all the values twice and has overhead)... coverting to a float/double would be faster (that should actually be a no-op... so it would be down to how fast the floating point comparisons are vs long comparisons).  If we did want to keep things in \"long\" space rather than converting, then perhaps just create our own version that does an additional comparison when needed.\n\nI was going to suggest that we could also just try the built-in range support in valuesource \nFunctionValues.getRangeScorer()... but I forgot to bring back the \"only match docs with a value\" patch from heliosearch. ",
            "id": "comment-15199538"
        },
        {
            "date": "2016-03-17T14:22:27+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Building a boolean query is the slowest option of all (will look up all the values twice and has overhead)... coverting to a float/double would be faster \n\nDo you mean that instead of using the DocValuesRangeQuery.newLongRange(), we write something on our own which converts the longs back to floats/doubles and then compares those floats/doubles?\n\nIf we did want to keep things in \"long\" space rather than converting, then perhaps just create our own version that does an additional comparison when needed.\n\nDo you think the NumericUtils.doubleToSortableLong() is a good choice for converting float/double to longs, instead of Double.doubleToLongBits() which is currently used? I think this would ensure that the range queries would just work out of the box without such handling of special cases. Also, is it okay to change the way we convert floats/doubles to longs in terms of backward compatibility? ",
            "id": "comment-15199598"
        },
        {
            "date": "2016-03-17T15:06:31+0000",
            "author": "Yonik Seeley",
            "content": "Do you mean that instead of using the DocValuesRangeQuery.newLongRange(), we write something on our own which converts the longs back to floats/doubles and then compares those floats/doubles?\n\nYeah, that's one way.\nBut maybe we should go ahead and fix ValueSourceRangeFilter to not match documents w/o a value in the field.  It's arguably a bug (and only existed historically because we didn't have info about what fields had a value for numerics, and didn't have exists()) and 6.0 is the perfect time to make the change.\n\nDo you think the NumericUtils.doubleToSortableLong() is a good choice for converting float/double to longs, instead of Double.doubleToLongBits() which is currently used?\n\nBoth have their advantages... while sortable longs might be convenient when operating in the \"long\" space, it would slow things down when converting back to a double.   ",
            "id": "comment-15199673"
        },
        {
            "date": "2016-03-17T17:22:10+0000",
            "author": "Hoss Man",
            "content": "Building a boolean query is the slowest option of all (will look up all the values twice and has overhead)\n\n\"A patch in jira ready to be committed is worth two hypothetical patches no one has contributed yet.\"\n\nAs things stand today, a query where either end point is less then 0  is completely broken \u2013 a \"slow\" boolean query that is correct sounds better to me then the broken behavior \u2013 even if it's just a short term gap for 6.0 and we have plans for a better solution down the road.  Particularly since (unless i'm missing something) any existing situation where the code works correctly today will continue to work correctly with the same performance after this patch (ie: purely positive ranges will continue to be implemented w/o a BQ using a purely positive range query.)\n\nBut maybe we should go ahead and fix ValueSourceRangeFilter to not match documents w/o a value in the field. It's arguably a bug\n\nThat seems like it should be broken out into a distinct $new_jira since it has larger implications/impacts.  (if we want to make this issue blocked by $new_jira then so be it, but they should still be distinct issues) ",
            "id": "comment-15199978"
        },
        {
            "date": "2016-03-17T19:45:56+0000",
            "author": "Yonik Seeley",
            "content": "a \"slow\" boolean query that is correct sounds better to me then the broken behavior\n\nHopefully no one is suggesting that we not fix this (somehow) for 6.0\nI was just using the opportunity to fix another bug that would also help with this one.\n\nThat seems like it should be broken out\n\nThat's what  SOLR-8867 is about. ",
            "id": "comment-15200232"
        },
        {
            "date": "2016-03-17T19:53:54+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Hopefully no one is suggesting that we not fix this (somehow) for 6.0\nI think seems this like a bad enough bug for us to fix right away, also given our latest push for using all fields with docvalues and also given the push for having some of them unstored. With range queries completely broken, I think we should push for it for 6.0, or a 6.0.1 if not ready right away. I think it is safe to do so, as long as a targeted fix doesn't make things worse than what it already is. What do you think? Yonik Seeley Hoss Man ",
            "id": "comment-15200248"
        },
        {
            "date": "2016-03-18T01:48:44+0000",
            "author": "Yonik Seeley",
            "content": "Here's an updated patch that uses the same method as \n{!frange}\n for a range query.  I took the conservative approach and just replaced the boolean query in the previous patch, leaving the previous non-negative ranges untouched.\n\nThanks to the excellent tests in the previous patches,  it helped uncover a limitation in ValueSourceRangeFilter that prevented including infinite endpoints.\n\nI had to make one change to the tests: I removed -0 as a special value in testFloatAndDoubleRangeQueryRandom.  Since -0 == +0, any range including one should include the other.  I don't think we should support or guarantee behavior of \"different zeros\" in any case - way to many potential bugs, and it limits us from an implementation standpoint (different bit patterns for equivalent values). ",
            "id": "comment-15200800"
        },
        {
            "date": "2016-03-18T14:05:59+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Thanks Yonik, the patch looks good. The test is passing for me.\nDo you think we should rely on FunctionRangeQuery for the entire number line, or should we just use this for the negative range? To me, both looked similar in terms of performance. ",
            "id": "comment-15201502"
        },
        {
            "date": "2016-03-18T14:12:10+0000",
            "author": "Yonik Seeley",
            "content": "Do you think we should rely on FunctionRangeQuery for the entire number line\n\nPerhaps eventually?  I was trying to be conservative and not create any performance regressions for the stuff that does work.\nI don't have time for performance tests right now (and I know from looking that the frange stuff can be sped up as well in a lot of places... we no longer need to wrap a filter, exists() looks slow in many function value implementations, etc.)  May be better to tackle that stuff after 6.0 ",
            "id": "comment-15201515"
        },
        {
            "date": "2016-03-18T14:19:46+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Indeed! +1 to fixing the issue for 6.0 with the current patch (except for the stale comment If min is negative (or -0d) and max is positive (or +0d), then issue two range queries, which was left over an older patch). ",
            "id": "comment-15201529"
        },
        {
            "date": "2016-03-19T19:17:13+0000",
            "author": "Steve Rowe",
            "content": "Patch with a few minor cleanups:\n\n\n\tIn TrieField.getRangeQueryForFloatDoubleDocValues():\n\t\n\t\tMade constants for invariants (bits for infinities and zeros), in case the compiler isn't smart enough to do that.\n\t\tAdded parens in a couple of expressions to improve legibility.\n\t\n\t\n\tIn DocValuesTest:\n\t\n\t\tIn testFloatAndDoubleRangeQueryRandom():\n\t\t\n\t\t\tConverted several fieldName[i].equals(\"floatdv\") ? ... : ... trinary operators to use (float,double) tuples (like the other values in this test), using lambdas.\n\t\t\n\t\t\n\t\tIn testFloatAndDoubleRangeQuery():\n\t\t\n\t\t\tnegativeInfinity[1] fixed: Float->Double\n\t\t\n\t\t\n\t\n\t\n\t+1 to fixing the issue for 6.0 with the current patch (except for the stale comment If min is negative (or -0d) and max is positive (or +0d), then issue two range queries, which was left over an older patch).\n\t\n\t\tThe patch fixes this too: s/two range queries/FunctionRangeQuery/\n\t\n\t\n\n\n\nI'll commit tomorrow if no objections and nobody else gets to it first. ",
            "id": "comment-15202927"
        },
        {
            "date": "2016-03-20T04:42:07+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "+1, LGTM. ",
            "id": "comment-15203103"
        },
        {
            "date": "2016-03-20T20:56:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 49d5ec02a2015ddd80059d46788b723b25cb5491 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=49d5ec0 ]\n\nSOLR-8082: Can't query against negative float or double values when indexed='false' docValues='true' multiValued='false' ",
            "id": "comment-15203521"
        },
        {
            "date": "2016-03-20T20:57:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 2668ff5abb16e867f9f770d1da65457161b52cda in lucene-solr's branch refs/heads/branch_6x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2668ff5 ]\n\nSOLR-8082: Can't query against negative float or double values when indexed='false' docValues='true' multiValued='false' ",
            "id": "comment-15203523"
        },
        {
            "date": "2016-03-20T20:57:44+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c3d0276b2f50ca6c1b8dd1298fc2e214c4020dbf in lucene-solr's branch refs/heads/branch_6_0 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c3d0276 ]\n\nSOLR-8082: Can't query against negative float or double values when indexed='false' docValues='true' multiValued='false' ",
            "id": "comment-15203525"
        },
        {
            "date": "2016-03-20T23:09:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b2a4003d4c91d2e7e8f46b546bf1ac988b95ad3f in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b2a4003 ]\n\nSOLR-8082: Fix forbidden APIs ",
            "id": "comment-15203561"
        },
        {
            "date": "2016-03-20T23:10:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1d98753e2e3b4a30b799c4a15dcbea25c279979e in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1d98753 ]\n\nSOLR-8082: Fix forbidden APIs ",
            "id": "comment-15203562"
        },
        {
            "date": "2016-03-20T23:11:21+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 8c0271cbb8ff82dd3c218bcbad5834905e489273 in lucene-solr's branch refs/heads/branch_6_0 from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8c0271c ]\n\nSOLR-8082: Fix forbidden APIs ",
            "id": "comment-15203563"
        },
        {
            "date": "2016-04-25T16:36:00+0000",
            "author": "Anshum Gupta",
            "content": "Is this something that should make it's way to 5x too? Yonik Seeley, Steve Rowe, Ishan Chattopadhyaya, and others who were involved here ? ",
            "id": "comment-15256553"
        },
        {
            "date": "2016-04-25T18:40:24+0000",
            "author": "Steve Rowe",
            "content": "Yes Anshum Gupta, I think it would make sense for 5x too. ",
            "id": "comment-15256763"
        },
        {
            "date": "2016-04-25T19:34:53+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Yes, Anshum. I think this should be backported to 5x, and also released as part of 5.5.1. ",
            "id": "comment-15256871"
        },
        {
            "date": "2016-04-27T18:45:20+0000",
            "author": "Steve Rowe",
            "content": "Reopening to backport to branch_5x and branch_5_5.  ",
            "id": "comment-15260729"
        },
        {
            "date": "2016-04-27T23:28:28+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 79636a73fc1543fa69bdc5081f3fb20e108fce75 in lucene-solr's branch refs/heads/branch_5x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=79636a7 ]\n\nSOLR-8082: Can't query against negative float or double values when indexed='false' docValues='true' multiValued='false' ",
            "id": "comment-15261186"
        },
        {
            "date": "2016-04-27T23:53:18+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f0f9081e345030dd8946fb0141b4315c193a88ce in lucene-solr's branch refs/heads/branch_5_5 from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f0f9081 ]\n\nSOLR-8082: Can't query against negative float or double values when indexed='false' docValues='true' multiValued='false' ",
            "id": "comment-15261233"
        },
        {
            "date": "2016-04-27T23:54:08+0000",
            "author": "Steve Rowe",
            "content": "In backporting to branch_5x I had to convert some lambdas to functors (for Java7), and was all ready to push, but when I pulled and got Yonik\u2019s SOLR-8886 changes, there were conflicts, and attempts at merging brought in a shitload of extraneous crap, so I changed strategies: I applied the commit diffs from the two master commits on this issue with patch and fixed up the rejects manually. ",
            "id": "comment-15261235"
        },
        {
            "date": "2016-05-09T22:15:36+0000",
            "author": "Hoss Man",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 ",
            "id": "comment-15277177"
        }
    ]
}