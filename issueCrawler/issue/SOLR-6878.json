{
    "id": "SOLR-6878",
    "title": "solr.ManagedSynonymFilterFactory all-to-all synonym switch (aka. expand)",
    "details": {
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "affect_versions": "4.10.2",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "Hi,\n\nAfter switching from SynonymFilterFactory to ManagedSynonymFilterFactory I have found out that there is no way to set an all-to-all synonyms relation. Basically (judgind from google search) there is a need for \"expand\" functionality switch (known from SynonymFilterFactory) which will treat all synonyms with its keyword as equal.\n\nFor example: if we define a \"car\":[\"wagen\",\"ride\"] relation it would translate a query that includes one of the synonyms or keyword to \"car or wagen or ride\" independently of which word was used from those three.",
    "attachments": {
        "SOLR-6878.patch": "https://issues.apache.org/jira/secure/attachment/12700080/SOLR-6878.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-02-22T06:53:46+0000",
            "author": "Vitaliy Zhovtyuk",
            "content": "Added support for expand parameter and tests for both cases. ",
            "id": "comment-14332061"
        },
        {
            "date": "2015-04-17T22:59:43+0000",
            "author": "Timothy Potter",
            "content": "Thanks for the patch Vitaliy, I'll get this into 5.2 ",
            "id": "comment-14500859"
        },
        {
            "date": "2015-05-01T17:25:19+0000",
            "author": "Timothy Potter",
            "content": "I started going through this patch and I have some questions about how to support the \"equivalent\" synonyms feature for managed synonyms.\n\nNOTE: I'm using the term \"equivalent\" synonyms based on the doc here:\nhttps://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#solr.SynonymFilterFactory\n\nSpecifically, here are a couple of issues I see with supporting equivalent synonyms lists at the managed API level:\n\n1) The default value for expand is true (in the patch), but what if the user changes it to false after already having added equivalent synonym lists? Or vice-versa. What do we do about existing equivalent mappings? We could store the equivalent lists in a separate data structure and then apply the correct behavior depending on the expand flag when the managed data is \"viewed\", i.e. either a GET request from the API or when updating the data used to initialize the underlying SynonymMap. This is similar to what we do with ignoreCase, however the ignoreCase was easily handled but I think allowing expand to be changed by the API is much more complicated.\n\nOf course we could punt on this issue altogether and just make the expand flag immutable, i.e. you can set it initially to true or false, but cannot change it with the API. If we make it immutable, then we can apply the mapping on update and not have to maintain any additional data structures to remember the raw state of equiv lists.\n\n2) Let's say we allow users to send in equivalent synonym lists to the API, such as:\n\n\ncurl -v -X PUT \\\n  -H 'Content-type:application/json' \\\n  --data-binary '[\"funny\",\"entertaining\",\"whimsical\",\"jocular\"]' \\\n  'http://localhost:8983/solr/techproducts/schema/analysis/synonyms/english'\n\n\n\nIf expand is true, then you end up with the following mappings (pardon the Java code syntax as I didn't want to clean that up for this example):\n\n    assertJQ(endpoint + \"/funny\",\n        \"/funny==['entertaining','jocular','whimiscal']\");\n    assertJQ(endpoint + \"/entertaining\",\n        \"/entertaining==['funny','jocular','whimiscal']\");\n    assertJQ(endpoint + \"/jocular\",\n        \"/jocular==['entertaining','funny','whimiscal']\");\n    assertJQ(endpoint + \"/whimiscal\",\n        \"/whimiscal==['entertaining','funny','jocular']\");\n\n\n\nWhat should the API do if the user then decides to update the specific mappings for \"funny\" by sending in a request such as:\n\n\ncurl -v -X PUT \\\n  -H 'Content-type:application/json' \\\n  --data-binary '{\"funny\":[\"hilarious\"]}' \\\n  'http://localhost:8983/solr/techproducts/schema/analysis/synonyms/english'\n\n\n\nDoes the API treat explicit mappings as having precedence over equivalent lists? Or does it fail with some weird error most users won't understand? Seems to get complicated pretty fast ...\n\nI didn't go too far down the path of implementing this so there are probably more questions that will come up. To reiterate my original design assumption for managed synonyms, the API was not intended for humans to interact with directly, rather there should be some sort of UI layer on top of this API that translates synonym mappings into low-level API calls. For me, it's much more clear to send in explicit mappings for each synonym than it is to send some flat list and then interpret that list differently based on some flag.\n\nThe only advantage I can see is if the synonym list is huge, then expanding that out in the request makes the request larger. Other than that are there other use cases that require this expand functionality that cannot be achieved with the current implementation? If so, we need to decide if expand should be immutable and what the API should do if an explicit mapping is received for a term that is already used in an equivalent synonym list. Tomasz Sulkowski your thoughts on this? ",
            "id": "comment-14523482"
        },
        {
            "date": "2015-05-01T23:28:37+0000",
            "author": "Hoss Man",
            "content": "the \"expand\" option in the original SynonymFilterFactory was/is really just about allowing brevity for symetric synonyms in the data file \u2013 the best approach for the API is to tackle the same problem.\n\nInstead of thinking about \"expand\" as a stateful option in ManagedSynonymFilterFactory (or worse, an immutabe stateful option), i would suggest that instead it should just be a (transient) property of the request to add to / create the synonyms mappings \u2013 one that doesn't even need to be explicit, since the list syntax already makes it clear.\n\ntoday, if someone sends a map of \"KEY => LIST-OF(VALUES)\" to the API, we interpret that as \"for each KEY, for each VALUE in LIST-OF(VALUES), add a synonym mapping of KEY=>VALUE\"  and later if the user asks to GET mappings or delete mappings they do so by KEY.\n\nwhy not let the new \"expand\" feature just be syntactic sugar on adding symetric sets of KEY=>VALUE mappings via lists of lists?\n\nif a user is creating or adding to a synonym mapping with a \"LIST-OF(LIST-OF(VALUES))\" then let the logic be: \"for each LIST-OF(VALUES) in the outer LIST, loop over the inner LIST and add a mapping from every VALUE => ever other VALUE in the same inner LIST\"\n\nit should be purely syntactic sugar \u2013 GET requests should make it clear how the data is internally modeled.\n\nWhat should the API do if the user then decides to update the specific mappings for \"funny\" by sending in a request such as ...\n\nwe update that exact mapping, and no other mappings are changed \u2013 update/delete requests should operate on individual keys, regardless of what type of request added those keys.\n\n\n\nThe (more complex) alternative is to create a much more general abstraction of \"synonym dictionary entries\" where each entry is either a \"one way mapping\" or a \"multi directional mapping\" ... so that we internally track & remember that the user gave us some set of one way mappings like {'mad': ['angry']} and also gave us a set of multi directional mappings as lists like ['funny','jocular','whimiscal'] and support some new syntax for saying \"i want to edit the list i previously gave you which contains 'jocular' such that it no longer contains 'whimiscal' but now contains 'happy'\" and also have sanity checks in place to prevent people from trying to mix the two.\n\nbut i think (as you alluded to above) that way leads to madness. ",
            "id": "comment-14524285"
        },
        {
            "date": "2015-05-01T23:34:38+0000",
            "author": "Timothy Potter",
            "content": "why not let the new \"expand\" feature just be syntactic sugar on adding symetric sets of KEY=>VALUE mappings via lists of lists?\n\nGood idea! I'll start down that path as it seems pretty straight-forward to implement w/o all the state management issues as you mentioned. Thanks Hoss. ",
            "id": "comment-14524298"
        },
        {
            "date": "2015-05-04T15:43:40+0000",
            "author": "Timothy Potter",
            "content": "Here is an updated patch that implements the idea Hossman laid out in his comment. Basically, if the client sends in a list instead of a map, the expand=true logic is applied as the time of update, i.e. this is syntactic sugar for building up the mappings from a list of symmetric synonyms.\n\nThere's no need to support a list for expand=false because that is simply a mapping of all the terms to the last term in the list, which is already supported by the API. Thus, expand=true is implied when the update request contains a list and not a map. ",
            "id": "comment-14526765"
        },
        {
            "date": "2015-05-06T05:18:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1677923 from Timothy Potter in branch 'dev/trunk'\n[ https://svn.apache.org/r1677923 ]\n\nSOLR-6878: support adding symmetric synonym lists using the managed synonym API ",
            "id": "comment-14529942"
        },
        {
            "date": "2015-05-06T05:31:01+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1677924 from Timothy Potter in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1677924 ]\n\nSOLR-6878: support adding symmetric synonym lists using the managed synonym API ",
            "id": "comment-14529959"
        },
        {
            "date": "2015-06-15T21:43:25+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close for 5.2.0. ",
            "id": "comment-14586849"
        }
    ]
}