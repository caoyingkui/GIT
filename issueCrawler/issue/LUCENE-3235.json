{
    "id": "LUCENE-3235",
    "title": "TestDoubleBarrelLRUCache hangs under Java 1.5, 3.x and trunk, likely JVM bug",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "3.0,                                            3.1,                                            3.2,                                            3.3,                                            3.4",
        "resolution": "Unresolved",
        "status": "Reopened"
    },
    "description": "Not sure what's going on yet... but under Java 1.6 it seems not to hang bug under Java 1.5 hangs fairly easily, on Linux.  Java is 1.5.0_22.\n\nI suspect this is relevant: http://stackoverflow.com/questions/3292577/is-it-possible-for-concurrenthashmap-to-deadlock which refers to this JVM bug http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6865591 which then refers to this one http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6822370\n\nIt looks like that last bug was fixed in Java 1.6 but not 1.5.",
    "attachments": {
        "LUCENE-3235.patch": "https://issues.apache.org/jira/secure/attachment/12503602/LUCENE-3235.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-23T19:57:39+0000",
            "content": "+1 to drop java 5 ",
            "author": "Robert Muir",
            "id": "comment-13054066"
        },
        {
            "date": "2011-06-23T20:01:20+0000",
            "content": "LOL, no comment. ",
            "author": "Uwe Schindler",
            "id": "comment-13054067"
        },
        {
            "date": "2011-06-23T20:05:21+0000",
            "content": "i ran the test with the same version as mike (1.5.0_22) in two ways on windows:\n\n\t-Dtests.iter=100\n\tin a loop from a script, 100 times with its own ant run.\n\n\n\ni can't reproduce it on windows.\n\nin my eyes, there isn't even an argument about whether or not we should support java5: its not possible, if bugs are not getting fixed. ",
            "author": "Robert Muir",
            "id": "comment-13054070"
        },
        {
            "date": "2011-06-23T20:06:07+0000",
            "content": "Still hangs if I run -client; but it looks like -Xint prevents the hang (235 iterations so far on beast).\n\n3.2 also hangs. ",
            "author": "Michael McCandless",
            "id": "comment-13054071"
        },
        {
            "date": "2011-06-24T10:11:57+0000",
            "content": "Mike, i installed 1.5.0_22 (amd64) on my linux machine, and i can't reproduce there either (i ran like 500 iterations).\n\nMaybe my hardware isn't concurrent enough? or maybe you should un-overclock?  ",
            "author": "Robert Muir",
            "id": "comment-13054336"
        },
        {
            "date": "2011-06-24T10:37:32+0000",
            "content": "VERY interesting!  Is anyone able to repro this hang besides me...? ",
            "author": "Michael McCandless",
            "id": "comment-13054349"
        },
        {
            "date": "2011-06-24T10:43:29+0000",
            "content": "I don't think you can force -client if it's a 64 bit release and you have tons of memory, can you? You can check by running java -client -version \u2013 this is what it tells me, for example:\n\ndweiss@dweiss-linux:~/work/lucene/lucene-trunk$ java -client -version\njava version \"1.6.0_16\"\nJava(TM) SE Runtime Environment (build 1.6.0_16-b01)\nJava HotSpot(TM) 64-Bit Server VM (build 14.2-b01, mixed mode)\n\n\n\nCan you do a remote stack of all the VM (or run it from the console and send it a signal to dump all threads)? ",
            "author": "Dawid Weiss",
            "id": "comment-13054353"
        },
        {
            "date": "2011-06-24T10:56:58+0000",
            "content": "Yes the stack looks just like the stack overflow link I posted \u2013 several threads stuck in sun.misc.Unsafe.park \n\njava -Xint definitely does not hang... ran for like 4200 iterations. ",
            "author": "Michael McCandless",
            "id": "comment-13054362"
        },
        {
            "date": "2011-06-24T10:57:28+0000",
            "content": "Indeed java -client -version shows it's still using server VM \u2013 you're right! ",
            "author": "Michael McCandless",
            "id": "comment-13054363"
        },
        {
            "date": "2011-06-24T11:01:22+0000",
            "content": "I'm same as Robert: +1 to drop 1.5... ",
            "author": "Dawid Weiss",
            "id": "comment-13054366"
        },
        {
            "date": "2011-06-24T13:14:09+0000",
            "content": "+1 to drop 1.5...\n\n+1. ",
            "author": "Mark Miller",
            "id": "comment-13054433"
        },
        {
            "date": "2011-11-14T10:53:44+0000",
            "content": "we moved to 1.6 on trunk seems we can't do much about it on 3.x - folks should run their stuff on 1.6 jvms or newer ",
            "author": "Simon Willnauer",
            "id": "comment-13149556"
        },
        {
            "date": "2011-11-14T10:58:42+0000",
            "content": "wait, this statement makes no sense.\n\nif 1.5 is no longer supported, then 1.5 should no longer be supported, and we should be\nfree to use 1.6 code everywhere. ",
            "author": "Robert Muir",
            "id": "comment-13149562"
        },
        {
            "date": "2011-11-14T11:01:37+0000",
            "content": "I agree with Robert. This issue is still existent in 3.x as we officially support Java 5. ",
            "author": "Uwe Schindler",
            "id": "comment-13149565"
        },
        {
            "date": "2011-11-14T11:18:15+0000",
            "content": "well then we should fix it - I will mark it as 3.5 ",
            "author": "Simon Willnauer",
            "id": "comment-13149577"
        },
        {
            "date": "2011-11-14T11:33:05+0000",
            "content": "An easy fix would be to use Collections.synchronizedMap(new HashMap()) in the ctor to initializer cache1 and cache2 (if Java 5 is detected)? If people are using Java 5 they get not-the best-performance. ",
            "author": "Uwe Schindler",
            "id": "comment-13149581"
        },
        {
            "date": "2011-11-14T11:40:10+0000",
            "content": "I like Uwe's idea: not-the-best-performance is far preferable to a hang/deadlock!!!!! ",
            "author": "Robert Muir",
            "id": "comment-13149584"
        },
        {
            "date": "2011-11-14T11:44:11+0000",
            "content": "I am currently preparing a patch. ",
            "author": "Uwe Schindler",
            "id": "comment-13149585"
        },
        {
            "date": "2011-11-14T12:01:40+0000",
            "content": "Patch.\n\nWe should forward port the deprecation/removal of useless Constants. ",
            "author": "Uwe Schindler",
            "id": "comment-13149592"
        },
        {
            "date": "2011-11-14T14:07:53+0000",
            "content": "An easy fix would be to use Collections.synchronizedMap(new HashMap()) in the ctor to initializer cache1 and cache2 (if Java 5 is detected)? If people are using Java 5 they get not-the best-performance.\n\nI like that too... ",
            "author": "Simon Willnauer",
            "id": "comment-13149631"
        },
        {
            "date": "2011-11-14T15:15:47+0000",
            "content": "Updated patch after LUCENE-3574 was committed. I also added a System.out.println to the test (VERBOSE only). ",
            "author": "Uwe Schindler",
            "id": "comment-13149672"
        },
        {
            "date": "2011-11-14T15:49:43+0000",
            "content": "I wait until tomorrow before I commit this \"safe-but-slow\" fix. ",
            "author": "Uwe Schindler",
            "id": "comment-13149701"
        },
        {
            "date": "2011-11-14T16:35:48+0000",
            "content": "+1 for the safe-but-slow Java 5 only workaround.... ",
            "author": "Michael McCandless",
            "id": "comment-13149728"
        },
        {
            "date": "2011-11-14T20:58:53+0000",
            "content": "\n+0\n\nif anyone else suggested that we should add a \"slow hack\" to work around a Sun JRE bug i would argue that we were being unfair to people using other JRE (ie: does IBM's JRE have this bug? \u2013 do IBM java 1.5 users deserve slower performance because Sun's JRE has a bug?) but since rmuir is the biggest proponent I know of not assuming everyone on the planet uses Sun JREs, and he's signed off on this, I'll defer. ",
            "author": "Hoss Man",
            "id": "comment-13149906"
        },
        {
            "date": "2011-11-14T21:06:39+0000",
            "content": "We are using ConcurrentHashMap also at other places, should we replace all of them or where is the bug that this happens only here?\n\nIt also appears to happen on Mike's machine, so maybe its hardware-related (Solaris?) as the Sun bugreport seems to tell us.\n\nI am also +0 to apply the patch. I just showed one possibility how to fix this. ",
            "author": "Uwe Schindler",
            "id": "comment-13149919"
        },
        {
            "date": "2011-11-14T21:10:50+0000",
            "content": "Hoss you are right: we should also check Constants.SUN ?\n\notherwise lets not do the hack...\n\nBut i'm for the change because there is nothing slower than a hang/deadlock... ",
            "author": "Robert Muir",
            "id": "comment-13149921"
        },
        {
            "date": "2011-11-14T21:29:03+0000",
            "content": "...and Solaris? The JVM BUG seems to only affect Solaris (according to the sun reports). ",
            "author": "Uwe Schindler",
            "id": "comment-13149941"
        },
        {
            "date": "2011-11-14T21:35:11+0000",
            "content": "and intel cpu ",
            "author": "Robert Muir",
            "id": "comment-13149954"
        },
        {
            "date": "2011-11-14T21:50:17+0000",
            "content": "I modified the patch, the thing is that Mike was seeing this on Linux I think too... ",
            "author": "Robert Muir",
            "id": "comment-13149967"
        },
        {
            "date": "2011-11-14T22:02:11+0000",
            "content": "here is a very detailed writeup for this:\nhttp://blogs.oracle.com/dave/entry/a_race_in_locksupport_park\n\nsome interesting facts:\n\n\tThe problem would only manifest when we were using the -UseMembar optimization that lets us remove fences from certain hot thread state transitions paths that need to coordinate safepoints between mutator threads and the JVM. This feature is enabled by default, but we can turn it off with the -XX:+UseMembar switch, which causes the JVM to emit normal fence instructions in the state transitions paths.\n\tThe bug is a \"day-one\" bug and present in all versions of HotSpot.\n\tParker::park() and unpark() reside in os_linux.cpp, os_solaris.cpp and os_windows.cpp for Linux, Solaris and Windows, respectively.\n\tThe built-in synchronized implementation uses a different park mechanism (PlatformPark: whereas the java.util.concurrent infrastructure uses Parker::. Only Parker:: is vulnerable.\n\tThe bug will not manifest on uniprocessors or environments where threads are otherwise constrained to just a single processor.\n\n\n\nI think the only reasonable fix for this is to recommend people to use -XX:+UseMembar if they are running on a vulnerable JVM\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13149979"
        },
        {
            "date": "2011-11-14T22:24:34+0000",
            "content": "That blog is as cool as the generics policeman ones... \n\nThanks Simon, I think we should list this bug and its workaround in the wiki page and close this report.\n\nMike can you try -XX:+UseMembar ?\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-13150003"
        },
        {
            "date": "2011-11-15T10:30:47+0000",
            "content": "Thanks Simon, I think we should list this bug and its workaround in the wiki page and close this report.\n+1 this is not our problem. if we go and fix all java.util.concurrent uses in solr & lucene we gonna end up in a big mess. According to the oracle blog this is also in 1.6 jvms and you will be vulnderable if you use any CHM like classes in your own code...  ",
            "author": "Simon Willnauer",
            "id": "comment-13150355"
        },
        {
            "date": "2011-11-15T10:41:45+0000",
            "content": "I updated the wiki... ",
            "author": "Simon Willnauer",
            "id": "comment-13150363"
        },
        {
            "date": "2011-11-15T13:34:37+0000",
            "content": "That's a nice blog post!  What a scary platform-specific JVM bug...\n\nI still hit hit this hang reasonably often when running 3.x tests.  It's always the DBLRU cache, so far anyway.\n\nBecause this is our most intense use of a CHM... I still think the workaround (scoped down to 1.5, Sun JVM, little endian arch) makes sense?  I agree it won't fully work around the JVM bug, since in theory other uses of java.util.concurrent.* could hit it, but it can prevent the most common occurrence?  The patch seems minimal and worth it... a hang is a truly awful. ",
            "author": "Michael McCandless",
            "id": "comment-13150484"
        },
        {
            "date": "2011-11-15T15:13:24+0000",
            "content": "I still think the workaround (scoped down to 1.5, Sun JVM, little endian arch) makes sense?\n\n+1 Doesn't hurt other JVMs, improves things on the Sun JVM (something that hangs a lot and then does not hang is a big improvement in my book), and putting a workaround command to use in the wiki just seems a whole lot less user friendly to me. It doesn't mean we have to try and address every use of java.util.concurrent to work around this specific issue, does it? ",
            "author": "Mark Miller",
            "id": "comment-13150545"
        },
        {
            "date": "2011-11-15T15:39:06+0000",
            "content": "This testcase fails, but we are using concurrent also in ParallelMultiSearcher (die, die, die) and other places (even the indexer was partly upgraded to use ConcurrentLock). In my opinion we should not change our code to work around that issue. Just because one test case hangs its not guaranteed that other uses will work correctly. It brings a false security and slows down VMs that work correctly. And it only affects very modern processors.\n\nIf we would have a logging framework in Lucene (maybe Solr could do this): It could parse the args of Java (from system property) and look for -XX:+UseMembar, if its Java 1.5 it should print a warning to Solr/Lucene log file. ",
            "author": "Uwe Schindler",
            "id": "comment-13150561"
        },
        {
            "date": "2011-11-15T21:03:04+0000",
            "content": "\nIn my opinion we should not change our code to work around that issue.\n\nIn general, I think we should change our code to work around awful JVM\nbugs, as long as 1) it's not so much effort for us to to do so (and as\nalways a volunteer steps up to the task), and 2) the change has\nnegligible cost to \"lucky\" users (who use a JVM / the right flags that\nwould not have hit the JVM bug).\n\nI think the last patch fits these criteria, since it's a tiny change\nand it scopes the workaround?\n\nWe've done this many times in the past; if the cost to \"lucky\" users\nis negligible and the benefit to \"unlucky\" users (unknowingly using\nthe affected JVMs) is immense (not hitting horrific bug), I think the\ntradeoff is worthwhile?  Otherwise users will conclude Lucene (or\nwhatever software is embedding it) is buggy.\n\nThis testcase fails, but we are using concurrent also in ParallelMultiSearcher (die, die, die) and other places (even the indexer was partly upgraded to use ConcurrentLock).\n\nRight, we use concurrent* elsewhere, but terms dict is the big\nuser... very few apps actually use PMS.\n\nIt brings a false security and slows down VMs that work correctly.\n\nWell, we already have \"false security\" that Lucene won't hang on any\nJVM... we don't claim this patch will fully work around the bug, but\nat least it should reduce it.\n\nHow are we slowing down other VMs...?  We scope the workaround?\n\nI'm not saying we should go crazy here, making a big patch to avoid\nconcurrent* everywhere, but the current patch is minimal, addresses\nthe big usage of concurrent* in 3.x, is scoped down well.\n\nIt will avoid hangs for some number unlucky users out there... so why\nnot commit it? ",
            "author": "Michael McCandless",
            "id": "comment-13150775"
        },
        {
            "date": "2011-11-15T21:56:14+0000",
            "content": "\nHow are we slowing down other VMs...? We scope the workaround?\n\nI agree, according to the bug report it seems all 1.5's are affected and some 1.6's?\nDoesn't seem like solaris is related either, especially since Mike hit it on linux\n\nSo the current patch is actually way under-scoped.\n\nSure, some 1.6's are affected, and if we want it to be even better,\nwe should likely improve Constants a little bit to make the minor\nversion more easily accessible, from the bug report it seems we\nshould at least consider doing something for < 1.6.0u21 ? And we should\nremove the 'Solaris' check, but keep it little-endian because the bug\nreport mentions its way more likely to happen on those cpus. ",
            "author": "Robert Muir",
            "id": "comment-13150813"
        },
        {
            "date": "2011-11-15T23:10:16+0000",
            "content": "Yes, also 1.6.0_17 is affected. As always, 1.6.0_18 is the last and only good JVM \n\nMy problem with the patch is that it only affects very few users, most users will have a working environment also with broken JVMs. The fix in the patch is very heavy, as, if we apply it correctly, will also slowdown <1.6.0_18.\n\nAs I said before, we should at least instruct Solr to print a WARN in the log if a JVM < 1.6.0_18 is started and the JVM parameter -XX:+UseMembar is missing. In Lucene we have no way to tell this the user as we have no logging framework, alternatively we could throw an Error is one of the central classes in Lucene is loaded by classloader and the JVM parameter is not given (static initializer e.g. in Constants.java). The same way we could tell the user: Dont use Java 7 GA.\n\nAs far as I know, the JVM command can be checked with a System-property and a simple regex should help. ",
            "author": "Uwe Schindler",
            "id": "comment-13150874"
        },
        {
            "date": "2011-11-15T23:19:42+0000",
            "content": "This ois the way to get the runtime args: http://download.oracle.com/javase/1.5.0/docs/api/java/lang/management/RuntimeMXBean.html#getInputArguments():\n\n\nRuntimeMXBean m = ManagementFactory.getRuntimeMXBean();\nList<String> vmargs = m.getInputArguments();\n\n\n\nThis prints all args for me:\n\n\n[junit] vmargs=[-Xmx512M, -Dtests.verbose=false, -Dtests.infostream=false, -Dtests.lockdir=C:\\Users\\Uwe, Schindler\\Projects\\lucene\\trunk-lusolr1\\lucene\\build, -Dtests.codec=random, -Dtests.postingsformat=random, -Dtests.locale=random, -Dtests.timezone=random, -Dtests.directory=random, -Dtests.linedocsfile=europarl.lines.txt.gz, -Dtests.iter=1, -Dtests.iter.min=1, -Dtests.seed=random, -Dtests.luceneMatchVersion=4.0, -Dtests.cleanthreads=perMethod, -Djava.util.logging.config.file=/dev/null, -Dtests.nightly=false, -Dtests.asserts.gracious=false, -Dtests.multiplier=1, -DtempDir=C:\\Users\\Uwe, Schindler\\Projects\\lucene\\trunk-lusolr1\\lucene\\build\\test\\1, -Dlucene.version=4.0-SNAPSHOT, -Dtestmethod=, -Djetty.testMode=1, -Djetty.insecurerandom=1, -Dsolr.directoryFactory=org.apache.solr.core.MockDirectoryFactory, -ea:org.apache.lucene..., -ea:org.apache.solr...]\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13150878"
        },
        {
            "date": "2011-11-15T23:40:36+0000",
            "content": "Maybe we should remove this global cache completely?\n\nIf the whole point is to prevent double-seeks for queries doing IDF then getting termdocs,\nwe can just put a tiny LRU cache in the already-existing threadlocal... ",
            "author": "Robert Muir",
            "id": "comment-13150896"
        },
        {
            "date": "2011-11-15T23:48:52+0000",
            "content": "actually i think even a tiny queue would work.\n\nthis would prevent the double-seeks. I dont think there is a point to worrying about anything else.\n\nthe LRU-ness seems stupid: for 'common' terms that appear over and over like stopwords, those are gonna be slow anyway. ",
            "author": "Robert Muir",
            "id": "comment-13150904"
        },
        {
            "date": "2011-11-15T23:50:02+0000",
            "content": "Robert, I agree, a simple LRUCache based on LinkedHashMap with\n\n\n@Override\nprotected boolean removeEldestEntry(Map.Entry<K,V> eldest) {\n  return size() > MAX_ENTRIES;\n}\n\n\n\nwould be fine. Because of this bugs and heavy use in Solr of other concurrent classes, we should maybe add a warning to the startup based on my findings before. ",
            "author": "Uwe Schindler",
            "id": "comment-13150905"
        },
        {
            "date": "2011-11-16T00:19:31+0000",
            "content": "\nIf the whole point is to prevent double-seeks for queries doing IDF then getting termdocs,\nwe can just put a tiny LRU cache in the already-existing threadlocal...\n\nIn fact this is what we used to do (LinkedHashMap), and then in LUCENE-2075 we moved to a cache shareable across threads.\n\nBut I agree \u2013 risk of hangs is not worth it.  Let's just move back to thread-private cache, but let's make it tiny (8? 16? 13?) in size? ",
            "author": "Michael McCandless",
            "id": "comment-13150917"
        },
        {
            "date": "2011-11-16T03:43:15+0000",
            "content": "we can also offer an option... fasterButMoreHangs... ",
            "author": "Robert Muir",
            "id": "comment-13151001"
        },
        {
            "date": "2012-03-23T20:28:22+0000",
            "content": "Bulk changing fixVersion 3.6 to 4.0 for any open issues that are unassigned and have not been updated since March 19.\n\nEmail spam suppressed for this bulk edit; search for hoss20120323nofix36 to identify all issues edited ",
            "author": "Hoss Man",
            "id": "comment-13237031"
        },
        {
            "date": "2013-07-23T18:44:35+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716992"
        },
        {
            "date": "2014-04-16T12:54:46+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970872"
        }
    ]
}