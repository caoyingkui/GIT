{
    "id": "LUCENE-3370",
    "title": "Support for a \"SpanNotNearQuery\"",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Sometimes you want to find an instance of a span which does not hit near some other span query.  SpanNotQuery only excludes exact hits on the term, but sometimes you want to exclude hits 1 away from the first, and other times you might want the range to be wider.\n\nSo a SpanNotNearQuery could be useful.  \n\nSpanNotQuery is actually very close, and adding slop+inOrder support to it is probably sufficient to make a SpanNotNearQuery. \n\nThere appears to be one project which has done it in this fashion, although this particular code looks like it's out of date:\n\nhttp://www.koders.com/java/fid933A84488EBE1F3492B19DE01B2A4FC1D68DA258.aspx?s=ArrayQuery",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-08-10T19:39:15+0000",
            "content": "SpanNotQuery is actually very close, and adding slop+inOrder support to it is probably sufficient to make a SpanNotNearQuery. \n\nA more general solution would probably be something like a \"SpanPaddingQuery(final SpanQuery inner, final int startPad, final int endPad)\" ... where the Spans produced by an instance would be all of the Spans of the nner query wrapped so that their start/end where decremented/incremented by the startPad/endPad values.\n\nThat should be fairly trivial to implement, and would then let you implement the logic you are talking about using something like \"new SpanNotQuery(a, new SpanPaddingQuery(b, slop, slop)\" ",
            "author": "Hoss Man",
            "id": "comment-13082606"
        },
        {
            "date": "2011-08-10T22:04:06+0000",
            "content": "That's not a bad idea.\n\nSome care should be taken though - the padding would work more logically, so to convert from slop (which doesn't!) you would have to add 1 to the slop value to get the padding value.\n ",
            "author": "Trejkaz",
            "id": "comment-13082708"
        },
        {
            "date": "2011-12-06T03:13:19+0000",
            "content": "Well, I ran with a modified version of SpanNotQuery for some time and nobody noticed any issues with it, but I just found the one thing which SpanNotQuery does differently from SpanNearQuery which makes it unsuitable for this task.\n\nWith a SpanNearQuery, if you have \"cat\" in the document only once, and you search for span-near(\"cat\",\"cat\"), you will get no hits.  It doesn't regard terms as being \"near\" themselves.\n\nHowever with a SpanNotQuery, if you have \"cat\" in the document only once, and you search for span-not(\"cat\",\"cat\"), you also get no hits, because you have subtracted all the spans you got in the first round.\n\nSince SpanNotNearQuery works like an expanded SpanNotQuery, it inherits this behaviour.  Thus, SpanNearQuery and SpanNotNearQuery end up in a situation where, quite confusingly to someone who doesn't know how they work, the results when added together for some reason do not give the full set of spans you would have had before applying the additional query. ",
            "author": "Trejkaz",
            "id": "comment-13163307"
        },
        {
            "date": "2016-09-02T12:24:20+0000",
            "content": "Was this fixed by LUCENE-5091?  Can we close this? ",
            "author": "Tim Allison",
            "id": "comment-15458380"
        },
        {
            "date": "2016-09-07T04:51:28+0000",
            "content": "It does seem to give me what I wanted, so I think it's probably fine to close this one.\n\nNow what I wonder is the related question, is this enough to make a SpanAllNearQuery / SpanAndQuery as I was looking for in LUCENE-3371... ",
            "author": "Trejkaz",
            "id": "comment-15469543"
        },
        {
            "date": "2016-09-13T06:30:23+0000",
            "content": "Tim any ideas with what might be wrong in LUCENE-3371? ",
            "author": "David Sitsky",
            "id": "comment-15486421"
        }
    ]
}