{
    "id": "SOLR-1758",
    "title": "schema definition for configuration files (validation, XSD)",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "It is too easy to make configuration errors in Solr without getting warnings. We should explore ways of validation configurations. See mailing list discussion at http://search-lucene.com/m/h6xKf1EShE6",
    "attachments": {
        "config-validation-20110523.patch": "https://issues.apache.org/jira/secure/attachment/12480197/config-validation-20110523.patch",
        "config-validation-20120402.patch": "https://issues.apache.org/jira/secure/attachment/12521097/config-validation-20120402.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12830049",
            "date": "2010-02-05T10:37:35+0000",
            "content": "other than the tag names , nothing much can be done w/ a schema. Most of the configuration is in the attributes, and they are arbitrary. So i'm not sure how far it can help "
        },
        {
            "author": "Jorg Heymans",
            "id": "comment-12830090",
            "date": "2010-02-05T12:45:33+0000",
            "content": "True. \n\nBut there is also the documentation aspect. Configuring schema.xml for example requires to take one of the (huge) sample configuration files, read all the comments, see what applies to your case and removing those things that you think don't apply. The autocompletion with automatic display of xsd:documentation elements would make this slightly easier.  "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13038355",
            "date": "2011-05-24T01:49:27+0000",
            "content": "This was originally reported in the context of DIH, but as the OP said, it applies equally well to all configuration.\n\nThe config-validation.patch includes changes to Config that validate all XML configuration files loaded there.  The patch includes a schema with rules for <config/>, <schema>, <solr/>, <elevate/> and <root/> (used in tests).  It could be extended for other files as well.  The change causes Config to look in solr.home for a file called config.xsd.  If found, it is loaded and used to validate whatever configuration file is being loaded.  If a validation error occurs, an exception is raised (and logged? this seemed to be the way it was done before, although it seemed odd to me - I'd have thought exception logging would want to be handled at an outermost layer).\n\nThe Solr XML usage seems to be very flexible in practice.  Therefore the schema attempts to allow a fair amount of flexibility: for elements marked as \"plugins\" in the Wiki documentation, I've allowed pretty much arbitrary child content. The wildcards in the schema are \"lax\" which means that they allow any element, even unknown elements, but when known elements are found, they are validated against the model in the schema (eg: <str> is not allowed to have any child elements).\n\nAll the Solr tests but one pass with the patch, which means that the configuration in the solr example, as well as the various test configurations in solr/src/test-files/solr/conf, are all valid according to the schema.  The exception is one solrconfig.xml with a\nluceneMatchVersion=4.0; I think this should LUCENE_40?  The patch also includes one new test of an invalid schema; it probably should have a few more.\n\nHowever, my knowledge of Solr configuration options is far from encyclopedic - I spent a while with the documentation and examples - and there are almost certainly additional  configuration options out there that are in use and should be accounted for in the \"standard\" schema, eg some elements that should accept any attribute that don't currently.\n\nIn general I expect the schema could be evolved to be looser in some areas, and perhaps, tighter in others.\n\nTo help with that, I created some ant rules to convert the schema from Relax NG Compact syntax to XML Schema.  I find Relax easier to maintain, but including runtime validation support for Relax would require a large jar to be added to solr.  In this patch is dev-tools/schema; in there is a config.rnc, which is the source schema, and build.xml which compiles config.xsd from that using the trang.jar library and copies it into a few\nplaces in the solr source tree.\n\nSome TODOs:\n\nIt might be better to have separate schema files for separate configuration documents - this way the decision to validate could be made on a per-file basis, rather than globally for all configuration.\n\nThere is no model for <highlighting> in the schema - it's just a big wildcard right now. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13194583",
            "date": "2012-01-27T09:53:03+0000",
            "content": "Original Description by Jorg Heymans:\n\n\nA schema definition would be able to spot the subtle error in below config \n\n\n    <dataSource name=\"ora\" driver=\"oracle.jdbc.OracleDriver\" url=\"....\" />\n    <datasource name=\"orablob\" type=\"FieldStreamDataSource\" />\n    <document name=\"mydoc\">\n        <entity dataSource=\"ora\" name=\"meta\" query=\"select id, filename, bytes from documents\" >            \n            <field column=\"ID\" name=\"id\" />\n            <field column=\"FILENAME\" name=\"filename\" />\n            <entity dataSource=\"orablob\" processor=\"TikaEntityProcessor\" url=\"bytes\" dataField=\"meta.BYTES\">\n              <field column=\"text\" name=\"mainDocument\"/>\n            </entity>\n         </entity>\n     </document>\n\n\n\nAlso, many xml editors support auto completion based on schema definition so it would be easier to create configuration without constantly having to refer to javadoc or samples from the distribution.\n\nThis applies equally to schema.xml and solr-config.xml "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13194587",
            "date": "2012-01-27T10:04:24+0000",
            "content": "Hi Mike,\n\nI have not tested your patch yet, but I think better validation and config-error is overdue, so I marked this for 4.0, hoping to revive the discussion again.\n\nI like the flexibility of your patch and that its use is optional.\nIt won't solve all our validation needs, but perhaps it will catch the majority as well as making assisted schema/config editing with standard XML editors easier.\n\nTo go the last mile, such as validating config syntax for custom plugins etc, we could let them to their own validation. E.g. NamedListInitializedPlugin users may validate everything they get in their NamedList in init() instead of just checking for existence of a few selected params. "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13194662",
            "date": "2012-01-27T12:52:11+0000",
            "content": "I'm not sure if plugins use the Config class?  It's been almost a year since I looked at this.  But if they are getting a NamedList, it's probably too late (in their init()) to validate their input using a formal XML schema.  Perhaps there could be a hook though for extending the config.xsd so that plugin config can be validated in the same step as the rest of the config.  I believe we could do this using some mechanism of include files in the schemas; plugin authors would put their own schemas in an extension.xsd? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13194685",
            "date": "2012-01-27T13:15:13+0000",
            "content": "That's why I think it makes more sense to let plugins validate the contents of their NamedList in Java code, instead of in XSD. But your XSDs will catch 90% and is a great step towards better validation. But of course, if there's an easy way to do addon XSDs for plugins then fine  "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13199951",
            "date": "2012-02-03T19:06:43+0000",
            "content": "In light of SOLR-3093 and SOLR-1052, have you thought about how to handle validation of older versions of config/schema? A Solr1.3 user may upgrade to Solr4.0 and simply point it to the old configuration. Some syntax and parameters are deprecated and removed between versions.\n\nPerhaps a solution is to NOT try to validate older versions of configs, and when we go from 4.0 to 4.1, there will be a new config_41.xsd in addition to config_40.xsd, and your code will select xsd based on LuceneMatchVersion? "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13200933",
            "date": "2012-02-05T22:07:16+0000",
            "content": "Yes - the schema will have to evolve as the config files evolve, so there will be a need for a new version, probably with each release. \n\nI think matching using LuceneMatchVersion makes a lot of sense.  For versions that are old enough (eg a different major release), the validator could still run, but produce warnings only.  Or else it could simply produce a message saying: \"warning; stale config version, not validating\" or something to that effect.  I'm not clear on how reasonable it is to maintain an old config version: isn't this the kind of thing that users will want to be prompted to revisit? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13200979",
            "date": "2012-02-06T00:36:13+0000",
            "content": "A \"not validating\" warning due to pre Solr4.x version sounds good to me.\n\nWould it make more sense to keep the xsd file(s) inside the WAR instead of in example/solr/conf? This way you don't need to copy all the schemas (for v4.0, 4.1, 4.2 etc) around with your solr config. Then add a JavaOpt which can disable validation -Dsolr.validate=false "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13243613",
            "date": "2012-03-31T23:56:43+0000",
            "content": "Mike, do you have an updated patch for this? What do you think about holding the xsd's inside the war? "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13243940",
            "date": "2012-04-02T02:13:22+0000",
            "content": "Jan, I agree that keeping the schemas in the WAR would be more convenient for most cases.  I would usually put something like this in WEB-INF/classes so it is easy to retrieve using the ClassLoader.getResource method, but I'm not completely sure how to do this in the solr build?  Are there any other non-classes resources packaged that way?  The other option would be to place the file in the solr/webapp/web folder somewhere and could be loaded using the ServletContext.  And in this case, should it be visible as part of the webapp?  Or hidden at the top level in WEB-INF?  Seems to make sense to expose it as documentation (the main virtue of putting it in the conf folder).\n\nAlso it still might be useful to be able to override with a schema in the conf folder? \n\nI'll look into migrating this stuff to trunk. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13244106",
            "date": "2012-04-02T10:22:34+0000",
            "content": "Perhaps under /solr/core/src/resources/validation/ with individual schemas for all known release versions of the files we want to validate:\n\nsolrconfig-LUCENE_31.xsd\nsolrconfig-LUCENE_32.xsd\nsolrconfig-LUCENE_33.xsd\nsolrconfig-LUCENE_34.xsd\nsolrconfig-LUCENE_35.xsd\nsolrconfig-LUCENE_36.xsd\nsolrconfig-LUCENE_40.xsd\nschema-1.1.xsd\nschema-1.2.xsd\nschema-1.3.xsd\nschema-1.4.xsd\nschema-1.5.xsd\n\n "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13244931",
            "date": "2012-04-03T03:03:21+0000",
            "content": "builds against 4.0 "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13244933",
            "date": "2012-04-03T03:12:17+0000",
            "content": "I updated the patch so it works with the new file layout in trunk (all solr test now pass for me), put the schemas on the classpath, added declarations to the eclipse (tested) and IDEA (untested) configs, added a version-check so we only validate config marked as LUCENE_40 or LUCENE_CURRENT, and added a couple of new tests related to these changes.  I don't have the knowledge to create schemas for all the 3.x versions that would be meaningfully different.  A possible approach there could be simply to use the same schema and make the version check looser.  The only change I made (since a year ago) to the config.rnc was to allow a few new options, so I think that would be reasonable given the level of strictness (not very) we can impose here.  As long as future schema file changes are additive, you might actually not need to create new versions?\n\nI haven't tested WAR packaging - will the ant rules just pick up files in solr/core/src/resources?\n\nPlease note - there is not a separate schema for solrconfig.xml and schema.xml; one schema applies to both (and also to a few other random config file types). "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717123",
            "date": "2013-07-23T18:47:11+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13970947",
            "date": "2014-04-16T12:56:42+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}