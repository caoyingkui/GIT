{
    "id": "SOLR-5308",
    "title": "Split all documents of a route key into another collection",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Enable SolrCloud users to split out a set of documents from a source collection into another collection.\n\nThis will be useful in multi-tenant environments. This feature will make it possible to split a tenant out of a collection and put them into their own collection which can be scaled separately.",
    "attachments": {
        "SOLR-5308.patch": "https://issues.apache.org/jira/secure/attachment/12609200/SOLR-5308.patch",
        "SOLR-5308-bitsep-fix.patch": "https://issues.apache.org/jira/secure/attachment/12618027/SOLR-5308-bitsep-fix.patch",
        "SOLR-5308-fixes.patch": "https://issues.apache.org/jira/secure/attachment/12615137/SOLR-5308-fixes.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13787977",
            "date": "2013-10-07T08:11:48+0000",
            "content": "I think the way it can be made to work is by using the routing key (shard.key or as it is known now route) to split an index. The target collection must be specified as a request parameter. The target shard can be looked up automatically using the hash of the routing key against the shards of target collection. Optionally, requests for that shard.key can be automatically forwarded to the target collection for a limited amount of time once the split is complete. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13788220",
            "date": "2013-10-07T15:30:35+0000",
            "content": "Added a test to demonstrate that splitting by a specific route key is already possible at the SolrIndexSplitter level. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13792348",
            "date": "2013-10-11T05:09:50+0000",
            "content": "Assume that documents for a route key span 'N' shards in a collection 'collection1'. The same collection1 may also have data for other route keys as well. Suppose the route key 'A!' is receiving too much traffic and needs to migrated to another collection. The user shall create a new collection, say 'collection2' to hold data for key 'A!' and then call an API such as: \n\n/admin/collections?action=migrate&collection=collection1&split.key=A!&target.collection=collection2\n\n\n\nAt this point, Solr determines the shards which overlap the hash range of the split key on both the source and target collections and for each such pair (shardX, shardY) invoke:\n\n/admin/collections?action=migrate&collection=collection1&split.key=A!&shard=shardX&target.collection=collection2&target.shard=shardY\n\n\n\nThe above API will do the actual work of splitting and migrating index from source shard to target shard. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13792692",
            "date": "2013-10-11T15:12:01+0000",
            "content": "For splitting a single source shard into a single target collection/shard by a route key such as:\n\n/admin/collections?action=migrate&collection=collection1&split.key=A!&shard=shardX&target.collection=collection2&target.shard=shardY\n\n\nA rough strategy could be to:\n\n\tCreate new core X on source\n\tCreate new core Y on target\n\tAsk target core to buffer updates\n\tStart forwarding updates for route key received by source shard to target collection\n\tSplit source shard to a new core X\n\tAsk Y to replicate fully from X\n\tCore Admin merge Y to target core\n\tAsk target core to replay buffer updates\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13799478",
            "date": "2013-10-18T20:24:58+0000",
            "content": "This patch implements the MIGRATE Collection API\n\n\tIdentifies the source and target shards for the given split.key. The for each pair of (source,target)\n\t\n\t\tCalculates common hash range by intersecting hash range of source shard, target shard and split.key's hash range\n\t\tCreates a temporary collection with just one replica on the source shard leader node\n\t\tSplits the source shard using the common hash range and split.key into the temporary collection\n\t\tCreates a replica of the temporary collection on the target shard leader's node\n\t\tWaits for it to become active\n\t\tMerges the replica's index into the target shard leader's index\n\t\n\t\n\n\n\nThis is a rough cut to show where we're going with this. There are plenty of nocommits and todos. I still need to figure out how the request forwarding should work and if/how we can make the replica recovery asynchronous as we did for the split shard API. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13800650",
            "date": "2013-10-21T13:39:58+0000",
            "content": "\n\tAdded a REQUESTBUFFERUPDATES action in Core Admin API\n\tUse the above to ask target shard to buffer updates\n\tCall REQUESTAPPLYUPDATES action to replay buffered updates after index merge\n\n\n\nI'm still working through the nocommits. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13801533",
            "date": "2013-10-22T06:26:20+0000",
            "content": "I feel that the REQUESTBUFFERUPDATES operation should not be a coreadmin action . It is doing an operation that is specific to the internals of a core. Can it not be an extra operation on the UpdateHandler?\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13801562",
            "date": "2013-10-22T07:24:01+0000",
            "content": "I feel that the REQUESTBUFFERUPDATES operation should not be a coreadmin action . It is doing an operation that is specific to the internals of a core. Can it not be an extra operation on the UpdateHandler?\n\nI think you're right. But this is just an implementation detail. It is by no means a public supported API. I had already added an operation to apply buffered updates for shard splitting so I added this in the same place. We can refactor this to be a update handler command. I'll open an issue. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13801834",
            "date": "2013-10-22T13:58:41+0000",
            "content": "\n\tAdded a simple test that tests for migration of a route key from a static index (i.e. no updates in progress)\n\tCleaning up existing temporary collections was broken in the last patch. I fixed it.\n\n\n\nI started working on forwarding requests in this patch. A RoutingRule is added to the clusterstate.json inside the source shard. Such a rule may be used by the DistributedUpdateProcessor to forward requests from source shard to target collection. Example below:\n\n\"shard2\":{\n              \"range\":\"0-7fffffff\",\n              \"state\":\"active\",\n              \"replicas\":{\n                \"core_node2\":{\n                  \"state\":\"active\",\n                  \"base_url\":\"http://127.0.0.1:51321/ckvmo/du\",\n                  \"core\":\"collection1\",\n                  \"node_name\":\"127.0.0.1:51321_ckvmo%2Fdu\",\n                  \"leader\":\"true\"},\n                \"core_node4\":{\n                  \"state\":\"active\",\n                  \"base_url\":\"http://127.0.0.1:51328/ckvmo/du\",\n                  \"core\":\"collection1\",\n                  \"node_name\":\"127.0.0.1:51328_ckvmo%2Fdu\"}},\n              \"routingRules\":{\"a!\":[{\n                    \"targetShard\":\"shard1\",\n                    \"routeRange\":\"3c250000-3c25ffff\",\n                    \"expireAt\":\"1382449837040\",\n                    \"targetCollection\":\"migrate_routekey_test_targetCollection\",\n                    \"routeKey\":\"a!\"}]}}}\n\n\n\nThe expireAt is hard coded to System.currentTimeMillis() + 10 minutes but may be passed as a parameter in future. The intent is to forward update requests for the given route key and the given hash range from a source shard to the target collection (target shard doesn't matter) temporarily i.e. during the migration and for some time afterwards. This is still a work in progress. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13802065",
            "date": "2013-10-22T17:54:35+0000",
            "content": "is it possible that the same shard key spans multiple shards? in that case , will the same entry will be repeated in another shard also?\n\nwhy is this an array \n{\"a!\":[]}\n  ? will there be multiple rules for the same shard key ? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13802080",
            "date": "2013-10-22T18:20:20+0000",
            "content": "Is it possible that the same shard key spans multiple shards?\nYes. By using the bitSeparator syntax for composite keys, a single shard key can span multiple shards.\n\n\nwhy is this an array\nUnknown macro: {\"a!\"} \n? will there be multiple rules for the same shard key ?\nYes there can be multiple rules for the same key because the ranges may span multiple target shards. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13802845",
            "date": "2013-10-23T12:18:53+0000",
            "content": "We can have a simpler routing rule as follows\n\n\n  \"routingRules\":{\"a!\":{\n                    \"ranges\":[\"3c250000-3c25ffff\"]\n                    \"expireAt\":\"1382449837040\",\n                    \"targetCollection\":\"migrate_routekey_test_targetCollection\"}}\n\n\n\nThe target shard does not make sense because it is something that can be easily derived and may change if there is a further split on the target collection. note that the \"ranges\" is an array now so that multiple values can be set there\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13802872",
            "date": "2013-10-23T13:32:25+0000",
            "content": "Thanks Noble. That is certainly simpler. This patch has it as:\n\n\"routingRules\":{\"a!\":{\n                  \"routeRanges\":\"3c250000-3c25ffff\",\n                  \"expireAt\":\"1382535453866\",\n                  \"targetCollection\":\"migrate_routekey_test_targetCollection\"}}\n\n\n\nI won't keep the routeRanges as a json list but as a comma-separated string. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13809191",
            "date": "2013-10-30T15:03:26+0000",
            "content": "Changes:\n\n\tAdded add request forwarding to target collection. The incoming request on a target collection is handled according to the state of the node. If the update log is in buffering mode then the request is buffered otherwise the version set by the source leader is stripped and leader logic is invoked.\n\tAdded a test with request forwarding\n\n\n\nI'm still working on forwarding delete requests, remove routing rules after expiry and adding more/better tests. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13809938",
            "date": "2013-10-31T05:13:57+0000",
            "content": "This patch adds request forwarding for delete by ID and query requests. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13810201",
            "date": "2013-10-31T12:51:34+0000",
            "content": "Removed unnecessary logging added to aid in debugging. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13818160",
            "date": "2013-11-09T15:17:41+0000",
            "content": "\n\tAdded routing rule expiry and test to assert behaviour.\n\tAdded a forward.timeout parameter to specify the number of seconds after which a routing rule is expired. The default is 10 minutes.\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13822191",
            "date": "2013-11-14T05:58:50+0000",
            "content": "Commit 1541832 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1541832 ]\n\nSOLR-5308: A new 'migrate' collection API to split all documents with a route key into another collection "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13823295",
            "date": "2013-11-15T05:22:20+0000",
            "content": "Commit 1542175 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1542175 ]\n\nSOLR-5308: A new 'migrate' collection API to split all documents with a route key into another collection "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13829041",
            "date": "2013-11-21T15:45:57+0000",
            "content": "This patch fixes three bugs:\n\n\tNo collection.configName was specified while creating the temporary collection. This caused it to fail when multiple config sets exist and the name of the config set is different from the collection name. I had to move the readConfigName method from ZkController to ZkStateReader because the OverseerCollectionProcessor does not have access to the ZkController.\n\tFixed a NPE during the routing rule wait loop\n\tFixed a race condition where the split is performed before the temp collection leader becomes active. In this patch we wait for the leader to become active before invoking split.\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13829651",
            "date": "2013-11-22T05:05:38+0000",
            "content": "Commit 1544414 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1544414 ]\n\nSOLR-5308: Use source collection's configName to create temp collection. Fixed NPE routing rule wait loop. Wait for temp collection leader to be active before splitting the source index. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13829667",
            "date": "2013-11-22T05:37:09+0000",
            "content": "Commit 1544415 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1544415 ]\n\nSOLR-5308: Use source collection's configName to create temp collection. Fixed NPE routing rule wait loop. Wait for temp collection leader to be active before splitting the source index. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13844214",
            "date": "2013-12-10T11:38:05+0000",
            "content": "This patch fixes two bugs:\n\n\tIf migrate was invoked with a split.key containing a bit separator then the forwarding logic didn't kick in\n\tWhen forwarding request to target collection, an intermediate forwarding node would cause the distrib.from.shard and distrib.from.collection params to be removed and the request would be rejected by the target shard. Now requests are routed directly to target shard instead of random assignment.\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13844217",
            "date": "2013-12-10T11:48:33+0000",
            "content": "Commit 1549821 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1549821 ]\n\nSOLR-5308: Handle route keys with bit separators. Route docs to target shard leader directly. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13844218",
            "date": "2013-12-10T11:49:59+0000",
            "content": "Commit 1549822 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1549822 ]\n\nSOLR-5308: Handle route keys with bit separators. Route docs to target shard leader directly. "
        }
    ]
}