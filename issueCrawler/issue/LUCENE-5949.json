{
    "id": "LUCENE-5949",
    "title": "Add Accountable.getChildResources()",
    "details": {
        "type": "Task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.0",
            "6.0"
        ]
    },
    "description": "Since Lucene 4.5, you can see how much memory lucene is using at a basic level by looking at SegmentReader.ramBytesUsed()\n\nIn 4.11 its already improved, you can pull the codec producers and get ram usage split out by postings, norms, docvalues, stored fields, term vectors, etc.\n\nUnfortunately most toString's are fairly useless, so you don't have any insight further than that, even though behind the scenes its mostly just adding up other Accountables.\n\nSo instead if we can improve the toString's, and if an Accountable can return its children, we can connect all the dots and you can easily diagnose/debug issues and see what is going on. I know i've been frustrated with having to hack up tons of System.out.printlns during development to see this stuff.\n\nSo I think we should add this method to Accountable:\n\n  /**\n   * Returns nested resources of this class. \n   * The result should be a point-in-time snapshot (to avoid race conditions).\n   * @see Accountables\n   */\n  // TODO: on java8 make this a default method returning emptyList\n  Iterable<? extends Accountable> getChildResources();\n\n\n\nWe can also add a simple helper method for quick debugging Accountables.toString(Accountable) to print the \"tree\", example output for a lucene segment:\n\n_5f(5.0.0):C8330469: 36.4 MB\n|-- postings [PerFieldPostings(formats=1)]: 8 MB\n    |-- format 'Lucene41_0' [BlockTreeTermsReader(fields=6,delegate=Lucene41PostingsReader(positions=true,payloads=false))]: 8 MB\n        |-- field 'alternatenames' [BlockTreeTerms(terms=3360242,postings=13779349,positions=17102250,docs=2876726)]: 945.2 KB\n            |-- term index [FST(input=BYTE1,output=ByteSequenceOutputs,packed=false,nodes=23318,arcs=66497)]: 945.1 KB\n        |-- field 'asciiname' [BlockTreeTerms(terms=2451266,postings=16849659,positions=16891234,docs=8329981)]: 686.1 KB\n            |-- term index [FST(input=BYTE1,output=ByteSequenceOutputs,packed=false,nodes=12976,arcs=44103)]: 686 KB\n        |-- field 'geonameid' [BlockTreeTerms(terms=8363399,postings=33321876,positions=-1,docs=8330469)]: 1.3 MB\n            |-- term index [FST(input=BYTE1,output=ByteSequenceOutputs,packed=false,nodes=528,arcs=66225)]: 1.3 MB\n        |-- field 'latitude' [BlockTreeTerms(terms=8714542,postings=33321876,positions=-1,docs=8330469)]: 1.7 MB\n            |-- term index [FST(input=BYTE1,output=ByteSequenceOutputs,packed=false,nodes=854,arcs=77300)]: 1.7 MB\n        |-- field 'longitude' [BlockTreeTerms(terms=11557222,postings=33321876,positions=-1,docs=8330469)]: 2.6 MB\n            |-- term index [FST(input=BYTE1,output=ByteSequenceOutputs,packed=false,nodes=1577,arcs=114570)]: 2.6 MB\n        |-- field 'name' [BlockTreeTerms(terms=2598879,postings=16833071,positions=16874267,docs=8330325)]: 771.5 KB\n            |-- term index [FST(input=BYTE1,output=ByteSequenceOutputs,packed=false,nodes=13790,arcs=46514)]: 771.3 KB\n        |-- delegate [Lucene41PostingsReader(positions=true,payloads=false)]: 32 bytes\n|-- norms [Lucene49NormsProducer(fields=3,active=3)]: 15.9 MB\n    |-- field 'alternatenames' [byte array]: 7.9 MB\n    |-- field 'asciiname' [table compressed [Packed64SingleBlock4(bitsPerValue=4,size=8330469,blocks=520655)]]: 4 MB\n    |-- field 'name' [table compressed [Packed64SingleBlock4(bitsPerValue=4,size=8330469,blocks=520655)]]: 4 MB\n|-- docvalues [PerFieldDocValues(formats=1)]: 12.1 MB\n    |-- format 'Lucene410_0' [Lucene410DocValuesProducer(fields=5)]: 12.1 MB\n        |-- addresses field 'alternatenames' [MonotonicBlockPackedReader(blocksize=16384,size=407026,avgBPV=16)]: 808.5 KB\n        |-- addresses field 'asciiname' [MonotonicBlockPackedReader(blocksize=16384,size=330528,avgBPV=17)]: 698.6 KB\n        |-- addresses field 'name' [MonotonicBlockPackedReader(blocksize=16384,size=335020,avgBPV=17)]: 703.7 KB\n        |-- ord index field 'alternatenames' [MonotonicBlockPackedReader(blocksize=16384,size=8330470,avgBPV=9)]: 9.8 MB\n        |-- reverse index field 'alternatenames' [ReverseTermsIndex(size=6360)]: 77.9 KB\n            |-- term bytes [PagedBytes(blocksize=32768)]: 67.7 KB\n            |-- term addresses [MonotonicBlockPackedReader(blocksize=16384,size=6360,avgBPV=13)]: 10.2 KB\n        |-- reverse index field 'asciiname' [ReverseTermsIndex(size=5165)]: 60.1 KB\n            |-- term bytes [PagedBytes(blocksize=32768)]: 53 KB\n            |-- term addresses [MonotonicBlockPackedReader(blocksize=16384,size=5165,avgBPV=11)]: 7 KB\n        |-- reverse index field 'name' [ReverseTermsIndex(size=5235)]: 61.2 KB\n            |-- term bytes [PagedBytes(blocksize=32768)]: 54.1 KB\n            |-- term addresses [MonotonicBlockPackedReader(blocksize=16384,size=5235,avgBPV=11)]: 7.1 KB\n|-- stored fields [CompressingStoredFieldsReader(mode=FAST,chunksize=16384)]: 216.3 KB\n    |-- stored field index [CompressingStoredFieldsIndexReader(blocks=65)]: 216.3 KB\n        |-- doc base deltas: 55.8 KB\n        |-- start pointer deltas: 158.9 KB\n|-- term vectors [CompressingTermVectorsReader(mode=FAST,chunksize=4096)]: 224 KB\n    |-- term vector index [CompressingStoredFieldsIndexReader(blocks=67)]: 224 KB\n        |-- doc base deltas: 65.6 KB\n        |-- start pointer deltas: 156.8 KB\n\n\n\nNote this works for any accountable, so also e.g. NRTCachingDirectory, OrdinalMap, Suggesters, FSTs, and so on. You can also e.g. traverse the graph yourself and output whatever you want.\n\nTo be safe, I define that the graph returned is \"point in time snapshot\" and free of race conditions, and the Accountable helper methods provide this and also prevent access (even via cast) to datastructures you shouldn't be able to get to, just provide information.\n\nSince we aren't on java 8 yet (and cannot provide a simple default method), instead I think we should just add the method to Accountable, but add default emptyList() implementations to impacted datastructures such as DocIDSet and Suggester. For codec APIs, these are lower level, and there I think its best to leave the method abstract since they should really be providing useful information.",
    "attachments": {
        "LUCENE-5949.patch": "https://issues.apache.org/jira/secure/attachment/12668793/LUCENE-5949.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14134123",
            "author": "Robert Muir",
            "content": "Patch. its somewhat large since it includes improved toString()'s everywhere in the codec api (which IMO is a good thing in general).\n\nAdditionally I found some crabs (missing codec checks in old term vectors codec, broken hashing on fieldinfo with MemoryDV, etc) and fixed those here too.\n\nI added assertions to AssertingCodec and to TestUtil.checkXXX to ensure that toString() works, that the returned iterators are immutable, and that the implementations work. ",
            "date": "2014-09-15T17:02:40+0000"
        },
        {
            "id": "comment-14134135",
            "author": "Michael McCandless",
            "content": "+1, this looks wonderful!\n\nNow there is no more mystery left when users are confused about what's using RAM in Lucene... ",
            "date": "2014-09-15T17:10:49+0000"
        },
        {
            "id": "comment-14134204",
            "author": "Dawid Weiss",
            "content": "Very cool. I just needed it very recently and had to inspect stuff manually. ",
            "date": "2014-09-15T17:56:49+0000"
        },
        {
            "id": "comment-14135417",
            "author": "ASF subversion and git services",
            "content": "Commit 1625275 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1625275 ]\n\nLUCENE-5949: Add Accountable.getChildResources ",
            "date": "2014-09-16T13:26:58+0000"
        },
        {
            "id": "comment-14135973",
            "author": "ASF subversion and git services",
            "content": "Commit 1625356 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1625356 ]\n\nLUCENE-5949: Add Accountable.getChildResources ",
            "date": "2014-09-16T19:00:53+0000"
        },
        {
            "id": "comment-14135974",
            "author": "ASF subversion and git services",
            "content": "Commit 1625357 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1625357 ]\n\nLUCENE-5949: add addresses child to binary fieldcacheimpl, add some missing unmodifiable() ",
            "date": "2014-09-16T19:00:59+0000"
        },
        {
            "id": "comment-14332545",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "date": "2015-02-23T05:00:36+0000"
        }
    ]
}