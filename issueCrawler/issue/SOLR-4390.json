{
    "id": "SOLR-4390",
    "title": "SolrJ does not URL-encode query string argument names but should",
    "details": {
        "affect_versions": "4.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java",
            "SolrJ"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "SolrJ does not appear to URL-encode any metadata names, but should.  This leads to URLs that are illegal, and thus an IllegalArgumentException gets thrown.  See CONNECTORS-630 for an example of a bad URL that SolrJ generates.\n\nI understand that this may have been broken for a long time and that now backwards-compatibility is an issue, but it should still be possible to tell SolrJ to do the right thing and not make the SolrJ user do it.",
    "attachments": {
        "SOLR-4390.patch": "https://issues.apache.org/jira/secure/attachment/12567977/SOLR-4390.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-13567131",
            "date": "2013-01-31T00:12:26+0000",
            "content": "But do keep in mind that \"legal\" (happiest path for all pieces of Solr) field names are basically comprised of only [A-Za-z0-9_], which is the use case you mention using literal.<funky field name>=... parameters. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13567143",
            "date": "2013-01-31T00:26:59+0000",
            "content": "I guess there are two issues here.\n\nManifoldCF often \"discovers\" metadata names in some repositories (this one is LiveLink), whose names don't obey the Solr \"legality\" constraint you mention.  If you want to reject or ignore these at the Solr level, well okay, but definitely a SolrJ runtime exception seems like a heavy-handed way of doing that.\n\nThe second issue is that there are existing clients of ManifoldCF that were able to index this content before we went to SolrJ.  I don't know how they do it but they were happy with it before. "
        },
        {
            "author": "Karl Wright",
            "id": "comment-13571147",
            "date": "2013-02-05T08:26:26+0000",
            "content": "Here's the naive patch, which does not concern itself at all with backwards compatibility.\n\nIf Mr. Hatcher is correct, and nobody uses SolrJ field names that are other than standard URL characters, this patch should suffice.  But if anyone wants a more nuanced approach, let me know and I will create parameters that have knowledge of whether or not they need encoding at the SolrJ level. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-16619761",
            "date": "2018-09-18T21:36:44+0000",
            "content": "I had thought that field names were subject to validation, but it appears that only shard names, collection names, core names, and alias names are actually validated.\n\nhttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=blob;f=solr/solrj/src/java/org/apache/solr/client/solrj/util/SolrIdentifierValidator.java;h=d23b8bbf93d5cdd3da3d68c135e0d8233f1571dd\n\nIMHO, field names and other identifiers should be subject to the same validation requirements.  None of the characters in the validation list require URL encoding. "
        }
    ]
}