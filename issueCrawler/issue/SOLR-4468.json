{
    "id": "SOLR-4468",
    "title": "Add document but keep existing fields values",
    "details": {
        "affect_versions": "4.1",
        "status": "Closed",
        "fix_versions": [
            "4.2"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "The original need is a field that represents the (first) insertion time of the document.\n\nIt can be implemented as another value in the \"update\" optional attribute of 'field' element, in AddUpdateCommand.",
    "attachments": {
        "SOLR-4468.patch": "https://issues.apache.org/jira/secure/attachment/12569682/SOLR-4468.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Isaac Hebsh",
            "id": "comment-13580022",
            "date": "2013-02-16T20:33:12+0000",
            "content": "Fix suggestion "
        },
        {
            "author": "Isaac Hebsh",
            "id": "comment-13580032",
            "date": "2013-02-16T20:56:21+0000",
            "content": "example syntax:\n\n<add>\n  <doc>\n    <field name=\"first_update_timestamp\" update=\"create\">NOW</field>\n  </doc>\n</add>\n\n "
        },
        {
            "author": "Isaac Hebsh",
            "id": "comment-13580276",
            "date": "2013-02-17T20:23:59+0000",
            "content": "Notes:\n\n\tIt depends on the Atomic Update feature (which depends on RealTimeGet).\n\tIt will work on stored fields only.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13584542",
            "date": "2013-02-22T18:52:08+0000",
            "content": "Isaac: thank you for your patch, a few comments...\n\n1) the patch would definitley need to be updated to include some tests before this feature could be considered for inclusion in Solr\n\n2) skimming the patch, i'm not convinced it behalves in the way you describe \u2013  in particula consider what would happen if (in your example usage) a document existed in the index which did not have any value in the \"first_update_timestamp\" field.  from what i can tell the patch as written isn't actually doing anything to distinguish between the case of \"this is the first time adding this document (so accept the field value)\" and \"this is the first time someone has tried to set this value\" ... although perhaps i'm just missunderstanding what you're goal is?\n\n3) i'm not sure that the verb \"create\" fits with the other existing verbs that are available for atomic updates ... it seems like what we really want is something more along the lines of \"setIfEmpty\" or \"setOnCreate\" (depending on the intended behavior as mentioned above in #2)\n\n4) it's not clear to me from skimming the patch if this will work with multiple values, would definitely need to see a test case verifying that both values were added in a situation like...\n\n\n<doc>\n  <field name=\"foo\" update=\"create\">ABC</field>\n  <field name=\"foo\" update=\"create\">XYZ</field>\n  ...\n</doc>\n</add>\n\n\n\n\n\nI would also like to point out that (unless i'm missunderstanding) for the initial use case that seems to have motivated this issue (ie: \"timestamp when doc was first indexed\", where the field must be single valued to make sense) i'm pretty sure this goal is already achievable w/o any code changes if:\n\n\n\tthe clients always specify update=\"add\" on this particular field\n\tFirstFieldValueUpdateProcessorFactory is configured on for this field after the DistributedUpdateProcessorFactory\n\n "
        },
        {
            "author": "Isaac Hebsh",
            "id": "comment-13590026",
            "date": "2013-02-28T23:07:55+0000",
            "content": "Wonderful! FirstFieldValueUpdateProcessorFactory is exactly the solution!\n\nAnd, thank you for the review  "
        },
        {
            "author": "Isaac Hebsh",
            "id": "comment-13590029",
            "date": "2013-02-28T23:11:36+0000",
            "content": "FirstFieldValueUpdateProcessorFactory is an existing solution "
        }
    ]
}