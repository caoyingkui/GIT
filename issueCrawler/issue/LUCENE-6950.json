{
    "id": "LUCENE-6950",
    "title": "DimensionalRangeQuery not working with UninvertingReader",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4.1",
            "5.5",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "As I was trying out dimensional fields for SOLR-8396, I realized that DimensionalRangeQuery is not working with UninvertingReader. \nIn Solr, all directory readers are wrapped by an UninvertingReader and an ExitableDirectoryReader. \n\nHere's the error:\n\nException in thread \"main\" java.lang.IllegalArgumentException: field=\"rating\" was indexed with numDims=0 but this query has numDims=1\n\tat org.apache.lucene.search.DimensionalRangeQuery$1.scorer(DimensionalRangeQuery.java:186)\n\tat org.apache.lucene.search.Weight.bulkScorer(Weight.java:135)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:667)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:474)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:593)\n\tat org.apache.lucene.search.IndexSearcher.searchAfter(IndexSearcher.java:451)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:462)\n\tat DimensionalRangeQueryExample.query(DimensionalRangeQueryExample.java:66)\n\n\n\nHere's an example program to trigger this failure:\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Random;\n\nimport org.apache.lucene.analysis.standard.StandardAnalyzer;\nimport org.apache.lucene.document.DimensionalIntField;\nimport org.apache.lucene.document.Document;\nimport org.apache.lucene.document.Field;\nimport org.apache.lucene.document.Field.Store;\nimport org.apache.lucene.document.LegacyIntField;\nimport org.apache.lucene.document.StringField;\nimport org.apache.lucene.document.TextField;\nimport org.apache.lucene.index.DirectoryReader;\nimport org.apache.lucene.index.IndexWriter;\nimport org.apache.lucene.index.IndexWriterConfig;\nimport org.apache.lucene.index.StoredDocument;\nimport org.apache.lucene.queryparser.classic.ParseException;\nimport org.apache.lucene.search.DimensionalRangeQuery;\nimport org.apache.lucene.search.IndexSearcher;\nimport org.apache.lucene.search.LegacyNumericRangeQuery;\nimport org.apache.lucene.search.Query;\nimport org.apache.lucene.search.ScoreDoc;\nimport org.apache.lucene.search.TopDocs;\nimport org.apache.lucene.store.Directory;\nimport org.apache.lucene.store.RAMDirectory;\nimport org.apache.lucene.uninverting.UninvertingReader;\nimport org.apache.lucene.util.BytesRef;\n\npublic class DimensionalRangeQueryExample {\n\tpublic static void main(String[] args) throws IOException, ParseException {\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer();\n\t\tDirectory index = new RAMDirectory();\n\t\tIndexWriterConfig config = new IndexWriterConfig(analyzer);\n\n\t\tIndexWriter w = new IndexWriter(index, config);\n\t\taddDoc(w, \"Lucene in Action\", 1);\n\t\taddDoc(w, \"Lucene for Dummies\", 2);\n\t\taddDoc(w, \"Managing Gigabytes\", 3);\n\t\taddDoc(w, \"The Art of Computer Science\", 4);\n\t\tw.commit();\n\t\tw.close();\n\n\t\tDirectoryReader reader = (DirectoryReader.open(index));\n\n\t\tMap<String, UninvertingReader.Type> uninvertingMap = new HashMap<>();\n\t\tuninvertingMap.put(\"id\", UninvertingReader.Type.BINARY);\n\t\tuninvertingMap.put(\"rating\", UninvertingReader.Type.INTEGER);\n\t\treader = UninvertingReader.wrap(reader, uninvertingMap);\n\n\t\tIndexSearcher searcher = new IndexSearcher(reader);\n\n\t\tQuery legacyQuery = LegacyNumericRangeQuery.newIntRange(\"rating_legacy\", 1, 4, true, true);\n\t\tQuery dimensionalQuery = DimensionalRangeQuery.new1DIntRange(\"rating\", 1, true, 4, true);\n\n\t\tSystem.out.println(\"Legacy query: \");\n\t\tquery(legacyQuery, searcher); // works\n\t\tSystem.out.println(\"Dimensional query: \");\n\t\tquery(dimensionalQuery, searcher); // fails\n\t\t\n\t\treader.close();\n\t}\n\n\tprivate static void query(Query q, IndexSearcher searcher) throws IOException {\n\t\tint hitsPerPage = 10;\n\t\tTopDocs docs = searcher.search(q, hitsPerPage);\n\t\tScoreDoc[] hits = docs.scoreDocs;\n\n\t\tSystem.out.println(\"Found \" + hits.length + \" hits.\");\n\t\tfor(int i=0;i<hits.length;++i) {\n\t\t\tint docId = hits[i].doc;\n\t\t\tStoredDocument d = searcher.doc(docId);\n\t\t\tSystem.out.println((i + 1) + \". \" + d);\n\t\t}\n\t}\n\tprivate static void addDoc(IndexWriter w, String title, int rating) throws IOException {\n\t\tDocument doc = new Document();\n\t\tString id = \"\"+new Random().nextInt(1000);\n\t\tbyte idBytes[] = id.getBytes();\n\t\tdoc.add(new StringField(\"id\", new BytesRef(idBytes), Store.YES));\n\t\tdoc.add(new TextField(\"title\", title, Field.Store.YES));\n\t\tdoc.add(new DimensionalIntField(\"rating\", rating));\n\t\tLegacyIntField legacy = new LegacyIntField(\"rating_legacy\", rating, Store.YES);\n\t\tlegacy.setIntValue(rating);\n\t\tdoc.add(legacy);\n\t\tw.addDocument(doc);\n\t}\n}\n\n\n\nI don't yet know more as to why this could be. Michael McCandless Any ideas, please?\nApologies if I should've brought this up in the mailing lists, or as a comment in LUCENE-6917 itself.",
    "attachments": {
        "LUCENE-6950.patch": "https://issues.apache.org/jira/secure/attachment/12779747/LUCENE-6950.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15073463",
            "author": "Ishan Chattopadhyaya",
            "date": "2015-12-29T04:31:26+0000",
            "content": "Here's a patch for the fix. No unit tests yet, but solves the problem for the example program I posted in the description. "
        },
        {
            "id": "comment-15073468",
            "author": "Robert Muir",
            "date": "2015-12-29T04:37:24+0000",
            "content": "I don't think we need the conditional or the setter, the bug is that 0's are bogusly passed to both in the constructor? "
        },
        {
            "id": "comment-15073474",
            "author": "Ishan Chattopadhyaya",
            "date": "2015-12-29T04:43:51+0000",
            "content": "Thanks Rob! I was too sleepy to observe the constructor carefully  Updated the patch. "
        },
        {
            "id": "comment-15073480",
            "author": "Robert Muir",
            "date": "2015-12-29T04:50:02+0000",
            "content": "In addition to the dimensionCount=0 and dimensionNumBytes=0 causing your problem, the dvGen=-1 and attributes=Collections.emptyMap are also bogus. We should just pass everything, only difference is dvType comes from \"type\". Then there won't be strange bugs with it, and it won't hide information.  "
        },
        {
            "id": "comment-15073485",
            "author": "Robert Muir",
            "date": "2015-12-29T04:54:30+0000",
            "content": "I am just basing that on MismatchedLeafReader, which is very similar to this reader (only it changes a different variable, the field's number):\n\nhttp://svn.apache.org/repos/asf/lucene/dev/trunk/lucene/test-framework/src/java/org/apache/lucene/index/MismatchedLeafReader.java\n\nIt passes all the old stuff and only modifies its one thing.  "
        },
        {
            "id": "comment-15073489",
            "author": "Ishan Chattopadhyaya",
            "date": "2015-12-29T05:00:01+0000",
            "content": "That makes sense, I updated the patch to pass those around too.\n\nI saw that at TermVectorLeafReader, there are 0s passed in for FieldInfo constructor, but I think it is as much information as we have there and it is okay. Just confirming my understanding.\n\nAlso, Rob, can you please suggest what (or whether) tests should I write for this issue? I can try something on the lines of the example program I posted, but was wondering if something better can be done. "
        },
        {
            "id": "comment-15073497",
            "author": "Robert Muir",
            "date": "2015-12-29T05:09:41+0000",
            "content": "Thanks, the patch looks good.\n\nAs far as testing this, We could add simple unit tests for what it is doing with fieldinfos in TestUninvertingReader. Similar to ones like \"testSortedSetInteger\", but even simpler. just tests that add field to a single document, wrap it, then assert stuff about the fieldinfos on the wrapped reader. Particularly asserts about docvalues type (which we change if an indexed field is configured for uninverting) would be good. We could have lots of tests for the logic in there, e.g. one that adds a stored-only field and then asserts dvType is still NONE, for example. "
        },
        {
            "id": "comment-15073546",
            "author": "Ishan Chattopadhyaya",
            "date": "2015-12-29T06:36:46+0000",
            "content": "Updated the patch with the tests. "
        },
        {
            "id": "comment-15073572",
            "author": "Robert Muir",
            "date": "2015-12-29T07:12:07+0000",
            "content": "+1, thanks for adding those tests. "
        },
        {
            "id": "comment-15074016",
            "author": "ASF subversion and git services",
            "date": "2015-12-29T15:53:37+0000",
            "content": "Commit 1722165 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1722165 ]\n\nLUCENE-6950: Fix FieldInfos handling of UninvertingReader "
        },
        {
            "id": "comment-15074111",
            "author": "ASF subversion and git services",
            "date": "2015-12-29T17:47:16+0000",
            "content": "Commit 1722196 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1722196 ]\n\nLUCENE-6950: Fix FieldInfos handling of UninvertingReader "
        },
        {
            "id": "comment-15074113",
            "author": "Robert Muir",
            "date": "2015-12-29T17:48:51+0000",
            "content": "Thanks Ishan! "
        },
        {
            "id": "comment-15092050",
            "author": "Adrien Grand",
            "date": "2016-01-11T15:12:16+0000",
            "content": "Reopen for backporting to 5.4.1. "
        },
        {
            "id": "comment-15092060",
            "author": "ASF subversion and git services",
            "date": "2016-01-11T15:15:07+0000",
            "content": "Commit 1724058 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1724058 ]\n\nLUCENE-6950: Move CHANGES entry to 5.4.1. "
        },
        {
            "id": "comment-15092063",
            "author": "ASF subversion and git services",
            "date": "2016-01-11T15:16:21+0000",
            "content": "Commit 1724059 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1724059 ]\n\nLUCENE-6950: Move CHANGES entry to 5.4.1. "
        },
        {
            "id": "comment-15092075",
            "author": "ASF subversion and git services",
            "date": "2016-01-11T15:19:43+0000",
            "content": "Commit 1724060 from Adrien Grand in branch 'dev/branches/lucene_solr_5_4'\n[ https://svn.apache.org/r1724060 ]\n\nLUCENE-6950: Fix FieldInfos handling of UninvertingReader "
        }
    ]
}