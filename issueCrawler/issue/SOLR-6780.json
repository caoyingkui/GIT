{
    "id": "SOLR-6780",
    "title": "some param values are duplicated when they override defaults, or are combined with appends values, or are an invariant that overrides a request param",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "4.10.4",
            "5.0",
            "6.0"
        ],
        "affect_versions": "4.1,                                            5.0,                                            6.0",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The DefaultSolrParams class, which is used as the basis for the implementation of defaults, appends and invariants params had a bug in it's implementation of getParameterNamesIterator() that could result in the same param key being returned multiple times.\n\nIn many code paths of Solr, this bug had no effects \u2013 but in other cases, it resulted in code which iterated over the list of all parameters to take action multiple times for the (valid) key=value pairs.\n\nThere were 4 main areas where this bug had unexpected & problematic behavior for end users:\n\nmain problem areas & impacts\n\n\tExtractingRequestHandler\n\t\n\t\t\"literal.*\" params will be duplicated if overridden by defaults/invariants/appends - this will result in redundent literal field=value params being added to the document.\n\t\timpact: multiple values in literal fields when not expected/desired\n\t\n\t\n\tFacetComponent\n\t\n\t\t\"facet.*\" params will be duplicated if overridden by defaults/invariants/appends - this can result in redundent computation and identical facet.field, facet.query, or facet.range blocks in the response\n\t\timpact: wasted computation & increased response size\n\t\n\t\n\tSpellCheckComponent\n\t\n\t\twhen \"custom params\" (ie: \"spellcheck.[dictionary name].XXXX=YYYY\" are used in used in defaults, appends, or invariants, it can cause redudent XXXXX=YYYY params to be used.\n\t\twhen \"spellcheck.collateParam.XXXX=YYYY\" type params are used defaults, appends, or invariants, it can cause redundent XXXX=YYYY params to exist in the collation verification queries.\n\t\timpact: unclear to me at first glance, probably just wasted computation & increased response size\n\t\n\t\n\tAnalyticsComponent\n\t\n\t\t\"olap.*\" params will be duplicated if overridden by defaults/invariants/appends - this can result in redundent computation\n\t\timpact: unclear to me at first glance, probably just wasted computation & increased response size\n\t\n\t\n\n\n\nOther less serious impacts were redundent values in \"echoParams\" as well as some small amounts of wasted computation in other code paths that iterated over the set of params (due to a slightly larger set of param values)\n\n\n\nOriginal bug report: \"Merging request parameters with defaults produce duplicate entries\"\nWhen a parameter (e.g. echoParams) is specified and overrides the default on the handler, it actually generates two entries for that key with the same value. \n\nMost of the time it is just a confusion and not an issue, however, some components will do the work twice. For example faceting component as described in http://search-lucene.com/m/QTPaSlFUQ1/duplicate\n\nIt may also be connected to SOLR-6369\n\nThe cause seems to be the interplay between DefaultSolrParams#getParameterNamesIterator() which just returns param names in sequence and SolrParams#toNamedList() which uses the first (override then default) value for each key, without deduplication.\n\nIt's easily reproducible in trunk against schemaless example with \ncurl \"http://localhost:8983/solr/schemaless/select?indent=true&echoParams=all\"\n\nI've also spot checked it and it seems to be reproducible back to Solr 4.1.",
    "attachments": {
        "SOLR-6780.patch": "https://issues.apache.org/jira/secure/attachment/12683971/SOLR-6780.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-11-27T01:28:24+0000",
            "author": "Hoss Man",
            "content": "What an evil freaking bug.\n\nI audited all of the usages of getParameterNamesIterator() to try and track down how severe the impacts of this issue may be \u2013 most of them are either semi-benign (like the \"echoParams\" case) or not affected by the redundency (ie: code that iterats over all params looking for certain things, and then adds the assocaited names/values to a Set so they get deduped anyway)\n\nThere were 4 main areas i found where this bug could result in problematic behavior\n\n\n\tExtractingRequestHandler\n\t\n\t\t\"literal.*\" params will be duplicated if overridden by defaults/invariants/appends - this will result in redundent literal field=value params being added to the document.\n\t\timpact: multiple values in literal fields when not expected/desired\n\t\n\t\n\tFacetComponent\n\t\n\t\t\"facet.*\" params will be duplicated if overridden by defaults/invariants/appends - this can result in redundent computation and identical facet.field, facet.query, or facet.range blocks in the response\n\t\timpact: wasted computation & increased response size\n\t\n\t\n\tSpellCheckComponent\n\t\n\t\twhen \"custom params\" (ie: \"spellcheck.[dictionary name].XXXX=YYYY\" are used in used in defaults, appends, or invariants, it can cause redudent XXXXX=YYYY params to be used.\n\t\twhen \"spellcheck.collateParam.XXXX=YYYY\" type params are used defaults, appends, or invariants, it can cause redundent XXXX=YYYY params to exist in the collation verification queries.\n\t\timpact: unclear to me at first glance, probably just wasted computation & increased response size\n\t\n\t\n\tAnalyticsComponent\n\t\n\t\t\"olap.*\" params will be duplicated if overridden by defaults/invariants/appends - this can result in redundent computation\n\t\timpact: unclear to me at first glance, probably just wasted computation & increased response size\n\t\n\t\n\n\n\n...in addition to fixing the bug & adding explicit unit tests for it, the attached patch also includes some sanity check testing for the FacetComponent & ExtractingRequestHandler situations above, to try and protect us from similar \"redundency\" bugs in the future.\n ",
            "id": "comment-14227104"
        },
        {
            "date": "2014-12-01T17:10:26+0000",
            "author": "Hoss Man",
            "content": "planning to commit & backport to 5x today ... hoping to backport to for 4.10.3 tomorow but i want to see it run in jenkins at least 24 hours. ",
            "id": "comment-14230050"
        },
        {
            "date": "2014-12-01T18:10:03+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1642727 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1642727 ]\n\nSOLR-6780: Fixed a bug in how default/appends/invariants params were affecting the set of all keys found in the request parameters, resulting in some key=value param pairs being duplicated. ",
            "id": "comment-14230159"
        },
        {
            "date": "2014-12-01T21:16:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1642760 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1642760 ]\n\nSOLR-6780: Fixed a bug in how default/appends/invariants params were affecting the set of all keys found in the request parameters, resulting in some key=value param pairs being duplicated. (merge r1642740) ",
            "id": "comment-14230476"
        },
        {
            "date": "2014-12-01T21:57:23+0000",
            "author": "Hoss Man",
            "content": "\nThis is committed to trunk & 5x.\n\nBackport to the 4.10.x branch was clean w/o any precommit problems \u2013 still running tests.  I'm going to hold off on committing the 4.10.x backport for 24 hours to give jenkins some time to hate me.\n\nI've also updated the summary & description of hte bug to be more focused on the user impacts, to aid in people searching in the future. ",
            "id": "comment-14230529"
        },
        {
            "date": "2014-12-02T21:12:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1643006 from hossman@apache.org in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1643006 ]\n\nSOLR-6780: Fixed a bug in how default/appends/invariants params were affecting the set of all keys found in the request parameters, resulting in some key=value param pairs being duplicated (merge r1642727) ",
            "id": "comment-14232131"
        },
        {
            "date": "2015-02-04T12:38:05+0000",
            "author": "Marius Dumitru Florea",
            "content": "This issue's Fix Version/s includes 4.10.3 but the fix is not present on the correspoding tag. It looks like the original commit from the trunk was not correctly merged on the 4.10 branch as r1643006 doesn't contain the files that have been actually modified. The merge on the 5x branch seems fine on the other hand, as r1642760 contains the changed files (DefaultSolrParams most importantly).\n\nCan we have this issue properly fixed on the 4.10 branch? Especialy since this is a regression: I didn't have the facet fields listed twice on 4.8.1. Thanks. ",
            "id": "comment-14305026"
        },
        {
            "date": "2015-02-04T16:51:53+0000",
            "author": "Hoss Man",
            "content": "DAMN IT!\n\nI'm really sorry about this \u2013 i'm not sure what happened with this merge ... this sucks.\n\ni'll get this fixed on the 4.10 branch, and get the CHANGES.txt file updated so 5.0 accurately records when the fix was first released. ",
            "id": "comment-14305489"
        },
        {
            "date": "2015-02-04T16:57:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1657314 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1657314 ]\n\nSOLR-6780: issue did not get backported to 4x branch correctly, fixing CHANGES to accurately record that 5.0 will be first release with fix ",
            "id": "comment-14305500"
        },
        {
            "date": "2015-02-04T16:58:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1657316 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1657316 ]\n\nSOLR-6780: issue did not get backported to 4x branch correctly, fixing CHANGES to accurately record that 5.0 will be first release with fix (merge r1657314) ",
            "id": "comment-14305502"
        },
        {
            "date": "2015-02-04T17:00:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1657317 from hossman@apache.org in branch 'dev/branches/lucene_solr_5_0'\n[ https://svn.apache.org/r1657317 ]\n\nSOLR-6780: issue did not get backported to 4x branch correctly, fixing CHANGES to accurately record that 5.0 will be first release with fix (merge r1657314) ",
            "id": "comment-14305508"
        },
        {
            "date": "2015-02-04T18:27:39+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1657364 from hossman@apache.org in branch 'dev/branches/lucene_solr_4_10'\n[ https://svn.apache.org/r1657364 ]\n\nSOLR-6780: Fixed a bug in how default/appends/invariants params were affecting the set of all keys found in the request parameters, resulting in some key=value param pairs being duplicated. (merge r1642727, r1657314) ",
            "id": "comment-14305674"
        },
        {
            "date": "2015-02-04T18:35:19+0000",
            "author": "Hoss Man",
            "content": "Ok, this should now be fixed properly on the 4_10 branch, and the CHANGES.txt should be correct  moving forward.\n\nto clarify one comment...\n\n...Especialy since this is a regression: I didn't have the facet fields listed twice on 4.8.1. Thanks.\n\nthe root bug in how params were handled is far older then 4.8.1 ... the differences you're seeing may just be because of facet code changes  after 4.8.1 that caused those code paths to be affected by this bug. ",
            "id": "comment-14305684"
        },
        {
            "date": "2015-02-05T06:10:38+0000",
            "author": "Marius Dumitru Florea",
            "content": "Hoss Man, thank you for handling this so quickly, and for the clarification. I'll wait for 4.10.4 now. ",
            "id": "comment-14306713"
        },
        {
            "date": "2015-02-05T08:24:05+0000",
            "author": "Vincent Massol",
            "content": "Thanks a lot Hoss Man! Any rough idea of when 4.10.4 will be released?  I need this fix too (the last merge). ",
            "id": "comment-14306815"
        },
        {
            "date": "2015-02-23T05:02:53+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close after 5.0 release. ",
            "id": "comment-14332972"
        }
    ]
}