{
    "id": "SOLR-6168",
    "title": "enhance collapse QParser so that \"group head\" documents can be selected by more complex sort options",
    "details": {
        "affect_versions": "4.7.1,                                            4.8.1",
        "status": "Closed",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The fundemental goal of this issue is add additional support to the CollapseQParser so that as an alternative to the existing min/max localparam options, more robust sort syntax can be used to sort on multiple criteria when selecting the \"group head\" documents used to represent each collapsed group.\n\nSince support for arbitrary, multi-clause, sorting is almost certainly going to require more RAM then the existing min/max functionaly, this new functionality should be in addition to the existing min/max localparam implementation, not a replacement of it.\n\n(NOTE: early comments made in this jira may be confusing in historical context due to the way this issue was originally filed as a bug report)",
    "attachments": {
        "SOLR-6168.patch": "https://issues.apache.org/jira/secure/attachment/12754297/SOLR-6168.patch",
        "CollapsingQParserPlugin-6168.patch.1-1stcut": "https://issues.apache.org/jira/secure/attachment/12651940/CollapsingQParserPlugin-6168.patch.1-1stcut",
        "SOLR-6168-group-head-inconsistent-with-sort.patch": "https://issues.apache.org/jira/secure/attachment/12651197/SOLR-6168-group-head-inconsistent-with-sort.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Umesh Prasad",
            "id": "comment-14031493",
            "date": "2014-06-14T07:06:23+0000",
            "content": "Test Case / Patch attached for broken sort. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-14035781",
            "date": "2014-06-18T14:42:55+0000",
            "content": "Hi Umesh,\n\nThanks for reporting the bug and providing the test case. It looks like the test is failing because the collapsing is choosing document 5 rather then document 6 as the group head. So it's not a sorting issue, it's a collapsing issue. Because the collapsing criteria is the test_tl field, which is a tie for documents 5 and 6, you'll need to use a function query as the collapse criteria to break the tie. \n\nSomething like this should do the trick:\n\n params.add(\"cf\", \"sum(field(test_tl),field(id))\") \n params.add(\"fq\", \"{!collapse field=group_s max=$cf)}\");\n\n "
        },
        {
            "author": "Umesh Prasad",
            "id": "comment-14036056",
            "date": "2014-06-18T18:05:45+0000",
            "content": "Hi Joel,\n    Actually the issue is with Collapsing picking up  group head. which is inconsistent with original grouping implementation. (manually verified). We have been using solr's grouping specification for collapsing our search results and it picks up the group head which would have come first as per sorting.\n        The trick to combine fields with sum/exponential etc will not work if field1 and field2's range differ drastically. Which is true for my case.\n\nPS : \n1.The original test case is incorrect. I am replacing it with another test case patch.\n2. I have made  progress by creating array of FieldValueCollapse from sort/min/max spec. Trying to get all test cases to work. Will attach it once ready.\n "
        },
        {
            "author": "Umesh Prasad",
            "id": "comment-14036062",
            "date": "2014-06-18T18:10:09+0000",
            "content": "Test case that demonstrates that group head picked by collapsing qparser is inconsistent with sort spec "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-14036081",
            "date": "2014-06-18T18:18:40+0000",
            "content": "Umesh,\n\nThe group head selection is independent of the sort criteria with the CollapsingQParserPlugin. So it's working as designed. Let's close this ticket out and move the discussion to the users list. I'd like to look closely at your use case and see if we can come up with a way to make it work with how the CollapsingQParserPlugin currently operates.  "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-14036404",
            "date": "2014-06-18T21:17:02+0000",
            "content": "Let's also consider how the recip() function query might be useful in a situation where the ranges differ drastically as you describe. \n\nfor example:\n\nfq={!collapse field=x max='sub(prod(field(y),10), recip(field(x),1,1000,1000))'}\n\n\n\n "
        },
        {
            "author": "Umesh Prasad",
            "id": "comment-14036857",
            "date": "2014-06-19T02:18:26+0000",
            "content": "Hi Joel,\nSure. we can take this forward on mailing list.\n\n To be explicit :\n1.  min/max param is equivalent to group.sort (both pick up the group heads)\n2.  group.sort  defaults to sort if not specified.  (standard collapsing) \n3. min/max defaults to score if not specified (CollapsingQParser)\n4. sort defaults to score if not specified and grouping is on ( as per https://cwiki.apache.org/confluence/display/solr/Result+Grouping)\n\nAs noted in 2 vs 3, the defaults are different. This is a very important difference.\n\nSo something like sort = seller_rank asc, ratings desc, function_query desc, popularity desc, score desc might end up giving completely different results.\n "
        },
        {
            "author": "Umesh Prasad",
            "id": "comment-14036879",
            "date": "2014-06-19T02:44:06+0000",
            "content": "    Also, under the hood, FieldValueCollapse actually uses a comparator for collapsing, which reads its value from a single source. (score/field/function). If collapsing comparator is composed out of multiple sub comparators (taken from sort spec), then min/max can default to sort field itself. \n       This will avoid translating sort, which is essentially a series of simple field/function based comparator,  to a single valued consistent function. (Not an easy task). Plus comparator based sort is more intuitive. "
        },
        {
            "author": "Umesh Prasad",
            "id": "comment-14040472",
            "date": "2014-06-23T07:00:55+0000",
            "content": "Okay .. Here is my first attempt at this ..   I am attaching this for comments if I am going in right direction \n\nChanges\n1. Added two more implementations of FieldValueCollapse  \n    ScoreValueCollapse for collapsing on score\n   StringValueCollapse for collapsing on global string ords.\n2. Implemented CompositeValueCollapse, \n     It gets sorts params and creates an array of FieldValueCollapse , which it calls in sequence.\n3. collapse,  returns NEXT_ACTION which can take ALIGN, BREAK or CONTINUE and is used by CompositiveValueCollapse to enable stable sort.\n4.  Added updateOrd(int ord, int contextDoc, int globalDoc) ,so that composite collapse can use to update its constituent ords.\n\nThe test cases pass mostly. However code is quite hacked as of now and there are no tests for testing sorting on string. Sharing of ords[]/scores[] between the different instances of FieldValueCollapse breaks encapsulation. I think FieldValueCollapse can be better replaced with CollapasingComparator in line of FieldComparator ..\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14731588",
            "date": "2015-09-04T23:14:29+0000",
            "content": "\nI was recently asked about this issue, and when i initially started digging into it got more and more confused.\n\nIt seems that fundementally, what happened here is that Umesh initially filled a bug regarding the way the collapse QParser selects the \"group head\" \u2013 but this bug report was based on a missunderstanding about what default behavior of CollapseQParser is when dealing with a sort param (as compared to the older GroupingCOmponent).\n\nThere was some key discussiong about this issue on the solr-user mailing list, which did not result in updating the summary/description of this issue, followed by Umesh attaching a patch ettempting to implement some changes in behavior.\n\nI have some thoughts on Umesh's approach, and my own suggestions, but before I get into that i want to make sure the situation is accurately represented in this Jira\n\n\n\nFirst off, some key discussion from the solr-user mailing list circa June 2014 that should really be captured directly in this issue.\n\n\n\thttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201406.mbox/%3CCAJc64EXgnPn-RiqgUYn=S_Wn5wPZsvtirEHP_nctZ-AFa=AxEw@mail.gmail.com%3E\n\thttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201406.mbox/%3CCAE4tqLP-jqBjrWB0Yr2vNs8J15qW8BwVK61hZOG=__EjFpJJgQ@mail.gmail.com%3E\n\thttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201406.mbox/%3CCAJc64EVQP=aSa6OfDSvPUdcOEA+-mO1USmLNfAFJgP4OeVbdSQ@mail.gmail.com%3E\n\n\n\nIn particular these comments from Joel...\n\n\nSo, the question is what is the cost (performance and memory) of having the\nCollapsingQParserPlugin choose the group head by using the Solr sort\ncriteria?\n\nKeep in mind that the CollapsingQParserPlugin's main design goal is to\nprovide fast performance when collapsing on a high cardinality field. How\nyou choose the group head can have a big impact here, both on memory\nconsumption performance.\n\nThe function query collapse criteria was added to allow you to come up with\ncustom formulas for selecting the group head, with little or no impact on\nperformance and memory. Using Solr's recip() function query it seems like\nyou could come up with some nice scenarios where two variables could be\nused to select the group head. For example:\n\n...\n\nAnd this respons from Umesh...\n\n\n...\n\nI agree 200 MB per request just for collapsing the search results is huge\nbut at least it increases linearly with number of sort fields.. For my use\ncase, I am willing to pay the linear cost specially when I can't combine\nthe sort fields intelligently into a sort function. Plus it allows me to\nsort by String/Text fields also which is a big win.\n\n...\n\n\n\nBased on the total comments regarding this issue, including the email discussion, i've revised the summary & description to make it clear:\n\n\n\tthis is a feature request\n\tthat the goal is to expand the options available to users of the collapse QParser by allowing \"group head\" documents to be selected by more complex sort options\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14731596",
            "date": "2015-09-04T23:19:55+0000",
            "content": "\nNow, in the context of this being a feature request, some comments based on my notes from the last few days...\n\n\n\nI have some concerns about hte appraoch taken in Umesh's patch (NOTE: patch appears to have been generated in reverse)...\n\n\n\tInstead of introducing a new option for letting users pick arbitrary sort criteria to select the group heads, it only allows using the top level 'sort' param for this (if the min/max local params are not specified)\n\t\n\t\tThis means that it breaks backcompat for existing users who use the collapse QParsers current default behavior of \"pick groupHead having highest score\" if they are alreayd using some other sort.\n\t\t\n\t\t\tThis is evident in some existing tests that the patch changes\n\t\t\n\t\t\n\t\tThis also means that it doesn't give users any (new) method of picking the group heads using a complex sort different from the sort that is applied after the collapse \u2013 so if you want the collapsed docs sorted by X, your only options for picking the groupHeads is to use X, or to use the min/max of a single field like today\n\t\n\t\n\tRather then re-using any of the existing document sort param parsing logic, or internal Sorting code from Solr/Lucene, Umesh's patch adds it's own (limited) parsing of the 'sort' param, to build up a data structure wrapped arround the existing simplistic min/max value groupHead selector logic\n\t\n\t\tthis means a lot of new hairy code\n\t\tthis also means Sorts with non-trivial clauses won't work at all, examples:\n\t\t\n\t\t\tfunction clauses\n\t\t\tfields that use sortMissingFirst or sortMissingLast\n\t\t\tcustom FieldType implementations that define their own sort logic.\n\t\t\n\t\t\n\t\n\t\n\n\n\n\n\nAfter reviewing Umesh's patch, and thinking about it a bit, I spent some time the past few days working up a straw man for an alternate approach that adds a new sort \"localparam\" and leverages the existing Lucene/Solr Sorting code to parse it and process it.  The idea being you could do something like this to select the group head docs based on a complex sort which is independent of the final sort used for the collapsed docs...\n\n\n{!collapse field=manu_id_s sort='price asc, popularity desc%'}\n\n\n\n...but you can still trivially use the same sort for both (like in Umesh's patch) by refrencing the top level sort as a variable...\n\n\n{!collapse field=manu_id_s sort=$sort}\n\n\n\n\nThe attached patch has the bare bones beginings of this approach, along with a simple test (addapted from Umesh's original patch).   It only supports collapsing on String fields at the moment, but the sort you choose to collapse on can be (almost) anything \u2013 So both of the above examples will/should work as expected using the \"techproducts\" example if you apply this patch to trunk...\n\n\n\thttp://localhost:8983/solr/techproducts/select?fl=id,manu_id_s,price,weight,popularity&q=*:*&sort=weight+asc&fq=%7b!collapse%20field=manu_id_s%20sort=%27price%20asc,%20popularity%20desc%27%7d\n\thttp://localhost:8983/solr/techproducts/select?fl=id,manu_id_s,weight&q=*:*&sort=weight+asc&fq=%7b!collapse%20field=manu_id_s%20sort=$sort%7d\n\n\n\n\nFrom what i can tell, this general approach should still work fairly consisntly when collapsing on non-string field types, it's just going to require some (seemingly) straight forward new code & refactoring. (and of course lots of tests).  There's also several nocommits in the patch related to some refactoring that i think will be neccessary to address some edge cases issues (notably arround using \"cscore()\" inside of an arbitrary sort expression), but i'm pretty confident that the general appraoch is sound.\n\nI plan to continue working on this approach over the next few weeks, focusing first on more test cases \u2013 but I wanted to get this initial patch out there for discussion in case anyone had strong opinions about it, or sees any fundemental flaws with the design.\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14804467",
            "date": "2015-09-17T20:44:10+0000",
            "content": "Updated patch.\n\nNo major functionality additions/improvements, just new tests \u2013 notably some new randomized testing that uncovered LUCENE-6808, so this patch actaully includes the patch I posted there in it's entirety for easy testing.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14804701",
            "date": "2015-09-17T23:27:49+0000",
            "content": "EDIT: Deleted comment that was ment for LUCENE-6808 (and ultimately posted there correctly) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14901704",
            "date": "2015-09-22T01:04:19+0000",
            "content": "Updated patch...\n\n\n\tcollapsing on int & float fields now works\n\t\n\t\tNOTE: randomized testing of collapsing on docValues float fields is disabled with nocommit\n\t\tSOLR-8082 prevents the verification queries from matching any docs when quering the float field\n\t\n\t\n\tmore testing of various nullPolicies and initial \"size\" localparams\n\tmore test coverage in TestCollapseQParserPlugin\n\t\n\t\tsome of this new testing is explicitly of the new sort local param\n\t\tsome general tweaking of testNumericCollapse & testStringCollapse to test all of the specified field names every time, not just 1 at random (only fractions of a second slower then before\n\t\n\t\n\n "
        },
        {
            "author": "David Boychuck",
            "id": "comment-14908446",
            "date": "2015-09-25T18:15:51+0000",
            "content": "Does it make sense to include SOLR-6345 in this work? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14934407",
            "date": "2015-09-29T00:39:40+0000",
            "content": "\nDoes it make sense to include SOLR-6345 in this work?\n\nI don't think so?\n\n\n\tNothing about this improvement relates to faceting or tagging/excluding, nor should any of the changes impact any existing code related to the faceting/tagging/excluding (unless i'm missing something, that's all external to the implemenation of the CollapseFilter)\n\tSOLR-6345 doesn't even seem to even have an identified root cause, so trying to fold in a fix for that with this issue seems like it would just unneccessarily stall this improvement.\n\n\n\n\n\nUpdated patch...\n\n\n\tadded randomized test coverage of nullPolicy + sort localparam\n\tupdated randomized test with a (verification) work around for SOLR-8082\n\tadded testing of sort param with elevation componanet\n\tadded error checking + tests for tying to use more then one of min/max/sort localparams\n\tmade all of CollapsingQParserPlugin's nested classes static\n\t\n\t\tnot specific to this issue, but a worthwhile code cleanup \u2013 there was no reason for them not to be static before and it was really bugging me while reading/debugging\n\t\n\t\n\tcreated a new GroupHeadSelector class to encapsulate min vs max vs sort options\n\t\n\t\trefactored existing code to pass down GroupHeadSelector instances instead of \"String min|max\" and \"boolean max\" args\n\t\n\t\n\tcleanedup & refactored the needsScores init logic to use existing helper methods in ReturnFields & SortSpec and fixed it to ensure the IndexSearcher flag would always be set\n\t\n\t\tsolves the case of a 'sort' local parmam needing scores even nothing about top level request does (ie: no scores used in top sort or fl)\n\t\n\t\n\trefactored existing \"cscore\" init logic into a helper method that inspects GroupHeadSelector\n\n\n\n...that last bit of refactoring was done with the intention of re-using the cscore method/logic to suport (group head selecting) Sorts that included a function which include/wrap \"cscore()\" ... but the basic tests i'd tried to write to cover this case didn't work, and the more i looked into it and thought about it i realized this is actualy very tricky.  The way \"Sort\" objects are rewritten relative to a Searcher delegates the rewriting to each individual SortField.  If a SortField is rewritable, then it internally does it's rewriting and constructs a new clean (Map) context in the individual SortField clauses.  Even if we wanted to keep track of all the maps from every SortField and put the same CollapseScore object in them, there's no uniform/generic way to access those context Maps from an arbitrary SortField.  I don't have any clean sollutions in mind, so for now i've punted on this and made the code throw an explicit error if you try to use \"cscore()\" with the sort local param.\n\n\nI think this patch is pretty much ready to go, but i want to sleep on it and give it at least one more full read through before committing.\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-14935105",
            "date": "2015-09-29T12:45:36+0000",
            "content": "BTW I really appreciate your thorough patch notes. Nice job! "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-14935243",
            "date": "2015-09-29T14:28:03+0000",
            "content": "Yes, I second that. I've been following pretty closely but unfortunately haven't had a chance to review. I know this is a pretty big piece of work. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14985780",
            "date": "2015-11-02T19:04:05+0000",
            "content": "\na few updates...\n\n\n\tUpdated patch to trunk\n\tFixed an NPE in the edge case that sort='score desc' is used (can't believe i missed that before ... bug existed because of existing SortSpec optimizations that recognize that as a default sort)\n\tMade some additions to QueryEqualityTest to sanity check equivalence with new sort local param\n\n\n\n...still testing. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15003130",
            "date": "2015-11-12T22:52:07+0000",
            "content": "Commit 1714133 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1714133 ]\n\nSOLR-6168: Add a 'sort' local param to the collapse QParser to support using complex sort options to select the representitive doc for each collapsed group "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15003189",
            "date": "2015-11-12T23:24:06+0000",
            "content": "\nFinally getting back to this ... \n\nDid a bunch of manual testing offline w/o spotting any problems, so i went ahead and commited to trunk.\n\nbackport to 5x was fairly clean, testing/precommiting now.\n\nAssuming nothing weird  jumps out, I'll let jenkins hammer on trunk overnight and then commit the  backport tomorrow. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15004187",
            "date": "2015-11-13T16:11:53+0000",
            "content": "Commit 1714234 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1714234 ]\n\nSOLR-6168: Add a 'sort' local param to the collapse QParser to support using complex sort options to select the representitive doc for each collapsed group (merge 1714133) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15006073",
            "date": "2015-11-15T22:40:01+0000",
            "content": "Ref guide updated...\n\nhttps://cwiki.apache.org/confluence/display/solr/Collapse+and+Expand+Results "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-15006906",
            "date": "2015-11-16T16:47:17+0000",
            "content": "ASF Jenkins found a reproducible NPE in a new test committed under this issue - see SOLR-8295 "
        }
    ]
}