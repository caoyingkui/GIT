{
    "id": "SOLR-5320",
    "title": "Multi level compositeId router",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This would enable multi level routing as compared to the 2 level routing available as of now. On the usage bit, here's an example:\n\nDocument Id: myapp!dummyuser!doc\nmyapp!dummyuser! can be used as the shardkey for searching content for dummyuser.\nmyapp! can be used for searching across all users of myapp.\n\nI am looking at either a 3 (or 4) level routing. The 32 bit hash would then comprise of 8X4 components from each part (in case of 4 level).\n\nUsage:\n\nDocument Id: myapp!dummyuser!doc\n\nTo query all users for a particular app (default setup), the route key should be: 'myapp/8!'.\nTo query a particular user for a specific app, the route key should be: 'myapp!dummyuser!'\n\nThe syntax for querying all users for a particular app is required because this router works at both 2 and 3 level of composite id.\nA route key of 'myapp!' would technically translate to constructing the hash range with 16 bits coming from the key i.e. 2-level composite id.",
    "attachments": {
        "SOLR-5320.patch": "https://issues.apache.org/jira/secure/attachment/12609814/SOLR-5320.patch",
        "SOLR-5320-refactored.patch": "https://issues.apache.org/jira/secure/attachment/12609910/SOLR-5320-refactored.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Anshum Gupta",
            "id": "comment-13792478",
            "date": "2013-10-11T09:15:23+0000",
            "content": "A 3 level composite id routing to begin with is what I think would be good.\nI'd use 8 bits each from the first 2 components of the key and 16 bits from the last component.\nFunctionally, this should work on similar lines as the current 2-level composite id routing. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13796585",
            "date": "2013-10-16T09:06:08+0000",
            "content": "My initial thought about splitting the 32 bits forced me to have a separate router that extended the composite id router.\nHere's the original thought:\n\nDocument Id: myapp!dummyuser!doc\nThis could also look like: myapp/numBits1!dummyuser/numBits2!doc\nwhere numBits* are less than or equal to 8 (or not present, when it defaults to 8).\n\nConsidering have 8/8/16 bits split between the 3 components of the id.\nThe point of concern is, in case numBits = 1 (or any other number), how to split the remaining 7 bits or rather 31.\nI was trying to equally split the remainder among the 2 components (not really cleanly possible in case of odd bits).\n\nI plan on adding remainder bits to the component that is derived from the docId i.e. 16+7. The new split becomes 1/8/23 bits among the components.\n\nWith that in place, I can just change compositeId router to also cater to 3-level composite id routing.\n\nThoughts? "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13796627",
            "date": "2013-10-16T10:09:21+0000",
            "content": "Adding to that, if the user wants to override the default numBits, everything would be borrowed/lent back to the document id component i.e. the 3rd component (c in the example below).\ne.g. : a!b!c "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13802666",
            "date": "2013-10-23T07:24:50+0000",
            "content": "Working on refactoring and testing this.\nWill be uploading a refactored test later in the day. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13802869",
            "date": "2013-10-23T13:27:37+0000",
            "content": "The router object should be immutable and threadsafe. you are not supposed to change the state (I am referring to the masks)\nI see repetition of the same code across multiple methods . Can you not put the entire logic in one place and reuse ? "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13802875",
            "date": "2013-10-23T13:43:23+0000",
            "content": "Noble Paul Yes, I already realized that and have a patch almost ready. Will just put that up in some time. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13803230",
            "date": "2013-10-23T19:51:12+0000",
            "content": "Refactored and fixed thread safety (+other) issues. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13804094",
            "date": "2013-10-24T11:51:07+0000",
            "content": "refactored and cleaned up "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13804135",
            "date": "2013-10-24T12:50:11+0000",
            "content": "Thanks for taking a look at that Noble. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13809465",
            "date": "2013-10-30T18:43:12+0000",
            "content": "Some minor changes. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13813731",
            "date": "2013-11-05T07:55:07+0000",
            "content": "Fixed a mask calculation related issue. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13813751",
            "date": "2013-11-05T08:19:28+0000",
            "content": "Yonik Seeley it'd be great if you could have a look at this and give some feedback. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13817066",
            "date": "2013-11-08T07:06:43+0000",
            "content": "Syncing with trunk. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13823332",
            "date": "2013-11-15T06:06:21+0000",
            "content": "Added more test coverage.\n\nThe new test adds documents with tri-level ids and validates that a single route-key maps to a single shard only. "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13823376",
            "date": "2013-11-15T07:30:35+0000",
            "content": "Added a test for composite ids with randomised bitMask. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13823677",
            "date": "2013-11-15T14:02:01+0000",
            "content": "Commit 1542272 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1542272 ]\n\nSOLR-5320: Added support for tri-level compositeId routing "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13826394",
            "date": "2013-11-19T11:14:06+0000",
            "content": "Commit 1543382 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1543382 ]\n\nSOLR-5320: Added support for tri-level compositeId routing. Also merged javadoc fixes and forbidden-api fixes from r1542305, r1542321 "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13826401",
            "date": "2013-11-19T11:24:50+0000",
            "content": "Thanks Anshum! "
        }
    ]
}