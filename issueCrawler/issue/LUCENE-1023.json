{
    "id": "LUCENE-1023",
    "title": "When the index has more than 1 segment, norms take 2 bytes of RAM per norm not 1",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.9,                                            2.0.0,                                            2.1,                                            2.2,                                            2.3",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "When norms are loaded for an index with multiple segments,\nMultiSegmentReader caches a byte array for all norms (concatenated\nfrom all segments), and SegmentReader also caches a byte array for its\nnorms.  I think MultiSegmentReader should somehow tell SegmentReader\nnot cache its own norms.  For a large index this will save quite a bit\nof memory (1 byte per document per field-with-norms).",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-10-07T11:46:21+0000",
            "content": "Woops ... I was mistaken here.  MultiSegmentReader calls this method on each SegmentReader:\n\n    norms(String field, byte[] result, int offset)\n\nand that method does not populate the cache inside SegmentReader (though it will use it if it's already populated).  MultiReader does the same thing too.\n\nSo this is not an issue. ",
            "author": "Michael McCandless",
            "id": "comment-12532960"
        }
    ]
}