{
    "id": "LUCENE-2108",
    "title": "SpellChecker file descriptor leak - no way to close the IndexSearcher used by SpellChecker internally",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spellchecker"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.0.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "3.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I can't find any way to close the IndexSearcher (and IndexReader) that\nis being used by SpellChecker internally.\n\nI've worked around this issue by keeping a single SpellChecker open\nfor each index, but I'd really like to be able to close it and\nreopen it on demand without leaking file descriptors.\n\nCould we add a close() method to SpellChecker that will close the\nIndexSearcher and null the reference to it? And perhaps add some code\nthat reopens the searcher if the reference to it is null? Or would\nthat break thread safety of SpellChecker?\n\nThe attached patch adds a close method but leaves it to the user to\ncall setSpellIndex to reopen the searcher if desired.",
    "attachments": {
        "LUCENE-2108-SpellChecker-close.patch": "https://issues.apache.org/jira/secure/attachment/12426802/LUCENE-2108-SpellChecker-close.patch",
        "LUCENE-2108_test_java14.patch": "https://issues.apache.org/jira/secure/attachment/12427071/LUCENE-2108_test_java14.patch",
        "LUCENE-2108_Lucene_2_9_branch.patch": "https://issues.apache.org/jira/secure/attachment/12427097/LUCENE-2108_Lucene_2_9_branch.patch",
        "LUCENE-2108.patch": "https://issues.apache.org/jira/secure/attachment/12426812/LUCENE-2108.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-12-03T20:11:58+0000",
            "content": "Patch that adds a close method to SpellChecker. The method calls close on the searcher used and then nulls the reference so that a new IndexSearcher will be created by the next call to setSpellIndex ",
            "author": "Eirik Bjorsnos",
            "id": "comment-12785477"
        },
        {
            "date": "2009-12-03T20:16:29+0000",
            "content": "Shouldn't the new close() method be public? ",
            "author": "Michael McCandless",
            "id": "comment-12785484"
        },
        {
            "date": "2009-12-03T20:22:51+0000",
            "content": "Haha, this is why I said the patch should be \"pretty\" trivial, instead of just \"trivial\" \n\nYes, it should certainly be private. No idea how that happend. Must have been sleeping at the keyboad. ",
            "author": "Eirik Bjorsnos",
            "id": "comment-12785492"
        },
        {
            "date": "2009-12-03T20:32:50+0000",
            "content": "Note that you said \"private\" again   I'm starting to wonder if you are not human!  Is this a turing test?\n\nOK, ok, I'll make it public, and port back to the 3.0 branch! ",
            "author": "Michael McCandless",
            "id": "comment-12785500"
        },
        {
            "date": "2009-12-03T20:35:43+0000",
            "content": "\nDude, you have be to a human to make mistakes as stupid as these!\n\n(pubic void close, public void close, public void close...) ",
            "author": "Eirik Bjorsnos",
            "id": "comment-12785504"
        },
        {
            "date": "2009-12-03T20:38:10+0000",
            "content": "Dude, you have be to a human to make mistakes as stupid as these!\n\nGood point \n ",
            "author": "Michael McCandless",
            "id": "comment-12785507"
        },
        {
            "date": "2009-12-03T20:38:35+0000",
            "content": "Thanks Eirik! ",
            "author": "Michael McCandless",
            "id": "comment-12785508"
        },
        {
            "date": "2009-12-03T21:14:02+0000",
            "content": "Mike / Eirik,\n\nIf you set the searcher to null you might risk a NPE if suggestSimilar() or other methods are called afterwards. I would like to see something like ensureOpen() which throws an AlreadyClosedException  or something similar. I will upload a suggestion in a second but need to run so tread it just as a suggestion.\n\nSimon  ",
            "author": "Simon Willnauer",
            "id": "comment-12785527"
        },
        {
            "date": "2009-12-03T21:14:42+0000",
            "content": "Something like that would be more appropriate IMO ",
            "author": "Simon Willnauer",
            "id": "comment-12785528"
        },
        {
            "date": "2009-12-03T21:19:48+0000",
            "content": "Simon,\n\nYes, that sound excactly like what I was thinking when I said \"some code\nthat reopens the searcher if the reference to it is null\".\n\nI just didn't include it in my patch because I couldn't figure out how to do it properly.\n\nI'd assume ensureOpen needs to be synchronized some way so that two threads can't open IndexSearchers concurrently?\n ",
            "author": "Eirik Bjorsnos",
            "id": "comment-12785531"
        },
        {
            "date": "2009-12-03T21:21:13+0000",
            "content": "Reopening to get the AlreadyClosedException in there... ",
            "author": "Michael McCandless",
            "id": "comment-12785532"
        },
        {
            "date": "2009-12-03T21:35:14+0000",
            "content": "Well not exactly. Simon's suggestion was just to throw an AlreadyClosedException instead of a NullPointerException which is probably ok and definitely easier. ",
            "author": "Eirik Bjorsnos",
            "id": "comment-12785541"
        },
        {
            "date": "2009-12-03T22:03:36+0000",
            "content": "I'd assume ensureOpen needs to be synchronized some way so that two threads can't open IndexSearchers concurrently?\n\nthis class is not threadsafe anyway. If you look at this snippet:\n\n // close the old searcher, if there was one\nif (searcher != null) {\n  searcher.close();\n}\nsearcher = new IndexSearcher(this.spellIndex, true);\n\n\nthere could be a race if you concurrently reindex or set a new dictionary. IMO this should either be documented or made threadsafe. The close method should invalidate the spellchecker - it should not be possible to use a already closed Spellchecker.\nThe searcher should be somehow ref counted so that if there is a searcher still in use you can concurrently reindex / add a new dictionary to ensure that the same searcher is used throughout suggestSimilar(). \n\nI will take care of it once I get back tomorrow. ",
            "author": "Simon Willnauer",
            "id": "comment-12785563"
        },
        {
            "date": "2009-12-03T22:08:31+0000",
            "content": "Just a reminder - we need to fix the CHANGES.TXT entry once this is done.  ",
            "author": "Simon Willnauer",
            "id": "comment-12785567"
        },
        {
            "date": "2009-12-03T22:57:03+0000",
            "content": "Mike,\n\nPlease account for my demonstrated stupidity when considering this suggestion for thread safety policy / goals:\n\n1) Concurrent invocations of  suggestSimilar() should not interfere with each other.\n2) An invocation of any of the write methods (setSpellIndex, clearIndex, indexDictionary) should not interfere with aleady invoked suggestSimilar\n3) All calls to write methods should be serialized (We could probably synchronize these methods?)\n\nIf we synchronize any writes to the searcher reference, couldn't suggestSimilar just start its work by putting searcher in a local variable and use that instead of the field?\n\nI guess concurrency is hard to get right..  ",
            "author": "Eirik Bjorsnos",
            "id": "comment-12785603"
        },
        {
            "date": "2009-12-03T23:01:19+0000",
            "content": "Eirik, could you open a new issue to address SpellChecker's non-thread-safety?  I actually thing simply documenting clearly that it's not thread safe is fine. ",
            "author": "Michael McCandless",
            "id": "comment-12785605"
        },
        {
            "date": "2009-12-03T23:02:03+0000",
            "content": "Just a reminder - we need to fix the CHANGES.TXT entry once this is done.\n\nSimon how about you do this, and take this issue (to commit your improvement to throw ACE not NPE)?  Thanks  ",
            "author": "Michael McCandless",
            "id": "comment-12785606"
        },
        {
            "date": "2009-12-04T10:54:08+0000",
            "content": "Eirik, could you open a new issue to address SpellChecker's non-thread-safety? I actually thing simply documenting clearly that it's not thread safe is fine.\nMike, IMO thread-safety and close() are closely related. If you close the spellchecker you don't want other threads to access the spellchecker anymore. I would keep that inside this issue and rather add close + make it threadsafe in one go.\nSince spellchecker instances are shared between threads already we should rather try to make it thread-safe than documenting it. I see this as a bug though as you really want to share the spellchecker (essentially the searcher) instance instead of opening one for each thread. ",
            "author": "Simon Willnauer",
            "id": "comment-12785866"
        },
        {
            "date": "2009-12-04T11:20:34+0000",
            "content": "I would keep that inside this issue and rather add close + make it threadsafe in one go.\n\nOK that sounds good then! ",
            "author": "Michael McCandless",
            "id": "comment-12785881"
        },
        {
            "date": "2009-12-04T12:29:28+0000",
            "content": "This patch adds a close operation to SpellChecker and enables thread-safety.\nI added a testcase for concurrency as well as the close method - comments and review welcome! ",
            "author": "Simon Willnauer",
            "id": "comment-12785906"
        },
        {
            "date": "2009-12-04T16:12:19+0000",
            "content": "Some feedback on the patch:\n\n\n\tIf you back-port this to 2.9, you can't use any of the\n    java.util.concurrent.*\n\n\n\n\n\tI'm not sure you need a separate SearcherHolder class \u2013 can't you\n    re-use IndexReader's decRef/incRef?\n\n\n\n\n\tYou don't need to do this.XXX in most places (maybe you're coming\n    from eg Python?  ).\n\n\n\n\n\tMaybe rename \"releaseNewSearcher\" -> \"swapSearcher\"?  (Because it\n    releases the old one and installs the new one).\n\n\n\n\n\tI think there are some thread safety issues \u2013 eg\n    getSearcherHolder isn't sync'd, so, when you incRef\n    this.searcherHolder at the start, but then return\n    this.searcherHolder at the end, it could be two different\n    instances.\n\n ",
            "author": "Michael McCandless",
            "id": "comment-12785978"
        },
        {
            "date": "2009-12-04T17:33:24+0000",
            "content": "If you back-port this to 2.9, you can't use any of the java.util.concurrent.*\nVery good point! - didn't thought about back porting at all.\n\n\nI'm not sure you need a separate SearcherHolder class - can't you re-use IndexReader's decRef/incRef?\nI guess I did not see the simplicity the reader offers - blind due to  java.util.concurrent.* \n\nI think there are some thread safety issues.. \nthis is weird - on my dev machine and in the patch it is not synchronized.. on the machine I run the tests it is. Anyway you are right.\n\n\nI changed the code to be compatible with 2.9 using indexReaders.dec/incRef.. will attache in a minute\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-12786016"
        },
        {
            "date": "2009-12-04T17:34:17+0000",
            "content": "updated patch - this one does not use a Holder class or any java 5 classes for backcompat with 2.9 ",
            "author": "Simon Willnauer",
            "id": "comment-12786017"
        },
        {
            "date": "2009-12-04T18:11:46+0000",
            "content": "Looks good!  Nice and simple.\n\nOnly small concern... you hold the lock while opening the new searcher.  It would be better to open the new searcher without the lock, then only acquire the lock to do the swap; this way any respell requests that come in don't block while the searcher is being opened (because obtainSearcher() needs to get the lock). ",
            "author": "Michael McCandless",
            "id": "comment-12786048"
        },
        {
            "date": "2009-12-04T19:03:55+0000",
            "content": "Only small concern... you hold the lock while opening the new searcher....\nI fixed that one - very important for performance though!\n\nI found another issue, write access is not synchronized at all so it is possible to concurrently reindex or at least call indexDictionary() concurrently. In the first place this is not a huge issue as the writer will raise an exception but if the spellIndex is reset while the indexDicitonary is still in progress we could have inconsistencies with searcher and spellindex.\nI added another lock for write operations for now,  ",
            "author": "Simon Willnauer",
            "id": "comment-12786075"
        },
        {
            "date": "2009-12-04T20:43:09+0000",
            "content": "Patch looks good Simon! ",
            "author": "Michael McCandless",
            "id": "comment-12786148"
        },
        {
            "date": "2009-12-04T23:34:27+0000",
            "content": "I will commit this tomorrow if nobody objects. ",
            "author": "Simon Willnauer",
            "id": "comment-12786239"
        },
        {
            "date": "2009-12-05T12:19:24+0000",
            "content": "committed in revision 887532\n\nMike, thanks for review. We should backport this change to 2.9 - can you commit that please, I can not though. ",
            "author": "Simon Willnauer",
            "id": "comment-12786378"
        },
        {
            "date": "2009-12-05T13:35:07+0000",
            "content": "We should backport this change to 2.9 - can you commit that please, I can not though.\n\nAnd, to 3.0.  OK will do... ",
            "author": "Michael McCandless",
            "id": "comment-12786406"
        },
        {
            "date": "2009-12-05T14:20:20+0000",
            "content": "Mike, I just realized that we need to change the test as it uses java5\nclasses. I will provide you a patch compatible w. 1.4 later.\n\nOn Dec 5, 2009 2:35 PM, \"Michael McCandless (JIRA)\" <jira@apache.org> wrote:\n\n\n   [\nhttps://issues.apache.org/jira/browse/LUCENE-2108?page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel&focusedCommentId=12786406#action_12786406]\n\nMichael McCandless commented on LUCENE-2108:\n--------------------------------------------\n\nWe should backport this change to 2.9 - can you commit that please, I\ncan not though.\n\nAnd, to 3.0.  OK will do...\n\nby SpellChecker internally\n-----------------------------------------------------------------------------------------------------\nLUCENE-2108.patch, LUCENE-2108.patch, LUCENE-2108.patch, LUCENE-2108.patch\n\n\u2013\nThis message is automatically generated by JIRA.\n-\nYou can reply to this email to add a comment to the issue online. ",
            "author": "Simon Willnauer",
            "id": "comment-12786410"
        },
        {
            "date": "2009-12-05T20:53:41+0000",
            "content": "I ran into index corruption during stress testing in SOLR-785. After upgrading contrib-spellcheck to lucene trunk, those issues are no longer reproducible. You guys have saved me a lot of time \n\nThanks for fixing this! ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12786497"
        },
        {
            "date": "2009-12-05T21:14:17+0000",
            "content": "Thanks for fixing this!\nYW! very good feedback - I will port it to 2.9 soon.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12786506"
        },
        {
            "date": "2009-12-05T22:30:38+0000",
            "content": "Mike, I changed the testcase to be 1.4 compatible this might help you to merge the spellchecker into 2.9.1 since I can not commit into branches.\nIt does not make sense to create a patch against the branch as you really want the mergeinfo and don't do it by patching things in branches. \n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12786520"
        },
        {
            "date": "2009-12-06T10:18:03+0000",
            "content": "Backported to 3.0... 2.9 next. ",
            "author": "Michael McCandless",
            "id": "comment-12786595"
        },
        {
            "date": "2009-12-06T10:40:40+0000",
            "content": "SImon, any chance you could work out the patch for SpellChecker.java on 2.9.x as well?  I got a zillion conflicts on \"svn merge\"   Thanks! ",
            "author": "Michael McCandless",
            "id": "comment-12786599"
        },
        {
            "date": "2009-12-06T14:46:04+0000",
            "content": "Mike, I merged the branch with our current trunk and fixed all 1.5 code to compile and run with 1.4\nHope that helps  ",
            "author": "Simon Willnauer",
            "id": "comment-12786621"
        },
        {
            "date": "2009-12-06T15:25:57+0000",
            "content": "OK committed on 2.9 as well \u2013 thanks Simon! ",
            "author": "Michael McCandless",
            "id": "comment-12786626"
        },
        {
            "date": "2010-01-07T17:18:15+0000",
            "content": "It would be nice if the SpellChecker implements the java.io.Closeable interface (Java 1.5)  ",
            "author": "Achim Heiland",
            "id": "comment-12797691"
        },
        {
            "date": "2010-01-07T17:22:46+0000",
            "content": "+1, because everything else that has close() in Lucene now implements this. ",
            "author": "Uwe Schindler",
            "id": "comment-12797693"
        },
        {
            "date": "2010-01-07T17:31:08+0000",
            "content": "Created sep. issue for that purpose LUCENE-2196 ",
            "author": "Simon Willnauer",
            "id": "comment-12797697"
        },
        {
            "date": "2010-01-07T17:33:55+0000",
            "content": "Committed, thanks! ",
            "author": "Uwe Schindler",
            "id": "comment-12797699"
        }
    ]
}