{
    "id": "LUCENE-3938",
    "title": "Add query time parent child search",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/join"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "At the moment there is support for index time parent child search with two queries implementations and a collector. The index time parent child search requires that documents are indexed in a block, this isn't ideal for updatability. For example in the case of tv content and subtitles (both being separate documents). Updating already indexed tv content with subtitles would then require to also re-index the subtitles.\n\nThis issue focuses on the collector part for query time parent child search. I started a while back with implementing this. Basically a two pass search performs a parent child search. In the first pass the top N parent child documents are resolved. In the second pass the parent or top N children are resolved (depending if the hit is a parent or child) and are associated with the top N parent child relation documents. Patch will follow soon.",
    "attachments": {
        "LUCENE-3938.patch": "https://issues.apache.org/jira/secure/attachment/12520619/LUCENE-3938.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-30T16:25:47+0000",
            "content": "Added initial patch with random test.\n\nCode usage:\n\nParentChildCommand command = new ParentChildCommand();\n...\ncommand.setParentField(\"fieldA\");\ncommand.setChildField(\"fieldB\");\ncommand.setTypeField(\"typeField\");\ncommand.setGroupChild(true);\n..\nTermTopParentChildCollector topParentChildCollector = new TermTopParentChildCollector(command);\nindexSearcher.search(query, topParentChildCollector);\nParentChildResult result = topParentChildCollector.getParentChildResult();\nTermParentChildResolveCollector parentChildResolveCollector = new TermParentChildResolveCollector(result, command);\nindexSearcher.search(command.childrenQuery(), parentChildResolveCollector);\n\n// render results\nSystem.out.println(\"Hit count\" + result.hitCount)\nfor (ParentChildDoc hit : result.docs) {\n   ScoreDoc parentDoc = hit.getParentDoc();\n   TopDocs children = hit.getChildDocs();\n   // render hit\n}\n\n\n\n\nIt also possible to group parent child hits. For example if many subtitles of the same program are matching with a query, this could pollute the result. If this \"grouping\" is used only the most relevant matching document of a parent child document is kept. ",
            "author": "Martijn van Groningen",
            "id": "comment-13242507"
        },
        {
            "date": "2012-04-01T16:08:07+0000",
            "content": "\nI don't fully grok this yet  ... but some initial questions:\n\nI'm confused: when you say \"parent child document\", what does that\nmean...?  I thought there are \"parent documents\" and \"child\ndocuments\", in the context of a given join?\n\nOr do you mean \"parent or child\" document...?  Ie, it looks like your\nQuery is free to match both parent and child documents...?  (Unlike\nindex-time joins).  But then you also have a childrenQuery, which is\nonly allowed to match docs in the child space...?\n\nMinor: there's an @author tag in ParentChildCommand\n\nMinor: maybe break out ParentChildHit into its own source file...? ",
            "author": "Michael McCandless",
            "id": "comment-13243763"
        },
        {
            "date": "2012-04-01T20:58:50+0000",
            "content": "Thanks for taking a look at it!\n\nI'm confused: when you say \"parent child document\", what does that mean...?\nYes, that is confusing... I actually meant parent child relation. The TopParentChildCollector collects the top N matching parent child relations. The ParentChildResolveCollector collects parent and child documents belonging to the top N parent child relations. \n\nIe, it looks like your Query is free to match both parent and child documents...? (Unlike index-time joins).\nBasically the collectors make a parent child result list for any documents matching any query, so that is a difference between index time join impl and this impl. \n\nMinor: maybe break out ParentChildHit into its own source file...?\nSure and if the ParentChildHit is a public class then the ParentChildDoc class can be merged with the ParentChildHit class. I think that makes it more clear. ",
            "author": "Martijn van Groningen",
            "id": "comment-13243854"
        },
        {
            "date": "2012-05-07T20:19:44+0000",
            "content": "Updated patch. \n\n\tAdded simple test case that shows a simple use case.\n\tRemoved groupParent and groupChild in favor of disAllowHitsFromTheSameRelation in ParentChildCommand class.\n\n ",
            "author": "Martijn van Groningen",
            "id": "comment-13269970"
        }
    ]
}