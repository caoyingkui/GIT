{
    "id": "LUCENE-2154",
    "title": "Need a clean way for Dir/MultiReader to \"merge\" the AttributeSources of the sub-readers",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The flex API allows extensibility at the Fields/Terms/Docs/PositionsEnum levels, for a codec to set custom attrs.\n\nBut, it's currently broken for Dir/MultiReader, which must somehow share attrs across all the sub-readers.  Somehow we must make a single attr source, and tell each sub-reader's enum to use that instead of creating its own.  Hopefully Uwe can work some magic here",
    "attachments": {
        "LUCENE-2154-cglib.patch": "https://issues.apache.org/jira/secure/attachment/12435713/LUCENE-2154-cglib.patch",
        "LUCENE-2154-Jakarta-BCEL.patch": "https://issues.apache.org/jira/secure/attachment/12437501/LUCENE-2154-Jakarta-BCEL.patch",
        "LUCENE-2154.patch": "https://issues.apache.org/jira/secure/attachment/12435565/LUCENE-2154.patch",
        "ASF.LICENSE.NOT.GRANTED--LUCENE-2154-Jakarta-BCEL.patch": "https://issues.apache.org/jira/secure/attachment/12441388/ASF.LICENSE.NOT.GRANTED--LUCENE-2154-Jakarta-BCEL.patch",
        "LUCENE-2154-javassist.patch": "https://issues.apache.org/jira/secure/attachment/12435721/LUCENE-2154-javassist.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-12-11T22:11:46+0000",
            "content": "I have an idea, but please don't hurt me, it uses reflection.\nWhat is needed:\nLike in the TokenStream BW layer, we had a class called TokenWrapper that implemented all interfaces for basic Tokens but was a wrapper around a Token. This Token was exchangeable.\nThe idea for this case is:\n\n\tDirReader/MultiReader cannot share thesame AttributeSource at all, because e.g. if th DirReader's enum first tries to call next() on on the first enum, the attributes are overriden. If DirrReader then instead also calls next() on the second sub-enum, the data of the first is overriden and cannot be restaured. The idea is now, to have the same Wrapper like TokenWrapper, where the interface impls behind can be exchanged, so the Dir/MultiReader enum just points its own attribute wrapper to the correct attributeset behind.\n\tThe problem are custom attributes or e.g. BoostAttribute. Nobody knows what attributes may be generated, so it is impossible to create an wrapper for all.\nBut Java has a solution: http://java.sun.com/j2se/1.5.0/docs/api/java/lang/reflect/Proxy.html. This class implements a proxy stub for a set of interfaces (you just pass all interfaces needed) andthe returned object can be added to the local DirReader/MultiReaders enum attsource using addAttribute(). You only have to point to a implementation class that gets the Method reference and calls the corresponding method in the current interface (Like the actual Token in TokenWrapper) of the sub-enum.\n\n\n\nSounds like ugly magic, but I have to test how fast it is and how it exactly works with AttributeSource. But the proxy instances could be cached like the TokenStream BW compatibility. ",
            "author": "Uwe Schindler",
            "id": "comment-12789571"
        },
        {
            "date": "2009-12-11T22:28:16+0000",
            "content": "Good grief... pulling out the heavy guns here! ",
            "author": "Michael McCandless",
            "id": "comment-12789580"
        },
        {
            "date": "2009-12-13T11:30:22+0000",
            "content": "I tried to implement that with JDK's reflect.Proxy, which would be really cool, but sucess stopped once I reached the point that the attribute interface implementation must subclass AttributeImpl vs. generated proxies subclass reflect.Proxy.\nA fix would be to use cglib, but that would be an external reference. With cglib it would even be possible to autogenerate a fast proxy without reflection at all (e.g. using the Emitter class on the lowest level)!\n\nThe only current solution I see is to enforce all Attributes not only to implement a *Impl, but also provide a class *Proxy, that respects the above code. But this classes would be so stupid (only contain a modifiable delegate of the same attribute type and forward all methods to it). Cglib code that does this is hard stuff, but simply to implement. ",
            "author": "Uwe Schindler",
            "id": "comment-12789875"
        },
        {
            "date": "2010-02-09T15:16:01+0000",
            "content": "Sorry in advance, maybe what I am saying is out of scope due to my partial understanding of the problem.\n\nI have start to look at the problem, in order to be able to use my own attributes from my own DocsAdnPositionsEnum classes.\nwould it not be simpler to create a MultiAttributeSource that is instantiated in the MultiDocsAndPositionsEnum. At creation time, all the AttributeSource of the subreaders (which are available) will be passed in its constructor. This MultiAttributeSource will delegate the getAttribute call to the right DocsAndPositionsEnum$AttributeSource. \n\nThere is not a single AttributeSource shared by all the subreader, but each subreader keeps its own AttributeSource. In this way, attributes are not overridden. The MultiAttributeSource is in fact like a Wrapper.\n\nOne problem is when there is custom attributes, e.g. BoostAttribute. If I understand correctly, if the user tries to access the BoostAttribute, but one of the subreader does not know it, the IllegalArgumentException will be thrown. Under the hood, the MultiAttributeSource can check if the attribute exists on the current subreader, and if not it can rely on a default attribute, or a previously stored attribute (coming from a previous subreader).\n\nI am not sure if what I am saying is making some sense. It looks to me too simple to cover all the cases.  Are there cases I am not aware of ? Could you give me some examples to make me aware of other problems ? ",
            "author": "Renaud Delbru",
            "id": "comment-12831483"
        },
        {
            "date": "2010-02-09T15:25:38+0000",
            "content": "The problem is the following:\n\nAttributes are not to be retrieved on every call to next(), they are get/added after construction. If you have a consumer of your MultiEnum, it calls attributes().getAttribute exactly one time before start to enumerate tokens/positions/whatever. If your proposed MultiAttributeSource would return the attribute of the first sub-enum, the consumer would stay with this attribute instance forever. If the MultiEnum then changes to another sub-enum, the consumer would not see the new attribute.\n\nBecause of that the right way is not to have a MultiAttributeSource. What you need are proxy attributes. The Attributes itsself must be proxies, delegating the call to the current enum's corresponding attribute. The same was done in Lucene 2.9 to emulate the backwards compatibility for TokenStreams. The proxy was TokenWrapper. These ProxyAttributes would look exactly like this TokenWrapper impl class. ",
            "author": "Uwe Schindler",
            "id": "comment-12831489"
        },
        {
            "date": "2010-02-09T16:20:20+0000",
            "content": "I see. The problem is to return to the consumer a unique attribute reference when attributes().getAttribute is called, and then updates the references when iterating the enums in order to propagate the attribute changes to the consumer.\n\nI am trying to propose a (possible) alternative solution (if I understood the problem correctly), which can avoid reflection, but could potentially need a modification of the Attribute interface.\n\nIf the MultiAttributeSource will create its own set of unique references for each attribute (the list of different attribute classes can be retrieved by calling the getAttributeClassesIterator() method of the AttributeSource for each subreader, we can then create a list of unique references, one reference for each type of attributes), the goal is then to update these references after each enum iteration or sub-enum change (in order to propagate the changes to the consumer).\n\nUnfortunately, I don't see any interface on the Attribute interface to 'copy' a given attribute. Each AttributeImpl could implement this 'copy method', which copies the state of a given attribute of the same class.\nThen, in the MultiDocsAndPositionsEnum, after each iteration or each sub-enum change, a call to MultiAttributeSource can be made explicitly to update the unique references of the different attributes. This update method will under the hood (1) check if the sub-enum is aware of the attribute class, (2) get the attribute from the sub-enum, and (3) copy the attribute to the unique attribute reference kept by MultiAttributeSource.\n\nCould this solution possibly work ? ",
            "author": "Renaud Delbru",
            "id": "comment-12831521"
        },
        {
            "date": "2010-02-09T20:24:20+0000",
            "content": "What if we require that all segments are the same codec, if you want to use attributes from a Multi*Enum?  (I think this limitation is fine... and if it's not, one could still operate per-segment with different attr impls per segment).\n\nThis way, every segment would share the same attr impl for a given attr interface?\n\nAnd then couldn't we somehow force each segment to use the same attr impl as the last segment(s)? ",
            "author": "Michael McCandless",
            "id": "comment-12831646"
        },
        {
            "date": "2010-02-10T10:47:16+0000",
            "content": "That would work. So the MultiEnum would use its own AttributeSource and passes it downto the sub-enums. For that the ctor of *Enums should allow to pass an AttrubuteSource. I can provide patch. ",
            "author": "Uwe Schindler",
            "id": "comment-12831938"
        },
        {
            "date": "2010-02-11T10:04:03+0000",
            "content": "Here is a first patch about cglib-generated proxy attributes.\n\nIn IRC we found out yesterday, that the proposed idea to share the attributes accross all Multi*Enums would result in problems as the call to next() on any sub-enum would overwrite the contents of the attributes of the previous sub-enum which would make TermsEnum not working (because e.g. TermsEnum looks forward by calling next() an all sub-enums and choosing the lowest term to return - after calling each enums next() the attributes of the first enums cannot be restored without captureState & co, as overwritten by the next() call to the last enum).\n\nThis patch needs cglib-nodep-2.2.jar put into the lib-folder of the checkout http://sourceforge.net/projects/cglib/files/cglib2/2.2/cglib-nodep-2.2.jar/download.\n\nIt contains a test and that shows how the usage is. The central part is cglib's Enhancer that creates a dynamic class extending ProxyAttributeImpl (which defines the general AttributeImpl methods delegating to the delegate) and implementing the requested Attribute interface using a MethodInterceptor.\n\nPlease note: This uses no reflection (only during in-memory class file creation, which is only run one time on \"loading\" the proxy class). The proxy implements MethodInterceptor and uses the fast MethodProxy class (which is also generated by cglib for each proxied method, too) and can invoke the delegated method directly (without reflection) on the delegate.\n\nThe test verifies everything works and also compares speed by using a TermAttribute natively and proxied. The speed is lower (which is not caused by reflection, but by the MethodInterceptor creating an array of parameters and boxing/unboxing native parameters into the Object[]), but for the testcase I have seen about only  50% more time needed.\n\nThe generated classes are cached and reused (like DEFAULT_ATTRIBUTE_FACTORY does).\n\nTo get maximum speed and no external libraries, the code implemented by Enhancer can be rewritten natively using the Apache Harmony java.lang.reflect.Proxy implementation source code as basis. The hardest part in generating bytecode is the ConstantPool in class files. But as the proxy methods are simply delegating and no magic like boxing/unboxing is needed, the generated bytecode is rather simple.\n\nOne other use-case for these proxies is AppendingTokenStream, which is not possible since 3.0 without captureState (in old TS API it was possible, because you could reuse the same TokenInstance even over the appended streams). In the new TS api, the appending stream must have a \"view\" on the attributes of the current consuming sub-stream. ",
            "author": "Uwe Schindler",
            "id": "comment-12832435"
        },
        {
            "date": "2010-02-11T11:24:13+0000",
            "content": "I had some more fun. Made ProxyAttributeSource non-final and added class name policy to also contain the corresponding interface (to make stack traces on errors nicer).\n\nHere the example output:\n\n    [junit] DEBUG: Created class org.apache.lucene.util.ProxyAttributeSource$ProxyAttributeImpl$$TermAttribute$$EnhancerByCGLIB$$6100bdf9 for attribute org.apache.lucene.analysis.tokenattributes.TermAttribute\n    [junit] DEBUG: Created class org.apache.lucene.util.ProxyAttributeSource$ProxyAttributeImpl$$TypeAttribute$$EnhancerByCGLIB$$6f89c3ff for attribute org.apache.lucene.analysis.tokenattributes.TypeAttribute\n    [junit] DEBUG: Created class org.apache.lucene.util.ProxyAttributeSource$ProxyAttributeImpl$$FlagsAttribute$$EnhancerByCGLIB$$4668733c for attribute org.apache.lucene.analysis.tokenattributes.FlagsAttribute\n    [junit] Time taken using org.apache.lucene.analysis.tokenattributes.TermAttributeImpl:\n    [junit]   1476.090658 ms for 10000000 iterations\n    [junit] Time taken using org.apache.lucene.util.ProxyAttributeSource$ProxyAttributeImpl$$TermAttribute$$EnhancerByCGLIB$$6100bdf\n9:\n    [junit]   1881.295734 ms for 10000000 iterations\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12832447"
        },
        {
            "date": "2010-02-12T18:04:01+0000",
            "content": "Here the last CGLIB patch for reference.\n\nNow the real cool class created using JAVASSIST http://www.javassist.org/:\nYou have to place the latest javassist.jar (Mozilla/LGPL licensed) in the lib/ folder and apply the patch. What it does is the fastest proxy we can think of:\nIt creates a subclass of ProxyAttributeImpl that implements all methods of the interface natively in bytecode using JAVASSIST's bytecode generation tools (a subset of the Java language spec).\n\nThe micro-benchmark shows, no difference between proxied and native method - as hotspot removes the extra method call.\n\nWith Javassist it would even be possible to create classes that implement our interfaces around simple fields that are set by get/setters. Just like Eclipse's create get/set around a private field. That would be really cool. Or we could create combining attributes on the fly, Michael Busch would be excited. All *Impl classes we currently have would be almost obsolete (except TermAttributeImpl, which is rather complex). We could also create dynamic State classes for capturing state...\n\nNice, but a little bit hackish. Maybe we put this first into contrib and supply a ConcenatingTokenStream as demo impl and also other Solr TokenStreams that are no longer easy with the Attributes without proxies (Robert listed some). ",
            "author": "Uwe Schindler",
            "id": "comment-12833095"
        },
        {
            "date": "2010-02-12T19:28:22+0000",
            "content": "Better patch without classloader problems. ",
            "author": "Uwe Schindler",
            "id": "comment-12833121"
        },
        {
            "date": "2010-02-13T01:53:45+0000",
            "content": "More cool, less casts, more speed. ",
            "author": "Uwe Schindler",
            "id": "comment-12833285"
        },
        {
            "date": "2010-03-01T19:20:58+0000",
            "content": "Here the third incarnation of the patch. A little bit more complicated, because directly assemblying bytecode, but much cleaner and without strange parsers. It uses Jakarta BCEL, which is e.g. also used by Apache XALAN XSLTC, and its even included in JDK5 (somehow inofficial in renamed com.sun.internal packages).\n\nThe approach is the same as with JavAssist, but has several advantages:\n\n\tThe typing is hard, so all bytecode is generated using real Type classes, retrieved from reflection analysis of the Attribute-Interface to proxy. The method signature is copied.\n\tIt will not likely break with later VDKs if the class format changes again. The Problem with JavAssist is, that it loads the interface and implementation classes from the bytecode and must analyze it. If we get Java 7 and a new classformat, this will likely break (as e.g. classes loaded from rt.jar may not be analyzed). The BCEL approach does not use loading classes in bytecode, it just uses reflection to generate the proxy method signatures and inserts the byte code to delegate to the delegate.\n\tThe generated class is not loaded by a hack, but instead a delegating ClassLoader is dynamically created to load the class into the JVM. The classloader delegates all other requests to the proxied Attribute's classloader.\n\n\n\nBy the way, XALAN is bundling BCEL, in old version, but under the original package names, which may lead to conflics when also bundling in lucene. I would prefer to import the whole source (in parts) like automaton was put into o.a.l.util. But that only, if we really want to do it like this way. But I still think for some TokenStreams this would be a real speed improvement, so we can also make a contrib package out of it. ",
            "author": "Uwe Schindler",
            "id": "comment-12839808"
        },
        {
            "date": "2010-04-11T13:54:52+0000",
            "content": "Slightly improved patch to correctly work with CharTermAttribute (as it defines methods also defined by ProxyAttributeImpl as final, so override failure). ",
            "author": "Uwe Schindler",
            "id": "comment-12855725"
        },
        {
            "date": "2013-07-23T18:44:43+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717035"
        },
        {
            "date": "2014-04-16T12:54:40+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970833"
        }
    ]
}