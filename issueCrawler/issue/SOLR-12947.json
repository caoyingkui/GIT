{
    "id": "SOLR-12947",
    "title": "SolrJ Helper for JSON Request API",
    "details": {
        "type": "Improvement",
        "status": "Resolved",
        "labels": "",
        "fix_versions": [
            "master (8.0)",
            "7.7"
        ],
        "components": [
            "clients - java",
            "SolrJ"
        ],
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "7.5"
    },
    "description": "The JSON request API is becoming increasingly popular for sending querying or accessing the JSON faceting functionality. The query DSL is simple and easy to understand, but crafting requests programmatically is tough in SolrJ. Currently, SolrJ users must hardcode in the JSON body they want their request to convey.  Nothing helps them build the JSON request they're going for, making use of these APIs manual and painful.\n\nWe should see what we can do to alleviate this.  I'd like to tackle this work in two pieces.  This (the first piece) would introduces classes that make it easier to craft non-faceting requests that use the JSON Request API.  Improving JSON Faceting support is a bit more involved (it likely requires improvements to the Response as well as the Request objects), so I'll aim to tackle that in a separate JIRA to keep things moving.",
    "attachments": {
        "SOLR-12947.patch": "https://issues.apache.org/jira/secure/attachment/12946428/SOLR-12947.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16670485",
            "content": "There's a few general approaches we can take with a JsonQueryRequest class.  The main question is how the JSON request body gets constructed.\n\n1. JsonQueryRequest can have setters which assign fields based on primitives or other more structured classes (Map<String,Object>).  This is pretty simple/easy and is resilient to future syntax/schema changes to boot.  More advanced (nested) queries would have to be supported by taking in Maps constructed by users, so users aren't completely abstracted from the JSON schema.  So that's a downside.  But this can be mitigated in ways too.\n2. JsonQueryRequest would use a small library of \"bean\"/annotated-POJO classes. Users would construct an object-graph to represent their JSON query which would then be converted to JSON by Jackson or some other library.  This might be the best for users if done well, but it would require vigilance to ensure that the bean-classes stay up to date with future DSL syntax changes.  It might also require adding jackson or some other json serde library as a SolrJ dependency, which would suck.\n3. JsonQueryRequest would still use a user-provided String as the whole request body, but would utilize the request DSL's macro-expansion capabilities to make this hardcoded string a bit more flexible.  This option gets us the least, but is also the least work.  I don't think it's worth discarding entirely though.  There are some use-cases where it's more convenient: e.g if a user typically runs a small number of very complex queries, it's possibly easier to construct these as Strings rather than building a deep object graph for each. ",
            "author": "Jason Gerlowski",
            "date": "2018-10-31T18:17:41+0000"
        },
        {
            "id": "comment-16670504",
            "content": "The attached patch adds 2 classes to supports JSON DSL requests:\n\nJsonQueryRequest\n\nThis takes the 1st approach above.  That is, it represents the JSON internally as a Map and provides a mix of specific and generic setters for building out the map representation.\n\nclass JsonQueryRequest extends QueryRequest\n    JsonQueryRequest()\n    JsonQueryRequest(SolrParams)\n    setQuery(String) // Can take simple queries (\"text:foo\") or local-params syntax (\"{!lucene df=text v=foo}\")\n    setQuery(Map<String, Object>) // For nested or move involved query JSON\n    setOffset(int)\n    setLimit(int)\n    ...\n\n\n\nDirectJsonQueryRequest\nFollows almost exactly in the footsteps of DirectXmlRequest, except that it takes a JSON string instead of an XML string.  In most cases users will probably want to use JsonQueryRequest as above, but it's so simple and there's a few narrow use cases where it'd be preferable, so I thought it made sense to add it. (espec. since there was precedent)\n\nclass DirectJsonQueryRequest extends QueryRequest\n    DirectJsonQueryRequest(String jsonString)\n    DirectJsonQueryRequest(String jsonString, SolrParams params)\n\n\n\nMiscellaneous Notes\n\n\tI like the flexibility of allowing users to provides their own Map<String, Object> to fill in more involved sections of the JSON structure, but it requires users to be familiar with the JSON syntax.  Right know we only have this problem with queries, but we'll soon run into it with queries as well.  It'd be nice to add something to abstract this away in all but the most involved cases.  Could create a JsonQuery class that extends Map that abstracts away the Map-creation for all but the most advanced cases, but not sure if that's worth the trouble or not.\n\tpatch has Javadocs, tests, and ref-guide changes, so should be ready to go if no one has suggestions on the proposed interface.\n\n ",
            "author": "Jason Gerlowski",
            "date": "2018-10-31T18:30:25+0000"
        },
        {
            "id": "comment-16671048",
            "content": "i had written a plugin for Json Facet Request.\n\nI think you might have interest in it.\n\nhttps://github.com/dmsolr/facet-helper ",
            "author": "Haochao Zhuang",
            "date": "2018-11-01T02:54:44+0000"
        },
        {
            "id": "comment-16671701",
            "content": "Yea, we need something like this. I like the fact that we can\u00a0construct the JsonQuery from a JSON string as well as with objects. This could be the first step. It would be great if SolrJ also got support for various Builders for constructing more complex Lucene queries. Some inspiration can be drawn from the new ES clients which can build all kinds of Boolean, Term, Range etc Queries and provide builders for setting all the various properties that each support. ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-11-01T14:52:26+0000"
        },
        {
            "id": "comment-16674493",
            "content": "Thanks for the feedback guys.\n\nThanks for the pointer Teny.  The stuff I have planned for faceting looks very similar to what you've got there.  The main point of divergence is that the patch I have attached subclasses QueryRequest (rather than the higher-level SolrRequest as \"facet-helper\" does).  I made this choice when I was writing it last week because I wanted the response objects to still have all the getters that QueryResponse has.  A JsonQueryRequest can pass arbitrary params under the \"params\" JSON property.  If users take advantage of this, then they would probably like the response from a JsonQueryRequest to still have all the getters that they're used to for parsing out other common response values (highlighting info, regular faceting info, etc.).  But there might be other ways around this.  I'll think about it and maybe we could use your stuff more directly.  In any case, thanks for the pointer as it helped me organize my thoughts.\n\nAnd agreed Jan.  The JsonQueryRequest right now takes in a Map<> to represent more complex facets, which still leaves the user in charge of knowing the syntax/structure of facets.  Builders or other objects that abstract users further away from building the Map themselves would definitely help here. ",
            "author": "Jason Gerlowski",
            "date": "2018-11-04T20:14:00+0000"
        },
        {
            "id": "comment-16675442",
            "content": "Updated patch moves classes into org.apache.solr.client.solrj.request.json and makes a few other minor tweaks.  Will commit soon if there's no objections.\n\nStill on-the-way is faceting support and facet-builder types, but I think those are big enough for separate JIRAs, or at least commits. ",
            "author": "Jason Gerlowski",
            "date": "2018-11-05T17:13:23+0000"
        },
        {
            "id": "comment-16676699",
            "content": "Commit 2d95b740db1fa4ae25ccf53432e3060565cc8da2 in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2d95b74 ]\n\nSOLR-12947: Add SolrJ helper for making JSON DSL requests\n\nThe JSON request API is great, but it's hard to use from SolrJ.  This\ncommit adds 'JsonQueryRequest', which makes it much easier to write\nJSON API requests in SolrJ applications. ",
            "author": "ASF subversion and git services",
            "date": "2018-11-06T12:35:13+0000"
        },
        {
            "id": "comment-16678145",
            "content": "can we have an option of \n\nJsonQueryRequest#setQuery(MapWriter mw)\n\n ",
            "author": "Noble Paul",
            "date": "2018-11-07T12:23:39+0000"
        },
        {
            "id": "comment-16678152",
            "content": "\n  //TODO consider whether using Utils.writeJson would work here as that'd be more mem efficient\n        OutputStreamWriter writer = new OutputStreamWriter(os, StandardCharsets.UTF_8);\n        writer.write(Utils.toJSONString(jsonRequestMap));\n        writer.flush();\n\n\nyes, you should use Utils.writeJson() as follows\n\nUtils.writeJson(jsonRequestMap,os, true);\n\n ",
            "author": "Noble Paul",
            "date": "2018-11-07T12:35:33+0000"
        },
        {
            "id": "comment-16678753",
            "content": "Thanks for the review Noble.  I've addressed your comments in the most recent patch.  Will merge it shortly.\n\nFYI Jan H\u00f8ydahl...I didn't create any query builders as a part of this issue, but I started that work by creating a few \"facet-builders\" in the next bit of this work (SOLR-12965).  Just wanted to make sure you saw in case you were interested. ",
            "author": "Jason Gerlowski",
            "date": "2018-11-07T20:44:47+0000"
        },
        {
            "id": "comment-16679206",
            "content": "Commit 1b084db9017f108115a3081726359695bd5a8ff1 in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1b084db ]\n\nSOLR-12947: Add MapWriter compatibility to JsonQueryRequest\n\nJsonQueryRequest had `setQuery` methods that took in a query either as a\nString or as a Map.  But no such overload for MapWriter, a SolrJ\ninterface used to transmit Maps via \"push writing\" over the wire.  This\ncommit adds an overload taking this type, so that users can specify\ntheir queries this way as well.\n\nThis commit also changes JsonQueryRequest writes out the request, to\nensure it uses \"push writing\" in non-MapWriter cases as well. ",
            "author": "ASF subversion and git services",
            "date": "2018-11-08T02:40:42+0000"
        },
        {
            "id": "comment-16679609",
            "content": "The standard name is TestJsonQueryRequest, this name JsonQueryRequestUnitTest is quite uncommon ",
            "author": "Noble Paul",
            "date": "2018-11-08T11:14:45+0000"
        },
        {
            "id": "comment-16679615",
            "content": "use computeIfAbsent() to simplify the code\n\njsonRequestMap.putIfAbsent(\"filter\", new ArrayList<Object>());\n    final List<Object> filters = (List<Object>) jsonRequestMap.get(\"filter\");\n    filters.add(filterQuery);\n\n\n\nas\n\n((List)jsonRequestMap.computeIfAbsent(\"filter\", s -> new ArrayList<>())).add(filterQuery) ;\n\n ",
            "author": "Noble Paul",
            "date": "2018-11-08T11:22:08+0000"
        },
        {
            "id": "comment-16681485",
            "content": "The standard name is TestJsonQueryRequest, this name JsonQueryRequestUnitTest is quite uncommon\nYep, true enough, but I did have reasons for the name.  I chose that name with some of the recent test-improvement JIRAs in mind.\n\nIn SOLR-12939 there's been recent movement towards aligning on a test-naming standardization.  By my reading of the comments there TestFoo is the majority in our codebase, but FooTest is more standard across Java projects as a whole and seemed to be the winner in the discussion so far.  So I went with FooTest.\n\nIn SOLR-12921 Mark/David/Erick discussed separating unit and integration tests either by name or package.  To make their job in that JIRA the littlest bit easier I included \"Unit\" and \"Integration\" in my test names.  Even if nothing ever happens with SOLR-12921 though, JsonQueryRequest still has two test classes (one unit, the other integration).  The class names need to be different, so if you don't like having \"Unit\"/\"Integration\" in the names, is there another disambiguating word you'd prefer?\n\nDespite those reasons, I'm not strongly attached to the choice in any way.  If you care about it, I'm happy to rename.\n\nuse computeIfAbsent()\nCool, hadn't seen this much before.  Will do. ",
            "author": "Jason Gerlowski",
            "date": "2018-11-09T14:09:20+0000"
        },
        {
            "id": "comment-16681893",
            "content": "Commit 4410ef941acf02e752a599b5403091f86e66a9a2 in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4410ef9 ]\n\nSOLR-12947: Misc JsonQueryRequest code cleanup ",
            "author": "ASF subversion and git services",
            "date": "2018-11-09T19:53:21+0000"
        },
        {
            "id": "comment-16687054",
            "content": "Commit 8754970c70088afa941cafb4edd7fd45497ed772 in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8754970 ]\n\nSOLR-12947: Add SolrJ helper for making JSON DSL requests\n\nThe JSON request API is great, but it's hard to use from SolrJ.  This\ncommit adds 'JsonQueryRequest', which makes it much easier to write\nJSON API requests in SolrJ applications. ",
            "author": "ASF subversion and git services",
            "date": "2018-11-14T20:08:37+0000"
        },
        {
            "id": "comment-16687055",
            "content": "Commit 3dba71d397df44302b257f224757484b9831f23d in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3dba71d ]\n\nSOLR-12947: Add MapWriter compatibility to JsonQueryRequest\n\nJsonQueryRequest had `setQuery` methods that took in a query either as a\nString or as a Map.  But no such overload for MapWriter, a SolrJ\ninterface used to transmit Maps via \"push writing\" over the wire.  This\ncommit adds an overload taking this type, so that users can specify\ntheir queries this way as well.\n\nThis commit also changes JsonQueryRequest writes out the request, to\nensure it uses \"push writing\" in non-MapWriter cases as well. ",
            "author": "ASF subversion and git services",
            "date": "2018-11-14T20:08:38+0000"
        },
        {
            "id": "comment-16687056",
            "content": "Commit 6faddfe3b411fa5d9e9d06cc599d01a608112ed4 in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6faddfe ]\n\nSOLR-12947: Misc JsonQueryRequest code cleanup ",
            "author": "ASF subversion and git services",
            "date": "2018-11-14T20:08:40+0000"
        },
        {
            "id": "comment-16687064",
            "content": "This has been in master for awhile without causing any issues, so I've attached it to branch_7x as well.  I was just short of this making it in to 7.6, but It should be around for the next release in the 7x line, assuming there is one.\n\n(I noticed there wasn't a \"Fix Version\" tag for 7.7, so I'm creating one with this comment.  I'm not sure how JIRA categorizes the versions as being released/unreleased yet though.  Hopefully I'm not adding this in error.) ",
            "author": "Jason Gerlowski",
            "date": "2018-11-14T20:14:43+0000"
        },
        {
            "id": "comment-16690926",
            "content": "Commit d17c6d8897aad4b06c9c7200d0c445e1170e503f in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d17c6d8 ]\n\nSOLR-12981: Introduce SolrJ type for JSON facet response parsing\n\nRecent JIRA's (SOLR-12947, SOLR-12965) have added support making it\neasier to compose JSON query/faceting requests using SolrJ.  But neither\nmade parsing the responses to these queries any easier.\n\nThis commit introduces NestableJsonFacet (along with several companion\ntypes) which are Java representations of the JSON faceting response.\nThey can be accessed via the new QueryResponse method:\n`getJsonFacetingResponse()`. ",
            "author": "ASF subversion and git services",
            "date": "2018-11-18T15:11:47+0000"
        },
        {
            "id": "comment-16690939",
            "content": "Commit b27bcc859580edff5ce07613e18308edadb88f4c in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b27bcc8 ]\n\nSOLR-12981: Introduce SolrJ type for JSON facet response parsing\n\nRecent JIRA's (SOLR-12947, SOLR-12965) have added support making it\neasier to compose JSON query/faceting requests using SolrJ.  But neither\nmade parsing the responses to these queries any easier.\n\nThis commit introduces NestableJsonFacet (along with several companion\ntypes) which are Java representations of the JSON faceting response.\nThey can be accessed via the new QueryResponse method:\n`getJsonFacetingResponse()`. ",
            "author": "ASF subversion and git services",
            "date": "2018-11-18T15:30:20+0000"
        }
    ]
}