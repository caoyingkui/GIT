{
    "id": "LUCENE-7796",
    "title": "Make reThrow idiom declare Error return type so callers may use it in a way that compiler knows subsequent code is unreachable",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "6.6",
            "7.0"
        ]
    },
    "description": "A spinoff from LUCENE-7792: reThrow can be declared to return an unchecked exception so that callers can choose to use throw reThrow(...) as an idiom to let the compiler know any subsequent code will be unreachable.",
    "attachments": {
        "LUCENE-7796.patch": "https://issues.apache.org/jira/secure/attachment/12865124/LUCENE-7796.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15978244",
            "date": "2017-04-21T07:48:46+0000",
            "content": "Maybe we'd need to rename it as well to make clear that it returns an exception rather than throwing an exception. Otherwise I'm afraid it would be error-prone in void methods? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15978259",
            "date": "2017-04-21T08:00:19+0000",
            "content": "Sorry, I wasn't clear \u2013 this method would still unconditionally always throw an exception. So even if you forgot to do a throw, the code wouldn't get past this method. The return unchecked exception is only useful for cases like switch statements or (theoretically) reachable code but practically we know reThrow never returns. See Mike's code in LUCENE-7792 and you'll see what I mean. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15978264",
            "date": "2017-04-21T08:04:59+0000",
            "content": "Ohhhhhh I get it now! Thanks for the explanation, +1 on doing chis change. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-15978274",
            "date": "2017-04-21T08:11:55+0000",
            "content": "No problem, my description wasn't clear and was meant as a placeholder until I find some time to work on it.  ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15979005",
            "date": "2017-04-21T16:21:42+0000",
            "content": "clarified summary & description ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-15979258",
            "date": "2017-04-21T19:32:11+0000",
            "content": "That has to be an unchecked exception, Hoss, not Throwable (or the type of argument). The whole point of the rethrow hack is to rethrow a checked exception from a method that doesn't declare checked exceptions. \n\nI scanned the code quickly and the rethrow idiom is actually in a few places (AttributeFactory, Rethrow, SnowballProgram, IOUtils \u2013 although slightly different here). It'd be a good chance to clean it up. IOUtils has a slightly different flavor, but all the others use the same idiom. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15979280",
            "date": "2017-04-21T19:48:49+0000",
            "content": "I looked at the code now. The test-framework's Rethrow is what I originally had in mind, but I was mistaken about Mike's code \u2013 this uses IOUtils.reThrow and there is a problem with it \u2013 \"If the argument is null then this method does nothing.\"... so in fact a call to IOUtils.reThrow can be a no-op, as is evident when one looks at how it's used:\n\n      // NOTE: does nothing if firstThrowable is null\n      IOUtils.reThrowUnchecked(firstThrowable);\n\n\nor\n\nif (success) {\n      // Does nothing if firstExc is null:\n      IOUtils.reThrow(firstExc);\n}\n\n\n\nwe can make it return IOException (or something unchecked), but if the argument can be null it absolutely cannot be used with throw... Will this make code clearer or more confusing? For me, it was surprising the argument can be null (and ignored), so based on least surprise principle I'd make IOUtils.reThrow(exception) require a non-null argument and always throw internally. Then the return type can be used without side effects (either with throw or as a simple statement).\n\nA cleanup of other \"rethrow-hack\" places would require moving Rethrow from test utils back to the core and I think (but didn't look further) we actually moved it the other way around so as to prevent people from using it... Although, on the other hand \u2013 AttributeFactory:\n\n  // Hack to rethrow unknown Exceptions from {@link MethodHandle#invoke}:\n  // TODO: remove the impl in test-framework, this one is more elegant :-)\n  static void rethrow(Throwable t) {\n...\n\n\n\nSo I'm a bit lost as to which direction I should go with this patch.  ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15979293",
            "date": "2017-04-21T20:02:57+0000",
            "content": "This is what I think IOUtils.reThrow* methods should look like:\n\n  /**\n   * An utility method that takes a previously caught\n   * {@code Throwable} and rethrows either {@code\n   * IOException} if it the argument was an {@code IOException}\n   * wraps the argument in a {@code RuntimeException}.\n   * \n   * @param th The throwable to rethrow, must not be null.\n   * @return This method never returns normally, it always throws an exception. The return\n   *   value of this method can be used for an idiom that informs the compiler that the code\n   *   below the invocation of this method is unreachable:\n   *   {@code throw reThrow(argument)}.  \n   */\n  public static RuntimeException reThrow(Throwable th) throws IOException {\n    if (th == null) {\n      throw new AssertionError(\"reThrow doesn't accept null arguments.\");\n    }\n    if (th instanceof IOException) {\n      throw (IOException) th;\n    }\n    throw reThrowUnchecked(th);\n  }\n\n  /**\n   * An utility method that takes a previously caught\n   * {@code Throwable} and rethrows it if it's an \n   * unchecked exception or wraps it in a {@code RuntimeException} otherwise.\n   * \n   * @param th The throwable to rethrow, must not be null.\n   * @return This method never returns normally, it always throws an exception. The return\n   *   value of this method can be used for an idiom that informs the compiler that the code\n   *   below the invocation of this method is unreachable:\n   *   {@code throw reThrowUnchecked(argument)}.  \n   */\n  public static RuntimeException reThrowUnchecked(Throwable th) {\n    if (th == null) {\n      throw new AssertionError(\"reThrowUnchecked doesn't accept null arguments.\");\n    }\n    if (th instanceof RuntimeException) {\n      throw (RuntimeException) th;\n    }\n    if (th instanceof Error) {\n      throw (Error) th;\n    }\n    throw new RuntimeException(th);\n  }\n\n ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15979298",
            "date": "2017-04-21T20:10:38+0000",
            "content": "Strawman:\n\n\n\tadd Error rethrowAsUnchecked(...) to work the way this issue suggests it should\n\t\n\t\tor RuntimeException if you prefer \u2013 no opinion, just going based on the cast currently done in Rethrow\n\t\tpersonally i think the \"Sneaky\" code looks sketchy as hell and would feel a lot more comfortable using the more obvious and easy to understand throw new RuntimeException(t)\n\t\n\t\n\trename existing void rethrow(...) methods to void rethrowIfNonNull(...) (they can delegate to rethrowAsUnchecked)\n\tsome existing type specific impls (like the IOException version in IOUtils can/should probably be renamed to be clear what they're for and have javadoc (links back to the \"main\" versions) justifying their differences\n\n\n\nA cleanup of other \"rethrow-hack\" places would require moving Rethrow from test utils back to the core and I think (but didn't look further) we actually moved it the other way around so as to prevent people from using it... So I'm a bit lost as to which direction I should go with this patch\n\nIf the idiom/code is in use (outside of tests), then the code is in use \u2013 we could consider those usages \"bugs\" and \"fix\" the code to not need a reThrow(...) type function, but as long as that code is going to exist, having one copy of it (in core) seems better then having 2,3,5,100 copies of it.\n\n// TODO: remove the impl in test-framework, this one is more elegant \n\nwait ... am i missing something? aren't those 2 impls identical????? ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-15980077",
            "date": "2017-04-22T18:47:42+0000",
            "content": "I agree: the rethrow-checked hack is essentially an abuse of the type erasure system. It is based on JVM spec knowledge, not Java spec and it can lead to surprising code paths. \n\nI'll file a separate issue to remove sneaky throws from the core codebase.\n\nwait ... am i missing something? aren't those 2 impls identical?????\n\nThey are (now); I think it's a remnant from times when they weren't. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15980147",
            "date": "2017-04-22T21:50:33+0000",
            "content": "It is based on JVM spec knowledge, not Java spec and it can lead to surprising code paths.\n\nThat's not true. It is misuse, but behavior is still expected. The same happens if you change a method to suddenly throw a checked Exception. Code compiled against old signature leads to no runtime or linkage errors. But it can still be surprising, because the code may throw a checked exception unexpected.\n\nBTW: We have more rethrows in the expressions module. And there - please don't remove, it would break the expressions compiler. The reason why its there is: The ANTLR API needs to implement an interface that does not allow checked exceptions. But the code inside this interface needs to throw ParseExceptions, which are checked. So we need the rethrow hack... But the code is also safe, as the outer method declares the ParseException, so code calling the public compiler API will only see declared Exceptions: https://github.com/apache/lucene-solr/blob/master/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java#L298-L301, but code that calls the visitor declares the ParseException: https://github.com/apache/lucene-solr/blob/master/lucene/expressions/src/java/org/apache/lucene/expressions/js/JavascriptCompiler.java#L231 ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15980152",
            "date": "2017-04-22T22:23:29+0000",
            "content": "BTW: I have a better rethrow idiom that does not even need try..catch. Very clear code and it clearly shows what happens when used in code. Source:\n\n\n@FunctionalInterface\npublic interface Unchecked<R,T extends Throwable> {\n  \n  R call() throws T;\n  \n  @SuppressWarnings(\"unchecked\")\n  static <R> R exec(Unchecked<R,?> lambda) {\n    return ((Unchecked<R,RuntimeException>) lambda).call();\n  }\n  \n}\n\n\n\nUsage:\n\n\nSomething ret = Unchecked.exec(() -> {\n  return doCrazyStuff();\n});\n\n\n\nThis is looking like a try...catch, but it uses a Lambda trick with the same sneaky throw trick, although it is very compact and easy to read. Code looks very clean and you don't need any compiler hacks like proposed in this issue. Only backside: Don't use it in inner loops or when you want to call MethodHandles very fast, as it breaks inlining of MethodHandles. So it's a bad idea for AttributeFactory or Snowball. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15980320",
            "date": "2017-04-23T08:25:23+0000",
            "content": "That's not true. It is misuse, but behavior is still expected. The same happens if you change a method to suddenly throw a checked Exception. \n\nI don't think this is a good example, Uwe. What you're talking about is JVM validation (which indeed treats all exceptions equal). What I'm talking about is Java specification. From java specification viewpoint it is a compilation error if your depending class changes and suddently throws an unchecked exception. The fact that you can substitute a new class with different method signatures and re-run binaries is a weakness in java \"linking\" system and is, to me, unrelated.\n\nWhat I'm talking about can be showcased fairly easily. Consider this code:\n\npublic class TestCustomAttr extends LuceneTestCase {\n  public static interface CustomAttr extends Attribute {\n  }\n \n  public static final class CustomAttrImpl extends AttributeImpl {\n    public CustomAttrImpl() throws Exception {\n      throw new Exception(\"bah\");\n    }\n    \n    @Override\n    public void clear() {}\n\n    @Override\n    public void reflectWith(AttributeReflector reflector) {}\n\n    @Override\n    public void copyTo(AttributeImpl target) {}\n  }\n  \n  private class CustomFilter extends TokenFilter {\n    protected CustomFilter(TokenStream input) {\n      super(input);\n\n      addAttribute(CustomAttr.class);\n    }\n\n    @Override\n    public boolean incrementToken() throws IOException {\n      return false;\n    }\n  }\n  \n  public void testUncheckedExceptionInAttrImpl() {\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new WhitespaceTokenizer();\n        TokenStream filters = source;\n        filters = new CustomFilter(source);\n\n        return new TokenStreamComponents(source, filters);\n      }\n    };\n\n    a.tokenStream(\"\",  \"foo\");\n  }\n}\n\n\n\nAs a Java programmer I have every reason to believe a.tokenStream never throws a checked exception, yet it surely does. I fail to see how this is verified by Java MethodHandles lookup (in fact, as the example above shows, it isn't).\n\nI'm really fine in leaving it as is \u2013 I understand how it works internally. But I do have a strong feeling sneaky throws aren't the \"right\" way in terms of how the Java language was designed (not talking about the JVM here). If you need a motivational example \u2013 this is exactly the same situation as with method handles (invokeExact, etc.) or the old reflection API (Method) \u2013 they declare Throwable, ExecutionException or other exception type wrapper as a java-language-compatible way of propagating unknown (checked or unchecked) exception from the (unknown) callee. Straight and simple, no surprises. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15980332",
            "date": "2017-04-23T09:04:36+0000",
            "content": "Did you know that the Class#newInstance() also throws checked Exceptions without declaring them! So the old code before using MethodHandles was wrong, too! (Java 9 deprecated Class#newInstance() in favor of using Constructor which wrapps). If you search for Class#newInstance() in LuSolr's source code you see many more. http://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#newInstance--\n\nAs said before I'd check the ctor on the initial reflection that it does not throw checked Exceptions. The problem is that MethodHandles#findConstructor() and the returned MethodHandle's MethodType don't show the Exceptions. But with reflective jl.reflect.Constructor instances this can be checked.\n\nIn general, with MethodHandle's you are leaving the type system anyways, so it is always possible that types don't match at runtime. So I don't see this as a problem. If you want to catch all Exceptions in some source code, catch Throwable and handle based on type + rethrow. That is what all programs out there do. The main reason why it is recommended is also the problem with newInstance above. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-15980353",
            "date": "2017-04-23T10:18:54+0000",
            "content": "Did you know that the Class#newInstance() also throws checked Exceptions without declaring them!\n\nYes, I know that. And there is a reason they deprecated it, isn't there? And while we could use reflection to inspect for unchecked thrown exceptions I really see little point in doing so \u2013 this is a runtime contract enforcement that cannot be verified by the compiler. On the other hand, we could simply declare that attribute instantiation can throw something like AttributeInstantiationException which would have a cause initialized to the underlying throwable and have a clean and portable specification on what happens if the underlying code throws something unchecked.\n\nIf you want to catch all Exceptions in some source code, catch Throwable and handle based on type + rethrow. \n\nYou don't see this as a problem because you're aware of the implementation details (be it method handles or whatever). I see this as an API inconsistency. Look again at the code snippet I posted \u2013 how is the (much less experienced than you) programmer to know that he or she should handle all Throwables, not just Error|RuntimeException?\n\n\n    Analyzer a = new Analyzer() {\n      @Override\n      protected TokenStreamComponents createComponents(String fieldName) {\n        Tokenizer source = new WhitespaceTokenizer();\n        TokenStream filters = source;\n        filters = new CustomFilter(source);\n\n        return new TokenStreamComponents(source, filters);\n      }\n    };\n\n    a.tokenStream(\"\",  \"foo\");\n\n\n\nThis is a problem in particular if you don't have control over CustomFilter and don't see that it can throw some kind of unchecked exception. I think some kind of runtime exception (could be something Lucene-specific \u2013 like the AttributeInstantiationException I mentioned) would be a much better fit here. tokenStream could even declare it as thrown (even though it's unchecked) to increase awareness of what can happen at runtime.\n\nWhat do you think? ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15982608",
            "date": "2017-04-25T09:14:30+0000",
            "content": "Hi Uwe. Let me know what you think about the above before this slips into oblivion. If you're convinced everything should remain as it is it's also an answer (although I don't buy your arguments  ). ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15984575",
            "date": "2017-04-26T10:56:31+0000",
            "content": "TL;DR; I looked at all occurrences of rethrow (ioutils) and I really can't find any scenario in which accepting null to this method would be clearer or more convenient, so I decided to follow my original suggestion and not make it accept null at all. \n\nHere's my motivation. Look at the patch. In most places where rethrow was used without a null check it was \"guarded\" by some awkward comment about potentially null argument pass-through:\n\n     if (success) {\n-      // Does nothing if firstExc is null:\n-      IOUtils.reThrow(firstExc);\n+      if (firstExc != null) {\n+        throw IOUtils.rethrowAlways(firstExc);\n+      }\n     }\n\n\n\nThis was and is weird to me. The code self-reads if it has an if (t != null) throw rethrow(t);, plain and simple, no additional comment required.\n\nI also changed (private) code in a few places where it's I think now easier to grasp without knowing the semantics of underlying check methods:\n\n     } catch (Throwable t) {\n-      verifyChecksum(t, source.writer);\n+      throw verifyChecksum(t, source.writer);\n     } \n\n\n\nThis reads \"always rethrows something\". No further comments are required and no code can follow (javac will complain).\n\nThis patch removes the (public) method on IOUtils so that people who are used to that method would have to find the new one and learn about the different semantics. I can revert it to be named identical as before if somebody really insists.\n\nThis is for master. For backporting to 6x, we could deprecate the old method and make it still functional.\n\nLet me know what you think, especially Hoss Man since you provided an alternative view on how this issue could be solved (which I don't disagree with \u2013 I just think this patch results in better code for now and the future). ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15984585",
            "date": "2017-04-26T11:04:32+0000",
            "content": "\nI can revert it to be named identical as before if somebody really insists.\n\nI insist that the name change if we do this. \n\nBy the way, I think this is incredibly risky for the benefit. Are you sure its really the right tradeoff? If so, I really think it would be better to add the new method and migrate code over at a smaller pace.  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15984605",
            "date": "2017-04-26T11:20:20+0000",
            "content": "I agree we should rename the method. \n\nBy the way, I think this is incredibly risky for the benefit.\n\nI considered a few options and ended up with this one. Look at the patch \u2013 any use case where reThrow was a fall through on null seems weird to me. Sure, shorter by a bit, but potentially confusing to those looking at it (and the compiler). Maybe it's just method naming (rethrowIfNotNull) in a few places, but in many others (where it's never a guaranteed no-fall-through) it just helps to understand what's going on so much better \u2013 you just see that this method never returns (and have an assertion for non-null argument).\n\nI really wish there was a different compiler trick/ hint to do this, but I don't know of any. Again \u2013 looking at the patch and oddball comments (\"does nothing if null, can never reach here, javac disagrees\") I think it's more beneficial if the behavior is stated in code rather than those comments.\n\nIn fact, when you look at the current code it's not even always correct with this method, as it was here:\n\n         } catch (ExecutionException ee) {\n-          IOUtils.reThrow(ee.getCause());\n-\n-          // dead code but javac disagrees:\n-          result = null;\n+          // Theoretically cause can be null; guard against that.\n+          Throwable cause = ee.getCause();\n+          throw IOUtils.rethrowAlways(cause != null ? cause : ee);\n\n\n\nThe above could fall through to result = null. Even if you didn't know about it and wrote:\n\n} catch (ExecutionException ee) {\n throw IOUtils.rethrowAlways(ee.getCause());\n\n\nit'd fail with an assertion error, hopefully eagerly somewhere during tests.\n\nSure, we have to test it and let it bake (on master). Both this issue and LUCENE-7800 cover the \"unlikely\" scenarios, but I think they improve code aesthetics and legibility. Whether they're worth committing is probably a subjective decision because both versions \"work\" unless somebody screws up. To me, the patched version is harder to screw up (and easier to understand execution-flow wise). ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15984622",
            "date": "2017-04-26T11:35:41+0000",
            "content": "I think we both agree to the end goal, my problem is how you get there.\n\nAre you really sure exceptions are never null in all these places? That is my problem. Sure in some places its totally obvious because it has a comment like that, maybe those places should be fixed first, but I am worried about bugs.\n\nWhy not add the new method, and deprecate the old one? Then the old lenient method is discouraged for any new code, and old code can be migrated more carefully.\n\nIs there a strong technical reason to remove the deprecated method from master or is it just \"but that doesnt seem right to have one there\"? Its a million times more important to not introduce bugs in exception handling. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15984637",
            "date": "2017-04-26T11:50:22+0000",
            "content": "Are you really sure exceptions are never null in all these places?\n\nI have reviewed it manually (and will again, if there's an agreement on this). The tests pass \u2013 I ran it a few times now. \n\nWhy not add the new method, and deprecate the old one?\n\nYes, that's my \"less radical\" approach \u2013 I planned this for 6x. But we can as well do this on master, no problem there.\n\nIs there a strong technical reason to remove the deprecated method from master or is it just \"but that doesnt seem right to have one there\"? Its a million times more important to not introduce bugs in exception handling.\n\nI removed it because I wanted to make sure it's not used in the code. And I did review those existing usages on a case-by-case basis (there were about ~50 of them). I'm also concerned about correctness and it's true that this patch touches code paths that are very likely not frequently (or at all) touched in tests. Hence manual review.\n\nAlso note that just about the only difference that can happen is passing null to that method (which no longer accepts it), which I tried to guard against in all places I wasn't 100% sure about non-null argument. Even if you don't use the return type (i.e., you don't use the throw), the call to this new method is not going to be ignored (it'll always throw an exception on non-null argument, just like previously). \n\nSo the chances of screwing up are there, sure, but they seem minimal. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15984651",
            "date": "2017-04-26T11:58:38+0000",
            "content": "Yeah, this is my concern, since you say \"not 100% sure\" and so on. \n\nHonestly if your comment had said \"I think we should backport all this to 6x too, because the arg cant not be null in any of these places and we need more compile-time safety and simplicity around our exception handling\", I would never have made any comment here at all.\n\nBut you don't seem confident that your changes are correct  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15984687",
            "date": "2017-04-26T12:16:27+0000",
            "content": "I am very confident in my changes.  I mostly changed places like this one:\n\n         } catch (Throwable t) {\n           if (doSave) {\n-            IOUtils.reThrow(t);\n+            throw IOUtils.rethrowAlways(t);\n\n\n\nWhich are guaranteed not to ever be null. Other places already had null checks, but seemed like they could fall through. Now they're clear.\n\n       if (this.tragedy != null) {\n         // Another thread is already dealing / has dealt with the tragedy:\n-        IOUtils.reThrow(tragedy);\n+        throw IOUtils.rethrowAlways(tragedy);\n       }\n\n\nor this gem here:\n\n-    assert th != null; // extra safety - if we get here, it means the callable failed\n-    IOUtils.reThrow(th);\n-    return null; // silly, if we're here, IOUtils.reThrow always throws an exception\n+    throw IOUtils.rethrowAlways(th);\n\n\n\nMany other places did have the possibility of a null argument though (and legitiamately fall through); then I explicitly emulated the behavior before with an explicit if:\n\n       if (containsDestructive(options)) {\n         sop(\"newAsynchronousFileChannel\" + options + \": \" + path(path), exception);\n       } else {\n-        IOUtils.reThrow(exception);\n+        if (exception != null) {\n+          throw IOUtils.rethrowAlways(exception);\n+        }\n       }\n     }\n     throw new AssertionError();\n\n\n\nSo if you need a stronger assertion then yes \u2013 I'm 100% sure. Of course the note to this should read: \"beware of bugs in the above code; I have only proved it correct, not tried it.\". ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15984728",
            "date": "2017-04-26T12:46:53+0000",
            "content": "Yes, the last case is my major concern, thanks for making clear how you tackled it. I agree with this approach.  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-15984740",
            "date": "2017-04-26T12:51:37+0000",
            "content": "I'll let this bake on my test machine for a bit and see I can catch anything. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15985144",
            "date": "2017-04-26T17:00:46+0000",
            "content": "Let me know what you think, especially Hoss Man since you provided an alternative view ...\n\nI don't have strong opinions on this at all, i was just putting out some strawmen to address the two diff calling models you were trying to fix w/minimal changes \u2013 unifying those models to force the caller to do the null check is completely fine with me. ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-15986780",
            "date": "2017-04-27T15:04:32+0000",
            "content": "I ran several dozen runs of the full core (Lucene) test suite. I detected a problem related to another issue (OfflineSorter, already fixed by Mike), but nothing else popped up. \n\nI added deprecated versions of methods that were previously in IOUtils, along with a verbose javadoc comment and example stating how the new method can be used. \n\nI'll attach the final patch in a second and commit tomorrow if there are no other comments. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-15988592",
            "date": "2017-04-28T10:17:06+0000",
            "content": "Commit 3866c72fe9f6753b491099c961200377567a0b08 in lucene-solr's branch refs/heads/branch_6x from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3866c72 ]\n\nLUCENE-7796: Make IOUtils.reThrow idiom declare Error return type so\ncallers may use it in a way that compiler knows subsequent code is\nunreachable. reThrow is now deprecated in favor of IOUtils.rethrowAlways. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15988594",
            "date": "2017-04-28T10:17:36+0000",
            "content": "Commit e52d8609949369aebae0297c855936138141c557 in lucene-solr's branch refs/heads/master from Dawid Weiss\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e52d860 ]\n\nLUCENE-7796: Make IOUtils.reThrow idiom declare Error return type so\ncallers may use it in a way that compiler knows subsequent code is\nunreachable. reThrow is now deprecated in favor of IOUtils.rethrowAlways. ",
            "author": "ASF subversion and git services"
        }
    ]
}