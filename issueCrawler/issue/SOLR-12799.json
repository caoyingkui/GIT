{
    "id": "SOLR-12799",
    "title": "Allow Authentication Plugins to easily intercept internode requests",
    "details": {
        "type": "New Feature",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [
            "Authentication"
        ],
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "Solr security\u00a0framework currently allows a plugin to declare statically by implementing the HttpClientBuilderPlugin interface whether it will\u00a0handle internode requests. If it implements the interface, the plugin MUST handle ALL internode requests, even requests originating from Solr itself. Likewise, if a plugin does not implement the interface, ALL requests will be authenticated by the built-in PKIAuthenticationPlugin.\n\nIn some cases (such as SOLR-12121) there is a need to forward end-user credentials on internode requests, but let PKI handle it for solr-originated requests. This is currently not possible without a dirty hack where each plugin duplicates some PKI logic and calls PKI plugin from its own interceptor even if it is disabled.\n\nThis Jira makes this use case officially supported by the framework by:\n\n\tLetting PKIAuthenticationPlugin be always enabled. PKI will now in its interceptor on a per-request basis first give the authc plugin a chance to handle the request\n\tAdding a protected method\u00a0to abstract class AuthenticationPlugin\n   \nprotected boolean interceptInternodeRequest(HttpRequest httpRequest, HttpContext httpContext)\n\n\nthat can be overridden by plugins in order to easily intercept requests without registering its own interceptor. Returning 'false' delegates to PKI.\n\n\n\nExisting Authc plugins do not need to change as a result of this, and they will work exactly as before, i.e. either handle ALL or NONE internode auth.\n\nNew\u00a0plugins choosing to override the new interceptInternodeRequest method will obtain per-request control over who will secure each request. The first user of this feature will be JWT token based auth in SOLR-12121.",
    "attachments": {
        "SOLR-12799.patch": "https://issues.apache.org/jira/secure/attachment/12944533/SOLR-12799.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16625593",
            "content": "This was a spinoff from SOLR-12121, see comment.\n\nIshan Chattopadhyaya, Noble Paul I'd like your comments on this. My plan is to add this ability to the framework as step 1, then use this instead of the hack currently in SOLR-12121. See https://github.com/apache/lucene-solr/pull/458 for first patch. ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-09-24T10:02:52+0000"
        },
        {
            "id": "comment-16637035",
            "content": "See the first PR at\u00a0GitHub Pull Request #458. Additions since last patch:\n\n\tMoved the Principal\u00a0forwarding code from SOLR-12121 to this issue\n\tExtended BasicAuthPlugin\u00a0with a new property forwardCredentials, allowing new and existing users to easily configure use of basic auth also on inter-node requests originating from an outside user request:\n\t\n\t\tWhen {{forwardCredentials\u00a0}}is not set, it defaults to false, and works exactly as before\n\t\tWhen forwardCredentials=true, the plugin will add the basicAuth header to all forwarded requests, and leave all other requests to PKI as before.\n\t\tWe carry\u00a0username and password in a new BasicAuthUserPrincipal class that is passed on in SolrRequest both on updates and queries\n\t\n\t\n\tAdded test to BasicAuthIntegrationTest which performs a distributed query before setting the property and after. Have found no way to assert in the test whether PKI or BasicAuth plugin handled the sub-request, but plan to do this by counting metrics once SOLR-12791 is in.\n\n\n\nWhen this is committed, then SOLR-12121 becomes simpler.\n\n\u00a0 ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-03T14:33:01+0000"
        },
        {
            "id": "comment-16645448",
            "content": "Noble Paul did you have a chance to QA this PR yet? ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-10T19:24:14+0000"
        },
        {
            "id": "comment-16645800",
            "content": "I find it strange that we have to explicitly pass the Principal along in SolrCmdDistributor and HttpShardHandler#submit() . These are supposed to be copied automatically for any ThreadPool using MDCAwareThreadPoolExecutor. I haven't done a full review, but this kind of stands out  ",
            "author": "Noble Paul",
            "date": "2018-10-11T01:11:22+0000"
        },
        {
            "id": "comment-16650863",
            "content": "Anything that will simplify the flow is welcome.\u00a0In my experience\u00a0there was a need for the explicit principal copy.\n\nI'm going to commit this to master on Thursday\u00a0if there are no other comments. ",
            "author": "Jan H\u00f8ydahl",
            "date": "2018-10-15T21:58:38+0000"
        },
        {
            "id": "comment-16655200",
            "content": "I have attached a patch which includes the changes ",
            "author": "Noble Paul",
            "date": "2018-10-18T13:00:31+0000"
        }
    ]
}