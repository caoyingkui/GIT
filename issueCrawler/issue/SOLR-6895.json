{
    "id": "SOLR-6895",
    "title": "Consider renaming SolrServer to SolrClient",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0,                                            6.0",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "This has been niggling at me for a while.  Instantiating a new SolrServer object doesn't create a server, it creates a client.",
    "attachments": {
        "SOLR-6895.patch": "https://issues.apache.org/jira/secure/attachment/12689381/SOLR-6895.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-29T12:26:17+0000",
            "author": "Ramkumar Aiyengar",
            "content": "+1, also CloudSolrServer, LBHttpSolrServer etc. ",
            "id": "comment-14260073"
        },
        {
            "date": "2014-12-29T13:04:39+0000",
            "author": "Erik Hatcher",
            "content": "However EmbeddedSolrServer does instantiate a \"server\", but names matter and would be good to make the appropriate changes here.\n\nMaybe now would be a good time to create the newly named classes and deprecate the existing ones for 5x? ",
            "id": "comment-14260090"
        },
        {
            "date": "2014-12-29T15:03:24+0000",
            "author": "Yonik Seeley",
            "content": "I think the origins of SolrServer instead of SolrClient go back to here:\nhttp://markmail.org/message/yeoqv643eootcscd\nEssentially modeling the server hence naming it Server.\n\nIt's never felt great to me though.  +1 to change to Client.\nAnd since we're already breaking back compat, we should look into other SolrJ cleanups as well.\n\nThere's probably a ton of code out there that uses SolrJ though - so we should strive to either keep SolrJ4 clients compatible with Solr5, or alternately provide a simple HttpSolrServer wrapper that uses the new SolrClient. ",
            "id": "comment-14260141"
        },
        {
            "date": "2014-12-29T15:55:52+0000",
            "author": "Alan Woodward",
            "content": "I think if we're going over a major version change (4 -> 5), we don't need to worry about binary compatibility here?  Anybody upgrading will immediately get compiler errors, and there will be an entry in CHANGES.txt that says \"SolrServer is renamed to SolrClient\", etc.\n\nEmbeddedSolrServer should probably become something like EmbeddedServerSolrClient.  Doesn't exactly trip off the tongue, but it describes what it does \n\nThere are a bunch of other SolrJ changes and cleanups I'd like to get in for 5.0.  Mainly, as I'm working on SOLR-6840, I'm trying to get more of our tests to use SolrJ, which exposes shortcomings in the API pretty quickly.  I'll create issues as I come across them. ",
            "id": "comment-14260173"
        },
        {
            "date": "2014-12-29T16:08:49+0000",
            "author": "Yonik Seeley",
            "content": "I think if we're going over a major version change (4 -> 5), we don't need to worry about binary compatibility here?\n\nI'm primarily talking about compatibility with clients which have SolrJ embedded.   \nBut we should also consider how to make migration easy for those clients to upgrade their code as well... SolrJ (being the primary Java client) is sort of different than other parts of Solr (where reliance on Java interfaces is always expert level). ",
            "id": "comment-14260182"
        },
        {
            "date": "2014-12-29T16:39:01+0000",
            "author": "Alan Woodward",
            "content": "I'm not sure I follow.  If a client has SolrJ embedded, then it's got a specifically versioned JAR file in it somewhere that it's compiled against.  At the moment, there aren't any changes to the SolrJ wire protocol, so clients embedding a 4.x jar will still work.  If a client wants to upgrade the jar file, then they have to edit their source and recompile, but I think that's expected when going over a major version bump? ",
            "id": "comment-14260205"
        },
        {
            "date": "2014-12-29T16:57:11+0000",
            "author": "Yonik Seeley",
            "content": "If a client has SolrJ embedded, then it's got a specifically versioned JAR file in it somewhere that it's compiled against. At the moment, there aren't any changes to the SolrJ wire protocol, so clients embedding a 4.x jar will still work.\n\nCorrect, this is what I was talking about when I wrote:\nThere's probably a ton of code out there that uses SolrJ though - so we should strive to either keep SolrJ4 clients compatible with Solr5\n\nIf a client wants to upgrade the jar file, then they have to edit their source and recompile, but I think that's expected when going over a major version bump?\n\nYes, but we can make that easier or harder.  Being a client interface, we should normally still strive for compatibility (in general), and think about how to make everyone's life easier when we do make changes.  There's no hard-n-fast rules - we should do what makes the most sense. ",
            "id": "comment-14260220"
        },
        {
            "date": "2014-12-29T17:16:59+0000",
            "author": "Alan Woodward",
            "content": "OK, I understand you now \n\nThe name changes won't affect the wire protocol, so 4.x clients (so far!) will be able to communicate with 5.0 servers.  I'll put together a patch. ",
            "id": "comment-14260235"
        },
        {
            "date": "2014-12-29T17:33:52+0000",
            "author": "Erik Hatcher",
            "content": "IMO: if we're making this change, existing classes/interfaces need to be deprecated, not just removed/renamed.  Dropping the deprecated stuff can happen in 6.0, methinks.  There's a big unless... unless there's going to be a 4.10.4 release that deprecates such that we can remove/rename in 5.0.  Consider someone depending on Solr in an automated build by version, but they aren't going to want to change their indexing code just upgrade to Solr (Server) 5.0, which would bring in SolrJ 5.0 as well into their builds/compilation perhaps. ",
            "id": "comment-14260250"
        },
        {
            "date": "2014-12-29T17:41:09+0000",
            "author": "Alan Woodward",
            "content": "The problem there is that this a rename, not a replacement.  I'm not sure how deprecation would work - would we have to duplicate all the classes, and every method everywhere that takes a SolrServer?\n\nAnd if you're depending on Solr core classes for your build, then you're going to have to make code changes going over a major release.  That's what major release versions are for! ",
            "id": "comment-14260256"
        },
        {
            "date": "2014-12-29T21:52:57+0000",
            "author": "Alan Woodward",
            "content": "Here's the patch.  I kept EmbeddedSolrServer named as it is in the end, as I think it works fine.  StreamingSolrServers is renamed to StreamingSolrClients. ",
            "id": "comment-14260472"
        },
        {
            "date": "2014-12-30T01:15:40+0000",
            "author": "Erik Hatcher",
            "content": "The problem there is that this a rename, not a replacement. I'm not sure how deprecation would work \n\nCreate new *Client classes, copied from *Server implementation; gut and deprecate *Server implementation and have it \"extend *Client\" ones.  Would that work for API compatibility of a Solr 4.x indexer using SolrJ 5x? ",
            "id": "comment-14260642"
        },
        {
            "date": "2014-12-30T11:23:47+0000",
            "author": "Alan Woodward",
            "content": "Oh that would work, yes.  I'll amend the patch.  Thanks! ",
            "id": "comment-14261017"
        },
        {
            "date": "2014-12-30T11:55:27+0000",
            "author": "Alan Woodward",
            "content": "Updated patch, with deprecations after Erik's suggestion.\n\nI'd like to commit this today, as it's pretty heavy and will likely get out of sync with trunk pretty quickly. ",
            "id": "comment-14261035"
        },
        {
            "date": "2014-12-30T13:08:41+0000",
            "author": "Erik Hatcher",
            "content": "Alan Woodward did you test that it works?   I wonder if somehow a test could be made that ensures that SolrServer stuff still works in a 4x indexer with the renamed stuff.   I have no objections, just want to be sure it's working in a backwards compatible way for 4x indexers. ",
            "id": "comment-14261072"
        },
        {
            "date": "2014-12-30T15:34:06+0000",
            "author": "Mark Miller",
            "content": "Consider renaming SolrServer to SolrClient\n\n+1 ",
            "id": "comment-14261167"
        },
        {
            "date": "2014-12-30T15:45:57+0000",
            "author": "Alan Woodward",
            "content": "It'll work if you recompile against the new jar.  Not sure if you just drop in the new jar to an existing indexer's classpath, I think that probably depends on the JVM and Classloader, but I don't think that's something we can guarantee anyway. ",
            "id": "comment-14261181"
        },
        {
            "date": "2014-12-31T14:05:50+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1648697 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1648697 ]\n\nSOLR-6895: Deprecate SolrServer classes and replace with SolrClient ",
            "id": "comment-14262194"
        },
        {
            "date": "2014-12-31T14:31:06+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1648706 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1648706 ]\n\nSOLR-6895: Deprecate SolrServer classes and replace with SolrClient ",
            "id": "comment-14262204"
        },
        {
            "date": "2014-12-31T14:49:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1648710 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1648710 ]\n\nSOLR-6895: Remove SolrServer classes from trunk ",
            "id": "comment-14262217"
        },
        {
            "date": "2014-12-31T14:51:10+0000",
            "author": "Alan Woodward",
            "content": "Thanks all! ",
            "id": "comment-14262218"
        },
        {
            "date": "2014-12-31T17:38:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1648750 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1648750 ]\n\nSOLR-6895: Fix rename error in AliasIntegrationTest ",
            "id": "comment-14262333"
        },
        {
            "date": "2014-12-31T17:40:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1648751 from Alan Woodward in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1648751 ]\n\nSOLR-6895: Fix rename error in AliasIntegrationTest ",
            "id": "comment-14262336"
        },
        {
            "date": "2014-12-31T20:30:58+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1648773 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1648773 ]\n\nSOLR-6895: Fix forbidden-apis also in Maven ",
            "id": "comment-14262414"
        },
        {
            "date": "2014-12-31T20:31:51+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1648774 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1648774 ]\n\nMerged revision(s) 1648773 from lucene/dev/trunk:\nSOLR-6895: Fix forbidden-apis also in Maven ",
            "id": "comment-14262416"
        }
    ]
}