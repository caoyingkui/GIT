{
    "id": "LUCENE-6504",
    "title": "implement norms with random access API",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "We added this api in LUCENE-5729 but we never explored implementing norms with it. These are generally the largest consumer of heap memory and often a real hassle for users.",
    "attachments": {
        "LUCENE-6504.patch": "https://issues.apache.org/jira/secure/attachment/12735593/LUCENE-6504.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14560905",
            "author": "Robert Muir",
            "date": "2015-05-27T12:49:34+0000",
            "content": "Here is a patch. We just use these methods to get signed values as a very simplistic compression. \n\nGenerally speaking the performance seems ok, I think its the right tradeoff.\n\n\nReport after iter 19:\nChart saved to out.png... (wd: /home/rmuir/workspace/util/src/python)\n                    Task   QPS trunk      StdDev   QPS patch      StdDev                Pct diff\n                 LowTerm      983.09      (3.8%)      903.02      (4.6%)   -8.1% ( -15% -    0%)\n            HighSpanNear      158.40      (2.7%)      148.01      (2.0%)   -6.6% ( -11% -   -1%)\n            OrNotHighMed      213.20      (3.9%)      199.50      (2.8%)   -6.4% ( -12% -    0%)\n            OrNotHighLow     1170.07      (2.7%)     1134.55      (2.4%)   -3.0% (  -7% -    2%)\n             AndHighHigh       87.91      (1.9%)       86.21      (1.8%)   -1.9% (  -5% -    1%)\n                  IntNRQ        8.64      (5.6%)        8.48      (8.0%)   -1.8% ( -14% -   12%)\n              AndHighMed      123.04      (1.8%)      120.85      (1.7%)   -1.8% (  -5% -    1%)\n                  Fuzzy2       60.37      (1.3%)       59.35      (1.8%)   -1.7% (  -4% -    1%)\n                Wildcard       44.77      (3.2%)       44.06      (4.6%)   -1.6% (  -9% -    6%)\n             MedSpanNear      150.07      (3.1%)      148.15      (2.6%)   -1.3% (  -6% -    4%)\n             LowSpanNear       30.53      (1.2%)       30.15      (1.5%)   -1.2% (  -3% -    1%)\n               LowPhrase       33.89      (2.1%)       33.49      (3.7%)   -1.2% (  -6% -    4%)\n                 Prefix3      210.10      (3.8%)      207.61      (5.3%)   -1.2% (  -9% -    8%)\n              AndHighLow     1180.40      (2.1%)     1166.82      (2.5%)   -1.2% (  -5% -    3%)\n                 Respell       81.67      (1.5%)       81.41      (2.4%)   -0.3% (  -4% -    3%)\n                  Fuzzy1       97.84      (1.3%)       97.64      (1.7%)   -0.2% (  -3% -    2%)\n         LowSloppyPhrase      120.00      (3.0%)      120.42      (3.0%)    0.4% (  -5% -    6%)\n               MedPhrase      263.96      (4.8%)      265.05      (7.1%)    0.4% ( -10% -   12%)\n         MedSloppyPhrase       15.97      (4.5%)       16.08      (4.6%)    0.7% (  -8% -   10%)\n                 MedTerm      175.47      (4.4%)      177.64      (5.7%)    1.2% (  -8% -   11%)\n              HighPhrase       17.80      (6.3%)       18.20      (9.3%)    2.2% ( -12% -   19%)\n               OrHighMed       54.02      (6.8%)       56.18      (7.7%)    4.0% (  -9% -   19%)\n               OrHighLow       52.35      (6.9%)       54.61      (7.7%)    4.3% (  -9% -   20%)\n        HighSloppyPhrase       12.85     (10.3%)       13.41     (11.9%)    4.4% ( -16% -   29%)\n              OrHighHigh       25.34      (7.2%)       26.77      (8.3%)    5.6% (  -9% -   22%)\n                HighTerm      119.17      (4.7%)      128.45      (7.1%)    7.8% (  -3% -   20%)\n            OrHighNotLow      110.06      (6.4%)      119.06      (7.0%)    8.2% (  -4% -   23%)\n            OrHighNotMed       91.03      (6.1%)       98.91      (6.4%)    8.7% (  -3% -   22%)\n           OrNotHighHigh       51.53      (5.6%)       56.04      (6.4%)    8.8% (  -3% -   21%)\n           OrHighNotHigh       30.45      (5.7%)       33.27      (6.2%)    9.2% (  -2% -   22%)\n\n "
        },
        {
            "id": "comment-14560951",
            "author": "Michael McCandless",
            "date": "2015-05-27T13:26:30+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14560987",
            "author": "David Smiley",
            "date": "2015-05-27T13:49:20+0000",
            "content": "Nice. Before/now, AFAIK norms take 1 byte per field per doc of heap.  I looked over the patch briefly; does this essentially put norms off-heap?  And I noticed it has more fidelity than a single byte; up to 8 in fact.  Does this patch also bring in accurate norms or is something else required to enable actually utilize that? "
        },
        {
            "id": "comment-14561025",
            "author": "Uwe Schindler",
            "date": "2015-05-27T14:06:23+0000",
            "content": "There are some unrelated changes in ByteBufferIndexInput: You removed the offset=0 implementation. Did you find out that this optimization for offset=0 brings no additional performance? "
        },
        {
            "id": "comment-14561040",
            "author": "Robert Muir",
            "date": "2015-05-27T14:12:21+0000",
            "content": "\nBefore/now, AFAIK norms take 1 byte per field per doc of heap. I looked over the patch briefly; does this essentially put norms off-heap?\n\nIn the worst case. Currently they are compressed with bitpacking and other tricks to try to be reasonable. But what was missing all along was a random access api in Directory so that this can just be MappedByteBuffer.get(long) (see linked issue and justification). If you want them to be in heap memory, use fileswitchdirectory and ramdirectory.\n\n\nDoes this patch also bring in accurate norms or is something else required to enable actually utilize that?\n\nYou have 1 byte norms because your chosen similarity squashes to that, but the interface between similarity and indexwriter is \"long\" since lucene 4 and all codecs test and support that. "
        },
        {
            "id": "comment-14561043",
            "author": "Robert Muir",
            "date": "2015-05-27T14:14:19+0000",
            "content": "\nThere are some unrelated changes in ByteBufferIndexInput: You removed the offset=0 implementation. Did you find out that this optimization for offset=0 brings no additional performance?\n\nIts not unrelated, i did extensive benchmarking. That optimization is a trap, allowing too many low level implementations (3) once the index gets large.  "
        },
        {
            "id": "comment-14561095",
            "author": "Uwe Schindler",
            "date": "2015-05-27T14:51:11+0000",
            "content": "Its not unrelated, i did extensive benchmarking. That optimization is a trap, allowing too many low level implementations (3) once the index gets large.\n\nOK. That's fine. I never liked that offset=0 specialization, i think back at that time we felt it might be a good idea. I don't know the issue number anymore.\n\nYou also removed the negative check in the new Multi implementation; I think this was done because of performance, too, right? I am not happy with that, because it no longer throws Exception if you try to access stuff off-slice. Maybe we can add an \"assert\" instead? "
        },
        {
            "id": "comment-14561100",
            "author": "Uwe Schindler",
            "date": "2015-05-27T14:53:34+0000",
            "content": "Sorry, the assert is there. Cancel my comment! "
        },
        {
            "id": "comment-14563636",
            "author": "Adrien Grand",
            "date": "2015-05-28T20:31:16+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14563675",
            "author": "Adrien Grand",
            "date": "2015-05-28T20:56:01+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14582737",
            "author": "ASF subversion and git services",
            "date": "2015-06-12T00:32:48+0000",
            "content": "Commit 1685007 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1685007 ]\n\nLUCENE-6504: implement norms with random access API "
        },
        {
            "id": "comment-14582761",
            "author": "ASF subversion and git services",
            "date": "2015-06-12T01:01:43+0000",
            "content": "Commit 1685011 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1685011 ]\n\nLUCENE-6504: implement norms with random access API "
        },
        {
            "id": "comment-14713110",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:47+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}