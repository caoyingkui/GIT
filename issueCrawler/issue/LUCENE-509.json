{
    "id": "LUCENE-509",
    "title": "Performance optimization when retrieving a single field from a document",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.9,                                            2.0.0",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "If you just want to retrieve a single field from a Document, the only way to do it is to retrieve all the fields from the Document and then search it.  This patch is an optimization that allows you retrieve a specific field from a document without instantiating a lot of field and string objects.  This reduces our memory consumption on a per query basis by around around 20% when a lot of documents are returned.\n\nI've added a lot of comments saying you should only call it if you only ever need one field.  There's also a unit test.",
    "attachments": {
        "DocField.patch": "https://issues.apache.org/jira/secure/attachment/12323628/DocField.patch",
        "DocField_2.patch": "https://issues.apache.org/jira/secure/attachment/12323632/DocField_2.patch",
        "DocField_4.patch": "https://issues.apache.org/jira/secure/attachment/12323652/DocField_4.patch",
        "DocField_4b.patch": "https://issues.apache.org/jira/secure/attachment/12323653/DocField_4b.patch",
        "DocField_3.patch": "https://issues.apache.org/jira/secure/attachment/12323638/DocField_3.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-03-03T02:23:47+0000",
            "content": "Adds\nField IndexReader.docField(int doc, String fieldName)\nwhich is more efficient than document(doc).getField(fieldName) ",
            "author": "Steven Tamm",
            "id": "comment-12368547"
        },
        {
            "date": "2006-03-03T03:16:43+0000",
            "content": "This seems like a fine idea.  But unless I'm mistaken, there's a bug when fields are strings that contain characters > 127.  With strings, the length written is (unfortunately) the number of Java characters, not the number of bytes.  There has been a lot of discussion about eventually changing this to be the number of bytes, but that has not yet happened.  So, until that happens, we'd have to scan the UTF8 for string values, counting characters, rather than simply seeking ahead. ",
            "author": "Doug Cutting",
            "id": "comment-12368559"
        },
        {
            "date": "2006-03-03T03:32:00+0000",
            "content": "Link to LUCENE-510. ",
            "author": "Doug Cutting",
            "id": "comment-12368561"
        },
        {
            "date": "2006-03-03T03:34:06+0000",
            "content": "Ahh yes.  I actually just hit this problem with Japanese...  I'll post a fix soon. ",
            "author": "Steven Tamm",
            "id": "comment-12368563"
        },
        {
            "date": "2006-03-03T04:19:17+0000",
            "content": "Now calls readChar() instead of just skipping. ",
            "author": "Steven Tamm",
            "id": "comment-12368573"
        },
        {
            "date": "2006-03-03T04:35:51+0000",
            "content": "That looks good.  Thanks.\n\nCan you please also add a test case that uses multi-byte characters?\n\nOther than that, I'm +1 for comitting this once we get 2.0 out the door. ",
            "author": "Doug Cutting",
            "id": "comment-12368577"
        },
        {
            "date": "2006-03-03T04:58:04+0000",
            "content": "It would be nice if one could get just a few fields in an efficient manner too.\nOff the top of my head, I can't think of a good way that quite preserves the efficiency of the single-field case.\n\nThe best I could think of is something like getFields(doc, String[])\nthat internally creates an int[] of fieldnums that could be quickly scanned for each field encountered.\nIt's an extra int[1] allocation in the single-field case. ",
            "author": "Yonik Seeley",
            "id": "comment-12368587"
        },
        {
            "date": "2006-03-03T05:02:34+0000",
            "content": "The other limitation of this API is that it only returns a single field value.\nOf course that's a bonus when you know there is only a single value, since you can stop scanning when you hit the right field. ",
            "author": "Yonik Seeley",
            "id": "comment-12368589"
        },
        {
            "date": "2006-03-03T05:03:00+0000",
            "content": ">It would be nice if one could get just a few fields in an efficient manner too. \n\nI'd like to see that too. I put some code together to do that some time ago:\n\nhttp://marc.theaimsgroup.com/?l=lucene-user&m=108525376821114&w=2 ",
            "author": "Mark Harwood",
            "id": "comment-12368590"
        },
        {
            "date": "2006-03-03T05:08:54+0000",
            "content": "You could:\n\n(a) add a FieldSelector interface and an IndexWriter method that creates a FieldSelector, then you could pass the FieldSelector instead of the field name to get documents with a subset of the fields;\n\n(b) add a getDocuments(int[], String[]) method that reads a set of documents with only the named fields; or\n\n(c) you could store fewer fields in your index.\n\n ",
            "author": "Doug Cutting",
            "id": "comment-12368591"
        },
        {
            "date": "2006-03-03T05:34:25+0000",
            "content": "This includes a UTF-8 test.  It fails with the first patch and works with the second.\n\nI specifically chose to return only the first Field because otherwise you need to read all the fields in the document.  Now, if the field appears near the beginning of the list of fields, it requires less IO to retrieve ",
            "author": "Steven Tamm",
            "id": "comment-12368600"
        },
        {
            "date": "2006-03-03T10:55:10+0000",
            "content": "My previous change didn't affect MultiReader, so it was useless for some of our indexes (i.e. it would work but not be efficient)\n\nI've also included a new accessor function \nString getDocFieldString(int doc, String field)\n\nThis allows you direct access to the String associated with the value without needing to instantiate the Field object.  It's a small optimization, but it save us ~450K/query when we have a lot of hits.\n\nBTW, someone should create a constructor for Document that takes a number of fields.  That way you don't create a 10 element Vector array everytime (or have to reallocate the array 4 times if it's 100).  It adds up. ",
            "author": "Steven Tamm",
            "id": "comment-12368633"
        },
        {
            "date": "2006-03-03T11:01:44+0000",
            "content": "Sorry about that.  I didn't regenerate the patch after I added the test case.  Apologies: this version works. ",
            "author": "Steven Tamm",
            "id": "comment-12368634"
        },
        {
            "date": "2006-06-12T08:20:47+0000",
            "content": "Hi Steve,\n\nDoes Issue 545 take care of this one?  I just committed it on Friday and I think it does.  Or perhaps there are parts of this that would fit in with 545?\n\nThanks,\nGrant ",
            "author": "Grant Ingersoll",
            "id": "comment-12415798"
        },
        {
            "date": "2006-07-10T00:22:36+0000",
            "content": "LUCENE-545 does resolve this in a more general way, although the code to get precisely one field value efficiently is slightly clunky, requiring something like this (for a single-valued field):\n\nfinal seekfield = retrievefield.intern();\nString value = reader.document(doc, new FieldSelector(){\n    FieldSelectorResult accept(String field) \n{\n        if (field==seekfield)\n            return FieldSelectorResult.LOAD_AND_BREAK;\n        else return FieldSelectorResult.NO_LOAD;\n    }\n).get(seekfield);\n\nEven with this, a Document, a Field and a FieldSelector are created unnecessarily.\n\nThere are important cases where fast single-field-access is important.  E.g., I have cases where it is necessary to obtain the id field for all results of a query, leading to (an obviously refactored version of) the above code in a HitCollector.\n\nI think some special optimization for the single-field access case makes sense if benchmarks show it is material, but that it should be integrated with the mechanism of LUCENE-545.\n\n$0.02,\n\nChuck ",
            "author": "Chuck Williams",
            "id": "comment-12419926"
        },
        {
            "date": "2006-08-13T06:15:47+0000",
            "content": "It looks like this was superseded by LUCENE-545, whose patches have been applied to the trunk. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12427736"
        },
        {
            "date": "2006-10-14T02:45:42+0000",
            "content": "\n   [[ Old comment, sent by email on Fri, 23 Jun 2006 09:16:17 -0700 ]]\n\nIt does.  There isn't a real performance difference between\nLOAD_AND_BREAK and my getField thing, except it'll create two extra\nobjects (Vector & Document).  Probably not that big a deal since the\nbigger issue was the IO in reading the rest of the document.\n\nClose mine out.\n\n-Steven\n ",
            "author": "Steven Tamm",
            "id": "comment-12442154"
        }
    ]
}