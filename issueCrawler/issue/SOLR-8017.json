{
    "id": "SOLR-8017",
    "title": "solr.PointType can't deal with coordination in format like (0.9504547, 1.0, 1.0890503)",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.2",
        "status": "Closed",
        "resolution": "Won't Fix",
        "priority": "Minor"
    },
    "description": "In jpg picture files there will be some fields like media_white_point, media_black_point, which in format like (0.9504547, 1.0, 1.0890503).\nBut solr.PointType can't deal with the \"(\", it just splis by comma and let Double.parse  deal with a string like \"(0.9504547\".\nIn this case, a NumberFormatException will be raised.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-21T09:54:43+0000",
            "author": "Peter Blokland",
            "content": "I was just hit by this issue in solr 6.0.0\n\n2016-04-21 09:38:35.688 ERROR (qtp100555887-16) [   x:foo] o.a.s.h.RequestHandlerBase org.apache.solr.common.SolrException: ERROR: [doc=asset_a57189f3ab8943_n57189f8d253ea_en] Error adding field 'media_black_point'=\n'(0.0, 0.0, 0.0)' msg=For input string: \"(0.0\"\n        at org.apache.solr.update.DocumentBuilder.toDocument(DocumentBuilder.java:177)\n        at org.apache.solr.update.AddUpdateCommand.getLuceneDocument(AddUpdateCommand.java:82)\n        at org.apache.solr.update.DirectUpdateHandler2.doNormalUpdate(DirectUpdateHandler2.java:280)\n        at org.apache.solr.update.DirectUpdateHandler2.addDoc0(DirectUpdateHandler2.java:214)\n        at org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:169)\n        at org.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:68) ",
            "id": "comment-15251649"
        },
        {
            "date": "2016-04-23T00:16:08+0000",
            "author": "David Smiley",
            "content": "Peter, this is as-designed.  PointType (and other spatial field types) accept the data in either one format, or sometimes maybe another specific one or two as well.  It is quite common to need to do some little bits of data manipulation (sometimes a lot, sometimes a little) when getting data from whatever format it's in, into Solr.  Adding an URP is one way to handle this, or deal with it before handing it to Solr.  If you go the URP route, see RegexReplaceProcessorFactory which should handle your case easily. ",
            "id": "comment-15254953"
        },
        {
            "date": "2016-04-25T13:33:58+0000",
            "author": "Peter Blokland",
            "content": "so that means that using tika metadata indexing with schemaless mode is, well, useless ? because that's where this is happening to me. I don't want to anticipate (i.e. create a schema) for all possible metadata coming from tika (I wouldn't even know how). and is it stands, I cannot be sure all my documents will be indexed  ",
            "id": "comment-15256344"
        },
        {
            "date": "2016-04-25T14:55:33+0000",
            "author": "Peter Blokland",
            "content": "to add : your solution point me to using something like this :\n\n<processor class=\"solr.RegexReplaceProcessorFactory\">\n   <str name=\"fieldName\">media_black_point</str>\n   <str name=\"fieldName\">media_white_point</str>\n   <str name=\"pattern\">^((.*))$</str>\n   <str name=\"replacement\">$1</str>\n   <bool name=\"literalReplacement\">false</bool>\n </processor>\n\nwhich, while it works, is not very suited for schemaless mode, because I need to know the fieldName(s) in advance... ",
            "id": "comment-15256432"
        }
    ]
}