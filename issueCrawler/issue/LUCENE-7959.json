{
    "id": "LUCENE-7959",
    "title": "Throw more helpful error messages from failures in obtainFSLock, at least in NativeFSLockFactory",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "7.1",
            "master (8.0)"
        ]
    },
    "description": "This is one of those small changes that would save a lot of pain for end users. \n\nLet's say that there's a permissions issue with the index dir. The user will get \"NoSuchFileException: write.lock\" but not understand why the lock file is missing (its because it could not be created). This is an unhelpful/misleading error message (recent user's list discussion about this).\n\nThe problem is that when we try to create the lock file we swallow all exceptions, not just the one we don't care about (Thanks Shawn Heisey for pointing this out).\n\n {{   \n   try \n{\n      Files.createFile(lockFile);\n    }\n catch (IOException ignore) \n{\n      // we must create the file to have a truly canonical path.\n      // if it's already created, we don't care. if it cant be created, it will fail below.\n    }\n}}\n\nIt fails later with NoSuchFileException, which does not provide enough information.",
    "attachments": {
        "LUCENE-7959.patch": "https://issues.apache.org/jira/secure/attachment/12885701/LUCENE-7959.patch",
        "LUCENE-7959_untested.patch": "https://issues.apache.org/jira/secure/attachment/12885624/LUCENE-7959_untested.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16155612",
            "date": "2017-09-06T16:23:45+0000",
            "content": "I want to track this so I assigned it to myself but would be very happy if someone else took it. ",
            "author": "Erick Erickson"
        },
        {
            "id": "comment-16155620",
            "date": "2017-09-06T16:26:25+0000",
            "content": "The code is correct: its not possible to catch anything more specific because of how the api works. Anything other than IOException is \"optional specific exception\" and any fs provider may or may not implement them, including FileAlreadyExistsException, AccessDeniedException, etc.\n\nSee:\n\nhttps://docs.oracle.com/javase/7/docs/api/java/nio/file/Files.html#createFile(java.nio.file.Path,%20java.nio.file.attribute.FileAttribute...)\n ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16155640",
            "date": "2017-09-06T16:34:46+0000",
            "content": "by the way, if you have a permissions issue where you don't have access to a file, you will get that access denied exception exactly from the FileChannel.open. \n\nSo we aren't masking any exceptions here at all: We throw \"Lock held by this virtual machine\" if there is already an entry in LOCK_HELD map, and we throw \"Lock held by another program\" if tryLock() returns null. I think we can safely close the issue. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16155652",
            "date": "2017-09-06T16:45:23+0000",
            "content": "This is what I think should be there, including some comments:\n\n\n    // If the lockfile already exists, we're going to do nothing.\n    // If there are problems with that lockfile, they will be caught later.\n    // If we *do* create the file here, exceptions will propagate upward.\n    if (Files.notExists(lockFile))\n    {\n      Files.createFile(lockFile);\n    }\n\n\n\nIf the file already exists, it won't try to create it, and the later code can blow up like it already does if the lock fails.  If the file doesn't exist, then creation is attempted.  If that creation fails, and Java can create a reasonable exception explaining WHY it failed, then the calling code will have that information.\n\nThe problem I see with the current code is that when lockfile creation fails, the reason for the failure is completely lost.  An exception is thrown later, but it's an almost useless \"NoSuchFileException\", which is covered by the method's signature (that includes IOException).  It would be better to have the file creation call throw an appropriate IOException, or one derived from it.  Then the caller will know that permissions are wrong, or they're out of disk space, or some other problem. ",
            "author": "Shawn Heisey"
        },
        {
            "id": "comment-16155660",
            "date": "2017-09-06T16:50:16+0000",
            "content": "We can't do sneaky stuff like what you propose because it would be full of race conditions. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16155674",
            "date": "2017-09-06T16:56:37+0000",
            "content": "\n An exception is thrown later, but it's an almost useless \"NoSuchFileException\"\n\nOK, this is the key: this happens in the call to .toRealPath(). \n\nSo I think there is an easy safe fix, when we try to createFile(), save the exception we caught, and if toRealPath() then fails with IOE, addSuppressed(savedException) and rethrow it. It will never hurt anything.\n ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16155678",
            "date": "2017-09-06T16:59:03+0000",
            "content": "Right, could we at least extract the message from whatever exception is thrown in that block where we swallow everything and add it to the failure message, assuming we can't obtain the lock? That would avoid race conditions & etc. but still provide (perhaps) a more useful error message?\n\nNeither of the two error messages reported reflect the reality of a permissions issue found by this particular case.\n\nWell, just saw your other reply which looks better ",
            "author": "Erick Erickson"
        },
        {
            "id": "comment-16155696",
            "date": "2017-09-06T17:04:35+0000",
            "content": "Here is just demonstrating my idea, i think its pretty conservative/safe: it just adds additional context via addSuppressed(), doesn't try to interpret anything about the IOExceptions at play.\n\nBut I want to think about it some more... ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16155720",
            "date": "2017-09-06T17:14:39+0000",
            "content": "Robert Muir Feel absolutely free to assign this JIRA to yourself. \n\nOr I'll be happy to apply/test/precommit/whatever..... ",
            "author": "Erick Erickson"
        },
        {
            "id": "comment-16155762",
            "date": "2017-09-06T17:38:53+0000",
            "content": "Erick well i still think there is confusion in the issue description at least. To clarify:\n\nIf you get lockobtainfailedexc, its a bug in your code always.\n\nThis is about the case where no lock file exists yet (no index yet) and we are unable to create it due to perms or disk space or whatever. Today you get NoSuchFileException or some other IOException in this case, it may not be enough to help you.\n\nSo the suppressed exc can be useful then, maybe. It could be that toRealPath fails for some other reason, in which case hopefully the additional stuff is not confusing. But presumably its the most likely situation. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16155806",
            "date": "2017-09-06T18:06:36+0000",
            "content": "+1 to the patch, except some small typos:\n\ni ncase its useful --> in case it's useful\n\n ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-16155978",
            "date": "2017-09-06T20:23:34+0000",
            "content": "bq:  i still think there is confusion in the issue description at least\nfeel free to change as you see fit. All I really are about is that more clues about what's really wrong if we can safely provide them show up in the logs.\n\nbq: If you get lockobtainfailedexc, its a bug in your code always.\nagreed. nit: in this case not code, your setup. But the point is still well taken, you have a problem you've created for yourself and you have to fix it. This is about providing clues to help them fix it.\n\nbq: So the suppressed exc can be useful then, maybe\nRight, not looking for too much hand-holding here, just anything that could help the user (or me if I'm supporting them) figure out what the underlying issue is. The errors currently returned are misleading in this case; there is no lock held at all by a VM or external process. So any safe thing we can do that has a chance of helping pinpoint the problem is an improvement. ",
            "author": "Erick Erickson"
        },
        {
            "id": "comment-16156033",
            "date": "2017-09-06T21:05:02+0000",
            "content": "Hi,\n\nThe patch looks functionally correct, adding a supressed ex is fine. If we supress some exception, it's always a good idea to provide it on an real error condition. This what addSuppressed() is made for. \n\nAdding a test may work, but only with with some proper setup of virtual file systems. Do we have anything at hand that may emulate an IOEx when creting a file? ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16156052",
            "date": "2017-09-06T21:19:57+0000",
            "content": "\nThe errors currently returned are misleading in this case; there is no lock held at all by a VM or external process. So any safe thing we can do that has a chance of helping pinpoint the problem is an improvement.\n\nErick, I'm trying to reiterate here, its super-important to understand, that if you see \"Lock held by this virtual machine\" or \"Lock held by another program\", it is absolutely a bug in your code. Those errors have nothing to do with this issue, you simply have to fix your code.\n\nThis issue is only about improving the \"NoSuchFileException\" case, that is it. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16156080",
            "date": "2017-09-06T21:49:15+0000",
            "content": "\nbq: If you get lockobtainfailedexc, its a bug in your code always.\nagreed. nit: in this case not code, your setup. But the point is still well taken, you have a problem you've created for yourself and you have to fix it. This is about providing clues to help them fix it.\n\nI updated the description, but i also must correct this \"nit\":\n\nIf you get org.apache.lucene.store.LockObtainFailedException: Lock held by this virtual machine, you need to stop reading this JIRA issue and go fix that bug in solr! That happens because you try to open two indexwriters in the same JVM over the same index, and for no other reason. Its not related to this JIRA or changed by this patch in any way.\n\nOn the other hand, if you get org.apache.lucene.store.LockObtainFailedException: Lock held by another program, then it happens because two different operating system processes each try to open an indexwriter over the same index, and no other reason. In that case, you may want to ask the user how many solr processes are running on the machine, etc. Maybe they managed to screw up and start it twice somehow.\n\nThe two error messages are intentionally different for this reason, so that its easier to tell when there is a software bug that needs to be fixed, versus an operational screw-up or what have you.\n ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16156185",
            "date": "2017-09-06T23:19:04+0000",
            "content": "updated patch with a test like Uwe Schindler suggests. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16156433",
            "date": "2017-09-07T04:23:22+0000",
            "content": "OK, maybe I get it now. Credit my slow uptake to slightly different versions from the original problem statement and not looking carefully enough at the code.\n\nPlaying around on my Mac, I get what I expected at least:\nCaused by: java.nio.file.AccessDeniedException:\nwhich is pretty clear.\n\nThe original problem reported:\nCaused by: java.nio.file.NoSuchFileException:\n\nand the OP said \"it was a permissions issue\". So I jumped to conclusions. The implementation on the original statement throws a different error..... Or I didn't reproduce the right conditions. Or....\n\nNeither of them ever got to the two hand-crafted error messages about a lock being held by another process or virtual machine, I jumped over the toRealPath() line and focused on the lines above them, which with an un-careful reading looked like it swallowed all exceptions. Which actually it does but it doesn't matter since the toRealPath line is where the error is thrown from. Just like some guy named Muir said.... Siiiigggghhhhh.\n\nSo anything we can add safely I'm all for.\n\nSorry for the noise... ",
            "author": "Erick Erickson"
        },
        {
            "id": "comment-16156487",
            "date": "2017-09-07T05:25:13+0000",
            "content": "Test looks good! Thanks Robert! ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16159774",
            "date": "2017-09-09T06:02:32+0000",
            "content": "Commit 0283d3e28a6dea083060cb6932bca82a9b8fefb2 in lucene-solr's branch refs/heads/master from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0283d3e ]\n\nLUCENE-7959: Improve NativeFSLockFactory's NoSuchFileException ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16159777",
            "date": "2017-09-09T06:17:18+0000",
            "content": "Commit bcdac5fef3ac0a8de074ca8308206e39d81e439f in lucene-solr's branch refs/heads/branch_7x from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bcdac5f ]\n\nLUCENE-7959: Improve NativeFSLockFactory's NoSuchFileException ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16159783",
            "date": "2017-09-09T06:30:03+0000",
            "content": "Thanks Erick Erickson Shawn Heisey ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16207465",
            "date": "2017-10-17T11:04:23+0000",
            "content": "Bulk close after 7.1.0 release ",
            "author": "Shalin Shekhar Mangar"
        }
    ]
}