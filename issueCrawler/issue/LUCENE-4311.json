{
    "id": "LUCENE-4311",
    "title": "HunspellStemFilter returns another values than Hunspell in console / command line with same dictionaries.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.5,                                            4.0-ALPHA,                                            3.6.1",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "When I used HunspellStemFilter for stemming the czech language text, it returns me bad results.\n\nFor example word \"praha\" returns \"praha\" and \"prahnout\", what is not correct.\n\nSo I try the same in my console (Hunspell command line) with exactly same dictionaries and it returns only \"praha\" and this is correct.\n\nCan somebody help me?",
    "attachments": {
        "cs_CZ.aff": "https://issues.apache.org/jira/secure/attachment/12541597/cs_CZ.aff",
        "cs_CZ.dic": "https://issues.apache.org/jira/secure/attachment/12541598/cs_CZ.dic"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-20T14:49:29+0000",
            "content": "Hey Jan,\n\nI will take a look at this and see if I can understand the difference.  However I should note that our implementation of Hunspell is not a port of the C/C++ app per se, instead we implemented the algorithm based on papers written on the subject. ",
            "author": "Chris Male",
            "id": "comment-13437912"
        },
        {
            "date": "2012-08-21T05:49:28+0000",
            "content": "I was able to replicate this behaviour and to get an idea of what's causing it.  The cause seems to be the recursive rule evaluation.  'prahnout' is being identified as a stem through the application of a number of rules recursively when the cross-product flag is enabled.  \n\nOriginally the recursive depth was unlimited but this lead to infinite loops in some languages.  Consequently we limited it to 2.  However I'm not sure we're doing it right.  Although some of the papers don't specify a limit on the recursion this seems to suggest it should only be two fold, meaning the limit should be 1.  Having made this change, I no longer get 'prahnout' as a suggestion.\n\nI'm going to think about how best to patch this.  Options are to either change the value directly or to leave it as is but provide configuration control over the maximum recursive depth desired. ",
            "author": "Chris Male",
            "id": "comment-13438471"
        },
        {
            "date": "2013-07-16T17:44:09+0000",
            "content": "Hi Chris,\n\nI have been doing some experiments with this czech dictionary and to me it seems that it yields the best results with RECURSION_CAP = 0. Seriously! The double folding does not bring any advantage in case of this particular dictionary. In fact the dictionary is in such a good shape that it allows for direct generation of all word forms for words in dic file and only one affix rule is enough for input words to see if it matches any of the root forms, i.e. best results with one folding only.\n\nWith RECURSION_CAP 1 or 2 it can generate a lot of incorrect words. The shorter the input word is the higher chance of getting incorrect (i.e. completely misleading) results up to the point where it is not useful for Lucene indexing at all.\n\nPlease, can we have this fixed? I believe all is needed now is to have a look at #LUCENE-4542 and make sure the recursion level is configurable. This would be really great enhancement. ",
            "author": "Lukas Vlcek",
            "id": "comment-13709978"
        },
        {
            "date": "2013-08-06T09:33:17+0000",
            "content": "Closing this as duplicate of LUCENE-4542. You can now tune this to your liking depending on what dictionary is in use. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13730567"
        }
    ]
}