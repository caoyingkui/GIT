{
    "id": "SOLR-2087",
    "title": "Dismax handler not handling +/- correctly",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "If I do a query like: i'm a walking contradiction it matches pf as text:\"i'm_a a_walking walking contradiction\"^2.0, and it matches fine.\n\nIf I do a query like: i'm a +walking contradiction it matches pf as text:\"i'm_a a_+walking +walking contradiction\"^2.0 and doesn't match at all.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12902119",
            "date": "2010-08-24T22:38:03+0000",
            "content": "It's possible some improvements could be made here, but this is functioning as originally designed.\n\nthe pf param treats the entire q param as one big quoted phrase, without any special consideration of other markup, in order to give a boost to things that exactly match the users input in any of the pf fields. (ie: users cut/paste an exact line of text from the content they are looking for.\n\nin your use case, it might make sense to use an alternate tokenizer in the fields you want to use in your \"pf\" (perhaps something that tokenizes away the leading \"+/-\" characters)  but there are other uses cases where people have content that includes those characters, and they want the phrase boosting part of the query to account for them.\n\n "
        },
        {
            "author": "Gabriel Weinberg",
            "id": "comment-12902126",
            "date": "2010-08-24T22:50:50+0000",
            "content": "Hoss, thanks for clarifying, but I'm still a bit confused.\n\nWhat I had in mind was that this current behavior breaks anything but a blank mm field. That is, if either the user (or I on the backend) mark any fields as mandatory or prohibited, the pf is rendered useless. Is that what you mean by intended behavior?\n\nI will try the tokenizer suggestion though. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835730",
            "date": "2013-11-30T13:27:35+0000",
            "content": "2013 Old JIRA cleanup "
        },
        {
            "author": "Cao Manh Dat",
            "id": "comment-15588882",
            "date": "2016-10-19T14:12:57+0000",
            "content": "Hoss Man Erick Erickson : Do you think this issue is reopened by accidentally?  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-15589582",
            "date": "2016-10-19T19:14:37+0000",
            "content": "Dat:\n\nI went through in 2013 and started closing old issues based on age on the theory that if they hadn't been touched in a long time then they might as well be closed. Turns out that was an unpopular idea so I re-opened a bunch soon after closing.\n\nThe JIRA may need to be closed on its own merits, but closing based on age and inactivity isn't good enough.\n\nErick "
        },
        {
            "author": "Cao Manh Dat",
            "id": "comment-15593917",
            "date": "2016-10-21T04:12:16+0000",
            "content": "Erick Erickson : That make sense  "
        },
        {
            "author": "Cao Manh Dat",
            "id": "comment-15600840",
            "date": "2016-10-24T03:44:34+0000",
            "content": "From cwiki https://cwiki.apache.org/confluence/display/solr/The+DisMax+Query+Parser\n\nThe q parameter defines the main \"query\" constituting the essence of the search. The parameter supports raw input strings provided by users with no special escaping. The + and - characters are treated as \"mandatory\" and \"prohibited\" modifiers for terms. Text wrapped in balanced quote characters (for example, \"San Jose\") is treated as a phrase. Any query containing an odd number of quote characters is evaluated as if there were no quote characters at all.\n\nWhen I try to reprocedure this issue, here are the result \n\n{\n  \"rawquerystring\": \"i'm a +walking +contradiction\",\n  \"parsedquery_toString\": \"+(((_text_:i'm)^1.0) ((_text_:a)^1.0) +((_text_:walking)^1.0) +((_text_:contradiction)^1.0)) (content_txt_en:\\\"i'm ? walk contradict\\\")\",\n}\n\n \n\nSo I think we can close this issue here as \"fixed\" "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15601873",
            "date": "2016-10-24T12:39:47+0000",
            "content": "I certainly don't see any viable next actions on this issue.  "
        }
    ]
}