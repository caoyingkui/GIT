{
    "id": "LUCENE-8166",
    "title": "Require merge instances to be consumed in the thread that created them",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "None",
        "status": "Patch Available",
        "type": "Task",
        "components": [],
        "fix_versions": []
    },
    "description": "I would like to improve AssertingCodec to add the restriction that merge instances can only be consumed from the thread that pulled them. This is something that I relied on in order to avoid cloning index inputs too much when implementing LUCENE-4198, but this is neither documented nor checked.\n\nFor the record, I found that it was already an issue before LUCENE-4198 was merged, for instance if you would pull a merge instance of the default stored fields reader and clone it (for use in another thread), it would no longer be a merge instance. So I think this new restriction makes sense?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16356811",
            "date": "2018-02-08T11:06:20+0000",
            "content": "Here is a patch. It does the following:\n\n\tAssertingCodec has new checks to make sure that merge instances are only consumed in the thread that created them. This includes disallowing cloning on StoredFieldsReader's merge instances since the only purpose of cloning is use in another thread.\n\tMergingCodecReader is a wrapper around a CodecReader that performs reads with the merge instance. It allows to have the same level of testing of merge instances as of regular instances. For instance the patch adds a new TestLucene50StoredFieldsFormatMergeInstance and TestLucene70NormsFormatMergeInstance (the two impls that optimize merging) so that we can have better confidence that these specialized merge instances behave well. This wrapper is also randomly used by LuceneTestCase.maybeWrapReader.\n\tBaseNormsFormatTestCase makes sure that two dv instances can be used in parallel in the same thread. This is an issue I hit on LUCENE-8138.\n\n ",
            "author": "Adrien Grand"
        }
    ]
}