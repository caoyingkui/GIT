{
    "id": "LUCENE-2145",
    "title": "TokenStream.close() is called multiple times per TokenStream instance",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index",
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.9,                                            2.9.1,                                            3.0",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I have a Tokenizer that uses an external resource.  I wrote this Tokenizer so that the external resource is released in its close() method.\nThis should work because close() is supposed to be called when the caller is done with the TokenStream of which Tokenizer is a subclass.  TokenStream's API document <http://lucene.apache.org/java/2_9_1/api/core/org/apache/lucene/analysis/TokenStream.html> states:\n\n6. The consumer calls close() to release any resource when finished using the TokenStream. \n\n\n\nWhen I used my Tokenizer from Solr 1.4.0, it did not work as expected.  An error analysis suggests an instance of my Tokenizer is used even after close() is called and the external resource is released. After a further analysis it seems that it is not Solr but Lucene itself that is breaking the contract.\n\nThis is happening in two places.\n\nsrc/java/org/apache/lucene/queryParser/QueryParser.java:\n\n  protected Query getFieldQuery(String field, String queryText)  throws ParseException {\n    // Use the analyzer to get all the tokens, and then build a TermQuery,\n    // PhraseQuery, or nothing based on the term count\n\n    TokenStream source;\n    try {\n      source = analyzer.reusableTokenStream(field, new StringReader(queryText));\n      source.reset();\n.\n.\n.\n     try \n{\n      // rewind the buffer stream\n      buffer.reset();\n\n      // close original stream - all tokens buffered\n      source.close(); // <---- HERE\n    }\n\nsrc/java/org/apache/lucene/index/DocInverterPerField.java\n\npublic void processFields(final Fieldable[] fields,\n                            final int count) throws IOException \n{\n...\n          }\n finally \n{\n            stream.close();\n          }\n\nCalling close() would be good if the TokenStream is not reusable one. But when it is reusable, it might be used again, so the resource associated with the TokenStream instance should not be released.  close() needs to be called selectively only when it know it is not going to be reused.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-07T19:28:01+0000",
            "content": "This looks to be intentional. Calling close() on the token stream is designed to release the Reader, which should happen as soon as you know you are done with it. LUCENE-2387 explains the negative side-effects of holding onto Readers too long. Calling analyzer.reusableTokenStream() the next time will provide a new Reader. \n\nIf the external resource is tied to the Reader, then it should also be released when TokenStream.close() is called. Only that data that is independent of current text should survive to the next reusableTokenStream() call. ",
            "author": "Benjamin Douglas",
            "id": "comment-13430554"
        },
        {
            "date": "2013-06-12T11:27:45+0000",
            "content": "However, that leaves no way to clean up resources. ",
            "author": "Benson Margulies",
            "id": "comment-13681129"
        },
        {
            "date": "2013-06-13T11:47:12+0000",
            "content": "At the risk of proving to Rob that I've lost my mind, I want to offer an argument why this might not really be a bug.\n\nThink about the lifecycle of a TokenStream in Lucene, (as opposed to Solr). Nothing in the library calls Tokenizer constructors, as far as I know. Applications create TokenStreams and pass them into the library to use in analyzing fields. So, if a particular application is using a particular TokenStream that requires cleanup, why isn't it up to the application to clean it up?\n\nAccording to this analysis, if there's a bug here, it is that the use of the name 'close()' for the current method is confusing. If it were called closeReader, then the name 'close' would be available for use in particular implementations that needed cleanup, but it would still be up to those applications to call it. ",
            "author": "Benson Margulies",
            "id": "comment-13682144"
        },
        {
            "date": "2013-06-13T15:02:44+0000",
            "content": "I think its a bug: someone made a non-reusable API reusable and that caused the issue.\n\nIt would be better to adjust to fit, e.g. close readers in end() or something like that, and let close() be close() ",
            "author": "Robert Muir",
            "id": "comment-13682316"
        }
    ]
}