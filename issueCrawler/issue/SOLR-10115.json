{
    "id": "SOLR-10115",
    "title": "Corruption in read-side of SOLR-HDFS stack",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "4.4",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I've been trying to track down some random AIOOB exceptions in Lucene for a customer, and I've managed to reproduce the issue with a unit test of sufficient size in conjunction with highly concurrent read requests.\n\nA typical stack trace looks like:\n\norg.apache.solr.common.SolrException; java.lang.ArrayIndexOutOfBoundsException: 172033655\n        at org.apache.lucene.codecs.lucene40.BitVector.get(BitVector.java:149)\n        at org.apache.lucene.codecs.lucene41.Lucene41PostingsReader$BlockDocsEnum.nextDoc(Lucene41PostingsReader.java:455)\n        at org.apache.lucene.search.MultiTermQueryWrapperFilter.getDocIdSet(MultiTermQueryWrapperFilter.java:111)\n        at org.apache.lucene.search.ConstantScoreQuery$ConstantWeight.scorer(ConstantScoreQuery.java:157)\n\n\n\nThe number of unique stack traces is relatively high, most AIOOB exceptions, but some EOF.  Most exceptions occur in the term index, however I believe this may be just an artifact of where highly concurrent access is most likely to occur.  The queries that triggered this had many wildcards and other multi-term queries.",
    "attachments": {
        "YCS_HdfsTest.java": "https://issues.apache.org/jira/secure/attachment/12851971/YCS_HdfsTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-10T02:17:13+0000",
            "content": "Attaching unit test that can reproduce.\nIt's not in patch form (and not ready to be committed) since it's the result of a port of one of my hacky lucene tests to solr and then a port of that to solr master, in conjunction with a lot of hacking/experimentation.\n\nIt only fails about half of the time for me, and due to randomness takes entirely too long sometimes.  It will need work before it can be committed.  But the priority is finding the actual bug(s), so for that I'm going to start at lower levels and validate that they work correctly under high concurrency.\n\nIf I disable the block cache, it seems like the errors disappear (this makes the BlockCache the prime suspect, but it's not a lock... decreased performance due to the missing block cache can also decrease the likelihood of seeing other concurrency issues). ",
            "author": "Yonik Seeley",
            "id": "comment-15860559"
        },
        {
            "date": "2017-02-10T19:23:45+0000",
            "content": "In BlockDirectoryCache, keysToRelease is not a concurrent data structure and there is no locking in adding and removing items. (https://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectoryCache.java#L36) Is there any guarantee that adding and removing items for keysToRelease don't execute concurrently in different threads? ",
            "author": "Michael Sun",
            "id": "comment-15861721"
        },
        {
            "date": "2017-02-10T22:05:20+0000",
            "content": "keysToRelease is not a concurrent data structure and there is no locking in adding and removing items.\n\nI haven't worked my way up to BlockDirectoryCache yet, but a quick glance shows that keysToRelease is a concurrent data structure:\nhttps://github.com/apache/lucene-solr/blob/master/solr/core/src/java/org/apache/solr/store/blockcache/BlockDirectoryCache.java#L52 ",
            "author": "Yonik Seeley",
            "id": "comment-15861911"
        },
        {
            "date": "2017-02-10T22:32:34+0000",
            "content": "Yeah, that's right. keysToRelease is a concurrent data structure. ",
            "author": "Michael Sun",
            "id": "comment-15861936"
        },
        {
            "date": "2017-02-22T01:20:13+0000",
            "content": "OK, after the fixes in SOLR-10121 and SOLR-10141, I can no longer reproduce fails with the attached test.\nI still need to make it into a more proper unit test before committing it though. ",
            "author": "Yonik Seeley",
            "id": "comment-15877188"
        }
    ]
}