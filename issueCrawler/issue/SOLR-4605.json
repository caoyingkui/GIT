{
    "id": "SOLR-4605",
    "title": "Rollback does not work correctly.",
    "details": {
        "affect_versions": "4.1,                                            4.2",
        "status": "Closed",
        "fix_versions": [
            "4.2.1",
            "4.3",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "http://lucene.472066.n3.nabble.com/Solr-4-1-4-2-SolrException-Error-opening-new-searcher-td4046543.html\n\nI wrote a simple test to reproduce a very similar stack trace to the above issue, where only some line numbers differences due to Solr 4.1 vs Solr 4.2.\n\n\nSource of Exception\n\n\n\thttp://svn.apache.org/viewvc/lucene/dev/tags/lucene_solr_4_1_0/solr/core/src/java/org/apache/solr/core/SolrCore.java?view=markup\n\thttp://svn.apache.org/viewvc/lucene/dev/tags/lucene_solr_4_2_0/solr/core/src/java/org/apache/solr/core/SolrCore.java?view=markup\n\n \ncatch (Exception e) {\n    throw new SolrException(SolrException.ErrorCode.SERVER_ERROR, \"Error opening new searcher\", e);\n}\n\n\n\n\n\n\n\nAny ideas as to why the following happens?  Any help would be very appreciated.\n\n\n\n\n\n\tThe test case:\n\n    @Test\n    public void documentCommitAndRollbackTest() throws Exception {\n\n        // Fix:  SolrException: Error opening new searcher\n\n        server.rollback();\n        server.commit();\n    }\n\n\n\n\n\n\n\n\tThe similar stack trace (Which is repeated twice):\n\n\nMar 15, 2013 3:48:09 PM org.apache.solr.common.SolrException log\nSEVERE: org.apache.solr.common.SolrException: Error opening new searcher\n        at org.apache.solr.core.SolrCore.openNewSearcher(SolrCore.java:1415)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1527)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1304)\n        at org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:570)\n        at org.apache.solr.update.processor.RunUpdateProcessor.processCommit(RunUpdateProcessorFactory.java:95)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(UpdateRequestProcessor.java:64)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.processCommit(DistributedUpdateProcessor.java:1055)\n        at org.apache.solr.update.processor.LogUpdateProcessor.processCommit(LogUpdateProcessorFactory.java:157)\n        at org.apache.solr.handler.RequestHandlerUtils.handleCommit(RequestHandlerUtils.java:69)\n        at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:68)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1797)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:637)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:343)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:141)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)\n        at org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:927)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)\n        at org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)\n        at org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:579)\n        at org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:307)\n        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n        at java.lang.Thread.run(Thread.java:722)\nCaused by: org.apache.lucene.store.AlreadyClosedException: this IndexWriter is closed\n        at org.apache.lucene.index.IndexWriter.ensureOpen(IndexWriter.java:583)\n        at org.apache.lucene.index.IndexWriter.ensureOpen(IndexWriter.java:597)\n        at org.apache.lucene.index.IndexWriter.nrtIsCurrent(IndexWriter.java:4143)\n        at org.apache.lucene.index.StandardDirectoryReader.doOpenFromWriter(StandardDirectoryReader.java:266)\n        at org.apache.lucene.index.StandardDirectoryReader.doOpenIfChanged(StandardDirectoryReader.java:245)\n        at org.apache.lucene.index.StandardDirectoryReader.doOpenIfChanged(StandardDirectoryReader.java:235)\n        at org.apache.lucene.index.DirectoryReader.openIfChanged(DirectoryReader.java:169)\n        at org.apache.solr.core.SolrCore.openNewSearcher(SolrCore.java:1360)\n        ... 29 more\n\n\n\n\n\n\n\n\n\n\tThe test class:\n\npackage test;\n\nimport java.io.Serializable;\nimport java.util.Date;\nimport java.util.List;\nimport java.util.Locale;\nimport java.util.UUID;\n\nimport junit.framework.Assert;\n\nimport org.apache.solr.client.solrj.SolrQuery;\nimport org.apache.solr.client.solrj.beans.Field;\nimport org.apache.solr.client.solrj.impl.BinaryRequestWriter;\nimport org.apache.solr.client.solrj.impl.HttpSolrServer;\nimport org.apache.solr.client.solrj.response.QueryResponse;\nimport org.apache.solr.client.solrj.response.UpdateResponse;\nimport org.junit.After;\nimport org.junit.Before;\nimport org.junit.Test;\n\n\npublic class SolrJBeanTest {\n\n    private static HttpSolrServer server;\n\n    static {\n\n        String url = \"http://localhost:8080/solr/collection1\";\n\n        server = new HttpSolrServer(url);\n\n         server.setRequestWriter(new BinaryRequestWriter());\n//         server.setParser(new XMLResponseParser()); // binary parser is used by default\n\n        server.setSoTimeout(5000); // socket read timeout\n        server.setConnectionTimeout(30000);\n        server.setDefaultMaxConnectionsPerHost(100);\n        server.setMaxTotalConnections(100);\n        server.setFollowRedirects(false); // defaults to false\n        // allowCompression defaults to false.\n        // Server side must support gzip or deflate for this to have any effect.\n        server.setAllowCompression(true);\n        server.setMaxRetries(1); // defaults to 0.  > 1 not recommended.\n\n    }\n\n    @Before\n    public void setUp() throws Exception {\n\n        UpdateResponse updateResponse = server.deleteByQuery(\"type_s:\" + \"MyTestBean\");\n        Assert.assertEquals(0, updateResponse.getStatus());\n\n        commit();\n\n    }\n\n\n    @After\n    public void tearDown() throws Exception {\n\n        UpdateResponse updateResponse = server.deleteByQuery(\"type_s:\" + \"MyTestBean\");\n        Assert.assertEquals(0, updateResponse.getStatus());\n\n        commit();\n\n        List<MyTestBean> beans = getTestBeans();\n        Assert.assertEquals(0, beans.size());\n\n    }\n\n    private static void commit() throws Exception {\n        UpdateResponse updateResponseForCommit = server.commit();\n        Assert.assertEquals(0, updateResponseForCommit.getStatus());\n    }\n\n    private static void rollback() throws Exception {\n        UpdateResponse updateResponseForCommit = server.rollback();\n        Assert.assertEquals(0, updateResponseForCommit.getStatus());\n    }\n\n\n    @Test\n    public void documentCommitAndRollbackTest() throws Exception {\n\n        // Fix:  SolrException: Error opening new searcher\n\n        server.rollback();\n        server.commit();\n    }\n\n    @Test\n    public void addBeanTest() throws Exception {\n\n        MyTestBean myTestBean = createTestBean(\"addBeanTest\");\n        UpdateResponse updateResponse = server.addBean(myTestBean);\n        Assert.assertEquals(0, updateResponse.getStatus());\n\n        Thread.sleep(1000);\n\n        // No Bean Found\n        {\n            MyTestBean myTestBeanStored = getTestBean(myTestBean.getId());\n            Assert.assertNull(myTestBeanStored);\n        }\n\n        UpdateResponse updateResponseForCommit = server.commit();\n        Assert.assertEquals(0, updateResponseForCommit.getStatus());\n\n        // Bean Found\n        {\n            MyTestBean myTestBeanStored = getTestBean(myTestBean.getId());\n            Assert.assertNotNull(myTestBeanStored);\n\n            Assert.assertEquals(myTestBean.getId(), myTestBeanStored.getId());\n            Assert.assertEquals(myTestBean.getType(), myTestBeanStored.getType());\n            Assert.assertEquals(myTestBean.getValue(), myTestBeanStored.getValue());\n            Assert.assertEquals(myTestBean.getCreatedDate(), myTestBeanStored.getCreatedDate());\n\n            Assert.assertEquals(-1L, myTestBean.get_version_().longValue());\n            Assert.assertTrue(myTestBeanStored.get_version_() > 0);\n        }\n\n    }\n\n    @Test\n    public void addBeanWithRollbackTest() throws Exception {\n\n        MyTestBean myTestBean = createTestBean(\"addBeanTest\");\n        UpdateResponse updateResponse = server.addBean(myTestBean);\n        Assert.assertEquals(0, updateResponse.getStatus());\n\n        Thread.sleep(1000);\n\n        // No Bean Found\n        {\n            MyTestBean myTestBeanStored = getTestBean(myTestBean.getId());\n            Assert.assertNull(myTestBeanStored);\n        }\n\n        UpdateResponse updateResponseForCommit = server.rollback();\n        Assert.assertEquals(0, updateResponseForCommit.getStatus());\n\n        // No Bean Found\n        {\n            MyTestBean myTestBeanStored = getTestBean(myTestBean.getId());\n            Assert.assertNull(myTestBeanStored);\n        }\n\n    }\n\n\n    private MyTestBean createTestBean(String value) {\n        MyTestBean myTestBean = new MyTestBean();\n        myTestBean.setId(UUID.randomUUID().toString().toLowerCase(Locale.ENGLISH));\n        myTestBean.setType(\"MyTestBean\");\n        myTestBean.setCreatedDate(new Date());\n        myTestBean.setValue(value);\n        myTestBean.set_version_(-1L);\n        return myTestBean;\n    }\n\n    private static List<MyTestBean> getTestBeans() throws Exception {\n        return getTestBeans(null, null);\n    }\n\n    private static MyTestBean getTestBean(String id) throws Exception {\n        List<MyTestBean> beans = getTestBeans(id, null);\n\n        if (beans == null || beans.size() == 0) {\n            return null;\n        }\n\n        return beans.get(0);\n    }\n\n    private static List<MyTestBean> getTestBeans(String id, String value) throws Exception {\n\n        SolrQuery solrQuery = new SolrQuery();\n        solrQuery.setQuery(\"*:*\");\n        if (id != null) {\n            solrQuery.addFilterQuery(\"id:\" + id);\n        }\n        solrQuery.addFilterQuery(\"type_s:\" + \"MyTestBean\");\n        if (value != null) {\n            solrQuery.addFilterQuery(\"value:\" + value);\n        }\n\n        QueryResponse queryResponse = server.query(solrQuery);\n\n        List<MyTestBean> beans = queryResponse.getBeans(MyTestBean.class);\n\n        return beans;\n\n    }\n\n\n    public static class MyTestBean implements Serializable {\n\n        private static final long serialVersionUID = 1L;\n\n        @Field(\"id\")\n        private String id;\n\n        @Field(\"type_s\")\n        private String type;\n\n        @Field(\"value_s\")\n        private String value;\n\n        @Field(\"created_dt\")\n        private Date createdDate;\n\n        @Field(\"_version_\")\n        private Long _version_;\n\n        public MyTestBean() {\n\n        }\n\n        public String getId() {\n            return id;\n        }\n\n        public void setId(String id) {\n            this.id = id;\n        }\n\n        public String getType() {\n            return type;\n        }\n\n        public void setType(String type) {\n            this.type = type;\n        }\n\n        public String getValue() {\n            return value;\n        }\n\n        public void setValue(String value) {\n            this.value = value;\n        }\n\n        public Date getCreatedDate() {\n            return createdDate;\n        }\n\n        public void setCreatedDate(Date createdDate) {\n            this.createdDate = createdDate;\n        }\n\n        public Long get_version_() {\n            return _version_;\n        }\n\n        public void set_version_(Long _version_) {\n            this._version_ = _version_;\n        }\n\n        @Override\n        public String toString() {\n            return \"MyTestBean [id=\" + id + \", type=\" + type + \", value=\" + value + \", createdDate=\" + createdDate\n                    + \", _version_=\" + _version_ + \"]\";\n        }\n\n    }\n\n}",
    "attachments": {
        "SOLR-4605.patch": "https://issues.apache.org/jira/secure/attachment/12574117/SOLR-4605.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13604900",
            "date": "2013-03-18T06:35:02+0000",
            "content": "patch attatched "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13605182",
            "date": "2013-03-18T14:57:07+0000",
            "content": "[trunk commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1457784\n\nSOLR-4605: Rollback does not work correctly. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13605230",
            "date": "2013-03-18T15:52:33+0000",
            "content": "[branch_4x commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1457812\n\nSOLR-4605: Rollback does not work correctly. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13606127",
            "date": "2013-03-19T07:05:37+0000",
            "content": "[branch_4x commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1458156\n\nSOLR-4604: Move CHANGES entry.\nSOLR-4605: Move CHANGES entry.\nSOLR-4609: Move CHANGES entry. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13606132",
            "date": "2013-03-19T07:05:55+0000",
            "content": "[trunk commit] Mark Robert Miller\nhttp://svn.apache.org/viewvc?view=revision&revision=1458155\n\nSOLR-4604: Move CHANGES entry.\nSOLR-4605: Move CHANGES entry.\nSOLR-4609: Move CHANGES entry. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654209",
            "date": "2013-05-10T10:34:24+0000",
            "content": "Closed after release. "
        }
    ]
}