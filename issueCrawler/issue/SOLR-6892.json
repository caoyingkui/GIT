{
    "id": "SOLR-6892",
    "title": "Improve the way update processors are used and make it simpler",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "The current update processor chain is rather cumbersome and we should be able to use the updateprocessors without a chain.\n\nThe scope of this ticket is \n\n\n\tA new tag <updateProcessor>  becomes a toplevel tag and it will be equivalent to the <processor> tag inside <updateRequestProcessorChain> . The only difference is that it should require a name attribute. The <updateProcessorChain> tag will continue to exist and it should be possible to define <processor> inside as well . It should also be possible to reference a named URP in a chain.\n\tprocessors will be added in the request with their names . Example processor=a,b,c ,  post-processor=x,y,z . This creates an implicit chain of the named URPs the order they are specified\n\tThere are multiple request parameters supported by update request\n\t\n\t\tprocessor : This chain is executed executed at the leader right before the LogUpdateProcessorFactory + DistributedUpdateProcessorFactory . The replicas will not execute this.\n\t\tpost-processor : This chain is executed right before the RunUpdateProcessor in all replicas , including the leader\n\t\n\t\n\tWhat happens to the update.chain parameter ? update.chain will be honored . The implicit chain is created by merging both the update.chain and the request params. post-processor will be inserted right before the RunUpdateProcessorFactory in the chain.   and processor will be inserted right before the LogUpdateProcessorFactory,DistributedUpdateProcessorFactory",
    "attachments": {
        "SOLR-6892.patch": "https://issues.apache.org/jira/secure/attachment/12704153/SOLR-6892.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-27T15:15:56+0000",
            "author": "Erik Hatcher",
            "content": "While this does open up some potential custom power, I'm curious what use cases you see with being able for the indexing client to specify the processors?   It is good that processors become their own first class component such that they can be composed into update processor chains when (eventually) creating a chain with API, but I can see using individual processors from the /update call being a possible problem, such as not using the log processor and then not being able to see what happened exactly. ",
            "id": "comment-14259384"
        },
        {
            "date": "2014-12-27T16:29:22+0000",
            "author": "Noble Paul",
            "content": "The configuration is complex today. We need to make this less of vodoo  . Let's look at what is the purpose of an update processor. It is just a transformer for incoming documents. Let's apply the transformers in the order they are specified and let the system take care of the rest and avoid surprises.  ",
            "id": "comment-14259409"
        },
        {
            "date": "2014-12-27T16:30:02+0000",
            "author": "Alexandre Rafalovitch",
            "content": "This use case does not feel strong enough to be Major. Are there specific business use-cases that really cannot be solved with pre-defined chains?\n\nAlso, a lot of URPs take parameters. The proposal above does not seem to allow that. And then what about DistributedUpdateProcessor and that the chains allow to specify items both before and after it. \n\nAlso consider troubleshooting. It needs to be very clear what applied to the content as it came in. How would one find out if a chain was applied incorrectly.\n\nFinally, what are \"built update processors\"? \"Built-in?\" So far, vast majority of them are built-in, as in shipped with Solr. And have their own class names. Do you means some standard chains could be pre-built and named? Do you have a good example? I would say these arguments apply a lot more to the analyzer chains (I'd love to see those built-in), but I am not sure about URPs. ",
            "id": "comment-14259410"
        },
        {
            "date": "2014-12-27T16:35:36+0000",
            "author": "Alexandre Rafalovitch",
            "content": "> Let's apply the transformers in the order they are specified and let the system take care of the rest and avoid surprises\n\nActually, having a code hidden somewhere inside the system to do the non-trivial thing is what will create surprises. Right now, the user can look at the XML file and step through the cross-references to see what actually happened. Moving away into on-the-fly and case-by-case will increase the surprises. So, the proposal and the reasoning are not quite aligned here.\n\nThings like pre-defined names for standard components could decrease surprises. The rest of the proposal does not.  ",
            "id": "comment-14259413"
        },
        {
            "date": "2014-12-27T17:03:01+0000",
            "author": "Noble Paul",
            "content": "The configuration is not going away.  we will have the individuals URP specified and configured. The point is , the chain does nothing extra. \nSpecifying the URP list at request time is no more complex than deciding the chain name. It is not taking the power away but adding the power to mix and match stuff at request time ",
            "id": "comment-14259419"
        },
        {
            "date": "2014-12-27T17:08:16+0000",
            "author": "Alexandre Rafalovitch",
            "content": "So, would the better explanation be then is that you have an option of pre-configuring and naming individual items on the stack and then composing them either in pre-existing stack (effectively with aliases) or dynamically on the fly.\n\nSo, the addressable unit becomes an individual pre-configured URP (atom) as opposed to the full stack (molecule)? \n\nThat would make more sense, though you still need to be super-clear on what becomes hidden from the XML file. For example, there should be an easy way to query all the pre-configured components. One of the issues with ElasticSearch is that it is hard to tell what those symbolic (analyzer chains) names correspond too, as it is hardcoded somewhere deep with it.  ",
            "id": "comment-14259422"
        },
        {
            "date": "2014-12-27T17:34:10+0000",
            "author": "Noble Paul",
            "content": "If there are components that need little or no configuration, it can be made implicitly available with a well known name. Other components which require configuration will have to be configured in xml . \nBut your  explanation is correct. We are changing the atomic unit from a chain to a URP ",
            "id": "comment-14259429"
        },
        {
            "date": "2014-12-27T17:34:42+0000",
            "author": "Yonik Seeley",
            "content": "We shouldn't let too much implementation leak into the interface.  DistribUpdateProcessor, etc, are much more implementation than interface.  For example, should one need to know that DistribUpdateProcessor is needed for atomic updates?  What if it's split into two processors in the future?  Likewise for schemaless - it's currently implemented as a whole bunch of processors, but I could see it moving to a single processor in the future.  It's implementation.  People should not be specifying this stuff on requests.\n\nFor example, there should be an easy way to query all the pre-configured components.\n\nPerhaps that's all this feature should be... a way to add additional named processors to the chain.  That should be relatively safe. ",
            "id": "comment-14259430"
        },
        {
            "date": "2014-12-27T17:53:01+0000",
            "author": "Noble Paul",
            "content": "Yes yonik . The default urp chain must be immutable . This is about adding URP s before that chain .  ",
            "id": "comment-14259437"
        },
        {
            "date": "2014-12-27T18:39:23+0000",
            "author": "Alexandre Rafalovitch",
            "content": "q. The default urp chain must be immutable\n\nCareful with that one. There are sometimes valid reasons with putting an URP after DistributedUpdateProcessor. I believe it is usually connected with accessing stored content during the atomic update. We don't want to completely loose that flexibility.\n\nAlso, Debugging URP may want to be the last items in the chain too. ",
            "id": "comment-14259449"
        },
        {
            "date": "2014-12-27T23:39:53+0000",
            "author": "Yonik Seeley",
            "content": "This is about adding URP s before that chain .\n\nDude, I'm not psychic   I didn't see that anywhere in this issue before now. ",
            "id": "comment-14259519"
        },
        {
            "date": "2014-12-28T04:47:44+0000",
            "author": "Jack Krupansky",
            "content": "Issue type should be \"Improvement\", not \"Bug\", right? ",
            "id": "comment-14259566"
        },
        {
            "date": "2014-12-28T04:53:29+0000",
            "author": "Jack Krupansky",
            "content": "It might be instructive to look at how the search handler deals with search components and possibly consider rationalizing the two handlers so that there is a little more commonality in how lists of components/processors are specified. For example, consider a \"first\", \"last\", and full processor list. IOW, be able to specify a list of processors to apply before the solrconfig-specified list, after, or to completely replace the solrconfig-specified list of processors. ",
            "id": "comment-14259567"
        },
        {
            "date": "2014-12-28T05:21:41+0000",
            "author": "Noble Paul",
            "content": "Thanks everyone. Currently the ticket is short on details. I hope to update this with finer details soon.  ",
            "id": "comment-14259573"
        },
        {
            "date": "2014-12-28T09:08:25+0000",
            "author": "Noble Paul",
            "content": "I've updated the description with more meat this time. Please comment ",
            "id": "comment-14259600"
        },
        {
            "date": "2014-12-28T15:56:21+0000",
            "author": "Jack Krupansky",
            "content": "Thanks for the description updates. Comments...\n\n1. We need to be explicit about how and when the hard-wired processors are invoked. In particular the \"run update\" processor. The \"log update\" processor is somewhat special in that it is not mandatory, but a lot of people are not explicitly aware of it, so if they leave it out, they will be wondering why they don't get logging of updates.\n\n2. I suggest three parameters: \"pre.processors\" to specify processors before the default chain, \"post.processors\" to specify processors after the default chain (before or after \"run update\" and \"log update\"??), and \"processors\" to specify a processor list to completely replace the default chain.\n\n3. Make \"log update\" be automatically added at the end unless a \"nolog\" processor is specified.\n\n4. Make \"run update\" be automatically added at the end unless a \"norun\" processor is specified.\n\n5. Discuss \"processor\" vs. \"processors\" - I prefer the latter since it is explicit, but maybe allow both since the singular/plural can be confusing.\n\n6. Consider supporting both a single parameter with a csv list as well as multiple parameters each with a single value. I prefer having the choice. Having a separate parameter for each processor can be more explicit sometimes.\n\n7. Consider a single-processor parameter with the option to specify the parameters for that processor. That would make it possible to invoke the various field mutating update processors, which would be especially cool and convenient. ",
            "id": "comment-14259665"
        },
        {
            "date": "2014-12-28T16:13:26+0000",
            "author": "Noble Paul",
            "content": "Jack Krupansky \nA lot of your suggestions are not realy in the scope of this ticket and should be addressed separately\n\nConsider supporting both a single parameter with a csv list as well as multiple parameters each with a single value. I prefer having the choice.\n\nI think having choices is not really good if it doesn't offer anything better.\n\nConsider a single-processor parameter with the option to specify the parameters for that processor. \n\nThis is just too complex to handle with the flat http parameter structure. Again beyond the scope\n\nURPs are really powerful but they are a bit hard to configure and use. I wish to make it easier and more widely used. That is the  objective of this ticket  ",
            "id": "comment-14259670"
        },
        {
            "date": "2015-01-05T18:18:55+0000",
            "author": "Noble Paul",
            "content": "We have a fairly complex system in the URP chain. It has ported very badly from the standalone to solrcloud The problem is the current configuration is not capable of capturing the various usecases\n\nWe have most of the logic hidden behind the scenes and not possible for users to manipulate. \n\nIn short there are three kind of URPs possible. \n\n\n\n\tpre processor : The chain that is  executed at the node where the request is received. This is particularly useful if there is some heavy lifting to be done and you don't wish to overwhelm the leader.\n\tprocessor :  Invoked at the leader before the DistributedUpdateProcessor is invoked\n\tpost processor : Invoked in all replicas before the RunUpdateProcessor is invoked\n\n\n\nAll these can be separate chains passed on the the UpdateRequestHandlers .  ",
            "id": "comment-14264848"
        },
        {
            "date": "2015-01-05T18:34:31+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "\nprocessor : Invoked at the leader before the DistributedUpdateProcessor is invoked\npost processor : Invoked in all replicas before the RunUpdateProcessor is invoked\n\nJust to clarify this a bit more:\n\n\tprocessor : Invoked at the leader before the DistributedUpdateProcessor is invoked and not at all on the replicas\n\tpost processor : Invoked in all replicas before the RunUpdateProcessor is invoked including the leader\n\n\n\nI agree that the current model is broken. Also see SOLR-2822, SOLR-3473 and SOLR-4016 for more history and related issues. ",
            "id": "comment-14264872"
        },
        {
            "date": "2015-01-05T18:41:09+0000",
            "author": "Alexandre Rafalovitch",
            "content": "Two questions:\n\n1. How do these three stages express themselves in the current URP chain? I thought there were only two stages (pre- and post- DistributedUpdateProcessor. Not sure where the third stage happens.\n\n2. How does this work with atomic updates. My understand was that it is possible to run URP on sent-only version of the document or on sent-and-loaded version. So, the URP can update a field based on some other field that may or may not have been updated in the update request. But I am not clear whether this boundary is the same or different from one of the 3 boundaries mentioned in this JIRA. ",
            "id": "comment-14264886"
        },
        {
            "date": "2015-01-05T18:48:46+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "How do these three stages express themselves in the current URP chain? I thought there were only two stages (pre- and post- DistributedUpdateProcessor. Not sure where the third stage happens.\n\nI think Noble is talking about the concept of URP and not actual existing implementations. The current URP chains are carried over from the non-cloud Solr days and it was modified to support pre/post processing by making DistribUpdateProcessor as a special marker processor. We should try to re-imagine this feature as a fresh one and try to accommodate all use-cases and make them easy to use as well. ",
            "id": "comment-14264895"
        },
        {
            "date": "2015-01-05T18:53:50+0000",
            "author": "Noble Paul",
            "content": "I thought there were only two stages (pre- and post- DistributedUpdateProcessor\nThe \"pre processor\" mentioned above is not possible in the current URP chain. This is a new feature only \n\nHow do these three stages express themselves in the current URP chain\n\nI'm not sure we should have the new features added to the old syntax and it does not fit very well there. ",
            "id": "comment-14264905"
        },
        {
            "date": "2015-01-05T18:58:30+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "How does this work with atomic updates. My understand was that it is possible to run URP on sent-only version of the document or on sent-and-loaded version. So, the URP can update a field based on some other field that may or may not have been updated in the update request. But I am not clear whether this boundary is the same or different from one of the 3 boundaries mentioned in this JIRA.\n\nGood point. I guess the pre-processor and processor chains as Noble outlined can only apply on sent-only versions. The post-processor applies on sent-and-loaded documents. ",
            "id": "comment-14264913"
        },
        {
            "date": "2015-01-05T20:15:57+0000",
            "author": "Alexandre Rafalovitch",
            "content": "I don't mind the new approach to be a super-set of the old one with a new and better syntax. I just was asking the questions to ensure I understand how the old use cases map to this new approach.\n\nIs the plan for this to go into 5? Or trunk only? ",
            "id": "comment-14265037"
        },
        {
            "date": "2015-01-05T20:34:37+0000",
            "author": "Noble Paul",
            "content": "Alexandre Rafalovitch I'm glad that you are asking the right questions\n\nThis is not a 5.0 feature. This will only be taken up post 5.0. I'm just getting the design right ",
            "id": "comment-14265059"
        },
        {
            "date": "2015-01-05T20:39:35+0000",
            "author": "Alexandre Rafalovitch",
            "content": "For post 5.0 (with more time) I would also check what the other methods in the updates are doing. I have a feeling they are super dark-arts somehow. Especially with SolrCloud. \n\nAs a test, it would be really nice to have a Debug URP that would actually be able to trace changes happening through each step of URP. Similar to the Analysis screen of Admin UI. ",
            "id": "comment-14265061"
        },
        {
            "date": "2015-01-06T07:45:57+0000",
            "author": "Ramkumar Aiyengar",
            "content": "+1 especially for having separate interfaces for the distrib (leader) and non-distrib (replica) cases, currently the two are entangled in too many places leading to lot of inefficiencies and inflexibility. I am trying to do this off and on for SearchComponent and realising how big a mess it currently is.. ",
            "id": "comment-14265803"
        },
        {
            "date": "2015-03-13T01:31:28+0000",
            "author": "Alexandre Rafalovitch",
            "content": "We better have the debugging statements explaining exactly what the final chain is. The mailing list is already starting to see people getting confused by chains defined as \"default\" being ignored because there is another declaration somewhere in the initParams section. It's a hell to troubleshoot.\n\nSo, please make sure that there is a debug level log statement that at least names the classes in the sequence created. ",
            "id": "comment-14359751"
        },
        {
            "date": "2015-03-13T13:13:17+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1666436 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1666436 ]\n\nSOLR-6892: Improve the way update processors are used and make it simpler ",
            "id": "comment-14360312"
        },
        {
            "date": "2015-03-15T16:19:13+0000",
            "author": "Noble Paul",
            "content": "I have added info level logging which says exactly the order of Updateprocessors used ",
            "id": "comment-14362432"
        },
        {
            "date": "2015-03-16T21:33:14+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1667134 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1667134 ]\n\nSOLR-6892: Improve the way update processors are used and make it simpler ",
            "id": "comment-14363996"
        },
        {
            "date": "2015-03-18T01:42:14+0000",
            "author": "Yonik Seeley",
            "content": "https://svn.apache.org/viewvc/lucene/dev/trunk/solr/CHANGES.txt?r1=1666436&r2=1666435&pathrev=1666436\n\nMore descriptive CHANGES entries would be much appreciated! ",
            "id": "comment-14366467"
        },
        {
            "date": "2015-03-18T16:50:50+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1667587 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1667587 ]\n\nSOLR-6892: better description in CHANGES.txt ",
            "id": "comment-14367448"
        },
        {
            "date": "2015-03-18T16:53:04+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1667588 from Noble Paul in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1667588 ]\n\nSOLR-6892: better description in CHANGES.txt ",
            "id": "comment-14367451"
        },
        {
            "date": "2015-04-15T00:30:42+0000",
            "author": "Timothy Potter",
            "content": "Bulk close after 5.1 release ",
            "id": "comment-14495342"
        }
    ]
}