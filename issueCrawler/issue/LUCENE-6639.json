{
    "id": "LUCENE-6639",
    "title": "LRUQueryCache.CachingWrapperWeight not calling policy.onUse() if the first scorer is skipped",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "5.3",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "The method org.apache.lucene.search.LRUQueryCache.CachingWrapperWeight.scorer(LeafReaderContext) starts with\n\n\nif (context.ord == 0) {\n    policy.onUse(getQuery());\n}\n\n\n\nwhich can result in a missed call for queries that return a null scorer for the first segment.",
    "attachments": {
        "LUCENE-6639.patch": "https://issues.apache.org/jira/secure/attachment/12742602/LUCENE-6639.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14606434",
            "author": "Terry Smith",
            "date": "2015-06-29T21:24:01+0000",
            "content": "Attached unit test will fail if the extra IndexWriter.commit() gets triggered or the BooleanQuery clauses are shuffled to make the first clauses' scorer null for the first segment. "
        },
        {
            "id": "comment-14607868",
            "author": "Adrien Grand",
            "date": "2015-06-30T07:28:03+0000",
            "content": "I think there are two natural places where we can call policy.onUse(): Query.createWeight and Weight.scorer. None of them is perfect: if we put it in Query.createWeight, we will over-count how many times the query has been used if the weight is created yet never used, or under-count if the weight is used several times. And in Weight.scorer we under-count if no scorer is pulled on the first leaf as you noticed. Out of these two options, Weight.scorer is my favourite because it can never over-count, which I think it better given that caching too much is probably more harmful than not caching enough?\n\nWe could try to do something more sophisticated but I'm not sure it would be worth the complexity? "
        },
        {
            "id": "comment-14608281",
            "author": "Terry Smith",
            "date": "2015-06-30T13:35:43+0000",
            "content": "This doesn't seem pressing but irked me enough to submit a ticket. It feels that we should be able to be more correct but the current API isn't very supportive of that work flow.\n\nI slightly prefer calling onUse() from createWeight() as it does make this edge case of the first segment go away which I feel is harder to reason about than someone creating a weight and not using it. The improved multi-threaded search code in IndexSearcher is a great example of this misbehaving where there is no guarantee that the first segment's Weight.scorer() will be called before the other segments. However I'm not familiar with use cases that use Query.createWeight() without executing some kind of search or explain to know if they are more of an issue.\n\nIs adding bookend methods to more correctly detect the begin/end of the search phase seen as too messy and special casey?\n\nAt the end of the day I also wonder if it's worth the complexity but wanted to open this ticket to bootstrap the discussion as this could be a hard problem to diagnose in the future (someone wants to know why their query isn't getting cached and it's due to some obscure detail like this).\n\n\n "
        },
        {
            "id": "comment-14611649",
            "author": "Adrien Grand",
            "date": "2015-07-02T08:22:52+0000",
            "content": "One issue I have with putting the call in createWeight is that you might sometimes only pull a Weight in order to extract terms (eg. for highlighting or computing distributed term frequencies), so incrementing the counter here would not work.\n\nThat said, you made good arguments against the current logic. In particular it's true that reusing weights for multiple collections should not be common so maybe we can just call policy.onUse on the first time that Weight.scorer is called? "
        },
        {
            "id": "comment-14615087",
            "author": "Terry Smith",
            "date": "2015-07-06T14:29:46+0000",
            "content": "Ah, I didn't realize the highlighters were creating the weights to extract the terms, that makes sense.\n\nI like the idea of just calling onUse() the first time scorer() is called, that ought to be more robust and is very easy to understand. "
        },
        {
            "id": "comment-14615207",
            "author": "Adrien Grand",
            "date": "2015-07-06T15:50:09+0000",
            "content": "Thanks for the feedback Terry, I'll commit shortly then! "
        },
        {
            "id": "comment-14615359",
            "author": "ASF subversion and git services",
            "date": "2015-07-06T17:38:38+0000",
            "content": "Commit 1689464 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1689464 ]\n\nLUCENE-6639: Make LRUQueryCache consider a query as used on the first time a Scorer is pulled. "
        },
        {
            "id": "comment-14615386",
            "author": "ASF subversion and git services",
            "date": "2015-07-06T17:49:15+0000",
            "content": "Commit 1689470 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1689470 ]\n\nLUCENE-6639: Make LRUQueryCache consider a query as used on the first time a Scorer is pulled. "
        },
        {
            "id": "comment-14713324",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:26+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}