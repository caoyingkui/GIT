{
    "id": "LUCENE-1238",
    "title": "intermittent failures of  TestTimeLimitedCollector.testTimeoutMultiThreaded in nightly tests",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Occasionly TestTimeLimitedCollector.testTimeoutMultiThreaded fails. e.g. with this output:\n\n\n   [junit] ------------- Standard Error -----------------\n   [junit] Exception in thread \"Thread-97\" junit.framework.AssertionFailedError: no hits found!\n   [junit]     at junit.framework.Assert.fail(Assert.java:47)\n   [junit]     at junit.framework.Assert.assertTrue(Assert.java:20)\n   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector.doTestTimeout(TestTimeLimitedCollector.java:152)\n   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector.access$100(TestTimeLimitedCollector.java:38)\n   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector$1.run(TestTimeLimitedCollector.java:231)\n   [junit] Exception in thread \"Thread-85\" junit.framework.AssertionFailedError: no hits found!\n   [junit]     at junit.framework.Assert.fail(Assert.java:47)\n   [junit]     at junit.framework.Assert.assertTrue(Assert.java:20)\n   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector.doTestTimeout(TestTimeLimitedCollector.java:152)\n   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector.access$100(TestTimeLimitedCollector.java:38)\n   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector$1.run(TestTimeLimitedCollector.java:231)\n   [junit] ------------- ---------------- ---------------\n   [junit] Testcase: testTimeoutMultiThreaded(org.apache.lucene.search.TestTimeLimitedCollector):      FAILED\n   [junit] some threads failed! expected:<50> but was:<48>\n   [junit] junit.framework.AssertionFailedError: some threads failed! expected:<50> but was:<48>\n   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector.doTestMultiThreads(TestTimeLimitedCollector.java:255)\n   [junit]     at org.apache.lucene.search.TestTimeLimitedCollector.testTimeoutMultiThreaded(TestTimeLimitedCollector.java:220)\n   [junit]\n\n\n\nProblem either in test or in TimeLimitedCollector.",
    "attachments": {
        "LUCENE-1238.patch": "https://issues.apache.org/jira/secure/attachment/12378106/LUCENE-1238.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-03-18T07:23:03+0000",
            "content": "fixed typo in summary. ",
            "author": "Doron Cohen",
            "id": "comment-12579749"
        },
        {
            "date": "2008-03-18T07:44:21+0000",
            "content": "Problem was in test.\n\nHowever fix adds a greediness option to time-limited-collector (TLC):\n\n\tA greedy TLC upon timeout would allow the wrapped collector to\n  collect current doc and only then throw the timeout exception.\n\tA non greedy TLC (the default, as before) will immediately throw the exception.\n\n\n\nFor the test, setting to greedy allows to require that at least one doc was collected.\n\nI addition this patch:\n\n\tAdds missing javadocs for TLC constructor.\n\tIncrease \"slack\" in timeout requirements in the test.\n  This is to prevent further noise in this: \n     HLC is required to timeout \"not too soon and not too late\", but in a busy machine \n     the \"not too late\" part is problematic to test.\n     I considered to removing this part (not too late), but decided to leave it in for now.\n\tAdds a test for the setGreedy() option.\n\n\n\nAll TLC tests pass. ",
            "author": "Doron Cohen",
            "id": "comment-12579752"
        },
        {
            "date": "2008-03-18T18:01:12+0000",
            "content": "I intend to commit this later today. ",
            "author": "Doron Cohen",
            "id": "comment-12579960"
        },
        {
            "date": "2008-03-18T21:08:30+0000",
            "content": "Committed.  ",
            "author": "Doron Cohen",
            "id": "comment-12580083"
        }
    ]
}