{
    "id": "SOLR-1754",
    "title": "Legacy numeric types do not check input for bad syntax",
    "details": {
        "affect_versions": "1.4",
        "status": "Resolved",
        "fix_versions": [
            "1.5"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "The legacy numeric types do not check their input values for valid input. A text string is accepted as input for any of these types: IntField, LongField, FloatField, DoubleField. DateField checks its input.\n\nIn general this is a no-fix, except: that IntField is a necessary memory type because it cuts memory use in sorting.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12829769",
            "date": "2010-02-04T20:40:05+0000",
            "content": "The reason we never explicitly tested the input value was for speed \u2013 if the user says it's an int we trust them. The only places any FieldTypes explicitly validate the input strings (ie: SortableIntField, DateField, etc..) is when they get it free as a side effect of conversion (in DateField's case: even though we index the raw string, we have to parse it anyway looking for DateMath)\n\nIs there really any memory efficiency from IntField that can't be achieved with an appropriate precisionStep on TrieIntField? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12829812",
            "date": "2010-02-04T22:00:53+0000",
            "content": "Is there really any memory efficiency from IntField that can't be achieved with an appropriate precisionStep on TrieIntField?\n\nNope... sorting on both will be equivalent, regardless of what the precisionStep is. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12829868",
            "date": "2010-02-05T00:06:59+0000",
            "content": "I thought that this is how sorting works:\n\nAn array of java ints, 4 bytes apiece, is allocated with one for every document in the index. The ints are set to each successive docid.\n\nA separate array of objects is allocated, one entry for every term in the field. This array is sorted by the term value. There is other data hanging off this that we will not discuss.\n\nMy understanding was that if the field type is a Java int, the second array is not created, and only the first is needed.  And that the Solr IntField creates this type, and so if the field is a Solr IntField sorting requires less memory because it does not make the second array. \n\nIf the field is some other type, like a TrieField, sorting on that field cannot possibly use the same amount of memory as sorting on a Java int field. Clearly something about this is wrong. Please set me straight. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12829902",
            "date": "2010-02-05T01:25:25+0000",
            "content": "The second array you are talking about only exists if you use the StringIndex based FieldCache.\n\nThe TrieField subclasses all use the raw primitive FieldCache types, they just use a special parser to decode the Trie value into the raw primitive value ... take a look at o.a.s.schema.TrieField.getSortField.\n\nIf you look at stats.jsp you can see which FieldCaches are loaded for each field, and verify that all the TreidIntField's you sort on are using a primitive int[], and not a StringIndex. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12829906",
            "date": "2010-02-05T01:32:22+0000",
            "content": "Aha! Thank you very much.  "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12829907",
            "date": "2010-02-05T01:35:44+0000",
            "content": "After futher discussion, this is fine as it is, given that IntField is obsolete and the new types check their inputs. "
        }
    ]
}