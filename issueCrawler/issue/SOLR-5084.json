{
    "id": "SOLR-5084",
    "title": "new field type - EnumField",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We have encountered a use case in our system where we have a few fields (Severity. Risk etc) with a closed set of values, where the sort order for these values is pre-determined but not lexicographic (Critical is higher than High). Generically this is very close to how enums work.\n\nTo implement, I have prototyped a new type of field: EnumField where the inputs are a closed predefined  set of strings in a special configuration file (similar to currency.xml).\n\nThe code is based on 4.2.1.",
    "attachments": {
        "schema_example.xml": "https://issues.apache.org/jira/secure/attachment/12594598/schema_example.xml",
        "Solr-5084.trunk.patch": "https://issues.apache.org/jira/secure/attachment/12600598/Solr-5084.trunk.patch",
        "enumsConfig.xml": "https://issues.apache.org/jira/secure/attachment/12594597/enumsConfig.xml",
        "Solr-5084.patch": "https://issues.apache.org/jira/secure/attachment/12595176/Solr-5084.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jack Krupansky",
            "id": "comment-13721981",
            "date": "2013-07-28T16:04:58+0000",
            "content": "Hmmm... I'm wondering how this might tie in with Lucene faceted fields - optimized for a limited number of values. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13725456",
            "date": "2013-07-31T17:26:26+0000",
            "content": "This issue is interesting but its difficult to see the changes due to all the reformatting in the patch (e.g. changing existing 2-space indent to 4-space indent).\n\nIs it possible to fix this in the patch? See http://wiki.apache.org/solr/HowToContribute#Creating_the_patch_file\n\nThanks "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13726151",
            "date": "2013-08-01T07:02:08+0000",
            "content": "I reformatted the code.\nI hope it's OK now.\n\nThanks.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13734159",
            "date": "2013-08-08T23:16:58+0000",
            "content": "Elran:\n\n1) there's still several sections in your patch that have a lot of reformatting making it hard to see what exactly you've added.  (I realize that the formatting may not be 100% uniform in all of these files, but the key to making patches easy to read is not to change anything that does't have to be changed ... formatting changes should be done seperately and independently from functionality changes)\n\n2) could you please add a few unit tests to show how the type can be used when indexing/querying/faceting/returning stored fields so it's more clear what this patch does?\n\n3) I'm not sure that it makes sense to customize the response writers and the JavaBinCodec to know about hte enum values \u2013 it seems like it would make a lot more sense (and by much simpler) to have clients just treat the enum values as strings\n\n4) a lot of your code seems to be cut/paste from TrieField ... why can't the EnumField class subclass TrieField to re-use this behavior (or worst case: wrap a TrieIntField similar to how TrieDateField works) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13734178",
            "date": "2013-08-08T23:32:12+0000",
            "content": "I agree with Hossman.. stick with it though, I really like the idea of an efficient enumerated type.\n\nA few other ideas/questions (just from a glance, i could be wrong):\n\n\tshould we enforce from the enum config that the integer values are 0-N or something simple? This way, things like valuesources dont have to do hashing but simple array lookups.\n\tit isnt clear to me what happens if you send a bogus value. I think an enumerated type would be best if its \"strongly-typed\" and just throws exception if the value is bogus.\n\tshould the config, instead of being a separate config file, just be a nested element underneath the field type? I dont know if this is even possible or a good idea, but its an that would remove some xml files.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13734210",
            "date": "2013-08-08T23:55:39+0000",
            "content": "...nested element underneath the field type? I dont know if this is even possible or a good idea, but its an that would remove some xml files.\n\ni don't think the schema parsing code can handle that \u2013 it's attribute based, not nested element based\n\nshould we enforce from the enum config that the integer values are 0-N or something simple? ...\n\nyeah ... it would be tempting to not even let the config specify numeric values \u2013 just an ordered list, except:\n\n1) all hell would break loose if someone accidently inserted a new element anywhere other then the end of the list\n2) you'd need/want a way to \"disable\" values form the middle of the list from working again.\n\n#2 is a problem you'd need to worry about even if we keep the mappings explicit but enforce 0-N ... there needs to be something like...\n\n\n  <enum name=\"severity\">\n    <pair name=\"Not Available\" value=\"0\"/>\n    <pair name=\"Low\" value=\"1\"/>\n\n    <!-- value w/o name passes validation but prevents it from being used --><\n    <pair value=\"2\"/> <!-- \"Medium\" use to exist, but was phased out -->\n\n    <pair name=\"High\" value=\"3\"/>\n    <pair name=\"Critical\" value=\"4\"/>       \n\n    <!-- this however would fail, because we skipped 5-10 -->\n    <pair name=\"Super Nova\" value=\"11\"/>\n  </enum>\n\n\n\n... This way, things like valuesources dont have to do hashing but simple array lookups.\n\nI was actually thinking it would be nice to support multiple legal names (with one canonical for respones) per value, but that would preent the simple array lookps...\n\n\n  <enum name=\"severity\">\n    <value int=\"0\"><label>Not Available</label></value>\n    <value int=\"1\"><label>Low</label></value>\n\n    <!-- value w/o name passes validation but prevents it from being used --><\n    <value int=\"2\" /> <!-- \"Medium\" use to exist, but was phased out -->\n\n    <value int=\"3\"><label>High</label></value>\n\n    <value int=\"4\">\n      <label canonical=\"true\">Critical</label>\n      <label>Highest</label>\n    </value>\n  </enum>\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13734223",
            "date": "2013-08-09T00:09:42+0000",
            "content": "\n    ...nested element underneath the field type? I dont know if this is even possible or a good idea, but its an that would remove some xml files.\n\ni don't think the schema parsing code can handle that \u2013 it's attribute based, not nested element based\n\nRight but code can change. Other parts of solr allow this kinda stuff.\n\n\nyeah ... it would be tempting to not even let the config specify numeric values \u2013 just an ordered list, except:\n\n1) all hell would break loose if someone accidently inserted a new element anywhere other then the end of the list\n2) you'd need/want a way to \"disable\" values form the middle of the list from working again.\n\nWell i guess i look at it differently. That this is in a sense like an analyzer. you cant change the config without reindexing.\n\n\nI was actually thinking it would be nice to support multiple legal names (with one canonical for respones) per value, but that would preent the simple array lookps...\n\nWhy? I'm talking about int->canonical name (e.g. in the valuesource impl) not anything else. as far as name->int, you want a hash anyway. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13734228",
            "date": "2013-08-09T00:14:03+0000",
            "content": "Well i guess i look at it differently. That this is in a sense like an analyzer. you cant change the config without reindexing.\n\ni dunno ... that seems like it would really kill the utility of a field for a lot of use cases \u2013 if it had that kind of limitation, i would just use an \"int\" field an managing the mappings myself so id always know i could add/remove (EDIT) fields values w/o needing to reindex.\n\nto follow your example: if i completley change hte analyzer, then yes i have ot reindex \u2013 but if want to stop using a ynonym, i don't have to re-index every doc, just the ones that had that used that synonyms.\n\nas far as name->int, you want a hash anyway.\n\nright ... never mind, i was thinking about it backwards. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13734239",
            "date": "2013-08-09T00:19:37+0000",
            "content": "\ni dunno ... that seems like it would really kill the utility of a field for a lot of use cases \u2013 if it had that kind of limitation, i would just use an \"int\" field an managing the mappings myself so id always know i could add/remove (EDIT) fields values w/o needing to reindex.\n\nThis isnt really going to work here, because the idea is you want to assign sort order (not just values mapped to ints). If you want to rename a label, thats fine, but you cant really change the sort order without reindexing. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13734248",
            "date": "2013-08-09T00:24:42+0000",
            "content": "If you want to rename a label, thats fine, but you cant really change the sort order without reindexing.\n\nNo, no .. of course not ... i wasn't suggestiong you could change the order, just:\n\n\tremove a legal value from the list (w/o causing hte validation to complain)\n\tadd new values to the end of the list\n\t(as you mentioned) modify the label on an existing value\n\n\n\nSee the example i posted before about removing \"Medium\" but keeping \"High\" & \"Critical\" exactly as they are \u2013 no change in indexed data, just a way to tell the validation logic you were talking about adding \"skip this value, i removed it on purpose\" (or i suppose: \"skip this value, i'm reserving it as a placeholder for future use\") "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13734254",
            "date": "2013-08-09T00:32:39+0000",
            "content": "I think adding new values to the end of the list is no issue at all. neither is renaming labels.\n\nbut removing a legal value from the list, i think you need to reindex. Because what to do with documents that have that integer value?\n\nin general i'm just trying to make sure we keep things sane here, so that the underlying shit is efficient. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13734259",
            "date": "2013-08-09T00:40:34+0000",
            "content": "but removing a legal value from the list, i think you need to reindex. Because what to do with documents that have that integer value?\n\nFor sorting and value sources etc... nothing special happens \u2013 they still have the same numeric value under the covers; it's just that when writing out the \"stored\" values (ie: label) you act as if they have no value in the field at all (shouldn't affect efficiency at all.)\n\nIf the user wants some other behavior the burden is on them to re-index or delete the affected docs \u2013 but the simple stuff stays just as simple as if they were dealing with the int<->label mappings in their own code, the validation of legal labels just moves from the client to solr. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13734266",
            "date": "2013-08-09T00:47:05+0000",
            "content": "\nFor sorting and value sources etc... nothing special happens \u2013 they still have the same numeric value under the covers; it's just that when writing out the \"stored\" values (ie: label) you act as if they have no value in the field at all (shouldn't affect efficiency at all.)\n\nThen this is just renaming a label to some special value.\n\nI really think the best thing is to keep it simple, like java.lang.Enum. Just give a list of values. This way it will be efficient everywhere since the values will be dense. Its also conceptually simple.\n\nOtherwise, things get complicated. and the implementation may suffer due to sparse \"ordinals\". Really, i dont care, as docvalues will do the right thing as long as you have < 256 values (regardless of sparsity). Fieldcache wont, but doesn't bother me a bit.\n\nBut still, there is no sense in making things complicated and inefficient for no good reason. Someone could make a HairyComplicatedAndInefficientEnumType for that. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13734741",
            "date": "2013-08-09T12:56:45+0000",
            "content": "Hmmmm...\n\nSo the underlying assumption here is that the enum type is restricted to being single valued. Not saying it should be multiValued, just making sure it's explicit.\n\nHoss's point about inserting/removing values in the middle of the list leading to \"interesting\" behavior is well taken, but I'd rather deal with that by big fat warnings in the documentation, telling users they need to re-index. Let's wait for the compelling use-case before complexifying it...\n\nFWIW  "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13736975",
            "date": "2013-08-12T15:54:03+0000",
            "content": "Thank you all very much for your very quick feedback.\n\n@Hoss,\n\n     1)\tI eliminated all formatting changes and attached a new patch. I hope it'll be more readable now. \n     2)\tI will try to create unit test as soon as possible and attach it.\n     3)\tI returned the value as EnumFieldValue in JavaBin format because I would like to allow for a use case of sorting the values when returned to my application by SolrJ.\n     4)\tMaybe it could, but I tried to keep the implementation simple and it didn\u2019t appear to give much more value. If someone feels strongly about it I can revisit the implementation\n\n@Robert,\n\n   In the configuration, I chose to specify the numeric values because I want to also enable indexing and querying numeric values.\n   For example, the queries risk:[1 TO 3] and risk:[Low TO High] are both valid.  \n   Currently:\n\n\tIf a bogus string value is sent, the value is indexed as -1.\n\tIf a bogus integer value is sent, if the value is not a negative number, the value is indexed as is. If it\u2019s negative \u2013 the value is indexed as -1.\n\tThe display value is of course string. If we don\u2019t find a matching label to the numeric value in the configuration, the actual numeric value is displayed.\n   Adding a new value at the end, would work.\n   Changing a display string for a value, will also work for retrieving data \u2013 new data will have to be inserted using the new name (or by int value)\n   Removing a legal value from the list would retrieve the numeric value for existing data\n\n\n\n   I have no use case for removing a previously legal value, so I can either document the behavior, or implement a different behavior \u2013 depending on how this discussion goes\n\n@Erick,\n\n  I didn't intend to make this type single valued on purpose, it\u2019s just that my use case is single valued. I changed the field's configuration to multi value and it seems to work fine\n  (facet, pivot, stats, return stored field). Why do you say the assumption is the type is restricted to single value?\n  Thanks again. \n "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13736990",
            "date": "2013-08-12T16:14:08+0000",
            "content": "I failed attaching the new patch. I will attach it ASAP.\nThe only changes are formatting.  "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13738031",
            "date": "2013-08-13T09:46:26+0000",
            "content": "The patch is finally attached.\nI'll attach a patch with unit tests ASAP.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13738092",
            "date": "2013-08-13T11:14:02+0000",
            "content": "@Elran\n\nbq: Why do you say the assumption is the type is restricted to single value?...\n\nParts of the discussion mentioned sorting, which is undefined on multivalued fields. If sorting is required for an enum-type field then it shouldn't be mutliValued. There's no reason it needs to be restricted to single values, it's fine for the enum type to be just like any other field; it's up to the user to only put one value in the field if it's to be used to sorting.\n\nMostly getting it straight in my head what the characteristics are, not saying it should be single-valued-only...\n\nErick "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13738096",
            "date": "2013-08-13T11:19:20+0000",
            "content": "Wait: i said sort order (not sorting).\n\nSo to me the multivalued case of an enum field makes total sense (it is kinda like java's EnumSet). And the sort order defines what is used in faceting, range queries, and so on. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13738098",
            "date": "2013-08-13T11:28:48+0000",
            "content": "Ahhh, OK. Then Hoss says sorting, so no wonder I'm confused!\n\nThere's no reason one couldn't sort by a field of this type, right? Frankly though, it seems kind of low-utility since there are probably only going to be a few values in the common use-case, but I'd guess it's still a possibility... "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13738106",
            "date": "2013-08-13T11:34:35+0000",
            "content": "I think sorting is a major use case. With some of these previous examples like risk or issue tracker status, you want to sort by the field and for 'high' risk to sort after 'low', maybe 'closed' after 'created' and so on. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13746521",
            "date": "2013-08-21T16:12:32+0000",
            "content": "I have a few cycles to devote to this.\n\nElran Dvir What's the state of the most recent patch? You were going to attach a new patch that had some unit tests, is that forthcoming or did I miss it being attached?\n "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13747249",
            "date": "2013-08-22T05:28:45+0000",
            "content": "\n\nIn the latest patch I removed all redundant format changes. There were no changes in logic.\nI hope to attach the patch with unit tests in the next following days.\n\nThanks again for the attention.    "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13751202",
            "date": "2013-08-27T11:59:15+0000",
            "content": "Hi,\n\nI have attached a patch containing unit tests.\n\nThanks. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13751916",
            "date": "2013-08-27T23:55:14+0000",
            "content": "Hmmm, it doesn't apply cleanly to 4x or trunk. Usually patches are made against trunk and back-ported/merged to 4x BTW....\n\nRobert Muir\nChris Hostetter (Unused)\nAside from applying cleanly to the current 4x and trunk, what do you think about the current state of the patch? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13751933",
            "date": "2013-08-28T00:08:25+0000",
            "content": "I still really don't think we should add an enumerated type that isn't strict about inputs actually matching enumerated values: it loses all of its value to me.\n\nThere are a few inconsistencies where string inputs aren't mapped into their numeric value: like ValueSourceScorer.getRangeScorer and getRangeQuery in the fieldtype (in some cases).\n\nI don't understand the need for an analysis chain: The TrieTokenizerFactory is unnecessary and I have a patch to remove it on some issue somewhere but just havent gotten around to committing it.\n\nAnd I still would really like it if we didn't need a separate XML file for each enumerated type: its like a parallel schema.xml: I think it would be much better if we could nest this underneath the fieldtype.\n\nFinally, I still think the ordinals should be implicit in the list (as i mentioned before). This way the thing can actually be efficient. "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13752306",
            "date": "2013-08-28T11:24:15+0000",
            "content": "Hi Erick,\n\nI developed the feature with Solr 4.2.1 source code.\nI can create a similar patch based on Solr 4.4. Do you want me to create and attach it?\n\nThanks. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13752321",
            "date": "2013-08-28T11:56:06+0000",
            "content": "Yeah, if you would Actually, 4x (eventually 4.5) would be\nbetter, and against trunk would be even best. Uf/when we \napply it we'll merge it into the 4x branch.\n\nBut also take a look at Robert's latest comments, he's one\nof the deep-level Lucene knowledge.\n\nBest\nErick "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13752659",
            "date": "2013-08-28T18:17:01+0000",
            "content": "And I still would really like it if we didn't need a separate XML file for each enumerated type: its like a parallel schema.xml: I think it would be much better if we could nest this underneath the fieldtype.\n\nit would be nice, but as far as i know there is no way for a FieldType to do this \u2013 making this FieldType use an attribute to refer to another file (just like ExternalFile field does, or StopWordsFilterFactory, or SynonymFilterFactory, etc...) seems like a suitable approach for now, and if/when someone enhances FieldType configuration in general, then it can be revisted.  (ie: it doesn't seem fair to Elran to object to this patch/feature given that he's working iwth the APIs available)\n\nFinally, I still think the ordinals should be implicit in the list (as i mentioned before). This way the thing can actually be efficient.\n\nI agree that it makes sense to require that the ordinals be \"dense\" (ie: start at 0, no gaps allowed).\n\nBut in my opinion, from a usability standpoint, I think it's actually better to force the Solr admin writing the config to explicit about the numeric mappings in the config so that they have to be aware of the fact that a specific numeric value is used under the covers (ie: in hte indexed/docValues fields) for each value that the end users get.  It seems like it will help minimize the risk of someone assuming that only the \"labels\" matter in the configs and the can insert new ones to get the sorting they want.\n\nExample:\n\nIf the config looked like this...\n\n\n<enum name=\"priority\">\n  <value>LOW</value>\n  <value>HIGH</value>\n</enum>\n\n\n\n...then a user might not realize there is anything wrong with making the following additions w/o re-indexing...\n\n\n<enum name=\"priority\">\n  <value>NONE</value>\n  <value>LOW</value>\n  <value>MEDIUM</value>\n  <value>HIGH</value>\n</enum>\n\n\n\n...and if they did that they would silently get bogus results \u2013 no obvious error at runtime.\n\nAs long as the config forces them to be explicit about the values (and has error checking at startup that the values start a \"0\" and are monotomicly increasing ints) then anyone who wants to \"insert\" values into their config is going to have to pause and think about the fact that there is a concrete int associated with the existing values \u2013 and is more likely to realize that changing those ints has consequences. "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13753736",
            "date": "2013-08-29T15:38:32+0000",
            "content": "Hi all,\n\nI attached a new patch.\nThe patch is based on trunk.\nIt contains changes regarding the issues Robert mentioned (Thanks Robert):\n1. fixed the bug where string inputs weren't mapped into their numeric values in ValueSourceScorer.getRangeScorer and getRangeQuery\n2. removed analysis chain.\n\nIn the next following days, I will attach fixes for the remaining issues:\n1.Verify value strictness on startup (numeric values start at 0, increment by 1).\n2.Throwing exception when indexed value is not in the configuration (either number or string).\n\nThank you all. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13753786",
            "date": "2013-08-29T16:27:37+0000",
            "content": "\nAs long as the config forces them to be explicit about the values (and has error checking at startup that the values start a \"0\" and are monotomicly increasing ints) then anyone who wants to \"insert\" values into their config is going to have to pause and think about the fact that there is a concrete int associated with the existing values \u2013 and is more likely to realize that changing those ints has consequences.\n\nIf the values are implicitly 0, 1, 2, ... n, then why force the user to write that out? \n\nIf you are worried about idiot users, add a comment around the field type to the example:\n\n\n<!-- note: you cannot change the order/existing values without reindexing.\n     but you can always add new values to the end. -->\n\n\n\nOtherwise it just makes the configuration overly verbose to have them write 0..n themselves. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13754412",
            "date": "2013-08-30T06:05:39+0000",
            "content": "If you are worried about idiot users, add a comment around the field type to the example:\n\n+1  A comment suffices. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13755524",
            "date": "2013-08-31T14:09:33+0000",
            "content": "Assigned it to myself just so it stays on my radar, Elran is still driving the bus.... "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13755744",
            "date": "2013-09-01T15:52:19+0000",
            "content": "Hi all,\n\nI attached a new patch that contains:\n1.Integer values in enum configuration are now implicit 0-N \n2.Throw exception when indexed value is not in the configuration (either numeric or string)\n\nShould I change the example directory to demonstrate the use? If so, how?\n\nThanks. "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13768442",
            "date": "2013-09-16T15:53:58+0000",
            "content": "Hi all,\n\nDid any have a chance to examine the latest patch?\n\nThanks.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13768661",
            "date": "2013-09-16T19:30:37+0000",
            "content": "I have a flight coming up, I'll see if I can give it a look-see. "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13769270",
            "date": "2013-09-17T06:53:21+0000",
            "content": "Thanks! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13770970",
            "date": "2013-09-18T17:06:23+0000",
            "content": "Rough draft comments. I won't be able to do anything more until this evening (Pacific time), in meetings all day.\n\n\nElran\n\n1> What do you (and others) think about putting the enum right in the schema.xml file,\nperhaps as as many children of <fields><enum></enum><enum></enum></fields> as necessary?\nThat would at least keep them together and not introduce a separate file.\n\n1.5> There's still the IntelliJ headers in the new files, should be removed.\n\n2> JavabinCodec.java\n          SOLRINPUTDOC_CHILDS = 17,\n\n  //Why is this value identical to SOLRINPUTDOC_CHILDS? It may be fine, verifying\n          ENUM_FIELD_VALUE = 17,\n\n3> StatsValuesFactory.updateMinMax. How does this.max ever get set to non-null?\n\n4> EnumField.java. \n  > You have a custom field isNullOrEmpty. There's nothing wrong with this,\n     but StringUtils.isBlank already takes care of this, less code to maintain.\n\n  > storedToIndexed isn't referenced and, at least in trunk, doesn't show as being\n    overridden (haven't checked 4x). May be OK but....\n\n5> EnumFieldTest.java\n  > How about a couple of tests that exercise inclusive and exclusive ranges with defined\n    endpoints rather than [* TO *]?\n  > The general coding practice (even though I like the leading underscore for member\n    vars personally) is to not have them, please change.\n "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13771183",
            "date": "2013-09-18T20:15:21+0000",
            "content": "\n What do you (and others) think about putting the enum right in the schema.xml file,\nperhaps as as many children of <fields><enum></enum><enum></enum></fields> as necessary?\nThat would at least keep them together and not introduce a separate file.\n\nInlining within schema.xml would definitely be better.  But do we need children at all?  Why not just an attribute with a comma separated list (and allow for comma escaping)? "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13774412",
            "date": "2013-09-23T09:24:31+0000",
            "content": "Hi Erick,\n\nThanks for the feedback.\n\n1) I think your suggestion would be much better, especially if we can keep the syntax fairly compact. However I would like to separate that effort from this change (it might apply to CurrencyField and other use cases so might warrant a different issue)\n\n1.5) gone in today's patch.\n\n2)I'm not seeing 17 in the patch, I have ENUM_FIELD_VALUE as 18. I rechecked for the today's patch as well - not sure where the difference is coming from\n\n3)I am not checking null value of this.max. I am checking null value of the parameter max of the function. So this.max should be set to non-null.\n\n4) usage of isNullOrEmpty - again, I've removed the isNullOrEmpty code in the Sep 1st patch. Can't explain why you are still seeing it... I also have an override of storedToIndexed showing in my patch\n\n5) there were inclusive range tests in the function testEnumRangeSearch. I have added now exclusive range tests in today's patch .\n\nI have removed leading underscores from members in today's patch.\n\nThanks! "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13793595",
            "date": "2013-10-13T08:28:20+0000",
            "content": "Hi all,\n\nDid anyone have a chance to examine the latest patch? Is everthing fine?\n\nThanks. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13793613",
            "date": "2013-10-13T10:54:50+0000",
            "content": "Elran:\n\nI haven't forgotten, I've just been swamped. I'll try to get to it Real Soon Now, but I'm traveling for the next 10 days. Anyone who wants to go ahead and grab and commit this please feel free!\n\nErick "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13793683",
            "date": "2013-10-13T15:10:05+0000",
            "content": "Thanks! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13808244",
            "date": "2013-10-29T18:02:25+0000",
            "content": "Cleans up a couple of import statements, adds a license header etc.\n\nElran:\n\nPlease try running 'ant precommit' after applying the patch. That step complains about missing JavaDocs, there are a couple of files that don't have any.\n\nWhat's the purpose of a separate trunk and 4x patch? In general we try to just have a patch for trunk and then use the merge capability. I'm asking mostly to see whether there are incompatibilities between trunk and 4x. If there's no specific reason, I'll ignore the 4x patch and do the merge thing when we commit.\n\nAll:\nIf there are no objections, I'll probably commit this over the weekend after we work out the precommit issues and insure that tests run, so speak up....\n\nErick "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13809013",
            "date": "2013-10-30T12:09:46+0000",
            "content": "Hi Erick,\n\nI have added the necessary JavaDocs. Now  'ant precommit' finishes successfully\nI have attached updated patch.\nYou can ignore the 4.x version. It's only here because it's the version I started with.\n\nThank you very much! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13809842",
            "date": "2013-10-31T01:40:12+0000",
            "content": "Fixes EOL warnings on OS X, passes precommit (there were a couple of Javadoc warnings), addes ASF header to one file that didn't have it.\n\nHowever, tests don't seem to be passing, not sure whether this is a problem with this patch or not. The tests are distributed e.g. LeaderElectionIntegrationTest\n "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13810092",
            "date": "2013-10-31T10:21:31+0000",
            "content": "Attached new patch\nFixes our test issues. Added \"putConfig(\"conf1\", zkClient, solrhome, \"enumsConfig.xml\");\" in buildZooKeeper in  LeaderElectionIntegrationTest.\nThere are still test errors but I don't think it's related to our patch (thread leaked from SUITE scope at org.apache.solr.servlet.SolrRequestParserTest).\n\nThanks. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13811683",
            "date": "2013-11-01T21:32:43+0000",
            "content": "OK, looks good. On my Mac, I get two failures, but I also get those same failures in trunk without the patch.\n\n\nSo unless someone objects, I'll commit this over the weekend.\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13814180",
            "date": "2013-11-05T19:39:21+0000",
            "content": "Some changes/additions. Mostly this is making tests work. The addition of the enum to the schema.xml file caused failures in other places that used that file but didn't have access to the underlying config files. I suspect they were somehow being found on Elran's machine but not on mine.\n\nAnyway, new patch. I'll be committing momentarily. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13814184",
            "date": "2013-11-05T19:40:53+0000",
            "content": "Added entry to CHANGES.txt for Solr. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13814185",
            "date": "2013-11-05T19:41:45+0000",
            "content": "Commit 1539111 from Erick Erickson in branch 'dev/trunk'\n[ https://svn.apache.org/r1539111 ]\n\nSOLR-5084: added enum field type to Solr "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13814194",
            "date": "2013-11-05T19:46:19+0000",
            "content": "Elran:\n\nI broke out the addition of the enums into the schema.xml used for testing into it's own file so we didn't have issues with other tests FWIW. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13814243",
            "date": "2013-11-05T20:54:54+0000",
            "content": "Commit 1539128 from Erick Erickson in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1539128 ]\n\nSOLR-5084: new enum field type "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13814244",
            "date": "2013-11-05T20:56:04+0000",
            "content": "I had a bit of work to reconcile the trunk and 4x versions, there's StorableField used in the patch that's not available in 4.x, but I think it's just a rename.\n\nWe can open up any issues with enums in new JIRAs. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13814245",
            "date": "2013-11-05T20:56:21+0000",
            "content": "Thanks Elran!! "
        },
        {
            "author": "Elran Dvir",
            "id": "comment-13814661",
            "date": "2013-11-06T06:47:21+0000",
            "content": "Thank you, Erick! "
        }
    ]
}