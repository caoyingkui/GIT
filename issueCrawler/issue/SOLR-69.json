{
    "id": "SOLR-69",
    "title": "PATCH:MoreLikeThis support",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Here's a patch that implements simple support of Lucene's MoreLikeThis class.\n\nThe MoreLikeThisHelper code is heavily based on (hmm...\"lifted from\" might be more appropriate  Erik Hatcher's example mentioned in http://www.mail-archive.com/solr-user@lucene.apache.org/msg00878.html\n\nTo use it, add at least the following parameters to a standard or dismax query:\n\n  mlt=true\n  mlt.fl=list,of,fields,which,define,similarity\n\nSee the MoreLikeThisHelper source code for more parameters.\n\nHere are two URLs that work with the example config, after loading all documents found in exampledocs in the index (just to show that it seems to work - of course you need a larger corpus to make it interesting):\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=standard&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mindf=1&fl=id,score\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=dismax&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mindf=1&fl=id,score\n\nResults are added to the output like this:\n<response>\n  ...\n  <lst name=\"moreLikeThis\">\n    <result name=\"UTF8TEST\" numFound=\"1\" start=\"0\" maxScore=\"1.5293242\">\n      <doc>\n        <float name=\"score\">1.5293242</float>\n        <str name=\"id\">SOLR1000</str>\n      </doc>\n    </result>\n    <result name=\"SOLR1000\" numFound=\"1\" start=\"0\" maxScore=\"1.5293242\">\n      <doc>\n        <float name=\"score\">1.5293242</float>\n        <str name=\"id\">UTF8TEST</str>\n      </doc>\n    </result>\n  </lst>\n\nI haven't tested this extensively yet, will do in the next few days. But comments are welcome of course.",
    "attachments": {
        "SOLR-69.patch": "https://issues.apache.org/jira/secure/attachment/12344594/SOLR-69.patch",
        "lucene-queries-2.0.0.jar": "https://issues.apache.org/jira/secure/attachment/12344595/lucene-queries-2.0.0.jar",
        "lucene-queries-2.1.1-dev.jar": "https://issues.apache.org/jira/secure/attachment/12356659/lucene-queries-2.1.1-dev.jar",
        "SOLR-69-MoreLikeThisRequestHandler.patch": "https://issues.apache.org/jira/secure/attachment/12356660/SOLR-69-MoreLikeThisRequestHandler.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12448180",
            "date": "2006-11-08T15:59:16+0000",
            "content": "The MoreLikeThis class comes from the lucene-queries jar, I enclose the version used for my tests "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12448207",
            "date": "2006-11-08T17:39:47+0000",
            "content": "I love it when features get implemented by others!     Thanks Bertrand! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12452044",
            "date": "2006-11-22T20:51:31+0000",
            "content": "I finally got around to checking this out... looks cool!\nIn your example URL, it looks like mindf=1 is repeated... is that right, or should one of them have been mintf=1? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12463125",
            "date": "2007-01-08T20:50:51+0000",
            "content": "Thanks.  it works great.  The only problem i ran into is a null pointer if you do not specify the fields to return (by default all of them without the score).  \n\njust add a not null check to line 102 of MoreLikeThisHelper.java\n\n<code>\n\n protected boolean usesScoreField(SolrQueryRequest req) {\n    String fl = req.getParams().get(SolrParams.FL);\n    if( fl != null ) {\n\t    for(String field : splitList.split(fl)) \n{\n\t      if(\"score\".equals(field)) return true;\n\t    }\n    }\n    return false;\n  }\n\n</code>\n "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12465087",
            "date": "2007-01-16T09:32:31+0000",
            "content": "Yonik, you're right about the mindf parameter duplication, here's the correct example URL\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=standard&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1&fl=id,score "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12465090",
            "date": "2007-01-16T09:38:42+0000",
            "content": "Thanks Ryan for spotting the fl param problem, I'll attach a revised patch which fixes it.\n\nBefore that, the following request caused an NPE, it works now:\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=standard&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1 "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12465092",
            "date": "2007-01-16T09:39:41+0000",
            "content": "SOLR-69.patch updated "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12465114",
            "date": "2007-01-16T10:37:19+0000",
            "content": "The method used to compute includeScore in MoreLikeThisHelper was inconsistent with what the XmlWriter does. \n\nI have changed it to take this info from SolrQueryResponse.getReturnFields().\n\nThe md5 sum of the current SOLR-69 patch is b6178d11d33f19b296b741a67df00d45\n\nWith this change, all the following requests should work (standard and dismax handlers, with no fl param, id only and id + score as return fields):\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=standard&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=standard&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1&fl=id\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=standard&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1&fl=id,score\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=dismax&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=dismax&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1&fl=id\n\nhttp://localhost:8983/solr/select/?stylesheet=&q=apache&qt=dismax&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mintf=1&fl=id,score "
        },
        {
            "author": "mrball",
            "id": "comment-12467139",
            "date": "2007-01-24T20:26:50+0000",
            "content": "Thanks for writing this!\n\nJust a shot in the dark: Would it be possible to use this on fields that are not stored? maybe the client has to supply the content of the field?\n\nReason being I'd rather not store the field as that basically duplicates the data already in my (normal non-lucene) database.\n "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12467179",
            "date": "2007-01-24T22:40:17+0000",
            "content": "Intuitively, without having checked exactly how it's implemented, I think MoreLikeThis queries should work irrelevant of whether fields are stored or not, as it's based on what's indexed. Maybe someone who knows Lucene's internals better than I do can comment.\n\nDid you find a case where non-stored fields cause problems? "
        },
        {
            "author": "mrball",
            "id": "comment-12467282",
            "date": "2007-01-25T08:22:18+0000",
            "content": "Yep, doesn't seem to work with non-stored fields. (if you only use non stored fields in mlt.fl)\n\nI believe the stored field values are used to build the query "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12467399",
            "date": "2007-01-25T14:59:58+0000",
            "content": "> MoreLikeThis queries should work irrelevant of whether fields are stored or not, as it's based on what's indexed\n\nI haven't looked at the lucene-code for more-like-this, but it's just like highlighting... to get the tokens for a specific document, you need to either get it's stored field and re-analyze or store term vectors and use them.\nLooking up those terms in other documents is then fast (that's where the inverted index comes in) "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12469229",
            "date": "2007-01-31T22:30:46+0000",
            "content": "There's a typo in the latest uploaded patch \u2013\n\n\n\tmap.put(MIN_DOC_FREQ, String.valueOf(MoreLikeThis.DEFALT_MIN_DOC_FREQ));\n+     map.put(MIN_DOC_FREQ, String.valueOf(MoreLikeThis.DEFAULT_MIN_DOC_FREQ));\n\n\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12470652",
            "date": "2007-02-06T17:22:32+0000",
            "content": "Should this be an integrated part of the standard/dismax handlers, or should it be a separate request handler?\nI guess the answer would depend on how it's used mos of the time:\n\nCase 1)  \n  The GUI queries the standard request handler and displays a list of documents with a little \"more-like-this\" button next to each document.  When pressed, the GUI queries the more-like-this handler with the specific document id, and then displays the results to the user.\n\nCase 2)\n  The GUI queries the standard request handler to display a list of documents, with a sub-list of similar \"mlt\" documents automatically displayed under each.  Or, those lists could be collapsed by default, but instantly displayed since the GUI already has the info.\n\nIf case (2) were rare, then perhaps mlt should be a separate handler.  Case (2) can still be done, it would just require more requests from the GUI to do it.\n\nIn either case, will highlighting be desired on any of the mlt docs?  Other thoughts? "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12470660",
            "date": "2007-02-06T17:35:19+0000",
            "content": "Making this a separate handler would probably make the code easier to understand, but the current code makes case 2) easier, while making case 1) easy as well (just query on the document's unique ID, with MoreLikeThis enabled).\n\nI'm for keeping it as is, integrated in the handlers as an option. If someone needs it as a separate handler, it wouldn't be hard to factor our the common parts.\n\nI have no strong feelings, however, as I built this patch to experiment with this feature but I'm not using it yet. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12470690",
            "date": "2007-02-06T18:52:43+0000",
            "content": "In Collex, we do more-like-this on a single object not within search results.   A separate handler would be sufficient for our current needs and avoid the other handlers from becoming overloaded with options.\n\nHighlighting is not needed on MLT documents in our case. "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12476002",
            "date": "2007-02-26T21:03:03+0000",
            "content": "See Ken Krugler's comments about term vectors at http://www.nabble.com/MoreLikeThis-and-term-vectors---documentation-suggestion-tf3295459.html "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12479887",
            "date": "2007-03-11T00:03:52+0000",
            "content": "Is there a way to get this patch to listen to start & rows on the moreLikeThis result section? "
        },
        {
            "author": "Bertrand Delacretaz",
            "id": "comment-12479991",
            "date": "2007-03-12T06:50:24+0000",
            "content": "> Is there a way to get this patch to listen to start & rows on the moreLikeThis result section? \n\nIIUC you want to use the start & rows request parameters to limit the number of results in the moreLikeThis section?\n\nThis is not implemented currently, and if we did it we'd have to use different parameter names (mlt.start and mlt.rows maybe) so that they don't interfere with the \"main\" part of the result set. "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12480116",
            "date": "2007-03-12T15:19:35+0000",
            "content": "Yes, paging and size would be helpful in the MLT section. mlt.start and mlt.rows would be great.\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12481989",
            "date": "2007-03-19T00:19:55+0000",
            "content": "trivial changes so it applies to trunk without conflicts... "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12493181",
            "date": "2007-05-02T19:18:19+0000",
            "content": "Changed the MoreLikeThis implementation to be a standalone request handler rather then tacked on to standard/dismax request handlers\n\nHow are other people using this patch?  I found that i am always looking for things that are similar to a single document.\n\nThis is still in progress, but posting for feedback.\n\nAn example command would be:\nhttp://localhost:8983/solr/mlt?q=apache&qt=standard&mlt=true&mlt.fl=manu,cat&mlt.mindf=1&mlt.mindf=1&fl=id,score\n\n "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12493185",
            "date": "2007-05-02T19:37:24+0000",
            "content": "I've personally never understood the \"more documents that don't match this query but are like the documents in this query\" usage of SOLR-69. MLT results (to me) should be like any other result, except by querying by text you are querying by document ID.  I'm confused as to how querying by query would work \u2013 if a query for 'apache' returned 10 docs, would MLT work on each one and generate n more docs per doc? And would the original query results get returned? What's the ordering?\n\nBut I do know that paging and faceting should definitely work on MLT results. (Ryan's patch seems to implement this but I haven't tested it.) MLT results should look and operate like any other results. \n\n\n\n "
        },
        {
            "author": "Ken Krugler",
            "id": "comment-12493198",
            "date": "2007-05-02T20:22:00+0000",
            "content": "Ryan & Brian's comments above are (I think) indicative of how most people want to use MLT - you've got a single document, and you want to show other documents that are similar.\n\nThe way we deal with this is to do a query on the <uniqueKey> field (as defined in the schema).\n\nIf this was the only use case, then the syntax could be something like:\n\nhttp://localhost:8983/solr/mlt?uid=xxx&mlt.fl=manu,cat&mindf=1&rows=10\n\nThe uid parameter would implicitly be applied against the <uniqueKey> field as specified in the schema.\n\nBut that's just for my use case - others may want the ability to have mlt results returned for the first hit result of an arbitrary query. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12493770",
            "date": "2007-05-04T18:36:16+0000",
            "content": "looking back at the two main use cases Yonik described in his comment from 06/Feb/07...\n\n At the most basic level, A request for MLT results for a single doc by uniqueKey (case#1) is just a simplistic example of asking for MLT results for an arbitrary query (case#2) ... that arbitrary query just happens to be on a uniqueKey field, and only returns one result.\n\nWhere things get more complicated is when you start returning other \"tier 2\" type information about the request \u2013 which begs the question \"what is tier 1 data\"?   If the MLT results are added as \"tier 2\" data to StandardRequestHandler response, then all of the other \"tier 2\" data blocks (highlighting, faceting, debugQuery score explanation, etc..) still refer to the main result from the original query ... this may be what you want in use case #2, but doesn't really make sense for use case #1, where the \"tier 1\" main result only contains the single document you asked for by id ... the score explanation and facet count numbers aren't very interesting in that case.\n\nfor case #1, what you really want is for the MLT data to be treated as the primary (\"tier 1\") result set, and all of hte \"tier 2\" data is about those results ... highlighting is done on the MLT docs, facet counts are for the MLT docs, debugQuery score explanation tells you why the MLT docs are like your original docs, etc..\n\nCase #1 and case #2 are both useful, to address Brian's 02/May/07 comment..\n\n > I've personally never understood the \"more documents \n > that don't match this query but are like the documents \n > in this query\" ... I'm confused as to how querying by \n > query would work \u2013 if a query for 'apache' returned 10 \n > docs, would MLT work on each one and generate n more \n > docs per doc? And would the original query results get \n > returned? What's the ordering? \n\nin your example, yes ... the users main search on \"apache\" would return 10 results sorted by whatever sort they specified.  for each of those 10 results, N similar results might me listed to the side (in a smaller font, or as a pop up widget) sorted most likely by how similar they are.  even if you don't want to surface those similar docs right there on the main result page, you still need to execute the MLT logic as part of hte initial request to know if there there are any similar docs (so you can surface the link/button for displaying them to the user.\n\nI would even argue there is actually a third use case ... \n\n\u2013\nCase 3)\n  The GUI queries the standard request handler to display a list of documents, with a single subsequent list of similar \"mlt\" documents that have things in common with all of the docs in the current page of results displayed elsewhere on the page.\n\u2013\n\n...where case #2 is about having separate MLT lists for each of hte matching reuslts, this case is about having a single \"if you are interested in all of these items, you might also be interested in these other items\" list.\n\ncase#1 and case#3 can both easily be satisfied with a single \"MoreLikeThisHandler\" which takes as it's input a generic query (ie: \"q=id:12345\" for case#1, and \"q=apache\" for case#3) and then generates a single \"tier 1\" result block of MLT results that relate to all of the docs matching that query (simpel case of 1 doc for case#1) ... all other \"tier 2\" data would be in regards to this main MLT result set.\n\ncase#2 would still easily be handled by having some new \"tier 2\" MLT data added to the StandardRequestHandler.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12493805",
            "date": "2007-05-04T21:27:29+0000",
            "content": "Refactored the MoreLikeThisRequestHandler so that it can support case #1, #2, #3\n\n\tadded faceting to the MoreLikeThisHandler\n\tmade it possible to remove the original match from the response.  This makes the response look the same as ones that come from /select\n\tAdded documentation to: http://wiki.apache.org/solr/MoreLikeThis\n\n "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12497022",
            "date": "2007-05-18T20:27:35+0000",
            "content": "Ryan, it seems the handler doesn't listen to the fl parameter either in the result section or the morelikethis section. It always returns everything. "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12497069",
            "date": "2007-05-18T22:38:43+0000",
            "content": "Oof ryan, my apologies, I was running an older version of this patch. fl is listened to. This is an excellent job, btw, I love that you can hide the original response.  "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12497178",
            "date": "2007-05-19T20:39:52+0000",
            "content": "R, one useful feature would be mlt.fq=query, where query is a filter query, like type:book. Or since we're moving to a solo handler for mlt, just supporting fq would be good.\n\nlike\n\n/mlt?q=id:BOOK01&mlt.fl=contents&fq=type:BOOK\n\n(Because in a single solr instance you've got information about books & authors, and you only want the mlt results to be books.) "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12497283",
            "date": "2007-05-20T19:28:39+0000",
            "content": "The mlt.exclude is similar to what I'm looking for but an mlt.fq is generally more useful.\n\nAlso, mlt.exclude does not seem to support more than a single term query, e.g.\n\nmlt.exclude=+type:AUTHOR +type:PUBLISHER\n\nstill lets type:PUBLISHER through.\n "
        },
        {
            "author": "Brian Whitman",
            "id": "comment-12497312",
            "date": "2007-05-20T23:53:31+0000",
            "content": "Also (sorry to keep commenting on this!) asking for fl=score doesn't work, I get this:\n\njava.lang.NullPointerException\n\tat org.apache.solr.search.DocSlice$1.score(DocSlice.java:117)\n\tat org.apache.solr.request.XMLWriter.writeDocList(XMLWriter.java:369)\n\tat org.apache.solr.request.XMLWriter.writeVal(XMLWriter.java:408)\n\tat org.apache.solr.request.XMLWriter.writeResponse(XMLWriter.java:126)\n\tat org.apache.solr.request.XMLResponseWriter.write(XMLResponseWriter.java:35)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:169)\n\tat com.caucho.server.dispatch.FilterFilterChain.doFilter(FilterFilterChain.java:70)\n\tat com.caucho.server.webapp.WebAppFilterChain.doFilter(WebAppFilterChain.java:173)\n\tat com.caucho.server.dispatch.ServletInvocation.service(ServletInvocation.java:229)\n\tat com.caucho.server.http.HttpRequest.handleRequest(HttpRequest.java:274)\n\tat com.caucho.server.port.TcpConnection.run(TcpConnection.java:511)\n\tat com.caucho.util.ThreadPool.runTasks(ThreadPool.java:520)\n\tat com.caucho.util.ThreadPool.run(ThreadPool.java:442)\n\tat java.lang.Thread.run(Thread.java:619)\n\nif I do a query like\n\n/mlt?q=id:100&mlt.fl=content&fl=content,score\n\nIf I take out the score from the fl it doesn't NPE.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12497737",
            "date": "2007-05-22T07:13:44+0000",
            "content": "Updating with a bunch of minor changes...\n\n1. Got rid of the \"exclude\" parameter and it is now using standard fq filters \n\n2. If only one field is specified, it uses the fields analizyer as Ken suggested in:\nhttp://www.nabble.com/MoreLikeThis-and-term-vectors---documentation-suggestion-tf3295459.html#a9188723\n\n3. set termVectors=\"true\" for 'cat' in the example solrconfig.xml and added a comment describing 'termVectors'\n\n4. Added standard debug info\n\n5. Fixed 'score' issue \u2013 it was squaking because the original match did not have a score field...\n\n "
        },
        {
            "author": "Andrew Nagy",
            "id": "comment-12499198",
            "date": "2007-05-25T18:33:29+0000",
            "content": "A really nice feature would be to allow for boosting for fields, for example:\n\n?q=id:1&mlt=true&mlt.fl=title^5,author^3,topic\n\nThis would find items that are more similar to the title over the author, etc. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12500259",
            "date": "2007-05-30T23:21:17+0000",
            "content": "Updated patch to:\n\n\tuse searcher.getSchema().getAnalyzer()\n\tbe able to find similar documents from posted text\n\tbe able to return the \"interesting terms\" used for the MLT query\n\n\n\nAndrew: about field boosting...  This handler uses the lucene contrib MoreLikeThis implementation \u2013 that does not have a way to boost one field above another, If it did, we could easily add it  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12500915",
            "date": "2007-06-02T04:57:14+0000",
            "content": "added param: mlt.boost that calls mlt.setBoost() to boost the interesting terms (or not) this field is required if you want a real number returned with mlt.interestingTerms=details "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12579139",
            "date": "2008-03-16T03:23:52+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked \"Resolved\" and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.3 as of today 2008-03-15\n\n\n\nThe Fix Version for all 29 issues found was set to 1.3, email notification was suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this (hopefully) unique string: batch20070315hossman1\n "
        }
    ]
}