{
    "id": "LUCENE-874",
    "title": "Automatic reopen of IndexSearcher/IndexReader",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "To improve performance, a single instance of IndexSearcher should be used. However, if the index is updated, it's hard to close/reopen it, because multiple threads may be accessing it at the same time.\n\nLucene should include an out-of-the-box solution to this problem. Either a new class should be implemented to manage this behaviour (singleton IndexSearcher, plus detection of a modified index, plus safely closing and reopening the IndexSearcher) or this could be behind the scenes by the IndexSearcher class.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-05-03T18:12:04+0000",
            "content": "I agree that there should be a Sandbox endorsed solution to the very common need of a live, interactive index. Solr is great if you want to move beyond Lucene, but not everyone wants to use Solr. There are probably a lot of custom management systems out there to handle index access for a live system and I think there would be a lot of benefit to new users to standardize some of that, especially considering how often people seem to get it wrong when trying to do this themselves (multiple index writers and searchers, etc). IndexModifier is a step in that direction, but a lot more could be done. A lot of pieces are already around:\n\nLucene-390 : this class is great. It has a few shortcoming and could use some improvements and extending (warming searchers), but it is a very solid base for such things.\n\nLucene-112 : probably outdated, but some ideas for keeping a reader fresh.\n\nI know there are others as well.\n\nThe new IndexWriter that can delete is a great help in this regard as well, especially in combination with Lucene-390. Deleting used to involve releasing a writer, getting a writing reader and then doing the delete. This made batching extremely important...with IndexWriter now able to delete, you don't have to rely nearly as much on batching...reindexing in an object oriented environment can become much faster and designs can simplify. \n\n\n\tMark\n\n ",
            "author": "Mark Miller",
            "id": "comment-12493441"
        },
        {
            "date": "2007-05-03T19:28:43+0000",
            "content": "LUCENE-550 contains NotifiableIndex that by decoration keeps track of whats going on in a index. It comes with AutofreshedReader and AutofreshedSearcher, active hit collection cache et c. Perhaps that works for you? Java 1.5 ",
            "author": "Karl Wettin",
            "id": "comment-12493470"
        },
        {
            "date": "2007-05-04T01:50:25+0000",
            "content": "Do note that Solr can be embedded: http://wiki.apache.org/solr/EmbeddedSolr\nAnd there are improvements to this in the works too. ",
            "author": "Erik Hatcher",
            "id": "comment-12493570"
        },
        {
            "date": "2007-05-04T11:49:09+0000",
            "content": "AutofreshedSearcher seems to be something like what I was proposing, but it seems to rely on the NotifiableIndex mechanism. Will this work if the task that updates the index is on another process/JVM?\n\nI struggled with this problem on my own project, and came with a solution with points similar to Lucene-550 - a LuceneFactory, with factory methods for creating everything related with Lucene (IndexSearcher, IndexWriter, Analyzer, etc). The factory method for creating an IndexSearcher always returns the same instance, as advised by the Lucene javadocs.\n\nThe problem is when the index is modified (which, in my case, is done by an external process, from time to time). The IndexSearcher must be reopened. There are several issues to solve:\n\n-How to test if the index was modified? That's easy: !IndexReader.isCurrent && !IndexReader.locked\n-When to test if the index was modified? I test it on my LuceneFactory.getIndexSearcher() method, but only from time to time - it would be costly to test for every search that was made.\n-The index was modified; how to close the current IndexSearcher? Other processes may be still using it, or using Hits generated by it. This is the hardest part to solve.\n\n\tA reference count to the IndexSearcher must be maintained by the LuceneFactory, to know when all parties have finished searching.\n\tTo maintain a reference count, these parties must have a way to notify the factory that the search is finished.\n\tAlso, to maintain the reference count in a thread-safe manner, some locking must be used when getting and releasing the searcher (slow!)\n\tHow to wait for the reference count to reach 0? On another thread? Polling from time to time (on each LuceneFactory.getIndexSearcher call)?\n\n\n\nAs you can see, this is not trivial at all to do correctly - and so it should be implemented and given out-of-the-box with Lucene. Note that the above description uses Lucene as a black box, maybe it's easier to implement this inside the IndexSearcher class, by updating its internal structure when the index is changed.\n\nAnother way is to maintain one IndexSearcher per thread (with a ThreadLocal). The reopening of the IndexSearcher would be easier, but there would be several IndexSearchers on memory...\n\n\n\n ",
            "author": "Jo\u00e3o Fonseca",
            "id": "comment-12493656"
        },
        {
            "date": "2007-05-05T16:41:59+0000",
            "content": "Jo\u00e3o Fonseca [04/May/07 04:49 AM]\n> AutofreshedSearcher seems to be something like what I was proposing, but it \n> seems to rely on the NotifiableIndex mechanism. Will this work if the task that \n> updates the index is on another process/JVM?\n\nNo, it is a single JVM solution.\n\n> The problem is when the index is modified (which, in my case, is done by an\n> external process, from time to time). The IndexSearcher must be reopened. There\n> are several issues to solve: \n\nI would consider a JMS solution on top of NotifiableIndex (or your own factory). ",
            "author": "Karl Wettin",
            "id": "comment-12493884"
        },
        {
            "date": "2007-05-07T12:01:04+0000",
            "content": "> I would consider a JMS solution on top of NotifiableIndex (or your own factory). \n\nJMS seems to be a complicated and heavy solution to a simple and recurring problem for those using Lucene: you want to use a singleton IndexSearcher to improve performance, but when the index changes, you want the IndexSearch to show the updated information. ",
            "author": "Jo\u00e3o Fonseca",
            "id": "comment-12494026"
        },
        {
            "date": "2009-12-06T19:56:15+0000",
            "content": "Anyone interested in this issue? I think the new ref stuff actually makes this rather easy now ... ",
            "author": "Mark Miller",
            "id": "comment-12786686"
        }
    ]
}