{
    "id": "LUCENE-4541",
    "title": "Easier way to access ValueSource given docid",
    "details": {
        "components": [
            "modules/other"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "New Feature",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I was working on improving some sample code and I needed to access a value via a ValueSource given a docid in search results.  I was disappointed to see how many steps were needed.  Incidentally, Solr had to solve the same problem, and it's got ValueSourceAugmenter for this.  I propose a small utility class be created to do something similar, such that the client can merely create an instance and then call a method with a doc id to retrieve the value.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-11-06T07:05:29+0000",
            "content": "\n  public class ValueSourceAccessor {\n    // implement FunctionValues ?\n    private final List<AtomicReaderContext> readerContexts;\n    private final FunctionValues[] docValuesArr;\n    private final ValueSource valueSource;\n    private final Map fContext;\n\n    private int localId;\n    private FunctionValues values;\n\n    public ValueSourceAccessor(IndexSearcher searcher, ValueSource valueSource) {\n      readerContexts = searcher.getIndexReader().leaves();\n      this.valueSource = valueSource;\n      docValuesArr = new FunctionValues[readerContexts.size()];\n      fContext = ValueSource.newContext(searcher);\n    }\n\n    private void setState(int docid) throws IOException {\n      int idx = ReaderUtil.subIndex(docid, readerContexts);\n      AtomicReaderContext rcontext = readerContexts.get(idx);\n      values = docValuesArr[idx];\n      if (values == null) {\n        docValuesArr[idx] = values = valueSource.getValues(fContext, rcontext);\n      }\n      localId = docid - rcontext.docBase;\n    }\n\n    public double doubleVal(int docid) throws IOException {\n      setState(docid);\n      return values.doubleVal(localId);\n    }\n\n    public Object objectVal(int docid) throws IOException {\n      setState(docid);\n      return values.objectVal(localId);\n    }\n    \n    //...\n  }\n\n ",
            "author": "David Smiley",
            "id": "comment-13491262"
        }
    ]
}