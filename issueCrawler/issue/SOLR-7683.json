{
    "id": "SOLR-7683",
    "title": "Introduce support to identify Solr internal request types",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "SOLR-7344 is introducing support to partition the Jetty worker pool to enforce the number of concurrent requests for various types (e.g. Internal_Querying, Internal_Indexing, External etc.). For this we need to identify requests sent between Solr servers and their types (i.e. Querying/Indexing etc.).",
    "attachments": {
        "SOLR-7683.patch": "https://issues.apache.org/jira/secure/attachment/12740237/SOLR-7683.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-15T18:48:08+0000",
            "author": "Yonik Seeley",
            "content": "One TL;DR upshot of the discussion in SOLR-7344 is that we need a queue other than Internal_Querying for the Streaming API and friends (Expressions, parallel SQL) since they can have 2 or more levels of requests instead of the standard 2 for distributed search. ",
            "id": "comment-14586474"
        },
        {
            "date": "2015-06-17T22:56:10+0000",
            "author": "Hrishikesh Gadre",
            "content": "Here is a preliminary patch. This patch adds following two request headers in every request sent via HttpSolrClient.\n\nSolr-Request-Context (informs if this request is internal vs external)\nSolr-Request-Type (informs the sub-type of this request)\n\nI have defined a sub-class of HttpSolrClient which should be used for Solr internal communication (instead of HttpSolrClient). If this looks good, I can investigate forbidding the usage of HttpSolrClient in the Solr core logic.\n\nLet me know if this approach sounds reasonable. ",
            "id": "comment-14590792"
        },
        {
            "date": "2015-06-17T22:56:54+0000",
            "author": "Hrishikesh Gadre",
            "content": "+ Gregory Chanan  ",
            "id": "comment-14590795"
        },
        {
            "date": "2015-06-18T14:19:06+0000",
            "author": "Mark Miller",
            "content": "I like the look of this on a quick overview.\n\nIf this looks good, I can investigate forbidding the usage of HttpSolrClient in the Solr core logic.\n\nIt's okay to do this at the HttpSolrClient level? Are we no longer worried about other HttpClient usage? ",
            "id": "comment-14591865"
        },
        {
            "date": "2015-06-18T15:59:12+0000",
            "author": "Hrishikesh Gadre",
            "content": ">>It's okay to do this at the HttpSolrClient level? Are we no longer worried about other HttpClient usage?\n\nI think all other implementations of SolrClient use HttpSolrClient underneath. So we are covered from client side. On the server-side we are using HttpSolrClient mostly. I found only one usage of CloudSolrClient for WAN replication functionality. I think for this case, we should use client context since the communication is not between Solrcloud nodes (assuming WAN replications requires two separate SolrCloud instances). \n\nAny thoughts? ",
            "id": "comment-14592022"
        },
        {
            "date": "2015-06-26T01:18:59+0000",
            "author": "Gregory Chanan",
            "content": "Does the request type have to be a string?  Seems cleaner to just use the enum and have the client code transform the enum to a string when it needs to send it.  Or are you worried about being able to extend the types without modifying solr (i.e. I implement my own request handler that sends its own types that I want in their own pool \u2013 can I do that?)\n\nAlso, it sure would be nice to be able to be able to specify some kind of enforcement...seems like a mailicious user could just mess with type context/type to make this ineffectual, e.g. send everything as an internal request.  Any idea how this could be handled? ",
            "id": "comment-14602228"
        },
        {
            "date": "2015-10-17T16:34:42+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Hrishikesh Gadre, I am happy to pick this up, could you please bring the patch up to date?\n\nThe only change I would probably do is to remove unspecified in trunk alone so that any request handler is forced to specify it. But you don't have to update the patch for that, I will do it for trunk alone, and keep your patch for branch_5x where the backward compat is useful. ",
            "id": "comment-14961974"
        },
        {
            "date": "2015-10-17T19:50:55+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ramkumar Aiyengar Sure. I would like to add a unit test too. Let me do that ASAP. ",
            "id": "comment-14962070"
        },
        {
            "date": "2015-10-17T19:52:30+0000",
            "author": "Hrishikesh Gadre",
            "content": "Gregory Chanan \n\n>>are you worried about being able to extend the types without modifying solr (i.e. I implement my own request handler that sends its own types that I want in their own pool \u2013 can I do that?)\n\nYes that's correct.\n\n>>Also, it sure would be nice to be able to be able to specify some kind of enforcement...seems like a mailicious user could just mess with type context/type to make this ineffectual, e.g. send everything as an internal request. Any idea how this could be handled?\n\nNot sure. Will need to think about it. ",
            "id": "comment-14962072"
        },
        {
            "date": "2016-01-07T22:40:14+0000",
            "author": "Hrishikesh Gadre",
            "content": "Ramkumar Aiyengar Please find the updated patch. \n\nIn case of DirectXmlRequest, we don't know the actual type of request until after the object is created (and hence the value can not be hardcoded). Also since existing clients/applications may be using this class, it may not a good idea to enforce the requirement to specify a type. Hence may be we should keep \"Unspecified\" type for backwards compatibility?\n\nThe other thing is we need to make sure that for server <-> server communication, we are using the \"server\" context. Since we are creating HttpSolrClient instances at number of places, we need to figure out a good way to implement this. I propose that we should use a factory pattern for this. i.e. we should define two factory implementations each dedicated for a specific use-case (e.g. as a client or as a server) and refactor the code to use them appropriately. This may involve considerable amount of refactoring. But the resulting code would be clean and extensible for future requirements.\n\nAny thoughts? ",
            "id": "comment-15088301"
        },
        {
            "date": "2016-01-11T10:36:47+0000",
            "author": "Ramkumar Aiyengar",
            "content": "Thanks Hrishikesh Gadre..\n\nIn case of DirectXmlRequest, we don't know the actual type of request until after the object is created (and hence the value can not be hardcoded). Also since existing clients/applications may be using this class, it may not a good idea to enforce the requirement to specify a type. Hence may be we should keep \"Unspecified\" type for backwards compatibility?\n\nWe should keep backward compatibility for 5x, but could break it in trunk if it takes us forward. Ryan McKinley, Shalin Shekhar Mangar, this seems to be hardly used/touched in the last eight years (asking since you guys seem to have dealt with it years back), and is only internally used by DIH \u2013 but is a public interface. Is there any value in keeping it any longer? If not, I would propose just repurposing it as DIHRequest in trunk, else we could add a type..\n\nThe other thing is we need to make sure that for server <-> server communication, we are using the \"server\" context. Since we are creating HttpSolrClient instances at number of places, we need to figure out a good way to implement this. I propose that we should use a factory pattern for this. i.e. we should define two factory implementations each dedicated for a specific use-case (e.g. as a client or as a server) and refactor the code to use them appropriately. This may involve considerable amount of refactoring. But the resulting code would be clean and extensible for future requirements.\n\n+1 ",
            "id": "comment-15091751"
        },
        {
            "date": "2016-01-11T17:21:51+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I wouldn't mind moving it. It is hard to know how people are using it. It is a generic solr request which can be used to upload XML (in Solr format) directly to /update or it can also be used to upload arbitrary XML to DIH. Any reason why this class shouldn't be SolrRequestType.Update? ",
            "id": "comment-15092312"
        },
        {
            "date": "2016-01-19T23:57:30+0000",
            "author": "Hrishikesh Gadre",
            "content": "Shalin Shekhar Mangar I think the only problem with using SolrRequestType.Update is that it would result in incorrect reporting of statistics generated as part of the request scheduler (Refer to SOLR-7344 for details). May be we can define an additional type as Ram suggested (e.g. DIHRequest). ",
            "id": "comment-15107696"
        },
        {
            "date": "2016-01-20T14:31:51+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "May be we can define an additional type as Ram suggested (e.g. DIHRequest)\n\nThat is probably okay. ",
            "id": "comment-15108628"
        },
        {
            "date": "2016-02-24T15:42:49+0000",
            "author": "Mark Miller",
            "content": "This looks pretty close to done? ",
            "id": "comment-15163207"
        },
        {
            "date": "2016-03-22T16:24:29+0000",
            "author": "Hrishikesh Gadre",
            "content": "I am going to resume work on this one. ",
            "id": "comment-15206707"
        }
    ]
}