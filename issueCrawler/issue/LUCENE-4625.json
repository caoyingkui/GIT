{
    "id": "LUCENE-4625",
    "title": "Make TotalFacetCounts per-segment",
    "details": {
        "components": [
            "modules/facet"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "TotalFacetCounts are used during complements computation today. They are not per-segment and therefore are not NRT friendly. Even regardless to NRT, you need to compute them entirely from scratch whenever you reopen IR.\n\nIt would be good if we can develop them per-segment. If e.g. AtomicReader had a notion of cachable objects, it could be such an object. That has been discussed many times in the past though, without a consensus. So perhaps we can have a FacetsAtomicReader which manages TFC. But that creates other issues too, like who instantiates that AtomicReader (i.e. we'd need a FacetsCompositeReader too, and potentially IW would need to init that type) ...\n\nLet's explore these options, but in general it would be good to have TFC per-segment.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-12-12T21:35:06+0000",
            "content": "to cache it on the reader, you dont need to extend the reader, just do like CachingWrapperFilter? ",
            "author": "Robert Muir",
            "id": "comment-13530365"
        },
        {
            "date": "2012-12-12T21:48:36+0000",
            "content": "You mean with the WeakHashMap? I guess we can do that. But wouldn't it be better of an AtomicReader would just init the cachable objects when it's initialized (or lazily when they're asked) and destroy them on close()?\n\nAnyway, that discussion doesn't belong in that issue. I was suggesting the reader idea because I think that we might need to have a FacetsReader anyway, in order to e.g. provide on the fly migration of indexes that store the ordinals in the payload to DV, depends on how Facets-DV comes out.\n\nOn the positive side, the WeakHashMap is local to TFC, so it may be easy to start with. I don't plan to work on that issue for now, just opened it so that I don't forget . ",
            "author": "Shai Erera",
            "id": "comment-13530384"
        },
        {
            "date": "2012-12-12T21:53:01+0000",
            "content": "AtomicReader already provides the way to do this with its cache keys.\n\nI dont think we should move things like fieldcaches back to it. ",
            "author": "Robert Muir",
            "id": "comment-13530394"
        },
        {
            "date": "2012-12-13T04:15:44+0000",
            "content": "Yeah ok, I think you're right.\n\nOne thing that I forgot to write here yesterday (it only occurred to me before I fell asleep), is that TotalFacetCounts are global to the index. What I would like to do here is to compute PerSegmentTotalCounts and then have TFC aggregate all of these into one TFC array.\n\nThe question is how to make it work smoothly, w/o the application needing to do a lot? Well, today the app needs to recompute TFC for any top-level reader. By computing I mean that it needs to obtain the TFC for a reader, and that computes things under the covers if that's a new reader.\n\nMoving to per-segment TFC would mean that TFC would now not load the entire data from disk again, but rather compute the TFCs for the new segments only and return a fresh new TFC to the app. So something to start with:\n\n\n\tTFC will hold a WeakHM for AtomicTFC (or just TFC, need to see how it goes)\n\tWhen app gives a top-level reader to TFC, it iterates on leaves(), pulls from the cache the AtomicTFCs and computes new ATFCs for new segments and puts them in WHM.\n\tIt then computes the global TFC from the in-memory structure and returns that to the app. It must re-compute, because some segments may not exist anymore, and therefore it cannot just add the 'diff' from the new ATFCs.\n\n\n\nThe downside of that is that each segment holds a counting array at the size of the taxonomy. We can explore an alternative format to an array. E.g. small segments (NRT) will likely contain very few facet ordinals, and so two small parallel int[] (one denotes the ord, the other its count) would be better? Let's think about that too. ",
            "author": "Shai Erera",
            "id": "comment-13530661"
        }
    ]
}