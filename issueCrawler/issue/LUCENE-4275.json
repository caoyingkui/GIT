{
    "id": "LUCENE-4275",
    "title": "Threaded tests with MockDirectoryWrapper delete active PostingFormat files",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/codecs",
            "general/test"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-BETA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "As part of testing Lucene-4069 I have encountered sporadic issues with files going missing. I believe this is a bug in the test framework (multi-threading issues in MockDirectoryWrapper?) so have raised a separate issue with simplified test PostingFormat class here.\nUsing this test PF will fail due to a missing file roughly one in four times of executing this test:\nant test-core  -Dtestcase=TestIndexWriterCommit -Dtests.method=testCommitThreadSafety -Dtests.seed=EA320250471B75AE -Dtests.slow=true -Dtests.postingsformat=TestNonCoreDummyPostingsFormat -Dtests.locale=no -Dtests.timezone=Europe/Belfast -Dtests.file.encoding=UTF-8",
    "attachments": {
        "Lucene-4275-TestClass.patch": "https://issues.apache.org/jira/secure/attachment/12538533/Lucene-4275-TestClass.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-31T10:43:12+0000",
            "content": "Attached simple PostingsFormat used to illustrate cases of files going missing in PF tests. ",
            "author": "Mark Harwood",
            "id": "comment-13425668"
        },
        {
            "date": "2012-07-31T11:18:45+0000",
            "content": "I don't think there is anything wrong with mockdirectorywrapper.\n\nI recommend adding\n\n  System.err.println(\"deleting: \" + name);\n  Thread.dumpStack();\n\n\n\nTo your deleteFile() so you can see who (e.g. indexfiledeleter) deletes your file.\n\nI think its more likely some other issue due to the fact you are writing everything in close(). ",
            "author": "Robert Muir",
            "id": "comment-13425677"
        },
        {
            "date": "2012-07-31T16:25:49+0000",
            "content": "Thanks, Rob. This test requires a call to \"ant clean\" between each run before it will consistently work. However, I don't consider that a fix and assume that we are still looking for a bug here as there's an index consistency issue lurking somewhere here. I've tried adding the setting -Dtests.directory=RAMDirectory but the test still looks to have some \"memory\" between runs.\n\nI added some logging of creates and deletes as you suggest and it looks like on a second, un-cleansed run, my PF is being called to open a high-numbered segment which I suspect was created by an earlier run as the logging doesn't show signs of the PF being asked to created content for this (or any other) segment as part of the current run. At this point it fails as there is no longer a copy of  the \"foobar\" file listed by the directory.\nI have noticed in the logs from previous runs MDW is asked to delete the segment's \"foobar\" file by IndexWriter as part of compaction into a compound CFS.\n\nHope this sheds some light as I'm finding this a complex one to debug. ",
            "author": "Mark Harwood",
            "id": "comment-13425895"
        },
        {
            "date": "2012-07-31T17:11:54+0000",
            "content": "OK I dug into this ... it's actually normal for a file to go missing in this test (and, in general).\n\nIf one thread commits while another thread tries to open an IndexReader then it's expected files could be missing as the codec tries to open its files, ie if the commit completed (and removed old segments) before the IndexReader finished opening.  SegmentInfos.FindSegmentsFile catches the IOException and simply retries against the new segments file.\n\nSo ... I think all we need to do is remove that fileExists check that then throws IllegalStateException and let it throw the IOException, in BloomFilteringPF?  Or ... did something else go wrong with that...? ",
            "author": "Michael McCandless",
            "id": "comment-13425929"
        },
        {
            "date": "2012-08-01T09:45:26+0000",
            "content": "\nNailed it, Mike. Yet another beer I owe you.\nI removed the IllegalStateException and it looks like the retry logic is now kicking in and all tests pass \n\nThis reliance on throwing a particular exception type feels like an important contract to document. Currently the comments in PostingsFormat.fieldsProducer() read as follows:\n\nReads a segment.  NOTE: by the time this call returns, it must hold open any files it will need to use; else, those files may be deleted. \n\nI propose adding:\n\nAdditionally, required files may be deleted during the execution of this call before there is a chance to open them. Under these circumstances an IOException should be thrown by the implementation. IOExceptions are expected and will automatically cause a retry of the segment opening logic with the newly revised segments\n\nI'll roll that documentation addition into my Lucene-4069 patch ",
            "author": "Mark Harwood",
            "id": "comment-13426481"
        },
        {
            "date": "2012-08-01T11:15:54+0000",
            "content": "\nNailed it, Mike. Yet another beer I owe you.\n I removed the IllegalStateException and it looks like the retry logic is now kicking in and all tests pass\nSorry it took me so long to see this!\n\nI propose adding:\n\n+1, maybe just add \"when IndexWriter finishes a commit while an IndexReader is opening\"?  Or I can tweak it after you commit ... thanks! ",
            "author": "Michael McCandless",
            "id": "comment-13426526"
        }
    ]
}