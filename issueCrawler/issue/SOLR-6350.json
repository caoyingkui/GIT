{
    "id": "SOLR-6350",
    "title": "Percentiles in StatsComponent",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "components": [],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Add an option to compute user specified percentiles when computing stats\n\nExample...\n\n\nstats.field={!percentiles='1,2,98,99,99.999'}price",
    "attachments": {
        "SOLR-6350-Xu.patch": "https://issues.apache.org/jira/secure/attachment/12703619/SOLR-6350-Xu.patch",
        "SOLR-6350.patch": "https://issues.apache.org/jira/secure/attachment/12704554/SOLR-6350.patch",
        "SOLR-6350-xu.patch": "https://issues.apache.org/jira/secure/attachment/12675192/SOLR-6350-xu.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-14091536",
            "date": "2014-08-09T01:20:13+0000",
            "content": "\nProposed implementation...\n\n\n\tAdd Ted Dunnings t-digest as a dependency\n\tBuild up an ArrayDigets in NumericStatsValues.accumulate()\n\tin distributed mode, each shard should return ArrayDigest.asSmallBytes() base64 encoded - the coordinator node should use ArrayDigest.fromBytes() & AbstractTDigest.add(TDigest) to merge the results\n\tpercentiles should not be enabled by default - they really need a param to control which percentiles (if any) should be computed.\n\n "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14173311",
            "date": "2014-10-16T03:50:13+0000",
            "content": "First try, followed the proposed implementation. Added dependency, t-digest in single mode, and a quick-and-dirty test. Will take a look at distributed mode tomorrow.\n\nAlso need to figure out how to use t-diges (initial page size, compression, whether to compress, and when to compress).  "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14174384",
            "date": "2014-10-16T22:41:34+0000",
            "content": "Implement Percentiles for distributed mode and test.  "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14175591",
            "date": "2014-10-17T21:44:43+0000",
            "content": "Probably we should give compression parameter to users. \n\nThe T-Digest algorithm use compression parameter to control the trade-off between the size of the T-Digest and the accuracy which quantiles are estimated.  Users should be able to pick the trade-off by themselves. \n\nAnd probably AVL t-digest implementation is better.   "
        },
        {
            "author": "Jennifer Stumpf",
            "id": "comment-14350571",
            "date": "2015-03-06T16:49:47+0000",
            "content": "We have a tremendous need for percentiles, especially for 5.0.  We were formally using the patch from 3583 for 4.10.3, but we are getting ready to deploy with 5.0.\nIs there a plan for continuing with this improvement?  Have you seen performance issues or just anticipate them (WRT the compression parameter)? "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14350824",
            "date": "2015-03-06T20:13:05+0000",
            "content": "Sorry for losing tracking of this Jira. I can work on this this weekend. \n\nHoss Man Any quick feedback? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14351716",
            "date": "2015-03-07T17:50:40+0000",
            "content": "Is there a plan for continuing with this improvement?\n\ni absolutely plan to get percentiles into StatsComponent \u2013 it is \"next\" on my todo list to review as soon as SOLR-6349 is resolved (i thought that was already marked as a blocker - i'll fix that) which will hopefully be in the next few days.\n\nHoss Man Any quick feedback?\n\nSorry Xu, i've been heads down on SOLR-6349 and haven't even looked at your patch here yet \u2013 if you have time/interest in working on it more, maybe review & revise the current patch it in the context of the latest patch in SOLR-6349, so that once SOLR-6349 is committed there's a SOLR-6350 patch that applies clean? "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14353973",
            "date": "2015-03-10T00:33:40+0000",
            "content": "Sure. With pleasure \n\nNew patch that have the Hoss's new change about solr6349. I will continue to do more tests around this and improve this.  "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14354463",
            "date": "2015-03-10T07:30:34+0000",
            "content": "Add another test case with isShard= true and distributed test case.\nThe patch included Hoss's patch for Solr-6349, against trunk. \n\nWill keep updating and improve "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14356067",
            "date": "2015-03-11T01:19:03+0000",
            "content": "Almost same, fix existing tests. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14361434",
            "date": "2015-03-14T00:59:07+0000",
            "content": "I spent some time today massaging Xu's latest patch to apply cleanly against trunk.\n\nXu: please review and see if i missed anything?\n\nA few notes...\n\n\n\tI didn't do any in depth review yet, but i did sprinkle some nocommits arround related to things that jumped out at me while resolving conflicts\n\tStatsComponentTest.testPercentiles is failing for me (see below)\n\t\n\t\tdoes this fail for you? did i break something merging the patch?\n\t\n\t\n\tI didn't notice any distributed test, not sure if that's something still needing done, or if that was just because of a mistake in creating the patch file and \"new files\" weren't included.\n\tI tried to do some manual experimentation with this patch, and got really bizare results...\n\t\n\t\tevery percentile i requested came back as \"NaN\"\n\t\tif i requested more then one percentile value, i got a redundent percentiles block in the response for each, eg...\n\n...&stats.field={!percentiles=\"1,99,99.9\"}price\n\n  \"stats\":{\n    \"stats_fields\":{\n      \"price\":{\n        \"percentiles\":[\n          \"1\",\"NaN\",\n          \"99\",\"NaN\",\n          \"99.9\",\"NaN\"],\n        \"percentiles\":[\n          \"1\",\"NaN\",\n          \"99\",\"NaN\",\n          \"99.9\",\"NaN\"],\n        \"percentiles\":[\n          \"1\",\"NaN\",\n          \"99\",\"NaN\",\n          \"99.9\",\"NaN\"]}}}}\n\n\n\t\tthese results reproduced with both bin/solr -e techproducts and bin/solr -e cloud (in the later case using some synthetic data (generated by the same script used in SOLR-6349)\n\t\n\t\n\n\n\n\nTest failure i mentioned...\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=StatsComponentTest -Dtests.method=testPercentiles -Dtests.seed=EA16B33E5685B22 -Dtests.slow=true -Dtests.locale=mk_MK -Dtests.timezone=Pacific/Niue -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 1.27s | StatsComponentTest.testPercentiles <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: Difference too much\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([EA16B33E5685B22:3A66CB07A30CD216]:0)\n   [junit4]    > \tat org.apache.solr.handler.component.StatsComponentTest.testPercentiles(StatsComponentTest.java:1447)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n\n\n\nBTW: no need ot put your name as a suffix in the patch filename  \u2013 convention is to just name the patch after the jira.  The only reason to worry about distinguishing the file names is in cases where you explicitly posting a \"variant\" patch (ie: a strawman that you feel/know is broken and shouldn't be taken seriously long term, an alternative proposal to some other existing patch, an orthogonal patch only containing tests or some other independent changes, etc...) "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14362280",
            "date": "2015-03-15T07:48:09+0000",
            "content": "This patch has the latest trunk change, and should fix NaN errors. "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14362286",
            "date": "2015-03-15T08:01:52+0000",
            "content": "Thanks so much Hoss  .\n\nI think I fix the NaN errors, which is because my patch doesn't compute percentile stats with the new trunk change.  This also shows the edge case: when user asking percentiles for empty document set, we will give NaN.\n\n\nI didn't do any in depth review yet, but i did sprinkle some nocommits arround related to things that jumped out at me while resolving conflicts\nSome work seems quite dirty to me, will spend some time to improve that. For example,  we have a test case which will test all stats combinations, I just exclude percentiles right now, which is quite awful.  \n\nAnd another thing is I didn't do too much performance tests around this. There are plenty of parameters for Tdigest. I just pick a default number and ArrayDigest. \n\n\nI didn't notice any distributed test, not sure if that's something still needing done, or if that was just because of a mistake in creating the patch file and \"new files\" weren't included.\nI just added 4 simple test cases in the TestDistributedSearch.java. I probably missed them in my last patch. Have them back.\n\n\nBTW: no need ot put your name as a suffix in the patch filename \u2013 convention is to just name the patch after the jira. The only reason to worry about distinguishing the file names is in cases where you explicitly posting a \"variant\" patch (ie: a strawman that you feel/know is broken and shouldn't be taken seriously long term, an alternative proposal to some other existing patch, an orthogonal patch only containing tests or some other independent changes, etc...)\nHa, thanks a lot.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14363524",
            "date": "2015-03-16T17:22:47+0000",
            "content": "(FYI, haven't looked at latest patch, just replying to comments)\n\nThis also shows the edge case: when user asking percentiles for empty document set, we will give NaN.\n\nI think we should probably return 'null' for each percentile in that case?\n\nFor example, we have a test case which will test all stats combinations, I just exclude percentiles right now, which is quite awful. \n\nOn the test side, we can just add a map of the \"input\" params for each stat (for most it will be \"true\" for percentiles it will be the comma seperated string)\n\nI'm still not really comfortable with how those inpts are parsed though ... ultimately i'd like to refactor all of that stuff and push it down into the StatsValuesFactories (so each factor has an API returning what Stats it supports, failures are produced if you request an unsupported stat) \u2013 but for now, maybe we can just introduce a boolean parseParams(StatsField) into each Stat - most Stat instances could use a default impl that would look something like...\n\n\n/** return value of true means user is requesting this stat */\nboolean parseParams(StatsField sf) {\n  return sf.getLocalParams().getBool(this.getName());\n}\n\n\n\n...but percentiles could be more interesting? ...\n\n\n/** return value of true means user is requesting this stat */\nboolean parseParams(StatsField sf) {\n  String input = sf.getLocalParams().get(this.getName());\n  if (null ! = input) {\n    sf.setTDigetsOptions(input);\n    return true;\n  }\n  return false;\n}\n\n\n\n...what do you think?\n\nAnd another thing is I didn't do too much performance tests around this. There are plenty of parameters for Tdigest. I just pick a default number and ArrayDigest. \n\nYeah, i definitely think we should make those options configurable via another local param percentilOptions=\"...\" (or maybe a suffix on the list of percentiles?)\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14364243",
            "date": "2015-03-16T23:59:32+0000",
            "content": "Actaully .. Xu: it looks like your latest patch doesn't include the nocommits i added based on my cursory review of your earlier work \u2013 i'm confused as to what happened here ... did you ignore my changes and generate a completely new patch from trunk?\n\n(there's not a lot of info lost there, it's easy to revive those notes \u2013 i just want to make sure i understand what's going on ensure and that moving forward we don't have deviating work ... going back to my earlier comment about patch naming conventions: patches with the same name should build/evolve from the earlier versions, and include those existing changes) "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14364256",
            "date": "2015-03-17T00:06:56+0000",
            "content": "Thanks Hoss. \n\nI think I screwed it up. Really sorry about it. Will fix it tonight. "
        },
        {
            "author": "simpleBread",
            "id": "comment-14364275",
            "date": "2015-03-17T00:21:29+0000",
            "content": "I think my last patch just fix the bug, and I did exclude your cursory review. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14364303",
            "date": "2015-03-17T00:38:26+0000",
            "content": "I think I screwed it up. Really sorry about it. Will fix it tonight.\n\nno worries - i appreciate all your effort here ... I trust you to update your own patch to trunk more then i trust me \u2013 i just want to make sure we aren't losing track of anything. "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14364532",
            "date": "2015-03-17T04:22:53+0000",
            "content": "I deleted my last patch. This has my last fix and has Hoss's change. "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14364541",
            "date": "2015-03-17T04:30:02+0000",
            "content": "\nThis also shows the edge case: when user asking percentiles for empty document set, we will give NaN.\nI think we should probably return 'null' for each percentile in that case?\nSure, will add some test cases for this .\n\n\nI'm still not really comfortable with how those inpts are parsed though ... ultimately i'd like to refactor all of that stuff and push it down into the StatsValuesFactories (so each factor has an API returning what Stats it supports, failures are produced if you request an unsupported stat) \u2013 but for now, maybe we can just introduce a boolean parseParams(StatsField) into each Stat - most Stat instances could use a default impl that would look something like...\n\n/** return value of true means user is requesting this stat */\nboolean parseParams(StatsField sf) {\n  return sf.getLocalParams().getBool(this.getName());\n}\n\n\n...but percentiles could be more interesting? ...\n\n/** return value of true means user is requesting this stat */\nboolean parseParams(StatsField sf) {\n  String input = sf.getLocalParams().get(this.getName());\n  if (null ! = input) {\n    sf.setTDigetsOptions(input);\n    return true;\n  }\n  return false;\n}\n\n\n...what do you think?\n+1 \n\n\nYeah, i definitely think we should make those options configurable via another local param percentilOptions=\"...\" (or maybe a suffix on the list of percentiles?)\n\nI think \"percentilOptions\" would be really nice. I will improve the patch based on Hoss's comments, maybe tomorrow.  "
        },
        {
            "author": "Xu Zhang",
            "id": "comment-14368355",
            "date": "2015-03-19T02:06:09+0000",
            "content": "Update based on Hoss's suggestions.\n1, Modify test.\n2, add parseParams in to Stat\n3, add compression into local parameters for percentiles, similar to Elastic\n\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14370201",
            "date": "2015-03-19T21:54:13+0000",
            "content": "Nice work!  It would be great to have this percentile functionality for the new JSON Facet API / Facet Module as well (SOLR-7214).\nWe should see how we can share some of the implementation here. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-14377217",
            "date": "2015-03-24T03:43:15+0000",
            "content": "Xu, your laast patch looked pretty good, but while review & tightening up the tests i noticed a few more improvements.  \n\nI think this version is ready to commit.\n\nChanges since last patch...\n\n\n\talphabetize ive-versions.properties to make precommit happy\n\tadded SHA1, LICENSE, and NOTICE for tdigest\n\treverted unneccessary whitespace changes in CommonParams\n\tadded some javadocs to FieldStatsInfo\n\tStatsField...\n\t\n\t\tswitched from ArrayDigest to AVLTreeDigest per recomendations in the t-digest docs\n\t\trenamed \"compression\" localparam to \"tdigestCompression\"\n\t\t\n\t\t\tas an expert level op, we're assuming they know about the tdigets impl details\n\t\t\n\t\t\n\t\tsimplified tdigestCompression parsing to leverage SolrParam methods\n\t\trenamed \"getGetTdigestCompression()\" to \"getTdigestCompression()\"\n\t\tcorrected getTdigestCompression() return type and local var to be double (not int)\n\t\n\t\n\tStatsValuesFactory...\n\t\n\t\tuse calculateStats & includeInResponse consistently like all other stats\n\t\tremove unused \"protected Map<String,String> percentiles = new LinkedHashMap<>()\"\n\t\tfixed usage of \"getGetTdigestCompression()\" (new name, see above)\n\t\teliminated smallByteSize() from the serialization logic in addTypeSpecificStats (see comments)\n\t\n\t\n\tStatsComponentTest...\n\t\n\t\ttestIndividualStatLocalParams\n\t\t\n\t\t\ttightened assertions on individual percentile values\n\t\t\n\t\t\n\t\ttestPercentiles\n\t\t\n\t\t\tswitched to using queryAndResponse so we don't need substring for janky xml parsing\n\t\t\thardened asserts to ensure exact order of percentiles in response\n\t\t\tsimplified asserts that non-numerics don't support percentiles\n\t\t\n\t\t\n\t\n\t\n\tTestDistributedSearch...\n\t\n\t\tbeefed up assertions\n\t\tincluded sanity testing of FieldStatsInfo.getPercentiles()\n\t\n\t\n\n\n\n\n\nWe should see how we can share some of the implementation here.\n\nThat sounds like something that would be a much bigger scope then just percentiles, and should be tracked in it's own Jira. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-14377797",
            "date": "2015-03-24T12:56:30+0000",
            "content": "That sounds like something that would be a much bigger scope then just percentiles, and should be tracked in it's own Jira.\n\nIt's not about implementing it here... it's about keeping it in mind - it can change implementations. "
        },
        {
            "author": "Steve Molloy",
            "id": "comment-14377812",
            "date": "2015-03-24T13:06:47+0000",
            "content": "Agree with the separate issue to track this, created SOLR-7296 for it. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14378032",
            "date": "2015-03-24T15:33:22+0000",
            "content": "Commit 1668922 from hossman@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1668922 ]\n\nSOLR-6350: StatsComponent now supports Percentiles "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14378091",
            "date": "2015-03-24T16:23:52+0000",
            "content": "Commit 1668926 from hossman@apache.org in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1668926 ]\n\nSOLR-6350: StatsComponent now supports Percentiles (merge r1668922) "
        },
        {
            "author": "Timothy Potter",
            "id": "comment-14495323",
            "date": "2015-04-15T00:30:36+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}