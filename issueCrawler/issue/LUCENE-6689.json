{
    "id": "LUCENE-6689",
    "title": "Odd analysis problem with WDF, appears to be triggered by preceding analysis components",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.8",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "This problem shows up for me in Solr, but I believe the issue is down at the Lucene level, so I've opened the issue in the LUCENE project.  We can move it if necessary.\n\nI've boiled the problem down to this minimum Solr fieldType:\n\n\n    <fieldType name=\"testType\" class=\"solr.TextField\"\nsortMissingLast=\"true\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer\nclass=\"org.apache.lucene.analysis.icu.segmentation.ICUTokenizerFactory\"\nrulefiles=\"Latn:Latin-break-only-on-whitespace.rbbi\"/>\n        <filter class=\"solr.PatternReplaceFilterFactory\"\n          pattern=\"^(\\p{Punct}*)(.*?)(\\p{Punct}*)$\"\n          replacement=\"$2\"\n        />\n        <filter class=\"solr.WordDelimiterFilterFactory\"\n          splitOnCaseChange=\"1\"\n          splitOnNumerics=\"1\"\n          stemEnglishPossessive=\"1\"\n          generateWordParts=\"1\"\n          generateNumberParts=\"1\"\n          catenateWords=\"1\"\n          catenateNumbers=\"1\"\n          catenateAll=\"0\"\n          preserveOriginal=\"1\"\n        />\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer\nclass=\"org.apache.lucene.analysis.icu.segmentation.ICUTokenizerFactory\"\nrulefiles=\"Latn:Latin-break-only-on-whitespace.rbbi\"/>\n        <filter class=\"solr.PatternReplaceFilterFactory\"\n          pattern=\"^(\\p{Punct}*)(.*?)(\\p{Punct}*)$\"\n          replacement=\"$2\"\n        />\n        <filter class=\"solr.WordDelimiterFilterFactory\"\n          splitOnCaseChange=\"1\"\n          splitOnNumerics=\"1\"\n          stemEnglishPossessive=\"1\"\n          generateWordParts=\"1\"\n          generateNumberParts=\"1\"\n          catenateWords=\"0\"\n          catenateNumbers=\"0\"\n          catenateAll=\"0\"\n          preserveOriginal=\"0\"\n        />\n      </analyzer>\n    </fieldType>\n\n\n\nOn Solr 4.7, if this type is given the input \"aaa-bbb: ccc\" then index analysis puts aaa at term position 1 and bbb at term position 2.  This seems perfectly reasonable to me.  In Solr 4.9, both terms end up at position 2.  This causes phrase queries which used to work to return zero hits.  The exact text of the phrase query is in the original documents that match on 4.7.\n\nIf the custom rbbi (which is included unmodified from the lucene icu analysis source code) is not used, then the problem doesn't happen, because the punctuation doesn't make it to the PRF.  If the PatternReplaceFilterFactory is not present, then the problem doesn't happen.\n\nI can work around the problem by setting luceneMatchVersion to 4.7, but I think the behavior is a bug, and I would rather not continue to use 4.7 analysis when I upgrade to 5.x, which I hope to do soon.\n\nWhether luceneMatchversion is LUCENE_47 or LUCENE_4_9, query analysis puts aaa at term position 1 and bbb at term position 2.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14633706",
            "author": "Shawn Heisey",
            "date": "2015-07-20T15:38:23+0000",
            "content": "LUCENE-5111 seems to contain the commit that causes this behavior. "
        },
        {
            "id": "comment-14705543",
            "author": "Shawn Heisey",
            "date": "2015-08-20T18:52:24+0000",
            "content": "I can work around the specific queries that caused the problem if I make index and query WDF analysis exactly the same ... but there's a problem even then.\n\nAs a test, I entirely removed the query analysis above and removed the \"type\" attribute from the index analysis so it applies to both.  I put this fieldType into Solr 5.2.1 and went to the analysis screen.\n\nA phrase search for \"aaa bbb\" when the indexed value was \"aaa-bbb: ccc\" does not match, because the positions are wrong.  I believe that it should match.  A user would most likely expect it to match. "
        },
        {
            "id": "comment-14705820",
            "author": "Shawn Heisey",
            "date": "2015-08-20T21:44:58+0000",
            "content": "I have just confirmed that setting luceneMatchVersion to 4.7 when running the previously described test on 5.2.1 will fix the problem.  This means I have a workaround, but it's not one that I'm really very happy with. "
        },
        {
            "id": "comment-14705977",
            "author": "Shawn Heisey",
            "date": "2015-08-20T23:34:14+0000",
            "content": "I have just found a better workaround:  The luceneMatchVersion can be specified on each analysis component, so I can apply it only to the WordDelimiterFilterFactory on the index analysis.\n\nI hope this problem will still be fixed. "
        },
        {
            "id": "comment-14707408",
            "author": "Shawn Heisey",
            "date": "2015-08-21T20:22:30+0000",
            "content": "I have simplified the analysis chain, removing the ICU tokenizer and replacing it with the whitespace tokenizer.  The root problem appears to be an interaction between PatternReplaceFilter and WordDelimiterFilter.\n\nWith the following Solr analysis chain, an indexed value of \"aaa-bbb: ccc\" will not be found by a phrase search of \"aaa bbb\" because the positions on the two query terms don't match what's in the index.  The positions go wrong on the WordDelimiterFilter step.\n\n\n    <fieldType name=\"genText2\" class=\"solr.TextField\" sortMissingLast=\"true\" positionIncrementGap=\"100\">\n      <analyzer>\n        <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n        <filter class=\"solr.PatternReplaceFilterFactory\"\n          pattern=\"^(\\p{Punct}*)(.*?)(\\p{Punct}*)$\"\n          replacement=\"$2\"\n        />\n        <filter class=\"solr.WordDelimiterFilterFactory\"\n          splitOnCaseChange=\"1\"\n          splitOnNumerics=\"1\"\n          stemEnglishPossessive=\"1\"\n          generateWordParts=\"1\"\n          generateNumberParts=\"1\"\n          catenateWords=\"1\"\n          catenateNumbers=\"1\"\n          catenateAll=\"0\"\n          preserveOriginal=\"1\"\n        />\n      </analyzer>\n    </fieldType>\n\n\n\nIf I remove PRFF from the above chain, the problem goes away.  This filter is in the chain so that leading and trailing punctuation are removed from all terms, leaving punctuation inside the term for WDF to handle.\n\nAn additional problem with the analysis quoted above is that the \"aaabbb\" term is indexed at position 2.  I believe it should be at position 1.  This problem is also fixed by removing PRFF. "
        },
        {
            "id": "comment-14707511",
            "author": "Shawn Heisey",
            "date": "2015-08-21T21:53:43+0000",
            "content": "Thinking about this in more detail, another workaround is to remove PRFF entirely, at least from analysis chains where it is followed by WDFF.  WDF appears to remove that punctuation anyway, and it looks like it does it correctly for my purposes.\n\nI still believe that the behavior I'm seeing is a bug, even if there are at least two viable workarounds that will work for my situation.  Use cases may exist (more valid than mine) where the user needs pattern replace filter right before word delimiter filter. "
        },
        {
            "id": "comment-14768911",
            "author": "Shawn Heisey",
            "date": "2015-09-16T13:12:08+0000",
            "content": "I chose the latter workaround \u2013 removing PRFF anywhere WDFF is also used. "
        }
    ]
}