{
    "id": "SOLR-9454",
    "title": "Reduce object allocation during indexing because of JavaBinCodec.writeExternString()",
    "details": {
        "components": [
            "SolrCloud",
            "update"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [
            "6.7",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I setup Java Flight Recorder to profile indexing a 650MB JSON file using bin/post on 2 shard, 2 replica setup. It shows that the JavaBinCodec.writeExternString(String) method contributes a lot of garbage during indexing in SolrCloud. More specifically, it contributes ~1GB of HashMap$Node objects and ~450MB of HashMap$Node[] objects.\n\nMost of this allocation is because every request is serialized using a new instance of JavaBinUpdateRequestCodec which internally allocates a new HashMap for storing the extern strings.\n\nWe should explore keeping a global extern string map to eliminate redundant allocations.",
    "attachments": {
        "HashMapNodeArray_Allocations.png": "https://issues.apache.org/jira/secure/attachment/12826024/HashMapNodeArray_Allocations.png",
        "javabin-optimization.patch": "https://issues.apache.org/jira/secure/attachment/12827378/javabin-optimization.patch",
        "SOLR-9454.patch": "https://issues.apache.org/jira/secure/attachment/12826023/SOLR-9454.patch",
        "HashMapNode_Allocations.png": "https://issues.apache.org/jira/secure/attachment/12826025/HashMapNode_Allocations.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-08-29T15:53:48+0000",
            "author": "Noble Paul",
            "content": "Here is an implementation which uses a global string cache and use a local  int[] instead of a map ",
            "id": "comment-15446252"
        },
        {
            "date": "2016-08-29T15:56:51+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Screenshots from the java flight recorder showing allocations for HashMap$Node and HashMap$Node[]. ",
            "id": "comment-15446260"
        },
        {
            "date": "2016-09-07T14:18:53+0000",
            "author": "Noble Paul",
            "content": "uses an arraylist instead of Map. It may cause O for lookup but considering the fact that the map has few entries it may not be a big deal. We should benchmark it though ",
            "id": "comment-15470762"
        },
        {
            "date": "2017-03-13T16:42:19+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Moving to 6.5, since 6.4 has already been released. ",
            "id": "comment-15907795"
        }
    ]
}