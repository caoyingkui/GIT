{
    "id": "LUCENE-842",
    "title": "ParallelMultiSearcher memory leak",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.1"
        ],
        "affect_versions": "2.1",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "When using the org.apache.lucene.search.ParallelMultiSearcher to search on a single searcher (reading a single index), continuous runs result in a memory leak. \nSubstituting the MultiSearcher does not result in a memory leak. and is the workaround currently used.\n\nAnd example of the code used is as follows. Note the close routine was added for the individual searchers and the MultiSearcher otherwise the was a leak in MultiSearcher.\n\n    private void doSearch(Search search)\n    {\n        IndexSearcher[] indexSearchers = null;\n\n        MultiSearcher multiSearcher = null;\n        try\n        {\n            indexSearchers = getIndexSearcher();\n            \n            // aggregate the searches across multiple indexes\n            multiSearcher = new ParallelMultiSearcher(indexSearchers); // causes LEAK BAD\n            //multiSearcher = new MultiSearcher(indexSearchers); // NO leak GOOD\n\n            final QueryParser parser = new QueryParser(\"content\", new ExtendedStandardAnalyser());\n            final Query query = parser.parse(search.getQuery());\n            \n            final Hits hits = multiSearcher.search(query, getFilter(search.getFilters()), getSort(search.getSort()));\n\n\t\t\t// process hits...\n        }\n        finally\n        {\n            close(indexSearchers);\n            close(multiSearcher);\n        }\n    }\n\n    /**\n\n\tClose the index searchers.\n\t\n\t@param indexSearchers Index Searchers.\n     */\n    private static void close(IndexSearcher[] indexSearchers)\n    {\n        if (indexSearchers != null)\n        {\n            for (IndexSearcher indexSearcher : indexSearchers)\n            Unknown macro: {                try                {\n                    indexSearcher.close();\n                }                catch (IOException ioex)                {\n                    LOGGER.warn(\"Unable to close the index searcher!\", ioex);\n                }            } \n        }\n    }\n\n\n\n    /**\n\n\tClose the multi-searcher.\n\t\n\t@param aMultiSearcher Index Searchers.\n     */\n    private static void close(MultiSearcher aMultiSearcher)\n    Unknown macro: {        try        {\n            aMultiSearcher.close();\n        }        catch (IOException ioex)        {\n            LOGGER.warn(\"Unable to close the multi searcher!\", ioex);\n        }    }",
    "attachments": {
        "TestParallelMultiSearcherMemLeak.java": "https://issues.apache.org/jira/secure/attachment/12353996/TestParallelMultiSearcherMemLeak.java",
        "search_test_heap.PNG": "https://issues.apache.org/jira/secure/attachment/12354018/search_test_heap.PNG",
        "search_test_gc.PNG": "https://issues.apache.org/jira/secure/attachment/12354019/search_test_gc.PNG"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-03-22T18:33:59+0000",
            "content": "It is not clear to me how this code demonstrates a mem leak. The program itself is not very useful for showing/fixing that because it is not runnable as is - lots of getXXYZ() methods with unknown logic - others cannot compile and run it.\n\nWhat I get from the problem description and code is this: \n\n<quote> \nIf someone repeats the following sequence of steps over and over again:\n{ \n  [1] open one index searcher S over an index;  \n  [2] create a parallel multi searcher P over S;  \n  [3] search using P;  \n  [4] close P;  \n  [5] close S; \n}\nthen eventually a memory leak will be evident. \n</quote>\n\nAnd it seems you think that a single searcher is the case that causes the leak. Do you mean that with (say) two searchers there want be a leak? ",
            "author": "Doron Cohen",
            "id": "comment-12483264"
        },
        {
            "date": "2007-03-22T20:23:51+0000",
            "content": "Updated the code example to leak.\n\nDoron what do you suggest? Do you want me to attached the search index, libraries, and a main routine? It is pretty easy to execute this code, I'm simply showing the simple logic. \nThe first close, on the searchers, should not be necessary as the MultiSearcher should close all searchers, but I found it is. ",
            "author": "Thomas Connolly",
            "id": "comment-12483300"
        },
        {
            "date": "2007-03-22T20:45:06+0000",
            "content": "Best always is a unit test that fails due to the bug. This also allows to verify later that a fix actually fixes the bug. \n\nI packed the sample code in a Junit test (attached).\nIt passes for me. \n\nThomas, Does it fail for you? \nIf not, could you modify it to demonstrate the bug?\n\nThanks,\nDoron ",
            "author": "Doron Cohen",
            "id": "comment-12483312"
        },
        {
            "date": "2007-03-22T20:46:28+0000",
            "content": "Thomas:\nCan you write a JUnit test that builds a sample index and then runs PMS over it, eventually OOM-ing?\nFrom the cursory glance over your code, it looks like you are closing your searchers after every single search.  If that is indeed what you are doing, this may be the source of the memory leak - try reusing your searchers.\nAlso, why create a new (P)MS on every search?  Create it once, and reuse it.\n\nI'll leave this issue open for a few more days, but from the above code, it just looks like misuse of the Lucene API. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12483314"
        },
        {
            "date": "2007-03-23T01:52:46+0000",
            "content": "Netbeans 5.5 profile of heap ",
            "author": "Thomas Connolly",
            "id": "comment-12483374"
        },
        {
            "date": "2007-03-23T01:53:51+0000",
            "content": "Netbeans 5.5 garbage collection stats ",
            "author": "Thomas Connolly",
            "id": "comment-12483376"
        },
        {
            "date": "2007-03-23T02:01:36+0000",
            "content": "It was not a bug with lucene rather the netbeans 5.5 memory profiler was providing misleading information. I've attached two screenshots that show the heap and gc using the test case provided.\n\nThere may be an issue with netbeans around the profiling of joined threads, regardless it is not a bug in lucene.\n\nI do need to open and close a searchers, in each call. Basically the index(s) can be changed based upon the other events. \n\nPlease close the issue. Thank you for answering so quickly. It is a great piece of software. ",
            "author": "Thomas Connolly",
            "id": "comment-12483377"
        },
        {
            "date": "2007-03-23T05:51:51+0000",
            "content": "Thomas, thanks for following up closely on this (and great that this is not a real bug  )\nDoron ",
            "author": "Doron Cohen",
            "id": "comment-12483418"
        },
        {
            "date": "2007-03-30T09:02:58+0000",
            "content": "Just to add closure this issue had already been raised for Netbeans 5.5 and subsequently fixed.\nSee \n    http://www.netbeans.org/issues/show_bug.cgi?id=95020\n\nAgain thanks for the help resolving the profiler problem. ",
            "author": "Thomas Connolly",
            "id": "comment-12485445"
        }
    ]
}