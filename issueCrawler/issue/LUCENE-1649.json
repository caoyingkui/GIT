{
    "id": "LUCENE-1649",
    "title": "numerical problem associated with CustomScoreQuery, ValueSourceQuery",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.4.1",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "float type computation used in subclasses of FieldCacheSource ,ValueSourceQuery , will cause numerical error when moderately large int values were supplied in a field. \nFor example, consider a document with a field parsable as integer with the value 24118569\nDuring scoring, a cast will be performed like so, (float) 24118569, in order to get the float representation of the field. \nIn this case the value is turned into 24118568.0. If this value is then used to lookup a database the result will be incorrect even if we \ncast it back to an integer. \n\n\nmy temporal resolution to this problem is by attaching the int[] array from lucene's internal cache to the query object through reflection, \nand perform the value lookup myself with docid. Clearly , this is not optimal .",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-27T10:32:23+0000",
            "content": "I don't see that type of casting in neither mentioned classes. I suggest reopening with a patch if it's still relevant (maybe in other classes?) ",
            "author": "Shai Erera",
            "id": "comment-12987484"
        },
        {
            "date": "2011-01-27T13:35:11+0000",
            "content": "I think the creator of this refers to the precision loss caused in IntFieldSource.floatVal(doc) when a large int is \"widened\" to float, but unfortunately not the same. \n\nThe problem then materializes in app code when the score of that doc is used as a key for accessing e.g. a DB.\n\nSo problem is real, for such app, but not sure it should be fixed, because relying on a float score for accessing something by discrete int key seems a wrong design, - fetching that key from a payload seems a better approach.\n\nAnyway, long time, no patch, good to go to sleep until there is one. ",
            "author": "Doron Cohen",
            "id": "comment-12987551"
        }
    ]
}