{
    "id": "LUCENE-3364",
    "title": "Add score threshold into Scorer.score()",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/query/scoring"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "This is an optimization for scoring.\nGiven a Scorer.score() implementation, where features are gathered to calculate a score.\n\nProposal, add a parameter to score, e.g. score(float threshold)\n\nThis threshold is the minimum score to \"beat\" to make it to the current PriorityQueue. This could potential save a great deal of wasted calculation in the cases where recall is large.\n\nIn our case specifically, some of the features needed to do calculation can be expensive to obtain, it would be nice to have a place to decide whether or not even fetching these features are necessary.\n\nAlso, if we know the score would be low, simply threshold can be returned.\n\nLet me know if this makes sense and I can work on a patch.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-08-06T18:00:07+0000",
            "content": "Perhaps it would be easiest to just create a Collector that cut off based on score? ",
            "author": "Yonik Seeley",
            "id": "comment-13080437"
        },
        {
            "date": "2011-08-06T18:09:14+0000",
            "content": "Hi Yonik:\n\n   In Collector, the decision time to cut of a score would be too late, e.g.\n\n   float score = Scorer.score();  <--- this is where the cost would occur.\n   boolean cutOff = decide(score)\n\n   In my example, my score impl:\n\n   float s1 = cheapCalc(docid);\n   float s2 = expensiveCalc(docid);\n\n   return s1+s2;\n\n   So now if I know expensiveCalc is bounded by N, and cheapCalc returns a very small number, I can simply skip s2 calculation because this doc would be thrown out anyway.\n\n   Hope I am making sense \n\n-John ",
            "author": "John Wang",
            "id": "comment-13080439"
        },
        {
            "date": "2011-08-06T18:16:31+0000",
            "content": "Ah, gotcha - I see what you're saying now. ",
            "author": "Yonik Seeley",
            "id": "comment-13080442"
        },
        {
            "date": "2011-08-07T09:38:08+0000",
            "content": "To have more more advantages the minimum score could be given as a parameter to the nextDoc() and advance() methods. ",
            "author": "Paul Elschot",
            "id": "comment-13080561"
        },
        {
            "date": "2011-08-08T06:21:11+0000",
            "content": "Hi Paul:\n   I think adding score threshold to the nextDoc()/advance() apis would pollute the filtering part of the API which has nothing to do with scoring. I do see the spirit to allow for further skipping of docs given the score, however, a simply if check in that loop may be a hinderance to performance. So I am not sure if it is worth it.\n\n    Just my $0.02.\n\n-John\n\n\n ",
            "author": "John Wang",
            "id": "comment-13080764"
        },
        {
            "date": "2011-10-13T18:15:40+0000",
            "content": "Any thoughts on this whether this is a reasonable thing to add to Lucene? ",
            "author": "John Wang",
            "id": "comment-13126779"
        },
        {
            "date": "2011-10-13T18:32:46+0000",
            "content": "can't you override the range methods like score(Collector, ... (see termscorer for one scorer that overrides this method)\n\nyour scorer can even do this inside the original booleanscorer (it will call this range method).\n\notherwise, we are adding per-document checks for what is a really special case. ",
            "author": "Robert Muir",
            "id": "comment-13126790"
        },
        {
            "date": "2011-10-13T18:53:29+0000",
            "content": "Thanks Robert for the pointer!\nI don't see how this would work (help appreciated!), the problem I am trying to get around is for the collector to provide a threshold score and my scoring function would decide based on this threshold. How would I obtain such threshold from the range?\n\nThanks\n\n-John ",
            "author": "John Wang",
            "id": "comment-13126803"
        },
        {
            "date": "2011-10-13T19:01:32+0000",
            "content": "checkout the TermScorer method for an example:\nnote it overrides score(Collector) too and just passes to Integer.MAX_VALUE for end.\n\n  public boolean score(Collector c, int end, int firstDocID) throws IOException {\n    c.setScorer(this);\n    while (doc < end) {                           // for docs in window\n      //System.out.println(\"TS: collect doc=\" + doc);\n      c.collect(doc);                      // collect score\n      if (++pointer >= pointerMax) {\n        pointerMax = docsEnum.read();  // refill\n        if (pointerMax != 0) {\n          pointer = 0;\n        } else {\n          doc = NO_MORE_DOCS;                // set to sentinel value\n          return false;\n        }\n      } \n      doc = docs[pointer];\n      freq = freqs[pointer];\n    }\n    return true;\n  }\n\n\n\nso your scorer and collector can totally work in tandem here... ",
            "author": "Robert Muir",
            "id": "comment-13126810"
        },
        {
            "date": "2011-10-13T19:04:03+0000",
            "content": "and just fyi, this method is only called if you are a top-level scorer (or inside a BooleanScorer, but in that case the collector won't be \"your collector\")\n\nit also currently wont be called if you do IS.search() with a filter, but there are some efforts to make it so you can control that (LUCENE-1536) ",
            "author": "Robert Muir",
            "id": "comment-13126812"
        },
        {
            "date": "2011-10-13T20:53:18+0000",
            "content": "Hi Robert:\n\n   I see what you mean! This works well and would require no api change, sweet! I think all I am waiting for is LUCENE01536 because I would have a filter.\n\nThanks\n\n-John ",
            "author": "John Wang",
            "id": "comment-13126906"
        },
        {
            "date": "2011-10-13T21:09:58+0000",
            "content": "LUCENE-1536 would only help if your filter supports random access and is not too sparse (unless you override FilteredQuery.useRandomAccess() to always return true). In all other cases, filters are applied iterative like in previous versions. I just want to mention this. ",
            "author": "Uwe Schindler",
            "id": "comment-13126925"
        },
        {
            "date": "2011-10-13T21:16:50+0000",
            "content": "or as a workaround, i think you pass the filter to your query and filter inside your scorer whichever way you want (just saying, it would allow for your heuristic and for you to be top-level always) ",
            "author": "Robert Muir",
            "id": "comment-13126936"
        }
    ]
}