{
    "id": "SOLR-2303",
    "title": "remove unnecessary (and problematic) log4j jars in contribs",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.5",
            "4.0-ALPHA"
        ],
        "components": [
            "Build"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In solr 4.0 there is log4j-over-slf4j.\n\nBut if you have log4j jars also in the classpath (e.g. contrib/extraction, contrib/clustering) you can get strange errors such as:\njava.lang.NoSuchMethodError: org.apache.log4j.Logger.setAdditivity(Z)V\n\nSo I think we should remove the log4j jars in these contribs, all tests pass with them removed.",
    "attachments": {
        "SOLR-2303.patch": "https://issues.apache.org/jira/secure/attachment/12467169/SOLR-2303.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12976143",
            "date": "2010-12-30T23:31:40+0000",
            "content": "I think the purpose of the log4j-over-slf4j jars was so that the third party jars included in solr (and in contribs) which use log4j logging will have all of their messages funneled through slf4j so all logging for \"basic\" solr users will be consistent (JUL) \u2013 if you remove it, some solr logging will use slf4j->JUL and some will go direct to log4j.\n\nI think the other log4j jars you mentioned (contrib/extraction, contrib/clustering) are the ones that should be removed. (untested that this doesn't break anything)\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12976146",
            "date": "2010-12-30T23:39:25+0000",
            "content": "hoss, exactly what I tested... I think it doesn't show in the \"patch\", but I want to remove the log4j jars in the contribs. \n\nif these are in the classpath, it causes problems for velocity etc (its test will fail). so I think they should be removed from the contribs as it can break functionality in core if you use these contribs (besides just being unnecessary bloat) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12976149",
            "date": "2010-12-30T23:53:22+0000",
            "content": "I'm an idiot .. trying to catch up on mail i completely missread almost everything about this issue.\n\nyes, yes .. agree with you 100% .. remove the log4j jars in the contribs "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12976468",
            "date": "2011-01-02T01:10:28+0000",
            "content": "Also, related to this, the extraction contrib has an old xerces jar (xercesImpl-2.8.1.jar).\n\nI think this should be upgraded to 2.10, for example the TestXInclude will fail if this is present in the classpath... "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12976516",
            "date": "2011-01-02T13:43:19+0000",
            "content": "Committed revision 1054405.\n\nI will open a separate issue for the xerces thing, i noticed other problems (especially in branch-3x).\n\nI think we should assess all of our external dependencies, as Uwe quotes:\n\nUwe: nothing i hate more than downloaded open source projects with antique jars bundled\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-12983260",
            "date": "2011-01-18T16:49:21+0000",
            "content": "I am Officially Confused, but the culprit appears to be log4j-over-slf4j-1.5.5.jar\n\n3_x has:\n   log4j jars in solr/contrib/extraction and solr/contrib/clustering\n   a bunch of slf4j jars in solr/lib (but NOT log4j-over-slf4j-1.5.5.jar, see below).\n   All tests succeed just fine.\n\nTrunk has:\n  no log4j jars in contrib\n  the same slf4j jars as in 3_x BUT ALSO log4j-over-slf4j-1.5.5.jar\n  VelocityResponseWriterTest fails\n\n\nIn trunk, removing log4j-over-slf4j-1.5.5.jar allows VelocityResponseWriterTest and all other tests to succeed.\n\nin 3_x, removing the log4j jars from solr/contrib makes no difference, all tests pass.\n\nSo I propose that the fix for this is to remove the log4j files from 3_x and the log4j-over-slf4j-1.5.5.jar from trunk.\n\nShould I create a patch? And do patches actually remove jars like this? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-12983261",
            "date": "2011-01-18T16:49:56+0000",
            "content": "See previous comment, I believe that there are some jars in Solr that need to be removed. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12983265",
            "date": "2011-01-18T17:00:57+0000",
            "content": "Erick, actually i think the issue is that log4j-over-slf4j conflicts with log4j, if log4j is in the classpath.\n\nThe problem is that currently, the solr build runs tests with whatever is in ant's classpath.\nThis is why the tests pass for you, even if you remove all logging jars, but this is obviously bad as its not really a repeatable build.\n\nSo to fix this, we need to use includeantruntime=no in the junit tasks, and also not include $java.class.path in the test classpath.\ninstead, we explicitly include the ant libs we supply (especially since we extend some of them for testing).\n\nThis might make some warnings or even errors for ant 1.8 users, but I think thats ok. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12983266",
            "date": "2011-01-18T17:03:17+0000",
            "content": "Hey Erick,\n\nIf I remember right, log4j-over-slf4j is in there for proper zookeeper logging (hoping they switch to slf4j). Rather than dropping it, we should likely try and figure out how to keep and fix the issue - as suggested by Robert. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-12983317",
            "date": "2011-01-18T18:39:47+0000",
            "content": "Ah, I think the light finally dawns. And helps explain why I'm getting different results on different machines/environments\n\nThere's a reason \"they\" don't often let me near build systems.....\n\nOk, splendid. I suggested removing things to see if it was a bad idea. It is. Almost.\n\nSo does it still make sense to remove the log4j jars in contrib in the 3_x branch?\n\nRobert:\nI did as you suggested, and of course started getting \"classNotFound\" errors for JUnitTestRunner and so-on. So I included these lines in Solr's build.xml.\n\n    <pathelement path=\"${common-solr.dir}/../lucene/lib/ant-junit-1.7.1.jar\" />\n    <pathelement path=\"${common-solr.dir}/../lucene/lib/ant-1.7.1.jar\" />\n    <pathelement path=\"${common-solr.dir}/../lucene/lib/junit-4.7.jar\" />\n\nin place of java.class.path and all is well. Is this the path you'd go down? I'm not very comfortable having Solr reach over into Lucene, but what do I know?\n\nIt should be fairly obvious by now that I'm not very ant-sophisticated, is there a preferred way of doing this? Because if this is OK, it seems we should also remove junit-4.7.jar from ../solr/lib and point anything that needs it should path to ../lucene/lib as well.\n\nI'm currently testing similar changes on the 3_x build with log4j files removed. But that worked before as well.....\n\nLet me know "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-12983329",
            "date": "2011-01-18T18:56:27+0000",
            "content": "OK, scratch the notion of removing the junit-4.7.jar file from Solr, the test cases...er...stop compiling. But the rest still stands. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12983367",
            "date": "2011-01-18T20:41:13+0000",
            "content": "OK, scratch the notion of removing the junit-4.7.jar file from Solr, the test cases...er...stop compiling. But the rest still stands.\n\n\n<pathelement path=\"${common-solr.dir}/../lucene/lib/ant-junit-1.7.1.jar\" />\n<pathelement path=\"${common-solr.dir}/../lucene/lib/ant-1.7.1.jar\" />\n<pathelement path=\"${common-solr.dir}/../lucene/lib/junit-4.7.jar\" />\n\nin place of java.class.path and all is well. Is this the path you'd go down? I'm not very comfortable having Solr reach over into Lucene, but what do I know?\n\n\nYeah, in general it would be good to explicitly include ant, ant-junit, and junit into our classpath for tests.\nI know i fooled with trying to do this across all of lucene and solr, there are some twists:\n\n\twhen the clover build is enabled, we have to actually use the ant runtime/java.class.path, because clover injects itself via ant's classpath via -lib. There\nmight be a better way to configure clover to avoid this, but failing that we have to \"sometimes\" support throwing ant's classpath into the classpath like we do now.\n\tthe contrib/ant gets tricky (i dont remember why) especially with clover enabled \n\tfinally, ant 1.8 support might break, since we specifically include ant 1.7 stuff in our lib. But its generally what we want, better to have a reliable classpath in\nour build/tests than to compile/test with \"whatever version of ant the person happens to be using\". Ant gets angry if you try to put ant 1.7.jar into an ant 1.8 runtime...\n\n\n\nthe same situation exists for compilation actually, but I think i fixed that one... you would have to re-check  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-12985497",
            "date": "2011-01-24T03:00:42+0000",
            "content": "I really can't pursue this farther than I have so far, I may be able to come back to it sometime in the future. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12985499",
            "date": "2011-01-24T03:09:15+0000",
            "content": "I can work on this, when we decide to move to ant 1.8.1... otherwise I think its too complicated. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13120234",
            "date": "2011-10-04T15:55:58+0000",
            "content": "Ping() on this before 3.5 - branch_3x still has log4j jars in contrib, can they be removed? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13120239",
            "date": "2011-10-04T16:00:48+0000",
            "content": "I committed the patch to trunk-only before, because at the time it only caused an actual problem on trunk.\n\nSo branch_3x has these extra useless jars, not causing a problem right? But if they are useless, we should nuke them. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13120242",
            "date": "2011-10-04T16:06:27+0000",
            "content": "In all cases!!! And the Maven POMs should also not reference them!\n\nUwe-State-Machine "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13120453",
            "date": "2011-10-04T20:40:27+0000",
            "content": "I merged back to 3.x: contrib/extraction was the only one that had this extra jar there. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13157873",
            "date": "2011-11-27T12:36:10+0000",
            "content": "Bulk close after 3.5 is released "
        }
    ]
}