{
    "id": "SOLR-2824",
    "title": "Cross-Core Join doesn't parse fields against joining schema",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "multicore",
            "search"
        ],
        "type": "Bug",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I have two cores with 2 different schema's\nnow I want to join between the 2 cores. where I filter on a field from one core that doesn't exist in the other core.\ncore1: \n{childIds, name, id}\n, core2:\n{id, type, specials}\n\nI have the following query\n/core1/select?q=:&fq=\n{!join from=id to=childIds fromIndex=core2}\nspecials:1&fl=id,name\nI get this exception [1]\n\nLooking at the debugger I see that\n    at org.apache.solr.search.JoinQParserPlugin$1.parse(JoinQParserPlugin.java:60)\nthe parse is called  for the filterquery on the main core (core1). Not the core of the 'fromIndex' (core2) \n\n\n[1]\nSEVERE: org.apache.solr.common.SolrException: undefined field specials\n        at org.apache.solr.schema.IndexSchema.getDynamicFieldType(IndexSchema.java:1028)\n        at org.apache.solr.schema.IndexSchema$SolrQueryAnalyzer.getWrappedAnalyzer(IndexSchema.java:335)\n        at org.apache.lucene.analysis.AnalyzerWrapper.createComponents(AnalyzerWrapper.java:71)\n        at org.apache.lucene.analysis.Analyzer.tokenStream(Analyzer.java:83)\n        at org.apache.lucene.queryparser.classic.QueryParserBase.newFieldQuery(QueryParserBase.java:476)\n        at org.apache.lucene.queryparser.classic.QueryParserBase.getFieldQuery(QueryParserBase.java:464)\n        at org.apache.solr.search.SolrQueryParser.getFieldQuery(SolrQueryParser.java:134)\n        at org.apache.lucene.queryparser.classic.QueryParserBase.handleBareTokenQuery(QueryParserBase.java:1052)\n        at org.apache.lucene.queryparser.classic.QueryParser.Term(QueryParser.java:358)\n        at org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.java:257)\n        at org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.java:181)\n        at org.apache.lucene.queryparser.classic.QueryParser.TopLevelQuery(QueryParser.java:170)\n        at org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryParserBase.java:118)\n        at org.apache.solr.search.LuceneQParser.parse(LuceneQParserPlugin.java:74)\n        at org.apache.solr.search.QParser.getQuery(QParser.java:143)\n        at org.apache.solr.search.JoinQParserPlugin$1.parse(JoinQParserPlugin.java:60)\n        at org.apache.solr.search.QParser.getQuery(QParser.java:143)\n        at org.apache.solr.handler.component.QueryComponent.prepare(QueryComponent.java:138)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:180)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1452)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:353)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:248)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:859)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n        at java.lang.Thread.run(Thread.java:662)",
    "attachments": {
        "SOLR-2824.patch": "https://issues.apache.org/jira/secure/attachment/12505564/SOLR-2824.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13125918",
            "date": "2011-10-12T15:19:26+0000",
            "content": "You are correct... this is a bug because we should parse the nested query in the other core. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13159731",
            "date": "2011-11-30T01:26:31+0000",
            "content": "I hacked up a test case demonstrating the problem, but ran out of time before i could try fixing it.  (At the moment the test just demonstrates the problem of parsing a cross index join, it doesn't actually try to utilize it - our Test framework does't make it easy to index/query multiple cores in a single test)\n\nAt first glance, it seems fairly straight forward to fix the JoinQParser to get the \"fromIndex\" SolrCore via the CoreContainer and then ask it for a parser to parse the nested query, but a few things concern me:\n\n1) should local params from the '\n{!join...}\n' expression (besides from,to, and fromIndex) be passed to the QParser fetched from the fromIndex ?\n\n2) Are there other bugs lurking in JoinQuery itself that need better cross-index testing?  In particular the JoinQuery.rewrite method smells fishy. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13159735",
            "date": "2011-11-30T01:40:38+0000",
            "content": "1) should local params from the '{!join...}' expression (besides from,to, and fromIndex) be passed to the QParser fetched from the fromIndex ?\n\ndefType is the only local param that would have an impact on the foreign qparser.\nBut... all the request parameters should be available to the foreign qparser.\n\nb1. 2) Are there other bugs lurking in JoinQuery itself that need better cross-index testing? In particular the JoinQuery.rewrite method smells fishy.\n\nYep! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13223916",
            "date": "2012-03-07T02:24:22+0000",
            "content": "marking blocker for 4.0 ... if no one comes up with a fix for this problem in time for 4.0, then we should remove the cross-core join code (it's never been documented, and it's never really worked properly except in extremely trivial situations) "
        },
        {
            "author": "Thijs Vonk",
            "id": "comment-13224085",
            "date": "2012-03-07T08:11:11+0000",
            "content": "I hope you don't remove it.\nI'm currently faking it by having the 'joined' columns listed in both schema-files and that works.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13274308",
            "date": "2012-05-13T18:09:47+0000",
            "content": "I just checked in a patch for the rewrite issue.  Still need a patch to parse the query in the correct core though. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13274627",
            "date": "2012-05-14T14:49:32+0000",
            "content": "I just checked in a patch to parse the query in the correct core. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13277067",
            "date": "2012-05-16T20:09:40+0000",
            "content": "Here's a patch for the last big issue with cross-join: caching of the join when the fromCore searcher has changed. "
        }
    ]
}