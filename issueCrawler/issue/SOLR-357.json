{
    "id": "SOLR-357",
    "title": "Prefixing Filter Factory -- for 'suggest'",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Invalid"
    },
    "description": "The PrefixingFilter builds a token for each prefix in the original token.  It is appropriate for a type-ahead suggest style function.\n\nGiven the token \"solr\", this will build a token for \"s\",\"so\",\"sol\",\"solr\".",
    "attachments": {
        "SOLR-357-PrefixingFilter.patch": "https://issues.apache.org/jira/secure/attachment/12365922/SOLR-357-PrefixingFilter.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12527790",
            "date": "2007-09-15T22:13:17+0000",
            "content": "Adds a filter and adds it to the examples:\n\n<fieldType name=\"prefixing\" class=\"solr.TextField\" positionIncrementGap=\"1\">\n  <analyzer type=\"index\">\n    <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n    <filter class=\"solr.LowerCaseFilterFactory\" />\n    <filter class=\"solr.PrefixingFilterFactory\" maxLength=\"25\"/>\n  </analyzer>\n  <analyzer type=\"query\">\n    <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n    <filter class=\"solr.LowerCaseFilterFactory\" />\n  </analyzer>\n</fieldType>\n\n------------------------\n\nWith the example docs, I search for \"ca\" and get everything with a token that starts with \"ca\"\n\nAny idea how I can get this to sort by:\n1. values that start with the prefix before values that just contain the prefix.  That is:\n \"Canon PIXMA ... \" before \" .... video card\"\n\n2. When matching multiple tokens, rank values where the matched tokens are closer together higher.\n\nIdeas?\n\n\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12527793",
            "date": "2007-09-15T22:43:17+0000",
            "content": "isn't this a subset of the functionality in EdgeNGramFilterFactory ?\n\nin answer to your followup questions:  \n\n1) the easiest way i can think of to do this is with a boolean query on two fields \u2013 one using KeywordTokenizer and the other using something else. \"Canon PIXMA\" would match on bth, \"...video card\" would only match on the second.\n\n2) i'm not sure i understand the question, it sounds like you would just want a really sloppy phrase query, but i must be missing something.  should probably discuss outside of Jira. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12528202",
            "date": "2007-09-18T00:46:42+0000",
            "content": "Yes, this is a subset of EdgeNGramFilter.\n\nFor more discussion, see: http://www.nabble.com/%27suggest%27-query-sorting-tf4450280.html\n\nHoss points out that KeywordTokenizerFactory may be a more appropriate tokenizer.  If you do need to complete internal tokens, use two fields.\n\nI found this works well:\n\n\n<fieldType name=\"prefix_full\" class=\"solr.TextField\" positionIncrementGap=\"1\">\n  <analyzer type=\"index\">\n    <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n    <filter class=\"solr.LowerCaseFilterFactory\" />\n    <filter class=\"solr.EdgeNGramFilterFactory\" minGramSize=\"1\" maxGramSize=\"20\"/>\n  </analyzer>\n  <analyzer type=\"query\">\n    <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n    <filter class=\"solr.LowerCaseFilterFactory\" />\n  </analyzer>\n</fieldType>\n\n<fieldType name=\"prefix_token\" class=\"solr.TextField\" positionIncrementGap=\"1\">\n  <analyzer type=\"index\">\n    <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n    <filter class=\"solr.LowerCaseFilterFactory\" />\n    <filter class=\"solr.EdgeNGramFilterFactory\" minGramSize=\"1\" maxGramSize=\"20\"/>\n  </analyzer>\n  <analyzer type=\"query\">\n    <tokenizer class=\"solr.WhitespaceTokenizerFactory\"/>\n    <filter class=\"solr.LowerCaseFilterFactory\" />\n  </analyzer>\n</fieldType>\n\n...\n   <field name=\"prefix1\" type=\"prefix_full\"  indexed=\"true\" stored=\"false\"/>\n   <field name=\"prefix2\" type=\"prefix_token\" indexed=\"true\" stored=\"false\"/>\n...\n   <copyField source=\"name\" dest=\"prefix1\"/>\n   <copyField source=\"name\" dest=\"prefix2\"/>\n\nIf you query both fields, it boosts the first names that start with the query over the others:\n\nhttp://localhost:8983/solr/select?fl=name,id&q=prefix1:ca%20prefix2:ca\n\n "
        }
    ]
}