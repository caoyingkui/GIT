{
    "id": "LUCENE-1221",
    "title": "DocumentsWriter truncates term text at \\uFFFF",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.3,                                            2.3.1",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "When a Term text contains the unicode 'character' \\uFFFF, DocumentsWriter will truncate the text and only write the text up to the \\uFFFF character.\n\nThis has been introduces with changes for LUCENE-843 to reduce memory usage and improve performance.\n\nThis change in behavior prevents us (Jackrabbit) from upgrading to Lucene 2.3.",
    "attachments": {
        "OddTermTest.java": "https://issues.apache.org/jira/secure/attachment/12377626/OddTermTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-03-11T16:33:58+0000",
            "content": "Test to reproduce the issue. ",
            "author": "Marcel Reutegger",
            "id": "comment-12577503"
        },
        {
            "date": "2008-03-11T16:58:13+0000",
            "content": "Hmmm ... 0xffff is one of the \"invalid for interchange but may freely\nbe used internal to an implementation\" UTF-16 characters (from\nhttp://unicode.org/faq/utf_bom.html#6), so I assumed it was safe to\nuse internally in DocumentsWriter.\n\nBut apparently you are using it.  How/why are you seeing/using this\ncharacter in Jackrabbit?\n\nNote that with LUCENE-510 (not yet fixed but in progress), there may\nbe similar issues whereby the treatment of other kinds of invalid\nUTF-16 strings changes.\n ",
            "author": "Michael McCandless",
            "id": "comment-12577513"
        },
        {
            "date": "2008-03-11T18:21:49+0000",
            "content": "> How/why are you seeing/using this character in Jackrabbit\n\nTo avoid an excessive amount of Lucene fields we prefix term values with the JCR property name and put everything under the same Lucene field name. The 0xffff separates the property name from the property value.\n\nSee: JCR-106. That was before Lucene 2.1, when each field had a separate norm file. ",
            "author": "Marcel Reutegger",
            "id": "comment-12577544"
        },
        {
            "date": "2008-03-11T18:59:59+0000",
            "content": "I'll see if I can build some kind of filter index reader that translates existing terms on the fly to use a new separator, while new terms are written with the new separator. ",
            "author": "Marcel Reutegger",
            "id": "comment-12577561"
        },
        {
            "date": "2008-03-11T19:08:24+0000",
            "content": "If there is a real character that doesn't appear in a property name, it would be much safer to use that.\nUsing non-unicode chars or reserved chars is pretty dicey since you never know what methods might throw an exception because of it. ",
            "author": "Yonik Seeley",
            "id": "comment-12577563"
        },
        {
            "date": "2008-03-12T09:39:21+0000",
            "content": "Indeed there are some characters that will never appear in a property name. I'll use on of those in the future. Just have to write a migration tool that translates existing indexes into the new format.\n\nFeel free to close this issue as WONTFIX. ",
            "author": "Marcel Reutegger",
            "id": "comment-12577776"
        },
        {
            "date": "2008-03-12T10:09:18+0000",
            "content": "OK thanks Marcel. ",
            "author": "Michael McCandless",
            "id": "comment-12577783"
        }
    ]
}