{
    "id": "SOLR-11035",
    "title": "(at least) 2 distinct failures possible when clients attempt searches during SolrCore reload",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "If a SolrCore is reloaded, there are (at least) 2 distinct types of failures that clients may observe when executing updates + queries while the reload is in progress...\n\n\n\tdocuments may appear missing during queries\n\tqueries may fail with \"SolrException: openNewSearcher called on closed core\"\n\n\n\nDetails to follow in comment...",
    "attachments": {
        "log.txt": "https://issues.apache.org/jira/secure/attachment/12876166/log.txt",
        "SOLR-11035.patch": "https://issues.apache.org/jira/secure/attachment/12876167/SOLR-11035.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-08T01:43:13+0000",
            "content": "\nThis issue is the root cause of some suspicious (mostly cloud based) test failures that \u2013 on the surface \u2013 may initially seem like they are either 'impossible' or that the commit requests done by the tests are returning before the newSearcher was opened (even though waitSearcher=true).\n\nIn my personal experience, the crux of the symptoms are:\n\n\tDocuments missing from searches done immediately after they were (successfully) added+commited\n\tSeeds don't reproduce reliably, but fail more commonly when running many tests and/or CPU usage on the test machine is high.\n\n\n\nAn example of this class of test failure that initially caught my eye, and I could typically get to reproduce semi-frequently is DocValuesNotIndexedTest.testGroupingDVOnly.  Running only that test method \u2013 or even that entire class \u2013 never failed for me, but if i ran ant test -Dtests.class=*DocValues* I could usually get a consistent failure within ~15 attempts.\n\nOne thing most of these failing tests have in common is that instead of a static schema, they use managed-schema and either use the Schema API to explicitly create the fields needed, or let the schemaless update processors add fields as needed.\n\nIn comparing the logs of \"successful\" runs vs \"failure\" runs, the thing that jumped out at me is that the failure runs contain more SolrCore \"reloads\" (due to SOLR-11034) and in every failure case i saw the \"CLOSING\" log message of a SolrCore was occuring after the document adds & commit had been logged by that core, but before the log messages from the searches that failed validation (meaning they were processed by the newly (re)loaded core)\n\nAs Shalin notes in SOLR-10562 (where the Congif API is used causing a core reload) in the process of closing the \"old\" core and opening the \"new\" core, there is a race condition where the \"old\" core will accept/log/write documents/commits to the index, but these will not be immediately visible to the SolrIndexSearcher that the \"new\" core is using once the hand-off is made.\n\nI wrote the attached test class to try and demonstrate this problem in it's simplest form (independent of ManagedIndexSchema or SolrCloud or Config API) using concurrent 2 threads: one to do an \"add, commit(waitSearcher), query\" and the second to trigger a core reload.\n\nIn addition to reproducing the failure I expected (where the query result don't reflect the last add+commit) i was able to trigger the second type of failure mentioned above: queries can be routed to the \"old\" core after/during it's shutdown, causing a solr exception because the (old) core refuses to open a new searcher.\n\nI tweaked my test as originally written to include a HACK making it possible to demonstrate both types of failures in a single run \u2013 see the attached log for full details....\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestReloadConcurrentAdds -Dtests.method=testConcurrent -Dtests.seed=5A728C1E8654399 -Dtests.slow=true -Dtests.locale=es-PA -Dtests.timezone=Atlantic/Faroe -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.57s | TestReloadConcurrentAdds.testConcurrent <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([5A728C1E8654399:25D4A7DB2FCE2B30]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:878)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:845)\n   [junit4]    >        at org.apache.solr.core.TestReloadConcurrentAdds.testConcurrent(TestReloadConcurrentAdds.java:103)\n   [junit4]    >        at org.apache.solr.core.TestReloadConcurrentAdds.testConcurrent(TestReloadConcurrentAdds.java:49)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: org.apache.solr.common.SolrException: openNewSearcher called on closed core\n\n\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestReloadConcurrentAdds -Dtests.method=testConcurrentWithNewSearcherExceptionHack -Dtests.seed=5A728C1E8654399 -Dtests.slow=true -Dtests.locale=es-PA -Dtests.timezone=Atlantic/Faroe -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.81s | TestReloadConcurrentAdds.testConcurrentWithNewSearcherExceptionHack <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([5A728C1E8654399:1C989F4D65319F55]:0)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:878)\n   [junit4]    >        at org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:845)\n   [junit4]    >        at org.apache.solr.core.TestReloadConcurrentAdds.testConcurrent(TestReloadConcurrentAdds.java:103)\n   [junit4]    >        at org.apache.solr.core.TestReloadConcurrentAdds.testConcurrentWithNewSearcherExceptionHack(TestReloadConcurrentAdds.java:55)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n   [junit4]    > Caused by: java.lang.RuntimeException: REQUEST FAILED: xpath=//result[@numFound='33']\n   [junit4]    >        xml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]    > <response>\n   [junit4]    > <lst name=\"responseHeader\">\n   [junit4]    >   <int name=\"status\">0</int>\n   [junit4]    >   <int name=\"QTime\">0</int>\n   [junit4]    >   <lst name=\"params\">\n   [junit4]    >     <str name=\"q\">*:*</str>\n   [junit4]    >     <str name=\"rows\">0</str>\n   [junit4]    >     <str name=\"wt\">xml</str>\n   [junit4]    >   </lst>\n   [junit4]    > </lst>\n   [junit4]    > <result name=\"response\" numFound=\"32\" start=\"0\">\n\n ",
            "author": "Hoss Man",
            "id": "comment-16078892"
        },
        {
            "date": "2017-07-08T01:49:28+0000",
            "content": "Linking SOLR-10562 and SOLR-9843 ",
            "author": "Hoss Man",
            "id": "comment-16078899"
        },
        {
            "date": "2017-07-08T01:51:28+0000",
            "content": "re-attaching log.txt with ansi color markup removed. (sorry about that) ",
            "author": "Hoss Man",
            "id": "comment-16078901"
        },
        {
            "date": "2017-07-21T19:37:13+0000",
            "content": "Hoss Man,\n\nPardon me if I am missing context or steps, I tried reproducing the failure by applying the patch attached and running the test seeds you listed 20 times each continuously. It succeeded everytime.\n\nant test  -Dtestcase=TestReloadConcurrentAdds -Dtests.method=testConcurrentWithNewSearcherExceptionHack -Dtests.seed=5A728C1E8654399 -Dtests.slow=true -Dtests.locale=es-PA -Dtests.timezone=Atlantic/Faroe -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n\nant test  -Dtestcase=TestReloadConcurrentAdds -Dtests.method=testConcurrent -Dtests.seed=5A728C1E8654399 -Dtests.slow=true -Dtests.locale=es-PA -Dtests.timezone=Atlantic/Faroe -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n ",
            "author": "Amrit Sarkar",
            "id": "comment-16096746"
        },
        {
            "date": "2017-07-21T21:57:15+0000",
            "content": "Amrit: because of the nature of the bug (concurrent threads w/o synchronization or adequate locking) it's virtually impossible to write a test that is garunteed to fail on any system.  The test case i've attached just boils the problematic scenerios down into their simplest essence.\n\nIf they pass reliably for you, i would suggest trying with diff seeds, and or increasing the CPU load on your machine to force more thread switching in the JVM (with something like stress)\n\neither way: As i described in my earlier comment (and as shalin described in the linked issue) at least one of the problems is fairly self evident when reading the code. ",
            "author": "Hoss Man",
            "id": "comment-16096922"
        },
        {
            "date": "2017-07-22T19:20:47+0000",
            "content": "I can get this to fail virtually all the time by beasting it on my MBP, Amrit Sarkar go ahead and put any patches up and let me know and I can verify.\n\nI've assigned this to myself, but Amrit will be doing the heavy lifting. If we get a good patch for this I'll also beast the related JIRAs and see. Although it won't be clear until patches happen what it means for SOLR-10034 ",
            "author": "Erick Erickson",
            "id": "comment-16097413"
        }
    ]
}