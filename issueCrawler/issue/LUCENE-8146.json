{
    "id": "LUCENE-8146",
    "title": "Unit tests using StringHelper fail with ExceptionInInitializerError for maven surefire >= 2.18",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Unresolved",
        "affect_versions": "7.2.1",
        "status": "Open",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "This happens when multiple conditions are met:\n\n\tThe client code is built with Maven\n\tTo execute its unit tests, the client code relies on the maven-surefire-plugin, with a version greater than 2.17 (last working version)\n\tThe client code uses the org.apache.lucene.util.StringHelper class (even transitively)\n\tThe client is configured as with the standard Lucene maven build (i.e. it is possible to fix the test seed using the tests.seed property)\n\n\n\nThere was a change in Surefire's behavior starting with 2.18: when a property is empty, instead of not sending it to the test runner, it will be sent with an empty value.\n\nThis behavior can be observed with the attached sample project:\n\n\tmvn test: fails with a java.lang.ExceptionInInitializerError\n\tmvn test -Dtests.seed=123456: succeeds because the property is set to a real value\n\tmvn test -Dsurefire.version=2.17: succeeds because the surefire version is lower than 2.18\n\n\n\nAttached is a patch (built against branch_7x) that centralizes accesses to the tests.seed system property; it also makes sure that if it is empty, it is treated as absent.",
    "attachments": {
        "LUCENE-8146_v1.patch": "https://issues.apache.org/jira/secure/attachment/12908601/LUCENE-8146_v1.patch",
        "LUCENE-8146-seed_issue.tar.gz": "https://issues.apache.org/jira/secure/attachment/12908600/LUCENE-8146-seed_issue.tar.gz",
        "LUCENE-8146_v2.patch": "https://issues.apache.org/jira/secure/attachment/12908752/LUCENE-8146_v2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16347065",
            "date": "2018-01-31T16:08:09+0000",
            "content": "\nThere was a change in Surefire's behavior starting with 2.18: when a property is empty, instead of not sending it to the test runner, it will be sent with an empty value.\n\nThis seems like the bug that needs to be fixed. I don't think lucene should suffer the leniency/complexity because of it. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16347129",
            "date": "2018-01-31T16:30:16+0000",
            "content": "The patch itself is minimal, but I'll understand if the issue is just closed as is - you're right that it's not a Lucene issue. On the other hand, the Lucene maven build would also be impacted if the surefire version is ever bumped up, as it will break with the same error.\n\nI'm just throwing that out there since I spent about 30 minutes figuring out why my build was failing after upgrading all my dependencies (that including Lucene and other the surefire plugin). Even if the ticket is closed, it might help the next user encountering the same problem. ",
            "author": "Julien Massenet"
        },
        {
            "id": "comment-16347225",
            "date": "2018-01-31T17:24:29+0000",
            "content": "Well I'd probably feel different if it was more minimal. This patch adds new public classes and abstractions... why are those needed?\n\nIsn't all that is needed a change from:\n\n    String prop = System.getProperty(\"tests.seed\");\n    if (prop != null) {\n\n\n\nto\n\n\n    String prop = System.getProperty(\"tests.seed\", \"\");\n    if (!prop.isEmpty()) {\n\n ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16347232",
            "date": "2018-01-31T17:29:42+0000",
            "content": "\n+  /**\n+   * Get a Random instance, seeded with the external seed if available.\n+   */\n+  public static Random getSeededRandom() {\n+    String seed = SeedProvider.getExternalSeed();\n+    Random random;\n+    if (seed == null) {\n+      random = new Random();\n+    } else {\n+      random = new Random(seed.hashCode());\n+    }\n+    return random;\n+  }\n+}\n\n\n\nPlease, don't. The Random instance to be used should be acquired from RandomizedContext and this context is initialized based on the system property (and much earlier before the tests or Lucene code is first entered). There are things that depend on the seed (such as the order of tests) that this property controls.\n\nA better patch would be to replace surefire with the runner from randomizedtesting package; this would make the tests consistent with ANT. ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16347235",
            "date": "2018-01-31T17:30:49+0000",
            "content": "What's the full stack trace for this ExceptionInInitializerError? ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16347237",
            "date": "2018-01-31T17:31:22+0000",
            "content": "Thanks' Dawid. That was my first idea: User Randomizedrunner in Maven instead of Surefire (like other projects do). ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16347241",
            "date": "2018-01-31T17:34:53+0000",
            "content": "Nevertheless, the issue should better be solved in Surefire (ideally) or if not possible in randomizedrunner's seed parsing. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16347537",
            "date": "2018-01-31T20:11:01+0000",
            "content": "Btw. I agree with Robert that the simplest fix (for now at least) is to adjust StringUtils to what he suggested (this is consistent with what randomized runner does too).\n\nhttps://github.com/randomizedtesting/randomizedtesting/blob/master/randomized-runner/src/main/java/com/carrotsearch/randomizedtesting/RandomizedRunner.java#L349 ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16348253",
            "date": "2018-02-01T09:13:46+0000",
            "content": "Dawid and Robert: this was actually not new code - this is just code that was already present in the code-base, just duplicated:\n\n\thttps://github.com/apache/lucene-solr/blob/branch_7x/solr/core/src/java/org/apache/solr/cloud/api/collections/OverseerCollectionMessageHandler.java#L174\n\thttps://github.com/apache/lucene-solr/blob/branch_7x/solr/core/src/java/org/apache/solr/core/BlobRepository.java#L56\n\thttps://github.com/apache/lucene-solr/blob/branch_7x/solr/core/src/java/org/apache/solr/servlet/HttpSolrCall.java#L138\n\n\n\nI only added a class in an effort to reduce the duplication, but I did not introduce that behavior (of using Random instead of the RandomizedContext).\n\nI've attached a newer patch version which copy-paste the changes at all affected locations instead. It is still using Random directly, as it was before.\n\n\u00a0\n\nFor reference, here is the stacktrace you get when you encounter the issue:\n\nbreakingTest(org.apache.lucene.seed_issue.SomeClassUsingStringHelperTest)\u00a0 Time elapsed: 0.006 s\u00a0 <<< ERROR!\njava.lang.ExceptionInInitializerError\n\u00a0\u00a0 \u00a0at org.apache.lucene.seed_issue.SomeClassUsingStringHelperTest.breakingTest(SomeClassUsingStringHelperTest.java:10)\nCaused by: java.lang.NumberFormatException: For input string: \"\"\n\u00a0\u00a0 \u00a0at org.apache.lucene.seed_issue.SomeClassUsingStringHelperTest.breakingTest(SomeClassUsingStringHelperTest.java:10)\n\n(So no reference to the class in question, which made tracking down the issue painful)\n\n\u00a0\n\nI didn't check the RandomizedRunner part, but one think to note in this case: it seems like any error that would happen in RandomizedRunner would only affect the Lucene unit tests or clients using the test framework, no ? Whereas the problem with tests.seed parsing &\u00a0StringHelper happens in production code, so it impacts client code that depend on Lucene, even if it doesn't use its test framework. ",
            "author": "Julien Massenet"
        },
        {
            "id": "comment-16348273",
            "date": "2018-02-01T09:24:10+0000",
            "content": "Hi,\nthe Surefire bug (I call it a bug, because there is no way to explicitely pass a non-existent property, the whole ANT build infrstratcture depends on sysprops being set or not as true/false). There are other system properties in Lucene's test that should be non-existent if undefined!!!\n\nMaven surefire should fix their bugs and allow to unset a property if it is empty. Just switching from one way to another way is horrible. It's only Maven that is affected by this, Ant works fine and Gradle, too. With this change it is for example impossible to execute Lucene's tests without using a security manager, because you cannot simply unset the security manager property (the ANT build can do this). In Maven it would pass an empty string and that would enable the security manager with default implementation, breaking everything!\n\nAbout your patch: You can still move the code to a common location, but please, please don't create new public classes because of that! Just add it as a method to TestUtils or another utility class - done. There is no need to add a separate class. But as we have to modify Lucene's core code here (not test code) I tend to stay without refactoring out new public methods, visible to everyone, so lets copypaste the easy fix. ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16348279",
            "date": "2018-02-01T09:29:37+0000",
            "content": "Ugh. Sorry Julien. Your (smaller) patch looks good to me.\n ",
            "author": "Dawid Weiss"
        },
        {
            "id": "comment-16348281",
            "date": "2018-02-01T09:31:08+0000",
            "content": "As a side-note: The access to sysprp from a static initializer in Lucene's Core classes should be guarded by AccessController.doPrivileged() as a system property called \"test.\" is not enabled by default through securtty manager. Maybe also add a try/catch. But that's a separate issue. As it is a static initializer, any failure (like this one) will cause Lucene to not work at all!\n\nI just noticed this, comments about this Robert Muir? ",
            "author": "Uwe Schindler"
        },
        {
            "id": "comment-16348507",
            "date": "2018-02-01T12:29:23+0000",
            "content": "Is there a bug in the maven bugtracker for this problem? I don't like the idea that, because maven fucked up, now lucene can never rely on the existence of a system property. We should do the patch as a temporary measure, but not permanent. Its just for a couple months or so until they have new versions of their code everywhere.\n\nAlso keep in mind lucene reads from system properties in other places too, StringHelper is just used early so it gets a lot of heat from people when they do stupid shit (such as use maven, or try to run lucene on android, or whatever).\n\n\u00a0 ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16348517",
            "date": "2018-02-01T12:36:46+0000",
            "content": "There is, in the form of the ticket that introduced the (intentional) change in the first place (linked in the ticket already):\n\nhttps://issues.apache.org/jira/browse/SUREFIRE-649. ",
            "author": "Julien Massenet"
        }
    ]
}