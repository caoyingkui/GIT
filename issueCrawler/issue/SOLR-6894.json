{
    "id": "SOLR-6894",
    "title": "Introduce SolrNodeClient API",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.0,                                            6.0",
        "status": "Resolved",
        "resolution": "Won't Fix",
        "priority": "Minor"
    },
    "description": "At the moment, it isn't possible to use a single SolrServer instance to create new cores via CoreAdmin on an empty node, and then query those nodes.  MultiCoreSolrServer is a utility class that does just that, by allowing you to create child SolrServer instances for individual cores that share the underlying HttpClient.",
    "attachments": {
        "SOLR-6894.patch": "https://issues.apache.org/jira/secure/attachment/12689324/SOLR-6894.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2014-12-29T15:29:55+0000",
            "author": "Yonik Seeley",
            "content": "An alternate route would be to make SolrServer (or SolrClient in SOLR-6895), multi-collection capable (with a default collection like CloudSolrServer)? ",
            "id": "comment-14260161"
        },
        {
            "date": "2014-12-29T16:04:42+0000",
            "author": "Alan Woodward",
            "content": "I looked at changing the SolrServer API to allow for this, but it isn't easy.  We'd need to add an additional method taking a core or collection name to every existing method on the API, and to be honest I think there's enough cruft there as it is.  And I really dislike the 'default collection' implementation on CloudSolrServer, which means that nothing is thread-safe.\n\nAlthough thinking about it, maybe the .forCore() method should be added directly to the SolrServer API?  And then CloudSolrServer could also implement a .forCollection() method that just forwards to it.  Or .forCollection() returns another CloudSolrServer, but .forCore() returns an HttpSolrServer?  Or is this just making things over-complicated? ",
            "id": "comment-14260178"
        },
        {
            "date": "2015-01-01T19:53:04+0000",
            "author": "Alan Woodward",
            "content": "I've rethought this slightly, what I want to do now is introduce another abstraction, SolrNodeClient, which extends SolrClient and adds two methods:\n\n\tSolrClient forCore(String core)\n\tSolrClient forCollection(String collection)\n\n\n\nHttpSolrClient and CloudSolrClient both extend SolrNodeClient.  You create a SolrNodeClient to point at a particular node (or zk-discovered cluster, in the case of CloudSolrClient), which you can then use for admin requests.  If you want to execute requests against a particular collection, call #forCollection(String collection), and you get a specialised SolrClient that shares its resources (HttpClient, ZkClient, etc) with the parent SolrNodeClient.  Calling #forCore() on an HttpSolrClient has the same effect as calling #forCollection(), but on a CloudSolrClient it will return a client that talks to a specific core in the cluster, with a default parameter of distrib=false, which is useful for debugging.\n\nThis means that your API when communicating with an empty node would be something like:\n\nSolrNodeClient client = new HttpSolrClient(pathToMultiCoreServer);\n\nCoreAdminRequest.Create createReq = new Create();\ncreateReq.setCoreName(\"myCore\");\ncreateReq.setConfigSet(\"myConfigSet\");\nclient.request(createReq);\n\nSolrClient myCoreClient = client.forCore(\"myCore\")\n\n\n\nand for SolrCloud:\n\n\nCloudSolrClient clusterClient = new CloudSolrClient(zkPath);\n\nCollectionAdminRequest.Create createReq = new CollectionAdminRequest.Create();\ncreateReq.setName(\"myCollection\")\ncreateReq.setConfig(\"myConfig\")\nclusterClient.execute(createReq);\n\nSolrClient collectionClient = client.forCollection(\"myCollection\");\n\n ",
            "id": "comment-14262648"
        },
        {
            "date": "2015-01-01T20:35:01+0000",
            "author": "Yonik Seeley",
            "content": "Oh, I see what you mean by forCore/forCollection now.  I like it!\n\nbut on a CloudSolrClient it will return a client that talks to a specific core in the cluster, with a default parameter of distrib=false, which is useful for debugging.\n\nOr, more generally, forCore/forCollection could take default parameters as an argument:\nx.forCore(\"core1\",  params(\"distrib\",false, \"wt\",\"json\", \"indent\",true)  )\n\nAlthough it's difficult today to add additional parameters on update requests, so we should really think about adding that capability too:\nclient.add( sdoc, params(\"commitWithin\",5000, \"version\",1, ...) ) ",
            "id": "comment-14262653"
        },
        {
            "date": "2015-03-26T10:29:17+0000",
            "author": "Alan Woodward",
            "content": "SOLR-7155 solved this. ",
            "id": "comment-14381664"
        }
    ]
}