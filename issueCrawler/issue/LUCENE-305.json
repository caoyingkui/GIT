{
    "id": "LUCENE-305",
    "title": "[PATCH] Lock Framework - allows custom lock mechanism",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.1"
        ],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "Proposal:  Pluggable Lock Framework for Lucene\nDate:      Nov 2004\nDeveloper: Jeff Patterson (jeffATwebdoyen.com - http://www.webdoyen.com)\n\n------\n\nAbstract:  A framework to allow Lucene users to override the default\nFileSystem locking mechanism with a custom lock mechanism.\n\nA Lucene user may develop a new class that extends \norg.apache.lucene.store.Lock and implement bodies for the following\nmethods:\n    public boolean obtain()    - to obtain custom lock\n    public boolean isLocked()  - to detect custom lock\n    public void release()      - to release custom lock\n\nNOTE: When implementing these methods, the developer should make sure to \nuse the this.getLockName() method on the Lock to identify which lock\nis being manipulated (see Modified Files below for more).\n\nAfter developed, the new class must be added to the classpath (along\nwith any other supporting classes/libraries needed by the new class),\nand the Lucene framework must be alerted of the new class by way of\nthe \"org.apache.lucene.lockClass\" -D System property.  Example:\n\n   java -Dorg.apache.lucene.lockClass=foo.MyCustomLocker LuceneTest\n\n------\n\nModified Files:  The following files were modified to support \nthis framework (DIFF files at end):\n\n\n\torg.apache.lucene.store.Lock\n  The member \"lockName\" and an accompanying protected getter and\n  setter were added to this class to support naming the lock.  This\n  is transparent to the default lock mechanism and is only useful\n  when writing a custom lock.\n\n\n\n\n\torg.apache.lucene.store.FSDirectory\n  Instead of instantiating a default Lock, this class now checks\n  to see if an overridden Lock mechanism is provided, and if so\n  asks the LockFactory (see below) to provide an overridden Lock\n  class.\n\n\n\nNew Files:  The following files were added to support this framework:\n\n\n\torg.apache.lucene.store.LockFactory\n  This class is used to reflect and instantiate by name the custom\n  Lock implementation.  Error handing should be modified in this\n  class, but that would have required a more extensive code overhaul.\n  The javadocs for the LockFactory contain a skeleton Java file for\n  a custom lock implementation.\n\n\n\n------",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--LockFactory.java": "https://issues.apache.org/jira/secure/attachment/12312440/ASF.LICENSE.NOT.GRANTED--LockFactory.java",
        "ASF.LICENSE.NOT.GRANTED--FSDirectory_patch_file.txt": "https://issues.apache.org/jira/secure/attachment/12312436/ASF.LICENSE.NOT.GRANTED--FSDirectory_patch_file.txt",
        "ASF.LICENSE.NOT.GRANTED--Lock.java": "https://issues.apache.org/jira/secure/attachment/12312439/ASF.LICENSE.NOT.GRANTED--Lock.java",
        "ASF.LICENSE.NOT.GRANTED--Lock_patch_file.txt": "https://issues.apache.org/jira/secure/attachment/12312438/ASF.LICENSE.NOT.GRANTED--Lock_patch_file.txt",
        "ASF.LICENSE.NOT.GRANTED--MySQLLocker.java": "https://issues.apache.org/jira/secure/attachment/12312441/ASF.LICENSE.NOT.GRANTED--MySQLLocker.java",
        "ASF.LICENSE.NOT.GRANTED--FSDirectory.java": "https://issues.apache.org/jira/secure/attachment/12312437/ASF.LICENSE.NOT.GRANTED--FSDirectory.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2004-11-10T14:11:14+0000",
            "content": "Attached find the modified files as well as the new file \nLockFactory and a demo lock implementation.  I also am\nattaching the DIFF files for the 2 modified files... ",
            "author": "Jeff Patterson",
            "id": "comment-12322018"
        },
        {
            "date": "2004-11-10T14:12:16+0000",
            "content": "Created an attachment (id=13369)\nDIFF file for FSDirectory.java ",
            "author": "Jeff Patterson",
            "id": "comment-12322019"
        },
        {
            "date": "2004-11-10T14:12:46+0000",
            "content": "Created an attachment (id=13370)\nModified FSDirectory.java file ",
            "author": "Jeff Patterson",
            "id": "comment-12322020"
        },
        {
            "date": "2004-11-10T14:13:17+0000",
            "content": "Created an attachment (id=13371)\nDIFF file for Lock.java ",
            "author": "Jeff Patterson",
            "id": "comment-12322021"
        },
        {
            "date": "2004-11-10T14:18:50+0000",
            "content": "Created an attachment (id=13372)\nModified Lock.java file ",
            "author": "Jeff Patterson",
            "id": "comment-12322022"
        },
        {
            "date": "2004-11-10T14:19:18+0000",
            "content": "Created an attachment (id=13373)\nNew LockFactory.java class ",
            "author": "Jeff Patterson",
            "id": "comment-12322023"
        },
        {
            "date": "2004-11-10T14:20:12+0000",
            "content": "Created an attachment (id=13374)\nDemo custom lock mechanism (not necessary for framework, but demonstrates framwork usage) ",
            "author": "Jeff Patterson",
            "id": "comment-12322024"
        },
        {
            "date": "2006-06-29T23:32:55+0000",
            "content": "\nI'm working towards a patch for this.  I changed the name of the issue\nto better reflect the goal.\n\nI started with the above approach and made some changes / brought it\nup to current Lucene HEAD sources.\n\nI'd like to sanity check the approach to get any feedback:\n\n\n\tCreate a new abstract base class called LockFactory (like the\n    above patch).  Purpose of this class is to provide a makeLock()\n    method that returns a Lock object for given name.\n    Directory.makeLock just calls this method.\n\n\n\n\n\tCreate 3 concrete subclasses (for now):\n\n\n\n\n\tSimpleFSLockFactory (factored out of FSDirectory)\n\n\n\n\n\tSingleProcessLockFactory (factored out of RAMDirectory)\n\n\n\n\n\tNoLockFactory\n\n\n\n\n\t(then, some time soon: NativeFSLockFactory)\n\n\n\n\n\tIn Directory, add a setLockFactory() method.  This method is\n    optional.  If it is not called, then each Directory has a default\n    LockFactory that's used instead.  FSDirectory defaults to either\n    SimpleFSLockFactory or NoLockFactory (if setDisabledLocks are\n    called) and RAMDirectory defaults to SingleProcessLockFactory.\n\n\n\nI believe this approach will be fully backwards compatible with\ncurrent locking/APIs:\n\n\n\tFSDirectory and RAMDirectory (and anyone who subclasses) use the\n    same locking they use today.  Same lock file names are used and\n    same defaulting of LOCK_DIR is used.\n\n\n\n\n\tIf any subclass of Directory has its own makeLock() method, it\n    will still fully override all of this new logic.\n\n\n\n\n\tNo existing APIs are changed; only new methods are added and new\n    classes (*LockFactory).\n\n\n\n\n\tPerformance should be the same (I'm trying hard not to cause\n    additional code to be executed in the makeLock() code path).  I'll\n    test this to make sure I'm right \n\n\n\nThis approach means that a user can instantiate a Directory, any\nDirectory, and then set its locking implementation like this:\n\n  Directory.setLockFactory(new SingleProcessLockFactory();\n\nSo this should make it easy to use an FSDirectory with a SingleProcess\nlock, for example.  Users can also subclass their own LockFactory\nimplementations (eg the MySQL based locking above) and easily use\nthose for locking.\n\nPlease note that the goal here is to make Locking independent of the\nDirectory, meaning I'm not yet adding any new locking implementations.\nThe above locking implementations were already pre-existing in Lucene,\njust refactored to subclasses of LockFactory.  After this (I'll open a\nseparate issue), I'd like to build a NativeFSLockFactory to address\nthe original issues/problems we've seen with the\njava.io.File.createNewFile() implementation we have now.\n\nThis approach differs from the original approach above in that instead\nof a global property that sets lock factory class, you explicity call\nsetLockFactory for a given Directory instance.  In addition, this\napproach factors out all locking logic (except\ngetDefaultLockFactory()) inside FSDirectory and RAMDirectory into\nLockFactory.\n\nPlease let me know if anyone has any concerns / issues with this plan!\nI have an initial working version that passes all current unit tests,\nbut I still need to add some more specific test cases for locking, do\nperformance testing, etc.  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-12418493"
        },
        {
            "date": "2006-08-09T19:38:13+0000",
            "content": "See LUCENE-635 which subsumes this patch. ",
            "author": "Michael McCandless",
            "id": "comment-12427015"
        },
        {
            "date": "2006-08-31T02:25:17+0000",
            "content": "I think we can close this issue now that LUCENE-635 is resolved. ",
            "author": "Michael McCandless",
            "id": "comment-12431766"
        }
    ]
}