{
    "id": "LUCENE-2271",
    "title": "Function queries producing scores of -inf or NaN (e.g. 1/x) return incorrect results with TopScoreDocCollector",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "2.9",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "This is a foolowup to LUCENE-2270, where a part of this problem was fixed (boost = 0 leading to NaN scores, which is also un-intuitive), but in general, function queries in Solr can create these invalid scores easily. In previous version of Lucene these scores ordered correct (except NaN, which mixes up results), but never invalid document ids are returned (like Integer.MAX_VALUE).\n\nThe problem is: TopScoreDocCollector pre-fills the HitQueue with sentinel ScoreDocs with a score of -inf and a doc id of Integer.MAX_VALUE. For the HQ to work, this sentinel must be smaller than all posible values, which is not the case:\n\n\t-inf is equal and the document is not inserted into the HQ, as not competitive, but the HQ is not yet full, so the sentinel values keep in the HQ and result is the Integer.MAX_VALUE docs. This problem is solveable (and only affects the Ordered collector) by chaning the exit condition to:\n\nif (score <= pqTop.score && pqTop.doc != Integer.MAX_VALUE) {\n    // Since docs are returned in-order (i.e., increasing doc Id), a document\n    // with equal score to pqTop.score cannot compete since HitQueue favors\n    // documents with lower doc Ids. Therefore reject those docs too.\n    return;\n}\n\n\n\n\n\n\n\tThe NaN case can be fixed in the same way, but then has another problem: all comparisons with NaN result in false (none of these is true): x < NaN, x > NaN, NaN == NaN. This leads to the fact that HQ's lessThan always returns false, leading to unexspected ordering in the PQ and sometimes the sentinel values do not stay at the top of the queue. A later hit then overrides the top of the queue but leaves the incorrect sentinels  unchanged -> invalid results. This can be fixed in two ways in HQ:\nForce all sentinels to the top:\n\nprotected final boolean lessThan(ScoreDoc hitA, ScoreDoc hitB) {\n    if (hitA.doc == Integer.MAX_VALUE)\n      return true;\n    if (hitB.doc == Integer.MAX_VALUE)\n      return false;\n    if (hitA.score == hitB.score)\n      return hitA.doc > hitB.doc; \n    else\n      return hitA.score < hitB.score;\n}\n\n\nor alternatively have a defined order for NaN (Float.compare sorts them after +inf):\n\nprotected final boolean lessThan(ScoreDoc hitA, ScoreDoc hitB) {\n    if (hitA.score == hitB.score)\n      return hitA.doc > hitB.doc; \n    else\n      return Float.compare(hitA.score, hitB.score) < 0;\n}\n\n\n\n\n\nThe problem with both solutions is, that we have now more comparisons per hit and the use of sentinels is questionable. I would like to remove the sentinels and use the old pre 2.9 code for comparing and using PQ.add() when a competitive hit arrives. The order of NaN would be unspecified.\n\nTo fix the order of NaN, it would be better to replace all score comparisons by Float.compare() [also in FieldComparator].\n\nI would like to delay 2.9.2 and 3.0.1 until this problem is discussed and solved.",
    "attachments": {
        "TSDC.patch": "https://issues.apache.org/jira/secure/attachment/12436308/TSDC.patch",
        "LUCENE-2271-maybe-as-separate-collector.patch": "https://issues.apache.org/jira/secure/attachment/12436540/LUCENE-2271-maybe-as-separate-collector.patch",
        "LUCENE-2271-bench.patch": "https://issues.apache.org/jira/secure/attachment/12436452/LUCENE-2271-bench.patch",
        "LUCENE-2271.patch": "https://issues.apache.org/jira/secure/attachment/12436329/LUCENE-2271.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-02-19T10:15:54+0000",
            "content": "its not a bug, as its doc'ed to work this way.\n\n\n * <p><b>NOTE</b>: The values Float.Nan,\n * Float.NEGATIVE_INFINITY and Float.POSITIVE_INFINITY are\n * not valid scores.  This collector will not properly\n * collect hits with such scores.\n\n ",
            "author": "Robert Muir",
            "id": "comment-12835678"
        },
        {
            "date": "2010-02-19T10:23:45+0000",
            "content": "I don't think we should do anything to fix NaN, such as using more expensive comparisons (Float.compareTo) and stuff. as it is not a number, its an invalid score. \n\ni think function queries shoudl throw and exception instead of producing NaN, this problem is only limited to function queries.\n\nI think fixing scores of negative infinity make more sense, as these are unpreventable (again only a problem with function queries!) and at least negative infinity is actually a number.\n\ni think \"fixing\" a top-N collector, or \"fixing\" anything that sorts NaN is wrong. NaN doesnt have a properly defined sort order. NaN has an order hacked into Float.compareTo, but this is different. sorting the primitive type makes no sense, and the documentation should stay that it doesnt work with TSDC. ",
            "author": "Robert Muir",
            "id": "comment-12835683"
        },
        {
            "date": "2010-02-19T11:11:35+0000",
            "content": "This is patch that supports NaN and -inf.\n\nThe cost of the additional checks in HitQueue.lessThan are neglectible, as they only occur when a competitive hit is really inserted into the queue. The check enforces all sentinels to the top of the queue, regardless what their score is (because always NaN != NaN). ",
            "author": "Uwe Schindler",
            "id": "comment-12835699"
        },
        {
            "date": "2010-02-19T11:14:23+0000",
            "content": "attached is a patch, written by Uwe. as far as a \"bugfix\" i prefer this patch, as the more complicated, performance-intrusive NaN fixes I think should be something we do in 3.1\n\ne.g., \"fixing\" NaN to work will likely slow down people getting large numbers of results, and i don't think we should do that in bugfix releases. \n\nbut in 3.1, we could change it, include some large results-oriented collectors for these people, and the whole thing would make sense. ",
            "author": "Robert Muir",
            "id": "comment-12835700"
        },
        {
            "date": "2010-02-19T11:14:25+0000",
            "content": "Sorry reverted a comment remove. ",
            "author": "Uwe Schindler",
            "id": "comment-12835701"
        },
        {
            "date": "2010-02-19T12:02:05+0000",
            "content": "The cost of the additional checks in HitQueue.lessThan are neglectible, as they only occur when a competitive hit is really inserted into the queue.\n\nThis should be benchmarked for MultiSearcher and ParallelMultiSearcher, too, as they also use HitQueue. ",
            "author": "Robert Muir",
            "id": "comment-12835717"
        },
        {
            "date": "2010-02-19T13:35:12+0000",
            "content": "Patch with testcases for trunk, but should work on branches, too (after removing @Override). Without the fixes in HitQueue or TSDC the tests fail. ",
            "author": "Uwe Schindler",
            "id": "comment-12835743"
        },
        {
            "date": "2010-02-19T13:56:44+0000",
            "content": "its not a bug, as its doc'ed to work this way. \n\nOK, so it was a design bug too. ",
            "author": "Yonik Seeley",
            "id": "comment-12835750"
        },
        {
            "date": "2010-02-19T14:21:09+0000",
            "content": "OK, so it was a design bug too.\n\nA design bug that function queries score docs with an invalid score (NaN) instead of throwing an exception? ",
            "author": "Robert Muir",
            "id": "comment-12835758"
        },
        {
            "date": "2010-02-19T14:40:54+0000",
            "content": "A design bug that function queries score docs with an invalid score (NaN) instead of throwing an exception?\n\nNo, a design bug that -Inf scores were disallowed, esp since they were handled just fine in the past.\n\nNaN is different - it's more of a judgement call depending on the cost to handle it. ",
            "author": "Yonik Seeley",
            "id": "comment-12835762"
        },
        {
            "date": "2010-02-19T14:49:00+0000",
            "content": "The cost to handle NaN is the modified lessThan() in HitQueue. ",
            "author": "Uwe Schindler",
            "id": "comment-12835763"
        },
        {
            "date": "2010-02-19T15:37:03+0000",
            "content": "Improved test, that also checks for increasing doc ids when score identical ",
            "author": "Uwe Schindler",
            "id": "comment-12835780"
        },
        {
            "date": "2010-02-20T14:38:14+0000",
            "content": "I'm starting to think that handling NaN is as important as handling the infinities.\nThis is because once you allow infinities, it's easy to get a NaN with a simple multiplication by 0. ",
            "author": "Yonik Seeley",
            "id": "comment-12836178"
        },
        {
            "date": "2010-02-20T14:47:51+0000",
            "content": "This is because once you allow infinities, it's easy to get a NaN with a simple multiplication by 0. \n\nmaybe we should keep it as is then, and only allow finite results ",
            "author": "Robert Muir",
            "id": "comment-12836179"
        },
        {
            "date": "2010-02-20T14:51:43+0000",
            "content": "maybe we should keep it as is then, and only allow finite results\n\nBut how?  Finite results can combine and overflow into infinite results with things like boolean query, so we can't give a definite range of values that a query can safely produce. ",
            "author": "Yonik Seeley",
            "id": "comment-12836180"
        },
        {
            "date": "2010-02-20T14:57:00+0000",
            "content": "But how? Finite results can combine and overflow into infinite results with things like boolean query, so we can't give a definite range of values that a query can safely produce.\n\nright, but this really only happens with function queries. this is my problem, with normal queries how can this happen?\nits a very very very very special case, and it seems overkill to add all these checks to performance-sensitive top-docs collection just for function queries, to handle NaN and infinites ",
            "author": "Robert Muir",
            "id": "comment-12836181"
        },
        {
            "date": "2010-02-20T14:57:56+0000",
            "content": "In my opinion we should fix it using the attached patch and in the future 3.1 do some refactoring:\n\n\tno sentinels\n\tdefine a order for NaN, as NaN breaks the complete order of results (because PQ cannot handle the case that lessThan(a,b) returns false and also lessThan(b,a) when NaN is involved)\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12836182"
        },
        {
            "date": "2010-02-20T15:01:25+0000",
            "content": "In my opinion we should fix it using the attached patch and in the future 3.1 do some refactoring: \n\nin general agree, on one condition that it doesnt slow down normal queries, MultiSearcher, or ParallelMultiSearcher significantly (benchmarks)\n\nin my opinion the thing is documented not to work for these values, so its not a bug at all. if we want to support these values we should redesign the collector (in 3.1) ",
            "author": "Robert Muir",
            "id": "comment-12836183"
        },
        {
            "date": "2010-02-20T15:55:21+0000",
            "content": "Here a simplier patch with sentinels removed. You can maybe think about a better if-check in the out of order collector ",
            "author": "Uwe Schindler",
            "id": "comment-12836191"
        },
        {
            "date": "2010-02-20T16:11:57+0000",
            "content": "Sorry, insertWithOverflow is correct! ",
            "author": "Uwe Schindler",
            "id": "comment-12836194"
        },
        {
            "date": "2010-02-20T16:24:21+0000",
            "content": "An awful lot of thought went into optimizing those collection algorithms.  I\ndisagree with many of the design decisions that were made, but it seems rushed\nto blithely revert those optimizations.\n\nFWIW, the SortCollector in KS (designed on the Lucy list last spring, would be\nin Lucy but some prereqs haven't gone in yet) doesn't have the problem with\n-Inf sentinels.  It uses an array of \"actions\" representing sort rules to\ndetermine whether a hit is \"competitive\" and should be inserted into the\nqueue; the first action is set to AUTO_ACCEPT (meaning try inserting the hit\ninto the queue) until the queue fills up, and then again to AUTO_ACCEPT at the\nstart of each segment.  It's not necessary to fill up the queue with dummy\nhits beforehand.\n\n\nstatic INLINE bool_t\nSI_competitive(SortCollector *self, i32_t doc_id)\n{\n    u8_t *const actions = self->actions;\n    u32_t i = 0;\n\n    /* Iterate through our array of actions, returning as quickly as\n     * possible. */\n    do {\n        switch (actions[i] & ACTIONS_MASK) {\n            case AUTO_ACCEPT:\n                return true;\n            case AUTO_REJECT:\n                return false;\n            case AUTO_TIE:\n                break;\n            case COMPARE_BY_SCORE: {\n                    float score = Matcher_Score(self->matcher);\n                    if  (score > self->bubble_score) {\n                        self->bumped->score = score;\n                        return true;\n                    }\n                    else if (score < self->bubble_score) {\n                        return false;\n                    }\n                }\n                break;\n            case COMPARE_BY_SCORE_REV: {\n                // ...\n            case COMPARE_BY_DOC_ID:\n                // ...\n            case COMPARE_BY_ORD1: {\n                // ...\n        }\n    } while (++i < self->num_actions);\n\n    /* If we've made it this far and we're still tied, reject the doc so that\n     * we prefer items already in the queue.  This has the effect of\n     * implicitly breaking ties by doc num, since docs are collected in order.\n     */\n    return false;\n}\n\n ",
            "author": "Marvin Humphrey",
            "id": "comment-12836197"
        },
        {
            "date": "2010-02-20T16:50:50+0000",
            "content": "Attached is the patch with the testcase from the previous one (with sentinels). All tests pass. ",
            "author": "Uwe Schindler",
            "id": "comment-12836203"
        },
        {
            "date": "2010-02-20T18:03:44+0000",
            "content": "I would rather not change the core default collector here, when\nsorting by score.\n\nAll of the patches being considered would add an extra comparison/and\n(or maybe if) per collect call, which while presumably small, is still\nan added cost.\n\nLikely this added cost is in the noise of a benchmark so we wouldn't\nbe able to conclude much by benching... but enough of these added\ncosts will eventually add up.  At the end of the day you are adding\nnon-zero work for the CPU to do, for every collect.\n\nThis is Lucene's searching hotspot, so we should only be adding extra\ncode on this critical path when it's really needed.\n\nIt's ashame to make everyone pay that price when in practice very few\nusers need to collect -Inf/NaN scoring docs.  This hasn't been hit in\na \"real\" use case yet.\n\nIn fact, before 2.9 (ie up to and including 2.4), we by default\nfiltered out all docs scoring <= 0.0, so -Inf and NaN were always\nfiltered out, anyway.\n\nUsers who somehow do hit this in a real use case have a good\nworkaround: use TopFieldCollector, sorting by Relevance.  This will\nproperly handle -Inf, and will at least collect NaN scoring docs (but\ntheir sort order will be random, as it always has).  Or, use\nPositiveScoresOnlyCollector (to get back to Lucene 2.4 behavior).  Or,\ncreate a custom collector. ",
            "author": "Michael McCandless",
            "id": "comment-12836214"
        },
        {
            "date": "2010-02-20T18:12:48+0000",
            "content": "Here is a new impl that only has exactly one additional check in the initial collection (when th pq is not yet full). After the PQ is full, the collector is replaced by the short-cutting one.\n\nThis impl should even be faster than before, if the additional method call does not count and is removed by the JVM (which it should, because its clearly predictable) ",
            "author": "Uwe Schindler",
            "id": "comment-12836217"
        },
        {
            "date": "2010-02-20T18:16:21+0000",
            "content": "more improved ",
            "author": "Uwe Schindler",
            "id": "comment-12836220"
        },
        {
            "date": "2010-02-20T18:38:18+0000",
            "content": "More optimized version with more local variables. This is the version for the benchmark-try. ",
            "author": "Uwe Schindler",
            "id": "comment-12836228"
        },
        {
            "date": "2010-02-20T19:16:10+0000",
            "content": "Here a benchmark task made by grant. Run collector.alg and wait long enough. ",
            "author": "Uwe Schindler",
            "id": "comment-12836232"
        },
        {
            "date": "2010-02-20T20:16:10+0000",
            "content": "More improved version, now equal to prefilled queue case, as the collector reuses overflowed ScoreDoc instances. ",
            "author": "Uwe Schindler",
            "id": "comment-12836252"
        },
        {
            "date": "2010-02-20T21:39:33+0000",
            "content": "I did some benchmarks (Java 1.5.0_22, 64bit, Win7, Core2Duo P8700) will do more tomorrow when i set up a large testing environment with 3 separate checkouts containing the three collector versions):\n\n\tThe latest approach (https://issues.apache.org/jira/secure/attachment/12436458/LUCENE-2271.patch) with no sentinels using the delegation and exchanging the inner collector was as fast as the original unpatched version\n\tThe approach with sentinels but fixed HitQueue ordering and extra checks (https://issues.apache.org/jira/secure/attachment/12436329/LUCENE-2271.patch), showed (as exspected) a little overhead: The ordered collector was as fast as the unpatched unordered collector (because one check more) - so i would not use this patch\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-12836265"
        },
        {
            "date": "2010-02-20T22:22:28+0000",
            "content": "Fix an issue when numDocs==0. ",
            "author": "Uwe Schindler",
            "id": "comment-12836273"
        },
        {
            "date": "2010-02-21T15:36:56+0000",
            "content": "This is a delightfully clever solution, delegating to a contained\ncollector and then swapping in one collector for the startup (when the\nqueue is not yet full) and then a new collector once the queue is\nfull.\n\nIt's the closest equivalent we in javaland can reach, to using\nfunction pointers in C.\n\nBut, I don't think we should commit this \u2013 this makes the code more\ncomplex, and doesn't really gain enough (performance is the same) in\nreturn.  It also relies more heavily on the JVM being able to optimize away\nthe method call.\n\nYes it handles -inf/nan, but I don't think Lucene's default\nsort-by-relevance collector needs to (prior to 2.9 we silently\nfiltered out such hits, as well as all hits with score <= 0.0). ",
            "author": "Michael McCandless",
            "id": "comment-12836384"
        },
        {
            "date": "2010-02-21T17:01:11+0000",
            "content": "I think we should fix a few doc issues, and add asserts (attached patch for trunk). ",
            "author": "Michael McCandless",
            "id": "comment-12836400"
        },
        {
            "date": "2010-02-21T21:41:44+0000",
            "content": "After applying Mike's patch (with modified asserts to correctly detect NaN), updated my patch of the delegating and -inf/NaN aware TopScoreDocCollector.\n\nMaybe we should add it as a separate collector for function queries in 3.1. Maybe with correct NaN ordering? ",
            "author": "Uwe Schindler",
            "id": "comment-12836451"
        },
        {
            "date": "2013-07-23T18:44:32+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716980"
        },
        {
            "date": "2014-04-16T12:54:38+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970825"
        }
    ]
}