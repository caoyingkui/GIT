{
    "id": "LUCENE-2520",
    "title": "Unsafe synchronization in CachingWrapperFilterHelper",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.0.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "CachingWrapperFilterHelper has unsaft synchronization as follow:\n\n public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n    if (cache == null) \n{\n      cache = new WeakHashMap();\n    }\n\n    synchronized (cache) \n{  \n       ...\n     }\n\nIt is not safe to assgine a new object to cache before synchronizing on. it may results sycnchronize on two different object if the method is called concurrently when cache =null.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-06-30T06:23:45+0000",
            "content": "We discussed several times about that, this is not a problem here, as its a cache and there is no guarantee needed that every object only exists one time. For speed issues in this filter we decided to keep it like that. There are other places in Lucene using caches working the same way. ",
            "author": "Uwe Schindler",
            "id": "comment-12883803"
        }
    ]
}