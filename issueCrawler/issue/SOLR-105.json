{
    "id": "SOLR-105",
    "title": "Duck typing for Document/Field plus to/from solr conversions for field names.",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - ruby - flare"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Later"
    },
    "description": "Hey Erik,\n\nTake a close look at this patch, I've extended Ed's code quite a bit.  You may want to hold off applying this until we all discuss it.  But on the plus side, it has 100% test coverage, and allows round trips of full documents to Solr.\n\nWill",
    "attachments": {
        "doc_and_field_roundtrip.patch": "https://issues.apache.org/jira/secure/attachment/12348915/doc_and_field_roundtrip.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Erik Hatcher",
            "id": "comment-12465016",
            "date": "2007-01-16T00:47:46+0000",
            "content": "Lets discuss this further.  I'm not quite on board with document round tripping just yet, as I think we need more of a Lucene Hits-like concept on the Ruby side to navigate the results in an iterator/Enumerable type fashion.  Keep in mind that what comes back from Solr may or may not be the full document that was added originally, due to the fields not being requested or the schema not configured to store them.  Having  partial documents on the Ruby side seems awkward from a user perspective and not adhere to the principle of least surprise. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12471547",
            "date": "2007-02-09T01:11:59+0000",
            "content": "Let's table this sort of thing until later, and let some real-world  usage dictate the need for these mappings. \n\nWe'll soon have implemented acts_as_solr which will handle model mapping, at least from ActiveRecord. "
        }
    ]
}