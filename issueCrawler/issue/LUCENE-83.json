{
    "id": "LUCENE-83",
    "title": "ESCAPING BUG \\(abc\\) and \\(a*c\\) in v1.2",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.2",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "PLEASE TEST THIS CODE:\n\n----------------------------------------------\n\nimport junit.framework.*;\nimport org.apache.lucene.index.*;\nimport org.apache.lucene.analysis.*;\nimport org.apache.lucene.analysis.standard.*;\nimport org.apache.lucene.store.*;\nimport org.apache.lucene.document.*;\nimport org.apache.lucene.search.*;\nimport org.apache.lucene.queryParser.*;\n\n/**\n\n\tEscape bug (now with same analyzers). By lzap@root.cz.\n\tHere is the description:\n *\n\tWhen searching for (abc) everything is ok. But let`s search for: (a?c)\n\tYES! Nothing found! It`s same with \\\" and maybe other escaped characters.\n *\n\tUser: Lukas Zapletal\n\tDate: Feb 1, 2003\n *\n\tJUnit test case follows:\n */\npublic class juEscapeBug extends TestCase {\n    Directory dir = new RAMDirectory();\n    String testText = \"This is a test. (abc) Is there a bug OR not? \\\"Question\\\"!\";\n\n\n\n    public juEscapeBug(String tn) \n{\n        super(tn);\n    }\n\n    protected void setUp() throws Exception \n{\n        IndexWriter writer = new IndexWriter(dir, new StandardAnalyzer(), true);\n        Document doc = new Document();\n        doc.add(Field.Text(\"contents\", testText));\n        writer.addDocument(doc);\n        writer.optimize();\n        writer.close();\n    }\n\n    private boolean doQuery(String queryString) throws Exception \n{\n        Searcher searcher = new IndexSearcher(dir);\n        Analyzer analyzer = new StandardAnalyzer();\n        Query query = QueryParser.parse(queryString, \"contents\", analyzer);\n        Hits hits = searcher.search(query);\n        searcher.close();\n        return (hits.length() == 1);\n    }\n\n    public void testBugOk1() throws Exception \n{\n        assertTrue(doQuery(\"Test\"));\n    }\n    public void testBugOk2() throws Exception \n{\n        assertFalse(doQuery(\"This is not there\"));\n    }\n    public void testBugOk3() throws Exception \n{\n        assertTrue(doQuery(\"abc\"));\n    }\n    public void testBugOk4() throws Exception \n{\n        assertTrue(doQuery(\"\\\\(abc\\\\)\"));\n    }\n    public void testBugHere1() throws Exception \n{\n        assertTrue(doQuery(\"\\\\(a?c\\\\)\")); // BUG HERE !!!\n    }\n    public void testBugHere2() throws Exception \n{\n        assertTrue(doQuery(\"\\\\(a*\\\\)\")); // BUG HERE !!!\n    }\n    public void testBugHere3() throws Exception \n{\n        assertTrue(doQuery(\"\\\\\\\"qu*on\\\\\\\"\")); // BUG HERE !!!\n    }\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2004-03-30T02:53:26+0000",
            "content": "The problem still occurs in the CVS version. I cannot fix it, but I can \nexplain a bit where the problem comes from: \n\n\"(abc)\" will be indexed as \"abc\" by standard analyzer. The query \"a?c\" is \nparsed as \"field:a?c\" (you'll get a match), but the query \"(a?c)\" is parsed as \n\"field:(a?c)\" (no match, which is correct?). So the problem seems to be in \nQueryParser. \n\nI'm setting this to \"normal\" severity, as I think it's rather uncommon. The \nfact that the bug is open for one year and doesn't have a single comment seems \nto support that.  ",
            "author": "Daniel Naber",
            "id": "comment-12321190"
        },
        {
            "date": "2011-01-25T13:52:58+0000",
            "content": "I verified on both 3x and trunk, queries like \"\\\\(a?c)\" and \"\\\\(a*c)\" work (return the correct result). I guess it was a problem fixed already in QP at some point. ",
            "author": "Shai Erera",
            "id": "comment-12986387"
        }
    ]
}