{
    "id": "SOLR-11662",
    "title": "Make overlapping query term scoring configurable per field type",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.2",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This patch customizes the query-time behavior when query terms overlap positions. Right now the only option is SynonymQuery. This is a fantastic default & improvement on past versions. However, there are use cases where terms overlap positions but don't carry exact synonymy relationships. Often synonyms are actually used to model hypernym/hyponym relationships using synonyms (or other analyzers). So the individual term scores matter, with terms with higher specificity (hyponym) scoring higher than terms with lower specificity (hypernym).\n\nThis patch adds the fieldType setting scoreOverlaps, as in:\n\n\n\n  <fieldType name=\"text_general\"  scoreOverlaps=\"pick_best\"  class=\"solr.TextField\" positionIncrementGap=\"100\" multiValued=\"true\">\n\n\n\n\n\nValid values for scoreOverlaps are:\n\nas_one_term\nDefault, most synonym use cases. Uses SynonymQuery\nTreats all terms as if they're exactly equivalent, with document frequency from underlying terms blended \n\npick_best\nFor a given document, score using the best scoring synonym (ie dismax over generated terms). \nUseful when synonyms not exactly equilevant. Instead they are used to model hypernym/hyponym relationships. Such as expanding to synonyms of where terms scores will reflect that quality\nIE this query time expansion\n\ntabby => tabby, cat, animal\n\nSearching \"text\", generates the dismax (text:tabby | text:cat | text:animal)\n\nas_distinct_terms\n(The pre 6.0 behavior.)\nCompromise between pick_best and as_oneSterm\nAppropriate when synonyms reflect a hypernym/hyponym relationship, but lets scores stack, so documents with more tabby, cat, or animal the better w/ a bias towards the term with highest specificity\nTerms are turned into a boolean OR query, with documen frequencies not blended\nIE this query time expansion\n\ntabby => tabby, cat, animal\n\nSearching \"text\", generates the boolean query (text:tabby  text:cat text:animal)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-21T21:50:27+0000",
            "content": "GitHub user softwaredoug opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/275\n\n    SOLR-11662: Configurable query when terms overlap\n\n    Modifies QueryBuilder and Solr Field Type to allow configurable overlap scoring asides from SynonymQuery\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/o19s/lucene-solr configurable-synonym-query-behavior\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/275.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #275\n\n\ncommit d83b1300a8b469fa19e5fd9ae8264f6fa448bb18\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2017-11-21T19:02:09Z\n\n    Makes QueryBuilder synonym matching configurable\n\ncommit f279435b46f81232181a658be5e856bdbca9924f\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2017-11-21T20:03:54Z\n\n    plumb through the field type setting\n\ncommit 1e9e41c4cccff10effd4a29da30c378ee21dac3d\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2017-11-21T20:17:56Z\n\n    Fix enum style\n\ncommit 8eb875fcccf533d3799b15d266c724c868e13d34\nAuthor: Doug Turnbull <softwaredoug@gmail.com>\nDate:   2017-11-21T21:47:04Z\n\n    Renaming to scoreOverlaps\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16261548"
        },
        {
            "date": "2017-11-21T21:51:31+0000",
            "content": "Associated pull request https://github.com/apache/lucene-solr/pull/275/files\nAnd Patch https://patch-diff.githubusercontent.com/raw/apache/lucene-solr/pull/275.patch ",
            "author": "Doug Turnbull",
            "id": "comment-16261549"
        },
        {
            "date": "2017-11-22T07:42:47+0000",
            "content": "Can we have this SynonymQuery vs. dismax vs. BooleanQuery logic in a sub-class of QueryBuilder rather than QueryBuilder itself? Reason is that I don't think most users would need to customize this behaviour and moving it to a separate class would help keep QueryBuilder simple? ",
            "author": "Adrien Grand",
            "id": "comment-16262104"
        },
        {
            "date": "2017-11-22T12:50:18+0000",
            "content": "Thanks Adrien! Yes, it could be moved to SolrQueryParser. This would narrow the scope to just Solr, however. I would like to see this capability in Elasticsearch as well. Though that could be handled differently. ",
            "author": "Doug Turnbull",
            "id": "comment-16262468"
        },
        {
            "date": "2017-11-22T13:23:32+0000",
            "content": "I think it's fine that Solr and Elasticsearch end up duplicating the functionality if it keeps Lucene simpler. ",
            "author": "Adrien Grand",
            "id": "comment-16262507"
        },
        {
            "date": "2017-11-22T14:08:13+0000",
            "content": "Great! And that would actually let me submit an ES patch in parallel... I'll update my PR/patch ",
            "author": "Doug Turnbull",
            "id": "comment-16262567"
        },
        {
            "date": "2017-11-22T21:31:13+0000",
            "content": "PR updated w/ code in Solr level, patch can be viewed here https://github.com/apache/lucene-solr/pull/275.patch ",
            "author": "Doug Turnbull",
            "id": "comment-16263377"
        },
        {
            "date": "2017-11-27T05:38:44+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153109215\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java \u2014\n    @@ -539,6 +564,25 @@ protected Query newRegexpQuery(Term regexp) \n{\n         return query;\n       }\n\n    +  @Override\n    +  protected Query newSynonymQuery(Term terms[]) {\n    +    if (scoreOverlaps == ScoreOverlaps.PICK_BEST) {\n    \u2014 End diff \u2013\n\n    Some nitpicks here.  I think a switch/case statement would better reflect this code reacts to all possibilities of scoreOverlaps.  Secondly, the `new ArrayList<Query>()` could be `new ArrayList<>(terms.length)`. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16266391"
        },
        {
            "date": "2017-11-27T05:38:44+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153109956\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java \u2014\n    @@ -1794,6 +1798,37 @@ public void testOperatorsAndMultiWordSynonyms() throws Exception \n{\n         );\n       }\n\n    +  public void testOverlapTermScoringQueries() throws Exception {\n    \u2014 End diff \u2013\n\n    This new functionality should apply to the lucene QueryParser... wouldn't a test be better targeted there instead of edismax? ",
            "author": "ASF GitHub Bot",
            "id": "comment-16266392"
        },
        {
            "date": "2017-11-27T05:38:44+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153109462\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java \u2014\n    @@ -330,6 +339,19 @@ public void setAllowSubQueryParsing(boolean allowSubQueryParsing) \n{\n         this.allowSubQueryParsing = allowSubQueryParsing;\n       }\n\n    +  /**\n    +   * Set how overlapping query terms should be scored, as if they're the same term,\n    \u2014 End diff \u2013\n\n    I think some reference to \"synonyms\" here would be helpful to people understanding, even if this applies to cases that aren't necessarily synonyms in the strict sense.  For example after \"overlapping query terms\" add a parenthetical: \"(e.g. synonyms)\"\n\n    Heck, maybe we should call this `SynonymQueryStyle`?  After all, we're overriding `newSynonymQuery` to do the work, thus Lucene has picked the name for us. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16266393"
        },
        {
            "date": "2017-11-27T05:38:44+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153110109\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/schema/FieldType.java \u2014\n    @@ -905,6 +905,7 @@ protected void checkSupportsDocValues() {\n       protected static final String ENABLE_GRAPH_QUERIES = \"enableGraphQueries\";\n       private static final String ARGS = \"args\";\n       private static final String POSITION_INCREMENT_GAP = \"positionIncrementGap\";\n    +  protected static final String SCORE_OVERLAPS = \"scoreOverlaps\";\n    \u2014 End diff \u2013\n\n    Perhaps this ought to be a new parameter instead so that it's easier to toggle?  I suspect you've thought of this already and I'm curious about your rationale. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16266394"
        },
        {
            "date": "2017-11-27T05:38:44+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153109827\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java \u2014\n    @@ -1794,6 +1798,37 @@ public void testOperatorsAndMultiWordSynonyms() throws Exception \n{\n         );\n       }\n\n    +  public void testOverlapTermScoringQueries() throws Exception {\n    +    ModifiableSolrParams edismaxParams = new ModifiableSolrParams();\n    +    edismaxParams.add(\"qf\", \"t_pick_best_foo\");\n    +\n    +    QParser qParser = QParser.getParser(\"tabby\", \"edismax\", req(edismaxParams));\n    +    Query q = qParser.getQuery();\n    +    assertEquals(\"+((t_pick_best_foo:tabbi | t_pick_best_foo:cat | t_pick_best_foo:felin | t_pick_best_foo:anim))\", q.toString());\n    +\n    +    edismaxParams = new ModifiableSolrParams();\n    \u2014 End diff \u2013\n\n    Solr tests have a `params()` method which is much more concise and doesn't pollute the variable namespace unnecessarily ",
            "author": "ASF GitHub Bot",
            "id": "comment-16266395"
        },
        {
            "date": "2017-11-27T05:38:44+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153109304\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java \u2014\n    @@ -78,6 +79,14 @@\n       static final int MOD_NOT     = 10;\n       static final int MOD_REQ     = 11;\n\n    +  protected ScoreOverlaps scoreOverlaps = ScoreOverlaps.AS_SAME_TERM;\n    +\n    +  public static enum ScoreOverlaps {\n    \u2014 End diff \u2013\n\n    the docs on these should be actual javadocs with `\n{@link classname}\n` for the implementation classes ",
            "author": "ASF GitHub Bot",
            "id": "comment-16266396"
        },
        {
            "date": "2017-11-28T01:02:55+0000",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153369232\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/schema/FieldType.java \u2014\n    @@ -905,6 +905,7 @@ protected void checkSupportsDocValues() {\n       protected static final String ENABLE_GRAPH_QUERIES = \"enableGraphQueries\";\n       private static final String ARGS = \"args\";\n       private static final String POSITION_INCREMENT_GAP = \"positionIncrementGap\";\n    +  protected static final String SCORE_OVERLAPS = \"scoreOverlaps\";\n    \u2014 End diff \u2013\n\n    I have been thinking a lot about this! \n\n\n\tSolr currently exposes per-field query configuration as a fieldType param, not query time (see [autoGeneratePhraseQueries and enableGraphQueries](https://lucene.apache.org/solr/guide/6_6/field-type-definitions-and-properties.html#general-properties).\n\tSolr doesn't yet have a way to pass per-field configuration at query time (my email about multiple analyzers proposes one system for doing this)\n\n\n\n    To do the latter, ideally you'd have an API that could let you see multiple views/configs on the same field, such as the following which would search two query-time versions of the actor field\n\n    `q=action movies&qf=actor_syn actor_nosyn^10 title text&defType=edismax&qf.actor_nosyn.field=actor&qf.actor_nosyn.analyzer=without_synonyms&qf.actor_syn.field=actor&qf.actor_syn.analyzer=with_synonyms&qf.actor_syn&scoreOverlaps=pick_best`\n\n    I think this sort of syntax could be extremely powerful, and deal with the ability to configure multiple query time analyzers. But a bridge too far for this PR...\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-16267900"
        },
        {
            "date": "2017-11-28T01:25:13+0000",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153372491\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java \u2014\n    @@ -1794,6 +1798,37 @@ public void testOperatorsAndMultiWordSynonyms() throws Exception \n{\n         );\n       }\n\n    +  public void testOverlapTermScoringQueries() throws Exception {\n    \u2014 End diff \u2013\n\n    It could go either place, I put it here based on following the work for adding autoGeneratePhraseQueries ",
            "author": "ASF GitHub Bot",
            "id": "comment-16267926"
        },
        {
            "date": "2017-11-28T03:27:24+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153387514\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/schema/FieldType.java \u2014\n    @@ -905,6 +905,7 @@ protected void checkSupportsDocValues() {\n       protected static final String ENABLE_GRAPH_QUERIES = \"enableGraphQueries\";\n       private static final String ARGS = \"args\";\n       private static final String POSITION_INCREMENT_GAP = \"positionIncrementGap\";\n    +  protected static final String SCORE_OVERLAPS = \"scoreOverlaps\";\n    \u2014 End diff \u2013\n\n    I need to correct you one one point: Solr has had a syntax for per-field query parameters for a long time.  The syntax is `f.fieldName.parameterName`  e.g. `f.title.hl.snippets`   SolrJ's SolrParams has convenience methods for this on the implementation side. Perhaps you overlooked this because most users only use it in the context of faceting parameters, even though it's certainly not unique to faceting (as in the example above for highlighting).  I'm not aware of any query parser that uses it yet but they certainly could.\n\n    Any way, I suppose even if we agree we'd like some query time customizability of this (and other settings), it would still be nice to establish a default fallback on the FieldType. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16268031"
        },
        {
            "date": "2017-11-28T03:34:32+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r153388267\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/search/TestExtendedDismaxParser.java \u2014\n    @@ -1794,6 +1798,37 @@ public void testOperatorsAndMultiWordSynonyms() throws Exception \n{\n         );\n       }\n\n    +  public void testOverlapTermScoringQueries() throws Exception {\n    \u2014 End diff \u2013\n\n    I see.  Nonetheless I think it belongs in TestSolrQueryParser.  I'd rather edismax tests stick to testing edismax and not LuceneQParser/SolrQueryParser stuff unless it's incidental. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16268038"
        },
        {
            "date": "2017-11-29T00:48:37+0000",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/275\n\n    Updated from your review @dsmiley, let me know what you think of the name change to synonymQueryStyle, specifically let me know [how this reads](https://github.com/o19s/lucene-solr/blob/configurable-synonym-query-behavior/solr/core/src/test-files/solr/collection1/conf/schema12.xml#L171). I think the name is better, but I wonder with \"synonymQueryStyle\" if we should call the values something else? I may be overthinking it ",
            "author": "ASF GitHub Bot",
            "id": "comment-16269834"
        },
        {
            "date": "2017-12-01T22:04:28+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154456181\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java \u2014\n    @@ -1057,7 +1057,35 @@ public void testShingleQueries() throws Exception \n{\n             , \"/response/numFound==1\"\n         );\n       }\n\n\t    +\n    +\n    +  public void testSynonymQueryStyle() throws Exception {\n    +    ModifiableSolrParams edismaxParams = params(\"qf\", \"t_pick_best_foo\");\n    +\n    +    QParser qParser = QParser.getParser(\"tabby\", \"edismax\", req(edismaxParams));\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Why not the default/lucene query parser?  That's what TestSolrQueryParser tests. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16275057"
        },
        {
            "date": "2017-12-01T22:04:28+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154457666\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java \u2014\n    @@ -539,6 +591,27 @@ protected Query newRegexpQuery(Term regexp) \n{\n         return query;\n       }\n\n    +  @Override\n    +  protected Query newSynonymQuery(Term terms[]) {\n    +    switch (synonymQueryStyle) {\n    +      case PICK_BEST:\n    +        List<Query> currPosnClauses = new ArrayList<Query>(terms.length);\n    +        for (Term term : terms) \n{\n    +          currPosnClauses.add(newTermQuery(term));\n    +        }\n    +        DisjunctionMaxQuery dm = new DisjunctionMaxQuery(currPosnClauses, 0.0f);\n    +        return dm;\n    +      case AS_DISTINCT_TERMS:\n    +        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    +        for (Term term : terms) \n{\n    +          builder.add(newTermQuery(term), BooleanClause.Occur.SHOULD);\n    +        }\n    +        return builder.build();\n    +      default:\n    \u2014 End diff \u2013\n\n    What I meant to say in my previous review here is that you would have a case statement for AS_SAME_TERM and then to satisfy Java, add a default that throws an assertion error.  This way we see all 3 enum vals with their own case, which I think is easier to understand/maintain.  Oh, are you're doing this to handle \"null\"?  Hmm. Maybe put the case immediately before your current \"default\"?  Or prevent null in the first place?  Either I guess... nulls are unfortunate; I like to avoid them.  Notice TextField has primitives for some of its other settings; it'd be nice if likewise we had a non-null value for TextField.synonymQueryStyle. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16275058"
        },
        {
            "date": "2017-12-01T22:04:28+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154458145\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java \u2014\n    @@ -78,6 +81,39 @@\n       static final int MOD_NOT     = 10;\n       static final int MOD_REQ     = 11;\n\n    +  protected SynonymQueryStyle synonymQueryStyle = AS_SAME_TERM;\n    +\n    +  /**\n    +   *  Query strategy when analyzed query terms overlap the same position (ie synonyms)\n    +   *  consider if pants and khakis are query time synonyms\n    +   *\n    +   *  <li>\n{@link #AS_SAME_TERM}\n</li>\n    +   *  <li>\n{@link #PICK_BEST}\n</li>\n    +   *  <li>\n{@link #AS_DISTINCT_TERMS}\n</li>\n    +   */\n    +  public static enum SynonymQueryStyle {\n    \u2014 End diff \u2013\n\n    I like the new name, and thanks for improving the javadocs.  BTW that \"li\" HTML list is missing the \"<ul> wrapper.  Or better IMO is simply drop this list; it has no value I think. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16275059"
        },
        {
            "date": "2017-12-01T22:04:29+0000",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154456952\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java \u2014\n    @@ -1057,7 +1057,35 @@ public void testShingleQueries() throws Exception \n{\n             , \"/response/numFound==1\"\n         );\n       }\n\n\t    +\n    +\n    +  public void testSynonymQueryStyle() throws Exception {\n    +    ModifiableSolrParams edismaxParams = params(\"qf\", \"t_pick_best_foo\");\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Just a minor point here but you needn't have a SolrParams based variable; you could simply inline it at each invocation.  This makes it easier to read each test request.  If you were trying to share some common params across test invocations then I could understand. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16275060"
        },
        {
            "date": "2017-12-02T01:34:31+0000",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154483628\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/parser/SolrQueryParserBase.java \u2014\n    @@ -539,6 +591,27 @@ protected Query newRegexpQuery(Term regexp) \n{\n         return query;\n       }\n\n    +  @Override\n    +  protected Query newSynonymQuery(Term terms[]) {\n    +    switch (synonymQueryStyle) {\n    +      case PICK_BEST:\n    +        List<Query> currPosnClauses = new ArrayList<Query>(terms.length);\n    +        for (Term term : terms) \n{\n    +          currPosnClauses.add(newTermQuery(term));\n    +        }\n    +        DisjunctionMaxQuery dm = new DisjunctionMaxQuery(currPosnClauses, 0.0f);\n    +        return dm;\n    +      case AS_DISTINCT_TERMS:\n    +        BooleanQuery.Builder builder = new BooleanQuery.Builder();\n    +        for (Term term : terms) \n{\n    +          builder.add(newTermQuery(term), BooleanClause.Occur.SHOULD);\n    +        }\n    +        return builder.build();\n    +      default:\n    \u2014 End diff \u2013\n\n    I don't think synonymQueryStyle should ever be null (should default to AS_SAME_TERM) ",
            "author": "ASF GitHub Bot",
            "id": "comment-16275350"
        },
        {
            "date": "2017-12-02T01:34:52+0000",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154483649\n\n    \u2014 Diff: solr/core/src/test/org/apache/solr/search/TestSolrQueryParser.java \u2014\n    @@ -1057,7 +1057,35 @@ public void testShingleQueries() throws Exception \n{\n             , \"/response/numFound==1\"\n         );\n       }\n\n\t    +\n    +\n    +  public void testSynonymQueryStyle() throws Exception {\n    +    ModifiableSolrParams edismaxParams = params(\"qf\", \"t_pick_best_foo\");\n    +\n    +    QParser qParser = QParser.getParser(\"tabby\", \"edismax\", req(edismaxParams));\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    whoops, good catch ",
            "author": "ASF GitHub Bot",
            "id": "comment-16275351"
        },
        {
            "date": "2017-12-02T19:13:40+0000",
            "content": "Github user softwaredoug commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/275\n\n    Ascii docs updated, though I was not able to build the docs locally. Thanks @dsmiley  ",
            "author": "ASF GitHub Bot",
            "id": "comment-16275717"
        },
        {
            "date": "2017-12-03T19:55:23+0000",
            "content": "Github user ctargett commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154534656\n\n    \u2014 Diff: solr/solr-ref-guide/src/field-type-definitions-and-properties.adoc \u2014\n    @@ -87,6 +87,13 @@ For multivalued fields, specifies a distance between multiple values, which prev\n\n     `autoGeneratePhraseQueries`:: For text fields. If `true`, Solr automatically generates phrase queries for adjacent terms. If `false`, terms must be enclosed in double-quotes to be treated as phrases.\n\n    +`synonymQueryStyle`:: \n    +Query used to combine scores of overlapping query terms (ie synonyms). Consider a search for \"blue tee\" with query-time synonyms `tshirt,tee`.\n    \u2014 End diff \u2013\n\n    Our convention is to use \"i.e.,\" instead of just \"ie\". ",
            "author": "ASF GitHub Bot",
            "id": "comment-16276059"
        },
        {
            "date": "2017-12-03T19:56:18+0000",
            "content": "Github user ctargett commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154534686\n\n    \u2014 Diff: solr/solr-ref-guide/src/field-type-definitions-and-properties.adoc \u2014\n    @@ -87,6 +87,13 @@ For multivalued fields, specifies a distance between multiple values, which prev\n\n     `autoGeneratePhraseQueries`:: For text fields. If `true`, Solr automatically generates phrase queries for adjacent terms. If `false`, terms must be enclosed in double-quotes to be treated as phrases.\n\n    +`synonymQueryStyle`:: \n    +Query used to combine scores of overlapping query terms (ie synonyms). Consider a search for \"blue tee\" with query-time synonyms `tshirt,tee`.\n    ++\n    +Use `as_same_term` (default) to blend terms, ie `SynonymQuery(tshirt,tee)` where each term will be treated as equally important. Use `pick_best` to select the most significant synonym when scoring `Dismax(tee,tshirt)`. Use `as_distinct_terms` to bias scoring towards the most significant synonym `(pants OR slacks)`.\n    ++\n    +`as_same_term` is appropriatte when terms are true synonyms (television, tv). `pick_best` and `as_distinct_terms` are appropriatte when synonyms are expanding to hyponyms (q=jeans w/ jeans=>jeans,pants) and you want exact to come before parent and sibling concepts. See this http://opensourceconnections.com/blog/2017/11/21/solr-synonyms-mea-culpa/[blog article].\n    \u2014 End diff \u2013\n\n    Is \"appropriate\" spelled wrong (with an extra 't')? It's done twice so I'm not sure if I'm perhaps misunderstanding the context. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16276060"
        },
        {
            "date": "2017-12-03T23:27:05+0000",
            "content": "Github user softwaredoug commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/275#discussion_r154540898\n\n    \u2014 Diff: solr/solr-ref-guide/src/field-type-definitions-and-properties.adoc \u2014\n    @@ -87,6 +87,13 @@ For multivalued fields, specifies a distance between multiple values, which prev\n\n     `autoGeneratePhraseQueries`:: For text fields. If `true`, Solr automatically generates phrase queries for adjacent terms. If `false`, terms must be enclosed in double-quotes to be treated as phrases.\n\n    +`synonymQueryStyle`:: \n    +Query used to combine scores of overlapping query terms (ie synonyms). Consider a search for \"blue tee\" with query-time synonyms `tshirt,tee`.\n    ++\n    +Use `as_same_term` (default) to blend terms, ie `SynonymQuery(tshirt,tee)` where each term will be treated as equally important. Use `pick_best` to select the most significant synonym when scoring `Dismax(tee,tshirt)`. Use `as_distinct_terms` to bias scoring towards the most significant synonym `(pants OR slacks)`.\n    ++\n    +`as_same_term` is appropriatte when terms are true synonyms (television, tv). `pick_best` and `as_distinct_terms` are appropriatte when synonyms are expanding to hyponyms (q=jeans w/ jeans=>jeans,pants) and you want exact to come before parent and sibling concepts. See this http://opensourceconnections.com/blog/2017/11/21/solr-synonyms-mea-culpa/[blog article].\n    \u2014 End diff \u2013\n\n    Thanks @ctargett, this is one of those words I consistently misspell. Github spellchecking failed me, so I brought it down and double checked/fixed the spelling. ",
            "author": "ASF GitHub Bot",
            "id": "comment-16276157"
        },
        {
            "date": "2017-12-04T05:09:40+0000",
            "content": "Cool; I think this is ready to go, albeit a couple changes I noted while running tests & precommit.\n\n\tcalling toUpperCase requires Locale.ROOT.  precommit caught this but so did simply running tests if you get \"lucky\" with an odd locale (I did).\n\t=>  in asciidocs must be escaped with '\\'  (unless it's in a source block).  precommit caught this.\n\n ",
            "author": "David Smiley",
            "id": "comment-16276292"
        },
        {
            "date": "2017-12-04T18:25:30+0000",
            "content": "Commit 83753d0a2ae5bdd00649f43e355b5a43c6709917 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=83753d0 ]\n\nSOLR-11662: synonymQueryStyle option for FieldType used by query parser ",
            "author": "ASF subversion and git services",
            "id": "comment-16277199"
        },
        {
            "date": "2017-12-04T18:26:44+0000",
            "content": "Commit ee896ec6ac103220c311421147d290124ab3df74 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ee896ec ]\n\nSOLR-11662: synonymQueryStyle option for FieldType used by query parser\n\n(cherry picked from commit 83753d0) ",
            "author": "ASF subversion and git services",
            "id": "comment-16277202"
        },
        {
            "date": "2017-12-04T18:37:38+0000",
            "content": "Thanks Doug!\n\nBTW I have a question on the practical use of this option.  In the docs you mention the default as_same_term is good for real synonyms and that the otherS are good for hyponyms.  Lets say the synonyms file has a mix of both (typical).  It seems impossible to use both since the QueryBuilder passes no context other than the terms to build the query.  Do you recommend different analyzer chains, one with regular synonyms and another with hypernyms via perhaps SOLR-11698?  Of course that'd be less efficient than one query with the right type of query per synonym clause; but that's elusive without some custom query parser that detects the types and handles it (not leveraging QueryBuilder as it's not hackable). ",
            "author": "David Smiley",
            "id": "comment-16277221"
        },
        {
            "date": "2017-12-04T20:44:02+0000",
            "content": "Thanks for helping with the change David!\n\nI would probably personally do something like that. However, I tend to restructure most synonyms into a taxonomy. Many people aren't aware of hypernymy/hyponymy. It's not uncommon to see a synonym in an e-commerce clients, for example, that looks like `pants,khakis` with another line that's `pants,jeans` which of course creates an unintentional equivalence between jeans and khakis. Even when these are mixed in with true synonyms, I tend to restructure the whole thing as a taxonomy\n\nFor example, some people avoid this for example at query time by expanding the query, and expecting the \"as_distinct_terms\" behavior, which biases towards exact match\n\npants => jeans,pants,khakis\njeans => jeans,pants\nkhakis => jeans,khakis\n\nA search for pants here shows a mix of different kinds of pants (khakis and jeans roughly equal)\nA search for jeans puts jeans first (low doc freq), followed by various kinds of pants (high doc freq)\nA search for khakis puts khakis first, followed by various kinds of non-jean pants\n\nI tend to think of synonyms as hyponyms of a canonical name for an idea. So jeans for example, I might expand that to\n\nblue_jeans => blue_jeans,jeans,pants\ndenim_jeans => denim_jeans,jeans,pants\n\nWith multiple analyzer chains, I might recommend controlling how loose the search is with different analyzer chains. For example, one could see forcing a strong boost for conceptually similar items. Or limiting the semantic expansion so that blue_jeans, for example, only expands up to the jeans level.\n\nThere's quite a lot of \"it depends\". The example above presupposes that pants have a higher doc freq than jeans, which may not be the case without a similar index-time expansion. ",
            "author": "Doug Turnbull",
            "id": "comment-16277462"
        }
    ]
}