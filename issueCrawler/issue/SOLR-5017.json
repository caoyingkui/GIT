{
    "id": "SOLR-5017",
    "title": "Allow sharding based on the value of a field",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.5",
            "6.0"
        ],
        "components": [],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We should be able to create a collection where sharding is done based on the value of a given field\n\ncollections can be created with shardField=fieldName, which will be persisted in DocCollection in ZK\n\nimplicit DocRouter would look at this field instead of shard field\n\nCompositeIdDocRouter can also use this field instead of looking at the id field.",
    "attachments": {
        "SOLR-5017.patch": "https://issues.apache.org/jira/secure/attachment/12597641/SOLR-5017.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jack Krupansky",
            "id": "comment-13702141",
            "date": "2013-07-08T17:19:07+0000",
            "content": "Some clarification is needed:\n\n1. Is this simply telling SolrCloud to use a different field for the key to be sharded? With no additional semantics?\n\n2. Or, is this saying that all documents with a particular value in that field will be guaranteed to be in the same shard (e.g., so that grouping works properly)?\n\nI'm hoping it is the latter.\n\nThanks. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13702152",
            "date": "2013-07-08T17:27:11+0000",
            "content": "Jack ,I think, I got you partially. \n\nYes, docs with a same value in a field ,WILL go to the same shard\n\nIn case of 'implicit' router there is a 1:1 mapping between the field value and the shard\n\nIn case of compositeId router there wil be a n:1 mapping between the field value and the shard "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13702197",
            "date": "2013-07-08T18:08:02+0000",
            "content": "Does this proposal eliminate the need to do explicit routing in the key values?\n\nSo, instead of having to say \"my-value!key-value\" for the key value when some other field already has \"my-value\" in it, I can just leave my key as \"key-value\" and with this proposal Solr would read that other field to get \"my-value\" and use it for sharding? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13702536",
            "date": "2013-07-08T22:27:18+0000",
            "content": "Will SplitShard preserve the grouping by field value? I imagine it would, but...\n\nIn other words, if an app uses a field to preserve grouping of similar documents on the same shard, SplitShard should preserve that grouping on a split, right?\n\nAs long as the SplitShard code knows that it is supposed to used the specified alternative sharding field, things should be okay. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13702659",
            "date": "2013-07-09T00:00:11+0000",
            "content": "CompositeIdDocRouter can also use this field instead of looking at the id field.\n\nAgree - I could see by default, the compositeId router also paying attention to the _shard_ parameter (as the implicit router does).\nEven if the implicit router is configured to pay attention to a field other than _shard_ in the document, it should still use shard when looking at query parameters.\n\nThis has some downsides thought too - related to splits and how to calculate the has (store the shard param when explicitly specified as a column?  store the calculated hash as a column?)\n\nDoes this proposal eliminate the need to do explicit routing in the key values?\n\nNot sure what you mean by \"explicit routing\" but if you mean the compositeId stuff, no.  That has a lot of benefits and will remain the default. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13703039",
            "date": "2013-07-09T08:08:14+0000",
            "content": "I could see by default, the compositeId router also paying attention to the _shard_ parameter\n\nthe _shard_ parameter is the actual name of the shard. In case of compositeId router , the client is agnostic of the shard name and all that it cares about is shard.keys. What I mean to say is, the name _shard_ can be a bit confusing\n\nAs of now we don't have a plan on how to do shard splitting for 'implicit' router. Let's keep it as  TBD\n\nIn case of compositeId router , I would like to read the part before the (!) to be read from the 'shardField'. The semantics will be exactly same as it is now. Reading the value from a request parameter would mean we will need to persist it along with the document in some field .  "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13703236",
            "date": "2013-07-09T13:12:01+0000",
            "content": "Not sure what you mean by \"explicit routing\"\n\nI mean where the user has placed a prefix and \"Unable to render embedded object: File (\" in front of a key value. Granted, it isn't explicitly stating the shard, and is really simply a \"surrogate\" key value to use for sharding. Is there better terminology for the fact that they used the \") not found.\" notation?\n\nQuestion for Noble: If a shard field is specified and there is a \"!\" on a document key, which takes precedence? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13703246",
            "date": "2013-07-09T13:17:49+0000",
            "content": "if a collection is created with the shardField value, it is a required param for all docs.If the field is null the document addition fails. No more lookup for \"!\" anymore.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13703653",
            "date": "2013-07-09T19:02:58+0000",
            "content": "the shard parameter is the actual name of the shard.\n\nFor the implicit router.  For a hash based router, it should be the value that is hashed to then lookup the shard based on ranges.\n\nIn case of compositeId router , I would like to read the part before the  to be read from the 'shardField'.\n\nI think it should work simpler... shard is used as the whole value to hash on for any hash based router.\nIt's simple - if you want to have doc B have the exact same hash as doc A, then you give shard=A when adding doc B.\n\nI would like to read the part before the  to be read from the 'shardField'.\n\nPerhaps that should be a different router... compositeField rather than compositeId. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13704223",
            "date": "2013-07-10T05:28:09+0000",
            "content": "I think it should work simpler... shard is used as the whole value to hash on for any hash based router.\n\nShould the field based sharding be any less powerful than compositeId? Or do we want to have configure multiple fields like shardField=primaryShardFIeld,secondaryShardField instead of separating the values with a '/'\n\n\nPerhaps that should be a different router... compositeField rather than compositeId.\n\nToo many routers can be confusing to users. Essentially it is a hash router. The only difference is where the value is obtained for hashing. It could be from an 'id' ( which is the default) or it can be from a separate field. We probably should rename the CompositeIdRouter to HashRouter instead of having multiple routers doing slightly different things. In reality , it is not a CompositeFieldRouter, it is just a FieldHashRouter\n\nFor the implicit router. For a hash based router, it should be the value that is hashed to then lookup the shard based on ranges.\n\nI understand that. I'm worried about the name. Should we rather not use the other parameter \\'shard.keys across router names , query and update requests . It is very confusing to have these names behaving differently in different routers. \n\nI'm all for changing the param from _shard_ to \\'shard.keys' and keeping it consistent between all routers\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13704485",
            "date": "2013-07-10T12:03:59+0000",
            "content": "What can be accomplished by this that cannot be accomplished with the current syntax?\n\nWeighing in late, but scanning the comments, there's no case made for why this is a better thing than using the current ! syntax. From what I can see, simplistically it looks like putting what's on the left of the ! in its own field (not a nuanced statement....). \n\nAnd I'm neutral-to-negative on it without a compelling use-case that couldn't be handled by the current syntax, mostly from the\nperspective that I'd rather see \"one true way\" of accomplishing something than two that can get out of synch. And\nthey will. I can imagine getting shard splitting, routing and all that stuff right in one but not the other.\n\nOne place where it'll be easy to get wrong: Joel is working on routing from the client so updates go to the right leader. We'll\nhave to put this logic in that code too.\n\nI'm not sure the functionality is worth the complication, but maybe that's just because routing gives me a headache.\n\nAll of the complexifications I imagine can be addressed, but is it worth the effort? Without a compelling use-case for why I don't think so.\n\nFWIW,\nErick\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13704491",
            "date": "2013-07-10T12:14:04+0000",
            "content": "What can be accomplished by this that cannot be accomplished with the current syntax?\n\n\n\tIf I have a already working system where ids cannot be changed, I have no option with the current scheme of things .\n\tWhat if I to have a clean 'id' value which is devoid of extra information?  Should I do id.substring(id.indexOf(\"!\") everytime I use it elsewhere ?\n\n\n\nOne place where it'll be easy to get wrong....\n\n\nAFAIK everyone relies on the DocRouter to identify the right shard . If your code is using that API then your code should continue to work right\n "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13704493",
            "date": "2013-07-10T12:20:26+0000",
            "content": "Hmmm... what happens when a document is updated and the value of this field changes? The update request would need to go to both the \"new\" shard to add the document, and the \"old\" shard to delete it, right?\n\nAnd for atomic update when the shard field is updated to a value that hashes to a different shard? The existing field values need to be read from the \"old\" shard and then all values written to the new shard?\n "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13704506",
            "date": "2013-07-10T12:35:10+0000",
            "content": "there's no case made for why this is a better thing than using the current ! syntax\n\nLogically, I think it makes perfect sense to be able to declare what field should be used for \"grouping\" of documents, and that some apps want more of a functional grouping (e.g., by department or product category.) Having to manually (and forever) muck up the ID field values for routing always seemed rather odd to me. Maybe the latter has some utility on its own, but the former seems more sensible to me.\n\nAnd, then there is the issue of how to change the shard of an existing document that was, in terms I use, \"explicitly routed\", using the \"Unable to render embedded object: File (\" notation. I mean, if the ID of that document is referenced in other documents, all of those other documents would need to be manually updated as well. Before the introduction of the \") not found.\" notation, key values were completely application controlled, but with \"Unable to render embedded object: File (\", suddenly Solr interjects itself into the ID generation process. Some day... even Data Import Handler users are going to start flooding the Solr-user email list with questions about how to set and change routing and why key values containing \") not found.\" seem to be causing SolrCloud to be distributing documents to shards in an unexpected manner (because they didn't know about the \"!\" notation.) "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13704533",
            "date": "2013-07-10T13:09:32+0000",
            "content": "bq: If I have a already working system where ids cannot be changed, I have no option with the current scheme of things .\n\nDo you have such a system? Theoretically I agree. But it also seems like this change has enough edge cases that it might be better to wait and see whether there's enough pressure to move this forward before trying to anticipate problems. Premature optimization?\n\nbq: If your code is using that API then your code should continue to work right...\n\nDon't really know, I've been meaning to dive into that patch but haven't. It's on the SolrJ side, mostly I'm using it as an example of a place things can get out of synch. I'm sure there are others.\n\nbq: What if I to have a clean 'id' value which is devoid of extra information? Should I do id.substring(id.indexOf(\"!\") everytime I use it elsewhere ?\n\nYeah, that's a pain. But perhaps not as much as trying to maintain two schemes to route documents and deal with the issues that are sure to come up. Frankly I don't have a firm sense of which is better/worse, my antenna are just quivering based on introducing a feature that'll have repercussions before there's a demonstrated need. I've gotten myself into trouble too often doing that...\n\nbq: what happens when a document is updated and the value of this field changes?\n\nThis is exactly what I'm talking about, I'm afraid the edge cases will go on forever (or nearly). An N+1 kind of thing. \n\n\nAll that said, I'm not totally against the idea. In fact I kind of wish a separate \"routing field\" was the way it was implemented in the first place. But did I think to suggest it when it first started to be implemented? Nooooooo.....\n\nBut I fear at this point that having two ways of routing things around without a compelling existing use case will generate a lot of work, lots of ongoing maintenance and the effort could well be spent elsewhere in the near term.\n\nBut since I'm not volunteering to do the work, I really don't have all that much to say.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13704536",
            "date": "2013-07-10T13:12:10+0000",
            "content": "What if I to have a clean 'id' value which is devoid of extra information? Should I do id.substring(id.indexOf(\"!\") everytime I use it elsewhere ?\n\nWhy would you have to do that?  If \"!\" appears in the ID field by accident sometimes, everything still works as expected with the compositeId router - that's why it's the default.\n\nedit: Oh, I think I see what you mean... you want to use the id unchanged as a foreign key. You could always store that as a separate field too.  Anyway, I'm not arguing against using another field, but I do think it's the less common and more complex solution (given that you now need to provide that extra value everywhere). "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13704547",
            "date": "2013-07-10T13:28:47+0000",
            "content": "Do you have such a system? .....\n\nYes. I had . The entire Aol mail system already has billions of documents where id is immutable and referenced in code. While I was there I hacked solr to a field based sharding scheme. A lot of users will not have that expertise or patience\n\nDon't really know, I've been meaning to dive into that patch but haven't.\nIIRC ,  SolJ consults the DocRouter to identify the target slice/leader .If future patches need it they too should.\n\nBut I fear at this point that having two ways of routing things around\n\nWe already have multiple ways of routing things after SOLR-4221 is in place (next release will have it . Custom Sharding does not have a 'mangled id' concept as of now. It is not going to impact anyone who is already using the current scheme with compositeId. You will need to create your cluster explicitly with that option (which will be new users) . We will solve any problems as we go along\n\nPremature optimization?\n\nThis is not optimization. I'm just trying to be intuitive and user-friendly . AFAIK Almost all nosql systems do grouping on the basis of some field value .\n\nwhat happens when a document is updated and the value of this field changes?\n\nGood question. It should be dealt in exactly the same way 'id' updates are handled today  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13704548",
            "date": "2013-07-10T13:29:09+0000",
            "content": "Having to manually (and forever) muck up the ID field values for routing always seemed rather odd to me.\n\nHaving to specify extra information is what seems odd to me, and greatly complicates clients.\nSay I have a basic client that wants to do a simple get by id, or a simple delete by id.  If the id no longer contains enough information to tell what shard it's on, we need to start broadcasting gets and deletes or something. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13704561",
            "date": "2013-07-10T13:45:22+0000",
            "content": "It is very confusing to have these names behaving differently in different routers.\n\nNot sure I understand... we should definitely have the same parameters behaving in the same way across all the routers.\n_shard_ should work across all routers.  I understand the naming issue though... (the fact that shard is just the input to the router, not the actual shard name unless you're using the implicit router).  _shard_ hasn't even really been documented yet I don't think... it's possible we could change it to _routing_ or _route_ \n\nShould we rather not use the other parameter \\'shard.keys across router names , query and update requests .\n\nI think we should use the same parameter name for query requests too (i.e. deprecate \"shard.keys\") "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13704586",
            "date": "2013-07-10T13:59:26+0000",
            "content": "I think we should use the same parameter name for query requests too (i.e. deprecate \"shard.keys\")\n\nTha's it. I just wanted one parameter for routing either _shard_ or something else . lets use _route_ for all routers and deprecate shard.keys .\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13704592",
            "date": "2013-07-10T14:01:58+0000",
            "content": "Having to specify extra information is what seems odd to me, and greatly complicates clients.\n\nWe already pass extra info if the lookup is not by id. lookup by id is a small feature for a solr. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13704595",
            "date": "2013-07-10T14:05:03+0000",
            "content": "> Perhaps that should be a different router... compositeField rather than compositeId.\nToo many routers can be confusing to users. \n\nHeh - my favorite argument.  \"confusing to users\" can be trotted out in any context \nToo many options can be just as confusing... 3 routers with 5 options each vs 5 routers with 3 or whatever.  Let's talk about the best option.  If we have a good default and good documentation, confusion shouldn't enter the equation.\n\nAs far as compositeId router goes, I'm not sure I care if we create a new compositeField router or if we add more parameters / functionality to compositeId.  Giving the exact same _shard_ parameter should give the exact same hash code though - it shouldn't just be the first part of a composite id. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13704598",
            "date": "2013-07-10T14:09:48+0000",
            "content": "If the id no longer contains enough information to tell what shard it's on...\n\nGreat point. Automatic routing needs to be able to work when presented with just the ID field. An atomic update is a great example - the shard field may not be available on the client.\n\nBetter to just forever say that automatic routing needs to be based solely on the ID key value, and that if the app needs to use the value of another field for routing, they absolutely do need to use a \"composite key\" with the routing key prepended to the nominal key value.\n\nOTOH, maybe they might want to use some other subset of the key value for router, such as a product category that is a part of a SKU used as the ID key. I think the idea there is that this would be custom sharding that uses most of the logic of CompositeID routing, but just different logic for how to extract the routing key from the full ID key value.\n\nManual or custom routing is another story. There, the user can use whatever contrived \"rules\" they want. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13704608",
            "date": "2013-07-10T14:21:42+0000",
            "content": "Speaking of the the best option \n\nmy 2 cents\n\n2 routers\n\n1) A HashDocRouter\n2) An ImplicitDocRouter (or is it ExplicitRouter)\n\nBoth honors the shardField or (routeField) param . one uses the value verbatim whereas the other uses the hash of the field value\n\nHashDocRouter honors the special id format with \"!\" .\n\n _route_ param can be used and will be honored by all routers always in add/update/query/getbyid et al. HashDocRouter uses the hash of the value whereas ImplicitDocROuter uses the value verbatim "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13704614",
            "date": "2013-07-10T14:29:11+0000",
            "content": "2) An ImplicitDocRouter (or is it ExplicitRouter)\n\nIt's implicit if the target shard is implicitly defined by what shard received the update.\nIt's explicit if you give it an explicit value (which makes the name \"implicit\" kind of not-so-good at that point).  We could change the name of that too if we want (and make it so that \"implicit\" still works as an alias for back compat).\n "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13704718",
            "date": "2013-07-10T16:29:26+0000",
            "content": "ImplicitDocRouter \n\nI started referring to this as \"manual routing\", meaning that Solr cannot automatically figure out which shard a document is in unless the user manually/explicitly specifies the shard.\n\nOverall, I would say that we have this menu of routing techniques:\n\n1. Manual URL, specifying the shard URL or directing the request to the shard URL.\n2. Manual shard ID, specifying the shard ID/name as a parameter. SolrJ or the receiving node can look up the shard URL in clusterstate.\n3. Fully automatic, hashing the full, raw ID key value.\n4. Directed automatic or key-directed automatic, hashing the \"!\" prefix of the composite key value. (I called this \"explicit routing\" at one point.)\n5. Field-directed automatic, the proposal for using a non-ID field's value for the surrogate key to hash.\n\nAs far as the atomic update issue for field-directed routing, there are three choices:\n\n1. Update request includes the specified alternative (non-ID) routing field.\n2. If not present, a \"shard\" parameter would be required, specifying either the shard ID or the surrogate key value to be hashed.\n3. If neither is present, an error.\n\nThat still leaves the update issue of changing the field-directed key value. This is not just an atomic update issue - replacing the full document also has this problem, when the specified routing field value changes, which may mean that the updated document now belongs in another shard.\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13725497",
            "date": "2013-07-31T17:53:06+0000",
            "content": "Commit 1508968 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1508968 ]\n\nSOLR-4221 SOLR-4808 SOLR-5006 SOLR-5017 SOLR-4222 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13725553",
            "date": "2013-07-31T18:28:07+0000",
            "content": "Commit 1508981 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1508981 ]\n\nSOLR-4221 SOLR-4808 SOLR-5006 SOLR-5017 SOLR-4222 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13725561",
            "date": "2013-07-31T18:32:47+0000",
            "content": "The issue fixes the case of 'implicit' router only . will resolve after the same is done for compositeId router too "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13725597",
            "date": "2013-07-31T19:02:07+0000",
            "content": "It seems like there was a lot of discussion that was never resolved, and now the issue is marked as \"fixed\", with no discussion or summary of how the discussion points were addressed or resolved (or ignored!).\n\nA short summary would be nice. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13725612",
            "date": "2013-07-31T19:11:41+0000",
            "content": "the issue was not completely resolved. compositeId router still does not honor the 'routeField' attribute  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13725615",
            "date": "2013-07-31T19:17:27+0000",
            "content": "\nIt is now possible to create a collection with an extra parameter 'routeField' . 'implicit' router would look into that field for routing any document.The value of the field will be the name of the shard where it belongs to.\n\nIf the collection is created with 'routeField' other routing params are not  honored\n\nThis deprecates the 'shard.keys' parameter for routing queries in favor of a parameter called 'route' . 'shard.keys' will continue to work for another release , though\n\n\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13729366",
            "date": "2013-08-05T10:30:49+0000",
            "content": "Commit 1510420 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1510420 ]\n\nupdating CHANGES.txt regarding deprecation of shar.keys' param SOLR-5017 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13729367",
            "date": "2013-08-05T10:33:48+0000",
            "content": "Commit 1510421 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1510421 ]\n\nupdating CHANGES.txt regarding deprecation of shar.keys' param SOLR-5017 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13737766",
            "date": "2013-08-13T03:30:54+0000",
            "content": "suuports routeField in compositeId router "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13737865",
            "date": "2013-08-13T05:49:19+0000",
            "content": "Commit 1513356 from Noble Paul in branch 'dev/trunk'\n[ https://svn.apache.org/r1513356 ]\n\nSOLR-5017 support for routeField in COmpositeId router also "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13737869",
            "date": "2013-08-13T05:56:15+0000",
            "content": "Commit 1513357 from Noble Paul in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1513357 ]\n\nSOLR-5017 support for routeField in COmpositeId router also "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13737876",
            "date": "2013-08-13T06:04:46+0000",
            "content": "A parameter called 'routeField' is supported in both routers. If routeField is 'x' all documents inserted must have a value for the field 'x' .\n\nThe semantics of querying will remain same _route_ param can be used to limit down the search to a given shard (s) "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13738321",
            "date": "2013-08-13T15:03:02+0000",
            "content": "Is this feature intended for both traditional Solr sharding as well as SolrCloud?\n\nIf it is intended for SolrCloud as well, how does delete-by-id work, in the sense that the delete command does not include the field needed to determine routing? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13738375",
            "date": "2013-08-13T15:38:22+0000",
            "content": "This is only for SolrCloud \n\ndeleteById/getById would expect the param _route_ or shard.keys (deprecated) without which it will have to fan out a distributed request. it works without complaining but will be inefficient "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-13738422",
            "date": "2013-08-13T16:18:09+0000",
            "content": "Shard splitting doesn't support collections configured with a hash router and routeField. I'll put up a test and fix. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13787032",
            "date": "2013-10-05T10:18:50+0000",
            "content": "4.5 release -> bulk close "
        }
    ]
}