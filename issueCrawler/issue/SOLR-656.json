{
    "id": "SOLR-656",
    "title": "better error message when \"data/index\" is completely empty",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0"
        ],
        "components": [],
        "type": "Wish",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Solr's normal behavior is to create an \"index\" dire in the dataDir if one does not already exist, but if \"index\" does exist it is used as is, warts and all ... if the index is corrupt in some way, and Solr can't create an IndexWriter or IndexReader that error is propagated up to the user.\n\nI don't think this should change: Solr shouldn't attempt to do anything special if there is a low level problem with the index, but something that i've seen happen more then a few times is that people unwittingly \"rm index/*\" when they should \"run -r index\" and as a result Solr+Lucene gives them an error instead of just giving them an empty index\n\nwhen checking if an existing index dir exists, it would probably be worth while to add a little one line sanity test that it contains some files, and log a warning.",
    "attachments": {
        "SOLR-656.patch": "https://issues.apache.org/jira/secure/attachment/12562682/SOLR-656.patch",
        "SOLR-656-rmdir.patch": "https://issues.apache.org/jira/secure/attachment/12562693/SOLR-656-rmdir.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12872633",
            "date": "2010-05-27T22:09:37+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043767",
            "date": "2011-06-03T16:46:58+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106264",
            "date": "2011-09-16T14:50:18+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234748",
            "date": "2012-03-21T18:09:09+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13540931",
            "date": "2012-12-29T16:31:21+0000",
            "content": "As part of the 4.1 release triage (focus on Solr), I am attempting to make a patch for this.  My first attempt was at a very low level - lucene's FSDirectory.  This caused a LOT of test failures.\n\nD:\\workspace\\branch_4x\\lucene\\common-build.xml:841: There were test failures: 330 suites, 1862 tests, 5 suite-level errors, 156 errors, 21 ignored (9 assumptions)\n\nI'm trying again with SolrCore.java.  I'm not sure how to write a test for this.  Perhaps I need to init a new core, find the indexDir, delete everything in it, then reload the core. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13540948",
            "date": "2012-12-29T17:59:49+0000",
            "content": "A patch for this issue, including a unit test.  The unit test is pretty quick when it passes, but slow when it fails.\n\nPatch is against 4x, but applies to trunk with one complaint about fuzz (gnu patch on CentOS 6).\n\nNow running all tests for both branch_4x and trunk. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13540987",
            "date": "2012-12-29T20:16:46+0000",
            "content": "Patch is not working.  Running all tests on trunk (linux) results in a number of failures that probably are caused by this patch.  Running all tests on branch_4x (windows) results in failures, one of which is actually my new test - which passed earlier.\n\nWhen my new test failed, it was complaining about thread leaks.  My test approach probably needs some work, but I'm not familiar enough with the test frameworks.  I suspect that what needs to happen is that I need to lock the index directory to a known location, then make that directory and do initCore.  Optionally, I could instead initCore in a the specific directory, destroy the core completely, delete all the index files, and attempt to initCore again in the same directory.  I do not know how to go about doing this. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13540988",
            "date": "2012-12-29T20:20:55+0000",
            "content": "New patch with completely different approach:\n\nThis time there are no unit tests.  After doing everything it can to make sure that a filesystem directory should exist, does exist, and contains nothing, proceeds to remove that index directory and log a warning saying that it did so. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13540993",
            "date": "2012-12-29T20:46:46+0000",
            "content": "Update to alternate patch.\n\nAdded abstract isFSBased method to DirectoryFactory and some classes that extend it.  Used this to further guarantee that an empty directory should be removed.\n\nIf custom DF implementations extend DF directly rather than one of the better base classes, this will break them. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13541549",
            "date": "2013-01-01T01:05:14+0000",
            "content": "Shawn: thanks for looking into this, but i'm not sure any changes are really needed anymore.\n\nAt the time i created this issue, you would get a really ugly and confusing error message if you stoped solr, ran \"rm dataDir/index/*\" and left the index directory empty, and then restarted solr.\n\nit appears that at some point in the past 5 years, the underlying behavior of lucene has changed, such that an \"empty\" Directory is now acceptable, and that same behavior works fine \u2013 solr/lucene happily adds new segments file to the empty directory on startup and you can start indexing documents.\n\nSo unless you're seeing some error i'm not (maybe this only works cleanly with the default DirectoryFactory?) i think we can resolve this as not a problem "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13541553",
            "date": "2013-01-01T01:23:27+0000",
            "content": "I did not actually try it before making the patch.\n\nI know that I have run into problems with Solr starting when index exists but is empty, but now I don't remember whether that was on 1.4.x or 3.x.  "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13541556",
            "date": "2013-01-01T01:34:58+0000",
            "content": "What do you think about the \"isFSBased()\" idea in the patch on DirectoryFactory?  I know that nothing included in Solr/Lucene would have use for it now, but in the future a Directory might be created that uses persistent but not-filesystem-based storage (Hadoop, MongoDB, Swift, etc.).  That probably needs its own issue - just asking whether I should go ahead and make one, and whether a matching issue in Lucene might be a good idea. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13546044",
            "date": "2013-01-07T17:08:28+0000",
            "content": "Solr 3.6 still blows up (saying it can't find the segments file) when index exists but is empty \u2013 I was helping someone in #solr yesterday and discovered that.  Solr 4.1-SNAPSHOT (checked out sometime yesterday) is perfectly fine with an empty index directory, it happily makes a new index and proceeds without a problem.  My patch is unnecessary on 4x, all that remains for this issue is to decide whether the 3.6 behavior is considered a bug.\n\nI am still curious whether adding isFSBased() to DirectoryFactory is something that holds interest.  The patch is ready - all that you'd have to do is remove the part that wasn't necessary for this issue. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13555394",
            "date": "2013-01-16T19:55:20+0000",
            "content": "My patch is unnecessary on 4x, all that remains for this issue is to decide whether the 3.6 behavior is considered a bug.\n\ngiven that doing an \"rm index/*\" has never been supported, and the only reason this issue was opened was to try and provide a better error message, i don't think we need to worry about fixing this in a future 3.6.x release.\n\nI am still curious whether adding isFSBased() to DirectoryFactory is something that holds interest. The patch is ready - all that you'd have to do is remove the part that wasn't necessary for this issue.\n\nI'm not sure that i grasp the value/use of a method like that \u2013 i would suggesting bring up the usecases you have in mind on the dev@lucene "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654221",
            "date": "2013-05-10T10:34:26+0000",
            "content": "Closed after release. "
        }
    ]
}