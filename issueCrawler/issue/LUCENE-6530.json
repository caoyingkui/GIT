{
    "id": "LUCENE-6530",
    "title": "Use Java 7 ProcessBuilder.inheritIO() instead of own ThreadPumper",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "In some tests wie spawn separate processes (TestIndexWriterOnJRECrash and Solr's IPTables). To capture stdin/stdout/stderr we spawn several threads that pump those to stdout/stderr.\n\nSince Java 7 there is ProcessBuilder.inheritIO() that does this for us without any additional threads. We should use this instead. Fix is easy, just remove some stuff \n\nI did the same already for my Codec classloader deadlock test, so this is just a followup for the other tests.\n\nPatch is attached and can be committed to trunk and 5.x.",
    "attachments": {
        "LUCENE-6530.patch": "https://issues.apache.org/jira/secure/attachment/12738236/LUCENE-6530.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14576180",
            "author": "Uwe Schindler",
            "date": "2015-06-07T10:33:17+0000",
            "content": "Simple patch with lots of code removal  "
        },
        {
            "id": "comment-14576183",
            "author": "Uwe Schindler",
            "date": "2015-06-07T10:43:33+0000",
            "content": "This is a nice cleanup, but has one backside: The process output is directly piped to stderr/stdout, so Junit4 cannot intercept it. So we should decide if this is a problem. The JRE crash indexwriter now shows the output because the JUnit4 runner tells about \"unexpected stderr/stdout output\".\n\nSo we should decide if we want the simplier code without manual pumping threads or keep the current code. "
        },
        {
            "id": "comment-14576264",
            "author": "Uwe Schindler",
            "date": "2015-06-07T14:37:08+0000",
            "content": "I cleaned up the patch.\n\nI removed the inheritIO from the crushing JRE tester (I just cleaned up the code a bit for Java 7). I don't think its a good idea to have the crush message printed to stderr, so it gets visible. You only want this while debugging.\n\nBut I simplified the code for Solr:\n\n\tthe iptables stuff only produces outbput if its broken. So inheritIO is fine (lots of code removed). I also added check for exit code, so user gets error if enabling iptables but its not correctly setup (like missing chmod u+s)\n\tthe mapreduce stuff was removed completely, because this was not working at all and somehow useless.\n\n "
        },
        {
            "id": "comment-14576314",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T15:49:12+0000",
            "content": "Commit 1684040 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1684040 ]\n\nLUCENE-6530: Refactoring: Simplify ProcessBuilder code at various places "
        },
        {
            "id": "comment-14576316",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T15:52:10+0000",
            "content": "Commit 1684041 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684041 ]\n\nMerged revision(s) 1684040 from lucene/dev/trunk:\nLUCENE-6530: Refactoring: Simplify ProcessBuilder code at various places "
        },
        {
            "id": "comment-14576334",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T16:43:09+0000",
            "content": "Commit 1684045 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1684045 ]\n\nLUCENE-6530: Fix iptables helper (was broken because of more strict error checking, sorry!). I tested it on my linux box, works fine! "
        },
        {
            "id": "comment-14576335",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T16:44:32+0000",
            "content": "Commit 1684046 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684046 ]\n\nMerged revision(s) 1684045 from lucene/dev/trunk:\nLUCENE-6530: Fix iptables helper (was broken because of more strict error checking, sorry!). I tested it on my linux box, works fine! "
        },
        {
            "id": "comment-14576386",
            "author": "Dawid Weiss",
            "date": "2015-06-07T19:10:32+0000",
            "content": "> This is a nice cleanup, but has one backside: The process output is directly piped to stderr/stdout, so Junit4 cannot intercept it.\n\nExactly. This is inheriting all process descriptors. I'd rather have it pump to stderr/stdout (or some internal byte array to verify the subprocess status?). "
        },
        {
            "id": "comment-14576394",
            "author": "Uwe Schindler",
            "date": "2015-06-07T19:23:11+0000",
            "content": "Exactly. This is inheriting all process descriptors. I'd rather have it pump to stderr/stdout (or some internal byte array to verify the subprocess status?).\n\nAnd because of this, I did not change it.  "
        },
        {
            "id": "comment-14576399",
            "author": "Dawid Weiss",
            "date": "2015-06-07T19:33:47+0000",
            "content": "Thanks Uwe. "
        },
        {
            "id": "comment-14576418",
            "author": "Uwe Schindler",
            "date": "2015-06-07T20:09:06+0000",
            "content": "I opened this issue because of lots of code duplication with this thread pumper class and I had the feeling that the ProcessBuilder.Redirect functionality of Java 7 internally pumps to System.out and System.err - but this is not fully true; it just looks the same because it works on a lower level: For simple cases the \"inheriting process descriptors\" is perfectly fine. So the code that executes iptables in Solr (to block ports and \"emulate broken network connections\") does not produce any output, and if output is generated - it's an error and the exit code != 0 (this is checked now on Solr's iptables test support).\n\nThe JRE Crush test was just cleaned up, but it still consumes the streams and pumps them (but only if VERBOSE=true).\n\nI would with that Java would have a ProcessBuilder$Redirect.to(OutputStream stream) static method... Because this would simplify a lot. And also if Java would allow to pass java.nio.files.Path to ProcessBuilder$Redirect instead of java.io.File which violates forbidden-apis (for in/out/err and CWD). The current \"pumpers\" are just stupid. Instead of having only an InputStream to consume stdout of process it would be nice to pass an open OutputStream to the Redirect class and the process actively pushs its output to the given stream, so no pumper thread would be needed (it could internally be one, depending on operating system)... "
        },
        {
            "id": "comment-14576450",
            "author": "Dawid Weiss",
            "date": "2015-06-07T21:43:35+0000",
            "content": "> The current \"pumpers\" are just stupid. Instead of having only an InputStream to consume stdout of process it would be nice to pass an open OutputStream to the Redirect class and the process actively pushs [...]\n\nIt's a separate process... the connection between the two is an interprocess pipe, so you need an action on both sides (write/read) to fill or clean the pipe's buffer. Sure, it could be implemented as an internal thread, but I think receiving an inputstream to a pipe is just fine (from a standpoint of somebody who did some low-level interprocess programming, at least). "
        },
        {
            "id": "comment-14576460",
            "author": "Uwe Schindler",
            "date": "2015-06-07T21:57:00+0000",
            "content": "so you need an action on both sides (write/read) to fill or clean the pipe's buffer.\n\nI just wonder how the Redirect#to(File out) works internally. Why is it only File (and not NIO.2 Path), and why not simply an OutputStream. From my own knowledge about C, you still need some pumping unless you can connect the file handles directly after forking (which is what they may do). The whole API is just inconsistent! "
        },
        {
            "id": "comment-14576673",
            "author": "Dawid Weiss",
            "date": "2015-06-08T06:56:51+0000",
            "content": "Well, it can't be an output stream because then you could redirect within-process (to a byte array, for example). The Redirect.to(File) works by passing raw file descriptors (both in unix and in Windows) to a subprocess when it is forked (UNIXProcess_md.c makes an interesting reading, but all of ProcessBuilder is interesting, especially comments...).\n\n            case SOLARIS:\n                // There is a risk that pid will be recycled, causing us to\n                // kill the wrong process!  So we only terminate processes\n                // that appear to still be running.  Even with this check,\n                // there is an unavoidable race condition here, but the window\n                // is very small, and OSes try hard to not recycle pids too\n                // soon, so this is quite safe.\n\nI never found process builder to be quite what I needed, to be honest. For example shell escaping never worked for me too well. "
        },
        {
            "id": "comment-14576687",
            "author": "Uwe Schindler",
            "date": "2015-06-08T07:17:24+0000",
            "content": "I never found process builder to be quite what I needed, to be honest.\n\nSame here. I just think that you might get it better.\n\nWell, it can't be an output stream because then you could redirect within-process (to a byte array, for example). \n\nIt could be if it would do \"the right thing\" internally (spawn a thread that copies stuff like our pumper). The current API is just inconsistent and \"too low level\" for a real Java API - although it used fluent style from the beginning!\n\nI cleaned up the code a bit and removed useless stuff. The issue did not do what it said initially, but was still worth a try! "
        },
        {
            "id": "comment-14576692",
            "author": "Uwe Schindler",
            "date": "2015-06-08T07:23:01+0000",
            "content": "// There is a risk that pid will be recycled, causing us to kill the wrong process! \n\nVery funny. I always had in mind, that process IDs are not recycled if you don't call waitpid on the OS level  Maybe there is just some state missing in UNIXProcess class! If you don't call waitpid and react to SIGCHLD signal handler it will stay alive in the process list as \"zombie\"... I assume Java might kill the process although it got SIGCHLD before! Maybe Slowlaris is different and does not know Zombie processes  "
        },
        {
            "id": "comment-14576698",
            "author": "Dawid Weiss",
            "date": "2015-06-08T07:36:36+0000",
            "content": "Maybe Slowlaris is different and does not know Zombie processes \n\nLife has a sense of irony because Solaris is now a Zombie OS (once Sun has been taken over by Oracle and Oracle doesn't seem to know what to do with it). "
        },
        {
            "id": "comment-14713292",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:20+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}