{
    "id": "SOLR-11782",
    "title": "LatchWatcher.await doesn\u2019t protect against spurious wakeup",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I noticed that LatchWatcher.await does:\n\npublic void await(long timeout) throws InterruptedException {\n      synchronized (lock) {\n        if (this.event != null) return;\n        lock.wait(timeout);\n      }\n    }\n\n\nwhile the recommendation of lock.wait is to check the wait condition even after the method returns in case of spurious wakeup. lock is a private local field to which notifyAll is called only after a zk event is being handled. I think we should check the await method to something like:\n\n\npublic void await(long timeout) throws InterruptedException {\n      assert timeout > 0;\n      long timeoutTime = System.currentTimeMillis() + timeout;\n      synchronized (lock) {\n        while (this.event == null) {\n          long nextTimeout = timeoutTime - System.currentTimeMillis();\n          if (nextTimeout <= 0) {\n            return;\n          }\n          lock.wait(nextTimeout);\n        }\n      }\n    }",
    "attachments": {
        "SOLR-11782.patch": "https://issues.apache.org/jira/secure/attachment/12902958/SOLR-11782.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-20T15:51:08+0000",
            "content": "Please use System.nanoTime() for measuring elapsed time, which is not affected by possible clock changes.  Otherwise, +1. ",
            "author": "David Smiley",
            "id": "comment-16298660"
        },
        {
            "date": "2017-12-20T23:46:19+0000",
            "content": "Patch using System.nanoTime() and added a test. Also:\n\n\tremoved unused constructors\n\tmodified the only use of await in the current code to keep the lock Object private\n\n ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16299270"
        },
        {
            "date": "2017-12-21T10:37:05+0000",
            "content": "Not to be picky, but it'd be much nicer to use the Lock/Condition from the JDK; these methods have a nicer implementation of timed waiting. The patch is fine though. ",
            "author": "Dawid Weiss",
            "id": "comment-16299846"
        },
        {
            "date": "2017-12-21T18:43:27+0000",
            "content": "Dawid Weiss how is Lock/Condition nicer for timed waiting than the corresponding Object methods?  Some of the extra \"await\" methods on Condition are nice from a convenience point of view (e.g. no explicit TimeUnit conversion necessary); is that all you mean?  I don't like that awaitUntil accepts a  Date and internally uses System.currentTimeMillis. ",
            "author": "David Smiley",
            "id": "comment-16300420"
        },
        {
            "date": "2017-12-21T18:50:00+0000",
            "content": "Patch using Lock/Condition ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16300429"
        },
        {
            "date": "2017-12-21T22:44:20+0000",
            "content": "David Smiley Condition has a fine-grained awaitNanos (and arbitrary time unit await, converted to nanos). If you glimpse at the openjdk code implementation of these you'll see what I mean by fine-grained (lock parking, etc.). The method accepting Date is indeed using currentTimeMillis but this isn't what I was referring to.\n\nI personally like the latest patch more (thanks Tom\u00e1s Fern\u00e1ndez L\u00f6bbe!), but I'll leave it for you guys to decide. One nitpick \u2013\n\nlong timeoutNanos = TimeUnit.MILLISECONDS.toNanos(timeoutMs);\n\n\nyou could simply use await(millis, TimeUnit.MILLIS); the conversion to nanos is then internally done anyway. ",
            "author": "Dawid Weiss",
            "id": "comment-16300675"
        },
        {
            "date": "2018-01-09T06:08:38+0000",
            "content": "Thanks for the hints Dawid Weiss, but, await(millis, TimeUnit.MILLIS); doesn't return the remaining time, so if I use that method I need to calculate that myself like in the previous patch, is that what you suggest? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16317802"
        },
        {
            "date": "2018-01-26T18:36:42+0000",
            "content": "Commit 56f3f6d9484dd353ac50d47717c872ca9dac16ea in lucene-solr's branch refs/heads/master from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=56f3f6d ]\n\nSOLR-11782: Refactor LatchWatcher.await to protect against spurious wakeup ",
            "author": "ASF subversion and git services",
            "id": "comment-16341407"
        },
        {
            "date": "2018-01-26T18:37:17+0000",
            "content": "Commit a29c2915c79641fc117cc56044d07134f26e8fd7 in lucene-solr's branch refs/heads/branch_7x from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a29c291 ]\n\nSOLR-11782: Refactor LatchWatcher.await to protect against spurious wakeup ",
            "author": "ASF subversion and git services",
            "id": "comment-16341409"
        },
        {
            "date": "2018-01-26T20:51:00+0000",
            "content": "That method already protects against spurious wakeups, so no need to compute anything? \"Causes the current thread to wait until it is signalled or interrupted, or the specified waiting time elapses.\" ",
            "author": "Dawid Weiss",
            "id": "comment-16341577"
        },
        {
            "date": "2018-01-26T22:07:07+0000",
            "content": "I see. I thought that could be the case, but wasn't sure, since the javadocs don't say that explicitly, and they also say:\n\nThis method is behaviorally equivalent to: <pre> {@code awaitNanos(unit.toNanos(time)) > 0}</pre>\n\n\nThis makes the await method simpler, I can just do:\n\npublic void await(long timeoutMs) throws InterruptedException {\n      lock.lock();\n      try {\n        if (this.event != null) {\n          return;\n        }\n        eventReceived.await(timeoutMs, TimeUnit.MILLISECONDS);\n      } finally {\n        lock.unlock();\n      }\n    }\n\n ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16341665"
        },
        {
            "date": "2018-01-30T22:32:54+0000",
            "content": "Commit b310514becf93ff3a9eaf5bd7af632b591b22a80 in lucene-solr's branch refs/heads/master from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b310514 ]\n\nSOLR-11782: Use await(millis, TimeUnit.MILLIS) in LatchWatcher.await ",
            "author": "ASF subversion and git services",
            "id": "comment-16345927"
        },
        {
            "date": "2018-01-30T22:33:23+0000",
            "content": "Commit c0da6ddb4a196c50cea9996c3944963efb966e28 in lucene-solr's branch refs/heads/branch_7x from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c0da6dd ]\n\nSOLR-11782: Use await(millis, TimeUnit.MILLIS) in LatchWatcher.await ",
            "author": "ASF subversion and git services",
            "id": "comment-16345928"
        }
    ]
}