{
    "id": "SOLR-9525",
    "title": "split() function for streaming",
    "details": {
        "components": [],
        "type": "Wish",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "This is the original description I posted on solr-user:\n\nRead this article and thought it could be interesting as a way to do ingestion:\n\nhttps://dzone.com/articles/solr-streaming-expressions-for-collection-auto-upd-1\n\nExample from the article:\n\ndaemon(id=\"12345\",\n\n runInterval=\"60000\",\n\n update(users,\n\n batchSize=10,\n\n jdbc(connection=\"jdbc:mysql://localhost/users?user=root&password=solr\", sql=\"SELECT id, name FROM users\", sort=\"id asc\", driver=\"com.mysql.jdbc.Driver\")\n\n)\n\nWhat's the best way to handle a multivalue field using this API? Is there a way to tokenize something returned in a database field?\n\nJoel Bernstein responded with this:\n\nUnfortunately there currently isn't a way to split a field. But this would\nbe nice functionality to add.\n\nThe approach would be to an add a split operation that would be used by the\nselect() function. It would look like this:\n\nselect(jdbc(...), split(fieldA, delim=\",\"), ...)\n\nThis would make a good jira issue.\n\n\nSo the TL;DR version is that I need the ability to specify in such a streaming operation certain fields to tokenize into multivalue fields. In one schema I may have to support, there are probably a half a dozen such fields.\n\nPerhaps I am missing a feature here, but until this is done it looks like this new capability cannot handle multivalue fields until something like this is in place.",
    "attachments": {
        "SOLR-9525.patch": "https://issues.apache.org/jira/secure/attachment/12833489/SOLR-9525.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-15T04:27:03+0000",
            "author": "Dennis Gove",
            "content": "Full implementation and tests for a split operation. Because it's implemented as an operation this will work as part of a select(....) stream.\n\nValid expression forms:\n\n\nsplit(fieldA, on=\",\") // replace value of fieldA with List<String> of split values\nsplit(fieldA, on=\",\", as=\"fieldB\") // splits value of fieldA into List<String> and puts into fieldB\n\n ",
            "id": "comment-15577338"
        }
    ]
}