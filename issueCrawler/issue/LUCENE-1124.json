{
    "id": "LUCENE-1124",
    "title": "short circuit FuzzyQuery.rewrite when input token length is small compared to minSimilarity",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [
            "core/query/scoring"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9.1",
            "3.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I found this (unreplied to) email floating around in my Lucene folder from during the holidays...\n\n\nFrom: Timo Nentwig\nTo: java-dev\nSubject: Fuzzy makes no sense for short tokens\nDate: Mon, 31 Dec 2007 16:01:11 +0100\nMessage-Id: <200712311601.12255.lucene@nitwit.de>\n\nHi!\n\nit generally makes no sense to search fuzzy for short tokens because changing\neven only a single character of course already results in a high edit\ndistance. So it actually only makes sense in this case:\n\n           if( token.length() > 1f / (1f - minSimilarity) )\n\nE.g. changing one character in a 3-letter token (foo) results in an edit\ndistance of 0.6. And if minSimilarity (which is by default: 0.5 :-) is higher\nwe can save all the expensive rewrite() logic.\n\n\n\nI don't know much about FuzzyQueries, but this reasoning seems sound ... FuzzyQuery.rewrite should be able to completely skip all TermEnumeration in the event that the input token is shorter then some simple math on the minSimilarity.  (i'm not smart enough to be certain that the math above is right however ... it's been a while since i looked at Levenstein distances ... tests needed)",
    "attachments": {
        "LUCENE-1124.patch": "https://issues.apache.org/jira/secure/attachment/12388381/LUCENE-1124.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-01-09T05:57:20+0000",
            "content": "This makes sense, Timo.  Could you please attach a patch + a simple unit test? ",
            "author": "Otis Gospodnetic",
            "id": "comment-12557144"
        },
        {
            "date": "2008-08-17T14:35:57+0000",
            "content": "This optimization is correct. Highlights some interesting things about fuzzy query as well i.e. if you put a minsim of 0.9, your query term has to be over 10 chars to have any hope of getting a match. For the default of 0.5 its 2 chars, so in the common case the optimization doesn't do much good, and you do have to pay for the check every time no matter what. For larger minsim values though, this will turn a lot of fuzz queries into no ops.\n\n\n\tMark\n\n ",
            "author": "Mark Miller",
            "id": "comment-12623195"
        },
        {
            "date": "2008-08-17T14:44:38+0000",
            "content": "Computing the needed term length in the constructor is probably better. ",
            "author": "Mark Miller",
            "id": "comment-12623197"
        },
        {
            "date": "2008-08-25T19:26:47+0000",
            "content": "I don't deal with FuzzyQueries much, but skimming this issue it seems to touch on a lot of hte same things that spawned the creation of the \"mm\" syntax for specifying the \"minNumberShouldMatch\" value on BooleanQueries in the Solr dismax query parser...\n\nhttp://lucene.apache.org/solr/api/org/apache/solr/util/doc-files/min-should-match.html\n\n...perhaps something similar could be used to allow people to specify simpel expressions for dictating the \"fuzzyiness\" of short input vs medium length input, vs long input. ",
            "author": "Hoss Man",
            "id": "comment-12625476"
        },
        {
            "date": "2009-01-04T15:35:42+0000",
            "content": "Updated to trunk.\n\nIm going to commit in few days if no one objects. ",
            "author": "Mark Miller",
            "id": "comment-12660585"
        },
        {
            "date": "2009-01-18T18:33:13+0000",
            "content": "Thanks! Committed. ",
            "author": "Mark Miller",
            "id": "comment-12664992"
        },
        {
            "date": "2009-10-16T16:29:31+0000",
            "content": "This fix breaks the case when the exact term is present in the index. ",
            "author": "Michael McCandless",
            "id": "comment-12766588"
        },
        {
            "date": "2009-10-16T16:31:12+0000",
            "content": "Attach patch (based on 2.9) showing the bug, along with the fix.  Instead of rewriting to empty BooleanQuery when prefix term is not long enough, I rewrite to TermQuery with that prefix.  This way the exact term matches.\n\nI'll commit shortly to trunk & 2.9.x. ",
            "author": "Michael McCandless",
            "id": "comment-12766592"
        },
        {
            "date": "2009-11-07T14:57:29+0000",
            "content": "Bulk close all 2.9.1 issues. ",
            "author": "Michael McCandless",
            "id": "comment-12774608"
        }
    ]
}