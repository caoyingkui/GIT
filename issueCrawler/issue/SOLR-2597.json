{
    "id": "SOLR-2597",
    "title": "XmlCharFilter",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "This CharFilter processes incoming XML using the Woodstox parser, stripping all non-text content and remembering offsets, just like HTMLCharFilter, but respecting XML conventions like XML entities defined in a DTD.  XmlCharFilter also provides the ability to exclude (and include) the content of certain named elements.\n\nIn order to compute character offsets properly when mixed line termination styles are present (\\r, \\r\\n), or when XML character entities (<, \", &) are present, we require a newer version of Woodstox (4.1.1) than is currently in solr/lib.  The earlier versions of the parser could not report these entity events, so we couldn't tell the difference between \"<\" and \"<\" and the offsets could be wrong.  The upgraded version is in the patch.",
    "attachments": {
        "SOLR-2597.patch": "https://issues.apache.org/jira/secure/attachment/12482734/SOLR-2597.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mike Sokolov",
            "id": "comment-13050136",
            "date": "2011-06-15T23:05:05+0000",
            "content": "I tried to include the upgraded Woodstox jars, but I don't think I figured how to put binaries in the patch actually.  What's needed are: http://repository.codehaus.org/org/codehaus/woodstox/woodstox-core-asl/4.1.1/woodstox-core-asl-4.1.1.jar and http://repository.codehaus.org/org/codehaus/woodstox/stax2-api/3.1.1/stax2-api-3.1.1.jar\nwhich replace the existing wstx-asl-xxx.jar.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13050184",
            "date": "2011-06-16T02:09:56+0000",
            "content": "Mike: thanks for the patch!\n\nas Koji mentioned on the mailing list, might want to consider naming this XmlStripCharFilter ... that was my first opinion, but reading the docs the \"include\" and \"exclude\" options definitely make it a bit more generic, so i'm leaning towards the opinion that XmlCharFilter is better.\n\n(there's an argument to be made that we should have an XmlStripCharFilter that only removes pi/comments/whitespace and resolves entities, and then a distinct XmlTagCharFilter that does the include/exclude \u2013 but i'm guessing that would be less efficient since this makes it possible to do in one pass, and anyone who wants include/exclude at the \"tag\" level is almost certainly going to want the striping/entities as well)\n\nskiming the patch i'm +1 except for the \"new Random\" in the test case ... if you take a look at the existing test cases you'll see how you can hook into the solr test framework to get random values that are consistent with a global seed \u2013 that way if a test fails, it will report which seed was used and people can reproduce it using system properties.\n\nwould also be nice to have a test of the Factory (using a schema.xml declaration) but that's not nearly as important.\n\nand of course: would be great if \"the xml policeman\" uwe could review.\n\nI tried to include the upgraded Woodstox jars, but I don't think I figured how to put binaries in the patch actually.\n\nit's not possible, so don't worry about it.  the important thing is noting in a comment (like you did) exactly what new/upgraded jars are needed. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13050189",
            "date": "2011-06-16T02:34:46+0000",
            "content": "just one comment: taking a look at the patch, it currently won't compile because the analysis module has no dependencies and thus no woodstox or whatever.\n(but, thanks for trying to integrate it here!!!)\n\nOne step would be, rather than have this thing static, can we just have the ctors to this thing take a general XMLInputFactory instead, e.g.\n\npublic XmlCharFilter (CharStream reader, XMLInputFactory inputFactory) {\n\n\n\nThe corresponding Solr CharFilterFactory could then configure it with all the woodstox-specific parameters.\nBut, this still wouldn't solve the issue that all of lucene and modules are on java5 (and it looks like this uses java6-specific APIs).\n\nI don't think it makes sense to block the patch for these issues, so one workaround would be to just add it to Solr-only.\nIf/when we ever move to java 6 in lucene we could then move it into the analysis module.\nAnother option would be if the XML policeman knows some workaround (sorry, not my thing). "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13050370",
            "date": "2011-06-16T12:08:45+0000",
            "content": "OK - I can extend LuceneTestCase, use its random, add can certainly a test for the Factory.\n\nI'm not sure what the right package for this code is; working in Eclipse of course, all the jars get mushed into one giant classpath.  I guess I should build w/ant to see the dependency issues?  But it does sound as if it needs to move somewhere where solr/lib contents can be a dependent.\n\nApparently there is another jar you can get (http://woodstox.codehaus.org/stax-api-1.0.1.jar) to provide the javax.xml.stream package (StaX) for Java 5, but it doesn't sound as if it would be worth the trouble if this moves into solr land - is that right, can we rely on Java 6 there? \n\nI agree that having a static parser is distasteful, but it's a performance optimization.  It tends to be expensive to instantiate these parsers.  I'm not clear on what the object lifecycle for the XmlCharFilter is exactly - Robert are you saying the factory is long-lived, but the filter is not? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13050406",
            "date": "2011-06-16T13:27:15+0000",
            "content": "yes, the factories are long-lived and do expensive things up-front to configure themselves (parsing files etc) "
        },
        {
            "author": "Mike Sokolov",
            "id": "comment-13050873",
            "date": "2011-06-17T02:42:56+0000",
            "content": "Updated patch addresses (most of) Robert and Hoss' comments (thanks for the speedy review!):\n\nTest now uses the random in the test framework\n\nI added a test for the factory (actually all the tests now use the factory since it is now used to create the parser), but I haven't plumbed this all the way through to a schema declaration. \n\nMoved to org.apache.solr.analysis: I don't know if this is the right place for this, but at least it should resolve any jar and java 1.6 dependency problems - I think? - at least I can compile and run the tests from both eclipse and ant command line although I'm not sure what that proves exactly.\n\nThe parser is now created in the factory rather than being maintained as a static in the reader class. "
        }
    ]
}