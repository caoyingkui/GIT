{
    "id": "SOLR-5725",
    "title": "Efficient facets without counts for enum method",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "6.3",
            "7.0"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "UPD: Specification\nTo cap facet counts by 1 specify facet.exists=true. It can be used with facet.method=enum or when it's omitted. It can be used only on non-trie fields i.e. strings. It may speed up facet counting on large indices and/or high-cardinality facet values..  \n\nShot version:\nThis improves performance for facet.method=enum when it's enough to know that facet count>0, for example when you it's when you dynamically populate filters on search form. New method checks if two bitsets intersect instead of counting intersection size.\n\nLong version:\nWe have a dataset containing hundreds of millions of records, we facet by dozens of fields with many of facet-excludes and have relatively small number of unique values in fields, around thousands.\nBefore executing search, users work with \"advanced search\" form, our  goal is to populate dozens of filters with values which are applicable with other selected values, so basically this is a use case for facets with mincount=1, but without need in actual counts.\n\nOur performance tests showed that facet.method=enum works much better than fc\\fcs, probably due to a specific ratio of \"docset\"\\\"unique terms count\". For example average execution of query time with method fc=1500ms, fcs=2600ms and with enum=280ms. Profiling indicated the majority time for enum was spent on intersecting docsets.\n\nHers's a patch that introduces an extension to facet calculation for method=enum. Basically it uses docSetA.intersects(docSetB) instead of docSetA. intersectionSize (docSetB).\n\nAs a result we were able to reduce our average query time from 280ms to 60ms.",
    "attachments": {
        "facet.limit=0&facet.missing=true discrepancy between cloud and non-distr.txt": "https://issues.apache.org/jira/secure/attachment/12826988/facet.limit%3D0%26facet.missing%3Dtrue%20discrepancy%20between%20cloud%20and%20non-distr.txt",
        "SOLR-5725.patch": "https://issues.apache.org/jira/secure/attachment/12628860/SOLR-5725.patch",
        "SOLR-5725-5x.patch": "https://issues.apache.org/jira/secure/attachment/12693096/SOLR-5725-5x.patch",
        "SOLR-5725-master.patch": "https://issues.apache.org/jira/secure/attachment/12824555/SOLR-5725-master.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Alexey Kozhemiakin",
            "id": "comment-13900764",
            "date": "2014-02-13T21:41:25+0000",
            "content": "Draft version of patch attached. Tests and refined names of method and params will follow soon.\n\nPatched checked on 4.6 "
        },
        {
            "author": "Sebastian Koziel",
            "id": "comment-14282516",
            "date": "2015-01-19T13:54:27+0000",
            "content": "New patch checked on branch 5x.\n\nThe faceting method is called 'intersect' as it's based on intersection of docsSets. There are also tests added.\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15409262",
            "date": "2016-08-05T09:57:17+0000",
            "content": "Hello, I skim through the patch. Generally it's ok, here are some notes:\n\n\tas far the proposed method is an optimization of enum, it's reasonable to name it starting with it, eg enumprobing;\n\tit's preferable to avoid code diverging, instead of introducing SimpleFacets.getFacetTermIntersection() it's better to introduce conditional code branches (yep, this is sad) into getFacetTermEnumCounts().\n\timplementation should be consistent, thus it's worth to implement the similar idea in else branch of {{if (df >= minDfFilterCache) }}\n\tit should be resilient for other parameter, eg it should throw an exception if combined with mincount=2 or more\n\twhen merge facet from shards we need to cap them by 1, otherwise it will flip from 1 to number of shards\n\tthe test case is beefy enough, but it's also necessary to include new method into existing regression tests with amending asserts, yep. it's pain.\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-15410415",
            "date": "2016-08-06T02:54:44+0000",
            "content": "Cool feature.  \n\nAs I've been looking at the JSON Facets API recently... I'm reminded it's sad we have 2 main facet impls... sigh "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15411959",
            "date": "2016-08-08T15:35:46+0000",
            "content": "Yep, it's not a joy, for sure. Do you prefer to add this algorithm staright into json.facets only?   "
        },
        {
            "author": "David Smiley",
            "id": "comment-15412188",
            "date": "2016-08-08T18:07:02+0000",
            "content": "Do you prefer to add this algorithm staright into json.facets only?\n\nI'd \"prefer\" that but I'm definitely not standing in the way of any progress for our classic/standard facets impl.  Ideally this new capability will be added to JSON-Facets too.  BTW the pertinent issue is: SOLR-7296 "
        },
        {
            "author": "Radoslaw Zielinski",
            "id": "comment-15428033",
            "date": "2016-08-19T11:39:55+0000",
            "content": "I've altered the patch to be applicable on the current master branch. I had to do this by hand because there were to many changes. \n\nI've applied Mikhail suggestions as well. Can you please look at this?\n\nWhat is done:\n\n\trenamed the faceting method to enumprobing\n\tswitched to conditional code branching inside getFacetTermEnumCounts() method\n\tcovered the else branch of {{if (df >= minDfFilterCache) }}\n\tthrow an exception if combined with mincount=2 or more\n\thandled per field faceting type setting\n\thandled distributed environment\n\tupdated/added test to cover more use cases\n\n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15442160",
            "date": "2016-08-27T20:08:10+0000",
            "content": "squashed commits, tweaked tests - especially TestRandomFaceting for facet.sort=counts with this method it's pain. \nI will work on it, mostly checking new tests and case w/o filterCache (facet.enum.cache.minDf>0).\nColleagues, please confirm that you are happy to have a new facet.method=enumprobing, otherwise chime in!  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15445878",
            "date": "2016-08-29T13:28:16+0000",
            "content": "new patch with better distributed search coverage.\nhowever it's worth to be considered for moving to SolrCloudTestCase like it's suggested at SOLR-9065. TBC "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15448891",
            "date": "2016-08-30T12:31:47+0000",
            "content": "better distributed support with tests. I'm still considering SolrCloudTestCase.\n\nOpinions? Do you think it's ready to go?  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-15448980",
            "date": "2016-08-30T13:15:08+0000",
            "content": "enumprobing is a strange name, and doesn't convey the fact that this is the first \"method\" of faceting that actually doesn't calculate counts.\nIdeas for better names:\n\n\tfacet.method=nonzero\n\tfacet.method=exists\n\tfacet.method=matches\n\n\n\nI don't see any description of the proposed output format, but I'll guess that it's the same as normal facet.field, but every included count is set to \"1\"?  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-15449060",
            "date": "2016-08-30T13:48:13+0000",
            "content": "Thinking about how we would expose this in the JSON Facet API, I suppose it would be\nmethod=exists (or \"matches\", or whatever name we pick) in a facet field block... and the output format would be the same (but counts would not be accurate).\nIt would only be an execution hint and would be ignored if not applicable (e.g. if one is sorting by something else and the optimization no longer makes sense). "
        },
        {
            "author": "David Smiley",
            "id": "comment-15449079",
            "date": "2016-08-30T13:55:19+0000",
            "content": "+1 to facet.method=nonzero.  Yonik's other suggestions are fine to me too.  I hate \"enumprobing\".\n\nBut I think there should be some parameter other than facet.method that enables this.  facet.count=false?  facet.exists=true?  I see facet.method generally as a hint.  Indeed it is a hint in JSON Faceting API (except for method=stream and I'm fixing that in SOLR-9142).  I don't think it should control what the output is in any way. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15449120",
            "date": "2016-08-30T14:13:16+0000",
            "content": "Right. There is no change in format every included count is set to \"1\" or \"0\" (on mincount=0) "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15449131",
            "date": "2016-08-30T14:15:54+0000",
            "content": "yep. JSON Facets, is the next aim for sure (as well as query facet). fwiw, for now this optimization works for both facet.sort options.  "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15449184",
            "date": "2016-08-30T14:37:25+0000",
            "content": "\n\tenumprobing is not the best name. Got it. facet.method=nonzero is good one. Don't you afraid, that user will confuse it with legacy facet.zeros?\nthere should be some parameter other than facet.method that enables this.\nI'm afraid users will try to combine it with fc,fcs,uif, that's why I prefer to switch it as method. \nThus, I like facet.method=exists from proposed ones. Btw, initially this name was intersects. WDYT? My point was that this method works like enum distinguishing from other ones, but this one is faster. What about fastenum or enumbit?      \n\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-15449219",
            "date": "2016-08-30T14:50:10+0000",
            "content": "I've never heard of facet.zeros, so probably not a big concern.\n\nI'm afraid users will try to combine it with fc,fcs,uif, that's why I prefer to switch it as method.\n\nI think it's okay to return an error when a particular facet.method's requirements aren't met, even though we don't normally do that.  But I think it's bad to have facet.method otherwise have a visible effect on the response.  We already overrule what the user specifies in facet.method when we have to.  This can be no different... set a proposed facet.count=false and then facet.method is ignored because we're going to effectively do that exactly one way. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15449246",
            "date": "2016-08-30T15:01:36+0000",
            "content": "But I think it's bad to have facet.method otherwise have a visible effect on the response.\n\nAghhh. Got this point. This option doesn't remove counts but capping them to 1. What about facet.maxcount=1 which will only valid with enum and allow only this value (1) for a while?   "
        },
        {
            "author": "David Smiley",
            "id": "comment-15449298",
            "date": "2016-08-30T15:22:19+0000",
            "content": "Refining what I said before... we don't even need a new facet.method for this, although it's fine to have one.\n\ncode review:\n\n\tWhat's with the rb.req.getParams() at the top of modifyRequestForFieldFacets?\n\tfor the loop label in SimpleFacets.getFacetTermEnumCounts, can you please use all-caps \u2013 SEGMENTS or SEGMENTS_LOOP.\n\tIn TestRandomFaceting.getExpectationForSortByCount: why are offset & limit multiplied by 2?\n\n\n\n(not introduced by this patch):\n\n\tHmmm, I'm looking at the algorithm in SimpleFacets.getFacetTermEnumCounts for when the df is < minDfFilterCache \u2013 which loops over docs in the PostingsEnum and checks fastForRandomSet.  Wouldn't it be better to leap-frog (and then don't need a \"fast-for-random-set\" but do need it to be sorted)?  What do you think Yonik Seeley?\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-15449307",
            "date": "2016-08-30T15:26:49+0000",
            "content": "facet.maxcount=1\n\nI don't like that suggestion for two reasons:  (1) the maxcount name might suggest we don't return values that would have a higher count \u2013 and that's not true, and (2) This feature is for using just '1'... and this parameter suggests you can set it to some other number and we don't support that. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15449942",
            "date": "2016-08-30T19:46:37+0000",
            "content": "What's with the rb.req.getParams() at the top of modifyRequestForFieldFacets?\nops.. I'm sorry. I started type there, but then all magic went to .FacetComponent.EnumProbingDistribFacetField. Fixed in attached patch.\nfor the loop label in SimpleFacets.getFacetTermEnumCounts, can you please use all-caps \nSure. Fixed in patch. \nIn TestRandomFaceting.getExpectationForSortByCount: why are offset & limit multiplied by 2?\nfacets in json response come as a flat list like [\"a\", 1, \"c\", 1, \"e\", 4], thus every tuple takes a pair of elems in array.\n\nOk. Let's confirm the spec:\n\nfacet.exists=true is valid only for facet.method=enum, i.e. it throws exceptions on other methods. It caps facet counts by 1, hopefully does it faster than usual enum.\n  \nDoes it work for everyone?   "
        },
        {
            "author": "David Smiley",
            "id": "comment-15450784",
            "date": "2016-08-31T02:04:02+0000",
            "content": "facet.exists=true looks good to me... but it should be okay to not specify facet.method \u2013 it will be enum to support this feature.  I'm cool with it being an error if for some reason you set it to something other than enum.\n\nBTW this feature might theoretically be brought into the other facet types in the future.  e.g. \n\nfacet.query={! facet.exists=true}field:val\n\n  or facet.range.exists=true "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-15452409",
            "date": "2016-08-31T14:40:42+0000",
            "content": "Hmmm, I'm looking at the algorithm in SimpleFacets.getFacetTermEnumCounts for when the df is < minDfFilterCache \u2013 which loops over docs in the PostingsEnum and checks fastForRandomSet. Wouldn't it be better to leap-frog (and then don't need a \"fast-for-random-set\" but do need it to be sorted)? \n\nI had the exact same thought!\nThis code was written a long time ago, when skipping on postings was slower.  The more sparse a docset is, the better performing skipping should be.\nIn the case of a base docset that matches many documents and a term that matches few, it may still be faster to not skip.  Also, a low minDfFilterCache would likely always be fine not skipping.  The potentially big performance improvement would be when minDfFilterCache is large (and we encounter terms with large df as well).  We'd need benchmarking to try and determine where the crossover point is today. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15453150",
            "date": "2016-08-31T19:33:17+0000",
            "content": "Here is how I caught the logic for facet.exists=true. Please have a look! Alan Woodward you are also invited to look at it. \n\n   /**\n    * @param existsRequested facet.exists=true is passed for the given field\n    * */\n  static FacetMethod selectFacetMethod(String fieldName, \n                                       SchemaField field, FacetMethod method, Integer mincount,\n                                       boolean existsRequested) {\n    if (existsRequested) {\n      //checkMincountOnEnumprobing(fieldName, mincount);\n      if (mincount > 1) {\n        throw new SolrException (ErrorCode.BAD_REQUEST,\n            FacetParams.FACET_MINCOUNT + \"=\" + mincount + \" exceed 1 that's not supported with \" + \n                FacetParams.FACET_EXISTS + \"=true for \" + fieldName\n        );\n      }\n      // suggesting default if absent\n      if (method == null) {\n        method = FacetMethod.ENUM;\n      }\n    }\n    final FacetMethod facetMethod = selectFacetMethod(field, method, mincount);\n    \n    if (existsRequested && facetMethod != FacetMethod.ENUM) {\n      throw new SolrException (ErrorCode.BAD_REQUEST, \n          FacetParams.FACET_EXISTS + \"=true is requested, but \" +\n          FacetParams.FACET_METHOD + \"=\" + FacetParams.FACET_METHOD_enum + \" can't be used with \" + fieldName\n      );\n    }\n    return facetMethod;\n  }\n\n\nI'm waiting for confirmation before shaking up the tests.   "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15455306",
            "date": "2016-09-01T13:01:25+0000",
            "content": "Attached reworked patch for facet.exists=true. Please review! "
        },
        {
            "author": "David Smiley",
            "id": "comment-15458666",
            "date": "2016-09-02T14:21:21+0000",
            "content": "+1 \u2013 Nice.  I'm relieved to see no mention of \"probing\" anymore \n\nOne small bit of improvement IMO is the short description describing this setting.  Right now on the constant you have:\n\nBoolean parameters to indicate that Solr should check terms docs for intersection with result docset without calculating exact facet counts\n\nIMO that's too much implementation detail and isn't immediately obvious what effect it has.  I suggest:  A boolean parameter that caps the facet counts at 1. With this set, a returned count will only be 0 or 1. For apps that don't need the count, this should be an optimization. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15458688",
            "date": "2016-09-02T14:31:32+0000",
            "content": "ok. This line is better, I put it in. \nIs it worth to wait for more review feedback, or it's ready to be committed?  "
        },
        {
            "author": "David Smiley",
            "id": "comment-15458705",
            "date": "2016-09-02T14:38:45+0000",
            "content": "it's ready to be committed?\n\nI think so.  You got at least one review of the final patch which is pretty good \u2013 it seems most patches get none.  And the previous similar patch has existed for a bit longer and got someone else's eyes on it.  If someone jumps in for more feedback after your commit; it's not set in stone for more changes. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15460407",
            "date": "2016-09-03T05:11:50+0000",
            "content": "Commit ff69d14868555c43708823df23c90abd58a14d86 in lucene-solr's branch refs/heads/master from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff69d14 ]\n\nSOLR-5725:  facet.exists=true caps counts by 1 to make facet.method=enum\nfaster. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15460470",
            "date": "2016-09-03T05:58:32+0000",
            "content": "Commit ba380500f928859584581d11f2d9b431c07b996d in lucene-solr's branch refs/heads/branch_6x from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ba38050 ]\n\nSOLR-5725:  facet.exists=true caps counts by 1 to make facet.method=enum\nfaster. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15461656",
            "date": "2016-09-03T20:34:06+0000",
            "content": "you know what??? http://jenkins.thetaphi.de/job/Lucene-Solr-master-MacOSX/3523/\n\njunit.framework.AssertionFailedError: .facet_counts.facet_fields.t_s.null:0!=null\n\tat __randomizedtesting.SeedInfo.seed([1CFBD6041AD904D3:94AFE9DEB425692B]:0)\n\tat junit.framework.Assert.fail(Assert.java:50)\n\tat org.apache.solr.BaseDistributedSearchTestCase.compareSolrResponses(BaseDistributedSearchTestCase.java:913)\n\tat org.apache.solr.BaseDistributedSearchTestCase.compareResponses(BaseDistributedSearchTestCase.java:932)\n\tat org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:607)\n\tat org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:574)\n\tat org.apache.solr.handler.component.DistributedFacetExistsSmallTest.checkRandomParams(DistributedFacetExistsSmallTest.java:136)\n\nNOTE: reproduce with: ant test  -Dtestcase=DistributedFacetExistsSmallTest -Dtests.method=test -Dtests.seed=1CFBD6041AD904D3 -Dtests.slow=true -Dtests.locale=es-SV -Dtests.timezone=Pacific/Guadalcanal -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n\nIt's perfectly reproduced with the seed. The reason is: with distrib=false facet.limit=0 bypasses facet.missing processing. It's AS-WAS pre SOLR-5725 behavior. However, distrib=true calculates missing count disregards facet.limit=0. I'm going to commit test fix. And think what to do then.   \n "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15461697",
            "date": "2016-09-03T21:04:03+0000",
            "content": "test fix for master and branch_6x\nhttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=commitdiff;h=9ac5c1cf149fdd393209795226dd7ee792b767b2\nhttps://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;a=commitdiff;h=c61ee3346cc6a5b83ec2f00b14ead49ee9d50edf "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15470189",
            "date": "2016-09-07T09:56:57+0000",
            "content": "Commit ff69d14868555c43708823df23c90abd58a14d86 in lucene-solr's branch refs/heads/apiv2 from Mikhail Khludnev\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ff69d14 ]\n\nSOLR-5725:  facet.exists=true caps counts by 1 to make facet.method=enum\nfaster. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15650206",
            "date": "2016-11-09T08:37:03+0000",
            "content": "Closing after 6.3.0 release. "
        }
    ]
}