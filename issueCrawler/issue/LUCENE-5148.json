{
    "id": "LUCENE-5148",
    "title": "SortedSetDocValues caching / state",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "I just spent some time digging into a bug which was due to the fact that SORTED_SET doc values are stateful (setDocument/nextOrd) and are cached per thread. So if you try to get two instances from the same field in the same thread, you will actually get the same instance and won't be able to iterate over ords of two documents in parallel.\n\nThis is not necessarily a bug, this behavior can be documented, but I think it would be nice if the API could prevent from such mistakes by storing the state in a separate object or cloning the SortedSetDocValues object in SegmentCoreReaders.getSortedSetDocValues?\n\nWhat do you think?",
    "attachments": {
        "LUCENE-5148.patch": "https://issues.apache.org/jira/secure/attachment/12599434/LUCENE-5148.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-29T13:28:38+0000",
            "content": "+1 on removing the trap. Yet, it would be nice to make this object entirely stateless if possible. I can think of 2 options:\n\n\npublic LongsRef getOrds(int docId, LongsRef spare)\n\n\n\n\nthis has the advantage that we can easily reuse a LongsRef on top which is kind of consistent with other API in Lucene \n\nor maybe add an OrdsIterator like this\n\n\npublic OrdsIter getOrds(int docId, OrdsIter spare)\n\n// Iterate like this:\nint ord;\nwhile( (ord = ordsIter.nextOrd()) != NO_MORE_ORDS) {\n  ...\n}\n\n\n\nmainly thinking about consistency regarding other apis here but I don't like the stateful API we have right now. ",
            "author": "Simon Willnauer",
            "id": "comment-13722449"
        },
        {
            "date": "2013-07-29T14:09:37+0000",
            "content": "these other options have downsides too.\n\nLongsRef has all the disadvantages of the *Ref APIs (e.g. reuse bugs), also requires reading all the ordinals into RAM at once.\n\nAdding an additional iterator just pushes the problem into a different place to me, and makes the api more complex.\n\nThe current threadlocal + state is at least simple, consistent with all of the other docvalues, and documented that it works this way.\n\nIf we want to change the API, then I think we need to consider all of these issues. ",
            "author": "Robert Muir",
            "id": "comment-13722475"
        },
        {
            "date": "2013-07-29T14:21:27+0000",
            "content": "\nThis is not necessarily a bug, this behavior can be documented, but I think it would be nice if the API could prevent from such mistakes by storing the state in a separate object or cloning the SortedSetDocValues object in SegmentCoreReaders.getSortedSetDocValues?\n\nAn auto-clone could also cause traps, e.g. if someone is calling this method multiple times and its refilling buffers and so on. \n\nBut adding clone to the api (so someone could do this explicitly for these expert cases) might be a good solution too. ",
            "author": "Robert Muir",
            "id": "comment-13722481"
        },
        {
            "date": "2013-08-22T13:41:08+0000",
            "content": "I tried to add auto-cloning to see its impact:\n\n\tSortedSet instances are cached per-thread and cloned by SegmentCoreReaders when requested,\n\tclones are only available for use in the current thread (no cloning of the index inputs).\n\n\n\nSo nothing changes for users, it just removes the trap mentioned in the summary. However, it requires codec implementers to implement clone() correctly so that two different instances on the same field can be used in parallel in the same thread. A test has been added to BaseDocValuesFormatTestCase to make sure all our impls do that correctly.\n\nRobert, what do you think? ",
            "author": "Adrien Grand",
            "id": "comment-13747527"
        },
        {
            "date": "2013-08-22T13:46:22+0000",
            "content": "Right: I'm still convinced the trap only impacts committers writing unit tests that compare against slow-wrappers \n\nThe patch seems to have a very large amount of changes for such a small thing... is there some reformatting happening?\n\nIf we can't implement this without major changes: then I dont think we should do it. ",
            "author": "Robert Muir",
            "id": "comment-13747532"
        },
        {
            "date": "2013-08-22T13:54:14+0000",
            "content": "and FieldCache should be consistent as well. ",
            "author": "Robert Muir",
            "id": "comment-13747538"
        },
        {
            "date": "2013-08-22T15:17:16+0000",
            "content": "The patch seems to have a very large amount of changes for such a small thing... is there some reformatting happening?\n\nYes. In some cases I couldn't use anonymous classes to implement clone properly so I had to use named classes for the codec-specific SortedSet impls so the indentation was smaller by 2 spaces.\n\nIf we can't implement this without major changes: then I dont think we should do it.\n\nI wanted to know your opinion first but I came to a similar conclusion. I initially hadn't thought about the issue of cloning too many index inputs... Thanks for your input! ",
            "author": "Adrien Grand",
            "id": "comment-13747584"
        }
    ]
}