{
    "id": "SOLR-30",
    "title": "Java client code for performing searches against a Solr instance",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "Here are a few classes that connect to a Solr instance to perform searches.  Results are returned in a Response object.  The Response encapsulates a List<Map<String,Field>> that gives you access to the key data in the results.  This is the main part that I'm looking for comments on.  \n\nThere are 2 dependencies for this code: JDOM and Commons HttpClient.  I'll remove the JDOM dependency in favor of regular DOM at some point, but I think that the HttpClient dependency is worthwhile here.  There's a lot that can be exploited with HttpClient that isn't demonstrated in this class.  The purpose here is mainly to get feedback on the API of SolrSearcher before I start optimizing anything.",
    "attachments": {
        "solrsearcher-client.zip": "https://issues.apache.org/jira/secure/attachment/12336955/solrsearcher-client.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Philip Jacob",
            "id": "comment-12421374",
            "date": "2006-07-16T04:41:57+0000",
            "content": "Attachment contains:\n\n  Length     Date   Time    Name\n --------    ----   ----    ----\n      804  07-16-06 00:37   solr-trunk/src/java/org/apache/solr/client/Field.java\n     1337  07-16-06 00:37   solr-trunk/src/java/org/apache/solr/client/Response.java\n      390  07-16-06 00:37   solr-trunk/src/java/org/apache/solr/client/SearchException.java\n     5873  07-16-06 00:37   solr-trunk/src/java/org/apache/solr/client/SolrSearcher.java\n --------                   -------\n     8404                   4 files "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12421456",
            "date": "2006-07-16T18:11:54+0000",
            "content": "Hi Phil,\n\nThanks for posting this code.  I look forward to having a Java search client be a part of Solr.  \n\nI took an initial look through the code and have a few comments.\n\n1. On the interface side, I like the general idea, but I think it could be extended a bit. Specifically, one of Solr's strengths is that it knows the type of the fields in each document.  I'd like to see a hierarchy of Field classes that capture this.  Right now, a field value is always a String, even though the Solr server comes back with things like \n\n  <str name=\"id\">45</str>\n  <bool name=\"inStock\">true</bool>\n  <float name=\"price\">19.95</float>\n  ...\n\nthat clearly indicate the type of each field that comes back.  The SolrSearcher code ignores the type when it pulls out the value of each triple.  This leaves the application that's using the SolrSearcher to have to maintain some kind of knowledge about the server-side schema, and keep that knowledge in sync with any changes on the server side.\n\n2. I'd like to see the dependencies on JDOM and the Commons HttpClient removed if possible.  The fewer external dependencies there are, the more broadly this code can be adopted.\n\n3. I don't quite understand the use of the Integer type in many of the fields in Response.  Is there a reason they can't just be ints?  I see that in SolrSearcher you are using the constructor Integer(String) to parse String attribute values.  But that doesn't mean you need to store the result as an Integer.  Indeed you could use Integer.parseInt(String) instead and never have to construct a new object at all. "
        },
        {
            "author": "Philip Jacob",
            "id": "comment-12421469",
            "date": "2006-07-16T19:43:39+0000",
            "content": "Thanks for the comments.  Here are my thoughts:\n\n1) Good point.  One approach for doing this would be to what Commons Configuration does.  I could add methods to Field to perform getValueAsInteger(), getValueAsBoolean(), etc.  These are basically just convenient methods.  The other approach would be to change Field.value to Object instead of String.  And then it's up to the client code to figure out what Object is (presumably using instanceof).  So while I agree with your idea, I'm not sure what people think the best way to do this is.\n\n2) JDOM - agreed.  I just did it this way because writing DOM code takes me five times longer   But, yes, it should go.  Commons HttpClient, on the other hand, has a lot of useful stuff like multhreaded connection management and connection persistence.  Even in medium-volume situations, these optimizations will make a difference.  The prospect of implementing a subset of the functionality in Commons HttpClient is not an enviable task.  \n\n3) Actually, that was a question I had.  Are those fields always guaranteed to be there in Solr's response?  If not, then they ought to able to contain null so that means they could be Integers.  If Solr guarantees that these fields will always be in the response, then they definitely could be ints.  \n\nOther thoughts? "
        },
        {
            "author": "Darren Erik Vengroff",
            "id": "comment-12421487",
            "date": "2006-07-17T01:07:43+0000",
            "content": "I'm sure you know a lot more than Commons HttpClient than I do, so I'll defer to your judgement on whether the additional functionality is worth the additional dependency.  Some questions in the hope that I can learn more about this and maybe switch to Commons for other stuff I'm doing:\n\n1. On the persistence point, does Commons HttpClient do something beyond reusing the same TCP connection, which is the default behavior of the JDK?  See e.g. http://java.sun.com/j2se/1.5.0/docs/guide/net/http-keepalive.html.\n\n2. On the threading point, if two threads get seperate HttpURLConnection objects by independently calling java.net.URL.getConnection() on the same URL, can they then stomp on each other by using those simultaneously?  The HttpURLConnection objects are different, so I would hope not.  I know that the reuse of TCP connections happens behind the scenes in some static cache hidden away inside java.net.HttpURLConnection, but I wasn't aware of it not being thread safe.  Is this the issue Commons HttpClient is trying to address, or is it some other issue and I'm just missing the point? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12421713",
            "date": "2006-07-17T20:24:53+0000",
            "content": "Hi Phil, thanks for the code!\n\nSolr's response is very generic... Solr supports custom query handlers than can return arbitrary data like category counts for faceted browsing, context snippets with highlight info, multiple query result sets, etc.\nJust recently highlighting info was added to the standard and dismax query handlers.  It would be nice to have a way to access more generic responses.\n\nYour Response class pretty much maps to a DocList (a list of documents that match a query)  or the <response> element in the XML.  It's possible to have multiple of these.\nThe <header> containing status and qtime will only appear once.\n\nWhatever mapping you come up with, there will be some peope that want something different.  There should probably be some low level methods that allow one to get the InputStream or Reader of the response.  This could be important, for example, if someone is asking for all the docs in the index and needs to stream the results.\n\nWhat relationship should the query client have with the update client?  Probably makes sense for them to at least use the same HTTP client, even if they don't share any implementation.  Should they be in the same solrclient.jar, or different solrupdater.jar, solrquery.jar?\n\n "
        },
        {
            "author": "John Hodgson",
            "id": "comment-12434202",
            "date": "2006-09-12T16:16:59+0000",
            "content": "Hi Phil.  I'm using your search client and it is working pretty well.  We did notice on thing that appears incorrect.  The sort mechanism being performed by the client adds a request parameter before sending to lucene.\n\n     /solr/select?q=term&sort=name+asc\n     GET /solr/select?q=p*+AND+entryType%3Atag&sort=name+asc&rows=100\n\n\nAccording to lucene docs (http://incubator.apache.org/solr/tutorial.html#Sorting), the sort '''should be''' appended after the query term:\n\n     /solr/select?q=term;name+asc\n     GET /solr/select?q=p*+AND+entryType%3Atag%3Bname+asc&rows=100\n "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12447561",
            "date": "2006-11-06T22:23:11+0000",
            "content": "I believe we could have some interfaces and their implementations (HttpClient, java.net.*, JDOM), the way it was done in Nutch.\nJust as a good sample of wide acceptance: Commons HttpClient could be easily configured via Spring Framework's Dependency Injection... The main method in SolrSearcher could be made abstract (in Interface), and another class could be HttpClient-specific "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12451204",
            "date": "2006-11-20T00:44:35+0000",
            "content": "Hi Philip,\n\nMany thanks for posting the sample, just a few (new) thoughts after getting more familiar with SOLR and Cocoon...\n\nBackground: \"HTTP interface with configurable response formats (XML/XSLT, JSON, Python, Ruby)\"\nRequirements: \"HTTP interface supporting pure Java clients\"\n\nAm I right?\n\nSo, in this case preferable way should be Java-over-HTTP transport layer, instead of HttpClient+XmlParser... your sample is simply Java-over-XML-over-HTTP (why not over JSON, or even CSV?)\n\nProbably RMI-IIOP is the answer (which is Java-RMI-over-HTTP), but I'd prefer XSL/XML anyway... JSON is better than XML in case of AJAX, XML is preferable for 'server-side' transformations... "
        },
        {
            "author": "Thorsten Scherler",
            "id": "comment-12460863",
            "date": "2006-12-26T12:19:31+0000",
            "content": "Hi all,\n\nI had a look at the code and I do not understand a couple of things.\n\nSince the client can request any response format by defining it in the query string I am not sure whether the \nprotected Response createResponse(final String _xml, final List<String> _fields) throws SAXException, IOException, ParserConfigurationException, JDOMException {\nmakes so much sense at all. \n\nIMO the java client should make it easy to search a solr server with an e.g. custom servlet. This way we could leverage all helper classes to connect to the server into the client. What  format will be returned depends on the type defined in the query string that is the reason why I  do not thing the JDOM stuff makes sense.\n\nFurther the different \"public Response search\" methods lead is IMO not generic enough, why not simply use \npublic Response search(String _query, List<NameValuePair> params) \n{\n\t\t...\n\t}\nand returning directly the solr response. Then the calling method would need to deal with the raw response.  "
        },
        {
            "author": "giri",
            "id": "comment-12461098",
            "date": "2006-12-27T20:32:25+0000",
            "content": "Hi,\nI just downloaded this code and compiled it, I assume I need to use the SolrSearcher methods. I tired the following example and getting error\n\nSolrSearcher solrSearcher = new SolrSearcher(\"http://localhost:8090/solr/select/\");\n\t    \tList filedsList = new ArrayList();\n\t    \tfiledsList.add(\"abstract\");\n\t    \tfiledsList.add(\"origin\");\n\n\t    \tResponse res = solrSearcher.search(\"water\", filedsList, \"String\");\n\nWhen I run the above code, I am getting the following error:\n\nException in thread \"main\" java.lang.NoClassDefFoundError: org/apache/commons/codec/DecoderException\n\tat org.apache.commons.httpclient.HttpMethodBase.<init>(HttpMethodBase.java:218)\n\tat org.apache.commons.httpclient.methods.GetMethod.<init>(GetMethod.java:88)\n\tat search.SolrSearcher.search(SolrSearcher.java:104)\n\tat search.SolrSearcher.search(SolrSearcher.java:71)\n\tat search.TestSolr.main(TestSolr.java:21)\n\nAny help is appreciated.\n\nThanks!\n "
        },
        {
            "author": "giri",
            "id": "comment-12461100",
            "date": "2006-12-27T20:58:59+0000",
            "content": "It worked, I needed to explicitly list the commons codec jar file on the classpath "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12464182",
            "date": "2007-01-12T11:37:15+0000",
            "content": "I think this issue is now out of date - it looks like moved everything to SOLR-20.  Close this? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12464642",
            "date": "2007-01-14T23:29:24+0000",
            "content": "officially linking to SOLR-20 since that issue is subsumming this one "
        }
    ]
}