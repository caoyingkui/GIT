{
    "id": "LUCENE-682",
    "title": "QueryParser with Locale Based Operators (French included)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Here is a version of the QueryParser that can \"understand\" the AND, OR and NOT keyword in other languages.\n\nIf activated, \n\n\t\"a ET b\" should return the same query as \"a AND b\", namely: \"+a +b\"\n\t\"a OU b\" should return the same query as \"a OR b\", namely: \"a b\"\n\t\"a SAUF b\" should return the same query as \"a NOT b\", namely: \"a -b\"\n\n\n\nHere are its main points : \n\n1) Patched from revision 454774 of lucene 2.1dev (trunk) (probably could be used with other versions)\n2) The \"ant test\" target is still successful when the modified QueryParser is used\n3) It doesn't break actual code\n4) The default behavior is the same as before\n5) It has to be deliberately activated\n6) It use ResourceBundle to find the keywords translation\n7) Comes with FRENCH translation\n8) Comes with JUnit testCases\n9) Adds 1 public method to QueryParser\n10) Expands the TOKEN <TERM>\n11) Use TOKEN_MGR_DECLS to set some field for the TokenManager",
    "attachments": {
        "LocalizedQueryParserOperatorsMicroBench.java": "https://issues.apache.org/jira/secure/attachment/12345525/LocalizedQueryParserOperatorsMicroBench.java",
        "QueryParser.jj": "https://issues.apache.org/jira/secure/attachment/12342920/QueryParser.jj",
        "QueryParser.jj.patch": "https://issues.apache.org/jira/secure/attachment/12342915/QueryParser.jj.patch",
        "LocalizedQueryParser.patch": "https://issues.apache.org/jira/secure/attachment/12345333/LocalizedQueryParser.patch",
        "QueryParser_fr.properties": "https://issues.apache.org/jira/secure/attachment/12342917/QueryParser_fr.properties",
        "TestQueryParserLocaleOperators.java": "https://issues.apache.org/jira/secure/attachment/12342918/TestQueryParserLocaleOperators.java",
        "LocalizedQueryParser.zip": "https://issues.apache.org/jira/secure/attachment/12344496/LocalizedQueryParser.zip",
        "QueryParser.properties": "https://issues.apache.org/jira/secure/attachment/12342916/QueryParser.properties",
        "LocalizedQueryParserDemo.java": "https://issues.apache.org/jira/secure/attachment/12342919/LocalizedQueryParserDemo.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-10-13T20:52:12+0000",
            "content": "Sorry, didn't see the attach multiple files before. ",
            "author": "Patrick Turcotte",
            "id": "comment-12442093"
        },
        {
            "date": "2006-10-26T04:11:09+0000",
            "content": "I like this and have a question.  The createLocalizedTokenMap() method is called from that new setter method.\nSince QueryParser is not thread safe, one has to instantiate a new QP, set the Locale and call that setter before each parse(....) call.  Unless ResourceBundle does some internal caching, doesn't this mean each parsed query will execute that createLocalizedTokenMap() method?  Since the resource files are not likely to change, shouldn't we cache things?\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12444776"
        },
        {
            "date": "2006-10-27T01:35:43+0000",
            "content": "From what I read in the Javadoc of ResouceBundle, it does cache the values. ",
            "author": "Patrick Turcotte",
            "id": "comment-12445062"
        },
        {
            "date": "2006-11-07T16:40:11+0000",
            "content": "New versions. All in the zip file. Improvements are:\n\n\n\tBy default, if used, using a localized version disable English tokens (AND, NOT, OR)\n\tMore than one operator may be define in the bundle (separated by ';')\n\t&&, || and ! operators are always active.\n\n\n\nA note on ResourceBundle, as I had to do some test to understand the documentation:\n\n1) getStringArray() is really just a wrapper on (String[]) getObject() and throws exception on PropertiesResourceBundle and ListResourceBundle.\n\n2) The order to get a bundle is a little tricky. Javadoc should be read :\n\n\n\tbaseName + \"\" + selectedLanguage + \"\" + country1 + \"_\" + variant1\n\tbaseName + \"\" + selectedLanguage + \"\" + country1\n\tbaseName + \"_\" + selectedLanguage\n\tbaseName + \"\" + defaultLocaleLanguage + \"\" + country2 + \"_\" + variant2\n\tbaseName + \"\" + defaultLocaleLanguage + \"\" + country2\n\tbaseName + \"_\" + defaultLocaleLanguage\n\tbaseName\nWhich means that if a bundle exists by that baseName for your defaultLocale (Locale.getDefault()), you'll get values from it instead of from the baseName bundle.\n\n\n\nThanks to Chris Hostetter and Otis Gospodnetic for your comments and questions. ",
            "author": "Patrick Turcotte",
            "id": "comment-12447852"
        },
        {
            "date": "2006-11-20T08:36:49+0000",
            "content": "LocalizedQueryParser.patch contains everything in the most recent LocalizedQueryParser.zip, except in patch form, with a few minor changes...\n  1) moved files into tree as appropraite\n  2) reformated (\\t to 2 spaces, license header in test)\n  3) included javacc generated QueryParser*.java since they \n       need to be commited too.\n  4) added <copy> directive to build.xml so property files \n      would make it into jar (and classpath for tests)\n\nThe code looks great and the unit tests provide nice coverage.\n\nLike Otis, I'm also a little worried about the createLocalizedTokenMap() calls ... the ResourceBundle lookups may be cached, but there's also the splitting, and the fact that createLocalizedTokenMap() is called in both setLocale and setUseLocalizedOperators ... setLocale might be used just for the date parsing, so that could result in wasted cycles for some people ... not to mention setBundleBaseName doesn't call createLocalizedTokenMap so people who do...\n\n   QueryParser qp = new QueryParser\n   qp.setLocale(...)\n   qp.setUseLocalizedOperators(true)\n   qp.setBundleBaseName(...)\n\n...will wind up triggering createLocalizedTokenMap twice, and still not use the Bundle the wanted to.\n\nEven if we don't want to worry about caching the post-split arrays per Bundle, I think it might make more sense if setUseLocalizedOperators was the only method that called createLocalizedTokenMap, and it was documented that if should be called after setLocale and setBundleBaseName.\n\n   ...any other opinions on this?\n\nOther things that should probably be done before commiting:\n\n  a) have at least one test using a Bundle that excercises \n      the splitting.\n  b) add some javadoc verbage to QueryParser.setLocale \n      clarifying how it affects the operators.\n\n\n...I may be able to find some time to play with this some more later this week and make those changes myself. ",
            "author": "Hoss Man",
            "id": "comment-12451257"
        },
        {
            "date": "2006-11-20T16:07:04+0000",
            "content": "Does anyone know what is the likely performance impact is when not using this feature? It's not easy for me to tell at a glance. ",
            "author": "Yonik Seeley",
            "id": "comment-12451351"
        },
        {
            "date": "2006-11-23T04:33:26+0000",
            "content": "Revised version of the patch \u2013 includes the changes so that only one method creates the lists; a test of the splitting logic; more javadocs clarifing the interaction of the methods. ",
            "author": "Hoss Man",
            "id": "comment-12452112"
        },
        {
            "date": "2006-11-23T04:42:53+0000",
            "content": "microbenchmark of the \"default\" (no ResourceBundle) usage, run against the current trunk, and with this change (to determine the performance costs of the added work in the Javacc generated code)\n\ntwo tests, one of a new instance for each parse call, one of reusing the same instance for 5 parse calls; 3 runs each, 10000 iterations each, time in seconds...\n\n                 1        1         1         5         5         5\n    trunk:  1.897  1.904  1.913  7.415  7.447  7.446\nw/patch:  2.01    2.005   2.01   7.851  7.888  7.886\n\n...doesn't seem like a big enough factor to worry about (unless i missed something obvious when i wrote the test ... i was on a plane at the time and slightly distracted by the very chatty woman next to me) ",
            "author": "Hoss Man",
            "id": "comment-12452115"
        },
        {
            "date": "2006-12-06T22:54:51+0000",
            "content": "issues has a modest number of notes, and seems to me like it would be very usefull as more language property files are contributed ... does any one have any objections to it being commited?\n\nNOTE: there are some negative performance impacts to QueryParser as a result of this patch. ",
            "author": "Hoss Man",
            "id": "comment-12456247"
        },
        {
            "date": "2006-12-06T23:26:25+0000",
            "content": "Frankly, I'm not excited about a 6% performance loss so that someone can customize\na total of 3 tokens that don't add additional expressive power or features.  AND, OR, and NOT, are short and easy to understand even for foreign-language speakers.  Consider that to construct raw Lucene queries themselves, they would need to know Lucene, and for that, they will most likely have a passing familiarity with English anyway.\n\nI think this would be better implemented as a preprocessor, outside of the query parser.\nI don't think that would be too hard, and then there would be no performance impact for the 99% of people who will stick with AND/OR/NOT (or +/-)\n\nIt might even be expressible as a regular expression.\n\nMaybe it's just me though, so I wouldn't mind hearing some other opinions. ",
            "author": "Yonik Seeley",
            "id": "comment-12456258"
        },
        {
            "date": "2006-12-07T03:57:11+0000",
            "content": "\n\nSomething like this perhaps:\n\n  public static String change(String s, String AND, String OR, String NOT) {\n    int len = s.length();\n    StringBuilder b = new StringBuilder();\n    boolean newString=false;\n    boolean changed=false;\n    boolean inString=false;\n    char prev='!';\n    for (int i=0; i<s.length(); i++) {\n     char ch = s.charAt;\n     switch (ch) {\n       case '' : b.append(s.charAt(++i)); break;\n       case '\\'' : inString=!inString; break;\n       case 'A' :\n         if (!inString\n             && !Character.isJavaIdentifierPart(prev)\n             && i+2 < s.length()\n             && s.charAt(i+1) == 'N'\n             && s.charAt(i+2) == 'D'\n             && (i+3==s.length() || !Character.isJavaIdentifierPart(s.charAt(i+3))))\n         {\n           b.append(AND);\n           changed=true;\n           i+=2;\n         }\n         break;\n       case 'O' :\n         if (!inString\n             && !Character.isJavaIdentifierPart(prev)\n             && i+1 < s.length()\n             && s.charAt(i+1) == 'R'\n             && (i+2==s.length() || !Character.isJavaIdentifierPart(s.charAt(i+2))))\n         {\n           b.append(OR);\n           changed=true;\n           i+=1;\n         }\n         break;\n       case 'N' :\n         if (!inString\n             && !Character.isJavaIdentifierPart(prev)\n             && i+2 < s.length()\n             && s.charAt(i+1) == 'O'\n             && s.charAt(i+2) == 'T'\n             && (i+3==s.length() || !Character.isJavaIdentifierPart(s.charAt(i+3))))\n         {\n           b.append(NOT);\n           changed=true;\n           i+=2;           \n         }\n         break;\n       default: break;\n     }\n     if (changed) \n{\n       newString=true;\n       changed=false;\n     }\n else \n{\n       b.append(ch);\n       prev = ch;\n     }\n    }\n    return newString ? b.toString() : s;\n  } ",
            "author": "Yonik Seeley",
            "id": "comment-12456294"
        },
        {
            "date": "2006-12-07T04:11:24+0000",
            "content": "That's untested code of course... I just noticed that \n       case '' : b.append(s.charAt(++i)); break;\n       case '\\'' : inString=!inString; break; \nshould probably be \n        case '\"': if (++i<len) \n{b.append(ch); ch=s.charAt(i);}\n break;\n       case '\\'' : inString=!inString; break;\n\nIt can probably be made faster too... but the point is that it's independent of the query parser and more easily customized. ",
            "author": "Yonik Seeley",
            "id": "comment-12456295"
        },
        {
            "date": "2013-02-28T13:03:54+0000",
            "content": "This issue has been inactive for more than 4 years. Please close if it's no longer relevant/needed, or bring it up to date if you intend to work on it. SPRING_CLEANING_2013 ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13589506"
        }
    ]
}