{
    "id": "SOLR-4676",
    "title": "Share a Lucene FieldType instance instead of creating on each call to createField()",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I think the Lucene FieldType instances should be cached on Solr's SchemaField so that they don't have to be needlessly re-created for each indexed value that runs through Solr in SchemaField.createField(). The only obstacle I see to this is that getIndexOptions(field,val) takes the value, and if that value were to alter the logic then the FieldType can't be shared. This is a protected method and I don't see anything that overrides it, and the default implementation doesn't use the value. So I think it can be removed.  Patch in progress...",
    "attachments": {
        "SOLR-4676_Share_Lucene_FieldType_in_SchemaField.patch": "https://issues.apache.org/jira/secure/attachment/12577061/SOLR-4676_Share_Lucene_FieldType_in_SchemaField.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Smiley",
            "id": "comment-13622780",
            "date": "2013-04-04T21:12:19+0000",
            "content": "Here is the attached patch.  In affected methods I added or enhanced the documentation.  In particular, I clarified that createField() (singular) is not for DocValues and that generally createFields() should be called.  And I clarified that it can return null.\n\nOne inconsistency I found as a side-effect of this is that if a TrieField was docValues enabled, yet not stored nor indexed, createField() would return non-null \u2013 a Field not marked as stored or indexed. That was odd and I changed that.  That did mean that in this circumstance there wasn't a Field to call numericValue() on to index DocValues, and so I added stringToNumber() for that.  And that is a good segue...\n\nOne thing that I think is really bad is the use of switch statements in TrieField to dispatch on the types.  Shouldn't a little bit of straight-forward OOP be used to have subclasses do some of these basic things? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13622839",
            "date": "2013-04-04T21:44:11+0000",
            "content": "\nOne inconsistency I found as a side-effect of this is that if a TrieField was docValues enabled, yet not stored nor indexed, createField() would return non-null \u2013 a Field not marked as stored or indexed. That was odd and I changed that.\n\nWhy? this is a valid configuration. You might think its odd, but -1 to removing this. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13622925",
            "date": "2013-04-04T23:00:13+0000",
            "content": "For reference, returning null in createField for docvalues-only fields caused SOLR-4647. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13623664",
            "date": "2013-04-05T14:27:15+0000",
            "content": "Why? this is a valid configuration. You might think its odd, but -1 to removing this.\n\nThat aspect of my patch was incidental to my objective (share Lucene FieldType) and it doesn't matter that much to me even though I think it's kinda lame; so I'll put that back in my subsequent patch to satisfy your concern.\n\nDo you have any other feedback?\n\nFor reference, returning null in createField for docvalues-only fields caused SOLR-4647.\n\nThanks for that reference, Adrien.  The way you worded this suggests it's a problem for createField to return null.  But that has been a normal accepted behavior of createField that may as well be set in stone now for Solr.  If I had to start the API from scratch, createField() would not even exist because the notion that there is exactly one Lucene field per Solr field is patently false.  I'll add my suggested solution to SOLR-4647 to that issue. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13623698",
            "date": "2013-04-05T15:11:09+0000",
            "content": "The way you worded this suggests it's a problem for createField to return null.\n\nThat was not my intention. I just wanted to say that returning null not only has implications on indexing but also on some components that use this method to transform strings to objects, such as grouping. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13623756",
            "date": "2013-04-05T16:24:08+0000",
            "content": "\nIf I had to start the API from scratch, createField() would not even exist because the notion that there is exactly one Lucene field per Solr field is patently false. I'll add my suggested solution to SOLR-4647 to that issue.\n\n\nThat was not my intention. I just wanted to say that returning null not only has implications on indexing but also on some components that use this method to transform strings to objects, such as grouping.\n\nI agree with both of these statements. Can we remove createField() and eliminate this trap?\nDocumentBuilder only calls createFields() and thats... the only thing that should be calling this method?\n\nGrouping should be doing something else.\n "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13623762",
            "date": "2013-04-05T16:29:56+0000",
            "content": "\nI agree with both of these statements. Can we remove createField() and eliminate this trap?\nDocumentBuilder only calls createFields() and thats... the only thing that should be calling this method?\n\n+1 "
        }
    ]
}