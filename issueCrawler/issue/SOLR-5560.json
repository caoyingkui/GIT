{
    "id": "SOLR-5560",
    "title": "Enable LocalParams without escaping the query",
    "details": {
        "affect_versions": "4.6",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "This query should be a legit syntax:\n\nhttp://localhost:8983/solr/collection1/select?debugQuery=true&defType=lucene&df=id&q=TERM1 AND \n{!lucene df=text}(TERM2 TERM3 \"TERM4 TERM5\")\n\ncurrently it isn't, because the LocalParams can be specified on a single term only.\n\nBill Bell thinks it is a bug.\n\nFrom the mailing list:\n\nWe want to set a LocalParam on a nested query. When quering with \"v\" inline parameter, it works fine:\nhttp://localhost:8983/solr/collection1/select?debugQuery=true&defType=lucene&df=id&q=TERM1 AND {!lucene df=text v=\"TERM2 TERM3 \\\"TERM4 TERM5\\\"\"}\n\nthe parsedquery_toString is\n+id:TERM1 +(text:term2 text:term3 text:\"term4 term5\")\n\nQuery using the \"query\" also works fine:\nhttp://localhost:8983/solr/collection1/select?debugQuery=true&defType=lucene&df=id&q=TERM1 AND query:\"{!lucene df=text}\nTERM2 TERM3 \\\"TERM4 TERM5\\\"\"\n\n(parsedquery is exactly the same).\n\nObviously, there is the option of external parameter (\n{... v=$nestedq}\n&nestedq=...)\n\nThis is a good solution, but it is not practical, when having a lot of such nested queries.\n\nBUT, when trying to put the nested query in place, it yields syntax error:\nhttp://localhost:8983/solr/collection1/select?debugQuery=true&defType=lucene&df=id&q=TERM1 AND \n{!lucene df=text}\n(TERM2 TERM3 \"TERM4 TERM5\")\n\norg.apache.solr.search.SyntaxError: Cannot parse '(TERM2'\n\nThe previous options are less preferred, because the escaping that should be made on the nested query.",
    "attachments": {
        "SOLR-5560.patch": "https://issues.apache.org/jira/secure/attachment/12624043/SOLR-5560.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan Cutter",
            "id": "comment-13863889",
            "date": "2014-01-07T04:10:52+0000",
            "content": "IGNORE THIS COMMENT.  Referenced patch has been removed.\n\n\n\nAttached patch will make both queries:\n\n1: TERM1 AND \n{!lucene df=text v=\"TERM2 TERM3 \\\"TERM4 TERM5\\\"\"}\n2: TERM1 AND \n{!lucene df=text}(TERM2 TERM3 \"TERM4 TERM5\")\n\nyield:\n+id:TERM1 +(text:term2 text:term3 text:\"term4 term5\")\n\nThe issue is QueryParserTokenManager.java:266 which will stop processing once a space is read - leading to \"{!lucene df=text}\n(TERM2\"\n\n\nif ((0xfffffdfefffff9ffL & l) == 0L)\n  break;\n\n\nSo I added a flag that ensures we don't break while a parenthesis hasn't been closed.  I think this should be a new state but I have little idea what's going on with the states in QueryParserTokenManager.  Not much is documented and states are unremarkable ints.  The shifts are a little difficult to visualize as well.\n\nAdded some unit tests too.  Anyway, hope this helps. "
        },
        {
            "author": "Isaac Hebsh",
            "id": "comment-13864553",
            "date": "2014-01-07T19:00:59+0000",
            "content": "Hi Ryan Cutter, thank you a lot!\nI'm not familiar with parser states (thank god), so I can't review the patch.\n\nWhat action is should be performed in order to commit this patch? (into 4.7?) "
        },
        {
            "author": "Ryan Cutter",
            "id": "comment-13865053",
            "date": "2014-01-08T04:29:22+0000",
            "content": "I don't know, I assume a committer familiar with this area will take a look in the near future.  I see other unassigned tickets with patches attached so I'm sure there's a process. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13874295",
            "date": "2014-01-17T01:43:30+0000",
            "content": "Not much is documented and states are unremarkable ints. \n\nIt's generated javacc code, so I think we actually have to move your logic up a level into the .jj file that the parser is generated from. "
        },
        {
            "author": "Ryan Cutter",
            "id": "comment-13874304",
            "date": "2014-01-17T01:51:43+0000",
            "content": "Haha, that makes much more sense, thanks.  I'll take a longer look. "
        },
        {
            "author": "Ryan Cutter",
            "id": "comment-13877019",
            "date": "2014-01-21T00:19:06+0000",
            "content": "Attached patch should fix this bug, pending a review from someone familiar with QueryParser.jj.  Included some tests too.\n\nMark Miller, FYI and thanks for the tip about generated code.  The casual use of complicated bitwise operations was leading me to believe you Solr guys/gals were also mathematicians on the side  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13888941",
            "date": "2014-02-02T14:55:36+0000",
            "content": "Been at least a few years since I was heavy in javacc, but I should be able to review this if no one else jumps on it first. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971301",
            "date": "2014-04-16T12:57:43+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}