{
    "id": "LUCENE-3047",
    "title": "HyphenationCompoundWordTokenFilter does not work correctly with the german word Brustamputation",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Following Test fails:\n\n@Test\n    public void testBrustamputation()\n            throws IOException {\n        Analyzer compoundAnalyzer = new Analyzer()\n        {\n            @Override\n            public TokenStream tokenStream( String fieldName, Reader reader ) {\n                InputStream in = this.getClass().getResourceAsStream( \"/de_DR.xml\" );\n\n                final InputSource inputSource = new InputSource( in );\n                inputSource.setEncoding( \"iso-8859-1\" );\n                HyphenationTree hyphenator = null;\n                try \n{\n                    hyphenator = HyphenationCompoundWordTokenFilter.getHyphenationTree( inputSource );\n                }\n catch ( Exception ex ) \n{\n                    Assert.fail( \"\", ex);\n                }\n                HashSet dict = new HashSet( Arrays.asList( new String[]\n{\"brust\", \"amputation\"}\n ) );\n                return new HyphenationCompoundWordTokenFilter( Version.LUCENE_31, new WhitespaceTokenizer( Version.LUCENE_31, reader ), hyphenator,\n                        dict, CompoundWordTokenFilterBase.DEFAULT_MIN_WORD_SIZE,\n                        4, CompoundWordTokenFilterBase.DEFAULT_MAX_SUBWORD_SIZE, false );\n            }\n        };\n        TokenStream tokenStream = compoundAnalyzer.tokenStream( \"Kurztext\", new StringReader( \"brustamputation\" ) );\n        CharTermAttribute t = tokenStream.addAttribute( CharTermAttribute.class );\n        Set<String> tokenSet = new HashSet<String>();\n        while ( tokenStream.incrementToken() ) \n{\n            tokenSet.add( t.toString() );\n            System.out.println( t );\n        }\n        Assert.assertTrue( tokenSet.contains( \"brust\" ), \"brust\" );\n        Assert.assertTrue( tokenSet.contains( \"brustamputation\" ), \"brustamputation\" );\n        Assert.assertTrue( tokenSet.contains( \"amputation\" ), \"amputation\" );\n\n    }",
    "attachments": {},
    "issue_links": {},
    "comments": []
}