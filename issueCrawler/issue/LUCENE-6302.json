{
    "id": "LUCENE-6302",
    "title": "Adding Date Math support to Lucene Expressions module",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "4.10.3",
        "components": [
            "modules/expressions"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "Lucene Expressions are great, but they don't allow for date math. More specifically, they don't allow to infer date parts from a numeric representation of a date stamp, nor they allow to parse strings representations to dates.\n\nSome of the features requested here easy to implement via ValueSource implementation (and potentially minor changes to the lexer definition) , some are more involved. I'll be happy if we could get half of those in, and will be happy to work on a PR for the parts we can agree on.\n\nThe items we will be happy to have:\n\n\n\tA now() function (with or without TZ support) to return a current long date/time value as numeric, that we could use against indexed datetime fields (which are infact numerics)\n\tParsing methods - to allow to express datetime as strings, and / or read it from stored fields and parse it from there. Parse errors would render a value of zero.\n\tGiven a numeric value, allow to specify it is a date value and then infer date parts - e.g. Date(1424963520).Year == 2015, or Date(now()) - Date(1424963520).Year. Basically methods which return numerics but internally create and use Date objects.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14338543",
            "author": "Robert Muir",
            "date": "2015-02-26T15:22:55+0000",
            "content": "date math everywhere i have seen it (e.g. solr) is horrible, lets keep it the hell out of here.\nWhy do we need date math when dates are integers and you can add and subtract them with ordinary operations?\n\nas far as things like date parsing, thats different. "
        },
        {
            "id": "comment-14338546",
            "author": "Robert Muir",
            "date": "2015-02-26T15:25:56+0000",
            "content": "The expressions support is described as a subset of javascript. So i think implementing it as javascript does is the only choice.\n\nAnything else, users can add themselves in the custom functions map. "
        },
        {
            "id": "comment-14338563",
            "author": "Itamar Syn-Hershko",
            "date": "2015-02-26T15:33:34+0000",
            "content": "I actually expected the main objection would be to adding date parsing methods \n\nMaybe it would make sense to explain the use cases this is trying to solve.\n\nWe are using Elasticsearch & Kibana and since the latest version switched to using Lucene Expressions (from Groovy) we found ourselves blocked by the things we can do with Kibana's scripted fields\n\nFor example, given a user's DOB, how can we do aggregations on their age? or compute how many years (or days) have passed between 2 given days?\n\nYes we can subtract the epochs (except that it doesn't seem to work https://github.com/elasticsearch/elasticsearch/issues/9884) but translating the result to terms of days, hours or years is even uglier using an expression.\n\nI think introducing ValueSources to do this should be enough, but if changing the lexer will be the preferred way I can go and do that as well. With regards to syntax - I'm not locked on any preferred syntax.\n\nEither way it seems like adding a now() function is the easiest change and can send a PR with this change alone to start with. "
        },
        {
            "id": "comment-14338676",
            "author": "ASF GitHub Bot",
            "date": "2015-02-26T16:44:43+0000",
            "content": "GitHub user synhershko opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/129\n\n    Adding now() support to expressions\n\n    calling now() in an expression will return an epoch value as numeric,\n    which could then be used to run expressions against the current\n    milliseconds since epoch value\n\n    See https://issues.apache.org/jira/browse/LUCENE-6302 for more details\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/synhershko/lucene-solr now-method-in-expressions\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/129.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #129\n\n\ncommit d6f7b0e378716e58913e085ecf458de83f97590d\nAuthor: Itamar Syn-Hershko <itamar@code972.com>\nDate:   2015-02-26T16:36:13Z\n\n    Adding now() support to expressions\n\n    calling now() in an expression will return an epoch value as numeric,\n    which could then be used to run expressions against the current\n    milliseconds since epoch value\n\n "
        },
        {
            "id": "comment-14338677",
            "author": "Itamar Syn-Hershko",
            "date": "2015-02-26T16:44:56+0000",
            "content": "Sent a PR for the latter https://github.com/apache/lucene-solr/pull/129 "
        },
        {
            "id": "comment-14338957",
            "author": "Ryan Ernst",
            "date": "2015-02-26T19:24:07+0000",
            "content": "I agree with Robert, we don't need date math.  We should stay with a subset of javascript, and have functions to help alleviate pain in dealing with epochs.  I also agree now() should be handled with a variable instead of a function.\n\nRegarding parse methods, I think these should be for constants, not parsing from string fields.  Parsing is slow, it shouldn't happen for every document.  You can do these outside of the expression and place in variables.  It might be possible we could have some functions optimized to execute once (e.g. Date.parse(\"2015-01-01\") which wouldn't change per document).  For date parts, I think this can already be handled with variables as well.  We have VariableContext which allows binding something like mydatevar.month to a different value source than mydatevar.  So we could have helper value sources that operate on epochs and extract year, month, etc. "
        },
        {
            "id": "comment-14339156",
            "author": "Robert Muir",
            "date": "2015-02-26T21:04:09+0000",
            "content": "\nRegarding parse methods, I think these should be for constants, not parsing from string fields. Parsing is slow, it shouldn't happen for every document. \n\n+1\n\nIn general if we want to do any ops on strings, it should only be operations on ordinals (simple <, <=, ==, >, >= can work easily, etc). We should keep expressions fast, that is a major advantage of it. "
        }
    ]
}