{
    "id": "LUCENE-8159",
    "title": "Add a copy constructor in AutomatonQuery to copy directly the compiled automaton",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "trunk",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "core/search"
        ],
        "fix_versions": []
    },
    "description": "When the query is composed of multiple AutomatonQuery with the same automaton and which target different fields, it is much more efficient to reuse the already compiled automaton by copying it directly and just changing the target field.",
    "attachments": {
        "0001-Add-a-copy-constructor-in-AutomatonQuery-to-copy-dir.patch": "https://issues.apache.org/jira/secure/attachment/12909223/0001-Add-a-copy-constructor-in-AutomatonQuery-to-copy-dir.patch",
        "LUCENE-8159.patch": "https://issues.apache.org/jira/secure/attachment/12909224/LUCENE-8159.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16377708",
            "date": "2018-02-26T22:25:58+0000",
            "content": "This looks good to me.  I'd only trivially change the parameter order so that the field name is first, which I think aligns better with the Query subclass constructors.\n\nShould PrefixQuery & WildcardQuery & TermRangeQuery have the same constructors too?  Probably... otherwise if you are rewriting one of these you could only convert it to a generic AutomatonQuery instead of the specific type.  That's not a big deal perhaps but still.\n\nAs an aside, this reminds me of some ideas I've had about a different Query API that Lucene could have in which the field is inherited from the parent instead of being attached to each leaf Query, sorta like how boosts were refactored out of Query.  So you'd have a FieldQuery(...) that wraps a possibly complex query with a TermQuery inside that only has the term bytes, no field reference. And then Query.createWeight would reference the field just as it does the score.  Any way, such a hypothetical won't be happening on this issue! ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16377874",
            "date": "2018-02-27T01:11:31+0000",
            "content": "Having a copy constructor to modify the field feels a bit weird to me. I's rather like to expose an expert constructor that takes a compiled automaton and expect users to compile the automaton themselves if they plan to reuse it in multiple queries?\n\nShould PrefixQuery & WildcardQuery & TermRangeQuery have the same constructors too?\n\nI'm open to discussing such a change on AutomatonQuery which I consider an expert query. However I would like to keep PrefixQuery/WildcardQuery as simple as possible so I think we shouldn't add a new constructor there. Those queries generate very simple automata so I wouldn't expect this optimization to help significantly. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16377952",
            "date": "2018-02-27T03:22:40+0000",
            "content": "expose an expert constructor that takes a compiled automaton and expect users to compile the automaton themselves if they plan to reuse it in multiple queries?\n\n+1 but I think it would be helpful to also provide access to the CompiledAutomaton from an existing AutomatonQuery \u2013 e.g. AutomatonQuery.getCompiledAutomaton().  Not only would that be useful for rewriting an AutomatonQuery to change the field, but it would also be useful in the UnifiedHighlighter's MultiTermHighlighting line ~144 to avoid rebuilding the CompiledAutomaton from an existing AQ. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16378373",
            "date": "2018-02-27T10:41:51+0000",
            "content": "I's rather like to expose an expert constructor that takes a compiled automaton and expect users to compile the automaton themselves if they plan to reuse it in multiple queries?\nI can speak as such a \"user\" as I'm having this use case. We often build queries with the same prefix/wildcard query for multiple different fields (and sometimes many fields - in this case the optimization does help). As a user I really appreciate to simply copy a PrefixQuery or WildcardQuery, rather than building the automaton myself. The inner automaton inside PrefixQuery is hidden, and the logic is internal to the PrefixQuery. I don't want to know myself how it is built.\n\nI agree with exposing the compiled automaton. But I still think PrefixQuery and WildcardQuery would benefit from a new constructor. And this constructor cannot really take any automaton as parameter, it could potentially break the prefix/wildcard contract. So, to me, PrefixQuery and WildcardQuery should have their copy constructor.\nShould PrefixQuery & WildcardQuery & TermRangeQuery have the same constructors too?\nI indeed prepared the same copy constructors for these classes. I didn't have time to resubmit the patch yet, but that's the idea, yes. ",
            "author": "Bruno Roustant"
        },
        {
            "id": "comment-16380260",
            "date": "2018-02-28T12:56:35+0000",
            "content": "-1 to a copy constructor. This is java! ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16380407",
            "date": "2018-02-28T14:48:57+0000",
            "content": "Robert Muir could you be a little more explicit?\n\nWithout context I don't understand why a copy constructor is bad in Java in general.\n\nDo you mean you prefer a copy method?\n\nPrefixQuery copy(String field) ",
            "author": "Bruno Roustant"
        },
        {
            "id": "comment-16385268",
            "date": "2018-03-04T18:05:50+0000",
            "content": "I understand why it helps in your case but searching over lots of fields is a bad practice so I would rather not design APIs specifically to address this problem. I don't like the idea of adding expert APIs to high-level queries like PrefixQuery, WildcardQuery or TermRangeQuery: there should be a single way to construct those queries and it should be simple. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16385272",
            "date": "2018-03-04T18:16:22+0000",
            "content": "So the path forward is:\n\n\tAdd a constructor to AutomatonQuery that accepts a CompiledAutomaton.\n\tAdd a getter for this CompiledAutomaton to AutomatonQuery\n\n\n\nNo changes to AQ subclasses. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16385277",
            "date": "2018-03-04T18:20:21+0000",
            "content": "I don't think we should add this CompiledAutomaton stuff to the public api. Its an internal implementation detail.\n\nIt also doesn't match what the user expects since it does strange things for low-level efficiency such as conversion to UTF-8. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16385824",
            "date": "2018-03-05T09:02:13+0000",
            "content": "Ok. I'll let you guys decide whether to discard this patch.\n\nAdrien Grand I'm curious about searching a lot of fields.\nsearching over lots of fields is a bad practice\nCould you tell me the reason for the bad practice? Is it due to bad performance impact? Are there other reasons by design?\n\nGenerally customer organizations love to have lots of fields. While I agree that sometimes they should revisit their data partitioning, there are cases where searching many fields help (e.g. CRM, field level security,\u00a0ML ranking model based on field matches) ",
            "author": "Bruno Roustant"
        }
    ]
}