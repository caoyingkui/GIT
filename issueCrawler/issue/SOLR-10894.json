{
    "id": "SOLR-10894",
    "title": "Streaming expressions handling of escaped special characters bug",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "streaming expressions"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Streaming expressions expect all special characters in named parameter values to be singly escaped. Since queries can contain strings surrounded by double quotes, double-escaping is necessary.\n\nGiven the following query: \nsummary:\"\\\"This is a summary\\\"+\"\nA streaming expression would require surrounding the query with double quotes, therefore every special character in the query should be escaped: \nselect(collection,q=\"\\\"\\\\\\\"This is a summary\\\\\\\"\\\\\\+\\\"\",....)\n\nStreaming expressions should unescape the strings contained within double quotes, however currently they are only unescaping \\\" -> \". Therefore it is impossible to query for text fields containing double quotes. Also other special characters are not unescaped; this inconsistency causes confusion.",
    "attachments": {
        "SOLR-10894.patch": "https://issues.apache.org/jira/secure/attachment/12945031/SOLR-10894.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-10-22T14:26:37+0000",
            "content": "My testing seems to indicate that this is now working at the expression parser level, though the annotate seems to say the relevant code came in in 2015, so maybe\u00a0this crops up as a url encoding issue when we distribute the query (note the '+' )? Also note that the supplied slash escaped expression doesn't work in java since + isn't a\u00a0legal escape sequence. Attaching patch verifying this works at the expression level in java (minus the illegal escape sequence)\u00a0 ",
            "author": "Gus Heck",
            "id": "comment-16659039"
        }
    ]
}