{
    "id": "SOLR-4100",
    "title": "commitWithin (soft commit = true): version number of master index not changed => no replication to slave is done!",
    "details": {
        "affect_versions": "4.0",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "replication (java)"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "I have a master and a slave solr instance. In solrconfig.xml, a replication handler is present (slave points to master via masterUrl).\n\n1) If you add a document to the master solr via curl http:// ....: This works and the document is replicated to the slave.\n\n2) If you add a document in Java via solrj and use the following code snippet:\npublic static void main(String[] args) throws Exception {\n    ConcurrentUpdateSolrServer solrServer = \n        SolrServerFactory.createSolrServerForUpdate(\"localhost\", \"9100\",  \n        \"/solr\", \"eventlocation\", 5, 2);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"TEST_ID\");\n    doc.addField(\"title\", \"some test title\");\n    UpdateResponse urep = solrServer.add(doc);\n    System.out.println(\"response status: \"+urep.getStatus());\n    solrServer.commit();\n}\n\nThis works and the document is replicated to the slave.\nThe logfile states as following:\n\nINFO: [eventlocation] webapp=/solr path=/update params=\n{wt=javabin&version=2} {add=[TEST_ID]} 0 249\n21.11.2012 08:31:19 org.apache.solr.update.DirectUpdateHandler2 commit\nINFO: start commit{flags=0,_version_=0,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=false}\n21.11.2012 08:31:19 org.apache.solr.core.SolrDeletionPolicy onCommit\nINFO: SolrDeletionPolicy.onCommit: commits:num=2\n\tcommit{dir=C:\\temp\\nimela\\searchapp\\master\\nimela\\solr\\eventlocation\\data\\index,segFN=segments_2,generation=2,filenames=[_0_Lucene40_0.tim, _0.fnm, _0_Lucene40_0.frq, _0_nrm.cfe, _0_1.del, segments_2, _0.fdx, _0_nrm.cfs, _0.si, _0_Lucene40_0.prx, _0.fdt, _0_Lucene40_0.tip]\n\tcommit{dir=C:\\temp\\nimela\\searchapp\\master\\nimela\\solr\\eventlocation\\data\\index,segFN=segments_3,generation=3,filenames=[_1_Lucene40_0.tim, _1_nrm.cfs, _0_Lucene40_0.tim, _0.fnm, _1_Lucene40_0.frq, _0_1.del, _0_nrm.cfs, _0_Lucene40_0.prx, _1.fnm, _1_Lucene40_0.prx, _1_Lucene40_0.tip, _1_nrm.cfe, _0_Lucene40_0.tip, _1.fdx, _0_Lucene40_0.frq, _1.fdt, _1.si, _0_nrm.cfe, _0.fdx, _0.si, segments_3, _0.fdt]\n21.11.2012 08:31:19 org.apache.solr.core.SolrDeletionPolicy updateCommits\nINFO: newest commit = 3\n\n3) If you add a document in Java via solrj and use the following code snippet:\n\npublic static void main(String[] args) throws Exception {\n    ConcurrentUpdateSolrServer solrServer = \n        SolrServerFactory.createSolrServerForUpdate(\"localhost\", \"9100\",  \n        \"/solr\", \"eventlocation\", 5, 2);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"TEST_ID_DUE\");\n    doc.addField(\"title\", \"some test title for due\");\n    UpdateResponse urep = solrServer.add(doc, 10000); //commit within 10s.\n    System.out.println(\"response status: \"+urep.getStatus());\n}\n\nThis works on the master, but the version number is left the same, so that replication doesn't take place, leaving the slave in the previous state. \nThis is certainly a bug and should be fixed.\n\nThe logfile states as following:\n\nINFO: [eventlocation] webapp=/solr path=/update params={wt=javabin&version=2}\n \n{add=[TEST_ID_DUE]}\n 0 249\nINFO: start commit\n{flags=0,_version_=0,optimize=false,openSearcher=true,waitSearcher=true,expungeDeletes=false,softCommit=true}\n21.11.2012 08:37:30 org.apache.solr.search.SolrIndexSearcher <init>\nINFO: Opening Searcher@18590c5 main\n21.11.2012 08:37:30 org.apache.solr.update.DirectUpdateHandler2 commit\nINFO: end_commit_flush\n\nIt seams to me that this softCommit mechanism doesn't work properly yet.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Martin Ruckli",
            "id": "comment-13501811",
            "date": "2012-11-21T09:53:05+0000",
            "content": "Hi Roland\nIf you look at the Dokumentation at http://wiki.apache.org/solr/SolrReplication you can see a note in the first paragraph which states that there is a new push-style replication when SolrCloud is used which should solve your problem.\n\nThe replication of Solr is file based, as a soft-commit only adds the document in memory there is no way of replicating it to the slaves with the normal replication process\n\nHave you tried the same with SolrCloud? http://wiki.apache.org/solr/SolrCloud I guess it should work out of the box with it.\n\nBy the way: you should use the {code} macro to make your code snippets and log files more readable "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13501950",
            "date": "2012-11-21T13:15:57+0000",
            "content": "Whole index replication requires a hard commit first. "
        },
        {
            "author": "Roland Deck",
            "id": "comment-13501984",
            "date": "2012-11-21T13:58:26+0000",
            "content": "Hi Yonik\n\n1) solr 3.6.0 and solrServer.add(docs, commitWithinMs) => hard commit and replication to slave done\n2) solr 4.0.0 and solrServer.add(docs, commitWithinMs) => soft commit and therefore no replication to slave done\n\nIs this behavior wished or a bug?\n\nGreeting Roland Deck "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13502023",
            "date": "2012-11-21T14:50:51+0000",
            "content": "Is this behavior wished or a bug?\n\nIt's by design for commitWithin to be soft by default - the idea was that most people were using commitWithin only to make their documents visible to search, not to trigger replication. "
        },
        {
            "author": "Roland Deck",
            "id": "comment-13502352",
            "date": "2012-11-21T22:00:32+0000",
            "content": "For me, it should not make a difference whether I use solrServer.add(docs); solrServer.commit(); to do an explicit commit or whether I use solrServer.add(docs, commitWithinMsTime); to make the solrServer do the commit within a certain time span.\n\nWhy should these 2 kinds of commits be different? In solr 3.6.0 they weren't, now in solr 4.0.0 they are.\nFor me, this behavior is not logical and hence a bug.\n\nThe other problem is, even when I do a solrServer.commit() after the soft commit, this will not trigger the replication because this second hard commit will have nothing to commit.\nOf course, one could use curl and add or update a dummy document and do a commit afterwards, but that would be really weird wouldn't it? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13502379",
            "date": "2012-11-21T22:26:19+0000",
            "content": "Why should these 2 kinds of commits be different? In solr 3.6.0 they weren't, now in solr 4.0.0 they are.\n\nIn the past, commit was both about update visibility and update durability.  The NRT reopen acted to decouple these concepts.\nI made a judgement call that the uses of commitWithin were normally much more about visibility than durability, and that on balance it was better to default commitWithin to \"soft\".  I understand if you consider it a bug, it is a change in behavior from the past, but it was also intentional.\n\nThe other problem is, even when I do a solrServer.commit() after the soft commit, this will not trigger the replication because this second hard commit will have nothing to commit.\n\nThat would definitely be a bug.  Have you seen this behavior? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13502380",
            "date": "2012-11-21T22:27:52+0000",
            "content": "Also: what polling frequency do you use for the slaves to check the master?\nThe stock solr server in 4.0 has a 15 second hard auto-commit by default. "
        },
        {
            "author": "Roland Deck",
            "id": "comment-13502619",
            "date": "2012-11-22T07:09:06+0000",
            "content": "I ran the following program:\n\nTestAnalyzeBugIndexingSolr4_0_0.java\npublic static void main(String[] args) throws Exception {\n    System.out.println(\"TestAnalyzeBugIndexingSolr4_0_0 started.\");\n    ConcurrentUpdateSolrServer solrServer = SolrServerFactory.createSolrServerForUpdate(\"localhost\", \"9100\", \"/solr\", \"eventlocation\", 5, 2);\n    SolrInputDocument doc = new SolrInputDocument();\n    doc.addField(\"id\", \"TEST_ID_COMMIT_WITHIN_AND_COMMIT_AFTERWARDS.\");\n    doc.addField(\"doctype\", 1);\n    doc.addField(\"title\", \"some test title for commit within 10000 ms and commit afterwards.\");\n    UpdateResponse urep = solrServer.add(doc, 10000); //commit within 10s.\n    System.out.println(\"response status: \"+urep.getStatus());\n    Thread.sleep(15000); //sleep 15s to be sure the commit within was done.\n    solrServer.commit(); //explicit commit\n    System.out.println(\"TestAnalyzeBugIndexingSolr4_0_0 finished.\");\n}\n\n\n\nAfterwards (i.e. after commit within and explicit commit), the replication was triggered. This works as it should. "
        },
        {
            "author": "Senthuran Sivananthan",
            "id": "comment-13564411",
            "date": "2013-01-28T16:59:09+0000",
            "content": "We ran into this at a project as well.  This project isn't using SolrCloud so wondering if the following is possible:\n\n1.  If SolrCloud implementation, then keep the current behaviour\n\na) solr 3.6.0 and solrServer.add(docs, commitWithinMs) => hard commit and replication to slave done\nb) solr 4.0.0 and solrServer.add(docs, commitWithinMs) => soft commit and therefore no replication to slave done\n\n2.  If Master/Slave\n\nAllow commitWithin to be hard commit\n\nI guess the larger question is whether Solr needs to have master/slave and SolrCloud or just SolrCloud going forward. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13564438",
            "date": "2013-01-28T17:46:29+0000",
            "content": "This feature is related to nrt, not SolrCloud. I'd suggest opening a feature request that let's you modify the default behavior. "
        },
        {
            "author": "Senthuran Sivananthan",
            "id": "comment-13564450",
            "date": "2013-01-28T17:59:56+0000",
            "content": "I've created a new feature request to modify the default behaviour.  Please see SOLR-4370.  Thanks! "
        }
    ]
}