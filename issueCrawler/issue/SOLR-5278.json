{
    "id": "SOLR-5278",
    "title": "Can create an index with a custom codec, but not load it",
    "details": {
        "affect_versions": "4.0,                                            4.4",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "This really is a case where Solr could display a helpful error message about incomplete configuration of a custom codec.\n\nI created a custom codec and set it in the codecFactory directive in solrconfig.xml, but didn't create an org.apache.lucene.codecs.Codec file.  When I ran Solr for the first time, it works fine:  I can post new data and query.  Also, if I stop Solr, delete the data directory, and start Solr again, it works fine.  But when I stop Solr and start again, I get this error:\n\n2380 [coreLoadExecutor-3-thread-1] ERROR org.apache.solr.core.CoreContainer  \u00fb Unable to create core: collection1\norg.apache.solr.common.SolrException: Error opening new searcher\n...\nCaused by: org.apache.solr.common.SolrException: Error opening new searcher\n...\nCaused by: org.apache.solr.common.SolrException: Error opening Reader\n...\nCaused by: java.lang.IllegalArgumentException: A SPI class of type org.apache.lucene.codecs.Codec with name 'EncryptedStoredFieldsCodec' does not exist. You need to add the corresponding JAR file supporting this SPI to your classpath. The current classpath supports the following names: [SimpleText, Appending, Lucene40, Lucene3x, Lucene41, Lucene42]\n        at org.apache.lucene.util.NamedSPILoader.lookup(NamedSPILoader.java:109)\n...\n\nMy JAR is definitely in the classpath.  It has my .class files, but no org.apache.lucene.codecs.Codec file.  I believe this error condition will be easy to repro, but contact me if it's not.\n\nChris Hostetter asked me to file this.  His suggested fix is that, when Solr uses the configured codec factory, it should test whether SPI can find the corresponding custom codec.  If not, it should throw an exception with a clear error message.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13779423",
            "date": "2013-09-26T23:06:32+0000",
            "content": "This is not a configuration error. The problem is a \"bug\" in your JAR file which does not have the codecs listed in its metadata. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13779428",
            "date": "2013-09-26T23:10:41+0000",
            "content": "But in any case, this would also a good additional check for IndexWriter, so maybe do this in IndexWriter instead of Solr: The custom codec passed in the IndexWriterConfig should be checked, if it can be found by name using SPI. If not, throw Exception. By this we can check early that a codec cannot work and don't let the user crash when he opens an IndexWriter for the first time. The issue with Solr is the use of NRT readers, which know the codec from IndexWriter. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13779441",
            "date": "2013-09-26T23:20:45+0000",
            "content": "The problem is a \"bug\" in your JAR file which does not have the codecs listed in its metadata.\n\ncorrect - but the bug doesn't manifest itself until long after the index has already been created with teh buggy codec - making it really hard to tell you have a problem in your codec jar.  Afterall: you start up your app, your codec is clearly getting used because you see the index being created and you can search it \u2013 it's only later when you restart the app and it tires to open the files on disk that you have a problem.\n\nI asked Scott to open this so we could look into having something/somewhere in solr/lucene fail fast if you tried to \"write\" segment(s) with a codec that wasn't going to be resolvable with SPI later when you tied to \"read\" those segments with the same classpath.\n\nI have no strong opinion about wether this should be in IndexWriter, or somewhere in Solr when it's initializing the codec factory. "
        }
    ]
}