{
    "id": "LUCENE-2036",
    "title": "Underlying Spatial Logic does not work in Remote Settings",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spatial"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.9",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "I am using Lucene in a distributed setup.\n\nI have a remote Searcher on another machine executing the methods in Searcher. For regular text searches I have no problem. For the Spatial contrib (according to examples provided) there is underlying logic that is lost when the Filter and Sort get serialized. I've attached a junit test case that shows when I mimic Java RMI (by serializing the objects and read it back) I get a null pointer exception. I believe it has to do with the Sort (or Filter) referencing objects in the other  class Filter (or Sort)",
    "attachments": {
        "LuceneSpatialTest.java": "https://issues.apache.org/jira/secure/attachment/12424155/LuceneSpatialTest.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-11-05T21:25:42+0000",
            "content": "JUnit test illustrating the problem ",
            "author": "Joey Surls",
            "id": "comment-12774083"
        },
        {
            "date": "2009-11-06T00:18:49+0000",
            "content": "This is a tricky one. The DistanceFilter and its derivatives fill a distance map for each document in the index. the FieldComparator you use for sorting depends on the filter you pass to the search method. in the local environment they are the same instances but in the remote scenario those instances are not the same. In turn, the distance map is not filled so you get a null value which is then auto boxed into a double value on sorting. This scenario is just not gonna work with remote searchable. \n\nI guess we won't fix this until spatial is cleaned up / rewritten. \nAnyway, what are you using remote searchable for, what is your usecase? Did you think about solving you problem with some other technology?\n ",
            "author": "Simon Willnauer",
            "id": "comment-12774142"
        },
        {
            "date": "2009-11-06T02:15:46+0000",
            "content": "This is unfortunate.\n\nThe use case is the following: I am working with a large index that doesn't fit on a single machine. I can split it into multiple indexes on various machines. I can then use ParallelMultiSearcher to query across the indexes and aggregate the results. Making this a remote ParallelMultiSearcher is pretty trivial b/c of the well designed Lucene APIs.\n\nI do not want to have to go back and change code to be aware of the remote protocol. Instead I should be able to implement a Searcher that has some smarts built in it to know how to find the right remote Searcher to query. Then b/c of inversion of control I could then swap out the remote searcher with the local one in my spring app context xml.\n\n\nIs there any idea as to when the spatial code is going to be rewritten? ",
            "author": "Joey Surls",
            "id": "comment-12774187"
        },
        {
            "date": "2009-11-06T17:34:45+0000",
            "content": "Is there any idea as to when the spatial code is going to be rewritten?\nTo be honest I have no idea. But patches are very very welcome as always! You can just go ahead and try fixing things, open an issue and we will take care of it together. \nMy other impression is that remote / RMI might go away before spatial gets the love it needs too so you might better go another direction and change the way you search your distributed indexes though.\n ",
            "author": "Simon Willnauer",
            "id": "comment-12774326"
        }
    ]
}