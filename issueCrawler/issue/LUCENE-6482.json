{
    "id": "LUCENE-6482",
    "title": "Class loading deadlock relating to Codec initialization, default codec and SPI discovery",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "4.9.1",
        "components": [
            "core/codecs"
        ],
        "labels": "",
        "fix_versions": [
            "5.2.1",
            "5.3",
            "6.0"
        ],
        "priority": "Critical",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "This issue came up for us several times with Elasticsearch 1.3.4 (Lucene 4.9.1), with many threads seeming deadlocked but RUNNABLE:\n\n\"elasticsearch[search77-es2][generic][T#43]\" #160 daemon prio=5 os_prio=0 tid=0x00007f79180c5800 nid=0x3d1f in Object.wait() [0x00007f79d9289000]\n   java.lang.Thread.State: RUNNABLE\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:359)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:457)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:912)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:758)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:453)\n\tat org.elasticsearch.common.lucene.Lucene.readSegmentInfos(Lucene.java:98)\n\tat org.elasticsearch.index.store.Store.readSegmentsInfo(Store.java:126)\n\tat org.elasticsearch.index.store.Store.access$300(Store.java:76)\n\tat org.elasticsearch.index.store.Store$MetadataSnapshot.buildMetadata(Store.java:465)\n\tat org.elasticsearch.index.store.Store$MetadataSnapshot.<init>(Store.java:456)\n\tat org.elasticsearch.index.store.Store.readMetadataSnapshot(Store.java:281)\n\tat org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.listStoreMetaData(TransportNodesListShardStoreMetaData.java:186)\n\tat org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.nodeOperation(TransportNodesListShardStoreMetaData.java:140)\n\tat org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.nodeOperation(TransportNodesListShardStoreMetaData.java:61)\n\tat org.elasticsearch.action.support.nodes.TransportNodesOperationAction$NodeTransportHandler.messageReceived(TransportNodesOperationAction.java:277)\n\tat org.elasticsearch.action.support.nodes.TransportNodesOperationAction$NodeTransportHandler.messageReceived(TransportNodesOperationAction.java:268)\n\tat org.elasticsearch.transport.netty.MessageChannelHandler$RequestHandler.run(MessageChannelHandler.java:275)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n\nIt didn't really make sense to see RUNNABLE threads in Object.wait(), but this seems to be symptomatic of deadlocks in static initialization (http://ternarysearch.blogspot.ru/2013/07/static-initialization-deadlock.html).\n\nI found LUCENE-5573 as an instance of this having come up with Lucene code before.\n\nI'm not sure what exactly is going on, but the deadlock in this case seems to involve these threads:\n\n\n\"elasticsearch[search77-es2][clusterService#updateTask][T#1]\" #79 daemon prio=5 os_prio=0 tid=0x00007f7b155ff800 nid=0xd49 in Object.wait() [0x00007f79daed8000]\n   java.lang.Thread.State: RUNNABLE\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:408)\n\tat java.lang.Class.newInstance(Class.java:433)\n\tat org.apache.lucene.util.NamedSPILoader.reload(NamedSPILoader.java:67)\n\t- locked <0x000000061fef4968> (a org.apache.lucene.util.NamedSPILoader)\n\tat org.apache.lucene.util.NamedSPILoader.<init>(NamedSPILoader.java:47)\n\tat org.apache.lucene.util.NamedSPILoader.<init>(NamedSPILoader.java:37)\n\tat org.apache.lucene.codecs.PostingsFormat.<clinit>(PostingsFormat.java:44)\n\tat org.elasticsearch.index.codec.postingsformat.PostingFormats.<clinit>(PostingFormats.java:67)\n\tat org.elasticsearch.index.codec.CodecModule.configurePostingsFormats(CodecModule.java:126)\n\tat org.elasticsearch.index.codec.CodecModule.configure(CodecModule.java:178)\n\tat org.elasticsearch.common.inject.AbstractModule.configure(AbstractModule.java:60)\n\t- locked <0x000000061fef49e8> (a org.elasticsearch.index.codec.CodecModule)\n\tat org.elasticsearch.common.inject.spi.Elements$RecordingBinder.install(Elements.java:204)\n\tat org.elasticsearch.common.inject.spi.Elements.getElements(Elements.java:85)\n\tat org.elasticsearch.common.inject.InjectorShell$Builder.build(InjectorShell.java:130)\n\tat org.elasticsearch.common.inject.InjectorBuilder.build(InjectorBuilder.java:99)\n\t- locked <0x000000061fef4c10> (a org.elasticsearch.common.inject.InheritingState)\n\tat org.elasticsearch.common.inject.InjectorImpl.createChildInjector(InjectorImpl.java:131)\n\tat org.elasticsearch.common.inject.ModulesBuilder.createChildInjector(ModulesBuilder.java:69)\n\tat org.elasticsearch.indices.InternalIndicesService.createIndex(InternalIndicesService.java:296)\n\t- locked <0x000000061fef4cd0> (a org.elasticsearch.indices.InternalIndicesService)\n\tat org.elasticsearch.indices.cluster.IndicesClusterStateService.applyNewIndices(IndicesClusterStateService.java:312)\n\tat org.elasticsearch.indices.cluster.IndicesClusterStateService.clusterChanged(IndicesClusterStateService.java:181)\n\t- locked <0x000000061fef4e70> (a java.lang.Object)\n\tat org.elasticsearch.cluster.service.InternalClusterService$UpdateTask.run(InternalClusterService.java:444)\n\tat org.elasticsearch.common.util.concurrent.PrioritizedEsThreadPoolExecutor$TieBreakingPrioritizedRunnable.run(PrioritizedEsThreadPoolExecutor.java:153)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n\n\n\"elasticsearch[search77-es2][generic][T#1]\" #80 daemon prio=5 os_prio=0 tid=0x00007f794400a000 nid=0xd4b in Object.wait() [0x00007f79dac56000]\n   java.lang.Thread.State: RUNNABLE\n\tat org.apache.lucene.codecs.simpletext.SimpleTextCodec.<init>(SimpleTextCodec.java:37)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:408)\n\tat java.lang.Class.newInstance(Class.java:433)\n\tat org.apache.lucene.util.NamedSPILoader.reload(NamedSPILoader.java:67)\n\t- locked <0x000000061fcf1f50> (a org.apache.lucene.util.NamedSPILoader)\n\tat org.apache.lucene.util.NamedSPILoader.<init>(NamedSPILoader.java:47)\n\tat org.apache.lucene.util.NamedSPILoader.<init>(NamedSPILoader.java:37)\n\tat org.apache.lucene.codecs.Codec.<clinit>(Codec.java:41)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:359)\n\tat org.apache.lucene.index.SegmentInfos$1.doBody(SegmentInfos.java:457)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:912)\n\tat org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:758)\n\tat org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:453)\n\tat org.elasticsearch.common.lucene.Lucene.readSegmentInfos(Lucene.java:98)\n\tat org.elasticsearch.index.store.Store.readSegmentsInfo(Store.java:126)\n\tat org.elasticsearch.index.store.Store.access$300(Store.java:76)\n\tat org.elasticsearch.index.store.Store$MetadataSnapshot.buildMetadata(Store.java:465)\n\tat org.elasticsearch.index.store.Store$MetadataSnapshot.<init>(Store.java:456)\n\tat org.elasticsearch.index.store.Store.readMetadataSnapshot(Store.java:281)\n\tat org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.listStoreMetaData(TransportNodesListShardStoreMetaData.java:186)\n\tat org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.nodeOperation(TransportNodesListShardStoreMetaData.java:140)\n\tat org.elasticsearch.indices.store.TransportNodesListShardStoreMetaData.nodeOperation(TransportNodesListShardStoreMetaData.java:61)\n\tat org.elasticsearch.action.support.nodes.TransportNodesOperationAction$NodeTransportHandler.messageReceived(TransportNodesOperationAction.java:277)\n\tat org.elasticsearch.action.support.nodes.TransportNodesOperationAction$NodeTransportHandler.messageReceived(TransportNodesOperationAction.java:268)\n\tat org.elasticsearch.transport.netty.MessageChannelHandler$RequestHandler.run(MessageChannelHandler.java:275)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n\nFull thread dump: https://gist.github.com/shikhar/d0f6d2d008f45d2d4f91",
    "attachments": {
        "CodecLoadingDeadlockTest.java": "https://issues.apache.org/jira/secure/attachment/12738149/CodecLoadingDeadlockTest.java",
        "LUCENE-6482-failingtest.patch": "https://issues.apache.org/jira/secure/attachment/12738194/LUCENE-6482-failingtest.patch",
        "LUCENE-6482.patch": "https://issues.apache.org/jira/secure/attachment/12738154/LUCENE-6482.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14544336",
            "author": "Uwe Schindler",
            "date": "2015-05-14T20:46:41+0000",
            "content": "Hi,\nthe problem here has nothing to do with NamedSPILoader, just how Codecs are initialized. The problem can be one of the following:\n\n\tthere is one codec in the classpath that uses a wrong initialization like the issue you mentioned (LUCENE-5573). The problematic thing is in most cases a Codec/PostingsFormat/DocValuesFormat.forName() in a static initializer. We also have this in Lucene, but the order is important here. I don't like this, but code is not manageable otherwise. So order of static class initialization is important. If one of the codecs hangs in one of such clinit locks, the stack trace is easy. All those threads that seem to hang while RUNNING are blocked, because they access a class that is currently in initialization phase (as you said).\n\tElasticsearch has several own codecs, maybe those had a bug as described before. 1.3.4 is a older one, maybe update to latest 1.3.9 version. We have never seen this with plain Lucene.\n\n\n\nIn addition, make sure that you use latest JVM versions. several Java 7 realeases had class loading bugs with deadlocks (e.g. 1.7.0_25). To me it looks more like one of those issues, because otherwise other people would have reported bugs like this already.\n\nWhat is your Java version? Any special JVM settings?\n\nUwe "
        },
        {
            "id": "comment-14544349",
            "author": "Shikhar Bhushan",
            "date": "2015-05-14T20:56:58+0000",
            "content": "Uwe Schindler This was seen on JDK8u5, but I think this has also happened on JDK8u25 (not certain though...). \n\nThe issue is not deterministic and comes up during cluster bounces sometimes, so it's hard to say whether an ES upgrade fixes it.\n\nYou're probably right that this has nothing to do with NamedSPILoader but the classes being loaded. Is it possible to conclude from the thread dump whether an ES or Lucene Codec/PostingsFormat/etc is involved? "
        },
        {
            "id": "comment-14544392",
            "author": "Uwe Schindler",
            "date": "2015-05-14T21:24:08+0000",
            "content": "The issue is not deterministic and comes up during cluster bounces sometimes, so it's hard to say whether an ES upgrade fixes it.\n\nI have no idea what you mean with \"cluster bounce\", but this should only happen during startup of Elasticsearch nodes: From the last 2 stack traces, you see that there are 2 things happening in parallel: Loading of Codec.class (because an Index was opened), but in parallel, Elasticsearch seems to initialize the PostingsFormats.class in the class CodecModule (Elasticsearch). In my opinion, this should not happen in parallel, but a fix would maybe that CodecModule should also call Codecs.forName() so those classes are initialized sequentially at one single place. The problem with Codec.class and PostingsFormat.class clinit running in parallel in different threads may have similar effects like you have seen in the blog post (Codecs depend on PostingsFormat and some PostingsFormats depend on the Codec class, which then hangs if PostingsFormats and Codecs are initialized from 2 different threads at same time, waiting for each other). But we have no chance to prevent this (unfortunately).\n\nI cannot say for sure, but something seems to be fishy while initializing Elasticsearch, because there is too much happening at the same time. In my opinion, Codecs and Postingsformats and Docvalues classes should be initialized sequentially, but I have no idea how to enforce this. "
        },
        {
            "id": "comment-14544428",
            "author": "Shikhar Bhushan",
            "date": "2015-05-14T21:54:09+0000",
            "content": "Thanks Uwe Schindler, makes sense and it does not seem like a Lucene issue, so I'll close this.\n\nIt might have been due to using a custom Elasticsearch discovery plugin which is purely asynchronous that those 2 bits ended up happening in parallel, and caused the deadlock. "
        },
        {
            "id": "comment-14550794",
            "author": "Shikhar Bhushan",
            "date": "2015-05-19T17:15:01+0000",
            "content": "Reopening as per discussion in https://github.com/elastic/elasticsearch/issues/11170 "
        },
        {
            "id": "comment-14551086",
            "author": "Uwe Schindler",
            "date": "2015-05-19T19:41:54+0000",
            "content": "Thanks for reopening. At the moment I am not 100% sure if not using Codec.forName() really solves the problem... I have to write some test that emulates concurrent inits on Codec/PostingsFormat/... This is a all a bit tricky and without knowing what the JVM really does on class init, its hard to tell. The blog post you posted says the same: looks like a bug in JVM but is hard to reproduce and explain why this happens.\n\nI may have to dig first. In any case, for now I would ensure to initialize the Codec/PostingsFormat classes early on startup as workaround. I just want to fully understand whats happening. "
        },
        {
            "id": "comment-14575165",
            "author": "Shikhar Bhushan",
            "date": "2015-06-05T20:18:51+0000",
            "content": "Uwe Schindler I have had some luck reproducing the problem quite consistently with the attached test. If you uncomment the first line in the main() so that Codec is previously initialized before the threads start, the deadlock doesn't happen. "
        },
        {
            "id": "comment-14575221",
            "author": "Uwe Schindler",
            "date": "2015-06-05T21:05:29+0000",
            "content": "Many thanks. Maybe my test was too complicated (I used IndexReaders to reproduce your usecase). This is much easier. I think it might be even easier to reproduce if you use a CyclicBarrier for starting both threads at the exact same time.\n\nOnce I reproduced I will check into fixing this. I already had the idea to synchronize the ServiceLoader component by Lucene against a single static lock instance. But it is good to have a reproduce case. So I can better check that a fix is effective. "
        },
        {
            "id": "comment-14575639",
            "author": "Shikhar Bhushan",
            "date": "2015-06-06T08:50:55+0000",
            "content": "Thanks Uwe. I have actually not had a single occasion of not encountering the deadlock, just these lines do the trick every time\n\n\n  public static void main(String... args) {\n    final Thread t1 = new Thread(() -> Codec.getDefault());\n    final Thread t2 = new Thread(() -> new SimpleTextCodec());\n\n    t1.start();\n    t2.start();\n  }\n\n\n\nI am using JDK8u25. "
        },
        {
            "id": "comment-14575651",
            "author": "Uwe Schindler",
            "date": "2015-06-06T09:55:23+0000",
            "content": "Thanks! I will also look into SimpleTextCodec, because in all your stack traces, this codec was affected. Did you also try with other codecs? "
        },
        {
            "id": "comment-14575652",
            "author": "Uwe Schindler",
            "date": "2015-06-06T09:57:33+0000",
            "content": "SimpleTextCodec alone cannot be the bad guy... I'll still digging. "
        },
        {
            "id": "comment-14575654",
            "author": "Uwe Schindler",
            "date": "2015-06-06T10:04:57+0000",
            "content": "I can easily reproduce this!\n\nI will now try to \"synchronize\" the serviceloader class, so we make sure that the classpath scanning is done sequentially. "
        },
        {
            "id": "comment-14575656",
            "author": "Uwe Schindler",
            "date": "2015-06-06T10:17:20+0000",
            "content": "I fails with every codec. The issue happens only if you call Codec.forName() at the same time as using the constructor of any Codec subclass.\n\nI have no idea how we should prevent that. I tried to synchronize NamedSPILoader, but that did not help. The problem is that this is a special type of deadlock that does not really involve \"standard Java locks\". It is more the JVM internal prevent to initialize a subclass before the parent class is initialized. "
        },
        {
            "id": "comment-14575660",
            "author": "Uwe Schindler",
            "date": "2015-06-06T10:32:36+0000",
            "content": "From digging around, the main problem is basically the following:\n\n\tThe JVM requires that a parent class must be initialized before the child class\n\tBut there is a \"special case\": A parent class is allowed to initialize subclasses from its static initializers (so stuff like our setup works). This is documented in the JLS.\n\tBut another thread is not allowed to initialize subclasses at the same time.\n\n\n\nThis basically leads to the deadlock we are seeing here. We have a not yet fully initialized Codec parent class. The other thread is creating an instance of a subclass directly. But while initializing this subclass, it waits for the parent class to get available. But the parent class is currently scanning classpath and creating instances of all available codecs. While doing this it tries to create an instance of exactly the same class that the other thread is instantiating directly using new(). And this is the deadlock. "
        },
        {
            "id": "comment-14575681",
            "author": "Uwe Schindler",
            "date": "2015-06-06T10:53:56+0000",
            "content": "The only workaround I see is the following:\n\n\tMove the ServiceLoader, forName, and classpath scanning out of <clinit> of Codec (same for PostingsFormat and DocValuesFormat) into separate pkg-private classes (or static inner classes). Let Codec.forName() delegate there. In addition dont call Codec.forName() inside clinit of codec, so initialize the default codec via new.\n\n\n\nI will try to implement this, unfortunately the code is no longer as nice as now. I digged around: IBM's ICU has similar hacks to prevent this type of stuff while loading Locales or Charsets. "
        },
        {
            "id": "comment-14575691",
            "author": "Uwe Schindler",
            "date": "2015-06-06T11:13:28+0000",
            "content": "Attached ypu will find a patch that solves the issue.\n\nI may only need to check SmokeTester that it can \"identify\" the new pattern. With this patch the deadlock is prevented, because a separate, hidden Helper class is used that holds 2 things: The Serviceloader and the default Codec. Initialization is delayed until is accessed first, so a deadlock can never happen.\n\nI had to remove the checks that code may call forName() from subclasses ctor (which now works), but may add the deadlock again. So I'll find a way to detect this (using asserts on stacktrace or whatever).\n\nShikhar Bhushan: Can you apply the patch and try to check on your side? "
        },
        {
            "id": "comment-14575696",
            "author": "Uwe Schindler",
            "date": "2015-06-06T11:36:23+0000",
            "content": "I checked SPI on the Tokenstream factories: There is no such issue:\n\n\twe don't initialize the classes\n\twe don't initialize instances until requested\n\twe have no \"default\" tokenstreams or similar\n\n "
        },
        {
            "id": "comment-14575698",
            "author": "Uwe Schindler",
            "date": "2015-06-06T11:50:02+0000",
            "content": "New patch. I renamed the inner class to \"Holder\" and added Javadocs.\n\nThe checks I removed are no longer an issue. This patch also prevents the deadlock that might happen if you call Codec.forName() from the constructor of a subclass. I would still not do this, but there is no more reason to check this - it cannot deadlock or NPE.\n\nUnfrotunately this is too late to get into 5.2, so I delay to 5.3 (or maybe 5.2.1). We should maybe put this into a 4.10.x release for those people that are affected by this and are still on 4.x. I will raise this issue's priority to \"Critical\".\n\nElasticsearch should maybe for now use the \"workaround\" by calling Codec.availableCodecs() in its Boostrap class before init. "
        },
        {
            "id": "comment-14575701",
            "author": "Uwe Schindler",
            "date": "2015-06-06T11:56:40+0000",
            "content": "I checked smoke tester. This one does not validate the Codec.forName() in Codec.java, so no changes needed.\n\nI think patch is ready. Many thanks to Shikhar Bhushan for reporting this, this is really a nasty bug  "
        },
        {
            "id": "comment-14575706",
            "author": "Uwe Schindler",
            "date": "2015-06-06T12:16:50+0000",
            "content": "This also fixes the bug that was investigated during LUCENE-4440: A filtercodec using forName() to create the delegate. This is no longer leading to issues (see above).\n\nIgnore this, the issue is still there on FilterCodec. But we have the warning in the Javadocs of FilterCodec already. I will improve the error message again... "
        },
        {
            "id": "comment-14575710",
            "author": "Uwe Schindler",
            "date": "2015-06-06T12:41:28+0000",
            "content": "Revised patch which brings back the IllegalStateExceptions for people misusing FilterCodec.\n\nI think it's ready. "
        },
        {
            "id": "comment-14575883",
            "author": "Uwe Schindler",
            "date": "2015-06-06T19:04:04+0000",
            "content": "New patch with a testcase that fails if the rest of patch is not applied (just apply LUCENE-6482-failingtest.patch to a plain checkout. This test spawns another JVM and spawns some threads to load codecs in parallel.\n\nIt is similar to Shikhar Bhushan's test, but allows to run inside the \"normal testsuite\". "
        },
        {
            "id": "comment-14576150",
            "author": "Uwe Schindler",
            "date": "2015-06-07T08:53:37+0000",
            "content": "Final patch: I improved the test to be more random.\n\nI will now commit the failing test as a first try (to trunk), because I want to check if Jenkins fails  Afterwards I will commit the fix. "
        },
        {
            "id": "comment-14576152",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T08:54:37+0000",
            "content": "Commit 1684005 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1684005 ]\n\nLUCENE-6482: Commit failing test first and wait for Jenkins failure (to prove that it works also on Unix and Linux) "
        },
        {
            "id": "comment-14576157",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T09:08:20+0000",
            "content": "Commit 1684006 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1684006 ]\n\nLUCENE-6482: Fix class loading deadlock relating to Codec initialization, default codec and SPI discovery "
        },
        {
            "id": "comment-14576160",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T09:17:55+0000",
            "content": "Commit 1684007 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684007 ]\n\nMerged revision(s) 1684005-1684006 from lucene/dev/trunk:\nLUCENE-6482: Commit failing test first and wait for Jenkins failure (to prove that it works also on Unix and Linux)\nLUCENE-6482: Fix class loading deadlock relating to Codec initialization, default codec and SPI discovery\n(+ Java 7 change: move away from Lambdas and streams API) "
        },
        {
            "id": "comment-14576161",
            "author": "Uwe Schindler",
            "date": "2015-06-07T09:20:15+0000",
            "content": "I committed the changes and backported to 5.x (without Lambdas).\n\nShould we backport to 4.10.x and 5.2.x branch, too? It would be good to hear from the Elasticsearch people if this is required or if they go with the \"simple fix\" by calling Codecs.availableCodecs() in Bootstrap.java without concurrency? "
        },
        {
            "id": "comment-14576165",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T09:33:35+0000",
            "content": "Commit 1684008 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684008 ]\n\nLUCENE-6482: Fix Java 7, which has very limited Process API (I did not notice before, as I had Java 8 as default runtime) "
        },
        {
            "id": "comment-14576169",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T09:45:53+0000",
            "content": "Commit 1684010 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684010 ]\n\nLUCENE-6482: Improve Java 7 fix "
        },
        {
            "id": "comment-14576187",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T11:09:59+0000",
            "content": "Commit 1684024 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1684024 ]\n\nLUCENE-6482: Fix detection of default codec for documentation homepage "
        },
        {
            "id": "comment-14576188",
            "author": "ASF subversion and git services",
            "date": "2015-06-07T11:10:45+0000",
            "content": "Commit 1684025 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1684025 ]\n\nMerged revision(s) 1684024 from lucene/dev/trunk:\nLUCENE-6482: Fix detection of default codec for documentation homepage "
        },
        {
            "id": "comment-14577532",
            "author": "Uwe Schindler",
            "date": "2015-06-08T17:47:24+0000",
            "content": "I will backport this to 5.2.1, because we will have a bugfix release: Regression in Solr "
        },
        {
            "id": "comment-14577619",
            "author": "ASF subversion and git services",
            "date": "2015-06-08T18:36:29+0000",
            "content": "Commit 1684242 from Uwe Schindler in branch 'dev/branches/lucene_solr_5_2'\n[ https://svn.apache.org/r1684242 ]\n\nMerged revision(s) 1684007-1684008, 1684010, 1684025 from lucene/dev/branches/branch_5x:\nLUCENE-6482: Commit failing test first and wait for Jenkins failure (to prove that it works also on Unix and Linux)\nLUCENE-6482: Fix class loading deadlock relating to Codec initialization, default codec and SPI discovery\n(+ Java 7 change: move away from Lambdas and streams API)\nLUCENE-6482: Fix Java 7, which has very limited Process API (I did not notice before, as I had Java 8 as default runtime)\nLUCENE-6482: Improve Java 7 fix\nLUCENE-6482: Fix detection of default codec for documentation homepage "
        },
        {
            "id": "comment-14578288",
            "author": "Shikhar Bhushan",
            "date": "2015-06-09T04:17:33+0000",
            "content": "Thanks for fixing this Uwe Schindler! Great digging on what was going on. The fix and the test looks good to me. "
        }
    ]
}