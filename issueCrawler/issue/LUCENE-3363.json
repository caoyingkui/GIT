{
    "id": "LUCENE-3363",
    "title": "minimizeHopcroft OOMEs on smallish (2096 states, finite) automaton",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Not sure what's up w/ this... if you check out the blocktree branch (LUCENE-3030) and comment out the @Ignore in TestTermsEnum2.testFiniteVersusInfinite then this should hit OOME: \n{[ant test-core -Dtestcase=TestTermsEnum2 -Dtestmethod=testFiniteVersusInfinite -Dtests.seed=-2577608857970454726:-2463580050179334504}\n}",
    "attachments": {
        "LUCENE-3363.patch": "https://issues.apache.org/jira/secure/attachment/12489692/LUCENE-3363.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-08-06T05:31:14+0000",
            "content": "I have no idea, too. I hope this is not caused by minimizeSchindler changes and is the orginal minimizeHopcroft. Have you tried to undo the relevant commit? It still looks strange, as there must be something totally weird going on. I am away from computer this weekend, can look into it on Monday. ",
            "author": "Uwe Schindler",
            "id": "comment-13080358"
        },
        {
            "date": "2011-08-08T14:43:04+0000",
            "content": "patch for the blocktree branch:\n\nThe issue with this automaton:\n\n\tits already minimal! so all of this work is stupid.\n\tit only has 2096 states, but sigma=3544, this is what causes the hopcroft blowup.\n\n\n\nOriginally, AutomatonQuery minimized the automaton in its ctor, but I'm not sure we should do this, the input automaton could be large and if someone wants to do this, they should do it themselves? \n\nI think my original motivation was to try to fend off any adversaries (some crazy worst-case crap that would make the query slow)... but I think this is obselete.\n\nThe patch changes this to determinize() + removeDeadTransitions() + reduce(), the first 2 operations really being all we need, but reduce() might help speed up the intersection.\n\nNote: RegExp already minimizes \"incrementally\" during its parsing, but this is one op at a time, so I think there is no problem here. I tested removing this too and replacing it with det + removeDead + reduce, but it slowed down regex parsing considerably, so I think we should continue to use minimize here.\n\nAdditionally, I optimized wildcardquery here to use the optimized concatenate() to avoid useless determinize() calls when the LHS is a string, before it was using the concatenate(List) method. ",
            "author": "Robert Muir",
            "id": "comment-13080977"
        },
        {
            "date": "2011-08-08T14:54:44+0000",
            "content": "by the way, for whatever reason the seed never OOM'ed for me, but:\nbefore:\n\n\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.index.TestTermsEnum2\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 211.474 sec\n    [junit] \n\n\n\nafter:\n\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.index.TestTermsEnum2\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.856 sec\n    [junit] \n\n ",
            "author": "Robert Muir",
            "id": "comment-13080985"
        },
        {
            "date": "2011-08-08T15:39:54+0000",
            "content": "here is the quote from the original hopcroft paper, explaining why this crazy test that uses lots of random unicode strings causes the blowup:\n\nAn algorithm is given for minimizing the number of states in a finite automaton or for\ndetermining if two finite automata are equivalent. The asymptotic running time of the\nalgorithm is bounded by knlogn where k is some constant and n is the number of\nstates. The constant k depends linearly on the size of the input alphabet.\n ",
            "author": "Robert Muir",
            "id": "comment-13081005"
        }
    ]
}