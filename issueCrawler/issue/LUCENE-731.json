{
    "id": "LUCENE-731",
    "title": "Simple attempt at adding and searching at the same time fails.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.1"
        ],
        "affect_versions": "2.0.0",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "The FAQ says that you can index and lookup simultaneously. I tried what appeared to be the simplest possible implementation of that, and the searcher never finds anything. I will attach a junit test.\n\nIf the code is working as designed, please consider this a bug in the FAQ or some other doc that there is no pattern given for how to do this.",
    "attachments": {
        "LuceneBooleanQuery.java": "https://issues.apache.org/jira/secure/attachment/12345890/LuceneBooleanQuery.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-11-28T03:14:03+0000",
            "content": "This test fails, and I'm at my wit's end as to what to do instead to get the desired behavior. ",
            "author": "Benson Margulies",
            "id": "comment-12453782"
        },
        {
            "date": "2006-11-28T03:26:37+0000",
            "content": "I think the problem here is you need to call writer.close() before you open your searcher?  The writer buffers documents in memory (default is 10) so that one doc that's added won't be flushed to disk unless you do a close. ",
            "author": "Michael McCandless",
            "id": "comment-12453784"
        },
        {
            "date": "2006-11-28T03:31:27+0000",
            "content": "Which means that I have to constantly close and recreate the searcher, as well? How is this 'simultaneous' .. ok, I see, you can search for what was stored up until the last call to close().\n\nGosh, it would be nice if there were a communications mechanism so that a call to 'commit' on a writer just caused extant searchers to catch up. And what if the index is so large that the searcher can't have loaded it entirely into memory? At very least, a flush() that saved recreation would seem helpful.\n\nIs the pattern to create searchers with short lifetimes? That seems like an expensive proposition. ",
            "author": "Benson Margulies",
            "id": "comment-12453786"
        },
        {
            "date": "2006-11-28T11:41:30+0000",
            "content": "> Gosh, it would be nice if there were a communications mechanism so that a call \n> to 'commit' on a writer just caused extant searchers to catch up.\n\nIf you don't want to handle that manually, take a look at issue 550. It contains a reader/writer/searcher factory layer called Index. Also features a decorative layer for update notification (NotifiableIndex) and a simple implementation of a AutofreshedSearcher that always is up to date with the index given you use the factory methods of Index. It is however not as fancy as the searcher warming available in Solr. ",
            "author": "Karl Wettin",
            "id": "comment-12453888"
        },
        {
            "date": "2006-11-28T12:21:49+0000",
            "content": "Tell me if another issue is apposite, or send me off to make a patch, but ...\n\nHow about if IndexWriter defined some protected methods so that a class that extended it could perform operations at index merge time? ",
            "author": "Benson Margulies",
            "id": "comment-12453900"
        },
        {
            "date": "2006-11-28T13:36:34+0000",
            "content": "benson margulies [28/Nov/06 04:21 AM]\n> Tell me if another issue is apposite, or send me off to make a patch, but ...\n>\n> How about if IndexWriter defined some protected methods so that a class that extended it could\n> perform operations at index merge time? \n\nSimply extend IndexWriter and IndexReader to decorate insert, delete and commit-method. Make sure you always use the same decorator to catch all your calls. Or use the NotifiableIndex in <http://issues.apache.org/jira/browse/LUCENE-731> as I suggested earlier. It does the same thing, plus a few more things. ",
            "author": "Karl Wettin",
            "id": "comment-12453920"
        },
        {
            "date": "2006-11-28T13:37:13+0000",
            "content": "<http://issues.apache.org/jira/browse/LUCENE-550> that is. Sorry. ",
            "author": "Karl Wettin",
            "id": "comment-12453921"
        },
        {
            "date": "2006-12-04T19:19:46+0000",
            "content": "OK, this is how Lucene is designed.\n\nI agree this was not clearly called out in the FAQs so I've added the FAQ \"Does Lucene allow searching and indexing simultaneously\":\n\n    http://wiki.apache.org/jakarta-lucene/LuceneFAQ#head-6c56b0449d114826586940dcc6fe51582676a36e ",
            "author": "Michael McCandless",
            "id": "comment-12455396"
        },
        {
            "date": "2007-02-27T18:10:36+0000",
            "content": "Closing all issues that were resolved for 2.1. ",
            "author": "Michael McCandless",
            "id": "comment-12476275"
        }
    ]
}