{
    "id": "SOLR-966",
    "title": "Enhance the map() function to take in a default value",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The map function currently takes in only one min,max target and returns the field's value if it is not between min and max. This makes it very difficult to use it for scoring. \n\nThis issue aims to add an optional fifth parameter to the map function query which will be a default value that is used if the field's value does not fall between min and max. If this parameter is not specified, the behavior is the same as before for back-compatibility.",
    "attachments": {
        "SOLR-966.patch": "https://issues.apache.org/jira/secure/attachment/12399023/SOLR-966.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12664823",
            "date": "2009-01-17T12:09:09+0000",
            "content": "I guess the problem (feature?) of map is that if the field value is not between min and max, it outputs the value of the field. That makes it difficult to use map for scoring on numeric field values.\n\nAn alternative to Noble's approach can be to add an optional fifth argument for a default value. If value does not fall between min and max, map can output the default value. However, both these approaches are mutually exclusive.\n\nThoughts? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12664848",
            "date": "2009-01-17T17:24:35+0000",
            "content": "For context, what class/component are you looking at?\n\nWhat use case are you trying to solve? "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12664851",
            "date": "2009-01-17T17:39:53+0000",
            "content": "I'm using the map function (FunctionQuery).\n\nConsider the following (hypothetical) use-case:\nI want to boost up listings of a certain category over listings of another category. Say for example, \"SUV\" and \"Sedan\". For each category, I've indexed a integer field, say \"SUV\" = 1 and \"Sedan\" = 2. Now I'm trying to boost SUVs over Sedans through function queries. This is just one of the many different boosts I need to apply.\n\nSo I use q=val:map(category, 1, 1, 3) val:map(category, 2, 2, 1). The priorities of the categories are not fixed i.e. they change at runtime. I cannot use a sort because of the many different boosting criteria I have. I cannot use the normal boosts because I don't want TF/IDF influencing the scores.\n\nI hope the description makes sense. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12665037",
            "date": "2009-01-19T04:34:09+0000",
            "content": "However, both these approaches are mutually exclusive.\n\nIt is still possible to have both these working together.\n\nFor the no:of arguments 'n' if (n%3) == 0 then no default is used. if ((n%3)-1) =0 , then the last value can be used as default. Although it is more complex (to explain) it hopefully will meet most of the requirements of a switch - case - default \n\nThoughts? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12668539",
            "date": "2009-01-29T18:16:32+0000",
            "content": "decided to go w/ shalin's suggestion . added just a default value. The last value is optional. if not present ,the field value is used as default. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12668807",
            "date": "2009-01-30T10:25:32+0000",
            "content": "Changed equals and hashcode method to take the default value into consideration.\n\nI found a bug in the hashcode function:\n\nFloat.floatToIntBits(min);\n\nwhich should have been\n\nh += Float.floatToIntBits(min);\n\n\nSince my knowledge of hashing is limited, it would be nice if someone can review this. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12670113",
            "date": "2009-02-03T21:09:39+0000",
            "content": "Committed revision 740445.\n\nThanks Noble! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775461",
            "date": "2009-11-10T15:50:34+0000",
            "content": "Bulk close Solr 1.4 issues "
        }
    ]
}