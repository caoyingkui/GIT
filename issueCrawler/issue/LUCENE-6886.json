{
    "id": "LUCENE-6886",
    "title": "IndexWriter gets angry at leftover temp files (e.g. from BKD)",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "I was trying to run performance test for the new dimensional values and hit this crazy exception:\n\n\nException in thread \"main\" java.lang.NumberFormatException: For input string: \"5976285795\"\n  at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n  at java.lang.Integer.parseInt(Integer.java:583)\n  at org.apache.lucene.index.IndexFileDeleter.inflateGens(IndexFileDeleter.java:287)\n  at org.apache.lucene.index.IndexFileDeleter.<init>(IndexFileDeleter.java:217)\n  at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:935)\n  at perf.IndexAndSearchOpenStreetMaps.createIndex(IndexAndSearchOpenStreetMaps.java:64)\n  at perf.IndexAndSearchOpenStreetMaps.main(IndexAndSearchOpenStreetMaps.java:162)\n\n\n\nIt happened because I killed my indexing process while BKD was writing temp files.  On starting up again, IW would have removed these unreferenced files, except inflateGens got confused by their names.\n\nThis bug only happens on trunk.",
    "attachments": {
        "LUCENE-6886.patch": "https://issues.apache.org/jira/secure/attachment/12770816/LUCENE-6886.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14991853",
            "author": "Michael McCandless",
            "date": "2015-11-05T15:47:54+0000",
            "content": "Patch w/ test and fix ... I fixed the createTempOutput impls to be more careful in how they name the temp files, stuffing the \"randomness\" into the file extension instead of the \"gen\".  I added a protected utility method to BaseDirectory to do this (maybe it should be in Directory instead?). "
        },
        {
            "id": "comment-14992656",
            "author": "Michael McCandless",
            "date": "2015-11-05T22:57:08+0000",
            "content": "Here's another possible approach, after talking to Robert Muir.\n\nI reserved the .tmp extension for use by createTempOutput, and don't allow codecs to use it.\n\nI also switched to a simple long counter, instead of a randomness, to generate file name candidates, and removed the new method from BaseDirectory. "
        },
        {
            "id": "comment-14993519",
            "author": "Michael McCandless",
            "date": "2015-11-06T11:18:22+0000",
            "content": "New patch: duh, my last patch actually failed to enforce the \"no codec\ncan make a file ending with .tmp\".  So I fixed that, then hit exciting\ntest failures because we do in fact have a codec component\n(FSTTermsWriter) attempting to do this!  So I changed that place\nto use a different extension (it's experimental!), and tests pass. "
        },
        {
            "id": "comment-14993748",
            "author": "Robert Muir",
            "date": "2015-11-06T14:37:44+0000",
            "content": "I like it. I think the counters can be atomics in this case and its still easy to understand. Thanks for adding the check! "
        },
        {
            "id": "comment-14995159",
            "author": "ASF subversion and git services",
            "date": "2015-11-07T11:07:49+0000",
            "content": "Commit 1713103 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1713103 ]\n\nLUCENE-6886: Directory.createTempOutput always uses .tmp extension, and codecs are not allowed to "
        }
    ]
}