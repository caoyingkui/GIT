{
    "id": "SOLR-215",
    "title": "Multiple Solr Cores - remove static singleton",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "WHAT:\nAs of 1.2, Solr only instantiates one SolrCore which handles one Lucene index.\nThis patch is intended to allow multiple cores in Solr which also brings multiple indexes capability.\nThe patch file to grab is solr-215.patch.zip (see MISC session below).\n\nWHY:\nThe current Solr practical wisdom is that one schema - thus one index - is most likely to accomodate your indexing needs, using a filter to segregate documents if needed. If you really need multiple indexes, deploy multiple web applications.\nThere are a some use cases however where having multiple indexes or multiple cores through Solr itself may make sense.\nMultiple cores:\nDeployment issues within some organizations where IT will resist deploying multiple web applications.\nSeamless schema update where you can create a new core and switch to it without starting/stopping servers.\nEmbedding Solr in your own application (instead of 'raw' Lucene) and functionally need to segregate schemas & collections.\nMultiple indexes:\nMultiple language collections where each document exists in different languages, analysis being language dependant.\nHaving document types that have nothing (or very little) in common with respect to their schema, their lifetime/update frequencies or even collection sizes.\n\nHOW:\nThe best analogy is to consider that instead of deploying multiple web-application, you can have one web-application that hosts more than one Solr core. The patch does not change any of the core logic (nor the core code); each core is configured & behaves exactly as the one core in 1.2; the various caches are per-core & so is the info-bean-registry.\nWhat the patch does is replace the SolrCore singleton by a collection of cores; all the code modifications are driven by the removal of the different singletons (the config, the schema & the core).\nEach core is 'named' and a static map (keyed by name) allows to easily manage them.\nYou declare one servlet filter mapping per core you want to expose in the web.xml; this allows easy to access each core through a different url. \n\nUSAGE (example web deployment, patch installed):\nStep0\njava -Durl='http://localhost:8983/solr/core0/update' -jar post.jar solr.xml monitor.ml\nWill index the 2 documents in solr.xml & monitor.xml\nStep1:\nhttp://localhost:8983/solr/core0/admin/stats.jsp\nWill produce the statistics page from the admin servlet on core0 index; 2 documents\nStep2:\nhttp://localhost:8983/solr/core1/admin/stats.jsp\nWill produce the statistics page from the admin servlet on core1 index; no documents\nStep3:\njava -Durl='http://localhost:8983/solr/core0/update' -jar post.jar ipod*.xml\njava -Durl='http://localhost:8983/solr/core1/update' -jar post.jar mon*.xml\nAdds the ipod*.xml to index of core0 and the mon*.xml to the index of core1;\nrunning queries from the admin interface, you can verify indexes have different content. \n\nUSAGE (Java code):\n//create a configuration\nSolrConfig config = new SolrConfig(\"solrconfig.xml\");\n//create a schema\nIndexSchema schema = new IndexSchema(config, \"schema0.xml\");\n//create a core from the 2 other.\nSolrCore core = new SolrCore(\"core0\", \"/path/to/index\", config, schema);\n//Accessing a core:\nSolrCore core = SolrCore.getCore(\"core0\"); \n\nPATCH MODIFICATIONS DETAILS (per package):\norg.apache.solr.core:\nThe heaviest modifications are in SolrCore & SolrConfig.\nSolrCore is the most obvious modification; instead of a singleton, there is a static map of cores keyed by names and assorted methods. To retain some compatibility, the 'null' named core replaces the singleton for the relevant methods, for instance SolrCore.getCore(). One small constraint on the core name is they can't contain '/' or '\\' avoiding potential url & file path problems.\nSolrConfig (& SolrIndexConfig) are now used to persist all configuration options that need to be quickly accessible to the various components. Most of these variables were static like those found in SolrIndexSearcher. Mimicking the intent of these static variables, SolrConfig & SolrIndexConfig use public final members to expose them.\nSolrConfig inherits from Config which has been modified; Config is now more strictly a dom document (filled from some resource) and methods to evaluate xpath expressions. Config also continues to be the classloader singleton that allows to easily instantiate classes located in the Solr installation directory.\n\norg.apache.solr.analysis:\nTokenizerFactory & FilterFactory now get the SolrConfig passed as a parameter to init; one might want to read some resources to initialize the factory and the config dir is in the config. This is partially redundant with the argument map though.\n\norg.apache.solr.handler:\nRequestHandlerBase takes the core as a constructor parameter.\n\norg.apache.solr.util:\nThe test harness has been modified to expose the core it instantiates.\n\norg.apache.solr.servlet:\nSolrDispatchFilter is now instantiating a core configured at init time; the web.xml must contain one filter declaration and one filter mapping per core you want to expose.  Wherever some admin or servlet or page was referring to the SolrCore singleton or SolrConfig, they now check for the request attribute 'org.apache.solr.SolrCore' first; the filters set this attribute before forwarding to the other parts.\n\nAdmin/servlet:\nHas been modified to use the core exposed through the request attribute 'org.apache.solr.SolrCore'.\n\nREPLICATION:\nThe feature has not been implemented yet; the starting point is that instead of having just one index directory 'index/', the naming scheme for the index data directories is 'index*/'. Have to investigate. \n\nFUTURE:\nUploading new schema/conf would be nice, allowing Solr to create cores dynamically; the upload mechanism itself is easy, the servlet dispatch filter needs to be modified.\nHaving replication embedded in the Solr application itself using an http based version of the rsync algorithm; some of the core code of jarsync might be handy.\n\nMISC:\nThe patch production process (not as easy as I thought it was with a Windows/Netbeans/cygwin/TortoiseSVN).\n0/ Initial point is to have the modified code running in a local patch branch, all tests ok.\n1/ Have one 'clean version' of the trunk aside the local patch branch; you'll need to verify that your patch can be applied to the last clean trunk version and that various tests still work from there. Creating the patch is key.\n2/ If you used some IDE and forgot to set the auto-indentation corrrectly, you most likely need working around the space/indentation patch clutter that results. I could not find a way to get TortoiseSVN create a patch with the proper options (ignore spaces & al) and could not find a way to get NetbeansSVN generate one either. Thus I create the patch from the local trunk root through cygwin (with svn+patchutils); svn diff --diff-cmd /usr/bin/diff -x \"-w -B -b -E -d -N -u\" > ~/solr-215.patch.\nBefore generating the patch, it is important to issue an 'svn add ...' for each file you might have added; a quick \"svn status | grep '?'\" allows to verify nothing will be missing. Not elegant, but you can even follow with: svn status | grep '?' | awk '\n{print $2}\n' | xargs svn add\n3/ Apply the patch to the 'clean trunk'.\nTortoiseSVN 'apply patch' command only understands 'unified diff' thus the '-u' option.\nAlternatively, you can apply the patch through cygwin: patch -p0 -u < solr-215.patch.\n\nI've updated the 'dev' environment to an x86 Solaris 10 box which now generates the zipped patch( solr-215.patch.zip , same patch production method).\nFor Solaris 10 users, patch must be \"gnu\" patch: /usr/local/bin/patch is its usual location (not to be confused with /bin/patch...)\nFor x86, you can find it at ftp://ftp.sunfreeware.com/pub/freeware/intel/10/patch-2.5.4-sol10-x86-local.gz ; I don't know about diff but I'm using the version located at ftp://ftp.sunfreeware.com/pub/freeware/intel/10/diffutils-2.8.1-sol10-intel-local.gz",
    "attachments": {
        "solr-trunk-542847.patch": "https://issues.apache.org/jira/secure/attachment/12358556/solr-trunk-542847.patch",
        "solr-trunk-538091.patch": "https://issues.apache.org/jira/secure/attachment/12357364/solr-trunk-538091.patch",
        "solr-trunk-533775.patch": "https://issues.apache.org/jira/secure/attachment/12356513/solr-trunk-533775.patch",
        "solr-215.patch.zip": "https://issues.apache.org/jira/secure/attachment/12360390/solr-215.patch.zip",
        "solr-trunk-src.patch": "https://issues.apache.org/jira/secure/attachment/12356339/solr-trunk-src.patch",
        "solr-215.patch": "https://issues.apache.org/jira/secure/attachment/12358622/solr-215.patch",
        "solr-trunk-542847-1.patch": "https://issues.apache.org/jira/secure/attachment/12358560/solr-trunk-542847-1.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Henri Biestro",
            "id": "comment-12492025",
            "date": "2007-04-26T14:20:46+0000",
            "content": "The patch that allows multiple cores/indexes "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12492691",
            "date": "2007-04-30T15:43:16+0000",
            "content": "The patch as it stands still requires some refactoring 'above' the Java core.\nAlthough the 'single core' feature has been retained (aka the static SolrCore.getCore), the SolrConfig.config could not; the admin servlet has been modified accordingly.\n\nUpdated patch based on latest trunk. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12492709",
            "date": "2007-04-30T16:30:35+0000",
            "content": "junits & admin servlet (single core) test ok "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12492743",
            "date": "2007-04-30T18:29:31+0000",
            "content": "I'm confused ... why is this issue Resolved:Fixed ? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12492836",
            "date": "2007-05-01T04:03:44+0000",
            "content": "I think Henri accidentally resolved this. Reopening.\nBtw. I'm very interested in serving multiple indices under a single Solr instance, possibly even embedded as described on the wiki or in SOLR-212. I may not find the time to look at the patch before next week, though. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12495899",
            "date": "2007-05-15T08:50:53+0000",
            "content": "Updated for revision 538091 "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12499919",
            "date": "2007-05-29T20:51:49+0000",
            "content": "Henri - I'm starting to ook at this.  I see a lot of space changes in the patch.  Could you please generate a patch that doesn't have all those space changes?\nWhen you generate a diff file for the patch, these may be handy parameters to use (I'm assuming you're going work under some kind of UNIX)\n\n       -E  --ignore-tab-expansion\n              Ignore changes due to tab expansion.\n\n       -b  --ignore-space-change\n              Ignore changes in the amount of white space.\n\n       -w  --ignore-all-space\n              Ignore all white space.\n\n       -B  --ignore-blank-lines\n              Ignore changes whose lines are all blank.\n\nThanks!\nI just skimmed the patch and didn't see where the name of the index/core gets passed in the request.  Can you please point me to the right place to look? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12500181",
            "date": "2007-05-30T16:19:07+0000",
            "content": "A revised version of the patch based on revision 542847.\n\nThe patch was produced with the following command run from trunk directory:\nsvn diff --diff-cmd /usr/bin/diff -x \"-w -B -b -E -d -N\" > solr-trunk-542847.patch\nThis should take care of the white spaces as well as inclusion of new files.\nAll unit tests behave as in the single core version; 133 tests, 5 failures, 0 errors\n\nThe content of the patch also includes modifications to the admin, servlet & filters to accomodate the declaration & handling of multiple cores. The example conf & web.xml have been modified to declare 2 other cores (besides the default) named 'core0' and 'core1'.\nThe filter itself forwards to the proper servlet if no specific handler exists in the core configuration.\nExample:\nStep0\njava -Durl='http://localhost:8983/solr/core0/update' -jar post.jar solr.xml monitor.ml\nWill index the 2 documents in solr.xml & monitor.xml\nStep1:\nhttp://localhost:8983/solr/core0/admin/stats.jsp\nWill produce the statistics page from the admin servlet on core0 index; 2 documents\nStep2:\nhttp://localhost:8983/solr/core1/admin/stats.jsp\nWill produce the statistics page from the admin servlet on core1 index; no documents\nStep3:\njava -Durl='http://localhost:8983/solr/core0/update' -jar post.jar ipod*.xml\njava -Durl='http://localhost:8983/solr/core1/update' -jar post.jar mon*.xml\nAdds the ipod*.xml to index of core0 and the mon*.xml to the index of core1;\nrunning queries from the admin interface, you can verify indexes have different content.\n\nComments & advice welcome.\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12500194",
            "date": "2007-05-30T16:58:16+0000",
            "content": "Supersedes previous patches (including solr-trunk-542847.patch); all other attached patches should be ignored (& removed by anyone with proper permissions?).\n\nForgot to svn add some new files before creating the patch;\nfixed a stupid logic error in SolrInit when parameters were missing;\nadded a way to get to the config & schema file names from a configured core. "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12500216",
            "date": "2007-05-30T18:55:29+0000",
            "content": "I haven't looked at the patch, but:\n\n\n\tthere are no current failures on trunk, save from a sporatic AutoCommitTest failure if the machine is heavily-loaded.  Are you testing this patch in the context of other local changes?\n\tif you maintain the same name for subsequent versions of the patch, JIRA automatically keeps track of the most recent for you\n\tpersonally, I find it helpful to check out a fresh copy of trunk and apply my patch and run the tests there.  It helps ferret out the problematic issues and oversights.\n\n\n\ncheers "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12500384",
            "date": "2007-05-31T14:48:42+0000",
            "content": "Thanks Mike for your usefull advice; \nI've corrected the (modified) tests so they are now behaving as the non-patched version do (aka no error nor failure, 133 tests); there were still some of them using the 'unnamed/null' core. My bad, thanks again for pointing it out.\nThe 'superseding' patch is now called solr-215.patch so JIRA should take care of keeping only the last version. (all others can be ignored & deleted).\nThis drop is based on svn revision 543145. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12502774",
            "date": "2007-06-08T12:55:10+0000",
            "content": "New version of the patch that should be easier to verify.\nCreated with: svn diff  --diff-cmd /usr/bin/diff -x \"-w -B -b -E -N -u\" > ~/solr-215.patch\nVerified it can be applied on clean trunk through: patch -u -p0 < ~/solr-215.patch "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12502781",
            "date": "2007-06-08T13:06:42+0000",
            "content": "Patch can now be installed on a clean trunk. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12502783",
            "date": "2007-06-08T13:13:39+0000",
            "content": "Forgot usage example in description "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12505854",
            "date": "2007-06-18T15:52:30+0000",
            "content": "update to current trunk; patch generated from a Solaris Express 10 box. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12506717",
            "date": "2007-06-20T23:16:17+0000",
            "content": "Henri, I think Toru is doing something useful in SOLR-255 - FederatedSearch over RMI + support for multiple local indices.  I think your work is overlapping a lot and you two need to sync, either working on a single patch or on multiple smaller patches with serial dependency. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12506920",
            "date": "2007-06-21T14:39:57+0000",
            "content": "Henri, question about this:\n\nFUTURE:\nUploading new schema/conf would be nice, allowing Solr to create cores dynamically; the upload mechanism itself is easy, the servlet dispatch filter needs to be modified.\n\nWouldn't one simply way to get dynamic SolrCore creation be via custom/specific admin request handlers that create a core with the given name by adding it to that static map of cores that you've created?\n\ne.g.\n/admin/coremanager?cmd=add&name=foo\n/admin/coremanager?cmd=del&name=foo\n\nMaybe a naming convention could be used to figure out which schema.xml + solrconfig.xml to use for the newly added core.  e.g. foo-schema.xml and foo-solrconfig.xml.  The assumption would be that when the new core is added, the needed config files are already in place and ready to be loaded.\n\nThoughts anyone? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12507189",
            "date": "2007-06-22T10:21:28+0000",
            "content": "I like the suggestion. Thanks Otis.\nThe specific admin handler is definitely a good idea to handle cores (no need to modify the servlet dispatch filter).\n\nCould definitely use a naming convention and/or specify schema & config as parameters as in:\n/admin/coremanager?cmd=add&name=foo&schema=foo-schema.xml&config=foo-config.xml\n\nIt does not preclude being able to upload the schema & config files (so the files dont have to be there before). "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12507207",
            "date": "2007-06-22T11:17:39+0000",
            "content": "Excellent.  I'll assume you'll add something like this to your patch, then.\nAny thoughs on SOLR-255 and ensuring you and Toru don't step on each other's toes? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12507344",
            "date": "2007-06-22T14:19:32+0000",
            "content": "About solr-255, I've posted a small comment to Toru.\nSeems to me that solr-255/solr-215 features are mostly orthogonal; solr-255 allows one core to use multiple indexes, solr-215 allows multiple cores in one instance.\nBut I like the idea of federated search (and federated indexing!).\nI'm a bit worried though that adding a Lucene patch dependency & merging solr-215/solr-255 will make the commit occur even later... And I'm getting confused; how could this fusion help reduce the amount of effort to review the patch?\nBut I'll follow your lead; I'll try & see if I can merge. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12507591",
            "date": "2007-06-23T10:49:59+0000",
            "content": "updated for trunk 550264\npatch is zipped; solr-215.patch.zip "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12509941",
            "date": "2007-07-03T17:01:31+0000",
            "content": "updated for trunk revision 55291 "
        },
        {
            "author": "Walter Ferrara",
            "id": "comment-12510723",
            "date": "2007-07-06T16:15:25+0000",
            "content": "By using the patch, (assuming I'm using it correctly), it seems that Solr is not able anymore to load my handlers, which resides in a jar under solr/lib dir. The exception I've got is (handler class name censored):\n\nGRAVE: org.apache.solr.common.SolrException: Error loading class 'com.*****.*****'\n        at org.apache.solr.core.Config.findClass(Config.java:295)\n[..]\nCaused by: java.lang.ClassNotFoundException: com.*****.*****\n        at java.net.URLClassLoader$1.run(Unknown Source)\n        at java.security.AccessController.doPrivileged(Native Method)\n[..]\n(full stack trace available if needed)\n\nThe problem arise in both patched trunk I've tested (550264 with previous patch, and 552910 with latest patch), I've been compiling it using Netbeans 5.5 and java1.6 on windows.\nTo resolve the issue, I modified a bit the Config.java. Now it works fine, it loads all the jars, but full implication of the change I made have to be determined.\n\nHere the modification I made on patched (org.apache.solr.core) Config.java (working Config.java versus original solr-215  \"Config_solr215.java\")\n\n\n\t\n\t\n\t\t\n\t\t\n\t\t\tConfig.java\n\t\t\n\t\t\n\t\t\tConfig_origSolr215.java\n***************\n\t\t\n\t\t\n\t\t\t393,399 ****\n            SolrException.log(log,\"Can't construct solr lib class loader\", e);\n          }\n        }\n!       if (null == classLoader) classLoader = loader;\n      }\n      return classLoader;\n    }\n\t\t\n\t\t\n\t\t\t393,399 ----\n            SolrException.log(log,\"Can't construct solr lib class loader\", e);\n          }\n        }\n!       classLoader = loader;\n      }\n      return classLoader;\n    }\n\t\t\n\t\t\n\t\n\t\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12510853",
            "date": "2007-07-07T05:32:21+0000",
            "content": "Thanks Walter.\n\nI've been \"fighting\" a bit with this code in the same kind of environment (NB5.5 / JVM 1.5).\nThe static classLoader was not assigned correctly and I already had to modify the original code to workaround it.\nLooks like the JVM 1.6 reintroduces the issue. I don't understand why this happens - may be class loading through NB...\nThe fix you propose seems totally harmless; I'll check against a 1.5 JVM & introduce it in the next upload.\n\nUsing the patch should be straightforward besides handler classes needing a constructor with a SolrCore.\nLet me know how it goes. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12511454",
            "date": "2007-07-10T14:13:04+0000",
            "content": "Henri:\nI've finally started looking at this.  The latest version of the patch doesn't apply 100% cleanly (e.g. src/java/org/apache/solr/handler/StaxUpdateRequestHandler.java has been replaced by src/java/org/apache/solr/handler/XppUpdateRequestHandler.java) and thus 'ant compile' results in several compilation errors.  You can probably see the same locally, but just in case it make it easier for you, here is how patching looks for me:\n\n[otis@localhost trunk]$ patch -p0 < solr-215.patch\npatching file src/test/org/apache/solr/update/AutoCommitTest.java\nHunk #1 FAILED at 55.\n1 out of 2 hunks FAILED \u2013 saving rejects to file src/test/org/apache/solr/update/AutoCommitTest.java.rej\npatching file src/test/org/apache/solr/analysis/TestBufferedTokenStream.java\npatching file src/test/org/apache/solr/analysis/TestPatternReplaceFilter.java\npatching file src/test/org/apache/solr/analysis/TestPhoneticFilter.java\npatching file src/test/org/apache/solr/analysis/AnalysisTestCase.java\npatching file src/test/org/apache/solr/analysis/TestPatternTokenizerFactory.java\npatching file src/test/org/apache/solr/analysis/TestRemoveDuplicatesTokenFilter.java\npatching file src/test/org/apache/solr/analysis/TestKeepWordFilter.java\nHunk #1 FAILED at 27.\n1 out of 3 hunks FAILED \u2013 saving rejects to file src/test/org/apache/solr/analysis/TestKeepWordFilter.java.rej\npatching file src/test/org/apache/solr/analysis/BaseTokenTestCase.java\npatching file src/test/org/apache/solr/servlet/SolrRequestParserTest.java\npatching file src/test/org/apache/solr/servlet/DirectSolrConnectionTest.java\npatching file src/test/org/apache/solr/core/TestConfig.java\npatching file src/test/org/apache/solr/core/SolrCoreTest.java\npatching file src/test/org/apache/solr/core/RequestHandlersTest.java\npatching file src/test/org/apache/solr/core/TestBadConfig.java\npatching file src/test/org/apache/solr/schema/BadIndexSchemaTest.java\npatching file src/test/org/apache/solr/schema/NotRequiredUniqueKeyTest.java\npatching file src/test/org/apache/solr/schema/RequiredFieldsTest.java\npatching file src/test/org/apache/solr/schema/IndexSchemaTest.java\npatching file src/test/org/apache/solr/BasicFunctionalityTest.java\npatching file src/test/org/apache/solr/handler/StandardRequestHandlerTest.java\npatching file src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java\nHunk #2 FAILED at 13.\n1 out of 2 hunks FAILED \u2013 saving rejects to file src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java.rej\npatching file src/test/org/apache/solr/handler/MoreLikeThisHandlerTest.java\npatching file src/java/org/apache/solr/schema/IndexSchema.java\nHunk #2 succeeded at 57 (offset 1 line).\nHunk #4 succeeded at 294 (offset 1 line).\nHunk #5 FAILED at 303.\nHunk #6 succeeded at 314 with fuzz 2.\nHunk #7 FAILED at 327.\nHunk #8 succeeded at 458 (offset 3 lines).\nHunk #10 succeeded at 593 (offset 3 lines).\nHunk #12 succeeded at 617 (offset 3 lines).\n2 out of 13 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/schema/IndexSchema.java.rej\npatching file src/java/org/apache/solr/update/UpdateHandler.java\npatching file src/java/org/apache/solr/update/DirectUpdateHandler2.java\nHunk #1 succeeded at 607 (offset 11 lines).\npatching file src/java/org/apache/solr/update/SolrIndexConfig.java\npatching file src/java/org/apache/solr/analysis/PatternTokenizerFactory.java\npatching file src/java/org/apache/solr/analysis/TokenizerFactory.java\npatching file src/java/org/apache/solr/analysis/PatternReplaceFilterFactory.java\npatching file src/java/org/apache/solr/analysis/BaseTokenFilterFactory.java\npatching file src/java/org/apache/solr/analysis/TrimFilterFactory.java\npatching file src/java/org/apache/solr/analysis/KeepWordFilterFactory.java\npatching file src/java/org/apache/solr/analysis/TokenFilterFactory.java\npatching file src/java/org/apache/solr/analysis/EnglishPorterFilterFactory.java\nHunk #2 succeeded at 33 with fuzz 1.\npatching file src/java/org/apache/solr/analysis/PhoneticFilterFactory.java\npatching file src/java/org/apache/solr/analysis/WordDelimiterFilterFactory.java\npatching file src/java/org/apache/solr/analysis/SynonymFilterFactory.java\nHunk #2 succeeded at 31 with fuzz 1.\npatching file src/java/org/apache/solr/analysis/SnowballPorterFilterFactory.java\npatching file src/java/org/apache/solr/analysis/EdgeNGramTokenizerFactory.java\npatching file src/java/org/apache/solr/analysis/PhoneticFilter.java\nHunk #1 FAILED at 28.\n1 out of 1 hunk FAILED \u2013 saving rejects to file src/java/org/apache/solr/analysis/PhoneticFilter.java.rej\npatching file src/java/org/apache/solr/analysis/LengthFilterFactory.java\npatching file src/java/org/apache/solr/analysis/StopFilterFactory.java\nHunk #2 succeeded at 32 with fuzz 1.\npatching file src/java/org/apache/solr/analysis/NGramTokenizerFactory.java\npatching file src/java/org/apache/solr/analysis/BaseTokenizerFactory.java\npatching file src/java/org/apache/solr/search/SolrIndexSearcher.java\nHunk #10 FAILED at 261.\nHunk #11 succeeded at 329 (offset 1 line).\nHunk #13 succeeded at 589 (offset 1 line).\nHunk #14 succeeded at 979 (offset 1 line).\n1 out of 14 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/search/SolrIndexSearcher.java.rej\npatching file src/java/org/apache/solr/search/CacheConfig.java\nHunk #1 succeeded at 37 with fuzz 2.\npatching file src/java/org/apache/solr/search/DocSetHitCollector.java\npatching file src/java/org/apache/solr/core/SolrInfoRegistry.java\npatching file src/java/org/apache/solr/core/Config.java\nHunk #1 succeeded at 44 with fuzz 2.\npatching file src/java/org/apache/solr/core/SolrConfig.java\nHunk #2 succeeded at 44 with fuzz 2.\npatching file src/java/org/apache/solr/core/SolrCore.java\nHunk #2 FAILED at 75.\nHunk #3 succeeded at 144 (offset 2 lines).\nHunk #5 succeeded at 177 (offset 2 lines).\nHunk #6 succeeded at 185 with fuzz 2.\nHunk #7 succeeded at 349 (offset 6 lines).\nHunk #9 succeeded at 479 (offset 13 lines).\nHunk #11 succeeded at 629 (offset 13 lines).\nHunk #13 succeeded at 768 (offset 13 lines).\nHunk #15 succeeded at 876 (offset 13 lines).\nHunk #16 FAILED at 896.\nHunk #17 FAILED at 906.\n3 out of 17 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/core/SolrCore.java.rej\npatching file src/java/org/apache/solr/core/RequestHandlers.java\nHunk #1 FAILED at 45.\nHunk #3 FAILED at 128.\nHunk #4 FAILED at 153.\nHunk #5 FAILED at 193.\nHunk #6 succeeded at 201 with fuzz 1 (offset -23 lines).\n4 out of 7 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/core/RequestHandlers.java.rej\npatching file src/java/org/apache/solr/core/AbstractSolrEventListener.java\npatching file src/java/org/apache/solr/core/QuerySenderListener.java\nHunk #1 succeeded at 31 with fuzz 1.\npatching file src/java/org/apache/solr/core/RunExecutableListener.java\npatching file src/java/org/apache/solr/request/XSLTResponseWriter.java\npatching file src/java/org/apache/solr/request/StandardRequestHandler.java\npatching file src/java/org/apache/solr/request/DisMaxRequestHandler.java\npatching file src/java/org/apache/solr/tst/OldRequestHandler.java\npatching file src/java/org/apache/solr/tst/TestRequestHandler.java\npatching file src/java/org/apache/solr/handler/RequestHandlerBase.java\npatching file src/java/org/apache/solr/handler/CSVRequestHandler.java\npatching file src/java/org/apache/solr/handler/StandardRequestHandler.java\nHunk #1 succeeded at 61 (offset 1 line).\npatching file src/java/org/apache/solr/handler/admin/PropertiesRequestHandler.java\npatching file src/java/org/apache/solr/handler/admin/LukeRequestHandler.java\nHunk #1 succeeded at 43 (offset 1 line).\nHunk #2 succeeded at 85 (offset -1 lines).\npatching file src/java/org/apache/solr/handler/admin/PluginInfoHandler.java\npatching file src/java/org/apache/solr/handler/admin/ThreadDumpHandler.java\npatching file src/java/org/apache/solr/handler/admin/SystemInfoHandler.java\ncan't find file to patch at input line 2931\nPerhaps you used the wrong -p or --strip option?\nThe text leading up to this was:\n--------------------------\n\n\n\nIndex: src/java/org/apache/solr/handler/StaxUpdateRequestHandler.java\n\n\n===================================================================\n\n\n\u2014 src/java/org/apache/solr/handler/StaxUpdateRequestHandler.java     (revision 548274)\n\n\n+++ src/java/org/apache/solr/handler/StaxUpdateRequestHandler.java     (working copy)\n--------------------------\nFile to patch: src/java/org/apache/solr/handler/StaxUpdateRequestHandler.java\nsrc/java/org/apache/solr/handler/StaxUpdateRequestHandler.java: No such file or directory\nSkip this patch? [y]\nSkipping patch.\n1 out of 1 hunk ignored\npatching file src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java\nHunk #1 FAILED at 51.\nHunk #2 FAILED at 102.\n2 out of 2 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java.rej\npatching file src/java/org/apache/solr/handler/SpellCheckerRequestHandler.java\npatching file src/java/org/apache/solr/handler/DisMaxRequestHandler.java\nHunk #1 succeeded at 158 (offset 1 line).\npatching file src/java/org/apache/solr/handler/DumpRequestHandler.java\npatching file src/java/org/apache/solr/handler/MoreLikeThisHandler.java\nHunk #1 succeeded at 71 (offset 1 line).\npatching file src/java/org/apache/solr/util/AbstractSolrTestCase.java\npatching file src/java/org/apache/solr/util/TestHarness.java\nHunk #1 FAILED at 74.\n1 out of 1 hunk FAILED \u2013 saving rejects to file src/java/org/apache/solr/util/TestHarness.java.rej\npatching file src/java/org/apache/solr/util/xslt/TransformerProvider.java\npatching file src/webapp/WEB-INF/web.xml\npatching file src/webapp/src/org/apache/solr/servlet/SolrInit.java\npatching file src/webapp/src/org/apache/solr/servlet/SolrServlet.java\npatching file src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java\npatching file src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet.java\npatching file src/webapp/src/org/apache/solr/servlet/SolrRequestParsers.java\npatching file src/webapp/src/org/apache/solr/servlet/DirectSolrConnection.java\npatching file src/webapp/resources/admin/raw-schema.jsp\npatching file src/webapp/resources/admin/_info.jsp\npatching file src/webapp/resources/admin/get-file.jsp\npatching file src/webapp/resources/admin/ping.jsp\npatching file src/webapp/resources/admin/stats.jsp\npatching file src/webapp/resources/admin/index.jsp\npatching file example/solr/conf/core0.schema.xml\npatching file example/solr/conf/core1.schema.xml\npatching file example/solr/conf/core0.config.xml\npatching file example/solr/conf/core1.config.xml\npatching file client/java/solrj/test/org/apache/solr/client/solrj/embedded/TestEmbeddedSolrServer.java\npatching file client/java/solrj/test/org/apache/solr/client/solrj/embedded/TestJettySolrRunner.java\npatching file client/java/solrj/src/org/apache/solr/client/solrj/embedded/EmbeddedSolrServer.java\n\n\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12511551",
            "date": "2007-07-10T19:43:28+0000",
            "content": "I don't know if we should make Henri keep his patch up to date with the trunk (since it's likely to continue evolving right now) until he's received more feedback about the approach and we are ready to commit it.\n\nOne question I had was about backward compatibility... is there a way to register a null or default core that reverts to the original paths?  Are there any other backward compatible gotchas (not related to custom java code)? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12511740",
            "date": "2007-07-11T12:32:47+0000",
            "content": "updated for trunk 555252; should apply cleanly now (a few fuzzies but no rejects).\n\nYonik,\nAbout backwards compatibility & named cores, the 'null' core (ie the core named 'null') is equivalent to the (non-solr215-patched) original version; SolrCore.getSolrCore() returns that core.\nBesides the obvious SolrConfig.config that has been removed, I dont (fore)see any other non-compatible behaviors.\nHenri "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12511783",
            "date": "2007-07-11T15:56:35+0000",
            "content": "Henri, I'm starting to suspect I'm doing something wrong here:\n\nsvn co -r 555252 https://svn.apache.org/repos/asf/lucene/solr/trunk\ncd trunk\nsvn info\n  Path: .\n  URL: https://svn.apache.org/repos/asf/lucene/solr/trunk\n  Repository UUID: 13f79535-47bb-0310-9956-ffa450edef68\n  Revision: 555252\n  Node Kind: directory\n  Schedule: normal\n  Last Changed Author: ryan\n  Last Changed Rev: 554915\n  Last Changed Date: 2007-07-10 13:57:36 +0200 (Tue, 10 Jul 2007)\n  Properties Last Updated: 2007-07-11 17:48:55 +0200 (Wed, 11 Jul 2007)\n\nwget https://issues.apache.org/jira/secure/attachment/12360039/solr-215.patch\npatch -p0 < solr-215 &> patch.out\n\n$ grep .rej$ patch.out\n1 out of 2 hunks FAILED \u2013 saving rejects to file src/test/org/apache/solr/update/AutoCommitTest.java.rej\n1 out of 3 hunks FAILED \u2013 saving rejects to file src/test/org/apache/solr/analysis/TestKeepWordFilter.java.rej\n1 out of 2 hunks FAILED \u2013 saving rejects to file src/test/org/apache/solr/handler/XmlUpdateRequestHandlerTest.java.rej\n2 out of 13 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/schema/IndexSchema.java.rej\n1 out of 1 hunk FAILED \u2013 saving rejects to file src/java/org/apache/solr/analysis/PhoneticFilter.java.rej\n1 out of 14 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/search/SolrIndexSearcher.java.rej\n3 out of 17 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/core/SolrCore.java.rej\n4 out of 7 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/core/RequestHandlers.java.rej\n2 out of 2 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/handler/XmlUpdateRequestHandler.java.rej\n1 out of 1 hunk FAILED \u2013 saving rejects to file src/java/org/apache/solr/util/TestHarness.java.rej\n\n\nAm I doing something wrong? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12511796",
            "date": "2007-07-11T17:00:21+0000",
            "content": "Otis,\nYou need to grab the 'zipped' version aka solr-215.patch.zip (since June 23).\nI was trying to be space & bandwidth friendly...\nSorry I did not make it more obvious in some previous comments.\nHenri "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12512038",
            "date": "2007-07-12T11:12:07+0000",
            "content": "Just a quick comment - the .zip version of the patch is really a gzipped file:\n\n$ wget --quiet https://issues.apache.org/jira/secure/attachment/12361583/solr-215.patch.zip\n$ file solr-215.patch.zip\nsolr-215.patch.zip: gzip compressed data, was \"solr-215.patch\", from Unix "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12513595",
            "date": "2007-07-18T14:51:15+0000",
            "content": "Henri - is SolrInit something that you added in this patch or something that Solr once had?  I don't recall seeing SolrInit.java before, so I'm guessing you added SolrInit.java in your patch.  However, your patch does not contain SolrInit.java (forgot to svn add it?), so things don't compile even when using the latest .zip (.gz really) and the correct Solr revision:\n\ncompile:\n    [javac] Compiling 5 source files to /home/otis/dev/repos/lucene/solr/foo/trunk/build/core\n    [javac] /home/otis/dev/repos/lucene/solr/foo/trunk/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java:69: cannot find symbol\n    [javac] symbol  : class SolrInit\n    [javac] location: class org.apache.solr.servlet.SolrDispatchFilter\n    [javac]       SolrInit solrInit = new SolrInit(log) {\n    [javac]       ^\n    [javac] /home/otis/dev/repos/lucene/solr/foo/trunk/src/webapp/src/org/apache/solr/servlet/SolrDispatchFilter.java:69: cannot find symbol\n    [javac] symbol  : class SolrInit\n    [javac] location: class org.apache.solr.servlet.SolrDispatchFilter\n    [javac]       SolrInit solrInit = new SolrInit(log) {\n    [javac]                               ^\n    [javac] /home/otis/dev/repos/lucene/solr/foo/trunk/src/webapp/src/org/apache/solr/servlet/SolrServlet.java:49: cannot find symbol\n    [javac] symbol  : class SolrInit\n    [javac] location: class org.apache.solr.servlet.SolrServlet\n    [javac]       SolrInit solrInit = new SolrInit(log) {\n    [javac]       ^\n    [javac] /home/otis/dev/repos/lucene/solr/foo/trunk/src/webapp/src/org/apache/solr/servlet/SolrServlet.java:49: cannot find symbol\n    [javac] symbol  : class SolrInit\n    [javac] location: class org.apache.solr.servlet.SolrServlet\n    [javac]       SolrInit solrInit = new SolrInit(log) {\n    [javac]                               ^\n    [javac] /home/otis/dev/repos/lucene/solr/foo/trunk/src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet.java:48: cannot find symbol\n    [javac] symbol  : class SolrInit\n    [javac] location: class org.apache.solr.servlet.SolrUpdateServlet\n    [javac]       SolrInit solrInit = new SolrInit(log) {\n    [javac]       ^\n    [javac] /home/otis/dev/repos/lucene/solr/foo/trunk/src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet.java:48: cannot find symbol\n    [javac] symbol  : class SolrInit\n    [javac] location: class org.apache.solr.servlet.SolrUpdateServlet\n    [javac]       SolrInit solrInit = new SolrInit(log) {\n    [javac]                               ^\n    [javac] Note: /home/otis/dev/repos/lucene/solr/foo/trunk/src/webapp/src/org/apache/solr/servlet/SolrUpdateServlet.java uses or overrides a deprecated API.\n    [javac] Note: Recompile with -Xlint:deprecation for details.\n    [javac] 6 errors\n\nBUILD FAILED\n\n\nCould you please add SolrInit.java to the patch?  I'd like to give this a go as soon as possible, actually. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12513641",
            "date": "2007-07-18T16:50:50+0000",
            "content": "previous patch version was missing SolrInit & AnalysisTestCase; sorry Otis "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12513656",
            "date": "2007-07-18T17:59:01+0000",
            "content": "updated for trunk 557340 "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12513660",
            "date": "2007-07-18T18:00:57+0000",
            "content": "updated for trunk 557340 (ASF inclusion...) "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12513744",
            "date": "2007-07-18T22:35:44+0000",
            "content": "I reviewed about 43% of this looooooooooooooooong patch (up to RequestHandlers.java).  Everything sees pretty clear so far, the changes are limited to SolrCore and SolrConfig changes.  Everything compiles and all test pass - good!\n\nI will review the rest of the patch tomorrow and if there are no surprises, I hope to commit this tomorrow or Friday.\n\nNOTE: If anyone does NOT want this committed this week, please shout!\n\nHere are some comments about the things I saw in the patch so far:\n\n1. src/java/org/apache/solr/update/SolrIndexConfig.java\n\n\n\tif (writeLockTimeout != -1) IndexWriter.WRITE_LOCK_TIMEOUT=writeLockTimeout;\n\tif (commitLockTimeout != -1) IndexWriter.COMMIT_LOCK_TIMEOUT=commitLockTimeout;\n\n\n\nI think the above got lost, but maybe I missed where the timeouts are set now.\n\n2. src/java/org/apache/solr/core/SolrCore.java\n\n\n\tif (mainIndexConfig.writeLockTimeout != -1) IndexWriter.setDefaultWriteLockTimeout(mainIndexConfig.writeLockTimeout);\n\n\n\nSame as above - this might have gotten lost.\n\n3. Why is SolrInfoRegistry deprecated?  Because it is no longer really needed and its functionality is replaced by SolrCore.getSolrCore().getInfoRegistry()?  Just checking.\n\n4. src/java/org/apache/solr/core/Config.java\n\n\n\tclassLoader = Thread.currentThread().getContextClassLoader();\n+      // NB5.5/win32/1.5_10: need to go thru local var or classLoader is not set!\n+      ClassLoader loader = Thread.currentThread().getContextClassLoader();\n\n\n\nAh, NetBeans problem that you mentioned earlier.  This is just a local var being set, looks fine to me.\n\n5. src/java/org/apache/solr/core/SolrCore.java\n\nprivate static String checkName(String name) \n\nCouldn't the implementation of this checkName(name) method be simpler?  Aren't there String methods that will let you look for '/' or any other unwanted string/pattern?\nAlso, why does this method return a name when it doesn't modify it?  Wouldn't void or boolean without the exception be more straight forward?\n\n   @Override\n   protected void finalize() \n{ close(); }\n\nShouldn't this finalize() method call shutdown() in order to close all cores? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12513789",
            "date": "2007-07-19T02:06:10+0000",
            "content": "I just took a quick (well not so quick in applying the patch) look at this.  I have not run it, or tried to use it, just following the changes.\n\nHere are a couple concerns:\n\n1. TokenizerFactory breaks API compatibility:\n\n\tpublic void init(Map<String,String> args);\n+  public void init(SolrConfig solrConfig, Map<String,String> args);\n\n\n\nI'm not sure the best fix and understand Yonik's aversion to interfaces.\n\n\n2.  Why do RequestHandlers all need to know what core they are from?  The core is (and has been) passed along with the request.  It looks like the only place it is used is in @deprecated  SolrUpdateServlet.\n\nIf we only support the multi-core stuff from the dispatch filter, we don't need to augment every request handler with the core that created it.\n\nThe 'SolrInit' stuff that works for filters or servlets is nice, but is more confusing then it needs to be if multi-core support were only avaliable from the filter.\n\n\n3.  I'm not sure I like that you have to create a new filter and edit web.xml for each core.  If thats the case, why not run multiple web apps?  Perhaps the RequestDispatcher could accept ?core=name or look for a path that starts with /core:name/ to choose the core.  It would store the 'null' core to avoid a map lookup in the default case.\n\n\n4. Rather then have each core configured in web.xml, perhaps there should be a core.xml or core.properties file that sits in solr home?\n\n\n\t- - - - -\n\n\n\nAs for committing this soon.  If 1 & 2 are delt with before committing, I'm for it.  It will be easier to push around improvements with smaller manageable patches.  \n\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12513829",
            "date": "2007-07-19T07:01:20+0000",
            "content": "On Otis's comments:\n1 & 2- static initializers for lock related value: you are correct, the code has been lost most likely in some merge- my bad.\n3- SolrInfoRegistry  deprecated: you are correct, functionality is replaced by SolrCore.getSolrCore().getInfoRegistry().\n4-classLoader not assigned: not sure why it happens but this fixes it...\n5- checkName is not subtle: I had the idea of \"normalizing\" the core name (url like normalize for instance) but did not pursue since it might make the replication scripts more complex to modify (aka the normalization code would need to be duplicated in the script). And since the solaris scripts were not completely functional (my dev machine being solaris), I've postponed the task... ( I also was \"dreaming\" about being able to derive from SorlCore to benefit from the static map, implement a naming policy that would encompass the config & schema name generations, etc...). Anyhow, this can indeed be simplified with a regexp match.\n6-finalize(): no, I believe finalizing one core should just ensure that this core is shutdown.This is only for completeness though since I cant see how a core could be gc-ed & finalized before it actually gets shutdown & removed from the map of cores.\n\nOn Ryan's comments:\n1- factory/init interface compatibility break: I'll look into other ways since if this is a blocker (ctor, setter or wrap/delegate...). \n2- RequestHandlers know core: SolrUpdateServlet is deprecated but is still there; I was just trying to ensure correct/compatible behavior. I agree SolrInit is more clutter than necessity but can be dropped easily if there is no need to support the SolrUpdateServlet.\n3- I do agree that there must be an easier & more functional way to declare and access a core than the current one. I'll try the route you describe.\n4- Having core \"descriptors\" (config/schema) as explicit files in a $solrhome/cores directory; might use some naming convention to derive the core name from them (related to uploading/dynamic creation of cores).\n\nI'm mostly \"off the grid\" today but I'll try my best on Friday. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12513896",
            "date": "2007-07-19T13:57:54+0000",
            "content": "I didn't even realize this patch would still require cores to be declared apriori in static files such as web.xml. \n\nI think this new multi-core functionality should come with the \"core manager\" handler, as we said here:\nhttps://issues.apache.org/jira/browse/SOLR-215#action_12506920\nhttps://issues.apache.org/jira/browse/SOLR-215#action_12507189\n\nSo, something like:\n/admin/coremanager?cmd=add&name=foo&schema=foo-schema.xml&config=foo-solrconfig.xml\n(this assumes that foo-schema.xml and foo-solrconfig.xml already exist in conf/ dir)\n\nOne could also POST this and include the content of the 2 .xml files.  In that case the core manager would be the one writing their content to disk in conf/ dir prior to starting the given core.\n\nMy suggestion is that this be added in phase 2, after Henri's initial changes are committed.\nDoes this sound reasonable? "
        },
        {
            "author": "Will Johnson",
            "id": "comment-12513912",
            "date": "2007-07-19T14:51:13+0000",
            "content": "did anything ever get baked into the patch for handling the core name as a cgi param instead of as a url path element?  the email thread we had going didn't seem to come to any hard conclusions but i'd like to lobby for it as a part of the spec.  i read through the patch but i couldn't quite follow things enough to tell. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12513946",
            "date": "2007-07-19T17:02:55+0000",
            "content": "\n> My suggestion is that this be added in phase 2, after Henri's initial changes are committed.\n> Does this sound reasonable?\n> \n\nYes - perhaps getting this checked in without touching handlers or the web-app side is a good idea.  It is a little weird since the multi-core aspect would only be usable programatically, but that will make it possible to easily bat around a 'core manager' and http design.\n\nThe one big question is what to do with the TokenizerFactory API.  \n\nYonik, how do you suggest upgrading an interface?  The only clean way I can think is to upgrade the TokenizerFactory interface with a 'MulitCoreTokenizerFactory'  adding an additional argument.  I don't like it, but don't know the API compatibility rules well enough to know if it is required or is ok to change the API.\n\n\n\nWill - as is, this patch does not let you dynamically change the core.  They are statically defined in web.xml.  This will change. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12515888",
            "date": "2007-07-26T22:03:22+0000",
            "content": "Ryan e Henri:\n\n1. Re TokenizerFactory - what will break with this change?  Is the fear that people implemented this interface in their Solr apps and this change will break their implementations, or something else?\n\n2. So can SolrUpdateServlet  get axed, so SolrInit can be eliminated?\n\nIf we can resolve these two, it sounds like we can commit this patch and then work on the rest. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12515912",
            "date": "2007-07-26T23:41:38+0000",
            "content": "\n> \n> 1. Re TokenizerFactory - what will break with this change?  \n\nPersonally, I don't have any problem with it.  But is is an API breaking change (a custom 1.2 TokenizerFactory would not work with 1.3).  \n\nI am fine with noting that in CHANGES.txt, but we should make sure more people are aware of this change.  \n\n\n> 2. So can SolrUpdateServlet  get axed, so SolrInit can be eliminated?\n> \n\nlets not axe SolrUpdateServlet just yet \u2013 this patch does not need to touch SolrUpdateServlet  and SolrInit can be removed.\n\n\n> If we can resolve these two, it sounds like we can commit this patch and then work on the rest.\n>\n\n+1\n\nFor now, I think we should remove anything in this patch that touches o.a.s.webapp.* and o.a.s.handler.*\n\nWith Multiple Solr Cores working, we can bat around the best interface to accessing/modifying them.\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12516192",
            "date": "2007-07-29T00:04:55+0000",
            "content": "For the record, I have not looked at the most recent version of the patch \u2013 don't think i've ever had a chance to look at any version of this patch actually, but I since my fiance is currently reading harry potter, i figured this was a good day to at least try and catch up on all the issue comments.\n\nso far, i like what i'm reading \u2013 i think the plan to first commit the \"framework\" code so that multiple cores can be programmatic created, then tackle the syntax for defining/creating/querying multiple cores via config files and/or http params makes sense.\n\nAs far as the backwards compatibility issues go with things like the Token(izer|Filter)Factory APIs, I think it's safe to say that people who want to use multiple cores can be required to make minor modifications to custom plugins they may have written in order to get them to work correctly with those multiple cores.  \n\nwhat we have to watch out for is people who don't care about custom cores, and have written custom plugins.  things should continue to work for those people.\n\nIn the case of the token-blah-factories, a simple way to go (which can also help us move away from the interface headache) might be to deprecate the current factory interfaces, and add new abstract factory base classes which implement those interfaces and are multi-core aware ... the initialization code can first check to see if the class name in question extends the new abstract base class \u2013 if so then jolly good, if not then fall back to the legacy behavior and init the class without any info about it's core.\n\nthe kind of situation i do worry about however is along the lines of a comment Henri pointed out (very early on evidently, not sure how i missed it back then)...\n\n> Although the 'single core' feature has been retained (aka the static SolrCore.getCore), \n> the SolrConfig.config could not; \n\n...this is a little alarming, because there may be custom plugins that use SolrConfig.config to get arbitrary configuration inforrmation from solrconfig.xml ... i say may because we've never exactly advertised that as a recommended technique, but that doesn't mean peope aren't doing it.  At a minimum we need a well documented replacement for (hopefully something like SolrCore.getSolrCore(null).getSolrConfig() works) but the question that immediately popped into my head was: \"if SolrCore.getCore(null) can return 'the null core' why can't SolrCOnfig.config be assigned the config from the null core?\"\n\nIn general, this is the kind of thing i worry about: making sure that any and all custom plugin code that may exist right now can continue to exist and function using a single core even after the multi-core functionality is committed. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12516387",
            "date": "2007-07-30T13:53:00+0000",
            "content": "\nAbout the SolrConfig.config, the replacement is indeed SolrCore.getSolrCore(null).getSolrConfig().\nWhat I meant about the SolrConfig.config not being retained was that there was no way to access through SolrConfig.config the configuration of an arbitrary core; \nwe can easily 'reinstate' SolrConfig.config by assigning it the 'null' core config as a compatibility (deprecated?) feature; I'd advocate for stating this very clearly (to avoid unexpected side effects in the multi core case).\nThis should allow a 'default' deployment to work as it was (without the patch).\n\nI like the plan; is there anything expected/needed that I can/should do? 'process-wise', I'm a little confused about the patch status; should I create/upload a new version of the patch with the described modifications or is this taken care of by the committer? (this sounds like a stupid question, my apologies if it is; just let me know). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12516415",
            "date": "2007-07-30T15:15:10+0000",
            "content": "> we can easily 'reinstate' SolrConfig.config by assigning it the 'null' core config as a compatibility (deprecated?) \n\nyes.  that is good.  \n\n> \n>  should I create/upload a new version of the patch with the described modifications or is this taken care of by the committer? (this sounds like a stupid question, my apologies if it is; just let me know).\n> \n\nwhatever happens first \n\nIf you have time, can you make the modifications.  That will make it easier. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12516718",
            "date": "2007-07-31T15:41:19+0000",
            "content": "Henri:\nTypically a contributor will try to push a patch as far as he/she can based on committers' comments and suggestions.  It sounds like we are all in agreement here and you know exactly what to do, so we'll wait for your next patch and hopefully that will be the one that we can commit.  Thank you very much for your patience with this - I'm impressed.\n\nFrom what I can tell, this is what is left:\n1. Remove anything in this patch that touches o.a.s.webapp.* and o.a.s.handler.* \n2. Deprecate factory interfaces and add abstract factory base classes as Hoss descibed above\n\nOne that's in the repository, I think you/we can take the description you wrote (all the way at the top of this issue) and turn it into a Wiki page (anyone can add/edit pages, just create an account on the Wiki).\n\nI'm eager to try the new patch! "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12520041",
            "date": "2007-08-15T17:23:22+0000",
            "content": "updated for revision 566269;\nadded back SolrConfig.config;\ncleaned-up o.a.s.handler* "
        },
        {
            "author": "Rakesh",
            "id": "comment-12524891",
            "date": "2007-09-04T21:55:28+0000",
            "content": "Hi \u2013\n\n   Currently I am using SOLR 1.2.0 stable build, and this version does not have this feature (Support for Multiple SOLR cores). How do I get this feature? I tried to open the .patch file but I could not understand. Is there any particular version of SOLR in which I can get this. I also looked in to the file https://svn.apache.org/repos/asf/lucene/solr/trunk/src/java/org/apache/solr/core/SolrCore.java, but this does not contain any changes as this feature mentioned like introduction new SolrCore constructor.\n\n If possible could you please point me to the instructions where I can check out this feature or the latest source and build the SOLR binary.\n\nThanks in advance.\nRakesh "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12524987",
            "date": "2007-09-05T05:33:41+0000",
            "content": "Sorry for the long delay in looking at this...  \n\nI got the patch applied to trunk and it appears to be working.  I removed the servlet configuration stuff and think we should revist that in a different patch as soon as this monster is commited.\n\nOtis, if you have time to check this out that would be great. has time to check this over before commiting that would be great \u2013 otherwise, I'll add it in a few days. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12525054",
            "date": "2007-09-05T10:25:10+0000",
            "content": "\nRakesh,\nThe patch needs to be applied to the Solr source 1.3 dev trunk.\nGetting the source is decribed in http://lucene.apache.org/solr/version_control.html (and I suggest you also read the FAQ here http://wiki.apache.org/solr/FAQ ).\nInstructions to apply the patch are described in the Jira issue (as well as a description of its applicability & usefulness; are you sure you need this patch?)\nRegards\nHenri\n\nQuoted from: \nhttp://www.nabble.com/-jira--Created%3A-%28SOLR-215%29-Multiple-Solr-Cores-tf3651963.html#a12487432\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12525941",
            "date": "2007-09-08T19:10:11+0000",
            "content": "I just committed a HUGE patch that removes the SolrCore static singleton.\n\nThis does not yet support configuring and using multiple cores.  For clarity, i think that should get its own new issue while we figure out the best interface.  Lets continue to use this issue to resolve any problems that may occur from the core changes.\n\nHenri - thanks for your patience and stamina! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12528936",
            "date": "2007-09-19T22:30:55+0000",
            "content": "marking Fixed in 1.3\n\n(I believe Ryan left this open to track any potential issues ...  if nothing else this way we'll remember to resolve it before releasing) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12529509",
            "date": "2007-09-21T17:16:56+0000",
            "content": "FYI, firstSearcher/newSearcher hooks are now broken because the constructors to AbstractSolrEventListener was changed to take a SolrCore, and the code in SolrCore that creates event listeners does a simple newInstance() "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12529625",
            "date": "2007-09-22T06:28:27+0000",
            "content": "Replacing the line\n          SolrEventListener listener = (SolrEventListener)solrConfig.newInstance(className);\nWith\n          SolrEventListener listener = createEventListener(className);\nshould fix it. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12529668",
            "date": "2007-09-22T14:50:32+0000",
            "content": "fixed the SolrEventListener issue in rev578451 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12534433",
            "date": "2007-10-12T22:42:24+0000",
            "content": "Mike Klass points out a BIG BAD problem with this patch:\nhttp://www.nabble.com/Deprecations-and-SolrConfig-patch-tf4611038.html\n\nThe token filter interface keeps:\n@Deprecated\n  public void init(Map<String,String> args) \n{\n    log.warning(\"calling the deprecated form of init; should be calling init(SolrConfig solrConfig, Map<String,String> args)\");\n    this.args=args;\n  }\n \n\nbut this is never called, so it only tricks us into thinking it is backwards compatible. \n\nOptions:\n1. Break the API \u2013 at least no one would get fooled into thinking it works\n\n2. Add some hacky bits to IndexSchema readTokenFilterFactory that first calls the deprecated init, then calls the 'real' one. \u2013 make some clear statemes somewhere about how this works and how it will go away.\n\nI don't have time to look at this for another week or so, but it is very important.  Henri, if you have some time, it would be great if you could take a look at some options.\n\nryan "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12534437",
            "date": "2007-10-12T23:12:44+0000",
            "content": "Ok, I liked... fixing this is not hard.\n\nDeprecation support was already baked into IndexSchema:\n\n    TokenFilterFactory tfac = (TokenFilterFactory)solrConfig.newInstance(className);\n    if (tfac instanceof SolrConfig.Initializable)\n      ((SolrConfig.Initializable)tfac).init(solrConfig, DOMUtil.toMapExcept(attrs,\"class\"));\n    else\n      tfac.init(DOMUtil.toMapExcept(attrs,\"class\"));\n\nthe problem is that BaseTokenizerFactory and BaseTokenFilterFactory both implement SolrConfig.Initializable so the IndexSchema assumes they are using the new interface.  If someone extends something from these Base classes it is not called.\n\nthe fix is simply to call init( args ) from within init( config, args ) \u2013 I'll remove the warning message since that will be called by default now.\n\nryan "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12535028",
            "date": "2007-10-16T01:05:48+0000",
            "content": "This was committed a while ago.  If it causes any problems, we should open a new issue to track progress. "
        }
    ]
}