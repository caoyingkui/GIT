{
    "id": "LUCENE-5856",
    "title": "remove useless & 0x3f from *BitSet.get and company",
    "details": {
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "java specification says:\n\n\nIf the promoted type of the left-hand operand is long, then only the six lowest-order bits of the right-hand operand are used as the shift distance. It is as if the right-hand operand were subjected to a bitwise logical AND operator & (\u00a715.22.1) with the mask value 0x3f (0b111111). The shift distance actually used is therefore always in the range 0 to 63, inclusive.\n\nand x86 works the same way.\n\nif we remove this, we just see less instructions with printassembly...",
    "attachments": {
        "LUCENE-5856.patch": "https://issues.apache.org/jira/secure/attachment/12658441/LUCENE-5856.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14077942",
            "author": "Robert Muir",
            "content": "simple patch.\n\ni tried to figure out a way to benchmark, so i used matchalldocs+filters of different densities (and forced fixedbitset). \n\nGives me numbers like:\n\n\n                    Task   QPS trunk      StdDev   QPS patch      StdDev                Pct diff\n                   F50.0       14.76      (1.2%)       15.67      (0.1%)    6.1% (   4% -    7%)\n                  F100.0       20.28      (2.4%)       21.61      (0.0%)    6.6% (   3% -    9%)\n                   F99.0       20.05      (2.4%)       21.40      (0.1%)    6.7% (   4% -    9%)\n                   F95.0       19.21      (2.2%)       20.54      (0.2%)    6.9% (   4% -    9%)\n                   F90.0       18.40      (2.1%)       19.71      (0.3%)    7.1% (   4% -    9%)\n                   F75.0       16.39      (1.5%)       17.60      (0.6%)    7.4% (   5% -    9%)\n                   F20.0       27.04      (1.0%)       29.09      (0.1%)    7.6% (   6% -    8%)\n                   F10.0       42.09      (1.0%)       46.16      (0.5%)    9.7% (   8% -   11%)\n                    F5.0       56.77      (0.8%)       64.46      (0.6%)   13.6% (  12% -   15%)\n                    F2.0       70.43      (0.5%)       83.48      (0.7%)   18.5% (  17% -   19%)\n                    F1.0       76.42      (0.3%)       92.60      (0.7%)   21.2% (  20% -   22%)\n                    F0.5       80.01      (0.2%)       98.15      (0.6%)   22.7% (  21% -   23%)\n\n\n\nI suppose F0.5 looks the best, because it has less noise from priority queue checks and other things going on. ",
            "date": "2014-07-29T16:34:15+0000"
        },
        {
            "id": "comment-14077974",
            "author": "Michael McCandless",
            "content": "+1, nice! ",
            "date": "2014-07-29T17:01:38+0000"
        },
        {
            "id": "comment-14079086",
            "author": "Adrien Grand",
            "content": "+1! ",
            "date": "2014-07-30T09:00:15+0000"
        },
        {
            "id": "comment-14079375",
            "author": "Ryan Ernst",
            "content": "+1 ",
            "date": "2014-07-30T15:24:27+0000"
        },
        {
            "id": "comment-14080117",
            "author": "ASF subversion and git services",
            "content": "Commit 1614787 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1614787 ]\n\nLUCENE-5856: Optimize Fixed/Open/LongBitSet to remove unnecessary AND ",
            "date": "2014-07-30T22:50:06+0000"
        },
        {
            "id": "comment-14080165",
            "author": "ASF subversion and git services",
            "content": "Commit 1614790 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1614790 ]\n\nLUCENE-5856: Optimize Fixed/Open/LongBitSet to remove unnecessary AND ",
            "date": "2014-07-30T23:17:16+0000"
        },
        {
            "id": "comment-14080617",
            "author": "Uwe Schindler",
            "content": "Thanks, cool! Reading the JVM spec is sometimes useful. It is interesting why Hotspot oitsself does not remove the & in our code during optimization. ",
            "date": "2014-07-31T07:47:05+0000"
        },
        {
            "id": "comment-14080818",
            "author": "Yonik Seeley",
            "content": "It is interesting why Hotspot oitsself does not remove the & in our code during optimization.\nIndeed.  I just tested if I should make the corresponding changes in heliosearch's native code, but both gcc and llvm(clang) did this optimization with -O or above.  That's good since C/C++ standards leave shifting by an amount outside 0..63 as undefined. ",
            "date": "2014-07-31T12:58:05+0000"
        }
    ]
}