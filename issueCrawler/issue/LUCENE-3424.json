{
    "id": "LUCENE-3424",
    "title": "Return sequence ids from IW update/delete/add/commit to allow total ordering outside of IW",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "Based on the discussion on the mailing list IW should return sequence ids from update/delete/add and commit to allow ordering of events for consistent transaction logs and recovery.",
    "attachments": {
        "LUCENE-3424.patch": "https://issues.apache.org/jira/secure/attachment/12500663/LUCENE-3424.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-10-25T12:23:43+0000",
            "content": "here is a first patch to add sequence ids to the IndexWriter. Add, Update and Delete methods return a long sequence id which is incremented for each operation. For updates and deletes the sequence ids introduce a small overhead in the DeleteQueue since I have to add a long value to each item . However, for addDocument I now have to add an empty Item in the queue to allow increasing seq ids even when you add a document. Since those queue items are very short living I think this is feasible. \n\nif that is too much of an overhead we can also disable this by default via IWC and make it optional, this is actually very straight forward.\n\nreviews & comments are very appreciated. ",
            "author": "Simon Willnauer",
            "id": "comment-13134973"
        },
        {
            "date": "2011-10-26T17:15:08+0000",
            "content": "Patch looks great!\n\nThe basic idea is every IW op (add/update/delete) returns a long\nseqID.  This is a \"transient\" thing (only useful in RAM in your\ncurrent IW session; never stored in the index nor in RAM), and the app\ncan use it to know the precise order-of-ops inside IW, to know eg if a\ndelete and add happens from two threads at once, which one \"took\".\n\nThe seqID should never be the same for any 2 ops, even across threads,\nright?  Will it ever have \"holes\" (ie, skip a given value), or must\nall values be accounted for?\n\nCommit doesn't incr the seqID right?  It just returns the max seqID\nin the commit point, right?  If you commit having made no \"actual\"\nchanges (eg say you just called optimize), what seqID comes back?\n\nWhen an exc occurs is a seqID allocated and then skipped?  (Maybe only\nfor certain exceptions?).\n\nIf an aborting-exc is hit... will we \"lose\" a bunch of seqIDs right?\nLike the next op against the IW will assign a previously used seqID?\n\nseqIDs have nothing to do with flushing?  Ie, the app sees no change\nin the returned seqIDs just because a flush occurred under the hood?\n\nCool that the new test case is able to use the\nThreadedIndexingAndSearching base class!\n\nIn general can you give a different name if the seqID was \"coded\" (<<\n1) vs not?  (maybe codedSeqID or something)? Just to reduce chance of\nfuture errors...\n\nIf the perf hit is negligible I don't think we need to add an IWC\noption? ",
            "author": "Michael McCandless",
            "id": "comment-13136119"
        },
        {
            "date": "2011-10-26T20:14:59+0000",
            "content": "thanks mike for taking the time, this stuff is hairy.\n\n The seqID should never be the same for any 2 ops, even across threads,\nright? Will it ever have \"holes\" (ie, skip a given value), or must\nall values be accounted for?\n\none seqID will never be assigned twice. the seq ID is always taken from the current tail of the queue and is final once the tails next pointer is assigned. Yet, in the current patch there is a possibility for holes ie. some seq. ids are not used at all. Currently when I do a full flush (NRT reopen or commit) I need to cut over to the new deletequeue which means that two delete queues are active for a short amount of time. The old queue might be still in use by some DWPT (currently in flight) and the new queue is used for incoming threads. what I do to prevent double assignments is that I use the current old queues max seq id and increment it by the number of active thread states (ie. the max number of possible dwpt in flight). Deletes are no problem at that point since its synced on DW just like flushAllThreads(). I need to think about how we could close those gaps but I think we need to block ie. non-blocking / swap DWPT will not work though.\n\nCommit doesn't incr the seqID right? It just returns the max seqID\nin the commit point, right? If you commit having made no \"actual\"\nchanges (eg say you just called optimize), what seqID comes back?\n\nright, it would return the the same seq id or possibly a higher one due to the gaps I explained above.\n\n When an exc occurs is a seqID allocated and then skipped? (Maybe only\nfor certain exceptions?).\n\nits allocated as basically the last op in DWPT#updateDocument so yes if an exc occurs after that which breaks the DWPT ie. is aborting the ids are skipped. if an exc happens in the same thread ie. during flush it will stay assigned. This could be a problem though but if an exc occurs we are in invalid state anyway, right?\n\nif an aborting-exc is hit... will we \"lose\" a bunch of seqIDs right?\nLike the next op against the IW will assign a previously used seqID?\n\nno previously assigned seqID should not be assigned again. The del queue is global so once you assigned it its gone - once an item is in the queue it should not change\n\nseqIDs have nothing to do with flushing? Ie, the app sees no change\nin the returned seqIDs just because a flush occurred under the hood?\n\nright, except of the full flush I mentioned above.\n\n In general can you give a different name if the seqID was \"coded\" (<<\n1) vs not? (maybe codedSeqID or something)? Just to reduce chance of\nfuture errors...\n\nyeah good point. I tried to not introduce a short living object here so I figured piggy-packing the seq. id is fine but yeah we should name that differently. \n\nIf the perf hit is negligible I don't think we need to add an IWC\noption?\n\nits just like an update but we save the delete handling - some extra cpu cycles but since the other work is so much heavier I think its ok though.\n\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-13136302"
        },
        {
            "date": "2013-07-23T18:44:38+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717007"
        },
        {
            "date": "2014-04-16T12:54:29+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970771"
        },
        {
            "date": "2017-01-05T10:27:26+0000",
            "content": "This was done with LUCENE-7302. ",
            "author": "Michael McCandless",
            "id": "comment-15801006"
        }
    ]
}