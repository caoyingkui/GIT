{
    "id": "SOLR-12243",
    "title": "Edismax missing phrase queries when phrases contain multiterm synonyms",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "affect_versions": "7.1",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "synonyms.txt:\n\nallergic, hypersensitive\naspirin, acetylsalicylic acid\ndog, canine, canis familiris, k 9\nrat, rattus\n\n\n\nrequest handler:\n\n\n<requestHandler name=\"/test_qparse_error\" class=\"solr.SearchHandler\">\n <lst name=\"defaults\">\n<!-- Query settings -->\n <str name=\"defType\">edismax</str>\n <str name=\"tie\"> 0.4</str>\n <str name=\"qf\">title^100</str>\n <str name=\"pf\">title~20^5000</str>\n <str name=\"pf2\">title~11</str>\n <str name=\"pf3\">title~22^1000</str>\n <str name=\"df\">text</str>\n <!-- mm If two or fewer clauses exist, they all must match. \n If three to five clauses exist, one can be missing. If six to eight clauses exist, all but three must match. \n If more than nine clauses exist, only require 30% to match.-->\n <str name=\"mm\">3&lt;-1 6&lt;-3 9&lt;30%</str>\n <str name=\"q.alt\">*:*</str>\n <str name=\"rows\">25</str>\n</lst>\n</requestHandler>\n\n\n\nPhrase queries (pf, pf2, pf3) containing \"dog\" or \"aspirin\" \u00a0against the above list will not be generated.\n\n\"allergic reaction dog\" will generate pf2: \"allergic reaction\", but not pf:\"allergic reaction dog\", pf2: \"reaction dog\", or pf3: \"allergic reaction dog\"\n\n\"aspirin dose in rats\" will generate pf3: \"dose ? rats\" but not pf2: \"aspirin dose\" or pf3:\"aspirin dose ?\"",
    "attachments": {
        "solrconfig.xml": "https://issues.apache.org/jira/secure/attachment/12944837/solrconfig.xml",
        "schema.xml": "https://issues.apache.org/jira/secure/attachment/12944838/schema.xml",
        "SOLR-12243.patch": "https://issues.apache.org/jira/secure/attachment/12920318/SOLR-12243.patch",
        "multiword-synonyms.txt": "https://issues.apache.org/jira/secure/attachment/12944839/multiword-synonyms.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-19T19:42:34+0000",
            "content": "I think the problem is\u00a0EdismaxQParser:: ln 1393. \u00a0super.getFieldQuery returns a SpanNearQuery, which is not an instanceof type BooleanQuery or PhraseQuery or MultiPhraseQuery. \u00a0So the query parser decides it didn't get a legit phrase query back, and throws it out.\u00a0\n\nWhat is the history around what query types are allowed as a phrase query and which aren't?\u00a0\n\nprivate Query getQuery() {\n try {\n\n switch (type) {\n case FIELD: // fallthrough\n case PHRASE:\n Query query;\n if (val == null) \n{\n query = super.getFieldQuery(field, vals, false);\n }\n else \n{\n query = super.getFieldQuery(field, val, type == QType.PHRASE, false);\n }\n // Boolean query on a whitespace-separated string\n // If these were synonyms we would have a SynonymQuery\n if (query instanceof BooleanQuery) \n{\n BooleanQuery bq = (BooleanQuery) query;\n query = SolrPluginUtils.setMinShouldMatch(bq, minShouldMatch, false);\n }\n if (query instanceof PhraseQuery) {\n PhraseQuery pq = (PhraseQuery)query;\n if (minClauseSize > 1 && pq.getTerms().length < minClauseSize) return null;\n PhraseQuery.Builder builder = new PhraseQuery.Builder();\n Term[] terms = pq.getTerms();\n int[] positions = pq.getPositions();\n for (int i = 0; i < terms.length; ++i) \n{\n builder.add(terms[i], positions[i]);\n }\n builder.setSlop(slop);\n query = builder.build();\n } else if (query instanceof MultiPhraseQuery) {\n MultiPhraseQuery mpq = (MultiPhraseQuery)query;\n if (minClauseSize > 1 && mpq.getTermArrays().length < minClauseSize) return null;\n if (slop != mpq.getSlop()) \n{\n query = new MultiPhraseQuery.Builder(mpq).setSlop(slop).build();\n }\n } else if (minClauseSize > 1) {\n // if it's not a type of phrase query, it doesn't meet the minClauseSize requirements\n return null;\n }\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16444682"
        },
        {
            "date": "2018-04-23T12:40:41+0000",
            "content": "OK. Patch pending \u00a0to handle that else if.\n\nDuplicated\u00a0the tests\u00a0from TestEdismaxQParser.testPsPf with a multiterm synonym \"bar, tropical cyclone\", which is mostly passing except for those where the queryphrase is re-ordered with slop. \u00a0Default on those SpanNear queries is inorder=true, which is very different semantics from existing phrase queries with slop.\n\nLooking into that.\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16448067"
        },
        {
            "date": "2018-04-23T18:28:20+0000",
            "content": "Patch:\n\n(1) allows span queries to be returned for phrase query clauses\n\n(2) sets \"inOrder\" = false if phrase slop is set, to be consistent with semantics for pf clauses\n\n(3) Unit tests for pf, pf2 and pf3 clauses containing multi-term synonyms.\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16448649"
        },
        {
            "date": "2018-04-24T10:55:38+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   2m  2s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 55s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 55s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 34s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 30s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 30s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  16m 10s \n  core in the patch passed.  \n\n\n +1 \n  unit  \n  57m 37s \n  core in the patch passed.  \n\n\n  \n   \n  80m 49s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12243 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12920318/SOLR-12243.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 0d969ab \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_152 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/66/testReport/ \n\n\n modules \n C: lucene/core solr/core U: . \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/66/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16449639"
        },
        {
            "date": "2018-04-25T19:54:24+0000",
            "content": "I'd really like to make a bugfix release of the 7_1 branch with this, although the problem is still present on 7.x as well. \u00a0Thoughts?\n\nThe actual change is quite small.\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16452972"
        },
        {
            "date": "2018-04-26T01:16:19+0000",
            "content": "Elizabeth Haubert, even if the patch is accepted and committed, it is extremely unlikely that there will be a new 7.1.x release.  It's far more likely that it will be released with 7.4.0 or later.  You're always free to build your own snapshot release from the 7.1.x source.\n\nI do not know anything about the change or the problem you've encountered, so I can't comment there. ",
            "author": "Shawn Heisey",
            "id": "comment-16453324"
        },
        {
            "date": "2018-04-26T09:21:14+0000",
            "content": "Yes, \u00a0I'm making a snapshot build with the patch already. \u00a0I started with 7.1, because that is where I found the issue. \u00a0What\u00a0is the current development branch? branch_7x? master? \u00a0\n\nThank you.\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16453738"
        },
        {
            "date": "2018-04-26T13:26:40+0000",
            "content": "In general, we make changes to master.  Then we backport to the current stable development branch.\n\nThe current stable development branch is branch_7x.\n\nIf there are any releases currently underway or due to be underway shortly, and the release manager for that version agrees with the change, the change MIGHT be backported to a more specific branch, such as branch_7_3.\n\nAt some point in the future that has not yet been determined, we will create branch_8x from master and begin the process of releasing 8.0.0.  At that point, work on branch_7x is likely to stop. ",
            "author": "Shawn Heisey",
            "id": "comment-16454186"
        },
        {
            "date": "2018-04-26T14:30:28+0000",
            "content": "OK; making a patch against master then. \u00a0The \"how to contribute\" doc says that patches should be named by the Jira ticket. \u00a0Is there a convention to specify what point in time a patch was made? In this case, the code change is so small I doubt it matters, and I'll just replace the existing patch. \u00a0 \u00a0But for anything substantial, it might.\n\nWho is the release manager for 7.4 or 8? ",
            "author": "Elizabeth Haubert",
            "id": "comment-16454309"
        },
        {
            "date": "2018-04-26T15:45:37+0000",
            "content": "The convention is to name all patches the same for any issue.  So any patch you would upload for this issue would be named SOLR-12243.patch.  Jira will keep all of them available, and it will be easy to determine which one is the latest.\n\nThere isn't a release manager yet for the versions you mentioned.  Until somebody volunteers for the work, nobody has that role. ",
            "author": "Shawn Heisey",
            "id": "comment-16454413"
        },
        {
            "date": "2018-04-27T12:59:46+0000",
            "content": "No change to the patch against master, \u00a0there isn't that much to it.\n\n\u00a0\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16456352"
        },
        {
            "date": "2018-04-27T16:03:18+0000",
            "content": "Hi Elizabeth Haubert, how ere you able to generate the\u00a0Lucene/Solr QA\u00a0report ?\nDid that happen automatically ? ",
            "author": "Alessandro Benedetti",
            "id": "comment-16456670"
        },
        {
            "date": "2018-04-27T16:45:29+0000",
            "content": "My understanding from the HowToContribute\u00a0is that is supposed to happen automagically if the patch is named correctly, but I didn't knowingly do anything to cause it to happen. \u00a0Code is pretty straightforward, but I'm having a\u00a0bit\u00a0of a learning curve on the non-code things that need to happen. ",
            "author": "Elizabeth Haubert",
            "id": "comment-16456720"
        },
        {
            "date": "2018-04-27T17:54:09+0000",
            "content": "Hi Elizabeth Haubert, thanks for the reply.\n\nI think the current patch could be completed adding a test that verifies the actual query (building) parsing.\n The bug affects the query (building) parsing in the end, so, testing on results per query\u00a0can be effective, but it's not testing the bugfix.\n\nI will just post a brutal copy and paste here, If the Jira is still open I will push a PR with the fix in the next days.\n\nAdding something like this should work :\n\npublic void testEdismaxQueryParsing_multiTermWithPf_shouldParseCorrectPhraseQueries() throws Exception\n\n{ Query q = QParser.getParser(\"foo a b bar\",\"edismax\",true, req(params(\"sow\", \"false\",\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery(); assertEquals(\"(\" + \"((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0) (((+text:tropical +text:cyclone) text:bar)^10.0)) \" + \"((spanNear([text:foo, text:a, text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^10.0) \" + \"(((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((spanNear([text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^5.0)) \" + \"(((text:\\\"foo a b\\\")^8.0) ((spanNear([text:a, text:b, spanOr([spanNear([text:tropical, text:cyclone], 0, true), text:bar])], 0, true))^8.0))\", q.toString()); q = QParser.getParser(\"foo a b tropical cyclone\",\"edismax\",true, req(params(\"qf\", \"text^10\",\"pf\", \"text^10\",\"pf2\", \"text^5\",\"pf3\", \"text^8\"))).getQuery(); assertEquals(\"(\" + \"((text:foo)^10.0) ((text:a)^10.0) ((text:b)^10.0) ((text:bar (+text:tropical +text:cyclone))^10.0)) \" + \"((spanNear([text:foo, text:a, text:b, spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)])], 0, true))^10.0) \" + \"(((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((text:\\\"b tropical\\\")^5.0)) (spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]))^5.0))\" + \"(((text:\\\"foo a b\\\")^8.0) ((text:\\\"a b tropical\\\")^8.0) ((spanNear([text:b, spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)])], 0, true))^8.0))\", q.toString()); }\n\nN.B. The second part is failing for pf2, because for the query \"foo a b tropical cyclone\" , pf2 is generating just :\n ((text:\\\"foo a\\\")^5.0) ((text:\\\"a b\\\")^5.0) ((text:\\\"b tropical\\\")^5.0)), which I believe is incorrect as an additional span query should be generated \u00a0( (spanOr([text:bar, spanNear([text:tropical, text:cyclone], 0, true)]))^5.0)).\n I will investigate further in the next days, just wanted to post it here to the community attention  ",
            "author": "Alessandro Benedetti",
            "id": "comment-16456834"
        },
        {
            "date": "2018-04-27T19:13:17+0000",
            "content": "The fix I pushed up really only handles the case where you're starting with the single-word synonym well for pf2. \u00a0So matching \"foo bar\" queries to \"foo tropical cyclone\" documents. \u00a0This was a real problem for my use case, because the pf clauses weren't being generated at all.\n\nThe other direction,\u00a0to match \"foo tropical cyclone\" queries to \"foo bar\" documents is harder. \u00a0 I've gone a little ways into the pf2 \"b tropical\" problem, but it is a deeper problem than the spans getting thrown out because they were the wrong type of query.\u00a0Start small.\n\nHere's what I've got for the other direction:\n\nOne of\u00a0first thing edismax does is generate a list of different kinds of clauses off the user query, and that seems to be unaffected by the sow flag. So \"foo tropical cyclone\" has three bareword clauses: \"foo\", \"tropical\", and \"cyclone\". But 'foo \"tropical cyclone\"' (with quotes) has two: a bareword foo and a phrase \"tropical cyclone\". \u00a0 When it goes to construct pf2 and pf3, edismax re-assembles the bareword clauses, then makes the 2- and 3- word shingles. So \"foo tropical cyclone\" would get\u00a0pf2=\"foo tropical\" and \"tropical cyclone\", pf2=\"foo tropical\" can't get expanded, because it is missing cyclone, and will go through such as it is; \u00a0\"tropical cyclone\" will get expanded, but then removed as not a phrase, not just because it is a Span. \u00a0That seems consistent if we think of \"tropical cyclone\" as a single entity. \u00a0So to do anything, we need to address how the shingle queries are being constructed.\n\n\u00a0\n\nI opened Jira-12260 to start looping in the phrases to pf clauses, not just the barewords, because that has some other weird semantics. \u00a0So 'foo \"tropical cyclone\" baz' (with quotes) would generate pf=\"foo baz\", which is unintuitive - it would make more sense if it became \"foo \"tropical cyclone\"\" and \"tropical cyclone\" baz. Beyond looking a little into whether the graph queries could handle the phrase, I haven't really dug how to do that\u00a0yet.\n\nThat matters here, because if that works and the semantics are acceptable, multi-word synoynms are already handled as quoted in the logic that creates the graph queries. \u00a0 So it would (probably) be safe to take that another step to stuff the multiword synonyms into a single phrase clause, rather than individual bareword clauses. \u00a0Maybe.\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16456929"
        },
        {
            "date": "2018-04-27T22:21:07+0000",
            "content": "Actually the solution seems easier than expected :\n\n\tI generalised your additional condition\u00a0to include SpanOrQuery ( checking SpanQuery actually)\n\tI added the test checking the query is correctly (built) parsed\n\tI haven't touched anything else, I left your tests un-touched, in the end they are additional tests, so even if they check the bug-fix indirectly they are not harmful\u00a0\n\n\n\nI attached the extended patch and created a PR via Github.\nMy only suggestion would be to re-word slightly the messages if your are going that way (I personally prefer to split the unit tests \ne.g.\u00a0testEdismaxQueryParsing_multiTermSynonymWithPfAndPs_shouldParseCorrectSpanQueries() but it is your call if you want to do so).\n\n\n\n\n\u00a0 ",
            "author": "Alessandro Benedetti",
            "id": "comment-16457168"
        },
        {
            "date": "2018-04-27T22:27:13+0000",
            "content": "Thank you! ",
            "author": "Elizabeth Haubert",
            "id": "comment-16457172"
        },
        {
            "date": "2018-05-04T12:46:58+0000",
            "content": "Apparently there are some issues with auto generated github patches and the Jenkins job validating the patch.\n\nIn theory it should just work straightforward :\nGithub Pull Request -> patch extracted -> patch validated through Jenkins job\n\nBut the process is not smooth and I had to push various version of the same patch ( this is valid for others issues as well) .\nAttaching the latest patch ( generated from git diff) ",
            "author": "Alessandro Benedetti",
            "id": "comment-16463831"
        },
        {
            "date": "2018-05-06T06:30:22+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   5m 21s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   5m  3s \n  the patch passed  \n\n\n +1 \n  javac  \n   5m  3s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 39s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 27s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 27s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  46m  4s \n  core in the patch passed.  \n\n\n -1 \n  unit  \n 120m 59s \n  core in the patch failed.  \n\n\n  \n   \n 185m 13s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.update.MaxSizeAutoCommitTest \n\n\n\u00a0\n solr.cloud.autoscaling.ScheduledMaintenanceTriggerTest \n\n\n\u00a0\n solr.cloud.autoscaling.sim.TestTriggerIntegration \n\n\n\u00a0\n solr.cloud.autoscaling.sim.TestLargeCluster \n\n\n\u00a0\n solr.cloud.autoscaling.SearchRateTriggerTest \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12243 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12921951/SOLR-12243.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 89fc02a \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 8 2015 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/80/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/80/testReport/ \n\n\n modules \n C: lucene/core solr/core U: . \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/80/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16464990"
        },
        {
            "date": "2018-05-07T11:05:28+0000",
            "content": "I am a little bit surprised by the jenkins checks :\n\n\n\nFailed junit tests\nsolr.update.MaxSizeAutoCommitTest\n\n\n\u00a0\nsolr.cloud.autoscaling.ScheduledMaintenanceTriggerTest\n\n\n\u00a0\nsolr.cloud.autoscaling.sim.TestTriggerIntegration\n\n\n\u00a0\nsolr.cloud.autoscaling.sim.TestLargeCluster\n\n\n\u00a0\nsolr.cloud.autoscaling.SearchRateTriggerTest\n\u00a0\n\u00a0\n\n\n\n\n\n\n\nI can not reproduce these failures and given the modules involved are extremely unlikely to be related with the query parsing fix in object of the patch ...\nShawn Heisey any view on this ? ",
            "author": "Alessandro Benedetti",
            "id": "comment-16465791"
        },
        {
            "date": "2018-05-07T11:19:58+0000",
            "content": "FWIW, I was seeing the\u00a0MaxSizeAutoCommitTest fail against master locally both with and without the patch, but not after running with badapples turned off.\n\nDon't know anything about the others, though. ",
            "author": "Elizabeth Haubert",
            "id": "comment-16465801"
        },
        {
            "date": "2018-05-07T15:43:51+0000",
            "content": "I have not been following code changes on this issue.  But I have been seeing frequent failures in Solr tests even with a completely unmodified code checkout.  This is what Erick is trying to fix with his recent work on tests.\n\nUntil tests reach the point where they pass on virtually all runs, test failures in the automatic patch validation are to be expected, and it's not straightforward to know whether they indicate a problem in the patch.  That DOES mean that automatic patch validation isn't as useful as it could be.  The problem is known and is not being ignored. ",
            "author": "Shawn Heisey",
            "id": "comment-16466049"
        },
        {
            "date": "2018-05-08T17:21:26+0000",
            "content": "Thanks Shawn Heisey, the code changes were minimal ( 1 line changed + 1 test added) but I agree with you about the inconsistency of the current testing framework.\nI have another 3 patches pending, all of them with random tests failures ( very unlikely to be related the change itself).\nYou mentioned Erick is working on that, is there any Jira issue tracking that ?\nAny way we could help ?\nThanks ",
            "author": "Alessandro Benedetti",
            "id": "comment-16467714"
        },
        {
            "date": "2018-05-08T19:52:48+0000",
            "content": "See SOLR-12028.  This issue refers to another one that was deleted for some reason \u2013 SOLR-12016.  I can see all the history for that issue in my mail archive, but it's not on the Internet any more unless you want to delve into things like the web archive.\n\nThere is also an extensive discussion on the dev list, and a number of status messages from Erick Erickson detailing the work he's doing on an ongoing basis. ",
            "author": "Shawn Heisey",
            "id": "comment-16467881"
        },
        {
            "date": "2018-05-17T21:12:03+0000",
            "content": "Thanks Shawn Heisey, I read about that issue and there's plenty of work going on in that direction...\nAnything we can do our side to speed up the review and contribution of this one ? ",
            "author": "Alessandro Benedetti",
            "id": "comment-16479714"
        },
        {
            "date": "2018-05-29T17:41:03+0000",
            "content": "Sorry to be boring, but is anything we can do to speed up a review and contribution of this one ? ",
            "author": "Alessandro Benedetti",
            "id": "comment-16493928"
        },
        {
            "date": "2018-07-20T15:07:49+0000",
            "content": "Hi community,\n\nif this bug-fix is not of interest could we have an explanation why and have this Jira issue closed ?\nThanks ",
            "author": "Alessandro Benedetti",
            "id": "comment-16550867"
        },
        {
            "date": "2018-07-21T11:03:40+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   3m 17s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   4m 32s \n  the patch passed  \n\n\n +1 \n  javac  \n   4m 32s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 23s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 19s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 19s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  30m 12s \n  core in the patch passed.  \n\n\n -1 \n  unit  \n  77m 51s \n  core in the patch failed.  \n\n\n  \n   \n 121m  9s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.handler.component.InfixSuggestersTest \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12243 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12921951/SOLR-12243.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 1bea1da \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 8 2015 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/148/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/148/testReport/ \n\n\n modules \n C: lucene/core solr/core U: . \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/148/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16551617"
        },
        {
            "date": "2018-08-06T16:00:46+0000",
            "content": "Hi,\nI can take care about this issue. Sorry for the ever failing patch validator, that's a known issue. IMHO, the patch is quite easy and should not break any other feature, so I have no problem with committing it. If we have better features later, we can fix the issue in a better way, but as a quick fix this looks perfectly fine.\n\nI will verify the patch the \"conventional way\" and fix it. But we won't backport this to older Lucene/Solr versions like 7.1. You have to update then! ",
            "author": "Uwe Schindler",
            "id": "comment-16570402"
        },
        {
            "date": "2018-08-07T13:43:41+0000",
            "content": "Thank you! ",
            "author": "Elizabeth Haubert",
            "id": "comment-16571670"
        },
        {
            "date": "2018-08-07T15:19:18+0000",
            "content": "Would it be possible to add a test into oal.util.TestQueryBuilder, because it changes the semantics of span queries depending on slop? I'd like to have a test for it, so we can verify that it behaves exactly like conventional phrase queries.\n\nI think it should be as simple as the 2 tests about graph queries in there.\n\nAbout the test in Solr: I am not happy with the test that prints out the query as string and compares it with an expected string representation. This relies on the exact output of toString() which is not standardized in Lucene and might change. I can live with it if its done in the same way in other tests, but just just be done as a fallback. ",
            "author": "Uwe Schindler",
            "id": "comment-16571827"
        },
        {
            "date": "2018-08-07T15:20:31+0000",
            "content": "As this test changes also behaviour of LUCENE code, I will add a changes log entry also on Lucene's side. It's a bug, but I want to be sure that nobody misses this change. ",
            "author": "Uwe Schindler",
            "id": "comment-16571831"
        },
        {
            "date": "2018-08-07T16:06:43+0000",
            "content": "About the test in Solr: I am not happy with the test that prints out the query as string and compares it with an expected string representation. This relies on the exact output of toString() which is not standardized in Lucene and might change.\nIt's a trade-off for sure. \u00a0I prefer this style as I find it easy to read. \u00a0I've seen tests that break out each object of the Query and do a bunch of comparisons\u00a0(sometimes declaring intermediate variables)\u00a0and my eyes just gloss over reading it. \u00a0If the toString changes (and we don't take those changes lightly), then it's pretty safe to blindly update such test strings since a change to the toString() ought not to be making other changes to query structure. \u00a0Conceptually this argument can be had about other things like the structure of a SolrDocument (compare toString vs compare part by part) or Highlighting snippet as well \u2013 same tradeoffs in test assertion\u00a0methodology. ",
            "author": "David Smiley",
            "id": "comment-16571896"
        },
        {
            "date": "2018-08-21T10:25:06+0000",
            "content": "I am looking into committing this soon. Unfortunately we do not have a test for the Lucene part. I may have time at end of week to work on it. ",
            "author": "Uwe Schindler",
            "id": "comment-16587262"
        },
        {
            "date": "2018-10-15T20:51:11+0000",
            "content": "After talking to Steve Rowe, there is a new issue LUCENE-8531 to handle the current Span requirement that sloppy queries be inOrder.\n\nSince the core issue with this ticket was that the span clauses prevents pf/pf2/pf3 from being generated entirely, then it seems prudent to back out the lucene change under this ticket, and add a new one to pick up the reordering when there is a patch to LUCENE-8531.\n\nUpdated patch pending shortly.\n\nAlessandro Benedetti, I will include the query expansion test you added, but update it to reflect that the inOrder=false will become inOrder=true.\u00a0 \u00a0I'm not sure what the right way to\u00a0coordinate that with the pull request.\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16650777"
        },
        {
            "date": "2018-10-15T22:56:06+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   4m  2s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   3m 27s \n  the patch passed  \n\n\n +1 \n  javac  \n   3m 27s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 51s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 39s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 39s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  31m 48s \n  core in the patch passed.  \n\n\n -1 \n  unit  \n  80m 45s \n  core in the patch failed.  \n\n\n  \n   \n 125m 44s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.MultiThreadedOCPTest \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12243 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12921951/SOLR-12243.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 73a413c \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 20 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/200/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/200/testReport/ \n\n\n modules \n C: lucene/core solr/core U: . \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/200/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16650927"
        },
        {
            "date": "2018-10-17T06:22:12+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 40s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 35s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 35s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 35s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 35s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 35s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  50m  9s \n  core in the patch failed.  \n\n\n  \n   \n  55m 59s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.autoscaling.sim.TestSimPolicyCloud \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12243 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12944131/SOLR-12243.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 635d1ea \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/203/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/203/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/203/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16653028"
        },
        {
            "date": "2018-10-18T08:55:21+0000",
            "content": "I am fine with splitting those issues! ",
            "author": "Uwe Schindler",
            "id": "comment-16654888"
        },
        {
            "date": "2018-10-19T12:12:18+0000",
            "content": "The central problem in this issue was unclear to me, so I asked Elizabeth Haubert if she could explain it.  With that information, I was able to do a test that makes it pretty clear.\n\nWith a 7.5.0 example setup, I created a \"title\" field using the default text_general fieldType (which uses SynonymGraphFilter at query time), and included the two configs provided in the issue description (synonyms and handler).  Here's the parsed queries for a couple of examples.  The difference here is one includes \"dog\" which has a multiterm synonym, and the other includes \"rat\" which only has single-term synonyms:\n\nwith q=allergic reaction dog\n\n+((((Synonym(title:allergic title:hypersensitive))^100.0)~0.4\n((title:reaction)^100.0)~0.4 ((title:canine (+title:canis +title:familiris)\n(+title:k +title:9) title:dog)^100.0)~0.4)~3) () (title:\\\"(hypersensitive allergic) reaction\\\"~11)~0.4 ()\n\n\n\nwith q=allergic reaction rat\n\n+((((Synonym(title:allergic title:hypersensitive))^100.0)~0.4\n((title:reaction)^100.0)~0.4 ((Synonym(title:rat title:rattus))^100.0)~0.4)~3)\n((title:\\\"(hypersensitive allergic) reaction (rattus rat)\\\"~20)^5000.0)~0.4\n((title:\\\"(hypersensitive allergic) reaction\\\"~11)~0.4 (title:\\\"reaction (rattus rat)\\\"~11)~0.4)\n((title:\\\"(hypersensitive allergic) reaction (rattus rat)\\\"~22)^1000.0)~0.4\n\n ",
            "author": "Shawn Heisey",
            "id": "comment-16656723"
        },
        {
            "date": "2018-10-19T12:37:00+0000",
            "content": "There are also tests included with the patch.\n\n ",
            "author": "Elizabeth Haubert",
            "id": "comment-16656748"
        },
        {
            "date": "2018-10-19T14:37:29+0000",
            "content": "We have to wait for the Lucene issue to be solved. It also affects Elasticsearch. ",
            "author": "Uwe Schindler",
            "id": "comment-16656862"
        },
        {
            "date": "2018-10-19T14:57:00+0000",
            "content": "Why do we need to wait for the lucene patch, if that has been backed out of\nthis jira?\n\nI thought the ticket was split, as there are two distinct issues. One that\nthe clauses are missing entirely, which would be handled here,  and a\nsecond one that when the span clauses are generated with the attached\npatch, the semantics between phrase clauses with and without multi term\nsynonyns are different without the lucene change.\n\nDepending on how reordering in span queries is implemented in lucene, there\nmay need to be additional logic to edismax to take advantage, but\npresumably that would need another issue?\n\n\n ",
            "author": "Elizabeth Haubert",
            "id": "comment-16656893"
        },
        {
            "date": "2018-10-19T16:50:14+0000",
            "content": "That's waht I mean, it's still linked together. The main bug is still in Lucene, because the Lucene Query builder creates a query that does not correctly implement span queries on multi-term synonyms, because it uses the wrong query type. The issues here are coming from the fact that dismax relies on the interal implementation of the lucene code, which is not a good thing. The solr code should not do this and instead we should add something into Lucene that can create those pf auto-phrase queries. I was missing that in an own query parser, too. So basically it would be good to have some additional query builder method in Lucene that analyzes some text and then builds configureable shingles that are connected with span/phrase using a slop. This code should not depend on the structure of a span/boolean query that was parsed before.\n\nI'd like to wait a few days until the Lucene issue is solved and then review the changes here and adapt them as necessary. On the longer term, I'd like to get rid of the query instanceof spaghetticode and move the query construction for dismax-like queries using term shingles (bigrams, trigrams) to a separate builder class. So it's better resuseable. ",
            "author": "Uwe Schindler",
            "id": "comment-16657074"
        },
        {
            "date": "2018-10-19T16:59:58+0000",
            "content": "The Lucene issue is about to be committed, so let's adapt the instanceof checks here (because it no longer creates SpanQueries for all types of phrases). ",
            "author": "Uwe Schindler",
            "id": "comment-16657094"
        },
        {
            "date": "2018-10-19T21:44:45+0000",
            "content": "Hi, the Lucene issue was committed. I think we can now test this. Nevertheless, according to my understanding, as for slop!=0 it no longer creates span queries, the bug is fixed anyways. For slop=0 it creates (faster) span queries, so  the fixes here should apply.\nElizabeth Haubert: Can you check the patch with the recent Lucene commits included? I can manually try that tomorrow, maybe you're faster. ",
            "author": "Uwe Schindler",
            "id": "comment-16657477"
        },
        {
            "date": "2018-10-19T21:45:48+0000",
            "content": "Nevertheless there should be a test for slop=0 and slop!=0 in Edismax tests. ",
            "author": "Uwe Schindler",
            "id": "comment-16657479"
        },
        {
            "date": "2018-10-20T00:27:43+0000",
            "content": "Pulling to check. ",
            "author": "Elizabeth Haubert",
            "id": "comment-16657603"
        },
        {
            "date": "2018-10-20T01:21:23+0000",
            "content": "I think something is not right, but am not sure what.\n\nRunning current master without the patch applied in the debugger. Making a core with the attached configs; the sanity check is curl -XGET \"http://localhost:8983/solr/new_core/test_qparse_error?debugQuery=on&defType=edismax&q=aspirin%20dose%20in%20rats\"\n\nwhere aspirin had the same \"aspirin, acetylsalicilic acid\" synonyms as previously.\n\nQuery is coming through with the original bug of the empty parens where clauses should be:\n\n+(((text:\"acetylsalicylic acid\" text:aspirin)^100.0) ((text:dose)^100.0) ((text:in)^100.0) ((text:rats)^100.0)) () ((text:\"dose in\"~11) (text:\"in rats\"~11)) ((text:\"dose in rats\"~22)^1000.0)\n\nThat is kinda the expected behavior, since my understanding of the Lucene patch was that it wasn't going to be a SpanQuery object coming through anymore.\u00a0\n\nPut breakpoints at ExtendedDismaxQParser.java in getQuery, and it looks like it is getting a NullPointerException and falling out at ln.1449\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16657638"
        },
        {
            "date": "2018-10-27T02:21:49+0000",
            "content": "\nI think something is not right, but am not sure what.\n[...]\nPut breakpoints at ExtendedDismaxQParser.java in getQuery, and it looks like it is getting a NullPointerException and falling out at ln.1449\n\nIn addition to Elizabeth Haubert's above-described manual test, TestMultiWordSynonyms.testPf3WithoutReordering() in the patch was failing with the same symptoms.\n\nThe problem: The LUCENE-8531 changes cause QueryBuilder to produce a new kind of query structure for a phrase with multi-term synonyms and non-zero slop: a BooleanQuery of PhraseQuery-s.  ExtendedDismaxQParser.getQuery() assumes that BooleanQuery-s always consist of TermQuery-s, and so unconditionally sets the query's minShouldMatch, but since the parser used to construct the pf3 phrase shingles had never had its minShouldMatch spec set, it remained null, causing an NPE when trim was called on it in SolrPluginUtils.setMinShouldMatch().\n\nI've attached a modified version of Elizabeth's patch that includes an ExtendedDismaxQParser.getQuery() fix: don't set a BooleanQuery's minShouldMatch when type==QType.PHRASE.  The modified patch also uncomments TestMultiWordSynonyms.testPf3WithReordering().  All the tests in TestMultiWordSynonyms now pass with the patch.  I haven't tried to run all Solr tests yet.\n\n\nHi, the Lucene issue was committed. I think we can now test this. Nevertheless, according to my understanding, as for slop!=0 it no longer creates span queries, the bug is fixed anyways. For slop=0 it creates (faster) span queries, so the fixes here should apply.\n\nNevertheless there should be a test for slop=0 and slop!=0 in Edismax tests.\n\nNext week I'll look at adding what else ^^ needs testing. ",
            "author": "Steve Rowe",
            "id": "comment-16665837"
        },
        {
            "date": "2018-10-27T12:21:52+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 1 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 49s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 34s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 34s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 34s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 34s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 34s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  55m 32s \n  core in the patch passed.  \n\n\n  \n   \n  61m 30s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-12243 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12945848/SOLR-12243.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / a298802 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/213/testReport/ \n\n\n modules \n C: solr/core U: solr/core \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/213/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16666067"
        },
        {
            "date": "2018-10-29T16:40:30+0000",
            "content": "Current expansions looks perfect, thank you Steve.\u00a0\n\n\nObservation with the\u00a0current approach is that the combinatorics for larger queries and/or longer expansions could get hefty.\u00a0 Would it be worth adding a note about this in the edismax documentation around pf/pf2/pf3.\u00a0\u00a0 Similar to the note around aliasing and qf in the ref guide:\n\nMulti-term synonyms with pf\n\nWhen a phrase query specified with PF/PF2/PF3 contains a synonym expansion, then\u00a0a separate pf clause will be generated for each permutation of each synonym.\u00a0 \u00a0For example, in a system with synonyms for dog, canine and cat,feline the query \"dog chased cat\" would generate the following pf clauses:\n\n\tdog chased cat\n\tcanine chased cat\n\tdog chased feline\n\tcanine chased feline\n\n\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16667425"
        },
        {
            "date": "2018-10-29T17:03:05+0000",
            "content": "Thanks Elizabeth and Steve,\nI think the problem Sarowe mentioned was actually the problem for the failing test (I expected something like this). This is also the reason why I don't like the current architecture. EDismax relies on the (internal) structure of queries that querybuilder produces! IMHO, we should maybe add a \"Lucene\" version of the dismax parser for easier testing. Also I figured out that especially the phrase expansions are useful for Lucene users, too. I had several people I made a custom query parser for and for all of those you hd to reinvent the phrase expansion stuff.\n\nElizabeth: I think the permutation problem is not new with the recent Lucene fixes. This problem should also have happened with Span expansions, right? Maybe we should add an option to limit the number of phrase expansions (as a safety feature). If those limits are reached, the phrase expansion should be stopped (maybe then only bigrams and no trigrams). ",
            "author": "Uwe Schindler",
            "id": "comment-16667457"
        },
        {
            "date": "2018-10-30T14:31:11+0000",
            "content": "I think the permutation problem is not new with the recent Lucene fixes. This problem should also have happened with Span expansions, right? Maybe we should add an option to limit the number of phrase expansions (as a safety feature). If those limits are reached, the phrase expansion should be stopped (maybe then only bigrams and no trigrams).\nI don't know how Span queries are rewritten, or how the search time complexity would work out, but AFAIK the Lucene fixes didn't change the permutation problem, just recast it as explicit clauses.\n\nAs far as safety is concerned, doesn't the Boolean clause limit already apply in this case, since the generated query is a BooleanQuery of PhraseQuery-s?\n\nElizabeth, I like the idea of adding something along the lines of the text you suggested to the ref guide. I made a few tweaks (described below) - please let me know if you think this is okay:\n\nSynonyms expansion in phrase queries with slop\n\nWhen a phrase query with slop (e.g. pf with ps) triggers synonym expansions, a separate clause will be generated for each combination of synonyms. For example, with configured synonyms dog,canine and cat,feline, the query \"dog chased cat\" will generate the following phrase query clauses:\n\n\t\"dog chased cat\"\n\t\"canine chased cat\"\n\t\"dog chased feline\"\n\t\"canine chased feline\"\n\n\nMy\u00a0changes: this situation happens with all synonyms, not just multi-term synonyms; user-specified phrase queries (in q param)\u00a0trigger this situation when qs is specified, so I generalized it a bit to refer to all phrase+slop contexts; and I think \"combination\" is better than \"permutation\" here. ",
            "author": "Steve Rowe",
            "id": "comment-16668790"
        },
        {
            "date": "2018-10-30T14:49:11+0000",
            "content": "Uwe Schindler\u00a0 The number of clauses relative to the\u00a0spans approach kind of depends on how you count clauses, I think\u00a0adding top-level clauses comes up as more expensive than the embedded spans, but suppose would need to add a test to say that for sure.\u00a0 With the Spans, synonyms were implemented as a nested spanOr(syn1, syn2).\u00a0 Adding in \"fido\" and \"kitty\" to the \"dog chased cat\" example,\u00a0the spans would generate\u00a0something like:\u00a0 SpanNear( SpanOr(dog, canine, fido), chased, SpanOr(cat, feline, kitty))\n\nvs\u00a0\n\n\t\"dog chased cat\"\n\t\"canine chased cat\"\n\t\"fido chased cat\"\n\t\"dog chased feline\"\n\t\"canine chased feline\"\n\t\"fido chased feline\"\n\t\"dog chased kitty\"\n\t\"canine chased kitty\"\n\t\"fido chased kitty\"\n\n\n\netc.\n\n\u00a0\n\n\u00a0 ",
            "author": "Elizabeth Haubert",
            "id": "comment-16668814"
        },
        {
            "date": "2018-10-30T15:46:24+0000",
            "content": "I\u00a0share\u00a0Elizabeth Haubert's intuition that \"adding top-level clauses comes up as more expensive than the embedded spans\", including the caveat: \"but suppose would need to add a test to say that for sure\".\n\nI would characterize the permutation problem as substantially different as a result of the recent Lucene fixes. The fixes (LUCENE-8531) essentially reverted LUCENE-7638, an optimization that explicitly set out to address the potential for combinatoric explosion. A SpanQuery-based implementation still has to deal with the possibility of combinatoric matching in documents, but the SpanQuery implementation handles graph \"branching\" natively (as nested Spans), as opposed to running a full, separate, top-level, PhraseQuery for each possible combination of terms. ",
            "author": "Michael Gibney",
            "id": "comment-16668907"
        },
        {
            "date": "2018-10-30T16:11:49+0000",
            "content": "I agree with both of you that it's an issue for many synonyms. This was already discussed in the Lucene issue. As long as span queries don't support the same type of near matches (in order, out of order, with gaps) it's hard to apply the optimization correctly. The fix would be to improve SpanNear to produce the same query like PhraseQuery for certain slop values.\n\nFor now, Steve is right, the max clause count will protect users from combinatoric explosion. I was suggesting to improve EDisMax to allow limiting the number of expansions when producing bi and trigrams. As the query is very fuzzy anyways, it might be OK to restrict the combinations (e.g., if trigrams explode, just disable trigrams for the huge query and onyl create bigrams). ",
            "author": "Uwe Schindler",
            "id": "comment-16668952"
        },
        {
            "date": "2018-10-30T17:31:41+0000",
            "content": "Uwe Schindler, that makes sense to me.\n\n\"The fix would be to improve SpanNear to produce the same query like PhraseQuery for certain slop values,\" see\u00a0LUCENE-8544. ",
            "author": "Michael Gibney",
            "id": "comment-16669095"
        },
        {
            "date": "2018-11-05T13:20:15+0000",
            "content": "Is there an expected timeframe for this to be committed?  Anything I can do to accelerate it?\n\nWorking with the indexes experiencing the problem and would like to get back to \"official\" binary Solr instead of a custom build.  I checked the latest patch on branch_7x and it looks like it's working as expected. ",
            "author": "Shawn Heisey",
            "id": "comment-16675134"
        },
        {
            "date": "2018-11-05T13:21:54+0000",
            "content": "So does that make consensus that the current patch is sufficient? ",
            "author": "Elizabeth Haubert",
            "id": "comment-16675137"
        },
        {
            "date": "2018-11-05T13:32:35+0000",
            "content": "If we are fine here, I can commit this. No problem anymore! I just did not get any response, so I was waiting. I will run tests and do it later this evening. I am currently travelling. At least this is a good bugfix. Everything else here is future work (like improving the Lucene queries for the ordered/unordered cases).\n\nUwe ",
            "author": "Uwe Schindler",
            "id": "comment-16675147"
        },
        {
            "date": "2018-11-05T13:48:13+0000",
            "content": "Thank you! ",
            "author": "Elizabeth Haubert",
            "id": "comment-16675162"
        },
        {
            "date": "2018-11-05T14:09:52+0000",
            "content": "Elizabeth Haubert, I was holding off committing, waiting for your response to my earlier question, which I repeat below:\n\nElizabeth, I like the idea of adding something along the lines of the text you suggested to the ref guide. I made a few tweaks (described below) - please let me know if you think this is okay:\n\nSynonyms expansion in phrase queries with slop\n\nWhen a phrase query with slop (e.g. pf with ps) triggers synonym expansions, a separate clause will be generated for each combination of synonyms. For example, with configured synonyms dog,canine and cat,feline, the query \"dog chased cat\" will generate the following phrase query clauses:\n\n\t\"dog chased cat\"\n\t\"canine chased cat\"\n\t\"dog chased feline\"\n\t\"canine chased feline\"\n\n\nMy changes: this situation happens with all synonyms, not just multi-term synonyms; user-specified phrase queries (in q param) trigger this situation when qs is specified, so I generalized it a bit to refer to all phrase+slop contexts; and I think \"combination\" is better than \"permutation\" here.\n ",
            "author": "Steve Rowe",
            "id": "comment-16675205"
        },
        {
            "date": "2018-11-05T14:16:23+0000",
            "content": "Oops, I saw the edits and missed the question.  Yes, that makes sense. ",
            "author": "Elizabeth Haubert",
            "id": "comment-16675214"
        },
        {
            "date": "2018-11-05T14:44:36+0000",
            "content": "If we are fine here, I can commit this. No problem anymore! I just did not get any response, so I was waiting. I will run tests and do it later this evening. I am currently travelling. At least this is a good bugfix. Everything else here is future work (like improving the Lucene queries for the ordered/unordered cases).\n\nUwe Schindler: I'll take it. ",
            "author": "Steve Rowe",
            "id": "comment-16675267"
        },
        {
            "date": "2018-11-05T14:50:05+0000",
            "content": "Steve Rowe: OK, thanks! ",
            "author": "Uwe Schindler",
            "id": "comment-16675273"
        },
        {
            "date": "2018-11-05T15:28:27+0000",
            "content": "Final patch attached, including above-described ref guide edits (with a couple of unrelated minor cleanups on the same page) and a CHANGES.txt entry.\n\nPrecommit and Solr tests pass.  Committing shortly. ",
            "author": "Steve Rowe",
            "id": "comment-16675303"
        },
        {
            "date": "2018-11-05T15:32:34+0000",
            "content": "Commit 9a53617e17649e8e0cb3cfc7a76348ba396871d3 in lucene-solr's branch refs/heads/branch_7x from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9a53617 ]\n\nSOLR-12243: Edismax missing phrase queries when phrases contain multiterm synonyms ",
            "author": "ASF subversion and git services",
            "id": "comment-16675309"
        },
        {
            "date": "2018-11-05T15:33:11+0000",
            "content": "Commit 01808eee938833b4a1c17a8a92cabdb683732a17 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=01808ee ]\n\nSOLR-12243: Edismax missing phrase queries when phrases contain multiterm synonyms ",
            "author": "ASF subversion and git services",
            "id": "comment-16675311"
        },
        {
            "date": "2018-11-05T17:20:27+0000",
            "content": "Committed.  Thanks everybody! ",
            "author": "Steve Rowe",
            "id": "comment-16675450"
        }
    ]
}