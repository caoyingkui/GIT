{
    "id": "LUCENE-7159",
    "title": "improve spatial point/rect vs. polygon performance",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Now that we can query on complex polygons without going OOM (LUCENE-7153), we should do something to address the current \ud83d\udc22 performance.\n\nCurrently, we use a basic crossings test (O(n)) for boundary cases. We defer these expensive per-doc checks on boundary cases to a two phase iterator (LUCENE-7019, LUCENE-7109), so that it can be avoided if e.g. excluded by filters, conjunctions, deleted doc, and so on. This is currently important for performance, but basically its shoving the problem under the rug and hoping it goes away. At least for point in poly, there are a number of faster techniques described here: http://erich.realtimerendering.com/ptinpoly/\n\nAdditionally I am not sure how costly our \"tree traversal\" (rectangle intersection algorithms). Maybe its nothing to be worried about, but likely it too gets bad if the thing gets complex enough. These don't need to be perfect but need to behave like java's Shape#contains (can conservatively return false), and Shape#intersects (can conservatively return true). Of course, if they are too inaccurate, then things can get slower.\n\nIn cases of precomputed structures we should also consider memory usage: e.g. we shouldn't make a horrible tradeoff there.",
    "attachments": {
        "LUCENE-7159.patch": "https://issues.apache.org/jira/secure/attachment/12796785/LUCENE-7159.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15221060",
            "author": "Robert Muir",
            "date": "2016-04-01T03:06:28+0000",
            "content": "Note: for the second \"tree traversal\" part we might already have better algorithms in git: when I added the Polygon class in LUCENE-7153 it used the exact algorithms (for some reason GeoPoint was using different approximate ones with less guarantees). \n\nBut these guarantees might be compatible yet still with those approximate methods: the thing that is missing is edge case testing for these operations. If they are faster and still safe (or can be easily made safe), maybe we should restore them and cut the polygon class over to them!\n\nThese tests don't need to be complicated, e.g. for multipolygon/hole support I added this one (https://github.com/apache/lucene-solr/blob/81c83b443182cb5869079924637a4d43e9e7917e/lucene/spatial/src/test/org/apache/lucene/spatial/util/TestPolygon.java#L63-L91). We can add randomized tests too: but we don't need to index lucene documents or perform searches to do this and it will be more efficient and easier to debug/improve things. "
        },
        {
            "id": "comment-15223437",
            "author": "ASF subversion and git services",
            "date": "2016-04-03T18:08:36+0000",
            "content": "Commit ef6a0d001361068a37dc2256cd33c11d771c653a in lucene-solr's branch refs/heads/master from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ef6a0d0 ]\n\nLUCENE-7159: improve testing of polygon tree methods "
        },
        {
            "id": "comment-15223438",
            "author": "ASF subversion and git services",
            "date": "2016-04-03T18:09:09+0000",
            "content": "Commit bb2e01c3d913894062fff3f18bd5d0256f884185 in lucene-solr's branch refs/heads/branch_6x from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bb2e01c ]\n\nLUCENE-7159: improve testing of polygon tree methods "
        },
        {
            "id": "comment-15223747",
            "author": "Robert Muir",
            "date": "2016-04-04T07:01:47+0000",
            "content": "Here is a patch with an integer grid for LatLonPoint's polygon query, and some speedups for relation logic.\n\nThe relation logic is still the bottleneck for humongous polygons... so this does not solve all perf issues. "
        },
        {
            "id": "comment-15223861",
            "author": "Michael McCandless",
            "date": "2016-04-04T09:19:29+0000",
            "content": "+1, cool! "
        },
        {
            "id": "comment-15224470",
            "author": "Robert Muir",
            "date": "2016-04-04T16:32:20+0000",
            "content": "I added javadocs, asserts, a direct test, cleaned up the internal API, and re-ran benchmarks with mike's openstreetmap benchmark:\n\nPoint in polygon only becomes a bottleneck for complex polygons, so it really only helps there, but doesn't hurt simple ones.\n\nMore than half the gain here is unrelated to the grid, and only due to very minor optimizations in Polygon.relates(), which actually is the bigger bottleneck.\n\nI think we can do this as a start, and then as a followup implement relates() too? We should be able to speed those up in a similar way, most calls would then be rectangle <-> rectangle operations in integer space.\n\nAnd of course it would still be nice to speed up the relation operations in Polygon.java (e.g. compute if convex in ctor or whatever), but that stuff is complex.\n\n\nn=5 25.9 QPS -> 27.0 QPS\nn=50 18.2 QPS -> 18.1 QPS\nn=500 8.0 QPS -> 9.5 QPS\nn=1000 5.0 QPS -> 6.2 QPS\n\n "
        },
        {
            "id": "comment-15224498",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T16:51:41+0000",
            "content": "Commit c1a3e1b8d04ffc94e502b086e0544c0e0494d5a8 in lucene-solr's branch refs/heads/master from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c1a3e1b ]\n\nLUCENE-7159: Speed up LatLonPoint point-in-polygon performance "
        },
        {
            "id": "comment-15224504",
            "author": "ASF subversion and git services",
            "date": "2016-04-04T16:56:20+0000",
            "content": "Commit 1113443fc683d80720efd42706cb932b00f2cba8 in lucene-solr's branch refs/heads/branch_6x from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1113443 ]\n\nLUCENE-7159: Speed up LatLonPoint point-in-polygon performance "
        },
        {
            "id": "comment-15232555",
            "author": "Michael McCandless",
            "date": "2016-04-08T17:44:17+0000",
            "content": "Can this be closed now @rcmuir? "
        },
        {
            "id": "comment-15256901",
            "author": "Robert Muir",
            "date": "2016-04-25T19:52:23+0000",
            "content": "we are hobbling... "
        },
        {
            "id": "comment-15277190",
            "author": "Hoss Man",
            "date": "2016-05-09T22:20:06+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}