{
    "id": "SOLR-9989",
    "title": "Add support for PointFields in FacetModule (JSON Facets)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Facet Module"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Followup task of SOLR-8396",
    "attachments": {
        "SOLR-9989.patch": "https://issues.apache.org/jira/secure/attachment/12861351/SOLR-9989.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-15T01:38:17+0000",
            "content": "Yonik Seeley From my point of view, it's very hard to switch from LegacyNumeric to PointField for JSON Facets. Because JSONFacet heavily use TermsEnum ( which is not available for PointField ) for method=terms or method=stream? ",
            "author": "Cao Manh Dat",
            "id": "comment-15925389"
        },
        {
            "date": "2017-03-16T21:33:57+0000",
            "content": "JSONFacet heavily use TermsEnum ( which is not available for PointField )\n\nI haven't looked at the details of PointField.  I'm surprised there's no analog of TermsEnum for points though (stepping over values).  How does lucene merge point fields? ",
            "author": "Yonik Seeley",
            "id": "comment-15928940"
        },
        {
            "date": "2017-03-16T21:46:19+0000",
            "content": "It is possible.  Just write a PointValues.IntersectVisitor that returns Relation.CELL_CROSSES_QUERY. ",
            "author": "David Smiley",
            "id": "comment-15928953"
        },
        {
            "date": "2017-03-17T00:09:33+0000",
            "content": "Just write a PointValues.IntersectVisitor that returns Relation.CELL_CROSSES_QUERY\nThis would go through all docs (not just values), right? It could be much less efficient than the TermsEnum in some cases (i.e. low cardinality fields). Not sure if there is an other way though. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15929214"
        },
        {
            "date": "2017-03-17T01:12:52+0000",
            "content": "BTW an example of what I mean is PointsWriter, lines 105-127 which implements exactly what I'm talking about.\n\nThis would go through all docs (not just values), right?\n\nTerms point to docs as well.  Perhaps your concern is that IntersectVisitor is a callback API that insists on calling visit(docID) for each doc... so in some cases with terms where we can short-circuit the collection, that is not possible with the Points API.  But I don't think that use-case is common? ",
            "author": "David Smiley",
            "id": "comment-15929289"
        },
        {
            "date": "2017-03-17T03:37:23+0000",
            "content": "David Smiley Thanks, I saw that. So it will visit all doc and value in sorted order of values? ",
            "author": "Cao Manh Dat",
            "id": "comment-15929383"
        },
        {
            "date": "2017-03-17T04:18:38+0000",
            "content": "Perhaps your concern is that IntersectVisitor is a callback API that insists on calling visit(docID) for each doc\nYes, that's what I meant\nBut I don't think that use-case is common?\nI was thinking that was the most common case, but maybe you are right and it's not. At least things like facet.mincount=0 and facet.method=enum could be done this way (didn't look at the FacetModule cases) ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-15929403"
        },
        {
            "date": "2017-03-31T00:29:47+0000",
            "content": "Initial work for this patch. Implemented UniqueAgg and HLLAgg for SortedNumericDocValues. ",
            "author": "Cao Manh Dat",
            "id": "comment-15950101"
        },
        {
            "date": "2017-06-12T22:35:24+0000",
            "content": "If we want to remove trie* types and fields from 7.0 (as suggested in SOLR-10760), we need to make some decisions about this issue. Either we need to leave JSON Facets behind, or someone needs to help Dat out with a patch review so we can move forward on this.\n\nAnd, if SOLR-10760 is a goal for 7.0, this issue should be a blocker for 7.0, in addition to being a blocker for SOLR-10760. I just marked it as a blocker for that issue, but have not changed this issue priority yet for 7.0. ",
            "author": "Cassandra Targett",
            "id": "comment-16047155"
        },
        {
            "date": "2017-06-16T15:10:12+0000",
            "content": " Rough patch for this ticket, Yonik Seeley can you take a look? ",
            "author": "Cao Manh Dat",
            "id": "comment-16052020"
        },
        {
            "date": "2017-06-16T15:31:29+0000",
            "content": "Thanks, looking now... ",
            "author": "Yonik Seeley",
            "id": "comment-16052035"
        },
        {
            "date": "2017-06-19T08:57:47+0000",
            "content": "Clean up the last patch. I think this patch is ready to commit. ",
            "author": "Cao Manh Dat",
            "id": "comment-16053649"
        },
        {
            "date": "2017-06-19T15:26:36+0000",
            "content": "One question I had during review was the FacetRange.Calc implementations and why the ifs vs having separate implementations?\nAnyway, this is all implementation which can be further refined later (as much of the rest of the FacetModule needs), so +1 to commit now.  Nice job! ",
            "author": "Yonik Seeley",
            "id": "comment-16054203"
        },
        {
            "date": "2017-06-19T15:37:29+0000",
            "content": "One question I had during review was the FacetRange.Calc implementations and why the ifs vs having separate implementations?\n\nI don't know the reason for the having separate implementation in PointField, either\nFrom PointFields.createFields\n\nif (!sf.multiValued()) {\n\tif (numericValue instanceof Integer || numericValue instanceof Long) {\n\t  \tbits = numericValue.longValue();\n\t} else if (numericValue instanceof Float) {\n\t  \tbits = Float.floatToIntBits(numericValue.floatValue());\n\t} else {\n\t  \tassert numericValue instanceof Double;\n\t  \tbits = Double.doubleToLongBits(numericValue.doubleValue());\n\t}\n\tfields.add(new NumericDocValuesField(sf.getName(), bits));\n} else {\n\t// MultiValued\n\tif (numericValue instanceof Integer || numericValue instanceof Long) {\n\t  \tbits = numericValue.longValue();\n\t} else if (numericValue instanceof Float) {\n\t  \tbits = NumericUtils.floatToSortableInt(numericValue.floatValue());\n\t} else {\n\t  \tassert numericValue instanceof Double;\n\t  \tbits = NumericUtils.doubleToSortableLong(numericValue.doubleValue());\n\t}\n\tfields.add(new SortedNumericDocValuesField(sf.getName(), bits));\n}\n\n\n\nThanks Yonik Seeley ",
            "author": "Cao Manh Dat",
            "id": "comment-16054225"
        },
        {
            "date": "2017-06-20T03:43:20+0000",
            "content": "Commit 294026ffa8bbef46b65e4a517fa018ae1250903a in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=294026f ]\n\nSOLR-9989: Add support for PointFields in FacetModule (JSON Facets) ",
            "author": "ASF subversion and git services",
            "id": "comment-16055100"
        },
        {
            "date": "2017-06-22T23:06:42+0000",
            "content": "Commit 8d92e08c9c19f478b944ac2d3d4735fc9bb921b0 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8d92e08 ]\n\nSOLR-10939: update @SuppressPointFields on TestJoin to note why points are suppressed\n\nAlso update the annotation on TestCloudJSONFacetJoinDomain since SOLR-9989 is resolved but the join problems\nstill prevent that test from passing with points enabled ",
            "author": "ASF subversion and git services",
            "id": "comment-16060163"
        },
        {
            "date": "2017-06-22T23:54:21+0000",
            "content": "Hmmm, wait... this patch seemed to remove the generic testing of other facet methods that David Smiley added.  Was that intentional?\n\n\n@@ -87,7 +85,9 @@ public class TestJsonFacets extends SolrTestCaseHS {\n   @ParametersFactory\n   public static Iterable<Object[]> parameters() {\n     // wrap each enum val in an Object[] and return as Iterable\n-    return () -> Arrays.stream(FacetField.FacetMethod.values()).map(it -> new Object[]{it}).iterator();\n+    return () -> Arrays.stream(FacetField.FacetMethod.values())\n+        .filter(m -> m == FacetField.FacetMethod.ENUM)\n+        .map(it -> new Object[]{it}).iterator();\n   }\n\n ",
            "author": "Yonik Seeley",
            "id": "comment-16060210"
        },
        {
            "date": "2017-06-22T23:58:58+0000",
            "content": "Commit 7a9f9b0be02fa31cccca9647bb4b1e74d8569b08 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7a9f9b0 ]\n\nSOLR-9989: remove @SuppressPointFields annotation now that JSON facets work with numeric points+docvalues ",
            "author": "ASF subversion and git services",
            "id": "comment-16060215"
        },
        {
            "date": "2017-06-22T23:59:08+0000",
            "content": "Yonik Seeley no, it is my mistake. Will fix the problem now. ",
            "author": "Cao Manh Dat",
            "id": "comment-16060217"
        },
        {
            "date": "2017-06-23T00:04:59+0000",
            "content": "Commit 6aec01e426402937d05ca92442acb54e2cde9b79 in lucene-solr's branch refs/heads/master from Cao Manh Dat\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6aec01e ]\n\nSOLR-9989: Enable generic testing for other facet methods ",
            "author": "ASF subversion and git services",
            "id": "comment-16060226"
        },
        {
            "date": "2017-07-20T18:06:48+0000",
            "content": "Bulk editing 27 jiras matching the following JQL query to include the \"numeric-tries-to-points label...\n\n\n(issue in linkedIssues(SOLR-10807) OR issue in linkedIssues(SOLR-8396) OR issue in linkedIssues(SOLR-9995)) AND project = SOLR AND status != CLOSED\n\n\n\nthese 27 jiras can be identified by searching for the comment string \"20170720hossbulkeditlabel\"\n\nemail notification is being suppressed. ",
            "author": "Hoss Man",
            "id": "comment-16095126"
        }
    ]
}