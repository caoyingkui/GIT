{
    "id": "SOLR-12638",
    "title": "Support atomic updates of nested/child documents for nested-enabled schema",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Sub-task",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I have been toying with the thought of using this transformer in conjunction with NestedUpdateProcessor and AtomicUpdate to allow SOLR to completely re-index the entire nested structure. This is just a thought, I am still thinking about implementation details. Hopefully I will be able to post a more concrete proposal soon.",
    "attachments": {
        "SOLR-12638-delete-old-block-no-commit.patch": "https://issues.apache.org/jira/secure/attachment/12939875/SOLR-12638-delete-old-block-no-commit.patch",
        "SOLR-12638-nocommit.patch": "https://issues.apache.org/jira/secure/attachment/12939499/SOLR-12638-nocommit.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-08T05:30:34+0000",
            "content": "This is currently just a small initial proposal.\nwhen a user wants to update a document inside a block (has ROOT field), these procedures are to run:\n\n\n\tChild document transformer could run and rebuild the current block(prior update) as a SolrInputDocument\n\tDocuments that need be updated are to be swapped with their newer counter parts\n\tPerhaps use AtomicUpdate or some other URP to index the new block, while deleting the old one using a delete query of ROOT:rootID.\n\n\n\nWDYT? ",
            "author": "mosh",
            "id": "comment-16572699"
        },
        {
            "date": "2018-08-08T16:42:39+0000",
            "content": "Yeah something like that. \u00a0This feature you propose bares a lot of resemblance to \"atomic updates\" (not to be confused with in-place\u00a0updates \u2013 e.g. numeric DV updates). \u00a0That code is largely handled by AtomicUpdateDocumentMerger called by DistributedUpdateProcessor. \u00a0It seems to me this proposed feature would work with that same code in some way. \u00a0For example, after potentially doing an atomic update (i.e. the document is partial), we then also potentially see if it's a nested doc by checking for _ROOT_ as you said. \u00a0A tricky part may\u00a0be considering the update log via RealtimeGetComponent (see DistributedUpdateProcessor.getUpdatedDocument). \u00a0That API \u00a0allows fetch-by-ID, and we can input the root document ID. \u00a0Hopefully we should get back the whole child hierarchy... we may need to enhance RTG to ensure it does so when consulting the index (seems reasonable to me). \u00a0That's where you might employ the child doc transformer. \u00a0I believe the children will be attached to root docs in the updateLog, since they are \"underneath\"/attached in the serialization of each parent document. \u00a0Note that an atomic update of a child document won't actually consider the update log since the update log is keyed by parent/root ID, not the ID of the child document. ",
            "author": "David Smiley",
            "id": "comment-16573481"
        },
        {
            "date": "2018-08-09T05:28:34+0000",
            "content": "Note that an atomic update of a child document won't actually consider the update log since the update log is keyed by parent/root ID, not the ID of the child document.\nWould this mean the update would not be registered to the update log, or would the update get registered by the root ID? ",
            "author": "mosh",
            "id": "comment-16574311"
        },
        {
            "date": "2018-08-09T13:25:30+0000",
            "content": "I could have been more clear.  The update log is keyed by the outer most document of any nesting that may exist, and thus any nested docs can't be looked up by their ID.  So if a complete nested document were to be in the update log, and then subsequently one of those nested documents stand-alone, then the atomic update processing of that standalone document will not \"see\" that it was also present underneath a parent recently.  It would see if per chance there were multiple atomic updates to just this child document (since they are keyed in the update log by their ID), but not any nested cases which is keyed only by the top/root/parent ID.\n\nI think this just needs to be a documented limitation/gotcha to be aware of; I don't think it's something that could or should be solved. ",
            "author": "David Smiley",
            "id": "comment-16574834"
        },
        {
            "date": "2018-09-04T13:45:21+0000",
            "content": "I retitled the issue: \"Support atomic updates of nested/child documents for nested-enabled schema\". \u00a0We're not creating an API; Solr already has an API for this. \u00a0This issue is really a duplicate of SOLR-6096 but I think it's okay to keep this separate for practical matters \u2013 namely in this issue we can leverage the metadata in the nested enabled schema. This is a new development that makes this feature possible in a clean way. ",
            "author": "David Smiley",
            "id": "comment-16603068"
        },
        {
            "date": "2018-09-13T04:32:15+0000",
            "content": "I uploaded a no commit patch, in which triggering a\u00a0DistrubutedUpdateProcessor#versionDeleteByQuery seems to trigger a commit.\nThis behavior can be observed by AtomicUpdateBlockTest#testBlockRealTimeGet test, which is currently failing. ",
            "author": "mosh",
            "id": "comment-16613012"
        },
        {
            "date": "2018-09-16T13:20:47+0000",
            "content": "This patch contains a fix for the process of deleting the old version of the newly updated block from the collection, when an atomic update for a block occurs.\nBeforehand, DeleteUpdateCommand#setVersion was called when initializing the deleteRequest for said block, which would also delete the newly updated block from the collection.\nThis was cause since DeleteUpdateCommand#setVersion appends `version:[v TO *]` (where v is the set version) to the delete query.\nI uploaded a no commit patch, in which triggering a DistrubutedUpdateProcessor#versionDeleteByQuery seems to trigger a commit\nThe whole block is not retrieved by /get handler after an update, since DistributedUpdateHandler#versionDeleteByQuery (which is used to delete the old block) triggers UpdateLog#openRealtimeSearcher. This method clears all the caches, where the whole block was previously cached. That is why the whole block is not returned, since it is no longer cached. To get the whole block ChildDocTransformer is now called in AtomicUpdateBlockTest#testBlockRealTimeGet /get requests. ex:\n\nassertJQ(req(\"qt\",\"/get\", \"id\",\"1\", \"fl\",\"id, cat_ss, child1, [child]\")\n     ,\"=={\\\"doc\\\":{'id':\\\"1\\\"\" +\n     \", cat_ss:[\\\"aaa\\\",\\\"ccc\\\",\\\"bbb\\\"], child1:{\\\"id\\\":\\\"2\\\",\\\"cat_ss\\\":[\\\"child\\\"]}\" +\n     \"       }}\"\n     );\n ",
            "author": "mosh",
            "id": "comment-16616719"
        },
        {
            "date": "2018-09-16T14:11:59+0000",
            "content": "Thanks. Please push a GitHub PR to facilitate better review. \u00a0It's not easy to see what\u00a0changed from the first patch to the next.\n\nAside from misc cleanup I can certainly point out, in your mind what is missing? ",
            "author": "David Smiley",
            "id": "comment-16616745"
        },
        {
            "date": "2018-09-17T03:44:55+0000",
            "content": "Aside from misc cleanup I can certainly point out, in your mind what is missing?\nSo far this is the game plan:\n\n\tDouble check all Solr core tests pass\n\tTidy up code changes(which are currently a real mess).\n\tMore AtomicUpdate features(\"remove\", \"set\", etc) should be tested by AtomicUpdateBlockTest.\n\n ",
            "author": "mosh",
            "id": "comment-16617051"
        },
        {
            "date": "2018-10-19T19:15:47+0000",
            "content": "Cao Manh Dat would you mind looking over the goals of this issue and sharing any thoughts you may have on it's relationship to the UpdateLog or SolrCloud (e.g. gotchas or advice / pointers)?  Sorry that's a little vague... but I'm trying to feel out unknown-unknowns that prevent me from asking a specific question at this stage.  I'm sure we can get our tests to pass by ourselves but that's no guarantee against edge cases we don't even know about (either due to circumstances of real-world behavior / timings / safety) or things we should test for but didn't.\n\nIn summary we want atomic updates to support nested documents.  This way you could not only update existing parent/child documents but even add/remove entire nested trees. ",
            "author": "David Smiley",
            "id": "comment-16657301"
        },
        {
            "date": "2018-10-21T06:18:16+0000",
            "content": "We have been testing this feature in-house, and have come across a problem regarding sharding when a document that is being updated is indexed inside a block,\n and the collection being used has more than a single shard.\n Right now when updating a document, an Id for the document has to be provided, in addition to the field which is being updated.\n When the document that is being updated is inside a block, the update can be routed to the wrong shard, since the shard in which it is indexed was calculated according to the root document's Id. ex.\n When this document:\n\n {\"id\": \"1\", \"children\": [{\"id\": \"20\", {\"string_s\": \"ex\"}]} \n\nIs being updated:\n\n{\"id\": \"20\", \"grand_children\": {\"add\": [{\"id\": \"21\", \"string_s\": \"ex\"}]}}\n\nThe update can be routed to another shard, where the block does not exist, causing the update to be indexed to a different shard,\n splitting our block in two pieces, existing in two separate shards.\n\nSkimming through DistributedUpdateProcessor, I have suggestions for three different solutions.\n\n\tIf the schema is nested, the the routing method(in DistributedUpdateProcessor#setupRequest) can check if the document exists in any shards(lookup by id),\n find out whether it is inside a block(root) and route the update using the hash of root\n\tVery similar to the previous method, only the root lookup is done if the document which is being updated is not found in the shard it was routed to, asking other shards if the document exists inside a block, re-routing the update command.\n\tThe user provides the root, which is not the ideal case when it comes to user friendliness. This approach is very similar to Elastic Search, which uses the routing parameter to route all children to the same shard.\n\n\n\nIMO the third option is inferior to the first two, since it is the least user friendly out of the three options.\n My only concern regarding the first two options are the performance hit it might cause.\n\nAnother concern which David has discussed is the implications on the update log.\n Would ensuring DistributedUpdateProcessor is run before RunUpdateProcessor be of any help?\n I must admit I am not very familiar with these features of Solr.\n\nWDYT David Smiley, Cao Manh Dat? ",
            "author": "mosh",
            "id": "comment-16658100"
        },
        {
            "date": "2018-10-22T03:51:02+0000",
            "content": "I think it's very sketchy for Solr to do either (1) or (2).  I think the user should (somehow) provide the root ID, which would only modify your example slightly.  Thus this is (3)?  One option is to provide the _root_ field in the document being updated.  The only thing I don't like about this is that this would be the very first time that a user has to actually use this field in any way; normally the field is an internal implementation detail.  Granted we don't hide the detail at all, so it's not a leap to ask the user to use this in this advanced case.  Or, perhaps we insist the user send a _route_ parameter to /update which is otherwise only used in searches?\n\nBTW your last paragraph... IMO we don't have a problem with URP ordering (IMO).  It's already quite wrong to order DURP after RUP.  My concern loosely expressed in my previous comment is broadly about UpdateLog integration. ",
            "author": "David Smiley",
            "id": "comment-16658534"
        },
        {
            "date": "2018-10-22T13:30:39+0000",
            "content": "Or, perhaps we insist the user send a route parameter to /update which is otherwise only used in searches?\nI like this option a lot better, since it makes the updated doc look cleaner.\nAdding another field to the update command can seem a little confusing IMO,\nsince that field is not used to update the document in any way.\nI just pushed a commit implementing this. ",
            "author": "mosh",
            "id": "comment-16658983"
        },
        {
            "date": "2018-10-23T23:44:01+0000",
            "content": "Hi guys, I don't know much about join code, but skimming through the patch I don't see any changes for UpdateLog and TransactionLog? I need more time on reviewing the solution and the patch for ensuring its correctness.  ",
            "author": "Cao Manh Dat",
            "id": "comment-16661479"
        },
        {
            "date": "2018-10-24T00:54:52+0000",
            "content": "The UpdateLog and TransactionLog probably need no changes for this feature.  The feature interacts with those classes indirectly via RealTimeGetComponent which is modified in this patch.  I'm not sure the patch itself would necessarily get at my question; my question is more architectural / conceptual. ",
            "author": "David Smiley",
            "id": "comment-16661540"
        },
        {
            "date": "2018-10-24T01:49:38+0000",
            "content": "Somewhat related: perhaps it should be best practice to include the parent document id in the child document id (with a \"!\" separator).  Things should just then work for anyone following this convention with the default compositeRouter.  For example, \"id:mybook!myreview\".  The ability to specify route explicitly should always be there of course.\n ",
            "author": "Yonik Seeley",
            "id": "comment-16661581"
        },
        {
            "date": "2018-10-24T01:58:52+0000",
            "content": "Hmm; I rather like this idea \u2013 make it mandatory that all child doc IDs start with a root doc ID then an exclamation then whatever. ",
            "author": "David Smiley",
            "id": "comment-16661594"
        }
    ]
}