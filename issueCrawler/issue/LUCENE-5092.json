{
    "id": "LUCENE-5092",
    "title": "join: don't expect all filters to be FixedBitSet instances",
    "details": {
        "components": [
            "modules/join"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "The join module throws exceptions when the parents filter isn't a FixedBitSet. The reason is that the join module relies on prevSetBit to find the first child document given a parent ID.\n\nAs suggested by Uwe and Paul Elschot on LUCENE-5081, we could fix it by exposing methods in the iterators to iterate backwards. When the join modules gets an iterator which isn't able to iterate backwards, it would just need to dump its content into another DocIdSet that supports backward iteration, FixedBitSet for example.",
    "attachments": {
        "LUCENE-5092.patch": "https://issues.apache.org/jira/secure/attachment/12591551/LUCENE-5092.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-07-04T14:58:39+0000",
            "content": "There are 2 possibilities:\n\n\tLet the iterator implement an additional interface that exposes prev() or how we call that method. The code when then use instanceof to check if backwards is supported on the iterator\n\tDo it similar to random access bits() on the DocIdSet. In that case a consumer could ask the DocIdSet for a backwardsIterator(), which returns null if not existent\n\n\n\nWe should never add an additional method to DocIdSetIterator, because then we would also have Scorers or DocsEnum optionally supporting going backwards! So please use an interface as marker + method definition!!!\n\nI would prefer the first possibility, especially if you need to go both backwards and forwards on the same iterator instance. ",
            "author": "Uwe Schindler",
            "id": "comment-13700114"
        },
        {
            "date": "2013-07-04T15:28:10+0000",
            "content": "I think the methods to go forward and backward should be on the same instance so I don't really like the 2nd option. The only issue I see with adding a marker interface is that it would make filtering harder to implement, eg. FilteredDocIdSet would need to check whether the underlying iterator supports backwards iteration to know whether to implement BackwardDocIdSetIterator or not.\n\nEven if we have a marker interface, Scorers will be able to implement this marker interface, so how is it different from adding an optional method to DocIdSetIterator (for example I was thinking about two new methods on DocIdSetIterator: canIterateBackwards() and prevDoc(), canIterateBackwards() returning true meaning that prevDoc() can be used safely). ",
            "author": "Adrien Grand",
            "id": "comment-13700141"
        },
        {
            "date": "2013-07-04T15:32:42+0000",
            "content": "I dont think we should add backwards iteration to DocIDSetIterator etc. This is not really how search engines work, its just an oddity of join. ",
            "author": "Robert Muir",
            "id": "comment-13700147"
        },
        {
            "date": "2013-07-04T15:41:37+0000",
            "content": "-1 to add backwards iteration as separate instance or as part of the default DocIdSetIterator interface.\n\nJust define an interface with the backwards methods and let all classes that want to provide it implement it. Then you would only have to check one time for the interface and cast to the interface. ",
            "author": "Uwe Schindler",
            "id": "comment-13700154"
        },
        {
            "date": "2013-07-04T15:54:43+0000",
            "content": "In general I am not happy with the backwards iteration at all. I have the feeling that this is a \"bug\" of block join. In my opinion the order of child / parent documents should be reversed, so the search for the parent (or child dont know) could go forward only.\n\nThis would make existing indexes incompatible (if child/parent documents are reversed), but we could add a IndexSorter based reorder machanism.\n\nMichael McCandless: Any inside knowledge about this? ",
            "author": "Uwe Schindler",
            "id": "comment-13700165"
        },
        {
            "date": "2013-07-04T16:48:35+0000",
            "content": "I dont think we should add backwards iteration to DocIDSetIterator etc. This is not really how search engines work, its just an oddity of join.\n\nIn that case, a simple fix would just be to dump the content into a FixedBitSet every time we get something else.\n\nIn general I am not happy with the backwards iteration at all.\n\nSince the actual problem looks like we require random-access on top of an API which only supports random-access optionally, this makes me wonder whether we could support the same functionality on top of NumericDocValues instead of filters? ",
            "author": "Adrien Grand",
            "id": "comment-13700202"
        },
        {
            "date": "2013-07-04T17:21:27+0000",
            "content": "\nSince the actual problem looks like we require random-access on top of an API which only supports random-access optionally, this makes me wonder whether we could support the same functionality on top of NumericDocValues instead of filters?\n\nCool idea  I've always been a little frustrated that parent/child docs aren't recorded in the index: so tools like splitters, sorters, or sorting-merge-policies cant avoid splitting nested documents in half by default.\n\nWould be even better if numericDV was updatable (copy-on-write generation in the commit like deleted docs/old setNorm), and deleted docs were then implemented as DV... I guess if we go this route we should probably think if its worth being numericDV or a specialized bitsetDV type. I hate flooding the API with \"unnecessary\" types though... ",
            "author": "Robert Muir",
            "id": "comment-13700231"
        },
        {
            "date": "2013-07-06T07:08:14+0000",
            "content": "To get to the beginning of a block that contains a given target document, we need something like advanceToJustBefore(target).\n\nSo we do not really need backward iteration for this, we need forward iteration by document blocks.\nAn implementation of this advanceToJustBefore can be made by using the current advance() and than look back, as currently by prevSetBit(). Any implementation could simply hide the retreat to the beginning of the block.\n\nSo how about this:\n\nabstract class DocBlockIterator extends DocIdSetIterator {\n\n  abstract int advanceToJustBefore(int target);\n}\n\n\n? ",
            "author": "Paul Elschot",
            "id": "comment-13701268"
        },
        {
            "date": "2013-07-09T15:33:18+0000",
            "content": "Since block join scores seem to all score in order (is it true?), I guess this could work. However, I'm getting more and more convinced by Robert's point that maybe for this issue we shouldn't make the API more complicated and copy the filter's DocIdSet to a FixedBitSet when it returns something else (easy to do, maybe we should do it now and open another issue to explore other ways to store the parent-child mapping). ",
            "author": "Adrien Grand",
            "id": "comment-13703381"
        },
        {
            "date": "2013-07-09T23:39:53+0000",
            "content": "Here is a fix proposal: when the filter returns something which is not either null or a FixedBitSet, it is converted to a FixedBitSet. ",
            "author": "Adrien Grand",
            "id": "comment-13704009"
        },
        {
            "date": "2013-07-10T17:41:43+0000",
            "content": "I will commit the attached patch and open a new issue to explore ways to improve the API to better support block joins if there is no objection. ",
            "author": "Adrien Grand",
            "id": "comment-13704806"
        },
        {
            "date": "2013-07-11T00:21:08+0000",
            "content": "I don't like this approach: it creates a silent performance trap, since on every search for every segment we'll convert the incoming bit set to a FixedBitSet.\n\nI think it's best if we continue to require a FBS so users get a clear exception instead of silent performance hit. ",
            "author": "Michael McCandless",
            "id": "comment-13705271"
        },
        {
            "date": "2013-07-11T00:33:11+0000",
            "content": "I agree with mike on this point.\n\nI actually think this isn't really holding up the show right?\n\nWe have to decide for example, how to make CachingFilterWrapper configurable because its clear there will be some options for bitset impls. Maybe thats done with subclasses or something like that, in which case join/ could just narrow the type it accepts.\n\nAll depends on how we decide to integrate this stuff into CWF I think. ",
            "author": "Robert Muir",
            "id": "comment-13705284"
        },
        {
            "date": "2013-08-11T19:16:22+0000",
            "content": "In my opinion the order of child / parent documents should be reversed, so the search for the parent (or child dont know) could go forward only.\n\nUwe Schindler in this case, after I advance()/nextDoc() a child scorer, how the parent scorer can reach the parent doc which is before of the matched child? ",
            "author": "Mikhail Khludnev",
            "id": "comment-13736388"
        },
        {
            "date": "2013-08-12T09:36:27+0000",
            "content": "Mikhail Khludnev: I understand the problem because it depends of the type of query toChild or toParent. The suggestion here was to somehow recapitulate why the block joining was done like that. Maybe we can optimize it or add additional metadata to the documents in the block so we make it easier to go from childs to parent and vice versa. ",
            "author": "Uwe Schindler",
            "id": "comment-13736713"
        },
        {
            "date": "2013-08-12T18:36:42+0000",
            "content": "I think it's best if we continue to require a FBS so users get a clear exception instead of silent performance hit.\n\nThat seems reasonable.  What about at least changing it from a concrete implementation to Bits though? ",
            "author": "Yonik Seeley",
            "id": "comment-13737188"
        },
        {
            "date": "2013-08-12T21:07:49+0000",
            "content": "or add additional metadata to the documents in the block so we make it easier to go from childs to parent and vice versa.\n\nUwe Schindler (I don't know how but) we can write single byte DocValues per child document with delta to their parent (let's limit block size by 0xff), delta to the previous parent for parent documents. WDYT? ",
            "author": "Mikhail Khludnev",
            "id": "comment-13737357"
        },
        {
            "date": "2014-01-19T22:34:51+0000",
            "content": "There is an early version of DocBlockIterator.java at:\n\nhttps://github.com/PaulElschot/lucene-solr/blob/docblockiter/lucene/core/src/java/org/apache/lucene/search/DocBlockIterator.java\n\nThis defines advanceToJustBefore() by:\n\nadvanceToJustBefore() followed by nextDoc() === advance()\n\nComments? ",
            "author": "Paul Elschot",
            "id": "comment-13876032"
        },
        {
            "date": "2014-01-20T04:44:48+0000",
            "content": "It seems great! ",
            "author": "Mikhail Khludnev",
            "id": "comment-13876136"
        },
        {
            "date": "2014-01-27T23:34:08+0000",
            "content": "I have opened this pull request:\nhttps://github.com/apache/lucene-solr/pull/24\nIn case a patch is preferred, please let me know.\n\nIn the pull request:\nDocBlocksIterator extends DocIdSetIterator.\nFixedBitSetDBI and EliasFanoDocIdSet implement DocBlocksIterator, so EliasFanoDocIdSet could also be used for joins.\nThe join module ToParent/ToChild queries use DocBlocksIterator instead of FixedBitSet.\nIn the join module, FixedBitSetCachingWrapperFilter.java is replaced by DocBlocksCachingWrapperFilter which uses FixedBitSetDBI for now.\n\nLUCENE-5416 is open for FixedBitSetDBI.\n ",
            "author": "Paul Elschot",
            "id": "comment-13883518"
        },
        {
            "date": "2014-01-28T16:50:56+0000",
            "content": "On quick glance this looks like a lot of infrastructure to add, merely to support block joins.\n\nWhat's wrong with simply leaving block joins as requiring the concrete FixedBitSet?  The typical usage of block joins will require one instance of FixedBitSet per \"joined\" table, per segment; the RAM required (vs. a compressed bit set impl) should be trivial e.g. compared to the \"typical\" bit-set caching Solr does. ",
            "author": "Michael McCandless",
            "id": "comment-13884320"
        },
        {
            "date": "2014-01-28T17:56:34+0000",
            "content": "On quick glance this looks like a lot of infrastructure to add, merely to support block joins.\n\nIt is bigger than necessary because it has both FixedBitSet and FixedBitSetDBI, and I hope these can be merged somehow.\nThe bit index that FixedBitSet uses for good nextDoc() performance got in my way when trying to implement advanceToJustBefore().\nThat is why I added FixedBitSetDBI, see LUCENE-5416.\n\nWhat's wrong with simply leaving block joins as requiring the concrete FixedBitSet?\n\nTwo things, but first let me agree that saving RAM is not a concern.\n\nThe first one is increased speed for larger document blocks.\nSee http://people.apache.org/~jpountz/doc_id_sets.html, AFAICT that means at least 500-1000 docs per block for now.\n\nThe other one is to allow future implementations. Some time ago when Filter was based on Java's BitSet  (LUCENE-584 ...),  TermDocsEnum (iirc) and Filter and Scorer were more or less independent classes. Just look at the class hierarchy that we have now.\n\nIt might turn out that DocBlocksIterator as a marker interface is better than directly inheriting from DocIdSetIterator. Direct inheritance works for now.\n\nBtw. the test cases in the join module really helped, thanks. ",
            "author": "Paul Elschot",
            "id": "comment-13884364"
        },
        {
            "date": "2014-01-28T21:14:57+0000",
            "content": "Merged trunk into the pull branch. No conflicts, but the merge missed one rename, corrected. ",
            "author": "Paul Elschot",
            "id": "comment-13884692"
        },
        {
            "date": "2014-02-16T13:37:58+0000",
            "content": "As expected, after LUCENE-5440, the patch/pull request has a few conflicts. I'll resolve these. ",
            "author": "Paul Elschot",
            "id": "comment-13902714"
        },
        {
            "date": "2014-02-16T22:52:37+0000",
            "content": "A new pull request is here:\nhttps://github.com/apache/lucene-solr/pull/33\n\nThe automated message for the pull request ended up at LUCENE-5441. ",
            "author": "Paul Elschot",
            "id": "comment-13902867"
        },
        {
            "date": "2014-02-17T07:18:48+0000",
            "content": "Github user mkhludnev commented on the pull request:\n\n    https://github.com/apache/lucene-solr/pull/33#issuecomment-35233474\n\n    I like it.  ",
            "author": "ASF GitHub Bot",
            "id": "comment-13903011"
        },
        {
            "date": "2014-02-17T23:13:10+0000",
            "content": "After merging trunk, I had a conflict in FixedBitSet.java, so a new or updated pull request will be needed. ",
            "author": "Paul Elschot",
            "id": "comment-13903596"
        },
        {
            "date": "2014-02-19T20:45:04+0000",
            "content": "Github user PaulElschot commented on the pull request:\n\n    https://github.com/apache/lucene-solr/pull/33#issuecomment-35546151\n\n    Closing after recent small conflict with trunk. ",
            "author": "ASF GitHub Bot",
            "id": "comment-13906051"
        },
        {
            "date": "2014-02-19T20:45:05+0000",
            "content": "Github user PaulElschot closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/33 ",
            "author": "ASF GitHub Bot",
            "id": "comment-13906052"
        },
        {
            "date": "2014-02-19T20:47:47+0000",
            "content": "GitHub user PaulElschot opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/37\n\n    Squashed commit for LUCENE-5092\n\n    LUCENE-5092\n\n    3rd pull request, resolved recent conflict with trunk.\n\n    In core introduce DocBlocksIterator.\n    Use this in FixedBitSet, in EliasFanoDocIdSet and in join module ToChild... and ToParent...\n    Also change BaseDocIdSetTestCase to test DocBlocksIterator.advanceToJustBefore.\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/PaulElschot/lucene-solr LUCENE-5092-pull-3\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/37.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #37\n\n\ncommit 77f73ac206e8ad85bc7706424a7cc181eb73e8a9\nAuthor: Paul Elschot <paul.j.elschot@gmail.com>\nDate:   2014-02-19T20:31:03Z\n\n    Squashed commit for LUCENE-5092\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-13906056"
        },
        {
            "date": "2014-02-20T17:23:21+0000",
            "content": "I still think it's sort of crazy to let block join have such a wide impact on our APIs?\n\nIf it's only block join that needs this special forwards/backwards iteration, maybe we should make it's own \"thing\" (separate from DIS/DISI) to do this?  E.g. a FixedBitSetFactory that given an AtomicReaderContext produces a FixedBitSet, so that we stop \"abusing\" Filter for this purpose. ",
            "author": "Michael McCandless",
            "id": "comment-13907203"
        },
        {
            "date": "2014-02-20T19:31:24+0000",
            "content": "Do you mean that the a java public definition in the core module for this gives it a wide impact?\n\nOne could also subclass DocIdSet and Filter to avoid the type check on the DISI in the join module, but that is not in the patch.\n\nThe reason to have DocBlocksIterator in core is to allow some filters that are in core to provide it, otherwise it could be in the join module only. I tried to think of way to confine this to the join module, but I did not find one.\nA factory for this could be confined to the join module, but it would have to iterate the set once to be able to look back.\n\nDocBlocksIterator does not impose that the parent document  is at the end or the beginning of a document block, that could  be a reason to have it in core.\n\nadvanceToJustBefore() is an additional method that is somehow the difference of two existing ones:\nadvanceToJustBefore() followed by nextDoc() === advance()\nSo a Filter providing this is a normal Filter that can also do an \"almost\" advance(). Is that an \"abuse\" of Filter?\n\n ",
            "author": "Paul Elschot",
            "id": "comment-13907374"
        },
        {
            "date": "2014-03-13T21:25:23+0000",
            "content": "GitHub user PaulElschot opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/42\n\n    Lucene 5092 pull 4\n\n    LUCENE-5092\n\n    Resolved small conflict in ToChildBlockJoinQuery after LUCENE-5520\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/PaulElschot/lucene-solr LUCENE-5092-pull-4\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/42.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #42\n\n\ncommit 77f73ac206e8ad85bc7706424a7cc181eb73e8a9\nAuthor: Paul Elschot <paul.j.elschot@gmail.com>\nDate:   2014-02-19T20:31:03Z\n\n    Squashed commit for LUCENE-5092\n\ncommit 767a34f00beff849ebe07554bcc1930da2c474b4\nAuthor: Paul Elschot <paul.j.elschot@gmail.com>\nDate:   2014-03-13T16:58:56Z\n\n    Merge branch 'trunk' into LUCENE-5092-pull-4\n\n    Conflicts:\n    \tlucene/join/src/java/org/apache/lucene/search/join/ToChildBlockJoinQuery.java\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-13934102"
        },
        {
            "date": "2014-03-13T21:27:13+0000",
            "content": "Github user PaulElschot closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/37 ",
            "author": "ASF GitHub Bot",
            "id": "comment-13934105"
        },
        {
            "date": "2014-03-13T21:27:43+0000",
            "content": "Github user PaulElschot commented on the pull request:\n\n    https://github.com/apache/lucene-solr/pull/37#issuecomment-37589051\n\n    Opened new PR for recent minor conflict ",
            "author": "ASF GitHub Bot",
            "id": "comment-13934107"
        },
        {
            "date": "2014-10-30T16:14:25+0000",
            "content": "I'm closing this issue as most of the concern that I had has been addressed through LUCENE-6025. ",
            "author": "Adrien Grand",
            "id": "comment-14190306"
        },
        {
            "date": "2015-05-25T12:34:32+0000",
            "content": "Github user PaulElschot commented on the pull request:\n\n    https://github.com/apache/lucene-solr/pull/42#issuecomment-105225583\n\n    No more needed, LUCENE-5092 is closed. ",
            "author": "ASF GitHub Bot",
            "id": "comment-14558203"
        },
        {
            "date": "2015-05-25T12:34:32+0000",
            "content": "Github user PaulElschot closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/42 ",
            "author": "ASF GitHub Bot",
            "id": "comment-14558204"
        }
    ]
}