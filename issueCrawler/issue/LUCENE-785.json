{
    "id": "LUCENE-785",
    "title": "RAMDirectory not Serializable",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.1"
        ],
        "affect_versions": "2.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The current implementation of RAMDirectory throws a NotSerializableException when trying to serialize, due to the inner class KeySet of HashMap not being serializable (god knows why)\n\njava.io.NotSerializableException: java.util.HashMap$KeySet\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081)\n\nCaused by line 43:\n\nprivate Set fileNames = fileMap.keySet();\n\nEDIT:\n\nwhile we're at it: same goes for inner class Values \n\njava.io.NotSerializableException: java.util.HashMap$Values\n        at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1081)\n\nCollection files = fileMap.values();",
    "attachments": {
        "ramdir.serializable.diff": "https://issues.apache.org/jira/secure/attachment/12349743/ramdir.serializable.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-01-26T14:31:06+0000",
            "content": "Hmm, this must be something fairly new. I had no problems when Serializable was introduced back in LUCENE-601.  ",
            "author": "Karl Wettin",
            "id": "comment-12467831"
        },
        {
            "date": "2007-01-26T14:36:25+0000",
            "content": "That's what I heared from Matthias, too. (We work in the same company.) There were no problems with earlier versions of Lucene 2.1. ",
            "author": "Daniel Bechler",
            "id": "comment-12467832"
        },
        {
            "date": "2007-01-26T15:05:51+0000",
            "content": "OK, here's a quick unit test that catches the regression:\n\n    public void testSerializable() throws IOException \n{\n        Directory dir = new RAMDirectory();\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\n        ObjectOutput out = new ObjectOutputStream(bos);\n        out.writeObject(dir);\n        out.close();\n    }\n\nUsing this I tracked down the commit that caused serializability to break:\n\n    http://svn.apache.org/viewvc/lucene/java/trunk/src/java/org/apache/lucene/store/RAMDirectory.java?p2=%2Flucene%2Fjava%2Ftrunk%2Fsrc%2Fjava%2Forg%2Fapache%2Flucene%2Fstore%2FRAMDirectory.java&p1=%2Flucene%2Fjava%2Ftrunk%2Fsrc%2Fjava%2Forg%2Fapache%2Flucene%2Fstore%2FRAMDirectory.java&r1=478014&r2=478013&view=diff&pathrev=478014\n\nThis commit was for LUCENE-709 ",
            "author": "Michael McCandless",
            "id": "comment-12467838"
        },
        {
            "date": "2007-01-27T12:23:49+0000",
            "content": "Alas, it looks like HashMap.keySet() and .values() are just not serializable, and never will be:\n\n    http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4501848\n\nI think keeping serialization for RAMDirectory is important. ",
            "author": "Michael McCandless",
            "id": "comment-12468014"
        },
        {
            "date": "2007-01-27T19:46:42+0000",
            "content": "maybe i'm missing something, but this seema like a trivail fix ... HashMap is serializable \u2013 it's just the persistent refrences to the keySet() and values() Collections that arne't serializable (fileNames and files)\n\nOne is private, the other is package protected, so why don't we just get ride of them and fetch as needed?  (files isn't even used except in a Mock subclass for testing purposes) ",
            "author": "Hoss Man",
            "id": "comment-12468059"
        },
        {
            "date": "2007-01-27T20:34:08+0000",
            "content": "I agree, and your fix looks great!  I will commit it.  Thanks Hoss. ",
            "author": "Michael McCandless",
            "id": "comment-12468061"
        },
        {
            "date": "2007-02-27T18:10:40+0000",
            "content": "Closing all issues that were resolved for 2.1. ",
            "author": "Michael McCandless",
            "id": "comment-12476287"
        }
    ]
}