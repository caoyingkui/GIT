{
    "id": "SOLR-9660",
    "title": "in GroupingSpecification factor [group](sort|offset|limit) into [group](sortSpec)",
    "details": {
        "components": [],
        "type": "Task",
        "labels": "",
        "fix_versions": [
            "6.4",
            "7.0"
        ],
        "affect_versions": "None",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "This is split out and adapted from and towards the SOLR-6203 changes.",
    "attachments": {
        "SOLR-9660.patch": "https://issues.apache.org/jira/secure/attachment/12833973/SOLR-9660.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-18T16:04:28+0000",
            "author": "Christine Poerschke",
            "content": "Attaching work-in-progress patch, it inexplicably fails one of the TestDistributedGrouping tests (details below) with visually the difference apparently only in the 'start' element of the response but not the response elements themselves. SOLR-9649 was also unexpected and could be related.\n\n\n> Throwable #1: junit.framework.AssertionFailedError: .grouped[a_i1].doclist.start:5!=0\n>        at __randomizedtesting.SeedInfo.seed([E195797B46E2FF35:69C146A1E81E92CD]:0)\n>        at junit.framework.Assert.fail(Assert.java:50)\n>        at org.apache.solr.BaseDistributedSearchTestCase.compareSolrResponses(BaseDistributedSearchTestCase.java:913)\n>        at org.apache.solr.BaseDistributedSearchTestCase.compareResponses(BaseDistributedSearchTestCase.java:932)\n>        at org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:607)\n>        at org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:587)\n>        at org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:566)\n>        at org.apache.solr.TestDistributedGrouping.test(TestDistributedGrouping.java:170)\n>        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsRepeatStatement.callStatement(BaseDistributedSearchTestCase.java:1011)\n>        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:960)\n>        at java.lang.Thread.run(Thread.java:745)\n\n ",
            "id": "comment-15585840"
        },
        {
            "date": "2016-10-26T05:10:16+0000",
            "author": "Judith Silverman",
            "content": "Christine, I have no suggestions about the failing test but here are a couple of questions. Is it necessary to deprecate the GroupingSpecification accessors like getGroupOffset(), rather than simply modifying the definitions as you did? They could still be useful as wrappers.  Not that I feel strongly about it, but your answer could tell me something about Solr philosophy.\n\nOn a related note: now that you have added new SortSpec constructors, could you rewrite the old ones in terms of the new ones using the initial values of num and offset as the last two arguments:\n\npublic SortSpec(Sort sort, List<SchemaField> fields) {                     \n     this(sort, fields, num, offset );                                 \n}                                                                          \n\n?  I missed that in my SOLR-6203 patch but it jumped out at me now.  Similarly, the new weightSortSpec() function could be defined in terms of a 4-parameter version: weightSortSpec(SortSpec originalSortSpec, Sort nullEquivalent, int count, int offset) to make it more self-contained.\n\nThanks,\nJudith ",
            "id": "comment-15607455"
        },
        {
            "date": "2016-10-26T10:32:38+0000",
            "author": "Christine Poerschke",
            "content": "Test failure mystery solved: in the original patch there is a\n\n  sortSpecWithinGroup = groupSortSpec;\n\n\nwhich needed to be\n\n  sortSpecWithinGroup = new SortSpec(\n    groupSortSpec.getSort(),\n    groupSortSpec.getSchemaFields(),\n    groupSortSpec.getCount(),\n    groupSortSpec.getOffset());\n\n\nso that subsequent\n\n  sortSpecWithinGroup.set(Count|Offset) = ...\n\n\nchange sortSpecWithinGroup only and not groupSortSpec also. ",
            "id": "comment-15608095"
        },
        {
            "date": "2016-10-26T10:33:34+0000",
            "author": "Christine Poerschke",
            "content": "Attaching revised patch, yet to check if ant precommit and cd solr/core ; ant test still pass with it.\n\n(Observation: The rewritten...Fields logic in SolrIndexSearcher.weightSortSpec seems a bit awkward, though unless we go and assume that SortField[] from the original and from the rewritten sort are identical i cannot see a away around that logic.) ",
            "id": "comment-15608097"
        },
        {
            "date": "2016-10-26T10:37:54+0000",
            "author": "Christine Poerschke",
            "content": "Hi Judith, good couple of questions and suggestions, thanks for asking them. I would reply in more detail later on, got a couple of other things and stuff to take care of this morning/today and want to give proper time and consideration to the reply rather than just quickly rush it. ",
            "id": "comment-15608106"
        },
        {
            "date": "2016-10-26T14:51:11+0000",
            "author": "Judith Silverman",
            "content": "Ah, glad you found that bug.  \n\nWhile I was looking for it, I noticed that in at least three different files (Grouping.java, TopGroupsShardRequestFactory.java, TopGroupsShardResponseProcessor.java), we set something related to groupOffset to 0 if group.format == simple or groupingSpec.isMain().  I certainly don't see the whole picture, but other things being equal I would think it cleaner and safer to do that check as far upstream and in as few places as possible.\n\nIs there any advantage to having so many '5's in the unit tests, by the way?  Seems to me that two of them could get swapped and the test rig would never know.\n\nThanks,\nJudith ",
            "id": "comment-15608688"
        },
        {
            "date": "2016-10-26T21:21:04+0000",
            "author": "Christine Poerschke",
            "content": "... to deprecate the GroupingSpecification accessors like getGroupOffset() ...\n\nThat is a good question. Okay, so there's actually three possibilities:\n\n1. Just remove the accessor and change all the accessor's callers to match.\n\n\tGroupingSpecification has public visibility as do the accessors.\n\tWe can change all the accessor's callers in the Apache codebase but anyone out there who might have something custom calling the accessors concerned, their build will break when they upgrade.\n\tHaving said that, the GroupingSpecification is marked as @lucene.experimental and (as i understand that annotation) that would actually make it okay to remove the (considered experimental) accessor.\n\tSo my thinking behind not choosing this option #1 here is to reduce the scope of the changes i.e. changing all the accessor's callers increases the scope and complexity of the patch.\n\n\n\n2. Keep the accessors, only changing their implementation.\n\n\tThe advantage here is not having to change the accessor's callers.\n\tA nice-but-not-required side effect is that non-Apache codebases' build will not break. Nice since strictly not required given the marked @lucene.experimental nature of the class.\n\tA disadvantage is that present and future calling code now has two choices (getOffset() and getGroupSortSpec().getOffset()) to achieve the same thing.\n\tA related aspect is that whereas getGroupSortSpec().getSort() and getGroupSortSpec().getCount() and getGroupSortSpec().getOffset() very apparently use the same underlying SortSpec that sameness is hidden in the implementation if the getGroupSort() and getLimit() and getOffset() wrappers are used instead. Making it very apparent that sort/count/offset are all part of SortSpec could then mean that the calling code passes one SortSpec object to whereever it needs to go whereas otherwise three distinct objects might be passed instead.\n\n\n\n3. Mark the accessors deprecated, change their implementation, plan to remove them later.\n\n\tNo need to change the accessor's callers now.\n\t@Deprecated annotation reduces the two choices to one non-deprecated choice.\n\t@Deprecated annotation helps when it is time to remove the accessor.\n\tActual removal of the accessor (separate patch, likely separate ticket):\n\t\n\t\tIdentify callers and change them, then remove the deprecated accessors.\n\t\tAlternatively first remove the deprecated accessors and let the compiler tell you where the callers are \n\t\tAlong the way it might become apparent that further refactoring could be done e.g. from QueryComponent.java#L472-L481 it seems that Grouping.set(WithinGroupSort|DocsPerGroupDefault|GroupOffsetDefault) can be factored into just Grouping.setWithinGroupSortSpec() once SOLR-9660 here is complete.\n\t\n\t\n\n\n\nOops, that was a rather long analysis of the options. In practice, option #3 was just my intuitive choice.\n\n... rewrite the old ones in terms of the new ones ...\n\n  public SortSpec(Sort sort, List<SchemaField> fields)\n  {\n    this(sort, fields, num, offset);\n  }\n\n\n\nYes, I normally also favour constructor's using the this(...) approach and didn't realise that the initial values of num and offset could be passed as args in this(...), thank you for sharing that. On balance my preference in this scenario would be to not rewrite the old constructors since the constructor initialising num and offset members based on the initial values of those very members seems unusual?\n\n... the new weightSortSpec() function could be defined in terms of a 4-parameter version ...\nInteresting idea. So if the 4-parameter version is\n\n- public SortSpec weightSortSpec(SortSpec originalSortSpec, Sort nullEquivalent)\n+ public SortSpec weightSortSpec(SortSpec originalSortSpec, Sort nullEquivalent, int count, int offset)\n\n\nthen the implementation needs to decide between originalSortSpec.getOffset() and offset alternatives, but\n\n- public SortSpec weightSortSpec(SortSpec originalSortSpec, Sort nullEquivalent)\n+ public SortSpec weightSortSpec(Sort originalSort, Sort nullEquivalent, int count, int offset)\n\n\n4-parameter variant would work well for sortSpecWithinGroup since the sortSpecWithinGroup.set(Offset|Count) calls would disappear. However the downside would be\n\n- final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec, Sort.RELEVANCE);\n+ final SortSpec groupSortSpec = searcher.weightSortSpec(sortSpec.getSort(), Sort.RELEVANCE, sortSpec.getCount(), sortSpec.getOffset());\n\n\nand so the 2-parameter version seems neater.\n\n... so many '5's in the unit tests ... two of them could get swapped and the test rig would never know.\n\nIndeed, fewer '5's would be preferable. I'm also a fan of randomization, in SOLR-9412 there's a link to an interesting talk on that from a while back. ",
            "id": "comment-15609712"
        },
        {
            "date": "2016-10-27T11:34:06+0000",
            "author": "Judith Silverman",
            "content": "Christine, thanks for the detailed explanations.\n\n> On balance my preference in this scenario would be to not rewrite the old constructors since the constructor initialising num and offset members based on the initial values of those very members seems unusual?\n\nIndeed.  We could instead define default values as consts and do this:\n\n  public SortSpec(Sort sort, List<SchemaField> fields)\n  {\n    this(sort, fields, DEFAULT_NUM, DEFAULT_OFFSET);\n  }\n\n\nRe a 4-parameter weightSortSpec(): I didn't mean to get rid of the 2-parameter version but to rewrite it in terms of a 4-parameter one:\n\npublic SortSpec weightSortSpec(SortSpec originalSortSpec, Sort nullEquivalent)\n{\n   return weightSortSpec( originalSortSpec, nullEquivalent, sortSpec.getCount(), sortSpec.getOffset() );\n}\n\nThanks for the link to SOLR-9412; will check it out.\nJudith ",
            "id": "comment-15611603"
        },
        {
            "date": "2016-11-19T18:19:54+0000",
            "author": "Christine Poerschke",
            "content": "... this(sort, fields, DEFAULT_NUM, DEFAULT_OFFSET); ...\n\nUsually I am a big fan of static constants like DEFAULT_NUM. However, here the existing default is 10 which to me at least seems a bit unexpected (why 10 and not 5 or 20 say?) and so I'd rather not introduce a DEFAULT_NUM=10 which would make the 10 more 'baked in' than it already is. (As a side note, the default value I would have expected is 0 because that clearly leaves it up to the constructing code to set a meaningful value. In my mind SortSpec is a 'library' data structure class and only 'application' classes would contain DEFAULT_NUM constants, and different 'application' classes might even contain different defaults.)\n\n... 2-parameter version ... rewrite it in terms of a 4-parameter one ...\n\nGood idea, I rebased and updated the patch to include a private implWeightSortSpec method and its logic is clearer since the three originalSortSpec.get... calls are pushed up into its caller. ",
            "id": "comment-15679654"
        },
        {
            "date": "2016-11-28T18:06:42+0000",
            "author": "Judith Silverman",
            "content": "Hi, Christine.  I finally have a chunk of time and would like to help out here, but I don't want to get in the way of your program.  Is there something in particular you would like me to look into?  BTW, not sure whether you saw my question in this thread about changes to groupOffset from 26Oct16; maybe it should be asked/addressed separately.\nThanks,\nJudith ",
            "id": "comment-15702673"
        },
        {
            "date": "2016-11-29T21:01:40+0000",
            "author": "Christine Poerschke",
            "content": "... we set something related to groupOffset to 0 if group.format == simple or groupingSpec.isMain() ...\n\nHi Judith, sorry I missed this part of your comment at the time. I also don't quite see the whole picture w.r.t. how the group.format==simple is implemented. It seemed quite subtle though i.e. maybe it would be trickier to happen elsewhere and in fewer places. Drilling into the history of the code might help understand the implementation but I haven't gone looking and so can't say. ",
            "id": "comment-15706519"
        },
        {
            "date": "2016-11-29T21:12:31+0000",
            "author": "Christine Poerschke",
            "content": "Attaching final patch, precommit and solr/core tests pass, commit to follow shortly.\n\nCompared to the previous patch this patch pushes the new accessors to the end of the file to make for an easier-to-read diff and also having yet again gotten myself confused by getGroupLimit (is it \"within group limit\" or \"between groups limit\"?) and its colleague getGroupOffset - the two methods have been renamed to getWithinGroup... to better reflect their meaning.\n ",
            "id": "comment-15706542"
        },
        {
            "date": "2016-11-29T21:15:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a7fa920b52febb80be70210caad7db1eeaf0f97a in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a7fa920 ]\n\nSOLR-9660: in GroupingSpecification factor [group](sort|offset|limit) into [group](sortSpec) (Judith Silverman, Christine Poerschke) ",
            "id": "comment-15706553"
        },
        {
            "date": "2016-11-29T22:06:57+0000",
            "author": "Christine Poerschke",
            "content": "Hi Judith. Thanks for indirectly reminding me to return to this ticket here. I've committed to master branch and will backport to branch_6x tomorrow or so, SOLR-9783 is also committed, they both hopefully will help with SOLR-6203 itself. Replied to your 26Oct16 question above, also will add note to SOLR-6203 next. ",
            "id": "comment-15706691"
        },
        {
            "date": "2016-11-30T20:37:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit cf8d0e1ccbb06edc8830b7c270b90984c1e287af in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cf8d0e1 ]\n\nSOLR-9660: in GroupingSpecification factor [group](sort|offset|limit) into [group](sortSpec) (Judith Silverman, Christine Poerschke) ",
            "id": "comment-15709703"
        },
        {
            "date": "2016-12-23T17:18:34+0000",
            "author": "ASF subversion and git services",
            "content": "Commit bc8936a567e40eef3b70665fd8838548350c9aaa in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bc8936a ]\n\nSOLR-9660: rename GroupSpecification's sortSpecWithinGroup to withinGroupSortSpec (Judith Silverman via Christine Poerschke) ",
            "id": "comment-15773307"
        },
        {
            "date": "2016-12-23T17:41:00+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 038d4514a787d4137c59322dd38218eaa5be291a in lucene-solr's branch refs/heads/branch_6x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=038d451 ]\n\nSOLR-9660: rename GroupSpecification's sortSpecWithinGroup to withinGroupSortSpec (Judith Silverman via Christine Poerschke) ",
            "id": "comment-15773351"
        },
        {
            "date": "2016-12-23T17:42:41+0000",
            "author": "Christine Poerschke",
            "content": "Thanks Judith! ",
            "id": "comment-15773354"
        },
        {
            "date": "2016-12-23T18:09:26+0000",
            "author": "Judith Silverman",
            "content": "Hi, Christine, it's good to see all the updates! I haven't had time to\ndo more than skim but I see that SOLR-9660 has been resolved with no\nnew patches since 29Nov and I wanted to make sure that you saw my\ncomment from 02Dec under SOLR-6203 about one of the patches for\nSOLR-9660.  Maybe that's a non-issue or you are addressing it separately.\nThanks,\nJudith ",
            "id": "comment-15773399"
        }
    ]
}