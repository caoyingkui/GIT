{
    "id": "SOLR-793",
    "title": "set a commit time bounds in the <add> command",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "update"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Currently there are two options for how to handle commiting documents:\n1. the client explicitly starts the commit via <commit/>\n2. set an auto commit value on the server \u2013 clients can assume all documents will be commited within that time.\n\nHowever, this does not help in the case where the clients know what documents need updating quickly and others that could wait.  I suggest adding:\n\n\n <add commitWithin=\"100\">...\n\n \n\nto the update syntax so the client can schedule commits explicitly.",
    "attachments": {
        "SOLR-793-deadlock.patch": "https://issues.apache.org/jira/secure/attachment/12394363/SOLR-793-deadlock.patch",
        "SOLR-793-commitWithin.patch": "https://issues.apache.org/jira/secure/attachment/12391087/SOLR-793-commitWithin.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12635176",
            "date": "2008-09-27T18:34:55+0000",
            "content": "Here is a patch that adds the functionality to the AddUpdateCommand.  It is only supported in DirectUpdateHandler2.\n\nThe only bits I'm not sure about are the thread synchronization issues in CommitTracker\n\n\n  public void addedDocument( int commitWithin ) {\n      docsSinceCommit++;\n      lastAddedTime = System.currentTimeMillis();\n      // maxDocs-triggered autoCommit\n      if( docsUpperBound > 0 && (docsSinceCommit > docsUpperBound) ) {\n        scheduleCommitWithin( DOC_COMMIT_DELAY_MS );\n      }\n      \n      // maxTime-triggered autoCommit\n      long ctime = timeUpperBound;\n      if( commitWithin > 0 && (ctime < 0 || commitWithin < ctime) ) {\n        ctime = commitWithin;\n      }\n      if( ctime > 0 ) {\n        scheduleCommitWithin( ctime );\n      }\n    }\n\n\n\npreviously, the code to schedule a commit was inline \u2013 now this delegates to a synchronized method.  I don't think it is an issue (and tests pass), but I want to make sure that gets double checked \n\n------\n\nAlso, any better ideas on what the parameter/argument should be called? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12636866",
            "date": "2008-10-05T00:50:15+0000",
            "content": "no real change, updating for /trunk\n\nI'd like to commit this soon, but would love for someone with better threading chops to look it over first  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12637018",
            "date": "2008-10-06T06:59:53+0000",
            "content": "I somehow am confused with the usecase\n\n\n\n<add commitWithin=\"100\">...\n\n\n\nIf I have 10 docs with with a commitWithin=\"100\" This may mean that there will be 10 commits because each <add> happened at different time. \n\nWouldn't the user want to commit all the important documents at once . or wouldn't they want to commit tsay doc x,y,z first and then the rest of the docs?\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12637114",
            "date": "2008-10-06T15:11:27+0000",
            "content": "perhaps it is better to think of it as selectivly enabling the autoCommit feature.  \n\nIf I have 10 docs with with a commitWithin=\"100\" This may mean that there will be 10 commits because each <add> happened at different time.\n\nassuming the last of the 10 docs were sent to solr within 100ms, then all of them would be committed at once.  The commtWithin time is a maximum time, not a minimum.\n\nThis is identical to how autoCommit works now \u2013 the advantage is that various documents could require different time bounds.    "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12637173",
            "date": "2008-10-06T18:46:27+0000",
            "content": "Hey Ryan,\n\nI think this is good functionality and will take a look at the synchro stuff in the next day or so.   I feel somewhat reponsible, being the one who inflicted it on everyone  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12637175",
            "date": "2008-10-06T18:55:17+0000",
            "content": "I feel somewhat reponsible, being the one who inflicted it on everyone\n\nHey, I claim equal responsibility  "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12638825",
            "date": "2008-10-12T07:00:16+0000",
            "content": "I don't see any issue with the code: adddedDocument is always called within a synchronized context anyway, after all.\n\nOne question: right now you have it set to use the minimum of autocommit/maxTime and commitWithin on the update command.  Might it be better to always use commitWithin, even if it greater than a specified maxTime?   This would allow the insertion of \"less important than normal\" docs (right now, it seems only useful for the \"more important\" case) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12639259",
            "date": "2008-10-14T00:29:54+0000",
            "content": "Thanks for checking this out Mike.\n\nI changed max time logic to use:\n\n  long ctime = (commitWithin>0) ? commitWithin : timeUpperBound;\n  if( ctime > 0 ) {\n    scheduleCommitWithin( ctime );\n  }\n\n\n\nThis way, if you have a timeUpperBound set, it will use the passed in argument rather then the minimum of the two times. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12649455",
            "date": "2008-11-20T19:50:58+0000",
            "content": "This is a fix to possible deadlock caused by the previous patch. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12657757",
            "date": "2008-12-18T13:03:52+0000",
            "content": "The XML API looks a bit ugly.\nWhy do we need to add this like this <add commitWithin=\"6\">\n\nOne update request will have only one <add> . So it could have very well been added to the request params like waitFlush and waitSearcher.\n\nIf at all it has to be kept in the xml it should be on a per document .\n\nThe SolrInputDocument can have a 'commitWithin' attribute.\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12657765",
            "date": "2008-12-18T13:23:27+0000",
            "content": "\n\n\n One update request will have only one <add>\n\n\n\n\n\nThat is the existing limitation, but i don't see any reason there could not be multiple <add> statements within one request.  similar to how we have multiple delete commands in one statement.\n\nOur existing parser supports this already, only we would need to add a new root element.  This would allow a streaming client to post all commands sequentially to the server.\n\n\n\n\n The SolrInputDocument can have a 'commitWithin' attribute.\n\n\n\n\n\nI don't like that because the 'commitWithin' attribute is about the command, not the data.  Attaching it to the 'add' command seems like the logical place for it. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12657769",
            "date": "2008-12-18T13:34:16+0000",
            "content": "we already have all the other parameters passed on as a request parameter , whether we like it or not\n\nWhy don't we just stick to the convention.  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12657773",
            "date": "2008-12-18T13:49:20+0000",
            "content": "\n\n\n we already have all the other parameters passed on as a request parameter\n\n\n\n\n\nreally?  what about:\n\n  public static final String OVERWRITE = \"overwrite\";\n  public static final String OVERWRITE_COMMITTED = \"overwriteCommitted\";\n  public static final String OVERWRITE_PENDING = \"overwritePending\"; \n  public static final String ALLOW_DUPS = \"allowDups\";\n\nthey live with the <add>  "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12657775",
            "date": "2008-12-18T13:58:31+0000",
            "content": "Also, note that that XMLUpdate#processUpdate() does not have access to the request parameters while the add commands are being processed.... "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775543",
            "date": "2009-11-10T15:51:48+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}