{
    "id": "LUCENE-2003",
    "title": "Highlighter has problems when you use StandardAnalyzer with LUCENE_29 or simplier StopFilter with stopWordsPosIncr mode switched on",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "2.9.1",
            "3.0"
        ],
        "affect_versions": "2.9,                                            3.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This is a followup on LUCENE-1987:\n\nIf you set in HighligterTest the constant static final Version TEST_VERSION = Version.LUCENE_24 to LUCENE_29 or LUCENE_CURRENT, the test testSimpleQueryScorerPhraseHighlighting fails. Please note, that currently (before LUCENE-2002 is fixed), you must also set the QueryParser to respect posIncr.",
    "attachments": {
        "LUCENE-2003.patch": "https://issues.apache.org/jira/secure/attachment/12422932/LUCENE-2003.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-10-22T19:27:05+0000",
            "content": "Umm - its hard to emulate the positions stuff from phrasequery with a SpanQuery. A limitation I hadn't really though much of. Should be doc'd.\n\nOne - uh - sloppy fix - is to count up all of the extra positions and add that to the slop.\n\nie if the positions for a phrasequery are 0, 1, 3 (stop word removed at 2), you would add 1 to the slop. 0,1,3,5 - add 2 to the slop.\n\nI think that keeps a fairly good approximation.\n\nHavn't thought about how that would work with MultiPhraseQuery yet. ",
            "author": "Mark Miller",
            "id": "comment-12768827"
        },
        {
            "date": "2009-10-22T19:31:13+0000",
            "content": "Well no crap - MultiPhraseQuery already does that. Someone else contrib'd that. Guess they are ahead of me - would have saved some thought to look at it  ",
            "author": "Mark Miller",
            "id": "comment-12768829"
        },
        {
            "date": "2009-10-22T19:40:12+0000",
            "content": "Here is a patch showing essentially what I mean ",
            "author": "Mark Miller",
            "id": "comment-12768835"
        },
        {
            "date": "2009-10-22T19:53:11+0000",
            "content": "Could you explain this part?\n\n+          if (inc > lastInc) {\n+            slop += inc;\n+          }\n\n\n\nSeems like that would cause \"A ??? B ??? C ??? D\" to only have a slop of 3 (? represents a gap of 1).\n\nCouldn't slop just be maxPos-minPos+1-numTokens? ",
            "author": "Yonik Seeley",
            "id": "comment-12768843"
        },
        {
            "date": "2009-10-22T20:10:51+0000",
            "content": "Hmm - well now you have me worried - never seen you be wrong.\n\nI just tried a test like that and it appeared to work though.\n\nAh - I should have looked closer at the MultiPhraseQuery code - it is wrong - just happens to work.\n\nYou only need to add to the slop the largest inc, because the SpanQuery slop is the dist allowed between each span.\n\nSo thats why it works - it finds 3 the first time, doesn't add any more for the rest, but 3 is enough. I'll fix. ",
            "author": "Mark Miller",
            "id": "comment-12768853"
        },
        {
            "date": "2009-10-22T20:16:08+0000",
            "content": "This should be more correct - add the largest inc to the slop if its great than 1.\n\nGotto consider this against your suggestion. ",
            "author": "Mark Miller",
            "id": "comment-12768861"
        },
        {
            "date": "2009-10-22T20:20:29+0000",
            "content": "Okay - I think this is the way to go -  maxPos-minPos+1-numTokens is too much slop because it just has to be the largest posInc - forgot thats how SpanQueries work when I did the orig patch. ",
            "author": "Mark Miller",
            "id": "comment-12768862"
        },
        {
            "date": "2009-10-22T20:22:35+0000",
            "content": "You only need to add to the slop the largest inc, because the SpanQuery slop is the dist allowed between each span.\n\nLearn something new every day \n\nIs this javadoc incorrect, or simply ambiguous, or am I reading it wrong:\n\n  /** Construct a SpanNearQuery.  Matches spans matching a span from each\n   * clause, with up to <code>slop</code> total unmatched positions between\n   * them.  * When <code>inOrder</code> is true, the spans from each clause\n   * must be * ordered as in <code>clauses</code>. */\n  public SpanNearQuery(SpanQuery[] clauses, int slop, boolean inOrder) {\n    this(clauses, slop, inOrder, true);     \n  }\n\n\n\nThe \"total\" would almost seem to tip the ambiguity toward meaning that it's the total slop between all clauses. ",
            "author": "Yonik Seeley",
            "id": "comment-12768863"
        },
        {
            "date": "2009-10-22T20:27:51+0000",
            "content": "OK Mark you get this one  ",
            "author": "Michael McCandless",
            "id": "comment-12768865"
        },
        {
            "date": "2009-10-22T20:29:48+0000",
            "content": "The \"total\" would almost seem to tip the ambiguity toward meaning that it's the total slop between all clauses.\n\nYeah, I think it needs to be changed. Total appears just wrong. Perhaps something more along the lines of:\n\nMatches spans matching a span from each clause, with up to <code>slop</code> unmatched positions between each of them ",
            "author": "Mark Miller",
            "id": "comment-12768866"
        },
        {
            "date": "2009-10-23T21:09:02+0000",
            "content": "Mark is this one done? ",
            "author": "Michael McCandless",
            "id": "comment-12769452"
        },
        {
            "date": "2009-11-07T14:57:30+0000",
            "content": "Bulk close all 2.9.1 issues. ",
            "author": "Michael McCandless",
            "id": "comment-12774623"
        }
    ]
}