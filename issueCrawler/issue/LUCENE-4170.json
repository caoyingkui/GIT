{
    "id": "LUCENE-4170",
    "title": "TestRandomChains fail with Shingle+CommonGrams",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "ant test  -Dtestcase=TestRandomChains -Dtests.method=testRandomChains -Dtests.seed=12635ABB4F789F2A -Dtests.multiplier=3 -Dtests.locale=pt -Dtests.timezone=America/Argentina/Salta -Dargs=\"-Dfile.encoding=ISO8859-1\"\n\nThis test has two shinglefilters, then a common-grams filter. I think posLen impls in commongrams and/or shingle has a bug if the input is already a graph.",
    "attachments": {
        "LUCENE-4170.patch": "https://issues.apache.org/jira/secure/attachment/12533659/LUCENE-4170.patch",
        "recursive.shinglefilter.output.png": "https://issues.apache.org/jira/secure/attachment/12533689/recursive.shinglefilter.output.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-27T14:22:57+0000",
            "content": "first stab a patch for commongrams' posLen. But, the test still fails. So either my patch is wrong, or we need to fix shingle, too.\n\nWe could use some standalone tests here as well. ",
            "author": "Robert Muir",
            "id": "comment-13402249"
        },
        {
            "date": "2012-06-27T14:28:03+0000",
            "content": "I think shingles has a similar bug: it doesn't look at the existing posLength of the input tokens at all, instead it just fills posLength with the builtGramSize. ",
            "author": "Robert Muir",
            "id": "comment-13402256"
        },
        {
            "date": "2012-06-27T15:51:38+0000",
            "content": "I think shingles has a similar bug: it doesn't look at the existing posLength of the input tokens at all, instead it just fills posLength with the builtGramSize.\n\nI agree.\n\nHowever, the problem isn't just position length: ShingleFilter has never handled input position increments of zero, so real graph compatibility will mean fixing that too.\n\nI think Karl Wettin's ShingleMatrixFilter (deprecated in 3.6, dropped in 4.0) is an attempt to permute all combinations of overlapping (poslength=1) terms to produce shingles.  ShingleMatrixFilter wouldn't handle poslength > 1, though.\n\nI'm not even sure what token ngramming should mean over an input graph.  The trivial case where input tokens' poslength is always zero and position increment is always one is obviously already handled.\n\nI think both issues should be handled, since poslength > 1 will very likely be used with posincr = 0, e.g. synonyms and kuromoji de-compounding. ",
            "author": "Steve Rowe",
            "id": "comment-13402307"
        },
        {
            "date": "2012-06-27T16:04:29+0000",
            "content": "I'm not even sure what token ngramming should mean over an input graph.\n\nA thought problem: run ShingleFilter with mingramsize=2, maxgramsize=3, outputUnigrams=true over input [a/1] [b/1] [c/1] [d/1] (where /n indicates poslength = n, and [a b] indicates tokens a and b are at the same position; I'll omit the []'s below when only one token is at a given position), then run ShingleFilter again with the same config over the first ShingleFilter's output:\n\n\nshinglefilter(min:2,max:3,unigrams:true) with input:  a/1  b/1  c/1  d/1 \n\n\"_\" token sep: [a/1  a_b/2  a_b_c/3]  [b/1  b_c/2  b_c_d/3]  [c/1  c_d/2]  d/1\n\nshinglefilter(2,3,unigrams) with shinglefilter output above as input:\n\n\"=\" token sep: [a/1  a_b/2  a_b_c/3  a=b/2  a=b_c/3  a=b_c_d/4  a=b=c/3  a=b=c_d/4  a=b_c=d/4  a_b=c/3  a_b=c_d/4  a_b=c=d/4  a_b_c=d/4]  \n               [b/1  b_c/2  b_c_d/3  b=c/2  b=c_d/3  b_c=d/3]\n               [c/1  c_d/2  c=d/2]\n               d/1\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13402314"
        },
        {
            "date": "2012-06-27T18:58:46+0000",
            "content": "This image is a (not pretty) word lattice representation of the output from the double ShingleFilter thought problem described above - should help to more easily visualize the graph.\n\n(I wish I could make Graphviz line up the dots in a straight line, but couldn't figure out how to do that.) ",
            "author": "Steve Rowe",
            "id": "comment-13402475"
        }
    ]
}