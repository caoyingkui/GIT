{
    "id": "SOLR-7435",
    "title": "NPE can occur if CollapsingQParserPlugin is used two or more times in the same query",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5"
        ],
        "affect_versions": "4.8.1,                                            4.9.1,                                            4.10.1,                                            4.10.3,                                            4.10.4,                                            5.1,                                            5.2,                                            5.2.1,                                            5.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "The problem is that Solr 4.10.3, CollapsingFieldValueCollector.finish(CollapsingQParserPlugin.java:632) is looking ahead to the next segment. When you use the CollapsingQParser only once that look-ahead is always populated because each segment is processed by the scorers. The CollapsingQParser plugin does not process every segment though, it stops when it runs out of documents that have been collected.  So the look-ahead can cause a null pointer in the second Collapse. This is a problem in every version of the CollapsingQParserPlugin.\n\n\nBelow is the original description from Markus which is another NPE during a look-ahead in Solr 5.1:\n\nNot even sure it would work anyway, i tried to collapse on two distinct fields, ending up with this:\n\nselect?q=:&fq=\n{!collapse field=qst}\n&fq=\n{!collapse field=rdst}\n\n\n584550 [qtp1121454968-20] ERROR org.apache.solr.servlet.SolrDispatchFilter  [   suggests] \u2013 null:java.lang.NullPointerException\n        at org.apache.solr.search.CollapsingQParserPlugin$IntScoreCollector.finish(CollapsingQParserPlugin.java:743)\n        at org.apache.solr.search.CollapsingQParserPlugin$IntScoreCollector.finish(CollapsingQParserPlugin.java:780)\n        at org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:203)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1660)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1479)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:556)\n        at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:518)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:222)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1984)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:829)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:446)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:220)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1419)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:455)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:557)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1075)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:384)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1009)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:255)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:154)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)\n        at org.eclipse.jetty.server.Server.handle(Server.java:368)\n        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:489)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:53)\n        at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:942)\n        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:1004)\n        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:640)\n        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:72)\n        at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:264)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)\n        at java.lang.Thread.run(Thread.java:745)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-04-21T08:29:24+0000",
            "author": "Markus Jelsma",
            "content": "Ok, this is madness. For some funky reason the following test actually works!\n\n\n  @Test\n  public void testSOLR7435() throws Exception {\n    String[] doc = {\"id\",\"1\", \"a_i\", \"1\", \"b_i\", \"1\"};\n    assertU(adoc(doc));\n\n    String[] doc1 = {\"id\",\"2\", \"a_i\", \"1\", \"b_i\", \"2\"};\n    assertU(adoc(doc1));\n    \n    String[] doc2 = {\"id\",\"3\", \"a_i\", \"2\", \"b_i\", \"3\"};\n    assertU(adoc(doc2));\n\n    String[] doc3 = {\"id\",\"4\", \"a_i\", \"3\", \"b_i\", \"3\"};\n    assertU(adoc(doc3));\n\n    assertU(commit());\n\n\n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=a_i}\");\n    params.add(\"fq\", \"{!collapse field=b_i}\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\");\n  }\n\n\n\nI would expect the same NPE but i get the proper output:\n\n\n   [junit4]   2> 3691 T13 C0 oasc.SolrCore.execute [collection1] webapp=null path=null params={q=*%3A*&fq=%7B%21collapse+field%3Da_i%7D&fq=%7B%21collapse+field%3Db_i%7D&indent=on} hits=2 status=0 QTime=113 \n   [junit4]   2> 3705 T13 oas.SolrTestCaseJ4.assertQ ERROR REQUEST FAILED: xpath=*[count(//doc)=0]\n   [junit4]   2>                xml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]   2>        <response>\n   [junit4]   2> \n   [junit4]   2>        <lst name=\"responseHeader\">\n   [junit4]   2>          <int name=\"status\">0</int>\n   [junit4]   2>          <int name=\"QTime\">113</int>\n   [junit4]   2>        </lst>\n   [junit4]   2>        <result name=\"response\" numFound=\"2\" start=\"0\">\n   [junit4]   2>          <doc>\n   [junit4]   2>            <float name=\"id\">1.0</float>\n   [junit4]   2>            <int name=\"a_i\">1</int>\n   [junit4]   2>            <int name=\"b_i\">1</int>\n   [junit4]   2>            <long name=\"_version_\">1499049292930744320</long></doc>\n   [junit4]   2>          <doc>\n   [junit4]   2>            <float name=\"id\">3.0</float>\n   [junit4]   2>            <int name=\"a_i\">2</int>\n   [junit4]   2>            <int name=\"b_i\">3</int>\n   [junit4]   2>            <long name=\"_version_\">1499049292996804608</long></doc>\n   [junit4]   2>        </result>\n   [junit4]   2>        </response>\n\n ",
            "id": "comment-14504595"
        },
        {
            "date": "2015-04-22T19:56:28+0000",
            "author": "Joel Bernstein",
            "content": "Just tested out the following query:\n\nhttp://localhost:8983/solr/sample/select?q=id:doc*&wt=json&indent=true&fq={!collapse%20field=group_i}&fq={!collapse%20field=group1_i}\n\n\nOn a very small index this worked for me. Then I optimized the index to see if the issue only occurred on a single segment and it still worked for me.\n\nI haven't done any testing on this scenario before but in theory it should work. And you should be able to control the order of the collapses with the cost parameter.\n\nThe exception was coming from a collapse on an integer field using the score to select the group head. So that's what I tested with.\n\nThe specific numeric collapse support is new in 5.0 so it would not surprise me if there were some things that needed to be ironed out. ",
            "id": "comment-14507766"
        },
        {
            "date": "2015-05-04T10:20:07+0000",
            "author": "Markus Jelsma",
            "content": "Hi Joel Bernstein, can you try the following unit test?\n\n\n  @Test\n  public void testSOLR7435() throws Exception {\n    for (int i = 0; i < 15000; i++) {\n      String[] doc = {\"id\", String.valueOf(i) , \"a_i\", String.valueOf(random().nextInt(1)), \"b_i\", String.valueOf(random().nextInt(1))};\n      assertU(adoc(doc));\n    }\n    \n    assertU(commit());\n    \n    ModifiableSolrParams params = new ModifiableSolrParams();\n    params.add(\"q\", \"*:*\");\n    params.add(\"fq\", \"{!collapse field=a_i}\");\n    params.add(\"fq\", \"{!collapse field=b_i}\");\n    assertQ(req(params, \"indent\", \"on\"), \"*[count(//doc)=0]\");\n  }\n\n\n\nIt fails on my machine using: ant test  -Dtestcase=TestCollapseQParserPlugin -Dtests.method=testSOLR7435 -Dtests.seed=2B7D48BE88DE05E7 -Dtests.slow=true -Dtests.locale=en_ZA -Dtests.timezone=America/Araguaina -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n\nedit: hmm, it sometimes failes. ",
            "id": "comment-14526501"
        },
        {
            "date": "2015-09-08T15:38:37+0000",
            "author": "Brandon Chapman",
            "content": "Joel Bernstein, this also sometimes works sometimes gets an exception for me in Solr 4.10.3.\n\n\n        <field name=\"groupId\" type=\"string\" indexed=\"true\" stored=\"true\" multiValued=\"false\"/>\n        <field name=\"bsin\" type=\"string\" indexed=\"true\" stored=\"true\" required=\"true\" multiValued=\"false\"/>\n        <field name=\"sourceRank\" type=\"tint\" indexed=\"true\" stored=\"false\"/>\n\n\n\n{\n  \"responseHeader\": {\n    \"status\": 500,\n    \"QTime\": 89,\n    \"params\": {\n      \"facet\": \"true\",\n      \"fl\": \"psid, bsin, groupId, sku, merchant\",\n      \"indent\": \"true\",\n      \"q\": \"type_s:parent\",\n      \"_\": \"1441726236828\",\n      \"facet.field\": \"bsin\",\n      \"wt\": \"json\",\n      \"fq\": [\n        \"{!collapse field=groupId  min=sourceRank cost=201}\",\n        \"{!collapse field=merchant cost=200}\"\n      ],\n      \"rows\": \"10\"\n    }\n  },\n  \"error\": {\n    \"trace\": \"java.lang.NullPointerException\\n\\tat org.apache.solr.search.CollapsingQParserPlugin$CollapsingFieldValueCollector.finish(CollapsingQParserPlugin.java:632)\\n\\tat org.apache.solr.search.CollapsingQParserPlugin$CollapsingScoreCollector.finish(CollapsingQParserPlugin.java:525)\\n\\tat org.apache.solr.search.SolrIndexSearcher.getDocSetScore(SolrIndexSearcher.java:918)\\n\\tat org.apache.solr.search.SolrIndexSearcher.getDocSet(SolrIndexSearcher.java:938)\\n\\tat org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1366)\\n\\tat org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:514)\\n\\tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:484)\\n\\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:218)\\n\\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\\n\\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1976)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:777)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:418)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:207)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\\n\\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\\n\\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:222)\\n\\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:123)\\n\\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\\n\\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:99)\\n\\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:929)\\n\\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\\n\\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)\\n\\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:1002)\\n\\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:585)\\n\\tat org.apache.tomcat.util.net.JIoEndpoint$SocketProcessor.run(JIoEndpoint.java:310)\\n\\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\\n\\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\\n\\tat java.lang.Thread.run(Thread.java:744)\\n\",\n    \"code\": 500\n  }\n}\n\n ",
            "id": "comment-14735003"
        },
        {
            "date": "2015-09-08T21:08:10+0000",
            "author": "Joel Bernstein",
            "content": "I went back and reviewed the CollapsingQParserPlugin based on Brandon's stack trace and I think I see how this null pointer could occur.\n\nThe problem is that CollapsingFieldValueCollector.finish(CollapsingQParserPlugin.java:632) is looking ahead to the next segment. When you use the CollapsingQParser only once that look-ahead is always populated because each segment is processed by the scorers. The CollapsingQParser plugin does not process every segment though, it stops when it runs out of documents that have been collected.  So the look-ahead can cause a null pointer in the second Collapse. \n\nSo, there is now a confirmed problem with using the CollapsingQParserPlugin twice in the same request.\n\nAny other collector that does a similar look-ahead would also have the same problem if it followed the CollapsingQParserPlugin.\n\nThe best solution to this would be for the CollapsingQParser plugin to process all the segments in the finish() method even if it runs out of documents.  ",
            "id": "comment-14735614"
        }
    ]
}