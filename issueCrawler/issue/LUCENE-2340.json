{
    "id": "LUCENE-2340",
    "title": "FixedIntBlockIndexOutput encodes unnecessary integers at the end of a list",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "At closing time, the current FixedIntBlockIndexOutput flushes blocks of blockSize even if there is only a few integers in the block.\nThis can be problematic and causes a big overhead when using large blockSize (e.g., 1024), on small segments or on rare term posting list. \n\nOne solution will be to have a secondary flushBlock method with an additional paramter: the valid length of a buffer. This method will be only called in the FixedIntBlockIndexOutput#close() method.\nThe way this particular block of integers are encoded are left to subclasses.",
    "attachments": {
        "LUCENE-1458-FixedIntBlockIndexOutput.patch": "https://issues.apache.org/jira/secure/attachment/12439478/LUCENE-1458-FixedIntBlockIndexOutput.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-22T18:03:49+0000",
            "content": "A potential patch to the problem that I am using in my codec. The patch also modifies and adapts SimpleIntBlockIndexOutput. ",
            "author": "Renaud Delbru",
            "id": "comment-12848248"
        },
        {
            "date": "2010-03-22T18:35:50+0000",
            "content": "Fixed SimpleIntBlockIndex* and added unit test. The new implementation of SimpleIntBlockIndex* is even more silly than the previous one, and store a vint at the beginning of each block for recording the length of a block. ",
            "author": "Renaud Delbru",
            "id": "comment-12848274"
        },
        {
            "date": "2010-03-22T19:55:57+0000",
            "content": "This can be problematic and causes a big overhead when using large blockSize (e.g., 1024), on small segments or on rare term posting list.\n\nThe block is \"shared\" across postings, so a rare posting list in an otherwise big segment should be fine?\n\nSmall segments will indeed be wasteful, but they'll presumably quickly be merged away.\n\nThe new implementation of SimpleIntBlockIndex* is even more silly than the previous one, and store a vint at the beginning of each block for recording the length of a block.\n\nWould other less-silly impls also need to do this?  Ie the thing I want to avoid is foisting onto all block-based codecs the need to track the size of every block... ",
            "author": "Michael McCandless",
            "id": "comment-12848305"
        },
        {
            "date": "2010-03-23T01:05:56+0000",
            "content": "\nThe block is \"shared\" across postings, so a rare posting list in an otherwise big segment should be fine?\n\nOk, I didn't got that point until now. Small lists will be inlined with bigger lists over a block.\nHowever, it means that, most of the time after a seek, you will have to decode a block when only a part of it is of interest (e.g., decode the block, skip the end of the previous posting list, in order to access the start of the posting list you are looking for). But this overhead stays minimal since it will occur only once per query term times the number of posting files. And this overhead is even reduced more if the block compression algorithm is easily \"seekable\" like for FOR.\nHowever, I am not sure about the consequences on algorithms like FOR or PFOR which determine the best compression configuration for a block given its list of integers. Certain blocks could be less well compressed since its list of integers could follow more than one distribution. It could be something interesting to try (or are you aware of any kind of experiments or benchmarks that show the benefits/disadvantages of these two approaches ?).\n\n\nSmall segments will indeed be wasteful, but they'll presumably quickly be merged away.\n\nYes, they will probably disappear after the first merge.\n\n\nWould other less-silly impls also need to do this? Ie the thing I want to avoid is foisting onto all block-based codecs the need to track the size of every block...\n\nThey would have to do something similar, but a clever implementation could reduce well the overhead.\n\nFor example, the core algorithm of Simple9, FOR, PFOR are completely compatible. The only changes I had to made is in *IndexInput#readBlock and *IndexOutput#flushBlock.\nI set the lower bit of numBytes to 0 when the block to write does not have the same size than the previous block. and encode its length (in IndexOutput). Then, in IndexInput, whenever I read a numBytes with the lower bit to 0, I read the length of the block, and pass it to #setUnCompressedData. Since current block algorithms relies on the size of the uncompressed data to terminate their loop, they adapt automatically to the new block size.\n\nBut, indeed, after your comments, the gain seems very minimal, since an incomplete block will only happen once per segment file. The technique I am using was for the case where a block is not \"shared\" with other posting list.\nBut, in the current case, this is not very useful and will add a slight overhead for very large segment file (since I need one bit per block * number of blocks for tracking the end of the block list).\n\nThanks for the clarification Michael, and I think you can close the issue, since I am not really sure that my patch is worth keeping given the current way you implemented block-based index. ",
            "author": "Renaud Delbru",
            "id": "comment-12848484"
        },
        {
            "date": "2013-07-23T18:44:38+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717011"
        },
        {
            "date": "2014-04-16T12:54:56+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970930"
        }
    ]
}