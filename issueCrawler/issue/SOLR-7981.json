{
    "id": "SOLR-7981",
    "title": "term based ValueSourceParsers should support an option to run an analyzer for hte specified field on the input",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "The following functions all take exactly 2 arguments: a field name, and a term value...\n\n\n\tidf\n\ttermfreq\n\ttf\n\ttotaltermfreq\n\n\n\n...we should consider adding an optional third argument to indicate if an analyzer for the specified field should be used on the input to find the real \"Term\" to consider.\n\nFor example, the following might all result in equivilent numeric values for all docs assuming simple plural stemming and lowercasing...\n\n\ntermfreq(foo_t,'Bicycles',query) // use the query analyzer for field foo_t on input Bicycles\ntermfreq(foo_t,'Bicycles',index) // use the index analyzer for field foo_t on input Bicycles\ntermfreq(foo_t,'bicycle',none) // no analyzer used to construct Term\ntermfreq(foo_t,'bicycle') // legacy 2 arg syntax, same as 'none'\n\n\n\n(Special error checking needed if analyzer creates more then one term for the given input string)",
    "attachments": {
        "SOLR-7981.patch": "https://issues.apache.org/jira/secure/attachment/12769996/SOLR-7981.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-10-27T00:02:55+0000",
            "author": "Jason Gerlowski",
            "content": "Hi,\n\nI'm trying to learn my way around Lucene, so I was planning on working on a patch for this JIRA.\n\nShould I bring up on the mailing list that I'm working on this?  I know this is done for a lot of things, but I wasn't sure whether it was standard to do this for simple/uncontroversial patches as well.  I don't want to spam the list for unimportant things, though maybe that's the wrong attitude. ",
            "id": "comment-14975387"
        },
        {
            "date": "2015-10-27T12:29:48+0000",
            "author": "David Smiley",
            "content": "What you should do is exactly what you just did \u2013 announce your intention to fix it on the issue.  Most people don't even do that; it's only useful to deconflict with someone else who may want to do it.  All comments & JIRA issue events get forwarded to Lucene's dev list; meaning your comment and mine right now is CC'ed to the dev list. ",
            "id": "comment-14976286"
        },
        {
            "date": "2015-11-01T15:51:01+0000",
            "author": "Jason Gerlowski",
            "content": "I ran into a bit of a discrepancy between Solr's behavior, and the \"legacy behavior\" mentioned in the description of this issue.\n\nThe description above states that input terms currently aren't being analyzed in anyway.  However, when I sat down to write some tests for a patch I had staged, I noticed that this wasn't true.  When parsing the function query, Solr analyzes the provided input value using the query analyzer.  This can be seen in TermField.getFieldQuery(), which is called by ValueSourceParser.getFieldQuery().\n\nThis behavior can be verified by the test found in this patch.\n\nI bring all this up because:\n\n1.) I could use a double check, since this is my first attempt at a contribution.\n2.) I'm not sure if it affects the desirability of this change.  To me, it still valuable to be able to pick your analyzer.  But maybe the fact that this is already being analyzed really cuts down on the need for this feature. ",
            "id": "comment-14984429"
        },
        {
            "date": "2015-11-01T16:38:49+0000",
            "author": "Jason Gerlowski",
            "content": "As a slight follow up here, I'm pretty certain that I'm right about function queries \"defaulting\" to the query analyzer.\n\nIt wouldn't be too difficult to allow users to specify which analyzer to use.  That's still an option that make sense IMO.  But we probably don't want to change the default analyzer (from 'query' to 'none').  With that in mind, the new behavior could look like this:\n\ntermfreq(foo_t, 'Bicycles');              // Uses 'query' analyzer associated with that field.\ntermfreq(foot_t 'Bicycles', index);   //Uses the index analyzer\ntermfreq(foot_t, 'Bicycles', query);  // Uses the query analyzer\ntermfreq(foo_t, 'bicycle', none);      //Explicitly chooses to use no analyzer. (Just wrap in TermQuery- don't tokenize).\n\nDoes that sound like reasonable behavior?  Just wanted to try and straighten out the intended-behavior before I sit down to finish it up. ",
            "id": "comment-14984446"
        },
        {
            "date": "2015-11-02T03:04:23+0000",
            "author": "Hoss Man",
            "content": "Wow ... I have no memory of creating this issue, even though it was only ~10 weeks ago ... which means i don't remember why i created it, or why i thought the default behavior was not to use an analyzer.\n\nJason: your investigation appears to be correct - parseTerm does currently use getFieldQuery so the initial feature request is erroneous.  Off the cuff i don't have a strong opinion about adding an option to specify an analyzer (or 'none') as a third arg to this method, but I guess i'd be hard pressed to argue against it since it was apparently my idea. ",
            "id": "comment-14984676"
        },
        {
            "date": "2015-11-04T00:31:43+0000",
            "author": "Jason Gerlowski",
            "content": "Haha, funny; I've definitely been there.\n\nI also don't have a huge opinion about adding this option.  I didn't pick this up because I wanted the feature in Solr; I just wanted to learn how to work on Solr.  And it's been a good first introduction, so \"SUCCESS\" on that front.  if there's a consensus that this is a thing people would like to have, I'm happy to keep working on it (should I assign myself on this JIRA? Or is that only for commiters?)  If we do think this would be useful for people, I could use a bit of clarification on what the desired behavior actually is.  If not, should I close this JIRA?\n\nQuestions about 'Desired' Behavior:\n\n1.) Currently, analysis is only done on things that ValueSourceParser identifies as being TextFields.  Are numeric/date/other fields typically analyzed?  If so, do we want them to be analyzed here too?  Even among fields containing text, this doesn't cover as much as I'd expect.  For example, I was writing some tests for this stuff and tried to use a field like:\n\n<!-- A text field with mismatched analyzers for query/index..used for testing. -->\n    <fieldType name=\"text_different_analyzers\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"query\"> <!-- Whitespace only for query-analysis -->\n        <tokenizer class=\"solr.MockTokenizerFactory\"/>\n      </analyzer>\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.MockTokenizerFactory\"/>\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\"/>\n        <filter class=\"solr.WordDelimiterFilterFactory\" generateWordParts=\"1\" generateNumberParts=\"1\" catenateWords=\"1\" catenateNumbers=\"1\" catenateAll=\"0\" splitOnCaseChange=\"1\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n        <filter class=\"solr.KeywordMarkerFilterFactory\" protected=\"protwords.txt\"/>\n        <filter class=\"solr.PorterStemFilterFactory\"/>\n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n   <field name=\"text_analysis_mismatch\" type=\"text_different_analyzers\" indexed=\"true\" stored=\"true\"/>\n\n(Sorry, couldn't figure out how to format that as code, I used \"{{ }}\" but it didn't seem to work.)\n\nbut it turns out that it wasn't being analyzed by the current ValueSourceParser code.  Maybe this is just me being new to Solr, but I expected this to be considered a \"TextField\" by the code.\n\n2.) Do we care whether the input-value gets analyzed to > 1 token?  The initial bug description mentioned error handling for this, but I didn't see any special error-handling for this in the default-to-query-analyzer case that's already in the code.\n\nThanks for any clarification anyone can give.  Still getting used to the process of working on these things. ",
            "id": "comment-14988595"
        },
        {
            "date": "2016-01-27T02:01:14+0000",
            "author": "Shashank Tyagi",
            "content": "Is this still open or fixed? ",
            "id": "comment-15118464"
        },
        {
            "date": "2016-01-27T18:14:48+0000",
            "author": "Jason Gerlowski",
            "content": "Hi Shashank,\n\nTechnically, the issue is still \"open\".  The change requested by this JIRA is still totally possible.  But after Chris Hostetter (Unused)'s comment above, it's not really clear whether it's desired.  As Chris mentioned above, he requested this feature, but that was based on a misconception of the current behavior.\n\nIt might still make sense to make this change.  But it's unclear whether there's any desire for this feature, and/or whether it'd be worth initial/ongoing effort.\n\nSo when I saw Chris' ambivalent comment above, I took that as a sign that this wasn't wanted/needed, and I stopped working on this.  I'm happy to resume work on this if it turns out that others would find that work useful.\n\nWere you asking because you'd like to see this feature get in, or were you just asking for clarification/some-other-reason? ",
            "id": "comment-15119915"
        },
        {
            "date": "2016-01-28T12:17:13+0000",
            "author": "Shashank Tyagi",
            "content": "Hi Jason, \nI just looking to something to contribute to solr/lucene as developer which lead to me newdev label. As I can see here most of jira are already solved (i.e. some patch is already attached to jira). I was wondering why they are in open state. Also it would be great some can point to me to some other jira which i can work on as new developer. ",
            "id": "comment-15121304"
        },
        {
            "date": "2016-01-28T13:22:39+0000",
            "author": "Jason Gerlowski",
            "content": "Ah, I see.\n\nThe \"newdev\" label is actually what initially brought me to this story a while back!  I do share a bit of your frustration that many of the items in the \"newdev\" list are already closed, outdated, etc.  It's not as easy as it should be to find approachable tasks that developers can pick up to learn the process.\n\nI'll look around a little bit today and see if I know of anything that's newdev appropriate.  If I come up with anything I'll let you know. ",
            "id": "comment-15121408"
        },
        {
            "date": "2016-01-28T15:01:32+0000",
            "author": "Shashank Tyagi",
            "content": "Thanks ",
            "id": "comment-15121631"
        },
        {
            "date": "2016-01-28T21:39:34+0000",
            "author": "Jason Gerlowski",
            "content": "I wasn't able to find any good candidates yet on my own, but I did shoot out a reminder to the mailing list, and that prompted people to tag a few new JIRAs as newdev.\n\nI'll continue to look for some candidates tonight, but maybe some of the new entries will pique your interest.  Good luck! ",
            "id": "comment-15122350"
        }
    ]
}