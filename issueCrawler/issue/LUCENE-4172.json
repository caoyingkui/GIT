{
    "id": "LUCENE-4172",
    "title": "clean up redundant throws clauses",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "examples are things like ctors that list throws XYZException but actually dont, and things like 'throws CorruptIndex, LockObtainedFailed, IOException' when all of these are actually IOException.",
    "attachments": {
        "LUCENE-4172.patch": "https://issues.apache.org/jira/secure/attachment/12533735/LUCENE-4172.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-27T23:19:19+0000",
            "content": "the start to a patch... eclipse doesn't do well here so it would be better to use something else to find these. ",
            "author": "Robert Muir",
            "id": "comment-13402655"
        },
        {
            "date": "2012-06-27T23:36:15+0000",
            "content": "IntelliJ has two relevant inspections: \"Redundant throws clause\" and \"Duplicate throws\".  I've applied your patch to trunk and I'm running these on the whole project to see what they find. ",
            "author": "Steve Rowe",
            "id": "comment-13402669"
        },
        {
            "date": "2012-06-27T23:49:20+0000",
            "content": "that sounds nice: I think we always want to fix 'duplicate throws'.\n\nBut redundant throws requires some decisions... basically i looked at each one and:\n\n\tnuke the redundant throws if its a static method, private, or package-private, or final\n\tnuke the redundant throws if its a ctor (subclass can always declare its own)\n\tkeep the redundant throws if its public/protected non-final method that can be overridden\n\n ",
            "author": "Robert Muir",
            "id": "comment-13402680"
        },
        {
            "date": "2012-06-28T08:40:29+0000",
            "content": "Patch with manually vetted IntelliJ finds for global \"Redundant throws clauses\", \"Redundant throws declarations\", and \"Duplicate throws\".  Compiles; Lucene&Solr tests pass.\n\nRobert, I added another bullet at the top of your list of allowable contexts in which to remove redundant throws:\n\n\n\tnuke the redundant throws if the method is either in an anonymous inner class or in a final class\n\tnuke the redundant throws if its a static method, private, or package-private, or final\n\tnuke the redundant throws if its a ctor (subclass can always declare its own)\n\tkeep the redundant throws if its public/protected non-final method that can be overridden\n\n\n\n ",
            "author": "Steve Rowe",
            "id": "comment-13402936"
        },
        {
            "date": "2012-06-28T09:35:24+0000",
            "content": "+1\n\nI think you should commit before the patch gets out of date! ",
            "author": "Robert Muir",
            "id": "comment-13402956"
        },
        {
            "date": "2012-06-28T16:06:05+0000",
            "content": "Patch with more fixes.\n\nWhen I went to commit from IntelliJ, it performed a pre-commit code inspection and found a bunch of unused imports, which I fixed.  I also converted a bunch of import <package>.*; to individual imports, in the files that are already being touched by this change.\n\nCompile works; I'm running through tests, and once they succeed I'll commit. ",
            "author": "Steve Rowe",
            "id": "comment-13403184"
        },
        {
            "date": "2012-06-28T17:52:31+0000",
            "content": "Committed to trunk and branch_4x. ",
            "author": "Steve Rowe",
            "id": "comment-13403297"
        },
        {
            "date": "2012-06-29T05:15:34+0000",
            "content": "What's wrong with?:\n\nimport <package>.*;\n\n\u2013 especially when there are many classes?\nAnd is there a coding standard that Lucene/Solr adheres to?  I am unaware. ",
            "author": "David Smiley",
            "id": "comment-13403700"
        },
        {
            "date": "2012-06-29T06:50:23+0000",
            "content": "What's wrong with?:  import <package>.*; \u2013 especially when there are many classes?\n\nSome reasons given here: http://stackoverflow.com/questions/147454/why-is-using-a-wild-card-with-a-java-import-statement-bad: namespace polution; package additions can trigger compilation failure; compilation is slower.\n\nMy IDE (IntelliJ) automatically folds imports, so assuming most devs have a similar experience, many classes in a package don't cause actual clutter.\n\nAnd is there a coding standard that Lucene/Solr adheres to? I am unaware.\n\nThe only standard I've seen referred to is \"Sun's Java style rules, with the exception of 2 spaces per indent level instead of 4\". ",
            "author": "Steve Rowe",
            "id": "comment-13403733"
        },
        {
            "date": "2012-06-29T09:50:46+0000",
            "content": "I prefer the individual imports, not wildcards. ",
            "author": "Michael McCandless",
            "id": "comment-13403806"
        }
    ]
}