{
    "id": "LUCENE-3282",
    "title": "BlockJoinQuery: Allow to add a custom child collector, and customize the parent bitset extraction",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.4,                                            4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "It would be nice to allow to add a custom child collector to the BlockJoinQuery to be called on every matching doc (so we can do things with it, like counts and such). Also, allow to extend BlockJoinQuery to have a custom code that converts the filter bitset to an OpenBitSet.",
    "attachments": {
        "LUCENE-3282.patch": "https://issues.apache.org/jira/secure/attachment/12485519/LUCENE-3282.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-07-08T20:11:28+0000",
            "content": "This looks great Shay!\n\nWhat was the use case for subclassing to translate the filter into OBS?  Is it a custom filter cache?  Makes me nervous because the app really should create & reuse this OBS filter, usually...\n\nOn the Collector: we try to keep our Querys IR-state-free... so it makes me nervous to stick a Collector right on the Query.  Can we add a CollectorProvider that the Query invokes when it makes the Weight/Scorer?\n\nInstead of NoOpCollector can we just check for null? ",
            "author": "Michael McCandless",
            "id": "comment-13062151"
        },
        {
            "date": "2011-07-12T00:18:28+0000",
            "content": "Heya,\n\n   In my app, I have a wrapper around OBS, that has a common interface that allows to access bits by index (similar to Bits in trunk), so I need to extract from it the OBS.\n\n   Regarding the Collector, I will work on CollectorProvider interface. I liked the NoOpCollector option since then you don't have to check for nulls each time... ",
            "author": "Shay Banon",
            "id": "comment-13063619"
        },
        {
            "date": "2011-07-12T00:27:05+0000",
            "content": "New version, with CollectorProvider. ",
            "author": "Shay Banon",
            "id": "comment-13063621"
        },
        {
            "date": "2011-07-12T17:44:05+0000",
            "content": "Thanks Shay... looking close, but:\n\nMulling on this more... I think having the BlockJoinQuery invoke\nthe child collector is not the right place, because docs collected\nhere don't necessarily match the overall query being executed.  And\nalso we can miss some docs, eg we don't collect in advance.\n\nShould we instead move the child collector into BlockJoinCollector?\nIt has access to all the scorers for BlockJoinQuery involved in the\nparent query, and to all child docs for each parent doc collected. ",
            "author": "Michael McCandless",
            "id": "comment-13064034"
        },
        {
            "date": "2011-07-16T21:20:00+0000",
            "content": "The idea of this is to collect matching child docs regardless of what matches parent wise, and yea, we might miss some depending on the type of query that is actually \"wrapping\" it, but I think its still useful. ",
            "author": "Shay Banon",
            "id": "comment-13066536"
        },
        {
            "date": "2011-07-18T22:52:59+0000",
            "content": "I really don't like that this child collector would be buggy (lose results when involved in a parent query that uses advance); this will cause problems for users, asking why some hits are missing.\n\nMaybe, instead, we could make a generic wrapper class, taking any Query and a CollectorProvider, producing a Query, so that all hits \"visited\" by the sub-query are sent to the collector, with clear warnings that this collector will hit false positives (it'll see hits that don't match the top-level Query) and false negatives (it'll miss hits that did match the wrapped Query)?\n\nHow are you using this child collector such that the false positives/negatives aren't a problem?  EG do you know the parent query will never use advance? ",
            "author": "Michael McCandless",
            "id": "comment-13067369"
        },
        {
            "date": "2011-07-29T18:59:34+0000",
            "content": "Hi, sorry for the late response, I the comment.\n\nYea, I agree that there will be false positives, but thats the idea of it (sometimes you want to run facets for example on \"sub queries\"). Btw, I got your point on advance, do you think if a collector exists, then advance should be implemented by iterating over all docs up to the provided doc to advance to.\n\nRegarding the wrapper, interesting!. I need to have a look at how to generalize it, but it should be simple, I think, I'll try and work on it. ",
            "author": "Shay Banon",
            "id": "comment-13072979"
        },
        {
            "date": "2014-11-07T15:49:32+0000",
            "content": "Shay Banon fwiw SOLR-5743 uses BJQScorer method to obtain matched children. Does it solves 'custom child collector' ? ",
            "author": "Mikhail Khludnev",
            "id": "comment-14202176"
        }
    ]
}