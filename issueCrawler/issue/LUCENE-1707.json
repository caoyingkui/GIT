{
    "id": "LUCENE-1707",
    "title": "Don't use ensureOpen() excessively in IndexReader and IndexWriter",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "A spin off from here: http://www.nabble.com/Excessive-use-of-ensureOpen()-td24127806.html.\n\nWe should stop calling this method when it's not necessary for any internal Lucene code. Currently, this code seems to hurt properly written apps, unnecessarily.\n\nWill post a patch soon",
    "attachments": {
        "LUCENE-1707.patch": "https://issues.apache.org/jira/secure/attachment/12411647/LUCENE-1707.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-06-24T13:50:29+0000",
            "content": "Patch includes:\n\n\tremove all calls to ensureOpen in IndexReader and deprecated ensureOpen().\n\tremove most of the calls to ensureOpen in IndexWriter (those that happen at the beginning of methods).\n\tadded isOpen to both IndexReader and IndexWriter.\n\tdeleted some test cases that checked this functionality.\n\tfixed tag (removed test cases)\n\tCHANGES\n\n\n\nAll tests pass, except for TestRussianStem under contrib/analyzers. But that does not seem to be related to this patch, as it fails on a clean trunk checkout also. I think it has to do w/ encoding, but I don't know if I'm the only one that experiences that. ",
            "author": "Shai Erera",
            "id": "comment-12723564"
        },
        {
            "date": "2009-06-24T22:46:00+0000",
            "content": "I'd actually rather not remove the ensureOpen calls (I think it's\nbetter when the user sees an AlreadyClosedException than an NPE from\nsomewhere deeper in IndexReader), but instead change it to a best\neffort impl (ie don't use volatile).\n\nI think for nearly all the methods where we have ensureOpen today, the\ncost (once we stop checking volatile) is tiny (this coming from\nsomeone who is normally a freak about performance!). ",
            "author": "Michael McCandless",
            "id": "comment-12723782"
        },
        {
            "date": "2009-06-25T11:49:02+0000",
            "content": "I'd actually rather not remove the ensureOpen calls (I think it's better when the user sees an AlreadyClosedException than an NPE from somewhere deeper in IndexReader), but instead change it to a best effort impl (ie don't use volatile). \n\nI agree that it's better to see ACE than NPE. However, I thought we agreed that nearly all applications do not rely on ACE. And even if we make it super fast, I still don't see why for a properly written application, which knows it does not access a closed reader/writer we should check ensureOpen(). And, our merge code calls document() while reading from an IndexReader, which obviously cannot be close, so why check there?\n\nTrue, ACE helps developers of good apps, which \"forgot\" they closed the reader few lines above, track the problem faster ... But then this issue becomes just changing refCount to not volatile? And nothing to do on IndexWriter? If that was the intention, then I don't think an issue is needed, and a committer can just commit this one line change? ",
            "author": "Shai Erera",
            "id": "comment-12724055"
        },
        {
            "date": "2009-06-25T13:47:52+0000",
            "content": "However, I thought we agreed that nearly all applications do not rely on ACE\n\nIt's not that apps are relying on ACE, it's that the unlucky user who has problems is informed much more clearly that the problem is in their code and not a bug in Lucene.  It's a trap.\n\nIn the past there were a good number of users posting with confusing exceptions coming out Lucene, thinking they had hit a bug.  These users spent time, others spent time reading it, answering it, etc.  Now, I haven't seen one of those emails in quite a while.\n\nBut then this issue becomes just changing refCount to not volatile? \n\nI think we should leave refCount volatile, but just assign false to a new write-once \"isOpen\" (that's not volatile) when refCount drops to false. ",
            "author": "Michael McCandless",
            "id": "comment-12724090"
        },
        {
            "date": "2009-06-25T14:17:00+0000",
            "content": "IndexReader already has a 'closed' member which is set to true in close(). Why not use it?\n\nIn fact, it's strange - close() decreases refCount and set 'closed' to true, but if decRef() is called from another reader (it is a public method, so maybe even from an outside app), and refCount is 0, close() will call decRef() again, and fail on assert refCount > 0. Shouldn't that be fixed? ",
            "author": "Shai Erera",
            "id": "comment-12724103"
        },
        {
            "date": "2009-06-25T14:51:01+0000",
            "content": "IndexReader already has a 'closed' member which is set to true in close(). Why not use it?\n\nAhh perfect let's use that!\n\nIn fact, it's strange - close() decreases refCount and set 'closed' to true, but if decRef() is called from another reader (it is a public method, so maybe even from an outside app), and refCount is 0, close() will call decRef() again, and fail on assert refCount > 0.\n\nIf decRef() is called and refCount is 0, doClose() (not close()) is called.  I think this is right? ",
            "author": "Michael McCandless",
            "id": "comment-12724112"
        },
        {
            "date": "2009-06-25T15:10:09+0000",
            "content": "I tried using closed, but TestIndexReaderReopen fails. It appears that closed is used mainly to not execute close() twice (i.e., after you call it once, calling it again will do nothing) on the same instance. Even after I set closed to false wherever it should be (wherever refCount is increased or set to greater than 0), and set it to true in decRef()'s \"if (refCount == 1)\" section, the test fails. If I come up w/ isOpen, the test passes.\n\nI think it's because IndexWriter.ReadersPool closes a reader, and the test then attempts to close the reader again, then comparing the ref counts. So I'm not sure closed can be used. ",
            "author": "Shai Erera",
            "id": "comment-12724118"
        },
        {
            "date": "2009-06-25T15:16:52+0000",
            "content": "If decRef() is called and refCount is 0, doClose() (not close()) is called. I think this is right?\n\nIf you call decRef() and then close(), it'll be wrong? I think the solution is to set closed = true in decRef() after doClose() has returned? ",
            "author": "Shai Erera",
            "id": "comment-12724121"
        },
        {
            "date": "2009-06-25T15:33:25+0000",
            "content": "So I'm not sure closed can be used.\n\nWoops, sorry closed cannot be used: it simply reflects whether the referrer who had opened the reader, has closed it.  So even once they've closed it, the reader can stibe open because others are holding references.  We need a separate member that's set as soon as refCount hits 0.\n\nIf you call decRef() and then close(), it'll be wrong? I think the solution is to set closed = true in decRef() after doClose() has returned?\n\nBut, if refCount hits 0 and closed is false then there's some bug lurking (in the app code or the Lucene code)?  Ie, someone did an extra decRef.  I'd rather things fail then hide the bug in that case. ",
            "author": "Michael McCandless",
            "id": "comment-12724127"
        },
        {
            "date": "2009-06-25T15:39:50+0000",
            "content": "But, if refCount hits 0 and closed is false then there's some bug lurking (in the app code or the Lucene code)? Ie, someone did an extra decRef. I'd rather things fail then hide the bug in that case.\n\nBy that you're saying that calling decRef() and then close() is wrong, which I agree, but still possible. Why not protect against it, by setting closed=true in decRef() if refCount drops to 0? What good does \"not hiding that bug\" do?\n\nCurrently the tests pass whether I protect against it or not, so our code works fine (no surprises here). But I just think that decRef() and close() are public, which doesn't prevent anyone from calling them in whatever order one wants .\n\nIf you don't think it's necessary to protect against it, I'll post a patch w/o it. ",
            "author": "Shai Erera",
            "id": "comment-12724131"
        },
        {
            "date": "2009-06-25T15:59:21+0000",
            "content": "Patch with protecting against decRef() and close(). Lines 28-30 include this particular change, so if you disapprove, just delete these lines (assuming everything else is good  ). ",
            "author": "Shai Erera",
            "id": "comment-12724134"
        },
        {
            "date": "2009-06-25T16:14:11+0000",
            "content": "I see all access to refCount is synchronized. Why is it volatile then? Just because of ensureOpen()? ",
            "author": "Shai Erera",
            "id": "comment-12724138"
        },
        {
            "date": "2009-06-25T17:22:43+0000",
            "content": "Patch looks good; thanks Shai!\n\nWhy is it volatile then? \n\nGood question.  Only the ctor (which I believe is fine) and ensureOpen() access it un-synchronized, so I think we should make it un-volatile; I'll change it before committing.\n\nWhat good does \"not hiding that bug\" do?\n\nEG, say we're working on SegmentReader an accidentally create a bug that sometimes over decRefs. By no longer throwing an exception on close (with this change) unit tests might happily pass when previously they would fail and the bug could go undetected for longer.  (Hopefully some tests would still catch the bug, but maybe not).  I think catching a bug sooner rather than later is better.\n\nCalling close many times is allowed (not a bug), and we handle that by only doing one decRef.  But too many calls to decRef is a real bug and I think we shouldn't mask/delay it. ",
            "author": "Michael McCandless",
            "id": "comment-12724153"
        },
        {
            "date": "2009-06-25T18:17:57+0000",
            "content": "Patch looks good; thanks Shai! \n\nNote that decRef() sets closed=true if refCount = 0. This will protect against the other bug (calling close() then decRef() or vice versa). So if you don't want it there, we should remove it before committing.\n\nso I think we should make it un-volatile; I'll change it before committing.\n\nIf we change refCount to not volatile, is this patch still needed? I.e., what's wrong w/ checking in ensureOpen if refCount <= 0, same as before?\n\nBut too many calls to decRef is a real bug and I think we shouldn't mask/delay it.\n\nThat would not be possible, since decRef() asserts refCount > 0 (and asserts are enabled in tests) and calls ensureOpen(). So calling decRef() twice in a raw would hit either an assert exception (tests) or ACE (assertions disabled). I think? ",
            "author": "Shai Erera",
            "id": "comment-12724169"
        },
        {
            "date": "2009-06-25T18:47:50+0000",
            "content": "So calling decRef() twice in a raw would hit either an assert exception (tests) or ACE (assertions disabled). I think?\n\nLet's say I open a reader, I incRef it once somewhere.... then the reader is passed around and some other code somewhere incorrectly calls decRef twice, then finally at the end I close the reader.\n\nToday, that trips an assertion, because you decRef'd too many times, and one of them \"stole\" the ref you got from open.\n\nBut with this change, we would not trip an assertion.\n\nIf we change refCount to not volatile, is this patch still needed? I.e., what's wrong w/ checking in ensureOpen if refCount <= 0, same as before?\n\nDuh, right, I think we in fact have nothing to do here... ",
            "author": "Michael McCandless",
            "id": "comment-12724186"
        },
        {
            "date": "2009-06-25T19:30:13+0000",
            "content": "Ok I won't argue about that - these are hypothetical things anyway .\n\nDuh, right, I think we in fact have nothing to do here...\n\nExcept making refCount not volatile .\n\nBTW, Yonik has just sent an email to java-dev on the semantics of close(). Maybe, if things need to change, we can do it as part of this issue. ",
            "author": "Shai Erera",
            "id": "comment-12724220"
        },
        {
            "date": "2009-06-25T19:55:03+0000",
            "content": "Except making refCount not volatile\n\nOK I just committed that.  How crazy to have a one-line change   Such contrast!\n\nBTW, Yonik has just sent an email to java-dev on the semantics of close(). Maybe, if things need to change, we can do it as part of this issue.\n\nLet's do that (\"don't allow double-closing\") under a new issue? ",
            "author": "Michael McCandless",
            "id": "comment-12724237"
        },
        {
            "date": "2009-06-25T20:20:27+0000",
            "content": "Do you think that changing ensureOpen() to check \"if (refCount == 0)\" will speed things up a bit? ",
            "author": "Shai Erera",
            "id": "comment-12724251"
        },
        {
            "date": "2009-06-25T20:25:26+0000",
            "content": "Alas I don't think we should do that.  Eg if an app over-decRef's and refCount becomes -1 but doesn't trip the assert because assertions are off, we want to still hit the ACE. ",
            "author": "Michael McCandless",
            "id": "comment-12724254"
        },
        {
            "date": "2009-06-25T20:28:52+0000",
            "content": "Do you think that changing ensureOpen() to check \"if (refCount == 0)\" will speed things up a bit? \n\nNope - not on any common CPUs.  There is normally a test instruction which sets a bunch of status flags - branching on those status flags for less-or-equal is the same exact cycle count as equal. ",
            "author": "Yonik Seeley",
            "id": "comment-12724256"
        },
        {
            "date": "2009-06-25T20:52:05+0000",
            "content": "I also just double-checked and confirmed that the macro-op fusion in intel's latest processors treats CMP followed by JNE/JE the same as if followed by JA/JAE/JB/JBE. ",
            "author": "Yonik Seeley",
            "id": "comment-12724283"
        },
        {
            "date": "2009-06-25T21:04:30+0000",
            "content": "if an app over-decRef's and refCount becomes -1 but doesn't trip the assert\n\nFollowing assert we call ensureOpen, so I don't think refCount will ever be less than 0. Right? ",
            "author": "Shai Erera",
            "id": "comment-12724291"
        },
        {
            "date": "2009-06-25T21:12:09+0000",
            "content": "Following assert we call ensureOpen, so I don't think refCount will ever be less than 0. Right?\n\nHeh, you are correct!  The only place where we change refCount, we also always call ensureOpen.  So there's [currently] no way for it to slip past zero without ensureOpen noticing.\n\nStill I'd prefer to leave it, defensively, eg in case things ever change such that refCount could become negative. ",
            "author": "Michael McCandless",
            "id": "comment-12724296"
        },
        {
            "date": "2009-06-26T03:19:46+0000",
            "content": "sure, especially if == 0 and <= 0 perform the same in modern CPUs ",
            "author": "Shai Erera",
            "id": "comment-12724371"
        },
        {
            "date": "2009-07-01T17:28:48+0000",
            "content": "Shai, I am curious: did you resolve your issue with TestRussianStem?\n\nAlthough I do not experience this problem, it is unclear why RussianAnalyzer exists when it appears to be a duplicate of snowball functionality (in contrib/snowball)\n\n\n/**\n * Russian stemming algorithm implementation (see http://snowball.sourceforge.net for detailed description).\n *\n\n ",
            "author": "Robert Muir",
            "id": "comment-12726143"
        },
        {
            "date": "2009-07-02T06:14:16+0000",
            "content": "I haven't tried since then ... I think it's an encoding issue (one of the .txt files was checked out using incorrect encoding). I did change my SVN config file to add eol-style:native to a bunch of extensions, but I'm not sure if that's related. Anyway, this seemed to happen after these changes. ",
            "author": "Shai Erera",
            "id": "comment-12726343"
        },
        {
            "date": "2009-07-02T12:49:07+0000",
            "content": "my code was a little out of date. I am now experiencing this problem too. \n\nI think you hit the nail on the head: the related files: wordsUnicode.txt and stemsUnicode.txt are in UTF-16 encoding. this might be causing the issue, because EOL is very different in that encoding! ",
            "author": "Robert Muir",
            "id": "comment-12726462"
        },
        {
            "date": "2009-07-02T13:31:08+0000",
            "content": "so do we need to change those back to not eol-style:native? I know Mike updated a lot of files recently to eol-style:native (I think one of those two was updated as well). Why doesn't Hudson encounter this problem? I've commented out the .txt line in my SVN config. Previously I didn't have it, but I followed a page from Solr wiki (http://wiki.apache.org/solr/CommitterInfo#head-849f78497222f424339b79417056f4e510349fcb) which recommended to put it.\n\nI'll try to checkout again, though I'm not sure if that will help. I think we need to revert the change that was done on r787424. I see that on r153431 (Feb 2005) the comment is \"change eol style to LF\" - maybe it was for a reason?  ",
            "author": "Shai Erera",
            "id": "comment-12726475"
        },
        {
            "date": "2009-07-02T13:36:34+0000",
            "content": "Why doesn't Hudson encounter this problem?\n\nForgive my ignorance, does hudson also run tests or just verify build? These files are only used in tests!\n\nI agree we should correct it, and perhaps to prevent other problems these files should be converted to UTF-8. \n\nFor the record I am still confused about these java-code analyzers that implement snowball algorithms, why do they exist when the same functionality is in contrib/snowball?  ",
            "author": "Robert Muir",
            "id": "comment-12726479"
        }
    ]
}