{
    "id": "SOLR-12739",
    "title": "Make autoscaling policy based replica placement the default strategy for placing replicas",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "AutoScaling",
            "SolrCloud"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Today the default placement strategy is the same one used since Solr 4.x which is to select nodes on a round robin fashion. I propose to make the autoscaling policy based replica placement as the default policy for placing replicas.\n\nThis is related to SOLR-12648 where even though we have default cluster preferences, we don't use them unless a policy is also configured.",
    "attachments": {
        "SOLR-12739.patch": "https://issues.apache.org/jira/secure/attachment/12942374/SOLR-12739.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-10-03T11:52:29+0000",
            "content": "Now that SOLR-12756 has been committed, all we need to do is to modify the AssignStrategyFactory to choose autoscaling as default. But before we can do that, we need to provide a way for users to switch to the old behavior if they need to. So I propose that we add a boolean cluster property defaults/cluster/useLegacyReplicaAssignment which can be set to true to force the legacy assignment strategy. By default, this will be false so we can use the autoscaling framework. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16636848"
        },
        {
            "date": "2018-10-03T11:53:05+0000",
            "content": "Blocked by SOLR-12827 ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16636849"
        },
        {
            "date": "2018-10-04T11:49:32+0000",
            "content": "Initial patch which makes the necessary changes. I expect a lot of tests will fail with this patch because of the changed assumptions. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16638111"
        },
        {
            "date": "2018-10-05T03:32:29+0000",
            "content": "Nightly testing revealed no failures which was curious so I wrote more tests. Turns out there was a bug in usePolicyFramework helper method which fell back on previous logic when the \"defaults\" section was not present in cluster properties. Starting another round of tests with this patch. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16639219"
        },
        {
            "date": "2018-10-05T13:24:56+0000",
            "content": "One major block to using autoscaling as default is that we do not permit specifying maxShardsPerNode during collection creation if a policy is configured. Although if a collection already exists with maxShardsPerNode and a policy is configured then we try to do the right thing which is to respect both maxShardsPerNode and the policy itself. Our documentation also says the same thing. So I think the restriction of not accepting a maxShardsPerNode is not useful. We should accept it and do what we do for old existing collections. I have made this change in my latest patch. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16639832"
        },
        {
            "date": "2018-10-08T12:31:45+0000",
            "content": "This patch fixes various autoscaling tests that never had to specify a maxShardsPerNode before but must now. Not only did Solr not support maxShardsPerNode when autoscaling was enabled, it set maxShardsPerNode as unlimited (Integer.MAX_VALUE) so that maxShardsPerNode never interferes with autoscaling policy. I'm still undecided whether to continue the old behavior of unlimited maxShardsPerNode or not.\n\nOnly one test failures remains: LeaderVoteWaitTimeoutTest. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16641758"
        },
        {
            "date": "2018-10-08T21:09:56+0000",
            "content": "Today the default placement strategy is the same one used since Solr 4.x which is to select nodes on a round robin fashion. I propose to make the autoscaling policy based replica placement as the default policy for placing replicas.\n+1 to make this the default.\n\n\u00a0\n\nExplaining users how does maxShardsPerNode interplay with policeis would be very difficult no?\n\nIf there was no maxShardsPerNode going forward there would only be one way to set rules up to distirbute replicas - policies\n\nWe should also ship with some default policies - \"Don't allow more than one replica of a shard on the same JVM\" , \"Distribute cores across the cluster evenly\" , \"Distribute replicas per collection across the nodes\"\n\n\u00a0 ",
            "author": "Varun Thacker",
            "id": "comment-16642495"
        },
        {
            "date": "2018-10-09T02:19:40+0000",
            "content": "I'm still undecided whether to continue the old behavior of unlimited maxShardsPerNode or not.\n\nHistorically, without autoscaling, that parameter defaults to 1.  I think that's also what it should do with autoscaling.\n\nI'm very aware that this default can frustrate a lot of people who are trying to set up multi-shard clouds (in test or production) and don't have the same number of servers as the number of shard replicas they want to use.  Multiple shards per node can cause scalabilty issues in environments with a high query rate, so I think the admin should be required to make a conscious choice to allow multiple shards per node.  I also think this should happen by default with bin/solr create, and require an explicit parameter to increase it.\n\nIf consensus says to go with unlimited instead of 1, I'm not going to fight you on it. ",
            "author": "Shawn Heisey",
            "id": "comment-16642698"
        },
        {
            "date": "2018-10-09T06:28:16+0000",
            "content": "Explaining users how does maxShardsPerNode interplay with policeis would be very difficult no?\n\nI don't think so. When both are specified, the stricter one applies. I've added this sentence to the collections api documentation where maxShardsPerNode is mentioned\n\nIf there was no maxShardsPerNode going forward there would only be one way to set rules up to distirbute replicas - policies\n\nYes, that is true but specifying maxShardsPerNode as a parameter is far more simpler than writing a policy rule so I am inclined to continue to support it. However, it'd be nice to change the internal implementation to eventually use a policy rule and stop persisting maxShardsPerNode in the cluster state.\n\nWe should also ship with some default policies - \"Don't allow more than one replica of a shard on the same JVM\" , \"Distribute cores across the cluster evenly\" , \"Distribute replicas per collection across the nodes\"\n\n+1, I'll create an issue. It is anyway needed because the legacy assignment took care of spreading replicas of same shard on different nodes but autoscaling by default does not.\n\nHistorically, without autoscaling, that parameter defaults to 1. I think that's also what it should do with autoscaling.\n\nI agree. In this patch, I've kept the default as 1. If a user wants the old autoscaling specific default, they can pass maxShardsPerNode=-1.\n\nThe latest patch passes all tests and precommit. I'll commit this now. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16642864"
        },
        {
            "date": "2018-10-09T06:39:04+0000",
            "content": "The last patch also fixes a bug in PolicyHelper which always tried to make a call to the leader to find the required disk space without checking whether the leader node was live or not. Combined with SOLR-12836, this caused add replica and move replica APIs to hang forever in case the leader wasn't running at the time of the API call. Now we make this call only if the leader node is live. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16642873"
        },
        {
            "date": "2018-10-09T07:05:03+0000",
            "content": "Committed.\n\nmaster: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/dbed8baf\nbranch_7x: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/ee09bef7 ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16642890"
        },
        {
            "date": "2018-10-09T20:11:37+0000",
            "content": "CloudSolrClientTest.testNonRetryableRequests() is failing reproducibly without a seed.  git bisect says the first failing commit is ee09bef7 on this issue.  E.g. from https://jenkins.thetaphi.de/job/Lucene-Solr-7.x-MacOSX/875/:\n\n\nChecking out Revision a47812ddc1b3d83fa63ee6e62d1e8065af9dd33e (refs/remotes/origin/branch_7x)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=CloudSolrClientTest -Dtests.method=testNonRetryableRequests -Dtests.seed=B89C8AB9AFFA4549 -Dtests.slow=true -Dtests.locale=pl -Dtests.timezone=Asia/Srednekolymsk -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 4.19s J0 | CloudSolrClientTest.testNonRetryableRequests <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: expected:<33> but was:<34>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B89C8AB9AFFA4549:10724D2A51B33145]:0)\n   [junit4]    > \tat org.apache.solr.client.solrj.impl.CloudSolrClientTest.testNonRetryableRequests(CloudSolrClientTest.java:550)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {multiDefault=FSTOrd50, a_t=PostingsFormat(name=LuceneVarGapFixedInterval), title_s=FSTOrd50, id=TestBloomFilteredLucenePostings(BloomFilteringPostingsFormat(Lucene50(blocksize=128))), text=BlockTreeOrds(blocksize=128)}, docValues:{_version_=DocValuesFormat(name=Asserting), multiDefault=DocValuesFormat(name=Lucene70), a_t=DocValuesFormat(name=Asserting), title_s=DocValuesFormat(name=Lucene70), intDefault=DocValuesFormat(name=Asserting), id=DocValuesFormat(name=Memory), text=DocValuesFormat(name=Direct), timestamp=DocValuesFormat(name=Asserting)}, maxPointsInLeafNode=400, maxMBSortInHeap=7.796514885717848, sim=RandomSimilarity(queryNorm=false): {}, locale=pl, timezone=Asia/Srednekolymsk\n   [junit4]   2> NOTE: Mac OS X 10.11.6 x86_64/Oracle Corporation 1.8.0_172 (64-bit)/cpus=3,threads=1,free=171094224,total=463470592\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16644033"
        },
        {
            "date": "2018-10-09T20:18:50+0000",
            "content": "AutoAddReplicasIntegrationTest.testSimple() is also failing without a seed, and the first failing commit is also ee09bef7 on this issue.  E.g. (also from https://jenkins.thetaphi.de/job/Lucene-Solr-7.x-MacOSX/875/):\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AutoAddReplicasIntegrationTest -Dtests.method=testSimple -Dtests.seed=EE09D63ABEE1B3CF -Dtests.slow=true -Dtests.locale=it-CH -Dtests.timezone=Brazil/Acre -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE  129s J0 | AutoAddReplicasIntegrationTest.testSimple <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: Waiting for collection testSimple1\n   [junit4]    > null\n   [junit4]    > Live Nodes: [127.0.0.1:61242_solr, 127.0.0.1:61245_solr]\n   [junit4]    > Last available state: DocCollection(testSimple1//collections/testSimple1/state.json/20)={\n   [junit4]    >   \"pullReplicas\":\"0\",\n   [junit4]    >   \"replicationFactor\":\"2\",\n   [junit4]    >   \"shards\":{\n   [junit4]    >     \"shard1\":{\n   [junit4]    >       \"range\":\"80000000-ffffffff\",\n   [junit4]    >       \"state\":\"active\",\n   [junit4]    >       \"replicas\":{\n   [junit4]    >         \"core_node3\":{\n   [junit4]    >           \"core\":\"testSimple1_shard1_replica_n1\",\n   [junit4]    >           \"base_url\":\"http://127.0.0.1:61242/solr\",\n   [junit4]    >           \"node_name\":\"127.0.0.1:61242_solr\",\n   [junit4]    >           \"state\":\"active\",\n   [junit4]    >           \"type\":\"NRT\",\n   [junit4]    >           \"force_set_state\":\"false\",\n   [junit4]    >           \"leader\":\"true\"},\n   [junit4]    >         \"core_node12\":{\n   [junit4]    >           \"core\":\"testSimple1_shard1_replica_n11\",\n   [junit4]    >           \"base_url\":\"http://127.0.0.1:61242/solr\",\n   [junit4]    >           \"node_name\":\"127.0.0.1:61242_solr\",\n   [junit4]    >           \"state\":\"active\",\n   [junit4]    >           \"type\":\"NRT\",\n   [junit4]    >           \"force_set_state\":\"false\"}}},\n   [junit4]    >     \"shard2\":{\n   [junit4]    >       \"range\":\"0-7fffffff\",\n   [junit4]    >       \"state\":\"active\",\n   [junit4]    >       \"replicas\":{\n   [junit4]    >         \"core_node8\":{\n   [junit4]    >           \"core\":\"testSimple1_shard2_replica_n6\",\n   [junit4]    >           \"base_url\":\"http://127.0.0.1:61242/solr\",\n   [junit4]    >           \"node_name\":\"127.0.0.1:61242_solr\",\n   [junit4]    >           \"state\":\"active\",\n   [junit4]    >           \"type\":\"NRT\",\n   [junit4]    >           \"force_set_state\":\"false\",\n   [junit4]    >           \"leader\":\"true\"},\n   [junit4]    >         \"core_node10\":{\n   [junit4]    >           \"core\":\"testSimple1_shard2_replica_n9\",\n   [junit4]    >           \"base_url\":\"http://127.0.0.1:61244/solr\",\n   [junit4]    >           \"node_name\":\"127.0.0.1:61244_solr\",\n   [junit4]    >           \"state\":\"down\",\n   [junit4]    >           \"type\":\"NRT\",\n   [junit4]    >           \"force_set_state\":\"false\"}}}},\n   [junit4]    >   \"router\":{\"name\":\"compositeId\"},\n   [junit4]    >   \"maxShardsPerNode\":\"2\",\n   [junit4]    >   \"autoAddReplicas\":\"true\",\n   [junit4]    >   \"nrtReplicas\":\"2\",\n   [junit4]    >   \"tlogReplicas\":\"0\"}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([EE09D63ABEE1B3CF:D6BAF2C49912671E]:0)\n   [junit4]    > \tat org.apache.solr.cloud.SolrCloudTestCase.waitForState(SolrCloudTestCase.java:280)\n   [junit4]    > \tat org.apache.solr.cloud.autoscaling.AutoAddReplicasIntegrationTest.testSimple(AutoAddReplicasIntegrationTest.java:107)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16644039"
        },
        {
            "date": "2018-10-09T21:51:25+0000",
            "content": "CollectionsAPIDistributedZkTest.testCoresAreDistributedAcrossNodes() is failing reproducibly (but only with a seed, and with no -Dtests.method on the cmdline, so maybe another test in the suite isn't cleaning up properly after itself?), and the first failing master commit is dbed8baf on this issue.  From https://builds.apache.org/job/Lucene-Solr-Tests-master/2861/:\n\n\nChecking out Revision a52d47a1a5ca24bf090105388743a07ec985b399 (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=CollectionsAPIDistributedZkTest -Dtests.method=testCoresAreDistributedAcrossNodes -Dtests.seed=104795730302867C -Dtests.multiplier=2 -Dtests.slow=true -Dtests.locale=no-NO -Dtests.timezone=Europe/Berlin -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 5.84s J0 | CollectionsAPIDistributedZkTest.testCoresAreDistributedAcrossNodes <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: [127.0.0.1:38121_solr] expected:<0> but was:<1>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([104795730302867C:7407401FB8CC0E6D]:0)\n   [junit4]    > \tat org.apache.solr.cloud.api.collections.CollectionsAPIDistributedZkTest.testCoresAreDistributedAcrossNodes(CollectionsAPIDistributedZkTest.java:352)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16644149"
        },
        {
            "date": "2018-10-10T01:48:49+0000",
            "content": "Thanks Steve, I'll fix. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16644338"
        },
        {
            "date": "2018-10-10T07:48:34+0000",
            "content": "Pushed fix for CloudSolrClientTest.testNonRetryableRequests()\n\nmaster: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/a66a7f31\nbranch_7x: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/b958e1be ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16644594"
        },
        {
            "date": "2018-10-10T11:45:12+0000",
            "content": "Pushed fix for AutoAddReplicasIntegrationTest.testSimple()\n\n\nSOLR-12739: Fix failures in AutoAddReplicasIntegrationTest and its sub-class.\n\nThis test too makes assumptions about how replicas are placed. In the legacy assignment strategy, the replica of a given collection are spread equally across all nodes but with the new policy based strategy, all cores across collections are spread out. Therefore the assumptions in this test were wrong. I've changed this test to use the legacy assignment policy because testing the autoAddReplicas feature doesn't have to depend on new replica assignment strategies. This change also fixes a bug in Assign which used \"collection\" key instead of \"cluster\" to figure out which strategy to use.\n\n\nmaster: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/9f34a7c7\nbranch_7x: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/d431c1b6\n\n ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16644867"
        },
        {
            "date": "2018-10-10T11:46:14+0000",
            "content": "Found and fixed a bug as well.\n\nSOLR-12739: Use cluster instead of collection as the key for using legacy assignment.\n\nmaster: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/940a7303\nbranch_7x: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/859559a3\n\n ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16644870"
        },
        {
            "date": "2018-10-10T11:46:59+0000",
            "content": "\nSOLR-12739: Release the policy session as soon as we're done with the computation.\n\nThis fixes the CollectionsAPIDistributedZkTest.testCoresAreDistributedAcrossNodes test failures. Due to the various tests for exceptional conditions, there were times where the session was not released causing stale data to remain in the policy session cache.\n\n\nmaster: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/50d1c7b4\nbranch_7x: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/a4cc66bd\n\n ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16644872"
        },
        {
            "date": "2018-10-10T23:43:23+0000",
            "content": "@BadApple'd AutoAddReplicasPlanActionTest.testSimple() is also failing without a seed, and the first (consistently) failing master commit is dbed8ba on this issue. E.g. from https://jenkins.thetaphi.de/job/Lucene-Solr-BadApples-master-Linux/104/):\n\n\nChecking out Revision 8d205ecd1c6a133f7cb9a4352388ec30d00b4bdb (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=AutoAddReplicasPlanActionTest -Dtests.method=testSimple -Dtests.seed=AEB09D2F3B1B1BA6 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=yo-BJ -Dtests.timezone=Etc/GMT-7 -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 15.5s J1 | AutoAddReplicasPlanActionTest.testSimple <<<\n   [junit4]    > Throwable #1: org.junit.ComparisonFailure: Target node is not as expectation expected:<127.0.0.1:[37029]_solr> but was:<127.0.0.1:[40937]_solr>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([AEB09D2F3B1B1BA6:9603B9D11CE8CF77]:0)\n   [junit4]    > \tat org.apache.solr.cloud.autoscaling.AutoAddReplicasPlanActionTest.assertOperations(AutoAddReplicasPlanActionTest.java:191)\n   [junit4]    > \tat org.apache.solr.cloud.autoscaling.AutoAddReplicasPlanActionTest.testSimple(AutoAddReplicasPlanActionTest.java:123)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n   [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n   [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n   [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\n   [junit4]    > \tat java.base/java.lang.Thread.run(Thread.java:844)\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16645725"
        },
        {
            "date": "2018-10-11T03:34:24+0000",
            "content": "Thanks Steve. This one wasn't 100% reproducible. It breaks due to bad assumptions on the cluster layout. I changed the test to use the legacy assignment strategy because we don't necessarily need the new strategy to test the feature itself.\n\n\nSOLR-12739: Use legacy assignment in AutoAddReplicasPlanActionTest\n\nmaster: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/971a0e3f\nbranch_7x: http://git-wip-us.apache.org/repos/asf/lucene-solr/commit/d921fe50\n\n ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16645914"
        },
        {
            "date": "2018-10-11T22:24:18+0000",
            "content": "Another failure, reproduces well enough for me on master to run git bisect and locate the first failing commit (dbed8baf on this issue) when I leave off the -Dtests.method cmdline param.  From https://builds.apache.org/job/Lucene-Solr-BadApples-Tests-7.x/183/:\n\n\nChecking out Revision d921fe50e9bfcace5253a27e69d2e91f3eccc172 (refs/remotes/origin/branch_7x)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestCollectionStateWatchers -Dtests.method=testSimpleCollectionWatch -Dtests.seed=466EB2632B3B0B17 -Dtests.multiplier=2 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=is-IS -Dtests.timezone=Africa/Lagos -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 33.2s J2 | TestCollectionStateWatchers.testSimpleCollectionWatch <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: CollectionStateWatcher was never notified of cluster change\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([466EB2632B3B0B17:1B557D136C369429]:0)\n   [junit4]    > \tat org.apache.solr.common.cloud.TestCollectionStateWatchers.testSimpleCollectionWatch(TestCollectionStateWatchers.java:141)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:748)\n[...]\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {}, docValues:{}, maxPointsInLeafNode=815, maxMBSortInHeap=5.42575346479253, sim=RandomSimilarity(queryNorm=true): {}, locale=is-IS, timezone=Africa/Lagos\n   [junit4]   2> NOTE: Linux 4.4.0-137-generic amd64/Oracle Corporation 1.8.0_172 (64-bit)/cpus=4,threads=1,free=74336440,total=429391872\n\n ",
            "author": "Steve Rowe",
            "id": "comment-16647111"
        },
        {
            "date": "2018-10-16T06:44:29+0000",
            "content": "Commit aa0a5289e692286297762d54434ae726333a5b64 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aa0a528 ]\n\nSOLR-12739: Clear all collections in TestCollectionStateWatchers setup so that the collections created by test methods are spread evenly in the cluster. ",
            "author": "ASF subversion and git services",
            "id": "comment-16651226"
        },
        {
            "date": "2018-10-16T06:46:36+0000",
            "content": "Commit af8e031a61a1ad770e96510113c46622e93c6970 in lucene-solr's branch refs/heads/branch_7x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=af8e031a ]\n\nSOLR-12739: Clear all collections in TestCollectionStateWatchers setup so that the collections created by test methods are spread evenly in the cluster.\n\n(cherry picked from commit aa0a5289e692286297762d54434ae726333a5b64) ",
            "author": "ASF subversion and git services",
            "id": "comment-16651228"
        },
        {
            "date": "2018-10-16T22:53:21+0000",
            "content": "Commit aa0a5289e692286297762d54434ae726333a5b64 in lucene-solr's branch refs/heads/jira/http2 from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aa0a528 ]\n\nSOLR-12739: Clear all collections in TestCollectionStateWatchers setup so that the collections created by test methods are spread evenly in the cluster. ",
            "author": "ASF subversion and git services",
            "id": "comment-16652587"
        }
    ]
}