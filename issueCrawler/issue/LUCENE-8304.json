{
    "id": "LUCENE-8304",
    "title": "Add TermFrequencyQuery",
    "details": {
        "components": [],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "This has come up a few times when writing query parsers.  It would be useful to have a query that returned documents that match a term with a particular frequency - eg, all docs where \"patent\" appears at least five times.",
    "attachments": {
        "LUCENE-8304.patch": "https://issues.apache.org/jira/secure/attachment/12922651/LUCENE-8304.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16468942",
            "author": "Alan Woodward",
            "content": "Here's a patch, adding TermFrequencyQuery to the queries module. ",
            "date": "2018-05-09T15:08:24+0000"
        },
        {
            "id": "comment-16468945",
            "author": "Robert Muir",
            "content": "Can we implement this where it works more efficiently based on term impacts instead? ",
            "date": "2018-05-09T15:09:30+0000"
        },
        {
            "id": "comment-16469080",
            "author": "Alan Woodward",
            "content": "I haven't properly looked at Impacts yet - is the idea that we can skip blocks by looking at their min and max freqs and seeing if they fall out of the requested range? ",
            "date": "2018-05-09T16:51:58+0000"
        },
        {
            "id": "comment-16469098",
            "author": "Adrien Grand",
            "content": "Indeed. And they are sorted by increasing freq, so the first impact will have the min frequency of the block and the last one will have the max frequency. ",
            "date": "2018-05-09T17:04:07+0000"
        },
        {
            "id": "comment-16469107",
            "author": "Robert Muir",
            "content": "Yeah, I mean i don't think it has to block the issue (we could put the query in sandbox as-is and then figure this out), but it would be pretty cool to try to make use of the new ImpactsEnum at least to speed up advance()? ",
            "date": "2018-05-09T17:08:32+0000"
        },
        {
            "id": "comment-16470218",
            "author": "Alan Woodward",
            "content": "I'll stick this in the sandbox, and then we can work on Impacts in a follow up.  They'd be master-only anyway. ",
            "date": "2018-05-10T10:57:45+0000"
        },
        {
            "id": "comment-16470226",
            "author": "Robert Muir",
            "content": "Right, I don't think it makes sense to backport this query to 7.x because it has no hope of being efficient there. ",
            "date": "2018-05-10T11:12:47+0000"
        },
        {
            "id": "comment-16470332",
            "author": "Alan Woodward",
            "content": "It's no more inefficient than a plain TermQuery though?  We can make it more efficient using impacts, but I think this is still useful in its current state. ",
            "date": "2018-05-10T12:32:47+0000"
        },
        {
            "id": "comment-16470677",
            "author": "Robert Muir",
            "content": "It is inefficient: because it takes as input something like \"the\" AND freq>50. Currently this is done like a very-slow conjunction (the index is not used).\n\nMaybe it would help to explain the use-case better for this query. ",
            "date": "2018-05-10T16:32:04+0000"
        }
    ]
}