{
    "id": "LUCENE-7333",
    "title": "BaseDirectoryTestCase may create temporary files with names not accepted by Windows (e.g. com1, con,...)",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/test-framework"
        ],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "BaseDirectoryTestCase may randomly create files with \"special names\", which are not allowed by certain operating systems, e.g. Windows.\n\nSee https://msdn.microsoft.com/en-us/library/aa365247.aspx for more info.\n\nThis is the issue we have seen:\n\n\njava.security.AccessControlException: access denied (\"java.io.FilePermission\" \"C:\\Users\\jenkins\\workspace\\Lucene-Solr-6.x-Windows\\lucene\\build\\core\\test\\J0\\temp\\lucene.store.TestMmapDirectory_96FC6F2D45B76809-001\\tempDir-007\\con\" \"write\")\n\tat __randomizedtesting.SeedInfo.seed([96FC6F2D45B76809:DE018553DD164AB]:0)\n\tat java.security.AccessControlContext.checkPermission(AccessControlContext.java:472)\n\tat java.security.AccessController.checkPermission(AccessController.java:884)\n\tat java.lang.SecurityManager.checkPermission(SecurityManager.java:549)\n\tat java.lang.SecurityManager.checkWrite(SecurityManager.java:979)\n\tat sun.nio.fs.WindowsChannelFactory.open(WindowsChannelFactory.java:295)\n\tat sun.nio.fs.WindowsChannelFactory.newFileChannel(WindowsChannelFactory.java:162)\n\tat sun.nio.fs.WindowsFileSystemProvider.newByteChannel(WindowsFileSystemProvider.java:225)\n\tat java.nio.file.spi.FileSystemProvider.newOutputStream(FileSystemProvider.java:434)\n\tat org.apache.lucene.mockfile.FilterFileSystemProvider.newOutputStream(FilterFileSystemProvider.java:197)\n\tat org.apache.lucene.mockfile.FilterFileSystemProvider.newOutputStream(FilterFileSystemProvider.java:197)\n\tat org.apache.lucene.mockfile.HandleTrackingFS.newOutputStream(HandleTrackingFS.java:129)\n\tat org.apache.lucene.mockfile.HandleTrackingFS.newOutputStream(HandleTrackingFS.java:129)\n\tat org.apache.lucene.mockfile.FilterFileSystemProvider.newOutputStream(FilterFileSystemProvider.java:197)\n\tat org.apache.lucene.mockfile.FilterFileSystemProvider.newOutputStream(FilterFileSystemProvider.java:197)\n\tat java.nio.file.Files.newOutputStream(Files.java:216)\n\tat org.apache.lucene.store.FSDirectory$FSIndexOutput.<init>(FSDirectory.java:408)\n\tat org.apache.lucene.store.FSDirectory$FSIndexOutput.<init>(FSDirectory.java:404)\n\tat org.apache.lucene.store.FSDirectory.createOutput(FSDirectory.java:253)\n\tat org.apache.lucene.store.BaseDirectoryTestCase.testPendingDeletions(BaseDirectoryTestCase.java:1215)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1764)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:871)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:907)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:921)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:49)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:809)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:460)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:880)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:781)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:816)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:827)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:41)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:40)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:53)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:47)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:64)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:54)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:367)\n\tat java.lang.Thread.run(Thread.java:745)",
    "attachments": {
        "LUCENE-7333.patch": "https://issues.apache.org/jira/secure/attachment/12809561/LUCENE-7333.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15325279",
            "author": "Uwe Schindler",
            "date": "2016-06-10T21:05:37+0000",
            "content": "The problem in this test is that it creates a file using randomSimpleString(). It is not using the temp dir / temp file functions. Not so easy to solve. "
        },
        {
            "id": "comment-15325312",
            "author": "Uwe Schindler",
            "date": "2016-06-10T21:25:33+0000",
            "content": "The createTempDir functions work fine, because they retry on IOException. So its only this test. I will fix by adding a new TestUtil function to create a random filename instead of just randomSimpleString(): randomFileName() "
        },
        {
            "id": "comment-15325326",
            "author": "Uwe Schindler",
            "date": "2016-06-10T21:36:31+0000",
            "content": "Simple patch to fix this test only. I did not find any other places where a file name was created by randomSimpleString(). "
        },
        {
            "id": "comment-15325375",
            "author": "Uwe Schindler",
            "date": "2016-06-10T22:14:42+0000",
            "content": "More realistic variant. I think that's ready; will commit tomorrow morning. "
        },
        {
            "id": "comment-15325495",
            "author": "Michael McCandless",
            "date": "2016-06-10T23:28:11+0000",
            "content": "+1, thanks Uwe Schindler! "
        },
        {
            "id": "comment-15325793",
            "author": "ASF subversion and git services",
            "date": "2016-06-11T09:31:25+0000",
            "content": "Commit cc7cede7a58b4e1d0eaeb182998de69cad90c15a in lucene-solr's branch refs/heads/master from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cc7cede ]\n\nLUCENE-7333: Fix test bug where randomSimpleString() generated a filename that is a reserved device name on Windows "
        },
        {
            "id": "comment-15325794",
            "author": "ASF subversion and git services",
            "date": "2016-06-11T09:32:22+0000",
            "content": "Commit b9fb98d59ac8281edd59ea8ad937f7e33b2b98b6 in lucene-solr's branch refs/heads/branch_6x from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b9fb98d ]\n\nLUCENE-7333: Fix test bug where randomSimpleString() generated a filename that is a reserved device name on Windows "
        },
        {
            "id": "comment-15325795",
            "author": "ASF subversion and git services",
            "date": "2016-06-11T09:33:26+0000",
            "content": "Commit 79eb62eff311cf162a62062b0c4ce700e65284ab in lucene-solr's branch refs/heads/branch_6_1 from Uwe Schindler\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=79eb62e ]\n\nLUCENE-7333: Fix test bug where randomSimpleString() generated a filename that is a reserved device name on Windows "
        }
    ]
}