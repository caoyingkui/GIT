{
    "id": "LUCENE-6690",
    "title": "Speed up MultiTermsEnum.next()",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "OrdinalMap is very useful when computing top terms on a multi-index segment. However I've seen it being occasionally slow to build, which was either making facets (when the ordinals map is computed lazily) or reopen (when computed eagerly) slow. So out of curiosity, I tried to profile ordinal map building on a simple index: 10M random strings of length between 0 and 20 stored as a SORTED doc values field. The index has 19 segments. The bottleneck was MultiTermsEnum.next() (by far) due to lots of BytesRef comparisons (UTF8SortedAsUnicodeComparator).\n\nMultiTermsEnum stores sub enums in two different places:\n\n\ttop: a simple array containing all enums on the current term\n\tqueue: a queue for enums that are not exhausted yet but beyond the current term.\n\n\n\nA non-exhausted enum is in exactly one of these data-structures. When moving to the next term, MultiTermsEnum advances all enums in top, then adds them to queue and finally, pops all enum that are on the same term back into top.\n\nWe could save reorderings of the priority queue by not removing entries from the priority queue and then calling updateTop to advance enums which are on the current term. This is already what we do for disjunctions of doc IDs in DISIPriorityQueue.\n\nOn the index described above and current trunk, building an OrdinalMap has to call UTF8SortedAsUnicodeComparator.compare 80114820 times and runs in 1.9 s. With the change, it calls UTF8SortedAsUnicodeComparator.compare 36900694 times, BytesRef.equals 16297638 times and runs in 1.4s (~26% faster).",
    "attachments": {
        "OrdinalMapBuildBench.java": "https://issues.apache.org/jira/secure/attachment/12746126/OrdinalMapBuildBench.java",
        "LUCENE-6690.patch": "https://issues.apache.org/jira/secure/attachment/12746127/LUCENE-6690.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14633753",
            "author": "Adrien Grand",
            "date": "2015-07-20T16:11:11+0000",
            "content": "Here is the benchmark I've been using. It's certainly not great but I don't think it's too bad either.  "
        },
        {
            "id": "comment-14633757",
            "author": "Adrien Grand",
            "date": "2015-07-20T16:13:01+0000",
            "content": "And here is the patch. "
        },
        {
            "id": "comment-14633764",
            "author": "Uwe Schindler",
            "date": "2015-07-20T16:17:55+0000",
            "content": "Good idea!  "
        },
        {
            "id": "comment-14634897",
            "author": "Martijn van Groningen",
            "date": "2015-07-21T10:09:06+0000",
            "content": "+1 this looks great. I test it out on an index with a single doc values field with 100M unique values and 42 segments and the rebuilding time dropped from ~17000 ms to ~10800ms.   "
        },
        {
            "id": "comment-14636720",
            "author": "ASF subversion and git services",
            "date": "2015-07-22T11:03:10+0000",
            "content": "Commit 1692253 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1692253 ]\n\nLUCENE-6690: Speed up MultiTermsEnum.next(). "
        },
        {
            "id": "comment-14636745",
            "author": "ASF subversion and git services",
            "date": "2015-07-22T11:28:18+0000",
            "content": "Commit 1692255 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1692255 ]\n\nLUCENE-6690: Speed up MultiTermsEnum.next(). "
        },
        {
            "id": "comment-14636746",
            "author": "Adrien Grand",
            "date": "2015-07-22T11:29:36+0000",
            "content": "Thanks Martijn for confirming it sped up global ordinals loading in your case too! I just committed to trunk and 5.x. "
        },
        {
            "id": "comment-14713299",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:21+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}