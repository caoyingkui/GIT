{
    "id": "LUCENE-7347",
    "title": "Remove queryNorm and coords",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "These two features are specific to TF-IDF and introduce some complexity (see eg. handling of coords in BooleanWeight) and bugs/corner-cases (see eg. how taking the query norm into account causes scoring challenges on LUCENE-7337).\n\nSince we made BM25 the default in 6.0, I propose that we remove these TF-IDF-specific features in 7.0.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15339223",
            "author": "Michael McCandless",
            "date": "2016-06-20T09:23:58+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15339481",
            "author": "David Smiley",
            "date": "2016-06-20T13:27:31+0000",
            "content": "Is boolean coord really only applicable to TF-IDF?  It seems like a universal concept that isn't intrinsically tied to specific scoring formulas \u2013 i.e. I could extend any Similarity and override coord() to my liking.  I'd hate to see it go. "
        },
        {
            "id": "comment-15339551",
            "author": "Michael McCandless",
            "date": "2016-06-20T14:14:49+0000",
            "content": "No modern IR scoring models use coord anymore ... they simply have better term saturation such that zillions of occurrences of one term, by design, cannot alter the score as much as one occurrence of one of the other terms in the query.  This makes coord obsolete.\n\nI don't think Lucene should cling to archaic scoring models, especially when this clinging holds back important improvements, e.g. BooleanQuery could do more aggressive rewriting if its hands were not tied by coord. "
        },
        {
            "id": "comment-15339571",
            "author": "Adrien Grand",
            "date": "2016-06-20T14:21:55+0000",
            "content": "Coords might have some value indeed, but maybe they are not worth the maintenance cost anymore? Coords make the construction of scorers more tricky in BooleanWeight. One example is that if a disjunction produces a single non-null Scorer, you cannot return it directly today because of coords: it needs to be wrapped into a Scorer wrapper that will multiply the score by the coord factor. It is quite trappy that bugs mostly manifest themselves in corner cases such as searching for terms that are not indexed? Moreover, things become more complicated when you mix required and optional clauses (see BooleanTopLevelScorers), or when you want to optimize disjunctions for the case that a large range of documents is matched by a single clause. The latter is what caused the tricky scoring bug in LUCENE-7132: there was a bug in how BooleanScorer dealt with coords when using this optimization.\n\nGiven that TF-IDF is not the default Similarity anymore and that BM25, which I see as a better TF-IDF, does not need them, I think it is appealing to remove them so that we can make the code for boolean queries easier to read and less bug-prone. "
        },
        {
            "id": "comment-15339874",
            "author": "David Smiley",
            "date": "2016-06-20T16:42:40+0000",
            "content": "they simply have better term saturation such that zillions of occurrences of one term, by design, cannot alter the score as much as one occurrence of one of the other terms in the query. This makes coord obsolete.\n\nCan you please explain or refer me to further info?  Maybe I'm not with it today but I don't see the relationship between term saturation and coord.\n\nObviously if we remove features, it's easier to maintain the codebase and may make optimizations easier   That goes without saying. "
        },
        {
            "id": "comment-15340522",
            "author": "Michael McCandless",
            "date": "2016-06-20T22:11:35+0000",
            "content": "but I don't see the relationship between term saturation and coord.\n\nThe \"problem\" with TF/IDF is that if a single term out of the N terms in your boolean query occurs many times in a document, it drastically increases the score because its term saturation is \"weak\": sqrt(termFreq).  If the query is x OR y and a document has 1000 x's and 0 y's, TF/IDF gives it a great score, even though y never occurred.  And so coord tries to counteract that behavior.\n\nWhereas BM 25 has much stronger term saturation, controlled by its k1 parameter, such that a single term in your query occurring many times does not increase the score nearly as much as another term going from freq 0 to freq 1.  BM 25 naturally favors documents that had at least one occurrence of more of the requested query terms.  So a document with only like 5 x's and 1 y, or something, will naturally get a better score than the first document with 1000 x's and 0 y's. "
        },
        {
            "id": "comment-15341156",
            "author": "David Smiley",
            "date": "2016-06-21T05:48:08+0000",
            "content": "Ah, ok \u2013 thanks for that nice explanation.  On a 4.x project recently that had some high per-field boosts and minShouldMax allowing some terms to not match, I was finding the high per-field boosts would far exceed the default coord calculation (which is just a simple ratio, as you know).  Aside from reducing the boosts (which is a balancing act), I toyed with the idea of customizing the Similarity to give a huge penalty for each non-matching term. I didn't get around to it but now I wonder how BM25 would fair \u2013 wether the per-field boost is within the control of what 'k1' saturates, or wether there might be some other param.\n\nAny way, if you guys really think we're better off without coord then I'm not standing in your way.  Seems a shame to see it go, though. "
        },
        {
            "id": "comment-15372823",
            "author": "Adrien Grand",
            "date": "2016-07-12T12:45:14+0000",
            "content": "Both queryNorm and coords are now gone in master:\n\n\tdisjunctions just sum up the scores of their matching sub queries,\n\tboosts are applied as multiplicative factors to the scores.\n\n "
        }
    ]
}