{
    "id": "LUCENE-7491",
    "title": "Unexpected merge exception when merging sparse points fields",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.3",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Spinoff from this user thread: http://markmail.org/thread/vwdvjgupyz6heep5\n\nIf you have a segment that has points, but a given field (\"id\") didn't index points, and a later segment where field \"id\" does index points, when try to merge those segments we hit this (incorrect!) exception:\n\n\nCaused by: org.apache.lucene.index.MergePolicy$MergeException: java.lang.IllegalArgumentException: field=\"id\" did not index point values\n\tat __randomizedtesting.SeedInfo.seed([9F3E7B030EF482BD]:0)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:668)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:648)\nCaused by: java.lang.IllegalArgumentException: field=\"id\" did not index point values\n\tat org.apache.lucene.codecs.lucene60.Lucene60PointsReader.getBKDReader(Lucene60PointsReader.java:126)\n\tat org.apache.lucene.codecs.lucene60.Lucene60PointsReader.size(Lucene60PointsReader.java:224)\n\tat org.apache.lucene.codecs.lucene60.Lucene60PointsWriter.merge(Lucene60PointsWriter.java:169)\n\tat org.apache.lucene.index.SegmentMerger.mergePoints(SegmentMerger.java:173)\n\tat org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:122)\n\tat org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:4287)\n\tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:3864)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:588)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:626)",
    "attachments": {
        "LUCENE-7491.patch": "https://issues.apache.org/jira/secure/attachment/12832796/LUCENE-7491.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15567010",
            "author": "Michael McCandless",
            "date": "2016-10-11T23:57:35+0000",
            "content": "Patch w/ test case showing the issue ... I'll work on a fix next. "
        },
        {
            "id": "comment-15567920",
            "author": "Adrien Grand",
            "date": "2016-10-12T07:32:52+0000",
            "content": "To make things less trappy, I'm wondering that maybe LeafReader.getPointValues() should never return null. Otherwise the code gets into different branches depending on whether other fields index points or not. "
        },
        {
            "id": "comment-15568148",
            "author": "Michael McCandless",
            "date": "2016-10-12T09:15:44+0000",
            "content": "Patch w/ the fix ... the problem was that the merge logic was assuming just because one segment had points for a given field that all segments must have points for that field, which is clearly not the case! "
        },
        {
            "id": "comment-15568160",
            "author": "Michael McCandless",
            "date": "2016-10-12T09:20:43+0000",
            "content": "To make things less trappy, I'm wondering that maybe LeafReader.getPointValues() should never return null.\n\nWe could maybe separately consider that?  I don't think that would have prevented this particular bug.\n\nI'm generally not really a fan of returning fake empty \"should be null but caller can't be trusted\" objects though: I think it's a degree of API leniency that if you take it to its limit, never ends, i.e. how deeply do you keep returning null as you dig into the fake object?  These are quite expert APIs and I think it's reasonable to expect the caller to be careful with the return result...\n\nToday, a null return from LeafReader.getPointValues is meaningful: it notifies you this segment has no points indexed at all.  We would be hiding that information if instead we returned a fake empty object.\n\nNot helping matters, I do realize we are inconsistent here, e.g. LeafReader.fields() is not null even if there were no postings in that segment, yet Fields.terms(String field) is null if the postings didn't have that field. "
        },
        {
            "id": "comment-15568192",
            "author": "Adrien Grand",
            "date": "2016-10-12T09:31:16+0000",
            "content": "I'm generally not really a fan of returning fake empty \"should be null but caller can't be trusted\" objects though\n\nI don't disagree with this statement but I like the current situation even less. It makes things hard to test because of the branches it creates. Say you want to test the point range query on field foo, you need to test what happens when no fields have points, when foo has points and when foo does not have points but other fields from the same segment do. If you don't like returning non-null even when no fields have points, then maybe we should consider making points work per field like doc values, so instead of having LeafReader.getPointValues() and all methods of PointValues that take a String fieldName parameter, we could have LeafReader.getPointValues(String fieldName) and remove all String fieldName parameters from PointValues? "
        },
        {
            "id": "comment-15568327",
            "author": "Michael McCandless",
            "date": "2016-10-12T10:26:07+0000",
            "content": "we could have LeafReader.getPointValues(String fieldName) and remove all String fieldName parameters from PointValues?\n\nI think that's compelling!  Maybe open a new issue?\n\nBut would this API return null if that field did not index points in that segment? "
        },
        {
            "id": "comment-15568354",
            "author": "Adrien Grand",
            "date": "2016-10-12T10:38:02+0000",
            "content": "But would this API return null if that field did not index points in that segment?\n\nYes, like doc values? "
        },
        {
            "id": "comment-15568357",
            "author": "Michael McCandless",
            "date": "2016-10-12T10:40:22+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15568386",
            "author": "Adrien Grand",
            "date": "2016-10-12T10:53:11+0000",
            "content": "+1 to the patch "
        },
        {
            "id": "comment-15568648",
            "author": "ASF subversion and git services",
            "date": "2016-10-12T13:00:42+0000",
            "content": "Commit 1b7a88f61ea44ecc873d7c7d135ce5c6ab88bb0a in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1b7a88f ]\n\nLUCENE-7491: fix merge exception if the same field has points in some segments but not in others "
        },
        {
            "id": "comment-15568697",
            "author": "ASF subversion and git services",
            "date": "2016-10-12T13:23:41+0000",
            "content": "Commit 86b03358d59c584c89823e187b8806da48eb82af in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=86b0335 ]\n\nLUCENE-7491: fix merge exception if the same field has points in some segments but not in others "
        },
        {
            "id": "comment-15568767",
            "author": "Michael McCandless",
            "date": "2016-10-12T13:47:47+0000",
            "content": "Thanks Adrien Grand. "
        },
        {
            "id": "comment-15572057",
            "author": "ASF subversion and git services",
            "date": "2016-10-13T14:20:29+0000",
            "content": "Commit 1a0786332d16eaefde013a4e075658387a3ae382 in lucene-solr's branch refs/heads/branch_6x from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1a07863 ]\n\nLUCENE-7491: also allow for merging segment with points before one without points for a given field (thank you MockRandomMergePolicy!) "
        },
        {
            "id": "comment-15572059",
            "author": "ASF subversion and git services",
            "date": "2016-10-13T14:21:18+0000",
            "content": "Commit f4d3ca89802d06087780d7b7a1e7516c6b0f94c7 in lucene-solr's branch refs/heads/master from Mike McCandless\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f4d3ca8 ]\n\nLUCENE-7491: also allow for merging segment with points before one without points for a given field (thank you MockRandomMergePolicy!) "
        },
        {
            "id": "comment-15650203",
            "author": "Shalin Shekhar Mangar",
            "date": "2016-11-09T08:37:02+0000",
            "content": "Closing after 6.3.0 release. "
        }
    ]
}