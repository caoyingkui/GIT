{
    "id": "LUCENE-839",
    "title": "WildcardQuery do not find documents if leading and trailing * is used",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.9,                                            2.0.0,                                            2.1",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "I indexed a document which contains the word \"business\".\n\nIf i use query \"business\" then document will be found.\nIf i use query \"busines*\" then document will be found.\nIf i use query \"*usiness\" then document will be found.\nIf i use query \"*usines?\" then document will be found.\nIf i use query \"?usines?\" then document will be found.\n\nBut if i use query \"usines\" then document will not be found.\n\nif i use query \"usi*nes\" then document will be found.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-03-20T18:43:05+0000",
            "content": "I checked - all these queries do work correctly in Lucene trunk.\nThere were several related query parsing fixes recently, that might have fixed this. \nWhich Lucene version dd you try?\nAlso see Chriss  comment on LUCENE-838 and use some cautious with opening issues. ",
            "author": "Doron Cohen",
            "id": "comment-12482471"
        },
        {
            "date": "2007-03-20T19:29:22+0000",
            "content": "Working correctly in trunk.\n\nChecked by modifying TestWildcard.testParsingAndSearching() - added the word \"business\" to doc 0, and added the queries \n{ \"*usines*\", \"*usi*nes*\", \"*usiness\", \"*usines?\", \"?usines?\" }\n to matchOneDocWild[0], and verified that doc 0 is found for these added queries, as expected. ",
            "author": "Doron Cohen",
            "id": "comment-12482497"
        },
        {
            "date": "2007-03-21T08:27:32+0000",
            "content": "I use release 2.1.0.\n\nHere is an example to demonstrate the problem:\n\npublic class WildcardTest\n{\n\n    public static void main(String[] args) throws Exception\n    {\n        Analyzer analyzer = new StandardAnalyzer();\n\n        RAMDirectory indexStore = getIndexStore(\"fulltext\", new String[]\n{\"Forschungsgebiet\", \"business\"}\n, analyzer);\n\n        IndexSearcher searcher = new IndexSearcher(indexStore);\n\n        QueryParser parser = new QueryParser( \"fulltext\", analyzer );\n        parser.setAllowLeadingWildcard(true);\n        Query query1 = parser.parse(\"fulltext:usines\");\n        Query query2 = parser.parse(\"fulltext:*usines?\");\n\n\n        Hits result = searcher.search(query1);\n        System.out.println( \"Query '\" + query1.toString() + \"' found: \" + result.length() + \" documents !\");\n\n        result = searcher.search(query2);\n        System.out.println( \"Query '\" + query2.toString() + \"' found: \" + result.length() + \" documents !\");\n\n\n        searcher.close();\n        indexStore.close();\n    }\n\n    private static RAMDirectory getIndexStore(String field, String[] contents, Analyzer p_Analyzer)\n    throws IOException\n    {\n        RAMDirectory indexStore = new RAMDirectory();\n        IndexWriter writer = new IndexWriter(indexStore, p_Analyzer, true);\n        for (int i = 0; i < contents.length; ++i)\n        {\n            Document doc = new Document();\n            doc.add(new Field(field, contents[i], Field.Store.YES, Field.Index.TOKENIZED));\n            writer.addDocument(doc);\n        }\n        writer.optimize();\n        writer.close();\n\n        return indexStore;\n    }\n}\n\nOutput:\nQuery 'fulltext:usines' found: 0 documents !\nQuery 'fulltext:*usines?' found: 1 documents !\n\n\n\n\n\n\n ",
            "author": "Michael Schlegel",
            "id": "comment-12482671"
        },
        {
            "date": "2007-03-21T16:46:40+0000",
            "content": "Michael, \n\nThis problem was already fixed since 2.1.0.\n\n\n\t* *\n\n\n\nIn general, when you see such a problem, or any problem, the best way is to first search the mailing lists, user list first, and then dev list. \nFor this specific problem, you could search for something like:\n   wildcard leading trailing\nIn the user list you would have immediately found the discussion thread that reported this issue: http://www.mail-archive.com/search?l=java-user@lucene.apache.org&q=wildcard+leading+trailing\n\n\n\t* *\n\n\n\n.... so, for details on this fix see LUCENE-813 (\"leading wildcard's don't work with trailing wildcard\").\n\nTo get this fix you have three options:\n\n1. Wait for the next official release, it would include this fix, along with other fixes.\n\n2. Download the source of 2.1.0, download the recent patch from LUCENE-813, apply that patch to the source, rebuild your local copy of Lucene, that would now be 2.1.0 + this fix. \nRisk with this approach is that you cannot always be sure that a certain one fix will apply cleanly to a base release without needing to first apply previous fixes.\n\n3. Download and use the most updated nightly built version of Lucene. \nRisk with this approach is that nightly builds are not as stable as official releases and might contain temporary code, temporary API, bugs (temporary ) , etc.\n\n4. Download most recent source and build Lucene on your own. \nSame risk as in (3).\n\nOnce you get the fix in one of the above methods you should be able to see that your code actually is working.\n\n\n\t* *\n\n ",
            "author": "Doron Cohen",
            "id": "comment-12482829"
        },
        {
            "date": "2007-03-21T17:10:52+0000",
            "content": "Was fixed by LUCENE-813. ",
            "author": "Doron Cohen",
            "id": "comment-12482835"
        }
    ]
}