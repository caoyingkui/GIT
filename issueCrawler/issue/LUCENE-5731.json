{
    "id": "LUCENE-5731",
    "title": "split direct packed ints from in-ram ones",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.9",
            "6.0"
        ]
    },
    "description": "Currently there is an oversharing problem in packedints that imposes too many requirements on improving it:\n\n\tevery packed ints must be able to be loaded directly, or in ram, or iterated with.\n\tthings like filepointers are expected to be adjusted (this is especially stupid) in all cases\n\tlots of unnecessary abstractions\n\tversioning etc is complex\n\n\n\nNone of this flexibility is needed or buys us anything, and it prevents performance improvements (e.g. i just want to add 3 bytes at the end of on-disk streams to reduce the number of bytebuffer calls and thats seriously impossible with the current situation).",
    "attachments": {
        "LUCENE-5731.patch": "https://issues.apache.org/jira/secure/attachment/12648278/LUCENE-5731.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14017193",
            "author": "Robert Muir",
            "content": "Related: the in-ram stuff is also complex, and has tons of generated code.\n\nFor the postings lists mike and I experimented with a much simpler approach here: https://github.com/rmuir/lucene-solr/tree/packypack\n\nIt gives speedups (especially for positions with higher bpv), with 800 lines of total code (https://github.com/rmuir/lucene-solr/blob/packypack/lucene/core/src/java/org/apache/lucene/util/lightpacked/SimplePackedInts.java)  versus the huge size bloat we have today. So I think the in-ram stuff can use a touchup as well, but we dont need to tackle that here. ",
            "date": "2014-06-03T21:50:41+0000"
        },
        {
            "id": "comment-14017401",
            "author": "Robert Muir",
            "content": "Attached is a patch:\n\n\tadded new DirectWriter, DirectReader. They support > 2B values and don't have concepts like 'acceptableOverhead', instead its just simple and ensures every bpv is fast.\n\tadded RandomAccessInput api (default -> seek+read), with optimized impl for mmap.\n\tAdded 3 byte padding to the end of every DirectWriter stream, all decoding is one i/o operation.\n\tDirectReader enforces its use\n\tAdded new Lucene49DocValuesFormat using this stuff.\n\n\n\nAcross every bitsPerValue i see consistent performance gains, usually 50-75% from trunk today. ",
            "date": "2014-06-04T05:56:40+0000"
        },
        {
            "id": "comment-14017405",
            "author": "Robert Muir",
            "content": "just some bugfixes to the mmap stuff. I need to add dedicated tests for those tomorrow. ",
            "date": "2014-06-04T06:02:16+0000"
        },
        {
            "id": "comment-14017446",
            "author": "Adrien Grand",
            "content": "+1 I like the new directory API and how direct packed ints use it. One minor note: the javadoc of Lucene49Codec refers to the lucene46 package instead of lucene49. ",
            "date": "2014-06-04T07:21:38+0000"
        },
        {
            "id": "comment-14017639",
            "author": "Michael McCandless",
            "content": "+1, this looks really nice. ",
            "date": "2014-06-04T12:07:20+0000"
        },
        {
            "id": "comment-14017968",
            "author": "ASF subversion and git services",
            "content": "Commit 1600412 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1600412 ]\n\nLUCENE-5731: split out direct packed ints from in-ram ones ",
            "date": "2014-06-04T18:26:05+0000"
        },
        {
            "id": "comment-14018007",
            "author": "ASF subversion and git services",
            "content": "Commit 1600423 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1600423 ]\n\nLUCENE-5731: split out direct packed ints from in-ram ones ",
            "date": "2014-06-04T18:53:53+0000"
        },
        {
            "id": "comment-14018025",
            "author": "Uwe Schindler",
            "content": "Thanks Robert. I was very busy today, so I had no time to look into it. But from my first check it looks like our idea from the talk yesterday  I was afraid to propose to implement this using an interface, thanks for doing it that way. Otherwise we would have crazyness in ByteBufferIndexInput. The interface hidden behind the randomAccessSlice() method just returning \"slice()\" is wonderful.\n\n\n@Override\npublic RandomAccessInput randomAccessSlice(long offset, long length) throws IOException {\n  // note: technically we could even avoid the clone...\n  return slice(null, offset, length);\n}\n\n\n\nWe can avoid the clone not in all cases, because we must duplicate the ByteBuffer, if the offset is different. But for the simple case, if you request the full IndexInput as slice (means offset==0L, length==this.length), we could return \"this\".\n\nEDIT: we cannot do this at the moment, because in the multi-mmap case, we change the bytebuffers's position. So we always have to clone (otherwise the random access slice would have side effects on file position of master slice). ",
            "date": "2014-06-04T19:06:44+0000"
        }
    ]
}