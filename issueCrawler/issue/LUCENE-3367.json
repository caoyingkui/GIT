{
    "id": "LUCENE-3367",
    "title": "GroupQueryNodeProcessor doesn't recursively process children of custom query nodes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/queryparser"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.3",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In some situations I found that boolean queries weren't using the default operator.  I have tracked this issue down to GroupQueryNodeProcessor, which does not appear to be recursing into the tree.\n\nI have two unit tests.  The first one has just the boolean query, the second one has a custom query node wrapped around it.  In the second case, the default operator logic is not applied to the boolean query.\n\n\n    @Test\n    public void testDefaultOperator() throws Exception\n    {\n        QueryNode node = new GroupQueryNode(new BooleanQueryNode(Arrays.<QueryNode>asList(\n            new FieldQueryNode(\"text\", \"a\", 1, 1),\n            new FieldQueryNode(\"text\", \"b\", 3, 3)\n        )));\n\n        GroupQueryNodeProcessor processor = new GroupQueryNodeProcessor();\n        QueryConfigHandler config = new StandardQueryConfigHandler();\n        config.addAttribute(DefaultOperatorAttribute.class).setOperator(DefaultOperatorAttribute.Operator.AND);\n        processor.setQueryConfigHandler(config);\n\n        QueryNode actualNode = processor.process(node);\n\n        QueryNode expectedNode = new BooleanQueryNode(Arrays.<QueryNode>asList(\n            new BooleanModifierNode(new FieldQueryNode(\"text\", \"a\", 1, 1), ModifierQueryNode.Modifier.MOD_REQ),\n            new BooleanModifierNode(new FieldQueryNode(\"text\", \"b\", 3, 3), ModifierQueryNode.Modifier.MOD_REQ)\n        ));\n\n        assertEquals(\"Wrong node after processing\", expectedNode.toString(), actualNode.toString());\n    }\n\n    @Test\n    public void testDefaultOperatorInsideCustomNode() throws Exception\n    {\n        QueryNode node = new CustomQueryNode(Arrays.<QueryNode>asList(new GroupQueryNode(new BooleanQueryNode(Arrays.<QueryNode>asList(\n            new FieldQueryNode(\"text\", \"a\", 1, 1),\n            new FieldQueryNode(\"text\", \"b\", 3, 3)\n        )))));\n\n        GroupQueryNodeProcessor processor = new GroupQueryNodeProcessor();\n        QueryConfigHandler config = new StandardQueryConfigHandler();\n        config.addAttribute(DefaultOperatorAttribute.class).setOperator(DefaultOperatorAttribute.Operator.AND);\n        processor.setQueryConfigHandler(config);\n\n        QueryNode actualNode = processor.process(node);\n\n        QueryNode expectedNode = new CustomQueryNode(Arrays.<QueryNode>asList(new GroupQueryNode(new BooleanQueryNode(Arrays.<QueryNode>asList(\n            new BooleanModifierNode(new FieldQueryNode(\"text\", \"a\", 1, 1), ModifierQueryNode.Modifier.MOD_REQ),\n            new BooleanModifierNode(new FieldQueryNode(\"text\", \"b\", 3, 3), ModifierQueryNode.Modifier.MOD_REQ)\n        )))));\n\n        assertEquals(\"Wrong node after processing\", expectedNode.toString(), actualNode.toString());\n    }\n\n\n    public static class CustomQueryNode extends QueryNodeImpl\n    {\n        private CustomQueryNode(List<QueryNode> children)\n        {\n            setLeaf(false);\n            allocate();\n            set(children);\n        }\n\n        @Override\n        public CharSequence toQueryString(EscapeQuerySyntax escaper)\n        {\n            StringBuilder builder = new StringBuilder(100);\n            builder.append(\"custom(\");\n            String separator = \"\";\n            for (QueryNode child : getChildren())\n            {\n                builder.append(separator);\n                builder.append(child.toQueryString(escaper));\n                separator = \",\";\n            }\n            builder.append(')');\n            return builder.toString();\n        }\n\n        @Override\n        public String toString()\n        {\n            StringBuilder builder = new StringBuilder(100);\n            builder.append(\"<custom>\\n\");\n            for (QueryNode child : getChildren())\n            {\n                builder.append(child).append('\\n');\n            }\n            builder.append(\"\\n</custom>\");\n            return builder.toString();\n        }\n    }",
    "attachments": {},
    "issue_links": {},
    "comments": []
}