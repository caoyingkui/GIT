{
    "id": "SOLR-1071",
    "title": "spellcheck.extendedResults returns an invalid JSON response when count > 1",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "When: wt=json & spellcheck.extendedResults=true & spellcheck.count > 1, the suggestions are returned in the following format:\n\n\"suggestions\":[\n\t\"amsterdm\",{\n\t \"numFound\":5,\n\t \"startOffset\":0,\n\t \"endOffset\":8,\n\t \"origFreq\":0,\n\t \"suggestion\":\n{\n\t  \"frequency\":8498,\n\t  \"word\":\"amsterdam\"}\n,\n\t \"suggestion\":\n{\n\t  \"frequency\":1,\n\t  \"word\":\"amsterd\"}\n,\n\t \"suggestion\":\n{\n\t  \"frequency\":8,\n\t  \"word\":\"amsterdams\"}\n,\n\t \"suggestion\":\n{\n\t  \"frequency\":1,\n\t  \"word\":\"amstedam\"}\n,\n\t \"suggestion\":{\n\t  \"frequency\":22,\n\t  \"word\":\"amsterdamse\"}},\n\t\"beak\",{\n\t \"numFound\":5,\n\t \"startOffset\":9,\n\t \"endOffset\":13,\n\t \"origFreq\":0,\n\t \"suggestion\":\n{\n\t  \"frequency\":379,\n\t  \"word\":\"beek\"}\n,\n\t \"suggestion\":\n{\n\t  \"frequency\":26,\n\t  \"word\":\"beau\"}\n,\n\t \"suggestion\":\n{\n\t  \"frequency\":26,\n\t  \"word\":\"baak\"}\n,\n\t \"suggestion\":\n{\n\t  \"frequency\":15,\n\t  \"word\":\"teak\"}\n,\n\t \"suggestion\":{\n\t  \"frequency\":11,\n\t  \"word\":\"beuk\"}},\n\t\"correctlySpelled\",false,\n\t\"collation\",\"amsterdam beek\"]}}\n\nThis is an invalid json as each term is associated with a JSON object which holds multiple \"suggestion\" attributes. When working with a JSON library only the last \"suggestion\" attribute is picked up.",
    "attachments": {
        "SOLR-1071.patch": "https://issues.apache.org/jira/secure/attachment/12418857/SOLR-1071.patch",
        "SpellCheckComponent_new_structure_incl_test.patch": "https://issues.apache.org/jira/secure/attachment/12406123/SpellCheckComponent_new_structure_incl_test.patch",
        "SpellCheckComponent_fix.patch": "https://issues.apache.org/jira/secure/attachment/12404273/SpellCheckComponent_fix.patch",
        "SpellCheckComponent_new_structure.patch": "https://issues.apache.org/jira/secure/attachment/12404274/SpellCheckComponent_new_structure.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-12694196",
            "date": "2009-03-31T18:03:39+0000",
            "content": "I don't know much about JSON, but it is my understanding that it is all generated from the NamedList, so I'm not sure what the solution would be. "
        },
        {
            "author": "Donovan Jimenez",
            "id": "comment-12694199",
            "date": "2009-03-31T18:09:49+0000",
            "content": "the JSON response writer has a specific parameter for this case: json.nl\n\nIt allows the the user to specify how they want named lists (which don't necessarily have unique keys suited to a JSON object map) to be treated. The values are listed in the wiki documentation:\n\nhttp://wiki.apache.org/solr/SolJSON\n\nI believe it affects the treatment of all named lists in the response, so if you're using facets or the like, they'd also be affected. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12694246",
            "date": "2009-03-31T20:20:00+0000",
            "content": "Uri, does that solve your problem? "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12694295",
            "date": "2009-03-31T21:52:04+0000",
            "content": "OK, so I checked it out and no, setting the json.nl parameter doesn't help in this case. I looked it up and the problem lays in the fact that the suggestions data structure is SimpleOrderedMap. SimpleOrderedMap structure are always renderer by the JsonResponseWriter as a map and are not influenced by the json.nl parameter. There are two possible solutions here as I see it:\n\n1. A simple fix that would just replace the current SimpleOrderedMap with an ordinary NamedList (see SpecllCheckComponent_fix.patch)\n   Advantages: More backward compatible\n   Disadvantages: you still need to use the json.nl parameter in order to get it to work (and the this parameter influences the complete response structure, not just the spellcheck output)\n\n\n2. A small change to the response data structure that will put all the suggestion items as an array value of one field named \"suggestionItems\" (see SpellCheckComponent_new_structure.patch)\n   Advantages: A proper and intuitive structure for the response\n   Disadvantages: probably less backward compatible as the first solution\n\n(NOTE: patches applied on the trunk version) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12694707",
            "date": "2009-04-01T19:54:32+0000",
            "content": "2. A small change to the response data structure that will put all the suggestion items as an array value of one field named \"suggestionItems\" \n\n+1... how about \"suggestions\" for the tag though.\n "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12694710",
            "date": "2009-04-01T20:07:25+0000",
            "content": "At first I tagged it \"suggestions\" but then I thought it might be confusing having two such tags on different levels "
        },
        {
            "author": "Donovan Jimenez",
            "id": "comment-12694727",
            "date": "2009-04-01T20:42:23+0000",
            "content": "Some other response writers, like Serialized PHP for example, always output an object or keyed array for named lists. Do they need to implement similar parameters as the JSON writer? Or, like the direction you seem to be going here, should all response structures avoid the use of named lists with repeating element names?\n\nThis seems, at least to me, like a more general issue of convention and guidelines in the search components. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12694745",
            "date": "2009-04-01T21:09:06+0000",
            "content": "At first I tagged it \"suggestions\" but then I thought it might be confusing having two such tags on different levels \n\ngood point - I hadn't noticed it was the same as the top level tag.\nWe could use a different word altogether... say \"words\", \"terms\", \"replacements\", \"alternatives\",\"corrections\"? "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12694763",
            "date": "2009-04-01T21:41:52+0000",
            "content": "I think \"alternatives\" and \"corrections\" are best candidate semantically speaking. Personally, I like \"alternatives\" the most but \"corrections\" is good as well. "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12701490",
            "date": "2009-04-22T11:29:20+0000",
            "content": "Changed \"items\" to \"alternatives\" and updated the SpellCheckComponentTest class accordingly. "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12701492",
            "date": "2009-04-22T11:35:45+0000",
            "content": "One more thing to consider: now this component is a bit inconsistent with its response format. When extendedResults is used, the suggestions are put in an array called \"alternatives\", while when it's not used the suggestions are put in an array called \"suggestion\". I think it will be wise to consider changing the later to \"alternatives\" as well, but of course it will break backward compatibility and as this component is probably widely used it's a risk. Another option is at least temporary for 1.4 release add support for another parameter (something like, spellcheck.version=1.3) that will then signal the component to render the response in the 1.3 format - a bit ugly, but it will at least solve the compatibility issues. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12735749",
            "date": "2009-07-27T20:09:43+0000",
            "content": "When extendedResults is used, the suggestions are put in an array called \"alternatives\", while when it's not used the suggestions are put in an array called \"suggestion\".\n\nI debated the two different structures for a while and ultimately decided that people would have to deal with it no matter what.  My suspicion was that people either use extendedResults or not and that they don't mix them, but perhaps I was wrong.  Even if they do mix them, they still need code for recognizing when there is a difference (unless they are just spitting back out the raw, which means it doesn't matter anyway), so I don't know if it matters either way.  Since this is out in the wild already, I think we should just fix the bug.   "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12735751",
            "date": "2009-07-27T20:15:20+0000",
            "content": "One thought, though:\n\nWhy isn't this a JSONResponseWriter bug?  It seems to me that the code is using valid Solr data structures and that the problem lies in the fact that the JSONRW is not creating valid JSON output.  Say we fix this here in the SCC, it doesn't stop anyone from doing it anywhere else, which will just lead to more bugs later. "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12735856",
            "date": "2009-07-28T00:36:48+0000",
            "content": "I debated the two different structures for a while and ultimately decided that people would have to deal with it no matter what. My suspicion was that people either use extendedResults or not and that they don't mix them, but perhaps I was wrong. Even if they do mix them, they still need code for recognizing when there is a difference (unless they are just spitting back out the raw, which means it doesn't matter anyway), so I don't know if it matters either way. Since this is out in the wild already, I think we should just fix the bug. \n\nI guess you're right - the users will have to handle the differences between the results anyway "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12735859",
            "date": "2009-07-28T00:37:34+0000",
            "content": "I'm not sure it's a bug in the JSONRW, it seems to me that it was intentionally implemented to behave in this manner. It is confusing though, and indeed when developing components one has to keep in mind the consequences of using a SimpleOrderedMap vs. a simple NamedList. \n\nI think there are several ways to tackle this:\n\n1. Do nothing. In which case people should always know the consequences of using a SimpleOrderedMap vs. a simple NamedList. \nAdvantages: you probably don't break existing functionality. No code changes need to take place.\nDisadvantages: (as you mentioned) more error prone - easier to introduce such bugs when writing new components. People need to know the best practices which are not enforced.\n\n2. In the SimpleOrderedMap, keep track of duplicate keys. If a SimpleOrderedMap hold duplicate keys then it should not be rendered as a JSON object, but more like a normal NamedList\nAdvantages: you probably break nothing.. if components already use duplicate keys in a SimpleOrderedMap then most probably they've introduced this same bug.\nDisadvantage: Inconsistent in the sense that in different occasions a SimpleOrderedMap will be rendered differently. If duplicate keys are added, then there's no added value in choosing SimpleOrderedMap over a normal NamedList. Which brings me to the last option\n\n3. Make sure that SimpleOrderedMap does not accept duplicates. Either by enforcing it (e.g. by throwing an exception) or just by overriding the values.\nAdvantages: Gives the SimpleOrderedMap a true meaning and a reason to exist. With this in place, it will be clear when and how it can be used. No changes need to be applied to the JSONRW.\nDisadvantages: Existing functionality might break, yet again... if duplicate keys are already used than this bug is introduced anyway. According to the Javadoc, the SimpleOrderedMap implementation intentionality doesn't prevent duplicate keys... so there must be a reason for that.\n\nPersonally, I'm for option 3. The current implementation of SimpleOrderedMap doesn't seem to add any functionality to the NamedList class, so it seems to me this class was created just as a hint for the response writers to render it differently. The name \"SimpleOrderedMap\" also suggest a \"Map-like\" functionality which doesn't support duplicate keys. But again, I'm not sure about the original reasons for not preventing duplicate keys in the first place, so there might be something I'm missing here. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12740965",
            "date": "2009-08-08T21:04:11+0000",
            "content": "Why isn't this a JSONResponseWriter bug?\n\nJSON does not require unique keys.  It's certainly a good idea though.\n\nDonovan had it right:\nThis seems, at least to me, like a more general issue of convention and guidelines in the search components.\n\nIt's a bad idea to repeat keys... this isn't XML.  When access-by-key is more important, use SimpleOrderedMap... when position must be maintained, use NamedList.  In both cases, we should strive not to repeat keys.\n\nHere is what the current output is for non-extendedResults:\n\n <lst name=\"suggestions\">\n  <lst name=\"hell\">\n\t<int name=\"numFound\">2</int>\n\t<int name=\"startOffset\">0</int>\n\t<int name=\"endOffset\">4</int>\n\t<arr name=\"suggestion\">\n\t <str>dell</str>\n\t <str>all</str>\n\t</arr>\n  </lst>\n </lst>\n\n\n\nThe logical extension for extended results would be to simply replace each string in the array with a map.\n\n\n  <lst name=\"hell\">\n\t<int name=\"numFound\">2</int>\n\t<int name=\"startOffset\">0</int>\n\t<int name=\"endOffset\">4</int>\n\t<int name=\"origFreq\">0</int>\n        <arr name=\"suggestion\">\n           <lst>\n\t\t <int name=\"frequency\">1</int>\n  \t         <str name=\"word\">dell</str>\n           </lst>\n           <lst>\n\t         <int name=\"frequency\">1</int>\n\t         <str name=\"word\">all</str>\n           </lst>\n\t</arr>\n  </lst>\n\n\n\nIf extended results only ever added frequency, we could further simplify to have the suggest be the key and the freq be the val, but I don't know that we wouldn't want to add more metadata in the future.\n\n\n\n\n "
        },
        {
            "author": "Stephen Day",
            "id": "comment-12750606",
            "date": "2009-09-02T18:43:33+0000",
            "content": "Why did this ever change to begin with? From the wiki, there is a clear definition of how it originally worked, that was compatible with the JSON Writer:\n\nhttp://wiki.apache.org/solr/SpellCheckComponent\n\nThe current format is obnoxiously verbose, even for XML. "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12750659",
            "date": "2009-09-02T20:51:26+0000",
            "content": "Because there are issues with the current format is json (and perhaps also in other formats)... see comments above "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12752268",
            "date": "2009-09-07T21:45:00+0000",
            "content": "I'm moving forward with the most straightforward fix... the string becomes a map for extended results.  So\n<str>dell</str> in non extended results becomes the following in extended results:\n<lst>  <str name=\"word\">dell</str> <int name=\"freq\">1</int> </lst>\n\nSo voice your objections now \n\nActually, the code to do the change is already done... the hard part is the tests... and there seems to be no unit tests for the SolrJ part that actually test the Suggestion class. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12752282",
            "date": "2009-09-07T23:05:56+0000",
            "content": "Attaching patch.\n\nHere is some example JSON output:\n\n \"spellcheck\":{\n  \"suggestions\":[\n\t\"hell\",{\n\t \"numFound\":2,\n\t \"startOffset\":0,\n\t \"endOffset\":4,\n\t \"origFreq\":0,\n\t \"suggestion\":[{\n\t\t\"word\":\"dell\",\n\t\t\"freq\":4},\n\t  {\n\t\t\"word\":\"all\",\n\t\t\"freq\":4}]},\n\t\"correctlySpelled\",false]}}\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12752285",
            "date": "2009-09-07T23:13:19+0000",
            "content": "I haven't changed the SolrJ SpellCheckResponse class, but it does look like the naming could be improved.\n\nExample:\n  response.getSuggestions().get(0).getSuggestions().get(0); "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12752417",
            "date": "2009-09-08T09:58:49+0000",
            "content": "Looks good! \n\nAs for the naming, I really like your suggestion (in one of the comments above) to replace \"suggestion\" with \"alternatives\". So the client code can look something like:\n\n\nresponse.getSuggestions().get(\"hell\").getAlternatives().get(0);\n\n\n\nOne more thing - I think it will be more intuitive to use a SimpleOrderedMap instead of a NamedList for the \"suggestions\" node. for the xml response it won't make much difference I guess, but for the json one it will be more intuitive and easier to work with. So to take your example above, you'd get something like:\n\n\n\"spellcheck\": {\n    \"suggestions\": {\n        \"hell\":{\n            \"numFound\":2,\n            \"startOffset\":0,\n            \"endOffset\":4,\n            \"origFreq\":0,\n            \"alternatives\":[\n                {\n                    \"word\":\"dell\",\n                    \"freq\":4\n                },\n                {\n                    \"word\":\"all\",\n                    \"freq\":4\n                }\n            ]\n        },\n        \"correctlySpelled\":false}}}\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12752423",
            "date": "2009-09-08T10:24:37+0000",
            "content": "Thanks for the review Uri!\n\nOne more thing - I think it will be more intuitive to use a SimpleOrderedMap instead of a NamedList for the \"suggestions\" node.\n\nIt already does... it's just the client code that checks for NamedList (the parent of SimpleOrderedMap) "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12752448",
            "date": "2009-09-08T11:18:03+0000",
            "content": "It already does... it's just the client code that checks for NamedList (the parent of SimpleOrderedMap)\n\nNo... sorry, I mean the top most \"suggestions\" node. line 182 in the patched class. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12752449",
            "date": "2009-09-08T11:36:15+0000",
            "content": "I mean the top most \"suggestions\" node.\nOh I see - I wasn't sure about that one... I guess it depends on how important order is in the top-level suggestions list?  It would break back compat for the non-extended results too (for JSON and friends). "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12752472",
            "date": "2009-09-08T12:34:43+0000",
            "content": "I guess it depends on how important order is in the top-level suggestions list?\n\nI guess the order is not that important, it's just that using a SimpleOrderedMap will output a more intuitive JSON output to work with IMO.\n\nIt would break back compat for the non-extended results too (for JSON and friends).\n\nTrue... I didn't think about that one. hmm... well... I guess you can keep it as is then. I mean, it's not like you cannot work with the current format after all  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12752793",
            "date": "2009-09-08T22:27:09+0000",
            "content": "Committed!  The Solr release schedule is tight enough, I'll update the wiki docs during the Solr code freeze (unless someone beats me to it). "
        },
        {
            "author": "Uri Boness",
            "id": "comment-12752841",
            "date": "2009-09-09T00:37:51+0000",
            "content": "cool! thanks for the effort Yonik. I've updated the wiki so you can focus on the release  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775475",
            "date": "2009-11-10T15:50:35+0000",
            "content": "Bulk close Solr 1.4 issues "
        }
    ]
}