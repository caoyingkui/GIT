{
    "id": "SOLR-9646",
    "title": "Error reporting & upgrade Doc could be much more helpful",
    "details": {
        "components": [
            "Server",
            "SolrJ"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.3",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Our Solr interface was originally built with Solr 4.10, and included some additional schema fields and some minor configuration updates (default of 10 rows returned is too small for us, and we're doing all communication with JSON).  This configuration works well with all versions through 6.2.1 (after updating our custom ClassLoader to work around SOLR-9231).  However... when trying to run with a 6.3.0 snapshot... we get errors which are far from easy to decipher.\n\n1) tons of warnings about deprecated 5.2 emulation - after some digging, traced these to our failing to update luceneMatchVersion in solrconfig.xml\n>>  The warning should, at a minimum, point to the luceneMatchVersion setting - current log entry is:\n2016-10-14 17:13:36.131 WARN  (coreLoadExecutor-6-thread-1) [   ] o.a.s.s.FieldTypePluginLoader TokenizerFactory is using deprecated 5.2.0 emulation. You should at some point declare and reindex to at least 6.0, because 5.x emulation is deprecated and will be removed in 7.0\n\n2) [seen before updating luceneMatchVersion]\n2016-10-14 17:31:15.978 ERROR (qtp2080166188-15) [   x:issues-1] o.a.s.h.RequestHandlerBase org.apache.solr.common.SolrException: Exception writing document id \n{some document name}\n to the index; possible analysis error.\n\tat org.apache.solr.update.DirectUpdateHandler2.addDoc(DirectUpdateHandler2.java:178)\n\tat org.apache.solr.update.processor.RunUpdateProcessor.processAdd(RunUpdateProcessorFactory.java:67)\n.....\n =====  I assume that this is something triggered by a change in 6.3, but it would be nice to have more of a clue about what it's complaining about\n\n3) [after updating luceneMatchVersion to 6.2.0]\n2016-10-14 18:20:02.847 ERROR (qtp2080166188-16) [   x:issues-1] o.a.s.h.RequestHandlerBase java.lang.UnsupportedOperationException: This format can only be used for reading\n\tat org.apache.lucene.codecs.lucene53.Lucene53NormsFormat.normsConsumer(Lucene53NormsFormat.java:77)\n\tat org.apache.lucene.index.DefaultIndexingChain.writeNorms(DefaultIndexingChain.java:266)\n\tat org.apache.lucene.index.DefaultIndexingChain.flush(DefaultIndexingChain.java:95)\n\tat org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:443)\n.....\n==== what format is this referring to?  why is lucene53 in play? is there another setting I need to update?  If this is a configuration problem on my end, it would be more than nice to have some pointers here",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-10-14T20:36:07+0000",
            "author": "Shawn Heisey",
            "content": "Please use the mailing list for discussion of problems before coming to Jira, or join the #solr IRC channel on freenode.  We intend this tracker for bugs, enhancement requests, and development tasks that have been confirmed and discussed, so they are well-focused and well-documented.  Jira is not the first step for support requests.\n\nOn the mailing list or IRC channel, we could have at least informed you that this requires at least two, and possibly three separate issues:\n\n\tEnhancing the log message about deprecated version emulation so that it correctly mentions luceneMatchVersion.\n\tFiguring out why updating the version emulation to 6.2 caused an error message related to the 5.3 codec.\n\t\n\t\tThis looks like it might be a bug.  You're running a development version, where bugs are relatively common.  If this IS a bug, it would typically be detected and fixed before release.\n\t\tMy initial guess is that you have at least one index segment that was written by the 5.3 version, and the newer version is having some trouble dealing with that fact.  It should be able to handle a 5.x index segment.\n\t\tluceneMatchVersion is not intended to influence the on-disk index format.  That should always be dependent on the actual version of the software.\n\t\tIf you have multiple versions of Lucene/Solr jars on your classpath, it MIGHT explain this problem.\n\t\n\t\n\tFiguring out why you got \"Exception writing document id XXX\".\n\n\n\nBefore creating additional issues or going any further on this one, please use the mailing list or IRC channel.  The mailing list has a VERY large audience.\n\nWhen an error occurs, we need the full error from the log, all sections of the stacktrace that go with it, and the version of Solr.  With development versions, the version info needs to be EXTREMELY precise \u2013 including the branch name, the git hash, and a complete description of any manual code changes that are in place.  Without that information, errors are very difficult to track down. ",
            "id": "comment-15576407"
        },
        {
            "date": "2016-10-14T21:08:49+0000",
            "author": "Tim Parker",
            "content": "I'll get over to the list for more specifics of the problems - My intent here was the enhancement request for better logging - clearly some of the issues I'm seeing are related to this being a development build and will be resolved before 6.3 goes gold, and I don't expect this to serve as adequate reporting for the specifics of each of these.  The point here is that the information here is too minimal for me to even guess whether the problems relate to my configuration or some sort of coding problem that I shouldn't worry about due to the pre-release state of the build.\n\n[by the way.. no chance of multiple versions in the classpath, and the indexes are created from scratch - only the config files and schema are hold-overs from previous versions - I'll take this up on the list] ",
            "id": "comment-15576485"
        }
    ]
}