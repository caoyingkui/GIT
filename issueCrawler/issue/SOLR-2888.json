{
    "id": "SOLR-2888",
    "title": "FSTSuggester refactoring: utf8 storage, external sorts (OOM prevention), code cleanups",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [
            "spellchecker"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This issue incorporates several problems:\n\n\tutf16 was used previously to store and lookup terms, now it is utf8\n\tthe construction would OOM with large number of terms because of the need to sort entries. Sorter APIs have been added and an implementation of external (on-disk) sorting is also added (Robert Muir).\n\tthe FSTLookup class has been split and refactored into FSTCompletion and FSTCompletionBuilder, FSTCompletionLookup remains a facade connecting all the pieces and implements Lookup interface. For large inputs use FSTCompletionBuilder directly (and pre-bucket your input weights).\n\tAutomatic bucketing in FSTCompletionLookup has been changed from linear min/max discretization into dividing into  ranges after all values have been sorted. This empirically handles all potential distributions quite well. If somebody needs something very specific, use FSTCompletionBuilder directly (providing buckets), construct the automaton and then load it with FSTCompletionLookup.",
    "attachments": {
        "SOLR-2888.patch": "https://issues.apache.org/jira/secure/attachment/12504295/SOLR-2888.patch",
        "SOLR-2888_backport.patch": "https://issues.apache.org/jira/secure/attachment/12510804/SOLR-2888_backport.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Dawid Weiss",
            "id": "comment-13147810",
            "date": "2011-11-10T16:37:22+0000",
            "content": "Depends on external sort because that will imply the order of terms used for fst construction/ traversals "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13147816",
            "date": "2011-11-10T16:52:10+0000",
            "content": "or is external sort dependent on this? \n\nI would say one advantage of utf8 representation would be easier integration\nwith our other automaton stuff... its optimized for utf-8 and there is code\nhere and there that intertwines the two. this could be useful for potential\nfuzzy matching (edit distances)\n\nOne disadvantage of utf-8 would be that if you use more than 128 buckets \nit would cause the prefix byte to be plural... I think thats an ok limitation though? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13147821",
            "date": "2011-11-10T16:59:39+0000",
            "content": "actually scratch that limitation: since utf8/utf32 order is also unsigned byte order,\nwe can still encode a full range byte for the bucket prefix... "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13151341",
            "date": "2011-11-16T17:11:51+0000",
            "content": "This replaces utf16 with utf8, Strings with ByteRefs and does some initial API tweaks to move away from the Lookup API. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13152099",
            "date": "2011-11-17T15:29:37+0000",
            "content": "Proposed patch that fixes SOLR-2888 and SOLR-2887. This is also non-backwards compatible API refactoring \u2013 FSTLookup has been split into FSTCompletion (not a Lookup subclass), there is an adapter for Lookup called FSTCompletionLookup.\n\nThese changes try to separate FSTCompletion from strings/floats used in Lookup. An external sorting on disk has been added. I tested it locally with 40m terms from Wikipedia \u2013 FST construction was a memory bottleneck, everything else nicely spills to disk. Increasing RAM to ~1.5G did construct the suggester automaton for those 40m terms though.\n\nNot everything done \u2013 still some TODOs and ideas. Feel free to reiterate/ provide feedback. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13152194",
            "date": "2011-11-17T18:27:41+0000",
            "content": "The patch contains a logical error in FSTCompletionLookup \u2013 weight discretization must assign to buckets based on \"score-stickiness\"; that is once a score has been assigned to a given bucket all entries need to be assigned to the same bucket. This is needed to make sure the same score is not distributed within different buckets. \n\nWill fix later. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13152793",
            "date": "2011-11-18T11:16:59+0000",
            "content": "Cleaner separation of concerns between FSTCompletionBuilder and FSTCompletion. Cleaned up how lookup works (variations passed in the constructor, not in the lookup methods). Added methods for writing and reading automata to FST. Added full sorting of floats based on their int4 order. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13152794",
            "date": "2011-11-18T11:18:39+0000",
            "content": "Fixed that bug with wrong bucketing but also handled what annoyed me most \u2013 separated the completion data structure builder and the runtime logic. I think it's much cleaner now, Robert, so if you want to try intersections go ahead. Share patches, I'm curious to look at how hairy it'll be \n\nAlso, I did add full float range to that binary sorting. Like I said \u2013 requires some shifts, but not as difficult as I thought it'd be. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13153111",
            "date": "2011-11-18T20:42:41+0000",
            "content": "Same as before, but with fixed normalization of NaNs in float->sortable int4 conversion. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13153232",
            "date": "2011-11-18T23:34:34+0000",
            "content": "Same as before with debugging code removed. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13155339",
            "date": "2011-11-22T18:45:24+0000",
            "content": "I would like to commit this in if there are no objections.  "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13160784",
            "date": "2011-12-01T10:01:19+0000",
            "content": "Updated patch:\n\n\tupdated to recent API refactorings in BytesRef,\n\tFSTCompletion doesn't use LookupResult directly (no intermediate Strings).\n\n\n\nThis is ready to be committed, two remaining TODOs (infix suggestions, use of Analyzers for synonym suggestions, full support for float weights) will be split into separate issues. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13160800",
            "date": "2011-12-01T10:41:08+0000",
            "content": "looks good, a few nits:\n\n\tbytesequencesreader is complementary to itself\n\texternalrefsorter.close shouldn't mask exceptions i dont think? caller can do this in a try/catch\n\tsame with the new save()/read() methods added to FST\n\n "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13160806",
            "date": "2011-12-01T10:54:56+0000",
            "content": "What do you mean by \"complementary to itself\"? As for closing, sure I can propoagate up the stack. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13160820",
            "date": "2011-12-01T11:14:30+0000",
            "content": "'complementary to itself': recursive javadocs @link for ByteSequencesReader "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13160906",
            "date": "2011-12-01T13:29:29+0000",
            "content": "Ah... right. Sorry, will fix. I thought we're falling into Douglas Adams kind of narrative.  "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13160954",
            "date": "2011-12-01T15:44:56+0000",
            "content": "Corrected JavaDocs. Corrected handling of IOException on close(), hope I caught all the cases right. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13161215",
            "date": "2011-12-01T21:46:14+0000",
            "content": "In trunk. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13187404",
            "date": "2012-01-17T03:09:55+0000",
            "content": "I'm gonna try to work on a backport for 3.x here. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13187425",
            "date": "2012-01-17T03:55:31+0000",
            "content": "Here's the backport: i svn copied all the code and tests from trunk.\n\npatch shows the differences from the merge only, mostly just java 5 stuff. \n\nI kept the old FSTLookup to support the old API but deprecated it and its test. I don't think any other backwards compatibility is useful since we changed FST format anyway. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13187517",
            "date": "2012-01-17T07:54:44+0000",
            "content": "Thanks for doing the dirty work, Robert. "
        }
    ]
}