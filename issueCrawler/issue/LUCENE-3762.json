{
    "id": "LUCENE-3762",
    "title": "Upgrade JUnit to 4.10, refactor state-machine of detecting setUp/tearDown call chaining.",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Both Lucene and Solr use JUnit 4.7. I suggest we move forward and upgrade to JUnit 4.10 which provides several infrastructural changes (serializable Description objects, class-level rules, various tweaks). JUnit 4.10 also changes (or fixes, depends how you look at it) the order in which @Before/@After hooks and @Rules are applied. This makes the old state-machine in LuceneTestCase fail (because the order is changed).\n\nI rewrote the state machine and used a different, I think simpler, although Uwe may disagree , mechanism in which the hook methods setUp/ tearDown are still there, but they are empty at the top level and serve only to detect whether subclasses chain super.setUp/tearDown properly (if they override anything).\n\nIn the long term, I would love to just get rid of public setup/teardown methods and make them private (so that they cannot be overriden or even seen by subclasses) but this will require changes to the runner itself.",
    "attachments": {
        "LUCENE-3762.patch": "https://issues.apache.org/jira/secure/attachment/12513852/LUCENE-3762.patch",
        "LUCENE-3762-backport.patch": "https://issues.apache.org/jira/secure/attachment/12514479/LUCENE-3762-backport.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-08T19:44:51+0000",
            "content": "git patch (binary data updates) corresponding to this:\n\nhttps://github.com/dweiss/lucene_solr/commit/b0608e21abcaebb7d39c769689e3c0e987b741f9\n\nAll tests pass for me, but I would love if somebody else also tried (on a non-windows machine?).\n ",
            "author": "Dawid Weiss",
            "id": "comment-13203894"
        },
        {
            "date": "2012-02-08T20:16:08+0000",
            "content": "looks great, lets upgrade!\n\n\nJUnit 4.10 also changes (or fixes, depends how you look at it) the order in which @Before/@After hooks and @Rules are applied.\n\nDoes this mean if we assumeTrue(message, ...) inside a setUp() that we will now actually see the message?   ",
            "author": "Robert Muir",
            "id": "comment-13203931"
        },
        {
            "date": "2012-02-08T20:42:08+0000",
            "content": "I just committed a test case that verifies this to GitHub. The message gets propagated properly to RunListeners (as testAssumptionFailure). I don't see anything in Lucene's test output when I run a test with such an assumption, but I guess it has to be possible (if nothing else, then by capturing that with a custom RunListener). ",
            "author": "Dawid Weiss",
            "id": "comment-13203961"
        },
        {
            "date": "2012-02-08T20:48:16+0000",
            "content": "Yes, it would be possible. Either at the runner level (worse) or by using a custom rule and not a TestWatcher subclass. What TestWatcher does is this:\n\n\t\t\tpublic void evaluate() throws Throwable {\n\t\t\t\tstarting(description);\n\t\t\t\ttry {\n\t\t\t\t\tbase.evaluate();\n\t\t\t\t\tsucceeded(description);\n\t\t\t\t} catch (AssumptionViolatedException e) {\n\t\t\t\t\tthrow e;\n\t\t\t\t} catch (Throwable t) {\n\t\t\t\t\tfailed(t, description);\n\t\t\t\t\tthrow t;\n\t\t\t\t} finally {\n\t\t\t\t\tfinished(description);\n\t\t\t\t}\n\t\t\t}\n\n\nso it effectively skips assumption-failed tests and they're not passed to LuceneTestCase. Doable, but I think worth a separate issue? ",
            "author": "Dawid Weiss",
            "id": "comment-13203970"
        },
        {
            "date": "2012-02-08T20:55:53+0000",
            "content": "its definitely a separate issue... just curiousity! ",
            "author": "Robert Muir",
            "id": "comment-13203975"
        },
        {
            "date": "2012-02-08T21:13:10+0000",
            "content": "I rewrote the state machine and used a different, I think simpler, although Uwe may disagree \n\nNo, no, the state machine was Robert's work I only helped on improvements \n\n+1 ",
            "author": "Uwe Schindler",
            "id": "comment-13203989"
        },
        {
            "date": "2012-02-09T08:15:42+0000",
            "content": "Just to clarify: I don't think the state machine was wrong, it just made assumptions that don't hold in JUnit4.10 (the order of calls). I decided to remove it because I think there is a cleaner way of ensuring setup/teardown was properly chained if overriden. \n\nI'll commit this one in to the trunk and we'll see if it breaks anything on Jenkins (I don't think it should, it doesn't locally). ",
            "author": "Dawid Weiss",
            "id": "comment-13204349"
        },
        {
            "date": "2012-02-09T08:58:13+0000",
            "content": "There are functional differences between TestWatcher (before) and TestWatchman (current) \u2013 assumptions are no longer propagated as failures and the code in LTC.intercept() no longer applies:\n\n\n    protected void failed(Throwable e, Description description) {\n      // org.junit.internal.AssumptionViolatedException in older releases\n      // org.junit.Assume.AssumptionViolatedException in recent ones\n      if (e.getClass().getName().endsWith(\"AssumptionViolatedException\")) {\n        if (e.getCause() instanceof _TestIgnoredException)\n\n\n\nI'll write tests to cover these and rewrite the interceptor explicitly as a @Rule so that we don't rely on JUnit's implementation with regard as to what is considered what.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13204372"
        },
        {
            "date": "2012-02-09T09:50:00+0000",
            "content": "An updated patch with more serious refactorings of LTC. ",
            "author": "Dawid Weiss",
            "id": "comment-13204404"
        },
        {
            "date": "2012-02-09T09:54:58+0000",
            "content": "If we're changing JUnit perhaps it's worth upgrading the infrastructure a bit to make things cleaner. I refactored all the hooks into a ruleset so that their nesting order is explicit:\n\n  @Rule\n  public final TestRule ruleChain = RuleChain\n    .outerRule(new RememberThreadRule())\n    .around(new TestResultInterceptorRule())\n    .around(new InternalSetupTeardownRule())\n    .around(new SubclassSetupTeardownRule());\n\n\nSo, subclasses (setup/teardown) run inside, surrounded by internal cleanups, surrounded by test result tracker, surrounded by current thread remembering. I also removed _TestIgnoredException in favor of a subclass of AssumptionIgnoredException - this removes some conditional checks and unwinding code.\n\nI added some tests to detect the expected behavior of LTC (what Robert mentioned); I would feel great if we check that all the expectations are covered before we commit this in \u2013 if you can post a simple class along with: \"this should result in this and that\" I'll update the tests. There are examples of such expectations in the patch (static classes and tests inside TestSetupTeardownMethods class). ",
            "author": "Dawid Weiss",
            "id": "comment-13204406"
        },
        {
            "date": "2012-02-09T09:57:05+0000",
            "content": "Didn't run the tests yet, doing it in the background. ",
            "author": "Dawid Weiss",
            "id": "comment-13204410"
        },
        {
            "date": "2012-02-09T10:10:08+0000",
            "content": "All tests pass for me with this patch. I didn't attach a binary patch this time, the patched version is at github:\nhttps://github.com/dweiss/lucene_solr (junit4 branch). ",
            "author": "Dawid Weiss",
            "id": "comment-13204419"
        },
        {
            "date": "2012-02-10T12:10:34+0000",
            "content": "about the assumes() etc from setup, in general exceptions/assumes, I think we would like them to be treated the same whether they happen in the actual test method body or setup or teardown?\n\nSo like today, the buggy behavior is that if an assumption fails from a test method itself, we get a message to stderr:\nNOTE: Assume failed in 'testFoo' (ignored): Some message explaining why this is ok!\n\nBut, if it fails in setup, we get no message at all!\n\nThe reason I think it was hard was because of how the TestWatcher didn't get an event if it failed in setup, so we didnt have a clean way to \ndo this... but maybe its something we can fix in junit 4.8+ (doesn't need to be done on this issue!) ",
            "author": "Robert Muir",
            "id": "comment-13205380"
        },
        {
            "date": "2012-02-10T15:14:33+0000",
            "content": "This already works on the branch I think, but I will re-check. I advanced junit4 branch and integrated junit4 parallel balanced runner instead of the default ANT's junit and previous set of macros. The code for this patch lives under LUCENE-3762.\n\nI'll look for corner cases tonight and commit this in. Alternatively we could set up a parallel jenkins build and commit this on a branch to see if everything is all right? ",
            "author": "Dawid Weiss",
            "id": "comment-13205494"
        },
        {
            "date": "2012-02-10T22:44:51+0000",
            "content": "Updated patch with tests of what's emitted and when. ",
            "author": "Dawid Weiss",
            "id": "comment-13205818"
        },
        {
            "date": "2012-02-10T22:47:32+0000",
            "content": "I checked assume/fail/error in combination with all the possible execution points. LuceneTestCase rule wrapper emits (as could be predicted) the right note for everything but:\n\n\tstatic initializers,\n\t@BeforeClass\n\tinitializers (constructor)\n\t@AfterClass\n\n\n\nThese cases are handled outside of @Rule scope and should be handled by JUnit and propagated as failures to report listeners. ",
            "author": "Dawid Weiss",
            "id": "comment-13205820"
        },
        {
            "date": "2012-02-10T22:48:46+0000",
            "content": "Does this mean if we assumeTrue(message, ...) inside a setUp() that we will now actually see the message? \n\nSo, the answer to this is yes, you will. ",
            "author": "Dawid Weiss",
            "id": "comment-13205822"
        },
        {
            "date": "2012-02-10T22:49:38+0000",
            "content": "I plan to commit this in on Monday (so that I'm at the computer in case something breaks) unless there are objections.  ",
            "author": "Dawid Weiss",
            "id": "comment-13205823"
        },
        {
            "date": "2012-02-14T10:52:41+0000",
            "content": "I've committed to the trunk and I have a backport of this but I started to wonder if it's a good idea to apply it on 3x \u2013 this may cause issues with backport testing, if not anything else. Thoughts? ",
            "author": "Dawid Weiss",
            "id": "comment-13207628"
        },
        {
            "date": "2012-02-14T11:28:02+0000",
            "content": "Backport patch. This removes state machine from backport/LuceneTestCase so that backport tests can pass. ",
            "author": "Dawid Weiss",
            "id": "comment-13207642"
        },
        {
            "date": "2012-02-14T12:06:52+0000",
            "content": "+1 for 3.x too.  ",
            "author": "Robert Muir",
            "id": "comment-13207656"
        },
        {
            "date": "2012-02-14T23:53:11+0000",
            "content": "Dawid, today I've seen the following test reproduction message (from Maven, but running Lucene/Solr tests under Maven has caused this before):\n\n\nNOTE: reproduce with: ant test -Dtestcase=UIMABaseAnalyzerTest -Dtestmethod=testRandomStrings(org.apache.lucene.analysis.uima.UIMABaseAnalyzerTest) -Dtests.seed=2be0c24a1df9b25e:-42f203968285c6ed:5f8c85cdbae32724 -Dargs=\"-Dfile.encoding=Cp1252\"\n\n\n\nThat is, the parenthetical class name after the method in the -Dtestmethod=... string doesn't work - you have to strip this out in order to actually use the given cmdline.\n\nAm I right in assuming that LUCENE-3762 is the source of this behavior change? ",
            "author": "Steve Rowe",
            "id": "comment-13208137"
        },
        {
            "date": "2012-02-15T09:55:04+0000",
            "content": "Good catch, Steve \u2013 yes, I might have introduced it as part of the refactoring. JUnit has deprecated MethodRule in favor of TestRule and the latter one doesn't come with a FrameworkMethod... It's weird.\n\nI will reopen this issue and apply a fix. ",
            "author": "Dawid Weiss",
            "id": "comment-13208322"
        },
        {
            "date": "2012-02-15T09:55:21+0000",
            "content": "Reopening \u2013 method names in reproduction report. ",
            "author": "Dawid Weiss",
            "id": "comment-13208323"
        }
    ]
}