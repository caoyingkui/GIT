{
    "id": "SOLR-195",
    "title": "Wildcard/prefix queries not highlighted",
    "details": {
        "affect_versions": "1.1.0,                                            1.2",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "highlighter"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "Possible bug in query rewrite()ing:\n\nhttp://www.nabble.com/return-matched-terms---fuzzy-or-wildcard-searches-tf3452757.html#a9640214",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12483799",
            "date": "2007-03-23T23:57:50+0000",
            "content": "i bet this could be fixed by adding an extractTerms method to ConstantScorePrefixQuery "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12483865",
            "date": "2007-03-24T18:57:37+0000",
            "content": "Problem is, rewrite() changes ConstantScorePrefixQuery to ConstantScoreQuery.\nPerhaps we would change ConstantScorePrefixQuery.rewrite to a no-op, then implement extractTerms() "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12483873",
            "date": "2007-03-24T20:24:37+0000",
            "content": "Hmmm... perhaps we should consider the larger Lucene issue of ConstantScoreQuery, extractTerms, and highlighting ... maybe CSQ should have a method for specifying a callback to use if/when extractTerms is called? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12483897",
            "date": "2007-03-25T00:22:04+0000",
            "content": "I'm not sure if rewrite never really added much to Lucene though...\nConstantScoreRangeQuery and ConstantScorePrefixQuery could just as easily reuse a common scorer than re-write to ConstantScoreQuery.  Seems like we should fix it at the Lucene level though. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12501790",
            "date": "2007-06-06T05:16:20+0000",
            "content": "a follow up note: as mentioned in the email thread linked to in the issue report, one work arround people may want to consider if highlighting is important (at the expense of the PrefixFilter optimization) is to force the use of a WildCardQuery in what would otherwise be interpreted as a PrefixQuery by putting a \"?\" before the \"*\"\n\nie: auto?* instead of auto*\n\n(yes, this does require that at least one character follow the prefix) "
        },
        {
            "author": "Xuesong Luo",
            "id": "comment-12509476",
            "date": "2007-07-02T02:06:05+0000",
            "content": "(auto auto?) can be used as a work around for auto if you do want highlighting.  "
        },
        {
            "author": "J.J. Larrea",
            "id": "comment-12525304",
            "date": "2007-09-06T06:38:23+0000",
            "content": "Until such time as someone implements one of the approaches for extractTerms() in the ConstantScoreXXXQuery classes in Lucene, would a workable workaround (at least for StandardRequestHandler, DisMax might be trickier) be to have the RH parse the query twice, once with the ConstantScore optimizations enabled as usual for generating the hits, and (with a trivial change to SolrQueryParser etc.) once with them disabled for highlighting?  The BooleanQuery clause limit is probably more acceptable for highlighting than for generating hits, the PrefixFilter speed improvements would still be in effect generating the hits, and the query would not need to be externally munged.  Or is that too hacky? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12525421",
            "date": "2007-09-06T13:42:49+0000",
            "content": "it would be hacky ... but it would be workable. "
        },
        {
            "author": "Chris Harris",
            "id": "comment-12629248",
            "date": "2008-09-08T18:25:30+0000",
            "content": "I just rediscovered this bug for myself, and was about to re-report it, but then I found this JIRA issue. Even though it's a bit redundant, I'm going to paste my bug report here, since A) I think it's a good summary of the problem B) it has a remark for when usePhraseHighlighter=true, and C) it includes a few test cases.\n\n****\n\nHighlighting with wildcards (whether * is in the middle of a term or at\nthe end) doesn't work right now for the standard request handler.\nThe high-level view of the problem is as follows:\n\n1. Extracting terms is central to highlighting\n2. Wildcard queries get parsed into ConstantScoreQuery objects\n3. It's not currently possible to extract terms from\n   ConstantScoreQuery objects\n\n****\n\nWildcard queries get turned into ConstantScoreQuery objects. For non-prefix\nwildcards (e.g. \"l*g\"), the query parser directly returns a\nConstantScoreQuery with filter = WildcardFilter. For prefix wildcards\n(e.g. \"lon*\"), the query parser returns a ConstantScorePrefixQuery,\nbut it gets rewritten (by Query.rewrite(), which gets called in the\nhighlighting component) into a ConstantScoreQuery with\nfilter = PrefixFilter.\n\nIf usePhraseHighlighter=false, then a key part of highlighting is\nQuery.extractTerms(). However, ConstantScoreQuery.extractTerms()\nis an empty method. The source itself notes that this may not\nbe good for highlighting: \"OK to not add any terms when used for\nMultiSearcher, but may not be OK for highlighting.\"\n\nIf usePhraseHighlighter=true, then a key part of highlighting is\nWeightedSpanTermExtractor.extract(Query, Map). Now extract() has\na number of different instanceof clauses, each with knowledge about\nhow to extract terms from a particular kind of query. However, there\nis no instanceof clause that matches ConstantScoreQuery.\n\n****\n\nHere are four variants on testDefaultFieldHighlight() that all fail, even\nthough I think they should pass. (The differences from\ntestDefaultFieldHighlight are the hl.usePhraseHighlighter param and the\nuse of wildcard in sumLRF.makeRequest.) When I run them, they each return\na document, as expected, but they don't find any highlight blocks.\n\n\n  public void testDefaultFieldPrefixWildcardHighlight() {\n\n    // do summarization using re-analysis of the field\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"df\", \"t_text\");\n    args.put(\"hl.fl\", \"\");\n    args.put(\"hl.usePhraseHighlighter\", \"false\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    \n    assertU(adoc(\"t_text\", \"a long day's night\", \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"lon*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='t_text']/str\"\n            );\n\n  }\n\n  public void testDefaultFieldPrefixWildcardHighlight2() {\n\n    // do summarization using re-analysis of the field\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"df\", \"t_text\");\n    args.put(\"hl.fl\", \"\");\n    args.put(\"hl.usePhraseHighlighter\", \"true\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    \n    assertU(adoc(\"t_text\", \"a long day's night\", \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"lon*\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='t_text']/str\"\n            );\n\n  }\n\n  public void testDefaultFieldNonPrefixWildcardHighlight() {\n\n    // do summarization using re-analysis of the field\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"df\", \"t_text\");\n    args.put(\"hl.fl\", \"\");\n    args.put(\"hl.usePhraseHighlighter\", \"false\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    \n    assertU(adoc(\"t_text\", \"a long day's night\", \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"l*g\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='t_text']/str\"\n            );\n\n  }\n\n  public void testDefaultFieldNonPrefixWildcardHighlight2() {\n\n    // do summarization using re-analysis of the field\n    HashMap<String,String> args = new HashMap<String,String>();\n    args.put(\"hl\", \"true\");\n    args.put(\"df\", \"t_text\");\n    args.put(\"hl.fl\", \"\");\n    args.put(\"hl.usePhraseHighlighter\", \"true\");\n    TestHarness.LocalRequestFactory sumLRF = h.getRequestFactory(\n      \"standard\", 0, 200, args);\n    \n    assertU(adoc(\"t_text\", \"a long day's night\", \"id\", \"1\"));\n    assertU(commit());\n    assertU(optimize());\n    assertQ(\"Basic summarization\",\n            sumLRF.makeRequest(\"l*g\"),\n            \"//lst[@name='highlighting']/lst[@name='1']\",\n            \"//lst[@name='1']/arr[@name='t_text']/str\"\n            );\n\n  }\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12709827",
            "date": "2009-05-15T13:04:40+0000",
            "content": "This now works with SOLR-825. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13003101",
            "date": "2011-03-06T05:50:40+0000",
            "content": "Shouldn't this issue be closed as a duplicate, given Mark's comment?  Though SOLR-825 is only for the phrase highlighter, not otherwise.  That doesn't strike me as a big deal since the phrase highlighter is what everyone should use (yet strangely isn't the default). "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13211685",
            "date": "2012-02-20T06:08:28+0000",
            "content": "This should be done at some point. Fixing it as duplicate. "
        }
    ]
}