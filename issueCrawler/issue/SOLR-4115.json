{
    "id": "SOLR-4115",
    "title": "WordBreakSpellChecker throws ArrayIndexOutOfBoundsException for random query string",
    "details": {
        "affect_versions": "4.0",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "spellchecker"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "The following SolrJ test code causes an ArrayIndexOutOfBoundsException in the WordBreakSpellChecker. I tested this with the Solr 4.0.0 example webapp started with java -jar start.jar.\n\n\n  @Test\n  public void testWordbreakSpellchecker() throws Exception {\n    SolrQuery q = new SolrQuery(\"\\uD864\\uDC79\");\n    q.setRequestHandler(\"/browse\");\n    q.setParam(\"spellcheck.dictionary\", \"wordbreak\");\n    HttpSolrServer server = new HttpSolrServer(\"http://localhost:8983/solr\");\n    server.query(q, SolrRequest.METHOD.POST);\n  }\n\n\n\n\nINFO: [collection1] webapp=/solr path=/browse params={spellcheck.dictionary=wordbreak&qt=/browse&wt=javabin&q=?&version=2} hits=0 status=500 QTime=11 \nNov 28, 2012 11:23:01 AM org.apache.solr.common.SolrException log\nSEVERE: null:java.lang.ArrayIndexOutOfBoundsException: 1\n\tat org.apache.lucene.util.UnicodeUtil.UTF8toUTF16(UnicodeUtil.java:599)\n\tat org.apache.lucene.util.BytesRef.utf8ToString(BytesRef.java:165)\n\tat org.apache.lucene.index.Term.text(Term.java:72)\n\tat org.apache.lucene.search.spell.WordBreakSpellChecker.generateSuggestWord(WordBreakSpellChecker.java:350)\n\tat org.apache.lucene.search.spell.WordBreakSpellChecker.generateBreakUpSuggestions(WordBreakSpellChecker.java:283)\n\tat org.apache.lucene.search.spell.WordBreakSpellChecker.suggestWordBreaks(WordBreakSpellChecker.java:122)\n\tat org.apache.solr.spelling.WordBreakSolrSpellChecker.getSuggestions(WordBreakSolrSpellChecker.java:229)\n\tat org.apache.solr.handler.component.SpellCheckComponent.process(SpellCheckComponent.java:172)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:206)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1699)\n\tat org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:455)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:276)\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1337)\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:484)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:524)\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:233)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1065)\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:413)\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:192)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:999)\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:250)\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149)\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111)\n\tat org.eclipse.jetty.server.Server.handle(Server.java:351)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454)\n\tat org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:47)\n\tat org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:900)\n\tat org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:954)\n\tat org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:857)\n\tat org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n\tat org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:66)\n\tat org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:254)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:599)\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:534)\n\tat java.lang.Thread.run(Thread.java:662)\n\n\n\nThe query string is a random one (we found it in a randomized test). Other random strings work.\n\nThere are no problems with this query string when the DirectSolrSpellChecker is used or during search.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "James Dyer",
            "id": "comment-13507530",
            "date": "2012-11-30T18:30:40+0000",
            "content": "Correct me if I'm wrong, but Lucene is only able to take valid UTF-8 as input, right?  So oal.util.UnicodeUtil.UTF8toUTF16 doesn't like \\uD864\\uDC79 because its invalid UTF-8.  \n\nSee http://lucene.apache.org/core/4_0_0/core/org/apache/lucene/util/UnicodeUtil.html#UTF8toUTF16%28org.apache.lucene.util.BytesRef,%20org.apache.lucene.util.CharsRef%29 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13507672",
            "date": "2012-11-30T21:41:43+0000",
            "content": "Looks to me like a fundamental bug in WordBreakSpellChecker.\n\nI agree with James that there's invalid UTF-8 here, but it's not \\uD864\\uDC79, which is a valid UTF-16 sequence representing a single character (codepoint: U+29079, UTF-8: F0 A9 81 B9 - this is a CJK ideograph above the BMP).\n\nThe wordbreak suggester is breaking up multibyte UTF-8 characters at non-character boundaries.\n\nAs a method on TestWordBreakSpellChecker, this fails for me with the same stack trace in Lucene:\n\n\npublic void testBreakingCharAboveBMP() throws Exception {\n  IndexReader ir = null;\n  try {\n    ir = DirectoryReader.open(dir);\n    WordBreakSpellChecker wbsp = new WordBreakSpellChecker();\n    Term term = new Term(\"numbers\", \"\\uD864\\uDC79\");\n    wbsp.setMaxChanges(1);\n    wbsp.setMinBreakWordLength(1);\n    wbsp.setMinSuggestionFrequency(1);\n    SuggestWord[][] sw = wbsp.suggestWordBreaks(term, 5, ir, SuggestMode.SUGGEST_WHEN_NOT_IN_INDEX, BreakSuggestionSortMethod.NUM_CHANGES_THEN_MAX_FREQUENCY);\n    Assert.assertEquals(\"sw.length\", 0, sw.length);\n  } catch(Exception e) {\n    throw e;\n  } finally {\n    try { ir.close(); } catch(Exception e1) { }\n  }\n}\n\n\n\nUnicodeUtil.UTF8toUTF16() assumes you're sending it a valid UTF-8 sequence, and so it croaks when WordBreakSpellChecker sends it the first byte in the UTF-8 representation of \\uD864\\uDC79: F0, a non-valid UTF-8 sequence without three following bytes. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13507707",
            "date": "2012-11-30T22:12:48+0000",
            "content": "ahhh...I see.  Makes perfect sense.  Thanks, Steven for the explanation. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13509993",
            "date": "2012-12-04T20:26:22+0000",
            "content": "I opened LUCENE-4587 and will resolve with a fix there. "
        }
    ]
}