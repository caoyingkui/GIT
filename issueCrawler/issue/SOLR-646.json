{
    "id": "SOLR-646",
    "title": "Configuration properties enhancements in solr.xml",
    "details": {
        "affect_versions": "1.4",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "This patch refers to 'generalized configuration properties' as specified by HossMan\nThis means configuration & schema files can use expression based on properties defined in solr.xml.\n\nUse cases:\nDescribe core data directories from solr.xml as properties.\nShare the same schema and/or config file between multiple cores.\nShare reusable fragments of schema & configuration between multiple cores.\n\nUsage:\nsolr.xml\nThis solr.xml will be used to illustrates using properties for different purpose.\n\n<solr persistent=\"true\">\n  <property name=\"version\" value=\"1.3\"/>\n  <property name=\"lang\" value=\"english, french\"/>\n  <property name=\"en-cores\" value=\"en,core0\"/>\n  <property name=\"fr-cores\" value=\"fr,core1\"/>\n  <!-- This experimental feature flag enables schema & solrconfig to include other files --> \n  <property name=\"solr.experimental.enableConfigInclude\" value=\"true\"/>\n  <cores adminPath=\"/admin/cores\">\n    <core name=\"${en-cores}\" instanceDir=\"./\">\n\t  <property name=\"version\" value=\"3.5\"/>\n\t  <property name=\"l10n\" value=\"EN\"/>\n\t  <property name=\"ctlField\" value=\"core0\"/>\n\t  <property name=\"comment\" value=\"This is a sample\"/>\n\t</core>\n    <core name=\"${fr-cores}\" instanceDir=\"./\">\n\t  <property name=\"version\" value=\"2.4\"/>\n\t  <property name=\"l10n\" value=\"FR\"/>\n\t  <property name=\"ctlField\" value=\"core1\"/>\n\t  <property name=\"comment\" value=\"Ceci est un exemple\"/>\n\t</core>\n  </cores>\n</solr>\n\n\nversion : if you update your solr.xml or your cores for various motives, it can be useful to track of a version. In this example, this will be used to define the dataDir for each core.\nen-cores,fr-cores: with aliases, if the list is long or repetitive, it might be convenient to use a property that can then be used to describe the Solr core name.\ninstanceDir: note that both cores will use the same instance directory, sharing their configuration and schema. The dataDir will be set for each of them from the solrconfig.xml.\n\nsolrconfig.xml\nThis is where our solr.xml property are used to define the data directory as a composition of, in our example, the language code l10n and the core version stored in version.\n\n<config>\n  <dataDir>${solr.solr.home}/data/${l10n}-${version}</dataDir>\n....\n</config>\n\n\n\nschema.xml\nThe include allows to import a file within the schema (or a solrconfig); this can help de-clutter long schemas or reuse parts.\nThe ctlField is just illustrating that a field & its type can be set through properties as well; in our example, we will want the 'english' core to refer to an 'english-configured' field and the 'french' core to a 'french-configured' one. The type for the field is defined as text-EN or text-FR after expansion.\n\n\n<schema name=\"example core ${l10n}\" version=\"1.1\">\n  <types>\n...\n   <include resource=\"text-l10n.xml\"/>\n  </types>\n\n <fields>   \n...\n  <field name=\"${ctlField}\"   type=\"text-${l10n}\"   indexed=\"true\"  stored=\"true\"  multiValued=\"true\" /> \n </fields>\n\n\n\nThis schema is importing this text-l10n.xml file which is a fragment; the fragment tag must be present & indicates the file is to be included. Our example only defines different stopwords for each language but you could of course extend this to stemmers, synonyms, etc.\n\n<fragment>\n\t<fieldType name=\"text-FR\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n...\n\t    <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords-fr.txt\"/>\n...\n\t</fieldType>\n\t<fieldType name=\"text-EN\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n...\n\t    <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords-en.txt\"/>\n...\n\t</fieldType>\n</fragment>\n\n\n\nAlternatively, one can use XML entities using the 'solr:' protocol to the same end as in:\n\n<!DOCTYPE schema [\n<!ENTITY textL10n SYSTEM \"solr:${l10ntypes}\">\n]>\n<schema name=\"example core ${l10n}\" version=\"1.1\">\n  <types>\n   <fieldtype name=\"string\"  class=\"solr.StrField\" sortMissingLast=\"true\" omitNorms=\"true\"/>\n   <!--include resource=\"text-l10n.xml\"/-->\n   &textL10n;\n  </types>\n  ...\n</schema>\n\n\n\n\nTechnical specifications\nsolr.xml can define properties at the multicore & each core level.\nProperties defined in the multicore scope can override system properties.\nProperties defined in a core scope can override multicore & system properties.\nProperty definitions can use expressions to define their name & value; these expressions are evaluated in their outer scope context .\nCoreContainer serialization keeps properties as defined; persistence is idem-potent. (ie property expressions are written, not their evaluation).\n\nThe core descriptor properties are automatically defined in each core context, namely:\nsolr.core.instanceDir\nsolr.core.name\nsolr.core.configName\nsolr.core.schemaName\n\nCoding notes:\n\n\n\tDOMUtil.java:\ncosmetic changes\ntoMapExcept systematically skips 'xml:base\" attributes (which may come from entity resolving)\n\n\n\n\n\tCoreDescriptor.java:\nThe core descriptor does not store properties as values but as expressions (and all its members can be property expressions as well) allowing to write file as defined (not as evaluated)\nThe public getCoreProperties is removed for that reason. (too bad we were in such a rush...)\n\n\n\n\n\tCoreContainer.java:\nchanges related to extracting the core names before they are evaluated in load()\nchanges related to evaluating core descriptor member before adding them to the core's loader properties\nfix in persistFile which was not interpreting relative pathes correctly\nfix in persist because properties were not written at the right place\nchanges in persist to write expressions (and core name when it is one) \n\n\n\n\n\tConfig.java:\nsubsituteProperties has been moved out of constructor so calls must be explicit.\nadded the entity resolver\nadded subsituteIncludes which processes <include name.../>\n\n\n\n\n\tSolrConfig.java & IndexSchema.java\nadded explicit calls to substituteIncludesto perform property/include expansion\n\n\n\n\n\tSolrResourceLoader.java\ncosmetic, changed getCoreProperties to getProperties (since they may come from the CoreContainer)\n\n\n\n\n\tSolrProperties.java:\nschema uses a localization (l10n) property to define an attribute\npersists the file to check it keeps the expression properties\n\n\n\n\n\tQueryElevationComponent.java\nNeeded to explicitly call substituteProperties.",
    "attachments": {
        "SOLR-646.patch": "https://issues.apache.org/jira/secure/attachment/12388609/SOLR-646.patch",
        "solr-646.patch": "https://issues.apache.org/jira/secure/attachment/12386640/solr-646.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Henri Biestro",
            "id": "comment-12615692",
            "date": "2008-07-22T17:43:23+0000",
            "content": "supersedes the version in solr-350 with some improvements & bug fixes.\nMulticore will attempt to load the bundle \"multicore\" (aka tries to load a multicore.properties) allowing to define installation wide properties.\nUnrelated but convenient to test/verify persistence, solrj now allows to persist the file with an explicit name.\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12615698",
            "date": "2008-07-22T17:55:13+0000",
            "content": "Can we see a use case for this kind of configuration?  "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12615725",
            "date": "2008-07-22T18:42:00+0000",
            "content": "Added some use cases. Thanks Paul. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12615875",
            "date": "2008-07-23T04:15:10+0000",
            "content": "how is this evaluated? The syntax is not obvious as to what it is doing. I am referring to the type attribute in the following snippet\n\n\n <field name=\"id\"   type=\"${id_type:id_t}\"   indexed=\"true\"  stored=\"true\"  multiValued=\"false\" required=\"true\"/>\n\n\n\nI can't imagine a usecase where field types are dynamically assigned "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12615894",
            "date": "2008-07-23T06:27:14+0000",
            "content": "\n...type='${id_type:id_t}'... : evaluate the property 'id_type', if no value found default to 'id_t''.\nLet's consider you want to have the same schema (at the field level) but in different cores for different languages;  you can dynamically set a field type based on a locale (stemming/stopwords).\nI agree that using the id field in the example is misleading. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12617322",
            "date": "2008-07-27T18:11:30+0000",
            "content": "I'll update soon the patch to add an 'import' feature (allowing to import chunks of xml) in config & schema as in <import resource='stuff.xml'/> or even <import resource='${my.types}'/>.\n\nConfiguration not being a high-priority feature in the Solr community, let me know if anyone is interested so I put more efforts in documenting this & the follow up. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12617323",
            "date": "2008-07-27T18:23:36+0000",
            "content": "I haven't looked into the patch but just fyi, there's a VariableResolver, VariableResolverImpl and TemplateString classes in DataImportHandler (SOLR-469) that also support general variable substitution. However that code does not support specifying defaults the way DOMUtil does. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12617328",
            "date": "2008-07-27T19:26:45+0000",
            "content": "Besides the <property .../> syntax, the latest patch version adds the <import resource='resource'/> (where resource can be a constant or a variable).\nThis means config and schemas can be chunked in multiple pieces that can be reused in different cores. Combined with properties, this completely frees up core configuration.\nAlso added a <fragment>...</fragment> tag to allow importing XML chunks that don't have a natural root node.\n\nThe PropertyMap.imports() allows to enumerate which expressions were resolved as resources locally (aka config, schema, import) and their logical location when implicit. (Map.Entry<String,String[]> e; e.getValue()[0] is the canonical resource value, getValue()[1] the 'symbolic' one. When value[0] == value[1], it means this was absolute or found in a JAR.\n\nShalin, thanks, good to know; I've only been using/refactoring DOMUtil since this patch mainly deals with property expansion (besides definition & book-keeping).  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12618782",
            "date": "2008-07-31T17:56:16+0000",
            "content": "i haven't looked at the patch, but i'm +1 on the write up and the description of how things would/should work ... the only thing that jumps out at me is the automatic properties...\n\n\nsolr.core.instanceDir\nsolr.core.instancePath\nsolr.core.name\nsolr.core.configName\nsolr.core.schemaName\n\n...first off, i'm not sure what the difference between instanceDir and instancePath are or what configName means (but that might just be my general out of touch-ness with all the multicore advancements, in which case don't worry about it.)  My main questions:\n\n\tAre the values of these automatic properties invariant, or can the be overridden?\n\tShould we use some special prefix/syntax for automatic properties such that we reduce/eliminate the risk of collision if we add new ones in future versions? (example: the automatic properties could all have names starting with \"_\", and the code that reads property declarations could ignore/warn if a user attempts to declare a property that (might) collide in the future.\n\n "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12619277",
            "date": "2008-08-02T20:46:00+0000",
            "content": "How will these files and substituted properties show up in the admin JSPs? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12619330",
            "date": "2008-08-03T14:26:38+0000",
            "content": "About documentation:\nI'll try to come with better (ie more meaningful) examples - although I kinda feel \"impaired\" to describe the 3 tags (property/import/fragment) if what I've already written does not convey 90% of how things would/should work already. I welcome any help/hint on what a useful documentation should look like (any template I could/should follow)?\nOn the documentation editing/releasing process, I'd tend to go for refining this issue description till the code gets committed at which time I'd copy/paste it in a Wiki page if that's OK.\n\nAbout \"automatic\" properties:\nThose reflect the Core descriptor values or in more general terms, any Solr install/multicore/core configuration/schema value used in the system but defined through another API; the core name, instance directory, configuration file name (defaults to solrconfig.xml), schema file name (defaults to schema.xml) all come form the core descriptor .\nsolr.core.instanceDir is strictly what the core descriptor instance directory is; solr.core.instancePath is the non-relative version of it. When solr.core.instanceDir is not an absolute path, is is relative to the solr.home instance directory; in this case, solr.core.instancePath is the non relative version. Otherwise, they are just the same; overall, this just reflect what the code does but removes any ambiguous implicits (which is what the PropertyMap.imports() also resolves*).\n\nI've also added the solr.core.schemaDir & solr.core.configDir- the directories where the config & schema files reside. We have no way yet to specify those last two but they are inferred from the other values - which would be their defaults if un-specified.There is a functional choice to make about how we want to complete the \"core\" properties; the \"missing\" parts are the config & schema directories. My preference would be to extend the core descriptor and reflect those as properties but we might want&try to go the other way, put everything as properties & retain the API as shortcuts.\n\nRegarding naming conventions/protection, I would tend to go for the natural attribute-like convention & protect those; the automatic/reserved namespaces would be any property starting with 'solr.' (including 'solr.core' and 'solr.multicore') and disallow/warn about any attempt to override. Would that be acceptable/enough ?\n\nAbout files/substituted properties & admin JSPs:\nAs is, nothing has changed; getting the schema/config return the file as it exists in the file-system. The first natural extension would be that for config & schema, when allowed, the imported files should be downloadable too. It might be nice to have the download expanded version of each file for debugging purpose as well if this is actually useful and/or the expanded version of config & schema; any functional suggestions is welcome. Lance, what do you think would be good to have?\n\nAbout PropertyMap.imports():\nThe rationale behind this besides debugging/logging purpose would be \"dynamic\" replication of a core (a slave Slr 'install' could automatically replicate new \"master' cores. The goal of this API is to have the canonical (local) path of each file - so we can read them- and their logical/symbolic counterparts so their destination (remote) path can be determined, each core's solrconfig.xml itself being \"replicable\".\n\nAbout the issue itself:\nHow much of these should be specified/implemented before the patch can be committed and/or is there any chance to put this in the 1.3 scope ? "
        },
        {
            "author": "Jeremy Hinegardner",
            "id": "comment-12619406",
            "date": "2008-08-04T02:20:30+0000",
            "content": "There seems to be some issues with this patch, I would like to use it, but it doesn't apply cleanly to svn head, patch seems to mess up in the first hunk of Config.java.  I manually applied that portion, and now I'm recieveing an the error:\n\n\n\n[javac] /Users/jeremy/repos/svn/solr/apache-solr-nightly/src/java/org/apache/solr/core/MultiCore.java:106: cannot find symbol\n[javac] symbol  : method keySet()\n[javac] location: class java.util.ResourceBundle\n[javac]         Iterator<String> ikeys = bundle.keySet().iterator();\n\n\n\n\nMy java is rusty, but this appears to be a Java 6 only call on Resource Bundle.  Is solr 1.3 going to be Java 6 only ? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12619407",
            "date": "2008-08-04T03:04:07+0000",
            "content": "yes, keySet() is 1.6 only....\n\nSolr is 1.5, so this will need to get changed before going in... "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12619408",
            "date": "2008-08-04T03:08:15+0000",
            "content": "\nAbout the issue itself:\nHow much of these should be specified/implemented before the patch can be committed and/or is there any chance to put this in the 1.3 scope ?\n\nYes, I think this should be in 1.3 \u2013 it makes MultiCore dramatically more useful... "
        },
        {
            "author": "Raghu kashyap",
            "id": "comment-12619531",
            "date": "2008-08-04T14:52:14+0000",
            "content": "+1 for it being in 1.3\n\nWe are using multicore and eagerly waiting for 1.3 "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12619533",
            "date": "2008-08-04T14:57:39+0000",
            "content": "Fixed dependency on Java 6; my bad, sorry Jeremy.\n\nSolved 2 questions pending from the previous patch:\n\n1 - Added schemaDir & configDir to solr core descriptors; this means all 'automatic' properties come as representations of values coming from the core descriptor. I removed the solr.core.instancePath and homogenized the solr.core.\n{instance,schema,config}\nDir properties to be expanded relative to the multicore instance dir if not absolute.\n2 - Added some checking/warning if some user defined properties collide with automatic ones during core creation; the system computed value is the one kept. The current list of automated properties (& example values):\nsolr.core.configDir = ..\\..\\..\\example\\multicore\\core0\\conf/\nsolr.core.configName = solrconfig.xml\nsolr.core.name = core0\nsolr.core.instanceDir = ..\\..\\..\\example\\multicore\\core0/\nsolr.core.schemaName = schema.xml\nsolr.core.schemaDir = ..\\..\\..\\example\\multicore\\core0\\conf/\n\nI'll udpate the issue description to reflect the current choices.\n\nNew (sub) issue/choice to make:\nThere is no way yet to specify properties through solrj when creating a core (nor a way to specify the core \n{config, schema}\n{Dir, Name}\n). Any preferred syntax? property.<name_of_property0>=<value_of_property0>&property.<name_of_property1>=<value_of_property1> is my current idea to pass them in a http request but this is heavy...\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12621121",
            "date": "2008-08-09T05:22:51+0000",
            "content": "i'm having trouble applying this patch... any chance you could generate an updated one? "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12621167",
            "date": "2008-08-09T18:14:49+0000",
            "content": "updated to trunk 684310 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12622393",
            "date": "2008-08-13T23:25:34+0000",
            "content": "I started digging into this patch today, making notes for myself as i go along, and revising them as i understand more and more about the code.   i still don't feel like i fully grasp a lot of this patch, but i have to go offline pretty soon, and i'm not sure i'll get a chance to dig into this again for a few days, so i wanted to post my rough notes so far. (i've done some minimal cleanup to make them wiki formatted, but they're still be in my convoluted stream of consciousness rambling)\n\nNOTE: the patch doesn't apply tothe trunk anymore (hey look at that, MultiCore.java is gone) so these are based on applying the patch to r684307.\n\n\n\tare there any unit tests specificly for this new stuff?  At a minimum the existing test configs should excercies this functionality so we have some confidence that it works.\n\n\n\n\n\tthe changes to the example configs seem overly contrived:\n\t\n\t\texcessivly using includes\n\t\tproperty for type name in both the fieldtype and field (which\n     makes it irrelevant what the actual value is \u2013 even if the property\n     isn't evaluated the literal string \"${id_type:id_t}\" is a valid\n     fieldtype name)\n\t\n\t\n\twe should reduce the usages in the example configs, and make them represent slightly more practical usecases...\n\t\n\t\t<import> to include different postCommit fragements depending\n     on master/slave property.\n\t\tpick dataDir based on corename\n\t\t<import> to add some field declarations to schema (not all)\n\t\tproperty to override which fieldtype name a field should use (leave the <fieldtype> declaration static)\n\t\n\t\n\n\n\n\n\t<fragement> should be used more consistently.  Even if the file being included already has a root node (and is wellformed) the <import> tag should inforce that the imported file be a valid fragement file so we know the file really was ment to be inlcuded.\n\n\n\n\n\t<import> seems like it should be named <include>\n\n\n\n\n\tI really don't understand ParamMap.imports().  for starters the javadocs seem like cut/paste mistake.  Beyond that: if I'm understanding the Jira comments, the String[] represents a \"pair\" of bits of info about a resource the first being the relative path as specified in the <import> tag, the second being the directory it was found in (or maybe the absolute path??) ... so what then is the key to the Map<String,String[]> ... what is the \"symbolic property\" ????  ... going deeper down the rabit hole, why do we need new public methods in SolrResourceLoader? what do they do that the existing methos didn't take care of? (they have no javadocs)\n\n\n\n\n\tis the new \"private InputStream open(String,String[])\" method in SolrResourceLoader suppose to be modifying the array that is passed to it? (it's not a documented side effect) ... even after readingteh docs for this method, and all 10 lines of code in the method, i'm still not sure i understand what it's doing or why (what does \"convenient to export\" and \"convenient to import\" mean?)\n\n\n\n\n\tDo we really need PropertyMap, Evaluator, and all of hte public methods they have to be public?  On the whole it seems like a lot of new plumbing is being exposed here \u2013 and we already have more exposed plumbing then we probably should.\n  It seems like the only API most code should need to worry about should be something like...\n\n   /**\n    * Given a DOM Document, and some properties identifing the current\n    * context, generates a new DOM Document when imports and property\n    * value substitutions performed.\n    * @param doc The Document to evaluate\n    * @param context existing variables that should be considered when\n    *                processing doc\n    * @param loader for resolving filenames\n    */\n    public static dom.Document evaluateProps(dom.Document doc,\n                                             Properties context,\n\t\t\t\t\t     SolrResourceLoader loader);\n\n\n ...and even that could probably be encapsulated and hidden inside of the Config class and called as part of it's constructor (with a new Properties or SolrParams constructor arg to specify the outer \"context\")\n\n\n\n\n\tthere seems to be an awful lot of code scattered arround checking if \"x != PropertyMap.SYSTEM_PROPERTIES\" and doing something special in that case ... whatever the concerns are about this, it should probably be handled by the impl of PropertyMap.SYSTEM_PROPERTIES (even if that means it needs to be a special subclass  of PropertyMap) so we don't have to worry about new code being added without remember to be as paranoid.\n\n\n\n\n\tthis is really unclear, even with the coment ...\n\n       // if this is a fragment, isfrag becomes true (thus the '=', *not* '==')\n       if (isfrag = \"fragment\".equals(walk.getNodeName()))\n\n\n  ... we can replace those two lines with these two lines and it's even clearer...\n\n       isfrag = \"fragment\".equals(walk.getNodeName())\n       if (isfrag)\n \n\n\n\n\n\n\tShould we be worried about removing some public static methods from DOMUtil?  It would probably be better to just stop using them, and mark them deprecated (no reason to risk breaking someone who decided to use them, even if the odds are low that anyone is).\n\n\n\n\nOn the whole: there is more complexity here then I would expect for the goal we are trying to accomplish, and it's not clear to me that it's necessary .... i haven't had the \"Ahhhh, i see now\" moment that makes me understand why the new code jumps through as many hoops as it does. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12623029",
            "date": "2008-08-15T21:33:02+0000",
            "content": "Thanks HossMan for the review;\nI've overhauled the code following your comments (more focused, less code, less public) & I'm writing more tests.\n\nOne important question: do we need or even want the \"include\" feature or should I drop it (at least for now)?\n\nShould be able to upload a \"take-2\" in a few days. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12623066",
            "date": "2008-08-16T00:51:31+0000",
            "content": "do we need or even want the \"include\" feature or should I drop it (at least for now)?\n\ndrop it...  for 1.3 this should focus on a coherent way to set the dataDir for multicore configs.  Anythign else can wait till later... "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12623484",
            "date": "2008-08-18T23:15:32+0000",
            "content": "Refactored following HossMan recommendations.\nThis still includes the \"include\" (was import) feature but removing it is easy (in Config.java) & will reduce modifications in ResourceLoader.java.\nAdded a specific test that loads a shared schema & config but uses properties to differentiate behavior (different locales, different dataDirs).\nIncludes a one letter fix in CoreContainer.load for aliases (get(a) instead of get).\nMore tests will follow (persist verification is \"manual\") & I'll try to cut the patch in 2 (properties - include).\nI might be busier in the coming days but will try not to slow down 1.3 release if next review says this is on the right track.\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12623495",
            "date": "2008-08-18T23:29:21+0000",
            "content": "I am leaving on vacation... and will be unable to give this any attention, so i have removed myself as the \"Assignee\" "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12624056",
            "date": "2008-08-20T17:19:00+0000",
            "content": "Here's another attempt on this issue.\n\n\n\tFour types of properties \u2013 core specific, implicit, global and system (evaluated in that order)\n\tSyntax for properties in solr.xml is modified slightly to use attributes instead of element values\n\n<solr persistent=\"false\">\n\n  <property name=\"var\" value=\"value\" />\n\n  <cores adminPath=\"/admin/cores\">\n    <core name=\"core0\" instanceDir=\"core0\">\n      <property name=\"var\" value=\"value\" />\n    </core>\n    <core name=\"core1\" instanceDir=\"core1\" />\n  </cores>\n</solr>\n\n\n\tSupported automatic or implicit properties are:\n\nsolr.core.instanceDir\nsolr.core.name\nsolr.core.configName\nsolr.core.schemaName\n\n\n\tSolrResourceLoader keeps a reference to the CoreDescriptor to get access to the core specific properties.\n\tPropertyReplacer is heavily borrowed from TemplateString in DataImportHandler. It is trimmed down to our needs and enhanced to support default values. TestPropertyReplacer is a unit test for this class. PropertyReplacer and TemplateString can be merged together in the future but at this stage I don't want us to have any regressions.\n\tIt doesn't support escaping variables like the previous DOMUtil code e.g. $${literal} gives you $${literal} but it used to give ${literal}. I don't think we need that capability anyway.\n\tNo support for fragment and imports \u2013 I'm strongly against it. I don't think there's anything which we can't do without them and they make for poor readability.\n\n\n\nReview comments and suggestions are invited. As soon as we are done with this issue we can start the release process for 1.3 "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12624114",
            "date": "2008-08-20T20:07:44+0000",
            "content": "Not sure this is my place to comment since I'm no committer but I don't see what this brings that the previous patch did not (and do see that 'import' or sharing schema/config is not a feature that should be discussed)..\nIt would have been helpful to me to understand why the updated patch is not even considered.\nAll yours then.\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12624237",
            "date": "2008-08-21T03:22:14+0000",
            "content": "Henri \u2013 You have been doing all the work on this so you are the best person to comment on it \n\nThe last patch was not applying to the trunk. It had a class called SolrProperties in the test sources which looked like a copy of MultiCoreExampleTestBase. It also looked like the last patch had some remnants from other multicore related patches. It was getting tough to get my head around the whole code path with Raw, Evaluator and Includes and I just tried to see if we can have a more simple way of solving the core problem i.e. property substitution in solconfig and schema to help with multi core installations.\n\nThe patch I uploaded has no support for multicore.properties \u2013 I probably overlooked it. How does this property file help as compared to specifying properties in solr.xml directly?\n\nI do not want to summarily dismiss 'import' or any other feature. Please feel free to help me with use-cases. I admit that I've not used multicore setup in multi-language environments so I may not have the insight that you have. In particular, I do not understand the use-case \"Change the general layout between data, config & schema directories\". The latest patch aims to fulfill the other two use-cases. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12624244",
            "date": "2008-08-21T04:13:51+0000",
            "content": "Henri - your indignation is understandable \n\nWe are in a hurry to make the 1.3 release and this is the last man standing. I also tried to apply the patch but it didn't quite apply on the trunk. With the trunk code changing in an hourly basis it can be frustrating at times for contributors submitting patch. \n\n\nProbably you can submit a modified patch or you can just add whatever is missing in shalin's patch and we can move forward. \n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12624369",
            "date": "2008-08-21T13:28:42+0000",
            "content": "New leaner version since there was indeed a simpler way to achieve the same (reviewing & friendly pressure does help to improve, thanks Shalin).\nFewer classes modified so the bulk of the code deals with going through XML configuration.\nI also removed loading properties from 'solr.properties' which was useless as it was.\nAdded a specific persistence verification & a multicore inspired test to verify shared schema/config configuration.\nI updated the issue description to reflect the patch feature & reasons for code modification in Coding Notes (intended to help review).\npatch applied cleanly with 'patch -u -p0 < solr-646.patch' on trunk 687771 "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12624384",
            "date": "2008-08-21T14:54:30+0000",
            "content": "The include allows to import a file within the schema (or a solrconfig); this can help de-clutter long schemas.\nI am not very happy about this feature . I feel it can seriously affect readability . Let us postpone this and have separate discussion on whether we should have it. \n\n\nI some how think that\n\n<property name=\"the-name\" value=\"the value\"/>\n<!-- is more readable and like ant than the foloowing one-->\n<property name=\"the-name\">the-value</property>\n\n\n\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12624450",
            "date": "2008-08-21T18:55:49+0000",
            "content": "The \"ant-ish\" syntax is certainly more common; I'll fix this.\n\n<property name=\"the-name\" value=\"the value\"/>\n\n\n\nAbout the include; I do have the use case and it does make my solrconfig & schema more readable. And HossMan did not rule it out as a \"no no\".\nI understand that there are mixed fillings about it though; what about putting it in with an \"experimental\" state? (big warning & boolean in solr.xml).\nSo we can have the discussion after letting people experiment; if response is bad or there are technical reasons to remove it, we'll just remove the code and be done (much easier than adding it later). "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12624457",
            "date": "2008-08-21T19:32:57+0000",
            "content": "I feel that including fragments deserves it's own jira issue and a discussion on solr-dev. I cannot imagine a use-case for including xml fragments which configurable properties cannot handle. We should remove it from this issue and let this one focus on configurable properties. Similarly, persisting a core through the admin handler is something which does not belong to this issue.\n\n\n\tThe Evaluator keeps a lot of state which may not be necessary. Why not delegate the house-keeping of expressions to the concerned class (CoreContainer, CoreDescriptor)?\n\n// the map of multicore/core scope name to expressions map\n  protected Map<String, Map<String, String>> exprMap;\n  // the map of multicore/core scope name to expressions\n  protected Map<String, Properties> propMap;\n  // the current expression scope (where new expressions are defined)\n  protected Map<String, String> expressions;\n  // the current expressions scope (where new expressions are defined)\n  protected Properties properties;\n\n\n\tEvaluator is once defined in DOMUtil and then extended in two places. In particular the one inside CoreContainer seems unnecessary.\n\tWhy are we going in a round about way of filling in properties in CoreContainer?\n\nProperties loaderProperties = new Properties();\nthis.loader = new SolrResourceLoader(dir, null, loaderProperties);\nFileInputStream cfgis = new FileInputStream(configFile);\nfinal Evaluator eval = new Evaluator();\n      Config cfg = new Config(loader, \"SOLR\", cfgis, null) {\n        @Override\n        public void substituteProperties(Properties properties) throws ParserConfigurationException, IOException, SAXException {\n          // expands the doc, inject new properties in loaderProperties\n          eval.substituteProperties(properties, doc);\n          doLog(log, properties);\n        }\n      };\n      cfg.substituteProperties(loaderProperties);\n\n\nI'm still trying to figure out the exact place where the loaderProperties is filled in with the values read from solr.xml\n\tAttaching a version to each core is something that we should not put inside the example solr.xml. I don't think it is a good use-case. If you move to a newer version, you'd still need to re-index, then why keep a versioned data directory? Except for possibly a data.dir property, there's little need to put anything there. It almost gives the idea that solr has become language-aware \n\tI agree to Hoss's recommendation of not removing public methods (though I did that myself in my patch)\n\n\n\nThe Evaluator has a lot of code for the functionality it provides. I felt that modifying the old substituteSystemProperties method by passing in a property object was all that is needed. I feel that things can be more simplified here before it can be committed. "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12624467",
            "date": "2008-08-21T20:09:57+0000",
            "content": "0 - I do use today an include mechanism of some sort so my field types are not defined in the schema; this allows to automate the schema generation from another tool & not have to deal with copying content.\n\n1 - the CoreContainer evaluator is a \"transient\" being; it keeps track of properties as they are \"read\" and how they are evaluated during configuration. It is not stored nor kept beyond the scope of load().\nI dont see what you mean by house keeping. The things we keep afterwards are property expressions (1 map in CoreContainer & 1 map per CoreDescriptor) and 1 Properties instance per SolrResourceLoader.\n\n2 - The CoreContainer Evaluator is the part that declares properties, assign them a scope, etc. The code is fairly well commented so I dont really get your comment. Anyway, it is necessary, for persistence to be idempotent, ie we should be able to write what we (just) read as in SolrProperties test, we need to keep these around.\n The Config evaluator is dealing with the include so I wont get there; what about the idea of an \"experimental\" state?\n\n3 - To keep the evaluator so we can extract the pieces of information it collected (cf 1).  The loaderProperties are filled in by the evaluator as the last step of its subsituteProperties method. We have to do it at the end so the original evaluation scope is preserved during the whole evaluation.\n\n4 - You misinterpret my example; when I'm changing some indexing/schema configuration in an heavy way, I like to be able to test it before, etc; these changes (like changing stemmer, synonyms, etc) require reindexing. So, the version I'm talking about is the 'index data' version. To be strict, I do consider modifyng the schema a \"major\" version and modifying config a \"minor\" one wrt to index reindex/reload. But that would make the example a bit terse.\n\n5 - I believe I did not remove any public method in the patch, did I?\n\n6 - The visitor pattern used in the original substituteSystemProperties has just been 'methodified'. The code is no different than what it was and it allows to implement just what's needed by derivation.\n\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12624485",
            "date": "2008-08-21T21:32:22+0000",
            "content": "Modified property definition syntax to follow ant's.\nRenamed test class.\nMade the include an experimental feature.\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12624593",
            "date": "2008-08-22T06:38:34+0000",
            "content": "understand that there are mixed fillings about it though; what about putting it in with an \"experimental\" state? (big warning & boolean in solr.xml).\n\nThe scope of this issue actually does not include that. That is why we can raise this as a separate issue. I understand that there are use cases which this may serve. I am more concerned about how it can promote practices which are undesirable. \n\n\n\nWe are very close to a release . So it is wiser to stick to the bare necessities than adding an experimental feature. Other features which are included in this issue have a go and we should not hold up the release for the want of a larger discussion and consensus. \n\nwe atleast have two '-1' on this .Ryan says 'drop it' and shalin is '-1' "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12624630",
            "date": "2008-08-22T09:10:56+0000",
            "content": "0 - I do use today an include mechanism of some sort so my field types are not defined in the schema; this allows to automate the schema generation from another tool & not have to deal with copying content. \nI agree that it may be useful for you but it is a big change to have at this point of time. It does not belong to this issue anyway. The changes in CoreAdminHandler are useful but it does not fit the description of this issue. Please raise another issue for these functionalities.\n\n1 - the CoreContainer evaluator is a \"transient\" being; it keeps track of properties as they are \"read\" and how they are evaluated during configuration. It is not stored nor kept beyond the scope of load(). I dont see what you mean by house keeping. The things we keep afterwards are property expressions (1 map in CoreContainer & 1 map per CoreDescriptor) and 1 Properties instance per SolrResourceLoader.\nKeeping the global expression in CoreContainer and the core-specific expressions in CoreContainer is fine. The evaluator does not need to store any information. It just needs to evaluate an expression found in a DOM node using the properties passed in to the substitute method.\n\n5 - I believe I did not remove any public method in the patch, did I?\nYes, that was an oversight on my part. Sorry about that.\n\n6 - The visitor pattern used in the original substituteSystemProperties has just been 'methodified'. The code is no different than what it was and it allows to implement just what's needed by derivation.\nI don't see why that is necessary at all. Truth be spoken, I feel we can do without Evaluator itself in it's current form.\n\nThe problem statement is \"We have a DOM tree where a node may have an expression which needs to be replaced by a property value\". The existing DOMUtil is already doing all this but only with a value determined from System.getProperty. The only extra functionality that we need is to look up the expression from a Properties object and if none found, then look up in System.getProperty. The CoreContainer and CoreDescriptor need to keep a Properties object which has the values core-specific, implicit and global in that fall-back order. The parsing and writing code is to be added to CoreContainer.\n\nI don't see why anything more would be necessary for solving this problem. I'm not comfortable with the large amount of changes when we are so close to releasing 1.3 "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12624813",
            "date": "2008-08-22T12:58:19+0000",
            "content": "Given that:\n1 - I've wasted too much time of too many people with a feature & code that's too complex/wide\n2 - The time & added delay it will take for me to create the sub-issues (for the 2 bugs in CoreContainer, 1 bug & 1 rfe for persistence), modify this issue description & examples and create the code (although I'm not sure that's needed or a desirable)\n3 - There is an alternate patch code ready that a committer has written that he's comfortable with that solves the property expansion problem and he has been kind enough not to commit it already\n\nLet's use the efficient route:\n1 - Push this solr-646 issue to a 'future release' date so it can be revisited if ever needed or at least serve as an example of \"things to not do when you contribute\"\n2 - Create a new issue for 1.3 that is solved by the alternative patch, commit it, close the issue & release 1.3\n\n\n\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12624866",
            "date": "2008-08-22T15:20:34+0000",
            "content": "Henri - this is very big of you!  It's good to see this flexibility.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12624897",
            "date": "2008-08-22T16:42:10+0000",
            "content": "Henri \u2013 This is indeed very big of you! I appreciate your support very much. Thank you!\n\nI shall create a new issue for this and attach a patch there. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12624920",
            "date": "2008-08-22T17:41:22+0000",
            "content": "Per Henri's suggestion, marking this for 1.4 \u2013 the core issues will be taken care of in SOLR-716 in 1.3 itself "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12624935",
            "date": "2008-08-22T18:13:28+0000",
            "content": "I've attempted to catch up on the comments on this issue, and somewhere i got pretty lost (i haven't even tried looking at the patches yet) but FWIW: there is at least the huge use cases i know of in favor of supporting include/import related to master/slave differences...\n\n\n\tonly masters should trigger snapshot creation in postCommit/postOptimize hooks, only slaves should use QuerySenderListener to do static warming of things in firstSearcher/newSearcher\n\tdifferent cache configs for master/slave \u2013 want smaller caches on maters, with little/no autowarm, and in some cases don't want certain user caches to exist at all\n\tdon't register certain intensive request handlers on masters at all, so people don't inadvertantly hose the master by querying it directly.\n\n\n\n...some of these things might be achieved by having a lot of properties, but ideally you want one property with a value of either \"master\" or \"slave\" and use that as part of hte name of fragment files to include.\n\nAt CNET, we've been using m4 macros to generate master/slave configs from the same template file since forever, but it would certainly be nice to have Solr take care of this natively \u2013 and it would make promoting a slave to a master in failover situations trivial (just bounce the port with one JNDI variable changed)\n\nBUT Solr users have lived without this feature for along time, not need to rush it if hte parties involved think it's better to hold off until after 1.3 "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12625095",
            "date": "2008-08-23T19:23:12+0000",
            "content": "Updated to be based on SOLR-716 commit. Thanks Shalin.\n\nSome improvement over SOLR--716 :\n\n\tin solr.xml, /Solr/cores/core attributes can use properties defined in /solr or system (including name/aliases)\n\tpersistence of property expressions (rather than values)\n\tAll core descriptor members can be expressions (related to SOLR-715 )\n\tfixes a bug in persistence related to SOLR-718 commit (will have to create an issue for this)\n\tIf a core was declared with an expression as its name and its aliases haven't changed, persistence will rewrite the property expression.\n\n\n\nThat is, if you solr.xml does something like:\n\n<core>\n...\n  <cores adminPath=\"/admin/cores\">\n    <core name=\"${en-cores}\" instanceDir=\"./\">\n...\n</core>\n\n\n\nThe expression '${en-cores}' will be written back (if you did not realias the core of course).\n\nSome improvements over previous version:\nThere are now 2 ways to include files\nOne is a tribute to SOLR-712 (Thanks Amit) which means to include through entities with the twist that an entity resolver exploit properties in URIs in the 'solr:' protocol:\n\n<!DOCTYPE schema [\n<!ENTITY textL10n SYSTEM \"solr:${l10ntypes}\">\n]>\n<schema name=\"example core ${l10n}\" version=\"1.1\">\n  <types>\n   <fieldtype name=\"string\"  class=\"solr.StrField\" sortMissingLast=\"true\" omitNorms=\"true\"/>\n   <!--include resource=\"text-l10n.xml\"/-->\n   &textL10n;\n  </types>\n  ...\n</schema>\n\n\n\nOr the easier to read way (imho):\n\n<schema name=\"example core ${l10n}\" version=\"1.1\">\n  <types>\n    <fieldtype name=\"string\" class=\"solr.StrField\" sortMissingLast=\"true\" omitNorms=\"true\"/>\n\t<include name='text-l10n.xml'/>\n  </types>\n...\n</schema>\n\n\n\nThere are tests for both versions.\nNow,  we've got options.  "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12628837",
            "date": "2008-09-06T04:42:38+0000",
            "content": "I may not be able to look at this for a week or two. Removing myself as the assignee so that I don't hold back others. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12674123",
            "date": "2009-02-17T07:29:27+0000",
            "content": "Marked for 1.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872563",
            "date": "2010-05-27T22:07:55+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043833",
            "date": "2011-06-03T16:47:18+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106303",
            "date": "2011-09-16T14:50:28+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234761",
            "date": "2012-03-21T18:09:13+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717304",
            "date": "2013-07-23T18:47:48+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971346",
            "date": "2014-04-16T12:57:50+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Gavin",
            "id": "comment-16574126",
            "date": "2018-08-09T01:01:32+0000",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' "
        }
    ]
}