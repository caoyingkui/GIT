{
    "id": "LUCENE-8099",
    "title": "Deprecate CustomScoreQuery, BoostedQuery and BoostingQuery",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "7.3"
        ]
    },
    "description": "After LUCENE-7998, these three queries can all be replaced by a FunctionScoreQuery.  Using lucene-expressions makes them much easier to use as well.",
    "attachments": {
        "LUCENE-8099-2.patch": "https://issues.apache.org/jira/secure/attachment/12904375/LUCENE-8099-2.patch",
        "LUCENE-8099.patch": "https://issues.apache.org/jira/secure/attachment/12902062/LUCENE-8099.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16290755",
            "date": "2017-12-14T12:03:19+0000",
            "content": "Patch deprecating these three queries and adding explanatory javadoc\n\n\n\tSolr used BoostedQuery in a few places, this is replaced\n\tHighlighters now understand FunctionScoreQuery\n\tFixes a bug in ExpressionValueSource, where rewrite() didn't actually use the rewritten values\n\n ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16293824",
            "date": "2017-12-16T14:25:23+0000",
            "content": "+1 to make Lucene easier to use by removing redundant and confusing duplicative Query subclasses pertaining to boosting.\nNow to your approach...\n\nIt should be stated clearly is issues when we make changes to dependencies.  Here you've made the queries module now depend on the expressions module.  Consequently, all other modules that depend on the queries module (e.g. highlighter) now transitively depend on the expressions module.\n\nPlease update this for FunctionScoreQuery: org.apache.lucene.search.uhighlight.MultiTermHighlighting#extractAutomata     Boy it would be nice if we had a Query visiting API \u2013 LUCENE-3041\n\nIs it heavyweight to suggest using the expressions module just to multiply a score?  I don't know.  Even if it isn't it seems more complex as a user (to me).  Perhaps there could be a convenience method so that there is less we need to remember to multiply the score by some value-source?  Or can we simply add some score-multiplying value-source?\n\nMaybe BoostQuery could use a bit of Javadoc to mention to the reader that the queries module contains FunctionScoreQuery for more advanced boosting than constant multiplication. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16293837",
            "date": "2017-12-16T15:07:28+0000",
            "content": "Thanks for reviewing David\n\nHere you've made the queries module now depend on the expressions module\n\nThis is a test dependency only, so it won't affect any downstream modules.\n\norg.apache.lucene.search.uhighlight.MultiTermHighlighting\n\nWill update.  And yes, it would make life much easier if we could recurse query trees...\n\nIs it heavyweight to suggest using the expressions module just to multiply a score?\n\nDoubleValuesSource had a helper to create sources that used arbitrary functions when I first committed it, but I removed it a bit later because it messed up equality tests (essentially, you can't check Java closures for equality).  I think expressions are a good solution?  They allow for hashcode/equals tests, they have a very simple syntax, and they're completely general.  My worry about adding a special score-multiplying source is that then you start to add other specialised sources, and we end up with the existential horror that is the queries.function.valuesource package.  We could maybe make SimpleBindings more user friendly in another issue if you think it's still complex.\n\nMaybe BoostQuery could use a bit of Javadoc\n\nGood idea ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16294508",
            "date": "2017-12-18T04:23:09+0000",
            "content": "Oh, you're right of course about the dependency; I missed the \"test\" scope.\n\nRE DoubleValueSource helper: which issue do you refer to?  I'd like to learn more.  I found LUCENE-7736 though the committed code does show that the lambdas / \"ReaderFunction\" instances are in fact compared for equality in org.apache.lucene.queries.function.IndexReaderFunctions.IndexReaderDoubleValuesSource   \n\nI think score-multiplication is extremely common.  I like the utility method you did here for Solr but that's harder to do in Lucene land because it uses various modules (expressions + queries) that don't depend on each other.  If we were to reconsider adding more direct functionality for this, perhaps it might add no new public classes \u2013 just a static factory method on FunctionScoreQuery?  Something to consider. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16295070",
            "date": "2017-12-18T14:39:57+0000",
            "content": "RE DoubleValueSource helper: which issue do you refer to?\n\nLUCENE-7723\n\nSomething to consider\n\nLet's wait and see if questions appear on the list after deprecation?  Expressions are going to be much more flexible than a static method. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16295088",
            "date": "2017-12-18T14:56:18+0000",
            "content": "Patch adding support to MultiTermHighlighting and javadocs to BoostQuery ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16295266",
            "date": "2017-12-18T17:08:57+0000",
            "content": "+1 LGTM, thanks Alan. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16295338",
            "date": "2017-12-18T17:55:05+0000",
            "content": "Commit a41643285e8ea453da2b0b7e7ebbf9070fe48db0 in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a416432 ]\n\nLUCENE-8099: Deprecate CustomScoreQuery, BoostedQuery, BoostingQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16295339",
            "date": "2017-12-18T17:55:07+0000",
            "content": "Commit b01e6023e1cd3c62260b38c05c8d145ba143a2ac in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b01e602 ]\n\nLUCENE-8099: Deprecate CustomScoreQuery, BoostedQuery, BoostingQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16295340",
            "date": "2017-12-18T17:55:09+0000",
            "content": "Commit c27099b4d1578dd37c284a4c23f3f812d98fe939 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c27099b ]\n\nLUCENE-8099: Remove deprecated CustomScoreQuery, BoostedQuery, BoostingQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16295341",
            "date": "2017-12-18T17:55:35+0000",
            "content": "Thanks David! ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16295407",
            "date": "2017-12-18T18:40:39+0000",
            "content": "Commit dfaf023d4a97f4356fc256a94951443b1893876f in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dfaf023 ]\n\nLUCENE-8099: Fix xmlqueryparser tests ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16296473",
            "date": "2017-12-19T08:53:27+0000",
            "content": "Commit 493220ac3be6b42dea8b5a75d1ecf2063f6da92a in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=493220a ]\n\nLUCENE-8099: Fix IntelliJ dependencies ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16296474",
            "date": "2017-12-19T08:53:29+0000",
            "content": "Commit 79073fafd34341afb575b4a045f2511d35d30d90 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=79073fa ]\n\nLUCENE-8099: Fix IntelliJ dependencies ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16308740",
            "date": "2018-01-02T21:34:50+0000",
            "content": "I'm coming at this kind of late \u2013 but I have to say i'm -1 to this change.\n\nWhat exactly is the motivation here?\n\nIf the goal is to reduce \"similar\" code in Lucene, then that's fine \u2013 we can/should certainly refactor these classes to consolidate their implementation \u2013 but why deprecate/remove them completely?\n\nLook at this example of a suggested replcament in the javadocs...\n\n\n *     Query balancedQuery = new BoostingQuery(positiveQuery, negativeQuery, 0.01f);\n...\n * Clients should instead use FunctionScoreQuery and the lucene-expressions library:\n * <pre>\n *   SimpleBindings bindings = new SimpleBindings();\n *   bindings.add(\"score\", DoubleValuesSource.SCORES);\n *   bindings.add(\"context\", DoubleValuesSource.fromQuery(new ConstantScoreQuery(myContextQuery, boost)));\n *   Expression expr = JavascriptCompiler.compile(\"score * context\");\n *   FunctionScoreQuery q = new FunctionScoreQuery(inputQuery, expr.getDoubleValuesSource(bindings));\n * </pre>\n\n\n\n...even if that new code is just as efficient as the old code (Is it?) why make our users replace 1 line with 7?  Why should a \"novice\" user who wants to use a simple concept like a \"boosted query\" need to dig into understanding \"Expression Bindings\" and ValueSources\n\nWhy aren't we just refactoring the internals of classes like BoostingQuery so that they subclass FunctionScoreQuery and provide (simple) backcompat constructors?\n\n\n\nAlso: Why does this change flat out remove all the existing test code of these deprecated/removed classes?  \n\nEven if the classes are being removed, shouldn't the eisting tests be refactored to assert that the \"new\" way of doing things (via FunctionScoreQuery) produces the same \"expected\" results? ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16309384",
            "date": "2018-01-03T09:52:23+0000",
            "content": "Hi Hoss Man\n\nI had a few reasons for wanting to do this:\n\n\tmigrating from ValueSource to DoubleValuesSource - this makes BoostedQuery and CustomScoreQuery essentially the same as FunctionScoreQuery, with a specific source calculation.  CSQ has a clunky API that doesn't deal well with sparse value sources, so moving to expressions is much better (I think, at any rate)\n\tAPI name confusion.  We have BoostQuery, BoostedQuery and BoostingQuery - can you tell without checking the javadocs what each one does, and how it's different?\n\tImplementation consolidation, as you describe.\n\n\n\nRe testing, replacement tests had already been committed as part of another issue, in TestFunctionScoreQuery.  BoostingQuery didn't have any functionality tests at all, just an equality check and a rewrite check, so the test coverage is actually more extensive now.\n\nwhy make our users replace 1 line with 7?\n\nI agree this isn't great.  And in fact, looking again at the example javadoc, it doesn't correctly replace what BoostingQuery does.  Maybe we should add some static methods to FunctionScoreQuery to allow for simple boosting?  Something like:\n\nQuery boostedbyQuery = FunctionScoreQuery.boostByQuery(input, boostQuery, boostValue);\nQuery boostedByValue = FunctionScoreQuery.boostByValue(input, boostValuesSource);\n\n\nWould that meet your concerns? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16309504",
            "date": "2018-01-03T11:19:27+0000",
            "content": "Here's a patch demonstrating the static methods idea (against master, backport would include a change to the BoostingQuery/BoostedQuery/CustomScoreQuery javadocs) ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16311873",
            "date": "2018-01-04T19:09:35+0000",
            "content": "Re testing, replacement tests had already been committed as part of another issue\n\nCool \u2013 thank you for clarifying, that wasn't obvious to me when skimming these particular commits.\n\nMaybe we should add some static methods to FunctionScoreQuery to allow for simple boosting? \n\n+1\n\nAs i mentioned, I think it would be nice for backcompat if we could keep the old new FOO(xxx) constructors working as trivial subclasses of FunctionScoreQuery \u2013 but I get your point about wanting to reduce confusion/ambiguity in the names.   A one line drop in replacement for each of the 3 previous constructors that's easy for people to batch replace on upgrade should be adequate.\n\nAs i alluded to in my earlier comment, the one other concern I have is about the relative performance of the old classes vs using the FunctionScoreQuery. I haven't wrapped my head around the old code vs new code enough to have any concrete concerns/objections \u2013 I'm just looking for some explicit \"vote of confidence\" from folks like you who have looked at it in depth that you've thought about it and don't see any reason why the new cosolidated impl would be slower then the old impls.  \n\n(The one thing that jumped out at me the other day was the use of a compiled expressions like \"score * context\" in each query instance in the suggested replacement code for some queries \u2013 but it's not clear to me if that would still be involved based on your latest patch) ",
            "author": "Hoss Man"
        },
        {
            "id": "comment-16312810",
            "date": "2018-01-05T10:06:13+0000",
            "content": "Commit 42154387d4f2a6060da09c4236e2a8dbb575c59e in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4215438 ]\n\nLUCENE-8099: Add some static methods to FunctionScoreQuery to replace Boosting/BoostedQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16312811",
            "date": "2018-01-05T10:06:15+0000",
            "content": "Commit 79bd05da4dcbb584fffaf62bea683c00d3ac432c in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=79bd05d ]\n\nLUCENE-8099: Add some static methods to FunctionScoreQuery to replace Boosting/BoostedQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16312858",
            "date": "2018-01-05T10:12:11+0000",
            "content": "Commit 0c18acb00f3083553e782c916638dfd6bb15cfe9 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0c18acb ]\n\nLUCENE-8099: Update MIGRATE.txt ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16312867",
            "date": "2018-01-05T10:18:09+0000",
            "content": "I committed those extra static methods, and improved the javadocs and migration messages.\n\nRe performance: there shouldn't be any reason for things to be slower, and FunctionScoreQuery is fully integrated with things like two-phase iteration, so should if anything be faster than the queries it's replacing.  DoubleValuesSource is iterator based and handles things like existence checks with fewer branches than ValueSource; same with Expressions, which are compiled to java bytecode.  It might be useful to add some examples of these queries to the benchmark tests though. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16313220",
            "date": "2018-01-05T14:45:00+0000",
            "content": "The two additional convenience methods with backing value sources are fantastic (thank you) \u2013 it addresses my earlier concerns.   it seems lightweight and needn't involve another module (expressions).  At the time I said this, you responded to say this:\n\nDoubleValuesSource had a helper to create sources that used arbitrary functions when I first committed it, but I removed it a bit later because it messed up equality tests (essentially, you can't check Java closures for equality).\n\nYour latest commit doesn't show any changes to equality tests... are we talking about different things?  Was Hoss's \"-1\" what pushed you over to make these changes?  I'm wondering if I should give -1's more... I think I felt about as strongly as Hoss but didn't express it. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16313328",
            "date": "2018-01-05T15:41:32+0000",
            "content": "What pushed me over the line on the static methods was the realisation that my suggested replacement for BoostingQuery didn't do what I thought it was doing, although Hoss's -1 helped  . And I think I also misread your earlier comment about static methods, thinking that you meant them for creating value sources, rather than as query replacements.\n\nThere isn't an issue with equality comparisons here, because the static methods use concrete classes with .equals() and .hashCode() implemented on them for their sources.  They should have tests for this though, will add them in. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16313373",
            "date": "2018-01-05T16:19:52+0000",
            "content": "Commit e3c1947506b65bec93834e0607dc05a86537685e in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e3c1947 ]\n\nLUCENE-8099: Add equality tests for FunctionScoreQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16313374",
            "date": "2018-01-05T16:19:55+0000",
            "content": "Commit 3980aea18ded0a526900dd649fd5926ae65c3897 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3980aea ]\n\nLUCENE-8099: Add equality tests for FunctionScoreQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16313443",
            "date": "2018-01-05T17:01:13+0000",
            "content": "With the addition of the nice new static utility methods on FunctionScoreQuery, I think you can replace the change you did to Solr's BoostQParserPlugin to simply be: return FunctionScoreQuery.boostByValue(input, vs.asDoubleValuesSource());  Maybe then inline it; I would but it's up to you.  Also the MIGRATE.txt notes should mention that these are replacements to some of the classes deleted here. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16316013",
            "date": "2018-01-08T10:09:00+0000",
            "content": "Commit 95e98e1b41c70dff4d3a197b4d510da83dd7857a in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=95e98e1 ]\n\nLUCENE-8099: Replace BoostQParserPlugin.boostQuery() with FunctionScoreQuery.boostByValue() ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16316014",
            "date": "2018-01-08T10:09:03+0000",
            "content": "Commit 0744fea821366a853b8e239e766b9786ef96cb27 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0744fea ]\n\nLUCENE-8099: Replace BoostQParserPlugin.boostQuery() with FunctionScoreQuery.boostByValue() ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16316017",
            "date": "2018-01-08T10:09:44+0000",
            "content": "I removed BoostQParserPlugin.boostQuery().  MIGRATE.txt already has a bit about the new static methods. ",
            "author": "Alan Woodward"
        }
    ]
}