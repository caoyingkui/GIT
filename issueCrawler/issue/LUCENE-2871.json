{
    "id": "LUCENE-2871",
    "title": "Use FileChannel in FSDirectory",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Explore using FileChannel in FSDirectory to see if it improves write operations performance",
    "attachments": {
        "LUCENE-2871.patch": "https://issues.apache.org/jira/secure/attachment/12468513/LUCENE-2871.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-16T20:57:24+0000",
            "content": "Patch supporting using file channel to write. FSDirectory still retain the ability to use RAF for writes.\n\nFSDirectory#setUseChannelOutput: Allows to revert back to use RAF by setting to false.\nFSDirectory#setCacheChannelBuffers: Allow to control if, when using file channel, buffers should be cached. ",
            "author": "Shay Banon",
            "id": "comment-12982383"
        },
        {
            "date": "2011-01-19T17:09:27+0000",
            "content": "I attempted to benchmark this patch, testing indexing time for Wikipedia docs, but I hit this exception:\n\n\nException in thread \"Lucene Merge Thread #49\" org.apache.lucene.index.MergePolicy$MergeException: java.nio.BufferOverflowException\n\tat org.apache.lucene.index.ConcurrentMergeScheduler.handleMergeException(ConcurrentMergeScheduler.java:507)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:472)\nCaused by: java.nio.BufferOverflowException\n\tat java.nio.Buffer.nextPutIndex(Buffer.java:501)\n\tat java.nio.DirectByteBuffer.putLong(DirectByteBuffer.java:745)\n\tat org.apache.lucene.store.FSDirectory$FSChannelIndexOutput.writeLong(FSDirectory.java:706)\n\tat org.apache.lucene.index.codecs.PrefixCodedTermsWriter.writeTrailer(PrefixCodedTermsWriter.java:146)\n\tat org.apache.lucene.index.codecs.PrefixCodedTermsWriter.close(PrefixCodedTermsWriter.java:129)\n\tat org.apache.lucene.index.PerFieldCodecWrapper$FieldsWriter.close(PerFieldCodecWrapper.java:80)\n\tat org.apache.lucene.index.SegmentMerger.mergeTerms(SegmentMerger.java:559)\n\tat org.apache.lucene.index.SegmentMerger.merge(SegmentMerger.java:120)\n\tat org.apache.lucene.index.IndexWriter.mergeMiddle(IndexWriter.java:3084)\n\tat org.apache.lucene.index.IndexWriter.merge(IndexWriter.java:2768)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler.doMerge(ConcurrentMergeScheduler.java:379)\n\tat org.apache.lucene.index.ConcurrentMergeScheduler$MergeThread.run(ConcurrentMergeScheduler.java:447)\n\n\n\nThis was after adding ~6 M docs... the 100K doc index built just fine.  Shay any ideas? ",
            "author": "Michael McCandless",
            "id": "comment-12983798"
        },
        {
            "date": "2011-01-20T11:13:10+0000",
            "content": "Strange, did not get it when running the tests, will try and find out why it can happen. ",
            "author": "Shay Banon",
            "id": "comment-12984134"
        },
        {
            "date": "2011-01-20T11:27:20+0000",
            "content": "Yeah, me neither \u2013 tests all pass when I force dir to eg NIOFSDir, and, my benchmark runs on the 100K index; just fails for the 10M index... curious. ",
            "author": "Michael McCandless",
            "id": "comment-12984139"
        },
        {
            "date": "2011-01-20T11:52:07+0000",
            "content": "Looking at the current patch, the class seems wrong. In my opinion, this should be only in NIOFSDirectory. SimpleFSDir should only use RAF. ",
            "author": "Uwe Schindler",
            "id": "comment-12984145"
        },
        {
            "date": "2011-01-20T12:42:30+0000",
            "content": "Fixed Buffer Overflow exception (I hope, can't really recreate it, mike can...). Also, per the IRC discussion, made SimpleFSDirectory default to not use the file channel output, while NIO and MMap default to use it. One can still control if it will be used or not using the setter method. ",
            "author": "Shay Banon",
            "id": "comment-12984161"
        },
        {
            "date": "2011-01-20T14:30:39+0000",
            "content": "Looking at the current patch, the class seems wrong. In my opinion, this should be only in NIOFSDirectory. SimpleFSDir should only use RAF.\n\nIts a good question, not sure what to do with it. Here is the problem. The channel output can be used with all 3 FS dirs (simple, nio, and mmap), and actually might make sense to be used even with SimpleFS (i.e. using non nio to read, but use file channel to write). In order to have all of them supported, currently, the simplest way is to put it in the base class so code will be shared. On IRC, a discussion was made to externalize the outputs and inputs, and then one can more easily pick and choose, but I think this will belong on a different patch. ",
            "author": "Shay Banon",
            "id": "comment-12984206"
        },
        {
            "date": "2011-01-20T15:24:45+0000",
            "content": "Before arguing where to put this new IndexOutput, I think it's wise to have a benchmark proving we need it at all.\nI have serious doubts FileChannel's going to outperform RAF.write(). Why should it?\nAnd for the purporses of benchmark it can be anywhere. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12984222"
        },
        {
            "date": "2011-01-20T16:28:39+0000",
            "content": "Agreed Earwin, lets first see if it make sense, this is just an experiment and might not make sense for single threaded writes. ",
            "author": "Shay Banon",
            "id": "comment-12984263"
        },
        {
            "date": "2011-01-20T20:17:45+0000",
            "content": "OK \u2013 I was able to index 10M docs w/ the new patch.  And search results are identical.\n\nBut the indexing time on trunk vs the patch were nearly identical \u2013 536.80 sec (trunk) and 536.06 (w/ patch).  But, this is on a fast machine, lots of RAM (so writes go straight to buffer cache) and an SSD, using 6 indexing threads. ",
            "author": "Michael McCandless",
            "id": "comment-12984373"
        }
    ]
}