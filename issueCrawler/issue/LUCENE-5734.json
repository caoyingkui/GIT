{
    "id": "LUCENE-5734",
    "title": "HTMLStripCharFilter end offset should be left of closing tags",
    "details": {
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "modules/analysis"
        ],
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": []
    },
    "description": "Consider this simple input:\n\n<em>hello</em>\n\n\nto be analyzed by HTMLStripCharFilter and WhitespaceTokenizer.\nYou get back one token for \"hello\".  Good.  The start offset of this token is at the position of 'h' \u2013 good.  But the end offset is surprisingly plus one to the adjacent </em>.  I argue that it should be plus one to the last character of the token (following 'o').\n\nFYI it behaves as I expect if after hello is an XML entity such as in this example: \n\nhello&nbsp;\n\n The end offset immediately follows the 'o'.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14017822",
            "author": "Alan Woodward",
            "content": "Steve Rowe and I discussed this a while back - there are good use cases for offsets to be both before and after the trailing tag.  I have a separate CharFilter somewhere that reports offsets the way you want here, will try and dig it out and attach it as a patch. ",
            "date": "2014-06-04T16:28:54+0000"
        },
        {
            "id": "comment-14017826",
            "author": "David Smiley",
            "content": "FYI this triggered my interest because I'm trying to highlight XML.  Technically I'm not using Lucene/Solr's highlighter as I'm doing something custom.  I'm going to insert special demarcation markup into the source text at the offsets that I find.  My current work-around is to detect that the source text has a closing element at the end offset, and then adjust for it if found.  Not too hard for me. ",
            "date": "2014-06-04T16:30:41+0000"
        },
        {
            "id": "comment-14017831",
            "author": "David Smiley",
            "content": "Alan Woodward ok then it should be configurable, and consistent too.  if the user wants a closing element offset to be included with the token (as it currently does) then then an adjacent opening element should mark the start of the token too.  IMO it shouldn't work this way by default, though. ",
            "date": "2014-06-04T16:34:49+0000"
        },
        {
            "id": "comment-14017912",
            "author": "Steve Rowe",
            "content": "Steve Rowe and I discussed this a while back\n\nOn twitter: https://twitter.com/romseygeek/status/433553268577681408 ",
            "date": "2014-06-04T17:37:32+0000"
        },
        {
            "id": "comment-14018003",
            "author": "David Smiley",
            "content": "The essential part of that conversation you had on Twitter, Steve Rowe, is this:\n\nic - i guess the only awkwardness would be embedded inline tags that produce single tokens: \"some<b>thing</b>\" -> \"something\"\n\nIn that case, where the token includes an opening tag, I would expect the end offset to be where it is placed now, after the close tag.  But otherwise (the case I presented) I wouldn't expect this. ",
            "date": "2014-06-04T18:52:54+0000"
        },
        {
            "id": "comment-14018010",
            "author": "Steve Rowe",
            "content": "Right, but you can't have it both ways, though - you have to make a choice. ",
            "date": "2014-06-04T18:55:16+0000"
        },
        {
            "id": "comment-14019271",
            "author": "David Smiley",
            "content": "Simply re-stating my expectation of how it should work from IRC:\nMy expectation is that the startOffset and endOffset of a token should be directly adjacent to the token text in the original text.  This is the case for startOffset, but with HTMLStripCharFilter (and maybe others?) endOffset isn't; it follows elided (stripped) characters.\n\nI don't think there's a rule it should be any which way, but I claim it should work this way \u2013 FWIW I think it's intuitive.  Never mind what I said about it being sensitive to an inner opening tag; I can live without that complication.\n\n ",
            "date": "2014-06-05T20:59:49+0000"
        },
        {
            "id": "comment-14019325",
            "author": "Steve Rowe",
            "content": "Paraphrasing my answer to David from IRC: \"adjacency\" doesn't fully describe the effect you're looking for, since text is adjacent both before and after both opening and closing tags.\n\nSemantics aside, I agree that moving offsets prior to closing tags would align better with intuitive expectations, and would very likely reduce the number of fixups highlighters would have to make to balance tags for any given snippet within marked up text.\n\nMy only remaining concern is whether changing the behavior will negatively affect existing users.  Maybe we could make the behavior configurable?  If that's done, there remains the question of whether to leave the default behavior as it is now, or make the default be the new behavior. ",
            "date": "2014-06-05T21:52:41+0000"
        },
        {
            "id": "comment-14019355",
            "author": "Steve Rowe",
            "content": "FYI it behaves as I expect if after hello is an XML entity such as in this example: hello&nbsp;\n\nI should point out that HTMLStripCharFilter only accepts the named character entities defined in the HTML 4.0 spec, which happens to include the predefined XML entities (&gt;, &lt;, &quot;, &apos;, and &amp;).  &nbsp; is specifically not an XML entity, at least not as understood by HTMLStripCharFilter.  I mention this only to point out that HTMLStripCharFilter doesn't parse XML for entity declarations, and will not honor them if they appear. ",
            "date": "2014-06-05T22:27:35+0000"
        },
        {
            "id": "comment-14021289",
            "author": "Alan Woodward",
            "content": "I've put our charfilter on github here: https://github.com/flaxsearch/htmlcharfilter\n\nIt has a dependency on Jericho HTML parser (http://jericho.htmlparser.net/docs/index.html), so I don't think it should go into the lucene core, but it's a nice side-project. ",
            "date": "2014-06-08T19:36:16+0000"
        },
        {
            "id": "comment-14025659",
            "author": "David Smiley",
            "content": "I had a realization this weekend.  I don't actually think there's a problem with HTMLStripCharFilter.  It just strips.  The non-stripped characters should map to the same location as the input (and they do).  Naively, correctOffset() shouldn't be called on the filter with a stripped offset provided because the filter shouldn't be seeing those stripped characters in the first place.  Well actually, every Tokenizer calls correctOffset(endOffset) wherein endOffset points to one character beyond the last character.  I don't think someone thought of the ramifications of this; at least it rarely matters.  What all Tokenizers could do to correct the problem is correctOffset(endOffset-1)+1.  That's a little awkward so perhaps a simple convenience method could be added such as CharFilter.correctEndOffset().  It's also a single spot to potentially vary behavior between 5x/4x, or by looking at the lucene version, or even making this a configurable option on the CharFilter.\n\nI tried another solution idea which is to modify BaseCharFilter.correct so that it does not \"correct\" the first character of an elided span, but it didn't seem to work for non-elided cases so I dropped that idea.\n\nHere is a test method I added to TestMappingCharFilter locally, for convenience of experimentation, that fails now.  I think it should pass:\n\n  public void testEndOffset() throws IOException {\n    NormalizeCharMap.Builder builder = new NormalizeCharMap.Builder();\n    builder.add( \"elided\", \"\" );\n    builder.add( \"t\", \"TOKEN\" );//expanded\n\n    final NormalizeCharMap normMap = builder.build();\n    String testString = \"telided\";\n    CharFilter cs = new MappingCharFilter( normMap,\n        new StringReader( testString ) );\n    TokenStream ts = whitespaceMockTokenizer(cs);\n    assertTokenStreamContents(ts,\n        new String[]{\"TOKEN\"},\n        new int[]{0},\n        new int[]{1},\n        testString.length()\n    );\n  }\n\n\nIt's failing because it expects endOffset to be 7 (the length of the whole string), not 1.\n\nOpinions? ",
            "date": "2014-06-09T19:59:47+0000"
        },
        {
            "id": "comment-14025791",
            "author": "Steve Rowe",
            "content": "David, I agree that for end offsets, what you want is correctOffset(endOffset-1)+1.  \n\n+1 for a new convenience method CharFilter.correctEndOffset(). ",
            "date": "2014-06-09T21:42:21+0000"
        },
        {
            "id": "comment-15829664",
            "author": "Adrien Grand",
            "content": "+1 to having different methods to correct start offsets and end offsets, and making HTMLStripCharFilter do correctOffset(endOffset-1)+1 for end offsets. However I would suggest that we still make other char filters correct end offsets the same way as start offsets: HTMLStripCharFilter is safe since it may only remove characters. However other char filters may introduce characters which make  correctOffset(endOffset-1)+1 unsafe as we could more easily create tokens that have greater start offsets than end offsets. ",
            "date": "2017-01-19T10:19:23+0000"
        }
    ]
}