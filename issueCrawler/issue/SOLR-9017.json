{
    "id": "SOLR-9017",
    "title": "Implement PreparedStatementImpl parameterization",
    "details": {
        "components": [
            "SolrJ"
        ],
        "type": "Sub-task",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Reopened",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "SOLR-8809 implemented prepared statements to avoid a NPE when clients were connecting. The next step is to flesh out the rest of the class and implement parameterization.",
    "attachments": {
        "SOLR-9017.patch": "https://issues.apache.org/jira/secure/attachment/12799809/SOLR-9017.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-04-20T19:22:30+0000",
            "author": "Kevin Risden",
            "content": "Depends upon some of the cleanup for StatementImpl from SOLR-9020. ",
            "id": "comment-15250536"
        },
        {
            "date": "2016-04-20T20:04:49+0000",
            "author": "Kevin Risden",
            "content": "First pass at implementation. This needs some more tests and another look at it. Currently there are 2 questions:\n\n1. If not all parameters are set before execution what happens?\n2. For strings, do quotes need to be added for the string replacements? ",
            "id": "comment-15250598"
        },
        {
            "date": "2016-04-20T20:23:56+0000",
            "author": "Kevin Risden",
            "content": "Some of the references I've been using to understand PreparedStatement usage and implementation:\n\n\thttps://docs.oracle.com/javase/tutorial/jdbc/basics/prepared.html\n\thttps://docs.oracle.com/javase/8/docs/api/java/sql/PreparedStatement.html\n\thttps://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet\n\n\n\nShould probably look at how MySQL does it. ",
            "id": "comment-15250639"
        },
        {
            "date": "2016-11-21T22:29:41+0000",
            "author": "Kevin Risden",
            "content": "Not planning on addressing this directly. Avatica/Calcite would have a way better implementation of this. ",
            "id": "comment-15684945"
        },
        {
            "date": "2017-03-05T18:33:57+0000",
            "author": "Kevin Risden",
            "content": "This may be important for Spark and other clients. ",
            "id": "comment-15896480"
        },
        {
            "date": "2017-03-05T18:38:53+0000",
            "author": "Kevin Risden",
            "content": "Adding link to the Avatica handler integration ",
            "id": "comment-15896485"
        },
        {
            "date": "2017-03-06T22:38:16+0000",
            "author": "Kevin Risden",
            "content": "The Spark specific error message is:\n\n\njava.lang.UnsupportedOperationException\n\tat org.apache.solr.client.solrj.io.sql.ConnectionImpl.prepareStatement(ConnectionImpl.java:217)\n\n\n\nThis correlates to:\n\n  @Override\n  public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {\n    throw new UnsupportedOperationException();\n  }\n\n ",
            "id": "comment-15898286"
        }
    ]
}