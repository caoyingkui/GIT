{
    "id": "SOLR-5624",
    "title": "Enable QueryResultCache for CollapsingQParserPlugin",
    "details": {
        "affect_versions": "4.6",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [],
        "type": "Task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "",
    "attachments": {
        "SOLR-5624.patch": "https://issues.apache.org/jira/secure/attachment/12622969/SOLR-5624.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Joel Bernstein",
            "id": "comment-13871127",
            "date": "2014-01-14T20:48:32+0000",
            "content": "Initial patch created from trunk, lightly tested. Looks good. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13891135",
            "date": "2014-02-04T20:09:15+0000",
            "content": "New patch. This patch provides logic that will cause caching to fail when elevated docs are present. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13895612",
            "date": "2014-02-08T15:44:11+0000",
            "content": "Added new patch just expanding one of the tests.  "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13895660",
            "date": "2014-02-08T18:13:38+0000",
            "content": "Commit 1566071 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1566071 ]\n\nSOLR-5624: Enable QueryResultCache for CollapsingQParserPlugin "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13895726",
            "date": "2014-02-08T20:41:52+0000",
            "content": "Commit 1566122 from Joel Bernstein in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1566122 ]\n\nSOLR-5624: Enable QueryResultCache for CollapsingQParserPlugin "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13895921",
            "date": "2014-02-09T16:34:38+0000",
            "content": "Commit 1566309 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1566309 ]\n\nSOLR-5624: Guard against NPE during cache warming "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13895924",
            "date": "2014-02-09T16:40:42+0000",
            "content": "Commit 1566312 from Joel Bernstein in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1566312 ]\n\nSOLR-5624: Guard against NPE during cache warming "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13899169",
            "date": "2014-02-12T15:09:26+0000",
            "content": "Commit 1567640 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1567640 ]\n\nSOLR-5624: check for elevated documents in hashCode() "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13899183",
            "date": "2014-02-12T15:23:27+0000",
            "content": "The previous commit checks for elevated documents in the query's hashCode() method. This needs to be done because elevated documents do not appear in the request context until after the query is constructed. This is because the QueryElevationComponent adds the elevated documents to the request context after the original query is constructed.\n\nWhen checking for the query in the QueryResultCache, we need to take into account the presence of elevated documents. The check that was added to the hashCode() method does this.\n\nWe still need to look for elevated docs in the getFilterCollector() method in case caching was turned off. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13899190",
            "date": "2014-02-12T15:30:55+0000",
            "content": "Commit 1567649 from Joel Bernstein in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1567649 ]\n\nSOLR-5624: check for elevated documents in hashCode() "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13911191",
            "date": "2014-02-25T03:26:26+0000",
            "content": "Hi Joel,\n\nI sent you an email but I'm not sure if you received it or not. I ran into a bit of trouble using the CollapsingQParserPlugin with elevated documents. To explain it simply, I want to exclude grouped documents when one of the members of the group are contained in the elevated document set. I'm not sure this is possible currently because as you explain above elevated documents are added to the request context after the original query is constructed.\n\nTo try to better illustrate the problem. If I have 2 documents docid=1 and docid=2 and both have a groupid of 'a'. If a grouped query scores docid 2 first in the results but I have elevated docid 1 then both documents are shown in the results when I really only want the elevated document to be shown in the results.\n\nIs this something that would be difficult to implement? Any help is appreciated. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13911228",
            "date": "2014-02-25T04:20:16+0000",
            "content": "I think the solution would be to remove the documents from liveDocs that share the same groupid in the getBoostDocs() function. Let me know if this makes any sense. I'll continue working towards a solution in the meantime.\n\n\nprivate IntOpenHashSet getBoostDocs(SolrIndexSearcher indexSearcher, Set<String> boosted) throws IOException {\n      IntOpenHashSet boostDocs = null;\n      if(boosted != null) {\n        SchemaField idField = indexSearcher.getSchema().getUniqueKeyField();\n        String fieldName = idField.getName();\n        HashSet<BytesRef> localBoosts = new HashSet(boosted.size()*2);\n        Iterator<String> boostedIt = boosted.iterator();\n        while(boostedIt.hasNext()) {\n          localBoosts.add(new BytesRef(boostedIt.next()));\n        }\n\n        boostDocs = new IntOpenHashSet(boosted.size()*2);\n\n        List<AtomicReaderContext>leaves = indexSearcher.getTopReaderContext().leaves();\n        TermsEnum termsEnum = null;\n        DocsEnum docsEnum = null;\n        for(AtomicReaderContext leaf : leaves) {\n          AtomicReader reader = leaf.reader();\n          int docBase = leaf.docBase;\n          Bits liveDocs = reader.getLiveDocs();\n          Terms terms = reader.terms(fieldName);\n          termsEnum = terms.iterator(termsEnum);\n          Iterator<BytesRef> it = localBoosts.iterator();\n          while(it.hasNext()) {\n            BytesRef ref = it.next();\n            if(termsEnum.seekExact(ref)) {\n              docsEnum = termsEnum.docs(liveDocs, docsEnum);\n              int doc = docsEnum.nextDoc();\n              if(doc != -1) {\n                //Found the document.\n                boostDocs.add(doc+docBase);\n\n               *// HERE REMOVE ANY DOCUMENTS THAT SHARE THE GROUPID NOT ONLY THE DOCID //*\n                it.remove();\n\n\n\n              }\n            }\n          }\n        }\n      }\n\n      return boostDocs;\n    }\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13911785",
            "date": "2014-02-25T17:48:44+0000",
            "content": "David Boychuck: please post your question to the solr-user list, or (if you have an improvement you'd like to contribe) open a new Jira issue to track it.\n\nposting a comment in a resolve issue like this is almost certain to get lost and overlooked. "
        }
    ]
}