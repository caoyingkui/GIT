{
    "id": "SOLR-11490",
    "title": "Add @since javadoc tags to the interesting Solr/Lucene classes",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "7.2"
        ],
        "affect_versions": "None",
        "resolution": "Implemented",
        "status": "Closed"
    },
    "description": "As per the discussion on the dev list, it may be useful to add Javadoc since tags to significant (or even all) Java files.\n\nFor user-facing files (such as analyzers, URPs, stream evaluators, etc) it would be useful when trying to identifying whether a particular class only comes later than user's particular version.\n\nFor other classes, it may be useful for historical reasons.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-10-14T21:29:39+0000",
            "content": "I started on a - very hacky so far - utility that may do something close to required for all classes descending from one root. \n\nHere is an output for TupleStream and its descendent. These are sorted by lowest detected version and then by class name. No inner classes yet, I know about 5 inner classes are missing. Joel Bernstein could you sanity check that these make sense. \n\n\nCloudSolrStream.java => 5.1.0\nMergeStream.java => 5.1.0\nParallelStream.java => 5.1.0\nPushBackStream.java => 5.1.0\nRankStream.java => 5.1.0\nReducerStream.java => 5.1.0\nSolrStream.java => 5.1.0\nStreamHandler.java => 5.1.0\nTupleStream.java => 5.1.0\nUniqueStream.java => 5.1.0\nBiJoinStream.java => 6.0.0\nComplementStream.java => 6.0.0\nDaemonStream.java => 6.0.0\nExceptionStream.java => 6.0.0\nFacetStream.java => 6.0.0\nHashJoinStream.java => 6.0.0\nInnerJoinStream.java => 6.0.0\nIntersectStream.java => 6.0.0\nJDBCStream.java => 6.0.0\nJoinStream.java => 6.0.0\nLeftOuterJoinStream.java => 6.0.0\nOuterHashJoinStream.java => 6.0.0\nRollupStream.java => 6.0.0\nSelectStream.java => 6.0.0\nStatsStream.java => 6.0.0\nTopicStream.java => 6.0.0\nUpdateStream.java => 6.0.0\nGatherNodesStream.java => 6.1.0\nGraphHandler.java => 6.1.0\nRandomStream.java => 6.1.0\nShortestPathStream.java => 6.1.0\nSortStream.java => 6.1.0\nFeaturesSelectionStream.java => 6.2.0\nScoreNodesStream.java => 6.2.0\nTextLogitStream.java => 6.2.0\nClassifyStream.java => 6.3.0\nCommitStream.java => 6.3.0\nExecutorStream.java => 6.3.0\nFetchStream.java => 6.3.0\nModelStream.java => 6.3.0\nHavingStream.java => 6.4.0\nNullStream.java => 6.4.0\nPriorityStream.java => 6.4.0\nSignificantTermsStream.java => 6.5.0\nCalculatorStream.java => 6.6.0\nCartesianProductStream.java => 6.6.0\nCellStream.java => 6.6.0\nEchoStream.java => 6.6.0\nEvalStream.java => 6.6.0\nGetStream.java => 6.6.0\nLetStream.java => 6.6.0\nListStream.java => 6.6.0\nShuffleStream.java => 6.6.0\nTimeSeriesStream.java => 6.6.0\nTupStream.java => 6.6.0\nCalciteJDBCStream.java => 7.0.0\nKnnStream.java => 7.0.0\nSqlStream.java => 7.0.0\n ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16204832"
        },
        {
            "date": "2017-10-18T02:27:02+0000",
            "content": "Commit 17d340055f7a799a0a686ea6d578fdd325625aaf in lucene-solr's branch refs/heads/master from Alexandre Rafalovitch\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=17d3400 ]\n\nSOLR-11490: Add missing @since tags\nTo all descendants of UpdateRequestProcessorFactory ",
            "author": "ASF subversion and git services",
            "id": "comment-16208724"
        },
        {
            "date": "2017-10-18T02:33:51+0000",
            "content": "Commit c6f26e2943c26533c416d79b0214205fd1a710e7 in lucene-solr's branch refs/heads/branch_7x from Alexandre Rafalovitch\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c6f26e2 ]\n\nSOLR-11490: Add missing @since tags\nTo all descendants of UpdateRequestProcessorFactory\n\n(cherry picked from commit 17d340055f7a799a0a686ea6d578fdd325625aaf) ",
            "author": "ASF subversion and git services",
            "id": "comment-16208729"
        },
        {
            "date": "2017-10-18T03:26:57+0000",
            "content": "Commit 3eeeb9fa4d2cf1751b6cc60b2f1fb708417af8e8 in lucene-solr's branch refs/heads/master from Alexandre Rafalovitch\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3eeeb9f ]\n\nSOLR-11490: Add missing @since tags\nTo all descendants of TokenFilterFactory ",
            "author": "ASF subversion and git services",
            "id": "comment-16208764"
        },
        {
            "date": "2017-10-18T03:28:01+0000",
            "content": "Commit e4bed5ff9c791a1467003efe6ce5b525c62f9afb in lucene-solr's branch refs/heads/branch_7x from Alexandre Rafalovitch\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e4bed5f ]\n\nSOLR-11490: Add missing @since tags\nTo all descendants of TokenFilterFactory\n\n(cherry picked from commit 3eeeb9fa4d2cf1751b6cc60b2f1fb708417af8e8) ",
            "author": "ASF subversion and git services",
            "id": "comment-16208765"
        },
        {
            "date": "2017-10-18T10:52:07+0000",
            "content": "Can you please back out the change to TokenFilterFactory? This needs discussion.\n\nI think its extremely confusing that e.g. ArabicTokenizer says since 1.4.0. It was added in Lucene 2.9.0 and that is what any since tag should show. ",
            "author": "Robert Muir",
            "id": "comment-16209138"
        },
        {
            "date": "2017-10-18T15:17:37+0000",
            "content": "Sure. Let's correct whatever is wrong. Maybe this patch is correct for most of entries but is wrong for some specific ones. Then, we can figure out the specific set and ensure it is treated right for both this and future additions.\n\nSo, let's take ArabicStemFilterFactory as an example you probably meant to use (ArabicTokenizer does not seem to exist). \n\nI see it in the release 1.4: https://github.com/apache/lucene-solr/blob/releases/solr/1.4.0/src/java/org/apache/solr/analysis/ArabicStemFilterFactory.java\nNow, that's release predating Lucene and Solr merge (in 3.1), so perhaps this is the part we need to discuss to make it clearer?\n\nI also see that it was moved to Lucene packages from Solr packages: https://github.com/apache/lucene-solr/blob/master/lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicStemFilterFactory.java This happened with LUCENE-2510 for Lucene/Solr 4. But that's the package change and the functionality did not change. So, the user that needs to work with Arabic text still could.\n\nI am not sure what happened in Lucene 2.9.0. I can see LUCENE-1460 which seems relevant, but the functionality in question seems to have been present both before and after.\n\nWhat am I missing? ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16209519"
        },
        {
            "date": "2017-10-19T01:43:47+0000",
            "content": "Commit 70784f456119e44e936d058c541945ebec0efaff in lucene-solr's branch refs/heads/master from Alexandre Rafalovitch\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=70784f4 ]\n\nSOLR-11490: Add missing @since tags\nTo all descendants of TupleStream ",
            "author": "ASF subversion and git services",
            "id": "comment-16210443"
        },
        {
            "date": "2017-10-19T01:44:44+0000",
            "content": "Commit a69a519de5e508f7073ef4e01b1e2c34ea8032bf in lucene-solr's branch refs/heads/branch_7x from Alexandre Rafalovitch\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a69a519 ]\n\nSOLR-11490: Add missing @since tags\nTo all descendants of TupleStream\n\n(cherry picked from commit 70784f456119e44e936d058c541945ebec0efaff) ",
            "author": "ASF subversion and git services",
            "id": "comment-16210444"
        },
        {
            "date": "2017-10-19T01:59:03+0000",
            "content": "Here's what I am getting for Tokenizer factories. Not committing them yet, as they may have similar issues as mentioned before for Filter factories.\n\nRobert Muir, any of these look wrong to you, so we could figure out where the problem exactly is?\n\n\nClassicTokenizerFactory.java first shows up in 3.1\nEdgeNGramTokenizerFactory.java first shows up in 1.2.0\nHMMChineseTokenizerFactory.java first shows up in 4.8.0\nICUTokenizerFactory.java first shows up in 3.1\nJapaneseTokenizerFactory.java first shows up in 3.6.0\nKeywordTokenizerFactory.java first shows up in 1.1.0\nLetterTokenizerFactory.java first shows up in 1.1.0\nLowerCaseTokenizerFactory.java first shows up in 1.1.0\nNGramTokenizerFactory.java first shows up in 1.2.0\nPathHierarchyTokenizerFactory.java first shows up in 3.1\nPatternTokenizerFactory.java first shows up in solr1.2\nSimplePatternSplitTokenizerFactory.java first shows up in 6.5.0\nSimplePatternTokenizerFactory.java first shows up in 6.5.0\nStandardTokenizerFactory.java first shows up in 1.1.0\nThaiTokenizerFactory.java first shows up in 4.8.0\nTokenizerFactory.java first shows up in 1.1.0\nUAX29URLEmailTokenizerFactory.java first shows up in 3.1\nUIMAAnnotationsTokenizerFactory.java first shows up in 4.0.0\nUIMATypeAwareAnnotationsTokenizerFactory.java first shows up in 4.0.0\nWhitespaceTokenizerFactory.java first shows up in 1.1.0\nWikipediaTokenizerFactory.java first shows up in 3.1\n\n\nNote, PatternTokenizerFactory already has a @since tag, which is why it looks different from those proposed automatically. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16210460"
        },
        {
            "date": "2017-10-19T11:42:56+0000",
            "content": "What am I missing?\n\nThat these solr version numbers did not align with lucene version numbers until 3.1. Thats why I think its confusing, e.g. to someone just using CustomAnalyzer.  ",
            "author": "Robert Muir",
            "id": "comment-16210899"
        },
        {
            "date": "2017-10-19T11:50:52+0000",
            "content": "Ok, so I can split pre-3.1 tags into lucene-x.y.z and solr-x.y.z based on release tags. And then just general number from 3.1 forward.\n\nDoes this address all your concerns? ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16210907"
        },
        {
            "date": "2017-10-19T12:26:31+0000",
            "content": "So, the last example looks like:\n\n\nClassicTokenizerFactory.java first shows up in '3.1'\nEdgeNGramTokenizerFactory.java first shows up in 'solr 1.2.0'\nHMMChineseTokenizerFactory.java first shows up in '4.8.0'\nICUTokenizerFactory.java first shows up in '3.1'\nJapaneseTokenizerFactory.java first shows up in '3.6.0'\nKeywordTokenizerFactory.java first shows up in 'solr 1.1.0'\nLetterTokenizerFactory.java first shows up in 'solr 1.1.0'\nLowerCaseTokenizerFactory.java first shows up in 'solr 1.1.0'\nNGramTokenizerFactory.java first shows up in 'solr 1.2.0'\nPathHierarchyTokenizerFactory.java first shows up in '3.1'\nPatternTokenizerFactory.java first shows up in 'solr1.2'\nSimplePatternSplitTokenizerFactory.java first shows up in '6.5.0'\nSimplePatternTokenizerFactory.java first shows up in '6.5.0'\nStandardTokenizerFactory.java first shows up in 'solr 1.1.0'\nThaiTokenizerFactory.java first shows up in '4.8.0'\nTokenizerFactory.java first shows up in 'solr 1.1.0'\nUAX29URLEmailTokenizerFactory.java first shows up in '3.1'\nUIMAAnnotationsTokenizerFactory.java first shows up in '4.0.0'\nUIMATypeAwareAnnotationsTokenizerFactory.java first shows up in '4.0.0'\nWhitespaceTokenizerFactory.java first shows up in 'solr 1.1.0'\nWikipediaTokenizerFactory.java first shows up in '3.1'\n\n\nAre we good to go? ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16210934"
        },
        {
            "date": "2017-10-19T18:20:41+0000",
            "content": "I still think its confusing having these solr version numbers here. There was already a recent discussion by Jan about this with respect to solr xml in these files, too: LUCENE-7964\n\nI am concerned about setting the precedent, and putting more solr version numbers like this in other lucene sources and confusing users even more. IMO they already have enough to be confused about  ",
            "author": "Robert Muir",
            "id": "comment-16211496"
        },
        {
            "date": "2017-10-19T18:39:26+0000",
            "content": "So, the problem I am trying to solve is a person using a semi-recent version of Solr (say 6.2) and trying to understand which of the Solr components were already available at their version and which are perhaps worth upgrading for. And same with Lucene, I guess, but my visibility into that project as standalone library is less clear.\n\nTo that target audience, I do not see marking of anything before - say - Solr 4 to be of significant impact. I am just trying to be complete for the sake of completeness and because it does not take much longer. I understand we have complexity due to separate pre-history, due to migration of Solr components into Lucene packages and maybe more.\n\nTherefore, as the only person with concerns so far (thank you for making time), I am happy to address your concerns in whichever way you feel it would be reasonable. A concrete suggestion of specific versions/classes to do in a different way.\n\nI can:\n1) Mark pre-3.1 with their individual Solr or Lucene histories\n2) I can avoid marking pre-3.1 classes all together and just lump it into the murky back history of assumed general availability\n3) I can - though would prefer not to - not mark the Lucene classes with earlier Solr-origin versions. I would prefer not to take that route because the functionality was clearly available, at least to Solr users.\n4) Any other specific suggestion. I could not see anything specifically relevant in LUCENE-7964 discussion\n\nAgain, this tagging does not affect anybody's code (it is just documentation), the historical tags do not really affect anybody on Lucene/Solr 4 or later, and whichever way you look at it, the current absence of tags is confusing by default. I understand the point of the precedent in general, so happy to let more experienced members of community to decide what needs to be done without causing one. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16211522"
        },
        {
            "date": "2017-10-19T19:20:05+0000",
            "content": "Could we just do since 3.1 for this old stuff? Then its agnostic, it works for both lucene and solr users. ",
            "author": "Robert Muir",
            "id": "comment-16211577"
        },
        {
            "date": "2017-10-19T19:22:30+0000",
            "content": "And honestly, I think thats most correct anyway given how they are now structured. We aren't doing a historical traceing of lineage, for that, go to SVN (possibly under other names) \n\nJust like how you marked HMMChineseTokenizerFactory as 4.8.0, that's fine. But lineage-wise (look at svn for that) you'd see its been around since 2.9, it was just named something different (SmartChinese). ",
            "author": "Robert Muir",
            "id": "comment-16211583"
        },
        {
            "date": "2017-10-20T00:36:18+0000",
            "content": "Sure. Let's do 3.1+ as a joint tag and ignore anything before that. I'll roll-back the earlier ones.\n\nAnd yes, there probably will be individual errors. Those can be corrected by hand as discovered. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16211981"
        },
        {
            "date": "2017-10-20T00:42:40+0000",
            "content": "Thanks for doing this Alexandre Rafalovitch \u2013 I've already benefited with the knowledge from your previous commits here \n\n+1 to \"since 3.1\".  I concur with Rob's input here. ",
            "author": "David Smiley",
            "id": "comment-16211988"
        },
        {
            "date": "2017-10-23T02:52:01+0000",
            "content": "Commit 2cd434e786065fe639d912230d44bf410024c85d in lucene-solr's branch refs/heads/master from Alexandre Rafalovitch\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2cd434e ]\n\nSOLR-11490: Undo since tags for pre-3.1 classes\nReverse some of the added tags, to reduce possible solr/lucene version\nconfusion ",
            "author": "ASF subversion and git services",
            "id": "comment-16214565"
        },
        {
            "date": "2017-10-23T02:55:09+0000",
            "content": "Commit 60273fc52172d9774d399a26d4f349a52fcd6aed in lucene-solr's branch refs/heads/branch_7x from Alexandre Rafalovitch\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=60273fc ]\n\nSOLR-11490: Undo since tags for pre-3.1 classes\nReverse some of the added tags, to reduce possible solr/lucene version\nconfusion\n\n(cherry picked from commit 2cd434e786065fe639d912230d44bf410024c85d) ",
            "author": "ASF subversion and git services",
            "id": "comment-16214567"
        },
        {
            "date": "2018-04-26T22:19:52+0000",
            "content": "Can this be resolved and create new more targeted JIRAs for more groups of classes? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16455467"
        },
        {
            "date": "2018-05-03T14:28:30+0000",
            "content": "Yes, I will mark it resolved and come back to it later in more targeted groups.\n\nThe only issue this tagging created is that there will always be new classes that are not (yet) tagged. And they will look identical as ones not tagged because they are pre-3.1\n\nWe had agreed that pre-3.1 classes will get no since tag. But perhaps I can retag them all \"pre-3.1\". This way only the newest classes in the particular category will be untagged. Obviously, this mostly matters to the Lucene/Solr newbies, but that's exactly my target audience with this JIRA.\n\nRobert Muir - is that ok with you to have a common-joint historical tag instead of no tag at all?\n\nI just want to resolve this in this case, as it was more common, to have the discussion finalized in one place. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16462523"
        },
        {
            "date": "2018-05-03T14:50:58+0000",
            "content": "\nWe had agreed that pre-3.1 classes will get no since tag.\n\nWhere was this? I see consensus above to simply label these as \"3.1\".\n\u00a0\n\n\u00a0 ",
            "author": "Robert Muir",
            "id": "comment-16462549"
        },
        {
            "date": "2018-05-03T15:20:06+0000",
            "content": "19 Oct, me: \"Sure. Let's do 3.1+ as a joint tag and ignore anything before that. I'll roll-back the earlier ones.\"\n\nPerhaps I misunderstood. I thought it makes no sense to tag something that's been in lucene 1.x as 3.1, and read it that you meant to tag it not at all. So, my proposal now is to tag it \"pre-3.1\". Maybe we are on the same page. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16462585"
        },
        {
            "date": "2018-05-03T15:28:11+0000",
            "content": "I am against pre-3.1 or any other invalid versions in since tags. I'm gonna quote myself just to re-iterate what I already said.\n\n\nJust like how you marked HMMChineseTokenizerFactory as 4.8.0, that's fine. But lineage-wise (look at svn for that) you'd see its been around since 2.9, it was just named something different (SmartChinese). ",
            "author": "Robert Muir",
            "id": "comment-16462592"
        },
        {
            "date": "2018-05-03T15:35:22+0000",
            "content": "Ok. But then I really don't get your proposal. What would you be ok with tagging - for example - PatternTokenizerFactory?\n\n\"3.1\" is not valid\n\n\"pre-3.1 \" you are blocking\n\nnothing is confusing to newbies, in my opinion, so that's what I am trying to avoid\n\nDo we have something between us that is not -1?\n\n\u00a0 ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16462616"
        },
        {
            "date": "2018-05-03T20:23:27+0000",
            "content": "I think Robert says that \"3.1\" is fine, since that is a valid version. We can view lucene/solr as a \"new product\" separate since\u00a0the merger, and that product started as\u00a0v3.1.\u00a0I'm ok with that as well, since the goal of Javadoc is not to track svn/git history, we still have repos for that, but to give a hint what releases a particular class has been present in.\n\nPS: When we had the Solr docs in the old wiki, we used to tag features, parameters etc with a \"since\" tag which was often very useful. I hope that adding these since annotations can get back some of that. I guess we can also tag new methods, not only classes? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16463002"
        },
        {
            "date": "2018-05-09T14:19:23+0000",
            "content": "Ok. I'll treat that as the guidance (\"since 3.1\" for 3.1 and before on both Lucene and Solr).\n\nNow that the discussion is done, I will close this\u00a0case and create new ones for specific tagging groups/runs.\n\nRegarding tagging parameters/methods, I suspect it can be done semi-automatically as well, but I am not familiar with specific logic on what to tag when and why. Perhaps somebody can explain that in a more details in a separate case. ",
            "author": "Alexandre Rafalovitch",
            "id": "comment-16468901"
        }
    ]
}