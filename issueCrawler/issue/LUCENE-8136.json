{
    "id": "LUCENE-8136",
    "title": "Planes constructed with two points are wrong when points are close",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.3",
            "master (8.0)"
        ]
    },
    "description": "Whenever a plane is constructed with two points (and the center of the planet), and those points are close to each other,it might happen that the final plane does not contain all points used for the construction. The issue seems to happen when the resulting magnitude of the normal vector of the new plane (calculated using cross product) is lower that 1e-5.\n\nThis is a follow up of issue LUCENE-8133.",
    "attachments": {
        "LUCENE-8136.patch": "https://issues.apache.org/jira/secure/attachment/12907661/LUCENE-8136.patch",
        "LUCENE-8136-RandomTest.patch": "https://issues.apache.org/jira/secure/attachment/12907461/LUCENE-8136-RandomTest.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16337437",
            "date": "2018-01-24T11:35:23+0000",
            "content": "The plane is not \"wrong\" it is just not precise enough.  But I can find nothing wrong with the logic. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16337443",
            "date": "2018-01-24T11:44:02+0000",
            "content": "You are right, they are not wrong, but down the line the lack of precision produces an error when constructing polygons that gives wrong information. \n\n\u00a0I think it is a numerical problem using doubles, the logic is fine. I tried the same calculations with BigDecimals and it works using them.\n\nI guess there are two options:\n\na) disallow such planes which is very limiting.\n\nb) teach Vector class to handle those small values e.g. increase precision of maths.\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16337471",
            "date": "2018-01-24T12:07:32+0000",
            "content": "The only solution to this issue is to keep increasing MINIMUM_RESOLUTION until the problem goes away, I'm afraid.  But this has consequences.  Perhaps you can experiment and see what this value should be, experimentally. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16337502",
            "date": "2018-01-24T12:22:59+0000",
            "content": "It seems the value where plane tests start being successful is 1e-8.\n\nAt that value, there are 4 other test that fail.\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16337673",
            "date": "2018-01-24T14:42:51+0000",
            "content": "1e-8 is unacceptably large.\n\nIt's also the case that if you had a check whether points were \"identical\", I suspect that your test cases would be found illegal because some of the test plane points would be identical or colinear (at that level of MINIMUM_RESOLUTION).  The plane constructor obviously doesn't look at this but the GeoPolygonFactory filters identical and coplanar points, so I suspect your plane test is not going to be realistic unless you make sure you do the same kind of filtering in it. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16337700",
            "date": "2018-01-24T14:59:40+0000",
            "content": "I am creating points always at a minimum distance of MINIMUM_ANGULAR_RESOLUTION, which I hope prevents to create identical points. I have checked and it seems to do so, point1.isNumericallyIdentical(point2) returns always false.I think the tests are realistic and it is what I see when working with shapes with small edges.\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16337774",
            "date": "2018-01-24T15:33:49+0000",
            "content": "If the numerical precision was indeed that bad, I would expect tests to fail all over the place, but they don't.  So I'm having a hard time believing that plane math is that unstable.\n\nIf it is indeed that unstable, then Geo3D is not a workable technology.  And yet it does work.\n\nI have no time to look at this for the rest of the week so in any case this ticket must be postponed until I get the chance to look in more detail.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16337777",
            "date": "2018-01-24T15:35:15+0000",
            "content": "I have added a new version of the test. I added a test that creates tiny polygons. It fails until accuracy is 1e-8, then everything looks good. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16338256",
            "date": "2018-01-24T21:30:27+0000",
            "content": "I'm still pressed for time, BUT it occurs to me that the code is computing a normal vector given three points: the origin, and two other given points.  The problems arise when the two other points are very close together.  This causes numerical instability because the two sides we are working with are so much larger than the differences between them.\n\nHowever, we can recenter the entire problem to one of the other two points when that happens, and then the problem should be more numerically stable.  The trick is to know when to do that.  I'll do some experiments to see if I can come up with some code that works better for this case. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16338373",
            "date": "2018-01-24T22:50:46+0000",
            "content": "I looked at this and it didn't help.\n\nThe next step would be to try and compute the numerical error inherent in this calculation, knowing how many mantissa bits there are.  We also may be able to set MINIMUM_ANGULAR_RESOLUTION significantly higher than MINIMUM_RESOLUTION, but I'd need to base that on the math a bit more precisely.  Or I can do it experimentally.  But this seems to be a fundamental property of the calculation:\n\nhttps://stackoverflow.com/questions/22838071/robust-polygon-normal-calculation\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16338522",
            "date": "2018-01-25T01:07:58+0000",
            "content": "The problem is that MINIMUM_ANGULAR_RESOLUTION is tied precisely to MINIMUM_RESOLUTION.  GeoPolygonFactory uses isIdentical() to see if points are the same, for instance, and that uses MINIMUM_RESOLUTION.  MINIMUM_ANGULAR_RESOLUTION is used only when comparing angles.  So a change to one must be accompanied by a change to the other.\n\nI verified that MINIMUM_RESOLUTION of 1e-8 is needed to make the plane issue go away.  That's four orders of magnitude greater than our current value, and clearly too coarse.\n\nI still think there must be an alternative calculation that could be used given that the resulting plane can readily be checked for accuracy against the original points.  Maybe an iterative adjustment might work.  Will try that next. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16339051",
            "date": "2018-01-25T10:38:35+0000",
            "content": "I have been looking into the issue and it is clear that the problen comes after normalizing the created Vector through the cross product. If the dot product is checked between the generated Vector and the given points, the method will fail if that value is higher the MINIMUM_RESOLUTION.\n\n\u00a0\n\nI have developed and algorithm based on the Gram\u2013Schmidt process( https://en.wikipedia.org/wiki/Gram%E2%80%93Schmidt_process) which seems to work and provide the resolution 1e-12. It just iteratively adjust the normal vector in respect of the given points.\n\nI attach a patch (It needs a bit more of work but there is enough to review the algorithm).\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16339099",
            "date": "2018-01-25T11:17:08+0000",
            "content": "That is exactly what I was looking for, but you found the adjustment I hadn't yet found!  Thanks! ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16339125",
            "date": "2018-01-25T11:59:12+0000",
            "content": "I attached a new patch. It seems we always need to calculate the dot product between the created vector and the provided ones. Thererfore for already working planes that is the price they will pay, they need to perform two extra dot product operations.\n\nNote that I have changed one of the constructors and it is now creating a Vector. I think it needs to do that now.\n\nFinally, the test method that creates small polygons can fail with the following exception:\n\n\"java.lang.IllegalArgumentException: cannot find a point that is inside the polygon\"\n\nNot sure if that is expected for tiny polygons but I do not think it s related with this issue.\n\n\u00a0\n\n\u00a0 ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16339129",
            "date": "2018-01-25T12:04:30+0000",
            "content": "Commit ad131bde32759070addf1907aea26b3c2802a6c2 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ad131bd ]\n\nLUCENE-8136: Adopt iterative convergence for construction of planes from two vectors.  Thanks, Ignacio Vera! ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16339130",
            "date": "2018-01-25T12:05:24+0000",
            "content": "Commit 243252909f1de8a51033b6e887dfd6bf6ecb8f79 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2432529 ]\n\nLUCENE-8136: Adopt iterative convergence for construction of planes from two vectors.  Thanks, Ignacio Vera! ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16339131",
            "date": "2018-01-25T12:06:07+0000",
            "content": "Commit a69f34084f8852f04c325ec0ae3817725d94f772 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a69f340 ]\n\nLUCENE-8136: Adopt iterative convergence for construction of planes from two vectors.  Thanks, Ignacio Vera! ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16339136",
            "date": "2018-01-25T12:08:17+0000",
            "content": "Ignacio Vera I made a few straightforward changes to it and committed it, along with the RandomPlaneTest class.  I had to disable the polygon part of that test because of a different problem: the polygon constructor can't reliably find a point inside the polygon when the polygon is that small.  That will require another ticket. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16363027",
            "date": "2018-02-13T20:57:43+0000",
            "content": "Reproducing failure of RandomPlaneTest.testPlaneThreePointsAccuracy() from ASF Jenkins https://builds.apache.org/job/Lucene-Solr-SmokeRelease-master/951/; git bisect says that it fails starting with the ad131bd commit on this issue:\n\n\nChecking out Revision dd08400a3db1c4119a704610ccc4db0d055d8d7f (refs/remotes/origin/master)\n[...]\n  [smoker]    [junit4] Suite: org.apache.lucene.spatial3d.geom.RandomPlaneTest\n  [smoker]    [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=RandomPlaneTest -Dtests.method=testPlaneThreePointsAccuracy -Dtests.seed=AF530D5BB3E29D37 -Dtests.multiplier=2 -Dtests.locale=hy-AM -Dtests.timezone=CAT -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n  [smoker]    [junit4] FAILURE 0.35s J2 | RandomPlaneTest.testPlaneThreePointsAccuracy {seed=[AF530D5BB3E29D37:67333841FC91DFF4]} <<<\n  [smoker]    [junit4]    > Throwable #1: java.lang.AssertionError: -9.99866855977416E-13 PlanetModel.SPHERE point 1: [lat=-0.014383560214672818, lon=0.41800053100596907([X=0.9138078833986019, Y=0.4058919556989371, Z=-0.014383064258334952])], point 2: [lat=0.6932931355139935, lon=-0.18388926426439056([X=0.7561778076398898, Y=-0.14064184629683377, Z=0.6390735437358892])], point 3: [lat=-0.014383560214674136, lon=0.41800053101150425([X=0.9138078833963552, Y=0.4058919557039952, Z=-0.014383064258336268])] , check: [lat=-0.08323537864940594, lon=0.4347906232623258([X=0.9038183078528319, Y=0.4197622219929782, Z=-0.08313930104085177])]\n  [smoker]    [junit4]    > \tat __randomizedtesting.SeedInfo.seed([AF530D5BB3E29D37:67333841FC91DFF4]:0)\n  [smoker]    [junit4]    > \tat org.apache.lucene.spatial3d.geom.RandomPlaneTest.testPlaneThreePointsAccuracy(RandomPlaneTest.java:74)\n  [smoker]    [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n  [smoker]    [junit4]    > \tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n  [smoker]    [junit4]    > \tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n  [smoker]    [junit4]    > \tat java.base/java.lang.reflect.Method.invoke(Method.java:564)\n  [smoker]    [junit4]    > \tat java.base/java.lang.Thread.run(Thread.java:844)\n  [smoker]    [junit4]   2> NOTE: test params are: codec=Asserting(Lucene70): {}, docValues:{}, maxPointsInLeafNode=537, maxMBSortInHeap=7.561334272193783, sim=Asserting(org.apache.lucene.search.similarities.AssertingSimilarity@7b5f56e9), locale=hy-AM, timezone=CAT\n  [smoker]    [junit4]   2> NOTE: Linux 4.4.0-112-generic amd64/Oracle Corporation 9.0.1 (64-bit)/cpus=4,threads=1,free=225585560,total=264241152\n\n ",
            "author": "Steve Rowe"
        }
    ]
}