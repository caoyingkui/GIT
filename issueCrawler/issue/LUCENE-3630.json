{
    "id": "LUCENE-3630",
    "title": "MultiReader and ParallelReader accidently override doOpenIfChanged(boolean readOnly) with doOpenIfChanged(boolean doClone)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.6"
        ],
        "affect_versions": "3.5",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I found this during adding deprecations for RW access in LUCENE-3606:\n\nthe base class defines doOpenIfChanged(boolean readOnly), but MultiReader and ParallelReader \"override\" this method with a signature doOpenIfChanged(doClone) and missing @Override. This makes consumers calling IR.openIfChanged(boolean readOnly) do the wrong thing. Instead they should get UOE like for the other unimplemented doOpenIfChanged methods in MR and PR.\n\nEasy fix is to rename and hide this internal \"reopen\" method, like DirectoryReader,...",
    "attachments": {
        "LUCENE-3630-addMissingMethod.patch": "https://issues.apache.org/jira/secure/attachment/12506844/LUCENE-3630-addMissingMethod.patch",
        "LUCENE-3630.patch": "https://issues.apache.org/jira/secure/attachment/12506843/LUCENE-3630.patch",
        "LUCENE-3630-revert.patch": "https://issues.apache.org/jira/secure/attachment/12506849/LUCENE-3630-revert.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-10T09:43:06+0000",
            "content": "Only MultiReader has this problem, ParallelReader used another method name for the internal reopen. I will make the internal implementation private for both classes (they were protected because of the above override issue) and rename it to doReopen().\n\nThe same on trunk, where some relicts of those method signatures are still protected. But the bug does not occur here. ",
            "author": "Uwe Schindler",
            "id": "comment-13166813"
        },
        {
            "date": "2011-12-10T09:52:05+0000",
            "content": "Committed 3.x revision: 1212754\nCommitted changes merge + method renaming to trunk revision: 1212755 ",
            "author": "Uwe Schindler",
            "id": "comment-13166814"
        },
        {
            "date": "2011-12-10T10:06:23+0000",
            "content": "I found also a bug report on the user list about reopen not working with MultiReader. The use was calling openIfChanged(true) on MultiReader -> he got a clone instead of a reopened reader. The fix is to also implement doOpenIfChanged(boolean openReadOnly), but allow only true as param and throw UOE on false. ",
            "author": "Uwe Schindler",
            "id": "comment-13166816"
        },
        {
            "date": "2011-12-10T10:09:31+0000",
            "content": "Added missing doOpenIfChanged(readonly=true) support in 3.x revision: 1212756 ",
            "author": "Uwe Schindler",
            "id": "comment-13166817"
        },
        {
            "date": "2011-12-10T12:10:19+0000",
            "content": "Further investigation showed that supporting openReadOnly on clone/readonly f*cks up refcounting. So don't support it at all and revert the last commit, clearly saying this. ",
            "author": "Uwe Schindler",
            "id": "comment-13166846"
        },
        {
            "date": "2011-12-10T13:00:47+0000",
            "content": "Patch with revert and more explanatory UOE for clone and doOpenIfChanged ",
            "author": "Uwe Schindler",
            "id": "comment-13166855"
        },
        {
            "date": "2011-12-10T13:02:56+0000",
            "content": "Committed fix in revision: 1212787 ",
            "author": "Uwe Schindler",
            "id": "comment-13166856"
        }
    ]
}