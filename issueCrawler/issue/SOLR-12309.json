{
    "id": "SOLR-12309",
    "title": "CloudSolrClient.Builder constructors are not well documented",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.3",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I was having a lot of trouble figuring out how to create a CloudSolrClient object without using deprecated code.\n\nThe no-arg constructor on the Builder object is deprecated, and the two remaining methods have similar signatures to each other.  It is not at all obvious how to successfully call the one that uses ZooKeeper to connect.  The javadoc is silent on the issue.  I did finally figure it out with a lot of googling, and I would like to save others the hassle.\n\nI believe that this is what the javadoc for the third ctor should say:\n\n\nProvide a series of ZooKeeper hosts which will be used when configuring CloudSolrClient instances.  Optionally, include a chroot to be used when accessing the ZooKeeper database.\n\nHere are a couple of examples.  The first one has no chroot, the second one does:\n\nnew CloudSolrClient.Builder(zkHosts, Optional.empty())\nnew CloudSolrClient.Builder(zkHosts, Optional.of(\"/solr\"))\n\n\nThe javadoc for the URL-based method should probably say something to indicate that it is easy to confuse with the ZK-based method.\n\nI have not yet looked at the current reference guide to see if that has any clarification.\n\nIs it a good idea to completely eliminate the ability to create a cloud client using a single string that matches the zkHost value used when starting Solr in cloud mode?",
    "attachments": {
        "SOLR-12309.patch": "https://issues.apache.org/jira/secure/attachment/12929830/SOLR-12309.patch",
        "fluent-builder-fail-compile-time.patch": "https://issues.apache.org/jira/secure/attachment/12924224/fluent-builder-fail-compile-time.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-05-07T11:32:01+0000",
            "content": "Is it a good idea to completely eliminate the ability to create a cloud client using a single string that matches the zkHost value used when starting Solr in cloud mode?\n\nI added the two new constructors over on SOLR-11629.  They were added in an effort to make it clearer to users that these arguments were required, and that they weren't \"just another Builder setting\", but truly required arguments.  But since they're both strings, an Optional  was introduced on the ZK-based constructor (both to distinguish the method signatures, and because the chroot is a conceptually separate thing).\n\nSo, if you consider the added Optional param an evil; I'd at least argue it's a necessary one, because it allows us to distinguish the conn string/URL options from the other 6 or 7 setters that aren't required in any way.\n\nHope that clarifies things a bit.\n\nBut I do agree with your main point that the Javadocs can be improved, and that an example or two would be particularly helpful.  I'm happy to help draft up some text for this, unless you have already been thinking about it a lot and want to see it through?\n\nDo you remember trying any particular constructor arguments that didn't work out for you the first time?  Any missteps or false-impressions you had reading the existing Javadocs might be good to know, as guides for what needs added/corrected in the Javadocs. ",
            "author": "Jason Gerlowski",
            "id": "comment-16465806"
        },
        {
            "date": "2018-05-07T14:51:33+0000",
            "content": "I'm not saying that the use of Optional was bad.  Just that I couldn't figure it out how to use it by looking at the Builder javadoc.  I had to go searching for docs on Optional \u2013 it was a object type I had never encountered before.  I suspect that this will be relatively common.\n\nA java developer gets to know the more basic objects really quickly and they become second nature.  Things like Optional are not so common.  Of course we can't provide documentation for EVERY native object we use, but when we use something outside what developers use every day, we ought to provide some simple examples.\n\nAt first I just tried a List<String> with the individual zkHost values in it, which naturally failed, because it tried to interpret those strings as URLs.  I hadn't even quite noticed that the URL-based constructor was there when I did this.  I was using my IDE's language-specific capabilities to find the constructor, not reading the javadocs directly.  When I did a closer examination of the javadoc after that trial didn't work, I saw my mistake, but still didn't know how to actually create an Optional object to use the correct constructor.\n\nI think I did try \"null\" for the Optional argument.  If I did, I don't remember what the error for that was.  I can see what it does.\n\nThe Optional could have been replaced with a simple String value to differentiate it from the URL-based constructor.  Most java developers already know how to deal with String.\n\nI'm curious why the no-arg constructor and the fluent methods for providing the ZK definition were deprecated.  The Fluent paradigm that the builders use is pretty straightforward and still present, so that still seems like a relevant way to use the builder. ",
            "author": "Shawn Heisey",
            "id": "comment-16465984"
        },
        {
            "date": "2018-05-07T15:31:22+0000",
            "content": "I can understand the desire to not have lots of constructors.  We're using the fluent paradigm, so the most straighforward option is only one constructor \u2013 the one with no arguments.  Complexity can then happen in the fluent methods, making confusion a lot less likely.  We could have signatures like these, where using one of them is required before build() will work:\n\n\n\twithZkHosts(List<String> zkHosts)\n\twithZkHosts(List<String> zkHosts, String chroot)\n\twithZkConnectString(String connectString)\n\twithUrls(List<String> urls)\n\n ",
            "author": "Shawn Heisey",
            "id": "comment-16466035"
        },
        {
            "date": "2018-05-18T14:01:25+0000",
            "content": "I'm curious why the no-arg constructor and the fluent methods for providing the ZK definition were deprecated.\n\nPre SOLR-11629, a new SolrJ user could type new CloudSolrClient.Builder().build(), and wouldn't have an inkling that was wrong until they went to run or test their app and got an IllegalStateException and a so-so error message.  So Varun thought (and I agreed): if we could get users that correcting information sooner by enforcing it at compile time, then why wouldn't we?  Isn't the more intuitive API the one that's harder to take mis-steps with?\n\nIn short: A 100% fluent API nudges users towards \"Runtime Exception Driven Development\" when some subset of the with* APIs are actually mandatory.\n\nThat said: I'm not against the fluent API in general.  In fact, I added most of it back in the day.  But it's not the best way to handle arguments that are either (1) required, or (2) are mutually exclusive with another argument.  And Solr URL/ZK-string args fall into both of these categories.\n\nTo get back to things I think we're already in agreement on though, I see your points about what's missing from the Javadocs for these constructors.  I took familiarity with java.util.Optional for granted, which was a mistake.  And some examples would go a long way.  (Particularly one with Optional.empty() as the chroot).  I'll attach some Javadocs this weekend that hopefully improve things. ",
            "author": "Jason Gerlowski",
            "id": "comment-16480691"
        },
        {
            "date": "2018-05-18T23:58:29+0000",
            "content": "I went looking for a way to have a completely fluent builder fail at compile time if it is not used correctly.  I actually found a way to do it.  The code is more complicated than exception-based failure, but I found it pretty easy to grasp after a few minutes.  SolrClient implementations thankfully only have one required parameter, which makes the implementation easier.\n\nI've got a VERY incomplete patch that I've been working on.  Will attach it.  Needs a lot of work and testing.  Here's an example of how it would be used:\n\n\nList<String> zkHosts = new ArrayList<>();\n// populate the zkHosts list\nCloudSolrClient client1 = CloudSolrClient.zkBuilder().zkHosts(zkHosts).build();\nCloudSolrClient client2 = CloudSolrClient.zkBuilder().zkHosts(zkHosts).zkChroot(\"/solr\").build();\nList<String> urls = new ArrayList<>();\n// populate the urls list\nCloudSolrClient client3 = CloudSolrClient.urlBuilder().solrUrls(urls).build();\n\n\n\nIf the mandatory method (zkHosts or solrUrls) is omitted, an IDE will flag it as a compile error.  At the moment I don't have comments in the new code to explain its operation, but if I do this for real, it will be liberally documented with comments and I will make sure it all gets tested. ",
            "author": "Shawn Heisey",
            "id": "comment-16481368"
        },
        {
            "date": "2018-05-21T16:55:18+0000",
            "content": "Hmm, it's an interesting idea.  And I appreciate your humoring me in getting back the compile-time guidance/errors.  I guess I'm just stuck understanding your underlying motivation for wanting to get the no-arg ctors back.  I can see few reasons that'd make sense, I'm just wondering which ones you're interested in, and how this patch helps them.\n\nIs your concern a slippery-slope explosion of ctors if SolrJ gains some more required arguments in the future?  Is your goal to make the Builder more fluent, and you see eliminating ctor arguments as a step towards that?  Or do you think this is more intuitive from an end-user perspective than the currently committed ctors/approach?  Or is there some other motivation?\n\nYou patch does regain a no-arg ctor of sorts, but the next method call MUST be to provide the zk-host/url-list- you can't call setters in whatever order you please.  IMO that undercuts any gains in \"fluent\"-ness and leaves things looking oddly similar to the interface/ctors we have currently. \n\nMaybe you prefer this approach because of it prevents a potential ctor explosion if other SolrClient arguments become required.  But I'm not sure whether it prevents the explosion, or just shuffles the \"bomb\" around to other types (tiny Builder implementations).\n\nI guess at this point my vote is still to improve the Javadocs and other documentation around this, rather than reworking the interface.  But I'm happy to be overruled or have my misconceptions corrected.  I'll unassign myself in case you want to pursue a non-documentation solution.  I'll still work on Javadocs independently- they'll be useful for devs in the interim even if we end up changing the interface going forward. ",
            "author": "Jason Gerlowski",
            "id": "comment-16482726"
        },
        {
            "date": "2018-05-21T17:53:59+0000",
            "content": "This issue started out as confusion over how Optional worked, and desiring better javadoc.  And maybe that's where it should stay.  Design shifts can happen in another issue.\n\nOn the design:  I think the mix of constructors and fluent methods confuses the situation and gives an impression that we're undecided about whether we want fluent or not.\n\nHere's another idea, sort of a meld of both approaches, abandoning the use of constructors, and a lot less complicated than what I last proposed.  Implement these static methods, as the only non-deprecated ways of obtaining a Builder object:\n\nCloudSolrClient.builder(Collection<String> zkHosts, String chroot)\nCloudSolrClient.builder(Collection<String> solrUrls)\n\nIf there's no chroot, that argument can be null, which most Java developers understand fully.  There may still be situations where using certain fluent methods might throw Illegal* exceptions, but there wouldn't be very many situations like that.\n\nI think the other SolrClient implementations can get by with one builder() method that includes all required arguments. ",
            "author": "Shawn Heisey",
            "id": "comment-16482814"
        },
        {
            "date": "2018-06-30T19:14:25+0000",
            "content": "I've finally gotten around to getting some examples together to add to the CloudSolrClient.Builder javadocs.  Let me know if you've got any feedback. Happy to tweak things.  Also, don't take these Javadocs as cementing the constructor-signatures.  I'm +0 on changing the method signatures if you're interested in that.  But while the current ones exist, there's value in beefing up the Javadocs. ",
            "author": "Jason Gerlowski",
            "id": "comment-16528864"
        },
        {
            "date": "2018-07-05T13:44:43+0000",
            "content": "Commit 98768d9825c5a72043113166a4f462eb17b5e8db in lucene-solr's branch refs/heads/master from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=98768d9 ]\n\nSOLR-12309: Improve CloudSolrClient.Builder constructor Javadocs ",
            "author": "ASF subversion and git services",
            "id": "comment-16533673"
        },
        {
            "date": "2018-07-05T13:46:39+0000",
            "content": "Commit 7b6662c3d7e2f51cd2605ae567332f5dd5d014ac in lucene-solr's branch refs/heads/branch_7x from Jason Gerlowski\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7b6662c ]\n\nSOLR-12309: Improve CloudSolrClient.Builder constructor Javadocs ",
            "author": "ASF subversion and git services",
            "id": "comment-16533674"
        }
    ]
}