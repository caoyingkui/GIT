{
    "id": "SOLR-1690",
    "title": "JSONKeyValueTokenizerFactory -- JSON Tokenizer",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Schema and Analysis"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Sometimes it is nice to group structured data into a single field.\n\nThis (rough) patch, takes JSON input and indexes tokens based on the key values pairs in the json.\n\nschema.xml\n<!-- JSON Field Type -->\n    <fieldtype name=\"json\" class=\"solr.TextField\" positionIncrementGap=\"100\" omitNorms=\"true\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.JSONKeyValueTokenizerFactory\" keepArray=\"true\" hierarchicalKey=\"false\"/>\n        <filter class=\"solr.TrimFilterFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n        <filter class=\"solr.TrimFilterFactory\" />\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n    </fieldtype>\n\n\n\nGiven text:\n\n { \"hello\": \"world\", \"rank\":5 }\n\n\n\nindexed as two tokens:\n\n\n\n\n term position \n \t1 \n\t2 \n\n\n term text \n \thello:world\t\n rank:5 \n\n\n term type \n \tword \n\tword \n\n\n source start,end \n \t12,17\t\n 27,28",
    "attachments": {
        "SOLR-1690-JSONKeyValueTokenizerFactory.patch": "https://issues.apache.org/jira/secure/attachment/12429152/SOLR-1690-JSONKeyValueTokenizerFactory.patch",
        "noggit-1.0-A1.jar": "https://issues.apache.org/jira/secure/attachment/12429153/noggit-1.0-A1.jar"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12795382",
            "date": "2009-12-30T18:44:59+0000",
            "content": "Here is a simple JSON tokenizer.  No tests, but a good place to start if you are looking to do something similar. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12795383",
            "date": "2009-12-30T18:45:55+0000",
            "content": "This tokenizer uses noggit\nhttp://svn.apache.org/repos/asf/labs/noggit/ "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12795729",
            "date": "2010-01-01T03:21:50+0000",
            "content": "FWIW: I'm finding it hard to imagine use cases that this would be useful for ... so as a result i have no feedback/suggestions on the patch/usage. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12795737",
            "date": "2010-01-01T05:29:44+0000",
            "content": "I have been using it to have structured data stored in a single field.  Kind of like a less cryptic version of:\nhttp://wiki.apache.org/solr/UserTagDesign\n\nI'm not sure it belongs in /trunk, but wanted to post it here so that others could use it if they want... "
        },
        {
            "author": "Hayder Marzouk",
            "id": "comment-12797313",
            "date": "2010-01-06T21:07:53+0000",
            "content": "Hi Ryan,\nGreat solution. It's what i am looking for.\nCan u attach the full code please. "
        },
        {
            "author": "Prashant Saraswat",
            "id": "comment-13834119",
            "date": "2013-11-27T20:36:57+0000",
            "content": "@Ryan Mckinley: Many thanks for attaching the patch here. It is most useful.\n\n@Hoss Man: Consider this usecase.Take your favorite ecommerce site ( say newegg.com, ebay.com etc ). Notice that they have some kind of category hierarchy. Each category has category attributes ( say Brand ) with category sensitive possible values(Apple/Samsung for cell phone and Sharp/Samsung for HDTVs) (. In these cases the number of categories specific attributes are in 10's of thousand. It is not realistically possible to create such a schema so that every category specific attribute is mapped to a solr field. However, you can store the category specific attributes per category as a json string.\n\nNow, you do need to filter by category specific attributes. Say you are searching for HDTVs and you only want to see those manufactured by Samsung. As is, solr will not allow you to search in a field which looks like this:\n{\"name\":\"Brand\", \"value\":\"Samsung\"}\n\nsomething like fq=categoryattribute:\"name\":\"brand\",\"value\":\"samsung\"  ( properly escaped ) doesn't work\n\nEnter the awesome jsontokenizer written by Ryan McKinley. This allows the same field to be indexed as json and \nsomething like fq=categoryattribute:\"name:brand\" AND categoryattribute:\"value:Samsung\" works.\n\nHappy to provide more information if needed. Also happy to take the slap if I'm missing something obvious here. "
        },
        {
            "author": "Mohamed",
            "id": "comment-16074869",
            "date": "2017-07-05T14:44:38+0000",
            "content": "+1 for this tokenizer index "
        }
    ]
}