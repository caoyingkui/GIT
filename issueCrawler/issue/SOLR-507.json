{
    "id": "SOLR-507",
    "title": "Spell Checking Improvements",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "spellchecker"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Creating a placeholder issue to track Spell Checking Improvements.  Individual issues can later be created and linked for each area of separable concern when they are determined.  \n\nAreas to discuss include:\n\n\n\tspell suggestions from within the current query (minus terms being corrected) and filter so that suggestions are always valid\n\t\n\t\tneed approaches to merging the spelling list with the current mask of valid records.  Also, is this a better change to Lucene first, or something that belongs in Solr?\n\t\tneed to add spell checking as query component and make available to various query handlers\n\t\tspell checking to be field specific to support responding correctly with dismax queries\n\t\n\t\n\tspell suggestions from a distributed search (SOLR-303) by augmenting the response, or alternatively just provide a federating of Spell Checker requests on their own and let the application decide when to use each.\n\tspell suggestions as a search component to augment other queries\n\n\n\nWhat are other typical areas of concern, or suggestions for improvements for spell checking that can be tracked?  \n\nI am willing to look at driving a patch for this area, especially for spell checking working within the current result set, and across  distributed search.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jayson Minard",
            "id": "comment-12580148",
            "date": "2008-03-18T22:35:08+0000",
            "content": "A related item from Lucene project...\n\n\n\tLUCENE-626 \"Extended spell checker with phrase support and adaptive user session analysis\" provides phrase-level spell suggestions.\n\n\n\nAnd tracking comments about spell suggestion algorithms just in case this comes up:\n\n\n\tSpelling Checker using Lucene\n\n\n "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12580161",
            "date": "2008-03-18T22:56:37+0000",
            "content": "Updated description to provide alternatives for distributed search. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12580176",
            "date": "2008-03-18T23:56:19+0000",
            "content": "Spell checking is not an area I've personally looked at, but your list of discussion items looks spot on.\nIMO, since integrating spelling suggestions with general query results (search, facet, highlight) hasn't been done before in Solr, the response format is wide open (go crazy!) "
        },
        {
            "author": "Jayson Minard",
            "id": "comment-12580184",
            "date": "2008-03-19T00:11:56+0000",
            "content": "Linking to related issue of distributed search. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12592328",
            "date": "2008-04-25T10:03:52+0000",
            "content": "I have just finished implementing a SpellCheck library (using Lucene) for a project which was not already using Solr. I implemented a few ideas there which can be added to Solr.\n\n\n\tGiven a user query consisting of many words, return just one suggestion for the whole query e.g. search for \"hybrd sedn\" gives you \"hybrid sedan\" as a suggestion\n\tGive me a suggestion on a per-field basis\n\tNever give duplicate words in a suggestion e.g. My index contains \"Mercedes-Benz\" and user searches for \"mercedec bens\", he should not get a suggestion like \"Mercedes-Benz Mercedes-Benz\"\n\tDon't try to give a suggestion for tokens less than a given length (my impl used 3). For a query like \"mercedes e class\" it avoids giving a suggestion like \"mercedes e-class c-class\"\n\n\n\nI understand that these tweaks are often very specific to the use-case, but we can atleast provide the features for people to use as they see fit. In order to implement the multiple-field support, we can change SpellCheckerRequestHandler to create HighFrequencyDictionary for each configured field and add them all to the spell check index. We can use the overloaded suggestSimilar method (which accepts field) to query. If this sounds fine, I can give a patch to add these features. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12595638",
            "date": "2008-05-09T15:32:09+0000",
            "content": "Shalin:\nThis all sounds very good.  Do you mind opening a new JIRA issue with this information, so you can attach a patch to that?  Thanks. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12595988",
            "date": "2008-05-12T06:34:59+0000",
            "content": "A new JIRA issue SOLR-572 is created for a Search Component for the Lucene contrib SpellChecker.\n\nAnother suggestion:\n\n\tHave a postCommit/postOptimize listener to (re)create spell checker index. Currently, the user needs to make an explicit query to build the spell index which can be easily automated.\n\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12596170",
            "date": "2008-05-12T19:16:33+0000",
            "content": "Shalin,\nGood idea, I think, but only if the SC is being built from the modified index.  One thing I'd like to add to SCRH, actually, is the ability to (re)build the SC index from a plain text file (via PlainTextDictionary class in Lucene's SC).  In that case postCommit/postOptimize should not trigger SC index rebuilding. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12596471",
            "date": "2008-05-13T17:55:58+0000",
            "content": "Have a postCommit/postOptimize listener to (re)create spell checker index. Currently, the user needs to make an explicit query to build the spell index which can be easily automated.\n\nit's not true that users need to make an explicit query:  The QuerySenderListener can be used to automatically trigger the \"request\" to rebuild the index.  the rebuild cmd was designed that way intentionally: so people could manually hit it if desired, or it could be automated as part of a postCommit or postOptimize hook. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12596680",
            "date": "2008-05-14T09:20:18+0000",
            "content": "Hoss - I was not aware that I could use the QuerySenderListener in that way.\n\nOtis - I agree. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12896575",
            "date": "2010-08-09T15:07:13+0000",
            "content": "Most of these items are (or will be) fixed by other issues "
        }
    ]
}