{
    "id": "SOLR-8707",
    "title": "Distribute (auto)commit requests evenly over time in multi shard/replica collections",
    "details": {
        "components": [
            "update"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "In current implementation, all Solr nodes start commit for all cores in a collection almost at the same time. As result, it creates a load spike in cluster at regular interval, particular when collection is on HDFS. The main reason is that all cores are created almost at the same time for a collection and do commit in a fixed interval afterwards.\n\nIt's good to distribute the the commit load evenly to avoid load spike. It helps to improve performance and reliability in general.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-02-19T20:04:35+0000",
            "author": "Mark Miller",
            "content": "What do you want to do? Randomly stagger the starting of the auto commit a bit? ",
            "id": "comment-15154782"
        },
        {
            "date": "2016-02-19T20:19:09+0000",
            "author": "Michael Sun",
            "content": "Mark Miller Randomly stagger the starting of auto commit can help. Another way is to delay the first commit for every core for a certain amount of time. For example, in case there are 6 cores and auto commit time is 60 second, the first core commit without delay, the second core do first commit after 10 seconds and commit in 60 seconds interval afterwards, and so on. ",
            "id": "comment-15154807"
        },
        {
            "date": "2016-02-20T00:47:22+0000",
            "author": "Hoss Man",
            "content": "tweaked subject to clarify: 1) \"evenly\" refers to time; 2) this is specific to autocommit ",
            "id": "comment-15155231"
        },
        {
            "date": "2016-02-20T00:57:55+0000",
            "author": "Hoss Man",
            "content": "For example, in case there are 6 cores and auto commit time is 60 second, the first core commit without delay, the second core do first commit after 10 seconds and commit in 60 seconds interval afterwards, and so on.\n\ninteresting ... a naive effort for individual cores to \"space themselves out\" in time could probably be done fairly trivially when initializing the auto commit timers on core load w/o a lot of continual coordination even if replicas are added/removed over time:\n\nif ZK mode:\n\n\tdetermine what shard we are\n\trequest a list of all (known) replicas for our shard (even if they aren't currently active)\n\tsort list of replicas by name, and locate our position N in the list and the list size S\n\tassign \"delayUnit = autoCommitTime / S\"\n\tset an initial delay on the auto commit timer thread to \"(delayUnit * N) + rand(0, delayUnit)\"\n\n\n\n(The small amount of randomness seeming like a good idea to me in case some replica is replaced by a new replica with a diff name, causing a different existing replica (that doesn't pay know about the change to the list of ll replicas) to shift up/down one in the list and think it has the same N as the new replica)\n ",
            "id": "comment-15155241"
        },
        {
            "date": "2016-02-20T01:21:47+0000",
            "author": "Mark Miller",
            "content": "A long delay outside of configuration is a little worrying to me because some people will restart a cluster while doing full indexing (message service or something). If you basically ignore the first autocommit, you can drastically raise the tlog ram reqs I think. Just something to consider. ",
            "id": "comment-15155264"
        },
        {
            "date": "2016-02-20T03:09:18+0000",
            "author": "Hoss Man",
            "content": "A long delay outside of configuration is a little worrying\n\nsure ... with this type of approach, you'd want the \"first trigger\" to happen at the initialDelay, and then repeat every autoCommitTime (as opposed to the current logic which uses initialDelay == autoCommitTime)\n\nit's also something that could be easily be added as a config option. ",
            "id": "comment-15155341"
        }
    ]
}