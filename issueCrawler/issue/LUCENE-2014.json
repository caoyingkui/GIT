{
    "id": "LUCENE-2014",
    "title": "position increment bug: smartcn",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [
            "3.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "If i use LUCENE_VERSION >= 2.9 with smart chinese analyzer, it will crash indexwriter with any reasonable amount of chinese text.\n\nits especially annoying because it happens in 2.9.1 RC as well.\n\nthis is because the position increments for tokens after stopwords are bogus:\n\nHere's an example (from test case), where the position increment should be 2, but is instead 91975314!\n\n\n  public void testChineseStopWords2() throws Exception {\n    Analyzer ca = new SmartChineseAnalyzer(Version.LUCENE_CURRENT); /* will load stopwords */\n    String sentence = \"Title:San\"; // : is a stopword\n    String result[] = { \"titl\", \"san\"};\n    int startOffsets[] = { 0, 6 };\n    int endOffsets[] = { 5, 9 };\n    int posIncr[] = { 1, 2 };\n    assertAnalyzesTo(ca, sentence, result, startOffsets, endOffsets, posIncr);\n  }\n\n\n\njunit.framework.AssertionFailedError: posIncrement 1 expected:<2> but was:<91975314>\n\tat junit.framework.Assert.fail(Assert.java:47)\n\tat junit.framework.Assert.failNotEquals(Assert.java:280)\n\tat junit.framework.Assert.assertEquals(Assert.java:64)\n\tat junit.framework.Assert.assertEquals(Assert.java:198)\n\tat org.apache.lucene.analysis.BaseTokenStreamTestCase.assertTokenStreamContents(BaseTokenStreamTestCase.java:83)\n\t...",
    "attachments": {
        "LUCENE-2014.patch": "https://issues.apache.org/jira/secure/attachment/12423556/LUCENE-2014.patch",
        "LUCENE-2014_branch.patch": "https://issues.apache.org/jira/secure/attachment/12423565/LUCENE-2014_branch.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-10-29T08:04:56+0000",
            "content": "this patch only contains a testcase demonstrating the problem. ",
            "author": "Robert Muir",
            "id": "comment-12771321"
        },
        {
            "date": "2009-10-29T08:08:58+0000",
            "content": "Maybe we should use now BaseTokenStreamTestcase (which now no longer uses old/new TS API) to now test all Version constants, which is easy in 3.0 (because it's enum now) and you can iterate using for(Version v : Version.values()).\n\nI proposed this already for Highlighter (see other issue).\n\nIs it a problem in StopWordFilter? ",
            "author": "Uwe Schindler",
            "id": "comment-12771322"
        },
        {
            "date": "2009-10-29T08:10:35+0000",
            "content": "\nIs it a problem in StopWordFilter?\n\nI don't really know where it is to tell you the truth... i spent a little time trying to create an english testcase for StopFilter, but couldn't reproduce it there.\n\nsmartcn doesn't even touch position increment attributes, so its really wierd... ",
            "author": "Robert Muir",
            "id": "comment-12771323"
        },
        {
            "date": "2009-10-29T08:21:36+0000",
            "content": "I do not see the problem, from StopFilter:\n\n@Override\npublic final boolean incrementToken() throws IOException {\n  // return the first non-stop word found\n  int skippedPositions = 0;\n  while (input.incrementToken()) {\n    if (!stopWords.contains(termAtt.termBuffer(), 0, termAtt.termLength())) {\n      if (enablePositionIncrements) {\n        posIncrAtt.setPositionIncrement(posIncrAtt.getPositionIncrement() + skippedPositions);\n      }\n      return true;\n    }\n    skippedPositions += posIncrAtt.getPositionIncrement();\n  }\n  // reached EOS -- return false\n  return false;\n}\n\n\n\nThe problem can only be that the input filter returned some big posIncr for the stop word. The code seems very clear to me. Let's debug  ",
            "author": "Uwe Schindler",
            "id": "comment-12771327"
        },
        {
            "date": "2009-10-29T08:26:37+0000",
            "content": "Uwe, check this out.\n\nsmartcn doesn't use PositionIncrementAttribute, but its tokenizer does call clearAttributes() as it should.\n\nbut if I modify WordTokenFilter to set the positionincrement to 1:\nposIncAtt = addAttribute(PositionIncrementAttribute.class);\n...\nposIncAtt.setPositionIncrement(1);\n\nthen the test passes... basically uninitialized variable problem... but smartcn shouldnt have to do this, right? ",
            "author": "Robert Muir",
            "id": "comment-12771329"
        },
        {
            "date": "2009-10-29T08:29:38+0000",
            "content": "Hm hm\nBut the StopFilter also adds the attribute and therefore the clearAttributes call should clear it.\n\nI'll look into it. ",
            "author": "Uwe Schindler",
            "id": "comment-12771331"
        },
        {
            "date": "2009-10-29T08:30:00+0000",
            "content": "duh, this is the problem Uwe.\n\nWordTokenFilter is like a source of tokens, even though it is not a tokenizer.\n\nthis is because smartcn's tokenizer just breaks out sentences.... WordTokenFilter breaks these into words.\n\n so i think WordTokenFilter must call clearAttributes()... ? ",
            "author": "Robert Muir",
            "id": "comment-12771332"
        },
        {
            "date": "2009-10-29T08:33:35+0000",
            "content": "this patch adds clearAttributes to chinese WordTokenFilter, fixes the issue. ",
            "author": "Robert Muir",
            "id": "comment-12771334"
        },
        {
            "date": "2009-10-29T08:37:45+0000",
            "content": "This is the problem, you are right. I thought about that, too.\n\nThe question is, why does the PosIncr get such strange values even when the filter is source of tokens? Nobody else modifies it? ",
            "author": "Uwe Schindler",
            "id": "comment-12771335"
        },
        {
            "date": "2009-10-29T08:42:46+0000",
            "content": "Uwe, yeah the only thing modifying it should be StopFilter... so I can see the values being \"kinda strange\" but not as wierd as what I see.\n\ni worry about this clearAttributes solution though, perhaps WordTokenFilter should use captureState/restoreState api, like the ThaiWordFilter does (very similar analyzer).\nIf i use capture/restoreState this should not be a problem right?\n\nAnd this way things like custom attributes would be preserved? ",
            "author": "Robert Muir",
            "id": "comment-12771336"
        },
        {
            "date": "2009-10-29T08:57:27+0000",
            "content": "Hihi, I know where the strange values come from: It is the test in BaseTokenStreamTestCase itsself, that does it to check for missing clearAttributes, see assertTokenStreamContents.... It sets all Attributes to bogus values before calling incrementToken. If you do not clear the attributes, the bogus values stay there.\n\nBut the question is, why does IndexWriter fail (how does it fail?). Normally it should not be affected, as the posIncr stays 1. ",
            "author": "Uwe Schindler",
            "id": "comment-12771338"
        },
        {
            "date": "2009-10-29T08:57:50+0000",
            "content": "Maybe we should use now BaseTokenStreamTestcase (which now no longer uses old/new TS API) to now test all Version constants, which is easy in 3.0 (because it's enum now) and you can iterate using for(Version v : Version.values()). \n\nthis might be a good idea, although the behavior of the analyzer could change depending upon Version. Maybe best to actually test the different possibilities explicitly?\n\nI think after this one is resolved, i will open a task as a first step to improve the tests of these analyzers to test posInc as well, because I don't see it tested for similar cases like Thai.  ",
            "author": "Robert Muir",
            "id": "comment-12771339"
        },
        {
            "date": "2009-10-29T08:59:17+0000",
            "content": "But the question is, why does IndexWriter fail (how does it fail?). Normally it should not be affected, as the posIncr stays 1.\n\nOh, the IndexWriter fails because of integer overflow with any large document (lots of posIncr's get added up, overflow and create a negative posIncr)\nso the negative posIncr creates an exception.\n\n<edit>\n\nUwe I think this really happens especially because of the way smartcn works. \nsmartcn creates individual tokens for each piece of punctuation (including things like whitespace), and puts these in the stopword list.\nso if you have a chinese document with lots of space ... you can imagine how it can add up and overflow. ",
            "author": "Robert Muir",
            "id": "comment-12771341"
        },
        {
            "date": "2009-10-29T09:04:55+0000",
            "content": "Ah understand, because nobody resets the posinc to 1 back, it adds up in a 2^n manner. stop filter updates to 2, because stop word. After that nobody resets to 1 back, so it gets 2, 4, 8,... b\u00e4ng if more stopwords occur. ",
            "author": "Uwe Schindler",
            "id": "comment-12771342"
        },
        {
            "date": "2009-10-29T09:07:22+0000",
            "content": "Uwe exactly. so only remaining question is, do you think I should change this filter to use capture/restoreState api instead of using clearAttributes?\n\nI guess the only advantage would be that it would preserve any customAttributes or payloads that someone might add after the SentenceTokenizer, but before the WordTokenFilter propagating them downto the individual words. ",
            "author": "Robert Muir",
            "id": "comment-12771343"
        },
        {
            "date": "2009-10-29T09:07:42+0000",
            "content": "i worry about this clearAttributes solution though, perhaps WordTokenFilter should use captureState/restoreState api, like the ThaiWordFilter does (very similar analyzer).\nIf i use capture/restoreState this should not be a problem right?\n\nI think the filter is fine how it is at the moment. The problem is only the missing clearAttributes when you produce more than one token out of one big one (the sentence). No need for captureState, because the tokens are new ones. If somebody adds custom attributes, they would have cleared, but would that be not correct?\n\nI guess the only advantage would be that it would preserve any customAttributes or payloads that someone might add after the SentenceTokenizer, but before the WordTokenFilter propagating them downto the individual words.\n\nDoes this make sense to insert a filter between both? The transition from sentence tokens to word tokens creates totally different tokens, how should a payload or other custom att work correct here? Normally such payload filters should be inserted after the WordFilter. The problem of capture/restore state is addiional copy cost for nothing (the long sentence token is copied again and again and always reset to the text word). ",
            "author": "Uwe Schindler",
            "id": "comment-12771344"
        },
        {
            "date": "2009-10-29T09:09:16+0000",
            "content": "I think the filter is fine how it is at the moment. The problem is only the missing clearAttributes when you produce more than one token out of one big one (the sentence). No need for captureState, because the tokens are new ones. If somebody adds custom attributes, they would have cleared, but would that be not correct?\n\nnot really sure, thats why I asked you \n\nI guess for now, its good enough to fix it to not crash IndexWriter.\n\nI will commit soon. ",
            "author": "Robert Muir",
            "id": "comment-12771345"
        },
        {
            "date": "2009-10-29T09:12:18+0000",
            "content": "I will commit soon.\n\n+1\n\nAnd how about 2.9.1? ",
            "author": "Uwe Schindler",
            "id": "comment-12771347"
        },
        {
            "date": "2009-10-29T09:16:00+0000",
            "content": "And how about 2.9.1?\n\nI will upload and test a patch against 2.9 branch (can you commit it for me?) ",
            "author": "Robert Muir",
            "id": "comment-12771350"
        },
        {
            "date": "2009-10-29T09:17:27+0000",
            "content": "ok. ",
            "author": "Uwe Schindler",
            "id": "comment-12771351"
        },
        {
            "date": "2009-10-29T09:23:18+0000",
            "content": "Committed revision 830871 to trunk.\n\nI will test this against 2.9 and upload a patch.\n\nThanks for your help Uwe. ",
            "author": "Robert Muir",
            "id": "comment-12771353"
        },
        {
            "date": "2009-10-29T09:24:49+0000",
            "content": "No prob. I also forgot about the bogus values set by BaseTokenStreamTestcase.... But there is no possibility to test/document this in a good way. ",
            "author": "Uwe Schindler",
            "id": "comment-12771355"
        },
        {
            "date": "2009-10-29T09:36:11+0000",
            "content": "patch against 2.9 branch ",
            "author": "Robert Muir",
            "id": "comment-12771359"
        },
        {
            "date": "2009-10-29T09:36:58+0000",
            "content": "Guys, how serious is this issue?  Should we respin 2.9.1? ",
            "author": "Michael McCandless",
            "id": "comment-12771360"
        },
        {
            "date": "2009-10-29T09:38:31+0000",
            "content": "I merged your changes into 2.9. I can commit, no need for a patch! ",
            "author": "Uwe Schindler",
            "id": "comment-12771362"
        },
        {
            "date": "2009-10-29T09:38:31+0000",
            "content": "Mike, its up to you.\n\nI was just analyzing some not-ridiculously-large Chinese texts from Gutenberg, when I hit the issue.\n\nThe problem is that smartcn indexes punctuation as individual tokens, but filters them out with StopFilter (its stopword list is all punctuation).\nThis means it makes heavy use of stopfilter, compared to other analyzers. ",
            "author": "Robert Muir",
            "id": "comment-12771363"
        },
        {
            "date": "2009-10-29T09:43:37+0000",
            "content": "I also merged the BaseTokenStreamTestcase back, because the bogus values setter was missing in 2.9. Now the tests produce same results.\n\nWill commit soon. ",
            "author": "Uwe Schindler",
            "id": "comment-12771364"
        },
        {
            "date": "2009-10-29T09:48:58+0000",
            "content": "I also merged the BaseTokenStreamTestcase back, because the bogus values setter was missing in 2.9. Now the tests produce same results. \n\ngood deal... i didnt test the bug with the JUnit test against 2.9, but my IndexWriter threw the exception if i used Version.LUCENE_29 (with the RC2 jars), so i knew it was affected. ",
            "author": "Robert Muir",
            "id": "comment-12771365"
        },
        {
            "date": "2009-10-29T09:56:01+0000",
            "content": "Committed in 2.9, revision: 830876\n\nI think you can close the issue. We should ask Mike, to create a new RC, then we also have the other bug fixed in 2.9 (I resolved yesterday). Mike then only have to move the CHANGES entries down to 2.9.1 in contrib/CHANGES.txt\n\nThe other problem still in 2.9 is the default for posincr in StopFilter is version is <2.9, which is now always false for StandardAnalyzer-no-argctor and others. ",
            "author": "Uwe Schindler",
            "id": "comment-12771367"
        },
        {
            "date": "2009-10-29T09:58:22+0000",
            "content": "thanks again Uwe ",
            "author": "Robert Muir",
            "id": "comment-12771368"
        },
        {
            "date": "2009-10-29T16:50:13+0000",
            "content": "\nDoes this make sense to insert a filter between both? The transition from sentence tokens to word tokens creates totally different tokens, how should a payload or other custom att work correct here? Normally such payload filters should be inserted after the WordFilter. The problem of capture/restore state is addiional copy cost for nothing (the long sentence token is copied again and again and always reset to the text word).\n\nI could imagine a use case where a person wants to keep the sentence information intact (perhaps to improve retrieval accuracy or maybe just restrict phrase queries to match within sentences).\nBut I guess to some extent, the chinese phrasequery works pretty intelligently already with >= Version.LUCENE_29 because punctuation is a stopword, and the position increments are adjusted.\n\nI agree about the expensive cost though... best to leave it for now. But this is the way the Thai analyzer works. ",
            "author": "Robert Muir",
            "id": "comment-12771473"
        }
    ]
}