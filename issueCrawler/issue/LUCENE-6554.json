{
    "id": "LUCENE-6554",
    "title": "ToBlockJoinFieldComparator wrapping is illegal",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "The following test case triggers an AssertionError:\n\n\n  public void testMissingValues() throws IOException {\n    final Directory dir = newDirectory();\n    final RandomIndexWriter w = new RandomIndexWriter(random(), dir, newIndexWriterConfig(new MockAnalyzer(random()))\n        .setMergePolicy(NoMergePolicy.INSTANCE));\n    w.addDocument(new Document());\n    w.getReader().close();\n    w.addDocument(new Document());\n    IndexReader reader = w.getReader();\n    w.close();\n    IndexSearcher searcher = newSearcher(reader);\n    // all docs are parent\n    BitDocIdSetFilter parentFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new MatchAllDocsQuery()));\n    BitDocIdSetFilter childFilter = new BitDocIdSetCachingWrapperFilter(new QueryWrapperFilter(new MatchNoDocsQuery()));\n    ToParentBlockJoinSortField sortField = new ToParentBlockJoinSortField(\n        \"some_random_field\", SortField.Type.STRING, false, parentFilter, childFilter\n    );\n    Sort sort = new Sort(sortField);\n    TopFieldDocs topDocs = searcher.search(new MatchAllDocsQuery(), 1, sort);\n    searcher.getIndexReader().close();\n    dir.close();\n  }\n\n\n\n\njava.lang.AssertionError\n\tat __randomizedtesting.SeedInfo.seed([E9D45D81F597AE4B:83490FC7D11D9ABA]:0)\n\tat org.apache.lucene.search.FieldComparator$TermOrdValComparator.setBottom(FieldComparator.java:800)\n\tat org.apache.lucene.search.FieldComparator$TermOrdValComparator.getLeafComparator(FieldComparator.java:783)\n\tat org.apache.lucene.search.join.ToParentBlockJoinFieldComparator.doSetNextReader(ToParentBlockJoinFieldComparator.java:83)\n\tat org.apache.lucene.search.SimpleFieldComparator.getLeafComparator(SimpleFieldComparator.java:36)\n\tat org.apache.lucene.search.FieldValueHitQueue.getComparators(FieldValueHitQueue.java:183)\n\tat org.apache.lucene.search.TopFieldCollector$NonScoringCollector.getLeafCollector(TopFieldCollector.java:141)\n\tat org.apache.lucene.search.FilterCollector.getLeafCollector(FilterCollector.java:40)\n\tat org.apache.lucene.search.AssertingCollector.getLeafCollector(AssertingCollector.java:48)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:611)\n\tat org.apache.lucene.search.AssertingIndexSearcher.search(AssertingIndexSearcher.java:92)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:424)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:543)\n\tat org.apache.lucene.search.IndexSearcher.searchAfter(IndexSearcher.java:528)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:455)\n\tat org.apache.lucene.search.join.TestBlockJoinSorting.testMissingValues(TestBlockJoinSorting.java:347)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1627)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:836)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:872)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:886)\n\tat org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:798)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:458)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:845)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:747)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:781)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:792)\n\tat org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:54)\n\tat org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n\tat org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:65)\n\tat org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n\tat com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n\tat com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:365)\n\tat java.lang.Thread.run(Thread.java:745)\n\n\n\nThe reason is that when a parent document does not have children, ToParentBlockJoinComparator simply omits to forward calls to copy to the wrapped comparator. So the wrapped comparator ends up with allocated slots that have 0 as an ordinal (the default value in an array) and a null value, which is illegal since 0 is a legal ordinal which can't map to null.\n\nThis can't be fixed without adding new methods to the already crazy comparator API, so I think there is nothing we can do but remove this comparator.\n\nIt would be possible to achieve the same functionnality by implementing something similar to SortedNumericSelector, except that it would have to select across several docs instead of values.",
    "attachments": {
        "LUCENE-6554.patch": "https://issues.apache.org/jira/secure/attachment/12740669/LUCENE-6554.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14593543",
            "author": "Adrien Grand",
            "date": "2015-06-19T15:47:43+0000",
            "content": "I tried to think about a replacement for this feature and it would require us to implement a selector for all combinations of dv types and sort modes. Additionally, these selectors would have the downside of being linear with the number of child documents, which I don't think is something we should encourage: it would be more efficient to store aggregated information at the parent level directly.\n\nSo I propose that we just remove the functionnality from the join module. "
        },
        {
            "id": "comment-14595036",
            "author": "Martijn van Groningen",
            "date": "2015-06-21T12:23:43+0000",
            "content": "I would like this feature to remain. I think implementing this via a selector is okay, its more code, but that shouldn't be too bad. I don't like the workaround, because the aggregated information relies on the child query and to aggregate it properly the child information needs to be aggregated multiple times. I think it is good that someone can choose to avoid duplication of data with block join sorting at the cost that this is linear to the number of matching child documents. "
        },
        {
            "id": "comment-14605952",
            "author": "Adrien Grand",
            "date": "2015-06-29T17:36:13+0000",
            "content": "Here is a patch that removes ToBlockJoinFieldComparator and adds selectors for min/max across blocks of documents that either have SORTED, SORTED_SET, NUMERIC or SORTED_NUMERIC doc values.\n\nThe API of ToParentBlockJoinSortField is left unchanged so it should be pretty transparent to users, the only difference is that it will not work anymore if they used to sort using values (STRING_VAL sort type) or custom comparators. "
        },
        {
            "id": "comment-14609686",
            "author": "Martijn van Groningen",
            "date": "2015-07-01T07:37:03+0000",
            "content": "+1 this looks good, thanks for doing this Adrien Grand! "
        },
        {
            "id": "comment-14609772",
            "author": "ASF subversion and git services",
            "date": "2015-07-01T08:54:23+0000",
            "content": "Commit 1688599 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1688599 ]\n\nLUCENE-6554: Removed illegal ToBlockJoinFieldComparator in favor of doc values selectors. "
        },
        {
            "id": "comment-14609831",
            "author": "ASF subversion and git services",
            "date": "2015-07-01T09:37:30+0000",
            "content": "Commit 1688610 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1688610 ]\n\nLUCENE-6554: Add missing javadocs. "
        },
        {
            "id": "comment-14609833",
            "author": "ASF subversion and git services",
            "date": "2015-07-01T09:40:02+0000",
            "content": "Commit 1688611 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1688611 ]\n\nLUCENE-6554: Removed illegal ToBlockJoinFieldComparator in favor of doc values selectors. "
        },
        {
            "id": "comment-14609839",
            "author": "Adrien Grand",
            "date": "2015-07-01T09:45:56+0000",
            "content": "Thanks Martijn! "
        },
        {
            "id": "comment-14713171",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:58+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}