{
    "id": "LUCENE-3722",
    "title": "make similarities/term/collectionstats take long (for > 2B docs)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "As noted by Yonik and Andrzej on SOLR-1632, this would be useful for distributed scoring.\n\nwe can also add a sugar method add() to both of these to make it easier to sum.",
    "attachments": {
        "LUCENE-3722.patch": "https://issues.apache.org/jira/secure/attachment/12511754/LUCENE-3722.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-01-25T00:29:00+0000",
            "content": "updated patch with improvements for\nthe preflex case (when they return -1). ",
            "author": "Robert Muir",
            "id": "comment-13192698"
        },
        {
            "date": "2012-01-25T01:39:26+0000",
            "content": "I think the add() methods as implemented in this patch are of limited usefulness... The reason I created a pair of similar classes in SOLR-1632 was to avoid creating new objects by allowing modification of int/long members in place, which is useful when aggregating partial stats. So I think a more useful implementation of add() could look like this:\n\n\npublic void add(CollectionStatistics other) {\n  assert this.field.equals(other.field);\n  this.maxDoc += other.maxDoc;\n  this.docCount += other.docCount;\n  this.sumTotalTermFreq += other.sumTotalTermFreq;\n  this.sumDocFreq += other.sumDocFreq;\n}\n\n\n\nRegarding the handling of -1: this code doesn't handle the case when only one stats is -1, which may happen in distributed scenario. I think in such case a -1 value should be treated as 0, i.e. it should not \"reset\" the accumulated value from other shards to -1, right? ",
            "author": "Andrzej Bialecki",
            "id": "comment-13192774"
        },
        {
            "date": "2012-01-25T01:47:19+0000",
            "content": "\nSo I think a more useful implementation of add() could look like this:\n\nBut I don't think we should just immediately make the stats classes mutable without thinking things through more, I'm not sure there is really any problem creating new objects (we should benchmark this, before making things mutable). \n\nmaybe we should not have add() here then at all and let the consumer take care of this themselves.\n\n\nshould be treated as 0, i.e. it should not \"reset\" the accumulated value from other shards to -1, right?\n\ni think it must not be treated as 0, the same way its handled by default in TermContext if some segments are 3.x: it means this statistic is simply not supported. \n\nIn other words, if any segment across any shard returns -1, the cumulative stat should always be -1: it means its not supported by the codec.\n\nThe similarities that use these new statistics already look for -1 and have fallback mechanisms for this case. ",
            "author": "Robert Muir",
            "id": "comment-13192779"
        },
        {
            "date": "2012-01-25T01:59:05+0000",
            "content": "maybe we should not have add() here then at all and let the consumer take care of this themselves.\n\nFair point, I'd rather remove it.\n\ni think it must not be treated as 0\n\nOk, it makes sense in local (multi reader) situations but in distributed scenario it may be still acceptable to lose just a part of the statistics from one shard while keeping the stats from other shards.\n\nWhich would be yet another reason to drop the add() methods  ",
            "author": "Andrzej Bialecki",
            "id": "comment-13192790"
        },
        {
            "date": "2012-01-25T02:05:14+0000",
            "content": "\nOk, it makes sense in local (multi reader) situations but in distributed scenario it may be still acceptable to lose just a part of the statistics from one shard while keeping the stats from other shards.\n\nI really think we should not do this: it can result in NaN/Inf/negative scores to have 'invalid'\nstatistics (this causes serious problems!), but we have (and test) that all the sims fallback\ngracefully for the -1 case.\n\n-1 means 'preflex codec does not support the stat'. Once we no longer have to worry about 3.x\nindexes, we no longer need to worry about -1. ",
            "author": "Robert Muir",
            "id": "comment-13192792"
        },
        {
            "date": "2012-01-25T02:08:35+0000",
            "content": "updated patch: this is just int->long conversion... at least we should be able to agree on this \n\nwe should still figure out how to make this summation easier and safer (especially for the \"preflex-returns-1\" case) ",
            "author": "Robert Muir",
            "id": "comment-13192793"
        },
        {
            "date": "2012-01-25T02:17:49+0000",
            "content": "just a simple example for what i meant about the -1 case:\n\nLets assume you have two shards, and one returns -1 for totalTermFreq().\n\nIf you were using BasicModelIF, which scores as:\n\ntf_norm * log(1 + (maxdoc + 1)/(totalTermFreq + 0.5))\n\n\n\nits far better to actually use -1 than a 'partial/incorrect' totalTermFreq,\nbecause in that case the formula will fall back to totalTermFreq=docFreq...\nit also must do this in case frequencies are omitted (omitTF), and for that\ncase the formula is still correct: but either way its falling back nicely to\nIDF:\n\n\ntf_norm * log(1 + (maxdoc + 1)/(docFreq + 0.5))\n\n\n\nYeah, i totally forgot about this being -1 in the omitTF case, so we should\nstill really think this summation through and make it easy to prevent mistakes,\nbecause i gather omitTF isn't going anywhere... grrr ",
            "author": "Robert Muir",
            "id": "comment-13192796"
        },
        {
            "date": "2012-01-25T16:36:55+0000",
            "content": "Patch synced up to trunk.\n\nas far as the unrelated -1/add()/summation stuff i added assertions to do basic bounds checking of these stats (found a bug in simpletext), so I think thats a good step for now about concerns of summation: at least we will probably catch any bad bugs.\n\nBut this patch just changes int->long and I think we can move forward with it. ",
            "author": "Robert Muir",
            "id": "comment-13193111"
        },
        {
            "date": "2012-01-27T13:06:22+0000",
            "content": "Committed the switch of int->long.\n\nFor now the summation stuff is still up to the caller... seems unfriendly, but maybe it should stay that way, but at least we have asserts that the stats aren't out of bounds. ",
            "author": "Robert Muir",
            "id": "comment-13194668"
        }
    ]
}