{
    "id": "LUCENE-8572",
    "title": "StringIndexOutOfBoundsException in parser/EscapeQuerySyntaxImpl.java",
    "details": {
        "components": [
            "core/queryparser"
        ],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "6.3",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "With\u00a0\"lucene-queryparser-6.3.0\", specifically in\n\"org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java\"\n\u00a0\nwhen escaping strings containing extended unicode chars, and with a locale distinct from that of the character set the string uses, the process fails, with a \"java.lang.StringIndexOutOfBoundsException\".\n\u00a0\nThe reason is that the comparison is done by previously converting all of the characters of the string to lower case chars, and by doing this, the original string size isn't anymore the same, but less, as of the transformed one, so that executing\n\u00a0\norg/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java:89\n\nfails with a java.lang.StringIndexOutOfBoundsException.\n\nI wonder whether the transformation to lower case is really needed when treating the escape chars, since by avoiding it, the error may be avoided.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16695702",
            "author": "Alan Woodward",
            "content": "Hi Octavian Mocanu, thanks for opening the issue.\u00a0 Would you be able to provide an example or test case that illustrates the failure? ",
            "date": "2018-11-22T09:18:59+0000"
        },
        {
            "id": "comment-16695760",
            "author": "Octavian Mocanu",
            "content": "Hi Alan Woodward,\n\nTrying e.g.\u00a0at\u00a0\n\n/org/apache/lucene/queryparser/flexible/standard/parser/EscapeQuerySyntaxImpl.java:83\u00a0\n\nin\n\nprivate static final CharSequence escapeTerm(CharSequence term, Locale locale)\n\nwith\n\n\u00a0\n\nterm = \"\u0130pone \" [304, 112, 111, 110, 101, 32]\nlocale = \"us\"\n\n\n\nresult ->\u00a0StringIndexOutOfBoundsException\n\n(it'll only work when having locale = \"tr\") ",
            "date": "2018-11-22T10:33:26+0000"
        },
        {
            "id": "comment-16695826",
            "author": "Alan Woodward",
            "content": "It looks as though FieldQueryNode and PathQueryNode are using Locale.getDefault()\u00a0when they should be using Locale.ROOT\n\ncc\u00a0Uwe Schindler\u00a0who understands locales better than I do... ",
            "date": "2018-11-22T12:02:09+0000"
        },
        {
            "id": "comment-16705249",
            "author": "Namgyu Kim",
            "content": "Hi, Alan Woodward, Uwe Schindler.\n\nI checked the issue and found that it could be a logical problem.\n\nFirst, I think it's not a Locale problem, but a replace algorithm(replaceIgnoreCase) itself.\n\nWhen you see the escapeWhiteChar(), it calls the replaceIgnoreCase() internally.\n (escapeTerm() -> escapeWhiteChar() -> replaceIgnoreCase())\n\n\u00a0\n\nprivate static CharSequence replaceIgnoreCase(CharSequence string,\n    CharSequence sequence1, CharSequence escapeChar, Locale locale) {\n  // string = \"\u0130pone \" [304, 112, 111, 110, 101, 32],  size = 6\n  ...\n  while (start < count) {\n    // Convert by toLowerCase as follows.\n    // string = \"i'\u0307pone \" [105, 775, 112, 111, 110, 101, 32], size = 7\n    // firstIndex will be set 6.\n    if ((firstIndex = string.toString().toLowerCase(locale).indexOf(first,\n        start)) == -1)\n      break;\n    boolean found = true;\n    ...\n    if (found) {\n      // In this line, String.toString() will only have a range of 0 to 5.\n      // So here we get a StringIndexOutOfBoundsException.\n      result.append(string.toString().substring(copyStart, firstIndex));\n      ...\n    } else {\n      start = firstIndex + 1;\n    }\n  }\n  ...\n}\n\n\n\u00a0\n\nSolving this may not be a big problem.\n\nBut what do you think about using\n\npublic static final CharSequence escapeWhiteChar(CharSequence str,\n      Locale locale) {\n    ...\n\n    for (int i = 0; i < escapableWhiteChars.length; i++) {\n      // Use String's replace method.\n      buffer = buffer.toString().replace(escapableWhiteChars[i], \"\\\\\");\n    }\n    return buffer;\n  }\n\n\ninstead of\n\npublic static final CharSequence escapeWhiteChar(CharSequence str,\n      Locale locale) {\n    ...\n\n    for (int i = 0; i < escapableWhiteChars.length; i++) {\n      // Stay current method.\n      buffer = replaceIgnoreCase(buffer, escapableWhiteChars[i].toLowerCase(locale), \"\\\\\", locale);\n    }\n    return buffer;\n  }\n\n\nin the escapeWhiteChar method?\n\n\u00a0 ",
            "date": "2018-11-30T20:36:41+0000"
        },
        {
            "id": "comment-16722060",
            "author": "Octavian Mocanu",
            "content": "Hi, in my opinion, the proposal of\u00a0Namgyu Kim\u00a0would be a nice solution, mainly for it avoids the problematic use of toLowerCase.\n\nBest! ",
            "date": "2018-12-15T08:02:53+0000"
        }
    ]
}