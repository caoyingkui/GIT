{
    "id": "SOLR-3636",
    "title": "edismax, synonyms and mm=100%",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0"
        ],
        "affect_versions": "None",
        "resolution": "Duplicate",
        "status": "Closed"
    },
    "description": "There is a problem with query-side synonyms, edismax and must-match=100%. \n\nedismax interprets must-match=100% as \"number of terms found by edismax from the original query\". These terms go through the query analyzer, and the synonym filter creates more terms, but the must-match term count is not incremented. Thus, given a synonym of\n\nmonkeyhouse => monkey house\n\n\nthe query q=big+monkeyhouse&mm=100% becomes (effectively) q=big+monkey+house&mm=2. This query finds documents matching only two out of three terms big+monkey, monkey+house, big+house.\n\nThis might also be a problem in dismax.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-20T12:16:50+0000",
            "content": "This is basically the same (or opposite) of SOLR-3085, where you find nothing when a stopword is removed, but in the synonym case you find too much when a token is added. These two issues should be seen together when looking for a fix. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13419079"
        },
        {
            "date": "2012-08-07T03:42:35+0000",
            "content": "rmuir20120906-bulk-40-change ",
            "author": "Robert Muir",
            "id": "comment-13429738"
        },
        {
            "date": "2012-08-16T00:08:02+0000",
            "content": "I checked the code, both in 4x and 3.6, and it in fact uses the actual number of optional of terms generated in the top-level BooleanQuery, not the \"number of terms found by edismax from the original query\" as stated here in the issue description.\n\nI suspect that this is a variation of SOLR-3589: \"Edismax parser does not honor mm parameter if analyzer splits a token\", where the low-level Lucene query parser code passes a single term to the field analyzer and gets multiple terms back and autoGeneratePhraseQueries is false, so the terms are ORed because that is the default operator. The Lucene level code does not know about \"mm\", Solr, or any request parameters at all.\n\nHmmm... maybe the solution to some of these issues is that if mm is 100%, Solr should implicitly set the default query operator directly to \"AND\", which would give the Lucene code the information needed to generate an AND rather than an OR.\n ",
            "author": "Jack Krupansky",
            "id": "comment-13435631"
        },
        {
            "date": "2012-08-16T00:15:17+0000",
            "content": "I suspect that this is a variation of SOLR-3589\nI bow to your superior skill in understanding query parser code and am closing this.\n\nWhen that and any other problems in this area are fixed, it would be really helpful to have one page which explains how query parsers, highlighting, synonyms and other algorithms interact. Whenever I combine these, it never works in a way that is completely understandable.  ",
            "author": "Lance Norskog",
            "id": "comment-13435638"
        },
        {
            "date": "2013-05-10T10:33:32+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653955"
        }
    ]
}