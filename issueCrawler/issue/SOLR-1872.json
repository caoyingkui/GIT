{
    "id": "SOLR-1872",
    "title": "Document-level Access Control in Solr",
    "details": {
        "affect_versions": "1.4",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "SearchComponents - other"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "This issue relates to providing document-level access control for Solr index data.\n\nA related JIRA issue is: SOLR-1834. I thought it would be best if I created a separate JIRA issue, rather than tack on to SOLR-1834, as the approach here is somewhat different, and I didn't want to confuse things or step on Anders' good work.\n\nThere have been lots of discussions about document-level access in Solr using LCF, custom comoponents and the like. Access Control is one of those subjects that quickly spreads to lots of 'ratholes' to dive into. Even if not everyone agrees with the approaches taken here, it does, at the very least, highlight some of the salient issues surrounding access control in Solr, and will hopefully initiate a healthy discussion on the range of related requirements, with the aim of finding the optimum balance of requirements.\n\nThe approach taken here is document and schema agnostic - i.e. the access control is independant of what is or will be in the index, and no schema changes are required. This version doesn't include LDAP/AD integration, but could be added relatively easily (see Ander's very good work on this in SOLR-1834). Note that, at the moment, this version doesn't deal with /update, /replication etc., it's currently a /select thing at the moment (but it could be used for these).\n\nThis approach uses a SearchComponent subclass called SolrACLSecurity. Its configuration is read in from solrconfig.xml in the usual way, and the allow/deny configuration is split out into a config file called acl.xml.\n\nacl.xml defines a number of users and groups (and 1 global for 'everyone'), and assigns 0 or more <acl-allow> and/or <acl-deny> elements.\nWhen the SearchComponent is initialized, user objects are created and cached, including an 'allow' list and a 'deny' list.\nWhen a request comes in, these lists are used to build filter queries ('allows' are OR'ed and 'denies' are NAND'ed), and then added to the query request.\n\nBecause the allow and deny elements are simply subsearch queries (e.g. <acl-allow>somefield:secret</acl-allow>, this mechanism will work on any stored data that can be queried, including already existing data.\n\nAuthentication\nOne of the sticky problems with access control is how to determine who's asking for data. There are many approaches, and to stay in the generic vein the current mechanism uses http parameters for this.\nFor an initial search, a client includes a username=somename parameter and a hash=pwdhash hash of its password. If the request sends the correct parameters, the search is granted and a uuid parameter is returned in the response header. This uuid can then be used in subsequent requests from the client. If the request is wrong, the SearchComponent fails and will increment the user's failed login count (if a valid user was specified). If this count exceeds the configured lockoutThreshold, no further requests are granted until the lockoutTime has elapsed.\nThis mechanism protects against some types of attacks (e.g. CLRF, dictionary etc.), but it really needs container HTTPS as well (as would most other auth implementations). Incorporating SSL certificates for authentication and making the authentication mechanism pluggable would be a nice improvement (i.e. separate authentication from access control).\n\nAnother issue is how internal searchers perform autowarming etc. The solution here is to use a local key called 'SolrACLSecurityKey'. This key is local and [should be] unique to that server. firstSearcher, newSearcher et al then include this key in their parameters so they can perform autowarming without constraint. Again, there are likely many ways to achieve this, this approach is but one.\n\nThe attached rar holds the source and associated configuration. This has been tested on the 1.4 release codebase (search in the attached solrconfig.xml for SolrACLSecurity to find the relevant sections in this file).\n\nI hope this proves helpful for people who are looking for this sort of functionality in Solr, and more generally to address how such a mechanism could ultimately be integrated into a future Solr release.\n\nMany thanks,\nPeter",
    "attachments": {
        "SolrACLSecurity.rar": "https://issues.apache.org/jira/secure/attachment/12441213/SolrACLSecurity.rar",
        "ASF.LICENSE.NOT.GRANTED--SolrACLSecurity.java": "https://issues.apache.org/jira/secure/attachment/12441383/ASF.LICENSE.NOT.GRANTED--SolrACLSecurity.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Peter Sturge",
            "id": "comment-12855698",
            "date": "2010-04-11T10:15:50+0000",
            "content": "This update adds in optional auditing of searches by users and failed access attempts, plus a few minor tweaks.\n\nTo configure auditing, here is a sample searchComponent section from solrconfg.xml:\n\n\n  <searchComponent name=\"SolrACLSecurity\" class=\"org.apache.solr.handler.security.SolrACLSecurity\">\n      <!-- SolrACLSecurityKey can be any alphanumeric string, the more complex the better.\n           For production environments, don't use the default value - create a new value.\n           This property needs to be present in all firstSearcher and newSearcher warming queries, otherwise\n           those requests will be blocked.\n      -->\n      <str name=\"SolrACLSecurity\">zxb79j3g76A79N8N2AbR0K852976qr1klt86xv436j2</str>\n      <str name=\"config-file\">acl.xml</str>\n      <!-- Auditing: Set audit to true to log all searches, including failed access attempts -->\n      <bool name=\"audit\">true</bool>\n      <int name=\"maxFileSizeInMB\">10</int>\n      <int name=\"maxFileCount\">10000</int>\n      <str name=\"auditFile\">audit.log</str>\n      <!-- \n            User lockout \n            'lockoutThreshold' is the number of consecutive incorrect logins before locking out the account\n            'lockoutTime' is the number of minutes to lockout the account\n            If 'lockoutThreshold' is 0 or less, account lockout is disabled (no accounts are ever locked out)\n            If not specified, the default values are: lockThreshold=5 lockoutTIme=15\n      -->\n      <str name=\"lockoutThreshold\">5</str>\n      <str name=\"lockoutTime\">15</str>\n </searchComponent>\n\n\n "
        },
        {
            "author": "Peter Sturge",
            "id": "comment-12855917",
            "date": "2010-04-12T10:35:26+0000",
            "content": "Updates a typo or two plus some misc tweaks.\n\n\n  <searchComponent name=\"SolrACLSecurity\" class=\"org.apache.solr.handler.security.SolrACLSecurity\">\n      <!-- SolrACLSecurityKey can be any alphanumeric string, the more complex the better.\n           For production environments, don't use the default value - create a new value.\n           This property needs to be present in all firstSearcher and newSearcher warming queries, otherwise\n           those requests will be blocked.\n      -->\n      <str name=\"SolrACLSecurityKey\">zxb79j3g76A79N8N2AbR0K852976qr1klt86xv436j2</str>\n      <str name=\"config-file\">acl.xml</str>\n      <!-- Auditing: Set audit to true to log all searches, including failed access attempts -->\n      <bool name=\"audit\">true</bool>\n      <int name=\"maxFileSizeInMB\">10</int>\n      <int name=\"maxFileCount\">10000</int>\n      <str name=\"auditFile\">audit.log</str>\n      <!-- \n            User lockout \n            'lockoutThreshold' is the number of consecutive incorrect logins before locking out the account\n            'lockoutTime' is the number of minutes to lockout the account\n            If 'lockoutThreshold' is 0 or less, account lockout is disabled (no accounts are ever locked out)\n            If not specified, the default values are: lockThreshold=5 lockoutTime=15\n      -->\n      <str name=\"lockoutThreshold\">5</str>\n      <str name=\"lockoutTime\">15</str>\n  </searchComponent>  \n\n\n\nThanks,\nPeter "
        },
        {
            "author": "Alexander Roethinger",
            "id": "comment-12856809",
            "date": "2010-04-14T09:11:58+0000",
            "content": "Hello Peter,\n\nI have a few detailed questions regarding your component.\nIs there any way to get in touch with you directly?\n\nKind regards\nAlexander  "
        },
        {
            "author": "Arvind Das",
            "id": "comment-13177606",
            "date": "2011-12-30T10:03:15+0000",
            "content": "Hii there\nDoes this work in solr 3.4 ? I am using solr 3.4 and want to apply document level security. Or should I use ManifoldCF ?\nI found it a bit simpler. Please tell if it can be applied else I think there is no alternative than ManifoldCF.\nThanks in advance "
        },
        {
            "author": "Peter Sturge",
            "id": "comment-13178536",
            "date": "2012-01-02T20:48:30+0000",
            "content": "Hi,\n\nI've not yet tried it directly with 3.4, but as it's a subclass of\nSearchComponent, it should work fine.\nSince it is just a plugin, it's easy to add it in via your solrconfig.xml.\n\nPeter\n\n\n\nOn Fri, Dec 30, 2011 at 10:03 AM, Arvind Das (Commented) (JIRA) "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13835737",
            "date": "2013-11-30T13:29:17+0000",
            "content": "2013 Old JIRA cleanup "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16443750",
            "date": "2018-04-19T08:44:20+0000",
            "content": "Resolving old issue as won't fix. A lot of infrastructure in Solr has changed since, and it is actually quite easy to bolt on doc-level security using a custom QueryParser (preferred?) or SearchComponent, coupled with whatever schema fields you store your ACLs in. Given the wildly different implementations this kind of plugin is better left with the Application than in Solr, see e.g. ManifoldCF's Solr plugins for doc-level security which reaches out to the MCF's Authority service. "
        }
    ]
}