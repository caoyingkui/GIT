{
    "id": "SOLR-10310",
    "title": "By default, stop splitting on whitespace prior to analysis in edismax and \"Lucene\"/standard query parsers",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Task",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "SOLR-9185 introduced an option on the edismax and standard query parsers to not perform pre-analysis whitespace splitting: the sow=false request param.\n\nOn master/7.0, we should make sow=false the default.",
    "attachments": {
        "SOLR-10310-fix-CopyFieldTest-failure.patch": "https://issues.apache.org/jira/secure/attachment/12865003/SOLR-10310-fix-CopyFieldTest-failure.patch",
        "SOLR-10310.patch": "https://issues.apache.org/jira/secure/attachment/12864602/SOLR-10310.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-03-23T02:52:44+0000",
            "content": "If this will also lose the semantics of autoGeneratePhraseQueries (as hinted in SOLR-10348 it will), I think this is a step back \u2013 at least for English/western languages, most especially (where autoGeneratePhraseQueries is recommended).  The technical difficulties that led to the incompatibility of \"sow=false\" and autoGeneratePhraseQueries were based on Lucene being unable to treat token streams as graphs.  Of course as you know, this was recently solved. ",
            "author": "David Smiley",
            "id": "comment-15937599"
        },
        {
            "date": "2017-03-23T18:12:11+0000",
            "content": "QueryBuilder.autoGenerateMultiTermSynonymsPhraseQuery, introduced in LUCENE-7638, is the graph version of autoGeneratePhraseQueries.  \n\nI guess there are three possible paths here:\n\n\n\tAs hinted in SOLR-10348: avoid dealing with sow=false/auto-gen-phrase=true incompatibility by leaving the exception in place and dropping autoGeneratePhraseQueries=\"true\" from example schemas.\n\tRe-interpret Solr's autoGeneratePhraseQueries per-fieldtype option as setting QueryBuilder.autoGenerateMultiTermSynonymsPhraseQuery when sow=false.\n\tIntroduce a new (per-fieldtype?) option autoGenerateMultiTermSynonymsPhraseQuery.\n\n\n\nI agree, David Smiley, that my #1 above is a step back.  (Though Robert Muir has claimed otherwise: https://issues.apache.org/jira/browse/LUCENE-2458?focusedCommentId=12866557&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-12866557)\n\nI like #2 best.  (Should be done on its own issue though.)\n\nThoughts? ",
            "author": "Steve Rowe",
            "id": "comment-15938935"
        },
        {
            "date": "2017-03-23T22:08:12+0000",
            "content": "I'm glad to hear this seems to be just about configuration \u2013 that the underlying desire for both sow=false and autoGenerateMultiTermSynonymsPhraseQuery is there and should work.  This should definitely get exposed!\n\n#2 and #3 are pretty similar and not even mutually exclusive .  In #3 you're just saying give this option a more appropriate name I guess.  #3 makes sense but I wonder if the FieldType is the right place for these query building options; shouldn't it be request params? ",
            "author": "David Smiley",
            "id": "comment-15939300"
        },
        {
            "date": "2017-03-23T22:25:22+0000",
            "content": "#2 and #3 are pretty similar and not even mutually exclusive . In #3 you're just saying give this option a more appropriate name I guess.\n\n#3 is essentially a back-compat break that would force users to change field type config away from autoGeneratePhraseQueries=\"true\" to autoGenerateMultiTermSynonymsPhraseQuery=\"true\" in order to invoke this option for graph-based queries (assuming sow=false and graph-aware token filters).\n\n#3 makes sense but I wonder if the FieldType is the right place for these query building options; shouldn't it be request params?\n\nautoGeneratePhraseQueries is already a FieldType option.  Putting it (or its graph-based replacement, i.e. #3) somewhere else would be another step back. ",
            "author": "Steve Rowe",
            "id": "comment-15939335"
        },
        {
            "date": "2017-03-24T00:26:23+0000",
            "content": "I created SOLR-10357 to deal with the auto-phrase-gen situation using my #2 approach. ",
            "author": "Steve Rowe",
            "id": "comment-15939484"
        },
        {
            "date": "2017-03-24T13:10:17+0000",
            "content": "Putting it (or its graph-based replacement, i.e. #3) somewhere else would be another step back.\n\nI'd like to understand your point of view here better; I'm sure you have some insight.  \"sow\" is a query parameter.... in my view, why then wouldn't an auto-phrase-whatever also be? ",
            "author": "David Smiley",
            "id": "comment-15940283"
        },
        {
            "date": "2017-03-24T14:51:31+0000",
            "content": "I'd like to understand your point of view here better; I'm sure you have some insight. \"sow\" is a query parameter.... in my view, why then wouldn't an auto-phrase-whatever also be?\n\nBecause autoGeneratePhraseQueries is not now a query param, and the goal is to preserve its current behavior when sow=false.\n\nDavid Smiley pointed out on #solr-dev IRC:\n\n[I]n Solr, query parameters can be per field\nf.myfield.autoGeneratePhraseQueries\n\nWhich directly (and correctly) contradicts my assertion (\"another step back\") that moving the configuration location from schema to request param would disallow per-field configuration.  And I agree, autoGeneratePhraseQueries could be converted into a (optionally per-field) request param, but the current implementation is not like that, and SOLR-10357 is about fixing the current incompatibility of autoGeneratePhraseQueries=\"true\" with sow=false, so I'd rather keep the focus where the biggest problem is, and defer the request param vs. schema discussion for later. ",
            "author": "Steve Rowe",
            "id": "comment-15940483"
        },
        {
            "date": "2017-04-21T23:28:16+0000",
            "content": "Patch switching default sow to false.\n\nAll Solr tests pass, and precommit passes.\n\nI think it's ready to go, but I'll wait a few days before committing in case there are objections.\n\nTwo behavior changes result from this switch, as illustrated by tests:\n\n1. When sow=false, autoGeneratePhraseQueries=\"true\", and words are split (e.g. by WordDelimiterGraphFilter) but no overlapping terms are produced, phrase queries are not produced - see LUCENE-7799 for a possible eventual solution to this problem:\n\nTestSolrQueryParser.testPhrase()\n// \"text\" field's type has WordDelimiterGraphFilter (WDGFF) and autoGeneratePhraseQueries=true\n// should generate a phrase of \"now cow\" and match only one doc\nassertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\", \"sow\",\"true\")\n    , \"//*[@numFound='1']\"\n);\n// When sow=false, autoGeneratePhraseQueries=true only works when a graph is produced\n// (i.e. overlapping terms, e.g. if WDGFF's preserveOriginal=1 or concatenateWords=1).\n// The WDGFF config on the \"text\" field doesn't produce a graph, so the generated query\n// is not a phrase query.  As a result, docs can match that don't match phrase query \"now cow\"\nassertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\", \"sow\",\"false\")\n    , \"//*[@numFound='2']\"\n);\nassertQ(req(\"q\", \"text:now-cow\", \"indent\", \"true\") // default sow=false\n    , \"//*[@numFound='2']\"\n);\n\n\n\n2. sow=false changes the queries edismax produces over multiple fields when any of the fields\u2019 query-time analysis differs from the other fields\u2019, e.g. if one field\u2019s analyzer removes stopwords when another field\u2019s doesn\u2019t. In this case, rather than a dismax-query-per-whitespace-separated-term (edismax\u2019s behavior when sow=true), a dismax-query-per-field is produced. This can change results in general, but quite significantly when combined with the mm (min-should-match) request parameter: since min-should-match applies per field instead of per term, missing terms in one field\u2019s analysis won\u2019t disqualify docs from matching.\n\nTestExtendedDismaxParser.testFocusQueryParser()\nassertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\", \"sow\",\"true\"),\n        nor);\n// When sow=false, the per-field query structures differ (no \"Terminator\" query on integer field foo_i),\n// so a dismax-per-field is constructed.  As a result, mm=100% is applied per-field instead of per-term;\n// since there is only one term (100) required in the foo_i field's dismax, the query can match docs that\n// only have the 100 term in the foo_i field, and don't necessarily have \"Terminator\" in any field.\nassertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\", \"sow\",\"false\"),\n        oner);\nassertQ(req(\"defType\",\"edismax\", \"mm\",\"100%\", \"q\",\"Terminator: 100\", \"qf\",\"movies_t foo_i\"), // default sow=false\n    oner);\n\n ",
            "author": "Steve Rowe",
            "id": "comment-15979570"
        },
        {
            "date": "2017-04-25T15:58:30+0000",
            "content": "Committing shortly. ",
            "author": "Steve Rowe",
            "id": "comment-15983107"
        },
        {
            "date": "2017-04-25T16:02:49+0000",
            "content": "Commit dd171ff8fe31df578b7e6fab1eb5bfc1ade3f5fc in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dd171ff ]\n\nSOLR-10310: By default, stop splitting on whitespace prior to analysis in edismax and standard/\"lucene\" query parsers ",
            "author": "ASF subversion and git services",
            "id": "comment-15983114"
        },
        {
            "date": "2017-04-25T21:04:18+0000",
            "content": "My Jenkins found a reproducing seed for a CopyFieldTest failure, and git bisect says that the commit on this issue is to blame - note that it reproduces only if I remove the -Dtests.method=testCatchAllCopyField from the repro line:\n\n\nChecking out Revision dd171ff8fe31df578b7e6fab1eb5bfc1ade3f5fc (refs/remotes/origin/master)\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=CopyFieldTest -Dtests.method=testCatchAllCopyField -Dtests.seed=27931CB10CE6100C -Dtests.slow=true -Dtests.locale=nl-BE -Dtests.timezone=Asia/Manila -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.05s J9  | CopyFieldTest.testCatchAllCopyField <<<\n   [junit4]    > Throwable #1: java.lang.RuntimeException: Exception during query\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([27931CB10CE6100C:71EDDE8B88DB61D0]:0)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:896)\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:863)\n   [junit4]    > \tat org.apache.solr.schema.CopyFieldTest.testCatchAllCopyField(CopyFieldTest.java:258)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]    > Caused by: java.lang.RuntimeException: REQUEST FAILED: xpath=//*[@numFound='1']\n   [junit4]    > \txml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   [junit4]    > <response>\n   [junit4]    > <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">0</int></lst><result name=\"response\" numFound=\"2\" start=\"0\"><doc><int name=\"id\">5</int><arr name=\"catchall_t\"><str>5</str><str>10-1839ACX-93</str><str>AAM46</str><str>1565669397053308928</str></arr><arr name=\"sku1\"><str>10-1839ACX-93</str></arr><arr name=\"1_s\"><str>10-1839ACX-93</str></arr><arr name=\"1_dest_sub_s\"><str>10-1839ACX-93</str></arr><arr name=\"dest_sub_no_ast_s\"><str>10-1839ACX-93</str></arr><arr name=\"testing123_s\"><str>AAM46</str></arr><long name=\"_version_\">1565669397053308928</long><arr name=\"multiDefault\"><str>muLti-Default</str></arr><int name=\"intDefault\">42</int><date name=\"timestamp\">2017-04-25T16:44:51.953Z</date></doc><doc><int name=\"id\">10</int><arr name=\"catchall_t\"><str>10</str><str>test copy field</str><str>this is a simple test of the copy field functionality</str><str>1565669397012414464</str></arr><arr name=\"title\"><str>test copy field</str></arr><arr name=\"text_en\"><str>this is a simple test of the copy field functionality</str></arr><arr name=\"highlight\"><str>this is a simple test of </str><str>this is a simple test of </str></arr><long name=\"_version_\">1565669397012414464</long><arr name=\"multiDefault\"><str>muLti-Default</str></arr><int name=\"intDefault\">42</int><date name=\"timestamp\">2017-04-25T16:44:51.902Z</date></doc></result>\n   [junit4]    > </response>\n   [junit4]    > \trequest was:q=catchall_t:10-1839ACX-93&wt=xml\n   [junit4]    > \tat org.apache.solr.SolrTestCaseJ4.assertQ(SolrTestCaseJ4.java:889)\n   [junit4]    > \t... 41 more\n[...]\n   [junit4]   2> NOTE: test params are: codec=FastCompressingStoredFields(storedFieldsFormat=CompressingStoredFieldsFormat(compressionMode=FAST, chunkSize=13049, maxDocsPerChunk=9, blockSize=2), termVectorsFormat=CompressingTermVectorsFormat(compressionMode=FAST, chunkSize=13049, blockSize=2)), sim=RandomSimilarity(queryNorm=false): {}, locale=nl-BE, timezone=Asia/Manila\n\n\n\nFor some reason, when sow=false, a query that used to match only the doc indexed in the failing method now also matches a doc indexed in another method, which is never removed, so if by chance the other method runs before the failing method, then this failure happens.\n\nI've got a patch that makes the other method use the same doc id for its indexed doc as the doc id used by the other methods, so that there's only ever one doc in the index at any given time. ",
            "author": "Steve Rowe",
            "id": "comment-15983603"
        },
        {
            "date": "2017-04-25T21:05:52+0000",
            "content": "Patch fixing the failure.  Committing shortly. ",
            "author": "Steve Rowe",
            "id": "comment-15983606"
        },
        {
            "date": "2017-04-25T21:08:30+0000",
            "content": "Commit 03b484346e65c999b97dff7d316241e2d3cf56d1 in lucene-solr's branch refs/heads/master from Steve Rowe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=03b4843 ]\n\nSOLR-10310: Fix CopyFieldTest failure ",
            "author": "ASF subversion and git services",
            "id": "comment-15983614"
        },
        {
            "date": "2017-08-02T18:47:12+0000",
            "content": "Commit 5f35a08220cbb58b8243743a410ef5c293e3e9ba in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5f35a08 ]\n\nSOLR-10310: Ref Guide updates for sow param default ",
            "author": "ASF subversion and git services",
            "id": "comment-16111513"
        },
        {
            "date": "2017-08-02T18:53:25+0000",
            "content": "Commit 9662f2fafbdff629464fb3c248965941414b98d6 in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9662f2f ]\n\nSOLR-10310: Ref Guide updates, missed saving wording change in 1 file ",
            "author": "ASF subversion and git services",
            "id": "comment-16111525"
        },
        {
            "date": "2017-08-02T18:54:00+0000",
            "content": "Commit 1cabb21d6929d954a1c588f6259777e29a934092 in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1cabb21 ]\n\nSOLR-10310: Ref Guide updates for sow param default ",
            "author": "ASF subversion and git services",
            "id": "comment-16111526"
        },
        {
            "date": "2017-08-02T18:54:03+0000",
            "content": "Commit 0f1b559850417bc17b7f34bf66c8f8488d96568e in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0f1b559 ]\n\nSOLR-10310: Ref Guide updates, missed saving wording change in 1 file ",
            "author": "ASF subversion and git services",
            "id": "comment-16111527"
        },
        {
            "date": "2017-08-02T18:54:23+0000",
            "content": "Commit 4f9907349db50df81d2c09479d5ba1e307356e8c in lucene-solr's branch refs/heads/branch_7_0 from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4f99073 ]\n\nSOLR-10310: Ref Guide updates for sow param default ",
            "author": "ASF subversion and git services",
            "id": "comment-16111529"
        },
        {
            "date": "2017-08-02T18:54:25+0000",
            "content": "Commit 5ebc24a7c53b4f7fe98c0c86d53401ec9d7ecd75 in lucene-solr's branch refs/heads/branch_7_0 from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5ebc24a ]\n\nSOLR-10310: Ref Guide updates, missed saving wording change in 1 file ",
            "author": "ASF subversion and git services",
            "id": "comment-16111530"
        }
    ]
}