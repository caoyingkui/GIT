{
    "id": "SOLR-2171",
    "title": "Using stats feature over a function, Function returning as a field value",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "Schema and Analysis",
            "search"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "In order to be able to take big advantage of the stats component, it would be great to be able to define a function as a field.\n\nReturning the result of a function as a \"virtual\" field for each document for example, would enable us to have a much more advanced use of the stats component.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Grant Ingersoll",
            "id": "comment-12923080",
            "date": "2010-10-20T18:32:55+0000",
            "content": "Tanguy,\n\nHow do you see this relating to https://issues.apache.org/jira/browse/SOLR-1622?  In other words, if the StatsComponent had more generic aggregating math capabilities, would that solve your need? "
        },
        {
            "author": "Tanguy Moal",
            "id": "comment-12923127",
            "date": "2010-10-20T19:46:18+0000",
            "content": "Hi Grant,\nFor sure I see some kind of a relation with that issue, but I also think that having the result of the virtually defined field stored in each hit of the answer would be powerful.\n\nFor example, one might define a distance field taking a pair of lat/long as parameters, compute the distance according to a pair of lat/long indexed in each hit, and have the ability to sort the results by ascending distance... Interesting for local-apps certainly!\n\nI can't see such an opportunity in the suggested issue, although it certainly fulfill the requirements expressed firstly in that issue's description...\n\nCombining this with the existant stats component would maximize flexibilty from my point of view.\n\nDid I miss something in the linked issue or does it also take into account the possibility to perform sorting and/or hits scores operations on the so-built response stream ?\n\nKind regards,\n\n\u2013\nTanguy Moal\n\n\n "
        },
        {
            "author": "Tanguy Moal",
            "id": "comment-12924951",
            "date": "2010-10-26T13:05:48+0000",
            "content": "Hi,\n\nadding a little comment to let you know I finally had the time to have my checkout of solr+lucene up and ready, and so I am to start having a look inside the code...\n\nI had a few issues building solr in Eclipse, with the XML APIs, has expected there http://wiki.apache.org/solr/HowToContribute#Notes_for_Eclipse_and_the_New_Merged_Lucene.2BAC8-Solr_checkout , but the workaround wasn't working for me.\n(I am running Ubuntu Lucid with Eclipse 3.5.2 and Sun's JVM 1.6, all from apt)\n\nFinally, I was able to build in Eclipse by moving xml-apis jar to the bottom of Build Path, and this is it.\n\nMaybe updating the wiki could help others...\n\nI'll begin with the \"org.apache.solr.search.function\" package, and how the DocValues class is used. I'll probably have a hint of what to do next and ask more questions consequently.\n\nRegards, "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12986588",
            "date": "2011-01-25T18:39:34+0000",
            "content": "See SOLR-1298 "
        }
    ]
}