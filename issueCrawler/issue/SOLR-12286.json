{
    "id": "SOLR-12286",
    "title": "Wrap log instances in \"if (LOG.isLevelEnabled) { log... }",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "I've been playing around with the question \"are objects generated when logging if I use pattern.....\" and \"it depends\" (tm). I'll attach a test program for anyone to use. Attach VisualVM to it and sample memory when various patterns are enabled.\n\nThe nub of it is this: with the log level set at ERROR, no messages from any of these are printed, yet the number of objects created is vastly different:\n\n\n  while (true) {\n      // \"test\" is an instance of a class with an overridden toString() method.\n      // These generate a zillion spurious objects.\n      logger.info(\"This is a test {} {} {}\", test, rand.nextInt(), \"whatever\");\n      logger.info(\"This is a test {}\", rand.nextInt());\n      logger.info(\"This is really bad\" + test);\n      \n      // These don't generate spurious objects\n      logger.info(\"This is a test {} {}\", test, \"whatever\");\n      logger.info(\"This is really bad\" + \"whatever\");\n  }\n\n\n\nSimply generating a new random number doesn't create zillions of objects.\n\nI don't particularly care why the differences exist, the take-away is that if we simply establish the rule \"wrap log.level() messages with if...\" then we'll avoid the problems altogether. That's much easier to both remember and enforce than trying to understand and remember when pattern A is acceptable and pattern B is not.\n\nMaybe we could even make this a precommit failure?\n\nSolr has enough \"interesting\" things happen re: GC that we don't need to needlessly add to GC pressure.\n\nParameterizing is still a good idea as in SOLR-10415 (I'll link)\n\nHere's the full program, there's not a lot of sophistication here....:\n\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.Logger;\nimport org.apache.logging.log4j.LogManager;\nimport org.apache.logging.log4j.core.LoggerContext;\nimport org.apache.logging.log4j.core.config.Configuration;\nimport org.apache.logging.log4j.core.config.LoggerConfig;\n\nimport java.util.Random;\n\npublic class Log4J2Test {\n\n  // Define a static logger variable so that it references the\n  // Logger instance named \"MyApp\".\n  private static final Logger logger = LogManager.getLogger(Log4J2Test.class);\n\n  static Random rand = new Random();\n\n  public static void main(final String... args) {\n\n    // Set up a simple configuration that logs on the console.\n\n    logger.trace(\"Entering application.\");\n\n    LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n    Configuration config = ctx.getConfiguration();\n    LoggerConfig loggerConfig = config.getLoggerConfig(LogManager.ROOT_LOGGER_NAME);\n    loggerConfig.setLevel(Level.ERROR);\n    ctx.updateLoggers();\n    Test test = new Test();\n    logger.error(\"Ensure something comes out.\");\n    while (true) {\n      if (logger.isInfoEnabled()) {\n        // These generate a zillion objects.\n        logger.info(\"This is a test {} {} {}\", test, rand.nextInt(), \"whatever\");\n        logger.info(\"This is a test {}\", rand.nextInt());\n        logger.info(\"This is really bad\" + test);\n\n\n        // These generates no spurious objects\n        logger.info(\"This is a test {} {}\", test, \"whatever\");\n        logger.info(\"This is really bad\" + \"whatever\");\n\n      }\n    }\n  }\n}\n\nclass Test {\n  static Random rand = new Random();\n\n  public String toString() {\n    return \"This is some random string\" + rand.nextInt();\n  }\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-30T02:49:13+0000",
            "content": "I think a convincing case should be made before mandating that every log statement ought to be wrapped in a conditional. \u00a0I have a visceral -1 reaction to that proposal. \u00a0My code tastes prefer simplicity over doing things that increase LOC that seem dubious. \u00a0I appreciate you're starting\u00a0to\u00a0make this case but there's more to do \u2013 in particular to quantify the \"zillion objects\". \u00a0And probably use JMH or at least try to \"warm up\" so it gets optimized. \u00a0And more importantly what real consequence does it have? \u00a0Short lived objects are dealt with efficiently by the garbage collector. \u00a0In fact if one is writing code that is not in some hot loop then I think we're making a fuss over nothing. \u00a0\n\nBTW rand.nextInt()\u00a0has side-effects; most code you'd put in a log statement does not. \u00a0This is likely\u00a0a factor. ",
            "author": "David Smiley",
            "id": "comment-16458280"
        },
        {
            "date": "2018-04-30T03:00:46+0000",
            "content": "Yeah, I think the first step here is to figure out what is going on. This information seems to conflict with https://www.slf4j.org/faq.html#logging_performance, so we want to know exactly what is up before we change or enforce anything.\n\nI think it's obvious in java that if you construct an expensive object in a trace method, you probably want that creation wrapped with an if trace - it has to be constructed before the method is called. It's much more normal to pass existing objects or simple strings.\n\nIt would be great to know what those objects are and  the actual affect of them, especially more real world vs micro benchmark. ",
            "author": "Mark Miller",
            "id": "comment-16458283"
        },
        {
            "date": "2018-04-30T03:20:49+0000",
            "content": "These guys have some arguments for using parameterized logging:\n\nhttps://wiki.opendaylight.org/view/BestPractices/Logging_Best_Practices#Use_parameterized_logging\n\nand\n\nhttps://wiki.opendaylight.org/view/BestPractices/Logging_Best_Practices#Do_NOT.2C_in_general.2C_use_isTrace.2F.2FDebug.2FInfo.2FWarn.2FErrorEnabled.28.29 ",
            "author": "Mark Miller",
            "id": "comment-16458290"
        },
        {
            "date": "2018-04-30T16:13:25+0000",
            "content": "Short lived objects are dealt with efficiently by the garbage collector.\n\nMy turn for a \"visceral -1\"  I vastly prefer not generating useless work regardless of how efficient cleanup is afterwards. \n\nBTW rand.nextInt() has side-effects; most code you'd put in a log statement does not.  This is likely a factor.\n\nWell, that's largely my point. It's not obvious at all that rand.nextInt() would have this side effect on logging, at least not to me. What about side effect N+1? That said I'll concede this one.\n\nThe parameterized versions of log messages do help a lot and should be used. \n\nAnd this pattern generates the string object and throws it away for fairly obvious reasons:\nlogger.info(\"This is a test {} {}\", test.toString(), \"whatever\");\n\nPeruse the current code and you'll see a bunch of the log.info(\"message\" + \"another message\") patterns. I count 300 without even straining. My take is that we haven't done a very good job of paying attention to this. Why do you think we'll do a better job in future? Who's going to police this?\n\nThen there's also another 300 or so debug and trace level messages with the same pattern.\n\nAdmittedly the above 600 messages are simple greps, perhaps some of them are wrapped in if statements.\n\nThis all came to light with some work with JFR.\n\nNow maybe the right thing to do is enhance the forbidden APIs to fail the known bad logging patterns: any log.whatever calls with plus signs outside of quotes and any log.whatever that has a toString() in it etc. That'd probably take care of 99+% of my concerns and the remaining fraction of a percent isn't worth the trouble.\n\nIf that's the consensus we can probably close this or change it to \"add forbidden API check for log messages that create spurious objects\". It still requires that we parameterize all the log.whatever calls. ",
            "author": "Erick Erickson",
            "id": "comment-16458706"
        },
        {
            "date": "2018-04-30T16:32:03+0000",
            "content": "Here 's where keeping track of exactly what log message does or does not generate objects is a pain. \n\n\"eoe\" is just an int. \n\nThis one generates useless objects that are then GCd\nlogger.info(\"silly string {} \", eoe++);\n\nThis one does not\nlogger.info(\"silly string {} \", eoe);\n ",
            "author": "Erick Erickson",
            "id": "comment-16458730"
        },
        {
            "date": "2018-04-30T16:36:55+0000",
            "content": "Erick Erickson I think the int example depends also on what number it is / if it goes beyond the Integer cache bounds for the second case.  ",
            "author": "Michael Braun",
            "id": "comment-16458734"
        },
        {
            "date": "2018-04-30T17:17:32+0000",
            "content": "Now maybe the right thing to do is enhance the forbidden APIs to fail the known bad logging patterns: any log.whatever calls with plus signs outside of quotes and any log.whatever that has a toString() in it etc. That'd probably take care of 99+% of my concerns and the remaining fraction of a percent isn't worth the trouble.\n\n+1 that'd be great but it appears that forbidden-apis only supports disallowing particular method calls, not general bytecode pattern detection.  Am I right Uwe Schindler? ",
            "author": "David Smiley",
            "id": "comment-16458777"
        },
        {
            "date": "2018-04-30T17:35:29+0000",
            "content": "Generally speaking, I'm all for using SLF4J parameterization where we can.  It makes the code much cleaner.  The fact that it also has performance benefits is a nice bonus.\n\nBuilding messages with slow operations like string concatenation is not necessarily evil \u2013 for things that get logged once or infrequently, the time difference is minimal.  But it's probably not a good general pattern to use.\n\nIt's interesting that the page Mark linked to advises against using the \"isLevelEnabled\" check in most cases.  I would tend to agree with this for INFO and higher levels, but it did seem like a good idea to me to leave the check for DEBUG and lower.  We can follow their advice, and only do that wrapping when the log message or its parameters are built by code that might run slowly.\n\nOn the forbidden API stuff Erick mentioned: How about we create alternate and much more sensitive build targets for things like forbidden APIs?  Build targets that would have to be manually called.  Detecting string usage that we consider sub-optimal could help us write better code, but until the codebase is sufficiently cleansed, I think flagging those usages with precommit would hold up general development. ",
            "author": "Shawn Heisey",
            "id": "comment-16458793"
        },
        {
            "date": "2018-05-01T08:20:31+0000",
            "content": "Unfortunately we use slf4j, because log4j has a better feature on top (I hope it gets added to slf4j, too): As said before paramters with \"{}\" make much sense, but won't help if you want to pass a complex string generated on-they fly. In this case, log4j offers to pass a Java8 lambda:\n\n\nlog.trace(\"My complex operation took {} and produces no additional objects in production when you print a list like {}!\",\n  () -> Duration.between(startInstant, Instant.now()), () -> String.join(\"; \", list));\n\n\n\nOf course this generates the lambda using the invokedynamic, but it's not executed. It is static and compiled one time. I use this now all the time for stuff like the above (when the string is complex to be generated, like if you print contents of a List or Set).\n\nP.S.: BTW in the initial description of the issue:\n\n\n\n// \"test\" is an instance of a class with an overridden toString() method.\n// These generate a zillion spurious objects.\nlogger.info(\"This is a test {} {} {}\", test, rand.nextInt(), \"whatever\");\n\n\n\nThe comment is wrong: the method toString() is not called! The info() method takes Object as parameter, so test is passed as is, with no object generated. The problem is more the rand.nextInt() as it does autoboxing (which should be eliminated by Hotspot). Keep in mind: When you run this stuff with a debugger it produces more objects than in production, as hotspot can't jump in and eliminate those objects. Autoboxing is in those cases 100% removed by Hotspot, unless you use a debugger! ",
            "author": "Uwe Schindler",
            "id": "comment-16459524"
        },
        {
            "date": "2018-05-01T18:33:24+0000",
            "content": "Uwe: I can always count on you to further my education!\n\nThat comment was confused, I wanted to make sure people knew there was a \"toString()\" method on the class in case it mattered, I hadn't really figured out that the rand.nextInt() was where the problem came from.\n\nI still have some evidence though that this construct is not eliminated by HotSpot:\nlogger.info(\"This is a test {}\",rand.nextInt());\n.vs.\nlogger.info(\"stuff {}\", eoe++);\n\nFor both cases I put a sleep in before my tight loop that let me get attached with visualVM. In the first case, as soon as the sleep is done the number of generated Integer objects shoots up. In the second there's a noticeable delay (seconds long). Michael's comment about the Integer cache?\n\nBut that's a nit, I don't think it's worth any more time. I don't see much value in going any further with it. rand.nextInt() is totally artificial......\n\nMichael: You're probably right there. Interestingly if I put a sleep for long enough to get VisualVM attached to the program, there are a few seconds after the sleep that don't show object creation (compiled and run outside the IDE) with the below, then it shoots up, but it looks like after we generate a billion distinct integers or something.\n\nint eoe = 0;\nlogger.info(\"stuff {}\", eoe++)\n\nSo integers aren't all that interesting, Bad Test!\n\nThis construct is still evil, no surprise there. Uwe's lambda trick might do it, but that's not available:\nlogger.info(\"stuff {}\", test.toString()));\n\nSo all in all, I think this is  a tempest in a teapot. I didn't particularly like the suggestion that we wrap all these calls, but OTOH I also didn't like the idea of creating lots of spurious objects.\n\nI'll close this \"won't fix\" and we'll deal with this by doing the parameterized logging calls. I think that'll be sufficient. ",
            "author": "Erick Erickson",
            "id": "comment-16459993"
        },
        {
            "date": "2018-05-01T18:34:04+0000",
            "content": "Using parameterized logging will take care of almost all the cases. ",
            "author": "Erick Erickson",
            "id": "comment-16459994"
        }
    ]
}