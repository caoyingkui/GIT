{
    "id": "LUCENE-2148",
    "title": "Improve Spatial Point2D and Rectangle Classes",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spatial"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.1",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "The Point2D and Rectangle classes have alot of duplicate, redundant and used functionality.  This issue cleans them both up and simplifies the functionality they provide.\n\nSubsequent to this, Eclipse and LineSegment, which depend on Point2D, are not used anywhere in the contrib, therefore rather than trying to update them to use the improved Point2D, they will be removed.",
    "attachments": {
        "LUCENE-2148.patch": "https://issues.apache.org/jira/secure/attachment/12427718/LUCENE-2148.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-12-11T13:08:06+0000",
            "content": "Added patch ",
            "author": "Chris Male",
            "id": "comment-12789291"
        },
        {
            "date": "2009-12-11T14:26:19+0000",
            "content": "Chris, we have to keep in mind that this code has already been released so we should not remove all those methods. We should rather go the deprecation way and mark everything which should go away as deprectaed. I really want to see those Point etc stuff being immutable but I would feel better if we could mark them as deprecated and add some comment like @deprected use foo(int) instead.\nFuther I would keep the equals and hashcode method just in case somebody uses them in any datastructure relying on those methods.Remember they could be used as a cache key in a bounding box or something similar.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12789326"
        },
        {
            "date": "2009-12-11T16:14:01+0000",
            "content": "Chris, with my BW compat hat on I would say it would make way more sense to deprecate all classes in the geometry/shape package and add your Point.java class from to LUCENE-2139 to geometry. That way we do not break anybodies code, get rid of the shape subpackage in the next release and everybody has a heads up. It is also simpler for us though. As far as I can see the only class use is LLRect which and that is rarely used anyway AND will be replaced by LatLngRectangle anyway which is in LUCENE-2139.\n\nThoughts? ",
            "author": "Simon Willnauer",
            "id": "comment-12789365"
        },
        {
            "date": "2009-12-11T16:23:47+0000",
            "content": "Hi Simon,\n\nYes I think thats a great idea.  Although it does set me back on the issues I have just created, but thats okay I can remake those patches. ",
            "author": "Chris Male",
            "id": "comment-12789370"
        },
        {
            "date": "2009-12-18T12:03:17+0000",
            "content": "Patch differs considerably from previous one in that it makes no deletes or renames to the existing code.  Instead it contains the following changes:\n\n\n\tDeprecates all classes in geometry.shape\n\tAdds simpler immutable Point class to geometry package.  This will be used instead of Point2D in remaining work\n\tAdds simpler LatLngRectangle class to geometry package.  This will be used instead of LLRect in remaining work\n\tDeprecates geometry.CartesianPoint\n\tChanges LatLng to a concrete class (instead of abstract), deprecates most of its methods and cleans up the ones that should remain\n\tDeprecates FloatLatLng and FixedLatLng since they are replaced by the logic in LatLng.\n\n ",
            "author": "Chris Male",
            "id": "comment-12792447"
        },
        {
            "date": "2009-12-18T13:56:40+0000",
            "content": "Added full deprecation annotations ",
            "author": "Chris Male",
            "id": "comment-12792479"
        },
        {
            "date": "2009-12-28T18:20:29+0000",
            "content": "Chris, a couple of comments on the latest patch:\n\nWe should remove the flux warning from new classes IMO.\nIn LatLngRectangle we should make 180 and 90 doubles for consistency.\n\nthose two local vars are unnecessary and meaningless IMO could move in a bit down in the code, see snippet?!\n\n private static LatLng boxCorner(LatLng centre, double width, double degrees) {\n   double a = centre.getLat();\n   double b = centre.getLng();\n...\n// could move them into this calc?!\n//  double lat1 = Math.PI *  centre.getLat()  / 180d;\n//  double lng1 = Math.PI * centre.getLng() / 180d;\n\n\n\nWe could simplify some conditional statments like the snipped below\n\n\nprivate static LatLng normLat(double lat, double lng) {\n...\n if (lng < 0) {\n   lng = lng + 180;\n  } else {\n  lng = lng - 180;\n}\n// simplify those conditionals \n  lng += lng < 0 ? 180d: -180d; // something like that \n\n\n\nIn LatLng should we make those degree constants double instead of int?!\n\npublic class LatLng {\n private final static int LONGITUDE_DECIMAL_DEGREE_RANGE = 360;\n private final static int LATITUDE_DECIMAL_DEGREE_RANGE = 180;\n\n\n\nThe deprecation comments should say something like:\n@deprecated this class is unused and will be removed in a future release.\n\nif we have a replacement for the class / method use something like:\n@deprecated use Foo#bar(int) instead. This method / class will be removed in a future release\n\nOne more thing, I'm not sure if the @Deprecated annotations are necessary though @deprecated in javadoc seems to be the lucene way so far. Not sure about that though.\n\n\nExcept of those very minor things this seems to be very close to be ready! \n\n\n\n\n ",
            "author": "Simon Willnauer",
            "id": "comment-12794846"
        },
        {
            "date": "2009-12-28T19:44:10+0000",
            "content": "Attached new patch incorporating Simon's suggestions. ",
            "author": "Chris Male",
            "id": "comment-12794899"
        },
        {
            "date": "2010-11-30T08:41:27+0000",
            "content": "Are we still working on this issue? It seems to be somewhat outdated though and I am not sure about the geospatial status in solr - any ideas? If we do not work on this I would like to close as won't fix. ",
            "author": "Simon Willnauer",
            "id": "comment-12965152"
        },
        {
            "date": "2010-12-01T09:53:32+0000",
            "content": "Closing along with LUCENE-2139 ",
            "author": "Chris Male",
            "id": "comment-12965642"
        }
    ]
}