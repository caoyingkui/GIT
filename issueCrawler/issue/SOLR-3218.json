{
    "id": "SOLR-3218",
    "title": "Range faceting support for CurrencyField",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Spinoff from SOLR-2202. Need to add range faceting capabilities for CurrencyField",
    "attachments": {
        "SOLR-3218-2.patch": "https://issues.apache.org/jira/secure/attachment/12517632/SOLR-3218-2.patch",
        "SOLR-3218-1.patch": "https://issues.apache.org/jira/secure/attachment/12517629/SOLR-3218-1.patch",
        "SOLR-3218.patch": "https://issues.apache.org/jira/secure/attachment/12517974/SOLR-3218.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Andrew Morrison",
            "id": "comment-13225616",
            "date": "2012-03-08T22:36:52+0000",
            "content": "Hoss Mann had posted the following on SOLR-2202\n-----------------------------------------------\n\na) CurrencyField (and by extension \"CurrencyValue\") gets my vote\n\nb) i really only reviewed the facet stuff in SOLR-2202-solr-10.patch (i know Jan has already been reviewing the more core stuff about the type) ... it makes me realize that we really need to refactor the range faceting code to be easier to do in custom FieldTypes, but that's certainly no fault of this issue and can be done later.\n\nThe facet code itself looks correct but my one concern is that (if i'm understanding all of this MoneyValue conversion stuff correctly) it should be possible to facet with start/end/gap values specified in any currency, as long as they are all consistent \u2013 but there is not test of this situation. the negative test only looks at using an inconsistent gap, and the positive tests only use USD, or the \"default\" which is also USD. We should have at least one test that uses something like EUR for start/end/gap and verifies that the counts are correct given the conversion rates used in the test.\n\nincidentally: I don't see anything actually enforcing that start/end are in the same currency \u2013 just that gap is in the same currency as the values it's being added to, so essentially that start and gap use hte same currenty. But I'm actually not at all clear on why there is any attempt to enforce that the currencies used are the same, since the whole point of the type (as i understand it) is that you can do conversions on the fly \u2013 it may seem silly for someone to say facet.range.start=0,USD & facet.range.gap=200,EUR & facet.range.end=1000,YEN but is there any technical reason why we can't let them do that? "
        },
        {
            "author": "Andrew Morrison",
            "id": "comment-13225627",
            "date": "2012-03-08T22:46:50+0000",
            "content": "Hoss,\n\nThe attached patch (SOLR-3218-1.patch) adds additional tests for EUR and GBP.\n\nI believe start/end currency equality is enforced by MoneyType.compareTo which will throw an exception when end is compared to the first (start+gap).\n\nAs far as enforcing currency equality being a good idea or not, it would make sense and I would prefer if start/end/gap currencies didn't need to be equal. This patch doesn't allow for that given the tradeoff of the utility of being able to use different currencies versus the annoyance of keeping a handle open to an ExchangeRateProvider in the places we'd need it.\n\nI'd be happy to take a look at making different currencies possible if there is enough interest.\n\nIt'll be good to add a test for start/end currency mismatches. I'll upload SOLR-3218-2.patch in a moment. "
        },
        {
            "author": "Andrew Morrison",
            "id": "comment-13225632",
            "date": "2012-03-08T22:51:00+0000",
            "content": "Jan,\n\nOnce SOLR-2202 is trunked I'll update this patch to work with CurrencyField. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13225639",
            "date": "2012-03-08T22:56:02+0000",
            "content": "I believe start/end currency equality is enforced by MoneyType.compareTo which will throw an exception when end is compared to the first (start+gap).\n\nAh ..ok.  and then ultimately start+gap is compared to end (even if hardend is false) so you'll get a exception then.  ok fair enough.\n\nAs far as enforcing currency equality being a good idea or not, it would make sense and I would prefer if start/end/gap currencies didn't need to be equal. This patch doesn't allow for that given the tradeoff of the utility of being able to use different currencies versus the annoyance of keeping a handle open to an ExchangeRateProvider in the places we'd need it.\n\nI'm not completley understanding, but i don't need to: If it's easier/simpler (for now) to require that start/end/gap are all in the same currency that's fine \u2013 we should just test/document that clearly .. we can alwasy relax that restriction later if you think of a clean/easy way to do it.\n\nlike i said before: it's probably silly to do it anyway, i just didn't understand if/what the complication was "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13225664",
            "date": "2012-03-08T23:18:47+0000",
            "content": "Thanks for your work Andrew.\n\nJust a small comment about pathces. We prefer that you name the patch simply SOLR-3218.patch every time. JIRA takes care of greying out the older versions. Also, is it possible to convert your GIT patch to svn compatible patch?\n\nGood plan to jump over to CurrencyField once it is in trunk. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13226666",
            "date": "2012-03-10T01:06:25+0000",
            "content": "CurrencyField is now in trunk  "
        },
        {
            "author": "Andrew Morrison",
            "id": "comment-13226849",
            "date": "2012-03-10T13:53:59+0000",
            "content": "That was fast. I'll submit an updated patch soon. "
        },
        {
            "author": "Andrew Morrison",
            "id": "comment-13227284",
            "date": "2012-03-12T01:42:24+0000",
            "content": "The latest patch is updated to account for the CurrencyField name.\n\nI updated CurrencyValue.toString() to return \"3.14,USD\" for $3.14 rather than \"314,USD\". My feeling is that it's more straight forward to return strings that look like the values that were passed in to parse(). If we don't want toString to act as such, I can move that logic to CurrencyRangeEndpointCalculator.formatValue(). Also of interest, I'm injecting a '.' into the toString value of the long amount rather than using any existing floating point number formatters which might use a ',' rather than a '.' causing issues with the existing comma delimiter between the amount and currencyCode.\n\nHoss,\n\nIt was easy to allow the gap to be in any currency for which we have a conversion, so we're now allowing that. Start and end must still be of the same currency. I worry that relaxing the restriction on the gap may just be confusing without adding any real value. We may want to consider forcing gap to be the same as start and end so that things are more conceptually straight forward. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13228644",
            "date": "2012-03-13T19:50:16+0000",
            "content": "I updated CurrencyValue.toString() to return \"3.14,USD\" for $3.14 rather than \"314,USD\". My feeling is that it's more straight forward to return strings that look like the values that were passed in to parse(). \n\nthat sounds right.\n\nthe most important thing is that in the response from range faceting, where it gives you a (str) lower bound about a count, that lower bound should be a legal value when building a query against that field (ie: you can use it in a range query)  ... i'm pretty sure (if i understand correctly) that for CurrencyField that means \"3.14,USD\"\n\nI worry that relaxing the restriction on the gap may just be confusing without adding any real value. We may want to consider forcing gap to be the same as start and end so that things are more conceptually straight forward.\n\nI believe you \u2013 i've got no objection to locking that down, i just want to make sure that if we doc \"you can't do this\" that: a) the code actually fails if you try; and b) we have a test proving that the code will fail if you try.\n\n(and if we decide later that it makes sense, we can relax things and change the test & docs) "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13244183",
            "date": "2012-04-02T13:41:16+0000",
            "content": "Updated patch\n\n\n\tPatch is in correct format, starting form project root, not from solr\n\tFixes indexOutOfRange bug for start=0\n\tVelocity GUI support\n\tSolrJ support\n\tNow puts plain String's in the NamedList instead of CurrencyValue's - easier to transport around\n\n\n\nThe alternative to using Strings is to move CurrencyValue to solrj package, what do you think?\n\nStill needs many more test cases "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13244188",
            "date": "2012-04-02T13:53:18+0000",
            "content": "The alternative to using Strings is to move CurrencyValue to solrj package, what do you think?\n\nStrings are good since it doesn't seem like we should push dependencies like this into solrj. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13244409",
            "date": "2012-04-02T18:23:39+0000",
            "content": "The conversion to String from CurrencyValue is a bit of a hack with instanceof tests, since I was not allowed to return String from getValue in CurrencyValue. Not very object oriented.. "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-13465322",
            "date": "2012-09-28T04:01:59+0000",
            "content": "+1 for this feature. It makes the currency type 10x more compelling. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13698431",
            "date": "2013-07-03T00:12:23+0000",
            "content": "Hmm, this has been dormant for some while. Have anyone given the patch a spin? Anyone want to bring it up to date and get it closer to committing? This feature would probably benefit from Randomized testing, but if anyone else feels it's good enough for a first commit then such things could be added later. "
        },
        {
            "author": "Andrew Morrison",
            "id": "comment-13699169",
            "date": "2013-07-03T16:54:15+0000",
            "content": "I'm still around. If you think it'll get committed I can try and find some time to get it up to date. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13699339",
            "date": "2013-07-03T19:18:36+0000",
            "content": "Great. I'll be gone for 3 weeks now, so if not anyone else finalizes+commits it in the meantime for 4.4, I'll help get it into 4.5. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717334",
            "date": "2013-07-23T18:47:54+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13902700",
            "date": "2014-02-16T12:56:29+0000",
            "content": "Updated to latest trunk. Added range facet tests to org.apache.solr.schema.AbstractCurrencyFieldTest, Moved org.apache.solr.schema.CurrencyValue back to separate class from nested class org.apache.solr.schema.CurrencyField since CurrencyValue used outside in org.apache.solr.request.SimpleFacets and other classes. Probably worth for wrap and encapsulate in org.apache.solr.schema.CurrencyField "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-13917873",
            "date": "2014-03-03T09:33:07+0000",
            "content": "Fixed some javadocs "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971276",
            "date": "2014-04-16T12:57:38+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Petar Tahchiev",
            "id": "comment-14303468",
            "date": "2015-02-03T15:46:20+0000",
            "content": "4.9.1. is out but this is still open  "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14311297",
            "date": "2015-02-08T12:30:50+0000",
            "content": "1. updated to latest trunk\n2. Changed Currency.toString() to strValue so that toString is not used in range calculation\n3. Added test for stats.facet in currency type\n4. Added stats support for currency type, stats calculated on default currency of type.\nMin, max and sum return currency value with currency code, by default value.toString() is used to render those results, \ndelegated toString to strValue\nMean, sumOfSquares, stddev just return numeric value in cents without currency code. \n(not sure that we need those for currency, i would remove them)\n5. Added tests for stats on currency field "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16067417",
            "date": "2017-06-28T23:00:03+0000",
            "content": "This seems to have fallen off the radar for some time, but it has a patch that may be very close to committable if it is brough up to speed with master branch. Vitaliy Zhovtyuk are you still around to work on this? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-16295989",
            "date": "2017-12-19T01:22:03+0000",
            "content": "I'm going to try to see this through \u2013 but at this point I don't think it's a good idea to add facet.range support w/o also adding json.facet type:range support as well \u2013 so i'm working on that at the same time.\n\nHere's what i've got so far...\n\n\n\tmassaged the latest path to apply to master\n\t\n\t\talong the way i droped the StatsValuesFactory changes since:\n\t\t\n\t\t\tthey were causing a lot of headaches\n\t\t\tthey weren't directly related to the objective\n\t\t\tthey didn't have any distrib tests and i was 99% certain at a glance that the distrib stats code wasn't going to work as is since it seemed to expect CurrencyValue objects from the shards\n\t\t\n\t\t\n\t\n\t\n\tbeefed up the existing tests a bit and added some cloud based test equivilents\n\tadapted the minimal changes to the json.facet FacetRange class...\n\t\n\t\tadded a new CurrencyCalc impl\n\t\tadded a new buildRangeLabel method to the Calc API since the existing logic (to always use the \"low\" value as the Range.label ) isn't viable for CurrencyCalc because the CurrencyValue objects aren't suitable for being included directly in the response writer.\n\t\tadded some very basic variants on the (new) tests for the json.facet code.\n\t\n\t\n\n\n\nThere are still more tests I want to write related to the json.facet code \u2013 partly because of how type:range can be used in broader ways in the json.facet then the equivilent facet.range code (see nocommits in the test) ... but more notably because of the following points of confusion I have about the code in the existing patch that I'm hoping Yonik can provide some guidance on...\n\n\n\n\tThe Calc API includes 2 \"bits\" related methods whose purpose I don't understand and at a glance I don't see used anywhere.  I'm not sure if they are dead code, but with these impls in CurrencyCalc that do nothing but throw Exceptions I'm not getting any errors \u2013 so if they aren't dead code then they only get used via some code path I haven't yet identified/tested...\n\n    @Override\n    public Comparable bitsToValue(long bits) {\n      throw new RuntimeException(\"nocommit: dead code??\"); // return bits;\n    }\n\n    @Override\n    public long bitsToSortableBits(long bits) {\n      throw new RuntimeException(\"nocommit: dead code??\"); // return bits;\n    }\n\n\n\teven though the FacetRange.Range class already has an existing Object label variable that's used in most places as the \"val\" when generating the \"buckets\" SimpleOrderedMap for the response, there is one code path in the refineBucket method that goes out of it's way to use FacetRange.Range.low instead of FacetRange.Range.label with a perplexing comment...\n\nbucket.add(\"val\", range.low); // use \"low\" instead of bucketVal because it will be the right type (we may have been passed back long instead of int for example)\n\n\n\t\n\t\tIt's not clear to me what the meaning of this comment is and how/why using range.low is better then using range.label here since in every (pre-patch) code path I see range.low == range.label\n\t\t\n\t\t\tWhen would the label ever have the wrong type?!?!?\n\t\t\n\t\t\n\t\tAs things stand right now, the CurencyValue objects that get put into the range.low variable (when CurrencyCalc is used) should never be included directly in the response \u2013 and yet nothing in my currency cloud test seems to trigger this code path (yet)\n\t\tGiven that the \"buckets\" of a range facet should always be deterministic, I'm not actually clear on when/how/why a FacetRange bucket would ever need to be \"refined\" ?\n\t\n\t\n\n\n\n\nYonik Seeley can you help shed some light on when/how these methods are used to save me some time in figuring out how to write additional test cases explicitly targeting these code paths? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-16313757",
            "date": "2018-01-05T19:51:15+0000",
            "content": "Updated patch with a lot more json.facet tests.\n\nWhile working on this i discovered SOLR-11824 \u2013 these tests will currently fail very badly w/o the patch from SOLR-11824 also applied.\n\nThere is also still one test logic flaw in testJsonRangeFacetAsSubFacet because of SOLR-11733 ... i thought i had been creative enough in the documents/queries used to ensure that we'd get a consistent \"top term\" for these facets \u2013 but I released later that with random sharding it's still possible to \"miss\" the term the test expects due to it being in the \"long tail\" ... need to fix that.\n\n...more notably because of the following points of confusion I have about the code in the existing patch that I'm hoping Yonik can provide some guidance on...\n\nFWIW: I still haven't wrapped my head around these 2 questions.  Hoping i trigger some of these throw new RuntimeException(\"nocommit:... as i keep writing tests "
        },
        {
            "author": "Hoss Man",
            "id": "comment-16319692",
            "date": "2018-01-10T04:46:43+0000",
            "content": "There is also still one test logic flaw in testJsonRangeFacetAsSubFacet ...\n\nUpdated patch fixes that test bug, as well as adding a new test where the range facet has a term facet (which sometimes needes refinement deepdning on the shard placement) nested underneith it.  This new test triggers the refineBucket code path with the confusing code/comment I asked about earlier.  Patch includes a fix to replace the odd usage of range.low with range.label which gets the new test to pass, and doesn't seem to break anything in the pre-existing json.facet tests.\n\n\nNext up: more json.facet tests & trying to make sense of those \"bits\" methods in the Calc class. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-16321510",
            "date": "2018-01-11T01:12:49+0000",
            "content": "I added some more json.facet tests, and dug into the Calc.bitsToValue and Calc.bitsToSortableBits methods I couldn't make sense of before...\n\nThese methods exist solely for the use by FacetFieldProcessorByHashDV , and would never be triggered for Currency fields because FacetFieldProcessorByHashDV only uses these code paths if getNumberType() != null ... so for the purposes of type:reange faceting and/or field: some_currency_field (regardless of the faceting type) these are in facet dead code.\n\nI added some general javadocs clarifying these methods for the next reader, and replaced the RuntimeException(\"nocommit\")) in the CurrencyCalc instances of these methods with SERVER_ERRORs that should help make it clear what's going wrong if someone breaks the code down the road.\n\n\nI still want to write some more tests of some of the json.facet edge cases i'm not super familiar with to make sure i'm not missing anything, but this should resolve all of the open questions/confusion i had. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-16323327",
            "date": "2018-01-12T01:00:33+0000",
            "content": "Ok.  I beefed up the tests a bit more, and cleaned up some javadoc/import issues that caused precommit problems.\n\nI think this is pretty good to go.\n\nMy plan is to let it sit for a few days and then re-read it cold.  If I don't spot any new things i dislike, or there are no objections/feedback by then I'll more forward with committing & backporting. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-16325956",
            "date": "2018-01-15T07:28:35+0000",
            "content": "The only changes between the last patch and what i comitted was a one line addition to the ref guide page on working with currencies to point out that range faceting is supported as long as start & end are in the same currency.\n\nThanks to everyone who contributed to this patch over the years for helping to see this to completion\n\n\ncommit 6dcbb2d412028075b84567edd60d7fcb56032d14\nAuthor: Chris Hostetter <hossman@apache.org>\nDate:   Sun Jan 14 16:30:24 2018 -0700\n\n    SOLR-3218: Added range faceting support for CurrencyFieldType\n\n\n\u00a0\n\ncommit f805d020129508a62e53a861176a0487e4549525\nAuthor: Chris Hostetter <hossman@apache.org>\nDate:   Sun Jan 14 16:30:24 2018 -0700\n\n    SOLR-3218: Added range faceting support for CurrencyFieldType\n    \n    (cherry picked from commit 6dcbb2d412028075b84567edd60d7fcb56032d14)\n\n "
        }
    ]
}