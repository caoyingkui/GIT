{
    "id": "LUCENE-6777",
    "title": "Switch GeoPointTermsEnum range list to use a reusable BytesRef",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "GeoPointTermsEnum currently constructs a BytesRef for every computed range, then sorts on this BytesRef.  This adds an unnecessary memory overhead since the TermsEnum only requires BytesRef on calls to nextSeekTerm and accept and the ranges only need to be sorted by their long representation. This issue adds the following two improvements:\n\n1. Lazily compute the BytesRef on demand only when its needed\n2. Add a single, transient BytesRef to GeoPointTermsEnum\n\nThis will further cut back on heap usage when constructing ranges across every segment.",
    "attachments": {
        "LUCENE-6777.patch": "https://issues.apache.org/jira/secure/attachment/12753987/LUCENE-6777.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14729067",
            "author": "Nicholas Knize",
            "date": "2015-09-03T13:52:06+0000",
            "content": "Patch that converts GeoPointTermsEnum to use a reusable BytesRef for comparing Ranges against indexed terms.\n\nWill add performance numbers shortly. "
        },
        {
            "id": "comment-14729394",
            "author": "Michael McCandless",
            "date": "2015-09-03T16:58:31+0000",
            "content": "Thanks Nicholas Knize!  I don't think we have to perf test before committing ... but can we try to simplify the code a bit?  E.g. things like:\n\n\n-    if (term.compareTo(rangeBounds.get(0).cell) < 0) {\n+    if (term.compareTo(this.nextSubRange = rangeBounds.get(0).asBytesRef(this.nextSubRange)) < 0) {\n\n\n\nbreak that inner assignment out into its own line before?\n\nAnother example, instead of:\n\n    final int result = Short.compare(this.shift, other.shift);\n    return (result == 0) ? Long.compare(this.start, other.start) : result;\n\n\n\ncan we do e.g.:\n\n\n    final int result = Short.compare(this.shift, other.shift);\n    if (result == 0) {\n      return result;\n    }\n    return Long.compare(this.start, other.start);\n\n\n\nInstead of cloning the somewhat hairy\nNumericUtils.longToPrefixCodedBytes, is it possible to e.g. reuse\na shared BytesRefBuilder?\n\nInstead of the lazy alloc of reusable can we change the asBytesRef to\nfillBytesRef, and it takes the non-null BytesRef in, and\nreturns void?  It's confusing to both take a parameter and return a result that\nare sort of doing the same thing ... "
        },
        {
            "id": "comment-14729839",
            "author": "Nicholas Knize",
            "date": "2015-09-03T21:37:05+0000",
            "content": "Attached patch that splits some of the longer ternary operators.\n\nis it possible to e.g. reuse a shared BytesRefBuilder?\n\nI would have preferred this to begin with, but longToPrefixCodedBytes calls the following \n\nbytes.grow(BUF_SIZE_LONG);\n\n\nSo it continues to grow the byte array for whatever reused buffer is passed. As an alternative I can update NumericUtils to include a version that reuses a BytesRefBuilder?  That is if we think it will be useful outside this one use case?  "
        },
        {
            "id": "comment-14729851",
            "author": "Nicholas Knize",
            "date": "2015-09-03T21:41:53+0000",
            "content": "Sorry, missed the last suggestion for refactoring \n\nasBytesRef\n\n to \n\nfillBytesRef\n\n.  Updated patch attached. "
        },
        {
            "id": "comment-14729856",
            "author": "Nicholas Knize",
            "date": "2015-09-03T21:45:09+0000",
            "content": "Deleted wrong patch... correct one attached. "
        },
        {
            "id": "comment-14731026",
            "author": "Michael McCandless",
            "date": "2015-09-04T16:27:22+0000",
            "content": "So it continues to grow the byte array for whatever reused buffer is passed.\n\nHmm but that grow is (effectively: a couple if statements) a no-op if the builder's byte[] is already large enough?\n\nThat NumericUtils encoding code is so hairy, I really don't think we want it in more places than one!\n\nAlso, the check for reusable == null isn't needed?  It can become assert reusable != null, and maybe rename reusable to result? "
        },
        {
            "id": "comment-14739109",
            "author": "Nicholas Knize",
            "date": "2015-09-10T16:54:29+0000",
            "content": "Updated patch to address comments.\n\n\n\tRemoves duplicate longToPrefixCodedBytes\n\tRefactors variable naming\n\tUses reusable BytesRefBuilder\n\n "
        },
        {
            "id": "comment-14739294",
            "author": "Michael McCandless",
            "date": "2015-09-10T18:25:02+0000",
            "content": "Thanks Nicholas Knize, new patch looks great!  I'll run tests & commit shortly ... "
        },
        {
            "id": "comment-14739340",
            "author": "ASF subversion and git services",
            "date": "2015-09-10T18:46:23+0000",
            "content": "Commit 1702307 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1702307 ]\n\nLUCENE-6777: reuse BytesRef when visiting term ranges in GeoPointTermsEnum "
        },
        {
            "id": "comment-14739342",
            "author": "ASF subversion and git services",
            "date": "2015-09-10T18:47:02+0000",
            "content": "Commit 1702308 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1702308 ]\n\nLUCENE-6777: reuse BytesRef when visiting term ranges in GeoPointTermsEnum "
        },
        {
            "id": "comment-14739343",
            "author": "Michael McCandless",
            "date": "2015-09-10T18:47:16+0000",
            "content": "Thanks Nicholas Knize! "
        }
    ]
}