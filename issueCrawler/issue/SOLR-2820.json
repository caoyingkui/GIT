{
    "id": "SOLR-2820",
    "title": "Add both model and state to ZooKeeper layout for SolrCloud",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "SolrCloud"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Current we skimp by here by having the model and simple node state - we really want the model and full cluster state longer term though.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Ted Dunning",
            "id": "comment-13124642",
            "date": "2011-10-11T01:15:25+0000",
            "content": "Would it help to have a toy implementation for discussion here?  I don't have enough time to make clean updates to Solr itself, but I have built this kind of code several times and could build a simple framework very quickly. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13124980",
            "date": "2011-10-11T12:35:06+0000",
            "content": "Sure, I wouldn't say no. An small impl to compare with and steal from would be great... "
        },
        {
            "author": "Jamie Johnson",
            "id": "comment-13125363",
            "date": "2011-10-11T20:32:45+0000",
            "content": "Is this task to update /cluster_state with the state of each individual replica?  Would this just be having the shard leader watch /live_nodes and on change check update the ClusterState so that particular replica will be marked as down and having some mechanism by which the replicas state could be changed (through some admin command) and again update the ClusterState? "
        },
        {
            "author": "Ted Dunning",
            "id": "comment-13125384",
            "date": "2011-10-11T20:59:11+0000",
            "content": "Both alternatives would work.  My own tendency would be for nodes to update state themselves to avoid round-trips to ZK. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13125388",
            "date": "2011-10-11T21:03:34+0000",
            "content": "My initial thoughts are (I've got to go re read some of Ted's comments):\n\nWe keep track of the target layout and the current layout. The target layout would include things like nodes that are down - you would be able to tell a slice should exist even if all nodes serving that slice where down. The current layout would show how things actually are - what is up, what is down, etc.\n\nI suppose you might track this all in one structure, but we want to think about what the separation might give us too.\n\nFor example, suppose we offer manual rebalancing control (supposing getting the heuristics right for auto is hard difficult or not always appropriate) - if a user where to move a shard to another node, he could make the change in the target layout. If the overseer goes down while making this change, the new overseer will be able to look and see that while a change was intended, it has not happened yet and the shard still needs to be moved. Meanwhile, clients will still be directed to the old serving node through the current layout.\n\nOn the other hand, clients will still have to read both current and target layouts to be aware of missing slices and properly handle partial results. It still does not give you \"one place for all of this\" that I remember Ted arguing for. "
        },
        {
            "author": "Jamie Johnson",
            "id": "comment-13125483",
            "date": "2011-10-11T23:43:02+0000",
            "content": "Ok, makes sense. What is the process for performing a state change to a replica?  I am not super familiar with how this would happen, would another method need to be added to ZkController to handle this?  Also how do we handle nodes that just die?  In that case they won't be able to update their state so we'll need some overseer to do this right?  Would the shard leader be the appropriate place? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13125517",
            "date": "2011-10-12T01:01:59+0000",
            "content": "Yeah, I think we would need an overseer for this? Probably not the shard leader, because it would also have to update the state when a whole \"slice\" goes down.\n\nI'm waiting to see what Ted is working on. "
        },
        {
            "author": "Cassandra Targett",
            "id": "comment-15526509",
            "date": "2016-09-27T15:43:22+0000",
            "content": "It feels like this is really out of date? If not, can we get an updated description of what's needed in modern SolrCloud? "
        }
    ]
}