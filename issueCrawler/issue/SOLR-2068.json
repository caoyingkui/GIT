{
    "id": "SOLR-2068",
    "title": "Search Grouping: collapse by string specialization",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Create specialized implementations for collapsing by an indexed string field.",
    "attachments": {
        "SOLR-2068.patch": "https://issues.apache.org/jira/secure/attachment/12458336/SOLR-2068.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12926290",
            "date": "2010-10-29T14:23:13+0000",
            "content": "Going back over my old notes on how to efficiently do a string field per-segment:\n\nPhase1:\n\n\tBasically, hash based on ord (or a direct index lookup if the # of ords is small enough).  We don't look up the value of the string at this point.\n\tWhen a segment changes, we need to convert the ords from the old segment to the new segment (i.e. look up it's value in the old segment, and find the ord of that in the new segment).\n\tif the group value is not found in the new segment, the remove it from the hash.  Keep it in the ordered map since it can still be pushed out by other insertions.\n\n\n\nPhase 2:\n\n\tat the start of each segment, look up the ords for the values and hash the group based on that ord (or leave it out of the hash if it didn't exist in that segment).\n\n\n\nMartijn's optimization in SOLR-2205 probably made Phase1 less important (except if there are very few unique groups), so perhaps we should start with Phase2 first. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12926338",
            "date": "2010-10-29T16:40:33+0000",
            "content": "The improvements extracted from SOLR-2205 dedicated the the phase 2 improvements. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12926340",
            "date": "2010-10-29T16:43:16+0000",
            "content": "we would be better off using an OpenBitSet - or even better, a sparse set since the number of elements\nI get the OpenBitSet part, but what actual class do you mean with a sparse set? (Not a primitive array I assume)  "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12927620",
            "date": "2010-11-02T21:35:07+0000",
            "content": "\n\tUpdated the patch to the latest trunk\n\tChanged the boolean array to a OpenBitSet\n\tMade the Phase2GroupCollector per-segment friendly\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12927700",
            "date": "2010-11-03T00:31:29+0000",
            "content": "The ord in one segment isn't equivalent to the ord in another segment... so I don't think the currently attached patch will work. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12927702",
            "date": "2010-11-03T00:35:43+0000",
            "content": "Here's a draft patch (completely untested) that implements the phase2 specialization:\n\nat the start of each segment, look up the ords for the values and hash the group based on that ord (or leave it out of the hash if it didn't exist in that segment). "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-12927893",
            "date": "2010-11-03T16:24:29+0000",
            "content": "The ord in one segment isn't equivalent to the ord in another segment... so I don't think the currently attached patch will work.\nYes, your right. I didn't notice that since the index I used for testing was optimized and there was only one subreader... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12934362",
            "date": "2010-11-21T22:04:02+0000",
            "content": "I've fixed the bugs such that the string specialization passes for the random tests.\nI've left it disabled for now however since we don't yet have support for missing values (i.e groupValue==null). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12935032",
            "date": "2010-11-23T20:36:07+0000",
            "content": "I just enabled and committed the code to collapse by string more efficiently (after adding support for null values).\n\nHere are the results of some quick tests.\nindex: docs=10M, segments=11\nquery=*:*\nrows=10\n\n\n\n\nnumber of unique values in field.group\nms before patch\nms after patch\n\n\n10\n816\n306\n\n\n100\n630\n388\n\n\n1000\n612\n367\n\n\n10000\n681\n368\n\n\n100000\n995\n436\n\n\n\n "
        }
    ]
}