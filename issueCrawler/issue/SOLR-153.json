{
    "id": "SOLR-153",
    "title": "Facet Index",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Implemented"
    },
    "description": "A facet index, initially for non-hierarchical facets.\nStart with all terms, and a set of documents for each term.  Group lower level nodes by taking the union of the sets, but keep track of the largest set going back all the way to the leaves (the max doc-freq for that node).",
    "attachments": {
        "facettree.patch": "https://issues.apache.org/jira/secure/attachment/12350733/facettree.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12471602",
            "date": "2007-02-09T07:15:04+0000",
            "content": "Incomplete brainstorming code, for building the lowest level of the tree only.\nCompletely untested / uncompiled, no search-side code yet, and all in a single file. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12487426",
            "date": "2007-04-08T01:52:43+0000",
            "content": "Much more complete code, algorithm-wise.\n\nI added code to build a tree.  It's based on a priority queue, but it only takes unionSize into account when selecting nodes to merge (not maxDf at all), and is thus sub-optimal.  I expect it to be replaced in the future, but it may work well enough for the first working version.\n\nI added searching code that traverses the tree and expands nodes, estimating child intersection counts based on the parent count multiplied by the fraction of bits set in the child union.  \nRight now, the next node to evaluate is based on estimatedIntersectionCount * maxDf, but something like estimatedIntersectionCount * sqrt(maxDf) might work better in the future.\n\nThis is still all really brainstorming code, all in one file, completely untested, and it will not work since there is no code to hook it up to Solr (construct a request or get the result).  This update is really just to back up the code somewhere, or in case I get hit by a bus  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12487428",
            "date": "2007-04-08T01:54:26+0000",
            "content": "Attached again, this time correctly granting ASF license. "
        },
        {
            "author": "Peter Karich",
            "id": "comment-12921322",
            "date": "2010-10-15T12:19:41+0000",
            "content": "Yonik, is this an implementation of the tree described here:\n\nhttp://www.cs.cmu.edu/~ddash/papers/facets-cikm.pdf\n\n?? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12921337",
            "date": "2010-10-15T13:06:28+0000",
            "content": "Hmmm, yes, their \"Bitset Tree\" is what I've done here.\nIt looks like my work pre-dates their work, but I guess they were unaware of this issue. "
        },
        {
            "author": "Peter Karich",
            "id": "comment-12921456",
            "date": "2010-10-15T17:32:53+0000",
            "content": "> It looks like my work pre-dates their work\n\ngreat ! \n\nNow this is interesting for me, because they say their 'bitset tree' performs nice for non-hierarchical facets in two cases: when someone needs a combination of facets or 'bitset trees are beneficial when the facet domain is relatively large'. (Although memory consumption is heavier without their WAH compression)\n\nHow much work would it to integrate your work into facets? E.g. to get an idea of the performance on real data? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12921460",
            "date": "2010-10-15T17:42:33+0000",
            "content": "I think this facet algorithm could do well when both the number of unique terms are high, and the number of values per document is high.  That's really the only case where our existing algorithms fall down.\n\nThere's more info about how this should work, starting here:\nhttp://search.lucidimagination.com/search/document/6ccbec5e602687ae/facet_optimizing\nAnd then the comments in the code of course.\n\nHow much work would it to integrate your work into facets? E.g. to get an idea on real data?\n\nNot sure... it's been a long time, and I was brainstorming in code - I never tried running it, so I guarantee there are tons of bugs.  Cool stuff though - wish I had time to work on it again. "
        },
        {
            "author": "Peter Karich",
            "id": "comment-12921489",
            "date": "2010-10-15T18:42:41+0000",
            "content": "> That's really the only case where our existing algorithms fall down. \n\nbut that is quite common ... like in my case \nhmmh, I will see if I have time.\n\nThis is one line where I need to replace the 'old intersection' with the new one which uses the precalculated tree:\n\nc = searcher.numDocs(new TermQuery(t), docs, deState);\n\nright?\n\nBut I don't understand the part where where df > minDfFilterCache ... What is a '(Multi)DocsEnum' ? I'll investigate this! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12987003",
            "date": "2011-01-26T13:40:56+0000",
            "content": "Hi Yonik, I've been thinking of some possibilities here with regards to our terms index itself.\n\nCurrently the terms index is an FST with an output going to the terms, but what if instead this\nwas a PairOutputs<existingOutput, max(docFreq)> or whatever faceting needs.\n\nSomehow via termsenum we would have to expose its FSTEnum or whatever so faceting \ncould use it, but you could then make use of our existing \"tree\" structure (terms index + terms dict)\nfor this case.\n\nSorry i'm not up to speed on really how fast termsenum faceting is versus say using the fieldcache\nor the various faceting techniques we have today, but it seems like we could do something here, e.g.\nif you know up-front you will facet on this field a lot you specify the appropriate codec so that\nyour terms index accelerates faceting. "
        },
        {
            "author": "Alexandre Rafalovitch",
            "id": "comment-15582233",
            "date": "2016-10-17T13:16:42+0000",
            "content": "We've had facets for a while!!! Safe to close this brainstorming issue? "
        }
    ]
}