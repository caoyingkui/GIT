{
    "id": "SOLR-9150",
    "title": "Add configuration option to strip type postfix from dynamic field name on document indexing",
    "details": {
        "components": [
            "Server"
        ],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.0",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "In some cases, incorporating field type indication to the name of a dynamic field is not desirable. \n\nIt would be great if there was a configuration option (global, instance level or collection-level), which instructed Solr to create dynamic fields with the type postfix stripped. \n\nFor example, suppose the schema contained a dynamic field with a name of \"_i\". If the user attempts to index a document with a \"cost_i\" field, but no explicit \"cost_i\" field is defined in the schema, then a \"cost\" field (without \"_i\" postfix) would be created with the field type and analysis defined for \"_i\". As a result queries could be executed against the dynamic field being referred to without the type indicator postfix: \"cost:10\"\n\nTo retain backward compatibility, this feature should have to be enabled explicitly.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-05-23T17:07:22+0000",
            "author": "Erick Erickson",
            "content": "I'm not  big fan of this idea at first blush, it seems like unnecessary complexity in the engine to support... I'm not sure what.\n\n\"Not desirable\" because of what? Convenience at the app layer? Some UI that has a pick list? It'd be useful to have a statement of what problem this capability is attempting to solve before jumping in and making changes, there might be other approaches already in place. There's already \"field aliasing\" to allow display of a different field name than it actually is for instance.\n\nI'm not totally against the idea, I just don't see a clear problem statement here. ",
            "id": "comment-15296658"
        },
        {
            "date": "2016-05-23T21:46:33+0000",
            "author": "Shawn Heisey",
            "content": "Let's imagine an index that does not have a field named \"foo\", but does have \"*_i\" and \"*_s\" dynamicField entries.\n\nAn indexing request comes in with number in a field named \"foo_i\".  With this feature, this would put that data into a Lucene field named \"foo\" ... but at that point, how is Solr supposed to know that a query on the \"foo\" field should be treated as a number?  The only way I can imagine this working without problems is if this action results in a managed_schema update that adds the field named \"foo\" to the schema with the same definition as \"*_i\".\n\nAs a further thought experiment, what exactly should happen if a subsequent indexing request contains a field named \"foo_s\" that holds a non-numeric string?  If the first request containing foo_i results in foo being added to a managed schema, then a subsequent request with foo_s would fail, because the incoming data would not be compatible with an integer field. ",
            "id": "comment-15297154"
        },
        {
            "date": "2016-05-23T22:22:40+0000",
            "author": "Kevin Risden",
            "content": "I haven't put too much thought into this, but how about an alternative idea that may solve the same problem. Field name aliases ie: foo would point to foo_i when querying. I have no idea what kind of impact this would have querying to resolve this. This would enable dynamic fields but have a defined alias mapping added later. Basically agree with what Erick Erickson is saying.\n\nI can see the case where querying and needing to know the _type would be a pain, but at indexing time the _type would be known. ",
            "id": "comment-15297226"
        },
        {
            "date": "2016-05-25T02:48:12+0000",
            "author": "Erick Erickson",
            "content": "Shawn actually brings up a couple of points that, IMO, shoot down the idea. I don't see a reasonable way to support two different types that have the suffix stripped later in the process. If 'foo_s' and 'foo_i' would both map to 'foo'. From there it's all a mess.\n\nAll the code in Solr that tries to resolve field names would have to be visited unless, as Shawn mentions, managed schemas would have to be updated.\n\nThis would get messy really quickly and there still hasn't been a clear case made for why this would be worth the complexity. ",
            "id": "comment-15299357"
        },
        {
            "date": "2016-05-25T06:00:30+0000",
            "author": "Hoss Man",
            "content": "I don't particularly think this is a good idea (nor do i think general purpose field aliases \u2013 as a high level configuration option \u2013 would really solve any of hte underlying ambiguity problems) but if someone wanted to pursue this objective i would suggest implemetning it as an UpdateProcessor similar to how the the current AddSchemaFieldsUpdateProcessorFactory works using teh underlying ManagedSchema APIsto add fields \u2013 but instead of saying \"i see a 'cost' field in this doc, but no 'cost' field in the schema, so i will add it using a configured/default type mapping\" the logic could say \"I see a 'cost_i' field in this doc, which matches a '*_i' dynamic field, using a prefix of 'cost'; since 'cost' does not already exist in the schema, i will copy the attributes from '*_i' into a new 'cost' field and rename the 'cost_i' field in this document 'cost' before adding it\" ",
            "id": "comment-15299518"
        },
        {
            "date": "2016-05-25T13:25:18+0000",
            "author": "Steve Rowe",
            "content": "Rather than using the existing dynamic field capabilities, I think it would be better to come up with a new mechanism.\n\nThe type could directly be a suffix in the specified field name, with some separator, e.g.: \"cost::int\", where \"cost\" is the field name, \"::\" is the separator and \"int\" is the fieldtype.  That way dynamic fields aren't involved at all.  Then Hoss's UpdateProcessor flow could be used, but the field would be created using the \"int\" fieldtype rather than copying attributes from a dynamicfield.  ",
            "id": "comment-15300024"
        },
        {
            "date": "2016-05-25T16:05:30+0000",
            "author": "Peter Horvath",
            "content": "Here is our use-case: imagine a system, where Solr is used as a backing store of a hosted service, where a number of external customers regularly load their data (bringing their own field names like \"foo\" and \"bar\"), build some UIs with the tools you provide them for 3rd party users. In such environment you do not know the fields stored in Solr (except load time, when you can look at the values), and do not want to expose the implementation details of Solr being used for the backend. Since you want to hide the fact that fields \"foo\" and \"bar\" are actually stored internally as e.g \"foo_i\" and \"bar_s\", you will have to implement some mapping logic in the application, translating back and forth between the user view (\"foo\" and \"bar\" fields) and the actual backend names \"foo_i\" and \"bar_s\" \u2013 this is something I would desperately like to avoid. \n\nI am not familiar with the internal workings of Solr, so I might be wrong, but I though achieving something would be relatively easy: in Lucene it is, where you can always add a new field when a document is inserted.\n\nI think the operation should simply fail, in case an attempt is made to index a document field with a different data type. E.g. someone created \"foo\" by indexing \"foo_i\", then indexing a document with \"foo_s\" should simply be rejected by an exception. \n\nAm I right assuming that Solr does not simply rely on the field naming to know the type of a dynamic field? Or does it?\n\nThis does not necessarily has to be implemented in the core engine: I would be happy with any solution, that allowed me to create fields without having to query the current schema of a collection and then issue massive number of schema change requests. (Adjusting the non-dynamic schema is plausible, but still difficult for us: a user might change his/her mind and load completely different data structure: we would have to purge dangling fields after that...). An optional hook, extension etc would be perfectly fine for us. Or if you have any better idea, how to deal with such requirements, I am much obliged to hear you inputs. ",
            "id": "comment-15300292"
        },
        {
            "date": "2016-05-25T17:27:55+0000",
            "author": "Shawn Heisey",
            "content": "I would simply write a custom schema for each customer, mapping \"foo\" and \"bar\" to the proper types for that specific customer.  I would also expect each customer to want custom analysis chains for various text field types, which is further reason for a highly customized schema for each customer.\n\nDynamic fields are a useful feature, but heavy dynamic field usage only makes sense if there is a corresponding consistency in the field names of the source data that match up with the dynamic field definitions. ",
            "id": "comment-15300474"
        },
        {
            "date": "2016-05-25T18:43:54+0000",
            "author": "Steve Rowe",
            "content": "Am I right assuming that Solr does not simply rely on the field naming to know the type of a dynamic field? Or does it?\n\nSolr does simply rely on the field name to know the field type for a dynamic field.  Dynamic field names are of the form *suffix or prefix* - i.e. a glob that matches field names that include a fixed suffix or prefix[1].  There is a single fieldtype associated with each dynamic field, so once a match is made, the fieldtype is also known.\n\nThis does not necessarily has to be implemented in the core engine: I would be happy with any solution, that allowed me to create fields without having to query the current schema of a collection and then issue massive number of schema change requests.\n\nNote that you can send a single request that contains any number of changes, though if any one fails, none are applied.\n\n[1] There can also be a * dynamic field, which matches all field names.  ",
            "id": "comment-15300629"
        },
        {
            "date": "2016-05-25T20:50:29+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "The type could directly be a suffix in the specified field name, with some separator, e.g.: \"cost::int\", where \"cost\" is the field name\n\nI'm not a fan of overloading field name with special meaning to convey meta data. It's convenient since it will pass through existing code without change, but I'd like it to be more explicit.\n\nAs I see it, this issue is about improving Solr's field type guessing by giving Solr a hint about type along with the document, but still use plain field names such as \"cost\". A few ideas come to mind:\n\n\tSupport this only on JSON input, infer type from the JSON type, and also select multiValued if array is used etc\n\tProvide types in a custom sidecar field \n\n\"_types_\" : {\"cost\":\"int\", \"desc\":\"string\"}\n\n\tLet type be encoded in value \n\n<field name=\"cost\">{!type=int}300</field>\n\n\tWhen Solr encounters a new field name, let it temporarily add it to schema as \"string\", tagging the docs with a special field \"_reguessfields_\":[\"cost\"]. When enough docs have accumulated in the index with that new field, perform a new guess, and change type if necessary, reindexing all affected docs. This may require stored=true for all fields.\n\n ",
            "id": "comment-15300831"
        }
    ]
}