{
    "id": "LUCENE-2816",
    "title": "MMapDirectory speedups",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "3.1,                                            4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "MMapDirectory has some performance problems:\n\n\tWhen the file is larger than Integer.MAX_VALUE, we use MultiMMapIndexInput,\nwhich does a lot of unnecessary bounds-checks for its buffer-switching etc. \nInstead, like MMapIndexInput, it should rely upon the contract of these operations\nin ByteBuffer (which will do a bounds check always and throw BufferUnderflowException).\nOur 'buffer' is so large (Integer.MAX_VALUE) that its rare this happens and doing\nour own bounds checks just slows things down.\n\tthe readInt()/readLong()/readShort() are slow and should just defer to ByteBuffer.readInt(), etc\nThis isn't very important since we don't much use these, but I think there's no reason\nusers (e.g. codec writers) should have to readBytes() + wrap as bytebuffer + get an \nIntBuffer view when readInt() can be almost as fast...",
    "attachments": {
        "LUCENE-2816.patch": "https://issues.apache.org/jira/secure/attachment/12466451/LUCENE-2816.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-12-17T08:36:19+0000",
            "content": "Here's the most important benchmark: speeding up the MultiMMap's readByte(s) in general:\n\nMultiMMapIndexInput readByte(s) improvements [trunk, Standard codec]\n\n\n\nQuery\nQPS trunk\nQPS patch\nPct diff\n\n\nspanFirst(unit, 5)\n12.72\n12.85\n1.0%\n\n\n+nebraska +state\n137.47\n139.33\n1.3%\n\n\nspanNear([unit, state], 10, true)\n2.90\n2.94\n1.4%\n\n\n\"unit state\"\n5.88\n5.99\n1.8%\n\n\nunit~2.0\n7.06\n7.20\n2.0%\n\n\n+unit +state\n8.68\n8.87\n2.2%\n\n\nunit state\n8.00\n8.23\n2.9%\n\n\nunit~1.0\n7.19\n7.41\n3.0%\n\n\nunit*\n22.66\n23.41\n3.3%\n\n\nuni*\n12.54\n13.12\n4.6%\n\n\nunited~1.0\n10.61\n11.12\n4.8%\n\n\nunited~2.0\n2.52\n2.65\n5.1%\n\n\nstate\n28.72\n30.23\n5.3%\n\n\nun*d\n44.84\n48.06\n7.2%\n\n\nu*d\n13.17\n14.51\n10.2%\n\n\n\n\n\nIn the bulk postings branch, I've been experimenting with various techniques for FOR/PFOR \nand one thing i tried was simply decoding with readInt() from the DataInput. So I adapted For/PFOR\nto just take DataInput and work on it directly, instead of reading into a byte[], wrapping it with a ByteBuffer,\nand working on an IntBuffer view.\n\nBut when I did this, i found that MMap was slow for readInt(), etc. So we implement these primitives\nwith ByteBuffer.readInt(). This isn't very important since lucene doesn't much use these, and mostly theoretical \nbut I still think things like readInt(), readShort(), readLong() should be fast... for example just earlier today \nsomeone posted an alternative PFOR implementation on LUCENE-1410 that uses DataInput.readInt().\n\nMMapIndexInput readInt() improvements [bulkpostings, FrameOfRefDataInput codec]\n\n\n\nQuery\nQPS branch\nQPS patch\nPct diff\n\n\nspanFirst(unit, 5)\n12.14\n11.99\n-1.2%\n\n\nunited~1.0\n11.32\n11.33\n0.1%\n\n\nunited~2.0\n2.51\n2.56\n2.1%\n\n\nunit~1.0\n6.98\n7.19\n3.0%\n\n\nunit~2.0\n6.88\n7.11\n3.3%\n\n\nspanNear([unit, state], 10, true)\n2.81\n2.96\n5.2%\n\n\nunit state\n8.04\n8.59\n6.8%\n\n\n+unit +state\n10.97\n12.12\n10.5%\n\n\nunit*\n26.67\n29.80\n11.7%\n\n\n\"unit state\"\n5.59\n6.27\n12.3%\n\n\nuni*\n15.10\n17.51\n15.9%\n\n\nstate\n33.20\n38.72\n16.6%\n\n\n+nebraska +state\n59.17\n71.45\n20.8%\n\n\nun*d\n35.98\n47.14\n31.0%\n\n\nu*d\n9.48\n12.46\n31.4%\n\n\n\n\n\nHere's the same benchmark of DataInput.readInt() but with the MultiMMapIndexInput\n\nMultiMMapIndexInput readInt() improvements [bulkpostings, FrameOfRefDataInput codec]\n\n\n\nQuery\nQPS branch\nQPS patch\nPct diff\n\n\nunited~2.0\n2.43\n2.54\n4.3%\n\n\nunited~1.0\n10.78\n11.39\n5.7%\n\n\nunit~1.0\n6.81\n7.21\n5.8%\n\n\nunit~2.0\n6.62\n7.05\n6.5%\n\n\nspanNear([unit, state], 10, true)\n2.77\n2.96\n6.6%\n\n\nunit state\n7.85\n8.53\n8.7%\n\n\nspanFirst(unit, 5)\n10.50\n11.71\n11.5%\n\n\n+unit +state\n10.26\n11.94\n16.3%\n\n\n\"unit state\"\n5.39\n6.31\n17.0%\n\n\nstate\n31.95\n39.17\n22.6%\n\n\nunit*\n24.39\n31.02\n27.2%\n\n\n+nebraska +state\n54.68\n71.98\n31.6%\n\n\nu*d\n9.53\n12.62\n32.5%\n\n\nuni*\n13.72\n18.23\n32.9%\n\n\nun*d\n35.87\n48.19\n34.3%\n\n\n\n\n\nJust to be sure, I ran this last one on sparc64 (bigendian) also.\n\nMultiMMapIndexInput readInt() improvements [bulkpostings, FrameOfRefDataInput codec]\n\n\n\nQuery\nQPS branch\nQPS patch\nPct diff\n\n\nunited~2.0\n2.23\n2.26\n1.5%\n\n\nunit~2.0\n6.37\n6.47\n1.6%\n\n\nunited~1.0\n11.33\n11.59\n2.3%\n\n\nunit~1.0\n9.68\n10.05\n3.7%\n\n\nspanNear([unit, state], 10, true)\n15.60\n17.54\n12.5%\n\n\nunit*\n127.14\n144.08\n13.3%\n\n\nunit state\n44.93\n51.30\n14.2%\n\n\nspanFirst(unit, 5)\n58.42\n68.37\n17.0%\n\n\nuni*\n56.66\n67.53\n19.2%\n\n\n+nebraska +state\n215.62\n262.99\n22.0%\n\n\n+unit +state\n63.18\n77.86\n23.2%\n\n\n\"unit state\"\n32.24\n40.05\n24.2%\n\n\nu*d\n29.13\n36.69\n26.0%\n\n\nstate\n145.99\n188.33\n29.0%\n\n\nun*d\n65.27\n87.20\n33.6%\n\n\n\n\n\nI think some of these benchmarks also show that MultiMMapIndexInput might now be\nessentially just as fast as MMapIndexInput... but lets not go there yet and keep them separate for now. ",
            "author": "Robert Muir",
            "id": "comment-12972392"
        },
        {
            "date": "2010-12-17T08:58:59+0000",
            "content": "Awesome results robert!!  ",
            "author": "Simon Willnauer",
            "id": "comment-12972398"
        },
        {
            "date": "2010-12-17T09:38:20+0000",
            "content": "Awesome, Ro bert is changing to the MMap Performance Policeman!\n\nI like the idea to simply delegate the methods and catch exception to fallback to manual read with boundary transition! I just wanted to be sure that the position pointer in the buffer does not partly go forward when you read request fails at a buffer boundary, but that seems to be the case. ",
            "author": "Uwe Schindler",
            "id": "comment-12972413"
        },
        {
            "date": "2010-12-17T09:41:43+0000",
            "content": "One thing to add: When using readFloat & co, we should make sure that we set the endianness explicitely in the ctor. I just want to explicitely make sure that the endianness is correct and document it that it is big endian for Lucene.\n\nWe don't need that: \"The initial order of a byte buffer is always BIG_ENDIAN.\" ",
            "author": "Uwe Schindler",
            "id": "comment-12972416"
        },
        {
            "date": "2010-12-17T09:47:51+0000",
            "content": "I just wanted to be sure that the position pointer in the buffer does not partly go forward when you read request fails at a buffer boundary, but that seems to be the case.\n\nYes, this is guaranteed in the APIs, and also tested well by TestMultiMMap, which uses random chunk sizes between 20 and 100 (including odd numbers etc)\nThough we should enhance this test, i think it just retrieves documents at the moment... probably better if it did some searches too. ",
            "author": "Robert Muir",
            "id": "comment-12972418"
        },
        {
            "date": "2010-12-17T09:48:36+0000",
            "content": "Good grief!  What amazing gains, especially w/ PFor codec which of course makes super heavy use of .readInt().  Awesome Robert!\n\nThis will mean w/ the cutover to FORPFOR codec for 4.0, MMapDir will likely have a huge edge over NIOFSDir? ",
            "author": "Michael McCandless",
            "id": "comment-12972420"
        },
        {
            "date": "2010-12-17T09:53:41+0000",
            "content": "\nGood grief! What amazing gains, especially w/ PFor codec which of course makes super heavy use of .readInt(). Awesome Robert!\nThis will mean w/ the cutover to FORPFOR codec for 4.0, MMapDir will likely have a huge edge over NIOFSDir?\n\nThis isn't really a 'gain' for the bulkpostings branch?\nThis is just making DataInput.readInt() faster.\nCurrently the bulkpostings branch uses readByte(byte[]), then wraps into a ByteBuffer and processes an IntBuffer view of that.\nI switched to just using readInt() from DataInputDirectly [FrameOfRefDataInput] and found it to be much slower than this IntBuffer method.\n\nthis whole benchmark is just benching DataInput.readInt()...\n\nSo, we shouldn't change anything in bulkpostings, this isn't faster than the intbuffer method in my tests, at best its equivalent... but we should fix this slowdown in our APIs. ",
            "author": "Robert Muir",
            "id": "comment-12972422"
        },
        {
            "date": "2010-12-19T00:34:47+0000",
            "content": "committed revision 1050737. I'll wait a bit for branch_3x. ",
            "author": "Robert Muir",
            "id": "comment-12972880"
        },
        {
            "date": "2010-12-26T15:04:01+0000",
            "content": "Committed revision 1052892 to branch_3x. ",
            "author": "Robert Muir",
            "id": "comment-12975114"
        }
    ]
}