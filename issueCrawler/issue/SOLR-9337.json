{
    "id": "SOLR-9337",
    "title": "Add fetch Streaming Expression",
    "details": {
        "components": [],
        "type": "New Feature",
        "labels": "",
        "fix_versions": [
            "6.3"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Implemented",
        "priority": "Major"
    },
    "description": "The fetch() Streaming Expression wraps another expression and fetches additional fields for documents in batches. The fetch() expression will stream out the Tuples after the data has been fetched. Fields can be fetched from any SolrCloud collection. \n\nSample syntax:\n\n\ndaemon(\n       update(collectionC, batchSize=\"100\"\n              fetch(collectionB, \n                    topic(checkpoints, collectionA, q=\"*:*\", fl=\"a,b,c\", rows=\"50\"),\n                    fl=\"j,m,z\",\n                    on=\"a=j\")))",
    "attachments": {
        "SOLR-9337.patch": "https://issues.apache.org/jira/secure/attachment/12832215/SOLR-9337.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-22T17:26:32+0000",
            "author": "Dennis Gove",
            "content": "How does a fetch differ from an innerJoin? I guess it could if it read in a tuple from the source and then looked up its specific fields, but I dunno how performant that'd be. ",
            "id": "comment-15513889"
        },
        {
            "date": "2016-09-22T17:42:10+0000",
            "author": "Joel Bernstein",
            "content": "fetch works like this:\n\n1) read N tuples into memory\n2) use a query to fetch fields for the tuples read in step 1.\n3) stream the tuples out\n4) repeat steps 1-3 until the underlying stream is EOF\n\nThis is essentially a nested loop join against the entire index.\n\nMainly used when one side of the join is very small and you want to join it against the entire index. \n\nOne main use case I have in mind is doing a graph query, fetching text fields for the node set that is returned, and then running the text classifier on the node set. This would combine graph queries and AI models to provide very intelligent recommendations.\n\n\n\n\n\n ",
            "id": "comment-15513940"
        },
        {
            "date": "2016-10-10T18:22:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ee3f9e1e058ac4205140b909a85d43fdd715ddb7 in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ee3f9e1 ]\n\nSOLR-9337: Add fetch Streaming Expression ",
            "id": "comment-15563054"
        },
        {
            "date": "2016-10-10T19:25:32+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5836f4032fac975707c85e260d509ecd06c7f7e1 in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5836f40 ]\n\nSOLR-9337: Add fetch Streaming Expression ",
            "id": "comment-15563220"
        },
        {
            "date": "2016-10-11T01:50:51+0000",
            "author": "ASF subversion and git services",
            "content": "Commit d69412bc676189600aed8b4cff2aad819526a5e2 in lucene-solr's branch refs/heads/master from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d69412b ]\n\nSOLR-9337: Update CHANGES.txt ",
            "id": "comment-15564146"
        },
        {
            "date": "2016-10-11T01:53:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit ccc10fd5932fa5d830c3ecda86e85b4845bca863 in lucene-solr's branch refs/heads/branch_6x from Joel Bernstein\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ccc10fd ]\n\nSOLR-9337: Update CHANGES.txt ",
            "id": "comment-15564154"
        },
        {
            "date": "2016-11-09T08:38:41+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Closing after 6.3.0 release. ",
            "id": "comment-15650287"
        },
        {
            "date": "2017-04-03T15:01:59+0000",
            "author": "David Smiley",
            "content": "How does a fetch differ from an innerJoin?\n\nIMO I think that points to an unfortunate choice of names for this streaming expression.  I had the same question.  \"join\" should have been in this streaming expression's name; be it \"join\" exactly or some variation but I think developers expect to see that term if it works like DB joins that we all know. ",
            "id": "comment-15953637"
        },
        {
            "date": "2017-04-03T18:12:00+0000",
            "author": "Joel Bernstein",
            "content": "Another name for this could have been nestedLoopJoin. But for the functionality I was looking to support at the time I didn't need to support all the different join conditions (one-to-one, one-to-many, many-to-one, many-to-many etc...). So rather then call it a join, I called it fetch. The full nestedLoopJoin capability will be available in the future and it will be called by that name. Eventually, possibly in Solr 7.0 fetch will be superseded by the nestedLoopJoin. ",
            "id": "comment-15953934"
        }
    ]
}