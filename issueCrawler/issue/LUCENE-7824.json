{
    "id": "LUCENE-7824",
    "title": "Multi-word synonyms rule with common terms at the same position are buggy",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Resolved",
        "affect_versions": "6.5.1,                                            7.0",
        "status": "Closed",
        "type": "Bug",
        "components": [],
        "fix_versions": [
            "6.6",
            "7.0"
        ]
    },
    "description": "The automaton built from the graph token stream tries to pack common terms in multi word synonyms that appear at the same position. This means that some states inside a multi word synonym can have multiple transitions.\nAs a result the intersection point of the graph are not computed correctly.\n\nFor example the synonym rule: \"ny, new york city, new york\" is not applied correctly to the query \"ny police\".\nIn this case \"police\" is detected as part of the multi synonyms path and we create the disjunction between:\n \"ny police\", \"new york police\", ...\n\nI pushed a patch that removes this optim (and creates a single transition from each state) in order to ensure that the intersection points of the graph always showed up at the end of the multi synonym paths.\nMatt Weber can you take a look ?",
    "attachments": {
        "LUCENE-7824.patch": "https://issues.apache.org/jira/secure/attachment/12867627/LUCENE-7824.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16008209",
            "date": "2017-05-12T14:22:09+0000",
            "content": "Jim Ferenczi Maybe use a BytesRefHash and maintain a id-to-hash map so we still only have single copy of common term in memory and still have a unique id? ",
            "author": "Matt Weber"
        },
        {
            "id": "comment-16008305",
            "date": "2017-05-12T16:01:47+0000",
            "content": "I don't think we should try to optimize here. The number of terms should be small in a query so I would prefer to keep it simple and just create a new entry for each token like the cached token stream does. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-16008311",
            "date": "2017-05-12T16:08:08+0000",
            "content": "Sure, looks good then! ",
            "author": "Matt Weber"
        },
        {
            "id": "comment-16009821",
            "date": "2017-05-14T19:12:58+0000",
            "content": "Commit 21362a3ba4c1e936416635667f257b36235b00ab in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=21362a3 ]\n\nLUCENE-7824: Fix graph query analysis for multi-word synonym rules with common terms (eg. new york, new york city). ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16009822",
            "date": "2017-05-14T19:13:49+0000",
            "content": "Commit 84b8b5a1d895ba2fa2d7fbad8cd4ea50321e0dd3 in lucene-solr's branch refs/heads/branch_6x from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=84b8b5a ]\n\nLUCENE-7824: Fix graph query analysis for multi-word synonym rules with common terms (eg. new york, new york city). ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16009823",
            "date": "2017-05-14T19:14:44+0000",
            "content": "Commit 55bad6fec3c984d4ef56f94f0f50b9f1b2e6dba3 in lucene-solr's branch refs/heads/branch_6_6 from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=55bad6f ]\n\nLUCENE-7824: Fix graph query analysis for multi-word synonym rules with common terms (eg. new york, new york city). ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16009824",
            "date": "2017-05-14T19:16:23+0000",
            "content": "Thanks Matt Weber ",
            "author": "Jim Ferenczi"
        }
    ]
}