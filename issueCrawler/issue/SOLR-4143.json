{
    "id": "SOLR-4143",
    "title": "setRequestHandler - option to not set qt parameter",
    "details": {
        "affect_versions": "4.0",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "The setRequestHandler method does what I expect in one way - it changes the URL path from /select to the String argument.  It is however doing something that I did not expect, which is setting the qt parameter on the query as well.  Here is the code:\n\nprivate static final String PING_HANDLER = \"/admin/ping\";\nquery.setRequestHandler(PING_HANDLER);\n\nThis is resulting in the following exception being logged in my Solr 3.5.0 servers.  I am not including the whole exception, because this issue is for SolrJ 4, not Solr 3.5, and the 3.5 version is working as it was designed.\n\n\nDec 3, 2012 4:04:01 PM org.apache.solr.common.SolrException log\nSEVERE: org.apache.solr.common.SolrException: Cannot execute the PingRequestHandler recursively\n        at org.apache.solr.handler.PingRequestHandler.handleRequestBody(PingRequestHandler.java:60)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:208)\n\n\n\nI believe it would be useful to include an alternate setRequestHandler method that includes a boolean option deciding whether or not to also set the qt parameter.",
    "attachments": {
        "SOLR-4143.patch": "https://issues.apache.org/jira/secure/attachment/12556493/SOLR-4143.patch",
        "SOLR-4143-alternate.patch": "https://issues.apache.org/jira/secure/attachment/12561351/SOLR-4143-alternate.patch",
        "SOLR-4143-alternate-testsfailing.patch": "https://issues.apache.org/jira/secure/attachment/12561346/SOLR-4143-alternate-testsfailing.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13509341",
            "date": "2012-12-03T23:51:50+0000",
            "content": "Looks like I can't do it the way that I originally planned.  CommonsParams.QT is the only way that the request handler actually gets set on the query, and I cannot think of a good way to handle this change.\n\nA tangent: There are still too many places where qt is required.  Currently it is the only way to set a target request handler in solrconfig.xml definitions.  In order to truly deprecate qt (and by extension, shards.qt), another way would have to be found for setting destination handler paths in solrconfig.xml.\n\nTrunk is probably the only reasonable place to implement anything like this, because 4.x must remain compatible with 3.x.  I probably have to simply live with the exceptions on my 3.5 servers until I can upgrade. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13509375",
            "date": "2012-12-04T00:32:26+0000",
            "content": "I finally made the connection between this exception on the server side and a problem I've been having with obtaining data for my status servlet.  I need to be able to show the status of the ping handler on all my servers.  Is there a workaround I can implement in current 4.x SolrJ that will not include the qt parameter?  I suppose if there's no way in SolrJ, I can use HttpClient directly and construct the URL myself.  I already determine whether I'm talking to a 4.x or 3.x server via /admin/mbeans, if it's 3.x I can just use an alternate routine. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13511518",
            "date": "2012-12-06T17:07:22+0000",
            "content": "I will look into whether I can create a second parameter, something like \"qt.pathonly\" that defaults to false (bikeshedding on the parameter name welcome).  That would keep current behavior intact but allow for the new behavior that my use case requires.  I can then create a second setRequestHandler method with the boolean, and have the current method just call the new method. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13512068",
            "date": "2012-12-06T20:14:44+0000",
            "content": "A patch that resolves this issue and solves my problem.  I ended up just making an alternate parameter \"qt.path\" that replaces qt in situations where you don't want the qt parameter included in the request.  Solr just ignores the qt.path parameter when it receives it.\n\nIf this is not the right way to go about this, feel free to solve it another way.\n\nI did update one test where getters and setters are checked, but a test probably should be written that explicitly tests the alternate parameter.  I wasn't sure what to do there \u2013 setRequestHandler doesn't get a lot of coverage in the existing tests. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13512071",
            "date": "2012-12-06T20:16:20+0000",
            "content": "I think the \"right\" way to go about this would be to have a method that will change the URL path but just leave out the query parameter entirely, but that is a far more extensive change than I feel comfortable attempting. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13527564",
            "date": "2012-12-09T18:32:18+0000",
            "content": "It occurred to me that I could set my new parameter to deprecated, then when someone figures out a proper fix, it can replace this hack.  Thoughts? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13527577",
            "date": "2012-12-09T18:46:35+0000",
            "content": "New patch deprecating the new qt.path parameter because it's a hack.  Patch is against trunk. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533207",
            "date": "2012-12-15T23:36:17+0000",
            "content": "It appears that qt.path has bleed-through problems in Solr that cause problems with the PingRequestHandler - SOLR-4194.  I may need some help with this. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533463",
            "date": "2012-12-16T18:39:10+0000",
            "content": "Further research has shown that the qt.path parameter has bleed-through problems with any kind of distributed search.  This request, to a shard core (one with data that has no shards parameter), works:\n\n/solr/inclive/select?q=a&qt.path=/misc/not/valid\n\nThe same request, when sent to a core with the shards parameter, fails.\n\n/solr/ncmain/select?q=a&qt.path=/misc/not/valid\n\nThe error message in all sections of shards.info is:\n\n\norg.apache.solr.common.SolrException: Server at http://bigindy5.REDACTED.com:8982/solr/inclive returned non ok status:404, message:Not Found\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533465",
            "date": "2012-12-16T18:42:48+0000",
            "content": "I did look into the idea of making it so that when an alternate parameter is used to say \"just change the path, don't include the parameter.\"  The problem with that is that at the point where I'd have to remove the QT parameter from the request, the parameters are in a SolrParams instead of a ModifiableSolrParams, so I can't remove a parameter.  It would probably be pretty easy to change that, but I figure there might be a particular reason the read-only object was chosen.  Can anyone comment on that? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533523",
            "date": "2012-12-16T21:19:14+0000",
            "content": "Udpated patch.  CommonParams.QT_PATHONLY is a string parameter that if set to CommonParams.TRUE, will result in the URL path changing but all evidence of QT and QT_PATHONLY being removed from the final parameters.  There is already precedent for the way I solved this in HttpSolrServer.  This patch fixes the problem I'm having on SOLR-4194 as well. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533528",
            "date": "2012-12-16T21:26:17+0000",
            "content": "The new patch involves a number of formatting changes.  I did a reformat on eclipse, then went back and made the javadoc formats more compact than what the reformat produced.  I can see in the eclipse settings that a formatter profile has been supplied, so I hope this meets apache guidelines. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533544",
            "date": "2012-12-16T22:48:02+0000",
            "content": "New patch.  Minor tweaks to javadocs.  One file in the patch only had formatting changes, so I opted to not update that file.  This patch is against trunk, but will apply to branch_4x cleanly as well. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533546",
            "date": "2012-12-16T22:59:12+0000",
            "content": "All tests in branch_4x/solr are passing.  Some tests in trunk/solr are not passing, but my putty scrollback wasn't large enough to see what went wrong.  Fixed the scrollback, running again to see if it might be related to these changes. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533549",
            "date": "2012-12-16T23:09:16+0000",
            "content": "The trunk test that is failing is -Dtestcase=OverseerTest -Dtests.method=testShardAssignmentBigger, with an OOM error.  Because all tests pass on 4x, I will assume for now that this is not caused by my patch.  Below is the output at the end of the test failure:\n\n\n[junit4:junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=OverseerTest -Dtests.method=testShardAssignmentBigger -Dtests.seed=A7B9F065762AB900 -Dtests.slow=true -Dtests.locale=es_BO -Dtests.timezone=Africa/Addis_Ababa -Dtests.file.encoding=UTF-8\n[junit4:junit4] ERROR   5.79s J1 | OverseerTest.testShardAssignmentBigger <<<\n[junit4:junit4]    > Throwable #1: java.lang.RuntimeException: java.lang.OutOfMemoryError: unable to create new native thread\n[junit4:junit4]    >    at __randomizedtesting.SeedInfo.seed([A7B9F065762AB900:34570E1E9C434663]:0)\n[junit4:junit4]    >    at org.apache.solr.common.cloud.SolrZkClient.<init>(SolrZkClient.java:124)\n[junit4:junit4]    >    at org.apache.solr.common.cloud.SolrZkClient.<init>(SolrZkClient.java:94)\n[junit4:junit4]    >    at org.apache.solr.common.cloud.SolrZkClient.<init>(SolrZkClient.java:85)\n[junit4:junit4]    >    at org.apache.solr.cloud.OverseerTest$MockZKController.<init>(OverseerTest.java:73)\n[junit4:junit4]    >    at org.apache.solr.cloud.OverseerTest.testShardAssignmentBigger(OverseerTest.java:263)\n[junit4:junit4]    >    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n[junit4:junit4]    >    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n[junit4:junit4]    >    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n[junit4:junit4]    >    at java.lang.reflect.Method.invoke(Method.java:601)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1559)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner.access$600(RandomizedRunner.java:79)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:737)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:773)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:787)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:51)\n[junit4:junit4]    >    at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:49)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.ThreadLeakControl.forkTimeoutingTask(ThreadLeakControl.java:782)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.ThreadLeakControl$3.evaluate(ThreadLeakControl.java:442)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(RandomizedRunner.java:746)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner$3.evaluate(RandomizedRunner.java:648)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner$4.evaluate(RandomizedRunner.java:682)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.RandomizedRunner$5.evaluate(RandomizedRunner.java:693)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.SystemPropertiesRestoreRule$1.evaluate(SystemPropertiesRestoreRule.java:53)\n[junit4:junit4]    >    at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:46)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleStoreClassName$1.evaluate(TestRuleStoreClassName.java:42)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.NoShadowingOrOverridesOnMethodsRule$1.evaluate(NoShadowingOrOverridesOnMethodsRule.java:39)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleAssertionsRequired$1.evaluate(TestRuleAssertionsRequired.java:43)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleIgnoreAfterMaxFailures$1.evaluate(TestRuleIgnoreAfterMaxFailures.java:70)\n[junit4:junit4]    >    at org.apache.lucene.util.TestRuleIgnoreTestSuites$1.evaluate(TestRuleIgnoreTestSuites.java:55)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.rules.StatementAdapter.evaluate(StatementAdapter.java:36)\n[junit4:junit4]    >    at com.carrotsearch.randomizedtesting.ThreadLeakControl$StatementRunner.run(ThreadLeakControl.java:358)\n[junit4:junit4]    >    at java.lang.Thread.run(Thread.java:722)\n[junit4:junit4]    > Caused by: java.lang.OutOfMemoryError: unable to create new native thread\n[junit4:junit4]    >    at java.lang.Thread.start0(Native Method)\n[junit4:junit4]    >    at java.lang.Thread.start(Thread.java:691)\n[junit4:junit4]    >    at org.apache.zookeeper.ClientCnxn.start(ClientCnxn.java:402)\n[junit4:junit4]    >    at org.apache.zookeeper.ZooKeeper.<init>(ZooKeeper.java:450)\n[junit4:junit4]    >    at org.apache.zookeeper.ZooKeeper.<init>(ZooKeeper.java:380)\n[junit4:junit4]    >    at org.apache.solr.common.cloud.SolrZooKeeper.<init>(SolrZooKeeper.java:40)\n[junit4:junit4]    >    at org.apache.solr.common.cloud.DefaultConnectionStrategy.connect(DefaultConnectionStrategy.java:37)\n[junit4:junit4]    >    at org.apache.solr.common.cloud.SolrZkClient.<init>(SolrZkClient.java:106)\n[junit4:junit4]    >    ... 44 more\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13533559",
            "date": "2012-12-16T23:33:00+0000",
            "content": "Yeah, it should not be related.\n\nLooks like that test might be creating too many threads - I have not seen it before though. We should probably file a JIRA to look into the tests thread usage. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533604",
            "date": "2012-12-17T02:10:24+0000",
            "content": "I concocted something to add to the unit tests, which turned up something missing in the patch.  I think I have worked out all the kinks, so when I verify that for sure I'll upload a new patch. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533635",
            "date": "2012-12-17T04:13:19+0000",
            "content": "Updated patch.  Added code to MultiCoreExampleTestBase that tests new method.  Test uncovered problems that have now been fixed. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13533658",
            "date": "2012-12-17T05:34:04+0000",
            "content": "IMHO, this is ready for committer review.  If the formatting changes are too extensive, let me know and I'll make a cleaner patch.  I went back to 4x for the latest patch, but I've had no trouble going back and forth between trunk and 4x with any of the patches. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13533972",
            "date": "2012-12-17T15:04:14+0000",
            "content": "I think the \"right\" way to go about this would be to have a method that will change the URL path but just leave out the query parameter entirely\n\nThis seems like the right approach (as opposed to adding more parameters).\nIsn't the fix for this entirely on the client side (i.e. if \"qt\" starts with slash, remove it and set the URL path)? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13534046",
            "date": "2012-12-17T16:28:05+0000",
            "content": "This seems like the right approach (as opposed to adding more parameters). Isn't the fix for this entirely on the client side (i.e. if \"qt\" starts with slash, remove it and set the URL path)?\n\nI do like that idea.  It would be a lot cleaner than my fix, as it wouldn't involve any new methods or parameters.  A quick mental review doesn't find anything wrong with it, but my knowledge may not be deep enough.  If you also don't see any potential fallout, I can make a new patch that would just nuke CommonParams.QT from the final request whenever it starts with slash.\n\nMy current fix is also entirely on the client side.  This latest version of setRequestHandler adds qt.pathonly=true as a parameter to the request if you pass it a true boolean.  If that parameter is present when the request is actually made by implementations of SolrServer, then it is removed, along with qt, after the request path is set.  As far as I can tell, nothing behaves any differently on the server side in the latest patch version.  With earlier versions, the server side did behave differently, which is bad. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13534251",
            "date": "2012-12-17T20:06:20+0000",
            "content": "Alternate patch as discussed (against branch_4x) with a test.  This one no longer does extensive code reformatting.  The changes turned up a problem in BasicDistributedZkTest, where qt was being used for additional parameters:\n\nparams.set(\"qt\", \"/admin/mbeans?key=updateHandler&stats=true\");\n\nI fixed that in the patch by assigning the parameters separately.\n\nThere is still one test failing for sure (actually failing to fail) with this alternate patch, and I'm not sure how to fix it.  I am doing a run where I force this test to pass, to see if there are any other failures.\n\nTest that's failing:\n-Dtestcase=TestRemoteStreaming -Dtests.method=testQtUpdateFails\n\nIs there a way to examine the response to determine that it did not update any documents?  If the qt=/update were to successfully override the /select, would numFound be in the response?  I had the test add echoParams=all and print out the response as a string:\n\n{responseHeader={status=0,QTime=5,handler=org.apache.solr.handler.StandardRequestHandler,params={stream.body=<delete><query>*:*</query></delete>,echoParams=all,q=*:*,echoHandler=true,wt=javabin,version=2}},response={numFound=1,start=0,docs=[SolrDocument{id=1234, range_facet_si=1234, range_facet_l=[1234], range_facet_sl=[1234], timestamp=Tue Dec 18 06:01:24 KOST 2012, multiDefault=[muLti-Default], intDefault=42}]}}\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13534257",
            "date": "2012-12-17T20:15:26+0000",
            "content": "If the alternate patch is fixed and deemed the right way to go, this issue should be renamed:\n\nsetRequestHandler - remove qt parameter from final request when it starts with slash "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13534260",
            "date": "2012-12-17T20:19:16+0000",
            "content": "With TestRemoteStreaming#testQtUpdateFails forced to pass, all solr tests are passing. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13534286",
            "date": "2012-12-17T20:46:55+0000",
            "content": "From what I can tell, a response to an update request will be missing the entire results section.  Looking at QueryResponse.java, when that is missing, getResults() will return null.  I believe I have a fully functioning patch now. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13534542",
            "date": "2012-12-18T02:14:25+0000",
            "content": "Going back to the OverseerTest that I noted was failing before \u2013 I have been having a lot of nearly identical failures in a lot of programs lately, OOMs when trying to create a thread.  One of the programs that is having this failure is a very small servlet (SolrJ-based) that cycles between 15 and 25MB of heap usage, then suddenly it crashes with an OOM, with no changes in access.  The JVM has a 1GB max heap, and jconsole shows no growth pattern in memory usage, then at the crash point it goes down to zero.\n\nI am suspecting that the OOM problem might actually be in the jdk 1.7.0_09 (linux x64) that I was using.  I have upgraded that to 1.7.0_10 to see if it gets better. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13534681",
            "date": "2012-12-18T05:57:15+0000",
            "content": "Patches that are completely up to date with newest revisions of 4x and trunk. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13536851",
            "date": "2012-12-20T07:57:22+0000",
            "content": "Deleted the most recent trunk and 4x alternate patches.  Adding a new alternate patch, updated to latest trunk and including an incomplete addition to CHANGES.txt that will need final tweaking before commit. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13538547",
            "date": "2012-12-21T23:45:40+0000",
            "content": "I'm not totally following everything in the comments here, or the motivation behind everything in the variant patches \u2013 but from what i do understand in the comments (and from skimming the code) the crux of the problem seems to be...\n\n\n\tSolrQuery.setRequestHandler is confusing\n\tit's not entirely obvious to people who see SolrQuery.setRequestHandler that SolrRequest.setPath exists\n\tIn QueryRequest.getPath, if the req params contain a \"qt\" that starts with a slash, it is used as both the request path and is left in the params that get sent to that path.\n\tQueryRequest.getPath let's the \"qt\" param trump any explicit path passed to setPath()\n\n\n\nMy gut inclination is that we should...\n\n\n\tdeprecate SolrQuery.setRequestHandler and advise people to use QueryRequest.setPath or SolrQuery.setParam(CommonParams.QT,String) \u2013 stop treating QT as special at the SolrQuery level of hte API\n\tchange QueryRequest.getPath so that if \"setPath\" has been called (ie: local var \"path\" is non null) it trumps the \"qt\" param. \u2013 update the docs to make this clear.\n\n\n\nUnless i'm missing something, the end result if we do that would be...\n\n\n\texisting code should largely continue to work as before (unless someone was uselessly calling \"QueryRequest.setPath\" while also using \"qt\" with a leading slash)\n\t\n\t\tpeople who specify \"qt=foo\" will get \"/select?qt=foo&...\" as they currently do\n\t\tpeople who specify \"qt=/foo\" will get \"/foo?qt=/foo&...\" as they currently do\n\t\n\t\n\tpeople who want to set the path to /foo and have no \"qt\" param can do the obvious thing: use setPath(\"/foo\") and never specify a \"qt\" param\n\n\n\nThoughts?\n\nOptionally, we could decide that moving forward we don't want people to rely on the client doing anything special if qt starts with a slash, and we can log a warning in QueryRequest.getPath (if path is null and qt starts with a slash) that this behavior is deprecated and will be removed in 5.0 and purge it from trunk.\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13538607",
            "date": "2012-12-22T01:04:08+0000",
            "content": "Hoss: I had one major motivation in filing this.\n\nIf you use setRequestHandler to send a request to the handler named /admin/ping, the qt parameter also goes along for the ride.  This breaks the PingRequestHandler in Solr 3.x.  I will still be using 3.5 for the next few months, so I need my status page to work with both 3.5 and 4.1 servers.  I'm OK with a different solution than I have proposed if it makes this possible while also serving long-term goals.\n\nLesser secondary motivation: It is also unnecessary cruft going along with every request to handlers other than /select.  In the future, I expect to have very few requests using /select.\n\nI had not thought to access QueryRequest directly.  That would probably work, but I'd much rather have a method exposed by SolrQuery. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13538620",
            "date": "2012-12-22T01:19:24+0000",
            "content": "Here's an alternate idea rather than exposing setPath via SolrQuery.  Make it possible to do this:\n\nquery.getRequest().setPath(\"/admin/ping\"); "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13538687",
            "date": "2012-12-22T06:31:14+0000",
            "content": "Hoss, I have been trying to figure out how to use a QueryRequest object to get the required behavior on an unpatched SolrJ, and haven't found the way. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13538732",
            "date": "2012-12-22T11:08:25+0000",
            "content": "Looking into QueryRequest, I found SolrPing.  I figured out how to use that object to get the results I need with no patching at all.  The following method accepts null, true, and false as valid values.  Unlike what I've pasted here, my actual implementation throws an exception in the 'catch' block:\n\n\n  public final SolrPingResponse ping(Boolean enable)\n  {\n    SolrPing ping = new SolrPing();\n    SolrPingResponse response = null;\n    try\n    {\n      if (enable != null)\n      {\n        if (enable)\n        {\n          ping.getParams().set(\"action\", \"enable\");\n        }\n        else\n        {\n          ping.getParams().set(\"action\", \"disable\");\n        }\n      }\n      response = ping.process(_querySolr);\n    }\n    catch (Exception e)\n    {\n      // handle the error!\n    }\n    return response;\n  }\n\n\n\nI still think this feature request is worth doing, but I no longer have a strong vested interest in HOW it's done. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13636748",
            "date": "2013-04-19T19:17:36+0000",
            "content": "I think my opinion about this issue is the same as my previous comment.  My previous patch attempts all had problems, and then I found a way to change my SolrJ code so it works.  If nobody wants to tackle this, I will close the issue.\n\nThis comment is part of an effort to close old issues that I have reported.  Search tag: elyograg2013springclean "
        }
    ]
}