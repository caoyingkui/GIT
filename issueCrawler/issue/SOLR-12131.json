{
    "id": "SOLR-12131",
    "title": "Authorization plugin support for getting user's roles from the outside",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "security"
        ],
        "type": "New Feature",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently the RuleBasedAuthorizationPlugin\u00a0relies on explicitly mapping users to roles. However, when users are authenticated by an external Identity service (e.g. JWT\u00a0as implemented in\u00a0SOLR-12121), that external service keeps track of the user's roles, and will pass that as a \"claim\" in the token (JWT).\n\nIn order\u00a0for Solr to be able to Authorise requests based on those\u00a0roles, the Authorization plugin should be able to\u00a0accept (verified) roles from the request\u00a0instead of explicit mapping.\n\nSuggested approach is to create a new interface VerifiedUserRoles\u00a0and a PrincipalWithUserRoles which implements the interface. The Authorization plugin can\u00a0then pull the roles from request. By piggy-backing on the Principal,\u00a0we have a seamless way to transfer extra external information, and there is also a natural\u00a0relationship:\n\nUser Authentication -> Role validation -> Creating a Principal\n\nI plan to add the interface, the custom Principal class and restructure RuleBasedAuthorizationPlugin in an abstract base class and two implementations: RuleBasedAuthorizationPlugin\u00a0(as today) and a new\u00a0ExternalRoleRuleBasedAuthorizationPlugin.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-22T08:49:53+0000",
            "content": "See pull request 341 for patch. Targeting 7.4. Comments welcome ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16409233"
        },
        {
            "date": "2018-03-23T11:53:02+0000",
            "content": "See https://github.com/cominvent/lucene-solr/blob/3beba9613d903e9b560885d12e058940d3edd4c6/solr/solr-ref-guide/src/rule-based-authorization-plugin.adoc#example-for-externalrolerulebasedauthorizationplugin\u00a0for changed\u00a0RefGuide docs related to this feature. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16411282"
        },
        {
            "date": "2018-04-09T10:41:11+0000",
            "content": "Appreciate feedback on this from Noble Paul,\u00a0Anshum Gupta.\n\nEspecially the means of transferring list of user roles from Auth plugin to Authorization plugin as part of the Principal object. Other ways to transfer the roles could be\n\n\tadd a new\u00a0userRoles member in AuthorizationContext\n\tadd a threadLocal variable on the request thread\n\n\n\nWhat do you think?\n\nI hope to commit this new plugin soon. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16430358"
        },
        {
            "date": "2018-04-16T02:00:24+0000",
            "content": "I've gone through the patch. I'm wondering how exactly is this role information sent. Did you say that the role information is sent as part of the request itself? what are the security implications if you do so?\u00a0 ",
            "author": "Noble Paul",
            "id": "comment-16438917"
        },
        {
            "date": "2018-04-16T11:35:16+0000",
            "content": "I'm wondering how exactly is this role information sent. Did you say that the role information is sent as part of the request itself? what are the security implications if you do so?\u00a0\nThe role info is provided as part of the Principal object, typically by an Authentication plugin which has already validated the user and roles. There is no way for the end user to forge a list of roles as part of the request, since the Principal object is filled in either by the servlet container or the application (in our case JWTAuthPlugin). ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16439313"
        },
        {
            "date": "2018-04-16T11:48:20+0000",
            "content": "OK got it . In that case I would recommend you change the testcase with an AuthenticationPlugin that\u00a0returns\u00a0a PrincipalWithUserRoles.\u00a0\n\nand change the following documentation as well\n\nExternalRoleRuleBasedAuthorizationPlugin: The role-to-user mappings are managed externally. This plugin expects the user\u2019s roles to be present on the Principal object which is part of the request.\n\n\n\nto \n\nExternalRoleRuleBasedAuthorizationPlugin: The role-to-user mappings are managed externally. This plugin expects the AuthenticationPlugin to provide a Principal that has the roles information as well\n\n\n\nI can't figure out why the PrincipalWithUserRoles implement Serializable\n\nrest all looks fine. \n+1 from my side\n ",
            "author": "Noble Paul",
            "id": "comment-16439330"
        },
        {
            "date": "2018-08-09T01:01:27+0000",
            "content": "Move issue from deprecated 'In  Progress' back to 'Open' ",
            "author": "Gavin",
            "id": "comment-16574111"
        }
    ]
}