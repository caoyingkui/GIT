{
    "id": "SOLR-12946",
    "title": "DistribCursorPagingTest non-reproducible failures in comparing facet counts",
    "details": {
        "type": "Test",
        "status": "Resolved",
        "labels": "",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "components": [],
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None"
    },
    "description": "Anecdotal reports of failures from DistribCursorPagingTest long the lines of..\n\n\nreproduce with: ant test  -Dtestcase=DistribCursorPagingTest -Dtests.method=test -Dtests.seed=87B400F0180614A3 -Dtests.slow=true -Dtests.badapples=true -Dtests.locale=sq-AL -Dtests.timezone=Etc/GMT+9 -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n23:47:46    [junit4] FAILURE 19.4s J7 | DistribCursorPagingTest.test <<<\n23:47:46    [junit4]    > Throwable #1: junit.framework.AssertionFailedError: .facet_counts.facet_fields.str.x:0!=null\n23:47:46    [junit4]    > \tat __randomizedtesting.SeedInfo.seed([87B400F0180614A3:FE03F2AB6FA795B]:0)\n23:47:46    [junit4]    > \tat junit.framework.Assert.fail(Assert.java:50)\n23:47:46    [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.compareSolrResponses(BaseDistributedSearchTestCase.java:985)\n23:47:46    [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.compareResponses(BaseDistributedSearchTestCase.java:1012)\n23:47:46    [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:666)\n23:47:46    [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase.query(BaseDistributedSearchTestCase.java:629)\n23:47:46    [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.doSimpleTest(DistribCursorPagingTest.java:258)\n23:47:46    [junit4]    > \tat org.apache.solr.cloud.DistribCursorPagingTest.test(DistribCursorPagingTest.java:90)\n23:47:46    [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:1066)\n23:47:46    [junit4]    > \tat org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:1040)\n23:47:46    [junit4]    > \tat java.lang.Thread.run(Thread.java:748)",
    "attachments": {
        "risdenk-nuc-20181031-build-31.txt.gz": "https://issues.apache.org/jira/secure/attachment/12946419/risdenk-nuc-20181031-build-31.txt.gz",
        "risdenk-nuc-20181031-build-11.txt.gz": "https://issues.apache.org/jira/secure/attachment/12946418/risdenk-nuc-20181031-build-11.txt.gz"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16670437",
            "content": "i can't get this failure to reproduce, and the specific assertion relates to facet counts being different when comparing the single node response vs a cloud node response ... which would have been after the actual document results were already compared and validated \u2013 so some/all of the data returned in the 2 requests is in fact in sync. \n\nMark Miller & Kevin Risden ... you both mentioned seeing this failure, full logs would in fact be helpful. ",
            "author": "Hoss Man",
            "date": "2018-10-31T17:40:32+0000"
        },
        {
            "id": "comment-16670457",
            "content": "Hoss Man - Attached full logs from two test failures. For reference here is some build information:\n\n\tIntel Nuc 8th gen i5 32 GB RAM 512GB SSD\n\tBuilds on docker clean workspace each time\n\tNo other CPU/memory/disk intensive jobs at the same time\n\tbuild-11 had jvms=8\n\tbuild-31 had jvms=4\n\n ",
            "author": "Kevin Risden",
            "date": "2018-10-31T17:48:30+0000"
        },
        {
            "id": "comment-16670475",
            "content": "build-11 and build-31 were both from https://github.com/apache/lucene-solr/pull/486/commits/0934d88f2cb5eee10ee319d94332fdc1300939a4\u00a0at that specific commit. ",
            "author": "Kevin Risden",
            "date": "2018-10-31T18:09:23+0000"
        },
        {
            "id": "comment-16670489",
            "content": "Thanks kevin ... i was comparing your failure logs with logs from a success expecting to see a delay in a commit or searcher open to explain how the control collection might be out of sync with the distrib collection, but i didn't find anything \u2013 however the full log is more verbose about the missmatch in the responses...\n\n\n   [junit4]   2> 88972 ERROR (TEST-DistribCursorPagingTest.test-seed#[87B400F0180614A3]) [    ] o.a.s.BaseDistributedSearchTestCase Mismatched responses:\n   [junit4]   2> {responseHeader={zkConnected=true,status=0,QTime=31},response={numFound=8,start=0,docs=[SolrDocument{id=7}, SolrDocument{id=0}, SolrDocument{id=3}]},nextCursorMark=AoIGAAAAACEz,facet_counts={facet_queries={},facet_fields={str={a=4,c=3,b=1,x=0,z=0}},facet_ranges={},facet_intervals={},facet_heatmaps={}}}\n   [junit4]   2> {responseHeader={zkConnected=true,status=0,QTime=10},response={numFound=8,start=0,docs=[SolrDocument{id=7}, SolrDocument{id=0}, SolrDocument{id=3}]},nextCursorMark=AoIGAAAAACEz,facet_counts={facet_queries={},facet_fields={str={a=4,c=3,b=1}},facet_ranges={},facet_intervals={},facet_heatmaps={}}}\n\n\n\n...which helped me realize what i hadn't noticed before: the mismatched facet values from the failure are specifically for \"x\" (null != 0) although it would clearly fail for \"z\" as well once it got to it .. but those values aren't even expected at that part of the test \u2013 all docs with those values have been deleted.\n\n\n\ni'd bet money that where the discrepency/failure is coming from is this...\n\n\n\tthe docs with values 'x' and 'z' get deleted\n\tvariability exists in what happens in the background before the next commit/newSearcher...\n\t\n\t\ton a \"fast\" machine (w/o thread contention), one of 2 things happens depending on the randomized merge policy in effect for the seed:\n\t\t\n\t\t\t\"1\" a background merge happens on both collections\n\t\t\t\"2\" a background merge does not happen on either collection\n\t\t\n\t\t\n\t\ton a \"slow\" machine (w/thread contention) #1 and #2 may have happened inconssintently and we get...\n\t\t\n\t\t\t\"3\" a background merge happens on the control collection, but not on a replica o the distrib collection\n\t\t\n\t\t\n\t\n\t\n\tboth collections get the commit command from the test thread and open a new searcher\n\tthe facet request is issued\n\t\n\t\tin case #1, or #2, the results are consistent between the control collection and the distrib collection \u2013 the test does not itself verify all the facet buckets returned\n\t\tin case #3 the test framework detects a mismatch between the responses, because one collection still sees that the \"x\" and \"z\" terms exist in the index \u2013 they haven't been merged away \u2013 and returns \"0\" counts for them.\n\t\n\t\n\n\n\n\n\nI'm not sure if there is a general purpose lesson/fix hat can be made here regarding the way background merges can happen in tests and what kinds of discrepencies in behavior it can cause, but for this particular test it can be tightened up by using `facet.mincount=1` since that doesn't undermine the intent of the test.\n\nI'll look into that and try to commit asap (but first i want to see if i can semi-reliably reproduce locally while hammering my machine with load) ",
            "author": "Hoss Man",
            "date": "2018-10-31T18:21:02+0000"
        },
        {
            "id": "comment-16670491",
            "content": "I'm not sure if there is a general purpose lesson/fix hat can be made here regarding the way background merges can happen in tests and what kinds of discrepencies in behavior it can cause, ...\n\nTo be clear: i'm also just speculating on all of this, but the probosed change to the test is a good \"tightening\" of the expectations anyway, even if i'm wrong about the root cause of the discrepency ",
            "author": "Hoss Man",
            "date": "2018-10-31T18:22:48+0000"
        },
        {
            "id": "comment-16670674",
            "content": "I'll try that change in a bit as well. ",
            "author": "Mark Miller",
            "date": "2018-10-31T20:16:13+0000"
        },
        {
            "id": "comment-16670855",
            "content": "Commit 50e10d327428ea05df493e6bcd62aaeccb7ec0b9 in lucene-solr's branch refs/heads/branch_7x from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=50e10d3 ]\n\nSOLR-12946: tighten up request/expectations in test\n\nThis should prevent some non-reproducible failures where (i think) the problem was inconsistnet background merges between collections being compared, resulting in facet counts (of 0) for terms that weren't in equivilent (merged) indexes.\n\nsince the purpose of the test has nothing to do with mincount, force facet.mincount=0 and be more exact about how many terms we expect (in case the root problem lies somewhere else, be more assertive about finding it)\n\n(cherry picked from commit 05f72a77efb13517885618597f14cf0d76bd31f7) ",
            "author": "ASF subversion and git services",
            "date": "2018-10-31T22:36:33+0000"
        },
        {
            "id": "comment-16670856",
            "content": "Commit 05f72a77efb13517885618597f14cf0d76bd31f7 in lucene-solr's branch refs/heads/master from Chris Hostetter\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=05f72a77 ]\n\nSOLR-12946: tighten up request/expectations in test\n\nThis should prevent some non-reproducible failures where (i think) the problem was inconsistnet background merges between collections being compared, resulting in facet counts (of 0) for terms that weren't in equivilent (merged) indexes.\n\nsince the purpose of the test has nothing to do with mincount, force facet.mincount=0 and be more exact about how many terms we expect (in case the root problem lies somewhere else, be more assertive about finding it) ",
            "author": "ASF subversion and git services",
            "date": "2018-10-31T22:36:35+0000"
        },
        {
            "id": "comment-16670858",
            "content": "i never did manage to reproduce the failure, but i went ahead and pushed the fix since it's a good idea anyway.\n\nif anyone finds any similar/different failures in this test, please attach logs & re-open. ",
            "author": "Hoss Man",
            "date": "2018-10-31T22:38:47+0000"
        },
        {
            "id": "comment-16672414",
            "content": "I just saw it again on my test PR, I think I can reproduce it pretty easily if I wanted - I've only just sucked up your change though, so I'll confirm if it's gone very soon. ",
            "author": "Mark Miller",
            "date": "2018-11-02T00:49:42+0000"
        }
    ]
}