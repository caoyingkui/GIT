{
    "id": "SOLR-3741",
    "title": "ExtendedDismaxQParser (edismax) does not obey q.op for queries with operators",
    "details": {
        "affect_versions": "3.6.1,                                            4.0-BETA",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "For a query such as \"cat dog OR (fox bat fish)\" with &q.op=AND, the default query operator remains \"OR\" for the entire query. This is not documented behavior and rather surprising.\n\nThis happens because edismax only simulates the default operator by forcing \"mm\" (minMatch) to 100% for the top-level BooleanQuery alone, but only if there are NO explicit operators present.\n\nOne solution is for edismax to always set the default query operator when calling the classic Lucene query parser, or at least when q.op=AND.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jack Krupansky",
            "id": "comment-13437514",
            "date": "2012-08-19T14:13:49+0000",
            "content": "There is in fact a use case where q.op should be ignored, specifically when the \"+\" operator is present at the top-level query. In that case, the user is clearly indicating that they want \"AND\"/\"MUST\" for one or more terms and it is easy to see that the user appears to believe that terms without an operator are not to be treated the same as terms with the explicit \"+\". So, terms without an explicit operator should implicitly be treated as \"OR\"/\"SHOULD\".\n\nOne could suggest that the presence of the \"-\" operator should invoke the same treatment, but I assert that: 1) there is nothing about the use of a negative term that has implications about any preference for the alternatives for positive terms, and 2) it is too easy for a user to take a working query without operators and simply add one or more negative terms to try to constrain the query without intending to otherwise change the semantics of the query.\n\nSo, the rule(s) I propose are:\n\n1. If one or more explicit \"+\" operators are present at the top-level query, then \"OR\"/\"SHOULD\" becomes the default operator, overriding q.op and the normal default operator given in the code and the request handler.\n2. If no explicit \"+\" operator is present at the top-level query, q.op is used as the default operator.\n3. q.op will be passed to the classic Lucene query parser for parsing nested and sub-queries and handling of split terms.\n4. MinMatch (\"mm\") should be applied if either an explicit \"+\" operator is present or q.op is \"OR\" or is q.op is not present and the code default for q.op is \"OR\". "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-13438208",
            "date": "2012-08-20T21:08:08+0000",
            "content": "Please post a unit test matrix demonstrating these rules. Not the code, just a table/spreadsheet of inputs, parse trees, and outputs. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451189",
            "date": "2012-09-08T00:37:32+0000",
            "content": "removing fixVersion=4.0 since there is no evidence that anyone is currently working on this issue.  (this can certainly be revisited if volunteers step forward)\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-16430018",
            "date": "2018-04-09T04:38:02+0000",
            "content": "Can this be closed? There's been a lot of changes since this was opened. "
        }
    ]
}