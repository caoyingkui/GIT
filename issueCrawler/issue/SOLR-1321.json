{
    "id": "SOLR-1321",
    "title": "Support for efficient leading wildcards search",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "Schema and Analysis"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This patch is an implementation of the \"reversed tokens\" strategy for efficient leading wildcards queries.\n\nReversedWildcardsTokenFilter reverses tokens and returns both the original token (optional) and the reversed token (with positionIncrement == 0). Reversed tokens are prepended with a marker character to avoid collisions between legitimate tokens and the reversed tokens - e.g. \"DNA\" would become \"and\", thus colliding with the regular term \"and\", but with the marker character it becomes \"\\u0001and\".\n\nThis TokenFilter can be added to the analyzer chain that it used during indexing.\n\nSolrQueryParser has been modified to detect the presence of such fields in the current schema, and treat them in a special way. First, SolrQueryParser examines the schema and collects a map of fields where these reversed tokens are indexed. If there is at least one such field, it also sets QueryParser.setAllowLeadingWildcards(true). When building a wildcard query (in getWildcardQuery) the term text may be optionally reversed to put wildcards further along the term text. This happens when the field uses the reversing filter during indexing (as detected above), AND if the wildcard characters are either at 0-th or 1-st position in the term. Otherwise the term text is processed as before, i.e. turned into a regular wildcard query.\n\nUnit tests are provided to test the TokenFilter and the query parsing.",
    "attachments": {
        "SOLR-1321.patch": "https://issues.apache.org/jira/secure/attachment/12419178/SOLR-1321.patch",
        "wildcards-3.patch": "https://issues.apache.org/jira/secure/attachment/12419095/wildcards-3.patch",
        "wildcards.patch": "https://issues.apache.org/jira/secure/attachment/12415125/wildcards.patch",
        "wildcards-2.patch": "https://issues.apache.org/jira/secure/attachment/12415416/wildcards-2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12737549",
            "date": "2009-07-31T15:05:23+0000",
            "content": "Patch containing the new filter, example schema and unit tests. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12737592",
            "date": "2009-07-31T16:46:50+0000",
            "content": "andrej, i really like this feature.\n\none question though, the way you have overridden getWildcardQuery() i am not certain how I can have both this feature and say, override getWildCardQuery to produce an AutomatonWildcardQuery: LUCENE-1606\nwhat I want is both  , because AutomatonWildCardQuery cannot help at all with leading *, (it can with leading ? for example).\n\nbut don't let this really get in your way, just a side note. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12737596",
            "date": "2009-07-31T16:56:32+0000",
            "content": "If you follow the logic in getWildcardQuery, a field has to meet specific requirements for this reversal to occur - namely, it needs to declare in its indexing analysis chain that it uses ReversedWildcardFilter. This filter does very special kind of reversal (prepending the marker) so it's unlikely that anyone would use it for other purpose than to explicitly support leading wildcards. So for now I'd say that users should consciously choose between this method of supporting leading wildcards and the automaton wildcard query. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12737601",
            "date": "2009-07-31T17:10:13+0000",
            "content": "andrzej i see what you are saying. I think its a great feature the way it is!\n\n\nIn the future I will take a look at finding a way to do both, this way complex cases like *abcde?f get reversed by this feature into \\u0001f?edcba*, \nbut then implemented with automaton so that it doesn't have to enumerate all tokens that start with \\u0001f. \n\n\n\nthis is bad example hope you see what i mean.  the biggest challenge would be preventing suboptimal cases, like reversing g?abcde* into \\u2001*edcba?g, (at least I think).\nthe first is actually more efficient, I think regardless of the wildcard impl.\n\nI wonder if in your patch you could have an additional check, if something is in the 1st position but the last character is also a wildcard, not to reverse it?\nin the example above even with the default lucene wildcard query, at least it would only enumerate the tokens starting with g, so its better not to reverse it.\n\nif its in the 0th position it doesnt matter if you reverse it or not but I think that one case can be optimized.\n\nThanks,\nRobert "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12737763",
            "date": "2009-07-31T23:06:41+0000",
            "content": "I think your example of g?abcde* could be handled if we assigned different \"costs\" of expanding ? and *, the latter being more costly. There could be also a rule that prevents the reversing if a trailing \"costly\" wildcard is used.\n\nThis quickly gets more and more complicated, so ultimately we may want to put this logic elsewhere, in a class that knows the best how to make such decisions (ReversedWildcardFilter ?). I'll try to modify the patch in this direction. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12738343",
            "date": "2009-08-03T13:48:47+0000",
            "content": "Andrzej, with the costs logic, you wouldn't have to limit the reversing to just 0th or 1st position wildcards either, right?\n\nfor example if a term was 10 characters long with a wildcard in the 3rd position, reversing it is helpful. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12738347",
            "date": "2009-08-03T13:59:12+0000",
            "content": "Exactly, that's the reason to put this logic in an isolated well-defined place, with some configurable knobs. One parameter would be the max. position of the leading wildcard, another would be relative cost of ? and *, or whether we allow wildcards at any positions except the 0-th (pure suffix search). "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12738352",
            "date": "2009-08-03T14:08:49+0000",
            "content": "sounds perfect, great idea. Thanks! "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12738562",
            "date": "2009-08-03T20:27:26+0000",
            "content": "Updated patch with more configurable knobs. See javadoc of ReversedWildcardsFilterFactory and unit tests. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12738626",
            "date": "2009-08-03T21:48:34+0000",
            "content": "Andrzej, did you accidentally leave out ReversedWildcardsFilterFactory.java in the patch?  "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12738634",
            "date": "2009-08-03T22:07:09+0000",
            "content": "Previous patch mistakenly included other stuff instead of ReversedWildcardFilterFactory. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12738730",
            "date": "2009-08-04T01:15:38+0000",
            "content": "andrzej, thanks, I like this design. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12742430",
            "date": "2009-08-12T16:12:52+0000",
            "content": "Since this is a new filter, we might as well use the new incrementToken capability and reusable stuff as well as avoiding other deprecated analysis calls. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12742434",
            "date": "2009-08-12T16:23:13+0000",
            "content": "Also no need to do the string round trip in the reverse method, right?  See the ReverseStringFilter in Lucene contrib/analysis.  Perhaps we should just patch that and add some config options to it?  Then all Solr would need is the QP change and the FilterFactory change, no? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12742451",
            "date": "2009-08-12T17:02:09+0000",
            "content": "i do have one comment on the reverse() present here: it is not unicode-safe (it will create unpaired surrogates).\nWe need to think thru the implications of this, fyi i have a patch for lucene's ReverseStringFilter (similar problem) sitting in LUCENE-1689 "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12742559",
            "date": "2009-08-12T20:27:04+0000",
            "content": "Since this is a new filter, we might as well use the new incrementToken capability and reusable stuff as well as avoiding other deprecated analysis calls.\n\nIndeed, I'll fix this.\n\nAlso no need to do the string round trip in the reverse method, right? See the ReverseStringFilter in Lucene contrib/analysis.\n\nRoundtrip ... you mean the allocation of new char[] buffer, or conversion to String? I assume the latter - the former is needed because we add the marker char in front. Yeah, I can return char[] and convert to String only in QP.\n\nPerhaps we should just patch that and add some config options to it? Then all Solr would need is the QP change and the FilterFactory change, no?\n\nHmm. After adding the marker-related stuff the code in ReverseStringFilter won't be so nice as it is now. I'd keep in mind the specific use case of this filter ... "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12742568",
            "date": "2009-08-12T20:49:48+0000",
            "content": "After adding the marker-related stuff the code in ReverseStringFilter won't be so nice as it is now\n\nOf course, it would be optional.\n\nYeah, I can return char[] and convert to String only in QP\n\nRight, no need to materialize a String if we don't need to.  FWIW, it also seemed like the reverse code in ReverseStringFilter was faster than the patch, but I didn't compare quantitatively. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12742573",
            "date": "2009-08-12T21:01:59+0000",
            "content": "FWIW, it also seemed like the reverse code in ReverseStringFilter was faster than the patch, but I didn't compare quantitatively.\n\nIt better be - it can reverse in-place, while we have to allocate a new buffer because of the marker char in front. That's what I meant by messy code - we would need both the in-place and the out-of-place method depending on an option. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12742576",
            "date": "2009-08-12T21:15:58+0000",
            "content": "Use resizeTermBuffer() first... and then do it in place.  The buffer may already be big enough and so resizeTermBuffer would just be a check. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12742611",
            "date": "2009-08-12T22:18:56+0000",
            "content": "btw, i found apache harmony has a nice impl of in-place reversing that is unicode safe (AbstractStringBuilder.reverse0)\nit will treat surrogate pairs as one character for the op just like java 5 StringBuilder.reverse()\n\nsince lucene wildcard does not properly handle these, it would probably be bad to be \"unicode correct\" at this point.\nbut perhaps a TODO or comment is desirable, as I hope to improve this situation in the future! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12747950",
            "date": "2009-08-26T14:04:38+0000",
            "content": "So, now that this is in Lucene, we likely just need to update the Factory in Solr, right?  As well as the Lucene libs, if they haven't been already. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12748067",
            "date": "2009-08-26T18:29:02+0000",
            "content": "I'll update the patch, assuming the presence of the updated filter in Lucene, but I'd rather leave updating the libs to someone more intimate with Solr internals ... "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12748941",
            "date": "2009-08-28T18:53:43+0000",
            "content": "I can take care of the libs. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12753295",
            "date": "2009-09-09T22:11:00+0000",
            "content": "Updated patch that uses new TokenAttribute API and uses (as much as possible) the new ReverseStringFilter. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12753631",
            "date": "2009-09-10T14:18:35+0000",
            "content": "Added ASL headers.\n\nI don't understand, in the Test, the comment:\n\n// XXX note: this should be false, but for now we return true for any field,\n    // XXX if at least one field uses the reversing\n    assertTrue(parserThree.getAllowLeadingWildcard());\n\nSeems like this needs to be fixed before committing. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12753648",
            "date": "2009-09-10T15:00:10+0000",
            "content": "This comment refers to the limitation of Lucene's QueryParser - there is only a single flag there to decide whether it accepts leading wildcards or not, regardless of field. Consequently, after checking the schema in SolrQueryParser we turn on this flag if any field type supports leading wildcards. The end effect of this is that parsers for any field, which are created with IndexSchema.getSolrQueryParser(), will return true if any field type supports leading wildcards, not neccessarily the one for which the parser was created..\n\nI don't see a way to fix this. I can clarify the comment, though, so that it's clear that this is a limitation in Lucene QueryParser. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12753655",
            "date": "2009-09-10T15:11:46+0000",
            "content": "I've always been in favor of just allowing leading wildcards for all fields, but I think others disagreed on that point. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12753705",
            "date": "2009-09-10T16:56:57+0000",
            "content": "OK, Andrzej.  That makes sense.  We may want to push down into Lucene eventually.  The only outcome of this is that people who are expecting \"efficient\" wildcard searches on fields that don't use the Reverse stuff would see slower perf.  \n\nI feel comfortable committing this patch now. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12753706",
            "date": "2009-09-10T17:05:15+0000",
            "content": "one comment, i think you should be able to use char[] versus String here pretty easily. it might have some impact on indexing speed.\n\nbut this could be a later improvement. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12753870",
            "date": "2009-09-10T22:41:09+0000",
            "content": "Hmm, anyone else having troubles with the other tests?  I don't think this is handling dynamic fields properly. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12753872",
            "date": "2009-09-10T22:42:37+0000",
            "content": "Notwithstanding the fact that other tests that use the QP fail with this patch (and the old one), here's a patch that uses char[] instead of Strings. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12753879",
            "date": "2009-09-10T22:57:22+0000",
            "content": "Hmm, anyone else having troubles with the other tests?\n\nyes, I can confirm this... btw shouldnt the qp be looking at .getQueryAnalyzer() versus .getAnalyzer()?\n\nnevermind, since you dont want to reverse at query time...  "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12753902",
            "date": "2009-09-10T23:45:06+0000",
            "content": "Problem seems to stem from : queries. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12753917",
            "date": "2009-09-11T00:25:13+0000",
            "content": "btw shouldnt the qp be looking at .getQueryAnalyzer() versus .getAnalyzer()?\n\nThe QueryParser should be using the query analyzer in general, but in this case, it's looking at the index analyzer to see if it indexed reverse tokens. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12753983",
            "date": "2009-09-11T04:17:25+0000",
            "content": "grant's patch, but with the logic to handle matchalldocs "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12754124",
            "date": "2009-09-11T13:38:05+0000",
            "content": "Only annoying thing about this solution is now that * check gets done twice, once in the SolrQueryParser method and once in the QueryParser method. \n\nAlso, why not just && the two clauses (I realize it is a cut and paste from the parent).\n\nI'll fix and commit. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12754129",
            "date": "2009-09-11T13:50:38+0000",
            "content": "Committed revision 813830. "
        },
        {
            "author": "Ravi Kiran Bhaskar",
            "id": "comment-12758868",
            "date": "2009-09-23T20:33:33+0000",
            "content": "While using ReversedWildcardFilterFactory with KeywordTokenizerFactory I get the following error for the fieldType\n\n    <fieldType name=\"keywordText\" class=\"solr.TextField\" sortMissingLast=\"true\" omitNorms=\"true\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">       \n        <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n        <filter class=\"solr.TrimFilterFactory\" />\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" enablePositionIncrements=\"true\"/>\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\" />                          \n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>       \n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.KeywordTokenizerFactory\"/>\n        <filter class=\"solr.TrimFilterFactory\" />\n        <filter class=\"solr.StopFilterFactory\" ignoreCase=\"true\" words=\"stopwords.txt\" enablePositionIncrements=\"true\" />       \n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\" />                         \n        <filter class=\"solr.RemoveDuplicatesTokenFilterFactory\"/>\n      </analyzer>\n    </fieldType>\n\nERROR\n--------\nHTTP Status 500 - org.apache.solr.analysis.WhitespaceTokenizerFactory.create(Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer; java.lang.AbstractMethodError: org.apache.solr.analysis.WhitespaceTokenizerFactory.create(Ljava/io/Reader;)Lorg/apache/lucene/analysis/Tokenizer; at org.apache.solr.analysis.TokenizerChain.getStream(TokenizerChain.java:69) at org.apache.solr.analysis.SolrAnalyzer.reusableTokenStream(SolrAnalyzer.java:74) at org.apache.solr.schema.IndexSchema$SolrIndexAnalyzer.reusableTokenStream(IndexSchema.java:364) at org.apache.lucene.queryParser.QueryParser.getFieldQuery(QueryParser.java:543) at org.apache.solr.search.SolrQueryParser.getFieldQuery(SolrQueryParser.java:153) at org.apache.solr.util.SolrPluginUtils$DisjunctionMaxQueryParser.getFieldQuery(SolrPluginUtils.java:807) at org.apache.solr.util.SolrPluginUtils$DisjunctionMaxQueryParser.getFieldQuery(SolrPluginUtils.java:794) at org.apache.lucene.queryParser.QueryParser.Term(QueryParser.java:1425) at org.apache.lucene.queryParser.QueryParser.Clause(QueryParser.java:1313) at org.apache.lucene.queryParser.QueryParser.Query(QueryParser.java:1241) at org.apache.lucene.queryParser.QueryParser.TopLevelQuery(QueryParser.java:1230) at org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:176) at org.apache.solr.search.DisMaxQParser.getUserQuery(DisMaxQParser.java:195) at org.apache.solr.search.DisMaxQParser.addMainQuery(DisMaxQParser.java:158) at org.apache.solr.search.DisMaxQParser.parse(DisMaxQParser.java:74) at org.apache.solr.search.QParser.getQuery(QParser.java:131) at org.apache.solr.handler.component.QueryComponent.prepare(QueryComponent.java:89) at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:174) at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:131) at org.apache.solr.core.SolrCore.execute(SolrCore.java:1313) at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:338) at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:241) at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230) at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:198) at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:297) at org.apache.catalina.core.StandardContextValve.invokeInternal(StandardContextValve.java:271) at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:202) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:632) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:577) at com.sun.enterprise.web.WebPipeline.invoke(WebPipeline.java:94) at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:206) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:632) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:577) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:571) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1080) at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:150) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:632) at org.apache.catalina.core.StandardPipeline.doInvoke(StandardPipeline.java:577) at org.apache.catalina.core.StandardPipeline.invoke(StandardPipeline.java:571) at org.apache.catalina.core.ContainerBase.invoke(ContainerBase.java:1080) at org.apache.coyote.tomcat5.CoyoteAdapter.service(CoyoteAdapter.java:272) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.invokeAdapter(DefaultProcessorTask.java:637) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.doProcess(DefaultProcessorTask.java:568) at com.sun.enterprise.web.connector.grizzly.DefaultProcessorTask.process(DefaultProcessorTask.java:813) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.executeProcessorTask(DefaultReadTask.java:341) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.doTask(DefaultReadTask.java:263) at com.sun.enterprise.web.connector.grizzly.DefaultReadTask.doTask(DefaultReadTask.java:214) at com.sun.enterprise.web.connector.grizzly.TaskBase.run(TaskBase.java:265) at com.sun.enterprise.web.connector.grizzly.ssl.SSLWorkerThread.run(SSLWorkerThread.java:106) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12758873",
            "date": "2009-09-23T20:46:52+0000",
            "content": "Works for me in the latest trunk - perhaps you have some old class files laying around somewhere? That's normally the case with something like AbstractMethodError. "
        },
        {
            "author": "Ravi Kiran Bhaskar",
            "id": "comment-12759187",
            "date": "2009-09-24T17:28:18+0000",
            "content": "Thanks Yonik for the very prompt reply. Yes, you were right.  The lucene related jars had a 'dev' suffix previously and now the 'dev' was removed and hence my eclipse had jar resolution problems while building. I tested it and works great as always. BTW you folks did a wonderful job with solr  "
        },
        {
            "author": "Ravi Kiran Bhaskar",
            "id": "comment-12759218",
            "date": "2009-09-24T19:10:27+0000",
            "content": "Is there a way to get only the actual instead of both actual and reversed texts (I see that we can just get the reserved without the actual. Is the other way round possible ?). \n\nThe reason being, I tried to facet the field and it returned be both as follows\n\n<int name=\"#1;ssergnoC\">78</int>\n<int name=\"Congress\">78</int>\n<int name=\"#1;.W egroeG ,hsuB\">28</int>\n<int name=\"Bush, George W.\">28</int>\n<int name=\"#1;detinU\">263</int>\n<int name=\"United\">263</int> "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775482",
            "date": "2009-11-10T15:50:36+0000",
            "content": "Bulk close Solr 1.4 issues "
        }
    ]
}