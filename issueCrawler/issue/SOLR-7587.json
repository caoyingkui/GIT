{
    "id": "SOLR-7587",
    "title": "TestSpellCheckResponse stalled and never timed out -- possible VersionBucket bug? (5.2 branch)",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.2",
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Blocker"
    },
    "description": "On the 5.2 branch (r1681250), I encountered a solrj test stalled for over 110 minutes before i finally killed it...\n\n\n\n   [junit4] Suite: org.apache.solr.common.util.TestRetryUtil\n   [junit4] Completed [55/60] on J1 in 1.04s, 1 test\n   [junit4] \n   [junit4] HEARTBEAT J0 PID(12147@tray): 2015-05-22T18:14:56, stalled for  121s at: TestSpellCheckResponse.testSpellCheckResponse\n   [junit4] HEARTBEAT J0 PID(12147@tray): 2015-05-22T18:15:56, stalled for  181s at: TestSpellCheckResponse.testSpellCheckResponse\n...\n   [junit4] HEARTBEAT J0 PID(12147@tray): 2015-05-22T20:00:56, stalled for 6481s at: TestSpellCheckResponse.testSpellCheckResponse\n   [junit4] HEARTBEAT J0 PID(12147@tray): 2015-05-22T20:01:56, stalled for 6541s at: TestSpellCheckResponse.testSpellCheckResponse\n   [junit4] HEARTBEAT J0 PID(12147@tray): 2015-05-22T20:02:56, stalled for 6601s at: TestSpellCheckResponse.testSpellCheckResponse\n\n\n\n\nI'll attach some jstack output as well as all the temp files from the J0 runner.",
    "attachments": {
        "jstack.1.txt": "https://issues.apache.org/jira/secure/attachment/12734983/jstack.1.txt",
        "jstack.2.txt": "https://issues.apache.org/jira/secure/attachment/12734982/jstack.2.txt",
        "junit4-J0-20150522_181244_599.spill": "https://issues.apache.org/jira/secure/attachment/12734980/junit4-J0-20150522_181244_599.spill",
        "junit4-J0-20150522_181244_599.events": "https://issues.apache.org/jira/secure/attachment/12734981/junit4-J0-20150522_181244_599.events",
        "SOLR-7587.patch": "https://issues.apache.org/jira/secure/attachment/12735075/SOLR-7587.patch",
        "SOLR-7587_minor_refactor.patch": "https://issues.apache.org/jira/secure/attachment/12735379/SOLR-7587_minor_refactor.patch",
        "junit4-J0-20150522_181244_599.suites": "https://issues.apache.org/jira/secure/attachment/12734979/junit4-J0-20150522_181244_599.suites"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-05-23T03:22:41+0000",
            "author": "Hoss Man",
            "content": "2 thread dumps, and the non-empty J0 files from solr/build/solr-solrj/test/temp/\n\nMost interesting looking thread...\n\n\n\"TEST-TestSpellCheckResponse.testSpellCheckResponse-seed#[FA0A9DF72EDC5BCD]\" prio=10 tid=0x00007f10843da000 nid=0x2ff9 waiting on condition [0x00007f10c10f1000]\n   java.lang.Thread.State: WAITING (parking)\n        at sun.misc.Unsafe.park(Native Method)\n        - parking to wait for  <0x00000000f7f383e0> (a java.util.concurrent.locks.ReentrantReadWriteLock$FairSync)\n        at java.util.concurrent.locks.LockSupport.park(LockSupport.java:186)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:834)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireQueued(AbstractQueuedSynchronizer.java:867)\n        at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquire(AbstractQueuedSynchronizer.java:1197)\n        at java.util.concurrent.locks.ReentrantReadWriteLock$WriteLock.lock(ReentrantReadWriteLock.java:945)\n        at org.apache.solr.update.VersionInfo.blockUpdates(VersionInfo.java:118)\n        at org.apache.solr.update.UpdateLog.onFirstSearcher(UpdateLog.java:1604)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1810)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1505)\n        at org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:617)\n        - locked <0x00000000f6f09a10> (a java.lang.Object)\n        at org.apache.solr.update.processor.RunUpdateProcessor.processCommit(RunUpdateProcessorFactory.java:95)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(UpdateRequestProcessor.java:64)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.doLocalCommit(DistributedUpdateProcessor.java:1635)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.processCommit(DistributedUpdateProcessor.java:1612)\n        at org.apache.solr.update.processor.LogUpdateProcessor.processCommit(LogUpdateProcessorFactory.java:161)\n        at org.apache.solr.handler.RequestHandlerUtils.handleCommit(RequestHandlerUtils.java:69)\n        at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:68)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2051)\n        at org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(EmbeddedSolrServer.java:179)\n        at org.apache.solr.client.solrj.SolrRequest.process(SolrRequest.java:135)\n        at org.apache.solr.client.solrj.SolrClient.commit(SolrClient.java:483)\n        at org.apache.solr.client.solrj.SolrClient.commit(SolrClient.java:502)\n        at org.apache.solr.client.solrj.response.TestSpellCheckResponse.testSpellCheckResponse(TestSpellCheckResponse.java:51)\n\n\n ",
            "id": "comment-14557111"
        },
        {
            "date": "2015-05-23T03:25:51+0000",
            "author": "Hoss Man",
            "content": "marking as a blocker for 5.2 and assigning to tim to triage.\n\n(i know tim recently made some VersionBucket chnages in SOLR-7332, so I'm suspicious that this might be related \u2013 tim, if i'm wrong, and you're confident this is unrelated, please fill free to unassign and mark non-blocker.) ",
            "id": "comment-14557112"
        },
        {
            "date": "2015-05-23T07:25:54+0000",
            "author": "Dawid Weiss",
            "content": "Short version of my answer to the list wrt timeout: the default timeout is 120 minutes, so the job was killed before it had a chance to timeout. ",
            "id": "comment-14557194"
        },
        {
            "date": "2015-05-23T21:38:32+0000",
            "author": "Timothy Potter",
            "content": "Hmmm ... I'm not seeing the other thread that the one Hoss pasted in above is blocked on in the thread dumps? \n\nAnyway, this looks to be related to how EmbeddedSolrServer initializes the SolrCore as the currSearcher should not be null at this point in the test (a commit after a deleteByQuery) ... I would have thought the firstSearcher event (which is what the VersionBucket code hangs off of) would have fired already during core initialization and not at the time of commit.\n\nNeed to step away for today, but will work on it more tomorrow (Sunday) ... seems solvable but I don't want to just hack something in right now. My first thought is to move the call to UpdateLog.onFirstSearcher into the Callable executed by the searcherExecutor, i.e.\n\n\nIndex: src/java/org/apache/solr/core/SolrCore.java\n===================================================================\n--- src/java/org/apache/solr/core/SolrCore.java\t(revision 1681226)\n+++ src/java/org/apache/solr/core/SolrCore.java\t(working copy)\n@@ -1806,14 +1806,15 @@\n         }\n \n         if (currSearcher == null) {\n-          if (updateHandler != null && updateHandler.getUpdateLog() != null) {\n-            updateHandler.getUpdateLog().onFirstSearcher(newSearcher);\n-          }\n-\n           future = searcherExecutor.submit(new Callable() {\n             @Override\n             public Object call() throws Exception {\n               try {\n+\n+                if (updateHandler != null && updateHandler.getUpdateLog() != null) {\n+                  updateHandler.getUpdateLog().onFirstSearcher(newSearcher);\n+                }\n+\n                 for (SolrEventListener listener : firstSearcherListeners) {\n                   listener.newSearcher(newSearcher, null);\n                 }\n\n\n\nthat would likely address this issue, but when I originally did that, I started seeing a bunch of warnings about multiple on-deck searchers (probably because doing the version bucket lookup takes some time?) ",
            "id": "comment-14557537"
        },
        {
            "date": "2015-05-24T16:36:37+0000",
            "author": "Timothy Potter",
            "content": "This is actually happening for other tests too, so isn't related to EmbeddedSolrServer, see:\nhttp://jenkins.thetaphi.de/job/Lucene-Solr-5.x-Windows/4724/ ",
            "id": "comment-14557780"
        },
        {
            "date": "2015-05-24T16:43:04+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1681486 from Timothy Potter in branch 'dev/trunk'\n[ https://svn.apache.org/r1681486 ]\n\nSOLR-7587: First attempt at fixing the dead-lock; moved call to UpdateLog.onFirstSearcher to end of the SolrCore constructor as it only needs to run once per core initialization ",
            "id": "comment-14557783"
        },
        {
            "date": "2015-05-24T16:43:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1681487 from Timothy Potter in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1681487 ]\n\nSOLR-7587: First attempt at fixing the dead-lock; moved call to UpdateLog.onFirstSearcher to end of the SolrCore constructor as it only needs to run once per core initialization ",
            "id": "comment-14557784"
        },
        {
            "date": "2015-05-24T16:44:32+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1681489 from Timothy Potter in branch 'dev/branches/lucene_solr_5_2'\n[ https://svn.apache.org/r1681489 ]\n\nSOLR-7587: First attempt at fixing the dead-lock; moved call to UpdateLog.onFirstSearcher to end of the SolrCore constructor as it only needs to run once per core initialization ",
            "id": "comment-14557785"
        },
        {
            "date": "2015-05-24T16:46:01+0000",
            "author": "Timothy Potter",
            "content": "Just a heads up on this ... I had to commit a possible fix as I haven't been able to reproduce the hangs locally. The fix moves the call to UpdateLog.onFirstSearcher to the end of the SolrCore ctor as it only needs to run once per core initialization. ",
            "id": "comment-14557786"
        },
        {
            "date": "2015-05-24T16:47:29+0000",
            "author": "Timothy Potter",
            "content": "Here's a patch that shows the code I committed ",
            "id": "comment-14557787"
        },
        {
            "date": "2015-05-26T18:09:40+0000",
            "author": "Timothy Potter",
            "content": "Have a little more information about what caused this failure. Had to dig into the JavaDoc for ReentrantReadWriteLock a bit and found this little gem:\n\n\nReentrancy also allows downgrading from the write lock to a read lock, by acquiring the write lock, then the read lock and then releasing the write lock. However, upgrading from a read lock to the write lock is not possible.\n\nAll the test failures because of this situation occurred during a commit. Commits acquire a read-lock on the VersionInfo object (see DistributedUpdateProcessor#versionAdd method). My code introduced the need for acquiring the write-lock and as we learned above, you can't upgrade a read-lock to a write-lock. The problem is where I had this code; specifically I hung it off of the code that handles firstSearcher events, since I need a searcher in order to lookup the max value from the index to seed version buckets with. But all this seems like the test should fail consistently every time, which is not the case. So clearly there's some timing involved with this fail. This code only fires when currSearcher == null and I don't get how that could be at the point where the test is sending a commit (see below)?\n\n\n        at org.apache.solr.update.VersionInfo.blockUpdates(VersionInfo.java:118)\n        at org.apache.solr.update.UpdateLog.onFirstSearcher(UpdateLog.java:1604)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1810)\n        at org.apache.solr.core.SolrCore.getSearcher(SolrCore.java:1505)\n        at org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:617)\n        - locked <0x00000000f6f09a10> (a java.lang.Object)\n        at org.apache.solr.update.processor.RunUpdateProcessor.processCommit(RunUpdateProcessorFactory.java:95)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(UpdateRequestProcessor.java:64)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.doLocalCommit(DistributedUpdateProcessor.java:1635)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.processCommit(DistributedUpdateProcessor.java:1612)\n        at org.apache.solr.update.processor.LogUpdateProcessor.processCommit(LogUpdateProcessorFactory.java:161)\n        at org.apache.solr.handler.RequestHandlerUtils.handleCommit(RequestHandlerUtils.java:69)\n        at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:68)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:143)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:2051)\n        at org.apache.solr.client.solrj.embedded.EmbeddedSolrServer.request(EmbeddedSolrServer.java:179)\n        at org.apache.solr.client.solrj.SolrRequest.process(SolrRequest.java:135)\n        at org.apache.solr.client.solrj.SolrClient.commit(SolrClient.java:483)\n        at org.apache.solr.client.solrj.SolrClient.commit(SolrClient.java:502)\n        at org.apache.solr.client.solrj.response.TestSpellCheckResponse.testSpellCheckResponse(TestSpellCheckResponse.java:51)\n\n\n\nThe searcher gets registered in futures but seems unlikely that the test should get this far before the searcher opened during core initialization is set to the currSearcher. At any rate, the patch I submitted moves the bucket seeding code (which needs a write-lock) out of the firstSearcher code path and into the SolrCore ctor, which fixes the issue of needing a write-lock when a read-lock as already been acquired for a commit operation. It's still a question in my mind as to how the test can get to sending a commit when currSearcher == null ... any thoughts on that? ",
            "id": "comment-14559516"
        },
        {
            "date": "2015-05-26T18:55:26+0000",
            "author": "Timothy Potter",
            "content": "I chose to move the seed bucket version code before the call to bufferUpdatesIfConstructing during SolrCore construction ... also note that since the previous patch has already been committed, this is in addition to that. ",
            "id": "comment-14559621"
        },
        {
            "date": "2015-05-27T06:43:10+0000",
            "author": "Anshum Gupta",
            "content": "Timothy Potter : Is this still a blocker? ",
            "id": "comment-14560498"
        },
        {
            "date": "2015-05-27T13:29:37+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1682016 from Timothy Potter in branch 'dev/trunk'\n[ https://svn.apache.org/r1682016 ]\n\nSOLR-7587: Move the call to seed version buckets to before buffering updates during core construction ",
            "id": "comment-14560961"
        },
        {
            "date": "2015-05-27T13:30:23+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1682017 from Timothy Potter in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1682017 ]\n\nSOLR-7587: Move the call to seed version buckets to before buffering updates during core construction ",
            "id": "comment-14560964"
        },
        {
            "date": "2015-05-27T13:33:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1682019 from Timothy Potter in branch 'dev/branches/lucene_solr_5_2'\n[ https://svn.apache.org/r1682019 ]\n\nSOLR-7587: Move the call to seed version buckets to before buffering updates during core construction ",
            "id": "comment-14560969"
        },
        {
            "date": "2015-06-15T21:44:58+0000",
            "author": "Anshum Gupta",
            "content": "Bulk close for 5.2.0. ",
            "id": "comment-14586947"
        }
    ]
}