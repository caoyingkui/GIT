{
    "id": "LUCENE-5178",
    "title": "doc values should expose missing values (or allow configurable defaults)",
    "details": {
        "components": [],
        "fix_versions": [
            "4.5",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "DocValues should somehow allow a configurable default per-field.\nPossible implementations include setting it on the field in the document or registration of an IndexWriter callback.\n\nIf we don't make the default configurable, then another option is to have DocValues fields keep track of whether a value was indexed for that document or not.",
    "attachments": {
        "LUCENE-5178_reintegrate.patch": "https://issues.apache.org/jira/secure/attachment/12598849/LUCENE-5178_reintegrate.patch",
        "LUCENE-5178.patch": "https://issues.apache.org/jira/secure/attachment/12598843/LUCENE-5178.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-08-16T01:20:59+0000",
            "content": "I dont think lucene needs to do anything here. As i explained on LUCENE-5177 (but you refused to listen), you just have a separate numericdocvalues field just like fieldcache does (it has a separate bitset).\n\nSo you write a 1 there, when the document has a value for the field. Otherwise it will contain a 0 (because it gets filled with that).\n\nThis is very easy to do and will use ~ 1 bit per document just like fieldcache.\n\nThen its just a matter of making it easy to pass this NumericDV to FIeldComparator (currently: it always pulls a Bits directly from FC). this can be something like:\n\nif (ndv instanceof Bits) { // codec already specializes here\n  docsWithField = (Bits) ndv;\n} else {\n  docsWithField = new Bits() {\n    boolean get(int index) {\n      return ndv.get(index) != 0;\n    }\n}\n\n ",
            "author": "Robert Muir",
            "id": "comment-13741786"
        },
        {
            "date": "2013-08-16T01:36:06+0000",
            "content": "Then its just a matter of [...]\nWell, at least you're now acknowledging that there is a problem and that it will take work somewhere in Lucene to fix it!\n\nIt's still not clear why you're against making the hard-coded default configurable however. ",
            "author": "Yonik Seeley",
            "id": "comment-13741797"
        },
        {
            "date": "2013-08-16T01:41:42+0000",
            "content": "Somewhat related, I've opened SOLR-5165 to remove Solr's mandatory default values for DocValue fields. ",
            "author": "Yonik Seeley",
            "id": "comment-13741801"
        },
        {
            "date": "2013-08-16T02:07:58+0000",
            "content": "I am not acknowledging there is a problem: I'm just telling you if you have 'sparse' values in a docvalues field, and you want to emulate what fieldcache does in allowing you to optionally pull a bitset telling you when a value does/doesnt exist: you can do the same thing at index-time yourself today.\n\nI'm against changing the \"default\" of 0 because its both unnecessary and unhelpful to differentiate whether a value exists in the field (it wont work: for numeric types it could be a \"real value\". Thats why FieldCache does this as a bitset, thats why FieldCache has a \"hardcoded default\" of 0). I don't want to add unnecessary complexity that ultimately provides no benefit (because that solves nothing, sorry).\n\nI'm not opposed to allowing the comparators to take in a bits from somewhere other than the fieldcache (which i think always returns MatchAllBits for dv fields). This way if someone wants this: they can do it. I do have some reservations about it, because it doesnt give a 1-1 consistency with FieldCache api (so wouldnt \"automatically\" work for function queries without giving them special ctors too). So this would make APIs harder to use: and I don't like that... but its an option and its totally clear to the user what is happening.\n\nI'm significantly less opposed to supporting an equivalent to FieldCache.getDocsWithField for docvalues. The advantage is we could pass FieldCache.getDocsWithField thru to it, and the sort missing-first/last, function queries exist() and so on would automatically work. The downsides are: it adds some complexity under the hood to deal with (e.g. indexwriter consumers, codec apis need change, codecs need to optimize for the case where none are missing, etc). And is this really complexity we should be adding for what is supposed to be a column-stride type (like norms?)... I'm just not sure its the right tradeoff. \n ",
            "author": "Robert Muir",
            "id": "comment-13741816"
        },
        {
            "date": "2013-08-16T02:35:22+0000",
            "content": "This way if someone wants this: they can do it.\n\nShouldn't this be handled at the lucene level?\n\nAnyway, this whole discussion all started from this:\nThere are currently one or two disadvantages to using docvalues in solr currently. The major disadvantage is being forced to specify a default value in Solr,\n\nThat's the major issue, to which you replied \"why would have fields defined you arent using?\".  Although the lack of resolution on this issue would be an annoyance, the real problem is SOLR-5165.  There should have never been a required default value for Solr, and it should be removed. ",
            "author": "Yonik Seeley",
            "id": "comment-13741826"
        },
        {
            "date": "2013-08-16T02:46:26+0000",
            "content": "\nShouldn't this be handled at the lucene level?\n\nWell thats the question with my last 2 paragraphs, where i list the tradeoffs between two approaches. I will hack up a patch to see just how bad it is to add this 'Bits getDocWithField' support. Then we can see this more visually.\n\n\n    There are currently one or two disadvantages to using docvalues in solr currently. The major disadvantage is being forced to specify a default value in Solr,\n\nThat's the major issue, to which you replied \"why would have fields defined you arent using?\". Although the lack of resolution on this issue would be an annoyance, the real problem is SOLR-5165. There should have never been a required default value for Solr, and it should be removed.\n\nI agree the default value is \"brutal\", but as far as I know, Adrien did it in this way to leave no surprises (so users arent complaining when things like sort missing last/first dont work).\n\nAnother approach would be (right now) to only fail when those options are set, another option would be to handle it at the solr fieldtype level.\n\nBut I'm happy to write a patch for it on the lucene side so we can see how complicated it really is, its better than arguing about it. ",
            "author": "Robert Muir",
            "id": "comment-13741833"
        },
        {
            "date": "2013-08-16T10:25:41+0000",
            "content": "Commit 1514642 from Robert Muir in branch 'dev/branches/lucene5178'\n[ https://svn.apache.org/r1514642 ]\n\nLUCENE-5178: add 'missing' support to docvalues (simpletext only) ",
            "author": "ASF subversion and git services",
            "id": "comment-13742072"
        },
        {
            "date": "2013-08-16T10:30:33+0000",
            "content": "I created a patch with getDocsWithField (and the current fieldcache.getDocsWithField passing thru to it) for docvalues so you know if a value is missing.\n\nIt also means e.g. SortedDocValues returns -1 ord for missing like fieldcache. so its completely consistent there with FC.\n\ncurrently simpletext is the only one implementing it: the other codecs return MatchAllBits (and thats how the backcompat will work, because they never had missing values before).\n\nall tests are passing, but I want to think about strategies for the efficient codecs (Memory/Disk) before doing anything.\n\none other thing i like is, if we do it this way, the codec has the chance to represent missing values in a more efficient way than if the users do it themselves \"on top\". ",
            "author": "Robert Muir",
            "id": "comment-13742073"
        },
        {
            "date": "2013-08-16T13:02:48+0000",
            "content": "Yes, I think tracking/exposing missing values is the best option,  esp for numerics where you can use the full range and still tell of there was a value or not. ",
            "author": "Yonik Seeley",
            "id": "comment-13742182"
        },
        {
            "date": "2013-08-16T13:09:56+0000",
            "content": "OK. I can remove the solr defaultValue check here too: i have to fix the tests to test sort missing first/last / facet missing etc anyway (currently the dv tests avoid that). ",
            "author": "Robert Muir",
            "id": "comment-13742186"
        },
        {
            "date": "2013-08-19T21:51:59+0000",
            "content": "Here is a patch of 5178 branch:\n\n\tAdds AtomicReader.getDocsWithField(String) that works just like FieldCache.getDocsWithField(String) and fieldcacheimpl just forwards to it: this means things like facet missing/function queries exists()/sort missing last work with docvalues already.\n\tSortedSet returns -1 ord for missing value from DV (not just fieldcache). So now these apis work exactly the same.\n\tCodec api is unchanged, codecs get null values for missing.\n\tnew Lucene45 codec (works off heap: LUCENE-5178) that supports this, older codecs do not (they return MatchAllBits, essentially they never had missing values, only \"filled\" ones).\n\tLucene42 becomes read-only and the writers in test-framework for Lucene40 and Lucene42 \"simulates\" what happened before by filling themselves and always returning MatchAllBits\n\tnew Memory codec (works on heap) works like Lucene42 did, except supports missing values too, as does simpletext.\n\tFacet42 dv is unchanged (for its use cases, the distinction between \"missing\" and \"empty ordinal list\" is not useful). Facet42Codec (which was just sugar to use it) is renamed to Facet45Codec, but of course old segments can be read since the dv name is the same.\n\tRemoved solr restrictions for single-valued docvalues fields (they dont need to have a default value or be required anymore).\n\tImproved testing for solr docvalues faceting (single valued fields, numericfacets, and so on). This was previously not possible because only multi-valued types could support missing.\n\tI reviewed all consumers and ensure they are optimized (e.g. check that value == 0 before wasting their time and so on, this was already this way in lucene's sort comparators)\n\n ",
            "author": "Robert Muir",
            "id": "comment-13744298"
        },
        {
            "date": "2013-08-19T22:12:03+0000",
            "content": "Here is the result of svn merge --reintegrate, i dont think its necessarily that easier to work with unfortunately ",
            "author": "Robert Muir",
            "id": "comment-13744336"
        },
        {
            "date": "2013-08-20T11:21:46+0000",
            "content": "+1, I reviewed the first patch.\n\nWe'll need to fix facet module's dynamic range faceting to skip missing values; I can do this after you commit this patch... ",
            "author": "Michael McCandless",
            "id": "comment-13744870"
        },
        {
            "date": "2013-08-20T21:30:57+0000",
            "content": "Commit 1515977 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1515977 ]\n\nLUCENE-5178: add missing support for docvalues ",
            "author": "ASF subversion and git services",
            "id": "comment-13745467"
        },
        {
            "date": "2013-08-20T21:32:13+0000",
            "content": "Thanks Mike: I added additional tests and ensured the 'missing' stuff in solr is fully functional. \n\nI'll let jenkins chomp on it for a while in trunk. ",
            "author": "Robert Muir",
            "id": "comment-13745469"
        },
        {
            "date": "2013-08-20T22:38:29+0000",
            "content": "Commit 1515999 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1515999 ]\n\nLUCENE-5178: handle missing values in range facets ",
            "author": "ASF subversion and git services",
            "id": "comment-13745561"
        },
        {
            "date": "2013-08-20T22:42:36+0000",
            "content": "Commit 1516003 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1516003 ]\n\nLUCENE-5178: test requires codec that supports docsWithField ",
            "author": "ASF subversion and git services",
            "id": "comment-13745571"
        },
        {
            "date": "2013-08-20T22:47:31+0000",
            "content": "Commit 1516012 from Robert Muir in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1516012 ]\n\nLUCENE-5178: add missing support for docvalues ",
            "author": "ASF subversion and git services",
            "id": "comment-13745574"
        },
        {
            "date": "2013-09-03T02:12:58+0000",
            "content": "During test I somehow hit a failure:\n\n\n   [junit4] FAILURE 0.27s | TestRangeAccumulator.testMissingValues <<<\n   [junit4]    > Throwable #1: org.junit.ComparisonFailure: expected:<...(0)\n   [junit4]    >   less than 10 ([8)\n   [junit4]    >   less than or equal to 10 (]8)\n   [junit4]    >   over 90 (8)\n   [junit4]    >   9...> but was:<...(0)\n   [junit4]    >   less than 10 ([28)\n   [junit4]    >   less than or equal to 10 (2]8)\n   [junit4]    >   over 90 (8)\n   [junit4]    >   9...>\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([815B6AA86D05329C:EBC638EE498F066D]:0)\n   [junit4]    > \tat org.apache.lucene.facet.range.TestRangeAccumulator.testMissingValues(TestRangeAccumulator.java:670)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:722)\n\n\n\nSeed:\n\nant test  -Dtestcase=TestRangeAccumulator -Dtests.method=testMissingValues -Dtests.seed=815B6AA86D05329C -Dtests.slow=true -Dtests.postingsformat=Lucene41 -Dtests.locale=ca -Dtests.timezone=Australia/Currie -Dtests.file.encoding=UTF-8\n\n ",
            "author": "Han Jiang",
            "id": "comment-13756313"
        },
        {
            "date": "2013-09-03T07:52:53+0000",
            "content": "I manage to reproduce it only if I set both tests.seed and tests.postingsformat. What I see is that Lucene42DVProducer is used, which returns MatchAllBits (it supports only SortedSet?), which leads to the incorrect counts. The initialized Codec is Lucene45Codec, which returns Lucene42DVF. The test does use defaultCodecSupportsDocsWithField(), but the latter only asserts that the name of the Codec is not \"40\", \"41\", \"42\", yet it does not check if the DVF supports it. That seems wrong? ",
            "author": "Shai Erera",
            "id": "comment-13756430"
        },
        {
            "date": "2013-09-03T11:09:43+0000",
            "content": "It sounds like we need to check the actual DVFormat for that field (_TestUtil.getDocValuesFormat(\"field\")) and then test whether that format supports missing values.\n\nI think this failure can only happen if you explicitly set -Dtests.postingsformat, because then we make an anon subclass of Lucene45 (TestRuleSetupAndRestoreClassEnv.java at line 194) ... so it sounds like in general we should not be using defaultCodecSupportsDocsWithField() but rather something like defaultDVFormatSupportsDocsWithField(String field) ... ",
            "author": "Michael McCandless",
            "id": "comment-13756523"
        },
        {
            "date": "2013-09-03T11:48:08+0000",
            "content": "I see. I think this can also happen if you use RandomCodec and it draws Lucene42DVF? So in this case, with this seed, it trips if you set postingsformat, but I'm not sure that in general this assume() is correct.\n\nThe ugly part of having a test calling _TestUtil.geDVF(field) (or we wrap it in a nice method) is that the test will need to decide up front on all the fields it uses, and if there's a mistake, the error may happen in the future and harder to debug (i.e. spot that the test uses a different field than what it passed to assume()). But I don't think that asserting the Codec is the right test here, so this has to change. ",
            "author": "Shai Erera",
            "id": "comment-13756536"
        },
        {
            "date": "2013-09-03T12:18:28+0000",
            "content": "Opened LUCENE-5199. ",
            "author": "Shai Erera",
            "id": "comment-13756551"
        },
        {
            "date": "2013-09-03T15:09:36+0000",
            "content": "Can this commit please be reverted? \n\nThe change makes the test API so complicated for something that cannot happen:\nYou cannot have \"unsupported fields\" its all or none.\n\nThis is a bug in LuceneTestCase, it should not do this when someone uses -Dtests.postingsformat.  ",
            "author": "Robert Muir",
            "id": "comment-13756687"
        },
        {
            "date": "2013-10-05T10:18:41+0000",
            "content": "4.5 release -> bulk close ",
            "author": "Adrien Grand",
            "id": "comment-13787004"
        }
    ]
}