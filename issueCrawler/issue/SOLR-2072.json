{
    "id": "SOLR-2072",
    "title": "Search Grouping: expand group sort options",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Sub-task",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Ability to specify functions over group documents when sorting groups.  max(score) or avg(popularity), etc.",
    "attachments": {
        "SOLR-2072-01.patch": "https://issues.apache.org/jira/secure/attachment/12509604/SOLR-2072-01.patch",
        "SOLR-2072.patch": "https://issues.apache.org/jira/secure/attachment/12689187/SOLR-2072.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12916375",
            "date": "2010-09-30T04:45:39+0000",
            "content": "I don't understand this... I think you have already implemented the ability?\n\n\nString groupSortStr = params.get(GroupParams.GROUP_SORT);\nSort groupSort = groupSortStr != null ? QueryParsing.parseSort(groupSortStr, req.getSchema()) : null;\n\n\n\nDoesn't QueryParsing.parseSort() support sort by function? "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12916377",
            "date": "2010-09-30T04:51:04+0000",
            "content": "Uh, I see SOLR-1297 is reopened. Do you meat this issue depends on SOLR-1297? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12916378",
            "date": "2010-09-30T05:15:46+0000",
            "content": "Right now, the sort value for a group (that governs how whole groups sort relative to eachother) depends only on the top document in that group.  This issue is about a different type of function that can derive a group sort value from something else.  One example is being able to sort groups based on the average score in that group rather than just the top score.  Another example is being able to sort by the number of hits in each group. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12916432",
            "date": "2010-09-30T10:31:25+0000",
            "content": "I see. I read that \"group sort\" was group.sort. \n\nDo we need a new parameter other than sort, to trigger the feature? "
        },
        {
            "author": "George P. Stathis",
            "id": "comment-13164144",
            "date": "2011-12-07T04:49:52+0000",
            "content": "Is this still on the radar? I'm interested in this, so I'd love to talk to someone about contributing. I'm not familiar with the code base yet, so any pointers on where to look in the code would be appreciated.  "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13164384",
            "date": "2011-12-07T13:32:41+0000",
            "content": "George:\n\nThis isn't going to be all that much help, but you might try stepping through the test cases to get a feel for how grouping works, see: TestGroupingSearch for instance. And the files referenced in some of the patches might also be useful, e.g. SOLR-2072.\n\nWarning: I know very little to nothing about the code in question, but that's how I'd start to get a feel for it, hopefully enough to propose an approach... "
        },
        {
            "author": "George P. Stathis",
            "id": "comment-13164399",
            "date": "2011-12-07T13:52:45+0000",
            "content": "Thanks Erick. That's a good enough start for me. I'll also look at the patches attached to SOLR-1297 since it's referenced in this ticket. "
        },
        {
            "author": "George P. Stathis",
            "id": "comment-13170549",
            "date": "2011-12-15T22:50:35+0000",
            "content": "Still not clear on where to start and probably stating the obvious for folks familiar with the code: it looks like the assumption is made within AbstractFirstPassGroupingCollector and AbstractSecondPassGroupingCollector about using the highest scoring doc within each group. Perhaps using a different TopScoreDocCollector and augmenting TopDocs to account for scoring stats (e.g. sum of scores etc) might be a place to start. I'm getting warmer here or completely off? "
        },
        {
            "author": "yuval dotan",
            "id": "comment-13175934",
            "date": "2011-12-26T12:51:04+0000",
            "content": "Hi George\ndid you make any progress with with the group sort by sum or avg?\nThanks "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13176277",
            "date": "2011-12-27T19:27:23+0000",
            "content": "Currently the AbstractFirstPassGroupingCollector uses the most relevant document of a group to determine the order of a group in the result set. The values for the most relevant document are either fetched from the score or field cache (and possible also doc values in 4.x).\n\nI think it is best to add more first pass grouping collectors, that use different ways to order groups. Implementations could do this based on the average group score or number of hits per group. I do think that these implementations will be more expensive. Sorting by hit count or avg score requires the collector to keep track of all groups. Currently AbstractFirstPassGroupingCollector keeps only track of the top N groups. "
        },
        {
            "author": "George P. Stathis",
            "id": "comment-13176323",
            "date": "2011-12-27T20:58:01+0000",
            "content": "My progress so far has been in terms of climbing the learning curve. I had to do some reading on the Lucene basics first (Lucene in Action is a great book BTW). I came to the same conclusion as Martijn which is to create a specialized implementation of an AbstractFirstPassGroupingCollector subclass. I had to pause my efforts to address some other internal sprint work but I should be tackling this again this week. My first goal is to hack a collector that can sort by the sum of the document scores in group and learn from it for the more generalized cases. "
        },
        {
            "author": "George P. Stathis",
            "id": "comment-13180827",
            "date": "2012-01-05T20:44:54+0000",
            "content": "Attaching a first prototype pass with a unit test to get the conversation going. I'm pretty sure this is not going to win any performance contests but it's still worth sparking some discussion around it. The prototype shows an implementation of a sum(scores) group sort. The approach basically relaxes the visibility of some AbstractFirstPassGroupingCollector properties so that sub-classes can do more with the state encapsulated in the abstract class. A new collector is introduced based on TermFirstPassGroupingCollector but implementing its' own collect method. A specialized comparator is used to sum up the document scores for each group. \n\nLooking forward to some feedback. "
        },
        {
            "author": "Martijn van Groningen",
            "id": "comment-13182250",
            "date": "2012-01-08T17:19:36+0000",
            "content": "Nice prototype! Good idea to use a FieldComparator/Source that sums the score.\n\nI think it is better not to extend AbstractFirstPassGroupingCollector and move the code you need to DocScoresFirstPassGroupingCollector. The AbstractFirstPassGroupingCollector and its other subclasses only keep the top N groups. That is an important difference compared to DocScoresFirstPassGroupingCollector.\n\nAnother implementation idea that I like is if we create a collector that is responsible for filling the FieldComparator/Source (in this case the sums of score per group, but might be something different). This collector will create the Sort that the first pass grouping collector will use. With this approach existing code doesn't have to be changed, the logic is in the FieldComparator. The downside is that when a user wants to sort by sum(score), three searches are executed per request. "
        },
        {
            "author": "dave shor",
            "id": "comment-13594428",
            "date": "2013-03-06T06:38:14+0000",
            "content": "This would be a much appreciated feature.\nWhat other workarounds have people tried in the interim? "
        },
        {
            "author": "Bryan Bende",
            "id": "comment-13695043",
            "date": "2013-06-27T20:41:06+0000",
            "content": "Is there any further work being done on this issue ?\n\nI'm looking for something similar, not necessarily aggregating a score, but I would like to able to use sort and group.sort together such that the group.sort is applied with in the group first and the first document of each group is then used as the representative document to perform the overall sorting of groups.   "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13695089",
            "date": "2013-06-27T21:58:38+0000",
            "content": "I would like to able to use sort and group.sort together such that the group.sort is applied with in the group first and the first document of each group is then used as the representative document to perform the overall sorting of groups.\n\nThat is how things currently work:\nhttp://wiki.apache.org/solr/FieldCollapsing#Request_Parameters "
        },
        {
            "author": "Bryan Bende",
            "id": "comment-13695162",
            "date": "2013-06-27T23:34:48+0000",
            "content": "According to that documentation \"sort=popularity desc will cause the groups to be sorted according to the highest popularity doc in each group\".\n\nWhat I want to do is something like \"sort=popularity asc, group.field=label, group.sort=popularity desc, group.limit=1\" so essentially the most popular document in each group, but in least popular order across the groups. This works when running a single non-distributed instance of Solr, but when starting Solr with numShards >= 1 it behaves differently.\n\nI wrote up a description of the problem on the mailing list, but no one provided any feedback:\nhttp://mail-archives.apache.org/mod_mbox/lucene-solr-user/201306.mbox/%3CCALo_M18WVoLKvepJMu0wXk_x2H8cv3UaX9RQYtEh4-mksQHLBA%40mail.gmail.com%3E "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13695164",
            "date": "2013-06-27T23:44:17+0000",
            "content": "This works when running a single non-distributed instance of Solr, but when starting Solr with numShards >= 1 it behaves differently.\n\nAh, so it is an existing feature, but a bug in distributed mode.  It should go to a new issue (if there isn't one already). "
        },
        {
            "author": "Vitaliy Zhovtyuk",
            "id": "comment-14259156",
            "date": "2014-12-26T17:36:56+0000",
            "content": "Added test for sort groups and inside group by functions, added test to sort inside group by function in distributed mode "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14263639",
            "date": "2015-01-03T21:19:44+0000",
            "content": "Hi Vitaliy Zhovtyuk, your patch is not correct. This issue is about using functions like avg or sum on documents within a group to sort the groups themselves. Your patch is only about adding tests which use a function with group.sort which is actually executed only on the first document of a group. "
        },
        {
            "author": "Akash",
            "id": "comment-15150004",
            "date": "2016-02-17T06:53:06+0000",
            "content": "Will the issue be resolved ?\n\nIn grouping, i would like to sum the scores of the documents of groups and sort groups on this sum value rather than maxScore of the documents of a group.  "
        }
    ]
}