{
    "id": "SOLR-1396",
    "title": "standardize the updateprocessorchain syntax",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "updateprocessorChain follows a non-standard syntax in solr . Usually, all the components are initialized as top level components and they are assembled and used using a NamedList syntax .for example search components.\n\nI propose to change it as follows\n\n\n <updateRequestProcessorChain name=\"custom\" class=\"solr.UpdateRequestProcessorChain\"> \n  <arr name=\"chain\">\n      <str>custom</str>\n      <str>runUpdate</str>\n      <str>log</str>\n  </arr>\n</updateRequestProcessorChain>\n<updateProcessor name=\"custom\" class=\"solr.CustomUpdateRequestProcessorFactory\" >\n   <lst name=\"name\">\n     <str name=\"n1\">x1</str>\n     <str name=\"n2\">x2</str>\n   </lst>\n</updateProcessor>                                    \n<updateProcessor name=\"runUpdate\" class=\"solr.RunUpdateProcessorFactory\" />                    \n<updateProcessor name=\"log\" class=\"solr.LogUpdateProcessorFactory\" />   \n\n\n\nThe wiki documentation says this was supposed to be reviewed. If possible we should clean it up in 1.4 itself. We can support the old syntax too",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12751250",
            "date": "2009-09-04T00:45:41+0000",
            "content": "\n\n\ta ref by name syntax like this would make it possible for two separate chains to both contain the same processor, or for a single processor to occur multiple times in the same chain ... i have no idea if this would break things, but it's something that should be considered\n\ti don't see a reason why updateRequestProcessorChain needs a class attribute ... it's just a simple container around the processors, is there a use case for making it pluggable?\n\t\n\t\tunless we make the processor chain class pluggable, there's no reason for an explict array containing hte names of the processors, the top level list under the processor chain can be used (as it is now - just with names instead of the processors themselves)\n\t\n\t\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12751288",
            "date": "2009-09-04T04:07:22+0000",
            "content": "i don't see a reason why updateRequestProcessorChain needs a class attribute ... \n\nactually there is no need.\n\nhere's no reason for an explict array containing hte names of the processors, \n\nThis is for standardization. the searchcomponent has a similar configuration "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12752899",
            "date": "2009-09-09T04:38:09+0000",
            "content": "This is for standardization. the searchcomponent has a similar configuration\n\nbut search components are a pluggable, and have a generic init(NamedList) method ... so do request handlers, and i think what you are refering to is the way the component list for a SearchHandler instance is specified \u2013 in that case named arrays are included in the broader NamedList of the init method to distibguish what it is (because some RequestHandlers could have all sorts of other init params.\n\nbut if updateRequestProcessorChain isn't going to be pluggable (as you said: we don't need a class attribute) then we don't need to worry about providing generalized init param support for it ... so we can keep the syntax simple.\n\nreally it just comes down to whether or not update processors can really be refrenced by name and reused in multiple chains.  if they can't this is all moot, but if they can then it would certianly make sense to give them names, and break them out like you describe, and then keep the chains simple...\n\n\n  <updateRequestProcessorChain name=\"dedupe\">\n    <processor>signature<processor>\n    <processor>logger</processor>\n    <processor>runupdate</processor>\n  </updateRequestProcessorChain>\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12752921",
            "date": "2009-09-09T05:55:04+0000",
            "content": "it is not enough to have simple configuration. we need standardized parsing also. I have modified SolrConfig in such a way that we must not need to write any xml parsing for new components as long as we stick to the standard syntax (SOLR-1198).  Going forward SolrConfig implementation should be pluggable and be xml independent, we should have a simplified interface for SolrConfig so that users can read it from anywhere (xml, zookeeper,db etct etc) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12757825",
            "date": "2009-09-21T05:59:29+0000",
            "content": "with SOLR-1326 this kind of syntax is now standard for any type of plugin . so no changes required "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775486",
            "date": "2009-11-10T15:50:37+0000",
            "content": "Bulk close Solr 1.4 issues "
        }
    ]
}