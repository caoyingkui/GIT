{
    "id": "LUCENE-6957",
    "title": "NRTCachingDirectory is missing createTempOutput",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "priority": "Major",
        "status": "Resolved",
        "type": "Bug"
    },
    "description": "It's broken now because it simply delegates to the wrapped dir now,\nwhich can create an output that already exists in the ram dir cache.\n\nThis bug only affects trunk (it's never been released).",
    "attachments": {
        "LUCENE-6957.patch": "https://issues.apache.org/jira/secure/attachment/12780327/LUCENE-6957.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15081275",
            "author": "Michael McCandless",
            "date": "2016-01-04T15:29:51+0000",
            "content": "Simple patch, if a little hacky ... "
        },
        {
            "id": "comment-15081471",
            "author": "Adrien Grand",
            "date": "2016-01-04T17:54:02+0000",
            "content": "\n+        IndexOutput out = first.createTempOutput(prefix, suffix, context);\n+        String name = out.getName();\n+        if (slowFileExists(second, name)) {\n+          out.close();\n+          toDelete.add(name);\n+        } else {\n+          success = true;\n+          return out;\n+        }\n\n\n\nMaybe this should be protected by a try/finally block so that we also close and add name to toDelete if slowFileExists fails? "
        },
        {
            "id": "comment-15081791",
            "author": "Michael McCandless",
            "date": "2016-01-04T20:54:52+0000",
            "content": "Thanks Adrien Grand, good catch, I'll fix! "
        },
        {
            "id": "comment-15082181",
            "author": "Michael McCandless",
            "date": "2016-01-05T01:35:06+0000",
            "content": "New patch! "
        },
        {
            "id": "comment-15085340",
            "author": "ASF subversion and git services",
            "date": "2016-01-06T09:56:18+0000",
            "content": "Commit 1723259 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1723259 ]\n\nLUCENE-6957: add missing NRTCachingDirectory.createTempOutput "
        },
        {
            "id": "comment-15085360",
            "author": "Adrien Grand",
            "date": "2016-01-06T10:11:15+0000",
            "content": "I'm confused about the latest patch:\n\n\n+    IndexOutput out = null;\n+    try {\n+      while (true) {\n+        out = first.createTempOutput(prefix, suffix, context);\n+        String name = out.getName();\n+        toDelete.add(name);\n+        if (slowFileExists(second, name)) {\n+          out.close();\n+        } else {\n+          success = true;\n+          break;\n+        }\n+      }\n+    } finally {\n+      if (success) {\n+        IOUtils.deleteFiles(first, toDelete);\n+      } else {\n+        IOUtils.closeWhileHandlingException(out);\n+        IOUtils.deleteFilesIgnoringExceptions(first, toDelete);\n+      }\n+    }\n+\n+    return out;\n\n\n\nWon't this always return an output on a deleted file since we always call toDelete.add(name) regardless of whether the file exists in the other directory? Should we make toDelete a HashSet and call toDelete.remove(name) in the else block? "
        },
        {
            "id": "comment-15085524",
            "author": "Steve Rowe",
            "date": "2016-01-06T13:28:23+0000",
            "content": "Looks like this change might be implicated in a reproducible fail found by Policeman Jenkins http://jenkins.thetaphi.de/job/Lucene-Solr-trunk-Linux/15456/?:\n\n\n   [junit4] Suite: org.apache.lucene.search.suggest.TestInputIterator\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestInputIterator -Dtests.method=testTerms -Dtests.seed=69B1CC8C7D0DECB3 -Dtests.multiplier=3 -Dtests.slow=true -Dtests.locale=sr_ME_#Latn -Dtests.timezone=Australia/Canberra -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   0.57s J0 | TestInputIterator.testTerms <<<\n   [junit4]    > Throwable #1: java.io.FileNotFoundException: sorted_input_0.tmp in dir=NRTCachingDirectory(RAMDirectory@2d9f5a20 lockFactory=org.apache.lucene.store.SingleInstanceLockFactory@151e3d67; maxCacheMB=0.7294921875 maxMergeSizeMB=0.4765625)\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([69B1CC8C7D0DECB3:C5033CBEB96632A1]:0)\n   [junit4]    > \tat org.apache.lucene.store.MockDirectoryWrapper.openInput(MockDirectoryWrapper.java:677)\n   [junit4]    > \tat org.apache.lucene.util.OfflineSorter.sort(OfflineSorter.java:240)\n   [junit4]    > \tat org.apache.lucene.search.suggest.SortedInputIterator.sort(SortedInputIterator.java:191)\n   [junit4]    > \tat org.apache.lucene.search.suggest.SortedInputIterator.<init>(SortedInputIterator.java:79)\n   [junit4]    > \tat org.apache.lucene.search.suggest.TestInputIterator.testTerms(TestInputIterator.java:85)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene60): {}, docValues:{}, sim=RandomSimilarityProvider(queryNorm=true,coord=yes): {}, locale=sr_ME_#Latn, timezone=Australia/Canberra\n   [junit4]   2> NOTE: Linux 3.19.0-42-generic amd64/Oracle Corporation 1.8.0_66 (64-bit)/cpus=12,threads=1,free=383372608,total=508887040\n   [junit4]   2> NOTE: All tests run in this JVM: [TestNGramDistance, TestSuggestField, DocumentDictionaryTest, TestLuceneDictionary, CompletionTokenStreamTest, TestSpellChecker, FSTCompletionTest, TestDirectSpellChecker, TestPlainTextDictionary, TestHighFrequencyDictionary, TestJaroWinklerDistance, TestInputIterator]\n   [junit4] Completed [20/32 (1!)] on J0 in 0.58s, 2 tests, 1 error <<< FAILURES!\n\n "
        },
        {
            "id": "comment-15085532",
            "author": "Adrien Grand",
            "date": "2016-01-06T13:38:35+0000",
            "content": "I suspect this is due to the problem I talked about in my above comment. I'll make the changes I proposed. "
        },
        {
            "id": "comment-15085544",
            "author": "ASF subversion and git services",
            "date": "2016-01-06T13:46:03+0000",
            "content": "Commit 1723320 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1723320 ]\n\nLUCENE-6957: Don't remove the temporarily created file. "
        },
        {
            "id": "comment-15085554",
            "author": "Adrien Grand",
            "date": "2016-01-06T13:54:48+0000",
            "content": "This fixed the test failure. Michael McCandless Could you have a look at my above commit when you're back to make sure I did not overlook something? "
        },
        {
            "id": "comment-15085564",
            "author": "Michael McCandless",
            "date": "2016-01-06T14:11:53+0000",
            "content": "Duh, how stupid of me!\n\nThanks Steve Rowe and Adrien Grand, your fix looks good!  Why on earth did tests (e.g. TestNRTCachingDirectory) not fail w/ what I committed... I'll dig on that. "
        },
        {
            "id": "comment-15085569",
            "author": "Michael McCandless",
            "date": "2016-01-06T14:15:54+0000",
            "content": "Grrr, I see: I added a test case for this issue, TestNRTCachingDirectory.testCreateTempOutput, which accidentally overrode BaseDirectoryTestCase.testCreateTempOutput, which would have caught my stupidity.  I'll rename my new test case ... "
        },
        {
            "id": "comment-15085571",
            "author": "ASF subversion and git services",
            "date": "2016-01-06T14:16:19+0000",
            "content": "Commit 1723330 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1723330 ]\n\nLUCENE-6957: rename test case so we still run the same test name from the base class "
        },
        {
            "id": "comment-15085572",
            "author": "ASF subversion and git services",
            "date": "2016-01-06T14:17:13+0000",
            "content": "Commit 1723331 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1723331 ]\n\nLUCENE-6957: don't make this method final "
        },
        {
            "id": "comment-15085574",
            "author": "Adrien Grand",
            "date": "2016-01-06T14:21:43+0000",
            "content": "Too bad we can't make the build fail if overriding a method without using the @Override annotation.  "
        },
        {
            "id": "comment-15085578",
            "author": "Michael McCandless",
            "date": "2016-01-06T14:27:16+0000",
            "content": "Too bad we can't make the build fail if overriding a method without using the @Override annotation.\n\nThat would be wonderful!\n\nHmm, I think the eclipse compiler has an option for this (fail if you override a method but didn't put @Override)?  Don't we already use ecj to detect other errors when compiling? "
        },
        {
            "id": "comment-15087770",
            "author": "Robert Muir",
            "date": "2016-01-07T17:56:38+0000",
            "content": "its an easy one liner:\n\n--- lucene/tools/javadoc/ecj.javadocs.prefs\t(revision 1723604)\n+++ lucene/tools/javadoc/ecj.javadocs.prefs\t(working copy)\n@@ -47,7 +47,7 @@\n org.eclipse.jdt.core.compiler.problem.missingJavadocTagsMethodTypeParameters=disabled\n org.eclipse.jdt.core.compiler.problem.missingJavadocTagsOverriding=disabled\n org.eclipse.jdt.core.compiler.problem.missingJavadocTagsVisibility=public\n-org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=ignore\n+org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotation=error\n org.eclipse.jdt.core.compiler.problem.missingOverrideAnnotationForInterfaceMethodImplementation=enabled\n org.eclipse.jdt.core.compiler.problem.missingSerialVersion=ignore\n org.eclipse.jdt.core.compiler.problem.missingSynchronizedOnInheritedMethod=ignore\n\n\n\nGives 20 fails on lucene-core already:\n\n [ecj-lint] Compiling 744 source files to /tmp/ecj2121351062\n [ecj-lint] ----------\n [ecj-lint] 1. ERROR in /home/rmuir/workspace/trunk2/lucene/core/src/java/org/apache/lucene/codecs/lucene50/Lucene50CompoundReader.java (at line 156)\n [ecj-lint] \tpublic void renameFile(String from, String to) {\n [ecj-lint] \t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n [ecj-lint] The method renameFile(String, String) of type Lucene50CompoundReader should be tagged with @Override since it actually overrides a superclass method\n [ecj-lint] ----------\n [ecj-lint] ----------\n [ecj-lint] 2. ERROR in /home/rmuir/workspace/trunk2/lucene/core/src/java/org/apache/lucene/codecs/lucene60/Lucene60DimensionalWriter.java (at line 98)\n [ecj-lint] \tpublic void visit(int docID, byte[] packedValue) throws IOException {\n [ecj-lint] \t            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n [ecj-lint] The method visit(int, byte[]) of type new DimensionalValues.IntersectVisitor(){} should be tagged with @Override since it actually overrides a superinterface method\n [ecj-lint] ----------\n...\n\n "
        },
        {
            "id": "comment-15087797",
            "author": "Adrien Grand",
            "date": "2016-01-07T18:09:46+0000",
            "content": "Great! I opened LUCENE-6967 "
        }
    ]
}