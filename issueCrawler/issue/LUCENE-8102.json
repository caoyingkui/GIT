{
    "id": "LUCENE-8102",
    "title": "CompiledAutomaton performance for determining common suffix",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "7.1",
        "status": "Open",
        "type": "Improvement",
        "components": [
            "core/FSTs"
        ],
        "fix_versions": []
    },
    "description": "We're using the automaton package as part of Elasticsearch for doing regexp queries.  Our business requires us to process rather complex regular expressions, for example (we have more complex examples, but this one illustrates the problem):\n\n\n        (\u00a6.)*(\u00a6?[^\u00a6]){1,10}ab(\u00a6.)*(\u00a6?[^\u00a6]){1,10}c(\u00a6.)*(\u00a6?[^\u00a6]){1,10}d\n\n\n\nWith a large enough value of maxDeterminizedStates, this works.  The problem we're having is that the conversion of this regular expression to a CompiledAutomaton takes very long.  Almost all of the time goes into determining the common suffix for the Automaton (which is \"d\" in this example) - calculated with a call to Operations.getCommonSuffixBytesRef.\n\nThis suffix is only used as an optimization.  Skipping the calculation of this suffix allows us to process these kinds of queries.\n\n\n\tWould it be possible to introduce a way to skip the calculation of this common suffix (ideally something we control from within our query to Elasticsearch)?\n\tOr would it be possible to take a look at this getCommonSuffixBytesRef operation, to see if it can be optimized?  Most of the time goes to determinizing the reversed automaton - maybe this can be avoided somehow?\n\n\n\n\nReaction from Mike McCandless on the mailing list:\nThis is just an optimization; maybe we should expose an option to disable it?\nOr maybe we can find the common suffix on an NFA instead, to avoid determinization?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16295003",
            "date": "2017-12-18T13:48:12+0000",
            "content": "The optimization speeds up leading wildcard type-queries (such as wildcard \"*foo\" or regex \".*foo\") which are far more common e.g. on the users list than the example presented on this issue, so I really think we should keep it. \n\nThe regex here is quite obscene, maybe its the thing that should be optimized?  ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16295157",
            "date": "2017-12-18T15:53:56+0000",
            "content": "Also here are few more ideas:\n\n\tThere is a TODO in the code regarding using found sink state... a method findSinkState was added here and is actually called, but its not used to determine whether or not common suffix should be computed, but only if this really works (there should be some tests)\n\tThe optimization could be guarded with a state count check maybe (something absurd).\n\n\n\nEither way, I think its really important not to regress on common \"stupid simple\" queries like leading wildcards.  ",
            "author": "Robert Muir"
        }
    ]
}