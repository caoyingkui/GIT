{
    "id": "LUCENE-7152",
    "title": "Refactor lucene-spatial GeoUtils to core",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "GeoUtils contains a lot of common spatial mathematics that can be reused across multiple packages. As discussed in LUCENE-7150 this issue will refactor GeoUtils to a new o.a.l.util.geo package in core that can be the home for other reusable spatial utility classes required by field and query implementations.",
    "attachments": {
        "LUCENE-7152.patch": "https://issues.apache.org/jira/secure/attachment/12796414/LUCENE-7152.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15218875",
            "author": "David Smiley",
            "date": "2016-03-30T21:12:25+0000",
            "content": "-1 sorry.  I've been following LUCENE-7150 and it's unclear to me why GeoUtils should be added to core.  It seems reasonable that the spatial3d module have a dependency on the spatial module.  Likewise I expect spatial-extras will depend on the spatial module in the future too when a GeoPointSpatialStrategy gets written.  If in the future for reasons we might not forsee today we would like to use GeoUtils in non-spatial modules (perhaps expressions?), then I could understand putting it in core.  I just think it's better organized to keep spatial code in our spatial modules. "
        },
        {
            "id": "comment-15219910",
            "author": "Michael McCandless",
            "date": "2016-03-31T14:13:36+0000",
            "content": "David Smiley what if we limit it to very basic argument validation?  I would start with just checkLatitude and checkLongitude, in core.\n\nI think that's the lesser evil, vs. additional dependencies between modules? "
        },
        {
            "id": "comment-15219921",
            "author": "David Smiley",
            "date": "2016-03-31T14:20:39+0000",
            "content": "-0 ok and mark @lucene.internal  Possibly rename to LatLonCheck? "
        },
        {
            "id": "comment-15220748",
            "author": "Nicholas Knize",
            "date": "2016-03-31T22:12:46+0000",
            "content": "Initial quick patch includes the following:\n\n\n\trefactors o.a.l.spatial.util.GeoUtils from spatial to core module in package o.a.l.geo\n\tKeeps GeoRect in spatial module and refactors circleToBBox polyToBBox to GeoRect.fromPointDistance GeoRect.fromPolygon, respectively\n\tRefactors axisLat and error constant to GeoRect\n\tRemoves some unnecessary sloppy math (e.g., sloppySin)\n\n "
        },
        {
            "id": "comment-15220750",
            "author": "Robert Muir",
            "date": "2016-03-31T22:14:03+0000",
            "content": "I dont think we need to bring complexity to the user just to have sane apis. Making sandbox/ and geo3d/ and who knows what else depend on spatial/ is confusing. \n\nThe main advantage of stuff like checkLatitude and checkLongitude is that it helps detect and prevent a very common trap caused by the immaturity of the geospatial world. I know it makes sense to them somehow in their insane brains, that some things should take lat/lon and others lon/lat, but in practice this causes major issues. So adding these parameter checks is a huge win for usability, and I do not think we should have to incur a huge usability loss (crazy module dependencies) to have it.\n\nI don't think we are talking about a lot of code here. For example the entirety of LatLonPoint/GeoPointField 2D geo just needs to be able to do basic stuff like form a bounding box (for distance query and efficient sorting), compute if something is in a polygon, etc. Its really just a few methods and actually the api surface area can be reduced more: GeoPointField can be refactored to look more like LatLonPoint: just one public class to do everything, and we can make all its queries etc package-private too.\n\nAll in all, what are we talking about here? like 5 public classes to have this in a .geo package in core? I think in this day and age it is reasonable to treat this stuff as a core capability, it covers the majority use case and extra modules can have more esoteric features? I also think its important that other modules can do basic things efficiently without all of them depending on spatial. For example expressions lets you incorporate distance but it does not do it as efficiently as LatLonPoint's distance sort, but maybe it could with some refactoring. Why should it have to depend on spatial/ to compute a simple bounding box? This kind of thing leads to inconsistencies and code duplication. "
        },
        {
            "id": "comment-15220764",
            "author": "Michael McCandless",
            "date": "2016-03-31T22:20:59+0000",
            "content": "I think in this day and age it is reasonable to treat this stuff as a core capability\n\n+1 "
        },
        {
            "id": "comment-15220816",
            "author": "Michael McCandless",
            "date": "2016-03-31T22:54:02+0000",
            "content": "Initial quick patch includes the following:\n\n+1, thanks Nicholas Knize!  This is really a bare minimal geo methods and one constant. "
        },
        {
            "id": "comment-15220824",
            "author": "Michael McCandless",
            "date": "2016-03-31T22:58:59+0000",
            "content": "Removes some unnecessary sloppy math (e.g., sloppySin)\n\nHmm, it looks like you replaced sloppySin with Math.sin?  Should we maybe do that separately, and keep this change rote?  I'm just not sure if there are performance implications with that change ... "
        },
        {
            "id": "comment-15220827",
            "author": "Robert Muir",
            "date": "2016-03-31T23:02:44+0000",
            "content": "I think we can do it separately, actually a \"proper\" sloppy sin is not really that bad, its more about api visibility, i hate that cos is already public and i don't think we should expose a trig library  If e.g. bounding box code is in the same package as haversin, then this can be done package-private and its another story. But yeah, followup I think? "
        },
        {
            "id": "comment-15220981",
            "author": "Robert Muir",
            "date": "2016-04-01T01:53:02+0000",
            "content": "Just wasted some fun time fighting the build system because my patch in LUCENE-7153 exposes a class in a sandbox/ public api from spatial/\n\nThese kinds of things are important to think about when considering \"spatial module madness\" versus just e.g. having 5 key classes in core. It is not just harder on the user, it is harder on us too. Fortunately, I know the necessary voodoo. "
        },
        {
            "id": "comment-15221755",
            "author": "Nicholas Knize",
            "date": "2016-04-01T14:26:07+0000",
            "content": "Updated patch:\n\n\n\trebased with polygon updates\n\trebased with mean radius\n\tadded back sloppy sin (to be changed in a separate issue)\n\n "
        },
        {
            "id": "comment-15221796",
            "author": "David Smiley",
            "date": "2016-04-01T14:56:08+0000",
            "content": "+1 to your patch Nick.\n\nI think in this day and age it is reasonable to treat this stuff as a core capability\n\nIf highlighting, suggesting, etc. aren't a \"core\" part of search (thus Lucene core) yet spatial somehow is... well, ... I'm rendered speechless.  Spatial is cool and important; many (but not all!) users want it.  But this is so for just about everything else we have.  I'm trying to keep things organized.  It'd be confusing to have some spatial in core and some not in core.  And if somehow it makes things harder for spandbox particularly, I think that's no reason to base decisions on.\n\n\"spatial module madness\" \n\nI don't think the current situation is \"madness\" but you do... okay... yet isn't it self-imposed?  I was always a fan of keeping all our spatial code in one spatial module.  Clearly that's simple for users to grok too. "
        },
        {
            "id": "comment-15221819",
            "author": "Robert Muir",
            "date": "2016-04-01T15:12:11+0000",
            "content": "\nI don't think the current situation is \"madness\" but you do... okay... yet isn't it self-imposed? I was always a fan of keeping all our spatial code in one spatial module. Clearly that's simple for users to grok too.\n\nBecause putting all stuff (both 99% case and more esoteric stuff) in a module does not solve the problem. It means as i just mentioned above, things like expressions have to rely on spatial/ just to do very basic things like make a bounding box.\n\nThis is why i think the 99% basic use case should be in core. It keeps things from being a rat's nest. "
        },
        {
            "id": "comment-15221889",
            "author": "ASF subversion and git services",
            "date": "2016-04-01T16:05:03+0000",
            "content": "Commit 3f217aba6d4422d829be5ad77b02068c130dc7d3 in lucene-solr's branch refs/heads/master from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3f217ab ]\n\nLUCENE-7152: Refactor GeoUtils from lucene-spatial to core module. "
        },
        {
            "id": "comment-15221891",
            "author": "ASF subversion and git services",
            "date": "2016-04-01T16:05:54+0000",
            "content": "Commit 637dce83e29fe23735256f25f0c9881ed2546520 in lucene-solr's branch refs/heads/branch_6x from nknize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=637dce8 ]\n\nLUCENE-7152: Refactor GeoUtils from lucene-spatial to core module. "
        },
        {
            "id": "comment-15278938",
            "author": "Hoss Man",
            "date": "2016-05-10T21:15:18+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}