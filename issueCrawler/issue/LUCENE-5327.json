{
    "id": "LUCENE-5327",
    "title": "Expose getNumericDocValues and getBinaryDocValues at toplevel reader and searcher levels",
    "details": {
        "components": [
            "core/search"
        ],
        "fix_versions": [],
        "affect_versions": "4.5",
        "priority": "Major",
        "labels": "",
        "type": "Improvement",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Expose NumericDocValues and BinaryDocValues in both IndexReader and IndexSearcher apis.",
    "attachments": {
        "patch.diff": "https://issues.apache.org/jira/secure/attachment/12612112/patch.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-11-05T06:13:38+0000",
            "content": "Cant you just use MultiDocValues?\n\nAnd if we are to do this, why duplicate that code? ",
            "author": "Robert Muir",
            "id": "comment-13813684"
        },
        {
            "date": "2013-11-05T15:17:06+0000",
            "content": "Oh, I didn't know about MultiDocValues.\nI am happy to change it to use MultiDocValues. Before doing this, do you think this makes sense? I suppose there was a reason for leaving it out of the IndexReader api and introduce MultiDocValues in the first place? ",
            "author": "John Wang",
            "id": "comment-13813973"
        },
        {
            "date": "2013-11-08T06:48:15+0000",
            "content": "DocValues are not really fast with MultiDocValues, because it uses a binary search to find the document ID.\n\nIf you want them on the IndexReader level, use SlowCompositeReaderWrapper.wrap(yourReader), which exposes all atomic APIs on a composite reader, too. This is easier to use than MultiDocValues, because it covers more cases.\n\nThere is a reason to differentiate between composite and atomic readers: Stuff that can be done on the atomic level natively and fast should be exposed via AtomicReader, but only stuff that can be done fast on the composite level, should be exposed on the composite level. Stored fields are some special case, because they are used quite often to display search results, but DocValues aren't. This is why they are in the top-level IndexReader API (which is wrong from the standpoint of code design, but it is more for ease of use).\n\nFor everything else there are tons of wrapper APIs like SlowCompositeReaderWrapper [extends AtomicReader] which emulates the old Lucene 3.x way of IndexReader before they were splitted). By using them you know, that it might not be the fastest approach.\n\nPlease close this issue as won't fix, thanks. ",
            "author": "Uwe Schindler",
            "id": "comment-13817051"
        },
        {
            "date": "2013-11-10T04:46:23+0000",
            "content": "Hi Uwe and Robert for the feedback. I like the API giving hint about performance impacts.\n\nWhat do you think about the IndexSearcher API providing acess to docvalues? Currently, calls such as document() and termVector() can be more expensive.\n\nThanks\n\nJohn ",
            "author": "John Wang",
            "id": "comment-13818355"
        },
        {
            "date": "2013-11-10T06:34:12+0000",
            "content": "I think it will look odd to have DV API on IndexSearcher but not IndexReader. I can already see people asking \"how come\". The .document() is irrelevant, since the same API exists on IndexReader, we expose it on IndexSearcher for convenience reasons only, since users use IndexSearcher to execute a search, it's easier for them to call .document() and .termVectors() to build up the search results.\n\nAlso, I think it's bad if we only expose BDV and NDV on the API.\n\nI think you should just use MultiDV. Irrespective of whether it's slower or not, I feel it's wrong to expose those APIs on IndexSearcher if they are not on IndexReader. ",
            "author": "Shai Erera",
            "id": "comment-13818375"
        },
        {
            "date": "2013-11-10T08:02:47+0000",
            "content": "Perhaps I should have explained our usecase, which is to build up the search results.\n\nAfter a search, you essentially get a set of internal docids, they are not useful to the application. On the IndexSearcher API, the apis you use to build up the search result, as your said, are document() call. Calling document to extract stored fields essentially is too expensive for us. Instead, we keep an application per document UID in a numeric docvalue. Our search result is basically a list of these UIDs and further result decoration is done higher up in the application logic. I have seen this pattern in numerous Lucene applications.\n\nThis is essentially the motivation behind this ticket. Currently, to do this I am essentially writing this code:\n\nGet in the underlying IndexReader for the IndexSearcher\nand\nfor each ScoreDoc:\n    find the atomicReader for ScoreDoc.doc\n    return atomicReader.getNumericDocValue(ScoreDoc.doc - base);\n\nThis is a little cumbersome, it would be nice to allow the IndexSearcher return the uid in the likeness of the document call.\n\nI am happy to close this ticket if you guys don't think this API is useful.\n\nThanks\n\n-John ",
            "author": "John Wang",
            "id": "comment-13818392"
        },
        {
            "date": "2013-11-10T08:13:13+0000",
            "content": "I don't think the API isn't useful, just that it's wrong to have it on IndexSearcher where there's no matching API on IndexReader.\n\nIf you use MultiDocValues, you shouldn't write that complicated code, you could instead do:\n\n\nNumericDocValues uid = MultiDocValues.getNumericDocValues(searcher.getIndexReader(), \"uid\");\nfor (ScoreDoc sd : topDocs.scoreDocs) {\n  long uidValue = uid.get(sd.doc);\n}\n\n\n\nThat's not so bad I think? I mean, IndexSearcher.getNumericDocValues() will essentially save you just the first call, so I don't see any great benefits in having the API there.\n\nIf you want to avoid the binary search, you should re-sort the topDocs by increasing doc IDs, then iterate on reader.leaves(), obtain the NDV from each AtomicReader and pull the right values. First, I don't think you should do that, unless you're asking for thousands of hits. Second, this won't be solved by adding IndexSearcher.getNDV().\n\nI agree w/ Uwe, I think we should close that issue as \"Won't Fix\". ",
            "author": "Shai Erera",
            "id": "comment-13818394"
        },
        {
            "date": "2013-11-10T08:30:46+0000",
            "content": "done, closed. ",
            "author": "John Wang",
            "id": "comment-13818402"
        }
    ]
}