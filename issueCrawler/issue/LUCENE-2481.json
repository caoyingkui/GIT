{
    "id": "LUCENE-2481",
    "title": "Enhance SnapshotDeletionPolicy to allow taking multiple snapshots",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "A spin off from here: http://www.gossamer-threads.com/lists/lucene/java-dev/99161?do=post_view_threaded#99161\n\nI will:\n\n\tReplace snapshot() with snapshot(String), so that one can name/identify the snapshot\n\tAdd some supporting methods, like release(String), getSnapshots() etc.\n\tSome unit tests of course.\n\n\n\nThis is mostly written already - I want to contribute it. I've also written a PersistentSDP, which persists the snapshots on stable storage (a Lucene index in this case) to support opening an IW with existing snapshots already, so they don't get deleted. If it's interesting, I can contribute it as well.\n\nPorting my patch to the new API. Should post it soon.",
    "attachments": {
        "LUCENE-2481-3x.patch": "https://issues.apache.org/jira/secure/attachment/12445690/LUCENE-2481-3x.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-05-27T18:31:43+0000",
            "content": "Enhancements to SnapshotDeletionPolicy + tests.\n\nAlso, I've added a PersistentSDP, which persists the snapshots information in a Lucene Directory. In case the JVM crashes, the info from the Directory can be used to open an IndexWriter on the other Directory w/ already snapshotted commits (prevents their deletion). ",
            "author": "Shai Erera",
            "id": "comment-12872319"
        },
        {
            "date": "2010-05-28T12:17:51+0000",
            "content": "If there are no comments/objections, I'd like to commit this in 2-3 days. ",
            "author": "Shai Erera",
            "id": "comment-12872945"
        },
        {
            "date": "2010-05-28T15:05:55+0000",
            "content": "This looks nice Shai!\n\nSo now you can keep any number of outstanding snapshots, and, if you\nuse PersistentSnapshotDeletionPolicy, you can keep these snapshots\nalive across close/open of IndexWriter, right?\n\nAnd, if one has some other way to persist snapshots (instead of using\na Lucene index as PersistentSnapshotDeletionPolicy does), one can\nsimply subclass SnapshotDeletionPolicy\n\nCan you rename \"String segment\" -> \"String segmentsFileName\" (or\nsegmentsFile)?  Ie, this is referring to the collection of segments\nthat make up a given commit?  It's confusing to see \"segment\" all over\nbecause it makes me think you're somehow doing something\nper-segment... ",
            "author": "Michael McCandless",
            "id": "comment-12873004"
        },
        {
            "date": "2010-05-29T11:12:04+0000",
            "content": "you can keep these snapshots alive across close/open of IndexWriter, right?\n\nYes, that's right ! In fact, PSDP exists for exactly that purpose, and can also serve as an example for whoever would like to persist the snapshots elsewhere.\n\nCan you rename \"String segment\" -> \"String segmentsFileName\" (or segmentsFile)?\n\nI've renamed it to segmentsFileName, and also segmentToIDs -> segmentsFileToIDs to make it clearer. Thanks for the feedback !\n\nI may commit this tomorrow. ",
            "author": "Shai Erera",
            "id": "comment-12873271"
        },
        {
            "date": "2010-05-29T19:09:39+0000",
            "content": "Still dislike that string key you have to generate somehow. And if you just want some threads to get and release snapshots independently? You have to devise some random key generation scheme? ",
            "author": "Earwin Burrfoot",
            "id": "comment-12873324"
        },
        {
            "date": "2010-05-29T19:22:21+0000",
            "content": "And if you just want some threads to get and release snapshots independently? You have to devise some random key generation scheme? \n\nNo - you can simply use the thread's name .\n\nBut really, the ID is important for different processes that take a snapshot of the same commit for different purposes. It makes it more clear who holds which snapshot. Also better for debugging later, if say the JVM crashed, and you use the persistency layer, you can tell which of your processes kept a snapshot (and didn't release yet). ",
            "author": "Shai Erera",
            "id": "comment-12873326"
        },
        {
            "date": "2010-05-30T12:33:01+0000",
            "content": "Another thing about IDs - they are more user-level API than IndexCommit.\n\nSo Earwin, I agree that we can have snapshot() and release(IndexCommit) to achieve the same functionality (need to be careful w/ multiple snapshots over the same IC). But for users, passing in an IndexCommit is not too friendly. Also, one customer of the API already uses the ID to encode some information that's interesting to him (e.g. name of the process + timestamp) which shows why IDs should remain. It's kind of like the commitUserData given to commits. Another reason is sharing the ID between two different code segments. It's easier to share a String-ID, than to share an IndexCommit. And what exactly is IndexCommit, and how does it translate to a key? Just the segmentsFileName? See - that's a too low level implementation detail IMO ... ",
            "author": "Shai Erera",
            "id": "comment-12873418"
        },
        {
            "date": "2010-05-31T05:34:10+0000",
            "content": "Some javadoc updates and member renames (as Mike suggested). I plan to commit this shortly. ",
            "author": "Shai Erera",
            "id": "comment-12873549"
        },
        {
            "date": "2010-05-31T14:38:03+0000",
            "content": "Committed revision 949730 (3x).\nCommitted revision 949756 (trunk). ",
            "author": "Shai Erera",
            "id": "comment-12873679"
        },
        {
            "date": "2011-03-30T15:50:18+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013432"
        }
    ]
}