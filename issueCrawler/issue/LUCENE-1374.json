{
    "id": "LUCENE-1374",
    "title": "Merging of compressed string Fields may hit NPE",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.4"
        ],
        "affect_versions": "2.4",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This bug was introduced with LUCENE-1219 (only present on 2.4).\n\nThe bug happens when merging compressed string fields, but only if bulk-merging code does not apply because the FieldInfos for the segment being merged are not congruent.  This test shows the bug:\n\n\n  public void testMergeCompressedFields() throws IOException {\n    File indexDir = new File(System.getProperty(\"tempDir\"), \"mergecompressedfields\");\n    Directory dir = FSDirectory.getDirectory(indexDir);\n    try {\n      for(int i=0;i<5;i++) {\n        // Must make a new writer & doc each time, w/\n        // different fields, so bulk merge of stored fields\n        // cannot run:\n        IndexWriter w = new IndexWriter(dir, new WhitespaceAnalyzer(), i==0, IndexWriter.MaxFieldLength.UNLIMITED);\n        w.setMergeFactor(5);\n        w.setMergeScheduler(new SerialMergeScheduler());\n        Document doc = new Document();\n        doc.add(new Field(\"test1\", \"this is some data that will be compressed this this this\", Field.Store.COMPRESS, Field.Index.NO));\n        doc.add(new Field(\"test2\", new byte[20], Field.Store.COMPRESS));\n        doc.add(new Field(\"field\" + i, \"random field\", Field.Store.NO, Field.Index.TOKENIZED));\n        w.addDocument(doc);\n        w.close();\n      }\n\n      byte[] cmp = new byte[20];\n\n      IndexReader r = IndexReader.open(dir);\n      for(int i=0;i<5;i++) {\n        Document doc = r.document(i);\n        assertEquals(\"this is some data that will be compressed this this this\", doc.getField(\"test1\").stringValue());\n        byte[] b = doc.getField(\"test2\").binaryValue();\n        assertTrue(Arrays.equals(b, cmp));\n      }\n    } finally {\n      dir.close();\n      _TestUtil.rmDir(indexDir);\n    }\n  }\n\n\n\nIt's because in FieldsReader, when we load a field \"for merge\" we create a FieldForMerge instance which subsequently does not return the right values for getBinary\n{Value,Length,Offset}\n.",
    "attachments": {
        "LUCENE-1374.patch": "https://issues.apache.org/jira/secure/attachment/12389419/LUCENE-1374.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-09-03T11:51:11+0000",
            "content": "Attached patch that fixes AbstractField's getBinaryValue() and getBinaryLength() methods to fallback to \"fieldsData instanceof byte[]\" when appropriate.  I plan to commit shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12627968"
        },
        {
            "date": "2008-09-03T14:00:07+0000",
            "content": "Committed revision 691617. ",
            "author": "Michael McCandless",
            "id": "comment-12628002"
        },
        {
            "date": "2008-09-03T17:01:46+0000",
            "content": "\"ant test\" on 691617 for me fails on the following test:\n\n  <testcase classname=\"org.apache.lucene.index.TestIndexWriter\" name=\"testMergeCompressedFields\" time=\"0.36\">\n    <error message=\"could not delete C:\\lucene\\691647\\build\\test\\mergecompressedfields_5.cfs\" type=\"java.io.IOException\">java.io.IOException: could not delete C:\\lucene\\691647\\build\\test\\mergecompressedfields_5.cfs\n\tat org.apache.lucene.util._TestUtil.rmDir(_TestUtil.java:37)\n\tat org.apache.lucene.index.TestIndexWriter.testMergeCompressedFields(TestIndexWriter.java:4111)\n</error>\n  </testcase>\n\nIt might be one of those things that shows up only on Windows. In any case, adding a call to IndexReader.close() in testMergeCompressedFields() seems to fix things up:\n\n\n      IndexReader r = IndexReader.open(dir);\n      for(int i=0;i<5;i++) {\n        Document doc = r.document(i);\n        assertEquals(\"this is some data that will be compressed this this this\", doc.getField(\"test1\").stringValue());\n        byte[] b = doc.getField(\"test2\").binaryValue();\n        assertTrue(Arrays.equals(b, cmp));\n      }\n      r.close();  // <------------------------------- New line\n    } finally {\n      dir.close();\n      _TestUtil.rmDir(indexDir);\n    }\n\n\n\nI guess technically the r.close() probably belongs in a finally block as well. ",
            "author": "Chris Harris",
            "id": "comment-12628055"
        },
        {
            "date": "2008-09-03T17:33:08+0000",
            "content": "Woops, you're right: I too see that failure (to rmDir the directory) only on Windows.  I'll commit a fix.  Thanks Chris! ",
            "author": "Michael McCandless",
            "id": "comment-12628067"
        }
    ]
}