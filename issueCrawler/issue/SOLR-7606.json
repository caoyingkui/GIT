{
    "id": "SOLR-7606",
    "title": "ToParentBlockJoinQuery fails with AIOOBE under certain circumstances",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "4.10.4",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I had a customer using BlockJoin with Solr. He executed a block join query and the following appeared in Solr's logs:\n\n\n28 May 2015 17:19:20  ERROR (SolrException.java:131) - java.lang.ArrayIndexOutOfBoundsException: -1\n        at org.apache.lucene.codecs.lucene40.BitVector.get(BitVector.java:149)\n        at org.apache.lucene.search.join.ToParentBlockJoinQuery$BlockJoinScorer.nextDoc(ToParentBlockJoinQuery.java:293)\n        at org.apache.lucene.search.Weight$DefaultBulkScorer.scoreAll(Weight.java:192)\n        at org.apache.lucene.search.Weight$DefaultBulkScorer.score(Weight.java:163)\n        at org.apache.lucene.search.BulkScorer.score(BulkScorer.java:35)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:621)\n        at org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:297)\n        at org.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher.java:209)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListNC(SolrIndexSearcher.java:1619)\n        at org.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher.java:1433)\n        at org.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher.java:514)\n        at org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:484)\n        at org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:218)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:135)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1976)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:777)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:418)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:207)\n        at org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:235)\n        at org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:206)\n        at org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:233)\n        at org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:191)\n        at org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:127)\n        at org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:102)\n        at org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:109)\n        at org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:298)\n        at org.apache.coyote.http11.Http11Processor.process(Http11Processor.java:852)\n        at org.apache.coyote.http11.Http11Protocol$Http11ConnectionHandler.process(Http11Protocol.java:588)\n        at org.apache.tomcat.util.net.JIoEndpoint$Worker.run(JIoEndpoint.java:489)\n        at java.lang.Thread.run(Thread.java:745)\n\n\n\nI debugged this stuff and found out when this happens:\n\nThe last block of documents was not followed by a parent. If one of the child documents without a parent at the end of the index match the inner query, scorer calls nextSetBit() to find next parent document. This returns -1. There is an assert afterwards that checks for -1, but in production code, this is of course never executed.\n\nIf the index has deletetions the false -1 is passed to acceptDocs and then triggers the above problem.\n\nWe should change the assert to another IllegalStateException() which is used to notify the user if the orthogonality is broken. By that the user gets the information that his index is broken and contains child documents without a parent at the very end of a segment.\n\nI have seen this on 4.10.4. Maybe thats already fixed in 5.0, but I just open this here for investigation. This was clearly a problem in the index, but due to Solr's buggy implementation of parent/child documents (you have to set the parent flag in contrast to Elasticsearch on your own - which is stupid!!!) this was not detected at indexing time. We should open an issue in Solr to fix this bad behaviour and make solr automatically add the parent field (it only adds a \"root\" field automatically, maybe it should also add a \"parent\" field automatically).",
    "attachments": {
        "SOLR-7606.patch": "https://issues.apache.org/jira/secure/attachment/12739197/SOLR-7606.patch",
        "LUCENE-6512.patch": "https://issues.apache.org/jira/secure/attachment/12735916/LUCENE-6512.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-05-28T17:25:01+0000",
            "author": "Uwe Schindler",
            "content": "In trunk and 5.x the same happens, just that -1 is replaced by DocIdSetIterator.NO_MORE_DOCS. But leads to the same problem. ",
            "id": "comment-14563287"
        },
        {
            "date": "2015-05-28T17:27:35+0000",
            "author": "Uwe Schindler",
            "content": "Patch that solves the issue in trunk and 5.x. In 4.10.x, we must replace the NO_MORE_DOCS by -1. ",
            "id": "comment-14563292"
        },
        {
            "date": "2015-05-28T19:53:24+0000",
            "author": "Adrien Grand",
            "content": "+1 ",
            "id": "comment-14563574"
        },
        {
            "date": "2015-05-28T21:07:50+0000",
            "author": "Mikhail Khludnev",
            "content": "This was clearly a problem in the index, but due to Solr's buggy implementation of parent/child documents (you have to set the parent flag in contrast to Elasticsearch on your own - which is stupid!!!) this was not detected at indexing time. We should open an issue in Solr to fix this bad behaviour and make solr automatically add the parent field (it only adds a \"root\" field automatically, maybe it should also add a \"parent\" field automatically).\n\nThere is SOLR-5211, but I can't propose a viable way. Do you mean to add  {parent=true} and {root=<PK>} by default always? without any killswitch?  ",
            "id": "comment-14563690"
        },
        {
            "date": "2015-05-28T21:36:36+0000",
            "author": "Uwe Schindler",
            "content": "root=<PK> is already on by default. I would propose to do the same for a new parent=true field. This would be consistent. Is there a killswitch for root? I did not find one, because to me this field is useless - unless you want to delete documents (by this you can delete the parent and all childs will be deleted, too). But the parent field should be mandatory (and automatic). Because block join queries would never work without them!\n\nIn any case the missing check that lead to this issue was only detected by this  But I would hope that Solr fixes this issue (maybe like described above). ",
            "id": "comment-14563735"
        },
        {
            "date": "2015-05-29T09:28:44+0000",
            "author": "Robert Muir",
            "content": "Sorry, this is a solr bug.\n\n-1 to changing this query, to check that you abused things wrongly at indexing time. I'm sorry, this is not the job of lucene's queries, and we will slow them for everyone by doing this stuff. \n\nWe gotta draw a line and let queries be fast, that is why we do indexing at all! ",
            "id": "comment-14564466"
        },
        {
            "date": "2015-05-29T09:34:35+0000",
            "author": "Michael McCandless",
            "content": "This case happened because a block of documents was added to the index, but (incorrectly) there was no parent doc as the last document?\n\nI agree it's not good to expect the query to have to check for this for every block and every query, at search time.  And unfortunately we've already added a number of such query-time checks (used to be asserts only): search for all the \"throw new IllegalStateException\"s.\n\nI think we need better index-time checking/support somehow, e.g. an API on top of IW.addDocuments that's somehow told what the parent/child criteria is, and then validates during indexing that the block is correct? ",
            "id": "comment-14564470"
        },
        {
            "date": "2015-05-29T09:52:59+0000",
            "author": "Uwe Schindler",
            "content": "I agree with both of you. I just say:\n\n\twe already have a lot of such checks, so this one is just another one\n\tI would agree to not commit this, if we in turn remove the other checks.\n\n\n\nBut in any case, we have to fix the block indexing then to do the checks at index time. In addition, if you delete a parent doc, the childs should be deleted automatically, too. This was likely the problem that lead to this bug. ",
            "id": "comment-14564499"
        },
        {
            "date": "2015-05-29T10:14:08+0000",
            "author": "Uwe Schindler",
            "content": "One other solution for the query time checks maybe: We could try/catch the whole parent/child logic with some try/catch block and if stuff like AIOOBE happens, it rethrows a useful message. We could then remove all checks we currently have (all those IllegalStateEx). This would be much cheaper that the tons of checks we have now.\n\nBut I agree, we should fix indexing or at least provide a block join indexing api that allows to index and delete blocks with some definition which fields to use for parent and child documents. ",
            "id": "comment-14564524"
        },
        {
            "date": "2015-05-30T14:41:23+0000",
            "author": "Yonik Seeley",
            "content": "Seems like Lucene's implementation is overly constrained - it would be nice to just remove all these checks that throw exceptions / assertions. ",
            "id": "comment-14566014"
        },
        {
            "date": "2015-05-30T15:26:04+0000",
            "author": "Uwe Schindler",
            "content": "Hi Yonik,\nI agree. The problem is currently Solr - this is why Robert Muir moved this issue over to Solr:\n\n\tIf you delete just the parent document (because the child documents are not automatically removed), you exactly run into the issue described here. This was exactly the issue at my customer, a code bug failed to delete the child. So the very last parent in the segment was deleted, but the childs stayed alive -> AIOOBE.\n\tSolr should make the \"parent\" marker field an internal field like \"root\" (maybe named \"parent\"). If those 2 fields are internal, then stuff like deleting childs would work automatically. Or if you forget to add the parent marker.\n\n\n\nI agree with Michael McCandless that we should maybe add a separate API in Lucene's Join module that allows indexing and deleting blocks and Lucene takes care of also deleting Childs automatically and adding the parent \"marker\" during indexing. If we have this, it is safe to use the queries without the checks, but currently its very very trappy - unfortunately.\n\nI would like to fix this current issue by a try...catch (AIOOBE). But we should further improve the query and indexing. It is really too trappy, especially for the Solr \"end user\". Elasticsearch is safe, because it's \"nested document\" functionality is completely hidden to the end user. It is impossible there to hit any of the traps as end user. ",
            "id": "comment-14566051"
        },
        {
            "date": "2015-05-30T15:36:25+0000",
            "author": "Uwe Schindler",
            "content": "Patch that moves to catching the index out of bounds as a \"buest effort\". This has no slowdown to current impl.\n\nWe should still look into improving - but thats another issue:\n\n\tnew API for indexing / deleting / updating blocks (in \"joins\" module only)\n\timprove Solr\n\n ",
            "id": "comment-14566060"
        },
        {
            "date": "2015-06-12T10:05:31+0000",
            "author": "Mikhail Khludnev",
            "content": "SOLR-7606.patch replaces assert to throw ISE, and provides test coverage in TestBlockJoinValidation.testLastBlockWithoutParent().  \nDUH2 assigns root=PK to the single doc also. it allows to overwrite parent as childless and propagates parent's deleteById to the block, here are tests for this. \nhowever, deleteByQuery and perhaps overwrite=false is still an option to shoot the leg. \nThere few test failures in other tests, it might caused by the change. If anybody consider the patch I'll look through failures, and fix them. Does anybody need these fixes? ",
            "id": "comment-14583208"
        },
        {
            "date": "2015-06-12T10:47:24+0000",
            "author": "Uwe Schindler",
            "content": "Please see my previous patch, which fixes the issue, too. Maybe merge with your test cases, thanks! ",
            "id": "comment-14583245"
        },
        {
            "date": "2015-06-12T19:04:40+0000",
            "author": "Mikhail Khludnev",
            "content": "Uwe Schindler sure, my patch is based on your from 28th  ",
            "id": "comment-14583905"
        },
        {
            "date": "2015-06-12T19:26:04+0000",
            "author": "Mikhail Khludnev",
            "content": "raised SOLR-7672 to mark parents always ",
            "id": "comment-14583938"
        },
        {
            "date": "2015-11-08T21:23:04+0000",
            "author": "Mikhail Khludnev",
            "content": "Uwe Schindler says\nWe should change the assert to another IllegalStateException() which is used to notify the user if the orthogonality is broken. By that the user gets the information that his index is broken and contains child documents without a parent at the very end of a segment.\n\nI'd like to clarify that existing if-throw-IllegalStateEx catch non-orthogonality fine. \nAIOOBE which doesn't differ much from ISE, IMHO occurs when:\n\n\tdelete(Query)/update happen\n\tpeople still supply parent scope filter as a bitmask.\n\n\n\nIn both cases query and filter are still orthogonal, and it's really hard to prevent them both.\n\nProposal\nToParentBJQ accepts BitSetProducer. What if this this guy does two checks, which I dream about?\n\n\tthe bitset has at least single tail bit set\n\tif deletion mask is present for this segment, there is no parents deleted (I can explain why it's so important)\n\n\n\nThese checks is done while we create a bitset, and after that, this valid bitset is cached! There will no runtime cost at all, and there will no AIOOBE!!\n\nThere are still some questions about implementation, but what do you think about the idea? \nMost of these checks should be done at Lucene level that makes all servers beneficial.    ",
            "id": "comment-14995814"
        },
        {
            "date": "2015-11-16T21:57:08+0000",
            "author": "Mikhail Khludnev",
            "content": "just checked trunk.\nthe particular row 293 has gone by LUCENE-6553\n\n -        if (acceptDocs != null && !acceptDocs.get(parentDoc)) {\n\n\nnow supplying broken parent filter yields \n\nCaused by: java.lang.IllegalStateException: child query must only match non-parent docs, but parent docID=2147483647 matched childScorer=class org.apache.lucene.search.TermScorer\n\n \ni.e. the root cause is captured by LUCENE-5375 already. ",
            "id": "comment-15007420"
        },
        {
            "date": "2015-11-16T22:34:29+0000",
            "author": "Mikhail Khludnev",
            "content": "attaching SOLR-7606.patch:\n\n\tit fixes Solr's BlockJoinParentQParser.java only, there is no Lucene changes, so far\n\tBlockJoinParentQParser.BitDocIdSetFilterWrapper remembers top readers which it was checked against.\n\t\n\t\tit's necessary because NoOpRegenerator can transfer it across top-level reader\n\t\ta check flag could be stored by every segments instead top-level reader, but I judge about a code perfomance by my gut feeling\n\t\n\t\n\tthus, it lazily (on every commit) invokes CheckJoinIndex from LUCENE-6589, I think it's affordable (see the point above).\n\ttest reproduces absence of last \"boundary\" parent in a segment, and no parent hits cases\n\tnote, that such check is possible for the root BJQ query, deeper levels seem a danger zone (btw, now it counts any enclosing queries, but have to count only bjq's TODO)\n\n\n\nif you second this approach, I'd also like to do here:\n\n\tcover deletes case with a test\n\talso cover {!child}\n\tit should be possible to use \"just a segment filter\" hack, when {!parent} is invoked without subordinate clause\n\thow does it work if second level bitset is broken on grandchidren search eg \n{!parent}\n...\n{!parent which=\"type:child -id:333\"}\n...\n\n ",
            "id": "comment-15007506"
        },
        {
            "date": "2015-11-16T22:36:08+0000",
            "author": "Mikhail Khludnev",
            "content": "The question to the audience beside of Solr: don't you like such check to be incorporated somewhere into o.a.lucene.s.j.BitSetProducer?   ",
            "id": "comment-15007512"
        }
    ]
}