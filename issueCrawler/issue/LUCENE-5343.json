{
    "id": "LUCENE-5343",
    "title": "Potential floating point precision error in ConjuncionScorer.score()",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "core/query/scoring"
        ],
        "affect_versions": "3.6.1,                                            3.6.3,                                            4.5,                                            4.5.1",
        "status": "Open",
        "fix_versions": []
    },
    "description": "I have been investigating an issue with document scoring and found that the ConjunctionScorer implements the score method in a way that can cause floating point precision rounding issues.  I noticed in some of my test cases that documents that have not been merged/optimized (I'm not sure of the correct terminology, they have a docNum of 0) have scorers added in a different order than optimized documents.  Using a float to maintain the sum of scores introduces the potential for floating point precision errors.  In turn this causes the score that is returned from the ConjunctionScorer to be different for some merged/unmerged documents that should have identical scores. \n\nExample: \n\nfloat sum1 = 0.0061859353f + 0.0061859353f + 0.0030929677f + 0.0030929677f + 0.0030929677f + 0.5010608f + 0.0061859353f; \n\nfloat sum2 =  0.0061859353f + 0.0061859353f + 0.0061859353f + 0.0030929677f + 0.0030929677f + 0.0030929677f + 0.5010608f; \n\nsum1 == 0.5288975; // Incorrect \nsum2 == 0.52889746; // Correct \n\nI also noticed that there is a comment in the 4.5.1 version of Lucene to the effect of: \n// TODO: sum into a double and cast to float if we ever send required clauses to BS1 \n\nIs there a reason that this has not been implemented yet?\n\n        public float score() throws IOException { \n                double sum = 0.0d; \n                for (int i = 0; i < scorers.length; i++) \n{ \n                        sum += scorers[i].score(); \n                }\n \n                return (float)sum; \n        }",
    "attachments": {},
    "issue_links": {},
    "comments": []
}