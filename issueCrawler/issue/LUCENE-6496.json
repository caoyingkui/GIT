{
    "id": "LUCENE-6496",
    "title": "Updatable OrdinalMap",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Bug"
    },
    "description": "The MultiDocValues.OrdinalMap that we have to today requires a rebuild on each reopen. When the OrdinalMap has been built, lookups are fast and the logic is simple. Many time rebuilding the the OrdinalMap isn't even an issue, because for low to medium cardinality fields the rebuilding doesn't take that much time. The time required to build the OrdinalMap depends on the number of unique terms in a field.\n\nFor high cardinality fields (lets say >= 1M terms) rebuilding the OrdinalMap can take some time to complete. This can then impact the NRT aspect of many applications (facets may rely on ordinal maps to be rebuilt before a new search can happen after the reopen).\n\nI like to explore a different OrdinalMap implementation that doesn't need to be rebuilt on each reopen. There are simple improvements that can made:\n\n\tLets say docs have only been marked as deleted, then we basically reuse the OrdinalMap that has already been built.\n\tIf no new terms have been introduced we can just add segment ordinal to global ordinal lookups to the OrdinalMap that has already been built.\n\n\n\nI think a complete OrdinalMap rebuild is inevitable, but it would be great if we could rebuild on a flush / merge instead of on each reopen.",
    "attachments": {
        "LUCENE-6496.patch": "https://issues.apache.org/jira/secure/attachment/12734821/LUCENE-6496.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14556126",
            "author": "Martijn van Groningen",
            "date": "2015-05-22T13:16:46+0000",
            "content": "Attached an initial patch:\n1. Added a common interface for OrdinalMap.\n2. Pulled the code from MultiDocValues.OrdinalMap to a concrete impl. called ImmutableOrdinalMap. I didn't yet remove MultiDocValues.OrdinalMap in order to keep this patch small. (otherwise code that uses it would also need to get modified)\n3. Added an UpdatableOrdinalMap impl that wraps an ImmutableOrdinalMap, but keeps track of changes. It holds the segment core keys for all segments and for new segments (created from the second ordinal build) it holds to segment ordinal to global ordinal lookup.\n\nThe UpdatableOrdinalMap as is now rebuilds if:\n\n\tA new term has been introduced.\n\tA segment that was previously known has disappeared.\n\tA new segment contains more than 128 unique values or the segment value ratio to the index value ratio is higher than 0.1 In total 20 or more segments are going to be reopened. These heuristics and defaults need to be verified and benchmarked.\n\n\n\nI still need to test the performance of the UpdatableOrdinalMap. There is a cost in looking up if a term already has a global ordinal and I need to figure out when it is okay to pay for this and when it is just better to rebuild completely. "
        },
        {
            "id": "comment-14556147",
            "author": "Robert Muir",
            "date": "2015-05-22T13:38:29+0000",
            "content": "Can we avoid the interface here? There is already an \"interface\" which is LongValues getGlobalOrds() and so on. Otherwise lets remove that.\n\nCan we consider just keeping the current one as-is and trying out the updatable one in sandbox or similar, so it can be iterated on?\n\nThe reason I ask, its critical to keep the complexity of this thing low. it is used by indexwriter for merging. "
        },
        {
            "id": "comment-14556254",
            "author": "Martijn van Groningen",
            "date": "2015-05-22T14:51:22+0000",
            "content": "After I chatted with Robert, I removed the ImmutableOrdinalMap impl and just let MultiDocValues.OrdinalMap implement the OrdinalMap interface. \n\nAlso I moved the UpdatableOrdinalMap to the sandbox module, so the updatable impl can be ironed out. For example the updatable ordinal stuff can may also be implemented as a DirectoryReader impl. "
        }
    ]
}