{
    "id": "SOLR-7871",
    "title": "Platform independent config file instead of solr.in.sh and solr.in.cmd",
    "details": {
        "components": [
            "scripts and tools"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.2.1",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "Spinoff from SOLR-7043\n\nThe config files solr.in.sh and solr.in.cmd are currently executable batch files, but all they do is to set environment variables for the start scripts on the format key=value\n\nSuggest to instead have one central platform independent config file e.g. bin/solr.yml or bin/solrstart.properties which is parsed by SolrCLI.java.",
    "attachments": {
        "SOLR-7871.patch": "https://issues.apache.org/jira/secure/attachment/12815738/SOLR-7871.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-08-04T20:18:01+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Questions that need to be solved\n\n\tSome of the properties such as JVM options need to be injected when Java starts\n\tWhat config format to choose, where it should live and what to name the file\n\tUpgradability - as suggested before, perhaps Solr should ship with e.g. bin/solr.yml.template and never overwrite user's copy\n\n\n\nBenefits of .yml is that it is future proof, supporting lists and other structures, but .properties is probably good enough for our needs. ",
            "id": "comment-14654285"
        },
        {
            "date": "2016-06-30T17:26:16+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I have continued a bit on this one.\n\nMy plan is to move the following functionality from solr.sh|cmd into a new SolrCliConfig.java:\n\n\tLocate correct config file and location\n\tParse the config file\n\tResolve SOLR_PID_DIR, SOLR_TIP, DEFAULT_SERVER_DIR etc\n\tConfigure defaults for SOLR_URL_SCHEME, SOLR_SSL_OPTS, SOLR_JETTY_CONFIG etc\n\n\n\nThe shell script will then call SolrCliConfig and get all variables in return.\nIn the first phase, we'll just return a string which the script can evaluate to set all variables.\n\nI propose that the new config file will be of a simple \"properties\" format similar to solr.in.sh and be called solr.conf. The new SolrCliConfig will use solr.conf if found, else fallback to and parse solr.in.* as well, for a smooth transition.\n\n ",
            "id": "comment-15357509"
        },
        {
            "date": "2016-07-01T11:55:19+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Attaching a work in progress patch which is able to resolve correct config file from the usual folders and parse both .sh and .cmd correctly (tested with current default files). A bunch of unit tests already written. The parser throws an exception if complex solr.in.* script is detected, then user needs to edit it first.\n\nNext step would be to add all the defaults to a central place, and then find a way to replace large chunks of variable magic from bin/solr.*\n\nI won't be able to continue on this during the summer, but will pick it up again in August... ",
            "id": "comment-15358848"
        },
        {
            "date": "2016-07-01T16:25:22+0000",
            "author": "Erick Erickson",
            "content": "Jan:\n\nI took a quick glance and it appears that SOLR-9194 still should be checked in, right? ",
            "id": "comment-15359214"
        },
        {
            "date": "2016-07-01T17:28:58+0000",
            "author": "Upayavira",
            "content": "If you make this look both in your config file, and also in environment variables, you will be able to take the functionality out of bin/solr, but maintain backwards compatibility. Also, I suspect that more and more applications will be expecting to be configured with environment variables given that is how Docker apps expect to be configured, so having both capabilities is valuable. ",
            "id": "comment-15359337"
        },
        {
            "date": "2016-07-01T20:37:37+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Sure! ",
            "id": "comment-15359589"
        },
        {
            "date": "2016-07-01T20:45:14+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Absolutely, that is what the current patch does. If a certain value is NOT explicitly configured in solr.in.sh, it will attempt to load from System Env variables, if it does not exist there, it will load from the application defaults map (which is going to be initialized from a solrcliconfig.properties inside of WEB-INF/classes.\n\nInitially I wanted to let environment variables override what was in solr.in.sh, but to keep back-compat, I currently do it the other way around. Anyways, I think we should ship future releases with a bin/solr.conf.template or bin/solr.yml.template where all is commented out and thus falls back to app defaults, unless people either configure environment variabele and/or rename the file to bin/solr.conf. ",
            "id": "comment-15359601"
        },
        {
            "date": "2016-09-06T13:02:53+0000",
            "author": "David Smiley",
            "content": "I think the key is, environment variables should override a config file. ",
            "id": "comment-15467362"
        },
        {
            "date": "2016-09-06T18:25:50+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Agree that env must override config file. ",
            "id": "comment-15468130"
        },
        {
            "date": "2017-05-08T07:41:29+0000",
            "author": "Noble Paul",
            "content": "finally, it this going to be a properties file or yaml file?  ",
            "id": "comment-16000376"
        },
        {
            "date": "2017-05-08T08:01:41+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "finally, it this going to be a properties file or yaml file?\nIn my latest patch I landed on properties format config named bin/solr.conf, which looks exactly like a simple solr.in.sh file:\n\nSOLR_PORT = 8080\n\n\n\nAt the end of the day, the more interesting discussion is whether we should move to a new format for 7.x, I can live with properties, yml, json, whatever  ",
            "id": "comment-16000409"
        },
        {
            "date": "2017-05-08T09:53:30+0000",
            "author": "Noble Paul",
            "content": "+1 for properties file format\n\nWhat is stopping us from rolling this out in 7.0 ? ",
            "id": "comment-16000527"
        },
        {
            "date": "2017-05-08T09:59:56+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "I think it would be a great improvement for 7.x. The patch is very much WIP and there will of course be a ton of documentation fixes etc. But the current patch does its best to parse solr.in.sh|cmd so we have a good chance of maintaining back-compat for all of 7.x and then accept only one format in 8.x ",
            "id": "comment-16000531"
        },
        {
            "date": "2017-05-08T12:51:26+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "+1 to doing this in 7.0 (and removing solr.in.sh/solr.in.cmd), and not bothering about backcompat for solr.in.sh/solr.in.cmd.\n\nI wonder, though, how will users retain their configurations when they upgrade from 7.x to 7.y, esp. when 7.y introduces newer config defaults? Zookeeper has the concept of zoo_sample.cfg that users then copy over to zoo.cfg. Is that model worth consideration?\n\nEdit:\nAnyways, I think we should ship future releases with a bin/solr.conf.template or bin/solr.yml.template where all is commented out and thus falls back to app defaults, unless people either configure environment variabele and/or rename the file to bin/solr.conf.\n\nThis ^ makes sense, where users copy over the template file to solr.conf. ",
            "id": "comment-16000684"
        },
        {
            "date": "2017-05-08T14:21:07+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "New version of patch\n\n\tTests back compat\n\tRemoves bin/solr.in.sh and solr.in.cmd, adds bin/solr.conf.sample\n\tIntegrated into bin/solr, instead of searching for and sourcing solr.in.sh, we do a call to SolrCliConfig.java which does it all in pure Java, returning a long string which are eval'ed in bin/solr.\n\n\n\nTodo:\n\n\tIntegrate into bin/solr.cmd, test on Windows\n\tMore testing of quoting and corner cases, this may be a bit fragile\n\tCurrently still values in solr.conf will override existing env in shell, need to do it other way around\n\tDecide name of file (solr.conf, solr.properties, solr.in.conf)?\n\tThe solr.conf file is currently parsed by same code as solr.in.sh, could perhaps look into using some standard properties / config parser from some lib?\n\tDocumentation\n\n ",
            "id": "comment-16000800"
        },
        {
            "date": "2017-05-08T15:15:17+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Should the keys of the new file be UPPERCASE_UNDERSCORE_DELIMITED as before, or should we use dot.separated, or allow both i.e. SOLR_HOME vs solr.home. I see a benefit of keeping keys equal to the env vars to make it easier to lookup what vars can be set, and easier to document. Also easier to migrate from custom solr.in.sh\n\nNow that solr.conf is not a script anymore, should we barf and exit at unknown keys? We could easily build a list of all supported ones.\n\nWhat about SOLR_OPTS that we have today? The current parser understands SOLR_OPTS = $SOLR_OPTS -Dfoo so we could continue to allow that syntax. But since it is no longer bash or CMD.exe that will parse the file, we may choose to support specifying SysProps directly as keys, e.g. \n\nSOLR_HOME=/opt/solr\n-Dsolr.autoSoftCommit.maxTime=3000\n\n\nOf course once we spit it back out as a string to be eval'ed, all these need to be concatenated into the SOLR_OPTS var again...\n\nLetting SolrCliConfig.java handle all the logic of resolving location, parsing config, deciding override rules between ENV and config etc is very nice, but I'm not sure how robust the roundtrip back to a string which is eval'ed is. The reasoning is that over time we'll continue with SOLR-7043 and make bin/solr smaller and smaller as we move logic over to SolrCLI.java. Then at the end of the day, SolrCLI will be able to interact with the SolrCliConfig object directly for much of the decision logic. ",
            "id": "comment-16000888"
        },
        {
            "date": "2017-05-19T13:38:08+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Welcoming feedback from others about the overall approach taken here, or if there is a better path ",
            "id": "comment-16017398"
        },
        {
            "date": "2017-05-24T08:23:42+0000",
            "author": "Gethin James",
            "content": "I having been thinking about the general approach.  These days external configuration via env variables or config file is super important.  Its great that you have kept the ability to specify SOLR_INCLUDE or look up the config file from a series of well known directories.\n\nI like the approach taken in SolrResourceLoader.locateSolrHome which looks for a property in order, ie. jndi -> system property or default value.  Perhaps we can generalize that approach for configuration, to look for jndi -> system property -> ENV_VAR or default value?\n\nI didn't think I felt strongly about the actual config file format but I probably favor yaml.  If a yaml file is used instead of solr.conf then text editors can do highlighting.  It's also machine readable / easier to parse.  It can also be versioned, (e.g. docker-compose) where you can move from one version of the configuration to another whilst still being backwards compatible.\n\nI could probably help out with this in the coming weeks. ",
            "id": "comment-16022520"
        },
        {
            "date": "2017-05-24T09:11:04+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Perhaps we can generalize that approach for configuration, to look for jndi -> system property -> ENV_VAR or default value?\n\nDo you propose such generalization in SolrCliConfig to prepare a final list of configs before starting Solr? Or do you propose to change the way Solr core internally looks for all these values, e.g. when substituting ${solr.foo.bar:default} and looking up System.getProperty(), to instead look in these locations?\n\nI'm still open to discuss the new file format. If we choose YAML, how would we map between key names in ENV, YML and SYSPROP? I would love to have a well defined mapping here, e.g.\n\nENV          YAML        SYSPROP \nSOLR_HOME    solr.home   solr.solr.home\nSOLR_PORT    solr.port   jetty.port\nRMI_PORT     rmi.port    com.sun.management.jmxremote.port\nLOG4J_PROPS  log4j.props log4j.configuration\n...\n\n\n\nI.e. have some convention that env vars are upper case underscore separated while sys props and yaml keys are lowercase dot separated.  Many of the sysprops already follow that convention, but as you see from the few examples above, there are many exceptions. If we go for YAML, the structure of the variables will also be clearer, so instead of rmi.port we might want to say solr.monitoring.jmx.port etc. ",
            "id": "comment-16022578"
        },
        {
            "date": "2017-05-24T09:39:41+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "If we replaced start.jar with our own startsolr.jar then the whole command line would look better, i.e. we could use -Dsolr.port=8983 -Dsolr.stop.port=7983, and our ugly ps -ef parsing could be more certain that it found a solr process instead of looking for getting false start.jar matches etc. But this is for another JIRA.\n\nFeel free Gethin James to jump in and play with some YAML parsing, var mappings, jndi etc.\n\nPerhaps the immediate goals of this issue should be\n\n\tPossible to override any setting through env.var (now solr.in.xx wins every time)\n\t\n\t\tThis could be committed as a sub task if so be\n\t\n\t\n\tIf you choose to use the config file it should be on a standard format, not platform specific\n\t\n\t\tThe end result from parsing the file could still be as in this patch, that all is converted to env.vars that the existing bin/solr scripts already know how to parse\n\t\n\t\n\tIt should be easy for users to map between env.vars and config file keys. And if we rename env.vars in this process, perhaps deprecate old version and support both for 7.x\n\n ",
            "id": "comment-16022619"
        },
        {
            "date": "2017-09-04T17:43:08+0000",
            "author": "Jason Gerlowski",
            "content": "Trivially updated patch resolves a few conflicts on master. \n\nWelcoming feedback from others about the overall approach taken here, or if there is a better path\n\nHappy to chime in on a few specific aspects:\n\n\n\t+1 for keeping property file format, at least for now.\n\t+1 for keeping UPPERCASE_UNDERSCORE_DELIMITED key values\n\t+1 for having env vars take precedence/override solr.conf values\n\t+1 for exiting-in-error for unknown keys: less trappy for users.  This change would stand alone pretty well as its own JIRA though.\n\n\n\nThe solr.conf file is currently parsed by same code as solr.in.sh, could perhaps look into using some standard properties / config parser from some lib \n\nThe Java Properties class looks like it'd get us pretty far on its own.  It's got parsing, getters for props, etc.  Archaius offers built in support for \"cascading\" configuration sources (e.g. use ENV-VARS if present, if not use config-file values, if those aren't present, ... ) Though that might bring in a little more than we're looking for.  That said, neither of those libraries are well-equipped to parse the sorts of entries we've got in bin/solr.in.cmd, so until we drop support for the old formats, we're going to see limited value from a library.  At least as I see things; could be missing something. \n\nI've got some free time in the next two weeks, so I'd like to take this forward if there's enough consensus on what the next steps look like.  As I understand it, the next few things are:\n\n\tadd more tests\n\tPort the bin/solr changes over to bin/solr.cmd\n\tSwitch the precedence/override-order on environment-variables/config-file values.\n\n\n\nDoes that cover most of the consensus reached so far?  Is there anything that you'd prefer to be handled in a sub-issue Jan H\u00f8ydahl? ",
            "id": "comment-16152828"
        },
        {
            "date": "2017-09-04T21:49:42+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "We should aim towards a robust impl which contains your bullets above and spin off some less important follow-up JIRAs which can be done later. \n\nIdeally we'd be able to introduce support for new format in a 7.x minor version and at the same time keep full support for the old configs. That way people can try it in 7.x if they want. If the back-compat support is good enough we could even deprecate old configs in a 7.x minor version and make the new config the only one in 8.0.\n\nPlease go ahead making the steps you plan, seeking feedback as you go.\n\nQuestion: My current code parses both .in.sh, .in.cmd and .conf into a key-value hashmap which is then used to generate a platform-dependent string which can be EVAL'ed. While this would in theory allow someone to use a .in.sh config on Windows and vice versa, that is not an important feature going forward. Is this just complicating things? Could we replace all of this with a simpler logic? Perhaps a two-step rocket: \n\n\tCall SolrCliConfig --locate to locate the correct config file, return type absolute config file path as string\n\tIf new format then call SolrCliConfig --parse and EVAL the result as the patch does now\n\tBut if old format, simply source the file . \"$ABS_PATH\" in the shell/cmd as we do today - this gives better back-compat\nI initially intended to move much more decision logic over to SolrCliConfig, such as setting defaults for SSL variables if not configured etc. But that could still be done as a separate step-3 invocation, e.g. SolrCliConfig --setDefaults?\n\n ",
            "id": "comment-16152959"
        },
        {
            "date": "2017-09-08T03:29:45+0000",
            "author": "Jason Gerlowski",
            "content": "I like the \"two-step rocket\" approach, and will move forward with that.\n\nI'm tempted to vote the other way...for the approach that your existing patch takes. (maintain backcompat by emulating as much current shell/cmd logic as possible in Java-land).  It does a great job of trimming logic from the bash/cmd scripts, which is a change I really want to see (see SOLR-11206).  But it's hard to make the argument that that is required for this JIRA.  The best thing is probably the simplest thing, as you pointed out above.\n\nSo I'll go forward with the approach you laid out above in your previous comment. ",
            "id": "comment-16158067"
        },
        {
            "date": "2017-09-08T08:22:31+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Gethin James, Ishan Chattopadhyaya, Noble Paul: Please chime in so we get a good consensus before writing a lot of code \n\nMy thinking is that if the back-compat logic is 95% equal as today (with exception of resolving solr.in.sh location in Java-land) but we still keep all env.variable names as today, then we have a chance of deprecating the old configs in 7.x and introduce the new format from 8.0.\n\nThen, once we have the new solr.conf or solr.yml, we can start supporting lowercase dot separated keys as an alternative, we can start renaming some keys while keeping support for the old name as an alias etc. ",
            "id": "comment-16158293"
        },
        {
            "date": "2017-09-11T02:17:45+0000",
            "author": "Jason Gerlowski",
            "content": "Jan H\u00f8ydahl, I'm in the process of implementing the \"2-step rocket\" approach you outlined above (absent opinions from anyone else, I decided to start on it).\n\nI noticed that your current patch expands environment variables referenced in the config file regardless of format (solr.in.sh, solr.in.cmd, solr.conf).  I wanted to raise the question of whether that was something you intentionally chose to support in the new  solr.conf format, or whether that was just a by product of how you implemented your patch.\n\nIMO, env-var expansion made sense when the configuration files were executable bash/cmd scripts, but fits less well now that we're going with system independent (and non-executable) file format.\n\nJust wanted to throw the question out there... ",
            "id": "comment-16160563"
        },
        {
            "date": "2017-09-11T07:38:20+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "That was just a bi-product of using the same parser. I did not intend to support var expansion. So using a standard Properties or Yaml parser is the way to go. ",
            "id": "comment-16160843"
        },
        {
            "date": "2017-09-12T02:11:54+0000",
            "author": "Jason Gerlowski",
            "content": "Ah good.  In that case, I've attached my initial stab at the 2-step approach you laid out above.  I left out the unit-tests that you included in your patch, but I'm just doing that for now.  I didn't want to spend time on unit tests that would change drastically if we decided we didn't like this design.\n\nIMO it turned out pretty nicely.  Really simplified a lot of the related Java code.  If people are ok with this approach, next steps include:\n\n\n\tre-write unit tests.\n\tenv-var precedence/overriding\n\tdefault values\n\tWindows support\n\n ",
            "id": "comment-16162378"
        },
        {
            "date": "2017-09-14T03:48:49+0000",
            "author": "Jason Gerlowski",
            "content": "Attached patch adds in support for environment-variable overriding of solr.conf files.\n\nOne question this patch raises is how we want to treat the environment-variable-overrides when no config-file is present/specified.  If a user uses the solr.conf format, I think it's clear that env-var overrides should be in place.  When a user uses solr.in.sh then back-compatibility dictates that we probably shouldn't provide env-var overrides.  But when no configuration file is present, it's unclear whether we should choose the old behavior (no env-overrides) or the new behavior (env-var-overrides).\n\nThis patch chooses to provide env-var overrides when no configuration file can be found.  That seemed like a relatively safe decision, since chances are low that users have environment-variables with matching names in their scope that they DON'T want passed to Solr.  But I'm not attached to this decision at all.  I'm happy to change it if others disagree.  Any thoughts Jan H\u00f8ydahl.\n\nI'm going to do the default values next, and then move on writing unit tests (pending any suggestions/change-requests from others).  Is there anywhere specific I should look for defaults to these configuration values?  I can use the values that are commented out in the solr.conf/solr.in.sh/solr.in.cmd files currently, but I wasn't sure that was right... ",
            "id": "comment-16165684"
        },
        {
            "date": "2017-09-14T07:05:09+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "+1 to env vars overriding the defaults if no solr.conf file is found.\n\nDefaults are hard coded in shell scripts and/or SolrCLI. I was planning to introduce a new defaults properties file for those, see this comment, which is not user editable but is visible in WEB-INF/classes, separate from code. Don't know if this is feasible.\n\nOne of those defaults that the script currently hardcodes is GC_TUNE, which can also be overridden. I wonder if we should consider introducing a separate config file solr_jvm.conf where each line will be treated as a flag to be passed directly to the JVM. This way we avoid one loooong SOLR_OPTS line in solr.conf. Some of the values in this new file would still be commented out to let SolrCLIConfig handle different defaults for Java8 and Java9 etc. What do you think? ",
            "id": "comment-16165851"
        },
        {
            "date": "2017-09-16T05:58:46+0000",
            "author": "Jason Gerlowski",
            "content": "Attached patch adds in the Java code to read in a solr/server/solr-defaults.conf file.  Turned out nicely.\n\nAs I started to move values from bin/solr etc into the defaults file though, I noticed that many values could be in the defaults file if not for tiny bits of logic involved in their initialization.  Examples:\n\n\n\tSOLR_PORT, STOP_PORT, and RMI_PORT could all be set in a properties file, but they are supposed to track together.  (Usually, STOP_PORT is SOLR_PORT - 1000; RMI_PORT is SOLR_PORT + 1000)\n\tSOLR_URL_SCHEME relies on SOLR_SSL_ENABLED, as do many of the other SSL  options.\n\tSOLR_PID_DIR, SOLR_LOGS_DIR, DEFAULT_SERVER_DIR all rely on the value of SOLR_TIP.\n\n\n\nAnyway, I guess the point I'm working up to is that we might be able to pull out more \"defaults\" if they live in a Java constants file. It's less standard, but has some advantages.  I could go either way on it, just wanted to get some opinions.\n\n(If we still go with a properties/conf file, there are other defaults I can pull out.  I just stopped for the night when I ran into the pattern described above.) ",
            "id": "comment-16168828"
        },
        {
            "date": "2017-09-19T03:57:50+0000",
            "author": "Jason Gerlowski",
            "content": "Adds tests for the configuration precedence and the toBashScript/toCmdScript functionality.\n\nNext steps are:\n\n\n\tWindows support\n\tpulling out more default values, separate GC options file maybe.\n\n\n\nBut this is getting pretty close to being ready.\n\nJan H\u00f8ydahl do you have any opinions on my question earlier about the format/location we keep the defaults in?  I made a point earlier that it might make sense to keep them in Java as static constants.  Though I also might just be being crazy.  Anyway, feedback appreciated.  ",
            "id": "comment-16171082"
        },
        {
            "date": "2017-09-20T07:09:29+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "For SOLR_PORT, STOP_PORT and RMI_PORT, I guess it is sufficient to add a default for SOLR_PORT in the defaults-properties file and let the other ports be relative to that, unless specified as ENV or in solr.conf.\n\nPerhaps we should support variable substitution in solr.conf and defaults.properties in the same way we do in solrconfig.xml, so one could write\n\nsolr.pid.dir = ${solr.tip}/bin\n\n\nOr specify the defaults as relative paths, documenting that they are relative to SOLR_TIP?\n\nFeel free to implement the constants in whatever way you feel makes most sense. It is always possible to change it later if we need. ",
            "id": "comment-16172842"
        },
        {
            "date": "2017-09-25T02:55:58+0000",
            "author": "Jason Gerlowski",
            "content": "Updated patch moves this along quite a bit.\n\n\n\tReplaced the use of Java 7 Properties, with PropertiesConfiguration from Apache's commons-configuration (already used as a dependency).  This gets us property expansion \"for free\", as Jan suggested in his previous comment.\n\tAdded more tests ensuring that our file-parsing can handle strings/numeric values/weird characters/whitespace, etc.\n\tAdds a first pass at bin/solr.cmd support.  Still need some testing on this though.\n\n\n\nAnyway, this isn't ready for review yet, but it should be ready soon. ",
            "id": "comment-16178469"
        },
        {
            "date": "2017-09-28T03:12:28+0000",
            "author": "Jason Gerlowski",
            "content": "Updated patch improves Windows support, catching a few solr.cmd bugs in the earlier patch.\n\nThe main remaining step is actually something that hasn't been mentioned here yet: the AuthTool (i.e bin/solr auth ) makes edits to the configuration file as a part of enabling/disabling cluster auth.  The config-appending logic in that class will have to be revised to handle the new configuration format when the \"INCLUDE FILE\" has a \"*.conf\" extension. ",
            "id": "comment-16183607"
        },
        {
            "date": "2017-09-30T18:46:04+0000",
            "author": "Jason Gerlowski",
            "content": "This patch finished all the work that remained to be done on this (AFAIK).  Added in this patch:\n\n\tadditional Windows (solr.cmd) bugfixes.\n\tinstall_solr_service.sh now looks for and installs solr.conf files, as well as existing solr.in.sh files\n\tUpdates the config-manipulation code in bin/solr auth to be able to write the new configuration format.\n\tpulls out a lot more default values into \"solr-defaults.conf\", including GC logging and tuning options.\n\tupdates asciidoc documentation to refer to the new config file format, and mention that the platform-dependent config files are still usable but deprecated.\n\n\n\nTests and precommit all pass.  AFAIK this is fully ready for review.  Would appreciate any feedback anyone has. ",
            "id": "comment-16187187"
        },
        {
            "date": "2017-10-12T04:03:46+0000",
            "author": "Jason Gerlowski",
            "content": "Resolves a few merge conflicts so patch can be applied to latest master.\n\nJan H\u00f8ydahl do you have any time this week to provide some feedback on this? ",
            "id": "comment-16201409"
        },
        {
            "date": "2017-11-10T16:56:46+0000",
            "author": "Jason Gerlowski",
            "content": "Updates patch to apply cleanly against latest master.\n\nWould appreciate any feedback that anyone can offer. ",
            "id": "comment-16247768"
        },
        {
            "date": "2017-11-13T15:03:48+0000",
            "author": "Shawn Heisey",
            "content": "The early discussion talked about yaml and .properties.\n\nThis may be moot, but I'm going to say it anyway.  Hopefully we can avoid any flamewar, or at least that it will be brief:  Unless we're going to switch the entire config system to yaml, I think it would be a bad idea to introduce yaml configuration for this.  My objection has nothing to do with the format itself.  Solr already has too many different formats for config files, we should not introduce another one unless that introduction actually reduces the format count \u2013 but if we're going to consolidate everything on a single format, I think it should be json.  On the idea of using .properties:  Solr already uses that format for configuration in other places.  That format is perfect for key=value settings, and it is completely cross-platform.  It is also handled natively by Java.  Later it looks like the decision is to go with a .conf file that is pretty much identical in format to the current solr.in.sh script.  As long as the operation is bulletproof with that format on both Windows and Linux, and we don't increase the number of different ways that things have to be configured, it may be a reasonable approach, though I think .properties may be better.\n\nFormat aside:  I haven't had a chance to apply the patch to verify the end result.  I did notice that in the \"defaults\" config, SOLR_STOP_WAIT is set to only ten seconds.  That should be 180.  I realize that the \"sample\" config has it at 180, but it shouldn't take explicitly setting the value to get the current default.  Ten seconds is not enough time to wait for Solr to stop unless it's a very small installation, which is why the value was bumped to 180.  It rarely actually takes three minutes to stop or start Solr \u2013 the shell script will continue before then if it can.  The cmd script needs improvement in this area.  I have done some experiments with getting the same \"waiting up to N seconds\" behavior on Windows, and I think we can duplicate it.\n\nUnless I just overlooked the code, it does look like there's no attempt to parse or convert an existing solr.in.* file.  I think we do need to handle a minor version upgrade, probably by converting an existing script to a .conf file.\n\nOn the changes to the service installer script, I notice that if $SOLR_VAR_DIR/solr.conf exists, it is moved into the service-dependent /etc/default file without checking to see if that file already exists.  This could cause problems where a user's carefully crafted config file is destroyed by a service install/upgrade.  I don't know how likely that situation is in the wild, but it is never a good idea to blindly move/copy config files, not knowing whether you're overwriting something that already exists.  I can see that the existing service installer script also does blind config file copies.  Since we're changing things, this is an opportunity to do better.\n\nAnother thought: I think it would be a good idea to move a lot more of what the solr script does into SolrCLI, including parsing the platform-independent config file, so that the cmd/shell code is very minimal.  I need to sit down sometime and see what I can come up towards that goal.\n\nI might have more thoughts after applying and reviewing the patch with a closer eye. ",
            "id": "comment-16249692"
        },
        {
            "date": "2017-11-13T23:38:35+0000",
            "author": "Jason Gerlowski",
            "content": "Thanks for giving this a look Shawn.  I'll be working this evening on making some of the changes you suggested, but wanted to answer a few questions in the meantime.\n\nUnless we're going to switch the entire config system to yaml, I think it would be a bad idea to introduce yaml configuration for this.\nAgreed and well said.\n\nit looks like the decision is to go with a .conf file... it may be a reasonable approach, though I think .properties may be better.\nThe name of the file is .conf, but it's actually prop-file syntax that's used.  In fact, the code uses the native Java support to parse and use the config.  So maybe we should pick a different extension/filename, but sounds like we're in agreement on the format.\n\nit does look like there's no attempt to parse or convert an existing solr.in.*\nI think you just missed it at first glance.  The attached patch still supports solr.in.sh and solr.in.cmd files.  For the Linux version, search for the . \"$SOLR_INCLUDE\" in the patched bin/solr.\n\nit would be a good idea to move a lot more of what the solr script does into SolrCLI, including parsing the platform-independent config file\nIf I understand your suggestion correctly, the current patch already does this.  See SolrConfigCreator.java.  If you've got something else in mind, or can see a way to have even less bash/batch logic though, I'm all for it. ",
            "id": "comment-16250492"
        },
        {
            "date": "2017-11-14T11:47:10+0000",
            "author": "Jason Gerlowski",
            "content": "Slightly updated patch.  Still a little shaky on the install_solr_service.sh changes.  I'll be taking a look at those more today, though I think they're what Shawn suggested in his comment above. The script will now error out instead of overwriting these files if they exist (unless a new \"overwrite\" flag -o is provided) ",
            "id": "comment-16251282"
        },
        {
            "date": "2017-11-14T22:22:38+0000",
            "author": "Shawn Heisey",
            "content": "The name of the file is .conf, but it's actually prop-file syntax that's used.\n\nInteresting.  Being pedantic for a moment:  I understand the desire to make things easy for novice users and give them a config file they can recognize easily ... but when the user is a veteran of Java-based software, they're going to be a little bit irritated if they ever learn that the file is handled as java properties and doesn't have a .properties extension.  It would bug me.\n\nSide note:  Due to the proliferation of configuration formats that I already mentioned, I do think we need a separate issue for a really major change:  Re-work how every aspect of the application is configured, in particular to reduce the number of configuration formats.  That's probably something to do in master only, because a significant change like that would best be introduced with a new major version.\n\nIf you've got something else in mind, or can see a way to have even less bash/batch logic though, I'm all for it.\n\nI was indeed thinking about general improvements to SolrCLI, making the actual script extremely simple.  I don't think we can eliminate the script, though if that were possible, it would be really cool.\n\nOne pretty major shift (that also needs its own issue) I would like to make possible is the idea of Solr being two Java programs \u2013 one program that serves as a \"control\" process (with a very small max heap) that can start/stop/restart the actual application (Jetty for now).  Imagine a situation where you can edit things like Solr's max heap in the UI and also restart Solr from the UI.   ",
            "id": "comment-16252542"
        },
        {
            "date": "2017-11-14T23:13:01+0000",
            "author": "Jason Gerlowski",
            "content": "I'm not specifically attached to the .conf extension, but your concerns make sense to me.  It's a common enough format, we should just call it what it is.  I'll happily update the patch to change it, unless Jan H\u00f8ydahl had a particular reason for choosing that name.  I suspect it was chosen to be format-agnostic back when the format itself was up in the air, but can be changed now that the format is decided.  But I'll let him shed light on it if I'm wrong. ",
            "id": "comment-16252661"
        },
        {
            "date": "2017-11-15T04:13:06+0000",
            "author": "Jason Gerlowski",
            "content": "I've updated the config file names to solr.properties and solr-default.properties in the attached patch.\n\nThis doesn't preclude a veto from Jan or anyone else that has a good reason for the .conf extension.  If we end up sticking with .conf, we can just ignore the latest patch. ",
            "id": "comment-16252916"
        },
        {
            "date": "2018-01-21T19:16:51+0000",
            "author": "Jason Gerlowski",
            "content": "There have been a few changes to the bin/solr scripts that required a rebase, so I've updated the attached patch.\n\nThis is ready for review if you're still interested in seeing this get in Jan H\u00f8ydahl (or anyone else). ",
            "id": "comment-16333633"
        }
    ]
}