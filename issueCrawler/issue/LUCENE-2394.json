{
    "id": "LUCENE-2394",
    "title": "Factories for cache creation",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Hello all,\n\nI've seen the LUCENE-831 (Complete overhaul of FieldCache API/Implementation) targeted for version 3.1 and I think that maybe, before this overhaul, it would be good to have a more cirurgical change, that would need smaller effort in new unit tests, without behavior changes and almost no performance impact.\nOne way to achieve that is inserting strategically positioned calls to a factory structure that would allow every already developed code to continue working without changes, at the same time giving the opportunity to put alternative factories to work.\nFocusing on the cache idea (not specifically the FieldCache, that has it's own specific responsabilities, but in the key/value structure that will ultimately hold the cached objects) i've done the small change contained in the patch I'm attaching to this.\nIt has default implementations that encapsulate what was being originally used in FieldCache, so all current test cases passes, and creates the possibility to create a EHCacheFactory or InfinispanCacheFactory, or even MyOwnCachingStructureFactory.\nWith this, it would be easy to take advantage of the features provided by this kind of project in a uniform way and rapidly allowing new possibilities in scalability and tuning.\nThe code in the patch is small (16kb file is small if compared to the hundreds of kbs in other patchs) and even though it doesn't have javadoc right now (sorry) I hope it can be easly understood. So, if Lucene maintainers see that this contribution could be used (in a 2.9.n+1 and 3.0.n+1 and maybe influencing future versions) we could put some more effort in it, documenting, adding necessary unit tests and maybe contributing other factory implementations.\nWhat do you think?",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--factoriesPatch.patch": "https://issues.apache.org/jira/secure/attachment/12441763/ASF.LICENSE.NOT.GRANTED--factoriesPatch.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-04-14T19:51:18+0000",
            "content": "Attaching factory suggestion (patch for changes to https://svn.apache.org/repos/asf/lucene/java/tags/lucene_2_9_2) focusing in cache, being used in specifically in FieldCacheImpl and TermInfosReader to exemplify. ",
            "author": "Oswaldo Dantas",
            "id": "comment-12857053"
        },
        {
            "date": "2010-06-01T18:21:31+0000",
            "content": "Moving fix version -> 4.0. ",
            "author": "Michael McCandless",
            "id": "comment-12874136"
        },
        {
            "date": "2013-07-23T18:44:23+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716935"
        },
        {
            "date": "2014-04-16T12:54:37+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970817"
        },
        {
            "date": "2015-08-27T10:38:15+0000",
            "content": "Having the ability to do this would solve an issue stopping me from moving to Solr 5, are there any plans to tackle this? ",
            "author": "Jamie Johnson",
            "id": "comment-14716453"
        }
    ]
}