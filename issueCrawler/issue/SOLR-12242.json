{
    "id": "LUCENE-8492",
    "title": "UnifiedHighlighter does not work with Surround query parser (SurroundQParser)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/highlighter"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "7.2.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I'm attempting to use the UnifiedHighlighter in conjunction with queries parsed by Solr's SurroundQParserPlugin. When doing so, the response yields empty arrays for documents that should contain highlighted snippets.\n\nI've attached a test for UnifiedHighlighter that uses the surround's QueryParser and preprocesses the query in a similar fashion as SurroundQParser, which results in test failure.\u00a0 When creating a SpanQuery directly (rather via surround's QueryParser), the test passes.\n\nThe problem can be isolated to the code path initiated by UnifiedHighlighter.extractTerms(), which uses EMPTY_INDEXSEARCHER to extract terms from the query. After a series of method calls, we end up at DistanceQuery.getSpanNearQuery(), where\u00a0((DistanceSubQuery)sqi.next()).addSpanQueries(sncf)\u00a0fails silently and doesn't add any span queries.\u00a0\u00a0\n\nAnother data point: If I hack UnifiedHighlighter and pass in a live IndexSearcher to extractTerms(), highlighting works.",
    "attachments": {
        "TestUnifiedHighlighterSurround.java": "https://issues.apache.org/jira/secure/attachment/12919819/TestUnifiedHighlighterSurround.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-04-19T17:13:49+0000",
            "content": "Thanks for raising this issue. \u00a0It's similar to\u00a0LUCENE-7757 which is support for the ComplexPhraseQParserPlugin; check that issue out. \u00a0It's temping to pass the live IndexSearcher to extractTerms but that's potentially dangerous if the query contains wildcards \u2013 we don't want to extract all terms from a wildcard query on the index reader. ",
            "author": "David Smiley",
            "id": "comment-16444402"
        },
        {
            "date": "2018-04-23T15:52:41+0000",
            "content": "Gotcha, thanks for the tip.\u00a0 Seems like the fix is rather involved.\n\nFor my purposes (non-production) I will override UnifiedHighlighter to use a live searcher and take note of when or if performance / memory utilization goes haywire if wildcard queries are used. ",
            "author": "Andy Liu",
            "id": "comment-16448343"
        },
        {
            "date": "2018-04-23T16:46:53+0000",
            "content": "sadly UnifiedHighlighter.extractTerms is static so you can't actually override it.  That's a shame; this should be changed.  How did you go about this in your code?  A replaced variation of highlightWithoutSearcher() perhaps? ",
            "author": "David Smiley",
            "id": "comment-16448420"
        },
        {
            "date": "2018-04-23T19:13:56+0000",
            "content": "Yeah, I noticed that.\u00a0 I did it in an super hacky way \u2013 in highlightFieldsAsObjects() I noticed that the output of UnifiedHighlighter.extractTerms() is passed into getFieldHighlighter(), which is an instance method.\u00a0 So I subclassed UnifiedHighlighter and with an overridden implementation of\u00a0 getFieldHighlighter() which does the term extraction with the live searcher, and passes the result to\u00a0 super.getFieldHighlighter() .\n\nSuper brittle but works for now. ",
            "author": "Andy Liu",
            "id": "comment-16448731"
        },
        {
            "date": "2018-09-07T19:49:21+0000",
            "content": "Moved to Lucene. \u00a0I tried the new\u00a0WEIGHT_MATCHES flag\u00a0and it does not solve this; ah well (was a long shot).\n\nThe UnifiedHighlighter\u00a0ultimately sees no terms or automata (wildcard queries) and figures it's going to do nothing so yields\u00a0a NoOpOffsetStrategy. \u00a0It'd be nice if it could be told or if it could know that these attempts will be folly, and that the query might have anything (terms, wildcards, who-knows). \u00a0Then, assuming as well it uses WEIGHT_MATCHES, it'd work. \u00a0Not sure if some UH HighlightFlag is appropriate for that.\n\nI looked at this again and thought of another solution: \u00a0rewrite the query up-front, then highlight it. \u00a0I don't think this highlighter should do this, although user-code could. \u00a0On the Solr side, this could be done by adding getHighlightQuery() \u00a0to\u00a0SurroundQParserPlugin, overriding the default behavior to rewrite the parsed query. \u00a0FWIW I have a trivial Solr test if someone wants to tackle that:\n\n  // in TestUnifiedSolrhighlighter at the bottom\n  public void testSurroundQParser() {\n    assertQ(req(\"q\", \"{!surround df=text}2w(second, document)\", \"hl\", \"true\", \"hl.fl\", \"text\"),\n        \"count(//lst[@name='highlighting']/lst[@name='102']/arr[@name='text']/*)=1\");\n  }\n\n\n\u00a0\n\n\u00a0 ",
            "author": "David Smiley",
            "id": "comment-16607596"
        },
        {
            "date": "2018-10-24T13:48:24+0000",
            "content": "Maybe the UH should actually rewrite the Query up front if and only if the UH's attempt to detect terms/automata etc. found nothing?  Hmmm but its potentially expensive since it'd use the real underlying index, and the query might contain a MTQ.  And the reason we found nothing may be because we only want to highlight some fields that just so happened to not be in the query.  I suppose it should not do this but I wanted to record my thinking here.  Maybe it'd be nice if the UH had a HighlightFlag option to avoid OffsetSource.NONE_NEEDED and instead assume the query might have anything.  But that isn't terribly needed since the user could subclass to override getOptimizedOffsetSource to never return NONE_NEEDED.\n\nOther than SurroundQParser, I wonder if any real-world users have queries that run into this? ",
            "author": "David Smiley",
            "id": "comment-16662306"
        }
    ]
}