{
    "id": "LUCENE-4188",
    "title": "Storing Shapes shouldn't be Strategy dependent",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spatial"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The logic for storing Shape representations seems to be different for each Strategy.  The PrefixTreeStrategy impls store the Shape in WKT, which is nice if you're using WKT but not much help if you're not.  BBoxStrategy doesn't actually store the Shape itself, but a representation of the bounding box.  TwoDoubles seems to follow the PrefixTreeStrategy approach, which is surprising since it only indexes Points and they could be stored without using WKT.\n\nI think we need to consider what storing a Shape means.  If we want to store the Shape itself, then that logic should be standardised and done outside of the Strategys since it is not really related to them.  If we want to store the terms being used by the Strategys to make Shapes queryable, then we need to change the logic in the Strategys to actually do this.",
    "attachments": {
        "LUCENE-4188_remove_field_storage_from_createField.patch": "https://issues.apache.org/jira/secure/attachment/12535149/LUCENE-4188_remove_field_storage_from_createField.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-07-04T04:36:54+0000",
            "content": "I think storing a shape should universally be SpatialContext.toString(shape);\nThis is just a simple method call for the strategy to invoke. If/when Lucene separates out better stored fields from indexed ones then the Strategy need not bother.  ",
            "author": "David Smiley",
            "id": "comment-13406270"
        },
        {
            "date": "2012-07-04T05:05:44+0000",
            "content": "I think it is bizarre to first parse the String to a Shape, pass the Shape into the Strategy, and then the Strategy to ask for the String again.  I think we should let the user decide what they want to store and how it should be stored.  Even if we do decide to use SpatialContext.toString as the default behavior, it doesn't belong inside the Strategys.  Solr can create a separate Field instance for the stored value and so can other users of the module. ",
            "author": "Chris Male",
            "id": "comment-13406278"
        },
        {
            "date": "2012-07-04T13:26:28+0000",
            "content": "Makes sense.  Is telling Lucene to store a field independent of indexing now?  I forget what issue it was that is trying to separate it; I recall you are involved in that one Chris.  Even if that isn't done, if the Strategy gives it to Lucene to index, can the caller (e.g. Solr / the user of the API) add it by the same name as stored?  If it can then I agree we can move field storage out. ",
            "author": "David Smiley",
            "id": "comment-13406504"
        },
        {
            "date": "2012-07-04T13:34:56+0000",
            "content": "if the Strategy gives it to Lucene to index, can the caller (e.g. Solr / the user of the API) add it by the same name as stored?\n\nI think the Strategy should continue to return the Fields to the caller so they can be added to a Document and indexed at the appropriate time.  But yes, you can add a stored field with the same name and everything is fine.  We are definitely decoupling indexed and stored fields more and more beneath IndexWriter, but to Document you can either have one Field instance for both indexed and stored, or two different instances. ",
            "author": "Chris Male",
            "id": "comment-13406513"
        },
        {
            "date": "2012-07-05T01:56:23+0000",
            "content": "Awesome.\n+1 ",
            "author": "David Smiley",
            "id": "comment-13406819"
        },
        {
            "date": "2012-07-05T05:26:05+0000",
            "content": "Attached is the patch.  I am quite pleased with the result. Notes:\n\n\tI added a convenience method strategy.createStoredField()\n\tI added a test of the stored value in the StrategyTestCase base\n\n\n\nI also cleaned up BBox & TwoDoubles strategies with regards to Lucene FieldType handling.\n\nPerhaps createFields should be renamed to createIndexedFields() ? ",
            "author": "David Smiley",
            "id": "comment-13406855"
        },
        {
            "date": "2012-07-05T05:36:10+0000",
            "content": "Thanks for taking this on David.\n\nI added a convenience method strategy.createStoredField()\n\nI don't really like this.  It is barely an improvement on the current code.  The whole point of this issue is that the storing of Shapes shouldn't be related to Strategys.  I think we should be explicit and require the consumer code (Solr or something else) decides how it wants to store Shapes.  If you want a convenience method then it should be static, illustrating it is a utility that the Strategys cannot override.  Ideally I would like it somewhere else entirely. \n\nPerhaps createFields should be renamed to createIndexedFields() ?\n\n+1 I think that makes its role clearer. ",
            "author": "Chris Male",
            "id": "comment-13406859"
        },
        {
            "date": "2012-07-05T15:47:39+0000",
            "content": "RE createStoredField():\nI don't really like this. It is barely an improvement on the current code. The whole point of this issue is that the storing of Shapes shouldn't be related to Strategys. I think we should be explicit and require the consumer code (Solr or something else) decides how it wants to store Shapes. If you want a convenience method then it should be static, illustrating it is a utility that the Strategys cannot override. Ideally I would like it somewhere else entirely.\n\nThe client doesn't have to use this method, but in all tests + the Solr adapters I don't think there's a reason not to.  I found it to be useful, and to provide a place to document how it is recommended to store the shape (notice I even included the one-liner source in the javadocs).  An advantage of it being an instance method on the Strategy is that it has convenient access to both the field name & SpatialContext.  I could make this method final, and I could add more documentation that makes it clear that the user is free to store the shape in any way they wish since the spatial module doesn't care. ",
            "author": "David Smiley",
            "id": "comment-13407221"
        },
        {
            "date": "2012-07-06T02:58:00+0000",
            "content": "\nThe client doesn't have to use this method, but in all tests + the Solr adapters I don't think there's a reason not to. I found it to be useful, and to provide a place to document how it is recommended to store the shape (notice I even included the one-liner source in the javadocs). An advantage of it being an instance method on the Strategy is that it has convenient access to both the field name & SpatialContext. I could make this method final, and I could add more documentation that makes it clear that the user is free to store the shape in any way they wish since the spatial module doesn't care.\n\nI think it is a misnomer to say this is how we recommend a shape is stored.  That is exactly what I disagree with and why I want it changed from how it is currently.  To me the recommended way, if the consumer already has a String representation of the Shape that they used to construct the Shape, is to just store that String rather than re-parsing the Shape.  I also dont like the use of SpatialContext.  It represents Shapes in a non-standard way, sometimes using WKT (if you're using JtsSpatialContext) and sometimes not.  Yes it is symmetrical with the readShape code, but that is only helpful if you use the Context to read your shapes in the first place.\n\nThinking about it, I think we need to improve the Shape reading code in SpatialContext so that it is clear what representation is used and so it is possible to extend the functionality when you want to use anything other than Strings. ",
            "author": "Chris Male",
            "id": "comment-13407668"
        },
        {
            "date": "2012-07-11T06:32:17+0000",
            "content": "I inlined/removed SpatialStrategy.createStoredField() and added documentation to the SpatialStrategy class header & to createFields() regarding storing a field value.\n\nCommitted.\n\nI'll address the rename of createFields() to createIndexableFields() in LUCENE-4192 ",
            "author": "David Smiley",
            "id": "comment-13411275"
        }
    ]
}