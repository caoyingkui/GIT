{
    "id": "LUCENE-1262",
    "title": "IndexOutOfBoundsException from FieldsReader after problem reading the index",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.3.2",
            "2.4"
        ],
        "affect_versions": "2.3.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "There is a situation where there is an IOException reading from Hits, and then the next time you get a NullPointerException instead of an IOException.\n\nExample stack traces:\n\njava.io.IOException: The specified network name is no longer available\n\tat java.io.RandomAccessFile.readBytes(Native Method)\n\tat java.io.RandomAccessFile.read(RandomAccessFile.java:322)\n\tat org.apache.lucene.store.FSIndexInput.readInternal(FSDirectory.java:536)\n\tat org.apache.lucene.store.BufferedIndexInput.readBytes(BufferedIndexInput.java:74)\n\tat org.apache.lucene.index.CompoundFileReader$CSIndexInput.readInternal(CompoundFileReader.java:220)\n\tat org.apache.lucene.store.BufferedIndexInput.refill(BufferedIndexInput.java:93)\n\tat org.apache.lucene.store.BufferedIndexInput.readByte(BufferedIndexInput.java:34)\n\tat org.apache.lucene.store.IndexInput.readVInt(IndexInput.java:57)\n\tat org.apache.lucene.index.FieldsReader.doc(FieldsReader.java:88)\n\tat org.apache.lucene.index.SegmentReader.document(SegmentReader.java:344)\n\tat org.apache.lucene.index.IndexReader.document(IndexReader.java:368)\n\tat org.apache.lucene.search.IndexSearcher.doc(IndexSearcher.java:84)\n\tat org.apache.lucene.search.Hits.doc(Hits.java:104)\n\nThat error is fine.  The problem is the next call to doc generates:\n\njava.lang.NullPointerException\n\tat org.apache.lucene.index.FieldsReader.getIndexType(FieldsReader.java:280)\n\tat org.apache.lucene.index.FieldsReader.addField(FieldsReader.java:216)\n\tat org.apache.lucene.index.FieldsReader.doc(FieldsReader.java:101)\n\tat org.apache.lucene.index.SegmentReader.document(SegmentReader.java:344)\n\tat org.apache.lucene.index.IndexReader.document(IndexReader.java:368)\n\tat org.apache.lucene.search.IndexSearcher.doc(IndexSearcher.java:84)\n\tat org.apache.lucene.search.Hits.doc(Hits.java:104)\n\nPresumably FieldsReader is caching partially-initialised data somewhere.  I would normally expect the exact same IOException to be thrown for subsequent calls to the method.",
    "attachments": {
        "Test.java": "https://issues.apache.org/jira/secure/attachment/12379781/Test.java",
        "LUCENE-1262.patch": "https://issues.apache.org/jira/secure/attachment/12379911/LUCENE-1262.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2008-04-09T09:51:19+0000",
            "content": "Those stack traces look like 2.1 not 2.3.1.  Is that right?\n\nCan you post the index that you are using and the code that results in the 2nd exception?  I can't get the 2nd exception to happen in a test case... ",
            "author": "Michael McCandless",
            "id": "comment-12587117"
        },
        {
            "date": "2008-04-09T23:08:23+0000",
            "content": "Whoops.  I don't think it's 2.1 but it must be 2.2.\n\nI'll try and reproduce this standalone but first I need a way to have readInternal throw an exception.  I presume you were using some kind of custom store implementation to do that, I'll see if I can make it happen.under 2.2 and then try the same thing under 2.3.1 to confirm whether it still breaks. ",
            "author": "Trejkaz",
            "id": "comment-12587418"
        },
        {
            "date": "2008-04-10T00:01:02+0000",
            "content": "Okay I'll eat my words now, it is indeed 2.1 as the version doesn't have openInput(String,int) in it.\n\nAnyway an update: I've managed to reproduce it on any text index by simulating random network outage.  I'm keeping a flag which I set to true.  The trick is that the wrapping IndexInput implementation randomly throws IOException if the flag is true \u2013 if it always throws IOException the problem doesn't occur.  If it randomly throws it then it occurs occasionally, and it always seems to be for larger queries (I'm using MatchAllDocsQuery now.)\n\nI'll see if I can tweak the code to make it more likely to happen and then start working up to each version of Lucene to see if it stops happening somewhere. ",
            "author": "Trejkaz",
            "id": "comment-12587433"
        },
        {
            "date": "2008-04-10T00:29:18+0000",
            "content": "I managed to reproduce the problem as-is under version 2.2.\n\nFor 2.3 the problem has changed \u2013 instead of a NullPointerException it is now an IndexOutOfBoundsException:\n\nException in thread \"main\" java.lang.IndexOutOfBoundsException: Index: 52, Size: 34\n        at java.util.ArrayList.RangeCheck(ArrayList.java:547)\n        at java.util.ArrayList.get(ArrayList.java:322)\n        at org.apache.lucene.index.FieldInfos.fieldInfo(FieldInfos.java:260)\n        at org.apache.lucene.index.FieldsReader.doc(FieldsReader.java:154)\n        at org.apache.lucene.index.SegmentReader.document(SegmentReader.java:659)\n        at org.apache.lucene.index.IndexReader.document(IndexReader.java:525)\n        at org.apache.lucene.search.IndexSearcher.doc(IndexSearcher.java:92)\n        at org.apache.lucene.search.Hits.doc(Hits.java:167)\n        at Test.main(Test.java:24)\n\nWill attach my test program in a moment. ",
            "author": "Trejkaz",
            "id": "comment-12587439"
        },
        {
            "date": "2008-04-10T00:31:25+0000",
            "content": "Attaching a test program to reproduce the problem under 2.3.1.\n\nIt occurs approximately 1 in every 4 executions for any reasonably large text index (really small ones don't seem to do it so I couldn't attach a text index with it.)  The number of fields may be related, looking at the IndexOutOfBoundsException numbers it seems that the indexes we have happen to have a large number of fields. ",
            "author": "Trejkaz",
            "id": "comment-12587440"
        },
        {
            "date": "2008-04-11T09:21:56+0000",
            "content": "OK indeed I can get the failure to happen, using your Test running against a partial Wikipedia index I have.  I'll pursue!  Thanks Trejkaz. ",
            "author": "Michael McCandless",
            "id": "comment-12587896"
        },
        {
            "date": "2008-04-11T10:20:54+0000",
            "content": "Attached patch.  All tests pass.  I plan to commit in a day or so, to\nboth trunk (2.4) and 2.3.X branch (2.3.2).\n\nI got the failure to happen with a standalone test case, added to\nTestFieldsReader.\n\nI found & fixed the issue.  It's in BufferedIndexReader's refill()\nmethod.  The problem is that method changes bufferLength even if an\nexception is hit.  This leaves incorrect bytes in the buffer such that\na subsequent readByte will return the incorrect bytes.\n\nThe fix is simple: use a local \"int newLength\" and only assign that to\nvalue to bufferLength if the readInternal() call succeeds.  The test\nfails without the fix and passes with it. ",
            "author": "Michael McCandless",
            "id": "comment-12587911"
        },
        {
            "date": "2008-04-13T23:27:36+0000",
            "content": "I just committed this.  Thanks Trejkaz! ",
            "author": "Michael McCandless",
            "id": "comment-12588453"
        }
    ]
}