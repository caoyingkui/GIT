{
    "id": "LUCENE-2475",
    "title": "Incorrect Bounding Box calculation results in the exclusion of valid data locations",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/spatial"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-BETA"
        ],
        "affect_versions": "2.9.1,                                            3.0",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "I have found a scenario where some of my location data is not being returned.  The calculated distance between my search origin and the data is well within my search radius but the data is not being returned. \n\nI have traced this down to what I think is an error when calculating the boundary box which is used to determine the Shape for the CartesianShapeFilter in  CartesianPolyFilterBuilder.getBoxShape()\n\nThe boundary box calculated by LLRect.createBox() is incorrect.  The box returned is a box that fits WITHIN the search circle, where the four corners of the box intersect the circle line. This creates 4 regions where data points are not included - these are regions that are in the circle but outside the box.\n\nWhat I is required is a boundary box that fully CONTAINS the search circle.  As a side effect you would end up with 4 regions outside of the circle but inside the box.  This would potentially return data that are not real hits but these can be filtered out by a more precise distance comparison.\n\nI will attach a test class that covers the issue with more details and a proposed fix - a one liner in LLRect.java\n\nI would appreciate if someone could verify my findings.  All my data tests pass with this fix but there is one test case in Lucene 3.0.0 that fails and I can't figure out why.  TestCartesian.testAntiM().",
    "attachments": {
        "BoundingBoxCalucationIssueTest.java": "https://issues.apache.org/jira/secure/attachment/12445158/BoundingBoxCalucationIssueTest.java",
        "test.html": "https://issues.apache.org/jira/secure/attachment/12445166/test.html"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-05-21T10:55:10+0000",
            "content": "Attachment with a test case and proposed fix ",
            "author": "Julian Atkinson",
            "id": "comment-12869940"
        },
        {
            "date": "2010-05-21T12:42:49+0000",
            "content": "I've done some more investigation and I think the dimensions of the Bounding Box is not the issue.  If I add a data point outside the box but within the circle it is returned as a hit.\n\n//add the following to my test case data set and this is returned - see attachment\naddPoint(writer,\"outside box in circle\",52.6695404,\t4.8471904);\n\nThis must be because the original shape is extended to include neighboring boxes in CartesianPolyFilterBuilder.getShapeLoop() ?\n\nSo although it makes sense logically it is irrelevant to my actual problem.\n\nI also noticed the hit that I am missing is just WITHIN the dimensions of the boundary box shape - so now I really don't understand why it is not being matched.\n\nI'll continue to look into this but any help from someone more familiar with the code would be appreciated.   ",
            "author": "Julian Atkinson",
            "id": "comment-12869969"
        },
        {
            "date": "2010-05-21T13:02:11+0000",
            "content": "Adding a Google Map to help visualise the problem. \n\nThe bounding box and my search point location (center) are shown as red dots\nThe blue dot is the location of the hit I am expecting to get but don't - In my real data there are many others around it.\n\nThe yellow dot is the location I added that is outside the box but inside the search circle. This lead me to conclude that the Bounding Box is not the issue. ",
            "author": "Julian Atkinson",
            "id": "comment-12869974"
        },
        {
            "date": "2010-05-21T21:30:14+0000",
            "content": "OK, so ignoring the whole Boundary Box story and looking deeper into the code with my test case I noticed that a different bestFit value was being determined by the CartesianTierPlotter. \n\nI get a value of 13 for the test that passes (radius 32miles) and 14 when the test fails with a search radius of 31.  This means to me that we end up searching in the wrong tier. \n\nLooking at CartesianTierPlotter.bestFit() I see on the  line below the passed in value of miles is divided by 2.\n\n>>> double r = miles / 2.0; \n\nI'm guessing r is meant to be a radius - but the miles parameter is already a radius  - of my search circle.\n\nThis has an effect on the calculation of the best fix box width - aka corner in the code - and the resulting bestFit or tierId.\n\nIf I change this to not divide by 2 - my issue test case passes - as do all my other tests.\n\nAgain I'd appreciate if someone who knows the code could comment and confirm my finding or tell my I'm crazy!\n\nThx ",
            "author": "Julian Atkinson",
            "id": "comment-12870176"
        },
        {
            "date": "2010-05-22T06:15:37+0000",
            "content": "I got pen and paper out and worked out  the calculation being done in  CartesianTierPlotter.bestFit().\n\n>>>  double corner = r - Math.sqrt(Math.pow(r, 2) / 2.0d);\n\nI ended up with the same formula and it is definitely expecting the radius of the search circle as param.\n\nThere is therefore no need to divide miles param by 2.\n\nBTW the formula can be simplified to \n\n//corner is the width/height of the box that fits between the arc of the search circle \n//and a corner of the boundary box containing the search circle\ndouble corner = r - r/Math.sqrt(2);\n ",
            "author": "Julian Atkinson",
            "id": "comment-12870277"
        },
        {
            "date": "2010-09-10T09:54:58+0000",
            "content": "Hi Julian\n\nYour problem should be solved by work discussed here https://issues.apache.org/jira/browse/LUCENE-2359 ",
            "author": "Nicolas Helleringer",
            "id": "comment-12907959"
        },
        {
            "date": "2011-02-01T20:13:22+0000",
            "content": "Thanks Nicolas.  It took me a while but I finally got round to verifying your patch - I was using my fix in the meantime but your patch addresses other issues as well.  I've backported and all my tests pass. I'd mark this as resolved but your patch has been reverted I see. ",
            "author": "Julian Atkinson",
            "id": "comment-12989366"
        },
        {
            "date": "2011-02-01T20:18:39+0000",
            "content": "I confirm that Nicolas' patch in LUCENE-2359 resolves this issue. ",
            "author": "Julian Atkinson",
            "id": "comment-12989367"
        },
        {
            "date": "2011-02-02T10:46:16+0000",
            "content": "This implementation of geo in Lucene has been deprecated and will not be fixed any further nor backported. see LUCENE-1747 ",
            "author": "Nicolas Helleringer",
            "id": "comment-12989589"
        },
        {
            "date": "2013-12-02T04:29:09+0000",
            "content": "Closing because the old spatial contrib module referenced here no longer exists as of Solr 4.\n\nBy the way, Spatial4j correctly computes the bounding lat-lon box of a circle no matter where the circle is.  The original code from the old Lucene spatial project (and old Solr code too) was incorrect, and is no longer used.  So this issue is fixed, in a sense.  But the relevant code is gone. ",
            "author": "David Smiley",
            "id": "comment-13836231"
        }
    ]
}