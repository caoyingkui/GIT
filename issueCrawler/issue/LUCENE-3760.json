{
    "id": "LUCENE-3760",
    "title": "Cleanup DR.getCurrentVersion/DR.getUserData/DR.getIndexCommit().getUserData()",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff from Ryan's dev thread \"DR.getCommitUserData() vs DR.getIndexCommit().getUserData()\"... these methods are confusing/dups right now.",
    "attachments": {
        "LUCENE-3760.patch": "https://issues.apache.org/jira/secure/attachment/12513836/LUCENE-3760.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-02-08T16:47:21+0000",
            "content": "Patch.\n\nI renamed static DR.getCurrentVersion -> DR.getLastCommitVersion,\nstatic DR.getCommitUserData -> DR.getLastCommitUserData, removed\nDR.getCommitUserData (it's redundant w/\nDR.getIndexCommit().getUserData()), and cleaned up the javadocs. ",
            "author": "Michael McCandless",
            "id": "comment-13203733"
        },
        {
            "date": "2012-02-08T18:31:43+0000",
            "content": "Thanks, nice cleanup \n\n+1 no complaints from the DR refactorer  ",
            "author": "Uwe Schindler",
            "id": "comment-13203821"
        },
        {
            "date": "2012-02-08T19:12:37+0000",
            "content": "Just curiosity: what are the high-level use-cases for these static methods?\n\nAlso: \n\n\t(as mentioned on the list), I like the improvements to the javadocs,\n  but shouldn't we do the same for getLastCommitUserData(Directory)? (if we keep it)\n\tShould we fix the getCurrentXXX methods in SegmentInfos.java for consistency?\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-13203859"
        },
        {
            "date": "2012-02-08T19:31:10+0000",
            "content": "thanks mike \u2013 much more clear ",
            "author": "Ryan McKinley",
            "id": "comment-13203881"
        },
        {
            "date": "2012-02-08T22:51:47+0000",
            "content": "what are the high-level use-cases for these static methods?\n\nWell, they let you get the version and commit userData w/o having to open the full index... it's a nice \"freedom\" (much lower cost than opening a reader), but how applications actually make use of that freedom specifically, I'm not sure?\n\n\n(as mentioned on the list), I like the improvements to the javadocs,\n but shouldn't we do the same for getLastCommitUserData(Directory)? (if we keep it)\n\nWoops, I'll fix...\n\nShould we fix the getCurrentXXX methods in SegmentInfos.java for consistency?\n\nAhh right I will... ",
            "author": "Michael McCandless",
            "id": "comment-13204082"
        },
        {
            "date": "2012-02-08T23:00:30+0000",
            "content": "\nWell, they let you get the version and commit userData w/o having to open the full index... it's a nice \"freedom\" (much lower cost than opening a reader), but how applications actually make use of that freedom specifically, I'm not sure?\n\nIf we don't know of or cannot imagine any real use cases, then I propose we make them deprecated and package private.\n\nIf someone has a real use case: then they can still do it (we didnt hurt them). If no one speaks up for a whole release cycle, they are gone. ",
            "author": "Robert Muir",
            "id": "comment-13204091"
        },
        {
            "date": "2012-02-08T23:31:46+0000",
            "content": "Patch, folding on Robert's suggestions... ",
            "author": "Michael McCandless",
            "id": "comment-13204110"
        },
        {
            "date": "2012-02-09T16:47:27+0000",
            "content": "I have a use case for CommitUserData and I think standard solr DIH could benefit from it as well. \nI use it to persist current status of the max Document id (user id, not lucene docid) to know what I have indexed so far (all update commands are stored in the database and have simple incrementing counter). This makes incremental update process \"restart- and rollback- safe\" as it gets written on lucene commit and read on startup. I do not index this field (not to pollute term dictionary) and I need only to keep max value of it. \n\nI find it hugely useful, but if you have better ideas on how to safely persist max/min value of the field I am all ears. \n\nLast time I checked, solr DIH used its own file in cfg directory to persist max(timestamp), which is kind of risky as it is not in sync with lucene commit point under all scenarios. \n\nI think I even opened an isue on solr jira to expose \"user commit data\"  feature to solr, but I am missing good ideas on how to expose it to solr users (max/min/avg field tracking maybe)...\n\nCheers, eks ",
            "author": "Eks Dev",
            "id": "comment-13204634"
        },
        {
            "date": "2012-02-09T17:59:50+0000",
            "content": "Eks, do you mean you use the IR/DR static methods to look at the last commit's userData?\n\nOr that you use commit userData from an already opened IndexReader...? ",
            "author": "Michael McCandless",
            "id": "comment-13204694"
        },
        {
            "date": "2012-02-09T20:00:16+0000",
            "content": "whoops, before putting mouth to action, one should use brain... just quickly skimmed over this issue and stumbled on \" ...If no one speaks up for a whole release cycle, they are gone...\" out of context, so I concluded user data is gone.\n\nOf course, they do not have to be static, I read it only on restart so even if I do not need open IR, it is not an issue to open it once... \nsorry for the noise ",
            "author": "Eks Dev",
            "id": "comment-13204796"
        },
        {
            "date": "2012-02-10T18:51:45+0000",
            "content": "+1 to commit ",
            "author": "Uwe Schindler",
            "id": "comment-13205629"
        },
        {
            "date": "2012-02-15T08:44:29+0000",
            "content": "Sorry guys for not following the issue more closely. We use IndexReader.getCommitUserData in many places across our code.\n\nOne place is when we addIndexes(Directory). We have a need to merge the input Directory's commit data with the target index's commit data. Since we use the optimized writer.addIndexes method, it is a waste to open an IndexReader to retrieve the commit data.\n\nAnother place is where we just need to read the commit data to extract information, without actually needing an IndexReader instance.\n\nIn short, this method is very useful to us, and I don't see the advantage of making it deprecated. I don't mind if we move it to a DirectoryUtil class if it bothers anyone that it's on IndexReader.\n\nWe don't use IndexReader.getVersion so I don't mind if it becomes deprecated, but I wonder, if there's no real advantage, what's the harm of keeping it? ",
            "author": "Shai Erera",
            "id": "comment-13208273"
        },
        {
            "date": "2012-02-15T08:56:31+0000",
            "content": "You don't need to open IR:\n\n\tuse the static IR.listCommits(Directory dir)\n\ttake the last IndexCommit in the list (the newest one)\n\tcall getCommitUserData()\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13208278"
        },
        {
            "date": "2012-02-15T09:03:24+0000",
            "content": "By the way: Why is the return value of listCommits() Collection<IndexCommit> and not List<IndexCommit>. There is only one implementation, that already uses a List, so for things like getting newest Commit quickly, it might be better to have a List or SortedSet.\n\nChange is easy (maybe in separate issue). In 4.0 we should change this (3.x is also possible because of backwards using return type overloading). ",
            "author": "Uwe Schindler",
            "id": "comment-13208283"
        },
        {
            "date": "2012-02-15T09:23:14+0000",
            "content": "The method that you proposes is not very efficient \u2013 why do I need to list all commits just to retrieve the latest's commitData?\n\nBy the way: Why is the return value of listCommits() Collection<IndexCommit> and not List<IndexCommit>\n\nIt is like that for API back-compat. The return value of a method is part of its signature. I don't remember on which issue, but I wanted to do that once, and discovered that it breaks either the backwards tests, or current running code (with the new .jar). That's why the method documents that in practice it returns a sorted List. ",
            "author": "Shai Erera",
            "id": "comment-13208298"
        },
        {
            "date": "2012-02-15T09:37:08+0000",
            "content": "But we can change that in 4.0? ",
            "author": "Uwe Schindler",
            "id": "comment-13208311"
        },
        {
            "date": "2012-02-15T09:37:33+0000",
            "content": "The method that you proposes is not very efficient \u2013 why do I need to list all commits just to retrieve the latest's commitData?\n\nIf you only have 1 commit it does not matter. ",
            "author": "Uwe Schindler",
            "id": "comment-13208312"
        },
        {
            "date": "2012-02-15T09:48:15+0000",
            "content": "But we can change that in 4.0?\n\nYes, in 4.0, DirReader.listCommits returns List<>.\n\nIf you only have 1 commit it does not matter.\n\nYes, that's right. But I cannot guarantee that (because we sometimes maintain few index commits). What's wrong with just undeprecating the method? It's not like it was deprecated for technical reasons. As said above, nobody thought of a useful scenario to use it, so it was deprecated. But I have a useful scenario.\n\nDo you agree that I simply undeprecate them? ",
            "author": "Shai Erera",
            "id": "comment-13208317"
        },
        {
            "date": "2012-02-15T09:55:59+0000",
            "content": "I don't think we should: I don't understand the use case behind these static methods.\n\nIs it really faster? Do you have any benchmarks showing the gain? ",
            "author": "Robert Muir",
            "id": "comment-13208324"
        },
        {
            "date": "2012-02-15T10:16:30+0000",
            "content": "You mean if IndexReader.getCommitUserData() is faster than IndexReader.open().getIndexCommit().getUserData()? Do I really need to benchmark this !?\n\nThe static method just reads the SegmentInfos and returns the commitData. Opening an IndexReader at least opens its all sub-segments, loads norms, deleted docs and what not.\n\nLook, it's not like I'm trying to add a new API. It existed for a long time, and it happens to be that I'm using it (and maybe others who didn't speak up). So why deprecate it?\n\nI'm also using it in the SearcherTaxoManager (not yet uploaded to LUCENE-3786) to inspect the commit data on the taxonomy directory before I create a new DirTaxoReader, which is very expensive. So why nuke it? ",
            "author": "Shai Erera",
            "id": "comment-13208335"
        },
        {
            "date": "2012-02-15T11:28:50+0000",
            "content": "\nYou mean if IndexReader.getCommitUserData() is faster than IndexReader.open().getIndexCommit().getUserData()? Do I really need to benchmark this !?\n\nNope, but thats not really the question. I mean in the full picture of the application, is there another way?\n\n\nThe static method just reads the SegmentInfos and returns the commitData. Opening an IndexReader at least opens its all sub-segments, loads norms, deleted docs and what not.\n\nwait, i dont think thats totally true. Opening the static method may or may not also read in fieldinfos (as they are tied to segmentinfos in trunk currently). Opening an indexreader doesnt load norms until you ask for them, for example.\n\n\nLook, it's not like I'm trying to add a new API. It existed for a long time, and it happens to be that I'm using it (and maybe others who didn't speak up). So why deprecate it?\n\nWell I thought the API was confusing, especially the overloaded names, but when looking into it, I started to question why it needs to exist.\n\nI think this is ok: we can't keep adding and adding, I think its good to try to hide some of this stuff.\n\nEspecially in Lucene's trunk: lots of things in o.a.l.index (SegmentInfos, public ctors to SegmentReader, etc) don't really need to be public anymore IMO, \nsome of this was expert workarounds for the fact we didn't have an extensible codecs package. We shouldn't try to support 2 \"apis\" from this perspective,\naccessing parts of the index through expert methods and at the same time having a codec api.\n\n\nI'm also using it in the SearcherTaxoManager (not yet uploaded to LUCENE-3786) to inspect the commit data on the taxonomy directory before I create a new DirTaxoReader, which is very expensive. So why nuke it?\n\nWell its still available in 3.x as deprecated methods... were you planning on making a patch against 3.x for LUCENE-3786 initially?\n\nhere's an idea: how about we defer this discussion until we see your patch? If it makes sense for LUCENE-3786, then we have a valid use case? ",
            "author": "Robert Muir",
            "id": "comment-13208382"
        },
        {
            "date": "2012-02-15T11:40:54+0000",
            "content": "I mean in the full picture of the application, is there another way?\n\nOne of my use cases is a distributed system which receives 'delta' indexes that need to be merged with a bigger one. There, I open FSDirectory and use IndexWriter.addIndexes(dir). I don't need to load the IndexReader. What I do need though is read some time stamps and other metadata that I put in the index's commit data and merge that with the target index's commit data.\n\nOpening an indexreader doesnt load norms until you ask for them, for example\n\nThis is from SegmentReader's ctor. I followed IndexReader.open() and reached it, without any 'ifs' (unless I missed something):\n\n\n      instance.core = new SegmentCoreReaders(instance, dir, si, readBufferSize, termInfosIndexDivisor);\n      if (doOpenStores) {\n        instance.core.openDocStores(si);\n      }\n      instance.loadDeletedDocs();\n      instance.openNorms(instance.core.cfsDir, readBufferSize);\n\n\n\nIt does load the norms and deleted docs (and maybe even doc stores).\n\nWell its still available in 3.x as deprecated methods... were you planning on making a patch against 3.x for LUCENE-3786 initially?\n\nThere are two questions here:\n\n(1) Was I planning to support SearcherTaxoManager in 3.x \u2013 YES\n(2) Was I planning to start with a patch against 3.x \u2013 Not Necessarily.\n\nhere's an idea: how about we defer this discussion until we see your patch? If it makes sense for LUCENE-3786, then we have a valid use case?\n\nWhy? Isn't the scenario that I described above enough? Maybe you tell me \u2013 if all you need to do is addIndexes(Directory) and merge the Directory's commitUserData, would you agree to open an IndexReader just for reading the commit data? Don't you think it's too much? ",
            "author": "Shai Erera",
            "id": "comment-13208389"
        },
        {
            "date": "2012-02-15T11:48:18+0000",
            "content": "You also made that comment:\n\nIf someone has a real use case: then they can still do it (we didnt hurt them). If no one speaks up for a whole release cycle, they are gone.\n\nI can still use them in 3.x, but won't in trunk (they're gone from IR there already). And I did speak up before the release . ",
            "author": "Shai Erera",
            "id": "comment-13208395"
        },
        {
            "date": "2012-02-15T11:48:26+0000",
            "content": "\nIt does load the norms and deleted docs (and maybe even doc stores).\n\nnorms are lazy-loaded and cached, when you first ask for them. That just opens the file.\n\nBut still, i dont get it, if you are really worried about these costs, whats wrong with Uwe's suggested method? ",
            "author": "Robert Muir",
            "id": "comment-13208396"
        },
        {
            "date": "2012-02-15T11:51:40+0000",
            "content": "I can still use them in 3.x, but won't in trunk (they're gone from IR there already)\n\nIR does no longer know Directory at all, I think your speak about DirectoryReader in trunk. But there you still can use listCommist()[last]. And thats cheap, just because it creates an ArrayList it is not expensive?  ",
            "author": "Uwe Schindler",
            "id": "comment-13208397"
        },
        {
            "date": "2012-02-15T11:57:31+0000",
            "content": "You're right Uwe, I can do that. But it's still expensive to list all the commits if one just wants the latest's commitData. ",
            "author": "Shai Erera",
            "id": "comment-13208400"
        },
        {
            "date": "2012-02-15T12:11:46+0000",
            "content": "In that case, SegmentInfos is public, so you can use this expert API and read the segmentinfos yourself and ask for anything you want. The code in DR.getCommitUserData is only like 3 lines. ",
            "author": "Uwe Schindler",
            "id": "comment-13208408"
        },
        {
            "date": "2012-02-15T16:39:02+0000",
            "content": "Yes, I know that I can write it. But it means I'll need to write it in every project that I work on. And so will other people. I really don't get it \u2013 what's the problem with having such utility method. If we move it to a DirectoryUtils, will that be better? If we move it to DirectoryReader (on trunk) will that be better?\n\nI don't understand since when we decided to drop API that our users need, because some people \"don't understand the scenario\". Is there a technical reason to remove the method? Is it badly implemented? Is it buggy? Is it hard to maintain? ",
            "author": "Shai Erera",
            "id": "comment-13208567"
        },
        {
            "date": "2012-02-16T13:01:07+0000",
            "content": "Resolving back ... looks like I'm the only one that it bothers. ",
            "author": "Shai Erera",
            "id": "comment-13209333"
        }
    ]
}