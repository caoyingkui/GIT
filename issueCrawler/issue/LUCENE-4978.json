{
    "id": "LUCENE-4978",
    "title": "Spatial search with point query won't find identical indexed point",
    "details": {
        "components": [
            "modules/spatial"
        ],
        "fix_versions": [
            "4.7.1",
            "4.8",
            "6.0"
        ],
        "affect_versions": "4.1",
        "priority": "Minor",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Given a document with indexed POINT (10 20), when a search for INTERSECTS( POINT (10 20)) is issued, no results are returned.\n\nThe work-around is to not search with a point shape, use a very small-radius circle or rectangle.  (I'm marking this issue as \"minor\" because it's easy to do this).\n\nAn unstated objective of the PrefixTree/grid approximation is that no matter what precision you use, an intersects query will find all true-positives.  Due to approximations, it may also find some close false-positives.  But in the case above, that unstated promise is violated.  But it can also happen for query shapes other than points which do in fact barely enclose the point given at index time yet the indexed point is in-effect shifted to the center point of a cell which could be outside the query shape, and ultimately leading to a false-negative.",
    "attachments": {
        "LUCENE-4978_fix_small_grid_false_negatives.patch": "https://issues.apache.org/jira/secure/attachment/12634953/LUCENE-4978_fix_small_grid_false_negatives.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-05-04T04:28:23+0000",
            "content": "The offending code is the implementation of IntersectsPrefixTreeFilter's VisitorTemplate.visitScanned:\n\n        if (cell.getLevel() == grid.getMaxLevels() && !cell.isLeaf())\n          cShape = cell.getCenter();\n        else\n          cShape = cell.getShape();\n        if (queryShape.relate(cShape).intersects())\n          collectDocs(results);\n\n\n\nWhat's going on here is a performance optimization to use a point for the intersection instead of a rectangle.  I never measured the before-after effect, and I'm not sure if I even thought of it in terms of a performance optimization in the first place although that's what it is.\n\nOne possible solution is to see if the query shape is a rectangle or circle; if so then buffer the query shape by 1/2 a grid cell, which is enough to eliminate the possibility of a false-negative. If it's another shape (whether it be a point or a polygon) then use the cell's rect instead of its center point. ",
            "author": "David Smiley",
            "id": "comment-13649007"
        },
        {
            "date": "2013-10-04T16:20:23+0000",
            "content": "Hi David,\nI think I've uncovered this same issue via Elasticsearch, see issue  3795  and have verified it with some test cases I've written. Any chance you'd have time to take a look at this? I'm digging in myself, but am still just at a stage of getting a sense for the codebase. ",
            "author": "oli mcc",
            "id": "comment-13786287"
        },
        {
            "date": "2013-10-04T19:15:47+0000",
            "content": "Hi Oli,\nThis issue is indeed the root cause of the one you refer to in ES.  I spent a little time on fixing the problem months ago but held off because I wanted to better understand the performance trade-off, and I hadn't yet developed a benchmark \u2013 through I have one now in LUCENE-2844.\n\nCorrect me if I'm wrong but I heard ES has a point-query optimization.  At least I thought I saw something like that when I looked through ES's docs a couple months ago.  I would like to add such an optimization within Lucene-spatial which would effectively avoid this particular issue you hit because it would end up being a simple Lucene term query.  This underlying issue would still exist though, it just wouldn't show up with a point query.\n\nIf you want a quick solution that only addresses intersection with a Point query, then you could modify the code I reference in the comment above to not use cell.getCenter() when queryShape is an instance of Point.  Make sense?\n\nTo be clear though, the quick solution or a solution optimizing a point query doesn't actually address the underlying problem; it just fixes it for point queries only.  It's still possible to index a point that fits inside a query rectangle extremely close to the edge, and depending on which side of the grid line the rectangle border is, you might not match the point. ",
            "author": "David Smiley",
            "id": "comment-13786519"
        },
        {
            "date": "2013-10-18T18:24:57+0000",
            "content": "Hi David,\n\nSorry for the delay in following up, I've actually been spending some time familiarizing myself with the code and have some followup thoughts/questions.\n\nI think I get the issue now; the optimization short circuits to using the centre (a cheaper relation verification) in some cases, and as a result, the following two query types (a point and polygon) would not match due to no intersection with the centre.\n\n\n\n\tIt's not clear to me why the quick fix doesn't work in both cases you described however, maybe  I'm missing the underlying problem. If we always use cell.getShape() won't we be guaranteed to match all points in the cell (potentially inefficient and with false positives, but not false negatives)?\n\n\n\n\n\tI think this is purely a query time issue, would that be right? I'd like to start indexing documents now, but will avoid doing so if a fix to this will require a re-index.\n\n\n\nTo hopefully answer your question, Elasticsearch does have a specific mapping type for geo points (GeoPointFieldMapper.java which I think follows the pattern you described.  ",
            "author": "oli mcc",
            "id": "comment-13799375"
        },
        {
            "date": "2013-10-18T19:01:40+0000",
            "content": "Quoting myself with emphasis:\nIf you want a quick solution that only addresses intersection with a Point query, then you could modify the code I reference in the comment above to not use cell.getCenter() when queryShape is an instance of Point.\n\nSo if you want to always avoid this problem (not just for point shapes), simply don't ever use cell.getCenter() regardless of what the query shape is.  Always use cell.getShape().\n\nSo you're on the right track.  You are correct that this issue won't affect indexed data. ",
            "author": "David Smiley",
            "id": "comment-13799415"
        },
        {
            "date": "2014-03-16T03:38:23+0000",
            "content": "This patch addresses the issue simply by removing the optimization.  I did some performance tests with rects & circles and it was very minor, although I didn't test polygons which should have a greater effect.\n\nWhile I was at it, I beefed up the tests further in ways that would have previously failed due to the false-negative.  I removed an older test: RecursivePrefixTreeTest.geohashRecursiveRandom() which is hard to maintain and is now obsoleted by SpatialOpRecursivePrefixTreeTest which now uses geohashes.\n\nI'll commit this Monday. ",
            "author": "David Smiley",
            "id": "comment-13936404"
        },
        {
            "date": "2014-03-18T05:26:51+0000",
            "content": "Commit 1578741 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1578741 ]\n\nLUCENE-4978: spatial grid false-negatives at edge ",
            "author": "ASF subversion and git services",
            "id": "comment-13938837"
        },
        {
            "date": "2014-03-18T05:31:25+0000",
            "content": "Commit 1578742 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1578742 ]\n\nLUCENE-4978: spatial grid false-negatives at edge ",
            "author": "ASF subversion and git services",
            "id": "comment-13938842"
        },
        {
            "date": "2014-03-18T13:46:53+0000",
            "content": "Commit 1578889 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1578889 ]\n\nLUCENE-4978: invert biasContains on query side ",
            "author": "ASF subversion and git services",
            "id": "comment-13939202"
        },
        {
            "date": "2014-03-18T13:47:29+0000",
            "content": "Commit 1578891 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1578891 ]\n\nLUCENE-4978: invert biasContains on query side ",
            "author": "ASF subversion and git services",
            "id": "comment-13939203"
        },
        {
            "date": "2014-03-24T15:34:22+0000",
            "content": "David Smiley, any reason not to backport this to 4.7.1? ",
            "author": "Steve Rowe",
            "id": "comment-13945216"
        },
        {
            "date": "2014-03-24T15:57:13+0000",
            "content": "Oh I didn't know there was going to be a 4.7.1.  I'll backport.  Thanks for alerting me. ",
            "author": "David Smiley",
            "id": "comment-13945266"
        },
        {
            "date": "2014-03-24T18:16:27+0000",
            "content": "I proposed 4.7.1 a week ago on the dev list: http://mail-archives.apache.org/mod_mbox/lucene-dev/201403.mbox/%3c49AB4538-88CC-4273-AC9B-B51FA3CB3F45@gmail.com%3e\n\nDavid, I'd like to cut a 4.7.1 RC today - do you think you'll have time to do the backport today?  If not, I can take a crack at it.  ",
            "author": "Steve Rowe",
            "id": "comment-13945450"
        },
        {
            "date": "2014-03-24T19:22:03+0000",
            "content": "I'll do it now. ",
            "author": "David Smiley",
            "id": "comment-13945566"
        },
        {
            "date": "2014-03-24T19:40:31+0000",
            "content": "Commit 1581017 from David Smiley in branch 'dev/branches/lucene_solr_4_7'\n[ https://svn.apache.org/r1581017 ]\n\nLUCENE-4978: spatial grid false-negatives at edge ",
            "author": "ASF subversion and git services",
            "id": "comment-13945598"
        },
        {
            "date": "2014-03-24T19:41:46+0000",
            "content": "Commit 1581019 from David Smiley in branch 'dev/branches/lucene_solr_4_7'\n[ https://svn.apache.org/r1581019 ]\n\nLUCENE-4978: invert biasContains on query side ",
            "author": "ASF subversion and git services",
            "id": "comment-13945599"
        },
        {
            "date": "2014-04-02T15:04:53+0000",
            "content": "Bulk close 4.7.1 issues ",
            "author": "Steve Rowe",
            "id": "comment-13957764"
        }
    ]
}