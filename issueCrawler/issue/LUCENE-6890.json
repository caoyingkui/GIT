{
    "id": "LUCENE-6890",
    "title": "Specialize 1D dimensional values intersection",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "I tried implementing the same specialization we had before LUCENE-6881 for the 1D case, but after testing it, I don't think it's worth it.\n\nI'll upload the patch here for posterity (tests pass), but net/net it adds non-trivial code complexity in exchange for minor (5.39 sec -> 5.25 sec for 225 queries) query gains.  Maybe in the future someone could improve this so it's more compelling... but I don't think the tradeoff is worth it today.\n\nFurthermore, the optimization 1) requires an API change, and 2) is not even admissible in the current patch, since the query could be a union of multiple disjoint ranges when the optimization assumes it's just a single range.\n\nThe gist of the idea is to locate the start leaf block and end leaf block, make an informed estimate of the expected result set size, and then do a linear scan of the leaf blocks, vs the recursion and \"grow per leaf block\" we do today.  I think the conclusion is that this used to be more sizable win, but DocIdSetBuilder has improved so that it is plenty fast without \"upfront\" growing, which is nice \n\nOr maybe my benchmark is bogus \n\nI'll commit the minor code comment / TODOs / test improvements from the patch ...",
    "attachments": {
        "LUCENE-6890.patch": "https://issues.apache.org/jira/secure/attachment/12772461/LUCENE-6890.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14998860",
            "author": "ASF subversion and git services",
            "date": "2015-11-10T16:26:22+0000",
            "content": "Commit 1713684 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1713684 ]\n\nLUCENE-6890: update TODOs; remove dead code from test case; improve javadocs "
        },
        {
            "id": "comment-15006416",
            "author": "Daniel Mitterdorfer",
            "date": "2015-11-16T09:50:00+0000",
            "content": "Hi Michael McCandless\n\nyou've mentioned that you wanted to uploaded the patch anyway but it seems to be missing. Can you please upload it? Thanks!\n\nDaniel "
        },
        {
            "id": "comment-15006418",
            "author": "Michael McCandless",
            "date": "2015-11-16T09:50:41+0000",
            "content": "you've mentioned that you wanted to uploaded the patch anyway but it seems to be missing. \n\nGak, you're right!  Thanks for noticing, I would have rm'd this checkout soon! "
        },
        {
            "id": "comment-15006421",
            "author": "Michael McCandless",
            "date": "2015-11-16T09:51:46+0000",
            "content": "Patch, that adds too much code complexity, is buggy (because the opto isn't safe for the union-of-disjoint-parts), and too little query performance gains. "
        },
        {
            "id": "comment-15007110",
            "author": "Adrien Grand",
            "date": "2015-11-16T18:53:05+0000",
            "content": "DocIdSetBuilder has improved so that it is plenty fast without \"upfront\" growing, which is nice\n\nGreat to hear! "
        }
    ]
}