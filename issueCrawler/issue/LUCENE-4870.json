{
    "id": "LUCENE-4870",
    "title": "Lucene deletes entire index if and exception is thrown due do TooManyOpenFiles and OpenMode.CREATE_OR_APPEND",
    "details": {
        "components": [],
        "fix_versions": [
            "4.3",
            "4.2.1",
            "6.0"
        ],
        "affect_versions": "4.0,                                            4.1,                                            4.2,                                            3.6.2",
        "priority": "Blocker",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The Lucene IndexWriter might delete an entire index if it hits a FileNotFoundException triggered by TooManyOpenFiles during IndexWriter creation. We try to figure out if the index exists already if the OpenMode.CREATE_OR_APPEND is set (which is default). Yet, the logic in DirectoryReader#indexExists(Directory) will just return false if we are not able to open the segment file. This will cause the IW to assume there is no index and it will try to create a new index there trashing all existing commit points treating this as a OpenMode.CREATE.",
    "attachments": {
        "LUCENE-4870.patch": "https://issues.apache.org/jira/secure/attachment/12574994/LUCENE-4870.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-22T10:12:18+0000",
            "content": "here is a testcase showing the issue ",
            "author": "Simon Willnauer",
            "id": "comment-13610093"
        },
        {
            "date": "2013-03-22T10:25:42+0000",
            "content": "Not good!\n\nIs there no reliable way to differentiate \"file does not exist\" from \"I ran out of file handles\" from the exception we get from trying to open RAF/FileChannel.open?\n\nIs File.exists() even trustworthy once you've run out of descriptors?\n\nMaybe ... we should fix SegmentInfos.read, where it calls dir.openInput, to throw a different exception (OpenSegmentsFailedIOException) if the open failed vs if a subsequent op (reading bytes from segments file, or opening the SegmentReaders) failed.  This way we could catch this exception above and know that a segments file in fact exists yet we were unable to open it (and return \"true\" for indexExists in this case). ",
            "author": "Michael McCandless",
            "id": "comment-13610102"
        },
        {
            "date": "2013-03-22T10:27:01+0000",
            "content": "this affects 3.6 too ",
            "author": "Simon Willnauer",
            "id": "comment-13610103"
        },
        {
            "date": "2013-03-22T10:30:25+0000",
            "content": "mike I agree we need to fix this. I think one way of looking into this is the fact that we already called the doBody method in SegmentInfos.read is an indicator that the file exists. If that read method still throws a FileNotFoundException its almost certain that we need to do something here. I think we should never go and just return true here we should rather fire up a true error here like a corrupt index exception or something like this? ",
            "author": "Simon Willnauer",
            "id": "comment-13610107"
        },
        {
            "date": "2013-03-22T11:04:06+0000",
            "content": "in fact, I think mikes suggestion is not all that bad. I think that is a fair game here to return true if we actually can detect a false FileNotFound exception. Here is a patch to fix this issue. ",
            "author": "Simon Willnauer",
            "id": "comment-13610146"
        },
        {
            "date": "2013-03-22T14:02:42+0000",
            "content": "+1, thanks Simon!\n\nCan you reference this Jira in the comment, and eg say \"we may have hit false FNFE due to too many open files\".\n\nMaybe drop the 1000 iters lower in the test?  The test is a bit slowish ... ",
            "author": "Michael McCandless",
            "id": "comment-13610285"
        },
        {
            "date": "2013-03-22T16:13:47+0000",
            "content": "I move the iterations to 10 (this really failed super quickly anyways) and referenced the issue in both the test and the fix. I think this is ready and I will commit shortly. I will also port this to 4.3 4.2.1 and 3.6 since this might be worth a 3.6.3 release too, thoughts? ",
            "author": "Simon Willnauer",
            "id": "comment-13610502"
        },
        {
            "date": "2013-03-22T17:44:44+0000",
            "content": "I can do the 3.6.3 release if it is very urgent - takes me a few minutes to set it up to build with Java 1.5 on my server (maybe a ES customer on 3.6 Lucene?). ",
            "author": "Uwe Schindler",
            "id": "comment-13610979"
        },
        {
            "date": "2013-03-22T18:35:37+0000",
            "content": "I think we can resolve this. I already committed a fix for this to ES though. Unless anybody really needs this on 3.6 I am ok with just fixing on 4.2.1. ",
            "author": "Simon Willnauer",
            "id": "comment-13611051"
        },
        {
            "date": "2013-03-22T18:36:08+0000",
            "content": "committed to 5.0 and ported to 4.3 and 4.2.1 ",
            "author": "Simon Willnauer",
            "id": "comment-13611052"
        },
        {
            "date": "2013-05-10T10:34:27+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13654226"
        },
        {
            "date": "2013-08-05T08:27:11+0000",
            "content": "Hello, Lucene team,\n\nMy team and I are currently running a quite old version of the lucene-core library - 3.0.0. As part of our internal memory optimization fixes, we are also planning to migrate to newer version. Research so far brought me to think our best risk-benefit trade off is Lucene 3.6.2. (We are planning to go to the 4.X branch - current development, but that would perhaps come in our own major version upgrade) However, due to this here issue, I would really like to know which version of the core library does not have it? 3.6.1 perhaps? Or 3.5.X?\n\nAs I understand from your comments, you are not yet planning to provide a fix on the 3.6.X branch - please advise to which version we should migrate where this bug is not present?\n\nThank you very much!\nVassil Zorev, web developer ",
            "author": "Vassil Zorev",
            "id": "comment-13729296"
        },
        {
            "date": "2013-08-05T08:56:17+0000",
            "content": "this has been fixed in 4.2.1 - I'd recommend to upgrade to the latest 4.x version that is 4.4 at this point.\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-13729313"
        }
    ]
}