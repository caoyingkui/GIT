{
    "id": "LUCENE-7453",
    "title": "Change naming of variables/apis from docid to docnum",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "In SOLR-9528 a suggestion was made to change docid to docnum. The reasoning for this is most notably that docid has a connotation about a persistent unique identifier (eg like _id in elasticsearch or id in solr), while docid in lucene is currently some local to a segment, and not comparable directly across segments.\n\nWhen I first started working on Lucene, I had this same confusion. docnum is a much better name for this transient, segment local identifier for a doc. Regardless of what solr wants to do in their api (eg keeping docid), I think we should switch the lucene apis and variable names to use docnum.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15507544",
            "author": "Dawid Weiss",
            "date": "2016-09-20T19:29:42+0000",
            "content": "To me the difference between docnum and docid is really that docnum is one letter longer  Seriously, it doesn't seem to be explaining anything more than docid does. It would be more self-explanatory to call it docSegmentIndex, but this seems verbose.\n\nDon't you think adding better documentation (in one place and linking to it) would be a better idea than just renaming? Also, the nomenclature here has been with us for years. I don't see an obvious benefit of switching to docnum for new users and I see how it may be a confusing change to existing Lucene-experienced developers (especially if they have their own code that would stick to \"docid\" in local variables, etc. "
        },
        {
            "id": "comment-15507786",
            "author": "Uwe Schindler",
            "date": "2016-09-20T21:02:15+0000",
            "content": "I was the one who suggested that change. Imho the change would only modify parameter names and maybe some getter, although they are mostly called doc()  int iterators. So this would not break anything or require updates in code of users. Just naming of parameters and corresponding javadocs. So risk is low. "
        },
        {
            "id": "comment-15508004",
            "author": "Paul Elschot",
            "date": "2016-09-20T22:34:12+0000",
            "content": "I'm in favour, but it is going to be hard:\n\npublic abstract class DocIdSet ...\npublic abstract class DocIdSetIterator ...\n\n\nI vaguely recall not really agreeing with these names, but it is probably too late now.\n "
        },
        {
            "id": "comment-15508210",
            "author": "David Smiley",
            "date": "2016-09-21T00:11:24+0000",
            "content": "To me the difference between docnum and docid is really that docnum is one letter longer  Seriously, it doesn't seem to be explaining anything more than docid does. It would be more self-explanatory to call it docSegmentIndex, but this seems verbose.\n\nI feel the same way \u2013 there is no semantic difference.   "
        },
        {
            "id": "comment-15509049",
            "author": "Dawid Weiss",
            "date": "2016-09-21T07:26:47+0000",
            "content": "I'm in favor of cleaning up wording too \u2013 don't get me wrong \u2013 I just don't feel like docnum is particularly more expressive than docid and as Paul pointed out, there are other places which use the \"docid\" idiom.\n\nAs for risks, Uwe, there are none, obviously, but we have code that uses the 'docid' in local variables to be consistent with Lucene naming, that's all. "
        },
        {
            "id": "comment-15509250",
            "author": "Michael McCandless",
            "date": "2016-09-21T08:48:04+0000",
            "content": "+1 to rename docId -> docNum.\n\nid, short for identifier, implies you have a lasting unique identifier, a primary key.  This has tripped up a number of users over time, who were surprised to see that segment merging unexpectedly shuffles the \"ids\" they got back from searches.\n\nI think docNum is a good improvement because it makes it sounds like we are numbering the documents, not assigning a unique identifier to them. "
        },
        {
            "id": "comment-15509280",
            "author": "Dawid Weiss",
            "date": "2016-09-21T09:01:53+0000",
            "content": "I think docNum is a good improvement because it makes it sounds like we are numbering the documents, not assigning a unique identifier to them.\n\nSorry, but this explanation is even more controversial and vague to me (what is \"numbering\" of documents?). I'd prefer simply explaining that identifiers are persistent within an index segment (because they are), but index segments can be merged and thus a document may be moved across index segments over time, changing its per-segment identifier. \n\nIf we really wish to make loops like this not use the \"id\" naming:\n\nfor (int docId = 0, max = indexReader.maxDoc(); docId < max; docId++) {\n  // do something\n}\n\n\n\nthen really docNum doesn't make it any better. Even docIndex seems better to me; in fact, this \"index\" makes sense both at segment level (where the index doesn't change) and at composite reader level (where the 'index' of a document has a more complex semantics). If we make it clear document index is volatile and is valid (and constant) only for the a opened reader, then this is more clear to me.\n\n\nfor (int docIndex = 0, max = indexReader.maxDoc(); docIndex < max; docIndex++) {\n          // do something\n}\n\n\n "
        },
        {
            "id": "comment-15509437",
            "author": "Michael McCandless",
            "date": "2016-09-21T10:00:56+0000",
            "content": "+1 for docIndex! "
        },
        {
            "id": "comment-15509458",
            "author": "Dawid Weiss",
            "date": "2016-09-21T10:06:44+0000",
            "content": "The more I think about it, the more I think docIndex is actually quite all right in this context. When you think of documents inside a reader as a contiguous \"array\" of documents, the index makes a lot of sense. The index is also not at all associated with the document \u2013 much like an array index tells you nothing about the object at that index. A clarified documentation saying document indexes remain constant for an open IndexReader (but can change upon its reopening!) would make it even better.\n\nRyan, what do you think? "
        },
        {
            "id": "comment-15509692",
            "author": "David Smiley",
            "date": "2016-09-21T11:57:30+0000",
            "content": "+1 to docIndex \u2013 nice name.\n\nPresumably we'd change both master & 6x so as to minimize backporting pain backporting of other issues?  Also... I wonder if some issues like this one are best delayed until when the next major release nears.  Again, to ease feature/bug back-porting. "
        },
        {
            "id": "comment-15509734",
            "author": "Uwe Schindler",
            "date": "2016-09-21T12:14:37+0000",
            "content": "+1 to DocIndex.\n\nI see the problem like Paul Elschot that we might need to rename some classes, too  "
        },
        {
            "id": "comment-15509799",
            "author": "Mikhail Khludnev",
            "date": "2016-09-21T12:44:12+0000",
            "content": "what is \"numbering\" of documents?\nNumbering means identifying in a sequence. fwiw, it would be great if this naming convention allow to distinguish between segment num/id/whateer and global ones. "
        },
        {
            "id": "comment-15509814",
            "author": "Mikhail Khludnev",
            "date": "2016-09-21T12:49:09+0000",
            "content": "c'mon. Are you fine to get docIndex from IndexReader or IndexSearcher after submitting docs to IndexWriter?  "
        },
        {
            "id": "comment-15509831",
            "author": "Dawid Weiss",
            "date": "2016-09-21T12:55:03+0000",
            "content": "Are you fine to get docIndex from IndexReader or IndexSearcher after submitting docs to IndexWriter?\n\nYes, I think so. When you add a document to an IndexWriter you don't get any document \"id\" (or its number) anyway. Documents are indexed and made available to you once you acquire a new IndexReader \u2013 and then each document will be uniquely described with an \"index\", valid only within this particular IndexReader. I think this makes sense, even when you think of methods like maxDoc which could read maxDocIndex... "
        },
        {
            "id": "comment-15509889",
            "author": "Adrien Grand",
            "date": "2016-09-21T13:22:06+0000",
            "content": "When you think of documents inside a reader as a contiguous \"array\" of documents, the index makes a lot of sense\n\n+1 to this point, this is the analogy I always make in order to explain doc ids. I like moving to a name that suggests that the doc id is an index rather than an identifier.\n\nRegarding the class renaming, even though these are expert/low-level classes, I agree it'd be nicer to do the renaming in a major release since everybody who has low-level integration with Lucene probably messes up with the DocIdSetIterator class. Unless maybe we can figure a way to make the migration easier by either making DocIndexIterator (or whatever the new name would be) a parent or sub class of DocIdSetIterator and deprecating DocIdSetIterator?\n "
        },
        {
            "id": "comment-15509918",
            "author": "Dawid Weiss",
            "date": "2016-09-21T13:33:00+0000",
            "content": "[...] since everybody who has low-level integration with Lucene probably messes up with the DocIdSetIterator\n\nAmen to this. Also, DocIndexIterator also sounds like a sensible in this context, doesn't it? "
        },
        {
            "id": "comment-15510719",
            "author": "Ryan Ernst",
            "date": "2016-09-21T18:12:58+0000",
            "content": "I'm ok with docIndex, it is at least an improvement over docid (although I do dislike using such an overloaded term). "
        },
        {
            "id": "comment-15510784",
            "author": "Ryan Ernst",
            "date": "2016-09-21T18:34:00+0000",
            "content": "although I do dislike using such an overloaded term\n\nJust to be perfectly clear about this statement, i meant the overloading of \"index\", because it is used in so many ways (inverted index and array index, which are obviously similar, but very different things, one is a collection of data structures in files, and the other is a number). "
        },
        {
            "id": "comment-15510820",
            "author": "Yonik Seeley",
            "date": "2016-09-21T18:49:16+0000",
            "content": "\nIndeed, \"docIndex\" can also be read as \"an index of documents\" (just like term index is an index of terms).\ndocOrd is another option, but I don't like it. "
        },
        {
            "id": "comment-15510965",
            "author": "Paul Elschot",
            "date": "2016-09-21T19:45:46+0000",
            "content": "I tried an alternative that adds an variation of segment wherever docID is used in some form.\n\nHere is an overview of renaming possibilities for core/src/java, in three column python strings.\n\nThe first column contains the current name, the second column a segment variant, the third column an index variant.\nPlease assume an appropriate amount of question marks (??) in the second and third columns.\n\n\nclassFileRenames = \"\"\"\n\nDocIdSet                     SegDocIdSet                          DocIndexSet\nDocIdSetIterator             SegDocIdSetIterator                  DocIndexIterator\nConjunctionDISI              ConjunctionSegDisi                   ConjunctionDixi\nDisjunctionDISIApproximation DisjunctionSegDisiApproximation      DisjunctionDixiApproximation\nDisiPriorityQueue            SegDisiPriorityQueue                 DixiPriorityQueue\nDisiWrapper                  SegDisiWrapper                       DixiWrapper\nFilteredDocIdSetIterator     FilteredSegDisi                      FilteredDixi\nDocIdSetBuilder              SegDocIdSetBuilder                   DocIndexSetBuilder\nRoaringDocIdSet              RoaringSegDocIdSet                   RoaringDocIndexSet\nIntArrayDocIdSet             IntArraySegDocIdSet                  IntArrayDocIndexSet\nNotDocIdSet                  NotSegDocIdSet                       NotDocIndexSet\nBitDocIdSet                  BitSegDocIdSet                       BitDocIndexSet\nDocIdsWriter                 SegDocIdsWriter                      DocIndexesWriter\nDocIdMerger                  SegDocIdMerger                       DocIndexMerger\n\"\"\"\n\nidentifierRenames = classFileRenames + \"\"\"\n\nTwoPhaseIteratorAsDocIdSetIterator TwoPhaseIteratorAsSegDocIdSetIterator TwoPhaseIteratorAsDocIndexIterator\nBitSetConjunctionDISI              BitSetConjunctionDisi                 BitSetConjunctionDisi\nIntArrayDocIdSetIterator           IntArraySegDocIdSetIterator           IntArrayDocIndexIterator\n\nasDocIdSetIterator                 asSegDocIdSetIterator                 asDocIndexIterator\ngetDocId                           getSegDocId                           getDocIndex\ndocID                              sdocID                                docIndex\n\ndocID                              sdocID                                docIdx\ndocId                              sdocId                                docIdx\ndocIDs                             sdocIDs                               docIdxs\ndocIds                             sdocIds                               docIdxs\ndisi                               sdisi                                 dixi\ndocIdSet                           sDocIdSet                             docIndexSet\n\n\"\"\"\n\n\n\n(The identifiers here are for local classes, methods and variables.)\n\nI don't like overloading index for this, especially in the class names, so for now I'd prefer the segment variants in second column.\n\nAnyway, we could use the opportunity to shorten some of the longer names. "
        },
        {
            "id": "comment-15511028",
            "author": "Dawid Weiss",
            "date": "2016-09-21T20:13:08+0000",
            "content": "[...] i meant the overloading of \"index\", because it is used in so many ways (inverted index and array index, which are obviously similar, but very different things, one is a collection of data structures in files, and the other is a number).\n\nThat the term is overloaded with meanings doesn't mean this particular use case isn't appropriate. \n\nLooking at Paul's table the index column still looks semantically most clear to my eyes. What I like in particular is that there is no notion of the \"index\" belonging to a segment (as SegDocIdSet would imply). Rather, like I said before, the doc index is a logical index of a document within an index reader (whether it's a leaf reader or a composite doesn't matter). It nicely fits in loops created for reader.maxDoc, for example.\n\nThis said, everyone will have their favorites; this is probably a multicriteria optimisation problem with pareto-optimal set of solutions, rather than a single one... "
        },
        {
            "id": "comment-15511042",
            "author": "Ryan Ernst",
            "date": "2016-09-21T20:16:45+0000",
            "content": "I don't like overloading index for this, especially in the class names, so for now I'd prefer the segment variants in second column.\n\nBut the seg examples you have still have docid, just with seg prepended. It still has the problem that it uses \"id\", when id means identifier, which is usually an opaque string. docnum to me is still the best, the document number in the segment (where \"in the segment is implied\", although if we want SegDocNum, I guess it'd be ok, just more wordy).\n\nAnyway, we could use the opportunity to shorten some of the longer names.\n\n+1 "
        },
        {
            "id": "comment-15511047",
            "author": "Hoss Man",
            "date": "2016-09-21T20:17:32+0000",
            "content": "We could just call it the huperDuperEphemeralPositionInIndex "
        },
        {
            "id": "comment-15511049",
            "author": "Ryan Ernst",
            "date": "2016-09-21T20:18:26+0000",
            "content": "this is probably a multicriteria optimisation problem with pareto-optimal set of solutions, rather than a single one...\n\nThat is why I'm ok with \"docIndex\" here, it just isn't my favorite. But it is still better than docid. "
        },
        {
            "id": "comment-15511065",
            "author": "Mikhail Khludnev",
            "date": "2016-09-21T20:23:53+0000",
            "content": "Whatever you name it, let's have dixi in code! Please! "
        },
        {
            "id": "comment-15511085",
            "author": "Dawid Weiss",
            "date": "2016-09-21T20:30:19+0000",
            "content": "Hoss, consider the possibilities of using non-ascii unicode letters (valid Java identifiers). Perfectly fine to call it doc\u03bb. Or even better, just \u2135. \u2135Set. \u2135Iterator. Think of it, wouldn't that be truly unique. "
        },
        {
            "id": "comment-15511145",
            "author": "Paul Elschot",
            "date": "2016-09-21T20:55:05+0000",
            "content": "But the seg examples you have still have docid, just with seg prepended. It still has the problem that it uses \"id\", when id means identifier,\n\nThis is meant as an identifier for a document within a segment; in a segment this identifier is permanent. There may be another identifier in a document field, but that is irrelevant here.\n\nFor compound readers there are multiple segments, and also in that case adding seg to the name is correct. "
        },
        {
            "id": "comment-15513380",
            "author": "Yonik Seeley",
            "date": "2016-09-22T14:06:23+0000",
            "content": "I don't think changing the name really helps a new user understand what a docid actually is, and the safe ways to use one - that's the much harder part.\nThe fact that it's transient in a sense (but still cacheable for the lifetime of a reader), local to a segment (one has to understand segments and the fact that they are mostly immutable), the fact that you can reuse one on a different view of the same segment (deleted docs), etc.\n\nThis naming discussion would have been appropriate during the initial naming perhaps, but now a rename would inflict guaranteed pain on all existing devs / documentation / books / blogs, ec., all to attempt to safe a few seconds of new user confusion out of the necessary days/weeks of total confusion necessary to build a mental model of how Lucene actually works.  In fact, it may be just as likely to cause confusion if the new user is using any out-of-date resources that use the old terminology.  It sounds like a poor trade-off to rename now. "
        },
        {
            "id": "comment-15544805",
            "author": "ASF subversion and git services",
            "date": "2016-10-04T08:52:02+0000",
            "content": "Commit 32446e9205679fb94b247f0fa2aa97ecd54a49ff in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=32446e9 ]\n\nLUCENE-7453: Create a Lucene70Codec. "
        },
        {
            "id": "comment-15544807",
            "author": "Adrien Grand",
            "date": "2016-10-04T08:53:41+0000",
            "content": "Sorry, I did a typo in the commit message, this commit is related to LUCENE-7463 not LUCENE-7453. "
        }
    ]
}