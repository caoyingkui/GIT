{
    "id": "SOLR-109",
    "title": "variable substitution in lucene query params",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Allowing variable substitution in the lucene query params seems pretty slick \n... a more general solution might be to modify the SolrQueryParser\ndirectly to have a new \"void setParamVariables(SolrParams p)\" method.\nhttp://marc.theaimsgroup.com/?t=116712376400001&r=1&w=2",
    "attachments": {
        "SOLR-109.diff": "https://issues.apache.org/jira/secure/attachment/12350050/SOLR-109.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Thorsten Scherler",
            "id": "comment-12464742",
            "date": "2007-01-15T11:10:26+0000",
            "content": "background: http://marc.theaimsgroup.com/?l=solr-dev&m=116679058126559&w=2 "
        },
        {
            "author": "Thorsten Scherler",
            "id": "comment-12469124",
            "date": "2007-01-31T17:36:34+0000",
            "content": "This is a first start.\n\nWhat still is missing is \"... a more general solution might be to modify the SolrQueryParser\ndirectly to have a new \"void setParamVariables(SolrParams p)\" method.  if\nit's called (with non null input), then any string that SolrQueryParser\ninstance is asked to parse would first be preprocessed looking for the ${}\npattern and pulling the values out of the SOlrParams instance.\"\n\nI need to have a closer look on what Hoss means exactly with this. However I get lots of error after an svn up and I am not sure whether my local changes has caused this. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12471624",
            "date": "2007-02-09T09:01:31+0000",
            "content": "Thorsten: i finally got a chance to look at this, but i'm not seeing how it achieves what you described ... this patch only seems to add a new \"substitution\" block to the init params for request handlers, which are then used as defaults in front of hte invariants and the other defaults \u2013 but there doens't seem to be any actual variable substitution.\n\n(were some files left of of the patch perhaps?)\n\nwhat i was suggesting in that email thread was that SolrQueryParser.parser itself could have a string preprocessing step it calls prior to calling super.parse where anything that looks like a variable (ie: ${foo.bar}) could be repalced by a SolrParam of the same name \u2013 specified using a new SolrQueryParser.setSubstitutionSOlrParams(SOlrParam params).  the request handlers would call that using some SolrParams they got from the init params (no need to put those params in the main bundle of request params) "
        },
        {
            "author": "Thorsten Scherler",
            "id": "comment-12494019",
            "date": "2007-05-07T11:23:30+0000",
            "content": "Hi Hoss, I finally got back to my solr project and to this issue. \n\nHopefully I can contribute more from now on, since the project got funding for a couple of months.\n\nPlease find a complete rewrite of the prior incomplete patch. I tried to stay as close as your instructions as I understood them. The only part that I did not understood is the handlers part. \n\nI did a grep for SolrQueryParser but could not find an example where I can call SolrQueryParser.setParams(SolrParams params) to prepare the substitution (setSubstitutionSolrParam(String queryText){}).\n\nCan somebody push me into the right direction to finish the patch with a nice test?\n\nTIA "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12494163",
            "date": "2007-05-08T00:03:36+0000",
            "content": "> The only part that I did not understood is the\n> handlers part. \n\n> I did a grep for SolrQueryParser but could not find an example where I can call\n> SolrQueryParser.setParams(SolrParams params) to prepare the substitution\n> (setSubstitutionSolrParam(String queryText){}).\n\ni think StandardRequestHandler currently uses a static parseQuery method from QueryParsing ... i've never really been fond of that, it should be replaced with a factory method that returns a SolrQueryParser, then the handler could set whatever options it wants.\n\nthere's definitely an instance of SolrQueryParser in DisMax handler ... used to parse the boost queries and optional alt.q. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13579818",
            "date": "2013-02-16T16:16:28+0000",
            "content": "Cleaning up old JIRAs, re-open if necessary. I think this is a duplicate. "
        }
    ]
}