{
    "id": "SOLR-12767",
    "title": "Deprecate min_rf parameter and always include the achieved rf in the response",
    "details": {
        "type": "Improvement",
        "status": "Open",
        "labels": "",
        "fix_versions": [],
        "components": [],
        "priority": "Major",
        "resolution": "Unresolved",
        "affect_versions": "None"
    },
    "description": "Currently the min_rf parameter does two things.\n1. It tells Solr that the user wants to keep track of the achieved replication factor\n2. (undocumented AFAICT) It prevents Solr from putting replicas in recovery if the achieved replication factor is lower than the min_rf specified\n\n#2 is intentional and I believe the reason behind it is to prevent replicas to go into recovery in cases of short hiccups (since the assumption is that the user is going to retry the request anyway). This is dangerous because if the user doesn\u2019t retry (or retries a number of times but keeps failing) the replicas will be permanently inconsistent. Also, since we now retry updates from leaders to replicas, this behavior has less value, since short temporary blips should be recovered by those retries anyway. \n\nI think we should remove the behavior described in #2, #1 is still valuable, but there isn\u2019t much point of making the parameter an integer, the user is just telling Solr that they want the achieved replication factor, so it could be a boolean, but I\u2019m thinking we probably don\u2019t even want to expose the parameter, and just always keep track of it, and include it in the response. It\u2019s not costly to calculate, so why keep two separate code paths?",
    "attachments": {
        "SOLR-12767.patch": "https://issues.apache.org/jira/secure/attachment/12941301/SOLR-12767.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16612887",
            "content": "\u00a0#1 is still valuable, but there isn\u2019t much point of making the parameter an integer, the user is just telling Solr that they want the achieved replication factor, so it could be a boolean,\nI question this. The scenario is this:\n\n\tSomeone can't re-index from source\n\tThey need to be really, really, really\u00a0sure the doc gets indexed\n\n\n\nSo even being guaranteed that the doc is replicated isn't enough in the unlikely scenario that the leader and the one replica that the doc happened to replicate to die at the same time.\n\nMaybe not enough of a window to allow for, but that's the concern.\n\n\u00a0 ",
            "author": "Erick Erickson",
            "date": "2018-09-13T00:17:09+0000"
        },
        {
            "id": "comment-16612978",
            "content": "I'm sorry, I think I wasn't clear enough. Right now the way this parameter works is: The user provides a min_rf parameter, that's an integer. Solr replies back with the \"achieved\" replication factor and echoes back whatever min_rf was in the request. It doesn't do anything else with the value of min_rf (if you discount the skip-recovery behavior I mentioned in the description of this Jira as #2, that I believe is wrong). So, instead of min_rf being an integer, it could just be a parameter like returnAchievedReplicationFactor=true, and Solr would return the same value as today. But even then, I think we should just always return the achieved replication factor and let the user do as they please with that value. In your question, log and retry later any time the achieved replication factor is < N ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2018-09-13T03:56:40+0000"
        },
        {
            "id": "comment-16613036",
            "content": "Ah, ok. I vaguely remember being in that code at one point and it seemed kind of hacked together so likely could use some cleaning up.... ",
            "author": "Erick Erickson",
            "date": "2018-09-13T05:22:20+0000"
        },
        {
            "id": "comment-16613410",
            "content": "Cool.  I'm reminded of my comment about being confused by min_rf; some aspects of my confusion I see reflected in this issue (i.e. could have been a boolean): https://issues.apache.org/jira/browse/SOLR-5468?focusedCommentId=16080491&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16080491 ",
            "author": "David Smiley",
            "date": "2018-09-13T12:23:17+0000"
        },
        {
            "id": "comment-16628051",
            "content": "The patch attached doesn't add much of a cleanup, changes are minor really. I'll check and see if further improvements can be made without a huge refactor, otherwise that will deserve it's own Jira. One thing I'm not sure I understand is the reason behind getShardReplicationFactor(...), It seems to address the case of CloudSolrClient breaking update batches into multiple requests (per shard), however, that response is being condensed in CloudSolrClient.condenseResponse(...), I'm not sure if this code was there before or if there are edge cases that this code is supposed to handle.\nIn the patch, whenever the \"min_rf\" is explicitly set by the user, I'm including it in the sub requests. This is only to support rolling upgrades and can be removed in the future. If the user is not currently using \"min_rf\", and they do a rolling upgrade, during the time of the upgrade they could receive a MAX_INT as \"achieved RF\", but I think that's fine, since they won't be consuming the value anyway, and it should be for a short period of time. I don't think it's worth to add more code to handle this situation better, but I'm open to suggestions.  ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2018-09-25T23:30:12+0000"
        },
        {
            "id": "comment-16628055",
            "content": "I had a vision for min_rf and it seems to me the current implementation chased that vision without the right implementation. It's current impl never made sense to me event without the broken recovery semantics. +1 to this change. ",
            "author": "Mark Miller",
            "date": "2018-09-25T23:36:32+0000"
        },
        {
            "id": "comment-16628146",
            "content": "I haven't looked at the patch but I like the idea. min_rf doesn't really do anything as far as Solr is concerned other than tracking and returning the value, plus avoiding nodes from getting into LIR - completely relying on users doing the right thing i.e. retrying. +1 to the idea, and I'll take a look at the patch but tomorrow. ",
            "author": "Anshum Gupta",
            "date": "2018-09-26T01:50:37+0000"
        },
        {
            "id": "comment-16629122",
            "content": "Patch looks good. I'd also enter this in CHANGES as a bug because proper eventual consistency is broken when you try to use this. In the past, I have used the same JIRA issue and made an improvement entry that describes the improvement and then a bug entry that describes the bug fix. ",
            "author": "Mark Miller",
            "date": "2018-09-26T16:54:27+0000"
        },
        {
            "id": "comment-16629211",
            "content": "Thanks for the feedback, I'll do that. I'll update the docs and upload a new patch ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "date": "2018-09-26T18:12:02+0000"
        },
        {
            "id": "comment-16632608",
            "content": "Looks good to me.\n\nHere are a few minor (nit-pick?) suggestions:\n\n\tI know you already have an entry in the Bug Fixes and the Improvements section, but I think this would be a good thing to add to the 'upgrading from' section too? Just as this is a user facing param that we want to remove.\n\tIn\u00a0DistributedUpdateProcessor.java\u00a0- Can you add a TODO tag there?\n\n\n\n\n+        // Kept for rolling upgrades only. Should be removed in Solr 9\n ",
            "author": "Anshum Gupta",
            "date": "2018-09-28T22:34:55+0000"
        },
        {
            "id": "comment-16637180",
            "content": "Commit 46f753d7c6df52c06d970a13d3b742310276f2ca in lucene-solr's branch refs/heads/master from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=46f753d ]\n\nSOLR-12767: Always include the achieved rf in the response\n\nThis commit deprecates the min_rf parameter. Solr now always includes the achieved replication\nfactor in the update requests (as if min_rf was always specified). Also, reverts the changes\nintroduced in SOLR-8034, replicas that don't ack an update will have to recover to prevent\ninconsistent shards. ",
            "author": "ASF subversion and git services",
            "date": "2018-10-03T16:46:33+0000"
        },
        {
            "id": "comment-16637182",
            "content": "Commit 1854bb1ff8377390c1117dcfb8a35c6480977c21 in lucene-solr's branch refs/heads/branch_7x from Tomas Fernandez Lobbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1854bb1 ]\n\nSOLR-12767: Always include the achieved rf in the response\n\nThis commit deprecates the min_rf parameter. Solr now always includes the achieved replication\nfactor in the update requests (as if min_rf was always specified). Also, reverts the changes\nintroduced in SOLR-8034, replicas that don't ack an update will have to recover to prevent\ninconsistent shards. ",
            "author": "ASF subversion and git services",
            "date": "2018-10-03T16:47:16+0000"
        }
    ]
}