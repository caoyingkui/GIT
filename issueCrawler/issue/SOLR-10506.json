{
    "id": "SOLR-10506",
    "title": "Possible memory leak upon collection reload",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Server"
        ],
        "type": "Bug",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "6.5",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Upon manual Solr Collection reloading, references to the closed SolrCore are not fully removed by the garbage collector as a strong reference to the ZkIndexSchemaReader is held in a ZooKeeper Watcher that watches for schema changes.\n\nIn our case, this leads to a massive memory leak as managed resources are still referenced by the closed SolrCore. Our Solr cloud environment utilizes rather large managed resources (synonyms, stopwords). To reproduce, we fired out environment up and reloaded the collection 13 times. As a result we fully exhausted our heap. A closer look with the Yourkit profiler revealed 13 SolrCore instances, still holding strong references to the garbage collection root (see screenshot 1).\n\nEach SolrCore instance holds a single path with strong references to the gc root via a `Watcher` in `ZkIndexSchemaReader` (see screenshot 2). The ZkIndexSchemaReader registers a close hook in the SolrCore but the Zookeeper is not removed upon core close.\n\nWe supplied a Github Pull Request (https://github.com/apache/lucene-solr/pull/197) that extracts the zookeeper `Watcher` as a static inner class. To eliminate the memory leak, the schema reader is held inside a `WeakReference` and the reference is explicitly removed on core close.\n\nInitially I wanted to supply a test case but unfortunately did not find a good starting point ...",
    "attachments": {
        "solr_collection_reload_13_cores.png": "https://issues.apache.org/jira/secure/attachment/12863788/solr_collection_reload_13_cores.png",
        "SOLR-10506.patch": "https://issues.apache.org/jira/secure/attachment/12874508/SOLR-10506.patch",
        "solr_gc_path_via_zk_WatchManager.png": "https://issues.apache.org/jira/secure/attachment/12863789/solr_gc_path_via_zk_WatchManager.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-04-18T10:16:35+0000",
            "content": "A single collection gets reloaded 13 times. 13 SolrCore instances remain. ",
            "author": "Torsten B\u00f8gh K\u00f6ster",
            "id": "comment-15972458"
        },
        {
            "date": "2017-04-18T10:17:13+0000",
            "content": "The strong references via schema index reader ",
            "author": "Torsten B\u00f8gh K\u00f6ster",
            "id": "comment-15972459"
        },
        {
            "date": "2017-04-18T10:19:11+0000",
            "content": "GitHub user tboeghk opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/190\n\n    SOLR-10506 Fixes a memory leak in zk schema watching\n\n    Upon manual Solr Collection reloading, references to the closed `SolrCore` are not fully removed by the garbage collector as a strong reference to the `ZkIndexSchemaReader` is held in a ZooKeeper `Watcher` that watches for schema changes.\n\n    In our case, this leads to a massive memory leak as managed resources are still referenced by the closed `SolrCore`. Our Solr cloud environment utilizes rather large managed resources (synonyms, stopwords). To reproduce, we fired out environment up and reloaded the collection 13 times. As a result we fully exhausted our heap. A closer look with the Yourkit profiler revealed 13 `SolrCore` instances, still holding strong references to the garbage collection root.\n\n    Each `SolrCore` instance holds a single path with strong references to the gc root via a `Watcher` in `ZkIndexSchemaReader`. The `ZkIndexSchemaReader` registers a close hook in the `SolrCore` but the Zookeeper is not removed upon core close.\n\n    We supplied this Github Pull Request that extracts the zookeeper `Watcher` as a static inner class. To eliminate the memory leak, the schema reader is held inside a `WeakReference` and the reference is explicitly removed on core close.\n\n    Initially I wanted to supply a test case but unfortunately did not find a good starting point ...\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/shopping24/lucene-solr branch_6_5\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/190.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #190\n\n\ncommit 9a5abee7e9b431ba0c2e0d432dc33b1919fa4f40\nAuthor: Torsten B\u00f8gh Ko\u0308ster <torsten.koester@s24.com>\nDate:   2017-04-18T09:43:52Z\n\n    Fixes a memory leak in zk schema watching\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-15972465"
        },
        {
            "date": "2017-04-26T15:30:07+0000",
            "content": "Hi Torsten, thanks for finding and analysing this issue, and for putting up a fix for it.\n\nI've just tried to send you a pull request with two small suggestions from my jira/solr-10506-branch_6_5 branch but something in the settings didn't allow it. Anyhow, the commit is there at the top of the branch ...\n\n... To eliminate the memory leak, the schema reader is held inside a `WeakReference` and the reference is explicitly removed on core close. ...\n\nAs I read the code and patch, this will allow the ZkIndexSchemaReader (and SolrCore?) to be garbage collected but the Watcher would stay around, right? And ideally we'd also wish for the Watcher to not stay around ...\n\n... Initially I wanted to supply a test case but unfortunately did not find a good starting point ...\n\nHmm, yeah, tricky. Building upon the above \"but the watcher stays around\" observation, perhaps something like this could work:\n\n# start instance without cores\n# determine baseline number of (managed-schema) watchers\n# create a core\n# reload the core a couple of times\n# delete the core\n# determine final number of (managed-schema) watchers\n# test that no 'extra' watchers are still around\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-15985007"
        },
        {
            "date": "2017-05-04T11:26:33+0000",
            "content": "GitHub user tboeghk opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/197\n\n    SOLR-10506 Fixes a memory leak in zk schema watching\n\n    Upon manual Solr Collection reloading, references to the closed SolrCore are not fully removed by the garbage collector as a strong reference to the ZkIndexSchemaReader is held in a ZooKeeper Watcher that watches for schema changes.\n\n    In our case, this leads to a massive memory leak as managed resources are still referenced by the closed SolrCore. Our Solr cloud environment utilizes rather large managed resources (synonyms, stopwords). To reproduce, we fired out environment up and reloaded the collection 13 times. As a result we fully exhausted our heap. A closer look with the Yourkit profiler revealed 13 SolrCore instances, still holding strong references to the garbage collection root.\n\n    Each SolrCore instance holds a single path with strong references to the gc root via a Watcher in ZkIndexSchemaReader. The ZkIndexSchemaReader registers a close hook in the SolrCore but the Zookeeper is not removed upon core close.\n\n    We supplied this Github Pull Request that extracts the zookeeper Watcher as a static inner class. To eliminate the memory leak, the schema reader is held inside a WeakReference and the reference is explicitly removed on core close.\n\n    Initially I wanted to supply a test case but unfortunately did not find a good starting point ...\n\n    N.B.: I did this second PR for the same issue to separate code changes for both SOLR-10506 and SOLR-10550 which I maintained on the same fork branch :-/\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/shopping24/lucene-solr branch_6_5__SOLR-10506\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/197.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #197\n\n\ncommit aa3a96cd88d1724f3ab641f25c5373ff58f4616d\nAuthor: Torsten B\u00f8gh Ko\u0308ster <torsten.koester@s24.com>\nDate:   2017-04-18T09:43:52Z\n\n    Fixes a memory leak in zk schema watching\n\n ",
            "author": "ASF GitHub Bot",
            "id": "comment-15996574"
        },
        {
            "date": "2017-05-04T11:26:59+0000",
            "content": "Github user tboeghk commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/190\n\n    Superseeded by #197  ",
            "author": "ASF GitHub Bot",
            "id": "comment-15996576"
        },
        {
            "date": "2017-05-04T11:27:00+0000",
            "content": "Github user tboeghk closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/190 ",
            "author": "ASF GitHub Bot",
            "id": "comment-15996577"
        },
        {
            "date": "2017-05-04T11:58:10+0000",
            "content": "Hi Christine,\n\nthanks for the suggestions, I cherry picked your commit onto the pull request branch! \n\nIndeed, removing a watcher from the Zookeeper would be the best ans cleanest solution. The problem with garbage collecting a schema watcher is that neither the SolrZkClient nor the underlying SolrZooKeeper / ZooKeeper facilitates any method to enumerate or manipulate registered watchers. Futhermore, any Zookeeper watchers are wrapped before submitted into the Zookeeper code [1]. So I guess that removing a submitted Zookeeper watcher might be pretty hard \n\nRegarding the test: The plan seems legit to me, I'll try my very best. Do you have any hints towards an existing test super class?\n\n[1] https://github.com/apache/lucene-solr/blob/branch_6_5/solr/solrj/src/java/org/apache/solr/common/cloud/SolrZkClient.java#L299 ",
            "author": "Torsten B\u00f8gh K\u00f6ster",
            "id": "comment-15996607"
        },
        {
            "date": "2017-05-04T19:13:12+0000",
            "content": "... removing a submitted Zookeeper watcher might be pretty hard ..\n\nYes, you're right. Somehow I thought it could be done since leader elections after all can be canceled (there's the ElectionWatcher class in LeaderElector.java) but that works differently.\n\nOkay, so if we can't remove a watcher, can we perhaps re-use the one we've got? I've added a commit to my jira/solr-10506-branch_6_5 branch to explore that possibility.\n\n... Do you have any hints towards an existing test super class? ...\n\nTestReload and TestConfigReload look like possibilities. StressRamUsageEstimator.testLargeSetOfByteArrays does a before/after memory measurement. If our test could use a large managed resource (like in your use case) and do a couple of reloads then perhaps a very measureable difference could be detected without the fix and a less measureable (but still non-zero) difference could be detected with the fix, something along those lines? ",
            "author": "Christine Poerschke",
            "id": "comment-15997269"
        },
        {
            "date": "2017-05-09T11:40:15+0000",
            "content": "I'd suggest to simply implement the command method in ZkIndexSchmeaReader like this, so that it reuses the already existing SchemaWatcher:\nupdateSchema(schemaWatcher, -1);\n\nSee my changes here:\nhttps://github.com/joergrathlev/lucene-solr/tree/branch_6_5__SOLR-10506\n\nI've also added a basic test for the SchemaWatcher class. ",
            "author": "J\u00f6rg Rathlev",
            "id": "comment-16002538"
        },
        {
            "date": "2017-05-10T10:29:37+0000",
            "content": "... implement the command method in ZkIndexSchmeaReader ...\n\nInteresting idea to re-use the watcher like that. That would cover the session expiry but not the core reload, correct?\n\nAs a next step, could I suggest combining what we've got so far into a working branch/pull request based off master(*), jira/solr-10506 would be conventional name for the branch. What we've got so far is spread across multiple commits and multiple branches, an overall working branch/pull request should make it easier to 'see' the overall change:\n\n\thttps://github.com/apache/lucene-solr/pull/197 (into apache:branch_6_5 from shopping24:branch_6_5__SOLR-10506 )\n\thttps://github.com/cpoerschke/lucene-solr/tree/jira/solr-10506-branch_6_5\n\thttps://github.com/joergrathlev/lucene-solr/tree/branch_6_5__SOLR-10506\n\n\n\n(*) Development workflow would be for the changes to be made to master first, followed by any backporting to non-master branch. ",
            "author": "Christine Poerschke",
            "id": "comment-16004451"
        },
        {
            "date": "2017-05-10T10:32:34+0000",
            "content": "Since it's a weak reference, couldn't the schema reader be collected now without getting explicitly removed? That leads to a bad situation where a still-open SolrCore stops getting updates. ",
            "author": "Mike Drob",
            "id": "comment-16004456"
        },
        {
            "date": "2017-05-10T11:27:09+0000",
            "content": "Interesting idea to re-use the watcher like that. That would cover the session expiry but not the core reload, correct?\nYes, correct.\n\nSince it's a weak reference, couldn't the schema reader be collected now without getting explicitly removed? That leads to a bad situation where a still-open SolrCore stops getting updates.\nWell, the stopWatching method is only called when a core is closed. Maybe it should be called in postClose to be safe? I'm not familiar enough with the internals of a SolrCore lifecycle to judge this. ",
            "author": "J\u00f6rg Rathlev",
            "id": "comment-16004503"
        },
        {
            "date": "2017-05-10T11:45:09+0000",
            "content": "Based off upstream/master: https://github.com/joergrathlev/lucene-solr/tree/jira/solr-10506 ",
            "author": "J\u00f6rg Rathlev",
            "id": "comment-16004527"
        },
        {
            "date": "2017-05-10T12:01:48+0000",
            "content": "Thanks Joerg & Christine for digging into this! \n\nI would love to see a patch in the official release as this is causing us a lot of pain (as does SOLR-10550  ",
            "author": "Torsten B\u00f8gh K\u00f6ster",
            "id": "comment-16004552"
        },
        {
            "date": "2017-05-10T14:59:53+0000",
            "content": "Well, the stopWatching method is only called when a core is closed. Maybe it should be called in postClose to be safe? I'm not familiar enough with the internals of a SolrCore lifecycle to judge this.\nThe implementation details of it being a weak reference mean that it can return null without stopWatching/clear ever being called. If the GC decides that it needs memory then your schema reader will suddenly be gone. So an open core using lots of memory will eventually lose the reference before it should. ",
            "author": "Mike Drob",
            "id": "comment-16004822"
        },
        {
            "date": "2017-05-10T15:25:51+0000",
            "content": "Oh, right, good point! So, the SchemaWatcher needs to keep a strong reference to the ZkIndexSchemaReader but then that should be cleaned up in the SolrCore's onClose hook. I'll try to run another test with a memory profiler in the next couple of days to see if that solves the issue. ",
            "author": "J\u00f6rg Rathlev",
            "id": "comment-16004852"
        },
        {
            "date": "2017-05-18T09:27:05+0000",
            "content": "I've updated my branch so that the reference in the SchemaWatcher is a strong reference, and is discarded after the SolrCore is closed (postClose). Based on testing this with a memory profiler, no strong references to the cores are retained after closing the cores, so this fixes the memory leak.\nhttps://github.com/joergrathlev/lucene-solr/tree/jira/solr-10506\n\nWhat's the next step now? Should I open another Github pull request to merge my branch into upstream's master branch? ",
            "author": "J\u00f6rg Rathlev",
            "id": "comment-16015480"
        },
        {
            "date": "2017-05-19T17:57:59+0000",
            "content": "... Based on testing this with a memory profiler, no strong references to the cores are retained after closing the cores ...\n\nNice. Just wondering if SchemaWatcher objects are also not retained or if they stick around? I had explored SchemaWatcher re-use in code only so far i.e. without any profiling. ",
            "author": "Christine Poerschke",
            "id": "comment-16017757"
        },
        {
            "date": "2017-05-19T18:27:46+0000",
            "content": "+1 LGTM. Christine Poerschke, I'll let you commit this when you are done exploring the reuse - I think it might be reasonable to have as a separate issue to get this code fixed now, but it's your call. ",
            "author": "Mike Drob",
            "id": "comment-16017804"
        },
        {
            "date": "2017-05-22T08:00:37+0000",
            "content": "Nice. Just wondering if SchemaWatcher objects are also not retained or if they stick around?\n\nThey stick around until the Zookeeper connector releases the reference to the watcher. I had looked at your exploration, but I wasn't sure if reassigning the existing watcher to a new reader/core works because it would mean that the previous core will no longer be notified on schema updates, but it might still be open for a while. I think that reusing the watchers requires a bigger restructuring of the code, so that one reusable watcher can notify multiple schema readers.\n\nMy preference would be to open a separate issue for that, because I think the watchers by themselves are lightweight objects, while this issue is currently causing actual production outages for us (or it would if we didn't use a locally patched version). ",
            "author": "J\u00f6rg Rathlev",
            "id": "comment-16019247"
        },
        {
            "date": "2017-06-02T18:45:27+0000",
            "content": "... to have as a separate issue ...\n... preference would be to open a separate issue for that ...\n\nSounds good.\n\nI just returned to this, and maybe Friday evening timing was a mistake and it will all be clearer next week ... am struggling to convince myself that the proposed removal of the watcher re-creation in ZkIndexSchemaReader.command() is appropriate. The existing comment on the method says\n\n  /**\n   * Called after a ZooKeeper session expiration occurs; need to re-create the watcher and update the current\n   * schema from ZooKeeper.\n   */\n\n\nand ZkController.addOnReconnectListener(OnReconnect listener) method has a comment\n\n  /**\n   * Add a listener to be notified once there is a new session created after a ZooKeeper session expiration occurs;\n   * in most cases, listeners will be components that have watchers that need to be re-created.\n   */\n\n\nand intuitively \"we got disconnected and so need to recreate our watchers since/if the watchers we had previously were for the connection that got disconnected\" seems plausible but then equally so \"we registered watches with the zkclient and wouldn't it be nice for zkclient to take care of watcher lifecycle across disconnects?\" is not implausible. Need to go checkout ZK docs and stuff, not today. ",
            "author": "Christine Poerschke",
            "id": "comment-16035222"
        },
        {
            "date": "2017-06-26T14:15:35+0000",
            "content": "Attaching final(?) patch: merged latest master into https://github.com/joergrathlev/lucene-solr/tree/jira/solr-10506 and changed ZkIndexSchemaReader.command() back to re-create the watcher.\n\nIf there are no further comments or concerns then I will go ahead and commit the change some time tomorrow (Tuesday) London time. ",
            "author": "Christine Poerschke",
            "id": "comment-16063149"
        },
        {
            "date": "2017-06-26T14:32:15+0000",
            "content": "Github user uschindler commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/197\n\n    Should we not have a non-empty message when logging the InterruptedException? ",
            "author": "ASF GitHub Bot",
            "id": "comment-16063170"
        },
        {
            "date": "2017-06-26T14:44:37+0000",
            "content": "Github user tboeghk commented on the issue:\n\n    https://github.com/apache/lucene-solr/pull/197\n\n    +1 \n\n    ... but I wanted to focus the PR above on the fix (the empty message is copied code). Also this PR is outdated as the current patch is atached here: https://issues.apache.org/jira/browse/SOLR-10506 ",
            "author": "ASF GitHub Bot",
            "id": "comment-16063188"
        },
        {
            "date": "2017-06-26T14:55:08+0000",
            "content": "+1 to having a non-empty message in general, SOLR-10958 created. ",
            "author": "Christine Poerschke",
            "id": "comment-16063199"
        },
        {
            "date": "2017-06-27T14:08:18+0000",
            "content": "Commit 701c73d45a0188d006316e9a3168ad6b70e0fac9 in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=701c73d ]\n\nSOLR-10506: Fix memory leak (upon collection reload or ZooKeeper session expiry) in ZkIndexSchemaReader.\n(Torsten B\u00f8gh K\u00f6ster, Christine Poerschke, J\u00f6rg Rathlev, Mike Drob) ",
            "author": "ASF subversion and git services",
            "id": "comment-16064888"
        },
        {
            "date": "2017-06-28T16:35:51+0000",
            "content": "Thanks everyone! ",
            "author": "Christine Poerschke",
            "id": "comment-16066825"
        }
    ]
}