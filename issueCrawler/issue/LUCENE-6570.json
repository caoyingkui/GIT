{
    "id": "LUCENE-6570",
    "title": "Make BooleanQuery immutable",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Minor",
        "status": "Closed",
        "type": "Task"
    },
    "description": "In the same spirit as LUCENE-6531 for the PhraseQuery, we should make BooleanQuery immutable.\n\nThe plan is the following:\n\n\tcreate BooleanQuery.Builder with the same setters as BooleanQuery today (except setBoost) and a build() method that returns a BooleanQuery\n\tremove setters from BooleanQuery (except setBoost)\n\n\n\nI would also like to add some static utility methods for common use-cases of this query, for instance:\n\n\tstatic BooleanQuery disjunction(Query... queries) to create a disjunction\n\tstatic BooleanQuery conjunction(Query... queries) to create a conjunction\n\tstatic BooleanQuery filtered(Query query, Query... filters) to create a filtered query\n\n\n\nHopefully this will help keep tests not too verbose, and the latter will also help with the FilteredQuery derecation/removal.",
    "attachments": {
        "LUCENE-6570.patch": "https://issues.apache.org/jira/secure/attachment/12740140/LUCENE-6570.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14587868",
            "author": "Robert Muir",
            "date": "2015-06-16T11:00:20+0000",
            "content": "\n    static BooleanQuery disjunction(Query... queries) to create a disjunction\n    static BooleanQuery conjunction(Query... queries) to create a conjunction\n    static BooleanQuery filtered(Query query, Query... filters) to create a filtered query\n\nCan this be deferred to another issue? I'm really not a fan of such static methods. They are unnatural, almost always named badly, and ultimately result in making code just harder to read.\n\nless lines of code != easier to read. "
        },
        {
            "id": "comment-14587926",
            "author": "Adrien Grand",
            "date": "2015-06-16T11:56:42+0000",
            "content": "I can defer, the reason I was trying to avoid it is that it will make the migration slightly harder.\n\nless lines of code != easier to read.\n\nIt's different but not completely unrelated. Also my main point was about making BooleanQuery easier to use for common use-cases. "
        },
        {
            "id": "comment-14589969",
            "author": "Adrien Grand",
            "date": "2015-06-17T16:04:38+0000",
            "content": "Here is a patch. The main changes went to multi-term queries, DrillDownQuery and BoostingQuery:\n\n\tMulti-term queries can't use BooleanQuery as a builder anymore since it's immutable so I had to change the API to allow to use something that is not a query as a builder.\n\tDrillDownQuery was also using BooleanQuery as a buffer so I had to refactor it to use a List instead and only build the BooleanQuery when necessary.\n\tBoostingQuery couldn't extend BooleanQuery anymore, so now it has its own Weight/Scorer implementation.\n\n\n\nHere is what the TermCollectingRewrite API looks like now:\n\nabstract class TermCollectingRewrite<B> extends MultiTermQuery.RewriteMethod {\n\n  /** Return a suitable builder for the top-level Query for holding all expanded terms. */\n  protected abstract B getTopLevelBuilder() throws IOException;\n\n  /** Finalize the creation of the query from the builder. */\n  protected abstract Query build(B builder);\n}\n\n "
        },
        {
            "id": "comment-14590115",
            "author": "Uwe Schindler",
            "date": "2015-06-17T17:12:11+0000",
            "content": "MTQ changes look OK, +1 "
        },
        {
            "id": "comment-14591371",
            "author": "Cao Manh Dat",
            "date": "2015-06-18T07:06:49+0000",
            "content": "Wow, It is a lot of work Adrien Grand. I notice that you change the constructors of BooleanQuery to private so can we do same thing with PhraseQuery in LUCENE-6575? We can remove a lot of code there  "
        },
        {
            "id": "comment-14591381",
            "author": "ASF subversion and git services",
            "date": "2015-06-18T07:14:08+0000",
            "content": "Commit 1686145 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1686145 ]\n\nLUCENE-6570: Make BooleanQuery immutable. "
        },
        {
            "id": "comment-14591492",
            "author": "ASF subversion and git services",
            "date": "2015-06-18T08:45:00+0000",
            "content": "Commit 1686150 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1686150 ]\n\nLUCENE-6570: Make BooleanQuery.Builder.add(Query,Occur) return this, like other methods. "
        },
        {
            "id": "comment-14592660",
            "author": "Hoss Man",
            "date": "2015-06-18T22:41:05+0000",
            "content": "I'm confused about the status of this issue.\n\nit's currently marked \"Resolved\" in 6.0, and trunk has the new API with all of the formerly public constructors for BooleanQuery completely deleted \u2013 but i don't see any commits/patches/mentions to backporting the builder & marking these constructors deprecated in the 5x branch.  (let alone any mention in MIGRATE.txt)\n\n\n\nI'm also not sure how i feel about the defensive cloning of (sub) queries here.\n\nIt's a significant enough difference from how constructing BooleanQueries\nworked in the past that at an absolute minimum the javadocs for the builder should be crystal clear that a clone is happening under the covers \u2013 but it also means that users who have existing code like this...\n\n\npublic final static REUSED_FILTER = buildReallyMassiveQueryForReuse();\n...\nloop {\n  BooleanQuery bq = new BooleanQuery();\n  bq.add(REUSED_FILTER, MUST);\n  bq.add(buildQueryFromInput, MUST);\n  ...\n  doSomeSearch(bq);\n}\n\n\n\n...are now going to be seeing REUSED_FILTER get cloned for every query.  Again, at a minimum, this needs to be heavily spelled out in the MIGRATE and other docs, but personally i think it's going to far and we shouldn't be making these defensive clones. "
        },
        {
            "id": "comment-14592706",
            "author": "Adrien Grand",
            "date": "2015-06-18T23:16:00+0000",
            "content": "Agreed that MIGRATE.txt needs more information about the API changes to PhraseQuery and BooleanQuery, I'll work on it.\n\nAre you suggesting that this new builder should be backported to 5.x and that the setters on BooleanQuery should be marked as deprecated? I did not consider this option because it would make BooleanQuery have the API of an immutable query while nothing would guarantee that it cannot be modified since we would need to keep the old deprecated setters. So I just made it a breaking change for 6.0.\n\nI am willing to document the fact that we clone sub queries, but I am on the fence about removing it, since without defensively cloning, the BooleanQuery would still be mutable while this issue is about making sure it cannot change. For instance, consider the following sequence of operations:\n\n\nTermQuery tq1 = new TermQuery(new Term(\"field\", \"value\"));\nBooleanQuery bq1 = new BooleanQuery.Builder()\n    .add(tq1, Occur.MUST)\n    .build();\n\nTermQuery tq2 = new TermQuery(new Term(\"field\", \"value\"));\nBooleanQuery bq2 = new BooleanQuery.Builder()\n    .add(tq2, Occur.MUST)\n    .build();\n\nassertEquals(bq1, bq2); // passes\ntq1.setBoost(2f);\nassertEquals(bq1, bq2); // fails if we did not clone because the boost of the sub query changed\n\n\n\nOne motivation behind this change is to be able to enable the query cache by default in IndexSearcher (currently off), which we can only do if queries can reliably be used as cache keys.\n\nThe cloning of the sub queries is also important for LUCENE-6305. It fixes BooleanQuery to ignore clause order by putting queries into a multiset, but if boosts of sub queries can change after the boolean query has been built then again the fix would not be applicable. "
        },
        {
            "id": "comment-14592755",
            "author": "Hoss Man",
            "date": "2015-06-19T00:01:31+0000",
            "content": "Are you suggesting that this new builder should be backported to 5.x and that the setters on BooleanQuery should be marked as deprecated?\n\nyes.\n\nI did not consider this option because it would make BooleanQuery have the API of an immutable query while nothing would guarantee that it cannot be modified since we would need to keep the old deprecated setters. So I just made it a breaking change for 6.0.\n\nI think it would be good to get the API out there for 5.x users, so they can start using it.  Even if the underlying BooleanQuery objects themselves are not immutable, encouraging people to use the Builder pattern to create them, and discouraging them from expecting to be able to mutate the BooleanQuery objects seems like a good idea to get out there as early as possible.\n\nI am willing to document the fact that we clone sub queries, but I am on the fence about removing it, since without defensively cloning, the BooleanQuery would still be mutable while this issue is about making sure it cannot change.\n\nThere's a difference between saying the BooleanQuery is immutable and cannot change and saying the queries wrapped by the BooleanQuery are cloned & no longer accessible and cannot cahnge \u2013 that's something that wasn't clear from your issue description until I looked closer at your commit.\n\nBy comparison, \"Collections.singletonList(T o)\" is documented to return an immutable list, but it doesn't clone 'o' \u2013 it doesn't try to prevent you from calling o.changeState() after you construct that list.\n\nFor instance, consider the following sequence of operations: ...\n\nThe change in run time behavior of code like that is exactly why this change scares me \u2013 it's very similar to what users may have come to expect from code like my example if they want to do something like call REUSED_FILTER.setBost(foo) to dynamically tweak relevancy of many queries (all at once) at runtime.\n\nOne motivation behind this change is to be able to enable the query cache by default in IndexSearcher (currently off), which we can only do if queries can reliably be used as cache keys.\n\nI can appreciate that goal, but i don't think it's ever going to be feasible to turn that on by default in the truly generic case of any arbitrary lucene application, where people might have custom Query impls.\n\nBottom line: i think there is a decent risk that this under the covers, no way to turn off, cloning of sub-queries will have some serious negative consequences for some use cases, but will really only help if you use a query cache and if you get a high hit rate on that cache and if your code is written weirdly/broken to call setBoost on queries after you use them \u2013 which doesn't make sense to do at all if you are using a query cache.\n\nConsider again that REUSED_FILTER example i mentioned in my last comment \u2013 assuming the application is \"well behaved\", and doesn't call setBoost at add times: even w/o the implicit clone in BooleanQuery it should work great with a query cache enabled, and would use a lot less ram then with the implicit sub-query cloning in the BooleanQuery.Builder.\n\nBut if an application does start trying to keep refrences to previously constructed Query instances, and call mutating methods (like setBoost) at runtime, then really they aren't going to be able to safely use the query cache at all \u2013 regardless of whether you have this implicit clone in BooleanQuery's builder.\n "
        },
        {
            "id": "comment-14592782",
            "author": "Yonik Seeley",
            "date": "2015-06-19T00:21:49+0000",
            "content": "but personally i think it's going to far and we shouldn't be making these defensive clones.\n\n+1\nThanks for highlighting that - I hadn't realized it.  I agree with the rest of your reasoning as well (I actually just deleted a lot of this post since it was redundant with what you said in your followup which I just saw) "
        },
        {
            "id": "comment-14593199",
            "author": "Adrien Grand",
            "date": "2015-06-19T08:43:24+0000",
            "content": "I can appreciate that goal, but i don't think it's ever going to be feasible to turn that on by default in the truly generic case of any arbitrary lucene application, where people might have custom Query impls.\n\nWhat makes custom query impls different?\n\nConsider again that REUSED_FILTER example i mentioned in my last comment \u2013 assuming the application is \"well behaved\", and doesn't call setBoost at add times: even w/o the implicit clone in BooleanQuery it should work great with a query cache enabled, and would use a lot less ram then with the implicit sub-query cloning in the BooleanQuery.Builder.\n\nI don't think \"would use a lot less ram\" is accurate: clone() is shallow so the main data-structures would still be shared with the clone. For instance if you consider TermsQuery which is in my experience the bad guy that can sometimes make keys (queries) use more memory than the values (doc id sets), clone() does not clone \"termData\", so between storing a single TermsQuery and storing a TermsQuery and its clone, there are only 24 bytes of RAM of difference (I just tested). Since the query cache typically needs to only cache few queries to be efficient, this would mean the difference would only be about a few kb.\n\nBut if an application does start trying to keep refrences to previously constructed Query instances, and call mutating methods (like setBoost) at runtime, then really they aren't going to be able to safely use the query cache at all \u2013 regardless of whether you have this implicit clone in BooleanQuery's builder.\n\nA longer-term plan, once all our queries are fixed, is to upgrade clone()'s documentation to say that it has to return an independant instance. So there are two options: either deep cloning or shallow cloning and be immutable. By the way, this is where this issue arises from: we wanted to avoid having to deep-clone queries to use them as cache keys (see LUCENE-6369). "
        },
        {
            "id": "comment-14593413",
            "author": "ASF subversion and git services",
            "date": "2015-06-19T13:20:49+0000",
            "content": "Commit 1686408 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1686408 ]\n\nLUCENE-6570: Remove controversial defensive cloning of queries when adding them to a BooleanQuery. "
        },
        {
            "id": "comment-14593431",
            "author": "Adrien Grand",
            "date": "2015-06-19T13:50:59+0000",
            "content": "I removed the controversial query cloning. Reopening to think about how we should handle the boost factor then. Options include cloning as part of createWeight since the query we are really interested in is the one returned by Weight.getQuery(), removing \"void setBoost(boost)\" in favour of something like \"Query withBoost(boost)\" or even remove the boost parameter from our queries and handle it externally. "
        },
        {
            "id": "comment-14593486",
            "author": "Yonik Seeley",
            "date": "2015-06-19T15:01:34+0000",
            "content": "Maybe we could satisfy people who want different things by having BooleanQuery be an abstract class.\nThings like defensive clones could be part of the default builder, but expert users could avoid the overhead of extra data structures introduced in LUCENE-6305 for example.  It would give a way for well-behaved code that generates predictable queries to get maximum performance and minimum memory usage. "
        },
        {
            "id": "comment-14593558",
            "author": "ASF subversion and git services",
            "date": "2015-06-19T15:57:24+0000",
            "content": "Commit 1686440 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1686440 ]\n\nLUCENE-6570: Add a MIGRATE entry. "
        },
        {
            "id": "comment-14593576",
            "author": "Adrien Grand",
            "date": "2015-06-19T16:13:12+0000",
            "content": "I opened LUCENE-6590 as a follow-up for the boosting issue.\n\nI am re-closing now: I know I did not backport to 5.x but the API does not feel stable to me yet so I would like to avoid going back-and-forth between different ideas in 5.x releases. I suggest that we reconsider backporting the new API once we are more happy with itI... "
        },
        {
            "id": "comment-14645592",
            "author": "ASF subversion and git services",
            "date": "2015-07-29T07:07:32+0000",
            "content": "Commit 1693189 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1693189 ]\n\nLUCENE-6570: Move changes entry as the change was backported to 5.3. "
        },
        {
            "id": "comment-14645596",
            "author": "ASF subversion and git services",
            "date": "2015-07-29T07:09:41+0000",
            "content": "Commit 1693190 from Adrien Grand in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1693190 ]\n\nLUCENE-6570: Make BooleanQuery immutable. "
        },
        {
            "id": "comment-14712704",
            "author": "Greg Huber",
            "date": "2015-08-26T08:35:54+0000",
            "content": "Hello,\n\nI am extending AnalyzingInfixSuggester for use with my suggester where I change the query to be a AND rather than an OR in the finishQuery(..) method.\n\nie\n\n/**\n\n\tSubclass can override this to tweak the Query before searching.\n     */\n    protected Query finishQuery(Builder in, boolean allTermsRequired) {\n\n\n\n        // Update contexts to be ANDs (MUST) rather than ORs (SHOULD)\n        for (BooleanClause booleanClause : in.build().clauses()) {\n            // Change the contexts to be MUST (will be the only BooleanQuery and others will be TermQuery)\n            if (booleanClause.getQuery() instanceof BooleanQuery) {\n                BooleanQuery bq = (BooleanQuery) booleanClause.getQuery();\n                for (BooleanClause bc : bq) \n{\n                    bc.setOccur(BooleanClause.Occur.MUST);\n                }\n                // We are done\n                break;\n            }\n        }\n\n        return in.build();\n    }\n\nIt says that BooleanClause.setOccur(..) is depreciated and will be immutable in 6.0, how would I then be able to do this?\n\nCheers Greg "
        },
        {
            "id": "comment-14712881",
            "author": "Uwe Schindler",
            "date": "2015-08-26T10:13:18+0000",
            "content": "The boolean clauses have to be created with MUST from the beginning. "
        },
        {
            "id": "comment-14712935",
            "author": "Greg Huber",
            "date": "2015-08-26T10:59:44+0000",
            "content": "btw, I have multiple contexts so call\n\nAnalyzingInfixSuggester.suggester.lookup(term, contexts, nMax, true, true);\n\nwhich will then call  AnalyzingInfixSuggester.toQuery(..) eventually, which adds the context with the BooleanClause.Occur.SHOULD.  Its a private method so is there a way to override this?\n\nprivate BooleanQuery toQuery(Set<BytesRef> contextInfo) {\n    if (contextInfo == null || contextInfo.isEmpty()) \n{\n      return null;\n    }\n\n    BooleanQuery.Builder contextFilter = new BooleanQuery.Builder();\n    for (BytesRef context : contextInfo) \n{\n      addContextToQuery(contextFilter, context, BooleanClause.Occur.SHOULD);\n    }\n    return contextFilter.build();\n  } "
        },
        {
            "id": "comment-14712947",
            "author": "Adrien Grand",
            "date": "2015-08-26T11:14:18+0000",
            "content": "Maybe you can override `addContextToQuery` to override the clause? "
        },
        {
            "id": "comment-14712958",
            "author": "Greg Huber",
            "date": "2015-08-26T11:24:26+0000",
            "content": "I guess it will work as its public, not much else I can do! \n\nCheers Greg.  "
        },
        {
            "id": "comment-14713176",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:05:59+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}