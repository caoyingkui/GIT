{
    "id": "LUCENE-1626",
    "title": "getPositionIncrementGap(String fieldname, int currentPos)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "2.4",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "This issue is to cover the changes required to do a search across multiple fields with the same name in a fashion similar to a many-to-one database. Below is my post on java-dev on the topic, which details the changes we need:\n\n(sniped to only second idea ... see LUCENE-1494 for background and first idea)\n\n2) It gets slightly more complicated in the case of variable-length terms. For example, imagine if we had an 'address' field ('123 Smith St') which will result in (1 to n) tokens; slop 0 in a SpanNearQuery won't work here, of course. One thing we've toyed with is the idea of using getPositionIncrementGap \u2013 if we knew that 'address' would be, at most, 20 tokens, we might use a position increment gap of 100, and make the slop factor 50; this works fine for the simple case (yay!), but with a great many addresses-per-user starts to get more complicated, as the gap counts from the last term (so the position sequence for a single value field might be 0, 100, 200, but for the address field it might be 0, 1, 2, 3, 103, 104, 105, 106, 206, 207... so it's going to get out of sync). The simplest option here seems to be changing (or supplementing)\n   public int getPositionIncrementGap(String fieldname)\nto\n   public int getPositionIncrementGap(String fieldname, int currentPos)\nso that we can override that to round up to the nearest 100 (or whatever) based on currentPos. The default implementation could just delegate to getPositionIncrementGap().",
    "attachments": {
        "LUCENE-1626-positionincrement.patch": "https://issues.apache.org/jira/secure/attachment/12407031/LUCENE-1626-positionincrement.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-05-01T19:03:52+0000",
            "content": "trimming summary for this clone. ",
            "author": "Hoss Man",
            "id": "comment-12705091"
        },
        {
            "date": "2009-05-01T19:07:16+0000",
            "content": "the same patch Paul Cowan attached to LUCENE-1626 addressing this idea (prior to me cloning the issue) ",
            "author": "Hoss Man",
            "id": "comment-12705093"
        },
        {
            "date": "2013-03-16T19:16:20+0000",
            "content": "SPRING_CLEANING_2013. We can reopen if there's interest. ",
            "author": "Erick Erickson",
            "id": "comment-13604387"
        }
    ]
}