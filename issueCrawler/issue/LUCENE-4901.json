{
    "id": "LUCENE-4901",
    "title": "TestIndexWriterOnJRECrash should work on any JRE vendor via Runtime.halt()",
    "details": {
        "components": [
            "general/test"
        ],
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I successfully compiled Lucene 4.2 with IBM.\nThen ran unit tests with the nightly option set to \"true\"\n\nThe test case TestIndexWriterOnJRECrash was skipped returning \"IBM Corporation JRE not supported\":\n\n[junit4:junit4] Suite: org.apache.lucene.index.TestIndexWriterOnJRECrash\n[junit4:junit4] IGNOR/A 0.28s | TestIndexWriterOnJRECrash.testNRTThreads\n[junit4:junit4]    > Assumption #1: IBM Corporation JRE not supported.\n[junit4:junit4] Completed in 0.68s, 1 test, 1 skipped",
    "attachments": {
        "test-IBM-java-vendor.patch": "https://issues.apache.org/jira/secure/attachment/12576822/test-IBM-java-vendor.patch",
        "LUCENE-4901.patch": "https://issues.apache.org/jira/secure/attachment/12582862/LUCENE-4901.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-04-03T18:07:03+0000",
            "content": "Test if IBM JRE is being used.\nAvoid TestIndexWriterOnJRECrash be skipped ",
            "author": "Rodrigo Trujillo",
            "id": "comment-13621126"
        },
        {
            "date": "2013-04-03T18:07:04+0000",
            "content": "I think I can actually handle this one \u2013 I have JRE crash code for all major vendors (never thought I'd say that...). Let me see. ",
            "author": "Dawid Weiss",
            "id": "comment-13621127"
        },
        {
            "date": "2013-04-03T18:10:58+0000",
            "content": "Hi Dawid,\njust attached a patch.\n\nIt worked fine in my tests.\n\nI wonder whether it could be applied to trunk too ",
            "author": "Rodrigo Trujillo",
            "id": "comment-13621131"
        },
        {
            "date": "2013-04-03T18:11:39+0000",
            "content": "I remember the current crash code worked for IBM, but there was some reason we disabled it.\n\nI am having trouble remembering the reason why: I think it was something crazy, like IBM being pretty verbose when it crashes and filling up your home directory with huge logs? I'm not sure about that though... ",
            "author": "Robert Muir",
            "id": "comment-13621132"
        },
        {
            "date": "2013-04-03T18:16:02+0000",
            "content": "IBM definitely dumps a lot of stuff when it crashes. But isn't build/ cwd cleaned up on each build? I run such tests for randomizedtesting so if needed I can crash anything (J9, jrockit, hotspot). The way I do it is I link to a small snippet of native code (there are binaries for all platforms) which dereferences a null pointer. This core-dumps the JVM sort of by-design. ",
            "author": "Dawid Weiss",
            "id": "comment-13621136"
        },
        {
            "date": "2013-04-03T18:16:32+0000",
            "content": "According to SVN logs, when i disabled this it was because:\n\n\nLog:\ncan't reliably crash recent IBM J9 jvms this way\n\n\n\nAnd i did this because occasionally, instead of crashing, it would cause the jvm to hang instead.\n\nso we need a better crash code for this JVM  ",
            "author": "Robert Muir",
            "id": "comment-13621138"
        },
        {
            "date": "2013-04-03T18:21:39+0000",
            "content": "This remembers me to upgrade IBM J9 on Policeman Jenkins and try Jenkins tests again. Currently the Lucene tests does not successfully pass with IBM J9 for every random seed, because IBM J9 has too many bugs (miscompiled bytecode/loops/...). ",
            "author": "Uwe Schindler",
            "id": "comment-13621141"
        },
        {
            "date": "2013-04-03T18:22:21+0000",
            "content": "It crashed for me on every build, always, on everything I've tried. Perhaps if it traps and there are some native threads elsewhere it can hang, don't know.  ",
            "author": "Dawid Weiss",
            "id": "comment-13621142"
        },
        {
            "date": "2013-04-03T18:23:56+0000",
            "content": "Wait... I'm not saying to dereference an NPE via Unsafe \u2013 this, indeed, doesn't always work. I'm talking about using a snippet of native code to do it (and this is bulletproof). ",
            "author": "Dawid Weiss",
            "id": "comment-13621145"
        },
        {
            "date": "2013-04-03T18:27:32+0000",
            "content": "Right, but i'm not sure its worth it to bring in native code just for this test (its cheating, and would complicate a lot of things in the build for this one guy).\n\ni'm also unhappy with the test currently, because it doesn't even detect the bugs it was written to find (like LUCENE-4738). ",
            "author": "Robert Muir",
            "id": "comment-13621147"
        },
        {
            "date": "2013-04-03T18:29:19+0000",
            "content": "Maybe the 'alternative' crash should be just that... grab its own PID and fork off a process to kill -9 itself? ",
            "author": "Robert Muir",
            "id": "comment-13621149"
        },
        {
            "date": "2013-04-03T18:31:38+0000",
            "content": "The native bits are tiny and could be unpacked dynamically. But you're right \u2013 it's a pain. I don't know if there's a kill -9 equivalent on Windows, otherwise you're right \u2013 it'd be a nice solution. \n\n(Just remember it's impossible to get the PID of a forked process from Java below Java 8 \u2013 you need to use the workarounds we use, pass the ID from the child back to the parent etc. Uglier than native bits I think). ",
            "author": "Dawid Weiss",
            "id": "comment-13621151"
        },
        {
            "date": "2013-04-03T19:54:19+0000",
            "content": "I am not sure: Instead of crashing, maybe using Runtime.halt() from a parallel thread after some timeout? Runtime.halt() kills the JVM like kill -9 and does not run any shutdown hooks or let GC finish its work? Open files are closed in any case, because the kernel does this when the process exits (also on Unsafe's SIGSEGV). ",
            "author": "Uwe Schindler",
            "id": "comment-13621262"
        },
        {
            "date": "2013-04-03T20:03:45+0000",
            "content": "If we change the test to do this, we need to give it a backdoor for the security manager i think. ",
            "author": "Robert Muir",
            "id": "comment-13621276"
        },
        {
            "date": "2013-04-03T20:16:06+0000",
            "content": "This is a child JVM of the test, it has no security manager (at least it needs none)? ",
            "author": "Uwe Schindler",
            "id": "comment-13621288"
        },
        {
            "date": "2013-04-04T06:46:06+0000",
            "content": "Yep, system.halt will work here too. I just like it when it really breaks without the possibility to clean up properly  You get to see what each jvm dumps etc.\n\nBut seriously, a halt from a background thread should indeed do fine and is portable. I did encounter very rare cases of halt() not exiting under very low memory conditions but I don't think this is the case here.\n ",
            "author": "Dawid Weiss",
            "id": "comment-13621862"
        },
        {
            "date": "2013-05-12T19:59:45+0000",
            "content": "I've removed the vendor-check assumption entirely and call Runtime.halt() instead of messing with Unsafe/ zero pointer dereference.\n\nTake a look, if there are no objections I'll commit it in. ",
            "author": "Dawid Weiss",
            "id": "comment-13655627"
        },
        {
            "date": "2013-05-14T00:02:46+0000",
            "content": "Is Runtime.halt too \"nice\"?  Ie is there any chance it will do any cleanup at all?  (The javadocs seem to indicate no but still....).\n\nI like the crashing version because it's most \"accurate\" to what we are trying to test here ... ie rather than asking the JVM to shoot itself, we do the shooting. ",
            "author": "Michael McCandless",
            "id": "comment-13656561"
        },
        {
            "date": "2013-05-14T07:08:19+0000",
            "content": "I think Runtime.halt is a very similar thing \u2013 it (should) stop the threads immediately without any finalization blocks/ propagation of ThreadDeathException or otherwise. Any open file handles will be closed by the operating system on a \"real\" crash so I don't think this makes any difference. \n\nI do have native code that crashes J9 and JRockit too but this has side effects \u2013 J9 dumps a lot of debugging state information, for example. Right now we're testing just a subset of JVMs, if the tradeoff is to increase the coverage on other JVMs I think it's worth it to use Runtime.halt(). ",
            "author": "Dawid Weiss",
            "id": "comment-13656866"
        },
        {
            "date": "2013-05-14T09:53:18+0000",
            "content": "Maybe we could use our gun on the JVMs where it works / doesn't have heavy side effects, and Runtime.halt on all others? ",
            "author": "Michael McCandless",
            "id": "comment-13656931"
        },
        {
            "date": "2013-05-14T10:51:39+0000",
            "content": "Sure. ",
            "author": "Dawid Weiss",
            "id": "comment-13656957"
        },
        {
            "date": "2013-05-15T10:10:03+0000",
            "content": "A version with runtime.halt() fallback for JVMs on which unsafe npe doesn't crash.\n\nI also fixed the stream pumping from subprocess; previously it could have hung if something was printed to stderr (due to blocked pipe). ",
            "author": "Dawid Weiss",
            "id": "comment-13658215"
        },
        {
            "date": "2013-07-23T18:36:58+0000",
            "content": "Bulk close resolved 4.4 issues ",
            "author": "Steve Rowe",
            "id": "comment-13716707"
        }
    ]
}