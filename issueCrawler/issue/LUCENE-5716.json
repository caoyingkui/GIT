{
    "id": "LUCENE-5716",
    "title": "Track file handle leaks (FileDescriptor, NIO Path SPI and Socket mostly).",
    "details": {
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": []
    },
    "description": "",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14013590",
            "author": "Dawid Weiss",
            "content": "I spoke with Robert at Buzzwords about it a bit. It'd be interesting to capture file handle leaks from tests (unclosed sockets, unclosed files). There are essentially no java built-in mechanisms to do it. One could use the operating system's tools such as lsof, but this would measure ALL file handles, including handles of open jar files, etc. It's also an interesting puzzle to see if one can do it from Java in a portable  way.\n\nThere are a few options.\n\n1) Override bootclasspath for a particular release of the JVM and modify system classes to allow resource tracking. A similar \"solution\" kind of exists already in FileInputStream:\n\n    public int read() throws IOException {\n        Object traceContext = IoTrace.fileReadBegin(path);\n        int b = 0;\n        try {\n            b = read0();\n        } finally {\n            IoTrace.fileReadEnd(traceContext, b == -1 ? 0 : 1);\n        }\n        return b;\n    }\n\n\nthe obscure IoTrace class unfortunately only tracks file writes, not its open/close status. A similar hack could be applied to capture constructors and close calls though.\n\n2) Use bytecode transformation and capture all places where interesting objects are created/ closed. AspectJ is closest to my heart since it allows fast prototyping and is essentially just a bytecode manipulation framework. I've written a simple aspect tracing FileInputStream usage, here's the code.\n\nhttps://github.com/dweiss/fhandle-tracing\n\nThe aspect itself:\nhttps://github.com/dweiss/fhandle-tracing/blob/master/src/main/aspect/com/carrotsearch/aspects/FileInputStreamTracker.aj\n\nThere is a JUnit test in there and if you run mvn test, you can see that it's actually working quite nice. Not everything can be easily addressed (for example, it's difficult to advise close in classes that inherit from FIS but don't override this method), but alternative solutions to the problem also exist (capture all close calls, capture all constructors of FileInputStream+.new). Doable and should work for 99% of the use cases I think.\n\n3) use jvmti instrumentation agents to essentially provide the same as above. I don't think it is functionally any different from (2) and I like aspectj's syntax for fast hacking. The only add-on value might be (didn't check) if we could redefine and reload the definitions of core Java classes (FileInputStream, for example) so that we can instrument constructors and methods of these base classes directly. This would be quite nice because then we'd be able to make it portable across all JVMs and it should work for all the code, including standard library itself.\n\n4) Use btrace and dump a log, then do post-mortem analysis for unclosed files. Doable, although a bit hairy. https://kenai.com/projects/btrace/sources/hg/content/samples/FileTracker.java ",
            "date": "2014-05-30T12:14:01+0000"
        },
        {
            "id": "comment-14013604",
            "author": "Shalin Shekhar Mangar",
            "content": "In a past job, I have used a custom protocol factory for http and https connections and tracked open/close, bytes read/written using a thread-local to make sure that webapps aren't leaking connections. ",
            "date": "2014-05-30T12:46:07+0000"
        },
        {
            "id": "comment-14013606",
            "author": "Dawid Weiss",
            "content": "Thanks Shalin. What I'm aiming at here is much more low-level (and should be more accurate). We'll see how it goes. ",
            "date": "2014-05-30T12:51:30+0000"
        },
        {
            "id": "comment-14014246",
            "author": "Dawid Weiss",
            "content": "Option (3) is feasible, I just checked (same project as above, jvmti branch). Even though FileInputStream is already loaded, it can be redefined with (relative) ease. If we used asm we could just inject some simple before/after hooks that would call to some normal (not-asmified) code. ",
            "date": "2014-05-30T21:36:49+0000"
        },
        {
            "id": "comment-14018701",
            "author": "ASF subversion and git services",
            "content": "Commit 1600614 from Dawid Weiss in branch 'dev/branches/LUCENE-5716'\n[ https://svn.apache.org/r1600614 ]\n\nBranch for LUCENE-5716 ",
            "date": "2014-06-05T11:41:53+0000"
        },
        {
            "id": "comment-14019607",
            "author": "Dawid Weiss",
            "content": "You can get a feeling of what it works like by switching to LUCENE-5716 and running:\n\ncd lucene\nant test-core -Dtests.slow=false -Dtestcase=TestOfflineSorter\n\n\n\nTry opening a FileInputStream to something (out of the temporary folders) and leaving it unclosed. ",
            "date": "2014-06-06T06:11:50+0000"
        },
        {
            "id": "comment-14019608",
            "author": "Dawid Weiss",
            "content": "\n   [junit4]    > Assumption #1: 'nightly' test group is disabled (@Nightly())\n   [junit4]   1> Tracked 76 objects, 76 closed, 0 open.\n   [junit4]   1> FH: FileInputStream(C:\\Work\\lucene-solr-svn\\LUCENE-5716\\lucene\\build\\core\\test\\J0\\.\\temp\\sort3028791570\n611301125partition) [closed]\n   [junit4]   1> FH: FileInputStream(C:\\Work\\lucene-solr-svn\\LUCENE-5716\\lucene\\build\\core\\test\\J0\\.\\temp\\sort6926018466\n304216348partition) [closed]\n   [junit4]   1> FH: FileInputStream(C:\\Work\\lucene-solr-svn\\LUCENE-5716\\lucene\\build\\core\\test\\J0\\.\\temp\\sort6765538901\n416981889partition) [closed]\n...\n\n\n\nA list of all open/closed file handles is for debug/ showcase purposes only. ",
            "date": "2014-06-06T06:13:01+0000"
        },
        {
            "id": "comment-14019679",
            "author": "Michael McCandless",
            "content": "This looks really awesome! ",
            "date": "2014-06-06T08:47:41+0000"
        },
        {
            "id": "comment-14019820",
            "author": "Shalin Shekhar Mangar",
            "content": "Very cool! ",
            "date": "2014-06-06T13:10:11+0000"
        },
        {
            "id": "comment-14111057",
            "author": "Ryan Ernst",
            "content": "Dawid Weiss Any reason this was not put into trunk/4x? Is there more work to do? ",
            "date": "2014-08-26T18:02:15+0000"
        },
        {
            "id": "comment-14111258",
            "author": "Dawid Weiss",
            "content": "Yeah, this patch is a proof of concept more than a fully fledged solution. It only covers wrapping FileInputStream, doesn't include output streams, NIO or sockets. It also introduces aspectj dependency which may be an annoyance to many people \u2013 I personally like it, but I can understand why others may hate such a piece of bytecode voodoo...\n\nAlso note my comment above:\n\n> Option (3) is feasible, I just checked (same project as above, jvmti branch).\n\nThis is, I think, a much more reliable way to hack into the JVM since it'd allow you to wrap, track (and reload) the core system classes, not just pointcuts (bytecode calls) where these classes are used. It is a more difficult way, but it's also more rewarding in the end (or so I tend to believe). Sadly, I won't be able to work on it in any near future \u2013 too much stuff on my plate right now. If you want to take over, go ahead! ",
            "date": "2014-08-26T20:23:23+0000"
        },
        {
            "id": "comment-14946856",
            "author": "Dawid Weiss",
            "content": "I'm closing it as unresolved because Lucene currently has a NIO FS leak checker and other potential ways are pretty intrusive. I still think it'd be a fun exercise project to create an \"agent\" library to instrument system classes (or only user code) to track system resources \u2013 their allocation and release points \u2013 and perhaps dump a report of leaks at VM exit. ",
            "date": "2015-10-07T13:38:56+0000"
        },
        {
            "id": "comment-15069388",
            "author": "Dawid Weiss",
            "content": "This is just a note to self. I requested an open source license for the most recent YourKit profiler (graciously donated by the company \u2013 yay!). There is a new feature I haven't seen before \u2013 probes, exactly in the shape and form I always imagined them to be (I have been a fan of aspectj, but this is done via agents, so it allows modifications of system classes I believe).\n\nVery cool. This could be used to track other resource leaks (sockets, etc.). If combined with JUnit rules, it could even detect such leaks at class or method level.\n\nhttps://www.yourkit.com/docs/java/help/probes.jsp\nhttps://www.yourkit.com/docs/java/help/event_method_call.jsp ",
            "date": "2015-12-23T08:44:54+0000"
        }
    ]
}