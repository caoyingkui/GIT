{
    "id": "SOLR-3241",
    "title": "Document boost fail if a field copy omit the norms",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "After https://issues.apache.org/jira/browse/LUCENE-3796, it is not possible to set a boost to a field that has the \"omitNorms\" set to true. This is making Solr's document index-time boost to fail when a field that doesn't omit norms is copied (with copyField) to a field that does omit them and document boost is used. For example:\n\n<field name=\"author\" type=\"text\" indexed=\"true\" stored=\"false\" omitNorms=\"false\"/>\n<field name=\"author_display\" type=\"string\" indexed=\"true\" stored=\"true\" omitNorms=\"true\"/>\n<copyField source=\"author\" dest=\"author_display\"/>\n\nI'm attaching a possible fix.",
    "attachments": {
        "SOLR-3241.patch": "https://issues.apache.org/jira/secure/attachment/12518247/SOLR-3241.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13228841",
            "date": "2012-03-14T00:25:34+0000",
            "content": "This still doesn't work for Types with subtypes, like LatLonType and CurrencyType "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13228914",
            "date": "2012-03-14T03:09:08+0000",
            "content": "part of me things we should just remove the error checking for omitNorms && boost != 1.0F from DocumentBuilder.toDocument (added in /LUCENE-3796) and just silently ignore any boost on a SolrInputField where omitNorms==true (ie: maybe log a warning, but don't throw an Exception).  This would be consistent with the behavior in past releases (except for the warning log if we add that), and wouldn't cause any confusing errors for things like LatLonType (even if they come from third-party plugins we can't contro/test)\n\nOn the other hand... that feels really dirty, and it would be nice to fail fast and loud if the client tries to set a boost on an omitNorms field\n\nPerhaps a better fix would be to leave DocumentBuilder exactly as it is today, and instead change FieldType.createField to (silently) ignore the boost if omitNorms==true for that SchemaField.  if i'm thinking about this right, that would mean the error checking of the SolrInputDocument (and all it's SolrInputFields) in DocumentBuilder.toDocument would still work as designed \u2013 so you'd get an error if any client or \"high level\" plugin like an UpdateProcessor tried to use a field boost on an omitNorms field; but any fields added at a lower level (ie: by copyField or a poly field) would silently ignore those boosts if they were copied/cloned to a field where omitNorms==true.\n\n\n\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228916",
            "date": "2012-03-14T03:11:51+0000",
            "content": "Thanks Tom\u00e1s (and thanks for the patch!) I'll look into this.\n\nThe concept of document boost doesn't really exist anymore, and I don't think we should fail for an omitNorms field \njust because of the document boost. It just won't be applied to that field.\n\nThe point is only to fail if someone explicitly boosts an omitNorms field itself. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228921",
            "date": "2012-03-14T03:25:02+0000",
            "content": "\nPerhaps a better fix would be to leave DocumentBuilder exactly as it is today, and instead change FieldType.createField to (silently) ignore the boost if omitNorms==true for that SchemaField. if i'm thinking about this right, that would mean the error checking of the SolrInputDocument (and all it's SolrInputFields) in DocumentBuilder.toDocument would still work as designed \u2013 so you'd get an error if any client or \"high level\" plugin like an UpdateProcessor tried to use a field boost on an omitNorms field; but any fields added at a lower level (ie: by copyField or a poly field) would silently ignore those boosts if they were copied/cloned to a field where omitNorms==true.\n\nHoss: this sounds good to me? we can add tests that the basic case is still working. \n\nThe reason the logic was somewhat complicated in DocumentBuilder is because, from the lucene indexer its easy to detect this case, but:\n\n\tAs mentioned before, \"document boost\" is something only in solr now, so the idea was not to fail just because you had omitNorms field and solr multiplied document boost into field boosts. But this copyField/polyField is an exception as you mention\n\texplicit handling was added to DocumentBuilder because its better for Solr to throw an exception here than rely upon lucene, lucene's exception\nis \"nastier\" in the sense its a lower-level non-aborting exception that will produce a deleted document.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13228924",
            "date": "2012-03-14T03:39:03+0000",
            "content": "The reason the logic was somewhat complicated in DocumentBuilder is because, from the lucene indexer its easy to detect this case, but:\n\nsure ... but i think it's not actually just \"Document Boost\" is it?  if field \"foo\" is declared with omitNorms==false, and a client sends a doc with a field \"foo\" using a fieldBoost then that should be totally fine \u2013 but if the schema says to copyField from foo->bar where bar has omitNorms==true then i think that will currently cause an from the lucene low level check, corret? (i haven't tried it, i'm going based on tomas's path) likewise if \"foo\" is a LatLonField (or any other polyfield) and the underlying dynamic field used has omitNorms==true then won't that same low level lucene code throw an error there?\n\nso multiple error paths from totally sane usage none of which has anything to do with doc boost, right?\n\n(Truth be told, i didn't even notice the \"Document boost\" part of the summary, i was just looking at tomas's patch and skimming the summary) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13228930",
            "date": "2012-03-14T03:52:55+0000",
            "content": "\nbut if the schema says to copyField from foo->bar where bar has omitNorms==true then i think that will currently cause an from the lucene low level check, corret?\n\nI have no idea.. does copyField actually copy field boosts too? \n\nThe attached test in the patch is a case of document boosting + copyField only. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13229134",
            "date": "2012-03-14T11:17:33+0000",
            "content": "I found the issue with copyfields as you mentioned Robert. foo is omitNorms=false, and bar is omitNorms=true. I have a copyfield foo->bar and I add a document like:\n<document boost=X>\n<field name=foo>AAAAAA</field>\n</document>\n\nThis case is fixed by the patch. Testing it, i found a similar situation where a field1 is a poly type with omitNorms=false, and the subtype if it has omitNorms=true. In this case, it fails even without a copyfield just by adding a document like:\n\n<document boost=X>\n<field name=poly>AAA,BBB</field>\n</document>\n\nI don't know if it makes sense to have a poly field where the subtype have a different value in the \"omitNorms\" attribute, probably this should fail even before the document is added. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13229157",
            "date": "2012-03-14T12:46:44+0000",
            "content": "updating the patch from Tom\u00e1s to include an additional test for the field boost+copyField.\n\nwe still need to add tests for this polyField case, and any other possibilities (can you polyField+copyField?) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13229183",
            "date": "2012-03-14T13:38:39+0000",
            "content": "Updated patch with fixes for the polyfield case (untested!)\n\nAfter reviewing the code: Tom\u00e1s had the correct fix for the copyField case, his patch fixes a logic bug, nothing more!\n\nThe polyField case is different: its too late in DocumentBuilder to do anything here after the creation of IndexableFields: moreover we cannot nuke the whole boost for the field because we cannot assume anything just because isPolyField() == true, for example a custom field type might not even be instanceof AbstractSubTypeField! \n\nBecause of this I think these fieldtypes should really treat the fact they use 'real fields' as an impl detail. so I added the logic to their subfield creation. "
        },
        {
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-13229229",
            "date": "2012-03-14T14:28:42+0000",
            "content": "I'm attaching another patch with some more tests.\nAlso updated the DocumentBuilder to use the existing logic instead of replicating it where the fix is applied. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13229243",
            "date": "2012-03-14T14:59:48+0000",
            "content": "Thanks, patch looks good!\n\nI'll wait a bit for any other input. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13229298",
            "date": "2012-03-14T16:19:43+0000",
            "content": "patch looks fine ... i wish there was a way to make it easier for poly fields so they wouldn't have do do the check themselves, but when i tried the idea i had it didn't work, so better to go with this for now and maybe refactor a helper method later.\n\nthe few changes i would make:\n\n1) make the new tests grab the IndexSchema obejct and assert that every field (that the cares about) has the expected omitNorms value \u2013 future proof ourselves against someone nuetering the test w/o realizing by tweaking the test schema because they don't know that there is a specific reason for those omitNorm settings\n\n2) add a test that explicitly verifies the failure case of someone setting field boost on a field with omitNorms==true, assert that we get the expected error mesg (doesn't look like this was added when LUCENE-3796 was commited, and we want to make sure we don't inadvertantly break that error check)\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13229337",
            "date": "2012-03-14T16:54:50+0000",
            "content": "updated patch with hossman's suggested test improvements. I'll commit soon. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13229443",
            "date": "2012-03-14T18:04:31+0000",
            "content": "Thanks Tom\u00e1s! "
        }
    ]
}