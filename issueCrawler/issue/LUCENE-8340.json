{
    "id": "LUCENE-8340",
    "title": "Efficient boosting by recency",
    "details": {
        "components": [],
        "status": "Resolved",
        "resolution": "Fixed",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Minor",
        "type": "Improvement"
    },
    "description": "I would like that we support something like FeatureField.newSaturationQuery but that works with features that are computed dynamically like recency or geo-distance, and is still optimized for top-hits collection. I'm starting with recency because it makes things a bit easier even though I suspect that geo-distance might be a more common need.",
    "attachments": {
        "LUCENE-8340.patch": "https://issues.apache.org/jira/secure/attachment/12925908/LUCENE-8340.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16496509",
            "author": "Adrien Grand",
            "content": "Here is a patch that implements such a query on LongPoint, since this is what users would typically use to index dates. It also requires that the field has doc values. It computes scores as pivotDistance / (distance + pivotDistance) very similarly to FeatureField.newSaturationQuery and computes the range that values must belong to in setMinCompetitiveScore using points in order to efficiently skip non-competitive documents.\n\nCurrently it works on its own, but because it can't expose useful impacts (the only thing it knows is that the maximum score is 1), we need to do some changes to make boolean queries as well in order to propagate setMinCompetitiveScore calls to their sub clauses so that we could also skip non-competitive docs when boosting full-text matches by recency. ",
            "date": "2018-05-31T13:08:31+0000"
        },
        {
            "id": "comment-16579796",
            "author": "Adrien Grand",
            "content": "we need to do some changes to make boolean queries as well in order to propagate setMinCompetitiveScore calls to their sub clauses\n\nIt turns out that Jim Ferenczi is implementing this in LUCENE-8448 for other reasons. ",
            "date": "2018-08-14T13:29:15+0000"
        },
        {
            "id": "comment-16602299",
            "author": "Adrien Grand",
            "content": "So I went back to this patch and did some testing. I played with the wikimedium10m dataset and the following query (note that I had to do a hack to also index \"lastModNDV\" with a LongPoint):\n\nQuery boostedQ = new BooleanQuery.Builder()\n\t\t.add(new TermQuery(new Term(\"body\", \"ref\")), Occur.MUST)\n\t\t.add(LongPoint.newDistanceFeatureQuery(\"lastModNDV\", 1f, 1335997132000L, 24 * 3600 * 1000), Occur.SHOULD) // within 1 day\n\t\t.build();\n\n\nThe maximum score of the term query is 2.07. The maximum score of the distance query is 1, and there are 582,764 documents whose timestamp is in [1335997132000L - 24 * 3600 * 1000, 1335997132000L + 24 * 3600 * 1000], meaning their score is in [0.5, 1].\n\nWhen computing the top 10 matches and counting hits, all 3793973 hits must be visited and points are never read. This takes about 99ms.\nWhen computing the top 10 matches but not counting hits (totalHitsThreshold=1), only 264802 hits are collected (7% of matches) and the query runs in 29ms.\n\nIf I switch to more costly queries that have fewer hits then the speed up decreases, or even becomes a slowdown unfortunately. That said I don't think it should prevent us from adding something like that, which is a useful addition to the scoring toolbox. ",
            "date": "2018-09-03T15:58:32+0000"
        },
        {
            "id": "comment-16602715",
            "author": "Jim Ferenczi",
            "content": "nice speed up, +1\n\nIf I switch to more costly queries that have fewer hits then the speed up decreases, or even becomes a slowdown unfortunately.\n\nWe could add a penalty to the estimated count of the point visitor when it is compared with the leadCost or check the difference between the max scores of the other clauses and the max score of the distance query ? Since we can skip blocks in the parent scorer (reqOptSumScorer) I guess we can be less aggressive when applying the point visitor optimization. ",
            "date": "2018-09-04T08:02:51+0000"
        },
        {
            "id": "comment-16602831",
            "author": "Adrien Grand",
            "content": "Good call, the way that the leadCost was leveraged was not very efficient. I changed the logic to enforce that we only materialize the set of matches if there are less than leadCost/8 matches, which resolved the main slowdowns I was seeing. ",
            "date": "2018-09-04T09:43:08+0000"
        },
        {
            "id": "comment-16602958",
            "author": "ASF subversion and git services",
            "content": "Commit a9acdfdb544cb0f66709a89a9820e8444fe8edef in lucene-solr's branch refs/heads/master from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a9acdfd ]\n\nLUCENE-8340: Recency boosting. ",
            "date": "2018-09-04T12:03:37+0000"
        }
    ]
}