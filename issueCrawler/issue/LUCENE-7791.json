{
    "id": "LUCENE-7791",
    "title": "AIOOBE on flush+sort",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "6.5",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "core/index"
        ],
        "fix_versions": [
            "6.5.1",
            "6.6",
            "7.0"
        ]
    },
    "description": "On released 6.5.0 version, flushing operation on sorted index throws ArrayIndexOutOfBoudException in NumericDocValuesWriter, NormValuesWriter and BinaryDocValuesWriter.\n\nNew SortedXXXIterators are looking up documents in FixedBitSets or PackedValues based on remapped (sorted) document ID, without checking BitSets/Values ranges, which are based on original document IDs. Meanwhile FixedBitSets can be sparse not only in between documents with fields, but also after last (originally) document with given field (because writer's addValue() is not called for last documents without values for fields). So remapped (sorted) values range can have different useful values range and bounds checking should be done for remapped and not original ID.\n\nWe were hit by this bug because our indexes are built from independent sources by partial updating fragments of documents, so there is always some documents without values in some fields.\n\nAs I understand this bug, it shows when:\n\n\tmaxDoc is greater than 64 (64 is pre-allocated size for writers FixedBitSets)\n\tsome number of last taken documents have empty fields (so FixedBitSet won't be reallocated to maxDoc)\n\n\n\nAlso, check for range of values for given field is now happening based on original ID (e.g. \"upto < size\"), so flushing can now lost some values, even without hitting AIOOBE.\n\nI will attach patch resolving issues with some writers; for other writers from LUCENE-7579, I am not sure if there are similar bugs in them; patch resolved our indexing issues, please check changes from LUCENE-7579 for confirmation of lack of additional bugs in other flush-sorting writers.",
    "attachments": {
        "sortflush.patch": "https://issues.apache.org/jira/secure/attachment/12864233/sortflush.patch",
        "LUCENE-7791.patch": "https://issues.apache.org/jira/secure/attachment/12864331/LUCENE-7791.patch",
        "sortflush-test.patch": "https://issues.apache.org/jira/secure/attachment/12864265/sortflush-test.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15976555",
            "date": "2017-04-20T12:06:06+0000",
            "content": "Whoa, nice catch!  Is it possible to also add a test case in the patch showing the bug? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15976622",
            "date": "2017-04-20T12:39:37+0000",
            "content": "I'll try, but don't have anything ready, so I don't know if I manage it today ",
            "author": "Przemys\u0142aw Szeremiota"
        },
        {
            "id": "comment-15976656",
            "date": "2017-04-20T13:11:52+0000",
            "content": "OK, test-patch: it fails on branch_6_5, and passes with patch; rudimentary test only for NumericDocValuesWriter, fails with AIOOBE:\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestIndexSorting -Dtests.method=testEmptyNonSortedIntField -Dtests.seed=B1B45F478095D85D -Dtests.slow=true -Dtests.locale=fr-BE -Dtests.timezone=Canada/Mountain -Dtests.asserts=true -Dtests.file.encoding=ISO-8859-1\n   [junit4] FAILURE 0.02s | TestIndexSorting.testEmptyNonSortedIntField <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: index=127, numBits=64\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B1B45F478095D85D:EA0CCD4D0DFEC9E8]:0)\n   [junit4]    > \tat org.apache.lucene.util.FixedBitSet.get(FixedBitSet.java:181)\n   [junit4]    > \tat org.apache.lucene.index.NumericDocValuesWriter$SortingNumericIterator.next(NumericDocValuesWriter.java:257)\n   [junit4]    > \tat org.apache.lucene.index.NumericDocValuesWriter$SortingNumericIterator.next(NumericDocValuesWriter.java:228)\n   [junit4]    > \tat org.apache.lucene.codecs.memory.MemoryDocValuesConsumer.addNumericField(MemoryDocValuesConsumer.java:112)\n   [junit4]    > \tat org.apache.lucene.codecs.memory.MemoryDocValuesConsumer.addNumericField(MemoryDocValuesConsumer.java:91)\n   [junit4]    > \tat org.apache.lucene.codecs.perfield.PerFieldDocValuesFormat$FieldsWriter.addNumericField(PerFieldDocValuesFormat.java:111)\n   [junit4]    > \tat org.apache.lucene.index.NumericDocValuesWriter.flush(NumericDocValuesWriter.java:96)\n   [junit4]    > \tat org.apache.lucene.index.DefaultIndexingChain.writeDocValues(DefaultIndexingChain.java:258)\n   [junit4]    > \tat org.apache.lucene.index.DefaultIndexingChain.flush(DefaultIndexingChain.java:142)\n   [junit4]    > \tat org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:444)\n   [junit4]    > \tat org.apache.lucene.index.DocumentsWriter.doFlush(DocumentsWriter.java:539)\n   [junit4]    > \tat org.apache.lucene.index.DocumentsWriter.flushAllThreads(DocumentsWriter.java:653)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.prepareCommitInternal(IndexWriter.java:3007)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.commitInternal(IndexWriter.java:3242)\n   [junit4]    > \tat org.apache.lucene.index.IndexWriter.commit(IndexWriter.java:3205)\n   [junit4]    > \tat org.apache.lucene.index.TestIndexSorting.testEmptyNonSortedIntField(TestIndexSorting.java:774)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "author": "Przemys\u0142aw Szeremiota"
        },
        {
            "id": "comment-15976777",
            "date": "2017-04-20T14:23:09+0000",
            "content": "Great catch indeed !\n\n\nAlso, check for range of values for given field is now happening based on original ID (e.g. \"upto < size\"), so flushing can now lost some values, even without hitting AIOOBE.\n\nI think it's ok since \"size\" corresponds to the max docID we have in the buffer so we cannot lost values here unless I am missing something ?\nSo the only problem here is that we don't check if the remapped doc id is greater than the capacity of the bitset.\n\n\nplease check changes from LUCENE-7579 for confirmation of lack of additional bugs in other flush-sorting writers.\n\nI did and the other doc value sorters do not use a bitset to handle missing values. I think we are safe with this patch.\n\nThe patch looks good and the test too, this bug only appears in 6.x since the code is slightly different in 7.\nI'll merge shortly unless Michael McCandless has something to add here ? ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15976914",
            "date": "2017-04-20T15:40:23+0000",
            "content": "Maybe I worded it unclear:\n\n-      if (upto < size) {\n-        int oldID = sortMap.newToOld(upto);\n\n\nvs\n\n+      int oldID = sortMap.newToOld(upto);\n+      if (oldID < size) {\n\n\nsize and oldID is bounded by actual number of values in buffer, but upto is not (not necessarily, because it is reordered); so i have had a hunch that it could lead to skip legitimate values if sorted (upto) ID is greater than value buffer size (but original wouldn't be); but I don't have a proof/test for it. Anyways, patch as it is should work ",
            "author": "Przemys\u0142aw Szeremiota"
        },
        {
            "id": "comment-15977169",
            "date": "2017-04-20T18:08:25+0000",
            "content": "Ok I see it now. The code assumes that size==maxDoc and that's of course not true for sparse field. Applying the sort on a sparse numeric doc values was also broken (throws AIOOBE) so I reused your patch and published another one which also fixes the sorting on sparse numeric doc values.\nThanks so much for noticing this Przemys\u0142aw Szeremiota ! ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15977449",
            "date": "2017-04-20T20:28:10+0000",
            "content": "+1 to merge.\n\nMaybe we should hold 6.5.1 RC2 for this? ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15977463",
            "date": "2017-04-20T20:36:49+0000",
            "content": "Ok I'll merge to 6.x first, add the tests to master in order to ensure that this bug does not impact 7.x. I hope I can merge to 6.5 if the 6.5.1 RC2 can be rebuilt, thanks for raising this Michael McCandless. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15977576",
            "date": "2017-04-20T21:29:52+0000",
            "content": "Commit 0902c9440ef10b02e909a6c58411356fea97bb5f in lucene-solr's branch refs/heads/branch_6x from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0902c94 ]\n\nLUCENE-7791: Fixed index sorting to work with sparse numeric and binary docvalues field. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15977606",
            "date": "2017-04-20T21:46:19+0000",
            "content": "Commit 7477dcd111b6950d4105623ad2cfe60faea463da in lucene-solr's branch refs/heads/branch_6_5 from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7477dcd ]\n\nLUCENE-7791: Fixed index sorting to work with sparse numeric and binary docvalues field. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15977769",
            "date": "2017-04-20T23:18:24+0000",
            "content": "Ok this is now merged to 6.x and 6.5 and the fix will be part of the 6.5.1 release.\nI still need to adapt the test for master.\nThanks Przemys\u0142aw Szeremiota  and Michael McCandless ! ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15977978",
            "date": "2017-04-21T02:48:53+0000",
            "content": "Commit 0404e37357b90b583d306074838d69c7074ce307 in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0404e37 ]\n\nLUCENE-7791: add tests with index sorting and sparse docvalues fields ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15978174",
            "date": "2017-04-21T06:46:42+0000",
            "content": "Jim Ferenczi What about SortingNumericIterator@NormValuesWriter? It throws too, and LUCENE-7791.patch misses it's fix? ",
            "author": "Przemys\u0142aw Szeremiota"
        },
        {
            "id": "comment-15978372",
            "date": "2017-04-21T09:16:31+0000",
            "content": " I don't know what happened but the fix for NormsValueWriter is not in my patch. I'll push the fix shortly with additional tests for this case, thanks for checking. ",
            "author": "Jim Ferenczi"
        },
        {
            "id": "comment-15978388",
            "date": "2017-04-21T09:27:59+0000",
            "content": "Commit b7214a0a5dcaa4f487ae3e46d9f5c023c155e027 in lucene-solr's branch refs/heads/branch_6x from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b7214a0 ]\n\nLUCENE-7791: fix AIOOBE on NormValuesWriter too ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15978389",
            "date": "2017-04-21T09:28:49+0000",
            "content": "Commit cd1f23c63abe03ae650c75ec8ccb37762806cc75 in lucene-solr's branch refs/heads/branch_6_5 from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cd1f23c ]\n\nLUCENE-7791: fix AIOOBE on NormValuesWriter too ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15978429",
            "date": "2017-04-21T10:01:22+0000",
            "content": "Commit 3316f47bcf110851ebf7f70b835027a9769bccd2 in lucene-solr's branch refs/heads/master from Jim Ferenczi\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3316f47 ]\n\nLUCENE-7791: add tests for index sorting with sparse text fields and norms ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-15978672",
            "date": "2017-04-21T12:42:18+0000",
            "content": "Jim Ferenczi Michael McCandless Thank you both very much, great (and quick!!) job! I look forward to release  ",
            "author": "Przemys\u0142aw Szeremiota"
        },
        {
            "id": "comment-15979841",
            "date": "2017-04-22T09:49:20+0000",
            "content": "Thank you Przemys\u0142aw Szeremiota! ",
            "author": "Michael McCandless"
        }
    ]
}