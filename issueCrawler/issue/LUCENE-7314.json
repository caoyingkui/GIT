{
    "id": "LUCENE-7314",
    "title": "Graduate LatLonPoint to core",
    "details": {
        "resolution": "Done",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Resolved",
        "type": "Improvement"
    },
    "description": "Maybe we should graduate these fields (and related queries) to core for Lucene 6.1?",
    "attachments": {
        "LUCENE-7314.patch": "https://issues.apache.org/jira/secure/attachment/12928654/LUCENE-7314.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15312606",
            "author": "Michael McCandless",
            "date": "2016-06-02T16:33:43+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15312692",
            "author": "Nicholas Knize",
            "date": "2016-06-02T17:17:47+0000",
            "content": "+1 for graduating from sandbox but how about LatLonPoint and corresponding queries to a package in the spatial module? This is what we did for GeoPointField since its spatial specific and dependency free. "
        },
        {
            "id": "comment-15314170",
            "author": "Michael McCandless",
            "date": "2016-06-03T14:16:19+0000",
            "content": "Actually I think it's reasonable to graduate LatLonPoint to core?  The code is very minimal, it's the best performing 2D spatial option we have today (see http://home.apache.org/~mikemccand/geobench.html), so it makes sense to present it as our default simple spatial implementation. "
        },
        {
            "id": "comment-15314225",
            "author": "David Smiley",
            "date": "2016-06-03T14:50:53+0000",
            "content": "We have other modules too, you know .  What motivates you to want these in core?\n\nInetAddressPoint seems like a candidate for the \"queries\" module; no?  I haven't yet encountered a user/client that would want to do inet address range queires (or maybe I don't recall), but of course I know there must be some out there.\n\nLatLonPoint is an obvious candidate for the \"spatial\" module, no? "
        },
        {
            "id": "comment-15314256",
            "author": "Nicholas Knize",
            "date": "2016-06-03T15:07:22+0000",
            "content": "Well for the same reasons, prior to LatLonPoint, GeoPointField was originally intended for core (several issues discussing this). But that kept getting vetoed under the justification that spatial is a specialized use-case. That's why the dependency free spatial module, and spatial-extras discussion/refactor occurred, resulting in 3 different modules for spatial types. I'd prefer avoid further fragmenting to 4 module locations. (Would better prefer to collapse to 2 modules) But if the \"special use-case\" veto has since majority lifted, I'll +0 to avoid another bikeshed and being \"that blocker guy\".  "
        },
        {
            "id": "comment-15314927",
            "author": "Michael McCandless",
            "date": "2016-06-03T22:05:16+0000",
            "content": "What motivates you to want these in core?\n\nWell, because it's the best default geo implementation we have to offer for basic usage now.  Best in performance, in code simplicity, in no dependencies/licensing concerns.\n\nYes, we have modules for all the other more expert/experimental/less-back-compat-guarantee implementations.\n\nI see this as analogous to our codecs: we provide a default codec in core, but give other expert options via the codecs module. "
        },
        {
            "id": "comment-15315521",
            "author": "David Smiley",
            "date": "2016-06-04T14:09:40+0000",
            "content": "Mike: Sorry but I see this quite different than codecs.  Lucene's Codec API is the foundation of Lucene.  In order for Lucene-core to function by itself, it requires at least one codec impl to do anything at all.  And so we need to have at least one impl in Lucene-core.  This obviously isn't similar to LatLonPoint at all.  RE our other modules, you suggest they exist for \"expert/experimental/less-back-compat-guarantee implementations\" \u2013 to, I think you mean to imply, things in Lucene-core.  But of course this isn't true.  We don't have a default highlighter or default suggester or default join, or etc. in Lucene core.  I feel like I'm in some weird dream in which smart people that I respect say things that make no sense to me, making me wonder if I've gone crazy.\n\nAdrien Grand can you post your rationale from your perspective?  (You're the o.p. after all)\n\nI want to solicit input from others committers active in Lucene that don't typically give their input on anything spatial. Uwe Schindler Alan Woodward can you please share your thoughts on this discussion?  Specifically, where should LatLonPoint go and why?  And likewise for InetAddressPoint.  I suggested \"misc\" for that one but haven't gotten a reaction to that yet. "
        },
        {
            "id": "comment-15315784",
            "author": "Adrien Grand",
            "date": "2016-06-05T07:33:48+0000",
            "content": "Adrien Grand can you post your rationale from your perspective? (You're the o.p. after all)\n\nEven though I mentioned \"core\" in the issue title, I had not really considered where they should go, the motivation was more about moving them out of sandbox. I think I agree it would make more sense to have LatLonPoint in spatial and InetAddressPoint in misc than both in core. "
        },
        {
            "id": "comment-15315820",
            "author": "Michael McCandless",
            "date": "2016-06-05T09:19:53+0000",
            "content": "Mike: Sorry but I see this quite different than codecs.\n\nI think you only say that because that is in fact the status quo.  It could just as easily (by your logic) go the other way, and our best codec would be in the codec modules, and when you use Lucene you must go and pick a codec, just like you must go and pick a highlighter or query parser or spatial search from their modules today.\n\nI feel this approach, that all functions must be moved into all modules, defeats direct users of Lucene.  Sure, those of us working on ES and Solr will always know where things wind up (we pay close attention here), and we will figure out how to expose things, but direct users see spatial modules with tons of choices and it's not clear which is a good \"default\" starting option.  Likewise for highlighters, queryparsers and spatial search (this issue).  Lucene becomes harder to use when we hide the good defaults like this.\n\nAnyway, I'll stop ranting now!  It looks like I'm outvoted here, and we should just hide these two good classes away in spatial and misc modules. "
        },
        {
            "id": "comment-15318317",
            "author": "Michael McCandless",
            "date": "2016-06-07T11:27:41+0000",
            "content": "Here's a timely email by an unlucky user struggling to figure out how to do spatial polygon search with Lucene: http://markmail.org/thread/mpge4wqo7cfqm4i5 (sent on June 4, 2016, with subject \"Point in polygon\" search with Lucene / Spatial4j / JTS\").\n\nThis email shows precisely why I think it's important that Lucene present good default choices for common search use cases like spatial, highlighting, query parsing, etc., and why I feel LatLonPoint in particular (this issue) should move to Lucene's core.\n\nIt's clearly important we make Lucene easier to use for the common use cases and by hiding away LatLonPoint in the spatial module, here, we fail to do that.\n\nA choice quote from the email:\n\n\nI\u2019ve spent more time figuring this out than I thought I\u2019d have to and think I\nmust be missing something obvious, and am wondering if someone can help me out.\n\n "
        },
        {
            "id": "comment-15318482",
            "author": "Ryan Ernst",
            "date": "2016-06-07T13:44:16+0000",
            "content": "Another reason to have good defaults in core is that core is compiled with the compact1 profile, so it can be used on mobile devices, while the other modules are all compiled with compact2. I think having basic geo and ip addresses support on mobile devices would be good? "
        },
        {
            "id": "comment-15318518",
            "author": "David Smiley",
            "date": "2016-06-07T14:05:21+0000",
            "content": "RE the user's email: It does illustrate how much simpler LatLonPoint (and GeoPointField, and probably the Geo3D one) are to use than the stuff in spatial-extras with its multi-layer dependencies.  Good work to all those that helped make this possible!  And now the more complicated spatial is put off to the side in \"spatial-extras\".  Users looking at Lucene fresh will surely look in \"spatial\" for spatial stuff first before looking in other spatial modules, and I believe before looking in Lucene-core.  I mean... if we have spatial module(s), who would think to go looking in core?  We have other modules that have their stuff apart in their own modules so I don't see why a user would expect any different for spatial.  I think we should furthermore add a bit of documentation to the spatial module, spatial-extras module, to LatLonPoint, and perhaps to GeoPointField to expressly point to LatLonPoint as the go-to recommended spatial implementation.\n\nRE compact1/compact2:  I am not familiar with this stuff.  Are you saying that only Lucene-core will even work on a mobile device?  If so that sucks... maybe the spatial module should be compiled with compact1 too!  Let this be a goal to do what we need to do to our modules so that as many as reasonably can can get to be compiled with compact1. "
        },
        {
            "id": "comment-15318617",
            "author": "Michael McCandless",
            "date": "2016-06-07T14:57:20+0000",
            "content": "I mean... if we have spatial module(s), who would think to go looking in core?\n\nHmm I see the situation reversed.  I suspect new users would start with Lucene's core, expecting to find usable defaults there for common use cases, as we have done with our codecs.  And only if they can't find what they need there, would they say \"hmm, where else can I look\".  We don't see users today being confused that our best default codec is in core, not in the codecs module.  It just works \n\nWith LatLonPoint in core we would have javadocs there that point you to the spatial/spatial-extras to do more expert things like shape indexing.\n\nExperts can go digging through other modules, but the 90% use cases really should be covered by core: simple things should be simple and complex things should be possible.\n\nI think this transition (putting a good default for a common use case in core) is maybe also just a sign of enough maturity: spatial has gone through so many iterations over the years, and I think finally this incarnation meets all the right criteria to be a good core default.  Really the addition of dimensional points to Lucene's core already reflects this maturity.\n\nIn fact, I think there are other modules that have \"matured\" classes that would make good defaults in core: StandardAnalyzer has progressed so much (it now in fact does implement a Unicode \"standard\") that it is a great default analyzer; SimpleQueryParser would be a great default; maybe PostingsHighlighter, etc. "
        },
        {
            "id": "comment-15318653",
            "author": "Michael McCandless",
            "date": "2016-06-07T15:14:08+0000",
            "content": "StandardAnalyzer has progressed so much (it now in fact does implement a Unicode \"standard\") that it is a great default analyzer\n\nI opened LUCENE-7318 for this ... I think it's the most immediately compelling case. "
        },
        {
            "id": "comment-15318679",
            "author": "Adrien Grand",
            "date": "2016-06-07T15:30:33+0000",
            "content": "The idea of putting solid + commonly useful features in core works for me, it would probably be more user-friendly indeed. But it looks different from what seemed to me to be the consensus (or maybe I misunderstood what it was!) until now, ie. only having the common denominator in core and then having on module per \"feature\" like highlighting, geo search or joins.\n\nI am +0 on moving these classes to core. I initially thought this is something we could do for 6.1 but since it proved a bit controversial, I suggest that we only move classes for 6.2. "
        },
        {
            "id": "comment-15318797",
            "author": "Nicholas Knize",
            "date": "2016-06-07T16:23:39+0000",
            "content": "Like the class naming discussion I'm fine w/ whatever agreement can be reached.  Things always change. FWIW this was my experience early on:\n\nI suspect new users would start with Lucene's core, expecting to find usable defaults there for common use cases\n\nWhen I first started looking at spatial I immediately looked in the spatial module for everything spatial and assumed (by the name) the core module contained foundation dependencies required by other modules. I've also spoke with quite a few spatial shops that have been interested in contributing but are very confused by the location of lucene's spatial classes (clearly something that needs to be fixed). Like many devs they assume package and module names are self explanatory and don't RTFM (or is it RTFJD?) until they're totally confused. Unfortunately, the spatial javadocs didn't help them.\n\n...we would have javadocs there that point you to the spatial/spatial-extras to do more expert things\n\nThis approach has always been fine w/ me - again, javadocs. It certainly wasn't the agreed approach earlier when I proposed promoting the postings based GeoPointField (which has the same public API) to core way back when. Back then even basic spatial was considered a \"special use-case\" that belonged in a spatial module. It sounds like this view has partially changed?  (at least for \"good default\" spatial capability)\n\nIt's clearly important we make Lucene easier to use for the common use cases and by hiding away LatLonPoint in the spatial module, here, we fail to do that.\n\nI totally agree but part of this comment scares me. Just for my own understanding how do modules \"hide away\" good functionality (especially if they're well named)? If this is true isn't it a disservice to organize good/advanced/(insert adjective) functionality in separate modules?\n\n+0 to move specifically to core.\n+1 to postpone moving until an agreement can be reached. "
        },
        {
            "id": "comment-16519621",
            "author": "Nicholas Knize",
            "date": "2018-06-21T17:37:56+0000",
            "content": "InetAddressPoint was already refactored some time ago. Here's a simple patch that refactors the following remaining classes (along with their tests) from sandbox to core:\n\n\n\tLatLonPoint\n\tLatLonPointDistanceQuery\n\tLatLonPointInPolygonQuery\n\tLatLonPointDistanceComparator\n\tLatLonPointSortField\n\tLatLonDocValuesField\n\tLatLonDocValuesDistanceQuery\n\tLatLonDocValuesBoxQuery\n\tNearestNeighbor\n\n\n "
        },
        {
            "id": "comment-16519623",
            "author": "Nicholas Knize",
            "date": "2018-06-21T17:43:39+0000",
            "content": "Since its been a few years and this discussion has resurfaced I thought I'd go ahead and submit a quick patch to refactor the LatLon classes out of sandbox into core. Let me know if there are strong opinions against moving to core over the spatial module and/or whether or not we should continue to wait on this much longer. "
        },
        {
            "id": "comment-16519825",
            "author": "Robert Muir",
            "date": "2018-06-21T22:46:34+0000",
            "content": "+1 patch looks good. "
        },
        {
            "id": "comment-16520273",
            "author": "Lucene/Solr QA",
            "date": "2018-06-22T11:34:53+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 12 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   0m 26s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 52s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 52s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 38s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 27s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 27s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  31m 27s \n  core in the patch passed.  \n\n\n +1 \n  unit  \n   2m 16s \n  sandbox in the patch passed.  \n\n\n  \n   \n  39m 21s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-7314 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12928654/LUCENE-7314.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene2-us-west.apache.org 4.4.0-112-generic #135-Ubuntu SMP Fri Jan 19 11:48:36 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 25e7631 \n\n\n ant \n version: Apache Ant(TM) version 1.9.6 compiled on July 8 2015 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/37/testReport/ \n\n\n modules \n C: lucene lucene/core lucene/sandbox U: lucene \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/37/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n "
        },
        {
            "id": "comment-16520482",
            "author": "Adrien Grand",
            "date": "2018-06-22T15:12:17+0000",
            "content": "+1 in general, but maybe we should keep LatLonPoint#nearest in sandbox (in its own class for instance) given that it relies on implementation details of the current codec. "
        },
        {
            "id": "comment-16523865",
            "author": "Nicholas Knize",
            "date": "2018-06-26T15:28:32+0000",
            "content": "Thanks Adrien Grand! The updated patch leaves NearestNeighbor query classes in sandbox and moves LatLonPoint#nearest as a static method in new utility class LatLonPointPrototypeQueries#nearest "
        },
        {
            "id": "comment-16524727",
            "author": "Lucene/Solr QA",
            "date": "2018-06-27T07:50:57+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 12 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 13s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m  0s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m  0s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m 54s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   0m 48s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   0m 48s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  26m 43s \n  core in the patch passed.  \n\n\n +1 \n  unit  \n   1m 19s \n  sandbox in the patch passed.  \n\n\n  \n   \n  34m 10s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n LUCENE-7314 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12929205/LUCENE-7314.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-LUCENE-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / a929003 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_172 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-LUCENE-Build/41/testReport/ \n\n\n modules \n C: lucene lucene/core lucene/sandbox U: lucene \n\n\n Console output \n https://builds.apache.org/job/PreCommit-LUCENE-Build/41/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n "
        },
        {
            "id": "comment-16525142",
            "author": "Adrien Grand",
            "date": "2018-06-27T14:25:29+0000",
            "content": "Let's move NearestNeighbor and LatLonPointPrototypeQueries to the org.apache.lucene.search package? Otherwise +1 "
        },
        {
            "id": "comment-16526373",
            "author": "Michael McCandless",
            "date": "2018-06-28T14:37:17+0000",
            "content": "+1 to the patch after moving LatLonPointPrototypeQueries to oal.search; thanks Nicholas Knize! "
        },
        {
            "id": "comment-16556398",
            "author": "ASF subversion and git services",
            "date": "2018-07-25T23:23:20+0000",
            "content": "Commit 6ab3ff83923b48d18d885d46ac0ebccf8d526f91 in lucene-solr's branch refs/heads/master from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6ab3ff8 ]\n\nLUCENE-7314: Graduate LatLonPoint and query classes to core "
        },
        {
            "id": "comment-16556423",
            "author": "ASF subversion and git services",
            "date": "2018-07-25T23:53:22+0000",
            "content": "Commit 950b7b6b1b92849721eaed50ecad9711199180e8 in lucene-solr's branch refs/heads/branch_7x from Nicholas Knize\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=950b7b6 ]\n\nLUCENE-7314: Graduate LatLonPoint and query classes to core "
        },
        {
            "id": "comment-16558854",
            "author": "Adrien Grand",
            "date": "2018-07-26T20:25:06+0000",
            "content": "Nicholas Knize Shall we resolve this issue now? "
        }
    ]
}