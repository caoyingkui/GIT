{
    "id": "LUCENE-916",
    "title": "It is not possible to sort with sorttype auto on a field that does not exist",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "1.9,                                            2.0.0,                                            2.1,                                            2.2",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "When sorting with type auto on a field that does not exist, a RuntimeException is thrown from FieldCacheImpl.java line 346. This is especially a problem when using MultiSearcher. This issue is related to: http://issues.apache.org/jira/browse/LUCENE-374",
    "attachments": {
        "TestMultiSearcherAutoSort.java": "https://issues.apache.org/jira/secure/attachment/12359194/TestMultiSearcherAutoSort.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-06-07T16:01:26+0000",
            "content": "I'm also having this problem. I'm trying to use Compass and originally reported the problem in their forum: http://forums.opensymphony.com/thread.jspa?threadID=87305&tstart=0\n\nBut I agree this seems more like a problem with Lucene itself. I have written a junit testcase that only uses Lucene objects that generates the same exception I was getting in Compass:\n\npublic class CompassSortTest extends TestCase\n{\n\tpublic void testLuceneMultiSearcherSort() throws Exception\n\t{\n\t\tRAMDirectory dir1 = new RAMDirectory();\n\t\tRAMDirectory dir2 = new RAMDirectory();\n\n\t\tAnalyzer analyzer = new StandardAnalyzer();\n\t\tIndexWriter writer1 = new IndexWriter(dir1, analyzer, true);\n\t\twriter1.optimize();\n\t\twriter1.close();\n\n\t\tIndexWriter writer2 = new IndexWriter(dir2, analyzer, true);\n\t\tDocument doc = new Document();\n\t\tdoc.add(new Field(\"displayName\", \"obj1\", Store.YES, Index.TOKENIZED));\n\t\tdoc.add(new Field(\"id\", \"1\", Store.YES, Index.UN_TOKENIZED));\n\t\tdoc.add(new Field(\"sortField\", \"3\", Store.NO, Index.UN_TOKENIZED));\n\t\twriter2.addDocument(doc);\n\t\twriter2.optimize();\n\t\twriter2.close();\n\n\t\tIndexSearcher searcher1 = new IndexSearcher(dir1);\n\t\tIndexSearcher searcher2 = new IndexSearcher(dir2);\n\t\tMultiSearcher multiSearcher = new MultiSearcher(new Searchable[] \n{searcher1, searcher2}\n);\n\t\tQueryParser parser = new QueryParser(\"displayName\", analyzer);\n\t\tQuery query = parser.parse(\"o*\");\n\t\tSort sort = new Sort(\"sortField\");\n\t\tHits hits = multiSearcher.search(query, sort);\n\n\t\tassertEquals(\"2\", hits.doc(0).get(\"id\"));\n\t\tassertEquals(\"3\", hits.doc(1).get(\"id\"));\n\t\tassertEquals(\"1\", hits.doc(2).get(\"id\"));\n\t}\n}\n\nThe problem occurs when using a MultiSearcher that has at least one IndexSearcher tied to a Directory with no documents in it. If I have 2 IndexSearchers, each with 1 document the test passes. It is only when one of the IndexSearchers has no documents that the test fails. The exception I get is \"no terms in field sortField - cannot determine sort type\" on FieldCacheImpl.java line 331. ",
            "author": "Ben Dotte",
            "id": "comment-12502398"
        },
        {
            "date": "2007-06-07T16:08:14+0000",
            "content": "Attached a test case to reproduce this issue (Ben Dotta's test slightly modified) ",
            "author": "Daan de Wit",
            "id": "comment-12502402"
        },
        {
            "date": "2007-06-07T16:11:12+0000",
            "content": "IMO, auto sorting should pretty much never be used.\nApplications should know the types of their fields, and should not let Lucene guess (it will sometimes guess incorrectly). ",
            "author": "Yonik Seeley",
            "id": "comment-12502403"
        },
        {
            "date": "2007-06-07T16:23:13+0000",
            "content": "We have several sortable overviews in our application in which the user can search, these overviews are backed by Compass and the code that implements the sorting and searching is pretty much abstracted. I can avoid using auto sort, but then I have to carry around the sort type of each column, that's something I wanted to avoid. I already need to carry the field name corresponding to each column so it's not that big of a deal, but it just doesn't feel right to me. ",
            "author": "Daan de Wit",
            "id": "comment-12502411"
        },
        {
            "date": "2007-06-07T16:28:20+0000",
            "content": "We're in the same boat as Daan, our searching/sorting code is also abstracted away and does not know the types. But we could also include the types without much difficulty.. based on Yonik's statement and the recommendation by Compass, I would say that is probably the best route for us.\n\nOn the other hand, if Lucene is going to support automatic sorting, I think it should be supported regardless of whether an individual IndexSearcher is being used vs. a MultiSearcher. ",
            "author": "Ben Dotte",
            "id": "comment-12502416"
        },
        {
            "date": "2007-06-07T16:56:07+0000",
            "content": "> if Lucene is going to support automatic sorting, I think it should be supported regardless of whether an individual IndexSearcher is being used vs. a MultiSearcher.\n\nI agree.  Perhaps picking any type in the AUTO sorting code would work since it won't yield any hits. ",
            "author": "Yonik Seeley",
            "id": "comment-12502425"
        },
        {
            "date": "2007-06-07T16:57:25+0000",
            "content": "> Perhaps picking any type in the AUTO sorting code would work since it won't yield any hits.\n\nOops, that's not true since there could be plenty of hits in an index, but none of them may have that particular field indexed. ",
            "author": "Yonik Seeley",
            "id": "comment-12502426"
        },
        {
            "date": "2009-01-04T16:42:06+0000",
            "content": "I think I can probably come up a solution to this after LUCENE-1483 goes in. I've run into it myself, and its annoying. ",
            "author": "Mark Miller",
            "id": "comment-12660595"
        },
        {
            "date": "2009-06-02T19:40:48+0000",
            "content": "We're removing SortField.AUTO in 3.0. ",
            "author": "Michael McCandless",
            "id": "comment-12715642"
        }
    ]
}