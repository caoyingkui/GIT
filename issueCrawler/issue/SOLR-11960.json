{
    "id": "SOLR-11960",
    "title": "Add collection level properties",
    "details": {
        "labels": "",
        "priority": "Blocker",
        "components": [],
        "type": "New Feature",
        "fix_versions": [
            "7.3",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Solr has cluster properties, but no easy and extendable way of defining properties that affect a single collection. Collection properties\u00a0could be stored in a single zookeeper node per collection, making it possible to trigger zookeeper watchers for only those Solr nodes that have cores of that collection.",
    "attachments": {
        "SOLR-11960.patch": "https://issues.apache.org/jira/secure/attachment/12909860/SOLR-11960.patch",
        "SOLR-11960_2.patch": "https://issues.apache.org/jira/secure/attachment/12914561/SOLR-11960_2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-09T00:48:42+0000",
            "content": "Here's a proposed patch for collection properties and a new collection admin command that allows changing those properties:\u00a0SOLR-11960.patch ",
            "author": "Peter Rusko",
            "id": "comment-16357769"
        },
        {
            "date": "2018-02-13T01:16:17+0000",
            "content": "Thanks Peter Rusko, this looks very good. Some comments:\n\n  public Map<String,String> getCollectionProperties(final String collection) {\n    Map<String,String> properties = watchedCollectionProps.get(collection);\n    if (properties == null) {\n      try {\n        properties = fetchCollectionProperties(collection, null);\n      } catch (Exception e) {\n        throw new SolrException(ErrorCode.SERVER_ERROR, \"Error reading collection properties\", e);\n      }\n    }\n\n    return properties;\n  }\n\n\nI believe you are intentionally not adding the fetched properties back to the watchedCollectionProps (because there is no watch, they would get stale). Could you add a comment about it? I spent some time trying to figure out if that was intentional or no. Also, could you add javadocs to this method?\n In PropsWatcher.refreshAndWatch() you have this code:\n\n} catch (KeeperException e) {\n        LOG.error(\"Unwatched collection: [{}]\", coll, e);\n\n\nWhat do you mean there with \u201cUnwatched collection\u201d?\n\nIf I understand correctly, on the first time someone calls registerCollectionPropsWatcher for a particular zkStateReader and collection, the watcher will be executed, but from then on, that\u2019s not going to happen again. Is this correct? If so, I believe we should make that consistent. Components don\u2019t necessarily know in which order they are loaded and this may generate some strange behavior, also, multiple cores could belong to the same collection in the same node and only the first one will trigger the watcher on the registration. Maybe PropsWatcher.refreshAndWait() should receive a boolean parameter and use that to know if it has to notify or not the watchers. Then, when you are doing new PropsWatcher(collection).refreshAndWatch(); you\u2019d use false, and true from PropsWatcher.process(\u2026). WDYT?\n\nIn refreshAndWatch() you are synchronizing on getUpdateLock(), which sounds like overkill. I\u2019m wondering if we really need any synchronization here since we are just submitting tasks to a multi-thread Executor.\n\nShould removeCollectionPropsWatcher also remove the collection from collectionPropsWatches in case of canBeRemoved()==true?\n\nCould you add a test that validates that collection properties are correctly backed up and restored when using BACKUP and RESTORE APIs? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16361679"
        },
        {
            "date": "2018-02-20T00:07:55+0000",
            "content": "Thanks for the review, here's the updated patch:\u00a0SOLR-11960.patch ",
            "author": "Peter Rusko",
            "id": "comment-16369607"
        },
        {
            "date": "2018-02-21T00:40:24+0000",
            "content": "Thanks Peter Rusko, patch looks great. I modified CollectionPropsTest.testReadWrite to check immediately, since we are getting the value directly from ZooKeeper the change should be immediate, there is no need to wait. I also added a test, CollectionPropsTest.testReadWriteCached that adds a watcher, so that we do read the cached state. For that case we do need to wait until the value is asynchronously set.\nI\u2019m going to upload a patch with my latest changes and commit shortly. Can you update the docs for this new command? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16370797"
        },
        {
            "date": "2018-02-21T13:58:32+0000",
            "content": "+1 for collection properties.\n\nI recently spent time with Gus Heck on alias metadata (== \"properties\"). \u00a0I'm having the sinking feeling now\u00a0that we should have done collection properties more generally given that an \"alias\" is a collection alias, and so arguably should use the same mechanism. \u00a0With this feature here, SOLR-11960, I'm wondering if we even need alias properties (nor an API for it) at all? \u00a0:-/ ",
            "author": "David Smiley",
            "id": "comment-16371432"
        },
        {
            "date": "2018-02-21T14:36:56+0000",
            "content": "Interesting notion. As far as what we did with time routed aliases, I think it's probably less confusing the way we did it to have alias level metadata/props, since the time routing is at the alias level, and collections come and go over time. The ability to keep metadata at multiple levels of abstraction is good, what might be interesting is a way to combine and keep metadata all in one api. One could identify the targets (subjects) via URIs that correspond to the API such as http://server.example.net:8983/solr/meta/aliases/aliasname http://server.example.net:8983/solr/meta/nodes/nodename http://server.example.net:8983/solr/meta/collections/collectionName/shards/shardname.... etc. basically make the entire system addressable. Also maybe coordinate that with the v2 api?\u00a0 Just brainstorming, I haven't figured out how that would relate to zookeeper. A unified and consistent way of handling metadata sounds potentially\u00a0helpful now that we are gaining a 3rd metadata type. Might be possible to give metadata addressable java objects a metaURI() method that automatically provides the key for that object in a global metadata store... ",
            "author": "Gus Heck",
            "id": "comment-16371487"
        },
        {
            "date": "2018-02-23T04:31:20+0000",
            "content": "BTW for this issue I personally would have chosen to store collection properties on the state.json for the collection rather than put this somewhere else.  Consider all the other internal properties which are already in state.json (e.g. replicationFactor etc.).  Was this considered?  Why not?  Pros are simplicity of backup and no need to delete with collection deletion, and using the same watcher mechanism?\n\nI think it's probably less confusing the way we did it to have alias level metadata/props, since the time routing is at the alias level, and collections come and go over time\n\nEhh; debatable.  I think it's worse for maintenance, docs, and our users, to unnecessarily increase the API surface area (plus rather different plumbing too) by having both.  Since aliases operate in the same namespace as collections, I don't think of it as separate. ",
            "author": "David Smiley",
            "id": "comment-16373916"
        },
        {
            "date": "2018-02-24T18:02:30+0000",
            "content": "\u00a0Since aliases operate in the same namespace as collections, I don't think of it as separate.\nInteresting point, and kinda\u00a0points out\u00a0the fact that \"alias\" has been co-opted into 2 roles, alternate names for collections and collection grouping. This creates a level of syntactic sugar (query a group just like a single collection) but grouping and re-naming really are separate concepts. To handle alternate names for groups of collections you would need recursive alias resolution.\u00a0 ",
            "author": "Gus Heck",
            "id": "comment-16375698"
        },
        {
            "date": "2018-03-01T00:45:57+0000",
            "content": "BTW for this issue I personally would have chosen to store collection properties on the state.json for the collection rather than put this somewhere else. Consider all the other internal properties which are already in state.json (e.g. replicationFactor etc.). Was this considered? Why not? Pros are simplicity of backup and no need to delete with collection deletion, and using the same watcher mechanism?\nYes, I considered it. There are two reasons for choosing a separate json. First the frequency of the change is different. Collection properties would change way less frequently than state.json and not parsing out\u00a0the properties blob on every state change\u00a0seemed the right way to go. But more importantly, state.json changes should go via the overseer, which seemed to be a bit of an overkill here. ",
            "author": "Peter Rusko",
            "id": "comment-16381323"
        },
        {
            "date": "2018-03-02T23:59:52+0000",
            "content": "Thanks Peter Rusko. I moved the property in the V2 API to be per-collection, and also mapped the parameters propertyName->name and propertyValue->value, so the V2 API would look like:\n\ncurl -X POST \"http://localhost:8983/v2/c/gettingstarted\" -d '{set-collection-property:{name:\"foo\", value:bar}}' \n\n ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16384341"
        },
        {
            "date": "2018-03-06T01:46:51+0000",
            "content": "Committed.\nmaster: c1a44251fefabb0ed743f1bdaf287ac89ac38758\nbranch_7x: cfafc47e9c9229fe94b0d367249db66ec6b54132\n\nThanks Peter! ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16387129"
        },
        {
            "date": "2018-03-06T14:29:22+0000",
            "content": "The test failure described at SOLR-12061 started happening at the c1a44251fe commit on this issue. ",
            "author": "Steve Rowe",
            "id": "comment-16387861"
        },
        {
            "date": "2018-03-06T16:17:16+0000",
            "content": "It looks like there is no consumer to this API (yet) but watchers are being created anyway? We should avoid that until we have an actual user for this API. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16388024"
        },
        {
            "date": "2018-03-06T17:30:37+0000",
            "content": "The test failure described at SOLR-12061 started happening at the c1a44251fe commit on this issue.\nThanks Steve, I'll take a look\nIt looks like there is no consumer to this API (yet) but watchers are being created anyway? We should avoid that until we have an actual user for this API.\nI think you are right, there is no need to register the watch on registerCore. Users of this feature can add a watch themselves by calling registerCollectionPropsWatcher. That's what you mean, right? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16388148"
        },
        {
            "date": "2018-03-06T17:45:13+0000",
            "content": "I think you are right, there is no need to register the watch on registerCore. Users of this feature can add a watch themselves by calling registerCollectionPropsWatcher. That's what you mean, right?\n\nYes, but that is not sufficient. We need to take care of ZK reconnects as well. So we should re-create the collection prop watchers in createClusterStateWatchersAndUpdate method. ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16388178"
        },
        {
            "date": "2018-03-10T15:57:49+0000",
            "content": "Copying an excerpt of my comment from SOLR-11617:\n\nThe paint is still wet on SOLR-11960, so to speak. Before it's API gets set in stone (by a 7.3 release), perhaps now is the last moment to give the API more of a bulk parameter feel (like here for aliases) instead of limited to one at a time? Even if the code can only handle one pair right now, at least the API would be what we want it to be.\n\nYou can see how this is done with alias metadata (soon to be renamed properties).  Lets make such a change ASAP; ehh? ",
            "author": "David Smiley",
            "id": "comment-16394237"
        },
        {
            "date": "2018-03-10T19:28:31+0000",
            "content": "Marking this as blocker of 7.3 to make sure we address all the comments before the release ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16394309"
        },
        {
            "date": "2018-03-12T13:20:25+0000",
            "content": "Admittedly the cluster properties API is similarly handicapped... so if there is no last minute change here it's at least consistent with cluster properties :-/   I suppose both cluster properties & collection properties & alias properties could be improved to support both single value name=value invocation, and a bulk style (using a prefix with wildcard for v1 or parent object for v2)... although it's a bit redundant to have both instead of the more capable bulk style.  Perhaps history/legacy must tie our hands here and we eventually arrive at both. ",
            "author": "David Smiley",
            "id": "comment-16395225"
        },
        {
            "date": "2018-03-13T19:05:28+0000",
            "content": "David Smiley I think both would be nice. For v1 APIs, the single property at a time format is simpler and more verbose. The multiple at a time is more \"expert\" (in V2 it doesn't matter). Also, for collection properties we should add support for adding properties at collection creation time. So, I'd suggest we keep the current format and add the bulk one for collection and cluster properties as a separate Jira. Could be something like:\n\n&collectionprop.KEY=VALUE&collectionprop.KEY_2=VALUE_2...\n\n\nThe same parameters could work for action=CLUSTERPROP and for action=CREATE. \n\nSimilarly, we could have\n\n&clusterprop.KEY=VALUE&clusterprop.KEY_2=VALUE_2...\n\n\nWDYT? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16397478"
        },
        {
            "date": "2018-03-13T19:32:38+0000",
            "content": "The multiple at a time is more \"expert\" (in V2 it doesn't matter)\n\nWhat do you mean by \"in V2 it doesn't matter\"?  Maybe verbosity... as V2 is already verbose which is fine since it's JSON?\n\nSo, I'd suggest we keep the current format and add the bulk one for collection and cluster properties as a separate Jira\n\n+1     We needn't consider this issue a blocker nor open anymore. ",
            "author": "David Smiley",
            "id": "comment-16397514"
        },
        {
            "date": "2018-03-13T19:46:36+0000",
            "content": "V2 is already verbose which is fine since it's JSON?\nYes, sorry, that's what I meant. In V2 it's just a map, not an odd parameter name format ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16397538"
        },
        {
            "date": "2018-03-14T19:02:09+0000",
            "content": "I've updated the patch.\u00a0Removed the watcher creation/deletion when registering and unregistering the core and I'm also re-registering watchers in\u00a0createClusterStateWatchersAndUpdate now. ",
            "author": "Peter Rusko",
            "id": "comment-16399125"
        },
        {
            "date": "2018-03-15T09:48:47+0000",
            "content": "+1 We needn't consider this issue a blocker nor open anymore.\nCan this be closed and the Blocker tag removed? ",
            "author": "Alan Woodward",
            "id": "comment-16400136"
        },
        {
            "date": "2018-03-15T12:13:27+0000",
            "content": "We still need to address Shalin's comments before releasing this. I'll resolve later today ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16400304"
        },
        {
            "date": "2018-03-15T16:23:16+0000",
            "content": "Thanks Peter. The patch looks good to me. Shalin Shekhar Mangar, I believe your comments were addressed.\n\nI'll commit shortly ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16400660"
        },
        {
            "date": "2018-03-15T19:22:23+0000",
            "content": "Commit 67dab22f295c8a9966c3c35c722f2f28626d7ec8 in lucene-solr's branch refs/heads/master from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=67dab22 ]\n\nSOLR-11960: Don't add property listeners on core registration ",
            "author": "ASF subversion and git services",
            "id": "comment-16400989"
        },
        {
            "date": "2018-03-15T19:26:15+0000",
            "content": "Commit 328587b993f76e5bc8cc72d1fc6262f883a8ab66 in lucene-solr's branch refs/heads/branch_7x from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=328587b ]\n\nSOLR-11960: Don't add property listeners on core registration ",
            "author": "ASF subversion and git services",
            "id": "comment-16400993"
        },
        {
            "date": "2018-03-15T19:28:39+0000",
            "content": "Commit 3b8eb6cd3e53727812f82711b9aa96d6f511e184 in lucene-solr's branch refs/heads/branch_7_3 from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3b8eb6c ]\n\nSOLR-11960: Don't add property listeners on core registration ",
            "author": "ASF subversion and git services",
            "id": "comment-16400998"
        },
        {
            "date": "2018-03-15T20:05:01+0000",
            "content": "Resolving. Sorry for the delay Alan! ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16401035"
        },
        {
            "date": "2018-03-16T02:39:28+0000",
            "content": "Shalin Shekhar Mangar, I believe your comments were addressed\n\nLooks good, thanks! ",
            "author": "Shalin Shekhar Mangar",
            "id": "comment-16401398"
        }
    ]
}