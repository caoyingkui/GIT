{
    "id": "LUCENE-2590",
    "title": "Enable access to the freq information in a Query's sub-scorers",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The ability to gather more details than just the score, of how a given\ndoc matches the current query, has come up a number of times on the\nuser's lists.  (most recently in the thread \"Query Match Count\" by\nRyan McV on java-user).\n\nEG if you have a simple TermQuery \"foo\", on each hit you'd like to\nknow how many times \"foo\" occurred in that doc; or a BooleanQuery +foo\n+bar, being able to separately see the freq of foo and bar for the\ncurrent hit.\n\nLucene doesn't make this possible today, which is a shame because\nLucene in fact does compute exactly this information; it's just not\naccessible from the Collector.",
    "attachments": {
        "LUCENE-2590.patch": "https://issues.apache.org/jira/secure/attachment/12451517/LUCENE-2590.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-08-08T14:13:31+0000",
            "content": "Attached patch.\n\nThere were two things to fix.  First, I added Scorer.freq() so that\nyou could get the freq of the current match.  Second, I added a way to\nvisit all sub-scorers for a given Scorer.  The functionality is\ndefinitely expert level \u2013 you'll have to make a custom Collector that\ngathers these stats & saves them away in your PQ, to use this \"for\nreal\".  But it's a good start I think; there's a simple test case\nshowing how it works. ",
            "author": "Michael McCandless",
            "id": "comment-12896364"
        },
        {
            "date": "2010-08-14T14:07:10+0000",
            "content": "Another iter of this patch; I think it's ready to commit.  I commented out BooleanScorer's handling of required=true since we never use it (but left TODOs in there to re-enable this code if/when we go back to sending required clauses to BooleanScorer).  I also added CHANGES entry. ",
            "author": "Michael McCandless",
            "id": "comment-12898589"
        },
        {
            "date": "2010-08-14T19:59:03+0000",
            "content": "Mike, eventually we are getting this feature - I guess many are waiting for this!\n\nI wonder if we really need to pass the BooleanClause.Occur to the visit method of if we rather defined a visit method for each boolean relationship. We could make it an abstract class and if you are not interested in Prohibited or Optional scorers you can simply leave the method empty. JIT compiler might be able to optimize this method calls away. if we go this way I'd make VisitSubScorer abstract  \n\npublic abstract class VisitSubScorer {\n   public void visitRequired(Query parent, Query child, Scorer childScorer){}\n   public void visitOptional(Query parent, Query child, Scorer childScorer){}\n   public void visitProhibited(Query parent, Query child, Scorer childScorer){}\n}\n\n\n\nI we could also make parent and child <P extends Query, C extends Query, S extends Scorer> in certain (I have to admit rather rare) situations this could make users code simpler as they might know how their queries look like and the cast is done implicitly. For all others nothing really changes though. Its just an idea and I thought I'd mention it.\n ",
            "author": "Simon Willnauer",
            "id": "comment-12898638"
        },
        {
            "date": "2010-08-16T11:07:22+0000",
            "content": "OK I like the 3 methods instead of the single method with BooleanClause.OCCUR param.\n\nThe heavy generics would be useful for apps that eg have a fixed structure to all Queries right?  Eg if you know your app only ever makes BooleanQuery w/ TermQuery sub-classes, you'd parameterize the instantiation as <BooleanQuery,TermQuery,TermScrorer> (hmm though TermScorer isn't public; maybe just leave S as Scorer)?  I think this makes sense.\n\nI'll work on these but it'll be a little while \u2013 I'm out on \"vacation\". ",
            "author": "Michael McCandless",
            "id": "comment-12898854"
        },
        {
            "date": "2010-08-16T17:34:40+0000",
            "content": "\nThe heavy generics would be useful for apps that eg have a fixed structure to all Queries right? Eg if you know your app only ever makes BooleanQuery w/ TermQuery sub-classes, you'd parameterize the instantiation as <BooleanQuery,TermQuery,TermScrorer> (hmm though TermScorer isn't public; maybe just leave S as Scorer)? I think this makes sense.\n\njep, this is exactly what I was aiming at. Scorer might be an exception but in general this it what you would do. A special case where I could think of is FuzzyQuery where you can tell from the rewrite method what kind of query will be constructed and where this information could be useful (think of spellchecking of similar usecases)\n\nI'll work on these but it'll be a little while - I'm out on \"vacation\".\nGood to hear, enjoy! I might update you patch accordingly before you come back though!\n\nsimon ",
            "author": "Simon Willnauer",
            "id": "comment-12899000"
        },
        {
            "date": "2010-08-17T10:50:59+0000",
            "content": "Good to hear, enjoy! I might update you patch accordingly before you come back though!\n\nPlease do!!  Feel free  ",
            "author": "Michael McCandless",
            "id": "comment-12899370"
        },
        {
            "date": "2010-08-22T18:54:14+0000",
            "content": "Attaching a slightly new version of the patch incorporating roughly the idea of 3-distinct methods. Yet, having 3 methods instead of one was kind of ugly to implement and I didn't want to add switch case statements to visitSubScorer methods just to call a different method.\n\nAnyway, I changed the 3  parameter methods to take a single argument holding all required information. This is way more extensible and flexible since we don't need to change a method signature just to add a new param. \nI am not sure about the 3 different callbacks but I thought I would leave it in the patch for now.\n\nParent, Child and Scorer became generic arguments.\n\nsimon  ",
            "author": "Simon Willnauer",
            "id": "comment-12901201"
        },
        {
            "date": "2010-08-23T10:32:29+0000",
            "content": "I think the API changes are too complex/heavyweight here!\n\nWith this new patch we've added Scorer.ScorerVisitor,\nScorer.SubScorerCallback, Scorer.ScorerContext, and two new\nScorer.accept methods.\n\nThe original patch added only a 1-method interface\n\"VisitSubScorer\".\n\nCan't we simplify this?  I liked your original proposal, breaking out\nexplicit visitRequired, visitOptional, etc., but keeping this as a\nsingle class.  Or we can go back to the original patch (just passing\nan arg expressing the relationship)?\n\nI also don't like the \"context\" approach, setting attrs on a shared\ninstance.  This is basically setting up arguments to pass to the\ncallback \u2013 why not simply pass these arguments (on the stack)\ninstead?\n\nI don't like the \"accept\" name \u2013 it's very generic \u2013 can we put this\nback to visitSubScorers or something that makes it clear you're\nvisiting the full sub-tree (visitScorers?  visitScorerTree?)? ",
            "author": "Michael McCandless",
            "id": "comment-12901344"
        },
        {
            "date": "2010-08-23T11:01:43+0000",
            "content": "\nCan't we simplify this? I liked your original proposal, breaking out\nexplicit visitRequired, visitOptional, etc., but keeping this as a\nsingle class. Or we can go back to the original patch (just passing\nan arg expressing the relationship)?\n\nThe problem leading to this quiet heavy change was that I wanted to call a specific function for each Boolean.Occur relationship. That turned out to be ugly since I had to either add a switch / case statement to each of the visitSubScorers methods or add  a visitSubScorers method for each relationship. I didn't like that at all so I moved forward to specify a callback for each relationship. I see your point of being to heavy though. I guess we should go back to the original approach since I don't want to decide it on a switch case basis.\n\n\n also don't like the \"context\" approach, setting attrs on a shared\ninstance. This is basically setting up arguments to pass to the\ncallback - why not simply pass these arguments (on the stack)\ninstead?\nPassing it on the stack has one limitation which is that if I want to pass more information around in the future I need to change the interface while I only add a member to the \"context\" if I pass it that way. Another reason was that if I want to pass custom info  from a custom query scorer to another I can not do that since there is not context. \n\nOne other solution would be to reduce the interface back to:\n\npublic abstract class ScorerVisitor<P extends Query, C extends Query, S extends Scorer>{\n   public Occur relationship;\n   public abstract void visit(P parent, C child, S childScorer);\n}\n\n\n\nbut hold the relationship as an attribute that way we don't  have it in the method signature which I don't like though.\n\n\n\nI don't like the \"accept\" name - it's very generic - can we put this\nback to visitSubScorers or something that makes it clear you're\nvisiting the full sub-tree (visitScorers? visitScorerTree?)?\n\nI'm ok with visitScorers ",
            "author": "Simon Willnauer",
            "id": "comment-12901349"
        },
        {
            "date": "2010-08-23T17:40:37+0000",
            "content": "another iteration moving back to the originally discussed approach. The switch case block shouldn't be any bottleneck since the visitor should not run for each scored doc anyway.\n ",
            "author": "Simon Willnauer",
            "id": "comment-12901500"
        },
        {
            "date": "2010-08-24T12:21:33+0000",
            "content": "Patch looks good!  Thanks, Simon.\n\nCan we factor out that switch statement into super's visitSubScorers?  This way the base (Scorer) impl would be responsible for visiting \"this\", and then the subclass would override only if it had subs (ie BS, BS2)?\n\nAlso, we are missing some scorers (SpanScorer, ConstantScoreQuery.ConstantScorer, probably others), but if we do the super approach, we'd get these \"for free\" (I think?).\n\nOh I see we can't quite have Scorer impl this because it doesn't know the query.   But maybe we can factor out a common method, that the subclass passed the query to? ",
            "author": "Michael McCandless",
            "id": "comment-12901843"
        },
        {
            "date": "2010-08-25T11:17:47+0000",
            "content": "Oh I see we can't quite have Scorer impl this because it doesn't know the query. But maybe we can factor out a common method, that the subclass passed the query to?\nI had the same idea in a previous iteration but since Scorer doesn't know about the Query the scorer concerns I can not do the call. One way of doing it would be adding the scorers Weight as a protected final member since Weight already has a #getQuery() method we can easily access it or throw an UnsupportedOperationException if the weight is null (force it via ctor and have a default one which sets it to null).\n\nSince the most of the scorers know their Weight anyway and would need to call the visitor we can also factor it out.\n\n\nAlso, we are missing some scorers (SpanScorer, ConstantScoreQuery.ConstantScorer, probably others), but if we do the super approach, we'd get these \"for free\" (I think?).\nmost of them would then be for free though!\n\nThoughts? ",
            "author": "Simon Willnauer",
            "id": "comment-12902379"
        },
        {
            "date": "2010-08-29T10:30:17+0000",
            "content": "\nOne way of doing it would be adding the scorers Weight as a protected final member since Weight already has a #getQuery() method we can easily access it or throw an UnsupportedOperationException if the weight is null (force it via ctor and have a default one which sets it to null).\n\n+1\n\nThis would then make a default base impl work well for all leaf queries. ",
            "author": "Michael McCandless",
            "id": "comment-12903952"
        },
        {
            "date": "2010-08-30T14:15:23+0000",
            "content": "Another iteration with Weight as a protected member or Scorer. All scorers I looked at had the weight already as a member so this change makes things way simpler though. I think this is close to commit. ",
            "author": "Simon Willnauer",
            "id": "comment-12904204"
        },
        {
            "date": "2010-08-30T16:58:18+0000",
            "content": "Looks great!\n\nThough, can't BS and BS2 just call super.visitSubScorers first, and then visit their subs?  (Ie right now they dup super's code right?). ",
            "author": "Michael McCandless",
            "id": "comment-12904250"
        },
        {
            "date": "2010-08-30T20:13:09+0000",
            "content": "Though, can't BS and BS2 just call super.visitSubScorers first, and then visit their subs? (Ie right now they dup super's code right?).\nNah, good point mike  I missed that, nice code reuse though! - will fix that soon. ",
            "author": "Simon Willnauer",
            "id": "comment-12904313"
        },
        {
            "date": "2010-08-30T20:20:59+0000",
            "content": "new patch - fixed the code dup ",
            "author": "Simon Willnauer",
            "id": "comment-12904318"
        },
        {
            "date": "2010-08-31T19:00:52+0000",
            "content": "Patch looks great Simon, thanks!  +1 to commit. ",
            "author": "Michael McCandless",
            "id": "comment-12904729"
        },
        {
            "date": "2010-08-31T19:52:14+0000",
            "content": "Committed revision 991310 \n\nThanks Mike ",
            "author": "Simon Willnauer",
            "id": "comment-12904745"
        },
        {
            "date": "2010-08-31T20:16:09+0000",
            "content": "Thank you!\n\nI think we should also backport to 3.x? ",
            "author": "Michael McCandless",
            "id": "comment-12904751"
        },
        {
            "date": "2010-08-31T20:19:24+0000",
            "content": "I think we should also backport to 3.x?\nYeah we should I guess - I will look into this tomorrow.  ",
            "author": "Simon Willnauer",
            "id": "comment-12904753"
        },
        {
            "date": "2010-08-31T20:23:13+0000",
            "content": "OK sounds good... ",
            "author": "Michael McCandless",
            "id": "comment-12904757"
        },
        {
            "date": "2010-09-01T13:54:23+0000",
            "content": "Ported back to 3.x\n\nCommitted revision 991537. ",
            "author": "Simon Willnauer",
            "id": "comment-12905028"
        },
        {
            "date": "2011-03-30T15:50:11+0000",
            "content": "Bulk close for 3.1 ",
            "author": "Grant Ingersoll",
            "id": "comment-13013390"
        }
    ]
}