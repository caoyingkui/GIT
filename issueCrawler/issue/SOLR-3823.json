{
    "id": "SOLR-3823",
    "title": "Parentheses in a boost query cause errors",
    "details": {
        "affect_versions": "4.0-BETA",
        "status": "Closed",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "components": [
            "query parsers"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "When using a boost query (bq) that contains a parentheses (like this example from the Relevancy Cookbook section of the wiki):\n\n\n ? defType = dismax \n    & q = foo bar \n    & bq = (*:* -xxx)^999 \n\n\n\nYou get the following error:\n\n\norg.apache.lucene.queryparser.classic.ParseException: Cannot parse 'xxx)': Encountered \" \")\" \") \"\" at line 1, column 12. Was expecting one of: <EOF> <AND> ... <OR> ... <NOT> ... \"+\" ... \"\" ... <BAREOPER> ... \"(\" ... \"*\" ... \"^\" ... <QUOTED> ... <TERM> ... <FUZZY_SLOP> ... <PREFIXTERM> ... <WILDTERM> ... <REGEXPTERM> ... \"[\" ... \"{\" ... <NUMBER> ...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Erick Erickson",
            "id": "comment-13453134",
            "date": "2012-09-11T15:58:16+0000",
            "content": "The error is because of the colon character, it has meaning in a query and must be escaped. See: http://lucene.apache.org/core/3_6_1/queryparsersyntax.html.\n\nSo I'll close this as invalid, if you disagree please let us know.\n\nBTW, it's better to raise this kind of question on the user's list rather than open a JIRA, at least until you're sure it's really a bug. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453302",
            "date": "2012-09-11T18:57:25+0000",
            "content": "1) editing the issue description to include \"noformat\" tags \u2013 i think Erick was getting confused by the \"*:*\" showing up as just \":\"\n\n2) i can't reproduce the described problem.  When i tried using the solr example data, this request worked just fine...\n\nhttp://localhost:8983/solr/select?q=ipod&defType=dismax&bq=%28*:*%20-id:IW-02%29^999\n\nMathos: please follow up on the solr-user@lucene mailing list with more details about the problems you are you having and your actual (specific) configs/queries "
        },
        {
            "author": "Mathos Marcer",
            "id": "comment-13453314",
            "date": "2012-09-11T19:15:56+0000",
            "content": "The problem seems to be when I specify defType=edismax, under defType=dismax it is working like a champ. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13453338",
            "date": "2012-09-11T19:42:16+0000",
            "content": "Thanks, Hoss, you're right...\n\nBut I can get this to fail both with BETA and today's trunk with the example data.\n\nhttp://localhost:8983/solr/select?q=foo&defType=edismax&bq=(name:nonsense -xxx)^999\n\n\nInterestingly this works: (note the space after \"bq\"), \n\nhttp://localhost:8983/solr/select?q=foo&defType=edismax&bq =(name:nonsense -xxx)^999\n\n\nThis fails (spaces around parens, there was an issue with non-space parens lately, but apparently it's unrelated.)\n\nhttp://localhost:8983/solr/select?q=foo&defType=edismax&bq= ( name:nonsense -xxx ) ^999\n\n\n\nStack trace from log:\n\nCaused by: org.apache.lucene.queryparser.classic.ParseException: Encountered \"<EOF>\" at line 1, column 1.\nWas expecting one of:\n    <NOT> ...\n    \"+\" ...\n    \"-\" ...\n    <BAREOPER> ...\n    \"(\" ...\n    \"*\" ...\n    <QUOTED> ...\n    <TERM> ...\n    <PREFIXTERM> ...\n    <WILDTERM> ...\n    <REGEXPTERM> ...\n    \"[\" ...\n    \"{\" ...\n    <NUMBER> ...\n    <TERM> ...\n    \"*\" ...\n\n\tat org.apache.lucene.queryparser.classic.QueryParser.generateParseException(QueryParser.java:708)\n\tat org.apache.lucene.queryparser.classic.QueryParser.jj_consume_token(QueryParser.java:590)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.java:275)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.java:181)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Clause(QueryParser.java:261)\n\tat org.apache.lucene.queryparser.classic.QueryParser.Query(QueryParser.java:181)\n\tat org.apache.lucene.queryparser.classic.QueryParser.TopLevelQuery(QueryParser.java:170)\n\tat org.apache.lucene.queryparser.classic.QueryParserBase.parse(QueryParserBase.java:120)\n\t... 35 more\n\nSep 11, 2012 12:37:58 PM org.apache.solr.core.SolrCore execute\nINFO: [collection1] webapp=/solr path=/select params=\n{q=foo&defType=edismax&bq=+(+name:nonsense+-xxx+)+^999}\n status=400 QTime=2  "
        },
        {
            "author": "Mathos Marcer",
            "id": "comment-13453349",
            "date": "2012-09-11T20:04:36+0000",
            "content": "I'm glad I'm not just going crazy \n\nI did notice while the space before the equal sign (ie \"bq =(name:nonsense -xxx)^999\") doesn't produce a parsing error, comparing results between 3.6 and 4.0 BETA, it doesn't appear to be applying the boost.  In fact I get the same results as if I didn't have the \"bq\" option there at all. "
        },
        {
            "author": "Mathos Marcer",
            "id": "comment-13453350",
            "date": "2012-09-11T20:06:05+0000",
            "content": "Actually looking at it closer, it is probably because with adding the space after bq is it doesn't register it as \"bq\" but as \"bq \" looking at the params section of the query:\n\n\n<str name=\"bq \">(*:* -replacement)^99500000</str> "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13453356",
            "date": "2012-09-11T20:13:36+0000",
            "content": "FWIW, I'm on a Mac (Lion) too, although I doubt that matters. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13453421",
            "date": "2012-09-11T21:12:25+0000",
            "content": "It turns out that it is the white space that causes the problem.\n\nLooking at the code, I see that edismax calls SolrPluginUtils.parseFieldBoosts to \"parse\" the \"bq\" value, which is absurd since it simply breaks up the param value based on whitespace, even in the middle of the query. Then the code calls QParser.subQuery to parse the portions of the query, which of course makes no sense unless the original query contained no whitespace or was a sequence of non-white space queries separated with whitespace.\n\nDismax, OTOH, treats \"bq\" as an array of query strings (multiple \"bq\" params) and parses each as a separate sub-query.\n\nEdismax in 3.6/3.6.1 has the old dismax code.\n\nThe culprit? SOLR-3278: \"edismax support for negative boost with \"bq\" parameter\" introduced the error, back in March. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453518",
            "date": "2012-09-11T22:54:34+0000",
            "content": "jack: thanks for digging in and tracking down the bug .. i'll try to get to this for 4.0\n\n(Mathos: FWIW, details really matter bug reports like \u2013 i tried what you said and couldn't reproduce, if you mentioned that you were using edismax instead of dismax i probably would have been able to reproduce, and the stack trace would have helped me find the bug in the code) "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453609",
            "date": "2012-09-12T01:11:13+0000",
            "content": "Committed revision 1383708. - trunk\nCommitted revision 1383716. - 4x\n\nthanks everybody for helping track this down. "
        },
        {
            "author": "James Dyer",
            "id": "comment-13454028",
            "date": "2012-09-12T14:26:22+0000",
            "content": "Hoss,\n\nI appreciate you fixing this, but I would rather get a fix that preserves the negative boost support (SOLR-3278).  I guess I don't understand the bug this issue was addressing.  Is it simply that \"bq\" would fail if extra whitespace was in the query?  Could we write a failing testcase for that?  Do you see a reason why it would be difficult to fix this and retain the negative boosts?\n\nThe discussion of LUCENE-4378 is pertinent:  we have products in our index that we either do not sell or we know most of our customer do not want.  Yet they often score very high.  The only way I can reliably prevent these from becoming top hits is to use a negative boost.  I would imagine this is a frequent requirement.\n\nI'm more than willing to contribute for this, but I couldn't tell that this issue was an actual problem or a case of users putting whitespace where it doesn't belong and prior versions being more forgiving. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13454059",
            "date": "2012-09-12T15:18:04+0000",
            "content": "James:\n\nThe problem was quite the opposite. When there was NO space in the bq clause it'd fail like this, i.e.\nbq=(stuff). And when there was space, I don't think it worked at all....\n\nBut yeah, it'd be good to have both parens and negative boosts...\n\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13454104",
            "date": "2012-09-12T16:36:49+0000",
            "content": "I couldn't tell that this issue was an actual problem or a case of users putting whitespace where it doesn't belong and prior versions being more forgiving.\n\nJames: the core of the bug was your use of SolrPluginUtils.parseFieldBoosts to try and parse the bq params.\n\nThis is not safe \u2013 if you look at the method it is an extremely trivial utility that is specific for parsing qf/pf style strings containing a list of field names and boosts.  it's not a safe way to parse an arbitrary query string, and any non trivial query string can cause problems with it.\n\nAS you noted in SOLR-3278, parseFieldBoosts is used for parsing the \"bf\" param and that's actually a long standing unsafe bug as well (SOLR-2014) but since functions tend to be much simpler, it's historically been less problematic.  when people run into problems with it, the workarround is to use \"bq=\n{!func}\n...\" instead.\n\nI would rather get a fix that preserves the negative boost support\n\nSince SOLR-3278 had not been released publicly outside of the ALPHA/BETA, my first priority was to fix the regression compared to 3.x where non-trivial bq queries worked fine.\n\nThe documented method of dealing with \"negative boosting\" in solr is actually the type of query that was the crux of this bug report, and i updated the tests you added in SOLR-3278 to use that pattern...\n\nhttps://wiki.apache.org/solr/SolrRelevancyFAQ#How_do_I_give_a_negative_.28or_very_low.29_boost_to_documents_that_match_a_query.3F\n\nI have no objections to supporting \"true\" negative boosts, but i think the right way to do it is in the query parsers / QParsers themselves (so that the boosts can be on any clause) and not just as a special hack for bq/bf (the fact that it works in bf is actualy just a fluke of it's buggy implementation) but as you can see in LUCENE-4378 this is a contentious idea.\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-13454126",
            "date": "2012-09-12T17:01:44+0000",
            "content": "Hoss,  Thank you for working through this and opening Lucene-4378 to at least investigate changing the parser grammar.  I understand the issue with what I had done initially and appreciate your help on this. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13455792",
            "date": "2012-09-14T13:54:25+0000",
            "content": "Sorry to chime in after this issue has been marked as resolved, but .... it doesn't seem right to me that bq is parsed with the defType specified parser.  Rather it should, like fq's, default to the \"lucene\" query parser.  No? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13455831",
            "date": "2012-09-14T14:39:41+0000",
            "content": "bq is parsed with the defType specified parser.  Rather it should, like fq's, default to the \"lucene\" query parser.\n\nSounds reasonable for fq and bq to be parsed the same way, but it seems unrelated to this specific Jira.\n\nAnd this also begs the question of why bq shouldn't simply be a global query parameter like fq. I don't see any reason why a multiplicative boost shouldn't apply to a non-dismax/edismax query - but again this is outside the scope of this specific Jira. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13457472",
            "date": "2012-09-17T23:35:06+0000",
            "content": "Sorry to chime in after this issue has been marked as resolved, but .... it doesn't seem right to me that bq is parsed with the defType specified parser. \n\nI don't understand this comment \u2013 I see no evidence that \"bq\" is incorrectly using the defType parser in either dismax or edismax.\n\nIn both cases null is passed to the subQuery() call for bq allowing it inherit the defTYpe from the localparams of the main \"q\" string (which is appropriate since the bq is an implicit subquery added to the main query) but not a global defType.  ie, in the first example below, the \"lucene\" parser would be used to parse the bq, while in the second example the \"yyy\" parser would be used because of the explicit defType localparam...\n\n\n/select?qf=name+text&defType=xxx&q={!edismax}mainquery&bq=myboost\n\n/select?qf=name+text&defType=xxx&q={!edismax defType=yyy}mainquery&bq=myboost\n\n\n\n...this is how subqueries have always worked with QParsers.  if you think this should be reconsidered, please open a specific issue.\n\n(NOTE: fq's are not subqueries of the main query, so they don't look at the \"q\" at all)\n "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13457513",
            "date": "2012-09-18T00:46:46+0000",
            "content": "...this is how subqueries have always worked with QParsers\n\nIs there any wiki/Javadoc that documents this behavior?\n\nI would also note that both the dismax and edismax wiki pages for \"bq\" say:\n\nA raw query string (in the SolrQuerySyntax)\n\nwhich is not right. We know it uses defType, but we clearly need the precise language as it is supposed to be (noting the comments by hossman.)\n\nSee:\nhttp://wiki.apache.org/solr/DisMaxQParserPlugin#bq_.28Boost_Query.29\nhttp://wiki.apache.org/solr/ExtendedDisMax#bq_.28Boost_Query.29 "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-13458013",
            "date": "2012-09-18T18:09:00+0000",
            "content": "I see no evidence that \"bq\" is incorrectly using the defType parser in either dismax or edismax\n\nOk, sorry I misinterpreted the nature of this issue apparently. "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13610875",
            "date": "2013-03-22T16:41:42+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1383716\n\nSOLR-3823: Fix 'bq' parsing in edismax.  Please note that this required reverting the negative boost support added by SOLR-3278 (merge r1383708) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13653958",
            "date": "2013-05-10T10:33:33+0000",
            "content": "Closed after release. "
        }
    ]
}