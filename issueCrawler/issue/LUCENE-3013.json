{
    "id": "LUCENE-3013",
    "title": "I wish Lucene query explanations were easier to localise",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/query/scoring"
        ],
        "type": "Wish",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Often users ask us to provide a nice UI to explain why a document matched their query.  Currently the strings output by Explanation are very advanced, and probably only understandable to those who have worked on Lucene.  I took a shot at trying to make them friendlier, but it basically came down to parsing the strings it output and trying to figure out what kind of query was at each point (the inability to get to a Query from the Explanation is a small part of the problem here), formulating the result into readable English.  In the end it seems a bit too hard.\n\nThe solution to this could be done in at least two ways:\n\n1. Add getLocalizedSummary() / getLocalizedDescription() method(s) and use resource bundles internally.  Projects wishing to localise these could add their own resource bundles to the classpath and/or get them contributed to Lucene.\n\n2. Add subclasses of Explanation with enough methods for callers to interrogate the individual details of the explanation instead of outputting it as a monolithic string.\n\nI do like the tree structure of explanations a lot (as it resembles the query tree), I just think there is work to be done splitting up the strings into usable fragments of information.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-05-20T20:21:21+0000",
            "content": "2. Add subclasses of Explanation with enough methods for callers to interrogate the individual details of the explanation instead of outputting it as a monolithic string.\n\nI think this is definitely the way to go ... most Explanation objects tend to fall into two fairly basic categories...\n\n\n\tatomic value (ie: the norm for a field, boost multiplier, etc...)\n\tmathmatic operation on sub explanations (ie: product of all child explanations; addition of all child explanations; etc..)\n\n\n\nI think each of those should be concrete subclasses of ComplexExplanation with methods for some of the fixed metadata (ie: the type of math operator), and i think we should then add more additional subclasses of each of those for the things that are really common in Lucene with additional methods where appropriate...\n\n\n\tQueryNormExplanation extends AtomicValueExplanation (no special methods)\n\tIDFExplanation extends AtomicValueExplanation (getDocFreq, getMaxDocs)\n\tQueryWeightExplanation extends ProductExplanation (getTerm)\n\tFieldNormExplanation extends AtomicValueExplanation (getField, getDocId)\n\tTFExplanation extends AtomicValueExplanation (getTerm, getFreq)\n\tetc...\n\n\n\n...simple clients could then continue to use the simple getValue/getDescription methods, but more complex clients could use introspection to see if it's a ttype they want to generate a more user freindly \"explanation\" our of. ",
            "author": "Hoss Man",
            "id": "comment-13037062"
        }
    ]
}