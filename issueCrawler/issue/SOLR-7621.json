{
    "id": "SOLR-7621",
    "title": "Frequent 500 error IOExceptions from StreamingExpressions",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "5.2",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "While trying to test out the new Streaming Expressions functionality, I encountered lots of 500 error / IOException with various root causes  (i'll post details in the comments)\n\nIt looks like the API needs to be better hardend to give the user useful feedback and return 4xx errors when used in an incorrect manner",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-06-01T23:57:15+0000",
            "author": "Hoss Man",
            "content": "my first steps were to startup the cloud example and seed it with some data to try and query...\n\n\nbin/solr -e cloud -noprompt\nbin/post -c gettingstarted example/exampledocs/*.xml\n\n\n\n(NOTE: because this uses the data driven configs by default, many fields here are actually multivalued as a result)\n\nHere's a quick snapshot of one doc in the index using regular search...\n\n\ncurl 'http://localhost:8983/solr/gettingstarted/query?q=id:SOLR1000'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":15,\n    \"params\":{\n      \"q\":\"id:SOLR1000\"}},\n  \"response\":{\"numFound\":1,\"start\":0,\"maxScore\":3.1972246,\"docs\":[\n      {\n        \"id\":\"SOLR1000\",\n        \"name\":[\"Solr, the Enterprise Search Server\"],\n        \"manu\":[\"Apache Software Foundation\"],\n        \"cat\":[\"software\",\n          \"search\"],\n        \"features\":[\"Advanced Full-Text Search Capabilities using Lucene\",\n          \"Optimized for High Volume Web Traffic\",\n          \"Standards Based Open Interfaces - XML and HTTP\",\n          \"Comprehensive HTML Administration Interfaces\",\n          \"Scalability - Efficient Replication to other Solr Search Servers\",\n          \"Flexible and Adaptable with XML configuration and Schema\",\n          \"Good unicode support: h\u00e9llo (hello with an accent over the e)\"],\n        \"price\":[0.0],\n        \"popularity\":[10],\n        \"inStock\":[true],\n        \"incubationdate_dt\":\"2006-01-17T00:00:00Z\",\n        \"_version_\":1502820680744304640}]\n  }}\n\n\n\nAnd here's some results modifying the example from the Streaming Expressions documentation against this data.\n\nask for a sort on the multivalued price field...\n\n\ncurl --data-urlencode 'stream=search(gettingstarted, q=\"id:SOLR1000\", fl=\"id,price\", sort=\"price asc\")' 'http://localhost:8983/solr/gettingstarted/stream?indent=true'\n{\n  \"error\":{\n    \"msg\":\"java.util.concurrent.ExecutionException: java.io.IOException: JSONTupleStream: expected ARRAY_START but got EOF\",\n    \"trace\":\"java.io.IOException: java.util.concurrent.ExecutionException: java.io.IOException: JSONTupleStream: expected ARRAY_START but got EOF\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.openStreams(CloudSolrStream.java:334)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.open(CloudSolrStream.java:232)\\n\\tat org.apache.solr.response.TextResponseWriter.writeTupleStream(TextResponseWriter.java:320)\\n\\tat org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:191)\\n\\tat org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:184)\\n\\tat org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:300)\\n\\tat org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:96)\\n\\tat org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:61)\\n\\tat org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:53)\\n\\tat org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:707)\\n\\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:447)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:227)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:196)\\n\\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\\n\\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\\n\\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\\n\\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\\n\\tat org.eclipse.jetty.server.Server.handle(Server.java:497)\\n\\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\\n\\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\\n\\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\\n\\tat java.lang.Thread.run(Thread.java:745)\\nCaused by: java.util.concurrent.ExecutionException: java.io.IOException: JSONTupleStream: expected ARRAY_START but got EOF\\n\\tat java.util.concurrent.FutureTask.report(FutureTask.java:122)\\n\\tat java.util.concurrent.FutureTask.get(FutureTask.java:188)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.openStreams(CloudSolrStream.java:328)\\n\\t... 32 more\\nCaused by: java.io.IOException: JSONTupleStream: expected ARRAY_START but got EOF\\n\\tat org.apache.solr.client.solrj.io.stream.JSONTupleStream.expect(JSONTupleStream.java:99)\\n\\tat org.apache.solr.client.solrj.io.stream.JSONTupleStream.advanceToDocs(JSONTupleStream.java:159)\\n\\tat org.apache.solr.client.solrj.io.stream.JSONTupleStream.next(JSONTupleStream.java:77)\\n\\tat org.apache.solr.client.solrj.io.stream.SolrStream.read(SolrStream.java:148)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$TupleWrapper.next(CloudSolrStream.java:415)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$StreamOpener.call(CloudSolrStream.java:438)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$StreamOpener.call(CloudSolrStream.java:425)\\n\\tat java.util.concurrent.FutureTask.run(FutureTask.java:262)\\n\\tat org.apache.solr.common.util.ExecutorUtil$MDCAwareThreadPoolExecutor$1.run(ExecutorUtil.java:156)\\n\\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\\n\\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\\n\\t... 1 more\\n\",\n    \"code\":500}}\n\n\n\ndo a search where we try to sort on a field that doesn't exist in any docs (even though it is a valid field acording to the schema's dynamicField rules) - first against a single doc, then against all docs in the index...\n\n\n$ curl --data-urlencode 'stream=search(gettingstarted, q=\"id:SOLR1000\", fl=\"id,field_i\", sort=\"field_i asc\")' 'http://localhost:8983/solr/gettingstarted/stream?indent=true'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":0},\n  \"tuples\":{\"numFound\":-1,\"start\":-1,\"docs\":[{\"id\":\"SOLR1000\"},{\"EOF\":true}]\n  }}\n\n$ curl --data-urlencode 'stream=search(gettingstarted, q=\"*:*\", fl=\"id,field_i\", sort=\"field_i asc\")' 'http://localhost:8983/solr/gettingstarted/stream?indent=true'\n{\n  \"error\":{\n    \"msg\":\"java.lang.NullPointerException\",\n    \"trace\":\"java.io.IOException: java.lang.NullPointerException\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.openStreams(CloudSolrStream.java:334)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.open(CloudSolrStream.java:232)\\n\\tat org.apache.solr.response.TextResponseWriter.writeTupleStream(TextResponseWriter.java:320)\\n\\tat org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:191)\\n\\tat org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:184)\\n\\tat org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:300)\\n\\tat org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:96)\\n\\tat org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:61)\\n\\tat org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:53)\\n\\tat org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:707)\\n\\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:447)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:227)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:196)\\n\\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\\n\\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\\n\\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\\n\\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\\n\\tat org.eclipse.jetty.server.Server.handle(Server.java:497)\\n\\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\\n\\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\\n\\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\\n\\tat java.lang.Thread.run(Thread.java:745)\\nCaused by: java.lang.NullPointerException\\n\\tat org.apache.solr.client.solrj.io.comp.FieldComparator$2.compare(FieldComparator.java:86)\\n\\tat org.apache.solr.client.solrj.io.comp.FieldComparator.compare(FieldComparator.java:93)\\n\\tat org.apache.solr.client.solrj.io.comp.FieldComparator.compare(FieldComparator.java:31)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$TupleWrapper.compareTo(CloudSolrStream.java:398)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$TupleWrapper.compareTo(CloudSolrStream.java:383)\\n\\tat java.util.TreeMap.put(TreeMap.java:560)\\n\\tat java.util.TreeSet.add(TreeSet.java:255)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.openStreams(CloudSolrStream.java:330)\\n\\t... 32 more\\n\",\n    \"code\":500}}\n\n\n\n\ndo a search where we try to sort on a (single valued) field that does exist in some docs - first against a single doc that does not contain that field, then against a single doc that does contain that field, then against all docs in the index...\n\n\n$ curl --data-urlencode 'stream=search(gettingstarted, q=\"id:SOLR1000\", fl=\"id,manufacturedate_dt\", sort=\"manufacturedate_dt asc\")' 'http://localhost:8983/solr/gettingstarted/stream?indent=true'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":1},\n  \"tuples\":{\"numFound\":-1,\"start\":-1,\"docs\":[{\"id\":\"SOLR1000\"},{\"EOF\":true}]\n  }}\n\n\n$ curl --data-urlencode 'stream=search(gettingstarted, q=\"id:IW-02\", fl=\"id,manufacturedate_dt\", sort=\"manufacturedate_dt asc\")' 'http://localhost:8983/solr/gettingstarted/stream?indent=true'\n{\n  \"responseHeader\":{\n    \"status\":0,\n    \"QTime\":1},\n  \"tuples\":{\"numFound\":-1,\"start\":-1,\"docs\":[{\n        \"id\":\"IW-02\",\n        \"manufacturedate_dt\":\"2006-02-14T23:55:59Z\"},{\"EOF\":true}]\n  }}\n\n\n$ curl --data-urlencode 'stream=search(gettingstarted, q=\"*:*\", fl=\"id,manufacturedate_dt\", sort=\"manufacturedate_dt asc\")' 'http://localhost:8983/solr/gettingstarted/stream?indent=true'\n{\n  \"error\":{\n    \"msg\":\"java.lang.NullPointerException\",\n    \"trace\":\"java.io.IOException: java.lang.NullPointerException\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.openStreams(CloudSolrStream.java:334)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.open(CloudSolrStream.java:232)\\n\\tat org.apache.solr.response.TextResponseWriter.writeTupleStream(TextResponseWriter.java:320)\\n\\tat org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:191)\\n\\tat org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:184)\\n\\tat org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:300)\\n\\tat org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:96)\\n\\tat org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:61)\\n\\tat org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:53)\\n\\tat org.apache.solr.servlet.HttpSolrCall.writeResponse(HttpSolrCall.java:707)\\n\\tat org.apache.solr.servlet.HttpSolrCall.call(HttpSolrCall.java:447)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:227)\\n\\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:196)\\n\\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1652)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:585)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143)\\n\\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1127)\\n\\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515)\\n\\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185)\\n\\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1061)\\n\\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141)\\n\\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:215)\\n\\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110)\\n\\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97)\\n\\tat org.eclipse.jetty.server.Server.handle(Server.java:497)\\n\\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:310)\\n\\tat org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:257)\\n\\tat org.eclipse.jetty.io.AbstractConnection$2.run(AbstractConnection.java:540)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:635)\\n\\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:555)\\n\\tat java.lang.Thread.run(Thread.java:745)\\nCaused by: java.lang.NullPointerException\\n\\tat org.apache.solr.client.solrj.io.comp.FieldComparator$2.compare(FieldComparator.java:86)\\n\\tat org.apache.solr.client.solrj.io.comp.FieldComparator.compare(FieldComparator.java:93)\\n\\tat org.apache.solr.client.solrj.io.comp.FieldComparator.compare(FieldComparator.java:31)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$TupleWrapper.compareTo(CloudSolrStream.java:398)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream$TupleWrapper.compareTo(CloudSolrStream.java:383)\\n\\tat java.util.TreeMap.put(TreeMap.java:560)\\n\\tat java.util.TreeSet.add(TreeSet.java:255)\\n\\tat org.apache.solr.client.solrj.io.stream.CloudSolrStream.openStreams(CloudSolrStream.java:330)\\n\\t... 32 more\\n\",\n    \"code\":500}}\n\n\n ",
            "id": "comment-14568250"
        },
        {
            "date": "2015-06-02T00:58:45+0000",
            "author": "Joel Bernstein",
            "content": "Initial release requires default values in the sort fields. I can update the documentation to reflect this.\n\nHardening and error handling is a very high priority up and down the Streaming stack. ",
            "id": "comment-14568323"
        },
        {
            "date": "2015-06-02T01:11:38+0000",
            "author": "Dennis Gove",
            "content": "Note that SOLR-7528 adds null checks in the Comparators to allow for null values in the sort fields. It considers two null values to be equal. The intention is that in a future enhancement we can support a configurable approach to how we treat nulls. ",
            "id": "comment-14568340"
        },
        {
            "date": "2015-06-02T01:29:19+0000",
            "author": "Joel Bernstein",
            "content": "Also Gus Heck has some error handling improvements in SOLR-7441. ",
            "id": "comment-14568356"
        },
        {
            "date": "2015-09-18T02:13:23+0000",
            "author": "Joel Bernstein",
            "content": "Resolved with SOLR-7441 ",
            "id": "comment-14804858"
        }
    ]
}