{
    "id": "SOLR-8225",
    "title": "Leader should send update requests to replicas in recovery asynchronously",
    "details": {
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "When a replica goes into recovery, the leader still sends docs to that replica while it is recovering. What I'm seeing is that the recovering node is still slow to respond to the leader (at least slower than the healthy replicas). Thus it would be good if the leader could send the updates to the recovering replica asynchronously, i.e. the leader will block as it does today when forwarding updates to healthy / active replicas, but send updates to recovering replicas async, thus preventing the whole update request from being slowed down by a potentially degraded.\n\nFWIW - I've actually seen this occur in an environment that has more than 3 replicas per shard. One of the replicas went into recovery and then was much slower to handle requests than the healthy replicas, but the leader had to wait for the slowest replica.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-11T14:39:01+0000",
            "author": "Yonik Seeley",
            "content": "What I'm seeing is that the recovering node is still slow to respond to the leader (at least slower than the healthy replicas).\n\nHmmm, that's interesting.  Any pointers as to why?  There's actually a lot less work (we just buffer in the tlog).\nPerhaps it's the IO bandwidth being taken up by the index replication?\n\nSending async will introduce some complexities around the replica becoming active. Right now, the replica itself knows when it can become active... after it's finished replicating the index + replaying all buffered updates.  With an async-send, that would no longer be the case. ",
            "id": "comment-15000442"
        },
        {
            "date": "2015-11-11T16:50:46+0000",
            "author": "Mark Miller",
            "content": "but the leader had to wait for the slowest replica.\n\nTo some degree, you could mitigate this with the min replication factor on updates right? I don't know how it is now, but in an ideal world, we could return once we got the n fastest responses. ",
            "id": "comment-15000659"
        },
        {
            "date": "2015-11-11T16:58:25+0000",
            "author": "Ayon Sinha",
            "content": "Can a recovering replica after a hiccup behave like recovery after \"add replica\"? Or is it already the same mechanism? What are the downsides of leader sending updates to only active replicas and the recovering can catch-up as and when they can.\n\nUsually replicas will go into recovery due to one of the following common reasons:\n1. GC pause\n2. brief Network outage  ",
            "id": "comment-15000674"
        },
        {
            "date": "2015-11-11T17:01:58+0000",
            "author": "Ayon Sinha",
            "content": "Mark Miller \"min replication factor \" that sounds interesting. I didn't know SolrCloud could do that. I thought it was a CP i.e. consistency=all.\nIf it indeed is possible and we could make it dynamic such that min replication factor = num active nodes for that shard it would solve the problem. ",
            "id": "comment-15000681"
        },
        {
            "date": "2015-12-02T19:37:22+0000",
            "author": "Ayon Sinha",
            "content": "This problem is becoming a deal-breaker for any Solr cluster. The larger the cluster becomes, the higher is the likelihood of at least one replica being unhealthy/slow/recovering. Right now, as it stands, indexing comes to a grinding halt when one or more replicas are recovering. \nTo begin this fix, we MUST at least add a setting where leader does not send the update to a recovering replica at all. It should get that update from wherever its recovering from.\n\nYonik Seeley Can you please comment on the best way to handle this, and we can take this on and submit the patch?\nThis patch with https://issues.apache.org/jira/browse/SOLR-8227 needs to be considered together. ",
            "id": "comment-15036443"
        }
    ]
}