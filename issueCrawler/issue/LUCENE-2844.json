{
    "id": "LUCENE-2844",
    "title": "benchmark geospatial performance based on geonames.org",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/benchmark",
            "modules/spatial"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "See comments for details.\nIn particular, the original patch \"benchmark-geo.patch\" is fairly different than LUCENE-2844.patch",
    "attachments": {
        "LUCENE-2844_spatial_benchmark.patch": "https://issues.apache.org/jira/secure/attachment/12605104/LUCENE-2844_spatial_benchmark.patch",
        "benchmark-geo.patch": "https://issues.apache.org/jira/secure/attachment/12467326/benchmark-geo.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-01-03T17:10:35+0000",
            "content": "David, I'll first create an issue to propose moving benchmark/ to modules.\n\nI've personally been frustrated by this before (just simple stuff like wanting to benchmark some analysis \ndefinition in a schema.xml for ReadTokens/indexing speed and having to actually write an Analyzer.java to do it) ",
            "author": "Robert Muir",
            "id": "comment-12976823"
        },
        {
            "date": "2011-01-18T21:56:13+0000",
            "content": "This is an update to the patch which considers the move of the benchmark contrib to /modules/benchmark.  It also includes GeoNamesSetSolrAnalyzerTask which will use Solr's field-specific analyzer.  It's very much tied to these set of classes in the patch.  There are ASF headers now too. ",
            "author": "David Smiley",
            "id": "comment-12983402"
        },
        {
            "date": "2013-07-23T18:44:43+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13717036"
        },
        {
            "date": "2013-09-25T20:28:34+0000",
            "content": "benchmark-geo.patch (2011-01)\n\nUntil now (with this patch), the benchmark contrib module did not include a means to test geospatial data.  This patch includes some new files and changes to existing ones.  Here is a summary of what is being added in this patch per file (all files below are within the benchmark contrib module) along with my notes:\n\nChanges:\n\n\tbuild.xml \u2013 Add dependency on Lucene's spatial module and Solr.\n\t\n\t\tIt was a real pain to figure out the convoluted ant build system to make this work, and I doubt I did it the proper way.\n\t\tRob Muir thought it would be a good idea to make the benchmark contrib module be top level module (i.e. be alongside analysis) so that it can depend on everything.  http://lucene.472066.n3.nabble.com/Re-Geospatial-search-in-Lucene-Solr-tp2157146p2157824.html  I agree\n\t\n\t\n\tReadTask.java \u2013 Added a search.useHitTotal boolean option that will use the total hits number for reporting purposes, instead of the existing behavior.\n\t\n\t\tThe existing behavior (i.e. when search.useHitTotal=false) doesn't look very useful since the response integer is the sum of several things instead of just one thing.  I don't see how anyone makes use of it.\n\t\n\t\n\n\n\nNote that on my local system, I also changed ReportTask & RepSelectByPrefTask to not include the '-' every other line, and also changed Format.java to not use commas in the numbers.  These changes are to make copy-pasting into excel more streamlined.\n\nNew Files:\n\n\tgeoname-spatial.alg \u2013 my algorithm file.\n\t\n\t\tNote the \":0\" trailing the Populate sequence.  This is a trick I use to skip building the index, since it takes a while to build and I'm not interested in benchmarking index construction.  You'll want to set this to :1 and then subsequently put it back for further runs as long as you keep the doc.geo.schemaField or any other configuration elements affecting index the same.\n\t\tIn the patch, doc.geo.schemaField=geohash but unless you're tinkering with SOLR-2155, you'll probably want to set this to \"latlon\"\n\t\n\t\n\tGeoNamesContentSource.java \u2013 a ContentSource for a geonames.org data file (either a single country like US.txt or allCountries.txt).\n\t\n\t\tUses a subclass of DocData to store all the fields.  The existing DocData wasn't very applicable to data that is not composed of a title and body.\n\t\tDoesn't reuse the docdata parameter to getNextDocData(); a new one is created every time.\n\t\tOnly supports content.source.forever=false\n\t\n\t\n\tGeoNamesDocMaker.java \u2013 a subclass of DocMaker that works very differently than the existing DocMaker.\n\t\n\t\tInstead of assuming that each line from geonames.org will correspond to one Lucene document, this implementation supports, via configuration, creating a variable number of documents, each with a variable number of points taken randomly from a GeoNamesContentSource.\n\t\tdoc.geo.docsToGenerate:  The number of documents to generate.  If blank it defaults to the number of rows in GeoNamesContentSource.\n\t\tdoc.geo.avgPlacesPerDoc: The average number of places to be added to a document.  A random number between 0 and one less than twice this amount is chosen on a per document basis.  If this is set to 1, then exactly one is always used.  In order to support a value greater than 1, use the geohash field type and incorporate SOLR-2155 (geohash prefix technique).\n\t\tdoc.geo.oneDocPerPlace: Whether at most one document should use the same place.  In other words, Can more than one document have the same place?  If so, set this to false.\n\t\tdoc.geo.schemaField: references a field name in schema.xml.  The field should implement SpatialQueryable.\n\t\n\t\n\tGeoPerfData.java: This class is a singleton storing data in memory that is shared by GeoNamesDocMaker.java and GeoQueryMaker.java.\n\t\n\t\tcontent.geo.zeroPopSubst: if a population is encountered that is <= 0, then use this population value instead.  Default is 100.\n\t\tcontent.geo.maxPlaces: A limit on the number of rows read in from GeoNamesContentSource.java can be set here.  Defaults to Integer.MAX_VALUE.\n\t\tGeoPerfData is primarily responsible for reading in data from GeoNamesContentSource into memory to store the lat, lon, and population.  When a random place is asked for, you get one weighted according to population.  The idea is to skew the data towards more referenced places, and a population number is a decent way of doing it.\n\t\n\t\n\tGeoQueryMaker.java \u2013 returns random queries from GeoPerfData by taking a random point and using a particular configured radius.  A pure lat-lon bounding box query is ultimately done.\n\t\n\t\tquery.geo.radiuskm: The radius of the query in kilometers.\n\t\n\t\n\tschema.xml \u2013 a Solr schema file to configure SpatialQueriable fields referenced by doc.geo.schemaField.\n\n\n\nWhen I run this algorithm as provided with the file in the patch, I get this result:\n\nOperation   round ____km   runCnt   recsPerRun        rec/s  elapsedSec    avgUsedMem    avgTotalMem\nSearch_40       0    350        1      4811687 1,206,541.38        3.99   117,722,664    191,934,464\n\n\n\nThe key metrics I use are the average milliseconds per query, and the average places per query.  The number of queries performed is the trailing numeric suffix to Operation.  The Formulas:\n\n\tavg ms/query:  elapsedSec*1000/queries  == 98.8\n\tavg places / query:  recsPerRun/queries == 120,292\n\n ",
            "author": "David Smiley",
            "id": "comment-13778035"
        },
        {
            "date": "2013-09-25T21:13:11+0000",
            "content": "I completely re-did this with a summer intern, Liviy Ambrose. It's similar but simpler to the first approach; it isn't based on it.  Unlike the first patch, it does not modify any of the existing benchmark code (aside from the build.xml of course). I intend to enhance the benchmark code under separate issues, so that this patch can focus on just spatial benchmarking.\n\nTest data\nThe build.xml grabs a tab-separated values file from geonames.org, which contains millions of latitude & longitude based points. I want to take a snapshot (for reproducible tests), randomize the line order, and put it on http://people.apache.org/~dsmiley/.  Additionally, Spatial4j's tests has a file containing a WKT-formatted polygon for many countries. I want to host that as well in a format readable by LineDocSource.\n\nSource files (only 3):\n\n\tGeonamesLineParser.java: This is designed for use with LineDocSource.  Geonames.org data comes in a tab-separated value file.\n\tSpatialDocMaker.java: This class is key.\n\t\n\t\tIt holds a reference to the Lucene SpatialStrategy which it configures from the algorithm file, mostly via factories. It's possible to test quite a variety of spatial configurations, although it does assume RecursivePrefixTree.\n\t\tThis DocMaker has the specialization to convert the shape-formatted string in the body field to a Shape object to be indexed.  It also has a configurable ShapeConverter to optionally convert a point to a circle or bounding box.\n\t\n\t\n\tSpatialFileQueryMaker.java: Instead of hard-coded queries (as seen in other non-spatial tests), it configures a private LineDocSource instance and it reads the shapes off that to use as spatial queries. For now you'd use it with GeonamesLineParser. Furthermore, it re-uses SpatialDocMaker's ShapeConverter so that the points can then become circle or rectangle queries.\n\n\n\nThe provided spatial.alg shows how to use it. \n\nNotes:\n\n\tThe spatial data is placed into the \"body\" field of a standard benchmark DocData class as a string. Originally I experimented with a custom SpatialDocData but I determined it was needless to do that since the existing class can work. And after all, if you're testing spatial, you don't need to be simultaneously testing text. I didn't put it in DocData's attached Properties instance because that seems kinda heavyweight or at least medium-weight \n\n\n\nThe patch is not ready \u2013 I need to add documentation, pending input on this approach. ",
            "author": "David Smiley",
            "id": "comment-13778089"
        },
        {
            "date": "2013-10-23T17:39:36+0000",
            "content": "The attached patch added documentation. I chose to leave the extensive option list to spatial.alg instead of redundantly listing it elsewhere, but I do reference elsewhere to look in spatial.alg for the listing if you're looking for it.\n\nI put a compressed allCountries.txt up on people.apache.org, which is a randomized-line order version of the one from geonames.  This is fetched instead of the live one for reproducibility of test results.\n\nI made various other fairly minor improvements too.  Notably if another SpatialStrategy implementation needs to be tested, it should be feasible to do it via extending the SpatialDocMaker without duplicating much code.\n\nI intend to commit this in a couple days or so. ",
            "author": "David Smiley",
            "id": "comment-13803053"
        },
        {
            "date": "2013-10-27T18:17:45+0000",
            "content": "Commit 1536176 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1536176 ]\n\nLUCENE-2844: spatial benchmark ",
            "author": "ASF subversion and git services",
            "id": "comment-13806409"
        },
        {
            "date": "2013-10-27T18:19:40+0000",
            "content": "Commit 1536177 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1536177 ]\n\nLUCENE-2844: spatial benchmark ",
            "author": "ASF subversion and git services",
            "id": "comment-13806410"
        },
        {
            "date": "2013-10-27T18:24:44+0000",
            "content": "Commit 1536178 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1536178 ]\n\nLUCENE-2844: fix java 7 <> ",
            "author": "ASF subversion and git services",
            "id": "comment-13806412"
        },
        {
            "date": "2013-10-27T18:33:18+0000",
            "content": "Commit 1536180 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1536180 ]\n\nLUCENE-2844: spatial benchmark ",
            "author": "ASF subversion and git services",
            "id": "comment-13806416"
        },
        {
            "date": "2013-10-27T18:34:26+0000",
            "content": "Commit 1536181 from David Smiley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1536181 ]\n\nLUCENE-2844: spatial benchmark ",
            "author": "ASF subversion and git services",
            "id": "comment-13806417"
        }
    ]
}