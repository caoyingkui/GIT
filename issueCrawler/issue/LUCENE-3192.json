{
    "id": "LUCENE-3192",
    "title": "SortField.INT / SortField.FLOAT inconsistency with DocValues",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Wish",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "When reviewing sorting by DocValues I found the following naming inconsistency, which shoulc be fixed.\n\n\n\tDocValues are always Longs or Doubles, but it uses SortField.INT and SortField.FLOAT\n\tIf you enable docValues in SortField but not use not SortField.INT / SortField.FLOAT, it will use FieldCache without informing the user e.g. by Exception\n\n\n\nI would wish to fix this in any of the following ways:\n\n\n\tas a comment TODO notes, create new types for docvalues and remove UseDocValues setter: SortField.INT_DOCVALUES, Sort.FLOAT_DOCVALUES (using the naming INT/FLOAT from the general DOCVALUES API). Ideally there should be also Sort.BYTESREF_DOCVALUES ? This would be more consistent, as getCompataor would be only a big switch as it was before.\n\tuse more \"correct\" SortField.LONG and SortField.DOUBLE and throw Exception if doc values is enabled, but a totally different SortField type is used. The Exception can be thrown in SortField.getComparator(). A second problem with SortField.INT instead of LONG is that when you request sort values to be filled into FieldDocs, the type there is suddenly Long, that may be totally confusing.\n\tmake SortField.LONG==SortField.INT(maybe also ==BYTE==SHORT) use also docvalues if enabled by using the same comparator. If DocValues incompatible type is used, throw Ex in getComparator()\n\n\n\nI would prefer solution #1, especially as I dont like SortField to be modifiable (useDocValues setter...). Solution #2 is also fine.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-11T12:09:51+0000",
            "content": "This comment is not really related to this issue, but could be done together:\n\nWe should make SortField types an ENUM in trunk. We can change API and those integer constants are type unsafe.\n\nFor most code this change would not lead to compile failures, only code that assigns the types to a variable/field. In all other cases code like new SortField(\"field\", SortField.INT) could work like it was before (if we add replicas of the enum constants to SortField, else it would change to new SortField(\"field\", SortField.Type.INT). \n\nThe getComparator method should be moved to the enum and return a comparator without switch statement. ",
            "author": "Uwe Schindler",
            "id": "comment-13047890"
        },
        {
            "date": "2011-06-11T12:14:25+0000",
            "content": "One more bug: useIndexValues is not used by SortField.equals()/hashCode(). If we go for #1, we can ignore that one. For solutions #2 and #3 it needs to be fixed, too. ",
            "author": "Uwe Schindler",
            "id": "comment-13047892"
        },
        {
            "date": "2011-06-11T12:16:56+0000",
            "content": "There is SortField.BYTES already there, but no comparator is returned... If we go #1, i would prefer BYTES_DOVAVLUES as name. ",
            "author": "Uwe Schindler",
            "id": "comment-13047893"
        }
    ]
}