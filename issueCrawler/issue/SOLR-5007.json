{
    "id": "SOLR-5007",
    "title": "TestRecoveryHdfs seems to be leaking a thread occasionally that ends up failing a completely different test.",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [],
        "type": "Test",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Dawid Weiss",
            "id": "comment-13700102",
            "date": "2013-07-04T14:45:42+0000",
            "content": "Hmm... within the same suite? If it's a different suite then this shouldn't be possible. Let me know, Mark. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13700117",
            "date": "2013-07-04T15:00:41+0000",
            "content": "An example of what I am seeing: http://jenkins.thetaphi.de/job/Lucene-Solr-trunk-Linux/6421/\n\nTestRandomDVFaceting fails with:\n\n\nError Message:\n1 thread leaked from SUITE scope at org.apache.solr.TestRandomDVFaceting: 1) Thread[id=4381, name=IPC Parameter Sending Thread #2, state=TIMED_WAITING, group=TGRP-TestRecoveryHdfs]         at \n\n\n\nI assume it's due to TestRecoveryHdfs because of group=TGRP-TestRecoveryHdfs "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13700348",
            "date": "2013-07-04T21:19:13+0000",
            "content": "This:\n\nThread[id=4381, name=IPC Parameter Sending Thread #2, state=TIMED_WAITING, group=TGRP-TestRecoveryHdfs]\n\n\n\nmeans the thread is indeed part of the thread group formed for TestRecoveryHdfs. There is a catch though \u2013 the thread that leaked from this test couldn't exist back then (because it'd be marked as existing at the start of the test). My suspicion is that what happens is an IPC thread is created in some test and then this thread spawns more threads on-demand or something. So the thread group of that parent, persistent thread is inherited by the children who are then detected as rogue threads.\n\nI cannot explain why that parent thread isn't causing a thread leak error \u2013 it'd have to be in the set of ignored threads (but its children are not). If anything comes to your mind, shoot. I'll try to investigate tomorrow. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13700411",
            "date": "2013-07-05T01:00:52+0000",
            "content": "Commit 1499894 from Mark Miller\n[ https://svn.apache.org/r1499894 ]\n\nSOLR-5007: clean up resource management "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13700412",
            "date": "2013-07-05T01:01:53+0000",
            "content": "Commit 1499895 from Mark Miller\n[ https://svn.apache.org/r1499895 ]\n\nSOLR-5007: clean up resource management "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13700413",
            "date": "2013-07-05T01:14:07+0000",
            "content": "I tried filing HADOOP-9703 "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13700479",
            "date": "2013-07-05T06:34:35+0000",
            "content": "Yeah, HADOOP-9703 looks like the core of the problem, thanks Mark. I still need to figure out how the thread group propagates \u2013 I have it on my list. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13700530",
            "date": "2013-07-05T08:32:43+0000",
            "content": "Ok, I think I know. Whenever you're using this:\n\n@ThreadLeakScope(Scope.NONE) // hdfs mini cluster currently leaks threads\n\n\n\nit means any threads this test leaves behind will be a problem to debug. And any threads they themselves create will cause a thread leak later. So it's not a bug in the test framework.\n\nThis annotation is present in a number of classes; it'd be best to get rid of it as soon as possible... "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13700531",
            "date": "2013-07-05T08:33:33+0000",
            "content": "Also: we could add those IPC threads to the thread leak filters if they're harmless instead of doing Scope.NONE. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13703321",
            "date": "2013-07-09T14:26:10+0000",
            "content": "HADOOP-9703 seems to be making some progress.\n\nAlso: we could add those IPC threads to the thread leak filters if they're harmless instead of doing Scope.NONE.\n\nThat's probably preferable for now then - they should be harmless and they affect all the hdfs tests - having Scope.NONE makes it easy to introduce new leaks without noticing. "
        },
        {
            "author": "Dawid Weiss",
            "id": "comment-13703371",
            "date": "2013-07-09T15:20:38+0000",
            "content": "Yep, it's better to ignore those known threads than ignore everything. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13708027",
            "date": "2013-07-14T13:33:16+0000",
            "content": "HADOOP-9703 has been resolved, targeted for 2.2.0 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14372998",
            "date": "2015-03-21T20:29:26+0000",
            "content": "Hmm...it was fixed for 2.3.0 and we are now on 2.3.0, but I still see this as a problem. I'll try to investigate sometime soon. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14373001",
            "date": "2015-03-21T20:30:11+0000",
            "content": "Yep, it's better to ignore those known threads than ignore everything.\n\nI never got to this. I'll work on that today. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14375133",
            "date": "2015-03-22T19:48:22+0000",
            "content": "I've tried for 2.6.0 as well and this thread can still leak. I think in the simple case it is fixed, but if you trigger lease recover it still leaks along with a couple threads noted in related JIRA issues. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-14377159",
            "date": "2015-03-24T02:33:55+0000",
            "content": "I never got to this. I'll work on that today.\n\n I've spun this off to SOLR-7289. "
        }
    ]
}