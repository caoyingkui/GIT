{
    "id": "LUCENE-129",
    "title": "Finalizers are non-canonical",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.1"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The canonical form of a Java finalizer is:\n\nprotected void finalize() throws Throwable()\n{\n try\n {\n   // ... local code to finalize this class\n }\n catch (Throwable t)\n {\n }\n super.finalize(); // finalize base class.\n}\n\nThe finalizers in IndexReader, IndexWriter, and FSDirectory don't conform. This\nis probably minor or null in effect, but the principle is important.\n\nAs a matter of fact FSDirectory.finaliz() is entirely redundant and could be\nremoved, as it doesn't do anything that RandomAccessFile.finalize would do\nautomatically.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2005-11-16T22:42:04+0000",
            "content": "I think FSDirectory needs a finalize method adding to remove its reference\nfrom FSDirectory.DIRECTORIES otherwise, through normal garbage collection,\ndirectories could linger.\n\nI presume the orginator of this issue is commenting on the finalize methods for\nthe Input and Output Streams.\n\nI'm assuming that the intention is for Lucene to clean up after itself even if close is\nnot called explicitly. If this really is a bug then I'm happy to try and construct a unit\ntest to check that FSDirectory cleans up after itself properly. ",
            "author": "Sam Hough",
            "id": "comment-12357779"
        },
        {
            "date": "2005-11-16T23:04:58+0000",
            "content": "Doh. Sorry. Been a long day. Finalize wont be called if DIRECTORIES still points at it  Think twice, post once.\n\nDoes this mean that clients of FSDirectory should have finalize methods that close the Directory?\nIndexReader.finalize for instance just cleans up its lock but doesn't call close()!?\n\nIt is making my head hurt thinking back to C++ days of no automatic garbage collection.\n\nSorry. ",
            "author": "Sam Hough",
            "id": "comment-12357780"
        },
        {
            "date": "2005-11-17T18:11:38+0000",
            "content": "Apparently I haven't made myself clear. It is essential that any finalizer calls super.finalize() regardless of any exceptions it may encounter. The canonical form shown is one way of achieving this: another is finally \n{ super.finalize(); }\n. The finalizers in the classes named do not conform to either pattern and hence whatever their base classes finalizers may do is not necessarily being done. ",
            "author": "Esmond Pitt",
            "id": "comment-12357858"
        },
        {
            "date": "2006-12-19T11:36:56+0000",
            "content": "OK I've fixed all cases of finalize except for one under contrib (contrib/memory/src/java/org/apache/lucene/index/memory/MemoryIndex.java) whose comment was spooky to me:\n\n      // lucene >= 1.9 or lucene-1.4.3 with patch removing \"final\" in superclass\n      protected void finalize() {}\n\nThank you Esmond and sorry for the long delay! ",
            "author": "Michael McCandless",
            "id": "comment-12459603"
        },
        {
            "date": "2007-01-05T19:46:28+0000",
            "content": "Just to clarify: The empty finalize() method body in MemoryIndex measurabley improves performance of this class and it does not harm correctness because MemoryIndex does not require the superclass semantics wrt. concurrency. ",
            "author": "wolfgang hoschek",
            "id": "comment-12462579"
        },
        {
            "date": "2007-01-06T17:55:37+0000",
            "content": "Sneakiness.  Thanks for clarifying! ",
            "author": "Michael McCandless",
            "id": "comment-12462735"
        },
        {
            "date": "2007-02-27T18:10:31+0000",
            "content": "Closing all issues that were resolved for 2.1. ",
            "author": "Michael McCandless",
            "id": "comment-12476251"
        }
    ]
}