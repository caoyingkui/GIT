{
    "id": "SOLR-10691",
    "title": "Allow to not commit index on core close",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "As a Solr user I would like to avoid unnecessary commits into Solr/Lucene index on org.apache.solr.update.SolrIndexWriter#close in case IW has uncommitted changes.\nIn org.apache.lucene.index.IndexWriterConfig(LUCENE-5871) there is a property which is currently used to decide whether to commit or discard uncommitted changes  when you call close(). Unfortunately Solr does not support this property in org.apache.solr.update.SolrIndexConfig",
    "attachments": {
        "SOLR-10691.patch": "https://issues.apache.org/jira/secure/attachment/12868773/SOLR-10691.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-05-15T17:12:19+0000",
            "content": "Here is a patch without full test coverage, I'll update it later. ",
            "author": "Ivan Mamontov",
            "id": "comment-16010920"
        },
        {
            "date": "2017-05-15T18:30:46+0000",
            "content": "It looks like IndexWriter#shutdown is currently used in Solr for.. correct core initialisation (for initial segments_* file creation at least) \n\nCan't just avoid it ) ",
            "author": "Andrey Kudryavtsev",
            "id": "comment-16011059"
        },
        {
            "date": "2017-05-15T21:26:41+0000",
            "content": "Could you explain your use-case for this functionality? On the surface, it seems very trappy. With any kind of autocommit happening, you really don't have a good way to know what docs are already committed. In SolrCloud there's no guarantee that docs that have been committed on one replica are also committed on another. Not to mention transaction logs, so just not calling commit has to deal with rolling back the tlogs as well or the docs will be re-indexed when the node starts up.\n\n99.9% of the time, configuring this would cause unexpected behavior. SolrCloud in particular tries very hard to guarantee that any doc sent to SolrCloud is there when the system restarts for whatever reason. If implemented such that documents were lost, this kind of change would cause that contract to be voilated.\n\nThis seems like it's too little benefit for too much risk unless there's a compelling use-case, other than \"it'd be a little more efficient\".\n\nPlus, the tests do not verify the commit behavior, just that the config was properly read. My claim is that if there were tests adding a bunch of docs such that the commits happened at unpredictable intervals, say with some kind of commitWithin some random number between 250 and 1,000 ms it would be difficult to write a reliable test showing that predictable docs were thrown away.\n\nOr am I completely misunderstanding the point? ",
            "author": "Erick Erickson",
            "id": "comment-16011353"
        },
        {
            "date": "2017-05-18T14:27:11+0000",
            "content": "Erick,\n\nIn our case we have an old school master-slave cluster with a dedicated master. Also, we have very strict requirements about consistency - no implicit commits or rollbacks are allowed in order to maintain the integrity of data(all-or-nothing principle).\n\n\n\tbegin the transaction\n\tdelete all documents from index\n\tindex a huge set of documents/collections\n\tif no errors occur then commit the transaction else roll back the transaction\n\treplicate index to slave nodes\n\n\n\nSo now in order to support transactions during maintenance window or in case of any issue on master we have to \n\n\tmake a backup of all cores\n\trestart server as fast as possible\n\trestore index\n\n\n\nAs you can see this process is very fragile and has high maintenance cost.\n\nRegarding the change: from my point of view this change is safe and backward compatible - it just allows to configure index writer from Lucene. This option is fairly well tested by Lucene and in my understanding it is enough to create happy path test with simple test scenario. ",
            "author": "Ivan Mamontov",
            "id": "comment-16015828"
        }
    ]
}