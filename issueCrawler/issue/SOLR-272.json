{
    "id": "SOLR-272",
    "title": "SolrDocument performance testing",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Test",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In 1.3, we added SolrInputDocument \u2013 a temporary class to hold document information.  There is concern that this may be less then ideal performance-wise.\n\nTo settle some concerns (mine included) I want to compare a few SolrDocument implementations to make sure we are not doing something crazy.\n\nI implemented a LuceneInputDocument subclass of SolrInputDocument that stores its values directly in Lucene Document (rather then a Map<String,Collection>).\n\nThis is a quick test comparing:\n1. Building documents with SolrInputDocument \n2. Building documents with LuceneInputDocument (same interface writing directly to Document)\n3. using DocumentBuilder (solr 1.2, solr 1.1)",
    "attachments": {
        "SOLR-272-SolrDocumentPerformanceTesting.patch": "https://issues.apache.org/jira/secure/attachment/12360447/SOLR-272-SolrDocumentPerformanceTesting.patch",
        "SolrDocumentPerformanceTester.java": "https://issues.apache.org/jira/secure/attachment/12360449/SolrDocumentPerformanceTester.java",
        "SolrInputDoc.patch": "https://issues.apache.org/jira/secure/attachment/12360643/SolrInputDoc.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12507724",
            "date": "2007-06-24T22:16:33+0000",
            "content": "Contains:\n\n\tLuceneInputDocument\n\tchanged tests to use this impl (and still pass)\n\ta simple comparison test (far from a perfect representation)\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12507725",
            "date": "2007-06-24T22:31:55+0000",
            "content": "Running a test that creates 'n' docs each with an id,name, and  a few subjects, the results are:\n\n[100000] SolrInputDocument:          1828\n[100000] LuceneInputDocument:    2499\n[100000] DocumentBuilder:              1746\n[1000000] SolrInputDocument:        14162\n[1000000] LuceneInputDocument:  19764\n[1000000] DocumentBuilder:            17127\n\n(running on JDK 1.6 core 2 duo 2.3ghz)\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12507726",
            "date": "2007-06-24T22:37:31+0000",
            "content": "dooh.  I was not resetting the time after each run "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12507728",
            "date": "2007-06-24T22:57:38+0000",
            "content": "running again.  this time added a dynamic field:\n\n[100000] \t2074 :: 0.02074 mili/doc :: SolrInputDocument\n[100000] \t2617 :: 0.02617 mili/doc :: LuceneInputDocument\n[100000] \t1843 :: 0.01843 mili/doc :: DocumentBuilder\n[1000000] \t16248 :: 0.016248 mili/doc :: SolrInputDocument\n[1000000] \t21946 :: 0.021946 mili/doc :: LuceneInputDocument\n[1000000] \t18618 :: 0.018618 mili/doc :: DocumentBuilder\n\nFor 100000, SolrInputDocument is slightly slower then DocuentBuilder, but for n=1000000 it is slightly faster.  Any thoughts on why?  \n\nSame test, running GC every 1000 docs\nif( (i%1000) == 0 ) System.gc();\n\n[100000] \t3728 :: 0.03728 mili/doc :: SolrInputDocument\n[100000] \t3872 :: 0.03872 mili/doc :: LuceneInputDocument\n[100000] \t3595 :: 0.03595 mili/doc :: DocumentBuilder\n[1000000] \t33843 :: 0.033843 mili/doc :: SolrInputDocument\n[1000000] \t39668 :: 0.039668 mili/doc :: LuceneInputDocument\n[1000000] \t36950 :: 0.036950 mili/doc :: DocumentBuilder "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12507730",
            "date": "2007-06-24T23:11:25+0000",
            "content": "Since the LuceneInputDocument is an obvious looser, I removed that from the test.  \n\nI also:\n\n\tremoved Random from the mix \u2013 makes the tests inconsistent\n\ttest simple and complex docs.\n  > simple is just the id\n  > complex is id + name + dynamic field + 10 subjects, the subjects each have a copyField to 'text'\n\n\n\nWith this test, the SolrInputDocument wins every time:  \n\n[100000] \t2043 :: 0.02043 mili/doc :: SolrInputDocument - true\n[100000] \t2193 :: 0.02193 mili/doc :: DocumentBuilder - true\n[1000000] \t15815 :: 0.015815 mili/doc :: SolrInputDocument - true\n[1000000] \t19223 :: 0.019223 mili/doc :: DocumentBuilder - true\n[10000000] \t6228 :: 0.000623 mili/doc :: SolrInputDocument - false\n[10000000] \t17263 :: 0.001726 mili/doc :: DocumentBuilder - false\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508422",
            "date": "2007-06-27T05:10:25+0000",
            "content": "> With this test, the SolrInputDocument wins every time\n\nNot once you correct the bugs \n\n\n\tcopyField was not being done in the SolrInputDocument version\n\tsetField was being used the for the multiValued field instead of addField, resulting in fewer fields.\n\n\n\nI modified the schema (didn't work out of the box) and removed everything that didn't have to do with the fields in the document (partially because copyField wasn't implemented).\n\nOn my P4, SolrInputDocument comes in at 14% slower.... I don't know how it would be with all the copyField and dynamicField stuff in there.  There are certainly scenarios were it could be faster since it can do a single lookup for a multivalued field.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508426",
            "date": "2007-06-27T05:28:46+0000",
            "content": "Note that my current fix to toDocument() for copyField isn't complete since the previous implementation allowed copyField from an undefined field in the schema.\n\nIt might be cleaner just to use a field that isn't indexed or stored, but that would be a slight backward incompatability.\nMight be OK since I don't know if anyone has ever used that feature.  Thoughts? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508429",
            "date": "2007-06-27T05:32:14+0000",
            "content": "Ugh... nevermind.\n I ran \"svn up\" on a different directory than what I patched, and hence got an older version. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508432",
            "date": "2007-06-27T05:43:26+0000",
            "content": "OK, I'm on the correct version now.\nOnce I changed setField to addField, SolrInputDocument was still slower by 12%\nThey are both almost 5 times as slow with the default schema (all the copyField, required, and default value checking I assume). "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12508478",
            "date": "2007-06-27T08:43:45+0000",
            "content": "Just so we are on the same page...  Are you using SolrDocumentPerformanceTester.java with the changes from r551060 (trunk)?  \n\nOn my machine (core 2 duo) the SolrInputDocument is consistently faster.  Are we running the same tests?  \n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508599",
            "date": "2007-06-27T17:30:49+0000",
            "content": "Attraching the modified test prog I used.\nI modified it to accept separate counts, and do separate runs for the different implementations.\nFor example, 100000 0 0 and 0 0 10000\nThis was to avoid any GC effects from one implementation to another, and to avoid hotspot optimizing for one path and then having a different implementation switch to a different path.\n\nThe SolrInputDocument builder also needed that change from setField to addField to be equivalent. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508600",
            "date": "2007-06-27T17:34:23+0000",
            "content": "FYI, I tested on both P4 and Athlon with Java6 -server\nOf course this is still rather academic since I don't expect this to be a bottleneck in indexing. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12508603",
            "date": "2007-06-27T17:51:39+0000",
            "content": "ok, now i'm getting the same results as you.  thanks. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508614",
            "date": "2007-06-27T18:26:11+0000",
            "content": "An alternate way to do SolrDocument would be to only add a Collection if there were multiple values... something along the lines of:\n\npublic class SolrDocument2 {\n  private final HashMap<String,Object> _fields = new HashMap<String,Object>();\n\n  public SolrDocument2() {\n  }\n\n  public Collection<String> getFieldNames() \n{\n    return _fields.keySet();\n  }\n\n  public void clear() \n{\n    _fields.clear();\n  }\n\n  public Object removeFields(String name) \n{\n    return _fields.remove( name ) != null;\n  }\n\n  public void setField(String name, Object value) \n{\n    _fields.put(name, value);\n  }\n\n  public void addField(String name, Object value)\n  {\n    Object existing = _fields.put(name, value);\n    if (existing == null) return;\n\n    if (existing instanceof Collection) \n{\n      Collection c = (Collection)existing;\n      c.add(value);\n      _fields.put(name, c);\n    }\n  }\n\n  /**\n\n\treturns the first value for this field\n   */\n  public Object getFieldValue(String name) \nUnknown macro: {    Object v = _fields.get( name );    if (v == null || !(v instanceof Collection)) return v;    Collection c = (Collection)v;    if (c.size() > 0 ) {\n      return c.iterator().next();\n    }    return null;  } \n\n\n\n  /**\n\n\tGet the value(s) for a given field... a Collection, or an Object\n   */\n  public Object getFieldValues(String name) \n{\n    return _fields.get( name );\n  }\n}\n\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12508883",
            "date": "2007-06-28T18:01:42+0000",
            "content": "This is an alternative version of SolrDocument that only creates Collections for mulitvalued fields... The one big difference to Yoniks suggestion above is that it returns a Collection<Object> for getFieldValues() even if it is a single valued field.  \n\nRunning the perf test for 1M docs 5 times for each implementation:\n\n[1000000] SolrInputDocument:   9992  9827  9823  9854  9948  \n[1000000] SolrInputDocument2:  9636   9719  9699  9807  9729\n[1000000] DocumentBuilder:     8866   8818  8946  8812  8953\n\nTo be honest, I'm not sure the complexity of dealing with a Map<String,Object> (where the Object may be a collection or not) is worth the marginal speedup.  I suppose if the docs are all single valued it would be a more substantial difference. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508890",
            "date": "2007-06-28T18:18:53+0000",
            "content": "> To be honest, I'm not sure the complexity of dealing with a Map<String,Object> (where the Object may be a \n> collection or not) is worth the marginal speedup.\n\nI'm not sure either, but one reason the speedup is marginal is that it's not the bottleneck (other things are taking more time, like dynamic copy-field checking... I've never checked that code to see if it could be optimized, but things are quite a bit faster when all the dynamic fields are removed).\n\nSolrInputDocument could similary be sped up by getting rid of the Map for boosts.\nOne could either store a bare value, or a BoostedValue.\n\nclass BoostedValue {\n  float boost;\n  Object value;\n}\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12508993",
            "date": "2007-06-29T02:57:08+0000",
            "content": "> The one big difference to Yoniks suggestion above is that it returns a Collection<Object> for getFieldValues() even if it is a single valued field\n\nThat's a good change as it leads to simpler client code.\nI think that getFieldValue() should perhaps return the raw entry (an Object or a Collection<Object>) for those (like the indexer) who would want the most efficient access. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12509327",
            "date": "2007-06-30T20:44:19+0000",
            "content": "SOLR-280 has an updated implementation\n\ngetFieldValue() returns the raw object or collection and is the most efficient access.\n\ngetFirstValue() is a helper for clients who don't want to check if its is a collection and grab the first object. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12589280",
            "date": "2008-04-15T23:28:41+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tCurrently marked (\"Resolved\" or \"Closed\") and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\t\"Affects Versions\" included 1.3\n\n\n\nThe Fix Version for all 8 issues found was set to 1.3 (1.3 has not yet been released, if an issue is already fixed, and it affected 1.3 then the fix will be in 1.3)\n\nEmail notification was suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this\n(hopefully) unique string:  20080415hossman1 "
        }
    ]
}