{
    "id": "LUCENE-2000",
    "title": "Use covariant clone() return types",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/other"
        ],
        "type": "Task",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "3.0",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Paul Cowan wrote in LUCENE-1257:\n\nOK, thought I'd jump in and help out here with one of my Java 5 favourites. Haven't seen anyone discuss this, and don't believe any of the patches address this, so thought I'd throw a patch out there (against SVN HEAD @ revision 827821) which uses Java 5 covariant return types for (almost) all of the Object#clone() implementations in core. \ni.e. this:\n\npublic Object clone() {\nchanges to:\npublic SpanNotQuery clone() {\n\nwhich lets us get rid of a whole bunch of now-unnecessary casts, so e.g.\n\nif (clone == null) clone = (SpanNotQuery) this.clone();\nbecomes\nif (clone == null) clone = this.clone();\n\nAlmost everything has been done and all downcasts removed, in core, with the exception of\n\nSome SpanQuery stuff, where it's assumed that it's safe to cast the clone() of a SpanQuery to a SpanQuery - this can't be made covariant without declaring \"abstract SpanQuery clone()\" in SpanQuery itself, which breaks those SpanQuerys that don't declare their own clone() \nSome IndexReaders, e.g. DirectoryReader - we can't be more specific than changing .clone() to return IndexReader, because it returns the result of IndexReader.clone(boolean). We could use covariant types for THAT, which would work fine, but that didn't follow the pattern of the others so that could be a later commit. \nTwo changes were also made in contrib/, where not making the changes would have broken code by trying to widen IndexInput#clone() back out to returning Object, which is not permitted. contrib/ was otherwise left untouched.\n\nLet me know what you think, or if you have any other questions.",
    "attachments": {
        "LUCENE-2000-clone_covariance.patch": "https://issues.apache.org/jira/secure/attachment/12422784/LUCENE-2000-clone_covariance.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-10-21T09:01:38+0000",
            "content": "I moved this to an extra issue, because there is some discussion needed.\n\nI am strongly against this for various reasons:\n\n\tJava 5 itsself does not override clone() with covariant return type (nowhere!). So e.g. String.clone() always returns jl.Object.\n\tThis is because of backwards problems (which are not easy to explain) \u2013 it has something to do, if a subclass compiled against Java 1.4 version of Lucene overrides clone and calls super.clone(). Because of this, the JDK does not provide String.clone() retrurning String. javac does its best to prevent problems here, but for APIs that need to be backwards compatible, it should return Object as always.\n\tCovariant clone return types need, that all subclasses of a class, that originally implemented a covariant clone() also override it covariant to be consistent. And because of this you have consistency problems (see your IndexReader problem). This is not possible for backwards compatibility. Because of this, covariant clone should only be done for internal classes (package-private, private) or final classes. Another example of this problem is AttributeImpl which defines a clone() method. Subclasses would need to override this covariant clone() method. Custom Attributes compiled against Lucene 2.9 would fail to do this -> MethodNotFoundException (I tried it out, it breaks)\n\n\n\nBecause of all this problems, I prefer to always cast the return value of clone(). This is not unsafe (and because of this you get no unchecked warning), because you always know how to cast the clone result. By the way: You still have to always clone() the super.clone() call, so you do not get any pros of using covariant return types.\n\nI do not want to start a flame war here, but we should not do this. ",
            "author": "Uwe Schindler",
            "id": "comment-12768141"
        },
        {
            "date": "2010-03-11T16:54:21+0000",
            "content": "I believe we should do this at our next \"we're breaking backcompat\" release.\nAny compile errors that could bring to clients are fixed like, exceptionally easy. And the code comes out cleaner -> we have way more callees of clone() than overrides. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12844130"
        },
        {
            "date": "2012-03-28T21:20:35+0000",
            "content": "updating to /trunk\n\nBut if Uwe thinks this is a bad idea... i can accept that  ",
            "author": "Ryan McKinley",
            "id": "comment-13240738"
        },
        {
            "date": "2012-03-28T21:50:13+0000",
            "content": "In Lucene trunk we break backwards, be free to change it! I am fine with it.\n\n(this is why I kept it open) ",
            "author": "Uwe Schindler",
            "id": "comment-13240763"
        },
        {
            "date": "2012-03-28T22:23:10+0000",
            "content": "added to trunk in #1306626\n\nThis won't be ported to 3.x ",
            "author": "Ryan McKinley",
            "id": "comment-13240787"
        },
        {
            "date": "2012-03-29T16:26:08+0000",
            "content": "We now get a bunch of \"redundant cast\" warnings from this ... are there plans to fix that...? ",
            "author": "Michael McCandless",
            "id": "comment-13241364"
        },
        {
            "date": "2012-03-29T16:27:22+0000",
            "content": "We should fix this in trunk! I wanted to ask the same question! ",
            "author": "Uwe Schindler",
            "id": "comment-13241366"
        },
        {
            "date": "2012-03-29T17:36:04+0000",
            "content": "I just checked in a bunch of stuff... kept removing things until:\n\nant compile | grep \"redundant cast\"\n\n\nwas empty ",
            "author": "Ryan McKinley",
            "id": "comment-13241413"
        },
        {
            "date": "2012-03-29T17:38:52+0000",
            "content": "Thanks Ryan! ",
            "author": "Michael McCandless",
            "id": "comment-13241417"
        },
        {
            "date": "2012-08-21T08:31:01+0000",
            "content": "Hi,\nin revision 1375428 (trunk) and 1375429 (4.x), I also added a covariant override for IndexInput.clone(), removing tons of useless casts. ",
            "author": "Uwe Schindler",
            "id": "comment-13438532"
        }
    ]
}