{
    "id": "SOLR-2987",
    "title": "ExternalFileField With Invalid TrieField Key",
    "details": {
        "affect_versions": "3.5,                                            3.6,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The current error handling in reading an external file field only catches an error when parsing the float value on a line, which then skips that line.  If the key field is a trie field, such as a TrieIntField, and the key value in the file cannot be parsed to an int, loading of the entire file fails.  \n\nShouldn't the call to get the indexed value of the key should be in the same try/catch as the float parsing for the line?",
    "attachments": {
        "SOLR-2987.patch": "https://issues.apache.org/jira/secure/attachment/12510115/SOLR-2987.patch",
        "SOLR-2987-3x.patch": "https://issues.apache.org/jira/secure/attachment/12510116/SOLR-2987-3x.patch",
        "eff_key_error.patch": "https://issues.apache.org/jira/secure/attachment/12508812/eff_key_error.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Michael Garski",
            "id": "comment-13175730",
            "date": "2011-12-24T14:21:27+0000",
            "content": "Stack trace that occurs with a line in the file such as '=34' where the key value is missing:\n\nDec 23, 2011 8:26:17 AM org.apache.solr.common.SolrException log\nSEVERE: java.lang.NumberFormatException: For input string: \"\"\n\tat java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\tat java.lang.Integer.parseInt(Integer.java:493)\n\tat java.lang.Integer.parseInt(Integer.java:514)\n\tat org.apache.solr.schema.TrieField.readableToIndexed(TrieField.java:314)\n\tat org.apache.solr.search.function.FileFloatSource.getFloats(FileFloatSource.java:258)\n\tat org.apache.solr.search.function.FileFloatSource.access$000(FileFloatSource.java:59)\n\tat org.apache.solr.search.function.FileFloatSource$2.createValue(FileFloatSource.java:130)\n\tat org.apache.solr.search.function.FileFloatSource$Cache.get(FileFloatSource.java:161)\n\tat org.apache.solr.search.function.FileFloatSource.getCachedFloats(FileFloatSource.java:124)\n\tat org.apache.solr.search.function.FileFloatSource.getValues(FileFloatSource.java:83)\n\tat org.apache.lucene.queries.function.valuesource.MultiFloatFunction.getValues(MultiFloatFunction.java:65)\n\tat org.apache.lucene.queries.function.valuesource.MultiFloatFunction.getValues(MultiFloatFunction.java:65)\n\tat org.apache.solr.search.DoubleParser$Function.getValues(ValueSourceParser.java:1056)\n\tat org.apache.lucene.queries.function.valuesource.MultiFloatFunction.getValues(MultiFloatFunction.java:65)\n\tat org.apache.lucene.queries.function.valuesource.MultiFloatFunction.getValues(MultiFloatFunction.java:65)\n\tat org.apache.lucene.queries.function.valuesource.MultiFloatFunction.getValues(MultiFloatFunction.java:65)\n\tat org.apache.lucene.queries.function.FunctionQuery$AllScorer.<init>(FunctionQuery.java:119)\n\tat org.apache.lucene.queries.function.FunctionQuery$FunctionWeight.scorer(FunctionQuery.java:94)\n\tat org.apache.lucene.search.BooleanQuery$BooleanWeight.scorer(BooleanQuery.java:317)\n\tat org.apache.lucene.search.FilteredQuery$1.scorer(FilteredQuery.java:153)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:581)\n\tat org.apache.lucene.search.IndexSearcher.search(IndexSearcher.java:354)\n\tat org.apache.solr.search.Grouping.execute(Grouping.java:351)\n\tat org.apache.solr.handler.component.QueryComponent.process(QueryComponent.java:495)\n\tat org.apache.solr.handler.component.SearchHandler.handleRequestBody(SearchHandler.java:194)\n\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:1478)\n\tat org.apache.solr.core.QuerySenderListener.newSearcher(QuerySenderListener.java:59)\n\tat org.apache.solr.core.SolrCore$3.call(SolrCore.java:1255)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:334)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:166)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:636) "
        },
        {
            "author": "Michael Garski",
            "id": "comment-13176954",
            "date": "2011-12-29T02:29:18+0000",
            "content": "Patch that moves key lookup to within same try/catch as the value parsing. Corrected exception message to include the field name. "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13182977",
            "date": "2012-01-10T01:14:29+0000",
            "content": "Nice catch!\n\nThe only way I can generate this error is if the keyfield is a numeric type. Otherwise, with string types, it works just fine because when the line like \"=76.0\" is parsed, no attempt is made to convert the incoming key to anything. And since there are no terms in the index that match the empty string, this just gets collected as an error and logged. So your patch looks fine.\n\nI don't see a good way to test this though, at least not in a positive sense. I can include bogus entries in TestFunctionQuery for a start. I can add a test for an numeric type keyfield modeled on testExternalFileFieldStringKeys, call it testExternalFileFieldNumericKeys, leave off the key and see if it succeeds. But on a quick glance, I don't see a good way to verify that the errors are appropriately logged. Anyone want to weigh in on whether it's worth the effort? "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13183660",
            "date": "2012-01-10T22:48:16+0000",
            "content": "Latest patch "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13183664",
            "date": "2012-01-10T22:51:35+0000",
            "content": "Thanks Michael!\n\ntrunk: r-1229783\n3.x:   r-1229782 "
        }
    ]
}