{
    "id": "SOLR-2233",
    "title": "DataImportHandler - JdbcDataSource is not thread safe",
    "details": {
        "affect_versions": "1.4,                                            1.4.1,                                            1.5,                                            3.1,                                            3.2",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "Whenever Thread A spends more than 10 seconds on a Connection (by retrieving records in a batch), Thread B will close connection.\nRelated exceptions happen when we use \"threads=\" attribute for entity; usually exception stack contains message \"connection already closed\"\nIt shouldn't happen with some JNDI data source, where Connection.close() simply returns Connection to a pool of available connections, but we might get different errors.",
    "attachments": {
        "SOLR-2233-001.patch": "https://issues.apache.org/jira/secure/attachment/12481497/SOLR-2233-001.patch",
        "SOLR-2233-JdbcDataSource.patch": "https://issues.apache.org/jira/secure/attachment/12459383/SOLR-2233-JdbcDataSource.patch",
        "SOLR-2233.patch": "https://issues.apache.org/jira/secure/attachment/12480998/SOLR-2233.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Fuad Efendi",
            "id": "comment-12931150",
            "date": "2010-11-11T19:19:23+0000",
            "content": "I need to test it; but changes are obvious.\nJDBC API says \n\n\t<strong>Note:</strong> Support for the <code>isLast</code> method\n\tis optional for <code>ResultSet</code>s with a result\n\tset type of <code>TYPE_FORWARD_ONLY</code>\n\n\n\tbut I am sure everyone supports this.\n\n "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12931168",
            "date": "2010-11-11T19:48:01+0000",
            "content": "Performance Tuning\n\nI have extremely sophisticated SQL; root entity runs 10-15 subqueries, and I am unable to use CachedSqlEntityProcessor. That's why I am looking into multithreading.\n\nUnfortunately, with existing approach connection will be closed after each use. And for most databases creating a connection (authentication, resource allocation) is extremely expensive.\n\nThe best approach is to use container resource (JNDI, connection pooling), but I'll try to find what else can be improved. "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12931183",
            "date": "2010-11-11T20:16:25+0000",
            "content": "Connection moved to top-level class\nDataSource should be used in a thread-safe manner; multiple threads can use multiple DataSource (per Item)\nConnection should be closed at the end of import in any case... "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12931187",
            "date": "2010-11-11T20:28:04+0000",
            "content": "This is exception I was talking about, threads=\"16\", 12 sub-entities, with existing trunk version, note The connection is closed\n\n\norg.apache.solr.handler.dataimport.DataImportHandlerException: com.microsoft.sqlserver.jdbc.SQLServerException: The connection is closed.\n        at org.apache.solr.handler.dataimport.DataImportHandlerException.wrapAndThrow(DataImportHandlerException.java:64)\n        at org.apache.solr.handler.dataimport.JdbcDataSource$ResultSetIterator.hasnext(JdbcDataSource.java:337)\n        at org.apache.solr.handler.dataimport.JdbcDataSource$ResultSetIterator.access$600(JdbcDataSource.java:226)\n        at org.apache.solr.handler.dataimport.JdbcDataSource$ResultSetIterator$1.hasNext(JdbcDataSource.java:260)\n        at org.apache.solr.handler.dataimport.EntityProcessorBase.getNext(EntityProcessorBase.java:75)\n        at org.apache.solr.handler.dataimport.SqlEntityProcessor.nextRow(SqlEntityProcessor.java:73)\n        at org.apache.solr.handler.dataimport.ThreadedEntityProcessorWrapper.nextRow(ThreadedEntityProcessorWrapper.java:84)\n        at org.apache.solr.handler.dataimport.DocBuilder$EntityRunner.runAThread(DocBuilder.java:433)\n        at org.apache.solr.handler.dataimport.DocBuilder$EntityRunner.run(DocBuilder.java:386)\n        at org.apache.solr.handler.dataimport.DocBuilder$EntityRunner.runAThread(DocBuilder.java:453)\n        at org.apache.solr.handler.dataimport.DocBuilder$EntityRunner.access$000(DocBuilder.java:340)\n        at org.apache.solr.handler.dataimport.DocBuilder$EntityRunner$1.run(DocBuilder.java:393)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n        at java.lang.Thread.run(Thread.java:619)\nCaused by: com.microsoft.sqlserver.jdbc.SQLServerException: The connection is closed.\n        at com.microsoft.sqlserver.jdbc.SQLServerException.makeFromDriverError(SQLServerException.java:171)\n        at com.microsoft.sqlserver.jdbc.SQLServerConnection.checkClosed(SQLServerConnection.java:319)\n        at com.microsoft.sqlserver.jdbc.SQLServerStatement.checkClosed(SQLServerStatement.java:956)\n        at com.microsoft.sqlserver.jdbc.SQLServerResultSet.checkClosed(SQLServerResultSet.java:348)\n        at com.microsoft.sqlserver.jdbc.SQLServerResultSet.next(SQLServerResultSet.java:915)\n        at org.apache.solr.handler.dataimport.JdbcDataSource$ResultSetIterator.hasnext(JdbcDataSource.java:329)\n        ... 13 more\n\n "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12931193",
            "date": "2010-11-11T20:53:07+0000",
            "content": "resultSet.next() - Microsoft JDBC doesn't support isLast() for FORWARD_ONLY "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12931225",
            "date": "2010-11-11T22:00:23+0000",
            "content": "And some real-life test, root entity contains 10 subentities, 16 threads allocated,\n\nbefor\n\n  <str name=\"Time Elapsed\">0:1:0.322</str> \n  <str name=\"Total Requests made to DataSource\">7296</str> \n  <str name=\"Total Rows Fetched\">8061</str> \n  <str name=\"Total Documents Processed\">729</str> \n\n\n\nafter\n\n  <str name=\"Time Elapsed\">0:1:1.184</str> \n  <str name=\"Total Requests made to DataSource\">0</str> \n  <str name=\"Total Rows Fetched\">29247</str> \n  <str name=\"Total Documents Processed\">2639</str> \n\n\n\nLook at it, it seems we don't unnecessarily close connection!\t\nTotal Requests made to DataSource: 0 "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12931401",
            "date": "2010-11-12T13:52:11+0000",
            "content": "The only remaining problem is what to do if Database Server closed/dropped connection or something like that (for instance, due to timeout settings on a database, or due to heavy load, or network problem). The more time required to index data, the more frequent problems.\n\nEven connection pool (accessed via JNDI) won't help because existing (and new) code tries to keep the same connection for a long time, without any logic to check that connection is still alive. What to do if we are in the middle of RecordSet and database dropped connection? \n "
        },
        {
            "author": "cmd",
            "id": "comment-12931717",
            "date": "2010-11-13T19:36:14+0000",
            "content": "It seems more slowly than before in the test .why ? "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12931839",
            "date": "2010-11-14T15:52:08+0000",
            "content": "It is 3 times faster \"after\" I applied changes:\nBefore: 729 documents/minute\nAfter: 2639 documents/minute\n\nIn my test, with 10 sub-entities some of them are multi-valued (and hard to use CachedJdbcDataSource for composite PKs). I can't explain it by only threads=\"16\" option (which this patch makes possible). It is probably \"Connection Close / Connection Open\" issue which is very expensive for SQL-Server (except MySQL JDBC driver which internally uses connection pooling) "
        },
        {
            "author": "Frank Wesemann",
            "id": "comment-13041724",
            "date": "2011-05-31T18:11:25+0000",
            "content": "Fuad,\nas the patch is not applyable for me ( too much noise about reformated lines etc.)\nDo I see it right that you essentially replaced getConnection() with factory.call() ? "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13041788",
            "date": "2011-05-31T19:56:09+0000",
            "content": "Hi Frank, yes, correct; although it's hard to recall what I did... unfortunately reformatted... I can resubmit (apply patch & format with Lucene style & generate patch); but better to redo it from scratch again. Existing code doesn't run multithreaded; and it is slow even for single-thread (inappropriate JDBC usage)\n\nI completely removed this code:\n\n  private Connection getConnection() throws Exception {\n    long currTime = System.currentTimeMillis();\n    if (currTime - connLastUsed > CONN_TIME_OUT) {\n      synchronized (this) {\n        Connection tmpConn = factory.call();\n        closeConnection();\n        connLastUsed = System.currentTimeMillis();\n        return conn = tmpConn;\n    } else {\n      connLastUsed = currTime;\n      return conn;\n    }\n  }\n\n  "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13041811",
            "date": "2011-05-31T20:40:04+0000",
            "content": "Existing implementation uses single Connection during 10 seconds time interval, and even shares this object with other threads (if you try multithreaded)\n\nSo that problem becomes environment & vendor specific: to open new connection to Oracle 10g, for instance, we need to authenticate, and in \"dedicated server\" it might take a long, plus \"dedicated\" resources for each connection, - server can get overloaded. MySQL, fro another side, does not closes connection internally (even if you call conn.close() in your code); connection will be simply returned to a pool of connection objects. And what if something goes wrong... (what if MySQL or Oracle internals need additional time for \"closing\", \"opening\", ...) - we might even get problems like \"too many connections\". Modern apps don't see that because they use manageable connection pooling instead of close-open...\n\nI need to verify this patch; it was quick solution to make \"threads=...\" attribute working, and it currently works in production system (MS-SQL). "
        },
        {
            "author": "Frank Wesemann",
            "id": "comment-13041863",
            "date": "2011-05-31T22:13:19+0000",
            "content": "For a less obtrusive solution I came up with the attached patch.\n\nPeople with more knowledge may do something useful in the isConnectionValid() method.\n\nAs I had to learn postgresql Driver for jdbc4 does not implement isValid(timeout).\n\nMay be one can trick the connectionpool to validate the connection after a certain amount of time. "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13041884",
            "date": "2011-05-31T22:44:45+0000",
            "content": "Hi Frank, thanks for the patch; unfortunately it is not thread safe... if you don't mind let me continue working on this, I want to use internal connection pool (if JNDI data source is not available)...\n\nMy initial patch already contains too much; and new one will remove ResultSetIterator and make it much simlper to understand (and multithreaded); and code shoulnd't have any dependency on rare optionally supported patterns such as ResultSet.TYPE_FORWARD_ONLY; READ_ONLY should be managed differently (and it is hard to manage if data size is huge and data is concurrently updated while we are importing it)\nPossible solution could be connection.close() after reading each single record (and initial query should return PKs of records) - but it would be next step... I wrote initial patch for a production system where complex 10-query-based documents (about 500k docs) took many hours to import (and now it is about 40 minutes only) (and what happens if we have network problem and we are in the middre of Iterator?)\n\nThanks "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13044457",
            "date": "2011-06-05T07:16:07+0000",
            "content": "Revised version of old patch (11-Nov-2010); previous version of patch  was hard to read \n\nMain changes: \n\n\tconnection won't close & reopen after timeout\n\tconnection can't be closed by second thread unexpectedly to first thread (initial bug fixed)\n\n\n\nPlease note it works fine with MS-SQL server. However, concurrent statements (in concurrent threads) via the same connection object is tricky, JDBC may or may not implement it (JDBC-ODBC bridge for instance) "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13044460",
            "date": "2011-06-05T07:25:56+0000",
            "content": "Note that with this implementation \"connection\" is closed only when main instance of main class finalized => connection never closed; so that the code is still naive (server can close connection - how will we know that?) - fortunately it doesn't happen in my specific case already few months of night imports...\n\nWe should use connection pooling - this would be next improvement; conn.close() in this case will return connection to pool (without closing it), and pool is responsible for testing connections for liveness. "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13044461",
            "date": "2011-06-05T07:38:46+0000",
            "content": "\n\tsmall bug with closeResources()\n\teach ResultSetIterator now has own (separate) instance of Connection - extremely good for performance (multithreading) but it is not transactional (different connections can return different results) - but we are \"optimistic\"\n\n "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-13044463",
            "date": "2011-06-05T07:42:38+0000",
            "content": "to avoid mistakes I added version... SOLR-2233-001.patch\n(previous attachment was wrong) "
        },
        {
            "author": "David Webb",
            "id": "comment-13177668",
            "date": "2011-12-30T14:12:24+0000",
            "content": "I am getting truly poor performance with my multi-threaded DIH Using the JdbcDataSource.  This issue sounds like my problem considering I can only see 1 new active session made on the Oracle Database, even though threads=\"12\".  I am running Solr 3.4, but there is no Fix Version associated with this Jira, so does that mean this patch never got commited?\n\nAny other suggestions for Solr 3.4 DIH Multithreaded?\n\nThank you. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13177717",
            "date": "2011-12-30T18:29:29+0000",
            "content": "David,\n\nPlease show your config excerpt, jstack and fullimport logs (DEBUG on o.a.solr.dataimport), your connection pool config is quite appreciate too. I can't say that I know which issue you are talking about.   \n\nI have patches for DIH multi-threadng and CachedSqlDatasource at trunk, 4.0. SOLR-2933 SOLR-2947. Pls vote. Unfortunately it will be too much efforts to do the same at 3.x. So, we need it committed and after that they can be ported with SOLR-2382, or you will be able to try 4.0 DIH jars. \n\n\u2013\nMikhail\n "
        },
        {
            "author": "James Dyer",
            "id": "comment-13240612",
            "date": "2012-03-28T18:33:33+0000",
            "content": "The \"threads\" feature was removed from DIH in Trunk/4.x (see SOLR-3262).  Some \"threads\" bugs were fixed in version 3.6, the last release in which \"threads\" is available. (see SOLR-3011). "
        }
    ]
}