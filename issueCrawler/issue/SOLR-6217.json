{
    "id": "SOLR-6217",
    "title": "Load cores asynchronously on init",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "At the moment, we load cores in a threadpool in CoreContainer.init(), but then wait for all cores to load before we register them in ZK and return.  This has two drawbacks:\n1) SolrDispatchFilter isn't fully initialised until all the cores are loaded, which means that we can still have cores registered in ZK that can't accept HTTP connections\n2) One slow-loading core will slow down all cores in the node.",
    "attachments": {
        "SOLR-6217.patch": "https://issues.apache.org/jira/secure/attachment/12653237/SOLR-6217.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Alan Woodward",
            "id": "comment-14048163",
            "date": "2014-06-30T21:03:45+0000",
            "content": "Patch making all core init happen in the background.  CoreContainer.load() creates a threadpool as before, but submits all core load processes without waiting for their responses, shuts down the threadpool and returns. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14048172",
            "date": "2014-06-30T21:15:39+0000",
            "content": "This causes loads of tests to fail currently, because TestHarness expects cores to be available immediately. "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-14055240",
            "date": "2014-07-08T18:15:55+0000",
            "content": "Too many things in the test suite currently rely on cores being immediately available, and the REST handlers require it as well.  Maybe worth looking at again if we migrate away from SolrDispatchFilter to a standalone HTTP server. "
        }
    ]
}