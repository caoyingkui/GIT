{
    "id": "LUCENE-8276",
    "title": "GeoComplexPolygon failures",
    "details": {
        "components": [
            "modules/spatial3d"
        ],
        "status": "Closed",
        "resolution": "Fixed",
        "fix_versions": [
            "6.7",
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "Bug"
    },
    "description": "I have tightened a bit more the random test for polygons and GeoComplexPolygons still shows issues when traveling planes that are cutting the world near the pole. I could identify three cases:\n\n\u00a0\n\ncase 1) It happens when the check point is on aone of the test point planes but the planes is close to the pole and cannot be traversed. In that case we hit the following part of the code:\n\n} else if (testPointFixedYPlane.evaluateIsZero(x, y, z) || testPointFixedXPlane.evaluateIsZero(x, y, z) || testPointFixedZPlane.evaluateIsZero(x, y, z)) {\n  throw new IllegalArgumentException(\"Can't compute isWithin for specified point\");\n} else {\n\n\u00a0\n\nIt seems this check is unnecesary. If removed then a traversal is choosen and evrything works as expected.\n\n\u00a0\n\ncase 2) In this case a DualCrossingEdgeIterator is used with one of the planes being close to the pole but inside current restricutions (is a valid traversal). I think the problem happens when computing the intersection points for above and below plane in computeInsideOutside:\n\nfinal GeoPoint[] outsideOutsidePoints = testPointOutsidePlane.findIntersections(planetModel, travelOutsidePlane);  //these don't add anything: , checkPointCutoffPlane, testPointCutoffPlane);\nfinal GeoPoint outsideOutsidePoint = pickProximate(outsideOutsidePoints);\n\nThe intersection above results in two points close to each other and close to the intersection point, and therefore pickProximate fails in choosing the right one.\n\ncase 3) In this case a LinearCrossingEdgeIterator is used with the plane being close to the pole. In this case when evaluating the intersection between an edge and the plane, we get two intersections (because are very close together) inside the bounds instead of one. The result is too many crossings.\n\n\u00a0\n\nAfter evaluating this errors I think we should really prevent using planes that are near a pole. I attached a new version of GeoComplexPolygon that seems to solve this issues. The approach is the following:\n\n\u00a0NEAR_EDGE_CUTOFF is not expressed as a linear distance but as a percentage, curerntly 0.75 . If ab is the value of a semiaxis, the logic disallows to travel a plane if the distance between the plane and the center of the world is bigger that \u00a0NEAR_EDGE_CUTOFF * pole.",
    "attachments": {
        "LUCENE-8276-test.patch": "https://issues.apache.org/jira/secure/attachment/12920732/LUCENE-8276-test.patch",
        "LUCENE-8276.patch": "https://issues.apache.org/jira/secure/attachment/12920771/LUCENE-8276.patch",
        "LUCENE-8276-random.patch": "https://issues.apache.org/jira/secure/attachment/12920770/LUCENE-8276-random.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16452191",
            "author": "Karl Wright",
            "content": "Ignacio Vera, everything looked plausible except for this:\n\n\n     // If we're right on top of the point, we know the answer.\n     if (testPoint.isNumericallyIdentical(x, y, z)) {\n       return testPointInSet;\n+    } else if (testPoint.isNumericallyIdentical(-x, -y, -z)) {\n+      return !testPointInSet;\n     }\n\n\n\nI don't think you can make this assumption. ",
            "date": "2018-04-25T12:47:02+0000"
        },
        {
            "id": "comment-16452216",
            "author": "Ignacio Vera",
            "content": "Yes, I added that because the test with the antipode failed with a problem when creating a plane. Because in the polygon factory we have the following:\n\n\u00a0\n\npublic GeoComplexPolygon createGeoComplexPolygon(final PlanetModel planetModel,\n  final List<List<GeoPoint>> pointsList, final GeoPoint testPoint) {\n  // Is it inside or outside?\n  final Boolean isTestPointInside = isInsidePolygon(testPoint, points);\n  if (isTestPointInside != null) {\n    // Legal pole\n    if (isTestPointInside == poleMustBeInside) {\n      return new GeoComplexPolygon(planetModel, pointsList, testPoint, isTestPointInside);\n    } else {\n      return new GeoComplexPolygon(planetModel, pointsList, new GeoPoint(-testPoint.x, -testPoint.y, -testPoint.z), !isTestPointInside);\n    }\n  }\n  // If pole choice was illegal, try another one\n  return null;\n}\n\n\n\n\u00a0\n\nI though it was a valid assumption. I have a look if I can handle that case in a more robust way.\n\n\u00a0 ",
            "date": "2018-04-25T13:03:24+0000"
        },
        {
            "id": "comment-16452220",
            "author": "Karl Wright",
            "content": "Ignacio Vera, since we basically need to draw a path from the test point to the check point, we can short-circuit the path by noticing that the check point and the test point are the same.  But that says nothing at all about the antipodes of the test point.  We do not know if that point is in set or out of set.  This is very different from the assumptions about poles made in GeoPolygonFactory.\n\nIf you are having trouble building a traversal plane, it means that you have chosen the wrong kind of iterator to construct.  There are three kinds: SectorLinear (which is < 180 degrees), FullLinear (180 degrees), and Dual (where each leg is < 180 degrees). ",
            "date": "2018-04-25T13:10:57+0000"
        },
        {
            "id": "comment-16452358",
            "author": "Ignacio Vera",
            "content": "I undestand now. This case would fall in case 1 explained above. The problem here is that we have a Dual iterator with a leg of 180 degrees. ",
            "date": "2018-04-25T14:41:18+0000"
        },
        {
            "id": "comment-16452395",
            "author": "Karl Wright",
            "content": "Ignacio Vera, there is always another choice you could make that would prevent any dual iterator leg from being = 180 degrees.  By definition, it is always possible to find a shorter path.\n ",
            "date": "2018-04-25T14:50:41+0000"
        },
        {
            "id": "comment-16452442",
            "author": "Ignacio Vera",
            "content": "I think you have no options in the following corner case:\n\nTest point is near to the positive X pole\u00a0 so the testPointFixedXPlane cannot be traveled.\n\nCheck point is near to the negative X pole so the travelPlaneFixedX cannot be traveled.\n\nThen you only have two options:\n\na) travel in the XZ plane then XY\n\nb) travel in the XY plane then XZ\n\nIn any of those two cases you have a leg that is 180 degrees.\n\n\u00a0 ",
            "date": "2018-04-25T15:12:11+0000"
        },
        {
            "id": "comment-16452540",
            "author": "Karl Wright",
            "content": "If you think you need two new variants of DualCrossingEdgeIterator, I can write those, but I'm swamped as usual, so it will have to wait until the weekend, I'm afraid. ",
            "date": "2018-04-25T15:56:01+0000"
        },
        {
            "id": "comment-16453302",
            "author": "Karl Wright",
            "content": "Ignacio Vera, a 180-degree version of DualCrossingEdgeIterator is very challenging to write, because it's not clear at all how we bound the envelope planes in that case.  If you allow one leg to travel a full 180 degrees, then since one of the envelope planes for the second leg is \"beyond\" 180 degrees, the cutoffs for the 180-degree leg cannot be described by a single plane.\n\nAll of this is to avoid traveling a very short distance near the pole.\n\nI maybe have a better idea.  Suppose instead of one test point for each GeoComplexPolygon, we have TWO.  We pick the second one to be the antipodes of the first.  We compute whether it is within or not using the current techniques we have for computing crossings, but since it is on the opposite sides of the world, we know we can reach it without violating any travel restrictions.  Once we have the second test point, we can choose which test point we'll use based on travel plane geometry, so that we don't have problems with any of the travel plane geometries. ",
            "date": "2018-04-26T00:44:59+0000"
        },
        {
            "id": "comment-16453498",
            "author": "Karl Wright",
            "content": "Ignacio Vera I propose restructuring the class along the lines above.  This will take me a while.  Then you can add your specific algorithms for selecting an appropriate choice of test point and travel/testpoint planes. ",
            "date": "2018-04-26T04:43:57+0000"
        },
        {
            "id": "comment-16453543",
            "author": "Ignacio Vera",
            "content": "I have updated the patches with proper numbering and added checks for corner cases on the random test .\n\nYour proposal makes lot of sense, we need to increment our travel choices. ",
            "date": "2018-04-26T06:00:08+0000"
        },
        {
            "id": "comment-16453586",
            "author": "ASF subversion and git services",
            "content": "Commit 15a6b586c79c19177894aae23e63fd1493710c5e in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=15a6b58 ]\n\nLUCENE-8276: Restructure complex polygon class yet again to allow dual test points. ",
            "date": "2018-04-26T06:59:52+0000"
        },
        {
            "id": "comment-16453587",
            "author": "ASF subversion and git services",
            "content": "Commit 0d1b4f26706c0b81acd90827d21be174d21ccfda in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0d1b4f2 ]\n\nLUCENE-8276: Restructure complex polygon class yet again to allow dual test points. ",
            "date": "2018-04-26T07:00:28+0000"
        },
        {
            "id": "comment-16453589",
            "author": "ASF subversion and git services",
            "content": "Commit f6378894e8fd43f39d44db29c5dca21c52ffe7cf in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f637889 ]\n\nLUCENE-8276: Restructure complex polygon class yet again to allow dual test points. ",
            "date": "2018-04-26T07:01:08+0000"
        },
        {
            "id": "comment-16453597",
            "author": "Karl Wright",
            "content": "Ignacio Vera I have committed the restructuring, but not any of your patches, so far.\n\nThe basic idea now is:\n(1) There are two test points.\n(2) isWithin() tries the first one initially.  If it gets an IllegalArgumentException, it tries the second one.\n\nI have made no changes to the logic for deciding which travel legs to use; I am expecting you to add that.\nAlso, I've removed DualCrossingEdgeIterator entirely, in favor of just using the linear edge iterators repeatedly.  So we now find whether the intersection point is in-set first, and then we find whether the check point is in set second.  This allows travel of a full 180 degrees, so you can reach the antipodes now.\n\nI still would like to do some optimizations in the remaining edge iterators, but that should not collide with anything you want to do to address the strategy of choosing travel planes.  I would also hope you can commit your test changes that exercise the particular cases that were a problem before, if they pass. ",
            "date": "2018-04-26T07:07:40+0000"
        },
        {
            "id": "comment-16453787",
            "author": "ASF subversion and git services",
            "content": "Commit 2265ec1947bb52f7cbb3c3f5c05df66c3e7afa80 in lucene-solr's branch refs/heads/master from Simon Willnauer\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=2265ec1 ]\n\nLUCENE-8276: Remove unused imports ",
            "date": "2018-04-26T10:10:53+0000"
        },
        {
            "id": "comment-16453790",
            "author": "Ignacio Vera",
            "content": "I did the changes and got a different error. Now in one of the existing tests the intersection point is on top of one polygon edge and it fails. ",
            "date": "2018-04-26T10:11:43+0000"
        },
        {
            "id": "comment-16453864",
            "author": "ASF subversion and git services",
            "content": "Commit 8e029816cf82b4523c047e04818d16dc940aa72f in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8e02981 ]\n\nLUCENE-8276: Add new tests which demonstrate the issue.  Only one is now failing. ",
            "date": "2018-04-26T11:14:58+0000"
        },
        {
            "id": "comment-16453865",
            "author": "ASF subversion and git services",
            "content": "Commit e75b968a721442175f5f1195e7c1408ee0760621 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e75b968 ]\n\nLUCENE-8276: Add new tests which demonstrate the issue.  Only one is now failing. ",
            "date": "2018-04-26T11:15:28+0000"
        },
        {
            "id": "comment-16453868",
            "author": "ASF subversion and git services",
            "content": "Commit ea0edc27df6b5fde226b5ffc797d0316f5ea3c66 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ea0edc2 ]\n\nLUCENE-8276: Add new tests which demonstrate the issue.  Only one is now failing. ",
            "date": "2018-04-26T11:16:01+0000"
        },
        {
            "id": "comment-16453874",
            "author": "Karl Wright",
            "content": "Ignacio Vera I've committed the tests.  The only one that is failing is _case3 at this time \u2013 it is annotated with \"@AwaitsFix\".  I'll work to resolve that \u2013 but while I was checking that out, a different random test failed.  Reproduction command here:\n\n\nant test  -Dtestcase=TestGeo3DPoint -Dtests.method=testGeo3DRelations -Dtests.seed=1F49469C1989BC0 -Dtests.slow=true -Dtests.badapples=true -\nDtests.locale=fr-BE -Dtests.timezone=Europe/Malta -Dtests.asserts=true -Dtests.file.encoding=Cp1252\n\n\n\nI think we likely should have a new ticket for that failure, since it appears unrelated to the work we've been doing for this ticket. ",
            "date": "2018-04-26T11:20:22+0000"
        },
        {
            "id": "comment-16453898",
            "author": "Ignacio Vera",
            "content": "Not sure, I think it is showing the same issues. You can check one thing, if you set the fololwing:\n\n\u00a0\n\nprivate final static double NEAR_EDGE_CUTOFF = -0.2;\n\n\u00a0\n\nYou see that the failing test works and the failure of the other random test is gone as well. On the other hand there is another failure in test testPolygonFailureCase2 because the intersection point is on\u00a0 one edge.\n\n\u00a0\n\n\u00a0\n\n\u00a0\n\n\u00a0 ",
            "date": "2018-04-26T11:43:31+0000"
        },
        {
            "id": "comment-16453932",
            "author": "Karl Wright",
            "content": "Ignacio Vera, NEAR_EDGE_CUTOFF that large is crazy large.  When I set it to something reasonable, like -MINIMUM_RESOLUTION * 1000.0, I don't get any failures.\n\nI will commit that change at least. ",
            "date": "2018-04-26T12:12:33+0000"
        },
        {
            "id": "comment-16453968",
            "author": "ASF subversion and git services",
            "content": "Commit 9f506635e007ee53498f00e49f67669b099f0506 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9f50663 ]\n\nLUCENE-8276: Don't allow travel near a pole; require a different choice of travel plane ",
            "date": "2018-04-26T12:51:14+0000"
        },
        {
            "id": "comment-16453970",
            "author": "ASF subversion and git services",
            "content": "Commit d8aa4afd4a4e2770965f82e899d3310ded2fe6ff in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d8aa4af ]\n\nLUCENE-8276: Don't allow travel near a pole; require a different choice of travel plane ",
            "date": "2018-04-26T12:52:12+0000"
        },
        {
            "id": "comment-16453971",
            "author": "ASF subversion and git services",
            "content": "Commit f367f3f08e627bfa58d0d3dd80fc211262b89e1b in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f367f3f ]\n\nLUCENE-8276: Don't allow travel near a pole; require a different choice of travel plane ",
            "date": "2018-04-26T12:52:36+0000"
        },
        {
            "id": "comment-16454013",
            "author": "Karl Wright",
            "content": "Ok, that's been committed.  The unrelated failure still occurs, however, so I will create a separate ticket for that and close this one. ",
            "date": "2018-04-26T13:17:21+0000"
        }
    ]
}