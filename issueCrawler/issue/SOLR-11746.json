{
    "id": "SOLR-11746",
    "title": "numeric fields need better error handling for prefix/wildcard syntax -- consider uniform support for \"foo:* == foo:[* TO *]\"",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "On the solr-user mailing list, Torsten Krah pointed out that with Trie numeric fields, query syntax such as foo_d:* has been functionality equivilent to foo_d:[* TO *] and asked why this was not also supported for Point based numeric fields.\n\nThe fact that this type of syntax works (for indexed=\"true\" Trie fields) appears to have been an (untested, undocumented) fluke of Trie fields given that they use indexed terms for the (encoded) numeric terms and inherit the default implementation of FieldType.getPrefixQuery which produces a prefix query against the \"\" (empty string) term.  \n\n(Note that this syntax has aparently never worked for Trie fields with indexed=\"false\" docValues=\"true\" )\n\nIn general, we should assess the behavior users attempt a prefix/wildcard syntax query against numeric fields, as currently the behavior is largely non-sensical:  prefix/wildcard syntax frequently match no docs w/o any sort of error, and the aformentioned numeric_field:* behaves inconsistently between points/trie fields and between indexed/docValued trie fields.",
    "attachments": {
        "SOLR-11746.patch": "https://issues.apache.org/jira/secure/attachment/12905022/SOLR-11746.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-11T21:58:16+0000",
            "content": "...currently the behavior is largely non-sensical: ...\n\nHere's some examples of how solr behaves with a few \"odd\" queries (using the techproducts schema where \"price\" is a FloatPointField)...\n\n\nprice:fo*o - Valid, Matches no docs\nprice:*    - Valid, Matches no docs\nprice:foo* - Error: \"Can't run prefix queries on numeric field\"\n\n\n\nThe combination of the last two particularly confuses me, since clearly PointField is going out of it's way to do some error validation of attempting a prefix query on a numeric field, but somehow that error handling isn't being triggered by the simplest case (empty prefix) AND neither is it able to \"match docs with prices\" (which is what TrieFloatField would do by accident)  ",
            "author": "Hoss Man",
            "id": "comment-16286637"
        },
        {
            "date": "2017-12-13T03:47:32+0000",
            "content": "IMO it should count as a bug that numeric_field:* doesn't work.\nThe fact that it does work with trie fields may have originally been a fluke, but I would have added it if it hadn't worked (didn't realize there were no tests for it...) ",
            "author": "Yonik Seeley",
            "id": "comment-16288675"
        },
        {
            "date": "2017-12-18T18:42:40+0000",
            "content": "IMO it should count as a bug that numeric_field:* doesn't work.\n\n+1\n\nI would go so far as to say thta once we \"fix\" this bug, we should also update QueryEqualityTest to assert that for all indexed/docValues/trie/points permutations of \"primative\" types (numbers, dates, string, boolean) field:* should produce an identical Query object to field:[* TO *] \u2013 so that whatever \"optimizations\" may exist (or be added in the future) in one query parser code path, also happen for the other syntax as well. ",
            "author": "Hoss Man",
            "id": "comment-16295413"
        },
        {
            "date": "2018-01-08T06:00:54+0000",
            "content": "I have added a patch to treat foo:* the same way as foo:[* TO *] for point fields. I hope it is useful as a starting point. ",
            "author": "Kai Chan",
            "id": "comment-16315708"
        },
        {
            "date": "2018-01-12T23:37:02+0000",
            "content": "Kai: Thank you for your patch.\n\nI really don't think we should be special casing points fields in the parser like that \u2013 if for no other reason then that it does nothing to fix the bug with docValue only trie fields, or address the concerns about ensuring these 2 syntaxes are functionally equivalent for all types.\n\nWhat suprised me the most about your patch was realizing that SolrQueryParserBase.getWildcardQuery is the method getting triggered by the grammer when foo:* is parsed \u2013 i assumed it was smart enough to use SolrQueryParserBase.getPrefixQuery with an empty prefix in this case.\n\nI'm attaching a new patch that:\n\n\tmakes getWildcardQuery delegate to getPrefixQuery(...,\"\") when the wildcard pattern is *\n\tmakes FieldType.getPrefixQuery smart enough to delegate to getRangeQuery(parser, sf,null,null,true,true) when the prefix is the empty string\n\tbeefs up the QueryEqualiyTesting to cover more field types\n\tadds new testing to TestSolrQueryParser to ensure that both syntaxes do what is intended: match all docs that contain the specific field.\n\n\n\nI feel like this solution is more robust, and IIUC should even improve the performance of things like StrField and TextField by avoiding the need for an Atomoton that matches all terms\n\nWhat do folks think of this approach? ",
            "author": "Hoss Man",
            "id": "comment-16324739"
        }
    ]
}