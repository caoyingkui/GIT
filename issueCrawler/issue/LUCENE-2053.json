{
    "id": "LUCENE-2053",
    "title": "When thread is interrupted we should throw a clear exception",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "This is the 3.0 followon from LUCENE-1573.  We should throw a dedicated exception, not just RuntimeException.\n\nRecent discussion from java-dev \"Thread.interrupt()\" subject: http://www.lucidimagination.com/search/document/8423f9f0b085034e/thread_interrupt",
    "attachments": {
        "LUCENE-2053.patch": "https://issues.apache.org/jira/secure/attachment/12424834/LUCENE-2053.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-11-12T12:36:39+0000",
            "content": "Here are some names for Exceptions:\n\n\n\tUnexpectedInterruptException extends RuntimeException\n\tIndexerInterruptedException extends RuntimeException\n\tIndexWriterInterruptedException extends RuntimeException\n\tSmartInterruptedException (just a joke)\n\n\n\nAnother possibility would be to use IOException as super class, this would enable users to catch it without changing code and they will correctly log the message and not fallback to default RuntimeException catch in JVM.\n\nThe patch is easy, you have to just find all Thread.interrupt() calls or catch InterruptedException in the code. ",
            "author": "Uwe Schindler",
            "id": "comment-12776973"
        },
        {
            "date": "2009-11-12T13:04:25+0000",
            "content": "How about ThreadInterruptedException?  Maybe under oal.util?\n\nI wouldn't restrict the name/scope to indexing.  Sure, maybe today you can't Thread.interrupt a Lucene search, but maybe in the future we'll allow that and then this same exception should be thrown.\n\nI think it's cleaner to extend RuntimeException.  Right now (2.9) you get a RuntimeException, so extending IOException instead is more of a back compat break.\n\nI just wish InterruptedException had been non-checked from the get-go... ",
            "author": "Michael McCandless",
            "id": "comment-12776982"
        },
        {
            "date": "2009-11-12T13:17:36+0000",
            "content": "So I think we go with RuntimeException.\n\n\n\tThreadInterruptedException\n\tUnexpectedInterruptedException\n\tUncheckedInterruptedException\n\n\n\n... ",
            "author": "Uwe Schindler",
            "id": "comment-12776989"
        },
        {
            "date": "2009-11-12T15:48:59+0000",
            "content": "OK I'll go with ThreadInterruptedException!  I'll wait a while just in case someone has a violent reaction to that name  ",
            "author": "Michael McCandless",
            "id": "comment-12777026"
        },
        {
            "date": "2009-11-13T11:32:49+0000",
            "content": "Attached patch. ",
            "author": "Michael McCandless",
            "id": "comment-12777463"
        },
        {
            "date": "2009-11-15T13:00:41+0000",
            "content": "Reopening to address buggy intermittent test failure... ",
            "author": "Michael McCandless",
            "id": "comment-12778096"
        },
        {
            "date": "2009-11-15T13:37:07+0000",
            "content": "Attached my current approach for fixing the test.\n\nIncludes a silly workaround to not let an interrupted thread hit the class loader.  Weird....\n ",
            "author": "Michael McCandless",
            "id": "comment-12778099"
        },
        {
            "date": "2009-11-15T16:36:36+0000",
            "content": "Patch looks good, even I do not understand it completely. ",
            "author": "Uwe Schindler",
            "id": "comment-12778122"
        },
        {
            "date": "2009-11-15T18:17:24+0000",
            "content": "OK I'll commit shortly.\n\nBasically, with the patch the test is now more careful: the main thread issues the interrupt, and then waits for the child thread to confirm it handled the exception.  This way the main thread won't send another interrupt until the child thread is done handling the last one. ",
            "author": "Michael McCandless",
            "id": "comment-12778139"
        },
        {
            "date": "2009-11-15T18:38:20+0000",
            "content": "OK, trying again! ",
            "author": "Michael McCandless",
            "id": "comment-12778145"
        }
    ]
}