{
    "id": "SOLR-1384",
    "title": "Allow fq or q to specify boolean query min must match like dismax's mm parameter",
    "details": {
        "affect_versions": "1.4",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Dis max query provides \"mm\" parameter that can be set on the underlying Lucene Boolean OR query using setMinimumNumberShouldMatch()  method.\n\nIt will be great if we can have the same support on any fq or q that specifies more than one term. This means we don't need to switch to dis max query just for this one use case.\n\nExample might look like this:\n\nfq=\n{!minMustMatch=75%}\nstreet:\"917 Z st NW Washington DC\"\n\nFull supported syntax for the value allowed should be this:\nhttp://lucene.apache.org/solr/api/org/apache/solr/util/doc-files/min-should-match.html\n\nThis is the underlying lucene facility:\nhttp://www.netlikon.de/docs/javadoc-lucene/lucene_1_9/org/apache/lucene/search/BooleanQuery.html#setMinimumNumberShouldMatch%28int%29",
    "attachments": {
        "SOLR-1384.patch": "https://issues.apache.org/jira/secure/attachment/12418099/SOLR-1384.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12747802",
            "date": "2009-08-26T06:51:49+0000",
            "content": "why should this be limited to 'fq' ? isn't it valid for 'q' as well ? "
        },
        {
            "author": "Preetam Rao",
            "id": "comment-12747819",
            "date": "2009-08-26T07:59:16+0000",
            "content": "I think it should be. Updated the subject of the issue. "
        },
        {
            "author": "Preetam Rao",
            "id": "comment-12749289",
            "date": "2009-08-30T17:24:57+0000",
            "content": "Modified LuceneQParserPlugin.parse() to check if the Query is BooleanQuery and if so apply \"minMustMatch\" using code from SolrPluginUtils as used in DisMaxQParser.getUserQuery().\n\nMy requirementss were below which are working fine.\nUsage that works now is:\nq=\"\n{!minMustMatch=3}\none two three four\"\nfq=\"\n{!minMustMatch=50%}\none two three four\"\n\nFor testing from browser change % to \"%25\" to prevent exception.Added test case in TestQueryUtils. Also, \"ant clean test\" succeeds.\n\nShould it need to handle all cases or is it fine to handle those two simple cases for those who need it ? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12750178",
            "date": "2009-09-01T23:25:33+0000",
            "content": "I haven't looked at the match, but if anything the param should be \"minShouldMatch\" not \"minMustMatch\" ... the word \"Should\" is a noun in this case ... it refers to the fact that the underlying clauses are \"SHOULD\" clauses ... not \"MUST\" clauses.\n\nOff the top of my head: if this is really something people think should be generally supported for all types of queries, then SolrQueryParser seems like the right place to do it, adding anew setDefaultMinShouldMatch method that changes the behavior of all BooleanQuery objects produced \u2013 then LuceneQParserPlugin would just look at the params and set the option on the parser appropriately.\n\nFYI: once upon a time, there was talk in Lucene-Java about extending the syntax to lete you specify this in the query string, using something like...\n\n\n  (boolcluase1 boolclause2 boolclause3)~2\n\n\n\n...hence the reason i suggest thinking of this as a default minshould match on the parser ... some syntaxes in subclasses might override it.\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872618",
            "date": "2010-05-27T22:09:19+0000",
            "content": "Bulk updating 240 Solr issues to set the Fix Version to \"next\" per the process outlined in this email...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E\n\nSelection criteria was \"Unresolved\" with a Fix Version of 1.5, 1.6, 3.1, or 4.0.  email notifications were suppressed.\n\nA unique token for finding these 240 issues in the future: hossversioncleanup20100527 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043846",
            "date": "2011-06-03T16:47:22+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106334",
            "date": "2011-09-16T14:50:37+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13234646",
            "date": "2012-03-21T18:08:42+0000",
            "content": "Bulk of fixVersion=3.6 -> fixVersion=4.0 for issues that have no assignee and have not been updated recently.\n\nemail notification suppressed to prevent mass-spam\npsuedo-unique token identifying these issues: hoss20120321nofix36 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717426",
            "date": "2013-07-23T18:48:12+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971365",
            "date": "2014-04-16T12:57:53+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "ASF GitHub Bot",
            "id": "comment-15967898",
            "date": "2017-04-13T17:12:19+0000",
            "content": "GitHub user timofal opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/186\n\n    SOLR-1384 minShouldMatch parameter is supported for boolean query\n\n    Please consider adding min-should-match support to boolean query. We need it and can't switch to eDisMax because of it's restriction. (eDisMax stops min-should-match processing if it finds boolean operators in subqueries.)\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/timofal/lucene-solr SOLR-1384-minShouldMatch-in-booleanQuery\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/186.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #186\n\n\ncommit 4b0c3cc7b43db581a6e663bd9ca67d2d267e2644\nAuthor: Alexey Timofeev <aleksey.timofeev@macys.com>\nDate:   2017-04-13T15:07:56Z\n\n    SOLR-1384 minShouldMatch parameter is supported for boolean query\n\n "
        },
        {
            "author": "alexey",
            "id": "comment-15967903",
            "date": "2017-04-13T17:17:21+0000",
            "content": "Please consider new patch. MinShouldMatch parameter value moved to SolrQueryParser according to Hoss Man's comment. "
        }
    ]
}