{
    "id": "LUCENE-4078",
    "title": "PatternReplaceCharFilter assertion error",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "Build: https://builds.apache.org/job/Lucene-trunk/1942/\n\n1 tests failed.\nREGRESSION:  org.apache.lucene.analysis.pattern.TestPatternReplaceCharFilter.testRandomStrings\n\nError Message:\n\n\nStack Trace:\njava.lang.AssertionError\n       at __randomizedtesting.SeedInfo.seed([8E91A6AC395FEED9:618A6129A5BB9EC]:0)\n       at org.apache.lucene.analysis.MockTokenizer.readCodePoint(MockTokenizer.java:153)\n       at org.apache.lucene.analysis.MockTokenizer.incrementToken(MockTokenizer.java:123)\n       at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkAnalysisConsistency(BaseTokenStreamTestCase.java:558)\n       at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:488)\n       at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:430)\n       at org.apache.lucene.analysis.BaseTokenStreamTestCase.checkRandomData(BaseTokenStreamTestCase.java:424)\n       at org.apache.lucene.analysis.pattern.TestPatternReplaceCharFilter.testRandomStrings(TestPatternReplaceCharFilter.java:323)\n       at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n       at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n       at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n       at java.lang.reflect.Method.invoke(Method.java:616)\n       at com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1969)\n       at com.carrotsearch.randomizedtesting.RandomizedRunner.access$1100(RandomizedRunner.java:132)\n       at com.carrotsearch.randomizedtesting.RandomizedRunner$6.evaluate(RandomizedRunner.java:814)\n       at com.carrotsearch.randomizedtesting.RandomizedRunner$7.evaluate(RandomizedRunner.java:875)\n       at com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:889)\n       at org.apache.lucene.util.TestRuleSetupTeardownChained$1.evaluate(TestRuleSetupTeardownChained.java:50)\n       at org.apache.lucene.util.TestRuleFieldCacheSanity$1.evaluate(TestRuleFieldCacheSanity.java:32)\n       at org.apache.lucene.util.AbstractBeforeAfterRule$1.evaluate(AbstractBeforeAfterRule.java:45)\n       at com.carrotsearch.randomizedtesting.rules.SystemPropertiesInvariantRule$1.evaluate(SystemPropertiesInvariantRule.java:55)\n       at org.apache.lucene.util.TestRuleReportUncaughtExceptions$1.evaluate(TestRuleReportUncaughtExceptions.java:68)\n       at org.apache.lucene.util.TestRuleThreadAndTestName$1.evaluate(TestRuleThreadAndTestName.java:48)\n       at org.apache.lucene.util.TestRuleMarkFailure$1.evaluate(TestRuleMarkFailure.java:48)\n       at com.carrotsearch.randomizedtesting.RandomizedRunner.runSingleTest(Randomized",
    "attachments": {
        "LUCENE-4078.patch": "https://issues.apache.org/jira/secure/attachment/12529899/LUCENE-4078.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-26T21:32:57+0000",
            "content": "This bug is caused by Robert's evil random Pattern instances. I think it qualifies as a bug in the JDK's implementation... but then, I'm not sure. Here it is \u2013 the Pattern:\n\nPattern p = Pattern.compile(\"]|\");\n\n\nFor those of you who wondered, this also is a valid pattern:\n\nPattern p = Pattern.compile(\"|\");\n\n\nWhat should these match? I have no clue. Are they even valid? I have no clue. Anyway, what happens is that surrogate pairs (and everything else) is divided, so:\n\n    String s1 = \"AB\\uD840\\uDC00C\";\n    String s2 = s1.replaceAll(\"]|\", \"xyz\");\n    System.out.println(s1);\n    System.out.println(s2);\n\n\nresults in:\n\nAB\ud840\udc00C\nxyzAxyzBxyz?xyz?xyzCxyz\n\n\nand an assertion is righteously thrown saying a surrogate pair is broken.\n\nDon't know what to do with this. Robert? ",
            "author": "Dawid Weiss",
            "id": "comment-13284070"
        },
        {
            "date": "2012-05-26T21:41:35+0000",
            "content": "I just checked perl... these do seem to be valid regexps! (they work in perl...) I don't know how to interpret them though.  ",
            "author": "Dawid Weiss",
            "id": "comment-13284072"
        },
        {
            "date": "2012-05-26T22:03:55+0000",
            "content": "More insanity:\n\n    String s1 = \"AB\\uD840\\uDC00C\";\n    String s2 = s1.replaceAll(\"\", \"xyz\");\n\n\n\n    String s1 = \"AB\\uD840\\uDC00C\";\n    String s2 = s1.replaceAll(\"|||||||||||||||||||||||||||||||\", \"xyz\");\n\n\nThese are equivalent. \n\nWhen you think of it '|' is not an operator, it is an alternative that simply splits (the automaton) into two conditional paths. Since preconditions and post-conditions are empty, these paths converge into an empty state. Which matches on every character. Which seems to be a bug because it matches on every char[] instead of codepoint ('.' matches each codepoint).\n\nDon't know what to make of it. ",
            "author": "Dawid Weiss",
            "id": "comment-13284075"
        },
        {
            "date": "2012-05-26T22:19:07+0000",
            "content": "When you think of it '|' is not an operator ...\n\nI'm not really following you there ... '|' is the OR operator, so the regex \"|\" is a redundant way of saying \"\" which is \"the empty pattern\" or a way of saying \"match the empty string\".  \n\nConsider in particular when the regex is used for a replace or split type operation: \"z|\" means \"match z or the empty string\"...\n\n\n$ perl -MData::Dumper -le 'print Dumper split /z|/, \"ABzCD\";'\n$VAR1 = 'A';\n$VAR2 = 'B';\n$VAR3 = 'C';\n$VAR4 = 'D';\n\n\n\nYou should see similar results in java with if you use Matcher.find() as an iterator.\n\nAs for the original pattern: \"]|\" \u2013 that's just a convince form of (imposible to write this in jira markup w/o code tags)...\n\n\\]|\n\n .. an unescaped close bracket (that has no matching open bracket) is treated as a literal...\n\n\n$ perl -MData::Dumper -le 'print Dumper split /]|/, \"AB]CD\";'\n$VAR1 = 'A';\n$VAR2 = 'B';\n$VAR3 = 'C';\n$VAR4 = 'D';\n\n\n\nWhat i can't explain, is why java treats \"empty string\" as something that matches in the middle of a code point.  that certainly sounds like bug, unless there is some subtlety in Unicode TR#18 that i'm not seeing...\n\nhttp://www.unicode.org/reports/tr18/ ",
            "author": "Hoss Man",
            "id": "comment-13284080"
        },
        {
            "date": "2012-05-26T22:44:07+0000",
            "content": "I'm not really following you there ... '|' is the OR operator, so the regex \"|\" is a redundant way of saying \"\" which is \"the empty pattern\" or a way of saying \"match the empty string\".\n\nYeah, I am a bit surprised at what \"\" matches. It doesn't match an empty string. It matches an empty string in between characters... or in other words, it matches what's not there. Makes sense when you think of it.\n\nAs for '|', I looked at it from automata theory point of view \u2013 '|' doesn't need any arguments or post-arguments (or states), unlike '', '*' or the like which need a state to reference. I'd be convinced '|' is a consistent way of saying 'match empty string or empty string' if \"\" pattern worked (\"match empty string one or more times\"), but it doesn't \u2013 this will fail with an error. So '|' is kind of special here.\n\nI don't know much about regexp theory to argue if I'm right or wrong though. I don't even think there is one \"right\" way to do things if this is a true quote:\n\nI define UNIX as \u201c30 definitions of regular expressions living under one roof.\u201d \u2014Don Knuth\n\nDawid ",
            "author": "Dawid Weiss",
            "id": "comment-13284087"
        },
        {
            "date": "2012-05-27T06:53:52+0000",
            "content": "It doesn't match an empty string. It matches an empty string in between characters...\n\nWell, it's more complicated then that.  it does match the empty string (in the sense of \"does this regex match this entire string which happens to be empty) but in the context of \"find\" or \"replace\" on a larger string you are correct that it matches nothing, which means it matches the emptiness between characters.\n\nI'd be convinced '|' is a consistent way of saying 'match empty string or empty string' if \"+\" pattern worked (\"match empty string one or more times\"), but it doesn't \u2013 this will fail with an error. So '|' is kind of special here.\n\nI think that's just a fluke of syntax/precedence ... if you use parens (capturing or otherwise) you can say \"match the empty pattern 1 or more times)...\n\n\n$ perl -MData::Dumper -le 'print Dumper split /(?:)+/, \"ABCD\";'\n$VAR1 = 'A';\n$VAR2 = 'B';\n$VAR3 = 'C';\n$VAR4 = 'D';\n\n\n\nBottom Line: these patterns are all valid and meaningful, and everything we've discussed is tangential to the problem \u2013 which seems to be that the JVM lets the empty pattern split in between chars instead of codepoints, which seems like a bug. ",
            "author": "Hoss Man",
            "id": "comment-13284113"
        },
        {
            "date": "2012-05-27T08:51:07+0000",
            "content": "Thanks for the insight \u2013 interesting.\n\nis tangential to the problem \u2013 which seems to be that the JVM lets the empty pattern split in between chars instead of codepoints, which seems like a bug.\n\nAbsolutely. This seems like a bug to me too. ",
            "author": "Dawid Weiss",
            "id": "comment-13284124"
        },
        {
            "date": "2012-05-27T18:15:03+0000",
            "content": "I checked python3 and it works according to the intuition (works on codepoints). I also asked on openjdk's i18n mailing list about where to file it.\n\nIn the mean time I'll fix it by looping the random pattern generator until it processes a non-bmp character so that the returned string is valid utf16. ",
            "author": "Dawid Weiss",
            "id": "comment-13284193"
        },
        {
            "date": "2012-05-27T18:23:12+0000",
            "content": "This doesn't filter out all invalid possibilities but should protect against some (including the one that caused this issue)? ",
            "author": "Dawid Weiss",
            "id": "comment-13284196"
        },
        {
            "date": "2012-05-28T12:33:39+0000",
            "content": "This is very likely a JDK bug. I committed a patch that works around some of the trivial random patterns but it's definitely not a full resolution of the problem. ",
            "author": "Dawid Weiss",
            "id": "comment-13284387"
        },
        {
            "date": "2012-06-08T21:18:29+0000",
            "content": "Follow-up discussion on core-libs-dev. The bottom line: this is the expected behavior... \n\nhttp://mail.openjdk.java.net/pipermail/core-libs-dev/2012-June/010455.html ",
            "author": "Dawid Weiss",
            "id": "comment-13291996"
        }
    ]
}