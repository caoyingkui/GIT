{
    "id": "SOLR-10880",
    "title": "Support replica filtering by tag: shards.filter=replicaProp.region:EMEA",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Add a mechanism to allow queries to use only a subset of replicas(by specifying the wanted replica tag).\n\nReplicas have to be marked with tags before running the query.\n\nSetup needed from the replica side\nSet the required properties to the required values in at least one replica.\n\nSetup needed from the query side\n\nA query has to specify ShardParams.FILTER_BY_REPLICA_PROPERTY to specify that it is indeed interested in replica property filtering.\nThen it should specify ShardParams.SHARDS_FILTER or ShardParams.SHARDS_FILTERNOT set to ShardParams.REPLICA_PROP followed by the property that has to be checked followed by \":\" and then the value wanted.\nExcample:\nGiven that some replicas have a property named region:\n\nAdding the following params to the query:\nfilterByReplicaProp=true&shards.filter=replicaProp.region:EMEA\nwill ensure that the query uses replicas that have the property region set to EMEA\n\nfilterByReplicaProp=true&shards.filterNot=replicaProp.region:EMEA\nwill ensure that the query does not use replica that have the property region set to EMEA \n\n\nAn example can be seen in the ReplicaTagTest included in this patch where a dynamic cloud has some tags assigned to it both randomly and on a fixed basis.\n\nA replica can have multiple tags attached to it, and these tags are separated by default by \"|\"(pipe character), the delimiter can be changed by setting ShardParams.REPLICA_TAG_DELIMITER in the query to anything else.\n\nThe ShardParams.FILTER_BY_REPLICA_PROPERTY is needed because the computation required to filter by property:value is quite complex and queries that don't care about replica filtering should not incur into the performance penalty.\n\nThe ShardParams.REPLICA_PROP (currently set to replicaProp. is needed to ensure that the system is extensible in the future.\n\nUsage warnings\n\nUsing ShardParams.SHARDS_FILTER or ShardParams.SHARDS_FILTERNOT set to ShardParams.REPLICA_PROP without ShardParams.FILTER_BY_REPLICA_PROPERTY will cause the QueryComponent to throw exceptions.\n\nUsing ShardParams.FILTER_BY_REPLICA_PROPERTY without filters will not cause any error, but will likely waste computation time.\n\nNo validity check is performed on the tags, therefore one may get an array of shard URLs that contains empty URLs, or that is null(when the property does not exist), the user of this feature has to deal with it.",
    "attachments": {
        "SOLR-10880.patch": "https://issues.apache.org/jira/secure/attachment/12872828/SOLR-10880.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-06-13T22:19:22+0000",
            "content": "Can you give a real-world example for what to use this feature for? Is it somehow connected to the new replication modes? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16048479"
        },
        {
            "date": "2017-06-14T08:47:04+0000",
            "content": "This can be used as a solution for https://issues.apache.org/jira/browse/SOLR-10484 (not ideal, but one could mark all the replicas not under maintenance somehow and then use only those) and is also useful for the Canary component(SOLR-10610) as the requests that it produces should only be handled by canary replicas. ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16048882"
        },
        {
            "date": "2017-06-16T17:27:24+0000",
            "content": "(Disclosure: Domenico and I are in the same team and so I've already internally had input into the ideas and the initial code patch here.)\n\n\n\n... Is it somehow connected to the new replication modes?\n\nNo, I don't think this is related to the replication modes.\n\nCan you give a real-world example for what to use this feature for? ...\n\nScenario 1: separation of (say) heavy analytics requests\n\n\n\treplicas (temporarily or permanently) designated to handle analytics requests are via the ADDREPLICAPROP API marked to be of 'analytics' flavour.\n\tanalytics requests ask to be routed to analytics flavour replicas\n\n\n\n\n/admin/collections?action=ADDREPLICAPROP&...&property=replicaFlavour&property.value=analytics\n\n....../select?replicaFlavour.like=analytics\nor\n....../select_analytics where replicaFlavour.like=analytics default or invariant is configured\n\n/admin/collections?action=DELETEREPLICAPROP&...&property=replicaFlavour\n\n\n\n\nScenario 2: avoidance of certain replicas\n\n\n\trequests might wish to avoid certain replicas e.g. because they are on hosts under going maintenance (the scenario Erick Erickson outlined in SOLR-10484)\n\trequests ask not to be routed to under-maintenance flavour replicas\n\n\n\n\n/admin/collections?action=ADDREPLICAPROP&...&property=replicaFlavour&property.value=maintenance\n\n....../select?replicaFlavour.dislike=maintenance\nor\n....../select_not_mm where replicaFlavour.dislike=maintenance default or invariant is configured\n\n/admin/collections?action=DELETEREPLICAPROP&...&property=replicaFlavour\n\n\n\nScenario 3: canary functionality\n\n\n\tSOLR-10610 proposes a CanaryComponent\n\trequests can ask that replicas with a certain flavour be used for the canary request(s)\n\n\n\n\n/admin/collections?action=ADDREPLICAPROP&...&property=replicaFlavour&property.value=yellow\n\n....../select?replicaFlavour.canary=yellow\n\n/admin/collections?action=DELETEREPLICAPROP&...&property=replicaFlavour\n\n\n\n\n\nreplicaFlavour is a tentative name, we would have to replace it with something that doesn't have the 'flavour' vs. 'flavor' misspelling potential but also something that is sufficiently distinct from the concepts of 'replication mode' and 'replica role'.\n\nreplicaFlavour.like and replicaFlavour.dislike and replicaFlavour.canary style dot parameter notation would allow for the HttpShardHandler to look for parameters starting with replicaFlavour. and to only for those requests build the data structures required to support the like/dislike/canary logic. ",
            "author": "Christine Poerschke",
            "id": "comment-16052163"
        },
        {
            "date": "2017-06-16T20:29:38+0000",
            "content": "What about a generic tagging possibility - replica.tag which can then be used for anything from query routing to replica placement? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16052346"
        },
        {
            "date": "2017-06-19T08:44:14+0000",
            "content": "replica.tag is a much better name, will update the patch ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16053629"
        },
        {
            "date": "2017-06-19T17:20:27+0000",
            "content": "Patch updated ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16054386"
        },
        {
            "date": "2017-06-29T20:14:16+0000",
            "content": "I didn't look at the patch yet, but I like the idea. \nWhat about a generic tagging possibility\n+1\n\n... Is it somehow connected to the new replication modes?\nNo, I don't think this is related to the replication modes.\nMaybe it could? We need a way to query specific types of replicas (i.e. only PULL replicas), this could be the way to do it too. I'll take a look at the patch next week ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16068913"
        },
        {
            "date": "2017-07-21T10:19:29+0000",
            "content": "Updated patch, it now supports replica tag disliking and looks cleaner overall ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16096103"
        },
        {
            "date": "2017-08-10T09:11:27+0000",
            "content": "Use getProperty from SOLR-11090 ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16121305"
        },
        {
            "date": "2017-08-10T17:15:04+0000",
            "content": "Hi Domenico, thanks for working on this. \nAs I said, I'd like this to also be usable for replica types in addition to tags, so I'd like the syntax to be ready for that extension at least, even if support for replica types is not added as part of this Jira. I'd like to suggest a different syntax, what do you think about:\n\n&shards.filter=replicaProp:red\n\n\nI think \"shards.filter\" is a good idea because this is like an extension of the feature that allows you to explicitly choose the shards or replicas when using SolrCloud  that we have today (e.g. &shards=shard1). In the future, we could add things like:\n\n&shards.filter=replicaType:PULL\n\n\nTo query only replicas of type PULL, or \n\n&shards.filter=nodeRole:analytics\n\n\nif we extend the use of node roles in the future ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16121928"
        },
        {
            "date": "2017-08-22T15:46:25+0000",
            "content": "Current implementation:\nReplicas need to be \"tagged\" using replica properties:\nfor example the property \"flavour\" is set to \"banana|vanilla\"\n\nThe requests then need to specify what's the name of the property to be looked up (in this case \"flavour\") using the parameter \"replica.tag.name\"\nand then they need to specify that they \"like\" a value for that property (that is, they are interested exclusively in the replicas that have that value)\nExample:\n\nreplica.tag.name=flavour&replica.like=banana\n\n\n\nRequests can otherwise specify that they want replicas that do not match a value (\"dislike\")\nExample:\n\n\nreplica.tag.name=flavour&replica.dislike=vanilla\n\n\n\nThis behaviour however is not very extensible and does not provide enough support for SOLR-10610\n\nProposal:\nFollowing the suggestions from Tom\u00e1s, me and Christine tried to come up with a solution that is both extensible and practical from a user point of view.\nAnd it is described as follows:\n\nPlease note that this is just a proposal and the code has not been written yet (however it shouldn't differ too much from the current implementation)\n\nReplicas have to be tagged using replica properties (separated by | in this example):\nExample:\n\nShard1replica1 has birdColour=yellow and region=EMEA\nshard2replica2 has region=US\nshard3replica1 has birdColour=red\n\nIn order to use shard filtering, the requests need to have the parameter \n\nfilterByReplicaProp\n\n set to true.\nThis is needed as the computation for property filtering can be expensive(with big number of replicas or properties) and the overhead may be noticeable.\n\nTo use the replicas that have a specific property set to a specific value (\"filter\")\n\nThe request then should have the parameter \n\nshards.filter\n\n set to \n\nreplicaProp.PROPERTY_NAME:PROPERTY_VALUE\n\nExample:\n\nfilterByReplicaProp=true&shards.filter=replicaProp.region:EMEA\n\n\nWhich means that the replica properties need to be inspected and that the request should only be executed on replicas that have the property \n\nregion\n\n set to \n\nEMEA\n\nGiven the tag setup as above, this will only yield shard1replica1. \n\nTo use the replicas that do not have a specific property set to a specific value:\nThe request should have the parameter \n\nshards.filterNot\n\n set to \n\nreplicaProp.PROPERTY_NAME:PROPERTY_VALUE\n\nExample\nFor the purpose of this example let's suppose that there is a replica (shard3replica2) that is under maintenance, and therefore it is tagged with:\n\nmaintenance=yes\n\n\nThen the request would need to have:\n\nfilterByReplicaProp=true&shards.filterNot=replicaProp.maintenance:yes\n\n\nThis means that the replica properties need to be inspected and that the request should be executed on replicas that do not have \"maintenance\" set to \"yes\"\n\nUsing \n\nshards.filter=replicaProp...\n\n or \n\nshards.filterNot=replicaProp...\n\n without specifying \n\nfilterByReplicaProp=true\n\n will cause exceptions.\nUsing \n\nfilterByReplicaProp=true\n\n without specifying a filter will not cause exceptions but is fundamentally useless and wastes computation time.\nFiltering or filterNot on a property that is not present on any replica is likely to cause exceptions (this is an implementation detail).\n\nAn extension to this proposal is one for Canary ( SOLR-10610 ):\nGiven a suitably tagged environment, the requests willing to use the canary component will have to specify both the \n\nfilterByReplicaProp=true\n\n and then the \n\ncanary\n\n parameter set to \n\nPROPERTY_NAME:PROPERTY_VALUE\n\n, for example:\n\nfilterByReplicaProp=true&canary=birdColour:yellow\n\n\nWhich means, the replica properties need to be inspected and that the canary component has to use the \"canaries\" that have the property \n\nbirdColour\n\n set to \n\nyellow\n\n\nThe use of \n\ncanary\n\n allows to clearly separate shard filtering with canary while offering a similar feature.\n\nFor further information on this component please refer to SOLR-10610 .\n\nUnfortunately, due to implementation details, we could not come up with a solution that did not involve \n\nfilterByReplicaProp\n\n or similar flags.\nThis is due to HttpShardHandler (the only place that has access to all the replicas and their properties) being executed before any component and hiding the Replica class to the components (the components are only given back a list of URLs and finding the replicas associated with each URL would be a clear violation of encapsulation and separation of concerns).\nFurthermore, we do not want HttpShardHandler to care about what the components are going to do with the replica properties to not tie it to a specific implementation or add a myriad of conditionals during its execution.\n\nFuture extensions (out of scope for this patch):\n\n\n\tReplica type filtering could be supported via:\n \n\nshards.filter=replicaType:PULL\n\n which means: only use replicas whose type is PULL\n\tand similarly to above:\n \n\nshards.filterNot=replicaType:NRT\n\n which means: exclude all the replicas whose type is NRT\n\n\n\n\n\tNode role filtering is also a possible extension, for example:\n \n\nshards.filter=nodeRole:analytics\n\n which means: only use replicas whose role is analytics\n\tand similarly to above:\n \n\nshards.filterNot=nodeRole:overseer\n\n which means: exclude all the replicas whose role is overseer\n\n ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16136969"
        },
        {
            "date": "2017-09-11T11:06:09+0000",
            "content": "Upload new patch to match proposal ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16161074"
        },
        {
            "date": "2017-09-11T11:11:56+0000",
            "content": "Add code patch to match latest proposal ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16161085"
        },
        {
            "date": "2017-09-19T16:38:32+0000",
            "content": "Hi Domenico,\n\nThanks for continuing to work on this by updating the patch!\n\nHaving not looked at the new code in a while, I somewhat struggled to find my way back into it: the new replica filtering logic is flexible and powerful but because of that its code is naturally quite complex too.\n\nAttached revised patch\n\n\ttweaks mainly the TagReplicaMapper code to try and make it more accessible, also added some more comments\n\tstarts a section for the new params in the Distributed Requests section of the Solr Reference Guide\n\tadds couple of TODO/question comments (no biggies, just bits that jumped out when looking at the code again after a while)\n\n\n\nNew parameter syntax question\nHow about turning\n\nshards.filter=replicaProp.continent:europe\n\n\ninto\n\nshards.filter=replicaProp:continent=europe\n\n\nto match the potential future\n\nshards.filter=replicaType:NRT\n\n\nand/or\n\nshards.filterNot=nodeRole:overseer\n\n\nstyle? ",
            "author": "Christine Poerschke",
            "id": "comment-16172001"
        },
        {
            "date": "2017-09-21T10:00:47+0000",
            "content": "Updated patch to match Christine's suggestions.\nThere's a small behaviour change, it is now safe to run ShardParams.FILTERNOT with a property/value that is not existing on any replica. ",
            "author": "Domenico Fabio Marino",
            "id": "comment-16174518"
        }
    ]
}