{
    "id": "LUCENE-3655",
    "title": "Add Maven artifact checks to dev-tools/scripts/smokeTestRelease.py",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "general/build"
        ],
        "type": "Task",
        "fix_versions": [
            "3.6"
        ],
        "affect_versions": "3.5",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "smokeTestRelease.py should examine the Maven artifacts in a Lucene/Solr release.",
    "attachments": {
        "LUCENE-3655.patch": "https://issues.apache.org/jira/secure/attachment/12507867/LUCENE-3655.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-19T05:30:42+0000",
            "content": "Patch against smokeTestRelease.py\n\nI have not yet run the full script against a release with this patch - I commented out the other checks and then ran just the Maven checks.\n\nThe additional Maven artifact checks reveal two classes of problems with the final 3.5.0 release candidate http://people.apache.org/~simonw/staging_area/lucene-solr-3.5.0-RC2-rev1204988:\n\n\n\tThe Solr war Maven artifact was not being signed.  (I have fixed this issue with the build.)\n\tThe Lucene (and probably Solr too) javadoc and binary jars are being built twice, once for the non-Maven artifacts, and again for the Maven artifacts.  This results in timestamp differences in the jar manifests and in some javadoc HTML files.  I think these should only be built once.\n\n\n\nI guess the good news is that the above two are the only problems uncovered by the new Maven artifact checks.\n\nThis is my first attempt at Python scripting, so I welcome pythonic style critiques. ",
            "author": "Steve Rowe",
            "id": "comment-13172035"
        },
        {
            "date": "2011-12-19T13:50:48+0000",
            "content": "The python style looks great!  You don't need to do the C-battle-scars \"if -1 == XXX:\" (ie python will catch you if you do \"if XXX = -1:\" by accident), but no need to change that.\n\nlibxml2 isn't always available (at least on my OS X box it isn't installed); is it possible to use the \"xml\" module instead?  Or does it not have the features you need....? (And, is it always installed...?).\n\nif not, maybe we can make the maven checking optional, ie if the import fails then you get a warning that maven checking was not done...\n\nI don't feel qualified to understand if the functions are doing the right thing... but that sure is a LOT of Python code   Maven requires a lot of verifying I guess... it's awesome it catches the two problems from 3.5.0. ",
            "author": "Michael McCandless",
            "id": "comment-13172277"
        },
        {
            "date": "2011-12-19T16:44:55+0000",
            "content": "Thanks for the review!\n\nlibxml2 isn't always available (at least on my OS X box it isn't installed); is it possible to use the \"xml\" module instead? Or does it not have the features you need....? (And, is it always installed...?).\n\nlibxml2 enables XPath queries, which simplify the POM content checks.  I thought libxml2 was generally installed - it is installed in my Cygwin installation - but I guess not.  I tried using the \"lxml\" module, since it also includes XPath, and is said by several random Internet denizens to have a more pythonic API than libxml2, but the \"lxml\" module is not installed in my Cygwin distribution, and my (admittedly low-effort) attempt to install it wasn't successful .  \n\nMike, do you know of any surveys of python modules' inclusion in different distributions?\n\nI'll look into switching to the \"xml\" module and using DOM rather than XPath queries.  \n\nthat sure is a LOT of Python code Maven requires a lot of verifying I guess...\n\nThree sources of code volume here: \n\n\n\tI tried to minimize changes in existing parts of the script, so there is duplication in several places (e.g. signature and hash checks).\n\tI attempted to isolate each type of check to minimize function length and simplify maintenance; as a result, setup code is duplicated.\n\tAs you say, there's lots of verifying to do:\n\t\n\t\tThe Maven release artifacts are separately deployed in non-shallow directory hierchies, unlike the Lucene/Solr release packages, so a recursive crawl is required to collect them.\n\t\tEach artifact has detached metadata (the POM), source, and javadoc jars that need to be validated.\n\t\tSince the deployed POMs don't tell me if anything is missing, in order to figure out what should be deployed, I have to do a recursive crawl against the Subversion release branch to collect the POM templates.\n\t\tMost of the Maven artifacts are copies of those in the Lucene/Solr distributions, so in contrast to the regular binary distributions' case, the Maven copies have to be verified as identical to their sources.  In the case of the non-Mavenized dependencies that are published as Lucene and Solr artifacts, the deployed Maven .jar names are different from their sources, so a map has to be created to track the Maven artifact copies back to their sources.\n\t\n\t\n\n\n\nThe first of these could be addressed by refactoring.  The second could be addressed without creating huge function bodies by merging functions with the same setup code, then making new functions that are called from inner loops.  And the third is just the nature of the beast - I guess we could do less verifying, but that direction wouldn't get my vote .\n ",
            "author": "Steve Rowe",
            "id": "comment-13172391"
        },
        {
            "date": "2011-12-19T17:54:16+0000",
            "content": "I think it's OK to stick w/ libxml2 then?  Since you have it working already...\n\nI don't know of any survey's about what's included and what isn't in Python.  There's the docs for python's \"standard library\" (http://docs.python.org/library/) \u2013 I guess that's the LCD.\n\nThe large volume of code is perfectly fine \u2013 we can refactor later.  And I completely agree we want all the verification we can get...\n\nAnd it's great that now we won't repeat the maven problems for 3.5.0... nice work! ",
            "author": "Michael McCandless",
            "id": "comment-13172450"
        },
        {
            "date": "2011-12-29T05:26:21+0000",
            "content": "I don't know of any survey's about what's included and what isn't in Python. There's the docs for python's \"standard library\" (http://docs.python.org/library/) - I guess that's the LCD.\n\nThe list of modules distributed with Python is here: http://docs.python.org/modindex.html.  libxml2 isn't on this list.  xml.etree.ElementTree is, though, so I've rewritten the patch to use it instead of libxml2. ",
            "author": "Steve Rowe",
            "id": "comment-13176998"
        },
        {
            "date": "2011-12-29T05:37:00+0000",
            "content": "Modified the patch to use the xml.etree.ElementTree module, which is part of the base Python distribution, instead of the libxml2 module, which is not.\n\nOn Cygwin, which I use, Python is at v2.6, which doesn't include xml.etree.ElementTree v1.3, so the XPath support doesn't include attribute predicates; as a result, I had to break XPath queries where attribute checks are needed and perform them with code. ",
            "author": "Steve Rowe",
            "id": "comment-13177000"
        },
        {
            "date": "2011-12-30T00:42:17+0000",
            "content": "In this version of the patch: under Cygwin, the classpath separator is a semicolon (to allow Windows JVMs to function).\n\nWith this change, I successfully ran the whole script on Cygwin under Windows 7 (after commenting out the maven checks that fail for the 3.5.0 release: the Solr .war sig; and the maven artifacts being identical with their counterparts in the binary release).\n\nI'll commit this shortly. ",
            "author": "Steve Rowe",
            "id": "comment-13177476"
        },
        {
            "date": "2012-01-03T13:33:39+0000",
            "content": "Nice work Steven!  It's great to have Maven smoke tested now... ",
            "author": "Michael McCandless",
            "id": "comment-13178731"
        }
    ]
}