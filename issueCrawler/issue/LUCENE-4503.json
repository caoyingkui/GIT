{
    "id": "LUCENE-4503",
    "title": "MoreLikeThis supports multiple index readers.",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "",
    "attachments": {
        "MoreLikeThis.java.patch": "https://issues.apache.org/jira/secure/attachment/12550639/MoreLikeThis.java.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-10-24T15:41:24+0000",
            "content": "Uploading the improved MoreLikeThis in the attached patch file. ",
            "author": "Ying Andrews",
            "id": "comment-13483321"
        },
        {
            "date": "2012-10-24T15:42:25+0000",
            "content": "\n\tAdded support for multiple index readers so More Like This can generate a similary query based on multiple indexes.\n\tThis extends the MoreLikeThis feature to work with lucene MultSsearcher.\n\t\n\tFor example:\n\tDue to large size we may want to divide all sales index into: sales_1, sale_2, sales_3, ..., sales_n.\n\tIn this case we would best use parallel multi-searcher to do the search. Old MoreLikeThis.java doesn't support\n\tthis scenario.  If the current document of interest comes from index sales_1, then the query returned from\n\tlike(int) and like(Reader, String) will only be based on index sales_1, which apparently does not reflect the\n\tentirety of the whole document population.\n\t\n\tModified:\n\tconstructors   - MoreLikeThis(IndexReader),\n\tMoreLikeThis(IndexReader, Similarity)\n\tprivate method - createQueue(Map<String, Int>)\n\t\n\tAdded:\n\tconstructors   - MoreLikeThis(IndexReader, IndexReader[]),\n\tMoreLikeThis(IndexReader, IndexReader[], Similarity)\n\t\n\tNotes:\n\tWhen invoking method like(int) of this class, you have to pass in the NORMALIZED document number.\n\tYou can use the same algorithm used in lucene MultiSearcher class, specifically seen in\n\tsubSearcher(int) and subDoc(int) methods.\n\n ",
            "author": "Ying Andrews",
            "id": "comment-13483322"
        },
        {
            "date": "2012-10-24T15:58:25+0000",
            "content": "Can't you just pass a MultiReader instead? ",
            "author": "Robert Muir",
            "id": "comment-13483340"
        },
        {
            "date": "2012-10-24T19:09:05+0000",
            "content": "Thanks for pointing it out, Robert.\n\nIn the application I worked on, we had to support a mix of local and remote searchers. Due to the large scale and heterogeneous nature of our  systems we had to be able to search anything that implements \"Searchable\".  We also had to take advantage of ParallelMultiSearcher to boost the performance. In a special case we had a ParallelMultiSearcher consisted of a group of local file indexes, a group of remote searchers whose data may come further from other remote searchers (kind like a tree) and one searcher that gets data from a SolrServer over the network. Therefore we had to adopt MultiSearcher instead of MultiReader strategy. We recently added MoreLikeThis feature into our heterogenous system. As you can see MultiReader is not an option in our environment. The links below roughly explains my situation.  Thank you.\n\nhttp://lucene.472066.n3.nabble.com/MultiSearcher-vs-MultiReader-td546968.html\nhttp://mail-archives.apache.org/mod_mbox/lucene-java-user/200712.mbox/%3COF924D8F48.261C9541-ONC22573A5.0077E70D-C22573A5.007A94D3@il.ibm.com%3E ",
            "author": "Ying Andrews",
            "id": "comment-13483486"
        }
    ]
}