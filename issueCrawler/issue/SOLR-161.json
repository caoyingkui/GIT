{
    "id": "SOLR-161",
    "title": "Dangling dash causes stack trace",
    "details": {
        "affect_versions": "1.1.0",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I'm running tests from our search logs, and we have a query that ends in a dash. That caused a stack trace.\n\norg.apache.lucene.queryParser.ParseException: Cannot parse 'digging for the truth -': Encountered \"<EOF>\" at line 1, column 23.\nWas expecting one of:\n    \"(\" ...\n    <QUOTED> ...\n    <TERM> ...\n    <PREFIXTERM> ...\n    <WILDTERM> ...\n    \"[\" ...\n    \"{\" ...\n    <NUMBER> ...\n\n\tat org.apache.lucene.queryParser.QueryParser.parse(QueryParser.java:127)\n\tat org.apache.solr.request.DisMaxRequestHandler.handleRequest(DisMaxRequestHandler.java:272)\n\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:595)\n\tat org.apache.solr.servlet.SolrServlet.doGet(SolrServlet.java:92)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-12473580",
            "date": "2007-02-16T01:18:17+0000",
            "content": "Hmm... yeah, that's the trade off of DisMax respecting + and - as special characters and not escaping them.\n\nI guess we should add some preprocessing rules to deal with this ... i wonder if maybe we should just allow a regex to be specified in the init params for letting users strip arbitrary patterns.\n\nHmm... should a regex like that be applied before or after the call to partialEscape? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12473603",
            "date": "2007-02-16T04:11:26+0000",
            "content": "\"do what i mean\" isn't always easy.\n\nIf you want to allow people to express + and - like many search engines, perhaps only treat +/- as special if proceeded by whitespace (or if they are the first character), and followed by non whitespace?\nThe only exception to that off the top of my head would be a negative number. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12473610",
            "date": "2007-02-16T05:00:16+0000",
            "content": "i'm thinking the default should be to always assume they are special, but allow for a regex based rules that will preprocess the input and can handle the types of situations you describe.\n\n(i was thinking before a stripping regex \u2013 but an ordered list of replacement regexes would be more flexible). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12473622",
            "date": "2007-02-16T06:07:26+0000",
            "content": "Strikes me as more of an implementation detail... most people aren't going to think about configuring regex rules for the dismax handler until something breaks.  Setting up regex rules that will make things better and not worse sound hard too.  Should this really be externally configurable?  Perhaps some examples would make it clearer for me. "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-12473625",
            "date": "2007-02-16T06:16:29+0000",
            "content": "The parser can have a rule for this rather than exploding. A trailing dash is never meaningful and can be omitted, whether we're allowing +/- or not. Seems like a grammar bug to me. --wunder "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12473627",
            "date": "2007-02-16T06:29:18+0000",
            "content": "A trailing dash is never meaningful, but should it be striped, escaped, or treated as an error (assuming the error message is improved)\n\nAs for examples of what i'm thinking:\n\n\ta regex that escapes '-' if it appears before a sequence of digits\n     (negative number? or prohibited number?)\n\ta regex that escapes '\"' if it apears at the end of a sequence of digits, and no\n     other instance of '\"' proceeds it in the string.\n     (inches? or unterminated phrase query?)\n\ta regex that strips (or escapes) '-' or '+' characters that are ajacent only to whitespace\n     or the start/end tokens of the string\n     (literals? garbage to be ignored? or malformed mandatory/prohibited modifiers?)\n\n\n\n...basically any of the types of preprocessing i ever considered hardcoding into dismax, but then decided not to because i was afraid someone would say \"that's not what i want, and there's no way to turn it off\" "
        },
        {
            "author": "Walter Underwood",
            "id": "comment-12473628",
            "date": "2007-02-16T06:38:08+0000",
            "content": "It is really a Lucene query parser bug, but it wouldn't hurt to do s/(.*)-/&/ as a workaround. Assuming my ed(1) syntax is still fresh. Regardless, no query string should ever give a stack trace. --wunder "
        },
        {
            "author": "Mike Klaas",
            "id": "comment-12602038",
            "date": "2008-06-03T19:22:54+0000",
            "content": "> It is really a Lucene query parser bug, but it wouldn't hurt to do s/(.*)-/&/ as a workaround. Assuming my ed(1) syntax is still > >fresh. Regardless, no query string should ever give a stack trace\n\nThis might be hard to guarantee.  Already there are four issues details specific ways that dismax that barf on input.  A lot of the suggestions above are of the form of detecting a specific failure mode and correcting it, which does not guarantee that you will catch them all.\n\nA robust way to do it is parse the query into an AST using a grammar in a way that matches the query as well as possible (dropping the stuff that doesn't fit).  Unfortunately, this is duplicative of the lucene parsing logic, and it would be nicer add a \"relaxed\" mode to lucene rather than pre-parsing the query.\n\n(The reparse+reassemble method is what we use, btw.  It is written in python but it might be possible to translate to java.) "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12622895",
            "date": "2008-08-15T15:31:09+0000",
            "content": "It looks like SOLR-589 solves the problem Walter described here a year and a half ago. "
        }
    ]
}