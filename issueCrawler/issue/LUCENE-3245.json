{
    "id": "LUCENE-3245",
    "title": "Realtime terms dictionary",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "For LUCENE-2312 we need a realtime terms dictionary.  While ConcurrentSkipListMap may be used, it has drawbacks in terms of high object overhead which can impact GC collection times and heap memory usage.  \n\nIf we implement a skip list that uses primitive backing arrays, we can hopefully have a data structure that is [as] fast and memory efficient.",
    "attachments": {
        "LUCENE-3245.patch": "https://issues.apache.org/jira/secure/attachment/12483902/LUCENE-3245.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-06-27T04:46:23+0000",
            "content": "Here's a basic initial patch implementing a single threaded writer, multiple reader atomic integer array skip list.  \n\nThe next step is to tie in the ByteBlockPool to store terms, eg, implement an RTTermsDictAIA class, and an RTTermsDictCSLM class.  \n\nWe can then load the same Wiki-EN terms, and measure the comparative write speeds.  \n\nThen create a set of terms to lookup from each terms dict and measure the time difference.  \n\nI am not yet sure how the speed of AtomicIntegerArray will compare with CSLM's usage of AtomicReferenceFieldUpdater.  Of note is the fact that because of DWPTs we do not need a skip list that supports concurrent writes.  And because we're only adding new unique terms, we do not need delete functionality.  Ie, AIA could be faster, though we may need to inline code and perform various tuning tricks. ",
            "author": "Jason Rutherglen",
            "id": "comment-13055320"
        },
        {
            "date": "2011-06-27T05:47:43+0000",
            "content": "Added and fixed the code that traverses the skip list to the level zero linked list and iterates.\n\nI need to reuse the starts int array, that's next. ",
            "author": "Jason Rutherglen",
            "id": "comment-13055340"
        },
        {
            "date": "2011-06-27T19:21:14+0000",
            "content": "Here's a cut with a first implementation of the CSLM and AIA terms dictionaries.  \n\nI think we're ready to benchmark writes. ",
            "author": "Jason Rutherglen",
            "id": "comment-13055707"
        }
    ]
}