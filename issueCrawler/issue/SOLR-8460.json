{
    "id": "SOLR-8460",
    "title": "/analysis/field doesn't always handle custom attributes correctly",
    "details": {
        "components": [
            "Schema and Analysis"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.3.2",
            "5.4.1",
            "5.5"
        ],
        "affect_versions": "None",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Minor"
    },
    "description": "I've got some custom analysis Attribute implementations in my analysis chain with some other custom analysis components.  I found that Solr's Analysis utility screen, powered by /field/analysis (FieldAnalysisRequestHandler subclassing AnalysisRequestHandlerBase) gave me exceptions for two reasons, both having to do with AnalysisRequestHandlerBase.ListBasedTokenStream:\n\n\tCustom implementations of standard Attributes (e.g. FlagsAttribute) would trigger an exception.\n\tCalling getAttribute (instead of addAttribute) in a TokenFilter constructor wouldn't find an attribute added by the input TokenStream.",
    "attachments": {
        "SOLR_8460.patch": "https://issues.apache.org/jira/secure/attachment/12779255/SOLR_8460.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-12-23T16:07:49+0000",
            "author": "Uwe Schindler",
            "content": "Can you provide an example TokenStream, For me it always works. The whole thing is buggy, I agree, but it should work with correctly implemented TokenStreams.\n\nThe most important thing: You have to implement the reflectWith() functionality correctly.\n\nCalling getAttribute (instead of addAttribute) in a TokenFilter constructor wouldn't find an attribute added by the input TokenStream.\n\nThats a bug in your TokenStream! getAttribute is only available for TokenStream consumers that don't want to add attributes they don't need. Producer code must always use addAttribute().\n\nCustom implementations of standard Attributes (e.g. FlagsAttribute) would trigger an exception.\n\nIf you use an AttributeFactory it should work correctly. In any case we should check that the ListBasedTokenStream uses the same attribute factory as the original tokenstream. This could be the bug here. Because it needs to clone the atttibutes and this fails if the original and the ListBasedTokenSteam uses different factories. ",
            "id": "comment-15069788"
        },
        {
            "date": "2015-12-23T16:08:17+0000",
            "author": "David Smiley",
            "content": "See attached patch.\n\nThis fix is for ARHB.ListBasedTokenStream to take an AttributeSource in the constructor to serve as the source of the attribute impls which are added in the constructor in a loop.  This adds the attributes as side effect as well. There is then no reason to copy the defined attributes in incrementToken because it's done in the constructor.\n\nI'll commit in a couple days pending feedback. ",
            "id": "comment-15069791"
        },
        {
            "date": "2015-12-23T16:13:05+0000",
            "author": "Uwe Schindler",
            "content": "That was exactly the issue I had in mind  Thanks for fixing! In any case, the whole thing is a huge bug and should be rewritten! ",
            "id": "comment-15069807"
        },
        {
            "date": "2015-12-23T18:45:47+0000",
            "author": "David Smiley",
            "content": "Thanks for your review Uwe!  It's good to get more eyes on each others work.  Looks like our first comments were written simultaneously without the benefit of each of us seeing what the other were about to say.\n\nThats a bug in your TokenStream! getAttribute is only available for TokenStream consumers that don't want to add attributes they don't need. Producer code must always use addAttribute().\n\nI wrote an Attribute implementation in such a way that it didn't require some other attribute, but if it was present then it affected the functionality of the Attribute.  So to know if it's present or not, I called getAttribute.\n\nDo you think the patch is fine as is to be committed or do you have concerns/feedback? ",
            "id": "comment-15070022"
        },
        {
            "date": "2015-12-23T19:13:37+0000",
            "author": "Uwe Schindler",
            "content": "I have no real concerns. The only thing I don't really like is the use of addAttributeImpl() in the test. This method is @Internal and should not really be used. It was made public for some special cases like TeeSinkTokenFilter. Maybe we can hide it now. The correct way to make the attribute API use a custom attribute impl is to provide an AttributeFactory that returns the custom implementation for the interface. ",
            "id": "comment-15070059"
        },
        {
            "date": "2015-12-23T19:20:28+0000",
            "author": "Uwe Schindler",
            "content": "I wrote an Attribute implementation in such a way that it didn't require some other attribute, but if it was present then it affected the functionality of the Attribute. So to know if it's present or not, I called getAttribute.\n\nThat's fine. It was just general comment: If your TokenFilter needs a specific attribute, it should call addAttribute. If it only optionally uses it when available, a check with hasAttribute() is fine, too. Although I cannot guarantee that this works with all consumers (like this one!). Some producers make attributes available in a delayed way (e.g. on reset()), so calling hasAttribute or getAttribute on ctor may not reflect the real state. I think this is what happened here (because attribute init was delayed to incrementToken). I don't know why this was implemented like that - maybe because of the delayed attrbutes.\n\nI'd suggest to still crosscheck in incrementToken() if all Attributes are ready. It is not a performance issue for this handler, as it is intended for debugging only. So I would leave incrementToken() as it is. Maybe do some checks with the web interface and crazy analyzers like Kuromoji or SmartTschinese  ",
            "id": "comment-15070065"
        },
        {
            "date": "2015-12-23T22:08:57+0000",
            "author": "David Smiley",
            "content": "In this updated patch, I ensured that attributes are added in incrementToken too.\n\nHowever I kept it using addAttributeImpl, with the following comment:\n\n      // note: ideally we wouldn't call addAttributeImpl which is marked internal. But nonetheless it's possible\n      //  this method is used by some custom attributes, especially since Solr doesn't provide a way to customize the\n      //  AttributeFactory which is the recommended way to choose which classes implement which attributes.\n\n ",
            "id": "comment-15070236"
        },
        {
            "date": "2015-12-24T10:25:39+0000",
            "author": "Uwe Schindler",
            "content": "+1\n\nespecially since Solr doesn't provide a way to customize the AttributeFactory which is the recommended way to choose which classes implement which attributes.\n\nThe correct way to do this is to write a separate/duplicate factory for your Tokenizer that uses another attributefactory. You have to do this anyways, because adding custom attributes later will likely fail, if the tokenizer already added them. ",
            "id": "comment-15070849"
        },
        {
            "date": "2015-12-24T16:26:00+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1721638 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1721638 ]\n\nSOLR-8460: /analysis/field could throw exceptions for custom attributes. ",
            "id": "comment-15071109"
        },
        {
            "date": "2015-12-24T16:44:41+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1721641 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1721641 ]\n\nSOLR-8460: /analysis/field could throw exceptions for custom attributes. ",
            "id": "comment-15071125"
        },
        {
            "date": "2015-12-24T17:20:55+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1721646 from David Smiley in branch 'dev/branches/lucene_solr_5_3'\n[ https://svn.apache.org/r1721646 ]\n\nSOLR-8460: /analysis/field could throw exceptions for custom attributes. ",
            "id": "comment-15071143"
        },
        {
            "date": "2016-01-12T08:58:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1724177 from Adrien Grand in branch 'dev/branches/lucene_solr_5_4'\n[ https://svn.apache.org/r1724177 ]\n\nSOLR-8460: /analysis/field could throw exceptions for custom attributes. ",
            "id": "comment-15093559"
        },
        {
            "date": "2016-01-12T10:33:10+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 1724198 from Adrien Grand in branch 'dev/branches/lucene_solr_5_4'\n[ https://svn.apache.org/r1724198 ]\n\nSOLR-8460, SOLR-8373, SOLR-8422, SOLR-7462, SOLR-8470: Add CHANGES entries for 5.4.1. ",
            "id": "comment-15093701"
        },
        {
            "date": "2016-02-08T22:35:41+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 9ef144ddefe21f30c1c9ebd5246e7e03387488e1 in lucene-solr's branch refs/heads/branch_5_4 from Adrien Grand\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9ef144d ]\n\nSOLR-8460, SOLR-8373, SOLR-8422, SOLR-7462, SOLR-8470: Add CHANGES entries for 5.4.1.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/lucene/dev/branches/lucene_solr_5_4@1724198 13f79535-47bb-0310-9956-ffa450edef68 ",
            "id": "comment-15137876"
        }
    ]
}