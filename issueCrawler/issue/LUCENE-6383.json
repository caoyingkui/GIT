{
    "id": "LUCENE-6383",
    "title": "MemoryPostings fst encoding can be surprisingly inefficient (especially in tests, with payloads)",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "I just worked around this in 2 nightly OOM fails.\n\nOne was TestDuelingCodecs, the other was TestIndexWriterForceMerge's space usage test.\n\nIn general the trend is the same, it seems the more documents you merge, you just get bigger and bigger FST outputs and the size of this PF in ram and on disk grows in a way you don't expect. E.g. merging 300KB of segments resulted in 450KB single segment, and memory usage gets absurdly high.\n\nThe issue seems especially aggravated in tests, when MockAnalyzer adds lots of payloads.\n\nMaybe it should encode the postings data in a more efficient way? Can it just use a Long output pointing into a RAMFile or something? Or maybe there is just a crazy bug?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14389982",
            "author": "Robert Muir",
            "date": "2015-04-01T04:38:43+0000",
            "content": "We should also look into why Adrien Grand's test for \"things getting bigger on merge\" (BaseIndexFileFormatTestCase.testMergeStability) doesnt find this. \n\nMaybe the problems are specific to payloads? BasePostingsFormat.addRandomFields iterates through all the possible index options, but never adds any payloads. Could be a tricky thing to do in tests in general, because of optimizations when payloads have the same length.\n\nThere is a TODO in TestMemoryPostingsFormat to randomize pack=true/false. Maybe its related too, TestMemoryPF never tests that, but RandomCodec randomizes the option. "
        },
        {
            "id": "comment-14390135",
            "author": "Adrien Grand",
            "date": "2015-04-01T07:25:45+0000",
            "content": "We should also look into why Adrien Grand's test for \"things getting bigger on merge\" (BaseIndexFileFormatTestCase.testMergeStability) doesnt find this. \n\nFrom your description of the problem, it looks to me that payloads are inefficiently encoded, but not that they wrongly accumulate upon merging? (which is what the test checks) We added this test when we found a bug in a codec that kept on copying the codec footer when merging so that after N merges, some segment files would have N codec footers (with only the last one containing the right checksum). The issue looks different here? "
        },
        {
            "id": "comment-14390318",
            "author": "Robert Muir",
            "date": "2015-04-01T10:08:12+0000",
            "content": "In this case merging creates a bigger index. 300 KB of segments becomes a 450KB single segment. So its not the same problem exactly... "
        }
    ]
}