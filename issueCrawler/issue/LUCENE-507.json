{
    "id": "LUCENE-507",
    "title": "CLONE -[PATCH] remove unused variables",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "Seems I'm the only person who has the \"unused variable\" warning turned on in \nEclipse  This patch removes those unused variables and imports (for now \nonly in the \"search\" package). This doesn't introduce changes in \nfunctionality, but it should be reviewed anyway: there might be cases where \nthe variables should be used, but they are not because of a bug.",
    "attachments": {
        "Unused.patch": "https://issues.apache.org/jira/secure/attachment/12323816/Unused.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-03-02T09:33:36+0000",
            "content": "In Lucene 1.9, there are a lot of local variable and unused import warnings. ",
            "author": "Steven Tamm",
            "id": "comment-12368403"
        },
        {
            "date": "2006-03-07T07:42:17+0000",
            "content": "I haven't looked at the patch, but I know that I've removed unused imports before and got burnt, because classes in imports were referenced from javadoc.... so something to keep in mind. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12369101"
        },
        {
            "date": "2006-03-07T07:51:04+0000",
            "content": "I haven't included a patch, although I can generate one easily.\n\nAs a matter of course, javadoc references that aren't included in an import shouldn't be qualified.  I'll turn off javadoc processing in eclipse and fix any bad javadoc references. ",
            "author": "Steven Tamm",
            "id": "comment-12369106"
        },
        {
            "date": "2006-03-07T09:26:36+0000",
            "content": "This fixes unnecessary casts, unused imports, unused private methods, and unused private variables.  Most of the changes were in the JavaCC grammar files, which usually happens, so you can't really fix it.  In java1.5, I'd normally just add @SuppressWarnings(\"unused\"), but I ifgure that wouldn't solve it.\n\nI only fixed demo, tools, and src.  There's one problem import that said it was required for GCJ, which i think I fixed by changing the inner class references to be explicit.\n\nJavadoc compiles with warnings only in contrib. ",
            "author": "Steven Tamm",
            "id": "comment-12369126"
        },
        {
            "date": "2006-03-08T00:45:52+0000",
            "content": "I don't see the point in patching code that's automatically generated by JavaCC.  It will just get overwritten the next time someone changes the grammer, no?\n\nAlso, GCJ-related changes are best verified.  Andi? ",
            "author": "Doug Cutting",
            "id": "comment-12369262"
        },
        {
            "date": "2006-04-28T12:02:47+0000",
            "content": "My apologies, I didn't notice this until it was mentioned today.\n\nThe \"//required by gcj\" comment is not something I added or need.\nThe few patches for gcj support that were added at my request are listed as such in the Lucene sources. The main one has to do with gcj's bug 15411 in Searcher.java, the other with naming a method 'delete'.\nIn general, it is easier to use javac or jikes to compile the .java sources to .class files and then use gcj on the resulting .class (or .jar) files to produce native binaries. Thus, one runs around a number of bugs in the gcj java compiler front-end.\nStill, there are some patches I need to apply to Lucene in order for it to run when compiled with gcj. Some are in QueryParser.java and the first of those could be applied to the actual .jj file instead, see here: http://svn.osafoundation.org/pylucene/trunk/patches.lucene\n\nThe next patches in the file above are because of limitations in gcjh (the Java to C++ header file generator) or because exception catching doesn't seem to work well with gcj on Windows. Throwing and catching exceptions in Java is not such an efficient coding practice when there isn't an actual error, maybe the code in FieldInfos.java could be changed then (see patch file above) ?\nAs for the last patch, well, the java runtime that comes with gcj 3.x doesn't implement regex, so PyLucene calls into python's regex support instead. ",
            "author": "Andi Vajda",
            "id": "comment-12376874"
        },
        {
            "date": "2011-01-25T14:00:35+0000",
            "content": "This is not a problem. First, many of the mentions in the patch file are irrelevant anymore, b/c this issue is old. Second, we're doing this sort of cleanup from to time, and those unused variables will keep popping in, and we'll keep cleaning them. So I see no reason to keep this issue open anymore. ",
            "author": "Shai Erera",
            "id": "comment-12986389"
        }
    ]
}