{
    "id": "SOLR-5374",
    "title": "Support user configured doc-centric versioning rules",
    "details": {
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.6",
            "6.0"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "The existing optimistic concurrency features of Solr can be very handy for ensuring that you are only updating/replacing the version of the doc you think you are updating/replacing, w/o the risk of someone else adding/removing the doc in the mean time \u2013 but I've recently encountered some situations where I really wanted to be able to let the client specify an arbitrary version, on a per document basis, (ie: generated by an external system, or perhaps a timestamp of when a file was last modified) and ensure that the corresponding document update was processed only if the \"new\" version is greater then the \"old\" version \u2013 w/o needing to check exactly which version is currently in Solr.  (ie: If a client wants to index version 101 of a doc, that update should fail if version 102 is already in the index, but succeed if the currently indexed version is 99 \u2013 w/o the client needing to ask Solr what the current version)\n\nThe idea Yonik brought up in SOLR-5298 (letting the client specify a _new_version_ that would be used by the existing optimistic concurrency code to control the assignment of the _version_ field for documents) looked like a good direction to go \u2013 but after digging into the way _version_ is used internally I realized it requires a uniqueness constraint across all update commands, that would make it impossible to allow multiple independent documents to have the same _version_.\n\nSo instead I've tackled the problem in a different way, using an UpdateProcessor that is configured with user defined field to track a \"DocBasedVersion\" and uses the RTG logic to figure out if the update is allowed.",
    "attachments": {
        "SOLR-5374.patch": "https://issues.apache.org/jira/secure/attachment/12609543/SOLR-5374.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13801247",
            "date": "2013-10-21T22:15:53+0000",
            "content": "\nHere's an initial patch with some basic docs and tests.  There's some nocommits I'm working on regarding configuration validation, and a few TODOs (that i'm less immediately concerned with) related to seeing if I/we can't figure out more efficient ways to do things.\n\nThe basic idea is that at a minimum the user configures a \"versionField\" which the user can configure to be anything they want, and any time an AddDoc comes in the processor rejects the add if the doc already exists and the value of the new \"versionField\" isn't greater then the existing value.\n\nThere is also some optional code that can be configured to tell the processor to apply the same rules to deleteById commands using a configured \"deleteVersionParam\" request param name \u2013 if the delete should succeed, then it's actually replaced by an AddDoc that indexes an empty placeholder doc to track the version of the delete so any subsequent \"out of order\" AddDoc can be rejected.\n\nLastly: there's an optional \"ignoreOldUpdates\" config option, that causes the processor to silently ignore (and return status=200) any updates whose version is too low, instead of returning status=409 (Version Conflict) "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-13801632",
            "date": "2013-10-22T09:14:50+0000",
            "content": "This feature certainly is helpful as is, but it might not always be practical in a distributed system to have a version ordering across updates as it's likely to involve a single point of coordination if you need one. In such cases, it might just suffice for the system if the versions were just equality comparable rather than having a strict ordering \u2013 i.e. update if the previous version equals what I expect, else reject the update. In some sense, if some external coordinator is able to guarantee a version ordering amongst updates, couldn't the same system be able to order the queue of updates to Solr? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13802028",
            "date": "2013-10-22T17:15:57+0000",
            "content": "it might not always be practical in a distributed system to have a version ordering across updates as it's likely to involve a single point of coordination\n\nRamkumar: I'm not sure i understand your comment.  The specific use case i'm targeting here is precisely the situation where there is already a an externally generated, per-document, version that we want to use to enforce that only \"new\" updates are processed.  see the issue description:\n\n\nI've recently encountered some situations where I really wanted to be able to let the client specify an arbitrary version, on a per document basis, (ie: generated by an external system, or perhaps a timestamp of when a file was last modified) ...\n\n\n\nIn such cases, it might just suffice for the system if the versions were just equality comparable rather than having a strict ordering \u2013 i.e. update if the previous version equals what I expect, else reject the update\n\nWhat you are describing sounds like what is already possible using Solr's existing optimistic concurrency features...\n\nhttps://cwiki.apache.org/confluence/display/solr/Updating+Parts+of+Documents#UpdatingPartsofDocuments-OptimisticConcurrency\n\nI'm trying to address use cases i've seen come up recently where the client app doesn't want to have to check, or keep track of, what's version is in the index (in several cases because they are already keeping track in an independent authoritative data store) they just wants to add/replace a document only if it's \"newer\" then whatever version is currently in the index. "
        },
        {
            "author": "Ramkumar Aiyengar",
            "id": "comment-13802613",
            "date": "2013-10-23T05:18:05+0000",
            "content": "My bad, I didn't quite get the Optimistic Concurrency feature, it would indeed do what I was describing. Thanks for the link. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13803636",
            "date": "2013-10-24T00:58:09+0000",
            "content": "\nIt seems like concurrency is not yet handled?  Under concurrent updates, the patch won't guarantee the correct ordering.\n\n\nThread 1: update with version=10, check version on doc A, returns 5\nThread 2: update with version=11, check version on doc A, returns 5\nThread 2: update completes with version 11\nThread 1: update completes with version 10\n\n\n\nThere's going to need to be either some sort of synchronization or optimistic concurrency.\n\nAlso, it looks like the current code assumes it's running on the leader?  The realtime-get done is local only, and if you hit the wrong shard with the request, it will look like the doc doesn't exist yet.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13804391",
            "date": "2013-10-24T16:51:40+0000",
            "content": "It seems like concurrency is not yet handled? Under concurrent updates, the patch won't guarantee the correct ordering.\n\nYou're right ... i hadn't considered that.\n\nAlso, it looks like the current code assumes it's running on the leader? The realtime-get done is local only, ...\n\nIt is?!?! ... I didn't realize that. (but i also hadn't had a chance to add a test for it)\n\nThat must just be because of the convenience method i used correct?  Obviously the RTG Component has a way to fetch the document even if you don't hit the correct shard (I hope! for bigger reasons then this patch).\n\nThe only way i can think of to address your concurrency concern is by forcing this logic to run on hte leader (not sure if you have an alternative idea: I'm not following your \"or optimistic concurrency.\" suggestion) in which case if we solve that problem, we should automatically solve the \"current code assumes it's running on the leader?\" correct?\n\nUnless i'm missing something, we still don't have an easy generic way to say \"run this code only on the leader\" \u2013 not w/o modifying DistributedUpdateProcessor i don't think \u2013 but IIUC the distributed update code first ensures that the update succeeds on the leader before forwarding to the replicas, correct?\n\nPerhaps we couldtweak the logic of DocBasedVersionConstraintsProcessor so it's configured to run after DistributedUpdateProcessor.  On the leader it would use uniqueKey based locking around the existing logic, and throw an error if the constrain wasn't satisfied - preventing the leader from ever forwarding to the replicas.  On the replicas it would just be a no-op.\n\nThe \"ignoreOldUpdates\" would have to be rippped out, but it could easily be refactored into a little convenience processor that could run before DistributedUpdateProcessor so that if enabled it would catch all 409 errors and swallow them. (which could be geenrally re-usable with the existing optimisitc concurrency feature as well if people want to ignore those conflicts as well)\n\nThe only thing i'm not sure about how to deal with if we go this direction is supporting the DeleteUpdateCommand -> AddUpdateCommand logic.  Because if that happens on the leader after DistributedUpdateProcessor I don't think it will affect the commands that get forwarded to the replicas. (will it?)\n\n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13804829",
            "date": "2013-10-25T00:07:03+0000",
            "content": "Updated patch - no new functionality, just an additional test method demonstrating the concurrency issue (on a single node) that yonik brought up. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13806370",
            "date": "2013-10-27T16:08:04+0000",
            "content": "Hmmm, testConcurrentAdds fails even if I change the executor size to 1 thread... not sure why at this point.\n\nedit: found it - a test bug where sometimes the winner was chosen for deletion when it wasn't supposed to be.  Test now passes with single-thread executor and fails with more threads.  Next up: optimistic concurrency to fix the concurrency issues.\n\nOh, another random note: we must have this processor run before the distributed update processor that handles internal solr versions.  This is because that processor could end up dropping a winning update (i.e. a doc that has a higher external version but was assigned a lower internal version). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13806484",
            "date": "2013-10-27T23:12:46+0000",
            "content": "Ideally, this code would run on the leader for the shard.\nI've opened SOLR-5395 as one step to allow that. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13807426",
            "date": "2013-10-28T22:43:52+0000",
            "content": "Here's a patch that includes implementation of multi-threaded fixes using optimistic concurrency. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13809559",
            "date": "2013-10-30T20:15:33+0000",
            "content": "hmmm, in SolrCloud mode, somewhere in the mix del_version is being dropped.  Not sure where yet... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13809714",
            "date": "2013-10-30T22:36:03+0000",
            "content": "Linking to SOLR-5406, which hopefully is the only issue stopping this from fully working. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13810279",
            "date": "2013-10-31T14:17:57+0000",
            "content": "OK, it seems like things are working in distributed mode now... a few more cleanups and it will be ready to commit. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13810550",
            "date": "2013-10-31T18:54:14+0000",
            "content": "OK, here's the final patch with everything cleaned up, and with a new stress test and optimizations to use the fieldcache/docvalues when possible instead of always going to stored fields. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13810572",
            "date": "2013-10-31T19:13:48+0000",
            "content": "Commit 1537587 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1537587 ]\n\nSOLR-5374: user version update processor "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13810602",
            "date": "2013-10-31T19:35:40+0000",
            "content": "Commit 1537597 from Yonik Seeley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1537597 ]\n\nSOLR-5374: user version update processor "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13810745",
            "date": "2013-10-31T21:47:22+0000",
            "content": "Commit 1537704 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1537704 ]\n\nSOLR-5374: fix unnamed thread pool "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13810747",
            "date": "2013-10-31T21:48:15+0000",
            "content": "Commit 1537706 from Yonik Seeley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1537706 ]\n\nSOLR-5374: fix unnamed thread pool "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13818175",
            "date": "2013-11-09T15:50:53+0000",
            "content": "There was a bug where we missed calling \"return\" after delegating to the next in the chain.  This meant that  (among other things) the code that was only meant to run on the leader was run on every node the update touched.  In the default \"ignore old updates\" mode, this didn't cause any failures since updates are idempotent, but it does cause failures when a 409 (Conflict) is thrown instead.\n\nThis patch fixes the bug and adds test coverage. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13818178",
            "date": "2013-11-09T15:56:42+0000",
            "content": "Commit 1540336 from Yonik Seeley in branch 'dev/trunk'\n[ https://svn.apache.org/r1540336 ]\n\nSOLR-5374: missing returns in user versioning processor "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13818193",
            "date": "2013-11-09T16:43:00+0000",
            "content": "Commit 1540341 from Yonik Seeley in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1540341 ]\n\nSOLR-5374: missing returns in user versioning processor "
        },
        {
            "author": "Anshum Gupta",
            "id": "comment-13818410",
            "date": "2013-11-10T09:47:09+0000",
            "content": "Just a thought, should we change the commented logging to log.debug?\nI'm assuming that's the intention behind leaving it in there. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13818637",
            "date": "2013-11-11T00:33:09+0000",
            "content": "should we change the commented logging to log.debug?\n\nI only left them there (commented out) in case I needed to try and debug again in the short term.  They are not of the quality one would want for long term.  I'd rather they be deleted than changed to logs. "
        },
        {
            "author": "Linbin Chen",
            "id": "comment-14394194",
            "date": "2015-04-03T08:26:01+0000",
            "content": "good feature. extremely useful "
        }
    ]
}