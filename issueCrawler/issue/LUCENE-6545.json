{
    "id": "LUCENE-6545",
    "title": "optimize DocTermOrds in cases where the underlying TermEnum being wraped supports ord()",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "Prior to LUCENE-6529, DocTermOrds had an optimization when the TermEnum of the field being Uninverted already supported ord().\n\nThis optimization was removed in LUCENE-6529 (see r1684704) because it was found to produce incorrect results for numeric fields that had a precisionStep.\n\nThis issue is to track the possibility of re-adding a correct version of this optimization.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14580802",
            "author": "Hoss Man",
            "date": "2015-06-10T16:59:55+0000",
            "content": "Some relevant comments from rmuir in the original issue...\n\nIf i disable the ord-sharing optimization in DocTermOrds, all 3 seeds pass. So I think there is a bug in e.g. FixedGap/BlockTerms dictionary or something like that. Maybe BasePostingsFormatTestCase does not adequately exercise methods like size()/ord()/seek(ord). It should be failing!\n\nis the problem the \"extra\" terms introduced by precision step? Maybe crank precisionStep down and see if expected/actual change. Maybe the current optimization is unsafe in that case and yields a bogus valueCount including the range terms, which screws up things down the road.\n\nNow we know: its that this DocTermOrds optimization is conceptually broken with precisionStep. This just causes problems downstream but its not filtering out the \"range terms\" and that is the root cause. It cannot return the terms dict directly, it needs to wrap it with something that filters those out. Methods like NumericUtils.intTerms()/longTerms() are close, but those currently do not yet support ord() and seek(ord) which is needed here.\n\n\n1) DocTermsOrds has an optimization in case the terms dictionary supports ord(). its broken if you are filtering out a subset of the terms, because it just passes the entire termsenum. Note this optimization never happens, except for a few oddball terms dicts we have, which support ord(). thats why it fails with them.\n2) those oddball terms dicts are just fine. Nothing wrong with them, its doctermsords that does the wrong thing.\n3) I do not have an opinion on the optimization. its probably easy to fix, but i would just disable it as you suggest for now, since it only impacts tests or if someone explicitly uses one of these term dictionaries with this functionality. "
        }
    ]
}