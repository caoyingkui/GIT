{
    "id": "SOLR-281",
    "title": "Search Components (plugins)",
    "details": {
        "affect_versions": "1.3",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A request handler with pluggable search components for things like:\n\n\tstandard\n\tdismax\n\tmore-like-this\n\thighlighting\n\tfield collapsing\n\n\n\nFor more discussion, see:\n\nhttp://www.nabble.com/search-components-%28plugins%29-tf3898040.html#a11050274",
    "attachments": {
        "SOLR-281-SearchComponents.patch": "https://issues.apache.org/jira/secure/attachment/12360900/SOLR-281-SearchComponents.patch",
        "SOLR-281-ComponentInit.patch": "https://issues.apache.org/jira/secure/attachment/12370315/SOLR-281-ComponentInit.patch",
        "solr-281.patch": "https://issues.apache.org/jira/secure/attachment/12368139/solr-281.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12509472",
            "date": "2007-07-02T00:33:17+0000",
            "content": "This is a quick - poorly documented / no testing - implementation that mimics the current Standard query.\n\nIt is mostly intended to flush out design issues.  \n\nThis works by sticking a 'ResponseBuilder' in the context and sharing that between each component. "
        },
        {
            "author": "Pieter Berkel",
            "id": "comment-12511678",
            "date": "2007-07-11T07:19:16+0000",
            "content": "I really like this modular approach to handling search requests, it will greatly simplify the process of adding new functionality (e.g. collapsing, faceting, more-like-this) to existing handlers without the need for unnecessary code replication.  My primary goal is to extend the more-like-this handler capabilities and make them available to other handlers (such as dismax), and I think the proposed solution is a good approach.\n\nSome issues that I can forsee though are:\n\n1) Ordering: its fairly obvious that certain handlers need to be called before others (e.g. standard / dismax query parsing before faceting / highlighting) however there may be cases where the required sequence of events may be more subtle (e.g. faceting the results of a more-like-this query).  There probably needs to be some mechanism to determine the order in which the components are prepared / processed.\n\n2) Dependancy: a situation may arise where a component depends on operations performed by another component (e.g. more-like-this may take advantage of the dismax 'bq' parameter), perhaps there needs to be some method of specifying component dependency so that the SearchHandler can load and process required components automatically?\n\nI hope this make sense, I'm fairly new to Solr development so I'm afraid my contributions to this issue would be mostly limited to (hopefully helpful) ideas and suggestions however I'm happy to tinker with the patched code from above and help test this new component framework as it is developed.\n\ncheers,\nPieter "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12516732",
            "date": "2007-07-31T16:50:22+0000",
            "content": "\n> Is anybody working on this issue? \n\nnot actively.\n\n\n> if not, I can start looking at it.\n> \n\nOf course! "
        },
        {
            "author": "Sharad Agarwal",
            "id": "comment-12517176",
            "date": "2007-08-02T08:21:42+0000",
            "content": "updatedprevious patch to work against trunk (r562043) "
        },
        {
            "author": "Sharad Agarwal",
            "id": "comment-12519386",
            "date": "2007-08-13T08:44:08+0000",
            "content": "Following changes from the previous patch:-\n-Supported components in DisMaxRequestHandler. Extended StandardRequestHandler and DisMaxRequestHandler from SearchHandler.\n-Deprecated StandardRequestHandler and DisMaxRequestHandler\n-Components configured via solrconfig.xml\n-Added DisMaxResponseBuilder, DisMaxQueryComponent and DisMaxDebugComponent classes\n\nBuilt and tested successfully with junit. "
        },
        {
            "author": "Pieter Berkel",
            "id": "comment-12520434",
            "date": "2007-08-17T01:49:35+0000",
            "content": "I just tried this patch on svn trunk (r566899) and got the following failures:\n\n$ patch -p0 < ../SOLR-281-SearchComponents.patch\n...\npatching file src/java/org/apache/solr/handler/StandardRequestHandler.java\nHunk #1 succeeded at 17 with fuzz 1.\nHunk #2 FAILED at 45.\n1 out of 2 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/handler/StandardRequestHandler.java.rej\n...\npatching file src/java/org/apache/solr/handler/DisMaxRequestHandler.java\nHunk #1 FAILED at 17.\n1 out of 1 hunk FAILED \u2013 saving rejects to file src/java/org/apache/solr/handler/DisMaxRequestHandler.java.rej\n\nI suspect it is the changes made by SOLR-326 that is causing the these problems, would it be possible for you to create a new patch?\n\nthanks,\nPiete "
        },
        {
            "author": "Sharad Agarwal",
            "id": "comment-12520494",
            "date": "2007-08-17T08:55:00+0000",
            "content": "Fixed the patch to work with the trunk. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12525966",
            "date": "2007-09-08T23:01:24+0000",
            "content": "Thanks Sharad!  this is looking good.\n\nI just updated it to work with trunk and cleaned up a few things. \n\n\tmade SearchComponent an abstract class rather then an interface.  This will make adding features in the future easier.\n\tmade SearchComponent implement SolrInfoMBean\n\tadded lots of ASF headers and comment stubs\n\n\n\nYonik and/or Hoss...  if you have time to check this out, that would be great.   "
        },
        {
            "author": "Pieter Berkel",
            "id": "comment-12527931",
            "date": "2007-09-17T02:52:28+0000",
            "content": "I'm having trouble applying the latest patch to trunk (r575809) again:\n\n$ patch -p0 < ../SOLR-281-SearchComponents.patch \n...\npatching file src/java/org/apache/solr/handler/StandardRequestHandler.java\nHunk #1 FAILED at 17.\nHunk #2 FAILED at 45.\n2 out of 2 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/handler/StandardRequestHandler.java.rej\npatching file src/java/org/apache/solr/handler/DisMaxRequestHandler.java\nHunk #2 FAILED at 118.\n1 out of 2 hunks FAILED \u2013 saving rejects to file src/java/org/apache/solr/handler/DisMaxRequestHandler.java.rej\n\nIt also looks like the additions to solrconfig.xml have not been included in the latest patch either.  I was also going to suggest that it might be a good idea to support class shorthand notation, so org.apache.solr.handler.component.* can be written solr.component.* in solrconfig.xml. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12527938",
            "date": "2007-09-17T03:40:48+0000",
            "content": "updated to work with trunk.  \n\nAdded the lost solrconfig.xml example:\n\n<requestHandler name=\"/search\" class=\"solr.SearchHandler\">\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n    </lst>\n    <arr name=\"components\">\n      <str>org.apache.solr.handler.component.QueryComponent</str>\n      <str>org.apache.solr.handler.component.FacetComponent</str>\n      <str>org.apache.solr.handler.component.MoreLikeThisComponent</str>\n      <str>org.apache.solr.handler.component.HighlightComponent</str>\n      <str>org.apache.solr.handler.component.DebugComponent</str>\n    </arr>\n  </requestHandler>\n\n\n\t- - -\n\n\n\nRe class aliases, it should work fine to put:\n solr.component.*\nIf we add \"org.apache.solr.handler.component.\" to the base list, you could just configure: org.apache.solr.handler.component.QueryComponent\n\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12536667",
            "date": "2007-10-22T13:37:26+0000",
            "content": "updated to work with trunk (587079);\nupdated HighlightComponent to use SolrHighlighter.\n\njunit 0 failures/0 errors on Solaris 10 & WinXP.\n\nI've tried and failed to overcome the diff/patch rejects that Pieter experienced.\nI generated the patch from a Solaris 10 using GNU patch with:\nsvn diff --diff-cmd /usr/bin/diff -x \"-w -B -b -E -d -N -u\" > ~/solr-281.patch\nI applied it to a clean trunk on Solaris 10 &  WinXP (using cygwin) with:\npatch -u -p 0 < ~/solr-281.patch\n\nStandardRequestHandler.java generates rejects; replace the whole class definition with the '-' prefixed lines of the reject.\n\nWARNING since this is a 'unified' patch and not wanting to mess with Sharad & Ryan's patch versions, I attached the patch as solr-281.patch (not as SOLR-281-SearchComponents.patch)\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12536878",
            "date": "2007-10-23T01:55:34+0000",
            "content": "FYI, I'm in the process of updating this patch to work with trunk again (pluggable query parser stuff... SOLR-334) "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12536994",
            "date": "2007-10-23T13:10:35+0000",
            "content": "Just a refresh on the latest trunk (587494) to keep things working before we got Yonik's proper version.\njunit 0 errors 0 failures.\nSame patch production process. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12537324",
            "date": "2007-10-24T13:59:54+0000",
            "content": "Here's a new (smaller) patch that utilizes pluggable query parsers, and\n\n\tremoves DisMax specific modules since dismax specific logic is limited to query construction\n\tDisMax request handler is now just the standard handler with defType=dismax added as a default\n\tremoved variable RequestBuilder class logic since it seems unnecessary... if two non-standard components want to communicate something, they can use the Context or the Response.  (any reason I'm missing why it should stay?)\n\n\n\nThoughts on these changes?\n\nWe need to think through all the members of ResponseBuilder carefully and decide what component sets/reads them in what phase (and if that makes the most sense).\n\nShould ResponseBuilder have methods instead of members?  If so, that would allow a component to perhaps even replace the ResponseBuilder and delegate to the original.\n\nHow will a users custom component get configuration?  Should components be a full plugins with an init() for configuration?\n\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12537626",
            "date": "2007-10-25T15:04:00+0000",
            "content": "Yonik, i could not get your last patch to apply cleanly to trunk.  This is my best attempt to resolve the conflicts and fix a few things.\n\n1. remove the call to getResponseBuilder() in SearchComponent\n2. the timing info was commented out of debugging\n\n\n\t- - - -\n\n\n\nThe dismax changes look great - i like the new query parser stuff!\n\n> - removed variable RequestBuilder class logic since it seems unnecessary... \n> if two non-standard components want to communicate something, they can \n> use the Context or the Response.  (any reason I'm missing why it should stay?)\n\nIf at all possible, I think we should do our best to avoid depending on Map<String> for an interface.\n\n>\n> We need to think through all the members of ResponseBuilder carefully and decide what component sets/reads them in what phase (and if that makes the most sense).\n>\n\nyes \n\n>\n> Should ResponseBuilder have methods instead of members? If so, that would allow a component to perhaps even replace the ResponseBuilder and delegate to the original.\n>\n\nyes, that makes sense.  How would a component replace the ResponseBuilder?  If it could do that, there is obviously no need for the variable RequestBuilder class logic \n\n> \n> How will a users custom component get configuration? Should components be a full plugins with an init() for configuration?\n>\n\nAs is, they are defined in a \"components\" section for SearchHandler (from the example solrconfig.xml):\n\n  <requestHandler name=\"/search\" class=\"solr.SearchHandler\">\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n    </lst>\n    <arr name=\"components\">\n      <str>org.apache.solr.handler.component.QueryComponent</str>\n      <str>org.apache.solr.handler.component.FacetComponent</str>\n      <str>org.apache.solr.handler.component.MoreLikeThisComponent</str>\n      <str>org.apache.solr.handler.component.HighlightComponent</str>\n      <str>org.apache.solr.handler.component.DebugComponent</str>\n    </arr>\n  </requestHandler>\n\nPerhaps the components should be passed the init params?\n\nUnless there is a compelling reason, I don't think components need to be shared across request handlers thus justifying a top level component registry.\n\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12537645",
            "date": "2007-10-25T16:01:32+0000",
            "content": "Yonik, i could not get your last patch to apply cleanly to trunk. \nThat's OK, the one you produced fails for me on a clean checkout too.... looks like maybe we hit a little corner case with patch/diff.\nShould we perhaps commit this working version, marking ResponseBuilder as in-flux, and then continue generating patches from that??? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12537648",
            "date": "2007-10-25T16:25:01+0000",
            "content": "I'll see if I can jiggle things a bit to get better patch behavior first... "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12537651",
            "date": "2007-10-25T16:32:26+0000",
            "content": "OK, uploading the one that works for me now. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12537652",
            "date": "2007-10-25T16:38:50+0000",
            "content": "Hold on... this patch is double in size from the last for some reason.... deleting. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12537655",
            "date": "2007-10-25T16:49:23+0000",
            "content": "OK, this patch should do it... sorry for the noise. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12537740",
            "date": "2007-10-25T21:38:33+0000",
            "content": "ok, that one works (or close enough)\n\n>\n> Should we perhaps commit this working version, marking ResponseBuilder as in-flux, and then continue generating patches from that???\n>\n\nIf  you feel comfortable with the big picture, yes, I think we should commit this and refine the ResponseBuilder and perhaps the configuration options in smaller patches.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12541650",
            "date": "2007-11-11T18:47:48+0000",
            "content": "Here is an updated version of your patch that converts the ResponseBuilder public variables to private vars with get/set methods.\n\nHow do you feel about committing this and working out the ResponseBuilder details in subsequent smaller patches?\n "
        },
        {
            "author": "Henri Biestro",
            "id": "comment-12541785",
            "date": "2007-11-12T14:29:47+0000",
            "content": "Not sure process-wise whether votes/watchers got a say, my apologies if not; +1 otherwise. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12541786",
            "date": "2007-11-12T14:31:19+0000",
            "content": "> How do you feel about committing this and working out the ResponseBuilder details in subsequent smaller patches?\n\n+1\n\nIn this case I think the current patch represents the right direction, seems to work fine, and committing now will save effort of people  working on other patches. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12541916",
            "date": "2007-11-12T19:45:15+0000",
            "content": "The core changes are committed in rev594268.\n\nI will resolve this issue and open a new issue to track cleaning up the ResponseBuilder "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12541925",
            "date": "2007-11-12T19:57:50+0000",
            "content": "Lets track ResponseBuilder issues with SOLR-410 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12544672",
            "date": "2007-11-22T01:33:57+0000",
            "content": "The SearchComponent framework needs to allow for custom component initialization \u2013 I previously believed this could be done from within the RequestHandler NamedList args.  In trying to use this for a custom component that needs to load a resource file, I found it is woefully inadequate.\n\nAs Yonik suggested a while back (and I disagreed with), I now think components should be loaded and initialized the same way as RequestHandlers.  That is, a top level name based registry in SolrCore that SearchHandlers can share.   For example, solrconfig.xml could declare:\n\n\n   <searchComponent name=\"query\"     class=\"org.apache.solr.handler.component.QueryComponent\" />\n   <searchComponent name=\"facet\"     class=\"org.apache.solr.handler.component.FacetComponent\" />\n   <searchComponent name=\"mlt\"       class=\"org.apache.solr.handler.component.MoreLikeThisComponent\" />\n   <searchComponent name=\"highlight\" class=\"org.apache.solr.handler.component.HighlightComponent\" />\n   <searchComponent name=\"debug\"     class=\"org.apache.solr.handler.component.DebugComponent\" />\n\n\n\nand a SearchHandler can pick and choose what components are used with:\n\n <requestHandler name=\"/search\" class=\"solr.SearchHandler\">\n    <arr name=\"components\">\n      <str>query</str>\n      <str>facet</str>\n      <str>mlt</str>\n      <str>highlight</str>\n      <str>debug</str>\n    </arr>\n  </requestHandler>\n\n\n\nAlso, there should be a way to configure components to run before or after the standard component list without having to know and maintain what the \"standard\" list is.  For example, when we add field collapsing to the 'standard' options, it should not require everyone to update their solrconfig.xml\n\nWhen SOLR-414 is committed, I will attach a patch using this strategy. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12545892",
            "date": "2007-11-27T16:18:32+0000",
            "content": "This patch uses SOLR-414 Initialization strategy for SearchComponents.  \n\nThis makes SearchComponents a top level plugin (just like RequestHandlers) that get registered to a unique name in SolrCore.  A SearchHandler can configure the component chain using:\n\n\n  <requestHandler name=\"/search\" class=\"solr.SearchHandler\">\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n    </lst>\n    <!--\n    By default, this will register the following components:\n    \n    <arr name=\"components\">\n      <str>query</str>\n      <str>facet</str>\n      <str>mlt</str>\n      <str>highlight</str>\n      <str>debug</str>\n    </arr>\n    \n    To insert handlers before or after the 'standard' components, use:\n    \n    <arr name=\"first-components\">\n      <str>first</str>\n    </arr>\n    \n    <arr name=\"last-components\">\n      <str>last</str>\n    </arr>\n    \n    -->\n  </requestHandler>\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12545911",
            "date": "2007-11-27T16:54:06+0000",
            "content": "The other idea I had was numeric positioning... query=1000, facet=2000, etc, and so a user could add their component at any point.  Perhaps your first/last is sufficient though. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12545938",
            "date": "2007-11-27T17:37:45+0000",
            "content": "The problem first/last is trying to solve is to let a custom handler automatically incorporate default changes to the standard components without editing solrconfig.xml.  \n\nNumeric positioning seems a bit brittle unless the 'standard' components have a locked position.  Without opening the door to legacy problems, I don't see any good way to insert a component between \"facet\" and \"mlt\" without specifying the whole chain. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12549548",
            "date": "2007-12-07T20:20:42+0000",
            "content": "updated initialization patch from SOLR-418.  Without objection, I will commit this soon. "
        },
        {
            "author": "Sabyasachi Dalal",
            "id": "comment-12550031",
            "date": "2007-12-10T12:20:05+0000",
            "content": "I am updating the distributed search patch (SOLR-303) with this patch.\nI added the dist search components as, \n\n   <searchComponent name=\"gstat\"     class=\"org.apache.solr.handler.federated.component.GlobalCollectionStatComponent\" />\n   <searchComponent name=\"mqp\"     class=\"org.apache.solr.handler.federated.component.MainQPhaseComponent\" />\n   <searchComponent name=\"aqp\"     class=\"org.apache.solr.handler.federated.component.AuxiliaryQPhaseComponent\" />\n\n  <requestHandler name=\"/search\" class=\"solr.SearchHandler\">\n    <lst name=\"defaults\">\n      <str name=\"echoParams\">explicit</str>\n    </lst>\n\n    <arr name=\"last-components\">\n      <str>gstat</str>\n      <str>mqp</str>\n      <str>aqp</str>\n    </arr>\n\n  </requestHandler>\n\nBut it was not working.  On debugging i found that these added components were not getting registered.\n\nI made the following change in SolrCore.loadSearchComponents,\n\n    // NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, searchComponents );\n    NamedListPluginLoader<SearchComponent> loader = new NamedListPluginLoader<SearchComponent>( xpath, components ); "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12551058",
            "date": "2007-12-12T18:34:04+0000",
            "content": "Sabyasachi - check that your patch does not comment out the loading line...  \n\nthe committed version of this patch is not commented out:\nhttp://svn.apache.org/repos/asf/lucene/solr/trunk/src/java/org/apache/solr/core/SolrCore.java "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-12564449",
            "date": "2008-01-31T18:32:15+0000",
            "content": "This is great; decomposing the handler and allowing the components to be wired up in the config really helps development (and maintenance of those changes). \n\nFor my purposes, I needed to make a change to the way the dismax query was being generated. Using the DisMaxQParserPlugin as a template, I created my own QParser and associated QParserPlugin; changed the relevant bits; added a <queryParser...> entry in solrconfig.xml; added the 'defType' parameter to the wanted SearchHandler configuration...and...all works well. \n\nJust a few comments: \n\n\n\tI had to make the QParser parse() method public (as the new query parser may still need to use the existing query parsers (backup lucene parser, boost parser, function parser, etc).\n\tThe QParserPlugin class seems unnecessary: all it does is implement init() and add a createParser method. Why not just have the parser constructor take those arguments...or, if that can't be done, create an interface to allow the parser itself implement both init() and createParser() (or create()). It then avoids having to create 2 classes (in the case of DisMax, in the same file...which is not pretty).\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12564453",
            "date": "2008-01-31T18:48:15+0000",
            "content": "The QParserPlugin class seems unnecessary: all it does is implement init() and add a createParser method.  Why not just have the parser constructor take those arguments...\n\nThat would require instantiation with reflection I think.\n\nor, if that can't be done, create an interface to allow the parser itself implement both init() and createParser() (or create()). It then avoids having to create 2 classes (in the case of DisMax, in the same file...which is not pretty).\n\nQParserPlugin is that interface essentially (except that its an class instead of an interface).  For library maintainers an abstract class is preferred over an interface for things that a user will extend... that way signature changes can be made in a backward compatible manner. "
        },
        {
            "author": "Michael Dodsworth",
            "id": "comment-12564739",
            "date": "2008-02-01T12:39:33+0000",
            "content": "\nThat would require instantiation with reflection I think.  \n\nReflection is already being used to create the QParserPlugins (SolrCore:1027 and AbstractPluginLoader:83) - I'm guessing the reason for the plugin is just to avoid creating instances through reflection on every parse (as you could keep hold of the QParser class and call newInstance). The second point is moot, once you take away the need for createParser(...). \n\nIt's really not that big-a-deal, in the scheme of things. \n\n\nQParserPlugin is that interface essentially (except that its an class instead of an interface). For library maintainers an abstract class is preferred over an interface for things that a user will extend... that way signature changes can be made in a backward compatible manner.  \n\nAs an aside, method signature changes are usually trivial to fix; personally, the pain of those fixes is favourable to extending an abstract class unnecessarily. \nAre there any architectural reworking projects on the roadmap? I'm sure backward compatibility is a massive concern; perhaps with the more modular plugin design route Solr is going down, those concerns can be addressed. If there's a chance of being accepted, I would love to contribute a move towards using Spring. \n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12564853",
            "date": "2008-02-01T18:11:06+0000",
            "content": "Followed up on solr-dev to avoid stealing more of this JIRA isse:\nhttp://www.nabble.com/Re%3A--jira--Commented%3A-Search-Components-%28plugins%29-to15227648.html#a15227648 "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12599647",
            "date": "2008-05-25T03:08:11+0000",
            "content": "I'll mark this issue as \"fixed\" \u2013 I'm not sure why it was still open, the reason it was repoened has been resolved.  Any new issues should get their own JIRA issue "
        }
    ]
}