{
    "id": "LUCENE-2056",
    "title": "Should NIOFSDir use direct ByteBuffers?",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I'm trying to test NRT performance, and noticed when I dump the thread stacks that the darned threads often seem to be in java.nio.Bits.copyToByteArray(Native Method)... so I wondered whether we could/should use direct ByteBuffers, and whether that would gain performance in general.  We currently just use our own byte[] buffer via BufferedIndexInput.\n\nIt's hard to test since it's likely platform specific, but if it does result in gains it could be an easy win.",
    "attachments": {
        "LUCENE-2056.patch": "https://issues.apache.org/jira/secure/attachment/12446985/LUCENE-2056.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-11-11T19:19:52+0000",
            "content": "I have an uncomfortable feeling that it will be slower.\nIIRC, there's no way to get a byte[] from a direct byte buffer, so all of our methods that get a byte at a time will be making method calls.  If those calls were directly implemented by the JVM as intrinsics... perhaps it would be faster.  In general though, I've learned to lower my expectations (compared to the hype we've sometimes heard from Sun) and sometimes I'm pleasantly surprised  ",
            "author": "Yonik Seeley",
            "id": "comment-12776587"
        },
        {
            "date": "2009-11-11T19:22:16+0000",
            "content": "Will be interesting to see what you come up with. I replaced the byte buffer in BufferedIndexInput with a direct buffer a year or two ago and it slowed things down. Then I read a bunch about how there were various issues with direct buffers - they really got NIO right on the first go or two  They are supposed to be much faster in java 7.\n\nWho knows though - I was lazy and went with a pretty much straight port to direct buffers. Can prob get a much better kick with some pooling or something. ",
            "author": "Mark Miller",
            "id": "comment-12776588"
        },
        {
            "date": "2009-11-11T19:48:58+0000",
            "content": "Hmm not quite a ringing endorsement   I don't think I'll look into this any time soon (plenty on my plate!!) so if someone else wants to try, maybe with Java 7, go for it! ",
            "author": "Michael McCandless",
            "id": "comment-12776611"
        },
        {
            "date": "2010-06-13T17:16:27+0000",
            "content": "Attached patch, creating a DirectNIOFSDirectory, using direct ByteBuffers for read (Indexinput) and write (IndexOutput).\n\nWith some simple initial tests (a TermQuery, OR query, PhraseQuery), on CentOS 5.4, Java 1.6.0_17 64bit, it seems to be a bit (~1-3%) faster than NIOFSDirectory. ",
            "author": "Michael McCandless",
            "id": "comment-12878404"
        },
        {
            "date": "2010-06-15T10:23:04+0000",
            "content": "It's remotely possible that using direct byte buffers (in the above patch) works around the nasty Sun JVM bug (http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6265734) that makes NIOFSDirectory useless on windows...\n\nCan someone w/ access to a multi-CPU/core Windows box test this?\n\nYou just need an existing index, and then something like this alg (searches w/ 4 threads) EXCEPT you have to temporarily edit FSDirectory.java to return this DirectNIOFSDirectory on Windows:\n\n\nanalyzer=org.apache.lucene.analysis.core.WhitespaceAnalyzer\ndirectory=FSDirectory\nwork.dir = /x/lucene/trunkwiki\n\nlog.step=100000\n\nsearch.num.hits=10\n\nquery.maker=org.apache.lucene.benchmark.byTask.feeds.FileBasedQueryMaker\nfile.query.maker.file = queries.txt\n\n# task at this depth or less would print when they start\ntask.max.depth.log=2\n\nlog.queries=true\n# -------------------------------------------------------------------------------------\n\n{ \"Rounds\"\n\n    OpenReader\n    [ { \"topDocs\" Search > : 6.0s }: 4\n    CloseReader\n\n    RepSumByPref topDocs\n\n    NewRound\n\n} : 10\n\n ",
            "author": "Michael McCandless",
            "id": "comment-12878921"
        },
        {
            "date": "2010-06-16T06:05:05+0000",
            "content": "I used an index built from Reuters line docs, and for the queries, the 92 \nEnglish queries from AnswerBus's most recent 100 queries, with question and quotation marks stripped.\n\nOn Windows Vista 64-bit, 2 CPU cores (Intel Core 2 6600@2.40GHz), Sun JDK 1.6.0_15 64-bit:\n\n\n\n\nDirectory\nrunCnt\nrecsPerRun\nrec/s\n\n\nFSDirectory\n40\n2279\n379.73\n\n\nDirectNIOFSDirectory\n40\n2171\n361.73\n(5% slower)\n\n\n\n\n\nOn Windows 7 64-bit, 4 CPU cores (Intel Core i5 750 @ 2.67 GHz), Sun JDK 1.6.0_20 64-bit:\n\n\n\n\nDirectory\nrunCnt\nrecsPerRun\nrec/s\n\n\nFSDirectory\n40\n2754\n458.92\n\n\nDirectNIOFSDirectory\n40\n2658\n442.61\n(4% slower)\n\n\n\n ",
            "author": "Steve Rowe",
            "id": "comment-12879257"
        },
        {
            "date": "2010-06-16T09:27:40+0000",
            "content": "Thanks Steven!  Was this with the above alg (ie, 4 threads doing searching)?\n\nCould you also try the search using NIOFSDirectory?\n\nAlso, if possible, it'd be better to test against a larger index \u2013 such super-fast queries allow the query init cost to unduly impact that results (eg, allocating a direct buffer is more costly than allocating a non-direct buffer). ",
            "author": "Michael McCandless",
            "id": "comment-12879290"
        }
    ]
}