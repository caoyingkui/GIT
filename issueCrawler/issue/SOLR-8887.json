{
    "id": "SOLR-8887",
    "title": "Solr Security features cannot export the internal, deprecated DefaultHttpClient class as part of their user facing API.",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.0"
        ],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Critical"
    },
    "description": "Seems security now really depends on HttpClientConfigurer. That class was only used for tests previously, and was at best completely unsupported. We can't promise an API that locks us into an internal, low level, class from a lib. Especially a deprecated one. Solr wants to own the http layer, not get locked into impls.\n\nWe need to stop using DefaultHttpClient, and it's going to break this stuff.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-23T17:13:16+0000",
            "author": "Mark Miller",
            "content": "I don't even see how you deal with this in a strong back compat way but break it in 7, and lock us into the HttpClient impl for a whole major version every time. These security classes need very explicit access it looks  Not something you can just abstract away.\n\nReally, these are Java APIs and I'd say we don't promise strong back compat between minor versions anyway though. Let's fix our security impls, doc it better, and move on. But it seems this has also been exposed as part of a generic security plugin API, which gives me pause again. But those plugins are new and no more special than searchhandlers or searchcomponents, which can also break between minor releases depending on the classes you are accessing. I  think we should update all of it and fix our connection management now rather than wait till version 7. Making an internal, deprecated class a core part of a plugin api means that plugin api is fairly subject to change I think. ",
            "id": "comment-15208791"
        },
        {
            "date": "2016-03-23T19:11:23+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I think we had to bite the bullet and go this route for security (esp for kerberos) as we didn't have any other easy choice. (maybe we didn't look hard enough for an alternative, and this sounded like the best choice).\n\nGiven that the usage of deprecated parts of HttpClient and the non-deprecated parts are very different (and hence require non-trivial refactoring to upgrade), something that Shawn Heisey explored in SOLR-5604, I think we should treat both as almost two separate http client libraries. So, in essence, my suggestion is that we would be better served if our http client layer was agnostic of any particular library, but just a wrapper around various possible implementations.\n\nIn such an architecture, it should be possible to support the security plugins and apis for only those who want to use HttpClient (deprecated), and we continue to innovate using other library implementations separately.\n\nWhat do you think? Mark Miller, Anshum Gupta, Noble Paul, Gregory Chanan ",
            "id": "comment-15208971"
        },
        {
            "date": "2016-03-23T20:00:04+0000",
            "author": "Noble Paul",
            "content": "writers of a security plugin will face this problem, but general users of security would not have any backcompat issues. It is trivial for BasicAuth to get rid of this dependency. However, Kerberos will have a problem. \nI propose the following\n\n\n\tThe public API should rely on another class and it should not have any deprecated stuff. So , PKIAuth and BasicAUth can start using that API right away\n\tKerberos support can rely on deprecated class for the time being , and we can limit the damage\n\tEventually we will need to reimplement Kerberos without relying on the deprecated classes\n\n\n ",
            "id": "comment-15209048"
        },
        {
            "date": "2016-03-31T14:56:54+0000",
            "author": "Mark Miller",
            "content": "I have completed this change as part of SOLR-4509.\n\nIt basically moves us off the deprecated classes. It would be nice to completely abstract out the plugin API from HttpClient classes, but that seems like a stretch to accomplish well and maintain over internal refactorings. For now, I've just moved us to non deprecated classes and also limited the surface area of HttpClient that we expose.\n\nI think we can expose some internals to users like this, but they just will have to expect to keep up with changes to API's between releases. I do think the work in SOLR-4509 is likely to be able to stay stable a long time though. ",
            "id": "comment-15219980"
        },
        {
            "date": "2016-11-21T10:03:14+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Looks like this issue can be closed as a duplicate then? ",
            "id": "comment-15683077"
        }
    ]
}