{
    "id": "SOLR-11093",
    "title": "implement Points/Numeric support for graph query",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "It looks like GraphQueryTest only has tests for strings.  We should add tests for numeric fields and then enable points randomization.",
    "attachments": {
        "SOLR-11093.patch": "https://issues.apache.org/jira/secure/attachment/12878088/SOLR-11093.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-07-18T17:56:49+0000",
            "content": "Commit a26d1023ff32b27e2a0758af6a9a72a67c114313 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a26d102 ]\n\nSOLR-11093: tests - templatize graph query test for different field types, remove schema-graph.xml ",
            "author": "ASF subversion and git services",
            "id": "comment-16091902"
        },
        {
            "date": "2017-07-18T17:57:09+0000",
            "content": "Commit 8727a7fbea3423957927d2d8b529ed40969da0b7 in lucene-solr's branch refs/heads/branch_7x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8727a7f ]\n\nSOLR-11093: tests - templatize graph query test for different field types, remove schema-graph.xml ",
            "author": "ASF subversion and git services",
            "id": "comment-16091903"
        },
        {
            "date": "2017-07-18T17:57:17+0000",
            "content": "Commit a6b317c77860e779ca893ff8b8b124cb5d7ebb38 in lucene-solr's branch refs/heads/branch_7_0 from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a6b317c ]\n\nSOLR-11093: tests - templatize graph query test for different field types, remove schema-graph.xml ",
            "author": "ASF subversion and git services",
            "id": "comment-16091904"
        },
        {
            "date": "2017-07-18T22:30:16+0000",
            "content": "can this be resolved? ",
            "author": "Hoss Man",
            "id": "comment-16092281"
        },
        {
            "date": "2017-07-18T23:06:38+0000",
            "content": "can this be resolved?\nNumerics still need to be fixed for graph query - I was going to do it under this issue. ",
            "author": "Yonik Seeley",
            "id": "comment-16092305"
        },
        {
            "date": "2017-07-18T23:09:42+0000",
            "content": "We already have a specific issue for adding numeric supportto GraphQParser \u2013 which you assigned to your self a few days ago: SOLR-10845 ",
            "author": "Hoss Man",
            "id": "comment-16092311"
        },
        {
            "date": "2017-07-18T23:13:40+0000",
            "content": "Yeah, I was confused too at first... these are actually different parsers and tests.  This one is \n{!graph}\n, the other one is \n{!graphTerms}\n.  I hadn't even realized the latter existed and I assumed it was the former when I assigned it to myself. ",
            "author": "Yonik Seeley",
            "id": "comment-16092316"
        },
        {
            "date": "2017-07-18T23:15:18+0000",
            "content": "Oh .. weird, sorry for the noise: carry on. ",
            "author": "Hoss Man",
            "id": "comment-16092318"
        },
        {
            "date": "2017-07-19T00:37:27+0000",
            "content": "OK, after reviewing this more it looks like this was written for strings (and trie* numeric fields worked because they existed in the full-text index, and could be uninverted to docTermOrds).\nTo make this work for numeric point fields, we'll need to:\n\n\trequire docValues\n\twrite new code to collect values from numeric docValues (i.e. not docTermOrds and ByteRefHash)\n\twrite new code to create an appropriate frontier query from the collected values\n\n\n\nAny objections to requiring docValues?  The only real alternative is to implement FieldCache support for Point fields to fake docValues. ",
            "author": "Yonik Seeley",
            "id": "comment-16092406"
        },
        {
            "date": "2017-07-19T01:17:11+0000",
            "content": "NOTE: I've \"un-subtasked\" this jira since it no longer makes sense as a subtask of SOLR-10807.\n\n(FWIW: I have no strong opinions about the questions you asked) ",
            "author": "Hoss Man",
            "id": "comment-16092443"
        },
        {
            "date": "2017-07-20T03:32:36+0000",
            "content": "Here's a draft patch with refactorings, creating a base class GraphEdgeCollector and pulling out term-specific code into a subclass GraphTermsCollector.\nNext TODO is to implement GraphNumericCollector that will work with points & numeric docvalues ",
            "author": "Yonik Seeley",
            "id": "comment-16094127"
        },
        {
            "date": "2017-07-21T15:57:03+0000",
            "content": "status: I've made more progress on this, but I'm currently taking sick day(s).  Should be able to finish up quickly once I get back to it. ",
            "author": "Yonik Seeley",
            "id": "comment-16096409"
        },
        {
            "date": "2017-07-24T15:37:55+0000",
            "content": "Here's an updated draft patch that moves LongSet and LongIterator to the util package, uses them in conjunction with numeric docvalues to collect numeric values, and then uses points fields to create a set query.\nDoesn't yet work for some reason... I'm digging into why. ",
            "author": "Yonik Seeley",
            "id": "comment-16098592"
        },
        {
            "date": "2017-07-24T16:15:36+0000",
            "content": "Requiring DocValues for numerics on a GraphQuery is fine with me.  Is there a back-compat concern?\n\nMaybe LongSet could use more javadocs if it's going to be shared.  The constructor should actually assert (or throw) that the argument is a power of 2.  And it appears that the LongIterator returned must be used in a standard fashion in which hasNext is always called before next(); yes?  Since the set size is known, maybe it could be adjusted to use a countDown integer approach, yet still be very fast/simple? ",
            "author": "David Smiley",
            "id": "comment-16098633"
        },
        {
            "date": "2017-07-24T23:20:33+0000",
            "content": "Updated patch... tests now pass! ",
            "author": "Yonik Seeley",
            "id": "comment-16099260"
        },
        {
            "date": "2017-07-24T23:37:29+0000",
            "content": "Is there a back-compat concern?\n\nEverything should be back compat with existing schemas. ",
            "author": "Yonik Seeley",
            "id": "comment-16099276"
        },
        {
            "date": "2017-07-25T14:49:38+0000",
            "content": "Commit aa1d5feba01a50d4bc002e346e54ff26f6abc664 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=aa1d5fe ]\n\nSOLR-11093: add Points to GraphQuery ",
            "author": "ASF subversion and git services",
            "id": "comment-16100137"
        },
        {
            "date": "2017-07-25T14:50:02+0000",
            "content": "Commit 9cd3a2beee2a0374bdc4c3e6224f63989c7cd8c6 in lucene-solr's branch refs/heads/branch_7x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=9cd3a2b ]\n\nSOLR-11093: add Points to GraphQuery ",
            "author": "ASF subversion and git services",
            "id": "comment-16100138"
        },
        {
            "date": "2017-07-25T14:50:11+0000",
            "content": "Commit 32b2b6d108b22fe9d14a343b5abd984ed439e275 in lucene-solr's branch refs/heads/branch_7_0 from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=32b2b6d ]\n\nSOLR-11093: add Points to GraphQuery ",
            "author": "ASF subversion and git services",
            "id": "comment-16100139"
        },
        {
            "date": "2017-07-25T15:23:08+0000",
            "content": "An interesting titbit I discovered while doing this issue: the graph query reversed the meaning of \"from\" and \"to\" wrt the join query.\nNot a bug I guess... just a different way of thinking about what \"from\" and \"to\" mean. ",
            "author": "Yonik Seeley",
            "id": "comment-16100182"
        },
        {
            "date": "2017-07-25T15:27:23+0000",
            "content": "Since the set size is known, maybe it could be adjusted to use a countDown integer approach, yet still be very fast/simple?\n\nI wasn't able to figure out how to make it simpler with an iterator approach (it seems like there always needs to be an additional check for the empty value).\nIn a place where the performance difference might matter, one always has the option of grabbing the backing array though. ",
            "author": "Yonik Seeley",
            "id": "comment-16100194"
        },
        {
            "date": "2017-07-25T18:16:52+0000",
            "content": "Why is zeroCount an integer instead of simply a hasZero boolean?\n\nHere's my first iteration (subsequently changed futher below).  All I did was rename hasNext to positioned (which I feel is more clear), added some inline comments for what the fields mean, and I added a leading check inside next(). So this was simpler than I thought.\n\n/** Returns an iterator over the values in the set. */\n  public LongIterator iterator() {\n    return new LongIterator() {\n      // if this set contains zero, this iterator's initial state is already positioned\n      private boolean positioned = zeroCount > 0;\n      private int i = -1; // current index into vals[]\n      private long value = 0; // if positioned, this is our current value\n\n      @Override\n      public boolean hasNext() {\n        if (positioned) {\n          return true;\n        }\n        while (++i < vals.length) {\n          value = vals[i];\n          if (value != 0) {\n            return positioned = true;\n          }\n        }\n        return false;\n      }\n\n      @Override\n      public long next() {\n        if (!positioned) {\n          if (!hasNext()) {\n            throw new NoSuchElementException();\n          }\n        }\n        positioned = false;\n        return value;\n      }\n\n    };\n  }\n\n\n\nAnd here's what I think is the most clear approach using a countdown integer:\n\n  /** Returns an iterator over the values in the set. */\n  public LongIterator iterator() {\n    return new LongIterator() {\n      private int remainingValues = cardinality();\n      private int valsIdx = 0;\n\n      @Override\n      public boolean hasNext() {\n        return remainingValues > 0;\n      }\n\n      @Override\n      public long next() {\n        if (!hasNext()) {\n          throw new NoSuchElementException();\n        }\n        remainingValues--;\n\n        if (remainingValues == 0 && zeroCount > 0) {\n          return 0;\n        }\n        \n        while (true) { // guaranteed to find another value if we get here\n          long value = vals[valsIdx++];\n          if (value != 0) {\n            return value;\n          }\n        }\n      }\n\n    };\n\n\nThis has the benefit that we don't loop past the last value of the array.  It also has fewer state variables. Also, you don't \"pay\" any advancement cost in hasNext(); it's only next() where the value is going to actually be consumed. ",
            "author": "David Smiley",
            "id": "comment-16100480"
        },
        {
            "date": "2017-07-27T14:00:22+0000",
            "content": "I'll commit the latter version tonight. ",
            "author": "David Smiley",
            "id": "comment-16103237"
        },
        {
            "date": "2017-07-27T14:15:13+0000",
            "content": "I'll commit the latter version tonight.\n\nSure, I don't think I really have a preference (and I'd have to benchmark to know if it was any faster) ",
            "author": "Yonik Seeley",
            "id": "comment-16103256"
        },
        {
            "date": "2017-07-27T22:08:14+0000",
            "content": "Commit ec0c11c703c24a565e9745ee9ebfeddc3e576118 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ec0c11c ]\n\nSOLR-11093: small improvements to LongSet's iterator ",
            "author": "ASF subversion and git services",
            "id": "comment-16103995"
        },
        {
            "date": "2017-07-27T22:09:31+0000",
            "content": "Commit 570efbecbd5baf27657e3241820e0560ae5fbb16 in lucene-solr's branch refs/heads/branch_7x from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=570efbe ]\n\nSOLR-11093: small improvements to LongSet's iterator\n\n(cherry picked from commit ec0c11c) ",
            "author": "ASF subversion and git services",
            "id": "comment-16103997"
        },
        {
            "date": "2017-07-27T22:12:20+0000",
            "content": "Commit 119f2b0177e4fe7e16ade69980a3aedfdd4d6aae in lucene-solr's branch refs/heads/branch_7_0 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=119f2b0 ]\n\nSOLR-11093: small improvements to LongSet's iterator\n\n(cherry picked from commit 570efbe) ",
            "author": "ASF subversion and git services",
            "id": "comment-16104004"
        }
    ]
}