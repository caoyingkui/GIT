{
    "id": "LUCENE-6720",
    "title": "new FunctionRangeQuery, plus ValueSourceScorer improvements",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "This issue provides a new FunctionRangeQuery, which is basically a wrapper around ValueSourceScorer (retrieved from FunctionValues.getRangeScorer).  It replaces ValueSourceFilter in the spatial module.  Solr has a class by the same name which is similar but isn't suitable to being ported.\n\nAlso, it includes refactorings to the ValueSourceScorer, to include performance enhancements by making it work with the TwoPhaseIterator API.\n\nnote: I posted this to LUCENE-4251 initially but then felt it's really its own issue.",
    "attachments": {
        "LUCENE-6720__FunctionRangeQuery.patch": "https://issues.apache.org/jira/secure/attachment/12748787/LUCENE-6720__FunctionRangeQuery.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14654792",
            "author": "David Smiley",
            "date": "2015-08-05T04:25:13+0000",
            "content": "The attached patch implements the aforementioned functionality, including tests.\n\nNotes:\n\nValueSourceScorer: \n\n\tmarked as lucene.experimental; although might be considered internal.  FunctionValues explicitly returns this scorer, and Solr calls a method on it, so I figured experimental over internal.\n\tremoved deleted doc handling since it\u2019s redundant at this layer; the bulk doc scorer handles that.\n\tmade abstract and made matches() abstract (renamed from matchesValue) to clarify it\u2019s typical use.  matches() vs. matchesValue() is more consistent (e.g. TwoPhaseIterator.matches), I feel. This rename caused some changes in a bunch of files.\n\n\n\n\nFunctionRangeQuery:\n\n\tAdded basic test, including with deleting a doc.\n\tFYI discovered this Query is similar to DocValuesRangeQuery (now in Sandbox).  DVRQ is constant scoring, is specific to docValues (not generic ValueSource), and won\u2019t match docs with no value\n\tFuture: don\u2019t match if FunctionValues.exists() returns false?  How to prevent extra value fetching?  Oddly, IntFieldSource & friends have an exist() method that fetches the value to see if it\u2019s 0.  I don\u2019t know why it should care.\n\n\n\nQuestion: Should a FunctionRangeQuery/ValueSourceScorer actually be based on the MutableValue API?  I haven\u2019t looked at that API much before now; it\u2019s an odd one. Presumably it\u2019s existence is made to facilitate scenarios like FunctionRangeQuery to avoid a bunch of type-specific code, since the type-specific code is already in the MutableValue API?  This would effectively mean that IntDocValues (a subclass of ValueSource that has a FunctionValues) & it\u2019s type friends would have simpler implementations of getRangeScorer since once the lower & upper Strings are parsed and loaded into a MutableValue of the right type, a generic range scorer could handle it from there.\n "
        },
        {
            "id": "comment-14658412",
            "author": "Adrien Grand",
            "date": "2015-08-05T15:49:27+0000",
            "content": "\n+    if (lowerVal != null ? !lowerVal.equals(that.lowerVal) : that.lowerVal != null) return false;\n+    return !(upperVal != null ? !upperVal.equals(that.upperVal) : that.upperVal != null);\n\n\n\nThis is a bit hard to read for me (many negations), maybe we could do something like\n\n\nreturn Objects.equals(lowerVal, that.lowerVal) && Objects.equals(upperVal, that.upperVal)?\n\n\n\nexplain calls scorer.advance(doc), which could be very slow if the index is large and has few docs in the range, could we just check if the given doc is in range?\n\n> Future: don\u2019t match if FunctionValues.exists() returns false?  How to prevent extra value fetching? I don\u2019t know why it should care.\n\nIndeed I don't think it should match docs that don't have a value. This behaviour you are seeing with IntFieldSource is consistent with what we are doing with doc values: doc values guarantee that if a doc misses a value, then the NumericDocValues will return 0 as a value. This way most of the time you can know both that a document has a value and its value with a single random access. We only need to check the bit set for missing values (which is disk-based) when a doc value is exactly 0.\n\nI can't help with the MutableValue/ValueFiller API, it is odd to me to. "
        },
        {
            "id": "comment-14658684",
            "author": "David Smiley",
            "date": "2015-08-05T18:55:56+0000",
            "content": "Thanks for the review Adrien!  I was hoping you'd chime in.\n\nThis addresses your two main concerns, I hope.\n\n\tBoth equals() & hashCode() implementations were re-generated using Objects.equals & Objects.hash.  FYI I use IntelliJ which has multiple templates, so I switched it to the template that uses these methods.\n\texplain() no longer calls advance to detect if the doc matches; instead it uses the ValueSourceScorer.match method.  I added a comment to clarify why this is done.\n\n\n\nI'd like to file a separate issue for ValueSourceScorer implementations to honor exists() when matching.  I don't want that to delay or crowd out the point of this issue. "
        },
        {
            "id": "comment-14660111",
            "author": "Adrien Grand",
            "date": "2015-08-06T14:48:11+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14660456",
            "author": "ASF subversion and git services",
            "date": "2015-08-06T17:47:25+0000",
            "content": "Commit 1694543 from David Smiley in branch 'dev/trunk'\n[ https://svn.apache.org/r1694543 ]\n\nLUCENE-6720: new FunctionRangeQuery wrapper around ValueSourceScorer.\nAnd ValueSourceScorer improvements. "
        },
        {
            "id": "comment-14660482",
            "author": "ASF subversion and git services",
            "date": "2015-08-06T17:55:57+0000",
            "content": "Commit 1694546 from David Smiley in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694546 ]\n\nLUCENE-6720: new FunctionRangeQuery wrapper around ValueSourceScorer.\nAnd ValueSourceScorer improvements. "
        }
    ]
}