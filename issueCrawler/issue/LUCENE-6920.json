{
    "id": "LUCENE-6920",
    "title": "Simplify callable function checks in Expression module",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/expressions"
        ],
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "The expressions module allows to specify custom functions. It does some checks to ensure that the compiled Expression works correctly and does not produce linkage errors. It also checks parameters and return type to  be doubles.\n\nThere are two problems with the current approach:\n\n\tthe check gets classloaders of the method's declaring class. This fails if a security manager forbids access to bootstrap classes (e.g., java.lang.Math)\n\tthe code only checks if method or declaring class are public, but not if it is really reachable. This may not be the case in Java 9 (different module without exports,...)\n\n\n\nThis issue will use MethodHandles to do the accessibility checks (it uses MethodHandles.publicLookup() to resolve the given reflected method). If that fails, our compiled code cannot acess it. If module system prevents access, this is also checked.\n\nTo fix the issue with classloaders, it uses a trick: It calls Class.forName() with the classloader we use to compile our expression. If that does not return the same class as the declared method, it also fails compilation. This prevents NoClassDefFoundException on executing the expression.\n\nAll tests pass.",
    "attachments": {
        "LUCENE-6920.patch": "https://issues.apache.org/jira/secure/attachment/12775889/LUCENE-6920.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15042489",
            "author": "Uwe Schindler",
            "date": "2015-12-05T00:40:27+0000",
            "content": "Patch. All tests pass. "
        },
        {
            "id": "comment-15042515",
            "author": "Robert Muir",
            "date": "2015-12-05T01:06:05+0000",
            "content": "+1, looks good. \n\nWe may also try removing the hack for it in tests.policy...\n\n\n  // expressions TestCustomFunctions (only on older java8?)\n  permission java.lang.RuntimePermission \"getClassLoader\";\n\n\n\nThe reason for the comment there: the last time i looked at this, there was some differences with java versions that confused me. So if we are worried about that, we could also just fix it for trunk only and avoid any java 7 problems. "
        },
        {
            "id": "comment-15042522",
            "author": "Uwe Schindler",
            "date": "2015-12-05T01:10:04+0000",
            "content": "Thanks for the hint. There is another getClassLoader and getClassLoader.getParent() currently in the SPI classloader. I will check this out tomorrow and open a separate issue to protect this with doPrivileged(). But this one is uncritical, as it only tries to get classloader for cases where the context class loaders differs....\n\nI may also add a test using LTC#runWithRestrictedPermissions() to ensure that this really needs no privileges. "
        },
        {
            "id": "comment-15042528",
            "author": "Uwe Schindler",
            "date": "2015-12-05T01:13:22+0000",
            "content": "New patch with permission removed. Solr never had this permission.\nWhen backporting I will for sure also check Java 7, but I don't think there are problems. "
        },
        {
            "id": "comment-15042786",
            "author": "Uwe Schindler",
            "date": "2015-12-05T10:17:07+0000",
            "content": "Small cleanup: I put the classloader check into a separate method, only called for external user functions, not for our default ones.\nWill commit this soon. "
        },
        {
            "id": "comment-15043242",
            "author": "ASF subversion and git services",
            "date": "2015-12-05T11:04:03+0000",
            "content": "Commit 1718069 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1718069 ]\n\nLUCENE-6920: Improve custom function checks in expressions module to use MethodHandles and work without extra security privileges "
        },
        {
            "id": "comment-15043255",
            "author": "Uwe Schindler",
            "date": "2015-12-05T11:29:41+0000",
            "content": "Java 7 also works fine. "
        },
        {
            "id": "comment-15043256",
            "author": "ASF subversion and git services",
            "date": "2015-12-05T11:29:46+0000",
            "content": "Commit 1718070 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1718070 ]\n\nMerged revision(s) 1718069 from lucene/dev/trunk:\nLUCENE-6920: Improve custom function checks in expressions module to use MethodHandles and work without extra security privileges "
        },
        {
            "id": "comment-15043257",
            "author": "Uwe Schindler",
            "date": "2015-12-05T11:30:13+0000",
            "content": "Thanks Robert for review & suggestions. "
        },
        {
            "id": "comment-15043262",
            "author": "Uwe Schindler",
            "date": "2015-12-05T11:51:04+0000",
            "content": "I opened  LUCENE-6921 for the other problemtic check in SPI. "
        }
    ]
}