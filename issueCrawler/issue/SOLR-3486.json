{
    "id": "SOLR-3486",
    "title": "The memory size of Solr caches should be configurable",
    "details": {
        "affect_versions": "None",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "It is currently possible to configure the sizes of Solr caches based on the number of entries of the cache. The problem is that the memory size of cached values may vary a lot over time (depending on IndexReader.maxDoc and the queries that are run) although the JVM heap size does not.\n\nHaving a configurable max size in bytes would also help optimize cache utilization, making it possible to store more values provided that they have a small memory footprint.",
    "attachments": {
        "SOLR-3486.patch": "https://issues.apache.org/jira/secure/attachment/12529161/SOLR-3486.patch",
        "LFUMap.java": "https://issues.apache.org/jira/secure/attachment/12529741/LFUMap.java"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Adrien Grand",
            "id": "comment-13282586",
            "date": "2012-05-24T16:06:46+0000",
            "content": "This patch makes the maximum memory size of LRUCache configurable. It would be nice to add the same feature to the concurrent caches although I expect it to be a little more tricky. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13283142",
            "date": "2012-05-25T05:47:10+0000",
            "content": "This is an awesome idea.  SOLR-3393 is a new implementation of LFUCache, I'll have to figure out how to include this, unless you want to give it a try. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13283275",
            "date": "2012-05-25T10:05:39+0000",
            "content": "Hi Shawn,\n\nI modified the patch in order to make it easier to add this functionality to other cache implementations. All you need to do for SOLR-3393 to support maximum memory size is to split your implementation into a LFU map (a regular map, with no evictions) which iterates (entrySet().iterator()) in frequency order and a LFU cache (that will probably extend or wrap this LFU map). Then to have a LFU cache with a fixed max mem size, just wrap your LFU map into a new SizableCache instance. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13283461",
            "date": "2012-05-25T14:17:38+0000",
            "content": "It's going to take me a while to digest what you've just said, but my first thought is that I can't change the implementation without destroying the O(1) nature.  The cache is implemented in two parts - a simple map (HashMap) for fast lookup, and an array of sets (LinkedHashSet[]) for fast frequency ordering.  When the frequency for an entry needs to be changed, it is removed from one set and added to another.\n\nAlthough it's not implemented as an actual iterator method, I have code to iterate over the array.  I should probably create an iterator and backwards iterator, just to eliminate some duplicate code.  If I don't already have a remove method, I should be able to add one. "
        },
        {
            "author": "Adrien Grand",
            "id": "comment-13283575",
            "date": "2012-05-25T16:22:19+0000",
            "content": "I've just uploaded LFUMap.java based on your implementation of LFUCache. To have a LFU cache with configurable maximum size in bytes, just wrap an instance of this class into a SizableCache.\n\nI uploaded this file to show how SizableCache could be used with different kinds of backends. But building a LFUCache is a different issue. I think we should continue the discussion on LFUCache on SOLR-3393 and only discuss configurability of the mem size of Solr caches here. Feel free to reuse the code LFUMap.java if you want, just beware that I didn't test it much.  "
        }
    ]
}