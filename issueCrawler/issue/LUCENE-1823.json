{
    "id": "LUCENE-1823",
    "title": "QueryParser with new features for Lucene 3",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/queryparser"
        ],
        "type": "New Feature",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I'd like to have a new QueryParser implementation in Lucene 3.1, ideally based on the new QP framework in contrib. It should share as much code as possible with the current StandardQueryParser implementation for easy maintainability.\n\nWish list (feel free to extend):\n\n1. Operator precedence: Support operator precedence for boolean operators\n2. Opaque terms: Ability to plugin an external parser for certain syntax extensions, e.g. XML query terms\n3. Improved RangeQuery syntax: Use more intuitive <=, =, >= instead of [] and {}\n4. Support for trierange queries: See LUCENE-1768\n5. Complex phrases: See LUCENE-1486\n6. ANY operator: E.g. (a b c d) ANY 3 should match if 3 of the 4 terms occur in the same document\n7. New syntax for Span queries: I think the surround parser supports this?\n8. Escaped wildcards: See LUCENE-588",
    "attachments": {
        "lucene_1823_foo_bug_08_26_2009.patch": "https://issues.apache.org/jira/secure/attachment/12417772/lucene_1823_foo_bug_08_26_2009.patch",
        "lucene_1823_any_opaque_precedence_fuzzybug_v2.patch": "https://issues.apache.org/jira/secure/attachment/12425407/lucene_1823_any_opaque_precedence_fuzzybug_v2.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-08-19T00:01:36+0000",
            "content": "\n2 Opaque terms\n\nI propose the following examples for the syntax\n\n\nsyntax1:\n+a -b ::complexPhrase('other syntax') ::xml('/bookstore/book[price>35.00]') ::googlesyntax('2..20 doughnuts')\n\nsyntax2:\n+a -b complexPhrase::'other syntax' xml::'/bookstore/book[price>35.00]' googlesyntax::'2..20 doughnuts'\n\nsyntax3:\n+a -b complePhrase:'other syntax' xml:'/bookstore/book[price>35.00]' googlesyntax:'2..20 doughnuts'\n\n\n\nWe can also have a default SyntaxExtension to make the syntax easier, for example if complexPhrase was the default Syntax Extension,\nthe queries above could be written like this:\n\n\nsyntax1:\n+a -b ::('other syntax') ::xml('/bookstore/book[price>35.00]') ::googlesyntax('2..20 doughnuts')\nsyntax2:\n+a -b ::'other syntax' xml::'/bookstore/book[price>35.00]' googlesyntax::'2..20 doughnuts'\nsyntax3:\n+a -b 'other syntax' xml:'/bookstore/book[price>35.00]' googlesyntax:'2..20 doughnuts'\n\n\n\nI would like to call it Query Parser Syntax extensions instead of Opaque Terms.\n\n+ 1 for syntax 1\n ",
            "author": "Luis Alves",
            "id": "comment-12744790"
        },
        {
            "date": "2009-08-19T00:10:27+0000",
            "content": "\n1. Operator precedence\nThe new queryparser already supports this internally by disabling the GroupQueryNodeProcessor. But we don't have any tescases and we need to add a simpler interface for the users by creating a new Lucene3QueryParser class (with a diff name).\n\n\n2. Opaque terms\n5. Complex phrases\nWe should also implement number 5(Complex phrases) using number 2 (Opaque terms)\n\n\n8 Escaped wildcards\nLUCENE-1820 is also related to this. ",
            "author": "Luis Alves",
            "id": "comment-12744792"
        },
        {
            "date": "2009-08-19T00:15:42+0000",
            "content": "\n8 Escaped wildcards\nThe new queryparser already supports this in the StandardSyntaxParser and most processor, we just need to make it visible to the underlying lucene classes, on the builders. ",
            "author": "Luis Alves",
            "id": "comment-12744795"
        },
        {
            "date": "2009-08-19T00:17:33+0000",
            "content": "Hmm, Syntax 2 looks more intuitive to me... looks a bit strange in syntax one to have the :: in front of the syntax name? ",
            "author": "Michael Busch",
            "id": "comment-12744797"
        },
        {
            "date": "2009-08-19T01:33:15+0000",
            "content": "syntax1 is more similar to a function call.  In the future we might extend it to support more parameters:\n\n\n::xml('syntax', param2)\n\n\n ",
            "author": "Luis Alves",
            "id": "comment-12744829"
        },
        {
            "date": "2009-08-19T01:50:18+0000",
            "content": "\nlooks a bit strange in syntax one to have the :: in front of the syntax name\n\n\nThe current list of escaped chars for the current lucene syntax is:\n\"+\", \"-\", \"!\", \"(\", \")\", \":\", \"^\", \"[\", \"]\", \"\\\"\", \"\n{\", \"}\n\", \"~\", \"*\", \"?\", \"\", \"\"\"\n\nI was trying to avoid adding an extra ones, so I reused the ':'\nbut we can select another char combination that makes more sense.\n\n\n\tsyntax1, the main idea on syntax1 is to make it look like a function call.\n\tsyntax2 , is very similar to lucene field query syntax but uses the :: operator to avoid overloading the field name syntax.\n\tsyntax3, will overload field name syntax, and will look very similar to current syntax, but will use single quotes to identify it is calling a syntax extension.\n\n\n\nI hope this helps. ",
            "author": "Luis Alves",
            "id": "comment-12744834"
        },
        {
            "date": "2009-08-19T02:07:40+0000",
            "content": "Boosting*Query's support?   ",
            "author": "Grant Ingersoll",
            "id": "comment-12744845"
        },
        {
            "date": "2009-08-19T17:44:46+0000",
            "content": "Option to not die on bad syntax - keep what works and the rest become terms  - or something along those lines. ",
            "author": "Mark Miller",
            "id": "comment-12745146"
        },
        {
            "date": "2009-08-20T00:25:20+0000",
            "content": "I think Solr has a feature similar to what I called 'Opaque terms\": Nested Queries. ",
            "author": "Michael Busch",
            "id": "comment-12745251"
        },
        {
            "date": "2009-08-25T08:15:53+0000",
            "content": "We can also implement: \n\n\n\tfoo~(>=1) should really just map to foo.\n\n\n\ndetails in LUCENE-950 issue.\n ",
            "author": "Luis Alves",
            "id": "comment-12747299"
        },
        {
            "date": "2009-08-25T08:31:35+0000",
            "content": "LUCENE-167 will be implemented by item 1.\n\nItem 1 will support  NOT - +  AND OR operators with precedence. ",
            "author": "Luis Alves",
            "id": "comment-12747304"
        },
        {
            "date": "2009-08-25T08:34:37+0000",
            "content": "Item 3\n\nwill address LUCENE-995 using a new syntax with >= <= = ",
            "author": "Luis Alves",
            "id": "comment-12747305"
        },
        {
            "date": "2009-08-25T08:44:03+0000",
            "content": "I'll also want to fix LUCENE-375 as part of this issue\n\n\tfish*~ parses to PrefixQuery - should be a parse exception\n\n ",
            "author": "Luis Alves",
            "id": "comment-12747308"
        },
        {
            "date": "2009-08-26T19:12:01+0000",
            "content": "\nWe can also implement:\n\n\n\tfoo~(>=1) should really just map to foo.\n\n\n\ndetails in LUCENE-950 issue.\n\nThis patch fixes on the contrib/queryparser this bug as discussed on LUCENE-950. It does not throw IllegalArgumentException anymore for fuzzy values greater or equals 1, it just ignores the fuzzy and create a simple field query. JUnits are also included.\n\nI used 'ant javacc-contrib-queryparser' to regenerate the StandardSyntaxParser with javacc 4.2. ",
            "author": "Adriano Crestani",
            "id": "comment-12748090"
        },
        {
            "date": "2009-11-17T20:07:25+0000",
            "content": "Proximity  query support could be very nice.  This definitely requires span queries.\n\n(john OR james OR mar*) NEAR/5 ( smith OR mil*)\n ",
            "author": "Ali Oral",
            "id": "comment-12779092"
        },
        {
            "date": "2009-11-18T21:17:26+0000",
            "content": "Hi Ali,\n\nHere another suggestion for the proximity syntax:\n( (john OR james OR mar*) ( smith OR mil*) ) WITHIN 5\n\nI'll see if I have time to put that on the new parser. ",
            "author": "Luis Alves",
            "id": "comment-12779672"
        },
        {
            "date": "2009-11-18T22:19:07+0000",
            "content": "This patch is the first patch to implement the features described on lucene-1823.\ncontains:\n\n\tOperator precedence\n\tOpaque terms\n\tANY operator\n\n\n\nThe new parser is name standard2, I'm open to change this name please post suggestions \n\nAlso included is a implementation for regex using the syntax discussed in LUCENE-2039. I wrote a simple junit and and RegexQueryParser in the test folder. This implementation use the Opaque terms implementation. ",
            "author": "Luis Alves",
            "id": "comment-12779692"
        },
        {
            "date": "2009-11-19T00:00:42+0000",
            "content": "Operator precedence order is \n\nANY, ~, ^, +, -, NOT, AND, OR\n\n\n\nFor example:\n\n\na OR b AND c \n\n\nwill now be executed as \n\n(a OR (b AND c))\n\n\n\nThe syntax for the ANY operator is: \n\n( a b c d ) ANY 2 \n\n\n\nOpaque syntax is:\n\n\nextensioName:field:term\nextensioName:field:\"phrase\"\n\n\n\nDefault field:\n\nextensioName::term\nextensioName::\"phrase\"\n\n\n\nIn the test folder standard2 there is a Opaque implementation for regex (contrib component),\nand the syntax to use this test RegexQueryParser is, all the lunece syntax and the above, plus:\n\nregex:field:\"regular expression\"\n\n\n\nFor example:\n\nregex::\"^.[aeiou]c.*$\"\n\n ",
            "author": "Luis Alves",
            "id": "comment-12779745"
        },
        {
            "date": "2009-11-19T00:49:02+0000",
            "content": "I forgot to say that the patch, includes LUCENE-1937 and LUCENE-1938 from Adriano Crestani to enable the precedence code. ",
            "author": "Luis Alves",
            "id": "comment-12779767"
        },
        {
            "date": "2009-12-02T07:57:43+0000",
            "content": "Luis and Adriano,\n\nthe QP config looks quite overwhelming with all the Attributes. I'm not sure if the AttributeSource/Attribute stuff is a good fit for this type of configuration.\n\nCouldn't we achieve the same with a Properties (Hashtable) approach and constants or something similar. This would be a good place to start to reduce the complexity of the new QP. ",
            "author": "Michael Busch",
            "id": "comment-12784696"
        },
        {
            "date": "2009-12-02T08:46:15+0000",
            "content": "I prefer syntax 2 for the opaque terms. If the idea is to plug in another QP for that opaque term, then it would be best IMO if that QP received the entire string and did what it knows with it. That way, I could pass my::'field1:value OR field2:value2 AND (something else)', and 'my' QP would parse the entire string.\nI don't see how this can be achieved w/ <syntax>:<field>:query, meaning, how can I pass a clause which contains two fields ORed or ANDed? IMO, the simpler the better and it's easy to explain that whatever comes after the '::' (double colons), is passed onto as-is to the assigned QP. ",
            "author": "Shai Erera",
            "id": "comment-12784709"
        },
        {
            "date": "2010-08-28T17:52:31+0000",
            "content": "Linked issues for reference and heads up. @Luis, are you still working on that stuff and would you be willing to further maintain the QueryParser in Contrib? ",
            "author": "Simon Willnauer",
            "id": "comment-12903849"
        },
        {
            "date": "2010-09-01T03:51:44+0000",
            "content": "I agree with Michael, AttributeSource was designed for another purpose, and does not really fit for configuration purposes.\n\nThe map idea is really good and fits well as configuration for the QP, but I would like to restrict the key type, so the user doesn't use a String object as key. String keys may lead to runtime errors, mainly when they are inserted inline. I would prefer to use enums as keys, it would enforce the user to always pass the same object as key when referencing the same configuration. It also avoids duplicated configuration keys, once each enum type has only one instance per JVM.\n\nIf nobody complains about using a Map<Enum<?>, Object> as configuration for QP framework, I will start working on a new patch including these changes soon. ",
            "author": "Adriano Crestani",
            "id": "comment-12904892"
        },
        {
            "date": "2010-09-01T04:47:28+0000",
            "content": "Another one for the wishlist - support for the nested documents offered in LUCENE-2454\n\nAn example query of a resume with a parent person doc and multiple child \"employment\" documents might be as follows:\n\n   +(name:frederick OR name:fred)  +CHILD(type:contract AND skill:java AND date>=2005 )\n\nThe new feature here is the CHILD(...) construct that shifts query context to a nested document.\nI imagine there is some more formal syntax we could consider lifting from XPath but I thought I'd throw this in while you are contemplating new features. ",
            "author": "Mark Harwood",
            "id": "comment-12904901"
        },
        {
            "date": "2010-10-20T15:35:41+0000",
            "content": "Just a reminder that Luis's patch was blocked by LUCENE-1938, which is now resolved, the patch can finally be reviewed/committed. ",
            "author": "Adriano Crestani",
            "id": "comment-12923015"
        },
        {
            "date": "2010-10-20T18:27:22+0000",
            "content": "Adriano, I will take a look at the patch.\n\nA few things have changed:\n\nthe LUCENE-950 issue, I changed the \nFuzzyQuery syntax to allow for foo~1 foo~2 to support exact edit distances... \nso I don't think we need to change anything there.\n\nAdditionally we also added proper regular expression support (via Lucene core's RegexpQuery).\n\nBut i'll play with the patch, and see if i can bring it up to trunk.\n\nAs far as using a Map instead of Attributes for configuration, I think this would be a really good step!\nAre you still interested in working up a patch for this one. At the moment I think all the attributes\nscare people away from the contrib/queryparser. ",
            "author": "Robert Muir",
            "id": "comment-12923078"
        },
        {
            "date": "2010-10-22T14:22:43+0000",
            "content": "Looking at the patch, its a bit difficult to review since the patch creates a whole new queryparser (Standard2).\n\nThis is just my opinion here:\n\n\n\tI think it would be good to just modify \"Standard\" with the improvements presented here. I think for contrib/queryparser to succeed, we should worry less about providing exact imitations of the core queryparser, and instead focus on trying to provide a framework and concrete implementation that solves the problems people are facing. In other words, fix what we don't like and provide a parser that works the way we want, and forget about exact compatibility with the core queryparser... if someone wants its exact behavior, they can just use it.\n\tIt would be much easier if improvements could be on separate patches rather than bundled: For example, LUCENE-1938 was easy for me to commit because it was well-contained and covered one single improvement/feature.\n\n ",
            "author": "Robert Muir",
            "id": "comment-12923867"
        },
        {
            "date": "2011-03-16T23:25:38+0000",
            "content": "Hi Robert,\n\nI completely agree with your statement, the config API scares me also. I would love to submit a patch for it, but I am working for IBM now, and, as a committer, I need to go through some bureaucratic paperwork before doing any new feature for Lucene and it might still take some time \n\nI had a better idea, I will propose it to be a GSOC project for this year. This way we can also get one more contributor to contrib QP.  ",
            "author": "Adriano Crestani",
            "id": "comment-13007737"
        },
        {
            "date": "2011-07-26T13:27:53+0000",
            "content": "Relates to LUCENE-3343: Open range comparison operator >,>=,<,<= and =. ",
            "author": "Olivier Favre",
            "id": "comment-13071091"
        },
        {
            "date": "2011-12-28T00:59:18+0000",
            "content": "@Luis, still working on this? ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13176390"
        },
        {
            "date": "2012-04-11T20:00:15+0000",
            "content": "Luis, are you there? Can you give a status on this. Think this issue needs a general update both the title, description and a strategy for how to proceed. I agree with Robert that incremental progress is better than trying to solve everything in one go.\n\nStarting to adopt the new Flex QP framework would accelerate QP development also in Solr camp. ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13251875"
        },
        {
            "date": "2012-05-23T19:56:13+0000",
            "content": "moving this over to 4.1 it seems dead to me though ",
            "author": "Simon Willnauer",
            "id": "comment-13281847"
        },
        {
            "date": "2013-07-23T18:44:26+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716951"
        },
        {
            "date": "2014-04-16T12:54:40+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970834"
        }
    ]
}