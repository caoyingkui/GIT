{
    "id": "LUCENE-201",
    "title": "Bad performance in PrefixQuery for large indices.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Incomplete",
        "status": "Closed"
    },
    "description": "[Version is lucene-1.3-final, but that was not selectable as version above]\n\nIn org.apache.lucene.search.PrefixQuery.rewrite(IndexReader):\n\n1.  term.text().startsWith(prefixText) is checked before\n    term.field() == prefixField although it is much more expensive.\n    Why check text at all when it is the wrong field?\n\n2.  If there are many matches in the index, lots and lots of\n    potentially identical TermQuery's are added to the BooleanQuery.\n    Either it can be solved here by first adding the TermQueries to\n    a HashSet (so all entries in the set are unique) and then traverse\n    the set and add them to the BooleanQuery. Or modify BooleanQuery's\n    add method so it only adds if not already contained in \"clauses\".",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2004-04-11T16:50:34+0000",
            "content": "Have you tested whether your suggsted changes really improve performance? If \nso, how big was your index and how much did the changes improve performance?  ",
            "author": "Daniel Naber",
            "id": "comment-12321639"
        },
        {
            "date": "2004-04-13T13:10:02+0000",
            "content": "No, I was able to rewrite the query in my application to a TermQuery instead. I\ndidn't want to patch my customer's lucene jar.\n\nSuggestion 2 above will certainly improve performance if implemented. I would\nalmost concider it a bug that it works the way it does. Especially when\nBooleanQuery has a maximum number of queries that can be added to it and throws\nan exception when adding more. All of a sudden when the index gets large enough,\nthe application stops working properly. ",
            "author": "Jorgen Rydenius",
            "id": "comment-12321640"
        },
        {
            "date": "2004-04-14T00:16:48+0000",
            "content": "There is no bug here. \n\nPrefixQuery uses a TermEnum is used from IndexReader.terms(). \nThe term enumerator will give only unique terms from the term index. \nThere will be no identical TermQuery's generated. \n\n(A Termdocs from IndexReader.termDocs(Term) would do the repetitions \nyou are considering.) \n\nThe prefix is tested before the field because it normally is \nthe first one that fails. In case this test passes, one still \nhas to check the field anyway, so it doesn't matter much. \n\nModifying add() on BooleanQuery would need to add the \nboosts of the clauses in case two equal TermQuery clauses are added, \notherwise existing scoring behaviour would be broken. \n\nRegards, \nPaul  ",
            "author": "Paul Elschot",
            "id": "comment-12321641"
        },
        {
            "date": "2004-04-14T13:44:56+0000",
            "content": "My mistake. I did not realize that IndexReader.terms() only returned unique\nentries. Sorry. Resolving as invalid. ",
            "author": "Jorgen Rydenius",
            "id": "comment-12321642"
        }
    ]
}