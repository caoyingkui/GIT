{
    "id": "SOLR-6194",
    "title": "Allow access to DataImporter and DIHConfiguration",
    "details": {
        "affect_versions": "4.10",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ],
        "components": [
            "contrib - DataImportHandler"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I'd like to change the visibility and access to a couple of the internal classes of DataImportHandler, specifically DataImporter and DIHConfiguration.  My reasoning is that I've added the ability for a new data import handler \"command\" called getquery that will return the exact queries (fully resolved) that are executed for an entity within the data import configuration.  This makes it much easier to debug the dih, rather than turning on debug/verbose flags and digging through the raw response.  Additionally, it gives me a \"service\" that I can then go take the queries from and run them.\n\nHere's a snippet of Java code that I can now execute now that I have access to the DIHConfiguration:\n\nSnippet.java\n  /**\n   * @return a map of all the queries for each entity in the given config\n   */\n  protected Map<String,String> getEntityQueries(DIHConfiguration config, Map<String,Object> params)\n  {\n    Map<String,String> queries = new LinkedHashMap<>();\n    if (config != null && config.getEntities() != null)\n    {\n      //make a new variable resolve\n      VariableResolver vr = new VariableResolver();\n      vr.addNamespace(\"dataimporter.request\",params);\n\n      //for each entity\n      for (Entity e : config.getEntities())\n      {\n        //get the query and resolve it\n        if (e.getAllAttributes().containsKey(SqlEntityProcessor.QUERY))\n        {\n          String query = e.getAllAttributes().get(SqlEntityProcessor.QUERY);\n          query = query.replaceAll(\"\\\\s+\", \" \").trim();\n          String resolved = vr.replaceTokens(query);\n          resolved = resolved.replaceAll(\"\\\\s+\", \" \").trim();\n          queries.put(e.getName(),resolved);\n          queries.put(e.getName()+\"_raw\",query);\n        }\n      }\n    }\n    return queries;\n  }\n\n\n\nI'm attaching a patch that I would appreciate someone have a look for consideration.  It's fully tested \u2013 please let me know if there is something else I need to do/test.",
    "attachments": {
        "SOLR-6194.patch": "https://issues.apache.org/jira/secure/attachment/12652039/SOLR-6194.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "ASF subversion and git services",
            "id": "comment-14045658",
            "date": "2014-06-27T07:26:37+0000",
            "content": "Commit 1605972 from shalin@apache.org in branch 'dev/trunk'\n[ https://svn.apache.org/r1605972 ]\n\nSOLR-6194: Allow access to DataImporter and DIHConfiguration from DataImportHandler "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14045659",
            "date": "2014-06-27T07:27:21+0000",
            "content": "Commit 1605973 from shalin@apache.org in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1605973 ]\n\nSOLR-6194: Allow access to DataImporter and DIHConfiguration from DataImportHandler "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14045660",
            "date": "2014-06-27T07:27:49+0000",
            "content": "Thanks Aaron. "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-14045963",
            "date": "2014-06-27T14:05:41+0000",
            "content": "Thanks shalin!   I'm attaching one more small patch that opens up a couple other methods.  Now with these fixes I have the ability to actually run the entity queries from my data import handler for easier debug/inspection, without actually having to run an import.  Can you please review and commit this small patch as well?\n\nAaron "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-14045964",
            "date": "2014-06-27T14:05:59+0000",
            "content": "another small patch "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-14045988",
            "date": "2014-06-27T14:18:18+0000",
            "content": "Aaron, the DataImporter.getDocBuilder(DIHWriter writer, RequestInfo requestParams) method that you have added isn't used anywhere. I guess you must be using it for your use-case but it is quite possible that somewhere down the line, someone might remove it without realizing it.\n\nI think this is a good time for you to write a test case showing how you are using DIH without an actual import. I can commit it as part of our test suite. "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-14046083",
            "date": "2014-06-27T15:48:32+0000",
            "content": "Shalin,\n\nGood feedback.  Here's the static utility class I wrote:\n\nSnippet.java\n//...\n\nfinal public class SolrQueryUtils\n{\n  static public void runEntityQueries(\n    DIHConfiguration config, SolrCore core, DataImporter importer,\n    Entity entity, String entityName,\n    SolrQueryRequest req, SolrQueryResponse rsp,\n    Map<String,Object> params) throws Exception\n  {\n    Collection<Map<String,Object>> rows = new LinkedList<>();\n    EntityProcessorWrapper epw = null;\n    try\n    {\n      if (entityName == null || entity.getName().equals(entityName))\n      {\n        epw = SolrQueryUtils.getEntityProcessorWrapperFrom(\n          core, importer, entity, req, rsp, params\n        );\n        if (epw != null)\n        {\n          Map<String, Object> row = epw.nextRow();\n          //just for sanity, TODO: add a better way to do this\n          final int MAX = 10000;\n          int index = 0;\n          while (row != null)\n          {\n            if (index++ < MAX) { rows.add(row); }\n            row = epw.nextRow();\n          }\n        }\n      }\n    }\n    catch (Exception ex)\n    {\n      ex.printStackTrace();\n    }\n    finally\n    {\n      if (epw != null)\n      {\n        epw.getDatasource().close();\n        epw.close();\n        epw.destroy();\n      }\n    }\n    if (entityName == null || entity.getName().equals(entityName))\n    {\n      rsp.add(entity.getName()+\"_results\",rows);\n    }\n    //potentially recurse if there are children\n    Collection<Entity> children = entity.getChildren();\n    if (children != null)\n    {\n      //for each child entity\n      for (Entity child : children)\n      {\n        SolrQueryUtils.runEntityQueries(config,core,importer,child,entityName,req,rsp,params);\n      }\n    }\n  }\n\n  static public EntityProcessorWrapper getEntityProcessorWrapperFrom(\n    SolrCore core, DataImporter importer, Entity entity,\n    SolrQueryRequest req, SolrQueryResponse rsp,\n    Map<String,Object> params) throws Exception\n  {\n    RequestInfo reqinfo = new RequestInfo(req,params,null);\n    DocBuilder docBuilder = importer.getDocBuilder(null,reqinfo);\n    EntityProcessorWrapper epw = docBuilder.getEntityProcessorWrapper(entity);\n    VariableResolver vr = new VariableResolver();\n    vr.addNamespace(\"dataimporter.request\",params);\n    Context ctx = new ContextImpl(\n      epw,                      //EntityProcessorWrapper epw\n      vr,                       //VariableResolver resolver\n      null,                     //DataSource ds\n      Context.FULL_DUMP,        //String currProcess\n      reqinfo.getRawParams(),   //Map<String, Object> global\n      null,                     //ContextImpl parentContext\n      docBuilder                //DocBuilder docBuilder\n    );\n    DataSource<?> ds = importer.getDataSourceInstance(\n      entity, entity.getDataSourceName(), ctx\n    );\n    SolrQueryUtils.initDataSource(importer.getConfig(),core,entity,ds,ctx);\n    epw.setDatasource(ds);\n    epw.init(ctx);\n    epw.setInitalized(true);\n    return epw;\n  }\n\n  static public void initDataSource(\n    DIHConfiguration config, SolrCore core, Entity entity, DataSource<?> ds, Context ctx\n  )\n  {\n    //add all the properties from the core descriptor\n    CoreDescriptor descriptor = core.getCoreDescriptor();\n    Map<String,Object> globals = new LinkedHashMap<>();\n    globals = SolrQueryUtils.addProperties(descriptor.getPersistableStandardProperties(), globals);\n    globals = SolrQueryUtils.addProperties(descriptor.getPersistableUserProperties(), globals);\n    //sort the keys for easier debugging\n    globals = new TreeMap<>(globals);\n\n    //make a new variable for the datasource properties resolver\n    VariableResolver globalResolver = new VariableResolver(globals);\n    Map<String,String> dsProps = config.getDataSources().get(entity.getDataSourceName());\n    Map<String,String> dsPropsResolved = new LinkedHashMap<>();\n    for(Map.Entry<String,String> entry : dsProps.entrySet())\n    {\n      dsPropsResolved.put(entry.getKey(),globalResolver.replaceTokens(entry.getValue()));\n    }\n\n    Properties dsProperties = new Properties();\n    dsProperties.putAll(dsPropsResolved);\n    ds.init(ctx,dsProperties);\n  }\n\n  static public Map<String,Object> addProperties(Properties p, Map<String,Object> map)\n  {\n    if (p != null && map != null)\n    {\n      Enumeration<?> enumer = p.propertyNames();\n      while(enumer.hasMoreElements())\n      {\n        String key = enumer.nextElement().toString();\n        String value = p.getProperty(key);\n        map.put(key,value);\n      }\n    }\n    return map;\n  }\n}\n\n\n\n\nAnd, I have a custom data import handler that extends DataImportHandler.  I added support for calling the data import handler with command='runquery', which ends up looking up the entities from the config, and calling the runEntityQueries method above.\n\nI'm not sure I'm gonna be able to write a test case since I'd assume that something would have to be mocked up in order for it to actually run?\n\nLet me know...\n\nAaron "
        },
        {
            "author": "Aaron LaBella",
            "id": "comment-14046087",
            "date": "2014-06-27T15:51:29+0000",
            "content": "NOTE: as you can see above ... actually getting the EntityProcessorWrapper, and initializing the datasource, seems like it is much more code than I would've hoped/expected for.  I think the solr data import handler framework is an incredible piece of software, it's just unfortunate that the API's aren't a little more open and flexible to allow for extensibility and use-cases beyond just getting data into solr.  I could envision using the code base to define adhoc queries that support things like variable resolution, evaluators, transformers, etc \u2013 it's very powerful stuff \n\nThanks. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14074334",
            "date": "2014-07-25T12:20:46+0000",
            "content": "Commit 1613406 from Erik Hatcher in branch 'dev/trunk'\n[ https://svn.apache.org/r1613406 ]\n\nSOLR-3622, SOLR-5847, SOLR-6194, SOLR-6269: Several DIH fixes/improvements "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-14074339",
            "date": "2014-07-25T12:25:20+0000",
            "content": "Commit 1613409 from Erik Hatcher in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1613409 ]\n\nSOLR-3622, SOLR-5847, SOLR-6194, SOLR-6269: Several DIH fixes/improvements (merged from r1613406) "
        }
    ]
}