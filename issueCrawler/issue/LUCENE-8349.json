{
    "id": "LUCENE-8349",
    "title": "Highlighter based on Matches API",
    "details": {
        "components": [],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "I started trying to integrate the Matches API into the UnifiedHighlighter, but there's a fairly heavy impedance mismatch between the way the two of them work (eg Matches doesn't give you freqs, it's entirely lazy, the UH tries to do things by field rather than by doc).  So instead, I thought I'd try and write a new highlighter based around Matches, and see what it looks like.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16503376",
            "author": "Alan Woodward",
            "content": "Here's a pull request with my first sketch: https://github.com/apache/lucene-solr/pull/397\n\nIt's very minimal, needs lots of javadocs and testing, and doesn't score passages yet, but it should give an idea of what I'm trying to do. ",
            "date": "2018-06-06T14:24:29+0000"
        },
        {
            "id": "comment-16503383",
            "author": "Alan Woodward",
            "content": "cc Jim Ferenczi David Smiley ",
            "date": "2018-06-06T14:30:14+0000"
        },
        {
            "id": "comment-16503662",
            "author": "David Smiley",
            "content": "Robert Muir do you have a comment on the highlight by field then doc vs doc then field?  I believe you chose this arrangement in the PostingsHighlighter (the ancestor of the UH) and AFAICT this is optimized for offsets in postings.  I'm not sure how much it matters.  And I'm surprised Matches API would have any impact on the distinction (as Alan implies it would) but I haven't looked closely at this patch yet to see.\n\nI'll look at your PR Alan.  This is lighting a fire under my but to continue LUCENE-8286 \u2013 battle of the highlighters  ",
            "date": "2018-06-06T17:42:32+0000"
        },
        {
            "id": "comment-16519770",
            "author": "David Smiley",
            "content": "This highlighter is impressive for not a lot of code! Great work Alan Woodward! Some observations:\n\n\tOffsets can be in postings, term vectors, or via analysis. I didn't think you'd get to all 3 in your first patch/PR but you did! You could probably \"borrow\" the \"TermVectorFilteredLeafReader\" mechanism from the UH to address the hybrid case.\n\tI don't see any special multi-term query (e.g. wildcards) processing but I suspect MTQs will just work. However, I'm really concerned about the performance for when offsets are in postings, since the term explosion could be huge and slow to advance. FWIW the UH solves this in two ways. First it visits the Query tree looking for MTQs, and if found then switches away from offsets in postings to analysis as a better trade-off. Granted it won't always be the best trade-off but it addresses the worst case. Also, if a simple term vector (no offsets) are present then it can overlays it with the real index using TermVectorFilteredLeafReader, thus avoiding analysis.\n\tThe so-called \"requireFieldMatch\" option seen elsewhere is mandatory here \u2013 the query must match with whatever fields it specifies. Perhaps this OffsetsReader thing could map all terms() asked for into the field to be highlighted?\n\tObviously requires Weight.matches on the underlying query tree to work. SpanQueries don't yet but I assume that'll be added soon in another issue.\n\tI didn't notice any passage scoring/ranking.\n\tI didn't notice any javadocs yet but you'll get there I assume.\n\tI really like your reuse of a Lucene Document with TextField entries to represent a set of passages for the document's highlighted fields!\n\tI like that it highlights per-field value as opposed to the PH/UH which highlights a joined string across all values, which is awkward for the UH. This will allow for better short-circuiting options in the future. However, I'm concerned about the performance implications from what I see here as I believe the highlighting process starts over again on the query for each value, effectively creating an O(N^2) problem as the underlying offsets needs to be skipped over to get to the right window over and over again.\n\n\n\nBTW some complexity in the UH that I don't see here is related to query tree visiting, such as for MultiTermQueries and also for getting all the terms (granted the latter is easy and not much code). This information is put to good use by building a MemoryIndex collecting only the pertinent terms and not bothering with the rest.\n\nIf this highlighter moves forward, I figure at some point you're going to have to address visiting/walking queries (e.g. to look for MTQs) and/or perhaps rewriting them. Consider these related issues: LUCENE-8184 LUCENE-8160 LUCENE-3041 ",
            "date": "2018-06-21T20:55:24+0000"
        }
    ]
}