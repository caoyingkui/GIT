{
    "id": "SOLR-8581",
    "title": "Integration tests for rolling upgrades",
    "details": {
        "components": [],
        "type": "Test",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "I intend to work on an integration test suite for Solr, to test for issues to deal with back compat, rolling upgrades etc.\nThe interface for the test suite, as I'm planning, would be to have it accept two versions of Solr (either released versions or trunk/branch).\n\nI work on SolrCloud, and we need something like this to enable us to upgrade more frequently. I had a conversation with @Ishan Chattopadhyaya, who emphasised to me the need to have something like this.\n\nIf there's already any ongoing effort in doing this, I can help out there. Please let me know.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-01-24T03:33:35+0000",
            "author": "Mark Miller",
            "content": "+1. If we want to support this for real, requires tests.  ",
            "id": "comment-15114160"
        },
        {
            "date": "2016-02-08T19:07:20+0000",
            "author": "Vivek Narang",
            "content": "Hi,\nI have come up with a preliminary working code. Although, I am working to improve the code, I have been able to get some of the upgrade results that are listed in the github readme file. \n\nMost recent test:\nUpgrade from 5.3.2 to 5.4.1 failed. Please find a portion of the log here: http://viveknarang.com/log.txt\n\nPlease access https://github.com/viveknarang/org.apache.solr.tests.upgradetests/ for more details. \n\nRegards\nVivek Narang ",
            "id": "comment-15137484"
        },
        {
            "date": "2016-02-08T19:25:28+0000",
            "author": "Mark Miller",
            "content": "Strange, seem jetty does not start due to:\n\njavax.servlet.UnavailableException: org.apache.solr.servlet.ZookeeperInfoServlet ",
            "id": "comment-15137514"
        },
        {
            "date": "2017-01-23T10:02:01+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "I tested 6.2.0 -> 6.3.0 and 5.5.1 -> 6.3.0, and both passed.\nHowever, 6.3.0 -> 6.4.0 is failing. Isn't obvious why, would need to look deeper if this is a test problem or a genuine bug. ",
            "id": "comment-15834185"
        },
        {
            "date": "2017-01-23T10:11:04+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "The relevant portion from the startup logs is:\n\n2017-01-23 10:06:52.471 WARN  (main) [   ] o.e.j.s.SecurityHandler ServletContext@o.e.j.w.WebAppContext@20398b7c{/solr,file:///home/ishan/code/solr-upgrade-tests/SolrUpdateTests/49d824d0-cd20-4a9c-ba63-31d3ed5a4ff0/solr-6.2.0/server/solr-webapp/webapp/,STARTING}{/home/ishan/code/solr-upgrade-tests/SolrUpdateTests/49d824d0-cd20-4a9c-ba63-31d3ed5a4ff0/solr-6.2.0/server/solr-webapp/webapp} has uncovered http methods for path: /\n2017-01-23 10:06:52.476 WARN  (main) [   ] o.e.j.d.DeploymentManager Unable to reach node goal: started\njava.lang.NoClassDefFoundError: com/codahale/metrics/MetricSet\n\tat java.lang.Class.getDeclaredConstructors0(Native Method)\n\tat java.lang.Class.privateGetDeclaredConstructors(Class.java:2671)\n\tat java.lang.Class.getConstructor0(Class.java:3075)\n\tat java.lang.Class.newInstance(Class.java:412)\n\tat org.eclipse.jetty.server.handler.ContextHandler$Context.createInstance(ContextHandler.java:2456)\n\tat org.eclipse.jetty.servlet.ServletContextHandler$Context.createFilter(ServletContextHandler.java:1310)\n\tat org.eclipse.jetty.servlet.FilterHolder.initialize(FilterHolder.java:120)\n\tat org.eclipse.jetty.servlet.ServletHandler.initialize(ServletHandler.java:856)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.startContext(ServletContextHandler.java:348)\n\tat org.eclipse.jetty.webapp.WebAppContext.startWebapp(WebAppContext.java:1379)\n\tat org.eclipse.jetty.webapp.WebAppContext.startContext(WebAppContext.java:1341)\n\tat org.eclipse.jetty.server.handler.ContextHandler.doStart(ContextHandler.java:772)\n\tat org.eclipse.jetty.servlet.ServletContextHandler.doStart(ServletContextHandler.java:261)\n\tat org.eclipse.jetty.webapp.WebAppContext.doStart(WebAppContext.java:517)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n\tat org.eclipse.jetty.deploy.bindings.StandardStarter.processBinding(StandardStarter.java:41)\n\tat org.eclipse.jetty.deploy.AppLifeCycle.runBindings(AppLifeCycle.java:188)\n\tat org.eclipse.jetty.deploy.DeploymentManager.requestAppGoal(DeploymentManager.java:499)\n\tat org.eclipse.jetty.deploy.DeploymentManager.addApp(DeploymentManager.java:147)\n\tat org.eclipse.jetty.deploy.providers.ScanningAppProvider.fileAdded(ScanningAppProvider.java:180)\n\tat org.eclipse.jetty.deploy.providers.WebAppProvider.fileAdded(WebAppProvider.java:458)\n\tat org.eclipse.jetty.deploy.providers.ScanningAppProvider$1.fileAdded(ScanningAppProvider.java:64)\n\tat org.eclipse.jetty.util.Scanner.reportAddition(Scanner.java:610)\n\tat org.eclipse.jetty.util.Scanner.reportDifferences(Scanner.java:529)\n\tat org.eclipse.jetty.util.Scanner.scan(Scanner.java:392)\n\tat org.eclipse.jetty.util.Scanner.doStart(Scanner.java:313)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n\tat org.eclipse.jetty.deploy.providers.ScanningAppProvider.doStart(ScanningAppProvider.java:150)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n\tat org.eclipse.jetty.deploy.DeploymentManager.startAppProvider(DeploymentManager.java:561)\n\tat org.eclipse.jetty.deploy.DeploymentManager.doStart(DeploymentManager.java:236)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n\tat org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:132)\n\tat org.eclipse.jetty.server.Server.start(Server.java:405)\n\tat org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:114)\n\tat org.eclipse.jetty.server.handler.AbstractHandler.doStart(AbstractHandler.java:61)\n\tat org.eclipse.jetty.server.Server.doStart(Server.java:372)\n\tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\n\tat org.eclipse.jetty.xml.XmlConfiguration$1.run(XmlConfiguration.java:1510)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1435)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.eclipse.jetty.start.Main.invokeMain(Main.java:214)\n\tat org.eclipse.jetty.start.Main.start(Main.java:457)\n\tat org.eclipse.jetty.start.Main.main(Main.java:75)\nCaused by: java.lang.ClassNotFoundException: com.codahale.metrics.MetricSet\n\tat java.net.URLClassLoader.findClass(URLClassLoader.java:381)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:424)\n\tat java.lang.ClassLoader.loadClass(ClassLoader.java:357)\n\tat org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:487)\n\tat org.eclipse.jetty.webapp.WebAppClassLoader.loadClass(WebAppClassLoader.java:428)\n\t... 48 more\n\n\n\nLooking into why this could've happened. Perhaps the test suite didn't properly place all the libs/jars in the right places? ",
            "id": "comment-15834201"
        },
        {
            "date": "2017-01-23T11:03:24+0000",
            "author": "Ishan Chattopadhyaya",
            "content": "Looking into why this could've happened. Perhaps the test suite didn't properly place all the libs/jars in the right places?\n\nThat was indeed the case; server/lib also needs to be copied. Fixed it with this commit [0]. 6.3.0 -> 6.4.0 passes fine now.\n\nFor these integration tests, I think we should add more tests and have it work against git branch/commit (instead of only released versions). After these, we should run this once every release.\n\n[0] - https://github.com/viveknarang/solr-upgrade-tests/commit/29bc75e4dea4fc330227f3e079b9be89db7ca872 ",
            "id": "comment-15834267"
        },
        {
            "date": "2017-01-30T01:43:08+0000",
            "author": "Kevin Risden",
            "content": "I threw together an example of doing this with released versions of Solr.\n\nhttps://github.com/risdenk/solr_upgrade_test\n\nIt avoids using Java for the automation just because it was easier to write in Python to start. It doesn't do replacing of jar and instead uses the release directly. There are generated configs for every version from 5.0.0 to 6.4.0 and every version in between. It is easy to add another version with a config file just need a URL to a release. ",
            "id": "comment-15844781"
        },
        {
            "date": "2017-01-31T15:22:02+0000",
            "author": "Kevin Risden",
            "content": "I setup a Travis CI build to run daily against 6.4.0 to the latest nightly. It probably makes sense to point at the 6x branch instead of master but its a start.\n\nhttps://travis-ci.org/risdenk/solr_upgrade_test ",
            "id": "comment-15846956"
        },
        {
            "date": "2017-01-31T15:31:43+0000",
            "author": "Kevin Risden",
            "content": "It should now be testing against master and 6.x last successful builds.  ",
            "id": "comment-15846968"
        },
        {
            "date": "2017-02-03T18:10:36+0000",
            "author": "Walter Underwood",
            "content": "How about a test that covers a rolling version upgrade replacing nodes.\n\n1. Add new live node to cluster.\n2. Add replica to new node.\n3. Delete replica from old node.\n4. Shut down old node.\n\nProbably should run that with commands sent to an old node and a new node. ",
            "id": "comment-15851855"
        },
        {
            "date": "2017-02-03T18:34:15+0000",
            "author": "Walter Underwood",
            "content": "Leader election in a new/old two node cluster. Make sure it can go old->new and new->old.\n\nRun some indexing after each election. ",
            "id": "comment-15851887"
        },
        {
            "date": "2017-02-03T18:34:31+0000",
            "author": "Walter Underwood",
            "content": "Distributed search with all variations of global IDF support. ",
            "id": "comment-15851889"
        },
        {
            "date": "2017-02-16T13:10:02+0000",
            "author": "Kevin Risden",
            "content": "Thanks Walter those are some great ideas for testing. ",
            "id": "comment-15869894"
        }
    ]
}