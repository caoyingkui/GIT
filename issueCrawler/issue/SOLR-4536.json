{
    "id": "SOLR-4536",
    "title": "unable to access resources loaded from sharedLib in solr-test-framework",
    "details": {
        "affect_versions": "4.2,                                            6.0",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "Tests"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Files (jars for me) from a sharedLib directory defined in solr.xml outside of the coreName's dataDir not being available to coreName's TestHarness despite it being logged as added to classpath.\n\nI don't see the 'sharedLib' tested anywhere else but it seems to work outside of the test-framework.",
    "attachments": {
        "SOLR-4536.patch": "https://issues.apache.org/jira/secure/attachment/12572565/SOLR-4536.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tricia Jenkins",
            "id": "comment-13596120",
            "date": "2013-03-07T18:08:03+0000",
            "content": "The patch I'm attaching has an added test (beyond SOLR-4317) for the sharedLib directory from solr-test-framework. "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-13596126",
            "date": "2013-03-07T18:09:31+0000",
            "content": "Removed my failing test patch from SOLR-4317 and created new issue SOLR-4536. "
        },
        {
            "author": "Tricia Jenkins",
            "id": "comment-13601581",
            "date": "2013-03-13T20:11:53+0000",
            "content": "I think I see what's happening now.  As the comment in TestHarness states, \"Creates a container based on infos needed to create one core,\"  the intention appears to be to create a single core to test with specified schema, solrconfig, etc.  The assumption I was working under was that I could test one (or more) of my cores in a multi-core setup with sharedLib using the test-framework.\n\nThe SolrResourceLoader that h.getCore().getResourceLoader() references is the one stored in the SolrConfig object.  Resources are added from the solrHome/coreName directory only.  The SolrResourceLoader that contains the 'empty-file-main-lib.txt' in classes logged as added in my test is in the CoreContainer (protected h.getCoreContainer().loader) object.    Resources here are added from the solrHome directory.  This also explains why if I move the sharedLib to a lib directory inside the core the resources are loaded and available in the test framework.\n\nThen again maybe I don't quite understand...  if you look at the test in my patch the SolrResourceLoader from the SolrCore/SolrConfig opens 'README' file but not the 'classes/empty-file-main-lib.txt'.  My understanding would mean that it shouldn't be able to open either file.\n\nRegardless, the items added to the classloader that appear in the logs are from when the CoreContainer is initialized.  The SolrResourceLoader that it used in the test is a different object.\n\nIs my understanding correct?  Is my desire to test a core from a multi-core setup with a sharedLib unreasonable?  \n\nIf it's not unreasonable, I'm thinking of adding to SolrTestCase4J an initCoreFromMultiCore( coreName, solrHome, 'solr.xml') method which would call a new TestHarness constructor TestHarness(String coreName, String solrHome, String multicoreConfig) which in turn would call container = new CoreContainer( String, File) and hopefully be able to set all the important TestHarness fields starting by using the container.getCore(String) method.  The big thing that I'm not sure about with this approach is how or if I would need to get around TestHarness.Initializer/CoreContainer.Initializer. "
        }
    ]
}