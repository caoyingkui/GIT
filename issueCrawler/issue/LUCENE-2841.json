{
    "id": "LUCENE-2841",
    "title": "CommonGramsFilter improvements",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "affect_versions": "3.1,                                            4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Currently CommonGramsFilter expects users to remove the common words around which output token ngrams are formed, by appending a StopFilter to the analysis pipeline.  This is inefficient in two ways: captureState() is called on (trailing) stopwords, and then the whole stream has to be re-examined by the following StopFilter.\n\nThe current ctor should be deprecated, and another ctor added with a boolean option controlling whether the common words should be output as unigrams.\n\nIf common words are configured to be output as unigrams, captureState() will still need to be called, as it is now.\n\nIf the common words are not configured to be output as unigrams, rather than calling captureState() for the trailing token in each output token ngram, the term text, position and offset can be maintained in the same way as they are now for the leading token: using a System.arrayCopy()'d term buffer and a few ints for positionIncrement and offsetd.  The user then no longer would need to append a StopFilter to the analysis chain.\n\nAn example illustrating both possibilities should also be added.",
    "attachments": {
        "commit-6402a55.patch": "https://issues.apache.org/jira/secure/attachment/12562327/commit-6402a55.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-12-31T19:36:41+0000",
            "content": "+1, this would be a great improvement.\n\nthere are two basic use cases (that I see):\n\n\tyou still aren't ever removing any stopwords, but using this solely to speed up phrase queries by forming bigrams around the common terms.\n\tyou are using commongrams+stopfilter as a \"stopfilter replacement\", which gives a more reasonable index size, the relevance benefits of stopwords, but a user can always refine the query with double quotes and the stopwords are taken into consideration, and fast.\n\n\n\nthe latter case currently requires you to also use a stopfilter, but it means we are doing needless captureState very very often (by definition, on common terms!). It also means you are specifying your stopwords list twice, and hashing two chararraysets, etc. So it would be nice to add the boolean and accelerate case #2. ",
            "author": "Robert Muir",
            "id": "comment-12976338"
        },
        {
            "date": "2010-12-31T19:45:02+0000",
            "content": "you still aren't ever removing any stopwords, but using this solely to speed up phrase queries by forming bigrams around the common terms.\n\nIsn't ShingleFilter for that case? ",
            "author": "Jason Rutherglen",
            "id": "comment-12976341"
        },
        {
            "date": "2010-12-31T20:00:50+0000",
            "content": "No, ShingleFilter forms bigrams around all terms, not just common ones. ",
            "author": "Robert Muir",
            "id": "comment-12976343"
        },
        {
            "date": "2010-12-31T20:04:39+0000",
            "content": "\nyou still aren't ever removing any stopwords, but using this solely to speed up phrase queries by forming bigrams around the common terms.\n\nIsn't ShingleFilter for that case?\n\nOn the index side: ShingleFilter generates token ngrams for all input tokens, not just those around and including common words, so although it could be used to speed up phrase queries, it would be at the expense of a much larger term dicitionary.\n\nOn the query side: ShingleFilter could be a useful replacement for CommonGramsQueryFilter if you don't have access to the list of words used by CommonGramsFilter on the index side. ",
            "author": "Steve Rowe",
            "id": "comment-12976344"
        },
        {
            "date": "2012-12-24T19:22:43+0000",
            "content": "Adding option to CommonGramsFilter to not unigram common words ",
            "author": "Itamar Syn-Hershko",
            "id": "comment-13539309"
        },
        {
            "date": "2012-12-24T19:24:03+0000",
            "content": "Attached is a patch to fix this, including tests. There is no regression, and the new behavior when keepOrig is set to true is as described in the comments here.\n\nThe only thing I wasn't sure about was CommonGramsQueryFilter - should it be deprecated? or how should it be made to work with this change? ",
            "author": "Itamar Syn-Hershko",
            "id": "comment-13539310"
        },
        {
            "date": "2013-07-23T18:44:26+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 ",
            "author": "Steve Rowe",
            "id": "comment-13716949"
        },
        {
            "date": "2014-04-16T12:54:23+0000",
            "content": "Move issue to Lucene 4.9. ",
            "author": "Uwe Schindler",
            "id": "comment-13970737"
        },
        {
            "date": "2014-06-18T17:17:31+0000",
            "content": "Can anyone review and comment? ",
            "author": "Itamar Syn-Hershko",
            "id": "comment-14035978"
        }
    ]
}