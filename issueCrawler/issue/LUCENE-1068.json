{
    "id": "LUCENE-1068",
    "title": "Invalid behavior of StandardTokenizerImpl",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/analysis"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.3"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "The following code prints the output of StandardAnalyzer:\n\n        Analyzer analyzer = new StandardAnalyzer();\n        TokenStream ts = analyzer.tokenStream(\"content\", new StringReader(\"<some text>\"));\n        Token t;\n        while ((t = ts.next()) != null) \n{\n            System.out.println(t);\n        }\n\nIf you pass \"www.abc.com\", the output is (www.abc.com,0,11,type=<HOST>) (which is correct in my opinion).\nHowever, if you pass \"www.abc.com.\" (notice the extra '.' at the end), the output is (wwwabccom,0,12,type=<ACRONYM>).\n\nI think the behavior in the second case is incorrect for several reasons:\n1. It recognizes the string incorrectly (no argue on that).\n2. It kind of prevents you from putting URLs at the end of a sentence, which is perfectly legal.\n3. An ACRONYM, at least to the best of my understanding, is of the form A.B.C. and not ABC.DEF.\n\nI looked at StandardTokenizerImpl.jflex and I think the problem comes from this definition:\n// acronyms: U.S.A., I.B.M., etc.\n// use a post-filter to remove dots\nACRONYM    =  \n{ALPHA} \".\" ({ALPHA}\n \".\")+\n\nNotice how the comment relates to acronym as U.S.A., I.B.M. and not something else. I changed the definition to\nACRONYM    =  \n{LETTER} \".\" ({LETTER}\n \".\")+\nand it solved the problem.\n\nThis was also reported here:\nhttp://www.nabble.com/Inconsistent-StandardTokenizer-behaviour-tf596059.html#a1593383\nhttp://www.nabble.com/Standard-Analyzer---Host-and-Acronym-tf3620533.html#a10109926",
    "attachments": {
        "LUCENE-1068.patch": "https://issues.apache.org/jira/secure/attachment/12371920/LUCENE-1068.patch",
        "StandardTokenizer-test-4.patch": "https://issues.apache.org/jira/secure/attachment/12371425/StandardTokenizer-test-4.patch",
        "StandardTokenizerImpl-5.patch": "https://issues.apache.org/jira/secure/attachment/12371520/StandardTokenizerImpl-5.patch",
        "StandardTokenizer-java-4.patch": "https://issues.apache.org/jira/secure/attachment/12371424/StandardTokenizer-java-4.patch",
        "StandardTokenizerImpl-2.patch": "https://issues.apache.org/jira/secure/attachment/12370540/StandardTokenizerImpl-2.patch",
        "StandardTokenizerImpl-3.patch": "https://issues.apache.org/jira/secure/attachment/12370617/StandardTokenizerImpl-3.patch",
        "standardTokenizerImpl.patch": "https://issues.apache.org/jira/secure/attachment/12370293/standardTokenizerImpl.patch",
        "standardTokenizerImpl.jflex.patch": "https://issues.apache.org/jira/secure/attachment/12370292/standardTokenizerImpl.jflex.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-11-27T11:55:55+0000",
            "content": "This fixes the JFlex definition file. The change simply replaces:\nACRONYM    =  \n{ALPHA} \".\" ({ALPHA}\n \".\")+\nwith\nACRONYM    =  \n{LETTER} \".\" ({LETTER}\n \".\")+ ",
            "author": "Shai Erera",
            "id": "comment-12545802"
        },
        {
            "date": "2007-11-27T11:56:39+0000",
            "content": "This is the result of re-compiling the JFlex fixed file. Not sure how useful this patch is, but I'm attaching it anyway. ",
            "author": "Shai Erera",
            "id": "comment-12545803"
        },
        {
            "date": "2007-11-29T13:37:03+0000",
            "content": "I've found a way to do it (I think):\nI've added a new type called ACRONYM_DEP that identifies the old ACRONYMs and fixed the current ACRONYM to identify proper ones.\nI also marked ACRONYM_DEP as deprecated.\nI added code to StandardTokenizer to set the type of a token to HOST if the type returned is ACRONYM_DEP. This behavior can be changed if you think the type should be set to ACRONYM, in case there are applications that count on the Token type.\n\nI wrote these 4 lines of code to verify it works:\n\tpublic static void main(String[] args) throws Exception \n{\n\t\tparse(\"www.abc.com.\");\n\t\tparse(\"www.abc.com\");\n\t\tparse(\"I.B.M.\");\n\t}\n\n\tpublic static void parse(String text) throws Exception {\n\t\tAnalyzer analyzer = new StandardAnalyzer();\n\t\tTokenStream ts = analyzer.tokenStream(\"content\", new StringReader(text));\n\t\tToken t;\n\t\twhile ((t = ts.next()) != null) \n{\n\t\t\tSystem.out.println(t);\n\t\t}\n\t}\nAnd the output is: \n(www.abc.com.,0,12,type=<HOST>)\n(www.abc.com,0,11,type=<HOST>)\n(ibm,0,6,type=<ACRONYM>) ",
            "author": "Shai Erera",
            "id": "comment-12546726"
        },
        {
            "date": "2007-11-30T06:53:11+0000",
            "content": "The previous patch I put was incorrect since it would still break existing applications. The current patch does:\n1. Introduces a new type ACRONYM_DEP which is deprecated and recognizes the old ACRONYM format.\n2. Fixes ACRONYM to recognize LETTER + \".\" (LETTER + \".\")+.\n3. Added a public member to StandardTokenizer and StandardAnalyzer replaceDepAcronym which can be set if the application would like the deprecated acronym format to be treated as ACRONYM or HOST. The default behavior, if not set is to recognize the old ACRONYM as HOST.\n\nThis is how it should be used:\n\tpublic static void main(String[] args) throws Exception \n{\n\t\tparse(\"www.abc.com.\", false);\n\t\tparse(\"www.abc.com.\", true);\n\t\tparse(\"www.abc.com\", true);\n\t\tparse(\"I.B.M.\", true);\n\t}\n\n\tpublic static void parse(String text, boolean replaceDepAcronym) throws Exception {\n\t\tStandardAnalyzer analyzer = new StandardAnalyzer();\n    analyzer.replaceDepAcronym = replaceDepAcronym;\n\t\tTokenStream ts = analyzer.tokenStream(\"content\", new StringReader(text));\n\t\tToken t;\n\t\twhile ((t = ts.next()) != null) \n{\n\t\t\tSystem.out.println(t);\n\t\t}\n\t}\nAnd here is the output:\n(wwwabccom,0,12,type=<ACRONYM>)\n(www.abc.com.,0,12,type=<HOST>)\n(www.abc.com,0,11,type=<HOST>)\n(ibm,0,6,type=<ACRONYM>)\n\nThe member is marked deprecated so we can remove it in the next release. Applications that would like to new behavior need to do nothing, and therefore will not be impacted once we remove that member. Applications that want the old behavior need to explicitly set it and in the next major release remove it.\n\nI think that solves it. How should I proceed? ",
            "author": "Shai Erera",
            "id": "comment-12547016"
        },
        {
            "date": "2007-12-10T21:15:24+0000",
            "content": "Hi Shai, \n\nThanks for the patch.  Can you please add unit tests in TestStandardAnalyzer?  \n\nAlso, if you run svn diff in the Lucene directory then it will generate a patch that doesn't need to be modified (your patch has references to D:/ etc.)\n ",
            "author": "Grant Ingersoll",
            "id": "comment-12550192"
        },
        {
            "date": "2007-12-10T21:27:48+0000",
            "content": "Hi Grant,\n\nI used Eclipse to generate the patch (right-click on\norg.apache.lucene.analysis.standard, select Team and Create Patch). How do I\nrun svn diff? Can I do it from inside Eclipse or should I install SVN\ncmd-line tools?\n\n\n\n\n\u2013 \nRegards,\n\nShai Erera ",
            "author": "Shai Erera",
            "id": "comment-12550196"
        },
        {
            "date": "2007-12-10T21:43:48+0000",
            "content": "Hmmm, maybe there is a way in Eclipse to make the path relative to the  \nworking directory?  Otherwise, from the command line in the Lucene  \ndirectory:  svn diff > StandardTokenizer-4.patch\n\n-Grant\n\n\n\n--------------------------\nGrant Ingersoll\nhttp://lucene.grantingersoll.com\n\nLucene Helpful Hints:\nhttp://wiki.apache.org/lucene-java/BasicsOfPerformance\nhttp://wiki.apache.org/lucene-java/LuceneFAQ\n\n\n ",
            "author": "Grant Ingersoll",
            "id": "comment-12550202"
        },
        {
            "date": "2007-12-11T13:26:36+0000",
            "content": "Code fies under java and test packages. This should be applied under \"src\" ",
            "author": "Shai Erera",
            "id": "comment-12550440"
        },
        {
            "date": "2007-12-12T12:23:45+0000",
            "content": "\nThe member is marked deprecated so we can remove it in the next release. Applications that would like to new behavior need to do nothing, and therefore will not be impacted once we remove that member. Applications that want the old behavior need to explicitly set it and in the next major release remove it.\n\nDoesn't this mean it is an API change if we make the new behavior the default? Apps that upgrade will see the new behavior unless they set they call replaceDepAcronym.\n\nTo be fully backwards compatible I think this patch should use the old behavior as default. Then in 3.0 we can make the new behavior the default. ",
            "author": "Michael Busch",
            "id": "comment-12550948"
        },
        {
            "date": "2007-12-12T14:37:39+0000",
            "content": "Changed the default behavior to match the current behavior. Applications that want to use the new definitions of HOST and ACRONYM should call StandardAnalyzer.replaceDepAcronym = true. ",
            "author": "Shai Erera",
            "id": "comment-12550982"
        },
        {
            "date": "2007-12-19T02:54:40+0000",
            "content": "Applied patch.  Updated some documentation.  Changed it to use a private boolean along with getters and setters, plus added some new constructors.  All of these should be deprecated and marked as being removed in 3.x.\n\nI will apply patch tomorrow or Friday unless I hear objections ",
            "author": "Grant Ingersoll",
            "id": "comment-12553210"
        },
        {
            "date": "2007-12-21T17:44:22+0000",
            "content": "StandardTokenizer also incorrectly marks numbers as HOST.\n\nFor example, on line 108 of TestStandardAnalyzer, the type of 21.35 is HOST when I think it should be NUM. ",
            "author": "Grant Ingersoll",
            "id": "comment-12553978"
        },
        {
            "date": "2007-12-23T07:18:26+0000",
            "content": "Even if you run testNumeric() on the trunk version, it recognizes \"21.35\" as HOST and not NUM ... The problem is that HOST is configured to recognized letters or digits. I'll check if there's a way to define precedence in JFlex, i.e., first detect NUM, then HOST (as every floating number is a HOST).\nAnother option would be to set HOST do detect series of xxx.yyy.(zzz .)+, meaning aaa.bbb won't be a HOST, but aaa.bbb.ccc will be. Do you see any problem with that? Are you aware of hosts that are of the form aa.bb? ",
            "author": "Shai Erera",
            "id": "comment-12554171"
        },
        {
            "date": "2007-12-23T07:36:02+0000",
            "content": "Maybe this is a separate issue?\nNotice that IP addresses are also recognized as HOST, however StandardTokenizerImpl.jflex documentation specifies they should be recognized as NUM.\n// floating point, serial, model numbers, ip addresses, etc.\n// every other segment must have at least one digit\nNUM        = (\n{ALPHANUM} {P} {HAS_DIGIT}\n           | {HAS_DIGIT} {P} {ALPHANUM}\n\n\n\n \n{ALPHANUM} ({P} {HAS_DIGIT} {P} {ALPHANUM}\n)+\n\n\n \n{HAS_DIGIT} ({P} {ALPHANUM} {P} {HAS_DIGIT}\n)+\n\n\n \n{ALPHANUM} {P} {HAS_DIGIT} ({P} {ALPHANUM}\n \n{P} {HAS_DIGIT})+\n           | {HAS_DIGIT} {P}\n \n{ALPHANUM} ({P} {HAS_DIGIT} {P} {ALPHANUM}\n)+)\n\n\n\n ",
            "author": "Shai Erera",
            "id": "comment-12554174"
        },
        {
            "date": "2007-12-26T12:56:39+0000",
            "content": "Let's commit this patch, and move the floating point issue to later. ",
            "author": "Grant Ingersoll",
            "id": "comment-12554416"
        },
        {
            "date": "2007-12-28T02:46:44+0000",
            "content": "Committed.  ",
            "author": "Grant Ingersoll",
            "id": "comment-12554642"
        },
        {
            "date": "2008-09-03T00:59:56+0000",
            "content": "Causes JIRA issue JRA-15484. ",
            "author": "Mark Lassau",
            "id": "comment-12627876"
        }
    ]
}