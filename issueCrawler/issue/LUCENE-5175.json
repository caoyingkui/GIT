{
    "id": "LUCENE-5175",
    "title": "Add parameter to lower-bound TF normalization for BM25 (for long documents)",
    "details": {
        "components": [
            "core/search"
        ],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "In the article \"When Documents Are Very Long, BM25 Fails!\" a fix for the problem is documented.  There was a TODO note in BM25Similarity to add this fix. I will attach a patch that implements the fix shortly.",
    "attachments": {
        "LUCENE-5175.patch": "https://issues.apache.org/jira/secure/attachment/12597752/LUCENE-5175.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-08-13T16:09:24+0000",
            "content": "Patch adds optional parameter delta to lower-bound tf normalization.  Attached also are unit tests. \n\nStill need to add tests of the explanation/scoring for cases 1) no norms, and 2) no delta\n\nIf no delta parameter is supplied, the math works out to the equivalent of the regular BM25 formula  as far as the score, but I think there is an extra step or two to get there.  I'll see if I can get some benchmarks running to see if there is any significant performance issue. ",
            "author": "Tom Burton-West",
            "id": "comment-13738411"
        },
        {
            "date": "2013-08-13T16:44:48+0000",
            "content": "I can benchmark your patch with luceneutil Tom.\nI know this thing is sensitive for some reason.\n\nReally if there is a performance issue, worst case we can just call it BM25L or something?\n\nThanks for doing this! ",
            "author": "Robert Muir",
            "id": "comment-13738474"
        },
        {
            "date": "2013-08-13T18:35:16+0000",
            "content": "Thanks Robert,\n\nIn the article, they claim that the change doesn't have a performance impact.  On the other hand, I'm not familiar enough with Java performance to be able to eyeball it,  and it looks to me like we added one or more floating point operations, so it would be good to benchmark, especially since the scoring alg gets run against every hit, and we might have millions of hits for a poorly chosen query. (And if we switch to page-level indexing we could have hundreds of millions of hits).\n\nI was actually considering making it a subclass instead of just modifying BM25Similarity, so that it would be easy to benchmark, and if it turns out that there is a significant perf difference, that users could choose which implementation to use.   I saw that computeWeight in BM25Similarity was final and decided I didn't know enough about why this is final to either refactor to create a base class, or change the method  in order to subclass.\n\nIs luceneutil the same as lucene benchmark?   I've been wanting to learn how to use lucene benchmark for some time.  \n\nTom ",
            "author": "Tom Burton-West",
            "id": "comment-13738627"
        },
        {
            "date": "2013-08-13T18:49:52+0000",
            "content": "Hi Tom:\n\nI know for a fact i tried to remove the crazy \"cache\" (I created the monster) that this thing creates, and it always hurts performance for example.\n\nBut I don't think we need to worry too much because:\n\n\tWe should benchmark it the way you have it first and just see what we are dealing with\n\tIF there is a problem, we could try to open it up to subclassing better, maybe it even improves the API\n\tThere is also the option of just having specialized SimScorers for the delta=0 case.\n\n\n\nSo I am confident we will find a good solution.\n\nAs far as luceneutil we tried creating a README (http://code.google.com/a/apache-extras.org/p/luceneutil/source/browse/README.txt) to get started.\n\nThe basic idea is you pull down 2 different checkouts of lucene-trunk and setup a \"competition\" between the two. There are two options important here: one is to set the similarity for each competitor, the other can disable score comparisons (I havent yet examined the patch to tell if they might differ slightly, e.g. order of floating point ops and stuff).\n\nBut thats typically how i benchmark two Sim impls against each other. ",
            "author": "Robert Muir",
            "id": "comment-13738664"
        },
        {
            "date": "2013-08-13T20:59:05+0000",
            "content": "I wondered about that \"crazy cache\", in that it makes the implementation dependent on the norms implementation.  \n\nBTW: It looks to me with Lucene's default norms that there are only about 130 or so \"document lengths\".  If there is no boosting going on the byte value has to get to 124 for a doclenth = 1, so there are only 255-124 =131 possible different lengths.\n\ni=124 norm=1.0,doclen=1.0 ",
            "author": "Tom Burton-West",
            "id": "comment-13738818"
        },
        {
            "date": "2013-08-13T22:01:01+0000",
            "content": "Yes, unfortunately the crazy cache currently is what makes it as fast as DefaultSimilarity, otherwise its 25% slower \n\nFrom time to time i definitely upgrade my JVM and run luceneutil to see if these caches can be removed!\n\nAs far as the norms, all the \"provided\" implementations were just setup to be compatible with DefaultSimilarity.\nso you can test these things out without reindexing, and still have general support for index-time boosts and things like that.\n\nIf you don't care aout that, you can tweak the similarity to better meet your specific needs (and even choose the other direction, too: to compress them to use < 1 byte/doc: LUCENE-5077)\n ",
            "author": "Robert Muir",
            "id": "comment-13738894"
        },
        {
            "date": "2013-08-15T22:25:12+0000",
            "content": "Hi Robert,\n\nI tried running luceneutils with the default wikimedium10m collection and tasks.   I ran it first on the DefaultSimilarity, which shouldn't be affected by the patch to BM25Similarity and it showed about -2.3% difference.  I'm guessing there is some inaccuracy in the tests.   When I changed DEFAULT_SIMILARITY to BM25Similarity, the worst change was a difference of -8.8%.  \n\nIs there a separate mailing list for questions about luceneutils or should I write to the java-dev list? or directly to Mike or you?\n\nTom ",
            "author": "Tom Burton-West",
            "id": "comment-13741582"
        },
        {
            "date": "2013-08-15T22:31:23+0000",
            "content": "Tom: there is some variation on the test.\n\nin my localconstants.py i have the following which I found reduces variation significantly:\n\nJAVA_COMMAND = 'java -Xms4g -Xmx4g -server'\nSEARCH_NUM_THREADS = 1\n\n\n\nAs far as questions, just send them to the dev@lucene list i think? a lot of committers use this thing so its probably your best bet. ",
            "author": "Robert Muir",
            "id": "comment-13741595"
        }
    ]
}