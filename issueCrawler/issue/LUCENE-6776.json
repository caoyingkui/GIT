{
    "id": "LUCENE-6776",
    "title": "Randomized planet model shows up additional XYZBounds errors",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/spatial"
        ],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "Adding randomized PlanetModel construction causes points to be generated inside a shape that are outside XYZBounds.  Michael McCandless please take note.",
    "attachments": {
        "LUCENE-6776.patch": "https://issues.apache.org/jira/secure/attachment/12753928/LUCENE-6776.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14728560",
            "author": "Karl Wright",
            "date": "2015-09-03T06:19:55+0000",
            "content": "This patch demonstrates the failure pretty much immediately, with:\n\n\nant test  -Dtestcase=TestGeo3DPointField -Dtests.method=testGeo3DRelations -Dtests.seed=5B916E77D4C84BE5 -Dtests.slow=true -Dtests.locale=sv -Dtests.timezone=Pacific/Norfolk -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n\n\n "
        },
        {
            "id": "comment-14728565",
            "author": "Karl Wright",
            "date": "2015-09-03T06:26:33+0000",
            "content": "The failure is, once again, a single point that is outside the XYZBounds computed for the shape.  Stay tuned for further analysis, probably later this morning.  Either there's a mathematical error, or the calculation itself is too problematic in its current form due to error bars. "
        },
        {
            "id": "comment-14728798",
            "author": "Karl Wright",
            "date": "2015-09-03T10:03:24+0000",
            "content": "The analysis: The Z bound is unaffected.  The X and Y bounds, however, are being computed improperly due to a wrong assumption I made when deriving the method for computing them. They work for spheres accurately, and they work with increasing inaccuracy for increasingly non-spherical ellipsoids.\n\nThe only fix is to derive an accurate formula for the min/max in X and in Y.  I believe this is doable, but I'll have to actually do it before I'm sure.  Due to other time constraints, this is not likely to be ready for at least a day.\n\nMeanwhile, the value of FUDGE_FACTOR chosen is adequate for WGS84, but will not stand up to any planet model that is more oblate than that.  When a true fix is in place, FUDGE_FACTOR may be reducible to a very small value. "
        },
        {
            "id": "comment-14728840",
            "author": "Michael McCandless",
            "date": "2015-09-03T10:39:00+0000",
            "content": "Oh it sounds like good news that this means we can drop FUDGE_FACTOR back down!  Thanks for digging Karl Wright. "
        },
        {
            "id": "comment-14729991",
            "author": "Karl Wright",
            "date": "2015-09-03T23:02:40+0000",
            "content": "Ok, here's the math.  This is for the bounds in x.  I had to go with the full treatment using lagrange multipliers.  Haven't yet debugged it either, but clearly it's doable; you get a quadratic in a parameterization variable, which can then be applied to produce a pair of (x,y,z) values:\n\n\nAnother approach: Lagrange multipliers\n\nFor this, we need grad(F(x,y,z)) = (dF/dx, dF/dy, dF/dz).\n\nMinimize and maximize f(x,y,z) = x, with respect to g(x,y,z) = Ax + By + Cz - D and h(x,y,z) = x^2/ab^2 + y^2/ab^2 + z^2/c^2 - 1\n\ngrad(f(x,y,z)) = (1,0,0)\ngrad(g(x,y,z)) = (A,B,C)\ngrad(h(x,y,z)) = (2x/ab^2,2y/ab^2,2z/c^2)\n\nEquations we need to simultaneously solve:\n\ngrad(f(x,y,z)) = l * grad(g(x,y,z)) + m * grad(h(x,y,z))\ng(x,y,z) = 0\nh(x,y,z) = 0\n\nEquations:\n1 = l*A + m*2x/ab^2\n0 = l*B + m*2y/ab^2\n0 = l*C + m*2z/c^2\nAx + By + Cz + D = 0\nx^2/ab^2 + y^2/ab^2 + z^2/c^2 - 1 = 0\n\nSolve for x in terms of (l, m):\n\nx = ((1 - l*A) * ab^2 ) / (2 * m)\ny = (-l*B * ab^2) / ( 2 * m)\nz = (-l*C * c^2)/ (2 * m)\n\nTwo equations, two unknowns:\n\nA * (((1 - l*A) * ab^2 ) / (2 * m)) + B * ((-l*B * ab^2) / ( 2 * m)) + C * ((-l*C * c^2)/ (2 * m)) + D = 0\n\nand\n\n(((1 - l*A) * ab^2 ) / (2 * m))^2/ab^2 + ((-l*B * ab^2) / ( 2 * m))^2/ab^2 + ((-l*C * c^2)/ (2 * m))^2/c^2 - 1 = 0\n\nSimple: solve for l and m, then find x from it.\n\n(a) Use first equation to find l in terms of m.\n\nA * (((1 - l*A) * ab^2 ) / (2 * m)) + B * ((-l*B * ab^2) / ( 2 * m)) + C * ((-l*C * c^2)/ (2 * m)) + D = 0\nA * ((1 - l*A) * ab^2 ) + B * (-l*B * ab^2) + C * (-l*C * c^2) + D * 2 * m = 0\nA * ab^2 - l*A^2* ab^2 - B^2 * l * ab^2 - C^2 * l * c^2 + D * 2 * m = 0\n- l *(A^2* ab^2 + B^2 * ab^2 + C^2 * c^2) + (A * ab^2 + D * 2 * m) = 0\nl = (A * ab^2 + D * 2 * m) / (A^2* ab^2 + B^2 * ab^2 + C^2 * c^2)\nl = m * 2 * (A * ab^2 + D) / (A^2* ab^2 + B^2 * ab^2 + C^2 * c^2)\n\nFor convenience:\n\nk = (A^2* ab^2 + B^2 * ab^2 + C^2 * c^2) / (2 * (A * ab^2 + D))\n\nThen:\n\nm = l * k\n\n\n(b) Simplify the second equation before substitution\n\n(((1 - l*A) * ab^2 ) / (2 * m))^2/ab^2 + ((-l*B * ab^2) / ( 2 * m))^2/ab^2 + ((-l*C * c^2)/ (2 * m))^2/c^2 - 1 = 0\n((1 - l*A) * ab^2 )^2/ab^2 + (-l*B * ab^2)^2/ab^2 + (-l*C * c^2)^2/c^2 = 4 * m^2\n(1 - l*A)^2 * ab^2 + (-l*B)^2 * ab^2 + (-l*C)^2 * c^2 = 4 * m^2\n(1 - 2*l*A + l^2*A^2) * ab^2 + l^2*B^2 * ab^2 + l^2*C^2 * c^2 = 4 * m^2\nab^2 - 2*l*A*ab^2 + l^2*A^2*ab^2 + l^2*B^2*ab^2 + l^2*C^2*c^2 = 4 * l^2 * k^2\n\nl^2 * (A^2*ab^2 + B^2*ab^2 + C^2*c^2 - 4 * k^2) - l * (2*A*ab^2) + ab^2 = 0\n\n\n\n\nThere will be similar code for the y min and max.\n\nStay tuned for debugging and eventually a patch. "
        },
        {
            "id": "comment-14730650",
            "author": "Karl Wright",
            "date": "2015-09-04T10:59:20+0000",
            "content": "After fixing one problem with the above math, I got the x bounds working well.  Then I implemented y bounds, but unfortunately that code fails an assertion.  X and Y are perfectly symmetric with one another so I was able to verify the math exactly, so the problem must be implementation related.  Still digging... "
        },
        {
            "id": "comment-14730732",
            "author": "Karl Wright",
            "date": "2015-09-04T12:43:30+0000",
            "content": "Michael McCandless This patch calculates x and y bounds using lagrange multipliers.  It seems to generally work, but it failed a beasting run.  Unfortunately, the failure did not reproduce, so not quite sure what happened there.  Am trying to get a reproducible failure. "
        },
        {
            "id": "comment-14730747",
            "author": "Karl Wright",
            "date": "2015-09-04T12:56:12+0000",
            "content": "Michael McCandless: It appears that GeoPath's occasionally have some trouble when the planet model gets more extreme than WGS84.  It will take some research to get to the bottom of that. Unfortunately I can't reproduce any of the failures that beasting finds!!  If there's any way to fix this I'd greatly appreciate it... "
        },
        {
            "id": "comment-14730909",
            "author": "Michael McCandless",
            "date": "2015-09-04T14:54:28+0000",
            "content": "Unfortunately I can't reproduce any of the failures that beasting finds!! If there's any way to fix this I'd greatly appreciate it...\n\nHmm that's very bad.\n\nMaybe try dropping numThreads to 1 (and put a nocommit comment) and find a failing seed and then see if that fixes the \"unable to repro\"?\n\nWhat exact command line are you using for beasting?  Maybe there is a bug in the \"Reproduce with: XXX\" logic. "
        },
        {
            "id": "comment-14730937",
            "author": "Karl Wright",
            "date": "2015-09-04T15:15:44+0000",
            "content": "This is what I've been doing:\n\n\nant beast -Dbeast.iters=100 -Dtestcase=TestGeo3DPointField -Dtestmethod=testGeo3DRelations -Dtests.dups=6 -Dtests.iters=10 >capture 2>capture2\n\n "
        },
        {
            "id": "comment-14730949",
            "author": "Karl Wright",
            "date": "2015-09-04T15:22:40+0000",
            "content": "Tried dropping numThreads in verify() to 1.  Didn't help with reproducibility, unfortunately. "
        },
        {
            "id": "comment-14730983",
            "author": "Karl Wright",
            "date": "2015-09-04T15:57:00+0000",
            "content": "These turn out to be another series of \"the point should be a hit but isn't\" failures.\n\nI tried to reproduce it with the information I could print at the time of the actual failure, and checked whether the XYZBound that was computed was correct.  It was.  So I really do need repeatability here to make any progress. "
        },
        {
            "id": "comment-14731036",
            "author": "Michael McCandless",
            "date": "2015-09-04T16:35:39+0000",
            "content": "So I really do need repeatability here to make any progress.\n\nArgh, we are simply hitting this long ago known issue: LUCENE-6194.\n\nThe workaround (I think?) is to simply add back the -Dtests.iters=10 that you had originally specified to ant beast, but you also must add a wildcard * at the end of the -Dtests.name=XXX.  E.g. I just hit a failure with your ant beast line, confirmed the Reproduce with line is buggy (does not in fact reproduce) but then added back the iters and the * and it does reproduce:\n\n\nant test  -Dtestcase=TestGeo3DPointField -Dtests.method=testGeo3DRelations* -Dtests.seed=B8B6B22C45AFEE9F -Dtests.locale=ms_MY -Dtests.timezone=America/Moncton -Dtests.asserts=true -Dtests.file.encoding=US-ASCII -Dtests.iters=10\n\n\n\ncauses:\n\n\n   [junit4] FAILURE 0.33s | TestGeo3DPointField.testGeo3DRelations {#7 seed=[B8B6B22C45AFEE9F:7CCEE6732E8A91DE]} <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: invalid hits for shape=GeoPath: {planetmodel=PlanetModel(ab=1.151145876105594 c=0.8488541238944061), width=0.008726646259971648(0.5), points={[[lat=-0.6925658899376476, lon=0.6316613927914589], [lat=0.27828548161836364, lon=0.6785795524104564]]}}\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([B8B6B22C45AFEE9F:7CCEE6732E8A91DE]:0)\n   [junit4]    > \tat org.apache.lucene.bkdtree3d.TestGeo3DPointField.testGeo3DRelations(TestGeo3DPointField.java:708)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4] OK      1.64s | TestGeo3DPointField.testGeo3DRelations {#8 seed=[B8B6B22C45AFEE9F:4E62031D59418684]}\n   [junit4] OK      0.98s | TestGeo3DPointField.testGeo3DRelations {#9 seed=[B8B6B22C45AFEE9F:99E955A73D16B1D6]}\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene53): {}, docValues:{}, sim=RandomSimilarityProvider(queryNorm=true,coord=crazy): {}, locale=ms_MY, timezone=America/Moncton\n   [junit4]   2> NOTE: Linux 3.13.0-61-generic amd64/Oracle Corporation 1.8.0_40 (64-bit)/cpus=8,threads=1,free=455977424,total=471859200\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeo3DPointField]\n   [junit4] Completed [1/1] in 7.14s, 10 tests, 1 failure <<< FAILURES!\n\n "
        },
        {
            "id": "comment-14731078",
            "author": "Karl Wright",
            "date": "2015-09-04T17:15:10+0000",
            "content": "Thanks-- was able to construct a simple test case that demonstrated the problem.  Now, back to debugging... "
        },
        {
            "id": "comment-14731530",
            "author": "Karl Wright",
            "date": "2015-09-04T22:18:09+0000",
            "content": "Patch with fix for GeoPath as well.  Now it beasts for a good long time without problems.  Final acceptance will, of course, require Michael McCandless's light-dimming Big Beaster to wale at it for a day, but...  "
        },
        {
            "id": "comment-14731900",
            "author": "Michael McCandless",
            "date": "2015-09-05T09:30:26+0000",
            "content": "Thanks Karl Wright, I'll start beasting! "
        },
        {
            "id": "comment-14731902",
            "author": "Michael McCandless",
            "date": "2015-09-05T09:36:17+0000",
            "content": "I see the FUDGE_FACTOR became small again, but I don't see that we are randomizing the PlanetModel in TestGeo3DPointField in the latest patch (it was in the first patch).\n\nShould I fold that in from the first patch, for beasting? "
        },
        {
            "id": "comment-14731918",
            "author": "Michael McCandless",
            "date": "2015-09-05T09:51:50+0000",
            "content": "OK I just started from the last patch, and factored out a randomized getPlanetModel... "
        },
        {
            "id": "comment-14731922",
            "author": "Karl Wright",
            "date": "2015-09-05T10:25:28+0000",
            "content": "Sorry!  I meant to include the random planet model...\n\nFWIW, there's nothing special about SPHERE or WGS84.  They're just predefined models with specific parameters.  "
        },
        {
            "id": "comment-14732304",
            "author": "Michael McCandless",
            "date": "2015-09-06T08:41:44+0000",
            "content": "FWIW, there's nothing special about SPHERE or WGS84. They're just predefined models with specific parameters.\n\nThanks, that makes sense ... I just wanted to bias the randomness to pick those two specific models more often since users will actually use those ones (presumably) most frequently ... "
        },
        {
            "id": "comment-14732306",
            "author": "Michael McCandless",
            "date": "2015-09-06T08:44:48+0000",
            "content": "New patch, just fixing a verbosity issue in the test, and after beasting for quite a while with this patch I hit this failure:\n\n\n   [junit4] Suite: org.apache.lucene.bkdtree3d.TestGeo3DPointField\n   [junit4]   1> doc=4870 did not match but should\n   [junit4]   1>   point=[lat=-0.00591253844632244, lon=-0.0020069187259065093]\n   [junit4]   1>   quantized=[X=1.001099185736782, Y=-0.0020091272069679327, Z=-0.005919118245803968]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeo3DPointField -Dtests.method=testGeo3DRelations -Dtests.seed=3B8A70E29A964D\\\n99 -Dtests.multiplier=5 -Dtests.slow=true -Dtests.locale=ar_JO -Dtests.timezone=CST -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] FAILURE 1.67s | TestGeo3DPointField.testGeo3DRelations <<<\n   [junit4]    > Throwable #1: java.lang.AssertionError: invalid hits for shape=GeoCircle: {planetmodel=PlanetModel.WGS84, center=[lat=-0.005\\\n931145568901605, lon=-0.001942031539653079], radius=1.2991918568260272E-4(0.007443821017389608)}\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([3B8A70E29A964D99:8BF50D7615DBE305]:0)\n   [junit4]    >        at org.apache.lucene.bkdtree3d.TestGeo3DPointField.testGeo3DRelations(TestGeo3DPointField.java:708)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=CheapBastard, sim=RandomSimilarityProvider(queryNorm=true,coord=no): {}, locale=ar_JO, timezone\\\n=CST\n   [junit4]   2> NOTE: Linux 3.19.0-21-generic amd64/Oracle Corporation 1.8.0_51 (64-bit)/cpus=72,threads=1,free=404816768,total=514850816\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeo3DPointField]\n   [junit4] Completed [1/1] in 2.00s, 1 test, 1 failure <<< FAILURES!\n\n "
        },
        {
            "id": "comment-14732341",
            "author": "Karl Wright",
            "date": "2015-09-06T10:37:10+0000",
            "content": "Fix for beasting failure.\n\nDoubled MINIMUM_RESOLUTION back to its original value of 1e-12.  Also disabled a test case I had inadvertantly included in the previous patch. \nMichael McCandless "
        },
        {
            "id": "comment-14734031",
            "author": "Michael McCandless",
            "date": "2015-09-07T20:24:28+0000",
            "content": "Thanks Karl Wright, this patch lasted for 6 hours of heavy (36 JVMs) beasting, then hit this:\n\n\n[junit4:pickseed] Seed property 'tests.seed' already defined: C51A81D82CBA7AC0\n   [junit4] <JUnit4> says hello! Master seed: C51A81D82CBA7AC0\n   [junit4] Executing 1 suite with 1 JVM.\n   [junit4] \n   [junit4] Started J0 PID(23324@localhost).\n   [junit4] Suite: org.apache.lucene.bkdtree3d.TestGeo3DPointField\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestGeo3DPointField -Dtests.method=testGeo3DRelations -Dtests.seed=C51A81D82CBA7AC0 -Dtests.multiplier=5 -Dtests.slow=true -Dtests.linedocsfile=/lucenedata/hudson.enwiki.random.lines.txt.fixed -Dtests.locale=ar_OM -Dtests.timezone=Pacific/Midway -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n   [junit4] ERROR   1.17s | TestGeo3DPointField.testGeo3DRelations <<<\n   [junit4]    > Throwable #1: java.lang.NullPointerException\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([C51A81D82CBA7AC0:7565FC4CA3F7D45C]:0)\n   [junit4]    > \tat org.apache.lucene.geo3d.GeoCompositeMembershipShape.isWithin(GeoCompositeMembershipShape.java:47)\n   [junit4]    > \tat org.apache.lucene.geo3d.BaseXYZSolid.isAreaInsideShape(BaseXYZSolid.java:131)\n   [junit4]    > \tat org.apache.lucene.geo3d.XYZSolid.getRelationship(XYZSolid.java:312)\n   [junit4]    > \tat org.apache.lucene.bkdtree3d.TestGeo3DPointField.testGeo3DRelations(TestGeo3DPointField.java:546)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene53): {}, docValues:{}, sim=RandomSimilarityProvider(queryNorm=false,coord=no): {}, locale=ar_OM, timezone=Pacific/Midway\n   [junit4]   2> NOTE: Linux 3.19.0-21-generic amd64/Oracle Corporation 1.8.0_51 (64-bit)/cpus=72,threads=1,free=413503048,total=514850816\n   [junit4]   2> NOTE: All tests run in this JVM: [TestGeo3DPointField]\n   [junit4] Completed [1/1] in 1.48s, 1 test, 1 error <<< FAILURES!\n\n "
        },
        {
            "id": "comment-14734033",
            "author": "Karl Wright",
            "date": "2015-09-07T20:51:43+0000",
            "content": "This is unrelated to the fixes done.\nBasically, some shape somewhere is computing an edge point and finding that it can't do it, but trying to use it anyway.  Looks like it's a polygon.  It should throw IllegalArgumentException in that case, but doesn't.  I will code a fix and attach the whole patch to the ticket. "
        },
        {
            "id": "comment-14734040",
            "author": "Karl Wright",
            "date": "2015-09-07T21:15:11+0000",
            "content": "Patch that fixes latest beasting failure. "
        },
        {
            "id": "comment-14734077",
            "author": "Karl Wright",
            "date": "2015-09-07T23:59:19+0000",
            "content": "Found three other places in the XYZSolid family of shapes where the same problems occur. "
        },
        {
            "id": "comment-14734998",
            "author": "Michael McCandless",
            "date": "2015-09-08T15:34:04+0000",
            "content": "I've been beasting this last patch for ~6 hours ... no failures!  I think it's a keeper ... I'll commit soon. "
        },
        {
            "id": "comment-14735089",
            "author": "ASF subversion and git services",
            "date": "2015-09-08T16:25:31+0000",
            "content": "Commit 1701835 from Michael McCandless in branch 'dev/trunk'\n[ https://svn.apache.org/r1701835 ]\n\nLUCENE-6776: Fix geo3d math to handle randomly squashed planets "
        },
        {
            "id": "comment-14735094",
            "author": "ASF subversion and git services",
            "date": "2015-09-08T16:29:24+0000",
            "content": "Commit 1701837 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1701837 ]\n\nLUCENE-6776: Fix geo3d math to handle randomly squashed planets "
        },
        {
            "id": "comment-14735125",
            "author": "Michael McCandless",
            "date": "2015-09-08T16:42:47+0000",
            "content": "Thanks Karl Wright! "
        }
    ]
}