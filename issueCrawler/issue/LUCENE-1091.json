{
    "id": "LUCENE-1091",
    "title": "Big IndexWriter memory leak: when Field.Index.TOKENIZED",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "This little program eats incrementally 2MB of virtual RAM per each 1000 documents indexed, only when Field.Index.TOKENIZED used :\n\npublic Document getDoc() {\n   Document document = new Document();\n   document.add(new Field(\"foo\", \"foo bar\", Field.Store.NO, Field.Index.TOKENIZED));\n   return document;\n}\n\npublic Document run() {\n   IndexWriter writer = new IndexWriter(new File(jIndexFileName), new StandardAnalyzer(), true);\t\t\t\t\t\n   for (int i = 0; i < 1000000; i++) \n{\n      writer.addDocument(getDoc());\n   }\n}",
    "attachments": {
        "LuceneOOM.PNG": "https://issues.apache.org/jira/secure/attachment/12371864/LuceneOOM.PNG",
        "TestOOM.java": "https://issues.apache.org/jira/secure/attachment/12371844/TestOOM.java",
        "screenshot-1.jpg": "https://issues.apache.org/jira/secure/attachment/12371865/screenshot-1.jpg",
        "lucene.txt": "https://issues.apache.org/jira/secure/attachment/12371854/lucene.txt"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2007-12-18T06:03:59+0000",
            "content": "I was not able to recreate this.\n\nCan you run the attached TestOOM, and see how much memory is consumed and what used-memory stats gets printed? ",
            "author": "Doron Cohen",
            "id": "comment-12552634"
        },
        {
            "date": "2007-12-18T06:08:24+0000",
            "content": "Attached TestOMM, not reproducing the problem on XP, JRE 1.5 ",
            "author": "Doron Cohen",
            "id": "comment-12552635"
        },
        {
            "date": "2007-12-18T11:08:53+0000",
            "content": "I tested Windows XP / JDK 6, but problem is same like in Linux. When program starts java.exe takes 30MB of Virtual RAM, after 500000 iterations it uses 500MB of virtual RAM and some 450MB of physical RAM (so I killed it, results are attached (lucene.txt). Maybe problem is Java 6 related? Can someone check? ",
            "author": "Mirza Hadzic",
            "id": "comment-12552704"
        },
        {
            "date": "2007-12-18T11:20:27+0000",
            "content": "Hi Mirza, The log you attached indicates that Java's total memory consumption never reaches 5.6 MB. You can see this by the last line printed:\n\n\tafter adding 465000 docs, mem:: tot:5.5296 , free:2.33572 , used:3.19388\n\n\n\nSo it seems you are getting the information on how much memory is consumed from elsewhere? ",
            "author": "Doron Cohen",
            "id": "comment-12552707"
        },
        {
            "date": "2007-12-18T12:17:09+0000",
            "content": "yes, I am getting info from process viewer/task manager on both Linux and Windows, it is memory used obviously by JVM that runs IndexWriter, so maybe Java 6 has leak? I also found this, maybe related problem, please look: http://www.mail-archive.com/java-user@lucene.apache.org/msg14459.html ",
            "author": "Mirza Hadzic",
            "id": "comment-12552725"
        },
        {
            "date": "2007-12-18T13:01:26+0000",
            "content": "What are your settings for heap size?  Are you actually getting an OutOfMemory exception?  Is it possible that garbage collection isn't being called b/c it doesn't need to?  I would suggest hooking up to a profiler. ",
            "author": "Grant Ingersoll",
            "id": "comment-12552744"
        },
        {
            "date": "2007-12-18T14:15:17+0000",
            "content": "I am inclined to think this is JVM 6 issue. When running TestOOM with JVM parameters -Xms200m -Xmx200m , it easily increases virtual memory usage past 500MB ! Obviously, JVM have no idea how much memory it actually uses, and log from TestOOM suggest this is the case. Running System.gc() every 100 added documents changes nothing, just like I expected. \n\nAttached is screenshot of my task list on XP sorted by VM usage when running TestOOM. Second java.exe is Netbeans (CPU: 0%), ignore that. TestOOM is java.exe using 48-50% all the time (I have dual-core, so it uses one full CPU, which is true/OK). ",
            "author": "Mirza Hadzic",
            "id": "comment-12552764"
        },
        {
            "date": "2007-12-18T14:43:47+0000",
            "content": "My understanding of virtual memory is this is just the OS being smart about making sure any given process will have the memory it needs when it needs it, plus it will be able to swap it out when needed.  http://tweakhound.com/xp/virtualmemory.htm and http://forums.cnet.com/5208-6142_102-0.html?forumID=7&threadID=42641&messageID=499859 might be of some help.\n\nI don't know if you are actually seeing any problem.  On OS X, I routinely see IntelliJ and other applications with a large gap between the physical memory and the virtual memory.  For instance, right now IntelliJ physical mem is ~450MB while the virtual mem is ~1GB.  Even w/ that, IntelliJ itself is reporting that memory available for garbage collection (in the lower right corner) is around 200M.  Try Googling for XP Process Manager virtual memory or something like that to read more on it.\n\nGranted, I am no expert in how operating systems implement this, but it doesn't seem to me like there actually is a problem.  I would worry more about what the JDK is returning based on Doron's test, which seems to be reasonable. ",
            "author": "Grant Ingersoll",
            "id": "comment-12552772"
        },
        {
            "date": "2007-12-18T15:17:53+0000",
            "content": "I found the reason: Only when running in debug mode (NetBeans) JVM takes vast amount of virtual memory . In \"normal mode\" everything works as expected. Seems something is wrong with debug mode of JVM, but thats nothing to do with Lucene.I will report to NetBeans. ",
            "author": "Mirza Hadzic",
            "id": "comment-12552784"
        },
        {
            "date": "2007-12-18T15:20:40+0000",
            "content": "I tried on XP with Java 1.6:\n\n\n  > java -version\n  java version \"1.6.0_02\"\n  Java(TM) SE Runtime Environment (build 1.6.0_02-b06)\n  Java HotSpot(TM) Client VM (build 1.6.0_02-b06, mixed mode)\n\n\n\n\n\nThe above screenshot is what happens at the end of adding 9,000,000 docs. The mem usage reported by Java matches that of the task manager (for java should look at total-memory), and is never greater than 36MB. \n\nI wonder whether you can reproduce this behavior with another, synthetic - non Lucene - simple program, which say, creates some text in string buffers and open random access files, writes in them, and occasionally close the files and open new ones? \n\nAlso (repeating Grant's question)  did you get an out-of-mem error? ",
            "author": "Doron Cohen",
            "id": "comment-12552786"
        },
        {
            "date": "2007-12-18T15:20:46+0000",
            "content": "This is bug of (probably) JVM running  in debug mode, Lucene only expose it. ",
            "author": "Mirza Hadzic",
            "id": "comment-12552787"
        },
        {
            "date": "2007-12-18T15:30:09+0000",
            "content": "Reopening just to close with \"Invalid\" - \"Won't fix\" suggests a known issue that we are not going to fix, I think that \"Invalid\" is more adequate here. ",
            "author": "Doron Cohen",
            "id": "comment-12552792"
        },
        {
            "date": "2007-12-18T15:31:10+0000",
            "content": "Not a Lucene bug... ",
            "author": "Doron Cohen",
            "id": "comment-12552794"
        }
    ]
}