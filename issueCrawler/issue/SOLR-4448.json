{
    "id": "SOLR-4448",
    "title": "Allow the solr internal load balancer to be more easily pluggable.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Widen some access level modifiers to allow the load balancer to be extended and plugged into an HttpShardHandler instance using an extended HttpShardHandlerFactory.",
    "attachments": {
        "SOLR-4448.patch": "https://issues.apache.org/jira/secure/attachment/12569231/SOLR-4448.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "philip hoy",
            "id": "comment-13576784",
            "date": "2013-02-12T17:06:32+0000",
            "content": "Added a git generated patch. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13577950",
            "date": "2013-02-13T21:34:10+0000",
            "content": "how is the additional filter you can supply to the solr jetty runner related? "
        },
        {
            "author": "philip hoy",
            "id": "comment-13577986",
            "date": "2013-02-13T22:22:53+0000",
            "content": "My apologies, the jetty runner edit should have been part of the linked jira and was added so that i could simulate slow responses in tests. Attached is the amended patch removing that edit. "
        },
        {
            "author": "philip hoy",
            "id": "comment-13643002",
            "date": "2013-04-26T16:34:19+0000",
            "content": "I don't know if anyone has had a chance to take a look at this patch. It will make it easier to plug in load balancers with different characteristics. "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13649044",
            "date": "2013-05-04T08:09:04+0000",
            "content": "This looks like it at least makes the load balancer pluggable if you are already plugging in your own shard handler factory.  I think making it pluggable outside of that context is better for the future, but should be a separate jira.\n\nOne thing I don't currently like (even before your patch) is the fact that the load balancer lives in solrj.  It is just an odd place, since this is a core part of how distributed search works.\n\nI think a better design, even if the existing default implementation stays in solrj, is to have an abstract class in solr core, which is all shard handler factory should know about.  This should be really simple (one or two methods for configuration and sending requests).  Then the LB in solrj can extend from it, and other load balancer implementations don't need to extend from a class in solrj.\n\nRegardless of those comments:\n+1 to the patch as is. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13649131",
            "date": "2013-05-04T18:20:28+0000",
            "content": "One thing I don't currently like (even before your patch) is the fact that the load balancer lives in solrj. It is just an odd place, since this is a core part of how distributed search works.\n\nThere are a number of core pieces of Solr functionality that live in solrj.  It's the only way that the solrj client can be kept relatively small.\n\nOne particularly relevant example of core Solr functionality that is found in solrj is NamedList.  As an experiment, I went into my IDE and added a character to the class name in NamedList.java from trunk, then saved the change.  Most of the org.apache.solr packages suddenly had an error marker.\n\nThe client code requires access to the load balancing capability, so if you move load balancing to the Solr core, solrj will have a new and very large dependency. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13649181",
            "date": "2013-05-04T21:41:26+0000",
            "content": "Further thoughts about the solrj location:\n\nThe load balancing capability is inherently a client feature.  When Solr uses it, it is acting as a client.  There's no reason for SolrJ and the Solr core to have different implementations, and there is strong precedence for putting common Solr/SolrJ features into SolrJ.  LBHttpSolrServer has been around since Solr 1.4, but prior to 4.0, nothing in Solr depended on it. "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13649265",
            "date": "2013-05-05T04:24:58+0000",
            "content": "\nThe load balancing capability is inherently a client feature.\n\nLoad balancing is used by distributed search.  It happens to also be used for uploading documents, which is a client feature.  Clients shouldn't be using this for sending distributed search requests.  Solr does that.\n\n\nThere's no reason for SolrJ and the Solr core to have different implementations, and there is strong precedence for putting common Solr/SolrJ features into SolrJ.\n\nI don't know much about SolrJ.  What I really care about is not having to inherit from the default implementation, but instead having an abstraction.\n\nThat said, I still think this patch is fine as is.\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13649378",
            "date": "2013-05-05T17:39:37+0000",
            "content": "Ryan Ernst first let me say that I am having this discussion because what you're saying goes against my limited understanding, and by stating what I think and listening to your response, I might learn something.  You probably already know the things that I am saying.  I might even find that I misunderstood what you were saying and that I agree with you.\n\nLoad balancing is used by distributed search. It happens to also be used for uploading documents, which is a client feature. Clients shouldn't be using this for sending distributed search requests. Solr does that.\n\nI've just done a non-detailed review of CloudSolrServer.  It uses a new LBHttpSolrServer object with a customized URL list for every request.  Queries get sent to all replicas, updates only get sent to leaders.  A TODO says that currently there is no support in the object for sending updates to the correct leader based on a hashing algorithm.\n\nOutside of SolrCloud, the LB object makes sense for clients in master-slave replication environments, but only on the query side.  Updates have to be directed to the master only.  A separate load balancer does give you more flexibility, but not everyone wants to invest the time (or possibly money) required.\n\nIf the client on the server side and the client on the client side need identical functionality, then the existing situation makes sense \u2013 one implementation in the org.apache.solr.client.solrj namespace.  If we think they'll ever diverge, even a little bit, then having an abstract class in the org.apache.solr.common namespace makes sense, although it should still be in the solrj source tree. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13649384",
            "date": "2013-05-05T18:05:22+0000",
            "content": "My review of CloudSolrServer obviously wasn't deep enough.  I thought it was making a new LB object for every request, which seemed very inefficient.  Turns out it was making a new LBHttpSolrServer.Req object.  The Req class includes a URL list. "
        },
        {
            "author": "Ryan Ernst",
            "id": "comment-13649407",
            "date": "2013-05-05T19:56:14+0000",
            "content": "My apologies.  I do not use SolrJ and was making some bad assumptions.  I see now that a client would use this to round-robin between all the hosts in a cluster for a top level requests, and then solr would also use a different LB (running in solr instead of the client) for distributing requests to slices.\n\nAs I've said here, I'm fine with this staying in SolrJ.  I only hope (in the future, not asking for it here) to see a better abstraction for the load balancer. "
        },
        {
            "author": "philip hoy",
            "id": "comment-13657094",
            "date": "2013-05-14T14:40:49+0000",
            "content": "I think a problem with the current LBHttpSolrServer is that it has too many responsibilities. It should perhaps be broken into two classes one in solrj to be used by clients which is designed to balance across a known set of solr servers defined at construction time and one in solr proper that deals with the distributed requests which are dependant on the query itself. Looking at the code very little is actually shared between these two use cases so the need for a base implementation and concerns about the appropriate location are not so much of an issue. If so desired the zombie server handling, the only shared code, could be pulled into an base class or another class entirely. "
        },
        {
            "author": "philip hoy",
            "id": "comment-13657106",
            "date": "2013-05-14T14:57:27+0000",
            "content": "How do I best progress this patch, I am happy to make any changes deemed necessary. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13657136",
            "date": "2013-05-14T15:35:31+0000",
            "content": "The discussion here got a little off-topic from the current patch.\n\nPhilip's patch just exposes a few things as protected and so on: does anyone have any technical objections to it?\n\nIf not, I'll move forward with it Philip. it would be good to maybe make followup JIRA issues for additional refactoring/discussion. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13657149",
            "date": "2013-05-14T15:54:15+0000",
            "content": "+1 - I see some good ideas for a further issue, but let's commit this patch and spin off a new issue. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13657580",
            "date": "2013-05-14T22:07:43+0000",
            "content": "I committed this: Thanks Philip!\n\nPlease feel free to open issues for some of the additional refactoring ideas here! "
        },
        {
            "author": "philip hoy",
            "id": "comment-13659610",
            "date": "2013-05-16T15:03:53+0000",
            "content": "I have added a jira to cover a potential refactoring to split out of few of the responsibilities currently carried out by the LBHttpSolrServer class. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13716865",
            "date": "2013-07-23T18:38:48+0000",
            "content": "Bulk close resolved 4.4 issues "
        }
    ]
}