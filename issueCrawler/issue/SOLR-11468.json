{
    "id": "SOLR-11468",
    "title": "Missing output encoding in file viewer component on admin UI",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved",
        "components": [
            "Admin UI"
        ],
        "affect_versions": "7.0.1",
        "status": "Open",
        "fix_versions": []
    },
    "description": "When viewing the contents of a file in \"Files\", if the file is not an xml (e.g. is a txt) and contains a script, the script will run.\n\nExample: create a file called 'demo.txt' in one of the cores with the following contents:\n<script>alert(\"JavaScript\")</script>\n\nWhen viewing the file on the admin UI a popup will display (indicating that the javascript code was executed) instead of the script being displayed as text.\n\nThis is the part of the files.html which is problematic:\n<code ng-bind-html=\"content | highlight:lang | unsafe\"></code>\n\nSeems to affect all versions with the new (angular) UI.",
    "attachments": {
        "SOLR-11468.patch": "https://issues.apache.org/jira/secure/attachment/12892090/SOLR-11468.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16203711",
            "author": "Cassandra Targett",
            "content": "My javascript is rather basic and my Angular even less so, but I did some research on this and came up with a potential solution.\n\nFirst, the ng-bind-html directive allows HTML to be rendered in a page instead of displayed as code. One of the use cases for this is to allow commenters to a site to use HTML in their comments and it will format the display properly. There's a StackOverflow question that is the same issue: https://stackoverflow.com/questions/28325714/ng-bind-html-doesnt-prevent-cross-site-scripting. Note that this isn't precisely XSS, but the same problem exists in the ZooKeeper Tree display, so if someone gains the ability to either add files to the conf directory for a collection/core or to any part of the znode, they could run malicious javascript.\n\nThere's some kind of Angular thing with $sanitize (https://docs.angularjs.org/api/ngSanitize/service/$sanitize), but I couldn't figure out if it would do what we wanted and if there would be unforeseen side effects of it or lots of places in code we need to fix, etc.\n\nI did found a different possible solution, which is to set a Content Security Policy (CSP) in the meta tags of the Solr UI, and set it in a way that only allows scripts that are external files on the site (like angular.js, app.js, etc.) and not inline scripts as in this example. In the attached patch, I've added this to solr/webapp/web/index.html:\n\n\n<meta http-equiv=\"Content-Security-Policy\" content=\"script-src 'self';\">\n\n\n\nThis would allow images, fonts, and other elements to be loaded from external locations if necessary, but all scripts must be from the server only, and only from external files on that server. We could make this tighter by changing content=\"script-src 'self' to content=\"default-src 'self', which would restrict images, fonts, etc.\n\nWith Angular, using a CSP requires also adding an angular-csp.css file that allows Angular to respect the CSP declaration.\n\nI may be naive in my approach to this, so better alternatives are welcome. However, it seems to solve the problem, and from my testing doesn't appear to cause any other problems (but more testing is warranted). ",
            "date": "2017-10-13T15:36:08+0000"
        },
        {
            "id": "comment-16606994",
            "author": "Jan H\u00f8ydahl",
            "content": "Cassandra Targett do you know if anything has been done regarding this? ",
            "date": "2018-09-07T11:12:31+0000"
        },
        {
            "id": "comment-16607286",
            "author": "Cassandra Targett",
            "content": "No, I've heard nothing since I posted the patch. ",
            "date": "2018-09-07T16:02:47+0000"
        },
        {
            "id": "comment-16631582",
            "author": "Jan H\u00f8ydahl",
            "content": "Any hope of targeting 7.5.1 with some kind of fix for this?\n\nDoes it need a CVE number? ",
            "date": "2018-09-28T09:08:25+0000"
        },
        {
            "id": "comment-16634366",
            "author": "Cassandra Targett",
            "content": "IMO, it doesn't need a CVE, I don't think it is really a vulnerability by itself. I said this at the time:\n\n...if someone gains the ability to either add files to the conf directory for a collection/core or to any part of the znode, they could run malicious javascript.\n\nIOW, they would have already had to breach your system to use this; it doesn't introduce an avenue for a breach.\n\nI neglected to mention when you asked me about a few weeks ago Jan H\u00f8ydahl that I have this in a branch locally that I could update & push. Or I could just share a new patch. ",
            "date": "2018-10-01T17:31:40+0000"
        },
        {
            "id": "comment-16634386",
            "author": "Jan H\u00f8ydahl",
            "content": "Ok, I agree that this is not a high-risk flaw, but a type of issue that we in the past have patched and classified as a bugfix I guess. So we could simply make this issue public and push a fix as a usual bugfix, not? ",
            "date": "2018-10-01T17:46:15+0000"
        },
        {
            "id": "comment-16634408",
            "author": "Cassandra Targett",
            "content": "So we could simply make this issue public and push a fix as a usual bugfix,\n\nWhen I worked on this a year ago, I recall thinking similarly. I never felt (and still don't feel) all that confident in making the decision either way, though. ",
            "date": "2018-10-01T18:04:19+0000"
        },
        {
            "id": "comment-16720431",
            "author": "Cassandra Targett",
            "content": "Changing the issue to public, since there is consensus by the PMC it's not a security vulnerability. ",
            "date": "2018-12-13T17:38:46+0000"
        }
    ]
}