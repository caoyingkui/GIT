{
    "id": "SOLR-5773",
    "title": "CollapsingQParserPlugin should make elevated documents the group head",
    "details": {
        "affect_versions": "4.6.1",
        "status": "Closed",
        "fix_versions": [
            "4.8"
        ],
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Hi Joel,\nI sent you an email but I'm not sure if you received it or not. I ran into a bit of trouble using the CollapsingQParserPlugin with elevated documents. To explain it simply, I want to exclude grouped documents when one of the members of the group are contained in the elevated document set. I'm not sure this is possible currently because as you explain above elevated documents are added to the request context after the original query is constructed.\n\nTo try to better illustrate the problem. If I have 2 documents docid=1 and docid=2 and both have a groupid of 'a'. If a grouped query scores docid 2 first in the results but I have elevated docid 1 then both documents are shown in the results when I really only want the elevated document to be shown in the results.\nIs this something that would be difficult to implement? Any help is appreciated.\n\nI think the solution would be to remove the documents from liveDocs that share the same groupid in the getBoostDocs() function. Let me know if this makes any sense. I'll continue working towards a solution in the meantime.\n\n\nprivate IntOpenHashSet getBoostDocs(SolrIndexSearcher indexSearcher, Set<String> boosted) throws IOException {\n      IntOpenHashSet boostDocs = null;\n      if(boosted != null) {\n        SchemaField idField = indexSearcher.getSchema().getUniqueKeyField();\n        String fieldName = idField.getName();\n        HashSet<BytesRef> localBoosts = new HashSet(boosted.size()*2);\n        Iterator<String> boostedIt = boosted.iterator();\n        while(boostedIt.hasNext()) {\n          localBoosts.add(new BytesRef(boostedIt.next()));\n        }\n\n        boostDocs = new IntOpenHashSet(boosted.size()*2);\n\n        List<AtomicReaderContext>leaves = indexSearcher.getTopReaderContext().leaves();\n        TermsEnum termsEnum = null;\n        DocsEnum docsEnum = null;\n        for(AtomicReaderContext leaf : leaves) {\n          AtomicReader reader = leaf.reader();\n          int docBase = leaf.docBase;\n          Bits liveDocs = reader.getLiveDocs();\n          Terms terms = reader.terms(fieldName);\n          termsEnum = terms.iterator(termsEnum);\n          Iterator<BytesRef> it = localBoosts.iterator();\n          while(it.hasNext()) {\n            BytesRef ref = it.next();\n            if(termsEnum.seekExact(ref)) {\n              docsEnum = termsEnum.docs(liveDocs, docsEnum);\n              int doc = docsEnum.nextDoc();\n              if(doc != -1) {\n                //Found the document.\n                boostDocs.add(doc+docBase);\n\n               *// HERE REMOVE ANY DOCUMENTS THAT SHARE THE GROUPID NOT ONLY THE DOCID //*\n                it.remove();\n\n\n\n              }\n            }\n          }\n        }\n      }\n\n      return boostDocs;\n    }",
    "attachments": {
        "SOLR-5773.patch": "https://issues.apache.org/jira/secure/attachment/12632383/SOLR-5773.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "David Boychuck",
            "id": "comment-13912270",
            "date": "2014-02-25T23:46:28+0000",
            "content": "To better illustrate what I'm talking about add the following to TestCollapseQParserPlugin.java\n\n\n String[] doc7 = {\"id\",\"7\", \"term_s\",\"YYYY\", \"group_s\", \"group1\", \"test_ti\", \"10\", \"test_tl\", \"1300\", \"test_tf\", \"4020\"};\n    assertU(adoc(doc7));\n    assertU(commit());\n\n\n\nAnd now update elevate.xml\n\n\n <query text=\"YYYY\">\n  <doc id=\"7\" />\n </query>\n\n\n\nThe result after running the test for elevate is\n\n\n<response>\n   <lst name=\"responseHeader\">\n      <int name=\"status\">0</int>\n      <int name=\"QTime\">100</int>\n      <lst name=\"params\">\n         <str name=\"q\">YYYY</str>\n         <str name=\"fq\">{!collapse field=group_s}</str>\n         <str name=\"defType\">edismax</str>\n         <str name=\"bf\">field(test_ti)</str>\n         <str name=\"qf\">term_s</str>\n         <str name=\"fl\">id,term_s,group_s,test_ti,test_tl,test_tf,[elevated]</str>\n         <str name=\"qt\">/elevate</str>\n      </lst>\n   </lst>\n   <result name=\"response\" numFound=\"3\" start=\"0\">\n      <doc>\n         <float name=\"id\">7.0</float>\n         <str name=\"term_s\">YYYY</str>\n         <str name=\"group_s\">group1</str>\n         <int name=\"test_ti\">10</int>\n         <long name=\"test_tl\">1300</long>\n         <float name=\"test_tf\">4020.0</float>\n         <bool name=\"[elevated]\">true</bool>\n      </doc>\n      <doc>\n         <float name=\"id\">2.0</float>\n         <str name=\"term_s\">YYYY</str>\n         <str name=\"group_s\">group1</str>\n         <int name=\"test_ti\">50</int>\n         <long name=\"test_tl\">100</long>\n         <float name=\"test_tf\">200.0</float>\n         <bool name=\"[elevated]\">false</bool>\n      </doc>\n      <doc>\n         <float name=\"id\">6.0</float>\n         <str name=\"term_s\">YYYY</str>\n         <str name=\"group_s\">group2</str>\n         <int name=\"test_ti\">10</int>\n         <long name=\"test_tl\">100</long>\n         <float name=\"test_tf\">200.0</float>\n         <bool name=\"[elevated]\">false</bool>\n      </doc>\n   </result>\n</response>\n\n\n\nYou can see that there are now two results for group1 when all I really want is the elevated document to be shown for group1 "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13913519",
            "date": "2014-02-26T21:20:37+0000",
            "content": "Hmm... it looks like the getBoostDocs() function is operating on the un-collapsed set to determine wether or not it should be elevated. One potential solution (in all of my ignorance) seems like moving the order of operations of the getBoostDocs() until after the results have been collapsed. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13913706",
            "date": "2014-02-26T23:17:56+0000",
            "content": "Actually I think I found a much easier solution. Let me know if you think this will work or if it will have negative repercussions.\n\n\n public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n      if(ord > -1) {\n        if (this.collapsedSet.fastGet(globalDoc)) {\n          //If we have a document in the group that is potentially not \n          //the top scorer but also exists as an elevated document\n          //set it as the globalDoc and it will be removed in\n          //favor of the elevated document\n          ords[ord] = globalDoc;\n        } else {\n          float score = scorer.score();\n          if(score > scores[ord]) {\n            ords[ord] = globalDoc;\n            scores[ord] = score;\n          }\n        }\n      } else if (this.collapsedSet.fastGet(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.fastSet(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n\n\nThis basically sets the ords[ord] to the document id that also exists in the elevated documents. The consequence is that the document that is the group head has the same id as the elevated document and it is removed from the result set. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13913797",
            "date": "2014-02-27T00:25:42+0000",
            "content": "Last fix had a bug. This is working for me.\n\n\n public CollapsingScoreCollector(int maxDoc,\n                                    int segments,\n                                    SortedDocValues values,\n                                    int nullPolicy,\n                                    IntOpenHashSet boostDocs) {\n      this.maxDoc = maxDoc;\n      this.contexts = new AtomicReaderContext[segments];\n      this.collapsedSet = new OpenBitSet(maxDoc);\n      this.boostDocs = boostDocs;\n      if(this.boostDocs != null) {\n        //Set the elevated docs now.\n        Iterator<IntCursor> it = this.boostDocs.iterator();\n        while(it.hasNext()) {\n          IntCursor cursor = it.next();\n          this.collapsedSet.fastSet(cursor.value);\n        }\n      }\n      this.values = values;\n      int valueCount = values.getValueCount();\n      this.ords = new int[valueCount];\n      this.groupIsBoosted = new boolean[valueCount];\n      Arrays.fill(this.ords, -1);\n      this.scores = new float[valueCount];\n      Arrays.fill(this.scores, -Float.MAX_VALUE);\n      this.nullPolicy = nullPolicy;\n      if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        nullScores = new FloatArrayList();\n      }\n    }\n\n    public boolean acceptsDocsOutOfOrder() {\n      //Documents must be sent in order to this collector.\n      return false;\n    }\n\n    public void setNextReader(AtomicReaderContext context) throws IOException {\n      this.contexts[context.ord] = context;\n      this.docBase = context.docBase;\n    }\n\n    public void collect(int docId) throws IOException {\n      int globalDoc = docId+this.docBase;\n      int ord = values.getOrd(globalDoc);\n      \n      \n      if(ord > -1) {\n        if (this.collapsedSet.fastGet(globalDoc)) {\n          //If we have a document in the group that is potentially not \n          //the top scorer but also exists as an elevated document\n          //set it as the globalDoc and it will be removed in\n          //favor of the elevated document\n          groupIsBoosted[ord] = true;\n          ords[ord] = globalDoc;\n        } else if (!groupIsBoosted[ord]) {\n          float score = scorer.score();\n          if(score > scores[ord]) {\n            ords[ord] = globalDoc;\n            scores[ord] = score;\n          }\n        }\n      } if (this.collapsedSet.fastGet(globalDoc)) {\n        //The doc is elevated so score does not matter\n        //We just want to be sure it doesn't fall into the null policy\n        ords[ord] = globalDoc;\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_COLLAPSE) {\n        float score = scorer.score();\n        if(score > nullScore) {\n          nullScore = score;\n          nullDoc = globalDoc;\n        }\n      } else if(nullPolicy == CollapsingPostFilter.NULL_POLICY_EXPAND) {\n        collapsedSet.fastSet(globalDoc);\n        nullScores.add(scorer.score());\n      }\n    }\n\n\n\nThis approach will work for default grouping. Will still have to implement fixes for min max grouping. I will probably also want to make this a toggle-able feature. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13918369",
            "date": "2014-03-03T18:25:43+0000",
            "content": "David,\n\nI agree that the elevated document should become the group head. I'll begin working on a patch for this. I'm thinking of handling this during the finish() stage rather then the collect stage. I hope to have something to test this week.\n\nJoel  "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13918371",
            "date": "2014-03-03T18:27:44+0000",
            "content": "Thanks Joel,\n\nI'm just about to attach my patch for the collect stage just in case you want to use it. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13918733",
            "date": "2014-03-03T23:38:54+0000",
            "content": "I am attaching my patch which will set the group head to the elevated document if it exists. This operates during the collect method. I will update with some thorough tests later today or tomorrow. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13918833",
            "date": "2014-03-04T00:42:00+0000",
            "content": "Updating my patch with a couple of unit tests "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13919557",
            "date": "2014-03-04T16:08:59+0000",
            "content": "Initial patch with a very simple test. Needs more testing for sure. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13919581",
            "date": "2014-03-04T16:37:44+0000",
            "content": "Hi David,\n\nJust looked through your patch. It looks like it assumes the boosted documents are collected ahead of the other docs. This won't actually be the case. The documents will be collected in lucene docId order. The actual boosting happens after the documents are delegated to the ranking collectors.\n\nJoel   "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13919723",
            "date": "2014-03-04T18:16:35+0000",
            "content": "Fixed a bug in the recursive merge join code. Added simple test of this code. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13919877",
            "date": "2014-03-04T20:18:58+0000",
            "content": "Hi Joel,\n\nYou are correct I did assume the boosted docs were collected first. I take it that assumption is not correct. Could you explain at a high level how the delegating collectors work as to invalidate my assumption. I am trying to get a better understanding of how solr works on a high level. Your help is appreciated as always. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13920234",
            "date": "2014-03-04T23:48:08+0000",
            "content": "Sure. Delegating collectors are passed each document that matches the query in the collect method. There are some collectors that can accept documents out of order but the CollapsingQParserPlugin cannot. The method acceptsDocsOutOfOrder() defines this. So for the CollapsingQParserPlugin the documents will be passed to the collect method in lucene document id order.\n\nMost delegating collectors act like a filter and delegate documents to the ranking collectors directly from the collect method. The CollapsingQParserPlugin is different in that it doesn't delegate in the collect method, it only collapses in the collect method. In the finish method it sends down all the collapsed documents to the ranking collectors. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13920242",
            "date": "2014-03-04T23:52:33+0000",
            "content": "Thank you for the explanation Joel, I am sure it will help with my understanding. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13920268",
            "date": "2014-03-05T00:17:19+0000",
            "content": "I'm still having a bit of trouble understanding. If the CollapsingScoreCollector takes the boostDocs in as a parameter of the constructor then wouldn't the collect() method already have the full set of boosted documents to work with? "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13920294",
            "date": "2014-03-05T00:40:35+0000",
            "content": "Yes, you could implement the filter in the collect method. But it would be less efficient then the approach I took for a couple of reasons. First, the collect method is called for every document, so adding a filter there means that each document needs to be tested by the filter. By filtering in the finished stage, only collapsed documents need to be tested. \n\nSecond, because the documents are collapsed into an array based on ord value there is an opportunity to do a very efficient merge join when applying the filter. You can only do a merge join on two sorted sets. It turns out that the larger set was already sorted by the group ord value, so all I had to do was sort the group ords in the boosted documents. Take a look at the inner class SortedBoostSet.contains method to see the merge join. You'll see how few operations it takes to filter the larger result with very little memory used.  "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13920295",
            "date": "2014-03-05T00:42:12+0000",
            "content": "Thank you for the explanation. I will study the code. Thanks again for all of your help. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13923885",
            "date": "2014-03-07T13:55:19+0000",
            "content": "Tested this at scale and it seems to be functioning properly. \n\nDavid, let me know when you've had a chance to test out the patch.\n\nThanks,\nJoel "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13924106",
            "date": "2014-03-07T17:49:48+0000",
            "content": "I've got it running in a sandbox environment. Seems to be functioning without error under load of up to 3000 requests per minute, though most of these queries don't have elevated documents in their result set. But I haven't seen any errors so far. "
        },
        {
            "author": "Joel Bernstein",
            "id": "comment-13947989",
            "date": "2014-03-26T15:12:50+0000",
            "content": "Add randomized testing for CollapsingQParserPlugin.SortedBoostSet "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13955932",
            "date": "2014-04-01T00:23:34+0000",
            "content": "Commit 1583500 from Joel Bernstein in branch 'dev/trunk'\n[ https://svn.apache.org/r1583500 ]\n\nSOLR-5773: CollapsingQParserPlugin should make elevated documents the group head "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13955998",
            "date": "2014-04-01T01:39:24+0000",
            "content": "Commit 1583507 from Joel Bernstein in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1583507 ]\n\nSOLR-5773: CollapsingQParserPlugin should make elevated documents the group head "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13982634",
            "date": "2014-04-27T23:26:02+0000",
            "content": "Close issue after release of 4.8.0 "
        }
    ]
}