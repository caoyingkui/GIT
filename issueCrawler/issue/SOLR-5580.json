{
    "id": "SOLR-5580",
    "title": "SOLR-5311 was done without full understanding of the system and must be reverted.",
    "details": {
        "affect_versions": "4.6",
        "status": "Closed",
        "fix_versions": [
            "4.6.1",
            "4.7",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In class org.apache.solr.cloud.Overseer the Line 360:\n---------------------------------------------------------------------\n          if (sliceName !=null && collectionExists &&  !\"true\".equals(state.getCollection(collection).getStr(\"autoCreated\"))) {\n            Slice slice = state.getSlice(collection, sliceName);\n            if (slice.getReplica(coreNodeName) == null) \n{\n              log.info(\"core_deleted . Just return\");\n              return state;\n            }\n          }\n---------------------------------------------------------------------\nthe slice needs to be checked null .because when create a new core with both explicite shard and coreNodeName, the state.getSlice(collection, sliceName)  may return a null.So it needs to be checked ,or there will be an NullpointException\n---------------------------------------------------------------------\n          if (sliceName !=null && collectionExists &&  !\"true\".equals(state.getCollection(collection).getStr(\"autoCreated\"))) {\n            Slice slice = state.getSlice(collection, sliceName);\n            if (slice != null && slice.getReplica(coreNodeName) == null) {              log.info(\"core_deleted . Just return\");              return state;            }\n          }\n---------------------------------------------------------------------",
    "attachments": {
        "SOLR-5580.patch": "https://issues.apache.org/jira/secure/attachment/12621085/SOLR-5580.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Bill Bell",
            "id": "comment-13858090",
            "date": "2013-12-28T18:16:52+0000",
            "content": "This looks good to me. I also like the log.info() "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858162",
            "date": "2013-12-28T23:13:07+0000",
            "content": "This was introduced by SOLR-5311. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858163",
            "date": "2013-12-28T23:16:28+0000",
            "content": "That whole bit looks silly and dangerous to me. I'm not sure this is the right way to do this check and it seems we should just remove that whole attempt to skip publishing. I don't think it's well tested. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858164",
            "date": "2013-12-28T23:19:18+0000",
            "content": "Commit 1553967 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1553967 ]\n\nSOLR-5580: NPE when creating a core with both explicit shard and coreNodeName. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858165",
            "date": "2013-12-28T23:20:16+0000",
            "content": "Commit 1553968 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1553968 ]\n\nSOLR-5580: NPE when creating a core with both explicit shard and coreNodeName. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858166",
            "date": "2013-12-28T23:21:42+0000",
            "content": "Commit 1553969 from Mark Miller in branch 'dev/branches/lucene_solr_4_6'\n[ https://svn.apache.org/r1553969 ]\n\nSOLR-5580: NPE when creating a core with both explicit shard and coreNodeName. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858167",
            "date": "2013-12-28T23:22:20+0000",
            "content": "Thanks YouPeng! "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858556",
            "date": "2013-12-30T04:28:50+0000",
            "content": "Commit 1554138 from Mark Miller in branch 'dev/trunk'\n[ https://svn.apache.org/r1554138 ]\n\nSOLR-5580: Remove more code that is not legal for determining if a core is new or not. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858557",
            "date": "2013-12-30T04:30:55+0000",
            "content": "Commit 1554139 from Mark Miller in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1554139 ]\n\nSOLR-5580: Remove more code that is not legal for determining if a core is new or not. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13858558",
            "date": "2013-12-30T04:35:08+0000",
            "content": "Commit 1554140 from Mark Miller in branch 'dev/branches/lucene_solr_4_6'\n[ https://svn.apache.org/r1554140 ]\n\nSOLR-5580: Remove more code that is not legal for determining if a core is new or not. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858841",
            "date": "2013-12-30T14:49:39+0000",
            "content": "Yes , this is expected to fail. \nBut why would anyone create a core with explicit coreNodeName. I wanted that case to be eliminated. \nThe idea is to only create the coreNodeName at the Overseer "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858844",
            "date": "2013-12-30T14:52:21+0000",
            "content": "But why would anyone create a core with explicit coreNodeName\n\nIt's a supported feature and you can't just eliminate it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858850",
            "date": "2013-12-30T14:56:31+0000",
            "content": "If you want to try and introduce this feature go back to the original issue. But please don't break this yet again. You can't do what you did, not even close. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858852",
            "date": "2013-12-30T14:57:41+0000",
            "content": "We need to eliminate this. Otherwise there is no other way to implement SLR-5311 . Why do we need this particular usecase? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858854",
            "date": "2013-12-30T15:00:42+0000",
            "content": "1. Even if we need to eliminate this, you cannot just eliminate a large feature by introducing buggy code that doesn't work with it!\n\n2. -1 on eliminating this! Custom coreNodeName is an explicit and important feature! This is how users can have a SolrCore take over for a replica that has gone away, or move it to a new machine.\n\nThe feature you added does not make sense with the current system. I suggest trying to implement something else correctly in another issue, but as it is, it's just one big bug with the current system design. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858857",
            "date": "2013-12-30T15:03:41+0000",
            "content": "SOLR-5311 is the one to reopen. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858858",
            "date": "2013-12-30T15:05:12+0000",
            "content": "I don't understand where is coreNodeName used? If a new core is created with same collection/slice it will join that slice.  the corNodeName is not used internally "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858863",
            "date": "2013-12-30T15:12:26+0000",
            "content": "If you have 2 replicas and one machine blows up, you now have two replicas registered and one running. If you buy a new machine, you can now tell it to take over for the machine that blew up rather than having a replica in the state that will never come back or having to remove it manually. This is a feature that cannot simply be removed unceremoniously in a point release.\n\nUser coreNodeNames is a current, supported feature... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858864",
            "date": "2013-12-30T15:13:24+0000",
            "content": "Mark, can you explain the difference between creating a core with the combination of collection/slice and collection/slice/coreNodeName ? what is the difference in the behavior ?  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858868",
            "date": "2013-12-30T15:25:11+0000",
            "content": "You can currently accomplish two things with this feature:\n\n1. coreNodeNames that suit your taste rather than the generic ones we make up. Not very important, but something users can already be doing.\n2. coreNodeName is the identity in the clusterstate - so you can make a new SolrCore take over for an existing state. Like I described above.\n\nIf we need to do something that conflicts with this feature, we either need to write code to let both things coexist, or we need to deprecate and wait till 5 to remove it or something. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858877",
            "date": "2013-12-30T15:39:53+0000",
            "content": "I didn't know people were hacking the system this way. I thought nobody used it\n\nHaving said that, let us see what is the solution \n\n\n\n\tDo we need a way to 'replace' a replica. it is just not replacing anything and just creating a new node. It was a hack for not having an ability to delete replicas from clusterstate\n\tI think the proper way should be to create new replicas and they can choose to clean up old ones using the API\n\tSOLR-5310 and SOLR-5311 both must be removed together. you can't remove one and leave the other one\n\tI don't see a clean way to implement SOLR-5310 and SOLR-5311 without making the clusterstate ugly\n\tThe coreNodeName is not used anywhere , so is it important (or even desirable ) to have custom coreNodeName ?\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858881",
            "date": "2013-12-30T15:52:07+0000",
            "content": "Do we need a way to 'replace' a replica. \n\nIt's just a matter of opinion on whether it's a hack to have to remove a replica and then add it or let something take over for it. Either method seems like it should reasonably work if you want it to.\n\nIn the longer term, the Collections API should be reasonable for all of this stuff, and eventually we won't necessarily support manual core manipulation. Until we do, I think this is a good feature.\n\nSOLR-5310 and SOLR-5311 both must be removed together. you can't remove one and leave the other one\n\nI don't believe that - it should be fine to still have a command that removes a replica from the clusterstate.\n\nI don't see a clean way to implement SOLR-5310 and SOLR-5311 without making the clusterstate ugly\n\nThen perhaps they should not be implemented and this energy is better spent working towards a fully functional Collections API.\n\nThe coreNodeName is not used anywhere , so is it important (or even desirable ) to have custom coreNodeName ?\n\nuh...yes it is used... "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858888",
            "date": "2013-12-30T15:59:33+0000",
            "content": "I also thing the approach is not correct in general - even if you didn't allow a user to specify the coreNodeName, you can't 100% safely use that information to determine if a core should exist or not.\n\nThe correct approach is to finish the Collections API, which can know if a collection should exist or not. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858900",
            "date": "2013-12-30T16:15:51+0000",
            "content": "It's just a matter of opinion ....\n\nYes, you are right. the point is , I think people don't really have to think that replicas have a name , they just need to have enough replicas for a given slice. \n\n\nI don't believe that - it should be fine to still have a command that removes a replica from the clusterstate.\n\nThe problem is that, If I removed a replica from clusterstate and then the core came up, What is the desired behavior? register the core or unload the core?\nThen perhaps they should not be implemented and this energy is better spent working towards a fully functional Collections API.\n\nSOLR-5310 is a step towards a fully functional collections API. The use case is, A node went down and I don't need to replace it with another node because I have enough replicas.  Now I need to clean up the clusterstate .Currently there is no way to achieve it\n\nuh...yes it is used...\n\nI',m sorry, I meant it is not used anywhere BY THE USER\n\nMy intent was not to break backcompat . But it happened because I didn't know this particular usecase. Let us see what is the best solution for this? Let us answer a few questions to ourselves\n\n\tIf we are designing the system today which way would you choose? a deletereplica API or a create core API to 'replace' a core. So what is the way forward?\n\timplement deletereplica API , but make the clusterstate slightly ugly for backcompat\n\n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858901",
            "date": "2013-12-30T16:18:23+0000",
            "content": "If you do want to create some marker that gets saved out so that a SolrCore can track if it had been removed or not, you would need to do it to a spot that is not a user editable param...\n\nThe only reason the previous scheme worked at all is because the coreNodeName is user editable and is saved out to solr.xml - into a user overrideable field. \n\nYou would need to save that information to a system only storage location. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858902",
            "date": "2013-12-30T16:20:59+0000",
            "content": "The problem is that, If I removed a replica from clusterstate and then the core came up, What is the desired behavior? register the core or unload the core?\n\nRegister the core. If you don't use the Collections API, the behavior is simple and straightforward. For a much better experience, we should finish the collections api, so we can deprecate dealing with individual cores.\n\nThe use case is, A node went down and I don't need to replace it with another node because I have enough replicas. Now I need to clean up the clusterstate .Currently there is no way to achieve it\n\nThat's why SOLR-5310 still makes sense and should still work fine for this case... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858906",
            "date": "2013-12-30T16:29:30+0000",
            "content": "Register the core. If you don't use the Collections API, the behavior is simple and straightforward. \n\nThe problem is , the deletereplica did not help. The collections api should get importance than cores going up and down. The  reason why I called the deletereplica when the core was down was to avoid having another replica (and to clean up clusterstate) . One of my purpose is defeated\n\nFor a much better experience, we should finish the collections api\n\nI completely agree with you. We are pursuing them one by one. One day I want collections API to be the definitive way to achieve almost anything on SolrCloud. So I want collection API's to take precedence over others\n\nI think the user has a problem because we didn't document this new behavior , mea culpa "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858937",
            "date": "2013-12-30T17:22:26+0000",
            "content": "was down was to avoid having another replica \n\nYes, I know why you did it, I'm saying there are many problems with how you went about it. The entire reliance on the coreNodeName is incorrect. Like I said, even if you had said users can't specify it and ignored back compat, it can't be in solr.xml then. Your code only worked because it is a user setting that is persisted in solr.xml.\n\nYour goal is fine, the implementation is all wrong. While it could be corrected, I think it's much better to push on the collections api, rather than complicate what is now a simple mode that will eventually either become second class or be removed. We should not spend a lot of time making it do what it was not designed for from the start. The plan has always been the Collections API for this type of behavior. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858945",
            "date": "2013-12-30T17:30:32+0000",
            "content": "I didn't quite get the solr.xml part. It is persisted , right?\n\nI was essentially trying to have to modes, one is a collection which got 'autoCreated' and the other is one which got created thru API ? are you saying se need a 3rd mode? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858947",
            "date": "2013-12-30T17:32:47+0000",
            "content": "A setting in solr.xml is user configurable by definition. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858956",
            "date": "2013-12-30T17:51:04+0000",
            "content": "A setting in solr.xml is user configurable by definition.\n\nYes, but that is same for every other property like, collection, shard etc . Isn't this same? anyone editing those properties would end up screwing the cluster itself. But we would expect the data in ZK to be the truth , right? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858965",
            "date": "2013-12-30T18:11:41+0000",
            "content": "Isn't this same?\n\nNo...those are user configurable and should be...a user can always enter bad settings...\n\nBut we would expect the data in ZK to be the truth , right?\n\nNo. That is the goal of finishing the Collections API. For the non Collections API, the truth is not currently ZK and it's not easy to make it so 100% - which is why I keep mentioning the collections API ... "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858968",
            "date": "2013-12-30T18:20:43+0000",
            "content": "No...those are user configurable and should be...a user can always enter bad settings...\n\nI agree with you . But what is the harm in making the coreNodeName editable? If he is sure about what he is doing , it will work. If he is fiddling with stuff any of those properties can screw up his system. I really can't see the difference between someone editing collection, shard, or coreNodeName\n\nNo. That is the goal of finishing the Collections API.\n\nIf and when we are ready , how do you plan to make the switch? Can we introduce the switch right away, so that the users who want the new way can go that way.  "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858970",
            "date": "2013-12-30T18:26:35+0000",
            "content": "I agree with you . But what is the harm in making the coreNodeName editable? If he is sure about what he is doing , it will work. If he is fiddling with stuff any of those properties can screw up his system. I really can't see the difference between someone editing collection, shard, or coreNodeName\n\nIt is currently editable. The way you did things, you would need it to not be editable. So no way it should be in solr.xml. You can configure a new core in solr.xml and set a shard id and a collection - but now you are going to say you can't set some of those settings (coreNodeName), we are just storing them there internally and it's not for you to preconfigure or edit? Now we have some special config in solr.xml that is not for users when everything else is? No way, -1.\n\nIf and when we are ready , how do you plan to make the switch? Can we introduce the switch right away, so that the users who want the new way can go that way.\n\nWe will need to support non Collections API for some time. For the Collections API, its just going to become more capable - if it requires it, some of those capabilities will require turning on new options if you are using old config. It will all be pretty easy, other than when and if we drop the non Collections API support entirely.  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858986",
            "date": "2013-12-30T18:47:53+0000",
            "content": "I guess you missed something.\n\nIf you added the core through solr.xml it is for a collection that is 'autoCreated' . So I enabled this feature only for collections created through collections API. For others the legacy behavior is not altered .So , they are not really editable if the cores are created through API. \n\n "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858992",
            "date": "2013-12-30T19:01:29+0000",
            "content": "The collections API is not ready for that functionality - you still have to use the collections API in concert with the core admin API to do many things. Until the Collections API can do everything without the core admin API, this feature is a problem. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13858996",
            "date": "2013-12-30T19:03:24+0000",
            "content": "this feature is a problem.\n\nOr at least the way it was implemented. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13858999",
            "date": "2013-12-30T19:07:30+0000",
            "content": "It is OK to use the cor admin API sometimes . It is fine. But editing solr.xml or adding system properties at node startup is something we should actively strive to avoid.\n\nBut here the question is not whether we should use core admin or not. I feel that the API to add a replica on a particular node would be pretty ugly on collections API and it looks more elegant on core admin API. \n\nI really didn't want to have a half broken deletereplica API "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13859008",
            "date": "2013-12-30T19:26:12+0000",
            "content": "The Core Admin also lets you set an initial coreNodeName! And it has the same use case.\n\nBut here the question is not whether we should use core admin or not. I feel that the API to add a replica on a particular node would be pretty ugly on collections API and it looks more elegant on core admin API.\n\nThat needs a discussion in it's own issue. A lot of things make more sense from a collection perspective (eg, I want to change the replicationFactor). And we need a way to easily distinguish between a operations meant for a Collections API collection and those that are not. How we implement that is still open, but I would initially lean towards making the collections api powerful enough not to need the core admin and then ban it on collection api collections.\n\nI really didn't want to have a half broken deletereplica API\n\nWe both want the same functionality - the problem is that it is ahead of it's time. The way it has been implemented does not jive with the current system. Yes, we need this - but we have to do it right. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13859012",
            "date": "2013-12-30T19:31:47+0000",
            "content": "the problem is that it is ahead of it's time\nWhat needs to be done before I can get this in?\n\nYes, we need this - but we have to do it right.\nIf we do it right how should it look like? We can't keep it an open item  "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13859285",
            "date": "2013-12-31T03:23:10+0000",
            "content": "My take on this. \n\nLet's fix this in a backcompat way so that deletereplica is implemented consistently "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13859287",
            "date": "2013-12-31T03:26:56+0000",
            "content": "Make another issue please. This is a bug that is assigned to me that I have fixed. Either work on the reopened original issue or make a new one.\n\nThe work necessary to do this feature properly is fairly substantial, and I'll be releasing this in 4.6.1 any time now. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13859288",
            "date": "2013-12-31T03:27:56+0000",
            "content": "What needs to be done before I can get this in?\n\nI'm happy to discuss that in the reopen JIRA issue around this feature. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13859338",
            "date": "2013-12-31T05:12:09+0000",
            "content": "Mark,\nThis issue is about an NPE . If we fix this NPE we should be good to go. The wholesale reverting of SOLR-5311 is beyond the scope of this issue. SOLR-5311 has already been released in 4.6 and reverting that code would be a regression in 4.6.1. \nWe can fix the NPE right away and make the core admin API work and this can be closed. I can take care of that right away. If we need a discussion over how the implementation of SOLR-5311 should be, it can be done after reopening SOLR-5311 "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13859703",
            "date": "2013-12-31T21:23:34+0000",
            "content": "No dude, the description of this issue is just not correct.\n\nYou broke SolrCloud and I won't allow that code back in. -1, it's broken. In 4.6.1 we need to remove it. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13859727",
            "date": "2013-12-31T21:50:44+0000",
            "content": "The NPE was just a surface bug that a user hit.\n\nThe actual bug here is:\n\n\n\tYou cannot count on coreNodeName like SOLR-5311 - totally illegal.\n\tYou cannot use this autoCreated property. Totally illegal in the current system.\n\tCores can stick around, and simply don't get updates into the cluster state? A lot of ugliness around this...and...\n\tIn general, this is a hack, half hearted attempt at making ZooKeeper the truth.\n\n\n\nAll these issues lead to many bugs.\n\nThere are non buggy, full solutions to making ZooKeeper the truth, and if that is what you are after, we have to do it in a way that is consistent with the current system. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13859828",
            "date": "2014-01-01T04:36:25+0000",
            "content": "I think, the core of the issue is whether to have an option of removing a core from the cluster without touching to the node itself?\n\nIf that option can be provided can it be implemented without introducing backward compatibility issues? \n\nI believe , in a reasonably big cluster,  nobody would want to deal with individual nodes to manage the cluster . So , they would like to go through the API to achieve almost everything.  Do we wish to introduce a new mode for these things?  Or do we want it to be the default mode?              \n\n\nIf we can implement the new mode without breaking existing features , do we need to introduce a new mode? the reason I'm asking these questions is because users tend to use the default mode assuming that is the best. a new mode is always a problem because that is kind of forking the system. That will be a support nightmare\n\nBefore getting into Implementation details , we need to build consensus on these things first . "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13859883",
            "date": "2014-01-01T14:33:42+0000",
            "content": "Cores can stick around, and simply don't get updates into the cluster state?...\n\nWhat do you mean? Cores are removed if they were removed explicitly from clusterstate and they come up again "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13859884",
            "date": "2014-01-01T14:40:01+0000",
            "content": "I would like to know the what the user was trying to do in this case YouPeng Yang ? where you trying to create a new core for a coreNodeName that didn't exist? was the slice present? or were you trying to create that too? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13859885",
            "date": "2014-01-01T14:46:10+0000",
            "content": "Mark Miller\n\nI wish to know where all coreNodeName is used by end user\n\n\n\tReplace an existing core with another . It should be working with SOLR-5311\n\tcreate a completely new core with a user-specified coreNodeName . It would fail with SOLR-5311\n\tIs there any other case I am missing?\n\n "
        },
        {
            "author": "YouPeng Yang",
            "id": "comment-13860123",
            "date": "2014-01-02T10:48:14+0000",
            "content": "Hi\n   The auto created corenodename can not be easy distinguished. We create many cores whose datadir is on hdfs. We need the clear corenodename to make failover quickly when a core was down. . \n\n\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2014-1-1\uff0c22:40\uff0c\"Noble Paul (JIRA)\" <jira@apache.org> \u5199\u9053\uff1a\n "
        },
        {
            "author": "YouPeng Yang",
            "id": "comment-13860127",
            "date": "2014-01-02T10:55:54+0000",
            "content": "By the way. We use the corenodename since the solr 4.4. However things go wrong when we decide to upgrade to 4.6.  \n   It troubles me for a long time. No one gives any help,neither the reference doc nor the CHANGES of solr 4.6 do no make any announcement about the change ,which is bad for users. \n\n   I even am not clear about what your autocreated check aim at.\n\n\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2014-1-1\uff0c22:40\uff0c\"Noble Paul (JIRA)\" <jira@apache.org> \u5199\u9053\uff1a\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13860134",
            "date": "2014-01-02T11:05:25+0000",
            "content": "YouPeng Yang what is your normal workflow?\n\n\n\thow do you create  your collection? I mean what is a typical command to create a collection?\n\twhat is your typical coreNodeName? How does your specific coreNodeName help you failover quickly?\n\tWhat will happen if a core comes up after you replace it with another? it should be replacing your new core with the old core in that case. How do you deal with that?\n\n\n\nHow about just creating a new core w/o a coreNodeName (only collection name and slice name) ? In that case you never need to worry about coreNodeName at all "
        },
        {
            "author": "YouPeng Yang",
            "id": "comment-13860148",
            "date": "2014-01-02T11:43:50+0000",
            "content": "Hi\n\n   The create core URL:\nhttp://10.7.23.122:8080/solr/admin/cores?action=CREATE&name=Test1&shard=Test&collection.configName=myconf&schema=schema.xml&config=solrconfigLocal_default.xml&collection=defaultcol&coreNodeName=Test1\n    We do not have the collection created first. Just create a new collection when create the first core of  a collection.\n    We use the corecodename to make distinguish the cores. As I said,the auto created corenodename make it hard to identify which core the datadir belongs to . Especially ,there are a lot of cores.\n\n      When a core crashed,as only as the data still exists, we can create a new core use the same datadir. It is important when you have a shared storage,such as NSF,even hdfs.\n\n     The failover we suppose that we can force multi core to share the same data directory. At last , we give up after the some tests . Also, Mr mark miller suggests we should not do that.\n\n\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2014-1-2\uff0c19:05\uff0c\"Noble Paul (JIRA)\" <jira@apache.org> \u5199\u9053\uff1a\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13860162",
            "date": "2014-01-02T12:03:54+0000",
            "content": "OK, Now I see it. \n(Not the solution , but the diagnosis)\nFor your usecase,  the collection was created with an older version of Solr. So the , property 'autoCreated' is absent from the collection. \n\nslice would have never been null in a normal case. if you created the system with numShards=x the system would have created shard1 to shardx right away. If it was a custom collection it would have expected you to create the slice first\n\nDo you have multiple replicas or do you just keep one copy of the index? \nHow did naming the coreNodeName \"Test1\" help you instead of \"core_node1\" ?  I'm assuming you somehow encode the data dir in the coreNodeName\n\nIf you could encode the data location in coreName itself , it would still work , right? "
        },
        {
            "author": "YouPeng Yang",
            "id": "comment-13860188",
            "date": "2014-01-02T12:51:51+0000",
            "content": "It needs to make clear that ,I create a collection with the new solr 4.6. \nWe deploy the new solr 4.6 in tomcat, and just create a new collection and a new core with the same request URL. \nCollections can created when we create a new with no explicit corenodename , I can not find the autocreated property in the collection information on zookeeper.\n\n    Convenient to manage the core,we would like to identify core with explicit custom shard name, core name ,collection and corecodename.\n\n  You said that I need to create a slice first which I think is not convenient. As all things go well in the old version. I think with no defend your work maybe make the lose of solr flexibility and the smooth. \n\n Anyway , we do hope your work keeps the good feature of solr. \n  Another suggestion ,if you make any change about the good charecter of solr ,please give some hints in the reference doc or CHANGES.\n\n  The last thing ,what is the purpose of the autocreated check . The autocreated property can not be find in solr. I have checked the data in zookeeper.  \n\n\n\nOh, even there are no any information about the change. \n\n\n\u53d1\u81ea\u6211\u7684 iPhone\n\n\u5728 2014-1-2\uff0c20:04\uff0c\"Noble Paul (JIRA)\" <jira@apache.org> \u5199\u9053\uff1a\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13860191",
            "date": "2014-01-02T13:01:07+0000",
            "content": "You said that I need to create a slice first which I think is not convenient\n\nNo I didn't say that. Not creating the slice was fine. I'm saying if you used the collection create api it would create the slices upfront.\n\nThe last thing ,what is the purpose of the autocreated check \n\nThe autoCreated flag was added to differentiate between a collection created using collections API and another one created automatically as a part of a core creation\n\nOh, even there are no any information about the change.\nIt was designed to work for your usecases . This is a regression . I need to test it with your usecase before I can comment further\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-13860266",
            "date": "2014-01-02T15:27:57+0000",
            "content": "The 'autoCreated' attribute was missing . "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13860276",
            "date": "2014-01-02T15:43:46+0000",
            "content": "Like I've said in SOLR-5311, autoCreated is illegal in the current system. Cores created by the Collections API must currently be the same as those created by the Core Admin API or preconfigured.\n\nautoCreated cannot exist yet, and when it can, it can't be used by default, it must be a new mode.  "
        }
    ]
}