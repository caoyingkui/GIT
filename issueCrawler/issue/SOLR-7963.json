{
    "id": "SOLR-7963",
    "title": "Suggester context filter query to accept local params query",
    "details": {
        "components": [
            "Suggester"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "5.4",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "SOLR-7888 has introduced a new parameter for filtering suggester queries\n\nsuggest.cfq=ctx1 OR ctx2\n \nThe implementation use the Solr StandardQueryParser for parsing the cfq param.\n\nThis card is to allow to pass in local param queries such as \n\nsuggest.cfq={!terms f=contextx}ctx1,ctx2",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2015-09-12T23:32:16+0000",
            "author": "Arcadius Ahouansou",
            "content": "This is currently being fixed in SOLR-7888 ",
            "id": "comment-14742264"
        },
        {
            "date": "2015-09-15T07:03:31+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl\n\nThank you very much for your comment at\nhttps://issues.apache.org/jira/browse/SOLR-7888#comment-14743511\n\n\nIt is kind of a hack to force Lucene's AnalyzingSuggester to use same contexts field name as the source schema field name we pull data from \nJan H\u00f8ydahl, I would suggest you take a step back and think a bit about this.\n\nCurrently, we are hard-coding the field to use in the code while we have the solr schema facility available.\nAccording to Michael McCandless blog at http://blog.mikemccandless.com/2013/06/a-new-lucene-suggester-based-on-infix.html , Unlike the existing suggesters, this new suggester does not use a specialized data-structure such as FSTs. Instead, it's an \"ordinary\" Lucene index under-the-hood...\nBasically, the analyzing suggester index could have the very same treatment that we apply to normal Solr index... that was the main motivation to move to using the existing solr schema instead of hard coding the field.\n\nI would suggest you think a bit more about this.\n\n\nIf the source fieldType in schema.xml is e.g. text, then that Analyser is used for query, with lowercasing etc. Problem is that the contexts field for the Suggester is always indexed as String, meaning that a source string \"ABC\" will not match a query \"ABC\" since it will be lowercased and match only \"abc\"\nThat is a bug in the implementation. I should be using the index-time analyzer defined in the schema instead. \nThis can be easily fixed.\n\nAnd using the analyser defined in the schema should not cause any issue with using the solr collection for other search  purposes as copyField could be used if one need to separate the field used for searching from the one used for suggestion.\n\nThank you very much Jan H\u00f8ydahl ",
            "id": "comment-14744965"
        },
        {
            "date": "2015-10-15T09:45:38+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl.\nDid you think a bit about the usage/nonUsage or the existing solr schema?\n\nRe-using the existing schema has many advantages such as:\n\n\n\tSuggest becomes very similar to normal solr search\n\tanalyzers, fields and fieldTypes are defined in the schema the very same way it's done for search\n\tWe can reuse the existing QParsers with zero change\n\tNo need to maintain suggest \"schema\" as java constants\n\n\n\nThank you very much. ",
            "id": "comment-14958590"
        },
        {
            "date": "2015-10-15T10:30:37+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "A major obstacle is the way many components, including QParsers assume that they are only using the main index. I think we need some looser coupling between the various components in order for this to be successful. Also, do I remember right that the Lucene suggesters impl of contexts do not allow customizing the analysis for contexts on the indexing side? That would also need to change.\n\nI may have misunderstood your intended approach here - if you think it is doable and have a \"plan\", let's continue discussion. ",
            "id": "comment-14958703"
        },
        {
            "date": "2015-11-06T10:37:06+0000",
            "author": "Jan H\u00f8ydahl",
            "content": "Arcadius Ahouansou If this is something you would like to followup, then go ahead. I don't have the capacity to drive the issue right now, but can be a discussion partner. ",
            "id": "comment-14993481"
        },
        {
            "date": "2015-11-06T12:47:58+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Jan H\u00f8ydahl.\nYes, I am working on this, but I have been very busy recently...\nI will get back to it and submit a working patch as soon as time allows.\nThis should address most issues you have raised ...\nThanks.\n ",
            "id": "comment-14993601"
        },
        {
            "date": "2016-05-10T21:46:03+0000",
            "author": "Mitchel Labonte",
            "content": "Hello Arcadius Ahouansou,\nDo you think it would be possible to use filter queries using the original Lucene index the document belongs to without having to copy the fields over in contexts.\nI wonder if something like keeping the id of the document as a \"context\" could be used to do a lookup in the original index to see if it respects a specific filter query.\n\nCause for now, if filtering needs to be based on multiple fields, the only solution is to index all those fields in \"contexts\", with the field name as a prefix i.e. type_typeA, category_categoryB.\nAlso, functions like termfreq cannot be used.\n\nAll of this is very important for applications that use filter queries for entitlement.\nI.e. if someone is not allowed to see a document, they shouldn't see a suggestion that comes from this document either. ",
            "id": "comment-15279022"
        },
        {
            "date": "2016-05-16T21:33:41+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Mitchel Labonte\nWHen you say \n\nDo you think it would be possible to use filter queries using the original Lucene index the document belongs to without having to copy the fields over in contexts.\n\nDo you mean using the original Solr index for suggest+filtering?\n\nIn the current implementation, the suggester maintains a separate index from the original Solr one.\nThe Original Solr Index is used to rebuild the suggester.\nSo, to answer you question, as it stands, no, you cannot use use the original index for doing the suggestion and filtering....  ",
            "id": "comment-15285364"
        },
        {
            "date": "2016-05-16T21:43:53+0000",
            "author": "Mitchel Labonte",
            "content": "Hi Arcadius Ahouansou,\n\nI see, that's a shame because applications using filter queries for entitlement are locked out from the suggester except if all fields are basically copied over in Contexts.\nDo you think it would at least be possible to use functions like termfreq? ",
            "id": "comment-15285381"
        },
        {
            "date": "2016-05-22T07:39:04+0000",
            "author": "Arcadius Ahouansou",
            "content": "Hello Mitchel Labonte\n\nthat's a shame because applications using filter queries for entitlement are locked out from the suggester except if all fields are basically copied over in Contexts.\nIn normal use cases, a call to the suggester is done separately ....\n\nThe good news is that you do not need to manually \"copy\" those fields to the context. You could use copyField in schema.xml to do this\n\n\nTalking about termfreq: Maybe what you really need is full text search, not suggester?\n\nMitchel Labonte, Please could you ask on the mailing list any further question you may have? \nThere are more knowledgeable people there who may be able to help you. ",
            "id": "comment-15295451"
        }
    ]
}