{
    "id": "SOLR-319",
    "title": "changes SynonymFilterFactory to \"Analyze\" synonyms file",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "WHAT:\nCurrently, SynonymFilterFactory works very well with N-gram tokenizer (CJKTokenizer, for example).\nBut we have to take care of the statement in synonyms.txt.\nFor example, if I use CJKTokenizer (work as bi-gram for CJK chars) and want C1C2C3 maps to C4C5C6,\nI have to write the rule as follows:\n\nC1C2 C2C3 => C4C5 C5C6\n\nBut I want to write it \"C1C2C3=>C4C5C6\". This patch allows it. It is also helpful for sharing synonyms.txt.\n\nHOW:\ntokenFactory attribute is added to <filter class=\"solr.SynonymFilterFactory\"/>.\nIf the attribute is specified, SynonymFilterFactory uses the TokenizerFactory to create Tokenizer.\nThen SynonymFilterFactory uses the Tokenizer to get tokens from the rules in synonyms.txt file.\n\nsample-1: CJKTokenizer\n\n    <fieldtype name=\"text_cjk\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.CJKTokenizerFactory\"/>\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"ngram_synonym_test_ja.txt\"\n        \t\tignoreCase=\"true\" expand=\"true\" tokenFactory=\"solr.CJKTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.CJKTokenizerFactory\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n    </fieldtype>\n\nsample-2: NGramTokenizer\n\n    <fieldtype name=\"text_ngram\" class=\"solr.TextField\" positionIncrementGap=\"100\">\n      <analyzer type=\"index\">\n        <tokenizer class=\"solr.NGramTokenizerFactory\" minGramSize=\"2\" maxGramSize=\"2\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n      <analyzer type=\"query\">\n        <tokenizer class=\"solr.NGramTokenizerFactory\" minGramSize=\"2\" maxGramSize=\"2\"/>\n        <filter class=\"solr.SynonymFilterFactory\" synonyms=\"ngram_synonym_test_ngram.txt\"\n        \t\tignoreCase=\"true\" expand=\"true\"\n        \t\ttokenFactory=\"solr.NGramTokenizerFactory\" minGramSize=\"2\" maxGramSize=\"2\"/>\n        <filter class=\"solr.LowerCaseFilterFactory\"/>\n      </analyzer>\n    </fieldtype>\n\nbackward compatibility:\nYes. If you omit tokenFactory attribute from <filter class=\"solr.SynonymFilterFactory\"/> tag, it works as usual.",
    "attachments": {
        "SOLR-319.patch": "https://issues.apache.org/jira/secure/attachment/12365685/SOLR-319.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12515484",
            "date": "2007-07-26T03:06:40+0000",
            "content": "The patch includes TestSynonymMap. To test SynonymMap, I removed \"private\" declaration from parseRules() method.\nThis patch includes CJKTokenizerFactory, too. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12519360",
            "date": "2007-08-13T02:01:09+0000",
            "content": "In addition, this is useful for non-N-gram tokenizers for CJK users. For example, we use SenTokenizer, which is a popular morphological analyzer in Japan. It uses a Japanese dictionary to determine morpheme boundaries.\n\nIf I have the following definition in schema.xml:\n\n<tokenizer class=\"solr.SenTokenizerFactory\"/>\n<filter class=\"solr.SynonymFilterFactory\" synonyms=\"synonyms.txt\" ignoreCase=\"true\" expand=\"true\"/>\n\nand I want a map rule \"C1C2C3=>C4C5\". I'm sure \"C1C2C3\" is a word, so I write the rule in synonyms.txt as follows:\n\nC1C2C3=>C4C5\n\nhowever, if there isn't \"C1C2C3\" in SenTokenizer's dictionary but \"C1C2\" and \"C3\" are there, SenTokenizer will output \"C1C2\" and \"C3\". In this case, the above rule doesn't work.\n\nThe patch solves this problem, in addition, it encourages sharing synonyms.txt file between N-gram and morphological tokenizer. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12526975",
            "date": "2007-09-13T02:47:35+0000",
            "content": "1. updated for current trunk (r575145)\n2. eliminate testCJKTokenizer() test method, which includes Japanese chars to test CJK bi-gram\n\ncomments are welcome. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12527668",
            "date": "2007-09-15T00:59:33+0000",
            "content": "I've revised the summary line of this bug because it was a little confusing to me ... the issue isn't really specific to n-gram based tokenizers, as you point out this is a general issue that currently when constructing the synonyms file you have to be very aware of the analysis chain of your fieldtype \u2013 ie: if LowercaseFilterFactory comes before SynonymFilterFactory, then all synonyms must be lowercased in your file.\n\nThe notion of specifying a TokenizerFactory as a property of the SynonymFilterFactory that tells it how to parse the synonymstxt file is pretyt clever, and would solve the  CJKTokenizer problem you describe, but i don't think it really goes far enough \u2013 consider the lowercase example.  it would be good if you could have a synonyms file that contained proper names, and have it do the right thing when used in lower cased fields as well as exact case fields.\n\nto extend the tokenizer idea \u2013 what if you could specify the name of a fieldtype, and the entire Analyzer for that fieldtype would be used to parse the individual synonym records?  this should simplify the patch a bit (since you don't have to worry about initializing any factories,  the schema will take care of it for you) and make it a lot more powerful. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12527682",
            "date": "2007-09-15T02:27:50+0000",
            "content": "Absolutely. I'll try to change my patch to implement the fieldtype idea. Thank you. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12527747",
            "date": "2007-09-15T15:09:33+0000",
            "content": "I think I cannot implement \"fieldtype version\" of this issue, because when Solr is initializing SynonymFilterFactory, Solr is in IndexSchema initialization step. Am I wrong? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12527795",
            "date": "2007-09-15T22:52:39+0000",
            "content": "I haven't thought it out all hte way, but it should be possible.  we only have to remember the name of the fieldtype in SynonymFilterFactory.init ... then in the create method we can call schema.getFieldTypes().get(fieldtypename).\n\nHmmm... except we probably don't have any access to the schema at that point do we?\n\nHmmm....  i'm not sure what the best way to do this would be.  we could just go get the schema from the SolrCore \u2013 except we're moving away from it being a singleton and we dn't have direct access to it either.\n\nanyone have any other suggestions?\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12527867",
            "date": "2007-09-16T15:05:02+0000",
            "content": "> ie: if LowercaseFilterFactory comes before SynonymFilterFactory, then all synonyms must be lowercased in your file.\n\nYou can specify ignoreCase=\"true\" "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12528149",
            "date": "2007-09-17T20:37:39+0000",
            "content": "> You can specify ignoreCase=\"true\"\n\ndoh! ... right, bad example ... but the spirit of my point is still true: there may be other things happening in your analysis chain (besides just tokenization) that you'd like to have happen to your synonyms as well, so that you:\n  1) can reuse the synonyms file in multiple field types\n  2) don't need to change your synonyms file just because you changed your analysis configuration. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12528150",
            "date": "2007-09-17T20:44:16+0000",
            "content": "> there may be other things happening in your analysis chain (besides just tokenization)\n\nI was trying to come up with realistic examples, but the only useful ones I could think of involve tokenization...\nExample: if you have a.b => c.d and switch from a whitespace tokenizer to a letter tokenizer. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12528151",
            "date": "2007-09-17T20:50:23+0000",
            "content": "> I was trying to come up with realistic examples, but the only useful ones I could think of involve tokenization...\n\nmaybe, but with things like the PatternReplaceTokenFilter \"tokenization\" sometimes happens after the Tokenizer is done. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12529317",
            "date": "2007-09-21T06:35:43+0000",
            "content": "Hoss, Yonik, thank you very much for your opinion.\n\nAs for now, SynonymFilterFactory implicitly uses WhitespaceTokenizer when analyzing synonyms.txt file.\nThis works well for English and European languages, those use spaces to separate words.\nBut from standpoint of CJK users, we would like to replace the implicit tokenizer by an arbitrary tokenizer.\nI thought that fieldtype could be specified to analyze synonyms.txt was a cool idea,\nbut it was difficult because IndexSchema hasn't been initialized at that time.\n\nFor CJK users, replacing tokenizer is enough for their purpose and fieldtype is overmuch... "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12545366",
            "date": "2007-11-26T09:04:17+0000",
            "content": "updated for current trunk (r597847). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12548502",
            "date": "2007-12-05T01:52:41+0000",
            "content": "FWIW: after rereading my earlier comments, i think the best thing to do (for now at least) is to go with the simplest approach that achieves the goal: do what was done in the orriginal path, and just refer to the tokenizer factory class directly (which can be instantiated using the ResourceLoader) instead of refering to a fieldType name like i suggested.\n\n(see also SOLR-414) "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12549283",
            "date": "2007-12-07T02:24:35+0000",
            "content": "Thank you for your comment, Hoss. The latest attached patch uses tokenizer factory to get tokenizer.\nThere seems to be no objections. Any chance to get this into svn soon? A few users in Japan uses this feature (Solr 1.2, though) and works perfectly. We would like to share the feature with CJK users, hopefully out of the box. "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12562870",
            "date": "2008-01-26T15:16:31+0000",
            "content": "updated for current trunk (SOLR-466). "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12562871",
            "date": "2008-01-26T15:25:42+0000",
            "content": "Perhaps it should be a full analyzer rather than just a tokenizer?\nIn the query elevation (query boosting) component, a field type can be specified, and the analyzer from that is used.\n\nOh, I just saw that Hoss already brought up that idea long ago... "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12596938",
            "date": "2008-05-14T20:51:23+0000",
            "content": "I think this patch is ripe for a commit.  Koji, want to commit your own baby?  "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12596989",
            "date": "2008-05-15T01:26:54+0000",
            "content": "Thanks, Otis. I will commit this in a week if there is no objection.\nBTW, I cannot assign myself on JIRA... looks like I have no permission? "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-12597952",
            "date": "2008-05-19T13:40:18+0000",
            "content": "All test pass.\nCommitted revision 657829. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13025361",
            "date": "2011-04-26T18:21:40+0000",
            "content": "Btw., I noticed this functionality is really pretty well hidden!  It may be good to at least add it to:\n\n\tone of the example schema.xml files (commented out)\n\thttp://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters#solr.SynonymFilterFactory\n\n\n\nThoughts? "
        }
    ]
}