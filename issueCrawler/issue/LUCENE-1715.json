{
    "id": "LUCENE-1715",
    "title": "DirectoryIndexReader finalize() holding TermInfosReader longer than necessary",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.4.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "DirectoryIndexReader has a finalize method, which causes the JDK to keep a reference to the object until it can be finalized.  SegmentReader and MultiSegmentReader are subclasses that contain references to, potentially, hundreds of megabytes of cached data in a TermInfosReader.\n\nSome options would be removing finalize() from DirectoryIndexReader (it releases a write lock at the moment) or possibly nulling out references in various close() and doClose() methods throughout the class hierarchy so that the finalizable object doesn't references the Term arrays.\n\nOriginal mailing list message:\nhttp://mail-archives.apache.org/mod_mbox/lucene-java-user/200906.mbox/%3C7A5CB4A7BBCE0C40B81C5145C326C31301A62971@NUMEVP06.na.imtn.com%3E",
    "attachments": {
        "LUCENE-1715.patch": "https://issues.apache.org/jira/secure/attachment/12411572/LUCENE-1715.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-06-23T16:13:36+0000",
            "content": "I'd be inclined to remove the finalizer at this point.  Apps should not be relying on GC to release the write lock, and if they are, at best they get very buggy behavior (eg we don't flush changes to disk, other writers will sometimes to acquire the write lock because GC didn't finalize, etc.),\n\nIf we remove the finalizer then the closed SegmentReader should be GC'd promptly. ",
            "author": "Michael McCandless",
            "id": "comment-12723156"
        },
        {
            "date": "2009-06-23T16:18:12+0000",
            "content": "+1\nI suggest removing finalize() from IndexWriter too.\n\nIf someone forgets to close IR/IW - that's his personal problem. (Which, in the abscence of finalizer he'll going to notice and fix pretty soon) ",
            "author": "Earwin Burrfoot",
            "id": "comment-12723157"
        },
        {
            "date": "2009-06-23T16:25:17+0000",
            "content": "I suggest removing finalize() from IndexWriter too.\n\n+1\n\nAt best you get buggy behavior if somehow you're relying on these finalizers...\n\nI plan to commit shortly. ",
            "author": "Michael McCandless",
            "id": "comment-12723164"
        },
        {
            "date": "2009-06-23T16:32:21+0000",
            "content": "Thanks Brian! ",
            "author": "Michael McCandless",
            "id": "comment-12723169"
        },
        {
            "date": "2009-06-23T16:40:27+0000",
            "content": "I would still additionally null the references Brian notes for even faster release by GC? ",
            "author": "Uwe Schindler",
            "id": "comment-12723174"
        },
        {
            "date": "2009-06-23T16:50:18+0000",
            "content": "Does that really help GC?  (I thought not)\n\nHad we left finalize in place, I agree nulling would help, because stuff can sit in the finalize queue for a while and nulling would have severed it.  But now since all of DirectoryReader will be GCd \"at once\", I didn't think nulling would help?\n\nThough, I suppose what it would help is when someone closes the reader but then still hangs onto it, so perhaps we should do it? ",
            "author": "Michael McCandless",
            "id": "comment-12723180"
        },
        {
            "date": "2009-06-23T16:55:29+0000",
            "content": "That was my intention.  ",
            "author": "Uwe Schindler",
            "id": "comment-12723183"
        },
        {
            "date": "2009-06-23T16:57:15+0000",
            "content": "Does that really help GC? (I thought not) \nIt really depends on the VM implementation. In a dalvik VM people start nulling stuff all the time because it helps GC. In that case where a lot of memory can be collected I guess its worth to null the references. I generally do not null references but in this case I would really to it.\n\nso +1 from my side. ",
            "author": "Simon Willnauer",
            "id": "comment-12723184"
        },
        {
            "date": "2009-06-23T17:05:25+0000",
            "content": "Reopening for nulling at least termInfosReader; we should probably null other memory intensive things like deleted docs & norms. ",
            "author": "Michael McCandless",
            "id": "comment-12723188"
        },
        {
            "date": "2009-06-23T17:41:25+0000",
            "content": "I wonder if it's also worth examining the (very few) other places that have finalize()?\n\nThe mere presence of a finalize() method triggers different handling by the garbage collector.  Since all remaining finalize() methods appear to close resources that should have been closed explicitly, the same principle applies for those as for the resolution of LUCENE-1715?\n ",
            "author": "Robert Newson",
            "id": "comment-12723203"
        },
        {
            "date": "2009-06-23T17:54:51+0000",
            "content": "SimpleFSDirectory.FSIndexInput's finalize() protects you from running out of descriptors, if you fail to close your reader; NativeFSLockFactory protects you if you forget to release the lock (close your writer). \n\nI agree, I think we should remove both of these. ",
            "author": "Michael McCandless",
            "id": "comment-12723217"
        },
        {
            "date": "2009-06-23T18:01:51+0000",
            "content": "I object nulling references in attempt to speed up GC. It's totally useless on any decent JVM implementation and if someone uses indecent JVM, I doubt he's concerned with his app efficiency. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12723224"
        },
        {
            "date": "2009-06-23T18:02:47+0000",
            "content": "And support removing finalizers everywhere if their only point is to guard against forgotten close(). ",
            "author": "Earwin Burrfoot",
            "id": "comment-12723225"
        },
        {
            "date": "2009-06-23T19:59:48+0000",
            "content": "I agree nulling is not a good practice to make GC faster.\n\nBut... for freeing up memory even if the app still holds a reference to the reader after closing it, I think this is in fact worthwhile. ",
            "author": "Michael McCandless",
            "id": "comment-12723276"
        },
        {
            "date": "2009-06-23T20:11:41+0000",
            "content": "I is def. not good practice and I agree that a decent VM should not care. In some environments you don't have a choice (mobile phones for instance) and if selected pieces of \"nulling\" code can speed things up we should do it. I will run a benchmark on a dalivk VM (Android) to show the difference with the change. I might not have time today or tomorrow though. \nThis change is not visible to anybody using lucene so to me its not that much of a deal. \nTo be honest I'm not a fan of doing that at all but in this case it \"could\" be useful in some corner cases but does not harm anybody. ",
            "author": "Simon Willnauer",
            "id": "comment-12723283"
        },
        {
            "date": "2009-06-23T20:28:43+0000",
            "content": "There's in fact one case where nulling harms. I'm going to try making as much of IR as possible immutable and final. Load everything upfront on creation/reopen (or don't load if IR is created for, say, merging). Unlike nulling references, making frequently accessed fields final does have an impact under adequate JVMs.\n\nWell, nulling can be added now and removed when/if I finish my IR stuff. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12723289"
        },
        {
            "date": "2009-06-23T21:02:07+0000",
            "content": "OK, attached patch nulling just a few things... I plan to commit in a day or two. ",
            "author": "Michael McCandless",
            "id": "comment-12723304"
        },
        {
            "date": "2009-06-25T10:55:53+0000",
            "content": "Thanks Brian! ",
            "author": "Michael McCandless",
            "id": "comment-12724023"
        }
    ]
}