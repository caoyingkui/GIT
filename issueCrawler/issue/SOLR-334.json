{
    "id": "SOLR-334",
    "title": "pluggable query parsers",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "One should be able to optionally specify an alternate query syntax on a per-query basis\nhttp://www.nabble.com/Using-HTTP-Post-for-Queries-tf3039973.html#a8483387\nMany benefits, including avoiding the need to do query parser escaping for simple term or prefix queries.\nPossible Examples:\nfq=<!term field=\"myfield\">The Term\nfq=<!prefix field=\"myfield\">The Prefix\nq=<!qp op=\"AND\">a b\nq=<!xml><?xml...>  // lucene XML query syntax?",
    "attachments": {
        "angle2curly.patch": "https://issues.apache.org/jira/secure/attachment/12381120/angle2curly.patch",
        "qparser.patch": "https://issues.apache.org/jira/secure/attachment/12366575/qparser.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12525195",
            "date": "2007-09-05T19:48:35+0000",
            "content": "could be a way to mostly unify what are currently different request handlers and parameters\n\n<!dismax>the user query goes here\n<!function>recip(rord(datefield),1,2,3)\n\nOptionally, dismax we could perhaps allow selective overriding of the dismax params\n<!dismax mm=\".5\">another dismax query\nThis would allow any query handler that needed to specify more than one query to be able to use more than one dismax query. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12525199",
            "date": "2007-09-05T19:51:53+0000",
            "content": "Another easy-yet-useful feature would be parameter substitution.  Great for separating the user query from what you do with it.\n\nIf the userq parameter contained the raw user query, one could specify a dismax query via\nq=<!dismax value=$userq>\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12528474",
            "date": "2007-09-18T18:01:37+0000",
            "content": "It occurs to me that this would help out gather together other parameters also.\n\nInstead of\nfacet.field=category&f.category.facet.offset=100&f.category.facet.limit=10&f.category.facet.sort=false&f.category.facet.mincount=1\n\nWe could have\nfacet.field=<!offset=100 limit=10 sort=false mincount=1>category\nOR\nfacet.field=<!field=category offset=100 limit=10 sort=false mincount=1> "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12530372",
            "date": "2007-09-26T06:37:05+0000",
            "content": "OK, heres a prototype... still needs some cleaning up and testing\n\nExamples:\n<!lucene q.op=AND df=myfield>\n<!sort='price asc' start=100 rows=10>foo\n<!dismax>hi there\n<!dismax v=$userq>   // indirection - userq is loaded from the other params\n<!prefix f=myfield>the unescaped prefix\n\nQuery boosted by function (multiplied)\n<!boost b=sqrt(popularity)>foo:bar\n<!boost b=popularity defType=dismax>user query terms     // set default query type for nested query\n\nNested Queries in Lucene syntax:\n+foo +bar query:\"<!dismax>a b\"\n\nNested Queries in FunctionQuery syntax (untested)\nsqrt(log(query($q,1.0)))\nsqrt(log(query(<!lucene v=$myq>,1.0)))\n\nYou can't currently override any parameters for dismax, and I've only changed the standard request handler's main query to support this syntax.  You should be able to register your own query plugins, but I haven't tested that yet.\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12531982",
            "date": "2007-10-03T02:19:13+0000",
            "content": "refresh of patch, including external value source since it overlaps.\n\n\tchanged getValueSource so it accepted a qparser instance  (SolrCore was needed for external value source patch)\n\tupdates to dismax parser so bq and bf parsing uses the qparser\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12532767",
            "date": "2007-10-05T20:25:29+0000",
            "content": "re localParams: right now they are map<String,String> (I wanted to keep it lightweight)\nbut I could perhaps see one wanting multi-valued params in the future.\nShould localParams be changed to map<String,String[]> or to SolrParams?\nThoughts?\n\nAlso, any syntax thoughts/improvements?\nI like <!a=1 b=2> fine in cleartext, but if you need to configure it in XML, then it's a bit uglier because of the needed escaping, but I'm not sure if it warrants a change to something else for that alone. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12534993",
            "date": "2007-10-15T22:33:30+0000",
            "content": "Attaching latest patch:\n\n\tmore tests + javadocs\n\t\"raw\" and \"field\" query parsers\n\t\"dismax\" parser can get it's params from local params\n\tlocalParams  changed from map<String,String> to SolrParams for future flexibility\n\n\n\nI'll commit in the next few days barring objections. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12536683",
            "date": "2007-10-22T14:29:09+0000",
            "content": "I just committed this.\n\nTODO: document local params syntax and perhaps pull together single page doc on available query types "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12573601",
            "date": "2008-02-29T05:46:17+0000",
            "content": "Yonik - it looks like this was committed but left open (for your last TODO?) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12575459",
            "date": "2008-03-05T18:55:47+0000",
            "content": "So I recently added a nested query parser... it's useful to be able to allow the client to specify query parts but not know about them.\n\nSo a client could send bf=<!query v=$dateboost> to add a date boost, but the actual date boost query could be configured as a default on the server: dateboost=<!func>recip(rord(datefield,1,1000,1000))\n\nI'm finding the local params stuff very useful, but I hate the fact that when I type the following URL in firefox, it transforms all the special chars.  It makes it very hard to edit (I use a browser a lot for testing).  Also, < would need to be escaped in any XML config too.\n\nExample:  I type in\n  http://localhost:8983/solr/select?q=<!dismax qf='title^10 body'>foo\nBut then firefox transforms it to\n  http://localhost:8983/solr/select?q=%3C!dismax%20qf='title^10%20body'%3Efoo\n\nSo while things are still changeable (before a release), is this really the right syntax?\nWe could alternately go with [! which doesn't have this problem (and wouldn't have to be escaped in XML config either).\nSo it could look like:\n  http://localhost:8983/solr/select?q=[!dismax qf='title^10 body']foo\nWhich firefox changes to\n  http://localhost:8983/solr/select?q=[!dismax%20qf='title^10%20body']foo\n\nThoughts? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12586960",
            "date": "2008-04-08T21:05:04+0000",
            "content": "I'd vote for anything but \"<\" ... mainly because of the XML similarity and escaping needed..\n\nsquare brackets or curly braces are fine with me ... we could even go with a combo approach to reduce the likelyhood of collision with any existing/future syntax people want to write QParser plugins for....\n\nbf={[!query v=$dateboost]} \n\n...OR... and call me crazy here ... we could make the actual start/end tokens be configurable (could make sense as a  <requestParser> option since using different markup per handler seems like overkill) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12590924",
            "date": "2008-04-21T14:19:03+0000",
            "content": "OK, I'm thinking of changing it to\n[!query v=$dateboost]\n\nAt some point, more configurability has more drawbacks than benefits... if someone really needs a different escape for this stuff, then that can be done later.  In the unlikely event of a future syntax collision, one can still easily escape the real query string by prepending a space. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12591045",
            "date": "2008-04-21T20:45:35+0000",
            "content": "well, at hte very least i would suggest using \n{...}\n instead of [...] since square brackets already have meaning in the primary query parser syntax.\n\nfrom a huffman encoding standpoint, i would also argue that a multi character delimiter (ie: \n{[...]}\n  ) is better then a single character since it's the atypical behavior.  things people type frequently should be easier then the things they type infrequently ... let's not make this too easy. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12591069",
            "date": "2008-04-21T21:18:06+0000",
            "content": "It's not a single character at the start... it is currently <!\nI actually like the look of the curly braces (looks like a map), but using both types at once would make me always forget which came first (and it's uglier).\n\nSo here are some more ideas:\n\n\n!{a=1}\n{{a=1}}\n[[a=1]]\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12591070",
            "date": "2008-04-21T21:22:02+0000",
            "content": "Note that the middle option (double curly braces) didn't render correctly in JIRA, so I'd eliminate that one. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12591087",
            "date": "2008-04-21T22:07:44+0000",
            "content": "i'd put the \"!\" inside the delimiter ... \n{!query a=1}\n seems better to me then !\n{query a=1} "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12593050",
            "date": "2008-04-29T17:02:01+0000",
            "content": "Attaching patch to change from <!foo> to \n{!foo}\nSeeing no other opinions, I'll commit after we get writable svn back. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12593116",
            "date": "2008-04-29T21:05:11+0000",
            "content": "curly brace patch committed. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12625218",
            "date": "2008-08-24T19:20:49+0000",
            "content": "Seems like this was committed. Should we close this issue? "
        },
        {
            "author": "David Smiley",
            "id": "comment-12627081",
            "date": "2008-08-29T19:30:31+0000",
            "content": "I intend on submitting a patch very soon which I think is related to this.  There are two parts to it,\n1. Enhancing the DisjunctionMaxQueryParser to work on all the query variants such as wildcard, prefix, and fuzzy queries.  This was not in Solr already because DisMax was only used for a very limited syntax that didn't use those features.  In my opinion, this makes a more suitable base parser for general use because unlike the Lucene/Solr parser, this one supports multiple default fields whereas other ones (say your <!prefix> one for example, can't do dismax).  The notion of a single default field is antiquated and a technical under-the-hood detail of Lucene that I think Solr should shield the user from by on-the-fly using a DisMax when multiple fields are used.\n\n2. Enhancing the DisMax QParser plugin to use a pluggable query string re-writer (via subclass extension) instead of the logic currently embedded within it (i.e. the escape nearly everything logic).  Additionally, made this QParser have a notion of a \"simple\" syntax (the default) or non-simple in which case some of the logic in this QParser doesn't occur because it's irrelevant (phrase boosting and min-should-max in particular).  As part of my work I significantly moved the code around to make it clearer and more extensible.\n\nShould I submit a new issue for this or add to this one? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12627084",
            "date": "2008-08-29T19:44:53+0000",
            "content": "Should I submit a new issue for this or add to this one?\n\nShould definitely get it's own issue. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12627085",
            "date": "2008-08-29T19:45:18+0000",
            "content": "resolving this issue. "
        }
    ]
}