{
    "id": "SOLR-2357",
    "title": "Thread Local memory leaks on restart",
    "details": {
        "affect_versions": "1.4.1",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "contrib - Solr Cell (Tika extraction)",
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Restarting solr (via a changed to a watched resource or via manager app for example) after submitting documents with Solr-Cell, gives the following message (many many times), and causes Tomcat to shutdown completely. \n\nSEVERE: The web application [/solr] created a ThreadLocal with key of type [org.\napache.solr.common.util.DateUtil.ThreadLocalDateFormat] (value [org.apache.solr.\ncommon.util.DateUtil$ThreadLocalDateFormat@dc30dfa]) and a value of type [java.t\next.SimpleDateFormat] (value [java.text.SimpleDateFormat@5af7aed5]) but failed t\no remove it when the web application was stopped. Threads are going to be renewe\nd over time to try and avoid a probable memory leak.\nFeb 10, 2011 7:17:53 AM org.apache.catalina.loader.WebappClassLoader checkThread\nLocalMapForLeaks",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13021055",
            "date": "2011-04-18T14:54:07+0000",
            "content": "I've seen this as well in this variant:\n\nSEVERE: The web application [/solr] created a ThreadLocal with key of type [org.apache.solr.schema.DateField.ThreadLocalDateFormat] (value [org.apache.solr.schema.DateField$ThreadLocalDateFormat@2b495510]) and a value of type [org.apache.solr.schema.DateField.ISO8601CanonicalDateFormat] (value [org.apache.solr.schema.DateField$ISO8601CanonicalDateFormat@6b2ed43a]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak. \n4-apr-2011 13:30:11 org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks\n\n\nSeems to only happen with Dates? "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13021062",
            "date": "2011-04-18T15:19:40+0000",
            "content": "The offending piece of code is in org.apache.solr.schema.DateField:\n\n  private final static ThreadLocalDateFormat fmtThreadLocal\n    = new ThreadLocalDateFormat(new ISO8601CanonicalDateFormat());\n\n\n\nHow can we avoid that Tomcat complains about the possible memory leak? finalize() won't work for final variables. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13021087",
            "date": "2011-04-18T16:19:14+0000",
            "content": "Perhaps clear it out in SolrDispatchFilter#destroy? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13023297",
            "date": "2011-04-22T17:44:57+0000",
            "content": "Perhaps clear it out in SolrDispatchFilter#destroy?\n\nOr CoreContainer.shutdown()?\n\nIt could perhaps be made more generic through registering callbacks to be run on shutdown, but perhaps not so important if there are just a few. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13024952",
            "date": "2011-04-25T20:43:14+0000",
            "content": "Generalized (core) shutdown hooks seem like they might be a decent idea ... but that introduces more life cycle complications (and i feel like we already have plenty)\n\nthe simplest solution seems like it would probably be to just have something like CoreContainer or SolrCore manage a single ThreadLocal object (probably a Map<Object,Object>) that any component in solr could attempt to us to stash persistent data in, and then the initial creator would just be responsible for cleaning up that object. "
        },
        {
            "author": "Doug Ivison",
            "id": "comment-13398494",
            "date": "2012-06-21T15:32:37+0000",
            "content": "Two weeks ago, this:  https://issues.apache.org/bugzilla/show_bug.cgi?id=52850  \n...improved memory leak detection & fixing, for Tomcat 7.\n\nWill that help with this? \n\n((Aside:  since our application vendor's official support is still for Tomcat 6, I hope that Konstantin's comment at bottom makes a difference \u2013 proposing that same fix for Tomcat 6.)) "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13531581",
            "date": "2012-12-13T22:31:08+0000",
            "content": "I have the latest Tomcat 7.0.34 and am still receiving this error. "
        },
        {
            "author": "David Boychuck",
            "id": "comment-13531582",
            "date": "2012-12-13T22:31:12+0000",
            "content": "Dec 13, 2012 2:30:24 PM org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks\nSEVERE: The web application [/apache-solr-4.0.0] created a ThreadLocal with key of type [org.apache.solr.schema.DateField.ThreadLocalDateFormat] (value [org.apache.solr.schema.DateField$ThreadLocalDateFormat@78c36125]) and a value of type [org.apache.solr.schema.DateField.ISO8601CanonicalDateFormat] (value [org.apache.solr.schema.DateField$ISO8601CanonicalDateFormat@6b2ed43a]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak. "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-13541023",
            "date": "2012-12-29T23:41:18+0000",
            "content": "I am also started to get the following error after a tomcat restart. (I increased ram buffer size and enabled jmx)\n\nSEVERE: The web application [/solr] created a ThreadLocal with key of type [org.apache.solr.schema.DateField.ThreadLocalDateFormat] (value [org.apache.solr.schema.DateField$ThreadLocalDateFormat@6aec873d]) and a value of type [org.apache.solr.schema.DateField.ISO8601CanonicalDateFormat] (value [org.apache.solr.schema.DateField$ISO8601CanonicalDateFormat@6b2ed43a]) but failed to remove it when the web application was stopped. Threads are going to be renewed over time to try and avoid a probable memory leak.\nDec 30, 2012 1:15:44 AM org.apache.catalina.loader.WebappClassLoader checkThreadLocalMapForLeaks\n\n\n\nNot sure this is related with this but I see these too:\n\n\nDec 30, 2012 1:16:08 AM org.apache.catalina.session.StandardManager doLoad\nSEVERE: IOException while loading persisted sessions: java.io.EOFException\njava.io.EOFException\n\tat java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:2280)\n\tat java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:2749)\n\tat java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:779)\n\tat java.io.ObjectInputStream.<init>(ObjectInputStream.java:279)\n\tat org.apache.catalina.util.CustomObjectInputStream.<init>(CustomObjectInputStream.java:58)\n\tat org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:246)\n\tat org.apache.catalina.session.StandardManager.load(StandardManager.java:204)\n\tat org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:491)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5294)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:618)\n\tat org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1100)\n\tat org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1618)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:138)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:662)\n\n\n\n\nDec 30, 2012 1:16:08 AM org.apache.catalina.session.StandardManager startInternal\nSEVERE: Exception loading sessions from persistent storage\njava.io.EOFException\n\tat java.io.ObjectInputStream$PeekInputStream.readFully(ObjectInputStream.java:2280)\n\tat java.io.ObjectInputStream$BlockDataInputStream.readShort(ObjectInputStream.java:2749)\n\tat java.io.ObjectInputStream.readStreamHeader(ObjectInputStream.java:779)\n\tat java.io.ObjectInputStream.<init>(ObjectInputStream.java:279)\n\tat org.apache.catalina.util.CustomObjectInputStream.<init>(CustomObjectInputStream.java:58)\n\tat org.apache.catalina.session.StandardManager.doLoad(StandardManager.java:246)\n\tat org.apache.catalina.session.StandardManager.load(StandardManager.java:204)\n\tat org.apache.catalina.session.StandardManager.startInternal(StandardManager.java:491)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\tat org.apache.catalina.core.StandardContext.startInternal(StandardContext.java:5294)\n\tat org.apache.catalina.util.LifecycleBase.start(LifecycleBase.java:150)\n\tat org.apache.catalina.core.ContainerBase.addChildInternal(ContainerBase.java:901)\n\tat org.apache.catalina.core.ContainerBase.addChild(ContainerBase.java:877)\n\tat org.apache.catalina.core.StandardHost.addChild(StandardHost.java:618)\n\tat org.apache.catalina.startup.HostConfig.deployDirectory(HostConfig.java:1100)\n\tat org.apache.catalina.startup.HostConfig$DeployDirectory.run(HostConfig.java:1618)\n\tat java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:441)\n\tat java.util.concurrent.FutureTask$Sync.innerRun(FutureTask.java:303)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:138)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:662)\n\n "
        },
        {
            "author": "Ahmet Arslan",
            "id": "comment-13541030",
            "date": "2012-12-30T00:46:34+0000",
            "content": "My restart was an improper shutdown of tomcat. By the way I don't use solr cell. "
        },
        {
            "author": "Jaimin Patel",
            "id": "comment-14092748",
            "date": "2014-08-11T13:19:42+0000",
            "content": "I am running into the same issue? Is the any solution to the problem?\n\nIts randomly causing tomcat shutdown.  "
        },
        {
            "author": "Matt C",
            "id": "comment-14138963",
            "date": "2014-09-18T13:50:21+0000",
            "content": "threadlocal leaks are a known issue with tomcat < 7.0.6, see http://wiki.apache.org/tomcat/MemoryLeakProtection "
        },
        {
            "author": "Pavan Kumar",
            "id": "comment-14227186",
            "date": "2014-11-27T02:52:40+0000",
            "content": "My Solr is shutting down randomly "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-15189540",
            "date": "2016-03-10T16:59:09+0000",
            "content": "\n\tTomcat has memory leaks with custom ThreadLocal instances as a key and value.\n\tTomcat 7.0.6 and later fix the problem by renewing threads in the pool.\n\n\n\nPlease see http://wiki.apache.org/tomcat/MemoryLeakProtection for details.\n\n\nCan we close this issue now? Thanks, "
        },
        {
            "author": "David Smiley",
            "id": "comment-15189557",
            "date": "2016-03-10T17:08:01+0000",
            "content": "Closing since this seems to be for Tomcat.  Besides, Solr doesn't officially support running in web containers any more. "
        },
        {
            "author": "Gus Heck",
            "id": "comment-15189657",
            "date": "2016-03-10T18:10:50+0000",
            "content": "It was about solr's behavior using thread locals triggering the nannys in tomcat, but as you say the web container use case is not supported anymore. I agree it should be closed. "
        }
    ]
}