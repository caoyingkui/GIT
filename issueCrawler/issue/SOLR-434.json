{
    "id": "SOLR-434",
    "title": "interfaces should support >2B docs",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "External interfaces that deal with numbers of documents should eventually be able to deal with > 2B documents (that means long instead of int).",
    "attachments": {
        "SOLR-434-LongDocCount.patch": "https://issues.apache.org/jira/secure/attachment/12372642/SOLR-434-LongDocCount.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-12550835",
            "date": "2007-12-12T04:53:41+0000",
            "content": "Note: this doesn't really apply to single instances of Solr/Lucene... 2B ids will be fine for quite some time.\nHowever, distributed search can push over that limit, and we should prepare for it.\n\n\n\tSolrJ's SolrDocumentList should have numFound and start be a longs\n\thow to handle these numbers in the XML format (change to long at some point... bump version?).  These don't present a problem in JSON/Python since integers don't have limits.\n\tsame issue with facet counts... should they be defined to be <int> unless individual values are large enough to overflow, or should we just change them to long in SolrJ and the XML?\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12550836",
            "date": "2007-12-12T05:01:43+0000",
            "content": "The other backward-compatible alternative for the xml format is to redefine what <int> means.... basically treat it as an unbounded int. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12554615",
            "date": "2007-12-27T21:42:56+0000",
            "content": "solrj can change everything to long without problem.\n\nI think we can safely change all integers to long without problem.  I don't think the external api <int> makes an contract to say the value will fit within the java int range.  As you said, \"basically treat it as an unbounded int\" "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12554844",
            "date": "2007-12-28T21:11:07+0000",
            "content": "> I think we can safely change all integers to long without problem.\n\nSo you mean, when SolrJ encounters a <int>100</int> it will create a new Long(100)?\nThat wouldn't really be backward compatible with SolrJ users, but we haven't had a SolrJ release yet.\n\n> I don't think the external api <int> makes an contract to say the value will fit within the java int range.\n\nThe only issue is that there is a <long> tag...\nI don't think Solr currently uses Long objects for serialization, but long field types currently use the <long> tag. "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12554928",
            "date": "2007-12-29T16:23:57+0000",
            "content": "> \n>> I think we can safely change all integers to long without problem.\n> \n> So you mean, when SolrJ encounters a <int>100</int> it will create a new Long(100)?\n\nYes, thats what I'm suggesting.  Likewise when it hits numFound=X and start=Y, it would also store a long.\n\n> That wouldn't really be backward compatible with SolrJ users, but we haven't had a SolrJ release yet.\n> \n\nSince their has not been a release, I think that is a reasonable change.    For most use, the only thing people may see is a compiler warning for\n int count = results.getNumFound();\n\n>> I don't think the external api <int> makes an contract to say the value will fit within the java int range.\n> \n> The only issue is that there is a <long> tag...\n> I don't think Solr currently uses Long objects for serialization, but long field types currently use the <long> tag.\n> \n\ngood point \u2013 if you have <int> and <long> one would think they mean something different... also for NamedList configuration (NamedListInitalizedPlugin), <int> really expects to be a java int field.\n "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12556657",
            "date": "2008-01-07T19:14:45+0000",
            "content": "switches solrj + SolrDocumentList representation from int -> long\n\nFacet counts will accept <int> or <long> "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12557136",
            "date": "2008-01-09T05:22:19+0000",
            "content": "Looks good.\nIn my distributed faceting code I'm using ((Number)o).longValue() right now anyway. "
        }
    ]
}