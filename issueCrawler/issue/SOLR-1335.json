{
    "id": "SOLR-1335",
    "title": "load core properties from a properties file",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "There are  few ways of loading properties in runtime,\n\n\n\tusing env property using in the command line\n\tif you use a multicore drop it in the solr.xml\n\n\n\nif not , the only way is to  keep separate solrconfig.xml for each instance.  #1 is error prone if the user fails to start with the correct system property. \nIn our case we have four different configurations for the same deployment  . And we have to disable replication of solrconfig.xml. \n\nIt would be nice if I can distribute four properties file so that our ops can drop  the right one and start Solr. Or it is possible for the operations to edit a properties file  but it is risky to edit solrconfig.xml if he does not understand solr\n\nI propose a properties file in the instancedir as solrcore.properties . If present would be loaded and added as core specific properties.",
    "attachments": {
        "SOLR-1335.patch": "https://issues.apache.org/jira/secure/attachment/12415827/SOLR-1335.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12740878",
            "date": "2009-08-08T11:54:03+0000",
            "content": "hi everyone, If there are no objections I plan to commit this as soon as I write a testcase. Please comment, because this is a very visible change "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12741074",
            "date": "2009-08-09T12:45:24+0000",
            "content": "with a testcase "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12741208",
            "date": "2009-08-10T06:54:11+0000",
            "content": "with license headers. I plan to commit this soon "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12741414",
            "date": "2009-08-10T16:28:38+0000",
            "content": "Noble: i'm really confused about a few things...\n\n1) skimming the patch to CoreContainer it looks like \"solrconfig.properties\" is intented to be a new hardcoded magic filename ... but with the push towards solr.xml being the one and only magic hardcoded filename wouldn't it make more sense to people specify a properties file name (or names) there? (just like they can specify individual properties)\n\n2) i don't really understand the way the test code is structured ... TestSolrCoreProperties extends TestCase, and contains a private inner class SolrInstance extends AbstractSolrTestCase (extends TestCase,) ... huh?  \n\nSolrInstance's only value add on top of AbstractSolrTestCaseseems to be the creations of a new \"solrcore.properties\" file with some values in it ... but why not just commit an example \"solrcore.properties\" file directly into the test directory?\n\nWhat's the need for the inner test class?  (that file creation could be in the outer setUp() method just as easily) and how does the test actaully verify that a property was set correctly? (the only properties i can see used in solrconfig-solcoreproperties.xml are in garbage xml tags: tag1 & tag2 which aren't going to affect any behavior)\n\n(As a general rule: anytime i see System.setProperty i get worried ... those are going to affect the whole VM, not just this test, which could cause all sorts of confusion for other people (or other tests)) "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12741694",
            "date": "2009-08-11T05:39:53+0000",
            "content": "Hoss, thanks for the comments\n\n\"solrconfig.properties\" is intented to be a new hardcoded magic filename .\n\nFor a single-core the filenames are always hardcoded like solrconfig.xml and schema.xml. solrconfig.xml filename can be overridden from web.xml, but that is only if I modify the solr.war which I believe is not really used and it is \"hacking solr\".   \n\nbut with the push towards solr.xml being the one and only magic hardcoded filename \n\nThis is a good idea. But most of the users use single core deployments and the goodies that come with solr.xml is not available for them. So it is not much helpful . I wish the single core also becomes a multicore with one core and all these confusions can go away.\n\nWe can of course extend this feature by adding a property to the core tag as <core properties=\"conf/props.properties\">  in solr.xml . Do we really need to do it now because the properties file itself is optional and adding that to solr.xml can add to more clutter for a feature that is not widely used . Even if we add it later it is going to be backward compatible. \n\nFor the testcase , I just copied it from another w/o giving it much of a thought. The inner class can be avoided\n\nanytime i see System.setProperty i get worried \n\ndo we really have a choice here? Solr needs solr.solr.home to be set as a system property and all testcases follow this pattern\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12743138",
            "date": "2009-08-14T08:56:55+0000",
            "content": "The current default name is set as solrcore.properties. Is there any other preference for the name?  "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12743310",
            "date": "2009-08-14T17:30:21+0000",
            "content": "Mind including an example properties file, so we can see what's in it? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12743538",
            "date": "2009-08-15T04:25:46+0000",
            "content": "There is nothing specific in the properties .The user can choose to put in anything which he he would wish to replace in solrconfig/schema\n\neg: solrcore.properties\n\n/#this variable can be directly used in the replication section of solrconfig.xml\nmasterUrl=http://master_host:8080/solr/replication\ndisableMaster=true\n\n\nThis following is our usecase. \nThe developer who prepares the solrconfig.xml does not know about the host in which it is going to be deployed. So he should just use placeholders in the solrconfig and leave a properties file to the operations. The operations edit the properties file according to the deployment.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12744629",
            "date": "2009-08-18T18:20:15+0000",
            "content": "For a single-core the filenames are always hardcoded like solrconfig.xml and schema.xml. solrconfig.xml filename can be overridden from web.xml,\n\n...and they can be overridden in solr.xml \u2013 that's my main points: you are adding a filewhose name is hardcoded and can't be changed under any circumstances.  currently solr.xml is the only field with those kinds of rules, because the solrconfig.xml and schema.xml filenames can be specified in solr.xml. \n\nI also contest your claim that they are alwasy hardcoded for single cores ... we've been making definite progress down a path of encouraging people to use solr.xml even for single core setups, as you say...\n\nI wish the single core also becomes a multicore with one core and all these confusions can go away.\n\n...i agree with you completley, but it's not going to happen overnight, and adding more hardcoded things like this is just a step backwards.\n\nFrankly: i don't even thing there should be a default name for this new properties file, i think that if you want Solr to load properties from a file for you, you should be required to use solr.xml, and specify a filename there \u2013 that would also give us the benefit of letting people specify multiple filenames (which is my other big concern about a single magic filename: there can be only one of them.  for something like schema.xml or solrconfig.xml that's not the end of the world because merging multiple files doesn't even make much sense, but property files are extremly simple, and it should be just as easy to specify 37 of them as it is to specify 1.\n\nDo we really need to do it now because the properties file itself is optional and adding that to solr.xml can add to more clutter for a feature that is not widely used . Even if we add it later it is going to be backward compatible.\n\nIf it's something we know we're going to want to do, and it's going to keep the code simpler in the long run, we might as well do it right the first time.  there's already too much confusion between the distinction between the solr home dir, and the solr instance dir when dealing with solr.xml ... having a new magic filename just convolutes matters (looking at the code: i can't immediately tell, is the property file expected to be in the instanceDir, or the solr home? ... what if i have both?\n\ndo we really have a choice here? Solr needs solr.solr.home to be set as a system property and all testcases follow this pattern\n\nThere shouldn't be any need for a test to set the solr.solr.home system property ... the TestHarness already takes care of initializing the core with the appropriate home dir.\n\n(if for some reason this features tickles a bit of core initialization that doesn't work properly with the TestHarness then we should fix the TestHarness ... it's probably out of date with some of the EmbeddedSolr best practices anyway)\n\n\n\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12744882",
            "date": "2009-08-19T05:15:48+0000",
            "content": "I also contest your claim that they are alwasy hardcoded for single cores ... we've been making definite progress down a path of encouraging people to use solr.xml even for single core setups, as you say..\n\nAre we going to do thiat in 1.4 i.e solr.xml for single cores? But this properties file is a critical feature for our ops to deploy solr with replication feature. (The master server is only known at deploy time). currently we are shipping four different solrconfig.xml files\n\nI am not really worried about the specifics of how we implement this. My requirements are pretty simple\n\n\tA core should be able to load properties from a properties file (any file name, any loaction is OK)\n\tThere should be one sensible default for that file name and location , just the way we have for schema and solrconfig\n\n\n\nWhat is your preference of doing this?\n\n\n\n\n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12744994",
            "date": "2009-08-19T10:57:25+0000",
            "content": "Noble - why aren't system properties viable for this?   The replication examples show master=\"${master}\" constructs, allowing a system property to set master versus slave.   "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12745007",
            "date": "2009-08-19T11:40:21+0000",
            "content": "Noble - why aren't system properties viable for this?\n\n\n\tSetting system properties is error prone. If we have a few dozen properties setting -D for each property is hard. The startup scripts are maintained by operations whereas this properties file should be delivered by the developers. This is more about a separation of concern\n\tSystem properties are global properties. we should not corrupt that namespace\n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12745022",
            "date": "2009-08-19T12:06:20+0000",
            "content": "Error prone?  I don't buy that.  It's the same as setting a name in a .properties file - no more error prone than that. \n\nStartup scripts - these could delegate to a developer maintained subscript that set variables to be included in -D settings.\n\nGlobal properties - yes, but you can \"namespace\" them... -Dcore1name.master=false -Dcore2name.master=true kinda stuff.\n\nI'm not yet convinced the additional .properties feature is warranted. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12745028",
            "date": "2009-08-19T12:15:14+0000",
            "content": "Error prone? I don't buy that. It's the same as setting a name in a .properties file - no more error prone than that. \n\n\n\nthese properties files are separately shipped and the developer decides what are the properties. \n\nGlobal properties - yes, but you can \"namespace\" them... -Dcore1name.master=false -Dcore2name.master=true kinda stuff.\n\nis this clean? \n\nThe system properties are available across the JVM . Why do you want a system wide property for something that is only used in solrconfig/schema? There is a chance of it conflicting with other system properties too.\n\nI do not see the reason against the properties. It is more like your ant script loading external properties from a properties file. Nobody is mandating the use of it . If one needs to clean up the deployment he is welcome to use it. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12745373",
            "date": "2009-08-20T10:18:54+0000",
            "content": "If it's something we know we're going to want to do, and it's going to keep the code simpler in the long run, we might as well do it right the first time.\n\nI'll propose this. Anyway we are planing to move to a stage where we will use solr.xml for single core as well. So I shall add the configuration of the properties in the <core> tag as follows\n\n<core name=\"foo\" properties=\"conf/foo-core.properties\" ... />\n\n\n\nFor single core , let us fix a file name . So when we introduce solr.xml for single core it becomes automatically configurable  "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12745602",
            "date": "2009-08-20T20:00:36+0000",
            "content": "Along the same lines as making master/searcher determination through properties, it would be nice to be able to conditionally enable/disable, say, /update handler by some deploy-time switch.    Noble - does it make sense to consider this type of use here? "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12745678",
            "date": "2009-08-20T21:38:40+0000",
            "content": "About the features for subsituting properties file:\n\nI have run multiple Solr instances (servlets) in the same container. Yes, multicore is the better way, but we shoud not force the user to have only one Solr per Tomcat .  So, we should not force only one properties file via System.properties.\n\nI would ask that if a configuration file uses a properties file, that configuration file should have the ability to name its own properties file. For example, solrconfig.xml should have its own entry for adding properties files. But, if solrconfig.xml names a file the solr.xml should be able to override that file name. To do this, the properties files should be named. \n\nIn conf/query_server.properties:\n\nfq.size=400\n\n\nIn foo/conf/solrconfig.xml:\n\n<properties name=\"query_server\">conf/query_server.properties</properties>\n\n\nLater in solrconfig.xml:\n\n<filterCache\n  class=\"solr.FastLRUCache\"\n  size=\"${query_server.fq.size:512}\"\n  initialSize=\"512\"\n  autowarmCount=\"0\"/>\n\n\n\nThen solr.xml can override the query_servers properties file. In solr.xml:\n\n<core name=\"foo\">\n    <properties name=\"query_server\">${core}/conf/query_server_mini.properties</properties>\n</core>\n\n\n\nThis just gets worse and worse    "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12745680",
            "date": "2009-08-20T21:42:58+0000",
            "content": "About use cases for this feature:\n\nI would like to use this along with my strange baby, SOLR-1354. It would allow me to push all parameters for an RSS/ATOM feed into a separate configuration file. This way, to add an rss feed to a Solr instance requires editing a properties file and nothing else. (The larger goal is here to make it as easy as possible to make solr useful out of the box.)\n\nAnother place where properties files would be very useful is in DIH scripts. When we want to load multiple shards from the same data source, we need different code for each shard. It would be great to have one master DIH file and a different properties file for each shard. Each properties file has a unique value to define the records for that shard.\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12745799",
            "date": "2009-08-21T05:13:09+0000",
            "content": "would be nice to be able to conditionally enable/disable, say, /update handler by some deploy-time switch\n\nit is not currently possible. I recommend adding an attribute to each of the plugins \"enable as follows\n\n\n<requestHandler name=\"/upadate\" enable=\"${update_enable:true}\"/>\n\n\n\nspecifying the properties file in solrconfig is not a good option because the properties has to be loaded before loading solrconfig.xml so that the variables are replaced at load time of solrconfig\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12745942",
            "date": "2009-08-21T12:36:04+0000",
            "content": "\n\tThe properties filename is configurable from solr.xml on a per-core basis\n\tThe testcase is cleaned up\n\n "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12746746",
            "date": "2009-08-24T06:37:31+0000",
            "content": "Please let me know if anyone wants to change anything about this feature before committing this "
        },
        {
            "author": "Lance Norskog",
            "id": "comment-12747078",
            "date": "2009-08-24T21:09:45+0000",
            "content": "For future mantainability, please change:\n\n\n<core name=\"foo\" properties=\"conf/foo-core.properties\" ... />\n\n\nto:\n\n\n<core name=\"foo\">\n    <properties>conf/foo-core.properties</properties>\n</core>\n\n\n\nThis allows us to have multiple properties files later. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12747223",
            "date": "2009-08-25T05:13:21+0000",
            "content": "both schema and config are specified as attributes. That is why I kept it as attribute. DO we really need to support multiple ? \nif necessary we can \"overload\" the existing \"property\" tag instead of introducing one\n\n\n<core name=\"foo\">\n    <property file=\"conf/foo.properties\"/>\n</core>\n\n "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-12747338",
            "date": "2009-08-25T10:11:43+0000",
            "content": "Keep it as an attribute.  If/when we need, we can simply make it support a comma-separated list of files. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12747339",
            "date": "2009-08-25T10:15:48+0000",
            "content": "Keep it as an attribute. If/when we need, we can simply make it support a comma-separated list of files.\n\n+1\n\nMultiple properties is an uncommon case . As you mentioned we should be able to support it using a comma-separated values "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12747817",
            "date": "2009-08-26T07:49:26+0000",
            "content": "committed : r807914\n "
        },
        {
            "author": "Artem Russakovskii",
            "id": "comment-12758511",
            "date": "2009-09-23T00:27:37+0000",
            "content": "So, can someone comment on whether the single core setup (solrconfig.xml) supports referencing a properties file now? I'm not using multicore, like this bug's author, and after reading through the comments here, I'm still unclear on the single core solution.\n\nIdeally, solrxonfig.xml would contain a location of the properties file, which it would load prior to parsing everything else.\n\nThanks. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12758575",
            "date": "2009-09-23T04:10:40+0000",
            "content": "can someone comment on whether the single core setup (solrconfig.xml) supports referencing a properties file now\n\nyes, you can. The filename and location is fixed for single core. It should be $solr_home/conf/solrcore.properties "
        },
        {
            "author": "Artem Russakovskii",
            "id": "comment-12758985",
            "date": "2009-09-24T03:16:25+0000",
            "content": "Paul, thank you. How funny - I was using nightly build from 8/25/09 and looks like the final commit was made on 8/26/09. Doh!\n\nSo I verified $solr_home/conf/solrcore.properties as working, and it's good enough for us, but it'd be ideal if this location can be specified in solrconfig.xml, for example to be set to '$solr_home/..'. However,\n\na) I'm not sure this is supported right now\nb) I think we came to a conclusion in another ticket that there's no value $solr_home that one can refer to from within solrconfig.xml (http://www.nabble.com/Solr,-JNDI-config,-dataDir,-and-solr-home-problem-td25286277.html and SOLR-1414), although it looks like you may have fixed it - is it accessible by ${solr.core.instanceDir}  now? "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12758993",
            "date": "2009-09-24T03:35:55+0000",
            "content": "solr.home is not technically same as solr.core.instanceDir . it can be different in a multicore setup "
        },
        {
            "author": "Artem Russakovskii",
            "id": "comment-12759059",
            "date": "2009-09-24T08:02:30+0000",
            "content": "We're using single core. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775828",
            "date": "2009-11-10T15:52:12+0000",
            "content": "Bulk close for Solr 1.4 "
        }
    ]
}