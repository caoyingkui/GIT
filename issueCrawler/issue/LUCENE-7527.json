{
    "id": "LUCENE-7527",
    "title": "Facing unsafe memory access operation error while calling searcherManager.maybeReopen()",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "3.5",
        "components": [
            "core/search"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "We are getting below error while calling searcherManager.maybeReopen() method. We are using MMAP implementation to read NFS index directory mounted against 3 servers. We have a different process to update the indices and 3 other processes to read from the same index. What we believe is that this issue occurs when we call maybeReopen() method during heavy writes to the indices and MMap implementation is not able to coop with it..\n\nCaused by: java.lang.InternalError: a fault occurred in a recent unsafe memory access operation in compiled Java code\n        at java.security.AccessController.doPrivileged(Native Method)\n        at org.apache.lucene.store.MMapDirectory.cleanMapping(MMapDirectory.java:158)\n        at org.apache.lucene.store.MMapDirectory$MMapIndexInput.close(MMapDirectory.java:389)\n        at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:690)\n        at org.apache.lucene.index.SegmentInfos$FindSegmentsFile.run(SegmentInfos.java:593)\n        at org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:359)\n        at org.apache.lucene.index.SegmentInfos.readCurrentVersion(SegmentInfos.java:480)\n        at org.apache.lucene.index.DirectoryReader.isCurrent(DirectoryReader.java:901)\n        at org.apache.lucene.index.DirectoryReader.doOpenNoWriter(DirectoryReader.java:471)\n        at org.apache.lucene.index.DirectoryReader.doOpenIfChanged(DirectoryReader.java:450)\n        at org.apache.lucene.index.DirectoryReader.doOpenIfChanged(DirectoryReader.java:391)\n        at org.apache.lucene.index.IndexReader.openIfChanged(IndexReader.java:497)\n        at org.apache.lucene.search.SearcherManager.maybeReopen(SearcherManager.java:162)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15617848",
            "author": "Michael McCandless",
            "date": "2016-10-29T09:55:02+0000",
            "content": "This can happen if your application mis-uses the IndexReader lifecycle by closing an IndexReader while searches are still running.\n\nTriple check all your code to make sure you always acquire a searcher from SearcherManager and then always release it, only once, via release, and that you never directly close a searcher (just the SearcherManager once all searching is finished).\n\nThough it is odd you hit it inside cleanMapping.\n\nYou could also try switching to NIOFSDirectory ... performance may be worse in some cases, but maybe it'll throw AlreadyClosedException instead of crashing your JVM.\n\nAlso, 3.5 is really ancient at this point.  It could be you are hitting an already fixed bug. "
        },
        {
            "id": "comment-15630268",
            "author": "Jagmohan Singh",
            "date": "2016-11-02T20:06:14+0000",
            "content": "Michael thanks for replying. We have mounts in different location and NIOFS will surely degrade more. The exception is coming while i am trying to call maybeReopen() method explicitly under SearcherManager as i want to get the latest data before i could do any search. After calling  maybeReopen() we do call acquire() and then search and then release at the end of search call. "
        },
        {
            "id": "comment-15636375",
            "author": "Michael McCandless",
            "date": "2016-11-04T13:46:34+0000",
            "content": "Please, triple check absolutely all places that close or release a searcher back to SearcherManager in your application.  If any of those mess up, e.g. releasing twice, that explains this crash.\n\nYes, NIOFS will be worse performance than MMapDirectory, but if you temporarily switch to it, then you should see AlreadyClosedException instead of JVM crashes, making it easier to debug where the extra releases are happening.  Once you debug that then you can switch back to MMapDirectory. "
        }
    ]
}