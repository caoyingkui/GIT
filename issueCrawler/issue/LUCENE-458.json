{
    "id": "LUCENE-458",
    "title": "Merging may create duplicates if the JVM crashes half way through",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Duplicate",
        "status": "Resolved"
    },
    "description": "In the past, our indexing process crashed due to a Hotspot compiler bug on SMP systems (although it could happen with any bad native code.)  Everything picked up and appeared to work, but now that it's a month later I've discovered an oddity in the text index.\n\nWe have two documents which are identical in the text index.  I know we only stored it once for two reasons.  First, we store the MD5 of every document into the hash and the MD5s were the same.  Second, we store a GUID into each document which is generated uniquely for each document.  The GUID and the MD5 hash on these two documents, as well as all other fields, is exactly the same.\n\nMy conclusion is that a merge was occurring at the point the JVM crashed, which is consistent with the time the process crashed.  Is it possible that Lucene did the copy of this document to the new location, and didn't get to delete the original?\n\nIf so, I guess this issue should be prevented somehow.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2005-10-26T16:33:58+0000",
            "content": "Even in case you use this order:\n\n\topen a reader\n\tdelete the orginal document on the reader\n\tclose the reader\n\topen a writer\n\tadd the new copy of the doc on the writer\n\tclose the writer\nthings may still go wrong if the crash happens around the\ntime of closing the reader and opening the writer.\n\n\n\nThe problem is that if the deletion information does not make\nit to the operating system, there is no way to recover it.\nAlso Java does not guarantee that things make it to disk,\nthey normally do eventually, but this is out of control of the JVM.\n\nIn case you need more certainty about the deletion, you need\nto use an operating system command that forces all buffers to disk\n(for example the unix sync command) after closing\nthe reader on which the document was deleted.\nBut even then your disk may crash...\n\nRegards,\nPaul Elschot ",
            "author": "Paul Elschot",
            "id": "comment-12355924"
        },
        {
            "date": "2005-10-27T08:50:57+0000",
            "content": "I was thinking more along the lines of...\n\n1. open a reader, writer\n2. read the document\n3. write a marker marking that this document is the result of a move of another one\n4. write the document\n5. delete the original document\n6. delete the marker\n7. close the reader, writer\n\nThen later on, when the reader opens an index and finds a marker, it goes and checks the location the marker points at, and if the location is still there, it continues from step 5 again. ",
            "author": "Trejkaz",
            "id": "comment-12356029"
        },
        {
            "date": "2005-10-27T16:35:29+0000",
            "content": "I don't think that Lucene supports marking a document as in step 3.\n\nIn case the concern is that the deleted document would be temporarliy\ninvisible to searches, it is possible to keep another reader open for searching\nwhile the updates are going on, and this reader will see no changes at all.\n\nLucene does this by never changing an index segment, it only adds\ndeletion bits, and these are taken into account when segments are\nmerged to add docs or to optimize the index. Also, the deletion bits added\nby reader B are ignored by reader A when they are not present\nwhen A is opened.\nI don't know what happens when a segment has deletion bits when reader A\nis opened, and reader B that was opened later deletes more documents.\nThis situation can be avoided by only deleting documents on optimized indexes.\n\nAnyway, to see the changes after all updates: close the searching reader and\nreopen another one to search on the updated index.\nBefore opening the new reader for searching, but after closing the\nlast reader/writer that changed the index, there is an opportunity\nto sync the disk(s).\n\nRegards,\nPaul Elschot ",
            "author": "Paul Elschot",
            "id": "comment-12356051"
        },
        {
            "date": "2007-12-31T12:29:35+0000",
            "content": "The problem here apparently is that when the JVM crashed not all files are properly synced with the FS.\nThis seems to be a similar problem to LUCENE-1044.  ",
            "author": "Michael Busch",
            "id": "comment-12555092"
        }
    ]
}