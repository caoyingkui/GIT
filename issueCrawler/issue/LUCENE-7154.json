{
    "id": "LUCENE-7154",
    "title": "Add support for polygon holes to Geo3D",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "New Feature"
    },
    "description": "Real-world polygons (e.g. from ESRI) have holes in them.  We need polygon support in geo3D that works in the same way.\n\nThe proposal would be to change the GeoConvexPolygon constructor to include a number of GeoPolygon inputs, each of which would specify a hole.  Then, the GeoPolygonFactory.makeGeoPolygon() method would also need to accept a similar list of GeoPolygon hole descriptions.\n\nThis change is likely to be fairly complex because of the already tricky algorithm used to create convex polygons from non-convex ones, implemented in GeoPolygonFactory.",
    "attachments": {
        "LUCENE-7154.diff": "https://issues.apache.org/jira/secure/attachment/12796295/LUCENE-7154.diff"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15219741",
            "author": "Karl Wright",
            "date": "2016-03-31T11:03:28+0000",
            "content": "Robert Muir: Would you have an estimate of the number of holes typically seen for a single country in the ESRI data? "
        },
        {
            "id": "comment-15219780",
            "author": "Robert Muir",
            "date": "2016-03-31T11:59:17+0000",
            "content": "I'm not sure, I was just playing with these geoname shapes:\n\nhttp://download.geonames.org/export/dump/shapes_simplified_low.zip\n "
        },
        {
            "id": "comment-15219796",
            "author": "Robert Muir",
            "date": "2016-03-31T12:20:14+0000",
            "content": "Here is an indented version of the South Africa shape there. I imagine it should have a hole?\n\nhttp://home.apache.org/~rmuir/za.txt "
        },
        {
            "id": "comment-15219798",
            "author": "Robert Muir",
            "date": "2016-03-31T12:22:38+0000",
            "content": "That looks to have a ~ 46-vertex hole for lesotho to me. I think its the last array at the end of the file  "
        },
        {
            "id": "comment-15219824",
            "author": "Karl Wright",
            "date": "2016-03-31T12:42:32+0000",
            "content": "Yup, Robert Muir, thanks, I see it.\n\nGeo3D needs to split non-convex polygons into multiple convex polygons, and I'm basically trying to figure out how much work I should put into determining whether or not a given provided hole has any intersection with a given convex polygon.  That's question #1.  I could use all holes for each convex polygon, of course, and that's what I'll probably do for starters.\n\nThe other issue I've got is this business of clockwise vs counterclockwise ordering being meaningful.  For Geo3D I just need a point that I know is inside or outside.  The internal API asks the user to specify the index of a point that is convex (outside the two adjoining points if you connected them).  I haven't yet found an algorithm that maps to clockwise/counterclockwise points, though.  How are you handling this elsewhere?\n\n "
        },
        {
            "id": "comment-15219841",
            "author": "Robert Muir",
            "date": "2016-03-31T13:03:15+0000",
            "content": "\nI haven't yet found an algorithm that maps to clockwise/counterclockwise points, though. How are you handling this elsewhere?\n\nI think some algorithms such as area computation care about this? But we don't need that. We only have 3 operations:\n\n\tcontains(latitude, longitude)\n\tcontains(minLatitude, maxLatitude, minLongitude, maxLongitude)\n\tcrosses(minLatitude, maxLatitude, minLongitude, maxLongitude)\n\n\n\nCurrently these work based on line crossings algorithm that is fine with things being either clockwise or counterclockwise. "
        },
        {
            "id": "comment-15219847",
            "author": "Karl Wright",
            "date": "2016-03-31T13:11:45+0000",
            "content": "This is the initial patch, without tests.\nIt's brute force when it comes to splitting up holes during breakup of non-convex polygons into convex polygons; it just includes all of them with each convex polygon created.  That's not ideal because it misrepresents intersections etc., but it should generally work. "
        },
        {
            "id": "comment-15219849",
            "author": "Robert Muir",
            "date": "2016-03-31T13:14:13+0000",
            "content": "Cool, thanks for hacking this together! I apologize for leaving out Geo3d from my patch but I don't yet have a good understanding  "
        },
        {
            "id": "comment-15219888",
            "author": "Karl Wright",
            "date": "2016-03-31T13:53:22+0000",
            "content": "Wouldn't \"contains\" have a different result if the sense of the polygon were different?\n\nIf you draw a polygon on a sphere (or an ellipsoid), there are two areas you might be specifying: one on one side of the shape you drew, and another on the other side.\n "
        },
        {
            "id": "comment-15219897",
            "author": "Robert Muir",
            "date": "2016-03-31T14:01:13+0000",
            "content": "\nWouldn't \"contains\" have a different result if the sense of the polygon were different?\n\nI don't think so. Note that our \"contains\" and \"crosses\" behave like java's Shape contains/intersects apis: where they can conservatively return false, and true respectively (its safe, just means things are potentially slower/less efficient). So e.g. for our crosses we don't try to optimize rects fully within holes (someone could add that later). For the contains, see the logic below. The only part i added was the stuff within the \"game over\" block, essentially i did the \"minimal effort needed to correctly support holes\":\n\n\n  /**\n   * Computes whether a rectangle is within a polygon (shared boundaries not allowed)\n   */\n  public boolean contains(double minLat, double maxLat, double minLon, double maxLon) {\n    // check if rectangle crosses poly (to handle concave/pacman polys), then check that all 4 corners\n    // are contained\n    boolean contains = crosses(minLat, maxLat, minLon, maxLon) == false &&\n                       contains(minLat, minLon) &&\n                       contains(minLat, maxLon) &&\n                       contains(maxLat, maxLon) && \n                       contains(maxLat, minLon);\n    \n    if (contains) {\n      // if we cross any hole, game over\n      for (Polygon hole : holes) {\n        if (hole.crosses(minLat, maxLat, minLon, maxLon)) {\n          return false;\n        }\n      }\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n "
        },
        {
            "id": "comment-15219913",
            "author": "Robert Muir",
            "date": "2016-03-31T14:15:38+0000",
            "content": "And just pasting that code makes me think its buggy \n\nGeo termsenum has:\n\n\n    @Override\n    protected boolean cellIntersectsShape(final double minLat, final double maxLat, final double minLon, final double maxLon) {\n      return cellContains(minLat, maxLat, minLon, maxLon) || cellWithin(minLat, maxLat, minLon, maxLon)\n        || cellCrosses(minLat, maxLat, minLon, maxLon);\n    }\n\n\n\nJust shows patch needs some more tests... "
        },
        {
            "id": "comment-15220389",
            "author": "Karl Wright",
            "date": "2016-03-31T18:25:31+0000",
            "content": "I have an algorithm now for using ordering to determine the sense of the polygon.  But I'll create another ticket for that. "
        },
        {
            "id": "comment-15221774",
            "author": "Nicholas Knize",
            "date": "2016-04-01T14:36:59+0000",
            "content": "If we're heading down the path of supporting OGC SFA and ISO 19107 for polygons I can add the ES code I use to do this. It's on my list to refactor from ES anyway but haven't put it here because of the \"we're a search engine API\". I was planning to refactor to S4J or JTS. Since that's going to slightly change with a refactor to core it makes sense to add/grow the necessary support here? "
        },
        {
            "id": "comment-15221783",
            "author": "Nicholas Knize",
            "date": "2016-04-01T14:41:39+0000",
            "content": "I should add: the code validates the proper ordering (right-hand rule for shell, left-hand for holes) and splits dateline-crossing polys into two shapes so dateline crossing polys can be rewritten as a Boolean.OR of two polys.\n\nFor XYZ coordinates I'm not so sure this will be necessary for Geo3d? But you tell me, Karl. "
        },
        {
            "id": "comment-15221807",
            "author": "Karl Wright",
            "date": "2016-04-01T15:00:32+0000",
            "content": "Geo3D has, of course, a whole different way of doing this, with its own problems. I'm currently working on the issues I've found here under the LUCENE-7157 ticket.  I'm making okay progress but not anywhere near done yet.\n\nA general algorithm for detecting clockwise vs. counterclockwise is one area that is a pain for general polygons; I can detect this but ONLY if the proper \"pole\" point is calculable. I know when I've got a good one, but I currently can only pick one at random until I find one that qualifies.  Anyway, please carry on the discussion in LUCENE-7157. "
        }
    ]
}