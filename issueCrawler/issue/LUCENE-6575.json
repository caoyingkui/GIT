{
    "id": "LUCENE-6575",
    "title": "Improve API of PhraseQuery.Builder",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "From LUCENE-6531\nIn current PhraseQuery.Builder API. User must retype field again and again :\n\nPhraseQuery.Builder builder = new PhraseQuery.Builder();\nbuilder.add(new Term(\"lyrics\", \"when\"), 1);\nbuilder.add(new Term(\"lyrics\", \"believe\"), 3);\n\n\nCleaner API :\n\nPhraseQuery.Builder builder = new PhraseQuery.Builder(\"lyrics\");\nbuilder.add(\"when\", 1);\nbuilder.add(\"believe\", 3);",
    "attachments": {
        "LUCENE-6575.patch": "https://issues.apache.org/jira/secure/attachment/12739877/LUCENE-6575.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14588178",
            "author": "Cao Manh Dat",
            "date": "2015-06-16T15:15:57+0000",
            "content": "Here is patch for this issue. "
        },
        {
            "id": "comment-14588260",
            "author": "Cao Manh Dat",
            "date": "2015-06-16T15:50:59+0000",
            "content": "Change javadocs. "
        },
        {
            "id": "comment-14589423",
            "author": "Adrien Grand",
            "date": "2015-06-17T07:35:45+0000",
            "content": "Thanks for the patch. I like providing providing the field in the constructor and then adding terms better. I have some questions:\n\n\tcould you change the setters back to void so that they can't be chained, see https://issues.apache.org/jira/browse/LUCENE-6531?focusedCommentId=14577421&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14577421\n\tI don't like the two Builder(Term[]) and Builder(Term[], int[]) constructors. In my opinion they defeat the point of the builder which is to build the query step by step instead of all at once, can we remove them? They seem to be used only in very few places, could we fix the consumers of these constructors to use the builder API instead?\n\n "
        },
        {
            "id": "comment-14589441",
            "author": "Cao Manh Dat",
            "date": "2015-06-17T07:51:59+0000",
            "content": "Adrien Grand Thanks you for you comment. \n\n\tI agree that chaining in builder make it quite hard to read. I will fix that soon.\n\tAbout two new constructors of Builder. Currently, PhraseQuery act as BooleanQuery some times (it rely on terms.length() == 0 to rewrite to BooleanQuery). So consumer will not have to care about their terms[] is empty or not, they simply deliver it to PhraseQuery. If we remove these constructors of Builder, consumer will have to check it terms[] size and do the same thing. Is it approciate?\n\n "
        },
        {
            "id": "comment-14589446",
            "author": "Adrien Grand",
            "date": "2015-06-17T07:58:09+0000",
            "content": "If we remove these constructors of Builder, consumer will have to check it terms[] size and do the same thing. Is it approciate?\n\nI think that's fine. "
        },
        {
            "id": "comment-14589464",
            "author": "Uwe Schindler",
            "date": "2015-06-17T08:13:46+0000",
            "content": "could you change the setters back to void so that they can't be chained, see https://issues.apache.org/jira/browse/LUCENE-6531?focusedCommentId=14577421&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14577421\n\nI disagree with this. You should still give users who want to use call chaining to do this. If you don't want it you can use those methods like if they were void.\n\nFrom my perspective, I have the problem that I cannot really read those chains of localVar.setXXX() because of the redundancy. Others see this different. But by making them to return this instead of void, you have both options. "
        },
        {
            "id": "comment-14589474",
            "author": "Adrien Grand",
            "date": "2015-06-17T08:24:20+0000",
            "content": "I don't really have an opinion about whether allowing chaining should be allowed or not. Robert expressed concerns about chaining in LUCENE-6531 and I didn't mind so I just made all setters void in the patch on LUCENE-6531. And since Cao changed the setters to return \"this\" in his patch, I pointed him to this previous discussion.\n\nWe are not there yet, but please let's not put this chaining issue in the way of making our queries immutable. "
        },
        {
            "id": "comment-14589490",
            "author": "Uwe Schindler",
            "date": "2015-06-17T08:37:47+0000",
            "content": "We are not there yet, but please let's not put this chaining issue in the way of making our queries immutable.\n\nThis issue was about improving the API, so it is relevant here. I think making phrase queries immutable is another thing and was discussed in LUCENE-6531.\n\nAnd since Cao changed the setters to return \"this\" in his patch, I pointed him to this previous discussion.\n\nRobert's main problem was not the chaining, he disagreed with the \"fluent\" method names (Java 8+ streams API is using them everywhere now)!\n\nBut just returning \"this\" from a setter is in my opinion a valid simplification for users of the API. It mainly works around the problem of not having a \"with\" operator in java, like Javascript has: \n\n\nwith (object) {\n setA();\n setB();\n}\n\n\n\nOn the Java side, recent versions of Eclipse perfectly detect & ident those chaining constructs (because Java 8 requires them to do this, otherwise code gets indeed unreadable).\n\nI also added builder APIs in recently: CustomAnalyzer.builder() (see my talk @ buzzwords; http://lucene.apache.org/core/5_2_1/analyzers-common/org/apache/lucene/analysis/custom/CustomAnalyzer.html) and Robert did not complain, because the names were according to fluent API standard and the formatting in the tests was also fine  "
        },
        {
            "id": "comment-14589535",
            "author": "Cao Manh Dat",
            "date": "2015-06-17T09:30:54+0000",
            "content": "So should we keep chaining or not? "
        },
        {
            "id": "comment-14589539",
            "author": "Adrien Grand",
            "date": "2015-06-17T09:32:34+0000",
            "content": "I suggest that we wait for Robert Muir's opinion. "
        },
        {
            "id": "comment-14589616",
            "author": "Robert Muir",
            "date": "2015-06-17T10:48:44+0000",
            "content": "Uwe said it right. Look at his patch: https://issues.apache.org/jira/secure/attachment/12692229/LUCENE-6177.patch\n\nUwe's tests are like this, each thing on its own line, and readable:\n\n\nStringBuilder sb = new StringBuilder()\n    .append(xxx)\n    .append(yyy);\n\n\n\nthis is also fine:\n\n\nStringBuilder sb = new StringBuilder();\nsb.append(xxx);\nsb.append(yyy);\n\n\n\non the other hand this is terrible:\n\nStringBuilder sb = new StringBuilder().append(xxx).append(yyy)...\n\n\n\nAs far as concerns about method names, same situation there:\nPlease keep verbs like get and set, it may seem old fashioned but it makes code readable. It gives important hints about what the method is doing. You know instantly from the name a little bit more about what is happening without having to read source code. "
        },
        {
            "id": "comment-14589619",
            "author": "Adrien Grand",
            "date": "2015-06-17T10:51:25+0000",
            "content": "Thanks Robert, then let's keep the return statements like they are in Cao's patch. "
        },
        {
            "id": "comment-14589627",
            "author": "Cao Manh Dat",
            "date": "2015-06-17T11:04:44+0000",
            "content": "Thanks Robert,Andrien and Uwe. I will submit a patch in couple of hours. "
        },
        {
            "id": "comment-14589648",
            "author": "Uwe Schindler",
            "date": "2015-06-17T11:28:40+0000",
            "content": "Thanks Robert for the confirmation! This is how I understood your comment. I agree with having a clear method name. I am fine with pure builders to have \"verbs\" as names, but as soon as it is a complex object which also have getters and other state changing stuff, be explicit. "
        },
        {
            "id": "comment-14589847",
            "author": "Cao Manh Dat",
            "date": "2015-06-17T14:28:00+0000",
            "content": "Here is the patch based on suggestions. Because I found a lot of place do the same thing below\n\nPhraseQuery pq = (PhraseQuery) query;\nTerm[] terms = pq.getTerms();\nint[] positions = pq.getPositions();\nPhraseQuery.Builder builder = new PhraseQuery.Builder();\nfor (int i = 0; i < terms.length; ++i) {\n  builder.add(terms[i], positions[i]);\n}\nbuilder.setSlop(slop);\nquery = builder.build();\nquery.setBoost(pq.getBoost());\n\n\nSo i added a new Builder(PhraseQuery pq) constructor to reduce repeated works. "
        },
        {
            "id": "comment-14591401",
            "author": "Adrien Grand",
            "date": "2015-06-18T07:31:00+0000",
            "content": "Thanks for the new patch.\n\nPhraseQuery.Builder(PhraseQuery) still feels to me like it doesn't belong to the PhraseQuery API. I was just looking at the call sites and noticed that this method was only used by query parsers, so maybe you could remove this PhraseQuery.Builder constructor and make it a utility method either in the QueryBuilder class or in some utility class in the lucene/queryparser module?\n\nI notice that you change the constructors of BooleanQuery to private so can we do same thing with PhraseQuery in LUCENE-6575? We can remove a lot of code there \n\n(Comment from LUCENE-6570) Agreed, I had added these constructors because I was a bit frustrated that creating very simple phrase queries was so hard, but with your changes it should be easy now so +1 on removing the \"sugar\" public constructors from PhraseQuery!\n\nAlso can you run \"ant precommit\" on your patch, I suspect it will complain about some missing javadocs. "
        },
        {
            "id": "comment-14591457",
            "author": "Cao Manh Dat",
            "date": "2015-06-18T08:15:32+0000",
            "content": "Thanks Adrien Grand, It is a great idea. I will work on this and submit a new patch asap. "
        },
        {
            "id": "comment-14591830",
            "author": "Cao Manh Dat",
            "date": "2015-06-18T14:01:59+0000",
            "content": "Adrien Grand : I think add a new method in PhraseQuery is appropriate to exclude duplication.\n\n/**\n* Clone PhraseQuery with different slop\n*/\npublic PhraseQuery clone(int slop){\n...\n}\n\n "
        },
        {
            "id": "comment-14591838",
            "author": "Adrien Grand",
            "date": "2015-06-18T14:07:24+0000",
            "content": "I don't think we should add this method to PhraseQuery. If only query parsers need to be able to update the slop of an existing PhraseQuery, we should put this utility method somewhere which is specific to query parsers. In general we try to have as little surface as we can in our public APIs such as queries, Document, IndexSearcher, etc. "
        },
        {
            "id": "comment-14591869",
            "author": "Uwe Schindler",
            "date": "2015-06-18T14:22:10+0000",
            "content": "-1\n\nWe already have the QueryBuilders class which takes Analyzer, so it could also take a slop. I also don't really like how QueryParsers set the slop. Maybe this should be part of the API that creates the PhraseQuery... "
        },
        {
            "id": "comment-14591873",
            "author": "Cao Manh Dat",
            "date": "2015-06-18T14:24:10+0000",
            "content": "It quite hard to find such place for this method. Because it appear in several places from QueryParser, StandardQueryParser to QueryParser of Solr.\nI agree that we should keep the public APIs as small as possible. But we move slop to Builder to make PhraseQuery immutable. So it quite appropriate to have a new method to clone PhraseQuery with different slop. "
        },
        {
            "id": "comment-14592063",
            "author": "Adrien Grand",
            "date": "2015-06-18T16:31:37+0000",
            "content": "I'm not sure it is. Like Uwe said, the way that query parsers set the slop is not ideal: they build the query first and only worry about setting the slop afterwards. It's ok for now but we shouldn't make this implementation detail of query parsers have an impact on PhraseQuery's API. Since this is only used by query parsers, maybe we could have a static utility method on eg. QueryBuilder which constructs a PhraseQuery.Builder from a PhraseQuery with the same configuration? QueryBuilder is supposed to be the base class for query parsers. "
        },
        {
            "id": "comment-14592091",
            "author": "Cao Manh Dat",
            "date": "2015-06-18T16:53:14+0000",
            "content": "I agree that we should change implementation of QueryParser in the future. For now, the duplication in QueryParsers is recreate PhraseQuery with new slop. So I think it's a necessary and nicely feature of immutable PhraseQuery instance! "
        },
        {
            "id": "comment-14592116",
            "author": "Cao Manh Dat",
            "date": "2015-06-18T17:08:26+0000",
            "content": "Here is my modification. Thanks Adrien Grand for your comments. "
        },
        {
            "id": "comment-14592412",
            "author": "Adrien Grand",
            "date": "2015-06-18T20:01:57+0000",
            "content": "Thanks for removing the sugar constructors, I think it is much better now.\n\nHowever I still disagree about having this clone(int slop) method on PhraseQuery: PhraseQuery is such an important part of our API that I don't think we should add bloat to it just to make query parsers more happy. "
        },
        {
            "id": "comment-14592841",
            "author": "Cao Manh Dat",
            "date": "2015-06-19T01:25:28+0000",
            "content": "It quite clear now. I will move the method to QueryBuilder.and think about what we can do to make QueryParser clearer with new Builders afterwards. Thanks Adrien Grand. "
        },
        {
            "id": "comment-14592876",
            "author": "Robert Muir",
            "date": "2015-06-19T02:00:24+0000",
            "content": "Querybuilder is not a dumping ground for wierd apis or helper methods. I dont see the issue, if some pa e sers are broken, fix their brokenness. "
        },
        {
            "id": "comment-14594384",
            "author": "Cao Manh Dat",
            "date": "2015-06-20T03:57:40+0000",
            "content": "From idea of Robert I will leave the duplications and open another issue to remove duplications from QueryParsers. "
        },
        {
            "id": "comment-14594417",
            "author": "Cao Manh Dat",
            "date": "2015-06-20T05:50:30+0000",
            "content": "Here is the patch. "
        },
        {
            "id": "comment-14594450",
            "author": "Uwe Schindler",
            "date": "2015-06-20T07:11:40+0000",
            "content": "I am not sure if we should consider adding a static method PhraseQuery#builder(), which would make building less verbose? For the CustomAnalyzer I did this, but people generally have different optinions. - same applies for BooleanQuery#builder(). "
        },
        {
            "id": "comment-14595565",
            "author": "Adrien Grand",
            "date": "2015-06-22T09:22:29+0000",
            "content": "I am good with both options (new ClassName.Builder() vs. ClassName.builder()). So given CustomAnalyzer already uses the static method approach with a pkg-private constructor, I'm +1 on doing the same with queries for consistency. "
        }
    ]
}