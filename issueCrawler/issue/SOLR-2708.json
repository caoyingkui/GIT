{
    "id": "SOLR-2708",
    "title": "Allow customizable bean mapping for QueryResponse.getBeans(..)",
    "details": {
        "affect_versions": "1.4,                                            3.1",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "The mechanism for getting beans is rather limited - only classes @Field-annotated fields.\n\nImaging the following subprojects:\n\n\tcommon\n\tsearch\n\n\n\nAnd you want to reuse a class from common as a result from a solr search. You should either duplicate the structure or make common depend on solrj. Neither are desirable.\n\nSo, my suggestion:\n\n\tintroduce a pluggable mechanism for bean resolution. Currently it is impossible - it uses private methods and private inner classes. (This will be useful for custom conversions, because the existing one fails in some cases where BeanUtils.copyProperties works.)\n\tallow externalized (xml) configuration\n\tallow detecting all fields, annotated or not (off by default)",
    "attachments": {
        "SOLR-2708.patch": "https://issues.apache.org/jira/secure/attachment/12490521/SOLR-2708.patch",
        "SOLR-2708-beanProperty-valueBinder.patch": "https://issues.apache.org/jira/secure/attachment/12491082/SOLR-2708-beanProperty-valueBinder.patch",
        "SOLR-2708-beanProperty.patch": "https://issues.apache.org/jira/secure/attachment/12491038/SOLR-2708-beanProperty.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Chris Male",
            "id": "comment-13083897",
            "date": "2011-08-12T03:30:23+0000",
            "content": "Hi,\n\nAs suggested in SOLR-2446, I think a good first step is to provide an abstraction for DocumentObjectBinder (DOB) so people can provide their own implementations.  We can then look further into how DOB works.\n\n\nAnd you want to reuse a class from common as a result from a solr search. You should either duplicate the structure or make common depend on solrj. Neither are desirable.\n\nI've bumped into this problem many times myself.  Much like with JPA annotations though, the SolrJ annotations convey some metadata about the bean properties (especially if we expand the annotations supported).  So for me ideally it'd be great to be able to have those annotations still in, without needing the full solrj dependency.  Thats probably something we can look into longer term.\n\n\nintroduce a pluggable mechanism for bean resolution. Currently it is impossible - it uses private methods and private inner classes. (This will be useful for custom conversions, because the existing one fails in some cases where BeanUtils.copyProperties works.)\n\nWould simply making the API extensible by moving some of the logic to template methods, be sufficient?\n\n\nallow externalized (xml) configuration\n\nWith the simple support for beans we have today, I feel this might be introducing a lot of complexity for little gain.  If we eventually support composite / embedded beans, this may be useful, but then I think it would exist as another implementation of the DOB abstraction.\n\n\nallow detecting all fields, annotated or not (off by default)\n\nSeems reasonable.  Perhaps its worth while having an extension point where fields are checked to see if they are properties to use. "
        },
        {
            "author": "Bozhidar Bozhanov",
            "id": "comment-13083957",
            "date": "2011-08-12T05:55:31+0000",
            "content": "Yes, making the API extensible would be sufficient.\n\nAs for the xml and the \"all fields\" option - both of them can be implemented as extensions (when the API becomes extensible). Solrj can provide the \"all fields\" extension, and omit the xml one - if someone needs it, it will be trivial to write. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13085636",
            "date": "2011-08-16T11:12:45+0000",
            "content": "First step, preliminary cleanup of the codebase so I can see whats going on. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13086154",
            "date": "2011-08-17T05:46:37+0000",
            "content": "Committed revision 1158525.\n\nI'm now going to work on making things more extensible. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13086178",
            "date": "2011-08-17T07:24:31+0000",
            "content": "Another patch doing more cleanup, particularly in the tests.\n\nI'm starting to get an idea of whats needed here. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13086880",
            "date": "2011-08-18T08:27:13+0000",
            "content": "Cleaning up further. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13086882",
            "date": "2011-08-18T08:29:41+0000",
            "content": "Committed revision 1159083. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13087235",
            "date": "2011-08-18T20:02:12+0000",
            "content": "Nice. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13088150",
            "date": "2011-08-20T07:15:48+0000",
            "content": "Patch which adds the notion of a BeanProperty which handles the reading and writing of a bean's property.  \n\nThis cleans up the code in DocField while also allowing extensions to the accessing of a properties values.\n\nAlso adds two extendable methods, isBeanProperty(Method) and isBeanProperty(Field), which by default implement the current behavior, but allow extensions to what fields / methods are of interest (such as choosing all fields). "
        },
        {
            "author": "Chris Male",
            "id": "comment-13088322",
            "date": "2011-08-21T06:14:53+0000",
            "content": "New patch with big changes:\n\n\n\tIntroduces the idea of ValueBinder, ValueReader, ValueWriter and ValueBinderFactory.  These decouple the logic of reading and writing values for different property types.\n\tMoves most of the type parsing logic into DefaultValueBinderFactory which provides an extensible API if people want to change how certain types are handled.\n\tProvides implementations for ValueReader and ValueWriter which emulate the current behavior.\n\tCleans out DocField so it uses ValueBinder.\n\tDocumentation is improved\n\tDrops bizarre handling of byte[] and ByteBuffer.  I'll document this change but it isn't actually documented anywhere that its even supported now.  Its possible to add this back in through the extension points.\n\n\n\nIt'd be great if someone could review this.  I'm looking to commit it sometime this coming week. "
        },
        {
            "author": "Erik",
            "id": "comment-13208416",
            "date": "2012-02-15T12:28:06+0000",
            "content": "This patch would solve my current problem. \nI just checked out the dev trunk - any chance that it will make it into the trunk soon? "
        },
        {
            "author": "Chris Male",
            "id": "comment-13208418",
            "date": "2012-02-15T12:31:05+0000",
            "content": "I really need to come back to this and simplify it more, as I fear I've made things more complex.  What problem are you having that needs solving? "
        },
        {
            "author": "Erik",
            "id": "comment-13208439",
            "date": "2012-02-15T12:43:35+0000",
            "content": "I want to define externally how a @Field annotated attribute is resolved to a value.\nBasically, I need to serialize a composite structure. \nAs Solr handles only primitive types, my idea is to handle complex types by transforming them into (for my use case) appropriate primitive types.\n\n@Field\nprivate List<MyComplexType> list; // would result in a string like \"MyComplexType_Value1 MyComplexType_Value2 MyComplexType_Value3\" "
        },
        {
            "author": "Chris Male",
            "id": "comment-13238069",
            "date": "2012-03-26T02:45:13+0000",
            "content": "Updated patch.\n\nThis patch really changes how DocumentObjectBinder works, trying to make it more OO and extendable.\n\nMajor changes included:\n\n\tExtendedType notion which isolates much of the messy dealing with reflection stuff\n\tDocumentValue which provides an extensible and OO driven way of reading and writing values\n\tBeanProperty which abstracts field and method property access\n\n\n\nEmbedded property support is included.\n\nSome undocumented hacks have also been removed. "
        }
    ]
}