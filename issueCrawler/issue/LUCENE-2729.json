{
    "id": "LUCENE-2729",
    "title": "Index corruption after 'read past EOF' under heavy update load and snapshot export",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "3.0.1,                                            3.0.2",
        "resolution": "Invalid",
        "status": "Resolved"
    },
    "description": "We have a system running lucene and zoie. We use lucene as a content store for a CMS/DAM system. We use the hot-backup feature of zoie to make scheduled backups of the index. This works fine for small indexes and when there are not a lot of changes to the index when the backup is made.\n\nOn large indexes (about 5 GB to 19 GB), when a backup is made while the index is being changed a lot (lots of document additions and/or deletions), we almost always get a 'read past EOF' at some point, followed by lots of 'Lock obtain timed out'.\nAt that point we get lots of 0 kb files in the index, data gets lots, and the index is unusable.\n\nWhen we stop our server, remove the 0kb files and restart our server, the index is operational again, but data has been lost.\n\nI'm not sure if this is a zoie or a lucene issue, so i'm posting it to both. Hopefully someone has some ideas where to look to fix this.\n\n\nSome more details...\n\nStack trace of the read past EOF and following Lock obtain timed out:\n\n\n78307 [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@31ca5085] \n    ERROR proj.zoie.impl.indexing.internal.BaseSearchIndex - read past EOF\njava.io.IOException: read past EOF\n    at org.apache.lucene.store.BufferedIndexInput.refill(BufferedIndexInput.java:154)\n    at org.apache.lucene.store.BufferedIndexInput.readByte(BufferedIndexInput.java:39)\n    at org.apache.lucene.store.ChecksumIndexInput.readByte(ChecksumIndexInput.java:37)\n    at org.apache.lucene.store.IndexInput.readInt(IndexInput.java:69)\n    at org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:245)\n    at org.apache.lucene.index.IndexFileDeleter.<init>(IndexFileDeleter.java:166)\n    at org.apache.lucene.index.DirectoryReader.doCommit(DirectoryReader.java:725)\n    at org.apache.lucene.index.IndexReader.commit(IndexReader.java:987)\n    at org.apache.lucene.index.IndexReader.commit(IndexReader.java:973)\n    at org.apache.lucene.index.IndexReader.decRef(IndexReader.java:162)\n    at org.apache.lucene.index.IndexReader.close(IndexReader.java:1003)\n    at proj.zoie.impl.indexing.internal.BaseSearchIndex.deleteDocs(BaseSearchIndex.java:203)\n    at proj.zoie.impl.indexing.internal.BaseSearchIndex.loadFromIndex(BaseSearchIndex.java:223)\n    at proj.zoie.impl.indexing.internal.LuceneIndexDataLoader.loadFromIndex(LuceneIndexDataLoader.java:153)\n    at proj.zoie.impl.indexing.internal.DiskLuceneIndexDataLoader.loadFromIndex(DiskLuceneIndexDataLoader.java:134)\n    at proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader.processBatch(RealtimeIndexDataLoader.java:171)\n    at proj.zoie.impl.indexing.internal.BatchedIndexDataLoader$LoaderThread.run(BatchedIndexDataLoader.java:373)\n579336 [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@31ca5085] \n    ERROR proj.zoie.impl.indexing.internal.LuceneIndexDataLoader - \n    Problem copying segments: Lock obtain timed out: \n    org.apache.lucene.store.SingleInstanceLock@5ad0b895: write.lock\norg.apache.lucene.store.LockObtainFailedException: Lock obtain timed out: \n    org.apache.lucene.store.SingleInstanceLock@5ad0b895: write.lock\n    at org.apache.lucene.store.Lock.obtain(Lock.java:84)\n    at org.apache.lucene.index.IndexWriter.init(IndexWriter.java:1060)\n    at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:957)\n    at proj.zoie.impl.indexing.internal.DiskSearchIndex.openIndexWriter(DiskSearchIndex.java:176)\n    at proj.zoie.impl.indexing.internal.BaseSearchIndex.loadFromIndex(BaseSearchIndex.java:228)\n    at proj.zoie.impl.indexing.internal.LuceneIndexDataLoader.loadFromIndex(LuceneIndexDataLoader.java:153)\n    at proj.zoie.impl.indexing.internal.DiskLuceneIndexDataLoader.loadFromIndex(DiskLuceneIndexDataLoader.java:134)\n    at proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader.processBatch(RealtimeIndexDataLoader.java:171)\n    at proj.zoie.impl.indexing.internal.BatchedIndexDataLoader$LoaderThread.run(BatchedIndexDataLoader.java:373)\n\n\n\nWe get exactly the same behavour on both OS X and on Windows. On both zoie is using a SimpleFSDirectory.\nWe also use a SingleInstanceLockFactory (since our process is the only one working with the index), but we get the same behaviour with a NativeFSLock.\n\nThe snapshot backup is being made by calling:\n\nproj.zoie.impl.indexing.ZoieSystem.exportSnapshot(WritableByteChannel)\n\nSame issue in zoie JIRA:\n\nhttp://snaprojects.jira.com/browse/ZOIE-51",
    "attachments": {
        "eof-extra-logging-4.log.zip": "https://issues.apache.org/jira/secure/attachment/12459708/eof-extra-logging-4.log.zip",
        "LUCENE-2729-test1.patch": "https://issues.apache.org/jira/secure/attachment/12459152/LUCENE-2729-test1.patch",
        "2010-11-02 IndexWriter infoStream log.zip": "https://issues.apache.org/jira/secure/attachment/12458645/2010-11-02%20IndexWriter%20infoStream%20log.zip",
        "backup_force_failure2.log.zip": "https://issues.apache.org/jira/secure/attachment/12459353/backup_force_failure2.log.zip",
        "eof-extra-logging-4-analysis.txt": "https://issues.apache.org/jira/secure/attachment/12459707/eof-extra-logging-4-analysis.txt",
        "read-past-eof-debugging.zip": "https://issues.apache.org/jira/secure/attachment/12460271/read-past-eof-debugging.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-10-29T17:23:57+0000",
            "content": "Post a listing of the index files with their lengths, ie, ls -la.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12926360"
        },
        {
            "date": "2010-11-01T08:03:35+0000",
            "content": "\njteb:assetIndex jteb$ ls -la\ntotal 41550832\ndrwxr-xr-x  2 jteb  jteb        4862  1 nov 08:52 .\ndrwxr-xr-x  4 jteb  jteb         238 29 okt 14:10 ..\n-rw-r--r--@ 1 jteb  jteb       21508  1 nov 08:52 .DS_Store\n-rw-r--r--  1 jteb  jteb   969134416 18 okt 16:41 _2q.fdt\n-rw-r--r--  1 jteb  jteb       36652 18 okt 16:41 _2q.fdx\n-rw-r--r--  1 jteb  jteb         276 18 okt 16:41 _2q.fnm\n-rw-r--r--  1 jteb  jteb     4685726 18 okt 16:41 _2q.frq\n-rw-r--r--  1 jteb  jteb        9166 18 okt 16:41 _2q.nrm\n-rw-r--r--  1 jteb  jteb   393230403 18 okt 16:42 _2q.prx\n-rw-r--r--  1 jteb  jteb        7447 18 okt 16:42 _2q.tii\n-rw-r--r--  1 jteb  jteb      746299 18 okt 16:42 _2q.tis\n-rw-r--r--  1 jteb  jteb        8394 18 okt 16:42 _2q.tvd\n-rw-r--r--  1 jteb  jteb   599185081 18 okt 16:42 _2q.tvf\n-rw-r--r--  1 jteb  jteb       73300 18 okt 16:42 _2q.tvx\n-rw-r--r--  1 jteb  jteb  1595882722 18 okt 16:45 _3u.fdt\n-rw-r--r--  1 jteb  jteb       63692 18 okt 16:45 _3u.fdx\n-rw-r--r--  1 jteb  jteb         330 18 okt 16:45 _3u.fnm\n-rw-r--r--  1 jteb  jteb     8001869 18 okt 16:45 _3u.frq\n-rw-r--r--  1 jteb  jteb       15926 18 okt 16:45 _3u.nrm\n-rw-r--r--  1 jteb  jteb   647374863 18 okt 16:45 _3u.prx\n-rw-r--r--  1 jteb  jteb       11319 18 okt 16:45 _3u.tii\n-rw-r--r--  1 jteb  jteb     1168399 18 okt 16:45 _3u.tis\n-rw-r--r--  1 jteb  jteb       14209 18 okt 16:45 _3u.tvd\n-rw-r--r--  1 jteb  jteb   986370136 18 okt 16:46 _3u.tvf\n-rw-r--r--  1 jteb  jteb      127380 18 okt 16:46 _3u.tvx\n-rw-r--r--  1 jteb  jteb  2691565961 18 okt 16:49 _4c.fdt\n-rw-r--r--  1 jteb  jteb       39572 18 okt 16:49 _4c.fdx\n-rw-r--r--  1 jteb  jteb         276 18 okt 16:49 _4c.fnm\n-rw-r--r--  1 jteb  jteb    18724620 18 okt 16:49 _4c.frq\n-rw-r--r--  1 jteb  jteb        9896 18 okt 16:49 _4c.nrm\n-rw-r--r--  1 jteb  jteb   590255960 18 okt 16:50 _4c.prx\n-rw-r--r--  1 jteb  jteb      141243 18 okt 16:50 _4c.tii\n-rw-r--r--  1 jteb  jteb    12185869 18 okt 16:50 _4c.tis\n-rw-r--r--  1 jteb  jteb        9894 18 okt 16:50 _4c.tvd\n-rw-r--r--  1 jteb  jteb   932649779 18 okt 16:51 _4c.tvf\n-rw-r--r--  1 jteb  jteb       79140 18 okt 16:51 _4c.tvx\n-rw-r--r--  1 jteb  jteb  2398908136 18 okt 16:52 _4d.fdt\n-rw-r--r--  1 jteb  jteb         548 18 okt 16:52 _4d.fdx\n-rw-r--r--  1 jteb  jteb         354 18 okt 16:52 _4d.fnm\n-rw-r--r--  1 jteb  jteb    24581614 18 okt 16:52 _4d.frq\n-rw-r--r--  1 jteb  jteb         140 18 okt 16:52 _4d.nrm\n-rw-r--r--  1 jteb  jteb   158243133 18 okt 16:52 _4d.prx\n-rw-r--r--  1 jteb  jteb      141948 18 okt 16:52 _4d.tii\n-rw-r--r--  1 jteb  jteb    12259425 18 okt 16:52 _4d.tis\n-rw-r--r--  1 jteb  jteb         140 18 okt 16:52 _4d.tvd\n-rw-r--r--  1 jteb  jteb   303769970 18 okt 16:53 _4d.tvf\n-rw-r--r--  1 jteb  jteb        1092 18 okt 16:53 _4d.tvx\n-rw-r--r--  1 jteb  jteb  4118409126 29 okt 16:26 _6g.fdt\n-rw-r--r--  1 jteb  jteb        1484 29 okt 16:26 _6g.fdx\n-rw-r--r--  1 jteb  jteb         384 29 okt 16:17 _6g.fnm\n-rw-r--r--  1 jteb  jteb    35294399 29 okt 16:27 _6g.frq\n-rw-r--r--  1 jteb  jteb         374 29 okt 16:27 _6g.nrm\n-rw-r--r--  1 jteb  jteb   230791431 29 okt 16:27 _6g.prx\n-rw-r--r--  1 jteb  jteb      143860 29 okt 16:27 _6g.tii\n-rw-r--r--  1 jteb  jteb    12491845 29 okt 16:27 _6g.tis\n-rw-r--r--  1 jteb  jteb         295 29 okt 16:28 _6g.tvd\n-rw-r--r--  1 jteb  jteb   444939185 29 okt 16:28 _6g.tvf\n-rw-r--r--  1 jteb  jteb        2964 29 okt 16:28 _6g.tvx\n-rw-r--r--  1 jteb  jteb  2758122671 29 okt 16:31 _6h.fdt\n-rw-r--r--  1 jteb  jteb       96388 29 okt 16:31 _6h.fdx\n-rw-r--r--  1 jteb  jteb         723 29 okt 16:29 _6h.fnm\n-rw-r--r--  1 jteb  jteb    51142700 29 okt 16:31 _6h.frq\n-rw-r--r--  1 jteb  jteb       24100 29 okt 16:31 _6h.nrm\n-rw-r--r--  1 jteb  jteb   189178767 29 okt 16:31 _6h.prx\n-rw-r--r--  1 jteb  jteb      270472 29 okt 16:31 _6h.tii\n-rw-r--r--  1 jteb  jteb    21710405 29 okt 16:31 _6h.tis\n-rw-r--r--  1 jteb  jteb       23873 29 okt 16:31 _6h.tvd\n-rw-r--r--  1 jteb  jteb   394088075 29 okt 16:31 _6h.tvf\n-rw-r--r--  1 jteb  jteb      192772 29 okt 16:31 _6h.tvx\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:22 _8b.fnm\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:26 _8b.tvd\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:26 _8b.tvf\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:22 _8c.fdt\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:22 _8c.fdx\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:26 _8c.frq\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:24 _8c.tii\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:24 _8c.tis\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:28 _8c.tvf\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:30 _8c.tvx\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:24 _8d.fdt\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:25 _8d.fdx\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:24 _8d.frq\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:26 _8d.nrm\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:26 _8d.prx\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:26 _8d.tii\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:26 _8d.tis\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:30 _8d.tvd\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:22 _8e.fdt\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:22 _8e.fdx\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:26 _8e.frq\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:24 _8e.nrm\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:07 _8e.tis\n-rw-r--r--  1 jteb  jteb           0 29 okt 21:09 _8e.tvd\n-rw-r--r--  1 jteb  jteb           0 29 okt 21:09 _8e.tvf\n-rw-r--r--  1 jteb  jteb           0 29 okt 21:04 _8e.tvx\n-rw-r--r--  1 jteb  jteb   331348323 29 okt 19:49 _9a.fdt\n-rw-r--r--  1 jteb  jteb       97020 29 okt 19:49 _9a.fdx\n-rw-r--r--  1 jteb  jteb        1480 29 okt 19:49 _9a.fnm\n-rw-r--r--  1 jteb  jteb    38868223 29 okt 19:50 _9a.frq\n-rw-r--r--  1 jteb  jteb       24258 29 okt 19:50 _9a.nrm\n-rw-r--r--  1 jteb  jteb    88673922 29 okt 19:50 _9a.prx\n-rw-r--r--  1 jteb  jteb      147173 29 okt 19:50 _9a.tii\n-rw-r--r--  1 jteb  jteb    11155683 29 okt 19:50 _9a.tis\n-rw-r--r--  1 jteb  jteb       23837 29 okt 19:50 _9a.tvd\n-rw-r--r--  1 jteb  jteb   194739895 29 okt 19:50 _9a.tvf\n-rw-r--r--  1 jteb  jteb      194036 29 okt 19:50 _9a.tvx\n-rw-r--r--  1 jteb  jteb          27 29 okt 19:54 _9a_1.del\n-rw-r--r--  1 jteb  jteb      562391 29 okt 19:59 _9e.fdt\n-rw-r--r--  1 jteb  jteb        9868 29 okt 19:59 _9e.fdx\n-rw-r--r--  1 jteb  jteb        1271 29 okt 19:59 _9e.fnm\n-rw-r--r--  1 jteb  jteb      325115 29 okt 19:59 _9e.frq\n-rw-r--r--  1 jteb  jteb        1237 29 okt 19:59 _9e.nrm\n-rw-r--r--  1 jteb  jteb       29378 29 okt 19:59 _9e.prx\n-rw-r--r--  1 jteb  jteb        3367 29 okt 19:59 _9e.tii\n-rw-r--r--  1 jteb  jteb      308103 29 okt 19:59 _9e.tis\n-rw-r--r--  1 jteb  jteb      117116 29 okt 20:04 _9f.fdt\n-rw-r--r--  1 jteb  jteb        2124 29 okt 20:04 _9f.fdx\n-rw-r--r--  1 jteb  jteb         416 29 okt 20:04 _9f.fnm\n-rw-r--r--  1 jteb  jteb       67935 29 okt 20:04 _9f.frq\n-rw-r--r--  1 jteb  jteb         269 29 okt 20:04 _9f.nrm\n-rw-r--r--  1 jteb  jteb        6165 29 okt 20:04 _9f.prx\n-rw-r--r--  1 jteb  jteb         903 29 okt 20:04 _9f.tii\n-rw-r--r--  1 jteb  jteb       75060 29 okt 20:04 _9f.tis\n-rw-r--r--  1 jteb  jteb      120877 29 okt 20:04 _9g.fdt\n-rw-r--r--  1 jteb  jteb        2188 29 okt 20:04 _9g.fdx\n-rw-r--r--  1 jteb  jteb         416 29 okt 20:04 _9g.fnm\n-rw-r--r--  1 jteb  jteb       70021 29 okt 20:04 _9g.frq\n-rw-r--r--  1 jteb  jteb         277 29 okt 20:04 _9g.nrm\n-rw-r--r--  1 jteb  jteb        6315 29 okt 20:04 _9g.prx\n-rw-r--r--  1 jteb  jteb         842 29 okt 20:04 _9g.tii\n-rw-r--r--  1 jteb  jteb       72269 29 okt 20:04 _9g.tis\n-rw-r--r--  1 jteb  jteb       11704 29 okt 20:04 _9h.fdt\n-rw-r--r--  1 jteb  jteb         212 29 okt 20:04 _9h.fdx\n-rw-r--r--  1 jteb  jteb         416 29 okt 20:04 _9h.fnm\n-rw-r--r--  1 jteb  jteb        6063 29 okt 20:04 _9h.frq\n-rw-r--r--  1 jteb  jteb          30 29 okt 20:04 _9h.nrm\n-rw-r--r--  1 jteb  jteb         627 29 okt 20:04 _9h.prx\n-rw-r--r--  1 jteb  jteb         146 29 okt 20:04 _9h.tii\n-rw-r--r--  1 jteb  jteb        9576 29 okt 20:04 _9h.tis\n-rw-r--r--  1 jteb  jteb           5 29 okt 20:04 index.directory\n-rw-r--r--  1 jteb  jteb          20 29 okt 20:04 segments.gen\n-rw-r--r--  1 jteb  jteb           0 29 okt 20:07 segments_44\n-rw-r--r--  1 jteb  jteb        2641 29 okt 20:04 segments_4m\n\n ",
            "author": "Nico Krijnen",
            "id": "comment-12926858"
        },
        {
            "date": "2010-11-01T08:43:23+0000",
            "content": "A second file listing from another test run, same result: read past EOF\n\n\njteb:assetIndex jteb$ ls -la\ntotal 38739848\ndrwxr-xr-x  2 jteb  jteb        4964 26 okt 11:51 .\ndrwxr-xr-x  3 jteb  jteb         204 22 okt 11:42 ..\n-rw-r--r--  1 jteb  jteb   969134416 18 okt 16:41 _2q.fdt\n-rw-r--r--  1 jteb  jteb       36652 18 okt 16:41 _2q.fdx\n-rw-r--r--  1 jteb  jteb         276 18 okt 16:41 _2q.fnm\n-rw-r--r--  1 jteb  jteb     4685726 18 okt 16:41 _2q.frq\n-rw-r--r--  1 jteb  jteb        9166 18 okt 16:41 _2q.nrm\n-rw-r--r--  1 jteb  jteb   393230403 18 okt 16:42 _2q.prx\n-rw-r--r--  1 jteb  jteb        7447 18 okt 16:42 _2q.tii\n-rw-r--r--  1 jteb  jteb      746299 18 okt 16:42 _2q.tis\n-rw-r--r--  1 jteb  jteb        8394 18 okt 16:42 _2q.tvd\n-rw-r--r--  1 jteb  jteb   599185081 18 okt 16:42 _2q.tvf\n-rw-r--r--  1 jteb  jteb       73300 18 okt 16:42 _2q.tvx\n-rw-r--r--  1 jteb  jteb  2061261675 18 okt 16:44 _39.fdt\n-rw-r--r--  1 jteb  jteb        1012 18 okt 16:44 _39.fdx\n-rw-r--r--  1 jteb  jteb         276 18 okt 16:44 _39.fnm\n-rw-r--r--  1 jteb  jteb    17754579 18 okt 16:44 _39.frq\n-rw-r--r--  1 jteb  jteb         256 18 okt 16:44 _39.nrm\n-rw-r--r--  1 jteb  jteb   121067407 18 okt 16:44 _39.prx\n-rw-r--r--  1 jteb  jteb      137511 18 okt 16:44 _39.tii\n-rw-r--r--  1 jteb  jteb    11726653 18 okt 16:44 _39.tis\n-rw-r--r--  1 jteb  jteb         185 18 okt 16:44 _39.tvd\n-rw-r--r--  1 jteb  jteb   233037042 18 okt 16:44 _39.tvf\n-rw-r--r--  1 jteb  jteb        2020 18 okt 16:44 _39.tvx\n-rw-r--r--  1 jteb  jteb  1595882722 18 okt 16:45 _3u.fdt\n-rw-r--r--  1 jteb  jteb       63692 18 okt 16:45 _3u.fdx\n-rw-r--r--  1 jteb  jteb         330 18 okt 16:45 _3u.fnm\n-rw-r--r--  1 jteb  jteb     8001869 18 okt 16:45 _3u.frq\n-rw-r--r--  1 jteb  jteb       15926 18 okt 16:45 _3u.nrm\n-rw-r--r--  1 jteb  jteb   647374863 18 okt 16:45 _3u.prx\n-rw-r--r--  1 jteb  jteb       11319 18 okt 16:45 _3u.tii\n-rw-r--r--  1 jteb  jteb     1168399 18 okt 16:45 _3u.tis\n-rw-r--r--  1 jteb  jteb       14209 18 okt 16:45 _3u.tvd\n-rw-r--r--  1 jteb  jteb   986370136 18 okt 16:46 _3u.tvf\n-rw-r--r--  1 jteb  jteb      127380 18 okt 16:46 _3u.tvx\n-rw-r--r--  1 jteb  jteb  2057147455 18 okt 16:47 _3v.fdt\n-rw-r--r--  1 jteb  jteb         476 18 okt 16:47 _3v.fdx\n-rw-r--r--  1 jteb  jteb         384 18 okt 16:47 _3v.fnm\n-rw-r--r--  1 jteb  jteb    15201111 18 okt 16:47 _3v.frq\n-rw-r--r--  1 jteb  jteb         122 18 okt 16:47 _3v.nrm\n-rw-r--r--  1 jteb  jteb   109724024 18 okt 16:47 _3v.prx\n-rw-r--r--  1 jteb  jteb      132491 18 okt 16:47 _3v.tii\n-rw-r--r--  1 jteb  jteb    11457688 18 okt 16:47 _3v.tis\n-rw-r--r--  1 jteb  jteb         114 18 okt 16:47 _3v.tvd\n-rw-r--r--  1 jteb  jteb   211902147 18 okt 16:48 _3v.tvf\n-rw-r--r--  1 jteb  jteb         948 18 okt 16:48 _3v.tvx\n-rw-r--r--  1 jteb  jteb  2691565961 18 okt 16:49 _4c.fdt\n-rw-r--r--  1 jteb  jteb       39572 18 okt 16:49 _4c.fdx\n-rw-r--r--  1 jteb  jteb         276 18 okt 16:49 _4c.fnm\n-rw-r--r--  1 jteb  jteb    18724620 18 okt 16:49 _4c.frq\n-rw-r--r--  1 jteb  jteb        9896 18 okt 16:49 _4c.nrm\n-rw-r--r--  1 jteb  jteb   590255960 18 okt 16:50 _4c.prx\n-rw-r--r--  1 jteb  jteb      141243 18 okt 16:50 _4c.tii\n-rw-r--r--  1 jteb  jteb    12185869 18 okt 16:50 _4c.tis\n-rw-r--r--  1 jteb  jteb        9894 18 okt 16:50 _4c.tvd\n-rw-r--r--  1 jteb  jteb   932649779 18 okt 16:51 _4c.tvf\n-rw-r--r--  1 jteb  jteb       79140 18 okt 16:51 _4c.tvx\n-rw-r--r--  1 jteb  jteb  2398908136 18 okt 16:52 _4d.fdt\n-rw-r--r--  1 jteb  jteb         548 18 okt 16:52 _4d.fdx\n-rw-r--r--  1 jteb  jteb         354 18 okt 16:52 _4d.fnm\n-rw-r--r--  1 jteb  jteb    24581614 18 okt 16:52 _4d.frq\n-rw-r--r--  1 jteb  jteb         140 18 okt 16:52 _4d.nrm\n-rw-r--r--  1 jteb  jteb   158243133 18 okt 16:52 _4d.prx\n-rw-r--r--  1 jteb  jteb      141948 18 okt 16:52 _4d.tii\n-rw-r--r--  1 jteb  jteb    12259425 18 okt 16:52 _4d.tis\n-rw-r--r--  1 jteb  jteb         140 18 okt 16:52 _4d.tvd\n-rw-r--r--  1 jteb  jteb   303769970 18 okt 16:53 _4d.tvf\n-rw-r--r--  1 jteb  jteb        1092 18 okt 16:53 _4d.tvx\n-rw-r--r--  1 jteb  jteb  1081212027 18 okt 16:53 _4p.fdt\n-rw-r--r--  1 jteb  jteb         212 18 okt 16:53 _4p.fdx\n-rw-r--r--  1 jteb  jteb         354 18 okt 16:53 _4p.fnm\n-rw-r--r--  1 jteb  jteb     8294102 18 okt 16:53 _4p.frq\n-rw-r--r--  1 jteb  jteb          56 18 okt 16:53 _4p.nrm\n-rw-r--r--  1 jteb  jteb    60513257 18 okt 16:53 _4p.prx\n-rw-r--r--  1 jteb  jteb      134898 18 okt 16:53 _4p.tii\n-rw-r--r--  1 jteb  jteb    11376730 18 okt 16:53 _4p.tis\n-rw-r--r--  1 jteb  jteb          56 18 okt 16:53 _4p.tvd\n-rw-r--r--  1 jteb  jteb   116715012 18 okt 16:53 _4p.tvf\n-rw-r--r--  1 jteb  jteb         420 18 okt 16:53 _4p.tvx\n-rw-r--r--  1 jteb  jteb   787581180 18 okt 16:54 _55.fdt\n-rw-r--r--  1 jteb  jteb         156 18 okt 16:54 _55.fdx\n-rw-r--r--  1 jteb  jteb         354 18 okt 16:54 _55.fnm\n-rw-r--r--  1 jteb  jteb     5376741 18 okt 16:54 _55.frq\n-rw-r--r--  1 jteb  jteb          42 18 okt 16:54 _55.nrm\n-rw-r--r--  1 jteb  jteb    39539985 18 okt 16:54 _55.prx\n-rw-r--r--  1 jteb  jteb      133483 18 okt 16:54 _55.tii\n-rw-r--r--  1 jteb  jteb    11351989 18 okt 16:54 _55.tis\n-rw-r--r--  1 jteb  jteb          42 18 okt 16:54 _55.tvd\n-rw-r--r--  1 jteb  jteb    75958725 18 okt 16:54 _55.tvf\n-rw-r--r--  1 jteb  jteb         308 18 okt 16:54 _55.tvx\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:11 _6i.fdt\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:11 _6i.fdx\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:11 _6i.frq\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:05 _6i.nrm\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:12 _6i.tvd\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:12 _6i.tvf\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:11 _6i.tvx\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:07 _6j.nrm\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:08 _6k.fdt\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:08 _6k.fdx\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:11 _6k.fnm\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:05 _6k.tis\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:08 _6l.frq\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:11 _6l.nrm\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:11 _6l.prx\n-rw-r--r--  1 jteb  jteb   356417086 22 okt 12:02 _6u.fdt\n-rw-r--r--  1 jteb  jteb      172180 22 okt 12:02 _6u.fdx\n-rw-r--r--  1 jteb  jteb         723 22 okt 12:02 _6u.fnm\n-rw-r--r--  1 jteb  jteb     8585718 22 okt 12:02 _6u.frq\n-rw-r--r--  1 jteb  jteb       43048 22 okt 12:02 _6u.nrm\n-rw-r--r--  1 jteb  jteb    18540155 22 okt 12:02 _6u.prx\n-rw-r--r--  1 jteb  jteb      185484 22 okt 12:02 _6u.tii\n-rw-r--r--  1 jteb  jteb    15851802 22 okt 12:02 _6u.tis\n-rw-r--r--  1 jteb  jteb       21534 22 okt 12:02 _6u.tvd\n-rw-r--r--  1 jteb  jteb    34227796 22 okt 12:02 _6u.tvf\n-rw-r--r--  1 jteb  jteb      344356 22 okt 12:02 _6u.tvx\n-rw-r--r--  1 jteb  jteb          39 22 okt 12:05 _6u_1.del\n-rw-r--r--  1 jteb  jteb      316687 22 okt 12:05 _6v.fdt\n-rw-r--r--  1 jteb  jteb        2716 22 okt 12:05 _6v.fdx\n-rw-r--r--  1 jteb  jteb         593 22 okt 12:05 _6v.fnm\n-rw-r--r--  1 jteb  jteb       93284 22 okt 12:05 _6v.frq\n-rw-r--r--  1 jteb  jteb         343 22 okt 12:05 _6v.nrm\n-rw-r--r--  1 jteb  jteb       12416 22 okt 12:05 _6v.prx\n-rw-r--r--  1 jteb  jteb        1679 22 okt 12:05 _6v.tii\n-rw-r--r--  1 jteb  jteb      120258 22 okt 12:05 _6v.tis\n-rw-r--r--  1 jteb  jteb      319766 22 okt 12:05 _6w.fdt\n-rw-r--r--  1 jteb  jteb        2756 22 okt 12:05 _6w.fdx\n-rw-r--r--  1 jteb  jteb         593 22 okt 12:05 _6w.fnm\n-rw-r--r--  1 jteb  jteb       94316 22 okt 12:05 _6w.frq\n-rw-r--r--  1 jteb  jteb         348 22 okt 12:05 _6w.nrm\n-rw-r--r--  1 jteb  jteb       12593 22 okt 12:05 _6w.prx\n-rw-r--r--  1 jteb  jteb        1695 22 okt 12:05 _6w.tii\n-rw-r--r--  1 jteb  jteb      117984 22 okt 12:05 _6w.tis\n-rw-r--r--  1 jteb  jteb      300004 22 okt 12:05 _6x.fdt\n-rw-r--r--  1 jteb  jteb        2548 22 okt 12:05 _6x.fdx\n-rw-r--r--  1 jteb  jteb         593 22 okt 12:05 _6x.fnm\n-rw-r--r--  1 jteb  jteb       86935 22 okt 12:05 _6x.frq\n-rw-r--r--  1 jteb  jteb         322 22 okt 12:05 _6x.nrm\n-rw-r--r--  1 jteb  jteb       11811 22 okt 12:05 _6x.prx\n-rw-r--r--  1 jteb  jteb        1578 22 okt 12:05 _6x.tii\n-rw-r--r--  1 jteb  jteb      111238 22 okt 12:05 _6x.tis\n-rw-r--r--  1 jteb  jteb         216 22 okt 13:24 index.diagnostic\n-rw-r--r--  1 jteb  jteb           5 22 okt 12:05 index.directory\n-rw-r--r--  1 jteb  jteb          20 22 okt 12:05 segments.gen\n-rw-r--r--  1 jteb  jteb           0 22 okt 12:05 segments_36\n-rw-r--r--  1 jteb  jteb        2877 22 okt 12:05 segments_3g\n\n ",
            "author": "Nico Krijnen",
            "id": "comment-12926859"
        },
        {
            "date": "2010-11-01T10:27:35+0000",
            "content": "That long string of length 0 files is very bizarre.\n\nWas there no original root cause here?  Eg disk full?\n\nOr is the \"read past EOF\" on closing an IndexReader w/ pending deletes really the first exception you see?\n\nDoes zoie somehow touch the index files?  Taking a backup is fundamentally a read-only op on the index, so that process shouldn't by itself truncate index files.\n\nSomething is somehow reaching in and zero-ing out these files.  I don't think Lucene itself would do this.  For example, the serious of _6i.XXX zero'd files... Lucene writes these\nfiles roughly in sequence, so if something bad happened in writing the postings, then the .nrm file should not even exist.\n\nSo we need to figure out who is truncating these files... ",
            "author": "Michael McCandless",
            "id": "comment-12926907"
        },
        {
            "date": "2010-11-01T10:47:04+0000",
            "content": "Was there no original root cause here? Eg disk full?\n\nThis was one of the first things i thought, but the disk has more than enough free space: 200GB. Also, for this test we write the backup to a different disk - both for better performance and to prevent the disk with the index on it from running out of free space.\n\nOr is the \"read past EOF\" on closing an IndexReader w/ pending deletes really the first exception you see?\n\nIt is the first exception we see. We turned on quite a bit of additional logging but we have not been able to find anything weird happening before this error. I do expect something weird must have happened to cause the 'read past EOF'.\n\nDo you have any clues as to what we could look for? - that might narrow the search.\nWe are able to consistently reproduce this on our test environment. So if you have clues to specific debug logging that should be turned on - we can do another test run.\n\nDoes zoie somehow touch the index files?\n\nWe'll try to find out. For as far as I see the basic backup procedure is to grab the last 'commit snapshot', prevent it from being deleted (ZoieIndexDeletionPolicy), and write all the files mentioned in the commit snapshot to a NIO WritableByteChannel (proj.zoie.impl.indexing.internal.DiskIndexSnapshot#writeTo) - we call proj.zoie.impl.indexing.ZoieSystem.exportSnapshot(WritableByteChannel) ourselves. ",
            "author": "Nico Krijnen",
            "id": "comment-12926908"
        },
        {
            "date": "2010-11-01T16:32:52+0000",
            "content": "Using Solr 1.4.2 on disk full .del files were being written with a file length of zero, however that is supposed to be fixed by https://issues.apache.org/jira/browse/LUCENE-2593  This doesn't appear to be similar because more than the .del files are of zero length. ",
            "author": "Jason Rutherglen",
            "id": "comment-12927031"
        },
        {
            "date": "2010-11-01T16:53:17+0000",
            "content": "In the mean time, we also did a test with a checkout of the latest lucene_3_0 branch (@2010-11-01), which should include the fix that Jason mentions.\n\nDoes not seem to make a difference though. We still get a 'read past EOF'.\n\nOn the last run we did get a slightly different stacktrace. This time the 'read past EOF' happens when the zoie RAM index is written to the zoie Disk index. Last time it occurred a little earlier in BaseSearchIndex#loadFromIndex, while committing deletes to the disk IndexReader. This could be just a coincidence though. My feeling is still that the 'read past EOF' is just a result/symptom of something else that happened just before it - still trying to figure out what that could be... any suggestions are welcome.\n\n\n15:25:03,453 [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@3d9e7719] \n    ERROR proj.zoie.impl.indexing.internal.LuceneIndexDataLoader - \n    Problem copying segments: read past EOF\njava.io.IOException: read past EOF\n    at org.apache.lucene.store.BufferedIndexInput.refill(BufferedIndexInput.java:154)\n    at org.apache.lucene.store.BufferedIndexInput.readByte(BufferedIndexInput.java:39)\n    at org.apache.lucene.store.ChecksumIndexInput.readByte(ChecksumIndexInput.java:37)\n    at org.apache.lucene.store.IndexInput.readInt(IndexInput.java:69)\n    at org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:245)\n    at org.apache.lucene.index.IndexFileDeleter.<init>(IndexFileDeleter.java:170)\n    at org.apache.lucene.index.IndexWriter.init(IndexWriter.java:1127)\n    at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:960)\n    at proj.zoie.impl.indexing.internal.DiskSearchIndex.openIndexWriter(DiskSearchIndex.java:176)\n    at proj.zoie.impl.indexing.internal.BaseSearchIndex.loadFromIndex(BaseSearchIndex.java:228)\n    at proj.zoie.impl.indexing.internal.LuceneIndexDataLoader.loadFromIndex(LuceneIndexDataLoader.java:153)\n    at proj.zoie.impl.indexing.internal.DiskLuceneIndexDataLoader.loadFromIndex(DiskLuceneIndexDataLoader.java:134)\n    at proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader.processBatch(RealtimeIndexDataLoader.java:172)\n    at proj.zoie.impl.indexing.internal.BatchedIndexDataLoader$LoaderThread.run(BatchedIndexDataLoader.java:377)\n\n ",
            "author": "Nico Krijnen",
            "id": "comment-12927040"
        },
        {
            "date": "2010-11-01T17:02:02+0000",
            "content": "Somehow we have to locate the event that causes the truncation of the files.\n\nCan you enable IndexWriter's infoStream and then get the corruption to happen, and post the results? ",
            "author": "Michael McCandless",
            "id": "comment-12927043"
        },
        {
            "date": "2010-11-02T16:22:33+0000",
            "content": "Attached IndexWriter's infoStream log and a directory listing of the failed index. \n\nThe log file contains logging from 14:22:29 (start of our backup process) to 15:57:58 (application termination). Index gets corrupt around 15:21:39 (first \"read past EOF\"). These log times are searchable in the log file. ",
            "author": "Nico Krijnen",
            "id": "comment-12927481"
        },
        {
            "date": "2010-11-08T19:57:40+0000",
            "content": "zoie does not touch index files, only adds an index.directory file containing version information. ",
            "author": "John Wang",
            "id": "comment-12929702"
        },
        {
            "date": "2010-11-09T10:57:08+0000",
            "content": "Any ideas on what could be happening? It sounds like IndexWriter is the only one that is modifying these files, zoie only seems to be reading from them to make the backup. What should we look for in the IndexWriter's infoStream? ",
            "author": "Nico Krijnen",
            "id": "comment-12930086"
        },
        {
            "date": "2010-11-09T11:03:46+0000",
            "content": "\nFirst, just to rule out any already-fixed-but-not-yet-released issues,\ncan you update your Lucene JAR to the tip of the 3.0.x branch?  Ie do\nthis:\n\n\n  svn checkout https://svn.apache.org/repos/asf/lucene/java/branches/lucene_3_0 30x\n  cd 30x\n  ant jar\n\n\n\nAnd then copy build/lucene-core-3.0.3-dev.jar to your CLASSPATH\n(replacing old Lucene JAR).\n\nSecond, can you apply the patch I just attached\n(LUCENE-2729-test1.patch) and then make this corruption happen again?\nThat patch throws an exception if ever we try to call\nSimpleFSDir.createOutput on a file that already exists.  Lucene should\nnever do this under non-exceptional situations, yet somehow it looks\nlike it may be (with all your 0 length files). ",
            "author": "Michael McCandless",
            "id": "comment-12930089"
        },
        {
            "date": "2010-11-09T11:12:37+0000",
            "content": "at org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:245)\nI just had a quick look at it and I wonder what revision you use for that? SegmentsInfos.java does not contain a read call nice revision 892992 \n\ncan you clarify? ",
            "author": "Simon Willnauer",
            "id": "comment-12930091"
        },
        {
            "date": "2010-11-09T11:13:48+0000",
            "content": "ah I think I have been on the wrong branch nevermind! ",
            "author": "Simon Willnauer",
            "id": "comment-12930092"
        },
        {
            "date": "2010-11-09T11:14:16+0000",
            "content": "Thx! We will update, patch and re-run the test. ",
            "author": "Nico Krijnen",
            "id": "comment-12930094"
        },
        {
            "date": "2010-11-09T14:19:25+0000",
            "content": "\nThank you for attaching the IW infoStream output!  Sorry it took so\nlong for me to respond.\n\nAside: it is sad but there is no master TODO list in open source.  It\nall comes down to our own email inboxes, todo lists, post-it notes all\nover the place, etc., and (in my case anyway) things sometimes fall\npast the event horizon.\n\nSo please if I don't respond in a day or two on an active issue, bump\nit again (put a comment on the issue)!  I'd much rather people\nover-nag than under-nag but unfortunately under-nag is far far more\ncommon and it causes important issues to languish unnecessarily.\n\nOK back to the issue \n\nI looked through the infoStream but I don't see a smoking gun.  Ie,\nthe logs indicate that nowhere did Lucene try to delete/overwrite\nthose zero-length files; I see other files being deleted, so, this is\nwhat I'd expect given that ZoieDeletionPolicy is presumably protecting\nthe segments_3t commit point (to back up its files).\n\nI do see some spooky \"other\" exceptions, though... these are the first\n2 exceptions I see in the log:\n\n\n14:27:41,290 [bigIndexBuilder_QueueProcessor_3] WARN  com.ds.acm.logic.impl.AssetManagerImpl -\n  Ignoring AssetNotFoundException trying to make sure all metadata from index is loaded before updating an existing asset\nException in thread \"pool-5-thread-6\" java.lang.NullPointerException\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.writeToSocket(InternalNioOutputBuffer.java:430)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.flushBuffer(InternalNioOutputBuffer.java:784)\n\tat org.apache.coyote.http11.InternalNioOutputBuffer.flush(InternalNioOutputBuffer.java:300)\n\tat org.apache.coyote.http11.Http11NioProcessor.action(Http11NioProcessor.java:1060)\n\tat org.apache.coyote.Response.action(Response.java:183)\n\tat org.apache.catalina.connector.OutputBuffer.doFlush(OutputBuffer.java:314)\n\tat org.apache.catalina.connector.OutputBuffer.flush(OutputBuffer.java:288)\n\tat org.apache.catalina.connector.Response.flushBuffer(Response.java:548)\n\tat org.apache.catalina.connector.ResponseFacade.flushBuffer(ResponseFacade.java:279)\n\tat org.granite.gravity.AbstractChannel.runReceived(AbstractChannel.java:251)\n\tat org.granite.gravity.AbstractChannel.runReceive(AbstractChannel.java:199)\n\tat org.granite.gravity.AsyncReceiver.doRun(AsyncReceiver.java:34)\n\tat org.granite.gravity.AsyncChannelRunner.run(AsyncChannelRunner.java:52)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.runTask(ThreadPoolExecutor.java:886)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:908)\n\tat java.lang.Thread.run(Thread.java:680)\n\n\n\nand\n\n\n14:40:18,382 [Low Memory Detector] WARN  com.ds.acm.engine.search.zoieimpl.core.ZoieSystemManager -\n  Ignoring timeout while attempting to flush zoie memory index to disk to free memory\nproj.zoie.api.ZoieException: sync timed out\n\tat proj.zoie.impl.indexing.AsyncDataConsumer.syncWthVersion(AsyncDataConsumer.java:177)\n\tat proj.zoie.impl.indexing.AsyncDataConsumer.flushEvents(AsyncDataConsumer.java:155)\n\tat proj.zoie.impl.indexing.ZoieSystem.flushEvents(ZoieSystem.java:308)\n\tat com.ds.acm.engine.search.zoieimpl.core.ZoieSystemManager.onLowMemory(ZoieSystemManager.java:220)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat com.ds.util.event.BasicEventBroadcaster$Handler.invokeMethod(BasicEventBroadcaster.java:197)\n\tat com.ds.util.event.BasicEventBroadcaster$Handler.handle(BasicEventBroadcaster.java:190)\n\tat com.ds.util.event.BasicEventBroadcaster.fire(BasicEventBroadcaster.java:108)\n\tat com.ds.util.cache.LowMemoryWarningBroadcaster$1.handleNotification(LowMemoryWarningBroadcaster.java:135)\n\tat sun.management.NotificationEmitterSupport.sendNotification(NotificationEmitterSupport.java:138)\n\tat sun.management.MemoryImpl.createNotification(MemoryImpl.java:171)\n\tat sun.management.MemoryPoolImpl$PoolSensor.triggerAction(MemoryPoolImpl.java:272)\n\tat sun.management.Sensor.trigger(Sensor.java:120)\n\n\n\nThat 2nd exception happens a total of 9 times... and is rather\nspooky.  What does it mean?  Ie, why is Zoie timing out on flushing\nthe index to disk, and, what does it then do w/ its RAMDir?\n\nI also see alot of these:\n\n\n15:50:18,856 [bigIndexBuilder_QueueProcessor_10] WARN  com.ds.acm.logic.impl.AssetManagerImpl -\n  Ignoring AssetNotFoundException trying to make sure all metadata from index is loaded before\n  updating an existing asset\n\n\n\nWould it be possible to instrument to Zoie code to note as the backup\nprocess is copying each file in the snapshot, and at that point print\na listing of the directory?\n\nAlso, can you write to the log when Zoie applies deletes?  (Looks like\nit happens in proj.zoie.impl.indexing.internal.BaseSearchIndex.deleteDocs).\nIt's on applying deletes that the corruption is first detected, so, if\nwe log this event we can better bracket the period of time when the\ncorruption happened.\n\nDoes Zoie ever open an IndexReader or IndexWriter passing in an\nexisting commit point?  Or does it always open the latest commit?\n\nThe timestamps on the zero length files are particularly spooky \u2013 the\nearliest ones are 15:21 (when first EOF is hit), but then also 15:47\nand 15:49 on the others.  It seems like on 3 separate occasions\nsomething truncated the files. ",
            "author": "Michael McCandless",
            "id": "comment-12930130"
        },
        {
            "date": "2010-11-09T14:39:10+0000",
            "content": "\n...spooky \"other\" exceptions...\n\nThese are all 'WARN' level and all of them caused by non-critical timeouts in our code. All caused by the system being under very heavy load needed to reproduce the bug.\n\n\n\nWould it be possible to instrument to Zoie code to note as the backup\nprocess is copying each file in the snapshot, and at that point print\na listing of the directory?\n\nWill do, that is a good one. Then we know which files are being 'held' by the Zoie deletion policy for the backup.\n\n\n\nAlso, can you write to the log when Zoie applies deletes? (Looks like\nit happens in proj.zoie.impl.indexing.internal.BaseSearchIndex.deleteDocs).\nIt's on applying deletes that the corruption is first detected, so, if\nwe log this event we can better bracket the period of time when the\ncorruption happened.\n\nWill do, but we also got the error while zoie was opening a new IndexWriter:\n\n\n15:25:03,453 [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@3d9e7719] \n    ERROR proj.zoie.impl.indexing.internal.LuceneIndexDataLoader - \n    Problem copying segments: read past EOF\njava.io.IOException: read past EOF\n    at org.apache.lucene.store.BufferedIndexInput.refill(BufferedIndexInput.java:154)\n    at org.apache.lucene.store.BufferedIndexInput.readByte(BufferedIndexInput.java:39)\n    at org.apache.lucene.store.ChecksumIndexInput.readByte(ChecksumIndexInput.java:37)\n    at org.apache.lucene.store.IndexInput.readInt(IndexInput.java:69)\n    at org.apache.lucene.index.SegmentInfos.read(SegmentInfos.java:245)\n    at org.apache.lucene.index.IndexFileDeleter.<init>(IndexFileDeleter.java:170)\n    at org.apache.lucene.index.IndexWriter.init(IndexWriter.java:1127)\n    at org.apache.lucene.index.IndexWriter.<init>(IndexWriter.java:960)\n    at proj.zoie.impl.indexing.internal.DiskSearchIndex.openIndexWriter(DiskSearchIndex.java:176)\n    at proj.zoie.impl.indexing.internal.BaseSearchIndex.loadFromIndex(BaseSearchIndex.java:228)\n    at proj.zoie.impl.indexing.internal.LuceneIndexDataLoader.loadFromIndex(LuceneIndexDataLoader.java:153)\n    at proj.zoie.impl.indexing.internal.DiskLuceneIndexDataLoader.loadFromIndex(DiskLuceneIndexDataLoader.java:134)\n    at proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader.processBatch(RealtimeIndexDataLoader.java:172)\n    at proj.zoie.impl.indexing.internal.BatchedIndexDataLoader$LoaderThread.run(BatchedIndexDataLoader.java:377)\n\n\n\nI'll add a log there too.\nMy guess is that the 'read past EOF' is not really specific to applying deletes, but just happens when the SegementInfos is loaded on a 0kb file.\n\n\n\nDoes Zoie ever open an IndexReader or IndexWriter passing in an\nexisting commit point? Or does it always open the latest commit?\n\nI'll try to find out.\n\n\n\nThe timestamps on the zero length files are particularly spooky - the\nearliest ones are 15:21 (when first EOF is hit), but then also 15:47\nand 15:49 on the others. It seems like on 3 separate occasions\nsomething truncated the files.\n\nIndeed, I thought this was weird too. ",
            "author": "Nico Krijnen",
            "id": "comment-12930142"
        },
        {
            "date": "2010-11-09T16:47:14+0000",
            "content": "We really appreciate the help and understand that this is not the only thing you are working on \nCollecting post-it notes sounds so familliar \n\nWe ran a test with your patch to throw a RuntimeException when an output already exists.\nWe did get a 'read past EOF', but the additional RuntimeException is never thrown.\n\nWe'll add the other log points and do another test run with those. If you have more suggestions for logging, let us know, we won't start the next run until tomorrow anyway... ",
            "author": "Nico Krijnen",
            "id": "comment-12930186"
        },
        {
            "date": "2010-11-10T11:37:58+0000",
            "content": "Will do, but we also got the error while zoie was opening a new IndexWriter:\n\nYou're right... the next attempt to open an IndexWriter, or and IndexReader that's trying to commit pending deletes, will hit the exc due to the zero-length segments file.\n\nSo in fact this already helps us further bracket when the truncation happened, because IW 115 was able to successfully open on the assetIndex, but then the attempt to write deletions hits the exc, as well as the next attempt to open a writer on the index.\n\nSo sometime after IW 115 is opened and before the deletions are applied, something truncates these index files.\n\nMy guess is that the 'read past EOF' is not really specific to applying deletes, but just happens when the SegementInfos is loaded on a 0kb file.\n\nThat's right.  What's really odd is that these 0-length files are very old, ie, indexing has long ago moved on to newer segments.  I suspect they are in fact the files protected by the snapshot for backups... so I think it's important we instrument Zoie's backup process next.\n\n\nWe ran a test with your patch to throw a RuntimeException when an output already exists.\nWe did get a 'read past EOF', but the additional RuntimeException is never thrown.\nHmmmm.  So it sounds like it's not Lucene's SimpleFSDir.createOutput that's truncating these files. ",
            "author": "Michael McCandless",
            "id": "comment-12930579"
        },
        {
            "date": "2010-11-11T14:41:45+0000",
            "content": "We finished another run today and got some interesting results with from the additional logging. The log times are searchable in the log file...\n\n\n\t09:40:21,996: we are creating a snapshot for our backup, segments filename used for snapshot: 'segments_2j'\nOn the next line we can see that at that moment the segments_2j is 2353 bytes. We log the filenames in the index + the (filesizes).\n\n\n\n\n\t11:03:27,653: segments_2j is written to disk\nHow can this be while this is the name of the segments filename used to create our Snapshot?\nOn the next line we see that it has indeed been written to disk, but has a 0 byte file size.\n\n\n\n\n\t11:08:02,731: First \"read past EOF\" exception\n_It looks like segments filenames are reused and at a point in time well after our Snapshot is created, the name 'segments_2j' is reused?\nThis somehow causes the segments file to get a size of 0 bytes. Perhaps it is being deleted and written at the same time, or because of the name clash there's no data to be written to the segments file?_\n\n\n\n\n\t11:16:03,300: our backup is finished.\n\n\n\nHere is an excerpt of some of the more interesting log entries (complete log is attached as backup_force_failure2.log.zip):\n\n\n09:39:30,719 [http-8080-2] DEBUG com.ds.acm.logic.tools.BackupManager - Start asset index backup\n\n09:40:21,996 [http-8080-2] DEBUG proj.zoie.impl.indexing.internal.ZoieIndexDeletionPolicy - Ctor Snapshot. segments filename: segments_2j, commit filenames: [_5f.tvd, _4c.tvf, _5f.tvf, _4d.fdx, _4p.tis, _4c.tvd, _4p.frq, _5e.tvx, _39.tis, _3u.frq, _4d.fdt, _4p.tii, _5f.fnm, _4c.tvx, _39.tii, _55.tis, _2q.fnm, _4p.fdx, _2q.tvf, _5e.tvf, _5e.tvd, _2q.tvd, _5f.tvx, _4p.fdt, _55.tii, _55.nrm, _55.frq, _2q.tvx, _3u.tvx, _5f.fdx, _4c.frq, _5f.fdt, _4c.fdx, _2q.nrm, _4c.fdt, _4p.tvf, _4c.nrm, _3v.tvf, _4c.tii, _3u.prx, _4p.tvd, _4c.tis, _3u.fdt, _5e.fnm, _3v.tvd, _3u.fdx, _55.tvx, _39.fdt, _39.fnm, _5e.prx, _3u.tis, *segments_2j*, _3v.prx, _2q.fdx, _4c.prx, _4d.prx, _4p.tvx, _39.fdx, _3u.tii, _2q.fdt, _4d.frq, _55.fdt, _2q.prx, _5e.tii, _3u.fnm, _55.fdx, _5e.nrm, _5f.tii, _5e.tis, _4d.nrm, _4d.tii, _5e.fdt, _4d.tis, _5f.frq, _5e.fdx, _39.tvd, _39.tvf, _55.fnm, _3v.frq, _2q.frq, _2q.tii, _3v.tii, _5f.prx, _4p.nrm, _5f.nrm, _2q.tis, _3v.tvx, _4c.fnm, _3v.nrm, _55.tvf, _55.tvd, _3u.nrm, _5f.tis, _3v.tis, _3v.fdt, _4d.fnm, _4d.tvf, _3v.fdx, _4d.tvd, _4d.tvx, _4p.prx, _3v.fnm, _5e.frq, _39.prx, _39.tvx, _39.frq, _4p.fnm, _39.nrm, _3u.tvf, _55.prx, _3u.tvd]\n\n11:03:27,653 [http-8080-2] TRACE com.ds.acm.engine.search.zoieimpl.core.DirectoryManager - Writing segments_2j, directory contents: _2q.fdt(969134416), _2q.fdx(36652), _2q.fnm(276), _2q.frq(4685726), _2q.nrm(9166), _2q.prx(393230403), _2q.tii(7447), _2q.tis(746299), _2q.tvd(8394), _2q.tvf(599185081), _2q.tvx(73300), _39.fdt(2061261675), _39.fdx(1012), _39.fnm(276), _39.frq(17754579), _39.nrm(256), _39.prx(121067407), _39.tii(137511), _39.tis(11726653), _39.tvd(185), _39.tvf(233037042), _39.tvx(2020), _3u.fdt(1595882722), _3u.fdx(63692), _3u.fnm(330), _3u.frq(8001869), _3u.nrm(15926), _3u.prx(647374863), _3u.tii(11319), _3u.tis(1168399), _3u.tvd(14209), _3u.tvf(986370136), _3u.tvx(127380), _3v.fdt(2057147455), _3v.fdx(476), _3v.fnm(384), _3v.frq(15201111), _3v.nrm(122), _3v.prx(109724024), _3v.tii(132491), _3v.tis(11457688), _3v.tvd(114), _3v.tvf(211902147), _3v.tvx(948), _4c.fdt(2691565961), _4c.fdx(39572), _4c.fnm(276), _4c.frq(18724620), _4c.nrm(9896), _4c.prx(590255960), _4c.tii(141243), _4c.tis(12185869), _4c.tvd(9894), _4c.tvf(932649779), _4c.tvx(79140), _4d.fdt(2398908136), _4d.fdx(548), _4d.fnm(354), _4d.frq(24581614), _4d.nrm(140), _4d.prx(158243133), _4d.tii(141948), _4d.tis(12259425), _4d.tvd(140), _4d.tvf(303769970), _4d.tvx(1092), _4p.fdt(1081212027), _4p.fdx(212), _4p.fnm(354), _4p.frq(8294102), _4p.nrm(56), _4p.prx(60513257), _4p.tii(134898), _4p.tis(11376730), _4p.tvd(56), _4p.tvf(116715012), _4p.tvx(420), _55.fdt(787581180), _55.fdx(156), _55.fnm(354), _55.frq(5376741), _55.nrm(42), _55.prx(39539985), _55.tii(133483), _55.tis(11351989), _55.tvd(42), _55.tvf(75958725), _55.tvx(308), _5e.prx(0), _5z.fdt(853614415), _5z.fdx(23700), _5z.fnm(1696), _5z.frq(9041984), _5z.nrm(5928), _5z.prx(32617823), _5z.tii(146115), _5z.tis(12387143), _5z.tvd(4142), _5z.tvf(74409815), _5z.tvx(47396), _63.fdt(212690811), _63.fdx(8188), _63.fnm(1652), _63.frq(2492889), _63.nrm(2050), _63.prx(5672093), _63.tii(8470), _63.tis(689993), _63.tvd(1442), _63.tvf(15371474), _63.tvx(16372), _64.fdt(4118409126), _64.fdx(1484), _64.fnm(384), _64.frq(35294399), _64.nrm(374), _64.prx(230791431), _64.tii(143860), _64.tis(12491845), _64.tvd(295), _64.tvf(444939185), _64.tvx(2964), _65.fdt(1369489408), _65.fdx(0), _65.fnm(1749), index.directory(5), segments.gen(20), segments_2x(2354)\n11:03:27,706 [http-8080-2] TRACE com.ds.acm.engine.search.zoieimpl.core.DirectoryManager - Writing _3v.prx, directory contents: _2q.fdt(969134416), _2q.fdx(36652), _2q.fnm(276), _2q.frq(4685726), _2q.nrm(9166), _2q.prx(393230403), _2q.tii(7447), _2q.tis(746299), _2q.tvd(8394), _2q.tvf(599185081), _2q.tvx(73300), _39.fdt(2061261675), _39.fdx(1012), _39.fnm(276), _39.frq(17754579), _39.nrm(256), _39.prx(121067407), _39.tii(137511), _39.tis(11726653), _39.tvd(185), _39.tvf(233037042), _39.tvx(2020), _3u.fdt(1595882722), _3u.fdx(63692), _3u.fnm(330), _3u.frq(8001869), _3u.nrm(15926), _3u.prx(647374863), _3u.tii(11319), _3u.tis(1168399), _3u.tvd(14209), _3u.tvf(986370136), _3u.tvx(127380), _3v.fdt(2057147455), _3v.fdx(476), _3v.fnm(384), _3v.frq(15201111), _3v.nrm(122), _3v.prx(109724024), _3v.tii(132491), _3v.tis(11457688), _3v.tvd(114), _3v.tvf(211902147), _3v.tvx(948), _4c.fdt(2691565961), _4c.fdx(39572), _4c.fnm(276), _4c.frq(18724620), _4c.nrm(9896), _4c.prx(590255960), _4c.tii(141243), _4c.tis(12185869), _4c.tvd(9894), _4c.tvf(932649779), _4c.tvx(79140), _4d.fdt(2398908136), _4d.fdx(548), _4d.fnm(354), _4d.frq(24581614), _4d.nrm(140), _4d.prx(158243133), _4d.tii(141948), _4d.tis(12259425), _4d.tvd(140), _4d.tvf(303769970), _4d.tvx(1092), _4p.fdt(1081212027), _4p.fdx(212), _4p.fnm(354), _4p.frq(8294102), _4p.nrm(56), _4p.prx(60513257), _4p.tii(134898), _4p.tis(11376730), _4p.tvd(56), _4p.tvf(116715012), _4p.tvx(420), _55.fdt(787581180), _55.fdx(156), _55.fnm(354), _55.frq(5376741), _55.nrm(42), _55.prx(39539985), _55.tii(133483), _55.tis(11351989), _55.tvd(42), _55.tvf(75958725), _55.tvx(308), _5e.prx(0), _5z.fdt(853614415), _5z.fdx(23700), _5z.fnm(1696), _5z.frq(9041984), _5z.nrm(5928), _5z.prx(32617823), _5z.tii(146115), _5z.tis(12387143), _5z.tvd(4142), _5z.tvf(74409815), _5z.tvx(47396), _63.fdt(212690811), _63.fdx(8188), _63.fnm(1652), _63.frq(2492889), _63.nrm(2050), _63.prx(5672093), _63.tii(8470), _63.tis(689993), _63.tvd(1442), _63.tvf(15371474), _63.tvx(16372), _64.fdt(4118409126), _64.fdx(1484), _64.fnm(384), _64.frq(35294399), _64.nrm(374), _64.prx(230791431), _64.tii(143860), _64.tis(12491845), _64.tvd(295), _64.tvf(444939185), _64.tvx(2964), _65.fdt(1369554944), _65.fdx(0), _65.fnm(1749), index.directory(5), segments.gen(20), segments_2j(0), segments_2x(2354)\n\nIFD [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@7636d59a]: init: load commit \"segments_2j\"\nIW 1110 [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@7636d59a]: init: hit exception on init; releasing write lock\n11:08:02,731 [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@7636d59a] ERROR proj.zoie.impl.indexing.internal.LuceneIndexDataLoader - Problem copying segments: read past EOF, start=0, end=0, bufferStart=0, bufferPosition=0, bufferSize=1024\n\n11:16:03,300 [http-8080-2] DEBUG com.ds.acm.logic.tools.BackupManager - Asset index backup complete\n\nLooking in the logs there are 31 occurences of 'delete \"segments_2j\"' and 32 for 'wrote segments file \"segments_2j\"'. Very weird, since the ZoieIndexDeletionPolicy should prevent the segments_2j from being deleted...\n\nSo just guessing here, but the problem seems to be that segement filenames are being 'rotated' and getting reused?\nThe ZoieIndexDeletionPolicy definitely does not seem to take this into account, it uses the segments filename as a unique id to track the references to a specific commit. But looking at it, segment filenames are not unique over a certain period of time, and that time period gets shorter when lots of modifications are being made to the index.\nReading the code it should still prevent any segments_2j commit from being deleted... but we do see deletes for that file... hmmm\n\nAnd then something else still seems te be going wrong, somehow the segments file does become 0 bytes. It is not because it was written with no data, we added a check for that (look for 'closing 0kb IndexOutput') but that never happens to a segments_* file.\n\nMaybe some logic needs to be added to prevent certain segment_... numbers from being re-used if the commit is still 'referenced' by an IndexDeletionPolicy...? ",
            "author": "Nico Krijnen",
            "id": "comment-12931024"
        },
        {
            "date": "2010-11-11T14:59:26+0000",
            "content": "I'll look at the new log, but, quickly one correction: Zoie writes first into a RAMDir, and then periodically uses addIndexesNoOptimize to fold that RAM index into the \"real\" one.\n\nSo you have to be careful when you \"grep\" because for segments_2j, all of the 'delete \"segments_2j\"' look like they are in the RAMDir (the thread is ConsumerThread), and all but one of the 'wrote segments file \"segments_2j\"' are also to the RAMDir. ",
            "author": "Michael McCandless",
            "id": "comment-12931031"
        },
        {
            "date": "2010-11-11T15:14:34+0000",
            "content": "Also, I like that you detect 0-bytes on close!  However, I'm not sure it's working right.  EG line 1,017,585 has this:\n\njava.lang.Exception: 11:02:18,639 [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@7636d59a] FOUND ONE! closing 0kb IndexOutput, file: _65.fnm, file.length():0, bytesWritten: 0\n\n\n\nBut then shortly thereafter (line 1,017,604) I see that _65.fnm is 1749 bytes long.  Maybe the code you added for this warning is failing to take into account the buffered bytes?  Ie, instead of calling file.length() you should call IndexOutput.getFilePointer()?  Hmm, but if you call file.length() after the file really is closed... then that ought to be correct. ",
            "author": "Michael McCandless",
            "id": "comment-12931034"
        },
        {
            "date": "2010-11-11T15:33:52+0000",
            "content": "When you print the TRACE output saying that a file is being written, can your also print which dir instance we are \"in\"?  I can can see that suddenly segments_2j is opened for writing at 11:03:27,653 but it's not clear which directory that is.  Maybe print the threads stack trace at that point?\n\nIt looks like this 0 length files are being opened (by something) but then never closed.\n\nAlso: I see lines with \"Writing _2q.fdx\" where the directory contents on that line (and lines above it) show _2q.fdx clearly exists.  Yet, you had added an assert to check this very case but the assert never tripped?  So something is wrong.  EG are you sure you're running the JRE with assertions enabled?\n\nMaybe when you print out the full file listing, in addition to the size of each file, also print out the .fileModified result?  This can help us confirm that files are getting overwritten. ",
            "author": "Michael McCandless",
            "id": "comment-12931044"
        },
        {
            "date": "2010-11-11T15:55:04+0000",
            "content": "About 'segments_2j' occuring multiple times. I forgot to mention that we have two indexes operating at the same time... one for assets, one for relations.\nSo adding the directory + RAM/disk index in the logging sounds like a very good plan indeed.\n\nAbout the 0-bytes on close detection logs, seems we log this a few lines too early (before super.close is called instead of after) - whoops... will correct this and run again.\n\n\nIt looks like this 0 length files are being opened (by something) but then never closed.\n\nI'll see if we can also add some logging to detect (including stack-trace) who opened a file but never closes it...\n\n\nEG are you sure you're running the JRE with assertions enabled?\n\nPretty sure it is not, we'll turn assertions on.\n\n\nwhen you print out the full file listing, in addition to the size of each file, also print out the .fileModified result?\n\nWill do. ",
            "author": "Nico Krijnen",
            "id": "comment-12931049"
        },
        {
            "date": "2010-11-11T16:59:24+0000",
            "content": "I'll see if we can also add some logging to detect (including stack-trace) who opened a file but never closes it..\n\nActually you can use the MockDirectoryWrapper in Lucene's unit tests for this \u2013 it tracks open inputs & outputs and then throws an exception on close if anything is still open.  You should modify it to print all open inputs/outputs instead of throwing an exception, for this usage. ",
            "author": "Michael McCandless",
            "id": "comment-12931081"
        },
        {
            "date": "2010-11-16T16:17:08+0000",
            "content": "We did a few more runs with lots more logging and we think we have pinpointed the cause of the issue. Logs and a short analysis is attached: eof-extra-logging-4-analysis.txt\n\nWe added logging to track files that are opened for read and write. At the moment the 'read past EOF' happens, no files are still open for writing. So it does not seem as if a file is opened, but never closed. However we did find another interesting entry:\n\n\n\tSome time before the 'read past EOF' we see some activity in the disk index on the segments_... file that is 'locked' by the zoie snapshot.\n\t\n\t\t'our' segments_... file is deleted (the logged dir listings show that it does not exist anymore after that)\n\t\t'our' segments_... file is written to. At this point it is created again, but becomes 0 kb, which at a later point causes the 'read past EOF'.\n\t\n\t\n\n\n\nWe added more logging to find out more about when and who is 'setting' or 'changing' the 'generation' in SegmentInfos.\n\nThe logs from that run seem to indicate that at some point SegementInfos.generation seems to 'wrap' to a lower value and earlier generation numbers get re-used.\n\nIn ZoieIndexDeletionPolicy, a Snapshot is initialized using a certain IndexCommit. Zoie doesn't take into account that Lucene may re-use segments filenames, no locking is applied to this file whatsoever in terms of keeping Lucene from re-using this specific segments filename.\n\nAFAICT by going through the code in SegmentInfos, the generation counter is reset in SegmentInfos.read(Directory). When looking at the log files and singling out the value of generation, in our case it doesn't even reach a value above 118. The segments filename of our Snapshot is 'segments_2q' which translates to a generation of 98. After a while, Lucene deletes this file on disk (because the name is re-used?) in a call to FSDirectory.deleteFile. However, our backup is still running at that point. Somehow this file is written to disk a moment later and on the next read, we get the 'read past EOF' error.\nIt's not completely clear to me, but why is the generation counter reset on read(Directory)? Is it because the file is determined through FindSegmentsFile(Directory).run()?\n\nAlthough this could be interpreted like a flaw in ZoieIndexDeletionPolicy, I think this should be worked around in Lucene (correct me if I'm wrong).\n\nWe can attempt some kind of 'fix' to skip generations corresponding to segment filenames used by the '_currentSnapshots' variable in ZoieIndexDeletionPolicy. But the IndexDeletionPolicy API or SegmentInfos class does not really provide a nice way of doing that and it doesn't feel like a proper fix.\n\nIs there a specific reason for the generation to 'wrap around' or be re-used within hours?\nLooking at the code in SegmentInfos I do not see any explicit logic or reasons for re-using earlier generation numbers. ",
            "author": "Nico Krijnen",
            "id": "comment-12932519"
        },
        {
            "date": "2010-11-16T23:56:46+0000",
            "content": "Can you print the full stack trace when files are opened for writing?  Ie we need to know who wrote the zero length segments_2q.\n\nAlso, can you post \"svn diff\" output against Lucene's sources?  This would help me understand the log file.\n\nDid you instrument each file-copy being done by the backup process?  And, when the backup process starts.\n\nOn the next run, can you enable the static infoStream in SegmentInfos.java?  This will print details about how it's finding the segments file.\n\nAlso, can you not turn on infoStream for IndexWriters against the RAMDirs?  This should cut down drastically on the log file.\n\nLucene normally should never re-use a segments file \u2013 the geneation only ever increase on each commit to the index.  Yes, SegmentInfos.read sets the generation in SegmentInfos, but this is only called once, upon creating a new SegmentInfos().  It should never be overwritten later by Lucene calling read again.\n\nSo long as the deletion policy is keeping that commit point alive (segments_2q), Lucene should not be deleting it.\n\nI sometimes see \"writing <filename>\", eg:\n\n\n13:27:02,554 [http-8080-2] TRACE com.ds.acm.engine.search.zoieimpl.core.DirectoryManager - Directory[lockID=lucene-23f3e69abbd639b3b4a1db928c1b323d, filename=assetIndex] writing _5t.tvd, directory contents: _2q.fdt(size=969134416, modified=16:41:57,000)\n\n\n\nand other times \"creating output\":\n\n\n13:26:51,732 [proj.zoie.impl.indexing.internal.RealtimeIndexDataLoader@39f46204] DEBUG org.apache.lucene.store.SimpleFSDirectory - Creating output for _66.tvx\n\n\n\nWhy the difference?  Like where in the code are you printing these? ",
            "author": "Michael McCandless",
            "id": "comment-12932719"
        },
        {
            "date": "2010-11-23T14:58:44+0000",
            "content": "Full log, stripped log and diffs against Lucene/Zoie. ",
            "author": "Jan te Beest",
            "id": "comment-12934849"
        },
        {
            "date": "2010-11-23T15:01:44+0000",
            "content": "The proper zip file containing full log, stripped log, svn-diff against lucene and git patch against zoie. ",
            "author": "Jan te Beest",
            "id": "comment-12934850"
        },
        {
            "date": "2010-11-23T15:33:41+0000",
            "content": "Hi Michael,\n\nI'm one of Nico's colleagues and I've taken over where he left off.\n\nAfter a lot of testing and debugging, I have found a workaround to the issue and I've collected more logging. \nHopefully this will help to find a real fix (be it in Zoie of Lucene) instead of the dirty hack I've put in the code right now.\n\nAttached is a zip-file with a full log (eof-logging-9.log) the same log stripped down to a period where the backup is happening, i.e. between creating the Snapshot and the moment where the 'read past EOF' is happening (stripped-log.log). The other to files are a svn-diff against lucene and a git patch against zoie.\n\nFirst let me try to explain what I think is happening.\n\n\n11:50:07,449 [http-8080-exec-4] DEBUG proj.zoie.impl.indexing.internal.ZoieIndexDeletionPolicy - Init Snapshot segmentsFileName=segments_5e\n\nSnapshot is initialized with IndexCommit(segments_5e)\n\nIt is not really apparent from this log as I had to restart the server due to those \"load manager has stopped\" ZoieExceptions, but the behaviour is the same as in all other test runs I did.\nAll files are properly written to the .snapshot file, including the segments_5e file. \n\nAfter the backup completes, the Snapshot is dereferenced.\n\n12:43:06,988 [Finalizer] DEBUG proj.zoie.impl.indexing.internal.ZoieIndexDeletionPolicy - Snapshot(IndexFileDeleter.CommitPoint(segments_5e)).refCount=0\njava.lang.Exception: 12:43:06.988[Finalizer]\n\n\tat com.ds.util.log.TraceUtil.stackTrace(TraceUtil.java:20)\n\tat proj.zoie.impl.indexing.internal.ZoieIndexDeletionPolicy$Snapshot.decRef(ZoieIndexDeletionPolicy.java:139)\n\tat proj.zoie.impl.indexing.internal.ZoieIndexDeletionPolicy$Snapshot.close(ZoieIndexDeletionPolicy.java:123)\n\tat proj.zoie.impl.indexing.internal.ZoieIndexDeletionPolicy$Snapshot.finalize(ZoieIndexDeletionPolicy.java:148)\n\tat java.lang.ref.Finalizer.invokeFinalizeMethod(Native Method)\n\tat java.lang.ref.Finalizer.runFinalizer(Finalizer.java:83)\n\tat java.lang.ref.Finalizer.access$100(Finalizer.java:14)\n\tat java.lang.ref.Finalizer$FinalizerThread.run(Finalizer.java:160)\n\n12:43:06,991 [Finalizer] DEBUG proj.zoie.impl.indexing.internal.ZoieIndexDeletionPolicy - Snapshot(IndexFileDeleter.CommitPoint(segments_5e)), refcount is now -1\n\n\n\nNow something is making the segments_5e file 0 bytes, I've not been able to figure out why this is happening though. I'll try to get some proper logging about this.\n\nWhere the 'read past EOF' happens is quite clear at this point however.\n\nWhen a new IndexFileDeleter is initialized and the directory is scanned for segments_* files, i.e.\n\n        if (fileName.startsWith(IndexFileNames.SEGMENTS)) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n\n\n\nThis piece of code yields the EOF error, which is obvious as the segments_ file is 0 bytes.\n\n          SegmentInfos sis = new SegmentInfos();\n          try {\n            sis.read(directory, fileName);\n          } catch (FileNotFoundException e) {\n\n\n\nI added another check to the \n\nif (fileName.startsWith(IndexFileNames.SEGMENTS))\n\n. However that's not solving the problem, rather working around it.\n\n        long fileLength = directory.fileLength(fileName);\n        if (fileName.startsWith(IndexFileNames.SEGMENTS) && fileLength <= 0) {\n        \tmessage(\"init: file \"+fileName+\" is invalid (has no length), skipping further handling\");\n        }\n        \n        if (fileName.startsWith(IndexFileNames.SEGMENTS) && fileLength > 0) {\n\n          // This is a commit (segments or segments_N), and\n          // it's valid (<= the max gen).  Load it, then\n          // incref all files it refers to:\n\n\n\nWe don't see any more errors with this hack (in fact I was able to do 10 backups of a 21GB index in a row). The segments_ files are deleted from the index directory after a while as well, so it's not like they have a positive refcount anywhere else (if I understand correctly).\n\nSo, somewhere in between the Snapshot being closed and a new IndexFileDeleter initialized the segments_* something is writing 0 bytes to that segments_* file.\nLike said before, I have not been able to find the place where this happens. As it is only happening under heavy load (I had 25 threads reading and writing the index besides backing up the index to the snapshot file), I'm guessing it may be some synchronization issue?\n\nPerhaps you get an idea now, if you want me to put in more logging or do something else to clear it up, just give me a hint.\n\nCheers,\nJan te Beest ",
            "author": "Jan te Beest",
            "id": "comment-12934857"
        },
        {
            "date": "2010-11-23T17:29:32+0000",
            "content": "On your workaround, I think that should work \u2013 you're having IFD\ndisregard zero length segments files.\n\nAre you running with assertions enabled?  Maybe we'll catch\nsomething...\n\nI really don't like that \"refcount is now -1\" \u2013 such a thing should\nnever happen to a refCount!  But looking at ZoieIDP's sources I think\nthat's harmless.  It has a finalizer that first sets refCount to 0 and\nthen calls close...\n\nSo the backup completes successfully, after which the segments_5e\nexists as a (correct) non-zero file.  Then the snapshot is released,\nand at that point, instead of the file being deleted (as we'd expect),\nsomething is somehow making it 0 bytes.\n\nCan you try modifying FSDir.fsync?  First, check if they file\nabout-to-be-sync'd in fact exists (throw exception or warn if not);\nsecond, if we are syncing a segments_N file, print its name & full\nstack trace?  I wonder if somehow we are syncing these files after\nthey got deleted...\n\nAlso: can you try upgrading to the latest 3.0.x tip (svn checkout\nhttps://svn.apache.org/repos/asf/lucene/java/branches/lucene_3_0)?\nThis doesn't sound like any bug we've fixed on 3.0.x but it's worth a\nshot \n\nI see strange output for the backup, eg \"Backup to file _7c.prx,\ndataLen: 0\" and then \"Backup to file _7c.prx DONE, written: 8\" \u2013 why\nis that?  (A number of files show this, but then a bunch of others\nlook like \"correct\" sizes).  Are you sure the backup copy of\nsegments_5e is actually valid?\n\nYou should probably mark ZoieIDP.lastSnapshotSegmentsFileName as\nvolatile.\n\nOK digging through the log... it looks like IW is closed, committing\nsegments_5f and protecting segments_5e from deletion.  Then, and\nIndexReader is opened (to do deletes) and it looks like that deletes\nsegments_5e because the next IW that's opened no longer sees\nsegments_5e (despite that the backup process is still going).\n\nCan you double check that when Zoie opens an IndexReader for deletions\nit's passing the ZoieIDP instance that's protecting segments_5e?\n\nThat's a serious problem, but, it cannot explain the zero length\nfiles... unless: does Zoie open a read/write file (against the file it\nneeds to copy) when it does its backups? ",
            "author": "Michael McCandless",
            "id": "comment-12934913"
        },
        {
            "date": "2010-11-23T20:17:56+0000",
            "content": "Here's the code in zoie that exports index in class DefaultDirectoryManager:\nWe accidentally opened the file in \"rw\" mode. But there's no write operations to the file. Can you test whether changing it to \"r\" mode makes any difference?\n\nThanks!\n\n  public long transferFromFileToChannel(String fileName, WritableByteChannel channel) throws IOException\n  {\n    long amount = 0;\n    File file = new File(_location, fileName);\n    RandomAccessFile raf = null;\n    FileChannel fc = null;\n    try\n    {\n      raf = new RandomAccessFile(file, \"rw\");\n      fc = raf.getChannel();\n      long dataLen = fc.size();\n      amount += ChannelUtil.writeLong(channel, dataLen);\n      amount += fc.transferTo(0, dataLen, channel);\n    }\n    finally\n    {\n      try\n      \n{\n      if (fc != null) fc.close();\n      }\n finally\n      {\n        if (raf != null) raf.close();\n      }\n    }\n    return amount;\n  } ",
            "author": "Xiaoyang Gu",
            "id": "comment-12935025"
        },
        {
            "date": "2010-11-23T22:20:28+0000",
            "content": "We accidentally opened the file in \"rw\" mode. \n\nOK, phew   So that explains how they became 0 length.\n\nBut: can you also check where Zoie opens the IndexReader to apply deletions?  I suspect that IndexReader is not being provided the snapshot deletion policy... ",
            "author": "Michael McCandless",
            "id": "comment-12935082"
        },
        {
            "date": "2010-11-23T23:15:20+0000",
            "content": "Yes, I was just looking at that part.\n\nCan you test with the following patched method in DiskSearchIndex class?\n\n  @Override\n  protected IndexReader openIndexReaderForDelete() throws IOException {\n    Directory directory = _dirMgr.getDirectory(true);\n    if (IndexReader.indexExists(directory))\n{\t\t\n      return IndexReader.open(directory, _deletionPolicy, false);\n    }\n    else\n{\n      return null;\n    }\n  } ",
            "author": "Xiaoyang Gu",
            "id": "comment-12935118"
        },
        {
            "date": "2010-11-23T23:16:59+0000",
            "content": "The \"rw\" mode shouldn't explain anything, since we don't write anything, it doesn't affect the state of the file at least for MAC OS.\n\nBut the missed deletion policy could cause deletion of files that shouldn't be deleted and then the \"rw\" mode could create some 0 length files. ",
            "author": "Xiaoyang Gu",
            "id": "comment-12935121"
        },
        {
            "date": "2010-11-23T23:42:33+0000",
            "content": "I already reproduced the same Exception here and the above patch at least fixes it in the sense that my code for reproducing it would stop to have Exception.\n\nI committed a patch on my master branch.\n\nThanks to everybody working on it. ",
            "author": "Xiaoyang Gu",
            "id": "comment-12935130"
        },
        {
            "date": "2010-11-23T23:48:01+0000",
            "content": "at git@github.com:xiaoyang/zoie.git at commit: af19217 ",
            "author": "Xiaoyang Gu",
            "id": "comment-12935134"
        },
        {
            "date": "2010-11-24T00:32:02+0000",
            "content": "taking in Nico's patch for file channel bug ZOIE-53 and now use commit: e6c53ed ",
            "author": "Xiaoyang Gu",
            "id": "comment-12935152"
        },
        {
            "date": "2010-11-24T08:41:21+0000",
            "content": "First of all, many thanks for your support (and patience at it)!\n\n\nAre you running with assertions enabled? Maybe we'll catch\nsomething...\nWell I had, but somehow the option to the JVM got lost when switching between git branches. \nI'll turn it on again before testing with Xiaoyang's patches merged into my local git repository.\n\nLooking at the patches, I have a good feeling they will solve the issue.\n\nXiaoyang, I see a patch against RealtimeIndexDataLoader as well. Does it have anything to do with the 'load manager stopped' errors I encountered?\nI have to say though that I didn't see those errors when the backup process didn't fail.\n\n\nAlso: can you try upgrading to the latest 3.0.x tip (svn checkout\nhttps://svn.apache.org/repos/asf/lucene/java/branches/lucene_3_0)?\nThis doesn't sound like any bug we've fixed on 3.0.x but it's worth a\nshot \nI'll do that anyway, I like being at the tip of the branch \n\n\nI see strange output for the backup, eg \"Backup to file _7c.prx,\ndataLen: 0\" and then \"Backup to file _7c.prx DONE, written: 8\" - why\nis that? (A number of files show this, but then a bunch of others\nlook like \"correct\" sizes). Are you sure the backup copy of\nsegments_5e is actually valid?\nWe actually encounter this regularly for any files other than segments_*, it seems harmless though.\nAs for the segments_5e being valid at that point; yes it is.\n\nYou should probably mark ZoieIDP.lastSnapshotSegmentsFileName as volatile.\nYou're totally right, how could I have missed that?\n\nOK, I'll do some more tests and let you know the outcome. ",
            "author": "Jan te Beest",
            "id": "comment-12935256"
        },
        {
            "date": "2010-11-24T15:11:10+0000",
            "content": "Splendid, it's working like a charm now!\n\nWe're using lucene+zoie as a backend to our DAM system (http://elvisready.com). Most of our clients have\nmultiple wire-feeds coming in 24/7 and twice this issue left a corrupted index behind. Which was\neasily fixed by deleting the 0k segments file, but it was really scary nonetheless.\n\nI won't attach the log file as it's rather boring now, but if you want to take a look let me know and I'll post it anyway.\n\nThanks again for your help! ",
            "author": "Jan te Beest",
            "id": "comment-12935351"
        },
        {
            "date": "2010-11-24T15:38:58+0000",
            "content": "OK I'm glad to hear it's solved!\n\nResolving as Invalid since this wasn't a Lucene problem. ",
            "author": "Michael McCandless",
            "id": "comment-12935364"
        },
        {
            "date": "2010-11-24T15:41:59+0000",
            "content": "Thanks for all the help guys! We greatly appreciate all the insights and thorough responses.\n\nThe fixes made to ZOIE by Xiaoyang Gu have indeed resolved the issue. For details see:\n\nhttp://snaprojects.jira.com/browse/ZOIE-51 ",
            "author": "Nico Krijnen",
            "id": "comment-12935366"
        },
        {
            "date": "2010-11-24T17:27:17+0000",
            "content": "regarding \"I see a patch against RealtimeIndexDataLoader as well. Does it have anything to do with the 'load manager stopped' errors I encountered?\"\n\nThis class hasn't been changed since august.\n\nfatal exception during indexing would kill the indexing thread (load manager thread). After any such exception, you will see that error message.\nAt that point, we cannot recover and it makes no sense to continue indexing.\n\nIn Zoie's mbean, there's a HEALTH level value. When that value turns non-0, the system needs some serious attention.\n\nYou can use JMX to monitor the system health remotely. ",
            "author": "Xiaoyang Gu",
            "id": "comment-12935410"
        },
        {
            "date": "2010-11-25T08:12:28+0000",
            "content": "OK, thanks for the info. ",
            "author": "Jan te Beest",
            "id": "comment-12935680"
        }
    ]
}