{
    "id": "LUCENE-6712",
    "title": "GeoPointField should cut over to DocValues for boundary filtering",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.3",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Currently GeoPointField queries only use the Terms Dictionary for ranges that fall within and on the boundary of the query shape.  For boundary ranges the full precision terms are iterated, for within ranges the postings list is used.\n\nInstead of iterating full precision terms for boundary ranges, this enhancement cuts over to DocValues for post-filtering boundary terms. This allows us to increase precisionStep for GeoPointField thereby reducing the number of terms and the size of the index. This enhancement should also provide a boost in query performance since visiting more docs and fewer terms should be more efficient than visiting fewer docs and more terms.",
    "attachments": {
        "LUCENE-6712.patch": "https://issues.apache.org/jira/secure/attachment/12748329/LUCENE-6712.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14650516",
            "author": "Nicholas Knize",
            "date": "2015-08-01T20:01:14+0000",
            "content": "Initial patch with the following changes:\n\n\n\tadds a GeoPointTermQueryConstantScoreWrapper for cutting over to doc values on boundary terms\n\tadds a GeoPointQueryPostFilter interface for Query specific filtering\n\treduces precision_step from 6 to 8 (8 terms per point instead of 11)\n\n\n\nInitial rough performance benchmarks indicate ~20% boost in query performance and ~42% smaller index (still need to run some due diligence on these numbers).  "
        },
        {
            "id": "comment-14651974",
            "author": "Nicholas Knize",
            "date": "2015-08-03T15:18:26+0000",
            "content": "Updated patch includes the following:\n\n\n\tadded GeoPointTermQueryConstantScoreWrapper accidentally left out of last patch (forgot to add the file)\n\treduces precision_step to 9 to further reduce range recursion and index size\n\tremoved some duplicate diffs from LUCENE-6704\n\n\n\nDue Diligence Benchmarks (on 60M point test data):\n\nindex time:  454.891 ms from 633.196 ms (28% performance gain)\nindex size: 3.9G from 4.7G (17% reduction)\nsearch time: 0.018 ms/query from 0.028 ms/query (28% performance gain) "
        },
        {
            "id": "comment-14653595",
            "author": "Michael McCandless",
            "date": "2015-08-04T13:08:31+0000",
            "content": "This looks great!  The performance improvements are awesome, though,\nthis is mixing up separate changes I think?  One change is cutover to\ndoc values for the point filtering of each lat/lon, and the other is\nchanging the lower detail level and higher prec step?\n\nYou are using SortedNumeric DVs, which allows for multiple values per\ndoc, but at search time it seems like you only look at the first\nvalue?  Shouldn't you iterate through all values and accept the docs\nif any of them were in-bounds?  Can you add a test case that exposes\nthis?  And I guess update javadocs to make it clear multi-valued is\nallowed?  Hmm and we should remove mention of LUCENE-6481\nfrom the GeoPointField javadocs (it's fixed!).\n\nCan we rename GeoPointPostFilter.filter to .accept?  Just to make it\nclear that a true value returned means you keep it...\n\nWhy even have a DefaultGeoPointQueryPostFilter (bbox shape)? Seems\nlike it should be abstract and each query impl should provide it?  And\nwe should add a BBoxGeoPointTermsEnum?\n\nActually why make a separate GeoPointPostFilter interface?  Couldn't\nGeoPointTermsEnum just have an abstract acceptLatLon method?\n\nIt looks like you continue using full precision terms (to the detail\nlevel) to approximate the shape's boundary right?  But, with this\ncutover to DVs, you now have the freedom to use lower precision terms\neven on the boundaries... not sure it's necessary/helpful, but it\nwould reduce max number of terms in the adversary cases, but mean more\npost-filtering. "
        },
        {
            "id": "comment-14654281",
            "author": "Nicholas Knize",
            "date": "2015-08-04T20:12:57+0000",
            "content": "Awesome! Thanks for the review Mike! Updated patch to address comments is attached.\n\nthis is mixing up separate changes I think? One change is cutover to doc values for the point filtering of each lat/lon, and the other is changing the lower detail level and higher prec step?\n\nIndeed. The former gives search performance improvements, the latter gives indexing performance improvements. I can split these into 2 patches if desired? That way we can separately investigate the impact of changing the precision value?\n\nShouldn't you iterate through all values and accept the docs if any of them were in-bounds? Can you add a test case that exposes this?\n\n++ Thanks for pointing that out! I had intended to change that.  Fixed in the attached patch - I also added explicit multi-valued documents and testing to cover this.  Random multi-valued documents would be nice, though I don't think it blocks the patch?\n\nCouldn't GeoPointTermsEnum just have an abstract acceptLatLon method?\n\n++ I had gone back and forth about this a couple times. With DV post filtering it makes more sense to now have GeoPointTermsEnum be abstract with an abstract postFilter method. Before, most of the logic was shared, only crosses and within were fully overridden in Poly and Distance query classes. I went ahead and made the change in the attached patch.\n\nIt looks like you continue using full precision terms to approximate the shape's boundary right?\n\nNo, the Range instances are now using lower precision terms for the boundaries (up to PRECISION_STEP * MAX_SHIFT - which works out to no higher than level 18). GPTQConstantScoreWrapper iterates the docIds in the postings list.  So full precision terms (32 > level >18) are never used (really just wasting space in the index). I suppose I could modify GeoPointField to only index up to a shift of PRECISION_STEP * MAX_SHIFT and further reduce the index size? "
        },
        {
            "id": "comment-14654547",
            "author": "Michael McCandless",
            "date": "2015-08-04T23:53:03+0000",
            "content": "Thanks Nicholas Knize!  I'll look more closely at the patch, but quick responses:\n\nThe former gives search performance improvements, the latter gives indexing performance improvements. I can split these into 2 patches if desired? That way we can separately investigate the impact of changing the precision value?\n\nI don't think we need to separate ...\n\nRandom multi-valued documents would be nice, though I don't think it blocks the patch?\n\nI agree.\n\nNo, the Range instances are now using lower precision terms for the boundaries\n\nOh I see, good!  Yeah seems like we shouldn't index any higher precision terms if we never use them in the queries?  Hmm, though this may be tricky with NumericType (it always indexes the full precision term, and then shifts of precStep off that). "
        },
        {
            "id": "comment-14655076",
            "author": "Michael McCandless",
            "date": "2015-08-05T09:36:36+0000",
            "content": "The latest patch looks great, I'll commit soon... "
        },
        {
            "id": "comment-14655089",
            "author": "ASF subversion and git services",
            "date": "2015-08-05T09:45:18+0000",
            "content": "Commit 1694156 from Michael McCandless in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1694156 ]\n\nLUCENE-6712: use doc-values for GeoPointField boundary cell post filtering "
        },
        {
            "id": "comment-14655090",
            "author": "Michael McCandless",
            "date": "2015-08-05T09:45:36+0000",
            "content": "Thanks Nicholas Knize! "
        },
        {
            "id": "comment-14713182",
            "author": "Shalin Shekhar Mangar",
            "date": "2015-08-26T13:06:00+0000",
            "content": "Bulk close for 5.3.0 release "
        }
    ]
}