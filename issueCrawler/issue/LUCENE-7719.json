{
    "id": "LUCENE-7719",
    "title": "UnifiedHighlighter doesn't handle some AutomatonQuery's with multi-byte chars",
    "details": {
        "labels": "",
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Resolved",
        "type": "Bug",
        "components": [
            "modules/highlighter"
        ],
        "fix_versions": [
            "7.0"
        ]
    },
    "description": "In MultiTermHighlighting, a CharacterRunAutomaton is being created that takes the result of AutomatonQuery.getAutomaton that in turn is byte oriented, not character oriented.  For ASCII terms, this is safe but it's not for multi-byte characters.  This is most likely going to rear it's head with a WildcardQuery, but due to special casing in MultiTermHighlighting, PrefixQuery isn't affected.  Nonetheless it'd be nice to get a general fix in so that MultiTermHighlighting can remove special cases for PrefixQuery and TermRangeQuery (both subclass AutomatonQuery).\n\nAFAICT, this bug was likely in the PostingsHighlighter since inception.",
    "attachments": {
        "LUCENE_7719.patch": "https://issues.apache.org/jira/secure/attachment/12862120/LUCENE_7719.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15890090",
            "date": "2017-03-01T12:43:11+0000",
            "content": "Wow, this is a great catch Dmitry Malinin!  Thank you for opening the precursor issue.\n\nAutomatonQuery.getAutomaton really must return a UTF8-oriented\nautomaton because that matches how the terms are indexed into Lucene,\nand what the automaton will be intersected with, to run the query.\n\nWe should fix the javadocs to say this.\n\nAnd it is sort of annoying that these differences are not strongly\ntyped, but the Automaton class is really agnostic to what ints you are\nputting onto its transitions.\n\nBut, yeah, for highlighting, we are operating in UTF16 space, and so I\nthink we need some way to have the CharacterRunAutomaton interface\non top of a UTF8 automaton?  Maybe we should abstract out a separate\ninterface that MultiTermHighlighting would use?  It seems it only\nuses the run method, to test if a given term is accepted?  And\nthen, as you suggested, we could easily convert the incoming char[] to\nUTF8 BytesRef and use the ByteRunAutomaton.run on that. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15957326",
            "date": "2017-04-05T17:57:28+0000",
            "content": "Here is a patch for consideration.\n\nFirst of all, I realized that this bug is very minor because only some AutomatonQuery.getAutomaton are binary (I thought they all were); others are char based.  The ones that are binary in Lucene are PrefixQuery and TermRangeQuery, both of which are special cased in MultiTermHighlighting.  So practically speaking I think the only users to see this bug would be anyone building a custom AutomatonQuery.  Nonetheless this should be cleaned up and actually tested.\n\nThe patch:\n\n\tAdds a fairly thorough test with lots of randomized unicode, testing PrefixQuery, TermRangeQuery, WildcardQuery, and FuzzyQuery\n\tremoves the special casing of AutomatonQuery subclasses in MultiTermHighlighting.  AQ is handled generically now.\n\tadded AutomatonQuery.isAutomatonBinary() with a new field to match.\n\tif the AQ.getAutomaton is not binary, we follow a simple/obvious path\n\tif the automaton is binary, then I produce a CharRunAutomaton implementing run() to navigate the Automaton char by char.  It makes a BytesRunAutomaton on the automaton.  I inlined the one and two byte UTF char logic from UnicodeUtil.UTF16toUTF8.  If the char needs more bytes, then I call out to UTF16toUTF8 and work off the generated byte array for the remaining chars.  I think this is more maintainable, albeit slower, than reproducing the logic.\n\n\n\nI added a perf TODO in MultiTermHighlighting.java to have CompiledAutomaton expose the ByteRunAutomaton so that we don't need to rebuild it here.  The construction cost seems less than trivial as it determinizes the automaton and does other work.  Is this a big deal?  It seems kinda sorta; it depends.   ",
            "author": "David Smiley"
        },
        {
            "id": "comment-15989866",
            "date": "2017-04-29T12:28:45+0000",
            "content": "Michael McCandless What do you think of the patch?  In particular, I wonder what you think of:\n\n\tAutomatonQuery.isAutomatonBinary().  This is a very simple/innocent addition.  It's a shame Automaton.isBinary (or something similar) doesn't exist.\n\tSee my TODO last paragraph above.  Also note even if that were done, the CompiledAutomaton isn't exposed by AutomatonQuery any way; so we'd need an accessor.  Perhaps alternatively AutomatonQuery might expose both a CharRunAutomaton and ByteRunAutomaton (i.e. move some of the code in this patch to there)?  If that wouldn't potentially be useful to other users then nevermind.\n\tThe approach to convert chars to bytes at each step\n\n ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16048646",
            "date": "2017-06-14T02:59:08+0000",
            "content": "Ping Michael McCandless since you've been involved with AutomatonQuery and automata in general. If you're too busy then I think the change to AutomatonQuery is innocent enough so I'm comfortable committing the patch as-is.\n\nI'm not sure if this will make 7.0 or not but I don't think it matters \u2013 no back-compat issue / API issue. ",
            "author": "David Smiley"
        },
        {
            "id": "comment-16052652",
            "date": "2017-06-17T02:59:18+0000",
            "content": "Commit d0b9d3459fd097dba677cdda170632f6fca5e042 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d0b9d34 ]\n\nLUCENE-7719: Generalize UnifiedHighlighter's support for AutomatonQuery ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16052653",
            "date": "2017-06-17T02:59:19+0000",
            "content": "Commit 42fdb549270b41ae164b90ea7bc001ceb7848b6d in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=42fdb54 ]\n\nLUCENE-7719: tests: Eliminate needless SuppressSysoutChecks and address lint warning ",
            "author": "ASF subversion and git services"
        }
    ]
}