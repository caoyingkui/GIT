{
    "id": "SOLR-2429",
    "title": "ability to not cache a filter",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.4"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "A user should be able to add \n{!cache=false}\n to a query or filter query.",
    "attachments": {
        "SOLR-2429.patch": "https://issues.apache.org/jira/secure/attachment/12483655/SOLR-2429.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Yonik Seeley",
            "id": "comment-13007122",
            "date": "2011-03-15T19:39:00+0000",
            "content": "The annoying part here is we need more metadata than just \"Query\" that we use now for a filter.\nUnfortunately, SolrIndexSearcher uses List<Query> everywhere.\n\nWe could create something like a SolrQuery extends Query that wrapped a normal query and added additional metadata (like cache options).  That's a bit messier since we'd have instanceof checks and casts everywhere though.\n\nAnother option is to create a SolrQuery class that does not extend Query - hence methods taking List<Query> would now need to take List<SolrQuery>\n\n\nclass SolrQuery {\n  Query q;\n  QParser qparser;\n  boolean cache;\n  ...\n}\n\n\n\nThoughts? "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13007217",
            "date": "2011-03-15T21:55:51+0000",
            "content": "why not extend Query? ... it could actually rewrite to the Query it wraps, giving us the best of both worlds.\n\nFWIW: it also seems like it would make sense for this type of syntax/decoration to work with the \"q\" param (skipping the queryResultCache) "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13007265",
            "date": "2011-03-15T23:08:48+0000",
            "content": "I'm not sure this is related \u2013 it could be \u2013 I'm looking writing a custom query from:\n\n  @Override\n  public Query getFieldQuery(QParser parser, SchemaField field, String externalVal)\n\n\n\nand it would be great to know if this is used as a filter or not \u2013 should it include scoring?  Are there ways to build the query where parts are cached and some is not?  \n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13007324",
            "date": "2011-03-16T02:52:46+0000",
            "content": "I'm with Hoss.  For many months now, I've been dreaming about the possibility of telling Solr to execute a query without caching the results. "
        },
        {
            "author": "David Smiley",
            "id": "comment-13007340",
            "date": "2011-03-16T03:58:41+0000",
            "content": "Heh, me too!  I was pondering this last night; I know specific queries will needlessly pollute the cache.  I was imagining a syntax such as this:  fq=\n{!cache=no}\nqueryhere "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13054207",
            "date": "2011-06-24T01:43:01+0000",
            "content": "Here's a patch that allows one to add cache=false to top level queries (main queries, filter queries, facet queries, etc).\n\nCurrently (without this patch) Solr generates the set of documents that match each filter individually (this is so they can be cached and reused).\n\nAdding cache=false to the main query prevents lookup/storing in the query cache.  Adding cache=false to any filter query causes the filterCache to not be used.  Further, the filter query is actually run in parallel to the main query and any other non-cached filter queries (which can speed things up if the base query or other filter queries are relatively sparse).\n\nThere is also an optional \"cost\" parameter that controls the order in which non-cached filter queries are evaluated so knowledgable users can order less expensive non-cached filters before expensive non-cached filters.\n\nAs an additional feature for very high cost filters, if cache=false and cost>=100 and the query implements the PostFilter interface, a Collector will be requested from that query and used to filter documents after they have matched the main query and all other filter queries.  There can be multiple post filters, and they are also ordered by cost.\n\nThe frange query (a range over function queries, background here:\nhttp://www.lucidimagination.com/blog/2009/07/06/ranges-over-functions-in-solr-14/\n) also now implements PostFilter.\n\nExamples:\n\n// normal function range query used as a filter, all matching documents generated up front and cached\nfq={!frange l=10 u=100}mul(popularity,price)\n\n// function range query run in parallel with the main query like a traditional lucene filter\nfq={!frange l=10 u=100 cache=false}mul(popularity,price)\n\n// function range query checked after each document that already matches the query and all other filters.  Good for really expensive function queries. \nfq={!frange l=10 u=100 cache=false cost=100}mul(popularity,price)\n\n "
        },
        {
            "author": "Koji Sekiguchi",
            "id": "comment-13068351",
            "date": "2011-07-20T13:09:34+0000",
            "content": "As Queries are wrapped into WrappedQuery when \n{!cache}\n is specified, Highlighter and FastVectorHighlighter cannot highlight them.\n\nUsing solr example:\n\nhttp://localhost:8983/solr/select/?q=headphones&hl=on&hl.fl=includes\n=> a snippet returned\n\nhttp://localhost:8983/solr/select/?q=\n{!cache=false}\nheadphones&hl=on&hl.fl=includes\n=> no snippets returned "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106216",
            "date": "2011-09-16T14:48:52+0000",
            "content": "bulk close for 3.4 "
        }
    ]
}