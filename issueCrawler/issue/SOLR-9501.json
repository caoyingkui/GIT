{
    "id": "SOLR-9501",
    "title": "Collapse filter should sometimes be cacheable instead of never",
    "details": {
        "components": [],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "None",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Major"
    },
    "description": "When SolrIndexSearcher.getDocSet(List<Query>queries) is called, it first checks if any implement the marker interface ScoreFilter, and if so it calls out to getDocSetScore[1] instead of continuing.  CollapsingPostFilter is the only Query implementing ScoreFilter.  There is a presumption here that any CollapsingPostFilter needs the score.  But this just isn't true; you can collapse with a min/max/sort on something that doesn't need the score.  So there is a needless performance hit here.\n\n [1] I don't like that getDocSetScore presumes the first query in the list is the scoring one \u2013 it's a poor API contract relationship; at a minimum the javadocs should be updated.  This holds for getDocSet as well since it passes through. Perhaps getDocSet could be modified to take a nullable scoring Query first arg.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-11T20:33:01+0000",
            "author": "David Smiley",
            "content": "I don't think a marker interface is the right design.  It's only possible for a PostFilter to use the score (right?), and so perhaps a method should be added to PostFilter.  PostFilter has one method getFilterCollector(IndexSearcher) to return a Collector.  Lucene Collector.needsScores() exists so perhaps we need nothing new after all?  Although getting the collector is not necessarily trivial only to throw away the result just to see what needsScores() returns.  \n\nPerhaps the related SolrIndexSearcher logic to support this should actually be in processFilter()?  getDocSet would then need to work with a Scorer somehow... (even if sometimes it's a dummy one) so it can call setScorer on each segment when it collects.\n\nRelated to this, CollapsingPostFilter.getCache() is hard-coded to return false.  Perhaps a non-cacheable query\n\nAny way, I'm punting on this for now. ",
            "id": "comment-15482357"
        },
        {
            "date": "2016-09-11T21:36:29+0000",
            "author": "David Smiley",
            "content": "What I said RE getCached might make no sense; PF's like this are supposed to return false since they can't really be cacheable by themselves.\n\nAlso related, I have a suspicion the needsScores boolean inside CollapsingPostFilter may be less than ideal, as it conflates two things: wether the Filter actually needs the scores itself to do its collapsing job, or wether some follow-on Collector (if any) needs scores.  In both cases it needs to get the scores, but if it's only the latter case then the overall needsScores() determination can wait until the time of execution when the delegate collector is in place, which can be interrogated with needsScores().  With that, I suspect some improvements could be made to avoid the brittle-looking logic in CPF's constructor that looks at the overall request to see if scores are needed in parts that aren't related to the CPF itself.  e.g. if the user sorting by score, then the delegate collector is going to have needsScores() return true (I think?) so it needn't find ways to detect all the possible circumstances in which a score might be used. ",
            "id": "comment-15482441"
        }
    ]
}