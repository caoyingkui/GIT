{
    "id": "SOLR-3628",
    "title": "SolrDocument uses user-provided collections unsafely",
    "details": {
        "affect_versions": "3.6,                                            4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Adding a RO Collection as the value of a field (ie. SolrDocument or SolrInputField) will result in an UnsupportedOperationException later on when adding more values to that field.\n\nThis happens because no defensive copy of collections are made. Instead, if a collection is given first, then it becomes the backing collection for the field. This can cause problems if the collection is modified after the fact or if a read-only collection is given (eg. Collection.unmodifiableList(...)).\n\nIt can be reproduced with:\n\nSolrDocument doc = new SolrDocument()\ndoc.addField(\"v\", Collections.unmodifiableList(new ArrayList<Object>()))\ndoc.addField(\"v\", \"a\")\n\nI've created a patch that includes a fix and a test with, essentially, the above. The patch just ensures that SolrDocument and SolrInputField always use a Collection they created as the value, rather than relying on what was given to them.",
    "attachments": {
        "solrdoc-ro-list-bug.patch": "https://issues.apache.org/jira/secure/attachment/12536697/solrdoc-ro-list-bug.patch",
        "solrdoc-ro-list-bug-comp.patch": "https://issues.apache.org/jira/secure/attachment/12537179/solrdoc-ro-list-bug-comp.patch",
        "SOLR-3628.patch": "https://issues.apache.org/jira/secure/attachment/12544682/SOLR-3628.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Tom Switzer",
            "id": "comment-13415553",
            "date": "2012-07-16T19:18:27+0000",
            "content": "A patch to the current trunk. Includes test case. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13417642",
            "date": "2012-07-18T20:18:00+0000",
            "content": "I seem to recall more then a few discussions in the past about how \"defensive\" APIs like this should be with respect to user provided collections and arrays \u2013 the trade off being GC overhead (if the client code and the solrj code both make defensive copies, we've doubled the number of shot lived objects)\n\nEither way: before 4.0 we should either commit this patch, or significantly improve the docs for SolrInputDocument and SolrInputField to make it clear that no copying is done and the code may modify the underlying Objects addded as fields "
        },
        {
            "author": "Tom Switzer",
            "id": "comment-13418295",
            "date": "2012-07-19T13:58:09+0000",
            "content": "One problem, I think, is that addValue (field) and addField (doc) are overloaded. It behaves different depending on if the call is the first time a value is being added, if it's an array, if it's a collection, or some other value. Perhaps a less contentious solution would be to make addValue/addField ALWAYS defensively copy collections, but keep the current setValue/setField behaviour. If I am setting a value to a collection, then I can see how a defensive copy may not be done. However, if I am \"adding\" a collection, it would seem I am appending the value to an already existing set.\n\nThis solution (and more documentation would be good too) would let people who are worried about excessive GC use setValue/setField to get what they want and those who just don't want to think about it use add/addField. "
        },
        {
            "author": "Tom Switzer",
            "id": "comment-13418321",
            "date": "2012-07-19T14:22:11+0000",
            "content": "Here is a patch which changes SolrInputField#addValue's & SolrDocument#addField's behaviour to always copy collection, but keeps SolrInputField#setValue's & SolrDocument#setField's behaviour to use whatever it is given. Also added a bit more to the docs. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13429742",
            "date": "2012-08-07T03:42:37+0000",
            "content": "rmuir20120906-bulk-40-change "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13451168",
            "date": "2012-09-08T00:18:19+0000",
            "content": "Perhaps a less contentious solution would be to make addValue/addField ALWAYS defensively copy collections, but keep the current setValue/setField behaviour. If I am setting a value to a collection, then I can see how a defensive copy may not be done. However, if I am \"adding\" a collection, it would seem I am appending the value to an already existing set\n\nThat sounds like a good approach ... assigning to myself to remind me to do a more thorough review of your patch and try to get this into 4.0 "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453254",
            "date": "2012-09-11T18:20:59+0000",
            "content": "updated patch to include a test that the field really is backed by the collection (since we now explicitly document it)\n\nwill commit a soon as full test run finishes "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13453291",
            "date": "2012-09-11T18:50:16+0000",
            "content": "Committed revision 1383520. - trunk\nCommitted revision 1383533. - 4x\n\nThanks Tom! "
        },
        {
            "author": "Commit Tag Bot",
            "id": "comment-13610879",
            "date": "2013-03-22T16:41:58+0000",
            "content": "[branch_4x commit] Chris M. Hostetter\nhttp://svn.apache.org/viewvc?view=revision&revision=1383533\n\nSOLR-3628: SolrInputField and SolrInputDocument are now consistently backed by Collections passed in to setValue/setField, and defensively copy values from Collections passed to addValue/addField (merge r1383520) "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13654173",
            "date": "2013-05-10T10:34:17+0000",
            "content": "Closed after release. "
        }
    ]
}