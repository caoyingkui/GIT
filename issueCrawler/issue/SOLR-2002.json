{
    "id": "SOLR-2002",
    "title": "improve build/tests",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "components": [
            "Build"
        ],
        "type": "Task",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "we are working on improving some functionality in lucene's build/tests, it would be good to improve the solr side to take advantage of it.\ncurrently its only sorta-kinda integrated and a bit messy.\ni'd like to do some incremental improvements piece-by-piece on this issue.",
    "attachments": {
        "SOLR-2002_lucenetestcase.patch": "https://issues.apache.org/jira/secure/attachment/12451556/SOLR-2002_lucenetestcase.patch",
        "SOLR-2002_core_contrib.patch": "https://issues.apache.org/jira/secure/attachment/12449567/SOLR-2002_core_contrib.patch",
        "SOLR-2002_testiter.patch": "https://issues.apache.org/jira/secure/attachment/12453060/SOLR-2002_testiter.patch",
        "SOLR-2002_localization.patch": "https://issues.apache.org/jira/secure/attachment/12451539/SOLR-2002_localization.patch",
        "SOLR-2002.patch": "https://issues.apache.org/jira/secure/attachment/12449387/SOLR-2002.patch",
        "SOLR-2002_timeout.patch": "https://issues.apache.org/jira/secure/attachment/12449790/SOLR-2002_timeout.patch",
        "SOLR-2002_replication.patch": "https://issues.apache.org/jira/secure/attachment/12449794/SOLR-2002_replication.patch",
        "SOLR-2002setupteardown.patch": "https://issues.apache.org/jira/secure/attachment/12449560/SOLR-2002setupteardown.patch",
        "SOLR-2002_testmethod.patch": "https://issues.apache.org/jira/secure/attachment/12451580/SOLR-2002_testmethod.patch",
        "SOLR-2002_lbhttpsolrserver.patch": "https://issues.apache.org/jira/secure/attachment/12457033/SOLR-2002_lbhttpsolrserver.patch",
        "TEST-org.apache.solr.spelling.suggest.SuggesterTest.txt": "https://issues.apache.org/jira/secure/attachment/12457281/TEST-org.apache.solr.spelling.suggest.SuggesterTest.txt",
        "SOLR-2002.junit.xml.formatter.patch": "https://issues.apache.org/jira/secure/attachment/12457219/SOLR-2002.junit.xml.formatter.patch",
        "SOLR-2002_merged.patch": "https://issues.apache.org/jira/secure/attachment/12453984/SOLR-2002_merged.patch",
        "SOLR-2002_dih.patch": "https://issues.apache.org/jira/secure/attachment/12457067/SOLR-2002_dih.patch",
        "SOLR-2002_buildfailed.patch": "https://issues.apache.org/jira/secure/attachment/12457221/SOLR-2002_buildfailed.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Robert Muir",
            "id": "comment-12888021",
            "date": "2010-07-13T21:28:25+0000",
            "content": "patch that cleans up tests a bit:\n\n\n\tit makes AbstractSolrTestCase extends LuceneTestCase\n\tfixes a few bugs in some tests (e.g. not calling super.setUp)\n\n\n\ni'd like to commit this shortly "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12888042",
            "date": "2010-07-13T22:05:06+0000",
            "content": "ok, I committed the first patch (963873 trunk, 963877 3x).\n\nOne good thing TODO: if solr has any random tests, it can now use the newRandom etc in case it fails, so its easy to reproduce. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12888816",
            "date": "2010-07-15T14:48:02+0000",
            "content": "when switching solr's base tests to extend lucene's, i noticed if you override setUp(), but neglected to call super.setUp(), you would get a strange exception:\njava.lang.IllegalArgumentException: maxClauseCount must be >= 1\nhttp://www.lucidimagination.com/search/document/f7769140c3557c78/error_in_building_solr_cloud_ant_example\n\nThis is because the code in tearDown to restore the max clause count restores an uninitialized (zero) saved clause count.\n(I actually found this helpful once i understood what was happening).\n\nThis patch changes this to explicit asserts, which are more helpful and tell you if you forgot to call super.setUp() or super.tearDown() when you override these methods. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12888826",
            "date": "2010-07-15T15:22:11+0000",
            "content": "Committed SOLR-2002setupteardown.patch revisions 964459 (trunk) 964461 (3x) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12888855",
            "date": "2010-07-15T17:11:27+0000",
            "content": "there is one single test in solr core that depends on contrib modules.\nI am confused about this test, as it seems to already test the functionality with core code (CSV) only to then also test it with contrib code (PDF)\nIn my opinion: core tests shouldnt depend on contrib modules.\n\nI propose either:\n\n\tapplying this patch, and removing the dependency of core tests on contrib.\n\tif this functionality (extraction) is considered core, then it should be moved out of contrib.\n\n\n\nCan someone take a look and give me their opinion? I think this would really start to make it easier to improve the build. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889135",
            "date": "2010-07-16T11:26:22+0000",
            "content": "Committed revision 964753 to trunk. However, I can't yet merge it to 3x, because in 3x the jetty tests use the example config, which wants to load of contrib/velocity (its in core in trunk, so no problem).\n\nI think the fix is for these tests, to not use the example config but copy it over to test-files and disable VRW.\n\n\n  // Try not introduce a dependency on the example schema or config unless you need to.\n  // using configs in the test directory allows more flexibility to change \"example\"\n  // without breaking configs.\n\n  public static String EXAMPLE_HOME=\"../../../example/solr/\";\n  public static String EXAMPLE_SCHEMA=EXAMPLE_HOME+\"conf/schema.xml\";\n  public static String EXAMPLE_CONFIG=EXAMPLE_HOME+\"conf/solrconfig.xml\";\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889209",
            "date": "2010-07-16T15:21:26+0000",
            "content": "ok, after backporting velocity changes, committed revision 964826 to 3x.\n\nwe could still consider in the future if these jetty tests should use the example schema or their own in test-files "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12889329",
            "date": "2010-07-16T21:10:04+0000",
            "content": "we could still consider in the future if these jetty tests should use the example schema or their own in test-files\n\nthe purpose of those tests is not just to test Jetty \u2013 it's to test that the example configs load and are usable. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889332",
            "date": "2010-07-16T21:15:14+0000",
            "content": "the purpose of those tests is not just to test Jetty - it's to test that the example configs load and are usable.\n\nThis is messy and should be fixed: these are jetty tests. If you truly believe this (I think you are wrong), then we should do the following:\n\nIf the example config should be tested to be loaded and usable:\n\n\n\tit should not be mixed in jetty tests, this is wrong! (as the comment describes)\n\twe should create a TestExampleConfig, and its purpose is to test various things about the example config, nothing more.\n\tthe example config used in said tests shouldnt load up shit from contrib.\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889335",
            "date": "2010-07-16T21:22:59+0000",
            "content": "To further my point, I will say that these \"example tests\" failed last night on both branches so if they are really unit tests as you claim, then the example config sucks, because it fails often.\n\nThis is why i think the two concerns should be separate: or it isnt a damn unit test at all. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12889344",
            "date": "2010-07-16T21:43:59+0000",
            "content": "If you truly believe this (I think you are wrong), then we should do the following:\n\nit's right there in the javadoc for SolrExampleTestBase\n\n\n * This should include tests against the example solr config\n\n\n\n...it has subclasses that use Jetty, and other subclasses that use embedded solr.\n\nthe example config used in said tests shouldnt load up shit from contrib.\n\nthe example config is the example config \u2013 it's the config we put up on a pedestal in each release and say \"this is what you should start with when writing your own config\".  we should test that those configs are actually usable w/o errors \u2013 that was the goal of the test\n\nIf the example configs suggest loading stuff from contrib, then we need to test that too.\n\n...if they are really unit tests as you claim...\n\na) I never claimed they were unit tests ... i called them \"tests\".  \nb) I have no interest in getting into a philosophical debate about unit vs functional vs integration tests.  \nc) I never stated an opinion about whether we need to test the usage of these configs in both in embedded clients and in jetty.\n\ni didn't write the test, and i didn't defend the use of Jetty for this \u2013 so pick a fight with someone else if that's your goal.  All i did was point out that changing the test to use configs different from those in the example directory defeats the point of the tests.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889352",
            "date": "2010-07-16T21:55:59+0000",
            "content": "it's right there in the javadoc for SolrExampleTestBase\n\nI'm not talking about Solr*Example*TestBase\n\nI am talking about Solr*Jetty*TestBase:\nits right here in the javadoc for SolrJettyTestBase:\n\n\n  // Try not introduce a dependency on the example schema or config unless you need to.\n  // using configs in the test directory allows more flexibility to change \"example\"\n  // without breaking configs.\n\n\n\nI pasted this before, but you are perhaps confused with Solr*Example*TestBase "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12889359",
            "date": "2010-07-16T22:15:21+0000",
            "content": "Actually i got confused and thought you were talking about SolrExampleJettyTest which is a decendent of SolrExampleTestBase \u2013 and i thought the comment you quoted was something you added (or were proposing be added).\n\nDefinitely my mistake.\n\nIf some \"Example\" tests exist, and verify that the example configs work, then by all means we should change any other tests that currently use \"example/solr/conf\" to use more isolated config files.\n\nI've got no problem with that. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12889375",
            "date": "2010-07-16T22:37:56+0000",
            "content": "Yeah, I added SolrJettyTestBase (and those comments) back in March cause I was sick of trying to change the example schema just to have loads of tests fail that should not have been depending on example.  I don't think I got as far as actually moving many existing tests off of example though. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889622",
            "date": "2010-07-18T13:56:58+0000",
            "content": "today this test (SolrRequestParserTest) was hanging infinitely because it wanted to connect to http://www.apache.org/dist/lucene/solr/. it was connecting but waiting for data infinitely.\n\nthis patch adds some reasonable (5s) timeouts to connect/read so it will fail instead of hanging\nfor > 15 minutes (before i killed it) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889633",
            "date": "2010-07-18T16:12:20+0000",
            "content": "attached is a patch with improvements to TestReplicationHandler:\n\n\tspeeding up the test and making it more reliable (see rQuery)\n\tremoving all scary warnings\n\tclosing a previously unclosed reader that was preventing it from cleaning up after itself.\n\n\n\nwould appreciate anyone thats willing to apply the patch and try running the test a few times to see if its more stable for them. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12889704",
            "date": "2010-07-19T00:09:31+0000",
            "content": "Committed the replication test improvements, revision 965327 965328 (3x)\n\nIf there are problems, we should just go back, but for me this fixes many problems (such as newname not found etc etc) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12896421",
            "date": "2010-08-08T22:18:45+0000",
            "content": "attached is a patch to vary locale and timezone randomly in tests, just like codecs and other defaults.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12896434",
            "date": "2010-08-09T01:58:54+0000",
            "content": "committed SOLR-2002_localization.patch revision 983495 (trunk) 983499 (3x) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12896443",
            "date": "2010-08-09T03:22:53+0000",
            "content": "attached patch switches remaining 'extends TestCase' to 'extends LuceneTestCase' for better coverage. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12896459",
            "date": "2010-08-09T06:30:49+0000",
            "content": "committed SOLR-2002_lucenetestcase.patch revision 983530 (trunk) 983533 (3x) "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12896522",
            "date": "2010-08-09T12:33:05+0000",
            "content": "(yeah i know i am abusing this issue)\n\nThis patch adds -Dtestmethod, in case you just want to run a single test method.\n\nExample:\n\n ant test-core -Dtestcase=TestIndexWriter -Dtestmethod=testDocCount\n...\njunit-sequential:\n    [junit] Testsuite: org.apache.lucene.index.TestIndexWriter\n    [junit] Tests run: 1, Failures: 0, Errors: 0, Time elapsed: 0.672 sec\n\n "
        },
        {
            "author": "Michael McCandless",
            "id": "comment-12896523",
            "date": "2010-08-09T12:39:10+0000",
            "content": "FANTASTIC!\n\nI've wanted this method for a VERY long time... "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12902531",
            "date": "2010-08-25T17:29:44+0000",
            "content": "attached is a patch for a -Dtests.iter\n\nThis lets you easily run a test multiple times without writing a loop in the shell or whatever, for example:\n\nant test -Dtestcase=TestRegexpRandom2 -Dtests.iter=3\nant test -Dtestcase=TestNumericRangeQuery32 -Dtestmethod=testInverseRange -Dtests.iter=100\n\n\n\nits useful for random tests, but i dont recommend running ant test -Dtests.iter=2 for example, because some tests aren't well behaved. but these can always be fixed at some later time, too. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12902604",
            "date": "2010-08-25T19:58:57+0000",
            "content": "committed -Dtests.iter in revision 989321. \n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12906688",
            "date": "2010-09-07T06:26:09+0000",
            "content": "since we merged lucene & solr, the build system has been somewhat of a mess.\n\nattached is a very early patch thats basically a reboot of the solr build:\n\n\tit reuses the logic from lucene's build\n\tits significantly faster, especially dependencies with lucene's up2date macros\n\tits nowhere near committable yet\n\n\n\nOne interesting thing found so far the solr contribs basically have their own build systems: and they are hiding exceptions going on behind the scenes when running tests (try the patch to see)\n\nThe patch doesnt yet work for things like 'dist' or 'example'. at the moment only things like 'ant compile, ant test, ant javadocs' work correctly.\n\nadditionally the contrib/dataimporthandler 'extras' isnt compiled or tested yet, I think i would like to propose instead we make contrib/dataimporthandler-extras, that depends on the main dataimporthandler, this would really simplify the build. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12906689",
            "date": "2010-09-07T06:28:29+0000",
            "content": "by the way, i think this really simplifies the contrib builds.\n\nits probably hard to see in the patch: but here is the entire contrib/clustering build now\n\n\n<project name=\"solr-clustering\" default=\"default\">\n  <description>Clustering Integration.</description>\n\n  <property name=\"src.dir\" location=\"src/main/java\"/>\n  <property name=\"tests.src.dir\" location=\"src/test/java\"/>\n  <property name=\"tests.userdir\" location=\"src/test/resources\"/>\n\n  <import file=\"../contrib-build.xml\"/>\n</project>\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12906806",
            "date": "2010-09-07T14:05:42+0000",
            "content": "Sounds cool!  Whatever those strong in ant-foo come up with is fine with me! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12906826",
            "date": "2010-09-07T14:43:38+0000",
            "content": "thanks, the major thing left is to consolidate release management-type things (e.g. rat reporting tasks, dist/packaging, artifact signing, checksumming, etc).\n\nmost of this is really inappropriate the way it is in lucene's build, because its standalone in lucene's build.xml and not reusable to modules and solr. for example: 'rat-sources' just runs on a hardcoded \"src/java\" for lucene-core.\n\nso we need to fix this kind of stuff anyway so that things in modules/ can actually ever release, no way to do this at the moment. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12919577",
            "date": "2010-10-10T06:50:09+0000",
            "content": "Attached patch syncs up to current trunk, and includes dataimporthandler-extras in the build, by moving it to its own directory under solr/contrib/.  All tests run and pass.\n\nRun the following script before applying the patch, which was created using svn --no-diff-deleted diff:\n\n\nmkdir -p solr/contrib/dataimporthandler-extras/src\nsvn move solr/contrib/dataimporthandler/src/extras/main/ solr/contrib/dataimporthandler-extras/src/main\nsvn move solr/contrib/dataimporthandler/src/extras/test solr/contrib/dataimporthandler-extras/src/test\n\n\n\nsolr/contrib/dataimporthandler-extras/build.xml is a lot more complicated than the other Solr contrib build files, because it has non-standard dependencies at compile and test time.  I think this can be cleaned up and consolidated, e.g. with some of the stuff in solr/build.xml - the attached patch is just what it took to get it to work. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12919592",
            "date": "2010-10-10T11:34:45+0000",
            "content": "Thank you for merging this patch up! \nI was dreading it, but this is an important issue and I think is holding up other good improvements.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12919613",
            "date": "2010-10-10T15:28:15+0000",
            "content": "i committed the lucene bits here to make at least small progress.\n\nattached is the updated patch. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12919623",
            "date": "2010-10-10T17:20:44+0000",
            "content": "Hmm, I didn't get the pre-patch script fully correct - here's what it should look like:\n\n\nmkdir -p solr/contrib/dataimporthandler-extras/src\nsvn add solr/contrib/dataimporthandler-extras/\nsvn move solr/contrib/dataimporthandler/src/extras/main/ solr/contrib/dataimporthandler-extras/src/main\nsvn move solr/contrib/dataimporthandler/src/extras/test solr/contrib/dataimporthandler-extras/src/test\nsvn rm solr/contrib/dataimporthandler/src/extras\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12919644",
            "date": "2010-10-10T18:51:20+0000",
            "content": "i simplified the dataimporthandler-extras contrib here. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12919653",
            "date": "2010-10-10T19:59:22+0000",
            "content": "i simplified the dataimporthandler-extras contrib here. \n\nVery nice!  I was able to successfully compile and run all tests from the top level, as well as the single-module auto-make-dependencies build from dataimporthandler-extras:\n\n\nant clean # at top-level dir.\ncd solr/contrib/dataimporthandler-extras\nant test\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12919697",
            "date": "2010-10-11T02:54:22+0000",
            "content": "I would like to make solr-core, solrj, and solr-webapp full-fledged separate modules (IntelliJ has difficulty importing the project from the Maven POMs at LUCENE-2657 - see https://issues.apache.org/jira/browse/LUCENE-2657?focusedCommentId=12919172&page=com.atlassian.jira.plugin.system.issuetabpanels%3Acomment-tabpanel#action_12919172).\n\nI'm thinking of this structure:\n\n\n\tsolr/\n\t\n\t\tcore/\n\t\t\n\t\t\tsrc/ from current src/java/\n\t\t\t...\n\t\t\n\t\t\n\t\tsolrj/\n\t\t\n\t\t\tsrc/ from current src/common/ and src/solrj/\n\t\t\t...\n\t\t\n\t\t\n\t\twebapp/\n\t\t\n\t\t\tsrc/ from current src/webapp/src/\n\t\t\t...\n\t\t\n\t\t\n\t\n\t\n\n "
        },
        {
            "author": "Chris Male",
            "id": "comment-12919713",
            "date": "2010-10-11T04:52:08+0000",
            "content": "+1 to your suggested layout Steven "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12919793",
            "date": "2010-10-11T11:18:14+0000",
            "content": "+1 to fixing this situation, from the ant perspective.\n\nWhen a single build.xml is responsible for building multiple \"targets\", it creates a mess.\n\nInstead, if every folder is its own standalone module, then we could have a much simpler\nrecursive build. Adding something new like findbugs integration would then be trivial, it could \nbe added in one place and affect all of lucene/solr.\n\nSome suggestions:\n\n\tI think common should be its own folder.\n\tI think we should move lucene/src/demo to lucene/contrib/demo in 3.x like we did in trunk.\n\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12920411",
            "date": "2010-10-13T01:00:01+0000",
            "content": "The TestLBHttpSolrServer is quite unreliable, especially with hudson builds.\nthis is because it shutsdown a jetty on port X then restarts it on the same port again...\n\nattached is a patch that sets SO_REUSEADDR when running tests. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12920415",
            "date": "2010-10-13T01:49:12+0000",
            "content": "Committed to trunk (revision 1021969). Also set the connect-timeout to 1s in 1021971.\n\nMerged both to 3x in revision 1021972.\n\nSorry for the heavy committing, but this test was unreliable and took 15 minutes on hudson! "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12920569",
            "date": "2010-10-13T14:01:20+0000",
            "content": "here's some cleanup to the DIH tests, isn't going to solve any of the test reliability \nproblems we have, but I think it makes the tests simpler to work with as a start. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12920607",
            "date": "2010-10-13T15:28:30+0000",
            "content": "SuggesterTest fails quite a bit for me...\n\n    [junit] Testsuite: org.apache.solr.spelling.suggest.SuggesterTest\n    [junit] Testcase: testSuggestions(org.apache.solr.spelling.suggest.SuggesterTest):  FAILED\n    [junit] query failed XPath: //lst[@name='spellcheck']/lst[@name='suggestions']/lst[@name='ac']/int[@name='numFound'][.='2']\n    [junit]  xml response was: <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n    [junit] <response>\n    [junit] <lst name=\"responseHeader\"><int name=\"status\">0</int><int name=\"QTime\">1</int></lst><lst name=\"spellcheck\"><lst name=\"suggestions\"/></lst>\n    [junit] </response>\n\n\nSeems like the dict isn't being built for some reason, but it always seems to pass if I run the test individually.\nI'll try and reproduce with logging at INFO. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-12920612",
            "date": "2010-10-13T15:44:44+0000",
            "content": "SuggesterTest fails quite a bit for me... \n\nI've seen the same thing on and off, but just like your case, when I run it individually, it succeeds. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12920615",
            "date": "2010-10-13T15:49:17+0000",
            "content": "Is this a race condition?\n\nIf i look at suggesters code i notice:\nin build()\n\n    lookup = (Lookup) core.getResourceLoader().newInstance(lookupImpl);\n    try {\n      lookup.build(dictionary);\n\n\n\nin getSuggestions() \n\n    if (lookup == null) {\n      LOG.info(\"Lookup is null - invoke spellchecker.build first\");\n\n\n\nseems like lookup could be non-null, but just not contain any items and cause the test to fail without the warning...\n\nso maybe the issue happens only if your machine is very busy (e.g. when running all the tests and there are several jvms going) ? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12920617",
            "date": "2010-10-13T15:54:43+0000",
            "content": "Hmmm, when I try changing the \"SEVERE\" to \"INFO\" in solr/testlogging.properties, it only seems to take effect on a few tests.\nThis worked fine in the past... any ideas? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12920627",
            "date": "2010-10-13T16:02:44+0000",
            "content": "Yonik, do you have a specific test it doesnt work for? it spews a ton of INFO out for me! "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12920638",
            "date": "2010-10-13T16:26:17+0000",
            "content": "Most of them I think... only the first 10 tests on this list have INFO debugging:\n\n\n$ ls -lS | head -20\ntotal 1380\n-rwxr-xr-x  1 yonik None 449054 Oct 13 11:47 TEST-org.apache.solr.ConvertedLegacyTest.txt\n-rwxr-xr-x  1 yonik None 218969 Oct 13 11:47 TEST-org.apache.solr.BasicFunctionalityTest.txt\n-rwxr-xr-x  1 yonik None 158532 Oct 13 11:50 TEST-org.apache.solr.handler.ExtractingRequestHandlerTest.txt\n-rwxr-xr-x  1 yonik None 104678 Oct 13 11:46 TEST-org.apache.solr.client.solrj.embedded.LargeVolumeJettyTest.txt\n-rwxr-xr-x  1 yonik None  56895 Oct 13 11:45 TEST-org.apache.solr.DisMaxRequestHandlerTest.txt\n-rwxr-xr-x  1 yonik None  25873 Oct 13 11:49 TEST-org.apache.solr.handler.clustering.ClusteringComponentTest.txt\n-rwxr-xr-x  1 yonik None  13901 Oct 13 11:45 TEST-org.apache.solr.EchoParamsTest.txt\n-rwxr-xr-x  1 yonik None  13577 Oct 13 11:47 TEST-org.apache.solr.OutputWriterTest.txt\n-rwxr-xr-x  1 yonik None   9498 Oct 13 11:45 TEST-org.apache.solr.TestPluginEnable.txt\n-rwxr-xr-x  1 yonik None   9283 Oct 13 11:45 TEST-org.apache.solr.TestSolrCoreProperties.txt\ndrwxr-xr-x+ 1 yonik None   4096 Oct 13 11:50 temp\n-rwxr-xr-x  1 yonik None   2669 Oct 13 11:49 TEST-org.apache.solr.handler.dataimport.TestLineEntityProcessor.txt\n-rwxr-xr-x  1 yonik None   1896 Oct 13 11:46 TEST-org.apache.solr.handler.component.DistributedSpellCollatorTest.txt\n-rwxr-xr-x  1 yonik None   1544 Oct 13 11:49 TEST-org.apache.solr.handler.dataimport.TestCachedSqlEntityProcessor.txt\n-rwxr-xr-x  1 yonik None   1337 Oct 13 11:47 TEST-org.apache.solr.request.SimpleFacetsTest.txt\n-rwxr-xr-x  1 yonik None   1291 Oct 13 11:46 TEST-org.apache.solr.highlight.HighlighterTest.txt\n-rwxr-xr-x  1 yonik None   1211 Oct 13 11:48 TEST-org.apache.solr.handler.component.TermsComponentTest.txt\n-rwxr-xr-x  1 yonik None   1168 Oct 13 11:46 TEST-org.apache.solr.handler.TestReplicationHandler.txt\n-rwxr-xr-x  1 yonik None   1119 Oct 13 11:48 TEST-org.apache.solr.handler.component.SpellCheckComponentTest.txt\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12920657",
            "date": "2010-10-13T17:03:11+0000",
            "content": "If I run a test individually, it does have all of the requested logging... it's just when I run everything that the logging is missing. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12920666",
            "date": "2010-10-13T17:15:19+0000",
            "content": "I see your problem here too... but i have no ideas at the moment. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12920916",
            "date": "2010-10-14T10:27:11+0000",
            "content": "\nIf I run a test individually, it does have all of the requested logging... it's just when I run everything that the logging is missing.\n\nI broke this when i changed the build not to fork a new JVM for each test class.\nYou can see this easier if you use -Dtests.threadspercpu=0 (run all tests in one single jvm, no parallel tests). Then you will\nsee the logging only working for the very first test class (BasicFunctionalityTest)\n\nI don't understand why the logging shuts up in this case (maybe something in SolrTestCase4J is \"shutting down\" the logging in afterClass?)\nSorry I get confused really quickly with these logging frameworks, so I don't even know where to begin. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12920982",
            "date": "2010-10-14T15:18:47+0000",
            "content": "I just tried peppering SolrTestCaseJ4 with checkLogging calls (just checks that INFO is still enabled for the log object there).\nIt never tripped (i.e. log.isInfoEnabled() is true for the entire \"ant test\" run).\n\nThen you will see the logging only working for the very first test class (BasicFunctionalityTest)\n\nOK, good to know - so it's not something like Jetty shutting down the logging somehow.\nAFAIK, SLF4J doesn't even have any mechanism to shut down logging.  Nothing I know of in Solr messes with the logging (but I don't know much about logging frameworks either). "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12921159",
            "date": "2010-10-14T23:08:25+0000",
            "content": "Two things i've noticed recently that are kind of odd (and per robert on IRC, weren't intentional)\n\n1) all of the \"temp\" files created by tests are now getting created in the same output directory as the test results (ie:lucene/build/test and solr/build/test-results)  ...\n\n\nhossman@bester:~/lucene/dev$ ls lucene/build/test/ | head\n1\n2\n3\n4\n5\n6\n7\n8\nTEST-org.apache.lucene.analysis.TestCachingTokenFilter.xml\nTEST-org.apache.lucene.analysis.TestCharTokenizers.xml\nhossman@bester:~/lucene/dev$ ls lucene/build/test/1 | head\nquiet.ant\ntest1427325378064240227tmp\ntest2206717657854845874tmp\ntest2349170826556141314tmp\ntest2474659255857912171tmp\ntest2655069444325547827tmp\ntest3737548537987799034tmp\ntest5395869393791701784tmp\ntest5824921577206577644tmp\ntest5897381366443436559tmp\n\n\n\n...these temp dirs should probably go under some other parent dir (either java.io.tmpdir or some place else in \"build\") so that it's eaiser to search the test result files w/o getting stray matches on the tmp files (in particular: i know that the hudson junit plugin and the ant <junitreport /> tasks both walk every file in those directories, so we should minimize the amount of extra stuff they have to look at.\n\n2) the Solr tests now seem to be formatted using the \"plain text\" formatter by default, and not the xml formatter...\n\n\nhossman@bester:~/lucene/dev$ ls solr/build/test-results/ | head -5\ntemp\nTEST-org.apache.solr.analysis.EnglishPorterFilterFactoryTest.txt\nTEST-org.apache.solr.analysis.TestBrazilianStemFilterFactory.txt\nTEST-org.apache.solr.analysis.TestBufferedTokenStream.txt\nTEST-org.apache.solr.analysis.TestCapitalizationFilterFactory.txt\n\n\n\n..using plain text was always an option before, but now it seems to be the default "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12921196",
            "date": "2010-10-15T01:27:53+0000",
            "content": "this patch gets the solr tests using the xml formatter by default .. but looking at the history it seems like yonik deliberately switched solr to use plain text by default back before Solr 1.4 (r819413) ... evidently i had some property override somewhere that i've recently lost.\n\ni'm not sure why yonik thought plain text was better by default, but i mainly just think we should be consistent (right now solr is plain text by default, but the rest of hte tree is xml by default) "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12921197",
            "date": "2010-10-15T01:33:43+0000",
            "content": "The text format is so much easier to read, and it also streams correctly.  The XML impl buffers everything in memory, and even leads to OOM errors if you try a long-running test.\n "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12921198",
            "date": "2010-10-15T02:02:50+0000",
            "content": "heres a patch for a pet peeve of mine, if you run parallel tests (say 8 jvms) and lets say 8 tests fail, one in each, you get this annoying\n\nBUILD FAILED\nBUILD FAILED\nBUILD FAILED\n...\n\npatch changes it to only print once. "
        },
        {
            "author": "Fuad Efendi",
            "id": "comment-12921199",
            "date": "2010-10-15T02:03:28+0000",
            "content": "Words such as \"xml formatter\" sound extremely funny for me... why can't it be UTF8 formatter? Or Base64 for instance, JSON, EDI? Formatted... \n "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12921201",
            "date": "2010-10-15T02:31:57+0000",
            "content": "Words such as \"xml formatter\" sound extremely funny for me... why can't it be UTF8 formatter? Or Base64 for instance, JSON, EDI? Formatted...\n\n\"formatter\" has a very specific meaning in the ant junit taskdef.  \"xml\" is a legal \"type\" for the <formatter/>\n\nUTF8, Base64, JSON, and EDI are not. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12921204",
            "date": "2010-10-15T02:38:22+0000",
            "content": "The text format is so much easier to read, and it also streams correctly.  The XML impl buffers everything in memory,\nand even leads to OOM errors if you try a long-running test.\n\nAh .. ok .. i remember this being discussed now.  (we still have to be conciencious about the OOM issue though since hudson requires the xml formatter)\n\nIf \"plain\" makes sense for Solr because of readability, streaming, and OOMs, then shouldn't it be the default for the entire tree? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-12921292",
            "date": "2010-10-15T09:42:25+0000",
            "content": "\nAh .. ok .. i remember this being discussed now. (we still have to be conciencious about the OOM issue though since hudson requires the xml formatter)\n\nIf \"plain\" makes sense for Solr because of readability, streaming, and OOMs, then shouldn't it be the default for the entire tree?\n\nsounds good to me, sounds like we should default lucene's build to plain but let it take a -D for hudson? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12921496",
            "date": "2010-10-15T18:49:21+0000",
            "content": "Here's the logs from a failed run of SuggesterTest "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12921507",
            "date": "2010-10-15T19:18:16+0000",
            "content": "The SpellCheckerListener code looks strange... reload() if firstSearcher, build if newSearcher?\nDoes reload() imply build()?  If so, it's a suggester problem, if not, it's a SpellCheckerListener problem. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12922102",
            "date": "2010-10-18T15:18:10+0000",
            "content": "Does reload() imply build()? If so, it's a suggester problem, if not, it's a SpellCheckerListener problem.\nThe problem is in Suggester, and it's related to a non-persistent implementation of Lookup in Suggester, as opposed to a persistent spellchecking index. With spellchecker, when firstSearcher event is processed we want to load an existing spellchecking index (that's why it doesn't call build(), but reload()). On the other hand, if we want to rebuild the spellchecking index on commit, and we process a newSearcher event, then we need to use build(), not reload().\n\nSo far the code was correct. However, current implementations of Lookup don't persist their data, so it's lost after commit and it needs to be rebuilt both on firstSearcher and on newSearcher. I created SOLR-2173 to track this issue. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13012949",
            "date": "2011-03-30T13:23:34+0000",
            "content": "I think we had a really good start here at one point, but the problem is that the codebase moves too quickly and we didnt get time to wrap it up.\n\nI think its really important to cleanup the build here so that e.g. the Solr build extends lucene's like the patch started, with all targets being recursive so you can easily add new functionality (e.g. findbugs) in a single place.\n\nMaybe ill create a svn branch to get this done, seems insane to create a branch for the build system but this way it might actually get done instead of just becoming outdated patches. "
        },
        {
            "author": "Chris Male",
            "id": "comment-13012971",
            "date": "2011-03-30T14:10:44+0000",
            "content": "Hey Robert, I'd like to chip in here where I can.  What further improvements do you have in mind? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13012981",
            "date": "2011-03-30T14:22:16+0000",
            "content": "Hi Chris, so mainly i want to start with the patch where Solr's build system extends Lucene's.\n\nThis gives us a 'single' build system (as the modules and lucene contrib already extend lucene's) rather than the 4 or 5 we have now: as solr contribs actually basically have their own standalone build.\n\nSo in lucene's common-build, we can easily add new targets/checks/functionality (e.g. findbugs/failing on javadocs/etc) and it applies to everything.\n\nAlso in my tests this was a huge speedup to the solr build, especially things like ant test -Dtestcase\n\nBut, there is a lot to do: in my patch i only did the basics (compile/test/etc).\n\n\twe need to implement things like solr 'example' tasks.\n\twe need to look at lucene and solr's build.xml and see what things are duplicates, such as packaging tasks, that can be added to common-build.xml: an example is artifact signing and hashing.\n\ti think it might be worth our time to look at antunit or something of that nature to implement 'tests' for the build system. By this i don't really mean tests that ensure our ant logic is correct: I mean automated tests that look at whether things like packaging are correct. But i havent looked at antunit yet, so I admittedly don't know what I am talking about.\n\tonce everything is using a single common-build recursively, we should consider additional features (pmd, findbugs, ...) that we would want to implement to perform even more checks: this can really be separate issues but its good to think right now about how we can make our build system as picky as possible to try to keep the codebase in good shape.\n\n "
        },
        {
            "author": "Chris Male",
            "id": "comment-13012984",
            "date": "2011-03-30T14:26:29+0000",
            "content": "once everything is using a single common-build recursively, we should consider additional features (pmd, findbugs, ...) that we would want to implement to perform even more checks: this can really be separate issues but its good to think right now about how we can make our build system as picky as possible to try to keep the codebase in good shape.\n\nDo you envisage these additional features being on a per module (by which I mean anything with a build.xml) basis, or more global in the common-build.xml? "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13013005",
            "date": "2011-03-30T15:03:32+0000",
            "content": "definitely in the common-build. this way you implement a new 'feature' in a single place.\n\nCurrently to do this you have to put things in multiple places, which discourages us from improving the build. "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13043826",
            "date": "2011-06-03T16:47:16+0000",
            "content": "Bulk move 3.2 -> 3.3 "
        },
        {
            "author": "Robert Muir",
            "id": "comment-13106374",
            "date": "2011-09-16T14:50:48+0000",
            "content": "3.4 -> 3.5 "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13216823",
            "date": "2012-02-26T20:23:02+0000",
            "content": "Robert, I think this can be resolved as fixed. "
        }
    ]
}