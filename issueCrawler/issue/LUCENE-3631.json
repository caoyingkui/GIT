{
    "id": "LUCENE-3631",
    "title": "Remove write access from SegmentReader and possibly move to separate class or IndexWriter/BufferedDeletes/...",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Task",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "After LUCENE-3606 is finished, there are some TODOs:\n\nSegmentReader still contains (package-private) all delete logic including crazy copyOnWrite for validDocs Bits. It would be good, if SegmentReader itsself could be read-only like all other IndexReaders.\n\nThere are two possibilities to do this:\n\n\tthe simple one: Subclass SegmentReader and make a RWSegmentReader that is only used by IndexWriter/BufferedDeletes/... DirectoryReader will only use the read-only SegmentReader. This would move all TODOs to a separate class. It's reopen/clone method would always create a RO-SegmentReader (for NRT).\n\tRemove all write and commit stuff from SegmentReader completely and move it to IndexWriter's readerPool (it must be in readerPool as deletions need a not-changing view on an index snapshot).\n\n\n\nUnfortunately the code is so complicated and I have no real experience in those internals of IndexWriter so I did not want to do it with LUCENE-3606, I just separated the code in SegmentReader and marked with TODO. Maybe Mike McCandless can help",
    "attachments": {
        "LUCENE-3631-threadlocals.patch": "https://issues.apache.org/jira/secure/attachment/12508227/LUCENE-3631-threadlocals.patch",
        "LUCENE-3631.patch": "https://issues.apache.org/jira/secure/attachment/12507897/LUCENE-3631.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2011-12-19T11:45:36+0000",
            "content": "Patch, making SegmentReader fully read-only; it's much simpler now!  I\ncutover to simple ctors (3 of them, depending on how the core/del docs\nare set) instead of static get methods.\n\nI removed clone() from all IR impls and made final IR.clone() that throws\nUOE.  Cloning no longer makes sense since all IRs are read-only...\n\nI pushed all \"pending deletes\" tracking inside IW, and changed the\nreaderPool to store a map of SegmentInfo to the \"state\" that IW needs\nto track for each segment (open reader for searching, open reader for\nmerging, live docs and pending delete count).\n\nI think it's ready... ",
            "author": "Michael McCandless",
            "id": "comment-13172208"
        },
        {
            "date": "2011-12-19T11:49:25+0000",
            "content": "Why not remove the Cloneable interface from IndexReader and remove clone alltogether. Then user gets compile error. ",
            "author": "Uwe Schindler",
            "id": "comment-13172212"
        },
        {
            "date": "2011-12-19T13:38:18+0000",
            "content": "Why not remove the Cloneable interface from IndexReader and remove clone alltogether. Then user gets compile error.\n\nAhh, right!  I'll do that. ",
            "author": "Michael McCandless",
            "id": "comment-13172266"
        },
        {
            "date": "2011-12-19T13:57:26+0000",
            "content": "Patch looks nice.\n\nOne more thing: In my opinion, the whole synchronized stuff in SegmentCoreReaders can be removed (see LUCENE-3653) - all is final now, why synchronize? So LUCENE-3653 is a non-issue, when this is committed. Same applies to IR/DR/... - almost all synchronized methods can go away. And decRef, too, as it's already guarded by AtomicRef\n\nAnd in my opinion incRef/decRef on IndexReaders is useless, too (or almost useless, except segmentreaders). As Shai said before, code like SearcherManager should reCount externaly with a separate interface/helperclass (that refcounts and on decRef to 0, it calls Closeable.close - so helper can work on any Closeable). But we should remove that in separate issue. ",
            "author": "Uwe Schindler",
            "id": "comment-13172284"
        },
        {
            "date": "2011-12-19T14:29:10+0000",
            "content": "I get a clone error in TestIndexReaderClone. There s also still a strange verbosity:\n\n\n[junit] COMPUTE TEST METHODS: org.apache.lucene.util.LuceneTestCaseRunner@27f649df\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13172309"
        },
        {
            "date": "2011-12-19T15:43:46+0000",
            "content": "Hmm I meant to \"svn rm TestIndexReaderClone.java\".\n\nOh I'll remove that silly sop.\n\nYou're right \u2013 we don't need any sync in SegmentCoreReaders now!  It's entirely final (also SegmentReader)... I'll remove.\n\n\nAnd in my opinion incRef/decRef on IndexReaders is useless, too (or almost useless, except segmentreaders). As Shai said before, code like SearcherManager should reCount externaly with a separate interface/helperclass (that refcounts and on decRef to 0, it calls Closeable.close - so helper can work on any Closeable). But we should remove that in separate issue.\n\nWe should explore that... it's tricky. ",
            "author": "Michael McCandless",
            "id": "comment-13172353"
        },
        {
            "date": "2011-12-19T18:51:53+0000",
            "content": "New patch with Uwe's suggestions.. I think it's ready! ",
            "author": "Michael McCandless",
            "id": "comment-13172500"
        },
        {
            "date": "2011-12-19T19:03:17+0000",
            "content": "Looks good! I think thats a good improvement!\n\nOne very small thing, can also be fixed later, no need for new patch: SegmentReader.toString() creates a StringBuilder, appends one String to it and returns it with toString()  Maybe simply retun the SegmentInfo.toString(...) result... ",
            "author": "Uwe Schindler",
            "id": "comment-13172514"
        },
        {
            "date": "2011-12-19T19:07:13+0000",
            "content": "Oh that's silly... I'll fix before committing. ",
            "author": "Michael McCandless",
            "id": "comment-13172521"
        },
        {
            "date": "2011-12-19T19:12:17+0000",
            "content": "+1\n\nI think we should look at moving deletes to codec after you commit. ",
            "author": "Robert Muir",
            "id": "comment-13172526"
        },
        {
            "date": "2011-12-21T09:09:46+0000",
            "content": "Hi,\nI committed some small cleanups and dead code removal after Clover analysis this morning.\n\nOne thing: we have thread locals for TermVectorsReader and StoredFieldsReader. Would it make sense to use one for DocValues, too? What do you think Simon? ",
            "author": "Uwe Schindler",
            "id": "comment-13173959"
        },
        {
            "date": "2011-12-21T09:42:30+0000",
            "content": "One thing: we have thread locals for TermVectorsReader and StoredFieldsReader. Would it make sense to use one for DocValues, too? What do you think Simon?\nI don't see a need for this. The source is cached in the DocValues instance and DocValues instances can be shared across thread.  ",
            "author": "Simon Willnauer",
            "id": "comment-13173975"
        },
        {
            "date": "2011-12-21T09:51:46+0000",
            "content": "The source is cached in the DocValues instance and DocValues instances can be shared across thread.\n\nThanks, I just wanted to make sure that there is no synchronization on DocValues. A customer of mine had huge improvements with loading stored fields since this is in Lucene. ",
            "author": "Uwe Schindler",
            "id": "comment-13173983"
        },
        {
            "date": "2011-12-21T11:06:30+0000",
            "content": "This patch also moves the threadlocals to SegmentCoreReaders, as they can be reused on reopen/nrt readers. Also improve ensureOpen() checks to guard everything without duplicating checks. ",
            "author": "Uwe Schindler",
            "id": "comment-13174008"
        },
        {
            "date": "2011-12-21T11:08:47+0000",
            "content": "Heavy committed at revision: 1221677 ",
            "author": "Uwe Schindler",
            "id": "comment-13174012"
        },
        {
            "date": "2012-03-08T13:55:50+0000",
            "content": "Guys, is it possible in a current implementation to update the doc values fields without re-indexing a whole document?  ",
            "author": "Aliaksandr Zhuhrou",
            "id": "comment-13225210"
        },
        {
            "date": "2012-03-11T13:16:29+0000",
            "content": "Guys, is it possible in a current implementation to update the doc values fields without re-indexing a whole document?\n\nNot yet, though LUCENE-3837 is exploring how to update postings (not doc values though) for one field in a doc... ",
            "author": "Michael McCandless",
            "id": "comment-13227042"
        },
        {
            "date": "2012-03-14T22:13:19+0000",
            "content": "Yes. I thought on something like that. I see that lucene enforces a write-once policy (as I understand this needed to support a transactional behaviour). So I think  we may use some conbination of approach for the LUCENE-3837 and a current segment system where any updates after commit go to the a new file like we do with segments. And when the docValues will be read to a memory we will fetch all files and values in a file with higher generation will override values with same docIds.\nOf course it increases even more the total amount of files. And not sure yet how to express this updates on level of the IndexWriter api.  ",
            "author": "Aliaksandr Zhuhrou",
            "id": "comment-13229687"
        }
    ]
}