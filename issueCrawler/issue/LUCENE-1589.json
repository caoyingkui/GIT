{
    "id": "LUCENE-1589",
    "title": "IndexWriter.addIndexesNoOptimize(IndexReader... readers)",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "2.4.1",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Similar to IndexWriter.addIndexesNoOptimize(Directory[] dirs)\nbut for IndexReaders. This will be used to flush cloned ram\nindexes to disk for near realtime indexing.",
    "attachments": {
        "LUCENE-1589.patch": "https://issues.apache.org/jira/secure/attachment/12424501/LUCENE-1589.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-04-07T08:46:45+0000",
            "content": "Jason are you working on a patch here? ",
            "author": "Michael McCandless",
            "id": "comment-12696434"
        },
        {
            "date": "2009-04-07T17:39:50+0000",
            "content": "Yes, because this will block the RAMDir NRT implementation. ",
            "author": "Jason Rutherglen",
            "id": "comment-12696643"
        },
        {
            "date": "2009-04-07T17:52:56+0000",
            "content": "I started, but because MergePolicy.OneMerge in trunk operates with\nSegmentInfos (rather than IndexReaders like LUCENE-1516) this\npatch will need wait. It requires being able to pass\nreaders into OneMerge? ",
            "author": "Jason Rutherglen",
            "id": "comment-12696650"
        },
        {
            "date": "2009-04-07T23:09:27+0000",
            "content": "Hmm yes.  This is also tricky: how would you use this to flush cloned ram indexes?  Can't there be deletes coming in against those during the merge? ",
            "author": "Michael McCandless",
            "id": "comment-12696809"
        },
        {
            "date": "2009-04-07T23:18:06+0000",
            "content": "The deletes are coming into the existing IndexReaders, then we\ndo the IW.commitMergedDeletes styled copy of new deletes into\nthe newly merged readers. Are there caveats? ",
            "author": "Jason Rutherglen",
            "id": "comment-12696812"
        },
        {
            "date": "2009-04-08T00:08:44+0000",
            "content": "I took a walk and thought about this, it seems that we do not\nneed to write any new code, we can simply ref and clone\naddIndexesNoOptimize(IndexReader[] readers) to\nMergePolicy.OneMerge.readers/readersClone. Meaning the problem\nof new deletes while merging is solved? Of course this would\nimply we synchronize on the source reader in commitMergedDeletes\n(because deleteDocument is synced?) ",
            "author": "Jason Rutherglen",
            "id": "comment-12696837"
        },
        {
            "date": "2009-04-08T12:40:23+0000",
            "content": "\nThe deletes are coming into the existing IndexReaders, then we\ndo the IW.commitMergedDeletes styled copy of new deletes into\nthe newly merged readers. Are there caveats?\n\nI'm now thinking that we should do all of this, internally to IW, under the hood, when it's doing NRT (as part of LUCENE-1313).\n\nIe, we should not expose an external addIndexes API that must deal with ongoing deletes arriving to the IndexReaders you had passed in.\n\nI think it's useful to expose such an API, with the restriction that you should not be modifying those IR's (deletes, norms) while addIndexes is running.  Ie, that method would be just like the addIndexes(IndexReader[]) we have today, but it'd have the same benefits of addIndexesNoOptimize. ",
            "author": "Michael McCandless",
            "id": "comment-12697001"
        },
        {
            "date": "2009-06-14T11:15:17+0000",
            "content": "Moving out. ",
            "author": "Michael McCandless",
            "id": "comment-12719250"
        },
        {
            "date": "2009-11-06T18:42:11+0000",
            "content": "This could probably just throw an exception if the passed in reader is not read-only? ",
            "author": "Michael Busch",
            "id": "comment-12774360"
        },
        {
            "date": "2009-11-07T21:06:30+0000",
            "content": "This could probably just throw an exception if the passed in reader is not read-only?\n\nWe could do that, but I think it defeats using it for NRT?  Though I think it'd still be very useful (and we'd then deprecate the addIndexes(IndexReader[]) that does optimization). ",
            "author": "Michael McCandless",
            "id": "comment-12774668"
        },
        {
            "date": "2009-11-10T19:36:37+0000",
            "content": "I think we'd need to support read only readers.  I'd like to be able to use this API for NRT (and not have the read only reader limitation), however, it would at least require passing a lock object in, and perhaps more.   ",
            "author": "Jason Rutherglen",
            "id": "comment-12776034"
        },
        {
            "date": "2009-11-10T20:16:06+0000",
            "content": "First pass, not committable, no tests yet. ",
            "author": "Jason Rutherglen",
            "id": "comment-12776060"
        },
        {
            "date": "2009-11-13T23:58:41+0000",
            "content": "Updated for Java 5 and consistency in IndexWriter ",
            "author": "Uwe Schindler",
            "id": "comment-12777749"
        },
        {
            "date": "2011-01-24T21:12:10+0000",
            "content": "Sorry if this spam's things, however it's unlikely that I'll work on these. ",
            "author": "Jason Rutherglen",
            "id": "comment-12985982"
        }
    ]
}