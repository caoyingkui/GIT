{
    "id": "LUCENE-7268",
    "title": "Remove ArrayUtil.timSort?",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "Is there some workload where our timSort is better than the JDK one? Should we just remove ours if its slower?\n\nNot that its a great test, but i switched Polygon2D edge sorting (just the one where it says \"sort the edges then build a balanced tree from them\") from Arrays.sort to ArrayUtil.timSort and was surprised when performance was much slower for an enormous polygon (http://people.apache.org/~mikemccand/geobench/cleveland.poly.txt.gz)",
    "attachments": {
        "LUCENE-7268_mods.patch": "https://issues.apache.org/jira/secure/attachment/12801669/LUCENE-7268_mods.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15265883",
            "author": "Robert Muir",
            "date": "2016-05-01T19:01:23+0000",
            "content": "here are the local mods i have. \n\nWith the luceneutil geo benchmark, you can test this polygon with `-points -polyFile /data/cleveland.poly.txt.gz`. It will also print the tree construction time since its basically what makes this polygon slow.\n\nI see this with Arrays.sort (construction time ~240ms):\nBEST M hits/sec: 0.04010849804890369\nBEST QPS: 3.429835646391628\n\nOn the other hand with ArrayUtil.timSort (construction time ~ 400ms):\nBEST M hits/sec: 0.02554894823234268\nBEST QPS: 2.1847911948300567\n\nIts just one data point really, but I am curious what advantages ArrayUtil.timSort is supposed to have over Arrays.sort? "
        },
        {
            "id": "comment-15265905",
            "author": "Adrien Grand",
            "date": "2016-05-01T19:38:08+0000",
            "content": "+1\n\nI don't think it is expected to have advantages over Arrays.timSort. It'd be interesting to try to understand why our timSort is slower, maybe it has a performance bug. "
        },
        {
            "id": "comment-15265912",
            "author": "Dawid Weiss",
            "date": "2016-05-01T19:56:12+0000",
            "content": "Other than consistency of having our own implementation I don't think this matters? I recall issues with TimSort that affected various jdk versions, so performance may depend on jvm version (and data).. Also, is the algorithm explicitly fixed to TimSort in Arrays.sort? I don't think so since it used to be merge sort before they switched it to timSort. "
        },
        {
            "id": "comment-15265917",
            "author": "Robert Muir",
            "date": "2016-05-01T20:05:39+0000",
            "content": "The javadocs for this arrays.sort method explicitly state timsort. Polygon edges are always clockwise or counterclockwise so kinda sorted already... So i think timsort makes sense? \n\nBut other use cases like index sorting have a similar situation... If there is a perf bug here it could be affecting many things "
        },
        {
            "id": "comment-15265927",
            "author": "Dawid Weiss",
            "date": "2016-05-01T20:25:22+0000",
            "content": "The javadocs for this arrays.sort method explicitly state timsort.\n\nBut do you think this normative or just a feature of Oracle's particular implementation? I honestly don't know (not that it matters much in practice as there are effectively no other radically different implementations of the base package).\n\nTried to find the mails concerning TimSort but failed. Perhaps I confused it with something else, but I could swear it was on the mailing list pretty recently... I may try to look it up again once home. "
        },
        {
            "id": "comment-15265930",
            "author": "Dawid Weiss",
            "date": "2016-05-01T20:28:31+0000",
            "content": "Sorry, it was this one affecting DualPivot.\nhttps://bugs.openjdk.java.net/browse/JDK-8154049 "
        },
        {
            "id": "comment-15265933",
            "author": "Robert Muir",
            "date": "2016-05-01T20:32:24+0000",
            "content": "I dont know. Afaik javadocs are the spec. But it relates to why i was looking at our timsort... to be explicit this is the sort to use, since we have reasons for this case. "
        },
        {
            "id": "comment-15266228",
            "author": "Adrien Grand",
            "date": "2016-05-02T08:35:40+0000",
            "content": "I did some testing and the difference seems to be due to how our impl in ArrayUtil tries to save memory: it uses a hard-coded array.length/64 as the maximum size of the temporary Object[] that it may use for merging. If it needs less memory than that, it will use this temporary Object[], but for larger merges it will switch to an in-place merge routine that is much slower (the same logic that InPlaceMergeSorter uses). I get the following build times with the patch:\n\n\n\n\n Arrays.sort \n 222ms \n\n\n ArrayUtil.timSort - max temp storage = array.length \n 262ms \n\n\n ArrayUtil.timSort - max temp storage = array.length/64 (like in master) \n 383ms \n\n\n ArrayUtil.timSort - max temp storage = 0 \n 444ms \n\n\n\n "
        },
        {
            "id": "comment-15266462",
            "author": "Robert Muir",
            "date": "2016-05-02T11:52:05+0000",
            "content": "interesting, arrays.sort declares it will use at most array.length/2 temporary storage:\n\n\"Temporary storage requirements vary from a small constant for nearly sorted input arrays to n/2 object references for randomly ordered input arrays.\" "
        },
        {
            "id": "comment-15266900",
            "author": "Adrien Grand",
            "date": "2016-05-02T16:13:08+0000",
            "content": "That is right for our TimSort too, my bad. I did the test with a max temporary storage of array.length above, but it would work the same with a mamimum temporary storage of about array.length/2, and it would still not merge in place. "
        }
    ]
}