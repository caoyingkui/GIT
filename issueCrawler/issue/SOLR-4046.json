{
    "id": "SOLR-4046",
    "title": "An instance of CloudSolrServer is not able to handle consecutive request on different collections o.a.",
    "details": {
        "affect_versions": "4.0",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "clients - java",
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Duplicate"
    },
    "description": "CloudSolrServer saves urlList, leaderUrlList and replicasList on instance level, and only recalculates those lists in case of clusterState changes. The values calculated for the lists will be different for different target-collections. Therefore they also ought to recalculated for a request R, if the target-collection for R is different from the target-collection for the request handled just before R by the same CloudSolrServer instance.\n\nAnother problem with the implementation in CloudSolrServer is with the lastClusterStateHashCode. lastClusterStateHashCode is updated when the first request after a clusterState-change is handled. Before the lastClusterStateHashCode is updated one of the following two sets of lists are updated:\n\n\tIn case sendToLeader==true for the request: leaderUrlList and replicasList  are updated, but not urlList\n\tIn case sendToLeader==false for the request: urlList is updated, but not leaderUrlList and replicasList\nBut the lastClusterStateHashCode is always updated. So even though there was just one collection in the world there is a problem: If the first request after a clusterState-change is a sendToLeader==true-request urlList will (potentially) be wrong (and will not be recalculated) for the next sendToLeader==false-request to the same CloudSolrServer instance. If the first request after a clusterState-change is a sendToLeader==false-request leaderUrlList and replicasList will (potentially) be wrong (and will not be recalculated) for the next sendToLeader==true-request to the same CloudSolrServer instance.\n\n\n\nBesides that it is a very bad idea to have instance- and local-method-variables with the same name. CloudSolrServer has an instance variable called urlList and method CloudSolrServer.request has a local-method-variable called urlList and the method also operates on instance variable urlList. This makes the code hard to read.\n\nHavnt made a test in Apache Solr regi to reproduce the main error (the one mentioned at the top above) but I guess you can easily do it yourself:\nMake a setup with two collections \"collection1\" and \"collection2\" - no default collection. Add some documents to \"collection2\" (without any autocommit). Then do cloudSolrServer.commit(\"collection1\") and afterwards cloudSolrServer.commit(\"collection2\") (use same instance of CloudSolrServer). Then try to search collection2 for the documents you inserted into it. They ought to be found, but are not, because the cloudSolrServer.commit(\"collection2\") will not do a commit of collection2 - it will actually do a commit of collection1.\nWell, actually you cant do cloudSolrServer.commit(<collection-name>) (the method doesnt exist), but that ought to be corrected too. But you can do the following instead:\n\nUpdateRequest req = new UpdateRequest();\nreq.setAction(UpdateRequest.ACTION.COMMIT, true, true);\nreq.setParam(CoreAdminParams.COLLECTION, <collection-name>);\nreq.process(cloudSolrServer);\n\n\n\nIn general I think you should add misc tests to your test-suite - tests that run Solr-clusters with more than one collection and makes clever tests on that.",
    "attachments": {
        "SOLR-4046.patch": "https://issues.apache.org/jira/secure/attachment/12552480/SOLR-4046.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13492430",
            "date": "2012-11-07T15:34:52+0000",
            "content": "I think this is a dupe of SOLR-3920? "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13492434",
            "date": "2012-11-07T15:39:34+0000",
            "content": "I have made the following patch in our local version of Solr.\n\nThe patch could be done in various ways, but I decided to get rid of unneccesary code-complexity at the expense of negligible performance optimizations. So the idea about calculating and \"caching\" the different lists and only recalculate them on clusterState-change is gone. The lists are calculated from in-memory clusterState and it cannot take many ms to calculate the lists for every request - and the additional GC that comes out of it should also be negligible. The good think is that code becomes easier to read and understand.\n\nWell, of course you can choose a different approach. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13492437",
            "date": "2012-11-07T15:47:53+0000",
            "content": "Yes, Mark, that seems like a dupe of SOLR-3920. But the patch is very different. First I thought about making the same patch, where the idea is to keep maps of the lists, but I just think, that if all this is only for performance reasons (not having to recalculate the lists every time) it is not worth the complexity in the code. Such an operation on in-memory stuff is negligible compared to what really uses time and resources in Solr, like storing to disk, sending stuff over network etc.\n\nBut anyways, you can use the patch if you want. I will consider if we will use your solution on our side or stay with our own.\n\nThanks a lot for responding.\n\nRegards, Per Steffensen "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13492447",
            "date": "2012-11-07T16:00:18+0000",
            "content": "Yeah, I honestly had the same thought when I was fixing - I almost just dropped the caching completely - it didn't seem like the perf would be much different and the code is complicated. It's mostly a random dice roll that I ended up keeping the caching. Mostly, I was too lazy to test if it mattered (even though intuitively, I doubt it would).\n\nI'll keep this open until I'm home from Germany and can re look at it. "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13492459",
            "date": "2012-11-07T16:13:00+0000",
            "content": "Well, the entire Apache Solr test-suite is still green with my fix - not that it makes any guarantee that the simplification does not \"matter\"  "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13495180",
            "date": "2012-11-12T09:50:09+0000",
            "content": "Duplicate of SOLR-3920, but the patch is a different more simple solution. "
        }
    ]
}