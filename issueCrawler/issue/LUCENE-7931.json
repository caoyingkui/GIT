{
    "id": "LUCENE-7931",
    "title": "SpanNotQuery  has bug\uff1f",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Not A Problem",
        "affect_versions": "5.3.1",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "core/search"
        ],
        "fix_versions": []
    },
    "description": "i find when use SpanNotQuery and the exclud key word like  \"not\"  \"or\"  will give a error result\n\nexample\uff1a\ndoc1\uff1athe quick brown fox jumps over the lazy dog\ndoc2\uff1athe quick red fox jumps over the sleepy cat\ndoc3\uff1athe quick brown fox jumps over the lazy NOT dog\n\nString queryStringStart = \"dog\";  \nString queryStringEnd = \"quick\";  \nString excludeString = \"NOT\";  \nSpanQuery queryStart = new SpanTermQuery(new Term(\"text\",queryStringStart));  \nSpanQuery queryEnd = new SpanTermQuery(new Term(\"text\",queryStringEnd));  \nSpanQuery excludeQuery = new SpanTermQuery(new Term(\"text\",excludeString));  \nSpanQuery spanNearQuery = new SpanNearQuery(  \n            new SpanQuery[] \n{queryStart,queryEnd}\n, 7, false, false);  \n\n SpanNotQuery spanNotQuery = new SpanNotQuery(spanNearQuery, excludeQuery, 4,3); \n\nthen  this will return doc1 and doc3.  so i think it is a bug.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16143400",
            "date": "2017-08-28T05:56:04+0000",
            "content": "Have you ever encountered the same problem? What is the solution? ",
            "author": "jin jing"
        },
        {
            "id": "comment-16147350",
            "date": "2017-08-30T14:46:18+0000",
            "content": "Probably that your analyzer performs lowercasing so you should actually try to match not, not NOT. ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16161019",
            "date": "2017-09-11T10:13:36+0000",
            "content": "i use the lowcase not .but got a same result ",
            "author": "jin jing"
        },
        {
            "id": "comment-16161380",
            "date": "2017-09-11T14:45:47+0000",
            "content": "Could you provide a standalone test case that reproduces the bug? ",
            "author": "Adrien Grand"
        },
        {
            "id": "comment-16162421",
            "date": "2017-09-12T02:48:20+0000",
            "content": " public static void main(String[] args) throws IOException {  \n        Directory dir = new RAMDirectory();  \n        Analyzer analyzer = new StandardAnalyzer();  \n        IndexWriterConfig iwc = new IndexWriterConfig(analyzer);  \n        iwc.setOpenMode(OpenMode.CREATE);  \n        IndexWriter writer = new IndexWriter(dir, iwc);  \n\n        Document doc = new Document();  \n        doc.add(new TextField(\"text\", \"the quick brown fox jumps over the lazy dog\", Field.Store.YES));  \n        writer.addDocument(doc);  \n\n        doc = new Document();  \n        doc.add(new TextField(\"text\", \"the quick red fox jumps over the sleepy cat\", Field.Store.YES));  \n        writer.addDocument(doc);  \n\n        doc = new Document();  \n        doc.add(new TextField(\"text\", \"the quick brown fox jumps over the lazy not dog\", Field.Store.YES));  \n        writer.addDocument(doc);  \n        writer.close(); \n        IndexReader reader = DirectoryReader.open(dir);  \n        IndexSearcher searcher = new IndexSearcher(reader);  \n        String queryStringStart = \"dog\";  \n        String queryStringEnd = \"quick\";  \n        String excludeString = \"not\";  \n        SpanQuery queryStart = new SpanTermQuery(new Term(\"text\",queryStringStart));  \n        SpanQuery queryEnd = new SpanTermQuery(new Term(\"text\",queryStringEnd));  \n        SpanQuery excludeQuery = new SpanTermQuery(new Term(\"text\",excludeString));  \n        SpanQuery spanNearQuery = new SpanNearQuery(  \n            new SpanQuery[] \n{queryStart,queryEnd}\n, 9, false, false);  \n\n        SpanNotQuery spanNotQuery = new SpanNotQuery(spanNearQuery, excludeQuery, 4,3);  \n        TopDocs results = searcher.search(spanNotQuery, null, 100);  \n        ScoreDoc[] scoreDocs = results.scoreDocs;  \n\n        for (int i = 0; i < scoreDocs.length; ++i) \n{  \n            int docID = scoreDocs[i].doc;  \n            Document document = searcher.doc(docID);  \n            String path = document.get(\"text\");  \n            System.out.println(\"text:\" + path);  \n        }\n  \n    }   ",
            "author": "jin jing"
        },
        {
            "id": "comment-16162600",
            "date": "2017-09-12T07:29:22+0000",
            "content": "\"not\" is a stopword, and is removed by the StandardAnalyzer by default. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16162662",
            "date": "2017-09-12T08:25:47+0000",
            "content": "yes it is.thank you ",
            "author": "jin jing"
        }
    ]
}