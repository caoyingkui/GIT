{
    "id": "SOLR-6239",
    "title": "HttpSolrServer: connection still allocated",
    "details": {
        "affect_versions": "4.9",
        "status": "Open",
        "fix_versions": [],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "In scenarios where concurrency is aggressive, this exception could easily appear:\n\n\norg.apache.solr.client.solrj.impl.HttpSolrServer$RemoteSolrException: Invalid use of BasicClientConnManager: connection still allocated.\nMake sure to release the connection before allocating another one.\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.executeMethod(HttpSolrServer.java:554) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:210) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n\tat org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:206) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n\tat org.apache.solr.client.solrj.request.AbstractUpdateRequest.process(AbstractUpdateRequest.java:124) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n\tat org.apache.solr.client.solrj.SolrServer.add(SolrServer.java:116) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n\tat org.apache.solr.client.solrj.SolrServer.add(SolrServer.java:102) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n\nI wonder if there is any solution for it?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Sergio Fern\u00e1ndez",
            "id": "comment-14058724",
            "date": "2014-07-11T12:47:36+0000",
            "content": "The recommended way, by Httpcomponents 4.1, is to close connection and release any underlying resources:\n\n\nEntityUtils.consume(HttpEntity)\n\n\nBut not sure how it fits with the current code... "
        },
        {
            "author": "Anton Kozak",
            "id": "comment-14236864",
            "date": "2014-12-06T16:01:55+0000",
            "content": "The issue is reproducible in case of high load, I see 4-5 exceptions in the log after full index rebuild:\n2014-12-06 04:51:21,372 [pool-2-thr] [ERROR] c.c.r.w.c.r.index.impl.service.RebuildIndexServiceImpl ->run:188 - Unexpected exception has been thrown.\norg.apache.solr.client.solrj.impl.HttpSolrServer$RemoteSolrException: Connection reset\n        at org.apache.solr.client.solrj.impl.HttpSolrServer.executeMethod(HttpSolrServer.java:554) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n        at org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:210) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n        at org.apache.solr.client.solrj.impl.HttpSolrServer.request(HttpSolrServer.java:206) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n        at org.apache.solr.client.solrj.impl.LBHttpSolrServer.doRequest(LBHttpSolrServer.java:340) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n        at org.apache.solr.client.solrj.impl.LBHttpSolrServer.request(LBHttpSolrServer.java:301) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n        at org.apache.solr.client.solrj.impl.CloudSolrServer.request(CloudSolrServer.java:659) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n        at org.apache.solr.client.solrj.request.AbstractUpdateRequest.process(AbstractUpdateRequest.java:124) ~[solr-solrj-4.9.0.jar:4.9.0 1604085 - rmuir - 2014-06-20 06:34:04]\n\nIs it any workaround for 4.9 version?\n\nThanks,\nAnton "
        },
        {
            "author": "Mohsen",
            "id": "comment-14956356",
            "date": "2015-10-14T06:32:02+0000",
            "content": "Overriding createClientConnectionManager() and returning PoolingClientConnectionManager instead of default BasicClientConnectionManager solves this issue.\n\n    @Override\n    protected ClientConnectionManager createClientConnectionManager() {\n        return new PoolingClientConnectionManager();\n    }\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14957114",
            "date": "2015-10-14T15:45:58+0000",
            "content": "Mohsen, one instance of HttpSolrClient is supposed to be usable by multiple threads in parallel.  The httpcomponents documentation says that BasicHttpClientConnectionManager can only make one connection at a time, so I would be very surprised to find that Solr is using that connection manager by default.  The only place I can find BasicHttpClientConnectionManager in current Lucene/Solr code is in the replicator code for Lucene, which is not used by Solr. "
        },
        {
            "author": "Sergio Fern\u00e1ndez",
            "id": "comment-14957168",
            "date": "2015-10-14T16:11:43+0000",
            "content": "Notice than in modern HTTP Components (>=4.4.0) the CloseableHttpClient should care about automatically closing connections. Not sure if Solr plans to upgrade such component, but we may benefit on the latest improvements and api cleanning done there. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14957250",
            "date": "2015-10-14T16:51:10+0000",
            "content": "Current versions of Solr are using the 4.4.1 versions of the httpcomponents jars.  Version 4.9 was released in June of 2014.  SOLR-8040 describes my plans to upgrade to HC 4.5.1.\n\nThere is a potential hiccup \u2013 although Solr is using some of the new HC object types, there are still a lot of objects and methods in use that were deprecated in HC 4.3.  SOLR-5604 discusses that problem and the fact that a fix is not going to be trivial.\n\nOne thing you can do to bring Solr slightly closer to the modern era is to build your own HttpClient object, using HC-recommended methods, and use that when building Solr client objects.  Here's code that I use to do this, where I share HttpClient objects among multiple HttpSolrClient objects:\n\n\n\t/**\n\t * Creates and initializes a new Core object.\n\t * \n\t * @param chain The name of the chain.\n\t * @param shard The name of the shard.\n\t * @param name The name of the core.\n\t */\n\tpublic Core(String chain, String shard, String name)\n\t{\n\t\t_backgroundOptimizeUnderway.set(false);\n\n\t\t/*\n\t\t * If this is the first time an object of this type has been created,\n\t\t * create the shared httpClient objects. One has increased connection\n\t\t * properties, the other a very long socket timeout. Synchronized to\n\t\t * ensure thread safety.\n\t\t */\n\t\tsynchronized (firstInstance)\n\t\t{\n\t\t\tif (firstInstance)\n\t\t\t{\n\t\t\t\tfirstInstance = false;\n\t\t\t\t/* Trying out a new way of creating clients */\n\t\t\t\tRequestConfig rc = RequestConfig.custom()\n\t\t\t\t\t\t.setConnectTimeout(15000)\n\t\t\t\t\t\t.setSocketTimeout(Const.SOCKET_TIMEOUT)\n\t\t\t\t\t\t.build();\n\t\t\t\thttpClient = HttpClients.custom()\n\t\t\t\t\t\t.setDefaultRequestConfig(rc)\n\t\t\t\t\t\t.setMaxConnPerRoute(300)\n\t\t\t\t\t\t.setMaxConnTotal(5000)\n\t\t\t\t\t\t.disableAutomaticRetries()\n\t\t\t\t\t\t.build();\n\t\t\t\tRequestConfig orc = RequestConfig.custom()\n\t\t\t\t\t\t.setConnectTimeout(15000)\n\t\t\t\t\t\t.setSocketTimeout(Const.ONE_HOUR * 2)\n\t\t\t\t\t\t.build();\n\t\t\t\toptimizeHttpClient = HttpClients.custom()\n\t\t\t\t\t\t.setDefaultRequestConfig(orc)\n\t\t\t\t\t\t.disableAutomaticRetries()\n\t\t\t\t\t\t.build();\n\t\t\t}\n\t\t}\n\t\t_shard = shard;\n\t\t_chain = chain;\n\t\t_name = name;\n\t\t_prefix = \"shard.\" + chain + \".\" + shard + \".\";\n\t\tString serverHost = Static.cfg.get(_prefix + \"host\");\n\t\tString serverPort = Static.cfg.get(_prefix + \"port\");\n\n\t\t/*\n\t\t * This try/catch structure does not throw any checked exceptions, or at\n\t\t * least it didn't throw any when this comment was written. Leaving it\n\t\t * here anyway just in case there might be any other kind of exception\n\t\t * thrown.\n\t\t */\n\t\ttry\n\t\t{\n\t\t\tString serverBaseUrl = \"http://\" + serverHost + \":\" + serverPort + \"/solr/\";\n\t\t\t/*\n\t\t\t * Check to see if we already have this host/port combination saved\n\t\t\t * in the client maps. If we do, re-use them instead of creating new\n\t\t\t * ones. If not, create new clients and put them in the list.\n\t\t\t * Synchronized on one of the static Map objects to ensure thread\n\t\t\t * safety.\n\t\t\t */\n\t\t\tsynchronized (clientMap)\n\t\t\t{\n\t\t\t\tHttpSolrClient tmpClient;\n\t\t\t\tString hostPort = serverHost + serverPort;\n\n\t\t\t\tif (clientMap.containsKey(hostPort))\n\t\t\t\t{\n\t\t\t\t\t_client = clientMap.get(hostPort);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmpClient = new HttpSolrClient(serverBaseUrl, httpClient);\n\t\t\t\t\t_client = tmpClient;\n\t\t\t\t\tclientMap.put(hostPort, _client);\n\t\t\t\t}\n\n\t\t\t\tif (optimizeClientMap.containsKey(hostPort))\n\t\t\t\t{\n\t\t\t\t\t_optimizeClient = optimizeClientMap.get(hostPort);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\ttmpClient = new HttpSolrClient(serverBaseUrl, optimizeHttpClient);\n\t\t\t\t\t_optimizeClient = tmpClient;\n\t\t\t\t\toptimizeClientMap.put(hostPort, _optimizeClient);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e)\n\t\t{\n\t\t\tthrow new RuntimeException(_prefix + _name + \": Failed to create client objects\", e);\n\t\t}\n\t}\n\n\n\nTo help make sense of that code, here are thed important class field definitions:\n\n\n\t/**\n\t * A static boolean value indicating whether this is the first instance of\n\t * this object. Also used for thread synchronization.\n\t */\n\tprivate static Boolean firstInstance = true;\n\n\t/**\n\t * A static http client to use on Solr client objects.\n\t */\n\tprivate static HttpClient httpClient = null;\n\n\t/**\n\t * A static http client to use on Solr client objects. This one is for doing\n\t * optimizes, will use a much longer socket timeout.\n\t */\n\tprivate static HttpClient optimizeHttpClient = null;\n\n\t/**\n\t * A static map of server-level Solr objects, so that instances living on\n\t * the same server/port can share objects.\n\t */\n\tprivate static final Map<String, SolrClient> clientMap = new HashMap<>();\n\n\t/**\n\t * A static map of server-level Solr objects for optimizes that have a\n\t * larger socket timeout.\n\t */\n\tprivate static final Map<String, SolrClient> optimizeClientMap = new HashMap<>();\n\n\t/** The main SolrClient object. */\n\tprivate SolrClient _client;\n\n\t/** A SolrClient object using a longer socket timeout, for optimizes. */\n\tprivate SolrClient _optimizeClient;\n\n "
        },
        {
            "author": "Mohsen",
            "id": "comment-14958496",
            "date": "2015-10-15T08:20:48+0000",
            "content": "Shawn, sorry for my confusing comment.\nI'm using Solr (single instance, no cloud) in a few rather high traffic news websites for some years (from Solr 1.4 to 5.2). Recently when I was trying to add basic HTTP auth to a Solr client, I encountered this SolrJ / HC error. The code I was using is here, but slightly modified to fix the issue mentioned in this report. I didn't see this error yet in any of my previous apps, until I added basic authentication to HttpSolrClient(/Server).\nMy comment was actually misleading because it should go under this post, not here.\nThanks. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14959063",
            "date": "2015-10-15T15:24:49+0000",
            "content": "I scratched my head trying to figure out how you can fix this.  DefaultHttpClient is deprecated and shouldn't be used if you can avoid it.\n\nPerhaps you can upgrade the jars for HttpClient and friends in your SolrJ app and try code similar to the following to create your HttpClient object with the authentication parameters:\n\n\n        String username = \"user\";\n        String password = \"password\";\n        CredentialsProvider provider = new BasicCredentialsProvider();\n        AuthScope scope = new AuthScope(AuthScope.ANY_HOST, AuthScope.ANY_PORT, AuthScope.ANY_REALM);\n        UsernamePasswordCredentials credentials = new UsernamePasswordCredentials(username, password);\n        provider.setCredentials(scope, credentials);\n        \n        RequestConfig rc = RequestConfig.custom()\n                .setConnectTimeout(15000)\n                .setSocketTimeout(Const.SOCKET_TIMEOUT)\n                .build();\n        HttpClient httpClient = HttpClients.custom()\n                .setDefaultRequestConfig(rc)\n                .setMaxConnPerRoute(300)\n                .setMaxConnTotal(5000)\n                .setDefaultCredentialsProvider(provider)\n                .disableAutomaticRetries()\n                .build();\n\n\n\nFYI \u2013 you can use the latest httpclient, httpmime, and httpcore jars as drop-in replacements in your application and they will work, even with older SolrJ versions.  The httpcomponents project has done an excellent job of not breaking the APIs with new minor releases. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14970943",
            "date": "2015-10-23T13:15:40+0000",
            "content": "You are synchronizing on the \"firstInstance\" field, which will point to Boolean.TRUE.  You really shouldn't synchronize on that.  Instead, create an object just for synchronizing and then when you hold that luck, and only then, should a firstInstance (primitive) boolean be examined.  That fixes this problem; although it's likely other simplifications could be done to clarify the pattern here, which looks like just a simple thread-safe lazy init which has been done before by many. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14970960",
            "date": "2015-10-23T13:25:08+0000",
            "content": "Interesting.  Good to know, I was not aware that synchronization would follow the object rabbit hole down to the bottom, rather than use the specific instance (in this case, firstInstance).\n\nThanks for the pointer, I will fix. "
        },
        {
            "author": "David Smiley",
            "id": "comment-14970976",
            "date": "2015-10-23T13:31:55+0000",
            "content": "N/P.  Technically one synchronizes on a specific instance of an object.  A field or variable is simply a pointer to a an object.  The primitive \"true\" resolves to Boolean.TRUE when assigned to a Boolean variable.  Given that Boolean.TRUE is a global object instance that comes with the JDK; it's a terrible choice to synchronize on. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14970989",
            "date": "2015-10-23T13:38:30+0000",
            "content": "An audit of my code revealed that this was the only place I was synchronizing on a Boolean (or any other object that might be globally defined), so it was likely safe ... but based on what you said it's a bad practice, so I used \"private static Object initSync;\" instead.\n\nEdit: After further thought I realized that the code wasn't safe even thought it's the only instance where I'm using Boolean, because of the possibility of some instances synchronizing on Boolean.TRUE and others synchronizing on Boolean.FALSE.  The initialization code isn't currently multi-threaded so that situation can't come up, but I wanted the object to be threadsafe, and it wasn't.  Thank you for bringing my coding problem to my attention. "
        }
    ]
}