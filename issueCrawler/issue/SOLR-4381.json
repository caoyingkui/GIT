{
    "id": "SOLR-4381",
    "title": "Query-time multi-word synonym expansion",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [],
        "components": [
            "query parsers"
        ],
        "type": "Improvement",
        "priority": "Minor",
        "labels": "",
        "resolution": "Won't Fix"
    },
    "description": "This is an issue that seems to come up perennially.\n\nThe Solr docs caution that index-time synonym expansion should be preferred to query-time synonym expansion, due to the way multi-word synonyms are treated and how IDF values can be boosted artificially. But query-time expansion should have huge benefits, given that changes to the synonyms don't require re-indexing, the index size stays the same, and the IDF values for the documents don't get permanently altered.\n\nThe proposed solution is to move the synonym expansion logic from the analysis chain (either query- or index-type) and into a new QueryParser.  See the attached patch for an implementation.\n\nThe core Lucene functionality is untouched.  Instead, the EDismaxQParser is extended, and synonym expansion is done on-the-fly.  Queries are parsed into a lattice (i.e. all possible synonym combinations), while individual components of the query are still handled by the EDismaxQParser itself.\n\nIt's not an ideal solution by any stretch. But it's nice and self-contained, so it invites experimentation and improvement.  And I think it fits in well with the merry band of misfit query parsers, like func and frange.\n\nMore details about this solution can be found in this blog post and the Github page for the code.\n\nAt the risk of tooting my own horn, I also think this patch sufficiently fixes SOLR-3390 (highlighting problems with multi-word synonyms) and LUCENE-4499 (better support for multi-word synonyms).",
    "attachments": {
        "SOLR-4381-2.patch": "https://issues.apache.org/jira/secure/attachment/12567211/SOLR-4381-2.patch",
        "SOLR-4381.patch": "https://issues.apache.org/jira/secure/attachment/12567076/SOLR-4381.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13566310",
            "date": "2013-01-30T09:09:55+0000",
            "content": "Hi. Well written blog post! I agree that the synonym feature is better implemented above analysis, so QP fits well. Question is whether each query parser would need its own implementation or if it could be generalized?\n\nAlso, I quite like the fact that the Analysis-synonyms allow for different dictionaries per field, so that if you have a qf=text_en text_de, to search two languages at the same time, they can expand synonyms differently. A suggestion to allow that in your approach could be for the QP to inspect the query analysis chain for each field in qf, and if it finds a SynoymFilterFactory, it will use that dictionary instead of the global one (and of course disable the analysis filter). This is a trick that eDisMax already does for conditional stopword handling. Such an approach makes it easier to migrate from what people may have now, to this solution.\n\nI have not tested the patch yet. But I absolutely like the concept! "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13566378",
            "date": "2013-01-30T11:13:28+0000",
            "content": "Hi Jan.  Thanks for the speedy reply!  In answer to your questions:\n\n\nQuestion is whether each query parser would need its own implementation or if it could be generalized?\n\nI agree that it would be nice to abstract the code out of just EDisMax.  I think this parser could subclass DisMax just as easily as EDisMax, or it could be abstracted out into its own class that takes either DisMax or EDisMax as a constructor argument and then delegates to it.  But for the Lucene parser it might be a bit more complicated, because I specifically check for some DisMax parameters (e.g. QF), plus there is some code copied from EDisMax itself where it's private rather than protected (e.g. these lines).  Cleverer folks than me in the Lucene project might know a better way to do this, though.\n\n\nA suggestion to allow that in your approach could be for the QP to inspect the query analysis chain for each field in qf, and if it finds a SynoymFilterFactory, it will use that dictionary instead of the global one (and of course disable the analysis filter).\n\nI agree that the less configuration, the better.  However, I kind of like leaving the SynonymFilterFactory out of the analysis chains, because it makes it clearer that the synonym expansion logic isn't happening there at all. Plus, in most of the use cases we've seen, the only difference between the query-time analyzer and the index-time analyzer was the SynonymFilterFactory itself, so removing it gained us some code simplicity, by allowing us to define just one analyzer for both.  Perhaps other folks have had different experiences, though. "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13566539",
            "date": "2013-01-30T15:21:53+0000",
            "content": "I have personally implemented multi-word synonym support within a query parser, bypassing analysis for synonym processing as you suggest, but still examining the analysis chain to discover and load the field-specific synonym table. Yes, that approach can work, but I have refrained from proposing such a solution in Solr/Lucene since it is rather messy and not really an ideal solution because it does bypass analysis. There are ongoing discussions on the Lucene/Solr lists about how best to address query-time synonym processing; there have actually been some hopeful suggestions recently, but still a long way to go. I would rather see those discussions continue and come to fruition than see edismax changed in a way that would be incompatible with a more ideal solution.\n\nI suppose you could simply have your patch remain a patch forever without integration into the Solr code base, for people who are desperate to have the feature in edismax, but due to its far-from-ideal nature (bypassing analysis and not supporting field-specific synonym tables), it would seem less likely to be integrated into the Solr code base since it would interfere with a broader solution. Note that I am NOT a committer, so I would have no official say in the matter. This is just my own opinion.\n\nI suppose you could also package it as a separate \"contrib\" query parser and then it could be integrated into a Solr release and be available to anybody without the need for patching. That might be the more fruitful approach for near-term integration.\n\nBut I would definitely be -1 for direct integration into edismax since it does bypass analysis (and as an incidental objection doesn't support field-specific synonym tables.) Analysis is really important and gives the developer fine-tuning control over field-specific processing without changing any code.\n\nOTOH, if it could be turned on and off dynamically with a request parameter, maybe direct integration into the Solr code base would be feasible. IOW, if it is simply a user-selectable \"plugin\", that would be more compelling.\n\nAgain, I am not a committer, so my opinion here can be freely ignored. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13566549",
            "date": "2013-01-30T15:43:40+0000",
            "content": "We'd benefit from a more component based QP framework, then this could be a plugin. But that's for another century I guess \n\nI agree that the less configuration, the better. However, I kind of like leaving the SynonymFilterFactory out of the analysis chains, because it makes it clearer that the synonym expansion logic isn't happening there at all. Plus, in most of the use cases we've seen, the only difference between the query-time analyzer and the index-time analyzer was the SynonymFilterFactory itself, so removing it gained us some code simplicity, by allowing us to define just one analyzer for both. Perhaps other folks have had different experiences, though.\n\nSure, it's confusing not to have a WYSIWYG Analysis. Perhaps we can include fieldType referencs instead of defining analysis with a new syntax, something like what SpellCheckComponent does in config param queryAnalyzerFieldType.\n\nAnd perhaps even better than tying dictionary to fieldType, would be to be able to choose dictionary per field name. Here's an imagined config based on these ideas:\n\n\n<queryParser name=\"synonym_edismax\" class=\"solr.SynonymExpandingExtendedDismaxQParserPlugin\">\n  <str name=\"defaultDict\">english</str>\n  <lst name=\"dictionaries\">\n    <lst name=\"english\">\n      <str name=\"fieldType\">synonym_type_en</str>\n      <str name=\"useForFields\">title *_en</str>\n    </lst>\n    <lst name=\"addresses\">\n      <str name=\"fieldType\">synonym_type_addr</str>\n      <str name=\"useForFields\">street city state</str>\n    </lst>\n  </lst>\n</queryparser>\n\n\n\nWe could even have a convention that if the queryParser config is empty, then look for a fieldType in Schema named \"synonymDefaultAnalysis\" and use that for synonym expansion for all fields of a TextField type. "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13566614",
            "date": "2013-01-30T16:59:57+0000",
            "content": "I do agree with Jack that this is a less-than-ideal solution (the XML config is pure hack).  So I'd be happy to have it included in contrib/ to keep it from muddying up the central code base.  In any case, I intend to maintain the Github code, which acts as a sort of drop-in JAR plugin for multiple Solr versions.\n\nMy goal was mostly just to start a conversation about this.  I think Jan's proposed configuration is a step in the right direction, for instance - very clear and concise!  So this might be something worth incubating a bit more in Github before contributing it to Solr.\n\nSpeaking of which, please disregard the patch I posted.  As it turns out, I'm having problems getting it to work with Solr 4.1.0 (due to this bug), although 3.5.0 - 4.0.0 all work nicely. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13566732",
            "date": "2013-01-30T18:31:50+0000",
            "content": "As it turns out, I'm having problems getting it to work with Solr 4.1.0 (due to this bug), although 3.5.0 - 4.0.0 all work nicely.\n\nI commented on the bug with more details, but basically you need to call reset() before using any tokenstream. "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13566912",
            "date": "2013-01-30T21:18:57+0000",
            "content": "Thanks for the guidance, Steve.  The attached SOLR-4381-2.patch should work for Solr 4.1.0. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13566960",
            "date": "2013-01-30T22:05:24+0000",
            "content": "Earlier I was considering a SynonymSearchComponent but it would be hard to make it work with all query parsers. So the more I think of it, I believe synonyms is best solved in the Query Parser. Deboosting expanded synonyms is quite important I think. Let's evolve this a bit in GitHub and dump a patch here later.\n\nTip: When uploading patches, give them the same name every time. Jira will grey out the older versjons. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13567040",
            "date": "2013-01-30T23:02:42+0000",
            "content": "Tested it with 4.1 and it works like a charm. A few comments:\n\nI dropped the jar into SOLR_HOME/lib and declared sharedLib=\"lib\" in solr.xml, and the plugin was picked up. No need to re-package WAR. This was Tomcat7.\n\nAren't multi word synonyms supposed to be treaded like a phrase? What I see is that the individual words are searched. Example synonym apache software foundation,apache,asf, and I query for \"asf\":\n\n+((manu:asf)^2.0 (((manu:apache) (((manu:software) (manu:apache) (manu:foundation))~3))^0.2))\n\n\nThis will match also apache \"apache foundation software\". If I quote the multi-word synonym in synonyms.txt, it gets quoted, but then the phrase is not detected when entered as query.\n\nPerhaps an option to control the sloppyness of expanded multi-word synonyms would do. "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13567657",
            "date": "2013-01-31T14:12:10+0000",
            "content": "Absolutely right, Jan.  \"software foundation apache\", \"foundation software apache\", and any other combination all match.  I've filed a bug.\n\nThis is what I get for submitting my code to the harsh light of day!   Hopefully I can push out a fix by this weekend.\n\nAlso, thanks for the tip about sharedLib=\"lib\".  I'll test it out and add it to the \"Getting Started\" instructions.\n\nI agree that development should stay in GitHub for now. I'll re-request a merge when the code is a bit more mature. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13567665",
            "date": "2013-01-31T14:26:08+0000",
            "content": "Could you specify which private methods in eDisMax you needed to copy/paste? Perhaps we can look at how to make it more extension friendly? "
        },
        {
            "author": "Jack Krupansky",
            "id": "comment-13567675",
            "date": "2013-01-31T14:43:30+0000",
            "content": "If this issue is to be seriously pursued as part of edismax, the following should be included here in JIRA:\n\n1. A concise summary of the overall approach, with key technical details.\n\n2. A few example queries, both source and the resulting \"parsed query\". Key test cases, if you will.\n\n3. A semi-detailed summary of what the user of the change needs to know, in terms of how to set it up, manage it, use it, and its precise effects.\n\n4. Detail any limitations.\n\nThat said, if you were to implement this as pat of a standalone, \"contrib\" query parser, you you are much freer to do whatever you want with no regard to potential consequences and need not worry about fine details. But if you want this to be part of edismax, you'll need to be very, very careful. I would suggest the former - it would allow you to get going much more rapidly. Integration with edismax proper could be deferred until you're happy that you've done all you've intended to do - and meanwhile the contrib module would be available for others to use out of the box.\n\n\n\n4. Specifically what features of the Synonym Filter will be lost by using this approach. "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13568745",
            "date": "2013-02-01T14:03:22+0000",
            "content": "\nCould you specify which private methods in eDisMax you needed to copy/paste? Perhaps we can look at how to make it more extension friendly?\nThese lines.\n\n\nIf this issue is to be seriously pursued as part of edismax, the following should be included here in JIRA:\n\nI don't think it should be included in EDisMax itself.  Extending EDisMax was just a temporary shortcut I took, but Jan points out that the solution itself could be applied outside EDisMax, or even outside Solr.\n\n\n1. A concise summary of the overall approach, with key technical details.\n\nPlease see this blog post for the best explanation.\n\n\n2. A few example queries, both source and the resulting \"parsed query\". Key test cases, if you will.\n\nGood idea.  Added to the README.\n\n\n3. A semi-detailed summary of what the user of the change needs to know, in terms of how to set it up, manage it, use it, and its precise effects. \n\nIn the README for now.\n\n\n4. Detail any limitations.\n\nCurrently handling this in the Issues page.  Otherwise the standard query-time expansion concerns apply: increased delay in query execution, configuration is in the request parameters instead of the schema.xml, query becomes bloated and incomprehensible.  Also potential user confusion on the single \"best practice\" solution for synonyms in Solr, since Solr already has a well-documented way of handling synonyms through the SynonymFilterFactory.  As of right now, I assume people will only use my solution if they try the standard solution and are unsatisfied.\n\n\n4. Specifically what features of the Synonym Filter will be lost by using this approach.\n\nAs far as I know, none, because I'm still using the SynonymFilterFactory and it's configurable by the user.\n\nIn general, I agree with you that some rapid iteration outside of the Solr core would probably be a better approach than outright integration.  Please consider my \"merge request\" withdrawn; I'll let the code incubate for a bit, and then look into integration later. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13604491",
            "date": "2013-03-17T03:35:35+0000",
            "content": "In general, I agree with you that some rapid iteration outside of the Solr core would probably be a better approach than outright integration. Please consider my \"merge request\" withdrawn; I'll let the code incubate for a bit, and then look into integration later.\n\nHas that time come by any chance? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13605705",
            "date": "2013-03-18T21:46:49+0000",
            "content": "Nolan Lawson I see this marked for 4.3.  Does this mean there is no patch for 4.1 or 4.2? (even though I see a 4.1 jar int he README on Github) TIA. "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13611797",
            "date": "2013-03-23T18:26:23+0000",
            "content": "Hey Otis Gospodnetic:\n\nTo answer your first question, I don't believe that time has come yet.  I still have a lot of open issues to fix, although I'm slowly whittling them down.\n\nThe most important one, I believe, is to use composition instead of subclassing, so that I can support the DisMax and Lucene query parsers instead of just EDisMax.  After that I need to seriously simplify the XML configuration.\n\nAs for your second question, I'm testing out Solr 4.2 as we speak.  If it works, I'll modify the README; otherwise I'll add a GitHub issue. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13612377",
            "date": "2013-03-25T03:57:47+0000",
            "content": "Nolan Lawson: would it be possible for you to (quickly?) open issues for everything that remains to be done?  I'm asking/suggesting this because we (Sematext) have a client who'd really like to see this committed to Solr, we are willing to put in the work to make that happen, and to make this possible it would be really helpful to see what the remaining issues are.  Thanks! "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13612858",
            "date": "2013-03-25T17:16:46+0000",
            "content": "Otis Gospodnetic: OK, I've updated everything in the GitHub Issues page.  If you're willing to put in work, then please do send me a pull request!    Looking forward to it. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-13617094",
            "date": "2013-03-29T05:37:56+0000",
            "content": "Thanks Nolan Lawson.  In your blog post I see \"...the parser does not currently expand synonyms if the user input contains complex query operators (i.e. AND, OR, +, and -). This is a TODO for a future release.\", but it looks like that's not on the list of open issues at https://github.com/healthonnet/hon-lucene-synonyms/issues?state=open\n\nMaybe this is no longer true - are Boolean operators handled correctly now? "
        },
        {
            "author": "Okke Klein",
            "id": "comment-13621944",
            "date": "2013-04-04T08:59:06+0000",
            "content": "The terms that are being expanded by the solr.SynonymFilterFactory are also being stemmed. This is unwanted if you want to expand \"MIA\" to \"missing in action\" and not \"miss in action\". See Github issue for details.\n\n\n\n\n "
        },
        {
            "author": "Hemant Verma",
            "id": "comment-13675702",
            "date": "2013-06-05T08:29:40+0000",
            "content": "While using this patch I found one scenario in which it is not working properly.\nI have in my synonyms list the below keywords:\n       pepsi,pepsico,pbg\n       outsourcing,rpo,offshoring\n\nDifference in expanding synonyms comes up when I use any of the word with stopword as a prefix.\n\nSearch Keyword ------------ Expanded Result\n----------------------------------------------------------------\npepsi -----------------------> pepsi, pepsico, pbg\npbg -------------------------> pepsi, pepsico, pbg\nthe pepsi -----------------> pepsi, pepsico\nthe pbg -------------------> pepsi, pbg\noutsourcing -------------> outsourc, offshor, rpo\nthe outsourcing --------> outsourc, offshor\n\nThe above expanded synonyms result shows that when we use any keyword (available in synonym list) prefixed with stopword then expanded synonyms do miss few synonym. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717156",
            "date": "2013-07-23T18:47:18+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Nolan Lawson",
            "id": "comment-13832100",
            "date": "2013-11-26T00:06:42+0000",
            "content": "Otis Gospodnetic: I was going to tip you off to this open issue, but then I realized you were the one who filed it! \n\nHemant Verma: Could you try the 1.3.3 release and see if this still persists?  If not, please file a new issue on GitHub.\n\nBTW, the project has matured considerably since I first opened this issue.  It seems pretty healthy as a separate plugin, but I'll defer to the wisdom of the Solr devs as to whether or not they want to include it in 5.0.  As it stands, you can pretty much just copy the source files over; it still lives as a separate QParserPlugin class. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971249",
            "date": "2014-04-16T12:57:34+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15975333",
            "date": "2017-04-19T19:11:54+0000",
            "content": "Closing as won't fix, since the new graph and sow stuff in SOLR-9185, 10343 (https://lucidworks.com/2017/04/18/multi-word-synonyms-solr-adds-query-time-support/) provides an official solution, so the sedismax code will never land in Solr. "
        }
    ]
}