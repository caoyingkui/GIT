{
    "id": "LUCENE-8054",
    "title": "Test failure, Geo3dRptTest",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.2",
            "master (8.0)"
        ]
    },
    "description": "Geo3dRptTest.testOperations fails with seed 39BCAE475BCFB043 \n\n\nNOTE: reproduce with: ant test  -Dtestcase=Geo3dRptTest -Dtests.method=testOperations -Dtests.seed=39BCAE475BCFB043 -Dtests.locale=it-IT -Dtests.timezone=America/Boise -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\njava.lang.AssertionError: [Intersects] qIdx:3 Shouldn't match I#5:Geo3D:GeoExactCircle: {planetmodel=PlanetModel.WGS84, center=[lat=-1.0394053553992673, lon=-1.9037325881389144([X=-0.16538181742539926, Y=-0.4782462267840722, Z=-0.8609141805702146])], radius=1.1546166170607672(66.15465911325472), accuracy=4.231100485201301E-4} Q:Geo3D:GeoExactCircle: {planetmodel=PlanetModel.WGS84, center=[lat=-1.3165961602008989, lon=-1.887137823746273([X=-0.07807211790901268, Y=-0.23850901911945152, Z=-0.9659034153262631])], radius=1.432516663588956(82.07715890580914), accuracy=3.172052880854355E-11}\n\n\tat __randomizedtesting.SeedInfo.seed([39BCAE475BCFB043:40C6F2143E9FE395]:0)\n\tat org.junit.Assert.fail(Assert.java:93)\n\tat org.apache.lucene.spatial.prefix.RandomSpatialOpStrategyTestCase.fail(RandomSpatialOpStrategyTestCase.java:126)\n\tat org.apache.lucene.spatial.prefix.RandomSpatialOpStrategyTestCase.testOperation(RandomSpatialOpStrategyTestCase.java:115)\n\tat org.apache.lucene.spatial.prefix.RandomSpatialOpStrategyTestCase.testOperationRandomShapes(RandomSpatialOpStrategyTestCase.java:55)\n\tat org.apache.lucene.spatial.spatial4j.Geo3dRptTest.testOperations(Geo3dRptTest.java:117)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner.invoke(RandomizedRunner.java:1737)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$8.evaluate(RandomizedRunner.java:934)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$9.evaluate(RandomizedRunner.java:970)\n\tat com.carrotsearch.randomizedtesting.RandomizedRunner$10.evaluate(RandomizedRunner.java:984)\n\n\n\nCC Karl Wright Ignacio Vera",
    "attachments": {
        "LUCENE_8054_randomTest.patch": "https://issues.apache.org/jira/secure/attachment/12898662/LUCENE_8054_randomTest.patch",
        "LUCENE-8054.patch": "https://issues.apache.org/jira/secure/attachment/12898623/LUCENE-8054.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16259507",
            "date": "2017-11-20T17:17:05+0000",
            "content": "Ignacio Vera, once again I could use a simple test case that demonstrates the problem.\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16260372",
            "date": "2017-11-21T07:44:11+0000",
            "content": "Hi Karl Wright,\n\nThis case is much clear as the relationship between the two circles must be different to DISJOINT and centers are close to each other in respect to the radius. Still getRelationship returns DISJOINT.\n\nMy 2 cents.... I think there is something doggy in lines 102 and 103 of GeoExactCircle as the initial bearing angles seems wrong:\n\n(Math.PI * 2.0, Math.PI, Math.PI * 0.5) should be (0,  Math.PI, Math.PI * 0.5)\n(Math.PI,  0.0,  Math.PI * 1.5) should be (Math.PI,  Math.PI * 2,  Math.PI * 1.5)\n\nI need to look more in detail but changing those initial bearing angles make the test green. \n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16260487",
            "date": "2017-11-21T09:48:25+0000",
            "content": "Ignacio Vera, the bearing angles provided came from a patch you provided that purportedly fixed another problem  My original code did not have Math.PI * 2.0 as a starting angle.\n\nIf we've been good about putting all the failure cases in tests then I'm OK with changing this. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16260503",
            "date": "2017-11-21T09:59:39+0000",
            "content": "Commit 0516a58827c913663c2085c49c2ef2bf7891087e in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=0516a58 ]\n\nLUCENE-8054: Fix exact circle construction to correct failing test. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16260505",
            "date": "2017-11-21T10:01:00+0000",
            "content": "Commit 01b02e1b58c8489eff907a6f4effdea4c93c6fd0 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=01b02e1 ]\n\nLUCENE-8054: Fix exact circle construction to correct failing test. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16260507",
            "date": "2017-11-21T10:01:37+0000",
            "content": "Commit a7e6df03fc0e3bbf9b650482cf54ccab99640d33 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a7e6df0 ]\n\nLUCENE-8054: Fix exact circle construction to correct failing test. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16260511",
            "date": "2017-11-21T10:04:35+0000",
            "content": "Commit 8e22f072c8ff68ad7b8554b1c53341e1025ca297 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8e22f07 ]\n\nLUCENE-8054: Update change text ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16260512",
            "date": "2017-11-21T10:05:47+0000",
            "content": "Commit e76ac78a4b75940d9f0fa9b83e3dcfb566ec4145 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e76ac78 ]\n\nLUCENE-8054: Update change text ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16260515",
            "date": "2017-11-21T10:06:52+0000",
            "content": "Commit 3a8be9e7d5dd0d2a6d83c5c761ca6f512a861639 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3a8be9e ]\n\nLUCENE-8054: Update change text ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16260517",
            "date": "2017-11-21T10:07:41+0000",
            "content": "Commit e8fef4b8b5e7a01b0ec3584d3b157f8ec01edac8 in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=e8fef4b ]\n\nLUCENE-8054: Update change text ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16260518",
            "date": "2017-11-21T10:08:48+0000",
            "content": "I committed the change recommended.  I suggest, however, that we beast exact circles a bit to be sure there's nothing still wrong. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16260731",
            "date": "2017-11-21T13:38:07+0000",
            "content": "Hi Karl Wright,\n\nI tried to reproduce the problem in a more systematic way and I created a test that reproduces a similar situation. Bad news is that the problem is still there (or maybe it is a different one). if you run the test enough times you get an error at some point.\n\nThe test creates a random circle and then, it creates another circle with the same center and a sliglty shorter radius. Relationship should never be disjoint.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16260806",
            "date": "2017-11-21T14:40:59+0000",
            "content": "Ignacio Vera, I've run your random test a dozen times with no failure.\n\nNext time you get a failure, can you cut and paste the two circle dumps please?  Thanks!!\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16260836",
            "date": "2017-11-21T14:51:57+0000",
            "content": "I normally set the number of iterations quite high (let say minimum 1000), and I always get a bunch of errors. For example:\n\njava.lang.AssertionError: circle1: GeoExactCircle: \n{planetmodel=PlanetModel.WGS84, center=[lat=-0.965939501615207, lon=-0.9321080733646145([X=0.3386013108150836, Y=-0.4560244617682681, Z=-0.8216325834900524])], radius=0.14028705605111907(8.037856232044339), accuracy=9.681113899315223E-6}\ncircle2: GeoExactCircle: \n{planetmodel=PlanetModel.WGS84, center=[lat=-0.965939501615207, lon=-0.9321080733646145([X=0.3386013108150836, Y=-0.4560244617682681, Z=-0.8216325834900524])], radius=0.13986984510546016(8.013951805691422), accuracy=1.0E-5} ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16260839",
            "date": "2017-11-21T14:52:29+0000",
            "content": "Ok, I increased the repetition count and finally got one:\n\n\nant test  -Dtestcase=RandomGeoShapeRelationshipTest -Dtests.method=testRandom_LUCENE8054 -Dtests.seed=BBB02643B48B340B -Dtests.slow=true -Dtests.locale=es-PE -Dtests.timezone=Antarctica/South_Pole -Dtests.asserts=true -Dtests.file.encoding=UTF-8\n\n\n\n... where the shapes are:\n\n\n   [junit4]    > Throwable #1: java.lang.AssertionError: circle1: GeoExactCircle: {planetmodel=PlanetModel.WGS84, center=[lat=-1.2097332228999564, lon=0.749061883738567([X=0.25823775418663625, Y=0.2401212674846636, Z=-0.9338185278804293])], \n radius=0.20785254459485322(11.909073566339822), accuracy=6.710701666727661E-9}\n   [junit4]    > circle2: GeoExactCircle: {planetmodel=PlanetModel.WGS84, center=[lat=-1.2097332228999564, lon=0.749061883738567([X=0.25823775418663625, Y=0.2401212674846636, Z=-0.9338185278804293])], radius=0.20701584142315682(11.861134005896407), accuracy=1.0E-5}\n\n\n\nI'll create a small test case that exercises this. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16260947",
            "date": "2017-11-21T16:00:23+0000",
            "content": "A trace through the getRelationship() method finds that this clause:\n\n\n    if (intersects(geoShape)){\n      System.out.println(\" intersects\");\n      return  GeoArea.OVERLAPS;\n    }\n\n\n\n... does not fire.  Hard to tell but that may well be OK.  But the edge points from each circle are outside the other shape (NONE_INSIDE), which also might be in error; I would expect one to be inside at least and that's not the case.  Looking deeper. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16260956",
            "date": "2017-11-21T16:06:39+0000",
            "content": "I think the problem is not there as the shapes do not intersects. The problem actually comes when checking the membership of the notable edge points of the small circle into the big circle. It should be true but it returns false.\n ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16260973",
            "date": "2017-11-21T16:13:51+0000",
            "content": "I think the way we are creating the planes, it makes somewhat the circle smaller. The edge point of a circle seems to be out of the circle itself which probably is wrong. And the edge point of the smallest circle is out as well because it is close to the edge. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16260977",
            "date": "2017-11-21T16:17:23+0000",
            "content": "The circle edges are definitely getting constructed incorrectly.  Adding this to the end of the constructor yields \"false\" for both circles:\n\n\n    System.out.println(\"Is edgepoint within? \"+isWithin(edgePoint));\n\n\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16260992",
            "date": "2017-11-21T16:29:14+0000",
            "content": "At some point it constructs a plane that the edgepoint is not inside.  When that happens, the circle becomes invalid.\n\nI'm going to instrument the plane approximation to make sure they make sense, and to see at what point this goes bad.  If it occurs after many iterations, I would conclude that numeric imprecision is the problem. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16261012",
            "date": "2017-11-21T16:38:08+0000",
            "content": "Here's the output of my instrumentation.\n\n\n   [junit4] Suite: org.apache.lucene.spatial3d.geom.GeoCircleTest\n   [junit4]   1> Edgepoint = [lat=-1.0023843124849925, lon=0.7490618837385661([X=0.39370800817512397, Y=0.3660877017755803, Z=-0.8416877339642606])]\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.4167995457372498, lon=0.7490618837385679([X=0.11208839933663924, Y=0.10422491708779671, Z=-0.9860323400481892])] bearing 1 = 3.141592653589793 end point 2 = [lat=-1.0023843124849925, lon=0.7490618837385661([X=0.39370800817512397, Y=0.3660877017755803, Z=-0.8416877339642606])] bearing 2 = 6.283185307179586 middle point = [lat=-1.1568143342909227, lon=0.2126931363898965([X=0.3925264276620478, Y=0.08476983187716604, Z=-0.9139727708426665])] middle bearing = 4.71238898038469}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.1568143342909227, lon=0.2126931363898965([X=0.3925264276620478, Y=0.08476983187716604, Z=-0.9139727708426665])] bearing 1 = 4.71238898038469 end point 2 = [lat=-1.0023843124849925, lon=0.7490618837385661([X=0.39370800817512397, Y=0.3660877017755803, Z=-0.8416877339642606])] bearing 2 = 6.283185307179586 middle point = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] middle bearing = 5.497787143782138}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] bearing 1 = 5.497787143782138 end point 2 = [lat=-1.0023843124849925, lon=0.7490618837385661([X=0.39370800817512397, Y=0.3660877017755803, Z=-0.8416877339642606])] bearing 2 = 6.283185307179586 middle point = [lat=-1.0127673148582417, lon=0.599891511707467([X=0.43649204805694897, Y=0.2985507636602103, Z=-0.847197651618412])] middle bearing = 5.890486225480862}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0127673148582417, lon=0.599891511707467([X=0.43649204805694897, Y=0.2985507636602103, Z=-0.847197651618412])] bearing 1 = 5.890486225480862 end point 2 = [lat=-1.0023843124849925, lon=0.7490618837385661([X=0.39370800817512397, Y=0.3660877017755803, Z=-0.8416877339642606])] bearing 2 = 6.283185307179586 middle point = [lat=-1.0049893310453464, lon=0.6741556908984467([X=0.4182829096148721, Y=0.33422504249975515, Z=-0.8430786899864591])] middle bearing = 6.086835766330224}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0049893310453464, lon=0.6741556908984467([X=0.4182829096148721, Y=0.33422504249975515, Z=-0.8430786899864591])] bearing 1 = 6.086835766330224 end point 2 = [lat=-1.0023843124849925, lon=0.7490618837385661([X=0.39370800817512397, Y=0.3660877017755803, Z=-0.8416877339642606])] bearing 2 = 6.283185307179586 middle point = [lat=-1.0030361472745981, lon=0.7115689671538252([X=0.4067373993405717, Y=0.3507135750733039, Z=-0.8420363194530506])] middle bearing = 6.1850105367549055}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0127673148582417, lon=0.599891511707467([X=0.43649204805694897, Y=0.2985507636602103, Z=-0.847197651618412])] bearing 1 = 5.890486225480862 end point 2 = [lat=-1.0049893310453464, lon=0.6741556908984467([X=0.4182829096148721, Y=0.33422504249975515, Z=-0.8430786899864591])] bearing 2 = 6.086835766330224 middle point = [lat=-1.0082369093007926, lon=0.6369025037172893([X=0.4282331206621356, Y=0.31678129946746897, Z=-0.8448047213712183])] middle bearing = 5.988660995905542}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] bearing 1 = 5.497787143782138 end point 2 = [lat=-1.0127673148582417, lon=0.599891511707467([X=0.43649204805694897, Y=0.2985507636602103, Z=-0.847197651618412])] bearing 2 = 5.890486225480862 middle point = [lat=-1.025607482497055, lon=0.5269385452500206([X=0.4476347061399733, Y=0.260439205600348, Z=-0.8538850334536305])] middle bearing = 5.6941366846315}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.025607482497055, lon=0.5269385452500206([X=0.4476347061399733, Y=0.260439205600348, Z=-0.8538850334536305])] bearing 1 = 5.6941366846315 end point 2 = [lat=-1.0127673148582417, lon=0.599891511707467([X=0.43649204805694897, Y=0.2985507636602103, Z=-0.847197651618412])] bearing 2 = 5.890486225480862 middle point = [lat=-1.0185644009167876, lon=0.563207410226136([X=0.442980071667477, Y=0.27970943891565886, Z=-0.8502342472141794])] middle bearing = 5.792311455056181}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0185644009167876, lon=0.563207410226136([X=0.442980071667477, Y=0.27970943891565886, Z=-0.8502342472141794])] bearing 1 = 5.792311455056181 end point 2 = [lat=-1.0127673148582417, lon=0.599891511707467([X=0.43649204805694897, Y=0.2985507636602103, Z=-0.847197651618412])] bearing 2 = 5.890486225480862 middle point = [lat=-1.0155087097955897, lon=0.5815031771328663([X=0.4399617376666015, Y=0.2891951996493323, Z=-0.8486371902663153])] middle bearing = 5.841398840268521}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.025607482497055, lon=0.5269385452500206([X=0.4476347061399733, Y=0.260439205600348, Z=-0.8538850334536305])] bearing 1 = 5.6941366846315 end point 2 = [lat=-1.0185644009167876, lon=0.563207410226136([X=0.442980071667477, Y=0.27970943891565886, Z=-0.8502342472141794])] bearing 2 = 5.792311455056181 middle point = [lat=-1.0219316611214369, lon=0.5450153764449563([X=0.4455397808921162, Y=0.2701163867399722, Z=-0.8519849448939619])] middle bearing = 5.743224069843841}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] bearing 1 = 5.497787143782138 end point 2 = [lat=-1.025607482497055, lon=0.5269385452500206([X=0.4476347061399733, Y=0.260439205600348, Z=-0.8538850334536305])] bearing 2 = 5.6941366846315 middle point = [lat=-1.0338713812498035, lon=0.4911781571651215([X=0.450411203875051, Y=0.24092605432472933, Z=-0.8581145864236084])] middle bearing = 5.5959619142068195}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0338713812498035, lon=0.4911781571651215([X=0.450411203875051, Y=0.24092605432472933, Z=-0.8581145864236084])] bearing 1 = 5.5959619142068195 end point 2 = [lat=-1.025607482497055, lon=0.5269385452500206([X=0.4476347061399733, Y=0.260439205600348, Z=-0.8538850334536305])] bearing 2 = 5.6941366846315 middle point = [lat=-1.0295885777036984, lon=0.5089887341623012([X=0.44925981299228634, Y=0.2507012589175004, Z=-0.8559299012820636])] middle bearing = 5.64504929941916}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] bearing 1 = 5.497787143782138 end point 2 = [lat=-1.0338713812498035, lon=0.4911781571651215([X=0.450411203875051, Y=0.24092605432472933, Z=-0.8581145864236084])] bearing 2 = 5.5959619142068195 middle point = [lat=-1.0384520505885564, lon=0.47351947806770944([X=0.4510861273404907, Y=0.2311371866025881, Z=-0.8604337888523875])] middle bearing = 5.546874528994479}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.1568143342909227, lon=0.2126931363898965([X=0.3925264276620478, Y=0.08476983187716604, Z=-0.9139727708426665])] bearing 1 = 4.71238898038469 end point 2 = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] bearing 2 = 5.497787143782138 middle point = [lat=-1.0923111627376951, lon=0.3238275822738945([X=0.4358362409593494, Y=0.14628527198555277, Z=-0.8863361982505379])] middle bearing = 5.105088062083414}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0923111627376951, lon=0.3238275822738945([X=0.4358362409593494, Y=0.14628527198555277, Z=-0.8863361982505379])] bearing 1 = 5.105088062083414 end point 2 = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] bearing 2 = 5.497787143782138 middle point = [lat=-1.0656695736815376, lon=0.387987279470531([X=0.44729824062436324, Y=0.18281260463940696, Z=-0.8738401106334024])] middle bearing = 5.301437602932776}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0656695736815376, lon=0.387987279470531([X=0.44729824062436324, Y=0.18281260463940696, Z=-0.8738401106334024])] bearing 1 = 5.301437602932776 end point 2 = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] bearing 2 = 5.497787143782138 middle point = [lat=-1.0539386871095477, lon=0.42158949873810236([X=0.4502418869262747, Y=0.20192465699546755, Z=-0.8681407092065628])] middle bearing = 5.399612373357456}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0539386871095477, lon=0.42158949873810236([X=0.4502418869262747, Y=0.20192465699546755, Z=-0.8681407092065628])] bearing 1 = 5.399612373357456 end point 2 = [lat=-1.043326466955262, lon=0.4560258695181112([X=0.4512829845443862, Y=0.22135828041929292, Z=-0.8628818835741965])] bearing 2 = 5.497787143782138 middle point = [lat=-1.0484902358563435, lon=0.4387110784366026([X=0.45100133290372535, Y=0.2116129330184044, Z=-0.8654529345216984])] middle bearing = 5.448699758569797}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0656695736815376, lon=0.387987279470531([X=0.44729824062436324, Y=0.18281260463940696, Z=-0.8738401106334024])] bearing 1 = 5.301437602932776 end point 2 = [lat=-1.0539386871095477, lon=0.42158949873810236([X=0.4502418869262747, Y=0.20192465699546755, Z=-0.8681407092065628])] bearing 2 = 5.399612373357456 middle point = [lat=-1.0596668743223947, lon=0.4046762523257783([X=0.44900651621085697, Y=0.19231682330510033, Z=-0.8709386940902636])] middle bearing = 5.350524988145116}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0923111627376951, lon=0.3238275822738945([X=0.4358362409593494, Y=0.14628527198555277, Z=-0.8863361982505379])] bearing 1 = 5.105088062083414 end point 2 = [lat=-1.0656695736815376, lon=0.387987279470531([X=0.44729824062436324, Y=0.18281260463940696, Z=-0.8738401106334024])] bearing 2 = 5.301437602932776 middle point = [lat=-1.0784762132231422, lon=0.35535062566504827([X=0.4424807570584049, Y=0.16420637582563455, Z=-0.8799249002454598])] middle bearing = 5.203262832508095}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0784762132231422, lon=0.35535062566504827([X=0.4424807570584049, Y=0.16420637582563455, Z=-0.8799249002454598])] bearing 1 = 5.203262832508095 end point 2 = [lat=-1.0656695736815376, lon=0.387987279470531([X=0.44729824062436324, Y=0.18281260463940696, Z=-0.8738401106334024])] bearing 2 = 5.301437602932776 middle point = [lat=-1.0719412819091438, lon=0.3715394398455434([X=0.44512122266873966, Y=0.17343491931763158, Z=-0.8768379319817334])] middle bearing = 5.252350217720435}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.0923111627376951, lon=0.3238275822738945([X=0.4358362409593494, Y=0.14628527198555277, Z=-0.8863361982505379])] bearing 1 = 5.105088062083414 end point 2 = [lat=-1.0784762132231422, lon=0.35535062566504827([X=0.4424807570584049, Y=0.16420637582563455, Z=-0.8799249002454598])] bearing 2 = 5.203262832508095 middle point = [lat=-1.0852682951156827, lon=0.3394398885858507([X=0.4393832575357344, Y=0.1551492181420051, Z=-0.8830935443269301])] middle bearing = 5.154175447295755}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.1568143342909227, lon=0.2126931363898965([X=0.3925264276620478, Y=0.08476983187716604, Z=-0.9139727708426665])] bearing 1 = 4.71238898038469 end point 2 = [lat=-1.0923111627376951, lon=0.3238275822738945([X=0.4358362409593494, Y=0.14628527198555277, Z=-0.8863361982505379])] bearing 2 = 5.105088062083414 middle point = [lat=-1.122852499107146, lon=0.2648248855113078([X=0.41734083553900236, Y=0.11318056090656385, Z=-0.8998878350556344])] middle bearing = 4.908738521234052}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.122852499107146, lon=0.2648248855113078([X=0.41734083553900236, Y=0.11318056090656385, Z=-0.8998878350556344])] bearing 1 = 4.908738521234052 end point 2 = [lat=-1.0923111627376951, lon=0.3238275822738945([X=0.4358362409593494, Y=0.14628527198555277, Z=-0.8863361982505379])] bearing 2 = 5.105088062083414 middle point = [lat=-1.1071222886341148, lon=0.2935871695283705([X=0.42742912544156425, Y=0.12922191082011056, Z=-0.8930120104467717])] middle bearing = 5.0069132916587336}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.1568143342909227, lon=0.2126931363898965([X=0.3925264276620478, Y=0.08476983187716604, Z=-0.9139727708426665])] bearing 1 = 4.71238898038469 end point 2 = [lat=-1.122852499107146, lon=0.2648248855113078([X=0.41734083553900236, Y=0.11318056090656385, Z=-0.8998878350556344])] bearing 2 = 4.908738521234052 middle point = [lat=-1.1394393304963417, lon=0.23776971863158813([X=0.40566898685499503, Y=0.09831555991985201, Z=-0.9068972923770559])] middle bearing = 4.81056375080937}\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.4167995457372498, lon=0.7490618837385679([X=0.11208839933663924, Y=0.10422491708779671, Z=-0.9860323400481892])] bearing 1 = 3.141592653589793 end point 2 = [lat=-1.1568143342909227, lon=0.2126931363898965([X=0.3925264276620478, Y=0.08476983187716604, Z=-0.9139727708426665])] bearing 2 = 4.71238898038469 middle point = [lat=-1.312804505159855, lon=0.143141791092118([X=0.2520197932856809, Y=0.03632298494493567, Z=-0.9649509184003219])] middle bearing = 3.9269908169872414}\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=GeoCircleTest -Dtests.method=testExactCircleLUCENE8054 -Dtests.seed=F45832943772FF42 -Dtests.slow=true -Dtests.locale=ar-KW -Dtests.timezone=Europe/Nicosia -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   0.12s | GeoCircleTest.testExactCircleLUCENE8054 <<<\n   [junit4]    > Throwable #1: java.lang.IllegalStateException: Shouldn't happen: bad plane: [A=0.25717827157608514, B=0.2393088633040463, C=-0.9362641745646698, D=-0.9769554021906537, side=1.0]\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([F45832943772FF42:AE462B18E31EBD9F]:0)\n   [junit4]    > \tat org.apache.lucene.spatial3d.geom.GeoExactCircle.<init>(GeoExactCircle.java:115)\n   [junit4]    > \tat org.apache.lucene.spatial3d.geom.GeoCircleTest.testExactCircleLUCENE8054(GeoCircleTest.java:32)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n\n ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16261023",
            "date": "2017-11-21T16:44:13+0000",
            "content": "This ApproximationSlice, from what looks like bearing PI to bearing 3/2 * PI, has a plane that is clearly wrong-sided:\n\n\n   [junit4]   1> Processing next slice... {end point 1 = [lat=-1.4167995457372498, lon=0.7490618837385679([X=0.11208839933663924, Y=0.10422491708779671, Z=-0.9860323400481892])] bearing 1 = 3.141592653589793 end point 2 = [lat=-1.1568143342909227, lon=0.2126931363898965([X=0.3925264276620478, Y=0.08476983187716604, Z=-0.9139727708426665])] bearing 2 = 4.71238898038469 middle point = [lat=-1.312804505159855, lon=0.143141791092118([X=0.2520197932856809, Y=0.03632298494493567, Z=-0.9649509184003219])] middle bearing = 3.9269908169872414}\n\n\n\nWhy is it wrong-sided?  That's the question... ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16261051",
            "date": "2017-11-21T17:00:05+0000",
            "content": "I added this test to be sure that the plane construction itself wasn't buggy or had roundoff problems.  It doesn't fire:\n\n\n      if (plane.isWithin(center) == false || !plane.evaluateIsZero(endPoint1) || !plane.evaluateIsZero(endPoint2) || !plane.evaluateIsZero(middlePoint))\n        throw new IllegalStateException(\"SidedPlane constructor built a bad plane!!\");\n\n\n\nSo we seem to be executing exactly what we're supposed to execute, but the planes we build essentially are describing a concave shape for at least part of the circle.  This is not what I'd have expected so I will need to drill deeper to figure out if:\n(1) the concavity is the result of the Vincenti formula giving is erroneous points, or\n(2) there's something about this shape that we've overlooked. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16261102",
            "date": "2017-11-21T17:28:05+0000",
            "content": "I added code to be sure planetModel.surfacePointOnBearing() was working as expected for this test.  It is.\n\nSo what we have is a concavity in the shape that we didn't anticipate but apparently occurs even with a large arc section - a full 1/4 of the circle.\n\nI'll need to think about this carefully.  Not only is getRelationship() not going to work right, but isWithin() will fail too for some points near the edge of the circle.  Basically we need to figure out how to get isWithin() to work properly.  It may be that we will need to partition the circle into four quadrants for the purpose of computing isWithin(). ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16261327",
            "date": "2017-11-21T19:20:37+0000",
            "content": "I know exactly what is happening here.\n\nIt's best to visualize this as a delta from a single plane slicing the world.  When we break up the single plane into multiple pieces, some will angle below the level of the original plane, and some will angle above.  The ones that angle above will \"cut off\" some points that ought to be in the shape.\n\nThe solution involves limiting the reach of each plane by bounding it with another plane that goes through the middle of the world and separates the \"good\" part of the plane from the \"bad\" part of the plane.  This is easy in principle but in practice we will need to determine the right cutoff plane by examining all the points we've stitched through around the edge of the circle, which is an O(n^2) operation, which scares me.  Let me consider some more before implementing anything. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16261491",
            "date": "2017-11-21T21:14:41+0000",
            "content": "Some of the planes are cutting the \"planet\" too thin and therefore making the shape too small, that is how I visualize it.\n\nI place the following statement at the end of the constructor:\n\n\nassert isWithin(center);\n\n\n\nit seems to be always true. Maybe we can divide the circle in four sectors using planes that goes from the center of the shape to each of the cardinal points (north/south/east and west) and the center of the world (I think parallel and perpendicular planes would not work).  ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16261653",
            "date": "2017-11-21T23:05:39+0000",
            "content": "Commit bff695cf3480ebee388140df0e62c998d479da97 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bff695c ]\n\nLUCENE-8054: Use backbounds to stop spuriosly rejecting points that are within the exact circle. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16261654",
            "date": "2017-11-21T23:06:29+0000",
            "content": "Commit 58f07e0d5f85304580871acf5ea5886550208194 in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=58f07e0 ]\n\nLUCENE-8054: Use backbounds to stop spuriosly rejecting points that are within the exact circle. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16261655",
            "date": "2017-11-21T23:07:06+0000",
            "content": "Commit 199759d05afe1a49d781b010931625e50793ef5d in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=199759d ]\n\nLUCENE-8054: Use backbounds to stop spuriosly rejecting points that are within the exact circle. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16261660",
            "date": "2017-11-21T23:08:43+0000",
            "content": "A fix has been tested and committed.  I couldn't find a way to prevent (worst case) O(n^2) behavior on exact circle initialization.  But hopefully the number of planes will be reasonable and this will keep computation from exploding. ",
            "author": "Karl Wright"
        }
    ]
}