{
    "id": "SOLR-619",
    "title": "Register copyField at runtime",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.3"
        ],
        "components": [],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "In order to enable runtime schema manipulation, it would be nice to register copy fields manually rather then requiring them to be registered via schema.xml.",
    "attachments": {
        "SOLR-619.patch": "https://issues.apache.org/jira/secure/attachment/12386372/SOLR-619.patch",
        "SOLR-619-RuntimeSchema.patch": "https://issues.apache.org/jira/secure/attachment/12385426/SOLR-619-RuntimeSchema.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Ryan McKinley",
            "id": "comment-12611260",
            "date": "2008-07-07T18:07:52+0000",
            "content": "This patch moves the copyField registration out of a for loop and into a public function.\n\nThe downside to this approach is that the dynamicCopyField array is resized for each new dynamic copy field rather then building a List, then converting to an array.  Since this is only at startup and is likely an unmesuarable change (unless you have LOTS of dynamic copy fields), this seems like an ok tradeoff. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12611277",
            "date": "2008-07-07T18:47:17+0000",
            "content": "This patch has thread safety issues if the new API were to be used from more than one thread, or concurrently with searching. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12614654",
            "date": "2008-07-18T06:26:16+0000",
            "content": "a threadsafe version of the same "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12614734",
            "date": "2008-07-18T14:22:57+0000",
            "content": "Noble - I don't think your variation is thread safe.  I don't believe it can be without some level of synchronization or volatile on the read-side.  Since a truly thread-safe implementation requires slowing down the read-side,  I think adding copyFields should (for now) be restricted to use before or during the inform() phase. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12614814",
            "date": "2008-07-18T17:37:02+0000",
            "content": "If the fields are made volatile , should it be ok? How expensive are volatile fields?\n\nI think adding copyFields should (for now) be restricted to use before or during the inform() phase.\n\nI would g w/ this approach.Making reads expensive is not an option.   "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12614842",
            "date": "2008-07-18T18:55:56+0000",
            "content": "updated patch that includes tests and better javadocs describing when each call is safe to make.  This also adds a function: refreshAnalyzers() that reloads the anylyzers.  This is necessary if you modify the schema fields returned from getFields()\n\nThis does not add any synchronization, it just relies on things being called within inform()\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12620002",
            "date": "2008-08-05T18:59:42+0000",
            "content": "Can this issue be closed? "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-12620024",
            "date": "2008-08-05T20:17:25+0000",
            "content": "commited a while back "
        }
    ]
}