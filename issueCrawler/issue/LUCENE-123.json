{
    "id": "LUCENE-123",
    "title": "Hits.length() returns to large value",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "Hits hits = searcher.search(...);\nfor(int i = 0; i < hits.length(); ++i) {\n  int x = hits.id;\n  ...\n}\nthrows java.lang.ArrayIndexOutOfBoundsException: 100 >= 100\n\nI think that means hits.length() returns an in valid value 101.\n\nAfter a first look the reason could be the initialization of the hitcounter\nin IndexSearcher.search(Query, Filter, int). There the counter is set to 1 \nand than incremented for every hit. Hits value will then be propagated to\nHits.length.\n\nI'm working with lucene 1.3 RC1",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2003-06-30T20:11:17+0000",
            "content": "Or it could be because your loop counter is +i, instead of i+, causing you\nvariable to be one higher than the max. ",
            "author": "Dan Armbrust",
            "id": "comment-12321335"
        },
        {
            "date": "2003-06-30T20:38:27+0000",
            "content": "Sorry but \nfor(int i=0; i<5; ++i) \n{ any to do with i }\nexecutes the same loop as \nfor(int i=0; i<5; i++) { any to do with i }\nso this can't be the problem.\n\nthe exception is thrown by the line int x = hits.id; and this i\nruns from 0 to hits.length()-1 \u2013 independet from using +i or i+, ",
            "author": "Stefan L\u00fctzkendorf",
            "id": "comment-12321336"
        },
        {
            "date": "2003-06-30T20:59:20+0000",
            "content": "Sorry, me goes and gets coffee to wake up with.....\n\nHave you verified that the exception is happening when you pass in an i value\nthat is less than the reported hits.length()?\n\nAre you sure that nothing is changing your hits object in your code?  It\ndoesen't seem possible to me that a bug like this could go unnoticed till now in\nLucene.\n ",
            "author": "Dan Armbrust",
            "id": "comment-12321337"
        },
        {
            "date": "2003-06-30T22:35:31+0000",
            "content": "Ok, I made some further tests, it's not the length() method; but I don't realize \nthe problem.\n\nHere is some code that reproduces the behavior I have described. A strange \nobservation is, that the ArrayIndexOutOfBoundsException is thrown for tests with \ndocument counts larger than 100.\n\npublic class Test {\n\n   public static void main(String[] args) \n      throws IOException\n   {\n      File dir = new File( \n         System.getProperty(\"java.io.tmpdir\") + File.separator + \"index\");\n      dir.mkdirs();\n\n\n      IndexWriter writer = new IndexWriter(dir,\n            new SimpleAnalyzer(),\n            true);\n\n      for(int i = 0; i < 101; i++) \n{\n         Document doc = new Document();\n         doc.add(Field.Keyword(\"f\", \"v\"));\n         writer.addDocument(doc);\n      }\n\n      writer.close();\n\n      Query q = new TermQuery(new Term(\"f\", \"v\"));\n\n      IndexReader reader = IndexReader.open(dir);\n      IndexSearcher searcher = new IndexSearcher(reader);\n      Hits hits = searcher.search(q);\n\n      for(int i = 0; i < hits.length(); i++) \n{\n         reader.delete(hits.id(i)); \n      }\n      reader.close();\n   }\n}\n\nthrows \njava.lang.ArrayIndexOutOfBoundsException: 100 >= 100\n\tat java.util.Vector.elementAt(Vector.java:427)\n\tat org.apache.lucene.search.Hits.hitDoc(Hits.java:147)\n\tat org.apache.lucene.search.Hits.id(Hits.java:137)\n\tat tests.Test.main(LuceneTC.java:50) ",
            "author": "Stefan L\u00fctzkendorf",
            "id": "comment-12321338"
        },
        {
            "date": "2003-06-30T23:35:39+0000",
            "content": "I did some more debugging... It appears that this is indeed a Lucene error.  I\ndidn't realize the id method was new in 1.3... and this method, getMoreDocs -\nmust not have been used prior to the introduction of id - because the method\ngetMoreDocs in the Hits class is broken.\n\nWhen you call getMoreDocs, it never actually adds the new documents to the\nhitDoc vector, because the for loop at the end has the wrong start point.\n\n\n  private final void getMoreDocs(int min) throws IOException \n{\n    if (hitDocs.size() > min)\n      min = hitDocs.size();\n\n    int n = min * 2;\t\t\t\t  // double # retrieved\n    TopDocs topDocs = searcher.search(query, filter, n);\n    length = topDocs.totalHits;\n    ScoreDoc[] scoreDocs = topDocs.scoreDocs;\n\n    float scoreNorm = 1.0f;\n    if (length > 0 && scoreDocs[0].score > 1.0f)\n      scoreNorm = 1.0f / scoreDocs[0].score;\n\n    int end = scoreDocs.length < length ? scoreDocs.length : length;\n    for (int i = hitDocs.size(); i < end; i++)\n      hitDocs.addElement(new HitDoc(scoreDocs[i].score*scoreNorm,\n\t\t\t\t    scoreDocs[i].doc));\n  }\n\n\nI think (my knowlege of lucene isn't all that broad, so this may be incorrect)\nthat the for loop should look like this:\nfor (int i = 0; i < end; i++)   // - starting from i = 0;, not what it is above\n\n\n\nBut - I also just noticed a new problem - The scoring of this method will be\nincorrect.  If any of the first 100 documents retrived score above 1.0, they\nwill be normalized down by X.  Then, when the next set of documents are\nretrieved, the first one will mostlikely not score above 1.0 - so these\ndocuments will not have their scored normalized.  Now some of the documents have\nhad their scores normalized, and some have not.  \n\nMy guess is that the normalization factor should be stored in the class\nsomewhere, to be used for all subsequent calls.\n\nMaybe I should open a new bug report, or maybe a committer wants to kill two\nbirds with one stone. ",
            "author": "Dan Armbrust",
            "id": "comment-12321339"
        },
        {
            "date": "2003-07-01T01:12:28+0000",
            "content": "The problem is that, by deleting documents, you're changing the set of documents\nthat the Hits has cached.  It's trying to fetch the 101st hit, which, now that\n100 hits have been deleted, is now the first hit.\n\nThere are several ways to do this which won't run into this problem.  The\nsimplest is to replace the deleting loop with:\n\n  reader.delete(new Term(\"k\", \"v\"));\n\nIf you really need to delete the results of a query, then do something like:\n\n  searcher.search(q, new HitCollector() {\n    public void collect(int d, float s) \n{\n      reader.delete(d);\n    }\n  };\n\nHits is designed for read-only browsing of results. ",
            "author": "cutting@apache.org",
            "id": "comment-12321340"
        }
    ]
}