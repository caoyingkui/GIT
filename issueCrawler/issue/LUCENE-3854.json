{
    "id": "LUCENE-3854",
    "title": "Non-tokenized fields become tokenized when a document is deleted and added back",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "https://github.com/bimargulies/lucene-4-update-case is a JUnit test case that seems to show a problem with the current trunk. It creates a document with a Field typed as StringField.TYPE_STORED and a value with a \"-\" in it. A TermQuery can find the value, initially, since the field is not tokenized.\n\nThen, the case reads the Document back out through a reader. In the copy of the Document that gets read out, the Field now has the tokenized bit turned on. \n\nNext, the case deletes and adds the Document. The 'tokenized' bit is respected, so now the field gets tokenized, and the result is that the query on the term with the - in it no longer works.\n\nSo I think that the defect here is in the code that reconstructs the Document when read from the index, and which turns on the tokenized bit.\n\nI have an ICLA on file so you can take this code from github, but if you prefer I can also attach it here.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2012-03-06T15:04:28+0000",
            "content": "OK I see the problem... it's not a bug, but is a looongstanding trap in Lucene: you cannot retrieve a Document (from IR.document API) and expect it to accurately reflect what you had indexed.  Information is lost, eg whether each field was tokenized or not, what the document boost was, fields that were not stored are missing, etc.  In this particular case, IR.document will enable \"tokenized\" for each text field it loads, which then causes the test failure.\n\nThis is a bad trap, since it tricks you into thinking you can load a stored document and reindex it; instead, you have to re-create a new Document with the correct details on how it should be indexed.\n\nReally, IR.document should not even return a Document/Field. ",
            "author": "Michael McCandless",
            "id": "comment-13223305"
        },
        {
            "date": "2012-03-06T15:08:20+0000",
            "content": "I suspect the problem lies in DocuemntStoredFieldVisitor.stringField(...). It uses FieldInfo to populate FieldType of the retrieved field, and there is no information there about the tokenization (so it assumes true by default). AFAIK the information about the tokenization is lost once the document is indexed so it's not possible to retrieve it back, hence the use of a default value.\n\n(Mike said the same while I was typing this comment  ). ",
            "author": "Andrzej Bialecki",
            "id": "comment-13223309"
        },
        {
            "date": "2012-03-06T15:32:41+0000",
            "content": "FWIW, there are blog posts out there with more or less the recipe I followed to get into this pickle.\n\nDo you want to keep this open for nulling some things in IR.document()? Obviously, not returning a Document at all would be a bit on the violent side. ",
            "author": "Benson Margulies",
            "id": "comment-13223330"
        },
        {
            "date": "2012-03-06T15:39:55+0000",
            "content": "In my opinion Document for indexing should be different from document retrieved from stored fields (I am argueing all the time about that).\n\nOne simple solution:\nWhen a field is loaded using StoredFieldsVisitor from index, lets set an internal flag in the document/field instances (e.g. by a pkg-private ctor of Document), so when you try to readd such a loaded document to IndexWriter you get an exception. Very simple and is a good solution for now.\n\nBut I agree with Robert, Document/Field API is messy and trappy in that regard. ",
            "author": "Uwe Schindler",
            "id": "comment-13223337"
        },
        {
            "date": "2012-03-06T15:54:30+0000",
            "content": "FWIW, there are blog posts out there with more or less the recipe I followed to get into this pickle.\n\nSigh   Bad bad trap.\n\n\nWhen a field is loaded using StoredFieldsVisitor from index, lets set an internal flag in the document/field instances (e.g. by a pkg-private ctor of Document), so when you try to readd such a loaded document to IndexWriter you get an exception. Very simple and is a good solution for now.\n\n+1 ",
            "author": "Michael McCandless",
            "id": "comment-13223348"
        },
        {
            "date": "2012-03-06T16:08:29+0000",
            "content": "+1, though separate classes for input / output documents would be better. Solr uses SolrInputDocument for input and SolrDocument for output, and obviously they are not interchangeable. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13223361"
        },
        {
            "date": "2012-03-06T16:10:21+0000",
            "content": "\nthough separate classes for input / output documents would be better. Solr uses SolrInputDocument for input and SolrDocument for output, and obviously they are not interchangeable.\n\n+1 ",
            "author": "Robert Muir",
            "id": "comment-13223364"
        },
        {
            "date": "2012-03-06T16:43:55+0000",
            "content": "i tried arguing a long time ago that IndexReader.document(...) should return \"Map<String,String[]>\" since known of the Document/Field object metdata makes sense at \"read\" time ... never got any buy in from anybody else. ",
            "author": "Hoss Man",
            "id": "comment-13223402"
        },
        {
            "date": "2012-03-06T17:44:12+0000",
            "content": "Notes:\n\n1) The trap opened a bit wider in 4.0 with the removal of IndexReader.deleteDocument. I'm not sure I exactly understand how, but by deleting through the reader we didn't hit this.\n\n2) I got into this because I wanted, really, to update a field value. There isn't a better way to attack that problem in 4.0, is there? ",
            "author": "Benson Margulies",
            "id": "comment-13223461"
        },
        {
            "date": "2012-03-06T17:51:07+0000",
            "content": "There isn't a better way to attack that problem in 4.0, is there?\n\nNot yet - LUCENE-3837 is still in early stages. ",
            "author": "Andrzej Bialecki",
            "id": "comment-13223470"
        },
        {
            "date": "2012-06-12T08:25:25+0000",
            "content": "Isn't this considered a regression from 3.x? In 3.6.0 I'm seeing an additional byte being read from the stream in FieldsReader, which contained bits that allowed the reader to reconstruct the Index enum correctly for the field. This should make it possible to properly update a document in which all fields were stored, with the exception of boost values (and they could be stored redundantly in a field as well to overcome this limitation). ",
            "author": "Andr\u00e1s P\u00e9teri",
            "id": "comment-13293446"
        }
    ]
}