{
    "id": "SOLR-7452",
    "title": "json facet api returning inconsistent counts in cloud set up",
    "details": {
        "components": [
            "Facet Module"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "7.0"
        ],
        "affect_versions": "5.1",
        "status": "Resolved",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "While using the newly added feature of json term facet api (http://yonik.com/json-facet-api/#TermsFacet) I am encountering inconsistent returns of counts of faceted value ( Note I am running on a cloud mode of solr). For example consider that i have txns_id(unique field or key), consumer_number and amount. Now for a 10 million such records , lets say i query for \n\nq=:&rows=0&\n json.facet={\n   biskatoo:{\n\t type : terms,\n       field : consumer_number,\n       limit : 20,\n\tsort : \n{y:desc}\n,\n\tnumBuckets : true,\n\tfacet:\n{\n\t y : \"sum(amount)\"\n       }\n   }\n }\n\n\nthe results are as follows ( some are omitted ):\n\n\"facets\":{\n    \"count\":6641277,\n    \"biskatoo\":{\n      \"numBuckets\":3112708,\n      \"buckets\":[\n{\n          \"val\":\"surya\",\n          \"count\":4,\n          \"y\":2.264506}\n,\n      \n{\n          \"val\":\"raghu\",\n          \"COUNT\":3,   // capitalised for recognition \n          \"y\":1.8}\n,\n        \n{\n          \"val\":\"malli\",\n          \"count\":4,\n          \"y\":1.78}\n]}}}\n\nbut if i restrict the query to \n\nq=consumer_number:raghu&rows=0&\n json.facet={\n   biskatoo:{\n\t type : terms,\n       field : consumer_number,\n       limit : 20,\n\tsort : \n{y:desc}\n,\n\tnumBuckets : true,\n\tfacet:\n{\n\t y : \"sum(amount)\"\n       }\n   }\n }\n\n\ni get :\n\n  \"facets\":{\n    \"count\":4,\n    \"biskatoo\":{\n      \"numBuckets\":1,\n      \"buckets\":[\n{\n          \"val\":\"raghu\",\n          \"COUNT\":4,\n          \"y\":2429708.24}\n]}}}\n\nOne can see the count results are inconsistent ( and I found many occasions of inconsistencies).\n\nI have tried the patch https://issues.apache.org/jira/browse/SOLR-7412 but still the issue seems not resolved",
    "attachments": {
        "SOLR-7452.patch": "https://issues.apache.org/jira/secure/attachment/12818460/SOLR-7452.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-04-26T01:32:37+0000",
            "author": "Yonik Seeley",
            "content": "Hi Vamsi,\nThe behavior you are seeing is because we haven't yet implemented facet refinement.  Currently, the distributed statistics are a result of simply combining the top N buckets from each shard, which can result in a small amount of error.  It's definitely on the roadmap to implement this! ",
            "id": "comment-14512822"
        },
        {
            "date": "2015-04-26T02:04:30+0000",
            "author": "Vamsi Krishna D",
            "content": "Thanks for the update Yonik!  ",
            "id": "comment-14512830"
        },
        {
            "date": "2015-04-27T19:27:58+0000",
            "author": "Mike Murphy",
            "content": "This doesn't seem to be too important.\nElasticsearch has never had exact counts, and no one seems to care.\nhttp://www.elastic.co/guide/en/elasticsearch/reference/current/search-aggregations-bucket-terms-aggregation.html#search-aggregations-bucket-terms-aggregation-approximate-counts ",
            "id": "comment-14514773"
        },
        {
            "date": "2015-04-27T19:37:28+0000",
            "author": "Yonik Seeley",
            "content": "Well, as long as some people care about accurate counts, we should still implement it. ",
            "id": "comment-14514801"
        },
        {
            "date": "2015-04-27T19:47:52+0000",
            "author": "Joel Bernstein",
            "content": "+1 for implementing accurate counts. They are definitely important to a good number of users. ",
            "id": "comment-14514827"
        },
        {
            "date": "2015-11-28T09:00:52+0000",
            "author": "Vishnu Mishra",
            "content": "I have the same count mismatch issue between json facet API and Simple facet in distributed search. I am using Solr 5.3.1, and we have very much importance of facet count  ",
            "id": "comment-15030437"
        },
        {
            "date": "2015-12-18T08:14:31+0000",
            "author": "Vishnu Mishra",
            "content": "Any progress on this issue... ",
            "id": "comment-15063678"
        },
        {
            "date": "2016-03-15T09:56:10+0000",
            "author": "Yago Riveiro",
            "content": "Yonik Seeley This feature is important to have accurate information.\n\nAny chance to have this before 6.0 be released?\n\nP.S: The documentation doesn't inform about this situation, that is a big downside in some scenarios. ",
            "id": "comment-15195024"
        },
        {
            "date": "2016-03-21T11:54:38+0000",
            "author": "Markus Jelsma",
            "content": "Hello - we also care about accurate results. We are using this to calculate scores:\n\n\n    query.setParam(\"json.facet\", \"{by_day:{type:range,field:time,start:\\\"NOW-\" + maxFeedbackWindow + \"DAY/DAY\\\",end:\\\"NOW+1DAY/DAY\\\",gap:\\\"+1DAY\\\", facet:{avg:\\\"avg(rating)\\\"}}}\");\n\n\n\nAnd we have unit tests testing output of methods that use JSON facetting. The tests usually fail due to discrepancies, for example:\n\n\nFailed tests: \n  TestRecommendCompiler.testIndexFeedbackAndViewScores:111->assertRecommendation:181->Assert.assertEquals:147->Assert.assertEquals:128->Assert.failNotEquals:647->Assert.fail:93 expected:<0.29996002> but was:<0.21329334>\n\n\n\nThe average dailies can vary widely between different invocations:\n\nFirst:\n\n{val=Fri Mar 18 00:00:00 UTC 2016,count=1,avg=0.20000000298023224}, {val=Sat Mar 19 00:00:00 UTC 2016,count=3,avg=0.23333334177732468}, {val=Sun Mar 20 00:00:00 UTC 2016,count=0}, {val=Mon Mar 21 00:00:00 UTC 2016,count=0}]\n\n\n\nSecond time:\n\n{val=Fri Mar 18 00:00:00 UTC 2016,count=1,avg=0.5}, {val=Sat Mar 19 00:00:00 UTC 2016,count=3,avg=0.36666666716337204}, {val=Sun Mar 20 00:00:00 UTC 2016,count=0}, {val=Mon Mar 21 00:00:00 UTC 2016,count=0}\n\n ",
            "id": "comment-15204075"
        },
        {
            "date": "2016-05-16T00:39:31+0000",
            "author": "Ahmed Al-Obaidi",
            "content": "Any progress? We have the same problem with 5.4.0, 5.4.1 and 6.0.\n\nAlso, is it possible to get more accurate results from streaming expressions or sql?  ",
            "id": "comment-15284035"
        },
        {
            "date": "2016-05-16T01:53:10+0000",
            "author": "Yonik Seeley",
            "content": "FYI, I've recently started on a patch to implement refinements... hopeful I can get something up in the next couple of weeks. ",
            "id": "comment-15284060"
        },
        {
            "date": "2016-05-16T02:01:05+0000",
            "author": "Yonik Seeley",
            "content": "Markus Jelsma, facet refinements should have no effect on a single-level range facet since the same set of buckets will be returned from every shard.\nPossibilities I can think of:\n\n\ta faceting bug unrelated to refinements\n\ta difference in the data in replicas of the same shard\n\ta commit happened in-between, changing the data\n\ta bug in the test\n\n ",
            "id": "comment-15284065"
        },
        {
            "date": "2016-05-31T12:06:21+0000",
            "author": "Saar Carmi",
            "content": "Do you expect it to get into 5.5.2 ?  Thanks! ",
            "id": "comment-15307627"
        },
        {
            "date": "2016-06-09T13:03:30+0000",
            "author": "Vishnu Mishra",
            "content": "Yonik Seeley Any progress on the patch of this issue? ",
            "id": "comment-15322458"
        },
        {
            "date": "2016-07-13T17:46:43+0000",
            "author": "Otis Gospodnetic",
            "content": "Yonik Seeley We've gotten inquiries about this bug/patch/fix at Sematext, but if you're working on this then maybe it's better for us not to meddle, so like a few others above, I'm curious about the status of this. ",
            "id": "comment-15375418"
        },
        {
            "date": "2016-07-13T19:11:45+0000",
            "author": "Yonik Seeley",
            "content": "I actually just found some time to make a little progress on this today.\nI'm going to be traveling for the next 3 weeks, starting this weekend.\nI'll try to put up a patch with whatever I've got before that point. ",
            "id": "comment-15375554"
        },
        {
            "date": "2016-07-13T21:52:25+0000",
            "author": "Scott Blum",
            "content": "Please make it optional... inaccurate-but-fast is a legit use case a lot of the time. ",
            "id": "comment-15375835"
        },
        {
            "date": "2016-07-17T08:36:42+0000",
            "author": "Saar Carmi",
            "content": "Yonik Seeley, will you have a chance to upload before you off to travel?\n\nThanks! ",
            "id": "comment-15381234"
        },
        {
            "date": "2016-07-17T15:41:52+0000",
            "author": "Yonik Seeley",
            "content": "Didn't quite make it before the vacation...\n\nHere's a partial draft patch for developers only - it won't do anything interesting for users as it's probably only 25-30% complete.\n\nIt implements the part that keeps track of what values have been seen from what shards, and constructs a data structure to be sent during the next phase of faceting.  Refinement is selectable on a per-facet basis. ",
            "id": "comment-15381395"
        },
        {
            "date": "2016-08-11T05:45:24+0000",
            "author": "Dorit Carmon",
            "content": "hi, any updates for this issue? \nthis is a very significant for our analysis, hope there are some good news on progress \nThank you,\nDorit.  ",
            "id": "comment-15416599"
        },
        {
            "date": "2016-10-26T13:51:37+0000",
            "author": "John Stratoulis",
            "content": "Hello do we have any update regarding this?\nThanks! ",
            "id": "comment-15608510"
        },
        {
            "date": "2016-11-17T20:07:34+0000",
            "author": "Chakra Yeleswarapu",
            "content": "Hello,\n\nOur use case relies on accurate bucket count and facet stats. \njson.facet works fine on fields with low unique values. However for high unique value fields bucketing and stats are inconsistent.\nAs in OPs example, if query is filtered further (yielding fewer documents), bucket count and stats returned are accurate. \n\nAny updates on this much appreciated.\n\nThanks ",
            "id": "comment-15674675"
        },
        {
            "date": "2017-02-03T17:32:18+0000",
            "author": "Abhishek Umarjikar",
            "content": "Any progress on this..? ",
            "id": "comment-15851782"
        },
        {
            "date": "2017-03-16T15:03:48+0000",
            "author": "Yonik Seeley",
            "content": "I've found some time to work on this and have single-level counts-only refinement working.  Hopefully I'll get something checked in relatively soon. ",
            "id": "comment-15928228"
        },
        {
            "date": "2017-03-17T03:10:16+0000",
            "author": "Yonik Seeley",
            "content": "Here's a draft patch with a couple of very basic tests (this isn't comprehensive... just handles basic field faceting).  I'll probably try to clean it up a little more and commit something tomorrow. ",
            "id": "comment-15929373"
        },
        {
            "date": "2017-03-17T16:14:07+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 540ee1db10b64aead7d7756b161c2c7348319d81 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=540ee1d ]\n\nSOLR-7452: add refine param to json facets, implement for array field faceting ",
            "id": "comment-15930230"
        },
        {
            "date": "2017-03-17T16:30:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit cb5a40e54a739cdf008ffe9a5e06d1a8b976bdf5 in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cb5a40e ]\n\nSOLR-7452: add refine param to json facets, implement for array field faceting ",
            "id": "comment-15930255"
        },
        {
            "date": "2017-03-21T12:42:53+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 6786089b0bc8be50287c2527874ca4503114addd in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=6786089 ]\n\nSOLR-7452: json facet API, refine/skip through buckets already visited ",
            "id": "comment-15934563"
        },
        {
            "date": "2017-03-21T12:48:27+0000",
            "author": "ASF subversion and git services",
            "content": "Commit c69e719b806f64e05e8e17f1d03e91f5c7e68159 in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=c69e719 ]\n\nSOLR-7452: json facet API, refine/skip through buckets already visited ",
            "id": "comment-15934570"
        },
        {
            "date": "2017-03-22T23:54:04+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 725cd4e2f546a71ccf43218ffc88739a3e05a260 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=725cd4e ]\n\nSOLR-7452: facet refinement - don't generate domain if skipping bucket ",
            "id": "comment-15937403"
        },
        {
            "date": "2017-03-22T23:54:33+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 5194861115708f68c6cde5e66bf9d1c6a3178934 in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5194861 ]\n\nSOLR-7452: facet refinement - don't generate domain if skipping bucket ",
            "id": "comment-15937405"
        },
        {
            "date": "2017-03-25T00:43:54+0000",
            "author": "ASF subversion and git services",
            "content": "Commit fec87fceb5de0c167969ee03fcc09d58d5d479c9 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fec87fc ]\n\nSOLR-7452: add support for _m buckets, missing and has sub-facets in need of refinement ",
            "id": "comment-15941405"
        },
        {
            "date": "2017-03-25T00:46:45+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 07479e9414cbe040de008bafef6aed9133cfb9cb in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=07479e9 ]\n\nSOLR-7452: add support for _m buckets, missing and has sub-facets in need of refinement ",
            "id": "comment-15941406"
        },
        {
            "date": "2017-03-28T23:52:57+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 66bfdcbdbab8f294341232946a30a61898228a34 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=66bfdcb ]\n\nSOLR-7452: change terminology from _m missing-bucket to _p partial-bucket for refinement ",
            "id": "comment-15946246"
        },
        {
            "date": "2017-03-28T23:53:25+0000",
            "author": "ASF subversion and git services",
            "content": "Commit f36b2bfbb9ea77f4232bae35e49ce6a6241886de in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=f36b2bf ]\n\nSOLR-7452: change terminology from _m missing-bucket to _p partial-bucket for refinement ",
            "id": "comment-15946251"
        },
        {
            "date": "2017-03-30T16:56:09+0000",
            "author": "ASF subversion and git services",
            "content": "Commit b17b48d5353fd469c0d8bdbfa25894049495cb46 in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b17b48d ]\n\nSOLR-7452: refinement of missing buckets and partial facets through missing buckets ",
            "id": "comment-15949405"
        },
        {
            "date": "2017-03-31T16:55:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit cc623403bd82a176a057e1c9567f37d01f7391c4 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=cc62340 ]\n\nSOLR-7452: refinement of missing buckets and partial facets through missing buckets ",
            "id": "comment-15951274"
        },
        {
            "date": "2017-03-31T16:55:22+0000",
            "author": "ASF subversion and git services",
            "content": "Commit bdb0d588ee8129cf42df03f6185fbb3f4d8e0af4 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=bdb0d58 ]\n\nSOLR-7452: add more tests for refinement of missing buckets ",
            "id": "comment-15951275"
        },
        {
            "date": "2017-03-31T16:56:29+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 11bf7943eeac28c28e1f4f6053c5640ff78a1578 in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=11bf794 ]\n\nSOLR-7452: add more tests for refinement of missing buckets ",
            "id": "comment-15951276"
        },
        {
            "date": "2017-04-06T13:29:35+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 53aeffade5eca83aebc59bbb8d271c013bd1c037 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=53aeffa ]\n\nSOLR-7452: add support for refining missing allBuckets ",
            "id": "comment-15958928"
        },
        {
            "date": "2017-04-06T13:33:13+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 7828ae07ec1a4a451192fae08e29eddce1582292 in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7828ae0 ]\n\nSOLR-7452: add support for refining missing allBuckets ",
            "id": "comment-15958937"
        },
        {
            "date": "2017-04-25T15:00:48+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4f89f98f665ed659669ee1454bd32ff99ed097a7 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4f89f98 ]\n\nSOLR-7452: JSON Facet API - refining for numBuckets ",
            "id": "comment-15983022"
        },
        {
            "date": "2017-04-25T15:02:13+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 79d44ae6403a1924651c2b072b201c203c651e8f in lucene-solr's branch refs/heads/branch_6x from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=79d44ae ]\n\nSOLR-7452: JSON Facet API - refining for numBuckets ",
            "id": "comment-15983025"
        },
        {
            "date": "2017-06-02T15:36:20+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 393a2ed176b8acfe26cee821d7f3a8babed122b9 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=393a2ed ]\n\nSOLR-7452: tests: templatize refinement tests ",
            "id": "comment-16034890"
        },
        {
            "date": "2017-06-05T00:13:52+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 67876b30277314f15f5e55ef321a39d67e7f1bac in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=67876b3 ]\n\nSOLR-7452: fix facet refinement for method:dvhash ",
            "id": "comment-16036440"
        },
        {
            "date": "2017-06-07T00:57:47+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a1692c160ac24746c17eae8d6cc5d40771c38e61 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a1692c1 ]\n\nSOLR-7452: fix facet refinement for range queries ",
            "id": "comment-16039941"
        },
        {
            "date": "2017-06-08T18:19:46+0000",
            "author": "Yonik Seeley",
            "content": "Here's a patch that fixes up faceting for numeric fields.\nUnfortunately, it seems to cause a failure in TestSQLHandler, so we'll have to fix that as well.\n\n\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestSQLHandler -Dtests.method=doTest -Dtests.seed=2E7AD2F252ACE733 -Dtests.slow=true -Dtests.locale=de-GR -Dtests.timez\none=Asia/Vientiane -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] ERROR   34.9s J2 | TestSQLHandler.doTest <<<\n   [junit4]    > Throwable #1: java.io.IOException: --> http://127.0.0.1:36871/w_rb/collection1:java.lang.Integer cannot be cast to java.lang.Long\n   [junit4]    >        at __randomizedtesting.SeedInfo.seed([2E7AD2F252ACE733:893E6A563F17F48A]:0)\n   [junit4]    >        at org.apache.solr.client.solrj.io.stream.SolrStream.read(SolrStream.java:219)\n   [junit4]    >        at org.apache.solr.handler.TestSQLHandler.getTuples(TestSQLHandler.java:2527)\n   [junit4]    >        at org.apache.solr.handler.TestSQLHandler.testSelectDistinctFacets(TestSQLHandler.java:968)\n   [junit4]    >        at org.apache.solr.handler.TestSQLHandler.doTest(TestSQLHandler.java:94)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsFixedStatement.callStatement(BaseDistributedSearchTestCase.java:985)\n   [junit4]    >        at org.apache.solr.BaseDistributedSearchTestCase$ShardsRepeatRule$ShardsStatement.evaluate(BaseDistributedSearchTestCase.java:960)\n   [junit4]    >        at java.lang.Thread.run(Thread.java:748)\n\n ",
            "id": "comment-16043180"
        },
        {
            "date": "2017-06-08T19:42:48+0000",
            "author": "Joel Bernstein",
            "content": "I should have time to take a look at this tomorrow. I suspect some assumption about the expected field type is different now. ",
            "id": "comment-16043307"
        },
        {
            "date": "2017-06-08T20:41:20+0000",
            "author": "Yonik Seeley",
            "content": "Actually, it looks like this is more the root-cause stack trace:\n\n   [junit4]   2> 708657 ERROR (qtp1112930155-8135) [n:127.0.0.1:36871_w_rb c:collection1 s:shard2 r:core_node1 x:collection1] o.a.s.c.s.i.s.ExceptionStream java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\n   [junit4]   2>        at org.apache.calcite.avatica.util.AbstractCursor$LongAccessor.getLong(AbstractCursor.java:540)\n   [junit4]   2>        at org.apache.calcite.avatica.AvaticaSite.get(AvaticaSite.java:305)\n   [junit4]   2>        at org.apache.calcite.avatica.AvaticaResultSet.getObject(AvaticaResultSet.java:393)\n   [junit4]   2>        at org.apache.solr.client.solrj.io.stream.JDBCStream$1.selectValue(JDBCStream.java:314)\n   [junit4]   2>        at org.apache.solr.client.solrj.io.stream.JDBCStream.read(JDBCStream.java:506)\n   [junit4]   2>        at org.apache.solr.handler.SQLHandler$SqlHandlerStream.read(SQLHandler.java:186)\n   [junit4]   2>        at org.apache.solr.client.solrj.io.stream.ExceptionStream.read(ExceptionStream.java:68)\n   [junit4]   2>        at org.apache.solr.handler.StreamHandler$TimerStream.read(StreamHandler.java:587)\n   [junit4]   2>        at org.apache.solr.client.solrj.io.stream.TupleStream.lambda$writeMap$0(TupleStream.java:87)\n   [junit4]   2>        at org.apache.solr.response.JSONWriter.writeIterator(JSONResponseWriter.java:523)\n   [junit4]   2>        at org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:180)\n   [junit4]   2>        at org.apache.solr.response.JSONWriter$2.put(JSONResponseWriter.java:559)\n   [junit4]   2>        at org.apache.solr.client.solrj.io.stream.TupleStream.writeMap(TupleStream.java:84)\n   [junit4]   2>        at org.apache.solr.response.JSONWriter.writeMap(JSONResponseWriter.java:547)\n   [junit4]   2>        at org.apache.solr.response.TextResponseWriter.writeVal(TextResponseWriter.java:198)\n   [junit4]   2>        at org.apache.solr.response.JSONWriter.writeNamedListAsMapWithDups(JSONResponseWriter.java:209)\n   [junit4]   2>        at org.apache.solr.response.JSONWriter.writeNamedList(JSONResponseWriter.java:325)\n   [junit4]   2>        at org.apache.solr.response.JSONWriter.writeResponse(JSONResponseWriter.java:120)\n   [junit4]   2>        at org.apache.solr.response.JSONResponseWriter.write(JSONResponseWriter.java:71)\n   [junit4]   2>        at org.apache.solr.response.QueryResponseWriterUtil.writeQueryResponse(QueryResponseWriterUtil.java:65)\n\n\n\nThe facet labels from faceting on an int field were sometimes returning Long, which led to merging issues.  The patch corrected that, so now Integer labels are returned.\n\n--- a/solr/core/src/java/org/apache/solr/search/facet/FacetRange.java\n+++ b/solr/core/src/java/org/apache/solr/search/facet/FacetRange.java\n@@ -533,6 +533,10 @@ class FacetRangeProcessor extends FacetProcessor<FacetRange> {\n \n     public IntCalc(final SchemaField f) { super(f); }\n     @Override\n+    public Comparable bitsToValue(long bits) {\n+      return (int)bits;\n+    }\n+    @Override\n\n\n\nSo it looks like we need AvaticaResultSet to use to use AbstractCursor$LongAccessor@IntAccessor rather than a AbstractCursor$LongAccessor.  I'm not sure where that mapping is set up though... ",
            "id": "comment-16043394"
        },
        {
            "date": "2017-06-08T20:51:23+0000",
            "author": "Yonik Seeley",
            "content": "I suspect that there may be issues with Float/Double as well.\nAn alternative fix alternative fix could be to change JSON faceting so that only Long and Double is ever used as bucket values. ",
            "id": "comment-16043414"
        },
        {
            "date": "2017-06-13T13:47:12+0000",
            "author": "Joel Bernstein",
            "content": "The root of the exception is:\n\njava.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.Long\n   [junit4]   2> \tat org.apache.calcite.avatica.util.AbstractCursor$LongAccessor.getLong(AbstractCursor.java:540)\n   [junit4]   2> \tat org.apache.calcite.avatica.AvaticaSite.get(AvaticaSite.java:305)\n   [junit4]   2> \tat org.apache.calcite.avatica.AvaticaResultSet.getObject(AvaticaResultSet.java:393)\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.JDBCStream$1.selectValue(JDBCStream.java:314)\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.JDBCStream.read(JDBCStream.java:506)\n   [junit4]   2> \tat org.apache.solr.handler.SQLHandler$SqlHandlerStream.read(SQLHandler.java:186)\n   [junit4]   2> \tat org.apache.solr.client.solrj.io.stream.ExceptionStream.read(ExceptionStream.java:68)\n\n\nBasically Calcite is expecting a long in this scenario because we map all integer types to longs in the SolrSchema.java class. I think the best way to deal with this is to have the FacetStream convert all Integers buckets to Longs.\n\nThe Streaming API really only deals with Longs and Doubles.\n\nYonik Seeley, let's create branch for this so we can collaborate. If you create a branch with this patch I'll fix up the FacetStream. Then you can take a final look and commit to master.\n\n ",
            "id": "comment-16047922"
        },
        {
            "date": "2017-06-13T19:05:46+0000",
            "author": "Yonik Seeley",
            "content": "Basically Calcite is expecting a long in this scenario because we map all integer types to longs in the SolrSchema.java class.\nAh, that's where that mapping is!\n\nI think the best way to deal with this is to have the FacetStream convert all Integers buckets to Longs.\nHere's a quick patch that seems to get things working:\n\ndiff --git a/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java b/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java\nindex c5bd56bcb9..fb53e8464b 100644\n--- a/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java\n+++ b/solr/solrj/src/java/org/apache/solr/client/solrj/io/stream/FacetStream.java\n@@ -477,6 +477,9 @@ public class FacetStream extends TupleStream implements Expressible  {\n     for(int b=0; b<allBuckets.size(); b++) {\n       NamedList bucket = (NamedList)allBuckets.get(b);\n       Object val = bucket.get(\"val\");\n+      if (val instanceof Integer) {\n+        val=((Integer)val).longValue();  // calcite currently expects Long values here\n+      }\n       Tuple t = currentTuple.clone();\n       t.put(bucketName, val);\n       int nextLevel = level+1;\n\n ",
            "id": "comment-16048265"
        },
        {
            "date": "2017-06-13T21:31:38+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a18a4ce2450b33b0f03dc9882557fa48040f54c8 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a18a4ce ]\n\nSOLR-7452: convert bucket values in FacetStream from Integer to Long for calcite, make bucket labels in JSON Facet API consistent for facet refinement ",
            "id": "comment-16048434"
        },
        {
            "date": "2017-06-14T02:02:46+0000",
            "author": "ASF subversion and git services",
            "content": "Commit a18a4ce2450b33b0f03dc9882557fa48040f54c8 in lucene-solr's branch refs/heads/jira/SOLR-10834 from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a18a4ce ]\n\nSOLR-7452: convert bucket values in FacetStream from Integer to Long for calcite, make bucket labels in JSON Facet API consistent for facet refinement ",
            "id": "comment-16048599"
        },
        {
            "date": "2017-06-15T16:53:15+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 3b5f3cc3edfaf22b41f3f969391b56be482fb7b4 in lucene-solr's branch refs/heads/master from Yonik Seeley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=3b5f3cc ]\n\nSOLR-7452: add CHANGES for refinement, remove debugging output, don't indent facet refinement info ",
            "id": "comment-16050761"
        },
        {
            "date": "2017-06-15T16:55:51+0000",
            "author": "Yonik Seeley",
            "content": "OK, I've committed the last required bits, removed debugging code, and added a CHANGES entry.\n ",
            "id": "comment-16050765"
        },
        {
            "date": "2017-08-29T23:48:06+0000",
            "author": "Chakra Yeleswarapu",
            "content": "Thank you Yonik Seeley. Does this fix mean high cardinal field values that exceed 100 per node/shard will return correct count?  ",
            "id": "comment-16146356"
        }
    ]
}