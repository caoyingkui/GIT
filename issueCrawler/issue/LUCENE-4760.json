{
    "id": "LUCENE-4760",
    "title": "Weird IndexWriter.close() usage",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "4.1",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "I'm using IndexWriter on such a way that it can be interrupted, since the streams i'm using to output to file can be interrupted. So far so good, but what i'm finding strange is the (only) way i've found to prevent the file lock being held afterwards.\n\nNormally i'd do a try / catch / finally block where the finally would close() and handle exceptions from the close. However, IndexWriter \"close()\" is more like a buffered commit, where many exceptions can occur, so i left it on the main part of the code.\n\ntry\n{... index.close(); }\n catch \n{ /*log*/ }\n finally { \n                if (IndexWriter.isLocked(cacheDir)) \n{\n                    IndexWriter.unlock(cacheDir);\n                }\n}\n\nDidn't work. The lock couldn't be unlocked (always) if the stream was interrupted\n\nSo in desperation, i tried to be more literal in my interpretation of the IndexWriter.close() javadoc and tried\n        try {\n            ...\n            indexWriter.close();\n        } catch (IOException ex) {\n            try {\n                indexWriter.close();\n            } finally {\n                if (IndexWriter.isLocked(cacheDir)) {                    IndexWriter.unlock(cacheDir);                }\n            }\n            throw ex;\n        } finally \n{\n            ...\n        }\n\nThis worked (the lock was always released if a additional close() was invoked in a situation where the lock would be held before trying to unlock it), but i find it really counter-intuitive, and would wish for at least additional javadoc attention, or a redesign on a major API revision.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-02-07T14:52:58+0000",
            "content": "Hey - yeah, the situation is a little ugly and needs to be improved. Please see LUCENE-4638 and LUCENE-4246 ",
            "author": "Mark Miller",
            "id": "comment-13573552"
        },
        {
            "date": "2013-02-07T16:52:34+0000",
            "content": "TBH i have no idea why it 'works' of even if there is not dozens of hidden bugs there. IMO, close() should release the filelocks the writer acquired, if they are all internal like currently; or not at all, if there are external ones (like IndexSearch has). So if you're currently considering the interruptibility of close, or whether it should commit or not, all i ask is that it 'invalidates' the underlying resources usage so native/other locks get released if it is interrupted or not; if it was actually called.\n\nedit: though therein lies the rub of a 'interruptuble commiting close()' so you can reuse the writer on error, so maybe that combination doesn't work. ",
            "author": "i30817",
            "id": "comment-13573664"
        },
        {
            "date": "2013-02-08T15:07:30+0000",
            "content": "It's all related and tied up together right now. I'd keep en eye on those issues. ",
            "author": "Mark Miller",
            "id": "comment-13574531"
        }
    ]
}