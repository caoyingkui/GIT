{
    "id": "SOLR-5211",
    "title": "updating parent as childless makes old children orphans",
    "details": {
        "affect_versions": "4.5,                                            6.0",
        "status": "Resolved",
        "fix_versions": [
            "master (8.0)"
        ],
        "components": [
            "update"
        ],
        "type": "Sub-task",
        "priority": "Blocker",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "if I have parent with children in the index, I can send update omitting children. as a result old children become orphaned. \nI suppose separate _root_ fields makes much trouble. I propose to extend notion of uniqueKey, and let it spans across blocks that makes updates unambiguous.  \nWDYT? Do you like to see a test proves this issue?",
    "attachments": {
        "SOLR-5211.patch": "https://issues.apache.org/jira/secure/attachment/12925310/SOLR-5211.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Mikhail Khludnev",
            "id": "comment-13756947",
            "date": "2013-09-03T19:17:03+0000",
            "content": "I'm observing an interesting behavior. If I delete one parent doc, ToParentBJQ doesn't stick orphan children to the next parent, but it happens after optimize! it seems ToParentBJQ doesn't mind deletes in parents filter. Isn't it a separate LUCENE issue? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-13756970",
            "date": "2013-09-03T19:38:32+0000",
            "content": "I'm observing an interesting behavior. If I delete one parent doc, ToParentBJQ doesn't stick orphan children to the next parent, but it happens after optimize! \n\nThis seems fine - deleting a parent doc and not the children results in undefined behavior.\n\nit seems ToParentBJQ doesn't mind deletes in parents filter.\n\nRight - that seems fine too. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13970969",
            "date": "2014-04-16T12:56:46+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Erik Hatcher",
            "id": "comment-14273867",
            "date": "2015-01-12T18:04:41+0000",
            "content": "Removing 5.0 as fix version - no patch, action items, or assigned developer. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15038352",
            "date": "2015-12-03T19:06:10+0000",
            "content": "I want to address this. Thus, we have to assign identifier spans across whole block. However it makes <uniqueKey> semantics odd. Even if you send a single document, it moves uniqueKey field value into _root_ field (as-is). Otherwise, we can propagate uniqueKey to whole block, but it would seem contradictionary. \nWhich way would you like? "
        },
        {
            "author": "Upayavira",
            "id": "comment-15038628",
            "date": "2015-12-03T21:30:41+0000",
            "content": "It seems there's two ways to do this:\n\nEither we have the index \"work out\" that there were children, and delete them, or have the client tell the index that there were children.\n\nMight the latter be easier? If a document is passed in with an empty list of child docs, then we know to delete all child docs of the parent. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-15038858",
            "date": "2015-12-03T23:48:42+0000",
            "content": "I thought i had made this straw many suggestion in some jira at some point, but I can't find it now....\n\nI think a robust solution to dealing with multi-level nested documents and deletions (as i understand the rules of block joins) would be to extend the _root_ field concept to an _ancestors_ concept \u2013 the  _ancestors_  field would be multivalued and contain the uniqueKey of every \"ancestor\" document, as well as the uniqueKey of the current document.\n\nie: if \"id:parent\" has 2 children then \"id:child1\" has both \"parent\" and \"child1\" in it's _ancestors_ field.  likewise if you have a deep hierarchy of \"A(B(C,D),E(F(G,H),I(J)))\" then the _ancestors_ field for \"H\" would contain \"A E H\"\n\nThis then means that any deleteById or deleteByQuery that involves the uniqueKey field can/should be re-rewitten to be a delete ased on that term value against the _ancestors_, so that all decendents of the uniqueKey specified are deleted.\n\n(not sure how to do this in a back compat way, but an idea i wanted to throw out there) "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15041236",
            "date": "2015-12-04T07:57:56+0000",
            "content": "I want to emphasize two things: multilevel nesting is out of scope so far, just because we can't deal with the simplest single level parent/child case yet; I don't think we can afford to complicate update flow, ie. add deleteBy* or check are there children (btw, they can be commited yet). \nWe need to come up with universal routine which can handle all cases below via the single API entry point  IW.updateDocuments(delTerm, docs) or establish the new one: \n\n\tadd with/without children\n\tupdate (overwrite) with/without children\n\tlet to omit uniquKey in schema, it this case it won't overwrite itself\n\n\n\njust to remind, now it work as delTerm=$uniqueKey:get($uniqueKey) for childless, and  delTerm=_root_:get($uniqueKey). here is the problem.\n\nIMHO, if we just allow $uniqueKey to span across a whole block (q=id:33 returns a block of several docs), it would be nobrainer, which solves everything. Let's just always copy $uniqueKey to _root_, span it to all children and use _root_:get($uniqueKey) as a delete term?!!   \n\nWhat I'm missing?  "
        },
        {
            "author": "Frank J Kelly",
            "id": "comment-15183586",
            "date": "2016-03-07T19:57:36+0000",
            "content": "Has this been fixed in 5.5 or deferred to a later release? "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-15183701",
            "date": "2016-03-07T21:03:02+0000",
            "content": "it hasn't been done, yet.  "
        },
        {
            "author": "Dr Oleg Savrasov",
            "id": "comment-16492079",
            "date": "2018-05-27T16:16:23+0000",
            "content": "Mikhail Khludnev I've tried to implement proposed approach, i.e.  'let's just always copy $uniqueKey to root, span it to all children and use root:get($uniqueKey) as a delete term'. See the patch attached "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-16496774",
            "date": "2018-05-31T16:07:39+0000",
            "content": "This what we discussed at Vegas, Hoss Man. Let's treat all docs (even childfree) parents. Here are pros, and cons:\n  mixing parents and childfree (not yet in tests)\n  overwriting childfree by parent (in tests)\n for those who run childfree-only index its waste index space for storing useless _root_ column, as a workaround they can enable <updateHandler class=\"solr.LegacyDirectUpdateHandler\"> (I'm not happy about this name). \n\n\tatomic updates for parents is not there but just possible\n\n\n\nI'd like to tweak the tests a little. Meanwhile, the questions are: \n\n\tAre we going this way?\n\twhat release strategy is worth to take? eg make ParentAlwaysDUH2 optional in 7.4. but default in 8.0 or turn it by default right now\n\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-16496790",
            "date": "2018-05-31T16:14:39+0000",
            "content": "I propose that if the schema declares _root_ then we consider this to be a parent/child enabled schema, and every doc will get it's _root_.\n\nIf it does not, then each document stands alone. \u00a0The presence of child docs should cause an error here, mentioning that _root_ must be declared in the schema. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-16498627",
            "date": "2018-06-01T21:59:40+0000",
            "content": "It should be relatively trivial to know if the\u00a0_root_ field exists in the index (i.e. when any parent/child groups exist) and do the right thing based on that.\n\n\n\u00a0\n\n\u00a0\n\n\u00a0 "
        },
        {
            "author": "David Smiley",
            "id": "comment-16498834",
            "date": "2018-06-02T02:45:37+0000",
            "content": "It should be relatively trivial to know if the root field exists in the index (i.e. when any parent/child groups exist) and do the right thing based on that.\n\nHow then do you handle the first document?  What if circumstantially the first doc is a doc with children... then you add _root_?  Okay but if circumstantially the first doc has no children then....?   Or maybe your comment is how do we handle an existing index before this rule existed?  I'm not sure it's worth troubling ourselves over that... maybe instead log a warning on startup if root is defined and some (but not all) docs have it.\n\nI assume that the goal is for an index in which every document has root (and is thus parent/child enabled), or none do and there are no child docs.  Partial is asking for trouble. "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-16499044",
            "date": "2018-06-02T12:49:18+0000",
            "content": "I like the idea of checking _root_ in schema. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-16499072",
            "date": "2018-06-02T13:42:31+0000",
            "content": "Or maybe your comment is how do we handle an existing index before this rule existed?\n\nMore as an alternative direction that would not require the rule (that every document have root), only those with children (as is done today).\nWe constantly get dinged on usability because of things that require static configuration, and this is yet another (that would require reindexing even) "
        },
        {
            "author": "Dr Oleg Savrasov",
            "id": "comment-16499465",
            "date": "2018-06-03T16:15:12+0000",
            "content": "The patch is reworked to support checking root in schema. New logic is covered with tests. DirectUpdateHandler2 is updated to delete children together with parent. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-16499542",
            "date": "2018-06-03T20:16:32+0000",
            "content": "If we check for _root_ in the index, everything could be back compat (and avoid the need for schema update + reindex).\n\nIf parent-child docs are being used, then updates could use 2 update terms (one for id and one for _root_) "
        },
        {
            "author": "Mikhail Khludnev",
            "id": "comment-16504328",
            "date": "2018-06-07T07:15:00+0000",
            "content": "relatively trivial to know if the root field exists in the index\nYonik Seeley, I see a few challenges here. Does this approach provide consistent behaviour if we start from empty index, then sent parent and standalone, oppose to reverse sequence? Does _root_ field existence rely on commit or we can detect it in concurrently flushing segment and/or buffered in another thread? I just don't think that checking what's in the index is feasible on update.   \n\nupdates could use 2 update terms (one for id and one for root)\nSo far it accepts only one. Is it possible to pass the second one?  "
        },
        {
            "author": "Dr Oleg Savrasov",
            "id": "comment-16521999",
            "date": "2018-06-25T08:22:57+0000",
            "content": "The patch is reworked according to the latest changes in DirectUpdateHandler2. Added test for the case when update has child docs, but there is no root in schema. Personally, I'd prefer to move getLuceneDocument and getLuceneDocsIfNested from AddUpdateCommand to DirectUpdateHandler2. I believe that logic of documents conversion is not responsibility of the command, and should be done by handler. Ready to rework the patch if needed. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16522624",
            "date": "2018-06-25T18:08:47+0000",
            "content": "Feel free to propose a trial patch with such a change.  I wonder if your proposal would be better/worse \u2013 I'm not sure.  Note that there are some external callers that want a Lucene Document from the command as well.\n\nA cursory look at your patch looked fine... and I can see that there is some awkwardness in conditionally adding the block ID prompting your suggestion to decouple Document conversion about of the command.  Separately in SOLR-12441 I proposed maybe _root_ manipulation should be done in an URP, the one being added in that issue. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16685206",
            "date": "2018-11-13T13:38:43+0000",
            "content": "The absence of root on a non-nested doc has been a problem while working on SOLR-12638. I think we should just add it, as Oleg proposes for 8.0. Sure; it'd be nice to not pay this cost for users that don't need nested docs (and most don't need it by far). They can simply omit root though, as well as other special nested fields that will appear in 8.0. 8.0 will add nest_parent and nest_path to the default schema. Perhaps 8.0 should include a rename of root to be nest_root which'll be always populated and we leave out root; but an \"old\" schema with root should work as it does today (e.g. the schema either has root (old) or nest_root (new) or neither). \u00a0CC mosh "
        },
        {
            "author": "mosh",
            "id": "comment-16685263",
            "date": "2018-11-13T14:12:18+0000",
            "content": "The absence of root on a non-nested doc has been a problem while working on SOLR-12638.\nYes, this has been a major setback.\n A rename could be done, what did you have in mind though?\n Is there any scenario where differentiating between the new and old schema might be beneficial?\n Nonetheless, currently,\n the approval of this ticket might prove to be a blocker for SOLR-12638. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16687514",
            "date": "2018-11-15T05:41:49+0000",
            "content": "A rename could be done, what did you have in mind though?\n\nThis is what I meant by _nest_root_.  This helps brand nested documents as such more consistently.  You'd look a this field and might a clue what it's for.  It seems IndexSchema.ROOT_FIELD_NAME is only used in a few places and wouldn't be hard to migrate to this new scheme.\n\nIs there any scenario where differentiating between the new and old schema might be beneficial?\n\nFor back-compat only.\n\nI took a look at the patch and I have some notes:\n\n\tDirectUpdateHandler2.delete() should use cmd.getIndexedId() instead of direct field access.  Those members on DeleteUpdateCommand ought to be private!\n\tAddUpdateCommand: I see you refactored out a new addBlockId method so that the underlying logic can be invoked in now two places.  However it calls getHashableId each time.  That could be fixed by adding this as a parameter so that it's calculated up front.  This method also adds the _version_ field to a document.  This was being done only because child documents probably ought to have the same version as that of the root. (it needed a comment saying this!).  That said; I think use of the version on a child document isn't tested and might not work (hence SOLR-12638).  I wonder what would happen if it were blank on a child doc?  i.e. do we even need to do anything here?\n\tI'm sympathetic to moving \"getDocument\" logic out of the command and into DirectUpdateHandler2.  I think there is some entangling of responsibilities between the two that would probably become cleaner.  Do or not do here as you have time for.\n\tI appreciate the test of \"legacy\" behavior though I'm not sure it's worth committing this as it's kind of a burden going forward.  If we go with the rename approach... then the legacy test becomes simpler.\n\n "
        },
        {
            "author": "David Smiley",
            "id": "comment-16688130",
            "date": "2018-11-15T14:19:16+0000",
            "content": "RE my pondering of the dubious necessity of adding _version_ to child docs: SOLR-10114 \u2013 delete-by-query is done in a way that assumes all documents have a version.... at least this is true for reordered DBQs according to that issue.  So it must stay.\n\nBTW it won't be as simple as I suggested to rename _root_ since there are lots of tests referencing it.  We can certainly keep the name, but assume in 8.0 (when this gets committed) that _root_ is completely populated by any code that needs to make this assumption by doing a version check. "
        },
        {
            "author": "mosh",
            "id": "comment-16688241",
            "date": "2018-11-15T15:46:10+0000",
            "content": "Dr Oleg Savrasov,\nAre you planning on continuing your work on this feature? "
        },
        {
            "author": "Dr Oleg Savrasov",
            "id": "comment-16690359",
            "date": "2018-11-17T03:41:30+0000",
            "content": "mosh, don't have time these days, sorry. I'll try to return to the feature in December-January if it's not too late. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16694222",
            "date": "2018-11-21T04:32:25+0000",
            "content": "Moshe and I iterated a bit on the linked PR and I think it's ready.  Proposed CHANGES.txt as follows under Improvements:\n\n If _root_ is defined in the schema, it is now always populated automatically.  This allows\n documents with children to be updated with a document that does not have children, whereas\n before it would break block-join queries.  If you don't use nested documents then _root_ can\n be removed as always.\n\n\nI plan to commit tomorrow to master only.  I'll have my laptop with me over Thanksgiving holidays in case there are issues. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16694919",
            "date": "2018-11-21T16:41:45+0000",
            "content": "mosh there are still some test failures:\n   [junit4]   - org.apache.solr.cloud.TestCloudPseudoReturnFields.testScoreAndAllRealFieldsRTG\n   [junit4]   - org.apache.solr.cloud.TestCloudPseudoReturnFields.testAllRealFieldsRTG\n   [junit4]   - org.apache.solr.cloud.TestCloudPseudoReturnFields.testAllRealFields\n   [junit4]   - org.apache.solr.cloud.TestCloudPseudoReturnFields.testScoreAndAllRealFields\n   [junit4]   - org.apache.solr.RootFieldTest (suite)\n   [junit4]   - org.apache.solr.schema.MultiTermTest.testQueryCopiedToMulti\n   [junit4]   - org.apache.solr.schema.MultiTermTest.testDefaultCopiedToMulti\n\nRootFieldTest complained schema-11.xml doesn't exist "
        },
        {
            "author": "mosh",
            "id": "comment-16695587",
            "date": "2018-11-22T06:31:16+0000",
            "content": "[junit4] - org.apache.solr.schema.MultiTermTest.testQueryCopiedToMulti\n [junit4] - org.apache.solr.schema.MultiTermTest.testDefaultCopiedToMulti\nI could not reproduce the failures in these tests.\n Were the exceptions reproducible using a particular seed?\n I ran the test suite using this command:\n\nant clean test -Dtestcase=MultiTermTest\n "
        },
        {
            "author": "mosh",
            "id": "comment-16698186",
            "date": "2018-11-25T13:57:52+0000",
            "content": "Changed assertions in the following test suites within the newly uploaded patch file(also pushed to PR):\n\n\tTestRandomFlRTGCloud\n\tAtomicUpdatesTest\n\tRootFieldTest\n\n "
        },
        {
            "author": "Lucene/Solr QA",
            "id": "comment-16698421",
            "date": "2018-11-26T02:21:33+0000",
            "content": "\n\n\n  +1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 8 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 54s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 56s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 56s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 40s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 33s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 33s \n  the patch passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n +1 \n  unit  \n  48m  5s \n  core in the patch passed.  \n\n\n +1 \n  unit  \n   4m 13s \n  solrj in the patch passed.  \n\n\n  \n   \n  58m 47s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-5211 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12949423/SOLR-5211.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  \n\n\n uname \n Linux lucene1-us-west 4.4.0-137-generic #163~14.04.1-Ubuntu SMP Mon Sep 24 17:14:57 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / d7b878e \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on July 24 2018 \n\n\n Default Java \n 1.8.0_191 \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/233/testReport/ \n\n\n modules \n C: solr/core solr/solrj U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/233/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16698432",
            "date": "2018-11-26T02:48:00+0000",
            "content": "Commit a346ba0d3c371ec9f314c21fe67afeca64846cf0 in lucene-solr's branch refs/heads/master from Moshe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a346ba0 ]\n\nSOLR-5211:  Always populate root (if defined).\nAnd, small refactor: Clarified how version is transferred from root to children. "
        },
        {
            "author": "David Smiley",
            "id": "comment-16698436",
            "date": "2018-11-26T02:56:02+0000",
            "content": "Thanks Dr Oleg Savrasov\u00a0and\u00a0mosh!\n\nFWIW I really like Hoss's earlier suggestion of having an \"ancestors\" field, that would have the ID of all ancestors including the present document. \u00a0That is very much in line with the overall goal of enhancing nested documents that Mosh and I are working on. \u00a0At least for the moment I'll keep this neat idea in the back of my head.\n\nAnother idea I had wold be, what if we could go back to the drawing board of nested documents and make the uniqueKey something that all nested docs have in common, thus it would technically point to not only a \"root\" doc but also all its children. \u00a0In that scheme you wouldn't need \"root\"; it'd be uniqueKey. \u00a0 Too late late to implement such an idea given complicated back-compat though. "
        },
        {
            "author": "mosh",
            "id": "comment-16698466",
            "date": "2018-11-26T04:27:56+0000",
            "content": "I uploaded another patch in which RootFieldTest uses schema.xml and schema15.xml(instead of schema11),\n\nsince the \"name\" field, which is used throughout this particular test suite, is not defined in schema11.xml. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16699117",
            "date": "2018-11-26T15:11:30+0000",
            "content": "Commit dc134be4499dfc1edd42941d6c6b1ff1b96190d3 in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dc134be ]\n\nSOLR-5211: ignore temporarily pending moshe fixing "
        },
        {
            "author": "David Smiley",
            "id": "comment-16699118",
            "date": "2018-11-26T15:12:51+0000",
            "content": "The test still used \"name\" however. \u00a0Please debug this further so I can apply the change and un-ignore the test. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16700142",
            "date": "2018-11-27T09:56:52+0000",
            "content": "Commit a346ba0d3c371ec9f314c21fe67afeca64846cf0 in lucene-solr's branch refs/heads/jira/http2 from Moshe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a346ba0 ]\n\nSOLR-5211:  Always populate root (if defined).\nAnd, small refactor: Clarified how version is transferred from root to children. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16700143",
            "date": "2018-11-27T09:56:53+0000",
            "content": "Commit dc134be4499dfc1edd42941d6c6b1ff1b96190d3 in lucene-solr's branch refs/heads/jira/http2 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=dc134be ]\n\nSOLR-5211: ignore temporarily pending moshe fixing "
        },
        {
            "author": "mosh",
            "id": "comment-16700438",
            "date": "2018-11-27T13:42:44+0000",
            "content": "David Smiley,\n\nI fixed RootFieldTest, and double checked that it passes with both useRootSchema as true and false.\nI did not see when I pulled the latest master some of the schema names had changed.\nI uploaded a new patch. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16700608",
            "date": "2018-11-27T15:50:07+0000",
            "content": "Commit 1534bbe4ae593521ba27c92495cf52c54be85fbf in lucene-solr's branch refs/heads/master from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1534bbe ]\n\nSOLR-5211: fix test "
        },
        {
            "author": "Frank Kelly",
            "id": "comment-16700638",
            "date": "2018-11-27T16:12:34+0000",
            "content": "Many thanks to all who contributed to this fix - it is very welcome!\u00a0 "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-16702265",
            "date": "2018-11-28T18:48:41+0000",
            "content": "Commit 1534bbe4ae593521ba27c92495cf52c54be85fbf in lucene-solr's branch refs/heads/jira/http2 from David Smiley\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1534bbe ]\n\nSOLR-5211: fix test "
        },
        {
            "author": "Lucky Sharma",
            "id": "comment-16708159",
            "date": "2018-12-04T04:03:58+0000",
            "content": "Hi All, \nI need one recommendation, To solve the same parent-child update problem, in versions 6 & 7, we have written our own UpdateProcessors, Will that be a definite approach. If yes I would be much happier if someone can review my code , and provide valuable feedback for that fix "
        }
    ]
}