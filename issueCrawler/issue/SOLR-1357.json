{
    "id": "SOLR-1357",
    "title": "SolrInputDocument cannot process dynamic fields",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.5",
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Adding data via SolrInputDocument is normally done by calling the addField method with a field name, field value and an optional boost.  In case of dynamic fields, if field names are known upfront, then caller of this method just passes in the right name and it automatically works.\n\nThis does not go well with users who use @interface Field annotations for automatic binding. \nAs of SOLR-1129, users can annotate Map<String, String> propertyName with @Field (\"field_*\") kind of annotations to bind dynamic field data to. SolrInputDocument should exhibit the same behavior.  The field value currently supported are - primitive, array, collection or an instance of Iterable. It can also take Map as values. If the field, for which addField method is called, is of dynamicField type (which can be derived from the field name), then the keys of the Map, passed as value, should be used to \"compose\" the correct field name.\n\nThis should be supported\n\n//This code sample should populate the dynamic fields \"brands_Nokia\" and \"brands_Samsung\"\npublic class MyBean{\n  @Field(\"brands_*)\n  Map<String, Integer> brands;\n  \n  ...\n}\nMap<String, String> brands= new HashMap<String, String>();\nbrands.put(\"Nokia\", 1000);\nbrands.put(\"Samsung\", 100);\n\nMyBean myBean = new MyBean();\nmyBean.setBrands(brands);\nsolrServer.addBean(myBean);\n\n\n\nWe can think of supporting this too ...\n\n//This code sample should populate the dynamic fields \"brands_Nokia\" and \"brands_Samsung\"\nMap<String, String> brands= new HashMap<String, String>();\nbrands.put(\"Nokia\", 1000);\nbrands.put(\"Samsung\", 100);\n\nSolrInputDocument doc = new SolrInputDocument();\ndoc.addField(\"brands_*\", brands);",
    "attachments": {
        "SOLR-1357.patch": "https://issues.apache.org/jira/secure/attachment/12426228/SOLR-1357.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Noble Paul",
            "id": "comment-12741854",
            "date": "2009-08-11T13:20:01+0000",
            "content": "for the bean\n\npublic class MyBean{\n  @Field(\"brands_*)\n  Map<String, Integer> brands;\n  \n  ...\n}\n\n\n\n\nthe following should not work\n\nbrands.put(\"Nokia\", 1000);\nbrands.put(\"Samsung\", 100);\n\n\n\nbut this should work\n\nbrands.put(\"brands_Nokia\", 1000);\nbrands.put(\"brands_Samsung\", 100);\n\n\n\nwe may not need to support it is SolrInputDocument "
        },
        {
            "author": "Avlesh Singh",
            "id": "comment-12741910",
            "date": "2009-08-11T15:25:45+0000",
            "content": "Well, I don't see a reason behind the proposed behavior (brand_nokia versus nokia), Noble. And why do you think SolrInputDocument should not facilitate this? "
        },
        {
            "author": "Avlesh Singh",
            "id": "comment-12741915",
            "date": "2009-08-11T15:34:44+0000",
            "content": "My point is that when a user has already annotated the field as \"brand_*\", appending them to keys of the Map is counter intuitive. This also goes against the behavior in SOLR-1129.\nAs far as supporting the behavior in SolrInputDocument goes, unless there is some low level API restriction, I would say we should support it. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12742220",
            "date": "2009-08-12T05:13:06+0000",
            "content": "My point is that when a user has already annotated the field as \"brand_*\", appending them to keys of the Map is counter intuitive.\n\nIMHO It would be more clear if the fields are created in the same name as the user input. appending it to the wild card part is not so obvious. \n\nThis is how serialization/deserialization works.\n\nWhen I fetch an instance of MyBean ,it  contains the keys as \"brands_Nokia\" and brands_Samsung\" . When I store it back why should I chop off the \"brands_\" part. I should be able to put back in the same Object into Solr w/o modifying it\n\nAnd why do you think SolrInputDocument should not facilitate this?\n\nI'm not against the idea itself. I just meant that it is beyond the scope of this issue. Moreover, SolrInputDocument does not have a problem in achieving this requirement . "
        },
        {
            "author": "Jean Baptiste Pionnier",
            "id": "comment-12780512",
            "date": "2009-11-20T10:56:38+0000",
            "content": "I have not been able to set dynamic fields via annotations in SolrJ 1.4.\nI have modified the following loop in  org.apache.solr.client.solrj.beans.DocumentObjectBinder.toSolrInputDocument()\n\n\nDocumentObjectBinder.java\nfor (DocField field : fields) {\n      doc.setField( field.name, field.get( obj ), 1.0f );\n}\n\n\n\nBecomes\n\n\nfor (DocField field : fields) {\n      if (field.dynamicFieldNamePatternMatcher != null && field.get(obj) != null && field.isContainedInMap) {\n            Map<String, Object> mapValue = (HashMap<String, Object>) field.get(obj);\n\n            for (Map.Entry<String, Object> e : mapValue.entrySet()) {\n                  doc.setField(e.getKey(), e.getValue(), 1.0f);\n            }\n      } else {\n            doc.setField(field.name, field.get(obj), 1.0f);\n      }\n}\n\n\n\nThis modification allows the following :\n\npublic class MyBean{\n  @Field(\"brands_*)\n  Map<String, Integer> brands;\n  \n  ...\n}\n\n\nMap<String, String> brands= new HashMap<String, String>();\nbrands.put(\"brands_Nokia\", 1000);\nbrands.put(\"brands_Samsung\", 100);\n\nMyBean myBean = new MyBean();\nmyBean.setBrands(brands);\nsolrServer.addBean(myBean);\n\n\n\nUnfortunately, I have not been able to find the correct process to submit this patch to SolrJ repository for official review. \nWould you so kind as to inform me of the necessary steps to include this patch (or another to the same effect) in future revisions of SolrJ ? "
        },
        {
            "author": "Lars Grote",
            "id": "comment-12782925",
            "date": "2009-11-26T16:14:17+0000",
            "content": "Hello,\nI think the way Avlesh suggested is more intuitive. At least I tried exactly that and wondered why it did not work.\n\nThis is what I think would be the best:\n\n\n// a Field like this:\n@Field(\"*_brands\")\nMap<String,Integer> brands;\n\n\n\nyou should add data like this:\n\nbrands.put(\"Nokia\", 1000);\nbrands.put(\"Samsung\", 100);\n\n\n\nand get the data out like this:\n\nbean.getBrands().get(\"Nokia\");\nbean.getBrands().get(\"Samsung\");\n\n\n\nI used the idear of Jean and enhanced it to work like shown above.\nI attached a patch for this, maybe someone can have a look. It is not well tested.\n\nI have never upload a Patch or something before. so if i'm doing something wrong, or do not follow the rules or anything.\nPlease tell me.\n\nRegards, Lars "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12784121",
            "date": "2009-12-01T08:47:39+0000",
            "content": "I think the way Avlesh suggested is more intuitive. At least I tried exactly that and wondered why it did not work.\n\nWhat i feel is that it is not consistent. The problem is that the same bean canot be added to Solr w/ the same annotation. That is not a very good design "
        },
        {
            "author": "Lars Grote",
            "id": "comment-12784129",
            "date": "2009-12-01T09:23:09+0000",
            "content": "Hello Noble,\nI'm sorry to bother you, but I don't understand the problem.\n\nCan you please explain what you mean by the following:\n\nThe problem is that the same bean canot be added to Solr w/ the same annotation. \n\nMaybe I'm missing something, but at the moment I don't know what. Is it possible that you give a code example of the 'bad' design? So that I can fix the patch.\n\nRegards, Lars "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12784150",
            "date": "2009-12-01T09:59:53+0000",
            "content": "assume that the data that is fetched works as follows\n\n\nbean.getBrands().get(\"Nokia\");\nbean.getBrands().get(\"Samsung\");\n\n\n\nSo if I do a an add w/ the same bean as follows\n\nsolrServer.add(bean);\n\n\nit adds the document with names as \"Nokia\" and \"Samsung\" instead of \"Nokia_Brands\" and \"Samsung_Brands\" . Atleast that is the implementation now. "
        },
        {
            "author": "Lars Grote",
            "id": "comment-12784163",
            "date": "2009-12-01T10:39:20+0000",
            "content": "Thanks for the claification!\nIndeed that would be VERY bad design. But it is not what I intended to do. This would be the behavior if I had copied the loop of Jean. In the Patch the loop has a modification.\n\nHave look at the inner loop. I think this should solve the problem.\nDocumentObjectBinder.java Line 91 to 102\n    for (DocField field : fields) {\n\t\tif (field.dynamicFieldNamePatternMatcher != null\n\t\t\t\t&& field.get(obj) != null && field.isContainedInMap) {\n\t\t\tMap<String, Object> mapValue = (HashMap<String, Object>) field\n\t\t\t\t\t.get(obj);\n\n\t\t\tfor (Map.Entry<String, Object> e : mapValue.entrySet()) {\n\t\t\t\tdoc.setField(field.name.replaceFirst(\"\\\\*\", e.getKey()), e.getValue(), 1.0f);\n\t\t\t}\n\t\t} else {\n\t\t\tdoc.setField(field.name, field.get(obj), 1.0f);\n\t\t}\n\t}\n\n\n\nI think I'll create a patch for the testcase too, then we can see the behavior more clearly. \n\nWhat do you think about the snippet above? Do I miss something?\nRegards ,Lars "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12784183",
            "date": "2009-12-01T11:32:23+0000",
            "content": "Please clarify what the behavior is  going to be?  "
        },
        {
            "author": "Lars Grote",
            "id": "comment-12784188",
            "date": "2009-12-01T11:53:06+0000",
            "content": "First of all, you are right there is someting wrong with the implementation.\n\nThe behavior should be the following\n\nThe Bean should act like schon above. Add Brands, get Brands ... The SolrInputDocument should store the values with the full name i.e. \"nokia_brands\", that's why I'm replacing the \"*\" with the key. The idear was that you can access the value like this:\n\nbean.getBrands('Nokia')\n\n\nor like this:\n\nsolrDocument.getFieldValue(\"brands_Nokia\")\n\n\n\nAnyway, I just started writting a unittest: Create Item -> SolrInputDocument -> SolrDocument -> retriev with getBean ->  SolrInputDocument -> SolrDocument -> retriev with getBean \n\nAnd if I have a Field like this:\n\n@Field(\"supplier_simple_*\")\nMap<String, String> supplier_simple;\n\n\neverything is fine and green. But if I try the same with a Filed like this:\n\n@Field(\"supplier_*\")\nMap<String, List<String>> supplier;\n\n\nI does not work, and at the moment I don't know why. So you are right, I'm having a closer look at this in the next few days, and hopefully I'll come back with a patch \nRegards Lars\n\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12784191",
            "date": "2009-12-01T11:58:39+0000",
            "content": "Solr does not need to add any intelligence here. Lets keep it a dumb and simple system, put the correct field name and get the correct field name. The behavior should be to put brands_Nokia and get back brands_Nokia for a dynamic field brands_*. The same thing is done for non-solrj clients and the solr responses. "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12784192",
            "date": "2009-12-01T12:02:02+0000",
            "content": "put the correct field name and get the correct field name\n+1 "
        },
        {
            "author": "Lars Grote",
            "id": "comment-12784196",
            "date": "2009-12-01T12:19:06+0000",
            "content": "2 to 1 you win!\n\nI'll implement that and update the unittest in the next few days.\nRegards, Lars "
        },
        {
            "author": "Jean Baptiste Pionnier",
            "id": "comment-12784222",
            "date": "2009-12-01T13:17:23+0000",
            "content": "ok, Thank you very much. "
        },
        {
            "author": "Lars Grote",
            "id": "comment-12784449",
            "date": "2009-12-01T21:42:01+0000",
            "content": "Hey Noble,\nI have a question ... again.\n\nThe question is somehow related to the the issue SOLR-1129. \n\nI copied the loop of Jean, and started implementing the unit test and came across a problem.\nThe code below is copied from the existing unittest.\n\nAssume you have two fields annotated like this:\nTestDocumentObjectBinder .java\n@Field(\"supplier_*\")\nMap<String, List<String>> supplier;\n\n@Field(\"supplier_*\")\npublic void setAllSuppliers(String[] allSuppliers){\n     this.allSuppliers = allSuppliers;\n}\n\n\n\nIn my opinion the second field should be ignored when the bean is converted to the SolrImportDocument (it is not ignored in the current implementation). Otherwise you get in trouble when you try to get the bean out and try to put it back in.\nSo I would ignore all fields that are annotated as a dynamic field, an are not of the type Map when converting a Bean to a SolrInputDocument. \nWhen converting a SolrDocument to a Bean, it should be like it is now (not ignored, the field \"allSuppliers\" is injected with all Suppliers).\n\nWhat do you think?\n\nRegards, Lars "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12784608",
            "date": "2009-12-02T03:32:21+0000",
            "content": "The second one is not ignored. In fact this is not a robust OR mapping tool. if the user makes mistakes he is likely to get wrong data. This is intended to be a simple helper utility for users of POJOs.  "
        },
        {
            "author": "Lars Grote",
            "id": "comment-12784758",
            "date": "2009-12-02T10:42:10+0000",
            "content": "So here is the patch. Maybe you can have a look at the testcase and the comment there, line 140. Just to make sure that this is the desired behavior.\nRegards, Lars "
        },
        {
            "author": "Noble Paul",
            "id": "comment-12784784",
            "date": "2009-12-02T11:59:10+0000",
            "content": "committed r886127\nThanks Lars "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12872681",
            "date": "2010-05-27T23:02:09+0000",
            "content": "\nCorrecting Fix Version based on CHANGES.txt, see this thread for more details...\n\nhttp://mail-archives.apache.org/mod_mbox/lucene-dev/201005.mbox/%3Calpine.DEB.1.10.1005251052040.24672@radix.cryptio.net%3E "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013117",
            "date": "2011-03-30T15:45:34+0000",
            "content": "Bulk close for 3.1.0 release "
        }
    ]
}