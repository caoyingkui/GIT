{
    "id": "SOLR-11678",
    "title": "SSL not working if store and key passwords are different",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "security"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.6.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "If I specify different passwords for store and key then Solr fails to read certificate from JKS file with the below error.\n\nExample:\nSOLR_SSL_KEY_STORE_PASSWORD: \"secret1\"\nSOLR_SSL_TRUST_STORE_PASSWORD: \"secret2\"\n\nIf I set the same password for both - it works just fine.\n\nTested with the docker image 6.6.2 available here https://hub.docker.com/_/solr/\n\nI don't know whether this is JAVA nuance or Solr implementation issue but from security point of view there there is no point to have the same password assigned for both the key store and private key bound to specific certificate.\n\nExpected behaviour: It should allow to specify different passwords.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-11-27T13:14:55+0000",
            "content": "solr-master    | Starting Solr 6.6.2\nsolr-master    | 2017-11-22 16:55:14.815 INFO  (main) [   ] o.e.j.s.Server jetty-9.3.14.v20161028\nsolr-master    | 2017-11-22 16:55:15.087 INFO  (main) [   ] o.a.s.s.SolrDispatchFilter  ___      _       Welcome to Apache Solr\u2122 version 6.6.2\nsolr-master    | 2017-11-22 16:55:15.087 INFO  (main) [   ] o.a.s.s.SolrDispatchFilter / _| ___| | _   Starting in standalone mode on port 8983\nsolr-master    | 2017-11-22 16:55:15.087 INFO  (main) [   ] o.a.s.s.SolrDispatchFilter __ \\/ _ \\ | '_|  Install dir: /opt/solr\nsolr-master    | 2017-11-22 16:55:15.109 INFO  (main) [   ] o.a.s.s.SolrDispatchFilter |__/_/|_|    Start time: 2017-11-22T16:55:15.091Z\nsolr-master    | 2017-11-22 16:55:15.132 INFO  (main) [   ] o.a.s.c.SolrResourceLoader Using system property solr.solr.home: /opt/solr/server/solr\nsolr-master    | 2017-11-22 16:55:15.138 INFO  (main) [   ] o.a.s.c.SolrXmlConfig Loading container configuration from /opt/solr/server/solr/solr.xml\nsolr-master    | 2017-11-22 16:55:15.395 INFO  (main) [   ] o.a.s.u.UpdateShardHandler Creating UpdateShardHandler HTTP client with params: socketTimeout=600000&connTimeout=60000&retry=true\nsolr-master    | 2017-11-22 16:55:15.421 INFO  (main) [   ] o.a.s.c.CoreContainer Initializing authorization plugin: solr.RuleBasedAuthorizationPlugin\nsolr-master    | 2017-11-22 16:55:15.438 INFO  (main) [   ] o.a.s.c.CoreContainer Initializing authentication plugin: solr.BasicAuthPlugin\nsolr-master    | 2017-11-22 16:55:15.622 INFO  (main) [   ] o.a.s.c.CorePropertiesLocator Found 1 core definitions underneath /opt/solr/server/solr\nsolr-master    | 2017-11-22 16:55:15.625 INFO  (main) [   ] o.a.s.c.CorePropertiesLocator Cores are: [internal-recruitment]\nsolr-master    | 2017-11-22 16:55:15.631 INFO  (coreLoadExecutor-6-thread-1) [   ] o.a.s.c.TransientSolrCoreCacheDefault Allocating transient cache for 2147483647 transient cores\nsolr-master    | 2017-11-22 16:55:15.674 INFO  (coreLoadExecutor-6-thread-1) [   x:*************] o.a.s.c.SolrResourceLoader [*************] Added 55 libs to classloader, from paths: [/opt/solr/contrib/clustering/lib, /opt/solr/contrib/extraction/lib, /opt/solr/contrib/langid/lib, /opt/solr/contrib/velocity/lib, /opt/solr/dist]\nsolr-master    | java.lang.reflect.InvocationTargetException\nsolr-master    | \tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\nsolr-master    | \tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\nsolr-master    | \tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\nsolr-master    | \tat java.lang.reflect.Method.invoke(Method.java:498)\nsolr-master    | \tat org.eclipse.jetty.start.Main.invokeMain(Main.java:214)\nsolr-master    | \tat org.eclipse.jetty.start.Main.start(Main.java:457)\nsolr-master    | \tat org.eclipse.jetty.start.Main.main(Main.java:75)\nsolr-master    | Caused by: java.io.IOException: Keystore was tampered with, or password was incorrect\nsolr-master    | \tat sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:780)\nsolr-master    | \tat sun.security.provider.JavaKeyStore$JKS.engineLoad(JavaKeyStore.java:56)\nsolr-master    | \tat sun.security.provider.KeyStoreDelegator.engineLoad(KeyStoreDelegator.java:224)\nsolr-master    | \tat sun.security.provider.JavaKeyStore$DualFormatJKS.engineLoad(JavaKeyStore.java:70)\nsolr-master    | \tat java.security.KeyStore.load(KeyStore.java:1445)\nsolr-master    | \tat org.eclipse.jetty.util.security.CertificateUtils.getKeyStore(CertificateUtils.java:52)\nsolr-master    | \tat org.eclipse.jetty.util.ssl.SslContextFactory.loadKeyStore(SslContextFactory.java:971)\nsolr-master    | \tat org.eclipse.jetty.util.ssl.SslContextFactory.load(SslContextFactory.java:250)\nsolr-master    | \tat org.eclipse.jetty.util.ssl.SslContextFactory.doStart(SslContextFactory.java:217)\nsolr-master    | \tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\nsolr-master    | \tat org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\nsolr-master    | \tat org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:113)\nsolr-master    | \tat org.eclipse.jetty.server.SslConnectionFactory.doStart(SslConnectionFactory.java:72)\nsolr-master    | \tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\nsolr-master    | \tat org.eclipse.jetty.util.component.ContainerLifeCycle.start(ContainerLifeCycle.java:131)\nsolr-master    | \tat org.eclipse.jetty.util.component.ContainerLifeCycle.doStart(ContainerLifeCycle.java:113)\nsolr-master    | \tat org.eclipse.jetty.server.AbstractConnector.doStart(AbstractConnector.java:268)\nsolr-master    | \tat org.eclipse.jetty.server.AbstractNetworkConnector.doStart(AbstractNetworkConnector.java:81)\nsolr-master    | \tat org.eclipse.jetty.server.ServerConnector.doStart(ServerConnector.java:235)\nsolr-master    | \tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\nsolr-master    | \tat org.eclipse.jetty.server.Server.doStart(Server.java:401)\nsolr-master    | \tat org.eclipse.jetty.util.component.AbstractLifeCycle.start(AbstractLifeCycle.java:68)\nsolr-master    | \tat org.eclipse.jetty.xml.XmlConfiguration$1.run(XmlConfiguration.java:1516)\nsolr-master    | \tat java.security.AccessController.doPrivileged(Native Method)\nsolr-master    | \tat org.eclipse.jetty.xml.XmlConfiguration.main(XmlConfiguration.java:1441)\nsolr-master    | \t... 7 more\nsolr-master    | Caused by: java.security.UnrecoverableKeyException: Password verification failed\nsolr-master    | \tat sun.security.provider.JavaKeyStore.engineLoad(JavaKeyStore.java:778)\nsolr-master    | \t... 31 more\nsolr-master    |\nsolr-master    | Usage: java -jar start.jar [options] [properties] [configs]\nsolr-master    |        java -jar start.jar --help  # for more information\nsolr-master exited with code 254 ",
            "author": "Constantin Bugneac",
            "id": "comment-16266778"
        },
        {
            "date": "2017-11-27T20:11:15+0000",
            "content": "FYI:  Solr itself doesn't have any SSL-related code.  All of that is in Jetty, which Solr includes and uses.\n\nMy initial guess, which I will fully admit could be wrong, is that either Jetty doesn't support what you're doing, or that we haven't taken your configuration and given it to Jetty correctly.\n\nI can't tell exactly how you have installed/started Solr, and exactly what file you are editing to set the SSL passwords.  Can you provide that information? ",
            "author": "Shawn Heisey",
            "id": "comment-16267398"
        },
        {
            "date": "2017-11-27T23:40:59+0000",
            "content": "With the assumption that your configuration is correct from our point of view, which I still have to verify, I have asked the Jetty mailing list whether they would expect different store passwords to work with the Jetty version included in Solr 6.6.2. ",
            "author": "Shawn Heisey",
            "id": "comment-16267803"
        },
        {
            "date": "2017-11-28T00:57:06+0000",
            "content": "I went on a quest to figure out the difference between key stores and trust stores ... I'm not even sure why you would protect a trust store with a password.  The info I found says that this kind of store is designed for information that's already available to the general public.  If that info is correct, then I have no idea why it would need to be protected from unauthorized access.  Did I find incorrect information? ",
            "author": "Shawn Heisey",
            "id": "comment-16267893"
        },
        {
            "date": "2017-11-28T09:46:11+0000",
            "content": "I'm using official Docker image 6.6.2 without any modifications. I don't edit or add any files inside container and pass configuration parameters via environment variables when spinning up the container. e.g. of docker-compose file which I use to test locally:\n\n\u2014\nversion: '3.3'\nservices:\n  solr-master:\n    image: \"solr:6.6\"\n    container_name: \"solr-master\"\n    environment:\n      SOLR_HOME: \"/opt/solr/server/solr\"\n      SOLR_PORT: \"8983\"\n      SOLR_SSL_KEY_STORE: \"solr/solr-ssl.keystore.jks\"\n      SOLR_SSL_KEY_STORE_PASSWORD: \"password\"\n      SOLR_SSL_KEY_STORE_TYPE: \"JKS\"\n      SOLR_SSL_TRUST_STORE: \"solr/solr-ssl.keystore.jks\"\n      SOLR_SSL_TRUST_STORE_PASSWORD: \"password\"\n      SOLR_SSL_TRUST_STORE_TYPE: \"JKS\"\n      SOLR_SSL_NEED_CLIENT_AUTH: \"false\"\n      SOLR_SSL_WANT_CLIENT_AUTH: \"false\"\n      ENABLE_REMOTE_JMX_OPTS: \"true\"\n      RMI_PORT: \"18983\"\n    ports:\n\n\t\"8983:8983\"\n\t\"18983:18983\"\n    volumes:\n\t./solr-master-volume:/opt/solr/server/solr:rw\n\n\n\nI don't want to store JKS file with server certificate and especially private key unprotected (good practice). Does it make sense to you?\nSecondly, I find misleading to have 2 options like SOLR_SSL_KEY_STORE_PASSWORD and SOLR_SSL_TRUST_STORE_PASSWORD but not being able to use them effectively because they have to match. ",
            "author": "Constantin Bugneac",
            "id": "comment-16268463"
        },
        {
            "date": "2017-11-28T15:19:05+0000",
            "content": "I don't want to store JKS file with server certificate and especially private key unprotected (good practice). Does it make sense to you?\n\nIt does make sense to protect the key store, since that has private information in it, but the trust store doesn't have anything private, so it doesn't seem necessary to encrypt it.\n\n\nSOLR_SSL_KEY_STORE: \"solr/solr-ssl.keystore.jks\"\nSOLR_SSL_KEY_STORE_PASSWORD: \"password\"\nSOLR_SSL_KEY_STORE_TYPE: \"JKS\"\nSOLR_SSL_TRUST_STORE: \"solr/solr-ssl.keystore.jks\"\nSOLR_SSL_TRUST_STORE_PASSWORD: \"password\"\n\nThe info I found says that each item in one store file can have its own password ... but I wonder if maybe Jetty isn't aware of that fact, and ties passwords to filenames, rather than keeping them separate by the store.  You have both of the stores set to the same filename ... so if Jetty is using the filename to save the password internally, then Jetty would only have one password after it has processed its configuration, so one of the stores would fail to load. ",
            "author": "Shawn Heisey",
            "id": "comment-16268889"
        },
        {
            "date": "2017-11-30T01:14:17+0000",
            "content": "Notes from the jetty mailing list:\n\n\nThe exception reported in the SOLR issue shows that the exception is thrown while loading the keystore, not the truststore. So either they have the wrong password, or they also have a keymanager password that they did not specify in the Jetty configuration.\n\nThey did say that Jetty supports different passwords for the key store and the trust store, and that it looks like the way Solr's script configures Jetty is correct. ",
            "author": "Shawn Heisey",
            "id": "comment-16271952"
        },
        {
            "date": "2017-11-30T21:03:39+0000",
            "content": "Related to the note from the jetty list about a keymanager password, I checked how Solr configures Jetty for SSL, and there is no way provided to set that password.\n\nSome info I found says that some people think the keymanager password is not the way things should be done\n\nhttps://stackoverflow.com/a/40941126\nhttps://stackoverflow.com/a/10848925 ",
            "author": "Shawn Heisey",
            "id": "comment-16273418"
        }
    ]
}