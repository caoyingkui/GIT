{
    "id": "SOLR-5212",
    "title": "bad qs and mm when using edismax for field with CJKBigramFilter",
    "details": {
        "affect_versions": "4.4",
        "status": "Resolved",
        "fix_versions": [],
        "components": [
            "search"
        ],
        "type": "Bug",
        "priority": "Critical",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "When I have a field using CJKBigramFilter, a mysterious qs value (or what i take as qs, because it shows as ~x after the first DisjunctionMaxQuery) appears in my parsed query.  The qs value that appears is the minimum of:\n  mm setting, number of bigrams in query string.\n\nThis makes no sense, from a retrieval standpoint.  It could possibly make sense to adjust the ps value, but certainly not the qs.  Moreover, changing the mm setting via an HTTP param can affect the qs, but sending in a qs parameter has no effect on the qs in the parsed query.\n\nIf I use a field in qf that has only bigrams, then qs is set to MIN(original mm setting, number of bigrams in query string)\n\narg sent in:    q=\n{!qf=cjk_bi_search pf= pf2= pf3=}\u65e7\u5c0f\u8bf4\n   \u65e7\u5c0f\u8bf4   is 3 chars, so 2 bigrams\n\ndebugQuery\n\t<str name=\"rawquerystring\">{!qf=cjk_bi_search pf= pf2= pf3=}\n\u65e7\u5c0f\u8bf4</str>\n\t<str name=\"querystring\">\n{!qf=cjk_bi_search pf= pf2= pf3=}\n\u65e7\u5c0f\u8bf4</str>\n\t<str name=\"parsedquery\">(+DisjunctionMaxQuery((((cjk_bi_search:\u65e7\u5c0f cjk_bi_search:\u5c0f\u8bf4)~2))~0.01) ())/no_coord</str>\n\t<str name=\"parsedquery_toString\">+(((cjk_bi_search:\u65e7\u5c0f cjk_bi_search:\u5c0f\u8bf4)~2))~0.01 ()</str>\n\n\nIf I use a field in qf that has only unigrams, then qs is set to MIN(original mm setting, number of unigrams in query string)\n\narg sent in:    q=\n{!qf=cjk_uni_search pf= pf2= pf3=}\u65e7\u5c0f\u8bf4\n   \u65e7\u5c0f\u8bf4   is 3 chars, so 3 bigrams\n\ndebugQuery\n\t<str name=\"rawquerystring\">{!qf=cjk_uni_search pf= pf2= pf3=}\n\u65e7\u5c0f\u8bf4</str>\n\t<str name=\"querystring\">\n{!qf=cjk_uni_search pf= pf2= pf3=}\n\u65e7\u5c0f\u8bf4</str>\n\t<str name=\"parsedquery\">(+DisjunctionMaxQuery((((cjk_uni_search:\u65e7 cjk_uni_search:\u5c0f cjk_uni_search:\u8bf4)~3))~0.01) ())/no_coord</str>\n\t<str name=\"parsedquery_toString\">+(((cjk_uni_search:\u65e7 cjk_uni_search:\u5c0f cjk_uni_search:\u8bf4)~3))~0.01 ()</str>\n\n\nIf I use a field in qf that has both bigrams and unigrams, then qs is set to MIN(original mm setting, number of bigrams + unigrams in query string). \n\narg sent in:    q=\n{!qf=cjk_both_search pf= pf2= pf3=}\n\u65e7\u5c0f\u8bf4\n   \u65e7\u5c0f\u8bf4   is 3 chars, so 3 unigrams + 2 bigrams = 5\n\ndebugQuery\n\t<str name=\"rawquerystring\">\n{!qf=cjk_both_pub_search pf= pf2= pf3=}\u65e7\u5c0f\u8bf4</str>\n\t<str name=\"querystring\">{!qf=cjk_both_pub_search pf= pf2= pf3=}\n\u65e7\u5c0f\u8bf4</str>\n\t<str name=\"parsedquery\">(+DisjunctionMaxQuery((((cjk_both_search:\u65e7 cjk_both_search:\u65e7\u5c0f cjk_both_search:\u5c0f cjk_both_search:\u5c0f\u8bf4 cjk_both_search:\u8bf4)~5))~0.01) ())/no_coord</str>\n\t<str name=\"parsedquery_toString\">+(((cjk_both_search:\u65e7 cjk_both_search:\u65e7\u5c0f cjk_both_search:\u5c0f cjk_both_search:\u5c0f\u8bf4 cjk_both_search:\u8bf4)~5))~0.01 ()</str>\n\n\n\n\nI am running Solr 4.4.  I have fields defined like so:\n\n    <fieldtype name=\"text_cjk_both\" class=\"solr.TextField\" positionIncrementGap=\"10000\" autoGeneratePhraseQueries=\"false\">\n     <analyzer>\n        <tokenizer class=\"solr.ICUTokenizerFactory\" />\n     \t  <filter class=\"solr.CJKWidthFilterFactory\"/>\n        <filter class=\"solr.ICUTransformFilterFactory\" id=\"Traditional-Simplified\"/>\n        <filter class=\"solr.ICUTransformFilterFactory\" id=\"Katakana-Hiragana\"/>\n        <filter class=\"solr.ICUFoldingFilterFactory\"/>\n        <filter class=\"solr.CJKBigramFilterFactory\" han=\"true\" hiragana=\"true\" katakana=\"true\" hangul=\"true\" outputUnigrams=\"true\" />\n      </analyzer>\n    </fieldtype>\n    <fieldtype name=\"text_cjk_bi\" class=\"solr.TextField\" positionIncrementGap=\"10000\" autoGeneratePhraseQueries=\"false\">\n     <analyzer>\n        <tokenizer class=\"solr.ICUTokenizerFactory\" />\n     \t  <filter class=\"solr.CJKWidthFilterFactory\"/>\n        <filter class=\"solr.ICUTransformFilterFactory\" id=\"Traditional-Simplified\"/>\n        <filter class=\"solr.ICUTransformFilterFactory\" id=\"Katakana-Hiragana\"/>\n        <filter class=\"solr.ICUFoldingFilterFactory\"/>\n        <filter class=\"solr.CJKBigramFilterFactory\" han=\"true\" hiragana=\"true\" katakana=\"true\" hangul=\"true\" outputUnigrams=\"false\" />\n      </analyzer>\n    </fieldtype>\n    <fieldtype name=\"text_cjk_uni\" class=\"solr.TextField\" positionIncrementGap=\"10000\" autoGeneratePhraseQueries=\"false\">\n     <analyzer>\n        <tokenizer class=\"solr.ICUTokenizerFactory\" />\n     \t  <filter class=\"solr.CJKWidthFilterFactory\"/>\n        <filter class=\"solr.ICUTransformFilterFactory\" id=\"Traditional-Simplified\"/>\n        <filter class=\"solr.ICUTransformFilterFactory\" id=\"Katakana-Hiragana\"/>\n        <filter class=\"solr.ICUFoldingFilterFactory\"/>\n      </analyzer>\n    </fieldtype>\n\n\nThe request handler uses edismax:\n\n  <requestHandler name=\"search\" class=\"solr.SearchHandler\" default=\"true\">\n    <lst name=\"defaults\">\n      <str name=\"defType\">edismax</str>\n      <str name=\"q.alt\">:</str>\n      <str name=\"mm\">6<-1 6<90%</str>\n      <int name=\"qs\">1</int>\n      <int name=\"ps\">0</int>",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Hoss Man",
            "id": "comment-13757282",
            "date": "2013-09-04T00:11:15+0000",
            "content": "Naomi: if you questions/confusion/problems using Solr, please ask on the solr-user mailing list and only file Bugs once there is confirmation of a problem in solr itself.\n\nIn particular your initial report is confusing for a few reasons...\n\n1) you mentioned the value of \"qs\" is being set based on the number bigrams \u2013 however there isn't anything in your comments to suggest anything even remotely related to the \"qs\" param is coming into play here.  \"qs\" specifies the query slop property of any phrase queries created due to explicit phrase queries in the input query string \u2013 nohting in our example input or example debug output suggests any PhraseQueries are ever getting built.\n\n2) the number you seem to be commenting on in each case is the minNrShouldMatch on each of hte top level BooleanQueries produced from your input \u2013 since your configured mm is 6<-1 6<90% the smallest minNrShouldMatch value that will every be programatically assigned is \"6\", but all of your example queries have less then 6 clauses, so instead the minNrShouldMatch used in each case is the total number of query clauses \u2013 ie: in each case, wherey you have N \"SHOULD\" clauses in the final query, all N clauses must match.\n\n\u2014\n\nPlease start a thread on the solr-user mailing list, providing all of the details you included in this issue, along with some specifics about what you expect/desire to have happen and how the actual behaior you are observing differs from those expecations. "
        }
    ]
}