{
    "id": "LUCENE-5864",
    "title": "Split BytesRef into BytesRef and BytesRefBuilder",
    "details": {
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed",
        "components": [],
        "affect_versions": "None",
        "status": "Resolved",
        "fix_versions": [
            "4.10",
            "6.0"
        ]
    },
    "description": "Follow-up of LUCENE-5836.\n\nThe fact that BytesRef (and CharsRef, IntsRef, LongsRef) can be used as either pointers to a section of a byte[] or as buffers raises issues. The idea would be to keep BytesRef but remove all the buffer methods like copyBytes, grow, etc. and add a new class BytesRefBuilder that wraps a byte[] and a length (but no offset), has grow/copyBytes/copyChars methods and the ability to build BytesRef instances.",
    "attachments": {
        "LUCENE-5864.patch": "https://issues.apache.org/jira/secure/attachment/12658874/LUCENE-5864.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14080668",
            "author": "Adrien Grand",
            "content": "Here is a patch. It is quite big given how BytesRef is used across all our APIs but I tried to make it minimal: I just splitted BytesRef into BytesRef and BytesRefBuilder (same for CharsRef and IntsRef), moved the buffer methods to the builder classes and then fixed the compilation errors. Nothing more. Lucene/Solr tests and precommit are happy. ",
            "date": "2014-07-31T09:04:50+0000"
        },
        {
            "id": "comment-14080677",
            "author": "Uwe Schindler",
            "content": "+1 for splitting up. I have not yet looked at the patch, but seeing and documenting BytesRef just as a pointer with offset and length, but also supplying methods that can change the pointer and contents looks wrong. BytesRef is just a slice-pointer, nothing more - and it should behave like one. ",
            "date": "2014-07-31T09:26:59+0000"
        },
        {
            "id": "comment-14080879",
            "author": "Robert Muir",
            "content": "Thanks Adrien, this looks like a good step. \n\nA few questions on the API:\nI think its confusing e.g. CharsRefBuilder has public char[] and length, but keeps a ref around uninitialized, until you call get().\n\nCan we remove the length and char[]?\n\nBasically I think it would be better if it only had a CharsRef, initialized of course to EMPTY in the ctor. grow() is the only thing changing the underlying char[], so it would basically just do ref.chars = grow(ref.chars...)). \n\nWe could add a method length() that just then forwards to ref.length()\n\nI think get() versus build() is a little confusing. I think with the above approach, the whole builder only tracks an internal ref state, so we would only need get(), and if someone wants a deep copy, they should do it explicitly (this is only rarely done). I feel also buildUTF8String() is only rarely done and not worth having the method when you can do get().utf8ToString().  i wish there was a better name for the get() method. get() to me is what something like AtomicXXX uses, but toXXX() like StringBuilder would also be confusing with the current code (although i would greatly prefer if this thing didnt allow access to its internal stuff and always created a new 'thing' so it could just be consistent with that API and hence easier to use).\n\nWhy are equals() and hashcode() throwing UOE? Because it not needed by anything at the moment? Maybe down the road, these builders should be \"friendly\" and more consistent with StringBuilder: means e.g. they support equals/hashcode/comparable, and charsrefbuilder supports Appendable and CharSequence and so on.  We dont need to do that here though, it can be a followup. ",
            "date": "2014-07-31T13:40:58+0000"
        },
        {
            "id": "comment-14080928",
            "author": "Adrien Grand",
            "content": "Good points about some confusing parts, I will try to fix them.\n\nI agree get vs. build can be confusing but getting rid of get could be a controversial change, I'd rather discuss it as a follow-up.\n\nWhy are equals() and hashcode() throwing UOE?\n\nThis has been helpful while I was creating this patch to find places where I had forgotten to add a call to .get() (otherwise the comparison between a BytesRefBuilder and a BytesRef would always return false). I agree that consistency with StringBuilder would be nice, although I find it quite error-prone as well to have things like a hashcode method on a buffer (they shouldn't be used in hash tables). I can implement proper equals/hashCode impls instead if you want, but I was thinking that having these methods throwing exceptions could be helpful to users upgrading their applications in the same way that it has been helpful to me to catch errors while building this patch. ",
            "date": "2014-07-31T14:19:08+0000"
        },
        {
            "id": "comment-14081012",
            "author": "Dawid Weiss",
            "content": "> I agree that consistency with StringBuilder would be nice, although I find it quite error-prone as well to have things like a hashcode method on a buffer (they shouldn't be used in hash tables).\n\nI used the same pattern in my own (unrelated, but similar) code, actually... ",
            "date": "2014-07-31T15:34:45+0000"
        },
        {
            "id": "comment-14081343",
            "author": "Adrien Grand",
            "content": "Here is a new patch, I tried to address Robert's feedback:\n\n\tmethods modify the ref directly\n\tno more buildUTF8String\n\n ",
            "date": "2014-07-31T19:44:53+0000"
        },
        {
            "id": "comment-14081370",
            "author": "Robert Muir",
            "content": "This looks really nice. It should be easy to add CharSequence interface to the CharsRefBuilder in a followup (just needs the subsequence method..)\n\nI can review later and look for actual bugs... but just going thru some of it, this makes a lot of code read easier. ",
            "date": "2014-07-31T20:07:13+0000"
        },
        {
            "id": "comment-14081991",
            "author": "Adrien Grand",
            "content": "Removed a println that I had added for debugging. ",
            "date": "2014-08-01T06:42:20+0000"
        },
        {
            "id": "comment-14094115",
            "author": "ASF subversion and git services",
            "content": "Commit 1617493 from Adrien Grand in branch 'dev/trunk'\n[ https://svn.apache.org/r1617493 ]\n\nLUCENE-5864: Split BytesRef into BytesRef and BytesRefBuilder. ",
            "date": "2014-08-12T14:47:10+0000"
        },
        {
            "id": "comment-14095320",
            "author": "ASF subversion and git services",
            "content": "Commit 1617695 from Adrien Grand in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1617695 ]\n\nLUCENE-5864: Split BytesRef into BytesRef and BytesRefBuilder. ",
            "date": "2014-08-13T09:37:54+0000"
        },
        {
            "id": "comment-14095522",
            "author": "Yonik Seeley",
            "content": "Seems like this should not go into 4x given that it changes a number of APIs including Solr's FieldType and ValueSource?\n ",
            "date": "2014-08-13T14:21:55+0000"
        },
        {
            "id": "comment-14095559",
            "author": "Adrien Grand",
            "content": "I think it's important that this change is in 4.x to get rid of this long standing issue that BytesRef should not be both a pointer to an existing byte[] and a buffer. However, I can document the migration and/or fix the public API breaks in some classes in 4.X. Are there other classes that I should look at? ",
            "date": "2014-08-13T14:57:44+0000"
        },
        {
            "id": "comment-14095565",
            "author": "Yonik Seeley",
            "content": "BytesRefBuilder can be added for 4x, but BytesRef itself should not change for 4x, and public APIs that take BytesRef shouldn't be changed either.\nThis is why we have a distinct 4x vs 5 branch. ",
            "date": "2014-08-13T15:02:24+0000"
        },
        {
            "id": "comment-14096775",
            "author": "ASF subversion and git services",
            "content": "Commit 1617902 from Adrien Grand in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1617902 ]\n\nLUCENE-5864: Backward compatibility. ",
            "date": "2014-08-14T09:16:16+0000"
        },
        {
            "id": "comment-14096921",
            "author": "Yonik Seeley",
            "content": "Thanks Adrien! ",
            "date": "2014-08-14T12:44:25+0000"
        },
        {
            "id": "comment-14097099",
            "author": "Adrien Grand",
            "content": "You're welcome. ",
            "date": "2014-08-14T15:47:19+0000"
        }
    ]
}