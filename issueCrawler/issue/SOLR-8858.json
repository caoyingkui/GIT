{
    "id": "SOLR-8858",
    "title": "SolrIndexSearcher#doc() Completely Ignores Field Filters Unless Lazy Field Loading is Enabled",
    "details": {
        "components": [],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "6.2",
            "7.0"
        ],
        "affect_versions": "4.6,                                            4.10,                                            5.5",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "If enableLazyFieldLoading=false, a perfectly valid fields filter will be ignored, and we'll create a DocumentStoredFieldVisitor without it.",
    "attachments": {
        "SOLR-8858.patch": "https://issues.apache.org/jira/secure/attachment/12816587/SOLR-8858.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-03-16T18:21:37+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user maedhroz opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/21\n\n    SOLR-8858 SolrIndexSearcher#doc() Completely Ignores Field Filters Unless Lazy Field Loading is Enabled\n\n    Instead of just discarding fields if lazy loading is not enabled, SolrIndexSearcher now passes them through to IndexReader. This means IndexReader creates a DocumentStoredFieldVisitor that we can use to later determine which fields need to be read.\n\n    https://issues.apache.org/jira/browse/SOLR-8858\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/maedhroz/lucene-solr SOLR-8858\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/21.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #21\n\n\ncommit fa8075c7861dbc331588dfb5c9e28576e2eb31f2\nAuthor: Caleb Rackliffe <caleb.rackliffe@gmail.com>\nDate:   2016-03-16T18:15:20Z\n\n    SOLR-8858 SolrIndexSearcher#doc() Completely Ignores Field Filters Unless Lazy Field Loading is Enabled\n\n    Instead of just discarding fields if lazy loading is not enabled, SolrIndexSearcher now passes them through to IndexReader. This means IndexReader creates a DocumentStoredFieldVisitor that we can use to later determine which fields need to be read.\n\n ",
            "id": "comment-15197866"
        },
        {
            "date": "2016-03-16T18:23:20+0000",
            "author": "Caleb Rackliffe",
            "content": "I've posted a PR that fixes this in what I'm hoping is a reasonable way. I imagine the impact will mostly fall on custom StoredFieldsReader implementations. ",
            "id": "comment-15197870"
        },
        {
            "date": "2016-05-11T07:47:57+0000",
            "author": "Stephan Lagraulet",
            "content": "Can you remove this issue from version 5.5.1 as this version is packaged without a fix for this issue? ",
            "id": "comment-15279730"
        },
        {
            "date": "2016-05-12T14:04:59+0000",
            "author": "Mikhail Khludnev",
            "content": "I skim through the patch, didn't find a test. It's hard to understand what does it changes .  ",
            "id": "comment-15281537"
        },
        {
            "date": "2016-05-12T14:08:48+0000",
            "author": "Mikhail Khludnev",
            "content": "and also, it seems like a feature to me. In my understanding the difference between two and only one field is neglectable. and it's enabled only when you really know why do you need it.   ",
            "id": "comment-15281538"
        },
        {
            "date": "2016-05-12T21:34:48+0000",
            "author": "Caleb Rackliffe",
            "content": "We've subclassed StoredFieldsReader, and we rely on the StoredFieldVisitor passed to visitDocument() consistently indicating which fields have been requested, even if lazy field loading is disabled. The change to SolrIndexSearcher just makes sure that field information, if it's available, always makes it into the StoredFieldVisitor. ",
            "id": "comment-15282091"
        },
        {
            "date": "2016-06-28T12:23:08+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "There are many tests that fail after applying this patch on master. I don't have the time to dig in to this right now. Caleb, if you can fix the failures, I'd be happy to commit this patch. ",
            "id": "comment-15352910"
        },
        {
            "date": "2016-06-28T21:55:57+0000",
            "author": "Caleb Rackliffe",
            "content": "After applying myself on master, the doc method looks like this:\n\n\n  @Override\n  public Document doc(int i, Set<String> fields) throws IOException {\n    Document d;\n    if (documentCache != null) {\n      d = documentCache.get(i);\n      if (d != null) return d;\n    }\n\n    final DirectoryReader reader = getIndexReader();\n    if (fields != null) {\n      if (enableLazyFieldLoading) {\n        final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n        reader.document(i, visitor);\n        d = visitor.doc;\n      } else {\n        d = reader.document(i, fields);\n      }\n    } else {\n      d = reader.document(i);\n    }\n\n    if (documentCache != null) {\n      documentCache.put(i, d);\n    }\n\n    return d;\n  }\n\n\n\nRunning the tests (i.e. ant test -Dtests.slow=false), I get:\n\n\n[junit4] Tests with failures [seed: BB0B954A8C44DF29]:\n   [junit4]   - org.apache.solr.response.transform.TestSubQueryTransformer.testTwoSubQueriesAndByNumberWithTwoFields\n   [junit4]   - org.apache.solr.response.transform.TestSubQueryTransformer.testJustJohnJavabin\n   [junit4]   - org.apache.solr.response.transform.TestSubQueryTransformer.testJustJohnJson\n   [junit4]   - org.apache.solr.response.transform.TestSubQueryTransformer.testJohnOrNancySingleField\n   [junit4]   - org.apache.solr.response.transform.TestSubQueryTransformer.testThreeLevel\n   [junit4]   - org.apache.solr.cloud.DistribJoinFromCollectionTest.testScore\n   [junit4]   - org.apache.solr.cloud.DistribJoinFromCollectionTest.testNoScore\n   [junit4]   - org.apache.solr.cloud.TestCloudDeleteByQuery (suite)\n   [junit4]\n   [junit4]\n   [junit4] JVM J0:     0.58 ..   415.88 =   415.29s\n   [junit4] JVM J1:     0.58 ..   415.81 =   415.23s\n   [junit4] JVM J2:     0.58 ..   415.88 =   415.30s\n   [junit4] JVM J3:     0.58 ..   415.72 =   415.13s\n   [junit4] Execution time total: 6 minutes 56 seconds\n   [junit4] Tests summary: 616 suites (10 ignored), 2584 tests, 1 suite-level error, 4 errors, 3 failures, 279 ignored (258 assumptions)\n\n\n\nI'm going to dig into these a bit and see if using the fields set broke some assumptions somewhere... ",
            "id": "comment-15353771"
        },
        {
            "date": "2016-06-29T01:35:06+0000",
            "author": "Caleb Rackliffe",
            "content": "Shalin Shekhar Mangar The failures I've seen thus far all seem to be around how DocumentStoredFieldVisitor, SolrIndexSearcher, and SubQueryAugmenter work together. I'm only able to get the tests in TestSubQueryTransformer to pass if I prepend the fl parameters with *. If there is an actual field list, for instance...\n\nfl=name_s_dv,depts:[subquery]\n\n\n...a DocumentStoredFieldVisitor that will only retrieve name_s_dv is created, and the result documents seem to be missing other necessary fields. ",
            "id": "comment-15354093"
        },
        {
            "date": "2016-06-29T04:25:10+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user maedhroz closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/21 ",
            "id": "comment-15354511"
        },
        {
            "date": "2016-06-29T06:59:05+0000",
            "author": "Caleb Rackliffe",
            "content": "I've been able to resolve all the failures in TestSubQueryTransformer by simply making sure that all the fields referenced with the rows.x syntax in the sub-queries are present in the fl list. I think that's actually a reasonable resolution.\n\nTestCloudDeleteByQuery and DistribJoinFromCollectionTest have been more elusive, but they smell like they're both being caused by shard queries that need to retrieve fields from the original fl, but can't with my patch in place, because only id and score are passed explicitly to SolrIndexSearcher (whereas they would have retrieved all fields before, given lazy loading isn't enabled). ",
            "id": "comment-15354692"
        },
        {
            "date": "2016-06-29T07:02:25+0000",
            "author": "Caleb Rackliffe",
            "content": "Work in progress is at https://github.com/maedhroz/lucene-solr/tree/SOLR-8858-trunk ",
            "id": "comment-15354696"
        },
        {
            "date": "2016-06-29T19:36:01+0000",
            "author": "ASF GitHub Bot",
            "content": "GitHub user maedhroz opened a pull request:\n\n    https://github.com/apache/lucene-solr/pull/47\n\n    SOLR-8858 SolrIndexSearcher#doc() Completely Ignores Field Filters Unless Lazy Field Loading is Enabled\n\n    https://issues.apache.org/jira/browse/SOLR-8858\n\nYou can merge this pull request into a Git repository by running:\n\n    $ git pull https://github.com/maedhroz/lucene-solr SOLR-8858-trunk\n\nAlternatively you can review and apply these changes as the patch at:\n\n    https://github.com/apache/lucene-solr/pull/47.patch\n\nTo close this pull request, make a commit to your master/trunk branch\nwith (at least) the following in the commit message:\n\n    This closes #47\n\n\n\n ",
            "id": "comment-15355721"
        },
        {
            "date": "2016-06-29T21:42:15+0000",
            "author": "Caleb Rackliffe",
            "content": "I've posted a new PR against master with some comments. I'm seeing zero failures in an ant test -Dtests.slow=false run, so I think things are in a reviewable state. ",
            "id": "comment-15355848"
        },
        {
            "date": "2016-07-01T08:07:06+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user shalinmangar commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/47#discussion_r69263675\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java \u2014\n    @@ -910,8 +910,12 @@ protected void createMainQuery(ResponseBuilder rb) \n{\n             additionalAdded = addFL(additionalFL, \"score\", additionalAdded);\n           }\n         } else {\n\n\t// reset so that only unique key is requested in shard requests\n\tsreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      if (rb.req.getSearcher().enableLazyFieldLoading) \n{\n    +        // reset so that only unique key is requested in shard requests\n    +        sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      }\n else {\n    +        sreq.params.set(CommonParams.FL, \"*\");\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    I don't understand this change. Why should QueryComponent know about whether lazy loading is enabled or not? ",
            "id": "comment-15358618"
        },
        {
            "date": "2016-07-01T15:30:11+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user shalinmangar commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/47#discussion_r69316868\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java \u2014\n    @@ -910,8 +910,12 @@ protected void createMainQuery(ResponseBuilder rb) \n{\n             additionalAdded = addFL(additionalFL, \"score\", additionalAdded);\n           }\n         } else {\n\n\t// reset so that only unique key is requested in shard requests\n\tsreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      if (rb.req.getSearcher().enableLazyFieldLoading) \n{\n    +        // reset so that only unique key is requested in shard requests\n    +        sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      }\n else {\n    +        sreq.params.set(CommonParams.FL, \"*\");\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    I can see why this change was made but my point is that there is probably an assumption in the join queries or in the test (I haven't looked) which make it fail without this change. ",
            "id": "comment-15359129"
        },
        {
            "date": "2016-07-01T22:39:19+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user maedhroz commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/47#discussion_r69363380\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java \u2014\n    @@ -910,8 +910,12 @@ protected void createMainQuery(ResponseBuilder rb) \n{\n             additionalAdded = addFL(additionalFL, \"score\", additionalAdded);\n           }\n         } else {\n\n\t// reset so that only unique key is requested in shard requests\n\tsreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      if (rb.req.getSearcher().enableLazyFieldLoading) \n{\n    +        // reset so that only unique key is requested in shard requests\n    +        sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      }\n else {\n    +        sreq.params.set(CommonParams.FL, \"*\");\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    I agree that what I have here is unsatisfying. I've been debugging through the fields retrieval phase of the join in `DistribJoinFromCollectionTest`, so hopefully that turns up something... ",
            "id": "comment-15359770"
        },
        {
            "date": "2016-07-02T05:37:17+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user maedhroz commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/47#discussion_r69373171\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java \u2014\n    @@ -910,8 +910,12 @@ protected void createMainQuery(ResponseBuilder rb) \n{\n             additionalAdded = addFL(additionalFL, \"score\", additionalAdded);\n           }\n         } else {\n\n\t// reset so that only unique key is requested in shard requests\n\tsreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      if (rb.req.getSearcher().enableLazyFieldLoading) \n{\n    +        // reset so that only unique key is requested in shard requests\n    +        sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      }\n else {\n    +        sreq.params.set(CommonParams.FL, \"*\");\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    In the current master (without my patch), the query stage shard request for join in `DistribJoinFromCollectionTest` will pull the document from `SolrIndexSearcher#doc()' with only `id` in the specified `fields`. It does not use lazy field loading, and so uses a `DocumentStoredFieldVisitor` with no `fields` specified to load the whole document, and then put it in the `documentCache`. If we used lazy field loading, the cached document would still have some representation of all the fields, albeit lazy ones.\n\n    With only the `SolrIndexSearcher` piece of my patch in place, the `TestSubQueryTransformer` failures are easy to avoidl, and I was able to fix them by simply reading the JavaDoc. (See the [comment](https://github.com/apache/lucene-solr/pull/47/files/4f9e67c63ce5130795df647ef5e86ae970601cb6#r69015716) below.) `DistribJoinFromCollectionTest` (and `TestCloudDeleteByQuery`) fails, because when, as I've laid out above, `doc()` actually respects the `fields` list during the main query phase, it caches a document that only contains those fields. When the actual field retrieval stage of the query hits the shard, `doc()` spits out a document that doesn't have the all fields in `fl`. (I'm not sure `DistribJoinFromCollectionTest` or `TestCloudDeleteByQuery` are doing something wrong, and they actually pass if they enable lazy field loading.)\n\n    The reason I raised this issue in the first place is that I have a custom `StoredFieldsVisitor` that relies on `DocumentStoredFieldVisitor` providing the fields requested by the query. The unfortunate thing is that I think the `QueryComponent` bit of this PR isn't actually compatible with that, and I think that will need to be reverted no matter what. The only other ways I can imagine fixing this are:\n\n    a.) Always cache an entire document, regardless of what we return from `doc()`. (Seems like it adds overhead.)\n    b.) Skip caching under certain conditions, like if the `fields` list only contains the unique key (or key and score). (Seems very reliant on `QueryComponent` still.)\n    c.) Always use lazy loading. (Seems invasive, but most of the examples I see use it anyway.)\n\n    I don't love any of these options, but I'd be interested to get more informed opinions. ",
            "id": "comment-15360002"
        },
        {
            "date": "2016-07-04T07:46:30+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user shalinmangar commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/47#discussion_r69419263\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/handler/component/QueryComponent.java \u2014\n    @@ -910,8 +910,12 @@ protected void createMainQuery(ResponseBuilder rb) \n{\n             additionalAdded = addFL(additionalFL, \"score\", additionalAdded);\n           }\n         } else {\n\n\t// reset so that only unique key is requested in shard requests\n\tsreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      if (rb.req.getSearcher().enableLazyFieldLoading) \n{\n    +        // reset so that only unique key is requested in shard requests\n    +        sreq.params.set(CommonParams.FL, rb.req.getSchema().getUniqueKeyField().getName());\n    +      }\n else {\n    +        sreq.params.set(CommonParams.FL, \"*\");\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Thanks for investigating and the detailed note.\n\n    I don't think DistribJoinFromCollectionTest or TestCloudDeleteByQuery are doing anything wrong. The difference, as you said, is that your patch changes `doc()` to actually respect the fields list and when lazy loading is disabled, proceeds to cache an incomplete document returned by Lucene. So this patch changes Solr from always caching either complete documents (when lazy loading is disabled) or lazy documents (when lazy loading is enabled) to caching potentially incomplete documents which have no idea about the other (non-requested) fields. So if we want to go back to the old behavior then option 'a' is the way to go when lazy loading is disabled. ",
            "id": "comment-15360970"
        },
        {
            "date": "2016-07-05T05:57:27+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user maedhroz commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/47#discussion_r69510618\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java \u2014\n    @@ -766,16 +766,29 @@ public Document doc(int i, Set<String> fields) throws IOException {\n         }\n\n         final DirectoryReader reader = getIndexReader();\n\n\tif (!enableLazyFieldLoading || fields == null) {\n\td = reader.document;\n    +    boolean containsAllFields = true;\n    +    \n    +    if (fields != null) \nUnknown macro: {    +      if (enableLazyFieldLoading) {\n    +        final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n    +        reader.document(i, visitor);\n    +        d = visitor.doc;\n    +      } else {\n    +        d = reader.document(i, fields);\n    +        containsAllFields = false;\n    +      }         } \n else \n{\n    -      final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n    -      reader.document(i, visitor);\n    -      d = visitor.doc;\n    +      d = reader.document(i);\n         }\n\n\n\n         if (documentCache != null) {\n\n\tdocumentCache.put(i, d);\n    +      // Only cache the already retrieved document if it is complete... \n    +      if (containsAllFields) \n{\n    +        documentCache.put(i, d);\n    +      }\n else \n{\n    +        // ...and retrieve a complete document for caching otherwise.\n    +        documentCache.put(i, reader.document(i));\n    +      }\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    @shalinmangar I've made a pass at restoring the previous caching behavior (with some comments around the rationale). It feels like we might have a complete solution at this point. ",
            "id": "comment-15362056"
        },
        {
            "date": "2016-07-06T03:15:15+0000",
            "author": "David Smiley",
            "content": "a.) Always cache an entire document, regardless of what we return from `doc()`. (Seems like it adds overhead.)\n\nI think caching the full doc is expected and what I thought it did.  There isn't necessarily overhead; maybe some other component (e.g. highlighting) wants a field even though 'fl' doesn't refer to it.  \"b\" seems fine, too, not sure, but I think \"c\" (always lazy-load) is bad. ",
            "id": "comment-15363681"
        },
        {
            "date": "2016-07-06T14:31:18+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "I think caching the full doc is expected and what I thought it did.\n\nThat is only when lazy loading is disabled. If lazy loading is enabled then a lazy document is cached which may have only a few fields' data and the rest are loaded on access.\n\n@shalinmangar I've made a pass at restoring the previous caching behavior (with some comments around the rationale). It feels like we might have a complete solution at this point.\n\nI am not very happy with this solution because from a Solr user's perspective, this feature adds no benefit but causes stored fields to be read twice for an uncached read? I must also admit that I do not have a good suggestion on how to avoid that. ",
            "id": "comment-15364383"
        },
        {
            "date": "2016-07-06T16:21:39+0000",
            "author": "David Smiley",
            "content": "That is only when lazy loading is disabled. If lazy loading is enabled then a lazy document is cached which may have only a few fields' data and the rest are loaded on access.\n\nYeah I know that but wasn't clear in what I said I knew \n\nCaleb Rackliffe the current behavior seems reasonable \u2013 if no lazy load then grab everything, and if there's a doc cache stick it there.  In your app with a custom stored field codec, why did you set enableLazyFieldLoading=false?  What do you want to achieve? ",
            "id": "comment-15364550"
        },
        {
            "date": "2016-07-06T16:22:50+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user dsmiley commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/47#discussion_r69763447\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java \u2014\n    @@ -766,12 +766,16 @@ public Document doc(int i, Set<String> fields) throws IOException {\n         }\n\n         final DirectoryReader reader = getIndexReader();\n\n\tif (!enableLazyFieldLoading || fields == null) {\n\td = reader.document;\n    +    if (fields != null) {\n    +      if (enableLazyFieldLoading) \n{\n    +        final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n    +        reader.document(i, visitor);\n    +        d = visitor.doc;\n    +      }\n else {\n    +        d = reader.document(i, fields);\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    This could lead to a bug when there is a document cache, since we'd cache a partial document without lazy loading.  Then imagine a subsequent doc(i,otherFields), is called and then a document is returned without those fields even if the doc on disk might actually has those fields.\n\n    On line 770 if (enableLazyFieldLoading) could become: if (enableLazyFieldLoading || documentCache != null).  In this sense, \"enableLazyFieldLoading\" would have no effect unless there is no doc cache... I'm not sure what to think of that. ",
            "id": "comment-15364553"
        },
        {
            "date": "2016-07-06T18:39:53+0000",
            "author": "Caleb Rackliffe",
            "content": "I am not very happy with this solution because from a Solr user's perspective, this feature adds no benefit but causes stored fields to be read twice for an uncached read? I must also admit that I do not have a good suggestion on how to avoid that.\n\nShalin Shekhar Mangar Unless there's a less invasive solution I'm overlooking, I think it might be best to abandon this issue as something to handle in Solr proper.\n\nDavid Smiley Our fork actually reads most stored fields from an embedded database and relies on the visitor's fields information to make decisions about when (and when not) to read stored fields from Solr itself. We don't actually use documentCache at all, so the fixes I made around the initial patch to get the unit tests passing won't even be necessary.\n\nLet me know if there are any objections to closing this... ",
            "id": "comment-15364857"
        },
        {
            "date": "2016-07-06T18:42:35+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user maedhroz commented on a diff in the pull request:\n\n    https://github.com/apache/lucene-solr/pull/47#discussion_r69787760\n\n    \u2014 Diff: solr/core/src/java/org/apache/solr/search/SolrIndexSearcher.java \u2014\n    @@ -766,12 +766,16 @@ public Document doc(int i, Set<String> fields) throws IOException {\n         }\n\n         final DirectoryReader reader = getIndexReader();\n\n\tif (!enableLazyFieldLoading || fields == null) {\n\td = reader.document;\n    +    if (fields != null) {\n    +      if (enableLazyFieldLoading) \n{\n    +        final SetNonLazyFieldSelector visitor = new SetNonLazyFieldSelector(fields, reader, i);\n    +        reader.document(i, visitor);\n    +        d = visitor.doc;\n    +      }\n else {\n    +        d = reader.document(i, fields);\n\t\n\t\t\n\t\t\n\t\t\tEnd diff \u2013\n\t\t\n\t\t\n\t\n\t\n\n\n\n    Right. I think I addressed that in the last commit, since only full documents are cached now. The problem is that the overhead of doing this might be unacceptable. ",
            "id": "comment-15364864"
        },
        {
            "date": "2016-07-06T19:04:32+0000",
            "author": "David Smiley",
            "content": "If there is no document cache and lazy field loading is disabled, then we can pass through the fields requested to the codec instead of getting them all right?  That wouldn't break anything nor add inefficiencies that aren't inherent with a user opting out of these 2 optimizations. ",
            "id": "comment-15364908"
        },
        {
            "date": "2016-07-06T19:07:47+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "If there is no document cache and lazy field loading is disabled, then we can pass through the fields requested to the codec instead of getting them all right? That wouldn't break anything nor add inefficiencies that aren't inherent with a user opting out of these 2 optimizations.\n\n+1 to that. That should work for Caleb's use-case as well. ",
            "id": "comment-15364916"
        },
        {
            "date": "2016-07-06T21:28:47+0000",
            "author": "Caleb Rackliffe",
            "content": "If there is no document cache and lazy field loading is disabled, then we can pass through the fields requested to the codec instead of getting them all right?\n\nThat works for me. ",
            "id": "comment-15365149"
        },
        {
            "date": "2016-07-07T07:51:50+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Condensed patch which applies to master. I added the following comment for the case where document cache is enabled:\n\n\n        // we do not pass the fields in this case because that would return an incomplete document which would\n        // be eventually cached. The alternative would be to read the stored fields twice; once with the fields\n        // and then without for caching leading to a performance hit\n        // see SOLR-8858 for related discussion\n\nAll tests and precommit passes. I'll commit this now. ",
            "id": "comment-15365765"
        },
        {
            "date": "2016-07-07T07:52:30+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 24d6b7846995542c5ccbb4ddcdaa844f78555205 in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=24d6b78 ]\n\nSOLR-8858: SolrIndexSearcher#doc() completely ignores field filters unless lazy field loading is enabled.\n\nThis closes #47. ",
            "id": "comment-15365768"
        },
        {
            "date": "2016-07-07T07:53:12+0000",
            "author": "ASF GitHub Bot",
            "content": "Github user asfgit closed the pull request at:\n\n    https://github.com/apache/lucene-solr/pull/47 ",
            "id": "comment-15365771"
        },
        {
            "date": "2016-07-07T07:53:49+0000",
            "author": "ASF subversion and git services",
            "content": "Commit 4921dcd80cb7b8adbb35b62d753b2c965ec92f28 in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4921dcd ]\n\nSOLR-8858: SolrIndexSearcher#doc() completely ignores field filters unless lazy field loading is enabled.\n\nThis closes #47.\n(cherry picked from commit 24d6b78) ",
            "id": "comment-15365772"
        },
        {
            "date": "2016-07-07T07:54:52+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Caleb and David! ",
            "id": "comment-15365774"
        },
        {
            "date": "2016-08-26T14:00:08+0000",
            "author": "Michael McCandless",
            "content": "Bulk close resolved issues after 6.2.0 release. ",
            "id": "comment-15439022"
        }
    ]
}