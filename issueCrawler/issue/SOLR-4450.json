{
    "id": "SOLR-4450",
    "title": "Developer Curb Appeal: Need consistent command line arguments for all nodes",
    "details": {
        "affect_versions": "4.1",
        "status": "Closed",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Not A Problem"
    },
    "description": "Suppose you want to create a small 4 node cluster (2x2, two shards, each replicated), each on it's own machine.\n\nIt'd be nice to use the same script in /etc/init.d to start them all, but it's hard to come up with a set of arguments that works for both the first and subsequent nodes.\n\nWhen MANUALLY starting them, the arguments for the first node are different than for subsequent nodes:\n\nNode A like this:\n    -DzkRun -DnumShards=2 -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=MyConfig -jar start.jar\n\nVs. the other 3 nodes, B, C, D:\n\t-DzkHost=nodeA:9983 -jar start.jar\n\nBut if you combine them, you either still have to rely on Node A being up first, and have all nodes reference it:\n\n    -DzkRun -DzkHost=nodeA:9983 -DnumShards=2 -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=MyConfig\n\nOR you can try to specify the address of all 4 machines, in all 4 startup scripts, which seems logical but doesn't work:\n\n    -DzkRun -DzkHost=nodeA:9983,nodeB:9983,nodeC:9983,nodeD:9983 -DnumShards=2 -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=MyConfig\n\nThis gives an error:\norg.apache.solr.common.SolrException log\nSEVERE: null:java.lang.IllegalArgumentException: port out of range:-1\n\nThis thread suggests a possible change in syntax, but doesn't seem to work (at least with the embedded ZooKeeper)\n\nThread:\nhttp://lucene.472066.n3.nabble.com/solr4-0-problem-zkHost-with-multiple-hosts-throws-out-of-range-exception-td4014440.html\n\nSyntax:\n    -DzkRun -DzkHost=nodeA:9983,nodeB:9983,nodeC:9983,nodeD:9983/solrroot -DnumShards=2 -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=MyConfig\n\nError:\nSEVERE: Could not start Solr. Check solr/home property and the logs\nFeb 12, 2013 1:36:49 PM org.apache.solr.common.SolrException log\nSEVERE: null:java.lang.NumberFormatException: For input string: \"9983/solrroot\"\n        at java.lang.NumberFormatException.forInputString(NumberFormatException.java:65)\n\n\nSo:\n\n\tThere needs to be some syntax that all nodes can run, even if it requires listing addresses  (or multicast!)\n\tAnd then clear documentation about suggesting external ZooKeeper to be used for production (list being maintained in SOLR-4444)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13577076",
            "date": "2013-02-12T22:05:10+0000",
            "content": "I've been putting some thought into this for myself.  My thought is to add another init script option besides start/stop/restart ... bootstrap.   This option would internally call restart, and work like this:\n\n/etc/init.d/solrcloud bootstrap cfgname /path/to/dir\n\nThis might not work right with some of the newer sysvinit replacements.  I don't have a lot of experience with those. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13577102",
            "date": "2013-02-12T22:18:07+0000",
            "content": "Another possibility, which might work better in a \"do everything the same\" environment - start up initially with no config sets, no cores, no bootstrap options then use the zkcli script included with Solr to load configs. "
        },
        {
            "author": "Mark Bennett",
            "id": "comment-13582710",
            "date": "2013-02-21T00:22:15+0000",
            "content": "The idea I was thinking of was that we'd come up in multicast by default, BUT also with a named config.\n\nSo I could startup 4 instances with -configName \"MarksLab\"\n\nThen you start yours up with -configName \"ShawnsLab\"\n\nAnd even though we're using multicast on the same network segment, we don't accidentally collide with each other. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13582769",
            "date": "2013-02-21T01:30:06+0000",
            "content": "The following paragraph does not address the initial idea in this issue of allowing startup re-bootstrapping of config sets when using an init script.  It only addresses the fact that configName would (IMHO) be a bad option name for differentiating multicast.\n\nI'm going to have several config sets stored in zookeeper and even more collections that use those config sets, so using something called configName for a multicast identifier is very confusing.  If multicasting is added to Solr, a better name for that option would be mcastName or multicastName.  It would be even better to also allow configuring the multicast address and UDP port number. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13582771",
            "date": "2013-02-21T01:35:26+0000",
            "content": "which seems logical but doesn't work\n\nIt doesn't work because you are using ZkRun incorrectly - probably because it is not documented well on the wiki. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13582782",
            "date": "2013-02-21T01:41:47+0000",
            "content": "The idea I was thinking of was that we'd come up in multicast by default\n\nNot a big fan of discovery through multicast.\n\nI don't think this is really the direction we want to go in general regarding the command line params. The current SolrCloud examples where built before the Collections API and many other pieces were finished, and leaned heavily on single node Solr conventions. We should be migrating towards the Collections APi - where you start a bunch of nodes and then call a create command with the collections API as your first order of business. It's the favored way already. You can't preconfigure multiple collections with different numShards right now.\n\nI think the right approach here is to simply finish polishing off the Collections API and starting up Solr without any cores, and when that is really nice, hopefully someone can port the getting started wiki to that style. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13582783",
            "date": "2013-02-21T01:42:54+0000",
            "content": "I'm going to suggest something radical now.  I think that the only config option you should NEED to give Solr is solr.solr.home, which of course has ./solr as a default.  Everything else should be specified in solr.xml or its .properties replacement when that's ready. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13582789",
            "date": "2013-02-21T01:46:22+0000",
            "content": "bq Another possibility, which might work better in a \"do everything the same\" environment - start up initially with no config sets, no cores, no bootstrap options then use the zkcli script included with Solr to load configs.\n\nRight. And we have a few options here regarding config - we should continue improving the zkcli tool to make it very easy to pop up a config folder for a collection (it's not bad now, but could be polished), and we should continue on the issues that make it easy to post new config files to a collection. That would also give you the option of starting a new collection with whatever random default minimal config, and then you could just post a new schema.xml, then solrconfig.xml when you have the schema right, etc. We also have issues around specifying a configuration files when you use the collections create API. \n\nI think we already have a lot of momentum towards making a lot of this simpler, it just requires some work from people to finish it off. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13582791",
            "date": "2013-02-21T01:48:11+0000",
            "content": "Everything else should be specified in solr.xml or its .properties replacement when that's ready.\n\nThat's already how it is basically. Solr.xml is what allows you to then send in values by system prop - which is much easier to do for the getting started demo.\n\nAnyone deploying to production doesn't need to pass those sys props. They can just put them in solr.xml. The outlier is numShards - but it's kind of a hack living in the old world. The new world is the collections API. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13582960",
            "date": "2013-02-21T06:29:30+0000",
            "content": "That's already how it is basically. Solr.xml is what allows you to then send in values by system prop - which is much easier to do for the getting started demo.\n\nSo I can specify zkHost and all that stuff that's currently on the commandline in solr.xml?  I like that!  I haven't put numShards on the commandline, I did that when I used the collections API to create the collection.  I will be investigating this! "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13583057",
            "date": "2013-02-21T09:48:18+0000",
            "content": "I'm not a big fan of having to start a lot of runtime services before you can begin configuring your environment. The issue is that some people will start scripting 1) start ZK 2) start a solr node 3) call collections api 4) stop solr 5) stop ZK just to get a pre-configured setup to store in their git/svn. I think we should promote using ZK as THE config service for Solr so you get 1) Start an empty ZK 2) upload your cluster config including all collections, numshards etc to ZK and 3) start an empty Solr pointing to ZK, and it will do what it should. Such dynamic config should not be scattered around in solr.xml on all nodes.\n\nzkCli is a good start. But if we focus on polishing and documenting the ZK \"schema\" then we can arrive at the original goal of changing a config in ZK, and the Solr cluster will sniff this and do whatever necessary to comply. If the ZK \"schema\" is well documented (and versioned) then 3rd party (graphical) tools and plugins to other admin tools, other ZK mgmt tools etc will follow. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13583734",
            "date": "2013-02-22T00:25:17+0000",
            "content": "Jan, I also think that solr.xml should only contain what's required to talk to zookeeper and properly populate it with information specific to that node.  Here's what is in my init script right now:\n\n\nZKHOST=\"mbzoo1.REDACTED.com:2181,mbzoo2.REDACTED.com:2181,mbzoo3.REDACTED.com:2181${ZKCHROOT}\"\n<snip>\nSTARTARGS=\"${JMEM_OPTS} ${JGC_OPTS} ${JMX_OPTS} -Dsolr.solr.home=${SOLRHOME} -DzkHost=${ZKHOST} -Djetty.port=${LISTENPORT} -Dlog4j.configuration=file:etc/log4j.properties -DSTOP.PORT=${STOPPORT} -DSTOP.KEY=${STOPKEY}\"\n<snip>\ncd ${SOLRROOT}\n${JBIN} ${STARTARGS} -jar ${SOLRROOT}/start.jar >logs/out 2>logs/err &\n\n\n\nCurrently my solr.xml starts with the following:\n\n\n<solr persistent=\"true\" sharedLib=\"lib\">\n  <cores adminPath=\"/admin/cores\" zkClientTimeout=\"${zkClientTimeout:15000}\" hostPort=\"${jetty.port:}\" hostContext=\"solr\">\n\n\n\nThe only thing I am plan to move from init to solr.xml (based on what Mark has said) is zkHost.  With this change, the init script will be identical to the one I use for a Solr 4.x install that's not using SolrCloud, which I believe is an extremely important goal.\n\nI believe that always including a ZK chroot in example configs and documentation is a good idea.  I can envision a semi-common user question of \"How can I add another SolrCloud install to my existing zookeeper ensemble?\"  If we plan from the beginning to utilize a chroot, there will be far less frustration involved in the answer. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13583752",
            "date": "2013-02-22T00:44:33+0000",
            "content": "I just had another thought.  One problem with using solr.xml for the zookeeper information is that the cores are also stored there, so you cannot just copy it from an existing host to a new one.  I think it would be a good idea to use a separate config file for the zookeeper information, with a fallback to solr.xml. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13583768",
            "date": "2013-02-22T00:58:18+0000",
            "content": "Another thought, naturally after I had already sent the previous one: Might it be possible to have Solr still start up if the zookeeper info file is present but solr.xml is not, then when the collection API is used, have solr.xml get created automatically? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13583794",
            "date": "2013-02-22T01:33:12+0000",
            "content": "solr.xml is about to go away entirely. "
        },
        {
            "author": "Raymond Lee",
            "id": "comment-13673528",
            "date": "2013-06-03T20:40:36+0000",
            "content": "Just want to follow up on original poster's question regarding syntax that caused \"SEVERE: null:java.lang.IllegalArgumentException: port out of range:-1\".  I have the following setup and it appears to be running correctly.  I.e. Leader re-election works with Solr Embedded Zookeeper when one leader fails.\n\n== Configuration ==\nServerA:  192.168.56.101\nsolrA1:   192.168.56.101/8983\nsolrA2:   192.168.56.101/8900\n\nServerB:  192.168.56.102\nsolrB1:   192.168.56.102/8983\nsolrB2:   192.168.56.102/8900\n\n== Steps to bring up the servers ==\n1. Start up solrA1 from bash:\n[root@192.168.56.101  example]$java -DzkRun -DnumShards=2 -Dbootstrap_confdir=./solr/collection1/conf -Dcollection.configName=myconf -DzkHost=localhost:9983,192.168.56.101:9900,192.168.56.102:9983,192.168.56.102:9900 -jar start.jar\n\n2. Start up solrA2 from bash:\n[root@192.168.56.101  exampleB]$java -Djetty.port=8900 -DzkRun -DzkHost=192.168.56.101:9983,localhost:9900,192.168.56.102:9983,192.168.56.102:9900 -jar start.jar\n\n3. Start up solrB1 from bash:\n[root@192.168.56.102  example]$java -Djetty.port=8983 -DzkRun -DzkHost=192.168.56.101:9983,192.168.56.101:9900,localhost:9983,192.168.56.102:9900 -jar start.jar\n\n4. Start up solrB2 from bash:\n[root@192.168.56.102  exampleB]$java -Djetty.port=8900 -DzkRun -DzkHost=192.168.56.101:9983,192.168.56.101:9900,192.168.56.102:9983,localhost:9900 -jar start.jar\n\n== Dev. Note ==\nOriginally, I ran into the same exception as Mark Bennett, seeing \"SEVERE: null:java.lang.IllegalArgumentException: port out of range:-1\".  I then downloaded the lucense_solr source code, put it in the debugger. etc.  With version 3.4.5 (may be other versions also) of Solr, it turns out that line 269 of SolrZkServer.java is trying to compare the string \"localhost\" with the given list of Hostnames as defined by \"-DzkHost\"\n\n[SolrZkServer.java]\n....\nline 251:  String myHost = \"localhost\";\n....\nline 267:  int port = 0;\n....\nline 269:     if (server.addr.getHostName().equals(myHost)) {....\n....\nline 272:         port = server.addr.getPort();\n....\nline 278:  setClientPort(port - 1);\n....\n\nSo if server.addr.getHostName() never returns \"localhost\", then line 272 would not run and hence, port number would default to \"0\".  Then line 278 will set it to \"-1\".  Hence, port out of range exception.\n\nHopefully, someone can put a note about this on the immutable page at https://wiki.apache.org/solr/SolrCloud \n\nHTH\n\n "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717319",
            "date": "2013-07-23T18:47:51+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971176",
            "date": "2014-04-16T12:57:22+0000",
            "content": "Move issue to Solr 4.9. "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-15525832",
            "date": "2016-09-27T11:26:33+0000",
            "content": "Closing this old issue. This is really not a problem any more now that we have solr start -e cloud for testing, and the clear recommendation to use external ZK for other setups (which gives you equal setup on all nodes). "
        }
    ]
}