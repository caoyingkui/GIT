{
    "id": "LUCENE-4874",
    "title": "Don't override non abstract methods that have an impl through other abstract methods in FilterAtomicReader and related classes",
    "details": {
        "components": [],
        "fix_versions": [],
        "affect_versions": "None",
        "priority": "Minor",
        "labels": "",
        "type": "Bug",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Terms.intersect is an optional method. The fact that it is overridden in FilterTerms forces any non-trivial class that extends FilterTerms to override intersect in order this method to have a correct behavior. If FilterTerms did not override this method and used the default impl, we would not have this problem.",
    "attachments": {
        "LUCENE-4874.patch": "https://issues.apache.org/jira/secure/attachment/12576875/LUCENE-4874.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-03-23T15:26:43+0000",
            "content": "I think we should be consistent about this completely and not override any methods with default implementations in these Filter* classes.\n\nSo that means stuff like FilterTermsEnum.seekExact too. We should review all these classes in FilterAtomicReader. ",
            "author": "Robert Muir",
            "id": "comment-13611738"
        },
        {
            "date": "2013-03-23T19:05:52+0000",
            "content": "This makes sense. I found another bug in SortingAtomicReader which doesn't override getCoreCacheKey, this could lead to very bad things if an atomic reader and its sorted view were both used with the same FieldCache instance.\n\nI've started looking at methods that override default impls and would like to have your opinion on some of them:\n\n\tshouldn't IndexReader.hasDeletions return numDeletedDocs() > 0 by default instead of being abstract?\n\tisn't the default impl of TermsEnum.termState dangerous? Shouldn't it throw an UnsupportedOperationException or being abstract instead?\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13611829"
        },
        {
            "date": "2013-03-24T18:36:51+0000",
            "content": "\nshouldn't IndexReader.hasDeletions return numDeletedDocs() > 0 by default instead of being abstract?\n\nI fell into this trap myself before (naively providing a fake livedocs to a filterreader), there are quite a few traps and inconsistencies:\n\n\tif you override the livedocs you currently need to override a bunch of other things too (e.g. hasDeletions, numDocs). we should at least add a javadoc to FilterAtomicReader make it less trappy.\n\thasDeletions is abstract, and its easy to forget to implement this.\n\tSegmentReader says that for hasDeletions/numDocs/maxDoc \"Don't call ensureOpen() here (it could affect performance)\". But FilterAtomicReader only says this for numDocs and maxDoc and calls it on hasDeletions!\n\tdefault implementation in SegmentReader uses liveDocs != null: but i dont know anything checking (e.g. CheckIndex should do this) that the codec's LiveDocsFormat must return null (vs a Bits matching all docs). We should check this if there is code actually making this (undocumented) assumption.\n\n\n\nFor SegmentReader at least, it seems to be better if it had this implementation: and neither numDocs() and maxDocs() calls ensureOpen() either so I only see it as a safer way to go (we could avoid the sketchy liveDocs != null, but i bet other code elsewhere relies on this too).\n\n\nisn't the default impl of TermsEnum.termState dangerous? Shouldn't it throw an UnsupportedOperationException or being abstract instead?\n\nI don't know whats going on here: but I agree. it seems the current default implementation is \"silently wont work\". ",
            "author": "Robert Muir",
            "id": "comment-13612190"
        },
        {
            "date": "2013-03-25T17:54:18+0000",
            "content": "Although DocIdSetIterator.advance is abstract, it describes a default implementation that many classes that extend DocsEnum/DocsAndPositionsEnum duplicate. Maybe we should just provide a default implementation for advance, this would save copy-pastes. ",
            "author": "Adrien Grand",
            "id": "comment-13612908"
        },
        {
            "date": "2013-03-26T14:41:01+0000",
            "content": "In this case I think its a little scary to have a default very-slow implementation. Similar to concerns raised on LUCENE-1592 ",
            "author": "Robert Muir",
            "id": "comment-13614068"
        },
        {
            "date": "2013-04-03T23:20:33+0000",
            "content": "Patch\n\n\n\tImplements IndexReader.hasDeletions() as numDeletedDocs() > 0 by default (instead of abstract) with no ensureOpen check (SegmentReader uses this default impl instead of liveDocs != null).\n\n\n\n\n\tAdds warning in FilterAtomicReader about overriding\n\n\n\n\n\tMethods that provide a default implementation are not implemented as in.XXX in Filter*** anymore (in particular Terms.intersect, IndexReader.hasDeletions and IndexReader.get*CacheKey). The test in TestFilterAtomicReader has been modified to ensure this.\n\n\n\n\n\tTermsEnum.termState returns a TermState that throws an UOE instead of failing silently\n\n\n\n\n\tDocIdSetIterator provides a protected final slowAdvance(int target) method, which advances linearly and can be used in implementations that don't require advance to be fast (and has an assert to make sure that target is greater than the current position).\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13621495"
        },
        {
            "date": "2013-04-04T12:55:30+0000",
            "content": "i think attributes() should be overridden by the Filter** by default. This is basically a getter. ",
            "author": "Robert Muir",
            "id": "comment-13622113"
        },
        {
            "date": "2013-04-04T19:16:25+0000",
            "content": "Updated patch. I added back attributes modified the test (+ comments) and added a changelog entry. ",
            "author": "Adrien Grand",
            "id": "comment-13622676"
        },
        {
            "date": "2013-04-04T19:25:45+0000",
            "content": "+1, thanks for working on these API issues! ",
            "author": "Robert Muir",
            "id": "comment-13622688"
        },
        {
            "date": "2013-04-04T19:48:48+0000",
            "content": "[trunk commit] jpountz\nhttp://svn.apache.org/viewvc?view=revision&revision=1464710\n\nLUCENE-4874: Don't override non abstract methods that have an impl through\nother abstract methods in FilterAtomicReader and related classes. ",
            "author": "Commit Tag Bot",
            "id": "comment-13622714"
        },
        {
            "date": "2013-04-04T21:49:29+0000",
            "content": "[branch_4x commit] jpountz\nhttp://svn.apache.org/viewvc?view=revision&revision=1464776\n\nLUCENE-4874: Don't override non abstract methods that have an impl through\nother abstract methods in FilterAtomicReader and related classes (merged from\nr1464710 and r1464768). ",
            "author": "Commit Tag Bot",
            "id": "comment-13622846"
        },
        {
            "date": "2013-04-04T22:37:46+0000",
            "content": "Thanks for helping Robert! ",
            "author": "Adrien Grand",
            "id": "comment-13622911"
        }
    ]
}