{
    "id": "SOLR-3244",
    "title": "New Admin UI doesn't work on tomcat",
    "details": {
        "affect_versions": "4.0-ALPHA",
        "status": "Closed",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "components": [
            "Admin UI"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "I am currently unable to open admin interface when using war deployment under tomcat server.\nThe stack trace:\n\nSEVERE: Servlet.service() for servlet [LoadAdminUI] in context with path [/solr] threw exception\njava.lang.NullPointerException\n\tat java.io.File.<init>(File.java:251)\n\tat org.apache.solr.servlet.LoadAdminUiServlet.doGet(LoadAdminUiServlet.java:50)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:621)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:722)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:305)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:292)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:243)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:210)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:224)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:169)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:168)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:98)\n\tat org.apache.catalina.valves.AccessLogValve.invoke(AccessLogValve.java:928)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:118)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:407)\n\tat org.apache.coyote.http11.AbstractHttp11Processor.process(AbstractHttp11Processor.java:987)\n\tat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:539)\n\tat org.apache.tomcat.util.net.AprEndpoint$SocketProcessor.run(AprEndpoint.java:1815)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1110)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:603)\n\tat java.lang.Thread.run(Thread.java:722)\n\nTomcat version: Apache Tomcat/7.0.23\nJava version: jdk1.7.0_02\n\nI did some debugging and found that the problem related that \nit delegates the resolving of resource path to the org.apache.naming.resources.WARDirContext which simply returns null for any input parameters:\n\n/**\n\n\tReturn the real path for a given virtual path, if possible; otherwise\n\treturn <code>null</code>.\n  *\n\t@param path The path to the desired resource\n  */\n@Override\nprotected String doGetRealPath(String path) {\n  return null;\n}\n\n\n\nNeed to check specification, because it may be actually the tomcat bug. We may try use the getResourceAsStream(java.lang.String path) method which should work even for war.",
    "attachments": {
        "SOLR-3244.patch": "https://issues.apache.org/jira/secure/attachment/12518308/SOLR-3244.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Uwe Schindler",
            "id": "comment-13229109",
            "date": "2012-03-14T09:57:35+0000",
            "content": "It seems that the file is missing in the WAR file?\n\n\nFile f = new File(getServletContext().getRealPath(\"admin.html\"));\nif(f.exists()) {\n  // This attribute is set by the SolrDispatchFilter\n  CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n  String html = IOUtils.toString(new FileInputStream(f), \"UTF-8\");\n\n\n\nIn general I am a little bit sceptical about the whole code. In my opinion using File and getRealPath is not the best idea. The simpliest and filesystem-unspecific to get the file is (there may be a servlet container that does not extract WAR files at all and simply returns the resource from inside the war file):\n\n\nInputStream in = getServletContext().getResourceAsStream(\"/admin.html\");\nif(in != null) try {\n  // This attribute is set by the SolrDispatchFilter\n  CoreContainer cores = (CoreContainer) request.getAttribute(\"org.apache.solr.CoreContainer\");\n\n  String html = IOUtils.toString(in, \"UTF-8\");\n  ...\n} finally {\n  IOUtils.closeSafely(in);\n}\n\n\n\nPlease note the \"/\" in the path, accoring to JavaDocs of getResource:\n\nThe path must begin with a / and is interpreted as relative to the current context root, or relative to the /META-INF/resources directory of a JAR file inside the web application's /WEB-INF/lib directory. This method will first search the document root of the web application for the requested resource, before searching any of the JAR files inside /WEB-INF/lib. The order in which the JAR files inside /WEB-INF/lib are searched is undefined.\n\nThis also applies to getRealPath, so I think Tomcat is more picky about that than jetty. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13229113",
            "date": "2012-03-14T10:14:06+0000",
            "content": "Hi,\n\ncan you apply the attached patch and rebuild the WAR. This fixes this bug and also another security issue:\n\n\tThe inlined pathes are not correctly escaped according to JavaScript rules, this can lead to security problems if you deploy to a path with strange characters in it...\n\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13229115",
            "date": "2012-03-14T10:14:51+0000",
            "content": "It would be nice if you could test this, I have no Tomcat available... "
        },
        {
            "author": "Aliaksandr Zhuhrou",
            "id": "comment-13229167",
            "date": "2012-03-14T13:12:35+0000",
            "content": "Sure, I will test it at evening. Thank you very much. "
        },
        {
            "author": "Aliaksandr Zhuhrou",
            "id": "comment-13229477",
            "date": "2012-03-14T18:35:20+0000",
            "content": "I checked your patch and it works on Tomcat. "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13229575",
            "date": "2012-03-14T20:16:20+0000",
            "content": "Fine, I will commit this now! "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13229588",
            "date": "2012-03-14T20:30:51+0000",
            "content": "Committed trunk revision: 1300710\n\nThanks Aliaksandr! "
        },
        {
            "author": "Ryan McKinley",
            "id": "comment-13229653",
            "date": "2012-03-14T21:35:32+0000",
            "content": "Thanks Uwe \u2013 I did not realize you could get the stream directly from ServletContext "
        }
    ]
}