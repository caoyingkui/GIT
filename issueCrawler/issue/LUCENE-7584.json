{
    "id": "LUCENE-7584",
    "title": "Potential leak issue",
    "details": {
        "labels": "",
        "priority": "Trivial",
        "resolution": "Not A Problem",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [],
        "fix_versions": []
    },
    "description": "May the following method have a potential leak like LUCENE-3251 when  directory.createOutput(fileName) throws IOException?\n\n(Found the code from the recent code snapshot)\n\nlucene/src/java/org/apache/lucene/index/CompoundFileWriter.java\n\n   public void close() throws IOException {\n        if (merged)\n            throw new IllegalStateException(\"Merge already performed\");\n\n        if (entries.isEmpty())\n            throw new IllegalStateException(\"No entries to merge have been defined\");\n\n        merged = true;\n\n        // open the compound stream\n        IndexOutput os = directory.createOutput(fileName);\n        IOException priorException = null;\n        try {\n            // Write the Version info - must be a VInt because CFR reads a VInt\n            // in older versions!\n            os.writeVInt(FORMAT_CURRENT);\n\n            // Write the number of entries\n            os.writeVInt(entries.size());\n\n            // Write the directory with all offsets at 0.\n            // Remember the positions of directory entries so that we can\n            // adjust the offsets later\n            long totalSize = 0;\n            for (FileEntry fe : entries) {\n                fe.directoryOffset = os.getFilePointer();\n                os.writeLong(0);    // for now\n                os.writeString(IndexFileNames.stripSegmentName(fe.file));\n                totalSize += directory.fileLength(fe.file);\n            }\n\n            // Pre-allocate size of file as optimization --\n...\n        } catch (IOException e) {\n          priorException = e;\n        } finally {\n          IOUtils.closeSafely(priorException, os);\n        }\n    }",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15736581",
            "date": "2016-12-09T22:53:16+0000",
            "content": "Hmm which version of Lucene is this?  It looks quite old ... newer versions of Lucene put compound file writing under codec control.\n\nAlso, I don't think there's a leak in the above code, because if createOutput throws any exception, it must not leave any file handles open; this is part of its contract. ",
            "author": "Michael McCandless"
        },
        {
            "id": "comment-15742293",
            "date": "2016-12-12T15:49:02+0000",
            "content": "Thanks for the comment. It seems I looked at the outdated repository. Sorry for your time. I'll close this. ",
            "author": "JC"
        }
    ]
}