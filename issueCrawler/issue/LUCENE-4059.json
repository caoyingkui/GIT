{
    "id": "LUCENE-4059",
    "title": "prepare-webpages breaks the build if there are none URI complement characters in the path",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "general/build"
        ],
        "type": "Bug",
        "fix_versions": [
            "4.0-ALPHA"
        ],
        "affect_versions": "4.0-ALPHA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Hi all my build environment is a little weird for legacy reasons, one of these is that checkouts from version control for my build server have {} in the path.\n\nThis causes the process-webapps target to fail since XSL rejects none URI characters.\n\nI have a patch that fixes this by escaping the paths first",
    "attachments": {
        "LUCENE-4059-URI-webpages-breakages.patch": "https://issues.apache.org/jira/secure/attachment/12527548/LUCENE-4059-URI-webpages-breakages.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-05-16T00:26:46+0000",
            "content": "Escape URI paths for XSL ",
            "author": "Greg Bowyer",
            "id": "comment-13276362"
        },
        {
            "date": "2012-05-16T00:31:49+0000",
            "content": "I don't understand the problem, can you provide your build.xml? If you changed the Lucene-provided build files, this is not an issue, because those always build out of the box. If XSL does not like your own and modified build files, they are invalid XML, so fix those. The attached patch seems to work only around your invalid XML. ",
            "author": "Uwe Schindler",
            "id": "comment-13276364"
        },
        {
            "date": "2012-05-16T00:52:43+0000",
            "content": "My build.xml is the same as upstream, the problem is my checkout path looks like this\n\n/home/buildserver/workspace/builds/\n{search-engineering}-solr-lucene-{trunk}\n\nThis means that the prepare-webpages target gets its paths in the buildpaths variable as a pipe separated list like so\n\n/home/buildserver/workspace/builds/{search-engineering}\nsolr-lucene\n{trunk}/lucene/analysis/common/build.xml|/home/buildserver/workspace/builds/{search-engineering}-solr-lucene-{trunk}\n/lucene/analysis/icu/build.xml|...(and so on)\n\nXSLT picks this up later and tries to load these paths, however XSLT assumes that they are URLS which makes the { character invalid and causes\n\ncom.sun.org.apache.xalan.internal.xsltc.TransletException: javax.xml.transform.TransformerException: com.sun.org.apache.xml.internal.utils.URI$MalformedURIException: Path contains invalid character: {\n\nThis pattern is infrastructural to where I work and is not likely to change (I would like it too)\n\nNot sure if that makes sense ",
            "author": "Greg Bowyer",
            "id": "comment-13276368"
        },
        {
            "date": "2012-05-16T09:22:05+0000",
            "content": "Hi,\n\nthat makes sense, thanks for reporting this! I will fix this, thanks for the nice workaround patch. ",
            "author": "Uwe Schindler",
            "id": "comment-13276616"
        },
        {
            "date": "2012-05-16T09:55:00+0000",
            "content": "Hi, new and improved (\"more correct\") patch: On my windows machine your patch broke because of the backslashes. The most correct way to do this by creating a \"real\" file based URI. This can be done with the Java API (new File(source) -> toURI()). This creates a 100% correct file:// URI as XSL expects (XSL wants URIs, but most interpreters like XALAN also allow file names, but using file:-URIs is more correct and straight-forward).\n\nI will commit this now, thanks for reporting! ",
            "author": "Uwe Schindler",
            "id": "comment-13276626"
        },
        {
            "date": "2012-05-16T09:57:37+0000",
            "content": "Committed rev 1339097. Thanks Greg! ",
            "author": "Uwe Schindler",
            "id": "comment-13276628"
        }
    ]
}