{
    "id": "SOLR-12699",
    "title": "make LTRScoringModel immutable (to allow hashCode caching)",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "contrib - LTR"
        ],
        "type": "Sub-task",
        "fix_versions": [
            "7.6",
            "master (8.0)"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "Stanislav Livotov wrote in SOLR-12688:\n\n... LTRScoringModel was a mutable object. It was leading to the calculation of hashcode on each query, which in turn can consume a lot of time ... So I decided to make LTRScoringModel immutable and cache hashCode calculation. ...\n\n(Please see SOLR-12688 description for overall context and analysis results.)",
    "attachments": {
        "SOLR-12699.patch": "https://issues.apache.org/jira/secure/attachment/12937796/SOLR-12699.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-08-30T19:04:02+0000",
            "content": "Please note that in the attached patch I tried to make LTRScoringModel immutable object. However, in theory, this object is still mutable because params is a map of String-Object and in theory, Object can be not a String but some complex object and Features are also mutable objects(Only in theory, by the flow they are immutable objects). We can not fix paramsMap, however, we cat try to go further and make them really immutable but it will require as to do a lot of changes because currently in Feature.getInstance method we are invoking setters. So if you think that this code change is not enough I can refactor this part of code too.\u00a0 ",
            "author": "Stanislav Livotov",
            "id": "comment-16597789"
        },
        {
            "date": "2018-08-31T20:10:57+0000",
            "content": "Thanks Stanislav Livotov for attaching your patch here!\n... in theory, this object is still mutable because ... Only in theory, by the flow they are immutable objects ... to go further and make them really immutable but it will require as to do a lot of changes ...\nGood point re: mutable in theory vs. immutable in practice based on code flow. Given how the objects are constructed (including the setter invocations) and stored and used, I think it's okay to go with your Collections.unmodifiable...(...) approach.\n\nSemi-related to the \"is it really really immutable?\" question, I've gone and added comments for derived classes' members to clarify why they do not influence the hash code that would now then be cached by the base class. Hope that makes sense?\n\nRunning ant precommit which includes ant check-forbidden-apis flagged up this\n\n[forbidden-apis] Scanning classes for violations...\n[forbidden-apis] Forbidden class/interface use: com.google.common.base.Supplier [Use corresponding Java 8 functional/streaming interfaces]\n[forbidden-apis]   in org.apache.solr.ltr.model.LTRScoringModel (LTRScoringModel.java, field declaration of 'cachedHashCodeSupplier')\n[forbidden-apis] Forbidden class/interface use: com.google.common.base.Supplier [Use corresponding Java 8 functional/streaming interfaces]\n[forbidden-apis]   in org.apache.solr.ltr.model.LTRScoringModel (LTRScoringModel.java:174)\n\n\nand in the revised patch I just attached a plain int hashCode computed in the constructor is used instead. How does that sound?\n\nLast but not least, a question of backwards compatibility i.e. what if someone has implemented their own LTRScoringModel class which requires mutable members? I'm struggling to imagine how and why one might wish to modify the members after construction and it is perhaps also not entirely clear if making non-public final members immutable is a break in backwards compatibility. Would love to hear your and others thoughts on this.\n\n\tThe attached patch has the addition of an interim i.e. deprecated protected constructor \u2013 this strictly speaking would still constitute a backcompat break though.\n\tAn alternative could be to introduce a new LTRScoringModel constructor alternative and deriving classes must 'opt in' to the new reduced mutability by passing a non-null version argument.\n\n+ @deprecated\n  public LTRScoringModel(String name, List<Feature> features,\n      List<Normalizer> norms,\n      String featureStoreName, List<Feature> allFeatures,\n      Map<String,Object> params) {\n+   this(name, features, norms, featureStoreName, allFeatures, params, null);\n+  }\n+\n+  public LTRScoringModel(String name, List<Feature> features,\n+      List<Normalizer> norms,\n+      String featureStoreName, List<Feature> allFeatures,\n+      Map<String,Object> params, Integer version) {\n\n\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16599231"
        },
        {
            "date": "2018-09-03T18:19:03+0000",
            "content": "Hi Christine Poerschke and\u00a0Stanislav Livotov,\n\nJust a nitpick: wrapping a collection in a Collections.unmodifiable* doesn't make the collection strictly immutable. See, we are receiving `features` as a parameter. Therefore, some code that still has a reference to that object can change it underneath. Example:\n\nList<String> mutableList = new ArrayList<>();\nmutableList.add(\"Hello\");\nmutableList.add(\"World\");\n\nList<String> immutableList = Collections.unmodifiableList(mutableList);\n\nSystem.out.println(\"immutableList = \" + immutableList);\n\nmutableList.add(\"!\");\n\nSystem.out.println(\"list2 = \" + immutableList);\n\n\u00a0\n\nAs collections is a wrapper I could change it by modifying the `mutableList`. AFAIK, to make it a real immutable collection it would be required to create a defensive copy of the collection like below:\n\nList<String> immutableList = Collections.unmodifiableList(new ArrayList<>(mutableList));\n\n\u00a0\n\nNow the elements of mutableList are copied to a new ArrayList that we don't have reference. Therefore we cannot change its elements even tough as you pointed out, we could change fields of the objects in the collection. The problem with this approach is that if `features` is a large collection this could impact the performance, so be cautions when using it.\n\nFinally, this line\n\nthis.features = features != null ? Collections.unmodifiableList(features) : features;\n\n\u00a0\n\n`this.features` receives `null` if `features` is `null`. Is that the intended behaviour? Wouldn't be better to make it be `Lists.emptyList()` if `features` is null? Excuse me if I am missing something, but it's usually an anti-pattern to return null, but I am very well aware that the codebases in the wild usually don't follow this advice.\n\n\u00a0\n\nFinally, the hashCode can be written as:\n\nresult = (prime * result) + Objects.hashCode(features)\n\n\u00a0\n\nIt will automatically return 0 (zero) if features is null or the hash code of the collection otherwise.\u00a0 ",
            "author": "Edward Ribeiro",
            "id": "comment-16602383"
        },
        {
            "date": "2018-09-04T14:51:58+0000",
            "content": "Hi, Edward Ribeiro thanks for comments and review. In the attached patch I had fixed all your comments.\u00a0\n\n\u00a0\n\nChristine Poerschke, I also can not imagine why someone would want to change the model after construction. So from my POV, there is no need to support mutability.\u00a0 Anyway, he will still be able to do it with extending this class and overriding hashcode methods.\u00a0\n\n\u00a0\n\nAbout changing Supplier.memorize\u00a0on computing hashCode in the constructor. Supplier.memorize was working as lazy hashCode caching. And I think we need to support it for the case when someone will have to add one more parameter which is not the part of current and which should also influence hashCode calculation. In such case, this new field won't be initialized at the moment when calculateHashCode will be executed in the super constructor call.\n\nI've attached a patch based on your latest,\u00a0 with just switching on lazy hashCode calculation and fixes for Edward Ribeiro comments.\u00a0 ",
            "author": "Stanislav Livotov",
            "id": "comment-16603138"
        },
        {
            "date": "2018-10-11T14:12:45+0000",
            "content": "Hello Stanislav Livotov and Edward Ribeiro - thank you for progressing this ticket here!\n\n... if `features` is a large collection this could impact the performance ...\n\nGood point. The ManagedModelStore instantiates the LTRScoringModel objects and since this would be basically once per the lifetime of the SolrCore that hopefully would be affordable performance wise. Or looking at it another way, unlike the hashCode() method calls the object construction does not happen on a per-query basis. Does that kind of make sense?\n\n... this.params = params != null ? Collections.unmodifiableMap(new HashMap<>(params)) ...\n\nWould suggest to use a LinkedHashMap so that this.params and the passed in params maps have the same ordering. The to...Map methods in ManagedModelStore return a linked hash map and I vaguely recall that there was a reason for that, somehow.\n\n... Wouldn't be better to make it be `Lists.emptyList()` if `features` is null? Excuse me if I am missing something, but it's usually an anti-pattern to return null, but I am very well aware that the codebases in the wild usually don't follow this advice. ...\n\nGreat question, I hadn't really noticed about this before. In practice `features` shouldn't ever actually be null and most (all?) use of `this.features` presumes non-null i.e. would throw a NullPointerException otherwise. In that context this.features being null if the passed in features was null is probably clearest i.e. a very apparent NPE pointing towards a code bug of some sort whereas a empty list could be indicative both of a code bug (the 'things' configured by the user were not correctly recognised by the code) or of a misconfiguration issue (the user or tools used to generated the model did not add 'things' as they intended). Likewise for allFeatures, params and norms. ",
            "author": "Christine Poerschke",
            "id": "comment-16646475"
        },
        {
            "date": "2018-10-15T18:53:00+0000",
            "content": "Attached revised patch which incorporates the two things mentioned above (null remaining null and use of LinkedHashMap instead of HashMap). Also marked LTRScoringModel.calculateHashCode() final in response to TestWrapperModel.testMethodOverridesAndDelegation failing otherwise. ",
            "author": "Christine Poerschke",
            "id": "comment-16650618"
        },
        {
            "date": "2018-11-01T09:41:56+0000",
            "content": "Hi Christine Poerschke, I took a look at your patch and I don't have any concerns from my side. And thank you one more time for helping with that!\u00a0 ",
            "author": "Stanislav Livotov",
            "id": "comment-16671361"
        },
        {
            "date": "2018-11-05T19:32:57+0000",
            "content": "Commit be65b95e80fdddea109a9d850506d6c524911ecb in lucene-solr's branch refs/heads/master from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=be65b95 ]\n\nSOLR-12699: Make contrib/ltr LTRScoringModel immutable and cache its hashCode.\n(Stanislav Livotov, Edward Ribeiro, Christine Poerschke) ",
            "author": "ASF subversion and git services",
            "id": "comment-16675666"
        },
        {
            "date": "2018-11-05T20:06:37+0000",
            "content": "Commit 7ddaff6f838df7054318856de486065ea88f7715 in lucene-solr's branch refs/heads/branch_7x from Christine Poerschke\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=7ddaff6 ]\n\nSOLR-12699: Make contrib/ltr LTRScoringModel immutable and cache its hashCode.\n(Stanislav Livotov, Edward Ribeiro, Christine Poerschke) ",
            "author": "ASF subversion and git services",
            "id": "comment-16675704"
        },
        {
            "date": "2018-11-05T20:56:04+0000",
            "content": "... I took a look at your patch and I don't have any concerns from my side. ...\n\nThanks for taking a look, and for the indirect ping on this ticket! The two commits above are for master and branch_7x respectively, the latter for the upcoming 7.6 release then. ",
            "author": "Christine Poerschke",
            "id": "comment-16675750"
        },
        {
            "date": "2018-11-05T20:56:39+0000",
            "content": "Thanks Stanislav Livotov and Edward Ribeiro! ",
            "author": "Christine Poerschke",
            "id": "comment-16675751"
        }
    ]
}