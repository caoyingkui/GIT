{
    "id": "LUCENE-651",
    "title": "Poor performance race condition in FieldCacheImpl",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "2.0.0",
        "resolution": "Fixed",
        "status": "Resolved"
    },
    "description": "A race condition exists in FieldCacheImpl that causes a significant performance degradation if multiple threads concurrently request a value that is not yet cached. The degradation is particularly noticable in large indexes and when there a many concurent requests for the cached value.\n\nFor the full discussion see the mailing list thread 'Poor performance \"race condition\" in FieldSortedHitQueue' (http://www.gossamer-threads.com/lists/lucene/java-user/38717).",
    "attachments": {
        "LUCENE-651.patch": "https://issues.apache.org/jira/secure/attachment/12338769/LUCENE-651.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2006-08-14T01:36:15+0000",
            "content": "The attached patch resolves this issue by forcing multiple concurrent requests to block and wait for a single thread to do the cached value generation. ",
            "author": "Oliver Hutchison",
            "id": "comment-12427789"
        },
        {
            "date": "2006-11-10T22:43:09+0000",
            "content": "FieldCache bit us in the ass recently, so I'm looking at other FieldCache issues.\nThis one looks good to me\n(discussion that led to the patch is at http://www.gossamer-threads.com/lists/lucene/java-user/38717 )\n\nQuestion about this snippet:\n+        synchronized (value) {\n+          CreationPlaceholder progress = (CreationPlaceholder) value;\n+          if (progress.value == null) {\n+            progress.value = createValue(reader, key);\n+            synchronized (readerCache) \n{\n+              innerCache.put(key, progress.value);\n+            }\n+          }\n\nIs that synchronization on value really needed here?  Wouldn't synchronizing on readerCache be sufficient here?  Something like:\n\n+        synchronized (readerCache) {\n+          CreationPlaceholder progress = (CreationPlaceholder) value;\n+          if (progress.value == null) \n{\n+            progress.value = createValue(reader, key);\n+             innerCache.put(key, progress.value);\n+          }\n\nOr would that be too coarse?  Maybe, I see createValue does a fair bit of work.\n\nI'll commit this shortly. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12448882"
        },
        {
            "date": "2006-11-11T21:49:31+0000",
            "content": "> Wouldn't synchronizing on readerCache be sufficient here?\n\nThat would be deadly, esp to something like Solr.  It would kill any ability to warm in the background as any index reader filling an entry would block all other readers from using the cache. ",
            "author": "Yonik Seeley",
            "id": "comment-12449037"
        },
        {
            "date": "2006-11-12T04:33:40+0000",
            "content": "Ah, yes, you mentioned that in that email thread, too.  Ignore my comment. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12449085"
        },
        {
            "date": "2006-11-20T07:11:30+0000",
            "content": "Committed, thanks Oliver! ",
            "author": "Otis Gospodnetic",
            "id": "comment-12451237"
        },
        {
            "date": "2006-12-20T03:56:33+0000",
            "content": "For the record, this patch had a small mistake in it, causing memory leakage.  The fix is in LUCENE-754. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12459816"
        }
    ]
}