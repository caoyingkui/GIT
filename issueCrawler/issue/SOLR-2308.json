{
    "id": "SOLR-2308",
    "title": "Race condition still exists in StreamingUpdateSolrServer which could cause it to hang",
    "details": {
        "affect_versions": "1.4.1",
        "status": "Closed",
        "fix_versions": [
            "3.1",
            "4.0-ALPHA"
        ],
        "components": [
            "clients - java"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "We are still seeing the same issue as SOLR-1711 & SOLR-1885 with Solr1.4.1\nWe get into this situation when all the runner threads die due to a broken pipe, while the BlockingQueue is still full. All of the producer threads are all blocked on the BlockingQueue.put() method. Since the runners are spawned by the producers, which are all blocked, runner threads never get created to drain the queue.\n\nHere's a potential fix. In the runner code, replace these lines:\n\n\n// remove it from the list of running things...\nsynchronized (runners) {\n    runners.remove( this );\n}\n\n\n\nwith these lines:\n\n\n// remove it from the list of running things unless we are the last runner and the queue is full...\nsynchronized (runners) {\n    if (runners.size() == 1 && queue.remainingCapacity() == 0) {\n        // keep this runner alive\n        scheduler.execute(this);\n    } else {\n        runners.remove( this );\n    }\n}",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Russell Teabeault",
            "id": "comment-12978877",
            "date": "2011-01-07T17:32:11+0000",
            "content": "It seems that this condition happens when HttpClient.executeMethod(method) is called in the Runner and it throws an exception.  This would cause the runner to get removed from the runners queue.  And if this happened quickly for all the runners then callers to the request method would block trying to add the request to the blocking queue if the request queue was full. \n\nWould another possible solution be to add a catch for the try block where HttpClient.executeMethod(method) is called?\n\n\n\n    int statusCode = getHttpClient().executeMethod(method);\n    if (statusCode != HttpStatus.SC_OK) {\n        StringBuilder msg = new StringBuilder();\n        msg.append( method.getStatusLine().getReasonPhrase() );\n        msg.append( \"\\n\\n\" );\n        msg.append( method.getStatusText() );\n        msg.append( \"\\n\\n\" );\n        msg.append( \"request: \"+method.getURI() );\n        handleError( new Exception( msg.toString() ) );\n     }\n }  /** catch added here */\n catch(Exception e) {\n     handleError( e);\n } finally {\n   try {\n      // make sure to release the connection\n       if(method != null)\n           method.releaseConnection();\n      }\n      catch( Exception ex ){}\n}\n\n "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12988528",
            "date": "2011-01-30T01:48:59+0000",
            "content": "Oops, I saw Johannes fix posted in SOLR-1744 and didn't know this issue existed.\nAnyway, this should now be fixed in 3x and trunk. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-13013264",
            "date": "2011-03-30T15:46:01+0000",
            "content": "Bulk close for 3.1.0 release "
        },
        {
            "author": "Jan H\u00f8ydahl",
            "id": "comment-13188582",
            "date": "2012-01-18T18:16:00+0000",
            "content": "Linking to the issue that actually got committed "
        }
    ]
}