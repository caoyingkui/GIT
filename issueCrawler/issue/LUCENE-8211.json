{
    "id": "LUCENE-8211",
    "title": "GeoComplexPolygon throws error when checking within() for a point parallel to test point",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Bug",
        "components": [
            "modules/spatial3d"
        ],
        "fix_versions": [
            "6.7",
            "7.3",
            "master (8.0)"
        ]
    },
    "description": "If a GeoComplexPolygon is created with test point (x, y, z) and we try to check if point(-x,-y,-z) is {{within()}}then an error is thrown. It seems we need to handle the case when a point is parallel to the test point but not identical.",
    "attachments": {
        "LUCENE-8211.patch": "https://issues.apache.org/jira/secure/attachment/12914842/LUCENE-8211.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16401615",
            "date": "2018-03-16T09:04:35+0000",
            "content": "Attached a test with the described behavior. Not sure about the fix. If the point to check is paralell to the test point but not identical then should we return !testPointInSet? Not sure if that is true in all cases. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16401696",
            "date": "2018-03-16T09:54:28+0000",
            "content": "Updated the tst. Actually the check point is not parallel to the test point but only in two dimensions and equal on the third. ",
            "author": "Ignacio Vera"
        },
        {
            "id": "comment-16401718",
            "date": "2018-03-16T10:31:37+0000",
            "content": "Ignacio Vera, the logic in this class counts the edge crossings starting at the interior point (which is what you are calling the \"test point\") and going to the point to determine membership of (you are calling this the \"check point\").  In order to do this, it potentially assesses crossings on three planes: an X plane, a Y plane, and a Z plane.  A path is constructed from the interior point is on to the \"check point\".  When your \"check point\" is on the same plane as the interior point in any one of these dimensions, then travel along that particular plane is no longer necessary to get from the interior point to your check point, so only travel on two planes, or even one plane, is done.  There is obviously special case logic to detect that situation.\n\nThis code is quite tricky and I will have to look at this on a day that isn't a workday to have the time to sort it out. ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16401887",
            "date": "2018-03-16T13:27:06+0000",
            "content": "The logic that is incorrect is here:\n\n\n    // If we're right on top of any of the test planes, we navigate solely on that plane.\n    if (testPointFixedYPlane.evaluateIsZero(x, y, z)) {\n      // Use the XZ plane exclusively.\n      final LinearCrossingEdgeIterator crossingEdgeIterator = new LinearCrossingEdgeIterator(testPointFixedYPlane, testPointFixedYAbovePlane, testPointFixedYBelowPlane, x, y, z);\n      // Traverse our way from the test point to the check point.  Use the y tree because that's fixed.\n      if (!yTree.traverse(crossingEdgeIterator, testPoint.y)) {\n        // Endpoint is on edge\n        return true;\n      }\n      return ((crossingEdgeIterator.crossingCount & 1) == 0)?testPointInSet:!testPointInSet;\n    } else if (testPointFixedXPlane.evaluateIsZero(x, y, z)) {\n      // Use the YZ plane exclusively.\n      final LinearCrossingEdgeIterator crossingEdgeIterator = new LinearCrossingEdgeIterator(testPointFixedXPlane, testPointFixedXAbovePlane, testPointFixedXBelowPlane, x, y, z);\n      // Traverse our way from the test point to the check point.  Use the x tree because that's fixed.\n      if (!xTree.traverse(crossingEdgeIterator, testPoint.x)) {\n        // Endpoint is on edge\n        return true;\n      }\n      return ((crossingEdgeIterator.crossingCount & 1) == 0)?testPointInSet:!testPointInSet;\n    } else if (testPointFixedZPlane.evaluateIsZero(x, y, z)) {\n      // Use the XY plane exclusively.\n      final LinearCrossingEdgeIterator crossingEdgeIterator = new LinearCrossingEdgeIterator(testPointFixedZPlane, testPointFixedZAbovePlane, testPointFixedZBelowPlane, x, y, z);\n      // Traverse our way from the test point to the check point.  Use the z tree because that's fixed.\n      if (!zTree.traverse(crossingEdgeIterator, testPoint.z)) {\n        // Endpoint is on edge\n        return true;\n      }\n      return ((crossingEdgeIterator.crossingCount & 1) == 0)?testPointInSet:!testPointInSet;\n    } else {\n      \n      // This is the expensive part!!\n...\n\n\n\nThis code is looking for the \"shortcut\" solution in either of the three planes (X, Y, or Z) that go through the test point.  Unfortunately, that logic is incorrect because it uses the same point as a sidedness check for the cutoff planes it's going to construct!  I'll need to rethink a bit about how best to do this... ",
            "author": "Karl Wright"
        },
        {
            "id": "comment-16401989",
            "date": "2018-03-16T14:44:23+0000",
            "content": "Commit 349579f010e9d4a652570d82ca165cf4c877e840 in lucene-solr's branch refs/heads/master from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=349579f ]\n\nLUCENE-8211: Handle the case where we've got a full-half-world single-plane path in GeoComplexPolygon. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16401990",
            "date": "2018-03-16T14:45:22+0000",
            "content": "Commit 1b38998379d32f9f217bf4ed640dd279f7c6237b in lucene-solr's branch refs/heads/branch_7x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1b38998 ]\n\nLUCENE-8211: Handle the case where we've got a full-half-world single-plane path in GeoComplexPolygon. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16401991",
            "date": "2018-03-16T14:45:53+0000",
            "content": "Commit 50724b78fe9f5022d1a76e394d22b1195beda5be in lucene-solr's branch refs/heads/branch_6x from Karl Wright\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=50724b7 ]\n\nLUCENE-8211: Handle the case where we've got a full-half-world single-plane path in GeoComplexPolygon. ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16401997",
            "date": "2018-03-16T14:53:03+0000",
            "content": "Thanks Karl Wright! So there is no shortest path so choose one arbitrarily ",
            "author": "Ignacio Vera"
        }
    ]
}