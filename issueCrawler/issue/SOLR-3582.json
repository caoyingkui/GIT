{
    "id": "SOLR-3582",
    "title": "Our ZooKeeper watchers respond to session events as if they are change events, creating undesirable side effects.",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.0-BETA",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "As brought up by Trym R. M\u00f8ller on the mailing list, we are responding to watcher events about connection/disconnection as if they were notifications about node changes.\n\nhttp://www.lucidimagination.com/search/document/e13ef390b88eeee2",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "author": "Mark Miller",
            "id": "comment-13402388",
            "date": "2012-06-27T17:38:12+0000",
            "content": "I'm unsure of the proposed solution on the mailing list.\n\nOn a connection event, the watch will fire - we will skip doing anything, but watches are one time events, so we will have no watch in place? "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13402398",
            "date": "2012-06-27T17:52:30+0000",
            "content": "Never mind - found confirmation elsewhere that session events do not remove the watcher. The ZooKeeper programming guide does not appear very clear on this when it talks about watches being one time triggers. "
        },
        {
            "author": "Trym M\u00f8ller",
            "id": "comment-13402851",
            "date": "2012-06-28T05:10:09+0000",
            "content": "Debugging the provided test shows this behaviour as well, that is, the Watch is kept even though, its notified about disConnection and syncConnection and the Watch will first \"stop\" after it has been notified about a node change.\n\nAs Mark writes on the mailing list, there might be other ZooKeeper Watchers in Solr which might add new watchers on reconnect.\n\nIf we agree about the ZooKeeper watcher behaviour, then I think that the provided bug fix solves the problem in the LeaderElector and it can be committed to svn independently of problems with other watchers. Are there other things I can do to show, that the provided solution is the right one?\n\nBest regards Trym "
        },
        {
            "author": "Per Steffensen",
            "id": "comment-13403041",
            "date": "2012-06-28T12:02:59+0000",
            "content": "Trym didnt mention it, but this is not only a negligible problem that will never cause any problems in real-world usage. Actually we discovered the problem during one of our performance/endurance test of our real world application in a real world setup and with real world workload (high). We are running with numerous Solr instances in a SolrCloud cluster, with numerous collections each having about 25 slices each with 2 shards (one replica for each slice). During the test Solrs lose their ZK connection (probably due to too long GC pause) and reconnect - resulting in more watchers. The next time a dis-/re-connect to ZK happens it gets many watcher-events resulting in even more watchers for the next time. All in all, seen from the outside, this breaks our performance/endurance test - at first things starts to slow down and eventually JVMs break down with OOM errors. This is a self-reinforcing problem, because for every iteration more time has to be used by the garbage collector collecting watchers (twice as many as last time), increasing the probability of new ZK timeouts, and more time has to be used creating new watchers (twice as many as last time).\n\nI think you should commit the fix. Basically because it makes a (our) real world application able to run for a long time - it wasnt before. Commit the fix, not so much for our sake, because we are using our own build of Solr (inkl this fix, other fixes and nice impl of optimistic locking etc (SOLR-3173, SOLR-3178, etc)) anyway, but to save others (that might also be among the \"first movers\" on using Solr 4.0 for high scale real world applications) from having to use weeks tracking down the essence of this issue and make a fix.\n\nIf you think this observation/fix should lead to a walk through of the code, to check if watchers are used undesirably at other places, and maybe even come to a more generic fix, I would endorse such a task. But for now I urge you to commit to save others from weeks of debugging. If/when you come to a better or more generic solution, you can always go refactor.\n\nRegards, Per Steffensen "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13403091",
            "date": "2012-06-28T13:32:31+0000",
            "content": "Thanks Trym! "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13412238",
            "date": "2012-07-11T22:32:44+0000",
            "content": "hoss20120711-manual-post-40alpha-change "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-13958277",
            "date": "2014-04-02T22:44:47+0000",
            "content": "\nNever mind - found confirmation elsewhere that session events do not remove the watcher. The ZooKeeper programming guide does not appear very clear on this when it talks about watches being one time triggers.\n\nMark, is this true even if the event is \"Expired\"? I don't know how zookeeper works in detail, but I'd be surprised if it would keep watchers across sessions (how can it figure out which session re-establishment is related to the expired session?). "
        },
        {
            "author": "Mark Miller",
            "id": "comment-13958299",
            "date": "2014-04-02T23:01:35+0000",
            "content": "If the session is expired you have to create all new watchers - you also have to create a new ZooKeeper client instance. Watchers do not span sessions. "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-13958332",
            "date": "2014-04-02T23:32:25+0000",
            "content": "Thanks Mark, that's what I thought. I think we might need to do some type of isLeader clean-up if we get an Expired here (in the patch)-I'm suspecting this is related to some sort of recovery race/ error I'm seeing-but I'm going to open a new jira with more descriptions. Thanks. "
        },
        {
            "author": "Jessica Cheng Mallet",
            "id": "comment-13958339",
            "date": "2014-04-02T23:35:48+0000",
            "content": "Sorry, \"if we get an Expired here with certain conditions\". That was really unclear. I'll just open a new jira with more info... "
        }
    ]
}