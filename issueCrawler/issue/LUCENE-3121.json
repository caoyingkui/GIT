{
    "id": "LUCENE-3121",
    "title": "FST should offer lookup-by-output API when output strictly increases",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/other"
        ],
        "type": "Improvement",
        "fix_versions": [
            "3.6",
            "4.0-ALPHA"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Spinoff from \"FST and FieldCache\" java-dev thread http://lucene.markmail.org/thread/swoawlv3fq4dntvl\n\nFST is able to associate arbitrary outputs with the sorted input keys, but in the special (and, common) case where the function is strictly monotonic (each output only \"increases\" vs prior outputs), such as mapping to term ords or mapping to file offsets in the terms dict, we should offer a lookup-by-output API that efficiently walks the FST and locates input key (exact or floor or ceil) matching that output.",
    "attachments": {
        "LUCENE-3121.patch": "https://issues.apache.org/jira/secure/attachment/12510981/LUCENE-3121.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-01-18T13:54:46+0000",
            "content": "Patch, adding Util.getByOutput.  I think it's ready.\n\nIt only works w/ an FST whose outputs are strictly monotonically increasing w/ the inputs.\n\nCurrently it only works with FST<Long> but we can \"generify\" that at some point...\n\nThis is only the \"exact\" case; in theory we could do floor/ceiling too, but it'd be just as hairy as seekFloor/seekCeil in FSTEnum... let's wait for a real need. ",
            "author": "Michael McCandless",
            "id": "comment-13188447"
        },
        {
            "date": "2012-01-18T15:01:07+0000",
            "content": "Awesome Mike!  Would the next step being applying this to the Field Cache? ",
            "author": "David Smiley",
            "id": "comment-13188488"
        },
        {
            "date": "2012-01-18T18:55:43+0000",
            "content": "The patch looks good to me. Although I must say the API makes it more complex than it really is (those nextFinalOutputs and \"real\" vs non-real arcs in readFirstRealArc... brr...  ",
            "author": "Dawid Weiss",
            "id": "comment-13188620"
        },
        {
            "date": "2012-01-19T13:46:02+0000",
            "content": "Would the next step being applying this to the Field Cache?\n\nThat would be interesting!  Or, maybe to DocValues instead...\n\nToday neither DocValues nor FieldCache use an FST to hold the term data, but you're right we could explore this now, since we can lookup-by-ord or lookup-by-address (with this patch).\n\nFor example, the DocValues.BYTES_VAR/FIXED_SORTED_DEREF could hold the Term <-> ord/address map as an FST (doc -> ord/address would still be packed ints)... same for FieldCache.DocTermsIndex/.DocTermOrds This should be a sizable reduction in RAM required for the term data... but lookup time would get slower too. ",
            "author": "Michael McCandless",
            "id": "comment-13189110"
        },
        {
            "date": "2012-01-19T14:50:56+0000",
            "content": "That would be interesting! Or, maybe to DocValues instead...\n\nYes, that is in fact the very idea I had originally that I raised on the list that you in turn created this JIRA issue for. It was almost a year ago so perhaps you forgot.  Well this JIRA issue would be the first step, the next step would be another JIRA issue for Field Cache integration and another for DocValues.  I feel a tad guilty for suggesting this work without taking part... I'm neck deep in geospatial Lucene extensions. ",
            "author": "David Smiley",
            "id": "comment-13189137"
        },
        {
            "date": "2012-01-19T16:16:19+0000",
            "content": "Yes, that is in fact the very idea I had originally that I raised on the list that you in turn created this JIRA issue for. \n\nAha!  Thanks for reminding me   I think it would work well... the FST should compress the terms nicely; just a question of at what cost to lookup time.  But, then, for some cases of DV/FC consumption the doc -> ord lookup is far more important (which wouldn't change), so it could be a good win... ",
            "author": "Michael McCandless",
            "id": "comment-13189175"
        }
    ]
}