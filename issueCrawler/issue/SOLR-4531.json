{
    "id": "SOLR-4531",
    "title": "Add tests to ensure that recovery does not fail on corrupted tlogs",
    "details": {
        "affect_versions": "4.0",
        "status": "Closed",
        "fix_versions": [
            "6.3",
            "7.0"
        ],
        "components": [
            "SolrCloud"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "One of the solr nodes in our SolrCloud was killed. It caused tlog was corrupted. Now the node can't finish recoverying. There is an excepion:\nCaused by: java.lang.IndexOutOfBoundsException: Index: 14, Size: 13\n\tat java.util.ArrayList.RangeCheck(ArrayList.java:547)\n\tat java.util.ArrayList.get(ArrayList.java:322)\n\tat org.apache.solr.update.TransactionLog$LogCodec.readExternString(TransactionLog.java:128)\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:188)\n\tat org.apache.solr.common.util.JavaBinCodec.readOrderedMap(JavaBinCodec.java:120)\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:184)\n\tat org.apache.solr.common.util.JavaBinCodec.readArray(JavaBinCodec.java:451)\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:182)\n\tat org.apache.solr.common.util.JavaBinCodec.readOrderedMap(JavaBinCodec.java:121)\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:184)\n\tat org.apache.solr.common.util.JavaBinCodec.readArray(JavaBinCodec.java:451)\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:182)\n\tat org.apache.solr.common.util.JavaBinCodec.readArray(JavaBinCodec.java:451)\n\tat org.apache.solr.common.util.JavaBinCodec.readVal(JavaBinCodec.java:182)\n\tat org.apache.solr.update.TransactionLog$ReverseReader.next(TransactionLog.java:708)\n\tat org.apache.solr.update.UpdateLog$RecentUpdates.update(UpdateLog.java:906)\n\tat org.apache.solr.update.UpdateLog$RecentUpdates.access$000(UpdateLog.java:846)\n\tat org.apache.solr.update.UpdateLog.getRecentUpdates(UpdateLog.java:996)\n\tat org.apache.solr.update.UpdateLog.init(UpdateLog.java:241)\n\tat org.apache.solr.update.UpdateHandler.initLog(UpdateHandler.java:94)\n\tat org.apache.solr.update.UpdateHandler.<init>(UpdateHandler.java:123)\n\tat org.apache.solr.update.DirectUpdateHandler2.<init>(DirectUpdateHandler2.java:97)\n\t... 31 more\n\nI check the code in UpdateLog.java. I find that only IOException is catched when the above expception happens.\n\nsolr\\core\\src\\java\\org\\apache\\solr\\update\\UpdateLog.java\n    private void update() {\n      int numUpdates = 0;\n      updateList = new ArrayList<List<Update>>(logList.size());\n      deleteByQueryList = new ArrayList<Update>();\n      deleteList = new ArrayList<DeleteUpdate>();\n      updates = new HashMap<Long,Update>(numRecordsToKeep);\n\n      for (TransactionLog oldLog : logList) {\n        List<Update> updatesForLog = new ArrayList<Update>();\n\n        TransactionLog.ReverseReader reader = null;\n        try {\n          reader = oldLog.getReverseReader();\n\n          while (numUpdates < numRecordsToKeep) {\n            Object o = reader.next();\n            if (o==null) break;\n            try {\n\n              // should currently be a List<Oper,Ver,Doc/Id>\n              List entry = (List)o;\n\n              // TODO: refactor this out so we get common error handling\n              int opAndFlags = (Integer)entry.get(0);\n              if (latestOperation == 0) {\n                latestOperation = opAndFlags;\n              }\n              int oper = opAndFlags & UpdateLog.OPERATION_MASK;\n              long version = (Long) entry.get(1);\n\n              switch (oper) {\n                case UpdateLog.ADD:\n                case UpdateLog.DELETE:\n                case UpdateLog.DELETE_BY_QUERY:\n                  Update update = new Update();\n                  update.log = oldLog;\n                  update.pointer = reader.position();\n                  update.version = version;\n\n                  updatesForLog.add(update);\n                  updates.put(version, update);\n                  \n                  if (oper == UpdateLog.DELETE_BY_QUERY) {\n                    deleteByQueryList.add(update);\n                  } else if (oper == UpdateLog.DELETE) {\n                    deleteList.add(new DeleteUpdate(version, (byte[])entry.get(2)));\n                  }\n                  \n                  break;\n\n                case UpdateLog.COMMIT:\n                  break;\n                default:\n                  throw new SolrException(SolrException.ErrorCode.SERVER_ERROR,  \"Unknown Operation! \" + oper);\n              }\n            } catch (ClassCastException cl) {\n              log.warn(\"Unexpected log entry or corrupt log.  Entry=\" + o, cl);\n              // would be caused by a corrupt transaction log\n            } catch (Exception ex) {\n              log.warn(\"Exception reverse reading log\", ex);\n              break;\n            }\n          }\n\n        } catch (IOException e) {\n          // failure to read a log record isn't fatal\n          log.error(\"Exception reading versions from log\",e);\n        } finally {\n          if (reader != null) reader.close();\n        }\n        updateList.add(updatesForLog);\n      }\n\n    }",
    "attachments": {
        "SOLR-4531.patch": "https://issues.apache.org/jira/secure/attachment/12831913/SOLR-4531.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Cao Manh Dat",
            "id": "comment-15518298",
            "date": "2016-09-24T03:49:47+0000",
            "content": "Mark Miller Is this issue duplicated with SOLR-4359? "
        },
        {
            "author": "Cao Manh Dat",
            "id": "comment-15551239",
            "date": "2016-10-06T07:52:27+0000",
            "content": "Patch contain a test for this issue. \n\nIn the test, It create corrupted tlog files by remove some last byte of the file and make sure the cluster still healthy.\n\nThis patch also modify TestLeaderRecoverFromLogOnStartup to make a cleaner test for SOLR-5401 based on Varun Thacker hint.\n\nShalin Shekhar Mangar Please kindly review this patch. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15604170",
            "date": "2016-10-25T04:44:09+0000",
            "content": "I don't see how this issue was/is fixed. Seems like it can still happen? It's good that you randomize the number of bytes to truncate. Can you beast this test to see if we can get it to fail?\n\nLooking at the patch \u2013 the cluster.startJettySolrRunner() calls are redundant?\n\n+\n+    ChaosMonkey.start(cluster.getJettySolrRunners());\n+    cluster.startJettySolrRunner();\n+    cluster.startJettySolrRunner();\n+    cluster.startJettySolrRunner();\n+    cluster.startJettySolrRunner();\n\n "
        },
        {
            "author": "Cao Manh Dat",
            "id": "comment-15604254",
            "date": "2016-10-25T05:27:08+0000",
            "content": "The patch just contain the test, because this issue already fixed by SOLR-4359.\n\n "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15604296",
            "date": "2016-10-25T05:47:55+0000",
            "content": "I looked at the SOLR-4359 commit but I don't see where an IndexOutOfBoundsException is caught. The only error handling that SOLR-4359 added was to skip the tlog if the next record is null. "
        },
        {
            "author": "Cao Manh Dat",
            "id": "comment-15604325",
            "date": "2016-10-25T06:05:41+0000",
            "content": "The reader.next() move inside the try catch block in SOLR-4359 solve this issue, because the general Exception is caught for this block so IndexOutOfBoundsException will also be caught by this block. The outer block just catch IOException so the exception will be throw outside of the method. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15604330",
            "date": "2016-10-25T06:09:30+0000",
            "content": "Ah, I missed that inner try/catch block. Thanks for clarifying. I'll commit this shortly. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15604368",
            "date": "2016-10-25T06:25:18+0000",
            "content": "Patch which removes the redundant cluster.startJettySolrRunner() calls. I'll commit this after running precommit and tests. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15604402",
            "date": "2016-10-25T06:43:15+0000",
            "content": "Commit b7aa582dffd7a0bae3246e43c66a20a9c2e5341d in lucene-solr's branch refs/heads/master from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b7aa582 ]\n\nSOLR-4531: Add tests to ensure that recovery does not fail on corrupted tlogs "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-15604405",
            "date": "2016-10-25T06:43:54+0000",
            "content": "Commit 529654c02be519accf0e83a5919570fa2d9bc69d in lucene-solr's branch refs/heads/branch_6x from Shalin Shekhar Mangar\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=529654c ]\n\nSOLR-4531: Add tests to ensure that recovery does not fail on corrupted tlogs\n\n(cherry picked from commit b7aa582) "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15604428",
            "date": "2016-10-25T06:55:04+0000",
            "content": "Thanks Simon and Dat! "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-15621647",
            "date": "2016-10-31T08:52:18+0000",
            "content": "I've seen this test fail a couple of times, I think due to collections not being fully active when the @Before method is run: see https://jenkins.thetaphi.de/job/Lucene-Solr-6.x-Linux/2078/consoleFull for example.  If the collection isn't fully active, then the DBQ and commit get buffered, and the query to check that the collection is empty is served by an old searcher and consequently fails.\n\nTo fix, I'd suggest either adding a waitForState() call in the @Before method, or just creating a new collection per-method. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-15650280",
            "date": "2016-11-09T08:38:26+0000",
            "content": "Closing after 6.3.0 release. "
        }
    ]
}