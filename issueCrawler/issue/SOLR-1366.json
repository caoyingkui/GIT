{
    "id": "SOLR-1366",
    "title": "UnsupportedOperationException may be thrown when using custom IndexReader",
    "details": {
        "affect_versions": "1.4",
        "status": "Closed",
        "fix_versions": [
            "1.4"
        ],
        "components": [
            "replication (java)",
            "search"
        ],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "If a custom IndexReaderFactory is specifiedd in solrconfig.xml, and IndexReader-s that it produces don't support IndexReader.directory() (such as is the case with ParallelReader or MultiReader) then an uncaught UnsupportedOperationException is thrown.\n\nThis call is used only to retrieve the full path of the directory for informational purpose, so it shouldn't lead to a crash. Instead we could supply other available information about the reader (e.g. from its toString() method).",
    "attachments": {
        "searcher.patch": "https://issues.apache.org/jira/secure/attachment/12416859/searcher.patch",
        "SOLR-1366.patch": "https://issues.apache.org/jira/secure/attachment/12420272/SOLR-1366.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12744450",
            "date": "2009-08-18T10:35:46+0000",
            "content": "Patch that catches the exception and supplies IndexReader.toString() instead. "
        },
        {
            "author": "Mark Miller",
            "id": "comment-12744542",
            "date": "2009-08-18T15:12:17+0000",
            "content": "\n\nThis call is used only to retrieve the full path of the directory for informational purpose, so it shouldn't lead to a crash. \n\nThe replication handler uses it a lot (assuming its a file) - I almost feel we should add some javadoc about how using non FSDirectory based IndexReaders is supported. I'm not even fully sure myself.\n\nAlso, are we positive it behaves here correctly in SolrCore ?\n\n      File indexDirFile = new File(getIndexDir()).getCanonicalFile();\n      File newIndexDirFile = new File(newIndexDir).getCanonicalFile();\n      \n      if (newestSearcher != null && solrConfig.reopenReaders\n          && indexDirFile.equals(newIndexDirFile)) {\n\n "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12744993",
            "date": "2009-08-19T10:55:38+0000",
            "content": "Indeed, that complicates the matter ... It looks like using a non-file based IndexReader breaks replication. This is not a regression from 1.3, but the functionality to specify custom IndexReaders will be available in 1.4, so it should be clearly stated in docs that it prevents replication from working properly, until we rectify this issue. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12744996",
            "date": "2009-08-19T11:00:48+0000",
            "content": ".. I haven't looked into it yet, but perhaps this could be solved by extending the replication handler to support multiple dirs, and for those IndexReader that don't support directory() try asking for getSubReaders() and use their directory() ... "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12745042",
            "date": "2009-08-19T13:05:34+0000",
            "content": "Yeah, ReplicationHandler assumes a file based IndexReader. We can document this clearly.\n\n\n.. I haven't looked into it yet, but perhaps this could be solved by extending the replication handler to support multiple dirs, and for those IndexReader that don't support directory() try asking for getSubReaders() and use their directory() ... \n\nYes but that becomes complicated very fast. You'd need to know the correct directory to which a newly downloaded file has to be written on the slave. You'd also need to re-open readers selectively and you'd need to change their directories (for cases where an existing file is to be deleted/replaced).\n\nWe anyway need to take a look at replication again after 1.4 with a focus on Lucene's NRT capabilities. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12753289",
            "date": "2009-09-09T21:59:33+0000",
            "content": "FYI, for now I solved this by extending my IndexReader to support this call and return the original directory that lists all index files plus a few resources that I care about. However, this is just glossing over the deeper problem - replication handler shouldn't assume the directory is file-based. "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12753704",
            "date": "2009-09-10T16:54:20+0000",
            "content": "So, it seems for 1.4 we could fix this problem, add the documentation, and then open a new issue to deal with the replication problem in 1.5? "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12753711",
            "date": "2009-09-10T17:14:17+0000",
            "content": "So, it seems for 1.4 we could fix this problem\n\nWhat's the fix/workaround though?  Solr currently assumes a disk resident index, and the patch here makes up a directory... that doesn't seem like a good idea.  It also seems too late in the release cycle to try and abstract away from a disk index... potentially complex and invasive. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12753761",
            "date": "2009-09-10T18:39:16+0000",
            "content": "I didn't make myself clear .. I fixed this for my application, where I control the implementation of IndexReader, but I wouldn't recommend this fix for general use. So this was just FYI. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12756634",
            "date": "2009-09-17T17:25:35+0000",
            "content": "The core issue here seems to stem from incompatible assumptions between various pieces of code in Solr, and the new IndexReaderFactory functionality introduced in 1.4 by SOLR-243.\n\nIf we don't have a silver bullet for solving all the discrepancies before 1.4, then the safest approach seems to be making sure the documentation (and example configs) for IndexReaderFactory have big flashing red \"Experimental!\" disclaimers on them warning that using an IndexReaderFactory prevents certain other features from working (list all the ones we know about) and that the API for IndexReaderFactory may change at anytime w/o warning or be removed from future release if the problems can't be resolved.\n\nI'm tempted to suggest we remove SOLR-243 altogether, but there are some use cases of it that can work well for people, so it would be a shame to gut it completely. "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12756652",
            "date": "2009-09-17T17:42:08+0000",
            "content": "+1 for adding a big red flag. My application depends on this functionality, and it's working well once I overrode a bunch of additional methods in IndexReader that deal with Directory, IndexCommit, index version, etc.\n\n(A few details on this, and why my solution is not applicable in general case: I'm using ParallelReader, and the other indexes that I add are throwaways, i.e. I recreate them on each index refresh from external shared resources. So I basically short-circuited those methods that deal with directory and commits so that they return information from the main index. This way the file-based replication works as before for the main index). "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12758245",
            "date": "2009-09-22T13:37:20+0000",
            "content": "How about this?\n\n\n** Experimental Feature **\nPlease note - Using a custom IndexReaderFactory may prevent certain other features\nfrom working. The API to IndexReaderFactory may change without warning or may even\nbe removed from future releases if the problems cannot be resolved.\n\n** Features that may not work with custom IndexReaderFactory **\nThe ReplicationHandler assumes a disk-resident index. Using a custom\nIndexReader implementation may cause incompatibility between ReplicationHandler and\nmay cause replication to not work correctly. See SOLR-1366 for details.\n\n "
        },
        {
            "author": "Andrzej Bialecki",
            "id": "comment-12758381",
            "date": "2009-09-22T19:20:51+0000",
            "content": "Looks good to me, +1. "
        },
        {
            "author": "Shalin Shekhar Mangar",
            "id": "comment-12758395",
            "date": "2009-09-22T19:52:08+0000",
            "content": "Committed revision 817801.\n\nThanks everybody! "
        },
        {
            "author": "Grant Ingersoll",
            "id": "comment-12775485",
            "date": "2009-11-10T15:50:37+0000",
            "content": "Bulk close Solr 1.4 issues "
        }
    ]
}