{
    "id": "SOLR-11982",
    "title": "Add support for indicating preferred replica types for queries",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "SolrCloud"
        ],
        "type": "Improvement",
        "fix_versions": [
            "7.4",
            "master (8.0)"
        ],
        "affect_versions": "7.4,                                            master (8.0)",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "It would be nice to have the possibility to easily sort the shards in the preferred order e.g. by replica type. The attached patch adds support for shards.sort parameter that allows one to sort e.g. PULL and TLOG replicas first with {{shards.sort=replicaType:PULL|TLOG }}(which would mean that NRT replicas wouldn't be hit with queries unless they're the only ones available) and/or to sort by replica location (like preferLocalShards=true but more versatile).",
    "attachments": {
        "SOLR-11982-preferReplicaTypes.patch": "https://issues.apache.org/jira/secure/attachment/12913739/SOLR-11982-preferReplicaTypes.patch",
        "SOLR-11982.patch": "https://issues.apache.org/jira/secure/attachment/12912058/SOLR-11982.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2018-02-20T19:13:40+0000",
            "content": "Hello Ere Maijala,\n\nthanks for opening this ticket and attaching a patch with tests and solr ref guide documentation update.\n\nI agree the ability to prefer certain replica types would be a nice new feature.\n\nQuestion: would preferReplicaTypes=PULL,TLOG and preferReplicaTypes=TLOG,PULL be equivalent or would there be a difference i.e. the first type most preferred, the second type next preferred, and any other unmentioned types all equivally unpreferred?\n\nThanks for clarifying (in the documentation update part of the patch) the intended behaviour when both the existing preferLocalShards and the new preferReplicaTypes are specified.\n\n+This parameter overrides `preferLocalShards=true`. Both can be defined, but replicas of preferred types are always selected over local shards.\n\n\n\npreferReplicaTypes overrides preferLocalShards vs. preferLocalShards overrides preferReplicaTypes - what might the use cases in either scenario be? Or perhaps the two parameters could be mutually exclusive for less potential user confusion and a simpler implementation. What do you think?\n\nSpecific patch feedback from taking only a quick look: there seem to be quite a few whitespace change formatting changes which makes it tricky to 'see' the actual changes. Steps along the following lines could be one way to try and undo those whitespace reformats:\n\ngit checkout -b master-solr-11982 -t origin/master\ngit apply SOLR-11982.patch\ngit diff -w > temp.patch\ngit checkout HEAD --\ngit apply --ignore-whitespace temp.patch\n\n ",
            "author": "Christine Poerschke",
            "id": "comment-16370480"
        },
        {
            "date": "2018-02-20T19:26:48+0000",
            "content": "Ere Maijala Is this bit a typo in the docs? Shouldn't it be \"preferReplicaTypes=PULL,TLOG\" rather than \"preferLocalShards\"???\n\nSolr allows you to pass an optional string parameter named `preferReplicaTypes` to indicate that a distributed query should prefer replicas of given types when available. In other words, if a query includes e.g. `preferLocalShards=PULL,TLOG`,...\n\nChristine Poerschke One trick for whitespace bits if you use IntelliJ is to\n> apply the patch\n> command-9 to show local changes\n> bring the context menu up on the first one and select diff...\n> up in the upper left there's a drop-down and one of the choices is \"ignore whitespace/newlines\" or something like that.\n\nI agree though it's better to not reformat lots of whitespace....\n\nAlso, one option in IntelliJ that should be clicked is to auto-format only lines changed. There's an option somewhere in the IntelliJ preferences to insure this....\n ",
            "author": "Erick Erickson",
            "id": "comment-16370495"
        },
        {
            "date": "2018-02-21T12:59:36+0000",
            "content": "I've attached a new patch that should address all the comments. Sorry for the whitespace changes, they should be reverted now.\n\nChristine Poerschke Thanks for the feedback! The original patch didn't take the order of the preferred replica types to account, but the new patch does, since it can be useful too. I also tried to clarify the documentation so that the use case for both parameters is more clear. Does this help?\n\nErick Erickson Thanks, that was indeed a typo, now fixed. ",
            "author": "Ere Maijala",
            "id": "comment-16371370"
        },
        {
            "date": "2018-02-21T13:42:18+0000",
            "content": "I'm getting intermittent test failures with the v2 patch, investigating... ",
            "author": "Ere Maijala",
            "id": "comment-16371415"
        },
        {
            "date": "2018-02-21T13:58:31+0000",
            "content": "Patch v3 attached. This makes sure to use a new collection for the replica type test and that there are always replicas for all types. ",
            "author": "Ere Maijala",
            "id": "comment-16371431"
        },
        {
            "date": "2018-02-22T19:32:39+0000",
            "content": "Thanks Ere Maijala, this looks really good. Again, I'm trying to unify the API with the work done in SOLR-10880. SOLR-10880 attempts to filter the replicas that can be used for resolving a query using shards.filter. It feels like what you are doing here is sorting the replicas, to prefer some over others. How do you feel about using the a parameter like shards.sort, and making the value something like replicaType:PULL,replicaType:TLOG? local could actually be just a keyword of this new parameter, and someone could do:\n...&shards.sort=replicaType:PULL,local meaning \"use replicas of type PULL if available, otherwise prefer local cores, otherwise any replica\". In the future, the replica tags, as defined in SOLR-10880 could also be used for sorting and not only for filtering (i.e. ...&shards.sort=local,replicaProp:rack1,replicaProp:dc1). \nIf so, we can deprecate preferLocalShards ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16373310"
        },
        {
            "date": "2018-02-23T07:55:35+0000",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe I agree that it makes sense to unify the syntax. I'm not sure, though, that this should include preferLocalShards. I want to be able to say that I prefer local PULL replicas over remote PULL replicas, and with your proposed API that's not possible, right? ",
            "author": "Ere Maijala",
            "id": "comment-16374052"
        },
        {
            "date": "2018-02-26T13:52:08+0000",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe At a further thought, maybe including preferLocalShards will work. I'll put up a new patch shortly. ",
            "author": "Ere Maijala",
            "id": "comment-16376892"
        },
        {
            "date": "2018-02-26T15:38:50+0000",
            "content": "The latest patch switches to the syntax Tom\u00e1s Fern\u00e1ndez L\u00f6bbe suggested apart from the \"local\" option being \"replicaLocal\". This is actually quite nice in that the order of rules can be used to define which ones are the most important.\n\nOne option to go a bit further would be to define \"replicaLocation\" instead of \"replicaLocal\" which, for now, would only support \"local\" as the value but could be easily extended to support e.g \"replicaLocation:http://server2.something\". What do you think? ",
            "author": "Ere Maijala",
            "id": "comment-16377049"
        },
        {
            "date": "2018-02-27T12:08:17+0000",
            "content": "I liked the idea of \"replicaLocation\" enough that I implemented support for it in the latest patch. ",
            "author": "Ere Maijala",
            "id": "comment-16378477"
        },
        {
            "date": "2018-02-27T12:20:05+0000",
            "content": "One more version to make sure a rule is only split into two parts so that e.g. `replicaLocation:http://server1` works. ",
            "author": "Ere Maijala",
            "id": "comment-16378485"
        },
        {
            "date": "2018-03-06T01:48:15+0000",
            "content": "Thanks Ere, I'll take a look at your patch as soon as I can ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16387131"
        },
        {
            "date": "2018-03-07T02:19:05+0000",
            "content": "I created a review request with your latest patch. I'll add some comments there: https://reviews.apache.org/r/65942/ ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16388907"
        },
        {
            "date": "2018-03-08T11:50:02+0000",
            "content": "(somehow failed to send this comment yesterday)\n\nThanks for the review. I believe I've addressed the review comments, but please let me know if there are any remaining issues. ",
            "author": "Ere Maijala",
            "id": "comment-16391134"
        },
        {
            "date": "2018-03-08T20:57:36+0000",
            "content": "Thanks Ere Maijala. Code looks really good. I uploaded the latest patch and left some minor comments there. One thing I'm not 100% convinced yet is the pipe in the syntax. To me, pipe usually means \"OR\", but in this case, that is not the case, the order of the elements in does affect the output. Your code can also handle the comma separated clauses, so it seems like:\n\nshards.sort=replicaType:PULL|TLOG\n\nIs actually the same as \n\nshards.sort=replicaType:PULL,replicaType:TLOG\n\nWhat is the intention of including the pipe then? ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16391900"
        },
        {
            "date": "2018-03-09T01:02:34+0000",
            "content": "When I saw the review request on the mailing list for this issue, my thought was \"shards.sort?  what does sorting shards mean?\"  This is the precise reaction that the average user is going to have when they see the parameter name.\n\nI would very much prefer to have preferReplicaTypes and preferLocalShards.  These parameter names are straightforward and describe exactly what they do in a very compact way.  Regarding what to do when both are present: I think preferReplicaTypes should take priority.  Look for the preferred replica type (like TLOG) and if it is found, then decide whether there are any appropriate replicas of that type locally.  Perhaps the preferLocalShards parameter could accept true, false, and always as values \u2013 with the always value overriding that behavior.\n\nUsing a weird parameter name can be justified in cases where the concepts related to that parameter are complex.  It should make perfect sense to an average user once they have become familiar with the concepts, though.\n\nPreferring certain replica types is not a difficult concept, so the parameter name(s) should definitely be straightforward and nearly self-documenting. ",
            "author": "Shawn Heisey",
            "id": "comment-16392197"
        },
        {
            "date": "2018-03-09T01:38:31+0000",
            "content": "I disagree on the parameter name. I think shards.sort is pretty consistent with the rest of the Solr parameters. facet.sort sorts facets, group.sort sorts groups, shards.sort sorts the \"shards\" (taken, there is a misname in \"shards\" here, but it's how the parameter is called right now). Using this parameter is extensible to add more types of sorting (i.e. prefer replicas by tag, prefer non-leader replicas, preference by location like Ere implemented, all those a very valid use cases) and I think it's better for someone to go to the docs to understand how shards.sort works vs having a bunch of one-off parameters that users won't even know that exist. In general I think we need to reduce the amount of one-off parameters in Solr. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16392229"
        },
        {
            "date": "2018-03-09T04:00:12+0000",
            "content": "Ere Maijala, I'm thinking also that this feature won't work (as it is now) on single shard collections... We may need to add a similar logic to SolrJ (CloudSolrClient I guess). ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16392370"
        },
        {
            "date": "2018-03-09T07:30:36+0000",
            "content": "I don't feel strongly about either naming convention, but how do we proceed from here to agree on something? ",
            "author": "Ere Maijala",
            "id": "comment-16392528"
        },
        {
            "date": "2018-03-09T08:57:26+0000",
            "content": "I attached SOLR-11982-preferReplicaTypes.patch, which is a refined version of the original patch to add preferReplicaTypes parameter. This is a smaller change to the current functionality and does not require deprecating preferLocalShards, but then it doesn't allow as much flexibility as the shards.sort version. Both version fulfill my needs, but I'd really appreciate a clear decision which way is to be preferred.\n\nTom\u00e1s Fern\u00e1ndez L\u00f6bbe, I'll wait for the decision before addressing the latest review. You're right in that this doesn't work for single-shard collections but I don't think it needs to since the client, whatever it is, has full control over where to send the query. ",
            "author": "Ere Maijala",
            "id": "comment-16392615"
        },
        {
            "date": "2018-03-09T14:28:02+0000",
            "content": "I think shards.sort is pretty consistent with the rest of the Solr parameters. facet.sort sorts facets, group.sort sorts groups\n\nThose sort parameters affect the order of information in search results.  The one discussed here is unlikely in most situations to have any effect at all on the order of results.\n\nIf you're determined to use a sort parameter, I won't stand in your way.  I've said why I don't like it, and you're free to say that my worries are unfounded.  You might want to consider replica.sort instead of shards.sort, since it's actually replicas that are being sorted.\n\nOne more thing, I should create a new issue for this: We have a lot of inconsistency on multi-word parameter names.  Some of them have the parts separated by periods, some of them use camelCase.  We really should standardize on one style, and remove old parameters in 8.0.  I'm leaning towards the period separator, simply because if we can make parameter names case-insensitive, users are less likely to type parameters incorrectly. ",
            "author": "Shawn Heisey",
            "id": "comment-16392931"
        },
        {
            "date": "2018-03-09T17:47:40+0000",
            "content": "I think it should be a single parameter that can address the different types of preference, not different parameters one for each type. In general I like the syntax discussed here so far (I have that concern of the pipe I mentioned before). I also feel it falls into the \"shards\" family of parameters. shards determines the replicas to which the distributed query should be sent, shards.info tells users which replicas responded a distributed query, etc. as I said before, I think it is close to what's discussed in SOLR-10880 and naming should be consistent. I'm ok with changing the word \"sort\" if you think that can confuse users. Do you think something like shards.preference would be better Shawn Heisey?\n\u00a0I don't think it needs to since the client, whatever it is, has full control over where to send the query.\nUnless they are using CloudSolrClient... but yes, in that case users can choose not to use it. In any case, I think that can be left to another Jira. We should include a big note in the docs though. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16393271"
        },
        {
            "date": "2018-03-12T11:00:20+0000",
            "content": "Added a new patch that should address the latest review comments. I also put all the strings to ShardParams and renamed replicaType to replica.type and replicaLocation to replica.location. ",
            "author": "Ere Maijala",
            "id": "comment-16395076"
        },
        {
            "date": "2018-03-12T12:09:36+0000",
            "content": "I moved the CHANGES.txt entry to version 7.4. ",
            "author": "Ere Maijala",
            "id": "comment-16395136"
        },
        {
            "date": "2018-03-24T07:52:40+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 2 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 47s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n -1 \n  compile  \n   1m 16s \n  core in the patch failed.  \n\n\n -1 \n  javac  \n   1m 16s \n  core in the patch failed.  \n\n\n -1 \n  Release audit (RAT)  \n   1m 16s \n  core in the patch failed.  \n\n\n +1 \n  Release audit (RAT)  \n   0m 15s \n  Release audit (RAT) rat-sources passed  \n\n\n +1 \n  Release audit (RAT)  \n   0m  5s \n  Release audit (RAT) rat-sources passed  \n\n\n -1 \n  Check forbidden APIs  \n   1m 16s \n  core in the patch failed.  \n\n\n -1 \n  Validate source patterns  \n   1m 16s \n  core in the patch failed.  \n\n\n -1 \n  Validate ref guide  \n   1m 16s \n  core in the patch failed.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n   0m 24s \n  core in the patch failed.  \n\n\n +1 \n  unit  \n   3m 39s \n  solrj in the patch passed.  \n\n\n  \n   \n   7m 43s \n   \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-11982 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12914028/SOLR-11982.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  validaterefguide  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / ea50409 \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_144 \n\n\n compile \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/artifact/out/patch-compile-solr_core.txt \n\n\n javac \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/artifact/out/patch-compile-solr_core.txt \n\n\n Release audit (RAT) \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/artifact/out/patch-compile-solr_core.txt \n\n\n Check forbidden APIs \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/artifact/out/patch-compile-solr_core.txt \n\n\n Validate source patterns \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/artifact/out/patch-compile-solr_core.txt \n\n\n Validate ref guide \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/artifact/out/patch-compile-solr_core.txt \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/testReport/ \n\n\n modules \n C: solr solr/core solr/solrj solr/solr-ref-guide U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/15/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16412473"
        },
        {
            "date": "2018-03-27T02:04:17+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n\u00a0\n\u00a0\n\u00a0\n  Prechecks  \n\n\n +1 \n  test4tests  \n   0m  0s \n  The patch appears to include 2 new or modified test files.  \n\n\n\u00a0\n\u00a0\n\u00a0\n  master Compile Tests  \n\n\n +1 \n  compile  \n   1m 38s \n  master passed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Patch Compile Tests  \n\n\n +1 \n  compile  \n   1m 30s \n  the patch passed  \n\n\n +1 \n  javac  \n   1m 30s \n  the patch passed  \n\n\n +1 \n  Release audit (RAT)  \n   1m 24s \n  the patch passed  \n\n\n +1 \n  Check forbidden APIs  \n   1m 15s \n  the patch passed  \n\n\n +1 \n  Validate source patterns  \n   1m 15s \n  the patch passed  \n\n\n -1 \n  Validate ref guide  \n   1m 15s \n  Validate ref guide bare-bones-html-validation failed  \n\n\n\u00a0\n\u00a0\n\u00a0\n  Other Tests  \n\n\n -1 \n  unit  \n  48m 54s \n  core in the patch failed.  \n\n\n +1 \n  unit  \n   5m  4s \n  solrj in the patch passed.  \n\n\n  \n   \n  60m 13s \n   \n\n\n\n\n\n\n\n\n\n Reason \n Tests \n\n\n Failed junit tests \n solr.cloud.TestTlogReplica \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-11982 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12916188/SOLR-11982.patch \n\n\n Optional Tests \n  compile  javac  unit  ratsources  checkforbiddenapis  validatesourcepatterns  validaterefguide  \n\n\n uname \n Linux lucene1-us-west 3.13.0-88-generic #135-Ubuntu SMP Wed Jun 8 21:10:42 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux \n\n\n Build tool \n ant \n\n\n Personality \n /home/jenkins/jenkins-slave/workspace/PreCommit-SOLR-Build/sourcedir/dev-tools/test-patch/lucene-solr-yetus-personality.sh \n\n\n git revision \n master / 3adacbc \n\n\n ant \n version: Apache Ant(TM) version 1.9.3 compiled on April 8 2014 \n\n\n Default Java \n 1.8.0_144 \n\n\n Validate ref guide \n https://builds.apache.org/job/PreCommit-SOLR-Build/19/artifact/out/patch-bare-bones-html-validation-solr_solr-ref-guide.txt \n\n\n unit \n https://builds.apache.org/job/PreCommit-SOLR-Build/19/artifact/out/patch-unit-solr_core.txt \n\n\n  Test Results \n https://builds.apache.org/job/PreCommit-SOLR-Build/19/testReport/ \n\n\n modules \n C: solr solr/core solr/solrj solr/solr-ref-guide U: solr \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/19/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16414898"
        },
        {
            "date": "2018-03-27T10:44:54+0000",
            "content": "The QA is now passing for all the relevant parts, I believe. The failures are from untouched parts of the ref guide and a replica recovery test. ",
            "author": "Ere Maijala",
            "id": "comment-16415402"
        },
        {
            "date": "2018-03-27T17:23:19+0000",
            "content": "Thanks Ere Maijala. I've been traveling for the last couple of weeks. I'll take a look later this week ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16415955"
        },
        {
            "date": "2018-04-04T08:03:04+0000",
            "content": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe, did you have a chance to take a look yet? ",
            "author": "Ere Maijala",
            "id": "comment-16425148"
        },
        {
            "date": "2018-04-04T16:37:48+0000",
            "content": "Just my two cents, but I think that shards.preference is a lot clearer than shards.sort for this kind of option. sort is a defined parameter in Solr and I think using it in this context would muddy the term else where in Solr as well as add confusion here. This is a new type of behavior for Solr and therefore requires a new parameter name. I think shards.preference would work well in differentiating it as a new feature.\n\nshards.routing or shards.route may be even clearer names as they explicitly show that they are options for routing a request. The words preference and sort don't inherently\u00a0relate to routing, though preference does come closer. ",
            "author": "Houston Putman",
            "id": "comment-16425820"
        },
        {
            "date": "2018-04-04T20:30:08+0000",
            "content": "Ere Maijala Patch looks really good (it seems to have an unwanted change in TimeOut.java, I'll just skip that). I'll run some tests locally but I think it's ready to commit regardless of the final naming decision. I can just change the param name to whatever we agree on.\n\nThanks for your input Houston Putman, I like shards.routing. I'll rename to that if nobody disagrees. ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16426135"
        },
        {
            "date": "2018-04-05T06:40:00+0000",
            "content": "Thanks! I like shards.routing too. ",
            "author": "Ere Maijala",
            "id": "comment-16426529"
        },
        {
            "date": "2018-04-05T18:59:43+0000",
            "content": "Not trying to convert this to a bikeshed but I much prefer the shards.preference parameter.\n\nThis is inline with everything else and is much more open to being extended in the future.\n\nAlso, thanks for not going with the | as that to me would mean an OR and not a preferred order. ",
            "author": "Anshum Gupta",
            "id": "comment-16427448"
        },
        {
            "date": "2018-04-05T19:56:36+0000",
            "content": "Anshum Gupta, what do you see this option being extended to in the future beyond request routing? I agree keeping it generic would be good if the scope were to expand in the future, I just can't think of any\u00a0other feature that it would make sense for this option to govern. ",
            "author": "Houston Putman",
            "id": "comment-16427511"
        },
        {
            "date": "2018-04-10T07:39:28+0000",
            "content": "While I like shards.routing, to me (a non-native English speaker) it sounds stronger to me than shards.preference. That would speak for using shards.preference since it really just sets the preferred order and doesn't exclude others. Either way is fine with me though, I'd just like to use this with one name or another. ",
            "author": "Ere Maijala",
            "id": "comment-16431861"
        },
        {
            "date": "2018-04-11T00:27:46+0000",
            "content": "Uploaded patch with rename to shards.preference and minor changes to the docs (the examples). I'll commit tomorrow if there are no more concerns ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16433224"
        },
        {
            "date": "2018-04-11T23:24:33+0000",
            "content": "Commit 8927d469cb05c27db6864076010de039302c7e25 in lucene-solr's branch refs/heads/master from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=8927d46 ]\n\nSOLR-11982: Add support for indicating preferred replica types for queries ",
            "author": "ASF subversion and git services",
            "id": "comment-16434703"
        },
        {
            "date": "2018-04-11T23:25:05+0000",
            "content": "Commit ba26bf7c6f8dd28ef0438e719d9b0bb45a60dd58 in lucene-solr's branch refs/heads/branch_7x from Tom\u00e1s Fern\u00e1ndez L\u00f6bbe\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=ba26bf7 ]\n\nSOLR-11982: Add support for indicating preferred replica types for queries ",
            "author": "ASF subversion and git services",
            "id": "comment-16434704"
        },
        {
            "date": "2018-04-12T09:41:18+0000",
            "content": "\n\n\n  -1 overall \n\n\n\n\n\n\n\n\n\n Vote \n Subsystem \n Runtime \n Comment \n\n\n -1 \n  patch  \n   0m  4s \n  SOLR-11982 does not apply to master. Rebase required? Wrong Branch? See https://wiki.apache.org/solr/HowToContribute#Creating_the_patch_file for help.  \n\n\n\n\n\n\n\n\n\n Subsystem \n Report/Notes \n\n\n JIRA Issue \n SOLR-11982 \n\n\n JIRA Patch URL \n https://issues.apache.org/jira/secure/attachment/12918487/SOLR-11982.patch \n\n\n Console output \n https://builds.apache.org/job/PreCommit-SOLR-Build/50/console \n\n\n Powered by \n Apache Yetus 0.7.0   http://yetus.apache.org \n\n\n\n\n\n\nThis message was automatically generated.\n ",
            "author": "Lucene/Solr QA",
            "id": "comment-16435255"
        },
        {
            "date": "2018-04-12T17:19:29+0000",
            "content": "Resolving. Thanks Ere Maijala! ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16435980"
        },
        {
            "date": "2018-04-12T17:25:02+0000",
            "content": "Created SOLR-12217 for the single shard case ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16435995"
        },
        {
            "date": "2018-06-04T13:20:33+0000",
            "content": "I've got a question about this, sorry I didn't think of it while the issue was open.\n\nIf a preference is configured for TLOG replicas, what happens if a TLOG replica is elected leader?  I would think that most people would NOT want requests to go to that replica, because its operation while leader is the same as NRT. ",
            "author": "Shawn Heisey",
            "id": "comment-16500203"
        },
        {
            "date": "2018-06-04T13:37:54+0000",
            "content": "That's an issue if its type is still TLOG while it's serving as the leader. I'm under the impression that this should be a temporary situation, however, so it might very well be justified e.g. if the replica is on hardware that has the best capacity for handling queries. That's a hairy situation, though, since it's difficult to say what's the best thing to do. The logic could probably be extended with an option to prefer non-leaders. ",
            "author": "Ere Maijala",
            "id": "comment-16500222"
        },
        {
            "date": "2018-06-04T16:05:07+0000",
            "content": "I think this is expected, at least with the current state of things. A TLOG replica that is leader doesn't stop being a TLOG replica (the replica type is recorded on the cluster state and doesn't change). IMO, what we want is a rule that one can use to prefer leader (or not leader, which would be more common). Something like shards.preference=isLeader:false replicaType:TLOG ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16500426"
        },
        {
            "date": "2018-06-04T17:27:31+0000",
            "content": "Ere Maijala, that's why I had the question, because the type does remain TLOG even when it's leader.  But the way the replica works does change, so that effectively it works exactly the same as an NRT replica would in a leader role.\n\nIt would make sense to me if this feature were to treat a TLOG leader as if it were NRT.  But some minority of users might not actually want that behavior.  The solution suggested by Tom\u00e1s Fern\u00e1ndez L\u00f6bbe would allow whatever combination the user wants.\n\nI think that there are a couple of preference combinations that warrant some special action.  If somebody sets a preference for leaders and also sets a preference for PULL replicas, that should create an ERROR log entry, because it is not possible for a PULL replica to be leader.  A preference for leaders with TLOG replicas should produce a WARN log entry.  Because unusual or impossible preferences should just fall back to random when they cannot be achieved, it shouldn't stop Solr operation. ",
            "author": "Shawn Heisey",
            "id": "comment-16500566"
        },
        {
            "date": "2018-06-04T21:59:21+0000",
            "content": "unusual or impossible preferences should just fall back to random when they cannot be achieved, it shouldn't stop Solr operation\nThis is the way it will work right now. The value of the shards.preference is used to sort the (previously shuffled) list of replicas that can respond to a query, but it doesn't remove any replica from that list. If, for example, you say: shards.preference=PULL, and there are no PULL replicas in the shard, any non pull replica will be queried. The work for filtering replicas will be done in SOLR-10880 (in my TODOs list) ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16500920"
        },
        {
            "date": "2018-06-05T07:03:07+0000",
            "content": "I think it would be good to open a new issue for e.g the isLeader option and any further discussion on how the different cases should work. ",
            "author": "Ere Maijala",
            "id": "comment-16501390"
        },
        {
            "date": "2018-06-05T17:50:10+0000",
            "content": "+1 ",
            "author": "Tom\u00e1s Fern\u00e1ndez L\u00f6bbe",
            "id": "comment-16502197"
        },
        {
            "date": "2018-06-08T20:18:04+0000",
            "content": "Commit 4dacf9081240076dd421bdd9819c2f13aec19b8c in lucene-solr's branch refs/heads/master from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=4dacf90 ]\n\nSOLR-11982: Ref Guide: remove deprecated content; break up long paragraphs ",
            "author": "ASF subversion and git services",
            "id": "comment-16506523"
        },
        {
            "date": "2018-06-08T20:18:29+0000",
            "content": "Commit a05234f77739878215109e4959fb435486a85fb9 in lucene-solr's branch refs/heads/branch_7x from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a05234f ]\n\nSOLR-11982: Ref Guide: remove deprecated content; break up long paragraphs ",
            "author": "ASF subversion and git services",
            "id": "comment-16506526"
        },
        {
            "date": "2018-06-08T20:18:44+0000",
            "content": "Commit b3ec7510735e5f4a34e63a4977cdd5139d7135f8 in lucene-solr's branch refs/heads/branch_7_4 from Cassandra Targett\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=b3ec751 ]\n\nSOLR-11982: Ref Guide: remove deprecated content; break up long paragraphs ",
            "author": "ASF subversion and git services",
            "id": "comment-16506527"
        }
    ]
}