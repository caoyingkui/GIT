{
    "id": "SOLR-9521",
    "title": "Warm first searcher with queries from log file",
    "details": {
        "components": [
            "search"
        ],
        "type": "Improvement",
        "labels": "",
        "fix_versions": [],
        "affect_versions": "6.2",
        "status": "Open",
        "resolution": "Unresolved",
        "priority": "Minor"
    },
    "description": "The only way I know of to warm the first searcher before it is opened, is to hard code warming queries in\n\n\n<listener event=\"firstSearcher\" class=\"solr.QuerySenderListener\">\n\n\nFor our application, hard-coding is not a good solution since some of our more expensive filter queries change periodically.  \n\nI have created a plugin that warms the first searcher from the most recent entries in the log files.  In my opinion this capability ought to be part of solr, so I'm contributing my code in the hopes that it can be incorporated.\n\nIt works by wrapping an instance of QuerySenderListener, setting its \"queries\" argument from recent queries from the log files.  It is configured like this:\n\n\n<listener event=\"firstSearcher\" class=\"solrplugin.LogFileWarmer\">\n\n  <!-- The arguments shown below are the defaults and could be omitted -->\n\n  <!-- A list of filenames to search.  They are searched in the order\n       listed, and the lines in each file are searched in reverse\n       order, so that the most recent queries are used to warm the\n       cache.  Searching stops when it has gathered enough queries.\n  -->\n  <str name=\"file\">logs/solr.log</str>\n  <str name=\"file\">logs/solr.log.1</str>\n  <str name=\"file\">logs/solr.log.2</str>\n  <str name=\"file\">logs/solr.log.3</str>\n  <str name=\"file\">logs/solr.log.4</str>\n  <str name=\"file\">logs/solr.log.5</str>\n  <str name=\"file\">logs/solr.log.6</str>\n  <str name=\"file\">logs/solr.log.7</str>\n  <str name=\"file\">logs/solr.log.8</str>\n  <str name=\"file\">logs/solr.log.9</str>\n  \n  <!-- The maximum number of queries to use from logs -->\n  <int name=\"count\">100</int>\n  <!-- The maximum number of log lines to search in order to find <count> queries-->\n  <int name=\"maxLines\">1000000</int>\n  <!-- The regular expression that matches the query string from the log line.  It expects the query string to be in capture group 1. -->\n  <str name=\"regex\">path=/select params=\\{([^ ]+)\\} </str>\n\n  <!-- if no queries can be found in the log files, fall back to this -->\n  <arr name=\"fallback\">\n    <lst><str name=\"q\">solr</str><str name=\"sort\">price asc</str></lst>\n    <lst><str name=\"q\">rocks</str><str name=\"sort\">weight asc</str></lst>\n  </arr>\n<listener>",
    "attachments": {
        "LogFileWarmer.java": "https://issues.apache.org/jira/secure/attachment/12828691/LogFileWarmer.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2016-09-15T18:18:27+0000",
            "author": "Erick Erickson",
            "content": "How often are you restarting Solr and why? Historically firstSearcher hasn't gotten this kind of attention b/c the assumption is that restarting Solr is fairly rare. So I'm curious what your processes are that this is noticeable.\n\nNot disagreeing mind you, this looks useful, just wondering at the environment. ",
            "id": "comment-15494133"
        },
        {
            "date": "2016-09-15T20:31:23+0000",
            "author": "Russell Black",
            "content": "We are not restarting often.  We have been running a large solr 6 cluster (80 shards) for a few days.   We have a socketTimeout of 1500 ms on the SolrClient, a socketTimeout of 1000 ms on the shardHandlerFactory, and we are sending timeAllowed=1000 with every search.  Average response time is 30 ms.  We restarted solr on all the shards for the first time under a live load yesterday.  We restarted them 3 at a time.\n\nAfter the restart, the cold firstSearcher immediately started taking traffic.  The load on the servers went way up, compared to its pre-restart load, and all queries were completing in 1000 ms, presumably with partial results.  This high load continued for 20 minutes until finally I switched our site to point to our old search system.  We were later able to get them back online by gradually transitioning the traffic back to the new system. (I can control what percentage of searches are directed to the new solr cluster and change it in real time).  \n\nMy belief (and I could be wrong) is that the caches could never get populated after the restart because queries were being aborted early by the timeAllowed parameter and caches can't populate with partial results.  Hence my desire to properly warm the first searcher.   ",
            "id": "comment-15494444"
        },
        {
            "date": "2016-09-15T20:41:16+0000",
            "author": "Shawn Heisey",
            "content": "Those are exceptionally short timeouts.  Configuring timeouts that low is likely to cause issues.\n\nI understand a desire to ensure that no single component can tie things up for very long ... but I'd go with 30 seconds minimum for the socket timeouts, and probably a 5-10 second minimum for timeAllowed.\n\nWhat happens if you make a request that takes minutes ... like an optimize? ",
            "id": "comment-15494472"
        },
        {
            "date": "2016-09-16T03:37:22+0000",
            "author": "Shalin Shekhar Mangar",
            "content": "Thanks Russel this is very useful!\n\nI wonder if we can get rid of specifying the log file names in solrconfig.xml or at least make them optional. Now that Solr has got rid of the war and we control Jetty and logging, it should be possible to automatically detect the logging directory and use the recent log files.\n\nWe have a socketTimeout of 1500 ms on the SolrClient, a socketTimeout of 1000 ms on the shardHandlerFactory\n\nPlease be sure to use the \"async\" parameter for all collection APIs because the same shardHandlerFactory is used for all collection admin requests as well as the internal core admin requests performed as part of the collection APIs.\n\nTo Shawn's point of optimize \u2013 those use the update shard handler and won't be affected by HttpShardHandler. ",
            "id": "comment-15495269"
        },
        {
            "date": "2016-09-16T04:03:11+0000",
            "author": "Erick Erickson",
            "content": "I was wondering if, rather than mine the log files an alternate approach would be to serialize out the top N filterCache and/or queryResultCache entries and use those for firstSearcher? That would require the system to be up and running at least once, but so does mining log files. Plus it \"should\" be more robust than creating a regex for mining the log file.\n\nThis is just off the top of my head, I haven't thought about the details, e.g. when to serialize that out. At core close? With a collections API call? As part of the autowarming when a new searcher is opened?\n\nThrowing this out for discussion, no real opinion either way. ",
            "id": "comment-15495307"
        },
        {
            "date": "2016-09-16T12:33:26+0000",
            "author": "David Smiley",
            "content": "It's exciting to finally see a solution to this problem   I had worked on Endeca years ago and it had this feature. ",
            "id": "comment-15496221"
        },
        {
            "date": "2016-09-16T15:57:23+0000",
            "author": "Russell Black",
            "content": "I wonder if we can get rid of specifying the log file names in solrconfig.xml or at least make them optional. \n\nAll the parameters do have default values except for \"fallback\".  See the first xml comment in the example config in the description.  All arguments shown there are set to their default values.  \n\nPlease be sure to use the \"async\" parameter for all collection APIs because the same shardHandlerFactory is used for all collection admin requests as well as the internal core admin requests performed as part of the collection APIs.\n\nThe short timeouts are only used in the /select SearchHandler:\n\n<requestHandler name=\"/select\" class=\"solr.SearchHandler\">\n...\n     <shardHandlerFactory class=\"HttpShardHandlerFactory\">\n        <int name=\"socketTimeout\">1500</int>\n        <int name=\"connTimeout\">1500</int>\n     </shardHandlerFactory>\n</requestHandler>\n\n\n\nI have confirmed with the debugger that the OverseerCollectionMessageHandler which appears to service the collections APIs does not use the same ShardHandlerFactory.   ",
            "id": "comment-15496647"
        },
        {
            "date": "2016-09-16T17:00:00+0000",
            "author": "Russell Black",
            "content": "Our production system running a 3.6 solr cluster does something similar.  The first searcher warms itself by using the cache from another running server in the cluster.  It works by providing a cache implementation that keeps track of the query params for each cache entry:\n\n\n    <filterCache class=\"com.footnote.solr.RemoteAutoWarmCache\"\n                 impl=\"solr.FastLRUCache\"\n                 size=\"512\"\n                 initialSize=\"512\"\n                 autowarmCount=\"150\"/>\n\n    <queryResultCache class=\"com.footnote.solr.RemoteAutoWarmCache\"\n                     impl=\"solr.LRUCache\"\n                     size=\"512\"\n                     initialSize=\"512\"\n                     autowarmCount=\"150\"/>\n\n\n\nThen there is a request handler that serves up the top search queries from the cache:\n\n\n   <requestHandler name=\"/remoteautowarm\" class=\"com.footnote.solr.RemoteAutoWarmRequestHandler\" />\n\n\n\nAnd a firstSearcher listener that fetches the cache queries from the cluster's /remoteautowarm handler. \n\n\n    <listener event=\"firstSearcher\" class=\"com.footnote.solr.RemoteAutoWarmEventListener\">\n      <str name=\"url\">http://10.100.25.25/solr/remoteautowarm</str>\n      <arr name=\"fallback\">\n        <lst>\n          <str name=\"q\">static firstSearcher warming in solrconfig.xml</str>\n        </lst>\n      </arr>\n    </listener>\n\n\n\nI have been using this code in production on a 3.6 cluster for several years.  If you are interested, I can share the code. ",
            "id": "comment-15496817"
        }
    ]
}