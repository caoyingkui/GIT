{
    "id": "LUCENE-2396",
    "title": "remove version from core and contrib analyzers.",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "modules/analysis"
        ],
        "type": "Task",
        "fix_versions": [],
        "affect_versions": "3.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "Contrib/analyzers has no backwards-compatibility policy, so let's remove Version so the API is consumable.\n\nif you think we shouldn't do this, then instead explicitly state and vote on what the backwards compatibility policy for contrib/analyzers should be instead, or move it all to core.",
    "attachments": {
        "ASF.LICENSE.NOT.GRANTED--LUCENE-2396.patch": "https://issues.apache.org/jira/secure/attachment/12441842/ASF.LICENSE.NOT.GRANTED--LUCENE-2396.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-04-15T13:58:55+0000",
            "content": "Additionally, i would like to remove all \"CHANGES from backwards compatibility policy\" from contrib/CHANGES.\n\ncontrib has no backwards compatibility policy, so it makes no sense. these are just ordinary changes for Contrib. ",
            "author": "Robert Muir",
            "id": "comment-12857321"
        },
        {
            "date": "2010-04-15T14:05:31+0000",
            "content": "Also, i would like to remove all deprecated methods from contrib/analyzers as well.\n\nthis again shouldnt be a problem, as it has no back compat policy. ",
            "author": "Robert Muir",
            "id": "comment-12857325"
        },
        {
            "date": "2010-04-15T16:15:07+0000",
            "content": "attached is a patch, including CHANGES rewording.\n\nAll Lucene/Solr tests pass.\n\nIf no one objects, I plan to commit in a day or two. ",
            "author": "Robert Muir",
            "id": "comment-12857377"
        },
        {
            "date": "2010-04-15T16:23:42+0000",
            "content": "Are you sure you want to use LUCENE_CURRENT in some ctors? ",
            "author": "Uwe Schindler",
            "id": "comment-12857384"
        },
        {
            "date": "2010-04-15T16:27:09+0000",
            "content": "Are you sure you want to use LUCENE_CURRENT in some ctors?\n\nThe lucene core subclasses used by some analyzers require this, so another alternative is to create a static CONTRIB_ANALYZERS_VERSION = 3.1 for this purpose, and bump it every release. that's fine too. ",
            "author": "Robert Muir",
            "id": "comment-12857386"
        },
        {
            "date": "2010-04-15T16:31:23+0000",
            "content": "Robert I think this is great! Can we move more analyzers from core here? I think however that a backwards section in changes is important because it alerts users about those analyzers whose runtime behavior changed. Otherwise how would the poor uses know that? It doesn't mean you need to maintain back compat support but at least alert them when things change.\n\nEven if we eventually decide to remove API bw completely, a section in CHANGES will still be required to help users upgrade easily. ",
            "author": "Shai Erera",
            "id": "comment-12857388"
        },
        {
            "date": "2010-04-15T16:37:16+0000",
            "content": "\nRobert I think this is great! Can we move more analyzers from core here? I think however that a backwards section in changes is important because it alerts users about those analyzers whose runtime behavior changed. Otherwise how would the poor uses know that? It doesn't mean you need to maintain back compat support but at least alert them when things change.\n\nI think this belongs in Changes in Runtime Behavior. Its a question of wording..., which is why i renamed it as such in the patch.\n\nIf folks want to move the analyzers in core into here, that would be great too, even better the Solr analyzers. we can call it a module if we want, or whatever.\nBut for now, I'm working with what I got. ",
            "author": "Robert Muir",
            "id": "comment-12857395"
        },
        {
            "date": "2010-04-15T16:37:45+0000",
            "content": "Static? Weren't you against that!? \n\nBut if we remove back compat from analyzers why do we need Version? Or is this API bw that we remove? ",
            "author": "Shai Erera",
            "id": "comment-12857396"
        },
        {
            "date": "2010-04-15T16:39:58+0000",
            "content": "\nStatic? Weren't you against that!?\nBut if we remove back compat from analyzers why do we need Version? Or is this API bw that we remove?\n\nWhoah... don't get too excited .\n\nInternally some of these contrib analyzers subclass stuff thats in lucene core, which requires Version.\nIf this stuff was moved into say, contrib analyzers, then we wouldnt need this Internal-only-use Version arg. ",
            "author": "Robert Muir",
            "id": "comment-12857398"
        },
        {
            "date": "2010-04-15T16:41:42+0000",
            "content": "Static? Weren't you against that!? \n\nHe meant a static final! It is just to make the analyzers that depend on core stuff fix to a specific version. Until we have no more analyzers in core exspect Whitespace. ",
            "author": "Uwe Schindler",
            "id": "comment-12857402"
        },
        {
            "date": "2010-04-15T16:57:01+0000",
            "content": "Until we have no more analyzers in core exspect Whitespace.\n\nActually i think whitespace belongs in analyzers module too. I would suggest a TestAnalyzer in src/test, which might just be quick-and-dirty or whatever. ",
            "author": "Robert Muir",
            "id": "comment-12857412"
        },
        {
            "date": "2010-04-15T17:41:27+0000",
            "content": "Robert,\nI think this is a red-herring. There has been an implicit bw compat policy, with all the effort to maintain bw compat in the analyzers. With the re-shuffling of contrib this has been made a bit murky and does need to be re-addressed.\n\nHow is this any different than the discussion to eliminate Version altogether? I think that should be resolved first and this follow the lead of that.\n\nHow can one have a useful index across releases without a stable token stream? From the thread it is clear that few understand the impact of an analyzer on the usefulness of an index.\n\nIf this succeeds there is little reason to maintain Version at all.\n\n\u2013 DM ",
            "author": "DM Smith",
            "id": "comment-12857427"
        },
        {
            "date": "2010-04-15T17:55:56+0000",
            "content": "There has been an implicit bw compat policy,\n\nPart of the point of this patch for me was two things:\n\n\twhat would the code look like if we delete the back compat cruft?\n\twhy do i constantly hear different ideas about what contrib/analyzer's back compat and what it should be? I want it defined!\n\n\n\nAt first I said, this is a stupid idea, but I am gonna delete all the backwards cruft from a few Analyzers and just give it a try... its amazing how much easier it is to see what is going on when you delete the 1.8MB of backwards crap... a lot of it i put a lot of effort myself into.\n\nSo I think we should instead use real-versions for contrib/analyzers. You can be damn sure if you stick with lucene-analyzers-3.0.jar that your stemmer isn't going to change behavior... no matter how much backwards stuff we try to add, this is easiest and safest on everyone. ",
            "author": "Robert Muir",
            "id": "comment-12857440"
        },
        {
            "date": "2010-04-15T18:13:41+0000",
            "content": "\nSo I think we should instead use real-versions for contrib/analyzers. You can be damn sure if you stick with lucene-analyzers-3.0.jar that your stemmer isn't going to change behavior... no matter how much backwards stuff we try to add, this is easiest and safest on everyone.\n\nI could live with that....maybe. What guarantee is there that lucene-analyzers-3.0.jar will work with lucene-core-3.7.jar? How does that work?\n\nHow can I use lucene-analyzers-3.0.jar on old indexes and lucene-analyzers-3.5.jar on newer ones within the same application?\n\nWhat I'd like to see is that all analyzers and their parts are kept together in an analyzer jar (maybe more than one for the honking big analyzers as we have today) and that it be elevated to core. (I think contrib give the wrong impression.) And have a well-define compatibility policy.\n\n ",
            "author": "DM Smith",
            "id": "comment-12857456"
        },
        {
            "date": "2010-04-15T18:23:36+0000",
            "content": "I could live with that....maybe. What guarantee is there that lucene-analyzers-3.0.jar will work with lucene-core-3.7.jar? How does that work?\n\nWell, they should work, unless lucene-core breaks backwards compatibility with analyzers!\n\n\nHow can I use lucene-analyzers-3.0.jar on old indexes and lucene-analyzers-3.5.jar on newer ones within the same application?\n\nWhat I'd like to see is that all analyzers and their parts are kept together in an analyzer jar (maybe more than one for the honking big analyzers as we have today) and that it be elevated to core. (I think contrib give the wrong impression.) And have a well-define compatibility policy.\n\nWell, I think asking for a well-defined backwards compatibility policy for 'all analyzers' is asking too much. Things are not so simple and sorted out like they are with English/porter stemming, etc.\n\nI'll go with the flow, we can stay with what we have now, and the language support will also likely remain weak like it is now.\n\nCurrently I feel its an immense up-front effort to contribute any analysis support, it has to be near-perfect less it will cause future problems, because its not easy to iterate with the current situation without creating a mess.\n\nForget about applying little patches or improvements (assuming adequately relevance-tested / sane etc)... we've really only been able to fix bugs, add tests, and reorganize analyzers because touching them at all means you have to add backwards compat cruft. ",
            "author": "Robert Muir",
            "id": "comment-12857466"
        },
        {
            "date": "2010-04-15T18:29:15+0000",
            "content": "How can I use lucene-analyzers-3.0.jar on old indexes and lucene-analyzers-3.5.jar on newer ones within the same application?\n\nsorry DM, i meant to respond to this too!\n\nI think this is an advanced use case, that doesn't justify complex backwards compatibility layers. ",
            "author": "Robert Muir",
            "id": "comment-12857471"
        },
        {
            "date": "2010-04-15T19:03:29+0000",
            "content": "Well, I think asking for a well-defined backwards compatibility policy for 'all analyzers' is asking too much. Things are not so simple and sorted out like they are with English/porter stemming, etc.\n\nSome ramblings:\n\nI think things need to change/improve wrt analyzers, tokenizers and filters. The current Version mechanism is a road block. So is bw compat. I get that.\n\nWhen I asked for a well-define compatibility policy, I was not suggesting that we go back to the old mechanism or keep the new Version mechanism. Just a clear statement on what the policy is. It might be on a per class basis.\n\nOne mechanism that would work is versioned Java package names or class names. The current release would get the good names. If a user wanted the old jar they'd have to get it from the current release (e.g. lucene-analyzers-3.5_3.0.jar) and then change their code to use the old stuff which now has either a new package name or a new class name. Example, trStemmer.java is going to be changed as the first breaking change since 3.0, so trStemmer3_0.java is created as a copy and then trStemmer.java is changed.\n\nThe compatibility policy would be that the jar is not a drop in replacement, but that the old classes still exist, albeit with a different name.\n\nI have worked on some contributions w/ bw compat and it is a pain. I didn't like it. And that was both pre-version and post-version. I'd like to see version go away, but I'm not sure I'd like bw compat to go away. As it is I'm resigning myself that as I use each release of Lucene, I'm going to want more from it and that is likely to require index rebuilds. Right now I'm stuck with the 2.9 series and what happens until I upgrade to 3.x or 4.x doesn't really impact me. It will impact me then. I'll figure out how to deal with it and suck it up.\n\nSome other things I'd like to see:\n\n\tI'd like to see fully controllable Unicode support. The only way I see this is if we use ICU. It will take the java version problem out of the picture. A user would have control of the version of Unicode by their control of the version of ICU.\n\tAn analyzer construction factory, that would take a spec (of fields, tokenizers, stop words, stemmers, ....) and spit out an per field analyzer. This would allow for the deprecation of the analyzers.\n\n\n\nThese and others would be more readily tackled if the bw compat policy did not get in the way.\n\nI'll go with the flow, we can stay with what we have now, and the language support will also likely remain weak like it is now.\nYou know I don't want that \n\nI was suggesting that this issue should wait to see what the outcome of the general Version discussion is. Even if it is negative, perhaps this can go forward.\n\nCurrently I feel its an immense up-front effort to contribute any analysis support, it has to be near-perfect less it will cause future problems, because its not easy to iterate with the current situation without creating a mess.\nWith new stuff, even in core, if it is marked as experimental, it is outside the bw compat policy. That gives the opportunity to iterate. Dev branches are another good way.\n\nBut please, keep up the good work!\n ",
            "author": "DM Smith",
            "id": "comment-12857487"
        },
        {
            "date": "2010-04-15T19:10:00+0000",
            "content": "\nOne mechanism that would work is versioned Java package names or class names. The current release would get the good names. If a user wanted the old jar they'd have to get it from the current release (e.g. lucene-analyzers-3.5_3.0.jar) and then change their code to use the old stuff which now has either a new package name or a new class name. Example, trStemmer.java is going to be changed as the first breaking change since 3.0, so trStemmer3_0.java is created as a copy and then trStemmer.java is changed.\n\nRight, but I dont think Lucene should manage this. I think if we assume \"normally versioned releases\", a user with a really complex case that needs multiple versions of lucene working in the same JVM , like you, could use some other tool (eclipse refactor or maybe google's jarjar) to do rename things? ",
            "author": "Robert Muir",
            "id": "comment-12857490"
        },
        {
            "date": "2010-04-15T19:18:18+0000",
            "content": "\nOne mechanism that would work is versioned Java package names or class names. The current release would get the good names. If a user wanted the old jar they'd have to get it from the current release (e.g. lucene-analyzers-3.5_3.0.jar) and then change their code to use the old stuff which now has either a new package name or a new class name. Example, trStemmer.java is going to be changed as the first breaking change since 3.0, so trStemmer3_0.java is created as a copy and then trStemmer.java is changed.\n\nRight, but I dont think Lucene should manage this. I think if we assume \"normally versioned releases\", a user with a really complex case that needs multiple versions of lucene working in the same JVM , like you, could use some other tool (eclipse refactor or maybe google's jarjar) to do rename things?\n\nI can go along with this.\n\nI still think it might be good to let the dust settle on the general Version question before committing. ",
            "author": "DM Smith",
            "id": "comment-12857498"
        },
        {
            "date": "2010-04-15T19:33:48+0000",
            "content": "I can go along with this.\n\nCool! \n\nI still think it might be good to let the dust settle on the general Version question before committing.\n\nSure... but we should still remember there's really no back compat for the stuff changed in this patch \n\nI'm also glad you mentioned the unicode issue, i mean if you are doing non-English, some of the ideas in lucene's back compat with analyzers are basically downright silly at the end of the day.\n\nBesides the fact that upgrading your JVM can cause java itself to treat text differently (which we currently cannot control), changes to the users operating system [potentially completely outside of the scope of your application!] can cause 'searches that worked before to not work anymore'.\n\nFor example, if your users upgrade and their new input method generates U+09CE instead of U+09A4 U+09CD U+200D for Khanda-ta, the search won't match, even though perhaps they typed the exact same key on their keyboard.\n\nUnicode normalization does nothing in this case, and its your app's responsibility to be aware of stuff like this (Not Lucene's analyzers!) and deal with them.\n\nAt the end of the day, I think a lot of what lucene considers our own backwards compatibility responsibility necessarily belongs in the app instead.\n\n\nVersions of the Unicode Standard prior to Version 4.1 recommended that khanda ta be represented\nas the sequence <U+09A4 bengali letter ta, U+09CD bengali sign virama,\nU+200D zero width joiner> in all circumstances. U+09CE bengali letter khanda ta\nshould instead be used explicitly in newly generated text, but users are cautioned that\ninstances of the older representation may exist.\n\n\n ",
            "author": "Robert Muir",
            "id": "comment-12857507"
        },
        {
            "date": "2010-04-15T21:04:24+0000",
            "content": "As Shai mentioned on the dev list:\n\nRobert ... I'm sorry but changes to Analyzers don't force people to reindex. They can simply choose not to use the latest version.\n\nSo because of this, I will be updating the patch to remove all cruft from Lucene core as well. ",
            "author": "Robert Muir",
            "id": "comment-12857533"
        },
        {
            "date": "2010-04-15T21:24:16+0000",
            "content": "Hmmm. If we are moving stuff out of core and into contrib, don't we need to have a version that matches 3.0 for a first release?\n\nI can't put my finger on it but something seems like it will come back to bite. ",
            "author": "DM Smith",
            "id": "comment-12857543"
        },
        {
            "date": "2010-04-15T21:44:03+0000",
            "content": "Hmmm. If we are moving stuff out of core and into contrib, don't we need to have a version that matches 3.0 for a first release?\n\nNo, fixing core sorta assumes that 3.1 is a major release.\n\nbut we can do the patch on the issue now, since because contrib has no backwards compat policy. ",
            "author": "Robert Muir",
            "id": "comment-12857556"
        },
        {
            "date": "2010-04-15T23:33:23+0000",
            "content": "Humor me. I think I'm not seeing the forest for the trees.\n\nSuppose an app is using Lucene at 3.0 and that this patch has been applied to trunk and only affects contrib/analyzers (I assume as I did not look at the patch\n\nThen 3.1 is released. How does the user upgrade to 3.1? Let me see if I get this right. Since Version has been ripped out their code won't compile? Easy enough, change to a comparable constructor.\n\nNo, fixing core sorta assumes that 3.1 is a major release.\nThat's what I was thinking. So it shouldn't be 3.1 but rather 4.0? (And even w/o refactoring isn't flex big enough to warrant 4.0?)\n\nBut still isn't some sort of bridge release needed to get the user to the new paradigm?\n\nAssume they are only using lucene-core-3.0.jar and not lucene-analyzers-3.0.jar. In 3.1 they need both jars. But you can't mix 3.0 and 3.1 combinations of the two jars at all. After 3.1 it is possible to mix and match. ",
            "author": "DM Smith",
            "id": "comment-12857595"
        }
    ]
}