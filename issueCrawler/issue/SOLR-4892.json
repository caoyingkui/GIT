{
    "id": "SOLR-4892",
    "title": "Add field update processors to parse/convert String-typed fields to Date, Number, and Boolean",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "4.4",
            "6.0"
        ],
        "components": [
            "update"
        ],
        "type": "New Feature",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "Add FieldMutatingUpdateProcessorFactory subclasses ParseFooUpdateProcessorFactory, where Foo includes Date, Double, Long, and Boolean.\n\nThese factories will have a default selector that matches all fields that either don\u2019t match any schema field, or are in the schema with the corresponding typeClass.  They can optionally support a list of multiple format specifiers.  If they see a value that is not a CharSequence, or can't parse the value using a configured format, they ignore it and leave it as is.\n\nFor multi-valued fields, these processors will not convert any values unless all are first successfully parsed.  Ordering the processors [Boolean, Long, Double, Date] will allow e.g. values [2, 5, 8.6] to be left alone by the Boolean and Long processors, but then converted by the Double processor.",
    "attachments": {
        "SOLR-4892.patch": "https://issues.apache.org/jira/secure/attachment/12589220/SOLR-4892.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Steve Rowe",
            "id": "comment-13690987",
            "date": "2013-06-22T01:10:06+0000",
            "content": "Patch, I think it's ready to go.\n\nI've added Joda-time 2.2 as a solr-core dependency to handle the configurable date parsing.\n\nI'd appreciate review.  "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13693188",
            "date": "2013-06-25T17:34:55+0000",
            "content": "\nSteve: for the most part the patch looks good, but a couple of things jumped out at me though as seeming kind of fishy...\n\n1) AllValuesOrNoneFieldMutatingUpdateProcessor semantics\n\nThe \"if (destVal == srcVal) ... do nothing\" logic seems like a trap for future devs who want to subclass \u2013 not to mention i'm not 100% certain i agree it makes sense for the subclasses you've already written.  (If I send the list [new String(\"6.0\"), new Double(7.3D), new String(\"4.3\")] to ParseDOubleUpdateProcessor should it really reject the entire list because one of the original values is already a double?)\n\nI think it would be more straight forward to give subclasses another singleton marker object (similar to the DELETE singleton) they can return from mutateValue() to say \"abort processing this list i have encountered an object i do not want\".  If mutateValue() returns the same object it was passed in, that should be considered a successful mutation.\n\n\n2) ParsingFieldUpdateProcessor overriding processAdd\n\nSome code duplication here that worries me.  If we want to make the change I suggested above for parsing strings in lists where we can and allowing type specific objects if they are already the correct type, then (if i'm thinking about this correctly) we don't need this class at all, classes like ParseFooFieldUpdateProcessor could easily just handle the CharSequence check as part of their basic logic...\n\n\n  if (val instanceof CharSequence) {\n     val = ... attempt parse as a Foo...;\n  }\n  if (val instanceof Foo) return val;\n  return SKIP_FIELD_VALUE_LIST_SINGLETON\n\n\n\nBut even if we want to keep the current semantics of AllValuesOrNoneFieldMutatingUpdateProcessor, then i think it would be cleaner if ParsingFieldUpdateProcessor was changed to be really simple, ala...\n\n\nParsingFieldUpdateProcessor extends AllValuesOrNoneFieldMutatingUpdateProcessor {\n  public ParsingFieldUpdateProcessor(FieldNameSelector selector, UpdateRequestProcessor next) {\n    super(selector, next);\n  }\n  protected final Object mutateValue(final Object srcVal) {\n    return (srcVal instanceof CharSequence) ? \n      parse(srcVal.toString()) : SKIP_FIELD_VALUE_LIST_SINGLETON;\n  }\n  protected abstract Object parse(final Object srcVal);\n}\n\n\n\n...and then the concrete subclasses just implement \"parse\"\n\n3) either way we go with #2, that means we don't need the access modifieier change on 'selector' in FieldMutatingUpdateProcessor.\n\n4) double check the handling of field boosts in AllValuesOrNoneFieldMutatingUpdateProcessor ... pretty sure it isn't being preserved (see FieldValueMutatingUpdateProcessor for example)\n\n5) The SortableFooField FieldType's should also be decorated with your new interfaces.\n\n6) Can we refactor the locale init param parsing into a helper utility class or a common factory bsae class so it's not duplicated in both ParseNumericFieldUpdateProcessorFactory and ParseDateFieldUpdateProcessorFactory ?\n\n\n\nAnd some misc questions...\n\n7) Why no ParseIntFieldUpdateProcessor and ParseFloatFieldUpdateProcessor ?\n\n8) would it be simpler for users to have a single \"locale\" init param that accepted things like \"ru\" and \"ru_RU\" and \"ru_RU_xxx\" using LocaleUtils.toLocale in commons-lang?\n\n9) we should be able to make the ParseFooFieldUpdateProcessor inner classses into static inner classes just by passing hte locale into the constructor and right? "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13693316",
            "date": "2013-06-25T19:49:16+0000",
            "content": "Thanks Hoss, thanks for the review, I'll work on your suggestions and put up a patch later today.\n\nAbout your questions:\n\n7) Why no ParseIntFieldUpdateProcessor and ParseFloatFieldUpdateProcessor ?\n\nBecause I wasn't going to use them for the schemaless mode example config (which is the driver here), I was keeping the issue lean, but I can add them.\n\n8) would it be simpler for users to have a single \"locale\" init param that accepted things like \"ru\" and \"ru_RU\" and \"ru_RU_xxx\" using LocaleUtils.toLocale in commons-lang?\n\nI didn't know about the commons-lang method, but I separated the locale components for two reasons: 1) Java 7 has a new method Locale.forLanguageTag() that does this, but for 4.X, we can't use it, since it's on Java 6; and 2) there is a precedent for separately configured locale components in BreakIteratorBoundaryScanner: HighlightParams.BS_LANGUAGE and .BS_COUNTRY (\"hl.bs.language\" and \"hl.bs.country\", respectively).  I'm fine switching to LocaleUtils.toLocale with a single \"locale\" configuration item, though; I agree it would be simpler for users.\n\n9) we should be able to make the ParseFooFieldUpdateProcessor inner classses into static inner classes just by passing hte locale into the constructor and right?\n\nYes, I'll do that. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13694263",
            "date": "2013-06-26T21:42:35+0000",
            "content": "Chris Hostetter (Unused), this version of the patch includes fixes for all your suggestions.\n\nDetails: \n\n\n1) AllValuesOrNoneFieldMutatingUpdateProcessor semantics\n\nThe \"if (destVal == srcVal) ... do nothing\" logic [...] give subclasses another singleton marker object [...] they can return from mutateValue() to say \"abort processing this list i have encountered an object i do not want\". If mutateValue() returns the same object it was passed in, that should be considered a successful mutation.\n\nDone.\n\n\n2) ParsingFieldUpdateProcessor overriding processAdd\n\n[...] we don't need this class at all, classes like ParseFooFieldUpdateProcessor could easily just handle the CharSequence check as part of their basic logic...\n\nDone - I chose this route and got rid of ParsingFieldUpdateProcessor.\n\n\n3) either way we go with #2, that means we don't need the access modifieier change on 'selector' in FieldMutatingUpdateProcessor.\n\nFixed.\n\n\ndouble check the handling of field boosts in AllValuesOrNoneFieldMutatingUpdateProcessor ... pretty sure it isn't being preserved (see FieldValueMutatingUpdateProcessor for example)\n\nFixed.\n\n\n5) The SortableFooField FieldType's should also be decorated with your new interfaces.\n\nDone.\n\n\n6) Can we refactor the locale init param parsing into a helper utility class or a common factory bsae class so it's not duplicated in both ParseNumericFieldUpdateProcessorFactory and ParseDateFieldUpdateProcessorFactory ?\n\n8) would it be simpler for users to have a single \"locale\" init param that accepted things like \"ru\" and \"ru_RU\" and \"ru_RU_xxx\" using LocaleUtils.toLocale in commons-lang?\n\nI switched to using a single \"locale\" config item, using commons-lang LocaleUtils.toLocale().  This is so small I didn't try to consolidate, I just replicated in the two places.\n\n\n7) Why no ParseIntFieldUpdateProcessor and ParseFloatFieldUpdateProcessor ?\n\nAdded.\n\n\n9) we should be able to make the ParseFooFieldUpdateProcessor inner classses into static inner classes just by passing hte locale into the constructor and right?\n\nI did this for the Date and Numeric processors, but the Boolean processor factory has a couple of configured collections and a boolean, so I didn't convert its processor to a static inner class. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-13694307",
            "date": "2013-06-26T22:21:02+0000",
            "content": "+1 ... code looks good.\n\ntwo minor things i didn't notice before...\n\na) i think there's some class javadoc cut/paste mistakes ... if you grep the patch for \"solr.ParseDoubleFieldUpdateProcessorFactory\" it shows up in the class jdocs for several other factories.\n\nb) the logic in ParseBooleanFieldUpdateProcessorFactory could probably be a little simpler/faster if there was a single Map<String,Boolean> instead of two Set<String> that each had to be checked. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13694375",
            "date": "2013-06-27T00:42:54+0000",
            "content": "Final patch.\n\nBeefed up tests and addressed Hoss's javadocs and map vs. two sets issues.\n\nCommitting shortly. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13694411",
            "date": "2013-06-27T01:36:52+0000",
            "content": "Committed:\n\n\n\ttrunk r1497165\n\tbranch_4x r1497177\n\n\n\nThanks for the reviews Hoss! "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13716794",
            "date": "2013-07-23T18:38:36+0000",
            "content": "Bulk close resolved 4.4 issues "
        }
    ]
}