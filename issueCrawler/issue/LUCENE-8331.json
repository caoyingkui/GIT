{
    "id": "LUCENE-8331",
    "title": "MergePolicy simulator utility",
    "details": {
        "components": [],
        "status": "Open",
        "resolution": "Unresolved",
        "fix_versions": [],
        "affect_versions": "None",
        "labels": "",
        "priority": "Major",
        "type": "New Feature"
    },
    "description": "This issue introduces\u00a0a MergePolicy simulator utility to help evaluate the effectiveness of a MergePolicy. \u00a0The simulator does not result in the actual indexing and merging of segments; instead it provides some dummy\u00a0constructs to MergePolicy to evaluate its decisions.  Therefore you can do simulation runs in little time.\n\nI'm not sure where it would live.  Perhaps dev-tools, or in tests, or in benchmark?\n\nI mentioned this recently here:\nhttps://issues.apache.org/jira/browse/LUCENE-7976?focusedCommentId=16446985&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-16446985",
    "attachments": {
        "LUCENE-8331.patch": "https://issues.apache.org/jira/secure/attachment/12925016/LUCENE-8331.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16489726",
            "author": "David Smiley",
            "content": "CC Michael McCandless Simon Willnauer Erick Erickson\n\nI used this utility (with some other edits not in this patch) to evaluate a custom merge policy that had a notion of \"cheap\" merges.  It turned out to be very successful; I may open other issues about ways TieredMergePolicy and/or the MergeScheduler can be improved.\n\nThe main features about this simulator are:\n\n\tdoesn't require actual indexing and is thus super-fast\n\tcalculates useful stats like the average number of segments and the average write amplification factor.\n\tprovides a random sequence of flushed segment sizes that can be controlled in a couple ways to make it more/less realistic depending on your environment\n\n\n\nSome not so great parts:\n\n\tdoes not yet handle deletes!\n\tconfiguration tweaking of the merge policy to be tested and varying the inputs is a manual affair, editing main() and/or makeMergePolicy().  I added some System property overrides though, and some basic args parsing.  It's probably not realistic to expect much better given the use of this for experimentation.\n\n\n\nWhat do you think guys? ",
            "date": "2018-05-24T20:18:12+0000"
        },
        {
            "id": "comment-16490270",
            "author": "Simon Willnauer",
            "content": "I thinks something like this can be helpful if you are working on a MP and/or trying to debug an issue. I am not sure it needs to be a commandline util. I would rather build the individual tools to plug stuff together as an API and put most of the utils like creating the simulated segments into the base tests class. I was going to do something similar to make testing simpler. I like the idea. LUCENE-8330 will help doing this as well ",
            "date": "2018-05-25T05:54:20+0000"
        },
        {
            "id": "comment-16492919",
            "author": "David Smiley",
            "content": "Thanks for your input Simon.\n\nI am not sure it needs to be a commandline util.\n\nHow else would something like this be executed?  Maybe I don't understand your subsequent recommendation...\n\nI would rather build the individual tools to plug stuff together as an API and put most of the utils like creating the simulated segments into the base tests class.\n\nI may not be getting your point but I think you're saying you'd like Lucene's test infrastructure to have some of the elements of what this test does.  Sounds good to me.  Nevertheless the outcome of that would be less code in this simulator... but somewhere there needs to be a main() to literally run the simulation and setup whatever the simulated environment is, and code to track some stats of interest.  Right?\n\nAre you basically fine with me committing this? ",
            "date": "2018-05-28T20:43:58+0000"
        },
        {
            "id": "comment-16493222",
            "author": "Simon Willnauer",
            "content": "How else would something like this be executed? Maybe I don't understand your subsequent recommendation...{quote}\n\ncan it just be a utility class that I call from a test or so I mean I am not sure how userfriendly it is to specify classpaths etc. I'd just run it from a test. I also think it's way more flexible if you have a java API to call rather than some cmd args you need to parse etc.\n\n\u00a0\nAre you basically fine with me committing this?{quote}\n\nI think it should support deletes and should not use IW then I ok with it ",
            "date": "2018-05-29T08:13:41+0000"
        },
        {
            "id": "comment-16493290",
            "author": "Tommaso Teofili",
            "content": "\u00a0I think it should support deletes and should not use IW then I ok with it\n\u00a0\n+1 ",
            "date": "2018-05-29T09:19:06+0000"
        },
        {
            "id": "comment-16493480",
            "author": "David Smiley",
            "content": "can it just be a utility class that I call from a test or so I mean I am not sure how userfriendly it is to specify classpaths etc. I'd just run it from a test.\n\nOoh, ok.  FWIW what I do is simply right-click the main method and tell my IDE to run it.  It fails the first go-round because it needs args so then I update the args.  Since it's on the test classpath and run from my IDE, there's no issue.  I expect others can just run it similarly?  Documentation could spell this out!  Why would a test call this?  To assert that the stats are \"good\"?\n\nI think it should support deletes and should not use IW then I ok with it\nSure thing \u2013 now made possible with LUCENE-8330.\u00a0\u00a0I'll work on this. ",
            "date": "2018-05-29T12:32:30+0000"
        }
    ]
}