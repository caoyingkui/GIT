{
    "id": "LUCENE-7229",
    "title": "Improve Polygon.relate",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "6.1",
            "7.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "This method is currently quite slow and in many cases does more work than is required. The speed actually directly impacts queries (tree traversal) and bounds grid size to something tiny making it less effective.\n\nI think we should replace it line intersections based on orientation methods described here http://www.cs.berkeley.edu/~jrs/meshpapers/robnotes.pdf and https://www.cs.cmu.edu/~quake/robust.html\n\nFor one, a naive implementation is considerably faster than the method today: both because it reduces the cost of BKD tree traversals and also because it makes grid construction cheaper. This means we can increase its level of detail with similar or lower startup cost. Now its more like a Mario Brothers 2 picture of your polygon instead of Space Invaders.\n\nSynthetic polygons from luceneUtil\n\n\n\nvertices\nold QPS\nnew QPS\nold startup cost\nnew startup cost\n\n\n50\n20.4\n21.7\n1ms\n1ms\n\n\n500\n11.2\n14.4\n5ms\n4ms\n\n\n1000\n7.4\n10.0\n9ms\n8ms\n\n\n\n\nReal polygons (33 london districts: http://data.london.gov.uk/2011-boundary-files)\n\n\n\nvertices\nold QPS\nnew QPS\nold startup cost\nnew startup cost\n\n\navg 5.6k\n4.9\n8.6\n94ms\n85ms\n\n\n\n\n\nBut I also like using this method because its possible to extend it to remove floating point error completely in the future with techniques described in those links. This may be necessary if we want to do smarter things (e.g. not linear time).",
    "attachments": {
        "LUCENE-7229.patch": "https://issues.apache.org/jira/secure/attachment/12799330/LUCENE-7229.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15246380",
            "author": "Robert Muir",
            "date": "2016-04-18T19:25:07+0000",
            "content": "patch. "
        },
        {
            "id": "comment-15246390",
            "author": "Nicholas Knize",
            "date": "2016-04-18T19:36:42+0000",
            "content": "5.5 does this (https://github.com/apache/lucene-solr/blob/branch_5_5/lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils.java#L210) so +1 for adding it back.\n\nYou can also optimize the determinate to get slightly better performance. And without needing TOLERANCE slop it fixes problems with small rectangle relations. "
        },
        {
            "id": "comment-15246403",
            "author": "Robert Muir",
            "date": "2016-04-18T19:48:23+0000",
            "content": "Yeah, I first looked at the 5.5 code, but it causes many tests to fail. I think the problems there were perhaps not in line-line-intersection code but instead that the main loop (line vs box) is buggy:\n\nhttps://github.com/apache/lucene-solr/blob/branch_5_5/lucene/spatial/src/java/org/apache/lucene/spatial/util/GeoRelationUtils.java#L198-L208\n\nThere needs to be 4 line checks there since the box has 4 edges, but that code only checks 2. "
        },
        {
            "id": "comment-15246430",
            "author": "Ryan Ernst",
            "date": "2016-04-18T20:05:41+0000",
            "content": "+1 to the patch.\n\nOne suggestion on readability of the main loop: the comment about line segments AB and CD are good explaining the loop, but then the actual vars use 1,2,3,4. I would use Ax, Ay, Bx, By, etc. "
        },
        {
            "id": "comment-15246436",
            "author": "Robert Muir",
            "date": "2016-04-18T20:07:44+0000",
            "content": "I improved some cosmetic things, method could be static, variable names could be more consistent, etc. "
        },
        {
            "id": "comment-15246445",
            "author": "Ryan Ernst",
            "date": "2016-04-18T20:13:58+0000",
            "content": "+1 to the new patch, thanks for the improved var names! "
        },
        {
            "id": "comment-15246451",
            "author": "Nicholas Knize",
            "date": "2016-04-18T20:16:32+0000",
            "content": "There needs to be 4 line checks there since the box has 4 edges, but that code only checks 2.\n\nThat's a separate short-cut. After the line endpoints are checked against the rectangle it checks if the line crosses a diagonal of the rectangle. This way only the 2 diagonal lines of the rectangle need to be checked, not all 4.\n "
        },
        {
            "id": "comment-15246458",
            "author": "Nicholas Knize",
            "date": "2016-04-18T20:19:54+0000",
            "content": "but it causes many tests to fail\n\nOut of curiosity, which tests failed? I added this back on Friday in a test branch for LUCENE-7186 and it hasn't failed on my jenkins box yet. "
        },
        {
            "id": "comment-15246459",
            "author": "Robert Muir",
            "date": "2016-04-18T20:19:58+0000",
            "content": "I don't refer to the short cut... there are only 2 line-crosses-line calls in lineCrossesRect(). that is the problem there: this is what caused test failures as soon as we improved random polygon testing to test more than boxes. "
        },
        {
            "id": "comment-15246479",
            "author": "Robert Muir",
            "date": "2016-04-18T20:32:46+0000",
            "content": "All of the assertions in TestPolygon.testMultiPolygon() for one. "
        },
        {
            "id": "comment-15246486",
            "author": "Nicholas Knize",
            "date": "2016-04-18T20:34:57+0000",
            "content": "That's what I'm talking about. \n\nreturn lineCrossesLine(aX1, aY1, aX2, aY2, rMinX, rMinY, rMaxX, rMaxY)\n        || lineCrossesLine(aX1, aY1, aX2, aY2, rMaxX, rMinY, rMinX, rMaxY);\n\n\n\nIt's checking if the line crosses either diagonal of the candidate rectangle. First (the short-circuit check) checks if either line endpoint falls inside the candidate rectangle (to test extruding polygons). If not, it then checks if the poly line crosses either diagonal.\n\nThis works well for rasterization because the cells are small enough that earth's curvature doesn't matter and lines are \"straight\". It could fail for large inner BKD nodes though when curvature does have an effect. "
        },
        {
            "id": "comment-15246490",
            "author": "Robert Muir",
            "date": "2016-04-18T20:38:23+0000",
            "content": "Well it fails the tests which have nothing to do with BKD or anything else. Also, it seems to return CROSSES very often when it should not (the cause of the test failures).\n\nThis causes bad performance, for example with the \"real world polygons\" above, performance is 0.8 QPS vs 8.6 QPS with this patch. "
        },
        {
            "id": "comment-15246505",
            "author": "Nicholas Knize",
            "date": "2016-04-18T20:48:43+0000",
            "content": "Well it fails the tests which have nothing to do with BKD or anything else\n\nWith Large rectangles (i.e. those that can be created either by BKD inner nodes or generated by a test) the earth's curvature may have an effect such that an edge of the box can cross the edge of a polygon. This is the same effect seen in the distance queries and it will not be caught using 2d cartesian math.\n "
        },
        {
            "id": "comment-15246511",
            "author": "Robert Muir",
            "date": "2016-04-18T20:53:10+0000",
            "content": "There is no curvature or anything involved here. Its absolutely unrelated to polygons completely here.\n\n\n\nPolygon polygon = new double[] { -50, -50, 50, 50, -50 }, new double[] { -50, 50, 50, -50, -50 };\nassertEquals(Relation.CELL_INSIDE_QUERY, Polygon.relate(polygons, 24, 25, 24, 25)); // fails and returns CROSSES instead.\n\n\n\n\nIf we want to check that edges from two objects, we have to check all the edges. If we don't do that, then it returns the wrong answer. This is precisely why that approximate method is slow. "
        },
        {
            "id": "comment-15246558",
            "author": "Nicholas Knize",
            "date": "2016-04-18T21:18:13+0000",
            "content": "Its absolutely unrelated to polygons completely here.\n\nWell actually it is related since numberOfCorners first checks if all 4 corners are contained in the polygon (which in this test returns 4). Then the diagonal optimization is used incorrectly in this example test because its called after numberOfCorners. So of course this test will fail because the candidate cell crosses a diagonal. Its being applied in the wrong spot.\n\nNevertheless, it doesn't really matter. I was originally stating agreement with the provided orientation approach since it provided a nice performance boost in 5.5 for GeoPointField. "
        },
        {
            "id": "comment-15246636",
            "author": "Robert Muir",
            "date": "2016-04-18T21:55:20+0000",
            "content": "It kinda does matter. If we want to check if two objects intersect, we truly have to check all the edges \n\nAs far as that older code in 5.5, if we see real performance improvements, then we can consider replacing this with it. But right now this is not what the numbers say: they say its slower. "
        },
        {
            "id": "comment-15246725",
            "author": "Nicholas Knize",
            "date": "2016-04-18T22:46:32+0000",
            "content": "As far as that older code in 5.5, if we see real performance improvements, then we can consider replacing this with it.\n\nThere are two optimizations in the context of this discussion. 1. Determinant based orientation and 2. diagonal intersection.  I'm saying it doesn't matter in the context of 1. The old 5.5 code added determinant based orientation (LUCENE-6951), and it gave a nice performance boost over the alternative. So, again, +1 for adding it back. I don't see a need to replace this with it since its using the same approach. The diagonal optimization is a separate \"optimization\" that I said worked well for the GeoPointField raster approach, which is why GeoRelationUtils had separate approx and precise methods. The diagonal optimization was used in the approx version which is what GeoPointField used.  "
        },
        {
            "id": "comment-15246827",
            "author": "ASF subversion and git services",
            "date": "2016-04-19T00:22:50+0000",
            "content": "Commit af09c618eb4c6a6dfc7c7ed8d894f692a76d5550 in lucene-solr's branch refs/heads/master from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=af09c61 ]\n\nLUCENE-7229: Improve Polygon.relate for faster tree traversal/grid construction "
        },
        {
            "id": "comment-15246838",
            "author": "ASF subversion and git services",
            "date": "2016-04-19T00:32:13+0000",
            "content": "Commit d1acb92911410b025403e70868fd00e0069bb55c in lucene-solr's branch refs/heads/branch_6x from Robert Muir\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=d1acb92 ]\n\nLUCENE-7229: Improve Polygon.relate for faster tree traversal/grid construction "
        },
        {
            "id": "comment-15277226",
            "author": "Hoss Man",
            "date": "2016-05-09T22:43:38+0000",
            "content": "\nManually correcting fixVersion per Step #S5 of LUCENE-7271 "
        }
    ]
}