{
    "id": "LUCENE-1033",
    "title": "FieldsReader Thread Safety",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "2.2",
        "resolution": "Invalid",
        "status": "Closed"
    },
    "description": "From what I've read, the IndexSearcher is supposed to be thread safe.  However, I don't think that the FieldsReader class (used by the IndexReader, and in turn used by the IndexSearcher) is thread safe.  I have one IndexSearcher that I use with all my threads, and what appears to happen in Lucene 2.2 is that the same FieldsReader object is shared by all threads.  The private \"fieldStream\" and \"indexStream\" attributes both have file pointers which makes them not thread-safe.\n\nFor instance, in the \"doc\" method of FieldsReader:\n\n    fieldsStream.seek(position);\n\n    Document doc = new Document();\n    int numFields = fieldsStream.readVInt();\n    for (int i = 0; i < numFields; i++) {\n      int fieldNumber = fieldsStream.readVInt();\n      FieldInfo fi = fieldInfos.fieldInfo(fieldNumber);\n      FieldSelectorResult acceptField = fieldSelector == null ? FieldSelectorResult.LOAD : fieldSelector.accept(fi.name);\n\nAnother thread can seek to another position, so the readVInt calls are reading the wrong location in the stream.  This is a race condition and only shows up when a lot of document field data is being read.  When I synchronized the doc method, the problem went away.  Another solution would be to use separate IndexSearchers, or to clone the FIeldsReader for each thread (I have not investigated either solution).\n\nI encountered this on Lucene 2.2, but I think the problem is still in the trunk.  I was making a modification to the source code which caused the problem to be exaggerated, otherwise I probably wouldn't have discovered it.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2007-10-31T01:08:49+0000",
            "content": "Can you post a test case of this that reproduces the problem? ",
            "author": "Grant Ingersoll",
            "id": "comment-12538963"
        },
        {
            "date": "2007-10-31T01:45:11+0000",
            "content": "Hi Michael, you are correct that FieldsReader is not thread-safe, but that's currently by design.\nThe SegmentReader holding the FieldsReader synchronizes when using it to read fields (see document()).\nDo you see a path were the same FieldsReader is used without synchronization on the same object? ",
            "author": "Yonik Seeley",
            "id": "comment-12538973"
        },
        {
            "date": "2007-10-31T16:13:33+0000",
            "content": "I'm sorry guys. You're absolutely right.  The synchronization is done in the SegmentReader.  I was working on a change I am proposing to the API (LUCENE-1034) and I can see now where I screwed up.  I modeled my new method on the 'doc' method in FieldsReader and I missed the synchonization in SegmentReader.\n\nI'm really sorry to have wasted your time.  Please feel free to close this issue.\n ",
            "author": "Michael Klatt",
            "id": "comment-12539112"
        }
    ]
}