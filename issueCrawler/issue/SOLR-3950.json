{
    "id": "SOLR-3950",
    "title": "Attempting postings=\"BloomFilter\" results in UnsupportedOperationException",
    "details": {
        "affect_versions": "4.1",
        "status": "Open",
        "fix_versions": [
            "4.9",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Major",
        "labels": "",
        "resolution": "Unresolved"
    },
    "description": "Tested on branch_4x, checked out after BlockPostingsFormat was made the default by LUCENE-4446.\n\nI used 'ant generate-maven-artifacts' to create the lucene-codecs jar, and copied it into my sharedLib directory.  When I subsequently tried postings=\"BloomFilter\" I got a the following exception in the log:\n\n\nOct 15, 2012 11:14:02 AM org.apache.solr.common.SolrException log\nSEVERE: java.lang.UnsupportedOperationException: Error - org.apache.lucene.codecs.bloom.BloomFilteringPostingsFormat has been constructed without a choice of PostingsFormat",
    "attachments": {
        "SOLR-3950.patch": "https://issues.apache.org/jira/secure/attachment/12636555/SOLR-3950.patch",
        "SOLR-3950-no-arg-constructor-change.patch": "https://issues.apache.org/jira/secure/attachment/12583695/SOLR-3950-no-arg-constructor-change.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Shawn Heisey",
            "id": "comment-13476763",
            "date": "2012-10-16T05:45:16+0000",
            "content": "Full stacktrace:\n\nOct 15, 2012 11:14:02 AM org.apache.solr.common.SolrException log\nSEVERE: java.lang.UnsupportedOperationException: Error - org.apache.lucene.codecs.bloom.BloomFilteringPostingsFormat has been constructed without a choice of PostingsFormat\n        at org.apache.lucene.codecs.bloom.BloomFilteringPostingsFormat.fieldsConsumer(BloomFilteringPostingsFormat.java:139)\n        at org.apache.lucene.codecs.perfield.PerFieldPostingsFormat$FieldsWriter.addField(PerFieldPostingsFormat.java:130)\n        at org.apache.lucene.index.FreqProxTermsWriterPerField.flush(FreqProxTermsWriterPerField.java:335)\n        at org.apache.lucene.index.FreqProxTermsWriter.flush(FreqProxTermsWriter.java:85)\n        at org.apache.lucene.index.TermsHash.flush(TermsHash.java:117)\n        at org.apache.lucene.index.DocInverter.flush(DocInverter.java:53)\n        at org.apache.lucene.index.DocFieldProcessor.flush(DocFieldProcessor.java:82)\n        at org.apache.lucene.index.DocumentsWriterPerThread.flush(DocumentsWriterPerThread.java:483)\n        at org.apache.lucene.index.DocumentsWriter.doFlush(DocumentsWriter.java:422)\n        at org.apache.lucene.index.DocumentsWriter.flushAllThreads(DocumentsWriter.java:559)\n        at org.apache.lucene.index.IndexWriter.prepareCommit(IndexWriter.java:2656)\n        at org.apache.lucene.index.IndexWriter.commitInternal(IndexWriter.java:2792)\n        at org.apache.lucene.index.IndexWriter.commit(IndexWriter.java:2772)\n        at org.apache.solr.update.DirectUpdateHandler2.commit(DirectUpdateHandler2.java:525)\n        at org.apache.solr.update.processor.RunUpdateProcessor.processCommit(RunUpdateProcessorFactory.java:87)\n        at org.apache.solr.update.processor.UpdateRequestProcessor.processCommit(UpdateRequestProcessor.java:64)\n        at org.apache.solr.update.processor.DistributedUpdateProcessor.processCommit(DistributedUpdateProcessor.java:1007)\n        at org.apache.solr.handler.RequestHandlerUtils.handleCommit(RequestHandlerUtils.java:69)\n        at org.apache.solr.handler.ContentStreamHandlerBase.handleRequestBody(ContentStreamHandlerBase.java:68)\n        at org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:129)\n        at org.apache.solr.core.SolrCore.execute(SolrCore.java:1750)\n        at org.apache.solr.servlet.SolrDispatchFilter.execute(SolrDispatchFilter.java:455)\n        at org.apache.solr.servlet.SolrDispatchFilter.doFilter(SolrDispatchFilter.java:276)\n        at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1337)\n        at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:484)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:119)\n        at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:524)\n        at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:233)\n        at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1065)\n        at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:413)\n        at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:192)\n        at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:999)\n        at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:117)\n        at org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:250)\n        at org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:149)\n        at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:111)\n        at org.eclipse.jetty.server.Server.handle(Server.java:351)\n        at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:454)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handleRequest(BlockingHttpConnection.java:47)\n        at org.eclipse.jetty.server.AbstractHttpConnection.content(AbstractHttpConnection.java:900)\n        at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.content(AbstractHttpConnection.java:954)\n        at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:857)\n        at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)\n        at org.eclipse.jetty.server.BlockingHttpConnection.handle(BlockingHttpConnection.java:66)\n        at org.eclipse.jetty.server.bio.SocketConnector$ConnectorEndPoint.run(SocketConnector.java:254)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:599)\n        at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:534)\n        at java.lang.Thread.run(Thread.java:722)\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13476764",
            "date": "2012-10-16T05:48:41+0000",
            "content": "I don't know if this affects 4.0, as I have only tried it on 4.1.  I did add codecFactory to solrconfig.xml.  I'm fairly sure that I've got at least part of it right, because I got the following beforehand when I was using the wrong format name:\n\n\nOct 15, 2012 11:13:01 AM org.apache.solr.common.SolrException log\nSEVERE: null:java.lang.IllegalArgumentException: A SPI class of type org.apache.lucene.codecs.PostingsFormat with name 'Bloom' does not exist. You need to add the corresponding JAR file supporting this SPI to your classpath.The current classpath supports the following names: [Lucene40, Lucene41, Pulsing41, SimpleText, Memory, BloomFilter, Direct]\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13476767",
            "date": "2012-10-16T05:50:42+0000",
            "content": "One more bit of info:\n\n    solr-spec 4.1.0.2012.10.14.17.26.04\n    solr-impl 4.1-SNAPSHOT 1398145 - ncindex - 2012-10-14 17:26:04\n    lucene-spec 4.1-SNAPSHOT\n    lucene-impl 4.1-SNAPSHOT 1398145 - ncindex - 2012-10-14 17:09:00 "
        },
        {
            "author": "Mark Harwood",
            "id": "comment-13476854",
            "date": "2012-10-16T08:41:25+0000",
            "content": "BloomFilterPostingsFormat is designed to wrap another choice of PostingsFormat and adds \".blm\" files to the other files created by the choice of delegate.\n\nHowever your code has instantiated a BloomFilterPostingsFormat without passing a choice of delegate - presumably using the zero-arg constructor. \nThe comments in the code for this zero-arg constructor state:\n\n  // Used only by core Lucene at read-time via Service Provider instantiation -\n  // do not use at Write-time in application code.\n\n\n "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13476999",
            "date": "2012-10-16T13:47:45+0000",
            "content": "However your code has instantiated a BloomFilterPostingsFormat without passing a choice of delegate - presumably using the zero-arg constructor. \n\nIn this case, \"my\" code is Solr, source code unmodified.  From my schema.xml:\n\n\n<fieldType name=\"bloomLong\" class=\"solr.TrieLongField\" precisionStep=\"0\" omitNorms=\"true\" positionIncrementGap=\"0\" postingsFormat=\"BloomFilter\"/>\n<fieldType name=\"bloomLowercase\" class=\"solr.TextField\" sortMissingLast=\"true\" positionIncrementGap=\"0\" omitNorms=\"true\" postingsFormat=\"BloomFilter\">\n.\n. <snip>\n.\n</fieldType\n\n\n\nIf there is some schema config that will tell Solr to do the right thing, please let me know. "
        },
        {
            "author": "Mark Harwood",
            "id": "comment-13477036",
            "date": "2012-10-16T14:31:09+0000",
            "content": "If there is some schema config that will tell Solr to do the right thing, please let me know.\n\nRight now BloomPF is like an abstract class - you need to fill-in-the-blanks as to what delegate it will use before you can use it at write-time.\nI think we have 3 options:\n\n1) Solr (or you) provide a new PF impl that weds BloomPF with a choice of PF e.g. Lucene40PF so you would have a zero-arg-constructor class named something like BloomLucene40PF or...\n2) Solr extends config file format to provide a generic means of assembling \"wrapper\" PFs like Bloom in their config e.g:\n   postingsFormat=\"BloomFilter\" delegatePostingsFormat=\"FooPF\" \n   and Solr then does reflection magic to call constructors appropriately or..\n3) Core Lucene is changed so that BloomPF is wedded to a default PF (e.g. Lucene40PF) if users e.g. Solr fail to nominate a choice of delegate for BloomPF.\n\nOf these 1) feels like \"the right thing\".\n\nCheers\nMark "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13540758",
            "date": "2012-12-29T04:19:19+0000",
            "content": "At this time I am not attempting to change postings.  I don't know how to make a patch for this issue, but if it's a fairly trivial thing for someone with the knowledge, then I think it should be included in 4.1.  If it's not trivial, kick it to 4.2. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13579882",
            "date": "2013-02-16T19:17:08+0000",
            "content": "Pinging on this.  The consensus among the Really Smart People (tm) seems to be that a wrapper implementation needs to be available for Solr that wraps another postings format in the BloomFilter, such as Lucene42 (if that even exists yet).\n\nIf someone can point me at code for a similar wrapper implementation and tell me which class I'd need to extend (and/or interface I'd need to implement), I'm happy to try to create the patch for this issue.  I understand the general idea but I would need a prod in the right direction. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13636636",
            "date": "2013-04-19T17:27:54+0000",
            "content": "When I find some tuits (round or otherwise), I will attempt making a Bloom41PostingsFormat, or whatever default PF version number is current at the time.  I may request some help on IRC or the dev list. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661074",
            "date": "2013-05-17T21:46:13+0000",
            "content": "As I was looking into how to implement this, I found myself unable to figure out how to proceed.  Then I had an idea - change the no-arg constructor so that it just uses the default postings format from the default codec.\n\nI fully expect that there's something fundamentally wrong with this approach, so if that's the case, can someone let me know why it's bad? "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-13661096",
            "date": "2013-05-17T22:24:37+0000",
            "content": "The no-args patch results in very dramatic test failures.  It seems that the information is simply not available at that point.  Unless there's another way of getting it, that idea just won't work. "
        },
        {
            "author": "Steve Rowe",
            "id": "comment-13717362",
            "date": "2013-07-23T18:47:59+0000",
            "content": "Bulk move 4.4 issues to 4.5 and 5.0 "
        },
        {
            "author": "Andrey Kudryavtsev",
            "id": "comment-13946285",
            "date": "2014-03-25T08:18:29+0000",
            "content": "Shawn, I think problem with your patch is that to instantiate class Codec it needs to instantiate NamedSPILoader instance,and it means to instantiate all posting format implementations, including BloomFilteringPostingsFormat. But BloomFilteringPostingsFormat needs Codec. Kind of cycle.    \nAs a work around we can implement something that Mark suggested as option 1) - something like \"Pulsing41\", but for bloom filter posting format. I attached a patch with simple \"BloomFiltering41PostingsFormat\" implementation. It can be used like \"postingsFormat=\"BloomFilter41\". Why \"41\"? Just because we've already have Lucene41PostingsFormat class. It can be \"46\" as well.\n "
        },
        {
            "author": "Uwe Schindler",
            "id": "comment-13971107",
            "date": "2014-04-16T12:57:11+0000",
            "content": "Move issue to Solr 4.9. "
        }
    ]
}