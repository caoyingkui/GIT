{
    "id": "LUCENE-7365",
    "title": "Don't use BooleanScorer for small segments",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Improvement"
    },
    "description": "If a BooleanQuery meets certain criteria (only contains disjunctions, is likely to match large numbers of docs) then we use a BooleanScorer to score groups of 1024 docs at a time.  This allocates arrays of 1024 Bucket objects up-front.  On very small segments (for example, a MemoryIndex) this is very wasteful of memory, particularly if the query is large or deeply-nested.  We should avoid using a bulk scorer on these segments.",
    "attachments": {
        "LUCENE-7365-query.patch": "https://issues.apache.org/jira/secure/attachment/12815457/LUCENE-7365-query.patch",
        "LUCENE-7365.patch": "https://issues.apache.org/jira/secure/attachment/12814862/LUCENE-7365.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15355589",
            "author": "Alan Woodward",
            "date": "2016-06-29T18:37:20+0000",
            "content": "Patch.  This prevents use of BooleanScorer if the segment is smaller than 1024 docs.  I'm not sure if that's the best cutoff though, and I'd like to do some benchmarking to check performance. "
        },
        {
            "id": "comment-15356611",
            "author": "Adrien Grand",
            "date": "2016-06-30T06:39:46+0000",
            "content": "One concern I have is that this reduces test coverage of BS1. Since this is mostly an issue for MemoryIndex (the cost of searching small segments is usually negligible compared to larger segments), maybe we could use another approach and modify MemoryIndex.createSearcher to return an IndexSearcher which overrides the protected void search(List<LeafReaderContext> leaves, Weight weight, Collector collector) method in order to use the Scorer API rather than the BulkScorer API? "
        },
        {
            "id": "comment-15356865",
            "author": "Alan Woodward",
            "date": "2016-06-30T10:16:35+0000",
            "content": "I like the idea of a specialised IndexSearcher, that's a lot less invasive.  Here's a patch.\n\nLinearScoringIndexSearcher is a separate, public class, because I can see situations other than MemoryIndex where you might want to disable bulk scoring (for example, luwak also allows you to match against small batches of documents, and the same caveats apply to these as to MI).  In this patch it's in the memory/ module, but that does force DefaultBulkScorer to become public, so maybe it would be better in core? "
        },
        {
            "id": "comment-15357070",
            "author": "Alan Woodward",
            "date": "2016-06-30T13:22:51+0000",
            "content": "This is an alternative idea, a ForceNoBulkScoringQuery implementation that wraps an existing query and ensures use of the DefaultBulkScorer. "
        },
        {
            "id": "comment-15357152",
            "author": "Adrien Grand",
            "date": "2016-06-30T14:18:06+0000",
            "content": "I think you forgot to put LinearScoringIndexSearcher in the previous patch?\n\nI am fine with the wrapper approach too, but if we do it I think we should wrap at the weight level directly rather than at the query level. This way we can still modify the way the query is executed, but without modifying the query tree. "
        },
        {
            "id": "comment-15357368",
            "author": "Alan Woodward",
            "date": "2016-06-30T16:14:43+0000",
            "content": "I'm not sure I understand what you mean by wrapping at the Weight level - do you mean by subclassing IndexSearcher and overriding createNormalizedWeight()? "
        },
        {
            "id": "comment-15357459",
            "author": "Adrien Grand",
            "date": "2016-06-30T16:53:48+0000",
            "content": "Yes, exactly. "
        },
        {
            "id": "comment-15358786",
            "author": "Alan Woodward",
            "date": "2016-07-01T10:57:19+0000",
            "content": "Here's a patch with Adrien's idea, actually including the LinearScoringIndexSearcher class this time. "
        },
        {
            "id": "comment-15360917",
            "author": "Adrien Grand",
            "date": "2016-07-04T06:45:40+0000",
            "content": "You should do return new Weight(innerWeight.getQuery()) { rather than return new Weight(query) { so that the query that is wrapped by the weight is rewritten. Could you also put a comment that the important thing is to not extend bulkScorer. Since all implemented methods of the wrapper delegate to the base impl, it's not obvious what it changes.\n\nI think we should put this specialized searcher in the memory module as it does not really make sense for other use-cases?\n "
        }
    ]
}