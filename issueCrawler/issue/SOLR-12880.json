{
    "id": "SOLR-12880",
    "title": "Show the FacetProcessor class name instead of the FacetRequest in the JSON Facets debug-trace output",
    "details": {
        "type": "Improvement",
        "status": "Resolved",
        "labels": "",
        "fix_versions": [
            "7.6"
        ],
        "components": [
            "Facet Module"
        ],
        "priority": "Minor",
        "resolution": "Fixed",
        "affect_versions": "7.5"
    },
    "description": "In the \"facet-trace\" debug output for the JSON facets the \"processor\" field current shows the class name of the FacetRequest implementation (e.g. FacetField, FacetQuery, FacetRange, etc.).  It seems like this would be more useful if it showed the FacetProcessor class being used instead (e.g. FacetFieldProcessorByArrayDV, FacetFieldProcessorByHashDV, FacetQueryProcessor, FacetRangeProcessor, etc.)\n\nExample of how it works today:\n\n\n\"debug\": {\n  \"facet-trace\": {\n    \"processor\": FacetQuery \"elapse\": 50 \"query\": null \"domainSize\": 3296 \"sub-facet\": [{\n      processor = FacetField,\n      elapse = 18,\n      field = partTypeId,\n      limit = -1,\n      domainSize = 3296,\n      numBuckets = 392\n    }, {\n      processor = FacetField,\n      elapse = 25,\n      field = browseNodeId,\n      limit = -1,\n      domainSize = 3296,\n      numBuckets = 535\n    }]\n  }\n}\n\n\n\nThis is what showing the FacetProcessor class name would show:\n\n\n\"debug\": {\n  \"facet-trace\": {\n    \"processor\": FacetQueryProcessor \"elapse\": 77 \"query\": null \"domainSize\": 3442 \"sub-facet\": [{\n      processor = FacetFieldProcessorByHashDV,\n      elapse = 3,\n      field = partTypeId,\n      limit = -1,\n      domainSize = 3442,\n      numBuckets = 407\n    }, {\n      processor = FacetFieldProcessorByHashDV,\n      elapse = 4,\n      field = browseNodeId,\n      limit = -1,\n      domainSize = 3442,\n      numBuckets = 553\n    }]\n  }\n}\n\n\n\nAlternatively an additional debug field could be added with this information.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16654123",
            "content": "Added a very simple pull request that implements this:\u00a0\u00a0https://github.com/apache/lucene-solr/pull/474 ",
            "author": "Tim Underwood",
            "date": "2018-10-17T20:02:41+0000"
        },
        {
            "id": "comment-16679276",
            "content": "The one concern i have here is that it looks like FacetHeatmap would be slightly worse off in debugging because it's Processor is an anonymous inner class?\n\nWe should probably either make the class concrete or just add a \"String getName() \n{ return getClass().getSimpleName() }\n\" to FacetProcessor and let FacetHeatmap override it.\n\nYonik Seeley - any concerns? it does seem really weird that a debug field explicitly called \"processor\" uses the FacetRequest and not the FacetProcessor ... makes me concerned i'm missing some reason why you might have done it that way explicitly? ",
            "author": "Hoss Man",
            "date": "2018-11-08T03:54:16+0000"
        },
        {
            "id": "comment-16680203",
            "content": "Hoss Man Good catch.\u00a0 I think both make sense.\u00a0 Making the FacetHeatmap FacetProcessor class non-anonymous should make it easier to read in stack traces or if it shows up in memory profiling.\u00a0 And adding a String getName() method that is used in the FacetRequest debug output makes it more explicit and easier override if needed for new FacetProcessor implementations.\n\nI've updated the PR with both suggestions (and made note of what the previous diff looked like for reference).\n\n\u00a0 ",
            "author": "Tim Underwood",
            "date": "2018-11-08T19:06:28+0000"
        },
        {
            "id": "comment-16680289",
            "content": "non-anonymous should make it easier to read in stack traces or if it shows up in memory profiling\n\nIs that an indictment against all anonymous inner classes?  Sounds like it.  \n\n+1 to getName().  I looked at your patch and see this method but nothing overrides it... so it's kinda incomplete as-is; no? ",
            "author": "David Smiley",
            "date": "2018-11-08T19:41:45+0000"
        },
        {
            "id": "comment-16680376",
            "content": "Is that an indictment against all anonymous inner classes? Sounds like it.\nI feel like maybe I hit a touchy subject?\u00a0 \u00a0 I can revert that piece of the commit if needed.\u00a0 I see a mix of styles within the codebase so I don't know if one style\u00a0is preferred over another.\u00a0 Is there a preferred style?\n\nIn my experience whenever I start out with anonymous inner classes chances are at some point I end up converting it to be non-anonymous since, for me, it makes it easier to:\n\n\tRead Stack traces\n\tUnderstand memory profiling/debugging\n\tTrack down class files for looking at the bytecode\n\n\n\nAs an example when I was recently profiling some of the faceting code I personally found it to be more work to figure out what these refer to since they are anonymous:\n\norg.apache.solr.search.facet.FacetFieldProcessorByHashDV$5.collect(int)\norg.apache.solr.search.facet.FacetFieldProcessorByHashDV$6.collect(int)\n\nBut that is just my personal opinion and experience.\u00a0 I'm more than happy to follow whatever the preferred convention is.\n+1 to getName(). I looked at your patch and see this method but nothing overrides it... so it's kinda incomplete as-is; no?\nIf the FacetHeatmapProcessor class becomes non-anonymous then the default getName implementation should work.\u00a0 Unless you want something other than \"FacetHeatmapProcessor\" as the name.\n\n\u00a0 ",
            "author": "Tim Underwood",
            "date": "2018-11-08T21:01:00+0000"
        },
        {
            "id": "comment-16680460",
            "content": "Sorry for being touchy.  I just observed that your statement was so broadly applicable that it would seem to suggest all anonymous classes are bad, and thus by consequence all lambdas as well \u2013 ouch!  That's quite an opinion you have   I acknowledge your points but the benefit to both is brevity and keeping logic close to where it's used instead of spread out.  So as always in coding, \"it depends\".\n\nI think either drop getName() and make FacetHeatmapProcessor an inner class, or adopt getName() and subclass it when the simpleName isn't useful.  I think both are fine but I lean towards FacetHeatmapProcessor being an inner class as it's then one less API method (no getName).   ",
            "author": "David Smiley",
            "date": "2018-11-08T22:00:33+0000"
        },
        {
            "id": "comment-16680501",
            "content": "Sorry for being touchy. I just observed that your statement was so broadly applicable that it would seem to suggest all anonymous classes are bad, and thus by consequence all lambdas as well \u2013 ouch! That's quite an opinion you have\u00a0\u00a0I acknowledge your points but the benefit to both is brevity and keeping logic close to where it's used instead of spread out. So as always in coding, \"it depends\".\nYes, it depends and it's all about the tradeoffs.\u00a0 I spent most of the my time coding in Scala and make very heavy use of lambdas throughout my codebases and they are very useful.\u00a0 However they absolutely make stack traces harder to read and bytecode harder to track down.\u00a0 The tradeoff being I have much cleaner code that is easier to understand and maintain.\u00a0 So in those cases the tradeoffs are worth it to me.\n\nSo no, my comments were not meant to be overly broad and applicable to everything involving anonymous classes or lambdas .\nI think\u00a0either\u00a0drop getName() and make FacetHeatmapProcessor an inner class,\u00a0or\u00a0adopt getName() and subclass it when the simpleName isn't useful. I think both are fine but I lean towards FacetHeatmapProcessor being an inner class as it's then one less API method (no getName).\nSounds good.\u00a0 I've updated the PR to remove the getName() method and just rely on FacetHeapmapProcessor being non-anonymous.\n\n\u00a0 ",
            "author": "Tim Underwood",
            "date": "2018-11-08T22:26:28+0000"
        },
        {
            "id": "comment-16680849",
            "content": "Commit fbb987282e764aded31d7867e0d8f1fd6e2f02d4 in lucene-solr's branch refs/heads/master from Tim Underwood\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=fbb9872 ]\n\nSOLR-12880: Show the FacetProcessor class name instead of the\n FacetRequest in the JSON Facets debug-trace output ",
            "author": "ASF subversion and git services",
            "date": "2018-11-09T04:32:39+0000"
        },
        {
            "id": "comment-16680850",
            "content": "Commit 1fc4081becf782310fe9666b0da323b364725ed1 in lucene-solr's branch refs/heads/branch_7x from Tim Underwood\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=1fc4081 ]\n\nSOLR-12880: Show the FacetProcessor class name instead of the\n FacetRequest in the JSON Facets debug-trace output\n\nCloses #474\n(cherry picked from commit fbb987282e764aded31d7867e0d8f1fd6e2f02d4) ",
            "author": "ASF subversion and git services",
            "date": "2018-11-09T04:33:59+0000"
        },
        {
            "id": "comment-16680859",
            "content": "Thanks for the contributions Tim ",
            "author": "David Smiley",
            "date": "2018-11-09T04:40:10+0000"
        }
    ]
}