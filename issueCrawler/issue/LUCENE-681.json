{
    "id": "LUCENE-681",
    "title": "org.apache.lucene.document.Field is Serializable but doesn't have default constructor",
    "details": {
        "labels": "",
        "priority": "Critical",
        "components": [
            "core/other"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "1.9,                                            2.0.0,                                            2.1",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "when I try to pass Document via network or do anyhing involving serialization/deserialization I will get an exception.\n\nthe following patch should help (Field.java):\n\n  public Field () {\n  }\n\n  private void writeObject (java.io.ObjectOutputStream out)\n          throws IOException \n{\n    out.defaultWriteObject ();\n  }\n\n  private void readObject (java.io.ObjectInputStream in)\n          throws IOException, ClassNotFoundException {\n    in.defaultReadObject ();\n    if (name == null) \n{\n      throw new NullPointerException (\"name cannot be null\");\n    }\n    this.name = name.intern ();        // field names are interned\n  }\n\n\n\nMaybe other classes do not conform to Serialization requirements too...",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2006-12-11T07:47:34+0000",
            "content": "worksforme\n\npublic class SerializationTest\n{\n    public static void main(String[] args) throws Exception\n    {\n        Field field = new Field(\"name\", \"value\", Field.Store.YES, Field.Index.TOKENIZED);\n        System.out.println(field);\n        final Object field2 = new SerializationTest().serialize(field);\n        System.out.println(field2);\n        System.out.println(field == field2);\n    }\n\n    Object serialize(Object input) throws IOException, ClassNotFoundException\n    {\n        ByteArrayOutputStream outBytes = new ByteArrayOutputStream();\n        ObjectOutputStream outObjects = new ObjectOutputStream(outBytes);\n        outObjects.writeObject(input);\n\n        ByteArrayInputStream inBytes = new ByteArrayInputStream(outBytes.toByteArray());\n        ObjectInputStream inObjects = new ObjectInputStream(inBytes);        \n        return inObjects.readObject();\n    }\n}\n\nIts a final class dude, what does it need a default constructor for?\n\nConsider closing. ",
            "author": "Jed Wesley-Smith",
            "id": "comment-12457253"
        },
        {
            "date": "2006-12-13T23:00:51+0000",
            "content": "I think Jed's right.  Plus, calling new Field(), which would now be possible, would give us without the actual information about the field - name, value, tokenized, stored, indexed, etc. ",
            "author": "Otis Gospodnetic",
            "id": "comment-12458302"
        }
    ]
}