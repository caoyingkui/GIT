{
    "id": "LUCENE-2357",
    "title": "Reduce transient RAM usage while merging by using packed ints array for docID re-mapping",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "4.0-ALPHA",
            "6.0"
        ],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "We allocate this int[] to remap docIDs due to compaction of deleted ones.\n\nThis uses alot of RAM for large segment merges, and can fail to allocate due to fragmentation on 32 bit JREs.\n\nNow that we have packed ints, a simple fix would be to use a packed int array... and maybe instead of storing abs docID in the mapping, we could store the number of del docs seen so far (so the remap would do a lookup then a subtract).  This may add some CPU cost to merging but should bring down transient RAM usage quite a bit.",
    "attachments": {
        "LUCENE-2357.patch": "https://issues.apache.org/jira/secure/attachment/12529913/LUCENE-2357.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2010-03-29T14:02:55+0000",
            "content": "I won't have any time to take this any time soon   So if anyone has the itch, jump! ",
            "author": "Michael McCandless",
            "id": "comment-12850914"
        },
        {
            "date": "2012-03-29T21:14:17+0000",
            "content": "Could I have some of your time for a few more details, to help a new commer be able to dig into this, please? ",
            "author": "Iulius Curt",
            "id": "comment-13241776"
        },
        {
            "date": "2012-04-03T14:16:08+0000",
            "content": "Hi Iulius,\n\nThe basic idea is to replace the fixed int[] that we now have (in oal.index.MergeState's docMaps array) with a PackedInts store (see oal.util.packed.PackedInts.getMutable).  This should be fairly simple, since a PackedInts store is concetually just like an int[].\n\nI think that (a rote swap) would be phase one.\n\nAfter that, we can save more RAM by storing either the new docID (what we do today), or, inverting that and storing instead the number of del docs seen so far, depending on which requires fewer bits.  EG if we are merging 1M docs but only 100K are deleted it's cheaper to store the number of deletes... ",
            "author": "Michael McCandless",
            "id": "comment-13245343"
        },
        {
            "date": "2012-05-27T23:35:56+0000",
            "content": "This patch should fix this issue. I replaced the int[] by an abstract MergeState.DocMap class which has two main implementations: a direct one which maps doc ids to their new value directly, and another one which counts the number of documents which have been deleted so far to know how much to decrement doc ids. ",
            "author": "Adrien Grand",
            "id": "comment-13284251"
        },
        {
            "date": "2012-05-28T14:52:46+0000",
            "content": "Patch looks great!\n\nDo we really need to impl DocMap.equals/hashCode?  Costly equals methods scare me... can we simply throw UOE from these methods?  Nobody should be calling them, I think.\n\nInstead of looping through numDocs summing up the del count, I think you should be able to set numDeletes = reader.numDeletedDocs()?  And maybe just consolidate those two build methods...\n ",
            "author": "Michael McCandless",
            "id": "comment-13284423"
        },
        {
            "date": "2012-05-28T15:34:47+0000",
            "content": "I implemented equals only for testing purposes (see TestSegmentMerger.java) and then hashCode for consistency. I can move the equals code to the test case if you prefer.\n\nRegarding numDeletedDocs, I tried to add the following assert\n\nassert docCount == reader.reader.numDocs() : \"docCount=\" + docCount + \", numDocs=\" + reader.reader.numDocs();\n\n\nto line 321 of SegmentMerger (before applying the patch) and it fails across a large number of tests (try to run TestAddIndexes a few times for example, and at least one of the testWithpendingDeletes* should fail). There used to be an assert in SegmentMerger but it was removed in r1148938 (http://svn.apache.org/viewvc/lucene/dev/trunk/lucene/src/java/org/apache/lucene/index/SegmentMerger.java?r1=1147671&r2=1148938&pathrev=1148938&diff_format=h) so I assumed the numDeletedDocs() was unreliable and the del count should be computed from liveDocs. I am not familiar enough with the merge process to know whether some invariants are broken or not. Should I open a bug? ",
            "author": "Adrien Grand",
            "id": "comment-13284437"
        },
        {
            "date": "2012-05-28T17:34:46+0000",
            "content": "I implemented equals only for testing purposes (see TestSegmentMerger.java) and then hashCode for consistency. I can move the equals code to the test case if you prefer.\n\nAhh, OK.  Yeah I think move it to the test case?  Thanks.\n\nThere used to be an assert in SegmentMerger but it was removed in r1148938\n\nAhh you're right!  Hmm, but, we actually know the accurate delCount higher up; let me tweak the patch a bit to pass this down, so we don't have to re-count it separately.\n\nso I assumed the numDeletedDocs() was unreliable and the del count should be computed from liveDocs. I am not familiar enough with the merge process to know whether some invariants are broken or not. Should I open a bug?\n\nAs far as I know, it's only unreliable in this context (SegmentReader passed to SegmentMerger for merging); this is because we allow newly marked deleted docs to happen concurrently up until the moment we need to pass the SR instance to the merger (search for \"// Must sync to ensure BufferedDeletesStream\" in IndexWriter.java) ... but it would be nice to fix that, so I think open a new issue (it won't block this one)?  We should be able to make a new SR instance, sharing the same core as the current one but using the correct delCount... ",
            "author": "Michael McCandless",
            "id": "comment-13284490"
        },
        {
            "date": "2012-05-28T17:36:06+0000",
            "content": "New patch, just passing down the correct delCount so we don't have to re-count.\n\nIt would be cleaner (but I think hairier) to create a new SR for merging that holds the correct delCount, but let's do that under the separate issue. ",
            "author": "Michael McCandless",
            "id": "comment-13284492"
        },
        {
            "date": "2012-05-28T19:02:44+0000",
            "content": "It would be cleaner (but I think hairier)\n\nIs \"cleaner hairier\" code a new oxymoron?  ",
            "author": "Dawid Weiss",
            "id": "comment-13284518"
        },
        {
            "date": "2012-05-28T19:23:18+0000",
            "content": "Is \"cleaner hairier\" code a new oxymoron? \n\nI guess so!!\n\nWhat I meant was ... it would be best if the SegmentReader's numDeletedDocs were always correct, but, fixing that in IndexWriter is somewhat tricky.  Ie, the fix could be hairy but the end result (\"SegmentReader.numDeletedDocs can always be trusted\") would be cleaner... ",
            "author": "Michael McCandless",
            "id": "comment-13284525"
        },
        {
            "date": "2012-05-28T21:37:13+0000",
            "content": "I just created LUCENE-4080 for the SegmentReader.numDeletedDocs() issue. ",
            "author": "Adrien Grand",
            "id": "comment-13284558"
        },
        {
            "date": "2012-05-28T22:02:10+0000",
            "content": "New patch. Same as Mike's but with the code of DocMap.equals moved to the test case. ",
            "author": "Adrien Grand",
            "id": "comment-13284560"
        },
        {
            "date": "2012-05-29T10:46:52+0000",
            "content": "I just created LUCENE-4080 for the SegmentReader.numDeletedDocs() issue.\n\nThanks Adrien. ",
            "author": "Michael McCandless",
            "id": "comment-13284718"
        },
        {
            "date": "2012-05-29T11:07:45+0000",
            "content": "New patch. Same as Mike's but with the code of DocMap.equals moved to the test case.\n\nThanks Adrien!\n\nI sync'd the patch to trunk, and also tweaked the DocMaps to hold onto the Bits liveDocs and first use that to check if a doc is still live, and secondarily checked the packed ints arrays for the remapping.  This enables us to simplify the lookup (eg, in the inverted case we need only one lookup). ",
            "author": "Michael McCandless",
            "id": "comment-13284728"
        },
        {
            "date": "2012-05-29T17:00:29+0000",
            "content": "New Patch with two minor modifications:\n\n\tI replaced PackedInts.bitsRequired(numDocs) with PackedInts.bitsRequired(Math.max(0, numDocs - 1)) in buildDirectDocMap since the highest doc id mapping is numDocs - 1,\n\tSince DocMap.get now relies on liveDocs to return the doc mapping, I added an assert in build to ensure that liveDocs is never null when numDeletedDocs > 0.\n\n ",
            "author": "Adrien Grand",
            "id": "comment-13284929"
        },
        {
            "date": "2012-05-29T19:36:04+0000",
            "content": "Thanks Adrien, new patch looks great... I'll commit shortly. ",
            "author": "Michael McCandless",
            "id": "comment-13285045"
        },
        {
            "date": "2012-05-29T19:40:46+0000",
            "content": "Thanks Adrien! ",
            "author": "Michael McCandless",
            "id": "comment-13285052"
        },
        {
            "date": "2012-06-01T15:37:48+0000",
            "content": "Woho, I love seeing old issues getting love like this! \nHas anyone measured (or at least eyeballed) how much RAM this saves? ",
            "author": "Otis Gospodnetic",
            "id": "comment-13287482"
        },
        {
            "date": "2012-06-01T16:02:24+0000",
            "content": "Hi Otis,\n\nBefore this change, each doc map used ~ maxDoc * 32 bits while they now use ~ maxDoc * lg(min(numDocs, numDeletedDocs)) (where lg is the ceil of log in base 2) bits. So even in the worst case (numDocs = numDeleted = maxDoc / 2), the improvement is ((31 - lg(maxDoc))/32. On a segment with maxDoc=10000000, this is a 22% improvement. But the improvement is much better when the number of deleted documents is close to 0 or to maxDoc. For example, if your segment has maxDoc=10000000 and numDeletedDocs=100000, the improvement (32 - lg(min(numDocs, numDeletedDocs))/32) is close to 50%. If numDeletedDocs=100, the improvement is close to 80%. ",
            "author": "Adrien Grand",
            "id": "comment-13287499"
        },
        {
            "date": "2012-06-01T16:14:30+0000",
            "content": "This is the theoretical improvement. However, in order not to slow merging down too much, I instantiate the PackedInts.Mutable that holds the doc map with acceptableOverheadRatio=PackedInts.FAST=50% (see LUCENE-4062), so the actual improvement might be a little worse than the theoretical improvement. If you are more interested in memory usage than in merge speed, you could still reach the theoretical improvement by replacing PackedInts.FAST with PackedInts.COMPACT in MergeState.DocMap.build. ",
            "author": "Adrien Grand",
            "id": "comment-13287508"
        },
        {
            "date": "2012-06-01T16:18:44+0000",
            "content": "Do we have any high-level idea of what the performance cost of COMPACT vs FAST is for merging?\n(e.g. typical case of Lucene40 codec). Is COMPACT maybe a good tradeoff? ",
            "author": "Robert Muir",
            "id": "comment-13287510"
        },
        {
            "date": "2012-06-01T16:32:58+0000",
            "content": "While working on LUCENE-4062, I had in mind that FAST (50%) would be ok for transient data structures while COMPACT (0%) and DEFAULT (20%) would be better for big and long-living structures depending on the performance requirements. However, it is true that the DocMap might not be the bottleneck for merging (especially since this operation involves disk accesses). I can try to run some benchmarks next week to find out whether COMPACT (or maybe DEFAULT) could be a better tradeoff. ",
            "author": "Adrien Grand",
            "id": "comment-13287521"
        },
        {
            "date": "2012-06-06T21:59:46+0000",
            "content": "I ran a quick test that indexes a few millions of documents with only one field (index, not stored, not analyzed, no terms vectors, ...) with different ratios of deleted documents, ram buffer sizes (between 1 and 50 MB) and merge factors (between 3 and 20). The global speedup with PackedInts.FAST was between 0.2% and 1.7% compared to PackedInts.COMPACT (although I ran this test on a low-end computer, other people might have slightly better results with the FAST version on a better machine). This is probably not worth the potential memory overhead. Would someone disagree to replace FAST with COMPACT for the docmaps instantiation? ",
            "author": "Adrien Grand",
            "id": "comment-13290477"
        },
        {
            "date": "2012-06-07T10:17:55+0000",
            "content": "I think changing to COMPACT is good.... ",
            "author": "Michael McCandless",
            "id": "comment-13290918"
        },
        {
            "date": "2012-06-07T10:18:38+0000",
            "content": "Reopen so we remember to change to COMPACT... ",
            "author": "Michael McCandless",
            "id": "comment-13290919"
        },
        {
            "date": "2012-06-08T16:12:40+0000",
            "content": "I am going to commit this change next week unless someone objects. ",
            "author": "Adrien Grand",
            "id": "comment-13291840"
        },
        {
            "date": "2012-06-08T20:27:28+0000",
            "content": "s/(Adrien Grand via Mike McCandless)/(Adrien Grand)\n\notherwise +1 ",
            "author": "Simon Willnauer",
            "id": "comment-13291967"
        },
        {
            "date": "2012-06-12T10:49:45+0000",
            "content": "Committed (r1349234 on trunk and r1349241 on branch 4.x). ",
            "author": "Adrien Grand",
            "id": "comment-13293504"
        }
    ]
}