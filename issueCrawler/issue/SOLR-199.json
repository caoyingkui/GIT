{
    "id": "SOLR-199",
    "title": "N-gram",
    "details": {
        "affect_versions": "None",
        "status": "Closed",
        "fix_versions": [
            "1.2"
        ],
        "components": [
            "search"
        ],
        "type": "New Feature",
        "priority": "Trivial",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "This tracks the creation of a patch that adds the n-gram/edge n-gram tokenizing functionality that was initially part of SOLR-81 (spell checking). This was taken out b/c the lucene SpellChecker class removed this dependency. None-the-less, I think this is useful functionality and the addition is trivial. How does everyone feel about such an addition?",
    "attachments": {
        "SOLR-199-n-gram.patch": "https://issues.apache.org/jira/secure/attachment/12356578/SOLR-199-n-gram.patch",
        "SOLR-81-ngram.patch": "https://issues.apache.org/jira/secure/attachment/12354473/SOLR-81-ngram.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Adam Hiatt",
            "id": "comment-12485031",
            "date": "2007-03-29T00:02:28+0000",
            "content": "Here is the patch. "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12485065",
            "date": "2007-03-29T04:21:29+0000",
            "content": "While I was the one who started that n-gram approach, and while I'm saving code and config changes from that work \"just in case\", I'm not sure why we'd add it to Solr at this point, if nothing is going to use it.  I'd say keep the patch here, so one can easily put that back into Solr when a need arises, but don't commit it unless there is some immediate need.  Do you have something that needs the n-gram stuff in Solr? "
        },
        {
            "author": "Adam Hiatt",
            "id": "comment-12485251",
            "date": "2007-03-29T16:57:01+0000",
            "content": "I do in fact have a need. I am creating an edge n-gram index to provide auto-complete functionality. This doesn't require the regular n-gram factory, but I put it in the patch as well. Furthermore, I am also planning to create a alternative spellchecker that does what you wanted to do initially (ie have a single spellchecking index). This would of course require n-gramming functionality.  "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12491023",
            "date": "2007-04-23T18:59:14+0000",
            "content": "Since there is no impact or even memory overhead if unused, and just a teeny bit of disk overhead, this patch looks fine to me. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12491647",
            "date": "2007-04-25T13:50:23+0000",
            "content": "This patch does rely on analyzers.jar from lucene contrib.  No reason that jar shouldn't be part of Solr, but it needs a version after Lucene 2.1 "
        },
        {
            "author": "Adam Hiatt",
            "id": "comment-12492078",
            "date": "2007-04-26T18:05:12+0000",
            "content": "Were you imagining that it just be included and that the users must use include a lucene 2.2+ analyzers jar themselves? "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12492096",
            "date": "2007-04-26T19:08:20+0000",
            "content": "Adam, I think Yonik is just saying that the n-gram stuff I added to Lucene's contrib/analyzers was added after 2.1 was released, so we'd need a version of that jar from the trunk at this time.  I see mentions of Solr 1.2, so perhaps we can grab the 2.2-dev version of that jar and add it to Solr starting with release 1.2?\n\nQuestion: How will the spellchecker you are writing or considering writing going to be different/better than the one in contrib/spellchecker? "
        },
        {
            "author": "Adam Hiatt",
            "id": "comment-12492106",
            "date": "2007-04-26T20:20:45+0000",
            "content": "Quoted:\nAdam, I think Yonik is just saying that the n-gram stuff I added to Lucene's contrib/analyzers was added after 2.1 was released, so we'd need a version of that jar from the trunk at this time. I see mentions of Solr 1.2, so perhaps we can grab the 2.2-dev version of that jar and add it to Solr starting with release 1.2?\n\nUnderstood. I talked with Yonik and he mentioned possibly upgrading to a lucene 2.2-dev in the future. I'm not sure he intended that to happen in time for solr 1.2 however. I suppose if it came to it, we could probably use the analyzers 2.2-dev with 2.1 core. I'm guessing the API was stable, but I'm not sure if we want to complicate things that much.\n\nQuoted:\nQuestion: How will the spellchecker you are writing or considering writing going to be different/better than the one in contrib/spellchecker? \n\nThe initial use case was actually to support autocomplete functionality. IE using the start n-gramming functionality to build tokens that we can match term fragments upon. \n\nHowever, I do still plan to write a native Solr spell checker based on this same patch sometime in the future. The major improvements with a native system are several fold. First, it allows for truly native use of a Solr-configurable lucene index. Second, we will be able to take advantage of native Solr caching. Third, we will be able to boost on arbitrary aspects. For example, take the misspelling 'ipad' and the indexed terms 'ipod' and 'ipaq'. Both the indexed terms are the same edit distance away from the misspelling. They also have the same number of 2 grams (though not 3 grams). If find that 'ipod' is the more valuable term we can boost slightly based on its popularity and draw out ahead. The final big win is the ability to spell check on individual input tokens. For example, assume that we have the term 'ipod' indexed in our spell checker, but not the term 'apple ipod' and the misspelling 'apple ipdo' is entered. The overlap between 'ipod' and 'apple ipdo' is slight enough to not warrant a suggestion. However if we tokenize on white space and spell correct on each token we would be able to catch the 'ipdo' misspelling. I'm sure there are other use cases, but those are the ones that I've identified.\n "
        },
        {
            "author": "Otis Gospodnetic",
            "id": "comment-12492375",
            "date": "2007-04-27T19:24:02+0000",
            "content": "+1 for getting this stuff into Solr then.  I imagine the patch is mostly what was in some of the SOLR-81 patches.\nI think I saw Yonik mentioning cleaning up either solrconfig or schema, so that's something to keep in mind when applying this patch. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12492947",
            "date": "2007-05-01T21:00:57+0000",
            "content": "NGramTokenizerFactory is refering to constants from, and constructing an instance of, EdgeNGramTokenizer\n\nI'm also not crazy about some of the utilities being added to BaseTokenizerFactory .. at a minimum they need better names (like getStringArg) but i'm not really clear on what this is suppose to mean at all...\n\n           protected int getInt(String name, int defaultVal, boolean useDefault)\n\n...if i don't want to use the default, then what am i suppose to pass as the defaultVal?\n\nhow about if we don't make any changes to BaseTokenizerFactory and just let subclasses that want convenience methods for dealing with args use MapSolrParams and the methods it supports? "
        },
        {
            "author": "Adam Hiatt",
            "id": "comment-12492948",
            "date": "2007-05-01T21:09:18+0000",
            "content": "I'll make those changes. I agree that we don't want bloated base classes.\n\n> NGramTokenizerFactory is refering to constants from, and constructing an instance of, EdgeNGramTokenizer \nAre you saying that this worries you b/c it is referenced in the example schema and will thus break without the lucene-analyzers package? I do agree that this example should probably be taken out for the time being (at the least). "
        },
        {
            "author": "Adam Hiatt",
            "id": "comment-12492962",
            "date": "2007-05-01T21:50:53+0000",
            "content": "This is the new patch, not just cut out of SOLR-81...\n\nI removed references to the Base class and fixed the edge n-gram bug. "
        },
        {
            "author": "Yonik Seeley",
            "id": "comment-12497530",
            "date": "2007-05-21T18:18:08+0000",
            "content": "Thanks Adam, I just committed this. "
        },
        {
            "author": "Hoss Man",
            "id": "comment-12589302",
            "date": "2008-04-15T23:44:43+0000",
            "content": "This bug was modified as part of a bulk update using the criteria...\n\n\n\tMarked (\"Resolved\" or \"Closed\") and \"Fixed\"\n\tHad no \"Fix Version\" versions\n\tWas listed in the CHANGES.txt for 1.2\n\n\n\nThe Fix Version for all 39 issues found was set to 1.2, email notification\nwas suppressed to prevent excessive email.\n\nFor a list of all the issues modified, search jira comments for this\n(hopefully) unique string: 20080415hossman2 "
        }
    ]
}