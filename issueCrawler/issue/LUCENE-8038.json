{
    "id": "LUCENE-8038",
    "title": "Decouple payload decoding from Similarity",
    "details": {
        "labels": "",
        "priority": "Major",
        "resolution": "Fixed",
        "affect_versions": "None",
        "status": "Closed",
        "type": "Improvement",
        "components": [],
        "fix_versions": [
            "7.2"
        ]
    },
    "description": "PayloadScoreQuery is the only place that currently uses SimScorer.computePayloadFactor(), and as discussed on LUCENE-8014, this seems like the wrong place for it.  We should instead add a PayloadDecoder abstraction that is passed to PayloadScoreQuery.",
    "attachments": {
        "LUCENE-8038-master.patch": "https://issues.apache.org/jira/secure/attachment/12896171/LUCENE-8038-master.patch",
        "LUCENE-8038.patch": "https://issues.apache.org/jira/secure/attachment/12896167/LUCENE-8038.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-16240040",
            "date": "2017-11-06T09:04:38+0000",
            "content": "Here is a patch for master/7x.\n\nIf no PayloadDecoder is passed to PayloadScoreQuery, then it delegates on to SimScorer as before.  The constructors with no PayloadDecoder are deprecated.\n\nNathan Gass this should fix LUCENE-7744 as well, I think? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16240090",
            "date": "2017-11-06T09:59:44+0000",
            "content": "And here's a patch for master, removing the deprecated methods.\n\nChristine PoerschkeErik Hatcher This has knock-on effects on the xml queryparser and Solr's handling PayloadScoreQParserPlugin that you might want to comment on/fix ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16240165",
            "date": "2017-11-06T11:28:09+0000",
            "content": "Yes this also fixes  LUCENE-7744.\n\nAs I read the code however, SimilarityPayloadDecoder is not fully backwards compatible. The old code ignored tokens without payload for scoring, the new one treats them as having payload 0 (So a MinPayloadFunction for the document \"foo|0.5 foo\" would newly return 0 instead of the current 0.5 (or 1.0 in lucene 5).\n\nIt might be useful to let PayloadDecoder return null for missing payloads. This way its possible to get any of the three semantics with a custom PayloadDecoder and default PayloadFunctions. ",
            "author": "Nathan Gass"
        },
        {
            "id": "comment-16240170",
            "date": "2017-11-06T11:33:22+0000",
            "content": "It might be feature  creep for the current issue. But what is the  story on more complex custom payload functions? \n\nTo use PayloadScoreQuery, I necessarily have to decode the payload to a single float and use that in the custom PayloadFunction. Lets say I have not only floats as payloads but also for example token types. And my final scoring factor could be for example the average of the most important type for which the token in question exists. Currently I would need to do some dirty hacks encoding type and score in a single float. But PayloadScoreQuery never actually uses the value and just passes it on to the PayloadFunction. So if we deprecate the old way anyway, the new one could be even more flexible?\n\nThat said that patch completely solves my current use case and the described more complex one is a fabrication for the sake of an example. ",
            "author": "Nathan Gass"
        },
        {
            "id": "comment-16240182",
            "date": "2017-11-06T11:55:08+0000",
            "content": "It might be useful to let PayloadDecoder return null for missing payloads\n\nI think I'd rather go back to the lucene 5.0 behaviour of returning 1.0 - this is all being done within the scoring loop, so we want to keep boxing and object creation to an absolute minimum.\n\nBut what is the story on more complex custom payload functions?\n\nThere's definitely more to do here!  But yes, let's defer that to a later issue.  This one is mainly to enable LUCENE-8014. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16240220",
            "date": "2017-11-06T12:38:32+0000",
            "content": "I want to urge caution about adding more flexibility. There is a huge benefit in restricting what this can do: it can allow us to potentially implement stuff like LUCENE-4100 and LUCENE-7993 for span queries.\n\nBut if we make them \"ultra-flexible crap\" with no rules or constraints then these queries will just remain slow compared to e.g. phrase queries.\n\nCan we just fix the API to be better on this issue without messing around with any scoring of null or flexibility or anything else? ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16240276",
            "date": "2017-11-06T13:20:43+0000",
            "content": "I think the extra flexibility could be limited to just PayloadScoreQuery, but I agree, let's just fix the API on this issue. ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16241894",
            "date": "2017-11-07T12:01:36+0000",
            "content": "I want to urge caution about adding more flexibility. There is a huge benefit in restricting what this can do: it can allow us to potentially implement stuff like LUCENE-4100 and LUCENE-7993 for span queries.\nJust for the record: As the calculated floats are not restricted anyway I don't think optimizations like this are possible/impossible depending on that sort of flexibility. You have/can add the exact same rules and constraints both ways.\n ",
            "author": "Nathan Gass"
        },
        {
            "id": "comment-16241900",
            "date": "2017-11-07T12:08:56+0000",
            "content": "They need to be restricted though, thats why we opened this issue, because we are working on fixing similarity impls to have well-defined behavior, so that we can have these optimizations.\n\nFor example a similarity should never be asked to compute tf(0), it will result in divide by zero with most scoring systems. Its not something we should have to guard against with conditionals everywhere, it should instead be avoided. ",
            "author": "Robert Muir"
        },
        {
            "id": "comment-16243566",
            "date": "2017-11-08T09:13:02+0000",
            "content": "PayloadScoreQuery just multiplies the score returned by the Similarity by a payload factor, so it shouldn't interfere with any of the restrictions above.  For more flexibility, it might be worth investigating a DoubleValuesSource that exposes payload factors that you could then use in e.g. an Expression.  You'd then use the Expression as a sort field, which would bypass LUCENE-4100 entirely.  That's for later though, I think the patch here is ready? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16245719",
            "date": "2017-11-09T14:22:26+0000",
            "content": "Commit 44bd8e4d7922b3233c7db6cc435e95959a0bc1ee in lucene-solr's branch refs/heads/branch_7x from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=44bd8e4 ]\n\nLUCENE-8038: Add PayloadDecoder ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16245722",
            "date": "2017-11-09T14:22:34+0000",
            "content": "Commit 5c9bcc9e900de027931a86704a8ab5fd4c525d9f in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=5c9bcc9 ]\n\nLUCENE-8038: Add PayloadDecoder ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16245725",
            "date": "2017-11-09T14:22:41+0000",
            "content": "Commit a744654bcae0b71232f009297d590a06574ce434 in lucene-solr's branch refs/heads/master from Alan Woodward\n[ https://git-wip-us.apache.org/repos/asf?p=lucene-solr.git;h=a744654 ]\n\nLUCENE-8038: Remove deprecated PayloadScoreQuery methods ",
            "author": "ASF subversion and git services"
        },
        {
            "id": "comment-16391189",
            "date": "2018-03-08T12:38:29+0000",
            "content": "With my current test setup (elasticsearch 6.2.2 and delimited_payload filter), the provided PayloadDecoder.FLOAT_DECODER did not work correctly. I had to provide my own looking like this `payload-> payload == null ? 1 : PayloadHelper.decodeFloat(payload.bytes, payload.offset)`.\n\nI didn't \u00a0look further into it and am therefore not \u00a0sure \u00a0what the exact problem is.\n\n\u00a0 ",
            "author": "Nathan Gass"
        },
        {
            "id": "comment-16396781",
            "date": "2018-03-13T10:17:04+0000",
            "content": "Hi Nathan Gass, this is because the DelimiterPayloadFilter actually uses a different form of encoding.\u00a0 This is trappy,\u00a0but also not easy to resolve because the various\u00a0encoder/decoder classes here live in different modules.\u00a0 Maybe open a new issue about consolidating things? ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16552374",
            "date": "2018-07-23T06:16:36+0000",
            "content": "Alan Woodward \u00a0\nHello,\u00a0\nCan you(or anyone) tell me about the motivation behind removing the following if-condition?\nJava class: /lucene/queries/src/java/org/apache/lucene/queries/payloads/PayloadScoreQuery.java\n\nif (payload == null)\n    return;\n\n\nActually, in our custom query parser, payload value is null and earlier it was getting skipped and PayloadsSeen was 0 but now function is returning PayloadsSeen as 1 and the overall score is getting compromised. \n\nThanks in advance. ",
            "author": "Tapan Vaishnav"
        },
        {
            "id": "comment-16552456",
            "date": "2018-07-23T08:02:00+0000",
            "content": "I think it's a bug... we don't really have enough tests around PayloadScoreQuery, and in particular it seems we don't test the case where some positions have a payload and some don't.\n\nThis is a released issue, would you mind opening a new one?\u00a0 We should change the collector to add back in the condition above, and\u00a0change the contract of PayloadDecoder to say that it won't accept null ",
            "author": "Alan Woodward"
        },
        {
            "id": "comment-16552852",
            "date": "2018-07-23T13:23:31+0000",
            "content": "Hi Alan Woodward ,\nThank you for your quick response. \nI will open a new JIRA issue concerning this bug. ",
            "author": "Tapan Vaishnav"
        }
    ]
}