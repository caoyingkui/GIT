{
    "id": "SOLR-11245",
    "title": "Cloud native Dockerfile",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Build"
        ],
        "type": "Bug",
        "fix_versions": [
            "master (8.0)"
        ],
        "affect_versions": "6.6",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "SOLR Should have its own Dockerfile, ideally one that is cloud native (i.e. doesn't expect anything special from the operating system in terms of user IDs, etc), for deployment, that we can curate and submit changes to as part of the official ASF process, rather then externally.  The idea here is that testing SOLR regression, as a microservice, is something we should be doing as part of our continuous integration, rather then something done externally.\n\nWe have a team here that would be more then happy to do the work to port whatever existing SOLR dockerfiles are out there into something that is ASF maintainable, and cloud native, and easily testable, as well.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-08-21T13:45:46+0000",
            "content": "Interesting. How would this fit in our source tree? Would there be a separate git repo, mirrored to github, which in turn ends up in docker-hub? How would our build and Jenkins be able to build and test the Dockerfile?  ",
            "author": "Jan H\u00f8ydahl",
            "id": "comment-16135185"
        },
        {
            "date": "2017-08-21T15:01:43+0000",
            "content": "Most Docker users interact with docker through images hosted on Docker hub, and there is already a \"solr\" Solr image there, from the \"official-images\" repo managed by Docker Inc. That uses the image from https://github.com/docker-solr/docker-solr, which is managed by myself and committer Shalin Shekhar Mangar with help from David Smiley and others, and gets reviewed by the Docker library team. It is setup as a github organisation, so that we can add users, and arrange for succession and so on.\n\nThis image itself is fairly straightforward; it's just Solr installed in an OpenJDK image, with some scripts to make it a little easier to work with, and some documentation to go along with it. Most of the work goes into setting up the build process for the official images builders, doing security verification, looking at our own Travis CI, maintaining multiple versions, keeping on top of new versions that are released, working with the Docker library team, dealing with github issues as they are raised, keeping up with the ever-changing Docker features and so on. We try to be careful about backwards compatibility; this image has been around for a couple of years now, and originally came from one I started in 2013. So far folks seem to be happy enough with how these things are working out. \nIf you want to help out there, you're very welcome; there are often github issues asking for help and examples, and occasional new feature requests without PRs.\n\nIf there is an appetite for the Apache Solr committers/jira/infrastructure whatever to be more involved or take administrative responsibility or whatever, I'm open to discussing that. ",
            "author": "Martijn Koster",
            "id": "comment-16135259"
        }
    ]
}