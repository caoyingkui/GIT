{
    "id": "LUCENE-1513",
    "title": "fastss fuzzyquery",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "modules/other"
        ],
        "type": "New Feature",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Not A Problem",
        "status": "Closed"
    },
    "description": "code for doing fuzzyqueries with fastssWC algorithm.\n\nFuzzyIndexer: given a lucene field, it enumerates all terms and creates an auxiliary offline index for fuzzy queries.\nFastFuzzyQuery: similar to fuzzy query except it queries the auxiliary index to retrieve a candidate list. this list is then verified with levenstein algorithm.\n\nsorry but the code is a bit messy... what I'm actually using is very different from this so its pretty much untested. but at least you can see whats going on or fix it up.",
    "attachments": {
        "fastSSfuzzy.zip": "https://issues.apache.org/jira/secure/attachment/12397215/fastSSfuzzy.zip"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-01-06T19:57:14+0000",
            "content": "References provided by Glen Newton:\n\n\n\tFast Similarity Search in Large Dictionaries. http://fastss.csg.uzh.ch/\n\tPaper: Fast Similarity Search in Large Dictionaries.\nhttp://fastss.csg.uzh.ch/ifi-2007.02.pdf\n\tFastSimilarSearch.java http://fastss.csg.uzh.ch/FastSimilarSearch.java\n\tPaper: Fast Similarity Search in Peer-to-Peer Networks.\n  http://www.globis.ethz.ch/script/publication/download?docid=506\n\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12661286"
        },
        {
            "date": "2009-01-06T20:37:54+0000",
            "content": "I feel like I missed some FastSS discussion on the list.... was there one?\n\nI took a quick look at the paper and the code.  Is the following the general idea:\n\n\tindex \"fuzzy\"/\"misspelled\" terms in addition to the normal terms (=> larger index, slower indexing).  How much fuzziness one wants to allow or handle is decided at index time.\n\trewrite the query to include variations/misspellings of each terms and use that to search (=> more clauses, slower than normal search, but faster than the \"normal\" fuzzy query whose speed depends on the number of indexed terms)\n?\n\n\n\nQuick code comments:\n\n\tNeed to add ASL\n\tNeed to replace tabs with 2 spaces and formatting in FuzzyHitCollector\n\tNo @author\n\tUnit test if possible\n\tShould FastSSwC not be able to take a variable K?\n\tShould variables named after types (e.g. \"set\" in public static String getNeighborhoodString(Set<String> set) { ) be renamed, so they describe what's in them instead? (easier to understand API?)\n\n ",
            "author": "Otis Gospodnetic",
            "id": "comment-12661302"
        },
        {
            "date": "2009-01-06T20:57:33+0000",
            "content": "otis, discussion was on java-user.\n\nagain, I apologize for the messy code. as mentioned there, my setup is very specific to exactly what I am doing and in no way is this code ready. But since i'm currently pretty busy with other things at work I just wanted to put something up here for anyone else interested.\n\ntheres the issues you mentioned, and also some i mentioned on java-user. for example how to handle updates to indexes that introduce new terms (they must be added to auxiliary index), or even if auxiliary index is the best approach.\n\nthe general idea is that instead of enumerating terms to find terms, the deletion neighborhood as described in the paper is used instead. this way search time is not linear based on number of terms. yes you are correct that it only can guarantee edit distances of K which is determined at index time. perhaps this should be configurable, but i hardcoded k=1 for simplicity. i think its something like 80% of typos...\n\nas i mentioned on the list another idea is you could implement FastSS (not the wC variant) with deletion positions maybe by using payloads. This would require more space but eliminate the candidate verification step. maybe it would be nice to have some of their other algorithms such as block-based,etc available also. \n ",
            "author": "Robert Muir",
            "id": "comment-12661314"
        },
        {
            "date": "2010-02-19T21:26:45+0000",
            "content": "For Lucene, LUCENE-2089 will always be faster than even FastSS, as our FuzzyQuery is really a top-N query, and we can exploit properties of the priority queue to make it even faster.\n\nLUCENE-2089 also works without any auxiliary index or data structures, just solely on lucene's terms dict, so it works great for updates/NRT/whatever, no back compat problems.\n\nI'm cancelling this issue as the alternative is superior in every aspect. ",
            "author": "Robert Muir",
            "id": "comment-12835956"
        }
    ]
}