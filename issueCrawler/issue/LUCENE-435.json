{
    "id": "LUCENE-435",
    "title": "[PATCH] BufferedIndexOutput - optimized writeBytes() method",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/store"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "I have created a patch that optimize writeBytes metod:\n\n  public void writeBytes(byte[] b, int length) throws IOException {\n    if (bufferPosition > 0) // flush buffer\n      flush();\n\n    if (length < BUFFER_SIZE) \n{\n      flushBuffer(b, length);\n      bufferStart += length;\n    }\n else {\n      int pos = 0;\n      int size;\n      while (pos < length) {\n        if (length - pos < BUFFER_SIZE) \n{\n          size = length - pos;\n        }\n else \n{\n          size = BUFFER_SIZE;\n        }\n        System.arraycopy(b, pos, buffer, 0, size);\n        pos += size;\n        flushBuffer(buffer, size);\n        bufferStart += size;\n      }\n    }\n  }\n\nIts a much more faster now. I know that for indexing this not help much, but for copying files in the IndexStore this is so big improvement. Its about 400% faster that old implementation.\n\nThe patch was tested with 300MB data, \"ant test\" sucessfuly finished with no errors.",
    "attachments": {
        "BufferedIndexOutputWriteBytes.patch": "https://issues.apache.org/jira/secure/attachment/12314466/BufferedIndexOutputWriteBytes.patch",
        "fastWrite.patch": "https://issues.apache.org/jira/secure/attachment/12321272/fastWrite.patch",
        "writeBytes.patch": "https://issues.apache.org/jira/secure/attachment/12314792/writeBytes.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2005-09-20T17:33:40+0000",
            "content": "Hold on, I will supply unified patch, I am also working on TestStore to do some testing. ",
            "author": "Lukas Zapletal",
            "id": "comment-12329976"
        },
        {
            "date": "2005-09-20T18:03:35+0000",
            "content": "The patch in unified format created by:\n\n\n\t.../trunk> svn diff\n\n ",
            "author": "Lukas Zapletal",
            "id": "comment-12329980"
        },
        {
            "date": "2005-09-20T18:08:15+0000",
            "content": "TestStore runs fine, I will add some testing for writeBytes (since it uses writeByte). The patch is tested. ",
            "author": "Lukas Zapletal",
            "id": "comment-12329981"
        },
        {
            "date": "2005-09-21T12:01:48+0000",
            "content": "I voiced some concerns about this patch in:\n\nhttp://www.mail-archive.com/java-dev@lucene.apache.org/msg02055.html\n\nI don't think these have yet been addressed. ",
            "author": "Doug Cutting",
            "id": "comment-12330060"
        },
        {
            "date": "2005-09-21T16:38:52+0000",
            "content": "Will fix this. ",
            "author": "Lukas Zapletal",
            "id": "comment-12330074"
        },
        {
            "date": "2005-10-10T22:26:10+0000",
            "content": "Fixed patch, TestStore also updated... ",
            "author": "Lukas Zapletal",
            "id": "comment-12331708"
        },
        {
            "date": "2005-10-21T22:54:13+0000",
            "content": "What else is needed? Its fixed and tested. ",
            "author": "Lukas Zapletal",
            "id": "comment-12332708"
        },
        {
            "date": "2005-10-21T23:43:52+0000",
            "content": "I just breifly looked at writeBytes(), and I think there is further room for optimization.\nSpecifically, Doug's suggestion: \"If the new data is larger than a buffer, then the buffer should be flushed and the new data written directly, without ever copying it into the buffer.\"\n\nEven if everything were already peftect, committers need time to review it. ",
            "author": "Yonik Seeley",
            "id": "comment-12332714"
        },
        {
            "date": "2005-12-12T01:50:33+0000",
            "content": "Hello,\n\nI have done what you requested (sorry for the late delay - too busy). I also found a bug in RAMOutputStream - the implementation of flushBuffer method was not able to write any buffers longer than 2*BUFFER_LENGTH. My fast writeBytes patch now handle all various situation and uses the fastest methods to write data.\n\nIn my opinion its not good to make BUFFER_LENGTH constant public. Consider making it private since this can lead to nontrivial \"dependency\" (as I have described above). Its not good to have one buffer length for input, output and RAM* objects (which should have independant buffer length at all - it has nothing to do with the caching in the abstract methods). Making it private and maybe accessible on runtime could help a litte (as I said \u2013 I use the API for some index copying and I would like to have larger buffers).\n\nAnyway, this is my contribution, I am looking for more reviews. The patch includes StoreTest modification which helps with testing either writeByte method or writeBytes methods. Thanks for your attention. ",
            "author": "Lukas Zapletal",
            "id": "comment-12360143"
        },
        {
            "date": "2006-02-22T02:00:47+0000",
            "content": "I just committed this. ",
            "author": "Doug Cutting",
            "id": "comment-12367226"
        }
    ]
}