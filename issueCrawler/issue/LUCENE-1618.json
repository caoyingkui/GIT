{
    "id": "LUCENE-1618",
    "title": "Allow setting the IndexWriter docstore to be a different directory",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [
            "2.9"
        ],
        "affect_versions": "2.4.1",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "Add an IndexWriter.setDocStoreDirectory method that allows doc\nstores to be placed in a different directory than the IW default\ndir.",
    "attachments": {
        "MemoryCachedDirectory.java": "https://issues.apache.org/jira/secure/attachment/12406644/MemoryCachedDirectory.java",
        "LUCENE-1618.patch": "https://issues.apache.org/jira/secure/attachment/12406724/LUCENE-1618.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2009-04-27T20:53:37+0000",
            "content": "I can see how this would potentially be useful for realtime... but it seems like only IndexWriter could eventually fix the situation of having the docstore on disk and the rest of a segment in RAM.  Which means that this API shouldn't be public? ",
            "author": "Yonik Seeley",
            "id": "comment-12703363"
        },
        {
            "date": "2009-04-27T21:00:54+0000",
            "content": "Yeah I also think this should be an \"under the hood\" (done only by NRT) optimization inside IndexWriter.\n\nThe only possible non-NRT case I can think of is when users make temporary indices in RAM, it's possible one would want to write the docStore files to an FSDirectory (because they are so large) but keep postings, norms, deletes, etc in RAM.  But going down that road opens up a can of worms... eg does segments_N somehow have to keep track of which dir has which parts of a segment?  Suddenly IndexReader must also know to look in different dirs for different parts of a segment, etc.\n\nit might be cleaner to make a Directory impl that dispatches certain files to a RAMDir and others to an FSDir, so IndexWriter/IndexReader still see a single Directory API. ",
            "author": "Michael McCandless",
            "id": "comment-12703370"
        },
        {
            "date": "2009-04-27T21:08:18+0000",
            "content": "\nnon-NRT case I can think of is when users make temporary indices in RAM\n\nYes, and there could be others we don't know about.  \n\n\nit might be cleaner to make a Directory impl that dispatches certain files to a RAMDir and others to an FSDir\n\nGood idea.  I'll try that method first.  If this one works out, then the API will be public? ",
            "author": "Jason Rutherglen",
            "id": "comment-12703375"
        },
        {
            "date": "2009-04-27T21:17:48+0000",
            "content": "Would also further suggest that this Directory implementation would take one or more directories to store documents, along with one or more directories to store the index itself\n\none of the directories should be explicitly marked for \"reading\" for each use\n\nthis allows creating a Directory instance that will:\n\n\tstore documents to disk (reading from disk during searches)\n\twrite index to disk and ram (reading from RAM during searches)\n\n ",
            "author": "Tim Smith",
            "id": "comment-12703384"
        },
        {
            "date": "2009-04-27T21:23:47+0000",
            "content": "\n> it might be cleaner to make a Directory impl that dispatches certain files to a RAMDir and others to an FSDir\n\nGood idea. I'll try that method first. If this one works out, then the API will be public?\n\nWhich API would be public?\n\nIf this (call it \"FileSwitchDirectory\" for now  ) works then we would not add any API to IndexWriter (ie it's either or)?  But FileSwitchDirectory would be public & \"expert\".\n\nOne downside to this approach is it's brittle \u2013 whenever we change file extensions you'd have to \"know\" to fix this Directory.  Or maybe we make the Directory specialized to only storing the doc stores in the FSDir, then whenever we change file formats we would fix this directory?  But in the future, with custom codecs, things could be named whatever... hmmm.  Lacking clarity. ",
            "author": "Michael McCandless",
            "id": "comment-12703388"
        },
        {
            "date": "2009-04-27T21:46:12+0000",
            "content": "Maybe, \nFileSwitchDirectory should have possibility to get file list/extensions that should be loaded into RAM... making it maintenance free, pushing this decision to end user... if, and when we decide to support users in it, we could than maintain static list at separate place . Kind of separate execution and configuration\n\nI think I saw something similar Ning Lee made quite a while ago, from hadoop camp (indexing on hadoop something...). But cannot remember what was it \n\n\n ",
            "author": "Eks Dev",
            "id": "comment-12703406"
        },
        {
            "date": "2009-04-27T22:06:23+0000",
            "content": "Would also further suggest that this Directory implementation would take one or more directories to store documents, along with one or more directories to store the index itself\n\nYou mean an opened IndexOutput would write its output to two (or more) different places?  So you could \"write through\" a RAMDir down to an FSDir?  (This way both the RAMDir and FSDir have a copy of the index). ",
            "author": "Michael McCandless",
            "id": "comment-12703415"
        },
        {
            "date": "2009-04-27T22:08:04+0000",
            "content": "\nileSwitchDirectory should have possibility to get file list/extensions that should be loaded into RAM... making it maintenance free, pushing this decision to end user... if, and when we decide to support users in it, we could than maintain static list at separate place . Kind of separate execution and configuration\n\n+1\n\nWith flexible indexing, presumably one could use their codec to ask it for the \"doc store extensions\" vs the \"postings extensions\", etc., and pass to this configurable FileSwitchDirectory. ",
            "author": "Michael McCandless",
            "id": "comment-12703416"
        },
        {
            "date": "2009-04-28T13:01:36+0000",
            "content": "\nYou mean an opened IndexOutput would write its output to two (or more) different places? So you could \"write through\" a RAMDir down to an FSDir? (This way both the RAMDir and FSDir have a copy of the index).\n\nyes, so if you register more than one directory for \"index files\", then the IndexOutput for the directory would dispatch to an IndexOutput for both sub directories\nthen, the IndexInput would only be opened on the \"primary\" directory (for instance, the RAM directory)\n\nThis will allow extremely fast searches, with the persistence of a backing FSDirectory\n\ncoupled with then having a set of directories for the \"Stored Documents\", then allows:\n\n\tRAM directory search speed\n\tAll changes persisted to disk\n\tDocuments Stored (and retrieved from disk) (or optionally retrieved from RAM)\n\n ",
            "author": "Tim Smith",
            "id": "comment-12703630"
        },
        {
            "date": "2009-04-28T14:08:48+0000",
            "content": "Neat.  This is sounding like one cool Directory... ",
            "author": "Michael McCandless",
            "id": "comment-12703651"
        },
        {
            "date": "2009-04-28T14:34:29+0000",
            "content": "You mean an opened IndexOutput would write its output to two (or more) different places?\nExcept the best way is to write directly to FSDir.IndexOutput, and when it is closed, read back into memory.\nThat way, if FSDir.IO hits an exception while writing, you don't have to jump through the hoops to keep your RAMDir in consistent state (we had real troubles when some files were 'written' to RAMDir, but failed to persist in FSDir).\nAlso, when reading the file back you already know it's exact size and can allocate appropriate buffer, saving on resizings (my draft impl) / chunking (lucene's current impl) overhead. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12703656"
        },
        {
            "date": "2009-04-28T14:42:24+0000",
            "content": "As it relates to near real time, the search speed of the RAM directory in relation to FSDirectory seems unimportant (what is this diff anyway?) - the FSDirectory will be much larger and that is where the bulk of the search time will be.\n\nIt seems like the main benefit of RAMDirectory for NRT is faster creation time (no need to create on-disk files, write them, then sync them), right?  Actually the sync is only needed if a new segments file will be written... but there still may be synchronous metadata operations for open-write-close of a file, depending on the FS? ",
            "author": "Yonik Seeley",
            "id": "comment-12703658"
        },
        {
            "date": "2009-04-28T14:58:46+0000",
            "content": "what is this diff anyway?\nThat's not a diff, I gave a sample of write-through ram directory Tim and Mike were speaking about. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12703666"
        },
        {
            "date": "2009-04-28T15:26:32+0000",
            "content": "That's not a diff\n\nSorry, by \"diff\" I meant the difference in search performance on a RAMDirectory vs NIOFSDirectory where the files are all cached by the OS. ",
            "author": "Yonik Seeley",
            "id": "comment-12703676"
        },
        {
            "date": "2009-04-28T15:39:36+0000",
            "content": "by \"diff\" I meant the difference in search performance on a RAMDirectory vs NIOFSDirectory where the files are all cached by the OS.\n\nIt's a good question \u2013 I haven't tested it directly.  I'd love to know too...\n\nFor an NRT writer using RAMDir for recently flushed tiny segments (LUCENE-1313), the gains are more about the speed of reading/writing many tiny files.  Probably we should try [somehow] to test this case, to see if LUCENE-1313 is even a worthwhile optimization. ",
            "author": "Michael McCandless",
            "id": "comment-12703683"
        },
        {
            "date": "2009-04-28T15:40:25+0000",
            "content": "Sorry, by \"diff\" I meant the difference in search performance on a RAMDirectory vs NIOFSDirectory where the files are all cached by the OS.\nAh!  It exists. Ranked by speed, directories are FSDirectory (native/sys calls), MMapDirectory (native), RAMDirectory (chunked), MemCachedDirectory (raw array access). But for the purporses of searching a small amount of freshly-indexed docs this difference is miniscule at best, me thinks. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12703684"
        },
        {
            "date": "2009-04-28T21:58:20+0000",
            "content": "For an NRT writer using RAMDir for recently flushed tiny\nsegments (LUCENE-1313), the gains are more about the speed of\nreading/writing many tiny files. Probably we should try\n[somehow] to test this case, to see if LUCENE-1313 is even a\nworthwhile optimization.\n\nTrue a test would be good, how many files per second would it\nproduce?\n\nWhen testing the realtime and the .del files (which are created\nnumerously before LUCENE-1516) the slowdown was quite dramatic\nas it's not a sequential write which means the disk head can\nmove each time. That coupled with merges going on which\ncompletely ties up the IO I think it's hard for small file\nwrites to not slow down with a rapidly updating index. \n\nAn index that is being updated rapidly presumably would be\nperforming merges more often to remove deletes.  ",
            "author": "Jason Rutherglen",
            "id": "comment-12703850"
        },
        {
            "date": "2009-04-28T22:12:57+0000",
            "content": "One downside to this approach is it's brittle - whenever\nwe change file extensions you'd have to \"know\" to fix this\nDirectory.\n\nTrue, I don't think we can expect the user to pass in the\ncorrect FileSwitchDirectory (with the attendant file\nextensions), we can make the particular implementation of\nDirectory we use to solve this problem internal to IW. Meaning\nthe writer can pass through the real directory calls to FSD, and\nhandle the RAMDir calls on it's own.  ",
            "author": "Jason Rutherglen",
            "id": "comment-12703855"
        },
        {
            "date": "2009-04-29T01:15:02+0000",
            "content": "Implementation of the FileSwitchDirectory. It's nice this works\nso elegantly with the existing Lucene APIs.\n\nThe test case makes sure the fdt and fdx files are written to\nthe fsdirectory based on the files extensions. I feel that\nLUCENE-1313 will depend on this and I'll implement LUCENE-1313\nwith this patch in mind. I'm not sure how we insure there are no\nfile name collisions between the real dir and FSD? Because IW is\nmanaging the creation of the segment names I don't think we\nneed to worry about this.\n\n\n ",
            "author": "Jason Rutherglen",
            "id": "comment-12703935"
        },
        {
            "date": "2009-04-29T09:40:15+0000",
            "content": "Patch looks good Jason!\n\nCan you add copyright header & CHANGES.txt entry, and remove some noise (eg TestIndexWriterReader.java)?\n\nAlso: I think you should allow any Directory instance as primary/secondary?  (You're hardwiring to RAMDir/FSDir now).  I realize NRT's use of this will be a RAMDir/FSDir, but I think this dir can be generic.  Can you also implement listAll()?\n\nFinally: maybe for the \"tee\" (IndexOutput \"writes through\" two Dirs, suggested above) functionality, we should create a different Directory impl? ",
            "author": "Michael McCandless",
            "id": "comment-12704049"
        },
        {
            "date": "2009-04-30T01:53:04+0000",
            "content": "\n\tCopyright added\n\n\n\n\n\tCHANGES.txt added\n\n\n\n\n\tCleaned up\n\n\n\n\n\tRAMDir specific stuff removed from FSD\n\n\n\nmaybe for the \"tee\" (IndexOutput \"writes through\" two\nDirs, suggested above) functionality, we should create a\ndifferent Directory impl?\n\nI think a different directory impl makes sense, the\nfunctionality of FileSwitchDirectory is fairly specific. ",
            "author": "Jason Rutherglen",
            "id": "comment-12704439"
        },
        {
            "date": "2009-05-01T12:32:50+0000",
            "content": "New patch attached w/ minor fixes: added more detail in CHANGES entry; renamed \"real\" and \"other\" dir to \"primary\" and \"secondary\" dir; tweaked javadocs.  I plan to commit later today.\n\nOnce this is in, Jason can you update LUCENE-1313 to use this class?  Thanks. ",
            "author": "Michael McCandless",
            "id": "comment-12704975"
        },
        {
            "date": "2009-05-01T22:12:50+0000",
            "content": "Thanks Jason! ",
            "author": "Michael McCandless",
            "id": "comment-12705150"
        },
        {
            "date": "2009-05-04T05:12:26+0000",
            "content": "Added getter methods to FSD for the underlying directories ",
            "author": "Jason Rutherglen",
            "id": "comment-12705483"
        },
        {
            "date": "2009-05-04T10:17:01+0000",
            "content": "OK thanks Jason, I just committed that (w/ small change to listAll to directly allocate the String[]). ",
            "author": "Michael McCandless",
            "id": "comment-12705548"
        },
        {
            "date": "2009-05-07T20:00:48+0000",
            "content": "Added fileExists checking in getDirectory before asking\nregarding the extension. This is useful when IndexFileDeleter\nuses FSD as a way to combine directories in LUCENE-1313. ",
            "author": "Jason Rutherglen",
            "id": "comment-12707070"
        },
        {
            "date": "2009-05-08T09:10:27+0000",
            "content": "Added fileExists checking in getDirectory\n\nJason, why is this needed?  Why is the mapping based on extension insufficient? ",
            "author": "Michael McCandless",
            "id": "comment-12707284"
        },
        {
            "date": "2009-05-08T16:24:32+0000",
            "content": "One example of the use case is when IndexFileDeleter needs to\naccess the directory's files as is without extension\ninterpretation. A .fdt file that was written directly to the\nprimary directory (not through FSD) would fit this case. When\nIFD tries to access the .fdt file (using the current code) FSD\nsays it's not there (because it thinks it's in the secondary\ndir). \n\nMaybe we need a different type of FSD for this case? ",
            "author": "Jason Rutherglen",
            "id": "comment-12707403"
        },
        {
            "date": "2009-05-08T17:35:35+0000",
            "content": "I think if one is directly writing a file to the primary directory (not through FSD) then one should/could also delete directly from that directory?  I don't think we should be putting the magic inside FSD. ",
            "author": "Michael McCandless",
            "id": "comment-12707438"
        },
        {
            "date": "2009-05-08T19:06:48+0000",
            "content": "Well, it was implemented this way to accommodate not passing two\ndirectories around (such as to IFD). So that methods such as\nDir.list would work properly. It seems that we want an\nalternative to FSD that only combines directories? ",
            "author": "Jason Rutherglen",
            "id": "comment-12707474"
        }
    ]
}