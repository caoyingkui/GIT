{
    "id": "SOLR-8251",
    "title": "MatchAllDocsQuery is much slower in solr5.3.1 compare to solr4.7",
    "details": {
        "components": [
            "search"
        ],
        "type": "Bug",
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "affect_versions": "5.3,                                            5.3.1",
        "status": "Closed",
        "resolution": "Fixed",
        "priority": "Major"
    },
    "description": "I am trying to upgrade our production solr instance from 4.7 to 5.3.1. Unfortunately when I do load testing I find the MatchAllDocsQuery is much slower in solr 5.3.1 compare to 4.7. (solr 5.3.1 is faster in load test with queries other than MatchAllDocsQuery). I asked solr-user and discussed with Yonik Seeley. He confirmed that he can see the problem too comparing solr 5.3.1 and 4.10.\n\nhere is the query I use:\n\nq={!cache=false}*:*&fq=+categoryIdsPath:1001&fl=id&start=0&rows=2&debug=true\n\n\nfor me the query is consistently about 60-70% slower on solr5 than solr4.\n\nYonik mentioned in his email \"For me, 5.3.1\nis about 5x slower than 4.10 for this particular query.\"",
    "attachments": {
        "Solr 4 vs Solr 5.png": "https://issues.apache.org/jira/secure/attachment/12784114/Solr%204%20vs%20Solr%205.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2015-11-07T20:26:44+0000",
            "author": "Jason Gerlowski",
            "content": "The mailing-list discussion referenced above can be found here: https://mail-archives.apache.org/mod_mbox/lucene-solr-user/201511.mbox/browser ",
            "id": "comment-14995395"
        },
        {
            "date": "2015-11-07T22:39:19+0000",
            "author": "Uwe Schindler",
            "content": "Hi, could it be that this is already fixed in Solr 5.4 (not yet released): LUCENE-6756 (with later simplifications: LUCENE-6761) ",
            "id": "comment-14995434"
        },
        {
            "date": "2015-11-07T23:00:12+0000",
            "author": "Uwe Schindler",
            "content": "There is one other thing that could negatively affect queries/filters:\nAround Lucene 4.0, when I refactored the filtering of queries (as Yonik said on the mailing list), I added a special case for FilteredQuery#rewrite(): If it found out that the Query==MatchAllDocsQuery, it rewrote the whole thing to a ConstantScoreQuery(). In Lucene 4.x, IndexSearcher#search(Query,Filter) was always rewritten to FilteredQuery internally, so applying this optimization was always done. For the examples you posted, I think MatchAllDocQuery was never used in 4.x, because you had a filter, so it was executed by ConstantScoreQuery.\n\nIn 5.x, FilteredQuery no longer has this optimization. Of course executing a MatchAllDocsQuery just to Filter the results is stupid. As Filters are now plain Queries in 5.x, why not execute all Filters in Solr as a plain query? MatchAllDocsQuery is only useful for pure negative queries. ",
            "id": "comment-14995441"
        },
        {
            "date": "2015-11-09T15:19:55+0000",
            "author": "Shawn Heisey",
            "content": "Does the queryResultCache successfully mitigate this performance regression while the query is in the cache?  This might explain some long cache warming times I am seeing in 5.2.1 which I do not recall ever seeing in any 4.x versions. ",
            "id": "comment-14996694"
        },
        {
            "date": "2015-11-09T22:33:43+0000",
            "author": "Hoss Man",
            "content": "The mailing-list discussion referenced above can be found here ...\n\nspecifically: https://mail-archives.apache.org/mod_mbox/lucene-solr-user/201511.mbox/%3CCAAJUMYrO32eXRiUvULJxRdNe0p9xmXyH5RawVAcDNZHh%2BffoZw%40mail.gmail.com%3E\n\nOf course executing a MatchAllDocsQuery just to Filter the results is stupid. As Filters are now plain Queries in 5.x, why not execute all Filters in Solr as a plain query? MatchAllDocsQuery is only useful for pure negative queries.\n\nThis isn't as weird as it may seem when discussed abstractly ... practically speaking it can be common for people to build up a faceting/navigation system based on adding fqs to a \"base query\" as the user drills down.  If the user starts their navigation with a search then they have a non-trivial \"q\" for their base query \u2013 but if the user didn't start with some explicit search, they may just be drilling down from a starting view of \"all documents\"\n\nsomething like dismax/edismax with a q.alt=: is even designed around this usage pattern.\n\n\n\nPerhaps the \"if (null==filter) { wrap main + filter in a BooleanQuery }\" logic yonik mentioned LUCENE-6583 putting in SolrIndexSearcher should be tweaked to include a similar optimization to what use to be in FilteredQuery ? (ie: \"if (null==main) { don't wrap, just use main=filter }\")\nhttps://mail-archives.apache.org/mod_mbox/lucene-solr-user/201511.mbox/%3CCAB_8Yd8ForGSSXRC=hq+i6mKxHy5xY1KeHvh1iML4PDx_eYo2g@mail.gmail.com%3E ",
            "id": "comment-14997531"
        },
        {
            "date": "2015-11-09T22:40:48+0000",
            "author": "Uwe Schindler",
            "content": "This isn't as weird as it may seem when discussed abstractly ... practically speaking it can be common for people to build up a faceting/navigation system based on adding fqs to a \"base query\" as the user drills down. If the user starts their navigation with a search then they have a non-trivial \"q\" for their base query \u2013 but if the user didn't start with some explicit search, they may just be drilling down from a starting view of \"all documents\"\n\nHey Hoss, this was not meant as \"stupid\" - more its st\u00fcpid for Lucene to execute like that. This is exactly th reason why I made it like that in 4.0 when I rewrote FilteredQuery... So basically the common case was very common. ",
            "id": "comment-14997547"
        },
        {
            "date": "2015-11-09T22:45:36+0000",
            "author": "Hoss Man",
            "content": "This is exactly th reason why I made it like that in 4.0 when I rewrote FilteredQuery... So basically the common case was very common.\n\nYeah ... even if it turns out there is some other underlying cause for the regression noted here, I wonder if it would make sense to optimize BooleanQuery.rewrite (or maybe BooleanQuery.Builder?) to special case removing MatchAllDocs when there are other MUST/SHOULD/FILTER clauses? ",
            "id": "comment-14997559"
        },
        {
            "date": "2015-11-09T22:45:51+0000",
            "author": "Uwe Schindler",
            "content": "Maybe we should open a regression in Lucene core: Although FilteredQuery is deprecated, I still think the rewrite of FilteredQuery(MatchAllDocs,Filter) -> CSQ was perfectly fine. Not sure why Adrien Grand removed it in 5.x...\n\nEdit: I did not wat to specifically accuse Adrien  I just skimmed through the changes of FilteredQuery and found out that the \"optimization\" was removed.\n\nIn general there is a difference also in scoring: The matchAllDocsQuery produced a constant score of 1 (perfectly fine). Now if you remove the MatchAllDocsQuery from the BQ, you produce a similar strange thing: You get a query that has a score of 0.... I hit the same issue when I rewrote my queries in Elasticsearch and I just removed the MatchAllDocsQuery... Suddenly those queries consisting solely of filters got a score of 0 ",
            "id": "comment-14997560"
        },
        {
            "date": "2015-11-09T23:06:41+0000",
            "author": "Adrien Grand",
            "content": "Maybe we should open a regression in Lucene core: Although FilteredQuery is deprecated, I still think the rewrite of FilteredQuery(MatchAllDocs,Filter) -> CSQ was perfectly fine. Not sure why Adrien Grand removed it in 5.x...\n\nFilteredQuery was deprecated in favour of BooleanQuery so I wanted to make FilteredQuery rewrite to the equivalent BooleanQuery to make things as close as they will be in 6.0. The rewrite to a CSQ was fine indeed but instead of adding back this optimization to FilteredQuery, I like Hoss' idea to add it to BooleanQuery better as it would solve two issues at once given that FilteredQuery already rewrites to a BooleanQuery? ",
            "id": "comment-14997600"
        },
        {
            "date": "2015-11-09T23:11:50+0000",
            "author": "Uwe Schindler",
            "content": "Of course, I like the idea more, too  I just hit the trap of scores getting 0. Of yource this is just cosmetics, but it confused me! ",
            "id": "comment-14997618"
        },
        {
            "date": "2015-11-09T23:17:08+0000",
            "author": "Adrien Grand",
            "content": "I just saw the edit: don't worry Uwe, I didn't feel accused. On the contrary I'm happy to be pinged about follow-ups of these things I've been working on and to discuss them.\n\nRegarding the produced scores, the reason it works this way is that it made more sense to me to return 0 as a score when there are no scoring clauses (hence no sources of scores). ",
            "id": "comment-14997625"
        },
        {
            "date": "2015-11-09T23:29:17+0000",
            "author": "Uwe Schindler",
            "content": "Regarding the produced scores, the reason it works this way is that it made more sense to me to return 0 as a score when there are no scoring clauses (hence no sources of scores).\n\nIt was just meant as warning... I know why you need to return 0 as score for filters - otherwise BQ would sum them up and fck up other scores... In my case the problem was a geo query with some distance-related scoring applied afterwards! ",
            "id": "comment-14997643"
        },
        {
            "date": "2015-11-09T23:43:28+0000",
            "author": "Hoss Man",
            "content": "Regarding the produced scores, the reason it works this way is that it made more sense to me to return 0 as a score when there are no scoring clauses (hence no sources of scores).\n\nCouldn't this also be handled by the BooleanQuery.rewrite optimization we're talking about?\n\nOff the top of my head: if the only \"scoring\" clause is a MatchAllDocs, but there are other non-MUST_NOT clauses so it can safely be removed, remove it and return a ConstantScoreQuery wrapping the new (smaller) BQ? ",
            "id": "comment-14997673"
        },
        {
            "date": "2015-11-09T23:45:05+0000",
            "author": "Uwe Schindler",
            "content": "In any case: I still think, Lucene's FilteredQuery should rewrite like it did before. Maybe this would solve some problems like this (although it should still work fast). ",
            "id": "comment-14997676"
        },
        {
            "date": "2015-11-10T00:31:23+0000",
            "author": "Adrien Grand",
            "content": "Couldn't this also be handled by the BooleanQuery.rewrite optimization we're talking about?\n\nIndeed it could. I opened LUCENE-6889 as a follow-up.\n\nIn any case: I still think, Lucene's FilteredQuery should rewrite like it did before. Maybe this would solve some problems like this (although it should still work fast).\n\nWorks for me. ",
            "id": "comment-14997735"
        },
        {
            "date": "2015-12-03T15:53:45+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nAdrien Grand committed LUCENE-6889 (Lucene / Solr 5.5), maybe we should check here if the problems disappeared. Could you try to reproduce?\nUwe ",
            "id": "comment-15037968"
        },
        {
            "date": "2015-12-03T15:58:01+0000",
            "author": "Adrien Grand",
            "content": "Thanks Uwe, I was just going to write a similar comment. ",
            "id": "comment-15037982"
        },
        {
            "date": "2015-12-09T19:41:47+0000",
            "author": "wei shen",
            "content": "thanks. I tried and seem the problem still exist. The compiled trunk version is constantly 50% slower than solr 4.7 (about 94-100ms vs 60-65 ms)\n\nfrom email thread talking about this on Nov/6, when I try solr 5.3.1, the difference is larger: \"I tried that, on solr5 the query time is around 100-110ms, and on solr4 it is around 60-63ms(very consistent). Solr5 is slower.\"\n\nso I can see it getting faster compare to solr 5.3.1, but still much slower than solr 4.7. I verified my checkout from branch_5x, the file lucene/CHANGE.txt contains line LUCENE-6889. ",
            "id": "comment-15049262"
        },
        {
            "date": "2015-12-10T15:50:12+0000",
            "author": "Uwe Schindler",
            "content": "Many thanks for the feedback. This change of LUCENE-6889 will be in Solr 5.4 coming out tomorrow, so please test again with that version. We are still looking for improvements. ",
            "id": "comment-15051135"
        },
        {
            "date": "2015-12-30T19:06:00+0000",
            "author": "Varun Thacker",
            "content": "Hi Uwe,\n\nThis issue should be marked as solved for 5.5 right?  ",
            "id": "comment-15075319"
        },
        {
            "date": "2015-12-30T20:04:58+0000",
            "author": "Uwe Schindler",
            "content": "Should be solved for 5.4 already! But we are not sure if there is still a slowdown. Somebody with the tools to benchmark Solr should do this. ",
            "id": "comment-15075368"
        },
        {
            "date": "2016-01-20T10:41:41+0000",
            "author": "Stephan Lagraulet",
            "content": "Hi Uwe Schindler,\nAs LUCENE-6889 is only solved on version 5.5 I don't understand why SOLR-8251 should be solved in solr 5.4.\nWe are currently performing benchmark between Solr 4.10.4 and Solr 5.4.0 I will let you know if we run into performance issues.\nStephan ",
            "id": "comment-15108357"
        },
        {
            "date": "2016-01-20T11:47:15+0000",
            "author": "Uwe Schindler",
            "content": "Hi,\nI was under the strong opinion, that this was committed for 5.4, too. Which it wasn't! So you are right, will be in 5.5 or 6.0\nUwe ",
            "id": "comment-15108417"
        },
        {
            "date": "2016-01-25T09:10:23+0000",
            "author": "Stephan Lagraulet",
            "content": "We performed a benchmark comparing Solr 4.10.4 with solr 5.4.0 using the same set of queries. Solr 4 outperforms Solr 5 all the time and when under heavy load Solr 5 becomes unstable...\nSee https://issues.apache.org/jira/secure/attachment/12784114/Solr%204%20vs%20Solr%205.png ",
            "id": "comment-15114921"
        },
        {
            "date": "2016-01-25T09:27:15+0000",
            "author": "Uwe Schindler",
            "content": "Hi can you please try and compare the 5.5 snapshot? You can download them here: https://builds.apache.org/job/Solr-Artifacts-5.x/lastSuccessfulBuild/artifact/solr/package/\n\nCould you please also share the queries? This issue is just about MatchAllDocsQuery (\"*:*\").\n\nThe bug is not fixed in 5.4, this commit did not make it into 5.4, sorry. ",
            "id": "comment-15114944"
        },
        {
            "date": "2016-01-25T09:37:47+0000",
            "author": "Stephan Lagraulet",
            "content": "I know this issue is about MatchAllDocsQuery but we see a general performance degradation using Solr 5 and no gain on stability.\nWe have around 160Mb of queries so I guess it's too big to include in this Jira... ",
            "id": "comment-15114957"
        },
        {
            "date": "2016-01-25T14:29:10+0000",
            "author": "Stephan Lagraulet",
            "content": "When Solr5 is under heavy load yourkit reports some deadlocks, not sure if it is real deadlocks or if it is the monitoring overhead:\nFrozen threads found (potential deadlock)\n\nIt seems that the following threads have not changed their stack for more than 10 seconds.\nThese threads are possibly (but not necessarily!) in a deadlock or hung.\n \nqtp1983747920-155 <--- Frozen for at least 2m 18 sec\norg.apache.lucene.uninverting.FieldCacheImpl$Cache.get(LeafReader, FieldCacheImpl$CacheKey, boolean) FieldCacheImpl.java:187\norg.apache.lucene.uninverting.FieldCacheImpl.getDocTermOrds(LeafReader, String, BytesRef) FieldCacheImpl.java:933\norg.apache.lucene.uninverting.UninvertingReader.getSortedSetDocValues(String) UninvertingReader.java:275\norg.apache.lucene.index.FilterLeafReader.getSortedSetDocValues(String) FilterLeafReader.java:454\norg.apache.lucene.index.DocValues.getSortedSet(LeafReader, String) DocValues.java:302\norg.apache.lucene.search.SortedSetSortField$1.getSortedDocValues(LeafReaderContext, String) SortedSetSortField.java:125\norg.apache.lucene.search.FieldComparator$TermOrdValComparator.getLeafComparator(LeafReaderContext) FieldComparator.java:767\norg.apache.lucene.search.FieldValueHitQueue.getComparators(LeafReaderContext) FieldValueHitQueue.java:183\norg.apache.lucene.search.TopFieldCollector$SimpleFieldCollector.getLeafCollector(LeafReaderContext) TopFieldCollector.java:164\norg.apache.lucene.search.MultiCollector.getLeafCollector(LeafReaderContext) MultiCollector.java:121\norg.apache.lucene.search.IndexSearcher.search(List, Weight, Collector) IndexSearcher.java:812\norg.apache.lucene.search.IndexSearcher.search(Query, Collector) IndexSearcher.java:535\norg.apache.solr.search.SolrIndexSearcher.buildAndRunCollectorChain(SolrIndexSearcher$QueryResult, Query, Collector, SolrIndexSearcher$QueryCommand, DelegatingCollector) SolrIndexSearcher.java:202\norg.apache.solr.search.SolrIndexSearcher.getDocListAndSetNC(SolrIndexSearcher$QueryResult, SolrIndexSearcher$QueryCommand) SolrIndexSearcher.java:1768\norg.apache.solr.search.SolrIndexSearcher.getDocListC(SolrIndexSearcher$QueryResult, SolrIndexSearcher$QueryCommand) SolrIndexSearcher.java:1487\norg.apache.solr.search.SolrIndexSearcher.search(SolrIndexSearcher$QueryResult, SolrIndexSearcher$QueryCommand) SolrIndexSearcher.java:557\norg.apache.solr.handler.component.QueryComponent.process(ResponseBuilder) QueryComponent.java:525\norg.apache.solr.handler.component.SearchHandler.handleRequestBody(SolrQueryRequest, SolrQueryResponse) SearchHandler.java:273\norg.apache.solr.handler.RequestHandlerBase.handleRequest(SolrQueryRequest, SolrQueryResponse) RequestHandlerBase.java:156\norg.apache.solr.core.SolrCore.execute(SolrRequestHandler, SolrQueryRequest, SolrQueryResponse) SolrCore.java:2073\norg.apache.solr.servlet.HttpSolrCall.execute(SolrQueryResponse) HttpSolrCall.java:658\norg.apache.solr.servlet.HttpSolrCall.call() HttpSolrCall.java:457\norg.apache.solr.servlet.SolrDispatchFilter.doFilter(ServletRequest, ServletResponse, FilterChain, boolean) SolrDispatchFilter.java:222\norg.apache.solr.servlet.SolrDispatchFilter.doFilter(ServletRequest, ServletResponse, FilterChain) SolrDispatchFilter.java:181\norg.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletRequest, ServletResponse) ServletHandler.java:1652\norg.eclipse.jetty.servlet.ServletHandler.doHandle(String, Request, HttpServletRequest, HttpServletResponse) ServletHandler.java:585\norg.eclipse.jetty.server.handler.ScopedHandler.handle(String, Request, HttpServletRequest, HttpServletResponse) ScopedHandler.java:143\norg.eclipse.jetty.security.SecurityHandler.handle(String, Request, HttpServletRequest, HttpServletResponse) SecurityHandler.java:577\norg.eclipse.jetty.server.session.SessionHandler.doHandle(String, Request, HttpServletRequest, HttpServletResponse) SessionHandler.java:223\norg.eclipse.jetty.server.handler.ContextHandler.doHandle(String, Request, HttpServletRequest, HttpServletResponse) ContextHandler.java:1127\norg.eclipse.jetty.servlet.ServletHandler.doScope(String, Request, HttpServletRequest, HttpServletResponse) ServletHandler.java:515\norg.eclipse.jetty.server.session.SessionHandler.doScope(String, Request, HttpServletRequest, HttpServletResponse) SessionHandler.java:185\norg.eclipse.jetty.server.handler.ContextHandler.doScope(String, Request, HttpServletRequest, HttpServletResponse) ContextHandler.java:1061\norg.eclipse.jetty.server.handler.ScopedHandler.handle(String, Request, HttpServletRequest, HttpServletResponse) ScopedHandler.java:141\norg.eclipse.jetty.server.handler.ContextHandlerCollection.handle(String, Request, HttpServletRequest, HttpServletResponse) ContextHandlerCollection.java:215\norg.eclipse.jetty.server.handler.HandlerCollection.handle(String, Request, HttpServletRequest, HttpServletResponse) HandlerCollection.java:110\norg.eclipse.jetty.server.handler.HandlerWrapper.handle(String, Request, HttpServletRequest, HttpServletResponse) HandlerWrapper.java:97\norg.eclipse.jetty.server.Server.handle(HttpChannel) Server.java:499\norg.eclipse.jetty.server.HttpChannel.handle() HttpChannel.java:310\norg.eclipse.jetty.server.HttpConnection.onFillable() HttpConnection.java:257\norg.eclipse.jetty.io.AbstractConnection$2.run() AbstractConnection.java:540\norg.eclipse.jetty.util.thread.QueuedThreadPool.runJob(Runnable) QueuedThreadPool.java:635\norg.eclipse.jetty.util.thread.QueuedThreadPool$3.run() QueuedThreadPool.java:555\njava.lang.Thread.run() Thread.java:745\n\n\n\n ",
            "id": "comment-15115281"
        },
        {
            "date": "2016-01-25T14:30:21+0000",
            "author": "Stephan Lagraulet",
            "content": "I have other deadlocks when the cluster crashed:\n\nFrozen threads found (potential deadlock)\n \nIt seems that the following threads have not changed their stack for more than 10 seconds.\nThese threads are possibly (but not necessarily!) in a deadlock or hung.\n \nThread-722 <--- Frozen for at least 33 sec\norg.apache.solr.update.DefaultSolrCoreState.doRecovery(CoreContainer, CoreDescriptor) DefaultSolrCoreState.java:262\norg.apache.solr.handler.admin.CoreAdminHandler$1.run() CoreAdminHandler.java:822\n\n\n\nThread-723 <--- Frozen for at least 33 sec\norg.apache.solr.update.DefaultSolrCoreState.doRecovery(CoreContainer, CoreDescriptor) DefaultSolrCoreState.java:262\norg.apache.solr.handler.admin.CoreAdminHandler$1.run() CoreAdminHandler.java:822\n\n\n\n\nOK understood why these recoveries append; related to our huge documents which were causing this kind of errors:\n\n2016-01-26 10:04:01.252 WARN  (qtp1983747920-265) [   ] o.e.j.h.HttpParser badMessage: java.lang.IllegalStateException: too much data after closed for HttpChannelOverHttp@3fe6be7e{r=227,c=false,a=IDLE,uri=-}\n\n\nWe reduced batch size update and we don't see recoveries anymore ",
            "id": "comment-15115284"
        },
        {
            "date": "2016-01-27T09:15:15+0000",
            "author": "Uwe Schindler",
            "content": "Hi Stephan Lagraulet,\ncould you please open a separate issue or discuss the problems with recovery and deadlocks on the solr-user mailing list? This issue is solely about MatchAllDocsQuery (*:*, so please only post replies related to this issue. Thanks. ",
            "id": "comment-15118913"
        },
        {
            "date": "2016-01-27T11:23:28+0000",
            "author": "Stephan Lagraulet",
            "content": "OK, sorry for the \"hijack\" implied by the last comment.\nIn addition to our recovering issue, we still have a performance problem with Solr 5.4.0 (vs 4.10.4). I will try to setup a snapshot version of 5.5 to check this specific issue. ",
            "id": "comment-15119072"
        },
        {
            "date": "2016-02-08T17:41:12+0000",
            "author": "Yonik Seeley",
            "content": "I just tried some tests on both trunk and 5x, and things seem fixed! ",
            "id": "comment-15137314"
        },
        {
            "date": "2016-03-08T21:26:24+0000",
            "author": "wei shen",
            "content": "I installed 5.5. I found that pure blank query it is much faster, however combined with filter query it is slower. It might be a different issue.\n\nfor query: q=\n{!cache=false}:&fl=id&start=0&rows=2\nsolr 5.5(50ms) is much faster than solr4.7(400ms)\n\nhowever, after add a fq clause\nq={!cache=false}\n:&fq=+categoryIdsPath:1001&fl=id&start=0&rows=2\nsolr5.5 (130ms) is still slower than solr4.7 (70ms)\n\nwhat's more, with the query with filter is slower compare to query without filter in 5.5.\n\none more experiment is that i disable the filtercache by adding \"\n{!cache=false}\" \nrows=2&fl=id&q={!cache=false}\n:&fq=\n{!cache=false}\ncategoryIdsPath:1001\nsolr5.5 (20-25ms) slightly faster than solr4.7(around 25-30ms), both are much faster comparing to using filter cache.\n\nAny reason about that?\nShall I open a separate ticket on it? ",
            "id": "comment-15185839"
        },
        {
            "date": "2016-03-08T21:35:51+0000",
            "author": "wei shen",
            "content": "seems the * in q=(:) is filtered out and I can't modify or delete my comments ",
            "id": "comment-15185870"
        },
        {
            "date": "2016-03-08T21:36:14+0000",
            "author": "wei shen",
            "content": "seems the * in q=( * : * ) is filtered out and I can't modify or delete my comments ",
            "id": "comment-15185872"
        }
    ]
}