{
    "id": "LUCENE-7508",
    "title": "[smartcn] tokens are not correctly created if text length > 1024",
    "details": {
        "resolution": "Unresolved",
        "affect_versions": "6.2.1",
        "components": [
            "modules/analysis"
        ],
        "labels": "",
        "fix_versions": [],
        "priority": "Major",
        "status": "Open",
        "type": "Bug"
    },
    "description": "If text length is > 1024, HMMChineseTokenizer failed to split sentences correctly.\n\nTest Sample:\npublic static void main(String[] args) throws IOException{\n    Analyzer analyzer = new SmartChineseAnalyzer(); /* will load stopwords */\n    //String sentence = \"\u201c\u4e03\u516b\u4e2a\u7269\u7ba1\u5de5\u4f5c\u4eba\u5458\u5bf9\u6211\u4e00\u4e2a\u6587\u5f31\u4e66\u751f\u62f3\u6253\u811a\u8e22\uff0c\u6211\u6781\u529b\u8eb2\u907f\u65f6\u8fd8\u88ab\u8ffd\u6253\u3002\u201d\u524d\u5929\uff0c\u5fae\u4fe1\u7f51\u53cb\u7206\u6599\u79f0\uff0c\u4e00\u540d50\u591a\u5c81\u7684\u6c5f\u897f\u6559\u5e08\u5728\u6606\u660e\u88ab\u7269\u7ba1\u7fa4\u6bb4\uff0c\u624b\u6307\u9aa8\u6298\uff0c\u5411\u7f51\u53cb\u6c42\u52a9\u3002\u6559\u5e08\u4e3a\u4f55\u4f1a\u88ab\u7269\u7ba1\u6bb4\u6253\uff1f\u4e8b\u60c5\u7684\u771f\u76f8\u53c8\u662f\u5982\u4f55\uff1f\u6628\u5929\uff0c\u8bb0\u8005\u6765\u5230\u5723\u4e16\u4e00\u54c1\u5c0f\u533a\uff0c\u901a\u8fc7\u8c03\u67e5\u4e86\u89e3\uff0c\u4e8b\u60c5\u7684\u8d77\u56e0\u6e90\u4e8e\u8fd9\u540d\u6559\u5e08\u5728\u5c0f\u533a\u91cc\u5e2e\u5973\u513f\u6563\u53d1\u6c57\u84b8\u9986\u5e7f\u544a\u5355\uff0c\u88ab\u7269\u7ba1\u4fdd\u5b89\u53d1\u73b0\u540e\uff0c\u5f15\u53d1\u51b2\u7a81\u3002\u5bf9\u4e8e\u7fa4\u6bb4\u6559\u5e08\u7684\u8bf4\u6cd5\uff0c\u8be5\u5c0f\u533a\u7269\u7ba1\u4fdd\u5b89\u961f\u957f\u79f0\uff1a\u201c\u4fdd\u5b89\u5728\u8ffd\u7684\u8fc7\u7a0b\u4e2d\uff0c\u786e\u5b9e\u6709\u62c9\u626f\uff0c\u4f46\u5e76\u6ca1\u6709\u6bb4\u6253\u6559\u5e08\uff0c\u81f3\u4e8e\u624b\u6307\u9aa8\u6298\u662f\u4ed6\u81ea\u5df1\u6454\u4f24\u7684\u3002\u201d\u7206\u6599\u6c5f\u897f\u6559\u5e08\u5728\u6606\u660e\u88ab\u7269\u7ba1\u6bb4\u6253\u8bb0\u8005\u6ce8\u610f\u5230\uff0c\u6d88\u606f\u4e8e8\u670827\u65e5\u53d1\u51fa\uff0c\u7206\u6599\u8005\u79f0\uff0c\u81ea\u5df1\u662f\u6c5f\u897f\u5b9c\u4e30\u5d07\u6587\u4e2d\u5b66\u7684\u4e00\u540d\u4e2d\u5e74\u6559\u5e08\u9ec4\u654f\u3002\u6691\u5047\u671f\u95f4\u6765\u6606\u660e\u7684\u5973\u513f\u5bb6\u5ea6\u5047\u3002\u4ed6\u5973\u513f\u5728\u6606\u660e\u4e0e\u4eba\u5408\u4f19\u5f00\u4e86\u4e00\u5bb6\u6c57\u84b8\u9986\uff0c7\u670830\u65e5\u5f00\u4e1a\u30028\u67089\u65e5\u4e0b\u53486\u70b930\u5206\u8bb8\uff0c\u4ed6\u5230\u6606\u660e\u4e1c\u4e8c\u73af\u5723\u4e16\u4e00\u54c1\u5c0f\u533a\u4e3a\u5973\u513f\u7684\u6c57\u84b8\u9986\u6563\u53d1\u5ba3\u4f20\u5c0f\u5e7f\u544a\u3002\u5c0f\u533a\u7269\u7ba1\u524d\u6765\u5236\u6b62\uff0c\u4ed6\u5c31\u505c\u6b62\u53d1\u653e\u884c\u4e3a\u3002\u9ec4\u654f\u79f0\uff0c\u5c0f\u533a\u7269\u7ba1\u4fdd\u5b89\u4eba\u5458\u8981\u6c42\u4ed6\u6536\u56de\u6563\u53d1\u51fa\u53bb\u7684\u5e7f\u544a\u5355\uff0c\u4ed6\u5c31\u53bb\u6536\u4e86\u3002\u7269\u7ba1\u8981\u6c42\u4ed6\u5230\u529e\u516c\u5ba4\u91cc\u53bb\u63a5\u53d7\u5904\u7406\uff0c\u4ed6\u4e5f\u914d\u5408\u4e86\u3002\u8ba9\u4ed6\u6ca1\u6709\u60f3\u5230\u7684\u662f\uff0c\u5728\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e03\u516b\u4e2a\u5e74\u8f7b\u7684\u7269\u7ba1\u4eba\u5458\u7a81\u7136\u5bf9\u4ed6\u62f3\u6253\u811a\u8e22\uff0c\u4ed6\u6781\u529b\u8eb2\u907f\u65f6\u8fd8\u88ab\u8ffd\u7740\u6253\uff0c\u800c\u4e14\u8fd9\u4e00\u5207\uff0c\u662f\u5728\u5c0f\u533a\u7269\u7ba1\u9886\u5bfc\u7684\u6ce8\u89c6\u4e0b\u53d1\u751f\u7684\u3002\u9ec4\u654f\u8bf4\uff0c\u88ab\u6253\u540e\uff0c\u4ed6\u7acb\u5373\u62a5\u4e86\u8b66\u3002\u9664\u8eab\u4e0a\u591a\u5904\u8f6f\u7ec4\u7ec7\u632b\u4f24\u5916\uff0c\u4f24\u5f97\u6700\u4e25\u91cd\u7684\u662f\u53f3\u624b\u5927\u62c7\u6307\u7c89\u788e\u6027\u9aa8\u6298\uff0c\u4e00\u638c\u9aa8\u9aa8\u6298\u3002\u4ed6\u5230\u4e91\u5357\u7701\u7b2c\u4e09\u4eba\u6c11\u533b\u9662\u4f4f\u4e867\u5929\u9662\uff0c\u533b\u751f\u8bf4\u65e0\u6cd5\u624b\u672f\uff0c\u53ea\u80fd\u7528\u5939\u677f\u56fa\u5b9a\uff0c\u4e5f\u4e0d\u5403\u836f\uff0c\u5f85\u5176\u81ea\u7136\u4fee\u590d\uff0c\u81f3\u5c11\u89813\u4e2a\u6708\u4ee5\u4e0a\uff0c\u53f3\u624b\u5927\u62c7\u6307\u8fd8\u6709\u53ef\u80fd\u4f24\u6b8b\u3002\u4e3a\u8bc1\u660e\u81ea\u5df1\u7684\u8bf4\u6cd5\uff0c\u9ec4\u654f\u8fd8\u62ff\u51fa\u4e86\u5b98\u6e21\u533a\u516c\u5b89\u5206\u5c40\u83ca\u82b1\u6d3e\u51fa\u6240\u51fa\u5177\u7684\u4f24\u60c5\u9274\u5b9a\u59d4\u6258\u4e66\u3002\u4ed6\u7684\u4f24\u60c5\u88ab\u9274\u5b9a\u4e3a\u8f7b\u4f24\u4e8c\u7ea7\u3002\u8bf4\u6cd5\u5e2e\u5973\u513f\u53d1\u5ba3\u4f20\u5c0f\u5e7f\u544a\u6559\u5e08\u5728\u5c0f\u533a\u91cc\u88ab\u6bb4\u6253\u6628\u65e5\uff0c\u8bb0\u8005\u8005\u62e8\u901a\u4e86\u9ec4\u654f\u7684\u7535\u8bdd\u3002\u4ed6\u8bf4\uff0c\u5f53\u65f6\u4ed6\u770b\u89c1\u8be5\u5c0f\u533a\u7684\u5927\u95e8\u6ca1\u6709\u5173\uff0c\u4e5f\u6ca1\u6709\u4fdd\u5b89\u503c\u73ed\u3002\u4e8e\u662f\uff0c\u4ed6\u5c31\u8fdb\u5230\u4e86\u5c0f\u533a\u91cc\u5e2e\u5973\u513f\u7684\u6c57\u84b8\u9986\u53d1\u5e7f\u544a\u5355\u3002\u5728\u697c\u680b\u503c\u73ed\u7684\u4fdd\u5b89\u6ca1\u6709\u963b\u6b62\u7684\u524d\u63d0\u4e0b\uff0c\u4ed6\u4e58\u7535\u68af\u6765\u5230\u4e86\u697c\u4e0a\uff0c\u4e3a\u4e86\u4e0d\u5f71\u54cd\u4f4f\u6237\uff0c\u4ed6\u5c06\u540d\u7247\u653e\u5728\u4e86\u623f\u95e8\u7684\u628a\u624b\u4e0a\u3002\u88ab\u4fdd\u5b89\u53d1\u73b0\u65f6\uff0c\u4ed6\u624d\u53d1\u4e86\u56db\u4e94\u5341\u5f20\u3002\u4fdd\u5b89\u95ee\u4ed6\u5e72\u4ec0\u4e48\uff1f\u4ed6\u56de\u7b54\uff0c\u5bb6\u91cc\u5f00\u4e86\u6c57\u84b8\u9986\uff0c\u6765\u5ba3\u4f20\u4e00\u4e0b\u3002\u4e24\u540d\u4fdd\u5b89\u53eb\u4ed6\u4e0d\u8981\u53d1\u4e86\uff0c\u5e76\u8981\u6c42\u4ed6\u5230\u7269\u7ba1\u529e\u516c\u5ba4\u7b49\u5f85\u9886\u5bfc\u5904\u7406\u3002\u4ea4\u8c08\u4e2d\uff0c\u7531\u4e8e\u5bf9\u65b9\u4e00\u76f4\u5728\u8bf4\u65b9\u8a00\uff0c\u9ec4\u654f\u53ea\u80fd\u542c\u6e05\u695a\u7684\u4e00\u53e5\u8bdd\u662f\uff0c\u7269\u7ba1\u53eb\u4ed6\u53bb\u6536\u56de\u5c0f\u5e7f\u544a\u3002\u4ed6\u5f53\u5373\u540c\u610f\u4e86\uff0c\u51c6\u5907\u53bb\u6536\u3002\u8fd9\u65f6\uff0c\u5c0f\u533a\u7684\u4e03\u516b\u540d\u5de5\u4f5c\u4eba\u5458\u5c31\u6bb4\u6253\u4e86\u4ed6\uff0c\u5176\u4e2d\u6709\u7a7f\u4fdd\u5b89\u670d\u88c5\u7684\uff0c\u4e5f\u6709\u8eab\u7740\u4fbf\u8863\u7684\u3002\u8ba9\u4ed6\u6c14\u6124\u7684\u662f\uff0c\u4ed6\u8bd5\u56fe\u9003\u8dd1\u8eb2\u8d77\u6765\uff0c\u4f9d\u7136\u88ab\u8ffd\u7740\u6bb4\u6253\u3002\u9ec4\u654f\u8bf4\uff0c\u5973\u513f\u5c06\u4ed6\u88ab\u6253\u53c8\u7ef4\u6743\u65e0\u95e8\u7684\u906d\u9047\u53d1\u5230\u4e86\u5fae\u4fe1\u4e0a\uff0c\u5e0c\u671b\u627e\u5230\u76f8\u5173\u89c6\u9891\u548c\u7167\u7247\uff0c\u8fd8\u539f\u4e8b\u4ef6\u771f\u76f8\u3002\u3002\";\n    String sentence = \"\u201c\u4e03\u516b\u4e2a\u7269\u7ba1\u5de5\u4f5c\u4eba\u5458\u5bf9\u6211\u4e00\u4e2a\u6587\u5f31\u4e66\u751f\u62f3\u6253\u811a\u8e22\uff0c\u6211\u6781\u529b\u8eb2\u907f\u65f6\u8fd8\u88ab\u8ffd\u6253\u3002\u201d\u524d\u5929\uff0c\u5fae\u4fe1\u7f51\u53cb\u7206\u6599\u79f0\uff0c\u4e00\u540d50\u591a\u5c81\u7684\u6c5f\u897f\u6559\u5e08\u5728\u6606\u660e\u88ab\u7269\u7ba1\u7fa4\u6bb4\uff0c\u624b\u6307\u9aa8\u6298\uff0c\u5411\u7f51\u53cb\u6c42\u52a9\u3002\u6559\u5e08\u4e3a\u4f55\u4f1a\u88ab\u7269\u7ba1\u6bb4\u6253\uff1f\u4e8b\u60c5\u7684\u771f\u76f8\u53c8\u662f\u5982\u4f55\uff1f\u6628\u5929\uff0c\u8bb0\u8005\u6765\u5230\u5723\u4e16\u4e00\u54c1\u5c0f\u533a\uff0c\u901a\u8fc7\u8c03\u67e5\u4e86\u89e3\uff0c\u4e8b\u60c5\u7684\u8d77\u56e0\u6e90\u4e8e\u8fd9\u540d\u6559\u5e08\u5728\u5c0f\u533a\u91cc\u5e2e\u5973\u513f\u6563\u53d1\u6c57\u84b8\u9986\u5e7f\u544a\u5355\uff0c\u88ab\u7269\u7ba1\u4fdd\u5b89\u53d1\u73b0\u540e\uff0c\u5f15\u53d1\u51b2\u7a81\u3002\u5bf9\u4e8e\u7fa4\u6bb4\u6559\u5e08\u7684\u8bf4\u6cd5\uff0c\u8be5\u5c0f\u533a\u7269\u7ba1\u4fdd\u5b89\u961f\u957f\u79f0\uff1a\u201c\u4fdd\u5b89\u5728\u8ffd\u7684\u8fc7\u7a0b\u4e2d\uff0c\u786e\u5b9e\u6709\u62c9\u626f\uff0c\u4f46\u5e76\u6ca1\u6709\u6bb4\u6253\u6559\u5e08\uff0c\u81f3\u4e8e\u624b\u6307\u9aa8\u6298\u662f\u4ed6\u81ea\u5df1\u6454\u4f24\u7684\u3002\u201d\u7206\u6599\u6c5f\u897f\u6559\u5e08\u5728\u6606\u660e\u88ab\u7269\u7ba1\u6bb4\u6253\u8bb0\u8005\u6ce8\u610f\u5230\uff0c\u6d88\u606f\u4e8e8\u670827\u65e5\u53d1\u51fa\uff0c\u7206\u6599\u8005\u79f0\uff0c\u81ea\u5df1\u662f\u6c5f\u897f\u5b9c\u4e30\u5d07\u6587\u4e2d\u5b66\u7684\u4e00\u540d\u4e2d\u5e74\u6559\u5e08\u9ec4\u654f\u3002\u6691\u5047\u671f\u95f4\u6765\u6606\u660e\u7684\u5973\u513f\u5bb6\u5ea6\u5047\u3002\u4ed6\u5973\u513f\u5728\u6606\u660e\u4e0e\u4eba\u5408\u4f19\u5f00\u4e86\u4e00\u5bb6\u6c57\u84b8\u9986\uff0c7\u670830\u65e5\u5f00\u4e1a\u30028\u67089\u65e5\u4e0b\u53486\u70b930\u5206\u8bb8\uff0c\u4ed6\u5230\u6606\u660e\u4e1c\u4e8c\u73af\u5723\u4e16\u4e00\u54c1\u5c0f\u533a\u4e3a\u5973\u513f\u7684\u6c57\u84b8\u9986\u6563\u53d1\u5ba3\u4f20\u5c0f\u5e7f\u544a\u3002\u5c0f\u533a\u7269\u7ba1\u524d\u6765\u5236\u6b62\uff0c\u4ed6\u5c31\u505c\u6b62\u53d1\u653e\u884c\u4e3a\u3002\u9ec4\u654f\u79f0\uff0c\u5c0f\u533a\u7269\u7ba1\u4fdd\u5b89\u4eba\u5458\u8981\u6c42\u4ed6\u6536\u56de\u6563\u53d1\u51fa\u53bb\u7684\u5e7f\u544a\u5355\uff0c\u4ed6\u5c31\u53bb\u6536\u4e86\u3002\u7269\u7ba1\u8981\u6c42\u4ed6\u5230\u529e\u516c\u5ba4\u91cc\u53bb\u63a5\u53d7\u5904\u7406\uff0c\u4ed6\u4e5f\u914d\u5408\u4e86\u3002\u8ba9\u4ed6\u6ca1\u6709\u60f3\u5230\u7684\u662f\uff0c\u5728\u5904\u7406\u7684\u8fc7\u7a0b\u4e2d\uff0c\u4e03\u516b\u4e2a\u5e74\u8f7b\u7684\u7269\u7ba1\u4eba\u5458\u7a81\u7136\u5bf9\u4ed6\u62f3\u6253\u811a\u8e22\uff0c\u4ed6\u6781\u529b\u8eb2\u907f\u65f6\u8fd8\u88ab\u8ffd\u7740\u6253\uff0c\u800c\u4e14\u8fd9\u4e00\u5207\uff0c\u662f\u5728\u5c0f\u533a\u7269\u7ba1\u9886\u5bfc\u7684\u6ce8\u89c6\u4e0b\u53d1\u751f\u7684\u3002\u9ec4\u654f\u8bf4\uff0c\u88ab\u6253\u540e\uff0c\u4ed6\u7acb\u5373\u62a5\u4e86\u8b66\u3002\u9664\u8eab\u4e0a\u591a\u5904\u8f6f\u7ec4\u7ec7\u632b\u4f24\u5916\uff0c\u4f24\u5f97\u6700\u4e25\u91cd\u7684\u662f\u53f3\u624b\u5927\u62c7\u6307\u7c89\u788e\u6027\u9aa8\u6298\uff0c\u4e00\u638c\u9aa8\u9aa8\u6298\u3002\u4ed6\u5230\u4e91\u5357\u7701\u7b2c\u4e09\u4eba\u6c11\u533b\u9662\u4f4f\u4e867\u5929\u9662\uff0c\u533b\u751f\u8bf4\u65e0\u6cd5\u624b\u672f\uff0c\u53ea\u80fd\u7528\u5939\u677f\u56fa\u5b9a\uff0c\u4e5f\u4e0d\u5403\u836f\uff0c\u5f85\u5176\u81ea\u7136\u4fee\u590d\uff0c\u81f3\u5c11\u89813\u4e2a\u6708\u4ee5\u4e0a\uff0c\u53f3\u624b\u5927\u62c7\u6307\u8fd8\u6709\u53ef\u80fd\u4f24\u6b8b\u3002\u4e3a\u8bc1\u660e\u81ea\u5df1\u7684\u8bf4\u6cd5\uff0c\u9ec4\u654f\u8fd8\u62ff\u51fa\u4e86\u5b98\u6e21\u533a\u516c\u5b89\u5206\u5c40\u83ca\u82b1\u6d3e\u51fa\u6240\u51fa\u5177\u7684\u4f24\u60c5\u9274\u5b9a\u59d4\u6258\u4e66\u3002\u4ed6\u7684\u4f24\u60c5\u88ab\u9274\u5b9a\u4e3a\u8f7b\u4f24\u4e8c\u7ea7\u3002\u8bf4\u6cd5\u5e2e\u5973\u513f\u53d1\u5ba3\u4f20\u5c0f\u5e7f\u544a\u6559\u5e08\u5728\u5c0f\u533a\u91cc\u88ab\u6bb4\u6253\u6628\u65e5\uff0c\ufffd\ufffd\u8005\u62e8\u901a\u4e86\u9ec4\u654f\u7684\u7535\u8bdd\u3002\u4ed6\u8bf4\uff0c\u5f53\u65f6\u4ed6\u770b\u89c1\u8be5\u5c0f\u533a\u7684\u5927\u95e8\u6ca1\u6709\u5173\uff0c\u4e5f\u6ca1\u6709\u4fdd\u5b89\u503c\u73ed\u3002\u4e8e\u662f\uff0c\u4ed6\u5c31\u8fdb\u5230\u4e86\u5c0f\u533a\u91cc\u5e2e\u5973\u513f\u7684\u6c57\u84b8\u9986\u53d1\u5e7f\u544a\u5355\u3002\u5728\u697c\u680b\u503c\u73ed\u7684\u4fdd\u5b89\u6ca1\u6709\u963b\u6b62\u7684\u524d\u63d0\u4e0b\uff0c\u4ed6\u4e58\u7535\u68af\u6765\u5230\u4e86\u697c\u4e0a\uff0c\u4e3a\u4e86\u4e0d\u5f71\u54cd\u4f4f\u6237\uff0c\u4ed6\u5c06\u540d\u7247\u653e\u5728\u4e86\u623f\u95e8\u7684\u628a\u624b\u4e0a\u3002\u88ab\u4fdd\u5b89\u53d1\u73b0\u65f6\uff0c\u4ed6\u624d\u53d1\u4e86\u56db\u4e94\u5341\u5f20\u3002\u4fdd\u5b89\u95ee\u4ed6\u5e72\u4ec0\u4e48\uff1f\u4ed6\u56de\u7b54\uff0c\u5bb6\u91cc\u5f00\u4e86\u6c57\u84b8\u9986\uff0c\u6765\u5ba3\u4f20\u4e00\u4e0b\u3002\u4e24\u540d\u4fdd\u5b89\u53eb\u4ed6\u4e0d\u8981\u53d1\u4e86\uff0c\u5e76\u8981\u6c42\u4ed6\u5230\u7269\u7ba1\u529e\u516c\u5ba4\u7b49\u5f85\u9886\u5bfc\u5904\u7406\u3002\u4ea4\u8c08\u4e2d\uff0c\u7531\u4e8e\u5bf9\u65b9\u4e00\u76f4\u5728\u8bf4\u65b9\u8a00\uff0c\u9ec4\u654f\u53ea\u80fd\u542c\u6e05\u695a\u7684\u4e00\u53e5\u8bdd\u662f\uff0c\u7269\u7ba1\u53eb\u4ed6\u53bb\u6536\u56de\u5c0f\u5e7f\u544a\u3002\u4ed6\u5f53\u5373\u540c\u610f\u4e86\uff0c\u51c6\u5907\u53bb\u6536\u3002\u8fd9\u65f6\uff0c\u5c0f\u533a\u7684\u4e03\u516b\u540d\u5de5\u4f5c\u4eba\u5458\u5c31\u6bb4\u6253\u4e86\u4ed6\uff0c\u5176\u4e2d\u6709\u7a7f\u4fdd\u5b89\u670d\u88c5\u7684\uff0c\u4e5f\u6709\u8eab\u7740\u4fbf\u8863\u7684\u3002\u8ba9\u4ed6\u6c14\u6124\u7684\u662f\uff0c\u4ed6\u8bd5\u56fe\u9003\u8dd1\u8eb2\u8d77\u6765\uff0c\u4f9d\u7136\u88ab\u8ffd\u7740\u6bb4\u6253\u3002\u9ec4\u654f\u8bf4\uff0c\u5973\u513f\u5c06\u4ed6\u88ab\u6253\u53c8\u7ef4\u6743\u65e0\u95e8\u7684\u906d\u9047\u53d1\u5230\u4e86\u5fae\u4fe1\u4e0a\uff0c\u5e0c\u671b\u627e\u5230\u76f8\u5173\u89c6\u9891\u548c\u7167\u7247\uff0c\u8fd8\u539f\u4e8b\u4ef6\u771f\u76f8\";\n\n    System.out.println(sentence.length());\n   // String sentence = \"\u5973\u513f\u5c06\u4ed6\u88ab\u6253\u53c8\u7ef4\u6743\u65e0\u95e8\u7684\u906d\u9047\u53d1\u5230\u4e86\u5fae\u4fe1\u4e0a\uff0c\u5e0c\u671b\u627e\u5230\u76f8\u5173\u89c6\u9891\u548c\u7167\u7247\uff0c\u8fd8\u539f\u4e8b\u4ef6\u771f\u76f8\u3002\";\n    TokenStream tokens = analyzer.tokenStream(\"dummyfield\", sentence);\n    tokens.reset();\n    CharTermAttribute termAttr = (CharTermAttribute) tokens.getAttribute(CharTermAttribute.class);\n    while (tokens.incrementToken()) \n{\n     // System.out.println(termAttr.toString());\n    }\n\n    analyzer.close();\n  }\n\nThe text length in above sample is 1027, with this sample, the sentences are like this:\n.....\nSentence:\u9ec4\u654f\u8bf4\uff0c\u5973\u513f\u5c06\u4ed6\u88ab\u6253\u53c8\u7ef4\u6743\u65e0\u95e8\u7684\u906d\u9047\u53d1\u5230\u4e86\u5fae\u4fe1\u4e0a\uff0c\u5e0c\u671b\u627e\u5230\u76f8\u5173\u89c6\u9891\u548c\u7167\u7247\uff0c\u8fd8\u539f\u4e8b\nSentence:\u4ef6\u771f\u76f8\n\nThe last 3 characters are detected as an individual sentence, so \u8fd8\u539f\u4e8b\u4ef6\u771f\u76f8 is tokenized as \u8fd8\u539f|\u4e8b|\u4ef6|\u771f\u76f8. when the correct tokens should be \u8fd8\u539f|\u4e8b\u4ef6|\u771f\u76f8\u3002\n\nOverride isSafeEnd method in HMMChineseTokenizer fixes this issue by consider '\uff0c'  or '\u3002'  as a safe end of text:\n\npublic class HMMChineseTokenizer extends SegmentingTokenizerBase {\n....\n /** For sentence tokenization, these are the unambiguous break positions. */\n  protected boolean isSafeEnd(char ch) {\n    switch(ch) \n{\n      case 0x000D:\n      case 0x000A:\n      case 0x0085:\n      case 0x2028:\n      case 0x2029:\n   +   case '\u3002':\n   +   case '\uff0c':\n        return true;\n      default:\n        return false;\n    }\n  }",
    "attachments": {
        "lucene-7508-test.patch": "https://issues.apache.org/jira/secure/attachment/12842926/lucene-7508-test.patch",
        "lucene-7508.patch": "https://issues.apache.org/jira/secure/attachment/12842931/lucene-7508.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15595368",
            "author": "Michael McCandless",
            "date": "2016-10-21T15:10:13+0000",
            "content": "Seems like there are two issues here.\n\nFirst, there is a (hard coded?) limit of 1024 for the max sentence?  Second, whether those additional characters should be considered safe sentence endings.\n\nCan you also turn this into a patch with a failing test peina?  Thank you! "
        },
        {
            "id": "comment-15744102",
            "author": "Chang KaiShin",
            "date": "2016-12-13T04:18:40+0000",
            "content": "failing test case "
        },
        {
            "id": "comment-15744131",
            "author": "Chang KaiShin",
            "date": "2016-12-13T04:35:53+0000",
            "content": "A hard coded buffer size 1024 exists in SegmentingTokenizerBase.java.\nEnlarge the size up to 2048, then the test case passes. As for the 2nd issue, I don't suggest to distinguish additional punctuation as the sentence's ending symbol. The internal lucene seems to perform well in identifying sentences. It's better to open an independent issue if it fails again.\n "
        },
        {
            "id": "comment-15744140",
            "author": "peina",
            "date": "2016-12-13T04:40:55+0000",
            "content": "Hi Chang KaiShin,\nThanks for your patch, but I don't think it makes any difference to enlarge the size to 2048.. unless we never handle text larger than 2048.. "
        },
        {
            "id": "comment-15744174",
            "author": "Chang KaiShin",
            "date": "2016-12-13T05:03:29+0000",
            "content": "Theoretically the text size could be infinite. The ideal approach is to take input text as stream instead of string. I'll try it. "
        },
        {
            "id": "comment-15744568",
            "author": "peina",
            "date": "2016-12-13T08:38:53+0000",
            "content": "Great, thanks! "
        },
        {
            "id": "comment-15753733",
            "author": "Chang KaiShin",
            "date": "2016-12-16T07:43:22+0000",
            "content": "After I looked into the internal handling of the input text. I found the source have already completed what I'm trying to do - Taking the input text as stream and leveraging the BUFFERMAX(length 1024) to loop through the entire text. The isSafeEnd method you mentioned previously is a key method to decide token boundaries. Currently lucene doesn't not contain Chinese token breakers so that it truncate possible tokens.\nAfter overrided, it finds the last possible breaker position and leaves behind the remaining text after the break position\nto the next loop. So the sentenses are remained intact and processed correctly. To Michael McCandless, additional ending sentence characters is necessary. I also named some Chinese breakers such as\n'\uff1b'\n'\u3002'\n'\uff0c'\n'\u3001'\n'\uff5e'\n'\uff08'\n'\uff09' "
        },
        {
            "id": "comment-15753817",
            "author": "peina",
            "date": "2016-12-16T08:30:35+0000",
            "content": "glad to know my previous fix gave you at least some hint  "
        }
    ]
}