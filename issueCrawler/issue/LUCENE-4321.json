{
    "id": "LUCENE-4321",
    "title": "java.io.FilterReader considered harmful",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [],
        "type": "Bug",
        "fix_versions": [
            "4.0",
            "6.0"
        ],
        "affect_versions": "4.0-BETA",
        "resolution": "Fixed",
        "status": "Closed"
    },
    "description": "See Dawid's email: http://find.searchhub.org/document/64b0a28c53faf39\n\nReader.java is fine, it has lots of methods like read(), read(char[]), read(CharBuffer), skip(), but these all have default implementations delegating to read(char[], int, int).\n\nUnfortunately FilterReader delegates too many unnecessary things such as read() and skip() in a broken way. It should have just left these alone.\n\nThis can cause traps for someone upgrading because they have to override multiple methods, when read(char[], int, int) should be enough, and all Reader methods will then work correctly.",
    "attachments": {
        "LUCENE-4321.patch": "https://issues.apache.org/jira/secure/attachment/12541814/LUCENE-4321.patch",
        "NoRandomReadMockTokenizer.java": "https://issues.apache.org/jira/secure/attachment/12564694/NoRandomReadMockTokenizer.java"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-08-21T20:58:56+0000",
            "content": "Here's a patch. ",
            "author": "Robert Muir",
            "id": "comment-13439035"
        },
        {
            "date": "2012-08-22T06:30:07+0000",
            "content": "Yeah, this looks good to me! I'd even make \"in\" final, but maybe I'm paranoid and we shouldn't limit the possibility of replacing it with something else, don't know.\n\n// make this final?\n+  protected Reader in;\n\n\n\nI like it much better than subclassing FilterReader. I'm sure it will save many people debugging time if they already have custom char filters.\n\n+1 from me. ",
            "author": "Dawid Weiss",
            "id": "comment-13439309"
        },
        {
            "date": "2012-08-22T13:34:42+0000",
            "content": "Updated patch: made 'in' final as Dawid suggested.\n\nAdditionally I kept read(char[], int, int) abstract. I think this makes the class a lot easier to use, because it ensures subclasses implement the correct methods they need at a minimum: read(char[], int, int) and correct(int).\n\nI also added javadocs. ",
            "author": "Robert Muir",
            "id": "comment-13439487"
        },
        {
            "date": "2012-08-22T14:04:34+0000",
            "content": "Also added tests. \n\nIn the patch, MockTokenizer switches up its read() method. Since BaseTokenStreamTestCase consumes multiple times and compares the results, this means if a charfilters read() methods are inconsistent it will fail.\n\nI added a test for one that was affected by the FilterReader brokenness, and also gave it an optimized impl for read() anyway. ",
            "author": "Robert Muir",
            "id": "comment-13439543"
        },
        {
            "date": "2012-08-22T14:23:50+0000",
            "content": "In 3.x the delegate was named \"input\", this changed in BETA because it extended FilterReader. We should now make it \"input\" again, this also conforms to TokenFilter's design. ",
            "author": "Uwe Schindler",
            "id": "comment-13439560"
        },
        {
            "date": "2012-08-22T14:28:30+0000",
            "content": "+1. I'll update the patch. ",
            "author": "Robert Muir",
            "id": "comment-13439564"
        },
        {
            "date": "2012-08-22T14:40:20+0000",
            "content": "Updated patch with the in->input rename. I think this is ready to go. ",
            "author": "Robert Muir",
            "id": "comment-13439571"
        },
        {
            "date": "2012-08-22T14:51:06+0000",
            "content": "I am just thinking about markSupported(), mark(), reset(): Lucene does not use those methods at all and implementing this shit correctly with offsets is to heavy. I would return false for markSupported, and let mark() and reset() be unimplented (no-op for mark()) or throw IOEx (for reset()). ready() can be delegated, thats fine. - and make final? ",
            "author": "Uwe Schindler",
            "id": "comment-13439581"
        },
        {
            "date": "2012-08-22T15:03:02+0000",
            "content": "We don't need to make these final: we should just not support by default: this is easy, its the Reader default, so just remove delegation.\n\nIf someone (like MappingCharFilter) wants to support reset() and has tests for it (like MappingCharFilter), then thats fine,\nsame for mark() or ready() or others.\n\nI'll update the patch ",
            "author": "Robert Muir",
            "id": "comment-13439586"
        },
        {
            "date": "2012-08-22T15:14:11+0000",
            "content": "+1. Does MappingCharFilter really support mark() - interesting... ",
            "author": "Uwe Schindler",
            "id": "comment-13439595"
        },
        {
            "date": "2012-08-22T15:14:45+0000",
            "content": "Updated patch removing delegation for those methods so we have reader defaults (e.g. unsupported). Override if you want to implement, but by default these are all correct ",
            "author": "Robert Muir",
            "id": "comment-13439596"
        },
        {
            "date": "2012-08-22T15:15:34+0000",
            "content": "\n+1. Does MappingCharFilter really support mark() - interesting...\n\nNo. it supports reset() but not mark(), (only if also its input supports reset()) which is allowed. ",
            "author": "Robert Muir",
            "id": "comment-13439597"
        },
        {
            "date": "2012-08-22T15:25:43+0000",
            "content": "So there was a bug hidden in that filterreader class hierarchy change? Nice   ",
            "author": "Dawid Weiss",
            "id": "comment-13439609"
        },
        {
            "date": "2012-08-22T16:47:15+0000",
            "content": "+1\n\nSneaky trap. ",
            "author": "Michael McCandless",
            "id": "comment-13439668"
        },
        {
            "date": "2012-08-22T17:08:57+0000",
            "content": "+1, I am fine now. CharFilter now looks elegant. ",
            "author": "Uwe Schindler",
            "id": "comment-13439691"
        },
        {
            "date": "2012-08-22T17:16:06+0000",
            "content": "Ah one thing:\nFilteredReader in Java passes \"input\" to the parent ctor, because all synchronization should be done on the most-inner source reader. The original FilterRaeder uses Reader's protected ctor to pass in another lock, and that is the input reader.\nWe should do the same - I am not sure what the effect is, but otherwise it might slowdown as every raeder is using another lock? ",
            "author": "Uwe Schindler",
            "id": "comment-13439692"
        },
        {
            "date": "2012-08-22T17:37:23+0000",
            "content": "Good idea Uwe. ",
            "author": "Robert Muir",
            "id": "comment-13439704"
        },
        {
            "date": "2013-01-14T12:29:04+0000",
            "content": "I had to extend MockTokenizer, because I read the buffer completely to decide, what to do with the input (convert or not to something else).\n\nWhen you use different reading methods randomly, my tests don't pass. If you used the same method (may be different) for the complete input string, they would pass, but now the output string is messed up, becase some parts of the input are converted and some are not. ",
            "author": "Artem Lukanin",
            "id": "comment-13552610"
        },
        {
            "date": "2013-01-14T12:36:59+0000",
            "content": "Your charfilter is broken. ",
            "author": "Robert Muir",
            "id": "comment-13552613"
        },
        {
            "date": "2013-01-15T08:01:31+0000",
            "content": "Oh, indeed! ",
            "author": "Artem Lukanin",
            "id": "comment-13553580"
        },
        {
            "date": "2013-05-10T10:33:23+0000",
            "content": "Closed after release. ",
            "author": "Uwe Schindler",
            "id": "comment-13653912"
        }
    ]
}