{
    "id": "LUCENE-4673",
    "title": "TermQuery.toString() doesn't play nicely with whitespace",
    "details": {
        "components": [
            "core/search"
        ],
        "fix_versions": [],
        "affect_versions": "4.0-BETA,                                            4.1,                                            3.6.2",
        "priority": "Major",
        "labels": "",
        "type": "Bug",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "A TermQuery where term.text() contains whitespace outputs incorrect string representation: field:foo bar instead of field:\"foo bar\". A \"correct\" representation is such that could be parsed again to the correct Query object (using the correct analyzer, yes, but still).\n\nThis may not be so critical, but in our system we use Lucene's QP to parse and then pre-process and optimize user queries. To do that we use Query.toString on some clauses to rebuild the query string.\n\nThis can be easily resolved by always adding quote marks before and after the term text in TermQuery.toString. Testing to see if they are required or not  is too much work and TermQuery is ignorant of quote marks anyway.\n\nSome other scenarios which could benefit from this change is places where escaped characters are used, such as URLs.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2013-01-09T19:18:53+0000",
            "content": "quotes have a particular meaning to the queryparser so adding quotes would change things.\n\nIn general queries' toString is just to be user-readable, not \"re-parsable\". They don't escape syntax character and so on. ",
            "author": "Robert Muir",
            "id": "comment-13548854"
        },
        {
            "date": "2013-01-09T19:33:40+0000",
            "content": "I figured as much, yet we would definitely like to have use this behavior built-in. Are there any plans on making such an interface to perform a proper Query -> String conversion? ",
            "author": "Itamar Syn-Hershko",
            "id": "comment-13548874"
        },
        {
            "date": "2013-01-09T19:37:00+0000",
            "content": "I really don't understand why we completely eliminated the helpful javadoc that tried to explain this to people back in the day (circa Lucene 2.9)...\n\n\n  /** Prints a query to a string, with <code>field</code> assumed to be the \n   * default field and omitted.\n   * <p>The representation used is one that is supposed to be readable\n   * by {@link org.apache.lucene.queryParser.QueryParser QueryParser}. However,\n   * there are the following limitations:\n   * <ul>\n   *  <li>If the query was created by the parser, the printed\n   *  representation may not be exactly what was parsed. For example,\n   *  characters that need to be escaped will be represented without\n   *  the required backslash.</li>\n   * <li>Some of the more complicated queries (e.g. span queries)\n   *  don't have a representation that can be parsed by QueryParser.</li>\n   * </ul>\n   */\n  public abstract String toString(String field);\n\n\n\n\n...it wasn't perfect, but it could have been improved instead of deleted...\n\n\nPrints a query to a string, with <code>field</code> assumed to be the default\nfield and omitted.  \n<p>The String representation generated is visually similar to that parsed by\n{@link org.apache.lucene.queryParser.QueryParser QueryParser} for convinience,\nhowever it is not guaranteed to produce an identical query object when parsed,\nsince not all permutations of Query objects can be created by the QueryParser.\n\n ",
            "author": "Hoss Man",
            "id": "comment-13548881"
        }
    ]
}