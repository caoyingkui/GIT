{
    "id": "SOLR-5704",
    "title": "solr.xml coreNodeDirectory is ignored when creating new cores via REST(ish) apis",
    "details": {
        "affect_versions": "4.6.1",
        "status": "Closed",
        "fix_versions": [
            "4.7",
            "6.0"
        ],
        "components": [],
        "type": "Bug",
        "priority": "Minor",
        "labels": "",
        "resolution": "Fixed"
    },
    "description": "\"New style\" core.properties auto-configuration works correctly at startup when ${coreRootDirectory} is specified in ${solr.home}/solr.xml, however it does not work if a core is later created dynamically via either (indirectly) the collection API or (directly) the core API.\n\nCore creation is always attempted in ${solr.home}.",
    "attachments": {
        "SOLR-5704.patch": "https://issues.apache.org/jira/secure/attachment/12627891/SOLR-5704.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "author": "Jesse Sipprell",
            "id": "comment-13894206",
            "date": "2014-02-07T05:27:06+0000",
            "content": "The following is the common solr.xml we use on all 4.6.1 nodes with path and hostname redactions for security reasons:\n\n\n<solr>\n  <str name=\"adminHandler\">${adminHandler:org.apache.solr.handler.admin.CoreAdminHandler}</str>\n  <int name=\"coreLoadThreads\">${coreLoadThreads:3}</int>\n  <str name=\"coreRootDirectory\">${coreRootDirectory:/data/solr/cores/}</str> <!-- usually solrHome  -->\n  <str name=\"managementPath\">${managementPath:admin}</str>\n  <str name=\"sharedLib\">${sharedLib:lib}</str>\n  <str name=\"shareSchema\">${shareSchema:false}</str>\n  <!-- transientCacheSize is ignored for everything but transient cores. -->\n  <int name=\"transientCacheSize\">${transientCacheSize:2147483647}</int>\n  <solrcloud>\n    <int name=\"distribUpdateConnTimeout\">${distribUpdTimeout:30000}</int>\n    <int name=\"distribUpdateSoTimeout\">${distribUpdateTimeout:15000}</int>\n    <int name=\"leaderVoteWait\">${leaderVoteWait:30000}</int>\n    <str name=\"host\">${host:a-fully-qualified-hostname.mcclatchyinteractive.com}</str>\n    <str name=\"hostContext\">${hostContext:solr}</str>\n    <int name=\"hostPort\">${jetty.port:8983}</int>\n    <int name=\"zkClientTimeout\">${zkClientTimeout:15000}</int>\n    <str name=\"zkHost\">${zkHost:a,zk,cluster,host,port,namespace,list}</str>\n    <bool name=\"genericCoreNodeNames\">${genericCoreNodeNames:true}</bool>\n  </solrcloud>\n</solr>\n\n "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13895318",
            "date": "2014-02-08T00:41:13+0000",
            "content": "Alan is picking this up, but a tangential thing....\n\nThe transientCacheSize is completely out of what we had in mind when\nthe code was put together. You'll effectively never age out any transient\ncores. Is that intentional?\n "
        },
        {
            "author": "Jesse Sipprell",
            "id": "comment-13895687",
            "date": "2014-02-08T19:02:31+0000",
            "content": "The solr.xml I posted was initially just copy-and-pasted from some site that documented it (which also suggested that these values not be altered). The only values we have changed are coreRootDirectory, host, zkHost and (I think) zkClientTimeout.\n\nWe don't use transient cores so the value isn't terribly relevant to us. In fact, we use configuration management systems to manage core directories and core.properties files in a totally different location separate from solr.home and solr.xml. The only reason this (the problem discussed in this ticket) is an issue for us is because it makes it impossible to perform dynamic shardsplitting as the user we run Solr as doesn't have write access to solr.home.\n\nThanks,\n\nJesse "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13896040",
            "date": "2014-02-09T21:01:15+0000",
            "content": "So the problem here is that when a CoreDescriptor gets a relative instance dir, it always resolves that against solr home.  This patch updates it to check for a coreRootDirectory first. "
        },
        {
            "author": "Jesse Sipprell",
            "id": "comment-13896118",
            "date": "2014-02-10T00:04:05+0000",
            "content": "I've tested out the attached patch and it seems to work as expected; at least with SPLITSHARD.\n\nThanks,\n\nJesse "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13896417",
            "date": "2014-02-10T11:38:25+0000",
            "content": "Updated patch, fixing a couple of test fails due to TestHarness creating a ConfigSolr object with a null resource loader. "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13896448",
            "date": "2014-02-10T12:45:05+0000",
            "content": "Commit 1566598 from Alan Woodward in branch 'dev/trunk'\n[ https://svn.apache.org/r1566598 ]\n\nSOLR-5704: new cores should be created under coreRootDirectory "
        },
        {
            "author": "ASF subversion and git services",
            "id": "comment-13896450",
            "date": "2014-02-10T12:47:45+0000",
            "content": "Commit 1566600 from Alan Woodward in branch 'dev/branches/branch_4x'\n[ https://svn.apache.org/r1566600 ]\n\nSOLR-5704: new cores should be created under coreRootDirectory "
        },
        {
            "author": "Alan Woodward",
            "id": "comment-13896452",
            "date": "2014-02-10T12:49:09+0000",
            "content": "Thanks Jesse! "
        },
        {
            "author": "Erick Erickson",
            "id": "comment-13896715",
            "date": "2014-02-10T16:02:03+0000",
            "content": "Thanks guys! "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14089432",
            "date": "2014-08-07T16:51:06+0000",
            "content": "A user on IRC is running 4.9.0 and claims that new cores are created in the solr home rather than the configured coreRootDirectory, so on restart they are not being discovered.  I'm doing what I can to be sure there are no jars from a previous version hanging around. "
        },
        {
            "author": "Shawn Heisey",
            "id": "comment-14089528",
            "date": "2014-08-07T17:58:44+0000",
            "content": "Looks like a new issue.  I'll get that filed.\n\n\n11:53 < _sp0k_> It indeed is reading coreRootDirectory, but due to missing\n                trailer collection directory is created wrong. e.g.\n                coreRootDirectory=/usr/local/solr/cores, collection directory\n                created by API would be -\n                /usr/local/solr/cores${collection}_shard_replica where it\n                should be /usr/local/solr/cores/${collection}_shard_replica\n\n "
        }
    ]
}