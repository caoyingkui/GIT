{
    "id": "SOLR-12156",
    "title": "\"<optimizeConfig>\" in solrconfig.xml similar to \"<indexConfig>\"",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "config-api"
        ],
        "type": "Wish",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Won't Fix",
        "status": "Resolved"
    },
    "description": "It would be great to have the below\u00a0config parameters in solrconfig.xml :-\n\n\tmaxMergedSegmentMB (same as in TieredMergePolicy)\n\tmaxOptimizeSegments (same as in solrjClient.optimize( waitFlush,waitSearcher ,maxSegments))\n\texpungeDeletes (true/false)\n\toptimizeTimeout(in minutes)\n\tdisableExlicitOptimize (disable all solrClient call to optimize )\n\t\n\t\toptimizeJobCron - associated to\u00a0disableExlicitOptimize where optimization can be carried out at a maintenance period defined by the cron expression.\n\t\n\t\n\n\n\nThis in turn needs to be respected by\u00a0DirectUpdateHandler2 or any other handler trying to optimize the index",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2018-03-28T15:12:04+0000",
            "content": "maxMergedSegmentMB (same as in TieredMergePolicy)\n\nAs far as I know, forceMerge doesn't pay attention to a max segment size.  I'm prepared to be wrong about this, but that is my understanding.  The \"force\" in the operation name indicates that you're asking it to do something it normally doesn't do.\n\nmaxOptimizeSegments (same as in solrjClient.optimize)\n\nThis is the only one of these settings that really makes sense to me ... but it's already possible when you DO the optimize, so a new config mechanism is unnecessary.\n\nexpungeDeletes (true/false)\n\nIsn't this the entire point of an optimize to begin with?  I'm not sure this is even an option on Lucene's forceMerge.  I think it's an option for commit.\n\noptimizeTimeout(in minutes)\n\nAs far as I know, forceMerge doesn't offer any mechanism to abort after a timeout.  Solr shouldn't expose config options that don't exist on the underlying code.\n\ndisableExlicitOptimize (disable all solrClient call to optimize )\n\nThis is already possible with an update processor.  It's been around for a long time.\n\nhttps://lucene.apache.org/solr/7_0_0//solr-core/org/apache/solr/update/processor/IgnoreCommitOptimizeUpdateProcessorFactory.html\n\noptimizeJobCron - associated to disableExlicitOptimize where optimization can be carried out at a maintenance period defined by the cron expression.\n\nYou're going to run into major opposition for this one.  Solr should NEVER make any changes to the index that are NOT triggered explicitly by user action.  Especially not something that can quite literally take hours and severely impact performance.\n\nAt the moment, there is precisely one feature that can make changes separately from an explicit request.  It is the document expiration feature, where documents can basically be indexed with information indicating exactly when the system should automatically delete them.  It's not quite covered under the \"never make changes without user input\" umbrella, though \u2013 because when the user indexed the document, they also told Solr when it should be deleted.  So it IS triggered by user action, it's just that the operation is delayed. ",
            "author": "Shawn Heisey",
            "id": "comment-16417506"
        },
        {
            "date": "2018-03-28T15:35:32+0000",
            "content": "Followup about the \"cron\" functionality:  ALL operating systems come with a scheduling facility built in.  There is no need to have scheduling capability in Solr. ",
            "author": "Shawn Heisey",
            "id": "comment-16417564"
        },
        {
            "date": "2018-03-29T06:42:32+0000",
            "content": "The use case for these configurations is, as a Solr master administrator, I want to keep control on the optimization asked for on my index.\n\nThere are multiple data\u00a0transformers which connects to this master using SolrJ. I do not have full control on them. But if a novice developer calls optimize after each commit, I want my configurations to protect my index from that.\n\nRegarding the CRON, yes my ask is similar to the DocDeletion policy available via updateRequestProcessorChain. Just like doc deletion I want to configure internally a downtime where the optimize will auto initiate and\u00a0the system will be able to give it enough time to complete (may be late sunday night, once a week). ",
            "author": "Indranil Majumder",
            "id": "comment-16418507"
        },
        {
            "date": "2018-03-29T15:35:05+0000",
            "content": "But if a novice developer calls optimize after each commit, I want my configurations to protect my index from that.\n\nUse IgnoreCommitOptimizeUpdateProcessorFactory.  I included links to documentation above.  For more information about how to use update processors, see the Solr reference guide.\n\nI want to configure internally a downtime where the optimize will auto initiate\n\nYou can add an entry to the scheduling software in your OS to do this.  On Linux/Unix, it's usually very easy \u2013 configure an entry in your crontab that uses curl or wget to make an HTTP request to initiate the optimize.  There are ways to do it on Windows as well. ",
            "author": "Shawn Heisey",
            "id": "comment-16419206"
        },
        {
            "date": "2018-07-19T23:42:29+0000",
            "content": "I'll assign this to myself and close it in a couple of days if there are no objections. As of Solr 7.5, TieredMergePolicy will respect max segment sizes. Couple that with the new ability to control the percentage of deleted documents  in the index and I don't think the ideas here are needed.\n\nAs far as users shooting themselves in the foot, disabilng user-driven optimizations should is an option as Shawn points out. ",
            "author": "Erick Erickson",
            "id": "comment-16550027"
        }
    ]
}