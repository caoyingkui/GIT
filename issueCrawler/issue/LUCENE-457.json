{
    "id": "LUCENE-457",
    "title": "FieldCacheImpl take advantage of term info already being sorted",
    "details": {
        "labels": "",
        "priority": "Minor",
        "components": [
            "core/search"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "1.4",
        "resolution": "Won't Fix",
        "status": "Closed"
    },
    "description": "FieldCacheImpl.getStrings could take advantage of term info already being sorted\nlexically. Would it be possible to have a \"index order\" mode which returns an array\nof ints rather than strings storing a scalar value that increments by one for each\nnew term. \n\nPresumably there would be a big memory profile advantage in not holding onto\nthe term value Strings and a lesser one in int comparison being slightly quicker than\nString.compareTo.\n\nSorry if I have missed something obvious. I don't know the code very well.\n\nRegards\n\nSam",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2005-10-19T22:44:21+0000",
            "content": "I've thought the same thing... StringIndex without storing the strings.\nThe actual string values are sometimes needed though... a MultiSearcher needs them in order to sort documents from multiple indicies. ",
            "author": "Yonik Seeley",
            "id": "comment-12332477"
        },
        {
            "date": "2005-10-20T07:50:16+0000",
            "content": "Doh. Guess could do merge sort but does make it much less attractive.\n\nPresumably making sorting algorithm better than O(N) for memory would\nmean changes to storage format so be 2.0 thing \n\nThanks Yonik.\n\nGuess this should be closed. I for one can't think of a way of making it work. ",
            "author": "Sam Hough",
            "id": "comment-12332532"
        }
    ]
}