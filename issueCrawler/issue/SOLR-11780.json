{
    "id": "SOLR-11780",
    "title": "Upgrade httpclient to 5.0",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "clients - java"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "7.1",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The httpcomponents project is working on the 5.0 release.  There is an alpha version of httpclient and a beta version of httpcore.  The httpmime dependency that Solr currently uses has been folded into the main httpclient.\n\nI've enlisted the help of Oleg Kalnichevski from httpcomponents and we'll be using github to coordinate.\n\nThis work will not be committed officially until the 5.0 version of httpclient is actually released.",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2017-12-19T15:18:04+0000",
            "content": "My fork of the github project:\n\nhttps://github.com/elyograg/lucene-solr ",
            "author": "Shawn Heisey",
            "id": "comment-16296941"
        },
        {
            "date": "2017-12-19T15:32:50+0000",
            "content": "Something Oleg has mentioned that we could do is have HC 4.5 and HC 5.0 coexist.  This is possible because all of the packages have changed in HC 5.0.  This does offer another option to us \u2013 we could start writing new SolrClient implementations from scratch, supporting HTTP/2 and new code paradigms from the ground up.\n\nThis idea is very compelling. ",
            "author": "Shawn Heisey",
            "id": "comment-16296969"
        },
        {
            "date": "2017-12-21T18:33:14+0000",
            "content": "After some initial work trying to get this done and finding that I didn't like what I was ending up with, I've come up with a general plan.  It's a fairly ambitious undertaking that will require a LOT of extreme care to make sure that a user's existing codebase can utilize a new SolrJ without any code changes, and in the case of a minor version upgrade, without recompiling.\n\nI am planning to begin a package alteration where I copy all the classes currently in org.apache.solr.client.solrj up one level, eliminating the \"solrj\" part of the package for the new classes, and deprecating everything in the original package.  Anything in the old package that utilizes HttpClient 4.x will not become a descendant of the same class in the new package, so it can continue using the old HC and be present for existing SolrJ programs.  If an old class doesn't use HttpClient, then it can become a descendant of the new class.\n\nThis plan is likely to increase the size of the solrj jar by a decent percentage until the next major release.\n\nRemoval of deprecated code in master will just be a matter of completely eliminating the old package.\n\nI am thinking that for the classes in src/test, I will just move them to the new package, I won't worry about keeping the old classes around.  This could affect user code that includes tests, but if things have been separated well enough, shouldn't affect runtime operation.  Tests will need to be updated to HC 5.0 along with the new implementations. ",
            "author": "Shawn Heisey",
            "id": "comment-16300412"
        }
    ]
}