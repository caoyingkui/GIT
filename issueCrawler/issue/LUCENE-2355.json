{
    "id": "LUCENE-2355",
    "title": "Refactor Directory/Multi/SegmentReader creation/reopening/cloning/closing",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/index"
        ],
        "type": "Improvement",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "*Reader lifecycle evolved over time to become some heavily tangled mess. It's hard to understand what's going on there, it's even harder to add some fields/logic while ensuring that all possible code paths preserve these fields/interact with the logic properly. While some of said mess is justified by the task at hand, a big part is just badly done copypaste and can be removed.\n\nI am currently refactoring this and intended to open an issue with a working patch, but the task winded up somewhat bigger than I expected, so I'm opening it earlier to track stuff encountered/changed/fixed.\nThe list is by no means exhaustive.\n\n\tan iteration to create SRs is copypasted several times, one of them (IW) with wrong iteration bound\n\tit is also overly complex and can be folded for create/reopen cases\n\treaders sent to IndexReaderWarmer are termindexless/docstoreless on some occasions\n\tit is possible to clone() your way to readwrite NRT reader\n\tIndexDeletionPolicy is not always preserved through clones/reopens\n\tcloned readers share CoreReaders and, consequently, updated termsIndex/docStores\n\tthreadlocal versions of fieldsReader/termsVector are bound to SR, not CoreReaders and thus are recreated on clone/reopen\n\tdouble-initialization for some fields (someone got lost and did this to be sure I guess), stupid assert checks ( qwe = new(); assert qwe != null )\n\tSR is not always recreated when compound status of underlying segment changes\n\tdeleting already deleted doc marks deletions dirty and rewrites them\n\tlots of synchronization is done around Reader, while it can be narrowed down to norms/deletions/whatever\n\n\n\nI did some structural modifications:\n\n\tCompositeReader extracts common code from DirectoryReader and MultiReader (complete)\n\tReadonlyDirectoryReader and ReadonlySegmentReader are dead, MutableD/SReaders are introduced and carry all modification logic/fields (DR complete, SR in progress)\n\tWriterBackedReader encapsulates NRT reader logic (complete)\n\tCoreReaders split into CoreReaders, DocStores, TermInfos. All of these are immutable and SR is cloned when you need to change its mode (in progress)",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "date": "2010-04-01T15:20:51+0000",
            "content": "Some more stuff I forgot:\n\n\n\tNo need to keep around origInstance in CoreReaders. It is used to purge FieldCache, but the cache is purged based on getFieldCacheKey, which is common across all clones/reopens\n\tMultiReader-level norms cache is not needed with per-segment searching and is removed. The method that extracts norms into a user-passed array still has the same performance even without the cache.\n\n ",
            "author": "Earwin Burrfoot",
            "id": "comment-12852417"
        },
        {
            "date": "2010-04-04T11:04:41+0000",
            "content": "\n\tDR.clone() doesn't do ensureOpen(), you can successfully clone a DR over empty index, or get weird exception from underlying SR on non-empty index. If you relax synchronized blocks guarding clone/reopen for readonly readers (which is okay, in theory), it gets even more fun, as no checks are done when incRefing SR.CoreReaders.\n\n\n\nI think I'm going to introduce interface RefCounted, abstract class WhateverRefCounted, which guards against increment on closed instance and has nice mass-decRef methods in IOUtils. ",
            "author": "Earwin Burrfoot",
            "id": "comment-12853244"
        },
        {
            "date": "2010-04-04T22:40:35+0000",
            "content": "\n\twhen SegmentReader / CoreReaders are created, and exception is thrown, that exception can be hidden with exception originating in cleanup code (doClose/decRef)\n\texception in doClose/decRef prevents closing and freeing all the resources (I believe I saw this once in the wild, when faulty merges ate up all file handles)\n\n ",
            "author": "Earwin Burrfoot",
            "id": "comment-12853280"
        },
        {
            "date": "2010-04-12T13:42:53+0000",
            "content": "\n\tNorm holds a reference to papa-SegmentReader forever (not so deadly when SRs null themselves up on close, but it's worse with final fields and even now I can construct a case that leaks noticeable memory)\n\n ",
            "author": "Earwin Burrfoot",
            "id": "comment-12855964"
        },
        {
            "date": "2010-04-13T17:35:30+0000",
            "content": "\n\tNorms do both backward and forward sharing of their byte array. Eg, we clone a reader, then load up norms on the clone, and original sees and uses the same byte array.\nThis is really complex and likely noone ever needs it. Even if you do hit such a situation, and norms are loaded twice, first for a clone and then for original reader, it is transient and norms are really smallish compared to other memory hogs, so we can live with it.\nI'm nixing this sharing. Successfully loaded norms are simply inherited from papa-reader.\n\n ",
            "author": "Earwin Burrfoot",
            "id": "comment-12856509"
        },
        {
            "date": "2010-05-20T23:49:22+0000",
            "content": "\n\tNorms are now in fact loaded upfront. But not when applying deletions. Norm handling code is isolated, so lazy-loading can be brought back if really needed.\n\tIndexWriter gets a new Config parameter - readerTermsIndexDivisor. This is used for opening all the readers IW pools or uses otherwise. Same parameter to IW.getReader() is annihilated as nondeterministic.\n\tIndexWriter no longer does partial SR sharing when pooling is off. It brought no real benefits, had a potential to blow memory usage to pooling=on levels, and also made ReaderPool.get() code look buggy. : )\n\tAdded a notion of SR.RunLevel that governs SR's intended usage (two variants of merging, applying deletes, searching). SR.upgradeRunlevel(..) replaces loadTermsIndex/openDocStores/lazy-norms\n\n ",
            "author": "Earwin Burrfoot",
            "id": "comment-12869813"
        },
        {
            "date": "2010-06-02T23:32:39+0000",
            "content": "\n\tNRT Reader shared live SegmentInfos with papa-IW -> getVersion, isOptimized, getCommitUserData, getIndexCommit were all broken.\n\n ",
            "author": "Earwin Burrfoot",
            "id": "comment-12874857"
        }
    ]
}