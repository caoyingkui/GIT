{
    "id": "LUCENE-7092",
    "title": "Point range factory methods for excluded bounds",
    "details": {
        "resolution": "Not A Problem",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [],
        "priority": "Minor",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "I am playing with using the new points API with elasticsearch and one challenge is to generate range queries whose bounds are excluded, which is something that was very easy with the previous numerics implementation. It is easy to do externally with ints, but becomes tricky with floats or ip addresses. Maybe we should have factory methods that take 2 additional booleans to allow the bounds to be excluded?",
    "attachments": {},
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15189074",
            "author": "Robert Muir",
            "date": "2016-03-10T10:46:14+0000",
            "content": "The problem with this is that client code tends to look much better once you really remove the brain damage. Those nulls and booleans were really just that, brain damage from termrangequery. I agree if you \"just\" try to wedge in points, without doing proper cleanups, then its ugly.\n\nYou can see that in the commit of LUCENE-7061, it just removes a ton of code!\n\nIn other words: remove things like nulls and include/exclude options to the user at all and give them a similar api. Why does a user need exclusive range on an ip address? They don't, users care about networks. It makes absolutely no sense! "
        },
        {
            "id": "comment-15189171",
            "author": "Robert Muir",
            "date": "2016-03-10T11:36:21+0000",
            "content": "also maybe a very simple compromise is to add deprecated 1D only excluded bounds to Float/Int/Double/Long just to ease the transition. But we should not be adding this for other new types like BigInteger/InetAddress (that stuff is new)... "
        },
        {
            "id": "comment-15190924",
            "author": "Adrien Grand",
            "date": "2016-03-11T13:31:25+0000",
            "content": "One use-case I have in mind is faceting. Say you are computing range facets on a numeric field (price, temperature, anything): it is common to have an inclusive lower bound and an exclusive upper bound so that buckets are exclusive. Then if you want to refine search results for a specific bucket, you would have to convert it to a filter, but this would be hard to do today since there is no easy way to build a point range query that has an exclusive upper bound? "
        },
        {
            "id": "comment-15190932",
            "author": "Robert Muir",
            "date": "2016-03-11T13:41:37+0000",
            "content": "This explanation doesnt make sense. The range facets in lucene are also inclusive too. This just sounds like more brain damage from the past.\n\nHonestly, i dont see whats difficult about this. You just add/subtract 1 to make something exclusive. If its float/double use Math.nextUp/nextDown. "
        },
        {
            "id": "comment-15190966",
            "author": "Adrien Grand",
            "date": "2016-03-11T14:13:00+0000",
            "content": "OK. Fair enough. "
        },
        {
            "id": "comment-15190975",
            "author": "Robert Muir",
            "date": "2016-03-11T14:19:22+0000",
            "content": "I still think its ok to provide deprecated methods to do the conversion in the meantime as mentioned. We did explain how to do these things in the javadocs already.\n\nBut the previous booleans and nulls damaged the API beyond repair, especially in the multi-dimensional case (boolean arrays). The previous \"format\" was also ambiguous, e.g. that you can provide open+exclusive and other crazy combinations.\n\nWith the current API for example its just:\n\nIntPoint.newRangeQuery(Integer.MIN_VALUE, max); // open\nIntPoint.newRangeQuery(min, max-1); // exclusive\nFloatPoint.newRangeQuery(min, Math.nextDown(max)); // exclusive\nFloatPoint.newRangeQuery(Float.NEGATIVE_INFINITY, max); // open\n\n "
        }
    ]
}