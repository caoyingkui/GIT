{
    "id": "LUCENE-6732",
    "title": "Improve validate-source-patterns in build.xml (e.g., detect invalid license headers!!)",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.4",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Today I enabled warnings analysis on Policeman Jenkins. This scans the build log for warnings by javac and reports them in statistics, together with source file dumps.\n\nWhen doing that I found out that someone added again a lot of \"invalid\" license headers using /** instead a simple comment. This causes javadocs warnings under some circumstances, because /** is start of javadocs and not a license comment.\n\nI then tried to fix the validate-source-patterns to detect this, but due to a bug in ANT, the <containsregexp/> filter is applied per line (although it has multiline matching capabilities!!!).\n\nSo I rewrote our checker to run with groovy. This also has some good parts:\n\n\tit tells you wwhat was broken, otherwise you just know there is an error, but not whats wrong (tab, nocommit,...)\n\tits much faster (multiple <containsregexp/> read file over and over, this one reads file one time into a string and then applies all regular expressions).",
    "attachments": {
        "LUCENE-6732-verbose.patch": "https://issues.apache.org/jira/secure/attachment/12776181/LUCENE-6732-verbose.patch",
        "LUCENE-6732-v2.patch": "https://issues.apache.org/jira/secure/attachment/12750077/LUCENE-6732-v2.patch",
        "LUCENE-6732.patch": "https://issues.apache.org/jira/secure/attachment/12749833/LUCENE-6732.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14681772",
            "author": "Uwe Schindler",
            "date": "2015-08-11T13:06:11+0000",
            "content": "Patch. Some files with invalid license headers were fixed already, but I have now like 100 more files to fix:\n\n\n-validate-source-patterns:\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/java/org/apache/lucene/analysis/ar/ArabicAnalyzer.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/java/org/apache/lucene/analysis/bg/BulgarianAnalyzer.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekAnalyzer.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/java/org/apache/lucene/analysis/el/GreekLowerCaseFilter.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/java/org/apache/lucene/analysis/fa/PersianAnalyzer.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/java/org/apache/lucene/analysis/hi/HindiAnalyzer.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/java/org/apache/lucene/analysis/th/ThaiAnalyzer.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/core/TestStopFilter.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/el/GreekAnalyzerTest.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestScandinavianFoldingFilterFactory.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/miscellaneous/TestScandinavianNormalizationFilterFactory.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/NumericPayloadTokenFilterTest.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TokenOffsetPayloadTokenFilterTest.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/payloads/TypeAsPayloadTokenFilterTest.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/DateRecognizerSinkTokenizerTest.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TestTeeSinkTokenFilter.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/sinks/TokenTypeSinkTokenizerTest.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/test/org/apache/lucene/analysis/snowball/TestSnowballPorterFilterFactory.java\n[source-patterns] javadoc-style license header: lucene/analysis/common/src/tools/java/org/apache/lucene/analysis/standard/GenerateJflexTLDMacros.java\n[source-patterns] javadoc-style license header: lucene/analysis/icu/src/java/org/apache/lucene/collation/ICUCollationDocValuesField.java\n[source-patterns] javadoc-style license header: lucene/analysis/icu/src/test/org/apache/lucene/collation/TestICUCollationDocValuesField.java\n[source-patterns] javadoc-style license header: lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilter.java\n[source-patterns] javadoc-style license header: lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseIterationMarkCharFilterFactory.java\n[source-patterns] javadoc-style license header: lucene/analysis/kuromoji/src/java/org/apache/lucene/analysis/ja/JapaneseNumberFilter.java\n[source-patterns] javadoc-style license header: lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseIterationMarkCharFilter.java\n[source-patterns] javadoc-style license header: lucene/analysis/kuromoji/src/test/org/apache/lucene/analysis/ja/TestJapaneseNumberFilter.java\n[source-patterns] javadoc-style license header: lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelFilter.java\n[source-patterns] javadoc-style license header: lucene/analysis/stempel/src/java/org/apache/lucene/analysis/stempel/StempelStemmer.java\n[source-patterns] javadoc-style license header: lucene/benchmark/src/java/org/apache/lucene/benchmark/Constants.java\n[source-patterns] javadoc-style license header: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/AbstractQueryMaker.java\n[source-patterns] javadoc-style license header: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/feeds/FileBasedQueryMaker.java\n[source-patterns] javadoc-style license header: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/programmatic/Sample.java\n[source-patterns] javadoc-style license header: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/NewAnalyzerTask.java\n[source-patterns] javadoc-style license header: lucene/benchmark/src/java/org/apache/lucene/benchmark/byTask/tasks/SearchTravRetLoadFieldSelectorTask.java\n[source-patterns] javadoc-style license header: lucene/benchmark/src/java/org/apache/lucene/benchmark/utils/ExtractReuters.java\n[source-patterns] javadoc-style license header: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilterFactory.java\n[source-patterns] javadoc-style license header: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/BloomFilteringPostingsFormat.java\n[source-patterns] javadoc-style license header: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/DefaultBloomFilterFactory.java\n[source-patterns] javadoc-style license header: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/FuzzySet.java\n[source-patterns] javadoc-style license header: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/HashFunction.java\n[source-patterns] javadoc-style license header: lucene/codecs/src/java/org/apache/lucene/codecs/bloom/MurmurHash2.java\n[source-patterns] javadoc-style license header: lucene/codecs/src/java/org/apache/lucene/codecs/memory/DirectPostingsFormat.java\n[source-patterns] javadoc-style license header: lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsReader.java\n[source-patterns] javadoc-style license header: lucene/core/src/java/org/apache/lucene/codecs/StoredFieldsWriter.java\n[source-patterns] javadoc-style license header: lucene/core/src/java/org/apache/lucene/search/DisjunctionMaxQuery.java\n[source-patterns] javadoc-style license header: lucene/core/src/java/org/apache/lucene/search/spans/TermSpans.java\n[source-patterns] javadoc-style license header: lucene/core/src/java/org/apache/lucene/util/FilterIterator.java\n[source-patterns] javadoc-style license header: lucene/core/src/java/org/apache/lucene/util/SmallFloat.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestAtomicUpdate.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestByteSlices.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterMerging.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterOnJRECrash.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestIndexWriterReader.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestStressDeletes.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestStressIndexing.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestStressIndexing2.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/index/TestTermdocPerf.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/search/TestCustomSearcherSort.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/search/payloads/TestPayloadSpans.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/util/Test2BPagedBytes.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/util/TestNumericUtils.java\n[source-patterns] javadoc-style license header: lucene/core/src/test/org/apache/lucene/util/TestSmallFloat.java\n[source-patterns] javadoc-style license header: lucene/highlighter/src/java/org/apache/lucene/search/highlight/DefaultEncoder.java\n[source-patterns] javadoc-style license header: lucene/highlighter/src/java/org/apache/lucene/search/highlight/Encoder.java\n[source-patterns] javadoc-style license header: lucene/highlighter/src/java/org/apache/lucene/search/highlight/SimpleHTMLEncoder.java\n[source-patterns] javadoc-style license header: lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/WeightedFieldFragList.java\n[source-patterns] javadoc-style license header: lucene/highlighter/src/java/org/apache/lucene/search/vectorhighlight/WeightedFragListBuilder.java\n[source-patterns] javadoc-style license header: lucene/highlighter/src/test/org/apache/lucene/search/vectorhighlight/WeightedFragListBuilderTest.java\n[source-patterns] javadoc-style license header: lucene/misc/src/java/org/apache/lucene/document/LazyDocument.java\n[source-patterns] javadoc-style license header: lucene/misc/src/java/org/apache/lucene/misc/IndexMergeTool.java\n[source-patterns] javadoc-style license header: lucene/misc/src/java/org/apache/lucene/uninverting/FieldCacheSanityChecker.java\n[source-patterns] javadoc-style license header: lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCache.java\n[source-patterns] javadoc-style license header: lucene/misc/src/test/org/apache/lucene/uninverting/TestFieldCacheSanityChecker.java\n[source-patterns] javadoc-style license header: lucene/queries/src/java/org/apache/lucene/queries/mlt/MoreLikeThis.java\n[source-patterns] javadoc-style license header: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParser.java\n[source-patterns] javadoc-style license header: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/parser/StandardSyntaxParserTokenManager.java\n[source-patterns] javadoc-style license header: lucene/queryparser/src/java/org/apache/lucene/queryparser/flexible/standard/processors/BooleanQuery2ModifierNodeProcessor.java\n[source-patterns] javadoc-style license header: lucene/suggest/src/java/org/apache/lucene/search/spell/NGramDistance.java\n[source-patterns] javadoc-style license header: lucene/test-framework/src/java/org/apache/lucene/codecs/bloom/TestBloomFilteredLucenePostings.java\n[source-patterns] javadoc-style license header: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/HeartBeater.java\n[source-patterns] javadoc-style license header: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrMapper.java\n[source-patterns] javadoc-style license header: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrOutputFormat.java\n[source-patterns] javadoc-style license header: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrRecordWriter.java\n[source-patterns] javadoc-style license header: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/SolrReducer.java\n[source-patterns] javadoc-style license header: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/Utils.java\n[source-patterns] javadoc-style license header: solr/contrib/map-reduce/src/java/org/apache/solr/hadoop/ZooKeeperInspector.java\n[source-patterns] javadoc-style license header: solr/contrib/morphlines-cell/src/java/org/apache/solr/morphlines/cell/SolrCellBuilder.java\n[source-patterns] javadoc-style license header: solr/contrib/morphlines-core/src/java/org/apache/solr/morphlines/solr/TokenizeTextBuilder.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/EarlyTerminatingCollector.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/EarlyTerminatingCollectorException.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/stats/CollectionStats.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/stats/LocalStatsCache.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/stats/LocalStatsSource.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/stats/StatsCache.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/stats/StatsSource.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/stats/StatsUtil.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/search/stats/TermStats.java\n[source-patterns] javadoc-style license header: solr/core/src/java/org/apache/solr/store/blockcache/CachedIndexOutput.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/TestDocumentBuilder.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/cloud/CdcrReplicationHandlerTest.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/search/TestElisionMultitermQuery.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/search/stats/TestBaseStatsCache.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/search/stats/TestDefaultStatsCache.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/search/stats/TestExactSharedStatsCache.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/search/stats/TestExactStatsCache.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/search/stats/TestLRUStatsCache.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/update/AddBlockUpdateTest.java\n[source-patterns] javadoc-style license header: solr/core/src/test/org/apache/solr/util/PrimUtilsTest.java\n\nBUILD FAILED\nC:\\Users\\Uwe Schindler\\Projects\\lucene\\trunk-lusolr1\\build.xml:130: 108 source files contain @author javadoc tags, tabs, svn keywords, javadoc-style licenses, or nocommits.\n\nTotal time: 21 seconds\n\n\n\nThis task is about 2 times faster than the old one. "
        },
        {
            "id": "comment-14681780",
            "author": "Robert Muir",
            "date": "2015-08-11T13:14:04+0000",
            "content": "+1, this is great "
        },
        {
            "id": "comment-14692339",
            "author": "Uwe Schindler",
            "date": "2015-08-11T22:06:57+0000",
            "content": "Patch fixing bugs and improving the scanner (it had false positives before). For the license checking it is bit more complex and implemented in separate code path: First a \"javadoc\" is detected and then if it contains \"Licensed to\" it is detected as header.\n\nFor now I left out js and xml files, a lot of them contain tabs. We should fix this, too. Any comments on this? "
        },
        {
            "id": "comment-14692345",
            "author": "Uwe Schindler",
            "date": "2015-08-11T22:09:25+0000",
            "content": "I will commit and backport this now, because patch is quite large. "
        },
        {
            "id": "comment-14692355",
            "author": "ASF subversion and git services",
            "date": "2015-08-11T22:13:03+0000",
            "content": "Commit 1695380 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1695380 ]\n\nLUCENE-6732: Improve checker for invalid source patterns to also detect javadoc-style license headers. Use Groovy to implement the checks instead of plain Ant "
        },
        {
            "id": "comment-14692376",
            "author": "ASF subversion and git services",
            "date": "2015-08-11T22:22:49+0000",
            "content": "Commit 1695386 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695386 ]\n\nMerged revision(s) 1695380 from lucene/dev/trunk:\nLUCENE-6732: Improve checker for invalid source patterns to also detect javadoc-style license headers. Use Groovy to implement the checks instead of plain Ant "
        },
        {
            "id": "comment-14692381",
            "author": "Uwe Schindler",
            "date": "2015-08-11T22:23:59+0000",
            "content": "I leave this open to fix the JS and XML files in Solr. "
        },
        {
            "id": "comment-14692444",
            "author": "ASF subversion and git services",
            "date": "2015-08-11T23:00:42+0000",
            "content": "Commit 1695395 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1695395 ]\n\nLUCENE-6732: Remove tabs in JS and XML files "
        },
        {
            "id": "comment-14692452",
            "author": "ASF subversion and git services",
            "date": "2015-08-11T23:08:43+0000",
            "content": "Commit 1695401 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695401 ]\n\nMerged revision(s) 1695395 from lucene/dev/trunk:\nLUCENE-6732: Remove tabs in JS and XML files "
        },
        {
            "id": "comment-14692460",
            "author": "ASF subversion and git services",
            "date": "2015-08-11T23:15:22+0000",
            "content": "Commit 1695405 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1695405 ]\n\nLUCENE-6732: Remove tabs XSL files "
        },
        {
            "id": "comment-14692462",
            "author": "ASF subversion and git services",
            "date": "2015-08-11T23:16:59+0000",
            "content": "Commit 1695407 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695407 ]\n\nMerged revision(s) 1695405 from lucene/dev/trunk:\nLUCENE-6732: Remove tabs XSL files "
        },
        {
            "id": "comment-14693427",
            "author": "Uwe Schindler",
            "date": "2015-08-12T12:47:19+0000",
            "content": "I improved the checker. It now detects all licenses inside javadocs comments: it uses Apache RAT to do that  [which is loaded already].\n\nAnd I found more offenders! "
        },
        {
            "id": "comment-14693434",
            "author": "Uwe Schindler",
            "date": "2015-08-12T12:49:41+0000",
            "content": "Patch using Apache RAT to detect if a javadocs comment is a License:\n\n\tfirst it finds all javadocs comments via Regex (as before)\n\tinstead of just checking for \"Licensed to\" inside, it now passes the inner match of the previous to the Apache RAT license checker. If that detects a license it reports this as error.\n\n "
        },
        {
            "id": "comment-14693438",
            "author": "ASF subversion and git services",
            "date": "2015-08-12T12:50:42+0000",
            "content": "Commit 1695496 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1695496 ]\n\nLUCENE-6732: Improve javadoc-style license checker to use Apache RAT "
        },
        {
            "id": "comment-14693441",
            "author": "ASF subversion and git services",
            "date": "2015-08-12T12:52:25+0000",
            "content": "Commit 1695499 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695499 ]\n\nMerged revision(s) 1695496 from lucene/dev/trunk:\nLUCENE-6732: Improve javadoc-style license checker to use Apache RAT "
        },
        {
            "id": "comment-14693916",
            "author": "ASF subversion and git services",
            "date": "2015-08-12T17:43:10+0000",
            "content": "Commit 1695586 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1695586 ]\n\nLUCENE-6732: More filetypes to check "
        },
        {
            "id": "comment-14693919",
            "author": "ASF subversion and git services",
            "date": "2015-08-12T17:44:45+0000",
            "content": "Commit 1695587 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695587 ]\n\nMerged revision(s) 1695586 from lucene/dev/trunk:\nLUCENE-6732: More filetypes to check "
        },
        {
            "id": "comment-14694980",
            "author": "ASF subversion and git services",
            "date": "2015-08-13T09:53:46+0000",
            "content": "Commit 1695669 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1695669 ]\n\nLUCENE-6732: Scan txt files in root folder, too. TODO: scan txt files everywhere "
        },
        {
            "id": "comment-14694985",
            "author": "ASF subversion and git services",
            "date": "2015-08-13T09:55:39+0000",
            "content": "Commit 1695670 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1695670 ]\n\nMerged revision(s) 1695669 from lucene/dev/trunk:\nLUCENE-6732: Scan txt files in root folder, too. TODO: scan txt files everywhere "
        },
        {
            "id": "comment-14695026",
            "author": "Uwe Schindler",
            "date": "2015-08-13T10:21:48+0000",
            "content": "I added some more txt files that caused smoketester to fail (because of the way how Solr's src.tgz contains the changes.html in docs/ folder).\n\nThe only missing filetype that is checked globally is txt, this causes headaches:\n\n\tsome resource or test files contains tabs. Maybe some of them can just be renamed (import files that are tab-separated values) could be renamed to *.tsv (the standard file ending for that)\n\tthere are also some stopwords files (or similar with tabs, we have to check those)\n\tsome Licenses in licenses/ folder have tabs. This is easy to fix.\n\n\n\nI keep this open until fix. "
        },
        {
            "id": "comment-15045700",
            "author": "Mikhail Khludnev",
            "date": "2015-12-07T20:51:05+0000",
            "content": "Got an observation. Something weird happen with one of my working copy files, the validation script failed with quite laconic:\n\njava.io.IOException: Input/output error\n\n\nThere is no a problem path, in exception. It's not a problem of the script, but just a lack of usability. Do you think it's worth to improve exception reporting in groovy script? I'm not familiar, but I can try. \nfor the reference the stack trace:\n\nCaused by: java.io.IOException: Input/output error\n\tat java.io.FileInputStream.readBytes(Native Method)\n\tat java.io.FileInputStream.read(FileInputStream.java:255)\n\tat sun.nio.cs.StreamDecoder.readBytes(StreamDecoder.java:284)\n\tat sun.nio.cs.StreamDecoder.implRead(StreamDecoder.java:326)\n\tat sun.nio.cs.StreamDecoder.read(StreamDecoder.java:178)\n\tat java.io.InputStreamReader.read(InputStreamReader.java:184)\n\tat java.io.BufferedReader.read1(BufferedReader.java:210)\n\tat java.io.BufferedReader.read(BufferedReader.java:286)\n\tat java.io.Reader.read(Reader.java:140)\n\tat org.codehaus.groovy.runtime.IOGroovyMethods.getText(IOGroovyMethods.java:884)\n\tat org.codehaus.groovy.runtime.ResourceGroovyMethods.getText(ResourceGroovyMethods.java:588)\n\tat org.codehaus.groovy.runtime.dgm$964.invoke(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite$PojoMetaMethodSiteNoUnwrapNoCoerce.invoke(PojoMetaMethodSite.java:274)\n\tat org.codehaus.groovy.runtime.callsite.PojoMetaMethodSite.call(PojoMetaMethodSite.java:56)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:125)\n\tat embedded_script_in__Users_mkhl_Documents_lucene_solr_https_5x_build_dot_xml$_run_closure3.doCall(embedded_script_in__Users_mkhl_Documents_lucene_solr_https_5x_build_dot_xml:60)\n\n  "
        },
        {
            "id": "comment-15045737",
            "author": "Uwe Schindler",
            "date": "2015-12-07T21:13:44+0000",
            "content": "This is a standard Java Exception. There is no problem with it. Ant or Java would report similar. You cannot really improve this. The operating system does not give more information. This is basic ant semantics of using FileScanner and opening files.\n\nThe only thing you can do is to log the filename with debug prio, so you can try with ant -verbose. Should I do this? "
        },
        {
            "id": "comment-15045743",
            "author": "Mike Drob",
            "date": "2015-12-07T21:16:41+0000",
            "content": "log the filename\n+1 "
        },
        {
            "id": "comment-15045746",
            "author": "Uwe Schindler",
            "date": "2015-12-07T21:17:57+0000",
            "content": "If you want to fix underlying issue open bug in Java bugtracker and request that File streams include file name in exception message.\n\nThe Groovy script is fine, so please leve it as is. Maybe add debug logging for investigation as said before. "
        },
        {
            "id": "comment-15045760",
            "author": "Uwe Schindler",
            "date": "2015-12-07T21:25:43+0000",
            "content": "Simple patch.\n\nThe output won't change, but if you get an error like this try: ant -verbose validate\n\nI will commit this later. The behaviour is now identical to the <copy/> task, hwich also prints all files when verbose. "
        },
        {
            "id": "comment-15045811",
            "author": "ASF subversion and git services",
            "date": "2015-12-07T21:50:45+0000",
            "content": "Commit 1718479 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1718479 ]\n\nLUCENE-6732: Improve logging, add verbose logging of filenames "
        },
        {
            "id": "comment-15045814",
            "author": "ASF subversion and git services",
            "date": "2015-12-07T21:51:41+0000",
            "content": "Commit 1718480 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1718480 ]\n\nMerged revision(s) 1718479 from lucene/dev/trunk:\nLUCENE-6732: Improve logging, add verbose logging of filenames "
        },
        {
            "id": "comment-15045816",
            "author": "Uwe Schindler",
            "date": "2015-12-07T21:52:08+0000",
            "content": "Fixed. Thanks Mikhail! "
        }
    ]
}