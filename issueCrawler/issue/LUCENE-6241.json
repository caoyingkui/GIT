{
    "id": "LUCENE-6241",
    "title": "don't filter subdirectories in listAll()",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [],
        "labels": "",
        "fix_versions": [
            "5.1",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Bug"
    },
    "description": "The issue is, today this means listAll() is always slow, sometimes MUCH slower, because it must do the fstat()-equivalent of each file to check if its a directory to filter it out.\n\nWhen i benchmarked this on a fast filesystem, doing all these filesystem metadata calls only makes listAll() 2.6x slower, but on a non-ssd, slower i/o, it can be more than 60x slower.\n\nLucene doesn't make subdirectories, so hiding these for abuse cases just makes real use cases slower.\n\nTo add insult to injury, most code (e.g. all of lucene except for where RAMDir copies from an FSDir) does not actually care if extraneous files are directories or not.\n\nFinally it sucks the name is listAll() when it is doing anything but that.\n\nI really hate to add a method here to deal with this abusive stuff, but I'd rather add isDirectory(String) for the rare code that wants to filter out, than just let stuff always be slow.",
    "attachments": {
        "LUCENE-6241.patch": "https://issues.apache.org/jira/secure/attachment/12698327/LUCENE-6241.patch",
        "LUCENE-6241-alternative.patch": "https://issues.apache.org/jira/secure/attachment/12698706/LUCENE-6241-alternative.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-14317667",
            "author": "Ryan Ernst",
            "date": "2015-02-12T06:09:09+0000",
            "content": "+1 "
        },
        {
            "id": "comment-14317693",
            "author": "Robert Muir",
            "date": "2015-02-12T06:36:08+0000",
            "content": "add missing ensureOpen. "
        },
        {
            "id": "comment-14317887",
            "author": "Michael McCandless",
            "date": "2015-02-12T09:33:06+0000",
            "content": "+1\n\nMust we add isDirectory?  Can't abusers do this themselves?  E.g. there is no way to make a sub directory in a RAMDirectory... "
        },
        {
            "id": "comment-14318184",
            "author": "Robert Muir",
            "date": "2015-02-12T13:28:55+0000",
            "content": "I'd love to, but how will ramdirs copy-ctor work?\n\nMaybe it doesnt need to take Directory 'other' and can take FSDirectory 'other' ? "
        },
        {
            "id": "comment-14318296",
            "author": "Michael McCandless",
            "date": "2015-02-12T14:48:48+0000",
            "content": "but how will ramdirs copy-ctor work?\n\nI think RAMDir's copy ctor shouldn't handle this abuse case?  If you are an abuser, you do your own copying to RAMDir ... "
        },
        {
            "id": "comment-14318316",
            "author": "Robert Muir",
            "date": "2015-02-12T15:00:52+0000",
            "content": "Well, or its copy filters by CODEC_PATTERN, so it only copies in lucene index files and not extraneous junk. Thats an alternative here too.\n\nBut yes, you get the problem, its only non-lucene usage and lucene in general does not care here, so i really hate adding any method to the Directory api. "
        },
        {
            "id": "comment-14318413",
            "author": "Robert Muir",
            "date": "2015-02-12T15:42:38+0000",
            "content": "Another option would be to change this signature from RAMDirectory(Directory other) to RAMDirectory(FSDirectory other). FSDirectory already has 'Path getDirectory()' so RAMDirectory could use this directly, to ignore subdirectories. "
        },
        {
            "id": "comment-14318420",
            "author": "Michael McCandless",
            "date": "2015-02-12T15:50:08+0000",
            "content": "Another option would be to change this signature from RAMDirectory(Directory other) to RAMDirectory(FSDirectory other). FSDirectory already has 'Path getDirectory()' so RAMDirectory could use this directly, to ignore subdirectories.\n\n+1 to this, or to simply disallow the abuse case to RAMDir's copy ctor.\n\nThis way we don't add APIs solely for abuse cases. "
        },
        {
            "id": "comment-14318423",
            "author": "Robert Muir",
            "date": "2015-02-12T15:52:25+0000",
            "content": "\n+1 to this, or to simply disallow the abuse case to RAMDir's copy ctor.\n\nWhat do you mean by disallow the abuse case? The user will get IOException if we don't do something, and the IOException will make it look like a lucene bug to them. "
        },
        {
            "id": "comment-14318431",
            "author": "Michael McCandless",
            "date": "2015-02-12T15:58:27+0000",
            "content": "The user will get IOException if we don't do something, and the IOException will make it look like a lucene bug to them.\n\nWell, I think that's OK?  The IOExc will specific abusing directory they had added to Lucene's index directory?  Plus I think we are talking about very few actual occurrences of this: it's abusers who also use RAMDir's copy ctor.\n\nMaybe we should simply remove RAMDir's copy ctor?  That method seems abusive/trappy to me too! "
        },
        {
            "id": "comment-14318434",
            "author": "Robert Muir",
            "date": "2015-02-12T16:00:28+0000",
            "content": "Just illustration: remove the isDirectory() call in my patch and run TestRAMDirectory, the exception would look like this:\n\n\njava.io.IOException: Is a directory: NIOFSIndexInput(path=\"/tmp/lucene.store.TestRAMDirectory F412F4510E9B7B4-001/testsubdir-001/subdir\")\n\tat __randomizedtesting.SeedInfo.seed([F412F4510E9B7B4:3E7CBDE940612694]:0)\n\tat org.apache.lucene.store.NIOFSDirectory$NIOFSIndexInput.readInternal(NIOFSDirectory.java:190)\n\tat org.apache.lucene.store.BufferedIndexInput.readBytes(BufferedIndexInput.java:160)\n\tat org.apache.lucene.store.BufferedIndexInput.readBytes(BufferedIndexInput.java:116)\n\tat org.apache.lucene.store.MockIndexInputWrapper.readBytes(MockIndexInputWrapper.java:140)\n\tat org.apache.lucene.store.DataOutput.copyBytes(DataOutput.java:275)\n\tat org.apache.lucene.store.Directory.copyFrom(Directory.java:156)\n\tat org.apache.lucene.store.RAMDirectory.<init>(RAMDirectory.java:102)\n\tat org.apache.lucene.store.RAMDirectory.<init>(RAMDirectory.java:96)\n\tat org.apache.lucene.store.TestRAMDirectory.testCopySubdir(TestRAMDirectory.java:78)\n\n\n\nIts not something we can easily \"upgrade\" to a better exception. "
        },
        {
            "id": "comment-14318443",
            "author": "Robert Muir",
            "date": "2015-02-12T16:08:28+0000",
            "content": "\nMaybe we should simply remove RAMDir's copy ctor? That method seems abusive/trappy to me too!\n\nWell, I think there is a real use case for this? Despite how bad it might perform, some people want to load their entire index into memory.\n\nI would greatly prefer if we had an option to mmap that called MappedByteBuffer.load() or something for these users, this one will even do the correct madvise() call and read one byte for each page and do this essentially as efficiently as the OS can. I think its a better solution for that use case.\n\nIn general, for this issue, I wanted to avoid controversies or larger changes like this, my problem is one with operations on Directory API not being transparent, I want to make some progress on this and I think they should map directly to what is happening on the filesystem. Thats easiest to understand and the least trappy.\n\n\tlistAll() should just list files, not readdir() + fstat()\n\trename() should just rename() and not rename() + fsync(dir)\n\tcreateOutput should just createOutput, not delete() + create()\n\n\n\nedit: i meant load() not force() "
        },
        {
            "id": "comment-14318448",
            "author": "Michael McCandless",
            "date": "2015-02-12T16:11:04+0000",
            "content": "OK then +1 to keep RAMDir's copy ctor, have it take FSDirectory, have it check itself for directories and skip them. "
        },
        {
            "id": "comment-14318471",
            "author": "Robert Muir",
            "date": "2015-02-12T16:21:37+0000",
            "content": "And for the record, the exception may change in future JDK versions. Its actually related to the fsync-directory issue... today you are allowed to open a directory as a file and you dont get exception until you try to read. "
        },
        {
            "id": "comment-14319959",
            "author": "Robert Muir",
            "date": "2015-02-13T11:13:42+0000",
            "content": "\nOK then +1 to keep RAMDir's copy ctor, have it take FSDirectory, have it check itself for directories and skip them.\n\nOK, well thats the current patch. Do you see any problems with it specifically? We can followup with some of the other ideas here and maybe clean this up in the future too, thats definitely worth the effort to me. "
        },
        {
            "id": "comment-14319989",
            "author": "Robert Muir",
            "date": "2015-02-13T12:09:56+0000",
            "content": "Here is the alternative FSDir patch. For lucene, this is fine.\n\nBut I am hesitant, because I think the ability to explicitly check for a subdirectory might be needed, even though its not needed by lucene. My main concern is honestly .DS_Store and things like that. In this case its not really an abuse case, but the user is a victim.\n\nOn the other hand, things needing to filter out trash can do this stuff cleanly already. For example lucene's replication module only replicates index files matching IndexFileNames.CODEC_PATTERN. This will also take care of windows thumbs.db or whatever too. So maybe this patch is fine, and this should be the recommended approach? "
        },
        {
            "id": "comment-14320077",
            "author": "Michael McCandless",
            "date": "2015-02-13T13:44:00+0000",
            "content": "+1 for the latest patch. "
        },
        {
            "id": "comment-14320419",
            "author": "ASF subversion and git services",
            "date": "2015-02-13T17:33:26+0000",
            "content": "Commit 1659621 from Robert Muir in branch 'dev/trunk'\n[ https://svn.apache.org/r1659621 ]\n\nLUCENE-6241: FSDirectory.listAll doesnt filter out subdirectories anymore "
        },
        {
            "id": "comment-14320450",
            "author": "Robert Muir",
            "date": "2015-02-13T17:52:27+0000",
            "content": "thanks Mike "
        },
        {
            "id": "comment-14320453",
            "author": "ASF subversion and git services",
            "date": "2015-02-13T17:54:24+0000",
            "content": "Commit 1659628 from Robert Muir in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1659628 ]\n\nLUCENE-6241: FSDirectory.listAll doesnt filter out subdirectories anymore "
        },
        {
            "id": "comment-14495389",
            "author": "Timothy Potter",
            "date": "2015-04-15T00:30:55+0000",
            "content": "Bulk close after 5.1 release "
        }
    ]
}