{
    "id": "LUCENE-6978",
    "title": "Make LuceneTestCase use language tags instead of parsing locales by hand",
    "details": {
        "resolution": "Fixed",
        "affect_versions": "None",
        "components": [
            "modules/test-framework"
        ],
        "labels": "",
        "fix_versions": [
            "5.5",
            "6.0"
        ],
        "priority": "Major",
        "status": "Closed",
        "type": "Improvement"
    },
    "description": "Since we are on Java 7, the JDK supports standardized language tags as identifiers for Locales. Previous versions of JDK were missing a constructor from Locale#toString() back to a locale, so we had our own, which was broken several times after the JDK changed their Locale internals.\n\nThis patch will do the following:\n\n\tWhen printing the reproduce line, it will use Locale#getLanguageTag(), so you can identify the locale in standardized form. Most notable change is (next to more flexibility around asian languages) the change away from undescores. So it prints \"en-US\", not \"en_US\".\n\tThe code that parses a locale uses Locale's Builder and sets the language tag. This will fail if the tag is invalid! A trap is Locale#forLanguageTag, because this one silently returns root locale if unparseable...\n\tThe random locale is choosen from all language tags, which are extracted from the JDK as a String[] array.\n\n\n\nI would also like to place Locale#forLanguageTag on the forbidden list and disallow directly calling Locale#toString(), the latter is legacy API (according to Java 7 Javadocs). This would fail code that calls toString() directly, e.g. when formatting stuff like \"my Locale: \" + locale. Of course we cannot catch all bad uses.",
    "attachments": {
        "LUCENE-6978-5x.patch": "https://issues.apache.org/jira/secure/attachment/12782635/LUCENE-6978-5x.patch",
        "LUCENE-6978.patch": "https://issues.apache.org/jira/secure/attachment/12782522/LUCENE-6978.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "id": "comment-15101731",
            "author": "Uwe Schindler",
            "date": "2016-01-15T12:59:05+0000",
            "content": "See LUCENE-6973 about the fact, why Locale.forLanguageTag() is broken and should be forbidden. "
        },
        {
            "id": "comment-15101735",
            "author": "Uwe Schindler",
            "date": "2016-01-15T13:01:06+0000",
            "content": "First patch with LTC changes only. I will now work on the forbidden stuff (where we may need to fix some other Lucene code parts which try to parse locales or print them).\n\nThis patch requires Java 8. We can backport (which I suggest), but the streams API need to be replaced by a more verbose list-sort-addSet-toArray sequence in a static block. "
        },
        {
            "id": "comment-15101739",
            "author": "Uwe Schindler",
            "date": "2016-01-15T13:05:15+0000",
            "content": "I discussed that with Robert Muir already, the sort and disticnt is done for those reasons:\n\n\tsorting is done to have reproduceable ordered list (random index)\n\tduplicate language tags should be filtered. The reason why we choose the locale from the language tag list is one limitation: the to/forLanguageTag will not round-trip (as the tags are normalized while parsing). So its better to have a list of tags instead of instances.\n\n "
        },
        {
            "id": "comment-15101744",
            "author": "Uwe Schindler",
            "date": "2016-01-15T13:08:35+0000",
            "content": "The list of language tags in Java 8 is: [ar, ar-AE, ar-BH, ar-DZ, ar-EG, ar-IQ, ar-JO, ar-KW, ar-LB, ar-LY, ar-MA, ar-OM, ar-QA, ar-SA, ar-SD, ar-SY, ar-TN, ar-YE, be, be-BY, bg, bg-BG, ca, ca-ES, cs, cs-CZ, da, da-DK, de, de-AT, de-CH, de-DE, de-GR, de-LU, el, el-CY, el-GR, en, en-AU, en-CA, en-GB, en-IE, en-IN, en-MT, en-NZ, en-PH, en-SG, en-US, en-ZA, es, es-AR, es-BO, es-CL, es-CO, es-CR, es-CU, es-DO, es-EC, es-ES, es-GT, es-HN, es-MX, es-NI, es-PA, es-PE, es-PR, es-PY, es-SV, es-US, es-UY, es-VE, et, et-EE, fi, fi-FI, fr, fr-BE, fr-CA, fr-CH, fr-FR, fr-LU, ga, ga-IE, he, he-IL, hi, hi-IN, hr, hr-HR, hu, hu-HU, id, id-ID, is, is-IS, it, it-CH, it-IT, ja, ja-JP, ja-JP-u-ca-japanese-x-lvariant-JP, ko, ko-KR, lt, lt-LT, lv, lv-LV, mk, mk-MK, ms, ms-MY, mt, mt-MT, nl, nl-BE, nl-NL, nn-NO, no, no-NO, pl, pl-PL, pt, pt-BR, pt-PT, ro, ro-RO, ru, ru-RU, sk, sk-SK, sl, sl-SI, sq, sq-AL, sr, sr-BA, sr-CS, sr-Latn, sr-Latn-BA, sr-Latn-ME, sr-Latn-RS, sr-ME, sr-RS, sv, sv-SE, th, th-TH, th-TH-u-nu-thai-x-lvariant-TH, tr, tr-TR, uk, uk-UA, und, vi, vi-VN, zh, zh-CN, zh-HK, zh-SG, zh-TW] "
        },
        {
            "id": "comment-15101752",
            "author": "Dawid Weiss",
            "date": "2016-01-15T13:16:17+0000",
            "content": "This is extracted from one particular JVM \u2013 is this going to be a problem if some of these are not available everywhere? "
        },
        {
            "id": "comment-15101753",
            "author": "Shai Erera",
            "date": "2016-01-15T13:19:00+0000",
            "content": "Patch looks good. And +1 for adding Locale.forLanguageTag() and Locale.toString() to the forbidden APIs. "
        },
        {
            "id": "comment-15101756",
            "author": "Dawid Weiss",
            "date": "2016-01-15T13:22:42+0000",
            "content": "Nevermind, looked at the patch, makes sense. "
        },
        {
            "id": "comment-15101764",
            "author": "Uwe Schindler",
            "date": "2016-01-15T13:33:26+0000",
            "content": "I just extracted the list for reference  Of course its taken what runtime supports.\n\nI also did some round-trip tests. With the current patch we are always safe, because we only rely on a list of language tags and choose one from those strings that are distinct and unique, so we only rely on the order String -> LocaleFromLanguageTag never vice versa. "
        },
        {
            "id": "comment-15101767",
            "author": "Robert Muir",
            "date": "2016-01-15T13:34:58+0000",
            "content": "+1 "
        },
        {
            "id": "comment-15101768",
            "author": "Uwe Schindler",
            "date": "2016-01-15T13:36:04+0000",
            "content": "One that does not round trip is a \"deprecated locale\": no_NO_NY, which is replaced by nn_NO, the old one is identical but does not compare equal. We are still fine. With the new code we really test all availabe ones and no risks. "
        },
        {
            "id": "comment-15101858",
            "author": "Uwe Schindler",
            "date": "2016-01-15T14:51:33+0000",
            "content": "Patch with adding forbiddenapis and fixes. In Solr I replaced 2 locale parsing parts to accept both (old and new BCP47) locale names. I added a SuppressForbidden for it.\n\nUnfortunately forbiddening Locale#toString() does not work always, because if you concat strings like \"string\" + locale it internally transforms that to new StringBuilder(\"string).append(locale) which calls toString on Object. So it can never be detected by forbidden.\n\nI will review other Locale usage and parsing later. "
        },
        {
            "id": "comment-15101963",
            "author": "Uwe Schindler",
            "date": "2016-01-15T15:56:43+0000",
            "content": "All tests pass. I think we can commit that for now to let it bake on trunk. "
        },
        {
            "id": "comment-15102317",
            "author": "Uwe Schindler",
            "date": "2016-01-15T19:09:54+0000",
            "content": "I found some more locale parsing by searching for constructors of Locale called (using Eclipse''s search for constructors).\n\nI fixed those. Tests are passing, I will commit later! "
        },
        {
            "id": "comment-15102607",
            "author": "ASF subversion and git services",
            "date": "2016-01-15T22:41:59+0000",
            "content": "Commit 1724891 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1724891 ]\n\nLUCENE-6978: Refactor several code places that lookup locales by string name to use BCP47 locale tag instead "
        },
        {
            "id": "comment-15102667",
            "author": "Uwe Schindler",
            "date": "2016-01-15T23:21:33+0000",
            "content": "Java 7 compliant patch. No other changes. "
        },
        {
            "id": "comment-15102680",
            "author": "ASF subversion and git services",
            "date": "2016-01-15T23:28:58+0000",
            "content": "Commit 1724893 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1724893 ]\n\nMerged revision(s) 1724891 from lucene/dev/trunk:\nLUCENE-6978: Refactor several code places that lookup locales by string name to use BCP47 locale tag instead "
        },
        {
            "id": "comment-15111409",
            "author": "ASF subversion and git services",
            "date": "2016-01-21T22:16:56+0000",
            "content": "Commit 1726118 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1726118 ]\n\nLUCENE-6978: Fix Morphlines locale parsing with empty string / null: use ROOT "
        },
        {
            "id": "comment-15111411",
            "author": "ASF subversion and git services",
            "date": "2016-01-21T22:18:19+0000",
            "content": "Commit 1726119 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1726119 ]\n\nMerged revision(s) 1726118 from lucene/dev/trunk:\nLUCENE-6978: Fix Morphlines locale parsing with empty string / null: use ROOT "
        },
        {
            "id": "comment-15111569",
            "author": "Uwe Schindler",
            "date": "2016-01-21T23:00:58+0000",
            "content": "Actually, the bug happened on Java 7 only: The empty root locale is not listed in Locale#getAvaialbelLocales in Java 7, but it is listed in Java 8 - ths is why i did not hit that issue and why I removed the code. The commit works around that (like it did before the changes here), by reverting the if-statement. "
        },
        {
            "id": "comment-15113020",
            "author": "Steve Rowe",
            "date": "2016-01-22T20:42:51+0000",
            "content": "My Jenkins found a reproducible locale-triggered DIH failure on branch_5x:\n\n\n  [junit4] Suite: org.apache.solr.handler.dataimport.TestVariableResolverEndToEnd\n[...]\n  [junit4]   2> 24391 T75 C8 oasc.SolrException.log ERROR Exception while processing: FIRST document : SolrInputDocument(fields: [select_keyword_s=SELECT, id=1]):org.apache.solr.handler.dataimport.DataImportHandlerException: Malformed / non-existent locale: nn_NO Processing Document # 1\n[...]\n   [junit4]   2> 24392 T75 C8 oasup.LogUpdateProcessorFactory$LogUpdateProcessor.finish [collection1]  webapp=null path=null params={synchronous=true&command=full-import&wt=xml&indent=true&clean=true&dataConfig=<dataConfig>+%0a<dataSource+name%3D\"hsqldb\"+driver%3D\"${dataimporter.request.dots.in.hsqldb.driver}\"+url%3D\"jdbc:hsqldb:mem:.\"+/>+%0a<document+name%3D\"TestEvaluators\">+%0a<entity+name%3D\"FIRST\"+processor%3D\"SqlEntityProcessor\"+dataSource%3D\"hsqldb\"++query%3D\"select++1+as+id,++'SELECT'+as+SELECT_KEYWORD,++CURRENT_TIMESTAMP+as+FIRST_TS+from+DUAL+\"+>%0a++<field+column%3D\"SELECT_KEYWORD\"+name%3D\"select_keyword_s\"+/>+%0a++<entity+name%3D\"SECOND\"+processor%3D\"SqlEntityProcessor\"+dataSource%3D\"hsqldb\"+transformer%3D\"TemplateTransformer\"++++query%3D\"${dataimporter.functions.encodeUrl(FIRST.SELECT_KEYWORD)}++1+as+SORT,++CURRENT_TIMESTAMP+as+SECOND_TS,++'${dataimporter.functions.formatDate(FIRST.FIRST_TS,+'yyyy',+'nn_NO')}'+as+SECOND1_S,+++'PORK'+AS+MEAT,++'GRILL'+AS+METHOD,++'ROUND'+AS+CUTS,++'BEEF_CUTS'+AS+WHATKIND+from+DUAL+WHERE+1%3D${FIRST.ID}+UNION+${dataimporter.functions.encodeUrl(FIRST.SELECT_KEYWORD)}++2+as+SORT,++CURRENT_TIMESTAMP+as+SECOND_TS,++'${dataimporter.functions.formatDate(FIRST.FIRST_TS,+'yyyy',+'nn_NO')}'+as+SECOND1_S,+++'FISH'+AS+MEAT,++'FRY'+AS+METHOD,++'SIRLOIN'+AS+CUTS,++'BEEF_CUTS'+AS+WHATKIND+from+DUAL+WHERE+1%3D${FIRST.ID}+ORDER+BY+SORT+\">%0a+++<field+column%3D\"SECOND_S\"+name%3D\"second_s\"+/>+%0a+++<field+column%3D\"SECOND1_S\"+name%3D\"second1_s\"+/>+%0a+++<field+column%3D\"second2_s\"+template%3D\"${dataimporter.functions.formatDate(SECOND.SECOND_TS,+'yyyy',+'nn_NO')}\"+/>+%0a+++<field+column%3D\"second3_s\"+template%3D\"${dih.functions.formatDate(SECOND.SECOND_TS,+'yyyy',+'nn_NO')}\"+/>+%0a+++<field+column%3D\"METHOD\"+name%3D\"${SECOND.MEAT}_s\"/>%0a+++<field+column%3D\"CUTS\"+name%3D\"${SECOND.WHATKIND}_mult_s\"/>%0a++</entity>%0a</entity>%0a</document>+%0a</dataConfig>+%0a&commit=true}{deleteByQuery=*:*} 0 9\n   [junit4]   2> 24393 T75 C8 oasc.SolrException.log ERROR Full Import failed:java.lang.RuntimeException: java.lang.RuntimeException: org.apache.solr.handler.dataimport.DataImportHandlerException: Malformed / non-existent locale: nn_NO Processing Document # 1\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DocBuilder.execute(DocBuilder.java:271)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DataImporter.doFullImport(DataImporter.java:417)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DataImporter.runCmd(DataImporter.java:481)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DataImportHandler.handleRequestBody(DataImportHandler.java:200)\n   [junit4]   2> \t\tat org.apache.solr.handler.RequestHandlerBase.handleRequest(RequestHandlerBase.java:156)\n   [junit4]   2> \t\tat org.apache.solr.core.SolrCore.execute(SolrCore.java:2083)\n   [junit4]   2> \t\tat org.apache.solr.util.TestHarness.query(TestHarness.java:311)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.TestVariableResolverEndToEnd.test(TestVariableResolverEndToEnd.java:40)\n[...]\n   [junit4]   2> \tCaused by: java.lang.RuntimeException: org.apache.solr.handler.dataimport.DataImportHandlerException: Malformed / non-existent locale: nn_NO Processing Document # 1\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:417)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DocBuilder.doFullDump(DocBuilder.java:330)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DocBuilder.execute(DocBuilder.java:233)\n   [junit4]   2> \t\t... 46 more\n   [junit4]   2> \tCaused by: org.apache.solr.handler.dataimport.DataImportHandlerException: Malformed / non-existent locale: nn_NO Processing Document # 1\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DateFormatEvaluator.evaluate(DateFormatEvaluator.java:100)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.VariableResolver.resolveEvaluator(VariableResolver.java:136)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.VariableResolver.resolve(VariableResolver.java:100)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.VariableResolver.replaceTokens(VariableResolver.java:155)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.ContextImpl.replaceTokens(ContextImpl.java:257)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.SqlEntityProcessor.nextRow(SqlEntityProcessor.java:73)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.EntityProcessorWrapper.nextRow(EntityProcessorWrapper.java:244)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:476)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:515)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DocBuilder.buildDocument(DocBuilder.java:415)\n   [junit4]   2> \t\t... 48 more\n   [junit4]   2> \tCaused by: java.util.IllformedLocaleException: Invalid subtag: nn_NO [at index 0]\n   [junit4]   2> \t\tat java.util.Locale$Builder.setLanguageTag(Locale.java:2311)\n   [junit4]   2> \t\tat org.apache.solr.handler.dataimport.DateFormatEvaluator.evaluate(DateFormatEvaluator.java:98)\n   [junit4]   2> \t\t... 57 more\n   [junit4]   2> \t\n[...]\n   [junit4]   2> NOTE: reproduce with: ant test  -Dtestcase=TestVariableResolverEndToEnd -Dtests.method=test -Dtests.seed=E764DCBE41663305 -Dtests.slow=true -Dtests.linedocsfile=/home/jenkins/lucene-data/enwiki.random.lines.txt -Dtests.locale=nn-NO -Dtests.timezone=America/Mendoza -Dtests.asserts=true -Dtests.file.encoding=US-ASCII\n   [junit4] FAILURE 0.04s J2 | TestVariableResolverEndToEnd.test <<<\n   [junit4]    > Throwable #1: junit.framework.AssertionFailedError\n   [junit4]    > \tat __randomizedtesting.SeedInfo.seed([E764DCBE41663305:6F30E364EF9A5EFD]:0)\n   [junit4]    > \tat junit.framework.Assert.fail(Assert.java:48)\n   [junit4]    > \tat junit.framework.Assert.assertTrue(Assert.java:20)\n   [junit4]    > \tat junit.framework.Assert.assertTrue(Assert.java:27)\n   [junit4]    > \tat org.apache.solr.handler.dataimport.TestVariableResolverEndToEnd.test(TestVariableResolverEndToEnd.java:47)\n   [junit4]    > \tat java.lang.Thread.run(Thread.java:745)\n[...]  \n   [junit4]   2> NOTE: test params are: codec=Asserting(Lucene54): {}, docValues:{}, sim=DefaultSimilarity, locale=nn-NO, timezone=America/Mendoza\n   [junit4]   2> NOTE: Linux 4.1.0-custom2-amd64 amd64/Oracle Corporation 1.7.0_79 (64-bit)/cpus=16,threads=1,free=493820680,total=514326528\n   [junit4]   2> NOTE: All tests run in this JVM: [TestVariableResolver, TestSimplePropertiesWriter, TestURLDataSource, TestDocBuilder2, TestSqlEntityProcessorDelta, TestDateFormatTransformer, TestRegexTransformer, TestClobTransformer, TestDataConfig, TestNestedChildren, TestXPathEntityProcessor, TestFileListWithLineEntityProcessor, TestVariableResolverEndToEnd]\n   [junit4] Completed [25/38 (1!)] on J2 in 0.60s, 1 test, 1 failure <<< FAILURES!\n\n "
        },
        {
            "id": "comment-15113036",
            "author": "Uwe Schindler",
            "date": "2016-01-22T20:50:40+0000",
            "content": "I know why this happens. Will fix later. It is only partly related to this Issue.\n\nD)}++2+as+SORT,+CURRENT_TIMESTAMP+as+SECOND_TS,'${dataimporter.functions.formatDate(FIRST.FIRST_TS,'yyyy','nn_NO')}'+as+SECOND1_S,+'FISH'+AS+MEAT,'FRY'+AS+METHOD,'SIRLOIN'+AS+CUTS,'BEEF_CUTS'+AS+WHATKIND+from+DUAL+WHERE+1%3D${FIRST.ID}+ORDER+BY+SORT\">%0a++<field+column%3D\"SECOND_S\"+name%3D\"second_s\"/>%0a+<field+column%3D\"SECOND1_S\"+name%3D\"second1_s\"/>%0a+<field+column%3D\"second2_s\"+template%3D\"${dataimporter.functions.formatDate(SECOND.SECOND_TS,'yyyy','nn_NO')}\"/>%0a+<field+column%3D\"second3_s\"+template%3D\"${dih.functions.formatDate(SECOND.SECOND_TS,'yyyy','nn_NO')}\"/>%0a+<field+column%3D\"METHOD\"+name%3D\"${SECOND.MEAT}_s\"/>%0a+<field+column%3D\"CUTS\"+name%3D\"${SECOND.WHATKIND}_mult_s\"/>%0a</entity>%0a</entity>%0a</document>%0a</dataConfig>+%0a&commit=true}\n{deleteByQuery=*:*}\n\n\u2013\nUwe Schindler\nH.-H.-Meier-Allee 63, 28213 Bremen\nhttp://www.thetaphi.de "
        },
        {
            "id": "comment-15113067",
            "author": "ASF subversion and git services",
            "date": "2016-01-22T21:05:42+0000",
            "content": "Commit 1726311 from Uwe Schindler in branch 'dev/trunk'\n[ https://svn.apache.org/r1726311 ]\n\nLUCENE-6978: Fix usage of Locale#toString in DIH "
        },
        {
            "id": "comment-15113093",
            "author": "ASF subversion and git services",
            "date": "2016-01-22T21:16:20+0000",
            "content": "Commit 1726313 from Uwe Schindler in branch 'dev/branches/branch_5x'\n[ https://svn.apache.org/r1726313 ]\n\nMerged revision(s) 1726311 from lucene/dev/trunk:\nLUCENE-6978: Fix usage of Locale#toString in DIH "
        },
        {
            "id": "comment-15113110",
            "author": "Uwe Schindler",
            "date": "2016-01-22T21:23:59+0000",
            "content": "Issue should be fixed now. The problem is the non-always-working forbidden API Locale.toString(). The DIH test cases used string concat with Locale.getDefault(). This should work in most cases, but \"nn-NO\" is a special case. This Locale only exists in the list of available locales with a different (outdated) name, so the backwards-compatibility layer does not catch it.\n\nThe problem is generally: We should remove support for the \"old\" and no longer supported by Java Locale syntax in DIH and morphlines. But this would be separate issue for 6.0 only.\n\nThanks Steve Rowe for reporting this! "
        }
    ]
}