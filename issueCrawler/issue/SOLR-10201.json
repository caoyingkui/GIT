{
    "id": "SOLR-10201",
    "title": "Admin UI: Add Collection \"creates collection\", \"Connection to Solr lost\", when replicationFactor>1",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "Admin UI"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "6.2",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "\"Add Collection\" fails miserably when replicationFactor >1.\n\nThere must be a better way to handle the request we are making through JS.\n\nPF screenshot.",
    "attachments": {
        "SOLR-10201.patch": "https://issues.apache.org/jira/secure/attachment/12854666/SOLR-10201.patch",
        "screenshot-1.png": "https://issues.apache.org/jira/secure/attachment/12854456/screenshot-1.png"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2017-02-24T13:30:38+0000",
            "content": "This is generally due to the timeout. If a request takes longer than the timeout, it is assumed to imply that the server is down, which for long running requests isn't necessarily the case.\n\nIt would be great to add an option for certain HTTP requests to say \"this may take a long time, don't set a timeout as you would normally\". ",
            "author": "Upayavira",
            "id": "comment-15882667"
        },
        {
            "date": "2017-02-24T15:43:05+0000",
            "content": "Upayavira, thank you for the clarification. \n\nI understood that point, I was trying to add a button for SPLITSHARD and was running into \"connection loss\" every time I press the button. This is a piece of code here;\n\n$scope.deleteReplica = function(replica) {\n        Collections.deleteReplica({collection: replica.collection, shard:replica.shard, replica:replica.name}, function(data) {\n          replica.deleted = true;\n          $timeout(function() {\n            $scope.refresh();\n          }, 2000);\n        });\n      }\n\n\nAfter 2000ms, refresh the page. I went deeper into dev-console on Chrome, was not able to find where we are setting out timeout? or 2sec is the timeout? or it has nothing to do with the JS call and timeouts are API specific? ",
            "author": "Amrit Sarkar",
            "id": "comment-15882909"
        },
        {
            "date": "2017-02-24T16:01:35+0000",
            "content": "The timeout is set for all components. See js/angular/app.js. see .factory('httpInterceptor'). That's where the timeout is set.\n\nAlso note, in that same method, doNotIntercept. This is an example of how an caller can signal a specific behaviour to the interceptor. So, you could have a doNotTimeout option that simply avoids setting the \"connectionStatusInactive\" timeout. ",
            "author": "Upayavira",
            "id": "comment-15882965"
        },
        {
            "date": "2017-02-24T16:29:30+0000",
            "content": "Got it, thanks! \n\nHTTP requests take more/long time when there are more than one node is involved in heavy action (create directories, copying configs to ZK, copy data over nodes). AddCollection and SplitShard are definitely the two of them. Should we set doNotTimeout for AddCollection, and give the user a boolean option for the same? or we set it at our end, in the JS api call? ",
            "author": "Amrit Sarkar",
            "id": "comment-15883020"
        },
        {
            "date": "2017-02-24T17:09:47+0000",
            "content": "My question is whether heavyweight operations like SPLITSHARD should even try to be synchronous from the UI. Any timeout will be wrong for user N+1.\n\nWould it make more sense to always make it async and provide some sort of \"check status\" button? Or even let the user say whether it should be sync or async with perhaps a timeout they could specify for the op? I mention this last just for discussion, frankly I'd be fine with not giving them a choice; firing it async and providing a \"check progress\" button. It'd be cool if we had a progress bar, but only if it's easy.\n\nFWIW, mostly random musings. ",
            "author": "Erick Erickson",
            "id": "comment-15883117"
        },
        {
            "date": "2017-02-24T17:18:48+0000",
            "content": "Amrit Sarkar look at places where the doNotIntercept is set, and do the same. It seems it is set in the services, in services.js, so you could set it for certain tasks.\n\nErick Erickson JS is inherently async anyway so you could have a \"request submitted\" and a \"request complete\" feedback without any substantial change in the code. To add a 'check status' button would require the backend calls to be async, which would be considerably more work, if they aren't async already. ",
            "author": "Upayavira",
            "id": "comment-15883133"
        },
        {
            "date": "2017-02-24T17:40:31+0000",
            "content": "Erick Erickson Upayavira for async calls we already have this option: https://cwiki.apache.org/confluence/display/solr/Collections+API#CollectionsAPI-AsynchronousCalls, One new parameter to the heavyweight apis and we can fetch 'check status' content from zk too.\n\nI will give it a shot, incorporate async=true for both AddCollection and SplitShard http requests and try to incorporate a small dialog box displaying their status. Thanks. ",
            "author": "Amrit Sarkar",
            "id": "comment-15883168"
        },
        {
            "date": "2017-02-25T15:46:26+0000",
            "content": "Erick Erickson Upayavira\n\nSOLR-10201.patch uploaded introducing collections.js::asyncRequestStatus, incorporated to collections.js::addCollection.\n\nIn this patch:\n\n\tmodified:   solr/webapp/web/js/angular/controllers/collections.js\n\tmodified:   solr/webapp/web/js/angular/services.js\n\n\nHandled success for addCollection async call, need to check where to display fails, unresponsiveness etc.\nPerformance hit: taking more time than sync call (approx 1-3 sec on local machine) to display the new collection added.\n\nTo do:\n1. New display box for success/failure/unresponsiveness or stick with the red colored error we receive on the top?\n2. Progress bar for running calls.\n3. Add SPLITSHARD button along the shard name, as we now have async calls fn for collections api, open new jira for the same?\n4. DELETESHARD button: SOLR-10146\n\nLooking forward to the feedback. ",
            "author": "Amrit Sarkar",
            "id": "comment-15884287"
        },
        {
            "date": "2017-02-27T16:56:48+0000",
            "content": "Created new jira: SOLR-10209 to track the developments, suggestions and feedbacks. Thank you. ",
            "author": "Amrit Sarkar",
            "id": "comment-15886112"
        },
        {
            "date": "2017-02-28T14:01:25+0000",
            "content": "Amrit Sarkar Will this cover SOLR-10211 cases? Should it be connected here. ",
            "author": "Tomasz Czarnecki",
            "id": "comment-15888062"
        },
        {
            "date": "2017-02-28T14:06:24+0000",
            "content": "Tomasz Czarnecki Yes! We can link the issue to SOLR-10209 instead. We are tracking all the developments on that jira. ",
            "author": "Amrit Sarkar",
            "id": "comment-15888072"
        }
    ]
}