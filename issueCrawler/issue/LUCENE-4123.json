{
    "id": "LUCENE-4123",
    "title": "Add CachingRAMDirectory",
    "details": {
        "labels": "",
        "priority": "Major",
        "components": [
            "core/store"
        ],
        "type": "Bug",
        "fix_versions": [],
        "affect_versions": "None",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "The directory is very simple and useful if you have an index that you\nknow fully fits into available RAM.  You could also use FileSwitchDir if\nyou want to leave some files (eg stored fields or term vectors) on disk.\n\nIt wraps any other Directory and delegates all writing (IndexOutput) to\nit, but for reading (IndexInput), it allocates a single byte[] and fully\nreads the file in and then serves requests off that single byte[].  It's\nmore GC friendly than RAMDir since it only allocates a single array per\nfile.\n\nIt has a few nocommits still, but all tests pass if I wrap the delegate\ninside MockDirectoryWrapper using this.\n\nI tested with 1M Wikipedia english index (would like to test w/ 10M docs\nbut I don't have enough RAM...); it seems to give a nice speedup:\n\n\n                Task    QPS base StdDev base  QPS cachedStdDev cached      Pct diff\n             Respell      197.00        7.27      203.19        8.17   -4% -   11%\n            PKLookup      121.12        2.80      125.46        3.20   -1% -    8%\n              Fuzzy2       66.62        2.62       69.91        2.85   -3% -   13%\n              Fuzzy1      206.20        6.47      222.21        6.52    1% -   14%\n       TermGroup100K      160.14        6.62      175.71        3.79    3% -   16%\n              Phrase       34.85        0.40       38.75        0.61    8% -   14%\n      TermBGroup100K      363.75       15.74      406.98       13.23    3% -   20%\n            SpanNear       53.08        1.11       59.53        2.94    4% -   20%\n    TermBGroup100K1P      222.53        9.78      252.86        5.96    6% -   21%\n        SloppyPhrase       70.36        2.05       79.95        4.48    4% -   23%\n            Wildcard      238.10        4.29      272.78        4.97   10% -   18%\n           OrHighMed      123.49        4.85      149.32        4.66   12% -   29%\n             Prefix3      288.46        8.10      350.40        5.38   16% -   26%\n          OrHighHigh       76.46        3.27       93.13        2.96   13% -   31%\n              IntNRQ       92.25        2.12      113.47        5.74   14% -   32%\n                Term      757.12       39.03      958.62       22.68   17% -   36%\n         AndHighHigh      103.03        4.48      133.89        3.76   21% -   39%\n          AndHighMed      376.36       16.58      493.99       10.00   23% -   40%",
    "attachments": {
        "LUCENE-4123.patch": "https://issues.apache.org/jira/secure/attachment/12531413/LUCENE-4123.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2012-06-08T16:50:28+0000",
            "content": "I tested with 1M Wikipedia english index (would like to test w/ 10M docs\nbut I don't have enough RAM...); it seems to give a nice speedup:\n\n#fail!  ",
            "author": "Simon Willnauer",
            "id": "comment-13291857"
        },
        {
            "date": "2012-06-08T16:55:44+0000",
            "content": "I dont think it buys anything to code dup the readVint/vlong here. it should be compiled to the same code. e.g. mmapdir doesnt do this. ",
            "author": "Robert Muir",
            "id": "comment-13291860"
        },
        {
            "date": "2012-06-08T17:57:37+0000",
            "content": "Results for 5M doc index:\n\n\n                Task    QPS base StdDev base  QPS cachedStdDev cached      Pct diff\n             Respell      104.06        7.63      108.59        7.55   -9% -   20%\n         TermGroup1M       57.94        1.59       60.70        0.30    1% -    8%\n        TermBGroup1M      103.28        2.54      108.51        2.54    0% -   10%\n              Fuzzy2       43.07        2.96       45.32        3.06   -8% -   20%\n              Fuzzy1       72.64        4.73       76.92        4.38   -6% -   19%\n      TermBGroup1M1P       90.14        3.03       95.95        3.81   -1% -   14%\n              IntNRQ       16.01        0.95       17.17        0.33    0% -   16%\n            PKLookup       86.21        2.51       92.55        2.59    1% -   13%\n            Wildcard       65.51        3.13       71.00        1.45    1% -   16%\n           OrHighMed       21.64        1.83       23.56        1.24   -4% -   25%\n             Prefix3      105.33        4.94      114.75        2.46    1% -   16%\n          OrHighHigh       17.39        1.45       18.97        0.95   -4% -   24%\n         AndHighHigh       30.05        1.14       33.42        0.88    4% -   18%\n                Term      243.13        9.03      273.92        8.26    5% -   20%\n        SloppyPhrase       15.80        0.28       17.84        0.78    6% -   19%\n            SpanNear       10.52        0.14       11.97        0.25    9% -   17%\n          AndHighMed      117.60        3.54      135.91        2.49   10% -   21%\n              Phrase       20.15        0.78       24.22        0.26   14% -   26%\n\n ",
            "author": "Michael McCandless",
            "id": "comment-13291884"
        },
        {
            "date": "2012-06-08T17:58:51+0000",
            "content": "I dont think it buys anything to code dup the readVint/vlong here. it should be compiled to the same code. e.g. mmapdir doesnt do this.\n\nI think you're right!  Here are the results w/ the code dup removed (same static seed as previous 5M doc results):\n\n\n                Task    QPS base StdDev base  QPS cachedStdDev cached      Pct diff\n              IntNRQ       16.36        0.86       16.92        0.75   -6% -   14%\n      TermBGroup1M1P       91.71        3.03       95.07        3.94   -3% -   11%\n         TermGroup1M       58.14        1.00       60.38        1.53    0% -    8%\n        TermBGroup1M      103.11        1.76      108.14        2.63    0% -    9%\n             Prefix3      108.83        0.97      115.05        2.89    2% -    9%\n            Wildcard       67.27        0.72       71.22        1.71    2% -    9%\n             Respell      102.29        7.78      109.08        7.22   -7% -   23%\n              Fuzzy2       42.46        2.95       45.51        3.31   -7% -   23%\n              Fuzzy1       72.46        3.55       77.96        4.51   -3% -   19%\n                Term      247.45       17.73      268.17       12.28   -3% -   22%\n           OrHighMed       22.38        1.19       24.47        1.64   -3% -   23%\n          OrHighHigh       18.01        0.92       19.71        1.20   -2% -   22%\n         AndHighHigh       30.79        0.35       33.80        0.37    7% -   12%\n            PKLookup       84.71        2.40       93.95        2.32    5% -   16%\n            SpanNear       10.54        0.13       12.02        0.13   11% -   16%\n          AndHighMed      119.18        1.05      136.64        1.80   12% -   17%\n        SloppyPhrase       15.50        0.15       18.26        0.30   14% -   20%\n              Phrase       20.64        0.12       24.94        0.48   17% -   23%\n\n\n\nSo I'll remove the code dup. ",
            "author": "Michael McCandless",
            "id": "comment-13291886"
        },
        {
            "date": "2012-06-30T08:38:32+0000",
            "content": "You should make the II correctly throw IOExceptions like MMap does, so catch the AIOOBE and rethrow as EOFException (just copy the code). This does not have any speed effect. Otherwise some tests will definitely fail. ",
            "author": "Uwe Schindler",
            "id": "comment-13404429"
        },
        {
            "date": "2012-06-30T11:09:07+0000",
            "content": "When thinking more about the patch:\nCan we make this IndexInput impl extend ByteArrayDataInput somehow? I would also like to fix ByteArrayDataInput to correctly rethrow AIOOBE and remove the vint methods. We already did tests with FSTs that showed that the code duplication is not helpful. ",
            "author": "Uwe Schindler",
            "id": "comment-13404452"
        },
        {
            "date": "2012-07-01T15:21:27+0000",
            "content": "You should make the II correctly throw IOExceptions like MMap does, so catch the AIOOBE and rethrow as EOFException (just copy the code).\n\n+1.  Are we sure the catch + rethrow adds no cost?\n\nThough, I think tests don't actually fail as is, because I intentionally skip caching segments_N.  Probably we should improve that to skip any file that's opened with readOnce=true.\n\nCan we make this IndexInput impl extend ByteArrayDataInput somehow?\n\n+1\n\nI won't have time for this any time soon so if you want to work on it Uwe feel free! ",
            "author": "Michael McCandless",
            "id": "comment-13404742"
        },
        {
            "date": "2012-07-01T15:21:28+0000",
            "content": "You should make the II correctly throw IOExceptions like MMap does, so catch the AIOOBE and rethrow as EOFException (just copy the code).\n\n+1.  Are we sure the catch + rethrow adds no cost?\n\nThough, I think tests don't actually fail as is, because I intentionally skip caching segments_N.  Probably we should improve that to skip any file that's opened with readOnce=true.\n\nCan we make this IndexInput impl extend ByteArrayDataInput somehow?\n\n+1\n\nI won't have time for this any time soon so if you want to work on it Uwe feel free! ",
            "author": "Michael McCandless",
            "id": "comment-13404743"
        },
        {
            "date": "2012-07-01T15:38:07+0000",
            "content": "Are we sure the catch + rethrow adds no cost?\n\nYes! It is definitely also less work for hotspot than asserts \n\nIn general, throwing exceptions instead of if statements is used because of this. The exception matrix is in the metadata of a method and just defines the goto statements in the exceptional case. If you dont catch exception, this matrix only contains the bubble-up entry, otherwise the jvm goes to our bytecode that simply rethrows. this rethrowing is seldom, so overhead bywrapping the inner exception is neglectible.\n\nExceptions for array indexes are implemented by traps on most processors, so in the exceptional case (AIOOBE) is not happening it does not exist.\n\nI won't have time for this any time soon so if you want to work on it Uwe feel free!\n\nI have some time. The RAMDir issue is also open (it should also use index exceptions instead of if statements), so can look into it next week. ",
            "author": "Uwe Schindler",
            "id": "comment-13404747"
        },
        {
            "date": "2012-07-01T23:00:15+0000",
            "content": "OK thanks Uwe! ",
            "author": "Michael McCandless",
            "id": "comment-13404856"
        },
        {
            "date": "2012-09-05T15:38:03+0000",
            "content": "Besides Uwe's ideas for improvements, is this Directory operable? I.e., if you chose to commit what you have accomplished so far, do tests fail? Is it safe to use?\n\nI'm thinking \"progress, not perfection\" \u2013 we can always introduce improvements later. ",
            "author": "Shai Erera",
            "id": "comment-13448829"
        },
        {
            "date": "2012-09-05T16:00:44+0000",
            "content": "I believe it is safe ... eg all tests pass if I wrap MDW's delegate w/ this in newDirectory ...\n\nI'll update the patch w/ Uwe and Robert's suggestions ... ",
            "author": "Michael McCandless",
            "id": "comment-13448842"
        },
        {
            "date": "2012-09-05T16:18:46+0000",
            "content": "New patch, catching AIOOBE and throwing EOFException, and removing the specialized impls.\n\nI moved it to core temporarily to make it easier to test (add -Dtests.directory=CachingRAMDirectory).  I'll move it back to misc/ before committing ... ",
            "author": "Michael McCandless",
            "id": "comment-13448857"
        },
        {
            "date": "2012-09-05T16:35:10+0000",
            "content": "looks good... i dont really like that close() is a no-op and that seek() has no checks (since its deferred, if you seek somewhere negative you wont know until later).\n\nyou could probably fix both of these, e.g. keep the byte[] final but let close() turn set the position negative, catch NegativeArray and throw ACE.\nthen just throw IAE on seek if the incoming long is negative at least, since you reserve it to mean closed.\n\nI also don't like that its a delegator.\n\nshould the underlying read check for BufferedII and pass useBuffer=false?\n\n ",
            "author": "Robert Muir",
            "id": "comment-13448870"
        },
        {
            "date": "2012-09-05T16:57:16+0000",
            "content": "also readBytes should not catch ArrayIndexOutOfBoundsException. it must be the more general IndexOutOfBoundsException. ",
            "author": "Robert Muir",
            "id": "comment-13448884"
        },
        {
            "date": "2012-09-05T17:38:00+0000",
            "content": "Thanks Robert!  That's awesome feedback ... new patch.\n\nI also added a check in SimpleFSIndexInput.clone() to throw ACE if it was closed already. ",
            "author": "Michael McCandless",
            "id": "comment-13448911"
        },
        {
            "date": "2012-09-05T20:58:36+0000",
            "content": "New patch, also overriding createSlicer so that opening CFS files is more efficient.  But this resulted in a new nocommit: how to [efficiently] enforce the slice length so you get EOFE if you try to read beyond your slice ...\n\nTests pass. ",
            "author": "Michael McCandless",
            "id": "comment-13449127"
        },
        {
            "date": "2012-09-05T22:44:09+0000",
            "content": "Mike,\nI am not sure if we really need that directory. With my changes in LUCENE-3659 we can handle that easily (also for files > 2 GiB). LUCENE-3659 makes the buf size of RAMDir configureable (depending on IOContext while writing) and when you do new RAMDirectory(otherDir) - to cache the whole dir in RAM - it will use the maximum possible buffer size for the underlying file (2 GiB) - as we dont write and need no smaller buf size.\n\nWe should really get LUCENE-3659 in. The only missing parts are:\n\n\tmake RAMFile visible to ConcurrentMap after IndexOutput is closed, so we dont need synchronization on RAMFile\n\tuse maybe Robert's cool ByteBufferIndexInput from LUCENE-4364\n\n ",
            "author": "Uwe Schindler",
            "id": "comment-13449225"
        },
        {
            "date": "2012-09-06T18:45:56+0000",
            "content": "I am not sure if we really need that directory. With my changes in LUCENE-3659 we can handle that easily (also for files > 2 GiB). LUCENE-3659 makes the buf size of RAMDir configureable (depending on IOContext while writing) and when you do new RAMDirectory(otherDir) - to cache the whole dir in RAM - it will use the maximum possible buffer size for the underlying file (2 GiB) - as we dont write and need no smaller buf size.\n\nActually I think the two dirs have different use cases.\n\nSo I think we should do both: 1) fix RAMDir to do better buffering\n(LUCENE-3659) and 2) add this new dir.\n\nRAMDir is good for pure in-memory indices (for testing, or transient\nusage, etc.) or for pulling in a read-only index from disk, while\nCachingRAMDir (I think we should rename it to CachingDirWrapper) is\ngood if you want to write to the index but also want persistence,\nsince all writes go straight to the wrapped directory.\n\nI don't think the limitations of this dir (max 2.1 GB file size) need\nto block committing ... the javadocs call this out, and we can improve\nit later.  It could be wrapping the byte[] in ByteBuffer and using\nByteBufferII doesn't lose any perf: that would be great. But we can\nexplore that after committing.\n\nBut definitely +1 to get LUCENE-3659 in... ",
            "author": "Michael McCandless",
            "id": "comment-13449931"
        }
    ]
}