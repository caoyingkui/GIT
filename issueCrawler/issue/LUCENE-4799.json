{
    "id": "LUCENE-4799",
    "title": "Enable extraction of originating term for ICU collation keys",
    "details": {
        "components": [
            "core/other"
        ],
        "fix_versions": [],
        "affect_versions": "4.1",
        "priority": "Minor",
        "labels": "",
        "type": "Improvement",
        "resolution": "Unresolved",
        "status": "Open"
    },
    "description": "By concatenating generated ICU collation keys bytes with the originating term, it is possible to extract the originating term at a later time. This makes it possible to build a collator sorted facet field and similar multi-value/document structures.\n\nICU collation keys are guaranteed to be terminated by a 0 (https://ssl.icu-project.org/apiref/icu4j48rc1/com/ibm/icu/text/CollationKey.html) and since comparison of keys stop when a 0 is encountered, the addition of the originating term does not affect sort order. As 0 are only used for termination in the key bytes, the extraction of the originating term is unambiguous.",
    "attachments": {
        "LUCENE-4799.patch": "https://issues.apache.org/jira/secure/attachment/12570956/LUCENE-4799.patch"
    },
    "issue_links": {},
    "comments": [
        {
            "date": "2013-02-26T09:44:59+0000",
            "content": "Patch that enables originating term concatenation for ICUCollatedTermAttributeImpl and related classes.\n\nThe unit-test is ugly and should probably be re-written. ",
            "author": "Toke Eskildsen",
            "id": "comment-13586965"
        },
        {
            "date": "2013-02-26T11:36:22+0000",
            "content": "I think maybe a separate field should be used.\n\nWe discussed this before on the mailing list a while back and I mentioned my concerns. ",
            "author": "Robert Muir",
            "id": "comment-13587037"
        },
        {
            "date": "2013-02-26T12:08:17+0000",
            "content": "\nand since comparison of keys stop when a 0 is encountered, the addition of the originating term does not affect sort order.\n\nThats what won't work here and will cause things to be screwy. This may work with some comparison function written in the C programming language, but doesn't hold here. ",
            "author": "Robert Muir",
            "id": "comment-13587058"
        },
        {
            "date": "2013-02-26T12:11:14+0000",
            "content": "I do not understand what you mean by separate field, Robert? The current patch does not touch Solr's ICUCollationField, but do you mean that Solr support should be added with a new field, such as ICUCollationExtendedField?\n\nYour primary concern, as I understand it, is that there is currently no clean way to perform analysis prior to collation key generation. Without a normalization step, we often end up with multiple keys that should have been the same, such as \"CD\", \"Cd\" and \"cd\".\n\nThe patch is a first shot of originating term support and does not attempt to solve the missing pre-analysis for collation fields, which I find is a wholly separate issue. ",
            "author": "Toke Eskildsen",
            "id": "comment-13587061"
        },
        {
            "date": "2013-02-26T12:23:50+0000",
            "content": "Okay, I see how the order can be affected: If we have two terms that resolve to the same key, the extended version will result in two separate ByteRefs, while the plain version will result in only one. This is a problem if the field is used for sorting of documents and if there is a secondary sort criteria. ",
            "author": "Toke Eskildsen",
            "id": "comment-13587067"
        }
    ]
}